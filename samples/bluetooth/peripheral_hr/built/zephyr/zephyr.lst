
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	2000bba8 	.word	0x2000bba8

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000e41 	.word	0x00000e41
       8:	00000e91 	.word	0x00000e91
       c:	00000d41 	.word	0x00000d41
      10:	00000d41 	.word	0x00000d41
      14:	00000d41 	.word	0x00000d41
      18:	00000d41 	.word	0x00000d41
      1c:	00000d41 	.word	0x00000d41
      20:	00000d41 	.word	0x00000d41
      24:	00000d41 	.word	0x00000d41
      28:	00000d41 	.word	0x00000d41
      2c:	00000ad5 	.word	0x00000ad5
      30:	00000d41 	.word	0x00000d41
      34:	00000d41 	.word	0x00000d41
      38:	00000a91 	.word	0x00000a91
      3c:	00000d41 	.word	0x00000d41

00000040 <_irq_vector_table>:
      40:	00000e05 00010c4f 00000e05 00000e05     ....O...........
      50:	00000e05 00000e05 00000e05 00000e05     ................
      60:	00000e05 00000e05 00000e05 00000e05     ................
      70:	00000e05 00000e05 00000e05 00000e05     ................
      80:	00000e05 00000e05 00000e05 00000e05     ................
      90:	00000e05 00000e05 00000e05 00000e05     ................
      a0:	00000e05 00000e05 00000e05 00000e05     ................
      b0:	00000e05 00000e05 00000e05 00000e05     ................
      c0:	00000e05 00000e05 00000e05 00000e05     ................
      d0:	00000e05 00000e05 00000e05 00000e05     ................
      e0:	00000e05 00000e05 00000e05 00000e05     ................
      f0:	00000e05 00000e05                       ........

000000f8 <_sw_isr_table>:
      f8:	00000000 0000166d 00000000 00000cb9     ....m...........
     108:	00000000 00000cb9 00000000 00000cb9     ................
     118:	00000000 00000cb9 00000000 00000cb9     ................
     128:	00000000 00000cb9 00000000 00000cb9     ................
     138:	00000000 00000cb9 00000000 00000cb9     ................
     148:	00000000 00000cb9 00000000 00010c15     ................
     158:	00000000 00000cb9 2000d020 00001889     ........ .. ....
     168:	00000000 00000cb9 00000000 00000cb9     ................
     178:	00000000 00000cb9 00000000 000019c9     ................
     188:	00000000 00000cb9 00000000 00000cb9     ................
     198:	00000000 00000cb9 00000000 00000cb9     ................
     1a8:	00000000 00000cb9 00000000 00000cb9     ................
     1b8:	00000000 00010c49 00000000 00000cb9     ....I...........
     1c8:	00000000 00000cb9 00000000 00000cb9     ................
     1d8:	00000000 00000cb9 00000000 00000cb9     ................
     1e8:	00000000 00000cb9 00000000 00000cb9     ................
     1f8:	00000000 00000cb9 00000000 00000cb9     ................
     208:	00000000 00000cb9 00000000 00000cb9     ................
     218:	00000000 00000cb9 00000000 00000cb9     ................
     228:	00000000 00000cb9 00000000 00000cb9     ................
     238:	00000000 00000cb9 00000000 00000cb9     ................
     248:	00000000 00000cb9 00000000 00000cb9     ................
     258:	00000000 00000cb9 00000000 00000cb9     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b97a 	b.w	574 <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f806 	bl	298 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__udivmoddi4>:
     298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     29c:	468c      	mov	ip, r1
     29e:	460d      	mov	r5, r1
     2a0:	4604      	mov	r4, r0
     2a2:	9e08      	ldr	r6, [sp, #32]
     2a4:	2b00      	cmp	r3, #0
     2a6:	d151      	bne.n	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     2a8:	428a      	cmp	r2, r1
     2aa:	4617      	mov	r7, r2
     2ac:	d96d      	bls.n	38a <CONFIG_BT_DEVICE_APPEARANCE+0x49>
     2ae:	fab2 fe82 	clz	lr, r2
     2b2:	f1be 0f00 	cmp.w	lr, #0
     2b6:	d00b      	beq.n	2d0 <__udivmoddi4+0x38>
     2b8:	f1ce 0c20 	rsb	ip, lr, #32
     2bc:	fa01 f50e 	lsl.w	r5, r1, lr
     2c0:	fa20 fc0c 	lsr.w	ip, r0, ip
     2c4:	fa02 f70e 	lsl.w	r7, r2, lr
     2c8:	ea4c 0c05 	orr.w	ip, ip, r5
     2cc:	fa00 f40e 	lsl.w	r4, r0, lr
     2d0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2d4:	0c25      	lsrs	r5, r4, #16
     2d6:	fbbc f8fa 	udiv	r8, ip, sl
     2da:	fa1f f987 	uxth.w	r9, r7
     2de:	fb0a cc18 	mls	ip, sl, r8, ip
     2e2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2e6:	fb08 f309 	mul.w	r3, r8, r9
     2ea:	42ab      	cmp	r3, r5
     2ec:	d90a      	bls.n	304 <__udivmoddi4+0x6c>
     2ee:	19ed      	adds	r5, r5, r7
     2f0:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2f4:	f080 8123 	bcs.w	53e <CONFIG_BT_L2CAP_TX_MTU+0x2a>
     2f8:	42ab      	cmp	r3, r5
     2fa:	f240 8120 	bls.w	53e <CONFIG_BT_L2CAP_TX_MTU+0x2a>
     2fe:	f1a8 0802 	sub.w	r8, r8, #2
     302:	443d      	add	r5, r7
     304:	1aed      	subs	r5, r5, r3
     306:	b2a4      	uxth	r4, r4
     308:	fbb5 f0fa 	udiv	r0, r5, sl
     30c:	fb0a 5510 	mls	r5, sl, r0, r5
     310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     314:	fb00 f909 	mul.w	r9, r0, r9
     318:	45a1      	cmp	r9, r4
     31a:	d909      	bls.n	330 <__udivmoddi4+0x98>
     31c:	19e4      	adds	r4, r4, r7
     31e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     322:	f080 810a 	bcs.w	53a <CONFIG_BT_L2CAP_TX_MTU+0x26>
     326:	45a1      	cmp	r9, r4
     328:	f240 8107 	bls.w	53a <CONFIG_BT_L2CAP_TX_MTU+0x26>
     32c:	3802      	subs	r0, #2
     32e:	443c      	add	r4, r7
     330:	eba4 0409 	sub.w	r4, r4, r9
     334:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     338:	2100      	movs	r1, #0
     33a:	2e00      	cmp	r6, #0
     33c:	d061      	beq.n	402 <CONFIG_BT_RX_STACK_SIZE+0x2>
     33e:	fa24 f40e 	lsr.w	r4, r4, lr
     342:	2300      	movs	r3, #0
     344:	6034      	str	r4, [r6, #0]
     346:	6073      	str	r3, [r6, #4]
     348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     34c:	428b      	cmp	r3, r1
     34e:	d907      	bls.n	360 <CONFIG_BT_DEVICE_APPEARANCE+0x1f>
     350:	2e00      	cmp	r6, #0
     352:	d054      	beq.n	3fe <CONFIG_BT_DEVICE_APPEARANCE+0xbd>
     354:	2100      	movs	r1, #0
     356:	e886 0021 	stmia.w	r6, {r0, r5}
     35a:	4608      	mov	r0, r1
     35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     360:	fab3 f183 	clz	r1, r3
     364:	2900      	cmp	r1, #0
     366:	f040 808e 	bne.w	486 <CONFIG_BT_RX_STACK_SIZE+0x86>
     36a:	42ab      	cmp	r3, r5
     36c:	d302      	bcc.n	374 <CONFIG_BT_DEVICE_APPEARANCE+0x33>
     36e:	4282      	cmp	r2, r0
     370:	f200 80fa 	bhi.w	568 <CONFIG_BT_L2CAP_TX_MTU+0x54>
     374:	1a84      	subs	r4, r0, r2
     376:	eb65 0503 	sbc.w	r5, r5, r3
     37a:	2001      	movs	r0, #1
     37c:	46ac      	mov	ip, r5
     37e:	2e00      	cmp	r6, #0
     380:	d03f      	beq.n	402 <CONFIG_BT_RX_STACK_SIZE+0x2>
     382:	e886 1010 	stmia.w	r6, {r4, ip}
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	b912      	cbnz	r2, 392 <CONFIG_BT_DEVICE_APPEARANCE+0x51>
     38c:	2701      	movs	r7, #1
     38e:	fbb7 f7f2 	udiv	r7, r7, r2
     392:	fab7 fe87 	clz	lr, r7
     396:	f1be 0f00 	cmp.w	lr, #0
     39a:	d134      	bne.n	406 <CONFIG_BT_RX_STACK_SIZE+0x6>
     39c:	1beb      	subs	r3, r5, r7
     39e:	0c3a      	lsrs	r2, r7, #16
     3a0:	fa1f fc87 	uxth.w	ip, r7
     3a4:	2101      	movs	r1, #1
     3a6:	fbb3 f8f2 	udiv	r8, r3, r2
     3aa:	0c25      	lsrs	r5, r4, #16
     3ac:	fb02 3318 	mls	r3, r2, r8, r3
     3b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3b4:	fb0c f308 	mul.w	r3, ip, r8
     3b8:	42ab      	cmp	r3, r5
     3ba:	d907      	bls.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     3bc:	19ed      	adds	r5, r5, r7
     3be:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3c2:	d202      	bcs.n	3ca <CONFIG_BT_DEVICE_APPEARANCE+0x89>
     3c4:	42ab      	cmp	r3, r5
     3c6:	f200 80d1 	bhi.w	56c <CONFIG_BT_L2CAP_TX_MTU+0x58>
     3ca:	4680      	mov	r8, r0
     3cc:	1aed      	subs	r5, r5, r3
     3ce:	b2a3      	uxth	r3, r4
     3d0:	fbb5 f0f2 	udiv	r0, r5, r2
     3d4:	fb02 5510 	mls	r5, r2, r0, r5
     3d8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3dc:	fb0c fc00 	mul.w	ip, ip, r0
     3e0:	45a4      	cmp	ip, r4
     3e2:	d907      	bls.n	3f4 <CONFIG_BT_DEVICE_APPEARANCE+0xb3>
     3e4:	19e4      	adds	r4, r4, r7
     3e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <CONFIG_BT_DEVICE_APPEARANCE+0xb1>
     3ec:	45a4      	cmp	ip, r4
     3ee:	f200 80b8 	bhi.w	562 <CONFIG_BT_L2CAP_TX_MTU+0x4e>
     3f2:	4618      	mov	r0, r3
     3f4:	eba4 040c 	sub.w	r4, r4, ip
     3f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3fc:	e79d      	b.n	33a <__udivmoddi4+0xa2>
     3fe:	4631      	mov	r1, r6
     400:	4630      	mov	r0, r6
     402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     406:	f1ce 0420 	rsb	r4, lr, #32
     40a:	fa05 f30e 	lsl.w	r3, r5, lr
     40e:	fa07 f70e 	lsl.w	r7, r7, lr
     412:	fa20 f804 	lsr.w	r8, r0, r4
     416:	0c3a      	lsrs	r2, r7, #16
     418:	fa25 f404 	lsr.w	r4, r5, r4
     41c:	ea48 0803 	orr.w	r8, r8, r3
     420:	fbb4 f1f2 	udiv	r1, r4, r2
     424:	ea4f 4518 	mov.w	r5, r8, lsr #16
     428:	fb02 4411 	mls	r4, r2, r1, r4
     42c:	fa1f fc87 	uxth.w	ip, r7
     430:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     434:	fb01 f30c 	mul.w	r3, r1, ip
     438:	42ab      	cmp	r3, r5
     43a:	fa00 f40e 	lsl.w	r4, r0, lr
     43e:	d909      	bls.n	454 <CONFIG_BT_RX_STACK_SIZE+0x54>
     440:	19ed      	adds	r5, r5, r7
     442:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     446:	f080 808a 	bcs.w	55e <CONFIG_BT_L2CAP_TX_MTU+0x4a>
     44a:	42ab      	cmp	r3, r5
     44c:	f240 8087 	bls.w	55e <CONFIG_BT_L2CAP_TX_MTU+0x4a>
     450:	3902      	subs	r1, #2
     452:	443d      	add	r5, r7
     454:	1aeb      	subs	r3, r5, r3
     456:	fa1f f588 	uxth.w	r5, r8
     45a:	fbb3 f0f2 	udiv	r0, r3, r2
     45e:	fb02 3310 	mls	r3, r2, r0, r3
     462:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     466:	fb00 f30c 	mul.w	r3, r0, ip
     46a:	42ab      	cmp	r3, r5
     46c:	d907      	bls.n	47e <CONFIG_BT_RX_STACK_SIZE+0x7e>
     46e:	19ed      	adds	r5, r5, r7
     470:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     474:	d26f      	bcs.n	556 <CONFIG_BT_L2CAP_TX_MTU+0x42>
     476:	42ab      	cmp	r3, r5
     478:	d96d      	bls.n	556 <CONFIG_BT_L2CAP_TX_MTU+0x42>
     47a:	3802      	subs	r0, #2
     47c:	443d      	add	r5, r7
     47e:	1aeb      	subs	r3, r5, r3
     480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     484:	e78f      	b.n	3a6 <CONFIG_BT_DEVICE_APPEARANCE+0x65>
     486:	f1c1 0720 	rsb	r7, r1, #32
     48a:	fa22 f807 	lsr.w	r8, r2, r7
     48e:	408b      	lsls	r3, r1
     490:	fa05 f401 	lsl.w	r4, r5, r1
     494:	ea48 0303 	orr.w	r3, r8, r3
     498:	fa20 fe07 	lsr.w	lr, r0, r7
     49c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4a0:	40fd      	lsrs	r5, r7
     4a2:	ea4e 0e04 	orr.w	lr, lr, r4
     4a6:	fbb5 f9fc 	udiv	r9, r5, ip
     4aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4ae:	fb0c 5519 	mls	r5, ip, r9, r5
     4b2:	fa1f f883 	uxth.w	r8, r3
     4b6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4ba:	fb09 f408 	mul.w	r4, r9, r8
     4be:	42ac      	cmp	r4, r5
     4c0:	fa02 f201 	lsl.w	r2, r2, r1
     4c4:	fa00 fa01 	lsl.w	sl, r0, r1
     4c8:	d908      	bls.n	4dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
     4ca:	18ed      	adds	r5, r5, r3
     4cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4d0:	d243      	bcs.n	55a <CONFIG_BT_L2CAP_TX_MTU+0x46>
     4d2:	42ac      	cmp	r4, r5
     4d4:	d941      	bls.n	55a <CONFIG_BT_L2CAP_TX_MTU+0x46>
     4d6:	f1a9 0902 	sub.w	r9, r9, #2
     4da:	441d      	add	r5, r3
     4dc:	1b2d      	subs	r5, r5, r4
     4de:	fa1f fe8e 	uxth.w	lr, lr
     4e2:	fbb5 f0fc 	udiv	r0, r5, ip
     4e6:	fb0c 5510 	mls	r5, ip, r0, r5
     4ea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4ee:	fb00 f808 	mul.w	r8, r0, r8
     4f2:	45a0      	cmp	r8, r4
     4f4:	d907      	bls.n	506 <CONFIG_BT_RX_STACK_SIZE+0x106>
     4f6:	18e4      	adds	r4, r4, r3
     4f8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4fc:	d229      	bcs.n	552 <CONFIG_BT_L2CAP_TX_MTU+0x3e>
     4fe:	45a0      	cmp	r8, r4
     500:	d927      	bls.n	552 <CONFIG_BT_L2CAP_TX_MTU+0x3e>
     502:	3802      	subs	r0, #2
     504:	441c      	add	r4, r3
     506:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     50a:	eba4 0408 	sub.w	r4, r4, r8
     50e:	fba0 8902 	umull	r8, r9, r0, r2
     512:	454c      	cmp	r4, r9
     514:	46c6      	mov	lr, r8
     516:	464d      	mov	r5, r9
     518:	d315      	bcc.n	546 <CONFIG_BT_L2CAP_TX_MTU+0x32>
     51a:	d012      	beq.n	542 <CONFIG_BT_L2CAP_TX_MTU+0x2e>
     51c:	b156      	cbz	r6, 534 <CONFIG_BT_L2CAP_TX_MTU+0x20>
     51e:	ebba 030e 	subs.w	r3, sl, lr
     522:	eb64 0405 	sbc.w	r4, r4, r5
     526:	fa04 f707 	lsl.w	r7, r4, r7
     52a:	40cb      	lsrs	r3, r1
     52c:	431f      	orrs	r7, r3
     52e:	40cc      	lsrs	r4, r1
     530:	6037      	str	r7, [r6, #0]
     532:	6074      	str	r4, [r6, #4]
     534:	2100      	movs	r1, #0
     536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     53a:	4618      	mov	r0, r3
     53c:	e6f8      	b.n	330 <__udivmoddi4+0x98>
     53e:	4690      	mov	r8, r2
     540:	e6e0      	b.n	304 <__udivmoddi4+0x6c>
     542:	45c2      	cmp	sl, r8
     544:	d2ea      	bcs.n	51c <CONFIG_BT_L2CAP_TX_MTU+0x8>
     546:	ebb8 0e02 	subs.w	lr, r8, r2
     54a:	eb69 0503 	sbc.w	r5, r9, r3
     54e:	3801      	subs	r0, #1
     550:	e7e4      	b.n	51c <CONFIG_BT_L2CAP_TX_MTU+0x8>
     552:	4628      	mov	r0, r5
     554:	e7d7      	b.n	506 <CONFIG_BT_RX_STACK_SIZE+0x106>
     556:	4640      	mov	r0, r8
     558:	e791      	b.n	47e <CONFIG_BT_RX_STACK_SIZE+0x7e>
     55a:	4681      	mov	r9, r0
     55c:	e7be      	b.n	4dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
     55e:	4601      	mov	r1, r0
     560:	e778      	b.n	454 <CONFIG_BT_RX_STACK_SIZE+0x54>
     562:	3802      	subs	r0, #2
     564:	443c      	add	r4, r7
     566:	e745      	b.n	3f4 <CONFIG_BT_DEVICE_APPEARANCE+0xb3>
     568:	4608      	mov	r0, r1
     56a:	e708      	b.n	37e <CONFIG_BT_DEVICE_APPEARANCE+0x3d>
     56c:	f1a8 0802 	sub.w	r8, r8, #2
     570:	443d      	add	r5, r7
     572:	e72b      	b.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>

00000574 <__aeabi_idiv0>:
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     578:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     57a:	4603      	mov	r3, r0
     57c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     580:	b90a      	cbnz	r2, 586 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     582:	701a      	strb	r2, [r3, #0]

	return dest;
}
     584:	4770      	bx	lr
		*d = *s;
     586:	f803 2b01 	strb.w	r2, [r3], #1
     58a:	e7f7      	b.n	57c <strcpy+0x4>

0000058c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     58c:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     58e:	4603      	mov	r3, r0
     590:	1a98      	subs	r0, r3, r2
     592:	f813 1b01 	ldrb.w	r1, [r3], #1
     596:	2900      	cmp	r1, #0
     598:	d1fa      	bne.n	590 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
     59a:	4770      	bx	lr

0000059c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     59c:	3801      	subs	r0, #1
     59e:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	4293      	cmp	r3, r2
     5aa:	d102      	bne.n	5b2 <strcmp+0x16>
     5ac:	2b00      	cmp	r3, #0
     5ae:	d1f7      	bne.n	5a0 <strcmp+0x4>
     5b0:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5b2:	1a98      	subs	r0, r3, r2
     5b4:	4770      	bx	lr

000005b6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5b6:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5b8:	b182      	cbz	r2, 5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5ba:	3a01      	subs	r2, #1
     5bc:	460c      	mov	r4, r1
     5be:	4603      	mov	r3, r0
     5c0:	d103      	bne.n	5ca <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5c2:	781a      	ldrb	r2, [r3, #0]
     5c4:	7820      	ldrb	r0, [r4, #0]
     5c6:	1a10      	subs	r0, r2, r0
     5c8:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     5ca:	781e      	ldrb	r6, [r3, #0]
     5cc:	7825      	ldrb	r5, [r4, #0]
     5ce:	42ae      	cmp	r6, r5
     5d0:	f100 0001 	add.w	r0, r0, #1
     5d4:	f101 0101 	add.w	r1, r1, #1
     5d8:	d0ef      	beq.n	5ba <memcmp+0x4>
     5da:	e7f2      	b.n	5c2 <memcmp+0xc>
		return 0;
     5dc:	4610      	mov	r0, r2
}
     5de:	bd70      	pop	{r4, r5, r6, pc}

000005e0 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5e0:	ea81 0300 	eor.w	r3, r1, r0
     5e4:	f013 0f03 	tst.w	r3, #3
{
     5e8:	b570      	push	{r4, r5, r6, lr}
     5ea:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5ec:	d00b      	beq.n	606 <CONFIG_BT_CTLR_COMPANY_ID+0x15>
     5ee:	3b01      	subs	r3, #1
     5f0:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     5f2:	4291      	cmp	r1, r2
     5f4:	d11b      	bne.n	62e <CONFIG_BT_CTLR_COMPANY_ID+0x3d>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     5f8:	2a00      	cmp	r2, #0
     5fa:	d0fc      	beq.n	5f6 <CONFIG_BT_CTLR_COMPANY_ID+0x5>
			*(d_byte++) = *(s_byte++);
     5fc:	f811 4b01 	ldrb.w	r4, [r1], #1
     600:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     604:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     606:	079c      	lsls	r4, r3, #30
     608:	d1f6      	bne.n	5f8 <CONFIG_BT_CTLR_COMPANY_ID+0x7>
     60a:	1f1e      	subs	r6, r3, #4
     60c:	460d      	mov	r5, r1
     60e:	1b54      	subs	r4, r2, r5
     610:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     612:	2c03      	cmp	r4, #3
     614:	d806      	bhi.n	624 <CONFIG_BT_CTLR_COMPANY_ID+0x33>
     616:	f022 0403 	bic.w	r4, r2, #3
     61a:	4421      	add	r1, r4
     61c:	4423      	add	r3, r4
     61e:	f002 0203 	and.w	r2, r2, #3
     622:	e7e4      	b.n	5ee <memcpy+0xe>
			*(d_word++) = *(s_word++);
     624:	f855 4b04 	ldr.w	r4, [r5], #4
     628:	f846 4f04 	str.w	r4, [r6, #4]!
     62c:	e7ef      	b.n	60e <CONFIG_BT_CTLR_COMPANY_ID+0x1d>
		*(d_byte++) = *(s_byte++);
     62e:	f811 4b01 	ldrb.w	r4, [r1], #1
     632:	f803 4f01 	strb.w	r4, [r3, #1]!
     636:	e7dc      	b.n	5f2 <CONFIG_BT_CTLR_COMPANY_ID+0x1>

00000638 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     638:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     63a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     63c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     63e:	079c      	lsls	r4, r3, #30
     640:	d111      	bne.n	666 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     642:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     646:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     64a:	461e      	mov	r6, r3
     64c:	1b95      	subs	r5, r2, r6
     64e:	441d      	add	r5, r3
     650:	2d03      	cmp	r5, #3
     652:	d80e      	bhi.n	672 <memset+0x3a>
     654:	f022 0403 	bic.w	r4, r2, #3
     658:	4423      	add	r3, r4
     65a:	f002 0203 	and.w	r2, r2, #3
     65e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     660:	4293      	cmp	r3, r2
     662:	d109      	bne.n	678 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     664:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     666:	2a00      	cmp	r2, #0
     668:	d0fc      	beq.n	664 <memset+0x2c>
		*(d_byte++) = c_byte;
     66a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     66e:	3a01      	subs	r2, #1
     670:	e7e5      	b.n	63e <memset+0x6>
		*(d_word++) = c_word;
     672:	f846 4b04 	str.w	r4, [r6], #4
     676:	e7e9      	b.n	64c <memset+0x14>
		*(d_byte++) = c_byte;
     678:	f803 1b01 	strb.w	r1, [r3], #1
     67c:	e7f0      	b.n	660 <memset+0x28>
	...

00000680 <blvl_ccc_cfg_changed>:
static u8_t battery = 100;

static void blvl_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_blvl = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     680:	1e4b      	subs	r3, r1, #1
     682:	4259      	negs	r1, r3
     684:	4159      	adcs	r1, r3
     686:	4b01      	ldr	r3, [pc, #4]	; (68c <blvl_ccc_cfg_changed+0xc>)
     688:	7019      	strb	r1, [r3, #0]
     68a:	4770      	bx	lr
     68c:	20000020 	.word	0x20000020

00000690 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const char *value = attr->user_data;

	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
     692:	2401      	movs	r4, #1
     694:	9402      	str	r4, [sp, #8]
     696:	68cc      	ldr	r4, [r1, #12]
     698:	9401      	str	r4, [sp, #4]
     69a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
     69e:	9400      	str	r4, [sp, #0]
     6a0:	f005 fc2d 	bl	5efe <bt_gatt_attr_read>
				 sizeof(*value));
}
     6a4:	b004      	add	sp, #16
     6a6:	bd10      	pop	{r4, pc}

000006a8 <bas_init>:

static struct bt_gatt_service bas_svc = BT_GATT_SERVICE(attrs);

void bas_init(void)
{
	bt_gatt_service_register(&bas_svc);
     6a8:	4801      	ldr	r0, [pc, #4]	; (6b0 <bas_init+0x8>)
     6aa:	f005 bbf7 	b.w	5e9c <bt_gatt_service_register>
     6ae:	bf00      	nop
     6b0:	2000c968 	.word	0x2000c968

000006b4 <read_manuf>:
}

static ssize_t read_manuf(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  u16_t len, u16_t offset)
{
     6b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     6b8:	4698      	mov	r8, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
     6ba:	4b0b      	ldr	r3, [pc, #44]	; (6e8 <read_manuf+0x34>)
     6bc:	681c      	ldr	r4, [r3, #0]
{
     6be:	4605      	mov	r5, r0
				 strlen(dis_manuf));
     6c0:	4620      	mov	r0, r4
{
     6c2:	460e      	mov	r6, r1
     6c4:	4617      	mov	r7, r2
				 strlen(dis_manuf));
     6c6:	f7ff ff61 	bl	58c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_manuf,
     6ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     6ce:	9300      	str	r3, [sp, #0]
     6d0:	b280      	uxth	r0, r0
     6d2:	9002      	str	r0, [sp, #8]
     6d4:	9401      	str	r4, [sp, #4]
     6d6:	4643      	mov	r3, r8
     6d8:	463a      	mov	r2, r7
     6da:	4631      	mov	r1, r6
     6dc:	4628      	mov	r0, r5
     6de:	f005 fc0e 	bl	5efe <bt_gatt_attr_read>
}
     6e2:	b004      	add	sp, #16
     6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     6e8:	20000024 	.word	0x20000024

000006ec <read_model>:
{
     6ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     6f0:	4698      	mov	r8, r3
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
     6f2:	4b0b      	ldr	r3, [pc, #44]	; (720 <read_model+0x34>)
     6f4:	681c      	ldr	r4, [r3, #0]
{
     6f6:	4605      	mov	r5, r0
				 strlen(dis_model));
     6f8:	4620      	mov	r0, r4
{
     6fa:	460e      	mov	r6, r1
     6fc:	4617      	mov	r7, r2
				 strlen(dis_model));
     6fe:	f7ff ff45 	bl	58c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, dis_model,
     702:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     706:	9300      	str	r3, [sp, #0]
     708:	b280      	uxth	r0, r0
     70a:	9002      	str	r0, [sp, #8]
     70c:	9401      	str	r4, [sp, #4]
     70e:	4643      	mov	r3, r8
     710:	463a      	mov	r2, r7
     712:	4631      	mov	r1, r6
     714:	4628      	mov	r0, r5
     716:	f005 fbf2 	bl	5efe <bt_gatt_attr_read>
}
     71a:	b004      	add	sp, #16
     71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     720:	20000028 	.word	0x20000028

00000724 <dis_init>:

static struct bt_gatt_service dis_svc = BT_GATT_SERVICE(attrs);

void dis_init(const char *model, const char *manuf)
{
	dis_model = model;
     724:	4b03      	ldr	r3, [pc, #12]	; (734 <dis_init+0x10>)
     726:	6018      	str	r0, [r3, #0]
	dis_manuf = manuf;
     728:	4b03      	ldr	r3, [pc, #12]	; (738 <dis_init+0x14>)

	bt_gatt_service_register(&dis_svc);
     72a:	4804      	ldr	r0, [pc, #16]	; (73c <dis_init+0x18>)
	dis_manuf = manuf;
     72c:	6019      	str	r1, [r3, #0]
	bt_gatt_service_register(&dis_svc);
     72e:	f005 bbb5 	b.w	5e9c <bt_gatt_service_register>
     732:	bf00      	nop
     734:	20000028 	.word	0x20000028
     738:	20000024 	.word	0x20000024
     73c:	2000ca0c 	.word	0x2000ca0c

00000740 <hrmc_ccc_cfg_changed>:
static u8_t hrs_blsc;

static void hrmc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 u16_t value)
{
	simulate_hrm = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
     740:	1e4b      	subs	r3, r1, #1
     742:	4259      	negs	r1, r3
     744:	4159      	adcs	r1, r3
     746:	4b01      	ldr	r3, [pc, #4]	; (74c <hrmc_ccc_cfg_changed+0xc>)
     748:	7019      	strb	r1, [r3, #0]
     74a:	4770      	bx	lr
     74c:	200000b1 	.word	0x200000b1

00000750 <read_blsc>:
}

static ssize_t read_blsc(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 void *buf, u16_t len, u16_t offset)
{
     750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
     752:	2401      	movs	r4, #1
     754:	9402      	str	r4, [sp, #8]
     756:	4c04      	ldr	r4, [pc, #16]	; (768 <read_blsc+0x18>)
     758:	9401      	str	r4, [sp, #4]
     75a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
     75e:	9400      	str	r4, [sp, #0]
     760:	f005 fbcd 	bl	5efe <bt_gatt_attr_read>
				 sizeof(hrs_blsc));
}
     764:	b004      	add	sp, #16
     766:	bd10      	pop	{r4, pc}
     768:	200000b0 	.word	0x200000b0

0000076c <hrs_init>:

static struct bt_gatt_service hrs_svc = BT_GATT_SERVICE(attrs);

void hrs_init(u8_t blsc)
{
	hrs_blsc = blsc;
     76c:	4b02      	ldr	r3, [pc, #8]	; (778 <hrs_init+0xc>)
     76e:	7018      	strb	r0, [r3, #0]

	bt_gatt_service_register(&hrs_svc);
     770:	4802      	ldr	r0, [pc, #8]	; (77c <hrs_init+0x10>)
     772:	f005 bb93 	b.w	5e9c <bt_gatt_service_register>
     776:	bf00      	nop
     778:	200000b0 	.word	0x200000b0
     77c:	2000cb14 	.word	0x2000cb14

00000780 <hrs_notify>:
void hrs_notify(void)
{
	static u8_t hrm[100];

	/* Heartrate measurements simulation */
	if (!simulate_hrm) {
     780:	4b0a      	ldr	r3, [pc, #40]	; (7ac <hrs_notify+0x2c>)
     782:	781b      	ldrb	r3, [r3, #0]
     784:	b18b      	cbz	r3, 7aa <hrs_notify+0x2a>
		return;
	}

	heartrate++;
     786:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <hrs_notify+0x30>)
     788:	781a      	ldrb	r2, [r3, #0]
     78a:	3201      	adds	r2, #1
     78c:	b2d2      	uxtb	r2, r2
	if (heartrate == 160) {
     78e:	2aa0      	cmp	r2, #160	; 0xa0
		heartrate = 90;
     790:	bf08      	it	eq
     792:	225a      	moveq	r2, #90	; 0x5a
     794:	701a      	strb	r2, [r3, #0]
	}

	hrm[0] = 0x06; /* uint8, sensor contact */
     796:	4a07      	ldr	r2, [pc, #28]	; (7b4 <hrs_notify+0x34>)
	hrm[1] = heartrate;
     798:	781b      	ldrb	r3, [r3, #0]
     79a:	7053      	strb	r3, [r2, #1]
	hrm[0] = 0x06; /* uint8, sensor contact */
     79c:	2106      	movs	r1, #6
     79e:	7011      	strb	r1, [r2, #0]
// /	hrm[999] = 0x01;

	bt_gatt_notify(NULL, &attrs[2], &hrm, sizeof(hrm));
     7a0:	2364      	movs	r3, #100	; 0x64
     7a2:	4905      	ldr	r1, [pc, #20]	; (7b8 <hrs_notify+0x38>)
     7a4:	2000      	movs	r0, #0
     7a6:	f005 bc8b 	b.w	60c0 <bt_gatt_notify>
     7aa:	4770      	bx	lr
     7ac:	200000b1 	.word	0x200000b1
     7b0:	2000cb10 	.word	0x2000cb10
     7b4:	2000002c 	.word	0x2000002c
     7b8:	2000ca98 	.word	0x2000ca98

000007bc <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     7bc:	b510      	push	{r4, lr}
	printk("Disconnected (reason %u)\n", reason);

	if (default_conn) {
     7be:	4c04      	ldr	r4, [pc, #16]	; (7d0 <disconnected+0x14>)
     7c0:	6820      	ldr	r0, [r4, #0]
     7c2:	b118      	cbz	r0, 7cc <disconnected+0x10>
		bt_conn_unref(default_conn);
     7c4:	f003 fca1 	bl	410a <bt_conn_unref>
		default_conn = NULL;
     7c8:	2300      	movs	r3, #0
     7ca:	6023      	str	r3, [r4, #0]
     7cc:	bd10      	pop	{r4, pc}
     7ce:	bf00      	nop
     7d0:	20002b2c 	.word	0x20002b2c

000007d4 <auth_cancel>:

	printk("Advertising successfully started\n");
}

static void auth_cancel(struct bt_conn *conn)
{
     7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     7d6:	f003 fc9b 	bl	4110 <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     7da:	7803      	ldrb	r3, [r0, #0]
     7dc:	2b03      	cmp	r3, #3
     7de:	d807      	bhi.n	7f0 <auth_cancel+0x1c>
     7e0:	e8df f003 	tbb	[pc, r3]
     7e4:	0d0b0902 	.word	0x0d0b0902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     7e8:	4906      	ldr	r1, [pc, #24]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
		break;
	case BT_ADDR_LE_PUBLIC_ID:
		strcpy(type, "public id");
		break;
	case BT_ADDR_LE_RANDOM_ID:
		strcpy(type, "random id");
     7ea:	a801      	add	r0, sp, #4
     7ec:	f7ff fec4 	bl	578 <strcpy>

	printk("Pairing cancelled: %s\n", addr);
}
     7f0:	b005      	add	sp, #20
     7f2:	f85d fb04 	ldr.w	pc, [sp], #4
		strcpy(type, "random");
     7f6:	4904      	ldr	r1, [pc, #16]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7f8:	e7f7      	b.n	7ea <auth_cancel+0x16>
		strcpy(type, "public id");
     7fa:	4904      	ldr	r1, [pc, #16]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
     7fc:	e7f5      	b.n	7ea <auth_cancel+0x16>
		strcpy(type, "random id");
     7fe:	4904      	ldr	r1, [pc, #16]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     800:	e7f3      	b.n	7ea <auth_cancel+0x16>
     802:	bf00      	nop
     804:	00014914 	.word	0x00014914
     808:	0001491b 	.word	0x0001491b
     80c:	00014922 	.word	0x00014922
     810:	0001492c 	.word	0x0001492c

00000814 <connected>:
{
     814:	b508      	push	{r3, lr}
	if (err) {
     816:	b919      	cbnz	r1, 820 <connected+0xc>
		default_conn = bt_conn_ref(conn);
     818:	f003 fc70 	bl	40fc <bt_conn_ref>
     81c:	4b01      	ldr	r3, [pc, #4]	; (824 <connected+0x10>)
     81e:	6018      	str	r0, [r3, #0]
     820:	bd08      	pop	{r3, pc}
     822:	bf00      	nop
     824:	20002b2c 	.word	0x20002b2c

00000828 <bt_ready>:
{
     828:	b510      	push	{r4, lr}
	if (err) {
     82a:	4604      	mov	r4, r0
{
     82c:	b086      	sub	sp, #24
	if (err) {
     82e:	b9e8      	cbnz	r0, 86c <bt_ready+0x44>
	hrs_init(0x01);
     830:	2001      	movs	r0, #1
     832:	f7ff ff9b 	bl	76c <hrs_init>
	bas_init();
     836:	f7ff ff37 	bl	6a8 <bas_init>
	dis_init(CONFIG_SOC, "Manufacturer");
     83a:	490d      	ldr	r1, [pc, #52]	; (870 <bt_ready+0x48>)
     83c:	480d      	ldr	r0, [pc, #52]	; (874 <bt_ready+0x4c>)
     83e:	f7ff ff71 	bl	724 <dis_init>
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     842:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
     846:	2301      	movs	r3, #1
     848:	9403      	str	r4, [sp, #12]
     84a:	f8ad 200e 	strh.w	r2, [sp, #14]
     84e:	f643 6290 	movw	r2, #16016	; 0x3e90
     852:	9404      	str	r4, [sp, #16]
     854:	f88d 300c 	strb.w	r3, [sp, #12]
     858:	f8ad 2010 	strh.w	r2, [sp, #16]
     85c:	9300      	str	r3, [sp, #0]
     85e:	2202      	movs	r2, #2
     860:	4b05      	ldr	r3, [pc, #20]	; (878 <bt_ready+0x50>)
     862:	4906      	ldr	r1, [pc, #24]	; (87c <bt_ready+0x54>)
     864:	9405      	str	r4, [sp, #20]
     866:	a803      	add	r0, sp, #12
     868:	f002 ffb0 	bl	37cc <bt_le_adv_start>
}
     86c:	b006      	add	sp, #24
     86e:	bd10      	pop	{r4, pc}
     870:	00014936 	.word	0x00014936
     874:	00014943 	.word	0x00014943
     878:	00014954 	.word	0x00014954
     87c:	00014904 	.word	0x00014904

00000880 <main>:
static struct bt_conn_auth_cb auth_cb_display = {
	.cancel = auth_cancel,
};

void main(void)
{
     880:	b538      	push	{r3, r4, r5, lr}
	int err;
	int count = 100;

	err = bt_enable(bt_ready);
     882:	480b      	ldr	r0, [pc, #44]	; (8b0 <main+0x30>)
     884:	f002 ff4a 	bl	371c <bt_enable>
	if (err) {
     888:	b988      	cbnz	r0, 8ae <main+0x2e>
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	bt_conn_cb_register(&conn_callbacks);
     88a:	480a      	ldr	r0, [pc, #40]	; (8b4 <main+0x34>)

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     88c:	4d0a      	ldr	r5, [pc, #40]	; (8b8 <main+0x38>)
     88e:	f003 f997 	bl	3bc0 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
     892:	480a      	ldr	r0, [pc, #40]	; (8bc <main+0x3c>)
     894:	f003 fd92 	bl	43bc <bt_conn_auth_cb_register>
     898:	2464      	movs	r4, #100	; 0x64
     89a:	20fa      	movs	r0, #250	; 0xfa
     89c:	f013 f91e 	bl	13adc <_impl_k_sleep>
	 * of starting delayed work so we do it here
	 */
	while (count) {
		k_sleep(250);	
		/* Heartrate measurements simulation */
		hrs_notify();
     8a0:	f7ff ff6e 	bl	780 <hrs_notify>
     8a4:	4628      	mov	r0, r5
     8a6:	f013 f919 	bl	13adc <_impl_k_sleep>
	while (count) {
     8aa:	3c01      	subs	r4, #1
     8ac:	d1f5      	bne.n	89a <main+0x1a>
     8ae:	bd38      	pop	{r3, r4, r5, pc}
     8b0:	00000829 	.word	0x00000829
     8b4:	2000cb3c 	.word	0x2000cb3c
     8b8:	000493e0 	.word	0x000493e0
     8bc:	2000cb28 	.word	0x2000cb28

000008c0 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     8c0:	4b05      	ldr	r3, [pc, #20]	; (8d8 <errata_103+0x18>)
     8c2:	681b      	ldr	r3, [r3, #0]
     8c4:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     8c6:	bf01      	itttt	eq
     8c8:	4b04      	ldreq	r3, [pc, #16]	; (8dc <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     8ca:	6818      	ldreq	r0, [r3, #0]
     8cc:	fab0 f080 	clzeq	r0, r0
     8d0:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     8d2:	bf18      	it	ne
     8d4:	2000      	movne	r0, #0
}
     8d6:	4770      	bx	lr
     8d8:	10000130 	.word	0x10000130
     8dc:	10000134 	.word	0x10000134

000008e0 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     8e0:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     8e2:	f04f 0320 	mov.w	r3, #32
     8e6:	f3ef 8111 	mrs	r1, BASEPRI
     8ea:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     8ee:	f7ff ffe7 	bl	8c0 <errata_103>
     8f2:	b140      	cbz	r0, 906 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     8f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     8f8:	2200      	movs	r2, #0
     8fa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     8fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     902:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     906:	f7ff ffdb 	bl	8c0 <errata_103>
     90a:	b110      	cbz	r0, 912 <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     90c:	4b38      	ldr	r3, [pc, #224]	; (9f0 <nordicsemi_nrf52_init+0x110>)
     90e:	4a39      	ldr	r2, [pc, #228]	; (9f4 <nordicsemi_nrf52_init+0x114>)
     910:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     912:	f7ff ffd5 	bl	8c0 <errata_103>
     916:	b118      	cbz	r0, 920 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     918:	4b37      	ldr	r3, [pc, #220]	; (9f8 <nordicsemi_nrf52_init+0x118>)
     91a:	22fb      	movs	r2, #251	; 0xfb
     91c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     920:	f7ff ffce 	bl	8c0 <errata_103>
     924:	b148      	cbz	r0, 93a <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     926:	4835      	ldr	r0, [pc, #212]	; (9fc <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     928:	4b35      	ldr	r3, [pc, #212]	; (a00 <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     92a:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     92c:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     92e:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     932:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     936:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     938:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     93a:	f7ff ffc1 	bl	8c0 <errata_103>
     93e:	b118      	cbz	r0, 948 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     940:	4b30      	ldr	r3, [pc, #192]	; (a04 <nordicsemi_nrf52_init+0x124>)
     942:	f44f 7200 	mov.w	r2, #512	; 0x200
     946:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     948:	f7ff ffba 	bl	8c0 <errata_103>
     94c:	b148      	cbz	r0, 962 <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     94e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     952:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     956:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     958:	bf44      	itt	mi
     95a:	f06f 0201 	mvnmi.w	r2, #1
     95e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     962:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     966:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     96a:	2a00      	cmp	r2, #0
     96c:	db03      	blt.n	976 <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     96e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     972:	2b00      	cmp	r3, #0
     974:	da2f      	bge.n	9d6 <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     976:	4b24      	ldr	r3, [pc, #144]	; (a08 <nordicsemi_nrf52_init+0x128>)
     978:	2201      	movs	r2, #1
     97a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     97e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     982:	2a00      	cmp	r2, #0
     984:	d0fb      	beq.n	97e <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     986:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     98a:	2112      	movs	r1, #18
     98c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     990:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     994:	2a00      	cmp	r2, #0
     996:	d0fb      	beq.n	990 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     998:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     99c:	2212      	movs	r2, #18
     99e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     9a2:	4b19      	ldr	r3, [pc, #100]	; (a08 <nordicsemi_nrf52_init+0x128>)
     9a4:	461a      	mov	r2, r3
     9a6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     9aa:	2900      	cmp	r1, #0
     9ac:	d0fb      	beq.n	9a6 <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     9ae:	2100      	movs	r1, #0
     9b0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     9b4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     9b8:	2b00      	cmp	r3, #0
     9ba:	d0fb      	beq.n	9b4 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     9bc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     9c0:	4912      	ldr	r1, [pc, #72]	; (a0c <nordicsemi_nrf52_init+0x12c>)
     9c2:	4b13      	ldr	r3, [pc, #76]	; (a10 <nordicsemi_nrf52_init+0x130>)
     9c4:	68ca      	ldr	r2, [r1, #12]
     9c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     9ca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     9cc:	60cb      	str	r3, [r1, #12]
     9ce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     9d2:	bf00      	nop
     9d4:	e7fd      	b.n	9d2 <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     9d6:	4b0d      	ldr	r3, [pc, #52]	; (a0c <nordicsemi_nrf52_init+0x12c>)
     9d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9dc:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     9de:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     9e0:	4b0c      	ldr	r3, [pc, #48]	; (a14 <nordicsemi_nrf52_init+0x134>)
     9e2:	4a0d      	ldr	r2, [pc, #52]	; (a18 <nordicsemi_nrf52_init+0x138>)
     9e4:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     9e6:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     9ea:	2000      	movs	r0, #0
     9ec:	bd08      	pop	{r3, pc}
     9ee:	bf00      	nop
     9f0:	4000568c 	.word	0x4000568c
     9f4:	00038148 	.word	0x00038148
     9f8:	4000f000 	.word	0x4000f000
     9fc:	40000ee4 	.word	0x40000ee4
     a00:	10000258 	.word	0x10000258
     a04:	40029640 	.word	0x40029640
     a08:	4001e000 	.word	0x4001e000
     a0c:	e000ed00 	.word	0xe000ed00
     a10:	05fa0004 	.word	0x05fa0004
     a14:	2000cb9c 	.word	0x2000cb9c
     a18:	03d09000 	.word	0x03d09000

00000a1c <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     a1c:	4808      	ldr	r0, [pc, #32]	; (a40 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     a1e:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     a20:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     a22:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     a24:	d80b      	bhi.n	a3e <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     a26:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     a28:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     a2a:	d008      	beq.n	a3e <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     a2c:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     a2e:	f013 f8a7 	bl	13b80 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     a32:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     a36:	4903      	ldr	r1, [pc, #12]	; (a44 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     a3c:	600a      	str	r2, [r1, #0]

00000a3e <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     a3e:	4770      	bx	lr
    ldr r0, =_kernel
     a40:	20002a00 	.word	0x20002a00
    ldr r1, =_SCS_ICSR
     a44:	e000ed04 	.word	0xe000ed04

00000a48 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a48:	4804      	ldr	r0, [pc, #16]	; (a5c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     a4a:	2300      	movs	r3, #0
     a4c:	2120      	movs	r1, #32
     a4e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     a50:	3301      	adds	r3, #1
     a52:	2b2e      	cmp	r3, #46	; 0x2e
     a54:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     a58:	d1f9      	bne.n	a4e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     a5a:	4770      	bx	lr
     a5c:	e000e100 	.word	0xe000e100

00000a60 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     a60:	4a08      	ldr	r2, [pc, #32]	; (a84 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     a62:	4909      	ldr	r1, [pc, #36]	; (a88 <__swap+0x28>)
	_current->arch.basepri = key;
     a64:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     a66:	6809      	ldr	r1, [r1, #0]
     a68:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     a6a:	4908      	ldr	r1, [pc, #32]	; (a8c <__swap+0x2c>)
	_current->arch.basepri = key;
     a6c:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     a6e:	684b      	ldr	r3, [r1, #4]
     a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     a74:	604b      	str	r3, [r1, #4]
     a76:	2300      	movs	r3, #0
     a78:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     a7c:	6893      	ldr	r3, [r2, #8]
}
     a7e:	6e58      	ldr	r0, [r3, #100]	; 0x64
     a80:	4770      	bx	lr
     a82:	bf00      	nop
     a84:	20002a00 	.word	0x20002a00
     a88:	00014da0 	.word	0x00014da0
     a8c:	e000ed00 	.word	0xe000ed00

00000a90 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     a90:	490e      	ldr	r1, [pc, #56]	; (acc <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     a92:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     a94:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     a96:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     a98:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     a9c:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     aa0:	4f0b      	ldr	r7, [pc, #44]	; (ad0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     aa2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     aa6:	2020      	movs	r0, #32
    msr BASEPRI, r0
     aa8:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     aac:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     aae:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     ab0:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     ab2:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     ab4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     ab6:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     ab8:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     abc:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     ac0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     ac4:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     ac8:	4770      	bx	lr
     aca:	0000      	.short	0x0000
    ldr r1, =_kernel
     acc:	20002a00 	.word	0x20002a00
    ldr v4, =_SCS_ICSR
     ad0:	e000ed04 	.word	0xe000ed04

00000ad4 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     ad4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     ad8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     ada:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     ade:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     ae2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     ae4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     ae8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     aec:	d001      	beq.n	af2 <_context_switch>

    cmp r1, #2
     aee:	2902      	cmp	r1, #2
    beq _oops
     af0:	d007      	beq.n	b02 <_oops>

00000af2 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     af2:	4040      	eors	r0, r0
    msr BASEPRI, r0
     af4:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     af8:	4904      	ldr	r1, [pc, #16]	; (b0c <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     afe:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     b00:	4770      	bx	lr

00000b02 <_oops>:

_oops:
    push {lr}
     b02:	b500      	push	{lr}
    blx _do_kernel_oops
     b04:	f000 f93b 	bl	d7e <_do_kernel_oops>
    pop {pc}
     b08:	bd00      	pop	{pc}
     b0a:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     b0c:	e000ed04 	.word	0xe000ed04

00000b10 <_MpuFault.isra.1>:
{
	PR_EXC("***** MPU FAULT *****\n");

	_FaultThreadShow(esf);

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     b10:	4b0b      	ldr	r3, [pc, #44]	; (b40 <_MpuFault.isra.1+0x30>)
     b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b14:	06d1      	lsls	r1, r2, #27
     b16:	d412      	bmi.n	b3e <_MpuFault.isra.1+0x2e>
		PR_EXC("  Stacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b1a:	0712      	lsls	r2, r2, #28
     b1c:	d40f      	bmi.n	b3e <_MpuFault.isra.1+0x2e>
		PR_EXC("  Unstacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b20:	f012 0f02 	tst.w	r2, #2
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		STORE_xFAR(mmfar, SCB->MMFAR);

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     b26:	d007      	beq.n	b38 <_MpuFault.isra.1+0x28>
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     b28:	0611      	lsls	r1, r2, #24
     b2a:	d508      	bpl.n	b3e <_MpuFault.isra.1+0x2e>
			PR_EXC("  Address: 0x%x\n", mmfar);
			if (fromHardFault) {
     b2c:	b138      	cbz	r0, b3e <_MpuFault.isra.1+0x2e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     b34:	629a      	str	r2, [r3, #40]	; 0x28
     b36:	4770      	bx	lr
			}
		}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     b38:	07d2      	lsls	r2, r2, #31
		PR_EXC("  Instruction Access Violation\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     b3a:	bf58      	it	pl
     b3c:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
     b3e:	4770      	bx	lr
     b40:	e000ed00 	.word	0xe000ed00

00000b44 <_BusFault.isra.3>:
{
	PR_EXC("***** BUS FAULT *****\n");

	_FaultThreadShow(esf);

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     b44:	4b0d      	ldr	r3, [pc, #52]	; (b7c <_BusFault.isra.3+0x38>)
     b46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b48:	04d2      	lsls	r2, r2, #19
     b4a:	d416      	bmi.n	b7a <_BusFault.isra.3+0x36>
		PR_EXC("  Stacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b4e:	0511      	lsls	r1, r2, #20
     b50:	d413      	bmi.n	b7a <_BusFault.isra.3+0x36>
		PR_EXC("  Unstacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b54:	f412 7f00 	tst.w	r2, #512	; 0x200
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);

		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     b5a:	d009      	beq.n	b70 <_BusFault.isra.3+0x2c>
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     b5c:	0412      	lsls	r2, r2, #16
     b5e:	d504      	bpl.n	b6a <_BusFault.isra.3+0x26>
			PR_EXC("  Address: 0x%x\n", bfar);
			if (fromHardFault) {
     b60:	b118      	cbz	r0, b6a <_BusFault.isra.3+0x26>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     b68:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
		/* it's possible to have both a precise and imprecise fault */
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     b6a:	4b04      	ldr	r3, [pc, #16]	; (b7c <_BusFault.isra.3+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
		PR_EXC("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b6e:	e004      	b.n	b7a <_BusFault.isra.3+0x36>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     b70:	0551      	lsls	r1, r2, #21
     b72:	d402      	bmi.n	b7a <_BusFault.isra.3+0x36>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b76:	05d2      	lsls	r2, r2, #23
     b78:	d5f8      	bpl.n	b6c <_BusFault.isra.3+0x28>
     b7a:	4770      	bx	lr
     b7c:	e000ed00 	.word	0xe000ed00

00000b80 <_UsageFault.isra.5>:
	PR_EXC("***** USAGE FAULT *****\n");

	_FaultThreadShow(esf);

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     b80:	4b06      	ldr	r3, [pc, #24]	; (b9c <_UsageFault.isra.5+0x1c>)
     b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Division by zero\n");
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  No coprocessor instructions\n");
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Illegal use of the EPSR\n");
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Attempt to execute undefined instruction\n");
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     b90:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     b94:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     b98:	629a      	str	r2, [r3, #40]	; 0x28
     b9a:	4770      	bx	lr
     b9c:	e000ed00 	.word	0xe000ed00

00000ba0 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     ba0:	4a18      	ldr	r2, [pc, #96]	; (c04 <_Fault+0x64>)
     ba2:	6853      	ldr	r3, [r2, #4]
     ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     ba8:	3b03      	subs	r3, #3
{
     baa:	b510      	push	{r4, lr}
     bac:	4604      	mov	r4, r0
	switch (fault) {
     bae:	2b03      	cmp	r3, #3
     bb0:	d80f      	bhi.n	bd2 <_Fault+0x32>
     bb2:	e8df f003 	tbb	[pc, r3]
     bb6:	2302      	.short	0x2302
     bb8:	2025      	.short	0x2025
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     bba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     bbc:	0799      	lsls	r1, r3, #30
     bbe:	d408      	bmi.n	bd2 <_Fault+0x32>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     bc0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     bc2:	005b      	lsls	r3, r3, #1
     bc4:	d505      	bpl.n	bd2 <_Fault+0x32>
		if (SCB_MMFSR) {
     bc6:	4b10      	ldr	r3, [pc, #64]	; (c08 <_Fault+0x68>)
     bc8:	781b      	ldrb	r3, [r3, #0]
     bca:	b143      	cbz	r3, bde <_Fault+0x3e>
			_MpuFault(esf, 1);
     bcc:	2001      	movs	r0, #1
		_MpuFault(esf, 0);
     bce:	f7ff ff9f 	bl	b10 <_MpuFault.isra.1>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     bd2:	4621      	mov	r1, r4
     bd4:	2000      	movs	r0, #0
}
     bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     bda:	f000 b8d5 	b.w	d88 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     bde:	4b0b      	ldr	r3, [pc, #44]	; (c0c <_Fault+0x6c>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	b11b      	cbz	r3, bec <_Fault+0x4c>
			_BusFault(esf, 1);
     be4:	2001      	movs	r0, #1
		_BusFault(esf, 0);
     be6:	f7ff ffad 	bl	b44 <_BusFault.isra.3>
     bea:	e7f2      	b.n	bd2 <_Fault+0x32>
		} else if (SCB_UFSR) {
     bec:	4b08      	ldr	r3, [pc, #32]	; (c10 <_Fault+0x70>)
     bee:	881b      	ldrh	r3, [r3, #0]
     bf0:	b29b      	uxth	r3, r3
     bf2:	2b00      	cmp	r3, #0
     bf4:	d0ed      	beq.n	bd2 <_Fault+0x32>
		_UsageFault(esf);
     bf6:	f7ff ffc3 	bl	b80 <_UsageFault.isra.5>
     bfa:	e7ea      	b.n	bd2 <_Fault+0x32>
		_MpuFault(esf, 0);
     bfc:	2000      	movs	r0, #0
     bfe:	e7e6      	b.n	bce <_Fault+0x2e>
		_BusFault(esf, 0);
     c00:	2000      	movs	r0, #0
     c02:	e7f0      	b.n	be6 <_Fault+0x46>
     c04:	e000ed00 	.word	0xe000ed00
     c08:	e000ed28 	.word	0xe000ed28
     c0c:	e000ed29 	.word	0xe000ed29
     c10:	e000ed2a 	.word	0xe000ed2a

00000c14 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     c14:	4a02      	ldr	r2, [pc, #8]	; (c20 <_FaultInit+0xc>)
     c16:	6953      	ldr	r3, [r2, #20]
     c18:	f043 0310 	orr.w	r3, r3, #16
     c1c:	6153      	str	r3, [r2, #20]
     c1e:	4770      	bx	lr
     c20:	e000ed00 	.word	0xe000ed00

00000c24 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     c24:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c26:	2b00      	cmp	r3, #0
     c28:	db08      	blt.n	c3c <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c2a:	2201      	movs	r2, #1
     c2c:	f000 001f 	and.w	r0, r0, #31
     c30:	fa02 f000 	lsl.w	r0, r2, r0
     c34:	095b      	lsrs	r3, r3, #5
     c36:	4a02      	ldr	r2, [pc, #8]	; (c40 <_arch_irq_enable+0x1c>)
     c38:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     c3c:	4770      	bx	lr
     c3e:	bf00      	nop
     c40:	e000e100 	.word	0xe000e100

00000c44 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     c44:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c46:	2b00      	cmp	r3, #0
     c48:	db0d      	blt.n	c66 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c4a:	2201      	movs	r2, #1
     c4c:	095b      	lsrs	r3, r3, #5
     c4e:	f000 001f 	and.w	r0, r0, #31
     c52:	fa02 f000 	lsl.w	r0, r2, r0
     c56:	3320      	adds	r3, #32
     c58:	4a03      	ldr	r2, [pc, #12]	; (c68 <_arch_irq_disable+0x24>)
     c5a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c62:	f3bf 8f6f 	isb	sy
     c66:	4770      	bx	lr
     c68:	e000e100 	.word	0xe000e100

00000c6c <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     c6c:	0942      	lsrs	r2, r0, #5
     c6e:	4b05      	ldr	r3, [pc, #20]	; (c84 <_arch_irq_is_enabled+0x18>)
     c70:	f000 001f 	and.w	r0, r0, #31
     c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     c78:	2301      	movs	r3, #1
     c7a:	fa03 f000 	lsl.w	r0, r3, r0
}
     c7e:	4010      	ands	r0, r2
     c80:	4770      	bx	lr
     c82:	bf00      	nop
     c84:	e000e100 	.word	0xe000e100

00000c88 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     c88:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c8a:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c8c:	bfa8      	it	ge
     c8e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     c92:	f101 0101 	add.w	r1, r1, #1
     c96:	ea4f 1141 	mov.w	r1, r1, lsl #5
     c9a:	bfad      	iteet	ge
     c9c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ca0:	f000 000f 	andlt.w	r0, r0, #15
     ca4:	4b03      	ldrlt	r3, [pc, #12]	; (cb4 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ca6:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ca8:	bfb6      	itet	lt
     caa:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cac:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cb0:	5419      	strblt	r1, [r3, r0]
     cb2:	4770      	bx	lr
     cb4:	e000ed14 	.word	0xe000ed14

00000cb8 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     cb8:	f000 b842 	b.w	d40 <__bus_fault>

00000cbc <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     cbc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     cbe:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     cc0:	4b04      	ldr	r3, [pc, #16]	; (cd4 <_arch_isr_direct_pm+0x18>)
     cc2:	6998      	ldr	r0, [r3, #24]
     cc4:	b118      	cbz	r0, cce <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     cc6:	2200      	movs	r2, #0
     cc8:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     cca:	f012 fb83 	bl	133d4 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     cce:	b662      	cpsie	i
     cd0:	bd08      	pop	{r3, pc}
     cd2:	bf00      	nop
     cd4:	20002a00 	.word	0x20002a00

00000cd8 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cda:	460c      	mov	r4, r1
     cdc:	4616      	mov	r6, r2
     cde:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     ce0:	2204      	movs	r2, #4
     ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
     ce6:	4605      	mov	r5, r0
     ce8:	f013 fa48 	bl	1417c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     cec:	f1a6 0120 	sub.w	r1, r6, #32
     cf0:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     cf2:	4a0c      	ldr	r2, [pc, #48]	; (d24 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     cf4:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     cf6:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     cfa:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     cfc:	f022 0201 	bic.w	r2, r2, #1
     d00:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     d02:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     d04:	65ee      	str	r6, [r5, #92]	; 0x5c
     d06:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     d08:	9a06      	ldr	r2, [sp, #24]
     d0a:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     d0c:	9a07      	ldr	r2, [sp, #28]
     d0e:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     d10:	9a08      	ldr	r2, [sp, #32]
     d12:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     d14:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1a:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     d1c:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     d1e:	662b      	str	r3, [r5, #96]	; 0x60
     d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d22:	bf00      	nop
     d24:	00013ff1 	.word	0x00013ff1

00000d28 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     d28:	4901      	ldr	r1, [pc, #4]	; (d30 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     d2a:	2210      	movs	r2, #16
	str r2, [r1]
     d2c:	600a      	str	r2, [r1, #0]
	bx lr
     d2e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     d30:	e000ed10 	.word	0xe000ed10

00000d34 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     d34:	4040      	eors	r0, r0
	msr BASEPRI, r0
     d36:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     d3a:	bf30      	wfi

	bx lr
     d3c:	4770      	bx	lr
     d3e:	bf00      	nop

00000d40 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     d40:	4040      	eors	r0, r0
	msr BASEPRI, r0
     d42:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     d46:	f8df c01c 	ldr.w	ip, [pc, #28]	; d64 <__bus_fault+0x24>
	ldr ip, [ip]
     d4a:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     d4e:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     d52:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     d54:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     d58:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     d5c:	b500      	push	{lr}
	bl _Fault
     d5e:	f7ff ff1f 	bl	ba0 <_Fault>

	pop {pc}
     d62:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     d64:	e000ed04 	.word	0xe000ed04

00000d68 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
     d68:	b538      	push	{r3, r4, r5, lr}
     d6a:	4604      	mov	r4, r0
     d6c:	460d      	mov	r5, r1

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     d6e:	f012 fedd 	bl	13b2c <_impl_k_current_get>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     d72:	4629      	mov	r1, r5
     d74:	4620      	mov	r0, r4
}
     d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     d7a:	f000 b805 	b.w	d88 <_SysFatalErrorHandler>

00000d7e <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     d7e:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     d80:	6800      	ldr	r0, [r0, #0]
     d82:	f7ff bff1 	b.w	d68 <_NanoFatalErrorHandler>
	...

00000d88 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     d88:	2805      	cmp	r0, #5
{
     d8a:	b508      	push	{r3, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     d8c:	d004      	beq.n	d98 <_SysFatalErrorHandler+0x10>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     d8e:	f013 f917 	bl	13fc0 <k_is_in_isr>
     d92:	b120      	cbz	r0, d9e <_SysFatalErrorHandler+0x16>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     d94:	f013 f914 	bl	13fc0 <k_is_in_isr>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     d98:	f7ff ffcc 	bl	d34 <k_cpu_idle>
     d9c:	e7fc      	b.n	d98 <_SysFatalErrorHandler+0x10>
	if (k_is_in_isr() || _is_thread_essential()) {
     d9e:	f013 f91f 	bl	13fe0 <_is_thread_essential>
     da2:	2800      	cmp	r0, #0
     da4:	d1f6      	bne.n	d94 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     da6:	4b03      	ldr	r3, [pc, #12]	; (db4 <_SysFatalErrorHandler+0x2c>)

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     da8:	6898      	ldr	r0, [r3, #8]
	}
	CODE_UNREACHABLE;
}
     daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     dae:	f000 b803 	b.w	db8 <_impl_k_thread_abort>
     db2:	bf00      	nop
     db4:	20002a00 	.word	0x20002a00

00000db8 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     db8:	b538      	push	{r3, r4, r5, lr}
     dba:	4605      	mov	r5, r0
	__asm__ volatile(
     dbc:	f04f 0320 	mov.w	r3, #32
     dc0:	f3ef 8411 	mrs	r4, BASEPRI
     dc4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     dc8:	f013 f968 	bl	1409c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     dcc:	4b0b      	ldr	r3, [pc, #44]	; (dfc <_impl_k_thread_abort+0x44>)
     dce:	689b      	ldr	r3, [r3, #8]
     dd0:	429d      	cmp	r5, r3
     dd2:	d10d      	bne.n	df0 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     dd4:	4b0a      	ldr	r3, [pc, #40]	; (e00 <_impl_k_thread_abort+0x48>)
     dd6:	685a      	ldr	r2, [r3, #4]
     dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
     ddc:	b922      	cbnz	r2, de8 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     dde:	f012 fecf 	bl	13b80 <_update_time_slice_before_swap>

	return __swap(key);
     de2:	4620      	mov	r0, r4
     de4:	f7ff fe3c 	bl	a60 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     de8:	685a      	ldr	r2, [r3, #4]
     dea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     dee:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     df0:	4620      	mov	r0, r4
}
     df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     df6:	f012 bdff 	b.w	139f8 <_reschedule_threads>
     dfa:	bf00      	nop
     dfc:	20002a00 	.word	0x20002a00
     e00:	e000ed00 	.word	0xe000ed00

00000e04 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     e04:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     e06:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     e08:	4a0b      	ldr	r2, [pc, #44]	; (e38 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     e0a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     e0c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     e0e:	bf1e      	ittt	ne
	movne	r1, #0
     e10:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     e12:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     e14:	f012 fade 	blne	133d4 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     e18:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     e1a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     e1e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     e22:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     e26:	4905      	ldr	r1, [pc, #20]	; (e3c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     e28:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     e2a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     e2c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     e2e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     e32:	f7ff bdf3 	b.w	a1c <_ExcExit>
     e36:	0000      	.short	0x0000
	ldr r2, =_kernel
     e38:	20002a00 	.word	0x20002a00
	ldr r1, =_sw_isr_table
     e3c:	000000f8 	.word	0x000000f8

00000e40 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     e40:	2020      	movs	r0, #32
    msr BASEPRI, r0
     e42:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     e46:	4805      	ldr	r0, [pc, #20]	; (e5c <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     e4c:	1840      	adds	r0, r0, r1
    msr PSP, r0
     e4e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     e52:	2002      	movs	r0, #2
    msr CONTROL, r0
     e54:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     e58:	f000 b806 	b.w	e68 <_PrepC>
    ldr r0, =_interrupt_stack
     e5c:	2000bce8 	.word	0x2000bce8

00000e60 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     e60:	bf30      	wfi
    b _SysNmiOnReset
     e62:	f7ff bffd 	b.w	e60 <_SysNmiOnReset>
     e66:	bf00      	nop

00000e68 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     e68:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     e6a:	4b07      	ldr	r3, [pc, #28]	; (e88 <_PrepC+0x20>)
     e6c:	4a07      	ldr	r2, [pc, #28]	; (e8c <_PrepC+0x24>)
     e6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     e72:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     e74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e78:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     e7c:	f012 fadc 	bl	13438 <_bss_zero>
	_data_copy();
     e80:	f012 fae4 	bl	1344c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     e84:	f012 fb02 	bl	1348c <_Cstart>
     e88:	00000000 	.word	0x00000000
     e8c:	e000ed00 	.word	0xe000ed00

00000e90 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     e90:	b508      	push	{r3, lr}
	handler();
     e92:	f7ff ffe5 	bl	e60 <_SysNmiOnReset>
	_ExcExit();
}
     e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     e9a:	f7ff bdbf 	b.w	a1c <_ExcExit>
	...

00000ea0 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     ea0:	4b15      	ldr	r3, [pc, #84]	; (ef8 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     ea2:	4916      	ldr	r1, [pc, #88]	; (efc <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     ea4:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     ea6:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     ea8:	680d      	ldr	r5, [r1, #0]
     eaa:	f3c2 2207 	ubfx	r2, r2, #8, #8
     eae:	4295      	cmp	r5, r2
     eb0:	d80f      	bhi.n	ed2 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     eb2:	2200      	movs	r2, #0
     eb4:	6848      	ldr	r0, [r1, #4]
     eb6:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     eb8:	4295      	cmp	r5, r2
     eba:	f100 000c 	add.w	r0, r0, #12
     ebe:	d10a      	bne.n	ed6 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
     ec0:	2205      	movs	r2, #5
     ec2:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
     ec4:	4b0e      	ldr	r3, [pc, #56]	; (f00 <arm_mpu_init+0x60>)
     ec6:	2201      	movs	r2, #1
     ec8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
     eca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ece:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
     ed2:	2000      	movs	r0, #0
     ed4:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
     ed6:	f850 1c0c 	ldr.w	r1, [r0, #-12]
     eda:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
     ede:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     ee0:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
     ee4:	f041 0110 	orr.w	r1, r1, #16
     ee8:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     eea:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     eee:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     ef0:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     ef2:	611c      	str	r4, [r3, #16]
     ef4:	e7e0      	b.n	eb8 <arm_mpu_init+0x18>
     ef6:	bf00      	nop
     ef8:	e000ed90 	.word	0xe000ed90
     efc:	2000cb58 	.word	0x2000cb58
     f00:	200000b2 	.word	0x200000b2

00000f04 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES_CMAC, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
     f04:	4770      	bx	lr

00000f06 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
     f06:	428b      	cmp	r3, r1
{
     f08:	b538      	push	{r3, r4, r5, lr}
     f0a:	4615      	mov	r5, r2
     f0c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
     f0e:	d805      	bhi.n	f1c <_copy+0x16>
		(void)memcpy(to, from, from_len);
     f10:	461a      	mov	r2, r3
     f12:	4629      	mov	r1, r5
     f14:	f7ff fb64 	bl	5e0 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
     f18:	4620      	mov	r0, r4
     f1a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
     f1c:	2400      	movs	r4, #0
     f1e:	e7fb      	b.n	f18 <_copy+0x12>

00000f20 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
     f20:	f7ff bb8a 	b.w	638 <memset>

00000f24 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
     f24:	09c3      	lsrs	r3, r0, #7
     f26:	005a      	lsls	r2, r3, #1
     f28:	4413      	add	r3, r2
     f2a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     f2e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
     f32:	b2c0      	uxtb	r0, r0
     f34:	4770      	bx	lr

00000f36 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     f36:	78cb      	ldrb	r3, [r1, #3]
     f38:	7802      	ldrb	r2, [r0, #0]
     f3a:	4053      	eors	r3, r2
     f3c:	7003      	strb	r3, [r0, #0]
     f3e:	884b      	ldrh	r3, [r1, #2]
     f40:	7842      	ldrb	r2, [r0, #1]
     f42:	4053      	eors	r3, r2
     f44:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     f46:	680a      	ldr	r2, [r1, #0]
     f48:	7883      	ldrb	r3, [r0, #2]
     f4a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
     f4e:	7083      	strb	r3, [r0, #2]
     f50:	680a      	ldr	r2, [r1, #0]
     f52:	78c3      	ldrb	r3, [r0, #3]
     f54:	4053      	eors	r3, r2
     f56:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     f58:	79cb      	ldrb	r3, [r1, #7]
     f5a:	7902      	ldrb	r2, [r0, #4]
     f5c:	4053      	eors	r3, r2
     f5e:	7103      	strb	r3, [r0, #4]
     f60:	88cb      	ldrh	r3, [r1, #6]
     f62:	7942      	ldrb	r2, [r0, #5]
     f64:	4053      	eors	r3, r2
     f66:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     f68:	684a      	ldr	r2, [r1, #4]
     f6a:	7983      	ldrb	r3, [r0, #6]
     f6c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
     f70:	7183      	strb	r3, [r0, #6]
     f72:	684a      	ldr	r2, [r1, #4]
     f74:	79c3      	ldrb	r3, [r0, #7]
     f76:	4053      	eors	r3, r2
     f78:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     f7a:	7acb      	ldrb	r3, [r1, #11]
     f7c:	7a02      	ldrb	r2, [r0, #8]
     f7e:	4053      	eors	r3, r2
     f80:	7203      	strb	r3, [r0, #8]
     f82:	7a42      	ldrb	r2, [r0, #9]
     f84:	894b      	ldrh	r3, [r1, #10]
     f86:	4053      	eors	r3, r2
     f88:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     f8a:	688a      	ldr	r2, [r1, #8]
     f8c:	7a83      	ldrb	r3, [r0, #10]
     f8e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
     f92:	7283      	strb	r3, [r0, #10]
     f94:	688a      	ldr	r2, [r1, #8]
     f96:	7ac3      	ldrb	r3, [r0, #11]
     f98:	4053      	eors	r3, r2
     f9a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     f9c:	7bcb      	ldrb	r3, [r1, #15]
     f9e:	7b02      	ldrb	r2, [r0, #12]
     fa0:	4053      	eors	r3, r2
     fa2:	7303      	strb	r3, [r0, #12]
     fa4:	89cb      	ldrh	r3, [r1, #14]
     fa6:	7b42      	ldrb	r2, [r0, #13]
     fa8:	4053      	eors	r3, r2
     faa:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     fac:	68ca      	ldr	r2, [r1, #12]
     fae:	7b83      	ldrb	r3, [r0, #14]
     fb0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
     fb4:	7383      	strb	r3, [r0, #14]
     fb6:	68ca      	ldr	r2, [r1, #12]
     fb8:	7bc3      	ldrb	r3, [r0, #15]
     fba:	4053      	eors	r3, r2
     fbc:	73c3      	strb	r3, [r0, #15]
     fbe:	4770      	bx	lr

00000fc0 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
     fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
     fc2:	7802      	ldrb	r2, [r0, #0]
     fc4:	f88d 2000 	strb.w	r2, [sp]
     fc8:	7942      	ldrb	r2, [r0, #5]
     fca:	f88d 2001 	strb.w	r2, [sp, #1]
     fce:	7a82      	ldrb	r2, [r0, #10]
     fd0:	f88d 2002 	strb.w	r2, [sp, #2]
     fd4:	7bc2      	ldrb	r2, [r0, #15]
     fd6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
     fda:	7902      	ldrb	r2, [r0, #4]
     fdc:	f88d 2004 	strb.w	r2, [sp, #4]
     fe0:	7a42      	ldrb	r2, [r0, #9]
     fe2:	f88d 2005 	strb.w	r2, [sp, #5]
     fe6:	7b82      	ldrb	r2, [r0, #14]
     fe8:	f88d 2006 	strb.w	r2, [sp, #6]
     fec:	78c2      	ldrb	r2, [r0, #3]
     fee:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
     ff2:	7a02      	ldrb	r2, [r0, #8]
     ff4:	f88d 2008 	strb.w	r2, [sp, #8]
     ff8:	7b42      	ldrb	r2, [r0, #13]
     ffa:	f88d 2009 	strb.w	r2, [sp, #9]
     ffe:	7882      	ldrb	r2, [r0, #2]
    1000:	f88d 200a 	strb.w	r2, [sp, #10]
    1004:	79c2      	ldrb	r2, [r0, #7]
    1006:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    100a:	7b02      	ldrb	r2, [r0, #12]
    100c:	f88d 200c 	strb.w	r2, [sp, #12]
    1010:	7842      	ldrb	r2, [r0, #1]
    1012:	f88d 200d 	strb.w	r2, [sp, #13]
    1016:	7ac3      	ldrb	r3, [r0, #11]
    1018:	7982      	ldrb	r2, [r0, #6]
    101a:	f88d 200e 	strb.w	r2, [sp, #14]
    101e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1022:	2310      	movs	r3, #16
    1024:	466a      	mov	r2, sp
    1026:	4619      	mov	r1, r3
    1028:	f7ff ff6d 	bl	f06 <_copy>
}
    102c:	b005      	add	sp, #20
    102e:	f85d fb04 	ldr.w	pc, [sp], #4

00001032 <mult_row_column>:
{
    1032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1034:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    1036:	7808      	ldrb	r0, [r1, #0]
{
    1038:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    103a:	f7ff ff73 	bl	f24 <_double_byte>
    103e:	4605      	mov	r5, r0
    1040:	7860      	ldrb	r0, [r4, #1]
    1042:	f7ff ff6f 	bl	f24 <_double_byte>
    1046:	78a2      	ldrb	r2, [r4, #2]
    1048:	7863      	ldrb	r3, [r4, #1]
    104a:	4053      	eors	r3, r2
    104c:	78e2      	ldrb	r2, [r4, #3]
    104e:	4053      	eors	r3, r2
    1050:	405d      	eors	r5, r3
    1052:	4045      	eors	r5, r0
    1054:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    1056:	7860      	ldrb	r0, [r4, #1]
    1058:	7827      	ldrb	r7, [r4, #0]
    105a:	f7ff ff63 	bl	f24 <_double_byte>
    105e:	4605      	mov	r5, r0
    1060:	78a0      	ldrb	r0, [r4, #2]
    1062:	f7ff ff5f 	bl	f24 <_double_byte>
    1066:	78a3      	ldrb	r3, [r4, #2]
    1068:	405f      	eors	r7, r3
    106a:	78e3      	ldrb	r3, [r4, #3]
    106c:	405f      	eors	r7, r3
    106e:	407d      	eors	r5, r7
    1070:	4045      	eors	r5, r0
    1072:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    1074:	78a0      	ldrb	r0, [r4, #2]
    1076:	7865      	ldrb	r5, [r4, #1]
    1078:	7827      	ldrb	r7, [r4, #0]
    107a:	f7ff ff53 	bl	f24 <_double_byte>
    107e:	406f      	eors	r7, r5
    1080:	4605      	mov	r5, r0
    1082:	78e0      	ldrb	r0, [r4, #3]
    1084:	f7ff ff4e 	bl	f24 <_double_byte>
    1088:	78e3      	ldrb	r3, [r4, #3]
    108a:	405f      	eors	r7, r3
    108c:	407d      	eors	r5, r7
    108e:	4045      	eors	r5, r0
    1090:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    1092:	7820      	ldrb	r0, [r4, #0]
    1094:	f7ff ff46 	bl	f24 <_double_byte>
    1098:	7863      	ldrb	r3, [r4, #1]
    109a:	7825      	ldrb	r5, [r4, #0]
    109c:	405d      	eors	r5, r3
    109e:	78a3      	ldrb	r3, [r4, #2]
    10a0:	405d      	eors	r5, r3
    10a2:	4045      	eors	r5, r0
    10a4:	78e0      	ldrb	r0, [r4, #3]
    10a6:	f7ff ff3d 	bl	f24 <_double_byte>
    10aa:	b2ed      	uxtb	r5, r5
    10ac:	4068      	eors	r0, r5
    10ae:	70f0      	strb	r0, [r6, #3]
    10b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000010b4 <tc_aes128_set_encrypt_key>:
{
    10b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    10b6:	4e28      	ldr	r6, [pc, #160]	; (1158 <tc_aes128_set_encrypt_key+0xa4>)
{
    10b8:	4607      	mov	r7, r0
    10ba:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    10bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    10be:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    10c0:	ad01      	add	r5, sp, #4
    10c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    10c4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    10c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    10c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    10cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    10d0:	2f00      	cmp	r7, #0
    10d2:	d03c      	beq.n	114e <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    10d4:	2c00      	cmp	r4, #0
    10d6:	d03c      	beq.n	1152 <tc_aes128_set_encrypt_key+0x9e>
    10d8:	1f38      	subs	r0, r7, #4
    10da:	4621      	mov	r1, r4
    10dc:	4602      	mov	r2, r0
    10de:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    10e0:	784b      	ldrb	r3, [r1, #1]
    10e2:	780d      	ldrb	r5, [r1, #0]
    10e4:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    10e6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    10ea:	78cd      	ldrb	r5, [r1, #3]
    10ec:	432b      	orrs	r3, r5
    10ee:	788d      	ldrb	r5, [r1, #2]
    10f0:	3104      	adds	r1, #4
    10f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    10f6:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    10f8:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    10fc:	d1f0      	bne.n	10e0 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    10fe:	4c17      	ldr	r4, [pc, #92]	; (115c <tc_aes128_set_encrypt_key+0xa8>)
    1100:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    1102:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    1104:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    1106:	d118      	bne.n	113a <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    1108:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    110c:	0e1a      	lsrs	r2, r3, #24
    110e:	5ca5      	ldrb	r5, [r4, r2]
    1110:	b2da      	uxtb	r2, r3
    1112:	5ca2      	ldrb	r2, [r4, r2]
    1114:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    1118:	f3c3 4507 	ubfx	r5, r3, #16, #8
    111c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1120:	5d65      	ldrb	r5, [r4, r5]
    1122:	5ce3      	ldrb	r3, [r4, r3]
    1124:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    1128:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    112c:	ad0c      	add	r5, sp, #48	; 0x30
    112e:	f021 0303 	bic.w	r3, r1, #3
    1132:	442b      	add	r3, r5
    1134:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    1138:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    113a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    113e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    1140:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    1142:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    1144:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    1146:	d1dc      	bne.n	1102 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    1148:	2001      	movs	r0, #1
}
    114a:	b00d      	add	sp, #52	; 0x34
    114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    114e:	4638      	mov	r0, r7
    1150:	e7fb      	b.n	114a <tc_aes128_set_encrypt_key+0x96>
    1152:	4620      	mov	r0, r4
    1154:	e7f9      	b.n	114a <tc_aes128_set_encrypt_key+0x96>
    1156:	bf00      	nop
    1158:	000148b0 	.word	0x000148b0
    115c:	000149a0 	.word	0x000149a0

00001160 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1164:	4615      	mov	r5, r2
    1166:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    1168:	4680      	mov	r8, r0
    116a:	2800      	cmp	r0, #0
    116c:	d05b      	beq.n	1226 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    116e:	2900      	cmp	r1, #0
    1170:	d05a      	beq.n	1228 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    1172:	2a00      	cmp	r2, #0
    1174:	d05a      	beq.n	122c <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    1176:	2310      	movs	r3, #16
    1178:	460a      	mov	r2, r1
    117a:	4668      	mov	r0, sp
    117c:	4619      	mov	r1, r3
    117e:	f7ff fec2 	bl	f06 <_copy>
	add_round_key(state, s->words);
    1182:	4629      	mov	r1, r5
    1184:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    1186:	4c2a      	ldr	r4, [pc, #168]	; (1230 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    1188:	f7ff fed5 	bl	f36 <add_round_key>
    118c:	f105 0710 	add.w	r7, r5, #16
    1190:	46a1      	mov	r9, r4
    1192:	35a0      	adds	r5, #160	; 0xa0
{
    1194:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    1196:	f81d 3006 	ldrb.w	r3, [sp, r6]
    119a:	5ce3      	ldrb	r3, [r4, r3]
    119c:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    11a0:	3601      	adds	r6, #1
    11a2:	2e10      	cmp	r6, #16
    11a4:	d1f7      	bne.n	1196 <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    11a6:	4668      	mov	r0, sp
    11a8:	f7ff ff0a 	bl	fc0 <shift_rows>
	mult_row_column(t, s);
    11ac:	4669      	mov	r1, sp
    11ae:	a804      	add	r0, sp, #16
    11b0:	f7ff ff3f 	bl	1032 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    11b4:	a901      	add	r1, sp, #4
    11b6:	a805      	add	r0, sp, #20
    11b8:	f7ff ff3b 	bl	1032 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    11bc:	a902      	add	r1, sp, #8
    11be:	a806      	add	r0, sp, #24
    11c0:	f7ff ff37 	bl	1032 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    11c4:	a903      	add	r1, sp, #12
    11c6:	a807      	add	r0, sp, #28
    11c8:	f7ff ff33 	bl	1032 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    11cc:	4633      	mov	r3, r6
    11ce:	aa04      	add	r2, sp, #16
    11d0:	4631      	mov	r1, r6
    11d2:	4668      	mov	r0, sp
    11d4:	f7ff fe97 	bl	f06 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    11d8:	4639      	mov	r1, r7
    11da:	4668      	mov	r0, sp
    11dc:	3710      	adds	r7, #16
    11de:	f7ff feaa 	bl	f36 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    11e2:	42bd      	cmp	r5, r7
    11e4:	d1d6      	bne.n	1194 <tc_aes_encrypt+0x34>
    11e6:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    11e8:	f81d 3006 	ldrb.w	r3, [sp, r6]
    11ec:	f819 3003 	ldrb.w	r3, [r9, r3]
    11f0:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    11f4:	3601      	adds	r6, #1
    11f6:	2e10      	cmp	r6, #16
    11f8:	d1f6      	bne.n	11e8 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    11fa:	4668      	mov	r0, sp
    11fc:	f7ff fee0 	bl	fc0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    1200:	4629      	mov	r1, r5
    1202:	4668      	mov	r0, sp
    1204:	f7ff fe97 	bl	f36 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1208:	4633      	mov	r3, r6
    120a:	466a      	mov	r2, sp
    120c:	4631      	mov	r1, r6
    120e:	4640      	mov	r0, r8
    1210:	f7ff fe79 	bl	f06 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1214:	4668      	mov	r0, sp
    1216:	4632      	mov	r2, r6
    1218:	2100      	movs	r1, #0
    121a:	f7ff fe81 	bl	f20 <_set>

	return TC_CRYPTO_SUCCESS;
    121e:	2001      	movs	r0, #1
}
    1220:	b009      	add	sp, #36	; 0x24
    1222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1226:	e7fb      	b.n	1220 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    1228:	4608      	mov	r0, r1
    122a:	e7f9      	b.n	1220 <tc_aes_encrypt+0xc0>
    122c:	4610      	mov	r0, r2
    122e:	e7f7      	b.n	1220 <tc_aes_encrypt+0xc0>
    1230:	000149a0 	.word	0x000149a0

00001234 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    1234:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1236:	f991 3000 	ldrsb.w	r3, [r1]
    123a:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    123c:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1240:	bfb4      	ite	lt
    1242:	2387      	movlt	r3, #135	; 0x87
    1244:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    1246:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1248:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
    124a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
    124c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    1250:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    1254:	d003      	beq.n	125e <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
    1256:	f812 3901 	ldrb.w	r3, [r2], #-1
    125a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    125c:	e7f4      	b.n	1248 <gf_double+0x14>
    125e:	bd10      	pop	{r4, pc}

00001260 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    1260:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    1262:	b128      	cbz	r0, 1270 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    1264:	2258      	movs	r2, #88	; 0x58
    1266:	2100      	movs	r1, #0
    1268:	f7ff fe5a 	bl	f20 <_set>

	return TC_CRYPTO_SUCCESS;
    126c:	2001      	movs	r0, #1
    126e:	bd08      	pop	{r3, pc}
}
    1270:	bd08      	pop	{r3, pc}

00001272 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    1272:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1274:	4604      	mov	r4, r0
    1276:	b190      	cbz	r0, 129e <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1278:	2210      	movs	r2, #16
    127a:	2100      	movs	r1, #0
    127c:	f7ff fe50 	bl	f20 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    1280:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1284:	2210      	movs	r2, #16
    1286:	2100      	movs	r1, #0
    1288:	f7ff fe4a 	bl	f20 <_set>
	s->leftover_offset = 0;
    128c:	2300      	movs	r3, #0
    128e:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    1290:	2200      	movs	r2, #0
    1292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1296:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    129a:	2001      	movs	r0, #1
    129c:	bd10      	pop	{r4, pc}
}
    129e:	bd10      	pop	{r4, pc}

000012a0 <tc_cmac_setup>:
{
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	460d      	mov	r5, r1
    12a4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    12a6:	4604      	mov	r4, r0
    12a8:	b318      	cbz	r0, 12f2 <tc_cmac_setup+0x52>
    12aa:	b319      	cbz	r1, 12f4 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
    12ac:	2258      	movs	r2, #88	; 0x58
    12ae:	2100      	movs	r1, #0
    12b0:	f7ff fe36 	bl	f20 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    12b4:	4629      	mov	r1, r5
	s->sched = sched;
    12b6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    12b8:	4630      	mov	r0, r6
    12ba:	f7ff fefb 	bl	10b4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    12be:	4620      	mov	r0, r4
    12c0:	2210      	movs	r2, #16
    12c2:	2100      	movs	r1, #0
    12c4:	f7ff fe2c 	bl	f20 <_set>
	gf_double (s->K1, s->iv);
    12c8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    12cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    12ce:	4621      	mov	r1, r4
    12d0:	4620      	mov	r0, r4
    12d2:	f7ff ff45 	bl	1160 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    12d6:	4621      	mov	r1, r4
    12d8:	4628      	mov	r0, r5
    12da:	f7ff ffab 	bl	1234 <gf_double>
	gf_double (s->K2, s->K1);
    12de:	4629      	mov	r1, r5
    12e0:	f104 0020 	add.w	r0, r4, #32
    12e4:	f7ff ffa6 	bl	1234 <gf_double>
	tc_cmac_init(s);
    12e8:	4620      	mov	r0, r4
    12ea:	f7ff ffc2 	bl	1272 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    12ee:	2001      	movs	r0, #1
    12f0:	bd70      	pop	{r4, r5, r6, pc}
    12f2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    12f4:	4608      	mov	r0, r1
}
    12f6:	bd70      	pop	{r4, r5, r6, pc}

000012f8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    12f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12fa:	460d      	mov	r5, r1
    12fc:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    12fe:	4604      	mov	r4, r0
    1300:	2800      	cmp	r0, #0
    1302:	d05b      	beq.n	13bc <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    1304:	b90a      	cbnz	r2, 130a <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    1306:	2001      	movs	r0, #1
    1308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    130a:	2900      	cmp	r1, #0
    130c:	d056      	beq.n	13bc <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
    130e:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    1312:	ea52 0103 	orrs.w	r1, r2, r3
    1316:	d051      	beq.n	13bc <tc_cmac_update+0xc4>
	s->countdown--;
    1318:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    131c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    1320:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
    1324:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1326:	b348      	cbz	r0, 137c <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    1328:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    132c:	42be      	cmp	r6, r7
    132e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    1332:	d209      	bcs.n	1348 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    1334:	4633      	mov	r3, r6
    1336:	4631      	mov	r1, r6
    1338:	462a      	mov	r2, r5
    133a:	4420      	add	r0, r4
    133c:	f7ff fde3 	bl	f06 <_copy>
			s->leftover_offset += data_length;
    1340:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1342:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    1344:	6466      	str	r6, [r4, #68]	; 0x44
    1346:	e7de      	b.n	1306 <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    1348:	463b      	mov	r3, r7
    134a:	462a      	mov	r2, r5
    134c:	4639      	mov	r1, r7
    134e:	4420      	add	r0, r4
    1350:	f7ff fdd9 	bl	f06 <_copy>
		s->leftover_offset = 0;
    1354:	2300      	movs	r3, #0
    1356:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    1358:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    135a:	443d      	add	r5, r7
    135c:	1e63      	subs	r3, r4, #1
    135e:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
    1362:	785a      	ldrb	r2, [r3, #1]
    1364:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    1368:	404a      	eors	r2, r1
    136a:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    136e:	4283      	cmp	r3, r0
    1370:	d1f7      	bne.n	1362 <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1372:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1374:	4621      	mov	r1, r4
    1376:	4620      	mov	r0, r4
    1378:	f7ff fef2 	bl	1160 <tc_aes_encrypt>
    137c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    1380:	2e10      	cmp	r6, #16
    1382:	d911      	bls.n	13a8 <tc_cmac_update+0xb0>
    1384:	1e63      	subs	r3, r4, #1
    1386:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    1388:	785a      	ldrb	r2, [r3, #1]
    138a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    138e:	4042      	eors	r2, r0
    1390:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1394:	42bb      	cmp	r3, r7
    1396:	d1f7      	bne.n	1388 <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1398:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    139a:	4621      	mov	r1, r4
    139c:	4620      	mov	r0, r4
    139e:	f7ff fedf 	bl	1160 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    13a2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    13a4:	3e10      	subs	r6, #16
    13a6:	e7eb      	b.n	1380 <tc_cmac_update+0x88>
	if (data_length > 0) {
    13a8:	2e00      	cmp	r6, #0
    13aa:	d0ac      	beq.n	1306 <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    13ac:	4633      	mov	r3, r6
    13ae:	462a      	mov	r2, r5
    13b0:	4631      	mov	r1, r6
    13b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    13b6:	f7ff fda6 	bl	f06 <_copy>
    13ba:	e7c3      	b.n	1344 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
    13bc:	2000      	movs	r0, #0
}
    13be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000013c0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    13c0:	b570      	push	{r4, r5, r6, lr}
    13c2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    13c4:	4605      	mov	r5, r0
    13c6:	b370      	cbz	r0, 1426 <tc_cmac_final+0x66>
    13c8:	b371      	cbz	r1, 1428 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    13ca:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    13cc:	2a10      	cmp	r2, #16
    13ce:	d11a      	bne.n	1406 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    13d0:	f101 0210 	add.w	r2, r1, #16
    13d4:	1e61      	subs	r1, r4, #1
    13d6:	3a01      	subs	r2, #1
    13d8:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    13dc:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    13e0:	784b      	ldrb	r3, [r1, #1]
    13e2:	4043      	eors	r3, r0
    13e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    13e8:	4043      	eors	r3, r0
    13ea:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    13ee:	428e      	cmp	r6, r1
    13f0:	d1f4      	bne.n	13dc <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    13f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    13f4:	4621      	mov	r1, r4
    13f6:	4628      	mov	r0, r5
    13f8:	f7ff feb2 	bl	1160 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    13fc:	4620      	mov	r0, r4
    13fe:	f7ff ff2f 	bl	1260 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    1402:	2001      	movs	r0, #1
    1404:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    1406:	f102 0030 	add.w	r0, r2, #48	; 0x30
    140a:	2100      	movs	r1, #0
    140c:	f1c2 0210 	rsb	r2, r2, #16
    1410:	4420      	add	r0, r4
    1412:	f7ff fd85 	bl	f20 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1416:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1418:	4423      	add	r3, r4
    141a:	2280      	movs	r2, #128	; 0x80
    141c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    1420:	f104 0220 	add.w	r2, r4, #32
    1424:	e7d6      	b.n	13d4 <tc_cmac_final+0x14>
    1426:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    1428:	4608      	mov	r0, r1
}
    142a:	bd70      	pop	{r4, r5, r6, pc}

0000142c <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    142c:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    142e:	4c11      	ldr	r4, [pc, #68]	; (1474 <sys_rand32_get+0x48>)
    1430:	f3bf 8f5b 	dmb	ish
    1434:	6820      	ldr	r0, [r4, #0]
    1436:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    143a:	b960      	cbnz	r0, 1456 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    143c:	480e      	ldr	r0, [pc, #56]	; (1478 <sys_rand32_get+0x4c>)
    143e:	f011 ffa3 	bl	13388 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1442:	f3bf 8f5b 	dmb	ish
    1446:	e854 3f00 	ldrex	r3, [r4]
    144a:	e844 0200 	strex	r2, r0, [r4]
    144e:	2a00      	cmp	r2, #0
    1450:	d1f9      	bne.n	1446 <sys_rand32_get+0x1a>
    1452:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1456:	6843      	ldr	r3, [r0, #4]
    1458:	2204      	movs	r2, #4
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	eb0d 0102 	add.w	r1, sp, r2
    1460:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    1462:	2800      	cmp	r0, #0
    1464:	da02      	bge.n	146c <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1466:	f000 fb1d 	bl	1aa4 <_timer_cycle_get_32>
    146a:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    146c:	9801      	ldr	r0, [sp, #4]
    146e:	b002      	add	sp, #8
    1470:	bd10      	pop	{r4, pc}
    1472:	bf00      	nop
    1474:	200000b4 	.word	0x200000b4
    1478:	00014aa0 	.word	0x00014aa0

0000147c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    147c:	b510      	push	{r4, lr}
    147e:	f04f 0320 	mov.w	r3, #32
    1482:	f3ef 8211 	mrs	r2, BASEPRI
    1486:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    148a:	4c11      	ldr	r4, [pc, #68]	; (14d0 <_m16src_stop+0x54>)
    148c:	7823      	ldrb	r3, [r4, #0]
    148e:	b923      	cbnz	r3, 149a <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1490:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1494:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1498:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    149a:	3b01      	subs	r3, #1
    149c:	b2db      	uxtb	r3, r3
    149e:	7023      	strb	r3, [r4, #0]
    14a0:	b123      	cbz	r3, 14ac <_m16src_stop+0x30>
    14a2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    14a6:	f06f 000f 	mvn.w	r0, #15
    14aa:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    14ac:	4b09      	ldr	r3, [pc, #36]	; (14d4 <_m16src_stop+0x58>)
    14ae:	7818      	ldrb	r0, [r3, #0]
    14b0:	2101      	movs	r1, #1
    14b2:	b128      	cbz	r0, 14c0 <_m16src_stop+0x44>
		m16src_ref++;
    14b4:	7021      	strb	r1, [r4, #0]
    14b6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    14ba:	f06f 000a 	mvn.w	r0, #10
    14be:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    14c0:	7019      	strb	r1, [r3, #0]
    14c2:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    14c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    14ca:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    14cc:	7018      	strb	r0, [r3, #0]

	return 0;
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	200000ba 	.word	0x200000ba
    14d4:	200000b9 	.word	0x200000b9

000014d8 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    14d8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    14da:	2200      	movs	r2, #0
    14dc:	4610      	mov	r0, r2
    14de:	2101      	movs	r1, #1
    14e0:	f7ff fbd2 	bl	c88 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    14e4:	2000      	movs	r0, #0
    14e6:	f7ff fb9d 	bl	c24 <_arch_irq_enable>

	return 0;
}
    14ea:	2000      	movs	r0, #0
    14ec:	bd08      	pop	{r3, pc}
	...

000014f0 <_m16src_start>:
{
    14f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    14f2:	f04f 0220 	mov.w	r2, #32
    14f6:	f3ef 8311 	mrs	r3, BASEPRI
    14fa:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    14fe:	4a25      	ldr	r2, [pc, #148]	; (1594 <_m16src_start+0xa4>)
    1500:	7810      	ldrb	r0, [r2, #0]
    1502:	1c44      	adds	r4, r0, #1
    1504:	7014      	strb	r4, [r2, #0]
    1506:	b160      	cbz	r0, 1522 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1508:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    150c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1510:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1514:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1518:	bf14      	ite	ne
    151a:	2000      	movne	r0, #0
    151c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    1522:	4d1d      	ldr	r5, [pc, #116]	; (1598 <_m16src_start+0xa8>)
    1524:	782f      	ldrb	r7, [r5, #0]
    1526:	b12f      	cbz	r7, 1534 <_m16src_start+0x44>
		m16src_ref--;
    1528:	7010      	strb	r0, [r2, #0]
    152a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    152e:	f06f 000a 	mvn.w	r0, #10
    1532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1534:	2601      	movs	r6, #1
    1536:	702e      	strb	r6, [r5, #0]
    1538:	f383 8811 	msr	BASEPRI, r3
    153c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1540:	b319      	cbz	r1, 158a <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    1542:	4638      	mov	r0, r7
    1544:	f7ff fb7e 	bl	c44 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1548:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    154c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1550:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1554:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1556:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    155a:	b192      	cbz	r2, 1582 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    155c:	2200      	movs	r2, #0
    155e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1562:	4a0e      	ldr	r2, [pc, #56]	; (159c <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1564:	f013 0f01 	tst.w	r3, #1
    1568:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    156c:	bf08      	it	eq
    156e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1572:	2000      	movs	r0, #0
    1574:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1578:	f7ff fb54 	bl	c24 <_arch_irq_enable>
	m16src_grd = 0;
    157c:	2300      	movs	r3, #0
    157e:	702b      	strb	r3, [r5, #0]
    1580:	e7c4      	b.n	150c <_m16src_start+0x1c>
			__WFE();
    1582:	bf20      	wfe
			__SEV();
    1584:	bf40      	sev
			__WFE();
    1586:	bf20      	wfe
    1588:	e7e5      	b.n	1556 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    158a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    158e:	6026      	str	r6, [r4, #0]
    1590:	e7f4      	b.n	157c <_m16src_start+0x8c>
    1592:	bf00      	nop
    1594:	200000ba 	.word	0x200000ba
    1598:	200000b9 	.word	0x200000b9
    159c:	e000e100 	.word	0xe000e100

000015a0 <_k32src_start>:
{
    15a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15a2:	4606      	mov	r6, r0
    15a4:	460c      	mov	r4, r1
	__asm__ volatile(
    15a6:	f04f 0220 	mov.w	r2, #32
    15aa:	f3ef 8311 	mrs	r3, BASEPRI
    15ae:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    15b2:	4a2c      	ldr	r2, [pc, #176]	; (1664 <_k32src_start+0xc4>)
    15b4:	7815      	ldrb	r5, [r2, #0]
    15b6:	b165      	cbz	r5, 15d2 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    15b8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    15bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15c0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    15c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    15c8:	bf0c      	ite	eq
    15ca:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    15ce:	2000      	movne	r0, #0
    15d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    15d2:	2701      	movs	r7, #1
    15d4:	7017      	strb	r7, [r2, #0]
    15d6:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    15da:	4628      	mov	r0, r5
    15dc:	f7ff fb32 	bl	c44 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    15e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    15e4:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    15e6:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    15ea:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    15ee:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    15f2:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    15f6:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    15f8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    15fc:	b371      	cbz	r1, 165c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    15fe:	0792      	lsls	r2, r2, #30
    1600:	4f19      	ldr	r7, [pc, #100]	; (1668 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1602:	bf58      	it	pl
    1604:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1606:	f04f 0100 	mov.w	r1, #0
    160a:	f04f 0501 	mov.w	r5, #1
    160e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    1612:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1616:	bf58      	it	pl
    1618:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    161c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1620:	f7ff fb00 	bl	c24 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1628:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    162a:	2218      	movs	r2, #24
    162c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1630:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1634:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1638:	f014 0103 	ands.w	r1, r4, #3
    163c:	d1be      	bne.n	15bc <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    163e:	2010      	movs	r0, #16
    1640:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1644:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1648:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    164a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    164e:	f7ff ff4f 	bl	14f0 <_m16src_start>
		if (!err) {
    1652:	2800      	cmp	r0, #0
    1654:	d1b2      	bne.n	15bc <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1656:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    165a:	e7af      	b.n	15bc <_k32src_start+0x1c>
		__WFE();
    165c:	bf20      	wfe
		__SEV();
    165e:	bf40      	sev
		__WFE();
    1660:	bf20      	wfe
    1662:	e7c9      	b.n	15f8 <_k32src_start+0x58>
    1664:	200000b8 	.word	0x200000b8
    1668:	e000e100 	.word	0xe000e100

0000166c <_power_clock_isr>:
{
    166c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    166e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1672:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1674:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1678:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    167c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1680:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1684:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1688:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    168c:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1690:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1694:	f1be 0f00 	cmp.w	lr, #0
    1698:	d003      	beq.n	16a2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    169a:	f04f 0e00 	mov.w	lr, #0
    169e:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    16a2:	b127      	cbz	r7, 16ae <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    16a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16a8:	2700      	movs	r7, #0
    16aa:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    16ae:	b13a      	cbz	r2, 16c0 <_power_clock_isr+0x54>
    16b0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    16b2:	bf41      	itttt	mi
    16b4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    16b8:	2201      	movmi	r2, #1
    16ba:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    16be:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    16c0:	b120      	cbz	r0, 16cc <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    16c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16c6:	2200      	movs	r2, #0
    16c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    16cc:	b149      	cbz	r1, 16e2 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    16ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    16d2:	2100      	movs	r1, #0
    16d4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    16d8:	4628      	mov	r0, r5
    16da:	f7ff fecf 	bl	147c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    16de:	2301      	movs	r3, #1
    16e0:	6163      	str	r3, [r4, #20]
	if (ctto) {
    16e2:	b176      	cbz	r6, 1702 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    16e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16e8:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    16ea:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    16ec:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    16f0:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    16f2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    16f6:	f7ff fefb 	bl	14f0 <_m16src_start>
		if (!err) {
    16fa:	b910      	cbnz	r0, 1702 <_power_clock_isr+0x96>
    16fc:	4b01      	ldr	r3, [pc, #4]	; (1704 <_power_clock_isr+0x98>)
    16fe:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1704:	e000e100 	.word	0xe000e100

00001708 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    170c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    170e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1710:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1712:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1714:	440a      	add	r2, r1
	s = &rng->rand[first];
    1716:	4406      	add	r6, r0
	if (first <= last) {
    1718:	d81f      	bhi.n	175a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    171a:	1ae4      	subs	r4, r4, r3
    171c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    171e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1720:	bf3e      	ittt	cc
    1722:	1a64      	subcc	r4, r4, r1
    1724:	b2e7      	uxtbcc	r7, r4
    1726:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1728:	4423      	add	r3, r4
		octets -= avail;
    172a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    172e:	bf28      	it	cs
    1730:	2700      	movcs	r7, #0
		first += avail;
    1732:	b2db      	uxtb	r3, r3
		octets -= avail;
    1734:	b2c9      	uxtb	r1, r1
    1736:	4434      	add	r4, r6

		while (avail--) {
    1738:	42a6      	cmp	r6, r4
    173a:	d109      	bne.n	1750 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    173c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    173e:	7843      	ldrb	r3, [r0, #1]
    1740:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1742:	bf82      	ittt	hi
    1744:	4b20      	ldrhi	r3, [pc, #128]	; (17c8 <get+0xc0>)
    1746:	2201      	movhi	r2, #1
    1748:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    174a:	4608      	mov	r0, r1
    174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1750:	f816 5b01 	ldrb.w	r5, [r6], #1
    1754:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1758:	e7ee      	b.n	1738 <get+0x30>
		avail = rng->count - first;
    175a:	7805      	ldrb	r5, [r0, #0]
    175c:	1aed      	subs	r5, r5, r3
    175e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1760:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1762:	bf3f      	itttt	cc
    1764:	1a67      	subcc	r7, r4, r1
    1766:	19ed      	addcc	r5, r5, r7
    1768:	b2ef      	uxtbcc	r7, r5
    176a:	460d      	movcc	r5, r1
			first += avail;
    176c:	bf38      	it	cc
    176e:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1770:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1774:	bf32      	itee	cc
    1776:	b2db      	uxtbcc	r3, r3
    1778:	4627      	movcs	r7, r4
			first = 0;
    177a:	2300      	movcs	r3, #0
		octets -= avail;
    177c:	b2c9      	uxtb	r1, r1
    177e:	4696      	mov	lr, r2
    1780:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1784:	4566      	cmp	r6, ip
    1786:	d119      	bne.n	17bc <get+0xb4>
    1788:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    178a:	2900      	cmp	r1, #0
    178c:	d0d6      	beq.n	173c <get+0x34>
    178e:	2c00      	cmp	r4, #0
    1790:	d0d4      	beq.n	173c <get+0x34>
			if (octets < last) {
    1792:	428c      	cmp	r4, r1
    1794:	bf8a      	itet	hi
    1796:	460b      	movhi	r3, r1
    1798:	4623      	movls	r3, r4
				remaining = last - octets;
    179a:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    179c:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    17a0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    17a4:	bf8c      	ite	hi
    17a6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    17a8:	2700      	movls	r7, #0
			octets -= last;
    17aa:	b2c9      	uxtb	r1, r1
    17ac:	18f4      	adds	r4, r6, r3
			while (last--) {
    17ae:	42a6      	cmp	r6, r4
    17b0:	d0c4      	beq.n	173c <get+0x34>
				*(--d) = *s++;
    17b2:	f816 5b01 	ldrb.w	r5, [r6], #1
    17b6:	f802 5d01 	strb.w	r5, [r2, #-1]!
    17ba:	e7f8      	b.n	17ae <get+0xa6>
			*(--d) = *s++;
    17bc:	f816 8b01 	ldrb.w	r8, [r6], #1
    17c0:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    17c4:	e7de      	b.n	1784 <get+0x7c>
    17c6:	bf00      	nop
    17c8:	4000d000 	.word	0x4000d000

000017cc <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    17cc:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    17ce:	b1d0      	cbz	r0, 1806 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    17d0:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    17d2:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    17d4:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    17d6:	1c53      	adds	r3, r2, #1
    17d8:	b2db      	uxtb	r3, r3
		last = 0;
    17da:	42ab      	cmp	r3, r5
    17dc:	bf08      	it	eq
    17de:	2300      	moveq	r3, #0
	if (last == rng->first) {
    17e0:	42a3      	cmp	r3, r4
    17e2:	d010      	beq.n	1806 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    17e4:	b161      	cbz	r1, 1800 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    17e6:	490a      	ldr	r1, [pc, #40]	; (1810 <isr+0x44>)
    17e8:	4402      	add	r2, r0
    17ea:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    17ee:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    17f0:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    17f2:	3301      	adds	r3, #1
    17f4:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    17f6:	429d      	cmp	r5, r3
    17f8:	bf08      	it	eq
    17fa:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    17fc:	42a3      	cmp	r3, r4
    17fe:	d005      	beq.n	180c <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1800:	f06f 000f 	mvn.w	r0, #15
    1804:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1806:	f06f 0036 	mvn.w	r0, #54	; 0x36
    180a:	bd30      	pop	{r4, r5, pc}
		return 0;
    180c:	2000      	movs	r0, #0
}
    180e:	bd30      	pop	{r4, r5, pc}
    1810:	4000d000 	.word	0x4000d000

00001814 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1814:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1816:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1818:	2201      	movs	r2, #1
    181a:	4611      	mov	r1, r2
    181c:	4620      	mov	r0, r4
    181e:	f012 f9d9 	bl	13bd4 <_impl_k_sem_init>
    1822:	f104 0018 	add.w	r0, r4, #24
    1826:	2201      	movs	r2, #1
    1828:	2100      	movs	r1, #0
    182a:	f012 f9d3 	bl	13bd4 <_impl_k_sem_init>
	rng->threshold = threshold;
    182e:	2304      	movs	r3, #4
    1830:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1834:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1836:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    183c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    183e:	4b11      	ldr	r3, [pc, #68]	; (1884 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1840:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1844:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1846:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    184a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    184e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1852:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1856:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    185a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    185e:	f042 0201 	orr.w	r2, r2, #1
    1862:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1866:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1868:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    186c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    186e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1872:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1874:	462a      	mov	r2, r5
    1876:	f7ff fa07 	bl	c88 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    187a:	4630      	mov	r0, r6
    187c:	f7ff f9d2 	bl	c24 <_arch_irq_enable>

	return 0;
}
    1880:	4628      	mov	r0, r5
    1882:	bd70      	pop	{r4, r5, r6, pc}
    1884:	4000d000 	.word	0x4000d000

00001888 <isr_rand>:
{
    1888:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    188a:	4b12      	ldr	r3, [pc, #72]	; (18d4 <isr_rand+0x4c>)
    188c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1890:	b1fb      	cbz	r3, 18d2 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1892:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1894:	2101      	movs	r1, #1
    1896:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    189a:	f7ff ff97 	bl	17cc <isr>
		if (ret != -EBUSY) {
    189e:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    18a2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    18a4:	d00d      	beq.n	18c2 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    18a6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    18aa:	bf14      	ite	ne
    18ac:	2100      	movne	r1, #0
    18ae:	2101      	moveq	r1, #1
    18b0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    18b4:	f7ff ff8a 	bl	17cc <isr>
    18b8:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    18ba:	f105 0018 	add.w	r0, r5, #24
    18be:	f012 f993 	bl	13be8 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    18c2:	4b04      	ldr	r3, [pc, #16]	; (18d4 <isr_rand+0x4c>)
    18c4:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    18c6:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    18c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    18cc:	bf1c      	itt	ne
    18ce:	2201      	movne	r2, #1
    18d0:	605a      	strne	r2, [r3, #4]
    18d2:	bd38      	pop	{r3, r4, r5, pc}
    18d4:	4000d000 	.word	0x4000d000

000018d8 <entropy_nrf5_get_entropy>:
{
    18d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    18dc:	6885      	ldr	r5, [r0, #8]
{
    18de:	460f      	mov	r7, r1
    18e0:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    18e2:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    18e6:	b914      	cbnz	r4, 18ee <entropy_nrf5_get_entropy+0x16>
}
    18e8:	4620      	mov	r0, r4
    18ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    18ee:	2cff      	cmp	r4, #255	; 0xff
    18f0:	4623      	mov	r3, r4
    18f2:	bf28      	it	cs
    18f4:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    18f6:	1ae4      	subs	r4, r4, r3
    18f8:	b2de      	uxtb	r6, r3
    18fa:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    18fc:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1904:	4628      	mov	r0, r5
    1906:	f012 f9cf 	bl	13ca8 <_impl_k_sem_take>
    190a:	4631      	mov	r1, r6
    190c:	463a      	mov	r2, r7
    190e:	4648      	mov	r0, r9
    1910:	f7ff fefa 	bl	1708 <get>
    1914:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1916:	4628      	mov	r0, r5
    1918:	f012 f966 	bl	13be8 <_impl_k_sem_give>
			if (len8) {
    191c:	2e00      	cmp	r6, #0
    191e:	d0e2      	beq.n	18e6 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1924:	4640      	mov	r0, r8
    1926:	f012 f9bf 	bl	13ca8 <_impl_k_sem_take>
    192a:	e7e9      	b.n	1900 <entropy_nrf5_get_entropy+0x28>

0000192c <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    192c:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    192e:	4802      	ldr	r0, [pc, #8]	; (1938 <entropy_get_entropy_isr+0xc>)
    1930:	460a      	mov	r2, r1
    1932:	4619      	mov	r1, r3
    1934:	f7ff bee8 	b.w	1708 <get>
    1938:	200000f8 	.word	0x200000f8

0000193c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    193c:	4b08      	ldr	r3, [pc, #32]	; (1960 <rtc_compare_set+0x24>)
    193e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1942:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1946:	1ac0      	subs	r0, r0, r3
    1948:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    194c:	4b05      	ldr	r3, [pc, #20]	; (1964 <rtc_compare_set+0x28>)
    194e:	3802      	subs	r0, #2
    1950:	4298      	cmp	r0, r3
    1952:	bf82      	ittt	hi
    1954:	4b04      	ldrhi	r3, [pc, #16]	; (1968 <rtc_compare_set+0x2c>)
    1956:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    195a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    195e:	4770      	bx	lr
    1960:	40011000 	.word	0x40011000
    1964:	007ffffd 	.word	0x007ffffd
    1968:	e000e100 	.word	0xe000e100

0000196c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    196c:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    196e:	4b12      	ldr	r3, [pc, #72]	; (19b8 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1970:	4c12      	ldr	r4, [pc, #72]	; (19bc <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1972:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1976:	6822      	ldr	r2, [r4, #0]
    1978:	1a80      	subs	r0, r0, r2
    197a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    197e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1982:	d911      	bls.n	19a8 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1984:	490e      	ldr	r1, [pc, #56]	; (19c0 <rtc_announce_set_next+0x54>)
    1986:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1988:	f240 1347 	movw	r3, #327	; 0x147
    198c:	fbb0 f0f3 	udiv	r0, r0, r3
    1990:	4288      	cmp	r0, r1
    1992:	bf28      	it	cs
    1994:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1996:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    199a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    199e:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    19a0:	4b08      	ldr	r3, [pc, #32]	; (19c4 <rtc_announce_set_next+0x58>)
    19a2:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    19a4:	f012 f9c2 	bl	13d2c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    19a8:	6820      	ldr	r0, [r4, #0]
}
    19aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    19ae:	f200 1047 	addw	r0, r0, #327	; 0x147
    19b2:	f7ff bfc3 	b.w	193c <rtc_compare_set>
    19b6:	bf00      	nop
    19b8:	40011000 	.word	0x40011000
    19bc:	20000110 	.word	0x20000110
    19c0:	2000010c 	.word	0x2000010c
    19c4:	2000cfd8 	.word	0x2000cfd8

000019c8 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    19c8:	4b02      	ldr	r3, [pc, #8]	; (19d4 <rtc1_nrf5_isr+0xc>)
    19ca:	2200      	movs	r2, #0
    19cc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    19d0:	f7ff bfcc 	b.w	196c <rtc_announce_set_next>
    19d4:	40011000 	.word	0x40011000

000019d8 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    19d8:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    19dc:	4298      	cmp	r0, r3
    19de:	bf28      	it	cs
    19e0:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    19e2:	4b05      	ldr	r3, [pc, #20]	; (19f8 <_timer_idle_enter+0x20>)
    19e4:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    19e6:	4b05      	ldr	r3, [pc, #20]	; (19fc <_timer_idle_enter+0x24>)
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	f240 1247 	movw	r2, #327	; 0x147
    19ee:	fb02 3000 	mla	r0, r2, r0, r3
    19f2:	f7ff bfa3 	b.w	193c <rtc_compare_set>
    19f6:	bf00      	nop
    19f8:	2000010c 	.word	0x2000010c
    19fc:	20000110 	.word	0x20000110

00001a00 <_timer_idle_exit>:
{
    1a00:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1a02:	4b07      	ldr	r3, [pc, #28]	; (1a20 <_timer_idle_exit+0x20>)
    1a04:	2200      	movs	r2, #0
    1a06:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1a0a:	4b06      	ldr	r3, [pc, #24]	; (1a24 <_timer_idle_exit+0x24>)
    1a0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1a10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1a14:	f7ff ffaa 	bl	196c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1a18:	4b03      	ldr	r3, [pc, #12]	; (1a28 <_timer_idle_exit+0x28>)
    1a1a:	2201      	movs	r2, #1
    1a1c:	601a      	str	r2, [r3, #0]
    1a1e:	bd08      	pop	{r3, pc}
    1a20:	40011000 	.word	0x40011000
    1a24:	e000e100 	.word	0xe000e100
    1a28:	2000010c 	.word	0x2000010c

00001a2c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1a2c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1a2e:	4818      	ldr	r0, [pc, #96]	; (1a90 <_sys_clock_driver_init+0x64>)
    1a30:	f011 fcaa 	bl	13388 <device_get_binding>
	if (!clock) {
    1a34:	b348      	cbz	r0, 1a8a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1a36:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1a38:	4d16      	ldr	r5, [pc, #88]	; (1a94 <_sys_clock_driver_init+0x68>)
    1a3a:	681b      	ldr	r3, [r3, #0]
    1a3c:	2101      	movs	r1, #1
    1a3e:	4798      	blx	r3
	rtc_past = 0;
    1a40:	4b15      	ldr	r3, [pc, #84]	; (1a98 <_sys_clock_driver_init+0x6c>)
    1a42:	2400      	movs	r4, #0
    1a44:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1a46:	4b15      	ldr	r3, [pc, #84]	; (1a9c <_sys_clock_driver_init+0x70>)
    1a48:	2601      	movs	r6, #1
    1a4a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1a4c:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1a50:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1a54:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1a5c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1a60:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1a64:	4b0e      	ldr	r3, [pc, #56]	; (1aa0 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1a66:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1a6e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1a72:	4631      	mov	r1, r6
    1a74:	4622      	mov	r2, r4
    1a76:	2011      	movs	r0, #17
    1a78:	f7ff f906 	bl	c88 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1a7c:	2011      	movs	r0, #17
    1a7e:	f7ff f8d1 	bl	c24 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1a82:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1a84:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1a86:	602e      	str	r6, [r5, #0]
	return 0;
    1a88:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1a8e:	bd70      	pop	{r4, r5, r6, pc}
    1a90:	00014ac4 	.word	0x00014ac4
    1a94:	40011000 	.word	0x40011000
    1a98:	20000110 	.word	0x20000110
    1a9c:	2000010c 	.word	0x2000010c
    1aa0:	e000e100 	.word	0xe000e100

00001aa4 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1aa4:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1aa6:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1aa8:	480b      	ldr	r0, [pc, #44]	; (1ad8 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1aaa:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1aae:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1ab2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1ab6:	4299      	cmp	r1, r3
    1ab8:	d10a      	bne.n	1ad0 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1aba:	4a08      	ldr	r2, [pc, #32]	; (1adc <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1abc:	f240 1347 	movw	r3, #327	; 0x147
    1ac0:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1ac4:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1ac6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1aca:	fb00 3004 	mla	r0, r0, r4, r3
    1ace:	bd30      	pop	{r4, r5, pc}
    1ad0:	4619      	mov	r1, r3
    1ad2:	e7ec      	b.n	1aae <_timer_cycle_get_32+0xa>
    1ad4:	40011000 	.word	0x40011000
    1ad8:	20004158 	.word	0x20004158
    1adc:	2000cfdc 	.word	0x2000cfdc

00001ae0 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1ae0:	b530      	push	{r4, r5, lr}
    1ae2:	b085      	sub	sp, #20
    1ae4:	4604      	mov	r4, r0
    1ae6:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1ae8:	4668      	mov	r0, sp
    1aea:	2203      	movs	r2, #3
    1aec:	f7fe fd78 	bl	5e0 <memcpy>
	memset(res + 3, 0, 13);
    1af0:	220d      	movs	r2, #13
    1af2:	2100      	movs	r1, #0
    1af4:	f10d 0003 	add.w	r0, sp, #3
    1af8:	f7fe fd9e 	bl	638 <memset>

	err = bt_encrypt_le(irk, res, res);
    1afc:	4620      	mov	r0, r4
    1afe:	466a      	mov	r2, sp
    1b00:	4669      	mov	r1, sp
    1b02:	f006 fe7f 	bl	8804 <bt_encrypt_le>
	if (err) {
    1b06:	4604      	mov	r4, r0
    1b08:	b920      	cbnz	r0, 1b14 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1b0a:	2203      	movs	r2, #3
    1b0c:	4669      	mov	r1, sp
    1b0e:	4628      	mov	r0, r5
    1b10:	f7fe fd66 	bl	5e0 <memcpy>

	return 0;
}
    1b14:	4620      	mov	r0, r4
    1b16:	b005      	add	sp, #20
    1b18:	bd30      	pop	{r4, r5, pc}

00001b1a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1b1a:	b513      	push	{r0, r1, r4, lr}
    1b1c:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1b1e:	aa01      	add	r2, sp, #4
    1b20:	3103      	adds	r1, #3
    1b22:	f7ff ffdd 	bl	1ae0 <ah>
	if (err) {
    1b26:	b948      	cbnz	r0, 1b3c <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1b28:	2203      	movs	r2, #3
    1b2a:	a901      	add	r1, sp, #4
    1b2c:	4620      	mov	r0, r4
    1b2e:	f7fe fd42 	bl	5b6 <memcmp>
    1b32:	fab0 f080 	clz	r0, r0
    1b36:	0940      	lsrs	r0, r0, #5
}
    1b38:	b002      	add	sp, #8
    1b3a:	bd10      	pop	{r4, pc}
		return false;
    1b3c:	2000      	movs	r0, #0
    1b3e:	e7fb      	b.n	1b38 <bt_rpa_irk_matches+0x1e>

00001b40 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1b40:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1b42:	1ccd      	adds	r5, r1, #3
{
    1b44:	4606      	mov	r6, r0
    1b46:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1b48:	4628      	mov	r0, r5
    1b4a:	2103      	movs	r1, #3
    1b4c:	f006 fe3e 	bl	87cc <bt_rand>
	if (err) {
    1b50:	b960      	cbnz	r0, 1b6c <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1b52:	7963      	ldrb	r3, [r4, #5]
    1b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b5c:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1b5e:	4622      	mov	r2, r4
    1b60:	4629      	mov	r1, r5
    1b62:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1b68:	f7ff bfba 	b.w	1ae0 <ah>
}
    1b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001b70 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    1b70:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    1b72:	7802      	ldrb	r2, [r0, #0]
    1b74:	2a01      	cmp	r2, #1
{
    1b76:	4604      	mov	r4, r0
    1b78:	460b      	mov	r3, r1
	switch (src->type) {
    1b7a:	d017      	beq.n	1bac <uuid_to_uuid128+0x3c>
    1b7c:	d303      	bcc.n	1b86 <uuid_to_uuid128+0x16>
    1b7e:	2a02      	cmp	r2, #2
    1b80:	d02c      	beq.n	1bdc <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    1b82:	bcf0      	pop	{r4, r5, r6, r7}
    1b84:	4770      	bx	lr
		*dst = uuid128_base;
    1b86:	4a18      	ldr	r2, [pc, #96]	; (1be8 <uuid_to_uuid128+0x78>)
    1b88:	460d      	mov	r5, r1
    1b8a:	f102 0710 	add.w	r7, r2, #16
    1b8e:	6810      	ldr	r0, [r2, #0]
    1b90:	6851      	ldr	r1, [r2, #4]
    1b92:	462e      	mov	r6, r5
    1b94:	c603      	stmia	r6!, {r0, r1}
    1b96:	3208      	adds	r2, #8
    1b98:	42ba      	cmp	r2, r7
    1b9a:	4635      	mov	r5, r6
    1b9c:	d1f7      	bne.n	1b8e <uuid_to_uuid128+0x1e>
    1b9e:	7812      	ldrb	r2, [r2, #0]
    1ba0:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    1ba2:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    1ba4:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1ba6:	0a12      	lsrs	r2, r2, #8
    1ba8:	739a      	strb	r2, [r3, #14]
    1baa:	e7ea      	b.n	1b82 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    1bac:	4a0e      	ldr	r2, [pc, #56]	; (1be8 <uuid_to_uuid128+0x78>)
    1bae:	460d      	mov	r5, r1
    1bb0:	f102 0710 	add.w	r7, r2, #16
    1bb4:	6810      	ldr	r0, [r2, #0]
    1bb6:	6851      	ldr	r1, [r2, #4]
    1bb8:	462e      	mov	r6, r5
    1bba:	c603      	stmia	r6!, {r0, r1}
    1bbc:	3208      	adds	r2, #8
    1bbe:	42ba      	cmp	r2, r7
    1bc0:	4635      	mov	r5, r6
    1bc2:	d1f7      	bne.n	1bb4 <uuid_to_uuid128+0x44>
    1bc4:	7812      	ldrb	r2, [r2, #0]
    1bc6:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    1bc8:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    1bca:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    1bcc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    1bd0:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    1bd2:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    1bd4:	0a12      	lsrs	r2, r2, #8
    1bd6:	7399      	strb	r1, [r3, #14]
    1bd8:	741a      	strb	r2, [r3, #16]
    1bda:	e7d2      	b.n	1b82 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    1bdc:	4601      	mov	r1, r0
    1bde:	2211      	movs	r2, #17
    1be0:	4618      	mov	r0, r3
}
    1be2:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    1be4:	f7fe bcfc 	b.w	5e0 <memcpy>
    1be8:	00014aea 	.word	0x00014aea

00001bec <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    1bec:	b510      	push	{r4, lr}
    1bee:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    1bf0:	7801      	ldrb	r1, [r0, #0]
    1bf2:	7822      	ldrb	r2, [r4, #0]
    1bf4:	428a      	cmp	r2, r1
{
    1bf6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    1bf8:	d00e      	beq.n	1c18 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    1bfa:	4669      	mov	r1, sp
    1bfc:	f7ff ffb8 	bl	1b70 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    1c00:	a905      	add	r1, sp, #20
    1c02:	4620      	mov	r0, r4
    1c04:	f7ff ffb4 	bl	1b70 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    1c08:	2210      	movs	r2, #16
    1c0a:	f10d 0115 	add.w	r1, sp, #21
    1c0e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1c12:	f7fe fcd0 	bl	5b6 <memcmp>
    1c16:	e00a      	b.n	1c2e <bt_uuid_cmp+0x42>
	switch (u1->type) {
    1c18:	2a01      	cmp	r2, #1
    1c1a:	d00a      	beq.n	1c32 <bt_uuid_cmp+0x46>
    1c1c:	d304      	bcc.n	1c28 <bt_uuid_cmp+0x3c>
    1c1e:	2a02      	cmp	r2, #2
    1c20:	d00a      	beq.n	1c38 <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    1c22:	f06f 0015 	mvn.w	r0, #21
    1c26:	e002      	b.n	1c2e <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    1c28:	8840      	ldrh	r0, [r0, #2]
    1c2a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1c2c:	1ac0      	subs	r0, r0, r3
}
    1c2e:	b00a      	add	sp, #40	; 0x28
    1c30:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    1c32:	6840      	ldr	r0, [r0, #4]
    1c34:	6863      	ldr	r3, [r4, #4]
    1c36:	e7f9      	b.n	1c2c <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    1c38:	2210      	movs	r2, #16
    1c3a:	1c61      	adds	r1, r4, #1
    1c3c:	3001      	adds	r0, #1
    1c3e:	e7e8      	b.n	1c12 <bt_uuid_cmp+0x26>

00001c40 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    1c40:	7803      	ldrb	r3, [r0, #0]
    1c42:	8842      	ldrh	r2, [r0, #2]
    1c44:	f013 0301 	ands.w	r3, r3, #1
    1c48:	d105      	bne.n	1c56 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    1c4a:	4909      	ldr	r1, [pc, #36]	; (1c70 <valid_adv_param+0x30>)
    1c4c:	7b89      	ldrb	r1, [r1, #14]
    1c4e:	2908      	cmp	r1, #8
    1c50:	d801      	bhi.n	1c56 <valid_adv_param+0x16>
    1c52:	2a9f      	cmp	r2, #159	; 0x9f
    1c54:	d90a      	bls.n	1c6c <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    1c56:	8880      	ldrh	r0, [r0, #4]
    1c58:	4282      	cmp	r2, r0
    1c5a:	d807      	bhi.n	1c6c <valid_adv_param+0x2c>
    1c5c:	2a1f      	cmp	r2, #31
    1c5e:	d905      	bls.n	1c6c <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    1c60:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    1c64:	bf8c      	ite	hi
    1c66:	2000      	movhi	r0, #0
    1c68:	2001      	movls	r0, #1
    1c6a:	4770      	bx	lr
			return false;
    1c6c:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    1c6e:	4770      	bx	lr
    1c70:	2000cba0 	.word	0x2000cba0

00001c74 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1c74:	2207      	movs	r2, #7
    1c76:	f7fe bcb3 	b.w	5e0 <memcpy>

00001c7a <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1c7a:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1c7c:	f3bf 8f5b 	dmb	ish
    1c80:	e850 3f00 	ldrex	r3, [r0]
    1c84:	ea43 0201 	orr.w	r2, r3, r1
    1c88:	e840 2e00 	strex	lr, r2, [r0]
    1c8c:	f1be 0f00 	cmp.w	lr, #0
    1c90:	d1f6      	bne.n	1c80 <atomic_or+0x6>
    1c92:	f3bf 8f5b 	dmb	ish
    1c96:	4618      	mov	r0, r3
    1c98:	f85d fb04 	ldr.w	pc, [sp], #4

00001c9c <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1c9c:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c9e:	f3bf 8f5b 	dmb	ish
    1ca2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    1ca6:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1caa:	f001 011f 	and.w	r1, r1, #31
    1cae:	4108      	asrs	r0, r1
}
    1cb0:	f000 0001 	and.w	r0, r0, #1
    1cb4:	4770      	bx	lr

00001cb6 <atomic_and>:
{
    1cb6:	b500      	push	{lr}
}
    1cb8:	f3bf 8f5b 	dmb	ish
    1cbc:	e850 3f00 	ldrex	r3, [r0]
    1cc0:	ea03 0201 	and.w	r2, r3, r1
    1cc4:	e840 2e00 	strex	lr, r2, [r0]
    1cc8:	f1be 0f00 	cmp.w	lr, #0
    1ccc:	d1f6      	bne.n	1cbc <atomic_and+0x6>
    1cce:	f3bf 8f5b 	dmb	ish
    1cd2:	4618      	mov	r0, r3
    1cd4:	f85d fb04 	ldr.w	pc, [sp], #4

00001cd8 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    1cd8:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    1cda:	f001 031f 	and.w	r3, r1, #31
    1cde:	2401      	movs	r4, #1
    1ce0:	409c      	lsls	r4, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ce2:	094b      	lsrs	r3, r1, #5
    1ce4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1ce8:	43e1      	mvns	r1, r4
    1cea:	f7ff ffe4 	bl	1cb6 <atomic_and>

	return (old & mask) != 0;
    1cee:	4204      	tst	r4, r0
}
    1cf0:	bf14      	ite	ne
    1cf2:	2001      	movne	r0, #1
    1cf4:	2000      	moveq	r0, #0
    1cf6:	bd10      	pop	{r4, pc}

00001cf8 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    1cf8:	78c3      	ldrb	r3, [r0, #3]
    1cfa:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    1cfc:	f241 3288 	movw	r2, #5000	; 0x1388
    1d00:	f100 0174 	add.w	r1, r0, #116	; 0x74
    1d04:	bf08      	it	eq
    1d06:	2200      	moveq	r2, #0
    1d08:	4801      	ldr	r0, [pc, #4]	; (1d10 <update_conn_param+0x18>)
    1d0a:	f012 bb11 	b.w	14330 <k_delayed_work_submit_to_queue>
    1d0e:	bf00      	nop
    1d10:	20004160 	.word	0x20004160

00001d14 <update_sec_level.part.13>:
static void update_sec_level(struct bt_conn *conn)
    1d14:	b508      	push	{r3, lr}
    1d16:	4602      	mov	r2, r0
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    1d18:	6f00      	ldr	r0, [r0, #112]	; 0x70
    1d1a:	b1a8      	cbz	r0, 1d48 <update_sec_level.part.13+0x34>
    1d1c:	2100      	movs	r1, #0
    1d1e:	3008      	adds	r0, #8
    1d20:	f7ff ffbc 	bl	1c9c <atomic_test_bit>
    1d24:	b180      	cbz	r0, 1d48 <update_sec_level.part.13+0x34>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    1d26:	6f13      	ldr	r3, [r2, #112]	; 0x70
    1d28:	899b      	ldrh	r3, [r3, #12]
    1d2a:	069b      	lsls	r3, r3, #26
			conn->sec_level = BT_SECURITY_FIPS;
    1d2c:	bf4c      	ite	mi
    1d2e:	2304      	movmi	r3, #4
			conn->sec_level = BT_SECURITY_HIGH;
    1d30:	2303      	movpl	r3, #3
		conn->sec_level = BT_SECURITY_MEDIUM;
    1d32:	7213      	strb	r3, [r2, #8]
	if (conn->required_sec_level > conn->sec_level) {
    1d34:	7a51      	ldrb	r1, [r2, #9]
    1d36:	7a13      	ldrb	r3, [r2, #8]
    1d38:	4299      	cmp	r1, r3
    1d3a:	d907      	bls.n	1d4c <update_sec_level.part.13+0x38>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    1d3c:	2105      	movs	r1, #5
    1d3e:	4610      	mov	r0, r2
}
    1d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    1d44:	f002 ba07 	b.w	4156 <bt_conn_disconnect>
		conn->sec_level = BT_SECURITY_MEDIUM;
    1d48:	2302      	movs	r3, #2
    1d4a:	e7f2      	b.n	1d32 <update_sec_level.part.13+0x1e>
    1d4c:	bd08      	pop	{r3, pc}
	...

00001d50 <hci_cmd_done.isra.18>:
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1d50:	b570      	push	{r4, r5, r6, lr}
    1d52:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1d54:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1d56:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1d58:	f011 f9c8 	bl	130ec <net_buf_pool_get>
    1d5c:	4b0e      	ldr	r3, [pc, #56]	; (1d98 <hci_cmd_done.isra.18+0x48>)
    1d5e:	4283      	cmp	r3, r0
    1d60:	d119      	bne.n	1d96 <hci_cmd_done.isra.18+0x46>
	if (cmd(buf)->opcode != opcode) {
    1d62:	4628      	mov	r0, r5
    1d64:	f011 f9c8 	bl	130f8 <net_buf_id>
	if (cmd(buf)->sync) {
    1d68:	4628      	mov	r0, r5
    1d6a:	f011 f9c5 	bl	130f8 <net_buf_id>
    1d6e:	4c0b      	ldr	r4, [pc, #44]	; (1d9c <hci_cmd_done.isra.18+0x4c>)
    1d70:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1d74:	6843      	ldr	r3, [r0, #4]
    1d76:	b173      	cbz	r3, 1d96 <hci_cmd_done.isra.18+0x46>
		cmd(buf)->status = status;
    1d78:	4628      	mov	r0, r5
    1d7a:	f011 f9bd 	bl	130f8 <net_buf_id>
    1d7e:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1d82:	4628      	mov	r0, r5
    1d84:	f011 f9b8 	bl	130f8 <net_buf_id>
    1d88:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
    1d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1d90:	6840      	ldr	r0, [r0, #4]
    1d92:	f011 bf29 	b.w	13be8 <_impl_k_sem_give>
    1d96:	bd70      	pop	{r4, r5, r6, pc}
    1d98:	2000d0ec 	.word	0x2000d0ec
    1d9c:	20000118 	.word	0x20000118

00001da0 <sys_put_le64>:
    1da0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    1da4:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    1da6:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
    1da8:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    1daa:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    1dae:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
    1db0:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    1db2:	7090      	strb	r0, [r2, #2]
    1db4:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    1db6:	0a00      	lsrs	r0, r0, #8
    1db8:	0a09      	lsrs	r1, r1, #8
    1dba:	70d0      	strb	r0, [r2, #3]
    1dbc:	7153      	strb	r3, [r2, #5]
    1dbe:	71d1      	strb	r1, [r2, #7]
    1dc0:	4770      	bx	lr
	...

00001dc4 <bt_hci_cmd_create>:
{
    1dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1dc8:	4680      	mov	r8, r0
    1dca:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1dcc:	4813      	ldr	r0, [pc, #76]	; (1e1c <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1dce:	4d14      	ldr	r5, [pc, #80]	; (1e20 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1dd4:	f011 fa1e 	bl	13214 <net_buf_alloc_fixed>
    1dd8:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1dda:	f100 0608 	add.w	r6, r0, #8
    1dde:	2100      	movs	r1, #0
    1de0:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1de2:	2700      	movs	r7, #0
    1de4:	f011 fa35 	bl	13252 <net_buf_simple_reserve>
    1de8:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1dea:	4620      	mov	r0, r4
    1dec:	f011 f984 	bl	130f8 <net_buf_id>
    1df0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1df4:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1df8:	4620      	mov	r0, r4
    1dfa:	f011 f97d 	bl	130f8 <net_buf_id>
    1dfe:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1e02:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1e04:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1e06:	4630      	mov	r0, r6
    1e08:	f011 fa66 	bl	132d8 <net_buf_simple_add>
	hdr->param_len = param_len;
    1e0c:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1e10:	f8a0 8000 	strh.w	r8, [r0]
}
    1e14:	4620      	mov	r0, r4
    1e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e1a:	bf00      	nop
    1e1c:	2000d0ec 	.word	0x2000d0ec
    1e20:	20000118 	.word	0x20000118

00001e24 <bt_hci_cmd_send_sync>:
{
    1e24:	b570      	push	{r4, r5, r6, lr}
    1e26:	4615      	mov	r5, r2
    1e28:	b086      	sub	sp, #24
	if (!buf) {
    1e2a:	460c      	mov	r4, r1
    1e2c:	b919      	cbnz	r1, 1e36 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1e2e:	f7ff ffc9 	bl	1dc4 <bt_hci_cmd_create>
		if (!buf) {
    1e32:	4604      	mov	r4, r0
    1e34:	b368      	cbz	r0, 1e92 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1e36:	2201      	movs	r2, #1
    1e38:	2100      	movs	r1, #0
    1e3a:	4668      	mov	r0, sp
    1e3c:	f011 feca 	bl	13bd4 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1e40:	4620      	mov	r0, r4
    1e42:	f011 f959 	bl	130f8 <net_buf_id>
    1e46:	4e14      	ldr	r6, [pc, #80]	; (1e98 <bt_hci_cmd_send_sync+0x74>)
    1e48:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1e4c:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1e50:	4620      	mov	r0, r4
    1e52:	f011 fa3d 	bl	132d0 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1e56:	4621      	mov	r1, r4
    1e58:	4810      	ldr	r0, [pc, #64]	; (1e9c <bt_hci_cmd_send_sync+0x78>)
    1e5a:	f011 f9fe 	bl	1325a <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1e5e:	f242 7110 	movw	r1, #10000	; 0x2710
    1e62:	4668      	mov	r0, sp
    1e64:	f011 ff20 	bl	13ca8 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1e68:	4620      	mov	r0, r4
    1e6a:	f011 f945 	bl	130f8 <net_buf_id>
    1e6e:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1e72:	b130      	cbz	r0, 1e82 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1e74:	4620      	mov	r0, r4
    1e76:	f011 f9fd 	bl	13274 <net_buf_unref>
		err = -EIO;
    1e7a:	f06f 0004 	mvn.w	r0, #4
}
    1e7e:	b006      	add	sp, #24
    1e80:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    1e82:	b10d      	cbz	r5, 1e88 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    1e84:	602c      	str	r4, [r5, #0]
    1e86:	e7fa      	b.n	1e7e <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    1e88:	4620      	mov	r0, r4
    1e8a:	f011 f9f3 	bl	13274 <net_buf_unref>
		err = 0;
    1e8e:	4628      	mov	r0, r5
    1e90:	e7f5      	b.n	1e7e <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    1e92:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1e96:	e7f2      	b.n	1e7e <bt_hci_cmd_send_sync+0x5a>
    1e98:	20000118 	.word	0x20000118
    1e9c:	2000cc74 	.word	0x2000cc74

00001ea0 <set_random_address>:
{
    1ea0:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    1ea2:	4d15      	ldr	r5, [pc, #84]	; (1ef8 <set_random_address+0x58>)
    1ea4:	2206      	movs	r2, #6
    1ea6:	f105 0108 	add.w	r1, r5, #8
    1eaa:	4606      	mov	r6, r0
    1eac:	f7fe fb83 	bl	5b6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    1eb0:	4604      	mov	r4, r0
    1eb2:	b1d8      	cbz	r0, 1eec <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    1eb4:	2106      	movs	r1, #6
    1eb6:	f242 0005 	movw	r0, #8197	; 0x2005
    1eba:	f7ff ff83 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    1ebe:	4604      	mov	r4, r0
    1ec0:	b1b0      	cbz	r0, 1ef0 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    1ec2:	2206      	movs	r2, #6
    1ec4:	4631      	mov	r1, r6
    1ec6:	3008      	adds	r0, #8
    1ec8:	f011 fa0c 	bl	132e4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1ecc:	4621      	mov	r1, r4
    1ece:	2200      	movs	r2, #0
    1ed0:	f242 0005 	movw	r0, #8197	; 0x2005
    1ed4:	f7ff ffa6 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    1ed8:	4604      	mov	r4, r0
    1eda:	b938      	cbnz	r0, 1eec <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    1edc:	2206      	movs	r2, #6
    1ede:	4631      	mov	r1, r6
    1ee0:	f105 0008 	add.w	r0, r5, #8
    1ee4:	f7fe fb7c 	bl	5e0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1ee8:	2301      	movs	r3, #1
    1eea:	71eb      	strb	r3, [r5, #7]
}
    1eec:	4620      	mov	r0, r4
    1eee:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    1ef0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1ef4:	e7fa      	b.n	1eec <set_random_address+0x4c>
    1ef6:	bf00      	nop
    1ef8:	2000cba0 	.word	0x2000cba0

00001efc <le_set_private_addr>:
{
    1efc:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    1efe:	2106      	movs	r1, #6
    1f00:	4668      	mov	r0, sp
    1f02:	f006 fc63 	bl	87cc <bt_rand>
	if (err) {
    1f06:	b940      	cbnz	r0, 1f1a <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    1f08:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    1f0c:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    1f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1f12:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    1f16:	f7ff ffc3 	bl	1ea0 <set_random_address>
}
    1f1a:	b003      	add	sp, #12
    1f1c:	f85d fb04 	ldr.w	pc, [sp], #4

00001f20 <hci_id_add>:
{
    1f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f22:	4607      	mov	r7, r0
    1f24:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    1f26:	f242 0027 	movw	r0, #8231	; 0x2027
    1f2a:	2127      	movs	r1, #39	; 0x27
    1f2c:	f7ff ff4a 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    1f30:	4604      	mov	r4, r0
    1f32:	b1d0      	cbz	r0, 1f6a <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    1f34:	2127      	movs	r1, #39	; 0x27
    1f36:	3008      	adds	r0, #8
    1f38:	f011 f9ce 	bl	132d8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    1f3c:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    1f3e:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    1f40:	f7ff fe98 	bl	1c74 <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    1f44:	4631      	mov	r1, r6
    1f46:	2210      	movs	r2, #16
    1f48:	1de8      	adds	r0, r5, #7
    1f4a:	f7fe fb49 	bl	5e0 <memcpy>
	memset(cp->local_irk, 0, 16);
    1f4e:	2210      	movs	r2, #16
    1f50:	2100      	movs	r1, #0
    1f52:	f105 0017 	add.w	r0, r5, #23
    1f56:	f7fe fb6f 	bl	638 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    1f5a:	4621      	mov	r1, r4
    1f5c:	2200      	movs	r2, #0
    1f5e:	f242 0027 	movw	r0, #8231	; 0x2027
}
    1f62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    1f66:	f7ff bf5d 	b.w	1e24 <bt_hci_cmd_send_sync>
}
    1f6a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001f70 <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
    1f70:	f100 0130 	add.w	r1, r0, #48	; 0x30
    1f74:	f7ff bfd4 	b.w	1f20 <hci_id_add>

00001f78 <addr_res_enable>:
{
    1f78:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    1f7a:	2101      	movs	r1, #1
{
    1f7c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    1f7e:	f242 002d 	movw	r0, #8237	; 0x202d
    1f82:	f7ff ff1f 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    1f86:	4604      	mov	r4, r0
    1f88:	b158      	cbz	r0, 1fa2 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
    1f8a:	4629      	mov	r1, r5
    1f8c:	3008      	adds	r0, #8
    1f8e:	f011 f9b2 	bl	132f6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    1f92:	4621      	mov	r1, r4
    1f94:	2200      	movs	r2, #0
    1f96:	f242 002d 	movw	r0, #8237	; 0x202d
}
    1f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    1f9e:	f7ff bf41 	b.w	1e24 <bt_hci_cmd_send_sync>
}
    1fa2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1fa6:	bd38      	pop	{r3, r4, r5, pc}

00001fa8 <set_le_scan_enable>:
{
    1fa8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1faa:	2102      	movs	r1, #2
{
    1fac:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    1fae:	f242 000c 	movw	r0, #8204	; 0x200c
    1fb2:	f7ff ff07 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    1fb6:	4604      	mov	r4, r0
    1fb8:	b328      	cbz	r0, 2006 <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
    1fba:	2102      	movs	r1, #2
    1fbc:	3008      	adds	r0, #8
    1fbe:	f011 f98b 	bl	132d8 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fc2:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    1fc4:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fc6:	d115      	bne.n	1ff4 <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    1fc8:	210a      	movs	r1, #10
    1fca:	4810      	ldr	r0, [pc, #64]	; (200c <set_le_scan_enable+0x64>)
    1fcc:	f7ff fe66 	bl	1c9c <atomic_test_bit>
    1fd0:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    1fd2:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    1fd4:	4621      	mov	r1, r4
    1fd6:	2200      	movs	r2, #0
    1fd8:	f242 000c 	movw	r0, #8204	; 0x200c
    1fdc:	f7ff ff22 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    1fe0:	4604      	mov	r4, r0
    1fe2:	b928      	cbnz	r0, 1ff0 <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1fe4:	2d01      	cmp	r5, #1
    1fe6:	d108      	bne.n	1ffa <set_le_scan_enable+0x52>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1fe8:	2180      	movs	r1, #128	; 0x80
    1fea:	4808      	ldr	r0, [pc, #32]	; (200c <set_le_scan_enable+0x64>)
    1fec:	f7ff fe45 	bl	1c7a <atomic_or>
}
    1ff0:	4620      	mov	r0, r4
    1ff2:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1ff4:	2300      	movs	r3, #0
    1ff6:	7043      	strb	r3, [r0, #1]
    1ff8:	e7eb      	b.n	1fd2 <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ffa:	f06f 0180 	mvn.w	r1, #128	; 0x80
    1ffe:	4803      	ldr	r0, [pc, #12]	; (200c <set_le_scan_enable+0x64>)
    2000:	f7ff fe59 	bl	1cb6 <atomic_and>
    2004:	e7f4      	b.n	1ff0 <set_le_scan_enable+0x48>
		return -ENOBUFS;
    2006:	f06f 0436 	mvn.w	r4, #54	; 0x36
    200a:	e7f1      	b.n	1ff0 <set_le_scan_enable+0x48>
    200c:	2000cc10 	.word	0x2000cc10

00002010 <set_advertise_enable>:
{
    2010:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2012:	2101      	movs	r1, #1
{
    2014:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2016:	f242 000a 	movw	r0, #8202	; 0x200a
    201a:	f7ff fed3 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    201e:	4604      	mov	r4, r0
    2020:	b1d8      	cbz	r0, 205a <set_advertise_enable+0x4a>
    2022:	3008      	adds	r0, #8
	if (enable) {
    2024:	b18d      	cbz	r5, 204a <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2026:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2028:	f011 f965 	bl	132f6 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    202c:	4621      	mov	r1, r4
    202e:	2200      	movs	r2, #0
    2030:	f242 000a 	movw	r0, #8202	; 0x200a
    2034:	f7ff fef6 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2038:	4604      	mov	r4, r0
    203a:	b920      	cbnz	r0, 2046 <set_advertise_enable+0x36>
	if (enable) {
    203c:	b13d      	cbz	r5, 204e <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    203e:	2120      	movs	r1, #32
    2040:	4807      	ldr	r0, [pc, #28]	; (2060 <set_advertise_enable+0x50>)
    2042:	f7ff fe1a 	bl	1c7a <atomic_or>
}
    2046:	4620      	mov	r0, r4
    2048:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    204a:	4629      	mov	r1, r5
    204c:	e7ec      	b.n	2028 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    204e:	f06f 0120 	mvn.w	r1, #32
    2052:	4803      	ldr	r0, [pc, #12]	; (2060 <set_advertise_enable+0x50>)
    2054:	f7ff fe2f 	bl	1cb6 <atomic_and>
    2058:	e7f5      	b.n	2046 <set_advertise_enable+0x36>
		return -ENOBUFS;
    205a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    205e:	e7f2      	b.n	2046 <set_advertise_enable+0x36>
    2060:	2000cc10 	.word	0x2000cc10

00002064 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2068:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    206a:	2120      	movs	r1, #32
{
    206c:	4607      	mov	r7, r0
    206e:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2070:	f7ff fea8 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    2074:	4606      	mov	r6, r0
    2076:	2800      	cmp	r0, #0
    2078:	d03c      	beq.n	20f4 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    207a:	2120      	movs	r1, #32
    207c:	3008      	adds	r0, #8
    207e:	f011 f92b 	bl	132d8 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    2082:	2220      	movs	r2, #32
    2084:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    2086:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    2088:	f7fe fad6 	bl	638 <memset>

	for (i = 0; i < ad_len; i++) {
    208c:	f04f 0900 	mov.w	r9, #0
    2090:	45c1      	cmp	r9, r8
    2092:	d106      	bne.n	20a2 <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2094:	4631      	mov	r1, r6
    2096:	4638      	mov	r0, r7
    2098:	2200      	movs	r2, #0
}
    209a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    209e:	f7ff bec1 	b.w	1e24 <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    20a2:	7862      	ldrb	r2, [r4, #1]
    20a4:	782b      	ldrb	r3, [r5, #0]
    20a6:	18d1      	adds	r1, r2, r3
    20a8:	3102      	adds	r1, #2
    20aa:	291f      	cmp	r1, #31
    20ac:	f104 0408 	add.w	r4, r4, #8
    20b0:	dd06      	ble.n	20c0 <set_ad+0x5c>
			net_buf_unref(buf);
    20b2:	4630      	mov	r0, r6
    20b4:	f011 f8de 	bl	13274 <net_buf_unref>
			return -EINVAL;
    20b8:	f06f 0015 	mvn.w	r0, #21
    20bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    20c0:	18e9      	adds	r1, r5, r3
    20c2:	1c50      	adds	r0, r2, #1
    20c4:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    20c6:	1c98      	adds	r0, r3, #2
    20c8:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    20ca:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    20cc:	7028      	strb	r0, [r5, #0]
    20ce:	fa55 f383 	uxtab	r3, r5, r3
    20d2:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    20d6:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    20d8:	3001      	adds	r0, #1
    20da:	f854 1c04 	ldr.w	r1, [r4, #-4]
    20de:	4428      	add	r0, r5
    20e0:	f7fe fa7e 	bl	5e0 <memcpy>
		set_data->len += ad[i].data_len;
    20e4:	782b      	ldrb	r3, [r5, #0]
    20e6:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    20ea:	4413      	add	r3, r2
    20ec:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    20ee:	f109 0901 	add.w	r9, r9, #1
    20f2:	e7cd      	b.n	2090 <set_ad+0x2c>
		return -ENOBUFS;
    20f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    20f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000020fc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    20fc:	8802      	ldrh	r2, [r0, #0]
    20fe:	8843      	ldrh	r3, [r0, #2]
    2100:	429a      	cmp	r2, r3
{
    2102:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    2104:	d818      	bhi.n	2138 <bt_le_conn_params_valid+0x3c>
    2106:	2a05      	cmp	r2, #5
    2108:	d916      	bls.n	2138 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    210a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    210e:	d813      	bhi.n	2138 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2110:	8884      	ldrh	r4, [r0, #4]
    2112:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    2116:	d20f      	bcs.n	2138 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2118:	88c1      	ldrh	r1, [r0, #6]
    211a:	f1a1 020a 	sub.w	r2, r1, #10
    211e:	b292      	uxth	r2, r2
    2120:	f640 4076 	movw	r0, #3190	; 0xc76
    2124:	4282      	cmp	r2, r0
    2126:	d807      	bhi.n	2138 <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2128:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    212c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2130:	bfb4      	ite	lt
    2132:	2001      	movlt	r0, #1
    2134:	2000      	movge	r0, #0
    2136:	bd10      	pop	{r4, pc}
		return false;
    2138:	2000      	movs	r0, #0
}
    213a:	bd10      	pop	{r4, pc}

0000213c <bt_id_add>:
{
    213c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    2140:	4c4c      	ldr	r4, [pc, #304]	; (2274 <bt_id_add+0x138>)
    2142:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
{
    2146:	4606      	mov	r6, r0
    2148:	4625      	mov	r5, r4
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    214a:	b11b      	cbz	r3, 2154 <bt_id_add+0x18>
    214c:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    2150:	429a      	cmp	r2, r3
    2152:	d909      	bls.n	2168 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    2154:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    2158:	3301      	adds	r3, #1
    215a:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		return 0;
    215e:	2400      	movs	r4, #0
}
    2160:	4620      	mov	r0, r4
    2162:	b002      	add	sp, #8
    2164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2168:	2102      	movs	r1, #2
    216a:	2000      	movs	r0, #0
    216c:	f001 ffa4 	bl	40b8 <bt_conn_lookup_state_le>
	if (conn) {
    2170:	4680      	mov	r8, r0
    2172:	b180      	cbz	r0, 2196 <bt_id_add+0x5a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2178:	f104 0070 	add.w	r0, r4, #112	; 0x70
    217c:	f7ff fd7d 	bl	1c7a <atomic_or>
    2180:	2104      	movs	r1, #4
    2182:	f106 0008 	add.w	r0, r6, #8
    2186:	f7ff fd78 	bl	1c7a <atomic_or>
		bt_conn_unref(conn);
    218a:	4640      	mov	r0, r8
    218c:	f001 ffbd 	bl	410a <bt_conn_unref>
		return -EAGAIN;
    2190:	f06f 040a 	mvn.w	r4, #10
    2194:	e7e4      	b.n	2160 <bt_id_add+0x24>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    2196:	2105      	movs	r1, #5
    2198:	f104 0070 	add.w	r0, r4, #112	; 0x70
    219c:	f7ff fd7e 	bl	1c9c <atomic_test_bit>
	if (adv_enabled) {
    21a0:	4607      	mov	r7, r0
    21a2:	b110      	cbz	r0, 21aa <bt_id_add+0x6e>
		set_advertise_enable(false);
    21a4:	4640      	mov	r0, r8
    21a6:	f7ff ff33 	bl	2010 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    21aa:	2107      	movs	r1, #7
    21ac:	4832      	ldr	r0, [pc, #200]	; (2278 <bt_id_add+0x13c>)
    21ae:	f7ff fd75 	bl	1c9c <atomic_test_bit>
	if (scan_enabled) {
    21b2:	4680      	mov	r8, r0
    21b4:	b110      	cbz	r0, 21bc <bt_id_add+0x80>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    21b6:	2000      	movs	r0, #0
    21b8:	f7ff fef6 	bl	1fa8 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    21bc:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    21c0:	b99b      	cbnz	r3, 21ea <bt_id_add+0xae>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    21c2:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    21c6:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    21ca:	429a      	cmp	r2, r3
    21cc:	d122      	bne.n	2214 <bt_id_add+0xd8>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    21ce:	2200      	movs	r2, #0
    21d0:	4611      	mov	r1, r2
    21d2:	f242 0029 	movw	r0, #8233	; 0x2029
    21d6:	f7ff fe25 	bl	1e24 <bt_hci_cmd_send_sync>
		if (err) {
    21da:	4604      	mov	r4, r0
    21dc:	b958      	cbnz	r0, 21f6 <bt_id_add+0xba>
		bt_dev.le.rl_entries++;
    21de:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    21e2:	3301      	adds	r3, #1
    21e4:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
    21e8:	e005      	b.n	21f6 <bt_id_add+0xba>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    21ea:	2000      	movs	r0, #0
    21ec:	f7ff fec4 	bl	1f78 <addr_res_enable>
		if (err) {
    21f0:	4604      	mov	r4, r0
    21f2:	2800      	cmp	r0, #0
    21f4:	d0e5      	beq.n	21c2 <bt_id_add+0x86>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    21f6:	2001      	movs	r0, #1
    21f8:	f7ff febe 	bl	1f78 <addr_res_enable>
	if (scan_enabled) {
    21fc:	f1b8 0f00 	cmp.w	r8, #0
    2200:	d002      	beq.n	2208 <bt_id_add+0xcc>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2202:	2001      	movs	r0, #1
    2204:	f7ff fed0 	bl	1fa8 <set_le_scan_enable>
	if (adv_enabled) {
    2208:	2f00      	cmp	r7, #0
    220a:	d0a9      	beq.n	2160 <bt_id_add+0x24>
		set_advertise_enable(true);
    220c:	2001      	movs	r0, #1
    220e:	f7ff feff 	bl	2010 <set_advertise_enable>
    2212:	e7a5      	b.n	2160 <bt_id_add+0x24>
	err = hci_id_add(&keys->addr, keys->irk.val);
    2214:	f106 0130 	add.w	r1, r6, #48	; 0x30
    2218:	4630      	mov	r0, r6
    221a:	f7ff fe81 	bl	1f20 <hci_id_add>
	if (err) {
    221e:	4604      	mov	r4, r0
    2220:	2800      	cmp	r0, #0
    2222:	d1e8      	bne.n	21f6 <bt_id_add+0xba>
	bt_dev.le.rl_entries++;
    2224:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    2228:	3301      	adds	r3, #1
    222a:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    222e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
    2232:	075b      	lsls	r3, r3, #29
    2234:	d5df      	bpl.n	21f6 <bt_id_add+0xba>
	bt_addr_le_copy(&cp.id_addr, addr);
    2236:	4631      	mov	r1, r6
    2238:	4668      	mov	r0, sp
    223a:	f7ff fd1b 	bl	1c74 <bt_addr_le_copy>
	cp.mode = mode;
    223e:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    2240:	2108      	movs	r1, #8
    2242:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    2246:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    224a:	f7ff fdbb 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    224e:	4605      	mov	r5, r0
    2250:	b160      	cbz	r0, 226c <bt_id_add+0x130>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    2252:	2208      	movs	r2, #8
    2254:	4669      	mov	r1, sp
    2256:	4410      	add	r0, r2
    2258:	f011 f844 	bl	132e4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    225c:	4622      	mov	r2, r4
    225e:	4629      	mov	r1, r5
    2260:	f242 004e 	movw	r0, #8270	; 0x204e
    2264:	f7ff fdde 	bl	1e24 <bt_hci_cmd_send_sync>
    2268:	4604      	mov	r4, r0
    226a:	e7c4      	b.n	21f6 <bt_id_add+0xba>
		return -ENOBUFS;
    226c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2270:	e7c1      	b.n	21f6 <bt_id_add+0xba>
    2272:	bf00      	nop
    2274:	2000cba0 	.word	0x2000cba0
    2278:	2000cc10 	.word	0x2000cc10

0000227c <bt_id_del>:
{
    227c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    2280:	4d42      	ldr	r5, [pc, #264]	; (238c <bt_id_del+0x110>)
    2282:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
{
    2286:	4606      	mov	r6, r0
    2288:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size ||
    228a:	b123      	cbz	r3, 2296 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    228c:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    2290:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
    2292:	429a      	cmp	r2, r3
    2294:	dd08      	ble.n	22a8 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    2296:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    229a:	3b01      	subs	r3, #1
    229c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		return 0;
    22a0:	2500      	movs	r5, #0
}
    22a2:	4628      	mov	r0, r5
    22a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    22a8:	2102      	movs	r1, #2
    22aa:	2000      	movs	r0, #0
    22ac:	f001 ff04 	bl	40b8 <bt_conn_lookup_state_le>
	if (conn) {
    22b0:	4680      	mov	r8, r0
    22b2:	b178      	cbz	r0, 22d4 <bt_id_del+0x58>
    22b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    22b8:	f105 0070 	add.w	r0, r5, #112	; 0x70
    22bc:	f7ff fcdd 	bl	1c7a <atomic_or>
    22c0:	2108      	movs	r1, #8
    22c2:	1870      	adds	r0, r6, r1
    22c4:	f7ff fcd9 	bl	1c7a <atomic_or>
		bt_conn_unref(conn);
    22c8:	4640      	mov	r0, r8
    22ca:	f001 ff1e 	bl	410a <bt_conn_unref>
		return -EAGAIN;
    22ce:	f06f 050a 	mvn.w	r5, #10
    22d2:	e7e6      	b.n	22a2 <bt_id_del+0x26>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    22d4:	2105      	movs	r1, #5
    22d6:	f105 0070 	add.w	r0, r5, #112	; 0x70
    22da:	f7ff fcdf 	bl	1c9c <atomic_test_bit>
	if (adv_enabled) {
    22de:	4607      	mov	r7, r0
    22e0:	b110      	cbz	r0, 22e8 <bt_id_del+0x6c>
		set_advertise_enable(false);
    22e2:	4640      	mov	r0, r8
    22e4:	f7ff fe94 	bl	2010 <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    22e8:	2107      	movs	r1, #7
    22ea:	4829      	ldr	r0, [pc, #164]	; (2390 <bt_id_del+0x114>)
    22ec:	f7ff fcd6 	bl	1c9c <atomic_test_bit>
	if (scan_enabled) {
    22f0:	4680      	mov	r8, r0
    22f2:	b110      	cbz	r0, 22fa <bt_id_del+0x7e>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    22f4:	2000      	movs	r0, #0
    22f6:	f7ff fe57 	bl	1fa8 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    22fa:	2000      	movs	r0, #0
    22fc:	f7ff fe3c 	bl	1f78 <addr_res_enable>
	if (err) {
    2300:	4605      	mov	r5, r0
    2302:	b980      	cbnz	r0, 2326 <bt_id_del+0xaa>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    2304:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    2308:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
    230c:	429a      	cmp	r2, r3
    230e:	d21c      	bcs.n	234a <bt_id_del+0xce>
		bt_dev.le.rl_entries--;
    2310:	3b01      	subs	r3, #1
    2312:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    2316:	89b3      	ldrh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    2318:	491e      	ldr	r1, [pc, #120]	; (2394 <bt_id_del+0x118>)
		keys->keys &= ~BT_KEYS_IRK;
    231a:	f023 0302 	bic.w	r3, r3, #2
    231e:	81b3      	strh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    2320:	2002      	movs	r0, #2
    2322:	f005 f99b 	bl	765c <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    2326:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    232a:	b113      	cbz	r3, 2332 <bt_id_del+0xb6>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    232c:	2001      	movs	r0, #1
    232e:	f7ff fe23 	bl	1f78 <addr_res_enable>
	if (scan_enabled) {
    2332:	f1b8 0f00 	cmp.w	r8, #0
    2336:	d002      	beq.n	233e <bt_id_del+0xc2>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2338:	2001      	movs	r0, #1
    233a:	f7ff fe35 	bl	1fa8 <set_le_scan_enable>
	if (adv_enabled) {
    233e:	2f00      	cmp	r7, #0
    2340:	d0af      	beq.n	22a2 <bt_id_del+0x26>
		set_advertise_enable(true);
    2342:	2001      	movs	r0, #1
    2344:	f7ff fe64 	bl	2010 <set_advertise_enable>
    2348:	e7ab      	b.n	22a2 <bt_id_del+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    234a:	2107      	movs	r1, #7
    234c:	f242 0028 	movw	r0, #8232	; 0x2028
    2350:	f7ff fd38 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    2354:	4681      	mov	r9, r0
    2356:	b1a8      	cbz	r0, 2384 <bt_id_del+0x108>
	cp = net_buf_add(buf, sizeof(*cp));
    2358:	2107      	movs	r1, #7
    235a:	3008      	adds	r0, #8
    235c:	f010 ffbc 	bl	132d8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    2360:	4631      	mov	r1, r6
    2362:	f7ff fc87 	bl	1c74 <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    2366:	462a      	mov	r2, r5
    2368:	4649      	mov	r1, r9
    236a:	f242 0028 	movw	r0, #8232	; 0x2028
    236e:	f7ff fd59 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2372:	4605      	mov	r5, r0
    2374:	2800      	cmp	r0, #0
    2376:	d1d6      	bne.n	2326 <bt_id_del+0xaa>
	bt_dev.le.rl_entries--;
    2378:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    237c:	3b01      	subs	r3, #1
    237e:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    2382:	e7d0      	b.n	2326 <bt_id_del+0xaa>
		err = -ENOBUFS;
    2384:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2388:	e7cd      	b.n	2326 <bt_id_del+0xaa>
    238a:	bf00      	nop
    238c:	2000cba0 	.word	0x2000cba0
    2390:	2000cc10 	.word	0x2000cc10
    2394:	00001f71 	.word	0x00001f71

00002398 <update_pending_id>:
{
    2398:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    239a:	f100 0508 	add.w	r5, r0, #8
{
    239e:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    23a0:	2102      	movs	r1, #2
    23a2:	4628      	mov	r0, r5
    23a4:	f7ff fc98 	bl	1cd8 <atomic_test_and_clear_bit>
    23a8:	b120      	cbz	r0, 23b4 <update_pending_id+0x1c>
		bt_id_add(keys);
    23aa:	4620      	mov	r0, r4
}
    23ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_add(keys);
    23b0:	f7ff bec4 	b.w	213c <bt_id_add>
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_DEL)) {
    23b4:	2103      	movs	r1, #3
    23b6:	4628      	mov	r0, r5
    23b8:	f7ff fc8e 	bl	1cd8 <atomic_test_and_clear_bit>
    23bc:	b120      	cbz	r0, 23c8 <update_pending_id+0x30>
		bt_id_del(keys);
    23be:	4620      	mov	r0, r4
}
    23c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_del(keys);
    23c4:	f7ff bf5a 	b.w	227c <bt_id_del>
    23c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000023cc <bt_le_scan_update>:
{
    23cc:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    23ce:	2108      	movs	r1, #8
    23d0:	4808      	ldr	r0, [pc, #32]	; (23f4 <bt_le_scan_update+0x28>)
    23d2:	f7ff fc63 	bl	1c9c <atomic_test_bit>
    23d6:	4602      	mov	r2, r0
    23d8:	b948      	cbnz	r0, 23ee <bt_le_scan_update+0x22>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    23da:	2107      	movs	r1, #7
    23dc:	4805      	ldr	r0, [pc, #20]	; (23f4 <bt_le_scan_update+0x28>)
    23de:	f7ff fc5d 	bl	1c9c <atomic_test_bit>
    23e2:	b120      	cbz	r0, 23ee <bt_le_scan_update+0x22>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    23e4:	4610      	mov	r0, r2
}
    23e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    23ea:	f7ff bddd 	b.w	1fa8 <set_le_scan_enable>
}
    23ee:	2000      	movs	r0, #0
    23f0:	bd08      	pop	{r3, pc}
    23f2:	bf00      	nop
    23f4:	2000cc10 	.word	0x2000cc10

000023f8 <check_pending_conn.part.29>:
static void check_pending_conn(const bt_addr_le_t *id_addr,
    23f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23fc:	460d      	mov	r5, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    23fe:	2101      	movs	r1, #1
    2400:	f001 fe5a 	bl	40b8 <bt_conn_lookup_state_le>
	if (!conn) {
    2404:	4604      	mov	r4, r0
    2406:	2800      	cmp	r0, #0
    2408:	d068      	beq.n	24dc <check_pending_conn.part.29+0xe4>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    240a:	2107      	movs	r1, #7
    240c:	4834      	ldr	r0, [pc, #208]	; (24e0 <check_pending_conn.part.29+0xe8>)
    240e:	f7ff fc45 	bl	1c9c <atomic_test_bit>
    2412:	2800      	cmp	r0, #0
    2414:	d14f      	bne.n	24b6 <check_pending_conn.part.29+0xbe>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    2416:	2102      	movs	r1, #2
    2418:	4831      	ldr	r0, [pc, #196]	; (24e0 <check_pending_conn.part.29+0xe8>)
    241a:	f7ff fc3f 	bl	1c9c <atomic_test_bit>
    241e:	b110      	cbz	r0, 2426 <check_pending_conn.part.29+0x2e>
			set_random_address(&bt_dev.id_addr.a);
    2420:	4830      	ldr	r0, [pc, #192]	; (24e4 <check_pending_conn.part.29+0xec>)
    2422:	f7ff fd3d 	bl	1ea0 <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2426:	4930      	ldr	r1, [pc, #192]	; (24e8 <check_pending_conn.part.29+0xf0>)
    2428:	f104 004f 	add.w	r0, r4, #79	; 0x4f
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    242c:	f104 0856 	add.w	r8, r4, #86	; 0x56
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    2430:	f7ff fc20 	bl	1c74 <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    2434:	4629      	mov	r1, r5
    2436:	4640      	mov	r0, r8
    2438:	f7ff fc1c 	bl	1c74 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    243c:	2119      	movs	r1, #25
    243e:	f242 000d 	movw	r0, #8205	; 0x200d
    2442:	f7ff fcbf 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    2446:	4606      	mov	r6, r0
    2448:	b3d0      	cbz	r0, 24c0 <check_pending_conn.part.29+0xc8>
	cp = net_buf_add(buf, sizeof(*cp));
    244a:	2119      	movs	r1, #25
    244c:	3008      	adds	r0, #8
    244e:	f010 ff43 	bl	132d8 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    2452:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    2454:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    2456:	2100      	movs	r1, #0
    2458:	f7fe f8ee 	bl	638 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    245c:	2700      	movs	r7, #0
    245e:	2360      	movs	r3, #96	; 0x60
    2460:	702b      	strb	r3, [r5, #0]
	cp->scan_window = cp->scan_interval;
    2462:	70ab      	strb	r3, [r5, #2]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    2464:	4641      	mov	r1, r8
    2466:	1d68      	adds	r0, r5, #5
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    2468:	706f      	strb	r7, [r5, #1]
	cp->scan_window = cp->scan_interval;
    246a:	70ef      	strb	r7, [r5, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    246c:	f7ff fc02 	bl	1c74 <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    2470:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    2474:	732b      	strb	r3, [r5, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    2476:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    247a:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    247e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    2482:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    2486:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    248a:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    248e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    2492:	f8a5 3013 	strh.w	r3, [r5, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    2496:	463a      	mov	r2, r7
    2498:	4631      	mov	r1, r6
    249a:	f242 000d 	movw	r0, #8205	; 0x200d
    249e:	f7ff fcc1 	bl	1e24 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    24a2:	b968      	cbnz	r0, 24c0 <check_pending_conn.part.29+0xc8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    24a4:	4620      	mov	r0, r4
    24a6:	2102      	movs	r1, #2
    24a8:	f001 fd2c 	bl	3f04 <bt_conn_set_state>
	bt_conn_unref(conn);
    24ac:	4620      	mov	r0, r4
}
    24ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_unref(conn);
    24b2:	f001 be2a 	b.w	410a <bt_conn_unref>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    24b6:	2000      	movs	r0, #0
    24b8:	f7ff fd76 	bl	1fa8 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    24bc:	2800      	cmp	r0, #0
    24be:	d0aa      	beq.n	2416 <check_pending_conn.part.29+0x1e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    24c0:	231f      	movs	r3, #31
    24c2:	72e3      	strb	r3, [r4, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    24c4:	4620      	mov	r0, r4
    24c6:	2100      	movs	r1, #0
    24c8:	f001 fd1c 	bl	3f04 <bt_conn_set_state>
	bt_conn_unref(conn);
    24cc:	4620      	mov	r0, r4
    24ce:	f001 fe1c 	bl	410a <bt_conn_unref>
	bt_le_scan_update(false);
    24d2:	2000      	movs	r0, #0
}
    24d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_le_scan_update(false);
    24d8:	f7ff bf78 	b.w	23cc <bt_le_scan_update>
    24dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24e0:	2000cc10 	.word	0x2000cc10
    24e4:	2000cba1 	.word	0x2000cba1
    24e8:	2000cba0 	.word	0x2000cba0

000024ec <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    24ec:	2301      	movs	r3, #1
{
    24ee:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    24f0:	2106      	movs	r1, #6
{
    24f2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    24f4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    24f8:	f006 f968 	bl	87cc <bt_rand>
	if (err) {
    24fc:	b918      	cbnz	r0, 2506 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    24fe:	79a3      	ldrb	r3, [r4, #6]
    2500:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2504:	71a3      	strb	r3, [r4, #6]
}
    2506:	bd10      	pop	{r4, pc}

00002508 <bt_init>:
{
    2508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    250c:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    250e:	aa04      	add	r2, sp, #16
    2510:	2100      	movs	r1, #0
    2512:	f640 4003 	movw	r0, #3075	; 0xc03
    2516:	f7ff fc85 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    251a:	4604      	mov	r4, r0
    251c:	2800      	cmp	r0, #0
    251e:	f040 81cb 	bne.w	28b8 <bt_init+0x3b0>
	u8_t status = buf->data[0];
    2522:	9b04      	ldr	r3, [sp, #16]
    2524:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2526:	781b      	ldrb	r3, [r3, #0]
    2528:	b96b      	cbnz	r3, 2546 <bt_init+0x3e>
	scan_dev_found_cb = NULL;
    252a:	4ac3      	ldr	r2, [pc, #780]	; (2838 <bt_init+0x330>)
    252c:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    252e:	4bc3      	ldr	r3, [pc, #780]	; (283c <bt_init+0x334>)
    2530:	f3bf 8f5b 	dmb	ish
    2534:	2201      	movs	r2, #1
    2536:	e853 1f00 	ldrex	r1, [r3]
    253a:	e843 2000 	strex	r0, r2, [r3]
    253e:	2800      	cmp	r0, #0
    2540:	d1f9      	bne.n	2536 <bt_init+0x2e>
    2542:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    2546:	9804      	ldr	r0, [sp, #16]
    2548:	f010 fe94 	bl	13274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    254c:	aa04      	add	r2, sp, #16
    254e:	2100      	movs	r1, #0
    2550:	f241 0003 	movw	r0, #4099	; 0x1003
    2554:	f7ff fc66 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2558:	4604      	mov	r4, r0
    255a:	2800      	cmp	r0, #0
    255c:	f040 81ac 	bne.w	28b8 <bt_init+0x3b0>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2560:	9b04      	ldr	r3, [sp, #16]
    2562:	4db7      	ldr	r5, [pc, #732]	; (2840 <bt_init+0x338>)
    2564:	6899      	ldr	r1, [r3, #8]
    2566:	2208      	movs	r2, #8
    2568:	3101      	adds	r1, #1
    256a:	f105 0016 	add.w	r0, r5, #22
    256e:	f7fe f837 	bl	5e0 <memcpy>
	net_buf_unref(rsp);
    2572:	9804      	ldr	r0, [sp, #16]
    2574:	f010 fe7e 	bl	13274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2578:	4621      	mov	r1, r4
    257a:	aa04      	add	r2, sp, #16
    257c:	f241 0001 	movw	r0, #4097	; 0x1001
    2580:	f7ff fc50 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2584:	4604      	mov	r4, r0
    2586:	2800      	cmp	r0, #0
    2588:	f040 8196 	bne.w	28b8 <bt_init+0x3b0>
	read_local_ver_complete(rsp);
    258c:	9804      	ldr	r0, [sp, #16]
    258e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2590:	785a      	ldrb	r2, [r3, #1]
    2592:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2594:	78d9      	ldrb	r1, [r3, #3]
    2596:	789a      	ldrb	r2, [r3, #2]
    2598:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    259c:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    259e:	791a      	ldrb	r2, [r3, #4]
    25a0:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    25a2:	7a19      	ldrb	r1, [r3, #8]
    25a4:	79da      	ldrb	r2, [r3, #7]
    25a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    25aa:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    25ac:	795a      	ldrb	r2, [r3, #5]
    25ae:	799b      	ldrb	r3, [r3, #6]
    25b0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    25b4:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    25b6:	f010 fe5d 	bl	13274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    25ba:	4621      	mov	r1, r4
    25bc:	aa04      	add	r2, sp, #16
    25be:	f241 0009 	movw	r0, #4105	; 0x1009
    25c2:	f7ff fc2f 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    25c6:	4604      	mov	r4, r0
    25c8:	2800      	cmp	r0, #0
    25ca:	f040 8175 	bne.w	28b8 <bt_init+0x3b0>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    25ce:	9b04      	ldr	r3, [sp, #16]
    25d0:	6899      	ldr	r1, [r3, #8]
    25d2:	2206      	movs	r2, #6
    25d4:	3101      	adds	r1, #1
    25d6:	1c68      	adds	r0, r5, #1
    25d8:	f7fe f802 	bl	5e0 <memcpy>
	net_buf_unref(rsp);
    25dc:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    25de:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    25e0:	f010 fe48 	bl	13274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    25e4:	4621      	mov	r1, r4
    25e6:	aa04      	add	r2, sp, #16
    25e8:	f241 0002 	movw	r0, #4098	; 0x1002
    25ec:	f7ff fc1a 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    25f0:	4604      	mov	r4, r0
    25f2:	2800      	cmp	r0, #0
    25f4:	f040 8160 	bne.w	28b8 <bt_init+0x3b0>
	memcpy(bt_dev.supported_commands, rp->commands,
    25f8:	9b04      	ldr	r3, [sp, #16]
    25fa:	6899      	ldr	r1, [r3, #8]
    25fc:	2240      	movs	r2, #64	; 0x40
    25fe:	3101      	adds	r1, #1
    2600:	f105 001e 	add.w	r0, r5, #30
    2604:	f7fd ffec 	bl	5e0 <memcpy>
	net_buf_unref(rsp);
    2608:	9804      	ldr	r0, [sp, #16]
    260a:	f010 fe33 	bl	13274 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    260e:	7eab      	ldrb	r3, [r5, #26]
    2610:	065e      	lsls	r6, r3, #25
    2612:	f140 81db 	bpl.w	29cc <bt_init+0x4c4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2616:	4621      	mov	r1, r4
    2618:	aa04      	add	r2, sp, #16
    261a:	f242 0003 	movw	r0, #8195	; 0x2003
    261e:	f7ff fc01 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2622:	4604      	mov	r4, r0
    2624:	2800      	cmp	r0, #0
    2626:	f040 8147 	bne.w	28b8 <bt_init+0x3b0>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    262a:	9b04      	ldr	r3, [sp, #16]
    262c:	6899      	ldr	r1, [r3, #8]
    262e:	2208      	movs	r2, #8
    2630:	3101      	adds	r1, #1
    2632:	f105 0078 	add.w	r0, r5, #120	; 0x78
    2636:	f7fd ffd3 	bl	5e0 <memcpy>
	net_buf_unref(rsp);
    263a:	9804      	ldr	r0, [sp, #16]
    263c:	f010 fe1a 	bl	13274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    2640:	4621      	mov	r1, r4
    2642:	aa04      	add	r2, sp, #16
    2644:	f242 0002 	movw	r0, #8194	; 0x2002
    2648:	f7ff fbec 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    264c:	4604      	mov	r4, r0
    264e:	2800      	cmp	r0, #0
    2650:	f040 8132 	bne.w	28b8 <bt_init+0x3b0>
    2654:	9b04      	ldr	r3, [sp, #16]
    2656:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    2658:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    265c:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    2660:	b142      	cbz	r2, 2674 <bt_init+0x16c>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    2662:	78da      	ldrb	r2, [r3, #3]
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    2664:	2a0a      	cmp	r2, #10
    2666:	bf28      	it	cs
    2668:	220a      	movcs	r2, #10
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    266a:	4611      	mov	r1, r2
    266c:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    2670:	f011 fab0 	bl	13bd4 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2674:	9804      	ldr	r0, [sp, #16]
    2676:	f010 fdfd 	bl	13274 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    267a:	7eac      	ldrb	r4, [r5, #26]
    267c:	f014 0420 	ands.w	r4, r4, #32
    2680:	f000 80ff 	beq.w	2882 <bt_init+0x37a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2684:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2688:	071c      	lsls	r4, r3, #28
    268a:	d514      	bpl.n	26b6 <bt_init+0x1ae>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    268c:	aa04      	add	r2, sp, #16
    268e:	2100      	movs	r1, #0
    2690:	f242 001c 	movw	r0, #8220	; 0x201c
    2694:	f7ff fbc6 	bl	1e24 <bt_hci_cmd_send_sync>
		if (err) {
    2698:	4604      	mov	r4, r0
    269a:	2800      	cmp	r0, #0
    269c:	f040 810c 	bne.w	28b8 <bt_init+0x3b0>
		le_read_supp_states_complete(rsp);
    26a0:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    26a2:	6883      	ldr	r3, [r0, #8]
    26a4:	f853 2f01 	ldr.w	r2, [r3, #1]!
    26a8:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    26aa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    26ae:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    26b2:	f010 fddf 	bl	13274 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    26b6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    26ba:	0698      	lsls	r0, r3, #26
    26bc:	f100 8100 	bmi.w	28c0 <bt_init+0x3b8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    26c0:	2108      	movs	r1, #8
    26c2:	f242 0001 	movw	r0, #8193	; 0x2001
    26c6:	f7ff fb7d 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    26ca:	4604      	mov	r4, r0
    26cc:	2800      	cmp	r0, #0
    26ce:	f000 80df 	beq.w	2890 <bt_init+0x388>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    26d2:	2108      	movs	r1, #8
    26d4:	4408      	add	r0, r1
    26d6:	f010 fdff 	bl	132d8 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    26da:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    26de:	f895 6079 	ldrb.w	r6, [r5, #121]	; 0x79
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    26e2:	0799      	lsls	r1, r3, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    26e4:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    26e6:	bf4c      	ite	mi
    26e8:	202f      	movmi	r0, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    26ea:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    26ec:	069f      	lsls	r7, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    26ee:	bf48      	it	mi
    26f0:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    26f4:	f016 0f09 	tst.w	r6, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    26f8:	bf18      	it	ne
    26fa:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    26fe:	07de      	lsls	r6, r3, #31
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2700:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    2704:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    2708:	bf48      	it	mi
    270a:	f040 0010 	orrmi.w	r0, r0, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    270e:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2710:	bf08      	it	eq
    2712:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    2716:	2100      	movs	r1, #0
	sys_put_le64(mask, cp_mask->events);
    2718:	f7ff fb42 	bl	1da0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    271c:	4621      	mov	r1, r4
    271e:	2200      	movs	r2, #0
    2720:	f242 0001 	movw	r0, #8193	; 0x2001
    2724:	f7ff fb7e 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2728:	4604      	mov	r4, r0
    272a:	2800      	cmp	r0, #0
    272c:	f040 80c4 	bne.w	28b8 <bt_init+0x3b0>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2730:	7eab      	ldrb	r3, [r5, #26]
    2732:	0698      	lsls	r0, r3, #26
    2734:	d421      	bmi.n	277a <bt_init+0x272>
	if (bt_dev.le.mtu) {
    2736:	f8b5 1088 	ldrh.w	r1, [r5, #136]	; 0x88
    273a:	b9f1      	cbnz	r1, 277a <bt_init+0x272>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    273c:	aa04      	add	r2, sp, #16
    273e:	f241 0005 	movw	r0, #4101	; 0x1005
    2742:	f7ff fb6f 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2746:	4604      	mov	r4, r0
    2748:	2800      	cmp	r0, #0
    274a:	f040 80b5 	bne.w	28b8 <bt_init+0x3b0>
	if (bt_dev.le.mtu) {
    274e:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    2752:	b97b      	cbnz	r3, 2774 <bt_init+0x26c>
    2754:	9b04      	ldr	r3, [sp, #16]
    2756:	483b      	ldr	r0, [pc, #236]	; (2844 <bt_init+0x33c>)
    2758:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    275a:	7899      	ldrb	r1, [r3, #2]
    275c:	785a      	ldrb	r2, [r3, #1]
    275e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2762:	f8a5 2088 	strh.w	r2, [r5, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    2766:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    2768:	2a0a      	cmp	r2, #10
    276a:	bf28      	it	cs
    276c:	220a      	movcs	r2, #10
    276e:	4611      	mov	r1, r2
    2770:	f011 fa30 	bl	13bd4 <_impl_k_sem_init>
	net_buf_unref(rsp);
    2774:	9804      	ldr	r0, [sp, #16]
    2776:	f010 fd7d 	bl	13274 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    277a:	2108      	movs	r1, #8
    277c:	f640 4001 	movw	r0, #3073	; 0xc01
    2780:	f7ff fb20 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    2784:	4604      	mov	r4, r0
    2786:	2800      	cmp	r0, #0
    2788:	f000 8082 	beq.w	2890 <bt_init+0x388>
	ev = net_buf_add(buf, sizeof(*ev));
    278c:	2108      	movs	r1, #8
    278e:	4408      	add	r0, r1
    2790:	f010 fda2 	bl	132d8 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    2794:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2798:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    279a:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    279c:	f140 80bb 	bpl.w	2916 <bt_init+0x40e>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    27a0:	a123      	add	r1, pc, #140	; (adr r1, 2830 <bt_init+0x328>)
    27a2:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    27a6:	f7ff fafb 	bl	1da0 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    27aa:	4621      	mov	r1, r4
    27ac:	2200      	movs	r2, #0
    27ae:	f640 4001 	movw	r0, #3073	; 0xc01
    27b2:	f7ff fb37 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    27b6:	4604      	mov	r4, r0
    27b8:	2800      	cmp	r0, #0
    27ba:	d17d      	bne.n	28b8 <bt_init+0x3b0>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    27bc:	4601      	mov	r1, r0
    27be:	aa04      	add	r2, sp, #16
    27c0:	f64f 4001 	movw	r0, #64513	; 0xfc01
    27c4:	f7ff fb2e 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    27c8:	4604      	mov	r4, r0
    27ca:	bb28      	cbnz	r0, 2818 <bt_init+0x310>
	net_buf_unref(rsp);
    27cc:	9804      	ldr	r0, [sp, #16]
    27ce:	f010 fd51 	bl	13274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    27d2:	4621      	mov	r1, r4
    27d4:	aa04      	add	r2, sp, #16
    27d6:	f64f 4002 	movw	r0, #64514	; 0xfc02
    27da:	f7ff fb23 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    27de:	4604      	mov	r4, r0
    27e0:	b9d0      	cbnz	r0, 2818 <bt_init+0x310>
	rp.cmds = (void *)rsp->data;
    27e2:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    27e4:	4818      	ldr	r0, [pc, #96]	; (2848 <bt_init+0x340>)
    27e6:	6899      	ldr	r1, [r3, #8]
    27e8:	2202      	movs	r2, #2
    27ea:	3101      	adds	r1, #1
    27ec:	f7fd fef8 	bl	5e0 <memcpy>
	net_buf_unref(rsp);
    27f0:	9804      	ldr	r0, [sp, #16]
    27f2:	f010 fd3f 	bl	13274 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    27f6:	aa04      	add	r2, sp, #16
    27f8:	4621      	mov	r1, r4
    27fa:	f64f 4003 	movw	r0, #64515	; 0xfc03
    27fe:	f7ff fb11 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2802:	b948      	cbnz	r0, 2818 <bt_init+0x310>
	rp.feat = (void *)rsp->data;
    2804:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2806:	4811      	ldr	r0, [pc, #68]	; (284c <bt_init+0x344>)
    2808:	6899      	ldr	r1, [r3, #8]
    280a:	2201      	movs	r2, #1
    280c:	4411      	add	r1, r2
    280e:	f7fd fee7 	bl	5e0 <memcpy>
	net_buf_unref(rsp);
    2812:	9804      	ldr	r0, [sp, #16]
    2814:	f010 fd2e 	bl	13274 <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2818:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    281a:	2207      	movs	r2, #7
    281c:	a904      	add	r1, sp, #16
    281e:	4808      	ldr	r0, [pc, #32]	; (2840 <bt_init+0x338>)
    2820:	9304      	str	r3, [sp, #16]
    2822:	f8cd 3013 	str.w	r3, [sp, #19]
    2826:	f7fd fec6 	bl	5b6 <memcmp>
    282a:	e011      	b.n	2850 <bt_init+0x348>
    282c:	f3af 8000 	nop.w
    2830:	02008890 	.word	0x02008890
    2834:	20008000 	.word	0x20008000
    2838:	20000178 	.word	0x20000178
    283c:	2000cc10 	.word	0x2000cc10
    2840:	2000cba0 	.word	0x2000cba0
    2844:	2000cc2c 	.word	0x2000cc2c
    2848:	2000cbff 	.word	0x2000cbff
    284c:	2000cbfe 	.word	0x2000cbfe
    2850:	2800      	cmp	r0, #0
    2852:	d164      	bne.n	291e <bt_init+0x416>
	if (bt_storage) {
    2854:	4e5f      	ldr	r6, [pc, #380]	; (29d4 <bt_init+0x4cc>)
    2856:	6833      	ldr	r3, [r6, #0]
    2858:	2b00      	cmp	r3, #0
    285a:	d17d      	bne.n	2958 <bt_init+0x450>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    285c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2860:	07db      	lsls	r3, r3, #31
    2862:	f100 8095 	bmi.w	2990 <bt_init+0x488>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2866:	485c      	ldr	r0, [pc, #368]	; (29d8 <bt_init+0x4d0>)
    2868:	f7ff fe40 	bl	24ec <bt_addr_le_create_static>
	if (err) {
    286c:	4604      	mov	r4, r0
    286e:	bb18      	cbnz	r0, 28b8 <bt_init+0x3b0>
	if (bt_storage) {
    2870:	6833      	ldr	r3, [r6, #0]
    2872:	2b00      	cmp	r3, #0
    2874:	d079      	beq.n	296a <bt_init+0x462>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2876:	685e      	ldr	r6, [r3, #4]
    2878:	4a57      	ldr	r2, [pc, #348]	; (29d8 <bt_init+0x4d0>)
    287a:	2307      	movs	r3, #7
    287c:	4601      	mov	r1, r0
    287e:	47b0      	blx	r6
    2880:	e073      	b.n	296a <bt_init+0x462>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2882:	2102      	movs	r1, #2
    2884:	f640 406d 	movw	r0, #3181	; 0xc6d
    2888:	f7ff fa9c 	bl	1dc4 <bt_hci_cmd_create>
		if (!buf) {
    288c:	4606      	mov	r6, r0
    288e:	b910      	cbnz	r0, 2896 <bt_init+0x38e>
		return -ENOBUFS;
    2890:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2894:	e010      	b.n	28b8 <bt_init+0x3b0>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2896:	2102      	movs	r1, #2
    2898:	3008      	adds	r0, #8
    289a:	f010 fd1d 	bl	132d8 <net_buf_simple_add>
		cp_le->le = 0x01;
    289e:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    28a0:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    28a2:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    28a4:	4622      	mov	r2, r4
    28a6:	4631      	mov	r1, r6
    28a8:	f640 406d 	movw	r0, #3181	; 0xc6d
    28ac:	f7ff faba 	bl	1e24 <bt_hci_cmd_send_sync>
		if (err) {
    28b0:	4604      	mov	r4, r0
    28b2:	2800      	cmp	r0, #0
    28b4:	f43f aee6 	beq.w	2684 <bt_init+0x17c>
}
    28b8:	4620      	mov	r0, r4
    28ba:	b006      	add	sp, #24
    28bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    28c0:	aa04      	add	r2, sp, #16
    28c2:	2100      	movs	r1, #0
    28c4:	f242 002f 	movw	r0, #8239	; 0x202f
    28c8:	f7ff faac 	bl	1e24 <bt_hci_cmd_send_sync>
		if (err) {
    28cc:	4604      	mov	r4, r0
    28ce:	2800      	cmp	r0, #0
    28d0:	d1f2      	bne.n	28b8 <bt_init+0x3b0>
		rp = (void *)rsp->data;
    28d2:	9804      	ldr	r0, [sp, #16]
    28d4:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    28d6:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    28da:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    28de:	f010 fcc9 	bl	13274 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    28e2:	2104      	movs	r1, #4
    28e4:	f242 0024 	movw	r0, #8228	; 0x2024
    28e8:	f7ff fa6c 	bl	1dc4 <bt_hci_cmd_create>
		if (!buf) {
    28ec:	4606      	mov	r6, r0
    28ee:	2800      	cmp	r0, #0
    28f0:	d0ce      	beq.n	2890 <bt_init+0x388>
		cp = net_buf_add(buf, sizeof(*cp));
    28f2:	2104      	movs	r1, #4
    28f4:	3008      	adds	r0, #8
    28f6:	f010 fcef 	bl	132d8 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    28fa:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    28fc:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    2900:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    2902:	4631      	mov	r1, r6
    2904:	f242 0024 	movw	r0, #8228	; 0x2024
    2908:	f7ff fa8c 	bl	1e24 <bt_hci_cmd_send_sync>
		if (err) {
    290c:	4604      	mov	r4, r0
    290e:	2800      	cmp	r0, #0
    2910:	f43f aed6 	beq.w	26c0 <bt_init+0x1b8>
    2914:	e7d0      	b.n	28b8 <bt_init+0x3b0>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    2916:	4831      	ldr	r0, [pc, #196]	; (29dc <bt_init+0x4d4>)
    2918:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    291c:	e743      	b.n	27a6 <bt_init+0x29e>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    291e:	4b30      	ldr	r3, [pc, #192]	; (29e0 <bt_init+0x4d8>)
    2920:	6818      	ldr	r0, [r3, #0]
    2922:	889a      	ldrh	r2, [r3, #4]
    2924:	9002      	str	r0, [sp, #8]
    2926:	799b      	ldrb	r3, [r3, #6]
    2928:	f8ad 200c 	strh.w	r2, [sp, #12]
    292c:	a902      	add	r1, sp, #8
    292e:	2207      	movs	r2, #7
    2930:	4829      	ldr	r0, [pc, #164]	; (29d8 <bt_init+0x4d0>)
    2932:	f88d 300e 	strb.w	r3, [sp, #14]
    2936:	f7fd fe3e 	bl	5b6 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    293a:	2800      	cmp	r0, #0
    293c:	d08a      	beq.n	2854 <bt_init+0x34c>
		err = bt_conn_init();
    293e:	f001 fd5d 	bl	43fc <bt_conn_init>
		if (err) {
    2942:	4604      	mov	r4, r0
    2944:	2800      	cmp	r0, #0
    2946:	d1b7      	bne.n	28b8 <bt_init+0x3b0>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2948:	2102      	movs	r1, #2
    294a:	4826      	ldr	r0, [pc, #152]	; (29e4 <bt_init+0x4dc>)
    294c:	f7ff f995 	bl	1c7a <atomic_or>
	bt_le_scan_update(false);
    2950:	4620      	mov	r0, r4
    2952:	f7ff fd3b 	bl	23cc <bt_le_scan_update>
    2956:	e7af      	b.n	28b8 <bt_init+0x3b0>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2958:	2100      	movs	r1, #0
    295a:	681c      	ldr	r4, [r3, #0]
    295c:	4a1e      	ldr	r2, [pc, #120]	; (29d8 <bt_init+0x4d0>)
    295e:	2307      	movs	r3, #7
    2960:	4608      	mov	r0, r1
    2962:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    2964:	2807      	cmp	r0, #7
    2966:	f47f af79 	bne.w	285c <bt_init+0x354>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    296a:	782b      	ldrb	r3, [r5, #0]
    296c:	2b01      	cmp	r3, #1
    296e:	d12a      	bne.n	29c6 <bt_init+0x4be>
    2970:	79ab      	ldrb	r3, [r5, #6]
    2972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2976:	2bc0      	cmp	r3, #192	; 0xc0
    2978:	d125      	bne.n	29c6 <bt_init+0x4be>
	err = set_random_address(&bt_dev.id_addr.a);
    297a:	481b      	ldr	r0, [pc, #108]	; (29e8 <bt_init+0x4e0>)
    297c:	f7ff fa90 	bl	1ea0 <set_random_address>
	if (err) {
    2980:	4604      	mov	r4, r0
    2982:	2800      	cmp	r0, #0
    2984:	d198      	bne.n	28b8 <bt_init+0x3b0>
    2986:	2104      	movs	r1, #4
    2988:	4816      	ldr	r0, [pc, #88]	; (29e4 <bt_init+0x4dc>)
    298a:	f7ff f976 	bl	1c7a <atomic_or>
    298e:	e7d6      	b.n	293e <bt_init+0x436>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2990:	aa01      	add	r2, sp, #4
    2992:	2100      	movs	r1, #0
    2994:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2998:	f7ff fa44 	bl	1e24 <bt_hci_cmd_send_sync>
		if (err) {
    299c:	2800      	cmp	r0, #0
    299e:	f47f af62 	bne.w	2866 <bt_init+0x35e>
		rp = (void *)rsp->data;
    29a2:	9801      	ldr	r0, [sp, #4]
    29a4:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    29a6:	784b      	ldrb	r3, [r1, #1]
    29a8:	b153      	cbz	r3, 29c0 <bt_init+0x4b8>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    29aa:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    29ac:	2206      	movs	r2, #6
    29ae:	3102      	adds	r1, #2
    29b0:	480d      	ldr	r0, [pc, #52]	; (29e8 <bt_init+0x4e0>)
    29b2:	702b      	strb	r3, [r5, #0]
    29b4:	f7fd fe14 	bl	5e0 <memcpy>
			net_buf_unref(rsp);
    29b8:	9801      	ldr	r0, [sp, #4]
    29ba:	f010 fc5b 	bl	13274 <net_buf_unref>
    29be:	e7d4      	b.n	296a <bt_init+0x462>
		net_buf_unref(rsp);
    29c0:	f010 fc58 	bl	13274 <net_buf_unref>
    29c4:	e74f      	b.n	2866 <bt_init+0x35e>
		return -EINVAL;
    29c6:	f06f 0415 	mvn.w	r4, #21
    29ca:	e775      	b.n	28b8 <bt_init+0x3b0>
		return -ENODEV;
    29cc:	f06f 0412 	mvn.w	r4, #18
    29d0:	e772      	b.n	28b8 <bt_init+0x3b0>
    29d2:	bf00      	nop
    29d4:	20003048 	.word	0x20003048
    29d8:	2000cba0 	.word	0x2000cba0
    29dc:	02008810 	.word	0x02008810
    29e0:	000148dc 	.word	0x000148dc
    29e4:	2000cc10 	.word	0x2000cc10
    29e8:	2000cba1 	.word	0x2000cba1

000029ec <init_work>:
{
    29ec:	b510      	push	{r4, lr}
	err = bt_init();
    29ee:	f7ff fd8b 	bl	2508 <bt_init>
	if (ready_cb) {
    29f2:	4b03      	ldr	r3, [pc, #12]	; (2a00 <init_work+0x14>)
    29f4:	681b      	ldr	r3, [r3, #0]
    29f6:	b113      	cbz	r3, 29fe <init_work+0x12>
}
    29f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    29fc:	4718      	bx	r3
    29fe:	bd10      	pop	{r4, pc}
    2a00:	20000174 	.word	0x20000174

00002a04 <bt_send>:
	return bt_dev.drv->send(buf);
    2a04:	4b02      	ldr	r3, [pc, #8]	; (2a10 <bt_send+0xc>)
    2a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    2a0a:	68db      	ldr	r3, [r3, #12]
    2a0c:	4718      	bx	r3
    2a0e:	bf00      	nop
    2a10:	2000cba0 	.word	0x2000cba0

00002a14 <bt_hci_cmd_send>:
{
    2a14:	b538      	push	{r3, r4, r5, lr}
    2a16:	4605      	mov	r5, r0
	if (!buf) {
    2a18:	460c      	mov	r4, r1
    2a1a:	b919      	cbnz	r1, 2a24 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    2a1c:	f7ff f9d2 	bl	1dc4 <bt_hci_cmd_create>
		if (!buf) {
    2a20:	4604      	mov	r4, r0
    2a22:	b198      	cbz	r0, 2a4c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2a24:	f640 4335 	movw	r3, #3125	; 0xc35
    2a28:	429d      	cmp	r5, r3
    2a2a:	d109      	bne.n	2a40 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    2a2c:	4620      	mov	r0, r4
    2a2e:	f7ff ffe9 	bl	2a04 <bt_send>
		if (err) {
    2a32:	4605      	mov	r5, r0
    2a34:	b110      	cbz	r0, 2a3c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    2a36:	4620      	mov	r0, r4
    2a38:	f010 fc1c 	bl	13274 <net_buf_unref>
}
    2a3c:	4628      	mov	r0, r5
    2a3e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2a40:	4621      	mov	r1, r4
    2a42:	4804      	ldr	r0, [pc, #16]	; (2a54 <bt_hci_cmd_send+0x40>)
    2a44:	f010 fc09 	bl	1325a <net_buf_put>
	return 0;
    2a48:	2500      	movs	r5, #0
    2a4a:	e7f7      	b.n	2a3c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    2a4c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2a50:	e7f4      	b.n	2a3c <bt_hci_cmd_send+0x28>
    2a52:	bf00      	nop
    2a54:	2000cc74 	.word	0x2000cc74

00002a58 <hci_le_set_phy.isra.32>:
static int hci_le_set_phy(struct bt_conn *conn)
    2a58:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2a5a:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    2a5c:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    2a5e:	f242 0032 	movw	r0, #8242	; 0x2032
    2a62:	f7ff f9af 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    2a66:	4605      	mov	r5, r0
    2a68:	b198      	cbz	r0, 2a92 <hci_le_set_phy.isra.32+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    2a6a:	2107      	movs	r1, #7
    2a6c:	3008      	adds	r0, #8
    2a6e:	f010 fc33 	bl	132d8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2a72:	8823      	ldrh	r3, [r4, #0]
    2a74:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    2a76:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2a78:	2302      	movs	r3, #2
	cp->all_phys = 0;
    2a7a:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2a7c:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    2a7e:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    2a80:	7144      	strb	r4, [r0, #5]
    2a82:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    2a84:	4629      	mov	r1, r5
    2a86:	f242 0032 	movw	r0, #8242	; 0x2032
    2a8a:	f7ff ffc3 	bl	2a14 <bt_hci_cmd_send>
	return 0;
    2a8e:	4620      	mov	r0, r4
    2a90:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    2a92:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2a96:	bd38      	pop	{r3, r4, r5, pc}

00002a98 <hci_le_set_data_len.isra.33>:
static int hci_le_set_data_len(struct bt_conn *conn)
    2a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a9a:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    2a9c:	aa01      	add	r2, sp, #4
    2a9e:	2100      	movs	r1, #0
    2aa0:	f242 002f 	movw	r0, #8239	; 0x202f
    2aa4:	f7ff f9be 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    2aa8:	b9d8      	cbnz	r0, 2ae2 <hci_le_set_data_len.isra.33+0x4a>
	rp = (void *)rsp->data;
    2aaa:	9801      	ldr	r0, [sp, #4]
    2aac:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    2aae:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    2ab2:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    2ab6:	f010 fbdd 	bl	13274 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    2aba:	2106      	movs	r1, #6
    2abc:	f242 0022 	movw	r0, #8226	; 0x2022
    2ac0:	f7ff f980 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    2ac4:	4604      	mov	r4, r0
    2ac6:	b170      	cbz	r0, 2ae6 <hci_le_set_data_len.isra.33+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    2ac8:	2106      	movs	r1, #6
    2aca:	3008      	adds	r0, #8
    2acc:	f010 fc04 	bl	132d8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2ad0:	883b      	ldrh	r3, [r7, #0]
    2ad2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    2ad4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    2ad6:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    2ad8:	4621      	mov	r1, r4
    2ada:	f242 0022 	movw	r0, #8226	; 0x2022
    2ade:	f7ff ff99 	bl	2a14 <bt_hci_cmd_send>
}
    2ae2:	b003      	add	sp, #12
    2ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    2ae6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2aea:	e7fa      	b.n	2ae2 <hci_le_set_data_len.isra.33+0x4a>

00002aec <le_enh_conn_complete>:
{
    2aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    2aee:	210c      	movs	r1, #12
{
    2af0:	b085      	sub	sp, #20
    2af2:	4605      	mov	r5, r0
	u16_t handle = sys_le16_to_cpu(evt->handle);
    2af4:	f8b0 6001 	ldrh.w	r6, [r0, #1]
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    2af8:	4862      	ldr	r0, [pc, #392]	; (2c84 <le_enh_conn_complete+0x198>)
    2afa:	f7ff f8ed 	bl	1cd8 <atomic_test_and_clear_bit>
    2afe:	b118      	cbz	r0, 2b08 <le_enh_conn_complete+0x1c>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id);
    2b00:	4961      	ldr	r1, [pc, #388]	; (2c88 <le_enh_conn_complete+0x19c>)
    2b02:	2002      	movs	r0, #2
    2b04:	f004 fdaa 	bl	765c <bt_keys_foreach>
	if (evt->status) {
    2b08:	782b      	ldrb	r3, [r5, #0]
    2b0a:	b17b      	cbz	r3, 2b2c <le_enh_conn_complete+0x40>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2b0c:	2102      	movs	r1, #2
    2b0e:	2000      	movs	r0, #0
    2b10:	f001 fad2 	bl	40b8 <bt_conn_lookup_state_le>
		if (!conn) {
    2b14:	4604      	mov	r4, r0
    2b16:	b138      	cbz	r0, 2b28 <le_enh_conn_complete+0x3c>
		conn->err = evt->status;
    2b18:	782b      	ldrb	r3, [r5, #0]
    2b1a:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    2b1c:	2100      	movs	r1, #0
    2b1e:	f001 f9f1 	bl	3f04 <bt_conn_set_state>
		bt_conn_unref(conn);
    2b22:	4620      	mov	r0, r4
    2b24:	f001 faf1 	bl	410a <bt_conn_unref>
}
    2b28:	b005      	add	sp, #20
    2b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    2b2c:	1d2c      	adds	r4, r5, #4
    2b2e:	4621      	mov	r1, r4
    2b30:	a802      	add	r0, sp, #8
    2b32:	f7ff f89f 	bl	1c74 <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2b36:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2b3a:	3b02      	subs	r3, #2
    2b3c:	b2db      	uxtb	r3, r3
    2b3e:	2b01      	cmp	r3, #1
    2b40:	d87d      	bhi.n	2c3e <le_enh_conn_complete+0x152>
    2b42:	2206      	movs	r2, #6
    2b44:	f105 0111 	add.w	r1, r5, #17
    2b48:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2b4c:	f88d 3008 	strb.w	r3, [sp, #8]
    2b50:	f7fd fd46 	bl	5e0 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    2b54:	2301      	movs	r3, #1
    2b56:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2b5a:	2102      	movs	r1, #2
    2b5c:	a802      	add	r0, sp, #8
    2b5e:	f001 faab 	bl	40b8 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2b62:	78eb      	ldrb	r3, [r5, #3]
    2b64:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    2b66:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    2b68:	d109      	bne.n	2b7e <le_enh_conn_complete+0x92>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2b6a:	f06f 0120 	mvn.w	r1, #32
    2b6e:	4845      	ldr	r0, [pc, #276]	; (2c84 <le_enh_conn_complete+0x198>)
    2b70:	f7ff f8a1 	bl	1cb6 <atomic_and>
		if (!conn) {
    2b74:	b92c      	cbnz	r4, 2b82 <le_enh_conn_complete+0x96>
			conn = bt_conn_add_le(&id_addr);
    2b76:	a802      	add	r0, sp, #8
    2b78:	f001 f98a 	bl	3e90 <bt_conn_add_le>
    2b7c:	4604      	mov	r4, r0
	if (!conn) {
    2b7e:	2c00      	cmp	r4, #0
    2b80:	d0d2      	beq.n	2b28 <le_enh_conn_complete+0x3c>
	conn->handle   = handle;
    2b82:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2b84:	a902      	add	r1, sp, #8
	conn->handle   = handle;
    2b86:	f820 6b48 	strh.w	r6, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    2b8a:	f7ff f873 	bl	1c74 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    2b8e:	7e2a      	ldrb	r2, [r5, #24]
    2b90:	7deb      	ldrb	r3, [r5, #23]
    2b92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2b96:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    2b9a:	7eaa      	ldrb	r2, [r5, #26]
    2b9c:	7e6b      	ldrb	r3, [r5, #25]
    2b9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2ba2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2ba6:	7eeb      	ldrb	r3, [r5, #27]
    2ba8:	7f2a      	ldrb	r2, [r5, #28]
    2baa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2bae:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    2bb2:	78ee      	ldrb	r6, [r5, #3]
    2bb4:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    2bb6:	2e01      	cmp	r6, #1
    2bb8:	d11a      	bne.n	2bf0 <le_enh_conn_complete+0x104>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2bba:	4f34      	ldr	r7, [pc, #208]	; (2c8c <le_enh_conn_complete+0x1a0>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    2bbc:	4669      	mov	r1, sp
    2bbe:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    2bc2:	f7ff f857 	bl	1c74 <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    2bc6:	4639      	mov	r1, r7
    2bc8:	f104 0056 	add.w	r0, r4, #86	; 0x56
    2bcc:	f7ff f852 	bl	1c74 <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2bd0:	2106      	movs	r1, #6
    2bd2:	f107 0070 	add.w	r0, r7, #112	; 0x70
    2bd6:	f7ff f861 	bl	1c9c <atomic_test_bit>
    2bda:	b148      	cbz	r0, 2bf0 <le_enh_conn_complete+0x104>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    2bdc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    2be0:	2200      	movs	r2, #0
    2be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2be6:	4313      	orrs	r3, r2
    2be8:	d002      	beq.n	2bf0 <le_enh_conn_complete+0x104>
			set_advertise_enable(true);
    2bea:	4630      	mov	r0, r6
    2bec:	f7ff fa10 	bl	2010 <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    2bf0:	2103      	movs	r1, #3
    2bf2:	4620      	mov	r0, r4
    2bf4:	f001 f986 	bl	3f04 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    2bf8:	7b23      	ldrb	r3, [r4, #12]
    2bfa:	2b03      	cmp	r3, #3
    2bfc:	d118      	bne.n	2c30 <le_enh_conn_complete+0x144>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2bfe:	78eb      	ldrb	r3, [r5, #3]
    2c00:	b123      	cbz	r3, 2c0c <le_enh_conn_complete+0x120>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    2c02:	4b22      	ldr	r3, [pc, #136]	; (2c8c <le_enh_conn_complete+0x1a0>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    2c04:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    2c08:	0719      	lsls	r1, r3, #28
    2c0a:	d51d      	bpl.n	2c48 <le_enh_conn_complete+0x15c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    2c0c:	2102      	movs	r1, #2
    2c0e:	f242 0016 	movw	r0, #8214	; 0x2016
    2c12:	f7ff f8d7 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    2c16:	4605      	mov	r5, r0
    2c18:	b1b0      	cbz	r0, 2c48 <le_enh_conn_complete+0x15c>
	cp = net_buf_add(buf, sizeof(*cp));
    2c1a:	2102      	movs	r1, #2
    2c1c:	3008      	adds	r0, #8
    2c1e:	f010 fb5b 	bl	132d8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    2c22:	8823      	ldrh	r3, [r4, #0]
    2c24:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    2c26:	4629      	mov	r1, r5
    2c28:	f242 0016 	movw	r0, #8214	; 0x2016
    2c2c:	f7ff fef2 	bl	2a14 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    2c30:	4620      	mov	r0, r4
    2c32:	f001 fa6a 	bl	410a <bt_conn_unref>
	bt_le_scan_update(false);
    2c36:	2000      	movs	r0, #0
    2c38:	f7ff fbc8 	bl	23cc <bt_le_scan_update>
    2c3c:	e774      	b.n	2b28 <le_enh_conn_complete+0x3c>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    2c3e:	4621      	mov	r1, r4
    2c40:	4668      	mov	r0, sp
    2c42:	f7ff f817 	bl	1c74 <bt_addr_le_copy>
    2c46:	e788      	b.n	2b5a <le_enh_conn_complete+0x6e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    2c48:	4d10      	ldr	r5, [pc, #64]	; (2c8c <le_enh_conn_complete+0x1a0>)
    2c4a:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    2c4e:	07d2      	lsls	r2, r2, #31
    2c50:	d508      	bpl.n	2c64 <le_enh_conn_complete+0x178>
		err = hci_le_set_phy(conn);
    2c52:	4620      	mov	r0, r4
    2c54:	f7ff ff00 	bl	2a58 <hci_le_set_phy.isra.32>
		if (!err) {
    2c58:	b920      	cbnz	r0, 2c64 <le_enh_conn_complete+0x178>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2c5a:	2180      	movs	r1, #128	; 0x80
    2c5c:	1d20      	adds	r0, r4, #4
    2c5e:	f7ff f80c 	bl	1c7a <atomic_or>
    2c62:	e7e5      	b.n	2c30 <le_enh_conn_complete+0x144>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    2c64:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    2c68:	069b      	lsls	r3, r3, #26
    2c6a:	d506      	bpl.n	2c7a <le_enh_conn_complete+0x18e>
		err = hci_le_set_data_len(conn);
    2c6c:	4620      	mov	r0, r4
    2c6e:	f7ff ff13 	bl	2a98 <hci_le_set_data_len.isra.33>
		if (!err) {
    2c72:	b910      	cbnz	r0, 2c7a <le_enh_conn_complete+0x18e>
    2c74:	f44f 7180 	mov.w	r1, #256	; 0x100
    2c78:	e7f0      	b.n	2c5c <le_enh_conn_complete+0x170>
	update_conn_param(conn);
    2c7a:	4620      	mov	r0, r4
    2c7c:	f7ff f83c 	bl	1cf8 <update_conn_param>
    2c80:	e7d6      	b.n	2c30 <le_enh_conn_complete+0x144>
    2c82:	bf00      	nop
    2c84:	2000cc10 	.word	0x2000cc10
    2c88:	00002399 	.word	0x00002399
    2c8c:	2000cba0 	.word	0x2000cba0

00002c90 <le_conn_param_neg_reply>:
{
    2c90:	b570      	push	{r4, r5, r6, lr}
    2c92:	4606      	mov	r6, r0
    2c94:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    2c96:	f242 0021 	movw	r0, #8225	; 0x2021
    2c9a:	2103      	movs	r1, #3
    2c9c:	f7ff f892 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    2ca0:	4604      	mov	r4, r0
    2ca2:	b160      	cbz	r0, 2cbe <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    2ca4:	2103      	movs	r1, #3
    2ca6:	3008      	adds	r0, #8
    2ca8:	f010 fb16 	bl	132d8 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    2cac:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    2cae:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2cb0:	4621      	mov	r1, r4
    2cb2:	f242 0021 	movw	r0, #8225	; 0x2021
}
    2cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    2cba:	f7ff beab 	b.w	2a14 <bt_hci_cmd_send>
}
    2cbe:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2cc2:	bd70      	pop	{r4, r5, r6, pc}

00002cc4 <hci_tx_thread>:
{
    2cc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    2cc8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2dac <hci_tx_thread+0xe8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2ccc:	4c35      	ldr	r4, [pc, #212]	; (2da4 <hci_tx_thread+0xe0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2cce:	f898 300d 	ldrb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2cd2:	4835      	ldr	r0, [pc, #212]	; (2da8 <hci_tx_thread+0xe4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2cd4:	f36f 1307 	bfc	r3, #4, #4
    2cd8:	f888 300d 	strb.w	r3, [r8, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    2cdc:	f001 f890 	bl	3e00 <bt_conn_prepare_events>
    2ce0:	1c47      	adds	r7, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    2ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ce6:	4639      	mov	r1, r7
    2ce8:	4830      	ldr	r0, [pc, #192]	; (2dac <hci_tx_thread+0xe8>)
    2cea:	f011 fcc7 	bl	1467c <k_poll>
		BT_ASSERT(err == 0);
    2cee:	b9b8      	cbnz	r0, 2d20 <hci_tx_thread+0x5c>
    2cf0:	4d2e      	ldr	r5, [pc, #184]	; (2dac <hci_tx_thread+0xe8>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2cf2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2db0 <hci_tx_thread+0xec>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2cf6:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
	for (; count; ev++, count--) {
    2cfa:	b917      	cbnz	r7, 2d02 <hci_tx_thread+0x3e>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2cfc:	f010 fed0 	bl	13aa0 <_impl_k_yield>
    2d00:	e7e5      	b.n	2cce <hci_tx_thread+0xa>
		switch (ev->state) {
    2d02:	7b6b      	ldrb	r3, [r5, #13]
    2d04:	091b      	lsrs	r3, r3, #4
    2d06:	2b04      	cmp	r3, #4
    2d08:	d139      	bne.n	2d7e <hci_tx_thread+0xba>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2d0a:	f895 a00c 	ldrb.w	sl, [r5, #12]
    2d0e:	f1ba 0f00 	cmp.w	sl, #0
    2d12:	d137      	bne.n	2d84 <hci_tx_thread+0xc0>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2d14:	4651      	mov	r1, sl
    2d16:	4658      	mov	r0, fp
    2d18:	f010 fa82 	bl	13220 <net_buf_get>
	BT_ASSERT(buf);
    2d1c:	4606      	mov	r6, r0
    2d1e:	b928      	cbnz	r0, 2d2c <hci_tx_thread+0x68>
    2d20:	4040      	eors	r0, r0
    2d22:	f380 8811 	msr	BASEPRI, r0
    2d26:	f04f 0004 	mov.w	r0, #4
    2d2a:	df02      	svc	2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d30:	4648      	mov	r0, r9
    2d32:	f010 ffb9 	bl	13ca8 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2d36:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2d3a:	b118      	cbz	r0, 2d44 <hci_tx_thread+0x80>
		net_buf_unref(bt_dev.sent_cmd);
    2d3c:	f010 fa9a 	bl	13274 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2d40:	f8c4 a0c0 	str.w	sl, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    2d44:	4630      	mov	r0, r6
    2d46:	f010 fac3 	bl	132d0 <net_buf_ref>
    2d4a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    2d4e:	4630      	mov	r0, r6
    2d50:	f7ff fe58 	bl	2a04 <bt_send>
	if (err) {
    2d54:	b198      	cbz	r0, 2d7e <hci_tx_thread+0xba>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2d56:	4648      	mov	r0, r9
    2d58:	f010 ff46 	bl	13be8 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2d5c:	4630      	mov	r0, r6
    2d5e:	f010 f9cb 	bl	130f8 <net_buf_id>
    2d62:	2100      	movs	r1, #0
    2d64:	201f      	movs	r0, #31
    2d66:	f7fe fff3 	bl	1d50 <hci_cmd_done.isra.18>
		net_buf_unref(bt_dev.sent_cmd);
    2d6a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    2d6e:	f010 fa81 	bl	13274 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2d72:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2d74:	4630      	mov	r0, r6
		bt_dev.sent_cmd = NULL;
    2d76:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    2d7a:	f010 fa7b 	bl	13274 <net_buf_unref>
	for (; count; ev++, count--) {
    2d7e:	3514      	adds	r5, #20
    2d80:	3f01      	subs	r7, #1
    2d82:	e7ba      	b.n	2cfa <hci_tx_thread+0x36>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    2d84:	f1ba 0f01 	cmp.w	sl, #1
    2d88:	d104      	bne.n	2d94 <hci_tx_thread+0xd0>
					conn = CONTAINER_OF(ev->fifo,
    2d8a:	6928      	ldr	r0, [r5, #16]
					bt_conn_notify_tx(conn);
    2d8c:	381c      	subs	r0, #28
    2d8e:	f000 ff77 	bl	3c80 <bt_conn_notify_tx>
    2d92:	e7f4      	b.n	2d7e <hci_tx_thread+0xba>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    2d94:	f1ba 0f02 	cmp.w	sl, #2
    2d98:	d1f1      	bne.n	2d7e <hci_tx_thread+0xba>
					conn = CONTAINER_OF(ev->fifo,
    2d9a:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
    2d9c:	382c      	subs	r0, #44	; 0x2c
    2d9e:	f001 fab3 	bl	4308 <bt_conn_process_tx>
    2da2:	e7ec      	b.n	2d7e <hci_tx_thread+0xba>
    2da4:	2000cba0 	.word	0x2000cba0
    2da8:	2000cc9c 	.word	0x2000cc9c
    2dac:	2000cc88 	.word	0x2000cc88
    2db0:	2000cc48 	.word	0x2000cc48

00002db4 <bt_recv>:
{
    2db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    2db8:	7d03      	ldrb	r3, [r0, #20]
    2dba:	2b01      	cmp	r3, #1
{
    2dbc:	b091      	sub	sp, #68	; 0x44
    2dbe:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2dc0:	d02a      	beq.n	2e18 <bt_recv+0x64>
    2dc2:	2b03      	cmp	r3, #3
    2dc4:	f040 8397 	bne.w	34f6 <bt_recv+0x742>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    2dc8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    2dca:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    2dcc:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    2dce:	f3c6 030b 	ubfx	r3, r6, #0, #12
    2dd2:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    2dd4:	23ff      	movs	r3, #255	; 0xff
    2dd6:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    2dd8:	2104      	movs	r1, #4
    2dda:	3008      	adds	r0, #8
    2ddc:	f010 fa9b 	bl	13316 <net_buf_simple_pull>
	if (buf->len != len) {
    2de0:	89a3      	ldrh	r3, [r4, #12]
    2de2:	42ab      	cmp	r3, r5
    2de4:	d003      	beq.n	2dee <bt_recv+0x3a>
	net_buf_unref(buf);
    2de6:	4620      	mov	r0, r4
    2de8:	f010 fa44 	bl	13274 <net_buf_unref>
    2dec:	e010      	b.n	2e10 <bt_recv+0x5c>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    2dee:	8ae0      	ldrh	r0, [r4, #22]
    2df0:	f001 f916 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    2df4:	4605      	mov	r5, r0
    2df6:	2800      	cmp	r0, #0
    2df8:	d0f5      	beq.n	2de6 <bt_recv+0x32>
	acl(buf)->id = bt_conn_get_id(conn);
    2dfa:	f001 faf3 	bl	43e4 <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    2dfe:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    2e00:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    2e02:	4621      	mov	r1, r4
    2e04:	4628      	mov	r0, r5
    2e06:	f000 fee3 	bl	3bd0 <bt_conn_recv>
	bt_conn_unref(conn);
    2e0a:	4628      	mov	r0, r5
    2e0c:	f001 f97d 	bl	410a <bt_conn_unref>
		return 0;
    2e10:	2000      	movs	r0, #0
}
    2e12:	b011      	add	sp, #68	; 0x44
    2e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2e18:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2e1a:	7832      	ldrb	r2, [r6, #0]
    2e1c:	2a13      	cmp	r2, #19
    2e1e:	f200 836f 	bhi.w	3500 <bt_recv+0x74c>
    2e22:	4093      	lsls	r3, r2
    2e24:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    2e28:	f000 836a 	beq.w	3500 <bt_recv+0x74c>
    2e2c:	4040      	eors	r0, r0
    2e2e:	f380 8811 	msr	BASEPRI, r0
    2e32:	f04f 0004 	mov.w	r0, #4
    2e36:	df02      	svc	2
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    2e38:	4631      	mov	r1, r6
    2e3a:	1d28      	adds	r0, r5, #4
    2e3c:	f7fe ff2e 	bl	1c9c <atomic_test_bit>
    2e40:	b130      	cbz	r0, 2e50 <bt_recv+0x9c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    2e42:	4628      	mov	r0, r5
    2e44:	2101      	movs	r1, #1
    2e46:	f001 f85d 	bl	3f04 <bt_conn_set_state>
		bt_le_scan_update(false);
    2e4a:	4630      	mov	r0, r6
    2e4c:	f7ff fabe 	bl	23cc <bt_le_scan_update>
	bt_conn_unref(conn);
    2e50:	4628      	mov	r0, r5
    2e52:	f001 f95a 	bl	410a <bt_conn_unref>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2e56:	2106      	movs	r1, #6
    2e58:	48ba      	ldr	r0, [pc, #744]	; (3144 <bt_recv+0x390>)
    2e5a:	f7fe ff1f 	bl	1c9c <atomic_test_bit>
    2e5e:	2800      	cmp	r0, #0
    2e60:	d0c1      	beq.n	2de6 <bt_recv+0x32>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2e62:	2105      	movs	r1, #5
    2e64:	48b7      	ldr	r0, [pc, #732]	; (3144 <bt_recv+0x390>)
    2e66:	f7fe ff19 	bl	1c9c <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    2e6a:	2800      	cmp	r0, #0
    2e6c:	d1bb      	bne.n	2de6 <bt_recv+0x32>
		set_advertise_enable(true);
    2e6e:	2001      	movs	r0, #1
    2e70:	f7ff f8ce 	bl	2010 <set_advertise_enable>
    2e74:	e7b7      	b.n	2de6 <bt_recv+0x32>
    2e76:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2e78:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    2e7c:	f001 f8d0 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    2e80:	4605      	mov	r5, r0
    2e82:	2800      	cmp	r0, #0
    2e84:	d0af      	beq.n	2de6 <bt_recv+0x32>
	if (evt->status) {
    2e86:	7833      	ldrb	r3, [r6, #0]
    2e88:	7882      	ldrb	r2, [r0, #2]
    2e8a:	b12b      	cbz	r3, 2e98 <bt_recv+0xe4>
		if (conn->type == BT_CONN_TYPE_LE) {
    2e8c:	2a00      	cmp	r2, #0
    2e8e:	f040 835f 	bne.w	3550 <bt_recv+0x79c>
			conn->required_sec_level = conn->sec_level;
    2e92:	7a03      	ldrb	r3, [r0, #8]
    2e94:	7243      	strb	r3, [r0, #9]
    2e96:	e35b      	b.n	3550 <bt_recv+0x79c>
	conn->encrypt = evt->encrypt;
    2e98:	78f3      	ldrb	r3, [r6, #3]
    2e9a:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    2e9c:	b9ba      	cbnz	r2, 2ece <bt_recv+0x11a>
		if (conn->encrypt) {
    2e9e:	b10b      	cbz	r3, 2ea4 <bt_recv+0xf0>
		bt_smp_update_keys(conn);
    2ea0:	f004 fb07 	bl	74b2 <bt_smp_update_keys>
	if (!conn->encrypt) {
    2ea4:	7aab      	ldrb	r3, [r5, #10]
    2ea6:	b9d3      	cbnz	r3, 2ede <bt_recv+0x12a>
		conn->sec_level = BT_SECURITY_LOW;
    2ea8:	2301      	movs	r3, #1
    2eaa:	722b      	strb	r3, [r5, #8]
    2eac:	e00f      	b.n	2ece <bt_recv+0x11a>
    2eae:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2eb0:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    2eb4:	f001 f8b4 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    2eb8:	4605      	mov	r5, r0
    2eba:	2800      	cmp	r0, #0
    2ebc:	d093      	beq.n	2de6 <bt_recv+0x32>
	if (evt->status) {
    2ebe:	7831      	ldrb	r1, [r6, #0]
    2ec0:	b111      	cbz	r1, 2ec8 <bt_recv+0x114>
		bt_l2cap_encrypt_change(conn, evt->status);
    2ec2:	f001 fb72 	bl	45aa <bt_l2cap_encrypt_change>
    2ec6:	e78e      	b.n	2de6 <bt_recv+0x32>
	if (conn->type == BT_CONN_TYPE_LE) {
    2ec8:	7883      	ldrb	r3, [r0, #2]
    2eca:	2b00      	cmp	r3, #0
    2ecc:	d0e8      	beq.n	2ea0 <bt_recv+0xec>
	bt_l2cap_encrypt_change(conn, evt->status);
    2ece:	4628      	mov	r0, r5
    2ed0:	7831      	ldrb	r1, [r6, #0]
    2ed2:	f001 fb6a 	bl	45aa <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    2ed6:	4628      	mov	r0, r5
    2ed8:	f000 fe44 	bl	3b64 <bt_conn_security_changed>
    2edc:	e338      	b.n	3550 <bt_recv+0x79c>
    2ede:	4628      	mov	r0, r5
    2ee0:	f7fe ff18 	bl	1d14 <update_sec_level.part.13>
    2ee4:	e7f3      	b.n	2ece <bt_recv+0x11a>
    2ee6:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    2ee8:	780b      	ldrb	r3, [r1, #0]
    2eea:	f88d 3020 	strb.w	r3, [sp, #32]
	enh.handle         = evt->handle;
    2eee:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    2ef2:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.role           = evt->role;
    2ef6:	78cb      	ldrb	r3, [r1, #3]
    2ef8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	enh.interval       = evt->interval;
    2efc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    2f00:	f8ad 3037 	strh.w	r3, [sp, #55]	; 0x37
	enh.latency        = evt->latency;
    2f04:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    2f08:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
	enh.supv_timeout   = evt->supv_timeout;
    2f0c:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    2f10:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    2f14:	ae09      	add	r6, sp, #36	; 0x24
	enh.clock_accuracy = evt->clock_accuracy;
    2f16:	7c4b      	ldrb	r3, [r1, #17]
    2f18:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    2f1c:	3104      	adds	r1, #4
    2f1e:	4630      	mov	r0, r6
    2f20:	f7fe fea8 	bl	1c74 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    2f24:	2500      	movs	r5, #0
    2f26:	2206      	movs	r2, #6
    2f28:	a904      	add	r1, sp, #16
    2f2a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
    2f2e:	9504      	str	r5, [sp, #16]
    2f30:	f8ad 5014 	strh.w	r5, [sp, #20]
    2f34:	f7fd fb54 	bl	5e0 <memcpy>
		keys = bt_keys_find_irk(addr);
    2f38:	4630      	mov	r0, r6
    2f3a:	f004 fbb7 	bl	76ac <bt_keys_find_irk>
		if (keys) {
    2f3e:	4607      	mov	r7, r0
    2f40:	b1a8      	cbz	r0, 2f6e <bt_recv+0x1ba>
	if (id_addr != &enh.peer_addr) {
    2f42:	42b0      	cmp	r0, r6
    2f44:	d013      	beq.n	2f6e <bt_recv+0x1ba>
    2f46:	2206      	movs	r2, #6
    2f48:	f10d 0125 	add.w	r1, sp, #37	; 0x25
    2f4c:	f10d 0031 	add.w	r0, sp, #49	; 0x31
    2f50:	f7fd fb46 	bl	5e0 <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    2f54:	4639      	mov	r1, r7
    2f56:	4630      	mov	r0, r6
    2f58:	f7fe fe8c 	bl	1c74 <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    2f5c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    2f60:	3302      	adds	r3, #2
    2f62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	le_enh_conn_complete(&enh);
    2f66:	a808      	add	r0, sp, #32
		le_enh_conn_complete((void *)buf->data);
    2f68:	f7ff fdc0 	bl	2aec <le_enh_conn_complete>
    2f6c:	e73b      	b.n	2de6 <bt_recv+0x32>
    2f6e:	2206      	movs	r2, #6
    2f70:	a906      	add	r1, sp, #24
    2f72:	f10d 0031 	add.w	r0, sp, #49	; 0x31
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    2f76:	9506      	str	r5, [sp, #24]
    2f78:	f8ad 501c 	strh.w	r5, [sp, #28]
    2f7c:	f7fd fb30 	bl	5e0 <memcpy>
    2f80:	e7f1      	b.n	2f66 <bt_recv+0x1b2>
		le_enh_conn_complete((void *)buf->data);
    2f82:	68a0      	ldr	r0, [r4, #8]
    2f84:	e7f0      	b.n	2f68 <bt_recv+0x1b4>
    2f86:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2f88:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    2f8c:	f001 f848 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    2f90:	4606      	mov	r6, r0
    2f92:	2800      	cmp	r0, #0
    2f94:	f43f af27 	beq.w	2de6 <bt_recv+0x32>
	if (!evt->status) {
    2f98:	782b      	ldrb	r3, [r5, #0]
    2f9a:	b99b      	cbnz	r3, 2fc4 <bt_recv+0x210>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    2f9c:	792a      	ldrb	r2, [r5, #4]
    2f9e:	78eb      	ldrb	r3, [r5, #3]
    2fa0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2fa4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    2fa8:	79aa      	ldrb	r2, [r5, #6]
    2faa:	796b      	ldrb	r3, [r5, #5]
    2fac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2fb0:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    2fb4:	79eb      	ldrb	r3, [r5, #7]
    2fb6:	7a2a      	ldrb	r2, [r5, #8]
    2fb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2fbc:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    2fc0:	f000 fd82 	bl	3ac8 <notify_le_param_updated>
	bt_conn_unref(conn);
    2fc4:	4630      	mov	r0, r6
    2fc6:	e05f      	b.n	3088 <bt_recv+0x2d4>
    2fc8:	68a6      	ldr	r6, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    2fca:	f8b6 0001 	ldrh.w	r0, [r6, #1]
    2fce:	f001 f827 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    2fd2:	4605      	mov	r5, r0
    2fd4:	2800      	cmp	r0, #0
    2fd6:	f43f af06 	beq.w	2de6 <bt_recv+0x32>
	if (!evt->status) {
    2fda:	7833      	ldrb	r3, [r6, #0]
    2fdc:	b923      	cbnz	r3, 2fe8 <bt_recv+0x234>
		memcpy(conn->le.features, evt->features,
    2fde:	2208      	movs	r2, #8
    2fe0:	1cf1      	adds	r1, r6, #3
    2fe2:	3068      	adds	r0, #104	; 0x68
    2fe4:	f7fd fafc 	bl	5e0 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    2fe8:	4e57      	ldr	r6, [pc, #348]	; (3148 <bt_recv+0x394>)
    2fea:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    2fee:	07d2      	lsls	r2, r2, #31
    2ff0:	d50c      	bpl.n	300c <bt_recv+0x258>
    2ff2:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    2ff6:	07db      	lsls	r3, r3, #31
    2ff8:	d508      	bpl.n	300c <bt_recv+0x258>
		err = hci_le_set_phy(conn);
    2ffa:	4628      	mov	r0, r5
    2ffc:	f7ff fd2c 	bl	2a58 <hci_le_set_phy.isra.32>
		if (!err) {
    3000:	b920      	cbnz	r0, 300c <bt_recv+0x258>
    3002:	2180      	movs	r1, #128	; 0x80
    3004:	1d28      	adds	r0, r5, #4
    3006:	f7fe fe38 	bl	1c7a <atomic_or>
    300a:	e2a1      	b.n	3550 <bt_recv+0x79c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    300c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    3010:	069f      	lsls	r7, r3, #26
    3012:	d56f      	bpl.n	30f4 <bt_recv+0x340>
    3014:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    3018:	069e      	lsls	r6, r3, #26
    301a:	d56b      	bpl.n	30f4 <bt_recv+0x340>
		err = hci_le_set_data_len(conn);
    301c:	4628      	mov	r0, r5
    301e:	f7ff fd3b 	bl	2a98 <hci_le_set_data_len.isra.33>
		if (!err) {
    3022:	2800      	cmp	r0, #0
    3024:	d166      	bne.n	30f4 <bt_recv+0x340>
    3026:	f44f 7180 	mov.w	r1, #256	; 0x100
    302a:	e7eb      	b.n	3004 <bt_recv+0x250>
    302c:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    302e:	78d9      	ldrb	r1, [r3, #3]
    3030:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    3032:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    3034:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3038:	f8ad 2020 	strh.w	r2, [sp, #32]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    303c:	7959      	ldrb	r1, [r3, #5]
    303e:	791a      	ldrb	r2, [r3, #4]
    3040:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3044:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
	param.latency = sys_le16_to_cpu(evt->latency);
    3048:	799a      	ldrb	r2, [r3, #6]
    304a:	79d9      	ldrb	r1, [r3, #7]
    304c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3050:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3054:	7a1a      	ldrb	r2, [r3, #8]
    3056:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    3058:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    305a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    305e:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    3060:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
	conn = bt_conn_lookup_handle(handle);
    3064:	f000 ffdc 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    3068:	4680      	mov	r8, r0
    306a:	b920      	cbnz	r0, 3076 <bt_recv+0x2c2>
		return le_conn_param_neg_reply(handle,
    306c:	2102      	movs	r1, #2
    306e:	4628      	mov	r0, r5
    3070:	f7ff fe0e 	bl	2c90 <le_conn_param_neg_reply>
    3074:	e6b7      	b.n	2de6 <bt_recv+0x32>
	if (!le_param_req(conn, &param)) {
    3076:	a908      	add	r1, sp, #32
    3078:	f000 fd3a 	bl	3af0 <le_param_req>
    307c:	b938      	cbnz	r0, 308e <bt_recv+0x2da>
		err = le_conn_param_neg_reply(handle,
    307e:	211e      	movs	r1, #30
    3080:	4628      	mov	r0, r5
    3082:	f7ff fe05 	bl	2c90 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    3086:	4640      	mov	r0, r8
	bt_conn_unref(conn);
    3088:	f001 f83f 	bl	410a <bt_conn_unref>
    308c:	e6ab      	b.n	2de6 <bt_recv+0x32>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    308e:	210e      	movs	r1, #14
    3090:	f242 0020 	movw	r0, #8224	; 0x2020
    3094:	f7fe fe96 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    3098:	4606      	mov	r6, r0
    309a:	2800      	cmp	r0, #0
    309c:	d0f3      	beq.n	3086 <bt_recv+0x2d2>
	cp = net_buf_add(buf, sizeof(*cp));
    309e:	210e      	movs	r1, #14
    30a0:	3008      	adds	r0, #8
    30a2:	f010 f919 	bl	132d8 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    30a6:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    30a8:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    30aa:	2100      	movs	r1, #0
    30ac:	f7fd fac4 	bl	638 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    30b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    30b4:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    30b6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    30ba:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    30bc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    30c0:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    30c2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
	cp->handle = sys_cpu_to_le16(handle);
    30c6:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    30c8:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    30ca:	4631      	mov	r1, r6
    30cc:	f242 0020 	movw	r0, #8224	; 0x2020
    30d0:	f7ff fca0 	bl	2a14 <bt_hci_cmd_send>
    30d4:	e7d7      	b.n	3086 <bt_recv+0x2d2>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30d6:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    30d8:	8818      	ldrh	r0, [r3, #0]
    30da:	f000 ffa1 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    30de:	4605      	mov	r5, r0
    30e0:	2800      	cmp	r0, #0
    30e2:	f43f ae80 	beq.w	2de6 <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    30e6:	2108      	movs	r1, #8
    30e8:	3004      	adds	r0, #4
    30ea:	f7fe fdf5 	bl	1cd8 <atomic_test_and_clear_bit>
    30ee:	2800      	cmp	r0, #0
    30f0:	f000 822e 	beq.w	3550 <bt_recv+0x79c>
	update_conn_param(conn);
    30f4:	4628      	mov	r0, r5
    30f6:	f7fe fdff 	bl	1cf8 <update_conn_param>
    30fa:	e229      	b.n	3550 <bt_recv+0x79c>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    30fc:	68a3      	ldr	r3, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    30fe:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    3102:	f000 ff8d 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    3106:	4605      	mov	r5, r0
    3108:	2800      	cmp	r0, #0
    310a:	f43f ae6c 	beq.w	2de6 <bt_recv+0x32>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    310e:	1d06      	adds	r6, r0, #4
    3110:	2107      	movs	r1, #7
    3112:	4630      	mov	r0, r6
    3114:	f7fe fde0 	bl	1cd8 <atomic_test_and_clear_bit>
    3118:	2800      	cmp	r0, #0
    311a:	f000 8219 	beq.w	3550 <bt_recv+0x79c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    311e:	4b0a      	ldr	r3, [pc, #40]	; (3148 <bt_recv+0x394>)
    3120:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3124:	0698      	lsls	r0, r3, #26
    3126:	d5e5      	bpl.n	30f4 <bt_recv+0x340>
    3128:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    312c:	0699      	lsls	r1, r3, #26
    312e:	d5e1      	bpl.n	30f4 <bt_recv+0x340>
		err = hci_le_set_data_len(conn);
    3130:	4628      	mov	r0, r5
    3132:	f7ff fcb1 	bl	2a98 <hci_le_set_data_len.isra.33>
		if (!err) {
    3136:	2800      	cmp	r0, #0
    3138:	d1dc      	bne.n	30f4 <bt_recv+0x340>
    313a:	f44f 7180 	mov.w	r1, #256	; 0x100
    313e:	4630      	mov	r0, r6
    3140:	e761      	b.n	3006 <bt_recv+0x252>
    3142:	bf00      	nop
    3144:	2000cc10 	.word	0x2000cc10
    3148:	2000cba0 	.word	0x2000cba0
    314c:	68a5      	ldr	r5, [r4, #8]
	conn = bt_conn_lookup_handle(handle);
    314e:	8828      	ldrh	r0, [r5, #0]
    3150:	f000 ff66 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    3154:	4606      	mov	r6, r0
    3156:	2800      	cmp	r0, #0
    3158:	f43f ae45 	beq.w	2de6 <bt_recv+0x32>
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    315c:	f8d5 2002 	ldr.w	r2, [r5, #2]
    3160:	f8d5 3006 	ldr.w	r3, [r5, #6]
    3164:	4313      	orrs	r3, r2
    3166:	d11f      	bne.n	31a8 <bt_recv+0x3f4>
    3168:	896b      	ldrh	r3, [r5, #10]
    316a:	b9eb      	cbnz	r3, 31a8 <bt_recv+0x3f4>
    316c:	a908      	add	r1, sp, #32
    316e:	f004 fa07 	bl	7580 <bt_smp_get_tk>
    3172:	b1c8      	cbz	r0, 31a8 <bt_recv+0x3f4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    3174:	2112      	movs	r1, #18
    3176:	f242 001a 	movw	r0, #8218	; 0x201a
    317a:	f7fe fe23 	bl	1dc4 <bt_hci_cmd_create>
		if (!buf) {
    317e:	4607      	mov	r7, r0
    3180:	2800      	cmp	r0, #0
    3182:	f43f af1f 	beq.w	2fc4 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    3186:	2112      	movs	r1, #18
    3188:	3008      	adds	r0, #8
    318a:	f010 f8a5 	bl	132d8 <net_buf_simple_add>
		cp->handle = evt->handle;
    318e:	882b      	ldrh	r3, [r5, #0]
    3190:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    3194:	2210      	movs	r2, #16
    3196:	a908      	add	r1, sp, #32
    3198:	f7fd fa22 	bl	5e0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    319c:	4639      	mov	r1, r7
    319e:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    31a2:	f7ff fc37 	bl	2a14 <bt_hci_cmd_send>
    31a6:	e70d      	b.n	2fc4 <bt_recv+0x210>
	if (!conn->le.keys) {
    31a8:	6f33      	ldr	r3, [r6, #112]	; 0x70
    31aa:	2b00      	cmp	r3, #0
    31ac:	f040 8214 	bne.w	35d8 <bt_recv+0x824>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    31b0:	f106 0748 	add.w	r7, r6, #72	; 0x48
    31b4:	4639      	mov	r1, r7
    31b6:	2020      	movs	r0, #32
    31b8:	f004 fa5a 	bl	7670 <bt_keys_find>
    31bc:	6730      	str	r0, [r6, #112]	; 0x70
		if (!conn->le.keys) {
    31be:	2800      	cmp	r0, #0
    31c0:	f040 820a 	bne.w	35d8 <bt_recv+0x824>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    31c4:	4639      	mov	r1, r7
    31c6:	2001      	movs	r0, #1
    31c8:	f004 fa52 	bl	7670 <bt_keys_find>
    31cc:	6730      	str	r0, [r6, #112]	; 0x70
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    31ce:	2800      	cmp	r0, #0
    31d0:	d055      	beq.n	327e <bt_recv+0x4ca>
    31d2:	8981      	ldrh	r1, [r0, #12]
    31d4:	068a      	lsls	r2, r1, #26
    31d6:	d52c      	bpl.n	3232 <bt_recv+0x47e>
	    evt->rand == 0 && evt->ediv == 0) {
    31d8:	f8d5 2002 	ldr.w	r2, [r5, #2]
    31dc:	f8d5 3006 	ldr.w	r3, [r5, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    31e0:	4313      	orrs	r3, r2
    31e2:	d126      	bne.n	3232 <bt_recv+0x47e>
	    evt->rand == 0 && evt->ediv == 0) {
    31e4:	f8b5 800a 	ldrh.w	r8, [r5, #10]
    31e8:	f1b8 0f00 	cmp.w	r8, #0
    31ec:	d121      	bne.n	3232 <bt_recv+0x47e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    31ee:	2112      	movs	r1, #18
    31f0:	f242 001a 	movw	r0, #8218	; 0x201a
    31f4:	f7fe fde6 	bl	1dc4 <bt_hci_cmd_create>
		if (!buf) {
    31f8:	4607      	mov	r7, r0
    31fa:	2800      	cmp	r0, #0
    31fc:	f43f aee2 	beq.w	2fc4 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    3200:	2112      	movs	r1, #18
    3202:	3008      	adds	r0, #8
    3204:	f010 f868 	bl	132d8 <net_buf_simple_add>
		cp->handle = evt->handle;
    3208:	882b      	ldrh	r3, [r5, #0]
    320a:	4605      	mov	r5, r0
    320c:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    3210:	6f31      	ldr	r1, [r6, #112]	; 0x70
    3212:	79ca      	ldrb	r2, [r1, #7]
    3214:	311a      	adds	r1, #26
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    3216:	4628      	mov	r0, r5
    3218:	f7fd f9e2 	bl	5e0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    321c:	6f33      	ldr	r3, [r6, #112]	; 0x70
    321e:	79d8      	ldrb	r0, [r3, #7]
    3220:	280f      	cmp	r0, #15
    3222:	d8bb      	bhi.n	319c <bt_recv+0x3e8>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    3224:	f1c0 0210 	rsb	r2, r0, #16
    3228:	2100      	movs	r1, #0
    322a:	4428      	add	r0, r5
    322c:	f7fd fa04 	bl	638 <memset>
    3230:	e7b4      	b.n	319c <bt_recv+0x3e8>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    3232:	07cb      	lsls	r3, r1, #31
    3234:	d523      	bpl.n	327e <bt_recv+0x4ca>
    3236:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    323a:	f8d5 9006 	ldr.w	r9, [r5, #6]
    323e:	f8d5 8002 	ldr.w	r8, [r5, #2]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    3242:	454b      	cmp	r3, r9
    3244:	bf08      	it	eq
    3246:	4542      	cmpeq	r2, r8
    3248:	d119      	bne.n	327e <bt_recv+0x4ca>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    324a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
    324e:	896b      	ldrh	r3, [r5, #10]
    3250:	429a      	cmp	r2, r3
    3252:	d114      	bne.n	327e <bt_recv+0x4ca>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    3254:	2112      	movs	r1, #18
    3256:	f242 001a 	movw	r0, #8218	; 0x201a
    325a:	f7fe fdb3 	bl	1dc4 <bt_hci_cmd_create>
		if (!buf) {
    325e:	4607      	mov	r7, r0
    3260:	2800      	cmp	r0, #0
    3262:	f43f aeaf 	beq.w	2fc4 <bt_recv+0x210>
		cp = net_buf_add(buf, sizeof(*cp));
    3266:	2112      	movs	r1, #18
    3268:	3008      	adds	r0, #8
    326a:	f010 f835 	bl	132d8 <net_buf_simple_add>
		cp->handle = evt->handle;
    326e:	882b      	ldrh	r3, [r5, #0]
    3270:	4605      	mov	r5, r0
    3272:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    3276:	6f31      	ldr	r1, [r6, #112]	; 0x70
    3278:	79ca      	ldrb	r2, [r1, #7]
    327a:	3152      	adds	r1, #82	; 0x52
    327c:	e7cb      	b.n	3216 <bt_recv+0x462>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    327e:	2102      	movs	r1, #2
    3280:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
    3284:	882f      	ldrh	r7, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    3286:	f7fe fd9d 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    328a:	4605      	mov	r5, r0
    328c:	2800      	cmp	r0, #0
    328e:	f43f ae99 	beq.w	2fc4 <bt_recv+0x210>
	cp = net_buf_add(buf, sizeof(*cp));
    3292:	2102      	movs	r1, #2
    3294:	3008      	adds	r0, #8
    3296:	f010 f81f 	bl	132d8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    329a:	4629      	mov	r1, r5
	cp->handle = handle;
    329c:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    329e:	f242 001b 	movw	r0, #8219	; 0x201b
    32a2:	e77e      	b.n	31a2 <bt_recv+0x3ee>
    32a4:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32a6:	48ab      	ldr	r0, [pc, #684]	; (3554 <bt_recv+0x7a0>)
    32a8:	f06f 0110 	mvn.w	r1, #16
    32ac:	f7fe fd03 	bl	1cb6 <atomic_and>
	if (!evt->status) {
    32b0:	7833      	ldrb	r3, [r6, #0]
    32b2:	b943      	cbnz	r3, 32c6 <bt_recv+0x512>
		memcpy(pub_key, evt->key, 64);
    32b4:	1c71      	adds	r1, r6, #1
    32b6:	2240      	movs	r2, #64	; 0x40
    32b8:	48a7      	ldr	r0, [pc, #668]	; (3558 <bt_recv+0x7a4>)
    32ba:	f7fd f991 	bl	5e0 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    32be:	2108      	movs	r1, #8
    32c0:	48a4      	ldr	r0, [pc, #656]	; (3554 <bt_recv+0x7a0>)
    32c2:	f7fe fcda 	bl	1c7a <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    32c6:	4ba5      	ldr	r3, [pc, #660]	; (355c <bt_recv+0x7a8>)
    32c8:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    32ca:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    32cc:	2d00      	cmp	r5, #0
    32ce:	f43f ad8a 	beq.w	2de6 <bt_recv+0x32>
		cb->func(evt->status ? NULL : evt->key);
    32d2:	7832      	ldrb	r2, [r6, #0]
    32d4:	682b      	ldr	r3, [r5, #0]
    32d6:	2a00      	cmp	r2, #0
    32d8:	bf0c      	ite	eq
    32da:	4638      	moveq	r0, r7
    32dc:	2000      	movne	r0, #0
    32de:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    32e0:	686d      	ldr	r5, [r5, #4]
    32e2:	e7f3      	b.n	32cc <bt_recv+0x518>
	if (dh_key_cb) {
    32e4:	4d9e      	ldr	r5, [pc, #632]	; (3560 <bt_recv+0x7ac>)
    32e6:	68a0      	ldr	r0, [r4, #8]
    32e8:	682a      	ldr	r2, [r5, #0]
    32ea:	2a00      	cmp	r2, #0
    32ec:	f43f ad7b 	beq.w	2de6 <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    32f0:	7803      	ldrb	r3, [r0, #0]
    32f2:	b923      	cbnz	r3, 32fe <bt_recv+0x54a>
    32f4:	3001      	adds	r0, #1
    32f6:	4790      	blx	r2
		dh_key_cb = NULL;
    32f8:	2300      	movs	r3, #0
    32fa:	602b      	str	r3, [r5, #0]
    32fc:	e573      	b.n	2de6 <bt_recv+0x32>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    32fe:	2000      	movs	r0, #0
    3300:	e7f9      	b.n	32f6 <bt_recv+0x542>
	u8_t num_reports = net_buf_pull_u8(buf);
    3302:	4628      	mov	r0, r5
    3304:	f010 f80f 	bl	13326 <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    3308:	f8df a268 	ldr.w	sl, [pc, #616]	; 3574 <bt_recv+0x7c0>
	u8_t num_reports = net_buf_pull_u8(buf);
    330c:	9002      	str	r0, [sp, #8]
	while (num_reports--) {
    330e:	9b02      	ldr	r3, [sp, #8]
    3310:	2b00      	cmp	r3, #0
    3312:	f43f ad68 	beq.w	2de6 <bt_recv+0x32>
		info = (void *)buf->data;
    3316:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3318:	2109      	movs	r1, #9
    331a:	4628      	mov	r0, r5
    331c:	f00f fffb 	bl	13316 <net_buf_simple_pull>
		rssi = info->data[info->length];
    3320:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3322:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    3324:	4433      	add	r3, r6
    3326:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    332a:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    332e:	3b02      	subs	r3, #2
    3330:	2b01      	cmp	r3, #1
    3332:	d83c      	bhi.n	33ae <bt_recv+0x5fa>
			bt_addr_le_copy(&id_addr, &info->addr);
    3334:	4641      	mov	r1, r8
    3336:	a808      	add	r0, sp, #32
    3338:	f7fe fc9c 	bl	1c74 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    333c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    3340:	3b02      	subs	r3, #2
    3342:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    3346:	f8da 3000 	ldr.w	r3, [sl]
    334a:	b1c3      	cbz	r3, 337e <bt_recv+0x5ca>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    334c:	4628      	mov	r0, r5
    334e:	f00f fffa 	bl	13346 <net_buf_simple_headroom>
			buf->len = info->length;
    3352:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    3354:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    3358:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    335a:	7832      	ldrb	r2, [r6, #0]
    335c:	9400      	str	r4, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    335e:	9003      	str	r0, [sp, #12]
    3360:	462b      	mov	r3, r5
    3362:	fa4f f18b 	sxtb.w	r1, fp
    3366:	a808      	add	r0, sp, #32
    3368:	f8da 7000 	ldr.w	r7, [sl]
    336c:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    336e:	6923      	ldr	r3, [r4, #16]
    3370:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	buf->len = state->len;
    3374:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    3378:	fa13 f382 	uxtah	r3, r3, r2
    337c:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    337e:	2108      	movs	r1, #8
    3380:	4874      	ldr	r0, [pc, #464]	; (3554 <bt_recv+0x7a0>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    3382:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3384:	f7fe fc8a 	bl	1c9c <atomic_test_bit>
    3388:	b928      	cbnz	r0, 3396 <bt_recv+0x5e2>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    338a:	2f01      	cmp	r7, #1
    338c:	d803      	bhi.n	3396 <bt_recv+0x5e2>
    338e:	4641      	mov	r1, r8
    3390:	a808      	add	r0, sp, #32
    3392:	f7ff f831 	bl	23f8 <check_pending_conn.part.29>
		net_buf_pull(buf, info->length + sizeof(rssi));
    3396:	7a31      	ldrb	r1, [r6, #8]
    3398:	4628      	mov	r0, r5
    339a:	3101      	adds	r1, #1
    339c:	f00f ffbb 	bl	13316 <net_buf_simple_pull>
    33a0:	9b02      	ldr	r3, [sp, #8]
    33a2:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    33a6:	fa5f f389 	uxtb.w	r3, r9
    33aa:	9302      	str	r3, [sp, #8]
    33ac:	e7af      	b.n	330e <bt_recv+0x55a>
		keys = bt_keys_find_irk(addr);
    33ae:	4640      	mov	r0, r8
    33b0:	f004 f97c 	bl	76ac <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    33b4:	2800      	cmp	r0, #0
    33b6:	bf14      	ite	ne
    33b8:	4601      	movne	r1, r0
    33ba:	4641      	moveq	r1, r8
    33bc:	a808      	add	r0, sp, #32
    33be:	f7fe fc59 	bl	1c74 <bt_addr_le_copy>
    33c2:	e7c0      	b.n	3346 <bt_recv+0x592>
	num_reports = net_buf_pull_u8(buf);
    33c4:	4628      	mov	r0, r5
    33c6:	f00f ffae 	bl	13326 <net_buf_simple_pull_u8>
    33ca:	4b66      	ldr	r3, [pc, #408]	; (3564 <bt_recv+0x7b0>)
		if (scan_dev_found_cb) {
    33cc:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 3574 <bt_recv+0x7c0>
				pointer_index = 0;
    33d0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 3578 <bt_recv+0x7c4>
	num_reports = net_buf_pull_u8(buf);
    33d4:	7018      	strb	r0, [r3, #0]
    33d6:	9302      	str	r3, [sp, #8]
	while (num_reports--) {
    33d8:	9b02      	ldr	r3, [sp, #8]
    33da:	9902      	ldr	r1, [sp, #8]
    33dc:	781b      	ldrb	r3, [r3, #0]
    33de:	1e5a      	subs	r2, r3, #1
    33e0:	700a      	strb	r2, [r1, #0]
    33e2:	2b00      	cmp	r3, #0
    33e4:	f43f acff 	beq.w	2de6 <bt_recv+0x32>
		info = (void *)buf->data;
    33e8:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    33ea:	2118      	movs	r1, #24
    33ec:	4628      	mov	r0, r5
    33ee:	f00f ff92 	bl	13316 <net_buf_simple_pull>
		net_buf_pull(buf, 2);   // remove 0x81 0xFF 
    33f2:	2102      	movs	r1, #2
    33f4:	4628      	mov	r0, r5
    33f6:	f00f ff8e 	bl	13316 <net_buf_simple_pull>
		rssi = info->data[info->length - 2];
    33fa:	7df3      	ldrb	r3, [r6, #23]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    33fc:	46b1      	mov	r9, r6
		rssi = info->data[info->length - 2];
    33fe:	4433      	add	r3, r6
    3400:	f893 a016 	ldrb.w	sl, [r3, #22]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3404:	f819 3f02 	ldrb.w	r3, [r9, #2]!
    3408:	3b02      	subs	r3, #2
    340a:	2b01      	cmp	r3, #1
    340c:	d831      	bhi.n	3472 <bt_recv+0x6be>
			bt_addr_le_copy(&id_addr, &info->addr);
    340e:	4649      	mov	r1, r9
    3410:	a808      	add	r0, sp, #32
    3412:	f7fe fc2f 	bl	1c74 <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3416:	f89d 3020 	ldrb.w	r3, [sp, #32]
    341a:	3b02      	subs	r3, #2
    341c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    3420:	f8db 3000 	ldr.w	r3, [fp]
		buf->len = info->length;
    3424:	7df2      	ldrb	r2, [r6, #23]
    3426:	81a2      	strh	r2, [r4, #12]
		if (scan_dev_found_cb) {
    3428:	b1ab      	cbz	r3, 3456 <bt_recv+0x6a2>
			if(info->frag == 0x01){  //First fragment - more packets to come;
    342a:	7873      	ldrb	r3, [r6, #1]
    342c:	2b01      	cmp	r3, #1
    342e:	d12b      	bne.n	3488 <bt_recv+0x6d4>
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    3430:	4b4d      	ldr	r3, [pc, #308]	; (3568 <bt_recv+0x7b4>)
    3432:	f8b8 0000 	ldrh.w	r0, [r8]
    3436:	68a1      	ldr	r1, [r4, #8]
    3438:	4418      	add	r0, r3
    343a:	f7fd f8d1 	bl	5e0 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    343e:	89a2      	ldrh	r2, [r4, #12]
    3440:	68a1      	ldr	r1, [r4, #8]
    3442:	484a      	ldr	r0, [pc, #296]	; (356c <bt_recv+0x7b8>)
    3444:	f7fd f8cc 	bl	5e0 <memcpy>
				pointer_index += (buf->b.len - 2);
    3448:	f8b8 3000 	ldrh.w	r3, [r8]
    344c:	89a2      	ldrh	r2, [r4, #12]
    344e:	3b02      	subs	r3, #2
    3450:	4413      	add	r3, r2
    3452:	f8a8 3000 	strh.w	r3, [r8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    3456:	2108      	movs	r1, #8
    3458:	483e      	ldr	r0, [pc, #248]	; (3554 <bt_recv+0x7a0>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    345a:	7836      	ldrb	r6, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    345c:	f7fe fc1e 	bl	1c9c <atomic_test_bit>
    3460:	2800      	cmp	r0, #0
    3462:	d1b9      	bne.n	33d8 <bt_recv+0x624>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    3464:	2e01      	cmp	r6, #1
    3466:	d8b7      	bhi.n	33d8 <bt_recv+0x624>
    3468:	4649      	mov	r1, r9
    346a:	a808      	add	r0, sp, #32
    346c:	f7fe ffc4 	bl	23f8 <check_pending_conn.part.29>
    3470:	e7b2      	b.n	33d8 <bt_recv+0x624>
		keys = bt_keys_find_irk(addr);
    3472:	4648      	mov	r0, r9
    3474:	f004 f91a 	bl	76ac <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    3478:	2800      	cmp	r0, #0
    347a:	bf14      	ite	ne
    347c:	4601      	movne	r1, r0
    347e:	4649      	moveq	r1, r9
    3480:	a808      	add	r0, sp, #32
    3482:	f7fe fbf7 	bl	1c74 <bt_addr_le_copy>
    3486:	e7cb      	b.n	3420 <bt_recv+0x66c>
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    3488:	2b02      	cmp	r3, #2
		rssi = info->data[info->length - 2];
    348a:	fa4f fa8a 	sxtb.w	sl, sl
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    348e:	d127      	bne.n	34e0 <bt_recv+0x72c>
				memcpy(&copied_data[pointer_index], buf->b.data , buf->b.len);
    3490:	4b35      	ldr	r3, [pc, #212]	; (3568 <bt_recv+0x7b4>)
    3492:	f8b8 0000 	ldrh.w	r0, [r8]
    3496:	68a1      	ldr	r1, [r4, #8]
    3498:	4418      	add	r0, r3
    349a:	f7fd f8a1 	bl	5e0 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    349e:	89a2      	ldrh	r2, [r4, #12]
    34a0:	68a1      	ldr	r1, [r4, #8]
    34a2:	4832      	ldr	r0, [pc, #200]	; (356c <bt_recv+0x7b8>)
    34a4:	f7fd f89c 	bl	5e0 <memcpy>
				pointer_index += (buf->b.len - 2);
    34a8:	f8b8 2000 	ldrh.w	r2, [r8]
    34ac:	89a3      	ldrh	r3, [r4, #12]
				buffer_size1 = (buf->b.len - 2);
    34ae:	4930      	ldr	r1, [pc, #192]	; (3570 <bt_recv+0x7bc>)
				pointer_index += (buf->b.len - 2);
    34b0:	3a02      	subs	r2, #2
    34b2:	441a      	add	r2, r3
				buffer_size1 = (buf->b.len - 2);
    34b4:	3b02      	subs	r3, #2
				pointer_index += (buf->b.len - 2);
    34b6:	b292      	uxth	r2, r2
				buffer_size1 = (buf->b.len - 2);
    34b8:	800b      	strh	r3, [r1, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    34ba:	4628      	mov	r0, r5
    34bc:	492a      	ldr	r1, [pc, #168]	; (3568 <bt_recv+0x7b4>)
				pointer_index += (buf->b.len - 2);
    34be:	f8a8 2000 	strh.w	r2, [r8]
				net_buf_add_mem(buf, copied_data, pointer_index);
    34c2:	f00f ff0f 	bl	132e4 <net_buf_simple_add_mem>
				net_buf_pull(buf, info->length);
    34c6:	7df1      	ldrb	r1, [r6, #23]
    34c8:	4628      	mov	r0, r5
    34ca:	f00f ff24 	bl	13316 <net_buf_simple_pull>
				scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    34ce:	7832      	ldrb	r2, [r6, #0]
    34d0:	9400      	str	r4, [sp, #0]
    34d2:	462b      	mov	r3, r5
    34d4:	4651      	mov	r1, sl
    34d6:	a808      	add	r0, sp, #32
    34d8:	f8db 7000 	ldr.w	r7, [fp]
    34dc:	47b8      	blx	r7
    34de:	e7ba      	b.n	3456 <bt_recv+0x6a2>
			else if(info->frag == 0x03){        // packet received on primary adv channel
    34e0:	2b03      	cmp	r3, #3
    34e2:	d1b8      	bne.n	3456 <bt_recv+0x6a2>
				pointer_index = 0;
    34e4:	2100      	movs	r1, #0
				memset(copied_data, 0, 1500);
    34e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
    34ea:	481f      	ldr	r0, [pc, #124]	; (3568 <bt_recv+0x7b4>)
				pointer_index = 0;
    34ec:	f8a8 1000 	strh.w	r1, [r8]
				memset(copied_data, 0, 1500);
    34f0:	f7fd f8a2 	bl	638 <memset>
    34f4:	e7eb      	b.n	34ce <bt_recv+0x71a>
		net_buf_unref(buf);
    34f6:	f00f febd 	bl	13274 <net_buf_unref>
		return -EINVAL;
    34fa:	f06f 0015 	mvn.w	r0, #21
    34fe:	e488      	b.n	2e12 <bt_recv+0x5e>
	net_buf_pull(buf, sizeof(*hdr));
    3500:	f104 0508 	add.w	r5, r4, #8
    3504:	2102      	movs	r1, #2
    3506:	4628      	mov	r0, r5
    3508:	f00f ff05 	bl	13316 <net_buf_simple_pull>
	switch (hdr->evt) {
    350c:	7833      	ldrb	r3, [r6, #0]
    350e:	2b08      	cmp	r3, #8
    3510:	f43f acb1 	beq.w	2e76 <bt_recv+0xc2>
    3514:	d832      	bhi.n	357c <bt_recv+0x7c8>
    3516:	2b05      	cmp	r3, #5
    3518:	f47f ac65 	bne.w	2de6 <bt_recv+0x32>
    351c:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    351e:	783e      	ldrb	r6, [r7, #0]
    3520:	2e00      	cmp	r6, #0
    3522:	f47f ac60 	bne.w	2de6 <bt_recv+0x32>
	conn = bt_conn_lookup_handle(handle);
    3526:	f8b7 0001 	ldrh.w	r0, [r7, #1]
    352a:	f000 fd79 	bl	4020 <bt_conn_lookup_handle>
	if (!conn) {
    352e:	4605      	mov	r5, r0
    3530:	2800      	cmp	r0, #0
    3532:	f43f ac90 	beq.w	2e56 <bt_recv+0xa2>
	conn->err = evt->reason;
    3536:	78fb      	ldrb	r3, [r7, #3]
    3538:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    353a:	f00f ff7b 	bl	13434 <k_call_stacks_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    353e:	4631      	mov	r1, r6
    3540:	4628      	mov	r0, r5
    3542:	f000 fcdf 	bl	3f04 <bt_conn_set_state>
	conn->handle = 0;
    3546:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    3548:	78ae      	ldrb	r6, [r5, #2]
    354a:	2e00      	cmp	r6, #0
    354c:	f43f ac74 	beq.w	2e38 <bt_recv+0x84>
	bt_conn_unref(conn);
    3550:	4628      	mov	r0, r5
    3552:	e599      	b.n	3088 <bt_recv+0x2d4>
    3554:	2000cc10 	.word	0x2000cc10
    3558:	2000012e 	.word	0x2000012e
    355c:	20000170 	.word	0x20000170
    3560:	20000128 	.word	0x20000128
    3564:	20003046 	.word	0x20003046
    3568:	20003168 	.word	0x20003168
    356c:	2000304c 	.word	0x2000304c
    3570:	20000114 	.word	0x20000114
    3574:	20000178 	.word	0x20000178
    3578:	2000012c 	.word	0x2000012c
	switch (hdr->evt) {
    357c:	2b30      	cmp	r3, #48	; 0x30
    357e:	f43f ac96 	beq.w	2eae <bt_recv+0xfa>
    3582:	2b3e      	cmp	r3, #62	; 0x3e
    3584:	f47f ac2f 	bne.w	2de6 <bt_recv+0x32>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    3588:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    358a:	2101      	movs	r1, #1
    358c:	4628      	mov	r0, r5
    358e:	f00f fec2 	bl	13316 <net_buf_simple_pull>
	switch (evt->subevent) {
    3592:	7833      	ldrb	r3, [r6, #0]
    3594:	3b01      	subs	r3, #1
    3596:	2b0c      	cmp	r3, #12
    3598:	f63f ac25 	bhi.w	2de6 <bt_recv+0x32>
    359c:	a201      	add	r2, pc, #4	; (adr r2, 35a4 <bt_recv+0x7f0>)
    359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    35a2:	bf00      	nop
    35a4:	00002ee7 	.word	0x00002ee7
    35a8:	00003303 	.word	0x00003303
    35ac:	00002f87 	.word	0x00002f87
    35b0:	00002fc9 	.word	0x00002fc9
    35b4:	0000314d 	.word	0x0000314d
    35b8:	0000302d 	.word	0x0000302d
    35bc:	000030d7 	.word	0x000030d7
    35c0:	000032a5 	.word	0x000032a5
    35c4:	000032e5 	.word	0x000032e5
    35c8:	00002f83 	.word	0x00002f83
    35cc:	00002de7 	.word	0x00002de7
    35d0:	000030fd 	.word	0x000030fd
    35d4:	000033c5 	.word	0x000033c5
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    35d8:	6f30      	ldr	r0, [r6, #112]	; 0x70
    35da:	e5fa      	b.n	31d2 <bt_recv+0x41e>

000035dc <bt_recv_prio>:
{
    35dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    35e0:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    35e2:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    35e4:	2b01      	cmp	r3, #1
{
    35e6:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    35e8:	d005      	beq.n	35f6 <bt_recv_prio+0x1a>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    35ea:	4040      	eors	r0, r0
    35ec:	f380 8811 	msr	BASEPRI, r0
    35f0:	f04f 0004 	mov.w	r0, #4
    35f4:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    35f6:	8982      	ldrh	r2, [r0, #12]
    35f8:	2a01      	cmp	r2, #1
    35fa:	d9f6      	bls.n	35ea <bt_recv_prio+0xe>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    35fc:	7832      	ldrb	r2, [r6, #0]
    35fe:	2a13      	cmp	r2, #19
    3600:	d8f3      	bhi.n	35ea <bt_recv_prio+0xe>
    3602:	4093      	lsls	r3, r2
    3604:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    3608:	d0ef      	beq.n	35ea <bt_recv_prio+0xe>
	net_buf_pull(buf, sizeof(*hdr));
    360a:	f100 0508 	add.w	r5, r0, #8
    360e:	2102      	movs	r1, #2
    3610:	4628      	mov	r0, r5
    3612:	f00f fe80 	bl	13316 <net_buf_simple_pull>
	switch (hdr->evt) {
    3616:	7833      	ldrb	r3, [r6, #0]
    3618:	2b0f      	cmp	r3, #15
    361a:	d018      	beq.n	364e <bt_recv_prio+0x72>
    361c:	2b13      	cmp	r3, #19
    361e:	d023      	beq.n	3668 <bt_recv_prio+0x8c>
    3620:	2b0e      	cmp	r3, #14
    3622:	d161      	bne.n	36e8 <bt_recv_prio+0x10c>
	u8_t status, ncmd = evt->ncmd;
    3624:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3626:	2103      	movs	r1, #3
    3628:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    362a:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    362c:	f00f fe73 	bl	13316 <net_buf_simple_pull>
	status = buf->data[0];
    3630:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    3632:	4621      	mov	r1, r4
    3634:	7818      	ldrb	r0, [r3, #0]
    3636:	f7fe fb8b 	bl	1d50 <hci_cmd_done.isra.18>
	if (ncmd) {
    363a:	b116      	cbz	r6, 3642 <bt_recv_prio+0x66>
    363c:	482c      	ldr	r0, [pc, #176]	; (36f0 <bt_recv_prio+0x114>)
    363e:	f010 fad3 	bl	13be8 <_impl_k_sem_give>
	net_buf_unref(buf);
    3642:	4620      	mov	r0, r4
    3644:	f00f fe16 	bl	13274 <net_buf_unref>
}
    3648:	2000      	movs	r0, #0
    364a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    364e:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    3650:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    3652:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    3654:	4628      	mov	r0, r5
    3656:	f00f fe5e 	bl	13316 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    365a:	4621      	mov	r1, r4
    365c:	7830      	ldrb	r0, [r6, #0]
    365e:	f7fe fb77 	bl	1d50 <hci_cmd_done.isra.18>
	if (ncmd) {
    3662:	2f00      	cmp	r7, #0
    3664:	d0ed      	beq.n	3642 <bt_recv_prio+0x66>
    3666:	e7e9      	b.n	363c <bt_recv_prio+0x60>
    3668:	f8d4 8008 	ldr.w	r8, [r4, #8]
	for (i = 0; i < evt->num_handles; i++) {
    366c:	2700      	movs	r7, #0
    366e:	f898 3000 	ldrb.w	r3, [r8]
    3672:	429f      	cmp	r7, r3
    3674:	dae5      	bge.n	3642 <bt_recv_prio+0x66>
    3676:	eb08 0387 	add.w	r3, r8, r7, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    367a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    367e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    3682:	f04f 0320 	mov.w	r3, #32
    3686:	f3ef 8911 	mrs	r9, BASEPRI
    368a:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    368e:	f000 fcc7 	bl	4020 <bt_conn_lookup_handle>
		if (!conn) {
    3692:	4605      	mov	r5, r0
    3694:	b918      	cbnz	r0, 369e <bt_recv_prio+0xc2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3696:	f389 8811 	msr	BASEPRI, r9
	for (i = 0; i < evt->num_handles; i++) {
    369a:	3701      	adds	r7, #1
    369c:	e7e7      	b.n	366e <bt_recv_prio+0x92>
    369e:	f389 8811 	msr	BASEPRI, r9
			k_fifo_put(&conn->tx_notify, node);
    36a2:	f100 091c 	add.w	r9, r0, #28
		while (count--) {
    36a6:	b196      	cbz	r6, 36ce <bt_recv_prio+0xf2>
	__asm__ volatile(
    36a8:	f04f 0320 	mov.w	r3, #32
    36ac:	f3ef 8011 	mrs	r0, BASEPRI
    36b0:	f383 8811 	msr	BASEPRI, r3
    36b4:	6969      	ldr	r1, [r5, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    36b6:	b129      	cbz	r1, 36c4 <bt_recv_prio+0xe8>
	if (list->tail == node) {
    36b8:	69aa      	ldr	r2, [r5, #24]
	list->head = node->next;
    36ba:	680b      	ldr	r3, [r1, #0]
    36bc:	616b      	str	r3, [r5, #20]
	if (list->tail == node) {
    36be:	4291      	cmp	r1, r2
		list->tail = list->head;
    36c0:	bf08      	it	eq
    36c2:	61ab      	streq	r3, [r5, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    36c4:	f380 8811 	msr	BASEPRI, r0
    36c8:	3e01      	subs	r6, #1
    36ca:	b2b6      	uxth	r6, r6
			if (!node) {
    36cc:	b919      	cbnz	r1, 36d6 <bt_recv_prio+0xfa>
		bt_conn_unref(conn);
    36ce:	4628      	mov	r0, r5
    36d0:	f000 fd1b 	bl	410a <bt_conn_unref>
    36d4:	e7e1      	b.n	369a <bt_recv_prio+0xbe>
			k_fifo_put(&conn->tx_notify, node);
    36d6:	4648      	mov	r0, r9
    36d8:	f010 f813 	bl	13702 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    36dc:	4628      	mov	r0, r5
    36de:	f000 f9ef 	bl	3ac0 <bt_conn_get_pkts>
    36e2:	f010 fa81 	bl	13be8 <_impl_k_sem_give>
    36e6:	e7de      	b.n	36a6 <bt_recv_prio+0xca>
		net_buf_unref(buf);
    36e8:	4620      	mov	r0, r4
    36ea:	f00f fdc3 	bl	13274 <net_buf_unref>
    36ee:	e77c      	b.n	35ea <bt_recv_prio+0xe>
    36f0:	2000cc48 	.word	0x2000cc48

000036f4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    36f4:	4a08      	ldr	r2, [pc, #32]	; (3718 <bt_hci_driver_register+0x24>)
    36f6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    36fa:	b93b      	cbnz	r3, 370c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    36fc:	6881      	ldr	r1, [r0, #8]
    36fe:	b141      	cbz	r1, 3712 <bt_hci_driver_register+0x1e>
    3700:	68c1      	ldr	r1, [r0, #12]
    3702:	b131      	cbz	r1, 3712 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    3704:	f8c2 00e4 	str.w	r0, [r2, #228]	; 0xe4
	return 0;
    3708:	4618      	mov	r0, r3
    370a:	4770      	bx	lr
		return -EALREADY;
    370c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3710:	4770      	bx	lr
		return -EINVAL;
    3712:	f06f 0015 	mvn.w	r0, #21
}
    3716:	4770      	bx	lr
    3718:	2000cba0 	.word	0x2000cba0

0000371c <bt_enable>:
{
    371c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    371e:	4c20      	ldr	r4, [pc, #128]	; (37a0 <bt_enable+0x84>)
    3720:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
{
    3724:	b086      	sub	sp, #24
    3726:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3728:	2b00      	cmp	r3, #0
    372a:	d033      	beq.n	3794 <bt_enable+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    372c:	2101      	movs	r1, #1
    372e:	f104 0070 	add.w	r0, r4, #112	; 0x70
    3732:	f7fe faa2 	bl	1c7a <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3736:	f010 0001 	ands.w	r0, r0, #1
    373a:	d12e      	bne.n	379a <bt_enable+0x7e>
	ready_cb = cb;
    373c:	4b19      	ldr	r3, [pc, #100]	; (37a4 <bt_enable+0x88>)

    373e:	491a      	ldr	r1, [pc, #104]	; (37a8 <bt_enable+0x8c>)
    3740:	601e      	str	r6, [r3, #0]
    3742:	f06f 0308 	mvn.w	r3, #8
    3746:	9005      	str	r0, [sp, #20]
    3748:	9004      	str	r0, [sp, #16]
    374a:	9303      	str	r3, [sp, #12]
    374c:	9002      	str	r0, [sp, #8]
    374e:	9001      	str	r0, [sp, #4]
    3750:	9000      	str	r0, [sp, #0]
    3752:	4b16      	ldr	r3, [pc, #88]	; (37ac <bt_enable+0x90>)
    3754:	4816      	ldr	r0, [pc, #88]	; (37b0 <bt_enable+0x94>)
    3756:	f44f 7220 	mov.w	r2, #640	; 0x280
    375a:	f010 fc81 	bl	14060 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    375e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    3762:	689b      	ldr	r3, [r3, #8]
    3764:	4798      	blx	r3
	if (err) {
    3766:	4605      	mov	r5, r0
    3768:	b988      	cbnz	r0, 378e <bt_enable+0x72>
	if (!cb) {
    376a:	b926      	cbnz	r6, 3776 <bt_enable+0x5a>
}
    376c:	b006      	add	sp, #24
    376e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    3772:	f7fe bec9 	b.w	2508 <bt_init>
    3776:	2101      	movs	r1, #1
    3778:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    377c:	f7fe fa7d 	bl	1c7a <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    3780:	07c3      	lsls	r3, r0, #31
    3782:	d404      	bmi.n	378e <bt_enable+0x72>
		k_queue_append(&work_q->queue, work);
    3784:	f104 0164 	add.w	r1, r4, #100	; 0x64
    3788:	480a      	ldr	r0, [pc, #40]	; (37b4 <bt_enable+0x98>)
    378a:	f00f ffba 	bl	13702 <k_queue_append>
}
    378e:	4628      	mov	r0, r5
    3790:	b006      	add	sp, #24
    3792:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    3794:	f06f 0512 	mvn.w	r5, #18
    3798:	e7f9      	b.n	378e <bt_enable+0x72>
		return -EALREADY;
    379a:	f06f 0544 	mvn.w	r5, #68	; 0x44
    379e:	e7f6      	b.n	378e <bt_enable+0x72>
    37a0:	2000cba0 	.word	0x2000cba0
    37a4:	20000174 	.word	0x20000174
    37a8:	200041d8 	.word	0x200041d8
    37ac:	00002cc5 	.word	0x00002cc5
    37b0:	2000017c 	.word	0x2000017c
    37b4:	20004160 	.word	0x20004160

000037b8 <bt_addr_le_is_bonded>:
{
    37b8:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    37ba:	f003 ffab 	bl	7714 <bt_keys_find_addr>
		return keys && keys->keys;
    37be:	b118      	cbz	r0, 37c8 <bt_addr_le_is_bonded+0x10>
    37c0:	8980      	ldrh	r0, [r0, #12]
    37c2:	3000      	adds	r0, #0
    37c4:	bf18      	it	ne
    37c6:	2001      	movne	r0, #1
}
    37c8:	bd08      	pop	{r3, pc}
	...

000037cc <bt_le_adv_start>:
//#endif /*CONFIG_EXT_ADV*/

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    37cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    37ce:	b085      	sub	sp, #20
    37d0:	4605      	mov	r5, r0
    37d2:	460c      	mov	r4, r1
    37d4:	4617      	mov	r7, r2
    37d6:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    37d8:	f7fe fa32 	bl	1c40 <valid_adv_param>
    37dc:	b920      	cbnz	r0, 37e8 <bt_le_adv_start+0x1c>
		return -EINVAL;
    37de:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    37e2:	4620      	mov	r0, r4
    37e4:	b005      	add	sp, #20
    37e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    37e8:	2105      	movs	r1, #5
    37ea:	483e      	ldr	r0, [pc, #248]	; (38e4 <bt_le_adv_start+0x118>)
    37ec:	f7fe fa56 	bl	1c9c <atomic_test_bit>
    37f0:	2800      	cmp	r0, #0
    37f2:	d171      	bne.n	38d8 <bt_le_adv_start+0x10c>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    37f4:	4621      	mov	r1, r4
    37f6:	463a      	mov	r2, r7
    37f8:	f242 0008 	movw	r0, #8200	; 0x2008
    37fc:	f7fe fc32 	bl	2064 <set_ad>
	if (err) {
    3800:	4604      	mov	r4, r0
    3802:	2800      	cmp	r0, #0
    3804:	d1ed      	bne.n	37e2 <bt_le_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3806:	2e00      	cmp	r6, #0
    3808:	d146      	bne.n	3898 <bt_le_adv_start+0xcc>
    380a:	782b      	ldrb	r3, [r5, #0]
    380c:	07d9      	lsls	r1, r3, #31
    380e:	d443      	bmi.n	3898 <bt_le_adv_start+0xcc>
	memset(&set_param, 0, sizeof(set_param));
    3810:	220f      	movs	r2, #15
    3812:	2100      	movs	r1, #0
    3814:	4668      	mov	r0, sp
    3816:	f7fc ff0f 	bl	638 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    381a:	886b      	ldrh	r3, [r5, #2]
    381c:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    3820:	88ab      	ldrh	r3, [r5, #4]
    3822:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    3826:	2307      	movs	r3, #7
    3828:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    382c:	782b      	ldrb	r3, [r5, #0]
    382e:	07da      	lsls	r2, r3, #31
    3830:	d53c      	bpl.n	38ac <bt_le_adv_start+0xe0>
			if (atomic_test_bit(bt_dev.flags,
    3832:	2102      	movs	r1, #2
    3834:	482b      	ldr	r0, [pc, #172]	; (38e4 <bt_le_adv_start+0x118>)
    3836:	4c2c      	ldr	r4, [pc, #176]	; (38e8 <bt_le_adv_start+0x11c>)
    3838:	f7fe fa30 	bl	1c9c <atomic_test_bit>
    383c:	b110      	cbz	r0, 3844 <bt_le_adv_start+0x78>
				set_random_address(&bt_dev.id_addr.a);
    383e:	1c60      	adds	r0, r4, #1
    3840:	f7fe fb2e 	bl	1ea0 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    3844:	7823      	ldrb	r3, [r4, #0]
    3846:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
    384a:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    384c:	210f      	movs	r1, #15
    384e:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    3852:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    3856:	f7fe fab5 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    385a:	4604      	mov	r4, r0
    385c:	2800      	cmp	r0, #0
    385e:	d03e      	beq.n	38de <bt_le_adv_start+0x112>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    3860:	220f      	movs	r2, #15
    3862:	4669      	mov	r1, sp
    3864:	3008      	adds	r0, #8
    3866:	f00f fd3d 	bl	132e4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    386a:	4621      	mov	r1, r4
    386c:	2200      	movs	r2, #0
    386e:	f242 0006 	movw	r0, #8198	; 0x2006
    3872:	f7fe fad7 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    3876:	4604      	mov	r4, r0
    3878:	2800      	cmp	r0, #0
    387a:	d1b2      	bne.n	37e2 <bt_le_adv_start+0x16>
	err = set_advertise_enable(true);
    387c:	2001      	movs	r0, #1
    387e:	f7fe fbc7 	bl	2010 <set_advertise_enable>
	if (err) {
    3882:	4604      	mov	r4, r0
    3884:	2800      	cmp	r0, #0
    3886:	d1ac      	bne.n	37e2 <bt_le_adv_start+0x16>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    3888:	782b      	ldrb	r3, [r5, #0]
    388a:	079b      	lsls	r3, r3, #30
    388c:	d4a9      	bmi.n	37e2 <bt_le_adv_start+0x16>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    388e:	2140      	movs	r1, #64	; 0x40
    3890:	4814      	ldr	r0, [pc, #80]	; (38e4 <bt_le_adv_start+0x118>)
    3892:	f7fe f9f2 	bl	1c7a <atomic_or>
    3896:	e7a4      	b.n	37e2 <bt_le_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    3898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    389a:	4631      	mov	r1, r6
    389c:	f242 0009 	movw	r0, #8201	; 0x2009
    38a0:	f7fe fbe0 	bl	2064 <set_ad>
		if (err) {
    38a4:	4604      	mov	r4, r0
    38a6:	2800      	cmp	r0, #0
    38a8:	d0b2      	beq.n	3810 <bt_le_adv_start+0x44>
    38aa:	e79a      	b.n	37e2 <bt_le_adv_start+0x16>
		if (param->own_addr) {
    38ac:	68a8      	ldr	r0, [r5, #8]
    38ae:	b170      	cbz	r0, 38ce <bt_le_adv_start+0x102>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    38b0:	7943      	ldrb	r3, [r0, #5]
    38b2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    38b6:	d192      	bne.n	37de <bt_le_adv_start+0x12>
			err = set_random_address(param->own_addr);
    38b8:	f7fe faf2 	bl	1ea0 <set_random_address>
			err = le_set_private_addr();
    38bc:	4604      	mov	r4, r0
		if (err) {
    38be:	2800      	cmp	r0, #0
    38c0:	d18f      	bne.n	37e2 <bt_le_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    38c2:	2301      	movs	r3, #1
    38c4:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
    38c8:	b126      	cbz	r6, 38d4 <bt_le_adv_start+0x108>
			set_param.type = BT_LE_ADV_SCAN_IND;
    38ca:	2302      	movs	r3, #2
    38cc:	e7be      	b.n	384c <bt_le_adv_start+0x80>
			err = le_set_private_addr();
    38ce:	f7fe fb15 	bl	1efc <le_set_private_addr>
    38d2:	e7f3      	b.n	38bc <bt_le_adv_start+0xf0>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    38d4:	2303      	movs	r3, #3
    38d6:	e7b9      	b.n	384c <bt_le_adv_start+0x80>
		return -EALREADY;
    38d8:	f06f 0444 	mvn.w	r4, #68	; 0x44
    38dc:	e781      	b.n	37e2 <bt_le_adv_start+0x16>
		return -ENOBUFS;
    38de:	f06f 0436 	mvn.w	r4, #54	; 0x36
    38e2:	e77e      	b.n	37e2 <bt_le_adv_start+0x16>
    38e4:	2000cc10 	.word	0x2000cc10
    38e8:	2000cba0 	.word	0x2000cba0

000038ec <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    38ec:	b538      	push	{r3, r4, r5, lr}
    38ee:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    38f0:	4805      	ldr	r0, [pc, #20]	; (3908 <bt_buf_get_rx+0x1c>)
    38f2:	f00f fc8f 	bl	13214 <net_buf_alloc_fixed>
#endif

	if (buf) {
    38f6:	4604      	mov	r4, r0
    38f8:	b120      	cbz	r0, 3904 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    38fa:	2100      	movs	r1, #0
    38fc:	3008      	adds	r0, #8
    38fe:	f00f fca8 	bl	13252 <net_buf_simple_reserve>
    3902:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3904:	4620      	mov	r0, r4
    3906:	bd38      	pop	{r3, r4, r5, pc}
    3908:	2000d10c 	.word	0x2000d10c

0000390c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    390c:	b510      	push	{r4, lr}
    390e:	4601      	mov	r1, r0
	__asm__ volatile(
    3910:	f04f 0320 	mov.w	r3, #32
    3914:	f3ef 8011 	mrs	r0, BASEPRI
    3918:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    391c:	4a0b      	ldr	r2, [pc, #44]	; (394c <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    391e:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    3920:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    3924:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3928:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    392c:	b924      	cbnz	r4, 3938 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    392e:	2001      	movs	r0, #1
}
    3930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3934:	f7ff bfda 	b.w	38ec <bt_buf_get_rx>
    3938:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    393a:	f104 0008 	add.w	r0, r4, #8
    393e:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    3940:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3942:	4619      	mov	r1, r3
    3944:	f00f fc85 	bl	13252 <net_buf_simple_reserve>
}
    3948:	4620      	mov	r0, r4
    394a:	bd10      	pop	{r4, pc}
    394c:	2000cba0 	.word	0x2000cba0

00003950 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    3950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    3954:	4e1d      	ldr	r6, [pc, #116]	; (39cc <bt_pub_key_gen+0x7c>)
    3956:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    395a:	f003 0306 	and.w	r3, r3, #6
    395e:	2b06      	cmp	r3, #6
{
    3960:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    3962:	d130      	bne.n	39c6 <bt_pub_key_gen+0x76>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    3964:	4d1a      	ldr	r5, [pc, #104]	; (39d0 <bt_pub_key_gen+0x80>)
    3966:	682b      	ldr	r3, [r5, #0]
    3968:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    396a:	6028      	str	r0, [r5, #0]
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    396c:	2110      	movs	r1, #16
    396e:	f106 0070 	add.w	r0, r6, #112	; 0x70
    3972:	f7fe f982 	bl	1c7a <atomic_or>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    3976:	f010 0810 	ands.w	r8, r0, #16
    397a:	d003      	beq.n	3984 <bt_pub_key_gen+0x34>
		return 0;
    397c:	2400      	movs	r4, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    397e:	4620      	mov	r0, r4
    3980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3984:	f06f 0108 	mvn.w	r1, #8
    3988:	f106 0070 	add.w	r0, r6, #112	; 0x70
    398c:	f7fe f993 	bl	1cb6 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    3990:	4642      	mov	r2, r8
    3992:	4641      	mov	r1, r8
    3994:	f242 0025 	movw	r0, #8229	; 0x2025
    3998:	f7fe fa44 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    399c:	4604      	mov	r4, r0
    399e:	b140      	cbz	r0, 39b2 <bt_pub_key_gen+0x62>
    39a0:	f06f 0110 	mvn.w	r1, #16
    39a4:	f106 0070 	add.w	r0, r6, #112	; 0x70
    39a8:	f7fe f985 	bl	1cb6 <atomic_and>
		pub_key_cb = NULL;
    39ac:	f8c5 8000 	str.w	r8, [r5]
		return err;
    39b0:	e7e5      	b.n	397e <bt_pub_key_gen+0x2e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    39b2:	682c      	ldr	r4, [r5, #0]
    39b4:	2c00      	cmp	r4, #0
    39b6:	d0e1      	beq.n	397c <bt_pub_key_gen+0x2c>
		if (cb != new_cb) {
    39b8:	42bc      	cmp	r4, r7
    39ba:	d002      	beq.n	39c2 <bt_pub_key_gen+0x72>
			cb->func(NULL);
    39bc:	6823      	ldr	r3, [r4, #0]
    39be:	2000      	movs	r0, #0
    39c0:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    39c2:	6864      	ldr	r4, [r4, #4]
    39c4:	e7f6      	b.n	39b4 <bt_pub_key_gen+0x64>
		return -ENOTSUP;
    39c6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    39ca:	e7d8      	b.n	397e <bt_pub_key_gen+0x2e>
    39cc:	2000cba0 	.word	0x2000cba0
    39d0:	20000170 	.word	0x20000170

000039d4 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    39d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    39d6:	4c1a      	ldr	r4, [pc, #104]	; (3a40 <bt_dh_key_gen+0x6c>)
    39d8:	6823      	ldr	r3, [r4, #0]
{
    39da:	4607      	mov	r7, r0
    39dc:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    39de:	b113      	cbz	r3, 39e6 <bt_dh_key_gen+0x12>
		return -EBUSY;
    39e0:	f06f 000f 	mvn.w	r0, #15
    39e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    39e6:	2104      	movs	r1, #4
    39e8:	4816      	ldr	r0, [pc, #88]	; (3a44 <bt_dh_key_gen+0x70>)
    39ea:	f7fe f957 	bl	1c9c <atomic_test_bit>
    39ee:	4606      	mov	r6, r0
    39f0:	2800      	cmp	r0, #0
    39f2:	d1f5      	bne.n	39e0 <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    39f4:	2103      	movs	r1, #3
    39f6:	4813      	ldr	r0, [pc, #76]	; (3a44 <bt_dh_key_gen+0x70>)
    39f8:	f7fe f950 	bl	1c9c <atomic_test_bit>
    39fc:	b1e0      	cbz	r0, 3a38 <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    39fe:	2140      	movs	r1, #64	; 0x40
    3a00:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    3a04:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    3a06:	f7fe f9dd 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    3a0a:	4605      	mov	r5, r0
    3a0c:	b918      	cbnz	r0, 3a16 <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    3a0e:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    3a10:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
    3a16:	2140      	movs	r1, #64	; 0x40
    3a18:	3008      	adds	r0, #8
    3a1a:	f00f fc5d 	bl	132d8 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    3a1e:	2240      	movs	r2, #64	; 0x40
    3a20:	4639      	mov	r1, r7
    3a22:	f7fc fddd 	bl	5e0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    3a26:	4632      	mov	r2, r6
    3a28:	4629      	mov	r1, r5
    3a2a:	f242 0026 	movw	r0, #8230	; 0x2026
    3a2e:	f7fe f9f9 	bl	1e24 <bt_hci_cmd_send_sync>
	if (err) {
    3a32:	b118      	cbz	r0, 3a3c <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
    3a34:	6026      	str	r6, [r4, #0]
		return err;
    3a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
    3a38:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
    3a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a3e:	bf00      	nop
    3a40:	20000128 	.word	0x20000128
    3a44:	2000cc10 	.word	0x2000cc10

00003a48 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    3a48:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    3a4a:	4b06      	ldr	r3, [pc, #24]	; (3a64 <notify_connected+0x1c>)
    3a4c:	681c      	ldr	r4, [r3, #0]
{
    3a4e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3a50:	b904      	cbnz	r4, 3a54 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    3a52:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    3a54:	6823      	ldr	r3, [r4, #0]
    3a56:	b113      	cbz	r3, 3a5e <notify_connected+0x16>
			cb->connected(conn, conn->err);
    3a58:	7ae9      	ldrb	r1, [r5, #11]
    3a5a:	4628      	mov	r0, r5
    3a5c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3a5e:	69a4      	ldr	r4, [r4, #24]
    3a60:	e7f6      	b.n	3a50 <notify_connected+0x8>
    3a62:	bf00      	nop
    3a64:	200001e4 	.word	0x200001e4

00003a68 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3a68:	f3bf 8f5b 	dmb	ish
    3a6c:	6800      	ldr	r0, [r0, #0]
    3a6e:	f3bf 8f5b 	dmb	ish
}
    3a72:	4770      	bx	lr

00003a74 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    3a74:	89c3      	ldrh	r3, [r0, #14]
{
    3a76:	b510      	push	{r4, lr}
    3a78:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    3a7a:	b12b      	cbz	r3, 3a88 <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    3a7c:	6900      	ldr	r0, [r0, #16]
    3a7e:	f00f fbf9 	bl	13274 <net_buf_unref>
	conn->rx = NULL;
    3a82:	2300      	movs	r3, #0
    3a84:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    3a86:	81e3      	strh	r3, [r4, #14]
    3a88:	bd10      	pop	{r4, pc}

00003a8a <atomic_dec>:
}
    3a8a:	f3bf 8f5b 	dmb	ish
    3a8e:	e850 3f00 	ldrex	r3, [r0]
    3a92:	1e5a      	subs	r2, r3, #1
    3a94:	e840 2100 	strex	r1, r2, [r0]
    3a98:	2900      	cmp	r1, #0
    3a9a:	d1f8      	bne.n	3a8e <atomic_dec+0x4>
    3a9c:	f3bf 8f5b 	dmb	ish
    3aa0:	4618      	mov	r0, r3
    3aa2:	4770      	bx	lr

00003aa4 <atomic_inc>:
}
    3aa4:	f3bf 8f5b 	dmb	ish
    3aa8:	e850 3f00 	ldrex	r3, [r0]
    3aac:	1c5a      	adds	r2, r3, #1
    3aae:	e840 2100 	strex	r1, r2, [r0]
    3ab2:	2900      	cmp	r1, #0
    3ab4:	d1f8      	bne.n	3aa8 <atomic_inc+0x4>
    3ab6:	f3bf 8f5b 	dmb	ish
    3aba:	4618      	mov	r0, r3
    3abc:	4770      	bx	lr
	...

00003ac0 <bt_conn_get_pkts>:
}
    3ac0:	4800      	ldr	r0, [pc, #0]	; (3ac4 <bt_conn_get_pkts+0x4>)
    3ac2:	4770      	bx	lr
    3ac4:	2000cc2c 	.word	0x2000cc2c

00003ac8 <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    3ac8:	4b08      	ldr	r3, [pc, #32]	; (3aec <notify_le_param_updated+0x24>)
{
    3aca:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3acc:	681c      	ldr	r4, [r3, #0]
{
    3ace:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3ad0:	b904      	cbnz	r4, 3ad4 <notify_le_param_updated+0xc>
}
    3ad2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    3ad4:	68e6      	ldr	r6, [r4, #12]
    3ad6:	b13e      	cbz	r6, 3ae8 <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    3ad8:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    3adc:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    3ae0:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    3ae4:	4628      	mov	r0, r5
    3ae6:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    3ae8:	69a4      	ldr	r4, [r4, #24]
    3aea:	e7f1      	b.n	3ad0 <notify_le_param_updated+0x8>
    3aec:	200001e4 	.word	0x200001e4

00003af0 <le_param_req>:
{
    3af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3af2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    3af4:	4608      	mov	r0, r1
{
    3af6:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    3af8:	f7fe fb00 	bl	20fc <bt_le_conn_params_valid>
    3afc:	4605      	mov	r5, r0
    3afe:	b910      	cbnz	r0, 3b06 <le_param_req+0x16>
		return false;
    3b00:	2500      	movs	r5, #0
}
    3b02:	4628      	mov	r0, r5
    3b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    3b06:	4b09      	ldr	r3, [pc, #36]	; (3b2c <le_param_req+0x3c>)
    3b08:	681c      	ldr	r4, [r3, #0]
    3b0a:	2c00      	cmp	r4, #0
    3b0c:	d0f9      	beq.n	3b02 <le_param_req+0x12>
		if (!cb->le_param_req) {
    3b0e:	68a3      	ldr	r3, [r4, #8]
    3b10:	b90b      	cbnz	r3, 3b16 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    3b12:	69a4      	ldr	r4, [r4, #24]
    3b14:	e7f9      	b.n	3b0a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    3b16:	4631      	mov	r1, r6
    3b18:	4638      	mov	r0, r7
    3b1a:	4798      	blx	r3
    3b1c:	2800      	cmp	r0, #0
    3b1e:	d0ef      	beq.n	3b00 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    3b20:	4630      	mov	r0, r6
    3b22:	f7fe faeb 	bl	20fc <bt_le_conn_params_valid>
    3b26:	2800      	cmp	r0, #0
    3b28:	d1f3      	bne.n	3b12 <le_param_req+0x22>
    3b2a:	e7e9      	b.n	3b00 <le_param_req+0x10>
    3b2c:	200001e4 	.word	0x200001e4

00003b30 <bt_conn_identity_resolved>:
{
    3b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    3b32:	78c3      	ldrb	r3, [r0, #3]
{
    3b34:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    3b36:	b93b      	cbnz	r3, 3b48 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    3b38:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    3b3c:	4b08      	ldr	r3, [pc, #32]	; (3b60 <bt_conn_identity_resolved+0x30>)
    3b3e:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    3b40:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    3b44:	b91d      	cbnz	r5, 3b4e <bt_conn_identity_resolved+0x1e>
}
    3b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    3b48:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    3b4c:	e7f6      	b.n	3b3c <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    3b4e:	692b      	ldr	r3, [r5, #16]
    3b50:	b11b      	cbz	r3, 3b5a <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    3b52:	463a      	mov	r2, r7
    3b54:	4631      	mov	r1, r6
    3b56:	4620      	mov	r0, r4
    3b58:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3b5a:	69ad      	ldr	r5, [r5, #24]
    3b5c:	e7f2      	b.n	3b44 <bt_conn_identity_resolved+0x14>
    3b5e:	bf00      	nop
    3b60:	200001e4 	.word	0x200001e4

00003b64 <bt_conn_security_changed>:
{
    3b64:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    3b66:	4b06      	ldr	r3, [pc, #24]	; (3b80 <bt_conn_security_changed+0x1c>)
    3b68:	681c      	ldr	r4, [r3, #0]
{
    3b6a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    3b6c:	b904      	cbnz	r4, 3b70 <bt_conn_security_changed+0xc>
}
    3b6e:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    3b70:	6963      	ldr	r3, [r4, #20]
    3b72:	b113      	cbz	r3, 3b7a <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    3b74:	7a29      	ldrb	r1, [r5, #8]
    3b76:	4628      	mov	r0, r5
    3b78:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3b7a:	69a4      	ldr	r4, [r4, #24]
    3b7c:	e7f6      	b.n	3b6c <bt_conn_security_changed+0x8>
    3b7e:	bf00      	nop
    3b80:	200001e4 	.word	0x200001e4

00003b84 <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    3b84:	7b03      	ldrb	r3, [r0, #12]
    3b86:	2b03      	cmp	r3, #3
{
    3b88:	b510      	push	{r4, lr}
    3b8a:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    3b8c:	d115      	bne.n	3bba <bt_conn_security+0x36>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    3b8e:	7a03      	ldrb	r3, [r0, #8]
    3b90:	428b      	cmp	r3, r1
    3b92:	d301      	bcc.n	3b98 <bt_conn_security+0x14>
		return 0;
    3b94:	2000      	movs	r0, #0
    3b96:	bd10      	pop	{r4, pc}
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    3b98:	7a43      	ldrb	r3, [r0, #9]
    3b9a:	428b      	cmp	r3, r1
    3b9c:	d2fa      	bcs.n	3b94 <bt_conn_security+0x10>
	switch (conn->role) {
    3b9e:	78c3      	ldrb	r3, [r0, #3]
	conn->required_sec_level = sec;
    3ba0:	7241      	strb	r1, [r0, #9]
	switch (conn->role) {
    3ba2:	2b01      	cmp	r3, #1
    3ba4:	d106      	bne.n	3bb4 <bt_conn_security+0x30>
		return bt_smp_send_security_req(conn);
    3ba6:	f003 fc19 	bl	73dc <bt_smp_send_security_req>
	if (err) {
    3baa:	2800      	cmp	r0, #0
    3bac:	d0f2      	beq.n	3b94 <bt_conn_security+0x10>
		conn->required_sec_level = conn->sec_level;
    3bae:	7a23      	ldrb	r3, [r4, #8]
    3bb0:	7263      	strb	r3, [r4, #9]
    3bb2:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3bb4:	f06f 0015 	mvn.w	r0, #21
    3bb8:	e7f9      	b.n	3bae <bt_conn_security+0x2a>
		return -ENOTCONN;
    3bba:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    3bbe:	bd10      	pop	{r4, pc}

00003bc0 <bt_conn_cb_register>:
	cb->_next = callback_list;
    3bc0:	4b02      	ldr	r3, [pc, #8]	; (3bcc <bt_conn_cb_register+0xc>)
    3bc2:	681a      	ldr	r2, [r3, #0]
    3bc4:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    3bc6:	6018      	str	r0, [r3, #0]
    3bc8:	4770      	bx	lr
    3bca:	bf00      	nop
    3bcc:	200001e4 	.word	0x200001e4

00003bd0 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    3bd0:	2a01      	cmp	r2, #1
{
    3bd2:	b570      	push	{r4, r5, r6, lr}
    3bd4:	4605      	mov	r5, r0
    3bd6:	460c      	mov	r4, r1
	switch (flags) {
    3bd8:	d00f      	beq.n	3bfa <bt_conn_recv+0x2a>
    3bda:	2a02      	cmp	r2, #2
    3bdc:	d110      	bne.n	3c00 <bt_conn_recv+0x30>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    3bde:	688b      	ldr	r3, [r1, #8]
    3be0:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    3be2:	89c3      	ldrh	r3, [r0, #14]
    3be4:	b10b      	cbz	r3, 3bea <bt_conn_recv+0x1a>
			BT_ERR("Unexpected first L2CAP frame");
			bt_conn_reset_rx_state(conn);
    3be6:	f7ff ff45 	bl	3a74 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    3bea:	89a3      	ldrh	r3, [r4, #12]
    3bec:	1af3      	subs	r3, r6, r3
    3bee:	3304      	adds	r3, #4
    3bf0:	b29b      	uxth	r3, r3
    3bf2:	81eb      	strh	r3, [r5, #14]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    3bf4:	b333      	cbz	r3, 3c44 <bt_conn_recv+0x74>
			conn->rx = buf;
    3bf6:	612c      	str	r4, [r5, #16]
			return;
    3bf8:	bd70      	pop	{r4, r5, r6, pc}
		}

		break;
	case BT_ACL_CONT:
		if (!conn->rx_len) {
    3bfa:	89c3      	ldrh	r3, [r0, #14]
    3bfc:	b93b      	cbnz	r3, 3c0e <bt_conn_recv+0x3e>
			BT_ERR("Unexpected L2CAP continuation");
			bt_conn_reset_rx_state(conn);
    3bfe:	4628      	mov	r0, r5
		conn->rx_len = 0;

		break;
	default:
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
		bt_conn_reset_rx_state(conn);
    3c00:	f7ff ff38 	bl	3a74 <bt_conn_reset_rx_state>
	hdr = (void *)buf->data;
	len = sys_le16_to_cpu(hdr->len);

	if (sizeof(*hdr) + len != buf->len) {
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
		net_buf_unref(buf);
    3c04:	4620      	mov	r0, r4
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    3c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    3c0a:	f00f bb33 	b.w	13274 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    3c0e:	898e      	ldrh	r6, [r1, #12]
    3c10:	42b3      	cmp	r3, r6
    3c12:	d3f4      	bcc.n	3bfe <bt_conn_recv+0x2e>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    3c14:	6900      	ldr	r0, [r0, #16]
    3c16:	3008      	adds	r0, #8
    3c18:	f00f fb99 	bl	1334e <net_buf_simple_tailroom>
    3c1c:	4286      	cmp	r6, r0
    3c1e:	d8ee      	bhi.n	3bfe <bt_conn_recv+0x2e>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    3c20:	6928      	ldr	r0, [r5, #16]
    3c22:	89a2      	ldrh	r2, [r4, #12]
    3c24:	68a1      	ldr	r1, [r4, #8]
    3c26:	3008      	adds	r0, #8
    3c28:	f00f fb5c 	bl	132e4 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    3c2c:	89eb      	ldrh	r3, [r5, #14]
    3c2e:	89a2      	ldrh	r2, [r4, #12]
    3c30:	1a9b      	subs	r3, r3, r2
    3c32:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    3c34:	4620      	mov	r0, r4
    3c36:	f00f fb1d 	bl	13274 <net_buf_unref>
		if (conn->rx_len) {
    3c3a:	89eb      	ldrh	r3, [r5, #14]
    3c3c:	b973      	cbnz	r3, 3c5c <bt_conn_recv+0x8c>
		buf = conn->rx;
    3c3e:	692c      	ldr	r4, [r5, #16]
		conn->rx_len = 0;
    3c40:	81eb      	strh	r3, [r5, #14]
		conn->rx = NULL;
    3c42:	612b      	str	r3, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
    3c44:	68a3      	ldr	r3, [r4, #8]
	if (sizeof(*hdr) + len != buf->len) {
    3c46:	89a2      	ldrh	r2, [r4, #12]
    3c48:	881b      	ldrh	r3, [r3, #0]
    3c4a:	3304      	adds	r3, #4
    3c4c:	4293      	cmp	r3, r2
    3c4e:	d1d9      	bne.n	3c04 <bt_conn_recv+0x34>
	bt_l2cap_recv(conn, buf);
    3c50:	4621      	mov	r1, r4
    3c52:	4628      	mov	r0, r5
}
    3c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    3c58:	f000 bd28 	b.w	46ac <bt_l2cap_recv>
    3c5c:	bd70      	pop	{r4, r5, r6, pc}

00003c5e <bt_conn_send_cb>:

int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
    3c5e:	b510      	push	{r4, lr}
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    3c60:	7b04      	ldrb	r4, [r0, #12]
    3c62:	2c03      	cmp	r4, #3
    3c64:	d005      	beq.n	3c72 <bt_conn_send_cb+0x14>
		BT_ERR("not connected!");
		net_buf_unref(buf);
    3c66:	4608      	mov	r0, r1
    3c68:	f00f fb04 	bl	13274 <net_buf_unref>
		return -ENOTCONN;
    3c6c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    3c70:	bd10      	pop	{r4, pc}
	}

	conn_tx(buf)->cb = cb;
    3c72:	614a      	str	r2, [r1, #20]

	net_buf_put(&conn->tx_queue, buf);
    3c74:	302c      	adds	r0, #44	; 0x2c
    3c76:	f00f faf0 	bl	1325a <net_buf_put>
	return 0;
    3c7a:	2000      	movs	r0, #0
}
    3c7c:	bd10      	pop	{r4, pc}
	...

00003c80 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    3c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
    3c84:	4d0d      	ldr	r5, [pc, #52]	; (3cbc <bt_conn_notify_tx+0x3c>)
    3c86:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    3c88:	f100 071c 	add.w	r7, r0, #28
    3c8c:	f04f 0800 	mov.w	r8, #0
    3c90:	2100      	movs	r1, #0
    3c92:	4638      	mov	r0, r7
    3c94:	f00f fd59 	bl	1374a <k_queue_get>
    3c98:	4604      	mov	r4, r0
    3c9a:	b908      	cbnz	r0, 3ca0 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    3c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    3ca0:	6863      	ldr	r3, [r4, #4]
    3ca2:	b10b      	cbz	r3, 3ca8 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    3ca4:	4630      	mov	r0, r6
    3ca6:	4798      	blx	r3
    3ca8:	682b      	ldr	r3, [r5, #0]
    3caa:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    3cac:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    3cae:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3cb2:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d1eb      	bne.n	3c90 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
    3cb8:	606c      	str	r4, [r5, #4]
    3cba:	e7e7      	b.n	3c8c <bt_conn_notify_tx+0xc>
    3cbc:	200002d4 	.word	0x200002d4

00003cc0 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    3cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cc4:	4605      	mov	r5, r0
    3cc6:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3cc8:	483e      	ldr	r0, [pc, #248]	; (3dc4 <send_frag+0x104>)
    3cca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3cce:	4698      	mov	r8, r3
    3cd0:	4614      	mov	r4, r2
    3cd2:	f00f ffe9 	bl	13ca8 <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    3cd6:	4b3c      	ldr	r3, [pc, #240]	; (3dc8 <send_frag+0x108>)
    3cd8:	f103 0044 	add.w	r0, r3, #68	; 0x44
    3cdc:	f7ff fec4 	bl	3a68 <atomic_get>
    3ce0:	b130      	cbz	r0, 3cf0 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    3ce2:	7b1a      	ldrb	r2, [r3, #12]
    3ce4:	3a03      	subs	r2, #3
    3ce6:	2a01      	cmp	r2, #1
    3ce8:	d802      	bhi.n	3cf0 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    3cea:	4618      	mov	r0, r3
    3cec:	f7ff ffc8 	bl	3c80 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    3cf0:	7b2b      	ldrb	r3, [r5, #12]
    3cf2:	2b03      	cmp	r3, #3
    3cf4:	d149      	bne.n	3d8a <send_frag+0xca>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    3cf6:	2104      	movs	r1, #4
    3cf8:	f107 0008 	add.w	r0, r7, #8
    3cfc:	f00f fb03 	bl	13306 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    3d00:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
    3d02:	4e32      	ldr	r6, [pc, #200]	; (3dcc <send_frag+0x10c>)
    3d04:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    3d08:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3d0a:	89bb      	ldrh	r3, [r7, #12]
    3d0c:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
    3d0e:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    3d10:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    3d12:	3b04      	subs	r3, #4
    3d14:	8043      	strh	r3, [r0, #2]
    3d16:	2302      	movs	r3, #2
    3d18:	753b      	strb	r3, [r7, #20]
	list->head = node->next;
    3d1a:	6823      	ldr	r3, [r4, #0]
    3d1c:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
    3d1e:	428c      	cmp	r4, r1
		list->tail = list->head;
    3d20:	bf08      	it	eq
    3d22:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    3d24:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    3d26:	f04f 0320 	mov.w	r3, #32
    3d2a:	f3ef 8211 	mrs	r2, BASEPRI
    3d2e:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
    3d32:	2300      	movs	r3, #0
    3d34:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    3d36:	69ab      	ldr	r3, [r5, #24]
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d134      	bne.n	3da6 <send_frag+0xe6>
		list->tail = node;
    3d3c:	61ac      	str	r4, [r5, #24]
		list->head = node;
    3d3e:	616c      	str	r4, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3d40:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    3d44:	4638      	mov	r0, r7
    3d46:	f7fe fe5d 	bl	2a04 <bt_send>
	if (err) {
    3d4a:	2800      	cmp	r0, #0
    3d4c:	d036      	beq.n	3dbc <send_frag+0xfc>
	__asm__ volatile(
    3d4e:	f04f 0320 	mov.w	r3, #32
    3d52:	f3ef 8011 	mrs	r0, BASEPRI
    3d56:	f383 8811 	msr	BASEPRI, r3
    3d5a:	696b      	ldr	r3, [r5, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    3d5c:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    3d5e:	b153      	cbz	r3, 3d76 <send_frag+0xb6>
		if (test == node) {
    3d60:	429c      	cmp	r4, r3
    3d62:	d128      	bne.n	3db6 <send_frag+0xf6>
    3d64:	6823      	ldr	r3, [r4, #0]
    3d66:	69a9      	ldr	r1, [r5, #24]
	if (!prev_node) {
    3d68:	bb02      	cbnz	r2, 3dac <send_frag+0xec>
		if (list->tail == node) {
    3d6a:	428c      	cmp	r4, r1
		list->head = node->next;
    3d6c:	616b      	str	r3, [r5, #20]
		if (list->tail == node) {
    3d6e:	d100      	bne.n	3d72 <send_frag+0xb2>
			list->tail = list->head;
    3d70:	61ab      	str	r3, [r5, #24]
	node->next = NULL;
    3d72:	2300      	movs	r3, #0
    3d74:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3d76:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    3d7a:	2300      	movs	r3, #0
    3d7c:	6063      	str	r3, [r4, #4]
	node->next = list->head;
    3d7e:	6833      	ldr	r3, [r6, #0]
    3d80:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    3d82:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    3d84:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
    3d86:	b903      	cbnz	r3, 3d8a <send_frag+0xca>
		list->tail = list->head;
    3d88:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3d8a:	480e      	ldr	r0, [pc, #56]	; (3dc4 <send_frag+0x104>)
    3d8c:	f00f ff2c 	bl	13be8 <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    3d90:	f1b8 0f00 	cmp.w	r8, #0
    3d94:	d004      	beq.n	3da0 <send_frag+0xe0>
		net_buf_unref(buf);
    3d96:	4638      	mov	r0, r7
    3d98:	f00f fa6c 	bl	13274 <net_buf_unref>
	}
	return false;
    3d9c:	f04f 0800 	mov.w	r8, #0
}
    3da0:	4640      	mov	r0, r8
    3da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
    3da6:	601c      	str	r4, [r3, #0]
		list->tail = node;
    3da8:	61ac      	str	r4, [r5, #24]
    3daa:	e7c9      	b.n	3d40 <send_frag+0x80>
		if (list->tail == node) {
    3dac:	428c      	cmp	r4, r1
		prev_node->next = node->next;
    3dae:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
    3db0:	bf08      	it	eq
    3db2:	61aa      	streq	r2, [r5, #24]
    3db4:	e7dd      	b.n	3d72 <send_frag+0xb2>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    3db6:	461a      	mov	r2, r3
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	e7d0      	b.n	3d5e <send_frag+0x9e>
	return true;
    3dbc:	f04f 0801 	mov.w	r8, #1
    3dc0:	e7ee      	b.n	3da0 <send_frag+0xe0>
    3dc2:	bf00      	nop
    3dc4:	2000cc2c 	.word	0x2000cc2c
    3dc8:	20000238 	.word	0x20000238
    3dcc:	200002d4 	.word	0x200002d4

00003dd0 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    3dd0:	b538      	push	{r3, r4, r5, lr}
    3dd2:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    3dd4:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    3dd8:	2100      	movs	r1, #0
    3dda:	4628      	mov	r0, r5
    3ddc:	f00f fa20 	bl	13220 <net_buf_get>
    3de0:	b958      	cbnz	r0, 3dfa <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    3de2:	4620      	mov	r0, r4
    3de4:	f7ff ff4c 	bl	3c80 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    3de8:	4620      	mov	r0, r4
    3dea:	f7ff fe43 	bl	3a74 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    3dee:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    3df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    3df6:	f7ff be48 	b.w	3a8a <atomic_dec>
		net_buf_unref(buf);
    3dfa:	f00f fa3b 	bl	13274 <net_buf_unref>
    3dfe:	e7eb      	b.n	3dd8 <conn_cleanup+0x8>

00003e00 <bt_conn_prepare_events>:
{
    3e00:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    3e02:	4b1f      	ldr	r3, [pc, #124]	; (3e80 <bt_conn_prepare_events+0x80>)
    3e04:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3e06:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    3e08:	609a      	str	r2, [r3, #8]
{
    3e0a:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    3e0c:	f010 fc22 	bl	14654 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    3e10:	4b1c      	ldr	r3, [pc, #112]	; (3e84 <bt_conn_prepare_events+0x84>)
    3e12:	f103 0044 	add.w	r0, r3, #68	; 0x44
    3e16:	f7ff fe27 	bl	3a68 <atomic_get>
    3e1a:	4619      	mov	r1, r3
    3e1c:	b908      	cbnz	r0, 3e22 <bt_conn_prepare_events+0x22>
			continue;
    3e1e:	2001      	movs	r0, #1
    3e20:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    3e22:	7b1a      	ldrb	r2, [r3, #12]
    3e24:	b99a      	cbnz	r2, 3e4e <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e26:	f3bf 8f5b 	dmb	ish
    3e2a:	1d1a      	adds	r2, r3, #4
    3e2c:	e852 0f00 	ldrex	r0, [r2]
    3e30:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    3e34:	e842 4e00 	strex	lr, r4, [r2]
    3e38:	f1be 0f00 	cmp.w	lr, #0
    3e3c:	d1f6      	bne.n	3e2c <bt_conn_prepare_events+0x2c>
    3e3e:	f3bf 8f5b 	dmb	ish
    3e42:	0642      	lsls	r2, r0, #25
    3e44:	d503      	bpl.n	3e4e <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    3e46:	4618      	mov	r0, r3
    3e48:	f7ff ffc2 	bl	3dd0 <conn_cleanup>
    3e4c:	e7e7      	b.n	3e1e <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    3e4e:	7b0c      	ldrb	r4, [r1, #12]
    3e50:	2c03      	cmp	r4, #3
    3e52:	d1e4      	bne.n	3e1e <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    3e54:	f105 0014 	add.w	r0, r5, #20
    3e58:	4b0b      	ldr	r3, [pc, #44]	; (3e88 <bt_conn_prepare_events+0x88>)
    3e5a:	2200      	movs	r2, #0
    3e5c:	2104      	movs	r1, #4
    3e5e:	f010 fbf9 	bl	14654 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    3e62:	2301      	movs	r3, #1
    3e64:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    3e68:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3e6c:	4b07      	ldr	r3, [pc, #28]	; (3e8c <bt_conn_prepare_events+0x8c>)
    3e6e:	2200      	movs	r2, #0
    3e70:	2104      	movs	r1, #4
    3e72:	f010 fbef 	bl	14654 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    3e76:	2302      	movs	r3, #2
    3e78:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    3e7c:	4620      	mov	r0, r4
}
    3e7e:	bd38      	pop	{r3, r4, r5, pc}
    3e80:	2000ccd8 	.word	0x2000ccd8
    3e84:	20000238 	.word	0x20000238
    3e88:	20000254 	.word	0x20000254
    3e8c:	20000264 	.word	0x20000264

00003e90 <bt_conn_add_le>:
{
    3e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    3e94:	4c19      	ldr	r4, [pc, #100]	; (3efc <bt_conn_add_le+0x6c>)
    3e96:	f104 0744 	add.w	r7, r4, #68	; 0x44
{
    3e9a:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    3e9c:	4638      	mov	r0, r7
    3e9e:	f7ff fde3 	bl	3a68 <atomic_get>
    3ea2:	4605      	mov	r5, r0
    3ea4:	b110      	cbz	r0, 3eac <bt_conn_add_le+0x1c>
		return NULL;
    3ea6:	2000      	movs	r0, #0
    3ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(conn, 0, sizeof(*conn));
    3eac:	4601      	mov	r1, r0
    3eae:	229c      	movs	r2, #156	; 0x9c
    3eb0:	4620      	mov	r0, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3eb2:	2601      	movs	r6, #1
    3eb4:	f7fc fbc0 	bl	638 <memset>
    3eb8:	f3bf 8f5b 	dmb	ish
    3ebc:	e857 3f00 	ldrex	r3, [r7]
    3ec0:	e847 6200 	strex	r2, r6, [r7]
    3ec4:	2a00      	cmp	r2, #0
    3ec6:	d1f9      	bne.n	3ebc <bt_conn_add_le+0x2c>
    3ec8:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    3ecc:	2207      	movs	r2, #7
    3ece:	4641      	mov	r1, r8
    3ed0:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3ed4:	f7fc fb84 	bl	5e0 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    3ed8:	2350      	movs	r3, #80	; 0x50
    3eda:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    3ede:	2360      	movs	r3, #96	; 0x60
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    3ee0:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->sec_level = BT_SECURITY_LOW;
    3ee4:	7226      	strb	r6, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    3ee6:	7266      	strb	r6, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    3ee8:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    3eea:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    3eee:	4904      	ldr	r1, [pc, #16]	; (3f00 <bt_conn_add_le+0x70>)
    3ef0:	f010 f9a6 	bl	14240 <k_delayed_work_init>
			conn = &conns[i];
    3ef4:	4620      	mov	r0, r4
}
    3ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3efa:	bf00      	nop
    3efc:	20000238 	.word	0x20000238
    3f00:	00004245 	.word	0x00004245

00003f04 <bt_conn_set_state>:
{
    3f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
    3f06:	7b05      	ldrb	r5, [r0, #12]
    3f08:	428d      	cmp	r5, r1
{
    3f0a:	4604      	mov	r4, r0
	if (conn->state == state) {
    3f0c:	d07e      	beq.n	400c <bt_conn_set_state+0x108>
	conn->state = state;
    3f0e:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    3f10:	b915      	cbnz	r5, 3f18 <bt_conn_set_state+0x14>
	atomic_inc(&conn->ref);
    3f12:	3044      	adds	r0, #68	; 0x44
    3f14:	f7ff fdc6 	bl	3aa4 <atomic_inc>
	switch (conn->state) {
    3f18:	7b23      	ldrb	r3, [r4, #12]
    3f1a:	b1db      	cbz	r3, 3f54 <bt_conn_set_state+0x50>
    3f1c:	2b03      	cmp	r3, #3
    3f1e:	d175      	bne.n	400c <bt_conn_set_state+0x108>
		if (conn->type == BT_CONN_TYPE_SCO) {
    3f20:	78a3      	ldrb	r3, [r4, #2]
    3f22:	2b02      	cmp	r3, #2
    3f24:	d072      	beq.n	400c <bt_conn_set_state+0x108>
		k_fifo_init(&conn->tx_queue);
    3f26:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    3f2a:	f00f fbb9 	bl	136a0 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    3f2e:	f104 001c 	add.w	r0, r4, #28
    3f32:	f00f fbb5 	bl	136a0 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    3f36:	2100      	movs	r1, #0
    3f38:	4835      	ldr	r0, [pc, #212]	; (4010 <bt_conn_set_state+0x10c>)
    3f3a:	f010 fc55 	bl	147e8 <k_poll_signal>
	list->head = NULL;
    3f3e:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    3f40:	4620      	mov	r0, r4
    3f42:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    3f44:	6423      	str	r3, [r4, #64]	; 0x40
    3f46:	f000 fadd 	bl	4504 <bt_l2cap_connected>
		notify_connected(conn);
    3f4a:	4620      	mov	r0, r4
}
    3f4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		notify_connected(conn);
    3f50:	f7ff bd7a 	b.w	3a48 <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    3f54:	78a3      	ldrb	r3, [r4, #2]
    3f56:	2b02      	cmp	r3, #2
    3f58:	d105      	bne.n	3f66 <bt_conn_set_state+0x62>
	atomic_dec(&conn->ref);
    3f5a:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    3f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    3f62:	f7ff bd92 	b.w	3a8a <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    3f66:	1eeb      	subs	r3, r5, #3
    3f68:	2b01      	cmp	r3, #1
    3f6a:	d843      	bhi.n	3ff4 <bt_conn_set_state+0xf0>
			bt_l2cap_disconnected(conn);
    3f6c:	4620      	mov	r0, r4
    3f6e:	f000 fb03 	bl	4578 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    3f72:	4b28      	ldr	r3, [pc, #160]	; (4014 <bt_conn_set_state+0x110>)
    3f74:	681d      	ldr	r5, [r3, #0]
    3f76:	b9ed      	cbnz	r5, 3fb4 <bt_conn_set_state+0xb0>
	node->next = list->head;
    3f78:	4e27      	ldr	r6, [pc, #156]	; (4018 <bt_conn_set_state+0x114>)
    3f7a:	4f28      	ldr	r7, [pc, #160]	; (401c <bt_conn_set_state+0x118>)
	__asm__ volatile(
    3f7c:	f04f 0320 	mov.w	r3, #32
    3f80:	f3ef 8111 	mrs	r1, BASEPRI
    3f84:	f383 8811 	msr	BASEPRI, r3
    3f88:	6963      	ldr	r3, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    3f8a:	b12b      	cbz	r3, 3f98 <bt_conn_set_state+0x94>
	if (list->tail == node) {
    3f8c:	69a0      	ldr	r0, [r4, #24]
	list->head = node->next;
    3f8e:	681a      	ldr	r2, [r3, #0]
    3f90:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    3f92:	4283      	cmp	r3, r0
		list->tail = list->head;
    3f94:	bf08      	it	eq
    3f96:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3f98:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    3f9c:	b18b      	cbz	r3, 3fc2 <bt_conn_set_state+0xbe>
	node->next = list->head;
    3f9e:	6832      	ldr	r2, [r6, #0]
    3fa0:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    3fa2:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    3fa4:	605d      	str	r5, [r3, #4]
	list->head = node;
    3fa6:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
    3fa8:	b902      	cbnz	r2, 3fac <bt_conn_set_state+0xa8>
		list->tail = list->head;
    3faa:	6073      	str	r3, [r6, #4]
    3fac:	4638      	mov	r0, r7
    3fae:	f00f fe1b 	bl	13be8 <_impl_k_sem_give>
    3fb2:	e7e3      	b.n	3f7c <bt_conn_set_state+0x78>
		if (cb->disconnected) {
    3fb4:	686b      	ldr	r3, [r5, #4]
    3fb6:	b113      	cbz	r3, 3fbe <bt_conn_set_state+0xba>
			cb->disconnected(conn, conn->err);
    3fb8:	7ae1      	ldrb	r1, [r4, #11]
    3fba:	4620      	mov	r0, r4
    3fbc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    3fbe:	69ad      	ldr	r5, [r5, #24]
    3fc0:	e7d9      	b.n	3f76 <bt_conn_set_state+0x72>
			if (conn->type == BT_CONN_TYPE_LE) {
    3fc2:	78a3      	ldrb	r3, [r4, #2]
    3fc4:	b91b      	cbnz	r3, 3fce <bt_conn_set_state+0xca>
				k_delayed_work_cancel(&conn->le.update_work);
    3fc6:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3fca:	f010 f957 	bl	1427c <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3fce:	f3bf 8f5b 	dmb	ish
    3fd2:	3404      	adds	r4, #4
    3fd4:	e854 3f00 	ldrex	r3, [r4]
    3fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3fdc:	e844 3200 	strex	r2, r3, [r4]
    3fe0:	2a00      	cmp	r2, #0
    3fe2:	d1f7      	bne.n	3fd4 <bt_conn_set_state+0xd0>
    3fe4:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    3fe8:	2100      	movs	r1, #0
    3fea:	4809      	ldr	r0, [pc, #36]	; (4010 <bt_conn_set_state+0x10c>)
}
    3fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
    3ff0:	f010 bbfa 	b.w	147e8 <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    3ff4:	2d02      	cmp	r5, #2
    3ff6:	d103      	bne.n	4000 <bt_conn_set_state+0xfc>
			notify_connected(conn);
    3ff8:	4620      	mov	r0, r4
    3ffa:	f7ff fd25 	bl	3a48 <notify_connected>
    3ffe:	e7ac      	b.n	3f5a <bt_conn_set_state+0x56>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    4000:	2d01      	cmp	r5, #1
    4002:	d103      	bne.n	400c <bt_conn_set_state+0x108>
			if (conn->err) {
    4004:	7ae3      	ldrb	r3, [r4, #11]
    4006:	2b00      	cmp	r3, #0
    4008:	d0a7      	beq.n	3f5a <bt_conn_set_state+0x56>
    400a:	e7f5      	b.n	3ff8 <bt_conn_set_state+0xf4>
    400c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    400e:	bf00      	nop
    4010:	2000ccd8 	.word	0x2000ccd8
    4014:	200001e4 	.word	0x200001e4
    4018:	200002d4 	.word	0x200002d4
    401c:	2000cc2c 	.word	0x2000cc2c

00004020 <bt_conn_lookup_handle>:
{
    4020:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4022:	4c0b      	ldr	r4, [pc, #44]	; (4050 <bt_conn_lookup_handle+0x30>)
{
    4024:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    4026:	f104 0044 	add.w	r0, r4, #68	; 0x44
    402a:	f7ff fd1d 	bl	3a68 <atomic_get>
    402e:	b168      	cbz	r0, 404c <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    4030:	7b23      	ldrb	r3, [r4, #12]
    4032:	3b03      	subs	r3, #3
    4034:	2b01      	cmp	r3, #1
    4036:	d808      	bhi.n	404a <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    4038:	8823      	ldrh	r3, [r4, #0]
    403a:	4293      	cmp	r3, r2
    403c:	d105      	bne.n	404a <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    403e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    4042:	f7ff fd2f 	bl	3aa4 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    4046:	4620      	mov	r0, r4
    4048:	bd10      	pop	{r4, pc}
	return NULL;
    404a:	2000      	movs	r0, #0
}
    404c:	bd10      	pop	{r4, pc}
    404e:	bf00      	nop
    4050:	20000238 	.word	0x20000238

00004054 <bt_conn_addr_le_cmp>:
{
    4054:	b538      	push	{r3, r4, r5, lr}
    4056:	460d      	mov	r5, r1
    4058:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    405a:	f100 0148 	add.w	r1, r0, #72	; 0x48
    405e:	2207      	movs	r2, #7
    4060:	4628      	mov	r0, r5
    4062:	f7fc faa8 	bl	5b6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    4066:	b160      	cbz	r0, 4082 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4068:	78e3      	ldrb	r3, [r4, #3]
    406a:	2207      	movs	r2, #7
    406c:	b933      	cbnz	r3, 407c <bt_conn_addr_le_cmp+0x28>
    406e:	f104 0156 	add.w	r1, r4, #86	; 0x56
    4072:	4628      	mov	r0, r5
}
    4074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4078:	f7fc ba9d 	b.w	5b6 <memcmp>
    407c:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    4080:	e7f7      	b.n	4072 <bt_conn_addr_le_cmp+0x1e>
    4082:	bd38      	pop	{r3, r4, r5, pc}

00004084 <bt_conn_lookup_addr_le>:
{
    4084:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    4086:	4c0b      	ldr	r4, [pc, #44]	; (40b4 <bt_conn_lookup_addr_le+0x30>)
{
    4088:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    408a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    408e:	f7ff fceb 	bl	3a68 <atomic_get>
    4092:	b908      	cbnz	r0, 4098 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    4094:	2000      	movs	r0, #0
    4096:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    4098:	78a3      	ldrb	r3, [r4, #2]
    409a:	2b00      	cmp	r3, #0
    409c:	d1fa      	bne.n	4094 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    409e:	4620      	mov	r0, r4
    40a0:	f7ff ffd8 	bl	4054 <bt_conn_addr_le_cmp>
    40a4:	2800      	cmp	r0, #0
    40a6:	d1f5      	bne.n	4094 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    40a8:	f104 0044 	add.w	r0, r4, #68	; 0x44
    40ac:	f7ff fcfa 	bl	3aa4 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    40b0:	4620      	mov	r0, r4
}
    40b2:	bd10      	pop	{r4, pc}
    40b4:	20000238 	.word	0x20000238

000040b8 <bt_conn_lookup_state_le>:
{
    40b8:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    40ba:	4c0e      	ldr	r4, [pc, #56]	; (40f4 <bt_conn_lookup_state_le+0x3c>)
{
    40bc:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    40be:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    40c2:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    40c4:	f7ff fcd0 	bl	3a68 <atomic_get>
    40c8:	b908      	cbnz	r0, 40ce <bt_conn_lookup_state_le+0x16>
	return NULL;
    40ca:	2000      	movs	r0, #0
    40cc:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    40ce:	78a2      	ldrb	r2, [r4, #2]
    40d0:	2a00      	cmp	r2, #0
    40d2:	d1fa      	bne.n	40ca <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    40d4:	b93b      	cbnz	r3, 40e6 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    40d6:	7b23      	ldrb	r3, [r4, #12]
    40d8:	42ab      	cmp	r3, r5
    40da:	d1f6      	bne.n	40ca <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    40dc:	4806      	ldr	r0, [pc, #24]	; (40f8 <bt_conn_lookup_state_le+0x40>)
    40de:	f7ff fce1 	bl	3aa4 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    40e2:	4804      	ldr	r0, [pc, #16]	; (40f4 <bt_conn_lookup_state_le+0x3c>)
}
    40e4:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    40e6:	4619      	mov	r1, r3
    40e8:	4620      	mov	r0, r4
    40ea:	f7ff ffb3 	bl	4054 <bt_conn_addr_le_cmp>
    40ee:	2800      	cmp	r0, #0
    40f0:	d1eb      	bne.n	40ca <bt_conn_lookup_state_le+0x12>
    40f2:	e7f0      	b.n	40d6 <bt_conn_lookup_state_le+0x1e>
    40f4:	20000238 	.word	0x20000238
    40f8:	2000027c 	.word	0x2000027c

000040fc <bt_conn_ref>:
{
    40fc:	b510      	push	{r4, lr}
    40fe:	4604      	mov	r4, r0
	atomic_inc(&conn->ref);
    4100:	3044      	adds	r0, #68	; 0x44
    4102:	f7ff fccf 	bl	3aa4 <atomic_inc>
}
    4106:	4620      	mov	r0, r4
    4108:	bd10      	pop	{r4, pc}

0000410a <bt_conn_unref>:
	atomic_dec(&conn->ref);
    410a:	3044      	adds	r0, #68	; 0x44
    410c:	f7ff bcbd 	b.w	3a8a <atomic_dec>

00004110 <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    4110:	3048      	adds	r0, #72	; 0x48
    4112:	4770      	bx	lr

00004114 <bt_hci_disconnect>:

	return -EINVAL;
}

int bt_hci_disconnect(struct bt_conn *conn, u8_t reason)
{
    4114:	b570      	push	{r4, r5, r6, lr}
    4116:	4605      	mov	r5, r0
    4118:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    411a:	f240 4006 	movw	r0, #1030	; 0x406
    411e:	2103      	movs	r1, #3
    4120:	f7fd fe50 	bl	1dc4 <bt_hci_cmd_create>
	if (!buf) {
    4124:	4604      	mov	r4, r0
    4126:	b198      	cbz	r0, 4150 <bt_hci_disconnect+0x3c>
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
    4128:	2103      	movs	r1, #3
    412a:	3008      	adds	r0, #8
    412c:	f00f f8d4 	bl	132d8 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    4130:	882b      	ldrh	r3, [r5, #0]
    4132:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    4134:	7086      	strb	r6, [r0, #2]

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    4136:	4621      	mov	r1, r4
    4138:	f240 4006 	movw	r0, #1030	; 0x406
    413c:	f7fe fc6a 	bl	2a14 <bt_hci_cmd_send>
	if (err) {
    4140:	4604      	mov	r4, r0
    4142:	b918      	cbnz	r0, 414c <bt_hci_disconnect+0x38>
		return err;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    4144:	2104      	movs	r1, #4
    4146:	4628      	mov	r0, r5
    4148:	f7ff fedc 	bl	3f04 <bt_conn_set_state>

	return 0;
}
    414c:	4620      	mov	r0, r4
    414e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    4150:	f06f 0436 	mvn.w	r4, #54	; 0x36
    4154:	e7fa      	b.n	414c <bt_hci_disconnect+0x38>

00004156 <bt_conn_disconnect>:
	 */
	return bt_l2cap_update_conn_param(conn, param);
}

int bt_conn_disconnect(struct bt_conn *conn, u8_t reason)
{
    4156:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}

	switch (conn->state) {
    4158:	7b03      	ldrb	r3, [r0, #12]
    415a:	3b01      	subs	r3, #1
    415c:	2b03      	cmp	r3, #3
    415e:	d803      	bhi.n	4168 <bt_conn_disconnect+0x12>
    4160:	e8df f003 	tbb	[pc, r3]
    4164:	0c0e0c05 	.word	0x0c0e0c05
		return bt_hci_disconnect(conn, reason);
	case BT_CONN_DISCONNECT:
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
    4168:	f06f 0038 	mvn.w	r0, #56	; 0x38
    416c:	bd08      	pop	{r3, pc}
		conn->err = reason;
    416e:	72c1      	strb	r1, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4170:	2100      	movs	r1, #0
    4172:	f7ff fec7 	bl	3f04 <bt_conn_set_state>
		bt_le_scan_update(false);
    4176:	2000      	movs	r0, #0
    4178:	f7fe f928 	bl	23cc <bt_le_scan_update>
		return 0;
    417c:	2000      	movs	r0, #0
	}
}
    417e:	bd08      	pop	{r3, pc}
    4180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bt_hci_disconnect(conn, reason);
    4184:	f7ff bfc6 	b.w	4114 <bt_hci_disconnect>

00004188 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    4188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    418a:	4607      	mov	r7, r0
    418c:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    418e:	f242 0013 	movw	r0, #8211	; 0x2013
    4192:	210e      	movs	r1, #14
    4194:	f7fd fe16 	bl	1dc4 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    4198:	4606      	mov	r6, r0
    419a:	b1c8      	cbz	r0, 41d0 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    419c:	210e      	movs	r1, #14
    419e:	3008      	adds	r0, #8
    41a0:	f00f f89a 	bl	132d8 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    41a4:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    41a6:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    41a8:	220e      	movs	r2, #14
    41aa:	f7fc fa45 	bl	638 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    41ae:	883b      	ldrh	r3, [r7, #0]
    41b0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    41b2:	882b      	ldrh	r3, [r5, #0]
    41b4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    41b6:	886b      	ldrh	r3, [r5, #2]
    41b8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    41ba:	88ab      	ldrh	r3, [r5, #4]
    41bc:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    41be:	88eb      	ldrh	r3, [r5, #6]
    41c0:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    41c2:	4631      	mov	r1, r6
    41c4:	f242 0013 	movw	r0, #8211	; 0x2013
}
    41c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    41cc:	f7fe bc22 	b.w	2a14 <bt_hci_cmd_send>
}
    41d0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    41d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000041d8 <bt_conn_le_param_update>:
{
    41d8:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    41da:	880a      	ldrh	r2, [r1, #0]
    41dc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    41e0:	429a      	cmp	r2, r3
{
    41e2:	4604      	mov	r4, r0
    41e4:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    41e6:	d80c      	bhi.n	4202 <bt_conn_le_param_update+0x2a>
    41e8:	884a      	ldrh	r2, [r1, #2]
    41ea:	429a      	cmp	r2, r3
    41ec:	d309      	bcc.n	4202 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    41ee:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    41f2:	888b      	ldrh	r3, [r1, #4]
    41f4:	429a      	cmp	r2, r3
    41f6:	d104      	bne.n	4202 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    41f8:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    41fc:	88cb      	ldrh	r3, [r1, #6]
    41fe:	429a      	cmp	r2, r3
    4200:	d01a      	beq.n	4238 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    4202:	f104 0074 	add.w	r0, r4, #116	; 0x74
    4206:	f010 f839 	bl	1427c <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    420a:	4b0d      	ldr	r3, [pc, #52]	; (4240 <bt_conn_le_param_update+0x68>)
    420c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4210:	079a      	lsls	r2, r3, #30
    4212:	d503      	bpl.n	421c <bt_conn_le_param_update+0x44>
    4214:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    4218:	079b      	lsls	r3, r3, #30
    421a:	d401      	bmi.n	4220 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    421c:	78e3      	ldrb	r3, [r4, #3]
    421e:	b92b      	cbnz	r3, 422c <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    4220:	4629      	mov	r1, r5
    4222:	4620      	mov	r0, r4
}
    4224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    4228:	f7ff bfae 	b.w	4188 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    422c:	4629      	mov	r1, r5
    422e:	4620      	mov	r0, r4
}
    4230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    4234:	f000 ba58 	b.w	46e8 <bt_l2cap_update_conn_param>
}
    4238:	f06f 0044 	mvn.w	r0, #68	; 0x44
    423c:	bd38      	pop	{r3, r4, r5, pc}
    423e:	bf00      	nop
    4240:	2000cba0 	.word	0x2000cba0

00004244 <le_conn_update>:
{
    4244:	b507      	push	{r0, r1, r2, lr}
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4246:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    424a:	f8ad 3000 	strh.w	r3, [sp]
    424e:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    4252:	f8ad 3002 	strh.w	r3, [sp, #2]
    4256:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    425a:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_conn_le_param_update(conn, param);
    425e:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    4260:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    4264:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    4268:	3874      	subs	r0, #116	; 0x74
    426a:	f7ff ffb5 	bl	41d8 <bt_conn_le_param_update>
}
    426e:	b003      	add	sp, #12
    4270:	f85d fb04 	ldr.w	pc, [sp], #4

00004274 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    4274:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    4276:	4b08      	ldr	r3, [pc, #32]	; (4298 <bt_conn_create_pdu+0x24>)
{
    4278:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    427a:	2800      	cmp	r0, #0
    427c:	bf08      	it	eq
    427e:	4618      	moveq	r0, r3
    4280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4284:	f00e ffc6 	bl	13214 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    4288:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    428a:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    428c:	3008      	adds	r0, #8
    428e:	f00e ffe0 	bl	13252 <net_buf_simple_reserve>

	return buf;
}
    4292:	4620      	mov	r0, r4
    4294:	bd38      	pop	{r3, r4, r5, pc}
    4296:	bf00      	nop
    4298:	2000d0ac 	.word	0x2000d0ac

0000429c <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42a0:	4606      	mov	r6, r0
    42a2:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    42a4:	4816      	ldr	r0, [pc, #88]	; (4300 <create_frag.isra.6+0x64>)
    42a6:	2100      	movs	r1, #0
    42a8:	f7ff ffe4 	bl	4274 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    42ac:	7833      	ldrb	r3, [r6, #0]
    42ae:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    42b0:	4605      	mov	r5, r0
    42b2:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    42b6:	d005      	beq.n	42c4 <create_frag.isra.6+0x28>
		net_buf_unref(frag);
    42b8:	f00e ffdc 	bl	13274 <net_buf_unref>
		return NULL;
    42bc:	4635      	mov	r5, r6
}
    42be:	4628      	mov	r0, r5
    42c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    42c4:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    42c6:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    42ca:	4e0e      	ldr	r6, [pc, #56]	; (4304 <create_frag.isra.6+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    42cc:	4638      	mov	r0, r7
    42ce:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    42d2:	f00f f83c 	bl	1334e <net_buf_simple_tailroom>
    42d6:	4580      	cmp	r8, r0
    42d8:	d20c      	bcs.n	42f4 <create_frag.isra.6+0x58>
	return bt_dev.le.mtu;
    42da:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    42de:	f854 1f08 	ldr.w	r1, [r4, #8]!
    42e2:	4632      	mov	r2, r6
    42e4:	4638      	mov	r0, r7
    42e6:	f00e fffd 	bl	132e4 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    42ea:	4631      	mov	r1, r6
    42ec:	4620      	mov	r0, r4
    42ee:	f00f f812 	bl	13316 <net_buf_simple_pull>
    42f2:	e7e4      	b.n	42be <create_frag.isra.6+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    42f4:	4638      	mov	r0, r7
    42f6:	f00f f82a 	bl	1334e <net_buf_simple_tailroom>
    42fa:	b286      	uxth	r6, r0
    42fc:	e7ef      	b.n	42de <create_frag.isra.6+0x42>
    42fe:	bf00      	nop
    4300:	2000d0cc 	.word	0x2000d0cc
    4304:	2000cba0 	.word	0x2000cba0

00004308 <bt_conn_process_tx>:
{
    4308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    430a:	7b03      	ldrb	r3, [r0, #12]
{
    430c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    430e:	b993      	cbnz	r3, 4336 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4310:	f3bf 8f5b 	dmb	ish
    4314:	1d03      	adds	r3, r0, #4
    4316:	e853 2f00 	ldrex	r2, [r3]
    431a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    431e:	e843 1400 	strex	r4, r1, [r3]
    4322:	2c00      	cmp	r4, #0
    4324:	d1f7      	bne.n	4316 <bt_conn_process_tx+0xe>
    4326:	f3bf 8f5b 	dmb	ish
    432a:	0653      	lsls	r3, r2, #25
    432c:	d503      	bpl.n	4336 <bt_conn_process_tx+0x2e>
}
    432e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    4332:	f7ff bd4d 	b.w	3dd0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    4336:	2100      	movs	r1, #0
    4338:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    433c:	f00e ff70 	bl	13220 <net_buf_get>
	BT_ASSERT(buf);
    4340:	4604      	mov	r4, r0
    4342:	b928      	cbnz	r0, 4350 <bt_conn_process_tx+0x48>
    4344:	4040      	eors	r0, r0
    4346:	f380 8811 	msr	BASEPRI, r0
    434a:	f04f 0004 	mov.w	r0, #4
    434e:	df02      	svc	2
	return bt_dev.le.mtu;
    4350:	4e19      	ldr	r6, [pc, #100]	; (43b8 <bt_conn_process_tx+0xb0>)
	if (buf->len <= conn_mtu(conn)) {
    4352:	8981      	ldrh	r1, [r0, #12]
    4354:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    4358:	4291      	cmp	r1, r2
    435a:	d807      	bhi.n	436c <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    435c:	2300      	movs	r3, #0
    435e:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    4360:	4621      	mov	r1, r4
    4362:	4628      	mov	r0, r5
    4364:	f7ff fcac 	bl	3cc0 <send_frag>
	if (!send_buf(conn, buf)) {
    4368:	b140      	cbz	r0, 437c <bt_conn_process_tx+0x74>
}
    436a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    436c:	f105 070c 	add.w	r7, r5, #12
	frag = create_frag(conn, buf);
    4370:	4601      	mov	r1, r0
    4372:	4638      	mov	r0, r7
    4374:	f7ff ff92 	bl	429c <create_frag.isra.6>
	if (!frag) {
    4378:	4601      	mov	r1, r0
    437a:	b920      	cbnz	r0, 4386 <bt_conn_process_tx+0x7e>
		net_buf_unref(buf);
    437c:	4620      	mov	r0, r4
}
    437e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    4382:	f00e bf77 	b.w	13274 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    4386:	2301      	movs	r3, #1
    4388:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    438a:	4628      	mov	r0, r5
    438c:	f7ff fc98 	bl	3cc0 <send_frag>
    4390:	2800      	cmp	r0, #0
    4392:	d0f3      	beq.n	437c <bt_conn_process_tx+0x74>
	while (buf->len > conn_mtu(conn)) {
    4394:	89a2      	ldrh	r2, [r4, #12]
    4396:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    439a:	429a      	cmp	r2, r3
    439c:	d802      	bhi.n	43a4 <bt_conn_process_tx+0x9c>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    439e:	2300      	movs	r3, #0
    43a0:	2201      	movs	r2, #1
    43a2:	e7dd      	b.n	4360 <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
    43a4:	4621      	mov	r1, r4
    43a6:	4638      	mov	r0, r7
    43a8:	f7ff ff78 	bl	429c <create_frag.isra.6>
		if (!frag) {
    43ac:	4601      	mov	r1, r0
    43ae:	2800      	cmp	r0, #0
    43b0:	d0e4      	beq.n	437c <bt_conn_process_tx+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    43b2:	2301      	movs	r3, #1
    43b4:	461a      	mov	r2, r3
    43b6:	e7e8      	b.n	438a <bt_conn_process_tx+0x82>
    43b8:	2000cba0 	.word	0x2000cba0

000043bc <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    43bc:	b910      	cbnz	r0, 43c4 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    43be:	4b08      	ldr	r3, [pc, #32]	; (43e0 <bt_conn_auth_cb_register+0x24>)
    43c0:	6018      	str	r0, [r3, #0]
		return 0;
    43c2:	4770      	bx	lr
	}

	/* cancel callback should always be provided */
	if (!cb->cancel) {
    43c4:	68c3      	ldr	r3, [r0, #12]
    43c6:	b12b      	cbz	r3, 43d4 <bt_conn_auth_cb_register+0x18>
		return -EINVAL;
	}

	if (bt_auth) {
    43c8:	4a05      	ldr	r2, [pc, #20]	; (43e0 <bt_conn_auth_cb_register+0x24>)
    43ca:	6813      	ldr	r3, [r2, #0]
    43cc:	b92b      	cbnz	r3, 43da <bt_conn_auth_cb_register+0x1e>
		return -EALREADY;
	}

	bt_auth = cb;
    43ce:	6010      	str	r0, [r2, #0]
	return 0;
    43d0:	4618      	mov	r0, r3
    43d2:	4770      	bx	lr
		return -EINVAL;
    43d4:	f06f 0015 	mvn.w	r0, #21
    43d8:	4770      	bx	lr
		return -EALREADY;
    43da:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    43de:	4770      	bx	lr
    43e0:	20003744 	.word	0x20003744

000043e4 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    43e4:	4b03      	ldr	r3, [pc, #12]	; (43f4 <bt_conn_get_id+0x10>)
    43e6:	1ac0      	subs	r0, r0, r3
    43e8:	4b03      	ldr	r3, [pc, #12]	; (43f8 <bt_conn_get_id+0x14>)
    43ea:	1080      	asrs	r0, r0, #2
    43ec:	4358      	muls	r0, r3
}
    43ee:	b2c0      	uxtb	r0, r0
    43f0:	4770      	bx	lr
    43f2:	bf00      	nop
    43f4:	20000238 	.word	0x20000238
    43f8:	96f96f97 	.word	0x96f96f97

000043fc <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    43fc:	4b0e      	ldr	r3, [pc, #56]	; (4438 <bt_conn_init+0x3c>)
    43fe:	b570      	push	{r4, r5, r6, lr}
    4400:	2200      	movs	r2, #0
    4402:	681d      	ldr	r5, [r3, #0]
    4404:	6859      	ldr	r1, [r3, #4]
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    4406:	4e0d      	ldr	r6, [pc, #52]	; (443c <bt_conn_init+0x40>)
{
    4408:	4614      	mov	r4, r2
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    440a:	18b0      	adds	r0, r6, r2
	node->next = list->head;
    440c:	5195      	str	r5, [r2, r6]
	if (!list->tail) {
    440e:	b909      	cbnz	r1, 4414 <bt_conn_init+0x18>
		list->tail = list->head;
    4410:	4601      	mov	r1, r0
	if (!list->tail) {
    4412:	2401      	movs	r4, #1
    4414:	3208      	adds	r2, #8
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    4416:	2a50      	cmp	r2, #80	; 0x50
	list->head = node;
    4418:	4605      	mov	r5, r0
    441a:	d1f6      	bne.n	440a <bt_conn_init+0xe>
    441c:	6018      	str	r0, [r3, #0]
    441e:	b104      	cbz	r4, 4422 <bt_conn_init+0x26>
    4420:	6059      	str	r1, [r3, #4]
	}

	bt_att_init();
    4422:	f001 f9e5 	bl	57f0 <bt_att_init>

	err = bt_smp_init();
    4426:	f003 f8d1 	bl	75cc <bt_smp_init>
	if (err) {
    442a:	4604      	mov	r4, r0
    442c:	b908      	cbnz	r0, 4432 <bt_conn_init+0x36>
		return err;
	}

	bt_l2cap_init();
    442e:	f000 f991 	bl	4754 <bt_l2cap_init>
			}
		}
	}

	return 0;
}
    4432:	4620      	mov	r0, r4
    4434:	bd70      	pop	{r4, r5, r6, pc}
    4436:	bf00      	nop
    4438:	200002d4 	.word	0x200002d4
    443c:	200001e8 	.word	0x200001e8

00004440 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    4440:	4770      	bx	lr
	...

00004444 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    4444:	4b04      	ldr	r3, [pc, #16]	; (4458 <l2cap_accept+0x14>)
    4446:	6818      	ldr	r0, [r3, #0]
    4448:	b918      	cbnz	r0, 4452 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    444a:	4a04      	ldr	r2, [pc, #16]	; (445c <l2cap_accept+0x18>)
    444c:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    444e:	600b      	str	r3, [r1, #0]

		return 0;
    4450:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    4452:	f06f 000b 	mvn.w	r0, #11
}
    4456:	4770      	bx	lr
    4458:	200002dc 	.word	0x200002dc
    445c:	2000ccf4 	.word	0x2000ccf4

00004460 <l2cap_connected>:
    4460:	4770      	bx	lr
	...

00004464 <bt_l2cap_le_fixed_chan_register>:
	node->next = NULL;
    4464:	2300      	movs	r3, #0
    4466:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    4468:	4b05      	ldr	r3, [pc, #20]	; (4480 <bt_l2cap_le_fixed_chan_register+0x1c>)
    446a:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    446c:	f100 0208 	add.w	r2, r0, #8
    4470:	b911      	cbnz	r1, 4478 <bt_l2cap_le_fixed_chan_register+0x14>
		list->tail = node;
    4472:	605a      	str	r2, [r3, #4]
		list->head = node;
    4474:	601a      	str	r2, [r3, #0]
    4476:	4770      	bx	lr
		list->tail->next = node;
    4478:	600a      	str	r2, [r1, #0]
		list->tail = node;
    447a:	605a      	str	r2, [r3, #4]
    447c:	4770      	bx	lr
    447e:	bf00      	nop
    4480:	20000374 	.word	0x20000374

00004484 <bt_l2cap_chan_remove>:
{
    4484:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    4486:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4488:	b113      	cbz	r3, 4490 <bt_l2cap_chan_remove+0xc>
    448a:	3b08      	subs	r3, #8
    448c:	2200      	movs	r2, #0
    448e:	b903      	cbnz	r3, 4492 <bt_l2cap_chan_remove+0xe>
    4490:	bd30      	pop	{r4, r5, pc}
		if (chan == ch) {
    4492:	428b      	cmp	r3, r1
    4494:	f103 0408 	add.w	r4, r3, #8
    4498:	d10e      	bne.n	44b8 <bt_l2cap_chan_remove+0x34>
    449a:	6899      	ldr	r1, [r3, #8]
    449c:	6c05      	ldr	r5, [r0, #64]	; 0x40
	if (!prev_node) {
    449e:	b932      	cbnz	r2, 44ae <bt_l2cap_chan_remove+0x2a>
		if (list->tail == node) {
    44a0:	42ac      	cmp	r4, r5
		list->head = node->next;
    44a2:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    44a4:	d100      	bne.n	44a8 <bt_l2cap_chan_remove+0x24>
			list->tail = list->head;
    44a6:	6401      	str	r1, [r0, #64]	; 0x40
	node->next = NULL;
    44a8:	2200      	movs	r2, #0
    44aa:	609a      	str	r2, [r3, #8]
    44ac:	bd30      	pop	{r4, r5, pc}
		if (list->tail == node) {
    44ae:	42ac      	cmp	r4, r5
		prev_node->next = node->next;
    44b0:	6011      	str	r1, [r2, #0]
			list->tail = prev_node;
    44b2:	bf08      	it	eq
    44b4:	6402      	streq	r2, [r0, #64]	; 0x40
    44b6:	e7f7      	b.n	44a8 <bt_l2cap_chan_remove+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    44b8:	4622      	mov	r2, r4
    44ba:	2c00      	cmp	r4, #0
    44bc:	d0e8      	beq.n	4490 <bt_l2cap_chan_remove+0xc>
	return node->next;
    44be:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    44c0:	2b00      	cmp	r3, #0
    44c2:	d0e5      	beq.n	4490 <bt_l2cap_chan_remove+0xc>
    44c4:	3b08      	subs	r3, #8
    44c6:	e7e2      	b.n	448e <bt_l2cap_chan_remove+0xa>

000044c8 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    44c8:	6803      	ldr	r3, [r0, #0]
{
    44ca:	b510      	push	{r4, lr}
    44cc:	4604      	mov	r4, r0
	if (!chan->conn) {
    44ce:	b12b      	cbz	r3, 44dc <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    44d0:	6843      	ldr	r3, [r0, #4]
    44d2:	685b      	ldr	r3, [r3, #4]
    44d4:	b103      	cbz	r3, 44d8 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    44d6:	4798      	blx	r3
	chan->conn = NULL;
    44d8:	2300      	movs	r3, #0
    44da:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    44dc:	68e3      	ldr	r3, [r4, #12]
    44de:	b11b      	cbz	r3, 44e8 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    44e0:	4620      	mov	r0, r4
}
    44e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    44e6:	4718      	bx	r3
    44e8:	bd10      	pop	{r4, pc}

000044ea <l2cap_rtx_timeout>:
{
    44ea:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    44ec:	f1a0 0410 	sub.w	r4, r0, #16
    44f0:	4621      	mov	r1, r4
    44f2:	f850 0c10 	ldr.w	r0, [r0, #-16]
    44f6:	f7ff ffc5 	bl	4484 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    44fa:	4620      	mov	r0, r4
}
    44fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
    4500:	f7ff bfe2 	b.w	44c8 <bt_l2cap_chan_del>

00004504 <bt_l2cap_connected>:
{
    4504:	4b1a      	ldr	r3, [pc, #104]	; (4570 <bt_l2cap_connected+0x6c>)
    4506:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    450a:	681c      	ldr	r4, [r3, #0]
    450c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    450e:	b12c      	cbz	r4, 451c <bt_l2cap_connected+0x18>
	node->next = NULL;
    4510:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4512:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4574 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4516:	3c08      	subs	r4, #8
    4518:	46b9      	mov	r9, r7
    451a:	b914      	cbnz	r4, 4522 <bt_l2cap_connected+0x1e>
}
    451c:	b003      	add	sp, #12
    451e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    4522:	6863      	ldr	r3, [r4, #4]
    4524:	a901      	add	r1, sp, #4
    4526:	4630      	mov	r0, r6
    4528:	4798      	blx	r3
    452a:	2800      	cmp	r0, #0
    452c:	db18      	blt.n	4560 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    452e:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    4530:	8823      	ldrh	r3, [r4, #0]
    4532:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    4534:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    4538:	4641      	mov	r1, r8
    453a:	f105 0010 	add.w	r0, r5, #16
    453e:	f00f fe7f 	bl	14240 <k_delayed_work_init>
	if (!list->tail) {
    4542:	6c32      	ldr	r2, [r6, #64]	; 0x40
	node->next = NULL;
    4544:	60af      	str	r7, [r5, #8]
	sys_slist_append(&conn->channels, &chan->node);
    4546:	f105 0308 	add.w	r3, r5, #8
	if (!list->tail) {
    454a:	b972      	cbnz	r2, 456a <bt_l2cap_connected+0x66>
		list->tail = node;
    454c:	6433      	str	r3, [r6, #64]	; 0x40
		list->head = node;
    454e:	63f3      	str	r3, [r6, #60]	; 0x3c
		if (chan->ops->connected) {
    4550:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    4552:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    4554:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    4556:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    455a:	681b      	ldr	r3, [r3, #0]
    455c:	b103      	cbz	r3, 4560 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    455e:	4798      	blx	r3
	return node->next;
    4560:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    4562:	2c00      	cmp	r4, #0
    4564:	d0da      	beq.n	451c <bt_l2cap_connected+0x18>
    4566:	3c08      	subs	r4, #8
    4568:	e7d7      	b.n	451a <bt_l2cap_connected+0x16>
		list->tail->next = node;
    456a:	6013      	str	r3, [r2, #0]
		list->tail = node;
    456c:	6433      	str	r3, [r6, #64]	; 0x40
    456e:	e7ef      	b.n	4550 <bt_l2cap_connected+0x4c>
    4570:	20000374 	.word	0x20000374
    4574:	000044eb 	.word	0x000044eb

00004578 <bt_l2cap_disconnected>:
{
    4578:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    457a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    457c:	b1a3      	cbz	r3, 45a8 <bt_l2cap_disconnected+0x30>
    457e:	f1b3 0008 	subs.w	r0, r3, #8
    4582:	d10a      	bne.n	459a <bt_l2cap_disconnected+0x22>
    4584:	bd10      	pop	{r4, pc}
    4586:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    4588:	f7ff ff9e 	bl	44c8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    458c:	b164      	cbz	r4, 45a8 <bt_l2cap_disconnected+0x30>
	return node->next;
    458e:	68a3      	ldr	r3, [r4, #8]
    4590:	b103      	cbz	r3, 4594 <bt_l2cap_disconnected+0x1c>
    4592:	3b08      	subs	r3, #8
{
    4594:	4620      	mov	r0, r4
    4596:	461c      	mov	r4, r3
    4598:	e7f6      	b.n	4588 <bt_l2cap_disconnected+0x10>
    459a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    459c:	2c00      	cmp	r4, #0
    459e:	d1f2      	bne.n	4586 <bt_l2cap_disconnected+0xe>
}
    45a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    45a4:	f7ff bf90 	b.w	44c8 <bt_l2cap_chan_del>
    45a8:	bd10      	pop	{r4, pc}

000045aa <bt_l2cap_encrypt_change>:
{
    45aa:	b538      	push	{r3, r4, r5, lr}
    45ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    45ae:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    45b0:	b10c      	cbz	r4, 45b6 <bt_l2cap_encrypt_change+0xc>
    45b2:	3c08      	subs	r4, #8
    45b4:	b904      	cbnz	r4, 45b8 <bt_l2cap_encrypt_change+0xe>
    45b6:	bd38      	pop	{r3, r4, r5, pc}
		if (chan->ops->encrypt_change) {
    45b8:	6863      	ldr	r3, [r4, #4]
    45ba:	689b      	ldr	r3, [r3, #8]
    45bc:	b113      	cbz	r3, 45c4 <bt_l2cap_encrypt_change+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
    45be:	4629      	mov	r1, r5
    45c0:	4620      	mov	r0, r4
    45c2:	4798      	blx	r3
    45c4:	68a4      	ldr	r4, [r4, #8]
    45c6:	e7f3      	b.n	45b0 <bt_l2cap_encrypt_change+0x6>

000045c8 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    45c8:	3104      	adds	r1, #4
    45ca:	f7ff be53 	b.w	4274 <bt_conn_create_pdu>

000045ce <bt_l2cap_send_cb>:
{
    45ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45d0:	4614      	mov	r4, r2
    45d2:	4605      	mov	r5, r0
    45d4:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    45d6:	f102 0008 	add.w	r0, r2, #8
    45da:	2104      	movs	r1, #4
{
    45dc:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    45de:	f00e fe92 	bl	13306 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    45e2:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    45e4:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    45e6:	3904      	subs	r1, #4
    45e8:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    45ea:	4632      	mov	r2, r6
    45ec:	4621      	mov	r1, r4
    45ee:	4628      	mov	r0, r5
}
    45f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    45f4:	f7ff bb33 	b.w	3c5e <bt_conn_send_cb>

000045f8 <l2cap_recv>:
{
    45f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    45fc:	898b      	ldrh	r3, [r1, #12]
    45fe:	2b03      	cmp	r3, #3
{
    4600:	4606      	mov	r6, r0
    4602:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    4604:	d931      	bls.n	466a <l2cap_recv+0x72>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    4606:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    4608:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    460a:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    460e:	8867      	ldrh	r7, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    4610:	f00e fe81 	bl	13316 <net_buf_simple_pull>
	if (buf->len != len) {
    4614:	89ab      	ldrh	r3, [r5, #12]
    4616:	42bb      	cmp	r3, r7
    4618:	d127      	bne.n	466a <l2cap_recv+0x72>
	if (!hdr->ident) {
    461a:	7867      	ldrb	r7, [r4, #1]
    461c:	b32f      	cbz	r7, 466a <l2cap_recv+0x72>
	switch (hdr->code) {
    461e:	7823      	ldrb	r3, [r4, #0]
    4620:	2b01      	cmp	r3, #1
    4622:	d022      	beq.n	466a <l2cap_recv+0x72>
    4624:	2b13      	cmp	r3, #19
    4626:	d020      	beq.n	466a <l2cap_recv+0x72>
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4628:	2104      	movs	r1, #4
    462a:	2000      	movs	r0, #0
		l2cap_send_reject(chan->conn, hdr->ident,
    462c:	f8d6 8000 	ldr.w	r8, [r6]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4630:	f7ff fe20 	bl	4274 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    4634:	f100 0608 	add.w	r6, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4638:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    463a:	2104      	movs	r1, #4
    463c:	4630      	mov	r0, r6
    463e:	f00e fe4b 	bl	132d8 <net_buf_simple_add>
	hdr->len = sys_cpu_to_le16(len);
    4642:	2400      	movs	r4, #0
	hdr->code = code;
    4644:	2301      	movs	r3, #1
	hdr->len = sys_cpu_to_le16(len);
    4646:	2102      	movs	r1, #2
	hdr->code = code;
    4648:	7003      	strb	r3, [r0, #0]
	hdr->ident = ident;
    464a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    464c:	7081      	strb	r1, [r0, #2]
    464e:	70c4      	strb	r4, [r0, #3]
	rej = net_buf_add(buf, sizeof(*rej));
    4650:	4630      	mov	r0, r6
    4652:	f00e fe41 	bl	132d8 <net_buf_simple_add>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    4656:	4623      	mov	r3, r4
	rej->reason = sys_cpu_to_le16(reason);
    4658:	7004      	strb	r4, [r0, #0]
    465a:	7044      	strb	r4, [r0, #1]
    465c:	462a      	mov	r2, r5
    465e:	4640      	mov	r0, r8
    4660:	2105      	movs	r1, #5
}
    4662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4666:	f7ff bfb2 	b.w	45ce <bt_l2cap_send_cb>
    466a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000466e <bt_l2cap_le_lookup_tx_cid>:
{
    466e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4670:	b100      	cbz	r0, 4674 <bt_l2cap_le_lookup_tx_cid+0x6>
    4672:	3808      	subs	r0, #8
    4674:	b900      	cbnz	r0, 4678 <bt_l2cap_le_lookup_tx_cid+0xa>
}
    4676:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    4678:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    467c:	428b      	cmp	r3, r1
    467e:	d0fa      	beq.n	4676 <bt_l2cap_le_lookup_tx_cid+0x8>
    4680:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4682:	2000      	movs	r0, #0
    4684:	2b00      	cmp	r3, #0
    4686:	d0f6      	beq.n	4676 <bt_l2cap_le_lookup_tx_cid+0x8>
    4688:	f1a3 0008 	sub.w	r0, r3, #8
    468c:	e7f2      	b.n	4674 <bt_l2cap_le_lookup_tx_cid+0x6>

0000468e <bt_l2cap_le_lookup_rx_cid>:
{
    468e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    4690:	b100      	cbz	r0, 4694 <bt_l2cap_le_lookup_rx_cid+0x6>
    4692:	3808      	subs	r0, #8
    4694:	b900      	cbnz	r0, 4698 <bt_l2cap_le_lookup_rx_cid+0xa>
}
    4696:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    4698:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    469a:	428b      	cmp	r3, r1
    469c:	d0fb      	beq.n	4696 <bt_l2cap_le_lookup_rx_cid+0x8>
    469e:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    46a0:	2000      	movs	r0, #0
    46a2:	2b00      	cmp	r3, #0
    46a4:	d0f7      	beq.n	4696 <bt_l2cap_le_lookup_rx_cid+0x8>
    46a6:	f1a3 0008 	sub.w	r0, r3, #8
    46aa:	e7f3      	b.n	4694 <bt_l2cap_le_lookup_rx_cid+0x6>

000046ac <bt_l2cap_recv>:
{
    46ac:	b570      	push	{r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    46ae:	898b      	ldrh	r3, [r1, #12]
    46b0:	2b03      	cmp	r3, #3
{
    46b2:	4605      	mov	r5, r0
    46b4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    46b6:	d804      	bhi.n	46c2 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
    46b8:	4620      	mov	r0, r4
}
    46ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    46be:	f00e bdd9 	b.w	13274 <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    46c2:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    46c4:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    46c6:	f850 3f08 	ldr.w	r3, [r0, #8]!
    46ca:	885e      	ldrh	r6, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    46cc:	f00e fe23 	bl	13316 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    46d0:	4631      	mov	r1, r6
    46d2:	4628      	mov	r0, r5
    46d4:	f7ff ffdb 	bl	468e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    46d8:	2800      	cmp	r0, #0
    46da:	d0ed      	beq.n	46b8 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
    46dc:	6843      	ldr	r3, [r0, #4]
    46de:	4621      	mov	r1, r4
    46e0:	691b      	ldr	r3, [r3, #16]
    46e2:	4798      	blx	r3
    46e4:	e7e8      	b.n	46b8 <bt_l2cap_recv+0xc>
	...

000046e8 <bt_l2cap_update_conn_param>:
{
    46e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ident++;
    46ec:	4b18      	ldr	r3, [pc, #96]	; (4750 <bt_l2cap_update_conn_param+0x68>)
    46ee:	781a      	ldrb	r2, [r3, #0]
    46f0:	3201      	adds	r2, #1
	if (!ident) {
    46f2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    46f6:	bf08      	it	eq
    46f8:	2201      	moveq	r2, #1
{
    46fa:	460c      	mov	r4, r1
		ident++;
    46fc:	701a      	strb	r2, [r3, #0]
{
    46fe:	4605      	mov	r5, r0
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4700:	2104      	movs	r1, #4
    4702:	2000      	movs	r0, #0
	return ident;
    4704:	781e      	ldrb	r6, [r3, #0]
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    4706:	f7ff fdb5 	bl	4274 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    470a:	f100 0808 	add.w	r8, r0, #8
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    470e:	4607      	mov	r7, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    4710:	2104      	movs	r1, #4
    4712:	4640      	mov	r0, r8
    4714:	f00e fde0 	bl	132d8 <net_buf_simple_add>
	hdr->code = code;
    4718:	2312      	movs	r3, #18
	hdr->ident = ident;
    471a:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    471c:	2108      	movs	r1, #8
    471e:	2600      	movs	r6, #0
	hdr->code = code;
    4720:	7003      	strb	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(len);
    4722:	7081      	strb	r1, [r0, #2]
    4724:	70c6      	strb	r6, [r0, #3]
	req = net_buf_add(buf, sizeof(*req));
    4726:	4640      	mov	r0, r8
    4728:	f00e fdd6 	bl	132d8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    472c:	8823      	ldrh	r3, [r4, #0]
    472e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    4730:	8863      	ldrh	r3, [r4, #2]
    4732:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    4734:	88a3      	ldrh	r3, [r4, #4]
    4736:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    4738:	88e3      	ldrh	r3, [r4, #6]
    473a:	80c3      	strh	r3, [r0, #6]
    473c:	463a      	mov	r2, r7
    473e:	4628      	mov	r0, r5
    4740:	4633      	mov	r3, r6
    4742:	2105      	movs	r1, #5
    4744:	f7ff ff43 	bl	45ce <bt_l2cap_send_cb>
}
    4748:	4630      	mov	r0, r6
    474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    474e:	bf00      	nop
    4750:	20000370 	.word	0x20000370

00004754 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    4754:	4801      	ldr	r0, [pc, #4]	; (475c <bt_l2cap_init+0x8>)
    4756:	f7ff be85 	b.w	4464 <bt_l2cap_le_fixed_chan_register>
    475a:	bf00      	nop
    475c:	2000cce8 	.word	0x2000cce8

00004760 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    4760:	2006      	movs	r0, #6
    4762:	4770      	bx	lr

00004764 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    4764:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    4766:	4a0a      	ldr	r2, [pc, #40]	; (4790 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    4768:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    476a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    476e:	4284      	cmp	r4, r0
    4770:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    4774:	d102      	bne.n	477c <att_op_get_type+0x18>
			return handlers[i].type;
    4776:	440a      	add	r2, r1
    4778:	7890      	ldrb	r0, [r2, #2]
    477a:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    477c:	3301      	adds	r3, #1
    477e:	2b1b      	cmp	r3, #27
    4780:	d1f3      	bne.n	476a <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    4782:	f010 0f40 	tst.w	r0, #64	; 0x40
    4786:	bf14      	ite	ne
    4788:	2000      	movne	r0, #0
    478a:	2006      	moveq	r0, #6
}
    478c:	bd10      	pop	{r4, pc}
    478e:	bf00      	nop
    4790:	00014b50 	.word	0x00014b50

00004794 <att_req_destroy>:
{
    4794:	b510      	push	{r4, lr}
    4796:	4604      	mov	r4, r0
	if (req->buf) {
    4798:	6900      	ldr	r0, [r0, #16]
    479a:	b108      	cbz	r0, 47a0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    479c:	f00e fd6a 	bl	13274 <net_buf_unref>
	if (req->destroy) {
    47a0:	68a3      	ldr	r3, [r4, #8]
    47a2:	b10b      	cbz	r3, 47a8 <att_req_destroy+0x14>
		req->destroy(req);
    47a4:	4620      	mov	r0, r4
    47a6:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    47a8:	4620      	mov	r0, r4
    47aa:	2218      	movs	r2, #24
    47ac:	2100      	movs	r1, #0
}
    47ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    47b2:	f7fb bf41 	b.w	638 <memset>

000047b6 <att_notify>:
{
    47b6:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    47b8:	f101 0008 	add.w	r0, r1, #8
    47bc:	f00e fdbb 	bl	13336 <net_buf_simple_pull_le16>
}
    47c0:	2000      	movs	r0, #0
    47c2:	bd08      	pop	{r3, pc}

000047c4 <read_group_cb>:
{
    47c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    47c8:	680d      	ldr	r5, [r1, #0]
{
    47ca:	4606      	mov	r6, r0
    47cc:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    47ce:	f04f 0800 	mov.w	r8, #0
    47d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    47d6:	a902      	add	r1, sp, #8
    47d8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    47da:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    47dc:	f88d 8008 	strb.w	r8, [sp, #8]
    47e0:	f8ad 300a 	strh.w	r3, [sp, #10]
    47e4:	f7fd fa02 	bl	1bec <bt_uuid_cmp>
    47e8:	b198      	cbz	r0, 4812 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    47ea:	f642 0301 	movw	r3, #10241	; 0x2801
    47ee:	a903      	add	r1, sp, #12
    47f0:	6830      	ldr	r0, [r6, #0]
    47f2:	f88d 800c 	strb.w	r8, [sp, #12]
    47f6:	f8ad 300e 	strh.w	r3, [sp, #14]
    47fa:	f7fd f9f7 	bl	1bec <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    47fe:	b140      	cbz	r0, 4812 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    4800:	6923      	ldr	r3, [r4, #16]
    4802:	b123      	cbz	r3, 480e <read_group_cb+0x4a>
    4804:	8a32      	ldrh	r2, [r6, #16]
    4806:	8859      	ldrh	r1, [r3, #2]
    4808:	4291      	cmp	r1, r2
    480a:	d200      	bcs.n	480e <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    480c:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    480e:	2001      	movs	r0, #1
    4810:	e012      	b.n	4838 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4812:	6861      	ldr	r1, [r4, #4]
    4814:	6830      	ldr	r0, [r6, #0]
    4816:	f7fd f9e9 	bl	1bec <bt_uuid_cmp>
    481a:	b110      	cbz	r0, 4822 <read_group_cb+0x5e>
		data->group = NULL;
    481c:	2300      	movs	r3, #0
    481e:	6123      	str	r3, [r4, #16]
    4820:	e7f5      	b.n	480e <read_group_cb+0x4a>
	if (data->rsp->len &&
    4822:	68e3      	ldr	r3, [r4, #12]
    4824:	68a0      	ldr	r0, [r4, #8]
    4826:	781a      	ldrb	r2, [r3, #0]
    4828:	b14a      	cbz	r2, 483e <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    482a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    482e:	8981      	ldrh	r1, [r0, #12]
    4830:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    4832:	4293      	cmp	r3, r2
    4834:	da03      	bge.n	483e <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    4836:	2000      	movs	r0, #0
}
    4838:	b004      	add	sp, #16
    483a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    483e:	2104      	movs	r1, #4
    4840:	3008      	adds	r0, #8
    4842:	f00e fd49 	bl	132d8 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    4846:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4848:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    484a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    484c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    484e:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4850:	898a      	ldrh	r2, [r1, #12]
    4852:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    4856:	6889      	ldr	r1, [r1, #8]
    4858:	f8d6 8004 	ldr.w	r8, [r6, #4]
    485c:	1a9b      	subs	r3, r3, r2
    485e:	2500      	movs	r5, #0
    4860:	440a      	add	r2, r1
    4862:	9500      	str	r5, [sp, #0]
    4864:	4631      	mov	r1, r6
    4866:	b29b      	uxth	r3, r3
    4868:	4638      	mov	r0, r7
    486a:	47c0      	blx	r8
	if (read < 0) {
    486c:	1e01      	subs	r1, r0, #0
    486e:	dbe2      	blt.n	4836 <read_group_cb+0x72>
	if (!data->rsp->len) {
    4870:	68e0      	ldr	r0, [r4, #12]
    4872:	7802      	ldrb	r2, [r0, #0]
    4874:	1d0b      	adds	r3, r1, #4
    4876:	b92a      	cbnz	r2, 4884 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    4878:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    487a:	68a0      	ldr	r0, [r4, #8]
    487c:	3008      	adds	r0, #8
    487e:	f00e fd2b 	bl	132d8 <net_buf_simple_add>
    4882:	e7c4      	b.n	480e <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    4884:	429a      	cmp	r2, r3
    4886:	d0f8      	beq.n	487a <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    4888:	68a2      	ldr	r2, [r4, #8]
    488a:	8993      	ldrh	r3, [r2, #12]
    488c:	3b04      	subs	r3, #4
    488e:	8193      	strh	r3, [r2, #12]
    4890:	e7d1      	b.n	4836 <read_group_cb+0x72>

00004892 <find_info_cb>:
	if (!data->rsp) {
    4892:	688b      	ldr	r3, [r1, #8]
{
    4894:	b570      	push	{r4, r5, r6, lr}
    4896:	4605      	mov	r5, r0
    4898:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    489a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    489c:	b963      	cbnz	r3, 48b8 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    489e:	6848      	ldr	r0, [r1, #4]
    48a0:	2101      	movs	r1, #1
    48a2:	3008      	adds	r0, #8
    48a4:	f00e fd18 	bl	132d8 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    48a8:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    48aa:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    48ac:	781b      	ldrb	r3, [r3, #0]
    48ae:	2b00      	cmp	r3, #0
    48b0:	bf0c      	ite	eq
    48b2:	2301      	moveq	r3, #1
    48b4:	2302      	movne	r3, #2
    48b6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    48b8:	68a3      	ldr	r3, [r4, #8]
    48ba:	781b      	ldrb	r3, [r3, #0]
    48bc:	2b01      	cmp	r3, #1
    48be:	d003      	beq.n	48c8 <find_info_cb+0x36>
    48c0:	2b02      	cmp	r3, #2
    48c2:	d01a      	beq.n	48fa <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    48c4:	2000      	movs	r0, #0
}
    48c6:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    48c8:	682b      	ldr	r3, [r5, #0]
    48ca:	781b      	ldrb	r3, [r3, #0]
    48cc:	2b00      	cmp	r3, #0
    48ce:	d1f9      	bne.n	48c4 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    48d0:	6860      	ldr	r0, [r4, #4]
    48d2:	2104      	movs	r1, #4
    48d4:	3008      	adds	r0, #8
    48d6:	f00e fcff 	bl	132d8 <net_buf_simple_add>
    48da:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    48dc:	8a2b      	ldrh	r3, [r5, #16]
    48de:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    48e0:	682b      	ldr	r3, [r5, #0]
    48e2:	885b      	ldrh	r3, [r3, #2]
    48e4:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    48e6:	6863      	ldr	r3, [r4, #4]
    48e8:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    48ec:	899b      	ldrh	r3, [r3, #12]
    48ee:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    48f0:	2804      	cmp	r0, #4
    48f2:	bf94      	ite	ls
    48f4:	2000      	movls	r0, #0
    48f6:	2001      	movhi	r0, #1
    48f8:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    48fa:	682b      	ldr	r3, [r5, #0]
    48fc:	781b      	ldrb	r3, [r3, #0]
    48fe:	2b02      	cmp	r3, #2
    4900:	d1e0      	bne.n	48c4 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    4902:	6860      	ldr	r0, [r4, #4]
    4904:	2112      	movs	r1, #18
    4906:	3008      	adds	r0, #8
    4908:	f00e fce6 	bl	132d8 <net_buf_simple_add>
    490c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    490e:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    4910:	8a2b      	ldrh	r3, [r5, #16]
    4912:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    4916:	2210      	movs	r2, #16
    4918:	3101      	adds	r1, #1
    491a:	f7fb fe61 	bl	5e0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    491e:	6863      	ldr	r3, [r4, #4]
    4920:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    4924:	899b      	ldrh	r3, [r3, #12]
    4926:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    4928:	2812      	cmp	r0, #18
    492a:	e7e2      	b.n	48f2 <find_info_cb+0x60>

0000492c <find_type_cb>:
{
    492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    4930:	680e      	ldr	r6, [r1, #0]
{
    4932:	b088      	sub	sp, #32
    4934:	4605      	mov	r5, r0
    4936:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4938:	2700      	movs	r7, #0
    493a:	f642 0301 	movw	r3, #10241	; 0x2801
    493e:	a902      	add	r1, sp, #8
    4940:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    4942:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    4946:	f88d 7008 	strb.w	r7, [sp, #8]
    494a:	f8ad 300a 	strh.w	r3, [sp, #10]
    494e:	f7fd f94d 	bl	1bec <bt_uuid_cmp>
    4952:	b928      	cbnz	r0, 4960 <find_type_cb+0x34>
		data->group = NULL;
    4954:	2300      	movs	r3, #0
    4956:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    4958:	2001      	movs	r0, #1
}
    495a:	b008      	add	sp, #32
    495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    4960:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    4964:	a903      	add	r1, sp, #12
    4966:	6828      	ldr	r0, [r5, #0]
    4968:	f88d 700c 	strb.w	r7, [sp, #12]
    496c:	f8ad 300e 	strh.w	r3, [sp, #14]
    4970:	f7fd f93c 	bl	1bec <bt_uuid_cmp>
    4974:	b140      	cbz	r0, 4988 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    4976:	68a3      	ldr	r3, [r4, #8]
    4978:	2b00      	cmp	r3, #0
    497a:	d0ed      	beq.n	4958 <find_type_cb+0x2c>
    497c:	8a2a      	ldrh	r2, [r5, #16]
    497e:	8859      	ldrh	r1, [r3, #2]
    4980:	4291      	cmp	r1, r2
    4982:	d2e9      	bcs.n	4958 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    4984:	805a      	strh	r2, [r3, #2]
    4986:	e7e7      	b.n	4958 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    4988:	6862      	ldr	r2, [r4, #4]
    498a:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    498e:	8992      	ldrh	r2, [r2, #12]
    4990:	1a9b      	subs	r3, r3, r2
    4992:	2b03      	cmp	r3, #3
    4994:	d9e1      	bls.n	495a <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    4996:	2310      	movs	r3, #16
    4998:	9000      	str	r0, [sp, #0]
    499a:	eb0d 0203 	add.w	r2, sp, r3
    499e:	686e      	ldr	r6, [r5, #4]
    49a0:	4629      	mov	r1, r5
    49a2:	4640      	mov	r0, r8
    49a4:	47b0      	blx	r6
	if (read < 0) {
    49a6:	1e02      	subs	r2, r0, #0
    49a8:	dbd4      	blt.n	4954 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    49aa:	7c23      	ldrb	r3, [r4, #16]
    49ac:	429a      	cmp	r2, r3
    49ae:	d1d1      	bne.n	4954 <find_type_cb+0x28>
    49b0:	a904      	add	r1, sp, #16
    49b2:	68e0      	ldr	r0, [r4, #12]
    49b4:	f7fb fdff 	bl	5b6 <memcmp>
    49b8:	2800      	cmp	r0, #0
    49ba:	d1cb      	bne.n	4954 <find_type_cb+0x28>
	data->err = 0x00;
    49bc:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    49be:	6860      	ldr	r0, [r4, #4]
    49c0:	2104      	movs	r1, #4
    49c2:	3008      	adds	r0, #8
    49c4:	f00e fc88 	bl	132d8 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    49c8:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    49ca:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    49cc:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    49ce:	8043      	strh	r3, [r0, #2]
    49d0:	e7c2      	b.n	4958 <find_type_cb+0x2c>
	...

000049d4 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    49d4:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    49d6:	2317      	movs	r3, #23
{
    49d8:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    49da:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    49de:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    49e0:	4906      	ldr	r1, [pc, #24]	; (49fc <bt_att_connected+0x28>)
    49e2:	30a4      	adds	r0, #164	; 0xa4
    49e4:	f00f fc2c 	bl	14240 <k_delayed_work_init>
	list->head = NULL;
    49e8:	2300      	movs	r3, #0
    49ea:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    49ee:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    49f2:	6820      	ldr	r0, [r4, #0]
}
    49f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    49f8:	f001 bb82 	b.w	6100 <bt_gatt_connected>
    49fc:	00004eaf 	.word	0x00004eaf

00004a00 <check_perm>:
{
    4a00:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    4a02:	f012 0f01 	tst.w	r2, #1
    4a06:	7c8b      	ldrb	r3, [r1, #18]
    4a08:	d004      	beq.n	4a14 <check_perm+0x14>
    4a0a:	f013 0f15 	tst.w	r3, #21
    4a0e:	d018      	beq.n	4a42 <check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    4a10:	684c      	ldr	r4, [r1, #4]
    4a12:	b1b4      	cbz	r4, 4a42 <check_perm+0x42>
	if ((mask & BT_GATT_PERM_WRITE) &&
    4a14:	0794      	lsls	r4, r2, #30
    4a16:	d504      	bpl.n	4a22 <check_perm+0x22>
    4a18:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    4a1c:	d013      	beq.n	4a46 <check_perm+0x46>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    4a1e:	6889      	ldr	r1, [r1, #8]
    4a20:	b189      	cbz	r1, 4a46 <check_perm+0x46>
	mask &= attr->perm;
    4a22:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    4a24:	f012 0f30 	tst.w	r2, #48	; 0x30
    4a28:	d002      	beq.n	4a30 <check_perm+0x30>
		if (conn->sec_level < BT_SECURITY_HIGH) {
    4a2a:	7a03      	ldrb	r3, [r0, #8]
    4a2c:	2b02      	cmp	r3, #2
    4a2e:	d90c      	bls.n	4a4a <check_perm+0x4a>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    4a30:	f012 020c 	ands.w	r2, r2, #12
    4a34:	d00b      	beq.n	4a4e <check_perm+0x4e>
		if (!conn->encrypt) {
    4a36:	7a83      	ldrb	r3, [r0, #10]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    4a38:	2b00      	cmp	r3, #0
    4a3a:	bf14      	ite	ne
    4a3c:	2000      	movne	r0, #0
    4a3e:	200f      	moveq	r0, #15
    4a40:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    4a42:	2002      	movs	r0, #2
    4a44:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    4a46:	2003      	movs	r0, #3
    4a48:	bd10      	pop	{r4, pc}
			return BT_ATT_ERR_AUTHENTICATION;
    4a4a:	2005      	movs	r0, #5
    4a4c:	bd10      	pop	{r4, pc}
	return 0;
    4a4e:	4610      	mov	r0, r2
}
    4a50:	bd10      	pop	{r4, pc}

00004a52 <read_type_cb>:
{
    4a52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    4a56:	680f      	ldr	r7, [r1, #0]
{
    4a58:	4606      	mov	r6, r0
    4a5a:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4a5c:	6800      	ldr	r0, [r0, #0]
    4a5e:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    4a60:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    4a64:	f7fd f8c2 	bl	1bec <bt_uuid_cmp>
    4a68:	4680      	mov	r8, r0
    4a6a:	2800      	cmp	r0, #0
    4a6c:	d14e      	bne.n	4b0c <read_type_cb+0xba>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4a6e:	2215      	movs	r2, #21
    4a70:	4631      	mov	r1, r6
    4a72:	4648      	mov	r0, r9
    4a74:	f7ff ffc4 	bl	4a00 <check_perm>
    4a78:	4605      	mov	r5, r0
    4a7a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4a7c:	b148      	cbz	r0, 4a92 <read_type_cb+0x40>
		if (data->rsp->len) {
    4a7e:	68e3      	ldr	r3, [r4, #12]
    4a80:	781d      	ldrb	r5, [r3, #0]
    4a82:	b115      	cbz	r5, 4a8a <read_type_cb+0x38>
			data->err = 0x00;
    4a84:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    4a88:	4645      	mov	r5, r8
}
    4a8a:	4628      	mov	r0, r5
    4a8c:	b003      	add	sp, #12
    4a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    4a92:	68a0      	ldr	r0, [r4, #8]
    4a94:	2102      	movs	r1, #2
    4a96:	3008      	adds	r0, #8
    4a98:	f00e fc1e 	bl	132d8 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    4a9c:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4a9e:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    4aa0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    4aa2:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4aa4:	898a      	ldrh	r2, [r1, #12]
    4aa6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    4aaa:	6889      	ldr	r1, [r1, #8]
    4aac:	f8d6 8004 	ldr.w	r8, [r6, #4]
    4ab0:	9500      	str	r5, [sp, #0]
    4ab2:	1a9b      	subs	r3, r3, r2
    4ab4:	b29b      	uxth	r3, r3
    4ab6:	440a      	add	r2, r1
    4ab8:	4648      	mov	r0, r9
    4aba:	4631      	mov	r1, r6
    4abc:	47c0      	blx	r8
	if (read < 0) {
    4abe:	1e01      	subs	r1, r0, #0
    4ac0:	da08      	bge.n	4ad4 <read_type_cb+0x82>
	if (err < 0 && err >= -0xff) {
    4ac2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    4ac6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    4ac8:	bf9a      	itte	ls
    4aca:	4249      	negls	r1, r1
    4acc:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    4ace:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    4ad0:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    4ad2:	e7da      	b.n	4a8a <read_type_cb+0x38>
	if (!data->rsp->len) {
    4ad4:	68e0      	ldr	r0, [r4, #12]
    4ad6:	7802      	ldrb	r2, [r0, #0]
    4ad8:	1c8b      	adds	r3, r1, #2
    4ada:	b982      	cbnz	r2, 4afe <read_type_cb+0xac>
		data->rsp->len = read + sizeof(*data->item);
    4adc:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    4ade:	68a0      	ldr	r0, [r4, #8]
    4ae0:	3008      	adds	r0, #8
    4ae2:	f00e fbf9 	bl	132d8 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    4ae6:	68a3      	ldr	r3, [r4, #8]
    4ae8:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    4aec:	899b      	ldrh	r3, [r3, #12]
    4aee:	1aed      	subs	r5, r5, r3
    4af0:	68e3      	ldr	r3, [r4, #12]
    4af2:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    4af4:	429d      	cmp	r5, r3
    4af6:	bfd4      	ite	le
    4af8:	2500      	movle	r5, #0
    4afa:	2501      	movgt	r5, #1
    4afc:	e7c5      	b.n	4a8a <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    4afe:	429a      	cmp	r2, r3
    4b00:	d0ed      	beq.n	4ade <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    4b02:	68a2      	ldr	r2, [r4, #8]
    4b04:	8993      	ldrh	r3, [r2, #12]
    4b06:	3b02      	subs	r3, #2
    4b08:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    4b0a:	e7be      	b.n	4a8a <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    4b0c:	2501      	movs	r5, #1
    4b0e:	e7bc      	b.n	4a8a <read_type_cb+0x38>

00004b10 <att_cb.isra.4>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    4b10:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    4b12:	7800      	ldrb	r0, [r0, #0]
    4b14:	f7ff fe26 	bl	4764 <att_op_get_type>
    4b18:	3801      	subs	r0, #1
    4b1a:	b2c0      	uxtb	r0, r0
    4b1c:	2804      	cmp	r0, #4
    4b1e:	bf9a      	itte	ls
    4b20:	4b02      	ldrls	r3, [pc, #8]	; (4b2c <att_cb.isra.4+0x1c>)
    4b22:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    4b26:	4802      	ldrhi	r0, [pc, #8]	; (4b30 <att_cb.isra.4+0x20>)
}
    4b28:	bd08      	pop	{r3, pc}
    4b2a:	bf00      	nop
    4b2c:	00014b3c 	.word	0x00014b3c
    4b30:	00004ef1 	.word	0x00004ef1

00004b34 <uuid_create>:
{
    4b34:	b510      	push	{r4, lr}
	switch (buf->len) {
    4b36:	898a      	ldrh	r2, [r1, #12]
    4b38:	2a02      	cmp	r2, #2
{
    4b3a:	4604      	mov	r4, r0
	switch (buf->len) {
    4b3c:	d003      	beq.n	4b46 <uuid_create+0x12>
    4b3e:	2a10      	cmp	r2, #16
    4b40:	d00a      	beq.n	4b58 <uuid_create+0x24>
	return false;
    4b42:	2000      	movs	r0, #0
}
    4b44:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    4b46:	2300      	movs	r3, #0
    4b48:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    4b4a:	f101 0008 	add.w	r0, r1, #8
    4b4e:	f00e fbf2 	bl	13336 <net_buf_simple_pull_le16>
    4b52:	8060      	strh	r0, [r4, #2]
		return true;
    4b54:	2001      	movs	r0, #1
    4b56:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    4b58:	2302      	movs	r3, #2
    4b5a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    4b5e:	6889      	ldr	r1, [r1, #8]
    4b60:	f7fb fd3e 	bl	5e0 <memcpy>
    4b64:	e7f6      	b.n	4b54 <uuid_create+0x20>
	...

00004b68 <att_req_sent>:
{
    4b68:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4b6a:	2104      	movs	r1, #4
    4b6c:	f7ff fd7f 	bl	466e <bt_l2cap_le_lookup_tx_cid>
    4b70:	4604      	mov	r4, r0
    4b72:	30cc      	adds	r0, #204	; 0xcc
    4b74:	f00f f838 	bl	13be8 <_impl_k_sem_give>
	if (att->req) {
    4b78:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4b7c:	b143      	cbz	r3, 4b90 <att_req_sent+0x28>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4b7e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    4b82:	f247 5230 	movw	r2, #30000	; 0x7530
    4b86:	4803      	ldr	r0, [pc, #12]	; (4b94 <att_req_sent+0x2c>)
}
    4b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b8c:	f00f bbd0 	b.w	14330 <k_delayed_work_submit_to_queue>
    4b90:	bd10      	pop	{r4, pc}
    4b92:	bf00      	nop
    4b94:	20004160 	.word	0x20004160

00004b98 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    4b98:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    4b9a:	4d0f      	ldr	r5, [pc, #60]	; (4bd8 <bt_att_accept+0x40>)
    4b9c:	682c      	ldr	r4, [r5, #0]
{
    4b9e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    4ba0:	b9b4      	cbnz	r4, 4bd0 <bt_att_accept+0x38>
			continue;
		}

		att->chan.chan.ops = &ops;
    4ba2:	4b0e      	ldr	r3, [pc, #56]	; (4bdc <bt_att_accept+0x44>)
    4ba4:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4ba6:	f105 0394 	add.w	r3, r5, #148	; 0x94
    4baa:	f3bf 8f5b 	dmb	ish
    4bae:	e853 2f00 	ldrex	r2, [r3]
    4bb2:	e843 4100 	strex	r1, r4, [r3]
    4bb6:	2900      	cmp	r1, #0
    4bb8:	d1f9      	bne.n	4bae <bt_att_accept+0x16>
    4bba:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4bbe:	2203      	movs	r2, #3
    4bc0:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    4bc4:	4611      	mov	r1, r2
    4bc6:	f00f f805 	bl	13bd4 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    4bca:	6035      	str	r5, [r6, #0]

		return 0;
    4bcc:	4620      	mov	r0, r4
    4bce:	bd70      	pop	{r4, r5, r6, pc}
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    4bd0:	f06f 000b 	mvn.w	r0, #11
}
    4bd4:	bd70      	pop	{r4, r5, r6, pc}
    4bd6:	bf00      	nop
    4bd8:	2000037c 	.word	0x2000037c
    4bdc:	2000cd14 	.word	0x2000cd14

00004be0 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    4be0:	6803      	ldr	r3, [r0, #0]
    4be2:	7b1b      	ldrb	r3, [r3, #12]
    4be4:	2b03      	cmp	r3, #3
    4be6:	d10a      	bne.n	4bfe <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4be8:	f3bf 8f5b 	dmb	ish
    4bec:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    4bf0:	f3bf 8f5b 	dmb	ish
    4bf4:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    4bf8:	f000 0001 	and.w	r0, r0, #1
    4bfc:	4770      	bx	lr
    4bfe:	2001      	movs	r0, #1
}
    4c00:	4770      	bx	lr

00004c02 <att_prepare_write_req>:
    4c02:	2006      	movs	r0, #6
    4c04:	4770      	bx	lr

00004c06 <att_send_req>:
{
    4c06:	b570      	push	{r4, r5, r6, lr}
    4c08:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    4c0a:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    4c0e:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    4c12:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4c14:	4630      	mov	r0, r6
    4c16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4c1a:	f00f f845 	bl	13ca8 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    4c1e:	4628      	mov	r0, r5
    4c20:	f7ff ffde 	bl	4be0 <att_is_connected>
    4c24:	b928      	cbnz	r0, 4c32 <att_send_req+0x2c>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4c26:	4630      	mov	r0, r6
    4c28:	f00e ffde 	bl	13be8 <_impl_k_sem_give>
		return -ENOTCONN;
    4c2c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    4c30:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    4c32:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    4c34:	f106 0008 	add.w	r0, r6, #8
    4c38:	f00e fb85 	bl	13346 <net_buf_simple_headroom>
	state->len = buf->len;
    4c3c:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    4c3e:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    4c40:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    4c42:	6920      	ldr	r0, [r4, #16]
    4c44:	682d      	ldr	r5, [r5, #0]
    4c46:	f00e fb43 	bl	132d0 <net_buf_ref>
    4c4a:	6923      	ldr	r3, [r4, #16]
    4c4c:	4606      	mov	r6, r0
    4c4e:	6898      	ldr	r0, [r3, #8]
    4c50:	f7ff ff5e 	bl	4b10 <att_cb.isra.4>
    4c54:	4632      	mov	r2, r6
    4c56:	4603      	mov	r3, r0
    4c58:	2104      	movs	r1, #4
    4c5a:	4628      	mov	r0, r5
    4c5c:	f7ff fcb7 	bl	45ce <bt_l2cap_send_cb>
	return 0;
    4c60:	2000      	movs	r0, #0
}
    4c62:	bd70      	pop	{r4, r5, r6, pc}

00004c64 <att_handle_rsp>:
{
    4c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4c68:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    4c6a:	30a4      	adds	r0, #164	; 0xa4
{
    4c6c:	461e      	mov	r6, r3
    4c6e:	460f      	mov	r7, r1
    4c70:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    4c72:	f00f fb03 	bl	1427c <k_delayed_work_cancel>
	if (!att->req) {
    4c76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4c7a:	b1db      	cbz	r3, 4cb4 <att_handle_rsp+0x50>
	if (att->req->buf) {
    4c7c:	6918      	ldr	r0, [r3, #16]
    4c7e:	b128      	cbz	r0, 4c8c <att_handle_rsp+0x28>
		net_buf_unref(att->req->buf);
    4c80:	f00e faf8 	bl	13274 <net_buf_unref>
		att->req->buf = NULL;
    4c84:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4c88:	2200      	movs	r2, #0
    4c8a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    4c8c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    4c90:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    4c92:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    4c96:	2500      	movs	r5, #0
    4c98:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    4c9a:	463a      	mov	r2, r7
    4c9c:	9300      	str	r3, [sp, #0]
    4c9e:	4631      	mov	r1, r6
    4ca0:	4643      	mov	r3, r8
    4ca2:	47c8      	blx	r9
	if (!att->req->func) {
    4ca4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    4ca8:	6843      	ldr	r3, [r0, #4]
    4caa:	b90b      	cbnz	r3, 4cb0 <att_handle_rsp+0x4c>
		att_req_destroy(att->req);
    4cac:	f7ff fd72 	bl	4794 <att_req_destroy>
	att->req = NULL;
    4cb0:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    4cb4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4cb8:	b159      	cbz	r1, 4cd2 <att_handle_rsp+0x6e>
	if (list->tail == node) {
    4cba:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	list->head = node->next;
    4cbe:	680b      	ldr	r3, [r1, #0]
    4cc0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	if (list->tail == node) {
    4cc4:	4291      	cmp	r1, r2
		list->tail = list->head;
    4cc6:	bf08      	it	eq
    4cc8:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    4ccc:	4620      	mov	r0, r4
    4cce:	f7ff ff9a 	bl	4c06 <att_send_req>
}
    4cd2:	2000      	movs	r0, #0
    4cd4:	b003      	add	sp, #12
    4cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004cda <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    4cda:	898a      	ldrh	r2, [r1, #12]
    4cdc:	6889      	ldr	r1, [r1, #8]
    4cde:	2300      	movs	r3, #0
    4ce0:	f7ff bfc0 	b.w	4c64 <att_handle_rsp>

00004ce4 <att_handle_exec_write_rsp>:
    4ce4:	f7ff bff9 	b.w	4cda <att_confirm>

00004ce8 <att_handle_prepare_write_rsp>:
    4ce8:	f7ff bff7 	b.w	4cda <att_confirm>

00004cec <att_handle_write_rsp>:
    4cec:	f7ff bff5 	b.w	4cda <att_confirm>

00004cf0 <att_handle_read_mult_rsp>:
    4cf0:	f7ff bff3 	b.w	4cda <att_confirm>

00004cf4 <att_handle_read_blob_rsp>:
    4cf4:	f7ff bff1 	b.w	4cda <att_confirm>

00004cf8 <att_handle_read_rsp>:
    4cf8:	f7ff bfef 	b.w	4cda <att_confirm>

00004cfc <att_handle_read_type_rsp>:
    4cfc:	f7ff bfed 	b.w	4cda <att_confirm>

00004d00 <att_handle_find_type_rsp>:
    4d00:	f7ff bfeb 	b.w	4cda <att_confirm>

00004d04 <att_handle_find_info_rsp>:
    4d04:	f7ff bfe9 	b.w	4cda <att_confirm>

00004d08 <att_mtu_rsp>:
{
    4d08:	b410      	push	{r4}
    4d0a:	460a      	mov	r2, r1
	if (!att) {
    4d0c:	b190      	cbz	r0, 4d34 <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
    4d0e:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    4d10:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    4d12:	2b16      	cmp	r3, #22
    4d14:	d805      	bhi.n	4d22 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    4d16:	2200      	movs	r2, #0
    4d18:	2304      	movs	r3, #4
    4d1a:	4611      	mov	r1, r2
}
    4d1c:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    4d1e:	f7ff bfa1 	b.w	4c64 <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    4d22:	2bf9      	cmp	r3, #249	; 0xf9
    4d24:	bf28      	it	cs
    4d26:	23f9      	movcs	r3, #249	; 0xf9
    4d28:	8743      	strh	r3, [r0, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    4d2a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	return att_handle_rsp(att, rsp, buf->len, 0);
    4d2e:	8992      	ldrh	r2, [r2, #12]
    4d30:	2300      	movs	r3, #0
    4d32:	e7f3      	b.n	4d1c <att_mtu_rsp+0x14>
}
    4d34:	bc10      	pop	{r4}
    4d36:	4770      	bx	lr

00004d38 <bt_att_encrypt_change>:
{
    4d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d3c:	4604      	mov	r4, r0
	if (hci_status) {
    4d3e:	460d      	mov	r5, r1
    4d40:	b131      	cbz	r1, 4d50 <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    4d42:	2200      	movs	r2, #0
    4d44:	2305      	movs	r3, #5
    4d46:	4611      	mov	r1, r2
}
    4d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    4d4c:	f7ff bf8a 	b.w	4c64 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    4d50:	6806      	ldr	r6, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
    4d52:	7a33      	ldrb	r3, [r6, #8]
    4d54:	2b01      	cmp	r3, #1
    4d56:	d023      	beq.n	4da0 <bt_att_encrypt_change+0x68>
	if (!att->req || !att->req->retrying) {
    4d58:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4d5c:	b303      	cbz	r3, 4da0 <bt_att_encrypt_change+0x68>
    4d5e:	7d1b      	ldrb	r3, [r3, #20]
    4d60:	b1f3      	cbz	r3, 4da0 <bt_att_encrypt_change+0x68>
	k_sem_take(&att->tx_sem, K_FOREVER);
    4d62:	f100 07cc 	add.w	r7, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4d66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4d6a:	4638      	mov	r0, r7
    4d6c:	f00e ff9c 	bl	13ca8 <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    4d70:	4620      	mov	r0, r4
    4d72:	f7ff ff35 	bl	4be0 <att_is_connected>
    4d76:	b920      	cbnz	r0, 4d82 <bt_att_encrypt_change+0x4a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4d78:	4638      	mov	r0, r7
}
    4d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4d7e:	f00e bf33 	b.w	13be8 <_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    4d82:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4d86:	691f      	ldr	r7, [r3, #16]
    4d88:	68b8      	ldr	r0, [r7, #8]
    4d8a:	f7ff fec1 	bl	4b10 <att_cb.isra.4>
    4d8e:	463a      	mov	r2, r7
    4d90:	4603      	mov	r3, r0
    4d92:	2104      	movs	r1, #4
    4d94:	4630      	mov	r0, r6
    4d96:	f7ff fc1a 	bl	45ce <bt_l2cap_send_cb>
	att->req->buf = NULL;
    4d9a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4d9e:	611d      	str	r5, [r3, #16]
    4da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004da4 <att_error_rsp>:
{
    4da4:	b570      	push	{r4, r5, r6, lr}
    4da6:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    4da8:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    4daa:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    4dae:	b332      	cbz	r2, 4dfe <att_error_rsp+0x5a>
	if (att->req->buf) {
    4db0:	6913      	ldr	r3, [r2, #16]
    4db2:	b12b      	cbz	r3, 4dc0 <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    4db4:	8995      	ldrh	r5, [r2, #12]
    4db6:	6919      	ldr	r1, [r3, #16]
    4db8:	4429      	add	r1, r5
    4dba:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    4dbc:	89d1      	ldrh	r1, [r2, #14]
    4dbe:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    4dc0:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    4dc2:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    4dc4:	b9e3      	cbnz	r3, 4e00 <att_error_rsp+0x5c>
	switch (err) {
    4dc6:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    4dc8:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    4dca:	d006      	beq.n	4dda <att_error_rsp+0x36>
    4dcc:	2d0f      	cmp	r5, #15
    4dce:	d117      	bne.n	4e00 <att_error_rsp+0x5c>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    4dd0:	7a03      	ldrb	r3, [r0, #8]
    4dd2:	2b01      	cmp	r3, #1
    4dd4:	d814      	bhi.n	4e00 <att_error_rsp+0x5c>
		sec = BT_SECURITY_MEDIUM;
    4dd6:	2102      	movs	r1, #2
    4dd8:	e007      	b.n	4dea <att_error_rsp+0x46>
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    4dda:	7a03      	ldrb	r3, [r0, #8]
    4ddc:	2b01      	cmp	r3, #1
    4dde:	d9fa      	bls.n	4dd6 <att_error_rsp+0x32>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    4de0:	2b02      	cmp	r3, #2
    4de2:	d00a      	beq.n	4dfa <att_error_rsp+0x56>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    4de4:	2b03      	cmp	r3, #3
    4de6:	d10b      	bne.n	4e00 <att_error_rsp+0x5c>
			sec = BT_SECURITY_FIPS;
    4de8:	2104      	movs	r1, #4
	return bt_conn_security(conn, sec);
    4dea:	f7fe fecb 	bl	3b84 <bt_conn_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    4dee:	b938      	cbnz	r0, 4e00 <att_error_rsp+0x5c>
		att->req->retrying = true;
    4df0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4df4:	2201      	movs	r2, #1
    4df6:	751a      	strb	r2, [r3, #20]
		return 0;
    4df8:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_HIGH;
    4dfa:	2103      	movs	r1, #3
    4dfc:	e7f5      	b.n	4dea <att_error_rsp+0x46>
		err = BT_ATT_ERR_UNLIKELY;
    4dfe:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    4e00:	2200      	movs	r2, #0
    4e02:	462b      	mov	r3, r5
    4e04:	4620      	mov	r0, r4
    4e06:	4611      	mov	r1, r2
}
    4e08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    4e0c:	f7ff bf2a 	b.w	4c64 <att_handle_rsp>

00004e10 <att_reset>:
{
    4e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4e12:	f100 0394 	add.w	r3, r0, #148	; 0x94
    4e16:	4605      	mov	r5, r0
    4e18:	f3bf 8f5b 	dmb	ish
    4e1c:	e853 2f00 	ldrex	r2, [r3]
    4e20:	f042 0204 	orr.w	r2, r2, #4
    4e24:	e843 2100 	strex	r1, r2, [r3]
    4e28:	2900      	cmp	r1, #0
    4e2a:	d1f7      	bne.n	4e1c <att_reset+0xc>
    4e2c:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    4e30:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    4e34:	4620      	mov	r0, r4
    4e36:	f00e fed7 	bl	13be8 <_impl_k_sem_give>
    4e3a:	4620      	mov	r0, r4
    4e3c:	f00e fed4 	bl	13be8 <_impl_k_sem_give>
    4e40:	4620      	mov	r0, r4
    4e42:	f00e fed1 	bl	13be8 <_impl_k_sem_give>
    4e46:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4e4a:	b98c      	cbnz	r4, 4e70 <att_reset+0x60>
	if (!att->req) {
    4e4c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    4e50:	2200      	movs	r2, #0
    4e52:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    4e56:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    4e5a:	b90b      	cbnz	r3, 4e60 <att_reset+0x50>
}
    4e5c:	b003      	add	sp, #12
    4e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    4e60:	230e      	movs	r3, #14
    4e62:	4611      	mov	r1, r2
    4e64:	4628      	mov	r0, r5
}
    4e66:	b003      	add	sp, #12
    4e68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    4e6c:	f7ff befa 	b.w	4c64 <att_handle_rsp>
	return node->next;
    4e70:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    4e72:	6867      	ldr	r7, [r4, #4]
    4e74:	b12f      	cbz	r7, 4e82 <att_reset+0x72>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    4e76:	2300      	movs	r3, #0
    4e78:	9400      	str	r4, [sp, #0]
    4e7a:	461a      	mov	r2, r3
    4e7c:	210e      	movs	r1, #14
    4e7e:	4618      	mov	r0, r3
    4e80:	47b8      	blx	r7
		att_req_destroy(req);
    4e82:	4620      	mov	r0, r4
    4e84:	f7ff fc86 	bl	4794 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    4e88:	2e00      	cmp	r6, #0
    4e8a:	d0df      	beq.n	4e4c <att_reset+0x3c>
    4e8c:	4634      	mov	r4, r6
    4e8e:	6836      	ldr	r6, [r6, #0]
    4e90:	e7ef      	b.n	4e72 <att_reset+0x62>

00004e92 <bt_att_disconnected>:
{
    4e92:	b510      	push	{r4, lr}
    4e94:	4604      	mov	r4, r0
	att_reset(att);
    4e96:	f7ff ffbb 	bl	4e10 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    4e9a:	6820      	ldr	r0, [r4, #0]
    4e9c:	f001 f93a 	bl	6114 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    4ea0:	4620      	mov	r0, r4
    4ea2:	22e4      	movs	r2, #228	; 0xe4
    4ea4:	2100      	movs	r1, #0
}
    4ea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
    4eaa:	f7fb bbc5 	b.w	638 <memset>

00004eae <att_timeout>:
{
    4eae:	b510      	push	{r4, lr}
    4eb0:	4604      	mov	r4, r0
	att_reset(att);
    4eb2:	38a4      	subs	r0, #164	; 0xa4
    4eb4:	f7ff ffac 	bl	4e10 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    4eb8:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    4ebc:	f001 f92a 	bl	6114 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    4ec0:	2300      	movs	r3, #0
    4ec2:	f844 3ca4 	str.w	r3, [r4, #-164]
    4ec6:	bd10      	pop	{r4, pc}

00004ec8 <att_chan_get>:
{
    4ec8:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    4eca:	7b03      	ldrb	r3, [r0, #12]
    4ecc:	2b03      	cmp	r3, #3
    4ece:	d001      	beq.n	4ed4 <att_chan_get+0xc>
		return NULL;
    4ed0:	2000      	movs	r0, #0
    4ed2:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    4ed4:	2104      	movs	r1, #4
    4ed6:	f7ff fbda 	bl	468e <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    4eda:	2800      	cmp	r0, #0
    4edc:	d0f8      	beq.n	4ed0 <att_chan_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ede:	f3bf 8f5b 	dmb	ish
    4ee2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    4ee6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    4eea:	075b      	lsls	r3, r3, #29
    4eec:	d4f0      	bmi.n	4ed0 <att_chan_get+0x8>
}
    4eee:	bd08      	pop	{r3, pc}

00004ef0 <att_pdu_sent>:
{
    4ef0:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4ef2:	2104      	movs	r1, #4
    4ef4:	f7ff fbbb 	bl	466e <bt_l2cap_le_lookup_tx_cid>
}
    4ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4efc:	30cc      	adds	r0, #204	; 0xcc
    4efe:	f00e be73 	b.w	13be8 <_impl_k_sem_give>

00004f02 <att_rsp_sent>:
{
    4f02:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4f04:	2104      	movs	r1, #4
    4f06:	f7ff fbb2 	bl	466e <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4f0a:	f3bf 8f5b 	dmb	ish
    4f0e:	f100 0394 	add.w	r3, r0, #148	; 0x94
    4f12:	e853 2f00 	ldrex	r2, [r3]
    4f16:	f022 0201 	bic.w	r2, r2, #1
    4f1a:	e843 2100 	strex	r1, r2, [r3]
    4f1e:	2900      	cmp	r1, #0
    4f20:	d1f7      	bne.n	4f12 <att_rsp_sent+0x10>
    4f22:	f3bf 8f5b 	dmb	ish
    4f26:	30cc      	adds	r0, #204	; 0xcc
}
    4f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4f2c:	f00e be5c 	b.w	13be8 <_impl_k_sem_give>

00004f30 <att_cfm_sent>:
{
    4f30:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    4f32:	2104      	movs	r1, #4
    4f34:	f7ff fb9b 	bl	466e <bt_l2cap_le_lookup_tx_cid>
    4f38:	f3bf 8f5b 	dmb	ish
    4f3c:	f100 0394 	add.w	r3, r0, #148	; 0x94
    4f40:	e853 2f00 	ldrex	r2, [r3]
    4f44:	f022 0202 	bic.w	r2, r2, #2
    4f48:	e843 2100 	strex	r1, r2, [r3]
    4f4c:	2900      	cmp	r1, #0
    4f4e:	d1f7      	bne.n	4f40 <att_cfm_sent+0x10>
    4f50:	f3bf 8f5b 	dmb	ish
    4f54:	30cc      	adds	r0, #204	; 0xcc
}
    4f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4f5a:	f00e be45 	b.w	13be8 <_impl_k_sem_give>

00004f5e <write_cb>:
{
    4f5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4f62:	680f      	ldr	r7, [r1, #0]
{
    4f64:	460c      	mov	r4, r1
    4f66:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    4f68:	4601      	mov	r1, r0
    4f6a:	222a      	movs	r2, #42	; 0x2a
    4f6c:	4638      	mov	r0, r7
    4f6e:	f7ff fd47 	bl	4a00 <check_perm>
    4f72:	4605      	mov	r5, r0
    4f74:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    4f76:	b9e8      	cbnz	r0, 4fb4 <write_cb+0x56>
	write = attr->write(data->conn, attr, data->value, data->len,
    4f78:	8a62      	ldrh	r2, [r4, #18]
    4f7a:	9001      	str	r0, [sp, #4]
    4f7c:	9200      	str	r2, [sp, #0]
    4f7e:	7c23      	ldrb	r3, [r4, #16]
    4f80:	f8d6 8008 	ldr.w	r8, [r6, #8]
    4f84:	68e2      	ldr	r2, [r4, #12]
    4f86:	4631      	mov	r1, r6
    4f88:	4638      	mov	r0, r7
    4f8a:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    4f8c:	2800      	cmp	r0, #0
    4f8e:	db02      	blt.n	4f96 <write_cb+0x38>
    4f90:	7c23      	ldrb	r3, [r4, #16]
    4f92:	4298      	cmp	r0, r3
    4f94:	d00b      	beq.n	4fae <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    4f96:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    4f9a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    4f9c:	bf9a      	itte	ls
    4f9e:	4240      	negls	r0, r0
    4fa0:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    4fa2:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    4fa4:	7520      	strb	r0, [r4, #20]
}
    4fa6:	4628      	mov	r0, r5
    4fa8:	b002      	add	sp, #8
    4faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    4fae:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    4fb0:	2501      	movs	r5, #1
    4fb2:	e7f8      	b.n	4fa6 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
    4fb4:	2500      	movs	r5, #0
    4fb6:	e7f6      	b.n	4fa6 <write_cb+0x48>

00004fb8 <read_cb>:
{
    4fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4fbc:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4fbe:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    4fc0:	f8d1 9000 	ldr.w	r9, [r1]
{
    4fc4:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4fc6:	3008      	adds	r0, #8
    4fc8:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    4fca:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4fce:	f00e f983 	bl	132d8 <net_buf_simple_add>
	data->err = 0x00;
    4fd2:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    4fd4:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    4fd6:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    4fd8:	2215      	movs	r2, #21
    4fda:	4631      	mov	r1, r6
    4fdc:	4640      	mov	r0, r8
    4fde:	f7ff fd0f 	bl	4a00 <check_perm>
    4fe2:	4605      	mov	r5, r0
    4fe4:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    4fe6:	bb08      	cbnz	r0, 502c <read_cb+0x74>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    4fe8:	68a1      	ldr	r1, [r4, #8]
    4fea:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    4fee:	898a      	ldrh	r2, [r1, #12]
    4ff0:	6889      	ldr	r1, [r1, #8]
    4ff2:	88a0      	ldrh	r0, [r4, #4]
    4ff4:	9000      	str	r0, [sp, #0]
    4ff6:	1a9b      	subs	r3, r3, r2
    4ff8:	6877      	ldr	r7, [r6, #4]
    4ffa:	440a      	add	r2, r1
    4ffc:	b29b      	uxth	r3, r3
    4ffe:	4631      	mov	r1, r6
    5000:	4640      	mov	r0, r8
    5002:	47b8      	blx	r7
	if (read < 0) {
    5004:	1e01      	subs	r1, r0, #0
    5006:	da0b      	bge.n	5020 <read_cb+0x68>
	if (err < 0 && err >= -0xff) {
    5008:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    500c:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    500e:	bf9a      	itte	ls
    5010:	4249      	negls	r1, r1
    5012:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    5014:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    5016:	7421      	strb	r1, [r4, #16]
}
    5018:	4628      	mov	r0, r5
    501a:	b003      	add	sp, #12
    501c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    5020:	68a0      	ldr	r0, [r4, #8]
    5022:	3008      	adds	r0, #8
    5024:	f00e f958 	bl	132d8 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    5028:	2501      	movs	r5, #1
    502a:	e7f5      	b.n	5018 <read_cb+0x60>
		return BT_GATT_ITER_STOP;
    502c:	463d      	mov	r5, r7
    502e:	e7f3      	b.n	5018 <read_cb+0x60>

00005030 <bt_att_create_pdu>:
{
    5030:	b538      	push	{r3, r4, r5, lr}
    5032:	460d      	mov	r5, r1
    5034:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    5036:	f7ff ff47 	bl	4ec8 <att_chan_get>
	if (!att) {
    503a:	b180      	cbz	r0, 505e <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    503c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    5040:	3401      	adds	r4, #1
    5042:	429c      	cmp	r4, r3
    5044:	d80b      	bhi.n	505e <bt_att_create_pdu+0x2e>
	buf = bt_l2cap_create_pdu(NULL, 0);
    5046:	2100      	movs	r1, #0
    5048:	4608      	mov	r0, r1
    504a:	f7ff fabd 	bl	45c8 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    504e:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    5050:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5052:	3008      	adds	r0, #8
    5054:	f00e f940 	bl	132d8 <net_buf_simple_add>
	hdr->code = op;
    5058:	7005      	strb	r5, [r0, #0]
}
    505a:	4620      	mov	r0, r4
    505c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    505e:	2400      	movs	r4, #0
    5060:	e7fb      	b.n	505a <bt_att_create_pdu+0x2a>
	...

00005064 <att_indicate>:
{
    5064:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5066:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    5068:	f101 0008 	add.w	r0, r1, #8
    506c:	f00e f963 	bl	13336 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    5070:	2200      	movs	r2, #0
    5072:	211e      	movs	r1, #30
    5074:	4620      	mov	r0, r4
    5076:	f7ff ffdb 	bl	5030 <bt_att_create_pdu>
	if (!buf) {
    507a:	4602      	mov	r2, r0
    507c:	b120      	cbz	r0, 5088 <att_indicate+0x24>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    507e:	4b03      	ldr	r3, [pc, #12]	; (508c <att_indicate+0x28>)
    5080:	2104      	movs	r1, #4
    5082:	4620      	mov	r0, r4
    5084:	f7ff faa3 	bl	45ce <bt_l2cap_send_cb>
}
    5088:	2000      	movs	r0, #0
    508a:	bd10      	pop	{r4, pc}
    508c:	00004f31 	.word	0x00004f31

00005090 <att_mtu_req>:
{
    5090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    5094:	688b      	ldr	r3, [r1, #8]
    5096:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    5098:	2d16      	cmp	r5, #22
{
    509a:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    509c:	d920      	bls.n	50e0 <att_mtu_req+0x50>
	struct bt_conn *conn = att->chan.chan.conn;
    509e:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    50a2:	2202      	movs	r2, #2
    50a4:	2103      	movs	r1, #3
    50a6:	4640      	mov	r0, r8
    50a8:	f7ff ffc2 	bl	5030 <bt_att_create_pdu>
	if (!pdu) {
    50ac:	4607      	mov	r7, r0
    50ae:	b1d0      	cbz	r0, 50e6 <att_mtu_req+0x56>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    50b0:	2102      	movs	r1, #2
    50b2:	3008      	adds	r0, #8
    50b4:	f00e f910 	bl	132d8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    50b8:	2400      	movs	r4, #0
    50ba:	f06f 0306 	mvn.w	r3, #6
    50be:	7003      	strb	r3, [r0, #0]
    50c0:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    50c2:	4b0a      	ldr	r3, [pc, #40]	; (50ec <att_mtu_req+0x5c>)
    50c4:	4640      	mov	r0, r8
    50c6:	463a      	mov	r2, r7
    50c8:	2104      	movs	r1, #4
    50ca:	f7ff fa80 	bl	45ce <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    50ce:	2df9      	cmp	r5, #249	; 0xf9
    50d0:	bf28      	it	cs
    50d2:	25f9      	movcs	r5, #249	; 0xf9
    50d4:	8775      	strh	r5, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    50d6:	f8a6 505a 	strh.w	r5, [r6, #90]	; 0x5a
	return 0;
    50da:	4620      	mov	r0, r4
    50dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    50e0:	2004      	movs	r0, #4
    50e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    50e6:	200e      	movs	r0, #14
}
    50e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50ec:	00004f03 	.word	0x00004f03

000050f0 <send_err_rsp.part.9>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    50f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50f4:	4688      	mov	r8, r1
    50f6:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    50f8:	2101      	movs	r1, #1
    50fa:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    50fc:	4605      	mov	r5, r0
    50fe:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    5100:	f7ff ff96 	bl	5030 <bt_att_create_pdu>
	if (!buf) {
    5104:	4604      	mov	r4, r0
    5106:	b180      	cbz	r0, 512a <send_err_rsp.part.9+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    5108:	2104      	movs	r1, #4
    510a:	3008      	adds	r0, #8
    510c:	f00e f8e4 	bl	132d8 <net_buf_simple_add>
	rsp->request = req;
    5110:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    5114:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    5116:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    511a:	4622      	mov	r2, r4
    511c:	4628      	mov	r0, r5
    511e:	4b04      	ldr	r3, [pc, #16]	; (5130 <send_err_rsp.part.9+0x40>)
    5120:	2104      	movs	r1, #4
}
    5122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    5126:	f7ff ba52 	b.w	45ce <bt_l2cap_send_cb>
    512a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    512e:	bf00      	nop
    5130:	00004f03 	.word	0x00004f03

00005134 <bt_att_recv>:
{
    5134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
    5138:	898b      	ldrh	r3, [r1, #12]
{
    513a:	4604      	mov	r4, r0
    513c:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    513e:	2b00      	cmp	r3, #0
    5140:	d05e      	beq.n	5200 <bt_att_recv+0xcc>
	struct bt_att_hdr *hdr = (void *)buf->data;
    5142:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5144:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    5146:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    514a:	f00e f8e4 	bl	13316 <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    514e:	4a2d      	ldr	r2, [pc, #180]	; (5204 <bt_att_recv+0xd0>)
    5150:	783d      	ldrb	r5, [r7, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5152:	2300      	movs	r3, #0
    5154:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    5156:	f812 e033 	ldrb.w	lr, [r2, r3, lsl #3]
    515a:	45ae      	cmp	lr, r5
    515c:	ea4f 00c3 	mov.w	r0, r3, lsl #3
    5160:	d118      	bne.n	5194 <bt_att_recv+0x60>
		if (handler->type == ATT_REQUEST &&
    5162:	4402      	add	r2, r0
    5164:	7895      	ldrb	r5, [r2, #2]
    5166:	2d01      	cmp	r5, #1
    5168:	d024      	beq.n	51b4 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    516a:	2d05      	cmp	r5, #5
    516c:	d133      	bne.n	51d6 <bt_att_recv+0xa2>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    516e:	f3bf 8f5b 	dmb	ish
    5172:	f104 0294 	add.w	r2, r4, #148	; 0x94
    5176:	e852 3f00 	ldrex	r3, [r2]
    517a:	f043 0e02 	orr.w	lr, r3, #2
    517e:	e842 ec00 	strex	ip, lr, [r2]
    5182:	f1bc 0f00 	cmp.w	ip, #0
    5186:	d1f6      	bne.n	5176 <bt_att_recv+0x42>
    5188:	f3bf 8f5b 	dmb	ish
    518c:	079b      	lsls	r3, r3, #30
    518e:	d522      	bpl.n	51d6 <bt_att_recv+0xa2>
    5190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    5194:	3301      	adds	r3, #1
    5196:	2b1b      	cmp	r3, #27
    5198:	d1dd      	bne.n	5156 <bt_att_recv+0x22>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    519a:	4628      	mov	r0, r5
    519c:	f7ff fae2 	bl	4764 <att_op_get_type>
    51a0:	b370      	cbz	r0, 5200 <bt_att_recv+0xcc>
	if (!req) {
    51a2:	b36d      	cbz	r5, 5200 <bt_att_recv+0xcc>
    51a4:	2306      	movs	r3, #6
    51a6:	2200      	movs	r2, #0
    51a8:	4629      	mov	r1, r5
    51aa:	6820      	ldr	r0, [r4, #0]
}
    51ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    51b0:	f7ff bf9e 	b.w	50f0 <send_err_rsp.part.9>
    51b4:	f104 0294 	add.w	r2, r4, #148	; 0x94
    51b8:	f3bf 8f5b 	dmb	ish
    51bc:	e852 3f00 	ldrex	r3, [r2]
    51c0:	f043 0e01 	orr.w	lr, r3, #1
    51c4:	e842 ec00 	strex	ip, lr, [r2]
    51c8:	f1bc 0f00 	cmp.w	ip, #0
    51cc:	d1f6      	bne.n	51bc <bt_att_recv+0x88>
    51ce:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    51d2:	07da      	lsls	r2, r3, #31
    51d4:	d414      	bmi.n	5200 <bt_att_recv+0xcc>
	if (buf->len < handler->expect_len) {
    51d6:	180b      	adds	r3, r1, r0
    51d8:	89b1      	ldrh	r1, [r6, #12]
    51da:	785a      	ldrb	r2, [r3, #1]
    51dc:	4291      	cmp	r1, r2
    51de:	d30d      	bcc.n	51fc <bt_att_recv+0xc8>
		err = handler->func(att, buf);
    51e0:	685b      	ldr	r3, [r3, #4]
    51e2:	4631      	mov	r1, r6
    51e4:	4620      	mov	r0, r4
    51e6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    51e8:	2d01      	cmp	r5, #1
		err = handler->func(att, buf);
    51ea:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    51ec:	d108      	bne.n	5200 <bt_att_recv+0xcc>
    51ee:	b138      	cbz	r0, 5200 <bt_att_recv+0xcc>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    51f0:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    51f2:	b129      	cbz	r1, 5200 <bt_att_recv+0xcc>
    51f4:	2200      	movs	r2, #0
    51f6:	e7d8      	b.n	51aa <bt_att_recv+0x76>
		err = BT_ATT_ERR_INVALID_PDU;
    51f8:	2304      	movs	r3, #4
    51fa:	e7f9      	b.n	51f0 <bt_att_recv+0xbc>
	if (handler->type == ATT_REQUEST && err) {
    51fc:	2d01      	cmp	r5, #1
    51fe:	d0fb      	beq.n	51f8 <bt_att_recv+0xc4>
    5200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5204:	00014b50 	.word	0x00014b50

00005208 <att_read_group_req>:
{
    5208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    520c:	898b      	ldrh	r3, [r1, #12]
    520e:	2b06      	cmp	r3, #6
{
    5210:	b08d      	sub	sp, #52	; 0x34
    5212:	4680      	mov	r8, r0
    5214:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5216:	d001      	beq.n	521c <att_read_group_req+0x14>
    5218:	2b14      	cmp	r3, #20
    521a:	d168      	bne.n	52ee <att_read_group_req+0xe6>
	req = (void *)buf->data;
    521c:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    521e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5220:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5224:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5228:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    522a:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    522c:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    522e:	f00e f872 	bl	13316 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5232:	4621      	mov	r1, r4
    5234:	4638      	mov	r0, r7
    5236:	f7ff fc7d 	bl	4b34 <uuid_create>
    523a:	2800      	cmp	r0, #0
    523c:	d059      	beq.n	52f2 <att_read_group_req+0xea>
	if (!start || !end) {
    523e:	2d00      	cmp	r5, #0
    5240:	d05a      	beq.n	52f8 <att_read_group_req+0xf0>
    5242:	2400      	movs	r4, #0
    5244:	2e00      	cmp	r6, #0
    5246:	d056      	beq.n	52f6 <att_read_group_req+0xee>
	if (start > end) {
    5248:	42b5      	cmp	r5, r6
    524a:	d855      	bhi.n	52f8 <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    524c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5250:	4669      	mov	r1, sp
    5252:	4638      	mov	r0, r7
    5254:	f88d 4000 	strb.w	r4, [sp]
    5258:	f8ad 3002 	strh.w	r3, [sp, #2]
    525c:	f7fc fcc6 	bl	1bec <bt_uuid_cmp>
    5260:	bb38      	cbnz	r0, 52b2 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    5262:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    5266:	2214      	movs	r2, #20
    5268:	2100      	movs	r1, #0
    526a:	a807      	add	r0, sp, #28
    526c:	f7fb f9e4 	bl	638 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    5270:	2201      	movs	r2, #1
    5272:	2111      	movs	r1, #17
    5274:	4648      	mov	r0, r9
    5276:	f7ff fedb 	bl	5030 <bt_att_create_pdu>
    527a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    527c:	2800      	cmp	r0, #0
    527e:	d038      	beq.n	52f2 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5280:	2101      	movs	r1, #1
    5282:	3008      	adds	r0, #8
	data.uuid = uuid;
    5284:	9708      	str	r7, [sp, #32]
	data.att = att;
    5286:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    528a:	f00e f825 	bl	132d8 <net_buf_simple_add>
	data.rsp->len = 0;
    528e:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    5290:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5292:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    5294:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    5296:	4a1c      	ldr	r2, [pc, #112]	; (5308 <att_read_group_req+0x100>)
	data.group = NULL;
    5298:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    529a:	4631      	mov	r1, r6
    529c:	4628      	mov	r0, r5
    529e:	f000 fe45 	bl	5f2c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    52a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    52a4:	781c      	ldrb	r4, [r3, #0]
    52a6:	b9d4      	cbnz	r4, 52de <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    52a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    52aa:	f00d ffe3 	bl	13274 <net_buf_unref>
    52ae:	230a      	movs	r3, #10
    52b0:	e00c      	b.n	52cc <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    52b2:	f642 0301 	movw	r3, #10241	; 0x2801
    52b6:	a901      	add	r1, sp, #4
    52b8:	4638      	mov	r0, r7
    52ba:	f88d 4004 	strb.w	r4, [sp, #4]
    52be:	f8ad 3006 	strh.w	r3, [sp, #6]
    52c2:	f7fc fc93 	bl	1bec <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    52c6:	2800      	cmp	r0, #0
    52c8:	d0cb      	beq.n	5262 <att_read_group_req+0x5a>
    52ca:	2310      	movs	r3, #16
    52cc:	462a      	mov	r2, r5
    52ce:	2110      	movs	r1, #16
    52d0:	4648      	mov	r0, r9
    52d2:	f7ff ff0d 	bl	50f0 <send_err_rsp.part.9>
}
    52d6:	4620      	mov	r0, r4
    52d8:	b00d      	add	sp, #52	; 0x34
    52da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    52de:	4b0b      	ldr	r3, [pc, #44]	; (530c <att_read_group_req+0x104>)
    52e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    52e2:	2104      	movs	r1, #4
    52e4:	4648      	mov	r0, r9
    52e6:	f7ff f972 	bl	45ce <bt_l2cap_send_cb>
		return 0;
    52ea:	2400      	movs	r4, #0
    52ec:	e7f3      	b.n	52d6 <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    52ee:	2404      	movs	r4, #4
    52f0:	e7f1      	b.n	52d6 <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    52f2:	240e      	movs	r4, #14
    52f4:	e7ef      	b.n	52d6 <att_read_group_req+0xce>
			*err = 0;
    52f6:	4635      	mov	r5, r6
    52f8:	2301      	movs	r3, #1
    52fa:	462a      	mov	r2, r5
    52fc:	2110      	movs	r1, #16
    52fe:	4648      	mov	r0, r9
    5300:	f7ff fef6 	bl	50f0 <send_err_rsp.part.9>
    5304:	e7f1      	b.n	52ea <att_read_group_req+0xe2>
    5306:	bf00      	nop
    5308:	000047c5 	.word	0x000047c5
    530c:	00004f03 	.word	0x00004f03

00005310 <att_read_mult_req>:
{
    5310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5314:	6804      	ldr	r4, [r0, #0]
{
    5316:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    5318:	2214      	movs	r2, #20
{
    531a:	4606      	mov	r6, r0
    531c:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    531e:	a801      	add	r0, sp, #4
    5320:	2100      	movs	r1, #0
    5322:	f7fb f989 	bl	638 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    5326:	2200      	movs	r2, #0
    5328:	210f      	movs	r1, #15
    532a:	4620      	mov	r0, r4
    532c:	f7ff fe80 	bl	5030 <bt_att_create_pdu>
    5330:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    5332:	b368      	cbz	r0, 5390 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5334:	f8df 9060 	ldr.w	r9, [pc, #96]	; 5398 <att_read_mult_req+0x88>
	data.att = att;
    5338:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    533a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    533e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    5342:	89ab      	ldrh	r3, [r5, #12]
    5344:	2b01      	cmp	r3, #1
    5346:	d806      	bhi.n	5356 <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5348:	4b12      	ldr	r3, [pc, #72]	; (5394 <att_read_mult_req+0x84>)
    534a:	9a03      	ldr	r2, [sp, #12]
    534c:	2104      	movs	r1, #4
    534e:	4620      	mov	r0, r4
    5350:	f7ff f93d 	bl	45ce <bt_l2cap_send_cb>
    5354:	e018      	b.n	5388 <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    5356:	4638      	mov	r0, r7
    5358:	f00d ffed 	bl	13336 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    535c:	ab01      	add	r3, sp, #4
    535e:	464a      	mov	r2, r9
    5360:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    5362:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    5364:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    5368:	f000 fde0 	bl	5f2c <bt_gatt_foreach_attr>
		if (data.err) {
    536c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5370:	2b00      	cmp	r3, #0
    5372:	d0e6      	beq.n	5342 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    5374:	9803      	ldr	r0, [sp, #12]
    5376:	f00d ff7d 	bl	13274 <net_buf_unref>
    537a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    537e:	4632      	mov	r2, r6
    5380:	210e      	movs	r1, #14
    5382:	4620      	mov	r0, r4
    5384:	f7ff feb4 	bl	50f0 <send_err_rsp.part.9>
	return 0;
    5388:	2000      	movs	r0, #0
}
    538a:	b007      	add	sp, #28
    538c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    5390:	200e      	movs	r0, #14
    5392:	e7fa      	b.n	538a <att_read_mult_req+0x7a>
    5394:	00004f03 	.word	0x00004f03
    5398:	00004fb9 	.word	0x00004fb9

0000539c <att_read_rsp>:
{
    539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53a0:	4607      	mov	r7, r0
    53a2:	b086      	sub	sp, #24
    53a4:	460c      	mov	r4, r1
    53a6:	4690      	mov	r8, r2
	if (!handle) {
    53a8:	461d      	mov	r5, r3
    53aa:	b3a3      	cbz	r3, 5416 <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    53ac:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    53ae:	2214      	movs	r2, #20
    53b0:	2100      	movs	r1, #0
    53b2:	a801      	add	r0, sp, #4
    53b4:	f7fb f940 	bl	638 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    53b8:	2200      	movs	r2, #0
    53ba:	4641      	mov	r1, r8
    53bc:	4630      	mov	r0, r6
    53be:	f7ff fe37 	bl	5030 <bt_att_create_pdu>
    53c2:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    53c4:	b348      	cbz	r0, 541a <att_read_rsp+0x7e>
	data.offset = offset;
    53c6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    53ca:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    53ce:	2301      	movs	r3, #1
    53d0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    53d4:	4a12      	ldr	r2, [pc, #72]	; (5420 <att_read_rsp+0x84>)
	data.att = att;
    53d6:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    53d8:	ab01      	add	r3, sp, #4
    53da:	4629      	mov	r1, r5
    53dc:	4628      	mov	r0, r5
    53de:	f000 fda5 	bl	5f2c <bt_gatt_foreach_attr>
	if (data.err) {
    53e2:	f89d 7014 	ldrb.w	r7, [sp, #20]
    53e6:	b17f      	cbz	r7, 5408 <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    53e8:	9803      	ldr	r0, [sp, #12]
    53ea:	f00d ff43 	bl	13274 <net_buf_unref>
	if (!req) {
    53ee:	b13c      	cbz	r4, 5400 <att_read_rsp+0x64>
    53f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    53f4:	462a      	mov	r2, r5
    53f6:	4621      	mov	r1, r4
    53f8:	4630      	mov	r0, r6
    53fa:	f7ff fe79 	bl	50f0 <send_err_rsp.part.9>
		return 0;
    53fe:	2400      	movs	r4, #0
}
    5400:	4620      	mov	r0, r4
    5402:	b006      	add	sp, #24
    5404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    5408:	4b06      	ldr	r3, [pc, #24]	; (5424 <att_read_rsp+0x88>)
    540a:	9a03      	ldr	r2, [sp, #12]
    540c:	2104      	movs	r1, #4
    540e:	4630      	mov	r0, r6
    5410:	f7ff f8dd 	bl	45ce <bt_l2cap_send_cb>
    5414:	e7f3      	b.n	53fe <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    5416:	2401      	movs	r4, #1
    5418:	e7f2      	b.n	5400 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    541a:	240e      	movs	r4, #14
    541c:	e7f0      	b.n	5400 <att_read_rsp+0x64>
    541e:	bf00      	nop
    5420:	00004fb9 	.word	0x00004fb9
    5424:	00004f03 	.word	0x00004f03

00005428 <att_read_blob_req>:
{
    5428:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    542a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    542c:	8813      	ldrh	r3, [r2, #0]
    542e:	8852      	ldrh	r2, [r2, #2]
    5430:	9200      	str	r2, [sp, #0]
    5432:	210c      	movs	r1, #12
    5434:	220d      	movs	r2, #13
    5436:	f7ff ffb1 	bl	539c <att_read_rsp>
}
    543a:	b003      	add	sp, #12
    543c:	f85d fb04 	ldr.w	pc, [sp], #4

00005440 <att_read_req>:
{
    5440:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    5442:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    5444:	2200      	movs	r2, #0
    5446:	881b      	ldrh	r3, [r3, #0]
    5448:	9200      	str	r2, [sp, #0]
    544a:	210a      	movs	r1, #10
    544c:	220b      	movs	r2, #11
    544e:	f7ff ffa5 	bl	539c <att_read_rsp>
}
    5452:	b003      	add	sp, #12
    5454:	f85d fb04 	ldr.w	pc, [sp], #4

00005458 <att_read_type_req>:
{
    5458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    545c:	898b      	ldrh	r3, [r1, #12]
    545e:	2b06      	cmp	r3, #6
{
    5460:	b08d      	sub	sp, #52	; 0x34
    5462:	4607      	mov	r7, r0
    5464:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    5466:	d001      	beq.n	546c <att_read_type_req+0x14>
    5468:	2b14      	cmp	r3, #20
    546a:	d152      	bne.n	5512 <att_read_type_req+0xba>
	req = (void *)buf->data;
    546c:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    546e:	2104      	movs	r1, #4
	req = (void *)buf->data;
    5470:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    5474:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5478:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    547a:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    547c:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    5480:	f00d ff49 	bl	13316 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    5484:	4631      	mov	r1, r6
    5486:	4640      	mov	r0, r8
    5488:	f7ff fb54 	bl	4b34 <uuid_create>
    548c:	b198      	cbz	r0, 54b6 <att_read_type_req+0x5e>
	if (!start || !end) {
    548e:	2d00      	cmp	r5, #0
    5490:	d042      	beq.n	5518 <att_read_type_req+0xc0>
    5492:	2c00      	cmp	r4, #0
    5494:	d03f      	beq.n	5516 <att_read_type_req+0xbe>
	if (start > end) {
    5496:	42a5      	cmp	r5, r4
    5498:	d83e      	bhi.n	5518 <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    549a:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    549c:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    549e:	2100      	movs	r1, #0
    54a0:	eb0d 0002 	add.w	r0, sp, r2
    54a4:	f7fb f8c8 	bl	638 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    54a8:	2201      	movs	r2, #1
    54aa:	2109      	movs	r1, #9
    54ac:	4630      	mov	r0, r6
    54ae:	f7ff fdbf 	bl	5030 <bt_att_create_pdu>
    54b2:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    54b4:	b908      	cbnz	r0, 54ba <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    54b6:	240e      	movs	r4, #14
    54b8:	e027      	b.n	550a <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    54ba:	2101      	movs	r1, #1
    54bc:	3008      	adds	r0, #8
	data.att = att;
    54be:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    54c0:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    54c4:	f00d ff08 	bl	132d8 <net_buf_simple_add>
	data.rsp->len = 0;
    54c8:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    54ca:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    54cc:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    54ce:	4621      	mov	r1, r4
	data.rsp->len = 0;
    54d0:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    54d2:	4a14      	ldr	r2, [pc, #80]	; (5524 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    54d4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    54d8:	4628      	mov	r0, r5
    54da:	ab06      	add	r3, sp, #24
    54dc:	f000 fd26 	bl	5f2c <bt_gatt_foreach_attr>
	if (data.err) {
    54e0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    54e4:	b15c      	cbz	r4, 54fe <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    54e6:	9808      	ldr	r0, [sp, #32]
    54e8:	f00d fec4 	bl	13274 <net_buf_unref>
    54ec:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    54f0:	462a      	mov	r2, r5
    54f2:	2108      	movs	r1, #8
    54f4:	4630      	mov	r0, r6
    54f6:	f7ff fdfb 	bl	50f0 <send_err_rsp.part.9>
		return 0;
    54fa:	2400      	movs	r4, #0
    54fc:	e005      	b.n	550a <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    54fe:	4b0a      	ldr	r3, [pc, #40]	; (5528 <att_read_type_req+0xd0>)
    5500:	9a08      	ldr	r2, [sp, #32]
    5502:	2104      	movs	r1, #4
    5504:	4630      	mov	r0, r6
    5506:	f7ff f862 	bl	45ce <bt_l2cap_send_cb>
}
    550a:	4620      	mov	r0, r4
    550c:	b00d      	add	sp, #52	; 0x34
    550e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    5512:	2404      	movs	r4, #4
    5514:	e7f9      	b.n	550a <att_read_type_req+0xb2>
			*err = 0;
    5516:	4625      	mov	r5, r4
    5518:	2301      	movs	r3, #1
    551a:	462a      	mov	r2, r5
    551c:	2108      	movs	r1, #8
    551e:	4648      	mov	r0, r9
    5520:	e7e9      	b.n	54f6 <att_read_type_req+0x9e>
    5522:	bf00      	nop
    5524:	00004a53 	.word	0x00004a53
    5528:	00004f03 	.word	0x00004f03

0000552c <att_find_type_req>:
{
    552c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5530:	f8d0 9000 	ldr.w	r9, [r0]
{
    5534:	4680      	mov	r8, r0
	req = (void *)buf->data;
    5536:	4608      	mov	r0, r1
{
    5538:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    553a:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    553e:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    5540:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    5542:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    5544:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    5546:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    5548:	f00d fee5 	bl	13316 <net_buf_simple_pull>
    554c:	4682      	mov	sl, r0
	if (!start || !end) {
    554e:	2d00      	cmp	r5, #0
    5550:	d057      	beq.n	5602 <att_find_type_req+0xd6>
    5552:	2400      	movs	r4, #0
    5554:	2f00      	cmp	r7, #0
    5556:	d053      	beq.n	5600 <att_find_type_req+0xd4>
	if (start > end) {
    5558:	42bd      	cmp	r5, r7
    555a:	d852      	bhi.n	5602 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    555c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    5560:	a902      	add	r1, sp, #8
    5562:	a801      	add	r0, sp, #4
    5564:	f8ad 6006 	strh.w	r6, [sp, #6]
    5568:	f88d 4004 	strb.w	r4, [sp, #4]
    556c:	f88d 4008 	strb.w	r4, [sp, #8]
    5570:	f8ad 300a 	strh.w	r3, [sp, #10]
    5574:	f7fc fb3a 	bl	1bec <bt_uuid_cmp>
    5578:	4606      	mov	r6, r0
    557a:	b148      	cbz	r0, 5590 <att_find_type_req+0x64>
    557c:	230a      	movs	r3, #10
    557e:	462a      	mov	r2, r5
    5580:	2106      	movs	r1, #6
    5582:	4648      	mov	r0, r9
    5584:	f7ff fdb4 	bl	50f0 <send_err_rsp.part.9>
}
    5588:	4620      	mov	r0, r4
    558a:	b009      	add	sp, #36	; 0x24
    558c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    5590:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    5594:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    5598:	2214      	movs	r2, #20
    559a:	4631      	mov	r1, r6
    559c:	a803      	add	r0, sp, #12
    559e:	f7fb f84b 	bl	638 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    55a2:	4632      	mov	r2, r6
    55a4:	2107      	movs	r1, #7
    55a6:	4648      	mov	r0, r9
    55a8:	f7ff fd42 	bl	5030 <bt_att_create_pdu>
    55ac:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    55ae:	b328      	cbz	r0, 55fc <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    55b0:	230a      	movs	r3, #10
    55b2:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    55b6:	4a14      	ldr	r2, [pc, #80]	; (5608 <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    55b8:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    55bc:	ab03      	add	r3, sp, #12
    55be:	4639      	mov	r1, r7
    55c0:	4628      	mov	r0, r5
	data.att = att;
    55c2:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    55c6:	9605      	str	r6, [sp, #20]
	data.value = value;
    55c8:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    55cc:	f000 fcae 	bl	5f2c <bt_gatt_foreach_attr>
	if (data.err) {
    55d0:	f89d 401d 	ldrb.w	r4, [sp, #29]
    55d4:	b15c      	cbz	r4, 55ee <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    55d6:	9804      	ldr	r0, [sp, #16]
    55d8:	f00d fe4c 	bl	13274 <net_buf_unref>
    55dc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    55e0:	462a      	mov	r2, r5
    55e2:	2106      	movs	r1, #6
    55e4:	4648      	mov	r0, r9
    55e6:	f7ff fd83 	bl	50f0 <send_err_rsp.part.9>
		return 0;
    55ea:	2400      	movs	r4, #0
    55ec:	e7cc      	b.n	5588 <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    55ee:	4b07      	ldr	r3, [pc, #28]	; (560c <att_find_type_req+0xe0>)
    55f0:	9a04      	ldr	r2, [sp, #16]
    55f2:	2104      	movs	r1, #4
    55f4:	4648      	mov	r0, r9
    55f6:	f7fe ffea 	bl	45ce <bt_l2cap_send_cb>
    55fa:	e7c5      	b.n	5588 <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    55fc:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    55fe:	e7c3      	b.n	5588 <att_find_type_req+0x5c>
			*err = 0;
    5600:	463d      	mov	r5, r7
    5602:	2301      	movs	r3, #1
    5604:	e7ec      	b.n	55e0 <att_find_type_req+0xb4>
    5606:	bf00      	nop
    5608:	0000492d 	.word	0x0000492d
    560c:	00004f03 	.word	0x00004f03

00005610 <att_find_info_req>:
{
    5610:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    5612:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    5614:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    5616:	881d      	ldrh	r5, [r3, #0]
{
    5618:	b085      	sub	sp, #20
    561a:	4607      	mov	r7, r0
	if (!start || !end) {
    561c:	b375      	cbz	r5, 567c <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    561e:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    5620:	b35c      	cbz	r4, 567a <att_find_info_req+0x6a>
	if (start > end) {
    5622:	42a5      	cmp	r5, r4
    5624:	d82a      	bhi.n	567c <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    5626:	2210      	movs	r2, #16
    5628:	2100      	movs	r1, #0
    562a:	4668      	mov	r0, sp
    562c:	f7fb f804 	bl	638 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    5630:	2200      	movs	r2, #0
    5632:	2105      	movs	r1, #5
    5634:	4630      	mov	r0, r6
    5636:	f7ff fcfb 	bl	5030 <bt_att_create_pdu>
    563a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    563c:	b910      	cbnz	r0, 5644 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    563e:	200e      	movs	r0, #14
}
    5640:	b005      	add	sp, #20
    5642:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    5644:	4621      	mov	r1, r4
    5646:	466b      	mov	r3, sp
    5648:	4a0d      	ldr	r2, [pc, #52]	; (5680 <att_find_info_req+0x70>)
	data.att = att;
    564a:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    564c:	4628      	mov	r0, r5
    564e:	f000 fc6d 	bl	5f2c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    5652:	9c02      	ldr	r4, [sp, #8]
    5654:	b94c      	cbnz	r4, 566a <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    5656:	9801      	ldr	r0, [sp, #4]
    5658:	f00d fe0c 	bl	13274 <net_buf_unref>
    565c:	230a      	movs	r3, #10
    565e:	462a      	mov	r2, r5
    5660:	2104      	movs	r1, #4
    5662:	4630      	mov	r0, r6
    5664:	f7ff fd44 	bl	50f0 <send_err_rsp.part.9>
    5668:	e005      	b.n	5676 <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    566a:	4b06      	ldr	r3, [pc, #24]	; (5684 <att_find_info_req+0x74>)
    566c:	9a01      	ldr	r2, [sp, #4]
    566e:	2104      	movs	r1, #4
    5670:	4630      	mov	r0, r6
    5672:	f7fe ffac 	bl	45ce <bt_l2cap_send_cb>
		return 0;
    5676:	2000      	movs	r0, #0
    5678:	e7e2      	b.n	5640 <att_find_info_req+0x30>
			*err = 0;
    567a:	4625      	mov	r5, r4
    567c:	2301      	movs	r3, #1
    567e:	e7ee      	b.n	565e <att_find_info_req+0x4e>
    5680:	00004893 	.word	0x00004893
    5684:	00004f03 	.word	0x00004f03

00005688 <att_write_rsp.part.10.constprop.13>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    5688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    568c:	b086      	sub	sp, #24
    568e:	4690      	mov	r8, r2
    5690:	4605      	mov	r5, r0
    5692:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    5694:	2218      	movs	r2, #24
    5696:	2100      	movs	r1, #0
    5698:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    569a:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    569c:	f7fa ffcc 	bl	638 <memset>
	if (rsp) {
    56a0:	f1b8 0f00 	cmp.w	r8, #0
    56a4:	d11f      	bne.n	56e6 <att_write_rsp.part.10.constprop.13+0x5e>
	data.offset = offset;
    56a6:	2300      	movs	r3, #0
    56a8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    56ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    56ae:	9303      	str	r3, [sp, #12]
	data.len = len;
    56b0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    56b4:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    56b8:	2301      	movs	r3, #1
    56ba:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    56be:	4a1b      	ldr	r2, [pc, #108]	; (572c <att_write_rsp.part.10.constprop.13+0xa4>)
	data.conn = conn;
    56c0:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    56c2:	466b      	mov	r3, sp
    56c4:	4639      	mov	r1, r7
    56c6:	4638      	mov	r0, r7
	data.op = op;
    56c8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    56cc:	f000 fc2e 	bl	5f2c <bt_gatt_foreach_attr>
	if (data.err) {
    56d0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    56d4:	b98c      	cbnz	r4, 56fa <att_write_rsp.part.10.constprop.13+0x72>
	if (data.buf) {
    56d6:	9a01      	ldr	r2, [sp, #4]
    56d8:	b1b2      	cbz	r2, 5708 <att_write_rsp.part.10.constprop.13+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    56da:	4b15      	ldr	r3, [pc, #84]	; (5730 <att_write_rsp.part.10.constprop.13+0xa8>)
    56dc:	2104      	movs	r1, #4
    56de:	4628      	mov	r0, r5
    56e0:	f7fe ff75 	bl	45ce <bt_l2cap_send_cb>
    56e4:	e011      	b.n	570a <att_write_rsp.part.10.constprop.13+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    56e6:	2200      	movs	r2, #0
    56e8:	4641      	mov	r1, r8
    56ea:	4628      	mov	r0, r5
    56ec:	f7ff fca0 	bl	5030 <bt_att_create_pdu>
    56f0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    56f2:	2800      	cmp	r0, #0
    56f4:	d1d7      	bne.n	56a6 <att_write_rsp.part.10.constprop.13+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    56f6:	240e      	movs	r4, #14
    56f8:	e007      	b.n	570a <att_write_rsp.part.10.constprop.13+0x82>
		if (rsp) {
    56fa:	f1b8 0f00 	cmp.w	r8, #0
    56fe:	d00f      	beq.n	5720 <att_write_rsp.part.10.constprop.13+0x98>
			net_buf_unref(data.buf);
    5700:	9801      	ldr	r0, [sp, #4]
    5702:	f00d fdb7 	bl	13274 <net_buf_unref>
	if (!req) {
    5706:	b926      	cbnz	r6, 5712 <att_write_rsp.part.10.constprop.13+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5708:	2400      	movs	r4, #0
}
    570a:	4620      	mov	r0, r4
    570c:	b006      	add	sp, #24
    570e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5712:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5716:	463a      	mov	r2, r7
    5718:	4631      	mov	r1, r6
    571a:	4628      	mov	r0, r5
    571c:	f7ff fce8 	bl	50f0 <send_err_rsp.part.9>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    5720:	2e18      	cmp	r6, #24
    5722:	d1f1      	bne.n	5708 <att_write_rsp.part.10.constprop.13+0x80>
    5724:	f89d 4014 	ldrb.w	r4, [sp, #20]
    5728:	e7ef      	b.n	570a <att_write_rsp.part.10.constprop.13+0x82>
    572a:	bf00      	nop
    572c:	00004f5f 	.word	0x00004f5f
    5730:	00004f03 	.word	0x00004f03

00005734 <att_signed_write_cmd>:
{
    5734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    5738:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    573a:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    573c:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    5740:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    5742:	4620      	mov	r0, r4
    5744:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    5746:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    574a:	f00d fddc 	bl	13306 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    574e:	4629      	mov	r1, r5
    5750:	4630      	mov	r0, r6
    5752:	f001 feab 	bl	74ac <bt_smp_sign_verify>
	if (err) {
    5756:	4607      	mov	r7, r0
    5758:	b9c8      	cbnz	r0, 578e <att_signed_write_cmd+0x5a>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    575a:	2101      	movs	r1, #1
    575c:	4620      	mov	r0, r4
    575e:	f00d fdda 	bl	13316 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    5762:	2102      	movs	r1, #2
    5764:	4620      	mov	r0, r4
    5766:	f00d fdd6 	bl	13316 <net_buf_simple_pull>
	if (!handle) {
    576a:	f1b8 0f00 	cmp.w	r8, #0
    576e:	d010      	beq.n	5792 <att_signed_write_cmd+0x5e>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    5770:	7b2b      	ldrb	r3, [r5, #12]
    5772:	3b0c      	subs	r3, #12
    5774:	b2db      	uxtb	r3, r3
    5776:	9301      	str	r3, [sp, #4]
    5778:	68ab      	ldr	r3, [r5, #8]
    577a:	9300      	str	r3, [sp, #0]
    577c:	463a      	mov	r2, r7
    577e:	4643      	mov	r3, r8
    5780:	4639      	mov	r1, r7
    5782:	4630      	mov	r0, r6
    5784:	f7ff ff80 	bl	5688 <att_write_rsp.part.10.constprop.13>
}
    5788:	b002      	add	sp, #8
    578a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    578e:	2000      	movs	r0, #0
    5790:	e7fa      	b.n	5788 <att_signed_write_cmd+0x54>
		return BT_ATT_ERR_INVALID_HANDLE;
    5792:	2001      	movs	r0, #1
    5794:	e7f8      	b.n	5788 <att_signed_write_cmd+0x54>

00005796 <att_write_cmd>:
{
    5796:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    5798:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    579a:	f101 0008 	add.w	r0, r1, #8
{
    579e:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    57a0:	f00d fdc9 	bl	13336 <net_buf_simple_pull_le16>
	if (!handle) {
    57a4:	4603      	mov	r3, r0
    57a6:	b150      	cbz	r0, 57be <att_write_cmd+0x28>
    57a8:	7b22      	ldrb	r2, [r4, #12]
    57aa:	9201      	str	r2, [sp, #4]
    57ac:	68a2      	ldr	r2, [r4, #8]
    57ae:	9200      	str	r2, [sp, #0]
    57b0:	2200      	movs	r2, #0
    57b2:	4611      	mov	r1, r2
    57b4:	4628      	mov	r0, r5
    57b6:	f7ff ff67 	bl	5688 <att_write_rsp.part.10.constprop.13>
}
    57ba:	b003      	add	sp, #12
    57bc:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    57be:	2001      	movs	r0, #1
    57c0:	e7fb      	b.n	57ba <att_write_cmd+0x24>

000057c2 <att_write_req>:
{
    57c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    57c4:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    57c6:	f101 0008 	add.w	r0, r1, #8
{
    57ca:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    57cc:	f00d fdb3 	bl	13336 <net_buf_simple_pull_le16>
	if (!handle) {
    57d0:	4603      	mov	r3, r0
    57d2:	b150      	cbz	r0, 57ea <att_write_req+0x28>
    57d4:	7b22      	ldrb	r2, [r4, #12]
    57d6:	9201      	str	r2, [sp, #4]
    57d8:	68a2      	ldr	r2, [r4, #8]
    57da:	9200      	str	r2, [sp, #0]
    57dc:	2112      	movs	r1, #18
    57de:	2213      	movs	r2, #19
    57e0:	4628      	mov	r0, r5
    57e2:	f7ff ff51 	bl	5688 <att_write_rsp.part.10.constprop.13>
}
    57e6:	b003      	add	sp, #12
    57e8:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    57ea:	2001      	movs	r0, #1
    57ec:	e7fb      	b.n	57e6 <att_write_req+0x24>
	...

000057f0 <bt_att_init>:

void bt_att_init(void)
{
    57f0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    57f2:	4803      	ldr	r0, [pc, #12]	; (5800 <bt_att_init+0x10>)
    57f4:	f7fe fe36 	bl	4464 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    57f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    57fc:	f000 bb38 	b.w	5e70 <bt_gatt_init>
    5800:	2000cd08 	.word	0x2000cd08

00005804 <bt_att_req_send>:

	return 0;
}

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    5804:	b510      	push	{r4, lr}
    5806:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    5808:	b1d8      	cbz	r0, 5842 <bt_att_req_send+0x3e>
    580a:	b1d1      	cbz	r1, 5842 <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    580c:	f7ff fb5c 	bl	4ec8 <att_chan_get>
	if (!att) {
    5810:	4603      	mov	r3, r0
    5812:	b1c8      	cbz	r0, 5848 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    5814:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    5818:	b172      	cbz	r2, 5838 <bt_att_req_send+0x34>
	if (!list->tail) {
    581a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	node->next = NULL;
    581e:	2000      	movs	r0, #0
    5820:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
    5822:	b92a      	cbnz	r2, 5830 <bt_att_req_send+0x2c>
		list->tail = node;
    5824:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		list->head = node;
    5828:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    582c:	4610      	mov	r0, r2
    582e:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    5830:	6014      	str	r4, [r2, #0]
		list->tail = node;
    5832:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    5836:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    5838:	4621      	mov	r1, r4
}
    583a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    583e:	f7ff b9e2 	b.w	4c06 <att_send_req>
		return -EINVAL;
    5842:	f06f 0015 	mvn.w	r0, #21
    5846:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    5848:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    584c:	bd10      	pop	{r4, pc}

0000584e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    584e:	4770      	bx	lr

00005850 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    5850:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    5852:	2000      	movs	r0, #0
    5854:	4770      	bx	lr

00005856 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    5856:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    5858:	2300      	movs	r3, #0
    585a:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    585c:	461a      	mov	r2, r3
    585e:	42aa      	cmp	r2, r5
    5860:	d107      	bne.n	5872 <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    5862:	890a      	ldrh	r2, [r1, #8]
    5864:	429a      	cmp	r2, r3
    5866:	d00d      	beq.n	5884 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    5868:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    586a:	68ca      	ldr	r2, [r1, #12]
	}
}
    586c:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    586e:	4619      	mov	r1, r3
    5870:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    5872:	680c      	ldr	r4, [r1, #0]
    5874:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    5878:	3201      	adds	r2, #1
    587a:	8924      	ldrh	r4, [r4, #8]
    587c:	42a3      	cmp	r3, r4
    587e:	bf38      	it	cc
    5880:	4623      	movcc	r3, r4
    5882:	e7ec      	b.n	585e <gatt_ccc_changed+0x8>
}
    5884:	bc30      	pop	{r4, r5}
    5886:	4770      	bx	lr

00005888 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    5888:	b410      	push	{r4}
    588a:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    588c:	69dc      	ldr	r4, [r3, #28]
    588e:	460a      	mov	r2, r1
    5890:	6999      	ldr	r1, [r3, #24]
    5892:	4623      	mov	r3, r4
}
    5894:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    5896:	4718      	bx	r3

00005898 <bt_gatt_attr_write_ccc>:
{
    5898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    589c:	4689      	mov	r9, r1
    589e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    58a2:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
    58a6:	2902      	cmp	r1, #2
{
    58a8:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
    58aa:	d84d      	bhi.n	5948 <bt_gatt_attr_write_ccc+0xb0>
	if (offset + len > sizeof(u16_t)) {
    58ac:	4419      	add	r1, r3
    58ae:	2902      	cmp	r1, #2
    58b0:	461e      	mov	r6, r3
    58b2:	dc4c      	bgt.n	594e <bt_gatt_attr_write_ccc+0xb6>
	return ((u16_t)src[1] << 8) | src[0];
    58b4:	7853      	ldrb	r3, [r2, #1]
    58b6:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    58b8:	2500      	movs	r5, #0
    58ba:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    58be:	6863      	ldr	r3, [r4, #4]
    58c0:	429d      	cmp	r5, r3
    58c2:	d207      	bcs.n	58d4 <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    58c4:	6821      	ldr	r1, [r4, #0]
    58c6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    58ca:	3101      	adds	r1, #1
    58cc:	4650      	mov	r0, sl
    58ce:	f7fe fbc1 	bl	4054 <bt_conn_addr_le_cmp>
    58d2:	b948      	cbnz	r0, 58e8 <bt_gatt_attr_write_ccc+0x50>
	if (i == ccc->cfg_len) {
    58d4:	6863      	ldr	r3, [r4, #4]
    58d6:	429d      	cmp	r5, r3
    58d8:	d130      	bne.n	593c <bt_gatt_attr_write_ccc+0xa4>
    58da:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    58de:	4545      	cmp	r5, r8
    58e0:	d104      	bne.n	58ec <bt_gatt_attr_write_ccc+0x54>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    58e2:	f06f 0610 	mvn.w	r6, #16
    58e6:	e026      	b.n	5936 <bt_gatt_attr_write_ccc+0x9e>
	for (i = 0; i < ccc->cfg_len; i++) {
    58e8:	3501      	adds	r5, #1
    58ea:	e7e8      	b.n	58be <bt_gatt_attr_write_ccc+0x26>
    58ec:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
    58f0:	6823      	ldr	r3, [r4, #0]
    58f2:	eb03 000b 	add.w	r0, r3, fp
    58f6:	f813 300b 	ldrb.w	r3, [r3, fp]
    58fa:	b113      	cbz	r3, 5902 <bt_gatt_attr_write_ccc+0x6a>
		for (i = 0; i < ccc->cfg_len; i++) {
    58fc:	f108 0801 	add.w	r8, r8, #1
    5900:	e7ed      	b.n	58de <bt_gatt_attr_write_ccc+0x46>
	memcpy(dst, src, sizeof(*dst));
    5902:	2207      	movs	r2, #7
    5904:	f10a 0148 	add.w	r1, sl, #72	; 0x48
    5908:	3001      	adds	r0, #1
    590a:	f7fa fe69 	bl	5e0 <memcpy>
			if (value) {
    590e:	b11f      	cbz	r7, 5918 <bt_gatt_attr_write_ccc+0x80>
				ccc->cfg[i].valid = true;
    5910:	6823      	ldr	r3, [r4, #0]
    5912:	2201      	movs	r2, #1
    5914:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
    5918:	6863      	ldr	r3, [r4, #4]
    591a:	4598      	cmp	r8, r3
    591c:	d0e1      	beq.n	58e2 <bt_gatt_attr_write_ccc+0x4a>
    591e:	4645      	mov	r5, r8
	ccc->cfg[i].value = value;
    5920:	6823      	ldr	r3, [r4, #0]
    5922:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
    5926:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
    5928:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
    592a:	42bb      	cmp	r3, r7
    592c:	d003      	beq.n	5936 <bt_gatt_attr_write_ccc+0x9e>
		gatt_ccc_changed(attr, ccc);
    592e:	4621      	mov	r1, r4
    5930:	4648      	mov	r0, r9
    5932:	f7ff ff90 	bl	5856 <gatt_ccc_changed>
}
    5936:	4630      	mov	r0, r6
    5938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (!value) {
    593c:	2f00      	cmp	r7, #0
    593e:	d1ef      	bne.n	5920 <bt_gatt_attr_write_ccc+0x88>
		ccc->cfg[i].valid = false;
    5940:	6822      	ldr	r2, [r4, #0]
    5942:	012b      	lsls	r3, r5, #4
    5944:	54d7      	strb	r7, [r2, r3]
    5946:	e7eb      	b.n	5920 <bt_gatt_attr_write_ccc+0x88>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5948:	f06f 0606 	mvn.w	r6, #6
    594c:	e7f3      	b.n	5936 <bt_gatt_attr_write_ccc+0x9e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    594e:	f06f 060c 	mvn.w	r6, #12
    5952:	e7f0      	b.n	5936 <bt_gatt_attr_write_ccc+0x9e>

00005954 <gatt_notify>:
{
    5954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5958:	468a      	mov	sl, r1
    595a:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    595c:	211b      	movs	r1, #27
    595e:	1c9a      	adds	r2, r3, #2
{
    5960:	4680      	mov	r8, r0
    5962:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    5964:	f7ff fb64 	bl	5030 <bt_att_create_pdu>
	if (!buf) {
    5968:	4604      	mov	r4, r0
    596a:	b1d0      	cbz	r0, 59a2 <gatt_notify+0x4e>
	nfy = net_buf_add(buf, sizeof(*nfy));
    596c:	f100 0708 	add.w	r7, r0, #8
    5970:	2102      	movs	r1, #2
    5972:	4638      	mov	r0, r7
    5974:	f00d fcb0 	bl	132d8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    5978:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    597a:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    597c:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    5980:	4638      	mov	r0, r7
    5982:	f00d fca9 	bl	132d8 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    5986:	4632      	mov	r2, r6
    5988:	4649      	mov	r1, r9
    598a:	4628      	mov	r0, r5
    598c:	f7fa fe28 	bl	5e0 <memcpy>
    5990:	4640      	mov	r0, r8
    5992:	2300      	movs	r3, #0
    5994:	4622      	mov	r2, r4
    5996:	2104      	movs	r1, #4
    5998:	f7fe fe19 	bl	45ce <bt_l2cap_send_cb>
	return 0;
    599c:	2000      	movs	r0, #0
    599e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    59a2:	f06f 000b 	mvn.w	r0, #11
}
    59a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000059ac <gatt_indicate>:
{
	struct net_buf *buf;
	struct bt_att_indicate *ind;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
				sizeof(*ind) + params->len);
    59ac:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
{
    59ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    59b2:	3202      	adds	r2, #2
{
    59b4:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    59b6:	211d      	movs	r1, #29
{
    59b8:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    59ba:	f7ff fb39 	bl	5030 <bt_att_create_pdu>
	if (!buf) {
    59be:	4605      	mov	r5, r0
    59c0:	b320      	cbz	r0, 5a0c <gatt_indicate+0x60>
		return -ENOMEM;
	}

	BT_DBG("conn %p handle 0x%04x", conn, params->attr->handle);

	ind = net_buf_add(buf, sizeof(*ind));
    59c2:	f100 0608 	add.w	r6, r0, #8
    59c6:	2102      	movs	r1, #2
    59c8:	4630      	mov	r0, r6
    59ca:	f00d fc85 	bl	132d8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    59ce:	69a3      	ldr	r3, [r4, #24]

	net_buf_add(buf, params->len);
    59d0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    59d2:	8a1b      	ldrh	r3, [r3, #16]
    59d4:	4607      	mov	r7, r0
	net_buf_add(buf, params->len);
    59d6:	4630      	mov	r0, r6
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    59d8:	f827 3b02 	strh.w	r3, [r7], #2
	net_buf_add(buf, params->len);
    59dc:	f00d fc7c 	bl	132d8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    59e0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    59e2:	6a21      	ldr	r1, [r4, #32]
    59e4:	4638      	mov	r0, r7
    59e6:	f7fa fdfb 	bl	5e0 <memcpy>
		req->func = func;
    59ea:	4b0a      	ldr	r3, [pc, #40]	; (5a14 <gatt_indicate+0x68>)
    59ec:	6063      	str	r3, [r4, #4]
		req->destroy = destroy;
    59ee:	2300      	movs	r3, #0
		req->buf = buf;
    59f0:	6125      	str	r5, [r4, #16]
		req->destroy = destroy;
    59f2:	60a3      	str	r3, [r4, #8]
		err = bt_att_req_send(conn, req);
    59f4:	4621      	mov	r1, r4
    59f6:	4640      	mov	r0, r8
    59f8:	f7ff ff04 	bl	5804 <bt_att_req_send>
	if (err) {
    59fc:	4604      	mov	r4, r0
    59fe:	b110      	cbz	r0, 5a06 <gatt_indicate+0x5a>
		net_buf_unref(buf);
    5a00:	4628      	mov	r0, r5
    5a02:	f00d fc37 	bl	13274 <net_buf_unref>

	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
}
    5a06:	4620      	mov	r0, r4
    5a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    5a0c:	f06f 040b 	mvn.w	r4, #11
    5a10:	e7f9      	b.n	5a06 <gatt_indicate+0x5a>
    5a12:	bf00      	nop
    5a14:	00005889 	.word	0x00005889

00005a18 <gatt_register>:
	if (sys_slist_is_empty(&db)) {
    5a18:	4a19      	ldr	r2, [pc, #100]	; (5a80 <gatt_register+0x68>)
	struct bt_gatt_attr *attrs = svc->attrs;
    5a1a:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
    5a1c:	6813      	ldr	r3, [r2, #0]
{
    5a1e:	b570      	push	{r4, r5, r6, lr}
	u16_t count = svc->attr_count;
    5a20:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    5a22:	b153      	cbz	r3, 5a3a <gatt_register+0x22>
    5a24:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    5a26:	b343      	cbz	r3, 5a7a <gatt_register+0x62>
	handle = last->attrs[last->attr_count - 1].handle;
    5a28:	f833 4c04 	ldrh.w	r4, [r3, #-4]
    5a2c:	f853 3c08 	ldr.w	r3, [r3, #-8]
    5a30:	2614      	movs	r6, #20
    5a32:	fb06 3304 	mla	r3, r6, r4, r3
    5a36:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    5a3a:	2414      	movs	r4, #20
    5a3c:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    5a40:	b109      	cbz	r1, 5a46 <gatt_register+0x2e>
    5a42:	42a9      	cmp	r1, r5
    5a44:	d108      	bne.n	5a58 <gatt_register+0x40>
	node->next = NULL;
    5a46:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    5a48:	f100 0108 	add.w	r1, r0, #8
    5a4c:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    5a4e:	6850      	ldr	r0, [r2, #4]
    5a50:	b978      	cbnz	r0, 5a72 <gatt_register+0x5a>
		list->tail = node;
    5a52:	6051      	str	r1, [r2, #4]
		list->head = node;
    5a54:	6011      	str	r1, [r2, #0]
    5a56:	bd70      	pop	{r4, r5, r6, pc}
		if (!attrs->handle) {
    5a58:	8a0c      	ldrh	r4, [r1, #16]
    5a5a:	b92c      	cbnz	r4, 5a68 <gatt_register+0x50>
			attrs->handle = ++handle;
    5a5c:	3301      	adds	r3, #1
    5a5e:	b29c      	uxth	r4, r3
    5a60:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    5a62:	3114      	adds	r1, #20
    5a64:	4623      	mov	r3, r4
    5a66:	e7eb      	b.n	5a40 <gatt_register+0x28>
		} else if (attrs->handle > handle) {
    5a68:	42a3      	cmp	r3, r4
    5a6a:	d3fa      	bcc.n	5a62 <gatt_register+0x4a>
			return -EINVAL;
    5a6c:	f06f 0015 	mvn.w	r0, #21
    5a70:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
    5a72:	6001      	str	r1, [r0, #0]
		list->tail = node;
    5a74:	6051      	str	r1, [r2, #4]
	return 0;
    5a76:	4618      	mov	r0, r3
    5a78:	bd70      	pop	{r4, r5, r6, pc}
	handle = last->attrs[last->attr_count - 1].handle;
    5a7a:	681b      	ldr	r3, [r3, #0]
    5a7c:	deff      	udf	#255	; 0xff
    5a7e:	bf00      	nop
    5a80:	20000460 	.word	0x20000460

00005a84 <sc_indicate.constprop.17>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    5a84:	b510      	push	{r4, lr}
    5a86:	4b17      	ldr	r3, [pc, #92]	; (5ae4 <sc_indicate.constprop.17+0x60>)
    5a88:	f3bf 8f5b 	dmb	ish
    5a8c:	f103 0254 	add.w	r2, r3, #84	; 0x54
    5a90:	e852 4f00 	ldrex	r4, [r2]
    5a94:	f044 0e01 	orr.w	lr, r4, #1
    5a98:	e842 ec00 	strex	ip, lr, [r2]
    5a9c:	f1bc 0f00 	cmp.w	ip, #0
    5aa0:	d1f6      	bne.n	5a90 <sc_indicate.constprop.17+0xc>
    5aa2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    5aa6:	07e2      	lsls	r2, r4, #31
    5aa8:	d402      	bmi.n	5ab0 <sc_indicate.constprop.17+0x2c>
		sc->start = start;
    5aaa:	8518      	strh	r0, [r3, #40]	; 0x28
		*end = new_end;
    5aac:	8559      	strh	r1, [r3, #42]	; 0x2a
    5aae:	e00a      	b.n	5ac6 <sc_indicate.constprop.17+0x42>
	if (new_start >= *start && new_end <= *end) {
    5ab0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5ab2:	4282      	cmp	r2, r0
    5ab4:	d803      	bhi.n	5abe <sc_indicate.constprop.17+0x3a>
    5ab6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    5ab8:	428a      	cmp	r2, r1
    5aba:	d301      	bcc.n	5ac0 <sc_indicate.constprop.17+0x3c>
    5abc:	bd10      	pop	{r4, pc}
		*start = new_start;
    5abe:	8518      	strh	r0, [r3, #40]	; 0x28
	if (*end < new_end) {
    5ac0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    5ac2:	428a      	cmp	r2, r1
    5ac4:	d3f2      	bcc.n	5aac <sc_indicate.constprop.17+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ac6:	f3bf 8f5b 	dmb	ish
    5aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5acc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    5ad0:	079b      	lsls	r3, r3, #30
    5ad2:	d406      	bmi.n	5ae2 <sc_indicate.constprop.17+0x5e>
    5ad4:	220a      	movs	r2, #10
    5ad6:	4904      	ldr	r1, [pc, #16]	; (5ae8 <sc_indicate.constprop.17+0x64>)
    5ad8:	4804      	ldr	r0, [pc, #16]	; (5aec <sc_indicate.constprop.17+0x68>)
}
    5ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ade:	f00e bc27 	b.w	14330 <k_delayed_work_submit_to_queue>
    5ae2:	bd10      	pop	{r4, pc}
    5ae4:	20000468 	.word	0x20000468
    5ae8:	20000494 	.word	0x20000494
    5aec:	20004160 	.word	0x20004160

00005af0 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5af0:	6882      	ldr	r2, [r0, #8]
    5af2:	4b19      	ldr	r3, [pc, #100]	; (5b58 <connected_cb+0x68>)
    5af4:	429a      	cmp	r2, r3
{
    5af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5afa:	4607      	mov	r7, r0
    5afc:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    5afe:	d126      	bne.n	5b4e <connected_cb+0x5e>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    5b00:	68c5      	ldr	r5, [r0, #12]

	for (i = 0; i < ccc->cfg_len; i++) {
    5b02:	2600      	movs	r6, #0
    5b04:	686b      	ldr	r3, [r5, #4]
    5b06:	429e      	cmp	r6, r3
    5b08:	d221      	bcs.n	5b4e <connected_cb+0x5e>
		/* Ignore configuration for different peer */
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5b0a:	6829      	ldr	r1, [r5, #0]
    5b0c:	ea4f 1806 	mov.w	r8, r6, lsl #4
    5b10:	4441      	add	r1, r8
    5b12:	3101      	adds	r1, #1
    5b14:	4620      	mov	r0, r4
    5b16:	f7fe fa9d 	bl	4054 <bt_conn_addr_le_cmp>
    5b1a:	b9d8      	cbnz	r0, 5b54 <connected_cb+0x64>
			continue;
		}

		if (ccc->cfg[i].value) {
    5b1c:	682b      	ldr	r3, [r5, #0]
    5b1e:	4443      	add	r3, r8
    5b20:	891b      	ldrh	r3, [r3, #8]
    5b22:	b1bb      	cbz	r3, 5b54 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    5b24:	4629      	mov	r1, r5
    5b26:	4638      	mov	r0, r7
    5b28:	f7ff fe95 	bl	5856 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    5b2c:	682c      	ldr	r4, [r5, #0]
    5b2e:	4b0b      	ldr	r3, [pc, #44]	; (5b5c <connected_cb+0x6c>)
    5b30:	429c      	cmp	r4, r3
    5b32:	d10c      	bne.n	5b4e <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    5b34:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    5b36:	89a0      	ldrh	r0, [r4, #12]
    5b38:	89e1      	ldrh	r1, [r4, #14]
    5b3a:	b900      	cbnz	r0, 5b3e <connected_cb+0x4e>
    5b3c:	b139      	cbz	r1, 5b4e <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    5b3e:	f7ff ffa1 	bl	5a84 <sc_indicate.constprop.17>
	memset(cfg->data, 0, sizeof(cfg->data));
    5b42:	2204      	movs	r2, #4
    5b44:	2100      	movs	r1, #0
    5b46:	f104 000c 	add.w	r0, r4, #12
    5b4a:	f7fa fd75 	bl	638 <memset>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    5b4e:	2001      	movs	r0, #1
    5b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    5b54:	3601      	adds	r6, #1
    5b56:	e7d5      	b.n	5b04 <connected_cb+0x14>
    5b58:	00005899 	.word	0x00005899
    5b5c:	200004c0 	.word	0x200004c0

00005b60 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5b60:	490d      	ldr	r1, [pc, #52]	; (5b98 <sc_indicate_rsp+0x38>)
    5b62:	f3bf 8f5b 	dmb	ish
    5b66:	f101 0354 	add.w	r3, r1, #84	; 0x54
    5b6a:	e853 2f00 	ldrex	r2, [r3]
    5b6e:	f022 0202 	bic.w	r2, r2, #2
    5b72:	e843 2000 	strex	r0, r2, [r3]
    5b76:	2800      	cmp	r0, #0
    5b78:	d1f7      	bne.n	5b6a <sc_indicate_rsp+0xa>
    5b7a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5b7e:	f3bf 8f5b 	dmb	ish
    5b82:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    5b84:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    5b88:	07db      	lsls	r3, r3, #31
    5b8a:	d504      	bpl.n	5b96 <sc_indicate_rsp+0x36>
    5b8c:	2200      	movs	r2, #0
    5b8e:	312c      	adds	r1, #44	; 0x2c
    5b90:	4802      	ldr	r0, [pc, #8]	; (5b9c <sc_indicate_rsp+0x3c>)
    5b92:	f00e bbcd 	b.w	14330 <k_delayed_work_submit_to_queue>
    5b96:	4770      	bx	lr
    5b98:	20000468 	.word	0x20000468
    5b9c:	20004160 	.word	0x20004160

00005ba0 <read_appearance>:
{
    5ba0:	b513      	push	{r0, r1, r4, lr}
    5ba2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    5ba6:	4610      	mov	r0, r2
	if (offset > value_len) {
    5ba8:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    5baa:	f240 3241 	movw	r2, #833	; 0x341
    5bae:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    5bb2:	d80d      	bhi.n	5bd0 <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    5bb4:	f1c1 0402 	rsb	r4, r1, #2
    5bb8:	429c      	cmp	r4, r3
    5bba:	bfa8      	it	ge
    5bbc:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    5bbe:	f10d 0306 	add.w	r3, sp, #6
    5bc2:	4622      	mov	r2, r4
    5bc4:	4419      	add	r1, r3
    5bc6:	f7fa fd0b 	bl	5e0 <memcpy>
}
    5bca:	4620      	mov	r0, r4
    5bcc:	b002      	add	sp, #8
    5bce:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5bd0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    5bd4:	e7f9      	b.n	5bca <read_appearance+0x2a>
	...

00005bd8 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    5bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    5bdc:	6882      	ldr	r2, [r0, #8]
    5bde:	4b24      	ldr	r3, [pc, #144]	; (5c70 <disconnected_cb+0x98>)
    5be0:	429a      	cmp	r2, r3
{
    5be2:	4607      	mov	r7, r0
    5be4:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    5be6:	d129      	bne.n	5c3c <disconnected_cb+0x64>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    5be8:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    5bea:	8923      	ldrh	r3, [r4, #8]
    5bec:	b333      	cbz	r3, 5c3c <disconnected_cb+0x64>
    5bee:	2600      	movs	r6, #0

				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    5bf0:	f101 0948 	add.w	r9, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    5bf4:	6863      	ldr	r3, [r4, #4]
    5bf6:	429e      	cmp	r6, r3
    5bf8:	d30b      	bcc.n	5c12 <disconnected_cb+0x3a>
			}
		}
	}

	/* Reset value while disconnected */
	memset(&ccc->value, 0, sizeof(ccc->value));
    5bfa:	2202      	movs	r2, #2
    5bfc:	2100      	movs	r1, #0
    5bfe:	f104 0008 	add.w	r0, r4, #8
    5c02:	f7fa fd19 	bl	638 <memset>
	if (ccc->cfg_changed) {
    5c06:	68e3      	ldr	r3, [r4, #12]
    5c08:	b1c3      	cbz	r3, 5c3c <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
    5c0a:	8921      	ldrh	r1, [r4, #8]
    5c0c:	4638      	mov	r0, r7
    5c0e:	4798      	blx	r3
    5c10:	e014      	b.n	5c3c <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
    5c12:	6821      	ldr	r1, [r4, #0]
    5c14:	0135      	lsls	r5, r6, #4
    5c16:	4429      	add	r1, r5
    5c18:	890b      	ldrh	r3, [r1, #8]
    5c1a:	b1a3      	cbz	r3, 5c46 <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5c1c:	3101      	adds	r1, #1
    5c1e:	4640      	mov	r0, r8
    5c20:	f7fe fa18 	bl	4054 <bt_conn_addr_le_cmp>
    5c24:	b188      	cbz	r0, 5c4a <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    5c26:	6820      	ldr	r0, [r4, #0]
    5c28:	4428      	add	r0, r5
    5c2a:	3001      	adds	r0, #1
    5c2c:	f7fe fa2a 	bl	4084 <bt_conn_lookup_addr_le>
			if (tmp) {
    5c30:	b148      	cbz	r0, 5c46 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
    5c32:	7b03      	ldrb	r3, [r0, #12]
    5c34:	2b03      	cmp	r3, #3
    5c36:	d104      	bne.n	5c42 <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
    5c38:	f7fe fa67 	bl	410a <bt_conn_unref>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    5c3c:	2001      	movs	r0, #1
    5c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
    5c42:	f7fe fa62 	bl	410a <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    5c46:	3601      	adds	r6, #1
    5c48:	e7d4      	b.n	5bf4 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    5c4a:	4648      	mov	r0, r9
    5c4c:	f7fd fdb4 	bl	37b8 <bt_addr_le_is_bonded>
    5c50:	6823      	ldr	r3, [r4, #0]
    5c52:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
    5c54:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    5c56:	b929      	cbnz	r1, 5c64 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
    5c58:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
    5c5a:	2202      	movs	r2, #2
    5c5c:	3008      	adds	r0, #8
    5c5e:	f7fa fceb 	bl	638 <memset>
    5c62:	e7f0      	b.n	5c46 <disconnected_cb+0x6e>
    5c64:	2207      	movs	r2, #7
    5c66:	4649      	mov	r1, r9
    5c68:	3001      	adds	r0, #1
    5c6a:	f7fa fcb9 	bl	5e0 <memcpy>
    5c6e:	e7ea      	b.n	5c46 <disconnected_cb+0x6e>
    5c70:	00005899 	.word	0x00005899

00005c74 <read_name>:
{
    5c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    5c78:	4e0d      	ldr	r6, [pc, #52]	; (5cb0 <read_name+0x3c>)
{
    5c7a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    5c7e:	4630      	mov	r0, r6
{
    5c80:	4698      	mov	r8, r3
    5c82:	4617      	mov	r7, r2
				 strlen(gap_name));
    5c84:	f7fa fc82 	bl	58c <strlen>
	if (offset > value_len) {
    5c88:	b283      	uxth	r3, r0
    5c8a:	42ab      	cmp	r3, r5
    5c8c:	d30d      	bcc.n	5caa <read_name+0x36>
	len = min(buf_len, value_len - offset);
    5c8e:	1b5c      	subs	r4, r3, r5
    5c90:	4544      	cmp	r4, r8
    5c92:	4623      	mov	r3, r4
    5c94:	bfa8      	it	ge
    5c96:	4643      	movge	r3, r8
    5c98:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    5c9a:	4622      	mov	r2, r4
    5c9c:	1971      	adds	r1, r6, r5
    5c9e:	4638      	mov	r0, r7
    5ca0:	f7fa fc9e 	bl	5e0 <memcpy>
}
    5ca4:	4620      	mov	r0, r4
    5ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5caa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    5cae:	e7f9      	b.n	5ca4 <read_name+0x30>
    5cb0:	0001495c 	.word	0x0001495c

00005cb4 <bt_gatt_attr_read_ccc>:
{
    5cb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    5cb8:	68ce      	ldr	r6, [r1, #12]
{
    5cba:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    5cbe:	4604      	mov	r4, r0
    5cc0:	4690      	mov	r8, r2
    5cc2:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    5cc4:	2500      	movs	r5, #0
    5cc6:	6873      	ldr	r3, [r6, #4]
    5cc8:	429d      	cmp	r5, r3
    5cca:	d20f      	bcs.n	5cec <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    5ccc:	6831      	ldr	r1, [r6, #0]
    5cce:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    5cd2:	4451      	add	r1, sl
    5cd4:	3101      	adds	r1, #1
    5cd6:	4620      	mov	r0, r4
    5cd8:	f7fe f9bc 	bl	4054 <bt_conn_addr_le_cmp>
    5cdc:	b108      	cbz	r0, 5ce2 <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    5cde:	3501      	adds	r5, #1
    5ce0:	e7f1      	b.n	5cc6 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    5ce2:	6832      	ldr	r2, [r6, #0]
    5ce4:	4452      	add	r2, sl
    5ce6:	8913      	ldrh	r3, [r2, #8]
    5ce8:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    5cec:	6873      	ldr	r3, [r6, #4]
    5cee:	429d      	cmp	r5, r3
		value = 0x0000;
    5cf0:	bf04      	itt	eq
    5cf2:	2300      	moveq	r3, #0
    5cf4:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    5cf8:	2f02      	cmp	r7, #2
    5cfa:	d80f      	bhi.n	5d1c <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    5cfc:	f1c7 0402 	rsb	r4, r7, #2
    5d00:	454c      	cmp	r4, r9
    5d02:	bfa8      	it	ge
    5d04:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
    5d06:	f10d 0306 	add.w	r3, sp, #6
    5d0a:	4622      	mov	r2, r4
    5d0c:	19d9      	adds	r1, r3, r7
    5d0e:	4640      	mov	r0, r8
    5d10:	f7fa fc66 	bl	5e0 <memcpy>
}
    5d14:	4620      	mov	r0, r4
    5d16:	b002      	add	sp, #8
    5d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5d1c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    5d20:	e7f8      	b.n	5d14 <bt_gatt_attr_read_ccc+0x60>

00005d22 <bt_gatt_attr_read_service>:
{
    5d22:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    5d24:	68c9      	ldr	r1, [r1, #12]
{
    5d26:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    5d2a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    5d2c:	780a      	ldrb	r2, [r1, #0]
    5d2e:	b992      	cbnz	r2, 5d56 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    5d30:	884a      	ldrh	r2, [r1, #2]
    5d32:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    5d36:	2d02      	cmp	r5, #2
    5d38:	d819      	bhi.n	5d6e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    5d3a:	f1c5 0402 	rsb	r4, r5, #2
    5d3e:	429c      	cmp	r4, r3
    5d40:	bfa8      	it	ge
    5d42:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    5d44:	f10d 0306 	add.w	r3, sp, #6
    5d48:	4622      	mov	r2, r4
    5d4a:	1959      	adds	r1, r3, r5
    5d4c:	f7fa fc48 	bl	5e0 <memcpy>
}
    5d50:	4620      	mov	r0, r4
    5d52:	b003      	add	sp, #12
    5d54:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    5d56:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    5d58:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    5d5c:	d807      	bhi.n	5d6e <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    5d5e:	f1c5 0410 	rsb	r4, r5, #16
    5d62:	429c      	cmp	r4, r3
    5d64:	bfa8      	it	ge
    5d66:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    5d68:	4622      	mov	r2, r4
    5d6a:	4429      	add	r1, r5
    5d6c:	e7ee      	b.n	5d4c <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5d6e:	f06f 0406 	mvn.w	r4, #6
    5d72:	e7ed      	b.n	5d50 <bt_gatt_attr_read_service+0x2e>

00005d74 <notify_cb>:
{
    5d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    5d78:	f642 1302 	movw	r3, #10498	; 0x2902
{
    5d7c:	4605      	mov	r5, r0
    5d7e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    5d80:	2400      	movs	r4, #0
    5d82:	4669      	mov	r1, sp
    5d84:	6800      	ldr	r0, [r0, #0]
    5d86:	f88d 4000 	strb.w	r4, [sp]
    5d8a:	f8ad 3002 	strh.w	r3, [sp, #2]
    5d8e:	f7fb ff2d 	bl	1bec <bt_uuid_cmp>
    5d92:	b178      	cbz	r0, 5db4 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    5d94:	f642 0303 	movw	r3, #10243	; 0x2803
    5d98:	6828      	ldr	r0, [r5, #0]
    5d9a:	f88d 4004 	strb.w	r4, [sp, #4]
    5d9e:	a901      	add	r1, sp, #4
    5da0:	f8ad 3006 	strh.w	r3, [sp, #6]
    5da4:	f7fb ff22 	bl	1bec <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    5da8:	1b00      	subs	r0, r0, r4
    5daa:	bf18      	it	ne
    5dac:	2001      	movne	r0, #1
}
    5dae:	b003      	add	sp, #12
    5db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    5db4:	68aa      	ldr	r2, [r5, #8]
    5db6:	4b2c      	ldr	r3, [pc, #176]	; (5e68 <notify_cb+0xf4>)
    5db8:	429a      	cmp	r2, r3
    5dba:	d001      	beq.n	5dc0 <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    5dbc:	2001      	movs	r0, #1
    5dbe:	e7f6      	b.n	5dae <notify_cb+0x3a>
	ccc = attr->user_data;
    5dc0:	68ef      	ldr	r7, [r5, #12]
    5dc2:	4d2a      	ldr	r5, [pc, #168]	; (5e6c <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
    5dc4:	4604      	mov	r4, r0
    5dc6:	46a8      	mov	r8, r5
    5dc8:	4681      	mov	r9, r0
    5dca:	687b      	ldr	r3, [r7, #4]
    5dcc:	429c      	cmp	r4, r3
    5dce:	d2f5      	bcs.n	5dbc <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    5dd0:	6838      	ldr	r0, [r7, #0]
    5dd2:	88b3      	ldrh	r3, [r6, #4]
    5dd4:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    5dd8:	8902      	ldrh	r2, [r0, #8]
    5dda:	429a      	cmp	r2, r3
    5ddc:	d115      	bne.n	5e0a <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    5dde:	3001      	adds	r0, #1
    5de0:	f7fe f950 	bl	4084 <bt_conn_lookup_addr_le>
		if (!conn) {
    5de4:	4683      	mov	fp, r0
    5de6:	b9f8      	cbnz	r0, 5e28 <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
    5de8:	683b      	ldr	r3, [r7, #0]
    5dea:	4543      	cmp	r3, r8
    5dec:	d10d      	bne.n	5e0a <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
    5dee:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    5df0:	a801      	add	r0, sp, #4
    5df2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    5df4:	6a19      	ldr	r1, [r3, #32]
    5df6:	f7fa fbf3 	bl	5e0 <memcpy>
	if (!stored->start && !stored->end) {
    5dfa:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    5dfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5e00:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    5e02:	b928      	cbnz	r0, 5e10 <notify_cb+0x9c>
    5e04:	b942      	cbnz	r2, 5e18 <notify_cb+0xa4>
		*stored = data;
    5e06:	9801      	ldr	r0, [sp, #4]
    5e08:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    5e0a:	3401      	adds	r4, #1
    5e0c:	3510      	adds	r5, #16
    5e0e:	e7dc      	b.n	5dca <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    5e10:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    5e14:	4281      	cmp	r1, r0
    5e16:	d305      	bcc.n	5e24 <notify_cb+0xb0>
    5e18:	429a      	cmp	r2, r3
    5e1a:	d2f6      	bcs.n	5e0a <notify_cb+0x96>
	if (*end < new_end) {
    5e1c:	429a      	cmp	r2, r3
    5e1e:	d2f4      	bcs.n	5e0a <notify_cb+0x96>
		*end = new_end;
    5e20:	81eb      	strh	r3, [r5, #14]
    5e22:	e7f2      	b.n	5e0a <notify_cb+0x96>
		*start = new_start;
    5e24:	81a9      	strh	r1, [r5, #12]
    5e26:	e7f9      	b.n	5e1c <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
    5e28:	7b03      	ldrb	r3, [r0, #12]
    5e2a:	2b03      	cmp	r3, #3
    5e2c:	d002      	beq.n	5e34 <notify_cb+0xc0>
			bt_conn_unref(conn);
    5e2e:	f7fe f96c 	bl	410a <bt_conn_unref>
    5e32:	e7ea      	b.n	5e0a <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
    5e34:	88b3      	ldrh	r3, [r6, #4]
    5e36:	2b02      	cmp	r3, #2
    5e38:	d10c      	bne.n	5e54 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
    5e3a:	6971      	ldr	r1, [r6, #20]
    5e3c:	f7ff fdb6 	bl	59ac <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
    5e40:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    5e42:	4658      	mov	r0, fp
    5e44:	f7fe f961 	bl	410a <bt_conn_unref>
		if (err < 0) {
    5e48:	f1ba 0f00 	cmp.w	sl, #0
    5e4c:	db09      	blt.n	5e62 <notify_cb+0xee>
		data->err = 0;
    5e4e:	f8c6 9000 	str.w	r9, [r6]
    5e52:	e7da      	b.n	5e0a <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
    5e54:	68b1      	ldr	r1, [r6, #8]
    5e56:	8a33      	ldrh	r3, [r6, #16]
    5e58:	68f2      	ldr	r2, [r6, #12]
    5e5a:	8a09      	ldrh	r1, [r1, #16]
    5e5c:	f7ff fd7a 	bl	5954 <gatt_notify>
    5e60:	e7ee      	b.n	5e40 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    5e62:	2000      	movs	r0, #0
    5e64:	e7a3      	b.n	5dae <notify_cb+0x3a>
    5e66:	bf00      	nop
    5e68:	00005899 	.word	0x00005899
    5e6c:	200004c0 	.word	0x200004c0

00005e70 <bt_gatt_init>:
{
    5e70:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    5e72:	4806      	ldr	r0, [pc, #24]	; (5e8c <bt_gatt_init+0x1c>)
    5e74:	f7ff fdd0 	bl	5a18 <gatt_register>
	gatt_register(&gatt_svc);
    5e78:	4805      	ldr	r0, [pc, #20]	; (5e90 <bt_gatt_init+0x20>)
    5e7a:	f7ff fdcd 	bl	5a18 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    5e7e:	4905      	ldr	r1, [pc, #20]	; (5e94 <bt_gatt_init+0x24>)
    5e80:	4805      	ldr	r0, [pc, #20]	; (5e98 <bt_gatt_init+0x28>)
}
    5e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    5e86:	f00e b9db 	b.w	14240 <k_delayed_work_init>
    5e8a:	bf00      	nop
    5e8c:	2000cdec 	.word	0x2000cdec
    5e90:	2000ce48 	.word	0x2000ce48
    5e94:	00005fad 	.word	0x00005fad
    5e98:	20000494 	.word	0x20000494

00005e9c <bt_gatt_service_register>:
{
    5e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    5e9e:	6803      	ldr	r3, [r0, #0]
{
    5ea0:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    5ea2:	2500      	movs	r5, #0
    5ea4:	6818      	ldr	r0, [r3, #0]
    5ea6:	f88d 5000 	strb.w	r5, [sp]
    5eaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    5eae:	4669      	mov	r1, sp
    5eb0:	f8ad 3002 	strh.w	r3, [sp, #2]
    5eb4:	f7fb fe9a 	bl	1bec <bt_uuid_cmp>
    5eb8:	b918      	cbnz	r0, 5ec2 <bt_gatt_service_register+0x26>
		return -EALREADY;
    5eba:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    5ebe:	b003      	add	sp, #12
    5ec0:	bd30      	pop	{r4, r5, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    5ec2:	6823      	ldr	r3, [r4, #0]
    5ec4:	a901      	add	r1, sp, #4
    5ec6:	6818      	ldr	r0, [r3, #0]
    5ec8:	f88d 5004 	strb.w	r5, [sp, #4]
    5ecc:	f641 0301 	movw	r3, #6145	; 0x1801
    5ed0:	f8ad 3006 	strh.w	r3, [sp, #6]
    5ed4:	f7fb fe8a 	bl	1bec <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    5ed8:	2800      	cmp	r0, #0
    5eda:	d0ee      	beq.n	5eba <bt_gatt_service_register+0x1e>
	err = gatt_register(svc);
    5edc:	4620      	mov	r0, r4
    5ede:	f7ff fd9b 	bl	5a18 <gatt_register>
	if (err < 0) {
    5ee2:	2800      	cmp	r0, #0
    5ee4:	dbeb      	blt.n	5ebe <bt_gatt_service_register+0x22>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    5ee6:	6822      	ldr	r2, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    5ee8:	88a3      	ldrh	r3, [r4, #4]
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    5eea:	8a10      	ldrh	r0, [r2, #16]
    5eec:	2114      	movs	r1, #20
    5eee:	fb01 2303 	mla	r3, r1, r3, r2
    5ef2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    5ef6:	f7ff fdc5 	bl	5a84 <sc_indicate.constprop.17>
	return 0;
    5efa:	4628      	mov	r0, r5
    5efc:	e7df      	b.n	5ebe <bt_gatt_service_register+0x22>

00005efe <bt_gatt_attr_read>:
{
    5efe:	b510      	push	{r4, lr}
    5f00:	4610      	mov	r0, r2
    5f02:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    5f06:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
    5f0a:	4291      	cmp	r1, r2
    5f0c:	d80b      	bhi.n	5f26 <bt_gatt_attr_read+0x28>
	len = min(buf_len, value_len - offset);
    5f0e:	1a54      	subs	r4, r2, r1
    5f10:	42a3      	cmp	r3, r4
    5f12:	bfa8      	it	ge
    5f14:	4623      	movge	r3, r4
    5f16:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    5f18:	9b03      	ldr	r3, [sp, #12]
    5f1a:	4622      	mov	r2, r4
    5f1c:	4419      	add	r1, r3
    5f1e:	f7fa fb5f 	bl	5e0 <memcpy>
}
    5f22:	4620      	mov	r0, r4
    5f24:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    5f26:	f06f 0406 	mvn.w	r4, #6
    5f2a:	e7fa      	b.n	5f22 <bt_gatt_attr_read+0x24>

00005f2c <bt_gatt_foreach_attr>:
{
    5f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f30:	4699      	mov	r9, r3
    5f32:	4b12      	ldr	r3, [pc, #72]	; (5f7c <bt_gatt_foreach_attr+0x50>)
    5f34:	681c      	ldr	r4, [r3, #0]
    5f36:	4606      	mov	r6, r0
    5f38:	460f      	mov	r7, r1
    5f3a:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5f3c:	b1dc      	cbz	r4, 5f76 <bt_gatt_foreach_attr+0x4a>
    5f3e:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    5f40:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5f44:	b1bc      	cbz	r4, 5f76 <bt_gatt_foreach_attr+0x4a>
    5f46:	2500      	movs	r5, #0
    5f48:	e006      	b.n	5f58 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    5f4a:	6820      	ldr	r0, [r4, #0]
    5f4c:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    5f50:	8a03      	ldrh	r3, [r0, #16]
    5f52:	42b3      	cmp	r3, r6
    5f54:	d207      	bcs.n	5f66 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    5f56:	3501      	adds	r5, #1
    5f58:	88a3      	ldrh	r3, [r4, #4]
    5f5a:	429d      	cmp	r5, r3
    5f5c:	dbf5      	blt.n	5f4a <bt_gatt_foreach_attr+0x1e>
	return node->next;
    5f5e:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    5f60:	b14c      	cbz	r4, 5f76 <bt_gatt_foreach_attr+0x4a>
    5f62:	3c08      	subs	r4, #8
    5f64:	e7ee      	b.n	5f44 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    5f66:	42bb      	cmp	r3, r7
    5f68:	d8f5      	bhi.n	5f56 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    5f6a:	4649      	mov	r1, r9
    5f6c:	47c0      	blx	r8
    5f6e:	2800      	cmp	r0, #0
    5f70:	d1f1      	bne.n	5f56 <bt_gatt_foreach_attr+0x2a>
    5f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f7a:	bf00      	nop
    5f7c:	20000460 	.word	0x20000460

00005f80 <bt_gatt_indicate.part.8>:
int bt_gatt_indicate(struct bt_conn *conn,
    5f80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    5f82:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    5f86:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    5f88:	6980      	ldr	r0, [r0, #24]
	nfy.err = -ENOTCONN;
    5f8a:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    5f8c:	2302      	movs	r3, #2
    5f8e:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    5f92:	4a05      	ldr	r2, [pc, #20]	; (5fa8 <bt_gatt_indicate.part.8+0x28>)
    5f94:	8a00      	ldrh	r0, [r0, #16]
    5f96:	466b      	mov	r3, sp
    5f98:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5f9c:	f7ff ffc6 	bl	5f2c <bt_gatt_foreach_attr>
}
    5fa0:	9800      	ldr	r0, [sp, #0]
    5fa2:	b007      	add	sp, #28
    5fa4:	f85d fb04 	ldr.w	pc, [sp], #4
    5fa8:	00005d75 	.word	0x00005d75

00005fac <sc_process>:
{
    5fac:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    5fae:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    5fb2:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    5fb6:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    5fb8:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    5fbc:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    5fc0:	382c      	subs	r0, #44	; 0x2c
    5fc2:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5fc6:	f3bf 8f5b 	dmb	ish
    5fca:	e854 2f00 	ldrex	r2, [r4]
    5fce:	f022 0201 	bic.w	r2, r2, #1
    5fd2:	e844 2100 	strex	r1, r2, [r4]
    5fd6:	2900      	cmp	r1, #0
    5fd8:	d1f7      	bne.n	5fca <sc_process+0x1e>
    5fda:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    5fde:	2200      	movs	r2, #0
    5fe0:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    5fe4:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    5fe8:	4a0e      	ldr	r2, [pc, #56]	; (6024 <sc_process+0x78>)
    5fea:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    5fee:	4a0e      	ldr	r2, [pc, #56]	; (6028 <sc_process+0x7c>)
    5ff0:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    5ff4:	aa01      	add	r2, sp, #4
    5ff6:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    5ffa:	2204      	movs	r2, #4
    5ffc:	f823 2c08 	strh.w	r2, [r3, #-8]
    6000:	f7ff ffbe 	bl	5f80 <bt_gatt_indicate.part.8>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    6004:	b958      	cbnz	r0, 601e <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6006:	f3bf 8f5b 	dmb	ish
    600a:	e854 3f00 	ldrex	r3, [r4]
    600e:	f043 0302 	orr.w	r3, r3, #2
    6012:	e844 3200 	strex	r2, r3, [r4]
    6016:	2a00      	cmp	r2, #0
    6018:	d1f7      	bne.n	600a <sc_process+0x5e>
    601a:	f3bf 8f5b 	dmb	ish
}
    601e:	b002      	add	sp, #8
    6020:	bd10      	pop	{r4, pc}
    6022:	bf00      	nop
    6024:	2000ce20 	.word	0x2000ce20
    6028:	00005b61 	.word	0x00005b61

0000602c <bt_gatt_attr_next>:
{
    602c:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    602e:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    6030:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    6032:	3101      	adds	r1, #1
    6034:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    6036:	2200      	movs	r2, #0
    6038:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    603c:	4608      	mov	r0, r1
    603e:	4a03      	ldr	r2, [pc, #12]	; (604c <bt_gatt_attr_next+0x20>)
    6040:	f7ff ff74 	bl	5f2c <bt_gatt_foreach_attr>
}
    6044:	9801      	ldr	r0, [sp, #4]
    6046:	b003      	add	sp, #12
    6048:	f85d fb04 	ldr.w	pc, [sp], #4
    604c:	00005851 	.word	0x00005851

00006050 <bt_gatt_attr_read_chrc>:
{
    6050:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    6052:	68cf      	ldr	r7, [r1, #12]
{
    6054:	b087      	sub	sp, #28
    6056:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    6058:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    605a:	793b      	ldrb	r3, [r7, #4]
{
    605c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.properties = chrc->properties;
    6060:	f88d 3004 	strb.w	r3, [sp, #4]
{
    6064:	4616      	mov	r6, r2
	next = bt_gatt_attr_next(attr);
    6066:	f7ff ffe1 	bl	602c <bt_gatt_attr_next>
	if (!next) {
    606a:	b9d0      	cbnz	r0, 60a2 <bt_gatt_attr_read_chrc+0x52>
		pdu.value_handle = 0x0000;
    606c:	f88d 0005 	strb.w	r0, [sp, #5]
    6070:	f88d 0006 	strb.w	r0, [sp, #6]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    6074:	6839      	ldr	r1, [r7, #0]
    6076:	780b      	ldrb	r3, [r1, #0]
    6078:	b9bb      	cbnz	r3, 60aa <bt_gatt_attr_read_chrc+0x5a>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    607a:	884b      	ldrh	r3, [r1, #2]
    607c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2;
    6080:	2305      	movs	r3, #5
	if (offset > value_len) {
    6082:	42ab      	cmp	r3, r5
    6084:	d319      	bcc.n	60ba <bt_gatt_attr_read_chrc+0x6a>
	len = min(buf_len, value_len - offset);
    6086:	1b5b      	subs	r3, r3, r5
    6088:	42a3      	cmp	r3, r4
    608a:	bfa8      	it	ge
    608c:	4623      	movge	r3, r4
    608e:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    6090:	ab01      	add	r3, sp, #4
    6092:	4622      	mov	r2, r4
    6094:	1959      	adds	r1, r3, r5
    6096:	4630      	mov	r0, r6
    6098:	f7fa faa2 	bl	5e0 <memcpy>
}
    609c:	4620      	mov	r0, r4
    609e:	b007      	add	sp, #28
    60a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    60a2:	8a03      	ldrh	r3, [r0, #16]
    60a4:	f8ad 3005 	strh.w	r3, [sp, #5]
    60a8:	e7e4      	b.n	6074 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    60aa:	2210      	movs	r2, #16
    60ac:	3101      	adds	r1, #1
    60ae:	f10d 0007 	add.w	r0, sp, #7
    60b2:	f7fa fa95 	bl	5e0 <memcpy>
		value_len += 16;
    60b6:	2313      	movs	r3, #19
    60b8:	e7e3      	b.n	6082 <bt_gatt_attr_read_chrc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    60ba:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    60be:	e7ed      	b.n	609c <bt_gatt_attr_read_chrc+0x4c>

000060c0 <bt_gatt_notify>:
{
    60c0:	b570      	push	{r4, r5, r6, lr}
    60c2:	461d      	mov	r5, r3
    60c4:	b086      	sub	sp, #24
    60c6:	8a0c      	ldrh	r4, [r1, #16]
	if (conn) {
    60c8:	b120      	cbz	r0, 60d4 <bt_gatt_notify+0x14>
		return gatt_notify(conn, attr->handle, data, len);
    60ca:	4621      	mov	r1, r4
    60cc:	f7ff fc42 	bl	5954 <gatt_notify>
}
    60d0:	b006      	add	sp, #24
    60d2:	bd70      	pop	{r4, r5, r6, pc}
	nfy.err = -ENOTCONN;
    60d4:	f06f 0338 	mvn.w	r3, #56	; 0x38
    60d8:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_NOTIFY;
    60da:	2301      	movs	r3, #1
	nfy.attr = attr;
    60dc:	9102      	str	r1, [sp, #8]
	nfy.type = BT_GATT_CCC_NOTIFY;
    60de:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.data = data;
    60e2:	9203      	str	r2, [sp, #12]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    60e4:	4620      	mov	r0, r4
    60e6:	466b      	mov	r3, sp
    60e8:	4a04      	ldr	r2, [pc, #16]	; (60fc <bt_gatt_notify+0x3c>)
	nfy.len = len;
    60ea:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(attr->handle, 0xffff, notify_cb, &nfy);
    60ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
    60f2:	f7ff ff1b 	bl	5f2c <bt_gatt_foreach_attr>
	return nfy.err;
    60f6:	9800      	ldr	r0, [sp, #0]
    60f8:	e7ea      	b.n	60d0 <bt_gatt_notify+0x10>
    60fa:	bf00      	nop
    60fc:	00005d75 	.word	0x00005d75

00006100 <bt_gatt_connected>:
#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    6100:	4603      	mov	r3, r0
    6102:	4a03      	ldr	r2, [pc, #12]	; (6110 <bt_gatt_connected+0x10>)
    6104:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6108:	2001      	movs	r0, #1
    610a:	f7ff bf0f 	b.w	5f2c <bt_gatt_foreach_attr>
    610e:	bf00      	nop
    6110:	00005af1 	.word	0x00005af1

00006114 <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    6114:	4603      	mov	r3, r0
    6116:	4a03      	ldr	r2, [pc, #12]	; (6124 <bt_gatt_disconnected+0x10>)
    6118:	f64f 71ff 	movw	r1, #65535	; 0xffff
    611c:	2001      	movs	r0, #1
    611e:	f7ff bf05 	b.w	5f2c <bt_gatt_foreach_attr>
    6122:	bf00      	nop
    6124:	00005bd9 	.word	0x00005bd9

00006128 <sys_memcpy_swap>:
{
	__ASSERT(((src < dst && (src + length) <= dst) ||
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;
    6128:	1e53      	subs	r3, r2, #1
    612a:	4419      	add	r1, r3
    612c:	3801      	subs	r0, #1
    612e:	1a52      	subs	r2, r2, r1

	for (; length > 0; length--) {
    6130:	42d1      	cmn	r1, r2
    6132:	d100      	bne.n	6136 <sys_memcpy_swap+0xe>
		*((u8_t *)dst++) = *((u8_t *)src--);
	}
}
    6134:	4770      	bx	lr
		*((u8_t *)dst++) = *((u8_t *)src--);
    6136:	f811 3901 	ldrb.w	r3, [r1], #-1
    613a:	f800 3f01 	strb.w	r3, [r0, #1]!
    613e:	e7f7      	b.n	6130 <sys_memcpy_swap+0x8>

00006140 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    6140:	4b10      	ldr	r3, [pc, #64]	; (6184 <get_io_capa+0x44>)
    6142:	681b      	ldr	r3, [r3, #0]
    6144:	b1ab      	cbz	r3, 6172 <get_io_capa+0x32>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    6146:	681a      	ldr	r2, [r3, #0]
    6148:	b132      	cbz	r2, 6158 <get_io_capa+0x18>
    614a:	6859      	ldr	r1, [r3, #4]
    614c:	b121      	cbz	r1, 6158 <get_io_capa+0x18>
    614e:	6899      	ldr	r1, [r3, #8]
    6150:	b989      	cbnz	r1, 6176 <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    6152:	490d      	ldr	r1, [pc, #52]	; (6188 <get_io_capa+0x48>)
    6154:	7809      	ldrb	r1, [r1, #0]
    6156:	b171      	cbz	r1, 6176 <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    6158:	490b      	ldr	r1, [pc, #44]	; (6188 <get_io_capa+0x48>)
    615a:	7809      	ldrb	r1, [r1, #0]
    615c:	b111      	cbz	r1, 6164 <get_io_capa+0x24>
    615e:	b10a      	cbz	r2, 6164 <get_io_capa+0x24>
    6160:	6899      	ldr	r1, [r3, #8]
    6162:	b951      	cbnz	r1, 617a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    6164:	685b      	ldr	r3, [r3, #4]
    6166:	b953      	cbnz	r3, 617e <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    6168:	2a00      	cmp	r2, #0
    616a:	bf0c      	ite	eq
    616c:	2003      	moveq	r0, #3
    616e:	2000      	movne	r0, #0
    6170:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    6172:	2003      	movs	r0, #3
    6174:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    6176:	2004      	movs	r0, #4
    6178:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    617a:	2001      	movs	r0, #1
    617c:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_ONLY;
    617e:	2002      	movs	r0, #2
}
    6180:	4770      	bx	lr
    6182:	bf00      	nop
    6184:	20003744 	.word	0x20003744
    6188:	200006bd 	.word	0x200006bd

0000618c <smp_security_request>:
}
#else
static u8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
{
	return BT_SMP_ERR_CMD_NOTSUPP;
}
    618c:	2007      	movs	r0, #7
    618e:	4770      	bx	lr

00006190 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    6190:	4b04      	ldr	r3, [pc, #16]	; (61a4 <bt_smp_accept+0x14>)
    6192:	6818      	ldr	r0, [r3, #0]
    6194:	b918      	cbnz	r0, 619e <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.chan.ops = &ops;
    6196:	4a04      	ldr	r2, [pc, #16]	; (61a8 <bt_smp_accept+0x18>)
    6198:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    619a:	600b      	str	r3, [r1, #0]

		return 0;
    619c:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    619e:	f06f 000b 	mvn.w	r0, #11
}
    61a2:	4770      	bx	lr
    61a4:	200004e0 	.word	0x200004e0
    61a8:	2000ce60 	.word	0x2000ce60

000061ac <smp_chan_get>:
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    61ac:	2106      	movs	r1, #6
    61ae:	f7fe ba6e 	b.w	468e <bt_l2cap_le_lookup_rx_cid>

000061b2 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    61b2:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    61b4:	f3bf 8f5b 	dmb	ish
    61b8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    61bc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    61c0:	f001 011f 	and.w	r1, r1, #31
    61c4:	4108      	asrs	r0, r1
}
    61c6:	f000 0001 	and.w	r0, r0, #1
    61ca:	4770      	bx	lr

000061cc <atomic_set_bit>:
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    61cc:	094b      	lsrs	r3, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    61ce:	2201      	movs	r2, #1
    61d0:	f001 011f 	and.w	r1, r1, #31
    61d4:	fa02 f101 	lsl.w	r1, r2, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    61d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    61dc:	f3bf 8f5b 	dmb	ish
    61e0:	e850 3f00 	ldrex	r3, [r0]
    61e4:	430b      	orrs	r3, r1
    61e6:	e840 3200 	strex	r2, r3, [r0]
    61ea:	2a00      	cmp	r2, #0
    61ec:	d1f8      	bne.n	61e0 <atomic_set_bit+0x14>
    61ee:	f3bf 8f5b 	dmb	ish
    61f2:	4770      	bx	lr

000061f4 <bt_smp_aes_cmac>:
{
    61f4:	b570      	push	{r4, r5, r6, lr}
    61f6:	b0c2      	sub	sp, #264	; 0x108
    61f8:	460d      	mov	r5, r1
    61fa:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    61fc:	4601      	mov	r1, r0
    61fe:	aa16      	add	r2, sp, #88	; 0x58
    6200:	4668      	mov	r0, sp
{
    6202:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    6204:	f7fb f84c 	bl	12a0 <tc_cmac_setup>
    6208:	b918      	cbnz	r0, 6212 <bt_smp_aes_cmac+0x1e>
		return -EIO;
    620a:	f06f 0004 	mvn.w	r0, #4
}
    620e:	b042      	add	sp, #264	; 0x108
    6210:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    6212:	4632      	mov	r2, r6
    6214:	4629      	mov	r1, r5
    6216:	4668      	mov	r0, sp
    6218:	f7fb f86e 	bl	12f8 <tc_cmac_update>
    621c:	2800      	cmp	r0, #0
    621e:	d0f4      	beq.n	620a <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    6220:	4669      	mov	r1, sp
    6222:	4620      	mov	r0, r4
    6224:	f7fb f8cc 	bl	13c0 <tc_cmac_final>
    6228:	2800      	cmp	r0, #0
    622a:	d0ee      	beq.n	620a <bt_smp_aes_cmac+0x16>
	return 0;
    622c:	2000      	movs	r0, #0
    622e:	e7ee      	b.n	620e <bt_smp_aes_cmac+0x1a>

00006230 <bt_smp_disconnected>:
{
    6230:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
    6232:	6803      	ldr	r3, [r0, #0]
    6234:	6f1c      	ldr	r4, [r3, #112]	; 0x70
{
    6236:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
    6238:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    623c:	f00e f81e 	bl	1427c <k_delayed_work_cancel>
	if (keys) {
    6240:	b124      	cbz	r4, 624c <bt_smp_disconnected+0x1c>
		if (!keys->keys ||
    6242:	89a3      	ldrh	r3, [r4, #12]
    6244:	b953      	cbnz	r3, 625c <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    6246:	4620      	mov	r0, r4
    6248:	f001 f9dc 	bl	7604 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    624c:	4628      	mov	r0, r5
    624e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
    6252:	2100      	movs	r1, #0
}
    6254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(smp, 0, sizeof(*smp));
    6258:	f7fa b9ee 	b.w	638 <memset>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    625c:	2101      	movs	r1, #1
    625e:	f104 0008 	add.w	r0, r4, #8
    6262:	f7ff ffa6 	bl	61b2 <atomic_test_bit>
		if (!keys->keys ||
    6266:	2800      	cmp	r0, #0
    6268:	d1ed      	bne.n	6246 <bt_smp_disconnected+0x16>
    626a:	e7ef      	b.n	624c <bt_smp_disconnected+0x1c>

0000626c <smp_ident_info>:
{
    626c:	b538      	push	{r3, r4, r5, lr}
    626e:	460a      	mov	r2, r1
    6270:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    6272:	210a      	movs	r1, #10
    6274:	3098      	adds	r0, #152	; 0x98
    6276:	f7ff ff9c 	bl	61b2 <atomic_test_bit>
    627a:	b158      	cbz	r0, 6294 <smp_ident_info+0x28>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    627c:	6821      	ldr	r1, [r4, #0]
		struct bt_smp_ident_info *req = (void *)buf->data;
    627e:	6895      	ldr	r5, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    6280:	3148      	adds	r1, #72	; 0x48
    6282:	2002      	movs	r0, #2
    6284:	f001 fa04 	bl	7690 <bt_keys_get_type>
		if (!keys) {
    6288:	b158      	cbz	r0, 62a2 <smp_ident_info+0x36>
		memcpy(keys->irk.val, req->irk, 16);
    628a:	2210      	movs	r2, #16
    628c:	4629      	mov	r1, r5
    628e:	3030      	adds	r0, #48	; 0x30
    6290:	f7fa f9a6 	bl	5e0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    6294:	f104 0094 	add.w	r0, r4, #148	; 0x94
    6298:	2109      	movs	r1, #9
    629a:	f7ff ff97 	bl	61cc <atomic_set_bit>
	return 0;
    629e:	2000      	movs	r0, #0
    62a0:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    62a2:	2008      	movs	r0, #8
}
    62a4:	bd38      	pop	{r3, r4, r5, pc}

000062a6 <smp_encrypt_info>:
{
    62a6:	b538      	push	{r3, r4, r5, lr}
    62a8:	460a      	mov	r2, r1
    62aa:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    62ac:	210a      	movs	r1, #10
    62ae:	3098      	adds	r0, #152	; 0x98
    62b0:	f7ff ff7f 	bl	61b2 <atomic_test_bit>
    62b4:	b158      	cbz	r0, 62ce <smp_encrypt_info+0x28>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    62b6:	6821      	ldr	r1, [r4, #0]
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    62b8:	6895      	ldr	r5, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    62ba:	3148      	adds	r1, #72	; 0x48
    62bc:	2004      	movs	r0, #4
    62be:	f001 f9e7 	bl	7690 <bt_keys_get_type>
		if (!keys) {
    62c2:	b158      	cbz	r0, 62dc <smp_encrypt_info+0x36>
		memcpy(keys->ltk.val, req->ltk, 16);
    62c4:	2210      	movs	r2, #16
    62c6:	4629      	mov	r1, r5
    62c8:	301a      	adds	r0, #26
    62ca:	f7fa f989 	bl	5e0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    62ce:	f104 0094 	add.w	r0, r4, #148	; 0x94
    62d2:	2107      	movs	r1, #7
    62d4:	f7ff ff7a 	bl	61cc <atomic_set_bit>
	return 0;
    62d8:	2000      	movs	r0, #0
    62da:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    62dc:	2008      	movs	r0, #8
}
    62de:	bd38      	pop	{r3, r4, r5, pc}

000062e0 <smp_create_pdu.isra.1>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    62e0:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    62e2:	b538      	push	{r3, r4, r5, lr}
    62e4:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
    62e6:	4608      	mov	r0, r1
    62e8:	f7fe f96e 	bl	45c8 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    62ec:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    62ee:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    62f0:	3008      	adds	r0, #8
    62f2:	f00c fff1 	bl	132d8 <net_buf_simple_add>
	hdr->code = op;
    62f6:	7005      	strb	r5, [r0, #0]
}
    62f8:	4620      	mov	r0, r4
    62fa:	bd38      	pop	{r3, r4, r5, pc}

000062fc <smp_signing_info>:
    62fc:	2007      	movs	r0, #7
    62fe:	4770      	bx	lr

00006300 <sys_mem_swap.constprop.13>:
 * Where n is an index and 'end' the last index of buf.
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
    6300:	b510      	push	{r4, lr}
    6302:	1e43      	subs	r3, r0, #1
    6304:	f100 0210 	add.w	r2, r0, #16
    6308:	3007      	adds	r0, #7
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    630a:	f812 4c01 	ldrb.w	r4, [r2, #-1]
		u8_t tmp = ((u8_t *)buf)[i];
    630e:	7859      	ldrb	r1, [r3, #1]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    6310:	f803 4f01 	strb.w	r4, [r3, #1]!
	for (i = 0; i < (length/2); i++) {
    6314:	4283      	cmp	r3, r0
		((u8_t *)buf)[length - 1 - i] = tmp;
    6316:	f802 1d01 	strb.w	r1, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
    631a:	d1f6      	bne.n	630a <sys_mem_swap.constprop.13+0xa>
	}
}
    631c:	bd10      	pop	{r4, pc}

0000631e <smp_f6>:
{
    631e:	b570      	push	{r4, r5, r6, lr}
    6320:	b096      	sub	sp, #88	; 0x58
    6322:	4605      	mov	r5, r0
    6324:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
    6326:	a805      	add	r0, sp, #20
    6328:	2210      	movs	r2, #16
{
    632a:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
    632c:	f7ff fefc 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    6330:	2210      	movs	r2, #16
    6332:	4631      	mov	r1, r6
    6334:	a809      	add	r0, sp, #36	; 0x24
    6336:	f7ff fef7 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    633a:	4621      	mov	r1, r4
    633c:	2210      	movs	r2, #16
    633e:	a80d      	add	r0, sp, #52	; 0x34
    6340:	f7ff fef2 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    6344:	2203      	movs	r2, #3
    6346:	991a      	ldr	r1, [sp, #104]	; 0x68
    6348:	a811      	add	r0, sp, #68	; 0x44
    634a:	f7ff feed 	bl	6128 <sys_memcpy_swap>
	m[51] = a1->type;
    634e:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    6350:	f814 3b01 	ldrb.w	r3, [r4], #1
    6354:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    6358:	4621      	mov	r1, r4
    635a:	2206      	movs	r2, #6
    635c:	a812      	add	r0, sp, #72	; 0x48
    635e:	f7fa f93f 	bl	5e0 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    6362:	4621      	mov	r1, r4
    6364:	2206      	movs	r2, #6
    6366:	a812      	add	r0, sp, #72	; 0x48
    6368:	f7ff fede 	bl	6128 <sys_memcpy_swap>
	m[58] = a2->type;
    636c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    636e:	f814 3b01 	ldrb.w	r3, [r4], #1
    6372:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    6376:	4621      	mov	r1, r4
    6378:	2206      	movs	r2, #6
    637a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    637e:	f7fa f92f 	bl	5e0 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    6382:	4621      	mov	r1, r4
    6384:	2206      	movs	r2, #6
    6386:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    638a:	f7ff fecd 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
    638e:	2210      	movs	r2, #16
    6390:	4629      	mov	r1, r5
    6392:	a801      	add	r0, sp, #4
    6394:	f7ff fec8 	bl	6128 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    6398:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    639a:	2241      	movs	r2, #65	; 0x41
    639c:	a905      	add	r1, sp, #20
    639e:	a801      	add	r0, sp, #4
    63a0:	f7ff ff28 	bl	61f4 <bt_smp_aes_cmac>
	if (err) {
    63a4:	4604      	mov	r4, r0
    63a6:	b910      	cbnz	r0, 63ae <smp_f6+0x90>
	sys_mem_swap(check, 16);
    63a8:	981d      	ldr	r0, [sp, #116]	; 0x74
    63aa:	f7ff ffa9 	bl	6300 <sys_mem_swap.constprop.13>
}
    63ae:	4620      	mov	r0, r4
    63b0:	b016      	add	sp, #88	; 0x58
    63b2:	bd70      	pop	{r4, r5, r6, pc}

000063b4 <smp_f4>:
{
    63b4:	b570      	push	{r4, r5, r6, lr}
    63b6:	b096      	sub	sp, #88	; 0x58
    63b8:	4614      	mov	r4, r2
    63ba:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
    63bc:	2220      	movs	r2, #32
    63be:	4601      	mov	r1, r0
    63c0:	a805      	add	r0, sp, #20
{
    63c2:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    63c4:	f7ff feb0 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    63c8:	2220      	movs	r2, #32
    63ca:	4631      	mov	r1, r6
    63cc:	a80d      	add	r0, sp, #52	; 0x34
    63ce:	f7ff feab 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    63d2:	4621      	mov	r1, r4
    63d4:	2210      	movs	r2, #16
    63d6:	a801      	add	r0, sp, #4
	m[64] = z;
    63d8:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
    63dc:	f7ff fea4 	bl	6128 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    63e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    63e2:	2241      	movs	r2, #65	; 0x41
    63e4:	a905      	add	r1, sp, #20
    63e6:	a801      	add	r0, sp, #4
    63e8:	f7ff ff04 	bl	61f4 <bt_smp_aes_cmac>
	if (err) {
    63ec:	4604      	mov	r4, r0
    63ee:	b910      	cbnz	r0, 63f6 <smp_f4+0x42>
	sys_mem_swap(res, 16);
    63f0:	981a      	ldr	r0, [sp, #104]	; 0x68
    63f2:	f7ff ff85 	bl	6300 <sys_mem_swap.constprop.13>
}
    63f6:	4620      	mov	r0, r4
    63f8:	b016      	add	sp, #88	; 0x58
    63fa:	bd70      	pop	{r4, r5, r6, pc}

000063fc <smp_send>:
{
    63fc:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    63fe:	4613      	mov	r3, r2
{
    6400:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    6402:	460a      	mov	r2, r1
    6404:	6800      	ldr	r0, [r0, #0]
    6406:	2106      	movs	r1, #6
    6408:	f7fe f8e1 	bl	45ce <bt_l2cap_send_cb>
    640c:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    6410:	f247 5230 	movw	r2, #30000	; 0x7530
    6414:	4802      	ldr	r0, [pc, #8]	; (6420 <smp_send+0x24>)
}
    6416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    641a:	f00d bf89 	b.w	14330 <k_delayed_work_submit_to_queue>
    641e:	bf00      	nop
    6420:	20004160 	.word	0x20004160

00006424 <compute_and_check_and_send_slave_dhcheck>:
{
    6424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset(r, 0, sizeof(r));
    6428:	2210      	movs	r2, #16
{
    642a:	b0a3      	sub	sp, #140	; 0x8c
    642c:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    642e:	2100      	movs	r1, #0
    6430:	eb0d 0002 	add.w	r0, sp, r2
    6434:	f7fa f900 	bl	638 <memset>
	switch (smp->method) {
    6438:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    643c:	2b03      	cmp	r3, #3
    643e:	f200 8082 	bhi.w	6546 <compute_and_check_and_send_slave_dhcheck+0x122>
    6442:	e8df f003 	tbb	[pc, r3]
    6446:	0208      	.short	0x0208
    6448:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    644a:	2204      	movs	r2, #4
    644c:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    6450:	a804      	add	r0, sp, #16
    6452:	f7fa f8c5 	bl	5e0 <memcpy>
	u8_t m[53] = { 0x00, /* counter */
    6456:	ad14      	add	r5, sp, #80	; 0x50
    6458:	2235      	movs	r2, #53	; 0x35
    645a:	2100      	movs	r1, #0
    645c:	4628      	mov	r0, r5
		   &smp->chan.chan.conn->le.init_addr,
    645e:	f8d4 a000 	ldr.w	sl, [r4]
	u8_t m[53] = { 0x00, /* counter */
    6462:	f7fa f8e9 	bl	638 <memset>
    6466:	2362      	movs	r3, #98	; 0x62
    6468:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    646c:	2374      	movs	r3, #116	; 0x74
    646e:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
	sys_memcpy_swap(ws, w, 32);
    6472:	ae0c      	add	r6, sp, #48	; 0x30
	u8_t m[53] = { 0x00, /* counter */
    6474:	236c      	movs	r3, #108	; 0x6c
    6476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(ws, w, 32);
    647a:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    647c:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    647e:	f204 112b 	addw	r1, r4, #299	; 0x12b
    6482:	4630      	mov	r0, r6
	u8_t m[53] = { 0x00, /* counter */
    6484:	f04f 0b01 	mov.w	fp, #1
    6488:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    648c:	f88d b083 	strb.w	fp, [sp, #131]	; 0x83
	sys_memcpy_swap(ws, w, 32);
    6490:	f7ff fe4a 	bl	6128 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    6494:	ab08      	add	r3, sp, #32
    6496:	2220      	movs	r2, #32
    6498:	4631      	mov	r1, r6
    649a:	4847      	ldr	r0, [pc, #284]	; (65b8 <compute_and_check_and_send_slave_dhcheck+0x194>)
    649c:	f7ff feaa 	bl	61f4 <bt_smp_aes_cmac>
	if (err) {
    64a0:	2800      	cmp	r0, #0
    64a2:	d150      	bne.n	6546 <compute_and_check_and_send_slave_dhcheck+0x122>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    64a4:	f104 08cb 	add.w	r8, r4, #203	; 0xcb
	sys_memcpy_swap(m + 5, n1, 16);
    64a8:	2210      	movs	r2, #16
    64aa:	4641      	mov	r1, r8
    64ac:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    64b0:	f104 09bb 	add.w	r9, r4, #187	; 0xbb
	sys_memcpy_swap(m + 5, n1, 16);
    64b4:	f7ff fe38 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    64b8:	2210      	movs	r2, #16
    64ba:	4649      	mov	r1, r9
    64bc:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    64c0:	f7ff fe32 	bl	6128 <sys_memcpy_swap>
	m[37] = a1->type;
    64c4:	f89a 304f 	ldrb.w	r3, [sl, #79]	; 0x4f
    64c8:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    64cc:	2206      	movs	r2, #6
    64ce:	f10a 0150 	add.w	r1, sl, #80	; 0x50
    64d2:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    64d6:	f7ff fe27 	bl	6128 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    64da:	f204 175b 	addw	r7, r4, #347	; 0x15b
	m[44] = a2->type;
    64de:	f89a 3056 	ldrb.w	r3, [sl, #86]	; 0x56
    64e2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    64e6:	2206      	movs	r2, #6
    64e8:	f10a 0157 	add.w	r1, sl, #87	; 0x57
    64ec:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    64f0:	f7ff fe1a 	bl	6128 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    64f4:	463b      	mov	r3, r7
    64f6:	2235      	movs	r2, #53	; 0x35
    64f8:	4629      	mov	r1, r5
    64fa:	a808      	add	r0, sp, #32
    64fc:	f7ff fe7a 	bl	61f4 <bt_smp_aes_cmac>
	if (err) {
    6500:	bb08      	cbnz	r0, 6546 <compute_and_check_and_send_slave_dhcheck+0x122>
	sys_mem_swap(mackey, 16);
    6502:	4638      	mov	r0, r7
		   smp->tk)) {
    6504:	f104 0adb 	add.w	sl, r4, #219	; 0xdb
	sys_mem_swap(mackey, 16);
    6508:	f7ff fefa 	bl	6300 <sys_mem_swap.constprop.13>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    650c:	4653      	mov	r3, sl
    650e:	2235      	movs	r2, #53	; 0x35
    6510:	4629      	mov	r1, r5
    6512:	a808      	add	r0, sp, #32
	m[0] = 0x01;
    6514:	f88d b050 	strb.w	fp, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    6518:	f7ff fe6c 	bl	61f4 <bt_smp_aes_cmac>
	if (err) {
    651c:	b998      	cbnz	r0, 6546 <compute_and_check_and_send_slave_dhcheck+0x122>
	sys_mem_swap(ltk, 16);
    651e:	4650      	mov	r0, sl
    6520:	f7ff feee 	bl	6300 <sys_mem_swap.constprop.13>
		   &smp->chan.chan.conn->le.resp_addr,
    6524:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    6526:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.resp_addr,
    6528:	f852 3ba5 	ldr.w	r3, [r2], #165
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    652c:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    652e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr,
    6532:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    6534:	e88d 000c 	stmia.w	sp, {r2, r3}
    6538:	9102      	str	r1, [sp, #8]
    653a:	ab04      	add	r3, sp, #16
    653c:	4642      	mov	r2, r8
    653e:	4649      	mov	r1, r9
    6540:	f7ff feed 	bl	631e <smp_f6>
    6544:	b108      	cbz	r0, 654a <compute_and_check_and_send_slave_dhcheck+0x126>
		return BT_SMP_ERR_UNSPECIFIED;
    6546:	2008      	movs	r0, #8
    6548:	e031      	b.n	65ae <compute_and_check_and_send_slave_dhcheck+0x18a>
		   &smp->chan.chan.conn->le.init_addr,
    654a:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    654c:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.init_addr,
    654e:	f852 3b9e 	ldr.w	r3, [r2], #158
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    6552:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    6554:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    6558:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    655a:	e88d 000c 	stmia.w	sp, {r2, r3}
    655e:	9102      	str	r1, [sp, #8]
    6560:	ab04      	add	r3, sp, #16
    6562:	464a      	mov	r2, r9
    6564:	4641      	mov	r1, r8
    6566:	f7ff feda 	bl	631e <smp_f6>
    656a:	2800      	cmp	r0, #0
    656c:	d1eb      	bne.n	6546 <compute_and_check_and_send_slave_dhcheck+0x122>
	if (memcmp(smp->e, re, 16)) {
    656e:	2210      	movs	r2, #16
    6570:	4631      	mov	r1, r6
    6572:	f204 104b 	addw	r0, r4, #331	; 0x14b
    6576:	f7fa f81e 	bl	5b6 <memcmp>
    657a:	4607      	mov	r7, r0
    657c:	b9d0      	cbnz	r0, 65b4 <compute_and_check_and_send_slave_dhcheck+0x190>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    657e:	200d      	movs	r0, #13
    6580:	f7ff feae 	bl	62e0 <smp_create_pdu.isra.1>
	if (!buf) {
    6584:	4606      	mov	r6, r0
    6586:	b160      	cbz	r0, 65a2 <compute_and_check_and_send_slave_dhcheck+0x17e>
	req = net_buf_add(buf, sizeof(*req));
    6588:	2110      	movs	r1, #16
    658a:	3008      	adds	r0, #8
    658c:	f00c fea4 	bl	132d8 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    6590:	2210      	movs	r2, #16
    6592:	4629      	mov	r1, r5
    6594:	f7fa f824 	bl	5e0 <memcpy>
	smp_send(smp, buf, NULL);
    6598:	463a      	mov	r2, r7
    659a:	4631      	mov	r1, r6
    659c:	4620      	mov	r0, r4
    659e:	f7ff ff2d 	bl	63fc <smp_send>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    65a2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    65a6:	2101      	movs	r1, #1
    65a8:	f7ff fe10 	bl	61cc <atomic_set_bit>
	return 0;
    65ac:	2000      	movs	r0, #0
}
    65ae:	b023      	add	sp, #140	; 0x8c
    65b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    65b4:	200b      	movs	r0, #11
    65b6:	e7fa      	b.n	65ae <compute_and_check_and_send_slave_dhcheck+0x18a>
    65b8:	00014ccc 	.word	0x00014ccc

000065bc <send_pairing_rsp>:
{
    65bc:	b538      	push	{r3, r4, r5, lr}
    65be:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    65c0:	2002      	movs	r0, #2
    65c2:	f7ff fe8d 	bl	62e0 <smp_create_pdu.isra.1>
	if (!rsp_buf) {
    65c6:	4604      	mov	r4, r0
    65c8:	b178      	cbz	r0, 65ea <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    65ca:	2106      	movs	r1, #6
    65cc:	3008      	adds	r0, #8
    65ce:	f00c fe83 	bl	132d8 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    65d2:	f105 01a5 	add.w	r1, r5, #165	; 0xa5
    65d6:	2206      	movs	r2, #6
    65d8:	f7fa f802 	bl	5e0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    65dc:	4628      	mov	r0, r5
    65de:	2200      	movs	r2, #0
    65e0:	4621      	mov	r1, r4
    65e2:	f7ff ff0b 	bl	63fc <smp_send>
	return 0;
    65e6:	2000      	movs	r0, #0
    65e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    65ea:	2008      	movs	r0, #8
}
    65ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000065f0 <smp_pairing_req>:
{
    65f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    65f4:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    65f6:	78f3      	ldrb	r3, [r6, #3]
    65f8:	3b07      	subs	r3, #7
    65fa:	2b09      	cmp	r3, #9
{
    65fc:	4605      	mov	r5, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    65fe:	f200 812c 	bhi.w	685a <smp_pairing_req+0x26a>
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    6602:	f100 0794 	add.w	r7, r0, #148	; 0x94
    6606:	2100      	movs	r1, #0
    6608:	22e0      	movs	r2, #224	; 0xe0
    660a:	4638      	mov	r0, r7
    660c:	f7fa f814 	bl	638 <memset>
	if (bt_rand(smp->prnd, 16)) {
    6610:	2110      	movs	r1, #16
    6612:	f105 00bb 	add.w	r0, r5, #187	; 0xbb
    6616:	f002 f8d9 	bl	87cc <bt_rand>
    661a:	2800      	cmp	r0, #0
    661c:	f040 80be 	bne.w	679c <smp_pairing_req+0x1ac>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    6620:	2105      	movs	r1, #5
    6622:	4638      	mov	r0, r7
    6624:	f7ff fdd2 	bl	61cc <atomic_set_bit>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    6628:	2301      	movs	r3, #1
    662a:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
	memcpy(smp->preq + 1, req, sizeof(*req));
    662e:	2206      	movs	r2, #6
    6630:	4631      	mov	r1, r6
    6632:	f105 009e 	add.w	r0, r5, #158	; 0x9e
    6636:	f7f9 ffd3 	bl	5e0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    663a:	2302      	movs	r3, #2
    663c:	f885 30a4 	strb.w	r3, [r5, #164]	; 0xa4
	if (sc_supported) {
    6640:	4b87      	ldr	r3, [pc, #540]	; (6860 <smp_pairing_req+0x270>)
	rsp->auth_req = get_auth(req->auth_req);
    6642:	78b4      	ldrb	r4, [r6, #2]
	if (sc_supported) {
    6644:	781b      	ldrb	r3, [r3, #0]
    6646:	2b00      	cmp	r3, #0
    6648:	f000 808c 	beq.w	6764 <smp_pairing_req+0x174>
		auth &= BT_SMP_AUTH_MASK_SC;
    664c:	f004 040f 	and.w	r4, r4, #15
	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    6650:	f7ff fd76 	bl	6140 <get_io_capa>
    6654:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    6656:	bf0c      	ite	eq
    6658:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    665c:	f044 0404 	orrne.w	r4, r4, #4
	rsp->auth_req = get_auth(req->auth_req);
    6660:	f885 40a7 	strb.w	r4, [r5, #167]	; 0xa7
	rsp->io_capability = get_io_capa();
    6664:	f7ff fd6c 	bl	6140 <get_io_capa>
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    6668:	f04f 0900 	mov.w	r9, #0
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    666c:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa();
    666e:	f885 00a5 	strb.w	r0, [r5, #165]	; 0xa5
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    6672:	f885 90a6 	strb.w	r9, [r5, #166]	; 0xa6
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    6676:	f885 30a8 	strb.w	r3, [r5, #168]	; 0xa8
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    667a:	7933      	ldrb	r3, [r6, #4]
    667c:	f003 0303 	and.w	r3, r3, #3
    6680:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    6684:	7973      	ldrb	r3, [r6, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    6686:	f014 0f08 	tst.w	r4, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    668a:	f003 0301 	and.w	r3, r3, #1
    668e:	f885 30aa 	strb.w	r3, [r5, #170]	; 0xaa
    6692:	f105 0898 	add.w	r8, r5, #152	; 0x98
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    6696:	d00e      	beq.n	66b6 <smp_pairing_req+0xc6>
    6698:	78b3      	ldrb	r3, [r6, #2]
    669a:	071c      	lsls	r4, r3, #28
    669c:	d50b      	bpl.n	66b6 <smp_pairing_req+0xc6>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    669e:	2105      	movs	r1, #5
    66a0:	4640      	mov	r0, r8
    66a2:	f7ff fd93 	bl	61cc <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    66a6:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
		rsp->resp_key_dist &= SEND_KEYS_SC;
    66aa:	f885 90aa 	strb.w	r9, [r5, #170]	; 0xaa
		rsp->init_key_dist &= RECV_KEYS_SC;
    66ae:	f003 0302 	and.w	r3, r3, #2
    66b2:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    66b6:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
    66ba:	0698      	lsls	r0, r3, #26
    66bc:	d506      	bpl.n	66cc <smp_pairing_req+0xdc>
    66be:	78b3      	ldrb	r3, [r6, #2]
    66c0:	0699      	lsls	r1, r3, #26
    66c2:	d503      	bpl.n	66cc <smp_pairing_req+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    66c4:	2111      	movs	r1, #17
    66c6:	4640      	mov	r0, r8
    66c8:	f7ff fd80 	bl	61cc <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    66cc:	f895 30aa 	ldrb.w	r3, [r5, #170]	; 0xaa
    66d0:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
	smp->remote_dist = rsp->init_key_dist;
    66d4:	f895 30a9 	ldrb.w	r3, [r5, #169]	; 0xa9
    66d8:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    66dc:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
    66e0:	07da      	lsls	r2, r3, #31
    66e2:	d506      	bpl.n	66f2 <smp_pairing_req+0x102>
    66e4:	78b3      	ldrb	r3, [r6, #2]
    66e6:	07db      	lsls	r3, r3, #31
    66e8:	d503      	bpl.n	66f2 <smp_pairing_req+0x102>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    66ea:	210a      	movs	r1, #10
    66ec:	4640      	mov	r0, r8
    66ee:	f7ff fd6d 	bl	61cc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    66f2:	2103      	movs	r1, #3
    66f4:	4640      	mov	r0, r8
    66f6:	f7ff fd69 	bl	61cc <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    66fa:	2105      	movs	r1, #5
    66fc:	4640      	mov	r0, r8
    66fe:	f7ff fd58 	bl	61b2 <atomic_test_bit>
    6702:	7836      	ldrb	r6, [r6, #0]
    6704:	2800      	cmp	r0, #0
    6706:	d17e      	bne.n	6806 <smp_pairing_req+0x216>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    6708:	2e04      	cmp	r6, #4
    670a:	d82e      	bhi.n	676a <smp_pairing_req+0x17a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    670c:	f895 40a0 	ldrb.w	r4, [r5, #160]	; 0xa0
    6710:	f895 00a7 	ldrb.w	r0, [r5, #167]	; 0xa7
    6714:	4304      	orrs	r4, r0
    6716:	f014 0404 	ands.w	r4, r4, #4
    671a:	d00e      	beq.n	673a <smp_pairing_req+0x14a>
	method = gen_method_legacy[remote_io][get_io_capa()];
    671c:	f7ff fd10 	bl	6140 <get_io_capa>
    6720:	4b50      	ldr	r3, [pc, #320]	; (6864 <smp_pairing_req+0x274>)
    6722:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    6726:	441e      	add	r6, r3
    6728:	5c34      	ldrb	r4, [r6, r0]
	if (method == PASSKEY_ROLE) {
    672a:	2c04      	cmp	r4, #4
    672c:	d105      	bne.n	673a <smp_pairing_req+0x14a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    672e:	682b      	ldr	r3, [r5, #0]
    6730:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    6732:	2b00      	cmp	r3, #0
    6734:	bf0c      	ite	eq
    6736:	2402      	moveq	r4, #2
    6738:	2401      	movne	r4, #1
	smp->method = legacy_get_pair_method(smp, remote_io);
    673a:	f885 409c 	strb.w	r4, [r5, #156]	; 0x9c
	if (smp->method == JUST_WORKS &&
    673e:	b9b4      	cbnz	r4, 676e <smp_pairing_req+0x17e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    6740:	210c      	movs	r1, #12
    6742:	4640      	mov	r0, r8
    6744:	f7ff fd35 	bl	61b2 <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    6748:	b988      	cbnz	r0, 676e <smp_pairing_req+0x17e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    674a:	4e47      	ldr	r6, [pc, #284]	; (6868 <smp_pairing_req+0x278>)
    674c:	6833      	ldr	r3, [r6, #0]
    674e:	b173      	cbz	r3, 676e <smp_pairing_req+0x17e>
	    bt_auth && bt_auth->pairing_confirm) {
    6750:	691b      	ldr	r3, [r3, #16]
    6752:	b163      	cbz	r3, 676e <smp_pairing_req+0x17e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    6754:	4640      	mov	r0, r8
    6756:	2109      	movs	r1, #9
    6758:	f7ff fd38 	bl	61cc <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    675c:	6833      	ldr	r3, [r6, #0]
    675e:	6828      	ldr	r0, [r5, #0]
    6760:	691b      	ldr	r3, [r3, #16]
    6762:	e04e      	b.n	6802 <smp_pairing_req+0x212>
		auth &= BT_SMP_AUTH_MASK;
    6764:	f004 0407 	and.w	r4, r4, #7
    6768:	e772      	b.n	6650 <smp_pairing_req+0x60>
		return JUST_WORKS;
    676a:	4604      	mov	r4, r0
    676c:	e7e5      	b.n	673a <smp_pairing_req+0x14a>
	ret = send_pairing_rsp(smp);
    676e:	4628      	mov	r0, r5
    6770:	f7ff ff24 	bl	65bc <send_pairing_rsp>
	if (ret) {
    6774:	4604      	mov	r4, r0
    6776:	2800      	cmp	r0, #0
    6778:	d137      	bne.n	67ea <smp_pairing_req+0x1fa>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    677a:	4638      	mov	r0, r7
    677c:	2103      	movs	r1, #3
    677e:	f7ff fd25 	bl	61cc <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    6782:	682e      	ldr	r6, [r5, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    6784:	f106 0048 	add.w	r0, r6, #72	; 0x48
    6788:	f000 ffc4 	bl	7714 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    678c:	b940      	cbnz	r0, 67a0 <smp_pairing_req+0x1b0>
	switch (smp->method) {
    678e:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    6792:	2b01      	cmp	r3, #1
    6794:	d02d      	beq.n	67f2 <smp_pairing_req+0x202>
    6796:	d328      	bcc.n	67ea <smp_pairing_req+0x1fa>
    6798:	2b02      	cmp	r3, #2
    679a:	d00c      	beq.n	67b6 <smp_pairing_req+0x1c6>
		return ret;
    679c:	2408      	movs	r4, #8
    679e:	e024      	b.n	67ea <smp_pairing_req+0x1fa>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    67a0:	4621      	mov	r1, r4
    67a2:	3008      	adds	r0, #8
    67a4:	f7ff fd05 	bl	61b2 <atomic_test_bit>
    67a8:	2800      	cmp	r0, #0
    67aa:	d0f0      	beq.n	678e <smp_pairing_req+0x19e>
    67ac:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    67b0:	2b00      	cmp	r3, #0
    67b2:	d0f3      	beq.n	679c <smp_pairing_req+0x1ac>
    67b4:	e7eb      	b.n	678e <smp_pairing_req+0x19e>
		if (bt_rand(&passkey, sizeof(passkey))) {
    67b6:	2104      	movs	r1, #4
    67b8:	eb0d 0001 	add.w	r0, sp, r1
    67bc:	f002 f806 	bl	87cc <bt_rand>
    67c0:	2800      	cmp	r0, #0
    67c2:	d1eb      	bne.n	679c <smp_pairing_req+0x1ac>
		passkey %= 1000000;
    67c4:	9a01      	ldr	r2, [sp, #4]
    67c6:	4b29      	ldr	r3, [pc, #164]	; (686c <smp_pairing_req+0x27c>)
    67c8:	fbb2 f1f3 	udiv	r1, r2, r3
    67cc:	fb03 2111 	mls	r1, r3, r1, r2
		bt_auth->passkey_display(conn, passkey);
    67d0:	4b25      	ldr	r3, [pc, #148]	; (6868 <smp_pairing_req+0x278>)
		passkey %= 1000000;
    67d2:	9101      	str	r1, [sp, #4]
		bt_auth->passkey_display(conn, passkey);
    67d4:	681b      	ldr	r3, [r3, #0]
    67d6:	4630      	mov	r0, r6
    67d8:	681b      	ldr	r3, [r3, #0]
    67da:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    67dc:	2204      	movs	r2, #4
    67de:	eb0d 0102 	add.w	r1, sp, r2
    67e2:	f105 00db 	add.w	r0, r5, #219	; 0xdb
    67e6:	f7f9 fefb 	bl	5e0 <memcpy>
}
    67ea:	4620      	mov	r0, r4
    67ec:	b003      	add	sp, #12
    67ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    67f2:	4640      	mov	r0, r8
    67f4:	2109      	movs	r1, #9
    67f6:	f7ff fce9 	bl	61cc <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    67fa:	4b1b      	ldr	r3, [pc, #108]	; (6868 <smp_pairing_req+0x278>)
    67fc:	681b      	ldr	r3, [r3, #0]
    67fe:	685b      	ldr	r3, [r3, #4]
    6800:	4630      	mov	r0, r6
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    6802:	4798      	blx	r3
			return 0;
    6804:	e7f1      	b.n	67ea <smp_pairing_req+0x1fa>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    6806:	2e04      	cmp	r6, #4
    6808:	d825      	bhi.n	6856 <smp_pairing_req+0x266>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    680a:	f895 40a0 	ldrb.w	r4, [r5, #160]	; 0xa0
    680e:	f895 00a7 	ldrb.w	r0, [r5, #167]	; 0xa7
    6812:	4304      	orrs	r4, r0
    6814:	f014 0404 	ands.w	r4, r4, #4
    6818:	d006      	beq.n	6828 <smp_pairing_req+0x238>
	return gen_method_sc[remote_io][get_io_capa()];
    681a:	f7ff fc91 	bl	6140 <get_io_capa>
    681e:	4b14      	ldr	r3, [pc, #80]	; (6870 <smp_pairing_req+0x280>)
    6820:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    6824:	441e      	add	r6, r3
    6826:	5c34      	ldrb	r4, [r6, r0]
	smp->method = get_pair_method(smp, req->io_capability);
    6828:	f885 409c 	strb.w	r4, [r5, #156]	; 0x9c
	if (smp->method == JUST_WORKS) {
    682c:	b954      	cbnz	r4, 6844 <smp_pairing_req+0x254>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    682e:	210c      	movs	r1, #12
    6830:	4640      	mov	r0, r8
    6832:	f7ff fcbe 	bl	61b2 <atomic_test_bit>
    6836:	b928      	cbnz	r0, 6844 <smp_pairing_req+0x254>
    6838:	4e0b      	ldr	r6, [pc, #44]	; (6868 <smp_pairing_req+0x278>)
    683a:	6833      	ldr	r3, [r6, #0]
    683c:	b113      	cbz	r3, 6844 <smp_pairing_req+0x254>
		    bt_auth && bt_auth->pairing_confirm) {
    683e:	691b      	ldr	r3, [r3, #16]
    6840:	2b00      	cmp	r3, #0
    6842:	d187      	bne.n	6754 <smp_pairing_req+0x164>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    6844:	210c      	movs	r1, #12
    6846:	4638      	mov	r0, r7
    6848:	f7ff fcc0 	bl	61cc <atomic_set_bit>
	return send_pairing_rsp(smp);
    684c:	4628      	mov	r0, r5
    684e:	f7ff feb5 	bl	65bc <send_pairing_rsp>
    6852:	4604      	mov	r4, r0
    6854:	e7c9      	b.n	67ea <smp_pairing_req+0x1fa>
		return JUST_WORKS;
    6856:	2400      	movs	r4, #0
    6858:	e7e6      	b.n	6828 <smp_pairing_req+0x238>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    685a:	2406      	movs	r4, #6
    685c:	e7c5      	b.n	67ea <smp_pairing_req+0x1fa>
    685e:	bf00      	nop
    6860:	200006bd 	.word	0x200006bd
    6864:	00014c28 	.word	0x00014c28
    6868:	20003744 	.word	0x20003744
    686c:	000f4240 	.word	0x000f4240
    6870:	00014c41 	.word	0x00014c41

00006874 <sc_send_public_key>:
{
    6874:	b570      	push	{r4, r5, r6, lr}
    6876:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    6878:	200c      	movs	r0, #12
    687a:	f7ff fd31 	bl	62e0 <smp_create_pdu.isra.1>
	if (!req_buf) {
    687e:	4604      	mov	r4, r0
    6880:	b1a0      	cbz	r0, 68ac <sc_send_public_key+0x38>
	req = net_buf_add(req_buf, sizeof(*req));
    6882:	2140      	movs	r1, #64	; 0x40
    6884:	3008      	adds	r0, #8
    6886:	f00c fd27 	bl	132d8 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    688a:	2220      	movs	r2, #32
    688c:	4908      	ldr	r1, [pc, #32]	; (68b0 <sc_send_public_key+0x3c>)
	req = net_buf_add(req_buf, sizeof(*req));
    688e:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    6890:	f7f9 fea6 	bl	5e0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    6894:	2220      	movs	r2, #32
    6896:	18b0      	adds	r0, r6, r2
    6898:	4906      	ldr	r1, [pc, #24]	; (68b4 <sc_send_public_key+0x40>)
    689a:	f7f9 fea1 	bl	5e0 <memcpy>
	smp_send(smp, req_buf, NULL);
    689e:	4628      	mov	r0, r5
    68a0:	2200      	movs	r2, #0
    68a2:	4621      	mov	r1, r4
    68a4:	f7ff fdaa 	bl	63fc <smp_send>
	return 0;
    68a8:	2000      	movs	r0, #0
    68aa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    68ac:	2008      	movs	r0, #8
}
    68ae:	bd70      	pop	{r4, r5, r6, pc}
    68b0:	2000067d 	.word	0x2000067d
    68b4:	2000069d 	.word	0x2000069d

000068b8 <smp_send_pairing_random>:
{
    68b8:	b538      	push	{r3, r4, r5, lr}
    68ba:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    68bc:	2004      	movs	r0, #4
    68be:	f7ff fd0f 	bl	62e0 <smp_create_pdu.isra.1>
	if (!rsp_buf) {
    68c2:	4604      	mov	r4, r0
    68c4:	b178      	cbz	r0, 68e6 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
    68c6:	2110      	movs	r1, #16
    68c8:	3008      	adds	r0, #8
    68ca:	f00c fd05 	bl	132d8 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    68ce:	f105 01bb 	add.w	r1, r5, #187	; 0xbb
    68d2:	2210      	movs	r2, #16
    68d4:	f7f9 fe84 	bl	5e0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    68d8:	4628      	mov	r0, r5
    68da:	2200      	movs	r2, #0
    68dc:	4621      	mov	r1, r4
    68de:	f7ff fd8d 	bl	63fc <smp_send>
	return 0;
    68e2:	2000      	movs	r0, #0
    68e4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    68e6:	2008      	movs	r0, #8
}
    68e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000068ec <smp_send_pairing_confirm>:
{
    68ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    68ee:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
{
    68f2:	4604      	mov	r4, r0
	switch (smp->method) {
    68f4:	2b03      	cmp	r3, #3
    68f6:	d824      	bhi.n	6942 <smp_send_pairing_confirm+0x56>
    68f8:	e8df f003 	tbb	[pc, r3]
    68fc:	25020225 	.word	0x25020225
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    6900:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    6904:	f8d0 516c 	ldr.w	r5, [r0, #364]	; 0x16c
    6908:	40dd      	lsrs	r5, r3
    690a:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    690e:	f065 057f 	orn	r5, r5, #127	; 0x7f
    6912:	b2ed      	uxtb	r5, r5
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    6914:	2003      	movs	r0, #3
    6916:	f7ff fce3 	bl	62e0 <smp_create_pdu.isra.1>
	if (!buf) {
    691a:	4606      	mov	r6, r0
    691c:	b188      	cbz	r0, 6942 <smp_send_pairing_confirm+0x56>
	req = net_buf_add(buf, sizeof(*req));
    691e:	2110      	movs	r1, #16
    6920:	3008      	adds	r0, #8
    6922:	f00c fcd9 	bl	132d8 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    6926:	462b      	mov	r3, r5
    6928:	9000      	str	r0, [sp, #0]
    692a:	f104 02bb 	add.w	r2, r4, #187	; 0xbb
    692e:	f104 01eb 	add.w	r1, r4, #235	; 0xeb
    6932:	4810      	ldr	r0, [pc, #64]	; (6974 <smp_send_pairing_confirm+0x88>)
    6934:	f7ff fd3e 	bl	63b4 <smp_f4>
    6938:	4605      	mov	r5, r0
    693a:	b130      	cbz	r0, 694a <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    693c:	4630      	mov	r0, r6
    693e:	f00c fc99 	bl	13274 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    6942:	2008      	movs	r0, #8
    6944:	e014      	b.n	6970 <smp_send_pairing_confirm+0x84>
		r = 0;
    6946:	2500      	movs	r5, #0
    6948:	e7e4      	b.n	6914 <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL);
    694a:	4602      	mov	r2, r0
    694c:	4631      	mov	r1, r6
    694e:	4620      	mov	r0, r4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6950:	3498      	adds	r4, #152	; 0x98
    6952:	f7ff fd53 	bl	63fc <smp_send>
    6956:	f3bf 8f5b 	dmb	ish
    695a:	e854 3f00 	ldrex	r3, [r4]
    695e:	f023 0301 	bic.w	r3, r3, #1
    6962:	e844 3200 	strex	r2, r3, [r4]
    6966:	2a00      	cmp	r2, #0
    6968:	d1f7      	bne.n	695a <smp_send_pairing_confirm+0x6e>
    696a:	f3bf 8f5b 	dmb	ish
	return 0;
    696e:	4628      	mov	r0, r5
}
    6970:	b002      	add	sp, #8
    6972:	bd70      	pop	{r4, r5, r6, pc}
    6974:	2000067d 	.word	0x2000067d

00006978 <smp_public_key_slave.part.6>:
static u8_t smp_public_key_slave(struct bt_smp *smp)
    6978:	b538      	push	{r3, r4, r5, lr}
	switch (smp->method) {
    697a:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
static u8_t smp_public_key_slave(struct bt_smp *smp)
    697e:	4604      	mov	r4, r0
	switch (smp->method) {
    6980:	2b03      	cmp	r3, #3
    6982:	d812      	bhi.n	69aa <smp_public_key_slave.part.6+0x32>
    6984:	e8df f003 	tbb	[pc, r3]
    6988:	020b3802 	.word	0x020b3802
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    698c:	3094      	adds	r0, #148	; 0x94
    698e:	2104      	movs	r1, #4
    6990:	f7ff fc1c 	bl	61cc <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    6994:	4620      	mov	r0, r4
    6996:	f7ff ffa9 	bl	68ec <smp_send_pairing_confirm>
		if (err) {
    699a:	b1f0      	cbz	r0, 69da <smp_public_key_slave.part.6+0x62>
    699c:	bd38      	pop	{r3, r4, r5, pc}
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    699e:	2104      	movs	r1, #4
    69a0:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    69a4:	f001 ff12 	bl	87cc <bt_rand>
    69a8:	b108      	cbz	r0, 69ae <smp_public_key_slave.part.6+0x36>
		return BT_SMP_ERR_UNSPECIFIED;
    69aa:	2008      	movs	r0, #8
}
    69ac:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    69ae:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
    69b2:	4b19      	ldr	r3, [pc, #100]	; (6a18 <smp_public_key_slave.part.6+0xa0>)
    69b4:	fbb2 f1f3 	udiv	r1, r2, r3
    69b8:	fb03 2111 	mls	r1, r3, r1, r2
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    69bc:	4b17      	ldr	r3, [pc, #92]	; (6a1c <smp_public_key_slave.part.6+0xa4>)
	smp->passkey_round = 0;
    69be:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    69c2:	4625      	mov	r5, r4
    69c4:	681b      	ldr	r3, [r3, #0]
    69c6:	f855 0b94 	ldr.w	r0, [r5], #148
	smp->passkey %= 1000000;
    69ca:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    69ce:	681b      	ldr	r3, [r3, #0]
    69d0:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    69d2:	2103      	movs	r1, #3
    69d4:	4628      	mov	r0, r5
    69d6:	f7ff fbf9 	bl	61cc <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    69da:	4911      	ldr	r1, [pc, #68]	; (6a20 <smp_public_key_slave.part.6+0xa8>)
    69dc:	f104 00eb 	add.w	r0, r4, #235	; 0xeb
    69e0:	f7fc fff8 	bl	39d4 <bt_dh_key_gen>
    69e4:	4605      	mov	r5, r0
    69e6:	2800      	cmp	r0, #0
    69e8:	d1df      	bne.n	69aa <smp_public_key_slave.part.6+0x32>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    69ea:	f104 0098 	add.w	r0, r4, #152	; 0x98
    69ee:	2107      	movs	r1, #7
    69f0:	f7ff fbec 	bl	61cc <atomic_set_bit>
	return 0;
    69f4:	4628      	mov	r0, r5
    69f6:	bd38      	pop	{r3, r4, r5, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    69f8:	2103      	movs	r1, #3
    69fa:	3094      	adds	r0, #148	; 0x94
    69fc:	f7ff fbe6 	bl	61cc <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    6a00:	f104 0098 	add.w	r0, r4, #152	; 0x98
    6a04:	2109      	movs	r1, #9
    6a06:	f7ff fbe1 	bl	61cc <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    6a0a:	4b04      	ldr	r3, [pc, #16]	; (6a1c <smp_public_key_slave.part.6+0xa4>)
    6a0c:	6820      	ldr	r0, [r4, #0]
    6a0e:	681b      	ldr	r3, [r3, #0]
    6a10:	685b      	ldr	r3, [r3, #4]
    6a12:	4798      	blx	r3
    6a14:	e7e1      	b.n	69da <smp_public_key_slave.part.6+0x62>
    6a16:	bf00      	nop
    6a18:	000f4240 	.word	0x000f4240
    6a1c:	20003744 	.word	0x20003744
    6a20:	00006ae9 	.word	0x00006ae9

00006a24 <smp_pairing_rsp>:
    6a24:	2007      	movs	r0, #7
    6a26:	4770      	bx	lr

00006a28 <atomic_test_and_clear_bit>:
{
    6a28:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    6a2a:	f001 021f 	and.w	r2, r1, #31
    6a2e:	2301      	movs	r3, #1
    6a30:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6a32:	0949      	lsrs	r1, r1, #5
    6a34:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a36:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6a3a:	f3bf 8f5b 	dmb	ish
    6a3e:	e850 2f00 	ldrex	r2, [r0]
    6a42:	ea02 0104 	and.w	r1, r2, r4
    6a46:	e840 1e00 	strex	lr, r1, [r0]
    6a4a:	f1be 0f00 	cmp.w	lr, #0
    6a4e:	d1f6      	bne.n	6a3e <atomic_test_and_clear_bit+0x16>
    6a50:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    6a54:	421a      	tst	r2, r3
}
    6a56:	bf14      	ite	ne
    6a58:	2001      	movne	r0, #1
    6a5a:	2000      	moveq	r0, #0
    6a5c:	bd10      	pop	{r4, pc}

00006a5e <smp_reset>:
{
    6a5e:	b538      	push	{r3, r4, r5, lr}
    6a60:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    6a62:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    6a64:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    6a68:	f00d fc08 	bl	1427c <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    6a6c:	2300      	movs	r3, #0
    6a6e:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
	atomic_set(&smp->allowed_cmds, 0);
    6a72:	f104 0094 	add.w	r0, r4, #148	; 0x94
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6a76:	f3bf 8f5b 	dmb	ish
    6a7a:	e850 2f00 	ldrex	r2, [r0]
    6a7e:	e840 3100 	strex	r1, r3, [r0]
    6a82:	2900      	cmp	r1, #0
    6a84:	d1f9      	bne.n	6a7a <smp_reset+0x1c>
    6a86:	f3bf 8f5b 	dmb	ish
    6a8a:	f3bf 8f5b 	dmb	ish
    6a8e:	3498      	adds	r4, #152	; 0x98
    6a90:	e854 2f00 	ldrex	r2, [r4]
    6a94:	e844 3100 	strex	r1, r3, [r4]
    6a98:	2900      	cmp	r1, #0
    6a9a:	d1f9      	bne.n	6a90 <smp_reset+0x32>
    6a9c:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    6aa0:	7a2b      	ldrb	r3, [r5, #8]
    6aa2:	7a6a      	ldrb	r2, [r5, #9]
    6aa4:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
    6aa6:	bf18      	it	ne
    6aa8:	726b      	strbne	r3, [r5, #9]
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    6aaa:	2101      	movs	r1, #1
}
    6aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    6ab0:	f7ff bb8c 	b.w	61cc <atomic_set_bit>

00006ab4 <smp_error>:
{
    6ab4:	b570      	push	{r4, r5, r6, lr}
    6ab6:	4605      	mov	r5, r0
    6ab8:	460e      	mov	r6, r1
	smp_reset(smp);
    6aba:	f7ff ffd0 	bl	6a5e <smp_reset>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    6abe:	2005      	movs	r0, #5
    6ac0:	f7ff fc0e 	bl	62e0 <smp_create_pdu.isra.1>
	if (!buf) {
    6ac4:	4604      	mov	r4, r0
    6ac6:	b160      	cbz	r0, 6ae2 <smp_error+0x2e>
	rsp = net_buf_add(buf, sizeof(*rsp));
    6ac8:	2101      	movs	r1, #1
    6aca:	3008      	adds	r0, #8
    6acc:	f00c fc04 	bl	132d8 <net_buf_simple_add>
	rsp->reason = reason;
    6ad0:	7006      	strb	r6, [r0, #0]
    6ad2:	6828      	ldr	r0, [r5, #0]
    6ad4:	2300      	movs	r3, #0
    6ad6:	4622      	mov	r2, r4
    6ad8:	2106      	movs	r1, #6
    6ada:	f7fd fd78 	bl	45ce <bt_l2cap_send_cb>
	return 0;
    6ade:	2000      	movs	r0, #0
    6ae0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    6ae2:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    6ae6:	bd70      	pop	{r4, r5, r6, pc}

00006ae8 <bt_smp_dhkey_ready>:
{
    6ae8:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    6aea:	2107      	movs	r1, #7
{
    6aec:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    6aee:	4816      	ldr	r0, [pc, #88]	; (6b48 <bt_smp_dhkey_ready+0x60>)
    6af0:	f7ff ff9a 	bl	6a28 <atomic_test_and_clear_bit>
    6af4:	b338      	cbz	r0, 6b46 <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
    6af6:	b92c      	cbnz	r4, 6b04 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    6af8:	210b      	movs	r1, #11
			smp_error(smp, err);
    6afa:	4814      	ldr	r0, [pc, #80]	; (6b4c <bt_smp_dhkey_ready+0x64>)
}
    6afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    6b00:	f7ff bfd8 	b.w	6ab4 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    6b04:	4621      	mov	r1, r4
    6b06:	2220      	movs	r2, #32
    6b08:	4811      	ldr	r0, [pc, #68]	; (6b50 <bt_smp_dhkey_ready+0x68>)
    6b0a:	f7f9 fd69 	bl	5e0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    6b0e:	2109      	movs	r1, #9
    6b10:	480d      	ldr	r0, [pc, #52]	; (6b48 <bt_smp_dhkey_ready+0x60>)
    6b12:	f7ff fb4e 	bl	61b2 <atomic_test_bit>
    6b16:	b128      	cbz	r0, 6b24 <bt_smp_dhkey_ready+0x3c>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    6b18:	2108      	movs	r1, #8
    6b1a:	480b      	ldr	r0, [pc, #44]	; (6b48 <bt_smp_dhkey_ready+0x60>)
}
    6b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    6b20:	f7ff bb54 	b.w	61cc <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    6b24:	210d      	movs	r1, #13
    6b26:	4808      	ldr	r0, [pc, #32]	; (6b48 <bt_smp_dhkey_ready+0x60>)
    6b28:	f7ff fb43 	bl	61b2 <atomic_test_bit>
    6b2c:	2800      	cmp	r0, #0
    6b2e:	d1f3      	bne.n	6b18 <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    6b30:	2108      	movs	r1, #8
    6b32:	4805      	ldr	r0, [pc, #20]	; (6b48 <bt_smp_dhkey_ready+0x60>)
    6b34:	f7ff fb3d 	bl	61b2 <atomic_test_bit>
    6b38:	b128      	cbz	r0, 6b46 <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    6b3a:	4804      	ldr	r0, [pc, #16]	; (6b4c <bt_smp_dhkey_ready+0x64>)
    6b3c:	f7ff fc72 	bl	6424 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    6b40:	4601      	mov	r1, r0
    6b42:	2800      	cmp	r0, #0
    6b44:	d1d9      	bne.n	6afa <bt_smp_dhkey_ready+0x12>
    6b46:	bd10      	pop	{r4, pc}
    6b48:	20000578 	.word	0x20000578
    6b4c:	200004e0 	.word	0x200004e0
    6b50:	2000060b 	.word	0x2000060b

00006b54 <bt_smp_recv>:
{
    6b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    6b56:	898b      	ldrh	r3, [r1, #12]
{
    6b58:	4604      	mov	r4, r0
    6b5a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    6b5c:	b393      	cbz	r3, 6bc4 <bt_smp_recv+0x70>
	struct bt_smp_hdr *hdr = (void *)buf->data;
    6b5e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    6b60:	2101      	movs	r1, #1
	struct bt_smp_hdr *hdr = (void *)buf->data;
    6b62:	f850 7f08 	ldr.w	r7, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    6b66:	f00c fbd6 	bl	13316 <net_buf_simple_pull>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    6b6a:	2104      	movs	r1, #4
    6b6c:	f104 0098 	add.w	r0, r4, #152	; 0x98
    6b70:	f7ff fb1f 	bl	61b2 <atomic_test_bit>
    6b74:	bb30      	cbnz	r0, 6bc4 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    6b76:	7839      	ldrb	r1, [r7, #0]
    6b78:	290d      	cmp	r1, #13
    6b7a:	d803      	bhi.n	6b84 <bt_smp_recv+0x30>
    6b7c:	4e12      	ldr	r6, [pc, #72]	; (6bc8 <bt_smp_recv+0x74>)
    6b7e:	f856 3031 	ldr.w	r3, [r6, r1, lsl #3]
    6b82:	b92b      	cbnz	r3, 6b90 <bt_smp_recv+0x3c>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    6b84:	2107      	movs	r1, #7
		smp_error(smp, err);
    6b86:	4620      	mov	r0, r4
}
    6b88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, err);
    6b8c:	f7ff bf92 	b.w	6ab4 <smp_error>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    6b90:	f104 0094 	add.w	r0, r4, #148	; 0x94
    6b94:	f7ff ff48 	bl	6a28 <atomic_test_and_clear_bit>
    6b98:	783b      	ldrb	r3, [r7, #0]
    6b9a:	b918      	cbnz	r0, 6ba4 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    6b9c:	2b05      	cmp	r3, #5
    6b9e:	d011      	beq.n	6bc4 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    6ba0:	2108      	movs	r1, #8
    6ba2:	e7f0      	b.n	6b86 <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
    6ba4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
    6ba8:	89a9      	ldrh	r1, [r5, #12]
    6baa:	7912      	ldrb	r2, [r2, #4]
    6bac:	4291      	cmp	r1, r2
    6bae:	d001      	beq.n	6bb4 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    6bb0:	210a      	movs	r1, #10
    6bb2:	e7e8      	b.n	6b86 <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
    6bb4:	4629      	mov	r1, r5
    6bb6:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    6bba:	4620      	mov	r0, r4
    6bbc:	4798      	blx	r3
	if (err) {
    6bbe:	4601      	mov	r1, r0
    6bc0:	2800      	cmp	r0, #0
    6bc2:	d1e0      	bne.n	6b86 <bt_smp_recv+0x32>
    6bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bc6:	bf00      	nop
    6bc8:	00014c5c 	.word	0x00014c5c

00006bcc <bt_smp_pkey_ready>:
{
    6bcc:	b510      	push	{r4, lr}
	if (!pkey) {
    6bce:	4601      	mov	r1, r0
    6bd0:	4c0e      	ldr	r4, [pc, #56]	; (6c0c <bt_smp_pkey_ready+0x40>)
    6bd2:	b908      	cbnz	r0, 6bd8 <bt_smp_pkey_ready+0xc>
		sc_local_pkey_valid = false;
    6bd4:	7020      	strb	r0, [r4, #0]
		return;
    6bd6:	bd10      	pop	{r4, pc}
	memcpy(sc_public_key, pkey, 64);
    6bd8:	2240      	movs	r2, #64	; 0x40
    6bda:	480d      	ldr	r0, [pc, #52]	; (6c10 <bt_smp_pkey_ready+0x44>)
    6bdc:	f7f9 fd00 	bl	5e0 <memcpy>
	sc_local_pkey_valid = true;
    6be0:	2301      	movs	r3, #1
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    6be2:	2106      	movs	r1, #6
    6be4:	480b      	ldr	r0, [pc, #44]	; (6c14 <bt_smp_pkey_ready+0x48>)
	sc_local_pkey_valid = true;
    6be6:	7023      	strb	r3, [r4, #0]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    6be8:	f7ff fae3 	bl	61b2 <atomic_test_bit>
    6bec:	b168      	cbz	r0, 6c0a <bt_smp_pkey_ready+0x3e>
	err = sc_send_public_key(smp);
    6bee:	480a      	ldr	r0, [pc, #40]	; (6c18 <bt_smp_pkey_ready+0x4c>)
    6bf0:	f7ff fe40 	bl	6874 <sc_send_public_key>
	if (err) {
    6bf4:	b918      	cbnz	r0, 6bfe <bt_smp_pkey_ready+0x32>
    6bf6:	4808      	ldr	r0, [pc, #32]	; (6c18 <bt_smp_pkey_ready+0x4c>)
    6bf8:	f7ff febe 	bl	6978 <smp_public_key_slave.part.6>
		if (err) {
    6bfc:	b128      	cbz	r0, 6c0a <bt_smp_pkey_ready+0x3e>
			smp_error(smp, err);
    6bfe:	4601      	mov	r1, r0
}
    6c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    6c04:	4804      	ldr	r0, [pc, #16]	; (6c18 <bt_smp_pkey_ready+0x4c>)
    6c06:	f7ff bf55 	b.w	6ab4 <smp_error>
    6c0a:	bd10      	pop	{r4, pc}
    6c0c:	2000067c 	.word	0x2000067c
    6c10:	2000067d 	.word	0x2000067d
    6c14:	20000578 	.word	0x20000578
    6c18:	200004e0 	.word	0x200004e0

00006c1c <smp_pairing_failed>:
{
    6c1c:	b510      	push	{r4, lr}
	switch (smp->method) {
    6c1e:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    6c22:	3b01      	subs	r3, #1
    6c24:	2b02      	cmp	r3, #2
{
    6c26:	4604      	mov	r4, r0
	switch (smp->method) {
    6c28:	d804      	bhi.n	6c34 <smp_pairing_failed+0x18>
		bt_auth->cancel(conn);
    6c2a:	4b0a      	ldr	r3, [pc, #40]	; (6c54 <smp_pairing_failed+0x38>)
    6c2c:	6800      	ldr	r0, [r0, #0]
    6c2e:	681b      	ldr	r3, [r3, #0]
    6c30:	68db      	ldr	r3, [r3, #12]
    6c32:	4798      	blx	r3
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    6c34:	2102      	movs	r1, #2
    6c36:	f104 0098 	add.w	r0, r4, #152	; 0x98
    6c3a:	f7ff faba 	bl	61b2 <atomic_test_bit>
    6c3e:	b120      	cbz	r0, 6c4a <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    6c40:	6823      	ldr	r3, [r4, #0]
    6c42:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    6c44:	b108      	cbz	r0, 6c4a <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    6c46:	f000 fcdd 	bl	7604 <bt_keys_clear>
	smp_reset(smp);
    6c4a:	4620      	mov	r0, r4
    6c4c:	f7ff ff07 	bl	6a5e <smp_reset>
}
    6c50:	2000      	movs	r0, #0
    6c52:	bd10      	pop	{r4, pc}
    6c54:	20003744 	.word	0x20003744

00006c58 <smp_timeout>:
{
    6c58:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    6c5a:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    6c5e:	f5a0 75ba 	sub.w	r5, r0, #372	; 0x174
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    6c62:	2102      	movs	r1, #2
    6c64:	4620      	mov	r0, r4
    6c66:	f7ff faa4 	bl	61b2 <atomic_test_bit>
    6c6a:	b120      	cbz	r0, 6c76 <smp_timeout+0x1e>
	    smp->chan.chan.conn->le.keys) {
    6c6c:	682b      	ldr	r3, [r5, #0]
    6c6e:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    6c70:	b108      	cbz	r0, 6c76 <smp_timeout+0x1e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    6c72:	f000 fcc7 	bl	7604 <bt_keys_clear>
	smp_reset(smp);
    6c76:	4628      	mov	r0, r5
    6c78:	f7ff fef1 	bl	6a5e <smp_reset>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    6c7c:	4620      	mov	r0, r4
    6c7e:	2104      	movs	r1, #4
}
    6c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    6c84:	f7ff baa2 	b.w	61cc <atomic_set_bit>

00006c88 <bt_smp_encrypt_change>:
{
    6c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c8c:	4604      	mov	r4, r0
    6c8e:	b089      	sub	sp, #36	; 0x24
	if (hci_status) {
    6c90:	b999      	cbnz	r1, 6cba <bt_smp_encrypt_change+0x32>
	if (!smp || !conn->encrypt) {
    6c92:	6803      	ldr	r3, [r0, #0]
    6c94:	7a9b      	ldrb	r3, [r3, #10]
    6c96:	b183      	cbz	r3, 6cba <bt_smp_encrypt_change+0x32>
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    6c98:	f100 0598 	add.w	r5, r0, #152	; 0x98
    6c9c:	2101      	movs	r1, #1
    6c9e:	4628      	mov	r0, r5
    6ca0:	f7ff fec2 	bl	6a28 <atomic_test_and_clear_bit>
    6ca4:	b148      	cbz	r0, 6cba <bt_smp_encrypt_change+0x32>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    6ca6:	2103      	movs	r1, #3
    6ca8:	4628      	mov	r0, r5
    6caa:	f7ff fa82 	bl	61b2 <atomic_test_bit>
    6cae:	b938      	cbnz	r0, 6cc0 <bt_smp_encrypt_change+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    6cb0:	210b      	movs	r1, #11
    6cb2:	f104 0094 	add.w	r0, r4, #148	; 0x94
    6cb6:	f7ff fa89 	bl	61cc <atomic_set_bit>
}
    6cba:	b009      	add	sp, #36	; 0x24
    6cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    6cc0:	2105      	movs	r1, #5
    6cc2:	4628      	mov	r0, r5
    6cc4:	f7ff fa75 	bl	61b2 <atomic_test_bit>
    6cc8:	b1b8      	cbz	r0, 6cfa <bt_smp_encrypt_change+0x72>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    6cca:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    6cce:	071f      	lsls	r7, r3, #28
    6cd0:	d507      	bpl.n	6ce2 <bt_smp_encrypt_change+0x5a>
    6cd2:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    6cd6:	071e      	lsls	r6, r3, #28
    6cd8:	d503      	bpl.n	6ce2 <bt_smp_encrypt_change+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    6cda:	210e      	movs	r1, #14
    6cdc:	4628      	mov	r0, r5
    6cde:	f7ff fa75 	bl	61cc <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    6ce2:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    6ce6:	f023 0308 	bic.w	r3, r3, #8
    6cea:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    6cee:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    6cf2:	f023 0308 	bic.w	r3, r3, #8
    6cf6:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    6cfa:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    6cfe:	07d8      	lsls	r0, r3, #31
    6d00:	f140 8082 	bpl.w	6e08 <bt_smp_encrypt_change+0x180>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    6d04:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    6d06:	f104 0094 	add.w	r0, r4, #148	; 0x94
    6d0a:	f7ff fa5f 	bl	61cc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    6d0e:	2102      	movs	r1, #2
    6d10:	4628      	mov	r0, r5
    6d12:	f7ff fa5b 	bl	61cc <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
    6d16:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
    6d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	d067      	beq.n	6dee <bt_smp_encrypt_change+0x166>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    6d1e:	2105      	movs	r1, #5
    6d20:	4628      	mov	r0, r5
    6d22:	f7ff fa46 	bl	61b2 <atomic_test_bit>
    6d26:	4680      	mov	r8, r0
    6d28:	2800      	cmp	r0, #0
    6d2a:	d160      	bne.n	6dee <bt_smp_encrypt_change+0x166>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    6d2c:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    6d30:	07db      	lsls	r3, r3, #31
    6d32:	d55c      	bpl.n	6dee <bt_smp_encrypt_change+0x166>
	struct bt_keys *keys = conn->le.keys;
    6d34:	6823      	ldr	r3, [r4, #0]
		bt_rand(key, sizeof(key));
    6d36:	2110      	movs	r1, #16
    6d38:	eb0d 0001 	add.w	r0, sp, r1
	struct bt_keys *keys = conn->le.keys;
    6d3c:	6f1e      	ldr	r6, [r3, #112]	; 0x70
		bt_rand(key, sizeof(key));
    6d3e:	f001 fd45 	bl	87cc <bt_rand>
		bt_rand(&rand, sizeof(rand));
    6d42:	2108      	movs	r1, #8
    6d44:	eb0d 0001 	add.w	r0, sp, r1
    6d48:	f001 fd40 	bl	87cc <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    6d4c:	2102      	movs	r1, #2
    6d4e:	f10d 0006 	add.w	r0, sp, #6
    6d52:	f001 fd3b 	bl	87cc <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    6d56:	2006      	movs	r0, #6
    6d58:	f7ff fac2 	bl	62e0 <smp_create_pdu.isra.1>
		if (!buf) {
    6d5c:	4607      	mov	r7, r0
    6d5e:	2800      	cmp	r0, #0
    6d60:	d045      	beq.n	6dee <bt_smp_encrypt_change+0x166>
		info = net_buf_add(buf, sizeof(*info));
    6d62:	2110      	movs	r1, #16
    6d64:	3008      	adds	r0, #8
    6d66:	f00c fab7 	bl	132d8 <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    6d6a:	79f2      	ldrb	r2, [r6, #7]
    6d6c:	a904      	add	r1, sp, #16
		info = net_buf_add(buf, sizeof(*info));
    6d6e:	4681      	mov	r9, r0
		memcpy(info->ltk, key, keys->enc_size);
    6d70:	f7f9 fc36 	bl	5e0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    6d74:	79f0      	ldrb	r0, [r6, #7]
    6d76:	280f      	cmp	r0, #15
    6d78:	d805      	bhi.n	6d86 <bt_smp_encrypt_change+0xfe>
			memset(info->ltk + keys->enc_size, 0,
    6d7a:	f1c0 0210 	rsb	r2, r0, #16
    6d7e:	4641      	mov	r1, r8
    6d80:	4448      	add	r0, r9
    6d82:	f7f9 fc59 	bl	638 <memset>
		smp_send(smp, buf, NULL);
    6d86:	4639      	mov	r1, r7
    6d88:	2200      	movs	r2, #0
    6d8a:	4620      	mov	r0, r4
    6d8c:	f7ff fb36 	bl	63fc <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    6d90:	2007      	movs	r0, #7
    6d92:	f7ff faa5 	bl	62e0 <smp_create_pdu.isra.1>
		if (!buf) {
    6d96:	4607      	mov	r7, r0
    6d98:	b348      	cbz	r0, 6dee <bt_smp_encrypt_change+0x166>
		ident = net_buf_add(buf, sizeof(*ident));
    6d9a:	210a      	movs	r1, #10
    6d9c:	3008      	adds	r0, #8
    6d9e:	f00c fa9b 	bl	132d8 <net_buf_simple_add>
		ident->rand = rand;
    6da2:	9b02      	ldr	r3, [sp, #8]
    6da4:	f8c0 3002 	str.w	r3, [r0, #2]
    6da8:	9b03      	ldr	r3, [sp, #12]
    6daa:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    6dae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6db2:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    6db4:	4639      	mov	r1, r7
    6db6:	4620      	mov	r0, r4
    6db8:	4a18      	ldr	r2, [pc, #96]	; (6e1c <bt_smp_encrypt_change+0x194>)
    6dba:	f7ff fb1f 	bl	63fc <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    6dbe:	210a      	movs	r1, #10
    6dc0:	4628      	mov	r0, r5
    6dc2:	f7ff f9f6 	bl	61b2 <atomic_test_bit>
    6dc6:	b190      	cbz	r0, 6dee <bt_smp_encrypt_change+0x166>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    6dc8:	2101      	movs	r1, #1
    6dca:	4630      	mov	r0, r6
    6dcc:	f000 fcb0 	bl	7730 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    6dd0:	2210      	movs	r2, #16
    6dd2:	eb0d 0102 	add.w	r1, sp, r2
    6dd6:	f106 0052 	add.w	r0, r6, #82	; 0x52
    6dda:	f7f9 fc01 	bl	5e0 <memcpy>
			keys->slave_ltk.rand = rand;
    6dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6de2:	e9c6 2312 	strd	r2, r3, [r6, #72]	; 0x48
			keys->slave_ltk.ediv = ediv;
    6de6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6dea:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
	if (!smp->local_dist && !smp->remote_dist) {
    6dee:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
    6df2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	f47f af5d 	bne.w	6cba <bt_smp_encrypt_change+0x32>
	smp_reset(smp);
    6e00:	4620      	mov	r0, r4
    6e02:	f7ff fe2c 	bl	6a5e <smp_reset>
    6e06:	e758      	b.n	6cba <bt_smp_encrypt_change+0x32>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    6e08:	0799      	lsls	r1, r3, #30
    6e0a:	d501      	bpl.n	6e10 <bt_smp_encrypt_change+0x188>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    6e0c:	2108      	movs	r1, #8
    6e0e:	e77a      	b.n	6d06 <bt_smp_encrypt_change+0x7e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    6e10:	075a      	lsls	r2, r3, #29
    6e12:	f57f af7c 	bpl.w	6d0e <bt_smp_encrypt_change+0x86>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    6e16:	210a      	movs	r1, #10
    6e18:	e775      	b.n	6d06 <bt_smp_encrypt_change+0x7e>
    6e1a:	bf00      	nop
    6e1c:	00006eb5 	.word	0x00006eb5

00006e20 <smp_master_ident>:
{
    6e20:	b538      	push	{r3, r4, r5, lr}
    6e22:	4605      	mov	r5, r0
    6e24:	460c      	mov	r4, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    6e26:	f850 2b98 	ldr.w	r2, [r0], #152
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    6e2a:	210a      	movs	r1, #10
    6e2c:	f7ff f9c1 	bl	61b2 <atomic_test_bit>
    6e30:	b1b8      	cbz	r0, 6e62 <smp_master_ident+0x42>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    6e32:	f102 0148 	add.w	r1, r2, #72	; 0x48
    6e36:	2004      	movs	r0, #4
		struct bt_smp_master_ident *req = (void *)buf->data;
    6e38:	68a4      	ldr	r4, [r4, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    6e3a:	f000 fc29 	bl	7690 <bt_keys_get_type>
		if (!keys) {
    6e3e:	b348      	cbz	r0, 6e94 <smp_master_ident+0x74>
		keys->ltk.ediv = req->ediv;
    6e40:	7862      	ldrb	r2, [r4, #1]
    6e42:	7823      	ldrb	r3, [r4, #0]
    6e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6e48:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    6e4a:	f8d4 2002 	ldr.w	r2, [r4, #2]
    6e4e:	f8d4 3006 	ldr.w	r3, [r4, #6]
    6e52:	6143      	str	r3, [r0, #20]
    6e54:	6102      	str	r2, [r0, #16]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    6e56:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    6e5a:	f023 0301 	bic.w	r3, r3, #1
    6e5e:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    6e62:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    6e66:	079a      	lsls	r2, r3, #30
    6e68:	d510      	bpl.n	6e8c <smp_master_ident+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    6e6a:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    6e6c:	f105 0094 	add.w	r0, r5, #148	; 0x94
    6e70:	f7ff f9ac 	bl	61cc <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    6e74:	f8d5 4170 	ldr.w	r4, [r5, #368]	; 0x170
    6e78:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    6e7c:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    6e80:	b914      	cbnz	r4, 6e88 <smp_master_ident+0x68>
	smp_reset(smp);
    6e82:	4628      	mov	r0, r5
    6e84:	f7ff fdeb 	bl	6a5e <smp_reset>
	return 0;
    6e88:	2000      	movs	r0, #0
}
    6e8a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    6e8c:	075b      	lsls	r3, r3, #29
    6e8e:	d5f1      	bpl.n	6e74 <smp_master_ident+0x54>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    6e90:	210a      	movs	r1, #10
    6e92:	e7eb      	b.n	6e6c <smp_master_ident+0x4c>
			return BT_SMP_ERR_UNSPECIFIED;
    6e94:	2008      	movs	r0, #8
    6e96:	bd38      	pop	{r3, r4, r5, pc}

00006e98 <bt_smp_connected>:
{
    6e98:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    6e9a:	4905      	ldr	r1, [pc, #20]	; (6eb0 <bt_smp_connected+0x18>)
{
    6e9c:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    6e9e:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    6ea2:	f00d f9cd 	bl	14240 <k_delayed_work_init>
	smp_reset(smp);
    6ea6:	4620      	mov	r0, r4
}
    6ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    6eac:	f7ff bdd7 	b.w	6a5e <smp_reset>
    6eb0:	00006c59 	.word	0x00006c59

00006eb4 <ident_sent>:
{
    6eb4:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
    6eb6:	7883      	ldrb	r3, [r0, #2]
    6eb8:	b99b      	cbnz	r3, 6ee2 <ident_sent+0x2e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    6eba:	2106      	movs	r1, #6
    6ebc:	f7fd fbd7 	bl	466e <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    6ec0:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
    6ec4:	f022 0201 	bic.w	r2, r2, #1
    6ec8:	f880 2171 	strb.w	r2, [r0, #369]	; 0x171
		if (!smp->local_dist && !smp->remote_dist) {
    6ecc:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
    6ed0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6ed4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    6ed8:	b91b      	cbnz	r3, 6ee2 <ident_sent+0x2e>
}
    6eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smp_reset(smp);
    6ede:	f7ff bdbe 	b.w	6a5e <smp_reset>
    6ee2:	bd08      	pop	{r3, pc}

00006ee4 <smp_dhkey_check>:
{
    6ee4:	b538      	push	{r3, r4, r5, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    6ee6:	6803      	ldr	r3, [r0, #0]
    6ee8:	78db      	ldrb	r3, [r3, #3]
    6eea:	2b01      	cmp	r3, #1
{
    6eec:	4605      	mov	r5, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    6eee:	d11c      	bne.n	6f2a <smp_dhkey_check+0x46>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    6ef0:	f100 0498 	add.w	r4, r0, #152	; 0x98
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    6ef4:	6889      	ldr	r1, [r1, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ef6:	f3bf 8f5b 	dmb	ish
    6efa:	e854 3f00 	ldrex	r3, [r4]
    6efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    6f02:	e844 3200 	strex	r2, r3, [r4]
    6f06:	2a00      	cmp	r2, #0
    6f08:	d1f7      	bne.n	6efa <smp_dhkey_check+0x16>
    6f0a:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    6f0e:	2210      	movs	r2, #16
    6f10:	f205 104b 	addw	r0, r5, #331	; 0x14b
    6f14:	f7f9 fb64 	bl	5e0 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    6f18:	2107      	movs	r1, #7
    6f1a:	4620      	mov	r0, r4
    6f1c:	f7ff f949 	bl	61b2 <atomic_test_bit>
    6f20:	b128      	cbz	r0, 6f2e <smp_dhkey_check+0x4a>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    6f22:	2108      	movs	r1, #8
    6f24:	4620      	mov	r0, r4
    6f26:	f7ff f951 	bl	61cc <atomic_set_bit>
}
    6f2a:	2000      	movs	r0, #0
    6f2c:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    6f2e:	2109      	movs	r1, #9
    6f30:	4620      	mov	r0, r4
    6f32:	f7ff f93e 	bl	61b2 <atomic_test_bit>
    6f36:	2800      	cmp	r0, #0
    6f38:	d1f3      	bne.n	6f22 <smp_dhkey_check+0x3e>
		return compute_and_check_and_send_slave_dhcheck(smp);
    6f3a:	4628      	mov	r0, r5
}
    6f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
    6f40:	f7ff ba70 	b.w	6424 <compute_and_check_and_send_slave_dhcheck>

00006f44 <smp_public_key>:
{
    6f44:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    6f46:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    6f48:	f100 04eb 	add.w	r4, r0, #235	; 0xeb
{
    6f4c:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    6f4e:	2220      	movs	r2, #32
    6f50:	4631      	mov	r1, r6
    6f52:	4620      	mov	r0, r4
    6f54:	f7f9 fb44 	bl	5e0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    6f58:	2220      	movs	r2, #32
    6f5a:	18b1      	adds	r1, r6, r2
    6f5c:	f205 100b 	addw	r0, r5, #267	; 0x10b
    6f60:	f7f9 fb3e 	bl	5e0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    6f64:	2240      	movs	r2, #64	; 0x40
    6f66:	490f      	ldr	r1, [pc, #60]	; (6fa4 <smp_public_key+0x60>)
    6f68:	4620      	mov	r0, r4
    6f6a:	f7f9 fb24 	bl	5b6 <memcmp>
    6f6e:	b920      	cbnz	r0, 6f7a <smp_public_key+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    6f70:	210b      	movs	r1, #11
    6f72:	f105 0098 	add.w	r0, r5, #152	; 0x98
    6f76:	f7ff f929 	bl	61cc <atomic_set_bit>
	if (!sc_local_pkey_valid) {
    6f7a:	4b0b      	ldr	r3, [pc, #44]	; (6fa8 <smp_public_key+0x64>)
    6f7c:	781c      	ldrb	r4, [r3, #0]
    6f7e:	b934      	cbnz	r4, 6f8e <smp_public_key+0x4a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    6f80:	f105 0098 	add.w	r0, r5, #152	; 0x98
    6f84:	2106      	movs	r1, #6
    6f86:	f7ff f921 	bl	61cc <atomic_set_bit>
		return 0;
    6f8a:	4620      	mov	r0, r4
    6f8c:	bd70      	pop	{r4, r5, r6, pc}
	err = sc_send_public_key(smp);
    6f8e:	4628      	mov	r0, r5
    6f90:	f7ff fc70 	bl	6874 <sc_send_public_key>
	if (err) {
    6f94:	b920      	cbnz	r0, 6fa0 <smp_public_key+0x5c>
    6f96:	4628      	mov	r0, r5
}
    6f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f9c:	f7ff bcec 	b.w	6978 <smp_public_key_slave.part.6>
    6fa0:	bd70      	pop	{r4, r5, r6, pc}
    6fa2:	bf00      	nop
    6fa4:	00014cdc 	.word	0x00014cdc
    6fa8:	2000067c 	.word	0x2000067c

00006fac <smp_c1>:
{
    6fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6fb0:	b089      	sub	sp, #36	; 0x24
    6fb2:	461f      	mov	r7, r3
    6fb4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    6fb8:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	p1[0] = ia->type;
    6fbc:	f898 3000 	ldrb.w	r3, [r8]
    6fc0:	f88d 3000 	strb.w	r3, [sp]
{
    6fc4:	4606      	mov	r6, r0
	p1[1] = ra->type;
    6fc6:	f899 3000 	ldrb.w	r3, [r9]
    6fca:	f88d 3001 	strb.w	r3, [sp, #1]
{
    6fce:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
    6fd0:	f10d 0002 	add.w	r0, sp, #2
{
    6fd4:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
    6fd6:	2207      	movs	r2, #7
{
    6fd8:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
    6fda:	f7f9 fb01 	bl	5e0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    6fde:	2207      	movs	r2, #7
    6fe0:	4639      	mov	r1, r7
    6fe2:	f10d 0009 	add.w	r0, sp, #9
    6fe6:	f7f9 fafb 	bl	5e0 <memcpy>
    6fea:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
    6fec:	f814 2b01 	ldrb.w	r2, [r4], #1
    6ff0:	f81d 1003 	ldrb.w	r1, [sp, r3]
    6ff4:	404a      	eors	r2, r1
    6ff6:	54ea      	strb	r2, [r5, r3]
    6ff8:	3301      	adds	r3, #1
	while (len--) {
    6ffa:	2b10      	cmp	r3, #16
    6ffc:	d1f6      	bne.n	6fec <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
    6ffe:	462a      	mov	r2, r5
    7000:	4629      	mov	r1, r5
    7002:	4630      	mov	r0, r6
    7004:	f001 fbfe 	bl	8804 <bt_encrypt_le>
	if (err) {
    7008:	4604      	mov	r4, r0
    700a:	bb08      	cbnz	r0, 7050 <smp_c1+0xa4>
	memcpy(p2, ra->a.val, 6);
    700c:	af04      	add	r7, sp, #16
    700e:	2206      	movs	r2, #6
    7010:	f109 0101 	add.w	r1, r9, #1
    7014:	4638      	mov	r0, r7
    7016:	f7f9 fae3 	bl	5e0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    701a:	2206      	movs	r2, #6
    701c:	f108 0101 	add.w	r1, r8, #1
    7020:	f10d 0016 	add.w	r0, sp, #22
    7024:	f7f9 fadc 	bl	5e0 <memcpy>
	memset(p2 + 12, 0, 4);
    7028:	2204      	movs	r2, #4
    702a:	4621      	mov	r1, r4
    702c:	a807      	add	r0, sp, #28
    702e:	f7f9 fb03 	bl	638 <memset>
    7032:	1e6b      	subs	r3, r5, #1
		*r++ = *p++ ^ *q++;
    7034:	785a      	ldrb	r2, [r3, #1]
    7036:	5d39      	ldrb	r1, [r7, r4]
    7038:	3401      	adds	r4, #1
    703a:	404a      	eors	r2, r1
	while (len--) {
    703c:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
    703e:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (len--) {
    7042:	d1f7      	bne.n	7034 <smp_c1+0x88>
	return bt_encrypt_le(k, enc_data, enc_data);
    7044:	462a      	mov	r2, r5
    7046:	4629      	mov	r1, r5
    7048:	4630      	mov	r0, r6
    704a:	f001 fbdb 	bl	8804 <bt_encrypt_le>
    704e:	4604      	mov	r4, r0
}
    7050:	4620      	mov	r0, r4
    7052:	b009      	add	sp, #36	; 0x24
    7054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00007058 <legacy_pairing_confirm>:
{
    7058:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    705a:	f100 0698 	add.w	r6, r0, #152	; 0x98
{
    705e:	b085      	sub	sp, #20
    7060:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    7062:	2109      	movs	r1, #9
    7064:	4630      	mov	r0, r6
    7066:	f7ff f8a4 	bl	61b2 <atomic_test_bit>
    706a:	bbc0      	cbnz	r0, 70de <legacy_pairing_confirm+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    706c:	2104      	movs	r1, #4
    706e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    7072:	f7ff f8ab 	bl	61cc <atomic_set_bit>
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    7076:	2003      	movs	r0, #3
	struct bt_conn *conn = smp->chan.chan.conn;
    7078:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    707a:	f7ff f931 	bl	62e0 <smp_create_pdu.isra.1>
	if (!buf) {
    707e:	4607      	mov	r7, r0
    7080:	b1b8      	cbz	r0, 70b2 <legacy_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    7082:	2110      	movs	r1, #16
    7084:	3008      	adds	r0, #8
    7086:	f00c f927 	bl	132d8 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    708a:	f104 0356 	add.w	r3, r4, #86	; 0x56
    708e:	344f      	adds	r4, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    7090:	9002      	str	r0, [sp, #8]
    7092:	9301      	str	r3, [sp, #4]
    7094:	9400      	str	r4, [sp, #0]
    7096:	f105 03a4 	add.w	r3, r5, #164	; 0xa4
    709a:	f105 029d 	add.w	r2, r5, #157	; 0x9d
    709e:	f105 01bb 	add.w	r1, r5, #187	; 0xbb
    70a2:	f105 00db 	add.w	r0, r5, #219	; 0xdb
    70a6:	f7ff ff81 	bl	6fac <smp_c1>
    70aa:	b120      	cbz	r0, 70b6 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
    70ac:	4638      	mov	r0, r7
    70ae:	f00c f8e1 	bl	13274 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    70b2:	2008      	movs	r0, #8
    70b4:	e011      	b.n	70da <legacy_pairing_confirm+0x82>
	smp_send(smp, buf, NULL);
    70b6:	4602      	mov	r2, r0
    70b8:	4639      	mov	r1, r7
    70ba:	4628      	mov	r0, r5
    70bc:	f7ff f99e 	bl	63fc <smp_send>
    70c0:	f3bf 8f5b 	dmb	ish
    70c4:	e856 3f00 	ldrex	r3, [r6]
    70c8:	f023 0301 	bic.w	r3, r3, #1
    70cc:	e846 3200 	strex	r2, r3, [r6]
    70d0:	2a00      	cmp	r2, #0
    70d2:	d1f7      	bne.n	70c4 <legacy_pairing_confirm+0x6c>
    70d4:	f3bf 8f5b 	dmb	ish
	return 0;
    70d8:	2000      	movs	r0, #0
}
    70da:	b005      	add	sp, #20
    70dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    70de:	2100      	movs	r1, #0
    70e0:	4630      	mov	r0, r6
    70e2:	f7ff f873 	bl	61cc <atomic_set_bit>
    70e6:	e7f7      	b.n	70d8 <legacy_pairing_confirm+0x80>

000070e8 <smp_pairing_confirm>:
{
    70e8:	b510      	push	{r4, lr}
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    70ea:	2210      	movs	r2, #16
{
    70ec:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    70ee:	6889      	ldr	r1, [r1, #8]
    70f0:	30ab      	adds	r0, #171	; 0xab
    70f2:	f7f9 fa75 	bl	5e0 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    70f6:	f104 0298 	add.w	r2, r4, #152	; 0x98
    70fa:	2105      	movs	r1, #5
    70fc:	4610      	mov	r0, r2
    70fe:	f7ff f858 	bl	61b2 <atomic_test_bit>
    7102:	b920      	cbnz	r0, 710e <smp_pairing_confirm+0x26>
		return legacy_pairing_confirm(smp);
    7104:	4620      	mov	r0, r4
}
    7106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return legacy_pairing_confirm(smp);
    710a:	f7ff bfa5 	b.w	7058 <legacy_pairing_confirm>
	switch (smp->method) {
    710e:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    7112:	2b01      	cmp	r3, #1
    7114:	d00b      	beq.n	712e <smp_pairing_confirm+0x46>
    7116:	2b02      	cmp	r3, #2
    7118:	d115      	bne.n	7146 <smp_pairing_confirm+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    711a:	f104 0094 	add.w	r0, r4, #148	; 0x94
    711e:	2104      	movs	r1, #4
    7120:	f7ff f854 	bl	61cc <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    7124:	4620      	mov	r0, r4
}
    7126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_send_pairing_confirm(smp);
    712a:	f7ff bbdf 	b.w	68ec <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    712e:	2109      	movs	r1, #9
    7130:	4610      	mov	r0, r2
    7132:	f7ff f83e 	bl	61b2 <atomic_test_bit>
    7136:	2800      	cmp	r0, #0
    7138:	d0ef      	beq.n	711a <smp_pairing_confirm+0x32>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    713a:	4610      	mov	r0, r2
    713c:	2100      	movs	r1, #0
    713e:	f7ff f845 	bl	61cc <atomic_set_bit>
			return 0;
    7142:	2000      	movs	r0, #0
    7144:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    7146:	2008      	movs	r0, #8
}
    7148:	bd10      	pop	{r4, pc}
	...

0000714c <smp_pairing_random>:
{
    714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7150:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    7152:	f100 05cb 	add.w	r5, r0, #203	; 0xcb
{
    7156:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    7158:	6889      	ldr	r1, [r1, #8]
    715a:	2210      	movs	r2, #16
    715c:	4628      	mov	r0, r5
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    715e:	f104 0798 	add.w	r7, r4, #152	; 0x98
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    7162:	f7f9 fa3d 	bl	5e0 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    7166:	2105      	movs	r1, #5
    7168:	4638      	mov	r0, r7
    716a:	f7ff f822 	bl	61b2 <atomic_test_bit>
    716e:	2800      	cmp	r0, #0
    7170:	d13c      	bne.n	71ec <smp_pairing_random+0xa0>
	struct bt_conn *conn = smp->chan.chan.conn;
    7172:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    7174:	ae0a      	add	r6, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    7176:	f858 3bdb 	ldr.w	r3, [r8], #219
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    717a:	9602      	str	r6, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    717c:	f103 0256 	add.w	r2, r3, #86	; 0x56
    7180:	334f      	adds	r3, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    7182:	9201      	str	r2, [sp, #4]
    7184:	9300      	str	r3, [sp, #0]
    7186:	f104 029d 	add.w	r2, r4, #157	; 0x9d
    718a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
    718e:	4629      	mov	r1, r5
    7190:	4640      	mov	r0, r8
    7192:	f7ff ff0b 	bl	6fac <smp_c1>
	if (err) {
    7196:	b108      	cbz	r0, 719c <smp_pairing_random+0x50>
		return BT_SMP_ERR_UNSPECIFIED;
    7198:	2008      	movs	r0, #8
    719a:	e0aa      	b.n	72f2 <smp_pairing_random+0x1a6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    719c:	2210      	movs	r2, #16
    719e:	4631      	mov	r1, r6
    71a0:	f104 00ab 	add.w	r0, r4, #171	; 0xab
    71a4:	f7f9 fa07 	bl	5b6 <memcmp>
    71a8:	2800      	cmp	r0, #0
    71aa:	f040 80a5 	bne.w	72f8 <smp_pairing_random+0x1ac>
	memcpy(out, r2, 8);
    71ae:	2208      	movs	r2, #8
    71b0:	4629      	mov	r1, r5
    71b2:	4630      	mov	r0, r6
    71b4:	f7f9 fa14 	bl	5e0 <memcpy>
	memcpy(out + 8, r1, 8);
    71b8:	2208      	movs	r2, #8
    71ba:	f104 01bb 	add.w	r1, r4, #187	; 0xbb
    71be:	a80c      	add	r0, sp, #48	; 0x30
    71c0:	f7f9 fa0e 	bl	5e0 <memcpy>
	return bt_encrypt_le(k, out, out);
    71c4:	4632      	mov	r2, r6
    71c6:	4631      	mov	r1, r6
    71c8:	4640      	mov	r0, r8
    71ca:	f001 fb1b 	bl	8804 <bt_encrypt_le>
		if (err) {
    71ce:	2800      	cmp	r0, #0
    71d0:	d1e2      	bne.n	7198 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    71d2:	4631      	mov	r1, r6
    71d4:	2210      	movs	r2, #16
    71d6:	4640      	mov	r0, r8
    71d8:	f7f9 fa02 	bl	5e0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    71dc:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    71de:	4638      	mov	r0, r7
    71e0:	f7fe fff4 	bl	61cc <atomic_set_bit>
	smp_send_pairing_random(smp);
    71e4:	4620      	mov	r0, r4
    71e6:	f7ff fb67 	bl	68b8 <smp_send_pairing_random>
    71ea:	e077      	b.n	72dc <smp_pairing_random+0x190>
	switch (smp->method) {
    71ec:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    71f0:	2b03      	cmp	r3, #3
    71f2:	d8d1      	bhi.n	7198 <smp_pairing_random+0x4c>
    71f4:	e8df f003 	tbb	[pc, r3]
    71f8:	023e3e37 	.word	0x023e3e37
	sys_memcpy_swap(m, u, 32);
    71fc:	2220      	movs	r2, #32
    71fe:	f104 01eb 	add.w	r1, r4, #235	; 0xeb
    7202:	a80a      	add	r0, sp, #40	; 0x28
    7204:	f7fe ff90 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    7208:	2220      	movs	r2, #32
    720a:	493c      	ldr	r1, [pc, #240]	; (72fc <smp_pairing_random+0x1b0>)
    720c:	a812      	add	r0, sp, #72	; 0x48
    720e:	f7fe ff8b 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    7212:	2210      	movs	r2, #16
    7214:	f104 01bb 	add.w	r1, r4, #187	; 0xbb
    7218:	a81a      	add	r0, sp, #104	; 0x68
    721a:	f7fe ff85 	bl	6128 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    721e:	2210      	movs	r2, #16
    7220:	4629      	mov	r1, r5
    7222:	a806      	add	r0, sp, #24
    7224:	f7fe ff80 	bl	6128 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    7228:	ab06      	add	r3, sp, #24
    722a:	2250      	movs	r2, #80	; 0x50
    722c:	a90a      	add	r1, sp, #40	; 0x28
    722e:	4618      	mov	r0, r3
    7230:	f7fe ffe0 	bl	61f4 <bt_smp_aes_cmac>
	if (err) {
    7234:	2800      	cmp	r0, #0
    7236:	d1af      	bne.n	7198 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    7238:	2204      	movs	r2, #4
    723a:	a909      	add	r1, sp, #36	; 0x24
    723c:	a805      	add	r0, sp, #20
    723e:	f7f9 f9cf 	bl	5e0 <memcpy>
    7242:	9b05      	ldr	r3, [sp, #20]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    7244:	492e      	ldr	r1, [pc, #184]	; (7300 <smp_pairing_random+0x1b4>)
    7246:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7248:	4638      	mov	r0, r7
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    724a:	fbb3 f2f1 	udiv	r2, r3, r1
    724e:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7252:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    7254:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    7256:	f7fe ffb9 	bl	61cc <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    725a:	4b2a      	ldr	r3, [pc, #168]	; (7304 <smp_pairing_random+0x1b8>)
    725c:	9905      	ldr	r1, [sp, #20]
    725e:	681b      	ldr	r3, [r3, #0]
    7260:	6820      	ldr	r0, [r4, #0]
    7262:	689b      	ldr	r3, [r3, #8]
    7264:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    7266:	210d      	movs	r1, #13
    7268:	f104 0094 	add.w	r0, r4, #148	; 0x94
    726c:	f7fe ffae 	bl	61cc <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    7270:	210d      	movs	r1, #13
    7272:	e7b4      	b.n	71de <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    7274:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    7278:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    727c:	491f      	ldr	r1, [pc, #124]	; (72fc <smp_pairing_random+0x1b0>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    727e:	40d3      	lsrs	r3, r2
    7280:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    7284:	ae0a      	add	r6, sp, #40	; 0x28
    7286:	9600      	str	r6, [sp, #0]
    7288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    728c:	462a      	mov	r2, r5
    728e:	f104 00eb 	add.w	r0, r4, #235	; 0xeb
    7292:	f7ff f88f 	bl	63b4 <smp_f4>
    7296:	2800      	cmp	r0, #0
    7298:	f47f af7e 	bne.w	7198 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    729c:	2210      	movs	r2, #16
    729e:	4631      	mov	r1, r6
    72a0:	f104 00ab 	add.w	r0, r4, #171	; 0xab
    72a4:	f7f9 f987 	bl	5b6 <memcmp>
    72a8:	bb30      	cbnz	r0, 72f8 <smp_pairing_random+0x1ac>
		atomic_set_bit(&smp->allowed_cmds,
    72aa:	f104 0694 	add.w	r6, r4, #148	; 0x94
    72ae:	2103      	movs	r1, #3
    72b0:	4630      	mov	r0, r6
    72b2:	f7fe ff8b 	bl	61cc <atomic_set_bit>
		smp_send_pairing_random(smp);
    72b6:	4620      	mov	r0, r4
    72b8:	f7ff fafe 	bl	68b8 <smp_send_pairing_random>
		smp->passkey_round++;
    72bc:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    72c0:	3301      	adds	r3, #1
    72c2:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20) {
    72c4:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    72c6:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
		if (smp->passkey_round == 20) {
    72ca:	d109      	bne.n	72e0 <smp_pairing_random+0x194>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    72cc:	210d      	movs	r1, #13
    72ce:	4630      	mov	r0, r6
    72d0:	f7fe ff7c 	bl	61cc <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    72d4:	210d      	movs	r1, #13
    72d6:	4638      	mov	r0, r7
    72d8:	f7fe ff78 	bl	61cc <atomic_set_bit>
	return 0;
    72dc:	2000      	movs	r0, #0
    72de:	e008      	b.n	72f2 <smp_pairing_random+0x1a6>
		if (bt_rand(smp->prnd, 16)) {
    72e0:	2110      	movs	r1, #16
    72e2:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
    72e6:	f001 fa71 	bl	87cc <bt_rand>
    72ea:	2800      	cmp	r0, #0
			return BT_SMP_ERR_UNSPECIFIED;
    72ec:	bf0c      	ite	eq
    72ee:	2000      	moveq	r0, #0
    72f0:	2008      	movne	r0, #8
}
    72f2:	b01e      	add	sp, #120	; 0x78
    72f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_SMP_ERR_CONFIRM_FAILED;
    72f8:	2004      	movs	r0, #4
    72fa:	e7fa      	b.n	72f2 <smp_pairing_random+0x1a6>
    72fc:	2000067d 	.word	0x2000067d
    7300:	000f4240 	.word	0x000f4240
    7304:	20003744 	.word	0x20003744

00007308 <smp_ident_addr_info>:
{
    7308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    730c:	688f      	ldr	r7, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    730e:	783b      	ldrb	r3, [r7, #0]
{
    7310:	4605      	mov	r5, r0
    7312:	b123      	cbz	r3, 731e <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
    7314:	79bb      	ldrb	r3, [r7, #6]
    7316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    731a:	2bc0      	cmp	r3, #192	; 0xc0
    731c:	d158      	bne.n	73d0 <smp_ident_addr_info+0xc8>
	struct bt_conn *conn = smp->chan.chan.conn;
    731e:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    7320:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    7322:	f850 4b98 	ldr.w	r4, [r0], #152
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    7326:	f7fe ff44 	bl	61b2 <atomic_test_bit>
    732a:	b3a0      	cbz	r0, 7396 <smp_ident_addr_info+0x8e>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    732c:	f104 0848 	add.w	r8, r4, #72	; 0x48
    7330:	4641      	mov	r1, r8
    7332:	2002      	movs	r0, #2
    7334:	f000 f9ac 	bl	7690 <bt_keys_get_type>
		if (!keys) {
    7338:	4606      	mov	r6, r0
    733a:	2800      	cmp	r0, #0
    733c:	d04b      	beq.n	73d6 <smp_ident_addr_info+0xce>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    733e:	78e3      	ldrb	r3, [r4, #3]
    7340:	2b00      	cmp	r3, #0
    7342:	d142      	bne.n	73ca <smp_ident_addr_info+0xc2>
			dst = &conn->le.resp_addr;
    7344:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    7348:	780b      	ldrb	r3, [r1, #0]
    734a:	2b01      	cmp	r3, #1
    734c:	d120      	bne.n	7390 <smp_ident_addr_info+0x88>
		if (bt_addr_le_is_rpa(dst)) {
    734e:	798b      	ldrb	r3, [r1, #6]
    7350:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7354:	2b40      	cmp	r3, #64	; 0x40
    7356:	d11b      	bne.n	7390 <smp_ident_addr_info+0x88>
	memcpy(dst, src, sizeof(*dst));
    7358:	2206      	movs	r2, #6
    735a:	3101      	adds	r1, #1
    735c:	f106 0040 	add.w	r0, r6, #64	; 0x40
    7360:	f7f9 f93e 	bl	5e0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    7364:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    7368:	b193      	cbz	r3, 7390 <smp_ident_addr_info+0x88>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    736a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    736e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7372:	2bc0      	cmp	r3, #192	; 0xc0
    7374:	d00c      	beq.n	7390 <smp_ident_addr_info+0x88>
	memcpy(dst, src, sizeof(*dst));
    7376:	2207      	movs	r2, #7
    7378:	4639      	mov	r1, r7
    737a:	4630      	mov	r0, r6
    737c:	f7f9 f930 	bl	5e0 <memcpy>
    7380:	2207      	movs	r2, #7
    7382:	4639      	mov	r1, r7
    7384:	4640      	mov	r0, r8
    7386:	f7f9 f92b 	bl	5e0 <memcpy>
				bt_conn_identity_resolved(conn);
    738a:	4620      	mov	r0, r4
    738c:	f7fc fbd0 	bl	3b30 <bt_conn_identity_resolved>
		bt_id_add(keys);
    7390:	4630      	mov	r0, r6
    7392:	f7fa fed3 	bl	213c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    7396:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    739a:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    739e:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    73a0:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    73a4:	d504      	bpl.n	73b0 <smp_ident_addr_info+0xa8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    73a6:	210a      	movs	r1, #10
    73a8:	f105 0094 	add.w	r0, r5, #148	; 0x94
    73ac:	f7fe ff0e 	bl	61cc <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    73b0:	f8d5 4170 	ldr.w	r4, [r5, #368]	; 0x170
    73b4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    73b8:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    73bc:	b914      	cbnz	r4, 73c4 <smp_ident_addr_info+0xbc>
	smp_reset(smp);
    73be:	4628      	mov	r0, r5
    73c0:	f7ff fb4d 	bl	6a5e <smp_reset>
	return 0;
    73c4:	2000      	movs	r0, #0
}
    73c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dst = &conn->le.init_addr;
    73ca:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    73ce:	e7bb      	b.n	7348 <smp_ident_addr_info+0x40>
		return BT_SMP_ERR_INVALID_PARAMS;
    73d0:	200a      	movs	r0, #10
    73d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    73d6:	2008      	movs	r0, #8
    73d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000073dc <bt_smp_send_security_req>:
{
    73dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    73e0:	4607      	mov	r7, r0
	smp = smp_chan_get(conn);
    73e2:	f7fe fee3 	bl	61ac <smp_chan_get>
	if (!smp) {
    73e6:	4606      	mov	r6, r0
    73e8:	2800      	cmp	r0, #0
    73ea:	d04e      	beq.n	748a <bt_smp_send_security_req+0xae>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    73ec:	f100 0298 	add.w	r2, r0, #152	; 0x98
    73f0:	2104      	movs	r1, #4
    73f2:	4610      	mov	r0, r2
    73f4:	f7fe fedd 	bl	61b2 <atomic_test_bit>
    73f8:	2800      	cmp	r0, #0
    73fa:	d149      	bne.n	7490 <bt_smp_send_security_req+0xb4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    73fc:	2103      	movs	r1, #3
    73fe:	4610      	mov	r0, r2
    7400:	f7fe fed7 	bl	61b2 <atomic_test_bit>
    7404:	4604      	mov	r4, r0
    7406:	2800      	cmp	r0, #0
    7408:	d145      	bne.n	7496 <bt_smp_send_security_req+0xba>
	switch (conn->required_sec_level) {
    740a:	7a7b      	ldrb	r3, [r7, #9]
    740c:	3b01      	subs	r3, #1
    740e:	2b03      	cmp	r3, #3
    7410:	d844      	bhi.n	749c <bt_smp_send_security_req+0xc0>
    7412:	e8df f003 	tbb	[pc, r3]
    7416:	0909      	.short	0x0909
    7418:	3002      	.short	0x3002
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    741a:	f7fe fe91 	bl	6140 <get_io_capa>
    741e:	3803      	subs	r0, #3
    7420:	bf18      	it	ne
    7422:	2001      	movne	r0, #1
	if (!sec_level_reachable(conn)) {
    7424:	2800      	cmp	r0, #0
    7426:	d039      	beq.n	749c <bt_smp_send_security_req+0xc0>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    7428:	200b      	movs	r0, #11
    742a:	f7fe ff59 	bl	62e0 <smp_create_pdu.isra.1>
	if (!req_buf) {
    742e:	4680      	mov	r8, r0
    7430:	2800      	cmp	r0, #0
    7432:	d036      	beq.n	74a2 <bt_smp_send_security_req+0xc6>
	req = net_buf_add(req_buf, sizeof(*req));
    7434:	2101      	movs	r1, #1
    7436:	3008      	adds	r0, #8
    7438:	f00b ff4e 	bl	132d8 <net_buf_simple_add>
	if (sc_supported) {
    743c:	4b1a      	ldr	r3, [pc, #104]	; (74a8 <bt_smp_send_security_req+0xcc>)
    743e:	781b      	ldrb	r3, [r3, #0]
    7440:	2b00      	cmp	r3, #0
		auth &= BT_SMP_AUTH_MASK;
    7442:	bf14      	ite	ne
    7444:	2509      	movne	r5, #9
    7446:	2501      	moveq	r5, #1
	req = net_buf_add(req_buf, sizeof(*req));
    7448:	4681      	mov	r9, r0
	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    744a:	f7fe fe79 	bl	6140 <get_io_capa>
    744e:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
    7450:	bf18      	it	ne
    7452:	f045 0504 	orrne.w	r5, r5, #4
    7456:	2106      	movs	r1, #6
    7458:	4638      	mov	r0, r7
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    745a:	f889 5000 	strb.w	r5, [r9]
    745e:	2300      	movs	r3, #0
    7460:	4642      	mov	r2, r8
    7462:	f7fd f8b4 	bl	45ce <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    7466:	2105      	movs	r1, #5
    7468:	f106 0094 	add.w	r0, r6, #148	; 0x94
    746c:	f7fe feae 	bl	61cc <atomic_set_bit>
}
    7470:	4620      	mov	r0, r4
    7472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    7476:	f7fe fe63 	bl	6140 <get_io_capa>
    747a:	2803      	cmp	r0, #3
    747c:	bf1a      	itte	ne
    747e:	4b0a      	ldrne	r3, [pc, #40]	; (74a8 <bt_smp_send_security_req+0xcc>)
    7480:	7818      	ldrbne	r0, [r3, #0]
    7482:	2000      	moveq	r0, #0
    7484:	f000 0001 	and.w	r0, r0, #1
    7488:	e7cc      	b.n	7424 <bt_smp_send_security_req+0x48>
		return -ENOTCONN;
    748a:	f06f 0438 	mvn.w	r4, #56	; 0x38
    748e:	e7ef      	b.n	7470 <bt_smp_send_security_req+0x94>
		return -EIO;
    7490:	f06f 0404 	mvn.w	r4, #4
    7494:	e7ec      	b.n	7470 <bt_smp_send_security_req+0x94>
		return -EBUSY;
    7496:	f06f 040f 	mvn.w	r4, #15
    749a:	e7e9      	b.n	7470 <bt_smp_send_security_req+0x94>
		return -EINVAL;
    749c:	f06f 0415 	mvn.w	r4, #21
    74a0:	e7e6      	b.n	7470 <bt_smp_send_security_req+0x94>
		return -ENOBUFS;
    74a2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    74a6:	e7e3      	b.n	7470 <bt_smp_send_security_req+0x94>
    74a8:	200006bd 	.word	0x200006bd

000074ac <bt_smp_sign_verify>:
    74ac:	f06f 0022 	mvn.w	r0, #34	; 0x22
    74b0:	4770      	bx	lr

000074b2 <bt_smp_update_keys>:
{
    74b2:	b570      	push	{r4, r5, r6, lr}
    74b4:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    74b6:	f7fe fe79 	bl	61ac <smp_chan_get>
	if (!smp) {
    74ba:	4605      	mov	r5, r0
    74bc:	2800      	cmp	r0, #0
    74be:	d050      	beq.n	7562 <bt_smp_update_keys+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    74c0:	f100 0698 	add.w	r6, r0, #152	; 0x98
    74c4:	2103      	movs	r1, #3
    74c6:	4630      	mov	r0, r6
    74c8:	f7fe fe73 	bl	61b2 <atomic_test_bit>
    74cc:	2800      	cmp	r0, #0
    74ce:	d048      	beq.n	7562 <bt_smp_update_keys+0xb0>
	if (conn->le.keys) {
    74d0:	6f20      	ldr	r0, [r4, #112]	; 0x70
    74d2:	b108      	cbz	r0, 74d8 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
    74d4:	f000 f896 	bl	7604 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    74d8:	f104 0048 	add.w	r0, r4, #72	; 0x48
    74dc:	f000 f8a0 	bl	7620 <bt_keys_get_addr>
    74e0:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    74e2:	b928      	cbnz	r0, 74f0 <bt_smp_update_keys+0x3e>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    74e4:	4628      	mov	r0, r5
    74e6:	2108      	movs	r1, #8
}
    74e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    74ec:	f7ff bae2 	b.w	6ab4 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    74f0:	210b      	movs	r1, #11
    74f2:	4630      	mov	r0, r6
    74f4:	f7fe fe5d 	bl	61b2 <atomic_test_bit>
    74f8:	b120      	cbz	r0, 7504 <bt_smp_update_keys+0x52>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    74fa:	6f20      	ldr	r0, [r4, #112]	; 0x70
    74fc:	2101      	movs	r1, #1
    74fe:	3008      	adds	r0, #8
    7500:	f7fe fe64 	bl	61cc <atomic_set_bit>
	switch (smp->method) {
    7504:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    7508:	6f20      	ldr	r0, [r4, #112]	; 0x70
    750a:	3b01      	subs	r3, #1
    750c:	2b02      	cmp	r3, #2
    750e:	d829      	bhi.n	7564 <bt_smp_update_keys+0xb2>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    7510:	2100      	movs	r1, #0
    7512:	3008      	adds	r0, #8
    7514:	f7fe fe5a 	bl	61cc <atomic_set_bit>
	return min(req->max_key_size, rsp->max_key_size);
    7518:	f895 10a1 	ldrb.w	r1, [r5, #161]	; 0xa1
    751c:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    7520:	6f22      	ldr	r2, [r4, #112]	; 0x70
	return min(req->max_key_size, rsp->max_key_size);
    7522:	428b      	cmp	r3, r1
    7524:	bf28      	it	cs
    7526:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    7528:	71d3      	strb	r3, [r2, #7]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    752a:	2105      	movs	r1, #5
    752c:	4630      	mov	r0, r6
    752e:	f7fe fe40 	bl	61b2 <atomic_test_bit>
    7532:	b1b0      	cbz	r0, 7562 <bt_smp_update_keys+0xb0>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    7534:	210a      	movs	r1, #10
    7536:	4630      	mov	r0, r6
    7538:	f7fe fe3b 	bl	61b2 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    753c:	b188      	cbz	r0, 7562 <bt_smp_update_keys+0xb0>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    753e:	2120      	movs	r1, #32
    7540:	6f20      	ldr	r0, [r4, #112]	; 0x70
    7542:	f000 f8f5 	bl	7730 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    7546:	6f20      	ldr	r0, [r4, #112]	; 0x70
    7548:	2210      	movs	r2, #16
    754a:	f105 01db 	add.w	r1, r5, #219	; 0xdb
    754e:	301a      	adds	r0, #26
    7550:	f7f9 f846 	bl	5e0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    7554:	6f23      	ldr	r3, [r4, #112]	; 0x70
    7556:	2000      	movs	r0, #0
    7558:	2100      	movs	r1, #0
    755a:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    755e:	2200      	movs	r2, #0
    7560:	831a      	strh	r2, [r3, #24]
    7562:	bd70      	pop	{r4, r5, r6, pc}
    7564:	3008      	adds	r0, #8
    7566:	f3bf 8f5b 	dmb	ish
    756a:	e850 3f00 	ldrex	r3, [r0]
    756e:	f023 0301 	bic.w	r3, r3, #1
    7572:	e840 3200 	strex	r2, r3, [r0]
    7576:	2a00      	cmp	r2, #0
    7578:	d1f7      	bne.n	756a <bt_smp_update_keys+0xb8>
    757a:	f3bf 8f5b 	dmb	ish
    757e:	e7cb      	b.n	7518 <bt_smp_update_keys+0x66>

00007580 <bt_smp_get_tk>:
{
    7580:	b570      	push	{r4, r5, r6, lr}
    7582:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
    7584:	f7fe fe12 	bl	61ac <smp_chan_get>
	if (!smp) {
    7588:	4605      	mov	r5, r0
    758a:	b908      	cbnz	r0, 7590 <bt_smp_get_tk+0x10>
		return false;
    758c:	2000      	movs	r0, #0
    758e:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    7590:	2103      	movs	r1, #3
    7592:	3098      	adds	r0, #152	; 0x98
    7594:	f7fe fe0d 	bl	61b2 <atomic_test_bit>
    7598:	2800      	cmp	r0, #0
    759a:	d0f7      	beq.n	758c <bt_smp_get_tk+0xc>
	return min(req->max_key_size, rsp->max_key_size);
    759c:	f895 40a8 	ldrb.w	r4, [r5, #168]	; 0xa8
    75a0:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    75a4:	429c      	cmp	r4, r3
    75a6:	bf28      	it	cs
    75a8:	461c      	movcs	r4, r3
	memcpy(tk, smp->tk, enc_size);
    75aa:	4622      	mov	r2, r4
    75ac:	f105 01db 	add.w	r1, r5, #219	; 0xdb
    75b0:	4630      	mov	r0, r6
    75b2:	f7f9 f815 	bl	5e0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    75b6:	2c0f      	cmp	r4, #15
    75b8:	d805      	bhi.n	75c6 <bt_smp_get_tk+0x46>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    75ba:	f1c4 0210 	rsb	r2, r4, #16
    75be:	2100      	movs	r1, #0
    75c0:	1930      	adds	r0, r6, r4
    75c2:	f7f9 f839 	bl	638 <memset>
	return true;
    75c6:	2001      	movs	r0, #1
}
    75c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000075cc <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    75cc:	b508      	push	{r3, lr}
	return (bt_dev.supported_commands[34] & 0x02) &&
    75ce:	4b09      	ldr	r3, [pc, #36]	; (75f4 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    75d0:	4809      	ldr	r0, [pc, #36]	; (75f8 <bt_smp_init+0x2c>)
	return (bt_dev.supported_commands[34] & 0x02) &&
    75d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    75d6:	f003 0306 	and.w	r3, r3, #6
    75da:	1f9a      	subs	r2, r3, #6
    75dc:	4253      	negs	r3, r2
    75de:	4153      	adcs	r3, r2
    75e0:	4a06      	ldr	r2, [pc, #24]	; (75fc <bt_smp_init+0x30>)
    75e2:	7013      	strb	r3, [r2, #0]
	bt_l2cap_le_fixed_chan_register(&chan);
    75e4:	f7fc ff3e 	bl	4464 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    75e8:	4805      	ldr	r0, [pc, #20]	; (7600 <bt_smp_init+0x34>)
    75ea:	f7fc f9b1 	bl	3950 <bt_pub_key_gen>

	return smp_self_test();
}
    75ee:	2000      	movs	r0, #0
    75f0:	bd08      	pop	{r3, pc}
    75f2:	bf00      	nop
    75f4:	2000cba0 	.word	0x2000cba0
    75f8:	2000ce54 	.word	0x2000ce54
    75fc:	200006bd 	.word	0x200006bd
    7600:	2000ce74 	.word	0x2000ce74

00007604 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	if (keys->keys & BT_KEYS_IRK) {
    7604:	8983      	ldrh	r3, [r0, #12]
    7606:	079b      	lsls	r3, r3, #30
{
    7608:	b510      	push	{r4, lr}
    760a:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
    760c:	d501      	bpl.n	7612 <bt_keys_clear+0xe>
		bt_id_del(keys);
    760e:	f7fa fe35 	bl	227c <bt_id_del>
	}

	memset(keys, 0, sizeof(*keys));
    7612:	4620      	mov	r0, r4
    7614:	2268      	movs	r2, #104	; 0x68
    7616:	2100      	movs	r1, #0
}
    7618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(keys, 0, sizeof(*keys));
    761c:	f7f9 b80c 	b.w	638 <memset>

00007620 <bt_keys_get_addr>:
{
    7620:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7622:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    7624:	4601      	mov	r1, r0
    7626:	2207      	movs	r2, #7
    7628:	480b      	ldr	r0, [pc, #44]	; (7658 <bt_keys_get_addr+0x38>)
    762a:	f7f8 ffc4 	bl	5b6 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    762e:	b170      	cbz	r0, 764e <bt_keys_get_addr+0x2e>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    7630:	2400      	movs	r4, #0
    7632:	2207      	movs	r2, #7
    7634:	4669      	mov	r1, sp
    7636:	4808      	ldr	r0, [pc, #32]	; (7658 <bt_keys_get_addr+0x38>)
    7638:	9400      	str	r4, [sp, #0]
    763a:	f8cd 4003 	str.w	r4, [sp, #3]
    763e:	f7f8 ffba 	bl	5b6 <memcmp>
    7642:	b938      	cbnz	r0, 7654 <bt_keys_get_addr+0x34>
	memcpy(dst, src, sizeof(*dst));
    7644:	2207      	movs	r2, #7
    7646:	4629      	mov	r1, r5
    7648:	4803      	ldr	r0, [pc, #12]	; (7658 <bt_keys_get_addr+0x38>)
    764a:	f7f8 ffc9 	bl	5e0 <memcpy>
		keys = &key_pool[i];
    764e:	4802      	ldr	r0, [pc, #8]	; (7658 <bt_keys_get_addr+0x38>)
}
    7650:	b003      	add	sp, #12
    7652:	bd30      	pop	{r4, r5, pc}
	return NULL;
    7654:	4620      	mov	r0, r4
    7656:	e7fb      	b.n	7650 <bt_keys_get_addr+0x30>
    7658:	200006c0 	.word	0x200006c0

0000765c <bt_keys_foreach>:
		if ((key_pool[i].keys & type)) {
    765c:	4b03      	ldr	r3, [pc, #12]	; (766c <bt_keys_foreach+0x10>)
    765e:	899a      	ldrh	r2, [r3, #12]
    7660:	4202      	tst	r2, r0
    7662:	d001      	beq.n	7668 <bt_keys_foreach+0xc>
			func(&key_pool[i]);
    7664:	4618      	mov	r0, r3
    7666:	4708      	bx	r1
    7668:	4770      	bx	lr
    766a:	bf00      	nop
    766c:	200006c0 	.word	0x200006c0

00007670 <bt_keys_find>:
{
    7670:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) &&
    7672:	4c06      	ldr	r4, [pc, #24]	; (768c <bt_keys_find+0x1c>)
    7674:	89a3      	ldrh	r3, [r4, #12]
    7676:	4203      	tst	r3, r0
    7678:	d004      	beq.n	7684 <bt_keys_find+0x14>
	return memcmp(a, b, sizeof(*a));
    767a:	2207      	movs	r2, #7
    767c:	4620      	mov	r0, r4
    767e:	f7f8 ff9a 	bl	5b6 <memcmp>
    7682:	b108      	cbz	r0, 7688 <bt_keys_find+0x18>
	return NULL;
    7684:	2000      	movs	r0, #0
    7686:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    7688:	4620      	mov	r0, r4
}
    768a:	bd10      	pop	{r4, pc}
    768c:	200006c0 	.word	0x200006c0

00007690 <bt_keys_get_type>:
{
    7690:	b538      	push	{r3, r4, r5, lr}
    7692:	4604      	mov	r4, r0
    7694:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    7696:	f7ff ffeb 	bl	7670 <bt_keys_find>
	if (keys) {
    769a:	b930      	cbnz	r0, 76aa <bt_keys_get_type+0x1a>
	keys = bt_keys_get_addr(addr);
    769c:	4628      	mov	r0, r5
    769e:	f7ff ffbf 	bl	7620 <bt_keys_get_addr>
	if (!keys) {
    76a2:	b110      	cbz	r0, 76aa <bt_keys_get_type+0x1a>
	keys->keys |= type;
    76a4:	8983      	ldrh	r3, [r0, #12]
    76a6:	431c      	orrs	r4, r3
    76a8:	8184      	strh	r4, [r0, #12]
}
    76aa:	bd38      	pop	{r3, r4, r5, pc}

000076ac <bt_keys_find_irk>:
{
    76ac:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    76ae:	7803      	ldrb	r3, [r0, #0]
    76b0:	2b01      	cmp	r3, #1
    76b2:	4605      	mov	r5, r0
    76b4:	d001      	beq.n	76ba <bt_keys_find_irk+0xe>
		return NULL;
    76b6:	2000      	movs	r0, #0
    76b8:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    76ba:	7983      	ldrb	r3, [r0, #6]
    76bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    76c0:	2b40      	cmp	r3, #64	; 0x40
    76c2:	d1f8      	bne.n	76b6 <bt_keys_find_irk+0xa>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    76c4:	4c10      	ldr	r4, [pc, #64]	; (7708 <bt_keys_find_irk+0x5c>)
    76c6:	89a3      	ldrh	r3, [r4, #12]
    76c8:	f013 0f02 	tst.w	r3, #2
    76cc:	4626      	mov	r6, r4
    76ce:	d110      	bne.n	76f2 <bt_keys_find_irk+0x46>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    76d0:	89b3      	ldrh	r3, [r6, #12]
    76d2:	079b      	lsls	r3, r3, #30
    76d4:	d5ef      	bpl.n	76b6 <bt_keys_find_irk+0xa>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    76d6:	3501      	adds	r5, #1
    76d8:	4629      	mov	r1, r5
    76da:	480c      	ldr	r0, [pc, #48]	; (770c <bt_keys_find_irk+0x60>)
    76dc:	f7fa fa1d 	bl	1b1a <bt_rpa_irk_matches>
    76e0:	2800      	cmp	r0, #0
    76e2:	d0e8      	beq.n	76b6 <bt_keys_find_irk+0xa>
	memcpy(dst, src, sizeof(*dst));
    76e4:	2206      	movs	r2, #6
    76e6:	4629      	mov	r1, r5
    76e8:	4809      	ldr	r0, [pc, #36]	; (7710 <bt_keys_find_irk+0x64>)
    76ea:	f7f8 ff79 	bl	5e0 <memcpy>
			return &key_pool[i];
    76ee:	4806      	ldr	r0, [pc, #24]	; (7708 <bt_keys_find_irk+0x5c>)
    76f0:	bd70      	pop	{r4, r5, r6, pc}
	return memcmp(a, b, sizeof(*a));
    76f2:	2206      	movs	r2, #6
    76f4:	f104 0140 	add.w	r1, r4, #64	; 0x40
    76f8:	3001      	adds	r0, #1
    76fa:	f7f8 ff5c 	bl	5b6 <memcmp>
		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    76fe:	2800      	cmp	r0, #0
    7700:	d1e6      	bne.n	76d0 <bt_keys_find_irk+0x24>
			return &key_pool[i];
    7702:	4620      	mov	r0, r4
}
    7704:	bd70      	pop	{r4, r5, r6, pc}
    7706:	bf00      	nop
    7708:	200006c0 	.word	0x200006c0
    770c:	200006f0 	.word	0x200006f0
    7710:	20000700 	.word	0x20000700

00007714 <bt_keys_find_addr>:
	return memcmp(a, b, sizeof(*a));
    7714:	4601      	mov	r1, r0
{
    7716:	b508      	push	{r3, lr}
    7718:	2207      	movs	r2, #7
    771a:	4804      	ldr	r0, [pc, #16]	; (772c <bt_keys_find_addr+0x18>)
    771c:	f7f8 ff4b 	bl	5b6 <memcmp>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    7720:	2800      	cmp	r0, #0
}
    7722:	4802      	ldr	r0, [pc, #8]	; (772c <bt_keys_find_addr+0x18>)
    7724:	bf18      	it	ne
    7726:	2000      	movne	r0, #0
    7728:	bd08      	pop	{r3, pc}
    772a:	bf00      	nop
    772c:	200006c0 	.word	0x200006c0

00007730 <bt_keys_add_type>:
	keys->keys |= type;
    7730:	8983      	ldrh	r3, [r0, #12]
    7732:	4319      	orrs	r1, r3
    7734:	8181      	strh	r1, [r0, #12]
    7736:	4770      	bx	lr

00007738 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    7738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    773a:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    773c:	1dc3      	adds	r3, r0, #7
{
    773e:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    7740:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7744:	1e50      	subs	r0, r2, #1
{
    7746:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    7748:	b280      	uxth	r0, r0
{
    774a:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    774c:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    774e:	2100      	movs	r1, #0
    7750:	2204      	movs	r2, #4
    7752:	fb06 5000 	mla	r0, r6, r0, r5
    7756:	f7f8 ff6f 	bl	638 <memset>
    775a:	3c02      	subs	r4, #2
    775c:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    775e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    7762:	42bc      	cmp	r4, r7
    7764:	d101      	bne.n	776a <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    7766:	b003      	add	sp, #12
    7768:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    776a:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    776e:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7770:	2204      	movs	r2, #4
    7772:	1b80      	subs	r0, r0, r6
    7774:	eb0d 0102 	add.w	r1, sp, r2
    7778:	4428      	add	r0, r5
    777a:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    777c:	9301      	str	r3, [sp, #4]
    777e:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    7780:	f7f8 ff2e 	bl	5e0 <memcpy>
    7784:	e7ed      	b.n	7762 <mem_init+0x2a>

00007786 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    7786:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    7788:	6805      	ldr	r5, [r0, #0]
{
    778a:	4606      	mov	r6, r0
	if (*mem_head) {
    778c:	b195      	cbz	r5, 77b4 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    778e:	1deb      	adds	r3, r5, #7
    7790:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    7794:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    7796:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    7798:	4629      	mov	r1, r5
    779a:	eb0d 0002 	add.w	r0, sp, r2
    779e:	f7f8 ff1f 	bl	5e0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    77a2:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    77a4:	3c01      	subs	r4, #1
    77a6:	b2a4      	uxth	r4, r4
		if (head) {
    77a8:	b11b      	cbz	r3, 77b2 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    77aa:	1dda      	adds	r2, r3, #7
    77ac:	f022 0203 	bic.w	r2, r2, #3
    77b0:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    77b2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    77b4:	4628      	mov	r0, r5
    77b6:	b002      	add	sp, #8
    77b8:	bd70      	pop	{r4, r5, r6, pc}

000077ba <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    77ba:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    77bc:	680c      	ldr	r4, [r1, #0]
{
    77be:	4606      	mov	r6, r0
    77c0:	460d      	mov	r5, r1
	if (*mem_head) {
    77c2:	b11c      	cbz	r4, 77cc <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    77c4:	1de3      	adds	r3, r4, #7
    77c6:	f023 0303 	bic.w	r3, r3, #3
    77ca:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    77cc:	2204      	movs	r2, #4
    77ce:	4629      	mov	r1, r5
    77d0:	4630      	mov	r0, r6
    77d2:	f7f8 ff05 	bl	5e0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    77d6:	1df2      	adds	r2, r6, #7
    77d8:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    77dc:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    77de:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    77e0:	602e      	str	r6, [r5, #0]
    77e2:	bd70      	pop	{r4, r5, r6, pc}

000077e4 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    77e4:	b118      	cbz	r0, 77ee <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    77e6:	3007      	adds	r0, #7
    77e8:	f020 0003 	bic.w	r0, r0, #3
    77ec:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    77ee:	4770      	bx	lr

000077f0 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    77f0:	fb02 0001 	mla	r0, r2, r1, r0
    77f4:	4770      	bx	lr

000077f6 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    77f6:	1a40      	subs	r0, r0, r1
    77f8:	b280      	uxth	r0, r0
}
    77fa:	fbb0 f0f2 	udiv	r0, r0, r2
    77fe:	4770      	bx	lr

00007800 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    7800:	b510      	push	{r4, lr}
	src += len;
    7802:	4411      	add	r1, r2
    7804:	3801      	subs	r0, #1
	while (len--) {
    7806:	f64f 73ff 	movw	r3, #65535	; 0xffff
    780a:	3a01      	subs	r2, #1
    780c:	b292      	uxth	r2, r2
    780e:	429a      	cmp	r2, r3
    7810:	d100      	bne.n	7814 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    7812:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    7814:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    7818:	f800 4f01 	strb.w	r4, [r0, #1]!
    781c:	e7f5      	b.n	780a <mem_rcopy+0xa>

0000781e <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    781e:	4401      	add	r1, r0
	while (len--) {
    7820:	4288      	cmp	r0, r1
    7822:	d101      	bne.n	7828 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    7824:	2000      	movs	r0, #0
    7826:	4770      	bx	lr
		if (*src++) {
    7828:	f810 3b01 	ldrb.w	r3, [r0], #1
    782c:	2b00      	cmp	r3, #0
    782e:	d0f7      	beq.n	7820 <mem_nz+0x2>
			return 1;
    7830:	2001      	movs	r0, #1
}
    7832:	4770      	bx	lr

00007834 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    7834:	6010      	str	r0, [r2, #0]
    7836:	6008      	str	r0, [r1, #0]

	return link;
}
    7838:	4770      	bx	lr

0000783a <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    783a:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    783c:	6814      	ldr	r4, [r2, #0]
    783e:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    7840:	6814      	ldr	r4, [r2, #0]
    7842:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    7844:	6010      	str	r0, [r2, #0]

	return link;
}
    7846:	bd10      	pop	{r4, pc}

00007848 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    7848:	4288      	cmp	r0, r1
    784a:	d003      	beq.n	7854 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    784c:	b11a      	cbz	r2, 7856 <memq_peek+0xe>
		*mem = head->mem;
    784e:	6843      	ldr	r3, [r0, #4]
    7850:	6013      	str	r3, [r2, #0]
    7852:	4770      	bx	lr
		return NULL;
    7854:	2000      	movs	r0, #0
	}

	return head;
}
    7856:	4770      	bx	lr

00007858 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    7858:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    785a:	4283      	cmp	r3, r0
    785c:	d009      	beq.n	7872 <memq_dequeue+0x1a>
	if (mem) {
    785e:	b122      	cbz	r2, 786a <memq_dequeue+0x12>
		*mem = head->mem;
    7860:	6858      	ldr	r0, [r3, #4]
    7862:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    7864:	681a      	ldr	r2, [r3, #0]
    7866:	600a      	str	r2, [r1, #0]

	return link;
    7868:	e001      	b.n	786e <memq_dequeue+0x16>
	if (!link) {
    786a:	2b00      	cmp	r3, #0
    786c:	d1fa      	bne.n	7864 <memq_dequeue+0xc>
}
    786e:	4618      	mov	r0, r3
    7870:	4770      	bx	lr
		return NULL;
    7872:	2300      	movs	r3, #0
    7874:	e7fb      	b.n	786e <memq_dequeue+0x16>
	...

00007878 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    7878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    787c:	4f11      	ldr	r7, [pc, #68]	; (78c4 <mayfly_init+0x4c>)
    787e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 78c8 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    7882:	2604      	movs	r6, #4
	while (callee_id--) {
    7884:	3e01      	subs	r6, #1
    7886:	b2f6      	uxtb	r6, r6
    7888:	2eff      	cmp	r6, #255	; 0xff
    788a:	d019      	beq.n	78c0 <mayfly_init+0x48>
    788c:	b233      	sxth	r3, r6
    788e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7896:	011d      	lsls	r5, r3, #4
    7898:	2404      	movs	r4, #4
    789a:	f04f 0a0c 	mov.w	sl, #12
    789e:	e00a      	b.n	78b6 <mayfly_init+0x3e>
    78a0:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    78a4:	1d0a      	adds	r2, r1, #4
    78a6:	eb04 0008 	add.w	r0, r4, r8
    78aa:	443a      	add	r2, r7
    78ac:	4439      	add	r1, r7
    78ae:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    78b2:	f7ff ffbf 	bl	7834 <memq_init>
		while (caller_id--) {
    78b6:	3c01      	subs	r4, #1
    78b8:	b2e4      	uxtb	r4, r4
    78ba:	2cff      	cmp	r4, #255	; 0xff
    78bc:	d1f0      	bne.n	78a0 <mayfly_init+0x28>
    78be:	e7e1      	b.n	7884 <mayfly_init+0xc>
    78c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78c4:	200007a8 	.word	0x200007a8
    78c8:	20000728 	.word	0x20000728

000078cc <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    78cc:	b4f0      	push	{r4, r5, r6, r7}
    78ce:	4b12      	ldr	r3, [pc, #72]	; (7918 <mayfly_enable+0x4c>)
    78d0:	4605      	mov	r5, r0
    78d2:	460f      	mov	r7, r1
    78d4:	260c      	movs	r6, #12
    78d6:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    78d8:	b172      	cbz	r2, 78f8 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    78da:	4361      	muls	r1, r4
    78dc:	fb06 1400 	mla	r4, r6, r0, r1
    78e0:	4423      	add	r3, r4
    78e2:	7a59      	ldrb	r1, [r3, #9]
    78e4:	7a18      	ldrb	r0, [r3, #8]
    78e6:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    78e8:	bf04      	itt	eq
    78ea:	3101      	addeq	r1, #1
    78ec:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    78ee:	4628      	mov	r0, r5
    78f0:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    78f2:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    78f4:	f00b bb66 	b.w	12fc4 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    78f8:	434c      	muls	r4, r1
    78fa:	fb06 4400 	mla	r4, r6, r0, r4
    78fe:	4423      	add	r3, r4
    7900:	7a9c      	ldrb	r4, [r3, #10]
    7902:	7ada      	ldrb	r2, [r3, #11]
    7904:	42a2      	cmp	r2, r4
    7906:	d104      	bne.n	7912 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    7908:	3201      	adds	r2, #1
    790a:	729a      	strb	r2, [r3, #10]
}
    790c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    790e:	f00b bb87 	b.w	13020 <mayfly_pend>
}
    7912:	bcf0      	pop	{r4, r5, r6, r7}
    7914:	4770      	bx	lr
    7916:	bf00      	nop
    7918:	200007a8 	.word	0x200007a8

0000791c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    791e:	4605      	mov	r5, r0
    7920:	460e      	mov	r6, r1
    7922:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    7924:	b18a      	cbz	r2, 794a <mayfly_enqueue+0x2e>
    7926:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    7928:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    792a:	7820      	ldrb	r0, [r4, #0]
    792c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    792e:	f010 0703 	ands.w	r7, r0, #3
    7932:	d029      	beq.n	7988 <mayfly_enqueue+0x6c>
		if (chain) {
    7934:	b303      	cbz	r3, 7978 <mayfly_enqueue+0x5c>
			if (state != 1) {
    7936:	2f01      	cmp	r7, #1
    7938:	d039      	beq.n	79ae <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    793a:	3201      	adds	r2, #1
    793c:	b2d2      	uxtb	r2, r2
    793e:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    7940:	4631      	mov	r1, r6
    7942:	4628      	mov	r0, r5
    7944:	f00b fb6c 	bl	13020 <mayfly_pend>
    7948:	e01c      	b.n	7984 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    794a:	f00b fb57 	bl	12ffc <mayfly_prio_is_equal>
    794e:	2800      	cmp	r0, #0
    7950:	d0e9      	beq.n	7926 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    7952:	4631      	mov	r1, r6
    7954:	4628      	mov	r0, r5
    7956:	f00b fb43 	bl	12fe0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    795a:	2800      	cmp	r0, #0
    795c:	d0e3      	beq.n	7926 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    795e:	2330      	movs	r3, #48	; 0x30
    7960:	220c      	movs	r2, #12
    7962:	4373      	muls	r3, r6
    7964:	fb02 3305 	mla	r3, r2, r5, r3
    7968:	4a12      	ldr	r2, [pc, #72]	; (79b4 <mayfly_enqueue+0x98>)
    796a:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    796c:	7a93      	ldrb	r3, [r2, #10]
    796e:	7ad2      	ldrb	r2, [r2, #11]
    7970:	1a9b      	subs	r3, r3, r2
    7972:	bf18      	it	ne
    7974:	2301      	movne	r3, #1
    7976:	e7d7      	b.n	7928 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    7978:	3202      	adds	r2, #2
    797a:	b2d2      	uxtb	r2, r2
    797c:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    797e:	68e3      	ldr	r3, [r4, #12]
    7980:	68a0      	ldr	r0, [r4, #8]
    7982:	4798      	blx	r3
		return 0;
    7984:	2000      	movs	r0, #0
    7986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    7988:	2b00      	cmp	r3, #0
    798a:	d0f8      	beq.n	797e <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    798c:	3201      	adds	r2, #1
    798e:	b2d2      	uxtb	r2, r2
    7990:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    7992:	2304      	movs	r3, #4
    7994:	2230      	movs	r2, #48	; 0x30
    7996:	fb12 3206 	smlabb	r2, r2, r6, r3
    799a:	230c      	movs	r3, #12
    799c:	fb13 2305 	smlabb	r3, r3, r5, r2
    79a0:	4a04      	ldr	r2, [pc, #16]	; (79b4 <mayfly_enqueue+0x98>)
    79a2:	6860      	ldr	r0, [r4, #4]
    79a4:	441a      	add	r2, r3
    79a6:	4621      	mov	r1, r4
    79a8:	f7ff ff47 	bl	783a <memq_enqueue>
    79ac:	e7c8      	b.n	7940 <mayfly_enqueue+0x24>
			return 1;
    79ae:	4638      	mov	r0, r7

	return 0;
}
    79b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79b2:	bf00      	nop
    79b4:	200007a8 	.word	0x200007a8

000079b8 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    79b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79bc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    79c0:	b089      	sub	sp, #36	; 0x24
    79c2:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    79c4:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    79c8:	4e43      	ldr	r6, [pc, #268]	; (7ad8 <mayfly_run+0x120>)
    79ca:	9304      	str	r3, [sp, #16]
{
    79cc:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    79ce:	2404      	movs	r4, #4
	u8_t disable = 0;
    79d0:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    79d4:	3c01      	subs	r4, #1
    79d6:	b2e4      	uxtb	r4, r4
    79d8:	2cff      	cmp	r4, #255	; 0xff
    79da:	d10b      	bne.n	79f4 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    79dc:	9b01      	ldr	r3, [sp, #4]
    79de:	2b00      	cmp	r3, #0
    79e0:	d076      	beq.n	7ad0 <mayfly_run+0x118>
    79e2:	f1b8 0f00 	cmp.w	r8, #0
    79e6:	d173      	bne.n	7ad0 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    79e8:	4642      	mov	r2, r8
    79ea:	4629      	mov	r1, r5
    79ec:	4628      	mov	r0, r5
    79ee:	f00b fae9 	bl	12fc4 <mayfly_enable_cb>
    79f2:	e06d      	b.n	7ad0 <mayfly_run+0x118>
		struct mayfly *m = 0;
    79f4:	f10d 0b20 	add.w	fp, sp, #32
    79f8:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    79fa:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    79fc:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    7a00:	f04f 0930 	mov.w	r9, #48	; 0x30
    7a04:	fb07 f304 	mul.w	r3, r7, r4
    7a08:	fb09 3005 	mla	r0, r9, r5, r3
    7a0c:	1831      	adds	r1, r6, r0
    7a0e:	465a      	mov	r2, fp
    7a10:	6849      	ldr	r1, [r1, #4]
    7a12:	5830      	ldr	r0, [r6, r0]
    7a14:	9302      	str	r3, [sp, #8]
    7a16:	f7ff ff17 	bl	7848 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7a1a:	9b04      	ldr	r3, [sp, #16]
    7a1c:	fb17 3704 	smlabb	r7, r7, r4, r3
    7a20:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    7a22:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    7a24:	9303      	str	r3, [sp, #12]
		while (link) {
    7a26:	f1ba 0f00 	cmp.w	sl, #0
    7a2a:	d119      	bne.n	7a60 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    7a2c:	2230      	movs	r2, #48	; 0x30
    7a2e:	230c      	movs	r3, #12
    7a30:	436a      	muls	r2, r5
    7a32:	fb03 2204 	mla	r2, r3, r4, r2
    7a36:	4432      	add	r2, r6
    7a38:	7a91      	ldrb	r1, [r2, #10]
    7a3a:	7ad0      	ldrb	r0, [r2, #11]
    7a3c:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    7a3e:	bf1e      	ittt	ne
    7a40:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    7a42:	2201      	movne	r2, #1
    7a44:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    7a46:	2230      	movs	r2, #48	; 0x30
    7a48:	436a      	muls	r2, r5
    7a4a:	fb03 2304 	mla	r3, r3, r4, r2
    7a4e:	4433      	add	r3, r6
    7a50:	7a1a      	ldrb	r2, [r3, #8]
    7a52:	7a59      	ldrb	r1, [r3, #9]
    7a54:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    7a56:	bf1c      	itt	ne
    7a58:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    7a5a:	f04f 0801 	movne.w	r8, #1
    7a5e:	e7b9      	b.n	79d4 <mayfly_run+0x1c>
			req = m->_req;
    7a60:	9b07      	ldr	r3, [sp, #28]
    7a62:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    7a64:	785a      	ldrb	r2, [r3, #1]
    7a66:	1abf      	subs	r7, r7, r2
    7a68:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    7a6c:	2f01      	cmp	r7, #1
    7a6e:	d104      	bne.n	7a7a <mayfly_run+0xc2>
				m->_ack--;
    7a70:	3a01      	subs	r2, #1
    7a72:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    7a74:	6898      	ldr	r0, [r3, #8]
    7a76:	68da      	ldr	r2, [r3, #12]
    7a78:	4790      	blx	r2
			req = m->_req;
    7a7a:	9a07      	ldr	r2, [sp, #28]
    7a7c:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    7a7e:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    7a80:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    7a82:	1a9a      	subs	r2, r3, r2
    7a84:	f002 0203 	and.w	r2, r2, #3
    7a88:	2a01      	cmp	r2, #1
    7a8a:	9305      	str	r3, [sp, #20]
    7a8c:	d00d      	beq.n	7aaa <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    7a8e:	9b02      	ldr	r3, [sp, #8]
    7a90:	9903      	ldr	r1, [sp, #12]
    7a92:	fb09 3005 	mla	r0, r9, r5, r3
    7a96:	4430      	add	r0, r6
    7a98:	2200      	movs	r2, #0
    7a9a:	6840      	ldr	r0, [r0, #4]
    7a9c:	f7ff fedc 	bl	7858 <memq_dequeue>
				m->_link = link;
    7aa0:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    7aa2:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    7aa4:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    7aa8:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    7aaa:	9b02      	ldr	r3, [sp, #8]
    7aac:	fb09 3305 	mla	r3, r9, r5, r3
    7ab0:	18f1      	adds	r1, r6, r3
    7ab2:	465a      	mov	r2, fp
    7ab4:	6849      	ldr	r1, [r1, #4]
    7ab6:	58f0      	ldr	r0, [r6, r3]
    7ab8:	f7ff fec6 	bl	7848 <memq_peek>
			if (state == 1) {
    7abc:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    7abe:	4682      	mov	sl, r0
			if (state == 1) {
    7ac0:	d1b1      	bne.n	7a26 <mayfly_run+0x6e>
				if (caller_id || link) {
    7ac2:	b90c      	cbnz	r4, 7ac8 <mayfly_run+0x110>
    7ac4:	2800      	cmp	r0, #0
    7ac6:	d0b1      	beq.n	7a2c <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    7ac8:	4629      	mov	r1, r5
    7aca:	4628      	mov	r0, r5
    7acc:	f00b faa8 	bl	13020 <mayfly_pend>
	}
}
    7ad0:	b009      	add	sp, #36	; 0x24
    7ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ad6:	bf00      	nop
    7ad8:	200007a8 	.word	0x200007a8

00007adc <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    7adc:	b510      	push	{r4, lr}
    7ade:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    7ae0:	2000      	movs	r0, #0

	while (octets_len--) {
    7ae2:	3901      	subs	r1, #1
    7ae4:	b2c9      	uxtb	r1, r1
    7ae6:	29ff      	cmp	r1, #255	; 0xff
    7ae8:	d100      	bne.n	7aec <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    7aea:	bd10      	pop	{r4, pc}
		bite = *octets;
    7aec:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    7af0:	2b00      	cmp	r3, #0
    7af2:	d0f6      	beq.n	7ae2 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    7af4:	1e5c      	subs	r4, r3, #1
			one_count++;
    7af6:	3001      	adds	r0, #1
			bite &= (bite - 1);
    7af8:	4023      	ands	r3, r4
			one_count++;
    7afa:	b2c0      	uxtb	r0, r0
    7afc:	e7f8      	b.n	7af0 <util_ones_count_get+0x14>

00007afe <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    7afe:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    7b00:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    7b02:	6805      	ldr	r5, [r0, #0]
	current = previous;
    7b04:	461a      	mov	r2, r3
	total = 0;
    7b06:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    7b08:	2aff      	cmp	r2, #255	; 0xff
    7b0a:	d101      	bne.n	7b10 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    7b0c:	2000      	movs	r0, #0
    7b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    7b10:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    7b14:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    7b16:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    7b1a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    7b1e:	d004      	beq.n	7b2a <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    7b20:	68b3      	ldr	r3, [r6, #8]
    7b22:	441c      	add	r4, r3
		current = ticker_current->next;
    7b24:	4613      	mov	r3, r2
    7b26:	463a      	mov	r2, r7
    7b28:	e7ee      	b.n	7b08 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    7b2a:	4293      	cmp	r3, r2
    7b2c:	d100      	bne.n	7b30 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    7b2e:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    7b30:	b21b      	sxth	r3, r3
    7b32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b36:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    7b38:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    7b3a:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    7b3e:	7833      	ldrb	r3, [r6, #0]
    7b40:	2bff      	cmp	r3, #255	; 0xff
    7b42:	d006      	beq.n	7b52 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    7b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7b48:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    7b4c:	689a      	ldr	r2, [r3, #8]
    7b4e:	4402      	add	r2, r0
    7b50:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    7b52:	4420      	add	r0, r4
    7b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007b56 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    7b56:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7b58:	1a55      	subs	r5, r2, r1
    7b5a:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    7b5e:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    7b60:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    7b62:	d109      	bne.n	7b78 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7b64:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    7b68:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    7b6a:	42a2      	cmp	r2, r4
    7b6c:	d90e      	bls.n	7b8c <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    7b6e:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    7b70:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    7b72:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    7b74:	6144      	str	r4, [r0, #20]
    7b76:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7b78:	1a8a      	subs	r2, r1, r2
    7b7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    7b7e:	4293      	cmp	r3, r2
    7b80:	d901      	bls.n	7b86 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    7b82:	1a9a      	subs	r2, r3, r2
    7b84:	e7f1      	b.n	7b6a <ticks_to_expire_prep+0x14>
    7b86:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    7b88:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    7b8a:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    7b8c:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    7b8e:	2200      	movs	r2, #0
    7b90:	e7ef      	b.n	7b72 <ticks_to_expire_prep+0x1c>

00007b92 <ticker_job_op_cb>:
{
    7b92:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    7b94:	2200      	movs	r2, #0
    7b96:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    7b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    7b9a:	6259      	str	r1, [r3, #36]	; 0x24
{
    7b9c:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    7b9e:	b10a      	cbz	r2, 7ba4 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    7ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7ba2:	4710      	bx	r2
    7ba4:	4770      	bx	lr

00007ba6 <ticker_worker>:
{
    7ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    7baa:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    7bac:	2301      	movs	r3, #1
{
    7bae:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    7bb0:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    7bb2:	2d00      	cmp	r5, #0
    7bb4:	d14c      	bne.n	7c50 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    7bb6:	7f43      	ldrb	r3, [r0, #29]
    7bb8:	2bff      	cmp	r3, #255	; 0xff
    7bba:	d102      	bne.n	7bc2 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    7bbc:	77c5      	strb	r5, [r0, #31]
		return;
    7bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    7bc2:	f00a fc93 	bl	124ec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7bc6:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    7bc8:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    7bca:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7bce:	1bc7      	subs	r7, r0, r7
    7bd0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    7bd4:	2eff      	cmp	r6, #255	; 0xff
    7bd6:	d006      	beq.n	7be6 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    7bd8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7bdc:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7be0:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7be2:	429f      	cmp	r7, r3
    7be4:	d218      	bcs.n	7c18 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    7be6:	7aa2      	ldrb	r2, [r4, #10]
    7be8:	7ae3      	ldrb	r3, [r4, #11]
    7bea:	4293      	cmp	r3, r2
    7bec:	d105      	bne.n	7bfa <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    7bee:	3301      	adds	r3, #1
    7bf0:	b2db      	uxtb	r3, r3
			last = 0;
    7bf2:	2b02      	cmp	r3, #2
    7bf4:	bf08      	it	eq
    7bf6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    7bf8:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7bfa:	7ae3      	ldrb	r3, [r4, #11]
    7bfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7c00:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    7c02:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    7c04:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7c06:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    7c08:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7c0a:	46ac      	mov	ip, r5
    7c0c:	4623      	mov	r3, r4
    7c0e:	2104      	movs	r1, #4
    7c10:	2003      	movs	r0, #3
}
    7c12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    7c16:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    7c18:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    7c1a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7c1c:	788a      	ldrb	r2, [r1, #2]
    7c1e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    7c20:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    7c24:	1a9b      	subs	r3, r3, r2
    7c26:	b2db      	uxtb	r3, r3
    7c28:	2b01      	cmp	r3, #1
    7c2a:	d1d3      	bne.n	7bd4 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    7c2c:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    7c30:	3a01      	subs	r2, #1
    7c32:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    7c34:	f1b9 0f00 	cmp.w	r9, #0
    7c38:	d0cc      	beq.n	7bd4 <ticker_worker+0x2e>
					   ticks_expired -
    7c3a:	6948      	ldr	r0, [r1, #20]
    7c3c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    7c3e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    7c40:	1a28      	subs	r0, r5, r0
    7c42:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    7c44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7c48:	690b      	ldr	r3, [r1, #16]
    7c4a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    7c4c:	47c8      	blx	r9
    7c4e:	e7c1      	b.n	7bd4 <ticker_worker+0x2e>
    7c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007c54 <ticker_job>:
{
    7c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    7c58:	7fc2      	ldrb	r2, [r0, #31]
{
    7c5a:	b093      	sub	sp, #76	; 0x4c
    7c5c:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    7c5e:	2a00      	cmp	r2, #0
    7c60:	f040 83b5 	bne.w	83ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ce>
	ticks_previous = instance->ticks_current;
    7c64:	6943      	ldr	r3, [r0, #20]
    7c66:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    7c68:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7c6a:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    7c6c:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    7c6e:	7ac0      	ldrb	r0, [r0, #11]
    7c70:	4298      	cmp	r0, r3
    7c72:	f000 808f 	beq.w	7d94 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    7c76:	440b      	add	r3, r1
    7c78:	b2db      	uxtb	r3, r3
			first = 0;
    7c7a:	2b02      	cmp	r3, #2
    7c7c:	bf08      	it	eq
    7c7e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    7c80:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    7c84:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    7c88:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    7c8a:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    7c8e:	9b05      	ldr	r3, [sp, #20]
    7c90:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    7c92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7c96:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    7c9a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7c9e:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    7ca0:	f8db 3000 	ldr.w	r3, [fp]
    7ca4:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    7ca6:	f8db 3004 	ldr.w	r3, [fp, #4]
    7caa:	930b      	str	r3, [sp, #44]	; 0x2c
    7cac:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7cb0:	3b01      	subs	r3, #1
    7cb2:	b2db      	uxtb	r3, r3
    7cb4:	9302      	str	r3, [sp, #8]
	pending = 0;
    7cb6:	2300      	movs	r3, #0
    7cb8:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    7cba:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    7cbe:	9b02      	ldr	r3, [sp, #8]
    7cc0:	2bff      	cmp	r3, #255	; 0xff
    7cc2:	d16a      	bne.n	7d9a <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7cc4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    7cc8:	9a03      	ldr	r2, [sp, #12]
    7cca:	1a9b      	subs	r3, r3, r2
    7ccc:	bf18      	it	ne
    7cce:	2301      	movne	r3, #1
    7cd0:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    7cd2:	9b01      	ldr	r3, [sp, #4]
    7cd4:	b1e3      	cbz	r3, 7d10 <ticker_job+0xbc>
	node = &instance->node[0];
    7cd6:	f8db 3000 	ldr.w	r3, [fp]
    7cda:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    7cdc:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    7ce0:	f89b 601d 	ldrb.w	r6, [fp, #29]
    7ce4:	2eff      	cmp	r6, #255	; 0xff
    7ce6:	d00c      	beq.n	7d02 <ticker_job+0xae>
		ticker = &node[id_expired];
    7ce8:	b237      	sxth	r7, r6
    7cea:	9b04      	ldr	r3, [sp, #16]
    7cec:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    7cf0:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    7cf4:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    7cf6:	4545      	cmp	r5, r8
    7cf8:	f240 8136 	bls.w	7f68 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    7cfc:	eba5 0508 	sub.w	r5, r5, r8
    7d00:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    7d02:	9b02      	ldr	r3, [sp, #8]
    7d04:	9a01      	ldr	r2, [sp, #4]
    7d06:	9903      	ldr	r1, [sp, #12]
    7d08:	42b1      	cmp	r1, r6
    7d0a:	bf18      	it	ne
    7d0c:	4613      	movne	r3, r2
    7d0e:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    7d10:	f8db 3000 	ldr.w	r3, [fp]
    7d14:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    7d16:	f8db 3004 	ldr.w	r3, [fp, #4]
    7d1a:	9310      	str	r3, [sp, #64]	; 0x40
    7d1c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    7d20:	3b01      	subs	r3, #1
    7d22:	b2db      	uxtb	r3, r3
    7d24:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    7d26:	9b01      	ldr	r3, [sp, #4]
    7d28:	2bff      	cmp	r3, #255	; 0xff
    7d2a:	f040 8170 	bne.w	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
	if (instance->ticker_id_head != ticker_id_old_head) {
    7d2e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7d32:	9a03      	ldr	r2, [sp, #12]
    7d34:	4293      	cmp	r3, r2
	if (!pending) {
    7d36:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    7d38:	f040 8340 	bne.w	83bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3bc>
	if (!pending) {
    7d3c:	b95b      	cbnz	r3, 7d56 <ticker_job+0x102>
    7d3e:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    7d42:	f8db 3004 	ldr.w	r3, [fp, #4]
    7d46:	9301      	str	r3, [sp, #4]
    7d48:	3c01      	subs	r4, #1
    7d4a:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    7d4c:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    7d50:	2cff      	cmp	r4, #255	; 0xff
    7d52:	f040 82a0 	bne.w	8296 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x296>
	instance->job_guard = 0;
    7d56:	2300      	movs	r3, #0
    7d58:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    7d5c:	9b02      	ldr	r3, [sp, #8]
    7d5e:	b14b      	cbz	r3, 7d74 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    7d60:	f89b 301d 	ldrb.w	r3, [fp, #29]
    7d64:	2bff      	cmp	r3, #255	; 0xff
    7d66:	f040 82e9 	bne.w	833c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x33c>
		if (cntr_stop() == 0) {
    7d6a:	f00a fba7 	bl	124bc <cntr_stop>
    7d6e:	b908      	cbnz	r0, 7d74 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    7d70:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    7d74:	f89b 301f 	ldrb.w	r3, [fp, #31]
    7d78:	2b00      	cmp	r3, #0
    7d7a:	f000 8328 	beq.w	83ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ce>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7d7e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7d82:	465b      	mov	r3, fp
    7d84:	2201      	movs	r2, #1
    7d86:	2103      	movs	r1, #3
    7d88:	2004      	movs	r0, #4
    7d8a:	46a4      	mov	ip, r4
}
    7d8c:	b013      	add	sp, #76	; 0x4c
    7d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    7d92:	4760      	bx	ip
		flag_elapsed = 0;
    7d94:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    7d96:	4690      	mov	r8, r2
    7d98:	e77f      	b.n	7c9a <ticker_job+0x46>
		user = &users[count_user];
    7d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7d9c:	9a02      	ldr	r2, [sp, #8]
    7d9e:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    7da2:	687b      	ldr	r3, [r7, #4]
    7da4:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    7da6:	78f9      	ldrb	r1, [r7, #3]
    7da8:	78be      	ldrb	r6, [r7, #2]
    7daa:	428e      	cmp	r6, r1
    7dac:	f000 80d7 	beq.w	7f5e <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    7db0:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    7db2:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    7db4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    7db8:	0112      	lsls	r2, r2, #4
    7dba:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    7dbc:	1c73      	adds	r3, r6, #1
    7dbe:	b2db      	uxtb	r3, r3
				middle = 0;
    7dc0:	4298      	cmp	r0, r3
    7dc2:	bf08      	it	eq
    7dc4:	2300      	moveq	r3, #0
			user->middle = middle;
    7dc6:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    7dc8:	9b06      	ldr	r3, [sp, #24]
    7dca:	5c9a      	ldrb	r2, [r3, r2]
    7dcc:	2a03      	cmp	r2, #3
    7dce:	d9eb      	bls.n	7da8 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7dd0:	2a05      	cmp	r2, #5
    7dd2:	d817      	bhi.n	7e04 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    7dd4:	7869      	ldrb	r1, [r5, #1]
    7dd6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    7dda:	930a      	str	r3, [sp, #40]	; 0x28
    7ddc:	980a      	ldr	r0, [sp, #40]	; 0x28
    7dde:	9b04      	ldr	r3, [sp, #16]
    7de0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    7de4:	7863      	ldrb	r3, [r4, #1]
    7de6:	78a0      	ldrb	r0, [r4, #2]
    7de8:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    7dea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    7dee:	d009      	beq.n	7e04 <ticker_job+0x1b0>
			    (state == 0) ||
    7df0:	2a04      	cmp	r2, #4
    7df2:	d10c      	bne.n	7e0e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    7df4:	686a      	ldr	r2, [r5, #4]
    7df6:	b952      	cbnz	r2, 7e0e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    7df8:	68aa      	ldr	r2, [r5, #8]
    7dfa:	b942      	cbnz	r2, 7e0e <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    7dfc:	68ea      	ldr	r2, [r5, #12]
    7dfe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    7e02:	d104      	bne.n	7e0e <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    7e04:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7e06:	4628      	mov	r0, r5
    7e08:	f7ff fec3 	bl	7b92 <ticker_job_op_cb>
    7e0c:	e7cb      	b.n	7da6 <ticker_job+0x152>
			if (state == 1) {
    7e0e:	2b01      	cmp	r3, #1
    7e10:	f040 809b 	bne.w	7f4a <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7e14:	4658      	mov	r0, fp
    7e16:	f7ff fe72 	bl	7afe <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7e1a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7e1c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7e1e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    7e20:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    7e22:	f040 8084 	bne.w	7f2e <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    7e26:	f8db 3014 	ldr.w	r3, [fp, #20]
    7e2a:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    7e2c:	f00a fb5e 	bl	124ec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7e30:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    7e32:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7e34:	1ac3      	subs	r3, r0, r3
    7e36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    7e3a:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    7e3c:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    7e3e:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7e40:	bf9e      	ittt	ls
    7e42:	6962      	ldrls	r2, [r4, #20]
    7e44:	1b92      	subls	r2, r2, r6
    7e46:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    7e48:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    7e4a:	bf96      	itet	ls
    7e4c:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    7e4e:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    7e50:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    7e52:	b18a      	cbz	r2, 7e78 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    7e54:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    7e56:	b179      	cbz	r1, 7e78 <ticker_job+0x224>
		user_op->params.update.lazy--;
    7e58:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    7e5c:	fa1f fe8e 	uxth.w	lr, lr
    7e60:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7e64:	429a      	cmp	r2, r3
    7e66:	d32b      	bcc.n	7ec0 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    7e68:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8190 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x190>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    7e6c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    7e70:	45e6      	cmp	lr, ip
    7e72:	d847      	bhi.n	7f04 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    7e74:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    7e78:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7e7a:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    7e7c:	4413      	add	r3, r2
    7e7e:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    7e80:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    7e82:	6963      	ldr	r3, [r4, #20]
    7e84:	4413      	add	r3, r2
    7e86:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    7e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7e8a:	4620      	mov	r0, r4
    7e8c:	f7ff fe63 	bl	7b56 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    7e90:	69a2      	ldr	r2, [r4, #24]
    7e92:	892b      	ldrh	r3, [r5, #8]
    7e94:	4413      	add	r3, r2
    7e96:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    7e98:	896a      	ldrh	r2, [r5, #10]
    7e9a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    7e9c:	bf8c      	ite	hi
    7e9e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    7ea0:	2300      	movls	r3, #0
    7ea2:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    7ea4:	7bab      	ldrb	r3, [r5, #14]
    7ea6:	b103      	cbz	r3, 7eaa <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    7ea8:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    7eaa:	9b04      	ldr	r3, [sp, #16]
    7eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7eae:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    7eb2:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    7eb4:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    7eb8:	3301      	adds	r3, #1
    7eba:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    7ebc:	2100      	movs	r1, #0
    7ebe:	e7a2      	b.n	7e06 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    7ec0:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    7ec4:	45e6      	cmp	lr, ip
    7ec6:	d2cf      	bcs.n	7e68 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    7ec8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7eca:	4eaf      	ldr	r6, [pc, #700]	; (8188 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188>)
    7ecc:	48af      	ldr	r0, [pc, #700]	; (818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>)
    7ece:	198e      	adds	r6, r1, r6
    7ed0:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    7ed2:	bf81      	itttt	hi
    7ed4:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    7ed8:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    7edc:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    7ee0:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    7ee2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7ee4:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    7ee6:	bf8c      	ite	hi
    7ee8:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    7eec:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    7ef0:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    7ef2:	4491      	add	r9, r2
			ticker->lazy_current--;
    7ef4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    7ef8:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    7efa:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    7efe:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7f02:	e7af      	b.n	7e64 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    7f04:	6a66      	ldr	r6, [r4, #36]	; 0x24
    7f06:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    7f08:	48a0      	ldr	r0, [pc, #640]	; (818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>)
	ticker->remainder_current += ticker->remainder_periodic;
    7f0a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7f0c:	499e      	ldr	r1, [pc, #632]	; (8188 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188>)
    7f0e:	1871      	adds	r1, r6, r1
    7f10:	4281      	cmp	r1, r0
	return 0;
    7f12:	bf8e      	itee	hi
    7f14:	2100      	movhi	r1, #0
		return 1;
    7f16:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    7f18:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    7f1a:	4411      	add	r1, r2
			ticker->lazy_current++;
    7f1c:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    7f20:	bf8c      	ite	hi
    7f22:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    7f24:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    7f26:	440b      	add	r3, r1
			ticker->lazy_current++;
    7f28:	f8a4 c01e 	strh.w	ip, [r4, #30]
    7f2c:	e79e      	b.n	7e6c <ticker_job+0x218>
		ticker->req = ticker->ack;
    7f2e:	78a3      	ldrb	r3, [r4, #2]
    7f30:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    7f32:	786b      	ldrb	r3, [r5, #1]
    7f34:	f89b 201c 	ldrb.w	r2, [fp, #28]
    7f38:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7f3a:	bf01      	itttt	eq
    7f3c:	23ff      	moveq	r3, #255	; 0xff
    7f3e:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7f42:	2300      	moveq	r3, #0
    7f44:	f8cb 3018 	streq.w	r3, [fp, #24]
    7f48:	e7b8      	b.n	7ebc <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    7f4a:	2104      	movs	r1, #4
    7f4c:	465b      	mov	r3, fp
    7f4e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    7f52:	2201      	movs	r2, #1
    7f54:	4608      	mov	r0, r1
    7f56:	47a0      	blx	r4
				pending = 1;
    7f58:	2301      	movs	r3, #1
				user->middle = prev;
    7f5a:	70be      	strb	r6, [r7, #2]
				pending = 1;
    7f5c:	9307      	str	r3, [sp, #28]
    7f5e:	9b02      	ldr	r3, [sp, #8]
    7f60:	3b01      	subs	r3, #1
    7f62:	b2db      	uxtb	r3, r3
    7f64:	9302      	str	r3, [sp, #8]
    7f66:	e6aa      	b.n	7cbe <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    7f68:	f8db 3018 	ldr.w	r3, [fp, #24]
    7f6c:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    7f6e:	bf29      	itett	cs
    7f70:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    7f72:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    7f74:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    7f78:	2300      	movcs	r3, #0
    7f7a:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    7f7e:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    7f80:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    7f82:	b11b      	cbz	r3, 7f8c <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    7f84:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    7f88:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    7f8c:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    7f8e:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    7f90:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    7f92:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    7f96:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    7f9a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7f9e:	f1be 0f00 	cmp.w	lr, #0
    7fa2:	d030      	beq.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7fa4:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    7fa6:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>
	ticker->remainder_current += ticker->remainder_periodic;
    7faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fac:	6a21      	ldr	r1, [r4, #32]
    7fae:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    7fb0:	4975      	ldr	r1, [pc, #468]	; (8188 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188>)
    7fb2:	1859      	adds	r1, r3, r1
    7fb4:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    7fb6:	bf9f      	itttt	ls
    7fb8:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    7fbc:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    7fc0:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    7fc4:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    7fc6:	bf92      	itee	ls
    7fc8:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    7fca:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    7fcc:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    7fce:	4473      	add	r3, lr
			while (count--) {
    7fd0:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    7fd4:	441a      	add	r2, r3
			while (count--) {
    7fd6:	d2e8      	bcs.n	7faa <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7fd8:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    7fda:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    7fdc:	f8db 1014 	ldr.w	r1, [fp, #20]
    7fe0:	eb03 0209 	add.w	r2, r3, r9
    7fe4:	4620      	mov	r0, r4
    7fe6:	f7ff fdb6 	bl	7b56 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    7fea:	8ba3      	ldrh	r3, [r4, #28]
    7fec:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    7fee:	2300      	movs	r3, #0
    7ff0:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    7ff2:	9b04      	ldr	r3, [sp, #16]
    7ff4:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    7ff8:	7863      	ldrb	r3, [r4, #1]
    7ffa:	3301      	adds	r3, #1
    7ffc:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    7ffe:	eba8 0805 	sub.w	r8, r8, r5
    8002:	46b2      	mov	sl, r6
    8004:	e66c      	b.n	7ce0 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    8006:	78a3      	ldrb	r3, [r4, #2]
    8008:	7063      	strb	r3, [r4, #1]
    800a:	4656      	mov	r6, sl
    800c:	e7f7      	b.n	7ffe <ticker_job+0x3aa>
		user = &users[count_user];
    800e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8010:	9a01      	ldr	r2, [sp, #4]
    8012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    8016:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    8018:	685b      	ldr	r3, [r3, #4]
    801a:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    801c:	9b04      	ldr	r3, [sp, #16]
    801e:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    8022:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    8026:	f000 808e 	beq.w	8146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146>
				ticker = &node[id_insert];
    802a:	fa0f f38a 	sxth.w	r3, sl
    802e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8032:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    8034:	46d0      	mov	r8, sl
    8036:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    803a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    803e:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    8040:	f8db 3000 	ldr.w	r3, [fp]
    8044:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    8046:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    8048:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    804a:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    804c:	8be3      	ldrh	r3, [r4, #30]
    804e:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    8050:	bf86      	itte	hi
    8052:	1a9b      	subhi	r3, r3, r2
    8054:	b29b      	uxthhi	r3, r3
		skip = 0;
    8056:	2300      	movls	r3, #0
    8058:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    805a:	fa0f f388 	sxth.w	r3, r8
    805e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8062:	00db      	lsls	r3, r3, #3
    8064:	9311      	str	r3, [sp, #68]	; 0x44
    8066:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    8068:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    806c:	f8db 0018 	ldr.w	r0, [fp, #24]
    8070:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    8072:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    8076:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    8078:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    807c:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    8080:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    8082:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    8084:	2bff      	cmp	r3, #255	; 0xff
    8086:	d007      	beq.n	8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    8088:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    808c:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    8090:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    8092:	4281      	cmp	r1, r0
    8094:	f200 80a9 	bhi.w	81ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ea>
				     ticks_to_expire + ticker_new->ticks_slot);
    8098:	f8de 0018 	ldr.w	r0, [lr, #24]
    809c:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    809e:	eb01 0c00 	add.w	ip, r1, r0
    80a2:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    80a4:	2eff      	cmp	r6, #255	; 0xff
    80a6:	f040 80ae 	bne.w	8206 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x206>
	if ((ticker_new->ticks_slot == 0) ||
    80aa:	980d      	ldr	r0, [sp, #52]	; 0x34
    80ac:	b130      	cbz	r0, 80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>
    80ae:	9805      	ldr	r0, [sp, #20]
    80b0:	4281      	cmp	r1, r0
    80b2:	f0c0 80bf 	bcc.w	8234 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x234>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    80b6:	2eff      	cmp	r6, #255	; 0xff
    80b8:	f040 8185 	bne.w	83c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c6>
		if (previous == current) {
    80bc:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    80be:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    80c2:	4283      	cmp	r3, r0
			node[previous].next = id;
    80c4:	bf18      	it	ne
    80c6:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    80ca:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    80ce:	bf16      	itet	ne
    80d0:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    80d4:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    80d8:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    80dc:	2bff      	cmp	r3, #255	; 0xff
    80de:	d006      	beq.n	80ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xee>
			node[current].ticks_to_expire -= ticks_to_expire;
    80e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    80e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    80e8:	689a      	ldr	r2, [r3, #8]
    80ea:	1a51      	subs	r1, r2, r1
    80ec:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    80ee:	78a3      	ldrb	r3, [r4, #2]
    80f0:	3301      	adds	r3, #1
    80f2:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    80f4:	2100      	movs	r1, #0
			if (user_op) {
    80f6:	2d00      	cmp	r5, #0
    80f8:	d093      	beq.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
				ticker_job_op_cb(user_op, status);
    80fa:	4628      	mov	r0, r5
    80fc:	f7ff fd49 	bl	7b92 <ticker_job_op_cb>
    8100:	e78f      	b.n	8022 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22>
				user_op = &user_ops[user_ops_first];
    8102:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    8106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8108:	011b      	lsls	r3, r3, #4
    810a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    810c:	f109 0201 	add.w	r2, r9, #1
    8110:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    8114:	9a04      	ldr	r2, [sp, #16]
    8116:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    8118:	454a      	cmp	r2, r9
    811a:	bf08      	it	eq
    811c:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    8120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8122:	5cd3      	ldrb	r3, [r2, r3]
    8124:	2b03      	cmp	r3, #3
    8126:	d10e      	bne.n	8146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146>
				id_insert = user_op->id;
    8128:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    812c:	9b08      	ldr	r3, [sp, #32]
    812e:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    8132:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    8136:	7862      	ldrb	r2, [r4, #1]
    8138:	78a3      	ldrb	r3, [r4, #2]
    813a:	429a      	cmp	r2, r3
    813c:	d009      	beq.n	8152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x152>
					ticker_job_op_cb(user_op,
    813e:	2101      	movs	r1, #1
    8140:	4628      	mov	r0, r5
    8142:	f7ff fd26 	bl	7b92 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    8146:	9b04      	ldr	r3, [sp, #16]
    8148:	789b      	ldrb	r3, [r3, #2]
    814a:	454b      	cmp	r3, r9
    814c:	d1d9      	bne.n	8102 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102>
    814e:	9b01      	ldr	r3, [sp, #4]
    8150:	e5e6      	b.n	7d20 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    8152:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    8154:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    8158:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    815a:	692b      	ldr	r3, [r5, #16]
    815c:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    815e:	8aab      	ldrh	r3, [r5, #20]
    8160:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    8162:	69ab      	ldr	r3, [r5, #24]
    8164:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    8166:	69eb      	ldr	r3, [r5, #28]
    8168:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    816a:	6a2b      	ldr	r3, [r5, #32]
    816c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    816e:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    8170:	68ab      	ldr	r3, [r5, #8]
    8172:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    8174:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    8176:	686a      	ldr	r2, [r5, #4]
    8178:	4620      	mov	r0, r4
    817a:	f7ff fcec 	bl	7b56 <ticks_to_expire_prep>
	ticker->force = 1;
    817e:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    8180:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    8182:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    8184:	70e3      	strb	r3, [r4, #3]
    8186:	e75b      	b.n	8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>
    8188:	ff172b5a 	.word	0xff172b5a
    818c:	7f172b59 	.word	0x7f172b59
    8190:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    8194:	6860      	ldr	r0, [r4, #4]
    8196:	2800      	cmp	r0, #0
    8198:	d07b      	beq.n	8292 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x292>
	ticker->remainder_current += ticker->remainder_periodic;
    819a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    819c:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    819e:	4b8d      	ldr	r3, [pc, #564]	; (83d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d4>)
	ticker->remainder_current += ticker->remainder_periodic;
    81a0:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    81a2:	498d      	ldr	r1, [pc, #564]	; (83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>)
    81a4:	18d3      	adds	r3, r2, r3
    81a6:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    81a8:	bf9c      	itt	ls
    81aa:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    81ae:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    81b2:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    81b4:	bf8b      	itete	hi
    81b6:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    81b8:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    81bc:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    81be:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    81c0:	4403      	add	r3, r0
		return 1;
    81c2:	bf98      	it	ls
    81c4:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    81c6:	4413      	add	r3, r2
			ticker->lazy_current++;
    81c8:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    81ca:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    81cc:	3201      	adds	r2, #1
    81ce:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    81d0:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    81d2:	4293      	cmp	r3, r2
    81d4:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    81d8:	bf89      	itett	hi
    81da:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    81dc:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    81de:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    81e0:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    81e2:	bf9c      	itt	ls
    81e4:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    81e6:	60a1      	strls	r1, [r4, #8]
    81e8:	e73d      	b.n	8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
		if (ticker_current->ticks_slot != 0) {
    81ea:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    81ec:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    81ee:	b946      	cbnz	r6, 8202 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x202>
			if (ticks_slot_previous > ticks_to_expire_current) {
    81f0:	9f05      	ldr	r7, [sp, #20]
    81f2:	42b8      	cmp	r0, r7
    81f4:	d200      	bcs.n	81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>
				ticks_slot_previous -= ticks_to_expire_current;
    81f6:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    81f8:	9309      	str	r3, [sp, #36]	; 0x24
    81fa:	9605      	str	r6, [sp, #20]
    81fc:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    8200:	e740      	b.n	8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>
		if (ticker_current->ticks_slot != 0) {
    8202:	9306      	str	r3, [sp, #24]
    8204:	e7f8      	b.n	81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>
		ticker = &node[ticker_id_head];
    8206:	b230      	sxth	r0, r6
    8208:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    820c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    8210:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    8212:	68bf      	ldr	r7, [r7, #8]
    8214:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    8216:	4567      	cmp	r7, ip
    8218:	d20a      	bcs.n	8230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x230>
		if (ticker->ticks_slot) {
    821a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    821c:	69bf      	ldr	r7, [r7, #24]
    821e:	2f00      	cmp	r7, #0
    8220:	f47f af43 	bne.w	80aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa>
		ticks_slot -= ticks_to_expire;
    8224:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    8226:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    822a:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    822e:	e739      	b.n	80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
			return TICKER_NULL;
    8230:	26ff      	movs	r6, #255	; 0xff
    8232:	e73a      	b.n	80aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa>
	while (id_insert !=
    8234:	9b06      	ldr	r3, [sp, #24]
    8236:	4598      	cmp	r8, r3
    8238:	f43f af59 	beq.w	80ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xee>
		if (id_collide != TICKER_NULL) {
    823c:	9b06      	ldr	r3, [sp, #24]
    823e:	2bff      	cmp	r3, #255	; 0xff
    8240:	d0a8      	beq.n	8194 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194>
    8242:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    8244:	b233      	sxth	r3, r6
    8246:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    824a:	9305      	str	r3, [sp, #20]
    824c:	9a05      	ldr	r2, [sp, #20]
    824e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8250:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    8254:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    8256:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    8258:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    825a:	bf88      	it	hi
    825c:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    825e:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    8260:	bf8c      	ite	hi
    8262:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    8264:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    8266:	2a00      	cmp	r2, #0
    8268:	d094      	beq.n	8194 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194>
    826a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    826c:	4293      	cmp	r3, r2
    826e:	d891      	bhi.n	8194 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194>
			    skip_collide <= skip &&
    8270:	78fa      	ldrb	r2, [r7, #3]
    8272:	78e3      	ldrb	r3, [r4, #3]
    8274:	429a      	cmp	r2, r3
    8276:	d28d      	bcs.n	8194 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194>
					ticker_dequeue(instance, id_collide);
    8278:	4631      	mov	r1, r6
    827a:	4658      	mov	r0, fp
    827c:	f7ff fc3f 	bl	7afe <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    8280:	78bb      	ldrb	r3, [r7, #2]
    8282:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    8284:	9a05      	ldr	r2, [sp, #20]
    8286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    8288:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    828a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    828e:	46b2      	mov	sl, r6
    8290:	e6e9      	b.n	8066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66>
			return TICKER_STATUS_FAILURE;
    8292:	2101      	movs	r1, #1
    8294:	e72f      	b.n	80f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf6>
		user = &users[count_user];
    8296:	9b01      	ldr	r3, [sp, #4]
    8298:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    829c:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    829e:	786b      	ldrb	r3, [r5, #1]
    82a0:	78ea      	ldrb	r2, [r5, #3]
    82a2:	429a      	cmp	r2, r3
    82a4:	d102      	bne.n	82ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ac>
    82a6:	3c01      	subs	r4, #1
    82a8:	b2e4      	uxtb	r4, r4
    82aa:	e551      	b.n	7d50 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    82ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    82b0:	011b      	lsls	r3, r3, #4
    82b2:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    82b4:	5cf3      	ldrb	r3, [r6, r3]
    82b6:	2b01      	cmp	r3, #1
    82b8:	d025      	beq.n	8306 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x306>
    82ba:	2b02      	cmp	r3, #2
    82bc:	d12a      	bne.n	8314 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x314>
		ticker_by_next_slot_get(instance,
    82be:	f8d2 c004 	ldr.w	ip, [r2, #4]
    82c2:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    82c4:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    82c8:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    82cc:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    82d0:	28ff      	cmp	r0, #255	; 0xff
    82d2:	d004      	beq.n	82de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2de>
    82d4:	6819      	ldr	r1, [r3, #0]
    82d6:	f8db 7014 	ldr.w	r7, [fp, #20]
    82da:	42b9      	cmp	r1, r7
    82dc:	d023      	beq.n	8326 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x326>
		*ticks_current = instance->ticks_current;
    82de:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    82e2:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    82e6:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    82e8:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    82ea:	29ff      	cmp	r1, #255	; 0xff
    82ec:	d007      	beq.n	82fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2fe>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    82ee:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    82f2:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    82f6:	6987      	ldr	r7, [r0, #24]
    82f8:	6880      	ldr	r0, [r0, #8]
    82fa:	b1df      	cbz	r7, 8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>
		_ticks_to_expire += ticker->ticks_to_expire;
    82fc:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    82fe:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    8302:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    8306:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    8308:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    830c:	b113      	cbz	r3, 8314 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x314>
		fp_op_func(uop->status, uop->op_context);
    830e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8310:	2000      	movs	r0, #0
    8312:	4798      	blx	r3
			first = user->first + 1;
    8314:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    8316:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    8318:	3301      	adds	r3, #1
    831a:	b2db      	uxtb	r3, r3
				first = 0;
    831c:	429a      	cmp	r2, r3
    831e:	bf08      	it	eq
    8320:	2300      	moveq	r3, #0
			user->first = first;
    8322:	706b      	strb	r3, [r5, #1]
    8324:	e7bb      	b.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
		ticker = &node[_ticker_id_head];
    8326:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    832a:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    832e:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    8332:	e7da      	b.n	82ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ea>
		_ticks_to_expire += ticker->ticks_to_expire;
    8334:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    8336:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    833a:	e7d6      	b.n	82ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ea>
	if (ticker_id_old_head == TICKER_NULL) {
    833c:	9b03      	ldr	r3, [sp, #12]
    833e:	2bff      	cmp	r3, #255	; 0xff
    8340:	d107      	bne.n	8352 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x352>
		ticks_current = cntr_cnt_get();
    8342:	f00a f8d3 	bl	124ec <cntr_cnt_get>
    8346:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    8348:	f00a f8aa 	bl	124a0 <cntr_start>
    834c:	b908      	cbnz	r0, 8352 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x352>
			instance->ticks_current = ticks_current;
    834e:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    8352:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    8356:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    835a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    835e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8362:	260a      	movs	r6, #10
    8364:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    8366:	f00a f8c1 	bl	124ec <cntr_cnt_get>
		cc = instance->ticks_current;
    836a:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    836e:	1b03      	subs	r3, r0, r4
    8370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    8374:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    8376:	42ab      	cmp	r3, r5
    8378:	bf2c      	ite	cs
    837a:	18e4      	addcs	r4, r4, r3
    837c:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    837e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    8382:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    8384:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    8388:	4620      	mov	r0, r4
    838a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    838c:	f00a f8ae 	bl	124ec <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8390:	1bc0      	subs	r0, r0, r7
    8392:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8396:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    8398:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    839a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    839e:	42a0      	cmp	r0, r4
    83a0:	f67f ace8 	bls.w	7d74 <ticker_job+0x120>
		LL_ASSERT(i);
    83a4:	3e01      	subs	r6, #1
    83a6:	d1de      	bne.n	8366 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x366>
    83a8:	4040      	eors	r0, r0
    83aa:	f380 8811 	msr	BASEPRI, r0
    83ae:	f04f 0004 	mov.w	r0, #4
    83b2:	df02      	svc	2
	instance->job_guard = 0;
    83b4:	2300      	movs	r3, #0
    83b6:	f88b 301e 	strb.w	r3, [fp, #30]
    83ba:	e4d1      	b.n	7d60 <ticker_job+0x10c>
	if (!pending) {
    83bc:	2b00      	cmp	r3, #0
    83be:	d1f9      	bne.n	83b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b4>
		flag_compare_update = 1;
    83c0:	2301      	movs	r3, #1
    83c2:	9302      	str	r3, [sp, #8]
    83c4:	e4bb      	b.n	7d3e <ticker_job+0xea>
	while (id_insert !=
    83c6:	45b0      	cmp	r8, r6
    83c8:	f47f af3c 	bne.w	8244 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x244>
    83cc:	e68f      	b.n	80ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xee>
}
    83ce:	b013      	add	sp, #76	; 0x4c
    83d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83d4:	ff172b5a 	.word	0xff172b5a
    83d8:	7f172b59 	.word	0x7f172b59

000083dc <ticker_init>:
{
    83dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    83de:	4d1a      	ldr	r5, [pc, #104]	; (8448 <ticker_init+0x6c>)
{
    83e0:	9f05      	ldr	r7, [sp, #20]
    83e2:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    83e6:	262c      	movs	r6, #44	; 0x2c
    83e8:	4346      	muls	r6, r0
    83ea:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    83ee:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    83f0:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    83f4:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    83f6:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    83fa:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    83fe:	3b01      	subs	r3, #1
    8400:	b2db      	uxtb	r3, r3
    8402:	2bff      	cmp	r3, #255	; 0xff
    8404:	d111      	bne.n	842a <ticker_init+0x4e>
	if (count_op) {
    8406:	b9ec      	cbnz	r4, 8444 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    8408:	222c      	movs	r2, #44	; 0x2c
    840a:	fb02 5200 	mla	r2, r2, r0, r5
    840e:	9908      	ldr	r1, [sp, #32]
    8410:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    8412:	9909      	ldr	r1, [sp, #36]	; 0x24
    8414:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    8416:	990a      	ldr	r1, [sp, #40]	; 0x28
    8418:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    841a:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    841c:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    841e:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    8420:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    8422:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    8424:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    8426:	4620      	mov	r0, r4
    8428:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    842a:	b21a      	sxth	r2, r3
    842c:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    8430:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    8432:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    8436:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    843a:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    843c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    8440:	b2e4      	uxtb	r4, r4
    8442:	e7dc      	b.n	83fe <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    8444:	2001      	movs	r0, #1
}
    8446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8448:	20000868 	.word	0x20000868

0000844c <ticker_trigger>:
	instance = &_instance[instance_index];
    844c:	4a07      	ldr	r2, [pc, #28]	; (846c <ticker_trigger+0x20>)
    844e:	212c      	movs	r1, #44	; 0x2c
    8450:	fb00 2301 	mla	r3, r0, r1, r2
{
    8454:	b410      	push	{r4}
	if (instance->sched_cb) {
    8456:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    8458:	b12c      	cbz	r4, 8466 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    845a:	46a4      	mov	ip, r4
    845c:	2201      	movs	r2, #1
    845e:	2103      	movs	r1, #3
    8460:	2002      	movs	r0, #2
}
    8462:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    8464:	4760      	bx	ip
}
    8466:	bc10      	pop	{r4}
    8468:	4770      	bx	lr
    846a:	bf00      	nop
    846c:	20000868 	.word	0x20000868

00008470 <ticker_start>:
{
    8470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8474:	4f25      	ldr	r7, [pc, #148]	; (850c <ticker_start+0x9c>)
    8476:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    847a:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    847c:	fb08 7000 	mla	r0, r8, r0, r7
    8480:	fa0f fc81 	sxth.w	ip, r1
    8484:	f8d0 e004 	ldr.w	lr, [r0, #4]
    8488:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    848c:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    8490:	78f4      	ldrb	r4, [r6, #3]
    8492:	1c65      	adds	r5, r4, #1
    8494:	b2ed      	uxtb	r5, r5
		last = 0;
    8496:	45ae      	cmp	lr, r5
    8498:	bf98      	it	ls
    849a:	2500      	movls	r5, #0
	if (last == user->first) {
    849c:	f896 e001 	ldrb.w	lr, [r6, #1]
    84a0:	45ae      	cmp	lr, r5
    84a2:	d02f      	beq.n	8504 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    84a4:	f8d6 c004 	ldr.w	ip, [r6, #4]
    84a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    84ac:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    84b0:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    84b4:	f04f 0a03 	mov.w	sl, #3
    84b8:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    84bc:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    84be:	9b08      	ldr	r3, [sp, #32]
    84c0:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    84c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    84c4:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    84c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    84c8:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    84ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    84cc:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    84ce:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    84d2:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    84d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    84d6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    84d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    84da:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    84dc:	2302      	movs	r3, #2
    84de:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    84e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84e2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    84e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    84e6:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    84e8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    84ea:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    84ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
    84ee:	6a03      	ldr	r3, [r0, #32]
    84f0:	4608      	mov	r0, r1
    84f2:	4798      	blx	r3
    84f4:	fb09 7308 	mla	r3, r9, r8, r7
    84f8:	2200      	movs	r2, #0
    84fa:	2104      	movs	r1, #4
    84fc:	47a8      	blx	r5
	return user_op->status;
    84fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8504:	2001      	movs	r0, #1
}
    8506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    850a:	bf00      	nop
    850c:	20000868 	.word	0x20000868

00008510 <ticker_update>:
{
    8510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8514:	f8df 8090 	ldr.w	r8, [pc, #144]	; 85a8 <ticker_update+0x98>
    8518:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    851c:	fb0a 8e00 	mla	lr, sl, r0, r8
    8520:	b20f      	sxth	r7, r1
    8522:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    8526:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8528:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    852c:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    8530:	78c4      	ldrb	r4, [r0, #3]
    8532:	1c66      	adds	r6, r4, #1
    8534:	b2f6      	uxtb	r6, r6
		last = 0;
    8536:	42b5      	cmp	r5, r6
    8538:	bf98      	it	ls
    853a:	2600      	movls	r6, #0
	if (last == user->first) {
    853c:	7845      	ldrb	r5, [r0, #1]
    853e:	42b5      	cmp	r5, r6
    8540:	d02f      	beq.n	85a2 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    8542:	f8d0 c004 	ldr.w	ip, [r0, #4]
    8546:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    854a:	0125      	lsls	r5, r4, #4
    854c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    8550:	2704      	movs	r7, #4
    8552:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    8556:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    8558:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    855c:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    855e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8562:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    8564:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8568:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    856a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    856e:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    8570:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    8574:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    8576:	2302      	movs	r3, #2
    8578:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    857a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    857c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    857e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    8580:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    8582:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8584:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8586:	f8de 3020 	ldr.w	r3, [lr, #32]
    858a:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    858e:	4608      	mov	r0, r1
    8590:	4798      	blx	r3
    8592:	fb09 830a 	mla	r3, r9, sl, r8
    8596:	2200      	movs	r2, #0
    8598:	4639      	mov	r1, r7
    859a:	47a8      	blx	r5
	return user_op->status;
    859c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    859e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    85a2:	2001      	movs	r0, #1
}
    85a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85a8:	20000868 	.word	0x20000868

000085ac <ticker_stop>:
{
    85ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    85b0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8620 <ticker_stop+0x74>
    85b4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    85b8:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    85bc:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    85be:	f8de 0004 	ldr.w	r0, [lr, #4]
    85c2:	b20e      	sxth	r6, r1
    85c4:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    85c8:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    85cc:	78fc      	ldrb	r4, [r7, #3]
    85ce:	1c65      	adds	r5, r4, #1
    85d0:	b2ed      	uxtb	r5, r5
		last = 0;
    85d2:	42a8      	cmp	r0, r5
    85d4:	bf98      	it	ls
    85d6:	2500      	movls	r5, #0
	if (last == user->first) {
    85d8:	7878      	ldrb	r0, [r7, #1]
    85da:	42a8      	cmp	r0, r5
    85dc:	d01d      	beq.n	861a <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    85de:	6878      	ldr	r0, [r7, #4]
    85e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    85e4:	0124      	lsls	r4, r4, #4
    85e6:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    85e8:	f04f 0c05 	mov.w	ip, #5
    85ec:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    85f0:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    85f2:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    85f4:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    85f6:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    85f8:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    85fa:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    85fc:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    85fe:	f8de 3020 	ldr.w	r3, [lr, #32]
    8602:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    8606:	4608      	mov	r0, r1
    8608:	4798      	blx	r3
    860a:	fb08 930a 	mla	r3, r8, sl, r9
    860e:	2200      	movs	r2, #0
    8610:	2104      	movs	r1, #4
    8612:	47a0      	blx	r4
	return user_op->status;
    8614:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    861a:	2001      	movs	r0, #1
}
    861c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8620:	20000868 	.word	0x20000868

00008624 <ticker_next_slot_get>:
{
    8624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    8628:	f8df 8078 	ldr.w	r8, [pc, #120]	; 86a4 <ticker_next_slot_get+0x80>
    862c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    8630:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    8632:	fb0a 8000 	mla	r0, sl, r0, r8
    8636:	fa0f fe81 	sxth.w	lr, r1
    863a:	6845      	ldr	r5, [r0, #4]
    863c:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    8640:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    8644:	78fc      	ldrb	r4, [r7, #3]
    8646:	1c66      	adds	r6, r4, #1
    8648:	b2f6      	uxtb	r6, r6
		last = 0;
    864a:	42b5      	cmp	r5, r6
    864c:	bf98      	it	ls
    864e:	2600      	movls	r6, #0
	if (last == user->first) {
    8650:	787d      	ldrb	r5, [r7, #1]
    8652:	42b5      	cmp	r5, r6
    8654:	d023      	beq.n	869e <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    8656:	f8d7 c004 	ldr.w	ip, [r7, #4]
    865a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    865e:	0125      	lsls	r5, r4, #4
    8660:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    8664:	f04f 0e02 	mov.w	lr, #2
    8668:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    866c:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    866e:	9b08      	ldr	r3, [sp, #32]
    8670:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    8672:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8674:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    8676:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    8678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    867a:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    867c:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    867e:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    8682:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    8684:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8686:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8688:	6a03      	ldr	r3, [r0, #32]
    868a:	4608      	mov	r0, r1
    868c:	4798      	blx	r3
    868e:	fb09 830a 	mla	r3, r9, sl, r8
    8692:	2200      	movs	r2, #0
    8694:	2104      	movs	r1, #4
    8696:	47a8      	blx	r5
	return user_op->status;
    8698:	6a60      	ldr	r0, [r4, #36]	; 0x24
    869a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    869e:	2001      	movs	r0, #1
}
    86a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86a4:	20000868 	.word	0x20000868

000086a8 <ticker_job_idle_get>:
{
    86a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    86ac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 871c <ticker_job_idle_get+0x74>
    86b0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    86b4:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    86b8:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    86ba:	f8de 0004 	ldr.w	r0, [lr, #4]
    86be:	b20e      	sxth	r6, r1
    86c0:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    86c4:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    86c8:	78fc      	ldrb	r4, [r7, #3]
    86ca:	1c65      	adds	r5, r4, #1
    86cc:	b2ed      	uxtb	r5, r5
		last = 0;
    86ce:	42a8      	cmp	r0, r5
    86d0:	bf98      	it	ls
    86d2:	2500      	movls	r5, #0
	if (last == user->first) {
    86d4:	7878      	ldrb	r0, [r7, #1]
    86d6:	42a8      	cmp	r0, r5
    86d8:	d01d      	beq.n	8716 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    86da:	6878      	ldr	r0, [r7, #4]
    86dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    86e0:	0124      	lsls	r4, r4, #4
    86e2:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    86e4:	f04f 0c01 	mov.w	ip, #1
    86e8:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    86ec:	20ff      	movs	r0, #255	; 0xff
    86ee:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    86f0:	2002      	movs	r0, #2
    86f2:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    86f4:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    86f6:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    86f8:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    86fa:	f8de 3020 	ldr.w	r3, [lr, #32]
    86fe:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    8702:	4608      	mov	r0, r1
    8704:	4798      	blx	r3
    8706:	fb08 930a 	mla	r3, r8, sl, r9
    870a:	2200      	movs	r2, #0
    870c:	2104      	movs	r1, #4
    870e:	47a0      	blx	r4
	return user_op->status;
    8710:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    8716:	2001      	movs	r0, #1
}
    8718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    871c:	20000868 	.word	0x20000868

00008720 <ticker_job_sched>:
{
    8720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8724:	4c08      	ldr	r4, [pc, #32]	; (8748 <ticker_job_sched+0x28>)
    8726:	252c      	movs	r5, #44	; 0x2c
    8728:	fb05 4300 	mla	r3, r5, r0, r4
{
    872c:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    872e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    8730:	6a1b      	ldr	r3, [r3, #32]
    8732:	4608      	mov	r0, r1
    8734:	4798      	blx	r3
    8736:	fb06 4305 	mla	r3, r6, r5, r4
    873a:	46bc      	mov	ip, r7
    873c:	2200      	movs	r2, #0
    873e:	2104      	movs	r1, #4
}
    8740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    8744:	4760      	bx	ip
    8746:	bf00      	nop
    8748:	20000868 	.word	0x20000868

0000874c <ticker_ticks_now_get>:
	return cntr_cnt_get();
    874c:	f009 bece 	b.w	124ec <cntr_cnt_get>

00008750 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    8750:	1a40      	subs	r0, r0, r1
}
    8752:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8756:	4770      	bx	lr

00008758 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    8758:	b508      	push	{r3, lr}
    875a:	4603      	mov	r3, r0
	if (addr_type > 1) {
    875c:	2b01      	cmp	r3, #1
{
    875e:	4608      	mov	r0, r1
	if (addr_type > 1) {
    8760:	d80e      	bhi.n	8780 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    8762:	b133      	cbz	r3, 8772 <ll_addr_get+0x1a>
		if (bdaddr) {
    8764:	b119      	cbz	r1, 876e <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    8766:	2206      	movs	r2, #6
    8768:	4906      	ldr	r1, [pc, #24]	; (8784 <ll_addr_get+0x2c>)
    876a:	f7f7 ff39 	bl	5e0 <memcpy>
		}

		return rnd_addr;
    876e:	4805      	ldr	r0, [pc, #20]	; (8784 <ll_addr_get+0x2c>)
    8770:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    8772:	b119      	cbz	r1, 877c <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    8774:	2206      	movs	r2, #6
    8776:	4904      	ldr	r1, [pc, #16]	; (8788 <ll_addr_get+0x30>)
    8778:	f7f7 ff32 	bl	5e0 <memcpy>
	}

	return pub_addr;
    877c:	4802      	ldr	r0, [pc, #8]	; (8788 <ll_addr_get+0x30>)
}
    877e:	bd08      	pop	{r3, pc}
		return NULL;
    8780:	2000      	movs	r0, #0
    8782:	bd08      	pop	{r3, pc}
    8784:	200008c6 	.word	0x200008c6
    8788:	200008c0 	.word	0x200008c0

0000878c <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    878c:	b570      	push	{r4, r5, r6, lr}
    878e:	4606      	mov	r6, r0
    8790:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    8792:	f007 f9fb 	bl	fb8c <ll_adv_is_enabled>
    8796:	4604      	mov	r4, r0
    8798:	b110      	cbz	r0, 87a0 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    879a:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    879c:	4620      	mov	r0, r4
    879e:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    87a0:	f007 fa0a 	bl	fbb8 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    87a4:	f010 0f06 	tst.w	r0, #6
    87a8:	d1f7      	bne.n	879a <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    87aa:	2206      	movs	r2, #6
    87ac:	4629      	mov	r1, r5
	if (addr_type) {
    87ae:	b11e      	cbz	r6, 87b8 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    87b0:	4802      	ldr	r0, [pc, #8]	; (87bc <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    87b2:	f7f7 ff15 	bl	5e0 <memcpy>
    87b6:	e7f1      	b.n	879c <ll_addr_set+0x10>
    87b8:	4801      	ldr	r0, [pc, #4]	; (87c0 <ll_addr_set+0x34>)
    87ba:	e7fa      	b.n	87b2 <ll_addr_set+0x26>
    87bc:	200008c6 	.word	0x200008c6
    87c0:	200008c0 	.word	0x200008c0

000087c4 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    87c4:	2300      	movs	r3, #0
    87c6:	7003      	strb	r3, [r0, #0]
	*max = 0;
    87c8:	700b      	strb	r3, [r1, #0]
    87ca:	4770      	bx	lr

000087cc <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    87cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    87ce:	4607      	mov	r7, r0
    87d0:	460e      	mov	r6, r1
	while (len) {
    87d2:	460c      	mov	r4, r1
    87d4:	1b35      	subs	r5, r6, r4
    87d6:	443d      	add	r5, r7
    87d8:	b18c      	cbz	r4, 87fe <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    87da:	f7f8 fe27 	bl	142c <sys_rand32_get>

		if (len >= sizeof(v)) {
    87de:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    87e0:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    87e2:	d907      	bls.n	87f4 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    87e4:	2204      	movs	r2, #4
    87e6:	eb0d 0102 	add.w	r1, sp, r2
    87ea:	4628      	mov	r0, r5
    87ec:	f7f7 fef8 	bl	5e0 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    87f0:	3c04      	subs	r4, #4
    87f2:	e7ef      	b.n	87d4 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    87f4:	4622      	mov	r2, r4
    87f6:	a901      	add	r1, sp, #4
    87f8:	4628      	mov	r0, r5
    87fa:	f7f7 fef1 	bl	5e0 <memcpy>
			break;
		}
	}

	return 0;
}
    87fe:	2000      	movs	r0, #0
    8800:	b003      	add	sp, #12
    8802:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008804 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    8804:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    8806:	2300      	movs	r3, #0
    8808:	f009 fea4 	bl	12554 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    880c:	2000      	movs	r0, #0
    880e:	bd08      	pop	{r3, pc}

00008810 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    8810:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    8812:	4802      	ldr	r0, [pc, #8]	; (881c <_hci_driver_init+0xc>)
    8814:	f7fa ff6e 	bl	36f4 <bt_hci_driver_register>

	return 0;
}
    8818:	2000      	movs	r0, #0
    881a:	bd08      	pop	{r3, pc}
    881c:	00014d1c 	.word	0x00014d1c

00008820 <hci_driver_send>:
{
    8820:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
    8822:	8983      	ldrh	r3, [r0, #12]
{
    8824:	4605      	mov	r5, r0
	if (!buf->len) {
    8826:	b1d3      	cbz	r3, 885e <hci_driver_send+0x3e>
	switch (type) {
    8828:	7d03      	ldrb	r3, [r0, #20]
    882a:	b18b      	cbz	r3, 8850 <hci_driver_send+0x30>
    882c:	2b02      	cmp	r3, #2
    882e:	d116      	bne.n	885e <hci_driver_send+0x3e>
	err = hci_acl_handle(buf, &evt);
    8830:	a901      	add	r1, sp, #4
    8832:	f001 f84b 	bl	98cc <hci_acl_handle>
    8836:	4604      	mov	r4, r0
	if (evt) {
    8838:	9801      	ldr	r0, [sp, #4]
    883a:	b108      	cbz	r0, 8840 <hci_driver_send+0x20>
		bt_recv_prio(evt);
    883c:	f7fa fece 	bl	35dc <bt_recv_prio>
	if (!err) {
    8840:	b91c      	cbnz	r4, 884a <hci_driver_send+0x2a>
		net_buf_unref(buf);
    8842:	4628      	mov	r0, r5
    8844:	f00a fd16 	bl	13274 <net_buf_unref>
    8848:	2400      	movs	r4, #0
}
    884a:	4620      	mov	r0, r4
    884c:	b003      	add	sp, #12
    884e:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf);
    8850:	f000 fb02 	bl	8e58 <hci_cmd_handle>
	if (evt) {
    8854:	2800      	cmp	r0, #0
    8856:	d0f4      	beq.n	8842 <hci_driver_send+0x22>
		bt_recv_prio(evt);
    8858:	f7fa fec0 	bl	35dc <bt_recv_prio>
    885c:	e7f1      	b.n	8842 <hci_driver_send+0x22>
		return -EINVAL;
    885e:	f06f 0415 	mvn.w	r4, #21
    8862:	e7f2      	b.n	884a <hci_driver_send+0x2a>

00008864 <recv_thread>:
{
    8864:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    8866:	4d23      	ldr	r5, [pc, #140]	; (88f4 <recv_thread+0x90>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    8868:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    886a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    886e:	4628      	mov	r0, r5
    8870:	f00a ff6b 	bl	1374a <k_queue_get>
		if (node_rx && !buf) {
    8874:	4604      	mov	r4, r0
    8876:	b368      	cbz	r0, 88d4 <recv_thread+0x70>
	s8_t class = hci_get_class(node_rx);
    8878:	f001 fb50 	bl	9f1c <hci_get_class>
	switch (class) {
    887c:	1e03      	subs	r3, r0, #0
    887e:	9401      	str	r4, [sp, #4]
    8880:	db03      	blt.n	888a <recv_thread+0x26>
    8882:	2b02      	cmp	r3, #2
    8884:	dd07      	ble.n	8896 <recv_thread+0x32>
    8886:	2b03      	cmp	r3, #3
    8888:	d027      	beq.n	88da <recv_thread+0x76>
		LL_ASSERT(0);
    888a:	4040      	eors	r0, r0
    888c:	f380 8811 	msr	BASEPRI, r0
    8890:	f04f 0004 	mov.w	r0, #4
    8894:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    8896:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    8898:	bf0e      	itee	eq
    889a:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    889c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    88a0:	2001      	movne	r0, #1
    88a2:	f7fb f823 	bl	38ec <bt_buf_get_rx>
    88a6:	4604      	mov	r4, r0
		if (buf) {
    88a8:	b118      	cbz	r0, 88b2 <recv_thread+0x4e>
			hci_evt_encode(node_rx, buf);
    88aa:	4601      	mov	r1, r0
    88ac:	9801      	ldr	r0, [sp, #4]
    88ae:	f001 f897 	bl	99e0 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    88b2:	9b01      	ldr	r3, [sp, #4]
    88b4:	2100      	movs	r1, #0
    88b6:	88d8      	ldrh	r0, [r3, #6]
    88b8:	f007 fc0c 	bl	100d4 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    88bc:	a802      	add	r0, sp, #8
    88be:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    88c2:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    88c4:	f007 fba4 	bl	10010 <ll_rx_mem_release>
		if (buf) {
    88c8:	b124      	cbz	r4, 88d4 <recv_thread+0x70>
			if (buf->len) {
    88ca:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    88cc:	4620      	mov	r0, r4
			if (buf->len) {
    88ce:	b173      	cbz	r3, 88ee <recv_thread+0x8a>
				bt_recv(buf);
    88d0:	f7fa fa70 	bl	2db4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    88d4:	f00b f8e4 	bl	13aa0 <_impl_k_yield>
    88d8:	e7c7      	b.n	886a <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    88da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    88de:	f7fb f805 	bl	38ec <bt_buf_get_rx>
    88e2:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    88e4:	4601      	mov	r1, r0
    88e6:	9801      	ldr	r0, [sp, #4]
    88e8:	f001 f84e 	bl	9988 <hci_acl_encode>
    88ec:	e7e1      	b.n	88b2 <recv_thread+0x4e>
				net_buf_unref(buf);
    88ee:	f00a fcc1 	bl	13274 <net_buf_unref>
    88f2:	e7ef      	b.n	88d4 <recv_thread+0x70>
    88f4:	2000d09c 	.word	0x2000d09c

000088f8 <prio_recv_thread>:
{
    88f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    88fa:	4d14      	ldr	r5, [pc, #80]	; (894c <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    88fc:	4e14      	ldr	r6, [pc, #80]	; (8950 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    88fe:	f10d 0102 	add.w	r1, sp, #2
    8902:	a801      	add	r0, sp, #4
    8904:	f007 fb4c 	bl	ffa0 <ll_rx_get>
    8908:	4604      	mov	r4, r0
    890a:	b940      	cbnz	r0, 891e <prio_recv_thread+0x26>
		if (node_rx) {
    890c:	9b01      	ldr	r3, [sp, #4]
    890e:	b1bb      	cbz	r3, 8940 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    8910:	f008 f910 	bl	10b34 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    8914:	9901      	ldr	r1, [sp, #4]
    8916:	4630      	mov	r0, r6
    8918:	f00a fef3 	bl	13702 <k_queue_append>
    891c:	e7ef      	b.n	88fe <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    891e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8922:	2001      	movs	r0, #1
    8924:	f7fa ffe2 	bl	38ec <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    8928:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    892a:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    892c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    8930:	f001 fae0 	bl	9ef4 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    8934:	4638      	mov	r0, r7
    8936:	f7fa fe51 	bl	35dc <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    893a:	f00b f8b1 	bl	13aa0 <_impl_k_yield>
    893e:	e7de      	b.n	88fe <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8940:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8944:	4628      	mov	r0, r5
    8946:	f00b f9af 	bl	13ca8 <_impl_k_sem_take>
    894a:	e7d8      	b.n	88fe <prio_recv_thread+0x6>
    894c:	2000d084 	.word	0x2000d084
    8950:	2000d09c 	.word	0x2000d09c

00008954 <hci_driver_open>:
{
    8954:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    8956:	4814      	ldr	r0, [pc, #80]	; (89a8 <hci_driver_open+0x54>)
{
    8958:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    895a:	f008 f98f 	bl	10c7c <ll_init>
	if (err) {
    895e:	4604      	mov	r4, r0
    8960:	b9f8      	cbnz	r0, 89a2 <hci_driver_open+0x4e>
	hci_init(NULL);
    8962:	f001 faf3 	bl	9f4c <hci_init>

    8966:	f06f 0309 	mvn.w	r3, #9
    896a:	9303      	str	r3, [sp, #12]
    896c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    8970:	4b0e      	ldr	r3, [pc, #56]	; (89ac <hci_driver_open+0x58>)
    8972:	490f      	ldr	r1, [pc, #60]	; (89b0 <hci_driver_open+0x5c>)
    8974:	9405      	str	r4, [sp, #20]
    8976:	9404      	str	r4, [sp, #16]
    8978:	9402      	str	r4, [sp, #8]
    897a:	9401      	str	r4, [sp, #4]
    897c:	9400      	str	r4, [sp, #0]
    897e:	480d      	ldr	r0, [pc, #52]	; (89b4 <hci_driver_open+0x60>)
    8980:	f00b fb6e 	bl	14060 <_impl_k_thread_create>
    8984:	f06f 0307 	mvn.w	r3, #7
    8988:	9303      	str	r3, [sp, #12]
    898a:	9405      	str	r4, [sp, #20]
    898c:	9404      	str	r4, [sp, #16]
    898e:	9402      	str	r4, [sp, #8]
    8990:	9401      	str	r4, [sp, #4]
    8992:	9400      	str	r4, [sp, #0]
    8994:	4b08      	ldr	r3, [pc, #32]	; (89b8 <hci_driver_open+0x64>)
    8996:	4909      	ldr	r1, [pc, #36]	; (89bc <hci_driver_open+0x68>)
    8998:	4809      	ldr	r0, [pc, #36]	; (89c0 <hci_driver_open+0x6c>)
    899a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    899e:	f00b fb5f 	bl	14060 <_impl_k_thread_create>
}
    89a2:	4620      	mov	r0, r4
    89a4:	b006      	add	sp, #24
    89a6:	bd10      	pop	{r4, pc}
    89a8:	2000d084 	.word	0x2000d084
    89ac:	000088f9 	.word	0x000088f9
    89b0:	2000b1e8 	.word	0x2000b1e8
    89b4:	200037b0 	.word	0x200037b0
    89b8:	00008865 	.word	0x00008865
    89bc:	2000b3a8 	.word	0x2000b3a8
    89c0:	20003748 	.word	0x20003748

000089c4 <sys_put_le32>:
	dst[1] = val >> 8;
    89c4:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    89c8:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    89ca:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    89cc:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    89ce:	0a00      	lsrs	r0, r0, #8
    89d0:	704b      	strb	r3, [r1, #1]
    89d2:	70c8      	strb	r0, [r1, #3]
    89d4:	4770      	bx	lr

000089d6 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    89d6:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    89d8:	3008      	adds	r0, #8
{
    89da:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    89dc:	2102      	movs	r1, #2
{
    89de:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    89e0:	f00a fc7a 	bl	132d8 <net_buf_simple_add>
	hdr->evt = evt;
    89e4:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    89e6:	7044      	strb	r4, [r0, #1]
    89e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000089ec <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    89ec:	b538      	push	{r3, r4, r5, lr}
    89ee:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    89f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    89f4:	f7fa ff8a 	bl	390c <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    89f8:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    89fa:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    89fc:	210f      	movs	r1, #15
    89fe:	f7ff ffea 	bl	89d6 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    8a02:	2104      	movs	r1, #4
    8a04:	f104 0008 	add.w	r0, r4, #8
    8a08:	f00a fc66 	bl	132d8 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    8a0c:	2301      	movs	r3, #1
    8a0e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8a10:	4b02      	ldr	r3, [pc, #8]	; (8a1c <cmd_status+0x30>)
	cs->status = status;
    8a12:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    8a14:	881b      	ldrh	r3, [r3, #0]
    8a16:	8043      	strh	r3, [r0, #2]

	return buf;
}
    8a18:	4620      	mov	r0, r4
    8a1a:	bd38      	pop	{r3, r4, r5, pc}
    8a1c:	200008cc 	.word	0x200008cc

00008a20 <cmd_complete>:
{
    8a20:	b538      	push	{r3, r4, r5, lr}
    8a22:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    8a28:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8a2a:	f7fa ff6f 	bl	390c <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8a2e:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    8a30:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    8a32:	b2d2      	uxtb	r2, r2
    8a34:	210e      	movs	r1, #14
    8a36:	f7ff ffce 	bl	89d6 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    8a3a:	6820      	ldr	r0, [r4, #0]
    8a3c:	2103      	movs	r1, #3
    8a3e:	3008      	adds	r0, #8
    8a40:	f00a fc4a 	bl	132d8 <net_buf_simple_add>
	cc->ncmd = 1;
    8a44:	2301      	movs	r3, #1
    8a46:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    8a48:	4b05      	ldr	r3, [pc, #20]	; (8a60 <cmd_complete+0x40>)
    8a4a:	881b      	ldrh	r3, [r3, #0]
    8a4c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    8a50:	6820      	ldr	r0, [r4, #0]
    8a52:	4629      	mov	r1, r5
    8a54:	3008      	adds	r0, #8
}
    8a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    8a5a:	f00a bc3d 	b.w	132d8 <net_buf_simple_add>
    8a5e:	bf00      	nop
    8a60:	200008cc 	.word	0x200008cc

00008a64 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    8a64:	b570      	push	{r4, r5, r6, lr}
    8a66:	4604      	mov	r4, r0
    8a68:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8a6a:	3201      	adds	r2, #1
{
    8a6c:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    8a6e:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    8a70:	b2d2      	uxtb	r2, r2
    8a72:	213e      	movs	r1, #62	; 0x3e
    8a74:	f7ff ffaf 	bl	89d6 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    8a78:	2101      	movs	r1, #1
    8a7a:	4620      	mov	r0, r4
    8a7c:	f00a fc2c 	bl	132d8 <net_buf_simple_add>
	me->subevent = subevt;
    8a80:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    8a82:	4629      	mov	r1, r5
    8a84:	4620      	mov	r0, r4
}
    8a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    8a8a:	f00a bc25 	b.w	132d8 <net_buf_simple_add>
	...

00008a90 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    8a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8a94:	2301      	movs	r3, #1
    8a96:	f88d 3001 	strb.w	r3, [sp, #1]
    8a9a:	2303      	movs	r3, #3
    8a9c:	f88d 3002 	strb.w	r3, [sp, #2]
    8aa0:	23ff      	movs	r3, #255	; 0xff
    8aa2:	f88d 3003 	strb.w	r3, [sp, #3]
    8aa6:	f88d 3005 	strb.w	r3, [sp, #5]
    8aaa:	2302      	movs	r3, #2
    8aac:	f88d 3006 	strb.w	r3, [sp, #6]
	u8_t direct;
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */
	s8_t *prssi;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8ab0:	7843      	ldrb	r3, [r0, #1]
{
    8ab2:	460d      	mov	r5, r1
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8ab4:	442b      	add	r3, r5
{
    8ab6:	4617      	mov	r7, r2
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8ab8:	7ade      	ldrb	r6, [r3, #11]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
	/* Update current RPA */
	if (adv->tx_addr) {
    8aba:	7803      	ldrb	r3, [r0, #0]
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8abc:	2100      	movs	r1, #0
    8abe:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    8ac0:	065b      	lsls	r3, r3, #25
{
    8ac2:	4604      	mov	r4, r0
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    8ac4:	f88d 1000 	strb.w	r1, [sp]
    8ac8:	f88d 2004 	strb.w	r2, [sp, #4]
	if (adv->tx_addr) {
    8acc:	d504      	bpl.n	8ad8 <le_advertising_report+0x48>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    8ace:	1c83      	adds	r3, r0, #2
    8ad0:	4632      	mov	r2, r6
    8ad2:	4608      	mov	r0, r1
    8ad4:	f009 fbf2 	bl	122bc <ll_rl_crpa_set>
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    8ad8:	4b50      	ldr	r3, [pc, #320]	; (8c1c <le_advertising_report+0x18c>)
    8ada:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ade:	2200      	movs	r2, #0
    8ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8ae4:	4313      	orrs	r3, r2
    8ae6:	d054      	beq.n	8b92 <le_advertising_report+0x102>
		return;
	}

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    8ae8:	7862      	ldrb	r2, [r4, #1]
    8aea:	494d      	ldr	r1, [pc, #308]	; (8c20 <le_advertising_report+0x190>)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8aec:	18ab      	adds	r3, r5, r2

	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    8aee:	e9d1 0100 	ldrd	r0, r1, [r1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8af2:	f893 e00c 	ldrb.w	lr, [r3, #12]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    8af6:	f1be 0f00 	cmp.w	lr, #0
    8afa:	d125      	bne.n	8b48 <le_advertising_report+0xb8>
    8afc:	f000 0002 	and.w	r0, r0, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    8b00:	2100      	movs	r1, #0
    8b02:	4301      	orrs	r1, r0
    8b04:	d045      	beq.n	8b92 <le_advertising_report+0x102>
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    8b06:	f894 9000 	ldrb.w	r9, [r4]
	} else {
		data_len = 0;
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8b0a:	f893 b00a 	ldrb.w	fp, [r3, #10]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    8b0e:	f009 090f 	and.w	r9, r9, #15
    8b12:	f1b9 0f01 	cmp.w	r9, #1
		data_len = (adv->len - BDADDR_SIZE);
    8b16:	bf18      	it	ne
    8b18:	3a06      	subne	r2, #6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8b1a:	f1cb 0b00 	rsb	fp, fp, #0
		data_len = (adv->len - BDADDR_SIZE);
    8b1e:	bf14      	ite	ne
    8b20:	fa5f f882 	uxtbne.w	r8, r2
		data_len = 0;
    8b24:	f04f 0800 	moveq.w	r8, #0
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8b28:	fa4f fb8b 	sxtb.w	fp, fp
    8b2c:	f104 0a08 	add.w	sl, r4, #8
		  offsetof(struct pdu_adv, payload) + adv->len];

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	if (direct) {
    8b30:	f1be 0f00 	cmp.w	lr, #0
    8b34:	d03a      	beq.n	8bac <le_advertising_report+0x11c>
		struct bt_hci_evt_le_direct_adv_report *drp;
		struct bt_hci_evt_le_direct_adv_info *dir_info;

		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    8b36:	f1b9 0f01 	cmp.w	r9, #1
    8b3a:	d008      	beq.n	8b4e <le_advertising_report+0xbe>
    8b3c:	4040      	eors	r0, r0
    8b3e:	f380 8811 	msr	BASEPRI, r0
    8b42:	f04f 0004 	mov.w	r0, #4
    8b46:	df02      	svc	2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    8b48:	f000 000b 	and.w	r0, r0, #11
    8b4c:	e7d8      	b.n	8b00 <le_advertising_report+0x70>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    8b4e:	2211      	movs	r2, #17
    8b50:	210b      	movs	r1, #11
    8b52:	4638      	mov	r0, r7
    8b54:	f7ff ff86 	bl	8a64 <meta_evt>
			       sizeof(*drp) + sizeof(*dir_info));

		drp->num_reports = 1;
    8b58:	f880 9000 	strb.w	r9, [r0]
		dir_info = (void *)(((u8_t *)drp) + sizeof(*drp));

		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    8b5c:	f880 9001 	strb.w	r9, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    8b60:	4605      	mov	r5, r0

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (rl_idx < ll_rl_size_get()) {
    8b62:	f009 fa81 	bl	12068 <ll_rl_size_get>
    8b66:	4286      	cmp	r6, r0
    8b68:	f105 0003 	add.w	r0, r5, #3
    8b6c:	d214      	bcs.n	8b98 <le_advertising_report+0x108>
			/* Store identity address */
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    8b6e:	4602      	mov	r2, r0
    8b70:	1ca9      	adds	r1, r5, #2
    8b72:	4630      	mov	r0, r6
    8b74:	f009 f8a2 	bl	11cbc <ll_rl_id_addr_get>
					  &dir_info->addr.a.val[0]);
			/* Mark it as identity address from RPA (0x02, 0x03) */
			dir_info->addr.type += 2;
    8b78:	78ab      	ldrb	r3, [r5, #2]
    8b7a:	3302      	adds	r3, #2
    8b7c:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
			       &adv->direct_ind.adv_addr[0],
			       sizeof(bt_addr_t));
		}

		dir_info->dir_addr.type = 0x1;
    8b7e:	2301      	movs	r3, #1
    8b80:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    8b82:	2206      	movs	r2, #6
    8b84:	4651      	mov	r1, sl
    8b86:	f105 000a 	add.w	r0, r5, #10
    8b8a:	f7f7 fd29 	bl	5e0 <memcpy>
		       &adv->direct_ind.tgt_addr[0], sizeof(bt_addr_t));

		dir_info->rssi = rssi;
    8b8e:	f885 b010 	strb.w	fp, [r5, #16]
	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
}
    8b92:	b003      	add	sp, #12
    8b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    8b98:	4621      	mov	r1, r4
			memcpy(&dir_info->addr.a.val[0],
    8b9a:	2206      	movs	r2, #6
			dir_info->addr.type = adv->tx_addr;
    8b9c:	f811 3b02 	ldrb.w	r3, [r1], #2
    8ba0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8ba4:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    8ba6:	f7f7 fd1b 	bl	5e0 <memcpy>
    8baa:	e7e8      	b.n	8b7e <le_advertising_report+0xee>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    8bac:	f108 020b 	add.w	r2, r8, #11
    8bb0:	b2d2      	uxtb	r2, r2
    8bb2:	2102      	movs	r1, #2
    8bb4:	4638      	mov	r0, r7
    8bb6:	f7ff ff55 	bl	8a64 <meta_evt>
	sep->num_reports = 1;
    8bba:	2301      	movs	r3, #1
    8bbc:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    8bbe:	7823      	ldrb	r3, [r4, #0]
    8bc0:	aa02      	add	r2, sp, #8
    8bc2:	f003 030f 	and.w	r3, r3, #15
    8bc6:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    8bc8:	4606      	mov	r6, r0
	adv_info->evt_type = c_adv_type[adv->type];
    8bca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    8bce:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8bd0:	7863      	ldrb	r3, [r4, #1]
    8bd2:	441d      	add	r5, r3
    8bd4:	7aed      	ldrb	r5, [r5, #11]
	if (rl_idx < ll_rl_size_get()) {
    8bd6:	f009 fa47 	bl	12068 <ll_rl_size_get>
    8bda:	4285      	cmp	r5, r0
    8bdc:	f106 0003 	add.w	r0, r6, #3
    8be0:	d212      	bcs.n	8c08 <le_advertising_report+0x178>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    8be2:	4602      	mov	r2, r0
    8be4:	1cb1      	adds	r1, r6, #2
    8be6:	4628      	mov	r0, r5
    8be8:	f009 f868 	bl	11cbc <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    8bec:	78b3      	ldrb	r3, [r6, #2]
    8bee:	3302      	adds	r3, #2
    8bf0:	70b3      	strb	r3, [r6, #2]
	adv_info->length = data_len;
    8bf2:	f886 8009 	strb.w	r8, [r6, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    8bf6:	360a      	adds	r6, #10
    8bf8:	4642      	mov	r2, r8
    8bfa:	4651      	mov	r1, sl
    8bfc:	4630      	mov	r0, r6
    8bfe:	f7f7 fcef 	bl	5e0 <memcpy>
	*prssi = rssi;
    8c02:	f806 b008 	strb.w	fp, [r6, r8]
    8c06:	e7c4      	b.n	8b92 <le_advertising_report+0x102>
		adv_info->addr.type = adv->tx_addr;
    8c08:	4621      	mov	r1, r4
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    8c0a:	2206      	movs	r2, #6
		adv_info->addr.type = adv->tx_addr;
    8c0c:	f811 3b02 	ldrb.w	r3, [r1], #2
    8c10:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8c14:	70b3      	strb	r3, [r6, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    8c16:	f7f7 fce3 	bl	5e0 <memcpy>
    8c1a:	e7ea      	b.n	8bf2 <le_advertising_report+0x162>
    8c1c:	2000ce80 	.word	0x2000ce80
    8c20:	2000ce88 	.word	0x2000ce88

00008c24 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8c24:	4b0e      	ldr	r3, [pc, #56]	; (8c60 <encrypt_change+0x3c>)
{
    8c26:	b570      	push	{r4, r5, r6, lr}
    8c28:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c2e:	2300      	movs	r3, #0
    8c30:	f002 0280 	and.w	r2, r2, #128	; 0x80
    8c34:	4313      	orrs	r3, r2
{
    8c36:	4604      	mov	r4, r0
    8c38:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    8c3a:	d010      	beq.n	8c5e <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    8c3c:	2204      	movs	r2, #4
    8c3e:	2108      	movs	r1, #8
    8c40:	4628      	mov	r0, r5
    8c42:	f7ff fec8 	bl	89d6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    8c46:	2104      	movs	r1, #4
    8c48:	f105 0008 	add.w	r0, r5, #8
    8c4c:	f00a fb44 	bl	132d8 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    8c50:	fab4 f384 	clz	r3, r4
    8c54:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    8c56:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    8c58:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    8c5c:	70c3      	strb	r3, [r0, #3]
    8c5e:	bd70      	pop	{r4, r5, r6, pc}
    8c60:	2000ce80 	.word	0x2000ce80

00008c64 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    8c64:	b570      	push	{r4, r5, r6, lr}
    8c66:	4604      	mov	r4, r0
    8c68:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8c6a:	4b13      	ldr	r3, [pc, #76]	; (8cb8 <le_remote_feat_complete+0x54>)
{
    8c6c:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c72:	2200      	movs	r2, #0
    8c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8c78:	4313      	orrs	r3, r2
{
    8c7a:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8c7c:	d01b      	beq.n	8cb6 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    8c7e:	4b0f      	ldr	r3, [pc, #60]	; (8cbc <le_remote_feat_complete+0x58>)
    8c80:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c84:	2300      	movs	r3, #0
    8c86:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8c8a:	4313      	orrs	r3, r2
    8c8c:	d013      	beq.n	8cb6 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    8c8e:	220b      	movs	r2, #11
    8c90:	2104      	movs	r1, #4
    8c92:	f7ff fee7 	bl	8a64 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    8c96:	2208      	movs	r2, #8
	sep->status = status;
    8c98:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    8c9a:	f8a0 6001 	strh.w	r6, [r0, #1]
    8c9e:	3003      	adds	r0, #3
	if (!status) {
    8ca0:	b924      	cbnz	r4, 8cac <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    8ca2:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    8ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    8ca8:	f7f7 bc9a 	b.w	5e0 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8cac:	2100      	movs	r1, #0
}
    8cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    8cb2:	f7f7 bcc1 	b.w	638 <memset>
    8cb6:	bd70      	pop	{r4, r5, r6, pc}
    8cb8:	2000ce80 	.word	0x2000ce80
    8cbc:	2000ce88 	.word	0x2000ce88

00008cc0 <bt_addr_le_to_str.isra.70>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    8cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    8cc2:	2803      	cmp	r0, #3
    8cc4:	d807      	bhi.n	8cd6 <bt_addr_le_to_str.isra.70+0x16>
    8cc6:	e8df f000 	tbb	[pc, r0]
    8cca:	0a02      	.short	0x0a02
    8ccc:	0e0c      	.short	0x0e0c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    8cce:	4907      	ldr	r1, [pc, #28]	; (8cec <bt_addr_le_to_str.isra.70+0x2c>)
		break;
	case BT_ADDR_LE_PUBLIC_ID:
		strcpy(type, "public id");
		break;
	case BT_ADDR_LE_RANDOM_ID:
		strcpy(type, "random id");
    8cd0:	a801      	add	r0, sp, #4
    8cd2:	f7f7 fc51 	bl	578 <strcpy>
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    8cd6:	2000      	movs	r0, #0
    8cd8:	b005      	add	sp, #20
    8cda:	f85d fb04 	ldr.w	pc, [sp], #4
		strcpy(type, "random");
    8cde:	4904      	ldr	r1, [pc, #16]	; (8cf0 <bt_addr_le_to_str.isra.70+0x30>)
    8ce0:	e7f6      	b.n	8cd0 <bt_addr_le_to_str.isra.70+0x10>
		strcpy(type, "public id");
    8ce2:	4904      	ldr	r1, [pc, #16]	; (8cf4 <bt_addr_le_to_str.isra.70+0x34>)
    8ce4:	e7f4      	b.n	8cd0 <bt_addr_le_to_str.isra.70+0x10>
		strcpy(type, "random id");
    8ce6:	4904      	ldr	r1, [pc, #16]	; (8cf8 <bt_addr_le_to_str.isra.70+0x38>)
    8ce8:	e7f2      	b.n	8cd0 <bt_addr_le_to_str.isra.70+0x10>
    8cea:	bf00      	nop
    8cec:	00014914 	.word	0x00014914
    8cf0:	0001491b 	.word	0x0001491b
    8cf4:	00014922 	.word	0x00014922
    8cf8:	0001492c 	.word	0x0001492c

00008cfc <le_adv_ext_report.isra.72>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8d00:	7803      	ldrb	r3, [r0, #0]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8d02:	4615      	mov	r5, r2
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8d04:	f003 020f 	and.w	r2, r3, #15
    8d08:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    8d0a:	b085      	sub	sp, #20
    8d0c:	4606      	mov	r6, r0
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8d0e:	f040 808d 	bne.w	8e2c <le_adv_ext_report.isra.72+0x130>
		  offsetof(struct pdu_adv, payload) + adv->len];
    8d12:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    8d14:	2a00      	cmp	r2, #0
    8d16:	f000 8089 	beq.w	8e2c <le_adv_ext_report.isra.72+0x130>
		if (!p->ext_hdr_len) {
    8d1a:	7880      	ldrb	r0, [r0, #2]
    8d1c:	0680      	lsls	r0, r0, #26
    8d1e:	d075      	beq.n	8e0c <le_adv_ext_report.isra.72+0x110>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8d20:	4411      	add	r1, r2
		ptr = (u8_t *)h + sizeof(*h);
    8d22:	1d34      	adds	r4, r6, #4
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8d24:	7a8a      	ldrb	r2, [r1, #10]
    8d26:	9200      	str	r2, [sp, #0]
		if (h->adv_addr) {
    8d28:	78f2      	ldrb	r2, [r6, #3]
    8d2a:	07d7      	lsls	r7, r2, #31
    8d2c:	d50f      	bpl.n	8d4e <le_adv_ext_report.isra.72+0x52>
			addr.type = adv->tx_addr;
    8d2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8d32:	4621      	mov	r1, r4
    8d34:	2206      	movs	r2, #6
    8d36:	f10d 0009 	add.w	r0, sp, #9
			addr.type = adv->tx_addr;
    8d3a:	f88d 3008 	strb.w	r3, [sp, #8]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    8d3e:	f7f7 fc4f 	bl	5e0 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8d42:	f89d 0008 	ldrb.w	r0, [sp, #8]
			ptr += BDADDR_SIZE;
    8d46:	f106 040a 	add.w	r4, r6, #10
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    8d4a:	f7ff ffb9 	bl	8cc0 <bt_addr_le_to_str.isra.70>
		if(h->tgt_addr){
    8d4e:	78f2      	ldrb	r2, [r6, #3]
    8d50:	0790      	lsls	r0, r2, #30
			ptr += BDADDR_SIZE;
    8d52:	bf48      	it	mi
    8d54:	3406      	addmi	r4, #6
		if(h->adi){
    8d56:	f012 0908 	ands.w	r9, r2, #8
    8d5a:	d05e      	beq.n	8e1a <le_adv_ext_report.isra.72+0x11e>
			sid_for_info = adi_ptr->sid;
    8d5c:	7867      	ldrb	r7, [r4, #1]
    8d5e:	ea4f 1a17 	mov.w	sl, r7, lsr #4
			if(adi_ptr->sid == 0x04){
    8d62:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    8d66:	2f40      	cmp	r7, #64	; 0x40
    8d68:	d053      	beq.n	8e12 <le_adv_ext_report.isra.72+0x116>
			}else if(adi_ptr->sid == 0x02){
    8d6a:	f1a7 0120 	sub.w	r1, r7, #32
    8d6e:	424f      	negs	r7, r1
    8d70:	414f      	adcs	r7, r1
	bool aux_adi_present = false;
    8d72:	f04f 0900 	mov.w	r9, #0
			ptr += sizeof(*adi_ptr);
    8d76:	46a3      	mov	fp, r4
    8d78:	3402      	adds	r4, #2
		if(h->aux_ptr){
    8d7a:	f012 0310 	ands.w	r3, r2, #16
			aux_ptr_present = true;
    8d7e:	bf1c      	itt	ne
    8d80:	2301      	movne	r3, #1
			ptr += sizeof(*ap);
    8d82:	3403      	addne	r4, #3
		if (h->tx_pwr) {
    8d84:	0652      	lsls	r2, r2, #25
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    8d86:	78b2      	ldrb	r2, [r6, #2]
    8d88:	9301      	str	r3, [sp, #4]
    8d8a:	f3c2 0105 	ubfx	r1, r2, #0, #6
    8d8e:	7872      	ldrb	r2, [r6, #1]
    8d90:	eba2 0201 	sub.w	r2, r2, r1
    8d94:	b2d2      	uxtb	r2, r2
    8d96:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    8d9a:	f102 0218 	add.w	r2, r2, #24
    8d9e:	b2d2      	uxtb	r2, r2
    8da0:	4628      	mov	r0, r5
    8da2:	f04f 010d 	mov.w	r1, #13
			ptr++;
    8da6:	bf48      	it	mi
    8da8:	3401      	addmi	r4, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    8daa:	f7ff fe5b 	bl	8a64 <meta_evt>
		sep->num_reports = 1;
    8dae:	2201      	movs	r2, #1
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    8db0:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    8db4:	4605      	mov	r5, r0
		sep->num_reports = 1;
    8db6:	7002      	strb	r2, [r0, #0]
		if( aux_adi_present && aux_ptr_present){ //aux packet
    8db8:	9b01      	ldr	r3, [sp, #4]
    8dba:	f1b9 0f00 	cmp.w	r9, #0
    8dbe:	d03f      	beq.n	8e40 <le_adv_ext_report.isra.72+0x144>
    8dc0:	b3cb      	cbz	r3, 8e36 <le_adv_ext_report.isra.72+0x13a>
			adv_info->frag = 0x01;	//First fragment - more packets to come;
    8dc2:	7082      	strb	r2, [r0, #2]
		if(h->adv_addr){
    8dc4:	78f3      	ldrb	r3, [r6, #3]
    8dc6:	07db      	lsls	r3, r3, #31
    8dc8:	d508      	bpl.n	8ddc <le_adv_ext_report.isra.72+0xe0>
			adv_info->addr.type = addr.type;
    8dca:	f89d 3008 	ldrb.w	r3, [sp, #8]
    8dce:	70eb      	strb	r3, [r5, #3]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    8dd0:	2206      	movs	r2, #6
    8dd2:	f10d 0109 	add.w	r1, sp, #9
    8dd6:	1d28      	adds	r0, r5, #4
    8dd8:	f7f7 fc02 	bl	5e0 <memcpy>
		adv_info->evt_type = 0x07;
    8ddc:	2307      	movs	r3, #7
    8dde:	706b      	strb	r3, [r5, #1]
		adv_info->sid = sid_for_info;
    8de0:	f885 a00c 	strb.w	sl, [r5, #12]
		if(adi_ptr->sid == 0x04){
    8de4:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adv_info->length = data_len;
    8de8:	f885 8018 	strb.w	r8, [r5, #24]
		if(adi_ptr->sid == 0x04){
    8dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8df0:	f105 0619 	add.w	r6, r5, #25
    8df4:	2b40      	cmp	r3, #64	; 0x40
			memcpy(&adv_info->data[0], ptr, data_len);
    8df6:	4642      	mov	r2, r8
    8df8:	4621      	mov	r1, r4
    8dfa:	4630      	mov	r0, r6
		if(adi_ptr->sid == 0x04){
    8dfc:	d10f      	bne.n	8e1e <le_adv_ext_report.isra.72+0x122>
			memcpy(&adv_info->data[0], ptr, data_len);
    8dfe:	f7f7 fbef 	bl	5e0 <memcpy>
			memcpy(copy_data, ptr, data_len);
    8e02:	4642      	mov	r2, r8
    8e04:	4621      	mov	r1, r4
    8e06:	4811      	ldr	r0, [pc, #68]	; (8e4c <le_adv_ext_report.isra.72+0x150>)
    8e08:	f7f7 fbea 	bl	5e0 <memcpy>
}
    8e0c:	b005      	add	sp, #20
    8e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aux_adi_present = true;				// chain pdu's
    8e12:	f04f 0901 	mov.w	r9, #1
	bool adi_present = false;		// to identify aux packet and fragment it
    8e16:	2700      	movs	r7, #0
    8e18:	e7ad      	b.n	8d76 <le_adv_ext_report.isra.72+0x7a>
    8e1a:	464f      	mov	r7, r9
    8e1c:	e7ad      	b.n	8d7a <le_adv_ext_report.isra.72+0x7e>
			memcpy(&adv_info->data[0], ptr, data_len);
    8e1e:	f7f7 fbdf 	bl	5e0 <memcpy>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    8e22:	9b00      	ldr	r3, [sp, #0]
    8e24:	425b      	negs	r3, r3
			*prssi = rssi;
    8e26:	f806 3008 	strb.w	r3, [r6, r8]
    8e2a:	e7ef      	b.n	8e0c <le_adv_ext_report.isra.72+0x110>
		le_advertising_report(pdu_data, b, buf);
    8e2c:	462a      	mov	r2, r5
    8e2e:	4630      	mov	r0, r6
    8e30:	f7ff fe2e 	bl	8a90 <le_advertising_report>
    8e34:	e7ea      	b.n	8e0c <le_adv_ext_report.isra.72+0x110>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    8e36:	2f00      	cmp	r7, #0
    8e38:	d1c4      	bne.n	8dc4 <le_adv_ext_report.isra.72+0xc8>
			adv_info->frag = 0x02; //last paacket of the data or complete packet
    8e3a:	2302      	movs	r3, #2
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    8e3c:	70ab      	strb	r3, [r5, #2]
    8e3e:	e7c1      	b.n	8dc4 <le_adv_ext_report.isra.72+0xc8>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    8e40:	2f00      	cmp	r7, #0
    8e42:	d0bf      	beq.n	8dc4 <le_adv_ext_report.isra.72+0xc8>
		}else if(adi_present && aux_ptr_present){
    8e44:	2b00      	cmp	r3, #0
    8e46:	d0bd      	beq.n	8dc4 <le_adv_ext_report.isra.72+0xc8>
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    8e48:	2303      	movs	r3, #3
    8e4a:	e7f7      	b.n	8e3c <le_adv_ext_report.isra.72+0x140>
    8e4c:	20003818 	.word	0x20003818

00008e50 <sys_get_le64>:
{
    8e50:	4603      	mov	r3, r0
}
    8e52:	6800      	ldr	r0, [r0, #0]
    8e54:	6859      	ldr	r1, [r3, #4]
    8e56:	4770      	bx	lr

00008e58 <hci_cmd_handle>:
{
    8e58:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    8e5a:	8981      	ldrh	r1, [r0, #12]
{
    8e5c:	b097      	sub	sp, #92	; 0x5c
	struct net_buf *evt = NULL;
    8e5e:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    8e60:	2902      	cmp	r1, #2
{
    8e62:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    8e64:	950b      	str	r5, [sp, #44]	; 0x2c
	if (cmd->len < sizeof(*chdr)) {
    8e66:	d802      	bhi.n	8e6e <hci_cmd_handle+0x16>
		return NULL;
    8e68:	2000      	movs	r0, #0
}
    8e6a:	b017      	add	sp, #92	; 0x5c
    8e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    8e6e:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8e70:	4ebf      	ldr	r6, [pc, #764]	; (9170 <hci_cmd_handle+0x318>)
    8e72:	781a      	ldrb	r2, [r3, #0]
    8e74:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    8e76:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8e78:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    8e7c:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    8e7e:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    8e80:	d8f2      	bhi.n	8e68 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    8e82:	2103      	movs	r1, #3
    8e84:	f104 0008 	add.w	r0, r4, #8
    8e88:	f00a fa45 	bl	13316 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    8e8c:	8833      	ldrh	r3, [r6, #0]
    8e8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    8e92:	0a9b      	lsrs	r3, r3, #10
    8e94:	2b04      	cmp	r3, #4
    8e96:	f000 80b9 	beq.w	900c <hci_cmd_handle+0x1b4>
    8e9a:	d809      	bhi.n	8eb0 <hci_cmd_handle+0x58>
    8e9c:	2b01      	cmp	r3, #1
    8e9e:	d027      	beq.n	8ef0 <hci_cmd_handle+0x98>
    8ea0:	2b03      	cmp	r3, #3
    8ea2:	d03c      	beq.n	8f1e <hci_cmd_handle+0xc6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    8ea4:	2101      	movs	r1, #1
    8ea6:	a80b      	add	r0, sp, #44	; 0x2c
    8ea8:	f7ff fdba 	bl	8a20 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    8eac:	2301      	movs	r3, #1
    8eae:	e2d4      	b.n	945a <hci_cmd_handle+0x602>
	switch (BT_OGF(_opcode)) {
    8eb0:	2b08      	cmp	r3, #8
    8eb2:	f000 8165 	beq.w	9180 <hci_cmd_handle+0x328>
    8eb6:	2b3f      	cmp	r3, #63	; 0x3f
    8eb8:	d1f4      	bne.n	8ea4 <hci_cmd_handle+0x4c>
	switch (ocf) {
    8eba:	3a01      	subs	r2, #1
    8ebc:	2a09      	cmp	r2, #9
    8ebe:	d8f1      	bhi.n	8ea4 <hci_cmd_handle+0x4c>
    8ec0:	a301      	add	r3, pc, #4	; (adr r3, 8ec8 <hci_cmd_handle+0x70>)
    8ec2:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    8ec6:	bf00      	nop
    8ec8:	000096e5 	.word	0x000096e5
    8ecc:	00009713 	.word	0x00009713
    8ed0:	0000973d 	.word	0x0000973d
    8ed4:	00008ea5 	.word	0x00008ea5
    8ed8:	00008ea5 	.word	0x00008ea5
    8edc:	00009783 	.word	0x00009783
    8ee0:	00008ea5 	.word	0x00008ea5
    8ee4:	00009755 	.word	0x00009755
    8ee8:	0000978f 	.word	0x0000978f
    8eec:	000097fd 	.word	0x000097fd
	switch (ocf) {
    8ef0:	2a06      	cmp	r2, #6
    8ef2:	d006      	beq.n	8f02 <hci_cmd_handle+0xaa>
    8ef4:	2a1d      	cmp	r2, #29
    8ef6:	d1d5      	bne.n	8ea4 <hci_cmd_handle+0x4c>
	handle = sys_le16_to_cpu(cmd->handle);
    8ef8:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    8efa:	8818      	ldrh	r0, [r3, #0]
    8efc:	f006 ff64 	bl	fdc8 <ll_version_ind_send>
    8f00:	e004      	b.n	8f0c <hci_cmd_handle+0xb4>
    8f02:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    8f04:	7899      	ldrb	r1, [r3, #2]
    8f06:	8818      	ldrh	r0, [r3, #0]
    8f08:	f006 ff72 	bl	fdf0 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    8f0c:	2800      	cmp	r0, #0
    8f0e:	bf14      	ite	ne
    8f10:	200c      	movne	r0, #12
    8f12:	2000      	moveq	r0, #0
    8f14:	f7ff fd6a 	bl	89ec <cmd_status>
    8f18:	900b      	str	r0, [sp, #44]	; 0x2c
	return evt;
    8f1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f1c:	e7a5      	b.n	8e6a <hci_cmd_handle+0x12>
	switch (ocf) {
    8f1e:	2a2d      	cmp	r2, #45	; 0x2d
    8f20:	d036      	beq.n	8f90 <hci_cmd_handle+0x138>
    8f22:	d81c      	bhi.n	8f5e <hci_cmd_handle+0x106>
    8f24:	2a01      	cmp	r2, #1
    8f26:	d027      	beq.n	8f78 <hci_cmd_handle+0x120>
    8f28:	2a03      	cmp	r2, #3
    8f2a:	d1bb      	bne.n	8ea4 <hci_cmd_handle+0x4c>
	event_mask = DEFAULT_EVENT_MASK;
    8f2c:	4b91      	ldr	r3, [pc, #580]	; (9174 <hci_cmd_handle+0x31c>)
    8f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8f32:	f641 71ff 	movw	r1, #8191	; 0x1fff
    8f36:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    8f3a:	4b8f      	ldr	r3, [pc, #572]	; (9178 <hci_cmd_handle+0x320>)
    8f3c:	2000      	movs	r0, #0
    8f3e:	2100      	movs	r1, #0
    8f40:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    8f44:	4b8d      	ldr	r3, [pc, #564]	; (917c <hci_cmd_handle+0x324>)
    8f46:	201f      	movs	r0, #31
    8f48:	2100      	movs	r1, #0
    8f4a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    8f4e:	f006 fdbd 	bl	facc <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f52:	2101      	movs	r1, #1
    8f54:	a80b      	add	r0, sp, #44	; 0x2c
    8f56:	f7ff fd63 	bl	8a20 <cmd_complete>
	ccst->status = 0x00;
    8f5a:	2300      	movs	r3, #0
    8f5c:	e27d      	b.n	945a <hci_cmd_handle+0x602>
	switch (ocf) {
    8f5e:	2a7b      	cmp	r2, #123	; 0x7b
    8f60:	d02c      	beq.n	8fbc <hci_cmd_handle+0x164>
    8f62:	2a7c      	cmp	r2, #124	; 0x7c
    8f64:	d041      	beq.n	8fea <hci_cmd_handle+0x192>
    8f66:	2a63      	cmp	r2, #99	; 0x63
    8f68:	d19c      	bne.n	8ea4 <hci_cmd_handle+0x4c>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    8f6a:	68a0      	ldr	r0, [r4, #8]
    8f6c:	f7ff ff70 	bl	8e50 <sys_get_le64>
    8f70:	4b81      	ldr	r3, [pc, #516]	; (9178 <hci_cmd_handle+0x320>)
	le_event_mask = sys_get_le64(cmd->events);
    8f72:	e9c3 0100 	strd	r0, r1, [r3]
    8f76:	e7ec      	b.n	8f52 <hci_cmd_handle+0xfa>
	event_mask = sys_get_le64(cmd->events);
    8f78:	68a0      	ldr	r0, [r4, #8]
    8f7a:	f7ff ff69 	bl	8e50 <sys_get_le64>
    8f7e:	4b7d      	ldr	r3, [pc, #500]	; (9174 <hci_cmd_handle+0x31c>)
    8f80:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    8f84:	4611      	mov	r1, r2
    8f86:	a80b      	add	r0, sp, #44	; 0x2c
    8f88:	f7ff fd4a 	bl	8a20 <cmd_complete>
	ccst->status = 0x00;
    8f8c:	7005      	strb	r5, [r0, #0]
    8f8e:	e7c4      	b.n	8f1a <hci_cmd_handle+0xc2>
    8f90:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    8f92:	2104      	movs	r1, #4
    8f94:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    8f96:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    8f98:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    8f9a:	f7ff fd41 	bl	8a20 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    8f9e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    8fa0:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    8fa2:	1cc2      	adds	r2, r0, #3
    8fa4:	4639      	mov	r1, r7
    8fa6:	4630      	mov	r0, r6
    8fa8:	f006 ff36 	bl	fe18 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    8fac:	2800      	cmp	r0, #0
    8fae:	bf0c      	ite	eq
    8fb0:	2300      	moveq	r3, #0
    8fb2:	2302      	movne	r3, #2
    8fb4:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    8fb6:	f8a4 5001 	strh.w	r5, [r4, #1]
    8fba:	e7ae      	b.n	8f1a <hci_cmd_handle+0xc2>
	handle = sys_le16_to_cpu(cmd->handle);
    8fbc:	68a3      	ldr	r3, [r4, #8]
    8fbe:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    8fc0:	a90c      	add	r1, sp, #48	; 0x30
    8fc2:	b2a0      	uxth	r0, r4
    8fc4:	f006 ff32 	bl	fe2c <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    8fc8:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    8fca:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8fcc:	a80b      	add	r0, sp, #44	; 0x2c
    8fce:	f7ff fd27 	bl	8a20 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    8fd2:	2d00      	cmp	r5, #0
    8fd4:	bf0c      	ite	eq
    8fd6:	2300      	moveq	r3, #0
    8fd8:	230c      	movne	r3, #12
    8fda:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    8fdc:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    8fe0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8fe4:	f8a0 3003 	strh.w	r3, [r0, #3]
    8fe8:	e797      	b.n	8f1a <hci_cmd_handle+0xc2>
    8fea:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    8fec:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    8fee:	8859      	ldrh	r1, [r3, #2]
    8ff0:	b2a0      	uxth	r0, r4
    8ff2:	f006 ff2f 	bl	fe54 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    8ff6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    8ff8:	2103      	movs	r1, #3
    8ffa:	a80b      	add	r0, sp, #44	; 0x2c
    8ffc:	f7ff fd10 	bl	8a20 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9000:	2d00      	cmp	r5, #0
    9002:	bf0c      	ite	eq
    9004:	2300      	moveq	r3, #0
    9006:	230c      	movne	r3, #12
    9008:	7003      	strb	r3, [r0, #0]
    900a:	e26b      	b.n	94e4 <hci_cmd_handle+0x68c>
	switch (ocf) {
    900c:	3a01      	subs	r2, #1
    900e:	2a08      	cmp	r2, #8
    9010:	f63f af48 	bhi.w	8ea4 <hci_cmd_handle+0x4c>
    9014:	a301      	add	r3, pc, #4	; (adr r3, 901c <hci_cmd_handle+0x1c4>)
    9016:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    901a:	bf00      	nop
    901c:	00009041 	.word	0x00009041
    9020:	0000906b 	.word	0x0000906b
    9024:	0000913b 	.word	0x0000913b
    9028:	00008ea5 	.word	0x00008ea5
    902c:	00008ea5 	.word	0x00008ea5
    9030:	00008ea5 	.word	0x00008ea5
    9034:	00008ea5 	.word	0x00008ea5
    9038:	00008ea5 	.word	0x00008ea5
    903c:	00009157 	.word	0x00009157
	rp = cmd_complete(evt, sizeof(*rp));
    9040:	2109      	movs	r1, #9
    9042:	a80b      	add	r0, sp, #44	; 0x2c
    9044:	f7ff fcec 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9048:	2300      	movs	r3, #0
    904a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    904c:	7083      	strb	r3, [r0, #2]
    904e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    9050:	f06f 030e 	mvn.w	r3, #14
    9054:	7143      	strb	r3, [r0, #5]
    9056:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    9058:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    905a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    905c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    9060:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    9062:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    9064:	71c3      	strb	r3, [r0, #7]
    9066:	7203      	strb	r3, [r0, #8]
    9068:	e757      	b.n	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    906a:	2141      	movs	r1, #65	; 0x41
    906c:	a80b      	add	r0, sp, #44	; 0x2c
    906e:	f7ff fcd7 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9072:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9074:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9076:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9078:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    907c:	f7f7 fadc 	bl	638 <memset>
	rp->commands[2] |= BIT(7);
    9080:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[36] |= BIT(1);
    9082:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
	rp->commands[28] |= BIT(3);
    9086:	7f62      	ldrb	r2, [r4, #29]
	rp->commands[26] |= BIT(6) | BIT(7);
    9088:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    908a:	7ea5      	ldrb	r5, [r4, #26]
	rp->commands[2] |= BIT(7);
    908c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9090:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    9092:	79a3      	ldrb	r3, [r4, #6]
    9094:	f063 033f 	orn	r3, r3, #63	; 0x3f
    9098:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    909a:	7ae3      	ldrb	r3, [r4, #11]
    909c:	f043 0304 	orr.w	r3, r3, #4
    90a0:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    90a2:	7be3      	ldrb	r3, [r4, #15]
    90a4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    90a8:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    90aa:	7c23      	ldrb	r3, [r4, #16]
    90ac:	f043 0302 	orr.w	r3, r3, #2
    90b0:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    90b2:	7de3      	ldrb	r3, [r4, #23]
	rp->commands[36] |= BIT(2) | BIT(3) | BIT(5) | BIT(7) | BIT(6) ;
    90b4:	f061 0111 	orn	r1, r1, #17
	rp->commands[22] |= BIT(2);
    90b8:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[28] |= BIT(1) | BIT(2);
    90bc:	f042 020e 	orr.w	r2, r2, #14
	rp->commands[22] |= BIT(2);
    90c0:	75e3      	strb	r3, [r4, #23]
	rp->commands[36] |= BIT(2) | BIT(3) | BIT(5) | BIT(7) | BIT(6) ;
    90c2:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	rp->commands[27] |= BIT(0) | BIT(1);
    90c6:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[37] |= BIT(5);
    90c8:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(1) | BIT(2);
    90cc:	7762      	strb	r2, [r4, #29]
	rp->commands[0] |= BIT(5);
    90ce:	7862      	ldrb	r2, [r4, #1]
	rp->commands[37] |= BIT(5);
    90d0:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[0] |= BIT(5);
    90d4:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    90d8:	f063 0308 	orn	r3, r3, #8
	rp->commands[37] |= BIT(5);
    90dc:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	rp->commands[0] |= BIT(5);
    90e0:	7062      	strb	r2, [r4, #1]
	rp->commands[38] |= BIT(7);
    90e2:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
	rp->commands[32] |= BIT(4) | BIT(5);
    90e6:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    90ea:	7723      	strb	r3, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    90ec:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    90f0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    90f4:	f063 030f 	orn	r3, r3, #15
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    90f8:	f065 0508 	orn	r5, r5, #8
	rp->commands[26] |= BIT(0) | BIT(1);
    90fc:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[38] |= BIT(7);
    9100:	f061 017f 	orn	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    9104:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    9108:	76a5      	strb	r5, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    910a:	76e0      	strb	r0, [r4, #27]
	rp->commands[38] |= BIT(7);
    910c:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
	rp->commands[33] |= BIT(6) | BIT(7);
    9110:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    9114:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9118:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    911c:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
    9120:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    9124:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9128:	f062 0206 	orn	r2, r2, #6
	rp->commands[39] |= BIT(2);
    912c:	f043 0304 	orr.w	r3, r3, #4
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    9130:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
    9134:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    9138:	e6ef      	b.n	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    913a:	2109      	movs	r1, #9
    913c:	a80b      	add	r0, sp, #44	; 0x2c
    913e:	f7ff fc6f 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9142:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    9144:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    9146:	2208      	movs	r2, #8
	rp->status = 0x00;
    9148:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    914c:	f7f7 fa74 	bl	638 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    9150:	2360      	movs	r3, #96	; 0x60
    9152:	7163      	strb	r3, [r4, #5]
    9154:	e6e1      	b.n	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    9156:	2107      	movs	r1, #7
    9158:	a80b      	add	r0, sp, #44	; 0x2c
    915a:	f7ff fc61 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    915e:	4601      	mov	r1, r0
    9160:	2300      	movs	r3, #0
    9162:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    9166:	4618      	mov	r0, r3
    9168:	f7ff faf6 	bl	8758 <ll_addr_get>
    916c:	e6d5      	b.n	8f1a <hci_cmd_handle+0xc2>
    916e:	bf00      	nop
    9170:	200008cc 	.word	0x200008cc
    9174:	2000ce80 	.word	0x2000ce80
    9178:	200008d8 	.word	0x200008d8
    917c:	2000ce88 	.word	0x2000ce88
	switch (ocf) {
    9180:	3a01      	subs	r2, #1
    9182:	2a4d      	cmp	r2, #77	; 0x4d
    9184:	f63f ae8e 	bhi.w	8ea4 <hci_cmd_handle+0x4c>
    9188:	a301      	add	r3, pc, #4	; (adr r3, 9190 <hci_cmd_handle+0x338>)
    918a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    918e:	bf00      	nop
    9190:	000092c9 	.word	0x000092c9
    9194:	000092d3 	.word	0x000092d3
    9198:	000092eb 	.word	0x000092eb
    919c:	00008ea5 	.word	0x00008ea5
    91a0:	0000930f 	.word	0x0000930f
    91a4:	000093b5 	.word	0x000093b5
    91a8:	000097eb 	.word	0x000097eb
    91ac:	00009419 	.word	0x00009419
    91b0:	00009435 	.word	0x00009435
    91b4:	00009441 	.word	0x00009441
    91b8:	00008ea5 	.word	0x00008ea5
    91bc:	00008ea5 	.word	0x00008ea5
    91c0:	00008ea5 	.word	0x00008ea5
    91c4:	00008ea5 	.word	0x00008ea5
    91c8:	0000931d 	.word	0x0000931d
    91cc:	00009333 	.word	0x00009333
    91d0:	00009345 	.word	0x00009345
    91d4:	0000934d 	.word	0x0000934d
    91d8:	000094a7 	.word	0x000094a7
    91dc:	00008ea5 	.word	0x00008ea5
    91e0:	00009483 	.word	0x00009483
    91e4:	0000949d 	.word	0x0000949d
    91e8:	00009355 	.word	0x00009355
    91ec:	0000937b 	.word	0x0000937b
    91f0:	00008ea5 	.word	0x00008ea5
    91f4:	00009469 	.word	0x00009469
    91f8:	00009479 	.word	0x00009479
    91fc:	00009391 	.word	0x00009391
    9200:	00008ea5 	.word	0x00008ea5
    9204:	00008ea5 	.word	0x00008ea5
    9208:	00008ea5 	.word	0x00008ea5
    920c:	000094c1 	.word	0x000094c1
    9210:	000094eb 	.word	0x000094eb
    9214:	000094f9 	.word	0x000094f9
    9218:	00009509 	.word	0x00009509
    921c:	00009521 	.word	0x00009521
    9220:	00008ea5 	.word	0x00008ea5
    9224:	00008ea5 	.word	0x00008ea5
    9228:	0000962f 	.word	0x0000962f
    922c:	0000963d 	.word	0x0000963d
    9230:	00009645 	.word	0x00009645
    9234:	00009655 	.word	0x00009655
    9238:	00009667 	.word	0x00009667
    923c:	00009685 	.word	0x00009685
    9240:	000096a3 	.word	0x000096a3
    9244:	000096b9 	.word	0x000096b9
    9248:	0000953f 	.word	0x0000953f
    924c:	00009557 	.word	0x00009557
    9250:	000095b5 	.word	0x000095b5
    9254:	000095d3 	.word	0x000095d3
    9258:	00008ea5 	.word	0x00008ea5
    925c:	00008ea5 	.word	0x00008ea5
    9260:	00008ea5 	.word	0x00008ea5
    9264:	000093d1 	.word	0x000093d1
    9268:	00009425 	.word	0x00009425
    926c:	00009435 	.word	0x00009435
    9270:	0000945f 	.word	0x0000945f
    9274:	00008ea5 	.word	0x00008ea5
    9278:	00008ea5 	.word	0x00008ea5
    927c:	00008ea5 	.word	0x00008ea5
    9280:	00008ea5 	.word	0x00008ea5
    9284:	00008ea5 	.word	0x00008ea5
    9288:	00008ea5 	.word	0x00008ea5
    928c:	00008ea5 	.word	0x00008ea5
    9290:	00008ea5 	.word	0x00008ea5
    9294:	00008ea5 	.word	0x00008ea5
    9298:	00008ea5 	.word	0x00008ea5
    929c:	00008ea5 	.word	0x00008ea5
    92a0:	00008ea5 	.word	0x00008ea5
    92a4:	00008ea5 	.word	0x00008ea5
    92a8:	00008ea5 	.word	0x00008ea5
    92ac:	00008ea5 	.word	0x00008ea5
    92b0:	00008ea5 	.word	0x00008ea5
    92b4:	00008ea5 	.word	0x00008ea5
    92b8:	000096cd 	.word	0x000096cd
    92bc:	00008ea5 	.word	0x00008ea5
    92c0:	00008ea5 	.word	0x00008ea5
    92c4:	000096c3 	.word	0x000096c3
	le_event_mask = sys_get_le64(cmd->events);
    92c8:	68a0      	ldr	r0, [r4, #8]
    92ca:	f7ff fdc1 	bl	8e50 <sys_get_le64>
    92ce:	4bb7      	ldr	r3, [pc, #732]	; (95ac <hci_cmd_handle+0x754>)
    92d0:	e64f      	b.n	8f72 <hci_cmd_handle+0x11a>
	rp = cmd_complete(evt, sizeof(*rp));
    92d2:	2104      	movs	r1, #4
    92d4:	a80b      	add	r0, sp, #44	; 0x2c
    92d6:	f7ff fba3 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    92da:	2300      	movs	r3, #0
    92dc:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    92de:	2301      	movs	r3, #1
    92e0:	7043      	strb	r3, [r0, #1]
    92e2:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    92e4:	2302      	movs	r3, #2
    92e6:	70c3      	strb	r3, [r0, #3]
    92e8:	e617      	b.n	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    92ea:	2109      	movs	r1, #9
    92ec:	a80b      	add	r0, sp, #44	; 0x2c
    92ee:	f7ff fb97 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    92f2:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    92f4:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    92f6:	2208      	movs	r2, #8
	rp->status = 0x00;
    92f8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    92fc:	f7f7 f99c 	bl	638 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    9300:	23ff      	movs	r3, #255	; 0xff
    9302:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    9304:	2349      	movs	r3, #73	; 0x49
    9306:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    9308:	2301      	movs	r3, #1
    930a:	70e3      	strb	r3, [r4, #3]
    930c:	e605      	b.n	8f1a <hci_cmd_handle+0xc2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    930e:	68a1      	ldr	r1, [r4, #8]
    9310:	2001      	movs	r0, #1
    9312:	f7ff fa3b 	bl	878c <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    9316:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    9318:	2101      	movs	r1, #1
    931a:	e078      	b.n	940e <hci_cmd_handle+0x5b6>
	rp = cmd_complete(evt, sizeof(*rp));
    931c:	2102      	movs	r1, #2
    931e:	a80b      	add	r0, sp, #44	; 0x2c
    9320:	f7ff fb7e 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9324:	2300      	movs	r3, #0
    9326:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    9328:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    932a:	f008 fbaf 	bl	11a8c <ll_wl_size_get>
    932e:	7060      	strb	r0, [r4, #1]
    9330:	e5f3      	b.n	8f1a <hci_cmd_handle+0xc2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9332:	2101      	movs	r1, #1
    9334:	a80b      	add	r0, sp, #44	; 0x2c
    9336:	f7ff fb73 	bl	8a20 <cmd_complete>
    933a:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    933c:	f008 fba8 	bl	11a90 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    9340:	7020      	strb	r0, [r4, #0]
    9342:	e5ea      	b.n	8f1a <hci_cmd_handle+0xc2>
	status = ll_wl_add(&cmd->addr);
    9344:	68a0      	ldr	r0, [r4, #8]
    9346:	f008 fc43 	bl	11bd0 <ll_wl_add>
    934a:	e7e4      	b.n	9316 <hci_cmd_handle+0x4be>
	status = ll_wl_remove(&cmd->addr);
    934c:	68a0      	ldr	r0, [r4, #8]
    934e:	f008 fbbf 	bl	11ad0 <ll_wl_remove>
    9352:	e7e0      	b.n	9316 <hci_cmd_handle+0x4be>
    9354:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    9356:	2300      	movs	r3, #0
    9358:	aa0c      	add	r2, sp, #48	; 0x30
    935a:	f100 0110 	add.w	r1, r0, #16
    935e:	f009 f8f9 	bl	12554 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    9362:	2111      	movs	r1, #17
    9364:	a80b      	add	r0, sp, #44	; 0x2c
    9366:	f7ff fb5b 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    936a:	2300      	movs	r3, #0
    936c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    9370:	2210      	movs	r2, #16
    9372:	a90c      	add	r1, sp, #48	; 0x30
	memcpy(rp->info, build_info, sizeof(build_info));
    9374:	f7f7 f934 	bl	5e0 <memcpy>
    9378:	e5cf      	b.n	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    937a:	2109      	movs	r1, #9
    937c:	a80b      	add	r0, sp, #44	; 0x2c
    937e:	f7ff fb4f 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9382:	2300      	movs	r3, #0
    9384:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    9388:	2108      	movs	r1, #8
    938a:	f7ff fa1f 	bl	87cc <bt_rand>
    938e:	e5c4      	b.n	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    9390:	2109      	movs	r1, #9
    9392:	a80b      	add	r0, sp, #44	; 0x2c
    9394:	f7ff fb44 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9398:	4601      	mov	r1, r0
    939a:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    939c:	4602      	mov	r2, r0
	rp->status = 0x00;
    939e:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    93a2:	4883      	ldr	r0, [pc, #524]	; (95b0 <hci_cmd_handle+0x758>)
    93a4:	f7ff fb0e 	bl	89c4 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    93a8:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    93ac:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    93ae:	f7ff fb09 	bl	89c4 <sys_put_le32>
    93b2:	e5b2      	b.n	8f1a <hci_cmd_handle+0xc2>
    93b4:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    93b6:	7ba5      	ldrb	r5, [r4, #14]
    93b8:	79a3      	ldrb	r3, [r4, #6]
    93ba:	7962      	ldrb	r2, [r4, #5]
    93bc:	7921      	ldrb	r1, [r4, #4]
    93be:	8820      	ldrh	r0, [r4, #0]
    93c0:	9502      	str	r5, [sp, #8]
    93c2:	7b65      	ldrb	r5, [r4, #13]
    93c4:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    93c6:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    93c8:	9400      	str	r4, [sp, #0]
    93ca:	f007 fce3 	bl	10d94 <ll_adv_params_set>
    93ce:	e7a2      	b.n	9316 <hci_cmd_handle+0x4be>
    93d0:	68a4      	ldr	r4, [r4, #8]
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    93d2:	2500      	movs	r5, #0
    93d4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    93d8:	7a23      	ldrb	r3, [r4, #8]
    93da:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    93de:	7820      	ldrb	r0, [r4, #0]
    93e0:	9509      	str	r5, [sp, #36]	; 0x24
    93e2:	7d66      	ldrb	r6, [r4, #21]
    93e4:	9608      	str	r6, [sp, #32]
    93e6:	7d26      	ldrb	r6, [r4, #20]
    93e8:	9607      	str	r6, [sp, #28]
    93ea:	7ce6      	ldrb	r6, [r4, #19]
    93ec:	9606      	str	r6, [sp, #24]
    93ee:	7ca6      	ldrb	r6, [r4, #18]
    93f0:	9605      	str	r6, [sp, #20]
    93f2:	9504      	str	r5, [sp, #16]
    93f4:	7c25      	ldrb	r5, [r4, #16]
    93f6:	9503      	str	r5, [sp, #12]
    93f8:	79e5      	ldrb	r5, [r4, #7]
    93fa:	9502      	str	r5, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    93fc:	f104 050a 	add.w	r5, r4, #10
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    9400:	9501      	str	r5, [sp, #4]
    9402:	7a64      	ldrb	r4, [r4, #9]
    9404:	9400      	str	r4, [sp, #0]
    9406:	f007 fd61 	bl	10ecc <ll_ext_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    940a:	2102      	movs	r1, #2
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    940c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    940e:	a80b      	add	r0, sp, #44	; 0x2c
    9410:	f7ff fb06 	bl	8a20 <cmd_complete>
	ccst->status = status;
    9414:	7004      	strb	r4, [r0, #0]
    9416:	e580      	b.n	8f1a <hci_cmd_handle+0xc2>
    9418:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    941a:	1c59      	adds	r1, r3, #1
    941c:	7818      	ldrb	r0, [r3, #0]
    941e:	f007 ff45 	bl	112ac <ll_adv_data_set>
    9422:	e596      	b.n	8f52 <hci_cmd_handle+0xfa>
    9424:	68a0      	ldr	r0, [r4, #8]
	ll_ext_adv_data_set(cmd->len, &cmd->data[0], cmd->op, cmd->frag_pref);
    9426:	7883      	ldrb	r3, [r0, #2]
    9428:	7842      	ldrb	r2, [r0, #1]
    942a:	1d01      	adds	r1, r0, #4
    942c:	78c0      	ldrb	r0, [r0, #3]
    942e:	f007 ffad 	bl	1138c <ll_ext_adv_data_set>
    9432:	e58e      	b.n	8f52 <hci_cmd_handle+0xfa>
    9434:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    9436:	1c59      	adds	r1, r3, #1
    9438:	7818      	ldrb	r0, [r3, #0]
    943a:	f008 f8dd 	bl	115f8 <ll_scan_data_set>
    943e:	e588      	b.n	8f52 <hci_cmd_handle+0xfa>
	status = ll_adv_enable(cmd->enable);
    9440:	68a3      	ldr	r3, [r4, #8]
    9442:	7818      	ldrb	r0, [r3, #0]
    9444:	f008 f91a 	bl	1167c <ll_adv_enable>
	status = ll_ext_adv_enable(cmd->enable);
    9448:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    944a:	2101      	movs	r1, #1
    944c:	a80b      	add	r0, sp, #44	; 0x2c
    944e:	f7ff fae7 	bl	8a20 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9452:	2c00      	cmp	r4, #0
    9454:	bf0c      	ite	eq
    9456:	2300      	moveq	r3, #0
    9458:	230c      	movne	r3, #12
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    945a:	7003      	strb	r3, [r0, #0]
    945c:	e55d      	b.n	8f1a <hci_cmd_handle+0xc2>
	status = ll_ext_adv_enable(cmd->enable);
    945e:	68a3      	ldr	r3, [r4, #8]
    9460:	7818      	ldrb	r0, [r3, #0]
    9462:	f008 f96d 	bl	11740 <ll_ext_adv_enable>
    9466:	e7ef      	b.n	9448 <hci_cmd_handle+0x5f0>
	handle = sys_le16_to_cpu(cmd->handle);
    9468:	68a2      	ldr	r2, [r4, #8]
    946a:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    946e:	2100      	movs	r1, #0
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    9470:	b2a0      	uxth	r0, r4
    9472:	f006 fc52 	bl	fd1a <ll_start_enc_req_send>
    9476:	e5be      	b.n	8ff6 <hci_cmd_handle+0x19e>
	handle = sys_le16_to_cpu(cmd->handle);
    9478:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    947a:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    947c:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    947e:	2106      	movs	r1, #6
    9480:	e7f6      	b.n	9470 <hci_cmd_handle+0x618>
	handle = sys_le16_to_cpu(cmd->handle);
    9482:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9484:	2108      	movs	r1, #8
    9486:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    9488:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    948a:	f7ff fac9 	bl	8a20 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    948e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9490:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    9492:	1cc1      	adds	r1, r0, #3
    9494:	4630      	mov	r0, r6
    9496:	f006 fc2b 	bl	fcf0 <ll_chm_get>
    949a:	e587      	b.n	8fac <hci_cmd_handle+0x154>
	handle = sys_le16_to_cpu(cmd->handle);
    949c:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    949e:	8818      	ldrh	r0, [r3, #0]
    94a0:	f006 fc7e 	bl	fda0 <ll_feature_req_send>
    94a4:	e532      	b.n	8f0c <hci_cmd_handle+0xb4>
    94a6:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    94a8:	8911      	ldrh	r1, [r2, #8]
    94aa:	8893      	ldrh	r3, [r2, #4]
    94ac:	8810      	ldrh	r0, [r2, #0]
    94ae:	9101      	str	r1, [sp, #4]
    94b0:	88d2      	ldrh	r2, [r2, #6]
    94b2:	9200      	str	r2, [sp, #0]
    94b4:	2200      	movs	r2, #0
    94b6:	4611      	mov	r1, r2
    94b8:	f006 fba2 	bl	fc00 <ll_conn_update>
	*evt = cmd_status(status);
    94bc:	b2c0      	uxtb	r0, r0
    94be:	e529      	b.n	8f14 <hci_cmd_handle+0xbc>
    94c0:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    94c2:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    94c4:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    94c6:	8893      	ldrh	r3, [r2, #4]
    94c8:	9101      	str	r1, [sp, #4]
    94ca:	88d2      	ldrh	r2, [r2, #6]
    94cc:	9200      	str	r2, [sp, #0]
    94ce:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    94d0:	2102      	movs	r1, #2
    94d2:	b2a0      	uxth	r0, r4
    94d4:	f006 fb94 	bl	fc00 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    94d8:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    94da:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    94dc:	a80b      	add	r0, sp, #44	; 0x2c
    94de:	f7ff fa9f 	bl	8a20 <cmd_complete>
	rp->status = status;
    94e2:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    94e4:	f8a0 4001 	strh.w	r4, [r0, #1]
    94e8:	e517      	b.n	8f1a <hci_cmd_handle+0xc2>
    94ea:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    94ec:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    94ee:	789a      	ldrb	r2, [r3, #2]
    94f0:	2300      	movs	r3, #0
    94f2:	9301      	str	r3, [sp, #4]
    94f4:	9300      	str	r3, [sp, #0]
    94f6:	e7eb      	b.n	94d0 <hci_cmd_handle+0x678>
    94f8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    94fa:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    94fc:	889a      	ldrh	r2, [r3, #4]
    94fe:	8859      	ldrh	r1, [r3, #2]
    9500:	b2a0      	uxth	r0, r4
    9502:	f006 fcbd 	bl	fe80 <ll_length_req_send>
    9506:	e576      	b.n	8ff6 <hci_cmd_handle+0x19e>
	rp = cmd_complete(evt, sizeof(*rp));
    9508:	2105      	movs	r1, #5
    950a:	a80b      	add	r0, sp, #44	; 0x2c
    950c:	f7ff fa88 	bl	8a20 <cmd_complete>
    9510:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    9512:	1cc1      	adds	r1, r0, #3
    9514:	3001      	adds	r0, #1
    9516:	f006 fcd7 	bl	fec8 <ll_length_default_get>
	rp->status = 0x00;
    951a:	2300      	movs	r3, #0
    951c:	7023      	strb	r3, [r4, #0]
    951e:	e4fc      	b.n	8f1a <hci_cmd_handle+0xc2>
    9520:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    9522:	8859      	ldrh	r1, [r3, #2]
    9524:	8818      	ldrh	r0, [r3, #0]
    9526:	f006 fcd9 	bl	fedc <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    952a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    952c:	2101      	movs	r1, #1
    952e:	a80b      	add	r0, sp, #44	; 0x2c
    9530:	f7ff fa76 	bl	8a20 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    9534:	2c00      	cmp	r4, #0
    9536:	bf0c      	ite	eq
    9538:	2300      	moveq	r3, #0
    953a:	231e      	movne	r3, #30
    953c:	e78d      	b.n	945a <hci_cmd_handle+0x602>
	rp = cmd_complete(evt, sizeof(*rp));
    953e:	2109      	movs	r1, #9
    9540:	a80b      	add	r0, sp, #44	; 0x2c
    9542:	f7ff fa6d 	bl	8a20 <cmd_complete>
    9546:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    9548:	1dc3      	adds	r3, r0, #7
    954a:	1d42      	adds	r2, r0, #5
    954c:	1cc1      	adds	r1, r0, #3
    954e:	3001      	adds	r0, #1
    9550:	f006 fcce 	bl	fef0 <ll_length_max_get>
    9554:	e7e1      	b.n	951a <hci_cmd_handle+0x6c2>
	handle = sys_le16_to_cpu(cmd->handle);
    9556:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    9558:	2105      	movs	r1, #5
    955a:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    955c:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    955e:	f7ff fa5f 	bl	8a20 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    9562:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    9564:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    9566:	1d02      	adds	r2, r0, #4
    9568:	1cc1      	adds	r1, r0, #3
    956a:	4630      	mov	r0, r6
    956c:	f006 fcc9 	bl	ff02 <ll_phy_get>
	return __builtin_ffs(op);
    9570:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    9572:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    9576:	2800      	cmp	r0, #0
    9578:	bf0c      	ite	eq
    957a:	2300      	moveq	r3, #0
    957c:	230c      	movne	r3, #12
    957e:	7023      	strb	r3, [r4, #0]
    9580:	2a00      	cmp	r2, #0
    9582:	fa92 f3a2 	rbit	r3, r2
    9586:	fab3 f383 	clz	r3, r3
    958a:	7922      	ldrb	r2, [r4, #4]
    958c:	bf08      	it	eq
    958e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9592:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    9594:	70e3      	strb	r3, [r4, #3]
    9596:	2a00      	cmp	r2, #0
    9598:	fa92 f3a2 	rbit	r3, r2
    959c:	fab3 f383 	clz	r3, r3
    95a0:	bf08      	it	eq
    95a2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    95a6:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    95a8:	7123      	strb	r3, [r4, #4]
    95aa:	e4b6      	b.n	8f1a <hci_cmd_handle+0xc2>
    95ac:	2000ce88 	.word	0x2000ce88
    95b0:	ec30cc8f 	.word	0xec30cc8f
    95b4:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    95b6:	781a      	ldrb	r2, [r3, #0]
    95b8:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    95ba:	bf44      	itt	mi
    95bc:	2107      	movmi	r1, #7
    95be:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    95c0:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    95c2:	bf44      	itt	mi
    95c4:	2207      	movmi	r2, #7
    95c6:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    95c8:	7899      	ldrb	r1, [r3, #2]
    95ca:	7858      	ldrb	r0, [r3, #1]
    95cc:	f006 fcae 	bl	ff2c <ll_phy_default_set>
    95d0:	e7ab      	b.n	952a <hci_cmd_handle+0x6d2>
    95d2:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    95d4:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    95d6:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    95d8:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    95dc:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    95de:	bf44      	itt	mi
    95e0:	2107      	movmi	r1, #7
    95e2:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    95e4:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    95e6:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    95e8:	bf44      	itt	mi
    95ea:	2207      	movmi	r2, #7
    95ec:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    95ee:	074d      	lsls	r5, r1, #29
    95f0:	d002      	beq.n	95f8 <hci_cmd_handle+0x7a0>
	    !(cmd->rx_phys & 0x07)) {
    95f2:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    95f4:	075a      	lsls	r2, r3, #29
    95f6:	d105      	bne.n	9604 <hci_cmd_handle+0x7ac>
		ccst = cmd_complete(evt, sizeof(*ccst));
    95f8:	2101      	movs	r1, #1
    95fa:	a80b      	add	r0, sp, #44	; 0x2c
    95fc:	f7ff fa10 	bl	8a20 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    9600:	2312      	movs	r3, #18
    9602:	e72a      	b.n	945a <hci_cmd_handle+0x602>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    9604:	ea41 0203 	orr.w	r2, r1, r3
    9608:	f012 0ff8 	tst.w	r2, #248	; 0xf8
    960c:	d005      	beq.n	961a <hci_cmd_handle+0x7c2>
		ccst = cmd_complete(evt, sizeof(*ccst));
    960e:	2101      	movs	r1, #1
    9610:	a80b      	add	r0, sp, #44	; 0x2c
    9612:	f7ff fa05 	bl	8a20 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    9616:	2311      	movs	r3, #17
    9618:	e71f      	b.n	945a <hci_cmd_handle+0x602>
	if (phy_opts & 0x03) {
    961a:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    961e:	bf1c      	itt	ne
    9620:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    9624:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    9628:	f006 fc8a 	bl	ff40 <ll_phy_req_send>
    962c:	e46e      	b.n	8f0c <hci_cmd_handle+0xb4>
    962e:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    9630:	f100 0217 	add.w	r2, r0, #23
    9634:	1dc1      	adds	r1, r0, #7
    9636:	f008 fd33 	bl	120a0 <ll_rl_add>
    963a:	e66c      	b.n	9316 <hci_cmd_handle+0x4be>
	status = ll_rl_remove(&cmd->peer_id_addr);
    963c:	68a0      	ldr	r0, [r4, #8]
    963e:	f008 fdd1 	bl	121e4 <ll_rl_remove>
    9642:	e668      	b.n	9316 <hci_cmd_handle+0x4be>
	ccst = cmd_complete(evt, sizeof(*ccst));
    9644:	2101      	movs	r1, #1
    9646:	a80b      	add	r0, sp, #44	; 0x2c
    9648:	f7ff f9ea 	bl	8a20 <cmd_complete>
    964c:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    964e:	f008 fd0d 	bl	1206c <ll_rl_clear>
    9652:	e675      	b.n	9340 <hci_cmd_handle+0x4e8>
	rp = cmd_complete(evt, sizeof(*rp));
    9654:	2102      	movs	r1, #2
    9656:	a80b      	add	r0, sp, #44	; 0x2c
    9658:	f7ff f9e2 	bl	8a20 <cmd_complete>
    965c:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    965e:	f008 fd03 	bl	12068 <ll_rl_size_get>
    9662:	7060      	strb	r0, [r4, #1]
    9664:	e759      	b.n	951a <hci_cmd_handle+0x6c2>
	memcpy(dst, src, sizeof(*dst));
    9666:	2207      	movs	r2, #7
    9668:	68a1      	ldr	r1, [r4, #8]
    966a:	a80c      	add	r0, sp, #48	; 0x30
    966c:	f7f6 ffb8 	bl	5e0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    9670:	2107      	movs	r1, #7
    9672:	a80b      	add	r0, sp, #44	; 0x2c
    9674:	f7ff f9d4 	bl	8a20 <cmd_complete>
    9678:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    967a:	1c41      	adds	r1, r0, #1
    967c:	a80c      	add	r0, sp, #48	; 0x30
    967e:	f008 fe3f 	bl	12300 <ll_rl_crpa_get>
    9682:	e65d      	b.n	9340 <hci_cmd_handle+0x4e8>
    9684:	2207      	movs	r2, #7
    9686:	68a1      	ldr	r1, [r4, #8]
    9688:	a80c      	add	r0, sp, #48	; 0x30
    968a:	f7f6 ffa9 	bl	5e0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    968e:	2107      	movs	r1, #7
    9690:	a80b      	add	r0, sp, #44	; 0x2c
    9692:	f7ff f9c5 	bl	8a20 <cmd_complete>
    9696:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    9698:	1c41      	adds	r1, r0, #1
    969a:	a80c      	add	r0, sp, #48	; 0x30
    969c:	f008 fe50 	bl	12340 <ll_rl_lrpa_get>
    96a0:	e64e      	b.n	9340 <hci_cmd_handle+0x4e8>
	u8_t enable = cmd->enable;
    96a2:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    96a4:	2101      	movs	r1, #1
    96a6:	a80b      	add	r0, sp, #44	; 0x2c
	u8_t enable = cmd->enable;
    96a8:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    96aa:	f7ff f9b9 	bl	8a20 <cmd_complete>
    96ae:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    96b0:	4628      	mov	r0, r5
    96b2:	f008 fe5d 	bl	12370 <ll_rl_enable>
    96b6:	e643      	b.n	9340 <hci_cmd_handle+0x4e8>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    96b8:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    96ba:	8818      	ldrh	r0, [r3, #0]
    96bc:	f008 fe6a 	bl	12394 <ll_rl_timeout_set>
    96c0:	e447      	b.n	8f52 <hci_cmd_handle+0xfa>
    96c2:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    96c4:	79c1      	ldrb	r1, [r0, #7]
    96c6:	f008 fe6d 	bl	123a4 <ll_priv_mode_set>
    96ca:	e624      	b.n	9316 <hci_cmd_handle+0x4be>
	rp = cmd_complete(evt, sizeof(*rp));
    96cc:	2103      	movs	r1, #3
    96ce:	a80b      	add	r0, sp, #44	; 0x2c
    96d0:	f7ff f9a6 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    96d4:	4601      	mov	r1, r0
    96d6:	2300      	movs	r3, #0
    96d8:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    96dc:	3001      	adds	r0, #1
    96de:	f7ff f871 	bl	87c4 <ll_tx_pwr_get>
    96e2:	e41a      	b.n	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    96e4:	210d      	movs	r1, #13
    96e6:	a80b      	add	r0, sp, #44	; 0x2c
    96e8:	f7ff f99a 	bl	8a20 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    96ec:	2202      	movs	r2, #2
    96ee:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    96f0:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    96f2:	2201      	movs	r2, #1
    96f4:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    96f6:	220b      	movs	r2, #11
	rp->status = 0x00;
    96f8:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    96fa:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    96fc:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    96fe:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    9700:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    9702:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    9704:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    9706:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    9708:	7242      	strb	r2, [r0, #9]
    970a:	7283      	strb	r3, [r0, #10]
    970c:	72c3      	strb	r3, [r0, #11]
    970e:	7303      	strb	r3, [r0, #12]
    9710:	e403      	b.n	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    9712:	2141      	movs	r1, #65	; 0x41
    9714:	a80b      	add	r0, sp, #44	; 0x2c
    9716:	f7ff f983 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    971a:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    971c:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    971e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    9720:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    9724:	f7f6 ff88 	bl	638 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    9728:	7863      	ldrb	r3, [r4, #1]
    972a:	f063 0358 	orn	r3, r3, #88	; 0x58
    972e:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    9730:	78a3      	ldrb	r3, [r4, #2]
    9732:	f043 0303 	orr.w	r3, r3, #3
    9736:	70a3      	strb	r3, [r4, #2]
    9738:	f7ff bbef 	b.w	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    973c:	2109      	movs	r1, #9
    973e:	a80b      	add	r0, sp, #44	; 0x2c
    9740:	f7ff f96e 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9744:	2100      	movs	r1, #0
    9746:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    974a:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    974c:	f7f6 ff74 	bl	638 <memset>
    9750:	f7ff bbe3 	b.w	8f1a <hci_cmd_handle+0xc2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    9754:	4b5c      	ldr	r3, [pc, #368]	; (98c8 <hci_cmd_handle+0xa70>)
    9756:	aa0c      	add	r2, sp, #48	; 0x30
    9758:	f103 0628 	add.w	r6, r3, #40	; 0x28
    975c:	4615      	mov	r5, r2
    975e:	6818      	ldr	r0, [r3, #0]
    9760:	6859      	ldr	r1, [r3, #4]
    9762:	4614      	mov	r4, r2
    9764:	c403      	stmia	r4!, {r0, r1}
    9766:	3308      	adds	r3, #8
    9768:	42b3      	cmp	r3, r6
    976a:	4622      	mov	r2, r4
    976c:	d1f7      	bne.n	975e <hci_cmd_handle+0x906>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    976e:	2129      	movs	r1, #41	; 0x29
    9770:	a80b      	add	r0, sp, #44	; 0x2c
    9772:	f7ff f955 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9776:	2300      	movs	r3, #0
    9778:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    977c:	2228      	movs	r2, #40	; 0x28
    977e:	4629      	mov	r1, r5
    9780:	e5f8      	b.n	9374 <hci_cmd_handle+0x51c>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    9782:	68a1      	ldr	r1, [r4, #8]
    9784:	2000      	movs	r0, #0
    9786:	f7ff f801 	bl	878c <ll_addr_set>
    978a:	f7ff bbe2 	b.w	8f52 <hci_cmd_handle+0xfa>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    978e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9792:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    9796:	3201      	adds	r2, #1
    9798:	d106      	bne.n	97a8 <hci_cmd_handle+0x950>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    979a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    979e:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    97a2:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    97a4:	4293      	cmp	r3, r2
    97a6:	d020      	beq.n	97ea <hci_cmd_handle+0x992>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    97a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    97ac:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    97b0:	07db      	lsls	r3, r3, #31
    97b2:	d51a      	bpl.n	97ea <hci_cmd_handle+0x992>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    97b4:	2118      	movs	r1, #24
    97b6:	a80b      	add	r0, sp, #44	; 0x2c
    97b8:	f7ff f932 	bl	8a20 <cmd_complete>
		rp->status = 0x00;
    97bc:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    97be:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    97c0:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    97c2:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    97c4:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    97c6:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    97ca:	1ca1      	adds	r1, r4, #2
    97cc:	f7ff f8fa 	bl	89c4 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    97d0:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    97d4:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    97d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    97da:	f063 033f 	orn	r3, r3, #63	; 0x3f
    97de:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    97e0:	2210      	movs	r2, #16
    97e2:	4631      	mov	r1, r6
    97e4:	f104 0008 	add.w	r0, r4, #8
    97e8:	e7b0      	b.n	974c <hci_cmd_handle+0x8f4>
	rp = cmd_complete(evt, sizeof(*rp));
    97ea:	2102      	movs	r1, #2
    97ec:	a80b      	add	r0, sp, #44	; 0x2c
    97ee:	f7ff f917 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    97f2:	2300      	movs	r3, #0
    97f4:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    97f6:	7043      	strb	r3, [r0, #1]
    97f8:	f7ff bb8f 	b.w	8f1a <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    97fc:	2121      	movs	r1, #33	; 0x21
    97fe:	a80b      	add	r0, sp, #44	; 0x2c
    9800:	f7ff f90e 	bl	8a20 <cmd_complete>
	rp->status = 0x00;
    9804:	4603      	mov	r3, r0
    9806:	2200      	movs	r2, #0
    9808:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    980c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    9810:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    9812:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    9816:	3101      	adds	r1, #1
    9818:	d04b      	beq.n	98b2 <hci_cmd_handle+0xa5a>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    981a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    981e:	3101      	adds	r1, #1
    9820:	d047      	beq.n	98b2 <hci_cmd_handle+0xa5a>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    9822:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    9826:	3101      	adds	r1, #1
    9828:	d043      	beq.n	98b2 <hci_cmd_handle+0xa5a>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    982a:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    982e:	3101      	adds	r1, #1
    9830:	d03f      	beq.n	98b2 <hci_cmd_handle+0xa5a>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    9832:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    9836:	4619      	mov	r1, r3
    9838:	f7ff f8c4 	bl	89c4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    983c:	1d61      	adds	r1, r4, #5
    983e:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    9842:	f7ff f8bf 	bl	89c4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    9846:	f104 0109 	add.w	r1, r4, #9
    984a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    984e:	f7ff f8b9 	bl	89c4 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    9852:	f104 010d 	add.w	r1, r4, #13
    9856:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    985a:	f7ff f8b3 	bl	89c4 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    985e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9862:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9866:	3301      	adds	r3, #1
    9868:	f104 0311 	add.w	r3, r4, #17
    986c:	d027      	beq.n	98be <hci_cmd_handle+0xa66>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    986e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    9872:	3101      	adds	r1, #1
    9874:	d023      	beq.n	98be <hci_cmd_handle+0xa66>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9876:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    987a:	3101      	adds	r1, #1
    987c:	d01f      	beq.n	98be <hci_cmd_handle+0xa66>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    987e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    9882:	3101      	adds	r1, #1
    9884:	d01b      	beq.n	98be <hci_cmd_handle+0xa66>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    9886:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    988a:	4619      	mov	r1, r3
    988c:	f7ff f89a 	bl	89c4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    9890:	f104 0115 	add.w	r1, r4, #21
    9894:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    9898:	f7ff f894 	bl	89c4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    989c:	f104 0119 	add.w	r1, r4, #25
    98a0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    98a4:	f7ff f88e 	bl	89c4 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    98a8:	f104 011d 	add.w	r1, r4, #29
    98ac:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    98b0:	e57d      	b.n	93ae <hci_cmd_handle+0x556>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    98b2:	2210      	movs	r2, #16
    98b4:	2100      	movs	r1, #0
    98b6:	4618      	mov	r0, r3
    98b8:	f7f6 febe 	bl	638 <memset>
    98bc:	e7cf      	b.n	985e <hci_cmd_handle+0xa06>
		memset(rp->er, 0x00, sizeof(rp->er));
    98be:	2210      	movs	r2, #16
    98c0:	2100      	movs	r1, #0
    98c2:	4618      	mov	r0, r3
    98c4:	e742      	b.n	974c <hci_cmd_handle+0x8f4>
    98c6:	bf00      	nop
    98c8:	00014d42 	.word	0x00014d42

000098cc <hci_acl_handle>:
{
    98cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    98d0:	2300      	movs	r3, #0
    98d2:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    98d4:	8983      	ldrh	r3, [r0, #12]
    98d6:	2b03      	cmp	r3, #3
{
    98d8:	4606      	mov	r6, r0
    98da:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    98dc:	d803      	bhi.n	98e6 <hci_acl_handle+0x1a>
		return -EINVAL;
    98de:	f06f 0015 	mvn.w	r0, #21
    98e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    98e6:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    98ea:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    98ec:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    98ee:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    98f0:	f009 fd11 	bl	13316 <net_buf_simple_pull>
	if (buf->len < len) {
    98f4:	89b3      	ldrh	r3, [r6, #12]
    98f6:	42bb      	cmp	r3, r7
    98f8:	d3f1      	bcc.n	98de <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    98fa:	f006 fc17 	bl	1012c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    98fe:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    9902:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    9904:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    9908:	b9f0      	cbnz	r0, 9948 <hci_acl_handle+0x7c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    990a:	4b1e      	ldr	r3, [pc, #120]	; (9984 <hci_acl_handle+0xb8>)
    990c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9910:	2300      	movs	r3, #0
    9912:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    9916:	4313      	orrs	r3, r2
    9918:	d012      	beq.n	9940 <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    991a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    991e:	2001      	movs	r0, #1
    9920:	f7f9 ffe4 	bl	38ec <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    9924:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    9926:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    992a:	211a      	movs	r1, #26
    992c:	f7ff f853 	bl	89d6 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    9930:	f8d8 0000 	ldr.w	r0, [r8]
    9934:	2101      	movs	r1, #1
    9936:	3008      	adds	r0, #8
    9938:	f009 fcce 	bl	132d8 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    993c:	2301      	movs	r3, #1
    993e:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    9940:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9948:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    994a:	f1b9 0f00 	cmp.w	r9, #0
    994e:	d002      	beq.n	9956 <hci_acl_handle+0x8a>
    9950:	f1b9 0f02 	cmp.w	r9, #2
    9954:	d113      	bne.n	997e <hci_acl_handle+0xb2>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    9956:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9958:	f362 0301 	bfi	r3, r2, #0, #2
    995c:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    995e:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    9960:	68b1      	ldr	r1, [r6, #8]
    9962:	463a      	mov	r2, r7
    9964:	1de0      	adds	r0, r4, #7
    9966:	f7f6 fe3b 	bl	5e0 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    996a:	4621      	mov	r1, r4
    996c:	4628      	mov	r0, r5
    996e:	f006 fbe9 	bl	10144 <ll_tx_mem_enqueue>
    9972:	2800      	cmp	r0, #0
    9974:	d0e6      	beq.n	9944 <hci_acl_handle+0x78>
		ll_tx_mem_release(node_tx);
    9976:	4620      	mov	r0, r4
    9978:	f006 fbde 	bl	10138 <ll_tx_mem_release>
    997c:	e7af      	b.n	98de <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    997e:	2201      	movs	r2, #1
    9980:	e7ea      	b.n	9958 <hci_acl_handle+0x8c>
    9982:	bf00      	nop
    9984:	2000ce80 	.word	0x2000ce80

00009988 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    9988:	7a03      	ldrb	r3, [r0, #8]
    998a:	f003 0303 	and.w	r3, r3, #3
    998e:	3b01      	subs	r3, #1
    9990:	2b01      	cmp	r3, #1
{
    9992:	b570      	push	{r4, r5, r6, lr}
    9994:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    9996:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    9998:	d81b      	bhi.n	99d2 <hci_acl_encode+0x4a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    999a:	f101 0608 	add.w	r6, r1, #8
    999e:	4630      	mov	r0, r6
    99a0:	2104      	movs	r1, #4
    99a2:	f009 fc99 	bl	132d8 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    99a6:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    99a8:	7a61      	ldrb	r1, [r4, #9]
    99aa:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    99ac:	f003 0303 	and.w	r3, r3, #3
    99b0:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    99b2:	bf0c      	ite	eq
    99b4:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    99b8:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    99bc:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    99be:	4630      	mov	r0, r6
    99c0:	f009 fc8a 	bl	132d8 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    99c4:	7a62      	ldrb	r2, [r4, #9]
    99c6:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    99ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    99ce:	f7f6 be07 	b.w	5e0 <memcpy>
		LL_ASSERT(0);
    99d2:	4040      	eors	r0, r0
    99d4:	f380 8811 	msr	BASEPRI, r0
    99d8:	f04f 0004 	mov.w	r0, #4
    99dc:	df02      	svc	2
	...

000099e0 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    99e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    99e4:	4604      	mov	r4, r0
    99e6:	b085      	sub	sp, #20
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    99e8:	7923      	ldrb	r3, [r4, #4]
	handle = node_rx->hdr.handle;
    99ea:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    99ec:	2b01      	cmp	r3, #1
{
    99ee:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    99f0:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    99f4:	f000 818b 	beq.w	9d0e <hci_evt_encode+0x32e>
	switch (node_rx->hdr.type) {
    99f8:	3b02      	subs	r3, #2
    99fa:	2b0a      	cmp	r3, #10
    99fc:	f200 8246 	bhi.w	9e8c <hci_evt_encode+0x4ac>
    9a00:	e8df f013 	tbh	[pc, r3, lsl #1]
    9a04:	0012000b 	.word	0x0012000b
    9a08:	00170012 	.word	0x00170012
    9a0c:	00c8004a 	.word	0x00c8004a
    9a10:	010b00e6 	.word	0x010b00e6
    9a14:	01380123 	.word	0x01380123
    9a18:	0153      	.short	0x0153
		le_advertising_report(pdu_data, b, buf);
    9a1a:	460a      	mov	r2, r1
    9a1c:	4621      	mov	r1, r4
    9a1e:	f7ff f837 	bl	8a90 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    9a22:	b005      	add	sp, #20
    9a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    9a28:	460a      	mov	r2, r1
    9a2a:	4621      	mov	r1, r4
    9a2c:	f7ff f966 	bl	8cfc <le_adv_ext_report.isra.72>
    9a30:	e7f7      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a32:	4bbf      	ldr	r3, [pc, #764]	; (9d30 <hci_evt_encode+0x350>)
    9a34:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a38:	2200      	movs	r2, #0
    9a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9a3e:	4313      	orrs	r3, r2
    9a40:	f104 060a 	add.w	r6, r4, #10
    9a44:	d007      	beq.n	9a56 <hci_evt_encode+0x76>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    9a46:	4bbb      	ldr	r3, [pc, #748]	; (9d34 <hci_evt_encode+0x354>)
    9a48:	e9d3 2300 	ldrd	r2, r3, [r3]
    9a4c:	2300      	movs	r3, #0
    9a4e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9a52:	4313      	orrs	r3, r2
    9a54:	d10f      	bne.n	9a76 <hci_evt_encode+0x96>
		addr.type = adv->tx_addr;
    9a56:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9a58:	2206      	movs	r2, #6
		addr.type = adv->tx_addr;
    9a5a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9a5e:	4631      	mov	r1, r6
    9a60:	f10d 0009 	add.w	r0, sp, #9
		addr.type = adv->tx_addr;
    9a64:	f88d 3008 	strb.w	r3, [sp, #8]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    9a68:	f7f6 fdba 	bl	5e0 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    9a6c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9a70:	f7ff f926 	bl	8cc0 <bt_addr_le_to_str.isra.70>
    9a74:	e7d5      	b.n	9a22 <hci_evt_encode+0x42>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    9a76:	2208      	movs	r2, #8
    9a78:	2113      	movs	r1, #19
    9a7a:	4628      	mov	r0, r5
    9a7c:	f7fe fff2 	bl	8a64 <meta_evt>
	sep->handle = 0;
    9a80:	2300      	movs	r3, #0
    9a82:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    9a84:	7a23      	ldrb	r3, [r4, #8]
    9a86:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9a8a:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    9a8c:	2206      	movs	r2, #6
    9a8e:	4631      	mov	r1, r6
    9a90:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9a92:	f7f6 fda5 	bl	5e0 <memcpy>
    9a96:	e7c4      	b.n	9a22 <hci_evt_encode+0x42>
			le_conn_complete(cc->status, cc, handle, buf);
    9a98:	7ae7      	ldrb	r7, [r4, #11]
	if (!status) {
    9a9a:	b93f      	cbnz	r7, 9aac <hci_evt_encode+0xcc>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    9a9c:	f104 0314 	add.w	r3, r4, #20
    9aa0:	22ff      	movs	r2, #255	; 0xff
    9aa2:	f104 010e 	add.w	r1, r4, #14
    9aa6:	7b60      	ldrb	r0, [r4, #13]
    9aa8:	f008 fc08 	bl	122bc <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9aac:	4ba0      	ldr	r3, [pc, #640]	; (9d30 <hci_evt_encode+0x350>)
    9aae:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ab2:	2200      	movs	r2, #0
    9ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9ab8:	4313      	orrs	r3, r2
    9aba:	d0b2      	beq.n	9a22 <hci_evt_encode+0x42>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9abc:	4b9d      	ldr	r3, [pc, #628]	; (9d34 <hci_evt_encode+0x354>)
    9abe:	e9d3 2300 	ldrd	r2, r3, [r3]
    9ac2:	f240 2001 	movw	r0, #513	; 0x201
    9ac6:	2100      	movs	r1, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    9ac8:	f402 7800 	and.w	r8, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9acc:	400b      	ands	r3, r1
    9ace:	4002      	ands	r2, r0
    9ad0:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    9ad2:	f04f 0900 	mov.w	r9, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    9ad6:	d0a4      	beq.n	9a22 <hci_evt_encode+0x42>
	if (!status) {
    9ad8:	2f00      	cmp	r7, #0
    9ada:	f040 81dd 	bne.w	9e98 <hci_evt_encode+0x4b8>
		conn_count++;
    9ade:	4a96      	ldr	r2, [pc, #600]	; (9d38 <hci_evt_encode+0x358>)
    9ae0:	6813      	ldr	r3, [r2, #0]
    9ae2:	3301      	adds	r3, #1
    9ae4:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    9ae6:	ea58 0309 	orrs.w	r3, r8, r9
    9aea:	f104 080e 	add.w	r8, r4, #14
    9aee:	f040 81df 	bne.w	9eb0 <hci_evt_encode+0x4d0>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9af2:	2212      	movs	r2, #18
    9af4:	2101      	movs	r1, #1
    9af6:	4628      	mov	r0, r5
    9af8:	f7fe ffb4 	bl	8a64 <meta_evt>
	lecc->status = 0x00;
    9afc:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    9afe:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    9b02:	7b23      	ldrb	r3, [r4, #12]
    9b04:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    9b06:	7b63      	ldrb	r3, [r4, #13]
    9b08:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9b0a:	4605      	mov	r5, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    9b0c:	2206      	movs	r2, #6
    9b0e:	4641      	mov	r1, r8
    9b10:	3005      	adds	r0, #5
    9b12:	f7f6 fd65 	bl	5e0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    9b16:	f8b4 3021 	ldrh.w	r3, [r4, #33]	; 0x21
    9b1a:	f8a5 300b 	strh.w	r3, [r5, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    9b1e:	f8b4 3023 	ldrh.w	r3, [r4, #35]	; 0x23
    9b22:	f8a5 300d 	strh.w	r3, [r5, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    9b26:	f8b4 3025 	ldrh.w	r3, [r4, #37]	; 0x25
    9b2a:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = radio_cc->mca;
    9b2e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    9b32:	746b      	strb	r3, [r5, #17]
    9b34:	e775      	b.n	9a22 <hci_evt_encode+0x42>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9b36:	221e      	movs	r2, #30
    9b38:	210a      	movs	r1, #10
    9b3a:	4628      	mov	r0, r5
    9b3c:	f7fe ff92 	bl	8a64 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    9b40:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9b42:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    9b44:	2100      	movs	r1, #0
    9b46:	f7f6 fd77 	bl	638 <memset>
		lecc->status = status;
    9b4a:	7027      	strb	r7, [r4, #0]
    9b4c:	e769      	b.n	9a22 <hci_evt_encode+0x42>
		if ((radio_cc->own_addr_type) &&
    9b4e:	f894 3020 	ldrb.w	r3, [r4, #32]
    9b52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9b56:	2b40      	cmp	r3, #64	; 0x40
    9b58:	f040 81c2 	bne.w	9ee0 <hci_evt_encode+0x500>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    9b5c:	2206      	movs	r2, #6
    9b5e:	f104 011b 	add.w	r1, r4, #27
    9b62:	f7f6 fd3d 	bl	5e0 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    9b66:	2206      	movs	r2, #6
    9b68:	f104 0114 	add.w	r1, r4, #20
    9b6c:	f105 0011 	add.w	r0, r5, #17
    9b70:	f7f6 fd36 	bl	5e0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    9b74:	f8b4 3021 	ldrh.w	r3, [r4, #33]	; 0x21
    9b78:	f8a5 3017 	strh.w	r3, [r5, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    9b7c:	f8b4 3023 	ldrh.w	r3, [r4, #35]	; 0x23
    9b80:	f8a5 3019 	strh.w	r3, [r5, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    9b84:	f8b4 3025 	ldrh.w	r3, [r4, #37]	; 0x25
    9b88:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = radio_cc->mca;
    9b8c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    9b90:	776b      	strb	r3, [r5, #29]
    9b92:	e746      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    9b94:	4b66      	ldr	r3, [pc, #408]	; (9d30 <hci_evt_encode+0x350>)
    9b96:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b9a:	2300      	movs	r3, #0
    9b9c:	f002 0210 	and.w	r2, r2, #16
    9ba0:	4313      	orrs	r3, r2
    9ba2:	f43f af3e 	beq.w	9a22 <hci_evt_encode+0x42>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    9ba6:	2204      	movs	r2, #4
    9ba8:	2105      	movs	r1, #5
    9baa:	4628      	mov	r0, r5
    9bac:	f7fe ff13 	bl	89d6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9bb0:	2104      	movs	r1, #4
    9bb2:	f105 0008 	add.w	r0, r5, #8
    9bb6:	f009 fb8f 	bl	132d8 <net_buf_simple_add>
	ep->status = 0x00;
    9bba:	2300      	movs	r3, #0
	conn_count--;
    9bbc:	4a5e      	ldr	r2, [pc, #376]	; (9d38 <hci_evt_encode+0x358>)
	ep->status = 0x00;
    9bbe:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9bc0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    9bc4:	7a23      	ldrb	r3, [r4, #8]
    9bc6:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    9bc8:	6813      	ldr	r3, [r2, #0]
    9bca:	3b01      	subs	r3, #1
    9bcc:	6013      	str	r3, [r2, #0]
    9bce:	e728      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9bd0:	4b57      	ldr	r3, [pc, #348]	; (9d30 <hci_evt_encode+0x350>)
    9bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bd6:	2200      	movs	r2, #0
    9bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9bdc:	4313      	orrs	r3, r2
    9bde:	f43f af20 	beq.w	9a22 <hci_evt_encode+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    9be2:	4b54      	ldr	r3, [pc, #336]	; (9d34 <hci_evt_encode+0x354>)
    9be4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9be8:	2300      	movs	r3, #0
    9bea:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9bee:	4313      	orrs	r3, r2
    9bf0:	f43f af17 	beq.w	9a22 <hci_evt_encode+0x42>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    9bf4:	2209      	movs	r2, #9
    9bf6:	2103      	movs	r1, #3
    9bf8:	4628      	mov	r0, r5
    9bfa:	f7fe ff33 	bl	8a64 <meta_evt>
	sep->status = radio_cu->status;
    9bfe:	7ae3      	ldrb	r3, [r4, #11]
    9c00:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9c02:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    9c04:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    9c08:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    9c0c:	89e3      	ldrh	r3, [r4, #14]
    9c0e:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    9c12:	8a23      	ldrh	r3, [r4, #16]
    9c14:	f8a0 3007 	strh.w	r3, [r0, #7]
    9c18:	e703      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    9c1a:	4b45      	ldr	r3, [pc, #276]	; (9d30 <hci_evt_encode+0x350>)
    9c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c20:	2200      	movs	r2, #0
    9c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    9c26:	4313      	orrs	r3, r2
    9c28:	f43f aefb 	beq.w	9a22 <hci_evt_encode+0x42>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    9c2c:	2203      	movs	r2, #3
    9c2e:	2130      	movs	r1, #48	; 0x30
    9c30:	4628      	mov	r0, r5
    9c32:	f7fe fed0 	bl	89d6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9c36:	2103      	movs	r1, #3
    9c38:	f105 0008 	add.w	r0, r5, #8
    9c3c:	f009 fb4c 	bl	132d8 <net_buf_simple_add>
	ep->status = 0x00;
    9c40:	2300      	movs	r3, #0
    9c42:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9c44:	f8a0 6001 	strh.w	r6, [r0, #1]
    9c48:	e6eb      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    9c4a:	4b3c      	ldr	r3, [pc, #240]	; (9d3c <hci_evt_encode+0x35c>)
    9c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c50:	2300      	movs	r3, #0
    9c52:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    9c56:	4313      	orrs	r3, r2
    9c58:	f43f aee3 	beq.w	9a22 <hci_evt_encode+0x42>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    9c5c:	2202      	movs	r2, #2
    9c5e:	2157      	movs	r1, #87	; 0x57
    9c60:	4628      	mov	r0, r5
    9c62:	f7fe feb8 	bl	89d6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9c66:	2102      	movs	r1, #2
    9c68:	f105 0008 	add.w	r0, r5, #8
    9c6c:	f009 fb34 	bl	132d8 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    9c70:	8006      	strh	r6, [r0, #0]
    9c72:	e6d6      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9c74:	4b2e      	ldr	r3, [pc, #184]	; (9d30 <hci_evt_encode+0x350>)
    9c76:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c7a:	2200      	movs	r2, #0
    9c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9c80:	4313      	orrs	r3, r2
    9c82:	f43f aece 	beq.w	9a22 <hci_evt_encode+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    9c86:	4b2b      	ldr	r3, [pc, #172]	; (9d34 <hci_evt_encode+0x354>)
    9c88:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c8c:	2300      	movs	r3, #0
    9c8e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9c92:	4313      	orrs	r3, r2
    9c94:	f43f aec5 	beq.w	9a22 <hci_evt_encode+0x42>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    9c98:	2203      	movs	r2, #3
    9c9a:	2114      	movs	r1, #20
    9c9c:	4628      	mov	r0, r5
    9c9e:	f7fe fee1 	bl	8a64 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9ca2:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    9ca4:	7ae3      	ldrb	r3, [r4, #11]
    9ca6:	7083      	strb	r3, [r0, #2]
    9ca8:	e6bb      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9caa:	4b21      	ldr	r3, [pc, #132]	; (9d30 <hci_evt_encode+0x350>)
    9cac:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cb0:	2200      	movs	r2, #0
    9cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9cb6:	4313      	orrs	r3, r2
    9cb8:	f43f aeb3 	beq.w	9a22 <hci_evt_encode+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    9cbc:	4b1d      	ldr	r3, [pc, #116]	; (9d34 <hci_evt_encode+0x354>)
    9cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
    9cc2:	2300      	movs	r3, #0
    9cc4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9cc8:	4313      	orrs	r3, r2
    9cca:	f43f aeaa 	beq.w	9a22 <hci_evt_encode+0x42>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    9cce:	2205      	movs	r2, #5
    9cd0:	210c      	movs	r1, #12
    9cd2:	4628      	mov	r0, r5
    9cd4:	f7fe fec6 	bl	8a64 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    9cd8:	7ae3      	ldrb	r3, [r4, #11]
    9cda:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    9cdc:	f8a0 6001 	strh.w	r6, [r0, #1]
    9ce0:	7b22      	ldrb	r2, [r4, #12]
    9ce2:	2a00      	cmp	r2, #0
    9ce4:	fa92 f3a2 	rbit	r3, r2
    9ce8:	fab3 f383 	clz	r3, r3
    9cec:	bf08      	it	eq
    9cee:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9cf2:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    9cf4:	70c3      	strb	r3, [r0, #3]
    9cf6:	7b62      	ldrb	r2, [r4, #13]
    9cf8:	fa92 f3a2 	rbit	r3, r2
    9cfc:	2a00      	cmp	r2, #0
    9cfe:	fab3 f383 	clz	r3, r3
    9d02:	bf08      	it	eq
    9d04:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    9d08:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    9d0a:	7103      	strb	r3, [r0, #4]
    9d0c:	e689      	b.n	9a22 <hci_evt_encode+0x42>
	switch (pdu_data->llctrl.opcode) {
    9d0e:	7ae3      	ldrb	r3, [r4, #11]
    9d10:	3b03      	subs	r3, #3
    9d12:	2b12      	cmp	r3, #18
    9d14:	f200 80ba 	bhi.w	9e8c <hci_evt_encode+0x4ac>
    9d18:	e8df f003 	tbb	[pc, r3]
    9d1c:	37b8b812 	.word	0x37b8b812
    9d20:	b83db8af 	.word	0xb83db8af
    9d24:	b86344b8 	.word	0xb86344b8
    9d28:	b8b8b867 	.word	0xb8b8b867
    9d2c:	8fb8      	.short	0x8fb8
    9d2e:	8f          	.byte	0x8f
    9d2f:	00          	.byte	0x00
    9d30:	2000ce80 	.word	0x2000ce80
    9d34:	2000ce88 	.word	0x2000ce88
    9d38:	200008d0 	.word	0x200008d0
    9d3c:	200008d8 	.word	0x200008d8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9d40:	4b6a      	ldr	r3, [pc, #424]	; (9eec <hci_evt_encode+0x50c>)
    9d42:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d46:	2200      	movs	r2, #0
    9d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9d4c:	4313      	orrs	r3, r2
    9d4e:	f43f ae68 	beq.w	9a22 <hci_evt_encode+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    9d52:	4b67      	ldr	r3, [pc, #412]	; (9ef0 <hci_evt_encode+0x510>)
    9d54:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d58:	2300      	movs	r3, #0
    9d5a:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9d5e:	4313      	orrs	r3, r2
    9d60:	f43f ae5f 	beq.w	9a22 <hci_evt_encode+0x42>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9d64:	220c      	movs	r2, #12
    9d66:	2105      	movs	r1, #5
    9d68:	4628      	mov	r0, r5
    9d6a:	f7fe fe7b 	bl	8a64 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9d6e:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    9d70:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9d72:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    9d76:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    9d7a:	f7f6 fc31 	bl	5e0 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    9d7e:	2202      	movs	r2, #2
    9d80:	f104 0114 	add.w	r1, r4, #20
    9d84:	f105 000a 	add.w	r0, r5, #10
    9d88:	e683      	b.n	9a92 <hci_evt_encode+0xb2>
		encrypt_change(0x00, handle, buf);
    9d8a:	460a      	mov	r2, r1
    9d8c:	2000      	movs	r0, #0
    9d8e:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9d90:	f7fe ff48 	bl	8c24 <encrypt_change>
    9d94:	e645      	b.n	9a22 <hci_evt_encode+0x42>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    9d96:	460b      	mov	r3, r1
    9d98:	4632      	mov	r2, r6
    9d9a:	4601      	mov	r1, r0
    9d9c:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9d9e:	f7fe ff61 	bl	8c64 <le_remote_feat_complete>
    9da2:	e63e      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    9da4:	4b51      	ldr	r3, [pc, #324]	; (9eec <hci_evt_encode+0x50c>)
    9da6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9daa:	2300      	movs	r3, #0
    9dac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    9db0:	4313      	orrs	r3, r2
    9db2:	f43f ae36 	beq.w	9a22 <hci_evt_encode+0x42>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    9db6:	2208      	movs	r2, #8
    9db8:	210c      	movs	r1, #12
    9dba:	4628      	mov	r0, r5
    9dbc:	f7fe fe0b 	bl	89d6 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    9dc0:	2108      	movs	r1, #8
    9dc2:	1868      	adds	r0, r5, r1
    9dc4:	f009 fa88 	bl	132d8 <net_buf_simple_add>
	ep->status = 0x00;
    9dc8:	2300      	movs	r3, #0
    9dca:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    9dcc:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    9dd0:	7b23      	ldrb	r3, [r4, #12]
    9dd2:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    9dd4:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    9dd8:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    9dda:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    9dde:	80c3      	strh	r3, [r0, #6]
    9de0:	e61f      	b.n	9a22 <hci_evt_encode+0x42>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    9de2:	460a      	mov	r2, r1
    9de4:	7b20      	ldrb	r0, [r4, #12]
    9de6:	4631      	mov	r1, r6
    9de8:	e7d2      	b.n	9d90 <hci_evt_encode+0x3b0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9dea:	4b40      	ldr	r3, [pc, #256]	; (9eec <hci_evt_encode+0x50c>)
    9dec:	e9d3 2300 	ldrd	r2, r3, [r3]
    9df0:	2200      	movs	r2, #0
    9df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9df6:	4313      	orrs	r3, r2
    9df8:	d007      	beq.n	9e0a <hci_evt_encode+0x42a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    9dfa:	4b3d      	ldr	r3, [pc, #244]	; (9ef0 <hci_evt_encode+0x510>)
    9dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e00:	2300      	movs	r3, #0
    9e02:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9e06:	4313      	orrs	r3, r2
    9e08:	d108      	bne.n	9e1c <hci_evt_encode+0x43c>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9e0a:	2300      	movs	r3, #0
    9e0c:	9301      	str	r3, [sp, #4]
    9e0e:	9300      	str	r3, [sp, #0]
    9e10:	221a      	movs	r2, #26
    9e12:	2102      	movs	r1, #2
    9e14:	4630      	mov	r0, r6
    9e16:	f005 fef3 	bl	fc00 <ll_conn_update>
    9e1a:	e602      	b.n	9a22 <hci_evt_encode+0x42>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    9e1c:	220a      	movs	r2, #10
    9e1e:	2106      	movs	r1, #6
    9e20:	4628      	mov	r0, r5
    9e22:	f7fe fe1f 	bl	8a64 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9e26:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    9e28:	89a3      	ldrh	r3, [r4, #12]
    9e2a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    9e2c:	89e3      	ldrh	r3, [r4, #14]
    9e2e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    9e30:	8a23      	ldrh	r3, [r4, #16]
    9e32:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    9e34:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9e36:	8103      	strh	r3, [r0, #8]
    9e38:	e5f3      	b.n	9a22 <hci_evt_encode+0x42>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9e3a:	4b2c      	ldr	r3, [pc, #176]	; (9eec <hci_evt_encode+0x50c>)
    9e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e40:	2200      	movs	r2, #0
    9e42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    9e46:	4313      	orrs	r3, r2
    9e48:	f43f adeb 	beq.w	9a22 <hci_evt_encode+0x42>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    9e4c:	4b28      	ldr	r3, [pc, #160]	; (9ef0 <hci_evt_encode+0x510>)
    9e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e52:	2300      	movs	r3, #0
    9e54:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    9e58:	4313      	orrs	r3, r2
    9e5a:	f43f ade2 	beq.w	9a22 <hci_evt_encode+0x42>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    9e5e:	220a      	movs	r2, #10
    9e60:	2107      	movs	r1, #7
    9e62:	4628      	mov	r0, r5
    9e64:	f7fe fdfe 	bl	8a64 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    9e68:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    9e6a:	8a23      	ldrh	r3, [r4, #16]
    9e6c:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    9e6e:	8a63      	ldrh	r3, [r4, #18]
    9e70:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    9e72:	89a3      	ldrh	r3, [r4, #12]
    9e74:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    9e76:	89e3      	ldrh	r3, [r4, #14]
    9e78:	e7dd      	b.n	9e36 <hci_evt_encode+0x456>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    9e7a:	7b23      	ldrb	r3, [r4, #12]
    9e7c:	2b0e      	cmp	r3, #14
    9e7e:	f47f add0 	bne.w	9a22 <hci_evt_encode+0x42>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    9e82:	460b      	mov	r3, r1
    9e84:	4632      	mov	r2, r6
    9e86:	2100      	movs	r1, #0
    9e88:	201a      	movs	r0, #26
    9e8a:	e788      	b.n	9d9e <hci_evt_encode+0x3be>
		LL_ASSERT(0);
    9e8c:	4040      	eors	r0, r0
    9e8e:	f380 8811 	msr	BASEPRI, r0
    9e92:	f04f 0004 	mov.w	r0, #4
    9e96:	df02      	svc	2
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    9e98:	ea58 0309 	orrs.w	r3, r8, r9
    9e9c:	f47f ae4b 	bne.w	9b36 <hci_evt_encode+0x156>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9ea0:	2212      	movs	r2, #18
    9ea2:	2101      	movs	r1, #1
    9ea4:	4628      	mov	r0, r5
    9ea6:	f7fe fddd 	bl	8a64 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    9eaa:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    9eac:	4604      	mov	r4, r0
    9eae:	e649      	b.n	9b44 <hci_evt_encode+0x164>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9eb0:	221e      	movs	r2, #30
    9eb2:	210a      	movs	r1, #10
    9eb4:	4628      	mov	r0, r5
    9eb6:	f7fe fdd5 	bl	8a64 <meta_evt>
		leecc->status = 0x00;
    9eba:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    9ebc:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    9ec0:	7b23      	ldrb	r3, [r4, #12]
    9ec2:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    9ec4:	7b63      	ldrb	r3, [r4, #13]
    9ec6:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    9ec8:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    9eca:	2206      	movs	r2, #6
    9ecc:	4641      	mov	r1, r8
    9ece:	3005      	adds	r0, #5
    9ed0:	f7f6 fb86 	bl	5e0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    9ed4:	7ea3      	ldrb	r3, [r4, #26]
    9ed6:	f105 000b 	add.w	r0, r5, #11
    9eda:	2b00      	cmp	r3, #0
    9edc:	f47f ae37 	bne.w	9b4e <hci_evt_encode+0x16e>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    9ee0:	2206      	movs	r2, #6
    9ee2:	2100      	movs	r1, #0
    9ee4:	f7f6 fba8 	bl	638 <memset>
    9ee8:	e63d      	b.n	9b66 <hci_evt_encode+0x186>
    9eea:	bf00      	nop
    9eec:	2000ce80 	.word	0x2000ce80
    9ef0:	2000ce88 	.word	0x2000ce88

00009ef4 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    9ef4:	b570      	push	{r4, r5, r6, lr}
    9ef6:	4606      	mov	r6, r0
    9ef8:	460d      	mov	r5, r1
    9efa:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    9efc:	2113      	movs	r1, #19
    9efe:	2205      	movs	r2, #5
    9f00:	f7fe fd69 	bl	89d6 <evt_create>

	ep = net_buf_add(buf, len);
    9f04:	2105      	movs	r1, #5
    9f06:	f106 0008 	add.w	r0, r6, #8
    9f0a:	f009 f9e5 	bl	132d8 <net_buf_simple_add>
	ep->num_handles = num_handles;
    9f0e:	2301      	movs	r3, #1
    9f10:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    9f12:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    9f16:	f8a0 4003 	strh.w	r4, [r0, #3]
    9f1a:	bd70      	pop	{r4, r5, r6, pc}

00009f1c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9f1c:	7903      	ldrb	r3, [r0, #4]
    9f1e:	2b01      	cmp	r3, #1
    9f20:	d006      	beq.n	9f30 <hci_get_class+0x14>
    9f22:	3b02      	subs	r3, #2
    9f24:	b2db      	uxtb	r3, r3
    9f26:	2b0a      	cmp	r3, #10
    9f28:	d80a      	bhi.n	9f40 <hci_get_class+0x24>
    9f2a:	4a07      	ldr	r2, [pc, #28]	; (9f48 <hci_get_class+0x2c>)
    9f2c:	56d0      	ldrsb	r0, [r2, r3]
    9f2e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    9f30:	7a03      	ldrb	r3, [r0, #8]
    9f32:	f003 0303 	and.w	r3, r3, #3
    9f36:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    9f38:	bf0c      	ite	eq
    9f3a:	2002      	moveq	r0, #2
    9f3c:	2003      	movne	r0, #3
    9f3e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    9f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    9f44:	4770      	bx	lr
    9f46:	bf00      	nop
    9f48:	00014d37 	.word	0x00014d37

00009f4c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    9f4c:	4b08      	ldr	r3, [pc, #32]	; (9f70 <hci_init+0x24>)
    9f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9f52:	f641 71ff 	movw	r1, #8191	; 0x1fff
    9f56:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    9f5a:	4b06      	ldr	r3, [pc, #24]	; (9f74 <hci_init+0x28>)
    9f5c:	2000      	movs	r0, #0
    9f5e:	2100      	movs	r1, #0
    9f60:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    9f64:	4b04      	ldr	r3, [pc, #16]	; (9f78 <hci_init+0x2c>)
    9f66:	201f      	movs	r0, #31
    9f68:	2100      	movs	r1, #0
    9f6a:	e9c3 0100 	strd	r0, r1, [r3]
    9f6e:	4770      	bx	lr
    9f70:	2000ce80 	.word	0x2000ce80
    9f74:	200008d8 	.word	0x200008d8
    9f78:	2000ce88 	.word	0x2000ce88

00009f7c <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    9f7c:	bf20      	wfe
	__SEV();
    9f7e:	bf40      	sev
	__WFE();
    9f80:	bf20      	wfe
    9f82:	4770      	bx	lr

00009f84 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    9f84:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    9f86:	4b0d      	ldr	r3, [pc, #52]	; (9fbc <pdu_len_cmp+0x38>)
{
    9f88:	b089      	sub	sp, #36	; 0x24
    9f8a:	4605      	mov	r5, r0
    9f8c:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    9f8e:	aa01      	add	r2, sp, #4
    9f90:	f103 0718 	add.w	r7, r3, #24
    9f94:	6818      	ldr	r0, [r3, #0]
    9f96:	6859      	ldr	r1, [r3, #4]
    9f98:	4614      	mov	r4, r2
    9f9a:	c403      	stmia	r4!, {r0, r1}
    9f9c:	3308      	adds	r3, #8
    9f9e:	42bb      	cmp	r3, r7
    9fa0:	4622      	mov	r2, r4
    9fa2:	d1f7      	bne.n	9f94 <pdu_len_cmp+0x10>
    9fa4:	881b      	ldrh	r3, [r3, #0]
    9fa6:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    9fa8:	ab08      	add	r3, sp, #32
    9faa:	441d      	add	r5, r3
    9fac:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    9fb0:	1b83      	subs	r3, r0, r6
    9fb2:	4258      	negs	r0, r3
    9fb4:	4158      	adcs	r0, r3
    9fb6:	b009      	add	sp, #36	; 0x24
    9fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9fba:	bf00      	nop
    9fbc:	000148e9 	.word	0x000148e9

00009fc0 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    9fc0:	6008      	str	r0, [r1, #0]
    9fc2:	4770      	bx	lr

00009fc4 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9fc4:	b918      	cbnz	r0, 9fce <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    9fc6:	680b      	ldr	r3, [r1, #0]
    9fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9fcc:	600b      	str	r3, [r1, #0]
    9fce:	4770      	bx	lr

00009fd0 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    9fd0:	b918      	cbnz	r0, 9fda <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    9fd2:	680b      	ldr	r3, [r1, #0]
    9fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9fd8:	600b      	str	r3, [r1, #0]
    9fda:	4770      	bx	lr

00009fdc <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    9fdc:	b570      	push	{r4, r5, r6, lr}
    9fde:	1d03      	adds	r3, r0, #4
    9fe0:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    9fe2:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    9fe4:	429d      	cmp	r5, r3
    9fe6:	d101      	bne.n	9fec <chan_sel_remap+0x10>
    9fe8:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    9fea:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    9fec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    9ff0:	2200      	movs	r2, #0
    9ff2:	18a0      	adds	r0, r4, r2
    9ff4:	2a08      	cmp	r2, #8
    9ff6:	b2c0      	uxtb	r0, r0
    9ff8:	d101      	bne.n	9ffe <chan_sel_remap+0x22>
    9ffa:	4604      	mov	r4, r0
    9ffc:	e7f2      	b.n	9fe4 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    9ffe:	f016 0f01 	tst.w	r6, #1
    a002:	d003      	beq.n	a00c <chan_sel_remap+0x30>
				if (chan_index == 0) {
    a004:	2900      	cmp	r1, #0
    a006:	d0f0      	beq.n	9fea <chan_sel_remap+0xe>
				chan_index--;
    a008:	3901      	subs	r1, #1
    a00a:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    a00c:	0876      	lsrs	r6, r6, #1
    a00e:	3201      	adds	r2, #1
    a010:	e7ef      	b.n	9ff2 <chan_sel_remap+0x16>
	...

0000a014 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    a014:	4b09      	ldr	r3, [pc, #36]	; (a03c <packet_rx_acquired_count_get+0x28>)
    a016:	f893 0d2a 	ldrb.w	r0, [r3, #3370]	; 0xd2a
	    _radio.packet_rx_last) {
    a01a:	f893 2d29 	ldrb.w	r2, [r3, #3369]	; 0xd29
	if (_radio.packet_rx_acquire >=
    a01e:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    a020:	bf3b      	ittet	cc
    a022:	f893 2d29 	ldrbcc.w	r2, [r3, #3369]	; 0xd29
    a026:	f893 3d28 	ldrbcc.w	r3, [r3, #3368]	; 0xd28
			_radio.packet_rx_last);
    a02a:	f893 3d29 	ldrbcs.w	r3, [r3, #3369]	; 0xd29
			_radio.packet_rx_last +
    a02e:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    a030:	bf2c      	ite	cs
    a032:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    a034:	1a80      	subcc	r0, r0, r2
    a036:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    a038:	4770      	bx	lr
    a03a:	bf00      	nop
    a03c:	200008e0 	.word	0x200008e0

0000a040 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    a040:	b508      	push	{r3, lr}
    a042:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    a044:	f7ff ffe6 	bl	a014 <packet_rx_acquired_count_get>
    a048:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    a04a:	bf21      	itttt	cs
    a04c:	4b04      	ldrcs	r3, [pc, #16]	; (a060 <packet_rx_reserve_get+0x20>)
    a04e:	f893 2d29 	ldrbcs.w	r2, [r3, #3369]	; 0xd29
    a052:	f8d3 3d24 	ldrcs.w	r3, [r3, #3364]	; 0xd24
    a056:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    a05a:	bf38      	it	cc
    a05c:	2000      	movcc	r0, #0
}
    a05e:	bd08      	pop	{r3, pc}
    a060:	200008e0 	.word	0x200008e0

0000a064 <packet_rx_allocate>:
{
    a064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    a068:	4d22      	ldr	r5, [pc, #136]	; (a0f4 <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    a06a:	f895 4d2a 	ldrb.w	r4, [r5, #3370]	; 0xd2a
    a06e:	f895 9d3c 	ldrb.w	r9, [r5, #3388]	; 0xd3c
	if (acquire == _radio.packet_rx_count) {
    a072:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
	acquire = _radio.packet_rx_acquire + 1;
    a076:	3401      	adds	r4, #1
    a078:	4581      	cmp	r9, r0
    a07a:	b2e4      	uxtb	r4, r4
    a07c:	bf28      	it	cs
    a07e:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    a080:	f505 6753 	add.w	r7, r5, #3376	; 0xd30
		acquire = 0;
    a084:	42a3      	cmp	r3, r4
    a086:	bf08      	it	eq
    a088:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    a08a:	f605 5818 	addw	r8, r5, #3352	; 0xd18
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    a08e:	f1b9 0f00 	cmp.w	r9, #0
    a092:	d003      	beq.n	a09c <packet_rx_allocate+0x38>
    a094:	f895 3d29 	ldrb.w	r3, [r5, #3369]	; 0xd29
    a098:	429c      	cmp	r4, r3
    a09a:	d101      	bne.n	a0a0 <packet_rx_allocate+0x3c>
    a09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    a0a0:	4638      	mov	r0, r7
    a0a2:	f7fd fb70 	bl	7786 <mem_acquire>
		if (!link) {
    a0a6:	4606      	mov	r6, r0
    a0a8:	2800      	cmp	r0, #0
    a0aa:	d0f7      	beq.n	a09c <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    a0ac:	4640      	mov	r0, r8
    a0ae:	f7fd fb6a 	bl	7786 <mem_acquire>
		if (!node_rx) {
    a0b2:	b928      	cbnz	r0, a0c0 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    a0b4:	4630      	mov	r0, r6
    a0b6:	4910      	ldr	r1, [pc, #64]	; (a0f8 <packet_rx_allocate+0x94>)
}
    a0b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    a0bc:	f7fd bb7d 	b.w	77ba <mem_release>
		node_rx->hdr.onion.link = link;
    a0c0:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    a0c2:	f895 2d2a 	ldrb.w	r2, [r5, #3370]	; 0xd2a
    a0c6:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
    a0ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    a0ce:	f885 4d2a 	strb.w	r4, [r5, #3370]	; 0xd2a
		if (acquire == _radio.packet_rx_count) {
    a0d2:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
		acquire = _radio.packet_rx_acquire + 1;
    a0d6:	3401      	adds	r4, #1
    a0d8:	b2e4      	uxtb	r4, r4
			acquire = 0;
    a0da:	42a3      	cmp	r3, r4
    a0dc:	bf08      	it	eq
    a0de:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    a0e0:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
    a0e4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a0e8:	3b01      	subs	r3, #1
    a0ea:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
    a0ee:	fa5f f989 	uxtb.w	r9, r9
    a0f2:	e7cc      	b.n	a08e <packet_rx_allocate+0x2a>
    a0f4:	200008e0 	.word	0x200008e0
    a0f8:	20001610 	.word	0x20001610

0000a0fc <common_init>:
{
    a0fc:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    a0fe:	4c34      	ldr	r4, [pc, #208]	; (a1d0 <common_init+0xd4>)
    a100:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    a104:	2a00      	cmp	r2, #0
    a106:	d037      	beq.n	a178 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    a108:	f604 43f4 	addw	r3, r4, #3316	; 0xcf4
    a10c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a110:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    a114:	f7fd fb10 	bl	7738 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    a118:	4b2e      	ldr	r3, [pc, #184]	; (a1d4 <common_init+0xd8>)
    a11a:	f894 2d22 	ldrb.w	r2, [r4, #3362]	; 0xd22
    a11e:	f8b4 1d20 	ldrh.w	r1, [r4, #3360]	; 0xd20
    a122:	f8d4 0d14 	ldr.w	r0, [r4, #3348]	; 0xd14
    a126:	f7fd fb07 	bl	7738 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    a12a:	f894 1d28 	ldrb.w	r1, [r4, #3368]	; 0xd28
    a12e:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    a132:	4b29      	ldr	r3, [pc, #164]	; (a1d8 <common_init+0xdc>)
    a134:	f8d4 0d2c 	ldr.w	r0, [r4, #3372]	; 0xd2c
    a138:	440a      	add	r2, r1
    a13a:	2108      	movs	r1, #8
    a13c:	f7fd fafc 	bl	7738 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    a140:	4b26      	ldr	r3, [pc, #152]	; (a1dc <common_init+0xe0>)
    a142:	f8d4 0d40 	ldr.w	r0, [r4, #3392]	; 0xd40
    a146:	2202      	movs	r2, #2
    a148:	2124      	movs	r1, #36	; 0x24
    a14a:	f7fd faf5 	bl	7738 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    a14e:	f894 2d5c 	ldrb.w	r2, [r4, #3420]	; 0xd5c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    a152:	f8d4 0d48 	ldr.w	r0, [r4, #3400]	; 0xd48
    a156:	4b22      	ldr	r3, [pc, #136]	; (a1e0 <common_init+0xe4>)
    a158:	f8b4 1d50 	ldrh.w	r1, [r4, #3408]	; 0xd50
    a15c:	3a01      	subs	r2, #1
    a15e:	b292      	uxth	r2, r2
    a160:	f7fd faea 	bl	7738 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    a164:	481c      	ldr	r0, [pc, #112]	; (a1d8 <common_init+0xdc>)
    a166:	f7fd fb0e 	bl	7786 <mem_acquire>
	LL_ASSERT(link);
    a16a:	b940      	cbnz	r0, a17e <common_init+0x82>
    a16c:	4040      	eors	r0, r0
    a16e:	f380 8811 	msr	BASEPRI, r0
    a172:	f04f 0004 	mov.w	r0, #4
    a176:	df02      	svc	2
		_radio.conn_free = NULL;
    a178:	f8c4 2cf4 	str.w	r2, [r4, #3316]	; 0xcf4
    a17c:	e7cc      	b.n	a118 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    a17e:	4a19      	ldr	r2, [pc, #100]	; (a1e4 <common_init+0xe8>)
    a180:	1f11      	subs	r1, r2, #4
    a182:	f7fd fb57 	bl	7834 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    a186:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    a18a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    a18e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    a192:	231f      	movs	r3, #31
    a194:	f884 3d06 	strb.w	r3, [r4, #3334]	; 0xd06
	_radio.data_chan_count = 37;
    a198:	2325      	movs	r3, #37	; 0x25
    a19a:	f884 3d07 	strb.w	r3, [r4, #3335]	; 0xd07
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    a19e:	231b      	movs	r3, #27
    a1a0:	f8a4 3d0a 	strh.w	r3, [r4, #3338]	; 0xd0a
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    a1a4:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    a1a8:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    a1aa:	f8a4 3d0c 	strh.w	r3, [r4, #3340]	; 0xd0c
	_radio.default_phy_tx |= BIT(2);
    a1ae:	2307      	movs	r3, #7
	_radio.data_chan_map[0] = 0xFF;
    a1b0:	f884 0d02 	strb.w	r0, [r4, #3330]	; 0xd02
	_radio.data_chan_map[1] = 0xFF;
    a1b4:	f884 0d03 	strb.w	r0, [r4, #3331]	; 0xd03
	_radio.data_chan_map[2] = 0xFF;
    a1b8:	f884 0d04 	strb.w	r0, [r4, #3332]	; 0xd04
	_radio.data_chan_map[3] = 0xFF;
    a1bc:	f884 0d05 	strb.w	r0, [r4, #3333]	; 0xd05
	_radio.default_phy_tx |= BIT(2);
    a1c0:	f8a4 3d0e 	strh.w	r3, [r4, #3342]	; 0xd0e
	_radio.default_phy_rx |= BIT(2);
    a1c4:	f8a4 3d10 	strh.w	r3, [r4, #3344]	; 0xd10
}
    a1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    a1cc:	f7ff bf4a 	b.w	a064 <packet_rx_allocate>
    a1d0:	200008e0 	.word	0x200008e0
    a1d4:	200015f8 	.word	0x200015f8
    a1d8:	20001610 	.word	0x20001610
    a1dc:	20001624 	.word	0x20001624
    a1e0:	2000162c 	.word	0x2000162c
    a1e4:	20001618 	.word	0x20001618

0000a1e8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    a1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    a1ec:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    a1ee:	4294      	cmp	r4, r2
{
    a1f0:	4681      	mov	r9, r0
    a1f2:	460f      	mov	r7, r1
    a1f4:	4690      	mov	r8, r2
	if (_first == last) {
    a1f6:	d03d      	beq.n	a274 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    a1f8:	4e1f      	ldr	r6, [pc, #124]	; (a278 <tx_cmplt_get+0x90>)
    a1fa:	f8d6 3d58 	ldr.w	r3, [r6, #3416]	; 0xd58
    a1fe:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    a202:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    a204:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    a206:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a20a:	f606 5a4c 	addw	sl, r6, #3404	; 0xd4c
		if (*handle != _radio.pkt_release[_first].handle) {
    a20e:	b222      	sxth	r2, r4
    a210:	f8d6 0d58 	ldr.w	r0, [r6, #3416]	; 0xd58
    a214:	f8b9 e000 	ldrh.w	lr, [r9]
    a218:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a21c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    a220:	4596      	cmp	lr, r2
    a222:	d120      	bne.n	a266 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    a224:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    a226:	2801      	cmp	r0, #1
    a228:	f020 0303 	bic.w	r3, r0, #3
    a22c:	d90a      	bls.n	a244 <tx_cmplt_get+0x5c>
    a22e:	b1f3      	cbz	r3, a26e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    a230:	1d02      	adds	r2, r0, #4
    a232:	d01c      	beq.n	a26e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a234:	7942      	ldrb	r2, [r0, #5]
    a236:	b1d2      	cbz	r2, a26e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    a238:	7902      	ldrb	r2, [r0, #4]
    a23a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    a23e:	3a01      	subs	r2, #1
    a240:	2a01      	cmp	r2, #1
    a242:	d814      	bhi.n	a26e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    a244:	2201      	movs	r2, #1
			cmplt++;
    a246:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    a248:	604a      	str	r2, [r1, #4]
			cmplt++;
    a24a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    a24c:	b113      	cbz	r3, a254 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    a24e:	4651      	mov	r1, sl
    a250:	f7fd fab3 	bl	77ba <mem_release>
		}

		_first = _first + 1;
    a254:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    a256:	f896 2d5c 	ldrb.w	r2, [r6, #3420]	; 0xd5c
		_first = _first + 1;
    a25a:	b2e4      	uxtb	r4, r4
			_first = 0;
    a25c:	42a2      	cmp	r2, r4
    a25e:	bf08      	it	eq
    a260:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    a262:	4544      	cmp	r4, r8
    a264:	d1d3      	bne.n	a20e <tx_cmplt_get+0x26>

	*first = _first;
    a266:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    a268:	4628      	mov	r0, r5
    a26a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    a26e:	f8c1 b004 	str.w	fp, [r1, #4]
    a272:	e7eb      	b.n	a24c <tx_cmplt_get+0x64>
		return 0;
    a274:	2500      	movs	r5, #0
    a276:	e7f7      	b.n	a268 <tx_cmplt_get+0x80>
    a278:	200008e0 	.word	0x200008e0

0000a27c <connection_get>:
{
    a27c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    a27e:	4b09      	ldr	r3, [pc, #36]	; (a2a4 <connection_get+0x28>)
    a280:	f893 2cf8 	ldrb.w	r2, [r3, #3320]	; 0xcf8
    a284:	4282      	cmp	r2, r0
{
    a286:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    a288:	d90a      	bls.n	a2a0 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    a28a:	4602      	mov	r2, r0
    a28c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a290:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    a294:	f7fd faac 	bl	77f0 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    a298:	b110      	cbz	r0, a2a0 <connection_get+0x24>
    a29a:	8c03      	ldrh	r3, [r0, #32]
    a29c:	42a3      	cmp	r3, r4
    a29e:	d000      	beq.n	a2a2 <connection_get+0x26>
	return 0;
    a2a0:	2000      	movs	r0, #0
}
    a2a2:	bd10      	pop	{r4, pc}
    a2a4:	200008e0 	.word	0x200008e0

0000a2a8 <role_disable>:
{
    a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2ac:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a2ae:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    a2b0:	2805      	cmp	r0, #5
{
    a2b2:	4605      	mov	r5, r0
    a2b4:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    a2b6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    a2b8:	d00e      	beq.n	a2d8 <role_disable+0x30>
    a2ba:	2806      	cmp	r0, #6
    a2bc:	f000 808e 	beq.w	a3dc <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    a2c0:	f240 8086 	bls.w	a3d0 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    a2c4:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    a2c6:	b280      	uxth	r0, r0
    a2c8:	f7ff ffd8 	bl	a27c <connection_get>
			if (!conn) {
    a2cc:	2800      	cmp	r0, #0
    a2ce:	f000 80d9 	beq.w	a484 <role_disable+0x1dc>
			ticks_active_to_start =
    a2d2:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    a2d6:	e010      	b.n	a2fa <role_disable+0x52>
		ticks_xtal_to_start =
    a2d8:	4b6b      	ldr	r3, [pc, #428]	; (a488 <role_disable+0x1e0>)
    a2da:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    a2dc:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a2e0:	ab02      	add	r3, sp, #8
    a2e2:	9300      	str	r3, [sp, #0]
    a2e4:	460a      	mov	r2, r1
    a2e6:	4b69      	ldr	r3, [pc, #420]	; (a48c <role_disable+0x1e4>)
    a2e8:	2103      	movs	r1, #3
    a2ea:	2000      	movs	r0, #0
    a2ec:	f7fe f95e 	bl	85ac <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a2f0:	2802      	cmp	r0, #2
    a2f2:	d066      	beq.n	a3c2 <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a2f4:	9b02      	ldr	r3, [sp, #8]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d167      	bne.n	a3ca <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    a2fa:	4c63      	ldr	r4, [pc, #396]	; (a488 <role_disable+0x1e0>)
    a2fc:	7ca3      	ldrb	r3, [r4, #18]
    a2fe:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a302:	2b00      	cmp	r3, #0
    a304:	d164      	bne.n	a3d0 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    a306:	ab06      	add	r3, sp, #24
    a308:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    a30a:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    a30c:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a310:	2103      	movs	r1, #3
    a312:	9300      	str	r3, [sp, #0]
    a314:	462a      	mov	r2, r5
    a316:	4b5d      	ldr	r3, [pc, #372]	; (a48c <role_disable+0x1e4>)
    a318:	f7fe f948 	bl	85ac <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a31c:	2802      	cmp	r0, #2
    a31e:	d063      	beq.n	a3e8 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    a320:	9b02      	ldr	r3, [sp, #8]
    a322:	2b00      	cmp	r3, #0
    a324:	d145      	bne.n	a3b2 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    a326:	7c23      	ldrb	r3, [r4, #16]
    a328:	429d      	cmp	r5, r3
    a32a:	d002      	beq.n	a332 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    a32c:	7c63      	ldrb	r3, [r4, #17]
    a32e:	429d      	cmp	r5, r3
    a330:	d13b      	bne.n	a3aa <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    a332:	ab06      	add	r3, sp, #24
    a334:	2202      	movs	r2, #2
    a336:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a33a:	2200      	movs	r2, #0
    a33c:	9300      	str	r3, [sp, #0]
    a33e:	2103      	movs	r1, #3
    a340:	4b52      	ldr	r3, [pc, #328]	; (a48c <role_disable+0x1e4>)
    a342:	4610      	mov	r0, r2
    a344:	f7fe f932 	bl	85ac <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    a348:	2802      	cmp	r0, #2
    a34a:	d107      	bne.n	a35c <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a34c:	2201      	movs	r2, #1
    a34e:	4611      	mov	r1, r2
    a350:	2003      	movs	r0, #3
    a352:	f7fd fabb 	bl	78cc <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    a356:	9b03      	ldr	r3, [sp, #12]
    a358:	2b02      	cmp	r3, #2
    a35a:	d039      	beq.n	a3d0 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    a35c:	9803      	ldr	r0, [sp, #12]
    a35e:	2800      	cmp	r0, #0
    a360:	d15e      	bne.n	a420 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    a362:	2302      	movs	r3, #2
    a364:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    a366:	7c23      	ldrb	r3, [r4, #16]
    a368:	2b00      	cmp	r3, #0
    a36a:	d031      	beq.n	a3d0 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a36c:	ab04      	add	r3, sp, #16
    a36e:	9300      	str	r3, [sp, #0]
    a370:	2201      	movs	r2, #1
    a372:	4b46      	ldr	r3, [pc, #280]	; (a48c <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    a374:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a376:	2103      	movs	r1, #3
    a378:	f7fe f918 	bl	85ac <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    a37c:	2802      	cmp	r0, #2
    a37e:	d107      	bne.n	a390 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a380:	2201      	movs	r2, #1
    a382:	4611      	mov	r1, r2
    a384:	2003      	movs	r0, #3
    a386:	f7fd faa1 	bl	78cc <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    a38a:	9b04      	ldr	r3, [sp, #16]
    a38c:	2b02      	cmp	r3, #2
    a38e:	d01f      	beq.n	a3d0 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    a390:	9a04      	ldr	r2, [sp, #16]
    a392:	2a00      	cmp	r2, #0
    a394:	d136      	bne.n	a404 <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    a396:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    a39a:	45b0      	cmp	r8, r6
    a39c:	d93e      	bls.n	a41c <role_disable+0x174>
				ret = mayfly_enqueue(
    a39e:	4b3c      	ldr	r3, [pc, #240]	; (a490 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a3a0:	4611      	mov	r1, r2
    a3a2:	2003      	movs	r0, #3
    a3a4:	f7fd faba 	bl	791c <mayfly_enqueue>
			LL_ASSERT(!ret);
    a3a8:	b990      	cbnz	r0, a3d0 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    a3aa:	7ca3      	ldrb	r3, [r4, #18]
    a3ac:	b90b      	cbnz	r3, a3b2 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    a3ae:	2301      	movs	r3, #1
    a3b0:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    a3b2:	2300      	movs	r3, #0
    a3b4:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    a3b6:	9802      	ldr	r0, [sp, #8]
}
    a3b8:	b006      	add	sp, #24
    a3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    a3be:	f7ff fddd 	bl	9f7c <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a3c2:	9b02      	ldr	r3, [sp, #8]
    a3c4:	2b02      	cmp	r3, #2
    a3c6:	d0fa      	beq.n	a3be <role_disable+0x116>
    a3c8:	e794      	b.n	a2f4 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    a3ca:	9b02      	ldr	r3, [sp, #8]
    a3cc:	2b01      	cmp	r3, #1
    a3ce:	d094      	beq.n	a2fa <role_disable+0x52>
		LL_ASSERT(0);
    a3d0:	4040      	eors	r0, r0
    a3d2:	f380 8811 	msr	BASEPRI, r0
    a3d6:	f04f 0004 	mov.w	r0, #4
    a3da:	df02      	svc	2
		ticks_xtal_to_start =
    a3dc:	4b2a      	ldr	r3, [pc, #168]	; (a488 <role_disable+0x1e0>)
    a3de:	f8d3 6c1c 	ldr.w	r6, [r3, #3100]	; 0xc1c
		ticks_active_to_start =
    a3e2:	f8d3 8c20 	ldr.w	r8, [r3, #3104]	; 0xc20
		break;
    a3e6:	e788      	b.n	a2fa <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    a3e8:	7c63      	ldrb	r3, [r4, #17]
    a3ea:	429d      	cmp	r5, r3
    a3ec:	d104      	bne.n	a3f8 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a3ee:	2201      	movs	r2, #1
    a3f0:	4611      	mov	r1, r2
    a3f2:	2003      	movs	r0, #3
    a3f4:	f7fd fa6a 	bl	78cc <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a3f8:	9b02      	ldr	r3, [sp, #8]
    a3fa:	2b02      	cmp	r3, #2
    a3fc:	d190      	bne.n	a320 <role_disable+0x78>
			cpu_sleep();
    a3fe:	f7ff fdbd 	bl	9f7c <cpu_sleep>
    a402:	e7f9      	b.n	a3f8 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    a404:	9b04      	ldr	r3, [sp, #16]
    a406:	2b01      	cmp	r3, #1
    a408:	d1e2      	bne.n	a3d0 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a40a:	2200      	movs	r2, #0
    a40c:	4611      	mov	r1, r2
    a40e:	4b20      	ldr	r3, [pc, #128]	; (a490 <role_disable+0x1e8>)
    a410:	2003      	movs	r0, #3
    a412:	f7fd fa83 	bl	791c <mayfly_enqueue>
			LL_ASSERT(!ret);
    a416:	4602      	mov	r2, r0
    a418:	2800      	cmp	r0, #0
    a41a:	d1d9      	bne.n	a3d0 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a41c:	4b1d      	ldr	r3, [pc, #116]	; (a494 <role_disable+0x1ec>)
    a41e:	e7bf      	b.n	a3a0 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    a420:	9d03      	ldr	r5, [sp, #12]
    a422:	2d01      	cmp	r5, #1
    a424:	d1d4      	bne.n	a3d0 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    a426:	2fff      	cmp	r7, #255	; 0xff
    a428:	d019      	beq.n	a45e <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    a42a:	ab06      	add	r3, sp, #24
    a42c:	2202      	movs	r2, #2
    a42e:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a432:	2103      	movs	r1, #3
    a434:	9300      	str	r3, [sp, #0]
    a436:	463a      	mov	r2, r7
    a438:	4b14      	ldr	r3, [pc, #80]	; (a48c <role_disable+0x1e4>)
    a43a:	2000      	movs	r0, #0
    a43c:	f7fe f8b6 	bl	85ac <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    a440:	2802      	cmp	r0, #2
    a442:	d107      	bne.n	a454 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    a444:	462a      	mov	r2, r5
    a446:	4629      	mov	r1, r5
    a448:	2003      	movs	r0, #3
    a44a:	f7fd fa3f 	bl	78cc <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    a44e:	9b05      	ldr	r3, [sp, #20]
    a450:	2b02      	cmp	r3, #2
    a452:	d0bd      	beq.n	a3d0 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    a454:	9b05      	ldr	r3, [sp, #20]
    a456:	b113      	cbz	r3, a45e <role_disable+0x1b6>
    a458:	9b05      	ldr	r3, [sp, #20]
    a45a:	2b01      	cmp	r3, #1
    a45c:	d1b8      	bne.n	a3d0 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    a45e:	7ce3      	ldrb	r3, [r4, #19]
    a460:	2b00      	cmp	r3, #0
    a462:	d0a2      	beq.n	a3aa <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    a464:	4b0c      	ldr	r3, [pc, #48]	; (a498 <role_disable+0x1f0>)
    a466:	2204      	movs	r2, #4
    a468:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    a46a:	2200      	movs	r2, #0
    a46c:	4611      	mov	r1, r2
    a46e:	2003      	movs	r0, #3
    a470:	f7fd fa54 	bl	791c <mayfly_enqueue>
			LL_ASSERT(!ret);
    a474:	2800      	cmp	r0, #0
    a476:	d1ab      	bne.n	a3d0 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    a478:	7ce3      	ldrb	r3, [r4, #19]
    a47a:	2b00      	cmp	r3, #0
    a47c:	d095      	beq.n	a3aa <role_disable+0x102>
				cpu_sleep();
    a47e:	f7ff fd7d 	bl	9f7c <cpu_sleep>
    a482:	e7f9      	b.n	a478 <role_disable+0x1d0>
				return 1;
    a484:	2001      	movs	r0, #1
    a486:	e797      	b.n	a3b8 <role_disable+0x110>
    a488:	200008e0 	.word	0x200008e0
    a48c:	00009fc1 	.word	0x00009fc1
    a490:	2000ced0 	.word	0x2000ced0
    a494:	2000cf60 	.word	0x2000cf60
    a498:	2000cf00 	.word	0x2000cf00

0000a49c <rx_packet_set>:
{
    a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    a49e:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    a4a2:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    a4a4:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    a4a6:	f004 0407 	and.w	r4, r4, #7
{
    a4aa:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    a4ac:	4620      	mov	r0, r4
    a4ae:	2100      	movs	r1, #0
    a4b0:	f008 f9e2 	bl	12878 <radio_phy_set>
	if (conn->enc_rx) {
    a4b4:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a4b8:	f013 0f10 	tst.w	r3, #16
    a4bc:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a4c0:	d010      	beq.n	a4e4 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    a4c2:	1d29      	adds	r1, r5, #4
    a4c4:	f042 0201 	orr.w	r2, r2, #1
    a4c8:	b2c9      	uxtb	r1, r1
    a4ca:	2008      	movs	r0, #8
    a4cc:	f008 fa38 	bl	12940 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    a4d0:	463a      	mov	r2, r7
    a4d2:	4621      	mov	r1, r4
    a4d4:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    a4d8:	f008 fc78 	bl	12dcc <radio_ccm_rx_pkt_set>
}
    a4dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    a4e0:	f008 ba60 	b.w	129a4 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    a4e4:	2008      	movs	r0, #8
    a4e6:	f042 0201 	orr.w	r2, r2, #1
    a4ea:	b2e9      	uxtb	r1, r5
    a4ec:	f008 fa28 	bl	12940 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    a4f0:	4638      	mov	r0, r7
    a4f2:	e7f3      	b.n	a4dc <rx_packet_set+0x40>

0000a4f4 <tx_packet_set>:
{
    a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4f6:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    a4f8:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    a4fc:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    a4fe:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    a502:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    a504:	09c9      	lsrs	r1, r1, #7
    a506:	4620      	mov	r0, r4
    a508:	f008 f9b6 	bl	12878 <radio_phy_set>
	if (conn->enc_tx) {
    a50c:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    a510:	f013 0f20 	tst.w	r3, #32
    a514:	ea4f 0244 	mov.w	r2, r4, lsl #1
    a518:	d00f      	beq.n	a53a <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    a51a:	1d29      	adds	r1, r5, #4
    a51c:	b2c9      	uxtb	r1, r1
    a51e:	2008      	movs	r0, #8
    a520:	f042 0201 	orr.w	r2, r2, #1
    a524:	f008 fa0c 	bl	12940 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    a528:	4639      	mov	r1, r7
    a52a:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    a52e:	f008 fca3 	bl	12e78 <radio_ccm_tx_pkt_set>
}
    a532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    a536:	f008 ba3b 	b.w	129b0 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    a53a:	2008      	movs	r0, #8
    a53c:	f042 0201 	orr.w	r2, r2, #1
    a540:	b2e9      	uxtb	r1, r5
    a542:	f008 f9fd 	bl	12940 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    a546:	4638      	mov	r0, r7
    a548:	e7f3      	b.n	a532 <tx_packet_set+0x3e>
	...

0000a54c <chan_set>:
{
    a54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    a550:	4e7d      	ldr	r6, [pc, #500]	; (a748 <chan_set+0x1fc>)
    a552:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    a556:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    a55a:	4433      	add	r3, r6
{
    a55c:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    a55e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    a562:	f003 030f 	and.w	r3, r3, #15
    a566:	2b07      	cmp	r3, #7
    a568:	f040 80e0 	bne.w	a72c <chan_set+0x1e0>
		switch (chan) {
    a56c:	2826      	cmp	r0, #38	; 0x26
    a56e:	f8df 8214 	ldr.w	r8, [pc, #532]	; a784 <chan_set+0x238>
    a572:	d030      	beq.n	a5d6 <chan_set+0x8a>
    a574:	2827      	cmp	r0, #39	; 0x27
    a576:	f8df a210 	ldr.w	sl, [pc, #528]	; a788 <chan_set+0x23c>
    a57a:	f8df 9210 	ldr.w	r9, [pc, #528]	; a78c <chan_set+0x240>
    a57e:	d034      	beq.n	a5ea <chan_set+0x9e>
    a580:	2825      	cmp	r0, #37	; 0x25
    a582:	d162      	bne.n	a64a <chan_set+0xfe>
			stop_time_37 = k_cycle_get_32();
    a584:	f7f7 fa8e 	bl	1aa4 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    a588:	4e70      	ldr	r6, [pc, #448]	; (a74c <chan_set+0x200>)
			stop_time_37 = k_cycle_get_32();
    a58a:	4b71      	ldr	r3, [pc, #452]	; (a750 <chan_set+0x204>)
			cycles_spent_37 = stop_time_37 - start_time37;
    a58c:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    a58e:	6018      	str	r0, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    a590:	f8da 2000 	ldr.w	r2, [sl]
			cycles_spent_37 = stop_time_37 - start_time37;
    a594:	4b6f      	ldr	r3, [pc, #444]	; (a754 <chan_set+0x208>)
    a596:	1bc7      	subs	r7, r0, r7
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    a598:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time37;
    a59c:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    a59e:	fb82 2305 	smull	r2, r3, r2, r5
    a5a2:	fba2 0107 	umull	r0, r1, r2, r7
    a5a6:	f8d9 2000 	ldr.w	r2, [r9]
    a5aa:	fb07 1103 	mla	r1, r7, r3, r1
    a5ae:	17d3      	asrs	r3, r2, #31
    a5b0:	f7f5 fe5a 	bl	268 <__aeabi_uldivmod>
    a5b4:	4b68      	ldr	r3, [pc, #416]	; (a758 <chan_set+0x20c>)
    a5b6:	fbb0 f0f5 	udiv	r0, r0, r5
    a5ba:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    a5bc:	f7f7 fa72 	bl	1aa4 <_timer_cycle_get_32>
    a5c0:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    a5c4:	f7f7 fa6e 	bl	1aa4 <_timer_cycle_get_32>
			pckt_send++;
    a5c8:	4a64      	ldr	r2, [pc, #400]	; (a75c <chan_set+0x210>)
			start_time37= k_cycle_get_32();
    a5ca:	6030      	str	r0, [r6, #0]
			pckt_send++;
    a5cc:	7813      	ldrb	r3, [r2, #0]
    a5ce:	3301      	adds	r3, #1
    a5d0:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    a5d2:	2002      	movs	r0, #2
    a5d4:	e09e      	b.n	a714 <chan_set+0x1c8>
			start_time = k_cycle_get_32();
    a5d6:	f7f7 fa65 	bl	1aa4 <_timer_cycle_get_32>
			pckt_send++;
    a5da:	4a60      	ldr	r2, [pc, #384]	; (a75c <chan_set+0x210>)
			start_time = k_cycle_get_32();
    a5dc:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    a5e0:	7813      	ldrb	r3, [r2, #0]
    a5e2:	3301      	adds	r3, #1
    a5e4:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    a5e6:	201a      	movs	r0, #26
    a5e8:	e094      	b.n	a714 <chan_set+0x1c8>
			stop_time_39 = k_cycle_get_32();
    a5ea:	f7f7 fa5b 	bl	1aa4 <_timer_cycle_get_32>
    a5ee:	4b5c      	ldr	r3, [pc, #368]	; (a760 <chan_set+0x214>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    a5f0:	f8da 2000 	ldr.w	r2, [sl]
			stop_time_39 = k_cycle_get_32();
    a5f4:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    a5f6:	f8d8 3000 	ldr.w	r3, [r8]
    a5fa:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    a5fe:	eba0 0e03 	sub.w	lr, r0, r3
    a602:	fb82 2307 	smull	r2, r3, r2, r7
    a606:	fbae 0102 	umull	r0, r1, lr, r2
    a60a:	f8d9 2000 	ldr.w	r2, [r9]
    a60e:	fb0e 1103 	mla	r1, lr, r3, r1
    a612:	17d3      	asrs	r3, r2, #31
    a614:	f7f5 fe28 	bl	268 <__aeabi_uldivmod>
    a618:	4b52      	ldr	r3, [pc, #328]	; (a764 <chan_set+0x218>)
    a61a:	fbb0 f0f7 	udiv	r0, r0, r7
    a61e:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    a620:	4b4e      	ldr	r3, [pc, #312]	; (a75c <chan_set+0x210>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    a622:	2500      	movs	r5, #0
			pckt_send = 0;
    a624:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    a626:	f7f7 fa3d 	bl	1aa4 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    a62a:	f896 3c69 	ldrb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    a62e:	f896 2c68 	ldrb.w	r2, [r6, #3176]	; 0xc68
			start_time = k_cycle_get_32();
    a632:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    a636:	3301      	adds	r3, #1
    a638:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    a63a:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    a63c:	f886 3c69 	strb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    a640:	d201      	bcs.n	a646 <chan_set+0xfa>
			_radio.ext_advertiser.current_slot= 0;
    a642:	f886 5c69 	strb.w	r5, [r6, #3177]	; 0xc69
			radio_freq_chan_set(80);
    a646:	2050      	movs	r0, #80	; 0x50
    a648:	e064      	b.n	a714 <chan_set+0x1c8>
			stop_time_aux1 = k_cycle_get_32();
    a64a:	f7f7 fa2b 	bl	1aa4 <_timer_cycle_get_32>
    a64e:	4b46      	ldr	r3, [pc, #280]	; (a768 <chan_set+0x21c>)
    a650:	6018      	str	r0, [r3, #0]
    a652:	f8da 3000 	ldr.w	r3, [sl]
    a656:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    a65a:	fb83 2305 	smull	r2, r3, r3, r5
    a65e:	e9cd 2300 	strd	r2, r3, [sp]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    a662:	f8d9 3000 	ldr.w	r3, [r9]
    a666:	4619      	mov	r1, r3
    a668:	17da      	asrs	r2, r3, #31
    a66a:	f8d8 3000 	ldr.w	r3, [r8]
    a66e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    a672:	9a00      	ldr	r2, [sp, #0]
    a674:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    a676:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    a678:	fba3 0102 	umull	r0, r1, r3, r2
    a67c:	9a01      	ldr	r2, [sp, #4]
    a67e:	fb03 1102 	mla	r1, r3, r2, r1
    a682:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a686:	f7f5 fdef 	bl	268 <__aeabi_uldivmod>
    a68a:	4b38      	ldr	r3, [pc, #224]	; (a76c <chan_set+0x220>)
    a68c:	fbb0 f0f5 	udiv	r0, r0, r5
    a690:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    a692:	4b2e      	ldr	r3, [pc, #184]	; (a74c <chan_set+0x200>)
    a694:	681b      	ldr	r3, [r3, #0]
    a696:	1aff      	subs	r7, r7, r3
    a698:	9b00      	ldr	r3, [sp, #0]
    a69a:	fba7 0103 	umull	r0, r1, r7, r3
    a69e:	9b01      	ldr	r3, [sp, #4]
    a6a0:	fb07 1103 	mla	r1, r7, r3, r1
    a6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a6a8:	f7f5 fdde 	bl	268 <__aeabi_uldivmod>
    a6ac:	4b30      	ldr	r3, [pc, #192]	; (a770 <chan_set+0x224>)
    a6ae:	fbb0 f0f5 	udiv	r0, r0, r5
    a6b2:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    a6b4:	f7f7 f9f6 	bl	1aa4 <_timer_cycle_get_32>
    a6b8:	4b2e      	ldr	r3, [pc, #184]	; (a774 <chan_set+0x228>)
			last_dynamic_cal = final_dynamic_cal;
    a6ba:	4f2f      	ldr	r7, [pc, #188]	; (a778 <chan_set+0x22c>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    a6bc:	2100      	movs	r1, #0
    a6be:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    a6c2:	4b2e      	ldr	r3, [pc, #184]	; (a77c <chan_set+0x230>)
    a6c4:	f8d7 8000 	ldr.w	r8, [r7]
    a6c8:	687a      	ldr	r2, [r7, #4]
    a6ca:	f8c3 8000 	str.w	r8, [r3]
    a6ce:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    a6d0:	4b2b      	ldr	r3, [pc, #172]	; (a780 <chan_set+0x234>)
    a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    a6d6:	1a82      	subs	r2, r0, r2
    a6d8:	f8da 0000 	ldr.w	r0, [sl]
    a6dc:	eb61 0303 	sbc.w	r3, r1, r3
    a6e0:	fb80 0105 	smull	r0, r1, r0, r5
    a6e4:	4351      	muls	r1, r2
    a6e6:	fb00 1303 	mla	r3, r0, r3, r1
    a6ea:	fba2 0100 	umull	r0, r1, r2, r0
    a6ee:	f8d9 2000 	ldr.w	r2, [r9]
    a6f2:	4419      	add	r1, r3
    a6f4:	17d3      	asrs	r3, r2, #31
    a6f6:	f7f5 fdb7 	bl	268 <__aeabi_uldivmod>
    a6fa:	2300      	movs	r3, #0
    a6fc:	fbb0 f0f5 	udiv	r0, r0, r5
    a700:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    a702:	eba0 0008 	sub.w	r0, r0, r8
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    a706:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    a708:	f8c6 0c88 	str.w	r0, [r6, #3208]	; 0xc88
			if (chan < 11) {
    a70c:	2c0a      	cmp	r4, #10
    a70e:	d809      	bhi.n	a724 <chan_set+0x1d8>
				radio_freq_chan_set(4 + (2 * chan));
    a710:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    a712:	0040      	lsls	r0, r0, #1
    a714:	f008 f8e4 	bl	128e0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    a718:	4620      	mov	r0, r4
}
    a71a:	b004      	add	sp, #16
    a71c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_whiten_iv_set(chan);
    a720:	f008 b8e4 	b.w	128ec <radio_whiten_iv_set>
			} else if (chan < 40) {
    a724:	2c27      	cmp	r4, #39	; 0x27
    a726:	d809      	bhi.n	a73c <chan_set+0x1f0>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    a728:	1ce0      	adds	r0, r4, #3
    a72a:	e7f2      	b.n	a712 <chan_set+0x1c6>
		switch (chan) {
    a72c:	2826      	cmp	r0, #38	; 0x26
    a72e:	f43f af5a 	beq.w	a5e6 <chan_set+0x9a>
    a732:	2827      	cmp	r0, #39	; 0x27
    a734:	d087      	beq.n	a646 <chan_set+0xfa>
    a736:	2825      	cmp	r0, #37	; 0x25
    a738:	d1e8      	bne.n	a70c <chan_set+0x1c0>
    a73a:	e74a      	b.n	a5d2 <chan_set+0x86>
				LL_ASSERT(0);
    a73c:	4040      	eors	r0, r0
    a73e:	f380 8811 	msr	BASEPRI, r0
    a742:	f04f 0004 	mov.w	r0, #4
    a746:	df02      	svc	2
    a748:	200008e0 	.word	0x200008e0
    a74c:	20003e14 	.word	0x20003e14
    a750:	20003e7c 	.word	0x20003e7c
    a754:	20003ed0 	.word	0x20003ed0
    a758:	20003ef0 	.word	0x20003ef0
    a75c:	200016a0 	.word	0x200016a0
    a760:	20003e80 	.word	0x20003e80
    a764:	20003ed8 	.word	0x20003ed8
    a768:	20003ee4 	.word	0x20003ee4
    a76c:	20003eac 	.word	0x20003eac
    a770:	20003e00 	.word	0x20003e00
    a774:	20003ea0 	.word	0x20003ea0
    a778:	20001660 	.word	0x20001660
    a77c:	20001668 	.word	0x20001668
    a780:	20003e08 	.word	0x20003e08
    a784:	20003e98 	.word	0x20003e98
    a788:	2000cfe0 	.word	0x2000cfe0
    a78c:	2000cfdc 	.word	0x2000cfdc

0000a790 <adv_setup>:
{
    a790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.advertiser.adv_data.first !=
    a794:	4c8c      	ldr	r4, [pc, #560]	; (a9c8 <adv_setup+0x238>)
    a796:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    a79a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    a79e:	429a      	cmp	r2, r3
    a7a0:	f000 80db 	beq.w	a95a <adv_setup+0x1ca>
		first = _radio.advertiser.adv_data.first + 1;
    a7a4:	3301      	adds	r3, #1
    a7a6:	b2db      	uxtb	r3, r3
			first = 0;
    a7a8:	2b02      	cmp	r3, #2
    a7aa:	bf08      	it	eq
    a7ac:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    a7ae:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    a7b2:	f04f 0a01 	mov.w	sl, #1
	if (_radio.advertiser.scan_data.first != _radio.
    a7b6:	f894 3c14 	ldrb.w	r3, [r4, #3092]	; 0xc14
    a7ba:	f894 2c15 	ldrb.w	r2, [r4, #3093]	; 0xc15
    a7be:	429a      	cmp	r2, r3
    a7c0:	d008      	beq.n	a7d4 <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    a7c2:	3301      	adds	r3, #1
    a7c4:	b2db      	uxtb	r3, r3
			first = 0;
    a7c6:	2b02      	cmp	r3, #2
    a7c8:	bf08      	it	eq
    a7ca:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    a7cc:	f884 3c14 	strb.w	r3, [r4, #3092]	; 0xc14
		upd = 1;
    a7d0:	f04f 0a01 	mov.w	sl, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    a7d4:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    a7d8:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    a7dc:	372c      	adds	r7, #44	; 0x2c
    a7de:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    a7e2:	5de3      	ldrb	r3, [r4, r7]
    a7e4:	f003 030f 	and.w	r3, r3, #15
    a7e8:	2b07      	cmp	r3, #7
    a7ea:	d160      	bne.n	a8ae <adv_setup+0x11e>
			if(h->adv_addr){
    a7ec:	f899 3003 	ldrb.w	r3, [r9, #3]
    a7f0:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    a7f2:	bf4c      	ite	mi
    a7f4:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    a7f8:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    a7fc:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    a7fe:	bf48      	it	mi
    a800:	3506      	addmi	r5, #6
			if(h->adi){
    a802:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    a804:	bf48      	it	mi
    a806:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    a808:	06da      	lsls	r2, r3, #27
    a80a:	d54a      	bpl.n	a8a2 <adv_setup+0x112>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    a80c:	f8d4 2c84 	ldr.w	r2, [r4, #3204]	; 0xc84
    a810:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    a814:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    a818:	4413      	add	r3, r2
    a81a:	f894 2c69 	ldrb.w	r2, [r4, #3177]	; 0xc69
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    a81e:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    a822:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    a824:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    a826:	f8c4 2c6c 	str.w	r2, [r4, #3180]	; 0xc6c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    a82a:	f040 80a6 	bne.w	a97a <adv_setup+0x1ea>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    a82e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a832:	f003 0307 	and.w	r3, r3, #7
    a836:	2b07      	cmp	r3, #7
    a838:	f040 8092 	bne.w	a960 <adv_setup+0x1d0>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    a83c:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    a840:	1a82      	subs	r2, r0, r2
    a842:	4610      	mov	r0, r2
    a844:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    a846:	f8c4 2c7c 	str.w	r2, [r4, #3196]	; 0xc7c
				if(offset > 245700){
    a84a:	4a60      	ldr	r2, [pc, #384]	; (a9cc <adv_setup+0x23c>)
    a84c:	78ae      	ldrb	r6, [r5, #2]
    a84e:	f895 8000 	ldrb.w	r8, [r5]
    a852:	2300      	movs	r3, #0
    a854:	428b      	cmp	r3, r1
    a856:	bf08      	it	eq
    a858:	4282      	cmpeq	r2, r0
    a85a:	f080 809f 	bcs.w	a99c <adv_setup+0x20c>
					ap->offs = offset/300;
    a85e:	f44f 7296 	mov.w	r2, #300	; 0x12c
    a862:	2300      	movs	r3, #0
    a864:	f7f5 fd00 	bl	268 <__aeabi_uldivmod>
    a868:	f026 061f 	bic.w	r6, r6, #31
    a86c:	7068      	strb	r0, [r5, #1]
    a86e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    a872:	4330      	orrs	r0, r6
    a874:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    a876:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    a87a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    a87e:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    a882:	07db      	lsls	r3, r3, #31
    a884:	d508      	bpl.n	a898 <adv_setup+0x108>
					_radio.ext_advertiser.aux_pckt_chan++;
    a886:	f894 3c80 	ldrb.w	r3, [r4, #3200]	; 0xc80
    a88a:	3301      	adds	r3, #1
    a88c:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    a88e:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    a890:	bf08      	it	eq
    a892:	2300      	moveq	r3, #0
    a894:	f884 3c80 	strb.w	r3, [r4, #3200]	; 0xc80
				ap->chan_idx = 0x03;
    a898:	782b      	ldrb	r3, [r5, #0]
    a89a:	2203      	movs	r2, #3
    a89c:	f362 0305 	bfi	r3, r2, #0, #6
    a8a0:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;   //in order to change the aux packet channel index
    a8a2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    a8a6:	f36f 0300 	bfc	r3, #0, #1
    a8aa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (upd) {
    a8ae:	f1ba 0f00 	cmp.w	sl, #0
    a8b2:	d00b      	beq.n	a8cc <adv_setup+0x13c>
		struct pdu_adv *scan_pdu = (void *)
    a8b4:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    a8b8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    a8bc:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    a8be:	2206      	movs	r2, #6
    a8c0:	f109 0102 	add.w	r1, r9, #2
    a8c4:	f600 2014 	addw	r0, r0, #2580	; 0xa14
    a8c8:	f7f5 fe8a 	bl	5e0 <memcpy>
		radio_pkt_tx_set(pdu);
    a8cc:	4648      	mov	r0, r9
    a8ce:	f008 f86f 	bl	129b0 <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    a8d2:	5de3      	ldrb	r3, [r4, r7]
    a8d4:	f003 030f 	and.w	r3, r3, #15
    a8d8:	2b02      	cmp	r3, #2
    a8da:	d06d      	beq.n	a9b8 <adv_setup+0x228>
    a8dc:	2b07      	cmp	r3, #7
    a8de:	d06b      	beq.n	a9b8 <adv_setup+0x228>
			_radio.state = STATE_TX;
    a8e0:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    a8e2:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    a8e4:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    a8e6:	f008 f989 	bl	12bfc <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    a8ea:	2000      	movs	r0, #0
    a8ec:	f008 f8e8 	bl	12ac0 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    a8f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a8f4:	f3c3 0202 	ubfx	r2, r3, #0, #3
    a8f8:	b2d3      	uxtb	r3, r2
    a8fa:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    a8fc:	2000      	movs	r0, #0
    a8fe:	07ce      	lsls	r6, r1, #31
    a900:	f100 0501 	add.w	r5, r0, #1
    a904:	d55d      	bpl.n	a9c2 <adv_setup+0x232>
			(_radio.advertiser.chan_map_current - 1);
    a906:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    a908:	4013      	ands	r3, r2
    a90a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    a90e:	4d30      	ldr	r5, [pc, #192]	; (a9d0 <adv_setup+0x240>)
			_radio.advertiser.chan_map_current &=
    a910:	f363 0202 	bfi	r2, r3, #0, #3
    a914:	4b2f      	ldr	r3, [pc, #188]	; (a9d4 <adv_setup+0x244>)
    a916:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    a91a:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    a91e:	bf08      	it	eq
    a920:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    a922:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    a924:	bf0c      	ite	eq
    a926:	3201      	addeq	r2, #1
			chan_case = 0 ;
    a928:	2200      	movne	r2, #0
    a92a:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    a92c:	f894 3c6a 	ldrb.w	r3, [r4, #3178]	; 0xc6a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    a930:	f894 2c68 	ldrb.w	r2, [r4, #3176]	; 0xc68
		_radio.ext_advertiser.event++;
    a934:	3301      	adds	r3, #1
    a936:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    a938:	429a      	cmp	r2, r3
		count++;
    a93a:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    a93e:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
		count++;
    a942:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    a944:	bf38      	it	cc
    a946:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    a948:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    a94a:	bf38      	it	cc
    a94c:	f884 3c6a 	strbcc.w	r3, [r4, #3178]	; 0xc6a
		chan_set(37 + chan);
    a950:	3025      	adds	r0, #37	; 0x25
}
    a952:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		chan_set(37 + chan);
    a956:	f7ff bdf9 	b.w	a54c <chan_set>
	u8_t upd = 0;
    a95a:	f04f 0a00 	mov.w	sl, #0
    a95e:	e72a      	b.n	a7b6 <adv_setup+0x26>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    a960:	2b06      	cmp	r3, #6
    a962:	d104      	bne.n	a96e <adv_setup+0x1de>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    a964:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	; 0xc74
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    a968:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    a96a:	2100      	movs	r1, #0
    a96c:	e76d      	b.n	a84a <adv_setup+0xba>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    a96e:	2b04      	cmp	r3, #4
    a970:	f47f af6b 	bne.w	a84a <adv_setup+0xba>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    a974:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	; 0xc78
    a978:	e7f6      	b.n	a968 <adv_setup+0x1d8>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    a97a:	f894 6c6a 	ldrb.w	r6, [r4, #3178]	; 0xc6a
    a97e:	4373      	muls	r3, r6
    a980:	f8c4 3c6c 	str.w	r3, [r4, #3180]	; 0xc6c
					if(_radio.ext_advertiser.event == 0){
    a984:	b926      	cbnz	r6, a990 <adv_setup+0x200>
						start_dynamic_cal = k_cycle_get_32(); 
    a986:	f7f7 f88d 	bl	1aa4 <_timer_cycle_get_32>
    a98a:	4b13      	ldr	r3, [pc, #76]	; (a9d8 <adv_setup+0x248>)
    a98c:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    a990:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    a994:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	; 0xc6c
    a998:	1ac0      	subs	r0, r0, r3
    a99a:	e7e6      	b.n	a96a <adv_setup+0x1da>
					ap->offs = offset /30;
    a99c:	221e      	movs	r2, #30
    a99e:	2300      	movs	r3, #0
    a9a0:	f7f5 fc62 	bl	268 <__aeabi_uldivmod>
    a9a4:	f026 061f 	bic.w	r6, r6, #31
    a9a8:	7068      	strb	r0, [r5, #1]
    a9aa:	f3c0 2004 	ubfx	r0, r0, #8, #5
    a9ae:	4306      	orrs	r6, r0
    a9b0:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    a9b2:	f36f 18c7 	bfc	r8, #7, #1
    a9b6:	e760      	b.n	a87a <adv_setup+0xea>
			_radio.state = STATE_CLOSE;
    a9b8:	2303      	movs	r3, #3
    a9ba:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    a9bc:	f008 f896 	bl	12aec <radio_switch_complete_and_disable>
    a9c0:	e796      	b.n	a8f0 <adv_setup+0x160>
			bitmap >>= 1;
    a9c2:	0849      	lsrs	r1, r1, #1
    a9c4:	4628      	mov	r0, r5
    a9c6:	e79a      	b.n	a8fe <adv_setup+0x16e>
    a9c8:	200008e0 	.word	0x200008e0
    a9cc:	0003bfc4 	.word	0x0003bfc4
    a9d0:	2000165b 	.word	0x2000165b
    a9d4:	2000165a 	.word	0x2000165a
    a9d8:	20003e08 	.word	0x20003e08

0000a9dc <ext_adv_setup>:
{
    a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.advertiser.adv_data.first !=
    a9e0:	4c63      	ldr	r4, [pc, #396]	; (ab70 <ext_adv_setup+0x194>)
    a9e2:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    a9e6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    a9ea:	429a      	cmp	r2, r3
    a9ec:	d02d      	beq.n	aa4a <ext_adv_setup+0x6e>
		first = _radio.advertiser.adv_data.first + 1;
    a9ee:	3301      	adds	r3, #1
    a9f0:	b2db      	uxtb	r3, r3
			first = 0;
    a9f2:	2b02      	cmp	r3, #2
    a9f4:	bf08      	it	eq
    a9f6:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    a9f8:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    a9fc:	f04f 0801 	mov.w	r8, #1
	if (_radio.advertiser.scan_data.first != _radio.
    aa00:	f894 3c14 	ldrb.w	r3, [r4, #3092]	; 0xc14
    aa04:	f894 2c15 	ldrb.w	r2, [r4, #3093]	; 0xc15
    aa08:	429a      	cmp	r2, r3
    aa0a:	d008      	beq.n	aa1e <ext_adv_setup+0x42>
		first = _radio.advertiser.scan_data.first + 1;
    aa0c:	3301      	adds	r3, #1
    aa0e:	b2db      	uxtb	r3, r3
			first = 0;
    aa10:	2b02      	cmp	r3, #2
    aa12:	bf08      	it	eq
    aa14:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    aa16:	f884 3c14 	strb.w	r3, [r4, #3092]	; 0xc14
		upd = 1;
    aa1a:	f04f 0801 	mov.w	r8, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    aa1e:	f894 622e 	ldrb.w	r6, [r4, #558]	; 0x22e
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    aa22:	f894 5433 	ldrb.w	r5, [r4, #1075]	; 0x433
	switch(_radio.ext_advertiser.aux_chain_count_current){
    aa26:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
	pdu = (void *)_radio.advertiser.adv_data.data
    aa2a:	eb06 2606 	add.w	r6, r6, r6, lsl #8
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    aa2e:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    aa32:	362c      	adds	r6, #44	; 0x2c
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    aa34:	f505 750c 	add.w	r5, r5, #560	; 0x230
	pdu = (void *)_radio.advertiser.adv_data.data
    aa38:	19a7      	adds	r7, r4, r6
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    aa3a:	4425      	add	r5, r4
	switch(_radio.ext_advertiser.aux_chain_count_current){
    aa3c:	2b05      	cmp	r3, #5
    aa3e:	d80d      	bhi.n	aa5c <ext_adv_setup+0x80>
    aa40:	e8df f003 	tbb	[pc, r3]
    aa44:	68605606 	.word	0x68605606
    aa48:	7870      	.short	0x7870
	u8_t upd = 0;
    aa4a:	f04f 0800 	mov.w	r8, #0
    aa4e:	e7d7      	b.n	aa00 <ext_adv_setup+0x24>
			memcpy(aux_pdu, copy_pdu, 257);
    aa50:	f240 1201 	movw	r2, #257	; 0x101
    aa54:	4947      	ldr	r1, [pc, #284]	; (ab74 <ext_adv_setup+0x198>)
    aa56:	4628      	mov	r0, r5
    aa58:	f7f5 fdc2 	bl	5e0 <memcpy>
		if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    aa5c:	5da3      	ldrb	r3, [r4, r6]
    aa5e:	f003 030f 	and.w	r3, r3, #15
    aa62:	2b07      	cmp	r3, #7
    aa64:	d11a      	bne.n	aa9c <ext_adv_setup+0xc0>
			if(h->adv_addr){
    aa66:	78fa      	ldrb	r2, [r7, #3]
    aa68:	07d3      	lsls	r3, r2, #31
				ptr += BDADDR_SIZE;
    aa6a:	bf4c      	ite	mi
    aa6c:	f107 030a 	addmi.w	r3, r7, #10
		ptr = (u8_t *)h + sizeof(*h);
    aa70:	1d3b      	addpl	r3, r7, #4
			if(h->tgt_addr){
    aa72:	0790      	lsls	r0, r2, #30
				ptr += BDADDR_SIZE;
    aa74:	bf48      	it	mi
    aa76:	3306      	addmi	r3, #6
			if(h->adi){
    aa78:	0711      	lsls	r1, r2, #28
				ptr += sizeof(*adi_ptr);
    aa7a:	bf48      	it	mi
    aa7c:	3302      	addmi	r3, #2
			if(h->aux_ptr){
    aa7e:	06d2      	lsls	r2, r2, #27
    aa80:	d50c      	bpl.n	aa9c <ext_adv_setup+0xc0>
					ap->offs = offset /30;
    aa82:	2206      	movs	r2, #6
    aa84:	705a      	strb	r2, [r3, #1]
    aa86:	789a      	ldrb	r2, [r3, #2]
    aa88:	f022 021f 	bic.w	r2, r2, #31
    aa8c:	709a      	strb	r2, [r3, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    aa8e:	781a      	ldrb	r2, [r3, #0]
				ap->chan_idx = 0x03;
    aa90:	2103      	movs	r1, #3
    aa92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    aa96:	f361 0205 	bfi	r2, r1, #0, #6
    aa9a:	701a      	strb	r2, [r3, #0]
	if (upd) {
    aa9c:	f1b8 0f00 	cmp.w	r8, #0
    aaa0:	d00a      	beq.n	aab8 <ext_adv_setup+0xdc>
		struct pdu_adv *scan_pdu = (void *)
    aaa2:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    aaa6:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    aaaa:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    aaac:	2206      	movs	r2, #6
    aaae:	1cb9      	adds	r1, r7, #2
    aab0:	f600 2014 	addw	r0, r0, #2580	; 0xa14
    aab4:	f7f5 fd94 	bl	5e0 <memcpy>
			radio_pkt_tx_set(aux_pdu);
    aab8:	4628      	mov	r0, r5
    aaba:	f007 ff79 	bl	129b0 <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    aabe:	5da3      	ldrb	r3, [r4, r6]
    aac0:	f003 030f 	and.w	r3, r3, #15
    aac4:	2b02      	cmp	r3, #2
    aac6:	d03d      	beq.n	ab44 <ext_adv_setup+0x168>
    aac8:	2b07      	cmp	r3, #7
    aaca:	d03b      	beq.n	ab44 <ext_adv_setup+0x168>
				_radio.state = STATE_TX;
    aacc:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    aace:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    aad0:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    aad2:	f008 f893 	bl	12bfc <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    aad6:	2000      	movs	r0, #0
    aad8:	f007 fff2 	bl	12ac0 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;			// for packets which are transmittedon primaty channels
    aadc:	2300      	movs	r3, #0
    aade:	f884 3c69 	strb.w	r3, [r4, #3177]	; 0xc69
			_radio.ext_advertiser.event = 0;				// skip number of events before transmitting aux
    aae2:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
			chan_set(03);
    aae6:	2003      	movs	r0, #3
}
    aae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			chan_set(03);
    aaec:	f7ff bd2e 	b.w	a54c <chan_set>
			memcpy(aux_pdu, copy_pdu, 257);
    aaf0:	f240 1201 	movw	r2, #257	; 0x101
    aaf4:	4920      	ldr	r1, [pc, #128]	; (ab78 <ext_adv_setup+0x19c>)
    aaf6:	4628      	mov	r0, r5
    aaf8:	f7f5 fd72 	bl	5e0 <memcpy>
			chan_set(1);
    aafc:	2001      	movs	r0, #1
			chan_set(5);
    aafe:	f7ff fd25 	bl	a54c <chan_set>
			break;
    ab02:	e7ab      	b.n	aa5c <ext_adv_setup+0x80>
			memcpy(aux_pdu, copy_pdu, 257);
    ab04:	f240 1201 	movw	r2, #257	; 0x101
    ab08:	491c      	ldr	r1, [pc, #112]	; (ab7c <ext_adv_setup+0x1a0>)
    ab0a:	4628      	mov	r0, r5
    ab0c:	f7f5 fd68 	bl	5e0 <memcpy>
			chan_set(2);
    ab10:	2002      	movs	r0, #2
    ab12:	e7f4      	b.n	aafe <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    ab14:	f240 1201 	movw	r2, #257	; 0x101
    ab18:	4919      	ldr	r1, [pc, #100]	; (ab80 <ext_adv_setup+0x1a4>)
    ab1a:	4628      	mov	r0, r5
    ab1c:	f7f5 fd60 	bl	5e0 <memcpy>
			chan_set(3);
    ab20:	2003      	movs	r0, #3
    ab22:	e7ec      	b.n	aafe <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    ab24:	f240 1201 	movw	r2, #257	; 0x101
    ab28:	4916      	ldr	r1, [pc, #88]	; (ab84 <ext_adv_setup+0x1a8>)
    ab2a:	4628      	mov	r0, r5
    ab2c:	f7f5 fd58 	bl	5e0 <memcpy>
			chan_set(4);
    ab30:	2004      	movs	r0, #4
    ab32:	e7e4      	b.n	aafe <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    ab34:	f240 1201 	movw	r2, #257	; 0x101
    ab38:	4913      	ldr	r1, [pc, #76]	; (ab88 <ext_adv_setup+0x1ac>)
    ab3a:	4628      	mov	r0, r5
    ab3c:	f7f5 fd50 	bl	5e0 <memcpy>
			chan_set(5);
    ab40:	2005      	movs	r0, #5
    ab42:	e7dc      	b.n	aafe <ext_adv_setup+0x122>
				chain_flag = 1;
    ab44:	4a11      	ldr	r2, [pc, #68]	; (ab8c <ext_adv_setup+0x1b0>)
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    ab46:	f894 1c8c 	ldrb.w	r1, [r4, #3212]	; 0xc8c
				chain_flag = 1;
    ab4a:	2301      	movs	r3, #1
    ab4c:	7013      	strb	r3, [r2, #0]
				_radio.ext_advertiser.aux_chain_count_current++;
    ab4e:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
    ab52:	3301      	adds	r3, #1
    ab54:	b2db      	uxtb	r3, r3
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    ab56:	4299      	cmp	r1, r3
				_radio.ext_advertiser.aux_chain_count_current++;
    ab58:	f884 3c8d 	strb.w	r3, [r4, #3213]	; 0xc8d
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    ab5c:	d1b6      	bne.n	aacc <ext_adv_setup+0xf0>
					_radio.advertiser.ext_adv = 1;
    ab5e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    ab62:	f043 0301 	orr.w	r3, r3, #1
    ab66:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					chain_flag = 0;
    ab6a:	2300      	movs	r3, #0
    ab6c:	7013      	strb	r3, [r2, #0]
    ab6e:	e7ad      	b.n	aacc <ext_adv_setup+0xf0>
    ab70:	200008e0 	.word	0x200008e0
    ab74:	20000d14 	.word	0x20000d14
    ab78:	20000e15 	.word	0x20000e15
    ab7c:	20000f16 	.word	0x20000f16
    ab80:	20001017 	.word	0x20001017
    ab84:	20001118 	.word	0x20001118
    ab88:	20001219 	.word	0x20001219
    ab8c:	20001659 	.word	0x20001659

0000ab90 <isr_adv_ci_adva_check>:
{
    ab90:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    ab92:	7804      	ldrb	r4, [r0, #0]
    ab94:	780a      	ldrb	r2, [r1, #0]
    ab96:	f3c4 1380 	ubfx	r3, r4, #6, #1
    ab9a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ab9e:	d119      	bne.n	abd4 <isr_adv_ci_adva_check+0x44>
    aba0:	f004 040f 	and.w	r4, r4, #15
    aba4:	2c01      	cmp	r4, #1
    aba6:	f101 0608 	add.w	r6, r1, #8
    abaa:	f100 0502 	add.w	r5, r0, #2
    abae:	d008      	beq.n	abc2 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    abb0:	2206      	movs	r2, #6
    abb2:	4631      	mov	r1, r6
    abb4:	4628      	mov	r0, r5
    abb6:	f7f5 fcfe 	bl	5b6 <memcmp>
			 BDADDR_SIZE)) ||
    abba:	fab0 f080 	clz	r0, r0
    abbe:	0940      	lsrs	r0, r0, #5
    abc0:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    abc2:	2206      	movs	r2, #6
    abc4:	4631      	mov	r1, r6
    abc6:	4628      	mov	r0, r5
    abc8:	f7f5 fcf5 	bl	5b6 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    abcc:	2800      	cmp	r0, #0
    abce:	d1ef      	bne.n	abb0 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    abd0:	4620      	mov	r0, r4
    abd2:	bd70      	pop	{r4, r5, r6, pc}
    abd4:	2000      	movs	r0, #0
}
    abd6:	bd70      	pop	{r4, r5, r6, pc}

0000abd8 <isr_scan_tgta_check>:
{
    abd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    abdc:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    abde:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    abe0:	f101 0808 	add.w	r8, r1, #8
{
    abe4:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    abe6:	09c0      	lsrs	r0, r0, #7
    abe8:	4641      	mov	r1, r8
{
    abea:	4691      	mov	r9, r2
    abec:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    abee:	f007 f8c1 	bl	11d74 <ctrl_rl_addr_resolve>
    abf2:	4604      	mov	r4, r0
    abf4:	b9d8      	cbnz	r0, ac2e <isr_scan_tgta_check+0x56>
    abf6:	4f1c      	ldr	r7, [pc, #112]	; (ac68 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    abf8:	f1ba 0f00 	cmp.w	sl, #0
    abfc:	d10e      	bne.n	ac1c <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    abfe:	782b      	ldrb	r3, [r5, #0]
    ac00:	f897 2c2d 	ldrb.w	r2, [r7, #3117]	; 0xc2d
			BDADDR_SIZE) == 0))) ||
    ac04:	09db      	lsrs	r3, r3, #7
    ac06:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ac0a:	d113      	bne.n	ac34 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    ac0c:	2206      	movs	r2, #6
    ac0e:	4641      	mov	r1, r8
    ac10:	4816      	ldr	r0, [pc, #88]	; (ac6c <isr_scan_tgta_check+0x94>)
    ac12:	f7f5 fcd0 	bl	5b6 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    ac16:	b968      	cbnz	r0, ac34 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    ac18:	2001      	movs	r0, #1
    ac1a:	e012      	b.n	ac42 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    ac1c:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
    ac20:	07db      	lsls	r3, r3, #31
    ac22:	d5ec      	bpl.n	abfe <isr_scan_tgta_check+0x26>
    ac24:	4648      	mov	r0, r9
    ac26:	f006 feb5 	bl	11994 <ctrl_lrpa_get>
    ac2a:	2800      	cmp	r0, #0
    ac2c:	d0e7      	beq.n	abfe <isr_scan_tgta_check+0x26>
}
    ac2e:	4620      	mov	r0, r4
    ac30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    ac34:	f897 0c2d 	ldrb.w	r0, [r7, #3117]	; 0xc2d
    ac38:	f3c0 1001 	ubfx	r0, r0, #4, #2
    ac3c:	f010 0002 	ands.w	r0, r0, #2
    ac40:	d101      	bne.n	ac46 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    ac42:	4604      	mov	r4, r0
    ac44:	e7f3      	b.n	ac2e <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    ac46:	f995 3000 	ldrsb.w	r3, [r5]
    ac4a:	2b00      	cmp	r3, #0
    ac4c:	da09      	bge.n	ac62 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    ac4e:	7b6b      	ldrb	r3, [r5, #13]
    ac50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ac54:	2b40      	cmp	r3, #64	; 0x40
    ac56:	d104      	bne.n	ac62 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    ac58:	2e00      	cmp	r6, #0
    ac5a:	d0dd      	beq.n	ac18 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    ac5c:	2001      	movs	r0, #1
    ac5e:	7030      	strb	r0, [r6, #0]
    ac60:	e7ef      	b.n	ac42 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    ac62:	2000      	movs	r0, #0
    ac64:	e7ed      	b.n	ac42 <isr_scan_tgta_check+0x6a>
    ac66:	bf00      	nop
    ac68:	200008e0 	.word	0x200008e0
    ac6c:	20001510 	.word	0x20001510

0000ac70 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    ac70:	4a0b      	ldr	r2, [pc, #44]	; (aca0 <rx_fc_lock+0x30>)
    ac72:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    ac76:	f892 1d69 	ldrb.w	r1, [r2, #3433]	; 0xd69
    ac7a:	4299      	cmp	r1, r3
    ac7c:	d10e      	bne.n	ac9c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    ac7e:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    ac82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    ac86:	f8a3 0d62 	strh.w	r0, [r3, #3426]	; 0xd62
		req = _radio.fc_req + 1;
    ac8a:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    ac8e:	3301      	adds	r3, #1
    ac90:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    ac92:	2b03      	cmp	r3, #3
    ac94:	bf08      	it	eq
    ac96:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    ac98:	f882 3d68 	strb.w	r3, [r2, #3432]	; 0xd68
    ac9c:	4770      	bx	lr
    ac9e:	bf00      	nop
    aca0:	200008e0 	.word	0x200008e0

0000aca4 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    aca4:	4b04      	ldr	r3, [pc, #16]	; (acb8 <ticker_job_disable+0x14>)
    aca6:	7d1b      	ldrb	r3, [r3, #20]
    aca8:	b123      	cbz	r3, acb4 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    acaa:	2101      	movs	r1, #1
    acac:	2200      	movs	r2, #0
    acae:	4608      	mov	r0, r1
    acb0:	f7fc be0c 	b.w	78cc <mayfly_enable>
    acb4:	4770      	bx	lr
    acb6:	bf00      	nop
    acb8:	200008e0 	.word	0x200008e0

0000acbc <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    acbc:	2806      	cmp	r0, #6
{
    acbe:	b510      	push	{r4, lr}
    acc0:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    acc2:	d90a      	bls.n	acda <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    acc4:	4b09      	ldr	r3, [pc, #36]	; (acec <hdr_conn_get+0x30>)
    acc6:	1fc2      	subs	r2, r0, #7
    acc8:	b292      	uxth	r2, r2
    acca:	f44f 71aa 	mov.w	r1, #340	; 0x154
    acce:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    acd2:	f7fc fd8d 	bl	77f0 <mem_get>
    acd6:	6020      	str	r0, [r4, #0]
    acd8:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    acda:	2805      	cmp	r0, #5
    acdc:	d004      	beq.n	ace8 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    acde:	2806      	cmp	r0, #6
	return NULL;
    ace0:	4803      	ldr	r0, [pc, #12]	; (acf0 <hdr_conn_get+0x34>)
    ace2:	bf18      	it	ne
    ace4:	2000      	movne	r0, #0
    ace6:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    ace8:	4802      	ldr	r0, [pc, #8]	; (acf4 <hdr_conn_get+0x38>)
}
    acea:	bd10      	pop	{r4, pc}
    acec:	200008e0 	.word	0x200008e0
    acf0:	200014fc 	.word	0x200014fc
    acf4:	200008f8 	.word	0x200008f8

0000acf8 <mayfly_xtal_retain.part.16>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    acf8:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    acfa:	4b0a      	ldr	r3, [pc, #40]	; (ad24 <mayfly_xtal_retain.part.16+0x2c>)
    acfc:	2200      	movs	r2, #0
    acfe:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    ad00:	b168      	cbz	r0, ad1e <mayfly_xtal_retain.part.16+0x26>
    ad02:	2801      	cmp	r0, #1
    ad04:	d105      	bne.n	ad12 <mayfly_xtal_retain.part.16+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    ad06:	4b08      	ldr	r3, [pc, #32]	; (ad28 <mayfly_xtal_retain.part.16+0x30>)
			retval = mayfly_enqueue(caller_id,
    ad08:	2200      	movs	r2, #0
    ad0a:	4611      	mov	r1, r2
    ad0c:	f7fc fe06 	bl	791c <mayfly_enqueue>
			LL_ASSERT(!retval);
    ad10:	b138      	cbz	r0, ad22 <mayfly_xtal_retain.part.16+0x2a>
    ad12:	4040      	eors	r0, r0
    ad14:	f380 8811 	msr	BASEPRI, r0
    ad18:	f04f 0004 	mov.w	r0, #4
    ad1c:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    ad1e:	4b03      	ldr	r3, [pc, #12]	; (ad2c <mayfly_xtal_retain.part.16+0x34>)
    ad20:	e7f2      	b.n	ad08 <mayfly_xtal_retain.part.16+0x10>
    ad22:	bd08      	pop	{r3, pc}
    ad24:	200016ec 	.word	0x200016ec
    ad28:	2000cf40 	.word	0x2000cf40
    ad2c:	2000cf30 	.word	0x2000cf30

0000ad30 <event_active.part.17>:
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    ad30:	4040      	eors	r0, r0
    ad32:	f380 8811 	msr	BASEPRI, r0
    ad36:	f04f 0004 	mov.w	r0, #4
    ad3a:	df02      	svc	2

0000ad3c <prepare_normal_set>:
{
    ad3c:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    ad3e:	6804      	ldr	r4, [r0, #0]
    ad40:	2c00      	cmp	r4, #0
{
    ad42:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    ad44:	da19      	bge.n	ad7a <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    ad46:	6843      	ldr	r3, [r0, #4]
    ad48:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    ad4a:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    ad4c:	429d      	cmp	r5, r3
    ad4e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    ad52:	bf34      	ite	cc
    ad54:	1ae4      	subcc	r4, r4, r3
    ad56:	1b64      	subcs	r4, r4, r5
		ticker_status =
    ad58:	4b09      	ldr	r3, [pc, #36]	; (ad80 <prepare_normal_set+0x44>)
    ad5a:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ad5c:	b2a4      	uxth	r4, r4
		ticker_status =
    ad5e:	2300      	movs	r3, #0
    ad60:	9304      	str	r3, [sp, #16]
    ad62:	9303      	str	r3, [sp, #12]
    ad64:	9302      	str	r3, [sp, #8]
    ad66:	4618      	mov	r0, r3
    ad68:	9401      	str	r4, [sp, #4]
    ad6a:	9400      	str	r4, [sp, #0]
    ad6c:	f7fd fbd0 	bl	8510 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ad70:	f030 0302 	bics.w	r3, r0, #2
    ad74:	d001      	beq.n	ad7a <prepare_normal_set+0x3e>
    ad76:	f7ff ffdb 	bl	ad30 <event_active.part.17>
}
    ad7a:	b009      	add	sp, #36	; 0x24
    ad7c:	bd30      	pop	{r4, r5, pc}
    ad7e:	bf00      	nop
    ad80:	00009fd1 	.word	0x00009fd1

0000ad84 <terminate_ind_rx_enqueue>:
{
    ad84:	b510      	push	{r4, lr}
    ad86:	4603      	mov	r3, r0
    ad88:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    ad8a:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    ad8e:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    ad92:	b908      	cbnz	r0, ad98 <terminate_ind_rx_enqueue+0x14>
    ad94:	f7ff ffcc 	bl	ad30 <event_active.part.17>
	node_rx->hdr.handle = conn->handle;
    ad98:	8c1c      	ldrh	r4, [r3, #32]
    ad9a:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    ad9e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ada2:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    ada4:	4a0a      	ldr	r2, [pc, #40]	; (add0 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ada6:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    adaa:	f892 4d60 	ldrb.w	r4, [r2, #3424]	; 0xd60
    adae:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    adb2:	f602 5238 	addw	r2, r2, #3384	; 0xd38
    adb6:	f7fc fd40 	bl	783a <memq_enqueue>
	LL_ASSERT(link);
    adba:	b928      	cbnz	r0, adc8 <terminate_ind_rx_enqueue+0x44>
    adbc:	4040      	eors	r0, r0
    adbe:	f380 8811 	msr	BASEPRI, r0
    adc2:	f04f 0004 	mov.w	r0, #4
    adc6:	df02      	svc	2
}
    adc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    adcc:	f005 bf50 	b.w	10c70 <radio_event_callback>
    add0:	200008e0 	.word	0x200008e0

0000add4 <packet_rx_enqueue>:
{
    add4:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    add6:	4a16      	ldr	r2, [pc, #88]	; (ae30 <packet_rx_enqueue+0x5c>)
    add8:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
    addc:	f892 1d2a 	ldrb.w	r1, [r2, #3370]	; 0xd2a
    ade0:	4299      	cmp	r1, r3
    ade2:	d101      	bne.n	ade8 <packet_rx_enqueue+0x14>
    ade4:	f7ff ffa4 	bl	ad30 <event_active.part.17>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    ade8:	f892 1d29 	ldrb.w	r1, [r2, #3369]	; 0xd29
    adec:	f8d2 3d24 	ldr.w	r3, [r2, #3364]	; 0xd24
    adf0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    adf4:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
	link = node_rx->hdr.onion.link;
    adf8:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    adfa:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    adfc:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
	if (last == _radio.packet_rx_count) {
    ae00:	f892 4d28 	ldrb.w	r4, [r2, #3368]	; 0xd28
	last = _radio.packet_rx_last + 1;
    ae04:	3301      	adds	r3, #1
    ae06:	b2db      	uxtb	r3, r3
		last = 0;
    ae08:	429c      	cmp	r4, r3
    ae0a:	bf08      	it	eq
    ae0c:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    ae0e:	f882 3d29 	strb.w	r3, [r2, #3369]	; 0xd29
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    ae12:	f602 5238 	addw	r2, r2, #3384	; 0xd38
    ae16:	f7fc fd10 	bl	783a <memq_enqueue>
	LL_ASSERT(link);
    ae1a:	b928      	cbnz	r0, ae28 <packet_rx_enqueue+0x54>
    ae1c:	4040      	eors	r0, r0
    ae1e:	f380 8811 	msr	BASEPRI, r0
    ae22:	f04f 0004 	mov.w	r0, #4
    ae26:	df02      	svc	2
}
    ae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    ae2c:	f005 bf20 	b.w	10c70 <radio_event_callback>
    ae30:	200008e0 	.word	0x200008e0

0000ae34 <mayfly_adv_stop>:
{
    ae34:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    ae36:	2001      	movs	r0, #1
    ae38:	f7ff f902 	bl	a040 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    ae3c:	4604      	mov	r4, r0
    ae3e:	b908      	cbnz	r0, ae44 <mayfly_adv_stop+0x10>
    ae40:	f7ff ff76 	bl	ad30 <event_active.part.17>
	node_rx->hdr.handle = 0xffff;
    ae44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ae48:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    ae4a:	2306      	movs	r3, #6
    ae4c:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    ae4e:	221d      	movs	r2, #29
    ae50:	2100      	movs	r1, #0
    ae52:	300b      	adds	r0, #11
    ae54:	f7f5 fbf0 	bl	638 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    ae58:	233c      	movs	r3, #60	; 0x3c
    ae5a:	72e3      	strb	r3, [r4, #11]
}
    ae5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    ae60:	f7ff bfb8 	b.w	add4 <packet_rx_enqueue>

0000ae64 <isr_rx_scan_report>:
{
    ae64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ae68:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    ae6a:	2003      	movs	r0, #3
{
    ae6c:	460f      	mov	r7, r1
    ae6e:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    ae70:	f7ff f8e6 	bl	a040 <packet_rx_reserve_get>
	if (node_rx == 0) {
    ae74:	4604      	mov	r4, r0
    ae76:	b3a0      	cbz	r0, aee2 <isr_rx_scan_report+0x7e>
	node_rx->hdr.handle = 0xffff;
    ae78:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ae7c:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    ae7e:	4b1a      	ldr	r3, [pc, #104]	; (aee8 <isr_rx_scan_report+0x84>)
    ae80:	f893 3c2d 	ldrb.w	r3, [r3, #3117]	; 0xc2d
    ae84:	075a      	lsls	r2, r3, #29
    ae86:	d028      	beq.n	aeda <isr_rx_scan_report+0x76>
		switch (_radio.scanner.phy) {
    ae88:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ae8c:	b2da      	uxtb	r2, r3
    ae8e:	2a01      	cmp	r2, #1
    ae90:	d007      	beq.n	aea2 <isr_rx_scan_report+0x3e>
    ae92:	2a04      	cmp	r2, #4
    ae94:	d006      	beq.n	aea4 <isr_rx_scan_report+0x40>
			LL_ASSERT(0);
    ae96:	4040      	eors	r0, r0
    ae98:	f380 8811 	msr	BASEPRI, r0
    ae9c:	f04f 0004 	mov.w	r0, #4
    aea0:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    aea2:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    aea4:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    aea8:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    aeaa:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aeae:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    aeb2:	f1b9 0f00 	cmp.w	r9, #0
    aeb6:	d012      	beq.n	aede <isr_rx_scan_report+0x7a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    aeb8:	f007 fe30 	bl	12b1c <radio_rssi_get>
			     pdu_adv_rx->len] =
    aebc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    aec0:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aec4:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    aec6:	442b      	add	r3, r5
    aec8:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    aeca:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    aecc:	441d      	add	r5, r3
    aece:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    aed0:	f7ff ff80 	bl	add4 <packet_rx_enqueue>
	return 0;
    aed4:	2000      	movs	r0, #0
    aed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    aeda:	2302      	movs	r3, #2
    aedc:	e7e2      	b.n	aea4 <isr_rx_scan_report+0x40>
			     pdu_adv_rx->len] =
    aede:	207f      	movs	r0, #127	; 0x7f
    aee0:	e7ee      	b.n	aec0 <isr_rx_scan_report+0x5c>
		return 1;
    aee2:	2001      	movs	r0, #1
}
    aee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aee8:	200008e0 	.word	0x200008e0

0000aeec <pdu_node_tx_release>:
{
    aeec:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    aeee:	4a10      	ldr	r2, [pc, #64]	; (af30 <pdu_node_tx_release+0x44>)
    aef0:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
	if (last == _radio.packet_tx_count) {
    aef4:	f892 4d5c 	ldrb.w	r4, [r2, #3420]	; 0xd5c
	last = _radio.packet_release_last + 1;
    aef8:	3301      	adds	r3, #1
    aefa:	b2db      	uxtb	r3, r3
		last = 0;
    aefc:	429c      	cmp	r4, r3
    aefe:	bf08      	it	eq
    af00:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    af02:	f892 4d5f 	ldrb.w	r4, [r2, #3423]	; 0xd5f
    af06:	429c      	cmp	r4, r3
    af08:	d101      	bne.n	af0e <pdu_node_tx_release+0x22>
    af0a:	f7ff ff11 	bl	ad30 <event_active.part.17>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    af0e:	f892 5d60 	ldrb.w	r5, [r2, #3424]	; 0xd60
    af12:	f8d2 4d58 	ldr.w	r4, [r2, #3416]	; 0xd58
    af16:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    af1a:	f892 0d60 	ldrb.w	r0, [r2, #3424]	; 0xd60
    af1e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    af22:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    af24:	f882 3d60 	strb.w	r3, [r2, #3424]	; 0xd60
}
    af28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    af2c:	f005 bea0 	b.w	10c70 <radio_event_callback>
    af30:	200008e0 	.word	0x200008e0

0000af34 <packet_tx_enqueue>:
{
    af34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    af38:	4c24      	ldr	r4, [pc, #144]	; (afcc <packet_tx_enqueue+0x98>)
{
    af3a:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    af3c:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    af3e:	b12e      	cbz	r6, af4c <packet_tx_enqueue+0x18>
    af40:	f894 3d5d 	ldrb.w	r3, [r4, #3421]	; 0xd5d
    af44:	f894 2d5e 	ldrb.w	r2, [r4, #3422]	; 0xd5e
    af48:	429a      	cmp	r2, r3
    af4a:	d101      	bne.n	af50 <packet_tx_enqueue+0x1c>
    af4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    af50:	f894 8d5d 	ldrb.w	r8, [r4, #3421]	; 0xd5d
    af54:	f8d4 9d54 	ldr.w	r9, [r4, #3412]	; 0xd54
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af58:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    af5c:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    af60:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af64:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    af68:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    af6a:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    af6c:	f7fc fc40 	bl	77f0 <mem_get>
    af70:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    af72:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    af76:	8c1a      	ldrh	r2, [r3, #32]
    af78:	4282      	cmp	r2, r0
    af7a:	d11f      	bne.n	afbc <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    af7c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    af80:	b942      	cbnz	r2, af94 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    af82:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    af86:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    af8a:	b91a      	cbnz	r2, af94 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    af8c:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    af90:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    af94:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    af98:	b102      	cbz	r2, af9c <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    af9a:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    af9c:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    afa0:	f894 3d5d 	ldrb.w	r3, [r4, #3421]	; 0xd5d
		if (first == _radio.packet_tx_count) {
    afa4:	f894 2d5c 	ldrb.w	r2, [r4, #3420]	; 0xd5c
		first = _radio.packet_tx_first + 1;
    afa8:	3301      	adds	r3, #1
    afaa:	b2db      	uxtb	r3, r3
			first = 0;
    afac:	429a      	cmp	r2, r3
    afae:	bf08      	it	eq
    afb0:	2300      	moveq	r3, #0
    afb2:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    afb4:	f884 3d5d 	strb.w	r3, [r4, #3421]	; 0xd5d
    afb8:	b2f6      	uxtb	r6, r6
    afba:	e7c0      	b.n	af3e <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    afbc:	792b      	ldrb	r3, [r5, #4]
    afbe:	f367 0301 	bfi	r3, r7, #0, #2
    afc2:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    afc4:	4629      	mov	r1, r5
    afc6:	f7ff ff91 	bl	aeec <pdu_node_tx_release>
    afca:	e7e9      	b.n	afa0 <packet_tx_enqueue+0x6c>
    afcc:	200008e0 	.word	0x200008e0

0000afd0 <connection_release>:
{
    afd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    afd2:	2201      	movs	r2, #1
{
    afd4:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    afd6:	4611      	mov	r1, r2
    afd8:	2000      	movs	r0, #0
    afda:	f7fc fc77 	bl	78cc <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    afde:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    afe2:	2100      	movs	r1, #0
    afe4:	f242 73e2 	movw	r3, #10210	; 0x27e2
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    afe8:	3207      	adds	r2, #7
	ticker_status =
    afea:	9300      	str	r3, [sp, #0]
    afec:	4608      	mov	r0, r1
    afee:	4b3a      	ldr	r3, [pc, #232]	; (b0d8 <connection_release+0x108>)
    aff0:	b2d2      	uxtb	r2, r2
    aff2:	f7fd fadb 	bl	85ac <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    aff6:	f030 0102 	bics.w	r1, r0, #2
    affa:	d005      	beq.n	b008 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    affc:	4040      	eors	r0, r0
    affe:	f380 8811 	msr	BASEPRI, r0
    b002:	f04f 0004 	mov.w	r0, #4
    b006:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    b008:	4b34      	ldr	r3, [pc, #208]	; (b0dc <connection_release+0x10c>)
    b00a:	7d1a      	ldrb	r2, [r3, #20]
    b00c:	2a05      	cmp	r2, #5
    b00e:	461d      	mov	r5, r3
    b010:	d11b      	bne.n	b04a <connection_release+0x7a>
					  conn->handle))) {
    b012:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    b014:	7c18      	ldrb	r0, [r3, #16]
    b016:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    b018:	4290      	cmp	r0, r2
    b01a:	d116      	bne.n	b04a <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    b01c:	7419      	strb	r1, [r3, #16]
		ticker_status =
    b01e:	f242 73f3 	movw	r3, #10227	; 0x27f3
    b022:	9300      	str	r3, [sp, #0]
    b024:	2201      	movs	r2, #1
    b026:	4b2c      	ldr	r3, [pc, #176]	; (b0d8 <connection_release+0x108>)
    b028:	4608      	mov	r0, r1
    b02a:	f7fd fabf 	bl	85ac <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b02e:	f030 0202 	bics.w	r2, r0, #2
    b032:	d1e3      	bne.n	affc <connection_release+0x2c>
		ticker_status =
    b034:	f242 73fa 	movw	r3, #10234	; 0x27fa
    b038:	9300      	str	r3, [sp, #0]
    b03a:	4611      	mov	r1, r2
    b03c:	4b26      	ldr	r3, [pc, #152]	; (b0d8 <connection_release+0x108>)
    b03e:	4610      	mov	r0, r2
    b040:	f7fd fab4 	bl	85ac <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b044:	f030 0302 	bics.w	r3, r0, #2
    b048:	d1d8      	bne.n	affc <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    b04a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b04e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    b052:	4299      	cmp	r1, r3
    b054:	d003      	beq.n	b05e <connection_release+0x8e>
    b056:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b05a:	4299      	cmp	r1, r3
    b05c:	d101      	bne.n	b062 <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b05e:	4e20      	ldr	r6, [pc, #128]	; (b0e0 <connection_release+0x110>)
    b060:	e012      	b.n	b088 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b062:	790b      	ldrb	r3, [r1, #4]
    b064:	f36f 0301 	bfc	r3, #0, #2
    b068:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b06a:	680b      	ldr	r3, [r1, #0]
    b06c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    b070:	8c20      	ldrh	r0, [r4, #32]
    b072:	f7ff ff3b 	bl	aeec <pdu_node_tx_release>
    b076:	e7e8      	b.n	b04a <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b078:	6803      	ldr	r3, [r0, #0]
    b07a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    b07e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    b082:	4631      	mov	r1, r6
    b084:	f7fc fb99 	bl	77ba <mem_release>
	while ((conn->pkt_tx_head) &&
    b088:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    b08c:	b118      	cbz	r0, b096 <connection_release+0xc6>
    b08e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    b092:	4298      	cmp	r0, r3
    b094:	d1f0      	bne.n	b078 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    b096:	2300      	movs	r3, #0
    b098:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    b09c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    b0a0:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    b0a4:	b951      	cbnz	r1, b0bc <connection_release+0xec>
	conn->handle = 0xffff;
    b0a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b0aa:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    b0ac:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
    b0b0:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    b0b2:	bf08      	it	eq
    b0b4:	f8c5 1d70 	streq.w	r1, [r5, #3440]	; 0xd70
}
    b0b8:	b002      	add	sp, #8
    b0ba:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    b0bc:	790b      	ldrb	r3, [r1, #4]
    b0be:	f36f 0301 	bfc	r3, #0, #2
    b0c2:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    b0c4:	680b      	ldr	r3, [r1, #0]
    b0c6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    b0ca:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    b0ce:	8c20      	ldrh	r0, [r4, #32]
    b0d0:	f7ff ff0c 	bl	aeec <pdu_node_tx_release>
    b0d4:	e7e4      	b.n	b0a0 <connection_release+0xd0>
    b0d6:	bf00      	nop
    b0d8:	0000b231 	.word	0x0000b231
    b0dc:	200008e0 	.word	0x200008e0
    b0e0:	20001624 	.word	0x20001624

0000b0e4 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    b0e4:	b2c0      	uxtb	r0, r0
{
    b0e6:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    b0e8:	1f03      	subs	r3, r0, #4
    b0ea:	2b01      	cmp	r3, #1
    b0ec:	d901      	bls.n	b0f2 <mayfly_radio_stop+0xe>
    b0ee:	f7ff fe1f 	bl	ad30 <event_active.part.17>
	radio_used = ((_radio.state != STATE_NONE) &&
    b0f2:	4a08      	ldr	r2, [pc, #32]	; (b114 <mayfly_radio_stop+0x30>)
    b0f4:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    b0f6:	b13b      	cbz	r3, b108 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    b0f8:	3b04      	subs	r3, #4
    b0fa:	2b01      	cmp	r3, #1
    b0fc:	d904      	bls.n	b108 <mayfly_radio_stop+0x24>
			_radio.state = state;
    b0fe:	7510      	strb	r0, [r2, #20]
}
    b100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    b104:	f007 bc82 	b.w	12a0c <radio_disable>
	if (radio_used || !radio_is_idle()) {
    b108:	f007 fcb2 	bl	12a70 <radio_is_idle>
    b10c:	2800      	cmp	r0, #0
    b10e:	d0f7      	beq.n	b100 <mayfly_radio_stop+0x1c>
}
    b110:	bd08      	pop	{r3, pc}
    b112:	bf00      	nop
    b114:	200008e0 	.word	0x200008e0

0000b118 <mayfly_radio_active>:
{
    b118:	b508      	push	{r3, lr}
    b11a:	4a0a      	ldr	r2, [pc, #40]	; (b144 <mayfly_radio_active+0x2c>)
		if (s_active++) {
    b11c:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    b11e:	b138      	cbz	r0, b130 <mayfly_radio_active+0x18>
		if (s_active++) {
    b120:	1c59      	adds	r1, r3, #1
    b122:	7011      	strb	r1, [r2, #0]
    b124:	b963      	cbnz	r3, b140 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    b126:	2001      	movs	r0, #1
}
    b128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    b12c:	f005 bd9e 	b.w	10c6c <radio_active_callback>
		LL_ASSERT(s_active);
    b130:	b90b      	cbnz	r3, b136 <mayfly_radio_active+0x1e>
    b132:	f7ff fdfd 	bl	ad30 <event_active.part.17>
		if (--s_active) {
    b136:	3b01      	subs	r3, #1
    b138:	b2db      	uxtb	r3, r3
    b13a:	7013      	strb	r3, [r2, #0]
    b13c:	2b00      	cmp	r3, #0
    b13e:	d0f3      	beq.n	b128 <mayfly_radio_active+0x10>
    b140:	bd08      	pop	{r3, pc}
    b142:	bf00      	nop
    b144:	200016a2 	.word	0x200016a2

0000b148 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    b148:	2000      	movs	r0, #0
    b14a:	f7ff bfe5 	b.w	b118 <mayfly_radio_active>
	...

0000b150 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b150:	2200      	movs	r2, #0
{
    b152:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b154:	4611      	mov	r1, r2
    b156:	4b04      	ldr	r3, [pc, #16]	; (b168 <event_xtal+0x18>)
    b158:	4610      	mov	r0, r2
    b15a:	f7fc fbdf 	bl	791c <mayfly_enqueue>
	LL_ASSERT(!retval);
    b15e:	b108      	cbz	r0, b164 <event_xtal+0x14>
    b160:	f7ff fde6 	bl	ad30 <event_active.part.17>
    b164:	bd08      	pop	{r3, pc}
    b166:	bf00      	nop
    b168:	2000cf10 	.word	0x2000cf10

0000b16c <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b16c:	2200      	movs	r2, #0
{
    b16e:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b170:	4611      	mov	r1, r2
    b172:	4b04      	ldr	r3, [pc, #16]	; (b184 <event_active+0x18>)
    b174:	4610      	mov	r0, r2
    b176:	f7fc fbd1 	bl	791c <mayfly_enqueue>
	LL_ASSERT(!retval);
    b17a:	b108      	cbz	r0, b180 <event_active+0x14>
    b17c:	f7ff fdd8 	bl	ad30 <event_active.part.17>
    b180:	bd08      	pop	{r3, pc}
    b182:	bf00      	nop
    b184:	2000cea0 	.word	0x2000cea0

0000b188 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    b188:	b508      	push	{r3, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    b18a:	b108      	cbz	r0, b190 <ticker_op_latency_cancelled+0x8>
    b18c:	f7ff fdd0 	bl	ad30 <event_active.part.17>

	conn->slave.latency_cancel = 0;
    b190:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    b194:	f360 0341 	bfi	r3, r0, #1, #1
    b198:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
    b19c:	bd08      	pop	{r3, pc}
	...

0000b1a0 <ticker_update_slave_assert>:
{
    b1a0:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b1a2:	b130      	cbz	r0, b1b2 <ticker_update_slave_assert+0x12>
    b1a4:	4b03      	ldr	r3, [pc, #12]	; (b1b4 <ticker_update_slave_assert+0x14>)
    b1a6:	7c9b      	ldrb	r3, [r3, #18]
    b1a8:	b2c9      	uxtb	r1, r1
    b1aa:	4299      	cmp	r1, r3
    b1ac:	d001      	beq.n	b1b2 <ticker_update_slave_assert+0x12>
    b1ae:	f7ff fdbf 	bl	ad30 <event_active.part.17>
    b1b2:	bd08      	pop	{r3, pc}
    b1b4:	200008e0 	.word	0x200008e0

0000b1b8 <ticker_update_adv_assert>:
{
    b1b8:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    b1ba:	b128      	cbz	r0, b1c8 <ticker_update_adv_assert+0x10>
    b1bc:	4b03      	ldr	r3, [pc, #12]	; (b1cc <ticker_update_adv_assert+0x14>)
    b1be:	7c9b      	ldrb	r3, [r3, #18]
    b1c0:	2b05      	cmp	r3, #5
    b1c2:	d001      	beq.n	b1c8 <ticker_update_adv_assert+0x10>
    b1c4:	f7ff fdb4 	bl	ad30 <event_active.part.17>
    b1c8:	bd08      	pop	{r3, pc}
    b1ca:	bf00      	nop
    b1cc:	200008e0 	.word	0x200008e0

0000b1d0 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b1d0:	2801      	cmp	r0, #1
{
    b1d2:	b508      	push	{r3, lr}
    b1d4:	4b09      	ldr	r3, [pc, #36]	; (b1fc <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    b1d6:	d107      	bne.n	b1e8 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    b1d8:	7c9a      	ldrb	r2, [r3, #18]
    b1da:	2a06      	cmp	r2, #6
    b1dc:	d102      	bne.n	b1e4 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    b1de:	2200      	movs	r2, #0
    b1e0:	749a      	strb	r2, [r3, #18]
    b1e2:	bd08      	pop	{r3, pc}
    b1e4:	f7ff fda4 	bl	ad30 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    b1e8:	7c1b      	ldrb	r3, [r3, #16]
    b1ea:	2b06      	cmp	r3, #6
    b1ec:	d105      	bne.n	b1fa <ticker_stop_scan_assert+0x2a>
    b1ee:	4040      	eors	r0, r0
    b1f0:	f380 8811 	msr	BASEPRI, r0
    b1f4:	f04f 0004 	mov.w	r0, #4
    b1f8:	df02      	svc	2
    b1fa:	bd08      	pop	{r3, pc}
    b1fc:	200008e0 	.word	0x200008e0

0000b200 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    b200:	2801      	cmp	r0, #1
{
    b202:	b508      	push	{r3, lr}
    b204:	4b09      	ldr	r3, [pc, #36]	; (b22c <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    b206:	d107      	bne.n	b218 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    b208:	7c9a      	ldrb	r2, [r3, #18]
    b20a:	2a05      	cmp	r2, #5
    b20c:	d102      	bne.n	b214 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    b20e:	2200      	movs	r2, #0
    b210:	749a      	strb	r2, [r3, #18]
    b212:	bd08      	pop	{r3, pc}
    b214:	f7ff fd8c 	bl	ad30 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    b218:	7c1b      	ldrb	r3, [r3, #16]
    b21a:	2b05      	cmp	r3, #5
    b21c:	d105      	bne.n	b22a <ticker_stop_adv_assert+0x2a>
    b21e:	4040      	eors	r0, r0
    b220:	f380 8811 	msr	BASEPRI, r0
    b224:	f04f 0004 	mov.w	r0, #4
    b228:	df02      	svc	2
    b22a:	bd08      	pop	{r3, pc}
    b22c:	200008e0 	.word	0x200008e0

0000b230 <ticker_success_assert>:
{
    b230:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    b232:	b108      	cbz	r0, b238 <ticker_success_assert+0x8>
    b234:	f7ff fd7c 	bl	ad30 <event_active.part.17>
    b238:	bd08      	pop	{r3, pc}
	...

0000b23c <ticker_stop_adv_stop>:
{
    b23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    b23e:	4c3e      	ldr	r4, [pc, #248]	; (b338 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
    b240:	b120      	cbz	r0, b24c <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    b242:	7ca3      	ldrb	r3, [r4, #18]
    b244:	2b05      	cmp	r3, #5
    b246:	d075      	beq.n	b334 <ticker_stop_adv_stop+0xf8>
    b248:	f7ff fd72 	bl	ad30 <event_active.part.17>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    b24c:	7c23      	ldrb	r3, [r4, #16]
    b24e:	2b05      	cmp	r3, #5
    b250:	d002      	beq.n	b258 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    b252:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    b254:	2b05      	cmp	r3, #5
    b256:	d165      	bne.n	b324 <ticker_stop_adv_stop+0xe8>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    b258:	ab04      	add	r3, sp, #16
    b25a:	2202      	movs	r2, #2
    b25c:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b260:	2200      	movs	r2, #0
    b262:	9300      	str	r3, [sp, #0]
    b264:	2101      	movs	r1, #1
    b266:	4b35      	ldr	r3, [pc, #212]	; (b33c <ticker_stop_adv_stop+0x100>)
    b268:	4610      	mov	r0, r2
    b26a:	f7fd f99f 	bl	85ac <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    b26e:	2802      	cmp	r0, #2
    b270:	d00d      	beq.n	b28e <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    b272:	9802      	ldr	r0, [sp, #8]
    b274:	b1c0      	cbz	r0, b2a8 <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    b276:	9802      	ldr	r0, [sp, #8]
    b278:	2801      	cmp	r0, #1
    b27a:	d119      	bne.n	b2b0 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
    b27c:	7ce3      	ldrb	r3, [r4, #19]
    b27e:	2b00      	cmp	r3, #0
    b280:	d050      	beq.n	b324 <ticker_stop_adv_stop+0xe8>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    b282:	4b2f      	ldr	r3, [pc, #188]	; (b340 <ticker_stop_adv_stop+0x104>)
    b284:	2204      	movs	r2, #4
    b286:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b288:	2200      	movs	r2, #0
    b28a:	4611      	mov	r1, r2
    b28c:	e046      	b.n	b31c <ticker_stop_adv_stop+0xe0>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    b28e:	2201      	movs	r2, #1
    b290:	4611      	mov	r1, r2
    b292:	4610      	mov	r0, r2
    b294:	f7fc fb1a 	bl	78cc <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    b298:	9b02      	ldr	r3, [sp, #8]
    b29a:	2b02      	cmp	r3, #2
    b29c:	d1e9      	bne.n	b272 <ticker_stop_adv_stop+0x36>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b29e:	2101      	movs	r1, #1
    b2a0:	2000      	movs	r0, #0
    b2a2:	f7fd fa3d 	bl	8720 <ticker_job_sched>
    b2a6:	e7f7      	b.n	b298 <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    b2a8:	2302      	movs	r3, #2
    b2aa:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    b2ac:	7c23      	ldrb	r3, [r4, #16]
    b2ae:	b92b      	cbnz	r3, b2bc <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
    b2b0:	4040      	eors	r0, r0
    b2b2:	f380 8811 	msr	BASEPRI, r0
    b2b6:	f04f 0004 	mov.w	r0, #4
    b2ba:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b2bc:	ab03      	add	r3, sp, #12
    b2be:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    b2c0:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b2c2:	4611      	mov	r1, r2
    b2c4:	9300      	str	r3, [sp, #0]
    b2c6:	4b1d      	ldr	r3, [pc, #116]	; (b33c <ticker_stop_adv_stop+0x100>)
    b2c8:	f7fd f970 	bl	85ac <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    b2cc:	2802      	cmp	r0, #2
    b2ce:	d00f      	beq.n	b2f0 <ticker_stop_adv_stop+0xb4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    b2d0:	9a03      	ldr	r2, [sp, #12]
    b2d2:	b1d2      	cbz	r2, b30a <ticker_stop_adv_stop+0xce>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    b2d4:	9c03      	ldr	r4, [sp, #12]
    b2d6:	2c01      	cmp	r4, #1
    b2d8:	d1ea      	bne.n	b2b0 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b2da:	2200      	movs	r2, #0
    b2dc:	4611      	mov	r1, r2
    b2de:	4b19      	ldr	r3, [pc, #100]	; (b344 <ticker_stop_adv_stop+0x108>)
    b2e0:	4620      	mov	r0, r4
    b2e2:	f7fc fb1b 	bl	791c <mayfly_enqueue>
			LL_ASSERT(!ret);
    b2e6:	4602      	mov	r2, r0
    b2e8:	2800      	cmp	r0, #0
    b2ea:	d1e1      	bne.n	b2b0 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b2ec:	4b16      	ldr	r3, [pc, #88]	; (b348 <ticker_stop_adv_stop+0x10c>)
    b2ee:	e013      	b.n	b318 <ticker_stop_adv_stop+0xdc>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    b2f0:	2201      	movs	r2, #1
    b2f2:	4611      	mov	r1, r2
    b2f4:	4610      	mov	r0, r2
    b2f6:	f7fc fae9 	bl	78cc <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    b2fa:	9b03      	ldr	r3, [sp, #12]
    b2fc:	2b02      	cmp	r3, #2
    b2fe:	d1e7      	bne.n	b2d0 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    b300:	2101      	movs	r1, #1
    b302:	2000      	movs	r0, #0
    b304:	f7fd fa0c 	bl	8720 <ticker_job_sched>
    b308:	e7f7      	b.n	b2fa <ticker_stop_adv_stop+0xbe>
			u32_t ticks_xtal_to_start =
    b30a:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    b30c:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    b30e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    b312:	428b      	cmp	r3, r1
    b314:	d2ea      	bcs.n	b2ec <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
    b316:	4b0b      	ldr	r3, [pc, #44]	; (b344 <ticker_stop_adv_stop+0x108>)
    b318:	4611      	mov	r1, r2
    b31a:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b31c:	f7fc fafe 	bl	791c <mayfly_enqueue>
			LL_ASSERT(!ret);
    b320:	2800      	cmp	r0, #0
    b322:	d1c5      	bne.n	b2b0 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    b324:	2200      	movs	r2, #0
    b326:	4b09      	ldr	r3, [pc, #36]	; (b34c <ticker_stop_adv_stop+0x110>)
    b328:	4611      	mov	r1, r2
    b32a:	2001      	movs	r0, #1
    b32c:	f7fc faf6 	bl	791c <mayfly_enqueue>
	LL_ASSERT(!retval);
    b330:	2800      	cmp	r0, #0
    b332:	d1bd      	bne.n	b2b0 <ticker_stop_adv_stop+0x74>
}
    b334:	b004      	add	sp, #16
    b336:	bd10      	pop	{r4, pc}
    b338:	200008e0 	.word	0x200008e0
    b33c:	00009fc1 	.word	0x00009fc1
    b340:	2000cef0 	.word	0x2000cef0
    b344:	2000cec0 	.word	0x2000cec0
    b348:	2000cf50 	.word	0x2000cf50
    b34c:	2000ce90 	.word	0x2000ce90

0000b350 <adv_scan_configure.constprop.36>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    b350:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    b352:	ad02      	add	r5, sp, #8
    b354:	4b10      	ldr	r3, [pc, #64]	; (b398 <adv_scan_configure.constprop.36+0x48>)
    b356:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    b35a:	4604      	mov	r4, r0
	radio_reset();
    b35c:	f007 fa72 	bl	12844 <radio_reset>
	radio_tx_power_set(0);
    b360:	2000      	movs	r0, #0
    b362:	f007 fab7 	bl	128d4 <radio_tx_power_set>
	radio_isr_set(isr);
    b366:	480d      	ldr	r0, [pc, #52]	; (b39c <adv_scan_configure.constprop.36+0x4c>)
    b368:	f007 fa36 	bl	127d8 <radio_isr_set>
	radio_phy_set(phy, flags);
    b36c:	2101      	movs	r1, #1
    b36e:	4620      	mov	r0, r4
    b370:	f007 fa82 	bl	12878 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    b374:	4628      	mov	r0, r5
    b376:	f007 facb 	bl	12910 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    b37a:	0062      	lsls	r2, r4, #1
    b37c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    b380:	21ff      	movs	r1, #255	; 0xff
    b382:	2008      	movs	r0, #8
    b384:	f007 fadc 	bl	12940 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    b388:	4905      	ldr	r1, [pc, #20]	; (b3a0 <adv_scan_configure.constprop.36+0x50>)
    b38a:	f240 605b 	movw	r0, #1627	; 0x65b
    b38e:	f007 fb79 	bl	12a84 <radio_crc_configure>
}
    b392:	b003      	add	sp, #12
    b394:	bd30      	pop	{r4, r5, pc}
    b396:	bf00      	nop
    b398:	8e89bed6 	.word	0x8e89bed6
    b39c:	0000e0b9 	.word	0x0000e0b9
    b3a0:	00555555 	.word	0x00555555

0000b3a4 <event_stop.constprop.37>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    b3a4:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    b3a6:	4b05      	ldr	r3, [pc, #20]	; (b3bc <event_stop.constprop.37+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b3a8:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    b3aa:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b3ac:	4611      	mov	r1, r2
    b3ae:	4610      	mov	r0, r2
    b3b0:	f7fc fab4 	bl	791c <mayfly_enqueue>
	LL_ASSERT(!retval);
    b3b4:	b108      	cbz	r0, b3ba <event_stop.constprop.37+0x16>
    b3b6:	f7ff fcbb 	bl	ad30 <event_active.part.17>
    b3ba:	bd08      	pop	{r3, pc}
    b3bc:	2000cee0 	.word	0x2000cee0

0000b3c0 <event_common_prepare>:
{
    b3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    b3c4:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    b3c6:	681d      	ldr	r5, [r3, #0]
{
    b3c8:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b3ca:	2c00      	cmp	r4, #0
{
    b3cc:	4681      	mov	r9, r0
    b3ce:	910b      	str	r1, [sp, #44]	; 0x2c
    b3d0:	4690      	mov	r8, r2
    b3d2:	469b      	mov	fp, r3
    b3d4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    b3d8:	da03      	bge.n	b3e2 <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    b3da:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b3dc:	42ac      	cmp	r4, r5
    b3de:	bf38      	it	cc
    b3e0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    b3e2:	42ac      	cmp	r4, r5
    b3e4:	4f4e      	ldr	r7, [pc, #312]	; (b520 <event_common_prepare+0x160>)
    b3e6:	d91b      	bls.n	b420 <event_common_prepare+0x60>
		ticker_status =
    b3e8:	f241 7348 	movw	r3, #5960	; 0x1748
    b3ec:	9308      	str	r3, [sp, #32]
    b3ee:	4b4d      	ldr	r3, [pc, #308]	; (b524 <event_common_prepare+0x164>)
    b3f0:	9305      	str	r3, [sp, #20]
    b3f2:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    b3f4:	1b63      	subs	r3, r4, r5
		ticker_status =
    b3f6:	9300      	str	r3, [sp, #0]
    b3f8:	9707      	str	r7, [sp, #28]
    b3fa:	464b      	mov	r3, r9
    b3fc:	9106      	str	r1, [sp, #24]
    b3fe:	9104      	str	r1, [sp, #16]
    b400:	9103      	str	r1, [sp, #12]
    b402:	9102      	str	r1, [sp, #8]
    b404:	9101      	str	r1, [sp, #4]
    b406:	2201      	movs	r2, #1
    b408:	4608      	mov	r0, r1
    b40a:	f7fd f831 	bl	8470 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b40e:	f030 0302 	bics.w	r3, r0, #2
    b412:	d02b      	beq.n	b46c <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    b414:	4040      	eors	r0, r0
    b416:	f380 8811 	msr	BASEPRI, r0
    b41a:	f04f 0004 	mov.w	r0, #4
    b41e:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    b420:	d21d      	bcs.n	b45e <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    b422:	2300      	movs	r3, #0
    b424:	461a      	mov	r2, r3
    b426:	4619      	mov	r1, r3
    b428:	4618      	mov	r0, r3
    b42a:	f7ff fe9f 	bl	b16c <event_active>
		ticker_status =
    b42e:	f241 735d 	movw	r3, #5981	; 0x175d
    b432:	2100      	movs	r1, #0
    b434:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    b436:	1b2c      	subs	r4, r5, r4
		ticker_status =
    b438:	4b3b      	ldr	r3, [pc, #236]	; (b528 <event_common_prepare+0x168>)
    b43a:	9305      	str	r3, [sp, #20]
    b43c:	9707      	str	r7, [sp, #28]
    b43e:	464b      	mov	r3, r9
    b440:	9106      	str	r1, [sp, #24]
    b442:	9104      	str	r1, [sp, #16]
    b444:	9103      	str	r1, [sp, #12]
    b446:	9102      	str	r1, [sp, #8]
    b448:	9101      	str	r1, [sp, #4]
    b44a:	9400      	str	r4, [sp, #0]
    b44c:	2201      	movs	r2, #1
    b44e:	4608      	mov	r0, r1
    b450:	f7fd f80e 	bl	8470 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b454:	f030 0302 	bics.w	r3, r0, #2
    b458:	d1dc      	bne.n	b414 <event_common_prepare+0x54>
    b45a:	462c      	mov	r4, r5
    b45c:	e00b      	b.n	b476 <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    b45e:	2300      	movs	r3, #0
    b460:	461a      	mov	r2, r3
    b462:	4619      	mov	r1, r3
    b464:	4618      	mov	r0, r3
    b466:	f7ff fe81 	bl	b16c <event_active>
		event_xtal(0, 0, 0, NULL);
    b46a:	2300      	movs	r3, #0
    b46c:	461a      	mov	r2, r3
    b46e:	4619      	mov	r1, r3
    b470:	4618      	mov	r0, r3
    b472:	f7ff fe6d 	bl	b150 <event_xtal>
	_radio.remainder_anchor = remainder;
    b476:	4e2d      	ldr	r6, [pc, #180]	; (b52c <event_common_prepare+0x16c>)
    b478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b47a:	60f3      	str	r3, [r6, #12]
	ticker_status =
    b47c:	f241 7375 	movw	r3, #6005	; 0x1775
    b480:	9308      	str	r3, [sp, #32]
    b482:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b484:	9306      	str	r3, [sp, #24]
    b486:	2200      	movs	r2, #0
    b488:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b48a:	9305      	str	r3, [sp, #20]
    b48c:	9707      	str	r7, [sp, #28]
    b48e:	464b      	mov	r3, r9
    b490:	9204      	str	r2, [sp, #16]
    b492:	9203      	str	r2, [sp, #12]
    b494:	9202      	str	r2, [sp, #8]
    b496:	9201      	str	r2, [sp, #4]
    b498:	9400      	str	r4, [sp, #0]
    b49a:	4611      	mov	r1, r2
    b49c:	4610      	mov	r0, r2
    b49e:	f7fc ffe7 	bl	8470 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b4a2:	f030 0302 	bics.w	r3, r0, #2
    b4a6:	d1b5      	bne.n	b414 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b4a8:	2005      	movs	r0, #5
    b4aa:	f7ff ff7b 	bl	b3a4 <event_stop.constprop.37>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    b4ae:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
    b4b2:	429d      	cmp	r5, r3
    b4b4:	d023      	beq.n	b4fe <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    b4b6:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b4ba:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    b4be:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    b4c0:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    b4c2:	bfbc      	itt	lt
    b4c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    b4c8:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    b4cc:	f8d6 2d6c 	ldr.w	r2, [r6, #3436]	; 0xd6c
    b4d0:	f8d8 1000 	ldr.w	r1, [r8]
    b4d4:	428a      	cmp	r2, r1
    b4d6:	bf38      	it	cc
    b4d8:	460a      	movcc	r2, r1
		ticker_status =
    b4da:	f241 71a5 	movw	r1, #6053	; 0x17a5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    b4de:	b2a3      	uxth	r3, r4
    b4e0:	b292      	uxth	r2, r2
		ticker_status =
    b4e2:	9106      	str	r1, [sp, #24]
    b4e4:	2100      	movs	r1, #0
    b4e6:	9302      	str	r3, [sp, #8]
    b4e8:	9201      	str	r2, [sp, #4]
    b4ea:	9200      	str	r2, [sp, #0]
    b4ec:	9104      	str	r1, [sp, #16]
    b4ee:	9103      	str	r1, [sp, #12]
    b4f0:	4652      	mov	r2, sl
    b4f2:	4608      	mov	r0, r1
    b4f4:	f7fd f80c 	bl	8510 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b4f8:	f030 0302 	bics.w	r3, r0, #2
    b4fc:	d18a      	bne.n	b414 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    b4fe:	20ff      	movs	r0, #255	; 0xff
    b500:	f7ff fd18 	bl	af34 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b504:	4b0a      	ldr	r3, [pc, #40]	; (b530 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b506:	2201      	movs	r2, #1
    b508:	4611      	mov	r1, r2
    b50a:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    b50c:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b510:	f7fc fa04 	bl	791c <mayfly_enqueue>
		LL_ASSERT(!retval);
    b514:	2800      	cmp	r0, #0
    b516:	f47f af7d 	bne.w	b414 <event_common_prepare+0x54>
}
    b51a:	b00d      	add	sp, #52	; 0x34
    b51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b520:	0000b231 	.word	0x0000b231
    b524:	0000b16d 	.word	0x0000b16d
    b528:	0000b151 	.word	0x0000b151
    b52c:	200008e0 	.word	0x200008e0
    b530:	2000cf70 	.word	0x2000cf70

0000b534 <radio_event_adv_prepare>:
{
    b534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b536:	4a0b      	ldr	r2, [pc, #44]	; (b564 <radio_event_adv_prepare+0x30>)
    b538:	7c13      	ldrb	r3, [r2, #16]
    b53a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    b53e:	b10b      	cbz	r3, b544 <radio_event_adv_prepare+0x10>
    b540:	f7ff fbf6 	bl	ad30 <event_active.part.17>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    b544:	2305      	movs	r3, #5
    b546:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    b548:	9403      	str	r4, [sp, #12]
    b54a:	4c07      	ldr	r4, [pc, #28]	; (b568 <radio_event_adv_prepare+0x34>)
    b54c:	9402      	str	r4, [sp, #8]
    b54e:	9301      	str	r3, [sp, #4]
    b550:	6a13      	ldr	r3, [r2, #32]
    b552:	9300      	str	r3, [sp, #0]
    b554:	f102 031c 	add.w	r3, r2, #28
    b558:	3218      	adds	r2, #24
    b55a:	f7ff ff31 	bl	b3c0 <event_common_prepare>
}
    b55e:	b004      	add	sp, #16
    b560:	bd10      	pop	{r4, pc}
    b562:	bf00      	nop
    b564:	200008e0 	.word	0x200008e0
    b568:	0000b6c1 	.word	0x0000b6c1

0000b56c <radio_event_ext_adv_prepare>:
{
    b56c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b56e:	4a0b      	ldr	r2, [pc, #44]	; (b59c <radio_event_ext_adv_prepare+0x30>)
    b570:	7c13      	ldrb	r3, [r2, #16]
    b572:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    b576:	b10b      	cbz	r3, b57c <radio_event_ext_adv_prepare+0x10>
    b578:	f7ff fbda 	bl	ad30 <event_active.part.17>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    b57c:	2305      	movs	r3, #5
    b57e:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    b580:	9403      	str	r4, [sp, #12]
    b582:	4c07      	ldr	r4, [pc, #28]	; (b5a0 <radio_event_ext_adv_prepare+0x34>)
    b584:	9402      	str	r4, [sp, #8]
    b586:	9301      	str	r3, [sp, #4]
    b588:	6a13      	ldr	r3, [r2, #32]
    b58a:	9300      	str	r3, [sp, #0]
    b58c:	f102 031c 	add.w	r3, r2, #28
    b590:	3218      	adds	r2, #24
    b592:	f7ff ff15 	bl	b3c0 <event_common_prepare>
}
    b596:	b004      	add	sp, #16
    b598:	bd10      	pop	{r4, pc}
    b59a:	bf00      	nop
    b59c:	200008e0 	.word	0x200008e0
    b5a0:	0000b781 	.word	0x0000b781

0000b5a4 <event_adv_stop>:
{
    b5a4:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    b5a6:	2005      	movs	r0, #5
    b5a8:	f7ff fefc 	bl	b3a4 <event_stop.constprop.37>
	ticker_status =
    b5ac:	f641 438b 	movw	r3, #7307	; 0x1c8b
    b5b0:	2100      	movs	r1, #0
    b5b2:	9300      	str	r3, [sp, #0]
    b5b4:	2205      	movs	r2, #5
    b5b6:	4b06      	ldr	r3, [pc, #24]	; (b5d0 <event_adv_stop+0x2c>)
    b5b8:	4608      	mov	r0, r1
    b5ba:	f7fc fff7 	bl	85ac <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b5be:	f030 0302 	bics.w	r3, r0, #2
    b5c2:	d001      	beq.n	b5c8 <event_adv_stop+0x24>
    b5c4:	f7ff fbb4 	bl	ad30 <event_active.part.17>
}
    b5c8:	b003      	add	sp, #12
    b5ca:	f85d fb04 	ldr.w	pc, [sp], #4
    b5ce:	bf00      	nop
    b5d0:	0000b23d 	.word	0x0000b23d

0000b5d4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    b5d4:	4b02      	ldr	r3, [pc, #8]	; (b5e0 <mayfly_xtal_start+0xc>)
    b5d6:	6818      	ldr	r0, [r3, #0]
    b5d8:	6843      	ldr	r3, [r0, #4]
    b5da:	2100      	movs	r1, #0
    b5dc:	681b      	ldr	r3, [r3, #0]
    b5de:	4718      	bx	r3
    b5e0:	200008e0 	.word	0x200008e0

0000b5e4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    b5e4:	4b02      	ldr	r3, [pc, #8]	; (b5f0 <mayfly_xtal_stop+0xc>)
    b5e6:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    b5e8:	6843      	ldr	r3, [r0, #4]
    b5ea:	2100      	movs	r1, #0
    b5ec:	685b      	ldr	r3, [r3, #4]
    b5ee:	4718      	bx	r3
    b5f0:	200008e0 	.word	0x200008e0

0000b5f4 <chan_sel_2>:
{
    b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    b5f6:	4048      	eors	r0, r1
    b5f8:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b5fa:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    b5fe:	2608      	movs	r6, #8
	o = 0;
    b600:	2400      	movs	r4, #0
		o |= (i & 1);
    b602:	f00e 0501 	and.w	r5, lr, #1
    b606:	3e01      	subs	r6, #1
    b608:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    b60c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    b610:	b2ec      	uxtb	r4, r5
		i >>= 1;
    b612:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b616:	d1f4      	bne.n	b602 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b618:	0225      	lsls	r5, r4, #8
    b61a:	b22d      	sxth	r5, r5
    b61c:	b2c0      	uxtb	r0, r0
    b61e:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    b622:	4634      	mov	r4, r6
		o |= (i & 1);
    b624:	f000 0601 	and.w	r6, r0, #1
    b628:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    b62c:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    b630:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    b634:	b2e4      	uxtb	r4, r4
		i >>= 1;
    b636:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    b63a:	d1f3      	bne.n	b624 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    b63c:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b63e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    b642:	3f01      	subs	r7, #1
    b644:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    b646:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    b64a:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    b64c:	d1d5      	bne.n	b5fa <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    b64e:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    b650:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    b652:	fbb1 f0f4 	udiv	r0, r1, r4
    b656:	fb04 1010 	mls	r0, r4, r0, r1
    b65a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    b65c:	08c4      	lsrs	r4, r0, #3
    b65e:	f000 0507 	and.w	r5, r0, #7
    b662:	5d14      	ldrb	r4, [r2, r4]
    b664:	412c      	asrs	r4, r5
    b666:	07e4      	lsls	r4, r4, #31
    b668:	d407      	bmi.n	b67a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    b66a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    b66c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    b670:	4610      	mov	r0, r2
}
    b672:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    b676:	f7fe bcb1 	b.w	9fdc <chan_sel_remap>
}
    b67a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b67c <preempt_calc>:
{
    b67c:	b570      	push	{r4, r5, r6, lr}
    b67e:	4614      	mov	r4, r2
    b680:	460e      	mov	r6, r1
    b682:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    b684:	f7fd f862 	bl	874c <ticker_ticks_now_get>
	u32_t diff =
    b688:	4621      	mov	r1, r4
    b68a:	f7fd f861 	bl	8750 <ticker_ticks_diff_get>
	diff += 3;
    b68e:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    b690:	2c09      	cmp	r4, #9
    b692:	d911      	bls.n	b6b8 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    b694:	4b09      	ldr	r3, [pc, #36]	; (b6bc <preempt_calc+0x40>)
    b696:	781b      	ldrb	r3, [r3, #0]
    b698:	b113      	cbz	r3, b6a0 <preempt_calc+0x24>
    b69a:	2000      	movs	r0, #0
    b69c:	f7ff fb2c 	bl	acf8 <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    b6a0:	4632      	mov	r2, r6
    b6a2:	2100      	movs	r1, #0
    b6a4:	4628      	mov	r0, r5
    b6a6:	f7ff fb49 	bl	ad3c <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    b6aa:	68ab      	ldr	r3, [r5, #8]
    b6ac:	441c      	add	r4, r3
		if (diff <
    b6ae:	2c26      	cmp	r4, #38	; 0x26
    b6b0:	d800      	bhi.n	b6b4 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    b6b2:	60ac      	str	r4, [r5, #8]
		return 1;
    b6b4:	2001      	movs	r0, #1
}
    b6b6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    b6b8:	2000      	movs	r0, #0
    b6ba:	bd70      	pop	{r4, r5, r6, pc}
    b6bc:	200016ec 	.word	0x200016ec

0000b6c0 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    b6c0:	4b2c      	ldr	r3, [pc, #176]	; (b774 <event_adv+0xb4>)
    b6c2:	7cda      	ldrb	r2, [r3, #19]
{
    b6c4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b6c6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    b6ca:	4605      	mov	r5, r0
    b6cc:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    b6ce:	b12a      	cbz	r2, b6dc <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b6d0:	4040      	eors	r0, r0
    b6d2:	f380 8811 	msr	BASEPRI, r0
    b6d6:	f04f 0004 	mov.w	r0, #4
    b6da:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    b6dc:	7c1b      	ldrb	r3, [r3, #16]
    b6de:	b2db      	uxtb	r3, r3
    b6e0:	2b05      	cmp	r3, #5
    b6e2:	d1f5      	bne.n	b6d0 <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    b6e4:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    b6e6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    b6ea:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    b6ec:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
    b6f0:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    b6f2:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    b6f4:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    b6f6:	f7ff fe2b 	bl	b350 <adv_scan_configure.constprop.36>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    b6fa:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    b6fe:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    b702:	f3c3 1302 	ubfx	r3, r3, #4, #3
    b706:	f363 0202 	bfi	r2, r3, #0, #3
    b70a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    b70e:	f7ff f83f 	bl	a790 <adv_setup>
	if (ctrl_rl_enabled()) {
    b712:	f006 fb4f 	bl	11db4 <ctrl_rl_enabled>
    b716:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    b71a:	b1f8      	cbz	r0, b75c <event_adv+0x9c>
		struct ll_filter *filter =
    b71c:	f013 0003 	ands.w	r0, r3, #3
    b720:	bf18      	it	ne
    b722:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
    b724:	f006 f9a6 	bl	11a74 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b728:	1c82      	adds	r2, r0, #2
    b72a:	7841      	ldrb	r1, [r0, #1]
    b72c:	7800      	ldrb	r0, [r0, #0]
    b72e:	f007 fa0d 	bl	12b4c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    b732:	68e2      	ldr	r2, [r4, #12]
    b734:	f105 0109 	add.w	r1, r5, #9
    b738:	2001      	movs	r0, #1
    b73a:	f007 fa6b 	bl	12c14 <radio_tmr_start>
	radio_tmr_end_capture();
    b73e:	f007 fb27 	bl	12d90 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    b742:	462a      	mov	r2, r5
    b744:	2105      	movs	r1, #5
    b746:	480c      	ldr	r0, [pc, #48]	; (b778 <event_adv+0xb8>)
    b748:	f7ff ff98 	bl	b67c <preempt_calc>
    b74c:	4603      	mov	r3, r0
    b74e:	b148      	cbz	r0, b764 <event_adv+0xa4>
		_radio.state = STATE_STOP;
    b750:	2304      	movs	r3, #4
    b752:	7523      	strb	r3, [r4, #20]
}
    b754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    b758:	f007 b958 	b.w	12a0c <radio_disable>
	if (_radio.advertiser.filter_policy) {
    b75c:	079b      	lsls	r3, r3, #30
    b75e:	d0e8      	beq.n	b732 <event_adv+0x72>
		struct ll_filter *wl = ctrl_filter_get(true);
    b760:	4630      	mov	r0, r6
    b762:	e7df      	b.n	b724 <event_adv+0x64>
		ticker_status =
    b764:	4a05      	ldr	r2, [pc, #20]	; (b77c <event_adv+0xbc>)
    b766:	4601      	mov	r1, r0
    b768:	f7fc ff9e 	bl	86a8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b76c:	f030 0302 	bics.w	r3, r0, #2
    b770:	d1ae      	bne.n	b6d0 <event_adv+0x10>
    b772:	bd70      	pop	{r4, r5, r6, pc}
    b774:	200008e0 	.word	0x200008e0
    b778:	200008f8 	.word	0x200008f8
    b77c:	0000aca5 	.word	0x0000aca5

0000b780 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    b780:	4b25      	ldr	r3, [pc, #148]	; (b818 <event_ext_adv+0x98>)
    b782:	7cd9      	ldrb	r1, [r3, #19]
{
    b784:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    b786:	f001 02ff 	and.w	r2, r1, #255	; 0xff
{
    b78a:	4605      	mov	r5, r0
    b78c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    b78e:	b129      	cbz	r1, b79c <event_ext_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b790:	4040      	eors	r0, r0
    b792:	f380 8811 	msr	BASEPRI, r0
    b796:	f04f 0004 	mov.w	r0, #4
    b79a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    b79c:	7c1b      	ldrb	r3, [r3, #16]
    b79e:	b2db      	uxtb	r3, r3
    b7a0:	2b05      	cmp	r3, #5
    b7a2:	d1f5      	bne.n	b790 <event_ext_adv+0x10>
	_radio.role = ROLE_ADV;
    b7a4:	2601      	movs	r6, #1
    b7a6:	74e6      	strb	r6, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    b7a8:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    b7aa:	7422      	strb	r2, [r4, #16]
	_radio.ext_advertiser.aux_chain_count_current = 0;
    b7ac:	f884 2c8d 	strb.w	r2, [r4, #3213]	; 0xc8d
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    b7b0:	7463      	strb	r3, [r4, #17]
	ext_adv_setup();
    b7b2:	f7ff f913 	bl	a9dc <ext_adv_setup>
	if (ctrl_rl_enabled()) {
    b7b6:	f006 fafd 	bl	11db4 <ctrl_rl_enabled>
    b7ba:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    b7be:	b1f8      	cbz	r0, b800 <event_ext_adv+0x80>
		struct ll_filter *filter =
    b7c0:	f013 0003 	ands.w	r0, r3, #3
    b7c4:	bf18      	it	ne
    b7c6:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
    b7c8:	f006 f954 	bl	11a74 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    b7cc:	1c82      	adds	r2, r0, #2
    b7ce:	7841      	ldrb	r1, [r0, #1]
    b7d0:	7800      	ldrb	r0, [r0, #0]
    b7d2:	f007 f9bb 	bl	12b4c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    b7d6:	68e2      	ldr	r2, [r4, #12]
    b7d8:	f105 0109 	add.w	r1, r5, #9
    b7dc:	2001      	movs	r0, #1
    b7de:	f007 fa19 	bl	12c14 <radio_tmr_start>
	radio_tmr_end_capture();
    b7e2:	f007 fad5 	bl	12d90 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    b7e6:	462a      	mov	r2, r5
    b7e8:	2105      	movs	r1, #5
    b7ea:	480c      	ldr	r0, [pc, #48]	; (b81c <event_ext_adv+0x9c>)
    b7ec:	f7ff ff46 	bl	b67c <preempt_calc>
    b7f0:	4603      	mov	r3, r0
    b7f2:	b148      	cbz	r0, b808 <event_ext_adv+0x88>
		_radio.state = STATE_STOP;
    b7f4:	2304      	movs	r3, #4
    b7f6:	7523      	strb	r3, [r4, #20]
}
    b7f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    b7fc:	f007 b906 	b.w	12a0c <radio_disable>
	if (_radio.advertiser.filter_policy) {
    b800:	079b      	lsls	r3, r3, #30
    b802:	d0e8      	beq.n	b7d6 <event_ext_adv+0x56>
		struct ll_filter *wl = ctrl_filter_get(true);
    b804:	4630      	mov	r0, r6
    b806:	e7df      	b.n	b7c8 <event_ext_adv+0x48>
		ticker_status =
    b808:	4a05      	ldr	r2, [pc, #20]	; (b820 <event_ext_adv+0xa0>)
    b80a:	4601      	mov	r1, r0
    b80c:	f7fc ff4c 	bl	86a8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b810:	f030 0302 	bics.w	r3, r0, #2
    b814:	d1bc      	bne.n	b790 <event_ext_adv+0x10>
    b816:	bd70      	pop	{r4, r5, r6, pc}
    b818:	200008e0 	.word	0x200008e0
    b81c:	200008f8 	.word	0x200008f8
    b820:	0000aca5 	.word	0x0000aca5

0000b824 <ctrl_tx_enqueue>:
{
    b824:	b510      	push	{r4, lr}
	    !conn->empty &&
    b826:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b82a:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    b82e:	f014 0f80 	tst.w	r4, #128	; 0x80
    b832:	d118      	bne.n	b866 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b834:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    b838:	b1ab      	cbz	r3, b866 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    b83a:	0724      	lsls	r4, r4, #28
    b83c:	d413      	bmi.n	b866 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    b83e:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    b842:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    b844:	bf04      	itt	eq
    b846:	681c      	ldreq	r4, [r3, #0]
    b848:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    b84c:	b992      	cbnz	r2, b874 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    b84e:	681a      	ldr	r2, [r3, #0]
    b850:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    b852:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    b854:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    b858:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    b85c:	680b      	ldr	r3, [r1, #0]
    b85e:	b90b      	cbnz	r3, b864 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    b860:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    b864:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    b866:	b92a      	cbnz	r2, b874 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    b868:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    b86c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    b86e:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    b872:	e7ef      	b.n	b854 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    b874:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b878:	681a      	ldr	r2, [r3, #0]
    b87a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    b87c:	6019      	str	r1, [r3, #0]
    b87e:	e7eb      	b.n	b858 <ctrl_tx_enqueue+0x34>

0000b880 <ctrl_tx_sec_enqueue>:
{
    b880:	b410      	push	{r4}
	if (conn->pause_tx) {
    b882:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    b886:	0724      	lsls	r4, r4, #28
{
    b888:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    b88a:	d50f      	bpl.n	b8ac <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    b88c:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    b890:	b931      	cbnz	r1, b8a0 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    b892:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    b896:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    b898:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    b89c:	bc10      	pop	{r4}
    b89e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    b8a0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    b8a4:	6819      	ldr	r1, [r3, #0]
    b8a6:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    b8a8:	601a      	str	r2, [r3, #0]
    b8aa:	e7f7      	b.n	b89c <ctrl_tx_sec_enqueue+0x1c>
}
    b8ac:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    b8ae:	f7ff bfb9 	b.w	b824 <ctrl_tx_enqueue>
	...

0000b8b4 <feature_rsp_send>:
{
    b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8b6:	4f21      	ldr	r7, [pc, #132]	; (b93c <feature_rsp_send+0x88>)
{
    b8b8:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8ba:	f607 5044 	addw	r0, r7, #3396	; 0xd44
{
    b8be:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b8c0:	f7fb ff61 	bl	7786 <mem_acquire>
	if (!node_tx) {
    b8c4:	4604      	mov	r4, r0
    b8c6:	b3b0      	cbz	r0, b936 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b8c8:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    b8ca:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b8cc:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    b8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    b8d4:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    b8d8:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    b8dc:	f043 0310 	orr.w	r3, r3, #16
    b8e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    b8e4:	79b1      	ldrb	r1, [r6, #6]
    b8e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    b8ea:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    b8ee:	f3c1 0110 	ubfx	r1, r1, #0, #17
    b8f2:	400b      	ands	r3, r1
    b8f4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    b8f8:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    b8fc:	f043 0320 	orr.w	r3, r3, #32
    b900:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b904:	7903      	ldrb	r3, [r0, #4]
    b906:	f043 0303 	orr.w	r3, r3, #3
    b90a:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b90c:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    b90e:	2309      	movs	r3, #9
    b910:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    b912:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    b914:	2100      	movs	r1, #0
    b916:	4410      	add	r0, r2
    b918:	f7f4 fe8e 	bl	638 <memset>
		conn->llcp_features & 0xFF;
    b91c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    b920:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    b922:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    b924:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    b926:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    b928:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    b92a:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    b92c:	4621      	mov	r1, r4
    b92e:	f7ff ffa7 	bl	b880 <ctrl_tx_sec_enqueue>
	return 0;
    b932:	2000      	movs	r0, #0
    b934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    b936:	2001      	movs	r0, #1
}
    b938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b93a:	bf00      	nop
    b93c:	200008e0 	.word	0x200008e0

0000b940 <start_enc_rsp_send>:
{
    b940:	b510      	push	{r4, lr}
    b942:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    b944:	b9c9      	cbnz	r1, b97a <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b946:	480f      	ldr	r0, [pc, #60]	; (b984 <start_enc_rsp_send+0x44>)
    b948:	f7fb ff1d 	bl	7786 <mem_acquire>
		if (!node_tx) {
    b94c:	b1b8      	cbz	r0, b97e <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    b94e:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    b950:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    b954:	f043 0320 	orr.w	r3, r3, #32
    b958:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b95c:	780b      	ldrb	r3, [r1, #0]
    b95e:	f043 0303 	orr.w	r3, r3, #3
    b962:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    b964:	2301      	movs	r3, #1
    b966:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    b968:	2306      	movs	r3, #6
    b96a:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    b96c:	b140      	cbz	r0, b980 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    b96e:	4601      	mov	r1, r0
    b970:	4620      	mov	r0, r4
    b972:	f7ff ff57 	bl	b824 <ctrl_tx_enqueue>
	return 0;
    b976:	2000      	movs	r0, #0
    b978:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    b97a:	2000      	movs	r0, #0
    b97c:	e7e8      	b.n	b950 <start_enc_rsp_send+0x10>
			return 1;
    b97e:	2001      	movs	r0, #1
}
    b980:	bd10      	pop	{r4, pc}
    b982:	bf00      	nop
    b984:	20001624 	.word	0x20001624

0000b988 <reject_ext_ind_send>:
{
    b988:	b570      	push	{r4, r5, r6, lr}
    b98a:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b98c:	480b      	ldr	r0, [pc, #44]	; (b9bc <reject_ext_ind_send+0x34>)
{
    b98e:	460e      	mov	r6, r1
    b990:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    b992:	f7fb fef8 	bl	7786 <mem_acquire>
	if (!node_tx) {
    b996:	b178      	cbz	r0, b9b8 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b998:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    b99a:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    b99c:	f043 0303 	orr.w	r3, r3, #3
    b9a0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    b9a2:	2303      	movs	r3, #3
    b9a4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    b9a6:	2311      	movs	r3, #17
    b9a8:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    b9aa:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    b9ac:	4601      	mov	r1, r0
    b9ae:	4620      	mov	r0, r4
    b9b0:	f7ff ff38 	bl	b824 <ctrl_tx_enqueue>
	return 0;
    b9b4:	2000      	movs	r0, #0
    b9b6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    b9b8:	2001      	movs	r0, #1
}
    b9ba:	bd70      	pop	{r4, r5, r6, pc}
    b9bc:	20001624 	.word	0x20001624

0000b9c0 <event_connection_prepare>:
{
    b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    b9c4:	4db5      	ldr	r5, [pc, #724]	; (bc9c <event_connection_prepare+0x2dc>)
{
    b9c6:	b08f      	sub	sp, #60	; 0x3c
    b9c8:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    b9ca:	7c2b      	ldrb	r3, [r5, #16]
{
    b9cc:	910c      	str	r1, [sp, #48]	; 0x30
    b9ce:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    b9d0:	b12b      	cbz	r3, b9de <event_connection_prepare+0x1e>
		LL_ASSERT(0);
    b9d2:	4040      	eors	r0, r0
    b9d4:	f380 8811 	msr	BASEPRI, r0
    b9d8:	f04f 0004 	mov.w	r0, #4
    b9dc:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    b9de:	f894 3020 	ldrb.w	r3, [r4, #32]
    b9e2:	3307      	adds	r3, #7
    b9e4:	b2db      	uxtb	r3, r3
    b9e6:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    b9e8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    b9ec:	2b00      	cmp	r3, #0
    b9ee:	da09      	bge.n	ba04 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    b9f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    b9f2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    b9f4:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    b9f8:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    b9fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    b9fc:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    b9fe:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    ba00:	bf88      	it	hi
    ba02:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    ba04:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    ba06:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    ba0a:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    ba0c:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    ba0e:	b292      	uxth	r2, r2
    ba10:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    ba12:	4432      	add	r2, r6
    ba14:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    ba16:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    ba1a:	429a      	cmp	r2, r3
    ba1c:	f040 817b 	bne.w	bd16 <event_connection_prepare+0x356>
    ba20:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    ba24:	075f      	lsls	r7, r3, #29
    ba26:	f100 8231 	bmi.w	be8c <event_connection_prepare+0x4cc>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    ba2a:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    ba2e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ba32:	429a      	cmp	r2, r3
    ba34:	d04e      	beq.n	bad4 <event_connection_prepare+0x114>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    ba36:	2005      	movs	r0, #5
    ba38:	f7ff fcb4 	bl	b3a4 <event_stop.constprop.37>
	conn_upd = _radio.conn_upd;
    ba3c:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
	if (conn_upd && (conn_upd != conn)) {
    ba40:	b10b      	cbz	r3, ba46 <event_connection_prepare+0x86>
    ba42:	429c      	cmp	r4, r3
    ba44:	d146      	bne.n	bad4 <event_connection_prepare+0x114>
	switch (conn->llcp_conn_param.state) {
    ba46:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    ba4a:	f003 0307 	and.w	r3, r3, #7
    ba4e:	2b05      	cmp	r3, #5
    ba50:	d8bf      	bhi.n	b9d2 <event_connection_prepare+0x12>
    ba52:	e8df f013 	tbh	[pc, r3, lsl #1]
    ba56:	0006      	.short	0x0006
    ba58:	00f80056 	.word	0x00f80056
    ba5c:	003f003f 	.word	0x003f003f
    ba60:	003f      	.short	0x003f
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ba62:	488f      	ldr	r0, [pc, #572]	; (bca0 <event_connection_prepare+0x2e0>)
    ba64:	f7fb fe8f 	bl	7786 <mem_acquire>
	if (!node_tx) {
    ba68:	4601      	mov	r1, r0
    ba6a:	b398      	cbz	r0, bad4 <event_connection_prepare+0x114>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    ba6c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    ba70:	2204      	movs	r2, #4
    ba72:	f362 0302 	bfi	r3, r2, #0, #3
    ba76:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ba7a:	7903      	ldrb	r3, [r0, #4]
    ba7c:	f043 0303 	orr.w	r3, r3, #3
    ba80:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    ba82:	2318      	movs	r3, #24
    ba84:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    ba86:	230f      	movs	r3, #15
    ba88:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    ba8a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    ba8e:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    ba90:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    ba92:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    ba96:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    ba98:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    ba9c:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    ba9e:	2300      	movs	r3, #0
    baa0:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    baa2:	74c3      	strb	r3, [r0, #19]
    baa4:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    baa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    baaa:	7543      	strb	r3, [r0, #21]
    baac:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    baae:	75c3      	strb	r3, [r0, #23]
    bab0:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    bab2:	7643      	strb	r3, [r0, #25]
    bab4:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    bab6:	76c3      	strb	r3, [r0, #27]
    bab8:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    baba:	7743      	strb	r3, [r0, #29]
    babc:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    babe:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    bac2:	4620      	mov	r0, r4
    bac4:	f7ff feae 	bl	b824 <ctrl_tx_enqueue>
	conn->procedure_expire = conn->procedure_reload;
    bac8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    bacc:	f8c5 4d70 	str.w	r4, [r5, #3440]	; 0xd70
	conn->procedure_expire = conn->procedure_reload;
    bad0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    bad4:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    bad8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    badc:	429a      	cmp	r2, r3
    bade:	f000 8113 	beq.w	bd08 <event_connection_prepare+0x348>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    bae2:	2005      	movs	r0, #5
    bae4:	f7ff fc5e 	bl	b3a4 <event_stop.constprop.37>
	switch (conn->llcp_phy.state) {
    bae8:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    baec:	f003 0203 	and.w	r2, r3, #3
    baf0:	2a03      	cmp	r2, #3
    baf2:	f63f af6e 	bhi.w	b9d2 <event_connection_prepare+0x12>
    baf6:	e8df f012 	tbh	[pc, r2, lsl #1]
    bafa:	00d5      	.short	0x00d5
    bafc:	01070107 	.word	0x01070107
    bb00:	012b      	.short	0x012b
	if (conn->llcp_conn_param.status) {
    bb02:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    bb06:	b1ef      	cbz	r7, bb44 <event_connection_prepare+0x184>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bb08:	4865      	ldr	r0, [pc, #404]	; (bca0 <event_connection_prepare+0x2e0>)
    bb0a:	f7fb fe3c 	bl	7786 <mem_acquire>
		if (!node_tx) {
    bb0e:	4601      	mov	r1, r0
    bb10:	2800      	cmp	r0, #0
    bb12:	d0df      	beq.n	bad4 <event_connection_prepare+0x114>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    bb14:	7903      	ldrb	r3, [r0, #4]
    bb16:	f043 0303 	orr.w	r3, r3, #3
    bb1a:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    bb1c:	2311      	movs	r3, #17
    bb1e:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    bb20:	2303      	movs	r3, #3
    bb22:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bb24:	230f      	movs	r3, #15
    bb26:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    bb28:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    bb2c:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    bb2e:	4620      	mov	r0, r4
    bb30:	f7ff fe78 	bl	b824 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bb34:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bb38:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    bb3c:	2300      	movs	r3, #0
    bb3e:	f8c5 3d70 	str.w	r3, [r5, #3440]	; 0xd70
    bb42:	e7c7      	b.n	bad4 <event_connection_prepare+0x114>
	if (!conn->role) {
    bb44:	f994 301d 	ldrsb.w	r3, [r4, #29]
    bb48:	2b00      	cmp	r3, #0
    bb4a:	db3b      	blt.n	bbc4 <event_connection_prepare+0x204>
		if (conn->llcp_req != conn->llcp_ack) {
    bb4c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    bb50:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bb54:	428b      	cmp	r3, r1
    bb56:	d1bd      	bne.n	bad4 <event_connection_prepare+0x114>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bb58:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    bb5c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bb60:	2205      	movs	r2, #5
    bb62:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    bb66:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    bb6a:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    bb6e:	2301      	movs	r3, #1
    bb70:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    bb74:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    bb78:	b122      	cbz	r2, bb84 <event_connection_prepare+0x1c4>
				((conn->llcp_conn_param.interval /
    bb7a:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    bb7e:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    bb80:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    bb84:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    bb88:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bb8c:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    bb90:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bb94:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    bb98:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    bb9c:	2202      	movs	r2, #2
    bb9e:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    bba2:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    bba6:	f082 0208 	eor.w	r2, r2, #8
    bbaa:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    bbae:	f362 0382 	bfi	r3, r2, #2, #1
    bbb2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    bbb6:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    bbb8:	2301      	movs	r3, #1
    bbba:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bbbe:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    bbc2:	e787      	b.n	bad4 <event_connection_prepare+0x114>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bbc4:	4836      	ldr	r0, [pc, #216]	; (bca0 <event_connection_prepare+0x2e0>)
    bbc6:	f7fb fdde 	bl	7786 <mem_acquire>
	if (!node_tx) {
    bbca:	4601      	mov	r1, r0
    bbcc:	2800      	cmp	r0, #0
    bbce:	d081      	beq.n	bad4 <event_connection_prepare+0x114>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bbd0:	7903      	ldrb	r3, [r0, #4]
    bbd2:	f043 0303 	orr.w	r3, r3, #3
    bbd6:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    bbd8:	2318      	movs	r3, #24
    bbda:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    bbdc:	2310      	movs	r3, #16
    bbde:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    bbe0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bbe4:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    bbe6:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    bbe8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bbec:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    bbee:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bbf2:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    bbf4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    bbf8:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    bbfa:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    bbfe:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    bc02:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    bc06:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    bc0a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    bc0e:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    bc12:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    bc16:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    bc1a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    bc1e:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    bc22:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    bc26:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    bc2a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    bc2e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    bc32:	4620      	mov	r0, r4
    bc34:	f7ff fdf6 	bl	b824 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bc38:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    bc3c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    bc40:	f8c5 7d70 	str.w	r7, [r5, #3440]	; 0xd70
    bc44:	e746      	b.n	bad4 <event_connection_prepare+0x114>
	if (conn->pause_tx) {
    bc46:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    bc4a:	0718      	lsls	r0, r3, #28
    bc4c:	f53f af42 	bmi.w	bad4 <event_connection_prepare+0x114>
	node_rx = packet_rx_reserve_get(2);
    bc50:	2002      	movs	r0, #2
    bc52:	f7fe f9f5 	bl	a040 <packet_rx_reserve_get>
	if (!node_rx) {
    bc56:	2800      	cmp	r0, #0
    bc58:	f43f af3c 	beq.w	bad4 <event_connection_prepare+0x114>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    bc5c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    bc60:	2203      	movs	r2, #3
    bc62:	f362 0302 	bfi	r3, r2, #0, #3
    bc66:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    bc6a:	8c23      	ldrh	r3, [r4, #32]
    bc6c:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    bc6e:	2301      	movs	r3, #1
    bc70:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    bc72:	7a03      	ldrb	r3, [r0, #8]
    bc74:	4313      	orrs	r3, r2
    bc76:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    bc78:	2318      	movs	r3, #24
    bc7a:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    bc7c:	230f      	movs	r3, #15
    bc7e:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    bc80:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    bc84:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    bc86:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    bc88:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    bc8c:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    bc8e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    bc92:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    bc94:	f7ff f89e 	bl	add4 <packet_rx_enqueue>
    bc98:	e71c      	b.n	bad4 <event_connection_prepare+0x114>
    bc9a:	bf00      	nop
    bc9c:	200008e0 	.word	0x200008e0
    bca0:	20001624 	.word	0x20001624
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    bca4:	4897      	ldr	r0, [pc, #604]	; (bf04 <event_connection_prepare+0x544>)
    bca6:	f7fb fd6e 	bl	7786 <mem_acquire>
		if (!node_tx) {
    bcaa:	4601      	mov	r1, r0
    bcac:	b360      	cbz	r0, bd08 <event_connection_prepare+0x348>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    bcae:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bcb2:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    bcb6:	2201      	movs	r2, #1
    bcb8:	f362 0301 	bfi	r3, r2, #0, #2
    bcbc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bcc0:	b2db      	uxtb	r3, r3
    bcc2:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bcc6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bcca:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    bcce:	f363 07c5 	bfi	r7, r3, #3, #3
    bcd2:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    bcd6:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    bcda:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    bcde:	f367 1286 	bfi	r2, r7, #6, #1
    bce2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bce6:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    bce8:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    bcea:	f042 0203 	orr.w	r2, r2, #3
    bcee:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    bcf0:	2203      	movs	r2, #3
    bcf2:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    bcf4:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    bcf6:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    bcf8:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    bcfa:	4620      	mov	r0, r4
    bcfc:	f7ff fd92 	bl	b824 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    bd00:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    bd04:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    bd08:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    bd0c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    bd10:	429a      	cmp	r2, r3
    bd12:	f000 80bb 	beq.w	be8c <event_connection_prepare+0x4cc>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    bd16:	2005      	movs	r0, #5
    bd18:	f7ff fb44 	bl	b3a4 <event_stop.constprop.37>
		switch (conn->llcp_type) {
    bd1c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    bd20:	3b01      	subs	r3, #1
    bd22:	2b07      	cmp	r3, #7
    bd24:	f63f ae55 	bhi.w	b9d2 <event_connection_prepare+0x12>
    bd28:	a201      	add	r2, pc, #4	; (adr r2, bd30 <event_connection_prepare+0x370>)
    bd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd2e:	bf00      	nop
    bd30:	0000be0f 	.word	0x0000be0f
    bd34:	0000c239 	.word	0x0000c239
    bd38:	0000c2f5 	.word	0x0000c2f5
    bd3c:	0000c529 	.word	0x0000c529
    bd40:	0000c589 	.word	0x0000c589
    bd44:	0000b9d3 	.word	0x0000b9d3
    bd48:	0000c629 	.word	0x0000c629
    bd4c:	0000c659 	.word	0x0000c659
		conn->llcp_phy.ack = conn->llcp_phy.req;
    bd50:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    bd54:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    bd58:	f3c3 0282 	ubfx	r2, r3, #2, #3
    bd5c:	0791      	lsls	r1, r2, #30
    bd5e:	d544      	bpl.n	bdea <event_connection_prepare+0x42a>
			conn->llcp_phy.tx = BIT(1);
    bd60:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    bd62:	f362 0384 	bfi	r3, r2, #2, #3
    bd66:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    bd6a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    bd6e:	095a      	lsrs	r2, r3, #5
    bd70:	0790      	lsls	r0, r2, #30
    bd72:	d543      	bpl.n	bdfc <event_connection_prepare+0x43c>
			conn->llcp_phy.rx = BIT(1);
    bd74:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    bd76:	f362 1347 	bfi	r3, r2, #5, #3
    bd7a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    bd7e:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    bd82:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    bd86:	f3c2 0182 	ubfx	r1, r2, #2, #3
    bd8a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    bd8e:	428b      	cmp	r3, r1
    bd90:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    bd94:	bf14      	ite	ne
    bd96:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    bd9a:	f36f 0384 	bfceq	r3, #2, #3
    bd9e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    bda2:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    bda6:	0952      	lsrs	r2, r2, #5
    bda8:	f003 0307 	and.w	r3, r3, #7
    bdac:	4293      	cmp	r3, r2
    bdae:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    bdb2:	bf14      	ite	ne
    bdb4:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    bdb8:	f36f 1347 	bfceq	r3, #5, #3
    bdbc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    bdc0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    bdc4:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    bdc8:	f043 0301 	orr.w	r3, r3, #1
    bdcc:	f3c2 0240 	ubfx	r2, r2, #1, #1
    bdd0:	f362 0341 	bfi	r3, r2, #1, #1
    bdd4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    bdd8:	2308      	movs	r3, #8
    bdda:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    bdde:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bde2:	3b01      	subs	r3, #1
    bde4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    bde8:	e78e      	b.n	bd08 <event_connection_prepare+0x348>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    bdea:	07d7      	lsls	r7, r2, #31
    bdec:	d501      	bpl.n	bdf2 <event_connection_prepare+0x432>
			conn->llcp_phy.tx = BIT(0);
    bdee:	2201      	movs	r2, #1
    bdf0:	e7b7      	b.n	bd62 <event_connection_prepare+0x3a2>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    bdf2:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    bdf6:	bf18      	it	ne
    bdf8:	2204      	movne	r2, #4
    bdfa:	e7b2      	b.n	bd62 <event_connection_prepare+0x3a2>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    bdfc:	07d1      	lsls	r1, r2, #31
    bdfe:	d501      	bpl.n	be04 <event_connection_prepare+0x444>
			conn->llcp_phy.rx = BIT(0);
    be00:	2201      	movs	r2, #1
    be02:	e7b8      	b.n	bd76 <event_connection_prepare+0x3b6>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    be04:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    be08:	bf18      	it	ne
    be0a:	2204      	movne	r2, #4
    be0c:	e7b3      	b.n	bd76 <event_connection_prepare+0x3b6>
	if (!conn_upd) {
    be0e:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
    be12:	b90b      	cbnz	r3, be18 <event_connection_prepare+0x458>
		_radio.conn_upd = conn;
    be14:	f8c5 4d70 	str.w	r4, [r5, #3440]	; 0xd70
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    be18:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    be1c:	f013 0303 	ands.w	r3, r3, #3
    be20:	d072      	beq.n	bf08 <event_connection_prepare+0x548>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be22:	4838      	ldr	r0, [pc, #224]	; (bf04 <event_connection_prepare+0x544>)
    be24:	f7fb fcaf 	bl	7786 <mem_acquire>
		if (!node_tx) {
    be28:	4601      	mov	r1, r0
    be2a:	b378      	cbz	r0, be8c <event_connection_prepare+0x4cc>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    be2c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    be30:	f36f 0301 	bfc	r3, #0, #2
    be34:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    be38:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    be3a:	3306      	adds	r3, #6
    be3c:	4433      	add	r3, r6
    be3e:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    be40:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    be44:	7902      	ldrb	r2, [r0, #4]
    be46:	f042 0203 	orr.w	r2, r2, #3
    be4a:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    be4c:	220c      	movs	r2, #12
    be4e:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    be50:	2200      	movs	r2, #0
    be52:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    be54:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    be58:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    be5a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    be5e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    be62:	fbb2 f2f0 	udiv	r2, r2, r0
    be66:	f8a1 2009 	strh.w	r2, [r1, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    be6a:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
    be6e:	f8a1 200b 	strh.w	r2, [r1, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    be72:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    be76:	f8a1 200d 	strh.w	r2, [r1, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    be7a:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
    be7e:	f8a1 200f 	strh.w	r2, [r1, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    be82:	f8a1 3011 	strh.w	r3, [r1, #17]
			ctrl_tx_enqueue(conn, node_tx);
    be86:	4620      	mov	r0, r4
    be88:	f7ff fccc 	bl	b824 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    be8c:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    be90:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    be94:	429a      	cmp	r2, r3
    be96:	d01e      	beq.n	bed6 <event_connection_prepare+0x516>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    be98:	2005      	movs	r0, #5
    be9a:	f7ff fa83 	bl	b3a4 <event_stop.constprop.37>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    be9e:	4819      	ldr	r0, [pc, #100]	; (bf04 <event_connection_prepare+0x544>)
    bea0:	f7fb fc71 	bl	7786 <mem_acquire>
		if (node_tx) {
    bea4:	4601      	mov	r1, r0
    bea6:	b1b0      	cbz	r0, bed6 <event_connection_prepare+0x516>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    bea8:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    beac:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    beb0:	7903      	ldrb	r3, [r0, #4]
    beb2:	f043 0303 	orr.w	r3, r3, #3
    beb6:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    beb8:	2302      	movs	r3, #2
    beba:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    bebc:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    bebe:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    bec2:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    bec4:	4620      	mov	r0, r4
    bec6:	f7ff fcad 	bl	b824 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    beca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    becc:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    bece:	bf98      	it	ls
    bed0:	3301      	addls	r3, #1
    bed2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    bed6:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    beda:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    bede:	429a      	cmp	r2, r3
    bee0:	f000 84a0 	beq.w	c824 <event_connection_prepare+0xe64>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    bee4:	2005      	movs	r0, #5
    bee6:	f7ff fa5d 	bl	b3a4 <event_stop.constprop.37>
	switch (conn->llcp_length.state) {
    beea:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    beee:	f003 0303 	and.w	r3, r3, #3
    bef2:	2b03      	cmp	r3, #3
    bef4:	f63f ad6d 	bhi.w	b9d2 <event_connection_prepare+0x12>
    bef8:	e8df f013 	tbh	[pc, r3, lsl #1]
    befc:	04940457 	.word	0x04940457
    bf00:	04b00494 	.word	0x04b00494
    bf04:	20001624 	.word	0x20001624
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    bf08:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    bf0c:	1bf7      	subs	r7, r6, r7
    bf0e:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    bf10:	043a      	lsls	r2, r7, #16
    bf12:	d4bb      	bmi.n	be8c <event_connection_prepare+0x4cc>
		conn->llcp_ack = conn->llcp_req;
    bf14:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    bf18:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    bf1c:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    bf20:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    bf24:	428a      	cmp	r2, r1
    bf26:	d009      	beq.n	bf3c <event_connection_prepare+0x57c>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    bf28:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    bf2c:	f002 0207 	and.w	r2, r2, #7
    bf30:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    bf32:	bf04      	itt	eq
    bf34:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    bf38:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    bf3c:	f8d5 2d70 	ldr.w	r2, [r5, #3440]	; 0xd70
		_radio.ticker_id_prepare = 0;
    bf40:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    bf42:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    bf44:	bf08      	it	eq
    bf46:	f8c5 3d70 	streq.w	r3, [r5, #3440]	; 0xd70
		_radio.ticker_id_prepare = 0;
    bf4a:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    bf4c:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    bf4e:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    bf52:	429a      	cmp	r2, r3
    bf54:	d114      	bne.n	bf80 <event_connection_prepare+0x5c0>
		     conn->conn_interval) ||
    bf56:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    bf5a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    bf5c:	4299      	cmp	r1, r3
    bf5e:	d10f      	bne.n	bf80 <event_connection_prepare+0x5c0>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    bf60:	f240 43e2 	movw	r3, #1250	; 0x4e2
    bf64:	435a      	muls	r2, r3
    bf66:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    bf6a:	f242 7110 	movw	r1, #10000	; 0x2710
    bf6e:	fb01 2303 	mla	r3, r1, r3, r2
    bf72:	3b01      	subs	r3, #1
    bf74:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    bf78:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    bf7a:	b29b      	uxth	r3, r3
    bf7c:	429a      	cmp	r2, r3
    bf7e:	d016      	beq.n	bfae <event_connection_prepare+0x5ee>
			node_rx = packet_rx_reserve_get(2);
    bf80:	2002      	movs	r0, #2
    bf82:	f7fe f85d 	bl	a040 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    bf86:	2800      	cmp	r0, #0
    bf88:	f43f ad23 	beq.w	b9d2 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    bf8c:	8c23      	ldrh	r3, [r4, #32]
    bf8e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    bf90:	2308      	movs	r3, #8
    bf92:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    bf94:	2300      	movs	r3, #0
    bf96:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    bf98:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    bf9c:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    bf9e:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    bfa2:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    bfa4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    bfa8:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    bfaa:	f7fe ff13 	bl	add4 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    bfae:	6823      	ldr	r3, [r4, #0]
    bfb0:	6866      	ldr	r6, [r4, #4]
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	da09      	bge.n	bfca <event_connection_prepare+0x60a>
			u32_t ticks_prepare_to_start =
    bfb6:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    bfb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    bfbc:	42b0      	cmp	r0, r6
    bfbe:	bf2c      	ite	cs
    bfc0:	4480      	addcs	r8, r0
    bfc2:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    bfc4:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    bfc6:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    bfca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    bfcc:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
    bfd0:	49bd      	ldr	r1, [pc, #756]	; (c2c8 <event_connection_prepare+0x908>)
		conn_interval_old = instant_latency * conn->conn_interval;
    bfd2:	fb13 f307 	smulbb	r3, r3, r7
    bfd6:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    bfd8:	fbb3 f2fa 	udiv	r2, r3, sl
    bfdc:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    bfe0:	fb1a f009 	smulbb	r0, sl, r9
    bfe4:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    bfe6:	4283      	cmp	r3, r0
    bfe8:	f080 8108 	bcs.w	c1fc <event_connection_prepare+0x83c>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    bfec:	1ac0      	subs	r0, r0, r3
    bfee:	f240 1223 	movw	r2, #291	; 0x123
    bff2:	4342      	muls	r2, r0
    bff4:	17c3      	asrs	r3, r0, #31
    bff6:	fb01 2303 	mla	r3, r1, r3, r2
    bffa:	fba0 0101 	umull	r0, r1, r0, r1
    bffe:	4419      	add	r1, r3
    c000:	a3af      	add	r3, pc, #700	; (adr r3, c2c0 <event_connection_prepare+0x900>)
    c002:	e9d3 2300 	ldrd	r2, r3, [r3]
    c006:	f7f4 f92f 	bl	268 <__aeabi_uldivmod>
    c00a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c00e:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c012:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    c014:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    c016:	f8df b2d8 	ldr.w	fp, [pc, #728]	; c2f0 <event_connection_prepare+0x930>
    c01a:	1bdb      	subs	r3, r3, r7
    c01c:	444b      	add	r3, r9
    c01e:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    c020:	6823      	ldr	r3, [r4, #0]
    c022:	429e      	cmp	r6, r3
    c024:	bf38      	it	cc
    c026:	461e      	movcc	r6, r3
		if (conn->role) {
    c028:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    c02c:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c02e:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    c032:	2b00      	cmp	r3, #0
    c034:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    c038:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    c03a:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    c03e:	f280 80ee 	bge.w	c21e <event_connection_prepare+0x85e>
				conn->slave.window_widening_periodic_us *
    c042:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
    c044:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    c046:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    c04a:	f895 3d08 	ldrb.w	r3, [r5, #3336]	; 0xd08
    c04e:	4a9f      	ldr	r2, [pc, #636]	; (c2cc <event_connection_prepare+0x90c>)
    c050:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    c054:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c058:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    c060:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    c064:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    c066:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c068:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    c06c:	4b98      	ldr	r3, [pc, #608]	; (c2d0 <event_connection_prepare+0x910>)
				conn->llcp.conn_upd.win_size * 1250;
    c06e:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    c072:	f205 253f 	addw	r5, r5, #575	; 0x23f
    c076:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    c07a:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    c07c:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    c080:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    c082:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    c084:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
    c086:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    c088:	429f      	cmp	r7, r3
    c08a:	bf94      	ite	ls
    c08c:	65e7      	strls	r7, [r4, #92]	; 0x5c
    c08e:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
    c090:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    c092:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
    c094:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c096:	fba0 010b 	umull	r0, r1, r0, fp
    c09a:	a389      	add	r3, pc, #548	; (adr r3, c2c0 <event_connection_prepare+0x900>)
    c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c0a0:	f7f4 f8e2 	bl	268 <__aeabi_uldivmod>
    c0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c0a6:	1a1b      	subs	r3, r3, r0
    c0a8:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c0ac:	fbb3 f0f8 	udiv	r0, r3, r8
    c0b0:	fb08 f000 	mul.w	r0, r8, r0
    c0b4:	a382      	add	r3, pc, #520	; (adr r3, c2c0 <event_connection_prepare+0x900>)
    c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    c0ba:	fba0 010b 	umull	r0, r1, r0, fp
    c0be:	f7f4 f8d3 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    c0c2:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c0c4:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c0c8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    c0cc:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    c0d0:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    c0d2:	f242 7110 	movw	r1, #10000	; 0x2710
    c0d6:	fb01 6303 	mla	r3, r1, r3, r6
    c0da:	3b01      	subs	r3, #1
    c0dc:	fbb3 f3f6 	udiv	r3, r3, r6
    c0e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c0e2:	4b7c      	ldr	r3, [pc, #496]	; (c2d4 <event_connection_prepare+0x914>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    c0e4:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    c0e8:	4433      	add	r3, r6
    c0ea:	fbb3 f3f6 	udiv	r3, r3, r6
    c0ee:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c0f2:	4b79      	ldr	r3, [pc, #484]	; (c2d8 <event_connection_prepare+0x918>)
    c0f4:	4433      	add	r3, r6
    c0f6:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c0fa:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c0fc:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c0fe:	4299      	cmp	r1, r3
    c100:	bfc4      	itt	gt
    c102:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    c106:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    c108:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c10c:	bfc8      	it	gt
    c10e:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    c110:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c114:	bfc8      	it	gt
    c116:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    c118:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    c11c:	bf08      	it	eq
    c11e:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    c122:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    c126:	2000      	movs	r0, #0
    c128:	2101      	movs	r1, #1
    c12a:	f006 ff59 	bl	12fe0 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c12e:	2200      	movs	r2, #0
    c130:	2101      	movs	r1, #1
		mayfly_was_enabled =
    c132:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c134:	4610      	mov	r0, r2
    c136:	f7fb fbc9 	bl	78cc <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c13a:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    c13e:	f641 737b 	movw	r3, #8059	; 0x1f7b
    c142:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    c144:	3207      	adds	r2, #7
		ticker_status =
    c146:	9300      	str	r3, [sp, #0]
    c148:	b2d2      	uxtb	r2, r2
    c14a:	4b64      	ldr	r3, [pc, #400]	; (c2dc <event_connection_prepare+0x91c>)
    c14c:	4608      	mov	r0, r1
    c14e:	f7fc fa2d 	bl	85ac <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c152:	f030 0802 	bics.w	r8, r0, #2
    c156:	f47f ac3c 	bne.w	b9d2 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    c15a:	fba5 ab0b 	umull	sl, fp, r5, fp
    c15e:	a358      	add	r3, pc, #352	; (adr r3, c2c0 <event_connection_prepare+0x900>)
    c160:	e9d3 2300 	ldrd	r2, r3, [r3]
    c164:	4650      	mov	r0, sl
    c166:	4659      	mov	r1, fp
    c168:	f7f4 f87e 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    c16c:	4a5c      	ldr	r2, [pc, #368]	; (c2e0 <event_connection_prepare+0x920>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c16e:	f894 6020 	ldrb.w	r6, [r4, #32]
    c172:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    c176:	2307      	movs	r3, #7
    c178:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c17c:	2100      	movs	r1, #0
    c17e:	4343      	muls	r3, r0
    c180:	fb02 3301 	mla	r3, r2, r1, r3
    c184:	fba0 0102 	umull	r0, r1, r0, r2
    c188:	ebba 0000 	subs.w	r0, sl, r0
    c18c:	4419      	add	r1, r3
    c18e:	eb6b 0101 	sbc.w	r1, fp, r1
    c192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c196:	2300      	movs	r3, #0
    c198:	f7f4 f866 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c19c:	68e3      	ldr	r3, [r4, #12]
    c19e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c1a0:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    c1a4:	494f      	ldr	r1, [pc, #316]	; (c2e4 <event_connection_prepare+0x924>)
		ticker_status =
    c1a6:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c1a8:	441a      	add	r2, r3
    c1aa:	4613      	mov	r3, r2
    c1ac:	4a4e      	ldr	r2, [pc, #312]	; (c2e8 <event_connection_prepare+0x928>)
		ticker_status =
    c1ae:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c1b0:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    c1b4:	bf38      	it	cc
    c1b6:	460a      	movcc	r2, r1
    c1b8:	3607      	adds	r6, #7
		ticker_status =
    c1ba:	f641 718b 	movw	r1, #8075	; 0x1f8b
    c1be:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c1c0:	b2f6      	uxtb	r6, r6
		ticker_status =
    c1c2:	4946      	ldr	r1, [pc, #280]	; (c2dc <event_connection_prepare+0x91c>)
    c1c4:	9107      	str	r1, [sp, #28]
    c1c6:	9205      	str	r2, [sp, #20]
    c1c8:	9406      	str	r4, [sp, #24]
    c1ca:	f8cd 800c 	str.w	r8, [sp, #12]
    c1ce:	9501      	str	r5, [sp, #4]
    c1d0:	9700      	str	r7, [sp, #0]
    c1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c1d4:	4632      	mov	r2, r6
    c1d6:	4641      	mov	r1, r8
    c1d8:	4640      	mov	r0, r8
    c1da:	f7fc f949 	bl	8470 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c1de:	f030 0002 	bics.w	r0, r0, #2
    c1e2:	f47f abf6 	bne.w	b9d2 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    c1e6:	f1b9 0f00 	cmp.w	r9, #0
    c1ea:	f000 8334 	beq.w	c856 <event_connection_prepare+0xe96>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c1ee:	2201      	movs	r2, #1
    c1f0:	4611      	mov	r1, r2
}
    c1f2:	b00f      	add	sp, #60	; 0x3c
    c1f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    c1f8:	f7fb bb68 	b.w	78cc <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    c1fc:	fb0a 3212 	mls	r2, sl, r2, r3
    c200:	b292      	uxth	r2, r2
    c202:	fba2 0101 	umull	r0, r1, r2, r1
    c206:	f240 1323 	movw	r3, #291	; 0x123
    c20a:	fb03 1102 	mla	r1, r3, r2, r1
    c20e:	a32c      	add	r3, pc, #176	; (adr r3, c2c0 <event_connection_prepare+0x900>)
    c210:	e9d3 2300 	ldrd	r2, r3, [r3]
    c214:	f7f4 f828 	bl	268 <__aeabi_uldivmod>
    c218:	eba8 0300 	sub.w	r3, r8, r0
    c21c:	e6f9      	b.n	c012 <event_connection_prepare+0x652>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    c21e:	990c      	ldr	r1, [sp, #48]	; 0x30
    c220:	a327      	add	r3, pc, #156	; (adr r3, c2c0 <event_connection_prepare+0x900>)
    c222:	e9d3 2300 	ldrd	r2, r3, [r3]
    c226:	fba1 010b 	umull	r0, r1, r1, fp
    c22a:	f7f4 f81d 	bl	268 <__aeabi_uldivmod>
    c22e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    c232:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    c234:	4635      	mov	r5, r6
    c236:	e747      	b.n	c0c8 <event_connection_prepare+0x708>
	if (conn->llcp.chan_map.initiate) {
    c238:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c23c:	b313      	cbz	r3, c284 <event_connection_prepare+0x8c4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c23e:	482b      	ldr	r0, [pc, #172]	; (c2ec <event_connection_prepare+0x92c>)
    c240:	f7fb faa1 	bl	7786 <mem_acquire>
		if (node_tx) {
    c244:	4607      	mov	r7, r0
    c246:	2800      	cmp	r0, #0
    c248:	f43f ae20 	beq.w	be8c <event_connection_prepare+0x4cc>
			conn->llcp.chan_map.initiate = 0;
    c24c:	2300      	movs	r3, #0
    c24e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    c252:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c254:	3306      	adds	r3, #6
    c256:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    c258:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c25c:	7903      	ldrb	r3, [r0, #4]
    c25e:	f043 0303 	orr.w	r3, r3, #3
    c262:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c264:	2308      	movs	r3, #8
    c266:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c268:	2301      	movs	r3, #1
    c26a:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    c26c:	2205      	movs	r2, #5
    c26e:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c272:	3008      	adds	r0, #8
    c274:	f7f4 f9b4 	bl	5e0 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    c278:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c27c:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
    c280:	4639      	mov	r1, r7
    c282:	e600      	b.n	be86 <event_connection_prepare+0x4c6>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    c284:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    c288:	1af3      	subs	r3, r6, r3
    c28a:	041f      	lsls	r7, r3, #16
    c28c:	f53f adfe 	bmi.w	be8c <event_connection_prepare+0x4cc>
		conn->llcp_ack = conn->llcp_req;
    c290:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c294:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    c298:	f104 0717 	add.w	r7, r4, #23
    c29c:	2205      	movs	r2, #5
    c29e:	f104 0179 	add.w	r1, r4, #121	; 0x79
    c2a2:	4638      	mov	r0, r7
    c2a4:	f7f4 f99c 	bl	5e0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    c2a8:	2105      	movs	r1, #5
    c2aa:	4638      	mov	r0, r7
    c2ac:	f7fb fc16 	bl	7adc <util_ones_count_get>
		conn->data_chan_count =
    c2b0:	7f63      	ldrb	r3, [r4, #29]
    c2b2:	f360 0305 	bfi	r3, r0, #0, #6
    c2b6:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    c2b8:	2301      	movs	r3, #1
    c2ba:	7723      	strb	r3, [r4, #28]
    c2bc:	e5e6      	b.n	be8c <event_connection_prepare+0x4cc>
    c2be:	bf00      	nop
    c2c0:	1afd498d 	.word	0x1afd498d
    c2c4:	00000007 	.word	0x00000007
    c2c8:	09ce5400 	.word	0x09ce5400
    c2cc:	00014d6a 	.word	0x00014d6a
    c2d0:	000f4240 	.word	0x000f4240
    c2d4:	026259ff 	.word	0x026259ff
    c2d8:	01c9c37f 	.word	0x01c9c37f
    c2dc:	0000b231 	.word	0x0000b231
    c2e0:	1afd498d 	.word	0x1afd498d
    c2e4:	0000c9c1 	.word	0x0000c9c1
    c2e8:	0000c9c5 	.word	0x0000c9c5
    c2ec:	20001624 	.word	0x20001624
    c2f0:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.encryption.initiate) {
    c2f4:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
    c2f8:	f1b9 0f00 	cmp.w	r9, #0
    c2fc:	f47f adc6 	bne.w	be8c <event_connection_prepare+0x4cc>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c300:	48d3      	ldr	r0, [pc, #844]	; (c650 <event_connection_prepare+0xc90>)
    c302:	f7fb fa40 	bl	7786 <mem_acquire>
	if (!node_tx) {
    c306:	4607      	mov	r7, r0
    c308:	2800      	cmp	r0, #0
    c30a:	f43f adbf 	beq.w	be8c <event_connection_prepare+0x4cc>
	if (!conn->role) {
    c30e:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c312:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    c314:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    c318:	db4d      	blt.n	c3b6 <event_connection_prepare+0x9f6>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c31a:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    c31e:	465b      	mov	r3, fp
    c320:	464a      	mov	r2, r9
    c322:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c326:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c32a:	f006 f913 	bl	12554 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    c32e:	2210      	movs	r2, #16
    c330:	4659      	mov	r1, fp
    c332:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c336:	f7f4 f953 	bl	5e0 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c33a:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c33e:	2208      	movs	r2, #8
    c340:	f204 1033 	addw	r0, r4, #307	; 0x133
    c344:	f7f4 f94c 	bl	5e0 <memcpy>
		conn->ccm_rx.direction = 0;
    c348:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    c34c:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    c350:	f369 0300 	bfi	r3, r9, #0, #1
    c354:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    c358:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    c35c:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    c360:	f043 0301 	orr.w	r3, r3, #1
    c364:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    c368:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    c36c:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    c370:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    c374:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
    c378:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c37c:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c380:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c384:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    c388:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c38c:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c390:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c394:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    c398:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    c39c:	4651      	mov	r1, sl
    c39e:	4620      	mov	r0, r4
    c3a0:	f7ff face 	bl	b940 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    c3a4:	4639      	mov	r1, r7
    c3a6:	4620      	mov	r0, r4
    c3a8:	f7ff fa3c 	bl	b824 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    c3ac:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c3b0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    c3b4:	e56a      	b.n	be8c <event_connection_prepare+0x4cc>
	else if (!conn->pause_tx || conn->refresh) {
    c3b6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    c3ba:	f003 0348 	and.w	r3, r3, #72	; 0x48
    c3be:	2b08      	cmp	r3, #8
    c3c0:	f000 80a2 	beq.w	c508 <event_connection_prepare+0xb48>
		if (conn->llcp.encryption.error_code) {
    c3c4:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
    c3c8:	f1b9 0f00 	cmp.w	r9, #0
    c3cc:	d020      	beq.n	c410 <event_connection_prepare+0xa50>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    c3ce:	7903      	ldrb	r3, [r0, #4]
    c3d0:	f043 0303 	orr.w	r3, r3, #3
    c3d4:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    c3d6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    c3da:	0698      	lsls	r0, r3, #26
    c3dc:	d512      	bpl.n	c404 <event_connection_prepare+0xa44>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    c3de:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    c3e2:	0759      	lsls	r1, r3, #29
    c3e4:	d50e      	bpl.n	c404 <event_connection_prepare+0xa44>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    c3e6:	2311      	movs	r3, #17
    c3e8:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    c3ea:	2303      	movs	r3, #3
    c3ec:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
    c3ee:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    c3f2:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c3f4:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    c3f6:	797b      	ldrb	r3, [r7, #5]
    c3f8:	3301      	adds	r3, #1
    c3fa:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
    c3fc:	2300      	movs	r3, #0
    c3fe:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    c402:	e7cf      	b.n	c3a4 <event_connection_prepare+0x9e4>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    c404:	230d      	movs	r3, #13
    c406:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    c408:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    c40c:	2301      	movs	r3, #1
    c40e:	e7f1      	b.n	c3f4 <event_connection_prepare+0xa34>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c410:	488f      	ldr	r0, [pc, #572]	; (c650 <event_connection_prepare+0xc90>)
    c412:	f7fb f9b8 	bl	7786 <mem_acquire>
	if (!node_tx) {
    c416:	4682      	mov	sl, r0
    c418:	2800      	cmp	r0, #0
    c41a:	f000 82c1 	beq.w	c9a0 <event_connection_prepare+0xfe0>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c41e:	7903      	ldrb	r3, [r0, #4]
    c420:	f043 0303 	orr.w	r3, r3, #3
    c424:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c426:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    c42a:	230d      	movs	r3, #13
    c42c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    c42e:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    c432:	f100 0308 	add.w	r3, r0, #8
    c436:	4619      	mov	r1, r3
    c438:	2208      	movs	r2, #8
    c43a:	6868      	ldr	r0, [r5, #4]
    c43c:	930d      	str	r3, [sp, #52]	; 0x34
    c43e:	f7f5 fa75 	bl	192c <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    c442:	f10a 0310 	add.w	r3, sl, #16
    c446:	4619      	mov	r1, r3
    c448:	465a      	mov	r2, fp
    c44a:	6868      	ldr	r0, [r5, #4]
    c44c:	930b      	str	r3, [sp, #44]	; 0x2c
    c44e:	f7f5 fa6d 	bl	192c <entropy_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    c452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c454:	2208      	movs	r2, #8
    c456:	4619      	mov	r1, r3
    c458:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    c45c:	f7f4 f8c0 	bl	5e0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    c460:	465a      	mov	r2, fp
    c462:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c464:	f504 708b 	add.w	r0, r4, #278	; 0x116
    c468:	f7f4 f8ba 	bl	5e0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    c46c:	4651      	mov	r1, sl
    c46e:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c470:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    c474:	f7ff f9d6 	bl	b824 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    c478:	4653      	mov	r3, sl
    c47a:	464a      	mov	r2, r9
    c47c:	f104 0194 	add.w	r1, r4, #148	; 0x94
    c480:	f104 0084 	add.w	r0, r4, #132	; 0x84
    c484:	f006 f866 	bl	12554 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    c488:	2210      	movs	r2, #16
    c48a:	4651      	mov	r1, sl
    c48c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    c490:	f7f4 f8a6 	bl	5e0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    c494:	2208      	movs	r2, #8
    c496:	f504 7189 	add.w	r1, r4, #274	; 0x112
    c49a:	f204 1033 	addw	r0, r4, #307	; 0x133
    c49e:	f7f4 f89f 	bl	5e0 <memcpy>
			conn->ccm_rx.direction = 1;
    c4a2:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    c4a6:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    c4aa:	f043 0301 	orr.w	r3, r3, #1
    c4ae:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    c4b2:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    c4b6:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    c4ba:	f369 0300 	bfi	r3, r9, #0, #1
    c4be:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    c4c2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    c4c6:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    c4ca:	f043 0310 	orr.w	r3, r3, #16
    c4ce:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4d2:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
    c4d4:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4d8:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    c4dc:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
    c4e0:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
    c4e4:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
    c4e8:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    c4ec:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
    c4f0:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
    c4f4:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
    c4f8:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c4fc:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    c4fe:	2301      	movs	r3, #1
    c500:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c502:	2305      	movs	r3, #5
    c504:	71fb      	strb	r3, [r7, #7]
    c506:	e74d      	b.n	c3a4 <event_connection_prepare+0x9e4>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    c508:	4651      	mov	r1, sl
    c50a:	f8d5 0cfc 	ldr.w	r0, [r5, #3324]	; 0xcfc
    c50e:	f7ff fa17 	bl	b940 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    c512:	f8d5 2cfc 	ldr.w	r2, [r5, #3324]	; 0xcfc
    c516:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    c51a:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
    c51e:	f369 03c3 	bfi	r3, r9, #3, #1
    c522:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    c526:	e73d      	b.n	c3a4 <event_connection_prepare+0x9e4>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c528:	4849      	ldr	r0, [pc, #292]	; (c650 <event_connection_prepare+0xc90>)
    c52a:	f7fb f92c 	bl	7786 <mem_acquire>
	if (node_tx) {
    c52e:	4607      	mov	r7, r0
    c530:	2800      	cmp	r0, #0
    c532:	f43f acab 	beq.w	be8c <event_connection_prepare+0x4cc>
		conn->llcp_ack = conn->llcp_req;
    c536:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c53a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    c53e:	4b45      	ldr	r3, [pc, #276]	; (c654 <event_connection_prepare+0xc94>)
    c540:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c544:	7903      	ldrb	r3, [r0, #4]
    c546:	f043 0303 	orr.w	r3, r3, #3
    c54a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    c54c:	2309      	movs	r3, #9
    c54e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    c550:	f994 301d 	ldrsb.w	r3, [r4, #29]
    c554:	2b00      	cmp	r3, #0
    c556:	bfac      	ite	ge
    c558:	2308      	movge	r3, #8
    c55a:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c55c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    c55e:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    c560:	2100      	movs	r1, #0
    c562:	4410      	add	r0, r2
    c564:	f7f4 f868 	bl	638 <memset>
			conn->llcp_features & 0xFF;
    c568:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    c56c:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
    c56e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    c570:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    c572:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    c574:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
    c576:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
    c578:	4620      	mov	r0, r4
    c57a:	f7ff f953 	bl	b824 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c57e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c582:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    c586:	e481      	b.n	be8c <event_connection_prepare+0x4cc>
	if (conn->llcp_version.tx == 0) {
    c588:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c58c:	07da      	lsls	r2, r3, #31
    c58e:	d424      	bmi.n	c5da <event_connection_prepare+0xc1a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c590:	482f      	ldr	r0, [pc, #188]	; (c650 <event_connection_prepare+0xc90>)
    c592:	f7fb f8f8 	bl	7786 <mem_acquire>
		if (node_tx) {
    c596:	4601      	mov	r1, r0
    c598:	2800      	cmp	r0, #0
    c59a:	f43f ac77 	beq.w	be8c <event_connection_prepare+0x4cc>
			conn->llcp_ack = conn->llcp_req;
    c59e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c5a2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    c5a6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    c5aa:	f043 0301 	orr.w	r3, r3, #1
    c5ae:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c5b2:	7903      	ldrb	r3, [r0, #4]
    c5b4:	f043 0303 	orr.w	r3, r3, #3
    c5b8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    c5ba:	2306      	movs	r3, #6
    c5bc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c5be:	230c      	movs	r3, #12
    c5c0:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    c5c2:	2309      	movs	r3, #9
    c5c4:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    c5c6:	f06f 030e 	mvn.w	r3, #14
    c5ca:	7243      	strb	r3, [r0, #9]
    c5cc:	2305      	movs	r3, #5
    c5ce:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    c5d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c5d4:	72c3      	strb	r3, [r0, #11]
    c5d6:	7303      	strb	r3, [r0, #12]
    c5d8:	e7ce      	b.n	c578 <event_connection_prepare+0xbb8>
	} else if (conn->llcp_version.rx != 0) {
    c5da:	079b      	lsls	r3, r3, #30
    c5dc:	f57f a9f9 	bpl.w	b9d2 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    c5e0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c5e4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    c5e8:	2002      	movs	r0, #2
    c5ea:	f7fd fd29 	bl	a040 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c5ee:	2800      	cmp	r0, #0
    c5f0:	f43f a9ef 	beq.w	b9d2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    c5f4:	8c23      	ldrh	r3, [r4, #32]
    c5f6:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c5f8:	2301      	movs	r3, #1
    c5fa:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c5fc:	7a03      	ldrb	r3, [r0, #8]
    c5fe:	f043 0303 	orr.w	r3, r3, #3
    c602:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    c604:	2306      	movs	r3, #6
    c606:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    c608:	230c      	movs	r3, #12
    c60a:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    c60c:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    c610:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    c612:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    c616:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    c61a:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    c61e:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    c622:	f7fe fbd7 	bl	add4 <packet_rx_enqueue>
    c626:	e431      	b.n	be8c <event_connection_prepare+0x4cc>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c628:	4809      	ldr	r0, [pc, #36]	; (c650 <event_connection_prepare+0xc90>)
    c62a:	f7fb f8ac 	bl	7786 <mem_acquire>
	if (node_tx) {
    c62e:	4601      	mov	r1, r0
    c630:	2800      	cmp	r0, #0
    c632:	f43f ac2b 	beq.w	be8c <event_connection_prepare+0x4cc>
		conn->llcp_ack = conn->llcp_req;
    c636:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c63a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c63e:	7903      	ldrb	r3, [r0, #4]
    c640:	f043 0303 	orr.w	r3, r3, #3
    c644:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    c646:	2301      	movs	r3, #1
    c648:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    c64a:	2312      	movs	r3, #18
    c64c:	71c3      	strb	r3, [r0, #7]
    c64e:	e793      	b.n	c578 <event_connection_prepare+0xbb8>
    c650:	20001624 	.word	0x20001624
    c654:	000149ff 	.word	0x000149ff
	if (conn->llcp.phy_upd_ind.initiate) {
    c658:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    c65c:	07d7      	lsls	r7, r2, #31
    c65e:	d54e      	bpl.n	c6fe <event_connection_prepare+0xd3e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c660:	48d2      	ldr	r0, [pc, #840]	; (c9ac <event_connection_prepare+0xfec>)
    c662:	f7fb f890 	bl	7786 <mem_acquire>
		if (node_tx) {
    c666:	4607      	mov	r7, r0
    c668:	2800      	cmp	r0, #0
    c66a:	f43f ac0f 	beq.w	be8c <event_connection_prepare+0x4cc>
			conn->llcp.phy_upd_ind.initiate = 0;
    c66e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c672:	f36f 0300 	bfc	r3, #0, #1
    c676:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    c67a:	b2db      	uxtb	r3, r3
    c67c:	f3c3 0982 	ubfx	r9, r3, #2, #3
    c680:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
    c684:	d135      	bne.n	c6f2 <event_connection_prepare+0xd32>
				conn->llcp_ack = conn->llcp_req;
    c686:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    c68a:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    c68e:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    c690:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    c694:	d517      	bpl.n	c6c6 <event_connection_prepare+0xd06>
					node_rx = packet_rx_reserve_get(2);
    c696:	2002      	movs	r0, #2
    c698:	f7fd fcd2 	bl	a040 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    c69c:	2800      	cmp	r0, #0
    c69e:	f43f a998 	beq.w	b9d2 <event_connection_prepare+0x12>
					node_rx->hdr.handle = conn->handle;
    c6a2:	8c23      	ldrh	r3, [r4, #32]
    c6a4:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
    c6a6:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
    c6aa:	230c      	movs	r3, #12
    c6ac:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
    c6ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c6b2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c6b6:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
    c6b8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c6bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c6c0:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
    c6c2:	f7fe fb87 	bl	add4 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c6c6:	793b      	ldrb	r3, [r7, #4]
    c6c8:	f043 0303 	orr.w	r3, r3, #3
    c6cc:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
    c6ce:	2305      	movs	r3, #5
    c6d0:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
    c6d2:	2318      	movs	r3, #24
    c6d4:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    c6d6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c6da:	f3c3 0382 	ubfx	r3, r3, #2, #3
    c6de:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    c6e0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c6e4:	f3c3 1342 	ubfx	r3, r3, #5, #3
    c6e8:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    c6ea:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c6ee:	817b      	strh	r3, [r7, #10]
    c6f0:	e5c6      	b.n	c280 <event_connection_prepare+0x8c0>
								 conn->latency +
    c6f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    c6f4:	3306      	adds	r3, #6
    c6f6:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
    c6f8:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    c6fc:	e7e3      	b.n	c6c6 <event_connection_prepare+0xd06>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    c6fe:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    c702:	1af3      	subs	r3, r6, r3
    c704:	0419      	lsls	r1, r3, #16
    c706:	f53f abc1 	bmi.w	be8c <event_connection_prepare+0x4cc>
		conn->llcp_ack = conn->llcp_req;
    c70a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    c70e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    c712:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    c716:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    c71a:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c71e:	bf18      	it	ne
    c720:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
    c724:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    c728:	bf1c      	itt	ne
    c72a:	f367 03c5 	bfine	r3, r7, #3, #3
    c72e:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    c732:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    c736:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    c73a:	d008      	beq.n	c74e <event_connection_prepare+0xd8e>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    c73c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    c740:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
    c744:	095b      	lsrs	r3, r3, #5
    c746:	f363 0702 	bfi	r7, r3, #0, #3
    c74a:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    c74e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c752:	461f      	mov	r7, r3
    c754:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c758:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c75c:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    c75e:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c762:	d40b      	bmi.n	c77c <event_connection_prepare+0xdbc>
    c764:	b2fb      	uxtb	r3, r7
    c766:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c76a:	4283      	cmp	r3, r0
    c76c:	d106      	bne.n	c77c <event_connection_prepare+0xdbc>
		    (conn->phy_rx == old_rx)) {
    c76e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    c772:	f003 0307 	and.w	r3, r3, #7
    c776:	428b      	cmp	r3, r1
    c778:	f43f ab88 	beq.w	be8c <event_connection_prepare+0x4cc>
		node_rx = packet_rx_reserve_get(2);
    c77c:	2002      	movs	r0, #2
    c77e:	f7fd fc5f 	bl	a040 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c782:	2800      	cmp	r0, #0
    c784:	f43f a925 	beq.w	b9d2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    c788:	8c23      	ldrh	r3, [r4, #32]
    c78a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    c78c:	230c      	movs	r3, #12
    c78e:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
    c790:	2300      	movs	r3, #0
    c792:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
    c794:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    c798:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    c79c:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
    c79e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    c7a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    c7a6:	7343      	strb	r3, [r0, #13]
    c7a8:	e73b      	b.n	c622 <event_connection_prepare+0xc62>
		free_count_rx = packet_rx_acquired_count_get() +
    c7aa:	f7fd fc33 	bl	a014 <packet_rx_acquired_count_get>
    c7ae:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    c7b0:	f8d5 0d18 	ldr.w	r0, [r5, #3352]	; 0xd18
    c7b4:	f7fb f816 	bl	77e4 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    c7b8:	4438      	add	r0, r7
    c7ba:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    c7bc:	28ff      	cmp	r0, #255	; 0xff
    c7be:	f63f a908 	bhi.w	b9d2 <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    c7c2:	f895 3d22 	ldrb.w	r3, [r5, #3362]	; 0xd22
    c7c6:	4283      	cmp	r3, r0
    c7c8:	d12c      	bne.n	c824 <event_connection_prepare+0xe64>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    c7ca:	4878      	ldr	r0, [pc, #480]	; (c9ac <event_connection_prepare+0xfec>)
    c7cc:	f7fa ffdb 	bl	7786 <mem_acquire>
		if (!node_tx) {
    c7d0:	4601      	mov	r1, r0
    c7d2:	b338      	cbz	r0, c824 <event_connection_prepare+0xe64>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c7d4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
    c7d8:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
    c7dc:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c7de:	2201      	movs	r2, #1
    c7e0:	f362 0301 	bfi	r3, r2, #0, #2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    c7e4:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    c7e8:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    c7ea:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7ee:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
    c7f0:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    c7f2:	f043 0303 	orr.w	r3, r3, #3
    c7f6:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    c7f8:	2309      	movs	r3, #9
    c7fa:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    c7fc:	2314      	movs	r3, #20
    c7fe:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    c800:	f06f 0304 	mvn.w	r3, #4
    c804:	720b      	strb	r3, [r1, #8]
    c806:	2300      	movs	r3, #0
    c808:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    c80a:	f06f 036f 	mvn.w	r3, #111	; 0x6f
    c80e:	728b      	strb	r3, [r1, #10]
    c810:	2342      	movs	r3, #66	; 0x42
    c812:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_octets = conn->default_tx_octets;
    c814:	818a      	strh	r2, [r1, #12]
		ctrl_tx_enqueue(conn, node_tx);
    c816:	4620      	mov	r0, r4
    c818:	f7ff f804 	bl	b824 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    c81c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    c820:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    c824:	f894 3020 	ldrb.w	r3, [r4, #32]
    c828:	f994 501d 	ldrsb.w	r5, [r4, #29]
    c82c:	4860      	ldr	r0, [pc, #384]	; (c9b0 <event_connection_prepare+0xff0>)
    c82e:	4961      	ldr	r1, [pc, #388]	; (c9b4 <event_connection_prepare+0xff4>)
    c830:	68a2      	ldr	r2, [r4, #8]
    c832:	9403      	str	r4, [sp, #12]
    c834:	3307      	adds	r3, #7
    c836:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    c83a:	bf38      	it	cc
    c83c:	4601      	movcc	r1, r0
    c83e:	b2db      	uxtb	r3, r3
    c840:	e88d 000c 	stmia.w	sp, {r2, r3}
    c844:	9102      	str	r1, [sp, #8]
    c846:	1d23      	adds	r3, r4, #4
    c848:	4622      	mov	r2, r4
    c84a:	990c      	ldr	r1, [sp, #48]	; 0x30
    c84c:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    c84e:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    c850:	f7fe fdb6 	bl	b3c0 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    c854:	8466      	strh	r6, [r4, #34]	; 0x22
}
    c856:	b00f      	add	sp, #60	; 0x3c
    c858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    c85c:	f7fd fbda 	bl	a014 <packet_rx_acquired_count_get>
    c860:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    c862:	f8d5 0d18 	ldr.w	r0, [r5, #3352]	; 0xd18
    c866:	f7fa ffbd 	bl	77e4 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    c86a:	4438      	add	r0, r7
    c86c:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
    c86e:	28ff      	cmp	r0, #255	; 0xff
    c870:	f63f a8af 	bhi.w	b9d2 <event_connection_prepare+0x12>
		if (_radio.packet_rx_data_count != free_count_rx) {
    c874:	f895 3d22 	ldrb.w	r3, [r5, #3362]	; 0xd22
    c878:	4283      	cmp	r3, r0
    c87a:	f47f a8aa 	bne.w	b9d2 <event_connection_prepare+0x12>
		conn->llcp_length.ack = conn->llcp_length.req;
    c87e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    c882:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    c886:	f8d5 3cfc 	ldr.w	r3, [r5, #3324]	; 0xcfc
		conn->procedure_expire = 0;
    c88a:	2100      	movs	r1, #0
    c88c:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    c890:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    c894:	f361 02c3 	bfi	r2, r1, #3, #1
    c898:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    c89c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    c8a0:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    c8a2:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    c8a6:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    c8a8:	f8d5 0cf4 	ldr.w	r0, [r5, #3316]	; 0xcf4
    c8ac:	f7fa ff9a 	bl	77e4 <mem_free_count_get>
		if (_radio.advertiser.conn) {
    c8b0:	f8d5 3c18 	ldr.w	r3, [r5, #3096]	; 0xc18
    c8b4:	b10b      	cbz	r3, c8ba <event_connection_prepare+0xefa>
			free_count_conn++;
    c8b6:	3001      	adds	r0, #1
    c8b8:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    c8ba:	f8d5 3c54 	ldr.w	r3, [r5, #3156]	; 0xc54
    c8be:	b10b      	cbz	r3, c8c4 <event_connection_prepare+0xf04>
			free_count_conn++;
    c8c0:	3001      	adds	r0, #1
    c8c2:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c8c4:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c8c6:	f895 3cf8 	ldrb.w	r3, [r5, #3320]	; 0xcf8
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c8ca:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c8cc:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c8ce:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c8d2:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    c8d4:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
    c8d6:	d060      	beq.n	c99a <event_connection_prepare+0xfda>
    c8d8:	f8b5 3d20 	ldrh.w	r3, [r5, #3360]	; 0xd20
    c8dc:	42bb      	cmp	r3, r7
    c8de:	d35c      	bcc.n	c99a <event_connection_prepare+0xfda>
		node_rx = packet_rx_reserve_get(2);
    c8e0:	2002      	movs	r0, #2
    c8e2:	f7fd fbad 	bl	a040 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    c8e6:	2800      	cmp	r0, #0
    c8e8:	f43f a873 	beq.w	b9d2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    c8ec:	8c23      	ldrh	r3, [r4, #32]
    c8ee:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    c8f0:	2301      	movs	r3, #1
    c8f2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    c8f4:	7a03      	ldrb	r3, [r0, #8]
    c8f6:	f043 0303 	orr.w	r3, r3, #3
    c8fa:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    c8fc:	2309      	movs	r3, #9
    c8fe:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    c900:	2315      	movs	r3, #21
    c902:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    c904:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    c906:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    c908:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    c90a:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
    c90c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    c90e:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
    c910:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    c912:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
    c914:	f7fe fa5e 	bl	add4 <packet_rx_enqueue>
    c918:	e784      	b.n	c824 <event_connection_prepare+0xe64>
				if (_radio.packet_rx_acquire == 0) {
    c91a:	b90b      	cbnz	r3, c920 <event_connection_prepare+0xf60>
						_radio.packet_rx_count - 1;
    c91c:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
					_radio.packet_rx_acquire -= 1;
    c920:	3b01      	subs	r3, #1
    c922:	f885 3d2a 	strb.w	r3, [r5, #3370]	; 0xd2a
				node_rx = _radio.packet_rx[
    c926:	f895 2d2a 	ldrb.w	r2, [r5, #3370]	; 0xd2a
    c92a:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
				mem_release(node_rx->hdr.onion.link,
    c92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c932:	4649      	mov	r1, r9
    c934:	6818      	ldr	r0, [r3, #0]
    c936:	f7fa ff40 	bl	77ba <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    c93a:	f895 2d28 	ldrb.w	r2, [r5, #3368]	; 0xd28
    c93e:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
    c942:	3a01      	subs	r2, #1
    c944:	4293      	cmp	r3, r2
    c946:	f6bf a844 	bge.w	b9d2 <event_connection_prepare+0x12>
				_radio.link_rx_data_quota++;
    c94a:	3301      	adds	r3, #1
    c94c:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
			while (_radio.packet_rx_acquire !=
    c950:	f895 3d2a 	ldrb.w	r3, [r5, #3370]	; 0xd2a
				_radio.packet_rx_last) {
    c954:	f895 2d29 	ldrb.w	r2, [r5, #3369]	; 0xd29
			while (_radio.packet_rx_acquire !=
    c958:	4293      	cmp	r3, r2
    c95a:	d1de      	bne.n	c91a <event_connection_prepare+0xf5a>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    c95c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
    c95e:	f8b5 2d1e 	ldrh.w	r2, [r5, #3358]	; 0xd1e
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    c962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
				_radio.packet_rx_data_size =
    c966:	bf3a      	itte	cc
    c968:	f44f 7386 	movcc.w	r3, #268	; 0x10c
    c96c:	f8a5 3d20 	strhcc.w	r3, [r5, #3360]	; 0xd20
				_radio.packet_rx_data_size =
    c970:	f8a5 7d20 	strhcs.w	r7, [r5, #3360]	; 0xd20
				_radio.packet_rx_data_size;
    c974:	f8b5 1d20 	ldrh.w	r1, [r5, #3360]	; 0xd20
			_radio.packet_rx_data_count =
    c978:	fbb2 f2f1 	udiv	r2, r2, r1
    c97c:	b2d2      	uxtb	r2, r2
    c97e:	f885 2d22 	strb.w	r2, [r5, #3362]	; 0xd22
			LL_ASSERT(_radio.packet_rx_data_count);
    c982:	2a00      	cmp	r2, #0
    c984:	f43f a825 	beq.w	b9d2 <event_connection_prepare+0x12>
			mem_init(_radio.pkt_rx_data_pool,
    c988:	f8d5 0d14 	ldr.w	r0, [r5, #3348]	; 0xd14
    c98c:	4b0a      	ldr	r3, [pc, #40]	; (c9b8 <event_connection_prepare+0xff8>)
    c98e:	f7fa fed3 	bl	7738 <mem_init>
			packet_rx_allocate(4);
    c992:	2004      	movs	r0, #4
    c994:	f7fd fb66 	bl	a064 <packet_rx_allocate>
    c998:	e7a2      	b.n	c8e0 <event_connection_prepare+0xf20>
				mem_release(node_rx->hdr.onion.link,
    c99a:	f8df 9020 	ldr.w	r9, [pc, #32]	; c9bc <event_connection_prepare+0xffc>
    c99e:	e7d7      	b.n	c950 <event_connection_prepare+0xf90>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    c9a0:	4902      	ldr	r1, [pc, #8]	; (c9ac <event_connection_prepare+0xfec>)
    c9a2:	4638      	mov	r0, r7
    c9a4:	f7fa ff09 	bl	77ba <mem_release>
    c9a8:	f7ff ba70 	b.w	be8c <event_connection_prepare+0x4cc>
    c9ac:	20001624 	.word	0x20001624
    c9b0:	0000ce25 	.word	0x0000ce25
    c9b4:	0000ca05 	.word	0x0000ca05
    c9b8:	200015f8 	.word	0x200015f8
    c9bc:	20001610 	.word	0x20001610

0000c9c0 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    c9c0:	f7fe bffe 	b.w	b9c0 <event_connection_prepare>

0000c9c4 <event_slave_prepare>:
    c9c4:	f7fe bffc 	b.w	b9c0 <event_connection_prepare>

0000c9c8 <connection_configure>:
{
    c9c8:	b510      	push	{r4, lr}
    c9ca:	4604      	mov	r4, r0
	radio_reset();
    c9cc:	f005 ff3a 	bl	12844 <radio_reset>
	radio_tx_power_set(0);
    c9d0:	2000      	movs	r0, #0
    c9d2:	f005 ff7f 	bl	128d4 <radio_tx_power_set>
	radio_isr_set(isr);
    c9d6:	480a      	ldr	r0, [pc, #40]	; (ca00 <connection_configure+0x38>)
    c9d8:	f005 fefe 	bl	127d8 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    c9dc:	f104 0010 	add.w	r0, r4, #16
    c9e0:	f005 ff96 	bl	12910 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    c9e4:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    c9e6:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    c9e8:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    c9ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    c9ee:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c9f0:	f240 605b 	movw	r0, #1627	; 0x65b
    c9f4:	4319      	orrs	r1, r3
}
    c9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    c9fa:	f006 b843 	b.w	12a84 <radio_crc_configure>
    c9fe:	bf00      	nop
    ca00:	0000e0b9 	.word	0x0000e0b9

0000ca04 <event_slave>:
{
    ca04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca08:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    ca0a:	4b65      	ldr	r3, [pc, #404]	; (cba0 <event_slave+0x19c>)
    ca0c:	7cda      	ldrb	r2, [r3, #19]
{
    ca0e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    ca10:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    ca14:	461d      	mov	r5, r3
    ca16:	b12a      	cbz	r2, ca24 <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ca18:	4040      	eors	r0, r0
    ca1a:	f380 8811 	msr	BASEPRI, r0
    ca1e:	f04f 0004 	mov.w	r0, #4
    ca22:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    ca24:	7c1b      	ldrb	r3, [r3, #16]
    ca26:	8c22      	ldrh	r2, [r4, #32]
    ca28:	b2db      	uxtb	r3, r3
    ca2a:	3207      	adds	r2, #7
    ca2c:	4293      	cmp	r3, r2
    ca2e:	d1f3      	bne.n	ca18 <event_slave+0x14>
	_radio.packet_counter = 0;
    ca30:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
    ca34:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	_radio.role = ROLE_SLAVE;
    ca38:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    ca3a:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
    ca3c:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    ca3e:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    ca40:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    ca42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    ca44:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_RX;
    ca48:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
    ca4a:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    ca4c:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    ca4e:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    ca50:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
    ca52:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
    ca54:	f7ff ffb8 	bl	c9c8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    ca58:	2096      	movs	r0, #150	; 0x96
    ca5a:	f006 f8cf 	bl	12bfc <radio_tmr_tifs_set>
				     conn->phy_flags);
    ca5e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    ca62:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    ca66:	09d3      	lsrs	r3, r2, #7
    ca68:	4631      	mov	r1, r6
    ca6a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ca6e:	f000 0007 	and.w	r0, r0, #7
    ca72:	f006 f831 	bl	12ad8 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    ca76:	f895 2d29 	ldrb.w	r2, [r5, #3369]	; 0xd29
    ca7a:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
    ca7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    ca82:	4620      	mov	r0, r4
    ca84:	3108      	adds	r1, #8
    ca86:	f7fd fd09 	bl	a49c <rx_packet_set>
	if (conn->data_chan_sel) {
    ca8a:	7f63      	ldrb	r3, [r4, #29]
    ca8c:	f013 0f40 	tst.w	r3, #64	; 0x40
    ca90:	f104 0217 	add.w	r2, r4, #23
    ca94:	d059      	beq.n	cb4a <event_slave+0x146>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    ca96:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    ca98:	8be1      	ldrh	r1, [r4, #30]
    ca9a:	3801      	subs	r0, #1
    ca9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    caa0:	b280      	uxth	r0, r0
    caa2:	f7fe fda7 	bl	b5f4 <chan_sel_2>
	chan_set(data_chan_use);
    caa6:	f7fd fd51 	bl	a54c <chan_set>
	conn->slave.window_widening_event_us +=
    caaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
    caac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    caae:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    cab0:	2200      	movs	r2, #0
    cab2:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    cab4:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    cab6:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    cab8:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    caba:	bf88      	it	hi
    cabc:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    cabe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cac0:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    cac2:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    cac4:	4413      	add	r3, r2
    cac6:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cac8:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    caca:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    cacc:	f107 0109 	add.w	r1, r7, #9
    cad0:	4630      	mov	r0, r6
    cad2:	f006 f89f 	bl	12c14 <radio_tmr_start>
    cad6:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    cad8:	f006 f926 	bl	12d28 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    cadc:	4630      	mov	r0, r6
    cade:	f006 f945 	bl	12d6c <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cae2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    cae4:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cae6:	f103 0650 	add.w	r6, r3, #80	; 0x50
    caea:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    caee:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    caf2:	2101      	movs	r1, #1
    caf4:	f000 0007 	and.w	r0, r0, #7
    caf8:	f005 ff6b 	bl	129d2 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    cafc:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    cafe:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    cb00:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cb04:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    cb08:	2802      	cmp	r0, #2
    cb0a:	d03e      	beq.n	cb8a <event_slave+0x186>
		return 40;
    cb0c:	2804      	cmp	r0, #4
    cb0e:	bf0c      	ite	eq
    cb10:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    cb14:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    cb16:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    cb18:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    cb1a:	f005 ff5c 	bl	129d6 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    cb1e:	4430      	add	r0, r6
    cb20:	f006 f8e4 	bl	12cec <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    cb24:	f894 1020 	ldrb.w	r1, [r4, #32]
    cb28:	3107      	adds	r1, #7
    cb2a:	463a      	mov	r2, r7
    cb2c:	b2c9      	uxtb	r1, r1
    cb2e:	4620      	mov	r0, r4
    cb30:	f7fe fda4 	bl	b67c <preempt_calc>
    cb34:	4603      	mov	r3, r0
    cb36:	b350      	cbz	r0, cb8e <event_slave+0x18a>
		_radio.state = STATE_STOP;
    cb38:	2304      	movs	r3, #4
    cb3a:	752b      	strb	r3, [r5, #20]
		radio_disable();
    cb3c:	f005 ff66 	bl	12a0c <radio_disable>
	packet_tx_enqueue(2);
    cb40:	2002      	movs	r0, #2
}
    cb42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    cb46:	f7fe b9f5 	b.w	af34 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    cb4a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    cb4c:	7fa6      	ldrb	r6, [r4, #30]
    cb4e:	fb01 6606 	mla	r6, r1, r6, r6
    cb52:	7fe1      	ldrb	r1, [r4, #31]
    cb54:	2025      	movs	r0, #37	; 0x25
    cb56:	440e      	add	r6, r1
    cb58:	fb96 f1f0 	sdiv	r1, r6, r0
    cb5c:	fb00 6611 	mls	r6, r0, r1, r6
    cb60:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cb62:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    cb64:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cb66:	5c51      	ldrb	r1, [r2, r1]
    cb68:	f006 0607 	and.w	r6, r6, #7
    cb6c:	fa41 f606 	asr.w	r6, r1, r6
    cb70:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    cb72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cb76:	d496      	bmi.n	caa6 <event_slave+0xa2>
		chan_index = chan_next % chan_count;
    cb78:	fbb0 f1f3 	udiv	r1, r0, r3
    cb7c:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    cb80:	b2c9      	uxtb	r1, r1
    cb82:	4610      	mov	r0, r2
    cb84:	f7fd fa2a 	bl	9fdc <chan_sel_remap>
    cb88:	e78d      	b.n	caa6 <event_slave+0xa2>
		return 24;
    cb8a:	2318      	movs	r3, #24
    cb8c:	e7c3      	b.n	cb16 <event_slave+0x112>
		ticker_status =
    cb8e:	4a05      	ldr	r2, [pc, #20]	; (cba4 <event_slave+0x1a0>)
    cb90:	4601      	mov	r1, r0
    cb92:	f7fb fd89 	bl	86a8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cb96:	f030 0302 	bics.w	r3, r0, #2
    cb9a:	f47f af3d 	bne.w	ca18 <event_slave+0x14>
    cb9e:	e7cf      	b.n	cb40 <event_slave+0x13c>
    cba0:	200008e0 	.word	0x200008e0
    cba4:	0000aca5 	.word	0x0000aca5

0000cba8 <prepare_pdu_data_tx>:
	    conn->empty ||
    cba8:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    cbac:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    cbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbb4:	4604      	mov	r4, r0
    cbb6:	460e      	mov	r6, r1
	if (/* empty packet */
    cbb8:	d109      	bne.n	cbce <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
    cbba:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    cbbe:	b131      	cbz	r1, cbce <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
    cbc0:	f01c 0f08 	tst.w	ip, #8
    cbc4:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    cbc8:	d023      	beq.n	cc12 <prepare_pdu_data_tx+0x6a>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    cbca:	4571      	cmp	r1, lr
    cbcc:	d021      	beq.n	cc12 <prepare_pdu_data_tx+0x6a>
	conn->empty = 1;
    cbce:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    cbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    cbd6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    cbda:	f005 ff69 	bl	12ab0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cbde:	7803      	ldrb	r3, [r0, #0]
    cbe0:	2201      	movs	r2, #1
    cbe2:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    cbe6:	2200      	movs	r2, #0
    cbe8:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    cbea:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cbee:	7003      	strb	r3, [r0, #0]
    cbf0:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    cbf2:	b15a      	cbz	r2, cc0c <prepare_pdu_data_tx+0x64>
		pdu_data_tx->md = 1;
    cbf4:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    cbf8:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    cbfa:	7803      	ldrb	r3, [r0, #0]
    cbfc:	f36f 1347 	bfc	r3, #5, #3
    cc00:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    cc02:	2300      	movs	r3, #0
    cc04:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    cc06:	6030      	str	r0, [r6, #0]
    cc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
    cc0c:	f362 1304 	bfi	r3, r2, #4, #1
    cc10:	e7f2      	b.n	cbf8 <prepare_pdu_data_tx+0x50>
					conn->packet_tx_head_offset);
    cc12:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    cc16:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    cc1a:	1d0d      	adds	r5, r1, #4
    cc1c:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    cc1e:	b913      	cbnz	r3, cc26 <prepare_pdu_data_tx+0x7e>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    cc20:	7843      	ldrb	r3, [r0, #1]
    cc22:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    cc26:	b122      	cbz	r2, cc32 <prepare_pdu_data_tx+0x8a>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    cc28:	5cab      	ldrb	r3, [r5, r2]
    cc2a:	2701      	movs	r7, #1
    cc2c:	f367 0301 	bfi	r3, r7, #0, #2
    cc30:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    cc32:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
    cc36:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
    cc3a:	1abf      	subs	r7, r7, r2
    cc3c:	b2ff      	uxtb	r7, r7
    cc3e:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    cc40:	5cab      	ldrb	r3, [r5, r2]
    cc42:	f36f 1304 	bfc	r3, #4, #1
    cc46:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    cc48:	f008 0807 	and.w	r8, r8, #7
    cc4c:	f1b8 0f02 	cmp.w	r8, #2
    cc50:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cc52:	d029      	beq.n	cca8 <prepare_pdu_data_tx+0x100>
    cc54:	f1b8 0f04 	cmp.w	r8, #4
    cc58:	d029      	beq.n	ccae <prepare_pdu_data_tx+0x106>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    cc5a:	08db      	lsrs	r3, r3, #3
    cc5c:	3b0a      	subs	r3, #10
				max_tx_octets = ((conn->max_tx_time - 430) >>
    cc5e:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    cc60:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    cc64:	bf18      	it	ne
    cc66:	3b04      	subne	r3, #4
    cc68:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    cc6c:	bf18      	it	ne
    cc6e:	b29b      	uxthne	r3, r3
    cc70:	4563      	cmp	r3, ip
    cc72:	bf28      	it	cs
    cc74:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    cc76:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    cc78:	bf81      	itttt	hi
    cc7a:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    cc7c:	5cab      	ldrbhi	r3, [r5, r2]
    cc7e:	f043 0310 	orrhi.w	r3, r3, #16
    cc82:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    cc84:	680b      	ldr	r3, [r1, #0]
    cc86:	b11b      	cbz	r3, cc90 <prepare_pdu_data_tx+0xe8>
			_pdu_data_tx->md = 1;
    cc88:	5cab      	ldrb	r3, [r5, r2]
    cc8a:	f043 0310 	orr.w	r3, r3, #16
    cc8e:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    cc90:	f1be 0f00 	cmp.w	lr, #0
    cc94:	d1b1      	bne.n	cbfa <prepare_pdu_data_tx+0x52>
    cc96:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    cc9a:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    cc9c:	bf1c      	itt	ne
    cc9e:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    cca2:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    cca6:	e7a8      	b.n	cbfa <prepare_pdu_data_tx+0x52>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    cca8:	089b      	lsrs	r3, r3, #2
    ccaa:	3b0b      	subs	r3, #11
    ccac:	e7d7      	b.n	cc5e <prepare_pdu_data_tx+0xb6>
			if (conn->phy_flags & 0x01) {
    ccae:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
    ccb2:	ea5f 18d8 	movs.w	r8, r8, lsr #7
				max_tx_octets = ((conn->max_tx_time - 592) >>
    ccb6:	bf15      	itete	ne
    ccb8:	f5a3 7314 	subne.w	r3, r3, #592	; 0x250
				max_tx_octets = ((conn->max_tx_time - 430) >>
    ccbc:	f5a3 73d7 	subeq.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((conn->max_tx_time - 592) >>
    ccc0:	119b      	asrne	r3, r3, #6
				max_tx_octets = ((conn->max_tx_time - 430) >>
    ccc2:	111b      	asreq	r3, r3, #4
    ccc4:	3b02      	subs	r3, #2
    ccc6:	e7ca      	b.n	cc5e <prepare_pdu_data_tx+0xb6>

0000ccc8 <mayfly_xtal_stop_calc>:
{
    ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cccc:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    ccce:	2302      	movs	r3, #2
    ccd0:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    ccd2:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    ccd4:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    ccd6:	4e4e      	ldr	r6, [pc, #312]	; (ce10 <mayfly_xtal_stop_calc+0x148>)
				    _radio.connection_count));
    ccd8:	4d4e      	ldr	r5, [pc, #312]	; (ce14 <mayfly_xtal_stop_calc+0x14c>)
	struct connection *conn_curr = NULL;
    ccda:	930a      	str	r3, [sp, #40]	; 0x28
{
    ccdc:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    ccde:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    cce0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    cce4:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    cce6:	ab09      	add	r3, sp, #36	; 0x24
    cce8:	9302      	str	r3, [sp, #8]
    ccea:	ab0c      	add	r3, sp, #48	; 0x30
    ccec:	9300      	str	r3, [sp, #0]
    ccee:	9601      	str	r6, [sp, #4]
    ccf0:	ab0d      	add	r3, sp, #52	; 0x34
    ccf2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    ccf6:	2101      	movs	r1, #1
    ccf8:	2000      	movs	r0, #0
    ccfa:	f7fb fc93 	bl	8624 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    ccfe:	2802      	cmp	r0, #2
    cd00:	d00b      	beq.n	cd1a <mayfly_xtal_stop_calc+0x52>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    cd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd04:	b16b      	cbz	r3, cd22 <mayfly_xtal_stop_calc+0x5a>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cd06:	4040      	eors	r0, r0
    cd08:	f380 8811 	msr	BASEPRI, r0
    cd0c:	f04f 0004 	mov.w	r0, #4
    cd10:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    cd12:	2101      	movs	r1, #1
    cd14:	2000      	movs	r0, #0
    cd16:	f7fb fd03 	bl	8720 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    cd1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd1c:	2b02      	cmp	r3, #2
    cd1e:	d0f8      	beq.n	cd12 <mayfly_xtal_stop_calc+0x4a>
    cd20:	e7ef      	b.n	cd02 <mayfly_xtal_stop_calc+0x3a>
	} while (ticker_id_next != TICKER_NULL &&
    cd22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    cd26:	2bff      	cmp	r3, #255	; 0xff
    cd28:	d004      	beq.n	cd34 <mayfly_xtal_stop_calc+0x6c>
    cd2a:	f895 2cf8 	ldrb.w	r2, [r5, #3320]	; 0xcf8
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    cd2e:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    cd30:	4293      	cmp	r3, r2
    cd32:	dad8      	bge.n	cce6 <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
    cd34:	1f5a      	subs	r2, r3, #5
    cd36:	b2d2      	uxtb	r2, r2
    cd38:	2af9      	cmp	r2, #249	; 0xf9
    cd3a:	4f37      	ldr	r7, [pc, #220]	; (ce18 <mayfly_xtal_stop_calc+0x150>)
    cd3c:	d805      	bhi.n	cd4a <mayfly_xtal_stop_calc+0x82>
				_radio.connection_count))) {
    cd3e:	4a35      	ldr	r2, [pc, #212]	; (ce14 <mayfly_xtal_stop_calc+0x14c>)
    cd40:	f892 2cf8 	ldrb.w	r2, [r2, #3320]	; 0xcf8
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    cd44:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    cd46:	4293      	cmp	r3, r2
    cd48:	db07      	blt.n	cd5a <mayfly_xtal_stop_calc+0x92>
		if (s_xtal_retained) {
    cd4a:	783b      	ldrb	r3, [r7, #0]
    cd4c:	b113      	cbz	r3, cd54 <mayfly_xtal_stop_calc+0x8c>
    cd4e:	2001      	movs	r0, #1
    cd50:	f7fd ffd2 	bl	acf8 <mayfly_xtal_retain.part.16>
}
    cd54:	b00e      	add	sp, #56	; 0x38
    cd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    cd5a:	a90a      	add	r1, sp, #40	; 0x28
    cd5c:	b2e0      	uxtb	r0, r4
    cd5e:	f7fd ffad 	bl	acbc <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    cd62:	2800      	cmp	r0, #0
    cd64:	d0cf      	beq.n	cd06 <mayfly_xtal_stop_calc+0x3e>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    cd66:	6803      	ldr	r3, [r0, #0]
    cd68:	6845      	ldr	r5, [r0, #4]
    cd6a:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    cd6c:	bfb8      	it	lt
    cd6e:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    cd70:	429d      	cmp	r5, r3
    cd72:	bf38      	it	cc
    cd74:	461d      	movcc	r5, r3
    cd76:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    cd78:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    cd7c:	a90b      	add	r1, sp, #44	; 0x2c
    cd7e:	f103 0831 	add.w	r8, r3, #49	; 0x31
    cd82:	f7fd ff9b 	bl	acbc <hdr_conn_get>
	LL_ASSERT(hdr_next);
    cd86:	4604      	mov	r4, r0
    cd88:	2800      	cmp	r0, #0
    cd8a:	d0bc      	beq.n	cd06 <mayfly_xtal_stop_calc+0x3e>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    cd8c:	6843      	ldr	r3, [r0, #4]
    cd8e:	6886      	ldr	r6, [r0, #8]
    cd90:	429e      	cmp	r6, r3
    cd92:	bf38      	it	cc
    cd94:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    cd96:	6803      	ldr	r3, [r0, #0]
    cd98:	2b00      	cmp	r3, #0
    cd9a:	da05      	bge.n	cda8 <mayfly_xtal_stop_calc+0xe0>
		ticks_to_expire -=
    cd9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    cd9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_to_expire -=
    cda2:	4432      	add	r2, r6
    cda4:	1ad2      	subs	r2, r2, r3
    cda6:	920c      	str	r2, [sp, #48]	; 0x30
	if (ticks_to_expire >
    cda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    cdaa:	4445      	add	r5, r8
	if (ticks_to_expire >
    cdac:	429d      	cmp	r5, r3
    cdae:	d20b      	bcs.n	cdc8 <mayfly_xtal_stop_calc+0x100>
		if (s_xtal_retained) {
    cdb0:	783b      	ldrb	r3, [r7, #0]
    cdb2:	b113      	cbz	r3, cdba <mayfly_xtal_stop_calc+0xf2>
    cdb4:	2001      	movs	r0, #1
    cdb6:	f7fd ff9f 	bl	acf8 <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    cdba:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    cdbe:	2101      	movs	r1, #1
    cdc0:	4620      	mov	r0, r4
    cdc2:	f7fd ffbb 	bl	ad3c <prepare_normal_set>
    cdc6:	e7c5      	b.n	cd54 <mayfly_xtal_stop_calc+0x8c>
		if (!s_xtal_retained) {
    cdc8:	783a      	ldrb	r2, [r7, #0]
    cdca:	b93a      	cbnz	r2, cddc <mayfly_xtal_stop_calc+0x114>
			s_xtal_retained = 1;
    cdcc:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    cdce:	4b13      	ldr	r3, [pc, #76]	; (ce1c <mayfly_xtal_stop_calc+0x154>)
			s_xtal_retained = 1;
    cdd0:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    cdd2:	4611      	mov	r1, r2
    cdd4:	f7fa fda2 	bl	791c <mayfly_enqueue>
			LL_ASSERT(!retval);
    cdd8:	2800      	cmp	r0, #0
    cdda:	d194      	bne.n	cd06 <mayfly_xtal_stop_calc+0x3e>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    cddc:	6823      	ldr	r3, [r4, #0]
    cdde:	2b00      	cmp	r3, #0
    cde0:	dbb8      	blt.n	cd54 <mayfly_xtal_stop_calc+0x8c>
    cde2:	429e      	cmp	r6, r3
    cde4:	d2b6      	bcs.n	cd54 <mayfly_xtal_stop_calc+0x8c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    cde6:	1b9b      	subs	r3, r3, r6
			ticker_status =
    cde8:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    cdea:	b29b      	uxth	r3, r3
			ticker_status =
    cdec:	490c      	ldr	r1, [pc, #48]	; (ce20 <mayfly_xtal_stop_calc+0x158>)
    cdee:	9105      	str	r1, [sp, #20]
    cdf0:	9302      	str	r3, [sp, #8]
    cdf2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    cdf6:	9406      	str	r4, [sp, #24]
    cdf8:	9004      	str	r0, [sp, #16]
    cdfa:	9003      	str	r0, [sp, #12]
    cdfc:	9001      	str	r0, [sp, #4]
    cdfe:	9000      	str	r0, [sp, #0]
    ce00:	2101      	movs	r1, #1
    ce02:	f7fb fb85 	bl	8510 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce06:	f030 0302 	bics.w	r3, r0, #2
    ce0a:	d0a3      	beq.n	cd54 <mayfly_xtal_stop_calc+0x8c>
    ce0c:	e77b      	b.n	cd06 <mayfly_xtal_stop_calc+0x3e>
    ce0e:	bf00      	nop
    ce10:	00009fc1 	.word	0x00009fc1
    ce14:	200008e0 	.word	0x200008e0
    ce18:	200016ec 	.word	0x200016ec
    ce1c:	2000cf20 	.word	0x2000cf20
    ce20:	00009fc5 	.word	0x00009fc5

0000ce24 <event_master>:
{
    ce24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ce26:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    ce28:	4b4a      	ldr	r3, [pc, #296]	; (cf54 <event_master+0x130>)
    ce2a:	7cd9      	ldrb	r1, [r3, #19]
{
    ce2c:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    ce2e:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    ce32:	461d      	mov	r5, r3
    ce34:	b129      	cbz	r1, ce42 <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ce36:	4040      	eors	r0, r0
    ce38:	f380 8811 	msr	BASEPRI, r0
    ce3c:	f04f 0004 	mov.w	r0, #4
    ce40:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    ce42:	7c1b      	ldrb	r3, [r3, #16]
    ce44:	8c21      	ldrh	r1, [r4, #32]
    ce46:	b2db      	uxtb	r3, r3
    ce48:	3107      	adds	r1, #7
    ce4a:	428b      	cmp	r3, r1
    ce4c:	d1f3      	bne.n	ce36 <event_master+0x12>
	_radio.packet_counter = 0;
    ce4e:	f885 2d00 	strb.w	r2, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
    ce52:	f885 2d01 	strb.w	r2, [r5, #3329]	; 0xd01
	_radio.role = ROLE_MASTER;
    ce56:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    ce58:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    ce5a:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
    ce5c:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    ce5e:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    ce60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    ce62:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_TX;
    ce66:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    ce68:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    ce6a:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    ce6c:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    ce6e:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    ce70:	f7fe f860 	bl	af34 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    ce74:	a901      	add	r1, sp, #4
    ce76:	4620      	mov	r0, r4
    ce78:	f7ff fe96 	bl	cba8 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    ce7c:	9901      	ldr	r1, [sp, #4]
    ce7e:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    ce82:	780b      	ldrb	r3, [r1, #0]
    ce84:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    ce88:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ce8c:	f362 0382 	bfi	r3, r2, #2, #1
    ce90:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    ce92:	4620      	mov	r0, r4
    ce94:	f7ff fd98 	bl	c9c8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    ce98:	2096      	movs	r0, #150	; 0x96
    ce9a:	f005 feaf 	bl	12bfc <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    ce9e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    cea2:	f000 0007 	and.w	r0, r0, #7
    cea6:	f005 fe0b 	bl	12ac0 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    ceaa:	9901      	ldr	r1, [sp, #4]
    ceac:	4620      	mov	r0, r4
    ceae:	f7fd fb21 	bl	a4f4 <tx_packet_set>
	if (conn->data_chan_sel) {
    ceb2:	7f63      	ldrb	r3, [r4, #29]
    ceb4:	f013 0f40 	tst.w	r3, #64	; 0x40
    ceb8:	f104 0217 	add.w	r2, r4, #23
    cebc:	d021      	beq.n	cf02 <event_master+0xde>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    cebe:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    cec0:	8be1      	ldrh	r1, [r4, #30]
    cec2:	3801      	subs	r0, #1
    cec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    cec8:	b280      	uxth	r0, r0
    ceca:	f7fe fb93 	bl	b5f4 <chan_sel_2>
	chan_set(data_chan_use);
    cece:	f7fd fb3d 	bl	a54c <chan_set>
		remainder_us = radio_tmr_start(1,
    ced2:	68ea      	ldr	r2, [r5, #12]
    ced4:	f107 0109 	add.w	r1, r7, #9
    ced8:	2001      	movs	r0, #1
    ceda:	f005 fe9b 	bl	12c14 <radio_tmr_start>
		radio_tmr_end_capture();
    cede:	f005 ff57 	bl	12d90 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    cee2:	f894 1020 	ldrb.w	r1, [r4, #32]
    cee6:	3107      	adds	r1, #7
    cee8:	463a      	mov	r2, r7
    ceea:	b2c9      	uxtb	r1, r1
    ceec:	4620      	mov	r0, r4
    ceee:	f7fe fbc5 	bl	b67c <preempt_calc>
	if (0 !=
    cef2:	4603      	mov	r3, r0
    cef4:	b328      	cbz	r0, cf42 <event_master+0x11e>
		_radio.state = STATE_STOP;
    cef6:	2304      	movs	r3, #4
    cef8:	752b      	strb	r3, [r5, #20]
		radio_disable();
    cefa:	f005 fd87 	bl	12a0c <radio_disable>
}
    cefe:	b003      	add	sp, #12
    cf00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    cf02:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    cf04:	7fa6      	ldrb	r6, [r4, #30]
    cf06:	fb01 6606 	mla	r6, r1, r6, r6
    cf0a:	7fe1      	ldrb	r1, [r4, #31]
    cf0c:	2025      	movs	r0, #37	; 0x25
    cf0e:	440e      	add	r6, r1
    cf10:	fb96 f1f0 	sdiv	r1, r6, r0
    cf14:	fb00 6611 	mls	r6, r0, r1, r6
    cf18:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cf1a:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    cf1c:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cf1e:	5c51      	ldrb	r1, [r2, r1]
    cf20:	f006 0607 	and.w	r6, r6, #7
    cf24:	fa41 f606 	asr.w	r6, r1, r6
    cf28:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    cf2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    cf2e:	d4ce      	bmi.n	cece <event_master+0xaa>
		chan_index = chan_next % chan_count;
    cf30:	fbb0 f1f3 	udiv	r1, r0, r3
    cf34:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    cf38:	b2c9      	uxtb	r1, r1
    cf3a:	4610      	mov	r0, r2
    cf3c:	f7fd f84e 	bl	9fdc <chan_sel_remap>
    cf40:	e7c5      	b.n	cece <event_master+0xaa>
		ticker_status =
    cf42:	4a05      	ldr	r2, [pc, #20]	; (cf58 <event_master+0x134>)
    cf44:	4601      	mov	r1, r0
    cf46:	f7fb fbaf 	bl	86a8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    cf4a:	f030 0302 	bics.w	r3, r0, #2
    cf4e:	f47f af72 	bne.w	ce36 <event_master+0x12>
    cf52:	e7d4      	b.n	cefe <event_master+0xda>
    cf54:	200008e0 	.word	0x200008e0
    cf58:	0000aca5 	.word	0x0000aca5

0000cf5c <isr_rx_conn_pkt_ctrl>:
{
    cf5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    cf60:	7ac7      	ldrb	r7, [r0, #11]
{
    cf62:	4604      	mov	r4, r0
    cf64:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    cf66:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    cf6a:	2f19      	cmp	r7, #25
    cf6c:	f201 8077 	bhi.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
    cf70:	e8df f017 	tbh	[pc, r7, lsl #1]
    cf74:	007f001a 	.word	0x007f001a
    cf78:	00c500b6 	.word	0x00c500b6
    cf7c:	011b00f3 	.word	0x011b00f3
    cf80:	057a013f 	.word	0x057a013f
    cf84:	019d017c 	.word	0x019d017c
    cf88:	01f801ce 	.word	0x01f801ce
    cf8c:	02920229 	.word	0x02920229
    cf90:	02aa0192 	.word	0x02aa0192
    cf94:	047803f5 	.word	0x047803f5
    cf98:	056d0553 	.word	0x056d0553
    cf9c:	05f205f2 	.word	0x05f205f2
    cfa0:	078606c7 	.word	0x078606c7
    cfa4:	084207bd 	.word	0x084207bd
		if (!_radio.conn_curr->role ||
    cfa8:	4ed8      	ldr	r6, [pc, #864]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    cfaa:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
    cfae:	f995 301d 	ldrsb.w	r3, [r5, #29]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	f281 8053 	bge.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    cfb8:	7a41      	ldrb	r1, [r0, #9]
    cfba:	2000      	movs	r0, #0
    cfbc:	f7fc ffe2 	bl	9f84 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    cfc0:	2800      	cmp	r0, #0
    cfc2:	f001 804c 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    cfc6:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    cfca:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    cfcc:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    cfce:	041b      	lsls	r3, r3, #16
    cfd0:	f101 805b 	bmi.w	e08a <isr_rx_conn_pkt_ctrl+0x112e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    cfd4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    cfd8:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
    cfdc:	429a      	cmp	r2, r3
    cfde:	d005      	beq.n	cfec <isr_rx_conn_pkt_ctrl+0x90>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    cfe0:	4040      	eors	r0, r0
    cfe2:	f380 8811 	msr	BASEPRI, r0
    cfe6:	f04f 0004 	mov.w	r0, #4
    cfea:	df02      	svc	2
	if (_radio.conn_upd == 0) {
    cfec:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
    cff0:	b90a      	cbnz	r2, cff6 <isr_rx_conn_pkt_ctrl+0x9a>
		_radio.conn_upd = conn;
    cff2:	f8c6 5d70 	str.w	r5, [r6, #3440]	; 0xd70
	conn->llcp.conn_upd.win_size =
    cff6:	7b22      	ldrb	r2, [r4, #12]
    cff8:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    cffc:	f8b4 000d 	ldrh.w	r0, [r4, #13]
    d000:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d004:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    d006:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    d00a:	7c20      	ldrb	r0, [r4, #16]
    d00c:	7be2      	ldrb	r2, [r4, #15]
    d00e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    d012:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    d016:	7ca0      	ldrb	r0, [r4, #18]
    d018:	7c62      	ldrb	r2, [r4, #17]
    d01a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    d01e:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d022:	7ce2      	ldrb	r2, [r4, #19]
    d024:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
    d026:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    d02a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    d02e:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    d032:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
    d036:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    d03a:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
    d03e:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
    d040:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    d044:	2201      	movs	r2, #1
    d046:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d04a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d04e:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d052:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d056:	4293      	cmp	r3, r2
    d058:	d007      	beq.n	d06a <isr_rx_conn_pkt_ctrl+0x10e>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    d05a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    d05e:	f003 0307 	and.w	r3, r3, #7
    d062:	2b04      	cmp	r3, #4
    d064:	d101      	bne.n	d06a <isr_rx_conn_pkt_ctrl+0x10e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    d066:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    d06a:	2000      	movs	r0, #0
    d06c:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    d070:	e033      	b.n	d0da <isr_rx_conn_pkt_ctrl+0x17e>
		if (!_radio.conn_curr->role ||
    d072:	4ba6      	ldr	r3, [pc, #664]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    d074:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
    d078:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d07c:	2b00      	cmp	r3, #0
    d07e:	f280 87ee 	bge.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    d082:	7a41      	ldrb	r1, [r0, #9]
    d084:	2001      	movs	r0, #1
    d086:	f7fc ff7d 	bl	9f84 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d08a:	2800      	cmp	r0, #0
    d08c:	f000 87e7 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d090:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    d094:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    d096:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    d098:	041f      	lsls	r7, r3, #16
    d09a:	f100 87f6 	bmi.w	e08a <isr_rx_conn_pkt_ctrl+0x112e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d09e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    d0a2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    d0a6:	429a      	cmp	r2, r3
    d0a8:	d19a      	bne.n	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
	memcpy(&conn->llcp.chan_map.chm[0],
    d0aa:	2205      	movs	r2, #5
    d0ac:	f104 010c 	add.w	r1, r4, #12
    d0b0:	f105 0079 	add.w	r0, r5, #121	; 0x79
    d0b4:	f7f3 fa94 	bl	5e0 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    d0b8:	7c63      	ldrb	r3, [r4, #17]
    d0ba:	7ca2      	ldrb	r2, [r4, #18]
    d0bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    d0c0:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
    d0c4:	2302      	movs	r3, #2
    d0c6:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    d0ca:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
    d0ce:	2000      	movs	r0, #0
	conn->llcp_ack--;
    d0d0:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    d0d2:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
    d0d6:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    d0da:	b003      	add	sp, #12
    d0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    d0e0:	7a41      	ldrb	r1, [r0, #9]
    d0e2:	2002      	movs	r0, #2
    d0e4:	f7fc ff4e 	bl	9f84 <pdu_len_cmp>
    d0e8:	2800      	cmp	r0, #0
    d0ea:	f000 87b8 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->llcp_terminate.reason_peer =
    d0ee:	4b87      	ldr	r3, [pc, #540]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    d0f0:	7b22      	ldrb	r2, [r4, #12]
    d0f2:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
    d0f6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    d0fa:	2000      	movs	r0, #0
	return nack;
    d0fc:	e7ed      	b.n	d0da <isr_rx_conn_pkt_ctrl+0x17e>
		if (!_radio.conn_curr->role ||
    d0fe:	4e83      	ldr	r6, [pc, #524]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    d100:	f8d6 8cfc 	ldr.w	r8, [r6, #3324]	; 0xcfc
    d104:	f998 301d 	ldrsb.w	r3, [r8, #29]
    d108:	2b00      	cmp	r3, #0
    d10a:	f280 87a8 	bge.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    d10e:	7a41      	ldrb	r1, [r0, #9]
    d110:	2003      	movs	r0, #3
    d112:	f7fc ff37 	bl	9f84 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d116:	2800      	cmp	r0, #0
    d118:	f000 87a1 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    d11c:	2208      	movs	r2, #8
    d11e:	f104 0116 	add.w	r1, r4, #22
    d122:	f108 0094 	add.w	r0, r8, #148	; 0x94
    d126:	f7f3 fa5b 	bl	5e0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    d12a:	f8d6 0cfc 	ldr.w	r0, [r6, #3324]	; 0xcfc
    d12e:	2204      	movs	r2, #4
    d130:	f104 011e 	add.w	r1, r4, #30
    d134:	f500 7089 	add.w	r0, r0, #274	; 0x112
    d138:	f7f3 fa52 	bl	5e0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d13c:	f8d6 3cfc 	ldr.w	r3, [r6, #3324]	; 0xcfc
    d140:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    d144:	f042 0204 	orr.w	r2, r2, #4
    d148:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    d14c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    d150:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    d154:	2301      	movs	r3, #1
    d156:	702b      	strb	r3, [r5, #0]
    d158:	e7cf      	b.n	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
    d15a:	4d6c      	ldr	r5, [pc, #432]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    d15c:	f8d5 6cfc 	ldr.w	r6, [r5, #3324]	; 0xcfc
    d160:	f996 301d 	ldrsb.w	r3, [r6, #29]
    d164:	2b00      	cmp	r3, #0
    d166:	f2c0 877a 	blt.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    d16a:	7a41      	ldrb	r1, [r0, #9]
    d16c:	2004      	movs	r0, #4
    d16e:	f7fc ff09 	bl	9f84 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d172:	2800      	cmp	r0, #0
    d174:	f000 8773 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    d178:	2208      	movs	r2, #8
    d17a:	f104 010c 	add.w	r1, r4, #12
    d17e:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    d182:	f7f3 fa2d 	bl	5e0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    d186:	f8d5 0cfc 	ldr.w	r0, [r5, #3324]	; 0xcfc
    d18a:	2204      	movs	r2, #4
    d18c:	f104 0114 	add.w	r1, r4, #20
    d190:	f500 708b 	add.w	r0, r0, #278	; 0x116
    d194:	f7f3 fa24 	bl	5e0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    d198:	f8d5 2cfc 	ldr.w	r2, [r5, #3324]	; 0xcfc
    d19c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d1a0:	f043 0304 	orr.w	r3, r3, #4
    d1a4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d1a8:	e7a7      	b.n	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    d1aa:	4b58      	ldr	r3, [pc, #352]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    d1ac:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
    d1b0:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
    d1b4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    d1b8:	42b3      	cmp	r3, r6
    d1ba:	d004      	beq.n	d1c6 <isr_rx_conn_pkt_ctrl+0x26a>
    d1bc:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
    d1c0:	2b03      	cmp	r3, #3
    d1c2:	f47f af0d 	bne.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
		if (_radio.conn_curr->role ||
    d1c6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	f2c0 8747 	blt.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    d1d0:	7a61      	ldrb	r1, [r4, #9]
    d1d2:	2005      	movs	r0, #5
    d1d4:	f7fc fed6 	bl	9f84 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d1d8:	2800      	cmp	r0, #0
    d1da:	f000 8740 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d1de:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d1e0:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
    d1e2:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
    d1e4:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d1e8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    d1ec:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
    d1f0:	e773      	b.n	d0da <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    d1f2:	7a41      	ldrb	r1, [r0, #9]
    d1f4:	2006      	movs	r0, #6
    d1f6:	f7fc fec5 	bl	9f84 <pdu_len_cmp>
    d1fa:	2800      	cmp	r0, #0
    d1fc:	f000 872f 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.role == ROLE_SLAVE) {
    d200:	4b42      	ldr	r3, [pc, #264]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    d202:	7cda      	ldrb	r2, [r3, #19]
    d204:	2a03      	cmp	r2, #3
    d206:	4619      	mov	r1, r3
    d208:	d125      	bne.n	d256 <isr_rx_conn_pkt_ctrl+0x2fa>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    d20a:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
    d20e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    d212:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
    d216:	4290      	cmp	r0, r2
    d218:	d004      	beq.n	d224 <isr_rx_conn_pkt_ctrl+0x2c8>
    d21a:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
    d21e:	2803      	cmp	r0, #3
    d220:	f47f aede 	bne.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    d224:	2000      	movs	r0, #0
    d226:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
    d22a:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    d22c:	2003      	movs	r0, #3
    d22e:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    d232:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    d236:	f8d1 2cfc 	ldr.w	r2, [r1, #3324]	; 0xcfc
    d23a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    d23e:	065e      	lsls	r6, r3, #25
    d240:	d505      	bpl.n	d24e <isr_rx_conn_pkt_ctrl+0x2f2>
			_radio.conn_curr->refresh = 0;
    d242:	f36f 1386 	bfc	r3, #6, #1
    d246:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    d24a:	2309      	movs	r3, #9
    d24c:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
    d24e:	2301      	movs	r3, #1
    d250:	702b      	strb	r3, [r5, #0]
				break;
    d252:	f000 bc7d 	b.w	db50 <isr_rx_conn_pkt_ctrl+0xbf4>
			_radio.conn_curr->pause_rx = 0;
    d256:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
    d25a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d25e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d262:	f36f 03c3 	bfc	r3, #3, #1
    d266:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    d26a:	e7e4      	b.n	d236 <isr_rx_conn_pkt_ctrl+0x2da>
		if (!_radio.conn_curr->role ||
    d26c:	4b27      	ldr	r3, [pc, #156]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    d26e:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
    d272:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d276:	2b00      	cmp	r3, #0
    d278:	f280 86f1 	bge.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    d27c:	7a41      	ldrb	r1, [r0, #9]
    d27e:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d280:	f7fc fe80 	bl	9f84 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d284:	2800      	cmp	r0, #0
    d286:	f000 86ea 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d28a:	4631      	mov	r1, r6
    d28c:	4628      	mov	r0, r5
}
    d28e:	b003      	add	sp, #12
    d290:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    d294:	f7fe bb0e 	b.w	b8b4 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    d298:	4b1c      	ldr	r3, [pc, #112]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
    d29a:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
    d29e:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d2a2:	2b00      	cmp	r3, #0
    d2a4:	f2c0 86db 	blt.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    d2a8:	7a41      	ldrb	r1, [r0, #9]
    d2aa:	200e      	movs	r0, #14
    d2ac:	e7e8      	b.n	d280 <isr_rx_conn_pkt_ctrl+0x324>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    d2ae:	7a41      	ldrb	r1, [r0, #9]
    d2b0:	2009      	movs	r0, #9
    d2b2:	f7fc fe67 	bl	9f84 <pdu_len_cmp>
    d2b6:	2800      	cmp	r0, #0
    d2b8:	f000 86d1 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d2bc:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    d2be:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d2c0:	4812      	ldr	r0, [pc, #72]	; (d30c <isr_rx_conn_pkt_ctrl+0x3b0>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d2c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    d2c6:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    d2ca:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    d2ce:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d2d2:	f8d0 2cfc 	ldr.w	r2, [r0, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    d2d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    d2da:	7ba1      	ldrb	r1, [r4, #14]
    d2dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    d2e0:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    d2e4:	f3c1 0110 	ubfx	r1, r1, #0, #17
    d2e8:	400b      	ands	r3, r1
    d2ea:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    d2ee:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    d2f2:	f043 0320 	orr.w	r3, r3, #32
    d2f6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    d2fa:	2301      	movs	r3, #1
    d2fc:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    d2fe:	f8d0 3cfc 	ldr.w	r3, [r0, #3324]	; 0xcfc
		_radio.conn_curr->procedure_expire = 0;
    d302:	2000      	movs	r0, #0
    d304:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
    d308:	e6e7      	b.n	d0da <isr_rx_conn_pkt_ctrl+0x17e>
    d30a:	bf00      	nop
    d30c:	200008e0 	.word	0x200008e0
		if (!_radio.conn_curr->role ||
    d310:	4ed0      	ldr	r6, [pc, #832]	; (d654 <isr_rx_conn_pkt_ctrl+0x6f8>)
    d312:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
    d316:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d31a:	2b00      	cmp	r3, #0
    d31c:	f280 869f 	bge.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    d320:	7a41      	ldrb	r1, [r0, #9]
    d322:	200a      	movs	r0, #10
    d324:	f7fc fe2e 	bl	9f84 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    d328:	2800      	cmp	r0, #0
    d32a:	f000 8698 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d32e:	f606 5044 	addw	r0, r6, #3396	; 0xd44
    d332:	f7fa fa28 	bl	7786 <mem_acquire>
		if (!node_tx) {
    d336:	4601      	mov	r1, r0
    d338:	b908      	cbnz	r0, d33e <isr_rx_conn_pkt_ctrl+0x3e2>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    d33a:	2001      	movs	r0, #1
    d33c:	e6cd      	b.n	d0da <isr_rx_conn_pkt_ctrl+0x17e>
		conn->refresh = 1;
    d33e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    d342:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    d346:	f36f 1304 	bfc	r3, #4, #1
    d34a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d34e:	7903      	ldrb	r3, [r0, #4]
    d350:	f043 0303 	orr.w	r3, r3, #3
    d354:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d356:	2301      	movs	r3, #1
    d358:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d35a:	230b      	movs	r3, #11
    d35c:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d35e:	4628      	mov	r0, r5
    d360:	f000 bca0 	b.w	dca4 <isr_rx_conn_pkt_ctrl+0xd48>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    d364:	7a41      	ldrb	r1, [r0, #9]
    d366:	200b      	movs	r0, #11
    d368:	f7fc fe0c 	bl	9f84 <pdu_len_cmp>
    d36c:	2800      	cmp	r0, #0
    d36e:	f000 8676 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    d372:	48b8      	ldr	r0, [pc, #736]	; (d654 <isr_rx_conn_pkt_ctrl+0x6f8>)
    d374:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	} else if (!conn->role) {
    d378:	f994 301d 	ldrsb.w	r3, [r4, #29]
    d37c:	2b00      	cmp	r3, #0
    d37e:	db1b      	blt.n	d3b8 <isr_rx_conn_pkt_ctrl+0x45c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d380:	f600 5044 	addw	r0, r0, #3396	; 0xd44
    d384:	f7fa f9ff 	bl	7786 <mem_acquire>
		if (!node_tx) {
    d388:	4601      	mov	r1, r0
    d38a:	2800      	cmp	r0, #0
    d38c:	d0d5      	beq.n	d33a <isr_rx_conn_pkt_ctrl+0x3de>
		conn->enc_tx = 0;
    d38e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    d392:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    d396:	f043 0304 	orr.w	r3, r3, #4
    d39a:	f36f 1304 	bfc	r3, #4, #1
    d39e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d3a2:	7903      	ldrb	r3, [r0, #4]
    d3a4:	f043 0303 	orr.w	r3, r3, #3
    d3a8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    d3aa:	2301      	movs	r3, #1
    d3ac:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    d3ae:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    d3b0:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    d3b2:	4620      	mov	r0, r4
    d3b4:	f000 bc76 	b.w	dca4 <isr_rx_conn_pkt_ctrl+0xd48>
		conn->enc_tx = 0;
    d3b8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    d3bc:	f36f 1345 	bfc	r3, #5, #1
    d3c0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    d3c4:	e699      	b.n	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    d3c6:	7a41      	ldrb	r1, [r0, #9]
    d3c8:	200c      	movs	r0, #12
    d3ca:	f7fc fddb 	bl	9f84 <pdu_len_cmp>
    d3ce:	2800      	cmp	r0, #0
    d3d0:	f000 8645 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    d3d4:	489f      	ldr	r0, [pc, #636]	; (d654 <isr_rx_conn_pkt_ctrl+0x6f8>)
    d3d6:	f8d0 6cfc 	ldr.w	r6, [r0, #3324]	; 0xcfc
	if (!conn->llcp_version.tx) {
    d3da:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d3de:	f013 0701 	ands.w	r7, r3, #1
    d3e2:	d150      	bne.n	d486 <isr_rx_conn_pkt_ctrl+0x52a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    d3e4:	f600 5044 	addw	r0, r0, #3396	; 0xd44
    d3e8:	f7fa f9cd 	bl	7786 <mem_acquire>
		if (!node_tx) {
    d3ec:	4601      	mov	r1, r0
    d3ee:	2800      	cmp	r0, #0
    d3f0:	d0a3      	beq.n	d33a <isr_rx_conn_pkt_ctrl+0x3de>
		conn->llcp_version.tx = 1;
    d3f2:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d3f6:	f043 0301 	orr.w	r3, r3, #1
    d3fa:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    d3fe:	7903      	ldrb	r3, [r0, #4]
    d400:	f043 0303 	orr.w	r3, r3, #3
    d404:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    d406:	2306      	movs	r3, #6
    d408:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    d40a:	230c      	movs	r3, #12
    d40c:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    d40e:	2309      	movs	r3, #9
    d410:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    d412:	f06f 030e 	mvn.w	r3, #14
    d416:	7243      	strb	r3, [r0, #9]
    d418:	2305      	movs	r3, #5
    d41a:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    d41c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d420:	72c3      	strb	r3, [r0, #11]
    d422:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    d424:	4630      	mov	r0, r6
    d426:	f7fe fa2b 	bl	b880 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    d42a:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d432:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    d436:	f005 fb3b 	bl	12ab0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d43a:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    d43c:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d43e:	2201      	movs	r2, #1
    d440:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    d444:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d448:	7003      	strb	r3, [r0, #0]
    d44a:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    d44c:	b1c2      	cbz	r2, d480 <isr_rx_conn_pkt_ctrl+0x524>
		pdu_data_tx->md = 1;
    d44e:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    d452:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    d454:	7b23      	ldrb	r3, [r4, #12]
    d456:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    d45a:	7ba2      	ldrb	r2, [r4, #14]
    d45c:	7b63      	ldrb	r3, [r4, #13]
    d45e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d462:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    d466:	7be3      	ldrb	r3, [r4, #15]
    d468:	7c22      	ldrb	r2, [r4, #16]
    d46a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d46e:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    d472:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    d476:	f043 0302 	orr.w	r3, r3, #2
    d47a:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    d47e:	e63c      	b.n	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		pdu_data_tx->md = 0;
    d480:	f362 1304 	bfi	r3, r2, #4, #1
    d484:	e7e5      	b.n	d452 <isr_rx_conn_pkt_ctrl+0x4f6>
	} else if (!conn->llcp_version.rx) {
    d486:	f013 0302 	ands.w	r3, r3, #2
    d48a:	f47f ae36 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		conn->procedure_expire = 0;
    d48e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    d492:	2301      	movs	r3, #1
    d494:	702b      	strb	r3, [r5, #0]
    d496:	e7dd      	b.n	d454 <isr_rx_conn_pkt_ctrl+0x4f8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    d498:	7a41      	ldrb	r1, [r0, #9]
    d49a:	200d      	movs	r0, #13
    d49c:	f7fc fd72 	bl	9f84 <pdu_len_cmp>
    d4a0:	2800      	cmp	r0, #0
    d4a2:	f000 85dc 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->pause_rx = 0;
    d4a6:	4b6b      	ldr	r3, [pc, #428]	; (d654 <isr_rx_conn_pkt_ctrl+0x6f8>)
    d4a8:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
    d4ac:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    d4b0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d4b4:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    d4b8:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    d4ba:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    d4be:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    d4c2:	2301      	movs	r3, #1
    d4c4:	702b      	strb	r3, [r5, #0]
    d4c6:	e608      	b.n	d0da <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    d4c8:	7a41      	ldrb	r1, [r0, #9]
    d4ca:	200f      	movs	r0, #15
    d4cc:	f7fc fd5a 	bl	9f84 <pdu_len_cmp>
    d4d0:	2800      	cmp	r0, #0
    d4d2:	f000 85c4 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    d4d6:	4b5f      	ldr	r3, [pc, #380]	; (d654 <isr_rx_conn_pkt_ctrl+0x6f8>)
    d4d8:	f8d3 1d70 	ldr.w	r1, [r3, #3440]	; 0xd70
    d4dc:	461a      	mov	r2, r3
    d4de:	b151      	cbz	r1, d4f6 <isr_rx_conn_pkt_ctrl+0x59a>
    d4e0:	f8d3 0cfc 	ldr.w	r0, [r3, #3324]	; 0xcfc
    d4e4:	4281      	cmp	r1, r0
    d4e6:	d006      	beq.n	d4f6 <isr_rx_conn_pkt_ctrl+0x59a>
			nack = reject_ext_ind_send(_radio.conn_curr,
    d4e8:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
    d4ea:	210f      	movs	r1, #15
}
    d4ec:	b003      	add	sp, #12
    d4ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    d4f2:	f7fe ba49 	b.w	b988 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    d4f6:	f8d2 0cfc 	ldr.w	r0, [r2, #3324]	; 0xcfc
    d4fa:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d4fe:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d502:	2b00      	cmp	r3, #0
    d504:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d508:	f2c0 80a6 	blt.w	d658 <isr_rx_conn_pkt_ctrl+0x6fc>
			if ((conn->llcp_conn_param.req !=
    d50c:	4299      	cmp	r1, r3
    d50e:	d009      	beq.n	d524 <isr_rx_conn_pkt_ctrl+0x5c8>
			    ((conn->llcp_conn_param.state ==
    d510:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    d514:	f013 0307 	ands.w	r3, r3, #7
    d518:	d002      	beq.n	d520 <isr_rx_conn_pkt_ctrl+0x5c4>
			      LLCP_CPR_STATE_REQ) ||
    d51a:	3b04      	subs	r3, #4
    d51c:	2b01      	cmp	r3, #1
    d51e:	d801      	bhi.n	d524 <isr_rx_conn_pkt_ctrl+0x5c8>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d520:	2223      	movs	r2, #35	; 0x23
    d522:	e7e2      	b.n	d4ea <isr_rx_conn_pkt_ctrl+0x58e>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    d524:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    d528:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    d52c:	4299      	cmp	r1, r3
    d52e:	d003      	beq.n	d538 <isr_rx_conn_pkt_ctrl+0x5dc>
    d530:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    d534:	2b03      	cmp	r3, #3
    d536:	d105      	bne.n	d544 <isr_rx_conn_pkt_ctrl+0x5e8>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    d538:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    d53c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    d540:	4299      	cmp	r1, r3
    d542:	d001      	beq.n	d548 <isr_rx_conn_pkt_ctrl+0x5ec>
				nack = reject_ext_ind_send(_radio.conn_curr,
    d544:	222a      	movs	r2, #42	; 0x2a
    d546:	e7d0      	b.n	d4ea <isr_rx_conn_pkt_ctrl+0x58e>
				if ((cpr->interval_min < 6) ||
    d548:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d54c:	4643      	mov	r3, r8
    d54e:	2b05      	cmp	r3, #5
    d550:	d91b      	bls.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->interval_max > 3200) ||
    d552:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    d554:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d558:	d817      	bhi.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->interval_max > 3200) ||
    d55a:	45b8      	cmp	r8, r7
    d55c:	d815      	bhi.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->latency > 499) ||
    d55e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    d562:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d566:	d210      	bcs.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->timeout < 10) ||
    d568:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    d56c:	f1ae 060a 	sub.w	r6, lr, #10
    d570:	b2b6      	uxth	r6, r6
    d572:	f640 4976 	movw	r9, #3190	; 0xc76
    d576:	454e      	cmp	r6, r9
    d578:	d807      	bhi.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
				     ((cpr->latency + 1) *
    d57a:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    d57e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d582:	da02      	bge.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
				    (cpr->preferred_periodicity >
    d584:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    d586:	428f      	cmp	r7, r1
    d588:	d201      	bcs.n	d58e <isr_rx_conn_pkt_ctrl+0x632>
				nack = reject_ext_ind_send(conn,
    d58a:	221e      	movs	r2, #30
    d58c:	e7ad      	b.n	d4ea <isr_rx_conn_pkt_ctrl+0x58e>
				conn->llcp_conn_param.interval = cpr->interval_min;
    d58e:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    d592:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    d596:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    d59a:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    d59e:	7da6      	ldrb	r6, [r4, #22]
    d5a0:	7d61      	ldrb	r1, [r4, #21]
    d5a2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    d5a6:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    d5aa:	7e26      	ldrb	r6, [r4, #24]
    d5ac:	7de1      	ldrb	r1, [r4, #23]
    d5ae:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d5b2:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    d5b6:	7ea6      	ldrb	r6, [r4, #26]
    d5b8:	7e61      	ldrb	r1, [r4, #25]
    d5ba:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d5be:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    d5c2:	7f26      	ldrb	r6, [r4, #28]
    d5c4:	7ee1      	ldrb	r1, [r4, #27]
    d5c6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d5ca:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    d5ce:	7fa6      	ldrb	r6, [r4, #30]
    d5d0:	7f61      	ldrb	r1, [r4, #29]
    d5d2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d5d6:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    d5da:	7fe1      	ldrb	r1, [r4, #31]
    d5dc:	f894 6020 	ldrb.w	r6, [r4, #32]
    d5e0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d5e4:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    d5e8:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d5ec:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d5f0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d5f4:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    d5f8:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d5fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d5fe:	428c      	cmp	r4, r1
    d600:	d10f      	bne.n	d622 <isr_rx_conn_pkt_ctrl+0x6c6>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d602:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d604:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d608:	4361      	muls	r1, r4
    d60a:	f242 7410 	movw	r4, #10000	; 0x2710
    d60e:	fb04 130e 	mla	r3, r4, lr, r1
    d612:	3b01      	subs	r3, #1
    d614:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    d618:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d61a:	b29b      	uxth	r3, r3
    d61c:	4299      	cmp	r1, r3
    d61e:	f000 8095 	beq.w	d74c <isr_rx_conn_pkt_ctrl+0x7f0>
					if (conn->pause_tx) {
    d622:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    d626:	071c      	lsls	r4, r3, #28
    d628:	f140 808a 	bpl.w	d740 <isr_rx_conn_pkt_ctrl+0x7e4>
						conn->llcp_conn_param.state =
    d62c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d630:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    d632:	f361 0302 	bfi	r3, r1, #0, #3
    d636:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    d63a:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d63e:	3b01      	subs	r3, #1
    d640:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    d644:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	; 0xd70
    d648:	2b00      	cmp	r3, #0
    d64a:	f47f ad56 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
				_radio.conn_upd = conn;
    d64e:	f8c2 0d70 	str.w	r0, [r2, #3440]	; 0xd70
    d652:	e552      	b.n	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
    d654:	200008e0 	.word	0x200008e0
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    d658:	4299      	cmp	r1, r3
    d65a:	d004      	beq.n	d666 <isr_rx_conn_pkt_ctrl+0x70a>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    d65c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d660:	0799      	lsls	r1, r3, #30
    d662:	f47f acbd 	bne.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
			if ((cpr->interval_min < 6) ||
    d666:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    d66a:	4643      	mov	r3, r8
    d66c:	2b05      	cmp	r3, #5
    d66e:	d98c      	bls.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->interval_max > 3200) ||
    d670:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d672:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    d676:	d888      	bhi.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->interval_max > 3200) ||
    d678:	45b8      	cmp	r8, r7
    d67a:	d886      	bhi.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->latency > 499) ||
    d67c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    d680:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    d684:	d281      	bcs.n	d58a <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d686:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    d68a:	f1ae 060a 	sub.w	r6, lr, #10
    d68e:	b2b6      	uxth	r6, r6
    d690:	f640 4976 	movw	r9, #3190	; 0xc76
    d694:	454e      	cmp	r6, r9
    d696:	f63f af78 	bhi.w	d58a <isr_rx_conn_pkt_ctrl+0x62e>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d69a:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d69e:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    d6a2:	f6bf af72 	bge.w	d58a <isr_rx_conn_pkt_ctrl+0x62e>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d6a6:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    d6a8:	428f      	cmp	r7, r1
    d6aa:	f4ff af6e 	bcc.w	d58a <isr_rx_conn_pkt_ctrl+0x62e>
			conn->llcp_conn_param.interval = cpr->interval_min;
    d6ae:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d6b2:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d6b6:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d6ba:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    d6be:	7da6      	ldrb	r6, [r4, #22]
    d6c0:	7d61      	ldrb	r1, [r4, #21]
    d6c2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d6c6:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d6ca:	7e26      	ldrb	r6, [r4, #24]
    d6cc:	7de1      	ldrb	r1, [r4, #23]
    d6ce:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d6d2:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d6d6:	7ea6      	ldrb	r6, [r4, #26]
    d6d8:	7e61      	ldrb	r1, [r4, #25]
    d6da:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d6de:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d6e2:	7f26      	ldrb	r6, [r4, #28]
    d6e4:	7ee1      	ldrb	r1, [r4, #27]
    d6e6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d6ea:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d6ee:	7fa6      	ldrb	r6, [r4, #30]
    d6f0:	7f61      	ldrb	r1, [r4, #29]
    d6f2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d6f6:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d6fa:	7fe1      	ldrb	r1, [r4, #31]
    d6fc:	f894 6020 	ldrb.w	r6, [r4, #32]
    d700:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    d704:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d708:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    d70c:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    d710:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    d714:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    d718:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    d71c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    d71e:	428c      	cmp	r4, r1
    d720:	d10e      	bne.n	d740 <isr_rx_conn_pkt_ctrl+0x7e4>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    d722:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    d724:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d728:	4361      	muls	r1, r4
    d72a:	f242 7410 	movw	r4, #10000	; 0x2710
    d72e:	fb04 130e 	mla	r3, r4, lr, r1
    d732:	3b01      	subs	r3, #1
    d734:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    d738:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    d73a:	b29b      	uxth	r3, r3
    d73c:	4299      	cmp	r1, r3
    d73e:	d005      	beq.n	d74c <isr_rx_conn_pkt_ctrl+0x7f0>
				*rx_enqueue = 1;
    d740:	2301      	movs	r3, #1
    d742:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    d744:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d748:	2103      	movs	r1, #3
    d74a:	e772      	b.n	d632 <isr_rx_conn_pkt_ctrl+0x6d6>
				conn->llcp_conn_param.status = 0;
    d74c:	2300      	movs	r3, #0
    d74e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    d752:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    d756:	2101      	movs	r1, #1
    d758:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d75c:	e769      	b.n	d632 <isr_rx_conn_pkt_ctrl+0x6d6>
		if (_radio.conn_curr->role ||
    d75e:	4bc1      	ldr	r3, [pc, #772]	; (da64 <isr_rx_conn_pkt_ctrl+0xb08>)
    d760:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
    d764:	f995 301d 	ldrsb.w	r3, [r5, #29]
    d768:	2b00      	cmp	r3, #0
    d76a:	f2c0 8478 	blt.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    d76e:	7a41      	ldrb	r1, [r0, #9]
    d770:	2010      	movs	r0, #16
    d772:	f7fc fc07 	bl	9f84 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    d776:	2800      	cmp	r0, #0
    d778:	f000 8471 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		if (!_radio.conn_curr->role &&
    d77c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    d780:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    d784:	429a      	cmp	r2, r3
    d786:	f43f acb8 	beq.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_conn_param.state ==
    d78a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    d78e:	f003 0307 	and.w	r3, r3, #7
    d792:	2b04      	cmp	r3, #4
    d794:	f47f acb1 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
			if ((cpr->interval_min < 6) ||
    d798:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    d79c:	fa1f f28e 	uxth.w	r2, lr
    d7a0:	2a05      	cmp	r2, #5
    d7a2:	d91b      	bls.n	d7dc <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->interval_max > 3200) ||
    d7a4:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    d7a6:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    d7aa:	d817      	bhi.n	d7dc <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->interval_max > 3200) ||
    d7ac:	429a      	cmp	r2, r3
    d7ae:	d815      	bhi.n	d7dc <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->latency > 499) ||
    d7b0:	8a27      	ldrh	r7, [r4, #16]
    d7b2:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    d7b4:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    d7b8:	d210      	bcs.n	d7dc <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d7ba:	8a66      	ldrh	r6, [r4, #18]
    d7bc:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    d7be:	f1a0 010a 	sub.w	r1, r0, #10
    d7c2:	b289      	uxth	r1, r1
    d7c4:	f640 4c76 	movw	ip, #3190	; 0xc76
    d7c8:	4561      	cmp	r1, ip
    d7ca:	d807      	bhi.n	d7dc <isr_rx_conn_pkt_ctrl+0x880>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    d7cc:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    d7d0:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    d7d4:	da02      	bge.n	d7dc <isr_rx_conn_pkt_ctrl+0x880>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    d7d6:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    d7d8:	4293      	cmp	r3, r2
    d7da:	d203      	bcs.n	d7e4 <isr_rx_conn_pkt_ctrl+0x888>
				nack = reject_ext_ind_send(conn,
    d7dc:	221e      	movs	r2, #30
    d7de:	2110      	movs	r1, #16
    d7e0:	4628      	mov	r0, r5
    d7e2:	e683      	b.n	d4ec <isr_rx_conn_pkt_ctrl+0x590>
			_radio.conn_curr->procedure_expire = 0;
    d7e4:	2000      	movs	r0, #0
    d7e6:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    d7ea:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    d7ee:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    d7f2:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    d7f6:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    d7fa:	7da2      	ldrb	r2, [r4, #22]
    d7fc:	7d63      	ldrb	r3, [r4, #21]
    d7fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    d802:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    d806:	7e22      	ldrb	r2, [r4, #24]
    d808:	7de3      	ldrb	r3, [r4, #23]
    d80a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d80e:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    d812:	7ea2      	ldrb	r2, [r4, #26]
    d814:	7e63      	ldrb	r3, [r4, #25]
    d816:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d81a:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    d81e:	7f22      	ldrb	r2, [r4, #28]
    d820:	7ee3      	ldrb	r3, [r4, #27]
    d822:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d826:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    d82a:	7fa2      	ldrb	r2, [r4, #30]
    d82c:	7f63      	ldrb	r3, [r4, #29]
    d82e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d832:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    d836:	f894 2020 	ldrb.w	r2, [r4, #32]
    d83a:	7fe3      	ldrb	r3, [r4, #31]
    d83c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d840:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    d844:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    d848:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d84c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    d850:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    d854:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    d858:	2201      	movs	r2, #1
    d85a:	f362 0302 	bfi	r3, r2, #0, #3
    d85e:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    d862:	e43a      	b.n	d0da <isr_rx_conn_pkt_ctrl+0x17e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    d864:	7a41      	ldrb	r1, [r0, #9]
    d866:	2011      	movs	r0, #17
    d868:	f7fc fb8c 	bl	9f84 <pdu_len_cmp>
    d86c:	2800      	cmp	r0, #0
    d86e:	f000 83f6 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    d872:	4a7c      	ldr	r2, [pc, #496]	; (da64 <isr_rx_conn_pkt_ctrl+0xb08>)
    d874:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
    d878:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    d87c:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    d880:	4281      	cmp	r1, r0
    d882:	7b21      	ldrb	r1, [r4, #12]
    d884:	d027      	beq.n	d8d6 <isr_rx_conn_pkt_ctrl+0x97a>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    d886:	2916      	cmp	r1, #22
    d888:	f47f ac37 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		if (rej_ext_ind->error_code != 0x23) {
    d88c:	7b61      	ldrb	r1, [r4, #13]
    d88e:	2923      	cmp	r1, #35	; 0x23
    d890:	d00e      	beq.n	d8b0 <isr_rx_conn_pkt_ctrl+0x954>
				_radio.conn_curr->phy_tx;
    d892:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    d896:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    d89a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
    d89e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d8a2:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    d8a6:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
    d8a8:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    d8ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    d8b0:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
    d8b4:	0792      	lsls	r2, r2, #30
    d8b6:	f57f ac20 	bpl.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d8ba:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
    d8bc:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    d8be:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    d8c0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    d8c4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    d8c8:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    d8ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    d8ce:	f3c3 0302 	ubfx	r3, r3, #0, #3
    d8d2:	7363      	strb	r3, [r4, #13]
    d8d4:	e43e      	b.n	d154 <isr_rx_conn_pkt_ctrl+0x1f8>
		   _radio.conn_curr->llcp_conn_param.req) {
    d8d6:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    d8da:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
    d8de:	42b8      	cmp	r0, r7
    d8e0:	d067      	beq.n	d9b2 <isr_rx_conn_pkt_ctrl+0xa56>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    d8e2:	290f      	cmp	r1, #15
    d8e4:	f47f ac09 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
    d8e8:	f993 001d 	ldrsb.w	r0, [r3, #29]
    d8ec:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    d8ee:	2800      	cmp	r0, #0
    d8f0:	db34      	blt.n	d95c <isr_rx_conn_pkt_ctrl+0xa00>
    d8f2:	291a      	cmp	r1, #26
    d8f4:	d132      	bne.n	d95c <isr_rx_conn_pkt_ctrl+0xa00>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    d8f6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
    d8fa:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
    d8fe:	4294      	cmp	r4, r2
    d900:	f47f ab6e 	bne.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
				conn->llcp_conn_param.state =
    d904:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    d908:	2105      	movs	r1, #5
    d90a:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
    d90e:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
    d912:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    d916:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
    d91a:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    d91e:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
    d922:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d926:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
    d92a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    d92e:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
    d930:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d934:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
    d938:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    d93c:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
    d93e:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
    d942:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
    d944:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    d948:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    d94c:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    d950:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
    d954:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
    d958:	f7ff bbbf 	b.w	d0da <isr_rx_conn_pkt_ctrl+0x17e>
	else if (rej_ext_ind->error_code != 0x23) {
    d95c:	2923      	cmp	r1, #35	; 0x23
    d95e:	d011      	beq.n	d984 <isr_rx_conn_pkt_ctrl+0xa28>
		LL_ASSERT(_radio.conn_upd == conn);
    d960:	f8d2 6d70 	ldr.w	r6, [r2, #3440]	; 0xd70
    d964:	42b3      	cmp	r3, r6
    d966:	f47f ab3b 	bne.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
		_radio.conn_upd = NULL;
    d96a:	2600      	movs	r6, #0
		if (conn->role) {
    d96c:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
    d96e:	f8c2 6d70 	str.w	r6, [r2, #3440]	; 0xd70
			conn->slave.ticks_to_offset =
    d972:	bfb8      	it	lt
    d974:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
    d978:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
    d97c:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
    d980:	bfb8      	it	lt
    d982:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    d984:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    d988:	0717      	lsls	r7, r2, #28
    d98a:	f57f abb6 	bpl.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
	cp->status = rej_ext_ind->error_code;
    d98e:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d990:	2208      	movs	r2, #8
	cp->latency = conn->latency;
    d992:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    d994:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
    d996:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
    d998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    d99a:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
    d99c:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    d99e:	237d      	movs	r3, #125	; 0x7d
    d9a0:	4353      	muls	r3, r2
	cp->latency = conn->latency;
    d9a2:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
    d9a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d9a8:	fb93 f3f2 	sdiv	r3, r3, r2
    d9ac:	8223      	strh	r3, [r4, #16]
    d9ae:	f7ff bbd1 	b.w	d154 <isr_rx_conn_pkt_ctrl+0x1f8>
		   _radio.conn_curr->llcp_length.req) {
    d9b2:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    d9b6:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    d9ba:	4290      	cmp	r0, r2
    d9bc:	d01a      	beq.n	d9f4 <isr_rx_conn_pkt_ctrl+0xa98>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    d9be:	2914      	cmp	r1, #20
    d9c0:	f47f ab9b 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		conn->llcp_length.ack = conn->llcp_length.req;
    d9c4:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
    d9c8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
    d9cc:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    d9ce:	f360 02c3 	bfi	r2, r0, #3, #1
    d9d2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    d9d6:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
    d9d8:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    d9dc:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    d9de:	2215      	movs	r2, #21
    d9e0:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    d9e2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    d9e4:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    d9e6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    d9e8:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    d9ea:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
    d9ec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
    d9ee:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    d9f0:	8263      	strh	r3, [r4, #18]
    d9f2:	e566      	b.n	d4c2 <isr_rx_conn_pkt_ctrl+0x566>
		switch (rej_ext_ind->reject_opcode) {
    d9f4:	2903      	cmp	r1, #3
    d9f6:	f47f ab80 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->pause_rx = 0;
    d9fa:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    d9fe:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    da02:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    da06:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    da08:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    da0c:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    da10:	230d      	movs	r3, #13
    da12:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    da14:	7b63      	ldrb	r3, [r4, #13]
    da16:	7323      	strb	r3, [r4, #12]
    da18:	e553      	b.n	d4c2 <isr_rx_conn_pkt_ctrl+0x566>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    da1a:	7a41      	ldrb	r1, [r0, #9]
    da1c:	2012      	movs	r0, #18
    da1e:	f7fc fab1 	bl	9f84 <pdu_len_cmp>
    da22:	2800      	cmp	r0, #0
    da24:	f000 831b 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		nack = ping_resp_send(_radio.conn_curr);
    da28:	480e      	ldr	r0, [pc, #56]	; (da64 <isr_rx_conn_pkt_ctrl+0xb08>)
    da2a:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    da2e:	f600 5044 	addw	r0, r0, #3396	; 0xd44
    da32:	f7f9 fea8 	bl	7786 <mem_acquire>
	if (!node_tx) {
    da36:	4601      	mov	r1, r0
    da38:	2800      	cmp	r0, #0
    da3a:	f43f ac7e 	beq.w	d33a <isr_rx_conn_pkt_ctrl+0x3de>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    da3e:	7903      	ldrb	r3, [r0, #4]
    da40:	f043 0303 	orr.w	r3, r3, #3
    da44:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    da46:	2301      	movs	r3, #1
    da48:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    da4a:	2313      	movs	r3, #19
    da4c:	e4b0      	b.n	d3b0 <isr_rx_conn_pkt_ctrl+0x454>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    da4e:	7a41      	ldrb	r1, [r0, #9]
    da50:	2013      	movs	r0, #19
    da52:	f7fc fa97 	bl	9f84 <pdu_len_cmp>
    da56:	2800      	cmp	r0, #0
    da58:	f000 8301 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		_radio.conn_curr->procedure_expire = 0;
    da5c:	4b01      	ldr	r3, [pc, #4]	; (da64 <isr_rx_conn_pkt_ctrl+0xb08>)
    da5e:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
    da62:	e44e      	b.n	d302 <isr_rx_conn_pkt_ctrl+0x3a6>
    da64:	200008e0 	.word	0x200008e0
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    da68:	7a41      	ldrb	r1, [r0, #9]
    da6a:	2007      	movs	r0, #7
    da6c:	f7fc fa8a 	bl	9f84 <pdu_len_cmp>
    da70:	2800      	cmp	r0, #0
    da72:	f000 82f4 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    da76:	4ad4      	ldr	r2, [pc, #848]	; (ddc8 <isr_rx_conn_pkt_ctrl+0xe6c>)
    da78:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
    da7c:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
    da80:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    da84:	42b1      	cmp	r1, r6
    da86:	4611      	mov	r1, r2
    da88:	d02c      	beq.n	dae4 <isr_rx_conn_pkt_ctrl+0xb88>
			conn->llcp_conn_param.disabled = 1;
    da8a:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
    da8e:	f040 0010 	orr.w	r0, r0, #16
    da92:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
    da96:	f993 001d 	ldrsb.w	r0, [r3, #29]
    da9a:	2800      	cmp	r0, #0
    da9c:	f6bf af2b 	bge.w	d8f6 <isr_rx_conn_pkt_ctrl+0x99a>
			LL_ASSERT(_radio.conn_upd == conn);
    daa0:	f8d2 2d70 	ldr.w	r2, [r2, #3440]	; 0xd70
    daa4:	4293      	cmp	r3, r2
    daa6:	f47f aa9b 	bne.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
			_radio.conn_upd = NULL;
    daaa:	2200      	movs	r2, #0
    daac:	f8c1 2d70 	str.w	r2, [r1, #3440]	; 0xd70
			if (!conn->llcp_conn_param.cmd) {
    dab0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    dab4:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    dab8:	0716      	lsls	r6, r2, #28
    daba:	f57f ab1e 	bpl.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    dabe:	2208      	movs	r2, #8
    dac0:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    dac2:	221a      	movs	r2, #26
    dac4:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
    dac6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
    dac8:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
    daca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    dacc:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
    dace:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    dad0:	237d      	movs	r3, #125	; 0x7d
    dad2:	4353      	muls	r3, r2
			cp->latency = conn->latency;
    dad4:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
    dad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dada:	fb93 f3f2 	sdiv	r3, r3, r2
    dade:	8223      	strh	r3, [r4, #16]
    dae0:	f7ff bbb5 	b.w	d24e <isr_rx_conn_pkt_ctrl+0x2f2>
		} else if (_radio.conn_curr->llcp_length.req !=
    dae4:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
    dae8:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
    daec:	4290      	cmp	r0, r2
    daee:	d009      	beq.n	db04 <isr_rx_conn_pkt_ctrl+0xba8>
			_radio.conn_curr->llcp_length.ack =
    daf0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    daf4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    daf8:	f36f 02c3 	bfc	r2, #3, #1
    dafc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    db00:	f7ff bba5 	b.w	d24e <isr_rx_conn_pkt_ctrl+0x2f2>
		} else if (_radio.conn_curr->llcp_phy.req !=
    db04:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
    db08:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
    db0c:	4290      	cmp	r0, r2
    db0e:	d01b      	beq.n	db48 <isr_rx_conn_pkt_ctrl+0xbec>
			_radio.conn_curr->llcp_phy.ack =
    db10:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    db14:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    db18:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    db1c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
    db20:	f362 0002 	bfi	r0, r2, #0, #3
    db24:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    db28:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
    db2c:	0780      	lsls	r0, r0, #30
    db2e:	d50f      	bpl.n	db50 <isr_rx_conn_pkt_ctrl+0xbf4>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    db30:	200c      	movs	r0, #12
    db32:	7120      	strb	r0, [r4, #4]
				p->status = 0;
    db34:	2000      	movs	r0, #0
    db36:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    db38:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    db3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    db3e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    db42:	7363      	strb	r3, [r4, #13]
    db44:	f7ff bb83 	b.w	d24e <isr_rx_conn_pkt_ctrl+0x2f2>
			switch (llctrl->unknown_rsp.type) {
    db48:	7b23      	ldrb	r3, [r4, #12]
    db4a:	2b12      	cmp	r3, #18
    db4c:	f47f ab7f 	bne.w	d24e <isr_rx_conn_pkt_ctrl+0x2f2>
		_radio.conn_curr->procedure_expire = 0;
    db50:	f8d1 3cfc 	ldr.w	r3, [r1, #3324]	; 0xcfc
    db54:	f7ff bbd5 	b.w	d302 <isr_rx_conn_pkt_ctrl+0x3a6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    db58:	7a41      	ldrb	r1, [r0, #9]
    db5a:	2014      	movs	r0, #20
    db5c:	f7fc fa12 	bl	9f84 <pdu_len_cmp>
    db60:	2800      	cmp	r0, #0
    db62:	f000 827c 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    db66:	2f14      	cmp	r7, #20
    db68:	d125      	bne.n	dbb6 <isr_rx_conn_pkt_ctrl+0xc5a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    db6a:	4898      	ldr	r0, [pc, #608]	; (ddcc <isr_rx_conn_pkt_ctrl+0xe70>)
    db6c:	f7f9 fe0b 	bl	7786 <mem_acquire>
		if (!node_tx) {
    db70:	4606      	mov	r6, r0
    db72:	2800      	cmp	r0, #0
    db74:	f43f abe1 	beq.w	d33a <isr_rx_conn_pkt_ctrl+0x3de>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    db78:	f8df 824c 	ldr.w	r8, [pc, #588]	; ddc8 <isr_rx_conn_pkt_ctrl+0xe6c>
    db7c:	f8d8 3cfc 	ldr.w	r3, [r8, #3324]	; 0xcfc
	    ((_radio.conn_curr->llcp_length.req ==
    db80:	f893 70e8 	ldrb.w	r7, [r3, #232]	; 0xe8
	if (/* Local idle, and Peer request then complete the Peer procedure
    db84:	f893 c0e9 	ldrb.w	ip, [r3, #233]	; 0xe9
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    db88:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    db8a:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
    db8c:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
    db8e:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
    db92:	9701      	str	r7, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
    db94:	45bc      	cmp	ip, r7
    db96:	46c3      	mov	fp, r8
    db98:	f894 c00b 	ldrb.w	ip, [r4, #11]
    db9c:	d10d      	bne.n	dbba <isr_rx_conn_pkt_ctrl+0xc5e>
	      _radio.conn_curr->llcp_length.ack) &&
    db9e:	f1bc 0f14 	cmp.w	ip, #20
    dba2:	d016      	beq.n	dbd2 <isr_rx_conn_pkt_ctrl+0xc76>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    dba4:	f1bc 0f15 	cmp.w	ip, #21
    dba8:	f47f aa1a 	bne.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    dbac:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
    dbae:	4681      	mov	r9, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    dbb0:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    dbb2:	4692      	mov	sl, r2
    dbb4:	e061      	b.n	dc7a <isr_rx_conn_pkt_ctrl+0xd1e>
	struct radio_pdu_node_tx *node_tx = NULL;
    dbb6:	2600      	movs	r6, #0
    dbb8:	e7de      	b.n	db78 <isr_rx_conn_pkt_ctrl+0xc1c>
		 LLCP_LENGTH_STATE_REQ) ||
    dbba:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
    dbbe:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
    dbc2:	2f01      	cmp	r7, #1
    dbc4:	d9eb      	bls.n	db9e <isr_rx_conn_pkt_ctrl+0xc42>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    dbc6:	2f02      	cmp	r7, #2
    dbc8:	d1ec      	bne.n	dba4 <isr_rx_conn_pkt_ctrl+0xc48>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    dbca:	f1ac 0714 	sub.w	r7, ip, #20
    dbce:	2f01      	cmp	r7, #1
    dbd0:	d8e8      	bhi.n	dba4 <isr_rx_conn_pkt_ctrl+0xc48>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    dbd2:	89a7      	ldrh	r7, [r4, #12]
    dbd4:	2f1a      	cmp	r7, #26
    dbd6:	d969      	bls.n	dcac <isr_rx_conn_pkt_ctrl+0xd50>
			eff_tx_octets = min(lr->max_rx_octets,
    dbd8:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
    dbdc:	4567      	cmp	r7, ip
    dbde:	bf28      	it	cs
    dbe0:	4667      	movcs	r7, ip
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    dbe2:	f8b4 a010 	ldrh.w	sl, [r4, #16]
    dbe6:	f1ba 0f1a 	cmp.w	sl, #26
    dbea:	d961      	bls.n	dcb0 <isr_rx_conn_pkt_ctrl+0xd54>
			eff_rx_octets = min(lr->max_tx_octets,
    dbec:	f1ba 0ffb 	cmp.w	sl, #251	; 0xfb
    dbf0:	bf28      	it	cs
    dbf2:	f04f 0afb 	movcs.w	sl, #251	; 0xfb
		if (lr->max_rx_time >=
    dbf6:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
    dbfa:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
    dbfe:	d359      	bcc.n	dcb4 <isr_rx_conn_pkt_ctrl+0xd58>
			eff_tx_time = min(lr->max_rx_time,
    dc00:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
    dc04:	45e0      	cmp	r8, ip
    dc06:	bf28      	it	cs
    dc08:	46e0      	movcs	r8, ip
		if (lr->max_tx_time >=
    dc0a:	f8b4 9012 	ldrh.w	r9, [r4, #18]
    dc0e:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
    dc12:	d351      	bcc.n	dcb8 <isr_rx_conn_pkt_ctrl+0xd5c>
			eff_rx_time = min(lr->max_tx_time,
    dc14:	f244 2c90 	movw	ip, #17040	; 0x4290
    dc18:	45e1      	cmp	r9, ip
    dc1a:	bf28      	it	cs
    dc1c:	46e1      	movcs	r9, ip
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    dc1e:	4552      	cmp	r2, sl
    dc20:	d04c      	beq.n	dcbc <isr_rx_conn_pkt_ctrl+0xd60>
			free_count_rx = packet_rx_acquired_count_get() +
    dc22:	f7fc f9f7 	bl	a014 <packet_rx_acquired_count_get>
    dc26:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    dc28:	f8db 0d18 	ldr.w	r0, [fp, #3352]	; 0xd18
    dc2c:	f7f9 fdda 	bl	77e4 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    dc30:	4420      	add	r0, r4
    dc32:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
    dc34:	28ff      	cmp	r0, #255	; 0xff
    dc36:	f63f a9d3 	bhi.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
			if (_radio.packet_rx_data_count == free_count_rx) {
    dc3a:	f89b 3d22 	ldrb.w	r3, [fp, #3362]	; 0xd22
    dc3e:	4283      	cmp	r3, r0
    dc40:	f040 8228 	bne.w	e094 <isr_rx_conn_pkt_ctrl+0x1138>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    dc44:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
					(_radio.conn_curr->llcp_length.req - 1);
    dc48:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    dc4c:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    dc4e:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    dc50:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    dc54:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    dc58:	f8a3 a0ec 	strh.w	sl, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    dc5c:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    dc60:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    dc64:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    dc68:	f8a3 90f0 	strh.w	r9, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    dc6c:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    dc70:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    dc74:	2303      	movs	r3, #3
    dc76:	f88b 3014 	strb.w	r3, [fp, #20]
	if (node_tx) {
    dc7a:	2e00      	cmp	r6, #0
    dc7c:	f43f aa3d 	beq.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc80:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    dc82:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    dc86:	f8a6 a008 	strh.w	sl, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    dc8a:	f043 0303 	orr.w	r3, r3, #3
    dc8e:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    dc90:	2309      	movs	r3, #9
    dc92:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    dc94:	2315      	movs	r3, #21
    dc96:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    dc98:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    dc9a:	f8a6 900a 	strh.w	r9, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    dc9e:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    dca2:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
    dca4:	f7fd fdbe 	bl	b824 <ctrl_tx_enqueue>
    dca8:	f7ff ba27 	b.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    dcac:	460f      	mov	r7, r1
    dcae:	e798      	b.n	dbe2 <isr_rx_conn_pkt_ctrl+0xc86>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    dcb0:	4692      	mov	sl, r2
    dcb2:	e7a0      	b.n	dbf6 <isr_rx_conn_pkt_ctrl+0xc9a>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    dcb4:	46f0      	mov	r8, lr
    dcb6:	e7a8      	b.n	dc0a <isr_rx_conn_pkt_ctrl+0xcae>
	eff_rx_time = _radio.conn_curr->max_rx_time;
    dcb8:	4681      	mov	r9, r0
    dcba:	e7b0      	b.n	dc1e <isr_rx_conn_pkt_ctrl+0xcc2>
			_radio.conn_curr->llcp_length.ack =
    dcbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    dcc0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    dcc4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    dcc8:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
    dccc:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    dcd0:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
    dcd2:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
    dcd6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    dcda:	d103      	bne.n	dce4 <isr_rx_conn_pkt_ctrl+0xd88>
    dcdc:	45c6      	cmp	lr, r8
    dcde:	d101      	bne.n	dce4 <isr_rx_conn_pkt_ctrl+0xd88>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    dce0:	4548      	cmp	r0, r9
    dce2:	d0ca      	beq.n	dc7a <isr_rx_conn_pkt_ctrl+0xd1e>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    dce4:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    dce6:	f8a3 9036 	strh.w	r9, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    dcea:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
    dcee:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
    dcf0:	f8a4 a00c 	strh.w	sl, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    dcf4:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    dcf6:	f8a4 900e 	strh.w	r9, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    dcfa:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    dcfe:	702b      	strb	r3, [r5, #0]
    dd00:	e7bb      	b.n	dc7a <isr_rx_conn_pkt_ctrl+0xd1e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    dd02:	7a41      	ldrb	r1, [r0, #9]
    dd04:	2016      	movs	r0, #22
    dd06:	f7fc f93d 	bl	9f84 <pdu_len_cmp>
    dd0a:	2800      	cmp	r0, #0
    dd0c:	f000 81a7 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		if (_radio.role == ROLE_MASTER) {
    dd10:	482d      	ldr	r0, [pc, #180]	; (ddc8 <isr_rx_conn_pkt_ctrl+0xe6c>)
    dd12:	7cc3      	ldrb	r3, [r0, #19]
    dd14:	2b04      	cmp	r3, #4
    dd16:	d15b      	bne.n	ddd0 <isr_rx_conn_pkt_ctrl+0xe74>
			if ((_radio.conn_curr->llcp_phy.ack !=
    dd18:	f8d0 0cfc 	ldr.w	r0, [r0, #3324]	; 0xcfc
    dd1c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    dd20:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    dd24:	428b      	cmp	r3, r1
    dd26:	d00a      	beq.n	dd3e <isr_rx_conn_pkt_ctrl+0xde2>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    dd28:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    dd2c:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    dd30:	3a01      	subs	r2, #1
    dd32:	2a02      	cmp	r2, #2
    dd34:	d803      	bhi.n	dd3e <isr_rx_conn_pkt_ctrl+0xde2>
				nack = reject_ext_ind_send(_radio.conn_curr,
    dd36:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    dd38:	2116      	movs	r1, #22
    dd3a:	f7ff bbd7 	b.w	d4ec <isr_rx_conn_pkt_ctrl+0x590>
			} else if (((_radio.conn_curr->llcp_req !=
    dd3e:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    dd42:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    dd46:	4295      	cmp	r5, r2
    dd48:	d003      	beq.n	dd52 <isr_rx_conn_pkt_ctrl+0xdf6>
				     _radio.conn_curr->llcp_ack) &&
    dd4a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    dd4e:	2a03      	cmp	r2, #3
    dd50:	d105      	bne.n	dd5e <isr_rx_conn_pkt_ctrl+0xe02>
				     LLCP_ENCRYPTION)) ||
    dd52:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    dd56:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    dd5a:	4295      	cmp	r5, r2
    dd5c:	d001      	beq.n	dd62 <isr_rx_conn_pkt_ctrl+0xe06>
				nack = reject_ext_ind_send(_radio.conn_curr,
    dd5e:	222a      	movs	r2, #42	; 0x2a
    dd60:	e7ea      	b.n	dd38 <isr_rx_conn_pkt_ctrl+0xddc>
				_radio.conn_curr->llcp_phy.state =
    dd62:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    dd66:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    dd68:	f042 0203 	orr.w	r2, r2, #3
    dd6c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    dd70:	d116      	bne.n	dda0 <isr_rx_conn_pkt_ctrl+0xe44>
					_radio.conn_curr->llcp_phy.ack--;
    dd72:	3b01      	subs	r3, #1
    dd74:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    dd78:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    dd7c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    dd80:	f36f 0341 	bfc	r3, #1, #1
    dd84:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    dd88:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    dd8c:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    dd90:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    dd94:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    dd98:	f362 1347 	bfi	r3, r2, #5, #3
    dd9c:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    dda0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    dda4:	7b62      	ldrb	r2, [r4, #13]
    dda6:	f3c3 0182 	ubfx	r1, r3, #2, #3
    ddaa:	400a      	ands	r2, r1
    ddac:	f362 0384 	bfi	r3, r2, #2, #3
    ddb0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    ddb4:	7b22      	ldrb	r2, [r4, #12]
    ddb6:	b2db      	uxtb	r3, r3
    ddb8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    ddbc:	f362 1347 	bfi	r3, r2, #5, #3
    ddc0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    ddc4:	f7ff b999 	b.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
    ddc8:	200008e0 	.word	0x200008e0
    ddcc:	20001624 	.word	0x20001624
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    ddd0:	f8d0 5cfc 	ldr.w	r5, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    ddd4:	f600 5044 	addw	r0, r0, #3396	; 0xd44
    ddd8:	f7f9 fcd5 	bl	7786 <mem_acquire>
	if (!node_tx) {
    dddc:	4601      	mov	r1, r0
    ddde:	2800      	cmp	r0, #0
    dde0:	f43f aaab 	beq.w	d33a <isr_rx_conn_pkt_ctrl+0x3de>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    dde4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    dde8:	2202      	movs	r2, #2
    ddea:	f362 0301 	bfi	r3, r2, #0, #2
    ddee:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    ddf2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    ddf6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    ddfa:	4293      	cmp	r3, r2
    ddfc:	d11a      	bne.n	de34 <isr_rx_conn_pkt_ctrl+0xed8>
		conn->llcp_phy.ack--;
    ddfe:	3b01      	subs	r3, #1
    de00:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    de04:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    de08:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    de0c:	f36f 0341 	bfc	r3, #1, #1
    de10:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    de14:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    de18:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    de1c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    de20:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    de24:	f362 1347 	bfi	r3, r2, #5, #3
    de28:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    de2c:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    de30:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    de34:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    de38:	7b62      	ldrb	r2, [r4, #13]
    de3a:	f3c3 0082 	ubfx	r0, r3, #2, #3
    de3e:	4002      	ands	r2, r0
    de40:	f362 0384 	bfi	r3, r2, #2, #3
    de44:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    de48:	7b22      	ldrb	r2, [r4, #12]
    de4a:	b2db      	uxtb	r3, r3
    de4c:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    de50:	f362 1347 	bfi	r3, r2, #5, #3
    de54:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    de58:	790b      	ldrb	r3, [r1, #4]
    de5a:	f043 0303 	orr.w	r3, r3, #3
    de5e:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    de60:	2303      	movs	r3, #3
    de62:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    de64:	2317      	movs	r3, #23
    de66:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    de68:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    de6c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    de70:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    de72:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    de76:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    de7a:	724b      	strb	r3, [r1, #9]
    de7c:	f7ff ba6f 	b.w	d35e <isr_rx_conn_pkt_ctrl+0x402>
		if (_radio.conn_curr->role ||
    de80:	4e8b      	ldr	r6, [pc, #556]	; (e0b0 <isr_rx_conn_pkt_ctrl+0x1154>)
    de82:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
    de86:	f995 301d 	ldrsb.w	r3, [r5, #29]
    de8a:	2b00      	cmp	r3, #0
    de8c:	f2c0 80e7 	blt.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    de90:	7a41      	ldrb	r1, [r0, #9]
    de92:	2017      	movs	r0, #23
    de94:	f7fc f876 	bl	9f84 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    de98:	2800      	cmp	r0, #0
    de9a:	f000 80e0 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		if ((_radio.role == ROLE_MASTER) &&
    de9e:	7cf3      	ldrb	r3, [r6, #19]
    dea0:	2b04      	cmp	r3, #4
    dea2:	f47f a92a 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
    dea6:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    deaa:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    deae:	429a      	cmp	r2, r3
    deb0:	f43f a923 	beq.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		    (_radio.conn_curr->llcp_phy.state ==
    deb4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    deb8:	f003 0203 	and.w	r2, r3, #3
    debc:	2a02      	cmp	r2, #2
    debe:	f47f a91c 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    dec2:	f043 0303 	orr.w	r3, r3, #3
    dec6:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    deca:	7b62      	ldrb	r2, [r4, #13]
    decc:	f3c3 0182 	ubfx	r1, r3, #2, #3
    ded0:	400a      	ands	r2, r1
    ded2:	f362 0384 	bfi	r3, r2, #2, #3
    ded6:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    deda:	7b22      	ldrb	r2, [r4, #12]
    dedc:	b2db      	uxtb	r3, r3
    dede:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    dee2:	f362 1347 	bfi	r3, r2, #5, #3
    dee6:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
    deea:	f7ff b8be 	b.w	d06a <isr_rx_conn_pkt_ctrl+0x10e>
		if (!_radio.conn_curr->role ||
    deee:	4b70      	ldr	r3, [pc, #448]	; (e0b0 <isr_rx_conn_pkt_ctrl+0x1154>)
    def0:	f8d3 6cfc 	ldr.w	r6, [r3, #3324]	; 0xcfc
    def4:	f996 301d 	ldrsb.w	r3, [r6, #29]
    def8:	2b00      	cmp	r3, #0
    defa:	f280 80b0 	bge.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    defe:	7a41      	ldrb	r1, [r0, #9]
    df00:	2018      	movs	r0, #24
    df02:	f7fc f83f 	bl	9f84 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    df06:	2800      	cmp	r0, #0
    df08:	f000 80a9 	beq.w	e05e <isr_rx_conn_pkt_ctrl+0x1102>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    df0c:	7b27      	ldrb	r7, [r4, #12]
    df0e:	7b62      	ldrb	r2, [r4, #13]
    df10:	ea47 0002 	orr.w	r0, r7, r2
    df14:	f010 0007 	ands.w	r0, r0, #7
    df18:	d125      	bne.n	df66 <isr_rx_conn_pkt_ctrl+0x100a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    df1a:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    df1e:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    df22:	4293      	cmp	r3, r2
    df24:	f43f a8e9 	beq.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    df28:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    df2c:	f003 0303 	and.w	r3, r3, #3
    df30:	2b02      	cmp	r3, #2
    df32:	f47f a8e2 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		if (!conn->llcp_phy.cmd) {
    df36:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    df3a:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    df3e:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    df40:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    df44:	f57f a8d9 	bpl.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    df48:	230c      	movs	r3, #12
		upd->status = 0;
    df4a:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    df4c:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    df4e:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    df52:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    df56:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    df58:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    df5c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    df60:	7363      	strb	r3, [r4, #13]
    df62:	f7ff baae 	b.w	d4c2 <isr_rx_conn_pkt_ctrl+0x566>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    df66:	89e0      	ldrh	r0, [r4, #14]
    df68:	8c73      	ldrh	r3, [r6, #34]	; 0x22
    df6a:	1ac3      	subs	r3, r0, r3
    df6c:	041b      	lsls	r3, r3, #16
    df6e:	f100 809a 	bmi.w	e0a6 <isr_rx_conn_pkt_ctrl+0x114a>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    df72:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
    df76:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    df7a:	428b      	cmp	r3, r1
    df7c:	f47f a830 	bne.w	cfe0 <isr_rx_conn_pkt_ctrl+0x84>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    df80:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
    df84:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    df88:	42a3      	cmp	r3, r4
    df8a:	d014      	beq.n	dfb6 <isr_rx_conn_pkt_ctrl+0x105a>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    df8c:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    df90:	f003 0303 	and.w	r3, r3, #3
    df94:	2b02      	cmp	r3, #2
    df96:	d10e      	bne.n	dfb6 <isr_rx_conn_pkt_ctrl+0x105a>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    df98:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    df9c:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    dfa0:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
    dfa4:	f3c3 0340 	ubfx	r3, r3, #1, #1
    dfa8:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
    dfac:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    dfae:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    dfb2:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    dfb6:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    dfba:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    dfbe:	f002 0207 	and.w	r2, r2, #7
    dfc2:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    dfc6:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
    dfca:	f36f 0300 	bfc	r3, #0, #1
    dfce:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    dfd2:	2008      	movs	r0, #8
	conn->llcp_ack--;
    dfd4:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
    dfd6:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
    dfda:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
    dfde:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	f43f a889 	beq.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    dfe8:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    dfec:	f362 0302 	bfi	r3, r2, #0, #3
    dff0:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    dff4:	f7ff b881 	b.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		if (_radio.conn_curr->role ||
    dff8:	4e2d      	ldr	r6, [pc, #180]	; (e0b0 <isr_rx_conn_pkt_ctrl+0x1154>)
    dffa:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
    dffe:	f995 301d 	ldrsb.w	r3, [r5, #29]
    e002:	2b00      	cmp	r3, #0
    e004:	db2b      	blt.n	e05e <isr_rx_conn_pkt_ctrl+0x1102>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    e006:	7a41      	ldrb	r1, [r0, #9]
    e008:	2019      	movs	r0, #25
    e00a:	f7fb ffbb 	bl	9f84 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    e00e:	b330      	cbz	r0, e05e <isr_rx_conn_pkt_ctrl+0x1102>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    e010:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    e014:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    e018:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    e01c:	7b22      	ldrb	r2, [r4, #12]
    e01e:	f003 0307 	and.w	r3, r3, #7
    e022:	4213      	tst	r3, r2
    e024:	f43f a869 	beq.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
			if (conn->llcp_req != conn->llcp_ack) {
    e028:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    e02c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e030:	429a      	cmp	r2, r3
    e032:	f47f a862 	bne.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
			memcpy(&conn->llcp.chan_map.chm[0],
    e036:	2205      	movs	r2, #5
    e038:	f606 5102 	addw	r1, r6, #3330	; 0xd02
    e03c:	f105 0079 	add.w	r0, r5, #121	; 0x79
    e040:	f7f2 face 	bl	5e0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    e044:	2301      	movs	r3, #1
    e046:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    e04a:	2302      	movs	r3, #2
    e04c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    e050:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    e054:	3b01      	subs	r3, #1
    e056:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    e05a:	f7ff b84e 	b.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
		nack = unknown_rsp_send(_radio.conn_curr,
    e05e:	4814      	ldr	r0, [pc, #80]	; (e0b0 <isr_rx_conn_pkt_ctrl+0x1154>)
    e060:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    e064:	f600 5044 	addw	r0, r0, #3396	; 0xd44
    e068:	f7f9 fb8d 	bl	7786 <mem_acquire>
	if (!node_tx) {
    e06c:	4601      	mov	r1, r0
    e06e:	2800      	cmp	r0, #0
    e070:	f43f a963 	beq.w	d33a <isr_rx_conn_pkt_ctrl+0x3de>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e074:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    e076:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e078:	f043 0303 	orr.w	r3, r3, #3
    e07c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    e07e:	2302      	movs	r3, #2
    e080:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    e082:	2307      	movs	r3, #7
    e084:	71c3      	strb	r3, [r0, #7]
    e086:	f7ff b994 	b.w	d3b2 <isr_rx_conn_pkt_ctrl+0x456>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e08a:	2328      	movs	r3, #40	; 0x28
    e08c:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    e090:	f7ff b833 	b.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
	if (node_tx) {
    e094:	2e00      	cmp	r6, #0
    e096:	f43f a950 	beq.w	d33a <isr_rx_conn_pkt_ctrl+0x3de>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    e09a:	4906      	ldr	r1, [pc, #24]	; (e0b4 <isr_rx_conn_pkt_ctrl+0x1158>)
    e09c:	4630      	mov	r0, r6
    e09e:	f7f9 fb8c 	bl	77ba <mem_release>
    e0a2:	f7ff b94a 	b.w	d33a <isr_rx_conn_pkt_ctrl+0x3de>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    e0a6:	2328      	movs	r3, #40	; 0x28
    e0a8:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    e0ac:	f7ff b825 	b.w	d0fa <isr_rx_conn_pkt_ctrl+0x19e>
    e0b0:	200008e0 	.word	0x200008e0
    e0b4:	20001624 	.word	0x20001624

0000e0b8 <isr>:
{
    e0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0bc:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
    e0be:	f004 fccd 	bl	12a5c <radio_is_done>
    e0c2:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    e0c4:	b35e      	cbz	r6, e11e <isr+0x66>
		crc_ok = radio_crc_is_valid();
    e0c6:	f004 fce9 	bl	12a9c <radio_crc_is_valid>
    e0ca:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    e0cc:	f004 fd6a 	bl	12ba4 <radio_filter_has_match>
    e0d0:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
    e0d4:	f004 fd70 	bl	12bb8 <radio_filter_match_get>
    e0d8:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_ok = radio_ar_has_match();
    e0dc:	f004 ff5e 	bl	12f9c <radio_ar_has_match>
    e0e0:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    e0e4:	f004 ff48 	bl	12f78 <radio_ar_match_get>
    e0e8:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    e0ec:	f004 fd24 	bl	12b38 <radio_rssi_is_ready>
    e0f0:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    e0f2:	4cad      	ldr	r4, [pc, #692]	; (e3a8 <isr+0x2f0>)
	radio_status_reset();
    e0f4:	f004 fc9c 	bl	12a30 <radio_status_reset>
	radio_tmr_status_reset();
    e0f8:	f004 fd70 	bl	12bdc <radio_tmr_status_reset>
	radio_filter_status_reset();
    e0fc:	f004 fd4a 	bl	12b94 <radio_filter_status_reset>
	radio_ar_status_reset();
    e100:	f004 ff40 	bl	12f84 <radio_ar_status_reset>
	radio_rssi_status_reset();
    e104:	f004 fd10 	bl	12b28 <radio_rssi_status_reset>
	switch (_radio.state) {
    e108:	7d23      	ldrb	r3, [r4, #20]
    e10a:	2b05      	cmp	r3, #5
    e10c:	d82c      	bhi.n	e168 <isr+0xb0>
    e10e:	e8df f013 	tbh	[pc, r3, lsl #1]
    e112:	007b      	.short	0x007b
    e114:	000e00c5 	.word	0x000e00c5
    e118:	0a350a35 	.word	0x0a350a35
    e11c:	0a35      	.short	0x0a35
		devmatch_id = irkmatch_id = 0xFF;
    e11e:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    e122:	4635      	mov	r5, r6
    e124:	46b2      	mov	sl, r6
    e126:	46b0      	mov	r8, r6
    e128:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    e12a:	46d9      	mov	r9, fp
    e12c:	e7e1      	b.n	e0f2 <isr+0x3a>
	_radio.state = STATE_RX;
    e12e:	2301      	movs	r3, #1
    e130:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get() + 600
    e132:	f004 fe45 	bl	12dc0 <radio_tmr_tifs_base_get>
    e136:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    e138:	2096      	movs	r0, #150	; 0x96
    e13a:	f004 fd5f 	bl	12bfc <radio_tmr_tifs_set>
	switch (_radio.role) {
    e13e:	7ce3      	ldrb	r3, [r4, #19]
    e140:	3b01      	subs	r3, #1
    e142:	2b03      	cmp	r3, #3
    e144:	d810      	bhi.n	e168 <isr+0xb0>
    e146:	e8df f003 	tbb	[pc, r3]
    e14a:	3102      	.short	0x3102
    e14c:	6262      	.short	0x6262
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e14e:	2300      	movs	r3, #0
    e150:	461a      	mov	r2, r3
    e152:	4619      	mov	r1, r3
    e154:	4618      	mov	r0, r3
    e156:	f004 fcbf 	bl	12ad8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    e15a:	f004 fcad 	bl	12ab8 <radio_pkt_scratch_get>
    e15e:	f004 fc21 	bl	129a4 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e162:	f004 fc71 	bl	12a48 <radio_is_ready>
    e166:	b128      	cbz	r0, e174 <isr+0xbc>
		LL_ASSERT(0);
    e168:	4040      	eors	r0, r0
    e16a:	f380 8811 	msr	BASEPRI, r0
    e16e:	f04f 0004 	mov.w	r0, #4
    e172:	df02      	svc	2
		if (ctrl_rl_enabled()) {
    e174:	f003 fe1e 	bl	11db4 <ctrl_rl_enabled>
    e178:	b138      	cbz	r0, e18a <isr+0xd2>
			u8_t count, *irks = ctrl_irks_get(&count);
    e17a:	a810      	add	r0, sp, #64	; 0x40
    e17c:	f003 fc1e 	bl	119bc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e180:	4601      	mov	r1, r0
    e182:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e186:	f004 fec5 	bl	12f14 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e18a:	2100      	movs	r1, #0
    e18c:	4608      	mov	r0, r1
    e18e:	f004 fc22 	bl	129d6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e192:	f205 351b 	addw	r5, r5, #795	; 0x31b
		hcto -= radio_tx_chain_delay_get(0, 0);
    e196:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e198:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e19a:	4608      	mov	r0, r1
    e19c:	f004 fc17 	bl	129ce <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e1a0:	1a28      	subs	r0, r5, r0
    e1a2:	f004 fda3 	bl	12cec <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    e1a6:	f004 fdf3 	bl	12d90 <radio_tmr_end_capture>
    e1aa:	e02d      	b.n	e208 <isr+0x150>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    e1ac:	2300      	movs	r3, #0
    e1ae:	461a      	mov	r2, r3
    e1b0:	4619      	mov	r1, r3
    e1b2:	4618      	mov	r0, r3
    e1b4:	f004 fc90 	bl	12ad8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    e1b8:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
    e1bc:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		radio_pkt_rx_set(_radio.packet_rx
    e1c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e1c4:	3008      	adds	r0, #8
    e1c6:	f004 fbed 	bl	129a4 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    e1ca:	f004 fc3d 	bl	12a48 <radio_is_ready>
    e1ce:	2800      	cmp	r0, #0
    e1d0:	d1ca      	bne.n	e168 <isr+0xb0>
		if (ctrl_rl_enabled()) {
    e1d2:	f003 fdef 	bl	11db4 <ctrl_rl_enabled>
    e1d6:	b138      	cbz	r0, e1e8 <isr+0x130>
			u8_t count, *irks = ctrl_irks_get(&count);
    e1d8:	a810      	add	r0, sp, #64	; 0x40
    e1da:	f003 fbef 	bl	119bc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    e1de:	4601      	mov	r1, r0
    e1e0:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e1e4:	f004 fe96 	bl	12f14 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    e1e8:	2100      	movs	r1, #0
    e1ea:	4608      	mov	r0, r1
    e1ec:	f004 fbf3 	bl	129d6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    e1f0:	f205 351b 	addw	r5, r5, #795	; 0x31b
		hcto -= radio_tx_chain_delay_get(0, 0);
    e1f4:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    e1f6:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    e1f8:	4608      	mov	r0, r1
    e1fa:	f004 fbe8 	bl	129ce <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e1fe:	1a28      	subs	r0, r5, r0
    e200:	f004 fd74 	bl	12cec <radio_tmr_hcto_configure>
		radio_rssi_measure();
    e204:	f004 fc80 	bl	12b08 <radio_rssi_measure>
}
    e208:	b013      	add	sp, #76	; 0x4c
    e20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e20e:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
					     _radio.conn_curr->phy_flags);
    e212:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    e216:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e21a:	2100      	movs	r1, #0
    e21c:	09d3      	lsrs	r3, r2, #7
    e21e:	f000 0007 	and.w	r0, r0, #7
    e222:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    e226:	f004 fc57 	bl	12ad8 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e22a:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
    e22e:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		rx_packet_set(_radio.conn_curr,	(void *)
    e232:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    e236:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    e23a:	3108      	adds	r1, #8
    e23c:	f7fc f92e 	bl	a49c <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    e240:	f004 fc02 	bl	12a48 <radio_is_ready>
    e244:	2800      	cmp	r0, #0
    e246:	d18f      	bne.n	e168 <isr+0xb0>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e248:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    e24c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    e250:	2101      	movs	r1, #1
    e252:	f000 0007 	and.w	r0, r0, #7
    e256:	f004 fbbe 	bl	129d6 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e25a:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
    e25e:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    e262:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get() + 600
    e266:	f205 25f3 	addw	r5, r5, #755	; 0x2f3
	switch (phy) {
    e26a:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    e26c:	4405      	add	r5, r0
	switch (phy) {
    e26e:	d013      	beq.n	e298 <isr+0x1e0>
		return 40;
    e270:	2b04      	cmp	r3, #4
    e272:	bf0c      	ite	eq
    e274:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    e278:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    e27a:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    e27c:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    e280:	09c1      	lsrs	r1, r0, #7
    e282:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    e286:	f004 fba2 	bl	129ce <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    e28a:	1a28      	subs	r0, r5, r0
    e28c:	f004 fd2e 	bl	12cec <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    e290:	2001      	movs	r0, #1
    e292:	f7fc fe4f 	bl	af34 <packet_tx_enqueue>
    e296:	e7b7      	b.n	e208 <isr+0x150>
		return 24;
    e298:	2018      	movs	r0, #24
    e29a:	e7ee      	b.n	e27a <isr+0x1c2>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    e29c:	b926      	cbnz	r6, e2a8 <isr+0x1f0>
		_radio.state = STATE_CLOSE;
    e29e:	2303      	movs	r3, #3
    e2a0:	7523      	strb	r3, [r4, #20]
		radio_disable();
    e2a2:	f004 fbb3 	bl	12a0c <radio_disable>
    e2a6:	e7af      	b.n	e208 <isr+0x150>
	switch (_radio.role) {
    e2a8:	7ce3      	ldrb	r3, [r4, #19]
    e2aa:	3b01      	subs	r3, #1
    e2ac:	2b03      	cmp	r3, #3
    e2ae:	f63f af5b 	bhi.w	e168 <isr+0xb0>
    e2b2:	e8df f013 	tbh	[pc, r3, lsl #1]
    e2b6:	0004      	.short	0x0004
    e2b8:	0641028f 	.word	0x0641028f
    e2bc:	0641      	.short	0x0641
		if (crc_ok) {
    e2be:	2f00      	cmp	r7, #0
    e2c0:	d0ed      	beq.n	e29e <isr+0x1e6>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e2c2:	f1ba 0f00 	cmp.w	sl, #0
    e2c6:	d038      	beq.n	e33a <isr+0x282>
    e2c8:	4658      	mov	r0, fp
    e2ca:	f003 fba1 	bl	11a10 <ctrl_rl_irk_idx>
    e2ce:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
    e2d2:	f004 fbf1 	bl	12ab8 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e2d6:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
	pdu_adv = (void *)radio_pkt_scratch_get();
    e2da:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e2dc:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e2e0:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    e2e2:	332c      	adds	r3, #44	; 0x2c
    e2e4:	930a      	str	r3, [sp, #40]	; 0x28
    e2e6:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    e2e8:	f000 030f 	and.w	r3, r0, #15
    e2ec:	2b03      	cmp	r3, #3
    e2ee:	d10a      	bne.n	e306 <isr+0x24e>
    e2f0:	7873      	ldrb	r3, [r6, #1]
    e2f2:	2b0c      	cmp	r3, #12
    e2f4:	d107      	bne.n	e306 <isr+0x24e>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e2f6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e2fa:	07df      	lsls	r7, r3, #31
    e2fc:	d51f      	bpl.n	e33e <isr+0x286>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e2fe:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
    e302:	07d8      	lsls	r0, r3, #31
    e304:	d446      	bmi.n	e394 <isr+0x2dc>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    e306:	7830      	ldrb	r0, [r6, #0]
    e308:	f000 030f 	and.w	r3, r0, #15
    e30c:	2b05      	cmp	r3, #5
    e30e:	d1c6      	bne.n	e29e <isr+0x1e6>
    e310:	7873      	ldrb	r3, [r6, #1]
    e312:	2b22      	cmp	r3, #34	; 0x22
    e314:	d1c3      	bne.n	e29e <isr+0x1e6>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e318:	5ce3      	ldrb	r3, [r4, r3]
    e31a:	f003 030f 	and.w	r3, r3, #15
    e31e:	2b01      	cmp	r3, #1
    e320:	f040 8216 	bne.w	e750 <isr+0x698>
					    ci->connect_ind.init_addr,
    e324:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    e326:	aa10      	add	r2, sp, #64	; 0x40
    e328:	4639      	mov	r1, r7
    e32a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e32e:	f003 fce5 	bl	11cfc <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    e332:	2800      	cmp	r0, #0
    e334:	d13a      	bne.n	e3ac <isr+0x2f4>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e336:	2000      	movs	r0, #0
    e338:	e048      	b.n	e3cc <isr+0x314>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    e33a:	20ff      	movs	r0, #255	; 0xff
    e33c:	e7c7      	b.n	e2ce <isr+0x216>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    e33e:	aa10      	add	r2, sp, #64	; 0x40
    e340:	1cb1      	adds	r1, r6, #2
    e342:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e346:	f003 fcd9 	bl	11cfc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    e34a:	2800      	cmp	r0, #0
    e34c:	d0d7      	beq.n	e2fe <isr+0x246>
	return (adv->tx_addr == sr->rx_addr) &&
    e34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e350:	7832      	ldrb	r2, [r6, #0]
    e352:	5ce3      	ldrb	r3, [r4, r3]
    e354:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e358:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e35c:	d1d3      	bne.n	e306 <isr+0x24e>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    e35e:	2206      	movs	r2, #6
    e360:	f106 0108 	add.w	r1, r6, #8
    e364:	1ca8      	adds	r0, r5, #2
    e366:	f7f2 f926 	bl	5b6 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    e36a:	2800      	cmp	r0, #0
    e36c:	d1cb      	bne.n	e306 <isr+0x24e>
		_radio.state = STATE_CLOSE;
    e36e:	2303      	movs	r3, #3
    e370:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    e372:	f004 fbbb 	bl	12aec <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    e376:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    e37a:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    e37e:	f600 2012 	addw	r0, r0, #2578	; 0xa12
    e382:	4420      	add	r0, r4
    e384:	f004 fb14 	bl	129b0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e388:	f004 fb5e 	bl	12a48 <radio_is_ready>
    e38c:	2800      	cmp	r0, #0
    e38e:	f43f af3b 	beq.w	e208 <isr+0x150>
    e392:	e6e9      	b.n	e168 <isr+0xb0>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    e394:	f1b8 0f00 	cmp.w	r8, #0
    e398:	d1d9      	bne.n	e34e <isr+0x296>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e39a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e39e:	f003 fb53 	bl	11a48 <ctrl_irk_whitelisted>
    e3a2:	2800      	cmp	r0, #0
    e3a4:	d1d3      	bne.n	e34e <isr+0x296>
    e3a6:	e7ae      	b.n	e306 <isr+0x24e>
    e3a8:	200008e0 	.word	0x200008e0
		       isr_adv_ci_adva_check(adv, ci) &&
    e3ac:	4631      	mov	r1, r6
    e3ae:	4628      	mov	r0, r5
    e3b0:	f7fc fbee 	bl	ab90 <isr_adv_ci_adva_check>
					    rl_idx) &&
    e3b4:	2800      	cmp	r0, #0
    e3b6:	d0be      	beq.n	e336 <isr+0x27e>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    e3b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
    e3bc:	2bff      	cmp	r3, #255	; 0xff
    e3be:	f000 81b4 	beq.w	e72a <isr+0x672>
		return rl_idx == _radio.advertiser.rl_idx;
    e3c2:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    e3c6:	1ac1      	subs	r1, r0, r3
    e3c8:	4248      	negs	r0, r1
    e3ca:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e3cc:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    e3d0:	2800      	cmp	r0, #0
    e3d2:	f43f af64 	beq.w	e29e <isr+0x1e6>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    e3d6:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
    e3da:	b133      	cbz	r3, e3ea <isr+0x332>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    e3dc:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
    e3e0:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
    e3e4:	429a      	cmp	r2, r3
    e3e6:	f47f af5a 	bne.w	e29e <isr+0x1e6>
    e3ea:	f8d4 3c18 	ldr.w	r3, [r4, #3096]	; 0xc18
    e3ee:	2b00      	cmp	r3, #0
    e3f0:	f43f af55 	beq.w	e29e <isr+0x1e6>
			node_rx = packet_rx_reserve_get(4);
    e3f4:	2004      	movs	r0, #4
    e3f6:	f7fb fe23 	bl	a040 <packet_rx_reserve_get>
		if (!node_rx) {
    e3fa:	4607      	mov	r7, r0
    e3fc:	2800      	cmp	r0, #0
    e3fe:	f43f af4e 	beq.w	e29e <isr+0x1e6>
		_radio.state = STATE_STOP;
    e402:	f04f 0904 	mov.w	r9, #4
    e406:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    e40a:	f004 faff 	bl	12a0c <radio_disable>
		conn = _radio.advertiser.conn;
    e40e:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e412:	f8d4 1cf0 	ldr.w	r1, [r4, #3312]	; 0xcf0
		_radio.advertiser.conn = NULL;
    e416:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e418:	f44f 72aa 	mov.w	r2, #340	; 0x154
    e41c:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    e41e:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e422:	f7f9 f9e8 	bl	77f6 <mem_index_get>
		memcpy(&conn->access_addr[0],
    e426:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    e42a:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    e42c:	2203      	movs	r2, #3
    e42e:	f106 0112 	add.w	r1, r6, #18
    e432:	f105 0014 	add.w	r0, r5, #20
    e436:	f7f2 f8d3 	bl	5e0 <memcpy>
		memcpy(&conn->data_chan_map[0],
    e43a:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    e43e:	464a      	mov	r2, r9
    e440:	f106 010e 	add.w	r1, r6, #14
    e444:	4650      	mov	r0, sl
    e446:	f7f2 f8cb 	bl	5e0 <memcpy>
		memcpy(&conn->data_chan_map[0],
    e44a:	2205      	movs	r2, #5
    e44c:	f106 011e 	add.w	r1, r6, #30
    e450:	4640      	mov	r0, r8
    e452:	f7f2 f8c5 	bl	5e0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    e456:	2105      	movs	r1, #5
    e458:	4640      	mov	r0, r8
    e45a:	f7f9 fb3f 	bl	7adc <util_ones_count_get>
		conn->data_chan_count =
    e45e:	7f6b      	ldrb	r3, [r5, #29]
    e460:	f360 0305 	bfi	r3, r0, #0, #6
    e464:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    e466:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e46a:	f3c3 0304 	ubfx	r3, r3, #0, #5
    e46e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    e470:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    e472:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    e474:	f240 48e2 	movw	r8, #1250	; 0x4e2
    e478:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    e47c:	7ef2      	ldrb	r2, [r6, #27]
    e47e:	7eb3      	ldrb	r3, [r6, #26]
    e480:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e484:	4651      	mov	r1, sl
    e486:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    e488:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    e48a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    e48e:	f7f2 f8a7 	bl	5e0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e492:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e494:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    e496:	f242 7210 	movw	r2, #10000	; 0x2710
    e49a:	fb02 8303 	mla	r3, r2, r3, r8
    e49e:	3b01      	subs	r3, #1
    e4a0:	fbb3 f3f8 	udiv	r3, r3, r8
    e4a4:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    e4a6:	4bc2      	ldr	r3, [pc, #776]	; (e7b0 <isr+0x6f8>)
    e4a8:	4443      	add	r3, r8
    e4aa:	fbb3 f3f8 	udiv	r3, r3, r8
    e4ae:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e4b2:	4bc0      	ldr	r3, [pc, #768]	; (e7b4 <isr+0x6fc>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e4b4:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e4b6:	4443      	add	r3, r8
    e4b8:	fbb3 f3f8 	udiv	r3, r3, r8
    e4bc:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e4be:	4282      	cmp	r2, r0
    e4c0:	4613      	mov	r3, r2
    e4c2:	bfc4      	itt	gt
    e4c4:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    e4c8:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    e4ca:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e4ce:	bfc4      	itt	gt
    e4d0:	18d2      	addgt	r2, r2, r3
    e4d2:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    e4d4:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    e4d6:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e4da:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    e4dc:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    e4de:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    e4e0:	2300      	movs	r3, #0
    e4e2:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    e4e4:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e4e6:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    e4ea:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e4ec:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    e4f0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    e4f4:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    e4f6:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    e4fa:	464a      	mov	r2, r9
    e4fc:	f107 001b 	add.w	r0, r7, #27
    e500:	f7f2 f86e 	bl	5e0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    e504:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e508:	f107 030e 	add.w	r3, r7, #14
    e50c:	28ff      	cmp	r0, #255	; 0xff
    e50e:	930b      	str	r3, [sp, #44]	; 0x2c
    e510:	f106 0a02 	add.w	sl, r6, #2
    e514:	f107 0b14 	add.w	fp, r7, #20
    e518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e51a:	f000 8138 	beq.w	e78e <isr+0x6d6>
			ll_rl_id_addr_get(rl_idx,
    e51e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e520:	f107 010d 	add.w	r1, r7, #13
    e524:	f003 fbca 	bl	11cbc <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    e528:	7b7b      	ldrb	r3, [r7, #13]
    e52a:	3302      	adds	r3, #2
    e52c:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    e52e:	464a      	mov	r2, r9
    e530:	4651      	mov	r1, sl
    e532:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e534:	f7f2 f854 	bl	5e0 <memcpy>
			pdu_adv->connect_ind.interval;
    e538:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    e53a:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    e53e:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    e540:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    e544:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    e546:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    e54a:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    e54e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    e552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    e556:	8c28      	ldrh	r0, [r5, #32]
    e558:	f7fc fb8a 	bl	ac70 <rx_fc_lock>
		packet_rx_enqueue();
    e55c:	f7fc fc3a 	bl	add4 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    e560:	2003      	movs	r0, #3
    e562:	f7fb fd6d 	bl	a040 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    e566:	2800      	cmp	r0, #0
    e568:	f43f adfe 	beq.w	e168 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    e56c:	8c2b      	ldrh	r3, [r5, #32]
    e56e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    e570:	230b      	movs	r3, #11
    e572:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    e574:	7833      	ldrb	r3, [r6, #0]
    e576:	f013 0320 	ands.w	r3, r3, #32
    e57a:	d00e      	beq.n	e59a <isr+0x4e2>
					((u16_t)conn->access_addr[1] << 8) |
    e57c:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    e57e:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    e580:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    e582:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    e586:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    e588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    e58c:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    e58e:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    e590:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    e594:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    e596:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    e598:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    e59a:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    e59c:	f7fc fc1a 	bl	add4 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e5a0:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    e5a4:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e5a8:	4983      	ldr	r1, [pc, #524]	; (e7b8 <isr+0x700>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    e5aa:	0952      	lsrs	r2, r2, #5
    e5ac:	f362 0384 	bfi	r3, r2, #2, #3
    e5b0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    e5b4:	f894 3d08 	ldrb.w	r3, [r4, #3336]	; 0xd08
			   gc_lookup_ppm[conn->slave.sca]) *
    e5b8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    e5bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e5c0:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    e5c2:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    e5c6:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    e5ca:	4a7c      	ldr	r2, [pc, #496]	; (e7bc <isr+0x704>)
    e5cc:	f203 233f 	addw	r3, r3, #575	; 0x23f
    e5d0:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    e5d4:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    e5d6:	ea4f 0358 	mov.w	r3, r8, lsr #1
    e5da:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    e5dc:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    e5de:	7d73      	ldrb	r3, [r6, #21]
    e5e0:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    e5e4:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    e5e6:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    e5ea:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e5ec:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    e5ee:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e5f0:	4638      	mov	r0, r7
    e5f2:	f004 f9ee 	bl	129d2 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e5f6:	4972      	ldr	r1, [pc, #456]	; (e7c0 <isr+0x708>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    e5f8:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e5fa:	f200 4052 	addw	r0, r0, #1106	; 0x452
    e5fe:	a36a      	add	r3, pc, #424	; (adr r3, e7a8 <isr+0x6f0>)
    e600:	e9d3 2300 	ldrd	r2, r3, [r3]
    e604:	fba0 0101 	umull	r0, r1, r0, r1
    e608:	f7f1 fe2e 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    e60c:	f8d4 3d6c 	ldr.w	r3, [r4, #3436]	; 0xd6c
    e610:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    e612:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset =
    e614:	4293      	cmp	r3, r2
    e616:	bf38      	it	cc
    e618:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    e61a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset =
    e61e:	469a      	mov	sl, r3
		conn_interval_us -=
    e620:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    e622:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    e624:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    e626:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    e628:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    e62c:	f004 fbc2 	bl	12db4 <radio_tmr_end_get>
    e630:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    e632:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e634:	4639      	mov	r1, r7
		conn_offset_us +=
    e636:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    e63a:	4638      	mov	r0, r7
    e63c:	f004 f9c7 	bl	129ce <radio_tx_chain_delay_get>
    e640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e642:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    e646:	4499      	add	r9, r3
    e648:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    e64c:	eba9 030b 	sub.w	r3, r9, fp
    e650:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e652:	f240 532d 	movw	r3, #1325	; 0x52d
    e656:	9300      	str	r3, [sp, #0]
    e658:	2205      	movs	r2, #5
    e65a:	4b5a      	ldr	r3, [pc, #360]	; (e7c4 <isr+0x70c>)
    e65c:	f8df b160 	ldr.w	fp, [pc, #352]	; e7c0 <isr+0x708>
    e660:	4639      	mov	r1, r7
    e662:	4638      	mov	r0, r7
    e664:	f7f9 ffa2 	bl	85ac <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    e668:	f240 512e 	movw	r1, #1326	; 0x52e
    e66c:	f7fc fdc8 	bl	b200 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    e670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e672:	5ce3      	ldrb	r3, [r4, r3]
    e674:	f003 030f 	and.w	r3, r3, #15
    e678:	2b01      	cmp	r3, #1
    e67a:	d106      	bne.n	e68a <isr+0x5d2>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    e67c:	9700      	str	r7, [sp, #0]
    e67e:	463b      	mov	r3, r7
    e680:	2203      	movs	r2, #3
    e682:	4639      	mov	r1, r7
    e684:	4638      	mov	r0, r7
    e686:	f7f9 ff91 	bl	85ac <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e68a:	fba8 890b 	umull	r8, r9, r8, fp
    e68e:	a346      	add	r3, pc, #280	; (adr r3, e7a8 <isr+0x6f0>)
    e690:	e9d3 2300 	ldrd	r2, r3, [r3]
    e694:	4640      	mov	r0, r8
    e696:	4649      	mov	r1, r9
    e698:	f7f1 fde6 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e69c:	f895 3020 	ldrb.w	r3, [r5, #32]
    e6a0:	68a4      	ldr	r4, [r4, #8]
    e6a2:	9506      	str	r5, [sp, #24]
    e6a4:	3307      	adds	r3, #7
    e6a6:	b2db      	uxtb	r3, r3
    e6a8:	930a      	str	r3, [sp, #40]	; 0x28
    e6aa:	f240 5345 	movw	r3, #1349	; 0x545
    e6ae:	9308      	str	r3, [sp, #32]
    e6b0:	4b45      	ldr	r3, [pc, #276]	; (e7c8 <isr+0x710>)
    e6b2:	9307      	str	r3, [sp, #28]
    e6b4:	4b45      	ldr	r3, [pc, #276]	; (e7cc <isr+0x714>)
    e6b6:	9305      	str	r3, [sp, #20]
    e6b8:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e6ba:	4a45      	ldr	r2, [pc, #276]	; (e7d0 <isr+0x718>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6bc:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    e6be:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6c0:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e6c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e6c6:	2307      	movs	r3, #7
    e6c8:	2100      	movs	r1, #0
    e6ca:	4343      	muls	r3, r0
    e6cc:	fb02 3301 	mla	r3, r2, r1, r3
    e6d0:	fba0 1202 	umull	r1, r2, r0, r2
    e6d4:	441a      	add	r2, r3
    e6d6:	4608      	mov	r0, r1
    e6d8:	ebb8 0000 	subs.w	r0, r8, r0
    e6dc:	4611      	mov	r1, r2
    e6de:	f04f 0300 	mov.w	r3, #0
    e6e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e6e6:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6ea:	2500      	movs	r5, #0
    e6ec:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    e6ee:	f7f1 fdbb 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e6f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6f4:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e6f6:	a32c      	add	r3, pc, #176	; (adr r3, e7a8 <isr+0x6f0>)
    e6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e6fc:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e700:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e704:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    e706:	f7f1 fdaf 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    e70a:	eba4 040a 	sub.w	r4, r4, sl
    e70e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e714:	9000      	str	r0, [sp, #0]
    e716:	4623      	mov	r3, r4
		ticker_status =
    e718:	4629      	mov	r1, r5
    e71a:	4628      	mov	r0, r5
    e71c:	f7f9 fea8 	bl	8470 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    e720:	f030 0302 	bics.w	r3, r0, #2
    e724:	f47f ad20 	bne.w	e168 <isr+0xb0>
    e728:	e56e      	b.n	e208 <isr+0x150>
	return (adv->rx_addr == ci->tx_addr) &&
    e72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e72c:	5ce2      	ldrb	r2, [r4, r3]
    e72e:	7833      	ldrb	r3, [r6, #0]
    e730:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e734:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e738:	f47f adfd 	bne.w	e336 <isr+0x27e>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    e73c:	2206      	movs	r2, #6
    e73e:	4639      	mov	r1, r7
    e740:	f105 0008 	add.w	r0, r5, #8
    e744:	f7f1 ff37 	bl	5b6 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    e748:	fab0 f080 	clz	r0, r0
    e74c:	0940      	lsrs	r0, r0, #5
    e74e:	e63d      	b.n	e3cc <isr+0x314>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e750:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e754:	079a      	lsls	r2, r3, #30
    e756:	d50d      	bpl.n	e774 <isr+0x6bc>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e758:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
    e75c:	079b      	lsls	r3, r3, #30
    e75e:	f57f adea 	bpl.w	e336 <isr+0x27e>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    e762:	f1b8 0f00 	cmp.w	r8, #0
    e766:	d10d      	bne.n	e784 <isr+0x6cc>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    e768:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    e76c:	f003 f96c 	bl	11a48 <ctrl_irk_whitelisted>
    e770:	b940      	cbnz	r0, e784 <isr+0x6cc>
    e772:	e5e0      	b.n	e336 <isr+0x27e>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    e774:	aa10      	add	r2, sp, #64	; 0x40
    e776:	1cb1      	adds	r1, r6, #2
    e778:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e77c:	f003 fabe 	bl	11cfc <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    e780:	2800      	cmp	r0, #0
    e782:	d0e9      	beq.n	e758 <isr+0x6a0>
	       isr_adv_ci_adva_check(adv, ci);
    e784:	4631      	mov	r1, r6
    e786:	4628      	mov	r0, r5
    e788:	f7fc fa02 	bl	ab90 <isr_adv_ci_adva_check>
    e78c:	e61e      	b.n	e3cc <isr+0x314>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    e78e:	4619      	mov	r1, r3
    e790:	464a      	mov	r2, r9
    e792:	4658      	mov	r0, fp
    e794:	f7f1 ff50 	bl	638 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e798:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e79a:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    e79c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e7a0:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    e7a2:	464a      	mov	r2, r9
    e7a4:	4651      	mov	r1, sl
    e7a6:	e6c5      	b.n	e534 <isr+0x47c>
    e7a8:	1afd498d 	.word	0x1afd498d
    e7ac:	00000007 	.word	0x00000007
    e7b0:	026259ff 	.word	0x026259ff
    e7b4:	01c9c37f 	.word	0x01c9c37f
    e7b8:	00014d6a 	.word	0x00014d6a
    e7bc:	000f4240 	.word	0x000f4240
    e7c0:	3b9aca00 	.word	0x3b9aca00
    e7c4:	0000b201 	.word	0x0000b201
    e7c8:	0000b231 	.word	0x0000b231
    e7cc:	0000c9c5 	.word	0x0000c9c5
    e7d0:	1afd498d 	.word	0x1afd498d
		rl_idx = devmatch_ok ?
    e7d4:	f1b8 0f00 	cmp.w	r8, #0
    e7d8:	d01c      	beq.n	e814 <isr+0x75c>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    e7da:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
		rl_idx = devmatch_ok ?
    e7de:	4649      	mov	r1, r9
    e7e0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    e7e4:	f003 f8f4 	bl	119d0 <ctrl_rl_idx>
    e7e8:	4681      	mov	r9, r0
		if (crc_ok &&
    e7ea:	b147      	cbz	r7, e7fe <isr+0x746>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    e7ec:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    e7f0:	06df      	lsls	r7, r3, #27
    e7f2:	d519      	bpl.n	e828 <isr+0x770>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    e7f4:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    e7f8:	06de      	lsls	r6, r3, #27
    e7fa:	f100 8271 	bmi.w	ece0 <isr+0xc28>
			_radio.state = STATE_CLOSE;
    e7fe:	2303      	movs	r3, #3
    e800:	7523      	strb	r3, [r4, #20]
			radio_disable();
    e802:	f004 f903 	bl	12a0c <radio_disable>
			_radio.scanner.state = 0;
    e806:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    e80a:	f36f 0341 	bfc	r3, #1, #1
    e80e:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
    e812:	e4f9      	b.n	e208 <isr+0x150>
		rl_idx = devmatch_ok ?
    e814:	f1ba 0f00 	cmp.w	sl, #0
    e818:	d003      	beq.n	e822 <isr+0x76a>
    e81a:	4658      	mov	r0, fp
    e81c:	f003 f8f8 	bl	11a10 <ctrl_rl_irk_idx>
    e820:	e7e2      	b.n	e7e8 <isr+0x730>
    e822:	f04f 09ff 	mov.w	r9, #255	; 0xff
    e826:	e7e0      	b.n	e7ea <isr+0x732>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    e828:	f1b8 0f00 	cmp.w	r8, #0
    e82c:	d005      	beq.n	e83a <isr+0x782>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    e82e:	4649      	mov	r1, r9
    e830:	4650      	mov	r0, sl
    e832:	f003 fa25 	bl	11c80 <ctrl_rl_idx_allowed>
    e836:	2800      	cmp	r0, #0
    e838:	d0dc      	beq.n	e7f4 <isr+0x73c>
	bool dir_report = false;
    e83a:	2300      	movs	r3, #0
    e83c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    e840:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
    e844:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
    e848:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    e84c:	7a3b      	ldrb	r3, [r7, #8]
    e84e:	f003 030f 	and.w	r3, r3, #15
    e852:	2b07      	cmp	r3, #7
    e854:	f040 8082 	bne.w	e95c <isr+0x8a4>
		if(h->adv_addr){
    e858:	7afb      	ldrb	r3, [r7, #11]
    e85a:	f8df 8350 	ldr.w	r8, [pc, #848]	; ebac <isr+0xaf4>
    e85e:	07d8      	lsls	r0, r3, #31
			ptr += BDADDR_SIZE;
    e860:	bf4c      	ite	mi
    e862:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    e866:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
    e86a:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    e86c:	bf48      	it	mi
    e86e:	3606      	addmi	r6, #6
		if(h->adi){
    e870:	f013 0f08 	tst.w	r3, #8
			sid = (u8_t)adi_ptr->sid;
    e874:	bf1e      	ittt	ne
    e876:	7873      	ldrbne	r3, [r6, #1]
    e878:	f3c3 1303 	ubfxne	r3, r3, #4, #4
    e87c:	f888 3000 	strbne.w	r3, [r8]
		if(sid == 0x04){
    e880:	f898 3000 	ldrb.w	r3, [r8]
			ptr += sizeof(*adi_ptr);
    e884:	bf18      	it	ne
    e886:	3602      	addne	r6, #2
		if(sid == 0x04){
    e888:	2b04      	cmp	r3, #4
    e88a:	d11d      	bne.n	e8c8 <isr+0x810>
			stop_time_int = k_cycle_get_32();
    e88c:	f7f3 f90a 	bl	1aa4 <_timer_cycle_get_32>
    e890:	4bbb      	ldr	r3, [pc, #748]	; (eb80 <isr+0xac8>)
    e892:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
    e894:	4bbb      	ldr	r3, [pc, #748]	; (eb84 <isr+0xacc>)
    e896:	681b      	ldr	r3, [r3, #0]
    e898:	eba0 0e03 	sub.w	lr, r0, r3
    e89c:	4bba      	ldr	r3, [pc, #744]	; (eb88 <isr+0xad0>)
    e89e:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
    e8a2:	4bba      	ldr	r3, [pc, #744]	; (eb8c <isr+0xad4>)
    e8a4:	681a      	ldr	r2, [r3, #0]
    e8a6:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    e8aa:	fb82 230b 	smull	r2, r3, r2, fp
    e8ae:	fba2 010e 	umull	r0, r1, r2, lr
    e8b2:	fb0e 1103 	mla	r1, lr, r3, r1
    e8b6:	4bb6      	ldr	r3, [pc, #728]	; (eb90 <isr+0xad8>)
    e8b8:	681a      	ldr	r2, [r3, #0]
    e8ba:	17d3      	asrs	r3, r2, #31
    e8bc:	f7f1 fcd4 	bl	268 <__aeabi_uldivmod>
    e8c0:	4bb4      	ldr	r3, [pc, #720]	; (eb94 <isr+0xadc>)
    e8c2:	fbb0 f0fb 	udiv	r0, r0, fp
    e8c6:	6018      	str	r0, [r3, #0]
		if((h->aux_ptr && !aux_scan && (sid == 0x02)) || 
    e8c8:	7afb      	ldrb	r3, [r7, #11]
    e8ca:	f013 0310 	ands.w	r3, r3, #16
    e8ce:	d006      	beq.n	e8de <isr+0x826>
    e8d0:	4ab1      	ldr	r2, [pc, #708]	; (eb98 <isr+0xae0>)
    e8d2:	7812      	ldrb	r2, [r2, #0]
    e8d4:	b91a      	cbnz	r2, e8de <isr+0x826>
    e8d6:	f898 2000 	ldrb.w	r2, [r8]
    e8da:	2a02      	cmp	r2, #2
    e8dc:	d005      	beq.n	e8ea <isr+0x832>
    e8de:	f898 2000 	ldrb.w	r2, [r8]
    e8e2:	2a04      	cmp	r2, #4
    e8e4:	d13a      	bne.n	e95c <isr+0x8a4>
			((sid == 0x04) && h->aux_ptr)){
    e8e6:	2b00      	cmp	r3, #0
    e8e8:	d038      	beq.n	e95c <isr+0x8a4>
			aux_scan = 0x01;
    e8ea:	4bab      	ldr	r3, [pc, #684]	; (eb98 <isr+0xae0>)
    e8ec:	2201      	movs	r2, #1
    e8ee:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
    e8f0:	7833      	ldrb	r3, [r6, #0]
    e8f2:	f3c3 0305 	ubfx	r3, r3, #0, #6
    e8f6:	f884 3c90 	strb.w	r3, [r4, #3216]	; 0xc90
			_radio.ext_scanner.chan_off	= ap->offs;
    e8fa:	78b3      	ldrb	r3, [r6, #2]
    e8fc:	7870      	ldrb	r0, [r6, #1]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    e8fe:	7832      	ldrb	r2, [r6, #0]
			_radio.ext_scanner.chan_off	= ap->offs;
    e900:	f003 031f 	and.w	r3, r3, #31
    e904:	ea40 2e03 	orr.w	lr, r0, r3, lsl #8
			_radio.ext_scanner.off_unit	= ap->offs_units;
    e908:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			_radio.ext_scanner.chan_off	= ap->offs;
    e90c:	4ba3      	ldr	r3, [pc, #652]	; (eb9c <isr+0xae4>)
			_radio.ext_scanner.off_unit	= ap->offs_units;
    e90e:	f884 2cb4 	strb.w	r2, [r4, #3252]	; 0xcb4
			_radio.ext_scanner.chan_off	= ap->offs;
    e912:	fa1f f08e 	uxth.w	r0, lr
			if(_radio.ext_scanner.off_unit == 0 ){
    e916:	f012 0fff 	tst.w	r2, #255	; 0xff
			_radio.ext_scanner.chan_off	= ap->offs;
    e91a:	f04f 0100 	mov.w	r1, #0
    e91e:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
    e922:	e9c3 0102 	strd	r0, r1, [r3, #8]
				_radio.ext_scanner.chan_off *= 30;
    e926:	bf0b      	itete	eq
    e928:	221e      	moveq	r2, #30
				_radio.ext_scanner.chan_off *= 300;
    e92a:	f44f 7096 	movne.w	r0, #300	; 0x12c
				_radio.ext_scanner.chan_off *= 30;
    e92e:	fbae 0102 	umulleq	r0, r1, lr, r2
				_radio.ext_scanner.chan_off *= 300;
    e932:	fbae 0100 	umullne	r0, r1, lr, r0
    e936:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    e93a:	e9d3 0100 	ldrd	r0, r1, [r3]
    e93e:	4b98      	ldr	r3, [pc, #608]	; (eba0 <isr+0xae8>)
    e940:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
    e944:	f7f3 f8ae 	bl	1aa4 <_timer_cycle_get_32>
    e948:	4b96      	ldr	r3, [pc, #600]	; (eba4 <isr+0xaec>)
    e94a:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
    e94c:	f7f3 f8aa 	bl	1aa4 <_timer_cycle_get_32>
    e950:	4b8c      	ldr	r3, [pc, #560]	; (eb84 <isr+0xacc>)
    e952:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
    e954:	f7f9 fefa 	bl	874c <ticker_ticks_now_get>
    e958:	f8c4 0cec 	str.w	r0, [r4, #3308]	; 0xcec
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    e95c:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    e960:	f107 0608 	add.w	r6, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    e964:	2b00      	cmp	r3, #0
    e966:	f000 81d4 	beq.w	ed12 <isr+0xc5a>
    e96a:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
    e96e:	b133      	cbz	r3, e97e <isr+0x8c6>
				      (_radio.fc_req == _radio.fc_ack)) &&
    e970:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    e974:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
    e978:	429a      	cmp	r2, r3
    e97a:	f040 81ca 	bne.w	ed12 <isr+0xc5a>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    e97e:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    e982:	f3c3 1000 	ubfx	r0, r3, #4, #1
    e986:	2800      	cmp	r0, #0
    e988:	f000 81b5 	beq.w	ecf6 <isr+0xc3e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    e98c:	7a38      	ldrb	r0, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    e98e:	f010 000f 	ands.w	r0, r0, #15
    e992:	f040 81f3 	bne.w	ed7c <isr+0xcc4>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    e996:	f004 fa0d 	bl	12db4 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    e99a:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    e99e:	f200 2816 	addw	r8, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    e9a2:	4881      	ldr	r0, [pc, #516]	; (eba8 <isr+0xaf0>)
    e9a4:	2207      	movs	r2, #7
    e9a6:	fba3 0100 	umull	r0, r1, r3, r0
    e9aa:	fb02 1103 	mla	r1, r2, r3, r1
    e9ae:	a372      	add	r3, pc, #456	; (adr r3, eb78 <isr+0xac0>)
    e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9b4:	f7f1 fc58 	bl	268 <__aeabi_uldivmod>
    e9b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    e9bc:	4580      	cmp	r8, r0
    e9be:	f080 81a8 	bcs.w	ed12 <isr+0xc5a>
			node_rx = packet_rx_reserve_get(4);
    e9c2:	2004      	movs	r0, #4
    e9c4:	f7fb fb3c 	bl	a040 <packet_rx_reserve_get>
		if (node_rx == 0) {
    e9c8:	4680      	mov	r8, r0
    e9ca:	2800      	cmp	r0, #0
    e9cc:	f43f af17 	beq.w	e7fe <isr+0x746>
		_radio.state = STATE_STOP;
    e9d0:	2304      	movs	r3, #4
    e9d2:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    e9d4:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    e9d6:	f8d4 6c54 	ldr.w	r6, [r4, #3156]	; 0xc54
		_radio.scanner.conn = NULL;
    e9da:	f8c4 3c54 	str.w	r3, [r4, #3156]	; 0xc54
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    e9de:	f004 f86b 	bl	12ab8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    e9e2:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    e9e4:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    e9e8:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    e9ec:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    e9ee:	7a3b      	ldrb	r3, [r7, #8]
    e9f0:	7802      	ldrb	r2, [r0, #0]
    e9f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e9f6:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    e9fa:	2322      	movs	r3, #34	; 0x22
    e9fc:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    e9fe:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ea00:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    ea02:	4648      	mov	r0, r9
    ea04:	f002 ffc6 	bl	11994 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ea08:	f894 3c2e 	ldrb.w	r3, [r4, #3118]	; 0xc2e
		lrpa = ctrl_lrpa_get(rl_idx);
    ea0c:	4601      	mov	r1, r0
    ea0e:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ea10:	f013 0f01 	tst.w	r3, #1
    ea14:	f810 3b02 	ldrb.w	r3, [r0], #2
    ea18:	f000 81ba 	beq.w	ed90 <isr+0xcd8>
    ea1c:	2900      	cmp	r1, #0
    ea1e:	f000 81b7 	beq.w	ed90 <isr+0xcd8>
			pdu_adv_tx->tx_addr = 1;
    ea22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ea26:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ea28:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ea2a:	f7f1 fdd9 	bl	5e0 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    ea2e:	f105 0308 	add.w	r3, r5, #8
    ea32:	4618      	mov	r0, r3
    ea34:	2206      	movs	r2, #6
    ea36:	f107 010a 	add.w	r1, r7, #10
    ea3a:	930a      	str	r3, [sp, #40]	; 0x28
    ea3c:	f7f1 fdd0 	bl	5e0 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    ea40:	2204      	movs	r2, #4
    ea42:	f106 0110 	add.w	r1, r6, #16
    ea46:	f105 000e 	add.w	r0, r5, #14
    ea4a:	f7f1 fdc9 	bl	5e0 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    ea4e:	2203      	movs	r2, #3
    ea50:	f106 0114 	add.w	r1, r6, #20
    ea54:	f105 0012 	add.w	r0, r5, #18
    ea58:	f7f1 fdc2 	bl	5e0 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    ea5c:	2301      	movs	r3, #1
    ea5e:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    ea60:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
		conn_interval_us =
    ea64:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ea68:	4353      	muls	r3, r2
    ea6a:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ea6c:	f004 f9a2 	bl	12db4 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    ea70:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    ea72:	f8d4 bc58 	ldr.w	fp, [r4, #3160]	; 0xc58
		if (!_radio.remainder_anchor ||
    ea76:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    ea78:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    ea7c:	bfd8      	it	le
    ea7e:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    ea82:	f1bb 0f00 	cmp.w	fp, #0
    ea86:	f040 818e 	bne.w	eda6 <isr+0xcee>
			pdu_adv_tx->connect_ind.win_offset = 0;
    ea8a:	f885 b016 	strb.w	fp, [r5, #22]
    ea8e:	f885 b017 	strb.w	fp, [r5, #23]
    ea92:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ea94:	2100      	movs	r1, #0
    ea96:	4608      	mov	r0, r1
    ea98:	f003 ff90 	bl	129bc <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    ea9c:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    ea9e:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    eaa2:	4608      	mov	r0, r1
    eaa4:	f003 ff93 	bl	129ce <radio_tx_chain_delay_get>
    eaa8:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    eaac:	f100 031e 	add.w	r3, r0, #30
    eab0:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
    eab2:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
    eab6:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    eab8:	f8b4 3c4a 	ldrh.w	r3, [r4, #3146]	; 0xc4a
    eabc:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    eabe:	f8b4 3c4c 	ldrh.w	r3, [r4, #3148]	; 0xc4c
    eac2:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    eac4:	f106 0117 	add.w	r1, r6, #23
    eac8:	2205      	movs	r2, #5
    eaca:	f105 001e 	add.w	r0, r5, #30
    eace:	f7f1 fd87 	bl	5e0 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    ead2:	7fb2      	ldrb	r2, [r6, #30]
    ead4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ead8:	f362 0304 	bfi	r3, r2, #0, #5
    eadc:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    eae0:	f894 2d08 	ldrb.w	r2, [r4, #3336]	; 0xd08
    eae4:	f362 1347 	bfi	r3, r2, #5, #3
    eae8:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    eaec:	f003 fffe 	bl	12aec <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    eaf0:	4628      	mov	r0, r5
    eaf2:	f003 ff5d 	bl	129b0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    eaf6:	f003 ffa7 	bl	12a48 <radio_is_ready>
    eafa:	4683      	mov	fp, r0
    eafc:	2800      	cmp	r0, #0
    eafe:	f47f ab33 	bne.w	e168 <isr+0xb0>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    eb02:	f44f 72aa 	mov.w	r2, #340	; 0x154
    eb06:	f8d4 1cf0 	ldr.w	r1, [r4, #3312]	; 0xcf0
    eb0a:	4630      	mov	r0, r6
    eb0c:	f7f8 fe73 	bl	77f6 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    eb10:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    eb12:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb14:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
    eb18:	f888 b00b 	strb.w	fp, [r8, #11]
		radio_le_conn_cmplt->role = 0x00;
    eb1c:	f888 b00c 	strb.w	fp, [r8, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    eb20:	f888 3004 	strb.w	r3, [r8, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    eb24:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    eb28:	f8a8 0006 	strh.w	r0, [r8, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    eb2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eb30:	f888 301a 	strb.w	r3, [r8, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    eb34:	2206      	movs	r2, #6
    eb36:	f108 001b 	add.w	r0, r8, #27
    eb3a:	f7f1 fd51 	bl	5e0 <memcpy>
    eb3e:	f108 0b0e 	add.w	fp, r8, #14
    eb42:	f108 0314 	add.w	r3, r8, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    eb46:	f1ba 0f00 	cmp.w	sl, #0
    eb4a:	f000 813c 	beq.w	edc6 <isr+0xd0e>
    eb4e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    eb52:	f000 8138 	beq.w	edc6 <isr+0xd0e>
			ll_rl_id_addr_get(rl_idx,
    eb56:	465a      	mov	r2, fp
    eb58:	f108 010d 	add.w	r1, r8, #13
    eb5c:	4648      	mov	r0, r9
    eb5e:	930d      	str	r3, [sp, #52]	; 0x34
    eb60:	f003 f8ac 	bl	11cbc <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    eb64:	f898 200d 	ldrb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    eb68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    eb6a:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
    eb6c:	3202      	adds	r2, #2
    eb6e:	f888 200d 	strb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    eb72:	4618      	mov	r0, r3
    eb74:	2206      	movs	r2, #6
    eb76:	e01b      	b.n	ebb0 <isr+0xaf8>
    eb78:	3b9aca00 	.word	0x3b9aca00
    eb7c:	00000000 	.word	0x00000000
    eb80:	20003e90 	.word	0x20003e90
    eb84:	20003e04 	.word	0x20003e04
    eb88:	20003ec4 	.word	0x20003ec4
    eb8c:	2000cfe0 	.word	0x2000cfe0
    eb90:	2000cfdc 	.word	0x2000cfdc
    eb94:	20003eec 	.word	0x20003eec
    eb98:	20001658 	.word	0x20001658
    eb9c:	20001578 	.word	0x20001578
    eba0:	20001588 	.word	0x20001588
    eba4:	20003ebc 	.word	0x20003ebc
    eba8:	1afd498d 	.word	0x1afd498d
    ebac:	20003eb0 	.word	0x20003eb0
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    ebb0:	f7f1 fd16 	bl	5e0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    ebb4:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
    ebb8:	f8a8 3021 	strh.w	r3, [r8, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    ebbc:	f8b4 3c4a 	ldrh.w	r3, [r4, #3146]	; 0xc4a
    ebc0:	f8a8 3023 	strh.w	r3, [r8, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    ebc4:	f8b4 3c4c 	ldrh.w	r3, [r4, #3148]	; 0xc4c
    ebc8:	f8a8 3025 	strh.w	r3, [r8, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    ebcc:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    ebd0:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    ebd4:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
		rx_fc_lock(conn->handle);
    ebd8:	8c30      	ldrh	r0, [r6, #32]
    ebda:	f7fc f849 	bl	ac70 <rx_fc_lock>
		packet_rx_enqueue();
    ebde:	f7fc f8f9 	bl	add4 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    ebe2:	2003      	movs	r0, #3
    ebe4:	f7fb fa2c 	bl	a040 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    ebe8:	2800      	cmp	r0, #0
    ebea:	f43f aabd 	beq.w	e168 <isr+0xb0>
			node_rx->hdr.handle = conn->handle;
    ebee:	8c33      	ldrh	r3, [r6, #32]
    ebf0:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    ebf2:	230b      	movs	r3, #11
    ebf4:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    ebf6:	7a3b      	ldrb	r3, [r7, #8]
    ebf8:	f013 0320 	ands.w	r3, r3, #32
    ebfc:	d00e      	beq.n	ec1c <isr+0xb64>
					((u16_t)conn->access_addr[1] << 8) |
    ebfe:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    ec00:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    ec02:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    ec04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    ec08:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    ec0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    ec0e:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    ec10:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    ec12:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    ec16:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    ec18:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    ec1a:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    ec1c:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    ec1e:	f7fc f8d9 	bl	add4 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ec22:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ec24:	f8d4 7d6c 	ldr.w	r7, [r4, #3436]	; 0xd6c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    ec28:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    ec2a:	f8d4 3c50 	ldr.w	r3, [r4, #3152]	; 0xc50
    ec2e:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ec30:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec32:	f44f 63ef 	mov.w	r3, #1912	; 0x778
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    ec36:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    ec38:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec3a:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    ec3e:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec40:	4629      	mov	r1, r5
    ec42:	9300      	str	r3, [sp, #0]
    ec44:	4628      	mov	r0, r5
    ec46:	4bb6      	ldr	r3, [pc, #728]	; (ef20 <isr+0xe68>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ec48:	f8df a2e8 	ldr.w	sl, [pc, #744]	; ef34 <isr+0xe7c>
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    ec4c:	bf38      	it	cc
    ec4e:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec50:	f7f9 fcac 	bl	85ac <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    ec54:	f240 7179 	movw	r1, #1913	; 0x779
    ec58:	f7fc faba 	bl	b1d0 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec5c:	462b      	mov	r3, r5
    ec5e:	2204      	movs	r2, #4
    ec60:	4629      	mov	r1, r5
    ec62:	9500      	str	r5, [sp, #0]
    ec64:	4628      	mov	r0, r5
    ec66:	f7f9 fca1 	bl	85ac <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ec6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec6c:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec70:	68a3      	ldr	r3, [r4, #8]
    ec72:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    ec76:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec78:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    ec7c:	f44f 63f2 	mov.w	r3, #1936	; 0x790
    ec80:	9308      	str	r3, [sp, #32]
    ec82:	4ba8      	ldr	r3, [pc, #672]	; (ef24 <isr+0xe6c>)
    ec84:	9307      	str	r3, [sp, #28]
    ec86:	4ba8      	ldr	r3, [pc, #672]	; (ef28 <isr+0xe70>)
    ec88:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec8a:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    ec8c:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ec8e:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ec90:	4640      	mov	r0, r8
    ec92:	a3a1      	add	r3, pc, #644	; (adr r3, ef18 <isr+0xe60>)
    ec94:	e9d3 2300 	ldrd	r2, r3, [r3]
    ec98:	4649      	mov	r1, r9
		ticker_status =
    ec9a:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    ec9c:	f7f1 fae4 	bl	268 <__aeabi_uldivmod>
    eca0:	4610      	mov	r0, r2
    eca2:	4619      	mov	r1, r3
    eca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eca8:	2300      	movs	r3, #0
    ecaa:	f7f1 fadd 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ecae:	a39a      	add	r3, pc, #616	; (adr r3, ef18 <isr+0xe60>)
    ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ecb4:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ecb6:	4649      	mov	r1, r9
    ecb8:	4640      	mov	r0, r8
    ecba:	f7f1 fad5 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    ecbe:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    ecc0:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    ecc2:	a395      	add	r3, pc, #596	; (adr r3, ef18 <isr+0xe60>)
    ecc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    ecc8:	fba1 010a 	umull	r0, r1, r1, sl
    eccc:	f7f1 facc 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ecd0:	3407      	adds	r4, #7
		ticker_status =
    ecd2:	b2e4      	uxtb	r4, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ecd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    ecd8:	9000      	str	r0, [sp, #0]
    ecda:	465b      	mov	r3, fp
    ecdc:	4622      	mov	r2, r4
    ecde:	e51b      	b.n	e718 <isr+0x660>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    ece0:	f1b8 0f00 	cmp.w	r8, #0
    ece4:	f47f ada9 	bne.w	e83a <isr+0x782>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    ece8:	4648      	mov	r0, r9
    ecea:	f002 fead 	bl	11a48 <ctrl_irk_whitelisted>
		if (crc_ok &&
    ecee:	2800      	cmp	r0, #0
    ecf0:	f43f ad85 	beq.w	e7fe <isr+0x746>
    ecf4:	e5a1      	b.n	e83a <isr+0x782>
	if (rl_idx != FILTER_IDX_NONE) {
    ecf6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    ecfa:	d02e      	beq.n	ed5a <isr+0xca2>
		return (rl_idx == _radio.scanner.rl_idx);
    ecfc:	f894 0c2f 	ldrb.w	r0, [r4, #3119]	; 0xc2f
    ed00:	eba0 0e09 	sub.w	lr, r0, r9
    ed04:	f1de 0000 	rsbs	r0, lr, #0
    ed08:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    ed0c:	2800      	cmp	r0, #0
    ed0e:	f47f ae3d 	bne.w	e98c <isr+0x8d4>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    ed12:	7a38      	ldrb	r0, [r7, #8]
    ed14:	f010 000f 	ands.w	r0, r0, #15
    ed18:	d065      	beq.n	ede6 <isr+0xd2e>
    ed1a:	2807      	cmp	r0, #7
    ed1c:	d161      	bne.n	ede2 <isr+0xd2a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    ed1e:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
    ed22:	075a      	lsls	r2, r3, #29
    ed24:	d15f      	bne.n	ede6 <isr+0xd2e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    ed26:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    ed28:	f003 020b 	and.w	r2, r3, #11
    ed2c:	2a02      	cmp	r2, #2
    ed2e:	f040 80cd 	bne.w	eecc <isr+0xe14>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    ed32:	7a7b      	ldrb	r3, [r7, #9]
    ed34:	2b00      	cmp	r3, #0
    ed36:	f43f ad62 	beq.w	e7fe <isr+0x746>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    ed3a:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
    ed3e:	2b00      	cmp	r3, #0
    ed40:	f47f ad5d 	bne.w	e7fe <isr+0x746>
		err = isr_rx_scan_report(rssi_ready,
    ed44:	f1ba 0f00 	cmp.w	sl, #0
    ed48:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    ed4c:	bf14      	ite	ne
    ed4e:	4649      	movne	r1, r9
    ed50:	21ff      	moveq	r1, #255	; 0xff
    ed52:	4628      	mov	r0, r5
    ed54:	f7fc f886 	bl	ae64 <isr_rx_scan_report>
    ed58:	e551      	b.n	e7fe <isr+0x746>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    ed5a:	7a3a      	ldrb	r2, [r7, #8]
    ed5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ed60:	f3c2 1280 	ubfx	r2, r2, #6, #1
    ed64:	4293      	cmp	r3, r2
    ed66:	d1d1      	bne.n	ed0c <isr+0xc54>
		(memcmp(&_radio.scanner.adv_addr[0],
    ed68:	2206      	movs	r2, #6
    ed6a:	f107 010a 	add.w	r1, r7, #10
    ed6e:	486f      	ldr	r0, [pc, #444]	; (ef2c <isr+0xe74>)
    ed70:	f7f1 fc21 	bl	5b6 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    ed74:	fab0 f080 	clz	r0, r0
    ed78:	0940      	lsrs	r0, r0, #5
    ed7a:	e7c7      	b.n	ed0c <isr+0xc54>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    ed7c:	2801      	cmp	r0, #1
    ed7e:	d1cc      	bne.n	ed1a <isr+0xc62>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    ed80:	2300      	movs	r3, #0
    ed82:	464a      	mov	r2, r9
    ed84:	4631      	mov	r1, r6
    ed86:	f7fb ff27 	bl	abd8 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    ed8a:	2800      	cmp	r0, #0
    ed8c:	d0c1      	beq.n	ed12 <isr+0xc5a>
    ed8e:	e602      	b.n	e996 <isr+0x8de>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ed90:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ed94:	4966      	ldr	r1, [pc, #408]	; (ef30 <isr+0xe78>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ed96:	09d2      	lsrs	r2, r2, #7
    ed98:	f362 1386 	bfi	r3, r2, #6, #1
    ed9c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    ed9e:	2206      	movs	r2, #6
    eda0:	e643      	b.n	ea2a <isr+0x972>
				conn_space_us += conn_interval_us;
    eda2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eda4:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    eda6:	f1bb 0f00 	cmp.w	fp, #0
    edaa:	dbfa      	blt.n	eda2 <isr+0xcea>
    edac:	459b      	cmp	fp, r3
    edae:	d3f8      	bcc.n	eda2 <isr+0xcea>
				(conn_space_us - conn_offset_us) / 1250;
    edb0:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    edb4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    edb8:	fbb3 f3f2 	udiv	r3, r3, r2
    edbc:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    edbe:	7d6b      	ldrb	r3, [r5, #21]
    edc0:	3301      	adds	r3, #1
    edc2:	756b      	strb	r3, [r5, #21]
    edc4:	e666      	b.n	ea94 <isr+0x9dc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    edc6:	2206      	movs	r2, #6
    edc8:	2100      	movs	r1, #0
    edca:	4618      	mov	r0, r3
    edcc:	f7f1 fc34 	bl	638 <memset>
				pdu_adv_tx->rx_addr;
    edd0:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    edd2:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
    edd4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    edd8:	f888 300d 	strb.w	r3, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    eddc:	2206      	movs	r2, #6
    edde:	4658      	mov	r0, fp
    ede0:	e6e6      	b.n	ebb0 <isr+0xaf8>
		   (_radio.scanner.phy)) ||
    ede2:	2806      	cmp	r0, #6
    ede4:	d165      	bne.n	eeb2 <isr+0xdfa>
		 (_radio.scanner.type != 0) &&
    ede6:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    edea:	071b      	lsls	r3, r3, #28
    edec:	d55e      	bpl.n	eeac <isr+0xdf4>
		 (_radio.scanner.type != 0) &&
    edee:	f8d4 2c54 	ldr.w	r2, [r4, #3156]	; 0xc54
    edf2:	2a00      	cmp	r2, #0
    edf4:	d15a      	bne.n	eeac <isr+0xdf4>
		err = isr_rx_scan_report(rssi_ready,
    edf6:	f1ba 0f00 	cmp.w	sl, #0
    edfa:	bf14      	ite	ne
    edfc:	4649      	movne	r1, r9
    edfe:	21ff      	moveq	r1, #255	; 0xff
    ee00:	4628      	mov	r0, r5
    ee02:	f7fc f82f 	bl	ae64 <isr_rx_scan_report>
		if (err) {
    ee06:	2800      	cmp	r0, #0
    ee08:	f47f acf9 	bne.w	e7fe <isr+0x746>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    ee0c:	7a3b      	ldrb	r3, [r7, #8]
    ee0e:	f003 030f 	and.w	r3, r3, #15
    ee12:	2b07      	cmp	r3, #7
    ee14:	d101      	bne.n	ee1a <isr+0xd62>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ee16:	f003 fe4f 	bl	12ab8 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ee1a:	f003 fe4d 	bl	12ab8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    ee1e:	7803      	ldrb	r3, [r0, #0]
    ee20:	2203      	movs	r2, #3
    ee22:	f362 0303 	bfi	r3, r2, #0, #4
    ee26:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ee28:	7a3b      	ldrb	r3, [r7, #8]
    ee2a:	7802      	ldrb	r2, [r0, #0]
    ee2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ee30:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    ee34:	230c      	movs	r3, #12
    ee36:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    ee38:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    ee3a:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    ee3c:	4648      	mov	r0, r9
    ee3e:	f002 fda9 	bl	11994 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    ee42:	f894 3c2e 	ldrb.w	r3, [r4, #3118]	; 0xc2e
		lrpa = ctrl_lrpa_get(rl_idx);
    ee46:	4601      	mov	r1, r0
    ee48:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    ee4a:	f013 0f01 	tst.w	r3, #1
    ee4e:	f810 3b02 	ldrb.w	r3, [r0], #2
    ee52:	d022      	beq.n	ee9a <isr+0xde2>
    ee54:	b309      	cbz	r1, ee9a <isr+0xde2>
			pdu_adv_tx->tx_addr = 1;
    ee56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ee5a:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ee5c:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ee5e:	f7f1 fbbf 	bl	5e0 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    ee62:	2206      	movs	r2, #6
    ee64:	f107 010a 	add.w	r1, r7, #10
    ee68:	f105 0008 	add.w	r0, r5, #8
    ee6c:	f7f1 fbb8 	bl	5e0 <memcpy>
		_radio.scanner.state = 1;
    ee70:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    ee74:	f043 0302 	orr.w	r3, r3, #2
    ee78:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
		radio_tmr_tifs_set(RADIO_TIFS);
    ee7c:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    ee7e:	2302      	movs	r3, #2
    ee80:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    ee82:	f003 febb 	bl	12bfc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    ee86:	2000      	movs	r0, #0
    ee88:	f003 fe1a 	bl	12ac0 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    ee8c:	4628      	mov	r0, r5
    ee8e:	f003 fd8f 	bl	129b0 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    ee92:	f003 ff7d 	bl	12d90 <radio_tmr_end_capture>
    ee96:	f7ff ba77 	b.w	e388 <isr+0x2d0>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    ee9a:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    ee9e:	4924      	ldr	r1, [pc, #144]	; (ef30 <isr+0xe78>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    eea0:	09d2      	lsrs	r2, r2, #7
    eea2:	f362 1386 	bfi	r3, r2, #6, #1
    eea6:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    eea8:	2206      	movs	r2, #6
    eeaa:	e7d8      	b.n	ee5e <isr+0xda6>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    eeac:	2800      	cmp	r0, #0
    eeae:	f43f af40 	beq.w	ed32 <isr+0xc7a>
    eeb2:	2801      	cmp	r0, #1
    eeb4:	f47f af37 	bne.w	ed26 <isr+0xc6e>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    eeb8:	ab10      	add	r3, sp, #64	; 0x40
    eeba:	464a      	mov	r2, r9
    eebc:	4631      	mov	r1, r6
    eebe:	2000      	movs	r0, #0
    eec0:	f7fb fe8a 	bl	abd8 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    eec4:	2800      	cmp	r0, #0
    eec6:	f47f af34 	bne.w	ed32 <isr+0xc7a>
    eeca:	e72c      	b.n	ed26 <isr+0xc6e>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    eecc:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    eed0:	2b07      	cmp	r3, #7
    eed2:	d105      	bne.n	eee0 <isr+0xe28>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    eed4:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
    eed8:	0758      	lsls	r0, r3, #29
    eeda:	f47f af2a 	bne.w	ed32 <isr+0xc7a>
    eede:	e48e      	b.n	e7fe <isr+0x746>
		   (_radio.scanner.phy)) ||
    eee0:	2b04      	cmp	r3, #4
    eee2:	f47f ac8c 	bne.w	e7fe <isr+0x746>
		   (_radio.scanner.state != 0) &&
    eee6:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    eeea:	0799      	lsls	r1, r3, #30
    eeec:	f57f ac87 	bpl.w	e7fe <isr+0x746>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    eef0:	f003 fde2 	bl	12ab8 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    eef4:	7a3b      	ldrb	r3, [r7, #8]
    eef6:	7802      	ldrb	r2, [r0, #0]
    eef8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eefc:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    ef00:	f47f ac7d 	bne.w	e7fe <isr+0x746>
		(memcmp(&sreq->scan_req.adv_addr[0],
    ef04:	2206      	movs	r2, #6
    ef06:	f107 010a 	add.w	r1, r7, #10
    ef0a:	3008      	adds	r0, #8
    ef0c:	f7f1 fb53 	bl	5b6 <memcmp>
		   (_radio.scanner.state != 0) &&
    ef10:	2800      	cmp	r0, #0
    ef12:	f43f af0e 	beq.w	ed32 <isr+0xc7a>
    ef16:	e472      	b.n	e7fe <isr+0x746>
    ef18:	1afd498d 	.word	0x1afd498d
    ef1c:	00000007 	.word	0x00000007
    ef20:	0000b1d1 	.word	0x0000b1d1
    ef24:	0000b231 	.word	0x0000b231
    ef28:	0000c9c1 	.word	0x0000c9c1
    ef2c:	20001516 	.word	0x20001516
    ef30:	20001510 	.word	0x20001510
    ef34:	3b9aca00 	.word	0x3b9aca00
	_radio.packet_counter++;
    ef38:	f894 3d00 	ldrb.w	r3, [r4, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    ef3c:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
	_radio.packet_counter++;
    ef40:	3301      	adds	r3, #1
    ef42:	f884 3d00 	strb.w	r3, [r4, #3328]	; 0xd00
	u8_t rx_enqueue = 0;
    ef46:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    ef48:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
	u8_t rx_enqueue = 0;
    ef4c:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    ef50:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    ef54:	2301      	movs	r3, #1
    ef56:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    ef5a:	2f00      	cmp	r7, #0
    ef5c:	f000 829f 	beq.w	f49e <isr+0x13e6>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    ef60:	f8d4 5cfc 	ldr.w	r5, [r4, #3324]	; 0xcfc
    ef64:	f898 1008 	ldrb.w	r1, [r8, #8]
    ef68:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    ef6c:	f3c1 0180 	ubfx	r1, r1, #2, #1
    ef70:	f003 0201 	and.w	r2, r3, #1
    ef74:	4291      	cmp	r1, r2
    ef76:	f000 8181 	beq.w	f27c <isr+0x11c4>
		_radio.conn_curr->sn++;
    ef7a:	f082 0201 	eor.w	r2, r2, #1
    ef7e:	f362 0300 	bfi	r3, r2, #0, #1
    ef82:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    ef86:	7ce3      	ldrb	r3, [r4, #19]
    ef88:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    ef8a:	bf02      	ittt	eq
    ef8c:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    ef90:	f043 0301 	orreq.w	r3, r3, #1
    ef94:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    ef98:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    ef9c:	061a      	lsls	r2, r3, #24
    ef9e:	f100 8168 	bmi.w	f272 <isr+0x11ba>
			node_tx = _radio.conn_curr->pkt_tx_head;
    efa2:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    efa6:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    efaa:	1d30      	adds	r0, r6, #4
    efac:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    efb0:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    efb4:	f1b9 0f00 	cmp.w	r9, #0
    efb8:	f000 808e 	beq.w	f0d8 <isr+0x1020>
				if (_radio.conn_curr->enc_tx) {
    efbc:	069b      	lsls	r3, r3, #26
    efbe:	d50b      	bpl.n	efd8 <isr+0xf20>
					_radio.conn_curr->ccm_tx.counter++;
    efc0:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    efc4:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    efc8:	f11b 0201 	adds.w	r2, fp, #1
    efcc:	f14c 0300 	adc.w	r3, ip, #0
    efd0:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    efd4:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    efd8:	5c43      	ldrb	r3, [r0, r1]
    efda:	f003 0303 	and.w	r3, r3, #3
    efde:	2b03      	cmp	r3, #3
    efe0:	d17a      	bne.n	f0d8 <isr+0x1020>
	switch (pdu_data_tx->llctrl.opcode) {
    efe2:	f89a 3003 	ldrb.w	r3, [sl, #3]
    efe6:	3b02      	subs	r3, #2
    efe8:	2b16      	cmp	r3, #22
    efea:	d875      	bhi.n	f0d8 <isr+0x1020>
    efec:	e8df f013 	tbh	[pc, r3, lsl #1]
    eff0:	00580017 	.word	0x00580017
    eff4:	007400aa 	.word	0x007400aa
    eff8:	00740074 	.word	0x00740074
    effc:	00740074 	.word	0x00740074
    f000:	00810076 	.word	0x00810076
    f004:	00b10074 	.word	0x00b10074
    f008:	00740074 	.word	0x00740074
    f00c:	00740074 	.word	0x00740074
    f010:	00740074 	.word	0x00740074
    f014:	007400bb 	.word	0x007400bb
    f018:	00da00d3 	.word	0x00da00d3
    f01c:	0105      	.short	0x0105
		_radio.state = STATE_CLOSE;
    f01e:	2303      	movs	r3, #3
    f020:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f022:	f003 fcf3 	bl	12a0c <radio_disable>
		LL_ASSERT(!radio_is_ready());
    f026:	f003 fd0f 	bl	12a48 <radio_is_ready>
    f02a:	2800      	cmp	r0, #0
    f02c:	f47f a89c 	bne.w	e168 <isr+0xb0>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    f030:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    f034:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f038:	2913      	cmp	r1, #19
    f03a:	bf08      	it	eq
    f03c:	2116      	moveq	r1, #22
    f03e:	f7fb fea1 	bl	ad84 <terminate_ind_rx_enqueue>
		terminate = 1;
    f042:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f044:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f048:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    f04c:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    f04e:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f052:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    f056:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    f058:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    f05c:	d11e      	bne.n	f09c <isr+0xfe4>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f05e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f062:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    f066:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f068:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    f06a:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    f06e:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    f072:	f040 80c9 	bne.w	f208 <isr+0x1150>
		if (node_tx) {
    f076:	b18e      	cbz	r6, f09c <isr+0xfe4>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f078:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    f07c:	f8d3 e000 	ldr.w	lr, [r3]
    f080:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    f084:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    f086:	bf06      	itte	eq
    f088:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    f08c:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    f090:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    f094:	49d7      	ldr	r1, [pc, #860]	; (f3f4 <isr+0x133c>)
    f096:	4630      	mov	r0, r6
    f098:	f7f8 fb8f 	bl	77ba <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    f09c:	2600      	movs	r6, #0
    f09e:	e0bc      	b.n	f21a <isr+0x1162>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    f0a0:	2208      	movs	r2, #8
    f0a2:	f10a 010e 	add.w	r1, sl, #14
    f0a6:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f0aa:	f7f1 fa99 	bl	5e0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    f0ae:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f0b2:	2204      	movs	r2, #4
    f0b4:	f10a 0116 	add.w	r1, sl, #22
    f0b8:	f500 7089 	add.w	r0, r0, #274	; 0x112
    f0bc:	f7f1 fa90 	bl	5e0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    f0c0:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f0c4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f0c8:	f042 0208 	orr.w	r2, r2, #8
    f0cc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f0d0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    f0d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    f0d8:	2500      	movs	r5, #0
    f0da:	e7b3      	b.n	f044 <isr+0xf8c>
		_radio.conn_curr->pause_tx = 1;
    f0dc:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    f0e0:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    f0e4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    f0e8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    f0ec:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    f0f0:	e7f2      	b.n	f0d8 <isr+0x1020>
		if (_radio.role == ROLE_MASTER) {
    f0f2:	f894 a013 	ldrb.w	sl, [r4, #19]
    f0f6:	fa5f fa8a 	uxtb.w	sl, sl
    f0fa:	f1ba 0f04 	cmp.w	sl, #4
    f0fe:	d121      	bne.n	f144 <isr+0x108c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f100:	7933      	ldrb	r3, [r6, #4]
    f102:	f043 0303 	orr.w	r3, r3, #3
    f106:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    f108:	2317      	movs	r3, #23
    f10a:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    f10c:	2303      	movs	r3, #3
    f10e:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    f110:	2208      	movs	r2, #8
    f112:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    f116:	3004      	adds	r0, #4
    f118:	f7f1 fa62 	bl	5e0 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    f11c:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    f120:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    f122:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    f126:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    f128:	f106 0112 	add.w	r1, r6, #18
    f12c:	2208      	movs	r2, #8
    f12e:	6860      	ldr	r0, [r4, #4]
    f130:	f7f2 fbfc 	bl	192c <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    f134:	f106 011a 	add.w	r1, r6, #26
    f138:	4652      	mov	r2, sl
    f13a:	6860      	ldr	r0, [r4, #4]
    f13c:	f7f2 fbf6 	bl	192c <entropy_get_entropy_isr>
			*node_tx = NULL;
    f140:	2600      	movs	r6, #0
    f142:	e7c9      	b.n	f0d8 <isr+0x1020>
			_radio.conn_curr->pause_tx = 1;
    f144:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    f148:	f043 0308 	orr.w	r3, r3, #8
    f14c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f150:	e7c2      	b.n	f0d8 <isr+0x1020>
		_radio.conn_curr->pause_rx = 0;
    f152:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    f156:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f15a:	f36f 03c3 	bfc	r3, #3, #1
    f15e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    f162:	2300      	movs	r3, #0
    f164:	e7c2      	b.n	f0ec <isr+0x1034>
		if ((_radio.conn_curr->llcp_length.req !=
    f166:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    f16a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    f16e:	429a      	cmp	r2, r3
    f170:	d0b2      	beq.n	f0d8 <isr+0x1020>
		    (_radio.conn_curr->llcp_length.state ==
    f172:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    f176:	f003 0203 	and.w	r2, r3, #3
    f17a:	2a01      	cmp	r2, #1
    f17c:	d1ac      	bne.n	f0d8 <isr+0x1020>
			_radio.conn_curr->pause_tx = 1;
    f17e:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    f182:	f042 0208 	orr.w	r2, r2, #8
    f186:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    f18a:	2202      	movs	r2, #2
    f18c:	f362 0301 	bfi	r3, r2, #0, #2
    f190:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    f194:	e7a0      	b.n	f0d8 <isr+0x1020>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    f196:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    f19a:	2202      	movs	r2, #2
    f19c:	f362 0301 	bfi	r3, r2, #0, #2
    f1a0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    f1a4:	7ce3      	ldrb	r3, [r4, #19]
    f1a6:	2b03      	cmp	r3, #3
    f1a8:	d196      	bne.n	f0d8 <isr+0x1020>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    f1aa:	2301      	movs	r3, #1
    f1ac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    f1b0:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    f1b4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f1b8:	2202      	movs	r2, #2
    f1ba:	2304      	movs	r3, #4
    f1bc:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    f1c0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    f1c4:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    f1c8:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    f1cc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    f1d0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    f1d4:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    f1d8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    f1dc:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    f1e0:	f003 0307 	and.w	r3, r3, #7
    f1e4:	aa12      	add	r2, sp, #72	; 0x48
    f1e6:	4413      	add	r3, r2
    f1e8:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f1ec:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    f1f0:	f363 0202 	bfi	r2, r3, #0, #3
    f1f4:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    f1f8:	e76e      	b.n	f0d8 <isr+0x1020>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    f1fa:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    f1fe:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    f202:	f3c3 0382 	ubfx	r3, r3, #2, #3
    f206:	e7f3      	b.n	f1f0 <isr+0x1138>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f208:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    f20c:	4293      	cmp	r3, r2
    f20e:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f210:	bf08      	it	eq
    f212:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    f216:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    f21a:	b37d      	cbz	r5, f27c <isr+0x11c4>
		connection_release(_radio.conn_curr);
    f21c:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f220:	f7fb fed6 	bl	afd0 <connection_release>
		_radio.conn_curr = NULL;
    f224:	2300      	movs	r3, #0
    f226:	f8c4 3cfc 	str.w	r3, [r4, #3324]	; 0xcfc
	if (!radio_tmr_aa_restore()) {
    f22a:	f003 fda5 	bl	12d78 <radio_tmr_aa_restore>
    f22e:	b918      	cbnz	r0, f238 <isr+0x1180>
		radio_tmr_aa_save(radio_tmr_aa_get());
    f230:	f003 fd96 	bl	12d60 <radio_tmr_aa_get>
    f234:	f003 fd9a 	bl	12d6c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    f238:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f23c:	2b00      	cmp	r3, #0
    f23e:	f43e afe3 	beq.w	e208 <isr+0x150>
	if (tx_release) {
    f242:	b11e      	cbz	r6, f24c <isr+0x1194>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    f244:	4631      	mov	r1, r6
    f246:	8c18      	ldrh	r0, [r3, #32]
    f248:	f7fb fe50 	bl	aeec <pdu_node_tx_release>
	if (rx_enqueue) {
    f24c:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
    f250:	2b00      	cmp	r3, #0
    f252:	f43e afd9 	beq.w	e208 <isr+0x150>
		rx_fc_lock(_radio.conn_curr->handle);
    f256:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f25a:	8c18      	ldrh	r0, [r3, #32]
    f25c:	f7fb fd08 	bl	ac70 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    f260:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f264:	8c1b      	ldrh	r3, [r3, #32]
    f266:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    f26a:	f7fb fdb3 	bl	add4 <packet_rx_enqueue>
    f26e:	f7fe bfcb 	b.w	e208 <isr+0x150>
			_radio.conn_curr->empty = 0;
    f272:	f36f 13c7 	bfc	r3, #7, #1
    f276:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    f27a:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f27c:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f280:	f898 2008 	ldrb.w	r2, [r8, #8]
    f284:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f288:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    f28c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f290:	429a      	cmp	r2, r3
    f292:	f040 80d4 	bne.w	f43e <isr+0x1386>
	    (packet_rx_reserve_get(3) != 0) &&
    f296:	2003      	movs	r0, #3
    f298:	f7fa fed2 	bl	a040 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    f29c:	2800      	cmp	r0, #0
    f29e:	f000 80ce 	beq.w	f43e <isr+0x1386>
	    (packet_rx_reserve_get(3) != 0) &&
    f2a2:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
    f2a6:	b393      	cbz	r3, f30e <isr+0x1256>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f2a8:	f8d4 3d34 	ldr.w	r3, [r4, #3380]	; 0xd34
    f2ac:	f8d4 2d38 	ldr.w	r2, [r4, #3384]	; 0xd38
	    ((_radio.fc_ena == 0) ||
    f2b0:	4293      	cmp	r3, r2
    f2b2:	d105      	bne.n	f2c0 <isr+0x1208>
	      (_radio.fc_req == _radio.fc_ack)) ||
    f2b4:	f894 2d68 	ldrb.w	r2, [r4, #3432]	; 0xd68
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    f2b8:	f894 1d69 	ldrb.w	r1, [r4, #3433]	; 0xd69
    f2bc:	4291      	cmp	r1, r2
    f2be:	d026      	beq.n	f30e <isr+0x1256>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f2c0:	f8d4 2d38 	ldr.w	r2, [r4, #3384]	; 0xd38
	      (_radio.fc_req == _radio.fc_ack)) ||
    f2c4:	4293      	cmp	r3, r2
    f2c6:	f000 80ba 	beq.w	f43e <isr+0x1386>
	      (_radio.fc_req != _radio.fc_ack) &&
    f2ca:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    f2ce:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
    f2d2:	429a      	cmp	r2, r3
    f2d4:	f000 80b3 	beq.w	f43e <isr+0x1386>
		(((_radio.fc_req == 0) &&
    f2d8:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	      (_radio.fc_req != _radio.fc_ack) &&
    f2dc:	b933      	cbnz	r3, f2ec <isr+0x1234>
		   _radio.conn_curr->handle)) ||
    f2de:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
		(((_radio.fc_req == 0) &&
    f2e2:	f8b4 2d66 	ldrh.w	r2, [r4, #3430]	; 0xd66
    f2e6:	8c1b      	ldrh	r3, [r3, #32]
    f2e8:	429a      	cmp	r2, r3
    f2ea:	d010      	beq.n	f30e <isr+0x1256>
		 ((_radio.fc_req != 0) &&
    f2ec:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
		   _radio.conn_curr->handle)) ||
    f2f0:	2b00      	cmp	r3, #0
    f2f2:	f000 80a4 	beq.w	f43e <isr+0x1386>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f2f6:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
		   _radio.conn_curr->handle)))))) {
    f2fa:	f8d4 1cfc 	ldr.w	r1, [r4, #3324]	; 0xcfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    f2fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    f302:	f8b3 2d60 	ldrh.w	r2, [r3, #3424]	; 0xd60
    f306:	8c0b      	ldrh	r3, [r1, #32]
    f308:	429a      	cmp	r2, r3
    f30a:	f040 8098 	bne.w	f43e <isr+0x1386>
		if (pdu_data_rx->len != 0) {
    f30e:	f898 5009 	ldrb.w	r5, [r8, #9]
    f312:	2d00      	cmp	r5, #0
    f314:	f000 809c 	beq.w	f450 <isr+0x1398>
			if (_radio.conn_curr->enc_rx) {
    f318:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f31c:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    f320:	f015 0510 	ands.w	r5, r5, #16
    f324:	d005      	beq.n	f332 <isr+0x127a>
				done = radio_ccm_is_done();
    f326:	f003 fdcd 	bl	12ec4 <radio_ccm_is_done>
				LL_ASSERT(done);
    f32a:	2800      	cmp	r0, #0
    f32c:	f43e af1c 	beq.w	e168 <isr+0xb0>
				ccm_rx_increment = 1;
    f330:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    f332:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f336:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    f33a:	06d9      	lsls	r1, r3, #27
    f33c:	d42c      	bmi.n	f398 <isr+0x12e0>
			    (_radio.conn_curr->pause_rx &&
    f33e:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f342:	f898 3008 	ldrb.w	r3, [r8, #8]
    f346:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    f34a:	f012 0f04 	tst.w	r2, #4
    f34e:	d13d      	bne.n	f3cc <isr+0x1314>
			_radio.conn_curr->appto_expire = 0;
    f350:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    f352:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    f356:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    f35a:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    f35e:	d004      	beq.n	f36a <isr+0x12b2>
    f360:	2b02      	cmp	r3, #2
    f362:	d865      	bhi.n	f430 <isr+0x1378>
				*rx_enqueue = 1;
    f364:	2301      	movs	r3, #1
    f366:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
    f36a:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f36e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f372:	f082 0202 	eor.w	r2, r2, #2
    f376:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    f37a:	2d00      	cmp	r5, #0
    f37c:	d05f      	beq.n	f43e <isr+0x1386>
				_radio.conn_curr->ccm_rx.counter++;
    f37e:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    f382:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    f386:	f119 0001 	adds.w	r0, r9, #1
    f38a:	f14a 0100 	adc.w	r1, sl, #0
    f38e:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    f392:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    f396:	e052      	b.n	f43e <isr+0x1386>
			     !radio_ccm_mic_is_valid()) ||
    f398:	f003 fdb2 	bl	12f00 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    f39c:	2800      	cmp	r0, #0
    f39e:	d1ce      	bne.n	f33e <isr+0x1286>
				_radio.state = STATE_CLOSE;
    f3a0:	2303      	movs	r3, #3
    f3a2:	7523      	strb	r3, [r4, #20]
				radio_disable();
    f3a4:	f003 fb32 	bl	12a0c <radio_disable>
				LL_ASSERT(!radio_is_ready());
    f3a8:	f003 fb4e 	bl	12a48 <radio_is_ready>
    f3ac:	4605      	mov	r5, r0
    f3ae:	2800      	cmp	r0, #0
    f3b0:	f47e aeda 	bne.w	e168 <isr+0xb0>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    f3b4:	213d      	movs	r1, #61	; 0x3d
    f3b6:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f3ba:	f7fb fce3 	bl	ad84 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    f3be:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f3c2:	f7fb fe05 	bl	afd0 <connection_release>
				_radio.conn_curr = NULL;
    f3c6:	f8c4 5cfc 	str.w	r5, [r4, #3324]	; 0xcfc
    f3ca:	e72e      	b.n	f22a <isr+0x1172>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    f3cc:	f003 0103 	and.w	r1, r3, #3
    f3d0:	2903      	cmp	r1, #3
    f3d2:	d1e5      	bne.n	f3a0 <isr+0x12e8>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f3d4:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    f3d8:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    f3dc:	f1be 0f00 	cmp.w	lr, #0
    f3e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
    f3e4:	db18      	blt.n	f418 <isr+0x1360>
	       (!conn->role &&
    f3e6:	b93a      	cbnz	r2, f3f8 <isr+0x1340>
		((!conn->refresh &&
    f3e8:	2902      	cmp	r1, #2
    f3ea:	d0b1      	beq.n	f350 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f3ec:	2911      	cmp	r1, #17
    f3ee:	d8d7      	bhi.n	f3a0 <isr+0x12e8>
    f3f0:	e00c      	b.n	f40c <isr+0x1354>
    f3f2:	bf00      	nop
    f3f4:	20001624 	.word	0x20001624
		 (conn->refresh &&
    f3f8:	1e8a      	subs	r2, r1, #2
    f3fa:	b2d2      	uxtb	r2, r2
    f3fc:	2a09      	cmp	r2, #9
    f3fe:	d8f5      	bhi.n	f3ec <isr+0x1334>
    f400:	f240 2e05 	movw	lr, #517	; 0x205
    f404:	fa2e f202 	lsr.w	r2, lr, r2
    f408:	07d2      	lsls	r2, r2, #31
    f40a:	d4a1      	bmi.n	f350 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f40c:	4ab6      	ldr	r2, [pc, #728]	; (f6e8 <isr+0x1630>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f40e:	fa22 f101 	lsr.w	r1, r2, r1
    f412:	07ca      	lsls	r2, r1, #31
    f414:	d5c4      	bpl.n	f3a0 <isr+0x12e8>
    f416:	e79b      	b.n	f350 <isr+0x1298>
	       (conn->role &&
    f418:	b92a      	cbnz	r2, f426 <isr+0x136e>
		((!conn->refresh &&
    f41a:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f41c:	d098      	beq.n	f350 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    f41e:	2911      	cmp	r1, #17
    f420:	d8be      	bhi.n	f3a0 <isr+0x12e8>
    f422:	4ab2      	ldr	r2, [pc, #712]	; (f6ec <isr+0x1634>)
    f424:	e7f3      	b.n	f40e <isr+0x1356>
		 (conn->refresh &&
    f426:	1e8a      	subs	r2, r1, #2
    f428:	2a01      	cmp	r2, #1
    f42a:	d991      	bls.n	f350 <isr+0x1298>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    f42c:	290b      	cmp	r1, #11
    f42e:	e7f5      	b.n	f41c <isr+0x1364>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    f430:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
    f434:	4640      	mov	r0, r8
    f436:	f7fd fd91 	bl	cf5c <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    f43a:	2800      	cmp	r0, #0
    f43c:	d095      	beq.n	f36a <isr+0x12b2>
		_radio.conn_curr->supervision_expire = 0;
    f43e:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
		_radio.crc_expire = 0;
    f442:	2300      	movs	r3, #0
    f444:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
	u8_t crc_close = 0;
    f448:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    f44a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    f44e:	e03d      	b.n	f4cc <isr+0x1414>
		} else if ((_radio.conn_curr->enc_rx) ||
    f450:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
    f454:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    f458:	f013 0f14 	tst.w	r3, #20
    f45c:	d085      	beq.n	f36a <isr+0x12b2>
					    (conn->latency + 6)) ?
    f45e:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    f460:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    f464:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
    f466:	4298      	cmp	r0, r3
    f468:	bfc4      	itt	gt
    f46a:	1f83      	subgt	r3, r0, #6
    f46c:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
    f46e:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    f472:	bfcc      	ite	gt
    f474:	b29b      	uxthgt	r3, r3
    f476:	4603      	movle	r3, r0
			if (conn->appto_reload != appto_reload_new) {
    f478:	4299      	cmp	r1, r3
				conn->appto_reload = appto_reload_new;
    f47a:	bf1e      	ittt	ne
    f47c:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    f480:	2300      	movne	r3, #0
    f482:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    f486:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f48a:	2b00      	cmp	r3, #0
    f48c:	f47f af6d 	bne.w	f36a <isr+0x12b2>
				conn->appto_expire = conn->appto_reload;
    f490:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    f494:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    f498:	f8a2 004c 	strh.w	r0, [r2, #76]	; 0x4c
    f49c:	e765      	b.n	f36a <isr+0x12b2>
		if (_radio.crc_expire == 0) {
    f49e:	f894 3d01 	ldrb.w	r3, [r4, #3329]	; 0xd01
    f4a2:	b913      	cbnz	r3, f4aa <isr+0x13f2>
			_radio.crc_expire = 2;
    f4a4:	2302      	movs	r3, #2
    f4a6:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
		_radio.crc_expire--;
    f4aa:	f894 3d01 	ldrb.w	r3, [r4, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
    f4ae:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
		_radio.crc_expire--;
    f4b2:	3b01      	subs	r3, #1
    f4b4:	b2db      	uxtb	r3, r3
    f4b6:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
    f4ba:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    f4be:	fab3 f583 	clz	r5, r3
    f4c2:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    f4c4:	bb86      	cbnz	r6, f528 <isr+0x1470>
			_radio.conn_curr->supervision_expire =
    f4c6:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    f4c8:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f4cc:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f4d0:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f4d2:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    f4d6:	f7fd fb67 	bl	cba8 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f4da:	7d23      	ldrb	r3, [r4, #20]
    f4dc:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    f4de:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f4e2:	d010      	beq.n	f506 <isr+0x144e>
    f4e4:	bb15      	cbnz	r5, f52c <isr+0x1474>
    f4e6:	b137      	cbz	r7, f4f6 <isr+0x143e>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f4e8:	f898 3008 	ldrb.w	r3, [r8, #8]
    f4ec:	06dd      	lsls	r5, r3, #27
    f4ee:	d402      	bmi.n	f4f6 <isr+0x143e>
			 (pdu_data_tx->len == 0)) ||
    f4f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
    f4f2:	785b      	ldrb	r3, [r3, #1]
    f4f4:	b1d3      	cbz	r3, f52c <isr+0x1474>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    f4f6:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
			 (pdu_data_tx->len == 0)) ||
    f4fa:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f4fe:	2b00      	cmp	r3, #0
    f500:	bf0c      	ite	eq
    f502:	2302      	moveq	r3, #2
    f504:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    f506:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f508:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    f50a:	d129      	bne.n	f560 <isr+0x14a8>
		if (_radio.role == ROLE_MASTER) {
    f50c:	7ce3      	ldrb	r3, [r4, #19]
    f50e:	2b04      	cmp	r3, #4
    f510:	d10e      	bne.n	f530 <isr+0x1478>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    f512:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f516:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    f51a:	f369 12c7 	bfi	r2, r9, #7, #1
    f51e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    f522:	f003 fa73 	bl	12a0c <radio_disable>
    f526:	e680      	b.n	f22a <isr+0x1172>
	struct radio_pdu_node_tx *tx_release = NULL;
    f528:	2600      	movs	r6, #0
    f52a:	e7cf      	b.n	f4cc <isr+0x1414>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    f52c:	2303      	movs	r3, #3
    f52e:	e7ea      	b.n	f506 <isr+0x144e>
			radio_switch_complete_and_disable();
    f530:	f003 fadc 	bl	12aec <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    f534:	9910      	ldr	r1, [sp, #64]	; 0x40
    f536:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f53a:	780b      	ldrb	r3, [r1, #0]
    f53c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    f540:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    f544:	f3c2 0240 	ubfx	r2, r2, #1, #1
    f548:	f362 0382 	bfi	r3, r2, #2, #1
    f54c:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    f54e:	f7fa ffd1 	bl	a4f4 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    f552:	f003 fa79 	bl	12a48 <radio_is_ready>
    f556:	2800      	cmp	r0, #0
    f558:	f43f ae67 	beq.w	f22a <isr+0x1172>
    f55c:	f7fe be04 	b.w	e168 <isr+0xb0>
		radio_tmr_tifs_set(RADIO_TIFS);
    f560:	2096      	movs	r0, #150	; 0x96
    f562:	f003 fb4b 	bl	12bfc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    f566:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f56a:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f56e:	f000 0007 	and.w	r0, r0, #7
    f572:	f003 faa5 	bl	12ac0 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    f576:	f003 fc0b 	bl	12d90 <radio_tmr_end_capture>
    f57a:	e7db      	b.n	f534 <isr+0x147c>
	switch (_radio.role) {
    f57c:	7ce2      	ldrb	r2, [r4, #19]
    f57e:	2a04      	cmp	r2, #4
    f580:	f63e adf2 	bhi.w	e168 <isr+0xb0>
    f584:	e8df f012 	tbh	[pc, r2, lsl #1]
    f588:	0005020f 	.word	0x0005020f
    f58c:	00cc0085 	.word	0x00cc0085
    f590:	00cc      	.short	0x00cc
	if(radio_ext_adv_enable_flag ==  true){
    f592:	4a57      	ldr	r2, [pc, #348]	; (f6f0 <isr+0x1638>)
    f594:	7812      	ldrb	r2, [r2, #0]
    f596:	2a00      	cmp	r2, #0
    f598:	d037      	beq.n	f60a <isr+0x1552>
		if((chain_flag ==1) &&
    f59a:	4a56      	ldr	r2, [pc, #344]	; (f6f4 <isr+0x163c>)
    f59c:	7812      	ldrb	r2, [r2, #0]
    f59e:	2a01      	cmp	r2, #1
    f5a0:	d10b      	bne.n	f5ba <isr+0x1502>
    f5a2:	f894 2c8d 	ldrb.w	r2, [r4, #3213]	; 0xc8d
    f5a6:	f894 3c8c 	ldrb.w	r3, [r4, #3212]	; 0xc8c
    f5aa:	429a      	cmp	r2, r3
    f5ac:	d00f      	beq.n	f5ce <isr+0x1516>
			ext_adv_setup();
    f5ae:	f7fb fa15 	bl	a9dc <ext_adv_setup>
			radio_tx_enable();
    f5b2:	f003 fa25 	bl	12a00 <radio_tx_enable>
    f5b6:	f7fe bdf6 	b.w	e1a6 <isr+0xee>
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
    f5ba:	2b03      	cmp	r3, #3
    f5bc:	d107      	bne.n	f5ce <isr+0x1516>
    f5be:	b932      	cbnz	r2, f5ce <isr+0x1516>
			(_radio.advertiser.chan_map_current != 0)) {
    f5c0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
    f5c4:	0758      	lsls	r0, r3, #29
    f5c6:	d002      	beq.n	f5ce <isr+0x1516>
			adv_setup();
    f5c8:	f7fb f8e2 	bl	a790 <adv_setup>
    f5cc:	e7f1      	b.n	f5b2 <isr+0x14fa>
			radio_filter_disable();
    f5ce:	f003 fad7 	bl	12b80 <radio_filter_disable>
	_radio.role = ROLE_NONE;
    f5d2:	2500      	movs	r5, #0
    f5d4:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    f5d6:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    f5d8:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    f5da:	f003 fb7b 	bl	12cd4 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f5de:	462a      	mov	r2, r5
    f5e0:	4629      	mov	r1, r5
    f5e2:	4628      	mov	r0, r5
    f5e4:	4b44      	ldr	r3, [pc, #272]	; (f6f8 <isr+0x1640>)
    f5e6:	f7f8 f999 	bl	791c <mayfly_enqueue>
	LL_ASSERT(!retval);
    f5ea:	4605      	mov	r5, r0
    f5ec:	2800      	cmp	r0, #0
    f5ee:	f47e adbb 	bne.w	e168 <isr+0xb0>
	clock_control_off(_radio.hf_clock, NULL);
    f5f2:	6820      	ldr	r0, [r4, #0]
    f5f4:	6843      	ldr	r3, [r0, #4]
    f5f6:	4629      	mov	r1, r5
    f5f8:	685b      	ldr	r3, [r3, #4]
    f5fa:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    f5fc:	2201      	movs	r2, #1
    f5fe:	4611      	mov	r1, r2
    f600:	4628      	mov	r0, r5
    f602:	f7f8 f963 	bl	78cc <mayfly_enable>
    f606:	f7fe bdff 	b.w	e208 <isr+0x150>
		if ((_radio.state == STATE_CLOSE) &&
    f60a:	2b03      	cmp	r3, #3
    f60c:	d103      	bne.n	f616 <isr+0x155e>
			(_radio.advertiser.chan_map_current != 0)) {
    f60e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    f612:	0759      	lsls	r1, r3, #29
    f614:	d1d8      	bne.n	f5c8 <isr+0x1510>
			radio_filter_disable();
    f616:	f003 fab3 	bl	12b80 <radio_filter_disable>
			if ((_radio.state == STATE_CLOSE) &&
    f61a:	7d23      	ldrb	r3, [r4, #20]
    f61c:	2b03      	cmp	r3, #3
    f61e:	d1d8      	bne.n	f5d2 <isr+0x151a>
				(!_radio.advertiser.is_hdcd)) {
    f620:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
			if ((_radio.state == STATE_CLOSE) &&
    f624:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    f628:	d1d3      	bne.n	f5d2 <isr+0x151a>
				entropy_get_entropy_isr(_radio.entropy, &random_delay,
    f62a:	2201      	movs	r2, #1
    f62c:	a910      	add	r1, sp, #64	; 0x40
    f62e:	6860      	ldr	r0, [r4, #4]
    f630:	f7f2 f97c 	bl	192c <entropy_get_entropy_isr>
				random_delay %= 10;
    f634:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
						HAL_TICKER_US_TO_TICKS(random_delay *
    f638:	4830      	ldr	r0, [pc, #192]	; (f6fc <isr+0x1644>)
				random_delay %= 10;
    f63a:	230a      	movs	r3, #10
    f63c:	fbb1 f2f3 	udiv	r2, r1, r3
    f640:	fb03 1212 	mls	r2, r3, r2, r1
				random_delay += 1;
    f644:	3201      	adds	r2, #1
    f646:	b2d2      	uxtb	r2, r2
						HAL_TICKER_US_TO_TICKS(random_delay *
    f648:	b2d6      	uxtb	r6, r2
    f64a:	fba6 0100 	umull	r0, r1, r6, r0
    f64e:	23e8      	movs	r3, #232	; 0xe8
				random_delay += 1;
    f650:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
						HAL_TICKER_US_TO_TICKS(random_delay *
    f654:	fb03 1106 	mla	r1, r3, r6, r1
    f658:	a321      	add	r3, pc, #132	; (adr r3, f6e0 <isr+0x1628>)
    f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f65e:	f7f0 fe03 	bl	268 <__aeabi_uldivmod>
				ticker_status =
    f662:	f241 1309 	movw	r3, #4361	; 0x1109
    f666:	9306      	str	r3, [sp, #24]
    f668:	4b25      	ldr	r3, [pc, #148]	; (f700 <isr+0x1648>)
    f66a:	9305      	str	r3, [sp, #20]
    f66c:	9504      	str	r5, [sp, #16]
    f66e:	b283      	uxth	r3, r0
    f670:	9503      	str	r5, [sp, #12]
    f672:	9502      	str	r5, [sp, #8]
    f674:	9501      	str	r5, [sp, #4]
    f676:	9500      	str	r5, [sp, #0]
    f678:	2205      	movs	r2, #5
    f67a:	4629      	mov	r1, r5
    f67c:	4628      	mov	r0, r5
    f67e:	f7f8 ff47 	bl	8510 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f682:	f030 0302 	bics.w	r3, r0, #2
    f686:	d0a4      	beq.n	f5d2 <isr+0x151a>
    f688:	7ca3      	ldrb	r3, [r4, #18]
    f68a:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f68c:	d0a1      	beq.n	f5d2 <isr+0x151a>
    f68e:	f7fe bd6b 	b.w	e168 <isr+0xb0>
	if (_radio.state == STATE_CLOSE) {
    f692:	2b03      	cmp	r3, #3
    f694:	d136      	bne.n	f704 <isr+0x164c>
		radio_tmr_tifs_set(RADIO_TIFS);
    f696:	2096      	movs	r0, #150	; 0x96
    f698:	f003 fab0 	bl	12bfc <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f69c:	2300      	movs	r3, #0
    f69e:	4619      	mov	r1, r3
    f6a0:	461a      	mov	r2, r3
    f6a2:	4618      	mov	r0, r3
    f6a4:	f003 fa18 	bl	12ad8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    f6a8:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
    f6ac:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		radio_pkt_rx_set(_radio.packet_rx
    f6b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f6b4:	3008      	adds	r0, #8
    f6b6:	f003 f975 	bl	129a4 <radio_pkt_rx_set>
		radio_rssi_measure();
    f6ba:	f003 fa25 	bl	12b08 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f6be:	f002 fb79 	bl	11db4 <ctrl_rl_enabled>
    f6c2:	b138      	cbz	r0, f6d4 <isr+0x161c>
			u8_t count, *irks = ctrl_irks_get(&count);
    f6c4:	a810      	add	r0, sp, #64	; 0x40
    f6c6:	f002 f979 	bl	119bc <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f6ca:	4601      	mov	r1, r0
    f6cc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    f6d0:	f003 fc20 	bl	12f14 <radio_ar_configure>
		_radio.state = STATE_RX;
    f6d4:	2301      	movs	r3, #1
    f6d6:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    f6d8:	f003 f98c 	bl	129f4 <radio_rx_enable>
    f6dc:	f7fe bd63 	b.w	e1a6 <isr+0xee>
    f6e0:	1afd498d 	.word	0x1afd498d
    f6e4:	00000007 	.word	0x00000007
    f6e8:	00022060 	.word	0x00022060
    f6ec:	00022040 	.word	0x00022040
    f6f0:	200016a1 	.word	0x200016a1
    f6f4:	20001659 	.word	0x20001659
    f6f8:	2000ceb0 	.word	0x2000ceb0
    f6fc:	d4a51000 	.word	0xd4a51000
    f700:	0000b1b9 	.word	0x0000b1b9
		radio_filter_disable();
    f704:	f003 fa3c 	bl	12b80 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f708:	7d23      	ldrb	r3, [r4, #20]
    f70a:	2b05      	cmp	r3, #5
    f70c:	f47f af61 	bne.w	f5d2 <isr+0x151a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f710:	2300      	movs	r3, #0
    f712:	9300      	str	r3, [sp, #0]
    f714:	2204      	movs	r2, #4
    f716:	4619      	mov	r1, r3
    f718:	4618      	mov	r0, r3
    f71a:	f7f8 ff47 	bl	85ac <ticker_stop>
    f71e:	e758      	b.n	f5d2 <isr+0x151a>
	if (_radio.conn_curr == 0) {
    f720:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f724:	2800      	cmp	r0, #0
    f726:	f43f af54 	beq.w	f5d2 <isr+0x151a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f72a:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f72e:	b181      	cbz	r1, f752 <isr+0x169a>
    f730:	7ce3      	ldrb	r3, [r4, #19]
    f732:	2b03      	cmp	r3, #3
    f734:	d003      	beq.n	f73e <isr+0x1686>
    f736:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f73a:	07da      	lsls	r2, r3, #31
    f73c:	d509      	bpl.n	f752 <isr+0x169a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f73e:	f7fb fb21 	bl	ad84 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f742:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f746:	f7fb fc43 	bl	afd0 <connection_release>
			_radio.conn_curr = NULL;
    f74a:	2300      	movs	r3, #0
    f74c:	f8c4 3cfc 	str.w	r3, [r4, #3324]	; 0xcfc
    f750:	e73f      	b.n	f5d2 <isr+0x151a>
	latency_event = _radio.conn_curr->latency_event;
    f752:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    f756:	f894 7d00 	ldrb.w	r7, [r4, #3328]	; 0xd00
	elapsed_event = latency_event + 1;
    f75a:	f10b 0601 	add.w	r6, fp, #1
    f75e:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    f760:	2f00      	cmp	r7, #0
    f762:	f000 8084 	beq.w	f86e <isr+0x17b6>
		if (_radio.role == ROLE_SLAVE) {
    f766:	7ce3      	ldrb	r3, [r4, #19]
    f768:	2b03      	cmp	r3, #3
    f76a:	d173      	bne.n	f854 <isr+0x179c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f76c:	f003 fb04 	bl	12d78 <radio_tmr_aa_restore>
    f770:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    f772:	f003 fb07 	bl	12d84 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    f776:	f8d4 7cfc 	ldr.w	r7, [r4, #3324]	; 0xcfc
				addr_us_get(_radio.conn_curr->phy_rx);
    f77a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    f77e:	f003 0307 	and.w	r3, r3, #7
    f782:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f784:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    f788:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    f78a:	d052      	beq.n	f832 <isr+0x177a>
		return 40;
    f78c:	2b04      	cmp	r3, #4
    f78e:	bf0c      	ite	eq
    f790:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    f794:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f798:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f79c:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    f79e:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f7a0:	930a      	str	r3, [sp, #40]	; 0x28
    f7a2:	f8df a220 	ldr.w	sl, [pc, #544]	; f9c4 <isr+0x190c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f7a6:	a385      	add	r3, pc, #532	; (adr r3, f9bc <isr+0x1904>)
    f7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    f7ac:	d844      	bhi.n	f838 <isr+0x1780>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f7ae:	fba0 010a 	umull	r0, r1, r0, sl
    f7b2:	f7f0 fd59 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f7b8:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f7ba:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f7be:	a37f      	add	r3, pc, #508	; (adr r3, f9bc <isr+0x1904>)
    f7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7c4:	fba0 010a 	umull	r0, r1, r0, sl
    f7c8:	f7f0 fd4e 	bl	268 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f7cc:	2300      	movs	r3, #0
    f7ce:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f7d0:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f7d2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f7d6:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    f7da:	b3ab      	cbz	r3, f848 <isr+0x1790>
				if (pdu_data_tx->len ||
    f7dc:	795b      	ldrb	r3, [r3, #5]
    f7de:	b913      	cbnz	r3, f7e6 <isr+0x172e>
    f7e0:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    f7e4:	b10b      	cbz	r3, f7ea <isr+0x1732>
					_radio.conn_curr->latency_event = 0;
    f7e6:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    f7e8:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    f7ea:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f7ee:	2200      	movs	r2, #0
    f7f0:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f7f2:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f7f6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    f7fa:	b1c3      	cbz	r3, f82e <isr+0x1776>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    f7fc:	429e      	cmp	r6, r3
    f7fe:	f080 80a6 	bcs.w	f94e <isr+0x1896>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f802:	1b9b      	subs	r3, r3, r6
    f804:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    f806:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    f808:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f80a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    f80e:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    f810:	f240 809f 	bls.w	f952 <isr+0x189a>
			else if (_radio.role == ROLE_SLAVE) {
    f814:	7ce3      	ldrb	r3, [r4, #19]
    f816:	2b03      	cmp	r3, #3
    f818:	d109      	bne.n	f82e <isr+0x1776>
				if (latency_event != 0) {
    f81a:	f1bb 0f00 	cmp.w	fp, #0
    f81e:	f040 8098 	bne.w	f952 <isr+0x189a>
					force = _radio.conn_curr->slave.force & 0x01;
    f822:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    f824:	087b      	lsrs	r3, r7, #1
					if (force) {
    f826:	f017 0701 	ands.w	r7, r7, #1
    f82a:	d13d      	bne.n	f8a8 <isr+0x17f0>
					_radio.conn_curr->slave.force >>= 1;
    f82c:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    f82e:	2700      	movs	r7, #0
    f830:	e03d      	b.n	f8ae <isr+0x17f6>
		return 24;
    f832:	f04f 0818 	mov.w	r8, #24
    f836:	e7af      	b.n	f798 <isr+0x16e0>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    f838:	fba9 010a 	umull	r0, r1, r9, sl
    f83c:	f7f0 fd14 	bl	268 <__aeabi_uldivmod>
    f840:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    f842:	f108 0030 	add.w	r0, r8, #48	; 0x30
    f846:	e7ba      	b.n	f7be <isr+0x1706>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    f848:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    f84c:	07db      	lsls	r3, r3, #31
    f84e:	d5cc      	bpl.n	f7ea <isr+0x1732>
				_radio.conn_curr->latency_event =
    f850:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    f852:	e7c9      	b.n	f7e8 <isr+0x1730>
		} else if (reason_peer) {
    f854:	b149      	cbz	r1, f86a <isr+0x17b2>
			_radio.conn_curr->master.terminate_ack = 1;
    f856:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f85a:	f043 0301 	orr.w	r3, r3, #1
    f85e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    f862:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    f866:	4645      	mov	r5, r8
    f868:	e7bf      	b.n	f7ea <isr+0x1732>
	ticks_drift_minus = 0;
    f86a:	4688      	mov	r8, r1
    f86c:	e7fb      	b.n	f866 <isr+0x17ae>
	else if (_radio.conn_curr->connect_expire) {
    f86e:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    f870:	b185      	cbz	r5, f894 <isr+0x17dc>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    f872:	42ae      	cmp	r6, r5
    f874:	d204      	bcs.n	f880 <isr+0x17c8>
			_radio.conn_curr->connect_expire -= elapsed_event;
    f876:	1bad      	subs	r5, r5, r6
    f878:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    f87a:	463d      	mov	r5, r7
    f87c:	46a8      	mov	r8, r5
    f87e:	e7b8      	b.n	f7f2 <isr+0x173a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    f880:	213e      	movs	r1, #62	; 0x3e
    f882:	f7fb fa7f 	bl	ad84 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f886:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
    f88a:	f7fb fba1 	bl	afd0 <connection_release>
			_radio.conn_curr = NULL;
    f88e:	f8c4 7cfc 	str.w	r7, [r4, #3324]	; 0xcfc
    f892:	e69e      	b.n	f5d2 <isr+0x151a>
		if (!_radio.conn_curr->supervision_expire) {
    f894:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    f898:	f1b8 0f00 	cmp.w	r8, #0
    f89c:	d1ee      	bne.n	f87c <isr+0x17c4>
			_radio.conn_curr->supervision_expire =
    f89e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    f8a0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    f8a4:	4645      	mov	r5, r8
    f8a6:	e7a4      	b.n	f7f2 <isr+0x173a>
						_radio.conn_curr->slave.force |=
    f8a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f8ac:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    f8ae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    f8b2:	b123      	cbz	r3, f8be <isr+0x1806>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    f8b4:	429e      	cmp	r6, r3
    f8b6:	d24e      	bcs.n	f956 <isr+0x189e>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    f8b8:	1b9b      	subs	r3, r3, r6
    f8ba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    f8be:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    f8c2:	b123      	cbz	r3, f8ce <isr+0x1816>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    f8c4:	429e      	cmp	r6, r3
    f8c6:	d248      	bcs.n	f95a <isr+0x18a2>
			_radio.conn_curr->apto_expire -= elapsed_event;
    f8c8:	1b9b      	subs	r3, r3, r6
    f8ca:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    f8ce:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
    f8d2:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    f8d6:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    f8da:	b123      	cbz	r3, f8e6 <isr+0x182e>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    f8dc:	429e      	cmp	r6, r3
    f8de:	d24e      	bcs.n	f97e <isr+0x18c6>
			_radio.conn_curr->appto_expire -= elapsed_event;
    f8e0:	1b9e      	subs	r6, r3, r6
    f8e2:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f8e6:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    f8ea:	428b      	cmp	r3, r1
    f8ec:	d006      	beq.n	f8fc <isr+0x1844>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    f8ee:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f8f2:	3b01      	subs	r3, #1
    f8f4:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    f8f6:	bf9c      	itt	ls
    f8f8:	2300      	movls	r3, #0
    f8fa:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    f8fc:	b917      	cbnz	r7, f904 <isr+0x184c>
    f8fe:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    f900:	455b      	cmp	r3, fp
    f902:	d04e      	beq.n	f9a2 <isr+0x18ea>
		lazy = _radio.conn_curr->latency_event + 1;
    f904:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    f906:	3301      	adds	r3, #1
    f908:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    f90a:	b935      	cbnz	r5, f91a <isr+0x1862>
    f90c:	f1b8 0f00 	cmp.w	r8, #0
    f910:	d103      	bne.n	f91a <isr+0x1862>
    f912:	b913      	cbnz	r3, f91a <isr+0x1862>
	    (lazy != 0) || (force != 0)) {
    f914:	2f00      	cmp	r7, #0
    f916:	f43f ae5c 	beq.w	f5d2 <isr+0x151a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f91a:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    f91e:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f920:	3207      	adds	r2, #7
		ticker_status =
    f922:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f924:	b2d6      	uxtb	r6, r2
		ticker_status =
    f926:	4a24      	ldr	r2, [pc, #144]	; (f9b8 <isr+0x1900>)
    f928:	9205      	str	r2, [sp, #20]
    f92a:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    f92c:	9606      	str	r6, [sp, #24]
		ticker_status =
    f92e:	9704      	str	r7, [sp, #16]
    f930:	9102      	str	r1, [sp, #8]
    f932:	9101      	str	r1, [sp, #4]
    f934:	f8cd 8000 	str.w	r8, [sp]
    f938:	4632      	mov	r2, r6
    f93a:	4608      	mov	r0, r1
    f93c:	f7f8 fde8 	bl	8510 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f940:	f030 0302 	bics.w	r3, r0, #2
    f944:	f43f ae45 	beq.w	f5d2 <isr+0x151a>
    f948:	7ca3      	ldrb	r3, [r4, #18]
    f94a:	429e      	cmp	r6, r3
    f94c:	e69e      	b.n	f68c <isr+0x15d4>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f94e:	2108      	movs	r1, #8
    f950:	e6f5      	b.n	f73e <isr+0x1686>
				force = 1;
    f952:	2701      	movs	r7, #1
    f954:	e7ab      	b.n	f8ae <isr+0x17f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    f956:	2122      	movs	r1, #34	; 0x22
    f958:	e6f1      	b.n	f73e <isr+0x1686>
			_radio.conn_curr->apto_expire = 0;
    f95a:	2300      	movs	r3, #0
    f95c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    f960:	2002      	movs	r0, #2
    f962:	f7fa fb6d 	bl	a040 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    f966:	2800      	cmp	r0, #0
    f968:	f43e abfe 	beq.w	e168 <isr+0xb0>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    f96c:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
    f970:	8c1b      	ldrh	r3, [r3, #32]
    f972:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    f974:	230a      	movs	r3, #10
    f976:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
    f978:	f7fb fa2c 	bl	add4 <packet_rx_enqueue>
    f97c:	e7a7      	b.n	f8ce <isr+0x1816>
			_radio.conn_curr->appto_expire = 0;
    f97e:	2300      	movs	r3, #0
    f980:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    f984:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    f988:	2b00      	cmp	r3, #0
    f98a:	d1ac      	bne.n	f8e6 <isr+0x182e>
    f98c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    f990:	428b      	cmp	r3, r1
    f992:	d1ac      	bne.n	f8ee <isr+0x1836>
				_radio.conn_curr->llcp_type = LLCP_PING;
    f994:	2307      	movs	r3, #7
    f996:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    f99a:	1e4b      	subs	r3, r1, #1
    f99c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    f9a0:	e7a1      	b.n	f8e6 <isr+0x182e>
	lazy = 0;
    f9a2:	463b      	mov	r3, r7
    f9a4:	e7b1      	b.n	f90a <isr+0x1852>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    f9a6:	3b04      	subs	r3, #4
    f9a8:	2b01      	cmp	r3, #1
    f9aa:	f63e abdd 	bhi.w	e168 <isr+0xb0>
		_radio.state = STATE_NONE;
    f9ae:	2300      	movs	r3, #0
    f9b0:	7523      	strb	r3, [r4, #20]
    f9b2:	f7fe bc29 	b.w	e208 <isr+0x150>
    f9b6:	bf00      	nop
    f9b8:	0000b1a1 	.word	0x0000b1a1
    f9bc:	1afd498d 	.word	0x1afd498d
    f9c0:	00000007 	.word	0x00000007
    f9c4:	3b9aca00 	.word	0x3b9aca00

0000f9c8 <radio_init>:
{
    f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    f9cc:	4e3e      	ldr	r6, [pc, #248]	; (fac8 <radio_init+0x100>)
{
    f9ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f9d0:	f89d c01c 	ldrb.w	ip, [sp, #28]
    f9d4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    f9d8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    f9dc:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    f9e0:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    f9e2:	f44f 70aa 	mov.w	r0, #340	; 0x154
    f9e6:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    f9ea:	f886 1d08 	strb.w	r1, [r6, #3336]	; 0xd08
	_radio.conn_pool = mem_radio;
    f9ee:	f8c6 4cf0 	str.w	r4, [r6, #3312]	; 0xcf0
	mem_radio_end = mem_radio + mem_size;
    f9f2:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    f9f4:	f10c 0401 	add.w	r4, ip, #1
    f9f8:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    f9fa:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    f9fc:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    fa00:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    fa04:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
	rx_count_max += 3;
    fa08:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fa0a:	bf98      	it	ls
    fa0c:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    fa10:	f8a6 8d1c 	strh.w	r8, [r6, #3356]	; 0xd1c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    fa14:	bf88      	it	hi
    fa16:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    fa1a:	f886 2d3c 	strb.w	r2, [r6, #3388]	; 0xd3c
		_radio.packet_rx_data_pool_size =
    fa1e:	bf8c      	ite	hi
    fa20:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fa24:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    fa28:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    fa2c:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    fa30:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    fa34:	bf8c      	ite	hi
    fa36:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    fa3a:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    fa3c:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    fa40:	f8a6 2d1e 	strh.w	r2, [r6, #3358]	; 0xd1e
	_radio.packet_tx_count = (tx_count_max + 1);
    fa44:	f886 cd5c 	strb.w	ip, [r6, #3420]	; 0xd5c
	_radio.packet_rx = (void *)mem_radio;
    fa48:	f8c6 0d24 	str.w	r0, [r6, #3364]	; 0xd24
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fa4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    fa50:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fa54:	f8b6 4d1e 	ldrh.w	r4, [r6, #3358]	; 0xd1e
	_radio.pkt_tx = (void *)mem_radio;
    fa58:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fa5c:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fa5e:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    fa62:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    fa66:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fa68:	f8a6 2d20 	strh.w	r2, [r6, #3360]	; 0xd20
	_radio.pkt_rx_data_pool = mem_radio;
    fa6c:	f8c6 0d14 	str.w	r0, [r6, #3348]	; 0xd14
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fa70:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    fa74:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fa76:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    fa7a:	f8c6 0d2c 	str.w	r0, [r6, #3372]	; 0xd2c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    fa7e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fa82:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    fa86:	f8c6 0d40 	str.w	r0, [r6, #3392]	; 0xd40
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fa8a:	340a      	adds	r4, #10
    fa8c:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    fa90:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    fa92:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    fa94:	f8a6 4d50 	strh.w	r4, [r6, #3408]	; 0xd50
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    fa98:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    fa9c:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    fa9e:	f886 3cf8 	strb.w	r3, [r6, #3320]	; 0xcf8
	_radio.packet_rx_count = (rx_count_max + 1);
    faa2:	f886 ed28 	strb.w	lr, [r6, #3368]	; 0xd28
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    faa6:	f886 2d22 	strb.w	r2, [r6, #3362]	; 0xd22
	_radio.pkt_tx_data_pool = mem_radio;
    faaa:	f8c6 0d48 	str.w	r0, [r6, #3400]	; 0xd48
	if (retcode) {
    faae:	d003      	beq.n	fab8 <radio_init+0xf0>
		return (retcode + mem_size);
    fab0:	442c      	add	r4, r5
}
    fab2:	4620      	mov	r0, r4
    fab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    fab8:	2301      	movs	r3, #1
    faba:	f886 3d6a 	strb.w	r3, [r6, #3434]	; 0xd6a
	common_init();
    fabe:	f7fa fb1d 	bl	a0fc <common_init>
	radio_setup();
    fac2:	f002 fe9d 	bl	12800 <radio_setup>
	return retcode;
    fac6:	e7f4      	b.n	fab2 <radio_init+0xea>
    fac8:	200008e0 	.word	0x200008e0

0000facc <ll_reset>:
{
    facc:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    face:	2103      	movs	r1, #3
    fad0:	2005      	movs	r0, #5
    fad2:	f7fa fbe9 	bl	a2a8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    fad6:	2104      	movs	r1, #4
    fad8:	2006      	movs	r0, #6
    fada:	f7fa fbe5 	bl	a2a8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    fade:	4c22      	ldr	r4, [pc, #136]	; (fb68 <ll_reset+0x9c>)
    fae0:	2500      	movs	r5, #0
    fae2:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    fae6:	b2ab      	uxth	r3, r5
    fae8:	429a      	cmp	r2, r3
    faea:	f105 0501 	add.w	r5, r5, #1
    faee:	d835      	bhi.n	fb5c <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    faf0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    faf4:	f36f 13c7 	bfc	r3, #7, #1
    faf8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    fafc:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	_radio.advertiser.conn = NULL;
    fb00:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    fb02:	f360 0300 	bfi	r3, r0, #0, #1
    fb06:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fb0a:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    fb0e:	f8b4 3d1e 	ldrh.w	r3, [r4, #3358]	; 0xd1e
    fb12:	fbb3 f3f2 	udiv	r3, r3, r2
    fb16:	f884 3d22 	strb.w	r3, [r4, #3362]	; 0xd22
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fb1a:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
	_radio.packet_rx_last = 0;
    fb1e:	f884 0d29 	strb.w	r0, [r4, #3369]	; 0xd29
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fb22:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    fb24:	f884 0d5d 	strb.w	r0, [r4, #3421]	; 0xd5d
	_radio.packet_release_last = 0;
    fb28:	f884 0d60 	strb.w	r0, [r4, #3424]	; 0xd60
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    fb2c:	f884 3d3c 	strb.w	r3, [r4, #3388]	; 0xd3c
	_radio.fc_ack = _radio.fc_req;
    fb30:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	_radio.advertiser.conn = NULL;
    fb34:	f8c4 0c18 	str.w	r0, [r4, #3096]	; 0xc18
	_radio.scanner.conn = NULL;
    fb38:	f8c4 0c54 	str.w	r0, [r4, #3156]	; 0xc54
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    fb3c:	f8a4 2d20 	strh.w	r2, [r4, #3360]	; 0xd20
	_radio.packet_rx_acquire = 0;
    fb40:	f884 0d2a 	strb.w	r0, [r4, #3370]	; 0xd2a
	_radio.packet_tx_last = 0;
    fb44:	f884 0d5e 	strb.w	r0, [r4, #3422]	; 0xd5e
	_radio.packet_release_first = 0;
    fb48:	f884 0d5f 	strb.w	r0, [r4, #3423]	; 0xd5f
	_radio.fc_ack = _radio.fc_req;
    fb4c:	f884 3d69 	strb.w	r3, [r4, #3433]	; 0xd69
	ll_filter_reset(false);
    fb50:	f002 fc50 	bl	123f4 <ll_filter_reset>
}
    fb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    fb58:	f7fa bad0 	b.w	a0fc <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    fb5c:	1da8      	adds	r0, r5, #6
    fb5e:	21ff      	movs	r1, #255	; 0xff
    fb60:	b2c0      	uxtb	r0, r0
    fb62:	f7fa fba1 	bl	a2a8 <role_disable>
    fb66:	e7bc      	b.n	fae2 <ll_reset+0x16>
    fb68:	200008e0 	.word	0x200008e0

0000fb6c <radio_adv_data_get>:
}
    fb6c:	4800      	ldr	r0, [pc, #0]	; (fb70 <radio_adv_data_get+0x4>)
    fb6e:	4770      	bx	lr
    fb70:	2000090c 	.word	0x2000090c

0000fb74 <radio_aux_adv_data_get>:
}
    fb74:	4800      	ldr	r0, [pc, #0]	; (fb78 <radio_aux_adv_data_get+0x4>)
    fb76:	4770      	bx	lr
    fb78:	20000b10 	.word	0x20000b10

0000fb7c <radio_chain_adv_data_get>:
}
    fb7c:	4800      	ldr	r0, [pc, #0]	; (fb80 <radio_chain_adv_data_get+0x4>)
    fb7e:	4770      	bx	lr
    fb80:	20000d14 	.word	0x20000d14

0000fb84 <radio_scan_data_get>:
}
    fb84:	4800      	ldr	r0, [pc, #0]	; (fb88 <radio_scan_data_get+0x4>)
    fb86:	4770      	bx	lr
    fb88:	200012f2 	.word	0x200012f2

0000fb8c <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    fb8c:	4b02      	ldr	r3, [pc, #8]	; (fb98 <ll_adv_is_enabled+0xc>)
    fb8e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    fb92:	09c0      	lsrs	r0, r0, #7
    fb94:	4770      	bx	lr
    fb96:	bf00      	nop
    fb98:	200008e0 	.word	0x200008e0

0000fb9c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    fb9c:	4b05      	ldr	r3, [pc, #20]	; (fbb4 <radio_adv_filter_pol_get+0x18>)
    fb9e:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    fba2:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    fba4:	bfba      	itte	lt
    fba6:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    fbaa:	f000 0003 	andlt.w	r0, r0, #3
    fbae:	2000      	movge	r0, #0
}
    fbb0:	4770      	bx	lr
    fbb2:	bf00      	nop
    fbb4:	200008e0 	.word	0x200008e0

0000fbb8 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fbb8:	4a09      	ldr	r2, [pc, #36]	; (fbe0 <ll_scan_is_enabled+0x28>)
    fbba:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
    fbbe:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
	       (_radio.scanner.conn ? BIT(2) : 0);
    fbc2:	f8d2 2c54 	ldr.w	r2, [r2, #3156]	; 0xc54
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fbc6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    fbca:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    fbcc:	f003 0301 	and.w	r3, r3, #1
    fbd0:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    fbd4:	bf14      	ite	ne
    fbd6:	2004      	movne	r0, #4
    fbd8:	2000      	moveq	r0, #0
}
    fbda:	4318      	orrs	r0, r3
    fbdc:	4770      	bx	lr
    fbde:	bf00      	nop
    fbe0:	200008e0 	.word	0x200008e0

0000fbe4 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    fbe4:	4b05      	ldr	r3, [pc, #20]	; (fbfc <radio_scan_filter_pol_get+0x18>)
    fbe6:	f893 0c2c 	ldrb.w	r0, [r3, #3116]	; 0xc2c
    fbea:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    fbee:	bf1c      	itt	ne
    fbf0:	f893 0c2d 	ldrbne.w	r0, [r3, #3117]	; 0xc2d
    fbf4:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    fbf8:	4770      	bx	lr
    fbfa:	bf00      	nop
    fbfc:	200008e0 	.word	0x200008e0

0000fc00 <ll_conn_update>:
{
    fc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc04:	460c      	mov	r4, r1
    fc06:	4690      	mov	r8, r2
    fc08:	461d      	mov	r5, r3
    fc0a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    fc0e:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
    fc12:	f7fa fb33 	bl	a27c <connection_get>
	if (!conn) {
    fc16:	b330      	cbz	r0, fc66 <ll_conn_update+0x66>
	if (!cmd) {
    fc18:	2c00      	cmp	r4, #0
    fc1a:	d14a      	bne.n	fcb2 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
    fc1c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    fc20:	06d9      	lsls	r1, r3, #27
    fc22:	d407      	bmi.n	fc34 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
    fc24:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
    fc28:	069a      	lsls	r2, r3, #26
    fc2a:	d541      	bpl.n	fcb0 <ll_conn_update+0xb0>
		     (conn->llcp_features &
    fc2c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
    fc30:	079b      	lsls	r3, r3, #30
    fc32:	d43d      	bmi.n	fcb0 <ll_conn_update+0xb0>
		} else if (conn->role) {
    fc34:	f990 301d 	ldrsb.w	r3, [r0, #29]
    fc38:	2b00      	cmp	r3, #0
    fc3a:	da17      	bge.n	fc6c <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    fc3c:	201a      	movs	r0, #26
    fc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
    fc42:	428b      	cmp	r3, r1
    fc44:	d00f      	beq.n	fc66 <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
    fc46:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
    fc4a:	f003 0207 	and.w	r2, r3, #7
    fc4e:	2a03      	cmp	r2, #3
    fc50:	d109      	bne.n	fc66 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    fc52:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    fc56:	b2db      	uxtb	r3, r3
    fc58:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
    fc5c:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
    fc60:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    fc64:	e021      	b.n	fcaa <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fc66:	200c      	movs	r0, #12
    fc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
    fc6c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    fc70:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    fc74:	429a      	cmp	r2, r3
    fc76:	d1f6      	bne.n	fc66 <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    fc78:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
    fc7c:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
    fc80:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
    fc82:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    fc84:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
    fc88:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
    fc8c:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
    fc8e:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    fc92:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
    fc96:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
    fc9a:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
    fc9e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    fca2:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
    fca6:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
    fcaa:	2000      	movs	r0, #0
    fcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
    fcb0:	2401      	movs	r4, #1
		cmd--;
    fcb2:	3c01      	subs	r4, #1
		if (cmd) {
    fcb4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    fcb8:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    fcbc:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    fcc0:	d1bf      	bne.n	fc42 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
    fcc2:	4299      	cmp	r1, r3
    fcc4:	d1cf      	bne.n	fc66 <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    fcc6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
    fcca:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
    fcce:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    fcd2:	b2db      	uxtb	r3, r3
    fcd4:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
    fcd8:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
    fcda:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
    fcde:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
    fce2:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
    fce6:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
    fcea:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
    fcee:	e7dc      	b.n	fcaa <ll_conn_update+0xaa>

0000fcf0 <ll_chm_get>:
{
    fcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcf2:	460d      	mov	r5, r1
	conn = connection_get(handle);
    fcf4:	f7fa fac2 	bl	a27c <connection_get>
	if (!conn) {
    fcf8:	4604      	mov	r4, r0
    fcfa:	b160      	cbz	r0, fd16 <ll_chm_get+0x26>
		conn->chm_update = 0;
    fcfc:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    fcfe:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
    fd02:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    fd04:	2205      	movs	r2, #5
    fd06:	4631      	mov	r1, r6
    fd08:	4628      	mov	r0, r5
    fd0a:	f7f0 fc69 	bl	5e0 <memcpy>
	} while (conn->chm_update);
    fd0e:	7f20      	ldrb	r0, [r4, #28]
    fd10:	2800      	cmp	r0, #0
    fd12:	d1f6      	bne.n	fd02 <ll_chm_get+0x12>
    fd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    fd16:	2001      	movs	r0, #1
}
    fd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fd1a <ll_start_enc_req_send>:
{
    fd1a:	b570      	push	{r4, r5, r6, lr}
    fd1c:	460d      	mov	r5, r1
    fd1e:	4616      	mov	r6, r2
	conn = connection_get(handle);
    fd20:	f7fa faac 	bl	a27c <connection_get>
	if (!conn) {
    fd24:	4604      	mov	r4, r0
    fd26:	b908      	cbnz	r0, fd2c <ll_start_enc_req_send+0x12>
		return 1;
    fd28:	2001      	movs	r0, #1
    fd2a:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
    fd2c:	b315      	cbz	r5, fd74 <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
    fd2e:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
    fd32:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    fd36:	d110      	bne.n	fd5a <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
    fd38:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    fd3c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    fd40:	4293      	cmp	r3, r2
    fd42:	d1f1      	bne.n	fd28 <ll_start_enc_req_send+0xe>
			conn->llcp_req++;
    fd44:	3301      	adds	r3, #1
			conn->llcp_type = LLCP_ENCRYPTION;
    fd46:	2203      	movs	r2, #3
			conn->llcp.encryption.error_code = error_code;
    fd48:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			conn->llcp.encryption.initiate = 0;
    fd4c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
			conn->llcp_req++;
    fd50:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
			conn->llcp_type = LLCP_ENCRYPTION;
    fd54:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
    fd58:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
    fd5a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    fd5e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    fd62:	4293      	cmp	r3, r2
    fd64:	d1e0      	bne.n	fd28 <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
    fd66:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
    fd68:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
			conn->llcp_terminate.req++;
    fd6c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	return 0;
    fd70:	2000      	movs	r0, #0
    fd72:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    fd74:	2210      	movs	r2, #16
    fd76:	4631      	mov	r1, r6
    fd78:	3084      	adds	r0, #132	; 0x84
    fd7a:	f7f0 fc31 	bl	5e0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
    fd7e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    fd82:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    fd86:	4293      	cmp	r3, r2
    fd88:	d1ce      	bne.n	fd28 <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
    fd8a:	2203      	movs	r2, #3
		conn->llcp_req++;
    fd8c:	3301      	adds	r3, #1
		conn->llcp.encryption.error_code = 0;
    fd8e:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
		conn->llcp.encryption.initiate = 0;
    fd92:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
    fd96:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
    fd9a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    fd9e:	e7e7      	b.n	fd70 <ll_start_enc_req_send+0x56>

0000fda0 <ll_feature_req_send>:
{
    fda0:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    fda2:	f7fa fa6b 	bl	a27c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    fda6:	b168      	cbz	r0, fdc4 <ll_feature_req_send+0x24>
    fda8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    fdac:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    fdb0:	4293      	cmp	r3, r2
    fdb2:	d107      	bne.n	fdc4 <ll_feature_req_send+0x24>
	conn->llcp_req++;
    fdb4:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    fdb6:	2204      	movs	r2, #4
	conn->llcp_req++;
    fdb8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    fdbc:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    fdc0:	2000      	movs	r0, #0
    fdc2:	bd08      	pop	{r3, pc}
		return 1;
    fdc4:	2001      	movs	r0, #1
}
    fdc6:	bd08      	pop	{r3, pc}

0000fdc8 <ll_version_ind_send>:
{
    fdc8:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    fdca:	f7fa fa57 	bl	a27c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    fdce:	b168      	cbz	r0, fdec <ll_version_ind_send+0x24>
    fdd0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    fdd4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    fdd8:	4293      	cmp	r3, r2
    fdda:	d107      	bne.n	fdec <ll_version_ind_send+0x24>
	conn->llcp_req++;
    fddc:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    fdde:	2205      	movs	r2, #5
	conn->llcp_req++;
    fde0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    fde4:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    fde8:	2000      	movs	r0, #0
    fdea:	bd08      	pop	{r3, pc}
		return 1;
    fdec:	2001      	movs	r0, #1
}
    fdee:	bd08      	pop	{r3, pc}

0000fdf0 <ll_terminate_ind_send>:
{
    fdf0:	b510      	push	{r4, lr}
    fdf2:	460c      	mov	r4, r1
	conn = connection_get(handle);
    fdf4:	f7fa fa42 	bl	a27c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    fdf8:	b160      	cbz	r0, fe14 <ll_terminate_ind_send+0x24>
    fdfa:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
    fdfe:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
    fe02:	4293      	cmp	r3, r2
    fe04:	d106      	bne.n	fe14 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
    fe06:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
    fe08:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
    fe0c:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
    fe10:	2000      	movs	r0, #0
    fe12:	bd10      	pop	{r4, pc}
		return 1;
    fe14:	2001      	movs	r0, #1
}
    fe16:	bd10      	pop	{r4, pc}

0000fe18 <ll_tx_pwr_lvl_get>:
{
    fe18:	b510      	push	{r4, lr}
    fe1a:	4614      	mov	r4, r2
	conn = connection_get(handle);
    fe1c:	f7fa fa2e 	bl	a27c <connection_get>
	if (!conn) {
    fe20:	b110      	cbz	r0, fe28 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    fe22:	2000      	movs	r0, #0
    fe24:	7020      	strb	r0, [r4, #0]
	return 0;
    fe26:	bd10      	pop	{r4, pc}
		return 1;
    fe28:	2001      	movs	r0, #1
}
    fe2a:	bd10      	pop	{r4, pc}

0000fe2c <ll_apto_get>:
{
    fe2c:	b510      	push	{r4, lr}
    fe2e:	460c      	mov	r4, r1
	conn = connection_get(handle);
    fe30:	f7fa fa24 	bl	a27c <connection_get>
	if (!conn) {
    fe34:	b160      	cbz	r0, fe50 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    fe36:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    fe38:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    fe3c:	435a      	muls	r2, r3
    fe3e:	237d      	movs	r3, #125	; 0x7d
    fe40:	4353      	muls	r3, r2
	return 0;
    fe42:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    fe44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe48:	fb93 f3f2 	sdiv	r3, r3, r2
    fe4c:	8023      	strh	r3, [r4, #0]
	return 0;
    fe4e:	bd10      	pop	{r4, pc}
		return 1;
    fe50:	2001      	movs	r0, #1
}
    fe52:	bd10      	pop	{r4, pc}

0000fe54 <ll_apto_set>:
{
    fe54:	b510      	push	{r4, lr}
    fe56:	460c      	mov	r4, r1
	conn = connection_get(handle);
    fe58:	f7fa fa10 	bl	a27c <connection_get>
	if (!conn) {
    fe5c:	b170      	cbz	r0, fe7c <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
    fe5e:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    fe60:	f240 43e2 	movw	r3, #1250	; 0x4e2
    fe64:	4353      	muls	r3, r2
    fe66:	f242 7110 	movw	r1, #10000	; 0x2710
    fe6a:	fb01 3404 	mla	r4, r1, r4, r3
    fe6e:	3c01      	subs	r4, #1
    fe70:	fb94 f4f3 	sdiv	r4, r4, r3
    fe74:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
    fe78:	2000      	movs	r0, #0
    fe7a:	bd10      	pop	{r4, pc}
		return 1;
    fe7c:	2001      	movs	r0, #1
}
    fe7e:	bd10      	pop	{r4, pc}

0000fe80 <ll_length_req_send>:
{
    fe80:	b570      	push	{r4, r5, r6, lr}
    fe82:	460e      	mov	r6, r1
    fe84:	4615      	mov	r5, r2
	conn = connection_get(handle);
    fe86:	f7fa f9f9 	bl	a27c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    fe8a:	b1d0      	cbz	r0, fec2 <ll_length_req_send+0x42>
    fe8c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    fe90:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    fe94:	429a      	cmp	r2, r3
    fe96:	d114      	bne.n	fec2 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
    fe98:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    fe9c:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    fea0:	4293      	cmp	r3, r2
    fea2:	d10e      	bne.n	fec2 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    fea4:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
    fea8:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
    feac:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    feae:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
    feb2:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    feb6:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
    feba:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
    febe:	2000      	movs	r0, #0
    fec0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    fec2:	2001      	movs	r0, #1
}
    fec4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fec8 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
    fec8:	4b03      	ldr	r3, [pc, #12]	; (fed8 <ll_length_default_get+0x10>)
    feca:	f8b3 2d0a 	ldrh.w	r2, [r3, #3338]	; 0xd0a
    fece:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    fed0:	f8b3 3d0c 	ldrh.w	r3, [r3, #3340]	; 0xd0c
    fed4:	800b      	strh	r3, [r1, #0]
    fed6:	4770      	bx	lr
    fed8:	200008e0 	.word	0x200008e0

0000fedc <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
    fedc:	4b03      	ldr	r3, [pc, #12]	; (feec <ll_length_default_set+0x10>)
    fede:	f8a3 0d0a 	strh.w	r0, [r3, #3338]	; 0xd0a
	_radio.default_tx_time = max_tx_time;
    fee2:	f8a3 1d0c 	strh.w	r1, [r3, #3340]	; 0xd0c
}
    fee6:	2000      	movs	r0, #0
    fee8:	4770      	bx	lr
    feea:	bf00      	nop
    feec:	200008e0 	.word	0x200008e0

0000fef0 <ll_length_max_get>:
{
    fef0:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    fef2:	24fb      	movs	r4, #251	; 0xfb
    fef4:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    fef6:	f244 2090 	movw	r0, #17040	; 0x4290
    fefa:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    fefc:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    fefe:	8018      	strh	r0, [r3, #0]
    ff00:	bd10      	pop	{r4, pc}

0000ff02 <ll_phy_get>:
{
    ff02:	b538      	push	{r3, r4, r5, lr}
    ff04:	460d      	mov	r5, r1
    ff06:	4614      	mov	r4, r2
	conn = connection_get(handle);
    ff08:	f7fa f9b8 	bl	a27c <connection_get>
	if (!conn) {
    ff0c:	b158      	cbz	r0, ff26 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
    ff0e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    ff12:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    ff16:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
    ff18:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    ff1c:	f3c3 0302 	ubfx	r3, r3, #0, #3
    ff20:	7023      	strb	r3, [r4, #0]
	return 0;
    ff22:	2000      	movs	r0, #0
    ff24:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
    ff26:	2001      	movs	r0, #1
}
    ff28:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ff2c <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
    ff2c:	4b03      	ldr	r3, [pc, #12]	; (ff3c <ll_phy_default_set+0x10>)
    ff2e:	f8a3 0d0e 	strh.w	r0, [r3, #3342]	; 0xd0e
	_radio.default_phy_rx = rx;
    ff32:	f8a3 1d10 	strh.w	r1, [r3, #3344]	; 0xd10
}
    ff36:	2000      	movs	r0, #0
    ff38:	4770      	bx	lr
    ff3a:	bf00      	nop
    ff3c:	200008e0 	.word	0x200008e0

0000ff40 <ll_phy_req_send>:
{
    ff40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff44:	4689      	mov	r9, r1
    ff46:	4690      	mov	r8, r2
    ff48:	461f      	mov	r7, r3
	conn = connection_get(handle);
    ff4a:	f7fa f997 	bl	a27c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    ff4e:	b320      	cbz	r0, ff9a <ll_phy_req_send+0x5a>
    ff50:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    ff54:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    ff58:	429a      	cmp	r2, r3
    ff5a:	d11e      	bne.n	ff9a <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    ff5c:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    ff60:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
    ff64:	429d      	cmp	r5, r3
    ff66:	d118      	bne.n	ff9a <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    ff68:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
    ff6c:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
    ff70:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
    ff74:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
    ff78:	f046 0102 	orr.w	r1, r6, #2
    ff7c:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
    ff80:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
    ff82:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
    ff84:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
    ff88:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
    ff8c:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
    ff90:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
    ff94:	2000      	movs	r0, #0
    ff96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
    ff9a:	2001      	movs	r0, #1
}
    ff9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ffa0 <ll_rx_get>:
{
    ffa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ffa4:	4605      	mov	r5, r0
    ffa6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    ffa8:	4918      	ldr	r1, [pc, #96]	; (1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>)
    ffaa:	f8d1 3d34 	ldr.w	r3, [r1, #3380]	; 0xd34
    ffae:	f8d1 2d38 	ldr.w	r2, [r1, #3384]	; 0xd38
    ffb2:	4293      	cmp	r3, r2
    ffb4:	460f      	mov	r7, r1
    ffb6:	d01f      	beq.n	fff8 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    ffb8:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    ffbc:	f601 515f 	addw	r1, r1, #3423	; 0xd5f
    ffc0:	f898 2000 	ldrb.w	r2, [r8]
    ffc4:	f7fa f910 	bl	a1e8 <tx_cmplt_get>
		if (!cmplt) {
    ffc8:	4604      	mov	r4, r0
    ffca:	b9e0      	cbnz	r0, 10006 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7>
			first = _radio.packet_release_first;
    ffcc:	ae02      	add	r6, sp, #8
    ffce:	f897 3d5f 	ldrb.w	r3, [r7, #3423]	; 0xd5f
    ffd2:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    ffd6:	f897 2d60 	ldrb.w	r2, [r7, #3424]	; 0xd60
    ffda:	4631      	mov	r1, r6
    ffdc:	f10d 0006 	add.w	r0, sp, #6
    ffe0:	f7fa f902 	bl	a1e8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    ffe4:	b934      	cbnz	r4, fff4 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    ffe6:	b928      	cbnz	r0, fff4 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    ffe8:	f8c5 8000 	str.w	r8, [r5]
}
    ffec:	4620      	mov	r0, r4
    ffee:	b002      	add	sp, #8
    fff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    fff4:	4604      	mov	r4, r0
    fff6:	e7ee      	b.n	ffd6 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    fff8:	f891 2d60 	ldrb.w	r2, [r1, #3424]	; 0xd60
    fffc:	f601 515f 	addw	r1, r1, #3423	; 0xd5f
   10000:	f7fa f8f2 	bl	a1e8 <tx_cmplt_get>
   10004:	4604      	mov	r4, r0
		*node_rx = NULL;
   10006:	2300      	movs	r3, #0
   10008:	602b      	str	r3, [r5, #0]
   1000a:	e7ef      	b.n	ffec <ll_rx_get+0x4c>
   1000c:	200008e0 	.word	0x200008e0

00010010 <ll_rx_mem_release>:
{
   10010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   10014:	4c17      	ldr	r4, [pc, #92]	; (10074 <ll_rx_mem_release+0x64>)
{
   10016:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   10018:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1001a:	f6a4 5618 	subw	r6, r4, #3352	; 0xd18
			mem_release(conn, &_radio.conn_free);
   1001e:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   10022:	b928      	cbnz	r0, 10030 <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
   10024:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   10026:	20ff      	movs	r0, #255	; 0xff
}
   10028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   1002c:	f7fa b81a 	b.w	a064 <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   10030:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   10032:	f8d0 8000 	ldr.w	r8, [r0]
   10036:	2a0c      	cmp	r2, #12
   10038:	d807      	bhi.n	1004a <ll_rx_mem_release+0x3a>
   1003a:	2301      	movs	r3, #1
   1003c:	4093      	lsls	r3, r2
   1003e:	f641 727e 	movw	r2, #8062	; 0x1f7e
   10042:	4213      	tst	r3, r2
   10044:	d107      	bne.n	10056 <ll_rx_mem_release+0x46>
   10046:	061b      	lsls	r3, r3, #24
   10048:	d40a      	bmi.n	10060 <ll_rx_mem_release+0x50>
			LL_ASSERT(0);
   1004a:	4040      	eors	r0, r0
   1004c:	f380 8811 	msr	BASEPRI, r0
   10050:	f04f 0004 	mov.w	r0, #4
   10054:	df02      	svc	2
			mem_release(_node_rx_free,
   10056:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   10058:	f7f7 fbaf 	bl	77ba <mem_release>
{
   1005c:	4640      	mov	r0, r8
   1005e:	e7e0      	b.n	10022 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   10060:	88c2      	ldrh	r2, [r0, #6]
   10062:	f8d6 0cf0 	ldr.w	r0, [r6, #3312]	; 0xcf0
   10066:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1006a:	f7f7 fbc1 	bl	77f0 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1006e:	4639      	mov	r1, r7
   10070:	e7f2      	b.n	10058 <ll_rx_mem_release+0x48>
   10072:	bf00      	nop
   10074:	200015f8 	.word	0x200015f8

00010078 <do_radio_rx_fc_set>:
	if (req == ack) {
   10078:	4291      	cmp	r1, r2
{
   1007a:	b510      	push	{r4, lr}
   1007c:	4b14      	ldr	r3, [pc, #80]	; (100d0 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   1007e:	d119      	bne.n	100b4 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   10080:	f8d3 2d38 	ldr.w	r2, [r3, #3384]	; 0xd38
   10084:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	; 0xd34
   10088:	4294      	cmp	r4, r2
   1008a:	d111      	bne.n	100b0 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   1008c:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   1008e:	bf14      	ite	ne
   10090:	460a      	movne	r2, r1
   10092:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   10094:	3a01      	subs	r2, #1
   10096:	b2d2      	uxtb	r2, r2
   10098:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   1009c:	f883 2d69 	strb.w	r2, [r3, #3433]	; 0xd69
			if (req != _radio.fc_req) {
   100a0:	f893 2d68 	ldrb.w	r2, [r3, #3432]	; 0xd68
			_radio.fc_handle[--ack1] = handle;
   100a4:	f8a4 0d62 	strh.w	r0, [r4, #3426]	; 0xd62
			if (req != _radio.fc_req) {
   100a8:	4291      	cmp	r1, r2
   100aa:	d00f      	beq.n	100cc <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   100ac:	f883 1d69 	strb.w	r1, [r3, #3433]	; 0xd69
			return 1;
   100b0:	2001      	movs	r0, #1
   100b2:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   100b4:	b929      	cbnz	r1, 100c2 <do_radio_rx_fc_set+0x4a>
   100b6:	f8b3 3d66 	ldrh.w	r3, [r3, #3430]	; 0xd66
				return 1;
   100ba:	1a18      	subs	r0, r3, r0
   100bc:	bf18      	it	ne
   100be:	2001      	movne	r0, #1
   100c0:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   100c2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   100c6:	f8b3 3d60 	ldrh.w	r3, [r3, #3424]	; 0xd60
   100ca:	e7f6      	b.n	100ba <do_radio_rx_fc_set+0x42>
	return 0;
   100cc:	2000      	movs	r0, #0
}
   100ce:	bd10      	pop	{r4, pc}
   100d0:	200008e0 	.word	0x200008e0

000100d4 <radio_rx_fc_set>:
{
   100d4:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   100d6:	4b14      	ldr	r3, [pc, #80]	; (10128 <radio_rx_fc_set+0x54>)
   100d8:	f893 2d6a 	ldrb.w	r2, [r3, #3434]	; 0xd6a
{
   100dc:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   100de:	b302      	cbz	r2, 10122 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   100e0:	f893 2d68 	ldrb.w	r2, [r3, #3432]	; 0xd68
   100e4:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   100e6:	f893 2d69 	ldrb.w	r2, [r3, #3433]	; 0xd69
		if (fc) {
   100ea:	b135      	cbz	r5, 100fa <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   100ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   100f0:	4298      	cmp	r0, r3
   100f2:	d016      	beq.n	10122 <radio_rx_fc_set+0x4e>
}
   100f4:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   100f6:	f7ff bfbf 	b.w	10078 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   100fa:	f8d3 0d34 	ldr.w	r0, [r3, #3380]	; 0xd34
   100fe:	f8d3 4d38 	ldr.w	r4, [r3, #3384]	; 0xd38
   10102:	42a0      	cmp	r0, r4
   10104:	d10d      	bne.n	10122 <radio_rx_fc_set+0x4e>
   10106:	4291      	cmp	r1, r2
   10108:	d00b      	beq.n	10122 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1010a:	f8d3 4d38 	ldr.w	r4, [r3, #3384]	; 0xd38
			_radio.fc_ack = req;
   1010e:	f883 1d69 	strb.w	r1, [r3, #3433]	; 0xd69
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   10112:	42a0      	cmp	r0, r4
   10114:	d005      	beq.n	10122 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   10116:	f893 0d68 	ldrb.w	r0, [r3, #3432]	; 0xd68
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1011a:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   1011c:	bf08      	it	eq
   1011e:	f883 2d69 	strbeq.w	r2, [r3, #3433]	; 0xd69
}
   10122:	2000      	movs	r0, #0
   10124:	bc30      	pop	{r4, r5}
   10126:	4770      	bx	lr
   10128:	200008e0 	.word	0x200008e0

0001012c <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   1012c:	4801      	ldr	r0, [pc, #4]	; (10134 <ll_tx_mem_acquire+0x8>)
   1012e:	f7f7 bb2a 	b.w	7786 <mem_acquire>
   10132:	bf00      	nop
   10134:	2000162c 	.word	0x2000162c

00010138 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   10138:	4901      	ldr	r1, [pc, #4]	; (10140 <ll_tx_mem_release+0x8>)
   1013a:	f7f7 bb3e 	b.w	77ba <mem_release>
   1013e:	bf00      	nop
   10140:	2000162c 	.word	0x2000162c

00010144 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   10144:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   10146:	4d2b      	ldr	r5, [pc, #172]	; (101f4 <ll_tx_mem_enqueue+0xb0>)
   10148:	f895 4d5e 	ldrb.w	r4, [r5, #3422]	; 0xd5e
	if (last == _radio.packet_tx_count) {
   1014c:	f895 3d5c 	ldrb.w	r3, [r5, #3420]	; 0xd5c
	last = _radio.packet_tx_last + 1;
   10150:	3401      	adds	r4, #1
{
   10152:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   10154:	b2e4      	uxtb	r4, r4
{
   10156:	4607      	mov	r7, r0
   10158:	460e      	mov	r6, r1
		last = 0;
   1015a:	42a3      	cmp	r3, r4
   1015c:	bf08      	it	eq
   1015e:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   10160:	f7fa f88c 	bl	a27c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   10164:	2800      	cmp	r0, #0
   10166:	d042      	beq.n	101ee <ll_tx_mem_enqueue+0xaa>
   10168:	f895 3d5d 	ldrb.w	r3, [r5, #3421]	; 0xd5d
   1016c:	429c      	cmp	r4, r3
   1016e:	d03e      	beq.n	101ee <ll_tx_mem_enqueue+0xaa>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   10170:	f8b5 3d50 	ldrh.w	r3, [r5, #3408]	; 0xd50
   10174:	7972      	ldrb	r2, [r6, #5]
   10176:	3b07      	subs	r3, #7
   10178:	429a      	cmp	r2, r3
   1017a:	d905      	bls.n	10188 <ll_tx_mem_enqueue+0x44>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1017c:	4040      	eors	r0, r0
   1017e:	f380 8811 	msr	BASEPRI, r0
   10182:	f04f 0004 	mov.w	r0, #4
   10186:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   10188:	f895 2d5e 	ldrb.w	r2, [r5, #3422]	; 0xd5e
   1018c:	f8d5 3d54 	ldr.w	r3, [r5, #3412]	; 0xd54
   10190:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   10194:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   10198:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   1019a:	f885 4d5e 	strb.w	r4, [r5, #3422]	; 0xd5e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   1019e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   101a2:	2b00      	cmp	r3, #0
   101a4:	db02      	blt.n	101ac <ll_tx_mem_enqueue+0x68>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   101a6:	2000      	movs	r0, #0
}
   101a8:	b009      	add	sp, #36	; 0x24
   101aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   101ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   101ae:	2b00      	cmp	r3, #0
   101b0:	d0f9      	beq.n	101a6 <ll_tx_mem_enqueue+0x62>
   101b2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   101b6:	f012 0302 	ands.w	r3, r2, #2
   101ba:	d1f4      	bne.n	101a6 <ll_tx_mem_enqueue+0x62>
		conn->slave.latency_cancel = 1;
   101bc:	f042 0202 	orr.w	r2, r2, #2
   101c0:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   101c4:	f890 2020 	ldrb.w	r2, [r0, #32]
   101c8:	490b      	ldr	r1, [pc, #44]	; (101f8 <ll_tx_mem_enqueue+0xb4>)
   101ca:	9105      	str	r1, [sp, #20]
   101cc:	3207      	adds	r2, #7
   101ce:	2101      	movs	r1, #1
   101d0:	9006      	str	r0, [sp, #24]
   101d2:	9304      	str	r3, [sp, #16]
   101d4:	9103      	str	r1, [sp, #12]
   101d6:	9302      	str	r3, [sp, #8]
   101d8:	9301      	str	r3, [sp, #4]
   101da:	9300      	str	r3, [sp, #0]
   101dc:	4618      	mov	r0, r3
   101de:	b2d2      	uxtb	r2, r2
   101e0:	2103      	movs	r1, #3
   101e2:	f7f8 f995 	bl	8510 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   101e6:	f030 0302 	bics.w	r3, r0, #2
   101ea:	d1c7      	bne.n	1017c <ll_tx_mem_enqueue+0x38>
   101ec:	e7db      	b.n	101a6 <ll_tx_mem_enqueue+0x62>
		return 1;
   101ee:	2001      	movs	r0, #1
   101f0:	e7da      	b.n	101a8 <ll_tx_mem_enqueue+0x64>
   101f2:	bf00      	nop
   101f4:	200008e0 	.word	0x200008e0
   101f8:	0000b189 	.word	0x0000b189
   101fc:	00000000 	.word	0x00000000

00010200 <radio_adv_enable>:
{
   10200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10204:	b08f      	sub	sp, #60	; 0x3c
   10206:	4699      	mov	r9, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   10208:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
   1020a:	f8df b35c 	ldr.w	fp, [pc, #860]	; 10568 <radio_adv_enable+0x368>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1020e:	930d      	str	r3, [sp, #52]	; 0x34
	radio_ext_adv_enable_flag = false;
   10210:	4bcf      	ldr	r3, [pc, #828]	; (10550 <radio_adv_enable+0x350>)
{
   10212:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	radio_ext_adv_enable_flag = false;
   10216:	2400      	movs	r4, #0
   10218:	701c      	strb	r4, [r3, #0]
	if (_radio.advertiser.is_enabled) {
   1021a:	f99b 3028 	ldrsb.w	r3, [fp, #40]	; 0x28
   1021e:	42a3      	cmp	r3, r4
{
   10220:	4680      	mov	r8, r0
   10222:	4692      	mov	sl, r2
   10224:	465d      	mov	r5, fp
	if (_radio.advertiser.is_enabled) {
   10226:	da01      	bge.n	1022c <radio_adv_enable+0x2c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   10228:	200c      	movs	r0, #12
   1022a:	e1b2      	b.n	10592 <radio_adv_enable+0x392>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   1022c:	f89b 722f 	ldrb.w	r7, [fp, #559]	; 0x22f
   10230:	eb07 2707 	add.w	r7, r7, r7, lsl #8
   10234:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   10236:	f81b 3007 	ldrb.w	r3, [fp, r7]
   1023a:	f003 030f 	and.w	r3, r3, #15
   1023e:	2b01      	cmp	r3, #1
   10240:	f200 80bb 	bhi.w	103ba <radio_adv_enable+0x1ba>
		if (_radio.advertiser.conn) {
   10244:	f8db 6c18 	ldr.w	r6, [fp, #3096]	; 0xc18
   10248:	2e00      	cmp	r6, #0
   1024a:	d1ed      	bne.n	10228 <radio_adv_enable+0x28>
		link = mem_acquire(&_radio.link_rx_free);
   1024c:	f50b 6053 	add.w	r0, fp, #3376	; 0xd30
   10250:	f7f7 fa99 	bl	7786 <mem_acquire>
		if (!link) {
   10254:	900a      	str	r0, [sp, #40]	; 0x28
   10256:	b158      	cbz	r0, 10270 <radio_adv_enable+0x70>
		conn = mem_acquire(&_radio.conn_free);
   10258:	f60b 40f4 	addw	r0, fp, #3316	; 0xcf4
   1025c:	f7f7 fa93 	bl	7786 <mem_acquire>
		if (!conn) {
   10260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10262:	4604      	mov	r4, r0
   10264:	b930      	cbnz	r0, 10274 <radio_adv_enable+0x74>
			mem_release(link, &_radio.link_rx_free);
   10266:	f50b 6153 	add.w	r1, fp, #3376	; 0xd30
   1026a:	4610      	mov	r0, r2
   1026c:	f7f7 faa5 	bl	77ba <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   10270:	2007      	movs	r0, #7
   10272:	e18e      	b.n	10592 <radio_adv_enable+0x392>
		conn->handle = 0xFFFF;
   10274:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10278:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   1027a:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   1027e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   10282:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
   10284:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
   10286:	f366 1386 	bfi	r3, r6, #6, #1
   1028a:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   1028c:	f8bb 3d0a 	ldrh.w	r3, [fp, #3338]	; 0xd0a
   10290:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10292:	231b      	movs	r3, #27
   10294:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10296:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   10298:	f8bb 3d0c 	ldrh.w	r3, [fp, #3340]	; 0xd0c
   1029c:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   1029e:	f44f 73a4 	mov.w	r3, #328	; 0x148
   102a2:	8683      	strh	r3, [r0, #52]	; 0x34
		conn->max_rx_time =
   102a4:	86c3      	strh	r3, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   102a6:	f8bb 1d0e 	ldrh.w	r1, [fp, #3342]	; 0xd0e
   102aa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
   102ae:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->phy_pref_tx = _radio.default_phy_tx;
   102b0:	f361 0302 	bfi	r3, r1, #0, #3
		conn->phy_tx = BIT(0);
   102b4:	2101      	movs	r1, #1
   102b6:	f361 03c5 	bfi	r3, r1, #3, #3
		conn->phy_pref_flags = 0;
   102ba:	f366 1386 	bfi	r3, r6, #6, #1
		conn->phy_flags = 0;
   102be:	f366 13c7 	bfi	r3, r6, #7, #1
   102c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   102c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
		conn->latency_prepare = 0;
   102ca:	8506      	strh	r6, [r0, #40]	; 0x28
		conn->phy_tx_time = BIT(0);
   102cc:	f361 0302 	bfi	r3, r1, #0, #3
   102d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		conn->latency_event = 0;
   102d4:	8546      	strh	r6, [r0, #42]	; 0x2a
		conn->phy_pref_rx = _radio.default_phy_rx;
   102d6:	f8bb 0d10 	ldrh.w	r0, [fp, #3344]	; 0xd10
		conn->slave.window_widening_prepare_us = 0;
   102da:	65e6      	str	r6, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   102dc:	b2db      	uxtb	r3, r3
   102de:	f360 03c5 	bfi	r3, r0, #3, #3
   102e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   102e6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   102ea:	6626      	str	r6, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   102ec:	f361 0302 	bfi	r3, r1, #0, #3
   102f0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   102f4:	7f63      	ldrb	r3, [r4, #29]
   102f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   102fa:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   102fc:	2306      	movs	r3, #6
   102fe:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   10300:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   10304:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
   10308:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
   1030c:	f366 0341 	bfi	r3, r6, #1, #1
   10310:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   10314:	6726      	str	r6, [r4, #112]	; 0x70
		conn->llcp_version.tx = 0;
   10316:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   1031a:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
		conn->llcp_version.tx = 0;
   1031e:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
   10322:	f366 0341 	bfi	r3, r6, #1, #1
   10326:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   1032a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->procedure_expire = 0;
   1032e:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
   10332:	f366 1304 	bfi	r3, r6, #4, #1
   10336:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   1033a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->apto_expire = 0;
   1033e:	f8a4 604c 	strh.w	r6, [r4, #76]	; 0x4c
		conn->sn = 0;
   10342:	f366 0300 	bfi	r3, r6, #0, #1
		conn->nesn = 0;
   10346:	f366 0341 	bfi	r3, r6, #1, #1
		conn->pause_rx = 0;
   1034a:	f366 0382 	bfi	r3, r6, #2, #1
		conn->pause_tx = 0;
   1034e:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->enc_rx = 0;
   10352:	f366 1304 	bfi	r3, r6, #4, #1
		conn->enc_tx = 0;
   10356:	f366 1345 	bfi	r3, r6, #5, #1
		conn->refresh = 0;
   1035a:	f366 1386 	bfi	r3, r6, #6, #1
		conn->empty = 0;
   1035e:	f366 13c7 	bfi	r3, r6, #7, #1
		conn->appto_expire = 0;
   10362:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   10366:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   1036a:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
		conn->llcp_terminate.req = 0;
   1036e:	f884 60b0 	strb.w	r6, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   10372:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   10376:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1037a:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   1037e:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   10382:	f884 60c1 	strb.w	r6, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   10386:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   1038a:	f884 60e9 	strb.w	r6, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   1038e:	f884 60f4 	strb.w	r6, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   10392:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
		conn->empty = 0;
   10396:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   1039a:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   1039e:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   103a2:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   103a6:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   103aa:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   103ae:	f884 6150 	strb.w	r6, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   103b2:	f884 6151 	strb.w	r6, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   103b6:	f8cb 4c18 	str.w	r4, [fp, #3096]	; 0xc18
	_radio.advertiser.chan_map = chan_map;
   103ba:	a80e      	add	r0, sp, #56	; 0x38
   103bc:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   103c0:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.rl_idx = rl_idx;
   103c4:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
	_radio.advertiser.chan_map = chan_map;
   103c8:	f362 1306 	bfi	r3, r2, #4, #3
   103cc:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;
   103d0:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   103d4:	f36a 0301 	bfi	r3, sl, #0, #2
   103d8:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
   103dc:	f8d5 3d6c 	ldr.w	r3, [r5, #3436]	; 0xd6c
   103e0:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   103e2:	2327      	movs	r3, #39	; 0x27
   103e4:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   103e6:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   103e8:	2300      	movs	r3, #0
   103ea:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   103ec:	f7f7 fb76 	bl	7adc <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   103f0:	f81b 6007 	ldrb.w	r6, [fp, r7]
   103f4:	f006 060f 	and.w	r6, r6, #15
   103f8:	2e01      	cmp	r6, #1
   103fa:	d169      	bne.n	104d0 <radio_adv_enable+0x2d0>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   103fc:	f44f 7327 	mov.w	r3, #668	; 0x29c
   10400:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   10402:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   10406:	4953      	ldr	r1, [pc, #332]	; (10554 <radio_adv_enable+0x354>)
   10408:	a34f      	add	r3, pc, #316	; (adr r3, 10548 <radio_adv_enable+0x348>)
   1040a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1040e:	fba0 0101 	umull	r0, r1, r0, r1
   10412:	f7ef ff29 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
   10416:	69ef      	ldr	r7, [r5, #28]
   10418:	69ab      	ldr	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   1041a:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
   1041c:	429f      	cmp	r7, r3
   1041e:	bf38      	it	cc
   10420:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
   10422:	f1b8 0f00 	cmp.w	r8, #0
   10426:	d15b      	bne.n	104e0 <radio_adv_enable+0x2e0>
   10428:	1e72      	subs	r2, r6, #1
   1042a:	4253      	negs	r3, r2
   1042c:	4153      	adcs	r3, r2
   1042e:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
   10432:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1056c <radio_adv_enable+0x36c>
   10436:	f8df b138 	ldr.w	fp, [pc, #312]	; 10570 <radio_adv_enable+0x370>
   1043a:	f363 1686 	bfi	r6, r3, #6, #1
   1043e:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   10442:	f016 0640 	ands.w	r6, r6, #64	; 0x40
   10446:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   1044a:	d051      	beq.n	104f0 <radio_adv_enable+0x2f0>
		u32_t ticks_now = ticker_ticks_now_get();
   1044c:	f7f8 f97e 	bl	874c <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10450:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10452:	f8cd a020 	str.w	sl, [sp, #32]
   10456:	441f      	add	r7, r3
		u32_t ticks_now = ticker_ticks_now_get();
   10458:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1045a:	2000      	movs	r0, #0
   1045c:	f8cd 901c 	str.w	r9, [sp, #28]
   10460:	9006      	str	r0, [sp, #24]
   10462:	f8cd b014 	str.w	fp, [sp, #20]
   10466:	9704      	str	r7, [sp, #16]
   10468:	9003      	str	r0, [sp, #12]
   1046a:	9002      	str	r0, [sp, #8]
   1046c:	e88d 0081 	stmia.w	sp, {r0, r7}
   10470:	4633      	mov	r3, r6
   10472:	2205      	movs	r2, #5
   10474:	2103      	movs	r1, #3
   10476:	f7f7 fffb 	bl	8470 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   1047a:	2802      	cmp	r0, #2
   1047c:	d034      	beq.n	104e8 <radio_adv_enable+0x2e8>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   1047e:	980d      	ldr	r0, [sp, #52]	; 0x34
   10480:	b9c8      	cbnz	r0, 104b6 <radio_adv_enable+0x2b6>
		ret_cb = TICKER_STATUS_BUSY;
   10482:	2302      	movs	r3, #2
   10484:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
   10486:	4b34      	ldr	r3, [pc, #208]	; (10558 <radio_adv_enable+0x358>)
   10488:	9305      	str	r3, [sp, #20]
   1048a:	2203      	movs	r2, #3
   1048c:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   10490:	9300      	str	r3, [sp, #0]
   10492:	f8cd a020 	str.w	sl, [sp, #32]
   10496:	f8cd 901c 	str.w	r9, [sp, #28]
   1049a:	9006      	str	r0, [sp, #24]
   1049c:	9004      	str	r0, [sp, #16]
   1049e:	9003      	str	r0, [sp, #12]
   104a0:	9002      	str	r0, [sp, #8]
   104a2:	9001      	str	r0, [sp, #4]
   104a4:	4633      	mov	r3, r6
   104a6:	4611      	mov	r1, r2
		ret =
   104a8:	f7f7 ffe2 	bl	8470 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   104ac:	2802      	cmp	r0, #2
   104ae:	d044      	beq.n	1053a <radio_adv_enable+0x33a>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   104b0:	980d      	ldr	r0, [sp, #52]	; 0x34
   104b2:	2800      	cmp	r0, #0
   104b4:	d05e      	beq.n	10574 <radio_adv_enable+0x374>
	if (conn) {
   104b6:	2c00      	cmp	r4, #0
   104b8:	f43f aeb6 	beq.w	10228 <radio_adv_enable+0x28>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   104bc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   104c0:	4926      	ldr	r1, [pc, #152]	; (1055c <radio_adv_enable+0x35c>)
   104c2:	f7f7 f97a 	bl	77ba <mem_release>
		mem_release(conn, &_radio.conn_free);
   104c6:	4926      	ldr	r1, [pc, #152]	; (10560 <radio_adv_enable+0x360>)
   104c8:	4620      	mov	r0, r4
   104ca:	f7f7 f976 	bl	77ba <mem_release>
   104ce:	e6ab      	b.n	10228 <radio_adv_enable+0x28>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   104d0:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   104d2:	bf0c      	ite	eq
   104d4:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   104d8:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   104dc:	4358      	muls	r0, r3
   104de:	e792      	b.n	10406 <radio_adv_enable+0x206>
   104e0:	2300      	movs	r3, #0
   104e2:	e7a4      	b.n	1042e <radio_adv_enable+0x22e>
				cpu_sleep();
   104e4:	f7f9 fd4a 	bl	9f7c <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   104e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   104ea:	2b02      	cmp	r3, #2
   104ec:	d0fa      	beq.n	104e4 <radio_adv_enable+0x2e4>
   104ee:	e7c6      	b.n	1047e <radio_adv_enable+0x27e>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   104f0:	f7f8 f92c 	bl	874c <ticker_ticks_now_get>
		ret =
   104f4:	f8cd a020 	str.w	sl, [sp, #32]
   104f8:	f8cd 901c 	str.w	r9, [sp, #28]
   104fc:	9606      	str	r6, [sp, #24]
   104fe:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10504:	900a      	str	r0, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   10506:	4817      	ldr	r0, [pc, #92]	; (10564 <radio_adv_enable+0x364>)
		ret =
   10508:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   1050a:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1050e:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   10510:	fba8 0100 	umull	r0, r1, r8, r0
   10514:	2391      	movs	r3, #145	; 0x91
   10516:	fb03 1108 	mla	r1, r3, r8, r1
   1051a:	a30b      	add	r3, pc, #44	; (adr r3, 10548 <radio_adv_enable+0x348>)
   1051c:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
   10520:	9704      	str	r7, [sp, #16]
   10522:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   10524:	f7ef fea0 	bl	268 <__aeabi_uldivmod>
		ret =
   10528:	9600      	str	r6, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
   1052a:	9001      	str	r0, [sp, #4]
		ret =
   1052c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1052e:	2205      	movs	r2, #5
   10530:	2103      	movs	r1, #3
   10532:	4630      	mov	r0, r6
   10534:	e7b8      	b.n	104a8 <radio_adv_enable+0x2a8>
			cpu_sleep();
   10536:	f7f9 fd21 	bl	9f7c <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1053a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1053c:	2b02      	cmp	r3, #2
   1053e:	d0fa      	beq.n	10536 <radio_adv_enable+0x336>
   10540:	e7b6      	b.n	104b0 <radio_adv_enable+0x2b0>
   10542:	bf00      	nop
   10544:	f3af 8000 	nop.w
   10548:	1afd498d 	.word	0x1afd498d
   1054c:	00000007 	.word	0x00000007
   10550:	200016a1 	.word	0x200016a1
   10554:	3b9aca00 	.word	0x3b9aca00
   10558:	0000b5a5 	.word	0x0000b5a5
   1055c:	20001610 	.word	0x20001610
   10560:	200015d4 	.word	0x200015d4
   10564:	84e72a00 	.word	0x84e72a00
   10568:	200008e0 	.word	0x200008e0
   1056c:	00009fc1 	.word	0x00009fc1
   10570:	0000b535 	.word	0x0000b535
		_radio.advertiser.is_enabled = 1;
   10574:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   10578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1057c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   10580:	f895 3c2c 	ldrb.w	r3, [r5, #3116]	; 0xc2c
   10584:	f013 0401 	ands.w	r4, r3, #1
   10588:	d103      	bne.n	10592 <radio_adv_enable+0x392>
			ll_adv_scan_state_cb(BIT(0));
   1058a:	2001      	movs	r0, #1
   1058c:	f001 fd54 	bl	12038 <ll_adv_scan_state_cb>
		return 0;
   10590:	4620      	mov	r0, r4
}
   10592:	b00f      	add	sp, #60	; 0x3c
   10594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010598 <radio_ext_adv_enable>:
{
   10598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1059c:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
   1059e:	4ec4      	ldr	r6, [pc, #784]	; (108b0 <radio_ext_adv_enable+0x318>)
{
   105a0:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   105a2:	2302      	movs	r3, #2
   105a4:	9311      	str	r3, [sp, #68]	; 0x44
	radio_ext_adv_enable_flag = true;
   105a6:	4bc3      	ldr	r3, [pc, #780]	; (108b4 <radio_ext_adv_enable+0x31c>)
{
   105a8:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
   105ac:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	radio_ext_adv_enable_flag = true;
   105b0:	f04f 0901 	mov.w	r9, #1
   105b4:	f883 9000 	strb.w	r9, [r3]
	if (_radio.advertiser.is_enabled) {
   105b8:	f996 3028 	ldrsb.w	r3, [r6, #40]	; 0x28
   105bc:	2b00      	cmp	r3, #0
{
   105be:	4683      	mov	fp, r0
   105c0:	468a      	mov	sl, r1
	if (_radio.advertiser.is_enabled) {
   105c2:	da01      	bge.n	105c8 <radio_ext_adv_enable+0x30>
	return BT_HCI_ERR_CMD_DISALLOWED;
   105c4:	200c      	movs	r0, #12
   105c6:	e274      	b.n	10ab2 <radio_ext_adv_enable+0x51a>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
   105c8:	f896 722f 	ldrb.w	r7, [r6, #559]	; 0x22f
   105cc:	eb07 2707 	add.w	r7, r7, r7, lsl #8
   105d0:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   105d2:	5df3      	ldrb	r3, [r6, r7]
   105d4:	f003 030f 	and.w	r3, r3, #15
   105d8:	2b01      	cmp	r3, #1
   105da:	f200 814d 	bhi.w	10878 <radio_ext_adv_enable+0x2e0>
		if (_radio.advertiser.conn) {
   105de:	f8d6 5c18 	ldr.w	r5, [r6, #3096]	; 0xc18
   105e2:	2d00      	cmp	r5, #0
   105e4:	d1ee      	bne.n	105c4 <radio_ext_adv_enable+0x2c>
		link = mem_acquire(&_radio.link_rx_free);
   105e6:	f506 6053 	add.w	r0, r6, #3376	; 0xd30
   105ea:	f7f7 f8cc 	bl	7786 <mem_acquire>
		if (!link) {
   105ee:	900e      	str	r0, [sp, #56]	; 0x38
   105f0:	b158      	cbz	r0, 1060a <radio_ext_adv_enable+0x72>
		conn = mem_acquire(&_radio.conn_free);
   105f2:	f606 40f4 	addw	r0, r6, #3316	; 0xcf4
   105f6:	f7f7 f8c6 	bl	7786 <mem_acquire>
		if (!conn) {
   105fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   105fc:	4604      	mov	r4, r0
   105fe:	b930      	cbnz	r0, 1060e <radio_ext_adv_enable+0x76>
			mem_release(link, &_radio.link_rx_free);
   10600:	f506 6153 	add.w	r1, r6, #3376	; 0xd30
   10604:	4610      	mov	r0, r2
   10606:	f7f7 f8d8 	bl	77ba <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1060a:	2007      	movs	r0, #7
   1060c:	e251      	b.n	10ab2 <radio_ext_adv_enable+0x51a>
		conn->handle = 0xFFFF;
   1060e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10612:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   10614:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   10618:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   1061c:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
   1061e:	77c5      	strb	r5, [r0, #31]
		conn->data_chan_sel = 0;
   10620:	f365 1386 	bfi	r3, r5, #6, #1
   10624:	7743      	strb	r3, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
   10626:	f8b6 3d0a 	ldrh.w	r3, [r6, #3338]	; 0xd0a
   1062a:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1062c:	231b      	movs	r3, #27
   1062e:	85c3      	strh	r3, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   10630:	8603      	strh	r3, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   10632:	f8b6 3d0c 	ldrh.w	r3, [r6, #3340]	; 0xd0c
   10636:	8643      	strh	r3, [r0, #50]	; 0x32
		conn->max_tx_time =
   10638:	f44f 73a4 	mov.w	r3, #328	; 0x148
   1063c:	8683      	strh	r3, [r0, #52]	; 0x34
		conn->max_rx_time =
   1063e:	86c3      	strh	r3, [r0, #54]	; 0x36
		conn->event_counter = 0;
   10640:	8445      	strh	r5, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   10642:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->latency_event = 0;
   10644:	8545      	strh	r5, [r0, #42]	; 0x2a
		conn->phy_pref_tx = _radio.default_phy_tx;
   10646:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1064a:	f8b6 0d0e 	ldrh.w	r0, [r6, #3342]	; 0xd0e
   1064e:	f360 0302 	bfi	r3, r0, #0, #3
		conn->phy_tx = BIT(0);
   10652:	f369 03c5 	bfi	r3, r9, #3, #3
		conn->phy_pref_flags = 0;
   10656:	f365 1386 	bfi	r3, r5, #6, #1
		conn->phy_flags = 0;
   1065a:	f365 13c7 	bfi	r3, r5, #7, #1
   1065e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   10662:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   10666:	f369 0302 	bfi	r3, r9, #0, #3
   1066a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   1066e:	f8b6 0d10 	ldrh.w	r0, [r6, #3344]	; 0xd10
		conn->slave.window_widening_prepare_us = 0;
   10672:	65e5      	str	r5, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
   10674:	b2db      	uxtb	r3, r3
   10676:	f360 03c5 	bfi	r3, r0, #3, #3
   1067a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
   1067e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
   10682:	6625      	str	r5, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
   10684:	f369 0302 	bfi	r3, r9, #0, #3
   10688:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		conn->role = 1;
   1068c:	7f63      	ldrb	r3, [r4, #29]
   1068e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10692:	7763      	strb	r3, [r4, #29]
		conn->connect_expire = 6;
   10694:	2306      	movs	r3, #6
   10696:	87a3      	strh	r3, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
   10698:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1069c:	f365 1345 	bfi	r3, r5, #5, #1
		conn->slave.latency_enabled = 0;
   106a0:	f365 0300 	bfi	r3, r5, #0, #1
		conn->slave.latency_cancel = 0;
   106a4:	f365 0341 	bfi	r3, r5, #1, #1
   106a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
   106ac:	6725      	str	r5, [r4, #112]	; 0x70
		conn->llcp_version.tx = 0;
   106ae:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
   106b2:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		conn->llcp_version.tx = 0;
   106b6:	f365 0300 	bfi	r3, r5, #0, #1
		conn->llcp_version.rx = 0;
   106ba:	f365 0341 	bfi	r3, r5, #1, #1
   106be:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
		conn->llcp_conn_param.disabled = 0;
   106c2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->procedure_expire = 0;
   106c6:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
		conn->llcp_conn_param.disabled = 0;
   106ca:	f365 1304 	bfi	r3, r5, #4, #1
   106ce:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
   106d2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->apto_expire = 0;
   106d6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
		conn->sn = 0;
   106da:	f365 0300 	bfi	r3, r5, #0, #1
		conn->nesn = 0;
   106de:	f365 0341 	bfi	r3, r5, #1, #1
		conn->pause_rx = 0;
   106e2:	f365 0382 	bfi	r3, r5, #2, #1
		conn->pause_tx = 0;
   106e6:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->enc_rx = 0;
   106ea:	f365 1304 	bfi	r3, r5, #4, #1
		conn->enc_tx = 0;
   106ee:	f365 1345 	bfi	r3, r5, #5, #1
		conn->refresh = 0;
   106f2:	f365 1386 	bfi	r3, r5, #6, #1
		conn->empty = 0;
   106f6:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->appto_expire = 0;
   106fa:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
		conn->llcp_req = 0;
   106fe:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
   10702:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
		conn->llcp_terminate.req = 0;
   10706:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   1070a:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   1070e:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   10712:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   10716:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   1071a:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
   1071e:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   10722:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   10726:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   1072a:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
		conn->empty = 0;
   1072e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   10732:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   10736:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   1073a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   1073e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   10742:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   10746:	f884 5150 	strb.w	r5, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   1074a:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
   1074e:	f8c6 4c18 	str.w	r4, [r6, #3096]	; 0xc18
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   10752:	4d57      	ldr	r5, [pc, #348]	; (108b0 <radio_ext_adv_enable+0x318>)
	_radio.advertiser.chan_map = chan_map;							//chan_map
   10754:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   10756:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
   1075a:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
   1075e:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
   10762:	f362 1306 	bfi	r3, r2, #4, #3
   10766:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
   1076a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
   1076e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
   10770:	f885 3c8c 	strb.w	r3, [r5, #3212]	; 0xc8c
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
   10774:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   10778:	f362 0301 	bfi	r3, r2, #0, #2
   1077c:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.rl_idx = rl_idx;								//rl_idx
   10780:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   10784:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	_radio.advertiser.hdr.ticks_active_to_start =
   10788:	f8d5 3d6c 	ldr.w	r3, [r5, #3436]	; 0xd6c
   1078c:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   1078e:	2327      	movs	r3, #39	; 0x27
   10790:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   10792:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
   10794:	2300      	movs	r3, #0
   10796:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   10798:	f7f7 f9a0 	bl	7adc <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1079c:	5df7      	ldrb	r7, [r6, r7]
   1079e:	f007 070f 	and.w	r7, r7, #15
   107a2:	2f01      	cmp	r7, #1
   107a4:	462e      	mov	r6, r5
   107a6:	d169      	bne.n	1087c <radio_ext_adv_enable+0x2e4>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   107a8:	f44f 7327 	mov.w	r3, #668	; 0x29c
   107ac:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
   107ae:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   107b2:	4d41      	ldr	r5, [pc, #260]	; (108b8 <radio_ext_adv_enable+0x320>)
   107b4:	a33c      	add	r3, pc, #240	; (adr r3, 108a8 <radio_ext_adv_enable+0x310>)
   107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   107ba:	fba0 0105 	umull	r0, r1, r0, r5
   107be:	f7ef fd53 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
   107c2:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   107c4:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
   107c6:	69b0      	ldr	r0, [r6, #24]
   107c8:	4283      	cmp	r3, r0
   107ca:	bf38      	it	cc
   107cc:	4603      	movcc	r3, r0
   107ce:	930b      	str	r3, [sp, #44]	; 0x2c
   107d0:	46a9      	mov	r9, r5
	_radio.advertiser.is_hdcd = !interval &&
   107d2:	f1ba 0f00 	cmp.w	sl, #0
   107d6:	d15e      	bne.n	10896 <radio_ext_adv_enable+0x2fe>
   107d8:	1e7b      	subs	r3, r7, #1
   107da:	425f      	negs	r7, r3
   107dc:	415f      	adcs	r7, r3
   107de:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
   107e2:	f367 1586 	bfi	r5, r7, #6, #1
   107e6:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
   107ea:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   107ee:	d06f      	beq.n	108d0 <radio_ext_adv_enable+0x338>
		u32_t ticks_now = ticker_ticks_now_get();
   107f0:	f7f7 ffac 	bl	874c <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   107f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
   107f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   107f8:	4e30      	ldr	r6, [pc, #192]	; (108bc <radio_ext_adv_enable+0x324>)
   107fa:	9607      	str	r6, [sp, #28]
   107fc:	441a      	add	r2, r3
   107fe:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
   10800:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10802:	4a2f      	ldr	r2, [pc, #188]	; (108c0 <radio_ext_adv_enable+0x328>)
   10804:	9205      	str	r2, [sp, #20]
   10806:	2000      	movs	r0, #0
   10808:	ad11      	add	r5, sp, #68	; 0x44
   1080a:	9304      	str	r3, [sp, #16]
   1080c:	e88d 0009 	stmia.w	sp, {r0, r3}
   10810:	9508      	str	r5, [sp, #32]
   10812:	9006      	str	r0, [sp, #24]
   10814:	9003      	str	r0, [sp, #12]
   10816:	9002      	str	r0, [sp, #8]
   10818:	463b      	mov	r3, r7
   1081a:	2205      	movs	r2, #5
   1081c:	2103      	movs	r1, #3
   1081e:	f7f7 fe27 	bl	8470 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   10822:	2802      	cmp	r0, #2
   10824:	d03b      	beq.n	1089e <radio_ext_adv_enable+0x306>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   10826:	9811      	ldr	r0, [sp, #68]	; 0x44
   10828:	b9c8      	cbnz	r0, 1085e <radio_ext_adv_enable+0x2c6>
		ret_cb = TICKER_STATUS_BUSY;
   1082a:	2302      	movs	r3, #2
   1082c:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
   1082e:	4b25      	ldr	r3, [pc, #148]	; (108c4 <radio_ext_adv_enable+0x32c>)
   10830:	9305      	str	r3, [sp, #20]
   10832:	2203      	movs	r2, #3
   10834:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   10838:	9300      	str	r3, [sp, #0]
   1083a:	9508      	str	r5, [sp, #32]
   1083c:	9607      	str	r6, [sp, #28]
   1083e:	9006      	str	r0, [sp, #24]
   10840:	9004      	str	r0, [sp, #16]
   10842:	9003      	str	r0, [sp, #12]
   10844:	9002      	str	r0, [sp, #8]
   10846:	9001      	str	r0, [sp, #4]
   10848:	463b      	mov	r3, r7
   1084a:	4611      	mov	r1, r2
		ret=	
   1084c:	f7f7 fe10 	bl	8470 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   10850:	2802      	cmp	r0, #2
   10852:	f000 811a 	beq.w	10a8a <radio_ext_adv_enable+0x4f2>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   10856:	9811      	ldr	r0, [sp, #68]	; 0x44
   10858:	2800      	cmp	r0, #0
   1085a:	f000 811a 	beq.w	10a92 <radio_ext_adv_enable+0x4fa>
	if (conn) {
   1085e:	2c00      	cmp	r4, #0
   10860:	f43f aeb0 	beq.w	105c4 <radio_ext_adv_enable+0x2c>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   10864:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10868:	4917      	ldr	r1, [pc, #92]	; (108c8 <radio_ext_adv_enable+0x330>)
   1086a:	f7f6 ffa6 	bl	77ba <mem_release>
		mem_release(conn, &_radio.conn_free);
   1086e:	4917      	ldr	r1, [pc, #92]	; (108cc <radio_ext_adv_enable+0x334>)
   10870:	4620      	mov	r0, r4
   10872:	f7f6 ffa2 	bl	77ba <mem_release>
   10876:	e6a5      	b.n	105c4 <radio_ext_adv_enable+0x2c>
		conn = NULL;
   10878:	2400      	movs	r4, #0
   1087a:	e76a      	b.n	10752 <radio_ext_adv_enable+0x1ba>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   1087c:	2f02      	cmp	r7, #2
   1087e:	d103      	bne.n	10888 <radio_ext_adv_enable+0x2f0>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   10880:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
   10884:	4358      	muls	r0, r3
   10886:	e794      	b.n	107b2 <radio_ext_adv_enable+0x21a>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   10888:	2f07      	cmp	r7, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2500) * chan_cnt) ;  // 265byte =2120us
   1088a:	bf0c      	ite	eq
   1088c:	f44f 632f 	moveq.w	r3, #2800	; 0xaf0
			   152 + 376) * chan_cnt;
   10890:	f240 53fc 	movwne	r3, #1532	; 0x5fc
   10894:	e7f6      	b.n	10884 <radio_ext_adv_enable+0x2ec>
   10896:	2700      	movs	r7, #0
   10898:	e7a1      	b.n	107de <radio_ext_adv_enable+0x246>
				cpu_sleep();
   1089a:	f7f9 fb6f 	bl	9f7c <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1089e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   108a0:	2b02      	cmp	r3, #2
   108a2:	d0fa      	beq.n	1089a <radio_ext_adv_enable+0x302>
   108a4:	e7bf      	b.n	10826 <radio_ext_adv_enable+0x28e>
   108a6:	bf00      	nop
   108a8:	1afd498d 	.word	0x1afd498d
   108ac:	00000007 	.word	0x00000007
   108b0:	200008e0 	.word	0x200008e0
   108b4:	200016a1 	.word	0x200016a1
   108b8:	3b9aca00 	.word	0x3b9aca00
   108bc:	00009fc1 	.word	0x00009fc1
   108c0:	0000b535 	.word	0x0000b535
   108c4:	0000b5a5 	.word	0x0000b5a5
   108c8:	20001610 	.word	0x20001610
   108cc:	200015d4 	.word	0x200015d4
		u32_t ticks_now = ticker_ticks_now_get();
   108d0:	f7f7 ff3c 	bl	874c <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
   108d4:	fa1f f28a 	uxth.w	r2, sl
   108d8:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
   108da:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
   108dc:	f240 2071 	movw	r0, #625	; 0x271
   108e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   108e4:	fbaa 0100 	umull	r0, r1, sl, r0
   108e8:	4a75      	ldr	r2, [pc, #468]	; (10ac0 <radio_ext_adv_enable+0x528>)
		_radio.ext_advertiser.max_skip = skip;
   108ea:	f886 8c68 	strb.w	r8, [r6, #3176]	; 0xc68
		if(((u64_t)interval * 625) <= 100000){
   108ee:	2300      	movs	r3, #0
   108f0:	428b      	cmp	r3, r1
   108f2:	bf08      	it	eq
   108f4:	4282      	cmpeq	r2, r0
   108f6:	d30b      	bcc.n	10910 <radio_ext_adv_enable+0x378>
		int calculation = max_skip / 5;
   108f8:	2305      	movs	r3, #5
   108fa:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
   108fe:	2b04      	cmp	r3, #4
   10900:	f240 80a5 	bls.w	10a4e <radio_ext_adv_enable+0x4b6>
				ticker_offset = 30 * (max_skip-5);
   10904:	f1a8 0505 	sub.w	r5, r8, #5
				ticker_offset = 30 * (max_skip-1);
   10908:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
				ticker_offset = 30 * max_skip;
   1090c:	006d      	lsls	r5, r5, #1
   1090e:	b2ad      	uxth	r5, r5
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
   10910:	f240 2371 	movw	r3, #625	; 0x271
   10914:	fb03 f708 	mul.w	r7, r3, r8
   10918:	f247 5230 	movw	r2, #30000	; 0x7530
   1091c:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   10920:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
   10924:	f8c6 7c5c 	str.w	r7, [r6, #3164]	; 0xc5c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
   10928:	f8c6 3c60 	str.w	r3, [r6, #3168]	; 0xc60
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   1092c:	4a64      	ldr	r2, [pc, #400]	; (10ac0 <radio_ext_adv_enable+0x528>)
   1092e:	2300      	movs	r3, #0
   10930:	f7ef fc9a 	bl	268 <__aeabi_uldivmod>
   10934:	23b7      	movs	r3, #183	; 0xb7
   10936:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
   10938:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
   1093c:	f8c6 0c84 	str.w	r0, [r6, #3204]	; 0xc84
		size = pdu->len + 2;
   10940:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   10944:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   10946:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
   1094a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
   1094e:	f8c6 7c70 	str.w	r7, [r6, #3184]	; 0xc70
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
   10952:	00db      	lsls	r3, r3, #3
   10954:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   10956:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
   1095a:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   1095c:	3332      	adds	r3, #50	; 0x32
   1095e:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
   10962:	4b58      	ldr	r3, [pc, #352]	; (10ac4 <radio_ext_adv_enable+0x52c>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
   10964:	f8c6 2c74 	str.w	r2, [r6, #3188]	; 0xc74
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
   10968:	f8c6 7c78 	str.w	r7, [r6, #3192]	; 0xc78
		ret =
   1096c:	f04f 0b00 	mov.w	fp, #0
   10970:	9307      	str	r3, [sp, #28]
   10972:	af11      	add	r7, sp, #68	; 0x44
   10974:	4b54      	ldr	r3, [pc, #336]	; (10ac8 <radio_ext_adv_enable+0x530>)
   10976:	9708      	str	r7, [sp, #32]
   10978:	f8cd b018 	str.w	fp, [sp, #24]
   1097c:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1097e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   10980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   10982:	4852      	ldr	r0, [pc, #328]	; (10acc <radio_ext_adv_enable+0x534>)
		ret =
   10984:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10988:	4413      	add	r3, r2
		ret =
   1098a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   1098c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1098e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
   10990:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   10994:	fba3 0100 	umull	r0, r1, r3, r0
   10998:	2391      	movs	r3, #145	; 0x91
   1099a:	fb03 1102 	mla	r1, r3, r2, r1
   1099e:	a346      	add	r3, pc, #280	; (adr r3, 10ab8 <radio_ext_adv_enable+0x520>)
   109a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   109a4:	f7ef fc60 	bl	268 <__aeabi_uldivmod>
		ret =
   109a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
   109aa:	9001      	str	r0, [sp, #4]
		ret =
   109ac:	f8cd b000 	str.w	fp, [sp]
   109b0:	2205      	movs	r2, #5
   109b2:	2103      	movs	r1, #3
   109b4:	4658      	mov	r0, fp
   109b6:	f7f7 fd5b 	bl	8470 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   109ba:	2802      	cmp	r0, #2
   109bc:	4b41      	ldr	r3, [pc, #260]	; (10ac4 <radio_ext_adv_enable+0x52c>)
   109be:	d05e      	beq.n	10a7e <radio_ext_adv_enable+0x4e6>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   109c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
   109c2:	2e00      	cmp	r6, #0
   109c4:	f47f af4b 	bne.w	1085e <radio_ext_adv_enable+0x2c6>
		ret=	
   109c8:	9307      	str	r3, [sp, #28]
   109ca:	4b41      	ldr	r3, [pc, #260]	; (10ad0 <radio_ext_adv_enable+0x538>)
   109cc:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   109ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
   109d0:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
   109d2:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   109d4:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
   109d8:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   109da:	fba0 0109 	umull	r0, r1, r0, r9
   109de:	a336      	add	r3, pc, #216	; (adr r3, 10ab8 <radio_ext_adv_enable+0x520>)
   109e0:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
   109e4:	f108 0801 	add.w	r8, r8, #1
		ret=	
   109e8:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   109ea:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
   109ee:	f7ef fc3b 	bl	268 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   109f2:	fba8 ab0a 	umull	sl, fp, r8, sl
   109f6:	f240 2171 	movw	r1, #625	; 0x271
   109fa:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   109fe:	1b52      	subs	r2, r2, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
   10a04:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   10a08:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
   10a0c:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   10a0e:	fba2 0109 	umull	r0, r1, r2, r9
   10a12:	fb09 1103 	mla	r1, r9, r3, r1
   10a16:	a328      	add	r3, pc, #160	; (adr r3, 10ab8 <radio_ext_adv_enable+0x520>)
   10a18:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
   10a1c:	9603      	str	r6, [sp, #12]
   10a1e:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
   10a20:	f7ef fc22 	bl	268 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   10a24:	4b2b      	ldr	r3, [pc, #172]	; (10ad4 <radio_ext_adv_enable+0x53c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   10a2a:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
   10a2c:	f8d3 0c5c 	ldr.w	r0, [r3, #3164]	; 0xc5c
   10a30:	a321      	add	r3, pc, #132	; (adr r3, 10ab8 <radio_ext_adv_enable+0x520>)
   10a32:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a36:	fba0 0109 	umull	r0, r1, r0, r9
   10a3a:	f7ef fc15 	bl	268 <__aeabi_uldivmod>
		ret=	
   10a3e:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10a40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
   10a44:	9000      	str	r0, [sp, #0]
   10a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a48:	4611      	mov	r1, r2
   10a4a:	4630      	mov	r0, r6
   10a4c:	e6fe      	b.n	1084c <radio_ext_adv_enable+0x2b4>
			}else if(calculation >= 4){
   10a4e:	d102      	bne.n	10a56 <radio_ext_adv_enable+0x4be>
				ticker_offset = 30 * (max_skip-4);
   10a50:	f1a8 0504 	sub.w	r5, r8, #4
   10a54:	e758      	b.n	10908 <radio_ext_adv_enable+0x370>
			}else if(calculation >=3){
   10a56:	2b03      	cmp	r3, #3
   10a58:	d102      	bne.n	10a60 <radio_ext_adv_enable+0x4c8>
				ticker_offset = 30 * (max_skip-3);
   10a5a:	f1a8 0503 	sub.w	r5, r8, #3
   10a5e:	e753      	b.n	10908 <radio_ext_adv_enable+0x370>
			}else if(calculation >= 2){
   10a60:	2b02      	cmp	r3, #2
   10a62:	d102      	bne.n	10a6a <radio_ext_adv_enable+0x4d2>
				ticker_offset = 30 * (max_skip-2);
   10a64:	f1a8 0502 	sub.w	r5, r8, #2
   10a68:	e74e      	b.n	10908 <radio_ext_adv_enable+0x370>
			}else if(calculation >= 1){
   10a6a:	2b01      	cmp	r3, #1
   10a6c:	d102      	bne.n	10a74 <radio_ext_adv_enable+0x4dc>
				ticker_offset = 30 * (max_skip-1);
   10a6e:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   10a72:	e749      	b.n	10908 <radio_ext_adv_enable+0x370>
				ticker_offset = 30 * max_skip;
   10a74:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
   10a78:	e748      	b.n	1090c <radio_ext_adv_enable+0x374>
				cpu_sleep();
   10a7a:	f7f9 fa7f 	bl	9f7c <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
   10a7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10a80:	2a02      	cmp	r2, #2
   10a82:	d0fa      	beq.n	10a7a <radio_ext_adv_enable+0x4e2>
   10a84:	e79c      	b.n	109c0 <radio_ext_adv_enable+0x428>
			cpu_sleep();
   10a86:	f7f9 fa79 	bl	9f7c <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   10a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10a8c:	2b02      	cmp	r3, #2
   10a8e:	d0fa      	beq.n	10a86 <radio_ext_adv_enable+0x4ee>
   10a90:	e6e1      	b.n	10856 <radio_ext_adv_enable+0x2be>
		_radio.advertiser.is_enabled = 1;
   10a92:	4b10      	ldr	r3, [pc, #64]	; (10ad4 <radio_ext_adv_enable+0x53c>)
   10a94:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   10a98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10a9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   10aa0:	f893 3c2c 	ldrb.w	r3, [r3, #3116]	; 0xc2c
   10aa4:	f013 0401 	ands.w	r4, r3, #1
   10aa8:	d103      	bne.n	10ab2 <radio_ext_adv_enable+0x51a>
			ll_adv_scan_state_cb(BIT(0));
   10aaa:	2001      	movs	r0, #1
   10aac:	f001 fac4 	bl	12038 <ll_adv_scan_state_cb>
		return 0;
   10ab0:	4620      	mov	r0, r4
}
   10ab2:	b013      	add	sp, #76	; 0x4c
   10ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ab8:	1afd498d 	.word	0x1afd498d
   10abc:	00000007 	.word	0x00000007
   10ac0:	000186a0 	.word	0x000186a0
   10ac4:	00009fc1 	.word	0x00009fc1
   10ac8:	0000b535 	.word	0x0000b535
   10acc:	84e72a00 	.word	0x84e72a00
   10ad0:	0000b56d 	.word	0x0000b56d
   10ad4:	200008e0 	.word	0x200008e0

00010ad8 <radio_adv_disable>:
{
   10ad8:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   10ada:	2103      	movs	r1, #3
   10adc:	2005      	movs	r0, #5
   10ade:	f7f9 fbe3 	bl	a2a8 <role_disable>
	if (!status) {
   10ae2:	4605      	mov	r5, r0
   10ae4:	b9e8      	cbnz	r0, 10b22 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
   10ae6:	4c10      	ldr	r4, [pc, #64]	; (10b28 <radio_adv_disable+0x50>)
   10ae8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   10aec:	f360 12c7 	bfi	r2, r0, #7, #1
   10af0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
   10af4:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
   10af8:	07d3      	lsls	r3, r2, #31
   10afa:	d401      	bmi.n	10b00 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
   10afc:	f001 fa9c 	bl	12038 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
   10b00:	f8d4 6c18 	ldr.w	r6, [r4, #3096]	; 0xc18
		if (conn) {
   10b04:	b15e      	cbz	r6, 10b1e <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
   10b06:	2300      	movs	r3, #0
   10b08:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   10b0c:	4907      	ldr	r1, [pc, #28]	; (10b2c <radio_adv_disable+0x54>)
   10b0e:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   10b12:	f7f6 fe52 	bl	77ba <mem_release>
			mem_release(conn, &_radio.conn_free);
   10b16:	4906      	ldr	r1, [pc, #24]	; (10b30 <radio_adv_disable+0x58>)
   10b18:	4630      	mov	r0, r6
   10b1a:	f7f6 fe4e 	bl	77ba <mem_release>
}
   10b1e:	4628      	mov	r0, r5
   10b20:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   10b22:	250c      	movs	r5, #12
   10b24:	e7fb      	b.n	10b1e <radio_adv_disable+0x46>
   10b26:	bf00      	nop
   10b28:	200008e0 	.word	0x200008e0
   10b2c:	20001610 	.word	0x20001610
   10b30:	200015d4 	.word	0x200015d4

00010b34 <ll_rx_dequeue>:
{
   10b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10b36:	4d34      	ldr	r5, [pc, #208]	; (10c08 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
   10b38:	aa02      	add	r2, sp, #8
   10b3a:	2300      	movs	r3, #0
   10b3c:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   10b40:	f8d5 0d38 	ldr.w	r0, [r5, #3384]	; 0xd38
   10b44:	f605 5134 	addw	r1, r5, #3380	; 0xd34
   10b48:	f7f6 fe86 	bl	7858 <memq_dequeue>
   10b4c:	462c      	mov	r4, r5
	LL_ASSERT(link);
   10b4e:	b928      	cbnz	r0, 10b5c <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
   10b50:	4040      	eors	r0, r0
   10b52:	f380 8811 	msr	BASEPRI, r0
   10b56:	f04f 0004 	mov.w	r0, #4
   10b5a:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   10b5c:	f505 6153 	add.w	r1, r5, #3376	; 0xd30
   10b60:	f7f6 fe2b 	bl	77ba <mem_release>
	switch (node_rx->hdr.type) {
   10b64:	9a01      	ldr	r2, [sp, #4]
   10b66:	7911      	ldrb	r1, [r2, #4]
   10b68:	290c      	cmp	r1, #12
   10b6a:	d8f1      	bhi.n	10b50 <ll_rx_dequeue+0x1c>
   10b6c:	2301      	movs	r3, #1
   10b6e:	408b      	lsls	r3, r1
   10b70:	f641 707e 	movw	r0, #8062	; 0x1f7e
   10b74:	4203      	tst	r3, r0
   10b76:	d111      	bne.n	10b9c <ll_rx_dequeue+0x68>
   10b78:	0618      	lsls	r0, r3, #24
   10b7a:	d5e9      	bpl.n	10b50 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   10b7c:	2906      	cmp	r1, #6
   10b7e:	d134      	bne.n	10bea <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   10b80:	7ad3      	ldrb	r3, [r2, #11]
   10b82:	2b3c      	cmp	r3, #60	; 0x3c
   10b84:	d015      	beq.n	10bb2 <ll_rx_dequeue+0x7e>
   10b86:	7b12      	ldrb	r2, [r2, #12]
   10b88:	bb8a      	cbnz	r2, 10bee <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
   10b8a:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   10b8e:	07d9      	lsls	r1, r3, #31
   10b90:	d5de      	bpl.n	10b50 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
   10b92:	f362 0300 	bfi	r3, r2, #0, #1
   10b96:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
   10b9a:	e01a      	b.n	10bd2 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
   10b9c:	f895 0d28 	ldrb.w	r0, [r5, #3368]	; 0xd28
   10ba0:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
   10ba4:	3801      	subs	r0, #1
   10ba6:	4283      	cmp	r3, r0
   10ba8:	dad2      	bge.n	10b50 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
   10baa:	3301      	adds	r3, #1
   10bac:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
		break;
   10bb0:	e7e4      	b.n	10b7c <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
   10bb2:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   10bb4:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
				_radio.advertiser.conn = NULL;
   10bb8:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			LL_ASSERT(_radio.advertiser.is_enabled);
   10bbc:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   10bc0:	2b00      	cmp	r3, #0
   10bc2:	dac5      	bge.n	10b50 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
   10bc4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10bc8:	f36f 13c7 	bfc	r3, #7, #1
   10bcc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   10bd0:	b97d      	cbnz	r5, 10bf2 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10bd2:	f894 0c2c 	ldrb.w	r0, [r4, #3116]	; 0xc2c
		     _radio.advertiser.is_enabled;
   10bd6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   10bda:	f000 0001 	and.w	r0, r0, #1
   10bde:	0040      	lsls	r0, r0, #1
		if (!bm) {
   10be0:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   10be4:	d101      	bne.n	10bea <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
   10be6:	f001 fa27 	bl	12038 <ll_adv_scan_state_cb>
}
   10bea:	b003      	add	sp, #12
   10bec:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
   10bee:	2500      	movs	r5, #0
   10bf0:	e7e4      	b.n	10bbc <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
   10bf2:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   10bf6:	4905      	ldr	r1, [pc, #20]	; (10c0c <ll_rx_dequeue+0xd8>)
   10bf8:	f7f6 fddf 	bl	77ba <mem_release>
			mem_release(conn, &_radio.conn_free);
   10bfc:	4904      	ldr	r1, [pc, #16]	; (10c10 <ll_rx_dequeue+0xdc>)
   10bfe:	4628      	mov	r0, r5
   10c00:	f7f6 fddb 	bl	77ba <mem_release>
   10c04:	e7e5      	b.n	10bd2 <ll_rx_dequeue+0x9e>
   10c06:	bf00      	nop
   10c08:	200008e0 	.word	0x200008e0
   10c0c:	20001610 	.word	0x20001610
   10c10:	200015d4 	.word	0x200015d4

00010c14 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   10c14:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   10c16:	4c0b      	ldr	r4, [pc, #44]	; (10c44 <rtc0_nrf5_isr+0x30>)
   10c18:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   10c1c:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   10c20:	b122      	cbz	r2, 10c2c <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   10c22:	2000      	movs	r0, #0
   10c24:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   10c28:	f7f7 fc10 	bl	844c <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   10c2c:	b12d      	cbz	r5, 10c3a <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   10c2e:	2300      	movs	r3, #0
   10c30:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   10c34:	2001      	movs	r0, #1
   10c36:	f7f7 fc09 	bl	844c <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   10c3a:	2000      	movs	r0, #0
}
   10c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   10c40:	f7f6 beba 	b.w	79b8 <mayfly_run>
   10c44:	4000b000 	.word	0x4000b000

00010c48 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   10c48:	2001      	movs	r0, #1
   10c4a:	f7f6 beb5 	b.w	79b8 <mayfly_run>

00010c4e <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10c4e:	4668      	mov	r0, sp
   10c50:	f020 0107 	bic.w	r1, r0, #7
   10c54:	468d      	mov	sp, r1
   10c56:	b501      	push	{r0, lr}
	isr_radio();
   10c58:	f001 fdb6 	bl	127c8 <isr_radio>
	ISR_DIRECT_PM();
   10c5c:	f7f0 f82e 	bl	cbc <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   10c60:	f7ef fedc 	bl	a1c <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   10c64:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   10c68:	4685      	mov	sp, r0
   10c6a:	4770      	bx	lr

00010c6c <radio_active_callback>:
{
   10c6c:	4770      	bx	lr
	...

00010c70 <radio_event_callback>:
	k_sem_give(sem_recv);
   10c70:	4b01      	ldr	r3, [pc, #4]	; (10c78 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   10c72:	6818      	ldr	r0, [r3, #0]
   10c74:	f002 bfb8 	b.w	13be8 <_impl_k_sem_give>
   10c78:	20002428 	.word	0x20002428

00010c7c <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   10c7c:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   10c7e:	4b38      	ldr	r3, [pc, #224]	; (10d60 <ll_init+0xe4>)
{
   10c80:	b087      	sub	sp, #28
	sem_recv = sem_rx;
   10c82:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   10c84:	4837      	ldr	r0, [pc, #220]	; (10d64 <ll_init+0xe8>)
   10c86:	f002 fb7f 	bl	13388 <device_get_binding>
	if (!clk_k32) {
   10c8a:	b918      	cbnz	r0, 10c94 <ll_init+0x18>
		return -ENODEV;
   10c8c:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   10c90:	b007      	add	sp, #28
   10c92:	bd30      	pop	{r4, r5, pc}
	return api->on(dev, sys);
   10c94:	6843      	ldr	r3, [r0, #4]
   10c96:	2101      	movs	r1, #1
   10c98:	681b      	ldr	r3, [r3, #0]
   10c9a:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   10c9c:	4832      	ldr	r0, [pc, #200]	; (10d68 <ll_init+0xec>)
   10c9e:	f002 fb73 	bl	13388 <device_get_binding>
	if (!entropy) {
   10ca2:	4604      	mov	r4, r0
   10ca4:	2800      	cmp	r0, #0
   10ca6:	d0f1      	beq.n	10c8c <ll_init+0x10>
	cntr_init();
   10ca8:	f001 fbec 	bl	12484 <cntr_init>
	mayfly_init();
   10cac:	f7f6 fde4 	bl	7878 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10cb0:	4b2e      	ldr	r3, [pc, #184]	; (10d6c <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   10cb2:	2203      	movs	r2, #3
   10cb4:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10cb6:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10cb8:	4a2d      	ldr	r2, [pc, #180]	; (10d70 <ll_init+0xf4>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   10cba:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10cbc:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10cbe:	2502      	movs	r5, #2
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   10cc0:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   10cc2:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   10cc4:	9205      	str	r2, [sp, #20]
   10cc6:	4a2b      	ldr	r2, [pc, #172]	; (10d74 <ll_init+0xf8>)
   10cc8:	9204      	str	r2, [sp, #16]
   10cca:	4a2b      	ldr	r2, [pc, #172]	; (10d78 <ll_init+0xfc>)
   10ccc:	9203      	str	r2, [sp, #12]
   10cce:	4a2b      	ldr	r2, [pc, #172]	; (10d7c <ll_init+0x100>)
   10cd0:	9202      	str	r2, [sp, #8]
   10cd2:	220d      	movs	r2, #13
   10cd4:	9201      	str	r2, [sp, #4]
   10cd6:	9300      	str	r3, [sp, #0]
   10cd8:	4a29      	ldr	r2, [pc, #164]	; (10d80 <ll_init+0x104>)
   10cda:	2304      	movs	r3, #4
   10cdc:	f7f7 fb7e 	bl	83dc <ticker_init>
	LL_ASSERT(!err);
   10ce0:	b128      	cbz	r0, 10cee <ll_init+0x72>
   10ce2:	4040      	eors	r0, r0
   10ce4:	f380 8811 	msr	BASEPRI, r0
   10ce8:	f04f 0004 	mov.w	r0, #4
   10cec:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   10cee:	4825      	ldr	r0, [pc, #148]	; (10d84 <ll_init+0x108>)
   10cf0:	f002 fb4a 	bl	13388 <device_get_binding>
	if (!clk_m16) {
   10cf4:	2800      	cmp	r0, #0
   10cf6:	d0c9      	beq.n	10c8c <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   10cf8:	f640 1368 	movw	r3, #2408	; 0x968
   10cfc:	9305      	str	r3, [sp, #20]
   10cfe:	4b22      	ldr	r3, [pc, #136]	; (10d88 <ll_init+0x10c>)
   10d00:	9304      	str	r3, [sp, #16]
   10d02:	f240 1301 	movw	r3, #257	; 0x101
   10d06:	9303      	str	r3, [sp, #12]
   10d08:	9501      	str	r5, [sp, #4]
   10d0a:	23fb      	movs	r3, #251	; 0xfb
   10d0c:	2501      	movs	r5, #1
   10d0e:	9302      	str	r3, [sp, #8]
   10d10:	4622      	mov	r2, r4
   10d12:	9500      	str	r5, [sp, #0]
   10d14:	462b      	mov	r3, r5
   10d16:	2107      	movs	r1, #7
   10d18:	f7fe fe56 	bl	f9c8 <radio_init>
	if (err) {
   10d1c:	4604      	mov	r4, r0
   10d1e:	b9e0      	cbnz	r0, 10d5a <ll_init+0xde>
	ll_filter_reset(true);
   10d20:	4628      	mov	r0, r5
   10d22:	f001 fb67 	bl	123f4 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10d26:	4622      	mov	r2, r4
   10d28:	4621      	mov	r1, r4
   10d2a:	4628      	mov	r0, r5
   10d2c:	f7ef ffac 	bl	c88 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   10d30:	4622      	mov	r2, r4
   10d32:	4621      	mov	r1, r4
   10d34:	200b      	movs	r0, #11
   10d36:	f7ef ffa7 	bl	c88 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   10d3a:	4622      	mov	r2, r4
   10d3c:	4621      	mov	r1, r4
   10d3e:	2018      	movs	r0, #24
   10d40:	f7ef ffa2 	bl	c88 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   10d44:	4628      	mov	r0, r5
   10d46:	f7ef ff6d 	bl	c24 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   10d4a:	200b      	movs	r0, #11
   10d4c:	f7ef ff6a 	bl	c24 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   10d50:	2018      	movs	r0, #24
   10d52:	f7ef ff67 	bl	c24 <_arch_irq_enable>
	return 0;
   10d56:	4620      	mov	r0, r4
   10d58:	e79a      	b.n	10c90 <ll_init+0x14>
		return -ENOMEM;
   10d5a:	f06f 000b 	mvn.w	r0, #11
   10d5e:	e797      	b.n	10c90 <ll_init+0x14>
   10d60:	20002428 	.word	0x20002428
   10d64:	00014ac4 	.word	0x00014ac4
   10d68:	00014aa0 	.word	0x00014aa0
   10d6c:	20002408 	.word	0x20002408
   10d70:	000130e1 	.word	0x000130e1
   10d74:	00013069 	.word	0x00013069
   10d78:	00013049 	.word	0x00013049
   10d7c:	20002198 	.word	0x20002198
   10d80:	20002058 	.word	0x20002058
   10d84:	00014acf 	.word	0x00014acf
   10d88:	200016f0 	.word	0x200016f0

00010d8c <ll_adv_set_get>:


struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   10d8c:	4800      	ldr	r0, [pc, #0]	; (10d90 <ll_adv_set_get+0x4>)
   10d8e:	4770      	bx	lr
   10d90:	2000242e 	.word	0x2000242e

00010d94 <ll_adv_params_set>:

u32_t ll_adv_params_set(u16_t interval, u8_t adv_type,
			u8_t own_addr_type, u8_t direct_addr_type,
			u8_t const *const direct_addr, u8_t chan_map,
			u8_t filter_policy)
{
   10d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d98:	4616      	mov	r6, r2
   10d9a:	4698      	mov	r8, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   10d9c:	2206      	movs	r2, #6
   10d9e:	2300      	movs	r3, #0
   10da0:	f88d 3000 	strb.w	r3, [sp]
   10da4:	f88d 2002 	strb.w	r2, [sp, #2]
   10da8:	2301      	movs	r3, #1
   10daa:	2202      	movs	r2, #2
{
   10dac:	4604      	mov	r4, r0
   10dae:	468b      	mov	fp, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   10db0:	f88d 3001 	strb.w	r3, [sp, #1]
   10db4:	f88d 2003 	strb.w	r2, [sp, #3]
   10db8:	f88d 3004 	strb.w	r3, [sp, #4]
				     PDU_ADV_TYPE_DIRECT_IND};

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
   10dbc:	f7fe fee6 	bl	fb8c <ll_adv_is_enabled>
   10dc0:	4607      	mov	r7, r0
   10dc2:	2800      	cmp	r0, #0
   10dc4:	d17c      	bne.n	10ec0 <ll_adv_params_set+0x12c>
   10dc6:	f8df a100 	ldr.w	sl, [pc, #256]	; 10ec8 <ll_adv_params_set+0x134>
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
   10dca:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   10dce:	f89a 3000 	ldrb.w	r3, [sl]
   10dd2:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
   10dd6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (adv_type != 0x01) {
   10dda:	f1bb 0f01 	cmp.w	fp, #1
	ll_adv.filter_policy = filter_policy;
   10dde:	f362 03c4 	bfi	r3, r2, #3, #2
		ll_adv.interval = interval;
   10de2:	bf14      	ite	ne
   10de4:	f8aa 400a 	strhne.w	r4, [sl, #10]
		ll_adv.interval = 0;
   10de8:	f8aa 000a 	strheq.w	r0, [sl, #10]
	ll_adv.filter_policy = filter_policy;
   10dec:	f88a 3000 	strb.w	r3, [sl]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
   10df0:	f7fe febc 	bl	fb6c <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10df4:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
   10df8:	ab02      	add	r3, sp, #8
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10dfa:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   10dfe:	449b      	add	fp, r3
   10e00:	5d03      	ldrb	r3, [r0, r4]
   10e02:	f81b 2c08 	ldrb.w	r2, [fp, #-8]
   10e06:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   10e0a:	f36f 1304 	bfc	r3, #4, #1
   10e0e:	5503      	strb	r3, [r0, r4]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   10e10:	b2db      	uxtb	r3, r3
   10e12:	f003 020f 	and.w	r2, r3, #15
   10e16:	2a01      	cmp	r2, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
   10e18:	bf94      	ite	ls
   10e1a:	f043 0320 	orrls.w	r3, r3, #32
	} else {
		pdu->chan_sel = 0;
   10e1e:	f36f 1345 	bfchi	r3, #5, #1
   10e22:	5503      	strb	r3, [r0, r4]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   10e24:	f89a 3000 	ldrb.w	r3, [sl]
   10e28:	f366 1346 	bfi	r3, r6, #5, #2
   10e2c:	f88a 3000 	strb.w	r3, [sl]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10e30:	b2db      	uxtb	r3, r3
   10e32:	065a      	lsls	r2, r3, #25
	radio_adv_data = radio_adv_data_get();
   10e34:	4605      	mov	r5, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10e36:	eb00 0904 	add.w	r9, r0, r4
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10e3a:	d508      	bpl.n	10e4e <ll_adv_params_set+0xba>
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   10e3c:	f368 13c7 	bfi	r3, r8, #7, #1
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   10e40:	2206      	movs	r2, #6
   10e42:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e44:	481f      	ldr	r0, [pc, #124]	; (10ec4 <ll_adv_params_set+0x130>)
		ll_adv.id_addr_type = direct_addr_type;
   10e46:	f88a 3000 	strb.w	r3, [sl]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   10e4a:	f7ef fbc9 	bl	5e0 <memcpy>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
   10e4e:	5d2b      	ldrb	r3, [r5, r4]
   10e50:	f006 0601 	and.w	r6, r6, #1
   10e54:	f366 1386 	bfi	r3, r6, #6, #1
	pdu->rx_addr = 0;
   10e58:	f36f 13c7 	bfc	r3, #7, #1
   10e5c:	552b      	strb	r3, [r5, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   10e5e:	b2db      	uxtb	r3, r3
   10e60:	f003 020f 	and.w	r2, r3, #15
   10e64:	2a01      	cmp	r2, #1
   10e66:	d125      	bne.n	10eb4 <ll_adv_params_set+0x120>
		pdu->rx_addr = direct_addr_type;
   10e68:	f368 13c7 	bfi	r3, r8, #7, #1
   10e6c:	552b      	strb	r3, [r5, r4]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   10e6e:	2206      	movs	r2, #6
   10e70:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e72:	f109 0008 	add.w	r0, r9, #8
   10e76:	f7ef fbb3 	bl	5e0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   10e7a:	230c      	movs	r3, #12

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   10e7c:	f889 3001 	strb.w	r3, [r9, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   10e80:	f7fe fe80 	bl	fb84 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10e84:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
   10e88:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   10e8c:	2404      	movs	r4, #4
   10e8e:	5c83      	ldrb	r3, [r0, r2]
   10e90:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   10e94:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   10e98:	f366 1386 	bfi	r3, r6, #6, #1
	pdu->rx_addr = 0;
   10e9c:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10ea0:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   10ea2:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   10ea4:	784b      	ldrb	r3, [r1, #1]
   10ea6:	b90b      	cbnz	r3, 10eac <ll_adv_params_set+0x118>
		pdu->len = BDADDR_SIZE;
   10ea8:	2306      	movs	r3, #6
   10eaa:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   10eac:	4638      	mov	r0, r7
   10eae:	b003      	add	sp, #12
   10eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (pdu->len == 0) {
   10eb4:	f899 3001 	ldrb.w	r3, [r9, #1]
   10eb8:	2b00      	cmp	r3, #0
   10eba:	d1e1      	bne.n	10e80 <ll_adv_params_set+0xec>
		pdu->len = BDADDR_SIZE;
   10ebc:	2306      	movs	r3, #6
   10ebe:	e7dd      	b.n	10e7c <ll_adv_params_set+0xe8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10ec0:	270c      	movs	r7, #12
   10ec2:	e7f3      	b.n	10eac <ll_adv_params_set+0x118>
   10ec4:	20002430 	.word	0x20002430
   10ec8:	2000242e 	.word	0x2000242e

00010ecc <ll_ext_adv_params_set>:
u32_t ll_ext_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   10ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ed0:	b08d      	sub	sp, #52	; 0x34
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   10ed2:	2601      	movs	r6, #1
{
   10ed4:	9304      	str	r3, [sp, #16]
   10ed6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   10eda:	9305      	str	r3, [sp, #20]
   10edc:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   10ee0:	9306      	str	r3, [sp, #24]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   10ee2:	2300      	movs	r3, #0
   10ee4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   10ee8:	2306      	movs	r3, #6
   10eea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   10eee:	2502      	movs	r5, #2
   10ef0:	2307      	movs	r3, #7
{
   10ef2:	4689      	mov	r9, r1
   10ef4:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   10ef6:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
   10efa:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
   10efe:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   10f02:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
//	struct radio_ext_adv_data *radio_aux_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
   10f06:	f7fe fe41 	bl	fb8c <ll_adv_is_enabled>
   10f0a:	4682      	mov	sl, r0
   10f0c:	2800      	cmp	r0, #0
   10f0e:	f040 81c3 	bne.w	11298 <ll_ext_adv_params_set+0x3cc>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
   10f12:	4b61      	ldr	r3, [pc, #388]	; (11098 <ll_ext_adv_params_set+0x1cc>)
   10f14:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
   10f18:	731a      	strb	r2, [r3, #12]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
   10f1a:	7a1a      	ldrb	r2, [r3, #8]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
   10f1c:	f019 0f10 	tst.w	r9, #16
	ll_adv.phy_p = BIT(0);
   10f20:	f366 0202 	bfi	r2, r6, #0, #3
   10f24:	721a      	strb	r2, [r3, #8]
		if (evt_prop & BIT(4)) {
   10f26:	f000 80a4 	beq.w	11072 <ll_ext_adv_params_set+0x1a6>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   10f2a:	2203      	movs	r2, #3
   10f2c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
   10f30:	f019 0f08 	tst.w	r9, #8
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   10f34:	f04f 0204 	mov.w	r2, #4
   10f38:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   10f3c:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
   10f40:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
			if (evt_prop & BIT(3)) {
   10f44:	d108      	bne.n	10f58 <ll_ext_adv_params_set+0x8c>
			adv_type = leg_adv_type[evt_prop & 0x03];
   10f46:	a90c      	add	r1, sp, #48	; 0x30
   10f48:	f009 0203 	and.w	r2, r9, #3
   10f4c:	440a      	add	r2, r1
   10f4e:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
   10f52:	42b1      	cmp	r1, r6
   10f54:	f040 809d 	bne.w	11092 <ll_ext_adv_params_set+0x1c6>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
   10f58:	2200      	movs	r2, #0
   10f5a:	815a      	strh	r2, [r3, #10]
   10f5c:	2101      	movs	r1, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
   10f5e:	781a      	ldrb	r2, [r3, #0]
   10f60:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10f64:	9107      	str	r1, [sp, #28]
   10f66:	f360 0202 	bfi	r2, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
   10f6a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
   10f6e:	f360 02c4 	bfi	r2, r0, #3, #2
   10f72:	701a      	strb	r2, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
   10f74:	f7fe fdfa 	bl	fb6c <radio_adv_data_get>
   10f78:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();							// testing
   10f7a:	f7fe fdfb 	bl	fb74 <radio_aux_adv_data_get>
//	radio_aux_adv_data = radio_chain_adv_data_get();

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
   10f7e:	9907      	ldr	r1, [sp, #28]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10f80:	f896 5203 	ldrb.w	r5, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   10f84:	f890 7203 	ldrb.w	r7, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
   10f88:	aa0c      	add	r2, sp, #48	; 0x30
   10f8a:	4411      	add	r1, r2
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10f8c:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   10f90:	f811 2c08 	ldrb.w	r2, [r1, #-8]
   10f94:	5d71      	ldrb	r1, [r6, r5]
   10f96:	f002 020f 	and.w	r2, r2, #15
   10f9a:	f362 0103 	bfi	r1, r2, #0, #4
   10f9e:	5571      	strb	r1, [r6, r5]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   10fa0:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	radio_aux_adv_data = radio_aux_adv_data_get();							// testing
   10fa4:	4603      	mov	r3, r0
	aux_pdu->type = pdu->type;
   10fa6:	5dc1      	ldrb	r1, [r0, r7]
   10fa8:	f362 0103 	bfi	r1, r2, #0, #4
   10fac:	55c1      	strb	r1, [r0, r7]
	
	pdu->rfu = 0;
   10fae:	5d72      	ldrb	r2, [r6, r5]
   10fb0:	f36f 1204 	bfc	r2, #4, #1
   10fb4:	5572      	strb	r2, [r6, r5]
	aux_pdu->rfu = pdu->rfu;
   10fb6:	5dc2      	ldrb	r2, [r0, r7]
   10fb8:	f36f 1204 	bfc	r2, #4, #1
   10fbc:	55c2      	strb	r2, [r0, r7]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
   10fbe:	5d72      	ldrb	r2, [r6, r5]
   10fc0:	f002 010f 	and.w	r1, r2, #15
   10fc4:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   10fc6:	bf95      	itete	ls
   10fc8:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
	} else {
		pdu->chan_sel = 0;
   10fcc:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
   10fd0:	5572      	strbls	r2, [r6, r5]
		pdu->chan_sel = 0;
   10fd2:	5572      	strbhi	r2, [r6, r5]
		aux_pdu->chan_sel = pdu->chan_sel;
   10fd4:	bf94      	ite	ls
   10fd6:	5dc2      	ldrbls	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
   10fd8:	5dc2      	ldrbhi	r2, [r0, r7]
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
   10fda:	9904      	ldr	r1, [sp, #16]
		aux_pdu->chan_sel = pdu->chan_sel;
   10fdc:	bf94      	ite	ls
   10fde:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
   10fe2:	f36f 1245 	bfchi	r2, #5, #1
   10fe6:	55c2      	strb	r2, [r0, r7]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
   10fe8:	eb00 0807 	add.w	r8, r0, r7
	ll_adv.own_addr_type = own_addr_type;
   10fec:	482a      	ldr	r0, [pc, #168]	; (11098 <ll_ext_adv_params_set+0x1cc>)
   10fee:	7802      	ldrb	r2, [r0, #0]
   10ff0:	f361 1246 	bfi	r2, r1, #5, #2
   10ff4:	7002      	strb	r2, [r0, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10ff6:	b2d2      	uxtb	r2, r2
   10ff8:	0651      	lsls	r1, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   10ffa:	eb06 0405 	add.w	r4, r6, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   10ffe:	d50a      	bpl.n	11016 <ll_ext_adv_params_set+0x14a>
   11000:	9307      	str	r3, [sp, #28]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
   11002:	9b05      	ldr	r3, [sp, #20]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   11004:	9917      	ldr	r1, [sp, #92]	; 0x5c
		ll_adv.id_addr_type = direct_addr_type;
   11006:	f363 12c7 	bfi	r2, r3, #7, #1
   1100a:	f800 2b02 	strb.w	r2, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1100e:	2206      	movs	r2, #6
   11010:	f7ef fae6 	bl	5e0 <memcpy>
   11014:	9b07      	ldr	r3, [sp, #28]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
   11016:	9a04      	ldr	r2, [sp, #16]
   11018:	f002 0201 	and.w	r2, r2, #1
   1101c:	9204      	str	r2, [sp, #16]
   1101e:	9904      	ldr	r1, [sp, #16]
   11020:	5d72      	ldrb	r2, [r6, r5]
   11022:	f361 1286 	bfi	r2, r1, #6, #1
   11026:	5572      	strb	r2, [r6, r5]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
   11028:	5dda      	ldrb	r2, [r3, r7]
   1102a:	f36f 1286 	bfc	r2, #6, #1
   1102e:	55da      	strb	r2, [r3, r7]
	pdu->rx_addr = 0;  							
   11030:	5d72      	ldrb	r2, [r6, r5]
   11032:	f36f 12c7 	bfc	r2, #7, #1
   11036:	5572      	strb	r2, [r6, r5]
	aux_pdu->rx_addr = pdu->rx_addr;
   11038:	5dda      	ldrb	r2, [r3, r7]
   1103a:	f36f 12c7 	bfc	r2, #7, #1
   1103e:	55da      	strb	r2, [r3, r7]
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
   11040:	f019 0204 	ands.w	r2, r9, #4
		pdu->rx_addr = 0;//direct_addr_type;
   11044:	bf1e      	ittt	ne
   11046:	5d73      	ldrbne	r3, [r6, r5]
   11048:	f36f 13c7 	bfcne	r3, #7, #1
   1104c:	5573      	strbne	r3, [r6, r5]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1104e:	5d73      	ldrb	r3, [r6, r5]
   11050:	f003 010f 	and.w	r1, r3, #15
   11054:	2901      	cmp	r1, #1
   11056:	d121      	bne.n	1109c <ll_ext_adv_params_set+0x1d0>
		pdu->rx_addr = direct_addr_type;
   11058:	9a05      	ldr	r2, [sp, #20]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1105a:	9917      	ldr	r1, [sp, #92]	; 0x5c
		pdu->rx_addr = direct_addr_type;
   1105c:	f362 13c7 	bfi	r3, r2, #7, #1
   11060:	5573      	strb	r3, [r6, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   11062:	2206      	movs	r2, #6
   11064:	f104 0008 	add.w	r0, r4, #8
   11068:	f7ef faba 	bl	5e0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1106c:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
   1106e:	7063      	strb	r3, [r4, #1]
   11070:	e0ec      	b.n	1124c <ll_ext_adv_params_set+0x380>
			if (((evt_prop & 0x03) == 0x03) ||
   11072:	f009 0203 	and.w	r2, r9, #3
   11076:	2a03      	cmp	r2, #3
   11078:	f000 8111 	beq.w	1129e <ll_ext_adv_params_set+0x3d2>
   1107c:	f009 020c 	and.w	r2, r9, #12
   11080:	2a0c      	cmp	r2, #12
   11082:	f000 810c 	beq.w	1129e <ll_ext_adv_params_set+0x3d2>
			ll_adv.phy_p = phy_p;
   11086:	7a1a      	ldrb	r2, [r3, #8]
   11088:	9906      	ldr	r1, [sp, #24]
   1108a:	f361 0202 	bfi	r2, r1, #0, #3
   1108e:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   11090:	2105      	movs	r1, #5
		ll_adv.interval = interval;
   11092:	815c      	strh	r4, [r3, #10]
   11094:	e763      	b.n	10f5e <ll_ext_adv_params_set+0x92>
   11096:	bf00      	nop
   11098:	2000242e 	.word	0x2000242e
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1109c:	2907      	cmp	r1, #7
   1109e:	f040 80f6 	bne.w	1128e <ll_ext_adv_params_set+0x3c2>
		p->ext_hdr_len = 0;
   110a2:	78a3      	ldrb	r3, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
   110a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   110a8:	f36f 1387 	bfc	r3, #6, #2
   110ac:	70a3      	strb	r3, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
   110ae:	f898 3002 	ldrb.w	r3, [r8, #2]
		aux_p->adv_mode = p->adv_mode;
   110b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   110b6:	f36f 1387 	bfc	r3, #6, #2
   110ba:	f888 3002 	strb.w	r3, [r8, #2]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   110be:	f019 0f20 	tst.w	r9, #32
		*(u8_t *)h = 0;
   110c2:	f04f 0300 	mov.w	r3, #0
   110c6:	70e3      	strb	r3, [r4, #3]
		p = (void *)&pdu->adv_ext_ind;
   110c8:	f104 0002 	add.w	r0, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
   110cc:	f104 0504 	add.w	r5, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
   110d0:	f108 0102 	add.w	r1, r8, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   110d4:	f108 0604 	add.w	r6, r8, #4
		*(u8_t *)aux_h = 0;
   110d8:	f888 3003 	strb.w	r3, [r8, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
   110dc:	d007      	beq.n	110ee <ll_ext_adv_params_set+0x222>
   110de:	78a3      	ldrb	r3, [r4, #2]
   110e0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   110e4:	d103      	bne.n	110ee <ll_ext_adv_params_set+0x222>
   110e6:	9b06      	ldr	r3, [sp, #24]
   110e8:	2b04      	cmp	r3, #4
   110ea:	f040 80ca 	bne.w	11282 <ll_ext_adv_params_set+0x3b6>
			h->adv_addr = 1;
   110ee:	78e3      	ldrb	r3, [r4, #3]
   110f0:	f043 0301 	orr.w	r3, r3, #1
   110f4:	70e3      	strb	r3, [r4, #3]
			ptr += BDADDR_SIZE;
   110f6:	f104 030a 	add.w	r3, r4, #10
		if(evt_prop & BIT(2)){
   110fa:	b122      	cbz	r2, 11106 <ll_ext_adv_params_set+0x23a>
			h->tgt_addr = 1;
   110fc:	78e2      	ldrb	r2, [r4, #3]
   110fe:	f042 0202 	orr.w	r2, r2, #2
   11102:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
   11104:	3306      	adds	r3, #6
		if(evt_prop & BIT(6)){
   11106:	f019 0f40 	tst.w	r9, #64	; 0x40
   1110a:	f000 80bc 	beq.w	11286 <ll_ext_adv_params_set+0x3ba>
			h->adi = 1;
   1110e:	78e2      	ldrb	r2, [r4, #3]
			adi_ptr = ptr;
   11110:	9302      	str	r3, [sp, #8]
			h->adi = 1;
   11112:	f042 0208 	orr.w	r2, r2, #8
   11116:	70e2      	strb	r2, [r4, #3]
			aux_h->adi = h->adi;
   11118:	f898 2003 	ldrb.w	r2, [r8, #3]
			aux_adi_ptr = aux_ptr;
   1111c:	9603      	str	r6, [sp, #12]
			aux_h->adi = h->adi;
   1111e:	f042 0208 	orr.w	r2, r2, #8
   11122:	f888 2003 	strb.w	r2, [r8, #3]
			h->aux_ptr = 1;
   11126:	78e2      	ldrb	r2, [r4, #3]
   11128:	f042 0210 	orr.w	r2, r2, #16
   1112c:	70e2      	strb	r2, [r4, #3]
			aux_h->aux_ptr = h->aux_ptr;
   1112e:	f898 2003 	ldrb.w	r2, [r8, #3]
   11132:	f042 0210 	orr.w	r2, r2, #16
   11136:	f888 2003 	strb.w	r2, [r8, #3]
			h->tx_pwr = 1;
   1113a:	78e7      	ldrb	r7, [r4, #3]
			ptr += sizeof(*adi_ptr);
   1113c:	f103 0b02 	add.w	fp, r3, #2
			h->tx_pwr = 1;
   11140:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			aux_ptr+= sizeof(*aux_ap);
   11144:	f108 0209 	add.w	r2, r8, #9
			h->tx_pwr = 1;
   11148:	70e7      	strb	r7, [r4, #3]
			ptr += sizeof(*adi_ptr);
   1114a:	f8cd b004 	str.w	fp, [sp, #4]
			ptr ++;
   1114e:	3306      	adds	r3, #6
		len = ptr - (u8_t *)p;
   11150:	1a1b      	subs	r3, r3, r0
   11152:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
   11154:	2b02      	cmp	r3, #2
			p->ext_hdr_len = (len -
   11156:	bf8c      	ite	hi
   11158:	78a0      	ldrbhi	r0, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   1115a:	2301      	movls	r3, #1
   1115c:	7063      	strb	r3, [r4, #1]
			p->ext_hdr_len = (len -
   1115e:	bf88      	it	hi
   11160:	f103 37ff 	addhi.w	r7, r3, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
   11164:	eba2 0301 	sub.w	r3, r2, r1
			p->ext_hdr_len = (len -
   11168:	bf88      	it	hi
   1116a:	f367 0005 	bfihi	r0, r7, #0, #6
		aux_len = aux_ptr - (u8_t *)aux_p;
   1116e:	b2db      	uxtb	r3, r3
			p->ext_hdr_len = (len -
   11170:	bf88      	it	hi
   11172:	70a0      	strbhi	r0, [r4, #2]
   11174:	4a4b      	ldr	r2, [pc, #300]	; (112a4 <ll_ext_adv_params_set+0x3d8>)
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
   11176:	2b02      	cmp	r3, #2
			aux_p->ext_hdr_len = (aux_len -
   11178:	bf82      	ittt	hi
   1117a:	f898 1002 	ldrbhi.w	r1, [r8, #2]
			aux_pdu->len = aux_len;
   1117e:	f888 3001 	strbhi.w	r3, [r8, #1]
			aux_p->ext_hdr_len = (aux_len -
   11182:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			aux_ptr_len = aux_len;
   11186:	7013      	strb	r3, [r2, #0]
		if(h->adv_addr){
   11188:	78e3      	ldrb	r3, [r4, #3]
			aux_p->ext_hdr_len = (aux_len -
   1118a:	bf8b      	itete	hi
   1118c:	f360 0105 	bfihi	r1, r0, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   11190:	2101      	movls	r1, #1
			aux_p->ext_hdr_len = (aux_len -
   11192:	f888 1002 	strbhi.w	r1, [r8, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
   11196:	f888 1001 	strbls.w	r1, [r8, #1]
		if(h->adv_addr){
   1119a:	07da      	lsls	r2, r3, #31
			ptr += BDADDR_SIZE;
   1119c:	bf48      	it	mi
   1119e:	f104 050a 	addmi.w	r5, r4, #10
		if(h->tgt_addr){
   111a2:	079f      	lsls	r7, r3, #30
   111a4:	d505      	bpl.n	111b2 <ll_ext_adv_params_set+0x2e6>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
   111a6:	4628      	mov	r0, r5
   111a8:	2206      	movs	r2, #6
   111aa:	9917      	ldr	r1, [sp, #92]	; 0x5c
   111ac:	f7ef fa18 	bl	5e0 <memcpy>
			ptr += BDADDR_SIZE;
   111b0:	3506      	adds	r5, #6
		if(h->adi){
   111b2:	78e1      	ldrb	r1, [r4, #3]
   111b4:	0708      	lsls	r0, r1, #28
   111b6:	d517      	bpl.n	111e8 <ll_ext_adv_params_set+0x31c>
			adi_ptr->did = 0x00;
   111b8:	9b02      	ldr	r3, [sp, #8]
   111ba:	2200      	movs	r2, #0
   111bc:	701a      	strb	r2, [r3, #0]
   111be:	785b      	ldrb	r3, [r3, #1]
			adi_ptr->sid = 0x02;//sid & 0x0f;
   111c0:	2002      	movs	r0, #2
   111c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   111c6:	f360 1307 	bfi	r3, r0, #4, #4
   111ca:	9802      	ldr	r0, [sp, #8]
   111cc:	7043      	strb	r3, [r0, #1]
			aux_adi_ptr->did = adi_ptr->did;
   111ce:	9b03      	ldr	r3, [sp, #12]
   111d0:	701a      	strb	r2, [r3, #0]
   111d2:	785b      	ldrb	r3, [r3, #1]
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
   111d4:	2204      	movs	r2, #4
   111d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   111da:	f362 1307 	bfi	r3, r2, #4, #4
   111de:	9a03      	ldr	r2, [sp, #12]
			ptr += sizeof(*adi_ptr);
   111e0:	3502      	adds	r5, #2
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
   111e2:	7053      	strb	r3, [r2, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
   111e4:	f108 0606 	add.w	r6, r8, #6
		if(h->aux_ptr){
   111e8:	06ca      	lsls	r2, r1, #27
   111ea:	d522      	bpl.n	11232 <ll_ext_adv_params_set+0x366>
			ap->offs_units = 0;
   111ec:	9b01      	ldr	r3, [sp, #4]
			ap->offs = 00;
   111ee:	9a01      	ldr	r2, [sp, #4]
			ap->phy = 0;
   111f0:	9c01      	ldr	r4, [sp, #4]
			ap->chan_idx = 0x03;
   111f2:	2003      	movs	r0, #3
			ap->offs_units = 0;
   111f4:	7018      	strb	r0, [r3, #0]
			ap->offs = 00;
   111f6:	2300      	movs	r3, #0
   111f8:	7053      	strb	r3, [r2, #1]
   111fa:	7892      	ldrb	r2, [r2, #2]
			ap->phy = 0;
   111fc:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   11200:	f363 1247 	bfi	r2, r3, #5, #3
   11204:	70a2      	strb	r2, [r4, #2]
			aux_ap->chan_idx = 0x03;
   11206:	f89b 2000 	ldrb.w	r2, [fp]
			aux_ap->offs = 00;
   1120a:	f88b 3001 	strb.w	r3, [fp, #1]
			aux_ap->chan_idx = 0x03;
   1120e:	f360 0205 	bfi	r2, r0, #0, #6
			aux_ap->offs_units = 0;
   11212:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   11216:	f363 12c7 	bfi	r2, r3, #7, #1
   1121a:	f88b 2000 	strb.w	r2, [fp]
			aux_ap->offs = 00;
   1121e:	f89b 2002 	ldrb.w	r2, [fp, #2]
			aux_ap->phy = 0;
   11222:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   11226:	f363 1247 	bfi	r2, r3, #5, #3
			ptr += sizeof(*ap);
   1122a:	4405      	add	r5, r0
			aux_ap->phy = 0;
   1122c:	f88b 2002 	strb.w	r2, [fp, #2]
			aux_ptr += sizeof(*ap);
   11230:	4406      	add	r6, r0
		if (h->tx_pwr) {
   11232:	064b      	lsls	r3, r1, #25
   11234:	d508      	bpl.n	11248 <ll_ext_adv_params_set+0x37c>
			if (tx_pwr) {
   11236:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11238:	b33b      	cbz	r3, 1128a <ll_ext_adv_params_set+0x3be>
				if (*tx_pwr != 0x7F) {
   1123a:	781b      	ldrb	r3, [r3, #0]
   1123c:	2b7f      	cmp	r3, #127	; 0x7f
   1123e:	d102      	bne.n	11246 <ll_ext_adv_params_set+0x37a>
					*tx_pwr = _tx_pwr;
   11240:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11242:	2300      	movs	r3, #0
   11244:	7013      	strb	r3, [r2, #0]
			*ptr = _tx_pwr;
   11246:	702b      	strb	r3, [r5, #0]
		set_data_ptr = aux_ptr; 
   11248:	4b17      	ldr	r3, [pc, #92]	; (112a8 <ll_ext_adv_params_set+0x3dc>)
   1124a:	601e      	str	r6, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
   1124c:	f7fe fc9a 	bl	fb84 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11250:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
   11254:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11258:	2404      	movs	r4, #4
   1125a:	5c83      	ldrb	r3, [r0, r2]
   1125c:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
   11260:	9c04      	ldr	r4, [sp, #16]
   11262:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   11266:	f364 1386 	bfi	r3, r4, #6, #1
	pdu->rx_addr = 0;
   1126a:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1126e:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
   11270:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   11272:	784b      	ldrb	r3, [r1, #1]
   11274:	b90b      	cbnz	r3, 1127a <ll_ext_adv_params_set+0x3ae>
		pdu->len = BDADDR_SIZE;
   11276:	2306      	movs	r3, #6
   11278:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
   1127a:	4650      	mov	r0, sl
   1127c:	b00d      	add	sp, #52	; 0x34
   1127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
   11282:	462b      	mov	r3, r5
   11284:	e739      	b.n	110fa <ll_ext_adv_params_set+0x22e>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   11286:	4632      	mov	r2, r6
   11288:	e762      	b.n	11150 <ll_ext_adv_params_set+0x284>
			_tx_pwr = 0;
   1128a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1128c:	e7db      	b.n	11246 <ll_ext_adv_params_set+0x37a>
	} else if (pdu->len == 0) {
   1128e:	7863      	ldrb	r3, [r4, #1]
   11290:	2b00      	cmp	r3, #0
   11292:	d1db      	bne.n	1124c <ll_ext_adv_params_set+0x380>
		pdu->len = BDADDR_SIZE;
   11294:	2306      	movs	r3, #6
   11296:	e6ea      	b.n	1106e <ll_ext_adv_params_set+0x1a2>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11298:	f04f 0a0c 	mov.w	sl, #12
   1129c:	e7ed      	b.n	1127a <ll_ext_adv_params_set+0x3ae>
				return 0x12; /* invalid HCI cmd param */
   1129e:	f04f 0a12 	mov.w	sl, #18
   112a2:	e7ea      	b.n	1127a <ll_ext_adv_params_set+0x3ae>
   112a4:	2000242c 	.word	0x2000242c
   112a8:	2000243c 	.word	0x2000243c

000112ac <ll_adv_data_set>:


void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   112ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112b0:	4688      	mov	r8, r1
   112b2:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   112b4:	f7fe fc5a 	bl	fb6c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   112b8:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
   112bc:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
   112c0:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   112c2:	f810 e002 	ldrb.w	lr, [r0, r2]
   112c6:	f00e 030f 	and.w	r3, lr, #15
   112ca:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   112cc:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   112d0:	d118      	bne.n	11304 <ll_adv_data_set+0x58>
	//	struct radio_ext_adv_data *radio_aux_adv_data;
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
   112d2:	f7fe fc4f 	bl	fb74 <radio_aux_adv_data_get>
	//	radio_aux_adv_data = radio_chain_adv_data_get();
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   112d6:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
	
		memcpy(set_data_ptr, data, len);
   112da:	4b29      	ldr	r3, [pc, #164]	; (11380 <ll_adv_data_set+0xd4>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   112dc:	eb05 2505 	add.w	r5, r5, r5, lsl #8
		memcpy(set_data_ptr, data, len);
   112e0:	4632      	mov	r2, r6
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   112e2:	4405      	add	r5, r0
		memcpy(set_data_ptr, data, len);
   112e4:	4641      	mov	r1, r8
   112e6:	6818      	ldr	r0, [r3, #0]
   112e8:	f7ef f97a 	bl	5e0 <memcpy>
		aux_pdu->len = aux_ptr_len + len;
   112ec:	4b25      	ldr	r3, [pc, #148]	; (11384 <ll_adv_data_set+0xd8>)
   112ee:	781b      	ldrb	r3, [r3, #0]
   112f0:	441e      	add	r6, r3
		radio_adv_data->last = last;
   112f2:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
   112f4:	706e      	strb	r6, [r5, #1]
		radio_adv_data->last = last;
   112f6:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
		ll_adv.aux_chain_count = 1; 	// fragment count which should come from host
   112fa:	4b23      	ldr	r3, [pc, #140]	; (11388 <ll_adv_data_set+0xdc>)
   112fc:	2201      	movs	r2, #1
   112fe:	735a      	strb	r2, [r3, #13]
   11300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
   11304:	2b01      	cmp	r3, #1
   11306:	d039      	beq.n	1137c <ll_adv_data_set+0xd0>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
   11308:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
   1130c:	42ab      	cmp	r3, r5
   1130e:	d104      	bne.n	1131a <ll_adv_data_set+0x6e>
			last = radio_adv_data->last + 1;
   11310:	3501      	adds	r5, #1
   11312:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
   11314:	2d02      	cmp	r5, #2
   11316:	bf08      	it	eq
   11318:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1131a:	eb05 2305 	add.w	r3, r5, r5, lsl #8
   1131e:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
   11320:	5ce0      	ldrb	r0, [r4, r3]
   11322:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
   11326:	f36f 1004 	bfc	r0, #4, #1
   1132a:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
   1132c:	5ca0      	ldrb	r0, [r4, r2]
   1132e:	f814 e003 	ldrb.w	lr, [r4, r3]
   11332:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11336:	f360 1e45 	bfi	lr, r0, #5, #1
   1133a:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
   1133e:	5ca0      	ldrb	r0, [r4, r2]
   11340:	fa5f fe8e 	uxtb.w	lr, lr
   11344:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11348:	f360 1e86 	bfi	lr, r0, #6, #1
   1134c:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
   11350:	5ca2      	ldrb	r2, [r4, r2]
   11352:	fa5f f08e 	uxtb.w	r0, lr
   11356:	09d2      	lsrs	r2, r2, #7
   11358:	f362 10c7 	bfi	r0, r2, #7, #1
   1135c:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1135e:	2206      	movs	r2, #6
   11360:	3102      	adds	r1, #2
   11362:	1cb8      	adds	r0, r7, #2
   11364:	f7ef f93c 	bl	5e0 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
   11368:	4632      	mov	r2, r6
   1136a:	4641      	mov	r1, r8
   1136c:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
   11370:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
   11372:	f7ef f935 	bl	5e0 <memcpy>
		pdu->len = BDADDR_SIZE + len;
   11376:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
   11378:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   1137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11380:	2000243c 	.word	0x2000243c
   11384:	2000242c 	.word	0x2000242c
   11388:	2000242e 	.word	0x2000242e

0001138c <ll_ext_adv_data_set>:
#endif


u8_t temp_buffer[270];
void ll_ext_adv_data_set(u8_t len, u8_t const *const data, u8_t operation, u8_t frag_pref)
{
   1138c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11390:	4689      	mov	r9, r1
   11392:	4617      	mov	r7, r2
   11394:	4680      	mov	r8, r0
	struct pdu_adv *pdu;
	u8_t last;


	
	radio_adv_data = radio_adv_data_get();
   11396:	f7fe fbe9 	bl	fb6c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1139a:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
   1139e:	eb04 2204 	add.w	r2, r4, r4, lsl #8
	radio_adv_data = radio_adv_data_get();
   113a2:	4605      	mov	r5, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   113a4:	f810 e002 	ldrb.w	lr, [r0, r2]
   113a8:	f00e 030f 	and.w	r3, lr, #15
   113ac:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   113ae:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
   113b2:	f040 80db 	bne.w	1156c <ll_ext_adv_data_set+0x1e0>
		struct pdu_adv *aux_pdu;
		struct pdu_adv *copy_pdu;
		u8_t last;
		u8_t length;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
   113b6:	f7fe fbdd 	bl	fb74 <radio_aux_adv_data_get>
   113ba:	4604      	mov	r4, r0
		radio_chain_adv_data = radio_chain_adv_data_get();
   113bc:	f7fe fbde 	bl	fb7c <radio_chain_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
   113c0:	f894 3203 	ldrb.w	r3, [r4, #515]	; 0x203
   113c4:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   113c8:	441c      	add	r4, r3

		memcpy(set_data_ptr, data, len);
   113ca:	4b86      	ldr	r3, [pc, #536]	; (115e4 <ll_ext_adv_data_set+0x258>)
   113cc:	4649      	mov	r1, r9
   113ce:	4642      	mov	r2, r8
		radio_chain_adv_data = radio_chain_adv_data_get();
   113d0:	4606      	mov	r6, r0
		memcpy(set_data_ptr, data, len);
   113d2:	6818      	ldr	r0, [r3, #0]
   113d4:	f7ef f904 	bl	5e0 <memcpy>
		length = len;
		aux_pdu->len = aux_ptr_len + len;
   113d8:	4b83      	ldr	r3, [pc, #524]	; (115e8 <ll_ext_adv_data_set+0x25c>)
   113da:	781a      	ldrb	r2, [r3, #0]
   113dc:	4442      	add	r2, r8
		radio_adv_data->last = last;
   113de:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
   113e0:	b2d2      	uxtb	r2, r2
   113e2:	7062      	strb	r2, [r4, #1]
		radio_adv_data->last = last;
   113e4:	f885 3203 	strb.w	r3, [r5, #515]	; 0x203
			memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
			pointer_offset = 257;
			ll_adv.aux_chain_count = 1;
		}
*/		
		if(aux_h->adv_addr){
   113e8:	78e3      	ldrb	r3, [r4, #3]
   113ea:	07d9      	lsls	r1, r3, #31
			aux_ptr += BDADDR_SIZE;
   113ec:	bf4c      	ite	mi
   113ee:	f104 000a 	addmi.w	r0, r4, #10
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
   113f2:	1d20      	addpl	r0, r4, #4
		}
		if(aux_h->tgt_addr){
   113f4:	079d      	lsls	r5, r3, #30
			aux_ptr += BDADDR_SIZE;
   113f6:	bf48      	it	mi
   113f8:	3006      	addmi	r0, #6
		}
		if(aux_h->adi){
   113fa:	0719      	lsls	r1, r3, #28
   113fc:	d509      	bpl.n	11412 <ll_ext_adv_data_set+0x86>
			aux_adi_ptr = aux_ptr;
			aux_adi_ptr->did = 0x00;
   113fe:	2100      	movs	r1, #0
   11400:	7001      	strb	r1, [r0, #0]
   11402:	7841      	ldrb	r1, [r0, #1]
			aux_adi_ptr->sid = 0x04;//sid & 0x0f;
   11404:	2504      	movs	r5, #4
   11406:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   1140a:	f365 1107 	bfi	r1, r5, #4, #4
   1140e:	7041      	strb	r1, [r0, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
   11410:	3002      	adds	r0, #2
		}

		switch (operation){
   11412:	2f03      	cmp	r7, #3
   11414:	f200 80e3 	bhi.w	115de <ll_ext_adv_data_set+0x252>
   11418:	e8df f007 	tbb	[pc, r7]
   1141c:	805d022e 	.word	0x805d022e
			case 1:  //First fragment 
					
				if(!aux_h->aux_ptr){
   11420:	f013 0310 	ands.w	r3, r3, #16
   11424:	d11a      	bne.n	1145c <ll_ext_adv_data_set+0xd0>
					aux_ap = aux_ptr;
					aux_ap->chan_idx = 0x03;
   11426:	7801      	ldrb	r1, [r0, #0]
					aux_ap->ca = 0;	
					aux_ap->offs_units = 0;
					aux_ap->offs = 00;
   11428:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
   1142a:	2503      	movs	r5, #3
   1142c:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
   11430:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   11434:	f363 11c7 	bfi	r1, r3, #7, #1
   11438:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
   1143a:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
   1143c:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
   11440:	f363 1147 	bfi	r1, r3, #5, #3

					aux_h->aux_ptr = 1;
   11444:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
   11446:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
   11448:	f043 0310 	orr.w	r3, r3, #16
   1144c:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
   1144e:	78a3      	ldrb	r3, [r4, #2]
   11450:	f3c3 0105 	ubfx	r1, r3, #0, #6
   11454:	4429      	add	r1, r5
   11456:	f361 0305 	bfi	r3, r1, #0, #6
   1145a:	70a3      	strb	r3, [r4, #2]
				//	memset(aux_ptr, 0 , 3);
				}

				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[0];
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
   1145c:	3202      	adds	r2, #2
   1145e:	4621      	mov	r1, r4
   11460:	4630      	mov	r0, r6
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
					aux_pdu->len = aux_pdu->len - 3;
				}

				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
   11462:	f7ef f8bd 	bl	5e0 <memcpy>
				pointer_offset = 257;
   11466:	4b61      	ldr	r3, [pc, #388]	; (115ec <ll_ext_adv_data_set+0x260>)
   11468:	f240 1201 	movw	r2, #257	; 0x101
   1146c:	801a      	strh	r2, [r3, #0]
				ll_adv.aux_chain_count = 1;
   1146e:	4b60      	ldr	r3, [pc, #384]	; (115f0 <ll_ext_adv_data_set+0x264>)
   11470:	2201      	movs	r2, #1
   11472:	735a      	strb	r2, [r3, #13]
				break;
   11474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if(!aux_h->aux_ptr){
   11478:	f013 0310 	ands.w	r3, r3, #16
   1147c:	d11a      	bne.n	114b4 <ll_ext_adv_data_set+0x128>
					aux_ap->chan_idx = 0x03;
   1147e:	7801      	ldrb	r1, [r0, #0]
					aux_ap->offs = 00;
   11480:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
   11482:	2503      	movs	r5, #3
   11484:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
   11488:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   1148c:	f363 11c7 	bfi	r1, r3, #7, #1
   11490:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
   11492:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
   11494:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
   11498:	f363 1147 	bfi	r1, r3, #5, #3
					aux_h->aux_ptr = 1;
   1149c:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
   1149e:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
   114a0:	f043 0310 	orr.w	r3, r3, #16
   114a4:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
   114a6:	78a3      	ldrb	r3, [r4, #2]
   114a8:	f3c3 0105 	ubfx	r1, r3, #0, #6
   114ac:	4429      	add	r1, r5
   114ae:	f361 0305 	bfi	r3, r1, #0, #6
   114b2:	70a3      	strb	r3, [r4, #2]
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   114b4:	4d4d      	ldr	r5, [pc, #308]	; (115ec <ll_ext_adv_data_set+0x260>)
   114b6:	8828      	ldrh	r0, [r5, #0]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
   114b8:	3202      	adds	r2, #2
   114ba:	4621      	mov	r1, r4
   114bc:	4430      	add	r0, r6
   114be:	f7ef f88f 	bl	5e0 <memcpy>
				pointer_offset += 257;
   114c2:	882b      	ldrh	r3, [r5, #0]
   114c4:	f203 1301 	addw	r3, r3, #257	; 0x101
				ll_adv.aux_chain_count++;
   114c8:	4a49      	ldr	r2, [pc, #292]	; (115f0 <ll_ext_adv_data_set+0x264>)
				pointer_offset = 257;
   114ca:	802b      	strh	r3, [r5, #0]
				ll_adv.aux_chain_count++;
   114cc:	7b53      	ldrb	r3, [r2, #13]
   114ce:	3301      	adds	r3, #1
   114d0:	7353      	strb	r3, [r2, #13]
				break;
   114d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   114d6:	4d45      	ldr	r5, [pc, #276]	; (115ec <ll_ext_adv_data_set+0x260>)
   114d8:	8829      	ldrh	r1, [r5, #0]
				if(aux_h->aux_ptr){
   114da:	06db      	lsls	r3, r3, #27
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
   114dc:	440e      	add	r6, r1
				if(aux_h->aux_ptr){
   114de:	d514      	bpl.n	1150a <ll_ext_adv_data_set+0x17e>
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
   114e0:	78a3      	ldrb	r3, [r4, #2]
   114e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   114e6:	1ad2      	subs	r2, r2, r3
   114e8:	1cc1      	adds	r1, r0, #3
   114ea:	f7ef f879 	bl	5e0 <memcpy>
					aux_h->aux_ptr = 0;
   114ee:	78e3      	ldrb	r3, [r4, #3]
   114f0:	f36f 1304 	bfc	r3, #4, #1
   114f4:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
   114f6:	78a3      	ldrb	r3, [r4, #2]
   114f8:	f3c3 0205 	ubfx	r2, r3, #0, #6
   114fc:	3a03      	subs	r2, #3
   114fe:	f362 0305 	bfi	r3, r2, #0, #6
   11502:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
   11504:	7863      	ldrb	r3, [r4, #1]
   11506:	3b03      	subs	r3, #3
   11508:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
   1150a:	7862      	ldrb	r2, [r4, #1]
   1150c:	4621      	mov	r1, r4
   1150e:	3202      	adds	r2, #2
   11510:	4630      	mov	r0, r6
   11512:	f7ef f865 	bl	5e0 <memcpy>
				pointer_offset = 257;
   11516:	f240 1301 	movw	r3, #257	; 0x101
   1151a:	e7d5      	b.n	114c8 <ll_ext_adv_data_set+0x13c>
				if(aux_h->aux_ptr){
   1151c:	f013 0f10 	tst.w	r3, #16
   11520:	78a3      	ldrb	r3, [r4, #2]
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
   11522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11526:	f100 0103 	add.w	r1, r0, #3
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   1152a:	eba2 0203 	sub.w	r2, r2, r3
				if(aux_h->aux_ptr){
   1152e:	d01a      	beq.n	11566 <ll_ext_adv_data_set+0x1da>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   11530:	f7ef f856 	bl	5e0 <memcpy>
					aux_h->aux_ptr = 0;
   11534:	78e3      	ldrb	r3, [r4, #3]
   11536:	f36f 1304 	bfc	r3, #4, #1
   1153a:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
   1153c:	78a3      	ldrb	r3, [r4, #2]
   1153e:	f3c3 0205 	ubfx	r2, r3, #0, #6
   11542:	3a03      	subs	r2, #3
   11544:	f362 0305 	bfi	r3, r2, #0, #6
   11548:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
   1154a:	7863      	ldrb	r3, [r4, #1]
   1154c:	3b03      	subs	r3, #3
   1154e:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
   11550:	7862      	ldrb	r2, [r4, #1]
   11552:	4621      	mov	r1, r4
   11554:	3202      	adds	r2, #2
   11556:	4630      	mov	r0, r6
   11558:	f7ef f842 	bl	5e0 <memcpy>
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
   1155c:	7862      	ldrb	r2, [r4, #1]
   1155e:	4825      	ldr	r0, [pc, #148]	; (115f4 <ll_ext_adv_data_set+0x268>)
   11560:	3202      	adds	r2, #2
   11562:	4621      	mov	r1, r4
   11564:	e77d      	b.n	11462 <ll_ext_adv_data_set+0xd6>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
   11566:	f7ef f83b 	bl	5e0 <memcpy>
   1156a:	e7ee      	b.n	1154a <ll_ext_adv_data_set+0x1be>
		}

	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
   1156c:	2b01      	cmp	r3, #1
   1156e:	d036      	beq.n	115de <ll_ext_adv_data_set+0x252>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
   11570:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
   11574:	42a3      	cmp	r3, r4
   11576:	d104      	bne.n	11582 <ll_ext_adv_data_set+0x1f6>
			last = radio_adv_data->last + 1;
   11578:	3401      	adds	r4, #1
   1157a:	b2e4      	uxtb	r4, r4
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
   1157c:	2c02      	cmp	r4, #2
   1157e:	bf08      	it	eq
   11580:	2400      	moveq	r4, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   11582:	eb04 2304 	add.w	r3, r4, r4, lsl #8
   11586:	18ee      	adds	r6, r5, r3
		pdu->type = prev->type;
   11588:	5ce8      	ldrb	r0, [r5, r3]
   1158a:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
   1158e:	f36f 1004 	bfc	r0, #4, #1
   11592:	54e8      	strb	r0, [r5, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
   11594:	5ca8      	ldrb	r0, [r5, r2]
   11596:	5cef      	ldrb	r7, [r5, r3]
   11598:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1159c:	f360 1745 	bfi	r7, r0, #5, #1
   115a0:	54ef      	strb	r7, [r5, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
   115a2:	5ca8      	ldrb	r0, [r5, r2]
   115a4:	b2ff      	uxtb	r7, r7
   115a6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   115aa:	f360 1786 	bfi	r7, r0, #6, #1
   115ae:	54ef      	strb	r7, [r5, r3]
		pdu->rx_addr = prev->rx_addr;
   115b0:	5caa      	ldrb	r2, [r5, r2]
   115b2:	b2f8      	uxtb	r0, r7
   115b4:	09d2      	lsrs	r2, r2, #7
   115b6:	f362 10c7 	bfi	r0, r2, #7, #1
   115ba:	54e8      	strb	r0, [r5, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   115bc:	2206      	movs	r2, #6
   115be:	3102      	adds	r1, #2
   115c0:	1cb0      	adds	r0, r6, #2
   115c2:	f7ef f80d 	bl	5e0 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
   115c6:	4642      	mov	r2, r8
   115c8:	4649      	mov	r1, r9
   115ca:	f106 0008 	add.w	r0, r6, #8
		pdu->len = BDADDR_SIZE + len;
   115ce:	f108 0806 	add.w	r8, r8, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
   115d2:	f7ef f805 	bl	5e0 <memcpy>
		pdu->len = BDADDR_SIZE + len;
   115d6:	f886 8001 	strb.w	r8, [r6, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
   115da:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
   115de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   115e2:	bf00      	nop
   115e4:	2000243c 	.word	0x2000243c
   115e8:	2000242c 	.word	0x2000242c
   115ec:	2000cf80 	.word	0x2000cf80
   115f0:	2000242e 	.word	0x2000242e
   115f4:	20004005 	.word	0x20004005

000115f8 <ll_scan_data_set>:
}



void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   115f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115fc:	4606      	mov	r6, r0
   115fe:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   11600:	f7fe fac0 	bl	fb84 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
   11604:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   11608:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
   1160c:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
   1160e:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   11610:	d131      	bne.n	11676 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
   11612:	1c5d      	adds	r5, r3, #1
   11614:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   11616:	2d02      	cmp	r5, #2
			last = 0;
   11618:	bf08      	it	eq
   1161a:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1161c:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   11620:	f04f 0e04 	mov.w	lr, #4
   11624:	5ca0      	ldrb	r0, [r4, r2]
   11626:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1162a:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1162e:	f36f 1045 	bfc	r0, #5, #1
   11632:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
   11634:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   11638:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
   1163a:	5ce0      	ldrb	r0, [r4, r3]
   1163c:	5ca3      	ldrb	r3, [r4, r2]
   1163e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11642:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   11646:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
   1164a:	f36f 13c7 	bfc	r3, #7, #1
   1164e:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   11650:	1db3      	adds	r3, r6, #6
   11652:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   11656:	2206      	movs	r2, #6
   11658:	3102      	adds	r1, #2
   1165a:	f108 0002 	add.w	r0, r8, #2
   1165e:	f7ee ffbf 	bl	5e0 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   11662:	4632      	mov	r2, r6
   11664:	4639      	mov	r1, r7
   11666:	f108 0008 	add.w	r0, r8, #8
   1166a:	f7ee ffb9 	bl	5e0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1166e:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
   11672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11676:	461d      	mov	r5, r3
   11678:	e7d0      	b.n	1161c <ll_scan_data_set+0x24>
	...

0001167c <ll_adv_enable>:
}


u32_t ll_adv_enable(u8_t enable)
{
   1167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   11680:	b918      	cbnz	r0, 1168a <ll_adv_enable+0xe>
	}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);

	return status;
}
   11682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   11686:	f7ff ba27 	b.w	10ad8 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   1168a:	f7fe fa7f 	bl	fb8c <ll_adv_is_enabled>
   1168e:	4681      	mov	r9, r0
   11690:	2800      	cmp	r0, #0
   11692:	d150      	bne.n	11736 <ll_adv_enable+0xba>
	radio_adv_data = radio_adv_data_get();
   11694:	f7fe fa6a 	bl	fb6c <radio_adv_data_get>
   11698:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   1169a:	f7fe fa73 	bl	fb84 <radio_scan_data_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1169e:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
		ll_filters_adv_update(ll_adv.filter_policy);
   116a2:	4c26      	ldr	r4, [pc, #152]	; (1173c <ll_adv_enable+0xc0>)
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   116a4:	f897 5203 	ldrb.w	r5, [r7, #515]	; 0x203
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   116a8:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   116ac:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   116ae:	7820      	ldrb	r0, [r4, #0]
   116b0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   116b4:	f000 fa42 	bl	11b3c <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   116b8:	7820      	ldrb	r0, [r4, #0]
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   116ba:	eb05 2505 	add.w	r5, r5, r5, lsl #8
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   116be:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   116c2:	eb07 0805 	add.w	r8, r7, r5
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   116c6:	d01d      	beq.n	11704 <ll_adv_enable+0x88>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   116c8:	464a      	mov	r2, r9
   116ca:	1ca1      	adds	r1, r4, #2
   116cc:	09c0      	lsrs	r0, r0, #7
   116ce:	f000 fa4b 	bl	11b68 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   116d2:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   116d4:	4605      	mov	r5, r0
			if (rl_idx != FILTER_IDX_NONE) {
   116d6:	d002      	beq.n	116de <ll_adv_enable+0x62>
				ll_rl_rpa_update(false);
   116d8:	4648      	mov	r0, r9
   116da:	f000 fbc9 	bl	11e70 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   116de:	4641      	mov	r1, r8
   116e0:	4628      	mov	r0, r5
   116e2:	f000 fb6f 	bl	11dc4 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   116e6:	4631      	mov	r1, r6
   116e8:	4628      	mov	r0, r5
   116ea:	f000 fb6b 	bl	11dc4 <ll_rl_pdu_adv_update>
				  ll_adv.filter_policy, rl_idx);
   116ee:	7821      	ldrb	r1, [r4, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   116f0:	8960      	ldrh	r0, [r4, #10]
   116f2:	462b      	mov	r3, r5
   116f4:	f3c1 02c1 	ubfx	r2, r1, #3, #2
}
   116f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
   116fc:	f001 0107 	and.w	r1, r1, #7
   11700:	f7fe bd7e 	b.w	10200 <radio_adv_enable>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   11704:	5d78      	ldrb	r0, [r7, r5]
   11706:	4651      	mov	r1, sl
   11708:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1170c:	f7f7 f824 	bl	8758 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   11710:	2206      	movs	r2, #6
   11712:	4601      	mov	r1, r0
   11714:	f108 0002 	add.w	r0, r8, #2
   11718:	f7ee ff62 	bl	5e0 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1171c:	5d78      	ldrb	r0, [r7, r5]
   1171e:	4651      	mov	r1, sl
   11720:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11724:	f7f7 f818 	bl	8758 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   11728:	2206      	movs	r2, #6
   1172a:	4601      	mov	r1, r0
   1172c:	1cb0      	adds	r0, r6, #2
   1172e:	f7ee ff57 	bl	5e0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   11732:	25ff      	movs	r5, #255	; 0xff
   11734:	e7db      	b.n	116ee <ll_adv_enable+0x72>
}
   11736:	2000      	movs	r0, #0
   11738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1173c:	2000242e 	.word	0x2000242e

00011740 <ll_ext_adv_enable>:



u32_t ll_ext_adv_enable(u8_t enable)
{
   11740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
//	struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
   11744:	b920      	cbnz	r0, 11750 <ll_ext_adv_enable+0x10>
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
				  ll_adv.chan_map, ll_adv.filter_policy,
				  rl_idx, ll_adv.max_skip, ll_adv.aux_chain_count);

	return status;
}
   11746:	b004      	add	sp, #16
   11748:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
   1174c:	f7ff b9c4 	b.w	10ad8 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
   11750:	f7fe fa1c 	bl	fb8c <ll_adv_is_enabled>
   11754:	4681      	mov	r9, r0
   11756:	2800      	cmp	r0, #0
   11758:	d155      	bne.n	11806 <ll_ext_adv_enable+0xc6>
	radio_adv_data = radio_adv_data_get();
   1175a:	f7fe fa07 	bl	fb6c <radio_adv_data_get>
   1175e:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
   11760:	f7fe fa10 	bl	fb84 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   11764:	f897 5203 	ldrb.w	r5, [r7, #515]	; 0x203
   11768:	4c33      	ldr	r4, [pc, #204]	; (11838 <ll_ext_adv_enable+0xf8>)
   1176a:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   1176e:	eb07 0805 	add.w	r8, r7, r5
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   11772:	5d7b      	ldrb	r3, [r7, r5]
   11774:	f003 020f 	and.w	r2, r3, #15
   11778:	2a07      	cmp	r2, #7
   1177a:	d110      	bne.n	1179e <ll_ext_adv_enable+0x5e>
		if (h->adv_addr) {
   1177c:	f898 2003 	ldrb.w	r2, [r8, #3]
   11780:	07d2      	lsls	r2, r2, #31
   11782:	d50a      	bpl.n	1179a <ll_ext_adv_enable+0x5a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   11784:	4649      	mov	r1, r9
   11786:	f3c3 1080 	ubfx	r0, r3, #6, #1
   1178a:	f7f6 ffe5 	bl	8758 <ll_addr_get>
   1178e:	2206      	movs	r2, #6
   11790:	4601      	mov	r1, r0
   11792:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
   11796:	f7ee ff23 	bl	5e0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1179a:	25ff      	movs	r5, #255	; 0xff
   1179c:	e020      	b.n	117e0 <ll_ext_adv_enable+0xa0>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1179e:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
   117a2:	eb03 2303 	add.w	r3, r3, r3, lsl #8
   117a6:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
   117a8:	7820      	ldrb	r0, [r4, #0]
   117aa:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   117ae:	f000 f9c5 	bl	11b3c <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   117b2:	7820      	ldrb	r0, [r4, #0]
   117b4:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
   117b8:	d027      	beq.n	1180a <ll_ext_adv_enable+0xca>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   117ba:	464a      	mov	r2, r9
   117bc:	1ca1      	adds	r1, r4, #2
   117be:	09c0      	lsrs	r0, r0, #7
   117c0:	f000 f9d2 	bl	11b68 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
   117c4:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   117c6:	4605      	mov	r5, r0
			if (rl_idx != FILTER_IDX_NONE) {
   117c8:	d002      	beq.n	117d0 <ll_ext_adv_enable+0x90>
				ll_rl_rpa_update(false);
   117ca:	4648      	mov	r0, r9
   117cc:	f000 fb50 	bl	11e70 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   117d0:	4641      	mov	r1, r8
   117d2:	4628      	mov	r0, r5
   117d4:	f000 faf6 	bl	11dc4 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   117d8:	4631      	mov	r1, r6
   117da:	4628      	mov	r0, r5
   117dc:	f000 faf2 	bl	11dc4 <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
   117e0:	7822      	ldrb	r2, [r4, #0]
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
   117e2:	7b63      	ldrb	r3, [r4, #13]
   117e4:	7a20      	ldrb	r0, [r4, #8]
   117e6:	9302      	str	r3, [sp, #8]
   117e8:	7b23      	ldrb	r3, [r4, #12]
   117ea:	9301      	str	r3, [sp, #4]
   117ec:	8961      	ldrh	r1, [r4, #10]
   117ee:	9500      	str	r5, [sp, #0]
   117f0:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   117f4:	f000 0007 	and.w	r0, r0, #7
   117f8:	f002 0207 	and.w	r2, r2, #7
   117fc:	f7fe fecc 	bl	10598 <radio_ext_adv_enable>
}
   11800:	b004      	add	sp, #16
   11802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   11806:	2000      	movs	r0, #0
   11808:	e7fa      	b.n	11800 <ll_ext_adv_enable+0xc0>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   1180a:	5d78      	ldrb	r0, [r7, r5]
   1180c:	4651      	mov	r1, sl
   1180e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   11812:	f7f6 ffa1 	bl	8758 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
   11816:	2206      	movs	r2, #6
   11818:	4601      	mov	r1, r0
   1181a:	f108 0002 	add.w	r0, r8, #2
   1181e:	f7ee fedf 	bl	5e0 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
   11822:	5d78      	ldrb	r0, [r7, r5]
   11824:	4651      	mov	r1, sl
   11826:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1182a:	f7f6 ff95 	bl	8758 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
   1182e:	2206      	movs	r2, #6
   11830:	4601      	mov	r1, r0
   11832:	1cb0      	adds	r0, r6, #2
   11834:	e7af      	b.n	11796 <ll_ext_adv_enable+0x56>
   11836:	bf00      	nop
   11838:	2000242e 	.word	0x2000242e

0001183c <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   1183c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11840:	4688      	mov	r8, r1
	int i;

	if (free) {
   11842:	4615      	mov	r5, r2
   11844:	b10a      	cbz	r2, 1184a <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   11846:	23ff      	movs	r3, #255	; 0xff
   11848:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1184a:	4e14      	ldr	r6, [pc, #80]	; (1189c <wl_find+0x60>)
{
   1184c:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1184e:	f000 0701 	and.w	r7, r0, #1
   11852:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   11856:	07da      	lsls	r2, r3, #31
   11858:	d51d      	bpl.n	11896 <wl_find+0x5a>
   1185a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1185e:	42bb      	cmp	r3, r7
   11860:	d113      	bne.n	1188a <wl_find+0x4e>
   11862:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   11866:	2206      	movs	r2, #6
   11868:	4641      	mov	r1, r8
   1186a:	3002      	adds	r0, #2
   1186c:	f7ee fea3 	bl	5b6 <memcmp>
   11870:	b910      	cbnz	r0, 11878 <wl_find+0x3c>
			return i;
   11872:	b2e0      	uxtb	r0, r4
   11874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11878:	b13d      	cbz	r5, 1188a <wl_find+0x4e>
   1187a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1187e:	07db      	lsls	r3, r3, #31
   11880:	d403      	bmi.n	1188a <wl_find+0x4e>
   11882:	782b      	ldrb	r3, [r5, #0]
   11884:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11886:	bf08      	it	eq
   11888:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1188a:	3401      	adds	r4, #1
   1188c:	2c08      	cmp	r4, #8
   1188e:	d1e0      	bne.n	11852 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   11890:	20ff      	movs	r0, #255	; 0xff
   11892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   11896:	2d00      	cmp	r5, #0
   11898:	d1f3      	bne.n	11882 <wl_find+0x46>
   1189a:	e7f6      	b.n	1188a <wl_find+0x4e>
   1189c:	2000266f 	.word	0x2000266f

000118a0 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   118a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	filter->enable_bitmask = 0;
   118a4:	4d12      	ldr	r5, [pc, #72]	; (118f0 <filter_rl_update+0x50>)

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
   118a6:	4e13      	ldr	r6, [pc, #76]	; (118f4 <filter_rl_update+0x54>)
	filter->enable_bitmask = 0;
   118a8:	2400      	movs	r4, #0
   118aa:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   118ac:	706c      	strb	r4, [r5, #1]
		if (rl[i].taken) {
   118ae:	2728      	movs	r7, #40	; 0x28
	filter->enable_bitmask |= BIT(index);
   118b0:	f04f 0801 	mov.w	r8, #1
		if (rl[i].taken) {
   118b4:	fb07 f104 	mul.w	r1, r7, r4
   118b8:	5c73      	ldrb	r3, [r6, r1]
   118ba:	07da      	lsls	r2, r3, #31
   118bc:	d512      	bpl.n	118e4 <filter_rl_update+0x44>
	filter->enable_bitmask |= BIT(index);
   118be:	7828      	ldrb	r0, [r5, #0]
   118c0:	fa08 f204 	lsl.w	r2, r8, r4
   118c4:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   118c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   118ca:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   118cc:	786a      	ldrb	r2, [r5, #1]
   118ce:	40a3      	lsls	r3, r4
   118d0:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   118d2:	2206      	movs	r2, #6
   118d4:	3101      	adds	r1, #1
   118d6:	fb02 5004 	mla	r0, r2, r4, r5
   118da:	4431      	add	r1, r6
   118dc:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   118de:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   118e0:	f7ee fe7e 	bl	5e0 <memcpy>
   118e4:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   118e6:	2c08      	cmp	r4, #8
   118e8:	d1e4      	bne.n	118b4 <filter_rl_update+0x14>
				      rl[i].id_addr.val);
		}
	}
}
   118ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118ee:	bf00      	nop
   118f0:	2000263d 	.word	0x2000263d
   118f4:	200024fc 	.word	0x200024fc

000118f8 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   118f8:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   118fa:	f7fe f947 	bl	fb8c <ll_adv_is_enabled>
   118fe:	b928      	cbnz	r0, 1190c <rl_access_check.constprop.1+0x14>
   11900:	f7fe f95a 	bl	fbb8 <ll_scan_is_enabled>
   11904:	fab0 f080 	clz	r0, r0
   11908:	0940      	lsrs	r0, r0, #5
   1190a:	bd08      	pop	{r3, pc}
   1190c:	2000      	movs	r0, #0
}
   1190e:	bd08      	pop	{r3, pc}

00011910 <filter_wl_update>:
{
   11910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11914:	4e1b      	ldr	r6, [pc, #108]	; (11984 <filter_wl_update+0x74>)
	filter->enable_bitmask = 0;
   11916:	4d1c      	ldr	r5, [pc, #112]	; (11988 <filter_wl_update+0x78>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11918:	f8df 9074 	ldr.w	r9, [pc, #116]	; 11990 <filter_wl_update+0x80>
	filter->enable_bitmask = 0;
   1191c:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   1191e:	1eb7      	subs	r7, r6, #2
	filter->enable_bitmask = 0;
   11920:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   11922:	706c      	strb	r4, [r5, #1]
   11924:	46b8      	mov	r8, r7
		if (!wl[i].taken) {
   11926:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1192a:	07d9      	lsls	r1, r3, #31
   1192c:	d523      	bpl.n	11976 <filter_wl_update+0x66>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1192e:	f899 3000 	ldrb.w	r3, [r9]
   11932:	b15b      	cbz	r3, 1194c <filter_wl_update+0x3c>
		j = wl[i].rl_idx;
   11934:	f816 2c01 	ldrb.w	r2, [r6, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   11938:	2a07      	cmp	r2, #7
   1193a:	d807      	bhi.n	1194c <filter_wl_update+0x3c>
   1193c:	2328      	movs	r3, #40	; 0x28
   1193e:	4353      	muls	r3, r2
   11940:	4a12      	ldr	r2, [pc, #72]	; (1198c <filter_wl_update+0x7c>)
   11942:	5cd3      	ldrb	r3, [r2, r3]
   11944:	075a      	lsls	r2, r3, #29
   11946:	d501      	bpl.n	1194c <filter_wl_update+0x3c>
   11948:	06db      	lsls	r3, r3, #27
   1194a:	d514      	bpl.n	11976 <filter_wl_update+0x66>
	filter->enable_bitmask |= BIT(index);
   1194c:	2201      	movs	r2, #1
   1194e:	fa02 f104 	lsl.w	r1, r2, r4
   11952:	782a      	ldrb	r2, [r5, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   11954:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   11958:	430a      	orrs	r2, r1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1195a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   1195e:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11960:	786a      	ldrb	r2, [r5, #1]
   11962:	40a3      	lsls	r3, r4
   11964:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11966:	2206      	movs	r2, #6
   11968:	fb02 5004 	mla	r0, r2, r4, r5
   1196c:	4631      	mov	r1, r6
   1196e:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   11970:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   11972:	f7ee fe35 	bl	5e0 <memcpy>
   11976:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   11978:	2c08      	cmp	r4, #8
   1197a:	f106 0608 	add.w	r6, r6, #8
   1197e:	d1d2      	bne.n	11926 <filter_wl_update+0x16>
}
   11980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11984:	20002671 	.word	0x20002671
   11988:	200026af 	.word	0x200026af
   1198c:	200024fc 	.word	0x200024fc
   11990:	2000263c 	.word	0x2000263c

00011994 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   11994:	2807      	cmp	r0, #7
   11996:	d80c      	bhi.n	119b2 <ctrl_lrpa_get+0x1e>
   11998:	2328      	movs	r3, #40	; 0x28
   1199a:	4358      	muls	r0, r3
   1199c:	4a06      	ldr	r2, [pc, #24]	; (119b8 <ctrl_lrpa_get+0x24>)
   1199e:	5c13      	ldrb	r3, [r2, r0]
   119a0:	1811      	adds	r1, r2, r0
   119a2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   119a6:	b128      	cbz	r0, 119b4 <ctrl_lrpa_get+0x20>
   119a8:	f3c3 0040 	ubfx	r0, r3, #1, #1
   119ac:	b110      	cbz	r0, 119b4 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   119ae:	6a48      	ldr	r0, [r1, #36]	; 0x24
   119b0:	4770      	bx	lr
		return NULL;
   119b2:	2000      	movs	r0, #0
}
   119b4:	4770      	bx	lr
   119b6:	bf00      	nop
   119b8:	200024fc 	.word	0x200024fc

000119bc <ctrl_irks_get>:
	*count = peer_irk_count;
   119bc:	4b02      	ldr	r3, [pc, #8]	; (119c8 <ctrl_irks_get+0xc>)
   119be:	781b      	ldrb	r3, [r3, #0]
   119c0:	7003      	strb	r3, [r0, #0]
}
   119c2:	4802      	ldr	r0, [pc, #8]	; (119cc <ctrl_irks_get+0x10>)
   119c4:	4770      	bx	lr
   119c6:	bf00      	nop
   119c8:	20002470 	.word	0x20002470
   119cc:	20002479 	.word	0x20002479

000119d0 <ctrl_rl_idx>:
	if (whitelist) {
   119d0:	b188      	cbz	r0, 119f6 <ctrl_rl_idx+0x26>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   119d2:	2907      	cmp	r1, #7
   119d4:	d905      	bls.n	119e2 <ctrl_rl_idx+0x12>
		LL_ASSERT(rl[i].taken);
   119d6:	4040      	eors	r0, r0
   119d8:	f380 8811 	msr	BASEPRI, r0
   119dc:	f04f 0004 	mov.w	r0, #4
   119e0:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   119e2:	4b09      	ldr	r3, [pc, #36]	; (11a08 <ctrl_rl_idx+0x38>)
   119e4:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   119e8:	07d2      	lsls	r2, r2, #31
   119ea:	d5f4      	bpl.n	119d6 <ctrl_rl_idx+0x6>
		i = wl[devmatch_id].rl_idx;
   119ec:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   119f0:	7849      	ldrb	r1, [r1, #1]
}
   119f2:	4608      	mov	r0, r1
   119f4:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   119f6:	2907      	cmp	r1, #7
   119f8:	d8ed      	bhi.n	119d6 <ctrl_rl_idx+0x6>
		LL_ASSERT(rl[i].taken);
   119fa:	2328      	movs	r3, #40	; 0x28
   119fc:	434b      	muls	r3, r1
   119fe:	4a03      	ldr	r2, [pc, #12]	; (11a0c <ctrl_rl_idx+0x3c>)
   11a00:	5cd3      	ldrb	r3, [r2, r3]
   11a02:	07db      	lsls	r3, r3, #31
   11a04:	d4f5      	bmi.n	119f2 <ctrl_rl_idx+0x22>
   11a06:	e7e6      	b.n	119d6 <ctrl_rl_idx+0x6>
   11a08:	2000266f 	.word	0x2000266f
   11a0c:	200024fc 	.word	0x200024fc

00011a10 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   11a10:	4b0a      	ldr	r3, [pc, #40]	; (11a3c <ctrl_rl_irk_idx+0x2c>)
   11a12:	781b      	ldrb	r3, [r3, #0]
   11a14:	4283      	cmp	r3, r0
   11a16:	d805      	bhi.n	11a24 <ctrl_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   11a18:	4040      	eors	r0, r0
   11a1a:	f380 8811 	msr	BASEPRI, r0
   11a1e:	f04f 0004 	mov.w	r0, #4
   11a22:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   11a24:	4b06      	ldr	r3, [pc, #24]	; (11a40 <ctrl_rl_irk_idx+0x30>)
   11a26:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   11a28:	2807      	cmp	r0, #7
   11a2a:	d8f5      	bhi.n	11a18 <ctrl_rl_irk_idx+0x8>
	LL_ASSERT(rl[i].taken);
   11a2c:	2328      	movs	r3, #40	; 0x28
   11a2e:	4343      	muls	r3, r0
   11a30:	4a04      	ldr	r2, [pc, #16]	; (11a44 <ctrl_rl_irk_idx+0x34>)
   11a32:	5cd3      	ldrb	r3, [r2, r3]
   11a34:	07db      	lsls	r3, r3, #31
   11a36:	d5ef      	bpl.n	11a18 <ctrl_rl_irk_idx+0x8>
}
   11a38:	4770      	bx	lr
   11a3a:	bf00      	nop
   11a3c:	20002470 	.word	0x20002470
   11a40:	20002471 	.word	0x20002471
   11a44:	200024fc 	.word	0x200024fc

00011a48 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   11a48:	2807      	cmp	r0, #7
   11a4a:	d80e      	bhi.n	11a6a <ctrl_irk_whitelisted+0x22>
	LL_ASSERT(rl[rl_idx].taken);
   11a4c:	2328      	movs	r3, #40	; 0x28
   11a4e:	4358      	muls	r0, r3
   11a50:	4b07      	ldr	r3, [pc, #28]	; (11a70 <ctrl_irk_whitelisted+0x28>)
   11a52:	5c18      	ldrb	r0, [r3, r0]
   11a54:	07c3      	lsls	r3, r0, #31
   11a56:	d405      	bmi.n	11a64 <ctrl_irk_whitelisted+0x1c>
   11a58:	4040      	eors	r0, r0
   11a5a:	f380 8811 	msr	BASEPRI, r0
   11a5e:	f04f 0004 	mov.w	r0, #4
   11a62:	df02      	svc	2
	return rl[rl_idx].wl;
   11a64:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11a68:	4770      	bx	lr
		return false;
   11a6a:	2000      	movs	r0, #0
}
   11a6c:	4770      	bx	lr
   11a6e:	bf00      	nop
   11a70:	200024fc 	.word	0x200024fc

00011a74 <ctrl_filter_get>:
}
   11a74:	4b03      	ldr	r3, [pc, #12]	; (11a84 <ctrl_filter_get+0x10>)
   11a76:	4a04      	ldr	r2, [pc, #16]	; (11a88 <ctrl_filter_get+0x14>)
   11a78:	2800      	cmp	r0, #0
   11a7a:	bf14      	ite	ne
   11a7c:	4610      	movne	r0, r2
   11a7e:	4618      	moveq	r0, r3
   11a80:	4770      	bx	lr
   11a82:	bf00      	nop
   11a84:	2000263d 	.word	0x2000263d
   11a88:	200026af 	.word	0x200026af

00011a8c <ll_wl_size_get>:
   11a8c:	2008      	movs	r0, #8
   11a8e:	4770      	bx	lr

00011a90 <ll_wl_clear>:
{
   11a90:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11a92:	f7fe f883 	bl	fb9c <radio_adv_filter_pol_get>
   11a96:	4604      	mov	r4, r0
   11a98:	b110      	cbz	r0, 11aa0 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11a9a:	240c      	movs	r4, #12
}
   11a9c:	4620      	mov	r0, r4
   11a9e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11aa0:	f7fe f8a0 	bl	fbe4 <radio_scan_filter_pol_get>
   11aa4:	07c3      	lsls	r3, r0, #31
   11aa6:	d4f8      	bmi.n	11a9a <ll_wl_clear+0xa>
		wl[i].taken = 0;
   11aa8:	4a07      	ldr	r2, [pc, #28]	; (11ac8 <ll_wl_clear+0x38>)
   11aaa:	4623      	mov	r3, r4
   11aac:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   11ab0:	f36f 0100 	bfc	r1, #0, #1
   11ab4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   11ab8:	3301      	adds	r3, #1
   11aba:	2b08      	cmp	r3, #8
   11abc:	d1f6      	bne.n	11aac <ll_wl_clear+0x1c>
	wl_anon = 0;
   11abe:	4b03      	ldr	r3, [pc, #12]	; (11acc <ll_wl_clear+0x3c>)
   11ac0:	2200      	movs	r2, #0
   11ac2:	701a      	strb	r2, [r3, #0]
	return 0;
   11ac4:	e7ea      	b.n	11a9c <ll_wl_clear+0xc>
   11ac6:	bf00      	nop
   11ac8:	2000266f 	.word	0x2000266f
   11acc:	20004120 	.word	0x20004120

00011ad0 <ll_wl_remove>:
{
   11ad0:	b538      	push	{r3, r4, r5, lr}
   11ad2:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11ad4:	f7fe f862 	bl	fb9c <radio_adv_filter_pol_get>
   11ad8:	4604      	mov	r4, r0
   11ada:	b110      	cbz	r0, 11ae2 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11adc:	240c      	movs	r4, #12
}
   11ade:	4620      	mov	r0, r4
   11ae0:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11ae2:	f7fe f87f 	bl	fbe4 <radio_scan_filter_pol_get>
   11ae6:	07c3      	lsls	r3, r0, #31
   11ae8:	d4f8      	bmi.n	11adc <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   11aea:	7828      	ldrb	r0, [r5, #0]
   11aec:	28ff      	cmp	r0, #255	; 0xff
   11aee:	d102      	bne.n	11af6 <ll_wl_remove+0x26>
		wl_anon = 0;
   11af0:	4b0f      	ldr	r3, [pc, #60]	; (11b30 <ll_wl_remove+0x60>)
   11af2:	701c      	strb	r4, [r3, #0]
		return 0;
   11af4:	e7f3      	b.n	11ade <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   11af6:	4622      	mov	r2, r4
   11af8:	1c69      	adds	r1, r5, #1
   11afa:	f7ff fe9f 	bl	1183c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11afe:	2807      	cmp	r0, #7
   11b00:	d813      	bhi.n	11b2a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   11b02:	4b0c      	ldr	r3, [pc, #48]	; (11b34 <ll_wl_remove+0x64>)
   11b04:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   11b08:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   11b0a:	2d07      	cmp	r5, #7
   11b0c:	d806      	bhi.n	11b1c <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   11b0e:	2228      	movs	r2, #40	; 0x28
   11b10:	4909      	ldr	r1, [pc, #36]	; (11b38 <ll_wl_remove+0x68>)
   11b12:	436a      	muls	r2, r5
   11b14:	5c8d      	ldrb	r5, [r1, r2]
   11b16:	f364 1545 	bfi	r5, r4, #5, #1
   11b1a:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   11b1c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   11b20:	f36f 0200 	bfc	r2, #0, #1
   11b24:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   11b28:	e7d9      	b.n	11ade <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11b2a:	2402      	movs	r4, #2
   11b2c:	e7d7      	b.n	11ade <ll_wl_remove+0xe>
   11b2e:	bf00      	nop
   11b30:	20004120 	.word	0x20004120
   11b34:	2000266f 	.word	0x2000266f
   11b38:	200024fc 	.word	0x200024fc

00011b3c <ll_filters_adv_update>:
{
   11b3c:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   11b3e:	b128      	cbz	r0, 11b4c <ll_filters_adv_update+0x10>
   11b40:	f7fe f850 	bl	fbe4 <radio_scan_filter_pol_get>
   11b44:	07c3      	lsls	r3, r0, #31
   11b46:	d401      	bmi.n	11b4c <ll_filters_adv_update+0x10>
		filter_wl_update();
   11b48:	f7ff fee2 	bl	11910 <filter_wl_update>
	if (rl_enable && !ll_scan_is_enabled()) {
   11b4c:	4b05      	ldr	r3, [pc, #20]	; (11b64 <ll_filters_adv_update+0x28>)
   11b4e:	781b      	ldrb	r3, [r3, #0]
   11b50:	b133      	cbz	r3, 11b60 <ll_filters_adv_update+0x24>
   11b52:	f7fe f831 	bl	fbb8 <ll_scan_is_enabled>
   11b56:	b918      	cbnz	r0, 11b60 <ll_filters_adv_update+0x24>
}
   11b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   11b5c:	f7ff bea0 	b.w	118a0 <filter_rl_update>
   11b60:	bd08      	pop	{r3, pc}
   11b62:	bf00      	nop
   11b64:	2000263c 	.word	0x2000263c

00011b68 <ll_rl_find>:
{
   11b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b6c:	468a      	mov	sl, r1
	if (free) {
   11b6e:	4614      	mov	r4, r2
   11b70:	b10a      	cbz	r2, 11b76 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   11b72:	23ff      	movs	r3, #255	; 0xff
   11b74:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11b76:	f8df 8054 	ldr.w	r8, [pc, #84]	; 11bcc <ll_rl_find+0x64>
{
   11b7a:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   11b7c:	f000 0901 	and.w	r9, r0, #1
   11b80:	2628      	movs	r6, #40	; 0x28
   11b82:	436e      	muls	r6, r5
   11b84:	b2ef      	uxtb	r7, r5
   11b86:	f818 3006 	ldrb.w	r3, [r8, r6]
   11b8a:	07da      	lsls	r2, r3, #31
   11b8c:	d51a      	bpl.n	11bc4 <ll_rl_find+0x5c>
   11b8e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   11b92:	454b      	cmp	r3, r9
   11b94:	d10f      	bne.n	11bb6 <ll_rl_find+0x4e>
   11b96:	1c70      	adds	r0, r6, #1
   11b98:	2206      	movs	r2, #6
   11b9a:	4651      	mov	r1, sl
   11b9c:	4440      	add	r0, r8
   11b9e:	f7ee fd0a 	bl	5b6 <memcmp>
   11ba2:	b160      	cbz	r0, 11bbe <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11ba4:	b13c      	cbz	r4, 11bb6 <ll_rl_find+0x4e>
   11ba6:	f818 3006 	ldrb.w	r3, [r8, r6]
   11baa:	07db      	lsls	r3, r3, #31
   11bac:	d403      	bmi.n	11bb6 <ll_rl_find+0x4e>
   11bae:	7823      	ldrb	r3, [r4, #0]
   11bb0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   11bb2:	bf08      	it	eq
   11bb4:	7027      	strbeq	r7, [r4, #0]
   11bb6:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11bb8:	2d08      	cmp	r5, #8
   11bba:	d1e1      	bne.n	11b80 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   11bbc:	27ff      	movs	r7, #255	; 0xff
}
   11bbe:	4638      	mov	r0, r7
   11bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   11bc4:	2c00      	cmp	r4, #0
   11bc6:	d1f2      	bne.n	11bae <ll_rl_find+0x46>
   11bc8:	e7f5      	b.n	11bb6 <ll_rl_find+0x4e>
   11bca:	bf00      	nop
   11bcc:	200024fc 	.word	0x200024fc

00011bd0 <ll_wl_add>:
{
   11bd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11bd4:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11bd6:	f7fd ffe1 	bl	fb9c <radio_adv_filter_pol_get>
   11bda:	4605      	mov	r5, r0
   11bdc:	b120      	cbz	r0, 11be8 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   11bde:	250c      	movs	r5, #12
}
   11be0:	4628      	mov	r0, r5
   11be2:	b002      	add	sp, #8
   11be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   11be8:	f7fd fffc 	bl	fbe4 <radio_scan_filter_pol_get>
   11bec:	07c3      	lsls	r3, r0, #31
   11bee:	d4f6      	bmi.n	11bde <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   11bf0:	7838      	ldrb	r0, [r7, #0]
   11bf2:	28ff      	cmp	r0, #255	; 0xff
   11bf4:	d103      	bne.n	11bfe <ll_wl_add+0x2e>
		wl_anon = 1;
   11bf6:	4b1f      	ldr	r3, [pc, #124]	; (11c74 <ll_wl_add+0xa4>)
   11bf8:	2201      	movs	r2, #1
   11bfa:	701a      	strb	r2, [r3, #0]
		return 0;
   11bfc:	e7f0      	b.n	11be0 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   11bfe:	f107 0801 	add.w	r8, r7, #1
   11c02:	f10d 0207 	add.w	r2, sp, #7
   11c06:	4641      	mov	r1, r8
   11c08:	f7ff fe18 	bl	1183c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   11c0c:	2807      	cmp	r0, #7
   11c0e:	d92d      	bls.n	11c6c <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   11c10:	f89d 6007 	ldrb.w	r6, [sp, #7]
   11c14:	2e07      	cmp	r6, #7
   11c16:	d82b      	bhi.n	11c70 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   11c18:	4c17      	ldr	r4, [pc, #92]	; (11c78 <ll_wl_add+0xa8>)
   11c1a:	783a      	ldrb	r2, [r7, #0]
   11c1c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   11c20:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   11c24:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   11c28:	4641      	mov	r1, r8
   11c2a:	2206      	movs	r2, #6
   11c2c:	3002      	adds	r0, #2
   11c2e:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   11c32:	f7ee fcd5 	bl	5e0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   11c36:	462a      	mov	r2, r5
   11c38:	4641      	mov	r1, r8
   11c3a:	7838      	ldrb	r0, [r7, #0]
   11c3c:	f7ff ff94 	bl	11b68 <ll_rl_find>
   11c40:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   11c42:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   11c44:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   11c46:	d80e      	bhi.n	11c66 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   11c48:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   11c4a:	2328      	movs	r3, #40	; 0x28
   11c4c:	4a0b      	ldr	r2, [pc, #44]	; (11c7c <ll_wl_add+0xac>)
   11c4e:	4358      	muls	r0, r3
   11c50:	5c13      	ldrb	r3, [r2, r0]
   11c52:	f043 0320 	orr.w	r3, r3, #32
   11c56:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   11c58:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   11c5c:	f043 0301 	orr.w	r3, r3, #1
   11c60:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   11c64:	e7bc      	b.n	11be0 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   11c66:	22ff      	movs	r2, #255	; 0xff
   11c68:	705a      	strb	r2, [r3, #1]
   11c6a:	e7f5      	b.n	11c58 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   11c6c:	2512      	movs	r5, #18
   11c6e:	e7b7      	b.n	11be0 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   11c70:	2507      	movs	r5, #7
	return wl_add(addr);
   11c72:	e7b5      	b.n	11be0 <ll_wl_add+0x10>
   11c74:	20004120 	.word	0x20004120
   11c78:	2000266f 	.word	0x2000266f
   11c7c:	200024fc 	.word	0x200024fc

00011c80 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   11c80:	4b0c      	ldr	r3, [pc, #48]	; (11cb4 <ctrl_rl_idx_allowed+0x34>)
   11c82:	781b      	ldrb	r3, [r3, #0]
   11c84:	b19b      	cbz	r3, 11cae <ctrl_rl_idx_allowed+0x2e>
   11c86:	2907      	cmp	r1, #7
   11c88:	d811      	bhi.n	11cae <ctrl_rl_idx_allowed+0x2e>
   11c8a:	b980      	cbnz	r0, 11cae <ctrl_rl_idx_allowed+0x2e>
	LL_ASSERT(rl[rl_idx].taken);
   11c8c:	2328      	movs	r3, #40	; 0x28
   11c8e:	4359      	muls	r1, r3
   11c90:	4b09      	ldr	r3, [pc, #36]	; (11cb8 <ctrl_rl_idx_allowed+0x38>)
   11c92:	5c58      	ldrb	r0, [r3, r1]
   11c94:	07c2      	lsls	r2, r0, #31
   11c96:	d405      	bmi.n	11ca4 <ctrl_rl_idx_allowed+0x24>
   11c98:	4040      	eors	r0, r0
   11c9a:	f380 8811 	msr	BASEPRI, r0
   11c9e:	f04f 0004 	mov.w	r0, #4
   11ca2:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   11ca4:	0743      	lsls	r3, r0, #29
   11ca6:	d502      	bpl.n	11cae <ctrl_rl_idx_allowed+0x2e>
   11ca8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11cac:	4770      	bx	lr
		return true;
   11cae:	2001      	movs	r0, #1
}
   11cb0:	4770      	bx	lr
   11cb2:	bf00      	nop
   11cb4:	2000263c 	.word	0x2000263c
   11cb8:	200024fc 	.word	0x200024fc

00011cbc <ll_rl_id_addr_get>:
{
   11cbc:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11cbe:	2b07      	cmp	r3, #7
{
   11cc0:	b430      	push	{r4, r5}
   11cc2:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   11cc4:	d905      	bls.n	11cd2 <ll_rl_id_addr_get+0x16>
	LL_ASSERT(rl[rl_idx].taken);
   11cc6:	4040      	eors	r0, r0
   11cc8:	f380 8811 	msr	BASEPRI, r0
   11ccc:	f04f 0004 	mov.w	r0, #4
   11cd0:	df02      	svc	2
   11cd2:	2528      	movs	r5, #40	; 0x28
   11cd4:	4c08      	ldr	r4, [pc, #32]	; (11cf8 <ll_rl_id_addr_get+0x3c>)
   11cd6:	fb05 f203 	mul.w	r2, r5, r3
   11cda:	5ca2      	ldrb	r2, [r4, r2]
   11cdc:	f012 0f01 	tst.w	r2, #1
   11ce0:	d0f1      	beq.n	11cc6 <ll_rl_id_addr_get+0xa>
	*id_addr_type = rl[rl_idx].id_addr_type;
   11ce2:	f3c2 1280 	ubfx	r2, r2, #6, #1
   11ce6:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11ce8:	fb05 4103 	mla	r1, r5, r3, r4
   11cec:	2206      	movs	r2, #6
   11cee:	3101      	adds	r1, #1
}
   11cf0:	bc30      	pop	{r4, r5}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   11cf2:	f7ee bc75 	b.w	5e0 <memcpy>
   11cf6:	bf00      	nop
   11cf8:	200024fc 	.word	0x200024fc

00011cfc <ctrl_rl_addr_allowed>:
{
   11cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   11d00:	4b1a      	ldr	r3, [pc, #104]	; (11d6c <ctrl_rl_addr_allowed+0x70>)
   11d02:	781b      	ldrb	r3, [r3, #0]
   11d04:	b37b      	cbz	r3, 11d66 <ctrl_rl_addr_allowed+0x6a>
   11d06:	7813      	ldrb	r3, [r2, #0]
   11d08:	2bff      	cmp	r3, #255	; 0xff
   11d0a:	d12c      	bne.n	11d66 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   11d0c:	4e18      	ldr	r6, [pc, #96]	; (11d70 <ctrl_rl_addr_allowed+0x74>)
   11d0e:	2400      	movs	r4, #0
   11d10:	f04f 0828 	mov.w	r8, #40	; 0x28
   11d14:	46b6      	mov	lr, r6
   11d16:	fb08 f304 	mul.w	r3, r8, r4
   11d1a:	fa5f fc84 	uxtb.w	ip, r4
   11d1e:	5cf7      	ldrb	r7, [r6, r3]
   11d20:	f017 0f01 	tst.w	r7, #1
   11d24:	eb06 0503 	add.w	r5, r6, r3
   11d28:	d01a      	beq.n	11d60 <ctrl_rl_addr_allowed+0x64>
   11d2a:	f3c7 1780 	ubfx	r7, r7, #6, #1
   11d2e:	4287      	cmp	r7, r0
   11d30:	d116      	bne.n	11d60 <ctrl_rl_addr_allowed+0x64>
   11d32:	3306      	adds	r3, #6
   11d34:	1e4f      	subs	r7, r1, #1
   11d36:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   11d38:	f815 af01 	ldrb.w	sl, [r5, #1]!
   11d3c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   11d40:	45ca      	cmp	sl, r9
   11d42:	d10d      	bne.n	11d60 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   11d44:	429d      	cmp	r5, r3
   11d46:	d1f7      	bne.n	11d38 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   11d48:	2328      	movs	r3, #40	; 0x28
   11d4a:	435c      	muls	r4, r3
				*rl_idx = i;
   11d4c:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   11d50:	f81e 0004 	ldrb.w	r0, [lr, r4]
   11d54:	0743      	lsls	r3, r0, #29
   11d56:	d506      	bpl.n	11d66 <ctrl_rl_addr_allowed+0x6a>
   11d58:	f3c0 1000 	ubfx	r0, r0, #4, #1
   11d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11d60:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11d62:	2c08      	cmp	r4, #8
   11d64:	d1d7      	bne.n	11d16 <ctrl_rl_addr_allowed+0x1a>
   11d66:	2001      	movs	r0, #1
}
   11d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11d6c:	2000263c 	.word	0x2000263c
   11d70:	200024fc 	.word	0x200024fc

00011d74 <ctrl_rl_addr_resolve>:
{
   11d74:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   11d76:	4c0d      	ldr	r4, [pc, #52]	; (11dac <ctrl_rl_addr_resolve+0x38>)
   11d78:	7824      	ldrb	r4, [r4, #0]
   11d7a:	b1a4      	cbz	r4, 11da6 <ctrl_rl_addr_resolve+0x32>
   11d7c:	2a07      	cmp	r2, #7
   11d7e:	d812      	bhi.n	11da6 <ctrl_rl_addr_resolve+0x32>
   11d80:	2528      	movs	r5, #40	; 0x28
   11d82:	4c0b      	ldr	r4, [pc, #44]	; (11db0 <ctrl_rl_addr_resolve+0x3c>)
   11d84:	fb05 f602 	mul.w	r6, r5, r2
   11d88:	5da6      	ldrb	r6, [r4, r6]
   11d8a:	0736      	lsls	r6, r6, #28
   11d8c:	d50b      	bpl.n	11da6 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   11d8e:	b150      	cbz	r0, 11da6 <ctrl_rl_addr_resolve+0x32>
   11d90:	794b      	ldrb	r3, [r1, #5]
   11d92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11d96:	2b40      	cmp	r3, #64	; 0x40
   11d98:	d105      	bne.n	11da6 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11d9a:	fb05 4202 	mla	r2, r5, r2, r4
   11d9e:	1dd0      	adds	r0, r2, #7
}
   11da0:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   11da2:	f7ef beba 	b.w	1b1a <bt_rpa_irk_matches>
}
   11da6:	2000      	movs	r0, #0
   11da8:	bc70      	pop	{r4, r5, r6}
   11daa:	4770      	bx	lr
   11dac:	2000263c 	.word	0x2000263c
   11db0:	200024fc 	.word	0x200024fc

00011db4 <ctrl_rl_enabled>:
	return rl_enable;
   11db4:	4b02      	ldr	r3, [pc, #8]	; (11dc0 <ctrl_rl_enabled+0xc>)
   11db6:	7818      	ldrb	r0, [r3, #0]
}
   11db8:	3000      	adds	r0, #0
   11dba:	bf18      	it	ne
   11dbc:	2001      	movne	r0, #1
   11dbe:	4770      	bx	lr
   11dc0:	2000263c 	.word	0x2000263c

00011dc4 <ll_rl_pdu_adv_update>:
{
   11dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dc6:	4605      	mov	r5, r0
   11dc8:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   11dca:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   11dcc:	f7fe ffde 	bl	10d8c <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   11dd0:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   11dd2:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   11dd4:	d832      	bhi.n	11e3c <ll_rl_pdu_adv_update+0x78>
   11dd6:	2328      	movs	r3, #40	; 0x28
   11dd8:	4a24      	ldr	r2, [pc, #144]	; (11e6c <ll_rl_pdu_adv_update+0xa8>)
   11dda:	436b      	muls	r3, r5
   11ddc:	18d1      	adds	r1, r2, r3
   11dde:	5cd3      	ldrb	r3, [r2, r3]
   11de0:	071a      	lsls	r2, r3, #28
   11de2:	d52b      	bpl.n	11e3c <ll_rl_pdu_adv_update+0x78>
		LL_ASSERT(rl[idx].rpas_ready);
   11de4:	079b      	lsls	r3, r3, #30
   11de6:	d405      	bmi.n	11df4 <ll_rl_pdu_adv_update+0x30>
   11de8:	4040      	eors	r0, r0
   11dea:	f380 8811 	msr	BASEPRI, r0
   11dee:	f04f 0004 	mov.w	r0, #4
   11df2:	df02      	svc	2
		pdu->tx_addr = 1;
   11df4:	7823      	ldrb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   11df6:	6a49      	ldr	r1, [r1, #36]	; 0x24
		pdu->tx_addr = 1;
   11df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11dfc:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   11dfe:	2206      	movs	r2, #6
   11e00:	4638      	mov	r0, r7
   11e02:	f7ee fbed 	bl	5e0 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   11e06:	7823      	ldrb	r3, [r4, #0]
   11e08:	f003 020f 	and.w	r2, r3, #15
   11e0c:	2a01      	cmp	r2, #1
   11e0e:	d12c      	bne.n	11e6a <ll_rl_pdu_adv_update+0xa6>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   11e10:	2d07      	cmp	r5, #7
   11e12:	f104 0008 	add.w	r0, r4, #8
   11e16:	d81e      	bhi.n	11e56 <ll_rl_pdu_adv_update+0x92>
   11e18:	2228      	movs	r2, #40	; 0x28
   11e1a:	4914      	ldr	r1, [pc, #80]	; (11e6c <ll_rl_pdu_adv_update+0xa8>)
   11e1c:	fb02 f705 	mul.w	r7, r2, r5
   11e20:	5dcf      	ldrb	r7, [r1, r7]
   11e22:	077f      	lsls	r7, r7, #29
   11e24:	d517      	bpl.n	11e56 <ll_rl_pdu_adv_update+0x92>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   11e26:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
   11e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11e2e:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   11e30:	2206      	movs	r2, #6
   11e32:	311e      	adds	r1, #30
}
   11e34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   11e38:	f7ee bbd2 	b.w	5e0 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   11e3c:	7830      	ldrb	r0, [r6, #0]
   11e3e:	7823      	ldrb	r3, [r4, #0]
   11e40:	f3c0 1041 	ubfx	r0, r0, #5, #2
   11e44:	f360 1386 	bfi	r3, r0, #6, #1
   11e48:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   11e4a:	4639      	mov	r1, r7
   11e4c:	f000 0001 	and.w	r0, r0, #1
   11e50:	f7f6 fc82 	bl	8758 <ll_addr_get>
   11e54:	e7d7      	b.n	11e06 <ll_rl_pdu_adv_update+0x42>
			pdu->rx_addr = ll_adv->id_addr_type;
   11e56:	4631      	mov	r1, r6
   11e58:	7822      	ldrb	r2, [r4, #0]
   11e5a:	f811 3b02 	ldrb.w	r3, [r1], #2
   11e5e:	09db      	lsrs	r3, r3, #7
   11e60:	f363 12c7 	bfi	r2, r3, #7, #1
   11e64:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   11e66:	2206      	movs	r2, #6
   11e68:	e7e4      	b.n	11e34 <ll_rl_pdu_adv_update+0x70>
   11e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e6c:	200024fc 	.word	0x200024fc

00011e70 <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   11e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e74:	b087      	sub	sp, #28
   11e76:	4680      	mov	r8, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   11e78:	f001 ff4c 	bl	13d14 <_impl_k_uptime_get>
   11e7c:	e9cd 0100 	strd	r0, r1, [sp]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   11e80:	f1b8 0f00 	cmp.w	r8, #0
   11e84:	d145      	bne.n	11f12 <ll_rl_rpa_update+0xa2>
   11e86:	4b5e      	ldr	r3, [pc, #376]	; (12000 <ll_rl_rpa_update+0x190>)
   11e88:	e9d3 0100 	ldrd	r0, r1, [r3]
   11e8c:	1c4c      	adds	r4, r1, #1
   11e8e:	bf08      	it	eq
   11e90:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   11e94:	d03d      	beq.n	11f12 <ll_rl_rpa_update+0xa2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   11e96:	e9dd 3400 	ldrd	r3, r4, [sp]
   11e9a:	1a1b      	subs	r3, r3, r0
   11e9c:	4618      	mov	r0, r3
   11e9e:	4b59      	ldr	r3, [pc, #356]	; (12004 <ll_rl_rpa_update+0x194>)
   11ea0:	681a      	ldr	r2, [r3, #0]
   11ea2:	eb64 0401 	sbc.w	r4, r4, r1
   11ea6:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   11ea8:	4290      	cmp	r0, r2
   11eaa:	eb74 0303 	sbcs.w	r3, r4, r3
   11eae:	bfac      	ite	ge
   11eb0:	2601      	movge	r6, #1
   11eb2:	2600      	movlt	r6, #0
   11eb4:	4d54      	ldr	r5, [pc, #336]	; (12008 <ll_rl_rpa_update+0x198>)
   11eb6:	f8df b158 	ldr.w	fp, [pc, #344]	; 12010 <ll_rl_rpa_update+0x1a0>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11eba:	f1a5 0907 	sub.w	r9, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   11ebe:	2400      	movs	r4, #0
   11ec0:	464f      	mov	r7, r9
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   11ec2:	2328      	movs	r3, #40	; 0x28
   11ec4:	4363      	muls	r3, r4
   11ec6:	f819 3003 	ldrb.w	r3, [r9, r3]
   11eca:	07da      	lsls	r2, r3, #31
   11ecc:	d540      	bpl.n	11f50 <ll_rl_rpa_update+0xe0>
   11ece:	b90e      	cbnz	r6, 11ed4 <ll_rl_rpa_update+0x64>
   11ed0:	0798      	lsls	r0, r3, #30
   11ed2:	d43d      	bmi.n	11f50 <ll_rl_rpa_update+0xe0>

			if (rl[i].pirk) {
   11ed4:	2328      	movs	r3, #40	; 0x28
   11ed6:	4363      	muls	r3, r4
   11ed8:	5cfb      	ldrb	r3, [r7, r3]
   11eda:	0759      	lsls	r1, r3, #29
   11edc:	d51b      	bpl.n	11f16 <ll_rl_rpa_update+0xa6>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   11ede:	7c2a      	ldrb	r2, [r5, #16]
   11ee0:	4b4a      	ldr	r3, [pc, #296]	; (1200c <ll_rl_rpa_update+0x19c>)
   11ee2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   11ee6:	f103 0210 	add.w	r2, r3, #16
   11eea:	f10d 0107 	add.w	r1, sp, #7
		*((u8_t *)dst++) = *((u8_t *)src--);
   11eee:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   11ef2:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   11ef6:	429a      	cmp	r2, r3
   11ef8:	d1f9      	bne.n	11eee <ll_rl_rpa_update+0x7e>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   11efa:	f105 0117 	add.w	r1, r5, #23
   11efe:	a802      	add	r0, sp, #8
   11f00:	f7ef fe1e 	bl	1b40 <bt_rpa_create>
				LL_ASSERT(!err);
   11f04:	b138      	cbz	r0, 11f16 <ll_rl_rpa_update+0xa6>
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   11f06:	4040      	eors	r0, r0
   11f08:	f380 8811 	msr	BASEPRI, r0
   11f0c:	f04f 0004 	mov.w	r0, #4
   11f10:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   11f12:	2601      	movs	r6, #1
   11f14:	e7ce      	b.n	11eb4 <ll_rl_rpa_update+0x44>
			}

			if (rl[i].lirk) {
   11f16:	2328      	movs	r3, #40	; 0x28
   11f18:	4363      	muls	r3, r4
   11f1a:	5cfb      	ldrb	r3, [r7, r3]
   11f1c:	071a      	lsls	r2, r3, #28
   11f1e:	d511      	bpl.n	11f44 <ll_rl_rpa_update+0xd4>
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
   11f20:	a902      	add	r1, sp, #8
   11f22:	4628      	mov	r0, r5
   11f24:	f7ef fe0c 	bl	1b40 <bt_rpa_create>
				LL_ASSERT(!err);
   11f28:	2800      	cmp	r0, #0
   11f2a:	d1ec      	bne.n	11f06 <ll_rl_rpa_update+0x96>
   11f2c:	2206      	movs	r2, #6
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   11f2e:	ab02      	add	r3, sp, #8
   11f30:	fb02 ba04 	mla	sl, r2, r4, fp
   11f34:	f8c5 301d 	str.w	r3, [r5, #29]
   11f38:	4619      	mov	r1, r3
   11f3a:	4650      	mov	r0, sl
   11f3c:	f7ee fb50 	bl	5e0 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   11f40:	f8c5 a01d 	str.w	sl, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   11f44:	2328      	movs	r3, #40	; 0x28
   11f46:	4363      	muls	r3, r4
   11f48:	5cfa      	ldrb	r2, [r7, r3]
   11f4a:	f042 0202 	orr.w	r2, r2, #2
   11f4e:	54fa      	strb	r2, [r7, r3]
   11f50:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   11f52:	2c08      	cmp	r4, #8
   11f54:	f105 0528 	add.w	r5, r5, #40	; 0x28
   11f58:	d1b3      	bne.n	11ec2 <ll_rl_rpa_update+0x52>
		}
	}

	if (all) {
   11f5a:	b126      	cbz	r6, 11f66 <ll_rl_rpa_update+0xf6>
		rpa_last_ms = now;
   11f5c:	e9dd 1200 	ldrd	r1, r2, [sp]
   11f60:	4b27      	ldr	r3, [pc, #156]	; (12000 <ll_rl_rpa_update+0x190>)
   11f62:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
   11f66:	f1b8 0f00 	cmp.w	r8, #0
   11f6a:	d045      	beq.n	11ff8 <ll_rl_rpa_update+0x188>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
   11f6c:	f7fd fe0e 	bl	fb8c <ll_adv_is_enabled>
   11f70:	2800      	cmp	r0, #0
   11f72:	d041      	beq.n	11ff8 <ll_rl_rpa_update+0x188>
	ll_adv = ll_adv_set_get();
   11f74:	f7fe ff0a 	bl	10d8c <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   11f78:	7803      	ldrb	r3, [r0, #0]
   11f7a:	065b      	lsls	r3, r3, #25
	ll_adv = ll_adv_set_get();
   11f7c:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   11f7e:	d53b      	bpl.n	11ff8 <ll_rl_rpa_update+0x188>
	radio_adv_data = radio_adv_data_get();
   11f80:	f7fd fdf4 	bl	fb6c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11f84:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	if (radio_adv_data->first == radio_adv_data->last) {
   11f88:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11f8c:	eb04 2104 	add.w	r1, r4, r4, lsl #8
	if (radio_adv_data->first == radio_adv_data->last) {
   11f90:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
   11f92:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   11f94:	eb00 0701 	add.w	r7, r0, r1
	if (radio_adv_data->first == radio_adv_data->last) {
   11f98:	d104      	bne.n	11fa4 <ll_rl_rpa_update+0x134>
		last = radio_adv_data->last + 1;
   11f9a:	3401      	adds	r4, #1
   11f9c:	b2e4      	uxtb	r4, r4
			last = 0;
   11f9e:	2c02      	cmp	r4, #2
   11fa0:	bf08      	it	eq
   11fa2:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   11fa4:	eb04 2304 	add.w	r3, r4, r4, lsl #8
	pdu->type = prev->type;
   11fa8:	5c68      	ldrb	r0, [r5, r1]
   11faa:	5cea      	ldrb	r2, [r5, r3]
   11fac:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
   11fb0:	f36f 1204 	bfc	r2, #4, #1
   11fb4:	54ea      	strb	r2, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
   11fb6:	5c6a      	ldrb	r2, [r5, r1]
   11fb8:	5ce9      	ldrb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   11fba:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
   11fbe:	f3c2 1240 	ubfx	r2, r2, #5, #1
   11fc2:	f362 1145 	bfi	r1, r2, #5, #1
   11fc6:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   11fc8:	2200      	movs	r2, #0
   11fca:	f108 0102 	add.w	r1, r8, #2
   11fce:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   11fd0:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   11fd2:	f7ff fdc9 	bl	11b68 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   11fd6:	2807      	cmp	r0, #7
   11fd8:	d895      	bhi.n	11f06 <ll_rl_rpa_update+0x96>
	ll_rl_pdu_adv_update(idx, pdu);
   11fda:	4631      	mov	r1, r6
   11fdc:	f7ff fef2 	bl	11dc4 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   11fe0:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   11fe2:	f107 0108 	add.w	r1, r7, #8
   11fe6:	3a06      	subs	r2, #6
   11fe8:	f106 0008 	add.w	r0, r6, #8
   11fec:	f7ee faf8 	bl	5e0 <memcpy>
	pdu->len = prev->len;
   11ff0:	787b      	ldrb	r3, [r7, #1]
   11ff2:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
   11ff4:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
			rpa_adv_refresh();
		}
#endif
	}
}
   11ff8:	b007      	add	sp, #28
   11ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ffe:	bf00      	nop
   12000:	20004118 	.word	0x20004118
   12004:	2000414c 	.word	0x2000414c
   12008:	20002503 	.word	0x20002503
   1200c:	20002479 	.word	0x20002479
   12010:	20002440 	.word	0x20002440

00012014 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   12014:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   12016:	2001      	movs	r0, #1
   12018:	f7ff ff2a 	bl	11e70 <ll_rl_rpa_update>
   1201c:	4b03      	ldr	r3, [pc, #12]	; (1202c <rpa_timeout+0x18>)
   1201e:	4904      	ldr	r1, [pc, #16]	; (12030 <rpa_timeout+0x1c>)
   12020:	681a      	ldr	r2, [r3, #0]
   12022:	4804      	ldr	r0, [pc, #16]	; (12034 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   12024:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   12028:	f002 b982 	b.w	14330 <k_delayed_work_submit_to_queue>
   1202c:	2000414c 	.word	0x2000414c
   12030:	20004124 	.word	0x20004124
   12034:	20004160 	.word	0x20004160

00012038 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   12038:	4b07      	ldr	r3, [pc, #28]	; (12058 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   1203a:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   1203c:	b130      	cbz	r0, 1204c <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   1203e:	b14b      	cbz	r3, 12054 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   12040:	4b06      	ldr	r3, [pc, #24]	; (1205c <ll_adv_scan_state_cb+0x24>)
   12042:	4907      	ldr	r1, [pc, #28]	; (12060 <ll_adv_scan_state_cb+0x28>)
   12044:	681a      	ldr	r2, [r3, #0]
   12046:	4807      	ldr	r0, [pc, #28]	; (12064 <ll_adv_scan_state_cb+0x2c>)
   12048:	f002 b972 	b.w	14330 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   1204c:	b113      	cbz	r3, 12054 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   1204e:	4804      	ldr	r0, [pc, #16]	; (12060 <ll_adv_scan_state_cb+0x28>)
   12050:	f002 b914 	b.w	1427c <k_delayed_work_cancel>
   12054:	4770      	bx	lr
   12056:	bf00      	nop
   12058:	2000263c 	.word	0x2000263c
   1205c:	2000414c 	.word	0x2000414c
   12060:	20004124 	.word	0x20004124
   12064:	20004160 	.word	0x20004160

00012068 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   12068:	2008      	movs	r0, #8
   1206a:	4770      	bx	lr

0001206c <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   1206c:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   1206e:	f7ff fc43 	bl	118f8 <rl_access_check.constprop.1>
   12072:	b178      	cbz	r0, 12094 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   12074:	4908      	ldr	r1, [pc, #32]	; (12098 <ll_rl_clear+0x2c>)
   12076:	2300      	movs	r3, #0
   12078:	2428      	movs	r4, #40	; 0x28
   1207a:	fb04 f203 	mul.w	r2, r4, r3
   1207e:	3301      	adds	r3, #1
   12080:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12082:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12084:	f36f 0000 	bfc	r0, #0, #1
   12088:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1208a:	d1f6      	bne.n	1207a <ll_rl_clear+0xe>
	peer_irk_count = 0;
   1208c:	4b03      	ldr	r3, [pc, #12]	; (1209c <ll_rl_clear+0x30>)
   1208e:	2000      	movs	r0, #0
   12090:	7018      	strb	r0, [r3, #0]
   12092:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   12094:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   12096:	bd10      	pop	{r4, pc}
   12098:	200024fc 	.word	0x200024fc
   1209c:	20002470 	.word	0x20002470

000120a0 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   120a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120a4:	b085      	sub	sp, #20
   120a6:	4607      	mov	r7, r0
   120a8:	4689      	mov	r9, r1
   120aa:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   120ac:	f7ff fc24 	bl	118f8 <rl_access_check.constprop.1>
   120b0:	2800      	cmp	r0, #0
   120b2:	f000 8086 	beq.w	121c2 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   120b6:	f107 0801 	add.w	r8, r7, #1
   120ba:	f10d 020f 	add.w	r2, sp, #15
   120be:	4641      	mov	r1, r8
   120c0:	7838      	ldrb	r0, [r7, #0]
   120c2:	f7ff fd51 	bl	11b68 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   120c6:	2807      	cmp	r0, #7
   120c8:	d97d      	bls.n	121c6 <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   120ca:	f89d 500f 	ldrb.w	r5, [sp, #15]
   120ce:	2d07      	cmp	r5, #7
   120d0:	d87b      	bhi.n	121ca <ll_rl_add+0x12a>
   120d2:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   120d6:	4c3e      	ldr	r4, [pc, #248]	; (121d0 <ll_rl_add+0x130>)
   120d8:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   120dc:	2628      	movs	r6, #40	; 0x28
   120de:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   120e0:	f10b 0001 	add.w	r0, fp, #1
   120e4:	2206      	movs	r2, #6
   120e6:	4641      	mov	r1, r8
   120e8:	4420      	add	r0, r4
   120ea:	f7ee fa79 	bl	5e0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   120ee:	7839      	ldrb	r1, [r7, #0]
   120f0:	5da3      	ldrb	r3, [r4, r6]
   120f2:	19a2      	adds	r2, r4, r6
   120f4:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   120f8:	4648      	mov	r0, r9
   120fa:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   120fc:	9201      	str	r2, [sp, #4]
   120fe:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12100:	f7f5 fb8d 	bl	781e <mem_nz>
   12104:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12106:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   12108:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1210c:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1210e:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12110:	f7f5 fb85 	bl	781e <mem_nz>
   12114:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   12116:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12118:	f000 0001 	and.w	r0, r0, #1
   1211c:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   12120:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   12124:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   12126:	d138      	bne.n	1219a <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   12128:	b158      	cbz	r0, 12142 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   1212a:	f10b 0007 	add.w	r0, fp, #7
   1212e:	2210      	movs	r2, #16
   12130:	4651      	mov	r1, sl
   12132:	4420      	add	r0, r4
   12134:	f7ee fa54 	bl	5e0 <memcpy>
		rl[i].local_rpa = NULL;
   12138:	2328      	movs	r3, #40	; 0x28
   1213a:	fb03 4305 	mla	r3, r3, r5, r4
   1213e:	2200      	movs	r2, #0
   12140:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   12142:	2628      	movs	r6, #40	; 0x28
   12144:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   12146:	f10b 0018 	add.w	r0, fp, #24
   1214a:	2206      	movs	r2, #6
   1214c:	2100      	movs	r1, #0
   1214e:	4420      	add	r0, r4
   12150:	f7ee fa72 	bl	638 <memset>
	rl[i].rpas_ready = 0;
   12154:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   12156:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1215a:	f36f 1304 	bfc	r3, #4, #1
   1215e:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12160:	2200      	movs	r2, #0
   12162:	4641      	mov	r1, r8
   12164:	7838      	ldrb	r0, [r7, #0]
   12166:	f7ff fb69 	bl	1183c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1216a:	2807      	cmp	r0, #7
   1216c:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   1216e:	bf9d      	ittte	ls
   12170:	4a18      	ldrls	r2, [pc, #96]	; (121d4 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   12172:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   12176:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   1217a:	f36f 1345 	bfchi	r3, #5, #1
   1217e:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   12180:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   12184:	bf98      	it	ls
   12186:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   12188:	435d      	muls	r5, r3

	return 0;
   1218a:	2000      	movs	r0, #0
	rl[i].taken = 1;
   1218c:	5d63      	ldrb	r3, [r4, r5]
   1218e:	f043 0301 	orr.w	r3, r3, #1
   12192:	5563      	strb	r3, [r4, r5]
}
   12194:	b005      	add	sp, #20
   12196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1219a:	4b0f      	ldr	r3, [pc, #60]	; (121d8 <ll_rl_add+0x138>)
   1219c:	7819      	ldrb	r1, [r3, #0]
   1219e:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   121a0:	4a0e      	ldr	r2, [pc, #56]	; (121dc <ll_rl_add+0x13c>)
   121a2:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   121a4:	1c4a      	adds	r2, r1, #1
   121a6:	701a      	strb	r2, [r3, #0]
   121a8:	4b0d      	ldr	r3, [pc, #52]	; (121e0 <ll_rl_add+0x140>)
   121aa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   121ae:	f109 0210 	add.w	r2, r9, #16
   121b2:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   121b4:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   121b8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   121bc:	454a      	cmp	r2, r9
   121be:	d1f9      	bne.n	121b4 <ll_rl_add+0x114>
   121c0:	e7b2      	b.n	12128 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   121c2:	200c      	movs	r0, #12
   121c4:	e7e6      	b.n	12194 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   121c6:	2012      	movs	r0, #18
   121c8:	e7e4      	b.n	12194 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   121ca:	2007      	movs	r0, #7
   121cc:	e7e2      	b.n	12194 <ll_rl_add+0xf4>
   121ce:	bf00      	nop
   121d0:	200024fc 	.word	0x200024fc
   121d4:	2000266f 	.word	0x2000266f
   121d8:	20002470 	.word	0x20002470
   121dc:	20002471 	.word	0x20002471
   121e0:	20002479 	.word	0x20002479

000121e4 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   121e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121e8:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   121ea:	f7ff fb85 	bl	118f8 <rl_access_check.constprop.1>
   121ee:	2800      	cmp	r0, #0
   121f0:	d053      	beq.n	1229a <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   121f2:	f109 0a01 	add.w	sl, r9, #1
   121f6:	2200      	movs	r2, #0
   121f8:	4651      	mov	r1, sl
   121fa:	f899 0000 	ldrb.w	r0, [r9]
   121fe:	f7ff fcb3 	bl	11b68 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   12202:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12204:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   12206:	d84b      	bhi.n	122a0 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   12208:	f04f 0b28 	mov.w	fp, #40	; 0x28
   1220c:	4c26      	ldr	r4, [pc, #152]	; (122a8 <ll_rl_remove+0xc4>)
   1220e:	fb0b f300 	mul.w	r3, fp, r0
   12212:	18e2      	adds	r2, r4, r3
   12214:	5ce3      	ldrb	r3, [r4, r3]
   12216:	075b      	lsls	r3, r3, #29
   12218:	d524      	bpl.n	12264 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1221a:	4e24      	ldr	r6, [pc, #144]	; (122ac <ll_rl_remove+0xc8>)
   1221c:	7835      	ldrb	r5, [r6, #0]
   1221e:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   12220:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   12224:	d01b      	beq.n	1225e <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   12226:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   12228:	42af      	cmp	r7, r5
   1222a:	d018      	beq.n	1225e <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1222c:	4820      	ldr	r0, [pc, #128]	; (122b0 <ll_rl_remove+0xcc>)
   1222e:	2210      	movs	r2, #16
   12230:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   12234:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   12238:	f7ee f9d2 	bl	5e0 <memcpy>
   1223c:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   1223e:	fb0b f103 	mul.w	r1, fp, r3
   12242:	1862      	adds	r2, r4, r1
   12244:	5c61      	ldrb	r1, [r4, r1]
   12246:	f011 0f01 	tst.w	r1, #1
   1224a:	b2d8      	uxtb	r0, r3
   1224c:	d021      	beq.n	12292 <ll_rl_remove+0xae>
   1224e:	0749      	lsls	r1, r1, #29
   12250:	d51f      	bpl.n	12292 <ll_rl_remove+0xae>
   12252:	7dd1      	ldrb	r1, [r2, #23]
   12254:	42a9      	cmp	r1, r5
   12256:	d11c      	bne.n	12292 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   12258:	4b16      	ldr	r3, [pc, #88]	; (122b4 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   1225a:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   1225c:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   1225e:	7833      	ldrb	r3, [r6, #0]
   12260:	3b01      	subs	r3, #1
   12262:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   12264:	2200      	movs	r2, #0
   12266:	4651      	mov	r1, sl
   12268:	f899 0000 	ldrb.w	r0, [r9]
   1226c:	f7ff fae6 	bl	1183c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   12270:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   12272:	bf9f      	itttt	ls
   12274:	4b10      	ldrls	r3, [pc, #64]	; (122b8 <ll_rl_remove+0xd4>)
   12276:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   1227a:	23ff      	movls	r3, #255	; 0xff
   1227c:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   1227e:	2028      	movs	r0, #40	; 0x28
   12280:	fb00 f008 	mul.w	r0, r0, r8
   12284:	5c23      	ldrb	r3, [r4, r0]
   12286:	f36f 0300 	bfc	r3, #0, #1
   1228a:	5423      	strb	r3, [r4, r0]
		return 0;
   1228c:	2000      	movs	r0, #0
   1228e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12292:	3301      	adds	r3, #1
				for (k = 0;
   12294:	2b08      	cmp	r3, #8
   12296:	d1d2      	bne.n	1223e <ll_rl_remove+0x5a>
   12298:	e7e1      	b.n	1225e <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1229a:	200c      	movs	r0, #12
   1229c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   122a0:	2002      	movs	r0, #2
}
   122a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a6:	bf00      	nop
   122a8:	200024fc 	.word	0x200024fc
   122ac:	20002470 	.word	0x20002470
   122b0:	20002479 	.word	0x20002479
   122b4:	20002471 	.word	0x20002471
   122b8:	2000266f 	.word	0x2000266f

000122bc <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   122bc:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   122be:	795c      	ldrb	r4, [r3, #5]
   122c0:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   122c4:	2c40      	cmp	r4, #64	; 0x40
{
   122c6:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   122c8:	d117      	bne.n	122fa <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   122ca:	b119      	cbz	r1, 122d4 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   122cc:	2200      	movs	r2, #0
   122ce:	f7ff fc4b 	bl	11b68 <ll_rl_find>
   122d2:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   122d4:	2a07      	cmp	r2, #7
   122d6:	d810      	bhi.n	122fa <ll_rl_crpa_set+0x3e>
   122d8:	2128      	movs	r1, #40	; 0x28
   122da:	4c08      	ldr	r4, [pc, #32]	; (122fc <ll_rl_crpa_set+0x40>)
   122dc:	fb01 f302 	mul.w	r3, r1, r2
   122e0:	5ce3      	ldrb	r3, [r4, r3]
   122e2:	07db      	lsls	r3, r3, #31
   122e4:	d509      	bpl.n	122fa <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   122e6:	2018      	movs	r0, #24
   122e8:	fb11 0002 	smlabb	r0, r1, r2, r0
   122ec:	4420      	add	r0, r4
   122ee:	4629      	mov	r1, r5
   122f0:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   122f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   122f6:	f7ee b973 	b.w	5e0 <memcpy>
   122fa:	bd70      	pop	{r4, r5, r6, pc}
   122fc:	200024fc 	.word	0x200024fc

00012300 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   12300:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12302:	2200      	movs	r2, #0
{
   12304:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12306:	1c41      	adds	r1, r0, #1
   12308:	7800      	ldrb	r0, [r0, #0]
   1230a:	f7ff fc2d 	bl	11b68 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1230e:	2807      	cmp	r0, #7
   12310:	d901      	bls.n	12316 <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12312:	2002      	movs	r0, #2
   12314:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   12316:	2428      	movs	r4, #40	; 0x28
   12318:	2318      	movs	r3, #24
   1231a:	fb14 3000 	smlabb	r0, r4, r0, r3
   1231e:	4c07      	ldr	r4, [pc, #28]	; (1233c <ll_rl_crpa_get+0x3c>)
   12320:	4404      	add	r4, r0
   12322:	2106      	movs	r1, #6
   12324:	4620      	mov	r0, r4
   12326:	f7f5 fa7a 	bl	781e <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1232a:	2800      	cmp	r0, #0
   1232c:	d0f1      	beq.n	12312 <ll_rl_crpa_get+0x12>
   1232e:	2206      	movs	r2, #6
   12330:	4621      	mov	r1, r4
   12332:	4628      	mov	r0, r5
   12334:	f7ee f954 	bl	5e0 <memcpy>
			return 0;
   12338:	2000      	movs	r0, #0
}
   1233a:	bd38      	pop	{r3, r4, r5, pc}
   1233c:	200024fc 	.word	0x200024fc

00012340 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   12340:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12342:	2200      	movs	r2, #0
{
   12344:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   12346:	1c41      	adds	r1, r0, #1
   12348:	7800      	ldrb	r0, [r0, #0]
   1234a:	f7ff fc0d 	bl	11b68 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1234e:	2807      	cmp	r0, #7
   12350:	d80a      	bhi.n	12368 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   12352:	4b06      	ldr	r3, [pc, #24]	; (1236c <ll_rl_lrpa_get+0x2c>)
   12354:	2228      	movs	r2, #40	; 0x28
   12356:	fb02 3000 	mla	r0, r2, r0, r3
   1235a:	2206      	movs	r2, #6
   1235c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1235e:	4620      	mov	r0, r4
   12360:	f7ee f93e 	bl	5e0 <memcpy>
		return 0;
   12364:	2000      	movs	r0, #0
   12366:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   12368:	2002      	movs	r0, #2
}
   1236a:	bd10      	pop	{r4, pc}
   1236c:	200024fc 	.word	0x200024fc

00012370 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   12370:	b510      	push	{r4, lr}
   12372:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   12374:	f7ff fac0 	bl	118f8 <rl_access_check.constprop.1>
   12378:	b140      	cbz	r0, 1238c <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   1237a:	b11c      	cbz	r4, 12384 <ll_rl_enable+0x14>
   1237c:	2c01      	cmp	r4, #1
   1237e:	d001      	beq.n	12384 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   12380:	2012      	movs	r0, #18
	}

	return 0;
}
   12382:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   12384:	4b02      	ldr	r3, [pc, #8]	; (12390 <ll_rl_enable+0x20>)
   12386:	701c      	strb	r4, [r3, #0]
	return 0;
   12388:	2000      	movs	r0, #0
		break;
   1238a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1238c:	200c      	movs	r0, #12
   1238e:	bd10      	pop	{r4, pc}
   12390:	2000263c 	.word	0x2000263c

00012394 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   12394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12398:	4358      	muls	r0, r3
   1239a:	4b01      	ldr	r3, [pc, #4]	; (123a0 <ll_rl_timeout_set+0xc>)
   1239c:	6018      	str	r0, [r3, #0]
   1239e:	4770      	bx	lr
   123a0:	2000414c 	.word	0x2000414c

000123a4 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   123a4:	b538      	push	{r3, r4, r5, lr}
   123a6:	4605      	mov	r5, r0
   123a8:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   123aa:	f7ff faa5 	bl	118f8 <rl_access_check.constprop.1>
   123ae:	b1d8      	cbz	r0, 123e8 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   123b0:	2200      	movs	r2, #0
   123b2:	1c69      	adds	r1, r5, #1
   123b4:	7828      	ldrb	r0, [r5, #0]
   123b6:	f7ff fbd7 	bl	11b68 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   123ba:	2807      	cmp	r0, #7
   123bc:	d816      	bhi.n	123ec <ll_priv_mode_set+0x48>
		switch (mode) {
   123be:	b11c      	cbz	r4, 123c8 <ll_priv_mode_set+0x24>
   123c0:	2c01      	cmp	r4, #1
   123c2:	d00a      	beq.n	123da <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   123c4:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   123c6:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   123c8:	2328      	movs	r3, #40	; 0x28
   123ca:	4a09      	ldr	r2, [pc, #36]	; (123f0 <ll_priv_mode_set+0x4c>)
   123cc:	4358      	muls	r0, r3
   123ce:	5c13      	ldrb	r3, [r2, r0]
   123d0:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   123d4:	5413      	strb	r3, [r2, r0]
	return 0;
   123d6:	2000      	movs	r0, #0
			break;
   123d8:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   123da:	2328      	movs	r3, #40	; 0x28
   123dc:	4a04      	ldr	r2, [pc, #16]	; (123f0 <ll_priv_mode_set+0x4c>)
   123de:	4358      	muls	r0, r3
   123e0:	5c13      	ldrb	r3, [r2, r0]
   123e2:	f043 0310 	orr.w	r3, r3, #16
   123e6:	e7f5      	b.n	123d4 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   123e8:	200c      	movs	r0, #12
   123ea:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   123ec:	2002      	movs	r0, #2
   123ee:	bd38      	pop	{r3, r4, r5, pc}
   123f0:	200024fc 	.word	0x200024fc

000123f4 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   123f4:	4a19      	ldr	r2, [pc, #100]	; (1245c <ll_filter_reset+0x68>)
   123f6:	2300      	movs	r3, #0
{
   123f8:	b430      	push	{r4, r5}
	wl_anon = 0;
   123fa:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   123fc:	4a18      	ldr	r2, [pc, #96]	; (12460 <ll_filter_reset+0x6c>)
   123fe:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   12402:	f36f 0100 	bfc	r1, #0, #1
   12406:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1240a:	3301      	adds	r3, #1
   1240c:	2b08      	cmp	r3, #8
   1240e:	d1f6      	bne.n	123fe <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   12410:	4a14      	ldr	r2, [pc, #80]	; (12464 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12412:	4915      	ldr	r1, [pc, #84]	; (12468 <ll_filter_reset+0x74>)
	rl_enable = 0;
   12414:	2300      	movs	r3, #0
   12416:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   12418:	4a14      	ldr	r2, [pc, #80]	; (1246c <ll_filter_reset+0x78>)
   1241a:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   1241c:	4a14      	ldr	r2, [pc, #80]	; (12470 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   1241e:	4915      	ldr	r1, [pc, #84]	; (12474 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   12420:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   12424:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   12428:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   1242c:	2528      	movs	r5, #40	; 0x28
   1242e:	fb05 f203 	mul.w	r2, r5, r3
   12432:	3301      	adds	r3, #1
   12434:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   12436:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   12438:	f36f 0400 	bfc	r4, #0, #1
   1243c:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1243e:	d1f6      	bne.n	1242e <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   12440:	4b0d      	ldr	r3, [pc, #52]	; (12478 <ll_filter_reset+0x84>)
   12442:	2200      	movs	r2, #0
   12444:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   12446:	b120      	cbz	r0, 12452 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   12448:	490c      	ldr	r1, [pc, #48]	; (1247c <ll_filter_reset+0x88>)
   1244a:	480d      	ldr	r0, [pc, #52]	; (12480 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   1244c:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1244e:	f001 bef7 	b.w	14240 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   12452:	480b      	ldr	r0, [pc, #44]	; (12480 <ll_filter_reset+0x8c>)
}
   12454:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   12456:	f001 bf11 	b.w	1427c <k_delayed_work_cancel>
   1245a:	bf00      	nop
   1245c:	20004120 	.word	0x20004120
   12460:	2000266f 	.word	0x2000266f
   12464:	2000263c 	.word	0x2000263c
   12468:	000dbba0 	.word	0x000dbba0
   1246c:	2000414c 	.word	0x2000414c
   12470:	20004118 	.word	0x20004118
   12474:	200024fc 	.word	0x200024fc
   12478:	20002470 	.word	0x20002470
   1247c:	00012015 	.word	0x00012015
   12480:	20004124 	.word	0x20004124

00012484 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   12484:	4b05      	ldr	r3, [pc, #20]	; (1249c <cntr_init+0x18>)
   12486:	2200      	movs	r2, #0
   12488:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   1248c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   12490:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   12494:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   12498:	4770      	bx	lr
   1249a:	bf00      	nop
   1249c:	4000b000 	.word	0x4000b000

000124a0 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   124a0:	4a04      	ldr	r2, [pc, #16]	; (124b4 <cntr_start+0x14>)
   124a2:	7813      	ldrb	r3, [r2, #0]
   124a4:	1c59      	adds	r1, r3, #1
   124a6:	7011      	strb	r1, [r2, #0]
   124a8:	2001      	movs	r0, #1
   124aa:	b913      	cbnz	r3, 124b2 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   124ac:	4a02      	ldr	r2, [pc, #8]	; (124b8 <cntr_start+0x18>)
   124ae:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   124b0:	4618      	mov	r0, r3
}
   124b2:	4770      	bx	lr
   124b4:	200026e1 	.word	0x200026e1
   124b8:	4000b000 	.word	0x4000b000

000124bc <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
   124bc:	4b09      	ldr	r3, [pc, #36]	; (124e4 <cntr_stop+0x28>)
   124be:	7818      	ldrb	r0, [r3, #0]
   124c0:	b928      	cbnz	r0, 124ce <cntr_stop+0x12>
   124c2:	4040      	eors	r0, r0
   124c4:	f380 8811 	msr	BASEPRI, r0
   124c8:	f04f 0004 	mov.w	r0, #4
   124cc:	df02      	svc	2

	if (--_refcount) {
   124ce:	3801      	subs	r0, #1
   124d0:	b2c0      	uxtb	r0, r0
   124d2:	7018      	strb	r0, [r3, #0]
   124d4:	2301      	movs	r3, #1
   124d6:	b910      	cbnz	r0, 124de <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   124d8:	4a03      	ldr	r2, [pc, #12]	; (124e8 <cntr_stop+0x2c>)
   124da:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   124dc:	4770      	bx	lr
		return 1;
   124de:	4618      	mov	r0, r3
}
   124e0:	4770      	bx	lr
   124e2:	bf00      	nop
   124e4:	200026e1 	.word	0x200026e1
   124e8:	4000b000 	.word	0x4000b000

000124ec <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   124ec:	4b01      	ldr	r3, [pc, #4]	; (124f4 <cntr_cnt_get+0x8>)
   124ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   124f2:	4770      	bx	lr
   124f4:	4000b000 	.word	0x4000b000

000124f8 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   124f8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   124fc:	4b01      	ldr	r3, [pc, #4]	; (12504 <cntr_cmp_set+0xc>)
   124fe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   12502:	4770      	bx	lr
   12504:	4000b000 	.word	0x4000b000

00012508 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   12508:	4b11      	ldr	r3, [pc, #68]	; (12550 <do_ecb+0x48>)
{
   1250a:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   1250c:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1250e:	2500      	movs	r5, #0
   12510:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   12512:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   12514:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   12518:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1251c:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   12520:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   12522:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   12526:	b934      	cbnz	r4, 12536 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12528:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1252c:	b91c      	cbnz	r4, 12536 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1252e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   12532:	2c00      	cmp	r4, #0
   12534:	d1f5      	bne.n	12522 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   12536:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   12538:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   1253c:	2c00      	cmp	r4, #0
   1253e:	d1e8      	bne.n	12512 <do_ecb+0xa>
   12540:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   12544:	2e00      	cmp	r6, #0
   12546:	d0e4      	beq.n	12512 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   12548:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1254c:	bd70      	pop	{r4, r5, r6, pc}
   1254e:	bf00      	nop
   12550:	4000e000 	.word	0x4000e000

00012554 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   12554:	b570      	push	{r4, r5, r6, lr}
   12556:	b08c      	sub	sp, #48	; 0x30
   12558:	460e      	mov	r6, r1
   1255a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1255c:	4601      	mov	r1, r0
   1255e:	2210      	movs	r2, #16
   12560:	4668      	mov	r0, sp
{
   12562:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   12564:	f7f5 f94c 	bl	7800 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   12568:	2210      	movs	r2, #16
   1256a:	eb0d 0002 	add.w	r0, sp, r2
   1256e:	4631      	mov	r1, r6
   12570:	f7f5 f946 	bl	7800 <mem_rcopy>

	do_ecb(&ecb);
   12574:	4668      	mov	r0, sp
   12576:	f7ff ffc7 	bl	12508 <do_ecb>

	if (cipher_text_le) {
   1257a:	b125      	cbz	r5, 12586 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1257c:	2210      	movs	r2, #16
   1257e:	a908      	add	r1, sp, #32
   12580:	4628      	mov	r0, r5
   12582:	f7f5 f93d 	bl	7800 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   12586:	b124      	cbz	r4, 12592 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   12588:	2210      	movs	r2, #16
   1258a:	a908      	add	r1, sp, #32
   1258c:	4620      	mov	r0, r4
   1258e:	f7ee f827 	bl	5e0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   12592:	b00c      	add	sp, #48	; 0x30
   12594:	bd70      	pop	{r4, r5, r6, pc}
	...

00012598 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   12598:	4b07      	ldr	r3, [pc, #28]	; (125b8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   1259a:	4a08      	ldr	r2, [pc, #32]	; (125bc <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   1259c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   125a0:	4907      	ldr	r1, [pc, #28]	; (125c0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   125a2:	4a08      	ldr	r2, [pc, #32]	; (125c4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   125a4:	2800      	cmp	r0, #0
   125a6:	bf14      	ite	ne
   125a8:	4610      	movne	r0, r2
   125aa:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   125ac:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   125ae:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   125b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   125b6:	4770      	bx	lr
   125b8:	4001f000 	.word	0x4001f000
   125bc:	40008140 	.word	0x40008140
   125c0:	40001004 	.word	0x40001004
   125c4:	40001000 	.word	0x40001000

000125c8 <sw_switch.isra.6>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   125c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   125cc:	4d75      	ldr	r5, [pc, #468]	; (127a4 <sw_switch.isra.6+0x1dc>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   125ce:	4c76      	ldr	r4, [pc, #472]	; (127a8 <sw_switch.isra.6+0x1e0>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   125d0:	782e      	ldrb	r6, [r5, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   125d2:	4b76      	ldr	r3, [pc, #472]	; (127ac <sw_switch.isra.6+0x1e4>)
   125d4:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   125d8:	b233      	sxth	r3, r6
   125da:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   125de:	4688      	mov	r8, r1
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   125e0:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   125e4:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   125e8:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   125ec:	f106 040b 	add.w	r4, r6, #11
   125f0:	b2e4      	uxtb	r4, r4
   125f2:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   125f4:	496e      	ldr	r1, [pc, #440]	; (127b0 <sw_switch.isra.6+0x1e8>)
   125f6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   125fa:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   125fe:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   12602:	4461      	add	r1, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   12604:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
   12608:	f106 0708 	add.w	r7, r6, #8
   1260c:	f10e 0e04 	add.w	lr, lr, #4

	if (dir) {
   12610:	2800      	cmp	r0, #0
   12612:	f000 80aa 	beq.w	1276a <sw_switch.isra.6+0x1a2>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   12616:	2a02      	cmp	r2, #2
   12618:	f000 8087 	beq.w	1272a <sw_switch.isra.6+0x162>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   1261c:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   12620:	f64a 095c 	movw	r9, #43100	; 0xa85c
   12624:	2a04      	cmp	r2, #4
   12626:	bf18      	it	ne
   12628:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   1262a:	f1b8 0f02 	cmp.w	r8, #2
   1262e:	d07f      	beq.n	12730 <sw_switch.isra.6+0x168>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   12630:	f242 42b8 	movw	r2, #9400	; 0x24b8
   12634:	f247 2074 	movw	r0, #29300	; 0x7274
   12638:	f1b8 0f04 	cmp.w	r8, #4
   1263c:	bf18      	it	ne
   1263e:	4610      	movne	r0, r2
   12640:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   12644:	4a5b      	ldr	r2, [pc, #364]	; (127b4 <sw_switch.isra.6+0x1ec>)
   12646:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_SOC_NRF52840)
		if (phy_curr & BIT(2)) {
   1264a:	f018 0f04 	tst.w	r8, #4
		delay = HAL_RADIO_NS2US_ROUND(
   1264e:	4448      	add	r0, r9
   12650:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   12654:	fbb0 f0fa 	udiv	r0, r0, sl
		if (phy_curr & BIT(2)) {
   12658:	d06d      	beq.n	12736 <sw_switch.isra.6+0x16e>
   1265a:	f242 44b8 	movw	r4, #9400	; 0x24b8
   1265e:	f644 4190 	movw	r1, #19600	; 0x4c90
   12662:	f1b8 0f04 	cmp.w	r8, #4
   12666:	bf18      	it	ne
   12668:	4621      	movne	r1, r4
   1266a:	009c      	lsls	r4, r3, #2
   1266c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000

			u8_t ppi_en =
			    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI;
			u8_t cc_s2 =
			    SW_SWITCH_TIMER_EVTS_COMP_S2_BASE;
			u8_t ppi_dis =
   12670:	b2fa      	uxtb	r2, r7
   12672:	f504 4710 	add.w	r7, r4, #36864	; 0x9000
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
				    sw_tifs_toggle);
			u32_t delay_s2;

			/* Calculate assuming reception on S2 coding scheme. */
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   12676:	4449      	add	r1, r9
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
   12678:	f8d7 8540 	ldr.w	r8, [r7, #1344]	; 0x540
			SW_SWITCH_TIMER->CC[cc_s2] =
   1267c:	4f4e      	ldr	r7, [pc, #312]	; (127b8 <sw_switch.isra.6+0x1f0>)
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1267e:	fbb1 f1fa 	udiv	r1, r1, sl
			SW_SWITCH_TIMER->CC[cc_s2] =
   12682:	f8c7 8548 	str.w	r8, [r7, #1352]	; 0x548

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   12686:	f8d7 8548 	ldr.w	r8, [r7, #1352]	; 0x548
   1268a:	4541      	cmp	r1, r8
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1268c:	bf36      	itet	cc
   1268e:	f8d7 8548 	ldrcc.w	r8, [r7, #1352]	; 0x548
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   12692:	2101      	movcs	r1, #1
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   12694:	eba8 0101 	subcc.w	r1, r8, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   12698:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
			}

			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1269c:	4f42      	ldr	r7, [pc, #264]	; (127a8 <sw_switch.isra.6+0x1e0>)
   1269e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 127c4 <sw_switch.isra.6+0x1fc>
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   126a2:	4944      	ldr	r1, [pc, #272]	; (127b4 <sw_switch.isra.6+0x1ec>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   126a4:	f8c7 8590 	str.w	r8, [r7, #1424]	; 0x590
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   126a8:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
   126ac:	f504 31f8 	add.w	r1, r4, #126976	; 0x1f000
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;

			/* Include PPI for S2 timing in the active group */
			NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(
				sw_tifs_toggle)] |=
   126b0:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
   126b4:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
   126b8:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
   126bc:	00d1      	lsls	r1, r2, #3
   126be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   126c2:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis)	=
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_s2);

			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
			    ppi_dis) =
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   126c6:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
   126ca:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis)	=
   126ce:	f8c1 8510 	str.w	r8, [r1, #1296]	; 0x510
			    ppi_dis) =
   126d2:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
			    sw_tifs_toggle);

			/* Capture CC to cancel the timer that has assumed
			 * S8 reception, if packet will be received in S2.
			 */
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   126d6:	4a39      	ldr	r2, [pc, #228]	; (127bc <sw_switch.isra.6+0x1f4>)
   126d8:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   126dc:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
   126e0:	3270      	adds	r2, #112	; 0x70
   126e2:	4462      	add	r2, ip
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   126e4:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
				    sw_tifs_toggle);

			NRF_PPI->CHENSET =
   126e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   126ec:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
   126f0:	009b      	lsls	r3, r3, #2
   126f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   126f6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   126fa:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   126fe:	4282      	cmp	r2, r0
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12700:	bf8b      	itete	hi
   12702:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   12706:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   12708:	1a10      	subhi	r0, r2, r0
		SW_SWITCH_TIMER->CC[cc] = 1;
   1270a:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   1270e:	bf88      	it	hi
   12710:	f8c3 0540 	strhi.w	r0, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   12714:	4b24      	ldr	r3, [pc, #144]	; (127a8 <sw_switch.isra.6+0x1e0>)
   12716:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1271a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   1271e:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1;
   12720:	f003 0301 	and.w	r3, r3, #1
   12724:	702b      	strb	r3, [r5, #0]
   12726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   1272a:	f649 4940 	movw	r9, #40000	; 0x9c40
   1272e:	e77c      	b.n	1262a <sw_switch.isra.6+0x62>
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   12730:	f241 3088 	movw	r0, #5000	; 0x1388
   12734:	e784      	b.n	12640 <sw_switch.isra.6+0x78>
   12736:	009a      	lsls	r2, r3, #2
   12738:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1273c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   12740:	f8d2 4800 	ldr.w	r4, [r2, #2048]	; 0x800
   12744:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
   12748:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
   1274c:	b2fa      	uxtb	r2, r7
   1274e:	00d2      	lsls	r2, r2, #3
   12750:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   12754:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis) =
   12758:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1275c:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   12760:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis) =
   12764:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   12768:	e7c2      	b.n	126f0 <sw_switch.isra.6+0x128>
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   1276a:	4a15      	ldr	r2, [pc, #84]	; (127c0 <sw_switch.isra.6+0x1f8>)
   1276c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   12770:	b2fa      	uxtb	r2, r7
   12772:	00d2      	lsls	r2, r2, #3
   12774:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   12778:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		delay = HAL_RADIO_NS2US_CEIL(
   1277c:	202c      	movs	r0, #44	; 0x2c
				ppi_dis) =
   1277e:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   12782:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   12786:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
				ppi_dis) =
   1278a:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   1278e:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
   12792:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   12796:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
   1279a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   1279e:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
   127a2:	e7a5      	b.n	126f0 <sw_switch.isra.6+0x128>
   127a4:	20002904 	.word	0x20002904
   127a8:	4001f000 	.word	0x4001f000
   127ac:	4000110c 	.word	0x4000110c
   127b0:	40009140 	.word	0x40009140
   127b4:	40001000 	.word	0x40001000
   127b8:	40009000 	.word	0x40009000
   127bc:	40001150 	.word	0x40001150
   127c0:	40001004 	.word	0x40001004
   127c4:	40009148 	.word	0x40009148

000127c8 <isr_radio>:
	if (sfp_radio_isr) {
   127c8:	4b02      	ldr	r3, [pc, #8]	; (127d4 <isr_radio+0xc>)
   127ca:	681b      	ldr	r3, [r3, #0]
   127cc:	b103      	cbz	r3, 127d0 <isr_radio+0x8>
		sfp_radio_isr();
   127ce:	4718      	bx	r3
   127d0:	4770      	bx	lr
   127d2:	bf00      	nop
   127d4:	20002900 	.word	0x20002900

000127d8 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   127d8:	4b06      	ldr	r3, [pc, #24]	; (127f4 <radio_isr_set+0x1c>)
   127da:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   127dc:	4b06      	ldr	r3, [pc, #24]	; (127f8 <radio_isr_set+0x20>)
   127de:	2210      	movs	r2, #16
   127e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   127e4:	4b05      	ldr	r3, [pc, #20]	; (127fc <radio_isr_set+0x24>)
   127e6:	2202      	movs	r2, #2
   127e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   127ec:	2001      	movs	r0, #1
   127ee:	f7ee ba19 	b.w	c24 <_arch_irq_enable>
   127f2:	bf00      	nop
   127f4:	20002900 	.word	0x20002900
   127f8:	40001000 	.word	0x40001000
   127fc:	e000e100 	.word	0xe000e100

00012800 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   12800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12808:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1280a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1280e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   12812:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   12816:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1281a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1281e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   12822:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   12826:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1282a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1282e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   12832:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   12836:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1283a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1283e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   12842:	4770      	bx	lr

00012844 <radio_reset>:
{
   12844:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   12846:	2001      	movs	r0, #1
   12848:	f7ee f9fc 	bl	c44 <_arch_irq_disable>
	NRF_RADIO->POWER =
   1284c:	4b08      	ldr	r3, [pc, #32]	; (12870 <radio_reset+0x2c>)
   1284e:	2200      	movs	r2, #0
   12850:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   12854:	2201      	movs	r2, #1
   12856:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1285a:	4a06      	ldr	r2, [pc, #24]	; (12874 <radio_reset+0x30>)
   1285c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1285e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   12862:	f023 0301 	bic.w	r3, r3, #1
   12866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1286a:	6013      	str	r3, [r2, #0]
   1286c:	bd08      	pop	{r3, pc}
   1286e:	bf00      	nop
   12870:	40001000 	.word	0x40001000
   12874:	40001774 	.word	0x40001774

00012878 <radio_phy_set>:
	switch (phy) {
   12878:	2802      	cmp	r0, #2
   1287a:	4b14      	ldr	r3, [pc, #80]	; (128cc <radio_phy_set+0x54>)
   1287c:	d010      	beq.n	128a0 <radio_phy_set+0x28>
   1287e:	2804      	cmp	r0, #4
   12880:	d014      	beq.n	128ac <radio_phy_set+0x34>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   12882:	681a      	ldr	r2, [r3, #0]
   12884:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   12888:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1288a:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1288c:	4b10      	ldr	r3, [pc, #64]	; (128d0 <radio_phy_set+0x58>)
   1288e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   12892:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   12896:	f042 0201 	orr.w	r2, r2, #1
   1289a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1289e:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   128a0:	681a      	ldr	r2, [r3, #0]
   128a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   128a6:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   128a8:	2104      	movs	r1, #4
   128aa:	e7ef      	b.n	1288c <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
   128ac:	681a      	ldr	r2, [r3, #0]
   128ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   128b2:	601a      	str	r2, [r3, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   128b4:	681a      	ldr	r2, [r3, #0]
   128b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
		if (flags & 0x01) {
   128ba:	f011 0f01 	tst.w	r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   128be:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
			mode = RADIO_MODE_MODE_Ble_LR500Kbit;
   128c2:	bf14      	ite	ne
   128c4:	2105      	movne	r1, #5
   128c6:	2106      	moveq	r1, #6
		*(volatile u32_t *)0x4000173c =
   128c8:	601a      	str	r2, [r3, #0]
   128ca:	e7df      	b.n	1288c <radio_phy_set+0x14>
   128cc:	4000173c 	.word	0x4000173c
   128d0:	40001000 	.word	0x40001000

000128d4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   128d4:	4b01      	ldr	r3, [pc, #4]	; (128dc <radio_tx_power_set+0x8>)
   128d6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   128da:	4770      	bx	lr
   128dc:	40001000 	.word	0x40001000

000128e0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   128e0:	4b01      	ldr	r3, [pc, #4]	; (128e8 <radio_freq_chan_set+0x8>)
   128e2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   128e6:	4770      	bx	lr
   128e8:	40001000 	.word	0x40001000

000128ec <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   128ec:	4b07      	ldr	r3, [pc, #28]	; (1290c <radio_whiten_iv_set+0x20>)
   128ee:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   128f2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   128f6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   128fa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   128fe:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   12902:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   12906:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   1290a:	4770      	bx	lr
   1290c:	40001000 	.word	0x40001000

00012910 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   12910:	4a0a      	ldr	r2, [pc, #40]	; (1293c <radio_aa_set+0x2c>)
   12912:	2300      	movs	r3, #0
   12914:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   12918:	2301      	movs	r3, #1
   1291a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1291e:	78c3      	ldrb	r3, [r0, #3]
   12920:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   12924:	7843      	ldrb	r3, [r0, #1]
   12926:	7881      	ldrb	r1, [r0, #2]
   12928:	041b      	lsls	r3, r3, #16
   1292a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1292e:	7801      	ldrb	r1, [r0, #0]
   12930:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   12934:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   12938:	4770      	bx	lr
   1293a:	bf00      	nop
   1293c:	40001000 	.word	0x40001000

00012940 <radio_pkt_configure>:
	u8_t dc = flags & 0x01; /* Adv or Data channel */
   12940:	f002 0301 	and.w	r3, r2, #1
	switch (phy) {
   12944:	f3c2 0242 	ubfx	r2, r2, #1, #3
   12948:	2a02      	cmp	r2, #2
   1294a:	d023      	beq.n	12994 <radio_pkt_configure+0x54>
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   1294c:	2a04      	cmp	r2, #4
   1294e:	bf0c      	ite	eq
   12950:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
   12954:	2200      	movne	r2, #0
	if (dc) {
   12956:	b10b      	cbz	r3, 1295c <radio_pkt_configure+0x1c>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   12958:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1295c:	f1c0 0308 	rsb	r3, r0, #8
   12960:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   12962:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   12966:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1296a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
			    RADIO_PCNF0_S1LEN_Msk) |
   1296e:	4303      	orrs	r3, r0
   12970:	4313      	orrs	r3, r2
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   12972:	4a0a      	ldr	r2, [pc, #40]	; (1299c <radio_pkt_configure+0x5c>)
   12974:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   12978:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1297c:	4b08      	ldr	r3, [pc, #32]	; (129a0 <radio_pkt_configure+0x60>)
   1297e:	4003      	ands	r3, r0
   12980:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   12984:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   12988:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   1298c:	4319      	orrs	r1, r3
   1298e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   12992:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   12994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   12998:	e7dd      	b.n	12956 <radio_pkt_configure+0x16>
   1299a:	bf00      	nop
   1299c:	40001000 	.word	0x40001000
   129a0:	fef80000 	.word	0xfef80000

000129a4 <radio_pkt_rx_set>:
   129a4:	4b01      	ldr	r3, [pc, #4]	; (129ac <radio_pkt_rx_set+0x8>)
   129a6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   129aa:	4770      	bx	lr
   129ac:	40001000 	.word	0x40001000

000129b0 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   129b0:	4b01      	ldr	r3, [pc, #4]	; (129b8 <radio_pkt_tx_set+0x8>)
   129b2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   129b6:	4770      	bx	lr
   129b8:	40001000 	.word	0x40001000

000129bc <radio_tx_ready_delay_get>:
	switch (phy) {
   129bc:	2802      	cmp	r0, #2
   129be:	d004      	beq.n	129ca <radio_tx_ready_delay_get+0xe>
   129c0:	2804      	cmp	r0, #4
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
   129c2:	bf0c      	ite	eq
   129c4:	202b      	moveq	r0, #43	; 0x2b
   129c6:	2029      	movne	r0, #41	; 0x29
   129c8:	4770      	bx	lr
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   129ca:	2028      	movs	r0, #40	; 0x28
}
   129cc:	4770      	bx	lr

000129ce <radio_tx_chain_delay_get>:
}
   129ce:	2001      	movs	r0, #1
   129d0:	4770      	bx	lr

000129d2 <radio_rx_ready_delay_get>:
}
   129d2:	2029      	movs	r0, #41	; 0x29
   129d4:	4770      	bx	lr

000129d6 <radio_rx_chain_delay_get>:
	switch (phy) {
   129d6:	2802      	cmp	r0, #2
   129d8:	d003      	beq.n	129e2 <radio_rx_chain_delay_get+0xc>
   129da:	2804      	cmp	r0, #4
   129dc:	d003      	beq.n	129e6 <radio_rx_chain_delay_get+0x10>
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   129de:	200a      	movs	r0, #10
}
   129e0:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   129e2:	2005      	movs	r0, #5
   129e4:	4770      	bx	lr
		if (flags & 0x01) {
   129e6:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   129ea:	bf14      	ite	ne
   129ec:	201e      	movne	r0, #30
   129ee:	2014      	moveq	r0, #20
   129f0:	4770      	bx	lr
	...

000129f4 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   129f4:	4b01      	ldr	r3, [pc, #4]	; (129fc <radio_rx_enable+0x8>)
   129f6:	2201      	movs	r2, #1
   129f8:	605a      	str	r2, [r3, #4]
   129fa:	4770      	bx	lr
   129fc:	40001000 	.word	0x40001000

00012a00 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   12a00:	4b01      	ldr	r3, [pc, #4]	; (12a08 <radio_tx_enable+0x8>)
   12a02:	2201      	movs	r2, #1
   12a04:	601a      	str	r2, [r3, #0]
   12a06:	4770      	bx	lr
   12a08:	40001000 	.word	0x40001000

00012a0c <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12a0c:	4a07      	ldr	r2, [pc, #28]	; (12a2c <radio_disable+0x20>)
   12a0e:	f44f 6390 	mov.w	r3, #1152	; 0x480
   12a12:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   12a16:	2301      	movs	r3, #1
   12a18:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   12a1a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   12a1c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   12a20:	2100      	movs	r1, #0
   12a22:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   12a26:	6113      	str	r3, [r2, #16]
   12a28:	4770      	bx	lr
   12a2a:	bf00      	nop
   12a2c:	4001f000 	.word	0x4001f000

00012a30 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   12a30:	4b04      	ldr	r3, [pc, #16]	; (12a44 <radio_status_reset+0x14>)
   12a32:	2200      	movs	r2, #0
   12a34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   12a38:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   12a3c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12a40:	4770      	bx	lr
   12a42:	bf00      	nop
   12a44:	40001000 	.word	0x40001000

00012a48 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   12a48:	4b03      	ldr	r3, [pc, #12]	; (12a58 <radio_is_ready+0x10>)
   12a4a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   12a4e:	3000      	adds	r0, #0
   12a50:	bf18      	it	ne
   12a52:	2001      	movne	r0, #1
   12a54:	4770      	bx	lr
   12a56:	bf00      	nop
   12a58:	40001000 	.word	0x40001000

00012a5c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   12a5c:	4b03      	ldr	r3, [pc, #12]	; (12a6c <radio_is_done+0x10>)
   12a5e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   12a62:	3000      	adds	r0, #0
   12a64:	bf18      	it	ne
   12a66:	2001      	movne	r0, #1
   12a68:	4770      	bx	lr
   12a6a:	bf00      	nop
   12a6c:	40001000 	.word	0x40001000

00012a70 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   12a70:	4b03      	ldr	r3, [pc, #12]	; (12a80 <radio_is_idle+0x10>)
   12a72:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   12a76:	fab0 f080 	clz	r0, r0
   12a7a:	0940      	lsrs	r0, r0, #5
   12a7c:	4770      	bx	lr
   12a7e:	bf00      	nop
   12a80:	40001000 	.word	0x40001000

00012a84 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   12a84:	4b04      	ldr	r3, [pc, #16]	; (12a98 <radio_crc_configure+0x14>)
   12a86:	f240 1203 	movw	r2, #259	; 0x103
   12a8a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   12a8e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   12a92:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   12a96:	4770      	bx	lr
   12a98:	40001000 	.word	0x40001000

00012a9c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   12a9c:	4b03      	ldr	r3, [pc, #12]	; (12aac <radio_crc_is_valid+0x10>)
   12a9e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12aa2:	3000      	adds	r0, #0
   12aa4:	bf18      	it	ne
   12aa6:	2001      	movne	r0, #1
   12aa8:	4770      	bx	lr
   12aaa:	bf00      	nop
   12aac:	40001000 	.word	0x40001000

00012ab0 <radio_pkt_empty_get>:
}
   12ab0:	4800      	ldr	r0, [pc, #0]	; (12ab4 <radio_pkt_empty_get+0x4>)
   12ab2:	4770      	bx	lr
   12ab4:	200027f4 	.word	0x200027f4

00012ab8 <radio_pkt_scratch_get>:
}
   12ab8:	4800      	ldr	r0, [pc, #0]	; (12abc <radio_pkt_scratch_get+0x4>)
   12aba:	4770      	bx	lr
   12abc:	200027f8 	.word	0x200027f8

00012ac0 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12ac0:	4b04      	ldr	r3, [pc, #16]	; (12ad4 <radio_switch_complete_and_rx+0x14>)
   12ac2:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   12ac4:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12ac6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   12aca:	4602      	mov	r2, r0
   12acc:	4608      	mov	r0, r1
   12ace:	f7ff bd7b 	b.w	125c8 <sw_switch.isra.6>
   12ad2:	bf00      	nop
   12ad4:	40001000 	.word	0x40001000

00012ad8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   12ad8:	4b03      	ldr	r3, [pc, #12]	; (12ae8 <radio_switch_complete_and_tx+0x10>)
   12ada:	2103      	movs	r1, #3
   12adc:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   12ae0:	4601      	mov	r1, r0
   12ae2:	2001      	movs	r0, #1
   12ae4:	f7ff bd70 	b.w	125c8 <sw_switch.isra.6>
   12ae8:	40001000 	.word	0x40001000

00012aec <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   12aec:	4b05      	ldr	r3, [pc, #20]	; (12b04 <radio_switch_complete_and_disable+0x18>)
   12aee:	2203      	movs	r2, #3
   12af0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   12af4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   12af8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   12afc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12b00:	4770      	bx	lr
   12b02:	bf00      	nop
   12b04:	40001000 	.word	0x40001000

00012b08 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   12b08:	4a03      	ldr	r2, [pc, #12]	; (12b18 <radio_rssi_measure+0x10>)
   12b0a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   12b0e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   12b12:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   12b16:	4770      	bx	lr
   12b18:	40001000 	.word	0x40001000

00012b1c <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   12b1c:	4b01      	ldr	r3, [pc, #4]	; (12b24 <radio_rssi_get+0x8>)
   12b1e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   12b22:	4770      	bx	lr
   12b24:	40001000 	.word	0x40001000

00012b28 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   12b28:	4b02      	ldr	r3, [pc, #8]	; (12b34 <radio_rssi_status_reset+0xc>)
   12b2a:	2200      	movs	r2, #0
   12b2c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   12b30:	4770      	bx	lr
   12b32:	bf00      	nop
   12b34:	40001000 	.word	0x40001000

00012b38 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   12b38:	4b03      	ldr	r3, [pc, #12]	; (12b48 <radio_rssi_is_ready+0x10>)
   12b3a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   12b3e:	3000      	adds	r0, #0
   12b40:	bf18      	it	ne
   12b42:	2001      	movne	r0, #1
   12b44:	4770      	bx	lr
   12b46:	bf00      	nop
   12b48:	40001000 	.word	0x40001000

00012b4c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   12b4c:	b530      	push	{r4, r5, lr}
   12b4e:	2400      	movs	r4, #0
   12b50:	00a3      	lsls	r3, r4, #2
   12b52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   12b5a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   12b5c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   12b60:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   12b62:	8895      	ldrh	r5, [r2, #4]
   12b64:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   12b68:	2c08      	cmp	r4, #8
		bdaddr += 6;
   12b6a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   12b6e:	d1ef      	bne.n	12b50 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   12b70:	4b02      	ldr	r3, [pc, #8]	; (12b7c <radio_filter_configure+0x30>)
   12b72:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   12b76:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   12b7a:	bd30      	pop	{r4, r5, pc}
   12b7c:	40001000 	.word	0x40001000

00012b80 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   12b80:	4a03      	ldr	r2, [pc, #12]	; (12b90 <radio_filter_disable+0x10>)
   12b82:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   12b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   12b8a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   12b8e:	4770      	bx	lr
   12b90:	40001000 	.word	0x40001000

00012b94 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   12b94:	4b02      	ldr	r3, [pc, #8]	; (12ba0 <radio_filter_status_reset+0xc>)
   12b96:	2200      	movs	r2, #0
   12b98:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   12b9c:	4770      	bx	lr
   12b9e:	bf00      	nop
   12ba0:	40001000 	.word	0x40001000

00012ba4 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   12ba4:	4b03      	ldr	r3, [pc, #12]	; (12bb4 <radio_filter_has_match+0x10>)
   12ba6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   12baa:	3000      	adds	r0, #0
   12bac:	bf18      	it	ne
   12bae:	2001      	movne	r0, #1
   12bb0:	4770      	bx	lr
   12bb2:	bf00      	nop
   12bb4:	40001000 	.word	0x40001000

00012bb8 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   12bb8:	4b01      	ldr	r3, [pc, #4]	; (12bc0 <radio_filter_match_get+0x8>)
   12bba:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   12bbe:	4770      	bx	lr
   12bc0:	40001000 	.word	0x40001000

00012bc4 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   12bc4:	4b04      	ldr	r3, [pc, #16]	; (12bd8 <radio_bc_configure+0x14>)
   12bc6:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   12bca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   12bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12bd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   12bd6:	4770      	bx	lr
   12bd8:	40001000 	.word	0x40001000

00012bdc <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   12bdc:	4b05      	ldr	r3, [pc, #20]	; (12bf4 <radio_tmr_status_reset+0x18>)
   12bde:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   12be2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   12be6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   12bea:	4a03      	ldr	r2, [pc, #12]	; (12bf8 <radio_tmr_status_reset+0x1c>)
   12bec:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   12bf0:	4770      	bx	lr
   12bf2:	bf00      	nop
   12bf4:	4000b000 	.word	0x4000b000
   12bf8:	0004207f 	.word	0x0004207f

00012bfc <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   12bfc:	4b03      	ldr	r3, [pc, #12]	; (12c0c <radio_tmr_tifs_set+0x10>)
   12bfe:	4a04      	ldr	r2, [pc, #16]	; (12c10 <radio_tmr_tifs_set+0x14>)
   12c00:	781b      	ldrb	r3, [r3, #0]
   12c02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   12c06:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   12c0a:	4770      	bx	lr
   12c0c:	20002904 	.word	0x20002904
   12c10:	40009000 	.word	0x40009000

00012c14 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   12c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12c18:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   12c1c:	4c27      	ldr	r4, [pc, #156]	; (12cbc <radio_tmr_start+0xa8>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   12c1e:	4d28      	ldr	r5, [pc, #160]	; (12cc0 <radio_tmr_start+0xac>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   12c20:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   12c24:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   12c26:	bf88      	it	hi
   12c28:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	EVENT_TIMER->TASKS_CLEAR = 1;
   12c2c:	4b25      	ldr	r3, [pc, #148]	; (12cc4 <radio_tmr_start+0xb0>)
	remainder /= 1000000UL;
   12c2e:	4c26      	ldr	r4, [pc, #152]	; (12cc8 <radio_tmr_start+0xb4>)
		remainder += 30517578UL;
   12c30:	bf82      	ittt	hi
   12c32:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   12c36:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   12c3a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   12c3e:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   12c40:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->MODE = 0;
   12c44:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12c46:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   12c48:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   12c4c:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   12c4e:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   12c52:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   12c56:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   12c5a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   12c5e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   12c62:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   12c66:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   12c6a:	f505 35a0 	add.w	r5, r5, #81920	; 0x14000
   12c6e:	4917      	ldr	r1, [pc, #92]	; (12ccc <radio_tmr_start+0xb8>)
   12c70:	f8c5 1518 	str.w	r1, [r5, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   12c74:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   12c78:	f8c5 2504 	str.w	r2, [r5, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   12c7c:	f7ff fc8c 	bl	12598 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   12c80:	4b13      	ldr	r3, [pc, #76]	; (12cd0 <radio_tmr_start+0xbc>)
   12c82:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   12c84:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   12c88:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   12c8c:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   12c90:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   12c92:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   12c96:	3b74      	subs	r3, #116	; 0x74
   12c98:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   12c9c:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   12ca0:	f8c5 354c 	str.w	r3, [r5, #1356]	; 0x54c
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   12ca4:	f44f 6310 	mov.w	r3, #2304	; 0x900
   12ca8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   12cac:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   12cb0:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   12cb4:	4620      	mov	r0, r4
   12cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12cba:	bf00      	nop
   12cbc:	7ff0bdbf 	.word	0x7ff0bdbf
   12cc0:	4000b000 	.word	0x4000b000
   12cc4:	40008000 	.word	0x40008000
   12cc8:	000f4240 	.word	0x000f4240
   12ccc:	4000b148 	.word	0x4000b148
   12cd0:	40009000 	.word	0x40009000

00012cd4 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   12cd4:	4a04      	ldr	r2, [pc, #16]	; (12ce8 <radio_tmr_stop+0x14>)
   12cd6:	2301      	movs	r3, #1
   12cd8:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   12cda:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   12cdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   12ce0:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   12ce2:	6113      	str	r3, [r2, #16]
   12ce4:	4770      	bx	lr
   12ce6:	bf00      	nop
   12ce8:	40008000 	.word	0x40008000

00012cec <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   12cec:	4b0c      	ldr	r3, [pc, #48]	; (12d20 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12cee:	4a0d      	ldr	r2, [pc, #52]	; (12d24 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   12cf0:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12cf4:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   12cf8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12cfc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12d00:	3240      	adds	r2, #64	; 0x40
   12d02:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   12d06:	f502 7280 	add.w	r2, r2, #256	; 0x100
   12d0a:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   12d0e:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   12d12:	3a34      	subs	r2, #52	; 0x34
   12d14:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   12d18:	2218      	movs	r2, #24
   12d1a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12d1e:	4770      	bx	lr
   12d20:	40008000 	.word	0x40008000
   12d24:	40001104 	.word	0x40001104

00012d28 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   12d28:	4b0b      	ldr	r3, [pc, #44]	; (12d58 <radio_tmr_aa_capture+0x30>)
   12d2a:	4a0c      	ldr	r2, [pc, #48]	; (12d5c <radio_tmr_aa_capture+0x34>)
   12d2c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   12d30:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12d34:	3240      	adds	r2, #64	; 0x40
   12d36:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   12d3a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   12d3e:	3a3c      	subs	r2, #60	; 0x3c
   12d40:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   12d44:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12d48:	3240      	adds	r2, #64	; 0x40
   12d4a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   12d4e:	220c      	movs	r2, #12
   12d50:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12d54:	4770      	bx	lr
   12d56:	bf00      	nop
   12d58:	4001f000 	.word	0x4001f000
   12d5c:	40001100 	.word	0x40001100

00012d60 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   12d60:	4b01      	ldr	r3, [pc, #4]	; (12d68 <radio_tmr_aa_get+0x8>)
   12d62:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   12d66:	4770      	bx	lr
   12d68:	40008000 	.word	0x40008000

00012d6c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   12d6c:	4b01      	ldr	r3, [pc, #4]	; (12d74 <radio_tmr_aa_save+0x8>)
   12d6e:	6018      	str	r0, [r3, #0]
   12d70:	4770      	bx	lr
   12d72:	bf00      	nop
   12d74:	200028fc 	.word	0x200028fc

00012d78 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   12d78:	4b01      	ldr	r3, [pc, #4]	; (12d80 <radio_tmr_aa_restore+0x8>)
   12d7a:	6818      	ldr	r0, [r3, #0]
   12d7c:	4770      	bx	lr
   12d7e:	bf00      	nop
   12d80:	200028fc 	.word	0x200028fc

00012d84 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   12d84:	4b01      	ldr	r3, [pc, #4]	; (12d8c <radio_tmr_ready_get+0x8>)
   12d86:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   12d8a:	4770      	bx	lr
   12d8c:	40008000 	.word	0x40008000

00012d90 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   12d90:	4b06      	ldr	r3, [pc, #24]	; (12dac <radio_tmr_end_capture+0x1c>)
   12d92:	4a07      	ldr	r2, [pc, #28]	; (12db0 <radio_tmr_end_capture+0x20>)
   12d94:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   12d98:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   12d9c:	323c      	adds	r2, #60	; 0x3c
   12d9e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   12da2:	2220      	movs	r2, #32
   12da4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12da8:	4770      	bx	lr
   12daa:	bf00      	nop
   12dac:	4001f000 	.word	0x4001f000
   12db0:	4000110c 	.word	0x4000110c

00012db4 <radio_tmr_end_get>:
   12db4:	4b01      	ldr	r3, [pc, #4]	; (12dbc <radio_tmr_end_get+0x8>)
   12db6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   12dba:	4770      	bx	lr
   12dbc:	40008000 	.word	0x40008000

00012dc0 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   12dc0:	4b01      	ldr	r3, [pc, #4]	; (12dc8 <radio_tmr_tifs_base_get+0x8>)
   12dc2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   12dc6:	4770      	bx	lr
   12dc8:	40008000 	.word	0x40008000

00012dcc <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12dcc:	4b21      	ldr	r3, [pc, #132]	; (12e54 <radio_ccm_rx_pkt_set+0x88>)
{
   12dce:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12dd0:	2400      	movs	r4, #0
   12dd2:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12dd6:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   12dd8:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12dda:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   12dde:	d003      	beq.n	12de8 <radio_ccm_rx_pkt_set+0x1c>
   12de0:	2904      	cmp	r1, #4
   12de2:	d024      	beq.n	12e2e <radio_ccm_rx_pkt_set+0x62>
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   12de4:	491c      	ldr	r1, [pc, #112]	; (12e58 <radio_ccm_rx_pkt_set+0x8c>)
   12de6:	e000      	b.n	12dea <radio_ccm_rx_pkt_set+0x1e>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   12de8:	491c      	ldr	r1, [pc, #112]	; (12e5c <radio_ccm_rx_pkt_set+0x90>)
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   12dea:	4b1a      	ldr	r3, [pc, #104]	; (12e54 <radio_ccm_rx_pkt_set+0x88>)
   12dec:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12df0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   12df4:	481a      	ldr	r0, [pc, #104]	; (12e60 <radio_ccm_rx_pkt_set+0x94>)
   12df6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   12dfa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12dfe:	4a19      	ldr	r2, [pc, #100]	; (12e64 <radio_ccm_rx_pkt_set+0x98>)
   12e00:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   12e04:	2200      	movs	r2, #0
   12e06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12e0a:	4917      	ldr	r1, [pc, #92]	; (12e68 <radio_ccm_rx_pkt_set+0x9c>)
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12e0c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12e10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   12e14:	4a15      	ldr	r2, [pc, #84]	; (12e6c <radio_ccm_rx_pkt_set+0xa0>)
   12e16:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   12e1a:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   12e1e:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   12e22:	2140      	movs	r1, #64	; 0x40
   12e24:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   12e28:	2201      	movs	r2, #1
   12e2a:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12e2c:	bd10      	pop	{r4, pc}
		NRF_CCM->RATEOVERRIDE =
   12e2e:	2103      	movs	r1, #3
   12e30:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_EVT =
   12e34:	4b0d      	ldr	r3, [pc, #52]	; (12e6c <radio_ccm_rx_pkt_set+0xa0>)
   12e36:	490e      	ldr	r1, [pc, #56]	; (12e70 <radio_ccm_rx_pkt_set+0xa4>)
   12e38:	f8c3 1578 	str.w	r1, [r3, #1400]	; 0x578
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_TASK =
   12e3c:	f501 415e 	add.w	r1, r1, #56832	; 0xde00
   12e40:	31bc      	adds	r1, #188	; 0xbc
   12e42:	f8c3 157c 	str.w	r1, [r3, #1404]	; 0x57c
		NRF_PPI->CHENSET = HAL_TRIGGER_RATEOVERRIDE_PPI_ENABLE;
   12e46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   12e4a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   12e4e:	4909      	ldr	r1, [pc, #36]	; (12e74 <radio_ccm_rx_pkt_set+0xa8>)
		break;
   12e50:	e7cb      	b.n	12dea <radio_ccm_rx_pkt_set+0x1e>
   12e52:	bf00      	nop
   12e54:	4000f000 	.word	0x4000f000
   12e58:	01000001 	.word	0x01000001
   12e5c:	01010001 	.word	0x01010001
   12e60:	200027f8 	.word	0x200027f8
   12e64:	200026e8 	.word	0x200026e8
   12e68:	40001104 	.word	0x40001104
   12e6c:	4001f000 	.word	0x4001f000
   12e70:	40001150 	.word	0x40001150
   12e74:	01020001 	.word	0x01020001

00012e78 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   12e78:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12e7a:	4b0e      	ldr	r3, [pc, #56]	; (12eb4 <radio_ccm_tx_pkt_set+0x3c>)
   12e7c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12e7e:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   12e80:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   12e84:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   12e88:	4c0b      	ldr	r4, [pc, #44]	; (12eb8 <radio_ccm_tx_pkt_set+0x40>)
   12e8a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   12e8e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   12e92:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12e96:	4809      	ldr	r0, [pc, #36]	; (12ebc <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12e98:	4909      	ldr	r1, [pc, #36]	; (12ec0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   12e9a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   12e9e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   12ea2:	2101      	movs	r1, #1
   12ea4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   12ea8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   12eac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   12eb0:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   12eb2:	bd10      	pop	{r4, pc}
   12eb4:	4000f000 	.word	0x4000f000
   12eb8:	01010000 	.word	0x01010000
   12ebc:	200027f8 	.word	0x200027f8
   12ec0:	200026e8 	.word	0x200026e8

00012ec4 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   12ec4:	4b0c      	ldr	r3, [pc, #48]	; (12ef8 <radio_ccm_is_done+0x34>)
   12ec6:	2202      	movs	r2, #2
   12ec8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   12ecc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   12ed0:	b16a      	cbz	r2, 12eee <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   12ed2:	2202      	movs	r2, #2
   12ed4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   12ed8:	4a08      	ldr	r2, [pc, #32]	; (12efc <radio_ccm_is_done+0x38>)
   12eda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   12ede:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   12ee2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   12ee6:	fab0 f080 	clz	r0, r0
   12eea:	0940      	lsrs	r0, r0, #5
   12eec:	4770      	bx	lr
		__WFE();
   12eee:	bf20      	wfe
		__SEV();
   12ef0:	bf40      	sev
		__WFE();
   12ef2:	bf20      	wfe
   12ef4:	e7ea      	b.n	12ecc <radio_ccm_is_done+0x8>
   12ef6:	bf00      	nop
   12ef8:	4000f000 	.word	0x4000f000
   12efc:	e000e100 	.word	0xe000e100

00012f00 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   12f00:	4b03      	ldr	r3, [pc, #12]	; (12f10 <radio_ccm_mic_is_valid+0x10>)
   12f02:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12f06:	3000      	adds	r0, #0
   12f08:	bf18      	it	ne
   12f0a:	2001      	movne	r0, #1
   12f0c:	4770      	bx	lr
   12f0e:	bf00      	nop
   12f10:	4000f000 	.word	0x4000f000

00012f14 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   12f14:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12f16:	4c13      	ldr	r4, [pc, #76]	; (12f64 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12f18:	4d13      	ldr	r5, [pc, #76]	; (12f68 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   12f1a:	2303      	movs	r3, #3
   12f1c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   12f20:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   12f24:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   12f28:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   12f2c:	3b01      	subs	r3, #1
   12f2e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   12f32:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   12f34:	4b0d      	ldr	r3, [pc, #52]	; (12f6c <radio_ar_configure+0x58>)
   12f36:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   12f3a:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   12f3c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   12f40:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   12f44:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   12f48:	f7ff fe3c 	bl	12bc4 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12f4c:	4b08      	ldr	r3, [pc, #32]	; (12f70 <radio_ar_configure+0x5c>)
   12f4e:	4a09      	ldr	r2, [pc, #36]	; (12f74 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12f50:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   12f54:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12f58:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   12f5a:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   12f5e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   12f62:	bd38      	pop	{r3, r4, r5, pc}
   12f64:	4000f000 	.word	0x4000f000
   12f68:	40001000 	.word	0x40001000
   12f6c:	200026e4 	.word	0x200026e4
   12f70:	4001f000 	.word	0x4001f000
   12f74:	40001128 	.word	0x40001128

00012f78 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   12f78:	4b01      	ldr	r3, [pc, #4]	; (12f80 <radio_ar_match_get+0x8>)
   12f7a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   12f7e:	4770      	bx	lr
   12f80:	4000f000 	.word	0x4000f000

00012f84 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   12f84:	4a04      	ldr	r2, [pc, #16]	; (12f98 <radio_ar_status_reset+0x14>)
   12f86:	2300      	movs	r3, #0
   12f88:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   12f8c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   12f90:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12f94:	4770      	bx	lr
   12f96:	bf00      	nop
   12f98:	40001000 	.word	0x40001000

00012f9c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   12f9c:	4b08      	ldr	r3, [pc, #32]	; (12fc0 <radio_ar_has_match+0x24>)
   12f9e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   12fa2:	b160      	cbz	r0, 12fbe <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   12fa4:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   12fa8:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   12fac:	b138      	cbz	r0, 12fbe <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   12fae:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   12fb2:	b120      	cbz	r0, 12fbe <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   12fb4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   12fb8:	fab0 f080 	clz	r0, r0
   12fbc:	0940      	lsrs	r0, r0, #5
}
   12fbe:	4770      	bx	lr
   12fc0:	40001000 	.word	0x40001000

00012fc4 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   12fc4:	2901      	cmp	r1, #1
   12fc6:	d005      	beq.n	12fd4 <mayfly_enable_cb+0x10>
   12fc8:	4040      	eors	r0, r0
   12fca:	f380 8811 	msr	BASEPRI, r0
   12fce:	f04f 0004 	mov.w	r0, #4
   12fd2:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   12fd4:	2018      	movs	r0, #24
	if (enable) {
   12fd6:	b10a      	cbz	r2, 12fdc <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
   12fd8:	f7ed be24 	b.w	c24 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
   12fdc:	f7ed be32 	b.w	c44 <_arch_irq_disable>

00012fe0 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   12fe0:	b139      	cbz	r1, 12ff2 <mayfly_is_enabled+0x12>
   12fe2:	2901      	cmp	r1, #1
   12fe4:	d008      	beq.n	12ff8 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   12fe6:	4040      	eors	r0, r0
   12fe8:	f380 8811 	msr	BASEPRI, r0
   12fec:	f04f 0004 	mov.w	r0, #4
   12ff0:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   12ff2:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
   12ff4:	f7ed be3a 	b.w	c6c <_arch_irq_is_enabled>
   12ff8:	2018      	movs	r0, #24
   12ffa:	e7fb      	b.n	12ff4 <mayfly_is_enabled+0x14>

00012ffc <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   12ffc:	4288      	cmp	r0, r1
   12ffe:	d00a      	beq.n	13016 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   13000:	b918      	cbnz	r0, 1300a <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   13002:	1e4b      	subs	r3, r1, #1
   13004:	4258      	negs	r0, r3
   13006:	4158      	adcs	r0, r3
   13008:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1300a:	2801      	cmp	r0, #1
   1300c:	d105      	bne.n	1301a <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1300e:	fab1 f081 	clz	r0, r1
   13012:	0940      	lsrs	r0, r0, #5
   13014:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   13016:	2001      	movs	r0, #1
   13018:	4770      	bx	lr
   1301a:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   1301c:	4770      	bx	lr
	...

00013020 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   13020:	4b08      	ldr	r3, [pc, #32]	; (13044 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
   13022:	b139      	cbz	r1, 13034 <mayfly_pend+0x14>
   13024:	2901      	cmp	r1, #1
   13026:	d00a      	beq.n	1303e <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   13028:	4040      	eors	r0, r0
   1302a:	f380 8811 	msr	BASEPRI, r0
   1302e:	f04f 0004 	mov.w	r0, #4
   13032:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13034:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13038:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1303c:	4770      	bx	lr
   1303e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   13042:	e7f9      	b.n	13038 <mayfly_pend+0x18>
   13044:	e000e100 	.word	0xe000e100

00013048 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   13048:	2803      	cmp	r0, #3
   1304a:	d905      	bls.n	13058 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1304c:	4040      	eors	r0, r0
   1304e:	f380 8811 	msr	BASEPRI, r0
   13052:	f04f 0004 	mov.w	r0, #4
   13056:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   13058:	4b02      	ldr	r3, [pc, #8]	; (13064 <hal_ticker_instance0_caller_id_get+0x1c>)
   1305a:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1305c:	2800      	cmp	r0, #0
   1305e:	d0f5      	beq.n	1304c <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
   13060:	4770      	bx	lr
   13062:	bf00      	nop
   13064:	00014d7a 	.word	0x00014d7a

00013068 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   13068:	3802      	subs	r0, #2
{
   1306a:	b410      	push	{r4}
   1306c:	461c      	mov	r4, r3
	switch (caller_id) {
   1306e:	2803      	cmp	r0, #3
   13070:	d816      	bhi.n	130a0 <hal_ticker_instance0_sched+0x38>
   13072:	e8df f000 	tbb	[pc, r0]
   13076:	0b02      	.short	0x0b02
   13078:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   1307a:	2903      	cmp	r1, #3
   1307c:	d110      	bne.n	130a0 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   1307e:	4b13      	ldr	r3, [pc, #76]	; (130cc <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   13080:	2100      	movs	r1, #0
			m.param = instance;
   13082:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13084:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   13086:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   13088:	f7f4 bc48 	b.w	791c <mayfly_enqueue>
		switch (callee_id) {
   1308c:	2904      	cmp	r1, #4
   1308e:	d107      	bne.n	130a0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   13090:	4b0f      	ldr	r3, [pc, #60]	; (130d0 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   13092:	2101      	movs	r1, #1
			m.param = instance;
   13094:	609c      	str	r4, [r3, #8]
   13096:	e7f5      	b.n	13084 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   13098:	2903      	cmp	r1, #3
   1309a:	d007      	beq.n	130ac <hal_ticker_instance0_sched+0x44>
   1309c:	2904      	cmp	r1, #4
   1309e:	d00a      	beq.n	130b6 <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
   130a0:	4040      	eors	r0, r0
   130a2:	f380 8811 	msr	BASEPRI, r0
   130a6:	f04f 0004 	mov.w	r0, #4
   130aa:	df02      	svc	2
			m.param = instance;
   130ac:	4b09      	ldr	r3, [pc, #36]	; (130d4 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   130ae:	2100      	movs	r1, #0
			m.param = instance;
   130b0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   130b2:	2001      	movs	r0, #1
   130b4:	e7e7      	b.n	13086 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   130b6:	4b08      	ldr	r3, [pc, #32]	; (130d8 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   130b8:	2101      	movs	r1, #1
			m.param = instance;
   130ba:	609c      	str	r4, [r3, #8]
   130bc:	e7f9      	b.n	130b2 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
   130be:	2904      	cmp	r1, #4
   130c0:	d1ee      	bne.n	130a0 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
   130c2:	4b06      	ldr	r3, [pc, #24]	; (130dc <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   130c4:	2101      	movs	r1, #1
			m.param = instance;
   130c6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   130c8:	2003      	movs	r0, #3
   130ca:	e7dc      	b.n	13086 <hal_ticker_instance0_sched+0x1e>
   130cc:	2000cf84 	.word	0x2000cf84
   130d0:	2000cf94 	.word	0x2000cf94
   130d4:	2000cfa4 	.word	0x2000cfa4
   130d8:	2000cfb4 	.word	0x2000cfb4
   130dc:	2000cfc4 	.word	0x2000cfc4

000130e0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   130e0:	4601      	mov	r1, r0
   130e2:	2000      	movs	r0, #0
   130e4:	f7ff ba08 	b.w	124f8 <cntr_cmp_set>

000130e8 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   130e8:	4770      	bx	lr
	...

000130ec <net_buf_pool_get>:
}
   130ec:	4b01      	ldr	r3, [pc, #4]	; (130f4 <net_buf_pool_get+0x8>)
   130ee:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   130f2:	4770      	bx	lr
   130f4:	2000d0ac 	.word	0x2000d0ac

000130f8 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   130f8:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   130fa:	4b04      	ldr	r3, [pc, #16]	; (1310c <net_buf_id+0x14>)
   130fc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   13100:	69db      	ldr	r3, [r3, #28]
   13102:	1ac0      	subs	r0, r0, r3
}
   13104:	4b02      	ldr	r3, [pc, #8]	; (13110 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   13106:	10c0      	asrs	r0, r0, #3
}
   13108:	4358      	muls	r0, r3
   1310a:	4770      	bx	lr
   1310c:	2000d0ac 	.word	0x2000d0ac
   13110:	aaaaaaab 	.word	0xaaaaaaab

00013114 <fixed_data_alloc>:
{
   13114:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13116:	4b09      	ldr	r3, [pc, #36]	; (1313c <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13118:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1311a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   1311e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13120:	699b      	ldr	r3, [r3, #24]
   13122:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   13124:	6823      	ldr	r3, [r4, #0]
   13126:	429a      	cmp	r2, r3
   13128:	bf94      	ite	ls
   1312a:	600a      	strls	r2, [r1, #0]
   1312c:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1312e:	f7ff ffe3 	bl	130f8 <net_buf_id>
   13132:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   13136:	fb02 3000 	mla	r0, r2, r0, r3
   1313a:	bd10      	pop	{r4, pc}
   1313c:	2000d0ac 	.word	0x2000d0ac

00013140 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   13140:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13144:	4605      	mov	r5, r0
   13146:	9101      	str	r1, [sp, #4]
   13148:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   1314a:	f000 fdcb 	bl	13ce4 <_impl_k_uptime_get_32>
   1314e:	4607      	mov	r7, r0
	__asm__ volatile(
   13150:	f04f 0320 	mov.w	r3, #32
   13154:	f3ef 8811 	mrs	r8, BASEPRI
   13158:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1315c:	8a6b      	ldrh	r3, [r5, #18]
   1315e:	2b00      	cmp	r3, #0
   13160:	d03d      	beq.n	131de <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   13162:	8a2a      	ldrh	r2, [r5, #16]
   13164:	429a      	cmp	r2, r3
   13166:	d92a      	bls.n	131be <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   13168:	2100      	movs	r1, #0
   1316a:	4628      	mov	r0, r5
   1316c:	f000 faed 	bl	1374a <k_queue_get>
			if (buf) {
   13170:	4604      	mov	r4, r0
   13172:	b320      	cbz	r0, 131be <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13174:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   13178:	9b01      	ldr	r3, [sp, #4]
   1317a:	2b00      	cmp	r3, #0
   1317c:	d03c      	beq.n	131f8 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   1317e:	1c73      	adds	r3, r6, #1
   13180:	2b01      	cmp	r3, #1
   13182:	d906      	bls.n	13192 <net_buf_alloc_len+0x52>
   13184:	f000 fdae 	bl	13ce4 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   13188:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   1318a:	42b0      	cmp	r0, r6
   1318c:	bf94      	ite	ls
   1318e:	1a36      	subls	r6, r6, r0
   13190:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13192:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   13194:	4f1e      	ldr	r7, [pc, #120]	; (13210 <net_buf_alloc_len+0xd0>)
   13196:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   1319a:	4632      	mov	r2, r6
   1319c:	699b      	ldr	r3, [r3, #24]
   1319e:	681b      	ldr	r3, [r3, #0]
   131a0:	a901      	add	r1, sp, #4
   131a2:	681b      	ldr	r3, [r3, #0]
   131a4:	4620      	mov	r0, r4
   131a6:	4798      	blx	r3
   131a8:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   131aa:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   131ac:	bb28      	cbnz	r0, 131fa <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   131ae:	79a0      	ldrb	r0, [r4, #6]
   131b0:	4621      	mov	r1, r4
   131b2:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   131b6:	f000 faa8 	bl	1370a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   131ba:	462c      	mov	r4, r5
   131bc:	e018      	b.n	131f0 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   131be:	8a6b      	ldrh	r3, [r5, #18]
   131c0:	1e5a      	subs	r2, r3, #1
   131c2:	826a      	strh	r2, [r5, #18]
   131c4:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   131c8:	8a2c      	ldrh	r4, [r5, #16]
   131ca:	1ae4      	subs	r4, r4, r3
   131cc:	69eb      	ldr	r3, [r5, #28]
   131ce:	2218      	movs	r2, #24
   131d0:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   131d4:	4b0e      	ldr	r3, [pc, #56]	; (13210 <net_buf_alloc_len+0xd0>)
   131d6:	1aed      	subs	r5, r5, r3
   131d8:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   131da:	71a5      	strb	r5, [r4, #6]
		goto success;
   131dc:	e7cc      	b.n	13178 <net_buf_alloc_len+0x38>
   131de:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
   131e2:	4631      	mov	r1, r6
   131e4:	4628      	mov	r0, r5
   131e6:	f000 fab0 	bl	1374a <k_queue_get>
	if (!buf) {
   131ea:	4604      	mov	r4, r0
   131ec:	2800      	cmp	r0, #0
   131ee:	d1c3      	bne.n	13178 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   131f0:	4620      	mov	r0, r4
   131f2:	b002      	add	sp, #8
   131f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   131f8:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   131fa:	2301      	movs	r3, #1
   131fc:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   131fe:	2300      	movs	r3, #0
	buf->frags = NULL;
   13200:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   13202:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   13204:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   13206:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   13208:	6923      	ldr	r3, [r4, #16]
   1320a:	81e2      	strh	r2, [r4, #14]
   1320c:	60a3      	str	r3, [r4, #8]
	return buf;
   1320e:	e7ef      	b.n	131f0 <net_buf_alloc_len+0xb0>
   13210:	2000d0ac 	.word	0x2000d0ac

00013214 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   13214:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   13216:	685b      	ldr	r3, [r3, #4]
   13218:	460a      	mov	r2, r1
   1321a:	6819      	ldr	r1, [r3, #0]
   1321c:	f7ff bf90 	b.w	13140 <net_buf_alloc_len>

00013220 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   13220:	b570      	push	{r4, r5, r6, lr}
   13222:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   13224:	f000 fa91 	bl	1374a <k_queue_get>
	if (!buf) {
   13228:	4605      	mov	r5, r0
   1322a:	b128      	cbz	r0, 13238 <net_buf_get+0x18>
   1322c:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1322e:	7963      	ldrb	r3, [r4, #5]
   13230:	f013 0301 	ands.w	r3, r3, #1
   13234:	d102      	bne.n	1323c <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   13236:	6023      	str	r3, [r4, #0]

	return buf;
}
   13238:	4628      	mov	r0, r5
   1323a:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1323c:	2100      	movs	r1, #0
   1323e:	4630      	mov	r0, r6
   13240:	f000 fa83 	bl	1374a <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   13244:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   13246:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   13248:	f023 0301 	bic.w	r3, r3, #1
   1324c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1324e:	4604      	mov	r4, r0
   13250:	e7ed      	b.n	1322e <net_buf_get+0xe>

00013252 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   13252:	6883      	ldr	r3, [r0, #8]
   13254:	4419      	add	r1, r3
   13256:	6001      	str	r1, [r0, #0]
   13258:	4770      	bx	lr

0001325a <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1325a:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1325c:	460a      	mov	r2, r1
   1325e:	6814      	ldr	r4, [r2, #0]
   13260:	b914      	cbnz	r4, 13268 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   13262:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   13264:	f000 ba55 	b.w	13712 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   13268:	7953      	ldrb	r3, [r2, #5]
   1326a:	f043 0301 	orr.w	r3, r3, #1
   1326e:	7153      	strb	r3, [r2, #5]
   13270:	4622      	mov	r2, r4
   13272:	e7f4      	b.n	1325e <net_buf_put+0x4>

00013274 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   13274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13276:	4d15      	ldr	r5, [pc, #84]	; (132cc <net_buf_unref+0x58>)
   13278:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1327a:	2600      	movs	r6, #0
	while (buf) {
   1327c:	b904      	cbnz	r4, 13280 <net_buf_unref+0xc>
   1327e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   13280:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   13282:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   13284:	3b01      	subs	r3, #1
   13286:	b2db      	uxtb	r3, r3
   13288:	7123      	strb	r3, [r4, #4]
   1328a:	2b00      	cmp	r3, #0
   1328c:	d1f7      	bne.n	1327e <net_buf_unref+0xa>
		if (buf->__buf) {
   1328e:	6921      	ldr	r1, [r4, #16]
   13290:	b159      	cbz	r1, 132aa <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   13292:	7963      	ldrb	r3, [r4, #5]
   13294:	079b      	lsls	r3, r3, #30
   13296:	d407      	bmi.n	132a8 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   13298:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1329a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   1329e:	4620      	mov	r0, r4
   132a0:	699b      	ldr	r3, [r3, #24]
   132a2:	681b      	ldr	r3, [r3, #0]
   132a4:	689b      	ldr	r3, [r3, #8]
   132a6:	4798      	blx	r3
			buf->__buf = NULL;
   132a8:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   132aa:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   132ac:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   132ae:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   132b2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   132b4:	695b      	ldr	r3, [r3, #20]
   132b6:	b11b      	cbz	r3, 132c0 <net_buf_unref+0x4c>
			pool->destroy(buf);
   132b8:	4620      	mov	r0, r4
   132ba:	4798      	blx	r3
{
   132bc:	463c      	mov	r4, r7
   132be:	e7dd      	b.n	1327c <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   132c0:	4621      	mov	r1, r4
   132c2:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   132c6:	f000 fa20 	bl	1370a <k_queue_prepend>
   132ca:	e7f7      	b.n	132bc <net_buf_unref+0x48>
   132cc:	2000d0ac 	.word	0x2000d0ac

000132d0 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   132d0:	7903      	ldrb	r3, [r0, #4]
   132d2:	3301      	adds	r3, #1
   132d4:	7103      	strb	r3, [r0, #4]
	return buf;
}
   132d6:	4770      	bx	lr

000132d8 <net_buf_simple_add>:
	return buf->data + buf->len;
   132d8:	8883      	ldrh	r3, [r0, #4]
   132da:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   132dc:	4419      	add	r1, r3
   132de:	8081      	strh	r1, [r0, #4]
	return tail;
}
   132e0:	18d0      	adds	r0, r2, r3
   132e2:	4770      	bx	lr

000132e4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   132e4:	b430      	push	{r4, r5}
   132e6:	8883      	ldrh	r3, [r0, #4]
   132e8:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   132ea:	189d      	adds	r5, r3, r2
   132ec:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   132ee:	18e0      	adds	r0, r4, r3
}
   132f0:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   132f2:	f7ed b975 	b.w	5e0 <memcpy>

000132f6 <net_buf_simple_add_u8>:
   132f6:	8883      	ldrh	r3, [r0, #4]
   132f8:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   132fa:	b510      	push	{r4, lr}
	buf->len += len;
   132fc:	1c5c      	adds	r4, r3, #1
   132fe:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   13300:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   13302:	18d0      	adds	r0, r2, r3
   13304:	bd10      	pop	{r4, pc}

00013306 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   13306:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   13308:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   1330a:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   1330c:	4411      	add	r1, r2
	buf->data -= len;
   1330e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   13310:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   13312:	4618      	mov	r0, r3
   13314:	4770      	bx	lr

00013316 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   13316:	8883      	ldrh	r3, [r0, #4]
   13318:	1a5b      	subs	r3, r3, r1
   1331a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1331c:	6803      	ldr	r3, [r0, #0]
   1331e:	4419      	add	r1, r3
   13320:	6001      	str	r1, [r0, #0]
}
   13322:	4608      	mov	r0, r1
   13324:	4770      	bx	lr

00013326 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   13326:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   13328:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1332a:	2101      	movs	r1, #1
	val = buf->data[0];
   1332c:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1332e:	f7ff fff2 	bl	13316 <net_buf_simple_pull>

	return val;
}
   13332:	4610      	mov	r0, r2
   13334:	bd08      	pop	{r3, pc}

00013336 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   13336:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   13338:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1333a:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   1333c:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1333e:	f7ff ffea 	bl	13316 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   13342:	4610      	mov	r0, r2
   13344:	bd08      	pop	{r3, pc}

00013346 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   13346:	6802      	ldr	r2, [r0, #0]
   13348:	6880      	ldr	r0, [r0, #8]
}
   1334a:	1a10      	subs	r0, r2, r0
   1334c:	4770      	bx	lr

0001334e <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   1334e:	6802      	ldr	r2, [r0, #0]
   13350:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13352:	88c3      	ldrh	r3, [r0, #6]
   13354:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   13356:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   13358:	1a9b      	subs	r3, r3, r2
}
   1335a:	1a18      	subs	r0, r3, r0
   1335c:	4770      	bx	lr
	...

00013360 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   13360:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   13362:	4b08      	ldr	r3, [pc, #32]	; (13384 <_sys_device_do_config_level+0x24>)
   13364:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   13368:	3001      	adds	r0, #1
   1336a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1336e:	4620      	mov	r0, r4
   13370:	42a8      	cmp	r0, r5
   13372:	f104 040c 	add.w	r4, r4, #12
   13376:	d300      	bcc.n	1337a <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   13378:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   1337a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1337e:	685b      	ldr	r3, [r3, #4]
   13380:	4798      	blx	r3
   13382:	e7f4      	b.n	1336e <_sys_device_do_config_level+0xe>
   13384:	00014d8c 	.word	0x00014d8c

00013388 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   13388:	4b10      	ldr	r3, [pc, #64]	; (133cc <device_get_binding+0x44>)
{
   1338a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   1338c:	4c10      	ldr	r4, [pc, #64]	; (133d0 <device_get_binding+0x48>)
{
   1338e:	4605      	mov	r5, r0
   13390:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   13392:	429c      	cmp	r4, r3
   13394:	d104      	bne.n	133a0 <device_get_binding+0x18>
   13396:	4c0e      	ldr	r4, [pc, #56]	; (133d0 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   13398:	42b4      	cmp	r4, r6
   1339a:	d109      	bne.n	133b0 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   1339c:	2400      	movs	r4, #0
   1339e:	e012      	b.n	133c6 <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   133a0:	6862      	ldr	r2, [r4, #4]
   133a2:	b11a      	cbz	r2, 133ac <device_get_binding+0x24>
   133a4:	6822      	ldr	r2, [r4, #0]
   133a6:	6812      	ldr	r2, [r2, #0]
   133a8:	42aa      	cmp	r2, r5
   133aa:	d00c      	beq.n	133c6 <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   133ac:	340c      	adds	r4, #12
   133ae:	e7f0      	b.n	13392 <device_get_binding+0xa>
		if (!info->driver_api) {
   133b0:	6863      	ldr	r3, [r4, #4]
   133b2:	b90b      	cbnz	r3, 133b8 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   133b4:	340c      	adds	r4, #12
   133b6:	e7ef      	b.n	13398 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   133b8:	6823      	ldr	r3, [r4, #0]
   133ba:	4628      	mov	r0, r5
   133bc:	6819      	ldr	r1, [r3, #0]
   133be:	f7ed f8ed 	bl	59c <strcmp>
   133c2:	2800      	cmp	r0, #0
   133c4:	d1f6      	bne.n	133b4 <device_get_binding+0x2c>
}
   133c6:	4620      	mov	r0, r4
   133c8:	bd70      	pop	{r4, r5, r6, pc}
   133ca:	bf00      	nop
   133cc:	2000d050 	.word	0x2000d050
   133d0:	2000cfe4 	.word	0x2000cfe4

000133d4 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   133d4:	1c43      	adds	r3, r0, #1
   133d6:	d003      	beq.n	133e0 <_sys_power_save_idle_exit+0xc>
   133d8:	4b03      	ldr	r3, [pc, #12]	; (133e8 <_sys_power_save_idle_exit+0x14>)
   133da:	681b      	ldr	r3, [r3, #0]
   133dc:	4298      	cmp	r0, r3
   133de:	db01      	blt.n	133e4 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   133e0:	f7ee bb0e 	b.w	1a00 <_timer_idle_exit>
   133e4:	4770      	bx	lr
   133e6:	bf00      	nop
   133e8:	2000cfd4 	.word	0x2000cfd4

000133ec <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   133ec:	4d0f      	ldr	r5, [pc, #60]	; (1342c <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   133ee:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   133f0:	4f0f      	ldr	r7, [pc, #60]	; (13430 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   133f2:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
   133f6:	f04f 0220 	mov.w	r2, #32
   133fa:	f3ef 8311 	mrs	r3, BASEPRI
   133fe:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13402:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13404:	42b3      	cmp	r3, r6
   13406:	d00a      	beq.n	1341e <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   13408:	b14b      	cbz	r3, 1341e <idle+0x32>
   1340a:	691c      	ldr	r4, [r3, #16]
   1340c:	1c63      	adds	r3, r4, #1
   1340e:	d008      	beq.n	13422 <idle+0x36>
   13410:	683b      	ldr	r3, [r7, #0]
   13412:	42a3      	cmp	r3, r4
   13414:	dd05      	ble.n	13422 <idle+0x36>
	_kernel.idle = ticks;
   13416:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
   13418:	f7ed fc8c 	bl	d34 <k_cpu_idle>
   1341c:	e7eb      	b.n	133f6 <idle+0xa>
   1341e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   13422:	4620      	mov	r0, r4
   13424:	f7ee fad8 	bl	19d8 <_timer_idle_enter>
   13428:	e7f5      	b.n	13416 <idle+0x2a>
   1342a:	bf00      	nop
   1342c:	20002a00 	.word	0x20002a00
   13430:	2000cfd4 	.word	0x2000cfd4

00013434 <k_call_stacks_analyze>:
	STACK_ANALYZE("idle     ", _idle_stack);
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);
}
#else
void k_call_stacks_analyze(void) { }
   13434:	4770      	bx	lr
	...

00013438 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   13438:	4802      	ldr	r0, [pc, #8]	; (13444 <_bss_zero+0xc>)
   1343a:	4a03      	ldr	r2, [pc, #12]	; (13448 <_bss_zero+0x10>)
   1343c:	2100      	movs	r1, #0
   1343e:	1a12      	subs	r2, r2, r0
   13440:	f7ed b8fa 	b.w	638 <memset>
   13444:	20000000 	.word	0x20000000
   13448:	200041d8 	.word	0x200041d8

0001344c <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   1344c:	4802      	ldr	r0, [pc, #8]	; (13458 <_data_copy+0xc>)
   1344e:	4a03      	ldr	r2, [pc, #12]	; (1345c <_data_copy+0x10>)
   13450:	4903      	ldr	r1, [pc, #12]	; (13460 <_data_copy+0x14>)
   13452:	1a12      	subs	r2, r2, r0
   13454:	f7ed b8c4 	b.w	5e0 <memcpy>
   13458:	2000c8e8 	.word	0x2000c8e8
   1345c:	2000d12c 	.word	0x2000d12c
   13460:	00014da8 	.word	0x00014da8

00013464 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   13464:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   13466:	2002      	movs	r0, #2
   13468:	f7ff ff7a 	bl	13360 <_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   1346c:	2003      	movs	r0, #3
   1346e:	f7ff ff77 	bl	13360 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   13472:	f000 fe39 	bl	140e8 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   13476:	f7ed fa03 	bl	880 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   1347a:	4a03      	ldr	r2, [pc, #12]	; (13488 <bg_thread_main+0x24>)
   1347c:	7a13      	ldrb	r3, [r2, #8]
   1347e:	f023 0301 	bic.w	r3, r3, #1
   13482:	7213      	strb	r3, [r2, #8]
   13484:	bd08      	pop	{r3, pc}
   13486:	bf00      	nop
   13488:	20002998 	.word	0x20002998

0001348c <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   1348c:	b580      	push	{r7, lr}
   1348e:	b086      	sub	sp, #24
   13490:	4e32      	ldr	r6, [pc, #200]	; (1355c <_Cstart+0xd0>)
   13492:	af06      	add	r7, sp, #24
	_IntLibInit();
   13494:	f7ed fad8 	bl	a48 <_IntLibInit>
   13498:	2324      	movs	r3, #36	; 0x24
   1349a:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
   1349c:	519a      	str	r2, [r3, r6]
   1349e:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   134a0:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
   134a4:	6052      	str	r2, [r2, #4]
   134a6:	d1f8      	bne.n	1349a <_Cstart+0xe>
	_ready_q.cache = _main_thread;
   134a8:	4d2d      	ldr	r5, [pc, #180]	; (13560 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
   134aa:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 13588 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
   134ae:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
   134b0:	2400      	movs	r4, #0
   134b2:	f04f 0901 	mov.w	r9, #1
   134b6:	4643      	mov	r3, r8
   134b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   134bc:	4929      	ldr	r1, [pc, #164]	; (13564 <_Cstart+0xd8>)
   134be:	f8cd 9010 	str.w	r9, [sp, #16]
   134c2:	4628      	mov	r0, r5
   134c4:	9403      	str	r4, [sp, #12]
   134c6:	9402      	str	r4, [sp, #8]
   134c8:	9401      	str	r4, [sp, #4]
   134ca:	9400      	str	r4, [sp, #0]
   134cc:	f000 fdc4 	bl	14058 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   134d0:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   134d2:	4628      	mov	r0, r5
   134d4:	f023 0304 	bic.w	r3, r3, #4
   134d8:	726b      	strb	r3, [r5, #9]
   134da:	f000 f97d 	bl	137d8 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
   134de:	230f      	movs	r3, #15
   134e0:	9303      	str	r3, [sp, #12]
   134e2:	4921      	ldr	r1, [pc, #132]	; (13568 <_Cstart+0xdc>)
   134e4:	f8cd 9010 	str.w	r9, [sp, #16]
   134e8:	9402      	str	r4, [sp, #8]
   134ea:	9401      	str	r4, [sp, #4]
   134ec:	9400      	str	r4, [sp, #0]
   134ee:	4b1f      	ldr	r3, [pc, #124]	; (1356c <_Cstart+0xe0>)
   134f0:	481f      	ldr	r0, [pc, #124]	; (13570 <_Cstart+0xe4>)
   134f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   134f6:	f000 fdaf 	bl	14058 <_setup_new_thread>
   134fa:	4b1d      	ldr	r3, [pc, #116]	; (13570 <_Cstart+0xe4>)
   134fc:	4a1c      	ldr	r2, [pc, #112]	; (13570 <_Cstart+0xe4>)
   134fe:	7a5b      	ldrb	r3, [r3, #9]
   13500:	f023 0304 	bic.w	r3, r3, #4
   13504:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
   13506:	4610      	mov	r0, r2
   13508:	f000 f966 	bl	137d8 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   1350c:	4b19      	ldr	r3, [pc, #100]	; (13574 <_Cstart+0xe8>)
   1350e:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
   13510:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   13512:	4b19      	ldr	r3, [pc, #100]	; (13578 <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13514:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13518:	4b18      	ldr	r3, [pc, #96]	; (1357c <_Cstart+0xf0>)
   1351a:	22e0      	movs	r2, #224	; 0xe0
   1351c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   13520:	77dc      	strb	r4, [r3, #31]
   13522:	761c      	strb	r4, [r3, #24]
   13524:	765c      	strb	r4, [r3, #25]
   13526:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1352a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   1352e:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   13530:	f7ed fb70 	bl	c14 <_FaultInit>
	_CpuIdleInit();
   13534:	f7ed fbf8 	bl	d28 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13538:	4620      	mov	r0, r4
   1353a:	f7ff ff11 	bl	13360 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1353e:	4648      	mov	r0, r9
   13540:	f7ff ff0e 	bl	13360 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13544:	4b0e      	ldr	r3, [pc, #56]	; (13580 <_Cstart+0xf4>)

	_current = main_thread;
   13546:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   13548:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   1354c:	4a0d      	ldr	r2, [pc, #52]	; (13584 <_Cstart+0xf8>)
   1354e:	f383 8809 	msr	PSP, r3
   13552:	2100      	movs	r1, #0
   13554:	f381 8811 	msr	BASEPRI, r1
   13558:	4640      	mov	r0, r8
   1355a:	4710      	bx	r2
   1355c:	20002a00 	.word	0x20002a00
   13560:	20002998 	.word	0x20002998
   13564:	2000b7a8 	.word	0x2000b7a8
   13568:	2000bba8 	.word	0x2000bba8
   1356c:	000133ed 	.word	0x000133ed
   13570:	20002930 	.word	0x20002930
   13574:	20002a10 	.word	0x20002a10
   13578:	2000c4e8 	.word	0x2000c4e8
   1357c:	e000ed00 	.word	0xe000ed00
   13580:	2000bba8 	.word	0x2000bba8
   13584:	00013ff1 	.word	0x00013ff1
   13588:	00013465 	.word	0x00013465

0001358c <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
   1358c:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
   1358e:	7ac4      	ldrb	r4, [r0, #11]
   13590:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
   13592:	428c      	cmp	r4, r1
   13594:	f04f 040c 	mov.w	r4, #12
   13598:	bfb6      	itet	lt
   1359a:	4361      	mullt	r1, r4
   1359c:	fb04 0101 	mlage	r1, r4, r1, r0
   135a0:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
   135a2:	2420      	movs	r4, #32
   135a4:	fb92 f4f4 	sdiv	r4, r2, r4
   135a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   135ac:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   135ae:	f002 001f 	and.w	r0, r2, #31
   135b2:	bd10      	pop	{r4, pc}

000135b4 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
   135b4:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   135b6:	ab01      	add	r3, sp, #4
   135b8:	f7ff ffe8 	bl	1358c <get_bit_ptr>

	*word |= (1<<bit);
   135bc:	9a01      	ldr	r2, [sp, #4]
   135be:	2301      	movs	r3, #1
   135c0:	fa03 f000 	lsl.w	r0, r3, r0
   135c4:	6813      	ldr	r3, [r2, #0]
   135c6:	4303      	orrs	r3, r0
   135c8:	6013      	str	r3, [r2, #0]
}
   135ca:	b003      	add	sp, #12
   135cc:	f85d fb04 	ldr.w	pc, [sp], #4

000135d0 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
   135d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135d4:	4c30      	ldr	r4, [pc, #192]	; (13698 <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   135d6:	4e31      	ldr	r6, [pc, #196]	; (1369c <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
   135d8:	270c      	movs	r7, #12
   135da:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   135de:	42b5      	cmp	r5, r6
   135e0:	d302      	bcc.n	135e8 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
   135e2:	2000      	movs	r0, #0
   135e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   135e8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   135ec:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
   135f0:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
   135f4:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   135f6:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
   135fa:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
   135fc:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
   135fe:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
   13600:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
   13604:	f814 2c06 	ldrb.w	r2, [r4, #-6]
   13608:	4291      	cmp	r1, r2
   1360a:	db07      	blt.n	1361c <init_static_pools+0x4c>
   1360c:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
   13610:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   13614:	4598      	cmp	r8, r3
   13616:	db24      	blt.n	13662 <init_static_pools+0x92>
   13618:	3418      	adds	r4, #24
   1361a:	e7de      	b.n	135da <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
   1361c:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
   13620:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
   13624:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
   13628:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   1362a:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
   1362e:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   13632:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
   13636:	bfc8      	it	gt
   13638:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
   1363a:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
   1363e:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
   13642:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
   13646:	bfca      	itet	gt
   13648:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
   1364c:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
   13650:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
   13654:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
   13658:	bfc8      	it	gt
   1365a:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
   1365e:	3101      	adds	r1, #1
   13660:	e7d0      	b.n	13604 <init_static_pools+0x34>
	return p->buf + lsz * block;
   13662:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
   13666:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
   1366a:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1366e:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
   13672:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   13676:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
   1367a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
   1367c:	689a      	ldr	r2, [r3, #8]
   1367e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
   13680:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   13682:	4628      	mov	r0, r5
   13684:	6011      	str	r1, [r2, #0]
	list->tail = node;
   13686:	6099      	str	r1, [r3, #8]
   13688:	4642      	mov	r2, r8
   1368a:	2100      	movs	r1, #0
   1368c:	f7ff ff92 	bl	135b4 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   13690:	f108 0801 	add.w	r8, r8, #1
   13694:	e7bc      	b.n	13610 <init_static_pools+0x40>
   13696:	bf00      	nop
   13698:	2000d094 	.word	0x2000d094
   1369c:	2000d084 	.word	0x2000d084

000136a0 <k_queue_init>:
	list->head = NULL;
   136a0:	2300      	movs	r3, #0
   136a2:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   136a4:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   136a6:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   136aa:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   136ac:	60c3      	str	r3, [r0, #12]
   136ae:	4770      	bx	lr

000136b0 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   136b0:	b510      	push	{r4, lr}
   136b2:	f04f 0320 	mov.w	r3, #32
   136b6:	f3ef 8411 	mrs	r4, BASEPRI
   136ba:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   136be:	b931      	cbnz	r1, 136ce <k_queue_insert+0x1e>
	node->next = list->head;
   136c0:	6803      	ldr	r3, [r0, #0]
   136c2:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   136c4:	6843      	ldr	r3, [r0, #4]
	list->head = node;
   136c6:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   136c8:	b943      	cbnz	r3, 136dc <k_queue_insert+0x2c>
		list->tail = node;
   136ca:	6042      	str	r2, [r0, #4]
   136cc:	e006      	b.n	136dc <k_queue_insert+0x2c>
	} else if (!prev->next) {
   136ce:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
   136d0:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
   136d2:	b98b      	cbnz	r3, 136f8 <k_queue_insert+0x48>
	if (!list->tail) {
   136d4:	6843      	ldr	r3, [r0, #4]
   136d6:	b96b      	cbnz	r3, 136f4 <k_queue_insert+0x44>
		list->tail = node;
   136d8:	6042      	str	r2, [r0, #4]
		list->head = node;
   136da:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   136dc:	2104      	movs	r1, #4
   136de:	3008      	adds	r0, #8
   136e0:	f001 f870 	bl	147c4 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   136e4:	b150      	cbz	r0, 136fc <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
   136e6:	f000 fa4b 	bl	13b80 <_update_time_slice_before_swap>
	return __swap(key);
   136ea:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
   136ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   136f0:	f7ed b9b6 	b.w	a60 <__swap>
		list->tail->next = node;
   136f4:	601a      	str	r2, [r3, #0]
   136f6:	e7e8      	b.n	136ca <k_queue_insert+0x1a>
		prev->next = node;
   136f8:	600a      	str	r2, [r1, #0]
   136fa:	e7ef      	b.n	136dc <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   136fc:	f384 8811 	msr	BASEPRI, r4
   13700:	bd10      	pop	{r4, pc}

00013702 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
   13702:	460a      	mov	r2, r1
   13704:	6841      	ldr	r1, [r0, #4]
   13706:	f7ff bfd3 	b.w	136b0 <k_queue_insert>

0001370a <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
   1370a:	460a      	mov	r2, r1
   1370c:	2100      	movs	r1, #0
   1370e:	f7ff bfcf 	b.w	136b0 <k_queue_insert>

00013712 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   13712:	b510      	push	{r4, lr}
	__asm__ volatile(
   13714:	f04f 0320 	mov.w	r3, #32
   13718:	f3ef 8411 	mrs	r4, BASEPRI
   1371c:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   13720:	6843      	ldr	r3, [r0, #4]
   13722:	b96b      	cbnz	r3, 13740 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
   13724:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   13726:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   13728:	2104      	movs	r1, #4
   1372a:	3008      	adds	r0, #8
   1372c:	f001 f84a 	bl	147c4 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   13730:	b140      	cbz	r0, 13744 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
   13732:	f000 fa25 	bl	13b80 <_update_time_slice_before_swap>
	return __swap(key);
   13736:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
   13738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1373c:	f7ed b990 	b.w	a60 <__swap>
		list->tail->next = (sys_snode_t *)head;
   13740:	6019      	str	r1, [r3, #0]
   13742:	e7f0      	b.n	13726 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13744:	f384 8811 	msr	BASEPRI, r4
   13748:	bd10      	pop	{r4, pc}

0001374a <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1374a:	b530      	push	{r4, r5, lr}
   1374c:	4604      	mov	r4, r0
   1374e:	b087      	sub	sp, #28
   13750:	460d      	mov	r5, r1
	__asm__ volatile(
   13752:	f04f 0220 	mov.w	r2, #32
   13756:	f3ef 8311 	mrs	r3, BASEPRI
   1375a:	f382 8811 	msr	BASEPRI, r2
   1375e:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   13760:	b152      	cbz	r2, 13778 <k_queue_get+0x2e>
	list->head = node->next;
   13762:	6811      	ldr	r1, [r2, #0]
   13764:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   13766:	6840      	ldr	r0, [r0, #4]
   13768:	4282      	cmp	r2, r0
		list->tail = list->head;
   1376a:	bf08      	it	eq
   1376c:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1376e:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   13772:	4610      	mov	r0, r2
   13774:	b007      	add	sp, #28
   13776:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
   13778:	b919      	cbnz	r1, 13782 <k_queue_get+0x38>
   1377a:	f383 8811 	msr	BASEPRI, r3
			return NULL;
   1377e:	2200      	movs	r2, #0
   13780:	e7f7      	b.n	13772 <k_queue_get+0x28>
   13782:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   13786:	2104      	movs	r1, #4
   13788:	4603      	mov	r3, r0
   1378a:	eb0d 0001 	add.w	r0, sp, r1
   1378e:	f000 ff61 	bl	14654 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
   13792:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   13796:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
   13798:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
   1379c:	2101      	movs	r1, #1
   1379e:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
   137a0:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   137a4:	f000 ff6a 	bl	1467c <k_poll>
		if (err) {
   137a8:	2800      	cmp	r0, #0
   137aa:	d1e8      	bne.n	1377e <k_queue_get+0x34>
	__asm__ volatile(
   137ac:	f04f 0320 	mov.w	r3, #32
   137b0:	f3ef 8111 	mrs	r1, BASEPRI
   137b4:	f383 8811 	msr	BASEPRI, r3
   137b8:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   137ba:	b12a      	cbz	r2, 137c8 <k_queue_get+0x7e>
	if (list->tail == node) {
   137bc:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
   137be:	6813      	ldr	r3, [r2, #0]
   137c0:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
   137c2:	4282      	cmp	r2, r0
		list->tail = list->head;
   137c4:	bf08      	it	eq
   137c6:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   137c8:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
   137cc:	2a00      	cmp	r2, #0
   137ce:	d1d0      	bne.n	13772 <k_queue_get+0x28>
   137d0:	1c6b      	adds	r3, r5, #1
   137d2:	d0de      	beq.n	13792 <k_queue_get+0x48>
   137d4:	e7d3      	b.n	1377e <k_queue_get+0x34>
	...

000137d8 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   137d8:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   137da:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
   137de:	4911      	ldr	r1, [pc, #68]	; (13824 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
   137e0:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
   137e4:	1162      	asrs	r2, r4, #5
   137e6:	3206      	adds	r2, #6
   137e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   137ec:	f004 051f 	and.w	r5, r4, #31
   137f0:	2401      	movs	r4, #1
   137f2:	40ac      	lsls	r4, r5
   137f4:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   137f6:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
   137f8:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
   137fa:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
   137fc:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   137fe:	1d1a      	adds	r2, r3, #4
   13800:	440a      	add	r2, r1
	node->prev = list->tail;
   13802:	440b      	add	r3, r1
	node->next = list;
   13804:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   13806:	689a      	ldr	r2, [r3, #8]
   13808:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   1380a:	689a      	ldr	r2, [r3, #8]
   1380c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   1380e:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   13810:	69cb      	ldr	r3, [r1, #28]
   13812:	f990 400a 	ldrsb.w	r4, [r0, #10]
   13816:	f993 200a 	ldrsb.w	r2, [r3, #10]
   1381a:	4294      	cmp	r4, r2
   1381c:	bfa8      	it	ge
   1381e:	4618      	movge	r0, r3
   13820:	61c8      	str	r0, [r1, #28]
   13822:	bd30      	pop	{r4, r5, pc}
   13824:	20002a00 	.word	0x20002a00

00013828 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13828:	7a42      	ldrb	r2, [r0, #9]
   1382a:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   1382e:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13832:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13834:	d104      	bne.n	13840 <_ready_thread+0x18>
   13836:	6a03      	ldr	r3, [r0, #32]
   13838:	3301      	adds	r3, #1
   1383a:	d101      	bne.n	13840 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   1383c:	f7ff bfcc 	b.w	137d8 <_add_thread_to_ready_q>
   13840:	4770      	bx	lr
	...

00013844 <_add_timeout>:
{
   13844:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13846:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
   13848:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1384a:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   1384c:	bb13      	cbnz	r3, 13894 <_add_timeout+0x50>
	__asm__ volatile(
   1384e:	f04f 0220 	mov.w	r2, #32
   13852:	f3ef 8411 	mrs	r4, BASEPRI
   13856:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   1385a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1385e:	610a      	str	r2, [r1, #16]
	if (thread) {
   13860:	b180      	cbz	r0, 13884 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   13862:	68ca      	ldr	r2, [r1, #12]
   13864:	b14a      	cbz	r2, 1387a <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13866:	e890 0006 	ldmia.w	r0, {r1, r2}
   1386a:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   1386c:	6801      	ldr	r1, [r0, #0]
   1386e:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   13870:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   13872:	61c3      	str	r3, [r0, #28]
   13874:	f022 0202 	bic.w	r2, r2, #2
   13878:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
   1387a:	f7ff ffd5 	bl	13828 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1387e:	f384 8811 	msr	BASEPRI, r4
   13882:	bd70      	pop	{r4, r5, r6, pc}
   13884:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   13888:	694b      	ldr	r3, [r1, #20]
   1388a:	b32b      	cbz	r3, 138d8 <_add_timeout+0x94>
			timeout->func(timeout);
   1388c:	4608      	mov	r0, r1
}
   1388e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   13892:	4718      	bx	r3
	return list->head == list;
   13894:	4a11      	ldr	r2, [pc, #68]	; (138dc <_add_timeout+0x98>)
   13896:	4610      	mov	r0, r2
   13898:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1389c:	4283      	cmp	r3, r0
   1389e:	d10c      	bne.n	138ba <_add_timeout+0x76>
	node->next = list;
   138a0:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   138a2:	6953      	ldr	r3, [r2, #20]
   138a4:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   138a6:	6953      	ldr	r3, [r2, #20]
   138a8:	6019      	str	r1, [r3, #0]
	list->tail = node;
   138aa:	6151      	str	r1, [r2, #20]
   138ac:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   138ae:	1b64      	subs	r4, r4, r5
   138b0:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   138b2:	6954      	ldr	r4, [r2, #20]
   138b4:	42a3      	cmp	r3, r4
   138b6:	d0f3      	beq.n	138a0 <_add_timeout+0x5c>
   138b8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   138ba:	2b00      	cmp	r3, #0
   138bc:	d0f0      	beq.n	138a0 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   138be:	690c      	ldr	r4, [r1, #16]
   138c0:	691d      	ldr	r5, [r3, #16]
   138c2:	42ac      	cmp	r4, r5
   138c4:	dcf3      	bgt.n	138ae <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   138c6:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   138c8:	1b2c      	subs	r4, r5, r4
   138ca:	611c      	str	r4, [r3, #16]
   138cc:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   138ce:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   138d0:	685a      	ldr	r2, [r3, #4]
   138d2:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   138d4:	6059      	str	r1, [r3, #4]
   138d6:	bd70      	pop	{r4, r5, r6, pc}
   138d8:	bd70      	pop	{r4, r5, r6, pc}
   138da:	bf00      	nop
   138dc:	20002a00 	.word	0x20002a00

000138e0 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
   138e0:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   138e4:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
   138e6:	f990 200a 	ldrsb.w	r2, [r0, #10]
   138ea:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   138ec:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
   138ee:	3214      	adds	r2, #20
   138f0:	604b      	str	r3, [r1, #4]
   138f2:	4b14      	ldr	r3, [pc, #80]	; (13944 <_remove_thread_from_ready_q+0x64>)
   138f4:	00d2      	lsls	r2, r2, #3
   138f6:	1d11      	adds	r1, r2, #4
	return list->head == list;
   138f8:	441a      	add	r2, r3
   138fa:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   138fc:	6852      	ldr	r2, [r2, #4]
   138fe:	428a      	cmp	r2, r1
   13900:	d10f      	bne.n	13922 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
   13902:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
   13906:	3110      	adds	r1, #16
   13908:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
   1390a:	3206      	adds	r2, #6
   1390c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   13910:	2401      	movs	r4, #1
   13912:	f001 011f 	and.w	r1, r1, #31
   13916:	fa04 f101 	lsl.w	r1, r4, r1
   1391a:	6894      	ldr	r4, [r2, #8]
   1391c:	ea24 0401 	bic.w	r4, r4, r1
   13920:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
   13922:	69da      	ldr	r2, [r3, #28]
   13924:	4290      	cmp	r0, r2
   13926:	d10b      	bne.n	13940 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
   13928:	6a19      	ldr	r1, [r3, #32]
   1392a:	fa91 f2a1 	rbit	r2, r1
   1392e:	2900      	cmp	r1, #0
   13930:	fab2 f282 	clz	r2, r2
   13934:	bf08      	it	eq
   13936:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1393a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1393e:	6a52      	ldr	r2, [r2, #36]	; 0x24
   13940:	61da      	str	r2, [r3, #28]
   13942:	bd10      	pop	{r4, pc}
   13944:	20002a00 	.word	0x20002a00

00013948 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   13948:	b430      	push	{r4, r5}
   1394a:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   1394c:	42a1      	cmp	r1, r4
   1394e:	bf08      	it	eq
   13950:	2400      	moveq	r4, #0
   13952:	b314      	cbz	r4, 1399a <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   13954:	f990 500a 	ldrsb.w	r5, [r0, #10]
   13958:	f994 300a 	ldrsb.w	r3, [r4, #10]
   1395c:	429d      	cmp	r5, r3
   1395e:	da16      	bge.n	1398e <_pend_thread+0x46>
		node->prev = insert_point->prev;
   13960:	6863      	ldr	r3, [r4, #4]
   13962:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
   13964:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
   13966:	6863      	ldr	r3, [r4, #4]
   13968:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
   1396a:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   1396c:	7a43      	ldrb	r3, [r0, #9]
   1396e:	f043 0302 	orr.w	r3, r3, #2
   13972:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   13974:	1c53      	adds	r3, r2, #1
   13976:	d017      	beq.n	139a8 <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13978:	3209      	adds	r2, #9
   1397a:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   1397c:	bc30      	pop	{r4, r5}
   1397e:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13982:	460a      	mov	r2, r1
   13984:	3301      	adds	r3, #1
   13986:	f100 0110 	add.w	r1, r0, #16
   1398a:	f7ff bf5b 	b.w	13844 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   1398e:	684b      	ldr	r3, [r1, #4]
   13990:	429c      	cmp	r4, r3
   13992:	d002      	beq.n	1399a <_pend_thread+0x52>
   13994:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   13996:	2c00      	cmp	r4, #0
   13998:	d1db      	bne.n	13952 <_pend_thread+0xa>
	node->next = list;
   1399a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   1399c:	684b      	ldr	r3, [r1, #4]
   1399e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   139a0:	684b      	ldr	r3, [r1, #4]
   139a2:	6018      	str	r0, [r3, #0]
	list->tail = node;
   139a4:	6048      	str	r0, [r1, #4]
   139a6:	e7e1      	b.n	1396c <_pend_thread+0x24>
}
   139a8:	bc30      	pop	{r4, r5}
   139aa:	4770      	bx	lr

000139ac <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   139ac:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
   139ae:	4c06      	ldr	r4, [pc, #24]	; (139c8 <_pend_current_thread+0x1c>)
{
   139b0:	460e      	mov	r6, r1
   139b2:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
   139b4:	68a0      	ldr	r0, [r4, #8]
   139b6:	f7ff ff93 	bl	138e0 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   139ba:	4632      	mov	r2, r6
   139bc:	4629      	mov	r1, r5
   139be:	68a0      	ldr	r0, [r4, #8]
}
   139c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
   139c4:	f7ff bfc0 	b.w	13948 <_pend_thread>
   139c8:	20002a00 	.word	0x20002a00

000139cc <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   139cc:	4a09      	ldr	r2, [pc, #36]	; (139f4 <__must_switch_threads+0x28>)
   139ce:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   139d0:	6892      	ldr	r2, [r2, #8]
   139d2:	2900      	cmp	r1, #0
   139d4:	fa91 f3a1 	rbit	r3, r1
   139d8:	f992 000a 	ldrsb.w	r0, [r2, #10]
   139dc:	fab3 f383 	clz	r3, r3
   139e0:	bf08      	it	eq
   139e2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   139e6:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
   139e8:	4298      	cmp	r0, r3
   139ea:	bfd4      	ite	le
   139ec:	2000      	movle	r0, #0
   139ee:	2001      	movgt	r0, #1
   139f0:	4770      	bx	lr
   139f2:	bf00      	nop
   139f4:	20002a00 	.word	0x20002a00

000139f8 <_reschedule_threads>:
{
   139f8:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
   139fa:	4b0a      	ldr	r3, [pc, #40]	; (13a24 <_reschedule_threads+0x2c>)
   139fc:	689b      	ldr	r3, [r3, #8]
   139fe:	895b      	ldrh	r3, [r3, #10]
   13a00:	2b7f      	cmp	r3, #127	; 0x7f
   13a02:	4604      	mov	r4, r0
   13a04:	d802      	bhi.n	13a0c <_reschedule_threads+0x14>
   13a06:	f7ff ffe1 	bl	139cc <__must_switch_threads>
   13a0a:	b910      	cbnz	r0, 13a12 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13a0c:	f384 8811 	msr	BASEPRI, r4
   13a10:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   13a12:	4b05      	ldr	r3, [pc, #20]	; (13a28 <_reschedule_threads+0x30>)
   13a14:	2200      	movs	r2, #0
   13a16:	4620      	mov	r0, r4
}
   13a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   13a1c:	601a      	str	r2, [r3, #0]
   13a1e:	f7ed b81f 	b.w	a60 <__swap>
   13a22:	bf00      	nop
   13a24:	20002a00 	.word	0x20002a00
   13a28:	20004154 	.word	0x20004154

00013a2c <k_sched_unlock>:
	__asm__ volatile(
   13a2c:	f04f 0320 	mov.w	r3, #32
   13a30:	f3ef 8011 	mrs	r0, BASEPRI
   13a34:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   13a38:	4b03      	ldr	r3, [pc, #12]	; (13a48 <k_sched_unlock+0x1c>)
   13a3a:	689a      	ldr	r2, [r3, #8]
   13a3c:	7ad3      	ldrb	r3, [r2, #11]
   13a3e:	3301      	adds	r3, #1
   13a40:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   13a42:	f7ff bfd9 	b.w	139f8 <_reschedule_threads>
   13a46:	bf00      	nop
   13a48:	20002a00 	.word	0x20002a00

00013a4c <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
   13a4c:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   13a50:	4a12      	ldr	r2, [pc, #72]	; (13a9c <_move_thread_to_end_of_prio_q+0x50>)
{
   13a52:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
   13a54:	3314      	adds	r3, #20
   13a56:	00db      	lsls	r3, r3, #3
   13a58:	1d19      	adds	r1, r3, #4
   13a5a:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   13a5c:	684c      	ldr	r4, [r1, #4]
   13a5e:	42a0      	cmp	r0, r4
   13a60:	d01b      	beq.n	13a9a <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
   13a62:	6844      	ldr	r4, [r0, #4]
   13a64:	6805      	ldr	r5, [r0, #0]
   13a66:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
   13a68:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
   13a6a:	4413      	add	r3, r2
	node->next->prev = node->prev;
   13a6c:	606c      	str	r4, [r5, #4]
	node->next = list;
   13a6e:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   13a70:	6899      	ldr	r1, [r3, #8]
   13a72:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   13a74:	6899      	ldr	r1, [r3, #8]
   13a76:	6008      	str	r0, [r1, #0]
	list->tail = node;
   13a78:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
   13a7a:	69d3      	ldr	r3, [r2, #28]
   13a7c:	4298      	cmp	r0, r3
   13a7e:	d10b      	bne.n	13a98 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
   13a80:	6a11      	ldr	r1, [r2, #32]
   13a82:	fa91 f3a1 	rbit	r3, r1
   13a86:	2900      	cmp	r1, #0
   13a88:	fab3 f383 	clz	r3, r3
   13a8c:	bf08      	it	eq
   13a8e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13a92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13a98:	61d3      	str	r3, [r2, #28]
   13a9a:	bd30      	pop	{r4, r5, pc}
   13a9c:	20002a00 	.word	0x20002a00

00013aa0 <_impl_k_yield>:
{
   13aa0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13aa2:	f04f 0320 	mov.w	r3, #32
   13aa6:	f3ef 8511 	mrs	r5, BASEPRI
   13aaa:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   13aae:	4c09      	ldr	r4, [pc, #36]	; (13ad4 <_impl_k_yield+0x34>)
   13ab0:	68a0      	ldr	r0, [r4, #8]
   13ab2:	f7ff ffcb 	bl	13a4c <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   13ab6:	68a2      	ldr	r2, [r4, #8]
   13ab8:	69e3      	ldr	r3, [r4, #28]
   13aba:	429a      	cmp	r2, r3
   13abc:	d102      	bne.n	13ac4 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13abe:	f385 8811 	msr	BASEPRI, r5
   13ac2:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
   13ac4:	4b04      	ldr	r3, [pc, #16]	; (13ad8 <_impl_k_yield+0x38>)
   13ac6:	2200      	movs	r2, #0
   13ac8:	601a      	str	r2, [r3, #0]
   13aca:	4628      	mov	r0, r5
}
   13acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13ad0:	f7ec bfc6 	b.w	a60 <__swap>
   13ad4:	20002a00 	.word	0x20002a00
   13ad8:	20004154 	.word	0x20004154

00013adc <_impl_k_sleep>:
{
   13adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
   13ade:	b918      	cbnz	r0, 13ae8 <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   13ae0:	f7ff ffde 	bl	13aa0 <_impl_k_yield>
}
   13ae4:	b003      	add	sp, #12
   13ae6:	bd30      	pop	{r4, r5, pc}
   13ae8:	230a      	movs	r3, #10
   13aea:	3009      	adds	r0, #9
   13aec:	fbb0 f0f3 	udiv	r0, r0, r3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   13af0:	3001      	adds	r0, #1
   13af2:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   13af4:	f04f 0320 	mov.w	r3, #32
   13af8:	f3ef 8511 	mrs	r5, BASEPRI
   13afc:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   13b00:	4c08      	ldr	r4, [pc, #32]	; (13b24 <_impl_k_sleep+0x48>)
   13b02:	68a0      	ldr	r0, [r4, #8]
   13b04:	f7ff feec 	bl	138e0 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   13b08:	68a0      	ldr	r0, [r4, #8]
   13b0a:	9b01      	ldr	r3, [sp, #4]
   13b0c:	f100 0110 	add.w	r1, r0, #16
   13b10:	2200      	movs	r2, #0
   13b12:	f7ff fe97 	bl	13844 <_add_timeout>
	_time_slice_elapsed = 0;
   13b16:	4b04      	ldr	r3, [pc, #16]	; (13b28 <_impl_k_sleep+0x4c>)
   13b18:	2200      	movs	r2, #0
   13b1a:	4628      	mov	r0, r5
   13b1c:	601a      	str	r2, [r3, #0]
   13b1e:	f7ec ff9f 	bl	a60 <__swap>
   13b22:	e7df      	b.n	13ae4 <_impl_k_sleep+0x8>
   13b24:	20002a00 	.word	0x20002a00
   13b28:	20004154 	.word	0x20004154

00013b2c <_impl_k_current_get>:
}
   13b2c:	4b01      	ldr	r3, [pc, #4]	; (13b34 <_impl_k_current_get+0x8>)
   13b2e:	6898      	ldr	r0, [r3, #8]
   13b30:	4770      	bx	lr
   13b32:	bf00      	nop
   13b34:	20002a00 	.word	0x20002a00

00013b38 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   13b38:	4b0d      	ldr	r3, [pc, #52]	; (13b70 <_is_thread_time_slicing+0x38>)
   13b3a:	681b      	ldr	r3, [r3, #0]
   13b3c:	2b00      	cmp	r3, #0
   13b3e:	dd14      	ble.n	13b6a <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   13b40:	4b0c      	ldr	r3, [pc, #48]	; (13b74 <_is_thread_time_slicing+0x3c>)
   13b42:	681b      	ldr	r3, [r3, #0]
   13b44:	4298      	cmp	r0, r3
   13b46:	d010      	beq.n	13b6a <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   13b48:	4a0b      	ldr	r2, [pc, #44]	; (13b78 <_is_thread_time_slicing+0x40>)
   13b4a:	f990 300a 	ldrsb.w	r3, [r0, #10]
   13b4e:	6812      	ldr	r2, [r2, #0]
   13b50:	4293      	cmp	r3, r2
   13b52:	db0a      	blt.n	13b6a <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
   13b54:	f103 0214 	add.w	r2, r3, #20
   13b58:	4b08      	ldr	r3, [pc, #32]	; (13b7c <_is_thread_time_slicing+0x44>)
   13b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   13b5e:	6858      	ldr	r0, [r3, #4]
   13b60:	689b      	ldr	r3, [r3, #8]
   13b62:	1ac0      	subs	r0, r0, r3
   13b64:	bf18      	it	ne
   13b66:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
   13b68:	4770      	bx	lr
		return 0;
   13b6a:	2000      	movs	r0, #0
}
   13b6c:	4770      	bx	lr
   13b6e:	bf00      	nop
   13b70:	20002b24 	.word	0x20002b24
   13b74:	00014da4 	.word	0x00014da4
   13b78:	20002b28 	.word	0x20002b28
   13b7c:	20002a00 	.word	0x20002a00

00013b80 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   13b80:	4b01      	ldr	r3, [pc, #4]	; (13b88 <_update_time_slice_before_swap+0x8>)
   13b82:	2200      	movs	r2, #0
   13b84:	601a      	str	r2, [r3, #0]
   13b86:	4770      	bx	lr
   13b88:	20004154 	.word	0x20004154

00013b8c <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   13b8c:	4a10      	ldr	r2, [pc, #64]	; (13bd0 <_unpend_first_thread+0x44>)
   13b8e:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   13b90:	4603      	mov	r3, r0
   13b92:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
   13b94:	b16a      	cbz	r2, 13bb2 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b96:	4283      	cmp	r3, r0
   13b98:	bf08      	it	eq
   13b9a:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   13b9c:	b908      	cbnz	r0, 13ba2 <_unpend_first_thread+0x16>
   13b9e:	2000      	movs	r0, #0
   13ba0:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
   13ba2:	6a02      	ldr	r2, [r0, #32]
   13ba4:	3202      	adds	r2, #2
   13ba6:	d107      	bne.n	13bb8 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
   13ba8:	685a      	ldr	r2, [r3, #4]
   13baa:	4290      	cmp	r0, r2
   13bac:	d0f7      	beq.n	13b9e <_unpend_first_thread+0x12>
   13bae:	6800      	ldr	r0, [r0, #0]
   13bb0:	e7f4      	b.n	13b9c <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13bb2:	4283      	cmp	r3, r0
   13bb4:	d00a      	beq.n	13bcc <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   13bb6:	b150      	cbz	r0, 13bce <_unpend_first_thread+0x42>
	node->prev->next = node->next;
   13bb8:	e890 000c 	ldmia.w	r0, {r2, r3}
   13bbc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13bbe:	6802      	ldr	r2, [r0, #0]
   13bc0:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   13bc2:	7a43      	ldrb	r3, [r0, #9]
   13bc4:	f023 0302 	bic.w	r3, r3, #2
   13bc8:	7243      	strb	r3, [r0, #9]
   13bca:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13bcc:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
   13bce:	4770      	bx	lr
   13bd0:	20004150 	.word	0x20004150

00013bd4 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   13bd4:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   13bd8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   13bda:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   13bdc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13bde:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   13be0:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   13be2:	6143      	str	r3, [r0, #20]
   13be4:	4770      	bx	lr
	...

00013be8 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   13be8:	b570      	push	{r4, r5, r6, lr}
   13bea:	4605      	mov	r5, r0
   13bec:	f04f 0320 	mov.w	r3, #32
   13bf0:	f3ef 8611 	mrs	r6, BASEPRI
   13bf4:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   13bf8:	f7ff ffc8 	bl	13b8c <_unpend_first_thread>
	if (!thread) {
   13bfc:	4604      	mov	r4, r0
   13bfe:	b998      	cbnz	r0, 13c28 <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
   13c00:	68ab      	ldr	r3, [r5, #8]
   13c02:	68ea      	ldr	r2, [r5, #12]
   13c04:	429a      	cmp	r2, r3
   13c06:	bf18      	it	ne
   13c08:	3301      	addne	r3, #1
   13c0a:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   13c0c:	2102      	movs	r1, #2
   13c0e:	f105 0010 	add.w	r0, r5, #16
   13c12:	f000 fdd7 	bl	147c4 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   13c16:	2800      	cmp	r0, #0
   13c18:	d03b      	beq.n	13c92 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
   13c1a:	f7ff ffb1 	bl	13b80 <_update_time_slice_before_swap>
	return __swap(key);
   13c1e:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   13c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13c24:	f7ec bf1c 	b.w	a60 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13c28:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
   13c2a:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13c2e:	1c48      	adds	r0, r1, #1
   13c30:	d00f      	beq.n	13c52 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13c32:	4b1b      	ldr	r3, [pc, #108]	; (13ca0 <_impl_k_sem_give+0xb8>)
   13c34:	695b      	ldr	r3, [r3, #20]
   13c36:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   13c38:	bf1f      	itttt	ne
   13c3a:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13c3c:	6913      	ldrne	r3, [r2, #16]
   13c3e:	185b      	addne	r3, r3, r1
   13c40:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   13c42:	6963      	ldr	r3, [r4, #20]
   13c44:	6922      	ldr	r2, [r4, #16]
   13c46:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13c48:	6922      	ldr	r2, [r4, #16]
   13c4a:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c50:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13c52:	7a63      	ldrb	r3, [r4, #9]
   13c54:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13c58:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13c5c:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13c5e:	d102      	bne.n	13c66 <_impl_k_sem_give+0x7e>
   13c60:	6a23      	ldr	r3, [r4, #32]
   13c62:	3301      	adds	r3, #1
   13c64:	d018      	beq.n	13c98 <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   13c66:	2300      	movs	r3, #0
   13c68:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13c6a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   13c6e:	2b0d      	cmp	r3, #13
   13c70:	d80f      	bhi.n	13c92 <_impl_k_sem_give+0xaa>
   13c72:	b11b      	cbz	r3, 13c7c <_impl_k_sem_give+0x94>
   13c74:	4b0b      	ldr	r3, [pc, #44]	; (13ca4 <_impl_k_sem_give+0xbc>)
   13c76:	685b      	ldr	r3, [r3, #4]
   13c78:	051b      	lsls	r3, r3, #20
   13c7a:	d50a      	bpl.n	13c92 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
   13c7c:	4b08      	ldr	r3, [pc, #32]	; (13ca0 <_impl_k_sem_give+0xb8>)
   13c7e:	689b      	ldr	r3, [r3, #8]
   13c80:	895b      	ldrh	r3, [r3, #10]
   13c82:	2b7f      	cmp	r3, #127	; 0x7f
   13c84:	d805      	bhi.n	13c92 <_impl_k_sem_give+0xaa>
   13c86:	f7ff fea1 	bl	139cc <__must_switch_threads>
   13c8a:	3000      	adds	r0, #0
   13c8c:	bf18      	it	ne
   13c8e:	2001      	movne	r0, #1
   13c90:	e7c1      	b.n	13c16 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13c92:	f386 8811 	msr	BASEPRI, r6
   13c96:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   13c98:	4620      	mov	r0, r4
   13c9a:	f7ff fd9d 	bl	137d8 <_add_thread_to_ready_q>
   13c9e:	e7e2      	b.n	13c66 <_impl_k_sem_give+0x7e>
   13ca0:	20002a00 	.word	0x20002a00
   13ca4:	e000ed00 	.word	0xe000ed00

00013ca8 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   13ca8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13caa:	f04f 0320 	mov.w	r3, #32
   13cae:	f3ef 8411 	mrs	r4, BASEPRI
   13cb2:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   13cb6:	6883      	ldr	r3, [r0, #8]
   13cb8:	b12b      	cbz	r3, 13cc6 <_impl_k_sem_take+0x1e>
		sem->count--;
   13cba:	3b01      	subs	r3, #1
   13cbc:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13cbe:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   13cc2:	2000      	movs	r0, #0
   13cc4:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
   13cc6:	b921      	cbnz	r1, 13cd2 <_impl_k_sem_take+0x2a>
   13cc8:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   13ccc:	f06f 000f 	mvn.w	r0, #15
   13cd0:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
   13cd2:	f7ff fe6b 	bl	139ac <_pend_current_thread>
	_update_time_slice_before_swap();
   13cd6:	f7ff ff53 	bl	13b80 <_update_time_slice_before_swap>
	return __swap(key);
   13cda:	4620      	mov	r0, r4

	return _Swap(key);
}
   13cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13ce0:	f7ec bebe 	b.w	a60 <__swap>

00013ce4 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   13ce4:	4b03      	ldr	r3, [pc, #12]	; (13cf4 <_impl_k_uptime_get_32+0x10>)
   13ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   13cea:	230a      	movs	r3, #10
   13cec:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   13cf0:	4770      	bx	lr
   13cf2:	bf00      	nop
   13cf4:	20004158 	.word	0x20004158

00013cf8 <_tick_get>:
	__asm__ volatile(
   13cf8:	f04f 0220 	mov.w	r2, #32
   13cfc:	f3ef 8311 	mrs	r3, BASEPRI
   13d00:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   13d04:	4a02      	ldr	r2, [pc, #8]	; (13d10 <_tick_get+0x18>)
   13d06:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13d0a:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   13d0e:	4770      	bx	lr
   13d10:	20004158 	.word	0x20004158

00013d14 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   13d14:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   13d16:	f7ff ffef 	bl	13cf8 <_tick_get>
   13d1a:	240a      	movs	r4, #10
   13d1c:	fba0 2304 	umull	r2, r3, r0, r4
   13d20:	fb04 3301 	mla	r3, r4, r1, r3
}
   13d24:	4610      	mov	r0, r2
   13d26:	4619      	mov	r1, r3
   13d28:	bd10      	pop	{r4, pc}
	...

00013d2c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   13d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d30:	4607      	mov	r7, r0
	__asm__ volatile(
   13d32:	f04f 0320 	mov.w	r3, #32
   13d36:	f3ef 8011 	mrs	r0, BASEPRI
   13d3a:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   13d3e:	4963      	ldr	r1, [pc, #396]	; (13ecc <_nano_sys_clock_tick_announce+0x1a0>)
   13d40:	e9d1 4500 	ldrd	r4, r5, [r1]
   13d44:	19e2      	adds	r2, r4, r7
   13d46:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   13d4a:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13d4e:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   13d52:	466e      	mov	r6, sp
   13d54:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   13d58:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   13d5c:	f04f 0320 	mov.w	r3, #32
   13d60:	f3ef 8011 	mrs	r0, BASEPRI
   13d64:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13d68:	4c59      	ldr	r4, [pc, #356]	; (13ed0 <_nano_sys_clock_tick_announce+0x1a4>)
   13d6a:	4621      	mov	r1, r4
   13d6c:	4602      	mov	r2, r0
   13d6e:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13d72:	428b      	cmp	r3, r1
   13d74:	d000      	beq.n	13d78 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
   13d76:	b9fb      	cbnz	r3, 13db8 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13d78:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   13d7c:	68a0      	ldr	r0, [r4, #8]
   13d7e:	f7ff fedb 	bl	13b38 <_is_thread_time_slicing>
   13d82:	b1b0      	cbz	r0, 13db2 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13d84:	4a53      	ldr	r2, [pc, #332]	; (13ed4 <_nano_sys_clock_tick_announce+0x1a8>)
   13d86:	6811      	ldr	r1, [r2, #0]
   13d88:	230a      	movs	r3, #10
   13d8a:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   13d8e:	4b52      	ldr	r3, [pc, #328]	; (13ed8 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   13d90:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   13d92:	681b      	ldr	r3, [r3, #0]
   13d94:	429f      	cmp	r7, r3
   13d96:	db0c      	blt.n	13db2 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
   13d98:	2300      	movs	r3, #0
   13d9a:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   13d9c:	f04f 0320 	mov.w	r3, #32
   13da0:	f3ef 8511 	mrs	r5, BASEPRI
   13da4:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   13da8:	68a0      	ldr	r0, [r4, #8]
   13daa:	f7ff fe4f 	bl	13a4c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13dae:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   13db2:	b003      	add	sp, #12
   13db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   13db8:	4d48      	ldr	r5, [pc, #288]	; (13edc <_nano_sys_clock_tick_announce+0x1b0>)
   13dba:	2101      	movs	r1, #1
   13dbc:	6029      	str	r1, [r5, #0]
   13dbe:	46ab      	mov	fp, r5
   13dc0:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
   13dc2:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
   13dc6:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   13dca:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   13dcc:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   13dce:	bfaa      	itet	ge
   13dd0:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   13dd4:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   13dd8:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   13ddc:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   13dde:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
   13de0:	691d      	ldr	r5, [r3, #16]
   13de2:	4298      	cmp	r0, r3
   13de4:	bf14      	ite	ne
   13de6:	6818      	ldrne	r0, [r3, #0]
   13de8:	2000      	moveq	r0, #0
   13dea:	b9d5      	cbnz	r5, 13e22 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
   13dec:	e893 0220 	ldmia.w	r3, {r5, r9}
   13df0:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   13df4:	681d      	ldr	r5, [r3, #0]
   13df6:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   13dfa:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
   13dfc:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   13e00:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
   13e02:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
   13e04:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   13e06:	f8c3 c010 	str.w	ip, [r3, #16]
   13e0a:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   13e0e:	f04f 0320 	mov.w	r3, #32
   13e12:	f3ef 8211 	mrs	r2, BASEPRI
   13e16:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   13e1a:	4603      	mov	r3, r0
   13e1c:	2800      	cmp	r0, #0
   13e1e:	d1d4      	bne.n	13dca <_nano_sys_clock_tick_announce+0x9e>
   13e20:	e001      	b.n	13e26 <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
   13e22:	2900      	cmp	r1, #0
   13e24:	dcf1      	bgt.n	13e0a <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e26:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   13e2a:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13e2c:	42b0      	cmp	r0, r6
   13e2e:	d103      	bne.n	13e38 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
   13e30:	2300      	movs	r3, #0
   13e32:	f8cb 3000 	str.w	r3, [fp]
   13e36:	e7a1      	b.n	13d7c <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13e38:	2800      	cmp	r0, #0
   13e3a:	d0f9      	beq.n	13e30 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   13e3c:	9b01      	ldr	r3, [sp, #4]
   13e3e:	4298      	cmp	r0, r3
   13e40:	d101      	bne.n	13e46 <_nano_sys_clock_tick_announce+0x11a>
   13e42:	2600      	movs	r6, #0
   13e44:	e000      	b.n	13e48 <_nano_sys_clock_tick_announce+0x11c>
   13e46:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13e48:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   13e4c:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
   13e50:	e890 000c 	ldmia.w	r0, {r2, r3}
   13e54:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13e56:	6802      	ldr	r2, [r0, #0]
   13e58:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   13e5a:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
   13e5c:	f04f 0220 	mov.w	r2, #32
   13e60:	f3ef 8a11 	mrs	sl, BASEPRI
   13e64:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   13e68:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
   13e6c:	b1fb      	cbz	r3, 13eae <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
   13e6e:	68c2      	ldr	r2, [r0, #12]
   13e70:	b152      	cbz	r2, 13e88 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
   13e72:	6859      	ldr	r1, [r3, #4]
   13e74:	681a      	ldr	r2, [r3, #0]
   13e76:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   13e78:	681a      	ldr	r2, [r3, #0]
   13e7a:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   13e7c:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   13e7e:	f8c3 901c 	str.w	r9, [r3, #28]
   13e82:	f022 0202 	bic.w	r2, r2, #2
   13e86:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13e88:	7a5a      	ldrb	r2, [r3, #9]
   13e8a:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   13e8e:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13e92:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   13e94:	d102      	bne.n	13e9c <_nano_sys_clock_tick_announce+0x170>
   13e96:	6a1a      	ldr	r2, [r3, #32]
   13e98:	3201      	adds	r2, #1
   13e9a:	d013      	beq.n	13ec4 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13e9c:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13ea0:	2e00      	cmp	r6, #0
   13ea2:	d0c5      	beq.n	13e30 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   13ea4:	9b01      	ldr	r3, [sp, #4]
   13ea6:	42b3      	cmp	r3, r6
   13ea8:	d108      	bne.n	13ebc <_nano_sys_clock_tick_announce+0x190>
   13eaa:	2300      	movs	r3, #0
   13eac:	e007      	b.n	13ebe <_nano_sys_clock_tick_announce+0x192>
   13eae:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
   13eb2:	6943      	ldr	r3, [r0, #20]
   13eb4:	2b00      	cmp	r3, #0
   13eb6:	d0f3      	beq.n	13ea0 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
   13eb8:	4798      	blx	r3
   13eba:	e7f1      	b.n	13ea0 <_nano_sys_clock_tick_announce+0x174>
   13ebc:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   13ebe:	4630      	mov	r0, r6
   13ec0:	461e      	mov	r6, r3
   13ec2:	e7c5      	b.n	13e50 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
   13ec4:	4618      	mov	r0, r3
   13ec6:	f7ff fc87 	bl	137d8 <_add_thread_to_ready_q>
   13eca:	e7e7      	b.n	13e9c <_nano_sys_clock_tick_announce+0x170>
   13ecc:	20004158 	.word	0x20004158
   13ed0:	20002a00 	.word	0x20002a00
   13ed4:	20004154 	.word	0x20004154
   13ed8:	20002b24 	.word	0x20002b24
   13edc:	20004150 	.word	0x20004150

00013ee0 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   13ee0:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   13ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13eea:	4903      	ldr	r1, [pc, #12]	; (13ef8 <k_sys_work_q_init+0x18>)
   13eec:	4803      	ldr	r0, [pc, #12]	; (13efc <k_sys_work_q_init+0x1c>)
   13eee:	f000 f98d 	bl	1420c <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   13ef2:	2000      	movs	r0, #0
   13ef4:	bd08      	pop	{r3, pc}
   13ef6:	bf00      	nop
   13ef8:	2000c4e8 	.word	0x2000c4e8
   13efc:	20004160 	.word	0x20004160

00013f00 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
   13f00:	7a43      	ldrb	r3, [r0, #9]
   13f02:	06da      	lsls	r2, r3, #27
   13f04:	d104      	bne.n	13f10 <_is_thread_ready+0x10>
   13f06:	6a00      	ldr	r0, [r0, #32]
   13f08:	1c43      	adds	r3, r0, #1
   13f0a:	4258      	negs	r0, r3
   13f0c:	4158      	adcs	r0, r3
   13f0e:	4770      	bx	lr
   13f10:	2000      	movs	r0, #0
}
   13f12:	4770      	bx	lr

00013f14 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   13f14:	6903      	ldr	r3, [r0, #16]
   13f16:	1c5a      	adds	r2, r3, #1
   13f18:	d011      	beq.n	13f3e <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   13f1a:	4a0a      	ldr	r2, [pc, #40]	; (13f44 <_abort_timeout+0x30>)
   13f1c:	6952      	ldr	r2, [r2, #20]
   13f1e:	4290      	cmp	r0, r2
   13f20:	bf1f      	itttt	ne
   13f22:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   13f24:	690a      	ldrne	r2, [r1, #16]
   13f26:	189b      	addne	r3, r3, r2
   13f28:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   13f2a:	e890 000c 	ldmia.w	r0, {r2, r3}
   13f2e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   13f30:	6802      	ldr	r2, [r0, #0]
   13f32:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   13f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f38:	6103      	str	r3, [r0, #16]
	return 0;
   13f3a:	2000      	movs	r0, #0
   13f3c:	4770      	bx	lr
		return _INACTIVE;
   13f3e:	4618      	mov	r0, r3
}
   13f40:	4770      	bx	lr
   13f42:	bf00      	nop
   13f44:	20002a00 	.word	0x20002a00

00013f48 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   13f48:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   13f4a:	f04f 0320 	mov.w	r3, #32
   13f4e:	f3ef 8611 	mrs	r6, BASEPRI
   13f52:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   13f56:	4a19      	ldr	r2, [pc, #100]	; (13fbc <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
   13f58:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   13f5a:	230a      	movs	r3, #10
   13f5c:	3109      	adds	r1, #9
   13f5e:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   13f62:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   13f64:	6201      	str	r1, [r0, #32]
   13f66:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   13f68:	2300      	movs	r3, #0
   13f6a:	61c3      	str	r3, [r0, #28]
   13f6c:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f70:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   13f72:	f100 0510 	add.w	r5, r0, #16
   13f76:	d108      	bne.n	13f8a <schedule_new_thread.part.13+0x42>
	node->next = list;
   13f78:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
   13f7a:	6953      	ldr	r3, [r2, #20]
   13f7c:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
   13f7e:	6953      	ldr	r3, [r2, #20]
   13f80:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13f82:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   13f84:	f386 8811 	msr	BASEPRI, r6
   13f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13f8a:	2b00      	cmp	r3, #0
   13f8c:	d0f4      	beq.n	13f78 <schedule_new_thread.part.13+0x30>
   13f8e:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   13f92:	6a04      	ldr	r4, [r0, #32]
   13f94:	691f      	ldr	r7, [r3, #16]
   13f96:	42bc      	cmp	r4, r7
   13f98:	dc08      	bgt.n	13fac <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
   13f9a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   13f9c:	1b3c      	subs	r4, r7, r4
   13f9e:	611c      	str	r4, [r3, #16]
   13fa0:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
   13fa2:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   13fa4:	685a      	ldr	r2, [r3, #4]
   13fa6:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   13fa8:	605d      	str	r5, [r3, #4]
   13faa:	e7eb      	b.n	13f84 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   13fac:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   13fae:	4573      	cmp	r3, lr
   13fb0:	6204      	str	r4, [r0, #32]
   13fb2:	d0e1      	beq.n	13f78 <schedule_new_thread.part.13+0x30>
   13fb4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   13fb6:	2b00      	cmp	r3, #0
   13fb8:	d1eb      	bne.n	13f92 <schedule_new_thread.part.13+0x4a>
   13fba:	e7dd      	b.n	13f78 <schedule_new_thread.part.13+0x30>
   13fbc:	20002a00 	.word	0x20002a00

00013fc0 <k_is_in_isr>:
   13fc0:	f3ef 8005 	mrs	r0, IPSR
   13fc4:	280d      	cmp	r0, #13
   13fc6:	d807      	bhi.n	13fd8 <k_is_in_isr+0x18>
   13fc8:	b138      	cbz	r0, 13fda <k_is_in_isr+0x1a>
   13fca:	4b04      	ldr	r3, [pc, #16]	; (13fdc <k_is_in_isr+0x1c>)
   13fcc:	6858      	ldr	r0, [r3, #4]
   13fce:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   13fd2:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   13fd6:	4770      	bx	lr
   13fd8:	2001      	movs	r0, #1
}
   13fda:	4770      	bx	lr
   13fdc:	e000ed00 	.word	0xe000ed00

00013fe0 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   13fe0:	4b02      	ldr	r3, [pc, #8]	; (13fec <_is_thread_essential+0xc>)
   13fe2:	689b      	ldr	r3, [r3, #8]
   13fe4:	7a18      	ldrb	r0, [r3, #8]
}
   13fe6:	f000 0001 	and.w	r0, r0, #1
   13fea:	4770      	bx	lr
   13fec:	20002a00 	.word	0x20002a00

00013ff0 <_thread_entry>:
{
   13ff0:	b508      	push	{r3, lr}
   13ff2:	4604      	mov	r4, r0
   13ff4:	4608      	mov	r0, r1
   13ff6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   13ff8:	461a      	mov	r2, r3
   13ffa:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   13ffc:	f7ff fd96 	bl	13b2c <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   14000:	f7ec feda 	bl	db8 <_impl_k_thread_abort>

00014004 <_impl_k_thread_start>:
{
   14004:	b510      	push	{r4, lr}
   14006:	4601      	mov	r1, r0
	__asm__ volatile(
   14008:	f04f 0320 	mov.w	r3, #32
   1400c:	f3ef 8411 	mrs	r4, BASEPRI
   14010:	f383 8811 	msr	BASEPRI, r3
   14014:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   14016:	075a      	lsls	r2, r3, #29
   14018:	d402      	bmi.n	14020 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1401a:	f384 8811 	msr	BASEPRI, r4
   1401e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14020:	f023 0304 	bic.w	r3, r3, #4
   14024:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
   14026:	f7ff ff6b 	bl	13f00 <_is_thread_ready>
   1402a:	2800      	cmp	r0, #0
   1402c:	d0f5      	beq.n	1401a <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
   1402e:	4608      	mov	r0, r1
   14030:	f7ff fbd2 	bl	137d8 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   14034:	4b07      	ldr	r3, [pc, #28]	; (14054 <_impl_k_thread_start+0x50>)
   14036:	689b      	ldr	r3, [r3, #8]
   14038:	895b      	ldrh	r3, [r3, #10]
   1403a:	2b7f      	cmp	r3, #127	; 0x7f
   1403c:	d8ed      	bhi.n	1401a <_impl_k_thread_start+0x16>
   1403e:	f7ff fcc5 	bl	139cc <__must_switch_threads>
   14042:	2800      	cmp	r0, #0
   14044:	d0e9      	beq.n	1401a <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
   14046:	f7ff fd9b 	bl	13b80 <_update_time_slice_before_swap>
	return __swap(key);
   1404a:	4620      	mov	r0, r4
}
   1404c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14050:	f7ec bd06 	b.w	a60 <__swap>
   14054:	20002a00 	.word	0x20002a00

00014058 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   14058:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   1405a:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1405c:	f7ec be3c 	b.w	cd8 <_new_thread>

00014060 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   14060:	b570      	push	{r4, r5, r6, lr}
   14062:	b086      	sub	sp, #24
   14064:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14066:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14068:	9604      	str	r6, [sp, #16]
   1406a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1406c:	9603      	str	r6, [sp, #12]
   1406e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14070:	9602      	str	r6, [sp, #8]
   14072:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   14074:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14076:	9601      	str	r6, [sp, #4]
   14078:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   1407a:	9600      	str	r6, [sp, #0]
   1407c:	f7ec fe2c 	bl	cd8 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
   14080:	1c6b      	adds	r3, r5, #1
   14082:	d003      	beq.n	1408c <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   14084:	b92d      	cbnz	r5, 14092 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   14086:	4620      	mov	r0, r4
   14088:	f7ff ffbc 	bl	14004 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   1408c:	4620      	mov	r0, r4
   1408e:	b006      	add	sp, #24
   14090:	bd70      	pop	{r4, r5, r6, pc}
   14092:	4629      	mov	r1, r5
   14094:	4620      	mov	r0, r4
   14096:	f7ff ff57 	bl	13f48 <schedule_new_thread.part.13>
   1409a:	e7f7      	b.n	1408c <_impl_k_thread_create+0x2c>

0001409c <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   1409c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1409e:	b510      	push	{r4, lr}
   140a0:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   140a2:	b103      	cbz	r3, 140a6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   140a4:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   140a6:	4620      	mov	r0, r4
   140a8:	f7ff ff2a 	bl	13f00 <_is_thread_ready>
   140ac:	b138      	cbz	r0, 140be <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
   140ae:	4620      	mov	r0, r4
   140b0:	f7ff fc16 	bl	138e0 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   140b4:	7a63      	ldrb	r3, [r4, #9]
   140b6:	f043 0308 	orr.w	r3, r3, #8
   140ba:	7263      	strb	r3, [r4, #9]
   140bc:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   140be:	7a63      	ldrb	r3, [r4, #9]
   140c0:	079b      	lsls	r3, r3, #30
   140c2:	d508      	bpl.n	140d6 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
   140c4:	e894 000c 	ldmia.w	r4, {r2, r3}
   140c8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   140ca:	6822      	ldr	r2, [r4, #0]
   140cc:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   140ce:	7a63      	ldrb	r3, [r4, #9]
   140d0:	f023 0302 	bic.w	r3, r3, #2
   140d4:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
   140d6:	6a23      	ldr	r3, [r4, #32]
   140d8:	3301      	adds	r3, #1
   140da:	d0eb      	beq.n	140b4 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
   140dc:	f104 0010 	add.w	r0, r4, #16
   140e0:	f7ff ff18 	bl	13f14 <_abort_timeout>
   140e4:	e7e6      	b.n	140b4 <_k_thread_single_abort+0x18>
	...

000140e8 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   140e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   140ea:	4f21      	ldr	r7, [pc, #132]	; (14170 <_init_static_threads+0x88>)
   140ec:	4d21      	ldr	r5, [pc, #132]	; (14174 <_init_static_threads+0x8c>)
{
   140ee:	b087      	sub	sp, #28
   140f0:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   140f2:	42bd      	cmp	r5, r7
   140f4:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   140f8:	d314      	bcc.n	14124 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   140fa:	4b1f      	ldr	r3, [pc, #124]	; (14178 <_init_static_threads+0x90>)
   140fc:	689a      	ldr	r2, [r3, #8]
   140fe:	7ad3      	ldrb	r3, [r2, #11]
   14100:	3b01      	subs	r3, #1
   14102:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   14104:	f04f 0320 	mov.w	r3, #32
   14108:	f3ef 8511 	mrs	r5, BASEPRI
   1410c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   14110:	4c18      	ldr	r4, [pc, #96]	; (14174 <_init_static_threads+0x8c>)
   14112:	42b4      	cmp	r4, r6
   14114:	d31f      	bcc.n	14156 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14116:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   1411a:	b007      	add	sp, #28
   1411c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   14120:	f7ff bc84 	b.w	13a2c <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   14124:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   14128:	9304      	str	r3, [sp, #16]
   1412a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1412e:	9303      	str	r3, [sp, #12]
   14130:	f854 3c14 	ldr.w	r3, [r4, #-20]
   14134:	9302      	str	r3, [sp, #8]
   14136:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1413a:	9301      	str	r3, [sp, #4]
   1413c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   14140:	9300      	str	r3, [sp, #0]
   14142:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   14146:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   14148:	f7ec fdc6 	bl	cd8 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1414c:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   14150:	64dd      	str	r5, [r3, #76]	; 0x4c
   14152:	4625      	mov	r5, r4
   14154:	e7cd      	b.n	140f2 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   14156:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14158:	1c4b      	adds	r3, r1, #1
   1415a:	d003      	beq.n	14164 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   1415c:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   1415e:	b919      	cbnz	r1, 14168 <_init_static_threads+0x80>
   14160:	f7ff ff50 	bl	14004 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   14164:	342c      	adds	r4, #44	; 0x2c
   14166:	e7d4      	b.n	14112 <_init_static_threads+0x2a>
   14168:	f7ff feee 	bl	13f48 <schedule_new_thread.part.13>
   1416c:	e7fa      	b.n	14164 <_init_static_threads+0x7c>
   1416e:	bf00      	nop
   14170:	2000d050 	.word	0x2000d050
   14174:	2000d050 	.word	0x2000d050
   14178:	20002a00 	.word	0x20002a00

0001417c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   1417c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   1417e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   14180:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   14182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   14186:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   14188:	72c3      	strb	r3, [r0, #11]
   1418a:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   1418c:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   1418e:	6183      	str	r3, [r0, #24]
	t->func = func;
   14190:	6243      	str	r3, [r0, #36]	; 0x24
   14192:	4770      	bx	lr

00014194 <k_work_submit_to_queue>:
{
   14194:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14196:	f101 0308 	add.w	r3, r1, #8
   1419a:	f3bf 8f5b 	dmb	ish
   1419e:	e853 2f00 	ldrex	r2, [r3]
   141a2:	f042 0e01 	orr.w	lr, r2, #1
   141a6:	e843 ec00 	strex	ip, lr, [r3]
   141aa:	f1bc 0f00 	cmp.w	ip, #0
   141ae:	d1f6      	bne.n	1419e <k_work_submit_to_queue+0xa>
   141b0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   141b4:	07d3      	lsls	r3, r2, #31
   141b6:	d403      	bmi.n	141c0 <k_work_submit_to_queue+0x2c>
}
   141b8:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   141bc:	f7ff baa1 	b.w	13702 <k_queue_append>
   141c0:	f85d fb04 	ldr.w	pc, [sp], #4

000141c4 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   141c4:	f1a0 010c 	sub.w	r1, r0, #12
   141c8:	6980      	ldr	r0, [r0, #24]
   141ca:	f7ff bfe3 	b.w	14194 <k_work_submit_to_queue>

000141ce <work_q_main>:
{
   141ce:	b510      	push	{r4, lr}
   141d0:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
   141d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   141d6:	4620      	mov	r0, r4
   141d8:	f7ff fab7 	bl	1374a <k_queue_get>
		if (!work) {
   141dc:	4603      	mov	r3, r0
   141de:	2800      	cmp	r0, #0
   141e0:	d0f7      	beq.n	141d2 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   141e2:	3308      	adds	r3, #8
		handler = work->handler;
   141e4:	6842      	ldr	r2, [r0, #4]
   141e6:	f3bf 8f5b 	dmb	ish
   141ea:	e853 1f00 	ldrex	r1, [r3]
   141ee:	f021 0e01 	bic.w	lr, r1, #1
   141f2:	e843 ec00 	strex	ip, lr, [r3]
   141f6:	f1bc 0f00 	cmp.w	ip, #0
   141fa:	d1f6      	bne.n	141ea <work_q_main+0x1c>
   141fc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   14200:	07cb      	lsls	r3, r1, #31
   14202:	d500      	bpl.n	14206 <work_q_main+0x38>
			handler(work);
   14204:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   14206:	f7ff fc4b 	bl	13aa0 <_impl_k_yield>
   1420a:	e7e2      	b.n	141d2 <work_q_main+0x4>

0001420c <k_work_q_start>:
{
   1420c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1420e:	b087      	sub	sp, #28
   14210:	4604      	mov	r4, r0
   14212:	461f      	mov	r7, r3
   14214:	460d      	mov	r5, r1
   14216:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
   14218:	f7ff fa42 	bl	136a0 <k_queue_init>

   1421c:	2000      	movs	r0, #0
   1421e:	9005      	str	r0, [sp, #20]
   14220:	9004      	str	r0, [sp, #16]
   14222:	9002      	str	r0, [sp, #8]
   14224:	9001      	str	r0, [sp, #4]
   14226:	9703      	str	r7, [sp, #12]
   14228:	9400      	str	r4, [sp, #0]
   1422a:	4b04      	ldr	r3, [pc, #16]	; (1423c <k_work_q_start+0x30>)
   1422c:	4632      	mov	r2, r6
   1422e:	4629      	mov	r1, r5
   14230:	f104 0010 	add.w	r0, r4, #16
   14234:	f7ff ff14 	bl	14060 <_impl_k_thread_create>
}
   14238:	b007      	add	sp, #28
   1423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1423c:	000141cf 	.word	0x000141cf

00014240 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   14240:	b500      	push	{lr}
   14242:	f100 0308 	add.w	r3, r0, #8
   14246:	f3bf 8f5b 	dmb	ish
   1424a:	e853 2f00 	ldrex	r2, [r3]
   1424e:	f022 0201 	bic.w	r2, r2, #1
   14252:	e843 2e00 	strex	lr, r2, [r3]
   14256:	f1be 0f00 	cmp.w	lr, #0
   1425a:	d1f6      	bne.n	1424a <k_delayed_work_init+0xa>
   1425c:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
   14260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14264:	61c3      	str	r3, [r0, #28]
	t->func = func;
   14266:	4a04      	ldr	r2, [pc, #16]	; (14278 <k_delayed_work_init+0x38>)
	work->handler = handler;
   14268:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
   1426a:	2300      	movs	r3, #0
   1426c:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   1426e:	6143      	str	r3, [r0, #20]
	t->func = func;
   14270:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   14272:	6243      	str	r3, [r0, #36]	; 0x24
   14274:	f85d fb04 	ldr.w	pc, [sp], #4
   14278:	000141c5 	.word	0x000141c5

0001427c <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1427c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1427e:	f04f 0320 	mov.w	r3, #32
   14282:	f3ef 8411 	mrs	r4, BASEPRI
   14286:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   1428a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1428c:	b923      	cbnz	r3, 14298 <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1428e:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   14292:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   14296:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14298:	f3bf 8f5b 	dmb	ish
   1429c:	6883      	ldr	r3, [r0, #8]
   1429e:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   142a2:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   142a4:	f100 0508 	add.w	r5, r0, #8
   142a8:	d529      	bpl.n	142fe <k_delayed_work_cancel+0x82>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   142aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
   142ac:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   142ae:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   142b0:	2b00      	cmp	r3, #0
   142b2:	d0ec      	beq.n	1428e <k_delayed_work_cancel+0x12>
		if (test == node) {
   142b4:	4298      	cmp	r0, r3
   142b6:	d11f      	bne.n	142f8 <k_delayed_work_cancel+0x7c>
   142b8:	6803      	ldr	r3, [r0, #0]
   142ba:	6856      	ldr	r6, [r2, #4]
	if (!prev_node) {
   142bc:	b9b9      	cbnz	r1, 142ee <k_delayed_work_cancel+0x72>
		if (list->tail == node) {
   142be:	42b0      	cmp	r0, r6
		list->head = node->next;
   142c0:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   142c2:	d100      	bne.n	142c6 <k_delayed_work_cancel+0x4a>
			list->tail = list->head;
   142c4:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   142c6:	2300      	movs	r3, #0
   142c8:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   142ca:	2300      	movs	r3, #0
   142cc:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   142ce:	f3bf 8f5b 	dmb	ish
   142d2:	e855 2f00 	ldrex	r2, [r5]
   142d6:	f022 0201 	bic.w	r2, r2, #1
   142da:	e845 2100 	strex	r1, r2, [r5]
   142de:	2900      	cmp	r1, #0
   142e0:	d1f7      	bne.n	142d2 <k_delayed_work_cancel+0x56>
   142e2:	f3bf 8f5b 	dmb	ish
   142e6:	f384 8811 	msr	BASEPRI, r4
	return 0;
   142ea:	4618      	mov	r0, r3
   142ec:	bd70      	pop	{r4, r5, r6, pc}
		if (list->tail == node) {
   142ee:	42b0      	cmp	r0, r6
		prev_node->next = node->next;
   142f0:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
   142f2:	bf08      	it	eq
   142f4:	6051      	streq	r1, [r2, #4]
   142f6:	e7e6      	b.n	142c6 <k_delayed_work_cancel+0x4a>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   142f8:	4619      	mov	r1, r3
   142fa:	681b      	ldr	r3, [r3, #0]
   142fc:	e7d8      	b.n	142b0 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   142fe:	69c1      	ldr	r1, [r0, #28]
   14300:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   14302:	f100 020c 	add.w	r2, r0, #12
   14306:	d0e0      	beq.n	142ca <k_delayed_work_cancel+0x4e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   14308:	4b08      	ldr	r3, [pc, #32]	; (1432c <k_delayed_work_cancel+0xb0>)
   1430a:	695b      	ldr	r3, [r3, #20]
   1430c:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   1430e:	bf1f      	itttt	ne
   14310:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14312:	6913      	ldrne	r3, [r2, #16]
   14314:	185b      	addne	r3, r3, r1
   14316:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   14318:	6903      	ldr	r3, [r0, #16]
   1431a:	68c2      	ldr	r2, [r0, #12]
   1431c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   1431e:	68c2      	ldr	r2, [r0, #12]
   14320:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   14322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14326:	61c3      	str	r3, [r0, #28]
   14328:	e7cf      	b.n	142ca <k_delayed_work_cancel+0x4e>
   1432a:	bf00      	nop
   1432c:	20002a00 	.word	0x20002a00

00014330 <k_delayed_work_submit_to_queue>:
{
   14330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14332:	4607      	mov	r7, r0
   14334:	460c      	mov	r4, r1
   14336:	4615      	mov	r5, r2
	__asm__ volatile(
   14338:	f04f 0320 	mov.w	r3, #32
   1433c:	f3ef 8611 	mrs	r6, BASEPRI
   14340:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   14344:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   14346:	b123      	cbz	r3, 14352 <k_delayed_work_submit_to_queue+0x22>
   14348:	4283      	cmp	r3, r0
   1434a:	d00b      	beq.n	14364 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   1434c:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   14350:	e00d      	b.n	1436e <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   14352:	b138      	cbz	r0, 14364 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   14354:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   14356:	b96d      	cbnz	r5, 14374 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   14358:	4621      	mov	r1, r4
   1435a:	4638      	mov	r0, r7
   1435c:	f7ff ff1a 	bl	14194 <k_work_submit_to_queue>
	err = 0;
   14360:	2000      	movs	r0, #0
   14362:	e004      	b.n	1436e <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   14364:	4620      	mov	r0, r4
   14366:	f7ff ff89 	bl	1427c <k_delayed_work_cancel>
		if (err < 0) {
   1436a:	2800      	cmp	r0, #0
   1436c:	daf2      	bge.n	14354 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1436e:	f386 8811 	msr	BASEPRI, r6
}
   14372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   14374:	220a      	movs	r2, #10
   14376:	3509      	adds	r5, #9
   14378:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   1437c:	4a16      	ldr	r2, [pc, #88]	; (143d8 <k_delayed_work_submit_to_queue+0xa8>)
   1437e:	4611      	mov	r1, r2
	timeout->thread = thread;
   14380:	2300      	movs	r3, #0
   14382:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14384:	61a3      	str	r3, [r4, #24]
   14386:	f851 3f10 	ldr.w	r3, [r1, #16]!
		_add_timeout(NULL, &work->timeout, NULL,
   1438a:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1438c:	428b      	cmp	r3, r1
   1438e:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14392:	61e5      	str	r5, [r4, #28]
   14394:	d106      	bne.n	143a4 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   14396:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   14398:	6953      	ldr	r3, [r2, #20]
   1439a:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   1439c:	6953      	ldr	r3, [r2, #20]
   1439e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   143a0:	6157      	str	r7, [r2, #20]
   143a2:	e7dd      	b.n	14360 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   143a4:	2b00      	cmp	r3, #0
   143a6:	d0f6      	beq.n	14396 <k_delayed_work_submit_to_queue+0x66>
   143a8:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   143ac:	69e0      	ldr	r0, [r4, #28]
   143ae:	691d      	ldr	r5, [r3, #16]
   143b0:	42a8      	cmp	r0, r5
   143b2:	dc08      	bgt.n	143c6 <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   143b4:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   143b6:	1a28      	subs	r0, r5, r0
   143b8:	6118      	str	r0, [r3, #16]
   143ba:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   143bc:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   143be:	685a      	ldr	r2, [r3, #4]
   143c0:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   143c2:	605f      	str	r7, [r3, #4]
   143c4:	e7cc      	b.n	14360 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   143c6:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   143c8:	4573      	cmp	r3, lr
   143ca:	61e0      	str	r0, [r4, #28]
   143cc:	d0e3      	beq.n	14396 <k_delayed_work_submit_to_queue+0x66>
   143ce:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   143d0:	2b00      	cmp	r3, #0
   143d2:	d1eb      	bne.n	143ac <k_delayed_work_submit_to_queue+0x7c>
   143d4:	e7df      	b.n	14396 <k_delayed_work_submit_to_queue+0x66>
   143d6:	bf00      	nop
   143d8:	20002a00 	.word	0x20002a00

000143dc <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   143dc:	7a42      	ldrb	r2, [r0, #9]
   143de:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   143e2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   143e6:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   143e8:	d104      	bne.n	143f4 <_ready_thread+0x18>
   143ea:	6a03      	ldr	r3, [r0, #32]
   143ec:	3301      	adds	r3, #1
   143ee:	d101      	bne.n	143f4 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   143f0:	f7ff b9f2 	b.w	137d8 <_add_thread_to_ready_q>
   143f4:	4770      	bx	lr

000143f6 <_unpend_thread>:
	node->prev->next = node->next;
   143f6:	e890 000c 	ldmia.w	r0, {r2, r3}
   143fa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   143fc:	6802      	ldr	r2, [r0, #0]
   143fe:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   14400:	7a43      	ldrb	r3, [r0, #9]
   14402:	f023 0302 	bic.w	r3, r3, #2
   14406:	7243      	strb	r3, [r0, #9]
   14408:	4770      	bx	lr
	...

0001440c <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
   1440c:	b430      	push	{r4, r5}
	timeout->thread = thread;
   1440e:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
   14410:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   14412:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
   14414:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   14416:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   14418:	b972      	cbnz	r2, 14438 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
   1441a:	f04f 0120 	mov.w	r1, #32
   1441e:	f3ef 8211 	mrs	r2, BASEPRI
   14422:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
   14426:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1442a:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1442c:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
   14430:	6943      	ldr	r3, [r0, #20]
   14432:	b16b      	cbz	r3, 14450 <_add_timeout.constprop.9+0x44>
}
   14434:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
   14436:	4718      	bx	r3
	return list->head == list;
   14438:	4911      	ldr	r1, [pc, #68]	; (14480 <_add_timeout.constprop.9+0x74>)
   1443a:	4608      	mov	r0, r1
   1443c:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14440:	4282      	cmp	r2, r0
   14442:	d10d      	bne.n	14460 <_add_timeout.constprop.9+0x54>
	node->next = list;
   14444:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   14446:	694a      	ldr	r2, [r1, #20]
   14448:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1444a:	694a      	ldr	r2, [r1, #20]
   1444c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1444e:	614b      	str	r3, [r1, #20]
}
   14450:	bc30      	pop	{r4, r5}
   14452:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
   14454:	1b64      	subs	r4, r4, r5
   14456:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
   14458:	694c      	ldr	r4, [r1, #20]
   1445a:	42a2      	cmp	r2, r4
   1445c:	d0f2      	beq.n	14444 <_add_timeout.constprop.9+0x38>
   1445e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   14460:	2a00      	cmp	r2, #0
   14462:	d0ef      	beq.n	14444 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
   14464:	691c      	ldr	r4, [r3, #16]
   14466:	6915      	ldr	r5, [r2, #16]
   14468:	42ac      	cmp	r4, r5
   1446a:	dcf3      	bgt.n	14454 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
   1446c:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1446e:	1b2c      	subs	r4, r5, r4
   14470:	6114      	str	r4, [r2, #16]
   14472:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
   14474:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
   14476:	6851      	ldr	r1, [r2, #4]
   14478:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
   1447a:	6053      	str	r3, [r2, #4]
   1447c:	e7e8      	b.n	14450 <_add_timeout.constprop.9+0x44>
   1447e:	bf00      	nop
   14480:	20002a00 	.word	0x20002a00

00014484 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   14484:	6a83      	ldr	r3, [r0, #40]	; 0x28
   14486:	2b00      	cmp	r3, #0
{
   14488:	b570      	push	{r4, r5, r6, lr}
   1448a:	4604      	mov	r4, r0
   1448c:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
   14490:	dd0b      	ble.n	144aa <_timer_expiration_handler+0x26>
	__asm__ volatile(
   14492:	f04f 0320 	mov.w	r3, #32
   14496:	f3ef 8611 	mrs	r6, BASEPRI
   1449a:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   1449e:	6a82      	ldr	r2, [r0, #40]	; 0x28
   144a0:	4629      	mov	r1, r5
   144a2:	f7ff ffb3 	bl	1440c <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   144a6:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   144aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   144ac:	3301      	adds	r3, #1
   144ae:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   144b0:	6a23      	ldr	r3, [r4, #32]
   144b2:	b10b      	cbz	r3, 144b8 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
   144b4:	4620      	mov	r0, r4
   144b6:	4798      	blx	r3
	return list->head == list;
   144b8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   144ba:	42ac      	cmp	r4, r5
   144bc:	d010      	beq.n	144e0 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
   144be:	b17c      	cbz	r4, 144e0 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
   144c0:	4620      	mov	r0, r4
   144c2:	f7ff ff98 	bl	143f6 <_unpend_thread>
	__asm__ volatile(
   144c6:	f04f 0320 	mov.w	r3, #32
   144ca:	f3ef 8511 	mrs	r5, BASEPRI
   144ce:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   144d2:	4620      	mov	r0, r4
   144d4:	f7ff ff82 	bl	143dc <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   144d8:	f385 8811 	msr	BASEPRI, r5
   144dc:	2300      	movs	r3, #0
   144de:	6663      	str	r3, [r4, #100]	; 0x64
   144e0:	bd70      	pop	{r4, r5, r6, pc}

000144e2 <sys_dlist_remove>:
	node->prev->next = node->next;
   144e2:	e890 000c 	ldmia.w	r0, {r2, r3}
   144e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   144e8:	6802      	ldr	r2, [r0, #0]
   144ea:	6053      	str	r3, [r2, #4]
   144ec:	4770      	bx	lr

000144ee <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   144ee:	b570      	push	{r4, r5, r6, lr}
   144f0:	2414      	movs	r4, #20
   144f2:	4615      	mov	r5, r2
   144f4:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
   144f8:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
   144fa:	2900      	cmp	r1, #0
   144fc:	da00      	bge.n	14500 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   144fe:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   14500:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   14502:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
   14504:	f003 030f 	and.w	r3, r3, #15
   14508:	2b02      	cmp	r3, #2
   1450a:	d003      	beq.n	14514 <clear_event_registrations+0x26>
   1450c:	2b04      	cmp	r3, #4
   1450e:	d001      	beq.n	14514 <clear_event_registrations+0x26>
   14510:	2b01      	cmp	r3, #1
   14512:	d102      	bne.n	1451a <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
   14514:	4620      	mov	r0, r4
   14516:	f7ff ffe4 	bl	144e2 <sys_dlist_remove>
   1451a:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   1451e:	f04f 0320 	mov.w	r3, #32
   14522:	f3ef 8511 	mrs	r5, BASEPRI
   14526:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   1452a:	3901      	subs	r1, #1
   1452c:	3c14      	subs	r4, #20
   1452e:	e7e4      	b.n	144fa <clear_event_registrations+0xc>

00014530 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   14530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
   14532:	2300      	movs	r3, #0
   14534:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   14536:	6883      	ldr	r3, [r0, #8]
{
   14538:	4605      	mov	r5, r0
   1453a:	460e      	mov	r6, r1
   1453c:	4617      	mov	r7, r2
	if (!event->poller) {
   1453e:	2b00      	cmp	r3, #0
   14540:	d049      	beq.n	145d6 <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   14542:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
   14544:	7a4b      	ldrb	r3, [r1, #9]
   14546:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   1454a:	0798      	lsls	r0, r3, #30
   1454c:	724a      	strb	r2, [r1, #9]
   1454e:	d542      	bpl.n	145d6 <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   14550:	6a0b      	ldr	r3, [r1, #32]
   14552:	3302      	adds	r3, #2
   14554:	d04a      	beq.n	145ec <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
   14556:	4608      	mov	r0, r1
   14558:	f7ff ffc3 	bl	144e2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1455c:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1455e:	6a0c      	ldr	r4, [r1, #32]
   14560:	f023 0302 	bic.w	r3, r3, #2
   14564:	1c62      	adds	r2, r4, #1
   14566:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
   14568:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   1456c:	d00c      	beq.n	14588 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1456e:	4b21      	ldr	r3, [pc, #132]	; (145f4 <signal_poll_event+0xc4>)
   14570:	695b      	ldr	r3, [r3, #20]
   14572:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
   14574:	bf1f      	itttt	ne
   14576:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   14578:	6913      	ldrne	r3, [r2, #16]
   1457a:	191b      	addne	r3, r3, r4
   1457c:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
   1457e:	f7ff ffb0 	bl	144e2 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   14582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14586:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   14588:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   1458a:	2e00      	cmp	r6, #0
   1458c:	bf0c      	ite	eq
   1458e:	f06f 0303 	mvneq.w	r3, #3
   14592:	2300      	movne	r3, #0
   14594:	f010 041f 	ands.w	r4, r0, #31
   14598:	664b      	str	r3, [r1, #100]	; 0x64
   1459a:	d11c      	bne.n	145d6 <signal_poll_event+0xa6>
   1459c:	6a0b      	ldr	r3, [r1, #32]
   1459e:	3301      	adds	r3, #1
   145a0:	d119      	bne.n	145d6 <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   145a2:	4608      	mov	r0, r1
   145a4:	f7ff f918 	bl	137d8 <_add_thread_to_ready_q>
   145a8:	f3ef 8305 	mrs	r3, IPSR
   145ac:	2b0d      	cmp	r3, #13
   145ae:	d81b      	bhi.n	145e8 <signal_poll_event+0xb8>
   145b0:	b123      	cbz	r3, 145bc <signal_poll_event+0x8c>
   145b2:	4b11      	ldr	r3, [pc, #68]	; (145f8 <signal_poll_event+0xc8>)
   145b4:	6858      	ldr	r0, [r3, #4]
   145b6:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   145ba:	d00b      	beq.n	145d4 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
   145bc:	4b0d      	ldr	r3, [pc, #52]	; (145f4 <signal_poll_event+0xc4>)
   145be:	689b      	ldr	r3, [r3, #8]
   145c0:	895b      	ldrh	r3, [r3, #10]
   145c2:	2b7f      	cmp	r3, #127	; 0x7f
   145c4:	d901      	bls.n	145ca <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   145c6:	2000      	movs	r0, #0
   145c8:	e004      	b.n	145d4 <signal_poll_event+0xa4>
   145ca:	f7ff f9ff 	bl	139cc <__must_switch_threads>
   145ce:	3000      	adds	r0, #0
   145d0:	bf18      	it	ne
   145d2:	2001      	movne	r0, #1
   145d4:	6038      	str	r0, [r7, #0]
	event->state |= state;
   145d6:	7b6b      	ldrb	r3, [r5, #13]
   145d8:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   145dc:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   145e0:	2000      	movs	r0, #0
	event->state |= state;
   145e2:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   145e4:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
   145e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   145e8:	4620      	mov	r0, r4
   145ea:	e7f3      	b.n	145d4 <signal_poll_event+0xa4>
		return -EAGAIN;
   145ec:	f06f 000a 	mvn.w	r0, #10
   145f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145f2:	bf00      	nop
   145f4:	20002a00 	.word	0x20002a00
   145f8:	e000ed00 	.word	0xe000ed00

000145fc <add_event>:
	return list->head == list;
   145fc:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   145fe:	4298      	cmp	r0, r3
{
   14600:	b530      	push	{r4, r5, lr}
   14602:	d00a      	beq.n	1461a <add_event+0x1e>
   14604:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   14606:	b144      	cbz	r4, 1461a <add_event+0x1e>
   14608:	68a5      	ldr	r5, [r4, #8]
   1460a:	6812      	ldr	r2, [r2, #0]
   1460c:	682d      	ldr	r5, [r5, #0]
   1460e:	f992 200a 	ldrsb.w	r2, [r2, #10]
   14612:	f995 500a 	ldrsb.w	r5, [r5, #10]
   14616:	4295      	cmp	r5, r2
   14618:	da17      	bge.n	1464a <add_event+0x4e>
	node->next = list;
   1461a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   1461c:	6843      	ldr	r3, [r0, #4]
   1461e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   14620:	6843      	ldr	r3, [r0, #4]
   14622:	6019      	str	r1, [r3, #0]
	list->tail = node;
   14624:	6041      	str	r1, [r0, #4]
   14626:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
   14628:	689d      	ldr	r5, [r3, #8]
   1462a:	682d      	ldr	r5, [r5, #0]
   1462c:	f995 500a 	ldrsb.w	r5, [r5, #10]
   14630:	4295      	cmp	r5, r2
   14632:	dd06      	ble.n	14642 <add_event+0x46>
		node->prev = insert_point->prev;
   14634:	685a      	ldr	r2, [r3, #4]
   14636:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   14638:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1463a:	685a      	ldr	r2, [r3, #4]
   1463c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   1463e:	6059      	str	r1, [r3, #4]
   14640:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   14642:	42a3      	cmp	r3, r4
   14644:	d003      	beq.n	1464e <add_event+0x52>
   14646:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14648:	b10b      	cbz	r3, 1464e <add_event+0x52>
   1464a:	2b00      	cmp	r3, #0
   1464c:	d1ec      	bne.n	14628 <add_event+0x2c>
	node->prev = list->tail;
   1464e:	e881 0011 	stmia.w	r1, {r0, r4}
   14652:	e7e5      	b.n	14620 <add_event+0x24>

00014654 <k_poll_event_init>:
{
   14654:	b530      	push	{r4, r5, lr}
	event->type = type;
   14656:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   14658:	6103      	str	r3, [r0, #16]
	event->type = type;
   1465a:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   1465e:	7b81      	ldrb	r1, [r0, #14]
   14660:	f362 0100 	bfi	r1, r2, #0, #1
   14664:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   14666:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   14668:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   1466a:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   1466e:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   14672:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   14674:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   14676:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   14678:	bd30      	pop	{r4, r5, pc}
	...

0001467c <k_poll>:
{
   1467c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14680:	b087      	sub	sp, #28
   14682:	4680      	mov	r8, r0
   14684:	9101      	str	r1, [sp, #4]
   14686:	4691      	mov	r9, r2
   14688:	f04f 0320 	mov.w	r3, #32
   1468c:	f3ef 8111 	mrs	r1, BASEPRI
   14690:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   14694:	4d4a      	ldr	r5, [pc, #296]	; (147c0 <k_poll+0x144>)
   14696:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
   14698:	7a53      	ldrb	r3, [r2, #9]
   1469a:	f043 0320 	orr.w	r3, r3, #32
   1469e:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   146a0:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
   146a4:	f10d 0a18 	add.w	sl, sp, #24
   146a8:	68aa      	ldr	r2, [r5, #8]
   146aa:	f84a 2d0c 	str.w	r2, [sl, #-12]!
   146ae:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
   146b0:	2700      	movs	r7, #0
	int last_registered = -1, rc;
   146b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   146b6:	9b01      	ldr	r3, [sp, #4]
   146b8:	429f      	cmp	r7, r3
   146ba:	db15      	blt.n	146e8 <k_poll+0x6c>
	__asm__ volatile(
   146bc:	f04f 0320 	mov.w	r3, #32
   146c0:	f3ef 8711 	mrs	r7, BASEPRI
   146c4:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   146c8:	68aa      	ldr	r2, [r5, #8]
   146ca:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   146cc:	f013 0420 	ands.w	r4, r3, #32
   146d0:	d144      	bne.n	1475c <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
   146d2:	463a      	mov	r2, r7
   146d4:	4631      	mov	r1, r6
   146d6:	4640      	mov	r0, r8
   146d8:	f7ff ff09 	bl	144ee <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   146dc:	f387 8811 	msr	BASEPRI, r7
}
   146e0:	4620      	mov	r0, r4
   146e2:	b007      	add	sp, #28
   146e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   146e8:	f04f 0220 	mov.w	r2, #32
   146ec:	f3ef 8b11 	mrs	fp, BASEPRI
   146f0:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
   146f4:	7b61      	ldrb	r1, [r4, #13]
   146f6:	f001 020f 	and.w	r2, r1, #15
   146fa:	2a02      	cmp	r2, #2
   146fc:	d003      	beq.n	14706 <k_poll+0x8a>
   146fe:	2a04      	cmp	r2, #4
   14700:	d004      	beq.n	1470c <k_poll+0x90>
   14702:	2a01      	cmp	r2, #1
   14704:	d106      	bne.n	14714 <k_poll+0x98>
		if (event->signal->signaled) {
   14706:	6920      	ldr	r0, [r4, #16]
   14708:	6880      	ldr	r0, [r0, #8]
   1470a:	e001      	b.n	14710 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
   1470c:	6920      	ldr	r0, [r4, #16]
   1470e:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
   14710:	2800      	cmp	r0, #0
   14712:	d148      	bne.n	147a6 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   14714:	f1b9 0f00 	cmp.w	r9, #0
   14718:	d016      	beq.n	14748 <k_poll+0xcc>
   1471a:	68a9      	ldr	r1, [r5, #8]
   1471c:	7a49      	ldrb	r1, [r1, #9]
   1471e:	068b      	lsls	r3, r1, #26
   14720:	d512      	bpl.n	14748 <k_poll+0xcc>
	switch (event->type) {
   14722:	2a02      	cmp	r2, #2
   14724:	d007      	beq.n	14736 <k_poll+0xba>
   14726:	2a04      	cmp	r2, #4
   14728:	d013      	beq.n	14752 <k_poll+0xd6>
   1472a:	2a01      	cmp	r2, #1
   1472c:	d109      	bne.n	14742 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
   1472e:	4652      	mov	r2, sl
   14730:	4621      	mov	r1, r4
   14732:	6920      	ldr	r0, [r4, #16]
   14734:	e003      	b.n	1473e <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
   14736:	6920      	ldr	r0, [r4, #16]
   14738:	4652      	mov	r2, sl
   1473a:	4621      	mov	r1, r4
   1473c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1473e:	f7ff ff5d 	bl	145fc <add_event>
	event->poller = poller;
   14742:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
   14746:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14748:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   1474c:	3701      	adds	r7, #1
   1474e:	3414      	adds	r4, #20
   14750:	e7b1      	b.n	146b6 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
   14752:	6920      	ldr	r0, [r4, #16]
   14754:	4652      	mov	r2, sl
   14756:	4621      	mov	r1, r4
   14758:	3008      	adds	r0, #8
   1475a:	e7f0      	b.n	1473e <k_poll+0xc2>
	thread->base.thread_state &= ~states;
   1475c:	f023 0320 	bic.w	r3, r3, #32
   14760:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   14762:	f1b9 0f00 	cmp.w	r9, #0
   14766:	d104      	bne.n	14772 <k_poll+0xf6>
   14768:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
   1476c:	f06f 040a 	mvn.w	r4, #10
   14770:	e7b6      	b.n	146e0 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14772:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
   14774:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   14776:	9004      	str	r0, [sp, #16]
   14778:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
   1477a:	f7ff f917 	bl	139ac <_pend_current_thread>
	_update_time_slice_before_swap();
   1477e:	f7ff f9ff 	bl	13b80 <_update_time_slice_before_swap>
	return __swap(key);
   14782:	4638      	mov	r0, r7
   14784:	f7ec f96c 	bl	a60 <__swap>
   14788:	4604      	mov	r4, r0
	__asm__ volatile(
   1478a:	f04f 0320 	mov.w	r3, #32
   1478e:	f3ef 8511 	mrs	r5, BASEPRI
   14792:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
   14796:	462a      	mov	r2, r5
   14798:	4631      	mov	r1, r6
   1479a:	4640      	mov	r0, r8
   1479c:	f7ff fea7 	bl	144ee <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   147a0:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
   147a4:	e79c      	b.n	146e0 <k_poll+0x64>
	event->state |= state;
   147a6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
   147aa:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
   147ae:	2300      	movs	r3, #0
   147b0:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   147b2:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
   147b4:	68a9      	ldr	r1, [r5, #8]
   147b6:	7a4a      	ldrb	r2, [r1, #9]
   147b8:	f022 0220 	bic.w	r2, r2, #32
   147bc:	724a      	strb	r2, [r1, #9]
   147be:	e7c3      	b.n	14748 <k_poll+0xcc>
   147c0:	20002a00 	.word	0x20002a00

000147c4 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   147c4:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
   147c6:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   147c8:	42a0      	cmp	r0, r4
   147ca:	d102      	bne.n	147d2 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
   147cc:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
   147ce:	b002      	add	sp, #8
   147d0:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
   147d2:	4620      	mov	r0, r4
   147d4:	f7ff fe85 	bl	144e2 <sys_dlist_remove>
	if (!poll_event) {
   147d8:	2c00      	cmp	r4, #0
   147da:	d0f7      	beq.n	147cc <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
   147dc:	aa01      	add	r2, sp, #4
   147de:	4620      	mov	r0, r4
   147e0:	f7ff fea6 	bl	14530 <signal_poll_event>
	return must_reschedule;
   147e4:	9801      	ldr	r0, [sp, #4]
   147e6:	e7f2      	b.n	147ce <_handle_obj_poll_events+0xa>

000147e8 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   147e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   147ea:	f04f 0320 	mov.w	r3, #32
   147ee:	f3ef 8511 	mrs	r5, BASEPRI
   147f2:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   147f6:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   147f8:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   147fa:	42a0      	cmp	r0, r4
	signal->signaled = 1;
   147fc:	f04f 0101 	mov.w	r1, #1
   14800:	6081      	str	r1, [r0, #8]
   14802:	d105      	bne.n	14810 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   14804:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
   14808:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
   1480a:	4620      	mov	r0, r4
   1480c:	b003      	add	sp, #12
   1480e:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
   14810:	4620      	mov	r0, r4
   14812:	f7ff fe66 	bl	144e2 <sys_dlist_remove>
	if (!poll_event) {
   14816:	2c00      	cmp	r4, #0
   14818:	d0f4      	beq.n	14804 <k_poll_signal+0x1c>
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   1481a:	4620      	mov	r0, r4
   1481c:	aa01      	add	r2, sp, #4
   1481e:	f7ff fe87 	bl	14530 <signal_poll_event>
	if (must_reschedule) {
   14822:	9b01      	ldr	r3, [sp, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   14824:	4604      	mov	r4, r0
	if (must_reschedule) {
   14826:	b12b      	cbz	r3, 14834 <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
   14828:	f7ff f9aa 	bl	13b80 <_update_time_slice_before_swap>
	return __swap(key);
   1482c:	4628      	mov	r0, r5
   1482e:	f7ec f917 	bl	a60 <__swap>
   14832:	e7ea      	b.n	1480a <k_poll_signal+0x22>
   14834:	f385 8811 	msr	BASEPRI, r5
   14838:	e7e7      	b.n	1480a <k_poll_signal+0x22>

0001483a <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   1483a:	4770      	bx	lr
