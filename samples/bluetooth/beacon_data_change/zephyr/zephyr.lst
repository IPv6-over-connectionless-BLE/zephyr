
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20003f88 	.word	0x20003f88

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000f85 	.word	0x00000f85
       8:	00000fd5 	.word	0x00000fd5
       c:	00000e1d 	.word	0x00000e1d
      10:	00000e1d 	.word	0x00000e1d
      14:	00000e1d 	.word	0x00000e1d
      18:	00000e1d 	.word	0x00000e1d
      1c:	00000e1d 	.word	0x00000e1d
      20:	00000e1d 	.word	0x00000e1d
      24:	00000e1d 	.word	0x00000e1d
      28:	00000e1d 	.word	0x00000e1d
      2c:	00000a11 	.word	0x00000a11
      30:	00000e1d 	.word	0x00000e1d
      34:	00000e1d 	.word	0x00000e1d
      38:	000009cd 	.word	0x000009cd
      3c:	00000e1d 	.word	0x00000e1d

00000040 <_irq_vector_table>:
      40:	00000f49 0000a2e7 00000f49 00000f49     I.......I...I...
      50:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      60:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      70:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      80:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      90:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      a0:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      b0:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      c0:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      d0:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      e0:	00000f49 00000f49 00000f49 00000f49     I...I...I...I...
      f0:	00000f49 00000f49                       I...I...

000000f8 <_sw_isr_table>:
      f8:	00000000 0000182d 00000000 00000d95     ....-...........
     108:	00000000 00000d95 00000000 00000d95     ................
     118:	00000000 00000d95 00000000 00000d95     ................
     128:	20005150 00001a11 00000000 00000d95     PQ. ............
     138:	00000000 00000d95 00000000 00000d95     ................
     148:	00000000 00000d95 00000000 0000a2ad     ................
     158:	00000000 00000d95 2000512c 00001dd9     ........,Q. ....
     168:	00000000 00000d95 00000000 00000d95     ................
     178:	00000000 00000d95 00000000 00001f09     ................
     188:	00000000 00000d95 00000000 00000d95     ................
     198:	00000000 00000d95 00000000 00000d95     ................
     1a8:	00000000 00000d95 00000000 00000d95     ................
     1b8:	00000000 0000a2e1 00000000 00000d95     ................
     1c8:	00000000 00000d95 00000000 00000d95     ................
     1d8:	00000000 00000d95 00000000 00000d95     ................
     1e8:	00000000 00000d95 00000000 00000d95     ................
     1f8:	00000000 00000d95 00000000 00000d95     ................
     208:	00000000 00000d95 00000000 00000d95     ................
     218:	00000000 00000d95 00000000 00000d95     ................
     228:	00000000 00000d95 00000000 00000d95     ................
     238:	00000000 00000d95 00000000 00000d95     ................
     248:	00000000 00000d95 00000000 00000d95     ................
     258:	00000000 00000d95 00000000 00000d95     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_BT_RX_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_BT_RX_STACK_SIZE+0x190>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_BT_RX_STACK_SIZE+0x194>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     542:	d012      	beq.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     544:	b156      	cbz	r6, 55c <CONFIG_BT_RX_STACK_SIZE+0x15c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     5a0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     5a2:	4603      	mov	r3, r0
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	b90a      	cbnz	r2, 5ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     5aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
     5ac:	4770      	bx	lr
		*d = *s;
     5ae:	f803 2b01 	strb.w	r2, [r3], #1
     5b2:	e7f7      	b.n	5a4 <strcpy+0x4>

000005b4 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
     5b8:	4603      	mov	r3, r0
     5ba:	b13a      	cbz	r2, 5cc <strncpy+0x18>
     5bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
     5c0:	b92c      	cbnz	r4, 5ce <strncpy+0x1a>
     5c2:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
     5c4:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
     5c8:	4293      	cmp	r3, r2
     5ca:	d1fb      	bne.n	5c4 <strncpy+0x10>
		d++;
		n--;
	}

	return dest;
}
     5cc:	bd10      	pop	{r4, pc}
		*d = *s;
     5ce:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
     5d2:	3a01      	subs	r2, #1
     5d4:	e7f1      	b.n	5ba <strncpy+0x6>

000005d6 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5d6:	3801      	subs	r0, #1
     5d8:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5e2:	4293      	cmp	r3, r2
     5e4:	d102      	bne.n	5ec <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x10>
     5e6:	2b00      	cmp	r3, #0
     5e8:	d1f7      	bne.n	5da <strcmp+0x4>
     5ea:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ec:	1a98      	subs	r0, r3, r2
     5ee:	4770      	bx	lr

000005f0 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5f0:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5f2:	b182      	cbz	r2, 616 <CONFIG_BT_CTLR_COMPANY_ID+0x25>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5f4:	3a01      	subs	r2, #1
     5f6:	460c      	mov	r4, r1
     5f8:	4603      	mov	r3, r0
     5fa:	d103      	bne.n	604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5fc:	781a      	ldrb	r2, [r3, #0]
     5fe:	7820      	ldrb	r0, [r4, #0]
     600:	1a10      	subs	r0, r2, r0
     602:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     604:	781e      	ldrb	r6, [r3, #0]
     606:	7825      	ldrb	r5, [r4, #0]
     608:	42ae      	cmp	r6, r5
     60a:	f100 0001 	add.w	r0, r0, #1
     60e:	f101 0101 	add.w	r1, r1, #1
     612:	d0ef      	beq.n	5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
     614:	e7f2      	b.n	5fc <CONFIG_BT_CTLR_COMPANY_ID+0xb>
		return 0;
     616:	4610      	mov	r0, r2
}
     618:	bd70      	pop	{r4, r5, r6, pc}

0000061a <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     61a:	ea81 0300 	eor.w	r3, r1, r0
     61e:	f013 0f03 	tst.w	r3, #3
{
     622:	b570      	push	{r4, r5, r6, lr}
     624:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     626:	d00b      	beq.n	640 <memcpy+0x26>
     628:	3b01      	subs	r3, #1
     62a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     62c:	4291      	cmp	r1, r2
     62e:	d11b      	bne.n	668 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     630:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     632:	2a00      	cmp	r2, #0
     634:	d0fc      	beq.n	630 <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     636:	f811 4b01 	ldrb.w	r4, [r1], #1
     63a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     63e:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     640:	079c      	lsls	r4, r3, #30
     642:	d1f6      	bne.n	632 <memcpy+0x18>
     644:	1f1e      	subs	r6, r3, #4
     646:	460d      	mov	r5, r1
     648:	1b54      	subs	r4, r2, r5
     64a:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     64c:	2c03      	cmp	r4, #3
     64e:	d806      	bhi.n	65e <memcpy+0x44>
     650:	f022 0403 	bic.w	r4, r2, #3
     654:	4421      	add	r1, r4
     656:	4423      	add	r3, r4
     658:	f002 0203 	and.w	r2, r2, #3
     65c:	e7e4      	b.n	628 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     65e:	f855 4b04 	ldr.w	r4, [r5], #4
     662:	f846 4f04 	str.w	r4, [r6, #4]!
     666:	e7ef      	b.n	648 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     668:	f811 4b01 	ldrb.w	r4, [r1], #1
     66c:	f803 4f01 	strb.w	r4, [r3, #1]!
     670:	e7dc      	b.n	62c <memcpy+0x12>

00000672 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     672:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     674:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     676:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     678:	079c      	lsls	r4, r3, #30
     67a:	d111      	bne.n	6a0 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     67c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     680:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     684:	461e      	mov	r6, r3
     686:	1b95      	subs	r5, r2, r6
     688:	441d      	add	r5, r3
     68a:	2d03      	cmp	r5, #3
     68c:	d80e      	bhi.n	6ac <memset+0x3a>
     68e:	f022 0403 	bic.w	r4, r2, #3
     692:	4423      	add	r3, r4
     694:	f002 0203 	and.w	r2, r2, #3
     698:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     69a:	4293      	cmp	r3, r2
     69c:	d109      	bne.n	6b2 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     69e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     6a0:	2a00      	cmp	r2, #0
     6a2:	d0fc      	beq.n	69e <memset+0x2c>
		*(d_byte++) = c_byte;
     6a4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     6a8:	3a01      	subs	r2, #1
     6aa:	e7e5      	b.n	678 <memset+0x6>
		*(d_word++) = c_word;
     6ac:	f846 4b04 	str.w	r4, [r6], #4
     6b0:	e7e9      	b.n	686 <memset+0x14>
		*(d_byte++) = c_byte;
     6b2:	f803 1b01 	strb.w	r1, [r3], #1
     6b6:	e7f0      	b.n	69a <memset+0x28>

000006b8 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
     6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     6bc:	4770      	bx	lr
	...

000006c0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
     6c0:	4b01      	ldr	r3, [pc, #4]	; (6c8 <__stdout_hook_install+0x8>)
     6c2:	6018      	str	r0, [r3, #0]
     6c4:	4770      	bx	lr
     6c6:	bf00      	nop
     6c8:	20004cc8 	.word	0x20004cc8

000006cc <bt_ext_ready>:

	printk("Beacon started\n");
}

static void bt_ext_ready(int err)
{
     6cc:	b510      	push	{r4, lr}
	if (err) {
     6ce:	4604      	mov	r4, r0
{
     6d0:	b086      	sub	sp, #24
	if (err) {
     6d2:	b128      	cbz	r0, 6e0 <bt_ext_ready+0x14>
		printk("Bluetooth init failed (err %d)\n", err);
     6d4:	4601      	mov	r1, r0
     6d6:	4810      	ldr	r0, [pc, #64]	; (718 <bt_ext_ready+0x4c>)

	/* Start advertising */
	err = bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
			      sd, ARRAY_SIZE(sd));
	if (err) {
		printk("Advertising failed to start (err %d)\n", err);
     6d8:	f000 fe6c 	bl	13b4 <printk>
		return;
	}

	printk("Beacon started\n");
}
     6dc:	b006      	add	sp, #24
     6de:	bd10      	pop	{r4, pc}
	printk("Bluetooth initialized\n");
     6e0:	480e      	ldr	r0, [pc, #56]	; (71c <bt_ext_ready+0x50>)
     6e2:	f000 fe67 	bl	13b4 <printk>
	err = bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     6e6:	23a0      	movs	r3, #160	; 0xa0
     6e8:	9403      	str	r4, [sp, #12]
     6ea:	2201      	movs	r2, #1
     6ec:	f8ad 300e 	strh.w	r3, [sp, #14]
     6f0:	23f0      	movs	r3, #240	; 0xf0
     6f2:	9404      	str	r4, [sp, #16]
     6f4:	490a      	ldr	r1, [pc, #40]	; (720 <bt_ext_ready+0x54>)
     6f6:	f8ad 3010 	strh.w	r3, [sp, #16]
     6fa:	9200      	str	r2, [sp, #0]
     6fc:	4b09      	ldr	r3, [pc, #36]	; (724 <bt_ext_ready+0x58>)
     6fe:	9405      	str	r4, [sp, #20]
     700:	a803      	add	r0, sp, #12
     702:	f003 f887 	bl	3814 <bt_le_ext_adv_start>
	if (err) {
     706:	4601      	mov	r1, r0
     708:	b108      	cbz	r0, 70e <bt_ext_ready+0x42>
		printk("Advertising failed to start (err %d)\n", err);
     70a:	4807      	ldr	r0, [pc, #28]	; (728 <bt_ext_ready+0x5c>)
     70c:	e7e4      	b.n	6d8 <bt_ext_ready+0xc>
	printk("Beacon started\n");
     70e:	4807      	ldr	r0, [pc, #28]	; (72c <bt_ext_ready+0x60>)
     710:	f000 fe50 	bl	13b4 <printk>
     714:	e7e2      	b.n	6dc <bt_ext_ready+0x10>
     716:	bf00      	nop
     718:	0000cc0f 	.word	0x0000cc0f
     71c:	0000cc2f 	.word	0x0000cc2f
     720:	20002adc 	.word	0x20002adc
     724:	0000cc94 	.word	0x0000cc94
     728:	0000cc46 	.word	0x0000cc46
     72c:	0000cc6c 	.word	0x0000cc6c

00000730 <main>:

void main(void)
{
     730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int err;

	printk("Starting Beacon Demo\n");
     734:	482a      	ldr	r0, [pc, #168]	; (7e0 <main+0xb0>)
 	ad[0].type = BT_DATA_MANUFACTURER_DATA, 
     736:	4c2b      	ldr	r4, [pc, #172]	; (7e4 <main+0xb4>)
		ad[0].data = mfg_data_1;
     738:	4f2b      	ldr	r7, [pc, #172]	; (7e8 <main+0xb8>)
{
     73a:	b089      	sub	sp, #36	; 0x24
	printk("Starting Beacon Demo\n");
     73c:	f000 fe3a 	bl	13b4 <printk>
 	ad[0].type = BT_DATA_MANUFACTURER_DATA, 
     740:	23ff      	movs	r3, #255	; 0xff
     742:	7023      	strb	r3, [r4, #0]
		ad[0].data_len =  20;

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ext_ready);
     744:	4829      	ldr	r0, [pc, #164]	; (7ec <main+0xbc>)
		ad[0].data = mfg_data_1;
     746:	6067      	str	r7, [r4, #4]
		ad[0].data_len =  20;
     748:	2314      	movs	r3, #20
     74a:	7063      	strb	r3, [r4, #1]
	err = bt_enable(bt_ext_ready);
     74c:	f002 fffe 	bl	374c <bt_enable>
	if (err) {
     750:	4601      	mov	r1, r0
     752:	b110      	cbz	r0, 75a <main+0x2a>
		printk("Bluetooth init failed (err %d)\n", err);
     754:	4826      	ldr	r0, [pc, #152]	; (7f0 <main+0xc0>)
     756:	f000 fe2d 	bl	13b4 <printk>
		bt_le_adv_stop();
		ad[0].type = BT_DATA_MANUFACTURER_DATA, 
		ad[0].data = mfg_data_2;
		ad[0].data_len =  22;
		k_sleep(50);
		bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     75a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 7f8 <main+0xc8>
     75e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 7e4 <main+0xb4>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     762:	f241 3088 	movw	r0, #5000	; 0x1388
     766:	f00b fc3b 	bl	bfe0 <_impl_k_sleep>
		bt_le_adv_stop();
     76a:	f003 f919 	bl	39a0 <bt_le_adv_stop>
		ad[0].type = BT_DATA_MANUFACTURER_DATA, 
     76e:	23ff      	movs	r3, #255	; 0xff
     770:	7023      	strb	r3, [r4, #0]
		ad[0].data = mfg_data_2;
     772:	4b20      	ldr	r3, [pc, #128]	; (7f4 <main+0xc4>)
     774:	6063      	str	r3, [r4, #4]
		bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     776:	2601      	movs	r6, #1
		ad[0].data_len =  22;
     778:	2316      	movs	r3, #22
     77a:	2032      	movs	r0, #50	; 0x32
		bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     77c:	2500      	movs	r5, #0
		ad[0].data_len =  22;
     77e:	7063      	strb	r3, [r4, #1]
		bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     780:	f04f 0ba0 	mov.w	fp, #160	; 0xa0
     784:	f00b fc2c 	bl	bfe0 <_impl_k_sleep>
     788:	f04f 0af0 	mov.w	sl, #240	; 0xf0
     78c:	4632      	mov	r2, r6
     78e:	4641      	mov	r1, r8
     790:	464b      	mov	r3, r9
     792:	9600      	str	r6, [sp, #0]
     794:	a802      	add	r0, sp, #8
     796:	9502      	str	r5, [sp, #8]
     798:	9503      	str	r5, [sp, #12]
     79a:	9504      	str	r5, [sp, #16]
     79c:	f8ad b00a 	strh.w	fp, [sp, #10]
     7a0:	f8ad a00c 	strh.w	sl, [sp, #12]
     7a4:	f003 f836 	bl	3814 <bt_le_ext_adv_start>
     7a8:	f241 3088 	movw	r0, #5000	; 0x1388
     7ac:	f00b fc18 	bl	bfe0 <_impl_k_sleep>
			      sd, ARRAY_SIZE(sd));
		
		k_sleep(5000);
		bt_le_adv_stop();
     7b0:	f003 f8f6 	bl	39a0 <bt_le_adv_stop>
		ad[0].data = mfg_data_1;
		ad[0].data_len =  12;
     7b4:	230c      	movs	r3, #12
     7b6:	2032      	movs	r0, #50	; 0x32
     7b8:	7063      	strb	r3, [r4, #1]
		ad[0].data = mfg_data_1;
     7ba:	6067      	str	r7, [r4, #4]
     7bc:	f00b fc10 	bl	bfe0 <_impl_k_sleep>
		k_sleep(50);
		bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     7c0:	9600      	str	r6, [sp, #0]
     7c2:	464b      	mov	r3, r9
     7c4:	4632      	mov	r2, r6
     7c6:	4641      	mov	r1, r8
     7c8:	a805      	add	r0, sp, #20
     7ca:	9505      	str	r5, [sp, #20]
     7cc:	9506      	str	r5, [sp, #24]
     7ce:	9507      	str	r5, [sp, #28]
     7d0:	f8ad b016 	strh.w	fp, [sp, #22]
     7d4:	f8ad a018 	strh.w	sl, [sp, #24]
     7d8:	f003 f81c 	bl	3814 <bt_le_ext_adv_start>
     7dc:	e7c1      	b.n	762 <main+0x32>
     7de:	bf00      	nop
     7e0:	0000cc7c 	.word	0x0000cc7c
     7e4:	20002adc 	.word	0x20002adc
     7e8:	20004ccc 	.word	0x20004ccc
     7ec:	000006cd 	.word	0x000006cd
     7f0:	0000cc0f 	.word	0x0000cc0f
     7f4:	20004dbc 	.word	0x20004dbc
     7f8:	0000cc94 	.word	0x0000cc94

000007fc <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     7fc:	4b05      	ldr	r3, [pc, #20]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
     7fe:	681b      	ldr	r3, [r3, #0]
     800:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     802:	bf01      	itttt	eq
     804:	4b04      	ldreq	r3, [pc, #16]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     806:	6818      	ldreq	r0, [r3, #0]
     808:	fab0 f080 	clzeq	r0, r0
     80c:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     80e:	bf18      	it	ne
     810:	2000      	movne	r0, #0
}
     812:	4770      	bx	lr
     814:	10000130 	.word	0x10000130
     818:	10000134 	.word	0x10000134

0000081c <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     81c:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     81e:	f04f 0320 	mov.w	r3, #32
     822:	f3ef 8111 	mrs	r1, BASEPRI
     826:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     82a:	f7ff ffe7 	bl	7fc <errata_103>
     82e:	b140      	cbz	r0, 842 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     834:	2200      	movs	r2, #0
     836:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     83a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     83e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     842:	f7ff ffdb 	bl	7fc <errata_103>
     846:	b110      	cbz	r0, 84e <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     848:	4b38      	ldr	r3, [pc, #224]	; (92c <nordicsemi_nrf52_init+0x110>)
     84a:	4a39      	ldr	r2, [pc, #228]	; (930 <nordicsemi_nrf52_init+0x114>)
     84c:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     84e:	f7ff ffd5 	bl	7fc <errata_103>
     852:	b118      	cbz	r0, 85c <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     854:	4b37      	ldr	r3, [pc, #220]	; (934 <nordicsemi_nrf52_init+0x118>)
     856:	22fb      	movs	r2, #251	; 0xfb
     858:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     85c:	f7ff ffce 	bl	7fc <errata_103>
     860:	b148      	cbz	r0, 876 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     862:	4835      	ldr	r0, [pc, #212]	; (938 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     864:	4b35      	ldr	r3, [pc, #212]	; (93c <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     866:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     868:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     86a:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     86e:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     872:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     874:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     876:	f7ff ffc1 	bl	7fc <errata_103>
     87a:	b118      	cbz	r0, 884 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     87c:	4b30      	ldr	r3, [pc, #192]	; (940 <nordicsemi_nrf52_init+0x124>)
     87e:	f44f 7200 	mov.w	r2, #512	; 0x200
     882:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     884:	f7ff ffba 	bl	7fc <errata_103>
     888:	b148      	cbz	r0, 89e <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     88a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     88e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     892:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     894:	bf44      	itt	mi
     896:	f06f 0201 	mvnmi.w	r2, #1
     89a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     89e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     8a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     8a6:	2a00      	cmp	r2, #0
     8a8:	db03      	blt.n	8b2 <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     8aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     8ae:	2b00      	cmp	r3, #0
     8b0:	da2f      	bge.n	912 <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     8b2:	4b24      	ldr	r3, [pc, #144]	; (944 <nordicsemi_nrf52_init+0x128>)
     8b4:	2201      	movs	r2, #1
     8b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8ba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     8be:	2a00      	cmp	r2, #0
     8c0:	d0fb      	beq.n	8ba <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     8c2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     8c6:	2112      	movs	r1, #18
     8c8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8cc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     8d0:	2a00      	cmp	r2, #0
     8d2:	d0fb      	beq.n	8cc <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     8d4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     8d8:	2212      	movs	r2, #18
     8da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8de:	4b19      	ldr	r3, [pc, #100]	; (944 <nordicsemi_nrf52_init+0x128>)
     8e0:	461a      	mov	r2, r3
     8e2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     8e6:	2900      	cmp	r1, #0
     8e8:	d0fb      	beq.n	8e2 <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     8ea:	2100      	movs	r1, #0
     8ec:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8f0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     8f4:	2b00      	cmp	r3, #0
     8f6:	d0fb      	beq.n	8f0 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     8f8:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     8fc:	4912      	ldr	r1, [pc, #72]	; (948 <nordicsemi_nrf52_init+0x12c>)
     8fe:	4b13      	ldr	r3, [pc, #76]	; (94c <nordicsemi_nrf52_init+0x130>)
     900:	68ca      	ldr	r2, [r1, #12]
     902:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     906:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     908:	60cb      	str	r3, [r1, #12]
     90a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     90e:	bf00      	nop
     910:	e7fd      	b.n	90e <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     912:	4b0d      	ldr	r3, [pc, #52]	; (948 <nordicsemi_nrf52_init+0x12c>)
     914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     918:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     91a:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     91c:	4b0c      	ldr	r3, [pc, #48]	; (950 <nordicsemi_nrf52_init+0x134>)
     91e:	4a0d      	ldr	r2, [pc, #52]	; (954 <nordicsemi_nrf52_init+0x138>)
     920:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     922:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     926:	2000      	movs	r0, #0
     928:	bd08      	pop	{r3, pc}
     92a:	bf00      	nop
     92c:	4000568c 	.word	0x4000568c
     930:	00038148 	.word	0x00038148
     934:	4000f000 	.word	0x4000f000
     938:	40000ee4 	.word	0x40000ee4
     93c:	10000258 	.word	0x10000258
     940:	40029640 	.word	0x40029640
     944:	4001e000 	.word	0x4001e000
     948:	e000ed00 	.word	0xe000ed00
     94c:	05fa0004 	.word	0x05fa0004
     950:	20004e7c 	.word	0x20004e7c
     954:	03d09000 	.word	0x03d09000

00000958 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     958:	4808      	ldr	r0, [pc, #32]	; (97c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     95a:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     95c:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     95e:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     960:	d80b      	bhi.n	97a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     962:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     964:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     966:	d008      	beq.n	97a <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     968:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     96a:	f00b fb8b 	bl	c084 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     96e:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     972:	4903      	ldr	r1, [pc, #12]	; (980 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     978:	600a      	str	r2, [r1, #0]

0000097a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     97a:	4770      	bx	lr
    ldr r0, =_kernel
     97c:	200029b0 	.word	0x200029b0
    ldr r1, =_SCS_ICSR
     980:	e000ed04 	.word	0xe000ed04

00000984 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     984:	4804      	ldr	r0, [pc, #16]	; (998 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     986:	2300      	movs	r3, #0
     988:	2120      	movs	r1, #32
     98a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     98c:	3301      	adds	r3, #1
     98e:	2b2e      	cmp	r3, #46	; 0x2e
     990:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     994:	d1f9      	bne.n	98a <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     996:	4770      	bx	lr
     998:	e000e100 	.word	0xe000e100

0000099c <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     99c:	4a08      	ldr	r2, [pc, #32]	; (9c0 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     99e:	4909      	ldr	r1, [pc, #36]	; (9c4 <__swap+0x28>)
	_current->arch.basepri = key;
     9a0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     9a2:	6809      	ldr	r1, [r1, #0]
     9a4:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     9a6:	4908      	ldr	r1, [pc, #32]	; (9c8 <__swap+0x2c>)
	_current->arch.basepri = key;
     9a8:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     9aa:	684b      	ldr	r3, [r1, #4]
     9ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     9b0:	604b      	str	r3, [r1, #4]
     9b2:	2300      	movs	r3, #0
     9b4:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     9b8:	6893      	ldr	r3, [r2, #8]
}
     9ba:	6e58      	ldr	r0, [r3, #100]	; 0x64
     9bc:	4770      	bx	lr
     9be:	bf00      	nop
     9c0:	200029b0 	.word	0x200029b0
     9c4:	0000eecc 	.word	0x0000eecc
     9c8:	e000ed00 	.word	0xe000ed00

000009cc <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     9cc:	490e      	ldr	r1, [pc, #56]	; (a08 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     9ce:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     9d0:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     9d2:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     9d4:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     9d8:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     9dc:	4f0b      	ldr	r7, [pc, #44]	; (a0c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     9de:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     9e2:	2020      	movs	r0, #32
    msr BASEPRI, r0
     9e4:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     9e8:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     9ea:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     9ec:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     9ee:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     9f0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     9f2:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     9f4:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     9f8:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     9fc:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     a00:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     a04:	4770      	bx	lr
     a06:	0000      	.short	0x0000
    ldr r1, =_kernel
     a08:	200029b0 	.word	0x200029b0
    ldr v4, =_SCS_ICSR
     a0c:	e000ed04 	.word	0xe000ed04

00000a10 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     a10:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     a14:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     a16:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     a1a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     a1e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     a20:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     a24:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     a28:	d001      	beq.n	a2e <_context_switch>

    cmp r1, #2
     a2a:	2902      	cmp	r1, #2
    beq _oops
     a2c:	d007      	beq.n	a3e <_oops>

00000a2e <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     a2e:	4040      	eors	r0, r0
    msr BASEPRI, r0
     a30:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     a34:	4904      	ldr	r1, [pc, #16]	; (a48 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     a3a:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     a3c:	4770      	bx	lr

00000a3e <_oops>:

_oops:
    push {lr}
     a3e:	b500      	push	{lr}
    blx _do_kernel_oops
     a40:	f000 fa2c 	bl	e9c <_do_kernel_oops>
    pop {pc}
     a44:	bd00      	pop	{pc}
     a46:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     a48:	e000ed04 	.word	0xe000ed04

00000a4c <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     a4c:	b510      	push	{r4, lr}
     a4e:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     a50:	f00b faee 	bl	c030 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     a54:	6822      	ldr	r2, [r4, #0]
     a56:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     a5c:	4801      	ldr	r0, [pc, #4]	; (a64 <_FaultThreadShow.isra.2+0x18>)
     a5e:	f000 bca9 	b.w	13b4 <printk>
     a62:	bf00      	nop
     a64:	0000ce0d 	.word	0x0000ce0d

00000a68 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     a68:	b510      	push	{r4, lr}
     a6a:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     a6c:	481a      	ldr	r0, [pc, #104]	; (ad8 <_UsageFault+0x70>)
     a6e:	f000 fca1 	bl	13b4 <printk>

	_FaultThreadShow(esf);
     a72:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     a76:	4c19      	ldr	r4, [pc, #100]	; (adc <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     a78:	f7ff ffe8 	bl	a4c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     a7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a7e:	019a      	lsls	r2, r3, #6
     a80:	d502      	bpl.n	a88 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     a82:	4817      	ldr	r0, [pc, #92]	; (ae0 <_UsageFault+0x78>)
     a84:	f000 fc96 	bl	13b4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     a88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a8a:	01db      	lsls	r3, r3, #7
     a8c:	d502      	bpl.n	a94 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     a8e:	4815      	ldr	r0, [pc, #84]	; (ae4 <_UsageFault+0x7c>)
     a90:	f000 fc90 	bl	13b4 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a96:	0318      	lsls	r0, r3, #12
     a98:	d502      	bpl.n	aa0 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     a9a:	4813      	ldr	r0, [pc, #76]	; (ae8 <_UsageFault+0x80>)
     a9c:	f000 fc8a 	bl	13b4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     aa0:	4c0e      	ldr	r4, [pc, #56]	; (adc <_UsageFault+0x74>)
     aa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aa4:	0359      	lsls	r1, r3, #13
     aa6:	d502      	bpl.n	aae <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     aa8:	4810      	ldr	r0, [pc, #64]	; (aec <_UsageFault+0x84>)
     aaa:	f000 fc83 	bl	13b4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ab0:	039a      	lsls	r2, r3, #14
     ab2:	d502      	bpl.n	aba <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     ab4:	480e      	ldr	r0, [pc, #56]	; (af0 <_UsageFault+0x88>)
     ab6:	f000 fc7d 	bl	13b4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     aba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     abc:	03db      	lsls	r3, r3, #15
     abe:	d502      	bpl.n	ac6 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     ac0:	480c      	ldr	r0, [pc, #48]	; (af4 <_UsageFault+0x8c>)
     ac2:	f000 fc77 	bl	13b4 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     ac6:	4a05      	ldr	r2, [pc, #20]	; (adc <_UsageFault+0x74>)
     ac8:	6a93      	ldr	r3, [r2, #40]	; 0x28
     aca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     ace:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     ad2:	6293      	str	r3, [r2, #40]	; 0x28
     ad4:	bd10      	pop	{r4, pc}
     ad6:	bf00      	nop
     ad8:	0000cf0e 	.word	0x0000cf0e
     adc:	e000ed00 	.word	0xe000ed00
     ae0:	0000cf27 	.word	0x0000cf27
     ae4:	0000cf3b 	.word	0x0000cf3b
     ae8:	0000cf56 	.word	0x0000cf56
     aec:	0000cf75 	.word	0x0000cf75
     af0:	0000cf9b 	.word	0x0000cf9b
     af4:	0000cfb6 	.word	0x0000cfb6

00000af8 <_MpuFault>:
{
     af8:	b538      	push	{r3, r4, r5, lr}
     afa:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     afc:	4819      	ldr	r0, [pc, #100]	; (b64 <_MpuFault+0x6c>)
{
     afe:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     b00:	f000 fc58 	bl	13b4 <printk>
	_FaultThreadShow(esf);
     b04:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     b08:	4c17      	ldr	r4, [pc, #92]	; (b68 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     b0a:	f7ff ff9f 	bl	a4c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     b0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b10:	06d9      	lsls	r1, r3, #27
     b12:	d504      	bpl.n	b1e <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     b14:	4815      	ldr	r0, [pc, #84]	; (b6c <_MpuFault+0x74>)
}
     b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     b1a:	f000 bc4b 	b.w	13b4 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     b1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b20:	071a      	lsls	r2, r3, #28
     b22:	d501      	bpl.n	b28 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     b24:	4812      	ldr	r0, [pc, #72]	; (b70 <_MpuFault+0x78>)
     b26:	e7f6      	b.n	b16 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     b28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b2a:	079b      	lsls	r3, r3, #30
     b2c:	d50f      	bpl.n	b4e <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     b2e:	4811      	ldr	r0, [pc, #68]	; (b74 <_MpuFault+0x7c>)
     b30:	f000 fc40 	bl	13b4 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b38:	0618      	lsls	r0, r3, #24
     b3a:	d512      	bpl.n	b62 <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     b3c:	480e      	ldr	r0, [pc, #56]	; (b78 <_MpuFault+0x80>)
     b3e:	f000 fc39 	bl	13b4 <printk>
			if (fromHardFault) {
     b42:	b175      	cbz	r5, b62 <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     b44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     b4a:	62a3      	str	r3, [r4, #40]	; 0x28
     b4c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b50:	07da      	lsls	r2, r3, #31
     b52:	d501      	bpl.n	b58 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     b54:	4809      	ldr	r0, [pc, #36]	; (b7c <_MpuFault+0x84>)
     b56:	e7de      	b.n	b16 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     b58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b5a:	069b      	lsls	r3, r3, #26
     b5c:	d501      	bpl.n	b62 <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     b5e:	4808      	ldr	r0, [pc, #32]	; (b80 <_MpuFault+0x88>)
     b60:	e7d9      	b.n	b16 <_MpuFault+0x1e>
     b62:	bd38      	pop	{r3, r4, r5, pc}
     b64:	0000ce57 	.word	0x0000ce57
     b68:	e000ed00 	.word	0xe000ed00
     b6c:	0000ce6e 	.word	0x0000ce6e
     b70:	0000ce80 	.word	0x0000ce80
     b74:	0000ce94 	.word	0x0000ce94
     b78:	0000cead 	.word	0x0000cead
     b7c:	0000cebe 	.word	0x0000cebe
     b80:	0000cede 	.word	0x0000cede

00000b84 <_BusFault>:
{
     b84:	b538      	push	{r3, r4, r5, lr}
     b86:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     b88:	481d      	ldr	r0, [pc, #116]	; (c00 <_BusFault+0x7c>)
{
     b8a:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     b8c:	f000 fc12 	bl	13b4 <printk>
	_FaultThreadShow(esf);
     b90:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     b94:	4c1b      	ldr	r4, [pc, #108]	; (c04 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     b96:	f7ff ff59 	bl	a4c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b9c:	04d8      	lsls	r0, r3, #19
     b9e:	d504      	bpl.n	baa <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     ba0:	4819      	ldr	r0, [pc, #100]	; (c08 <_BusFault+0x84>)
}
     ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     ba6:	f000 bc05 	b.w	13b4 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     baa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bac:	0519      	lsls	r1, r3, #20
     bae:	d501      	bpl.n	bb4 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     bb0:	4816      	ldr	r0, [pc, #88]	; (c0c <_BusFault+0x88>)
     bb2:	e7f6      	b.n	ba2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     bb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bb6:	059a      	lsls	r2, r3, #22
     bb8:	d514      	bpl.n	be4 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     bba:	4815      	ldr	r0, [pc, #84]	; (c10 <_BusFault+0x8c>)
     bbc:	f000 fbfa 	bl	13b4 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     bc0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     bc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bc4:	041b      	lsls	r3, r3, #16
     bc6:	d507      	bpl.n	bd8 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     bc8:	4812      	ldr	r0, [pc, #72]	; (c14 <_BusFault+0x90>)
     bca:	f000 fbf3 	bl	13b4 <printk>
			if (fromHardFault) {
     bce:	b11d      	cbz	r5, bd8 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     bd6:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     bd8:	4b0a      	ldr	r3, [pc, #40]	; (c04 <_BusFault+0x80>)
     bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bdc:	0558      	lsls	r0, r3, #21
     bde:	d50e      	bpl.n	bfe <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     be0:	480d      	ldr	r0, [pc, #52]	; (c18 <_BusFault+0x94>)
     be2:	e7de      	b.n	ba2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     be4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     be6:	0559      	lsls	r1, r3, #21
     be8:	d4fa      	bmi.n	be0 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     bea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bec:	05da      	lsls	r2, r3, #23
     bee:	d501      	bpl.n	bf4 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     bf0:	480a      	ldr	r0, [pc, #40]	; (c1c <_BusFault+0x98>)
     bf2:	e7d6      	b.n	ba2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     bf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bf6:	049b      	lsls	r3, r3, #18
     bf8:	d501      	bpl.n	bfe <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     bfa:	4809      	ldr	r0, [pc, #36]	; (c20 <_BusFault+0x9c>)
     bfc:	e7d1      	b.n	ba2 <_BusFault+0x1e>
     bfe:	bd38      	pop	{r3, r4, r5, pc}
     c00:	0000ccd4 	.word	0x0000ccd4
     c04:	e000ed00 	.word	0xe000ed00
     c08:	0000ce6e 	.word	0x0000ce6e
     c0c:	0000ce80 	.word	0x0000ce80
     c10:	0000cceb 	.word	0x0000cceb
     c14:	0000cead 	.word	0x0000cead
     c18:	0000cd05 	.word	0x0000cd05
     c1c:	0000cd21 	.word	0x0000cd21
     c20:	0000cede 	.word	0x0000cede

00000c24 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     c24:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     c26:	4d27      	ldr	r5, [pc, #156]	; (cc4 <_Fault+0xa0>)
     c28:	686b      	ldr	r3, [r5, #4]
     c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     c2e:	1eda      	subs	r2, r3, #3
{
     c30:	4604      	mov	r4, r0
	switch (fault) {
     c32:	2a09      	cmp	r2, #9
     c34:	d83a      	bhi.n	cac <_Fault+0x88>
     c36:	e8df f002 	tbb	[pc, r2]
     c3a:	3305      	.short	0x3305
     c3c:	39392f35 	.word	0x39392f35
     c40:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     c44:	4820      	ldr	r0, [pc, #128]	; (cc8 <_Fault+0xa4>)
     c46:	f000 fbb5 	bl	13b4 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     c4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c4c:	079a      	lsls	r2, r3, #30
     c4e:	d503      	bpl.n	c58 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     c50:	481e      	ldr	r0, [pc, #120]	; (ccc <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     c52:	f000 fbaf 	bl	13b4 <printk>
     c56:	e00c      	b.n	c72 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     c58:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c5a:	005b      	lsls	r3, r3, #1
     c5c:	d509      	bpl.n	c72 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     c5e:	481c      	ldr	r0, [pc, #112]	; (cd0 <_Fault+0xac>)
     c60:	f000 fba8 	bl	13b4 <printk>
		if (SCB_MMFSR) {
     c64:	4b1b      	ldr	r3, [pc, #108]	; (cd4 <_Fault+0xb0>)
     c66:	781b      	ldrb	r3, [r3, #0]
     c68:	b14b      	cbz	r3, c7e <_Fault+0x5a>
			_MpuFault(esf, 1);
     c6a:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     c6c:	4620      	mov	r0, r4
     c6e:	f7ff ff43 	bl	af8 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     c72:	4621      	mov	r1, r4
     c74:	2000      	movs	r0, #0
}
     c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     c7a:	f000 b913 	b.w	ea4 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     c7e:	4b16      	ldr	r3, [pc, #88]	; (cd8 <_Fault+0xb4>)
     c80:	781b      	ldrb	r3, [r3, #0]
     c82:	b123      	cbz	r3, c8e <_Fault+0x6a>
			_BusFault(esf, 1);
     c84:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     c86:	4620      	mov	r0, r4
     c88:	f7ff ff7c 	bl	b84 <_BusFault>
     c8c:	e7f1      	b.n	c72 <_Fault+0x4e>
		} else if (SCB_UFSR) {
     c8e:	4b13      	ldr	r3, [pc, #76]	; (cdc <_Fault+0xb8>)
     c90:	881b      	ldrh	r3, [r3, #0]
     c92:	b29b      	uxth	r3, r3
     c94:	2b00      	cmp	r3, #0
     c96:	d0ec      	beq.n	c72 <_Fault+0x4e>
		_UsageFault(esf);
     c98:	4620      	mov	r0, r4
     c9a:	f7ff fee5 	bl	a68 <_UsageFault>
     c9e:	e7e8      	b.n	c72 <_Fault+0x4e>
		_MpuFault(esf, 0);
     ca0:	2100      	movs	r1, #0
     ca2:	e7e3      	b.n	c6c <_Fault+0x48>
		_BusFault(esf, 0);
     ca4:	2100      	movs	r1, #0
     ca6:	e7ee      	b.n	c86 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     ca8:	480d      	ldr	r0, [pc, #52]	; (ce0 <_Fault+0xbc>)
     caa:	e7d2      	b.n	c52 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     cac:	480d      	ldr	r0, [pc, #52]	; (ce4 <_Fault+0xc0>)
     cae:	490e      	ldr	r1, [pc, #56]	; (ce8 <_Fault+0xc4>)
     cb0:	f1a3 0210 	sub.w	r2, r3, #16
     cb4:	2b0f      	cmp	r3, #15
     cb6:	bfd8      	it	le
     cb8:	4601      	movle	r1, r0
     cba:	480c      	ldr	r0, [pc, #48]	; (cec <_Fault+0xc8>)
     cbc:	f000 fb7a 	bl	13b4 <printk>
     cc0:	e7d7      	b.n	c72 <_Fault+0x4e>
     cc2:	bf00      	nop
     cc4:	e000ed00 	.word	0xe000ed00
     cc8:	0000cd68 	.word	0x0000cd68
     ccc:	0000cd80 	.word	0x0000cd80
     cd0:	0000cda2 	.word	0x0000cda2
     cd4:	e000ed28 	.word	0xe000ed28
     cd8:	e000ed29 	.word	0xe000ed29
     cdc:	e000ed2a 	.word	0xe000ed2a
     ce0:	0000cdc2 	.word	0x0000cdc2
     ce4:	0000cd3a 	.word	0x0000cd3a
     ce8:	0000cd4f 	.word	0x0000cd4f
     cec:	0000cdf9 	.word	0x0000cdf9

00000cf0 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     cf0:	4a02      	ldr	r2, [pc, #8]	; (cfc <_FaultInit+0xc>)
     cf2:	6953      	ldr	r3, [r2, #20]
     cf4:	f043 0310 	orr.w	r3, r3, #16
     cf8:	6153      	str	r3, [r2, #20]
     cfa:	4770      	bx	lr
     cfc:	e000ed00 	.word	0xe000ed00

00000d00 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     d00:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d02:	2b00      	cmp	r3, #0
     d04:	db08      	blt.n	d18 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d06:	2201      	movs	r2, #1
     d08:	f000 001f 	and.w	r0, r0, #31
     d0c:	fa02 f000 	lsl.w	r0, r2, r0
     d10:	095b      	lsrs	r3, r3, #5
     d12:	4a02      	ldr	r2, [pc, #8]	; (d1c <_arch_irq_enable+0x1c>)
     d14:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d18:	4770      	bx	lr
     d1a:	bf00      	nop
     d1c:	e000e100 	.word	0xe000e100

00000d20 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     d20:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d22:	2b00      	cmp	r3, #0
     d24:	db0d      	blt.n	d42 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d26:	2201      	movs	r2, #1
     d28:	095b      	lsrs	r3, r3, #5
     d2a:	f000 001f 	and.w	r0, r0, #31
     d2e:	fa02 f000 	lsl.w	r0, r2, r0
     d32:	3320      	adds	r3, #32
     d34:	4a03      	ldr	r2, [pc, #12]	; (d44 <_arch_irq_disable+0x24>)
     d36:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d3e:	f3bf 8f6f 	isb	sy
     d42:	4770      	bx	lr
     d44:	e000e100 	.word	0xe000e100

00000d48 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     d48:	0942      	lsrs	r2, r0, #5
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <_arch_irq_is_enabled+0x18>)
     d4c:	f000 001f 	and.w	r0, r0, #31
     d50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d54:	2301      	movs	r3, #1
     d56:	fa03 f000 	lsl.w	r0, r3, r0
}
     d5a:	4010      	ands	r0, r2
     d5c:	4770      	bx	lr
     d5e:	bf00      	nop
     d60:	e000e100 	.word	0xe000e100

00000d64 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     d64:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d66:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d68:	bfa8      	it	ge
     d6a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     d6e:	f101 0101 	add.w	r1, r1, #1
     d72:	ea4f 1141 	mov.w	r1, r1, lsl #5
     d76:	bfad      	iteet	ge
     d78:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d7c:	f000 000f 	andlt.w	r0, r0, #15
     d80:	4b03      	ldrlt	r3, [pc, #12]	; (d90 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d82:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d84:	bfb6      	itet	lt
     d86:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d88:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d8c:	5419      	strblt	r1, [r3, r0]
     d8e:	4770      	bx	lr
     d90:	e000ed14 	.word	0xe000ed14

00000d94 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     d94:	f000 b842 	b.w	e1c <__bus_fault>

00000d98 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     d98:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     d9a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     d9c:	4b04      	ldr	r3, [pc, #16]	; (db0 <_arch_isr_direct_pm+0x18>)
     d9e:	6998      	ldr	r0, [r3, #24]
     da0:	b118      	cbz	r0, daa <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     da2:	2200      	movs	r2, #0
     da4:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     da6:	f00a fd91 	bl	b8cc <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     daa:	b662      	cpsie	i
     dac:	bd08      	pop	{r3, pc}
     dae:	bf00      	nop
     db0:	200029b0 	.word	0x200029b0

00000db4 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     db6:	460c      	mov	r4, r1
     db8:	4616      	mov	r6, r2
     dba:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     dbc:	2204      	movs	r2, #4
     dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     dc0:	9909      	ldr	r1, [sp, #36]	; 0x24
     dc2:	4605      	mov	r5, r0
     dc4:	f00b fc5c 	bl	c680 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     dc8:	f1a6 0120 	sub.w	r1, r6, #32
     dcc:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     dce:	4a0c      	ldr	r2, [pc, #48]	; (e00 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     dd0:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     dd2:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     dd6:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     dd8:	f022 0201 	bic.w	r2, r2, #1
     ddc:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     dde:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     de0:	65ee      	str	r6, [r5, #92]	; 0x5c
     de2:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     de4:	9a06      	ldr	r2, [sp, #24]
     de6:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     de8:	9a07      	ldr	r2, [sp, #28]
     dea:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     dec:	9a08      	ldr	r2, [sp, #32]
     dee:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     df0:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     df2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     df6:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     df8:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     dfa:	662b      	str	r3, [r5, #96]	; 0x60
     dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dfe:	bf00      	nop
     e00:	0000c4f5 	.word	0x0000c4f5

00000e04 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     e04:	4901      	ldr	r1, [pc, #4]	; (e0c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     e06:	2210      	movs	r2, #16
	str r2, [r1]
     e08:	600a      	str	r2, [r1, #0]
	bx lr
     e0a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     e0c:	e000ed10 	.word	0xe000ed10

00000e10 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     e10:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e12:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     e16:	bf30      	wfi

	bx lr
     e18:	4770      	bx	lr
     e1a:	bf00      	nop

00000e1c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     e1c:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e1e:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     e22:	f8df c01c 	ldr.w	ip, [pc, #28]	; e40 <__bus_fault+0x24>
	ldr ip, [ip]
     e26:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     e2a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     e2e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     e30:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     e34:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     e38:	b500      	push	{lr}
	bl _Fault
     e3a:	f7ff fef3 	bl	c24 <_Fault>

	pop {pc}
     e3e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     e40:	e000ed04 	.word	0xe000ed04

00000e44 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     e44:	2804      	cmp	r0, #4
{
     e46:	b538      	push	{r3, r4, r5, lr}
     e48:	4604      	mov	r4, r0
     e4a:	460d      	mov	r5, r1
	switch (reason) {
     e4c:	d013      	beq.n	e76 <_NanoFatalErrorHandler+0x32>
     e4e:	2805      	cmp	r0, #5
     e50:	d013      	beq.n	e7a <_NanoFatalErrorHandler+0x36>
     e52:	2803      	cmp	r0, #3
     e54:	d113      	bne.n	e7e <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     e56:	480c      	ldr	r0, [pc, #48]	; (e88 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     e58:	f000 faac 	bl	13b4 <printk>
     e5c:	f00b f8e8 	bl	c030 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     e60:	69aa      	ldr	r2, [r5, #24]
     e62:	4601      	mov	r1, r0
     e64:	4809      	ldr	r0, [pc, #36]	; (e8c <_NanoFatalErrorHandler+0x48>)
     e66:	f000 faa5 	bl	13b4 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     e6a:	4629      	mov	r1, r5
     e6c:	4620      	mov	r0, r4
}
     e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     e72:	f000 b817 	b.w	ea4 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     e76:	4806      	ldr	r0, [pc, #24]	; (e90 <_NanoFatalErrorHandler+0x4c>)
     e78:	e7ee      	b.n	e58 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     e7a:	4806      	ldr	r0, [pc, #24]	; (e94 <_NanoFatalErrorHandler+0x50>)
     e7c:	e7ec      	b.n	e58 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     e7e:	4601      	mov	r1, r0
     e80:	4805      	ldr	r0, [pc, #20]	; (e98 <_NanoFatalErrorHandler+0x54>)
     e82:	f000 fa97 	bl	13b4 <printk>
		break;
     e86:	e7e9      	b.n	e5c <_NanoFatalErrorHandler+0x18>
     e88:	0000cfe2 	.word	0x0000cfe2
     e8c:	0000d060 	.word	0x0000d060
     e90:	0000d008 	.word	0x0000d008
     e94:	0000d022 	.word	0x0000d022
     e98:	0000d03d 	.word	0x0000d03d

00000e9c <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     e9c:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     e9e:	6800      	ldr	r0, [r0, #0]
     ea0:	f7ff bfd0 	b.w	e44 <_NanoFatalErrorHandler>

00000ea4 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     ea4:	2805      	cmp	r0, #5
{
     ea6:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     ea8:	d00c      	beq.n	ec4 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     eaa:	f00b fb0b 	bl	c4c4 <k_is_in_isr>
     eae:	b160      	cbz	r0, eca <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     eb0:	f00b fb08 	bl	c4c4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     eb4:	4b0c      	ldr	r3, [pc, #48]	; (ee8 <_SysFatalErrorHandler+0x44>)
     eb6:	490d      	ldr	r1, [pc, #52]	; (eec <_SysFatalErrorHandler+0x48>)
     eb8:	2800      	cmp	r0, #0
     eba:	bf08      	it	eq
     ebc:	4619      	moveq	r1, r3
     ebe:	480c      	ldr	r0, [pc, #48]	; (ef0 <_SysFatalErrorHandler+0x4c>)
     ec0:	f000 fa78 	bl	13b4 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     ec4:	f7ff ffa4 	bl	e10 <k_cpu_idle>
     ec8:	e7fc      	b.n	ec4 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     eca:	f00b fb0b 	bl	c4e4 <_is_thread_essential>
     ece:	2800      	cmp	r0, #0
     ed0:	d1ee      	bne.n	eb0 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     ed2:	4c08      	ldr	r4, [pc, #32]	; (ef4 <_SysFatalErrorHandler+0x50>)
     ed4:	4808      	ldr	r0, [pc, #32]	; (ef8 <_SysFatalErrorHandler+0x54>)
     ed6:	68a1      	ldr	r1, [r4, #8]
     ed8:	f000 fa6c 	bl	13b4 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     edc:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ee2:	f000 b80b 	b.w	efc <_impl_k_thread_abort>
     ee6:	bf00      	nop
     ee8:	0000d0a0 	.word	0x0000d0a0
     eec:	0000d09c 	.word	0x0000d09c
     ef0:	0000d0b1 	.word	0x0000d0b1
     ef4:	200029b0 	.word	0x200029b0
     ef8:	0000d0d1 	.word	0x0000d0d1

00000efc <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     efc:	b538      	push	{r3, r4, r5, lr}
     efe:	4605      	mov	r5, r0
	__asm__ volatile(
     f00:	f04f 0320 	mov.w	r3, #32
     f04:	f3ef 8411 	mrs	r4, BASEPRI
     f08:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     f0c:	f00b fb48 	bl	c5a0 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     f10:	4b0b      	ldr	r3, [pc, #44]	; (f40 <_impl_k_thread_abort+0x44>)
     f12:	689b      	ldr	r3, [r3, #8]
     f14:	429d      	cmp	r5, r3
     f16:	d10d      	bne.n	f34 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     f18:	4b0a      	ldr	r3, [pc, #40]	; (f44 <_impl_k_thread_abort+0x48>)
     f1a:	685a      	ldr	r2, [r3, #4]
     f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     f20:	b922      	cbnz	r2, f2c <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     f22:	f00b f8af 	bl	c084 <_update_time_slice_before_swap>

	return __swap(key);
     f26:	4620      	mov	r0, r4
     f28:	f7ff fd38 	bl	99c <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f2c:	685a      	ldr	r2, [r3, #4]
     f2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     f32:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     f34:	4620      	mov	r0, r4
}
     f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     f3a:	f00a bfdf 	b.w	befc <_reschedule_threads>
     f3e:	bf00      	nop
     f40:	200029b0 	.word	0x200029b0
     f44:	e000ed00 	.word	0xe000ed00

00000f48 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     f48:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     f4a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     f4c:	4a0b      	ldr	r2, [pc, #44]	; (f7c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     f4e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     f50:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     f52:	bf1e      	ittt	ne
	movne	r1, #0
     f54:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     f56:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     f58:	f00a fcb8 	blne	b8cc <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     f5c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     f5e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     f62:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     f66:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     f6a:	4905      	ldr	r1, [pc, #20]	; (f80 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     f6c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     f6e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     f70:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     f72:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     f76:	f7ff bcef 	b.w	958 <_ExcExit>
     f7a:	0000      	.short	0x0000
	ldr r2, =_kernel
     f7c:	200029b0 	.word	0x200029b0
	ldr r1, =_sw_isr_table
     f80:	000000f8 	.word	0x000000f8

00000f84 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f84:	2020      	movs	r0, #32
    msr BASEPRI, r0
     f86:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     f8a:	4805      	ldr	r0, [pc, #20]	; (fa0 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     f90:	1840      	adds	r0, r0, r1
    msr PSP, r0
     f92:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     f96:	2002      	movs	r0, #2
    msr CONTROL, r0
     f98:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     f9c:	f000 b806 	b.w	fac <_PrepC>
    ldr r0, =_interrupt_stack
     fa0:	200040c8 	.word	0x200040c8

00000fa4 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     fa4:	bf30      	wfi
    b _SysNmiOnReset
     fa6:	f7ff bffd 	b.w	fa4 <_SysNmiOnReset>
     faa:	bf00      	nop

00000fac <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     fac:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     fae:	4b07      	ldr	r3, [pc, #28]	; (fcc <_PrepC+0x20>)
     fb0:	4a07      	ldr	r2, [pc, #28]	; (fd0 <_PrepC+0x24>)
     fb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     fb6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     fb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fbc:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     fc0:	f00a fcb4 	bl	b92c <_bss_zero>
	_data_copy();
     fc4:	f00a fcbc 	bl	b940 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     fc8:	f00a fce2 	bl	b990 <_Cstart>
     fcc:	00000000 	.word	0x00000000
     fd0:	e000ed00 	.word	0xe000ed00

00000fd4 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     fd4:	b508      	push	{r3, lr}
	handler();
     fd6:	f7ff ffe5 	bl	fa4 <_SysNmiOnReset>
	_ExcExit();
}
     fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     fde:	f7ff bcbb 	b.w	958 <_ExcExit>
	...

00000fe4 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     fe4:	4b15      	ldr	r3, [pc, #84]	; (103c <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     fe6:	4916      	ldr	r1, [pc, #88]	; (1040 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     fe8:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     fea:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     fec:	680d      	ldr	r5, [r1, #0]
     fee:	f3c2 2207 	ubfx	r2, r2, #8, #8
     ff2:	4295      	cmp	r5, r2
     ff4:	d80f      	bhi.n	1016 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     ff6:	2200      	movs	r2, #0
     ff8:	6848      	ldr	r0, [r1, #4]
     ffa:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     ffc:	4295      	cmp	r5, r2
     ffe:	f100 000c 	add.w	r0, r0, #12
    1002:	d10a      	bne.n	101a <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1004:	2205      	movs	r2, #5
    1006:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    1008:	4b0e      	ldr	r3, [pc, #56]	; (1044 <arm_mpu_init+0x60>)
    100a:	2201      	movs	r2, #1
    100c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    100e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1012:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    1016:	2000      	movs	r0, #0
    1018:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    101a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    101e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    1022:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1024:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1028:	f041 0110 	orr.w	r1, r1, #16
    102c:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    102e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1032:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1034:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1036:	611c      	str	r4, [r3, #16]
    1038:	e7e0      	b.n	ffc <arm_mpu_init+0x18>
    103a:	bf00      	nop
    103c:	e000ed90 	.word	0xe000ed90
    1040:	20004e38 	.word	0x20004e38
    1044:	20000000 	.word	0x20000000

00001048 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1048:	2000      	movs	r0, #0
    104a:	4770      	bx	lr

0000104c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    104c:	680b      	ldr	r3, [r1, #0]
    104e:	3301      	adds	r3, #1
    1050:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1052:	4b01      	ldr	r3, [pc, #4]	; (1058 <char_out+0xc>)
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	4718      	bx	r3
    1058:	20004e80 	.word	0x20004e80

0000105c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    105c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1060:	b085      	sub	sp, #20
    1062:	469b      	mov	fp, r3
    1064:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1066:	f8df a090 	ldr.w	sl, [pc, #144]	; 10f8 <_printk_dec_ulong+0x9c>
    106a:	2c01      	cmp	r4, #1
    106c:	bfb8      	it	lt
    106e:	2401      	movlt	r4, #1
    1070:	2b01      	cmp	r3, #1
    1072:	bf0c      	ite	eq
    1074:	2330      	moveq	r3, #48	; 0x30
    1076:	2320      	movne	r3, #32
    1078:	4615      	mov	r5, r2
    107a:	4680      	mov	r8, r0
    107c:	4689      	mov	r9, r1
    107e:	9401      	str	r4, [sp, #4]
    1080:	9302      	str	r3, [sp, #8]
    1082:	2601      	movs	r6, #1
    1084:	270a      	movs	r7, #10
    1086:	2200      	movs	r2, #0
    1088:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    108c:	b90a      	cbnz	r2, 1092 <_printk_dec_ulong+0x36>
    108e:	45aa      	cmp	sl, r5
    1090:	d21f      	bcs.n	10d2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    1092:	fbb5 f0f4 	udiv	r0, r5, r4
    1096:	4649      	mov	r1, r9
    1098:	3030      	adds	r0, #48	; 0x30
    109a:	47c0      	blx	r8
			digits++;
    109c:	3601      	adds	r6, #1
			found_largest_digit = 1;
    109e:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    10a0:	3f01      	subs	r7, #1
	while (pos >= 9) {
    10a2:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    10a4:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    10a8:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    10ac:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    10b0:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    10b4:	d1e8      	bne.n	1088 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    10b6:	4649      	mov	r1, r9
    10b8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    10bc:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    10be:	f1bb 0f03 	cmp.w	fp, #3
    10c2:	d103      	bne.n	10cc <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    10c4:	9b01      	ldr	r3, [sp, #4]
    10c6:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    10c8:	2c00      	cmp	r4, #0
    10ca:	dc0f      	bgt.n	10ec <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    10cc:	b005      	add	sp, #20
    10ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    10d2:	9b01      	ldr	r3, [sp, #4]
    10d4:	42bb      	cmp	r3, r7
    10d6:	dbe3      	blt.n	10a0 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    10d8:	f1bb 0f02 	cmp.w	fp, #2
    10dc:	d8e0      	bhi.n	10a0 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    10de:	4649      	mov	r1, r9
    10e0:	9802      	ldr	r0, [sp, #8]
    10e2:	9203      	str	r2, [sp, #12]
			digits++;
    10e4:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    10e6:	47c0      	blx	r8
			digits++;
    10e8:	9a03      	ldr	r2, [sp, #12]
    10ea:	e7d9      	b.n	10a0 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    10ec:	4649      	mov	r1, r9
    10ee:	2020      	movs	r0, #32
    10f0:	47c0      	blx	r8
    10f2:	3c01      	subs	r4, #1
    10f4:	e7e8      	b.n	10c8 <_printk_dec_ulong+0x6c>
    10f6:	bf00      	nop
    10f8:	3b9ac9ff 	.word	0x3b9ac9ff

000010fc <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    10fc:	680a      	ldr	r2, [r1, #0]
    10fe:	688b      	ldr	r3, [r1, #8]
{
    1100:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    1102:	b112      	cbz	r2, 110a <str_out+0xe>
    1104:	684c      	ldr	r4, [r1, #4]
    1106:	42a3      	cmp	r3, r4
    1108:	db02      	blt.n	1110 <str_out+0x14>
		ctx->count++;
    110a:	3301      	adds	r3, #1
    110c:	608b      	str	r3, [r1, #8]
		return c;
    110e:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    1110:	1e65      	subs	r5, r4, #1
    1112:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1114:	bf0b      	itete	eq
    1116:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1118:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    111a:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    111c:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    111e:	bf0c      	ite	eq
    1120:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    1122:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    1124:	bd30      	pop	{r4, r5, pc}
	...

00001128 <__printk_hook_install>:
	_char_out = fn;
    1128:	4b01      	ldr	r3, [pc, #4]	; (1130 <__printk_hook_install+0x8>)
    112a:	6018      	str	r0, [r3, #0]
    112c:	4770      	bx	lr
    112e:	bf00      	nop
    1130:	20004e80 	.word	0x20004e80

00001134 <_vprintk>:
{
    1134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1138:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    113a:	f04f 0a00 	mov.w	sl, #0
{
    113e:	4606      	mov	r6, r0
    1140:	460f      	mov	r7, r1
    1142:	9204      	str	r2, [sp, #16]
    1144:	461c      	mov	r4, r3
	int min_width = -1;
    1146:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    114a:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    114c:	4655      	mov	r5, sl
	while (*fmt) {
    114e:	9b04      	ldr	r3, [sp, #16]
    1150:	7818      	ldrb	r0, [r3, #0]
    1152:	b910      	cbnz	r0, 115a <_vprintk+0x26>
}
    1154:	b009      	add	sp, #36	; 0x24
    1156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    115a:	b945      	cbnz	r5, 116e <_vprintk+0x3a>
			if (*fmt != '%') {
    115c:	2825      	cmp	r0, #37	; 0x25
    115e:	f000 810c 	beq.w	137a <_vprintk+0x246>
				out((int)*fmt, ctx);
    1162:	4639      	mov	r1, r7
    1164:	47b0      	blx	r6
		++fmt;
    1166:	9b04      	ldr	r3, [sp, #16]
    1168:	3301      	adds	r3, #1
    116a:	9304      	str	r3, [sp, #16]
    116c:	e7ef      	b.n	114e <_vprintk+0x1a>
			switch (*fmt) {
    116e:	2864      	cmp	r0, #100	; 0x64
    1170:	d061      	beq.n	1236 <_vprintk+0x102>
    1172:	d819      	bhi.n	11a8 <_vprintk+0x74>
    1174:	2839      	cmp	r0, #57	; 0x39
    1176:	d80a      	bhi.n	118e <_vprintk+0x5a>
    1178:	2831      	cmp	r0, #49	; 0x31
    117a:	d250      	bcs.n	121e <_vprintk+0xea>
    117c:	282d      	cmp	r0, #45	; 0x2d
    117e:	d03c      	beq.n	11fa <_vprintk+0xc6>
    1180:	2830      	cmp	r0, #48	; 0x30
    1182:	d03d      	beq.n	1200 <_vprintk+0xcc>
    1184:	2825      	cmp	r0, #37	; 0x25
    1186:	d108      	bne.n	119a <_vprintk+0x66>
				out((int)'%', ctx);
    1188:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    118a:	47b0      	blx	r6
    118c:	e06f      	b.n	126e <_vprintk+0x13a>
			switch (*fmt) {
    118e:	2858      	cmp	r0, #88	; 0x58
    1190:	f000 8089 	beq.w	12a6 <_vprintk+0x172>
    1194:	2863      	cmp	r0, #99	; 0x63
    1196:	f000 80ea 	beq.w	136e <_vprintk+0x23a>
				out((int)'%', ctx);
    119a:	4639      	mov	r1, r7
    119c:	2025      	movs	r0, #37	; 0x25
    119e:	47b0      	blx	r6
				out((int)*fmt, ctx);
    11a0:	9b04      	ldr	r3, [sp, #16]
    11a2:	4639      	mov	r1, r7
    11a4:	7818      	ldrb	r0, [r3, #0]
    11a6:	e7f0      	b.n	118a <_vprintk+0x56>
			switch (*fmt) {
    11a8:	2870      	cmp	r0, #112	; 0x70
    11aa:	d072      	beq.n	1292 <_vprintk+0x15e>
    11ac:	d806      	bhi.n	11bc <_vprintk+0x88>
    11ae:	2869      	cmp	r0, #105	; 0x69
    11b0:	d041      	beq.n	1236 <_vprintk+0x102>
    11b2:	286c      	cmp	r0, #108	; 0x6c
    11b4:	d03c      	beq.n	1230 <_vprintk+0xfc>
    11b6:	2868      	cmp	r0, #104	; 0x68
    11b8:	d0d5      	beq.n	1166 <_vprintk+0x32>
    11ba:	e7ee      	b.n	119a <_vprintk+0x66>
    11bc:	2875      	cmp	r0, #117	; 0x75
    11be:	d058      	beq.n	1272 <_vprintk+0x13e>
    11c0:	d817      	bhi.n	11f2 <_vprintk+0xbe>
    11c2:	2873      	cmp	r0, #115	; 0x73
    11c4:	d1e9      	bne.n	119a <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    11c6:	6823      	ldr	r3, [r4, #0]
    11c8:	f104 0b04 	add.w	fp, r4, #4
    11cc:	461c      	mov	r4, r3
				while (*s)
    11ce:	4625      	mov	r5, r4
    11d0:	f815 0b01 	ldrb.w	r0, [r5], #1
    11d4:	2800      	cmp	r0, #0
    11d6:	f040 80bf 	bne.w	1358 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    11da:	f1b8 0f03 	cmp.w	r8, #3
    11de:	f040 80d5 	bne.w	138c <_vprintk+0x258>
					int remaining = min_width - (s - start);
    11e2:	1ae4      	subs	r4, r4, r3
    11e4:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    11e8:	2c00      	cmp	r4, #0
    11ea:	f300 80bb 	bgt.w	1364 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    11ee:	465c      	mov	r4, fp
    11f0:	e03d      	b.n	126e <_vprintk+0x13a>
			switch (*fmt) {
    11f2:	2878      	cmp	r0, #120	; 0x78
    11f4:	d057      	beq.n	12a6 <_vprintk+0x172>
    11f6:	287a      	cmp	r0, #122	; 0x7a
    11f8:	e7de      	b.n	11b8 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    11fa:	f04f 0803 	mov.w	r8, #3
    11fe:	e7b2      	b.n	1166 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    1200:	f1b9 0f00 	cmp.w	r9, #0
    1204:	da0e      	bge.n	1224 <_vprintk+0xf0>
    1206:	f1b8 0f00 	cmp.w	r8, #0
    120a:	f000 80bc 	beq.w	1386 <_vprintk+0x252>
					min_width = *fmt - '0';
    120e:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1212:	f1b8 0f00 	cmp.w	r8, #0
    1216:	bf08      	it	eq
    1218:	f04f 0802 	moveq.w	r8, #2
    121c:	e7a3      	b.n	1166 <_vprintk+0x32>
				if (min_width < 0) {
    121e:	f1b9 0f00 	cmp.w	r9, #0
    1222:	dbf4      	blt.n	120e <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    1224:	230a      	movs	r3, #10
    1226:	fb03 0909 	mla	r9, r3, r9, r0
    122a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    122e:	e7f0      	b.n	1212 <_vprintk+0xde>
				long_ctr++;
    1230:	f10a 0a01 	add.w	sl, sl, #1
    1234:	e797      	b.n	1166 <_vprintk+0x32>
				if (long_ctr < 2) {
    1236:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    123a:	bfc5      	ittet	gt
    123c:	3407      	addgt	r4, #7
    123e:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    1242:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    1244:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    1246:	bfd4      	ite	le
    1248:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    124a:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    124e:	2d00      	cmp	r5, #0
    1250:	da05      	bge.n	125e <_vprintk+0x12a>
					out((int)'-', ctx);
    1252:	4639      	mov	r1, r7
    1254:	202d      	movs	r0, #45	; 0x2d
    1256:	47b0      	blx	r6
					d = -d;
    1258:	426d      	negs	r5, r5
					min_width--;
    125a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    125e:	f8cd 9000 	str.w	r9, [sp]
    1262:	4643      	mov	r3, r8
    1264:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    1266:	4639      	mov	r1, r7
    1268:	4630      	mov	r0, r6
    126a:	f7ff fef7 	bl	105c <_printk_dec_ulong>
			might_format = 0;
    126e:	2500      	movs	r5, #0
				break;
    1270:	e779      	b.n	1166 <_vprintk+0x32>
				if (long_ctr < 2) {
    1272:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    1276:	bfc5      	ittet	gt
    1278:	3407      	addgt	r4, #7
    127a:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    127e:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    1280:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    1282:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    1286:	bfcc      	ite	gt
    1288:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    128c:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    128e:	4643      	mov	r3, r8
    1290:	e7e9      	b.n	1266 <_vprintk+0x132>
				  out('0', ctx);
    1292:	4639      	mov	r1, r7
    1294:	2030      	movs	r0, #48	; 0x30
    1296:	47b0      	blx	r6
				  out('x', ctx);
    1298:	4639      	mov	r1, r7
    129a:	2078      	movs	r0, #120	; 0x78
    129c:	47b0      	blx	r6
				  min_width = 8;
    129e:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    12a2:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    12a6:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    12aa:	bfc7      	ittee	gt
    12ac:	3407      	addgt	r4, #7
    12ae:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    12b2:	6823      	ldrle	r3, [r4, #0]
    12b4:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    12b6:	bfc2      	ittt	gt
    12b8:	f103 0408 	addgt.w	r4, r3, #8
    12bc:	681b      	ldrgt	r3, [r3, #0]
    12be:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    12c0:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    12c4:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    12c8:	bfd8      	it	le
    12ca:	3404      	addle	r4, #4
	int digits = 0;
    12cc:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    12ce:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    12d0:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    12d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    12d6:	9b05      	ldr	r3, [sp, #20]
    12d8:	ea4f 008b 	mov.w	r0, fp, lsl #2
    12dc:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    12e0:	f010 000f 	ands.w	r0, r0, #15
    12e4:	d109      	bne.n	12fa <_vprintk+0x1c6>
    12e6:	9b07      	ldr	r3, [sp, #28]
    12e8:	b913      	cbnz	r3, 12f0 <_vprintk+0x1bc>
    12ea:	f1bb 0f00 	cmp.w	fp, #0
    12ee:	d122      	bne.n	1336 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    12f0:	f04f 0e30 	mov.w	lr, #48	; 0x30
    12f4:	e007      	b.n	1306 <_vprintk+0x1d2>
	for (; size; size--) {
    12f6:	9a06      	ldr	r2, [sp, #24]
    12f8:	e7eb      	b.n	12d2 <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    12fa:	2809      	cmp	r0, #9
    12fc:	bf8c      	ite	hi
    12fe:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    1302:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    1306:	4639      	mov	r1, r7
    1308:	4470      	add	r0, lr
    130a:	9206      	str	r2, [sp, #24]
    130c:	47b0      	blx	r6
			digits++;
    130e:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    1310:	9507      	str	r5, [sp, #28]
			digits++;
    1312:	3301      	adds	r3, #1
    1314:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1316:	f1bb 0f00 	cmp.w	fp, #0
    131a:	d1ec      	bne.n	12f6 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    131c:	f1b8 0f03 	cmp.w	r8, #3
    1320:	d1a5      	bne.n	126e <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    1322:	9b03      	ldr	r3, [sp, #12]
    1324:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1328:	2d00      	cmp	r5, #0
    132a:	dda0      	ble.n	126e <_vprintk+0x13a>
			out(' ', ctx);
    132c:	4639      	mov	r1, r7
    132e:	2020      	movs	r0, #32
    1330:	47b0      	blx	r6
    1332:	3d01      	subs	r5, #1
    1334:	e7f8      	b.n	1328 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    1336:	1e53      	subs	r3, r2, #1
    1338:	4591      	cmp	r9, r2
    133a:	9306      	str	r3, [sp, #24]
    133c:	dbeb      	blt.n	1316 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    133e:	f1b8 0f01 	cmp.w	r8, #1
    1342:	d103      	bne.n	134c <_vprintk+0x218>
				out('0', ctx);
    1344:	4639      	mov	r1, r7
    1346:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1348:	47b0      	blx	r6
    134a:	e7e4      	b.n	1316 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    134c:	f1b8 0f02 	cmp.w	r8, #2
    1350:	d1e1      	bne.n	1316 <_vprintk+0x1e2>
				out(' ', ctx);
    1352:	4639      	mov	r1, r7
    1354:	2020      	movs	r0, #32
    1356:	e7f7      	b.n	1348 <_vprintk+0x214>
					out((int)(*s++), ctx);
    1358:	4639      	mov	r1, r7
    135a:	9303      	str	r3, [sp, #12]
    135c:	462c      	mov	r4, r5
    135e:	47b0      	blx	r6
    1360:	9b03      	ldr	r3, [sp, #12]
    1362:	e734      	b.n	11ce <_vprintk+0x9a>
						out(' ', ctx);
    1364:	4639      	mov	r1, r7
    1366:	2020      	movs	r0, #32
    1368:	47b0      	blx	r6
    136a:	3c01      	subs	r4, #1
    136c:	e73c      	b.n	11e8 <_vprintk+0xb4>
				out(c, ctx);
    136e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    1370:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    1372:	4639      	mov	r1, r7
    1374:	47b0      	blx	r6
				int c = va_arg(ap, int);
    1376:	462c      	mov	r4, r5
    1378:	e779      	b.n	126e <_vprintk+0x13a>
				long_ctr = 0;
    137a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    137c:	46a8      	mov	r8, r5
				min_width = -1;
    137e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    1382:	2501      	movs	r5, #1
    1384:	e6ef      	b.n	1166 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    1386:	f04f 0801 	mov.w	r8, #1
    138a:	e6ec      	b.n	1166 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    138c:	465c      	mov	r4, fp
			might_format = 0;
    138e:	4605      	mov	r5, r0
    1390:	e6e9      	b.n	1166 <_vprintk+0x32>
	...

00001394 <vprintk>:
{
    1394:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    1396:	ac02      	add	r4, sp, #8
    1398:	2300      	movs	r3, #0
    139a:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    139e:	4602      	mov	r2, r0
    13a0:	460b      	mov	r3, r1
    13a2:	4803      	ldr	r0, [pc, #12]	; (13b0 <vprintk+0x1c>)
    13a4:	4621      	mov	r1, r4
    13a6:	f7ff fec5 	bl	1134 <_vprintk>
}
    13aa:	9801      	ldr	r0, [sp, #4]
    13ac:	b002      	add	sp, #8
    13ae:	bd10      	pop	{r4, pc}
    13b0:	0000104d 	.word	0x0000104d

000013b4 <printk>:
{
    13b4:	b40f      	push	{r0, r1, r2, r3}
    13b6:	b507      	push	{r0, r1, r2, lr}
    13b8:	a904      	add	r1, sp, #16
    13ba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    13be:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    13c0:	f7ff ffe8 	bl	1394 <vprintk>
}
    13c4:	b003      	add	sp, #12
    13c6:	f85d eb04 	ldr.w	lr, [sp], #4
    13ca:	b004      	add	sp, #16
    13cc:	4770      	bx	lr
	...

000013d0 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    13d0:	b40c      	push	{r2, r3}
    13d2:	b530      	push	{r4, r5, lr}
    13d4:	b085      	sub	sp, #20
    13d6:	ab08      	add	r3, sp, #32
    13d8:	4604      	mov	r4, r0
    13da:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    13de:	9001      	str	r0, [sp, #4]
    13e0:	9102      	str	r1, [sp, #8]
    13e2:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    13e4:	a901      	add	r1, sp, #4
    13e6:	4807      	ldr	r0, [pc, #28]	; (1404 <snprintk+0x34>)
	va_start(ap, fmt);
    13e8:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    13ea:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    13ec:	f7ff fea2 	bl	1134 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    13f0:	9803      	ldr	r0, [sp, #12]
    13f2:	9b02      	ldr	r3, [sp, #8]
    13f4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    13f6:	bfb8      	it	lt
    13f8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    13fa:	b005      	add	sp, #20
    13fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1400:	b002      	add	sp, #8
    1402:	4770      	bx	lr
    1404:	000010fd 	.word	0x000010fd

00001408 <vsnprintk>:

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1408:	b530      	push	{r4, r5, lr}
    140a:	b085      	sub	sp, #20
    140c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    140e:	9001      	str	r0, [sp, #4]
    1410:	9102      	str	r1, [sp, #8]
    1412:	2500      	movs	r5, #0

	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1414:	a901      	add	r1, sp, #4
    1416:	4805      	ldr	r0, [pc, #20]	; (142c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1418:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    141a:	f7ff fe8b 	bl	1134 <_vprintk>

	if (ctx.count < ctx.max) {
    141e:	9803      	ldr	r0, [sp, #12]
    1420:	9b02      	ldr	r3, [sp, #8]
    1422:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1424:	bfb8      	it	lt
    1426:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1428:	b005      	add	sp, #20
    142a:	bd30      	pop	{r4, r5, pc}
    142c:	000010fd 	.word	0x000010fd

00001430 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    1430:	4770      	bx	lr

00001432 <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1432:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    1434:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    1436:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1438:	bf9d      	ittte	ls
    143a:	6882      	ldrls	r2, [r0, #8]
    143c:	18d2      	addls	r2, r2, r3
    143e:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
    1442:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1446:	bf94      	ite	ls
    1448:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    144a:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
    144c:	4770      	bx	lr

0000144e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    144e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WrOff = pRing->WrOff;
    1452:	68c7      	ldr	r7, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
    1454:	6886      	ldr	r6, [r0, #8]
    1456:	1bf6      	subs	r6, r6, r7
  if (Rem > NumBytes) {
    1458:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    145a:	4604      	mov	r4, r0
    145c:	4688      	mov	r8, r1
    145e:	4615      	mov	r5, r2
    1460:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    1462:	d906      	bls.n	1472 <_WriteNoCheck+0x24>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    1464:	4438      	add	r0, r7
    1466:	f7ff f8d8 	bl	61a <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    146a:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
    146c:	60e5      	str	r5, [r4, #12]
    146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    1472:	4632      	mov	r2, r6
    1474:	4438      	add	r0, r7
    NumBytesAtOnce = NumBytes - Rem;
    1476:	1bad      	subs	r5, r5, r6
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    1478:	f7ff f8cf 	bl	61a <memcpy>
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    147c:	462a      	mov	r2, r5
    147e:	eb08 0106 	add.w	r1, r8, r6
    1482:	6860      	ldr	r0, [r4, #4]
    1484:	f7ff f8c9 	bl	61a <memcpy>
    1488:	e7f0      	b.n	146c <_WriteNoCheck+0x1e>

0000148a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    148a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    148e:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1490:	4606      	mov	r6, r0
    1492:	4689      	mov	r9, r1
    1494:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    1496:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    149a:	6934      	ldr	r4, [r6, #16]
    149c:	68b3      	ldr	r3, [r6, #8]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    149e:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    14a0:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    14a2:	bf28      	it	cs
    14a4:	18e4      	addcs	r4, r4, r3
    14a6:	3c01      	subs	r4, #1
    14a8:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    14aa:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    14ac:	42bc      	cmp	r4, r7
    14ae:	bf28      	it	cs
    14b0:	463c      	movcs	r4, r7
    14b2:	4294      	cmp	r4, r2
    14b4:	bf28      	it	cs
    14b6:	4614      	movcs	r4, r2
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    14b8:	4649      	mov	r1, r9
    14ba:	4428      	add	r0, r5
    14bc:	4622      	mov	r2, r4
    14be:	f7ff f8ac 	bl	61a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    14c2:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    14c4:	4425      	add	r5, r4
      WrOff = 0u;
    14c6:	429d      	cmp	r5, r3
    14c8:	bf08      	it	eq
    14ca:	2500      	moveq	r5, #0
  } while (NumBytes);
    14cc:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    14ce:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    14d0:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    14d2:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    14d4:	d1e1      	bne.n	149a <_WriteBlocking+0x10>
}
    14d6:	4640      	mov	r0, r8
    14d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000014dc <_DoInit>:
static void _DoInit(void) {
    14dc:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    14de:	4c11      	ldr	r4, [pc, #68]	; (1524 <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
    14e0:	4a11      	ldr	r2, [pc, #68]	; (1528 <_DoInit+0x4c>)
    14e2:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    14e4:	2303      	movs	r3, #3
    14e6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    14e8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    14ea:	4b10      	ldr	r3, [pc, #64]	; (152c <_DoInit+0x50>)
    14ec:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
    14ee:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    14f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    14f4:	4a0e      	ldr	r2, [pc, #56]	; (1530 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    14f6:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    14f8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    14fa:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    14fc:	2210      	movs	r2, #16
  p->aUp[0].RdOff         = 0u;
    14fe:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1500:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1502:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1504:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1506:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1508:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    150a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    150c:	4909      	ldr	r1, [pc, #36]	; (1534 <_DoInit+0x58>)
    150e:	1de0      	adds	r0, r4, #7
    1510:	f7ff f846 	bl	5a0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1514:	4908      	ldr	r1, [pc, #32]	; (1538 <_DoInit+0x5c>)
    1516:	4620      	mov	r0, r4
    1518:	f7ff f842 	bl	5a0 <strcpy>
  p->acID[6] = ' ';
    151c:	2320      	movs	r3, #32
    151e:	71a3      	strb	r3, [r4, #6]
    1520:	bd10      	pop	{r4, pc}
    1522:	bf00      	nop
    1524:	20002ae4 	.word	0x20002ae4
    1528:	0000d0f6 	.word	0x0000d0f6
    152c:	20000011 	.word	0x20000011
    1530:	20000001 	.word	0x20000001
    1534:	0000d0ff 	.word	0x0000d0ff
    1538:	0000d103 	.word	0x0000d103

0000153c <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    153e:	4c18      	ldr	r4, [pc, #96]	; (15a0 <SEGGER_RTT_WriteNoLock+0x64>)
    1540:	2318      	movs	r3, #24
    1542:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1546:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    154a:	4425      	add	r5, r4
  switch (pRing->Flags) {
    154c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    154e:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1550:	460f      	mov	r7, r1
    1552:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    1554:	d011      	beq.n	157a <SEGGER_RTT_WriteNoLock+0x3e>
    1556:	d303      	bcc.n	1560 <SEGGER_RTT_WriteNoLock+0x24>
    1558:	2c02      	cmp	r4, #2
    155a:	d01b      	beq.n	1594 <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    155c:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    155e:	e00a      	b.n	1576 <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    1560:	4628      	mov	r0, r5
    1562:	f7ff ff66 	bl	1432 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    1566:	42b0      	cmp	r0, r6
    1568:	d305      	bcc.n	1576 <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    156a:	4632      	mov	r2, r6
    156c:	4639      	mov	r1, r7
    156e:	4628      	mov	r0, r5
    1570:	f7ff ff6d 	bl	144e <_WriteNoCheck>
    1574:	4634      	mov	r4, r6
}
    1576:	4620      	mov	r0, r4
    1578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    157a:	4628      	mov	r0, r5
    157c:	f7ff ff59 	bl	1432 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    1580:	4286      	cmp	r6, r0
    1582:	4634      	mov	r4, r6
    1584:	bf28      	it	cs
    1586:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    1588:	4622      	mov	r2, r4
    158a:	4639      	mov	r1, r7
    158c:	4628      	mov	r0, r5
    158e:	f7ff ff5e 	bl	144e <_WriteNoCheck>
    break;
    1592:	e7f0      	b.n	1576 <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1594:	4628      	mov	r0, r5
}
    1596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    159a:	f7ff bf76 	b.w	148a <_WriteBlocking>
    159e:	bf00      	nop
    15a0:	20002ae4 	.word	0x20002ae4

000015a4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    15a4:	f7ff bf9a 	b.w	14dc <_DoInit>

000015a8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    15a8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    15aa:	4c11      	ldr	r4, [pc, #68]	; (15f0 <sys_rand32_get+0x48>)
    15ac:	f3bf 8f5b 	dmb	ish
    15b0:	6820      	ldr	r0, [r4, #0]
    15b2:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    15b6:	b960      	cbnz	r0, 15d2 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    15b8:	480e      	ldr	r0, [pc, #56]	; (15f4 <sys_rand32_get+0x4c>)
    15ba:	f00a f961 	bl	b880 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    15be:	f3bf 8f5b 	dmb	ish
    15c2:	e854 3f00 	ldrex	r3, [r4]
    15c6:	e844 0200 	strex	r2, r0, [r4]
    15ca:	2a00      	cmp	r2, #0
    15cc:	d1f9      	bne.n	15c2 <sys_rand32_get+0x1a>
    15ce:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    15d2:	6843      	ldr	r3, [r0, #4]
    15d4:	2204      	movs	r2, #4
    15d6:	681b      	ldr	r3, [r3, #0]
    15d8:	eb0d 0102 	add.w	r1, sp, r2
    15dc:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    15de:	2800      	cmp	r0, #0
    15e0:	da02      	bge.n	15e8 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    15e2:	f000 fcff 	bl	1fe4 <_timer_cycle_get_32>
    15e6:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    15e8:	9801      	ldr	r0, [sp, #4]
    15ea:	b002      	add	sp, #8
    15ec:	bd10      	pop	{r4, pc}
    15ee:	bf00      	nop
    15f0:	20000414 	.word	0x20000414
    15f4:	0000d10a 	.word	0x0000d10a

000015f8 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    15f8:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	SEGGER_RTT_Init();

	__printk_hook_install(rtt_console_out);
    15fa:	4c05      	ldr	r4, [pc, #20]	; (1610 <rtt_console_init+0x18>)
	SEGGER_RTT_Init();
    15fc:	f7ff ffd2 	bl	15a4 <SEGGER_RTT_Init>
	__printk_hook_install(rtt_console_out);
    1600:	4620      	mov	r0, r4
    1602:	f7ff fd91 	bl	1128 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    1606:	4620      	mov	r0, r4
    1608:	f7ff f85a 	bl	6c0 <__stdout_hook_install>

	return 0;
}
    160c:	2000      	movs	r0, #0
    160e:	bd10      	pop	{r4, pc}
    1610:	00001615 	.word	0x00001615

00001614 <rtt_console_out>:
{
    1614:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char c = (char)character;
    1616:	a902      	add	r1, sp, #8
{
    1618:	4604      	mov	r4, r0
	char c = (char)character;
    161a:	f801 0d01 	strb.w	r0, [r1, #-1]!
    161e:	f04f 0320 	mov.w	r3, #32
    1622:	f3ef 8511 	mrs	r5, BASEPRI
    1626:	f383 8811 	msr	BASEPRI, r3
	SEGGER_RTT_WriteNoLock(0, &c, 1);
    162a:	2201      	movs	r2, #1
    162c:	2000      	movs	r0, #0
    162e:	f7ff ff85 	bl	153c <SEGGER_RTT_WriteNoLock>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1632:	f385 8811 	msr	BASEPRI, r5
}
    1636:	4620      	mov	r0, r4
    1638:	b003      	add	sp, #12
    163a:	bd30      	pop	{r4, r5, pc}

0000163c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    163c:	b510      	push	{r4, lr}
	__asm__ volatile(
    163e:	f04f 0320 	mov.w	r3, #32
    1642:	f3ef 8211 	mrs	r2, BASEPRI
    1646:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    164a:	4c11      	ldr	r4, [pc, #68]	; (1690 <_m16src_stop+0x54>)
    164c:	7823      	ldrb	r3, [r4, #0]
    164e:	b923      	cbnz	r3, 165a <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1650:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1654:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1658:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    165a:	3b01      	subs	r3, #1
    165c:	b2db      	uxtb	r3, r3
    165e:	7023      	strb	r3, [r4, #0]
    1660:	b123      	cbz	r3, 166c <_m16src_stop+0x30>
    1662:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    1666:	f06f 000f 	mvn.w	r0, #15
    166a:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    166c:	4b09      	ldr	r3, [pc, #36]	; (1694 <_m16src_stop+0x58>)
    166e:	7818      	ldrb	r0, [r3, #0]
    1670:	2101      	movs	r1, #1
    1672:	b128      	cbz	r0, 1680 <_m16src_stop+0x44>
		m16src_ref++;
    1674:	7021      	strb	r1, [r4, #0]
    1676:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    167a:	f06f 000a 	mvn.w	r0, #10
    167e:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    1680:	7019      	strb	r1, [r3, #0]
    1682:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    168a:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    168c:	7018      	strb	r0, [r3, #0]

	return 0;
}
    168e:	bd10      	pop	{r4, pc}
    1690:	2000041a 	.word	0x2000041a
    1694:	20000419 	.word	0x20000419

00001698 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1698:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    169a:	2200      	movs	r2, #0
    169c:	4610      	mov	r0, r2
    169e:	2101      	movs	r1, #1
    16a0:	f7ff fb60 	bl	d64 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    16a4:	2000      	movs	r0, #0
    16a6:	f7ff fb2b 	bl	d00 <_arch_irq_enable>

	return 0;
}
    16aa:	2000      	movs	r0, #0
    16ac:	bd08      	pop	{r3, pc}
	...

000016b0 <_m16src_start>:
{
    16b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    16b2:	f04f 0220 	mov.w	r2, #32
    16b6:	f3ef 8311 	mrs	r3, BASEPRI
    16ba:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    16be:	4a25      	ldr	r2, [pc, #148]	; (1754 <_m16src_start+0xa4>)
    16c0:	7810      	ldrb	r0, [r2, #0]
    16c2:	1c44      	adds	r4, r0, #1
    16c4:	7014      	strb	r4, [r2, #0]
    16c6:	b160      	cbz	r0, 16e2 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    16c8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    16cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    16d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    16d8:	bf14      	ite	ne
    16da:	2000      	movne	r0, #0
    16dc:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    16e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    16e2:	4d1d      	ldr	r5, [pc, #116]	; (1758 <_m16src_start+0xa8>)
    16e4:	782f      	ldrb	r7, [r5, #0]
    16e6:	b12f      	cbz	r7, 16f4 <_m16src_start+0x44>
		m16src_ref--;
    16e8:	7010      	strb	r0, [r2, #0]
    16ea:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    16ee:	f06f 000a 	mvn.w	r0, #10
    16f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    16f4:	2601      	movs	r6, #1
    16f6:	702e      	strb	r6, [r5, #0]
    16f8:	f383 8811 	msr	BASEPRI, r3
    16fc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1700:	b319      	cbz	r1, 174a <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    1702:	4638      	mov	r0, r7
    1704:	f7ff fb0c 	bl	d20 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1708:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    170c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1710:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1714:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1716:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    171a:	b192      	cbz	r2, 1742 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    171c:	2200      	movs	r2, #0
    171e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1722:	4a0e      	ldr	r2, [pc, #56]	; (175c <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1724:	f013 0f01 	tst.w	r3, #1
    1728:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    172c:	bf08      	it	eq
    172e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1732:	2000      	movs	r0, #0
    1734:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1738:	f7ff fae2 	bl	d00 <_arch_irq_enable>
	m16src_grd = 0;
    173c:	2300      	movs	r3, #0
    173e:	702b      	strb	r3, [r5, #0]
    1740:	e7c4      	b.n	16cc <_m16src_start+0x1c>
			__WFE();
    1742:	bf20      	wfe
			__SEV();
    1744:	bf40      	sev
			__WFE();
    1746:	bf20      	wfe
    1748:	e7e5      	b.n	1716 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    174a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    174e:	6026      	str	r6, [r4, #0]
    1750:	e7f4      	b.n	173c <_m16src_start+0x8c>
    1752:	bf00      	nop
    1754:	2000041a 	.word	0x2000041a
    1758:	20000419 	.word	0x20000419
    175c:	e000e100 	.word	0xe000e100

00001760 <_k32src_start>:
{
    1760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1762:	4606      	mov	r6, r0
    1764:	460c      	mov	r4, r1
	__asm__ volatile(
    1766:	f04f 0220 	mov.w	r2, #32
    176a:	f3ef 8311 	mrs	r3, BASEPRI
    176e:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    1772:	4a2c      	ldr	r2, [pc, #176]	; (1824 <_k32src_start+0xc4>)
    1774:	7815      	ldrb	r5, [r2, #0]
    1776:	b165      	cbz	r5, 1792 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1778:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    177c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1780:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    1784:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    1788:	bf0c      	ite	eq
    178a:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    178e:	2000      	movne	r0, #0
    1790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1792:	2701      	movs	r7, #1
    1794:	7017      	strb	r7, [r2, #0]
    1796:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    179a:	4628      	mov	r0, r5
    179c:	f7ff fac0 	bl	d20 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    17a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    17a4:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    17a6:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    17aa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    17ae:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    17b2:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    17b6:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    17b8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    17bc:	b371      	cbz	r1, 181c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    17be:	0792      	lsls	r2, r2, #30
    17c0:	4f19      	ldr	r7, [pc, #100]	; (1828 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    17c2:	bf58      	it	pl
    17c4:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    17c6:	f04f 0100 	mov.w	r1, #0
    17ca:	f04f 0501 	mov.w	r5, #1
    17ce:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    17d2:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    17d6:	bf58      	it	pl
    17d8:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    17dc:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    17e0:	f7ff fa8e 	bl	d00 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    17e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    17e8:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    17ea:	2218      	movs	r2, #24
    17ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    17f0:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    17f4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    17f8:	f014 0103 	ands.w	r1, r4, #3
    17fc:	d1be      	bne.n	177c <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    17fe:	2010      	movs	r0, #16
    1800:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1804:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1808:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    180a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    180e:	f7ff ff4f 	bl	16b0 <_m16src_start>
		if (!err) {
    1812:	2800      	cmp	r0, #0
    1814:	d1b2      	bne.n	177c <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1816:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    181a:	e7af      	b.n	177c <_k32src_start+0x1c>
		__WFE();
    181c:	bf20      	wfe
		__SEV();
    181e:	bf40      	sev
		__WFE();
    1820:	bf20      	wfe
    1822:	e7c9      	b.n	17b8 <_k32src_start+0x58>
    1824:	20000418 	.word	0x20000418
    1828:	e000e100 	.word	0xe000e100

0000182c <_power_clock_isr>:
{
    182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    182e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1832:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1834:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1838:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    183c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1840:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1844:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1848:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    184c:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1850:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1854:	f1be 0f00 	cmp.w	lr, #0
    1858:	d003      	beq.n	1862 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    185a:	f04f 0e00 	mov.w	lr, #0
    185e:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    1862:	b127      	cbz	r7, 186e <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1868:	2700      	movs	r7, #0
    186a:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    186e:	b13a      	cbz	r2, 1880 <_power_clock_isr+0x54>
    1870:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1872:	bf41      	itttt	mi
    1874:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    1878:	2201      	movmi	r2, #1
    187a:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    187e:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    1880:	b120      	cbz	r0, 188c <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1886:	2200      	movs	r2, #0
    1888:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    188c:	b149      	cbz	r1, 18a2 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    188e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1892:	2100      	movs	r1, #0
    1894:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1898:	4628      	mov	r0, r5
    189a:	f7ff fecf 	bl	163c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    189e:	2301      	movs	r3, #1
    18a0:	6163      	str	r3, [r4, #20]
	if (ctto) {
    18a2:	b176      	cbz	r6, 18c2 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    18a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    18a8:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    18aa:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    18ac:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    18b0:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    18b2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    18b6:	f7ff fefb 	bl	16b0 <_m16src_start>
		if (!err) {
    18ba:	b910      	cbnz	r0, 18c2 <_power_clock_isr+0x96>
    18bc:	4b01      	ldr	r3, [pc, #4]	; (18c4 <_power_clock_isr+0x98>)
    18be:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    18c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18c4:	e000e100 	.word	0xe000e100

000018c8 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18c8:	6803      	ldr	r3, [r0, #0]
    18ca:	689b      	ldr	r3, [r3, #8]
    18cc:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    18ce:	6883      	ldr	r3, [r0, #8]
{
    18d0:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    18d2:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    18d4:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    18d6:	fa24 f300 	lsr.w	r3, r4, r0
    18da:	07db      	lsls	r3, r3, #31
    18dc:	d507      	bpl.n	18ee <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    18de:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    18e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18e6:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    18ea:	428b      	cmp	r3, r1
    18ec:	d004      	beq.n	18f8 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    18ee:	3001      	adds	r0, #1
    18f0:	2808      	cmp	r0, #8
    18f2:	d1f0      	bne.n	18d6 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    18f4:	f06f 0012 	mvn.w	r0, #18
}
    18f8:	bd10      	pop	{r4, pc}

000018fa <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    18fa:	6800      	ldr	r0, [r0, #0]
    18fc:	6880      	ldr	r0, [r0, #8]
    18fe:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1900:	b941      	cbnz	r1, 1914 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    1902:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1906:	fa21 f202 	lsr.w	r2, r1, r2
    190a:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    190e:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1910:	2000      	movs	r0, #0
    1912:	4770      	bx	lr
		*value = gpio->IN;
    1914:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1918:	e7f9      	b.n	190e <gpio_nrf5_read+0x14>

0000191a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    191a:	6800      	ldr	r0, [r0, #0]
    191c:	6880      	ldr	r0, [r0, #8]
    191e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1920:	b949      	cbnz	r1, 1936 <gpio_nrf5_write+0x1c>
    1922:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1924:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    1926:	b11b      	cbz	r3, 1930 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    1928:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    192c:	2000      	movs	r0, #0
    192e:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    1930:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    1934:	e7fa      	b.n	192c <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    1936:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    193a:	e7f7      	b.n	192c <gpio_nrf5_write+0x12>

0000193c <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    193c:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    193e:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1940:	b13a      	cbz	r2, 1952 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    1942:	681a      	ldr	r2, [r3, #0]
    1944:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    1946:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1948:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    194a:	b902      	cbnz	r2, 194e <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    194c:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    194e:	2000      	movs	r0, #0
    1950:	bd10      	pop	{r4, pc}
    1952:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1954:	2800      	cmp	r0, #0
    1956:	d0fa      	beq.n	194e <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    1958:	4281      	cmp	r1, r0
    195a:	d10e      	bne.n	197a <gpio_nrf5_manage_callback+0x3e>
    195c:	685c      	ldr	r4, [r3, #4]
    195e:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    1960:	b932      	cbnz	r2, 1970 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    1962:	42a1      	cmp	r1, r4
		list->head = node->next;
    1964:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    1966:	d100      	bne.n	196a <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    1968:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    196a:	2300      	movs	r3, #0
    196c:	600b      	str	r3, [r1, #0]
    196e:	e7ee      	b.n	194e <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    1970:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    1972:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    1974:	bf08      	it	eq
    1976:	605a      	streq	r2, [r3, #4]
    1978:	e7f7      	b.n	196a <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    197a:	4602      	mov	r2, r0
    197c:	6800      	ldr	r0, [r0, #0]
    197e:	e7e9      	b.n	1954 <gpio_nrf5_manage_callback+0x18>

00001980 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1982:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1984:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1986:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1988:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    198a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    198c:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    198e:	b9a1      	cbnz	r1, 19ba <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    1990:	4621      	mov	r1, r4
    1992:	f7ff ff99 	bl	18c8 <gpiote_find_channel>
		if (i < 0) {
    1996:	2800      	cmp	r0, #0
    1998:	db11      	blt.n	19be <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    199a:	68ba      	ldr	r2, [r7, #8]
    199c:	2301      	movs	r3, #1
    199e:	fa03 f404 	lsl.w	r4, r3, r4
    19a2:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    19a4:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    19a8:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    19ac:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    19ae:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    19b2:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    19b6:	4628      	mov	r0, r5
    19b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    19ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    19be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000019c0 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    19c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19c2:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19c4:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    19c6:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19c8:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    19ca:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    19cc:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    19ce:	b989      	cbnz	r1, 19f4 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    19d0:	4621      	mov	r1, r4
    19d2:	f7ff ff79 	bl	18c8 <gpiote_find_channel>
		if (i < 0) {
    19d6:	2800      	cmp	r0, #0
    19d8:	db0e      	blt.n	19f8 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    19da:	68b2      	ldr	r2, [r6, #8]
    19dc:	2301      	movs	r3, #1
    19de:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    19e2:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    19e6:	ea22 0404 	bic.w	r4, r2, r4
    19ea:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    19ec:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    19f0:	4628      	mov	r0, r5
    19f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    19f4:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    19f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000019fa <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    19fa:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    19fc:	2200      	movs	r2, #0
    19fe:	2101      	movs	r1, #1
    1a00:	2006      	movs	r0, #6
    1a02:	f7ff f9af 	bl	d64 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1a06:	2006      	movs	r0, #6
    1a08:	f7ff f97a 	bl	d00 <_arch_irq_enable>

	return 0;
}
    1a0c:	2000      	movs	r0, #0
    1a0e:	bd08      	pop	{r3, pc}

00001a10 <gpio_nrf5_port_isr>:
{
    1a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a12:	6803      	ldr	r3, [r0, #0]
{
    1a14:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a16:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1a18:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a1a:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1a1c:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    1a1e:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    1a20:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1a22:	2701      	movs	r7, #1
    1a24:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    1a28:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    1a2c:	f1be 0f00 	cmp.w	lr, #0
    1a30:	d008      	beq.n	1a44 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    1a32:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1a36:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    1a3a:	f3c1 2104 	ubfx	r1, r1, #8, #5
    1a3e:	fa07 f101 	lsl.w	r1, r7, r1
    1a42:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1a44:	3201      	adds	r2, #1
    1a46:	2a08      	cmp	r2, #8
    1a48:	d1ec      	bne.n	1a24 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    1a4a:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1a4c:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    1a4e:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1a50:	f7ff f966 	bl	d20 <_arch_irq_disable>
    1a54:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1a56:	b924      	cbnz	r4, 1a62 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1a58:	2006      	movs	r0, #6
}
    1a5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1a5e:	f7ff b94f 	b.w	d00 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    1a62:	68a3      	ldr	r3, [r4, #8]
    1a64:	421d      	tst	r5, r3
    1a66:	d0f5      	beq.n	1a54 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1a68:	6863      	ldr	r3, [r4, #4]
    1a6a:	462a      	mov	r2, r5
    1a6c:	4621      	mov	r1, r4
    1a6e:	4630      	mov	r0, r6
    1a70:	4798      	blx	r3
    1a72:	e7ef      	b.n	1a54 <gpio_nrf5_port_isr+0x44>

00001a74 <gpio_nrf5_config>:
{
    1a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a78:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a7a:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1a7c:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a7e:	6892      	ldr	r2, [r2, #8]
{
    1a80:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1a82:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1a84:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1a86:	b119      	cbz	r1, 1a90 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    1a88:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1a90:	f403 7240 	and.w	r2, r3, #768	; 0x300
    1a94:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1a98:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1a9c:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    1aa0:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1aa4:	d056      	beq.n	1b54 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    1aa6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1aaa:	bf0c      	ite	eq
    1aac:	2204      	moveq	r2, #4
    1aae:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    1ab0:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    1ab4:	bf08      	it	eq
    1ab6:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1aba:	f013 0f01 	tst.w	r3, #1
    1abe:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 1b88 <gpio_nrf5_config+0x114>
    1ac2:	ea4f 0181 	mov.w	r1, r1, lsl #2
    1ac6:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    1aca:	d04e      	beq.n	1b6a <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    1acc:	2a0c      	cmp	r2, #12
    1ace:	d143      	bne.n	1b58 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    1ad0:	f04f 0e01 	mov.w	lr, #1
    1ad4:	fa0e fe04 	lsl.w	lr, lr, r4
    1ad8:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    1adc:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    1ade:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1ae2:	f041 0103 	orr.w	r1, r1, #3
    1ae6:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    1ae8:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    1aec:	f013 0002 	ands.w	r0, r3, #2
    1af0:	d047      	beq.n	1b82 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    1af2:	0699      	lsls	r1, r3, #26
    1af4:	d5c8      	bpl.n	1a88 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1af6:	065a      	lsls	r2, r3, #25
    1af8:	d43e      	bmi.n	1b78 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    1afa:	f013 0f04 	tst.w	r3, #4
    1afe:	bf14      	ite	ne
    1b00:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    1b04:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1b08:	68f8      	ldr	r0, [r7, #12]
    1b0a:	f7fe fbc5 	bl	298 <__popcountsi2>
    1b0e:	2808      	cmp	r0, #8
    1b10:	d035      	beq.n	1b7e <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    1b12:	4621      	mov	r1, r4
    1b14:	4640      	mov	r0, r8
    1b16:	f7ff fed7 	bl	18c8 <gpiote_find_channel>
		if (i < 0) {
    1b1a:	2800      	cmp	r0, #0
    1b1c:	68fb      	ldr	r3, [r7, #12]
    1b1e:	da08      	bge.n	1b32 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1b20:	43da      	mvns	r2, r3
    1b22:	fa92 f0a2 	rbit	r0, r2
    1b26:	2a00      	cmp	r2, #0
    1b28:	fab0 f080 	clz	r0, r0
    1b2c:	bf08      	it	eq
    1b2e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    1b32:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    1b34:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    1b36:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    1b3a:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    1b3c:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    1b40:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    1b44:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    1b46:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    1b48:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    1b4a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    1b4e:	2000      	movs	r0, #0
    1b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    1b54:	220c      	movs	r2, #12
    1b56:	e7ab      	b.n	1ab0 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    1b58:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    1b5a:	bf02      	ittt	eq
    1b5c:	f04f 0e01 	moveq.w	lr, #1
    1b60:	fa0e fe04 	lsleq.w	lr, lr, r4
    1b64:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    1b68:	e7b8      	b.n	1adc <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    1b6a:	4449      	add	r1, r9
    1b6c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    1b70:	430a      	orrs	r2, r1
    1b72:	ea42 020e 	orr.w	r2, r2, lr
    1b76:	e7b7      	b.n	1ae8 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    1b78:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    1b7c:	e7c4      	b.n	1b08 <gpio_nrf5_config+0x94>
			return -EIO;
    1b7e:	f06f 0004 	mvn.w	r0, #4
}
    1b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1b86:	bf00      	nop
    1b88:	0000d144 	.word	0x0000d144

00001b8c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b8c:	6803      	ldr	r3, [r0, #0]
    1b8e:	689b      	ldr	r3, [r3, #8]
    1b90:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1b92:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    1b96:	b132      	cbz	r2, 1ba6 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1b98:	2000      	movs	r0, #0
    1b9a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1b9e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1ba2:	700b      	strb	r3, [r1, #0]

	return 0;
    1ba4:	4770      	bx	lr
		return -1;
    1ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1baa:	4770      	bx	lr

00001bac <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bac:	6803      	ldr	r3, [r0, #0]
    1bae:	689b      	ldr	r3, [r3, #8]
    1bb0:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1bb2:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1bb6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    1bba:	2a00      	cmp	r2, #0
    1bbc:	d0fb      	beq.n	1bb6 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    1bbe:	2200      	movs	r2, #0
    1bc0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1bc4:	4608      	mov	r0, r1
    1bc6:	4770      	bx	lr

00001bc8 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bc8:	6803      	ldr	r3, [r0, #0]
    1bca:	689b      	ldr	r3, [r3, #8]
    1bcc:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    1bce:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    1bd2:	b118      	cbz	r0, 1bdc <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1bd4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1bd8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1bdc:	f000 000f 	and.w	r0, r0, #15
    1be0:	4770      	bx	lr
	...

00001be4 <uart_nrf5_init>:
{
    1be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1be6:	6803      	ldr	r3, [r0, #0]
    1be8:	689b      	ldr	r3, [r3, #8]
{
    1bea:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1bec:	4818      	ldr	r0, [pc, #96]	; (1c50 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1bee:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1bf0:	f009 fe46 	bl	b880 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1bf4:	6843      	ldr	r3, [r0, #4]
    1bf6:	4606      	mov	r6, r0
    1bf8:	681f      	ldr	r7, [r3, #0]
    1bfa:	2206      	movs	r2, #6
    1bfc:	f240 1301 	movw	r3, #257	; 0x101
    1c00:	2100      	movs	r1, #0
    1c02:	47b8      	blx	r7
    1c04:	6873      	ldr	r3, [r6, #4]
    1c06:	681f      	ldr	r7, [r3, #0]
    1c08:	2300      	movs	r3, #0
    1c0a:	4619      	mov	r1, r3
    1c0c:	2208      	movs	r2, #8
    1c0e:	4630      	mov	r0, r6
    1c10:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1c12:	2306      	movs	r3, #6
    1c14:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1c18:	2308      	movs	r3, #8
    1c1a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1c1e:	68ab      	ldr	r3, [r5, #8]
    1c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    1c24:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1c26:	682b      	ldr	r3, [r5, #0]
    1c28:	689b      	ldr	r3, [r3, #8]
    1c2a:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1c2c:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1c30:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1c34:	2304      	movs	r3, #4
    1c36:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1c3a:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1c3c:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1c3e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1c42:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1c46:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1c48:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1c4a:	4b02      	ldr	r3, [pc, #8]	; (1c54 <uart_nrf5_init+0x70>)
    1c4c:	606b      	str	r3, [r5, #4]
}
    1c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c50:	0000d1ac 	.word	0x0000d1ac
    1c54:	0000d1c4 	.word	0x0000d1c4

00001c58 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1c5c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1c5e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1c60:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1c62:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1c64:	440a      	add	r2, r1
	s = &rng->rand[first];
    1c66:	4406      	add	r6, r0
	if (first <= last) {
    1c68:	d81f      	bhi.n	1caa <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1c6a:	1ae4      	subs	r4, r4, r3
    1c6c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1c6e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1c70:	bf3e      	ittt	cc
    1c72:	1a64      	subcc	r4, r4, r1
    1c74:	b2e7      	uxtbcc	r7, r4
    1c76:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1c78:	4423      	add	r3, r4
		octets -= avail;
    1c7a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1c7e:	bf28      	it	cs
    1c80:	2700      	movcs	r7, #0
		first += avail;
    1c82:	b2db      	uxtb	r3, r3
		octets -= avail;
    1c84:	b2c9      	uxtb	r1, r1
    1c86:	4434      	add	r4, r6

		while (avail--) {
    1c88:	42a6      	cmp	r6, r4
    1c8a:	d109      	bne.n	1ca0 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1c8c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1c8e:	7843      	ldrb	r3, [r0, #1]
    1c90:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1c92:	bf82      	ittt	hi
    1c94:	4b20      	ldrhi	r3, [pc, #128]	; (1d18 <get+0xc0>)
    1c96:	2201      	movhi	r2, #1
    1c98:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1c9a:	4608      	mov	r0, r1
    1c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1ca0:	f816 5b01 	ldrb.w	r5, [r6], #1
    1ca4:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1ca8:	e7ee      	b.n	1c88 <get+0x30>
		avail = rng->count - first;
    1caa:	7805      	ldrb	r5, [r0, #0]
    1cac:	1aed      	subs	r5, r5, r3
    1cae:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1cb0:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1cb2:	bf3f      	itttt	cc
    1cb4:	1a67      	subcc	r7, r4, r1
    1cb6:	19ed      	addcc	r5, r5, r7
    1cb8:	b2ef      	uxtbcc	r7, r5
    1cba:	460d      	movcc	r5, r1
			first += avail;
    1cbc:	bf38      	it	cc
    1cbe:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1cc0:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1cc4:	bf32      	itee	cc
    1cc6:	b2db      	uxtbcc	r3, r3
    1cc8:	4627      	movcs	r7, r4
			first = 0;
    1cca:	2300      	movcs	r3, #0
		octets -= avail;
    1ccc:	b2c9      	uxtb	r1, r1
    1cce:	4696      	mov	lr, r2
    1cd0:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1cd4:	4566      	cmp	r6, ip
    1cd6:	d119      	bne.n	1d0c <get+0xb4>
    1cd8:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    1cda:	2900      	cmp	r1, #0
    1cdc:	d0d6      	beq.n	1c8c <get+0x34>
    1cde:	2c00      	cmp	r4, #0
    1ce0:	d0d4      	beq.n	1c8c <get+0x34>
			if (octets < last) {
    1ce2:	428c      	cmp	r4, r1
    1ce4:	bf8a      	itet	hi
    1ce6:	460b      	movhi	r3, r1
    1ce8:	4623      	movls	r3, r4
				remaining = last - octets;
    1cea:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    1cec:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    1cf0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    1cf4:	bf8c      	ite	hi
    1cf6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    1cf8:	2700      	movls	r7, #0
			octets -= last;
    1cfa:	b2c9      	uxtb	r1, r1
    1cfc:	18f4      	adds	r4, r6, r3
			while (last--) {
    1cfe:	42a6      	cmp	r6, r4
    1d00:	d0c4      	beq.n	1c8c <get+0x34>
				*(--d) = *s++;
    1d02:	f816 5b01 	ldrb.w	r5, [r6], #1
    1d06:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1d0a:	e7f8      	b.n	1cfe <get+0xa6>
			*(--d) = *s++;
    1d0c:	f816 8b01 	ldrb.w	r8, [r6], #1
    1d10:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    1d14:	e7de      	b.n	1cd4 <get+0x7c>
    1d16:	bf00      	nop
    1d18:	4000d000 	.word	0x4000d000

00001d1c <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1d1c:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1d1e:	b1d0      	cbz	r0, 1d56 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1d20:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1d22:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1d24:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1d26:	1c53      	adds	r3, r2, #1
    1d28:	b2db      	uxtb	r3, r3
		last = 0;
    1d2a:	42ab      	cmp	r3, r5
    1d2c:	bf08      	it	eq
    1d2e:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1d30:	42a3      	cmp	r3, r4
    1d32:	d010      	beq.n	1d56 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1d34:	b161      	cbz	r1, 1d50 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1d36:	490a      	ldr	r1, [pc, #40]	; (1d60 <isr+0x44>)
    1d38:	4402      	add	r2, r0
    1d3a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1d3e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1d40:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1d42:	3301      	adds	r3, #1
    1d44:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1d46:	429d      	cmp	r5, r3
    1d48:	bf08      	it	eq
    1d4a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1d4c:	42a3      	cmp	r3, r4
    1d4e:	d005      	beq.n	1d5c <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1d50:	f06f 000f 	mvn.w	r0, #15
    1d54:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1d56:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1d5a:	bd30      	pop	{r4, r5, pc}
		return 0;
    1d5c:	2000      	movs	r0, #0
}
    1d5e:	bd30      	pop	{r4, r5, pc}
    1d60:	4000d000 	.word	0x4000d000

00001d64 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1d64:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1d66:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1d68:	2201      	movs	r2, #1
    1d6a:	4611      	mov	r1, r2
    1d6c:	4620      	mov	r0, r4
    1d6e:	f00a f9b3 	bl	c0d8 <_impl_k_sem_init>
    1d72:	f104 0018 	add.w	r0, r4, #24
    1d76:	2201      	movs	r2, #1
    1d78:	2100      	movs	r1, #0
    1d7a:	f00a f9ad 	bl	c0d8 <_impl_k_sem_init>
	rng->threshold = threshold;
    1d7e:	2304      	movs	r3, #4
    1d80:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1d84:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1d86:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1d88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1d8c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1d8e:	4b11      	ldr	r3, [pc, #68]	; (1dd4 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1d90:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1d94:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1d96:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1d9a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1d9e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1da2:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1da6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1daa:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1dae:	f042 0201 	orr.w	r2, r2, #1
    1db2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1db6:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1db8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1dbc:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1dbe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1dc2:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1dc4:	462a      	mov	r2, r5
    1dc6:	f7fe ffcd 	bl	d64 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1dca:	4630      	mov	r0, r6
    1dcc:	f7fe ff98 	bl	d00 <_arch_irq_enable>

	return 0;
}
    1dd0:	4628      	mov	r0, r5
    1dd2:	bd70      	pop	{r4, r5, r6, pc}
    1dd4:	4000d000 	.word	0x4000d000

00001dd8 <isr_rand>:
{
    1dd8:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1dda:	4b12      	ldr	r3, [pc, #72]	; (1e24 <isr_rand+0x4c>)
    1ddc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1de0:	b1fb      	cbz	r3, 1e22 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1de2:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1de4:	2101      	movs	r1, #1
    1de6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1dea:	f7ff ff97 	bl	1d1c <isr>
		if (ret != -EBUSY) {
    1dee:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    1df2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    1df4:	d00d      	beq.n	1e12 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    1df6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    1dfa:	bf14      	ite	ne
    1dfc:	2100      	movne	r1, #0
    1dfe:	2101      	moveq	r1, #1
    1e00:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1e04:	f7ff ff8a 	bl	1d1c <isr>
    1e08:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1e0a:	f105 0018 	add.w	r0, r5, #24
    1e0e:	f00a f96d 	bl	c0ec <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1e12:	4b04      	ldr	r3, [pc, #16]	; (1e24 <isr_rand+0x4c>)
    1e14:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    1e16:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1e18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1e1c:	bf1c      	itt	ne
    1e1e:	2201      	movne	r2, #1
    1e20:	605a      	strne	r2, [r3, #4]
    1e22:	bd38      	pop	{r3, r4, r5, pc}
    1e24:	4000d000 	.word	0x4000d000

00001e28 <entropy_nrf5_get_entropy>:
{
    1e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1e2c:	6885      	ldr	r5, [r0, #8]
{
    1e2e:	460f      	mov	r7, r1
    1e30:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1e32:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1e36:	b914      	cbnz	r4, 1e3e <entropy_nrf5_get_entropy+0x16>
}
    1e38:	4620      	mov	r0, r4
    1e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e3e:	2cff      	cmp	r4, #255	; 0xff
    1e40:	4623      	mov	r3, r4
    1e42:	bf28      	it	cs
    1e44:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1e46:	1ae4      	subs	r4, r4, r3
    1e48:	b2de      	uxtb	r6, r3
    1e4a:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1e4c:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1e54:	4628      	mov	r0, r5
    1e56:	f00a f9a9 	bl	c1ac <_impl_k_sem_take>
    1e5a:	4631      	mov	r1, r6
    1e5c:	463a      	mov	r2, r7
    1e5e:	4648      	mov	r0, r9
    1e60:	f7ff fefa 	bl	1c58 <get>
    1e64:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1e66:	4628      	mov	r0, r5
    1e68:	f00a f940 	bl	c0ec <_impl_k_sem_give>
			if (len8) {
    1e6c:	2e00      	cmp	r6, #0
    1e6e:	d0e2      	beq.n	1e36 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1e74:	4640      	mov	r0, r8
    1e76:	f00a f999 	bl	c1ac <_impl_k_sem_take>
    1e7a:	e7e9      	b.n	1e50 <entropy_nrf5_get_entropy+0x28>

00001e7c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1e7c:	4b08      	ldr	r3, [pc, #32]	; (1ea0 <rtc_compare_set+0x24>)
    1e7e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1e82:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1e86:	1ac0      	subs	r0, r0, r3
    1e88:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e8c:	4b05      	ldr	r3, [pc, #20]	; (1ea4 <rtc_compare_set+0x28>)
    1e8e:	3802      	subs	r0, #2
    1e90:	4298      	cmp	r0, r3
    1e92:	bf82      	ittt	hi
    1e94:	4b04      	ldrhi	r3, [pc, #16]	; (1ea8 <rtc_compare_set+0x2c>)
    1e96:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1e9a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1e9e:	4770      	bx	lr
    1ea0:	40011000 	.word	0x40011000
    1ea4:	007ffffd 	.word	0x007ffffd
    1ea8:	e000e100 	.word	0xe000e100

00001eac <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1eac:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1eae:	4b12      	ldr	r3, [pc, #72]	; (1ef8 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1eb0:	4c12      	ldr	r4, [pc, #72]	; (1efc <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1eb2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1eb6:	6822      	ldr	r2, [r4, #0]
    1eb8:	1a80      	subs	r0, r0, r2
    1eba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1ebe:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1ec2:	d911      	bls.n	1ee8 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1ec4:	490e      	ldr	r1, [pc, #56]	; (1f00 <rtc_announce_set_next+0x54>)
    1ec6:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1ec8:	f240 1347 	movw	r3, #327	; 0x147
    1ecc:	fbb0 f0f3 	udiv	r0, r0, r3
    1ed0:	4288      	cmp	r0, r1
    1ed2:	bf28      	it	cs
    1ed4:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1ed6:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1eda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1ede:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1ee0:	4b08      	ldr	r3, [pc, #32]	; (1f04 <rtc_announce_set_next+0x58>)
    1ee2:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1ee4:	f00a f9a4 	bl	c230 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1ee8:	6820      	ldr	r0, [r4, #0]
}
    1eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1eee:	f200 1047 	addw	r0, r0, #327	; 0x147
    1ef2:	f7ff bfc3 	b.w	1e7c <rtc_compare_set>
    1ef6:	bf00      	nop
    1ef8:	40011000 	.word	0x40011000
    1efc:	20000480 	.word	0x20000480
    1f00:	2000047c 	.word	0x2000047c
    1f04:	200050cc 	.word	0x200050cc

00001f08 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1f08:	4b02      	ldr	r3, [pc, #8]	; (1f14 <rtc1_nrf5_isr+0xc>)
    1f0a:	2200      	movs	r2, #0
    1f0c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1f10:	f7ff bfcc 	b.w	1eac <rtc_announce_set_next>
    1f14:	40011000 	.word	0x40011000

00001f18 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1f18:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1f1c:	4298      	cmp	r0, r3
    1f1e:	bf28      	it	cs
    1f20:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1f22:	4b05      	ldr	r3, [pc, #20]	; (1f38 <_timer_idle_enter+0x20>)
    1f24:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1f26:	4b05      	ldr	r3, [pc, #20]	; (1f3c <_timer_idle_enter+0x24>)
    1f28:	681b      	ldr	r3, [r3, #0]
    1f2a:	f240 1247 	movw	r2, #327	; 0x147
    1f2e:	fb02 3000 	mla	r0, r2, r0, r3
    1f32:	f7ff bfa3 	b.w	1e7c <rtc_compare_set>
    1f36:	bf00      	nop
    1f38:	2000047c 	.word	0x2000047c
    1f3c:	20000480 	.word	0x20000480

00001f40 <_timer_idle_exit>:
{
    1f40:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1f42:	4b07      	ldr	r3, [pc, #28]	; (1f60 <_timer_idle_exit+0x20>)
    1f44:	2200      	movs	r2, #0
    1f46:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f4a:	4b06      	ldr	r3, [pc, #24]	; (1f64 <_timer_idle_exit+0x24>)
    1f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1f50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1f54:	f7ff ffaa 	bl	1eac <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1f58:	4b03      	ldr	r3, [pc, #12]	; (1f68 <_timer_idle_exit+0x28>)
    1f5a:	2201      	movs	r2, #1
    1f5c:	601a      	str	r2, [r3, #0]
    1f5e:	bd08      	pop	{r3, pc}
    1f60:	40011000 	.word	0x40011000
    1f64:	e000e100 	.word	0xe000e100
    1f68:	2000047c 	.word	0x2000047c

00001f6c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1f6c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1f6e:	4818      	ldr	r0, [pc, #96]	; (1fd0 <_sys_clock_driver_init+0x64>)
    1f70:	f009 fc86 	bl	b880 <device_get_binding>
	if (!clock) {
    1f74:	b348      	cbz	r0, 1fca <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1f76:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1f78:	4d16      	ldr	r5, [pc, #88]	; (1fd4 <_sys_clock_driver_init+0x68>)
    1f7a:	681b      	ldr	r3, [r3, #0]
    1f7c:	2101      	movs	r1, #1
    1f7e:	4798      	blx	r3
	rtc_past = 0;
    1f80:	4b15      	ldr	r3, [pc, #84]	; (1fd8 <_sys_clock_driver_init+0x6c>)
    1f82:	2400      	movs	r4, #0
    1f84:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1f86:	4b15      	ldr	r3, [pc, #84]	; (1fdc <_sys_clock_driver_init+0x70>)
    1f88:	2601      	movs	r6, #1
    1f8a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1f8c:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1f90:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1f94:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1f9c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1fa0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1fa4:	4b0e      	ldr	r3, [pc, #56]	; (1fe0 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1fa6:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1faa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1fae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1fb2:	4631      	mov	r1, r6
    1fb4:	4622      	mov	r2, r4
    1fb6:	2011      	movs	r0, #17
    1fb8:	f7fe fed4 	bl	d64 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1fbc:	2011      	movs	r0, #17
    1fbe:	f7fe fe9f 	bl	d00 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1fc2:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1fc4:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1fc6:	602e      	str	r6, [r5, #0]
	return 0;
    1fc8:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1fce:	bd70      	pop	{r4, r5, r6, pc}
    1fd0:	0000d12c 	.word	0x0000d12c
    1fd4:	40011000 	.word	0x40011000
    1fd8:	20000480 	.word	0x20000480
    1fdc:	2000047c 	.word	0x2000047c
    1fe0:	e000e100 	.word	0xe000e100

00001fe4 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1fe4:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1fe6:	4a0b      	ldr	r2, [pc, #44]	; (2014 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1fe8:	480b      	ldr	r0, [pc, #44]	; (2018 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1fea:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1fee:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1ff2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1ff6:	4299      	cmp	r1, r3
    1ff8:	d10a      	bne.n	2010 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1ffa:	4a08      	ldr	r2, [pc, #32]	; (201c <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1ffc:	f240 1347 	movw	r3, #327	; 0x147
    2000:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    2004:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    2006:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    200a:	fb00 3004 	mla	r0, r0, r4, r3
    200e:	bd30      	pop	{r4, r5, pc}
    2010:	4619      	mov	r1, r3
    2012:	e7ec      	b.n	1fee <_timer_cycle_get_32+0xa>
    2014:	40011000 	.word	0x40011000
    2018:	20002d48 	.word	0x20002d48
    201c:	200050d0 	.word	0x200050d0

00002020 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    2020:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    2022:	f04f 0320 	mov.w	r3, #32
    2026:	f3ef 8511 	mrs	r5, BASEPRI
    202a:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    202e:	4c14      	ldr	r4, [pc, #80]	; (2080 <bt_hex+0x60>)
    2030:	4e14      	ldr	r6, [pc, #80]	; (2084 <bt_hex+0x64>)
    2032:	7823      	ldrb	r3, [r4, #0]
    2034:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    2038:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    203a:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    203e:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    2040:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2042:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    2046:	2940      	cmp	r1, #64	; 0x40
    2048:	bf28      	it	cs
    204a:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    204c:	4d0e      	ldr	r5, [pc, #56]	; (2088 <bt_hex+0x68>)
    204e:	3801      	subs	r0, #1
    2050:	4613      	mov	r3, r2
    2052:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    2056:	42b3      	cmp	r3, r6
    2058:	d104      	bne.n	2064 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    205a:	2300      	movs	r3, #0
    205c:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    2060:	4610      	mov	r0, r2
    2062:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    2064:	7844      	ldrb	r4, [r0, #1]
    2066:	0924      	lsrs	r4, r4, #4
    2068:	3302      	adds	r3, #2
    206a:	5d2c      	ldrb	r4, [r5, r4]
    206c:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    2070:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    2074:	f004 040f 	and.w	r4, r4, #15
    2078:	5d2c      	ldrb	r4, [r5, r4]
    207a:	f803 4c01 	strb.w	r4, [r3, #-1]
    207e:	e7ea      	b.n	2056 <bt_hex+0x36>
    2080:	200004e0 	.word	0x200004e0
    2084:	200004e1 	.word	0x200004e1
    2088:	0000d241 	.word	0x0000d241

0000208c <bt_addr_str>:

#if defined(CONFIG_BT_DEBUG)
const char *bt_addr_str(const bt_addr_t *addr)
{
    208c:	b510      	push	{r4, lr}
	static char bufs[2][BT_ADDR_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    208e:	4a0f      	ldr	r2, [pc, #60]	; (20cc <bt_addr_str+0x40>)
    2090:	4c0f      	ldr	r4, [pc, #60]	; (20d0 <bt_addr_str+0x44>)
    2092:	7813      	ldrb	r3, [r2, #0]
    2094:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    2098:	3301      	adds	r3, #1
{
    209a:	b086      	sub	sp, #24
	cur %= ARRAY_SIZE(bufs);
    209c:	f003 0301 	and.w	r3, r3, #1
    20a0:	7013      	strb	r3, [r2, #0]
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_to_str(const bt_addr_t *addr, char *str, size_t len)
{
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
    20a2:	7802      	ldrb	r2, [r0, #0]
    20a4:	7943      	ldrb	r3, [r0, #5]
    20a6:	9204      	str	r2, [sp, #16]
    20a8:	7842      	ldrb	r2, [r0, #1]
    20aa:	9203      	str	r2, [sp, #12]
    20ac:	7882      	ldrb	r2, [r0, #2]
    20ae:	9202      	str	r2, [sp, #8]
    20b0:	78c2      	ldrb	r2, [r0, #3]
    20b2:	9201      	str	r2, [sp, #4]
	str = bufs[cur++];
    20b4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
    20b8:	7902      	ldrb	r2, [r0, #4]
    20ba:	9200      	str	r2, [sp, #0]
    20bc:	2112      	movs	r1, #18
    20be:	4a05      	ldr	r2, [pc, #20]	; (20d4 <bt_addr_str+0x48>)
    20c0:	4620      	mov	r0, r4
    20c2:	f7ff f985 	bl	13d0 <snprintk>
	bt_addr_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    20c6:	4620      	mov	r0, r4
    20c8:	b006      	add	sp, #24
    20ca:	bd10      	pop	{r4, pc}
    20cc:	200004de 	.word	0x200004de
    20d0:	20000484 	.word	0x20000484
    20d4:	0000d223 	.word	0x0000d223

000020d8 <bt_addr_le_str>:

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    20d8:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    20da:	4a1d      	ldr	r2, [pc, #116]	; (2150 <bt_addr_le_str+0x78>)
    20dc:	491d      	ldr	r1, [pc, #116]	; (2154 <bt_addr_le_str+0x7c>)
    20de:	7813      	ldrb	r3, [r2, #0]
    20e0:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    20e4:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    20e6:	f003 0301 	and.w	r3, r3, #1
    20ea:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    20ec:	7803      	ldrb	r3, [r0, #0]
{
    20ee:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    20f0:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    20f4:	4604      	mov	r4, r0
	str = bufs[cur++];
    20f6:	440e      	add	r6, r1
    20f8:	ad07      	add	r5, sp, #28
    20fa:	2b03      	cmp	r3, #3
    20fc:	d821      	bhi.n	2142 <bt_addr_le_str+0x6a>
    20fe:	e8df f003 	tbb	[pc, r3]
    2102:	1a02      	.short	0x1a02
    2104:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2106:	4914      	ldr	r1, [pc, #80]	; (2158 <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2108:	4628      	mov	r0, r5
    210a:	f7fe fa49 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    210e:	7862      	ldrb	r2, [r4, #1]
    2110:	9204      	str	r2, [sp, #16]
    2112:	78a2      	ldrb	r2, [r4, #2]
    2114:	9203      	str	r2, [sp, #12]
    2116:	78e2      	ldrb	r2, [r4, #3]
    2118:	9202      	str	r2, [sp, #8]
    211a:	7922      	ldrb	r2, [r4, #4]
    211c:	9201      	str	r2, [sp, #4]
    211e:	7962      	ldrb	r2, [r4, #5]
    2120:	9200      	str	r2, [sp, #0]
    2122:	79a3      	ldrb	r3, [r4, #6]
    2124:	9505      	str	r5, [sp, #20]
    2126:	4a0d      	ldr	r2, [pc, #52]	; (215c <bt_addr_le_str+0x84>)
    2128:	211b      	movs	r1, #27
    212a:	4630      	mov	r0, r6
    212c:	f7ff f950 	bl	13d0 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    2130:	4630      	mov	r0, r6
    2132:	b00a      	add	sp, #40	; 0x28
    2134:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    2136:	490a      	ldr	r1, [pc, #40]	; (2160 <bt_addr_le_str+0x88>)
    2138:	e7e6      	b.n	2108 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    213a:	490a      	ldr	r1, [pc, #40]	; (2164 <bt_addr_le_str+0x8c>)
    213c:	e7e4      	b.n	2108 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    213e:	490a      	ldr	r1, [pc, #40]	; (2168 <bt_addr_le_str+0x90>)
    2140:	e7e2      	b.n	2108 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2142:	4a0a      	ldr	r2, [pc, #40]	; (216c <bt_addr_le_str+0x94>)
    2144:	210a      	movs	r1, #10
    2146:	4628      	mov	r0, r5
    2148:	f7ff f942 	bl	13d0 <snprintk>
    214c:	e7df      	b.n	210e <bt_addr_le_str+0x36>
    214e:	bf00      	nop
    2150:	200004df 	.word	0x200004df
    2154:	200004a8 	.word	0x200004a8
    2158:	0000d1de 	.word	0x0000d1de
    215c:	0000d200 	.word	0x0000d200
    2160:	0000d1e5 	.word	0x0000d1e5
    2164:	0000d1ec 	.word	0x0000d1ec
    2168:	0000d1f6 	.word	0x0000d1f6
    216c:	0000e127 	.word	0x0000e127

00002170 <bt_monitor_init>:
#if defined(CONFIG_HAS_DTS) && !defined(CONFIG_BT_MONITOR_ON_DEV_NAME)
#define CONFIG_BT_MONITOR_ON_DEV_NAME CONFIG_UART_CONSOLE_ON_DEV_NAME
#endif

static int bt_monitor_init(struct device *d)
{
    2170:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	monitor_dev = device_get_binding(CONFIG_BT_MONITOR_ON_DEV_NAME);
    2172:	4807      	ldr	r0, [pc, #28]	; (2190 <bt_monitor_init+0x20>)
	uart_irq_rx_disable(monitor_dev);
	uart_irq_tx_disable(monitor_dev);
#endif

#if !defined(CONFIG_UART_CONSOLE)
	__printk_hook_install(monitor_console_out);
    2174:	4c07      	ldr	r4, [pc, #28]	; (2194 <bt_monitor_init+0x24>)
	monitor_dev = device_get_binding(CONFIG_BT_MONITOR_ON_DEV_NAME);
    2176:	f009 fb83 	bl	b880 <device_get_binding>
    217a:	4b07      	ldr	r3, [pc, #28]	; (2198 <bt_monitor_init+0x28>)
    217c:	6018      	str	r0, [r3, #0]
	__printk_hook_install(monitor_console_out);
    217e:	4620      	mov	r0, r4
    2180:	f7fe ffd2 	bl	1128 <__printk_hook_install>
	__stdout_hook_install(monitor_console_out);
    2184:	4620      	mov	r0, r4
    2186:	f7fe fa9b 	bl	6c0 <__stdout_hook_install>
#endif

	return 0;
}
    218a:	2000      	movs	r0, #0
    218c:	bd10      	pop	{r4, pc}
    218e:	bf00      	nop
    2190:	0000d1b3 	.word	0x0000d1b3
    2194:	0000240d 	.word	0x0000240d
    2198:	20000784 	.word	0x20000784

0000219c <atomic_inc>:
}
    219c:	f3bf 8f5b 	dmb	ish
    21a0:	e850 3f00 	ldrex	r3, [r0]
    21a4:	1c5a      	adds	r2, r3, #1
    21a6:	e840 2100 	strex	r1, r2, [r0]
    21aa:	2900      	cmp	r1, #0
    21ac:	d1f8      	bne.n	21a0 <atomic_inc+0x4>
    21ae:	f3bf 8f5b 	dmb	ish
    21b2:	4618      	mov	r0, r3
    21b4:	4770      	bx	lr

000021b6 <encode_drops>:
{
    21b6:	b510      	push	{r4, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    21b8:	2300      	movs	r3, #0
    21ba:	f3bf 8f5b 	dmb	ish
    21be:	e852 4f00 	ldrex	r4, [r2]
    21c2:	e842 3e00 	strex	lr, r3, [r2]
    21c6:	f1be 0f00 	cmp.w	lr, #0
    21ca:	d1f8      	bne.n	21be <encode_drops+0x8>
    21cc:	f3bf 8f5b 	dmb	ish
	if (count) {
    21d0:	b16c      	cbz	r4, 21ee <encode_drops+0x38>
		hdr->ext[hdr->hdr_len++] = type;
    21d2:	7943      	ldrb	r3, [r0, #5]
    21d4:	18c2      	adds	r2, r0, r3
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    21d6:	2cff      	cmp	r4, #255	; 0xff
		hdr->ext[hdr->hdr_len++] = type;
    21d8:	7191      	strb	r1, [r2, #6]
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    21da:	f103 0202 	add.w	r2, r3, #2
		hdr->ext[hdr->hdr_len++] = type;
    21de:	f103 0301 	add.w	r3, r3, #1
		hdr->ext[hdr->hdr_len++] = min(count, 255);
    21e2:	7142      	strb	r2, [r0, #5]
    21e4:	fa50 f083 	uxtab	r0, r0, r3
    21e8:	bfa8      	it	ge
    21ea:	24ff      	movge	r4, #255	; 0xff
    21ec:	7184      	strb	r4, [r0, #6]
    21ee:	bd10      	pop	{r4, pc}

000021f0 <encode_hdr>:
	hdr->flags    = 0;
    21f0:	2300      	movs	r3, #0
{
    21f2:	b570      	push	{r4, r5, r6, lr}
	hdr->flags    = 0;
    21f4:	7103      	strb	r3, [r0, #4]
	ts->type = BT_MONITOR_TS32;
    21f6:	2308      	movs	r3, #8
    21f8:	7183      	strb	r3, [r0, #6]
	hdr->opcode   = sys_cpu_to_le16(opcode);
    21fa:	8041      	strh	r1, [r0, #2]
{
    21fc:	4604      	mov	r4, r0
    21fe:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    2200:	f00a f80a 	bl	c218 <_impl_k_uptime_get>
	encode_drops(hdr, BT_MONITOR_COMMAND_DROPS, &drops.cmd);
    2204:	4d13      	ldr	r5, [pc, #76]	; (2254 <encode_hdr+0x64>)
	ts->ts32 = sys_cpu_to_le32(k_uptime_get() * 10);
    2206:	230a      	movs	r3, #10
    2208:	4358      	muls	r0, r3
	hdr->hdr_len = sizeof(*ts);
    220a:	2305      	movs	r3, #5
    220c:	7163      	strb	r3, [r4, #5]
	ts->ts32 = sys_cpu_to_le32(k_uptime_get() * 10);
    220e:	f8c4 0007 	str.w	r0, [r4, #7]
	encode_drops(hdr, BT_MONITOR_COMMAND_DROPS, &drops.cmd);
    2212:	462a      	mov	r2, r5
    2214:	2101      	movs	r1, #1
    2216:	4620      	mov	r0, r4
    2218:	f7ff ffcd 	bl	21b6 <encode_drops>
	encode_drops(hdr, BT_MONITOR_EVENT_DROPS, &drops.evt);
    221c:	1d2a      	adds	r2, r5, #4
    221e:	2102      	movs	r1, #2
    2220:	4620      	mov	r0, r4
    2222:	f7ff ffc8 	bl	21b6 <encode_drops>
	encode_drops(hdr, BT_MONITOR_ACL_TX_DROPS, &drops.acl_tx);
    2226:	f105 0208 	add.w	r2, r5, #8
    222a:	2104      	movs	r1, #4
    222c:	4620      	mov	r0, r4
    222e:	f7ff ffc2 	bl	21b6 <encode_drops>
	encode_drops(hdr, BT_MONITOR_ACL_RX_DROPS, &drops.acl_rx);
    2232:	f105 020c 	add.w	r2, r5, #12
    2236:	2103      	movs	r1, #3
    2238:	4620      	mov	r0, r4
    223a:	f7ff ffbc 	bl	21b6 <encode_drops>
	encode_drops(hdr, BT_MONITOR_OTHER_DROPS, &drops.other);
    223e:	f105 0210 	add.w	r2, r5, #16
    2242:	2107      	movs	r1, #7
    2244:	4620      	mov	r0, r4
    2246:	f7ff ffb6 	bl	21b6 <encode_drops>
	hdr->data_len = sys_cpu_to_le16(4 + hdr->hdr_len + len);
    224a:	7962      	ldrb	r2, [r4, #5]
    224c:	3604      	adds	r6, #4
    224e:	4432      	add	r2, r6
    2250:	8022      	strh	r2, [r4, #0]
    2252:	bd70      	pop	{r4, r5, r6, pc}
    2254:	20000768 	.word	0x20000768

00002258 <monitor_send>:
{
    2258:	b570      	push	{r4, r5, r6, lr}
		uart_poll_out(monitor_dev, *buf++);
    225a:	4e06      	ldr	r6, [pc, #24]	; (2274 <monitor_send+0x1c>)
    225c:	1845      	adds	r5, r0, r1
	const u8_t *buf = data;
    225e:	4604      	mov	r4, r0
	while (len--) {
    2260:	42ac      	cmp	r4, r5
    2262:	d100      	bne.n	2266 <monitor_send+0xe>
}
    2264:	bd70      	pop	{r4, r5, r6, pc}
		uart_poll_out(monitor_dev, *buf++);
    2266:	6830      	ldr	r0, [r6, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    2268:	f814 1b01 	ldrb.w	r1, [r4], #1
    226c:	6843      	ldr	r3, [r0, #4]
    226e:	685b      	ldr	r3, [r3, #4]
    2270:	4798      	blx	r3
    2272:	e7f5      	b.n	2260 <monitor_send+0x8>
    2274:	20000784 	.word	0x20000784

00002278 <log_out>:
{
    2278:	b508      	push	{r3, lr}
	uart_poll_out(monitor_dev, c);
    227a:	4b04      	ldr	r3, [pc, #16]	; (228c <log_out+0x14>)
    227c:	681b      	ldr	r3, [r3, #0]
    227e:	685a      	ldr	r2, [r3, #4]
    2280:	b2c1      	uxtb	r1, r0
    2282:	6852      	ldr	r2, [r2, #4]
    2284:	4618      	mov	r0, r3
    2286:	4790      	blx	r2
}
    2288:	2000      	movs	r0, #0
    228a:	bd08      	pop	{r3, pc}
    228c:	20000784 	.word	0x20000784

00002290 <bt_log>:
{
    2290:	b40e      	push	{r1, r2, r3}
    2292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2296:	b08b      	sub	sp, #44	; 0x2c
    2298:	ac11      	add	r4, sp, #68	; 0x44
	const char id[] = "bt";
    229a:	4b2f      	ldr	r3, [pc, #188]	; (2358 <bt_log+0xc8>)
{
    229c:	f854 8b04 	ldr.w	r8, [r4], #4
	const char id[] = "bt";
    22a0:	881a      	ldrh	r2, [r3, #0]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	f8ad 2008 	strh.w	r2, [sp, #8]
	len = vsnprintk(NULL, 0, fmt, ap);
    22a8:	2100      	movs	r1, #0
	const char id[] = "bt";
    22aa:	f88d 300a 	strb.w	r3, [sp, #10]
	len = vsnprintk(NULL, 0, fmt, ap);
    22ae:	4642      	mov	r2, r8
{
    22b0:	4605      	mov	r5, r0
	len = vsnprintk(NULL, 0, fmt, ap);
    22b2:	4623      	mov	r3, r4
    22b4:	4608      	mov	r0, r1
	va_start(ap, fmt);
    22b6:	9403      	str	r4, [sp, #12]
	len = vsnprintk(NULL, 0, fmt, ap);
    22b8:	f7ff f8a6 	bl	1408 <vsnprintk>
	if (len < 0) {
    22bc:	1e02      	subs	r2, r0, #0
    22be:	db17      	blt.n	22f0 <bt_log+0x60>
	log.priority = prio;
    22c0:	f88d 5004 	strb.w	r5, [sp, #4]
	log.ident_len = sizeof(id);
    22c4:	2703      	movs	r7, #3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    22c6:	4d25      	ldr	r5, [pc, #148]	; (235c <bt_log+0xcc>)
    22c8:	f88d 7005 	strb.w	r7, [sp, #5]
    22cc:	f3bf 8f5b 	dmb	ish
    22d0:	e855 6f00 	ldrex	r6, [r5]
    22d4:	f046 0301 	orr.w	r3, r6, #1
    22d8:	e845 3100 	strex	r1, r3, [r5]
    22dc:	2900      	cmp	r1, #0
    22de:	d1f7      	bne.n	22d0 <bt_log+0x40>
    22e0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_LOG_BUSY)) {
    22e4:	f016 0601 	ands.w	r6, r6, #1
    22e8:	d007      	beq.n	22fa <bt_log+0x6a>
		atomic_inc(&drops.other);
    22ea:	481d      	ldr	r0, [pc, #116]	; (2360 <bt_log+0xd0>)
    22ec:	f7ff ff56 	bl	219c <atomic_inc>
}
    22f0:	b00b      	add	sp, #44	; 0x2c
    22f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    22f6:	b003      	add	sp, #12
    22f8:	4770      	bx	lr
	encode_hdr(&hdr, BT_MONITOR_USER_LOGGING,
    22fa:	3206      	adds	r2, #6
    22fc:	b292      	uxth	r2, r2
    22fe:	210d      	movs	r1, #13
    2300:	a804      	add	r0, sp, #16
    2302:	f7ff ff75 	bl	21f0 <encode_hdr>
	monitor_send(&hdr, BT_MONITOR_BASE_HDR_LEN + hdr.hdr_len);
    2306:	f89d 1015 	ldrb.w	r1, [sp, #21]
    230a:	a804      	add	r0, sp, #16
    230c:	3106      	adds	r1, #6
    230e:	f7ff ffa3 	bl	2258 <monitor_send>
	monitor_send(&log, sizeof(log));
    2312:	2102      	movs	r1, #2
    2314:	a801      	add	r0, sp, #4
    2316:	f7ff ff9f 	bl	2258 <monitor_send>
	monitor_send(id, sizeof(id));
    231a:	4639      	mov	r1, r7
    231c:	a802      	add	r0, sp, #8
    231e:	f7ff ff9b 	bl	2258 <monitor_send>
	_vprintk(log_out, NULL, fmt, ap);
    2322:	4623      	mov	r3, r4
    2324:	4642      	mov	r2, r8
    2326:	4631      	mov	r1, r6
    2328:	480e      	ldr	r0, [pc, #56]	; (2364 <bt_log+0xd4>)
	va_start(ap, fmt);
    232a:	9403      	str	r4, [sp, #12]
	_vprintk(log_out, NULL, fmt, ap);
    232c:	f7fe ff02 	bl	1134 <_vprintk>
	uart_poll_out(monitor_dev, '\0');
    2330:	4b0d      	ldr	r3, [pc, #52]	; (2368 <bt_log+0xd8>)
    2332:	6818      	ldr	r0, [r3, #0]
    2334:	6843      	ldr	r3, [r0, #4]
    2336:	4631      	mov	r1, r6
    2338:	685b      	ldr	r3, [r3, #4]
    233a:	4798      	blx	r3
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    233c:	f3bf 8f5b 	dmb	ish
    2340:	e855 3f00 	ldrex	r3, [r5]
    2344:	f023 0301 	bic.w	r3, r3, #1
    2348:	e845 3200 	strex	r2, r3, [r5]
    234c:	2a00      	cmp	r2, #0
    234e:	d1f7      	bne.n	2340 <bt_log+0xb0>
    2350:	f3bf 8f5b 	dmb	ish
    2354:	e7cc      	b.n	22f0 <bt_log+0x60>
    2356:	bf00      	nop
    2358:	0000d252 	.word	0x0000d252
    235c:	2000077c 	.word	0x2000077c
    2360:	20000778 	.word	0x20000778
    2364:	00002279 	.word	0x00002279
    2368:	20000784 	.word	0x20000784

0000236c <bt_monitor_send>:
{
    236c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    236e:	4c21      	ldr	r4, [pc, #132]	; (23f4 <bt_monitor_send+0x88>)
    2370:	f3bf 8f5b 	dmb	ish
    2374:	b086      	sub	sp, #24
    2376:	460e      	mov	r6, r1
    2378:	4615      	mov	r5, r2
    237a:	e854 3f00 	ldrex	r3, [r4]
    237e:	f043 0201 	orr.w	r2, r3, #1
    2382:	e844 2100 	strex	r1, r2, [r4]
    2386:	2900      	cmp	r1, #0
    2388:	d1f7      	bne.n	237a <bt_monitor_send+0xe>
    238a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_LOG_BUSY)) {
    238e:	07db      	lsls	r3, r3, #31
    2390:	d513      	bpl.n	23ba <bt_monitor_send+0x4e>
	switch (opcode) {
    2392:	3802      	subs	r0, #2
    2394:	2803      	cmp	r0, #3
    2396:	d80e      	bhi.n	23b6 <bt_monitor_send+0x4a>
    2398:	e8df f000 	tbb	[pc, r0]
    239c:	0b090702 	.word	0x0b090702
		atomic_inc(&drops.cmd);
    23a0:	4815      	ldr	r0, [pc, #84]	; (23f8 <bt_monitor_send+0x8c>)
		atomic_inc(&drops.other);
    23a2:	f7ff fefb 	bl	219c <atomic_inc>
}
    23a6:	b006      	add	sp, #24
    23a8:	bd70      	pop	{r4, r5, r6, pc}
		atomic_inc(&drops.evt);
    23aa:	4814      	ldr	r0, [pc, #80]	; (23fc <bt_monitor_send+0x90>)
    23ac:	e7f9      	b.n	23a2 <bt_monitor_send+0x36>
		atomic_inc(&drops.acl_tx);
    23ae:	4814      	ldr	r0, [pc, #80]	; (2400 <bt_monitor_send+0x94>)
    23b0:	e7f7      	b.n	23a2 <bt_monitor_send+0x36>
		atomic_inc(&drops.acl_rx);
    23b2:	4814      	ldr	r0, [pc, #80]	; (2404 <bt_monitor_send+0x98>)
    23b4:	e7f5      	b.n	23a2 <bt_monitor_send+0x36>
		atomic_inc(&drops.other);
    23b6:	4814      	ldr	r0, [pc, #80]	; (2408 <bt_monitor_send+0x9c>)
    23b8:	e7f3      	b.n	23a2 <bt_monitor_send+0x36>
	encode_hdr(&hdr, opcode, len);
    23ba:	b2aa      	uxth	r2, r5
    23bc:	4601      	mov	r1, r0
    23be:	4668      	mov	r0, sp
    23c0:	f7ff ff16 	bl	21f0 <encode_hdr>
	monitor_send(&hdr, BT_MONITOR_BASE_HDR_LEN + hdr.hdr_len);
    23c4:	f89d 1005 	ldrb.w	r1, [sp, #5]
    23c8:	4668      	mov	r0, sp
    23ca:	3106      	adds	r1, #6
    23cc:	f7ff ff44 	bl	2258 <monitor_send>
	monitor_send(data, len);
    23d0:	4629      	mov	r1, r5
    23d2:	4630      	mov	r0, r6
    23d4:	f7ff ff40 	bl	2258 <monitor_send>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23d8:	f3bf 8f5b 	dmb	ish
    23dc:	e854 3f00 	ldrex	r3, [r4]
    23e0:	f023 0301 	bic.w	r3, r3, #1
    23e4:	e844 3200 	strex	r2, r3, [r4]
    23e8:	2a00      	cmp	r2, #0
    23ea:	d1f7      	bne.n	23dc <bt_monitor_send+0x70>
    23ec:	f3bf 8f5b 	dmb	ish
    23f0:	e7d9      	b.n	23a6 <bt_monitor_send+0x3a>
    23f2:	bf00      	nop
    23f4:	2000077c 	.word	0x2000077c
    23f8:	20000768 	.word	0x20000768
    23fc:	2000076c 	.word	0x2000076c
    2400:	20000770 	.word	0x20000770
    2404:	20000774 	.word	0x20000774
    2408:	20000778 	.word	0x20000778

0000240c <monitor_console_out>:
{
    240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    240e:	4b1f      	ldr	r3, [pc, #124]	; (248c <monitor_console_out+0x80>)
    2410:	f3bf 8f5b 	dmb	ish
    2414:	4605      	mov	r5, r0
    2416:	e853 2f00 	ldrex	r2, [r3]
    241a:	f042 0102 	orr.w	r1, r2, #2
    241e:	e843 1000 	strex	r0, r1, [r3]
    2422:	2800      	cmp	r0, #0
    2424:	d1f7      	bne.n	2416 <monitor_console_out+0xa>
    2426:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(&flags, BT_CONSOLE_BUSY)) {
    242a:	f012 0f02 	tst.w	r2, #2
    242e:	461e      	mov	r6, r3
    2430:	d115      	bne.n	245e <monitor_console_out+0x52>
	if (c != '\n' && len < sizeof(buf) - 1) {
    2432:	2d0a      	cmp	r5, #10
    2434:	4c16      	ldr	r4, [pc, #88]	; (2490 <monitor_console_out+0x84>)
    2436:	4917      	ldr	r1, [pc, #92]	; (2494 <monitor_console_out+0x88>)
    2438:	d013      	beq.n	2462 <monitor_console_out+0x56>
    243a:	6822      	ldr	r2, [r4, #0]
    243c:	2a7e      	cmp	r2, #126	; 0x7e
    243e:	d810      	bhi.n	2462 <monitor_console_out+0x56>
		buf[len++] = c;
    2440:	1c50      	adds	r0, r2, #1
    2442:	548d      	strb	r5, [r1, r2]
    2444:	6020      	str	r0, [r4, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2446:	f3bf 8f5b 	dmb	ish
    244a:	e853 2f00 	ldrex	r2, [r3]
    244e:	f022 0202 	bic.w	r2, r2, #2
    2452:	e843 2100 	strex	r1, r2, [r3]
    2456:	2900      	cmp	r1, #0
    2458:	d1f7      	bne.n	244a <monitor_console_out+0x3e>
    245a:	f3bf 8f5b 	dmb	ish
}
    245e:	4628      	mov	r0, r5
    2460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	buf[len++] = '\0';
    2462:	6823      	ldr	r3, [r4, #0]
    2464:	2700      	movs	r7, #0
    2466:	1c5a      	adds	r2, r3, #1
    2468:	54cf      	strb	r7, [r1, r3]
	bt_monitor_send(BT_MONITOR_SYSTEM_NOTE, buf, len);
    246a:	200c      	movs	r0, #12
    246c:	4909      	ldr	r1, [pc, #36]	; (2494 <monitor_console_out+0x88>)
	buf[len++] = '\0';
    246e:	6022      	str	r2, [r4, #0]
	bt_monitor_send(BT_MONITOR_SYSTEM_NOTE, buf, len);
    2470:	f7ff ff7c 	bl	236c <bt_monitor_send>
	len = 0;
    2474:	6027      	str	r7, [r4, #0]
    2476:	f3bf 8f5b 	dmb	ish
    247a:	e856 3f00 	ldrex	r3, [r6]
    247e:	f023 0302 	bic.w	r3, r3, #2
    2482:	e846 3200 	strex	r2, r3, [r6]
    2486:	2a00      	cmp	r2, #0
    2488:	d0e7      	beq.n	245a <monitor_console_out+0x4e>
    248a:	e7f6      	b.n	247a <monitor_console_out+0x6e>
    248c:	2000077c 	.word	0x2000077c
    2490:	20000780 	.word	0x20000780
    2494:	200006e5 	.word	0x200006e5

00002498 <bt_monitor_new_index>:
{
    2498:	b530      	push	{r4, r5, lr}
    249a:	b085      	sub	sp, #20
    249c:	4615      	mov	r5, r2
    249e:	461c      	mov	r4, r3
	pkt.type = type;
    24a0:	f88d 0000 	strb.w	r0, [sp]
	pkt.bus = bus;
    24a4:	f88d 1001 	strb.w	r1, [sp, #1]
	memcpy(pkt.bdaddr, addr, 6);
    24a8:	2206      	movs	r2, #6
    24aa:	4629      	mov	r1, r5
    24ac:	f10d 0002 	add.w	r0, sp, #2
    24b0:	f7fe f8b3 	bl	61a <memcpy>
	strncpy(pkt.name, name, sizeof(pkt.name) - 1);
    24b4:	4621      	mov	r1, r4
    24b6:	2207      	movs	r2, #7
    24b8:	a802      	add	r0, sp, #8
    24ba:	f7fe f87b 	bl	5b4 <strncpy>
	pkt.name[sizeof(pkt.name) - 1] = '\0';
    24be:	2000      	movs	r0, #0
	bt_monitor_send(BT_MONITOR_NEW_INDEX, &pkt, sizeof(pkt));
    24c0:	2210      	movs	r2, #16
    24c2:	4669      	mov	r1, sp
	pkt.name[sizeof(pkt.name) - 1] = '\0';
    24c4:	f88d 000f 	strb.w	r0, [sp, #15]
	bt_monitor_send(BT_MONITOR_NEW_INDEX, &pkt, sizeof(pkt));
    24c8:	f7ff ff50 	bl	236c <bt_monitor_send>
}
    24cc:	b005      	add	sp, #20
    24ce:	bd30      	pop	{r4, r5, pc}

000024d0 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    24d0:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    24d2:	4d0b      	ldr	r5, [pc, #44]	; (2500 <ver_str+0x30>)
{
    24d4:	4606      	mov	r6, r0
	const char * const str[] = {
    24d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    24d8:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    24da:	466c      	mov	r4, sp
    24dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    24de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    24e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    24e2:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    24e6:	2e09      	cmp	r6, #9
	const char * const str[] = {
    24e8:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    24ec:	bf9b      	ittet	ls
    24ee:	ab0a      	addls	r3, sp, #40	; 0x28
    24f0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    24f4:	4803      	ldrhi	r0, [pc, #12]	; (2504 <ver_str+0x34>)
		return str[ver];
    24f6:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    24fa:	b00a      	add	sp, #40	; 0x28
    24fc:	bd70      	pop	{r4, r5, r6, pc}
    24fe:	bf00      	nop
    2500:	0000cbc0 	.word	0x0000cbc0
    2504:	0000ddfc 	.word	0x0000ddfc

00002508 <valid_adv_param>:



static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2508:	7803      	ldrb	r3, [r0, #0]
    250a:	8842      	ldrh	r2, [r0, #2]
    250c:	f013 0301 	ands.w	r3, r3, #1
    2510:	d105      	bne.n	251e <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    2512:	4909      	ldr	r1, [pc, #36]	; (2538 <valid_adv_param+0x30>)
    2514:	7b89      	ldrb	r1, [r1, #14]
    2516:	2908      	cmp	r1, #8
    2518:	d801      	bhi.n	251e <valid_adv_param+0x16>
    251a:	2a9f      	cmp	r2, #159	; 0x9f
    251c:	d90a      	bls.n	2534 <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    251e:	8880      	ldrh	r0, [r0, #4]
    2520:	4282      	cmp	r2, r0
    2522:	d807      	bhi.n	2534 <valid_adv_param+0x2c>
    2524:	2a1f      	cmp	r2, #31
    2526:	d905      	bls.n	2534 <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    2528:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    252c:	bf8c      	ite	hi
    252e:	2000      	movhi	r0, #0
    2530:	2001      	movls	r0, #1
    2532:	4770      	bx	lr
			return false;
    2534:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    2536:	4770      	bx	lr
    2538:	20004e88 	.word	0x20004e88

0000253c <atomic_or>:
{
    253c:	b500      	push	{lr}
}
    253e:	f3bf 8f5b 	dmb	ish
    2542:	e850 3f00 	ldrex	r3, [r0]
    2546:	ea43 0201 	orr.w	r2, r3, r1
    254a:	e840 2e00 	strex	lr, r2, [r0]
    254e:	f1be 0f00 	cmp.w	lr, #0
    2552:	d1f6      	bne.n	2542 <atomic_or+0x6>
    2554:	f3bf 8f5b 	dmb	ish
    2558:	4618      	mov	r0, r3
    255a:	f85d fb04 	ldr.w	pc, [sp], #4

0000255e <atomic_and>:
{
    255e:	b500      	push	{lr}
}
    2560:	f3bf 8f5b 	dmb	ish
    2564:	e850 3f00 	ldrex	r3, [r0]
    2568:	ea03 0201 	and.w	r2, r3, r1
    256c:	e840 2e00 	strex	lr, r2, [r0]
    2570:	f1be 0f00 	cmp.w	lr, #0
    2574:	d1f6      	bne.n	2564 <atomic_and+0x6>
    2576:	f3bf 8f5b 	dmb	ish
    257a:	4618      	mov	r0, r3
    257c:	f85d fb04 	ldr.w	pc, [sp], #4

00002580 <hci_cmd_done>:
{
    2580:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2584:	4615      	mov	r5, r2
    2586:	460f      	mov	r7, r1
    2588:	4606      	mov	r6, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    258a:	f009 fd51 	bl	c030 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);
    258e:	4a27      	ldr	r2, [pc, #156]	; (262c <hci_cmd_done+0xac>)
    2590:	4927      	ldr	r1, [pc, #156]	; (2630 <hci_cmd_done+0xb0>)
    2592:	9502      	str	r5, [sp, #8]
    2594:	4603      	mov	r3, r0
    2596:	e88d 00c0 	stmia.w	sp, {r6, r7}
    259a:	2007      	movs	r0, #7
    259c:	f7ff fe78 	bl	2290 <bt_log>
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    25a0:	79a8      	ldrb	r0, [r5, #6]
    25a2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2640 <hci_cmd_done+0xc0>
    25a6:	f009 f835 	bl	b614 <net_buf_pool_get>
    25aa:	4580      	cmp	r8, r0
    25ac:	d010      	beq.n	25d0 <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    25ae:	79ac      	ldrb	r4, [r5, #6]
    25b0:	4620      	mov	r0, r4
    25b2:	f009 f82f 	bl	b614 <net_buf_pool_get>
    25b6:	f8cd 8008 	str.w	r8, [sp, #8]
    25ba:	9001      	str	r0, [sp, #4]
    25bc:	9400      	str	r4, [sp, #0]
    25be:	4633      	mov	r3, r6
    25c0:	4a1a      	ldr	r2, [pc, #104]	; (262c <hci_cmd_done+0xac>)
    25c2:	491c      	ldr	r1, [pc, #112]	; (2634 <hci_cmd_done+0xb4>)
    25c4:	2004      	movs	r0, #4
    25c6:	f7ff fe63 	bl	2290 <bt_log>
}
    25ca:	b004      	add	sp, #16
    25cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    25d0:	4628      	mov	r0, r5
    25d2:	f009 f825 	bl	b620 <net_buf_id>
    25d6:	4c18      	ldr	r4, [pc, #96]	; (2638 <hci_cmd_done+0xb8>)
    25d8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    25dc:	8843      	ldrh	r3, [r0, #2]
    25de:	42b3      	cmp	r3, r6
    25e0:	d00c      	beq.n	25fc <hci_cmd_done+0x7c>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    25e2:	4628      	mov	r0, r5
    25e4:	f009 f81c 	bl	b620 <net_buf_id>
    25e8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    25ec:	4a0f      	ldr	r2, [pc, #60]	; (262c <hci_cmd_done+0xac>)
    25ee:	8843      	ldrh	r3, [r0, #2]
    25f0:	9300      	str	r3, [sp, #0]
    25f2:	4912      	ldr	r1, [pc, #72]	; (263c <hci_cmd_done+0xbc>)
    25f4:	4633      	mov	r3, r6
    25f6:	2004      	movs	r0, #4
    25f8:	f7ff fe4a 	bl	2290 <bt_log>
	if (cmd(buf)->sync) {
    25fc:	4628      	mov	r0, r5
    25fe:	f009 f80f 	bl	b620 <net_buf_id>
    2602:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2606:	6843      	ldr	r3, [r0, #4]
    2608:	2b00      	cmp	r3, #0
    260a:	d0de      	beq.n	25ca <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
    260c:	4628      	mov	r0, r5
    260e:	f009 f807 	bl	b620 <net_buf_id>
    2612:	f804 7030 	strb.w	r7, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    2616:	4628      	mov	r0, r5
    2618:	f009 f802 	bl	b620 <net_buf_id>
    261c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2620:	6840      	ldr	r0, [r0, #4]
}
    2622:	b004      	add	sp, #16
    2624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2628:	f009 bd60 	b.w	c0ec <_impl_k_sem_give>
    262c:	0000d2c9 	.word	0x0000d2c9
    2630:	0000d7d3 	.word	0x0000d7d3
    2634:	0000d7ff 	.word	0x0000d7ff
    2638:	20000788 	.word	0x20000788
    263c:	0000d838 	.word	0x0000d838
    2640:	200051d0 	.word	0x200051d0

00002644 <atomic_test_bit.constprop.23>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2644:	4b07      	ldr	r3, [pc, #28]	; (2664 <atomic_test_bit.constprop.23+0x20>)
    2646:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    264a:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    264c:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    2650:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2656:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    265a:	fa43 f000 	asr.w	r0, r3, r0
}
    265e:	f000 0001 	and.w	r0, r0, #1
    2662:	4770      	bx	lr
    2664:	20004e88 	.word	0x20004e88

00002668 <bt_hci_cmd_create>:
{
    2668:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    266c:	4606      	mov	r6, r0
    266e:	460f      	mov	r7, r1
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    2670:	f009 fcde 	bl	c030 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);
    2674:	4d1c      	ldr	r5, [pc, #112]	; (26e8 <bt_hci_cmd_create+0x80>)
    2676:	491d      	ldr	r1, [pc, #116]	; (26ec <bt_hci_cmd_create+0x84>)
    2678:	4603      	mov	r3, r0
    267a:	462a      	mov	r2, r5
    267c:	e88d 00c0 	stmia.w	sp, {r6, r7}
    2680:	2007      	movs	r0, #7
    2682:	f7ff fe05 	bl	2290 <bt_log>
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2686:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    268a:	4819      	ldr	r0, [pc, #100]	; (26f0 <bt_hci_cmd_create+0x88>)
    268c:	f009 f856 	bl	b73c <net_buf_alloc_fixed>
    2690:	4604      	mov	r4, r0
    2692:	f009 fccd 	bl	c030 <_impl_k_current_get>
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2696:	f104 0808 	add.w	r8, r4, #8
	BT_DBG("buf %p", buf);
    269a:	4603      	mov	r3, r0
    269c:	462a      	mov	r2, r5
    269e:	9400      	str	r4, [sp, #0]
    26a0:	4914      	ldr	r1, [pc, #80]	; (26f4 <bt_hci_cmd_create+0x8c>)
	cmd(buf)->opcode = opcode;
    26a2:	4d15      	ldr	r5, [pc, #84]	; (26f8 <bt_hci_cmd_create+0x90>)
	BT_DBG("buf %p", buf);
    26a4:	2007      	movs	r0, #7
    26a6:	f7ff fdf3 	bl	2290 <bt_log>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    26aa:	f04f 0900 	mov.w	r9, #0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    26ae:	2100      	movs	r1, #0
    26b0:	4640      	mov	r0, r8
    26b2:	f009 f862 	bl	b77a <net_buf_simple_reserve>
    26b6:	f884 9014 	strb.w	r9, [r4, #20]
	cmd(buf)->opcode = opcode;
    26ba:	4620      	mov	r0, r4
    26bc:	f008 ffb0 	bl	b620 <net_buf_id>
    26c0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    26c4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    26c6:	4620      	mov	r0, r4
    26c8:	f008 ffaa 	bl	b620 <net_buf_id>
    26cc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    26d0:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    26d2:	f8c0 9004 	str.w	r9, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    26d6:	4640      	mov	r0, r8
    26d8:	f009 f892 	bl	b800 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    26dc:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    26de:	7087      	strb	r7, [r0, #2]
}
    26e0:	4620      	mov	r0, r4
    26e2:	b002      	add	sp, #8
    26e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    26e8:	0000d259 	.word	0x0000d259
    26ec:	0000d4cf 	.word	0x0000d4cf
    26f0:	200051d0 	.word	0x200051d0
    26f4:	0000d4f3 	.word	0x0000d4f3
    26f8:	20000788 	.word	0x20000788

000026fc <bt_hci_cmd_send_sync>:
{
    26fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2700:	4680      	mov	r8, r0
    2702:	b08a      	sub	sp, #40	; 0x28
    2704:	4615      	mov	r5, r2
	if (!buf) {
    2706:	460c      	mov	r4, r1
    2708:	b921      	cbnz	r1, 2714 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    270a:	f7ff ffad 	bl	2668 <bt_hci_cmd_create>
		if (!buf) {
    270e:	4604      	mov	r4, r0
    2710:	2800      	cmp	r0, #0
    2712:	d04b      	beq.n	27ac <bt_hci_cmd_send_sync+0xb0>
    2714:	f009 fc8c 	bl	c030 <_impl_k_current_get>
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2718:	89a3      	ldrh	r3, [r4, #12]
    271a:	9302      	str	r3, [sp, #8]
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    271c:	af04      	add	r7, sp, #16
    271e:	4603      	mov	r3, r0
    2720:	4a24      	ldr	r2, [pc, #144]	; (27b4 <bt_hci_cmd_send_sync+0xb8>)
    2722:	4925      	ldr	r1, [pc, #148]	; (27b8 <bt_hci_cmd_send_sync+0xbc>)
	cmd(buf)->sync = &sync_sem;
    2724:	4e25      	ldr	r6, [pc, #148]	; (27bc <bt_hci_cmd_send_sync+0xc0>)
	BT_DBG("buf %p opcode 0x%04x len %u", buf, opcode, buf->len);
    2726:	2007      	movs	r0, #7
    2728:	e88d 0110 	stmia.w	sp, {r4, r8}
    272c:	f7ff fdb0 	bl	2290 <bt_log>
    2730:	2201      	movs	r2, #1
    2732:	2100      	movs	r1, #0
    2734:	4638      	mov	r0, r7
    2736:	f009 fccf 	bl	c0d8 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    273a:	4620      	mov	r0, r4
    273c:	f008 ff70 	bl	b620 <net_buf_id>
    2740:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2744:	6047      	str	r7, [r0, #4]
	net_buf_ref(buf);
    2746:	4620      	mov	r0, r4
    2748:	f009 f856 	bl	b7f8 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    274c:	4621      	mov	r1, r4
    274e:	481c      	ldr	r0, [pc, #112]	; (27c0 <bt_hci_cmd_send_sync+0xc4>)
    2750:	f009 f817 	bl	b782 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2754:	f242 7110 	movw	r1, #10000	; 0x2710
    2758:	4638      	mov	r0, r7
    275a:	f009 fd27 	bl	c1ac <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    275e:	f009 fc67 	bl	c030 <_impl_k_current_get>
    2762:	4607      	mov	r7, r0
	BT_DBG("opcode 0x%04x status 0x%02x", opcode, cmd(buf)->status);
    2764:	4620      	mov	r0, r4
    2766:	f008 ff5b 	bl	b620 <net_buf_id>
    276a:	f816 3030 	ldrb.w	r3, [r6, r0, lsl #3]
    276e:	9301      	str	r3, [sp, #4]
    2770:	4a10      	ldr	r2, [pc, #64]	; (27b4 <bt_hci_cmd_send_sync+0xb8>)
    2772:	4914      	ldr	r1, [pc, #80]	; (27c4 <bt_hci_cmd_send_sync+0xc8>)
    2774:	f8cd 8000 	str.w	r8, [sp]
    2778:	463b      	mov	r3, r7
    277a:	2007      	movs	r0, #7
    277c:	f7ff fd88 	bl	2290 <bt_log>
	if (cmd(buf)->status) {
    2780:	4620      	mov	r0, r4
    2782:	f008 ff4d 	bl	b620 <net_buf_id>
    2786:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    278a:	b138      	cbz	r0, 279c <bt_hci_cmd_send_sync+0xa0>
		net_buf_unref(buf);
    278c:	4620      	mov	r0, r4
    278e:	f009 f805 	bl	b79c <net_buf_unref>
		err = -EIO;
    2792:	f06f 0004 	mvn.w	r0, #4
}
    2796:	b00a      	add	sp, #40	; 0x28
    2798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rsp) {
    279c:	b10d      	cbz	r5, 27a2 <bt_hci_cmd_send_sync+0xa6>
			*rsp = buf;
    279e:	602c      	str	r4, [r5, #0]
    27a0:	e7f9      	b.n	2796 <bt_hci_cmd_send_sync+0x9a>
			net_buf_unref(buf);
    27a2:	4620      	mov	r0, r4
    27a4:	f008 fffa 	bl	b79c <net_buf_unref>
		err = 0;
    27a8:	4628      	mov	r0, r5
    27aa:	e7f4      	b.n	2796 <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
    27ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
    27b0:	e7f1      	b.n	2796 <bt_hci_cmd_send_sync+0x9a>
    27b2:	bf00      	nop
    27b4:	0000d26b 	.word	0x0000d26b
    27b8:	0000d547 	.word	0x0000d547
    27bc:	20000788 	.word	0x20000788
    27c0:	20004f3c 	.word	0x20004f3c
    27c4:	0000d56c 	.word	0x0000d56c

000027c8 <set_random_address>:
{
    27c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    27ca:	4605      	mov	r5, r0
    27cc:	f009 fc30 	bl	c030 <_impl_k_current_get>
    27d0:	4604      	mov	r4, r0
	BT_DBG("%s", bt_addr_str(addr));
    27d2:	4628      	mov	r0, r5
    27d4:	f7ff fc5a 	bl	208c <bt_addr_str>
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    27d8:	4e18      	ldr	r6, [pc, #96]	; (283c <set_random_address+0x74>)
    27da:	9000      	str	r0, [sp, #0]
    27dc:	4623      	mov	r3, r4
    27de:	4a18      	ldr	r2, [pc, #96]	; (2840 <set_random_address+0x78>)
    27e0:	4918      	ldr	r1, [pc, #96]	; (2844 <set_random_address+0x7c>)
    27e2:	2007      	movs	r0, #7
    27e4:	f7ff fd54 	bl	2290 <bt_log>
    27e8:	2206      	movs	r2, #6
    27ea:	f106 0108 	add.w	r1, r6, #8
    27ee:	4628      	mov	r0, r5
    27f0:	f7fd fefe 	bl	5f0 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    27f4:	4604      	mov	r4, r0
    27f6:	b1d8      	cbz	r0, 2830 <set_random_address+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    27f8:	2106      	movs	r1, #6
    27fa:	f242 0005 	movw	r0, #8197	; 0x2005
    27fe:	f7ff ff33 	bl	2668 <bt_hci_cmd_create>
	if (!buf) {
    2802:	4604      	mov	r4, r0
    2804:	b1b8      	cbz	r0, 2836 <set_random_address+0x6e>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2806:	2206      	movs	r2, #6
    2808:	4629      	mov	r1, r5
    280a:	3008      	adds	r0, #8
    280c:	f008 fffe 	bl	b80c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2810:	4621      	mov	r1, r4
    2812:	2200      	movs	r2, #0
    2814:	f242 0005 	movw	r0, #8197	; 0x2005
    2818:	f7ff ff70 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    281c:	4604      	mov	r4, r0
    281e:	b938      	cbnz	r0, 2830 <set_random_address+0x68>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2820:	2206      	movs	r2, #6
    2822:	4629      	mov	r1, r5
    2824:	f106 0008 	add.w	r0, r6, #8
    2828:	f7fd fef7 	bl	61a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    282c:	2301      	movs	r3, #1
    282e:	71f3      	strb	r3, [r6, #7]
}
    2830:	4620      	mov	r0, r4
    2832:	b002      	add	sp, #8
    2834:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2836:	f06f 0436 	mvn.w	r4, #54	; 0x36
    283a:	e7f9      	b.n	2830 <set_random_address+0x68>
    283c:	20004e88 	.word	0x20004e88
    2840:	0000d280 	.word	0x0000d280
    2844:	0000dd10 	.word	0x0000dd10

00002848 <le_set_private_addr>:
{
    2848:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    284a:	2106      	movs	r1, #6
    284c:	4668      	mov	r0, sp
    284e:	f002 f963 	bl	4b18 <bt_rand>
	if (err) {
    2852:	b940      	cbnz	r0, 2866 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2854:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2858:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    285a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    285e:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2862:	f7ff ffb1 	bl	27c8 <set_random_address>
}
    2866:	b003      	add	sp, #12
    2868:	f85d fb04 	ldr.w	pc, [sp], #4

0000286c <set_le_scan_enable>:
{
    286c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    286e:	2102      	movs	r1, #2
{
    2870:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2872:	f242 000c 	movw	r0, #8204	; 0x200c
    2876:	f7ff fef7 	bl	2668 <bt_hci_cmd_create>
	if (!buf) {
    287a:	4604      	mov	r4, r0
    287c:	b320      	cbz	r0, 28c8 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    287e:	2102      	movs	r1, #2
    2880:	3008      	adds	r0, #8
    2882:	f008 ffbd 	bl	b800 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2886:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2888:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    288a:	d114      	bne.n	28b6 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    288c:	200a      	movs	r0, #10
    288e:	f7ff fed9 	bl	2644 <atomic_test_bit.constprop.23>
    2892:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    2894:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2896:	2200      	movs	r2, #0
    2898:	4621      	mov	r1, r4
    289a:	f242 000c 	movw	r0, #8204	; 0x200c
    289e:	f7ff ff2d 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    28a2:	4604      	mov	r4, r0
    28a4:	b928      	cbnz	r0, 28b2 <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    28a6:	2d01      	cmp	r5, #1
    28a8:	d108      	bne.n	28bc <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    28aa:	2180      	movs	r1, #128	; 0x80
    28ac:	4808      	ldr	r0, [pc, #32]	; (28d0 <set_le_scan_enable+0x64>)
    28ae:	f7ff fe45 	bl	253c <atomic_or>
}
    28b2:	4620      	mov	r0, r4
    28b4:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    28b6:	2300      	movs	r3, #0
    28b8:	7043      	strb	r3, [r0, #1]
    28ba:	e7eb      	b.n	2894 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28bc:	f06f 0180 	mvn.w	r1, #128	; 0x80
    28c0:	4803      	ldr	r0, [pc, #12]	; (28d0 <set_le_scan_enable+0x64>)
    28c2:	f7ff fe4c 	bl	255e <atomic_and>
    28c6:	e7f4      	b.n	28b2 <set_le_scan_enable+0x46>
		return -ENOBUFS;
    28c8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    28cc:	e7f1      	b.n	28b2 <set_le_scan_enable+0x46>
    28ce:	bf00      	nop
    28d0:	20004ef8 	.word	0x20004ef8

000028d4 <set_ext_ad>:
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}

//#if defined(CONFIG_EXT_ADV)
static int set_ext_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    28d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28d8:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_ext_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    28da:	21fc      	movs	r1, #252	; 0xfc
{
    28dc:	4607      	mov	r7, r0
    28de:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    28e0:	f7ff fec2 	bl	2668 <bt_hci_cmd_create>
	if (!buf) {
    28e4:	4606      	mov	r6, r0
    28e6:	2800      	cmp	r0, #0
    28e8:	d03c      	beq.n	2964 <set_ext_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    28ea:	21fc      	movs	r1, #252	; 0xfc
    28ec:	3008      	adds	r0, #8
    28ee:	f008 ff87 	bl	b800 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    28f2:	22fc      	movs	r2, #252	; 0xfc
    28f4:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    28f6:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    28f8:	f7fd febb 	bl	672 <memset>

	for (i = 0; i < ad_len; i++) {
    28fc:	f04f 0900 	mov.w	r9, #0
    2900:	45c1      	cmp	r9, r8
    2902:	d106      	bne.n	2912 <set_ext_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2904:	4631      	mov	r1, r6
    2906:	4638      	mov	r0, r7
    2908:	2200      	movs	r2, #0
}
    290a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    290e:	f7ff bef5 	b.w	26fc <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 251) {
    2912:	7862      	ldrb	r2, [r4, #1]
    2914:	782b      	ldrb	r3, [r5, #0]
    2916:	18d1      	adds	r1, r2, r3
    2918:	3102      	adds	r1, #2
    291a:	29fb      	cmp	r1, #251	; 0xfb
    291c:	f104 0408 	add.w	r4, r4, #8
    2920:	dd06      	ble.n	2930 <set_ext_ad+0x5c>
			net_buf_unref(buf);
    2922:	4630      	mov	r0, r6
    2924:	f008 ff3a 	bl	b79c <net_buf_unref>
			return -EINVAL;
    2928:	f06f 0015 	mvn.w	r0, #21
    292c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    2930:	18e9      	adds	r1, r5, r3
    2932:	1c50      	adds	r0, r2, #1
    2934:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    2936:	1c98      	adds	r0, r3, #2
    2938:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    293a:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    293c:	7028      	strb	r0, [r5, #0]
    293e:	fa55 f383 	uxtab	r3, r5, r3
    2942:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    2946:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    2948:	3001      	adds	r0, #1
    294a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    294e:	4428      	add	r0, r5
    2950:	f7fd fe63 	bl	61a <memcpy>
		set_data->len += ad[i].data_len;
    2954:	782b      	ldrb	r3, [r5, #0]
    2956:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    295a:	4413      	add	r3, r2
    295c:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    295e:	f109 0901 	add.w	r9, r9, #1
    2962:	e7cd      	b.n	2900 <set_ext_ad+0x2c>
		return -ENOBUFS;
    2964:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000296c <bt_le_scan_update>:
{
    296c:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    296e:	2008      	movs	r0, #8
    2970:	f7ff fe68 	bl	2644 <atomic_test_bit.constprop.23>
    2974:	4601      	mov	r1, r0
    2976:	b940      	cbnz	r0, 298a <bt_le_scan_update+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2978:	2007      	movs	r0, #7
    297a:	f7ff fe63 	bl	2644 <atomic_test_bit.constprop.23>
    297e:	b120      	cbz	r0, 298a <bt_le_scan_update+0x1e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2980:	4608      	mov	r0, r1
}
    2982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2986:	f7ff bf71 	b.w	286c <set_le_scan_enable>
}
    298a:	2000      	movs	r0, #0
    298c:	bd08      	pop	{r3, pc}
	...

00002990 <bt_init.part.13>:
static int bt_init(void)
    2990:	b508      	push	{r3, lr}
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
    2992:	2200      	movs	r2, #0
    2994:	4611      	mov	r1, r2
    2996:	2008      	movs	r0, #8
    2998:	f7ff fce8 	bl	236c <bt_monitor_send>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    299c:	2102      	movs	r1, #2
    299e:	4804      	ldr	r0, [pc, #16]	; (29b0 <bt_init.part.13+0x20>)
    29a0:	f7ff fdcc 	bl	253c <atomic_or>
	bt_le_scan_update(false);
    29a4:	2000      	movs	r0, #0
    29a6:	f7ff ffe1 	bl	296c <bt_le_scan_update>
}
    29aa:	2000      	movs	r0, #0
    29ac:	bd08      	pop	{r3, pc}
    29ae:	bf00      	nop
    29b0:	20004ef8 	.word	0x20004ef8

000029b4 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    29b4:	2301      	movs	r3, #1
{
    29b6:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    29b8:	2106      	movs	r1, #6
{
    29ba:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    29bc:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    29c0:	f002 f8aa 	bl	4b18 <bt_rand>
	if (err) {
    29c4:	b918      	cbnz	r0, 29ce <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    29c6:	79a3      	ldrb	r3, [r4, #6]
    29c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    29cc:	71a3      	strb	r3, [r4, #6]
}
    29ce:	bd10      	pop	{r4, pc}

000029d0 <hci_init>:
{
    29d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29d2:	b08b      	sub	sp, #44	; 0x2c
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    29d4:	aa08      	add	r2, sp, #32
    29d6:	2100      	movs	r1, #0
    29d8:	f640 4003 	movw	r0, #3075	; 0xc03
    29dc:	f7ff fe8e 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    29e0:	4604      	mov	r4, r0
    29e2:	2800      	cmp	r0, #0
    29e4:	f040 80b2 	bne.w	2b4c <hci_init+0x17c>
	u8_t status = buf->data[0];
    29e8:	9b08      	ldr	r3, [sp, #32]
    29ea:	689b      	ldr	r3, [r3, #8]
    29ec:	781c      	ldrb	r4, [r3, #0]
    29ee:	f009 fb1f 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", status);
    29f2:	9400      	str	r4, [sp, #0]
    29f4:	4603      	mov	r3, r0
    29f6:	4ab3      	ldr	r2, [pc, #716]	; (2cc4 <hci_init+0x2f4>)
    29f8:	49b3      	ldr	r1, [pc, #716]	; (2cc8 <hci_init+0x2f8>)
    29fa:	2007      	movs	r0, #7
    29fc:	f7ff fc48 	bl	2290 <bt_log>
	if (status) {
    2a00:	b96c      	cbnz	r4, 2a1e <hci_init+0x4e>
	scan_dev_found_cb = NULL;
    2a02:	4bb2      	ldr	r3, [pc, #712]	; (2ccc <hci_init+0x2fc>)
    2a04:	601c      	str	r4, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2a06:	4bb2      	ldr	r3, [pc, #712]	; (2cd0 <hci_init+0x300>)
    2a08:	f3bf 8f5b 	dmb	ish
    2a0c:	2201      	movs	r2, #1
    2a0e:	e853 1f00 	ldrex	r1, [r3]
    2a12:	e843 2000 	strex	r0, r2, [r3]
    2a16:	2800      	cmp	r0, #0
    2a18:	d1f9      	bne.n	2a0e <hci_init+0x3e>
    2a1a:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    2a1e:	9808      	ldr	r0, [sp, #32]
    2a20:	f008 febc 	bl	b79c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2a24:	aa08      	add	r2, sp, #32
    2a26:	2100      	movs	r1, #0
    2a28:	f241 0003 	movw	r0, #4099	; 0x1003
    2a2c:	f7ff fe66 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2a30:	4604      	mov	r4, r0
    2a32:	2800      	cmp	r0, #0
    2a34:	f040 808a 	bne.w	2b4c <hci_init+0x17c>
    2a38:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2a3a:	4ea6      	ldr	r6, [pc, #664]	; (2cd4 <hci_init+0x304>)
    2a3c:	689d      	ldr	r5, [r3, #8]
    2a3e:	f009 faf7 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a42:	f815 3b01 	ldrb.w	r3, [r5], #1
    2a46:	9300      	str	r3, [sp, #0]
    2a48:	4aa3      	ldr	r2, [pc, #652]	; (2cd8 <hci_init+0x308>)
    2a4a:	499f      	ldr	r1, [pc, #636]	; (2cc8 <hci_init+0x2f8>)
    2a4c:	4603      	mov	r3, r0
    2a4e:	2007      	movs	r0, #7
    2a50:	f7ff fc1e 	bl	2290 <bt_log>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2a54:	4629      	mov	r1, r5
    2a56:	2208      	movs	r2, #8
    2a58:	f106 0016 	add.w	r0, r6, #22
    2a5c:	f7fd fddd 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2a60:	9808      	ldr	r0, [sp, #32]
    2a62:	f008 fe9b 	bl	b79c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2a66:	4621      	mov	r1, r4
    2a68:	aa08      	add	r2, sp, #32
    2a6a:	f241 0001 	movw	r0, #4097	; 0x1001
    2a6e:	f7ff fe45 	bl	26fc <bt_hci_cmd_send_sync>
    2a72:	4635      	mov	r5, r6
	if (err) {
    2a74:	4604      	mov	r4, r0
    2a76:	2800      	cmp	r0, #0
    2a78:	d168      	bne.n	2b4c <hci_init+0x17c>
    2a7a:	9b08      	ldr	r3, [sp, #32]
    2a7c:	689f      	ldr	r7, [r3, #8]
    2a7e:	f009 fad7 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2a82:	783b      	ldrb	r3, [r7, #0]
    2a84:	4990      	ldr	r1, [pc, #576]	; (2cc8 <hci_init+0x2f8>)
    2a86:	9300      	str	r3, [sp, #0]
    2a88:	4a94      	ldr	r2, [pc, #592]	; (2cdc <hci_init+0x30c>)
    2a8a:	4603      	mov	r3, r0
    2a8c:	2007      	movs	r0, #7
    2a8e:	f7ff fbff 	bl	2290 <bt_log>
	bt_dev.hci_version = rp->hci_version;
    2a92:	787b      	ldrb	r3, [r7, #1]
    2a94:	73b3      	strb	r3, [r6, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2a96:	78fa      	ldrb	r2, [r7, #3]
    2a98:	78bb      	ldrb	r3, [r7, #2]
	net_buf_unref(rsp);
    2a9a:	9808      	ldr	r0, [sp, #32]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    2a9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2aa0:	8233      	strh	r3, [r6, #16]
	bt_dev.lmp_version = rp->lmp_version;
    2aa2:	793b      	ldrb	r3, [r7, #4]
    2aa4:	73f3      	strb	r3, [r6, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    2aa6:	7a3a      	ldrb	r2, [r7, #8]
    2aa8:	79fb      	ldrb	r3, [r7, #7]
    2aaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2aae:	8273      	strh	r3, [r6, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    2ab0:	79ba      	ldrb	r2, [r7, #6]
    2ab2:	797b      	ldrb	r3, [r7, #5]
    2ab4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2ab8:	82b3      	strh	r3, [r6, #20]
	net_buf_unref(rsp);
    2aba:	f008 fe6f 	bl	b79c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    2abe:	4621      	mov	r1, r4
    2ac0:	aa08      	add	r2, sp, #32
    2ac2:	f241 0009 	movw	r0, #4105	; 0x1009
    2ac6:	f7ff fe19 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2aca:	4604      	mov	r4, r0
    2acc:	2800      	cmp	r0, #0
    2ace:	d13d      	bne.n	2b4c <hci_init+0x17c>
    2ad0:	9b08      	ldr	r3, [sp, #32]
    2ad2:	689f      	ldr	r7, [r3, #8]
    2ad4:	f009 faac 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2ad8:	f817 3b01 	ldrb.w	r3, [r7], #1
    2adc:	9300      	str	r3, [sp, #0]
    2ade:	4a80      	ldr	r2, [pc, #512]	; (2ce0 <hci_init+0x310>)
    2ae0:	4979      	ldr	r1, [pc, #484]	; (2cc8 <hci_init+0x2f8>)
    2ae2:	4603      	mov	r3, r0
    2ae4:	2007      	movs	r0, #7
    2ae6:	f7ff fbd3 	bl	2290 <bt_log>
    2aea:	2206      	movs	r2, #6
    2aec:	4639      	mov	r1, r7
    2aee:	1c70      	adds	r0, r6, #1
    2af0:	f7fd fd93 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2af4:	9808      	ldr	r0, [sp, #32]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    2af6:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    2af8:	f008 fe50 	bl	b79c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2afc:	4621      	mov	r1, r4
    2afe:	aa08      	add	r2, sp, #32
    2b00:	f241 0002 	movw	r0, #4098	; 0x1002
    2b04:	f7ff fdfa 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2b08:	4604      	mov	r4, r0
    2b0a:	b9f8      	cbnz	r0, 2b4c <hci_init+0x17c>
    2b0c:	9b08      	ldr	r3, [sp, #32]
    2b0e:	689f      	ldr	r7, [r3, #8]
    2b10:	f009 fa8e 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2b14:	f817 3b01 	ldrb.w	r3, [r7], #1
    2b18:	9300      	str	r3, [sp, #0]
    2b1a:	4a72      	ldr	r2, [pc, #456]	; (2ce4 <hci_init+0x314>)
    2b1c:	496a      	ldr	r1, [pc, #424]	; (2cc8 <hci_init+0x2f8>)
    2b1e:	4603      	mov	r3, r0
    2b20:	2007      	movs	r0, #7
    2b22:	f7ff fbb5 	bl	2290 <bt_log>
	memcpy(bt_dev.supported_commands, rp->commands,
    2b26:	2240      	movs	r2, #64	; 0x40
    2b28:	4639      	mov	r1, r7
    2b2a:	f106 001e 	add.w	r0, r6, #30
    2b2e:	f7fd fd74 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2b32:	9808      	ldr	r0, [sp, #32]
    2b34:	f008 fe32 	bl	b79c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    2b38:	7eb3      	ldrb	r3, [r6, #26]
    2b3a:	0658      	lsls	r0, r3, #25
    2b3c:	d409      	bmi.n	2b52 <hci_init+0x182>
		BT_ERR("Non-LE capable controller detected!");
    2b3e:	4a6a      	ldr	r2, [pc, #424]	; (2ce8 <hci_init+0x318>)
    2b40:	496a      	ldr	r1, [pc, #424]	; (2cec <hci_init+0x31c>)
    2b42:	2003      	movs	r0, #3
    2b44:	f7ff fba4 	bl	2290 <bt_log>
		return -ENODEV;
    2b48:	f06f 0412 	mvn.w	r4, #18
}
    2b4c:	4620      	mov	r0, r4
    2b4e:	b00b      	add	sp, #44	; 0x2c
    2b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2b52:	4621      	mov	r1, r4
    2b54:	aa08      	add	r2, sp, #32
    2b56:	f242 0003 	movw	r0, #8195	; 0x2003
    2b5a:	f7ff fdcf 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2b5e:	4604      	mov	r4, r0
    2b60:	2800      	cmp	r0, #0
    2b62:	d1f3      	bne.n	2b4c <hci_init+0x17c>
    2b64:	9b08      	ldr	r3, [sp, #32]
    2b66:	689e      	ldr	r6, [r3, #8]
    2b68:	f009 fa62 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2b6c:	f816 3b01 	ldrb.w	r3, [r6], #1
    2b70:	9300      	str	r3, [sp, #0]
    2b72:	4a5f      	ldr	r2, [pc, #380]	; (2cf0 <hci_init+0x320>)
    2b74:	4954      	ldr	r1, [pc, #336]	; (2cc8 <hci_init+0x2f8>)
    2b76:	4603      	mov	r3, r0
    2b78:	2007      	movs	r0, #7
    2b7a:	f7ff fb89 	bl	2290 <bt_log>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2b7e:	4631      	mov	r1, r6
    2b80:	2208      	movs	r2, #8
    2b82:	f105 0078 	add.w	r0, r5, #120	; 0x78
    2b86:	f7fd fd48 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2b8a:	9808      	ldr	r0, [sp, #32]
    2b8c:	f008 fe06 	bl	b79c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    2b90:	7eab      	ldrb	r3, [r5, #26]
    2b92:	0699      	lsls	r1, r3, #26
    2b94:	d57a      	bpl.n	2c8c <hci_init+0x2bc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2b96:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2b9a:	071a      	lsls	r2, r3, #28
    2b9c:	f100 80b8 	bmi.w	2d10 <hci_init+0x340>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2ba0:	2108      	movs	r1, #8
    2ba2:	f242 0001 	movw	r0, #8193	; 0x2001
    2ba6:	f7ff fd5f 	bl	2668 <bt_hci_cmd_create>
	if (!buf) {
    2baa:	4604      	mov	r4, r0
    2bac:	2800      	cmp	r0, #0
    2bae:	d074      	beq.n	2c9a <hci_init+0x2ca>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    2bb0:	2108      	movs	r1, #8
    2bb2:	4408      	add	r0, r1
    2bb4:	f008 fe24 	bl	b800 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2bb8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    2bbc:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    2bc0:	2b06      	cmp	r3, #6
    2bc2:	bf14      	ite	ne
    2bc4:	2302      	movne	r3, #2
    2bc6:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2bca:	2200      	movs	r2, #0
    2bcc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2bce:	0a1b      	lsrs	r3, r3, #8
    2bd0:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    2bd2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    2bd4:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    2bd6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    2bd8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    2bda:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    2bdc:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    2bde:	4621      	mov	r1, r4
    2be0:	f242 0001 	movw	r0, #8193	; 0x2001
    2be4:	f7ff fd8a 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2be8:	4604      	mov	r4, r0
    2bea:	2800      	cmp	r0, #0
    2bec:	d1ae      	bne.n	2b4c <hci_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    2bee:	2108      	movs	r1, #8
    2bf0:	f640 4001 	movw	r0, #3073	; 0xc01
    2bf4:	f7ff fd38 	bl	2668 <bt_hci_cmd_create>
	if (!buf) {
    2bf8:	4606      	mov	r6, r0
    2bfa:	2800      	cmp	r0, #0
    2bfc:	d04d      	beq.n	2c9a <hci_init+0x2ca>
	ev = net_buf_add(buf, sizeof(*ev));
    2bfe:	2108      	movs	r1, #8
    2c00:	4408      	add	r0, r1
    2c02:	f008 fdfd 	bl	b800 <net_buf_simple_add>
    2c06:	2380      	movs	r3, #128	; 0x80
    2c08:	7043      	strb	r3, [r0, #1]
    2c0a:	2302      	movs	r3, #2
    2c0c:	70c3      	strb	r3, [r0, #3]
    2c0e:	2320      	movs	r3, #32
	dst[0] = val;
    2c10:	7004      	strb	r4, [r0, #0]
    2c12:	7084      	strb	r4, [r0, #2]
    2c14:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    2c16:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    2c18:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    2c1a:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2c1c:	4622      	mov	r2, r4
    2c1e:	4631      	mov	r1, r6
    2c20:	f640 4001 	movw	r0, #3073	; 0xc01
    2c24:	f7ff fd6a 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2c28:	4604      	mov	r4, r0
    2c2a:	2800      	cmp	r0, #0
    2c2c:	d18e      	bne.n	2b4c <hci_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2c2e:	4601      	mov	r1, r0
    2c30:	aa08      	add	r2, sp, #32
    2c32:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2c36:	f7ff fd61 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2c3a:	2800      	cmp	r0, #0
    2c3c:	f000 808a 	beq.w	2d54 <hci_init+0x384>
		BT_WARN("Vendor HCI extensions not available");
    2c40:	4a2c      	ldr	r2, [pc, #176]	; (2cf4 <hci_init+0x324>)
    2c42:	492d      	ldr	r1, [pc, #180]	; (2cf8 <hci_init+0x328>)
		BT_WARN("Failed to read supported vendor commands");
    2c44:	2004      	movs	r0, #4
    2c46:	f7ff fb23 	bl	2290 <bt_log>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2c4a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    2c4c:	2207      	movs	r2, #7
    2c4e:	a906      	add	r1, sp, #24
    2c50:	4820      	ldr	r0, [pc, #128]	; (2cd4 <hci_init+0x304>)
    2c52:	9306      	str	r3, [sp, #24]
    2c54:	f8cd 301b 	str.w	r3, [sp, #27]
    2c58:	f7fd fcca 	bl	5f0 <memcmp>
    2c5c:	2800      	cmp	r0, #0
    2c5e:	f040 80d9 	bne.w	2e14 <hci_init+0x444>
    2c62:	f009 f9e5 	bl	c030 <_impl_k_current_get>
	if (bt_storage) {
    2c66:	4f25      	ldr	r7, [pc, #148]	; (2cfc <hci_init+0x32c>)
		BT_DBG("No public address. Trying to set static random.");
    2c68:	4a25      	ldr	r2, [pc, #148]	; (2d00 <hci_init+0x330>)
    2c6a:	4926      	ldr	r1, [pc, #152]	; (2d04 <hci_init+0x334>)
    2c6c:	4603      	mov	r3, r0
    2c6e:	2007      	movs	r0, #7
    2c70:	f7ff fb0e 	bl	2290 <bt_log>
	if (bt_storage) {
    2c74:	683b      	ldr	r3, [r7, #0]
    2c76:	2b00      	cmp	r3, #0
    2c78:	f040 8100 	bne.w	2e7c <hci_init+0x4ac>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2c7c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    2c80:	07db      	lsls	r3, r3, #31
    2c82:	f100 811a 	bmi.w	2eba <hci_init+0x4ea>
		BT_WARN("Read Static Addresses command not available");
    2c86:	4a20      	ldr	r2, [pc, #128]	; (2d08 <hci_init+0x338>)
    2c88:	4920      	ldr	r1, [pc, #128]	; (2d0c <hci_init+0x33c>)
    2c8a:	e11f      	b.n	2ecc <hci_init+0x4fc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2c8c:	2102      	movs	r1, #2
    2c8e:	f640 406d 	movw	r0, #3181	; 0xc6d
    2c92:	f7ff fce9 	bl	2668 <bt_hci_cmd_create>
		if (!buf) {
    2c96:	4606      	mov	r6, r0
    2c98:	b910      	cbnz	r0, 2ca0 <hci_init+0x2d0>
		return -ENOBUFS;
    2c9a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2c9e:	e755      	b.n	2b4c <hci_init+0x17c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    2ca0:	2102      	movs	r1, #2
    2ca2:	3008      	adds	r0, #8
    2ca4:	f008 fdac 	bl	b800 <net_buf_simple_add>
		cp_le->le = 0x01;
    2ca8:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2caa:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2cac:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2cae:	4622      	mov	r2, r4
    2cb0:	4631      	mov	r1, r6
    2cb2:	f640 406d 	movw	r0, #3181	; 0xc6d
    2cb6:	f7ff fd21 	bl	26fc <bt_hci_cmd_send_sync>
		if (err) {
    2cba:	4604      	mov	r4, r0
    2cbc:	2800      	cmp	r0, #0
    2cbe:	f43f af6a 	beq.w	2b96 <hci_init+0x1c6>
    2cc2:	e743      	b.n	2b4c <hci_init+0x17c>
    2cc4:	0000d2b6 	.word	0x0000d2b6
    2cc8:	0000d86f 	.word	0x0000d86f
    2ccc:	200007e4 	.word	0x200007e4
    2cd0:	20004ef8 	.word	0x20004ef8
    2cd4:	20004e88 	.word	0x20004e88
    2cd8:	0000d3c0 	.word	0x0000d3c0
    2cdc:	0000d358 	.word	0x0000d358
    2ce0:	0000d370 	.word	0x0000d370
    2ce4:	0000d39f 	.word	0x0000d39f
    2ce8:	0000d3fa 	.word	0x0000d3fa
    2cec:	0000d882 	.word	0x0000d882
    2cf0:	0000d385 	.word	0x0000d385
    2cf4:	0000d412 	.word	0x0000d412
    2cf8:	0000d8aa 	.word	0x0000d8aa
    2cfc:	20002b8c 	.word	0x20002b8c
    2d00:	0000d41e 	.word	0x0000d41e
    2d04:	0000d98a 	.word	0x0000d98a
    2d08:	0000d402 	.word	0x0000d402
    2d0c:	0000da14 	.word	0x0000da14
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    2d10:	aa08      	add	r2, sp, #32
    2d12:	2100      	movs	r1, #0
    2d14:	f242 001c 	movw	r0, #8220	; 0x201c
    2d18:	f7ff fcf0 	bl	26fc <bt_hci_cmd_send_sync>
		if (err) {
    2d1c:	4604      	mov	r4, r0
    2d1e:	2800      	cmp	r0, #0
    2d20:	f47f af14 	bne.w	2b4c <hci_init+0x17c>
    2d24:	9b08      	ldr	r3, [sp, #32]
    2d26:	689c      	ldr	r4, [r3, #8]
    2d28:	f009 f982 	bl	c030 <_impl_k_current_get>
	BT_DBG("status %u", rp->status);
    2d2c:	7823      	ldrb	r3, [r4, #0]
    2d2e:	9300      	str	r3, [sp, #0]
    2d30:	4a8a      	ldr	r2, [pc, #552]	; (2f5c <hci_init+0x58c>)
    2d32:	498b      	ldr	r1, [pc, #556]	; (2f60 <hci_init+0x590>)
    2d34:	4603      	mov	r3, r0
    2d36:	2007      	movs	r0, #7
    2d38:	f7ff faaa 	bl	2290 <bt_log>
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    2d3c:	4623      	mov	r3, r4
		net_buf_unref(rsp);
    2d3e:	9808      	ldr	r0, [sp, #32]
    2d40:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2d44:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2d46:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2d4a:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    2d4e:	f008 fd25 	bl	b79c <net_buf_unref>
    2d52:	e725      	b.n	2ba0 <hci_init+0x1d0>
	rp.info = (void *)rsp->data;
    2d54:	9b08      	ldr	r3, [sp, #32]
	BT_INFO("HW Platform: %s (0x%04x)",
    2d56:	4983      	ldr	r1, [pc, #524]	; (2f64 <hci_init+0x594>)
	rp.info = (void *)rsp->data;
    2d58:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    2d5a:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    2d5e:	2b03      	cmp	r3, #3
		return plat_str[platform];
    2d60:	bf96      	itet	ls
    2d62:	4a81      	ldrls	r2, [pc, #516]	; (2f68 <hci_init+0x598>)
	return "unknown";
    2d64:	4a81      	ldrhi	r2, [pc, #516]	; (2f6c <hci_init+0x59c>)
		return plat_str[platform];
    2d66:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2d6a:	2006      	movs	r0, #6
    2d6c:	f7ff fa90 	bl	2290 <bt_log>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2d70:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    2d74:	f8b6 3003 	ldrh.w	r3, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2d78:	2a02      	cmp	r2, #2
    2d7a:	d12a      	bne.n	2dd2 <hci_init+0x402>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2d7c:	2b02      	cmp	r3, #2
    2d7e:	d828      	bhi.n	2dd2 <hci_init+0x402>
		return nordic_str[variant];
    2d80:	4a7b      	ldr	r2, [pc, #492]	; (2f70 <hci_init+0x5a0>)
    2d82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    2d86:	497b      	ldr	r1, [pc, #492]	; (2f74 <hci_init+0x5a4>)
    2d88:	2006      	movs	r0, #6
    2d8a:	f7ff fa81 	bl	2290 <bt_log>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d8e:	7973      	ldrb	r3, [r6, #5]
    2d90:	f8d6 1009 	ldr.w	r1, [r6, #9]
    2d94:	9102      	str	r1, [sp, #8]
	if (variant < ARRAY_SIZE(var_str)) {
    2d96:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2d98:	f8b6 1007 	ldrh.w	r1, [r6, #7]
		return var_str[variant];
    2d9c:	bf98      	it	ls
    2d9e:	4a76      	ldrls	r2, [pc, #472]	; (2f78 <hci_init+0x5a8>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2da0:	9101      	str	r1, [sp, #4]
    2da2:	79b1      	ldrb	r1, [r6, #6]
		return var_str[variant];
    2da4:	bf94      	ite	ls
    2da6:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    2daa:	4a70      	ldrhi	r2, [pc, #448]	; (2f6c <hci_init+0x59c>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2dac:	9100      	str	r1, [sp, #0]
    2dae:	2006      	movs	r0, #6
    2db0:	4972      	ldr	r1, [pc, #456]	; (2f7c <hci_init+0x5ac>)
    2db2:	f7ff fa6d 	bl	2290 <bt_log>
	net_buf_unref(rsp);
    2db6:	9808      	ldr	r0, [sp, #32]
    2db8:	f008 fcf0 	bl	b79c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2dbc:	aa08      	add	r2, sp, #32
    2dbe:	2100      	movs	r1, #0
    2dc0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2dc4:	f7ff fc9a 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2dc8:	4606      	mov	r6, r0
    2dca:	b120      	cbz	r0, 2dd6 <hci_init+0x406>
		BT_WARN("Failed to read supported vendor features");
    2dcc:	4a6c      	ldr	r2, [pc, #432]	; (2f80 <hci_init+0x5b0>)
    2dce:	496d      	ldr	r1, [pc, #436]	; (2f84 <hci_init+0x5b4>)
    2dd0:	e738      	b.n	2c44 <hci_init+0x274>
		return "unknown";
    2dd2:	4a66      	ldr	r2, [pc, #408]	; (2f6c <hci_init+0x59c>)
    2dd4:	e7d7      	b.n	2d86 <hci_init+0x3b6>
	rp.cmds = (void *)rsp->data;
    2dd6:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2dd8:	486b      	ldr	r0, [pc, #428]	; (2f88 <hci_init+0x5b8>)
    2dda:	6899      	ldr	r1, [r3, #8]
    2ddc:	2202      	movs	r2, #2
    2dde:	3101      	adds	r1, #1
    2de0:	f7fd fc1b 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2de4:	9808      	ldr	r0, [sp, #32]
    2de6:	f008 fcd9 	bl	b79c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2dea:	aa08      	add	r2, sp, #32
    2dec:	4631      	mov	r1, r6
    2dee:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2df2:	f7ff fc83 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    2df6:	b110      	cbz	r0, 2dfe <hci_init+0x42e>
		BT_WARN("Failed to read supported vendor commands");
    2df8:	4a61      	ldr	r2, [pc, #388]	; (2f80 <hci_init+0x5b0>)
    2dfa:	4964      	ldr	r1, [pc, #400]	; (2f8c <hci_init+0x5bc>)
    2dfc:	e722      	b.n	2c44 <hci_init+0x274>
	rp.feat = (void *)rsp->data;
    2dfe:	9b08      	ldr	r3, [sp, #32]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2e00:	4863      	ldr	r0, [pc, #396]	; (2f90 <hci_init+0x5c0>)
    2e02:	6899      	ldr	r1, [r3, #8]
    2e04:	2201      	movs	r2, #1
    2e06:	4411      	add	r1, r2
    2e08:	f7fd fc07 	bl	61a <memcpy>
	net_buf_unref(rsp);
    2e0c:	9808      	ldr	r0, [sp, #32]
    2e0e:	f008 fcc5 	bl	b79c <net_buf_unref>
    2e12:	e71a      	b.n	2c4a <hci_init+0x27a>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2e14:	4b5f      	ldr	r3, [pc, #380]	; (2f94 <hci_init+0x5c4>)
    2e16:	6818      	ldr	r0, [r3, #0]
    2e18:	889a      	ldrh	r2, [r3, #4]
    2e1a:	9008      	str	r0, [sp, #32]
    2e1c:	799b      	ldrb	r3, [r3, #6]
    2e1e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    2e22:	a908      	add	r1, sp, #32
    2e24:	2207      	movs	r2, #7
    2e26:	485c      	ldr	r0, [pc, #368]	; (2f98 <hci_init+0x5c8>)
    2e28:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    2e2c:	f7fd fbe0 	bl	5f0 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2e30:	2800      	cmp	r0, #0
    2e32:	f43f af16 	beq.w	2c62 <hci_init+0x292>
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2e36:	4858      	ldr	r0, [pc, #352]	; (2f98 <hci_init+0x5c8>)
    2e38:	f7ff f94e 	bl	20d8 <bt_addr_le_str>
    2e3c:	4957      	ldr	r1, [pc, #348]	; (2f9c <hci_init+0x5cc>)
    2e3e:	4602      	mov	r2, r0
    2e40:	2006      	movs	r0, #6
    2e42:	f7ff fa25 	bl	2290 <bt_log>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    2e46:	7bae      	ldrb	r6, [r5, #14]
    2e48:	4630      	mov	r0, r6
    2e4a:	f7ff fb41 	bl	24d0 <ver_str>
    2e4e:	8aab      	ldrh	r3, [r5, #20]
    2e50:	9301      	str	r3, [sp, #4]
    2e52:	8a2b      	ldrh	r3, [r5, #16]
    2e54:	9300      	str	r3, [sp, #0]
    2e56:	4602      	mov	r2, r0
    2e58:	4633      	mov	r3, r6
    2e5a:	4951      	ldr	r1, [pc, #324]	; (2fa0 <hci_init+0x5d0>)
    2e5c:	2006      	movs	r0, #6
    2e5e:	f7ff fa17 	bl	2290 <bt_log>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2e62:	7bee      	ldrb	r6, [r5, #15]
    2e64:	4630      	mov	r0, r6
    2e66:	f7ff fb33 	bl	24d0 <ver_str>
    2e6a:	8a6b      	ldrh	r3, [r5, #18]
    2e6c:	9300      	str	r3, [sp, #0]
    2e6e:	4602      	mov	r2, r0
    2e70:	4633      	mov	r3, r6
    2e72:	494c      	ldr	r1, [pc, #304]	; (2fa4 <hci_init+0x5d4>)
    2e74:	2006      	movs	r0, #6
    2e76:	f7ff fa0b 	bl	2290 <bt_log>
    2e7a:	e667      	b.n	2b4c <hci_init+0x17c>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2e7c:	2100      	movs	r1, #0
    2e7e:	681e      	ldr	r6, [r3, #0]
    2e80:	4a45      	ldr	r2, [pc, #276]	; (2f98 <hci_init+0x5c8>)
    2e82:	2307      	movs	r3, #7
    2e84:	4608      	mov	r0, r1
    2e86:	47b0      	blx	r6
		if (ret == sizeof(bt_dev.id_addr)) {
    2e88:	2807      	cmp	r0, #7
    2e8a:	f47f aef7 	bne.w	2c7c <hci_init+0x2ac>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2e8e:	782b      	ldrb	r3, [r5, #0]
    2e90:	2b01      	cmp	r3, #1
    2e92:	d104      	bne.n	2e9e <hci_init+0x4ce>
    2e94:	79ab      	ldrb	r3, [r5, #6]
    2e96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2e9a:	2bc0      	cmp	r3, #192	; 0xc0
    2e9c:	d052      	beq.n	2f44 <hci_init+0x574>
		BT_ERR("Only static random address supported as identity");
    2e9e:	4a42      	ldr	r2, [pc, #264]	; (2fa8 <hci_init+0x5d8>)
    2ea0:	4942      	ldr	r1, [pc, #264]	; (2fac <hci_init+0x5dc>)
    2ea2:	2003      	movs	r0, #3
    2ea4:	f7ff f9f4 	bl	2290 <bt_log>
		return -EINVAL;
    2ea8:	f06f 0615 	mvn.w	r6, #21
			BT_ERR("Unable to set identity address");
    2eac:	4a40      	ldr	r2, [pc, #256]	; (2fb0 <hci_init+0x5e0>)
    2eae:	4941      	ldr	r1, [pc, #260]	; (2fb4 <hci_init+0x5e4>)
    2eb0:	2003      	movs	r0, #3
    2eb2:	f7ff f9ed 	bl	2290 <bt_log>
			return err;
    2eb6:	4634      	mov	r4, r6
    2eb8:	e648      	b.n	2b4c <hci_init+0x17c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2eba:	aa05      	add	r2, sp, #20
    2ebc:	2100      	movs	r1, #0
    2ebe:	f64f 4009 	movw	r0, #64521	; 0xfc09
    2ec2:	f7ff fc1b 	bl	26fc <bt_hci_cmd_send_sync>
		if (err) {
    2ec6:	b128      	cbz	r0, 2ed4 <hci_init+0x504>
			BT_WARN("Failed to read static addresses");
    2ec8:	4a37      	ldr	r2, [pc, #220]	; (2fa8 <hci_init+0x5d8>)
    2eca:	493b      	ldr	r1, [pc, #236]	; (2fb8 <hci_init+0x5e8>)
		BT_WARN("Read Static Addresses command not available");
    2ecc:	2004      	movs	r0, #4
    2ece:	f7ff f9df 	bl	2290 <bt_log>
    2ed2:	e016      	b.n	2f02 <hci_init+0x532>
		rp = (void *)rsp->data;
    2ed4:	9b05      	ldr	r3, [sp, #20]
    2ed6:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    2ed8:	784b      	ldrb	r3, [r1, #1]
    2eda:	b153      	cbz	r3, 2ef2 <hci_init+0x522>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    2edc:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    2ede:	2206      	movs	r2, #6
    2ee0:	3102      	adds	r1, #2
    2ee2:	4836      	ldr	r0, [pc, #216]	; (2fbc <hci_init+0x5ec>)
    2ee4:	702b      	strb	r3, [r5, #0]
    2ee6:	f7fd fb98 	bl	61a <memcpy>
			net_buf_unref(rsp);
    2eea:	9805      	ldr	r0, [sp, #20]
    2eec:	f008 fc56 	bl	b79c <net_buf_unref>
    2ef0:	e7cd      	b.n	2e8e <hci_init+0x4be>
		BT_WARN("No static addresses stored in controller");
    2ef2:	2004      	movs	r0, #4
    2ef4:	4a2c      	ldr	r2, [pc, #176]	; (2fa8 <hci_init+0x5d8>)
    2ef6:	4932      	ldr	r1, [pc, #200]	; (2fc0 <hci_init+0x5f0>)
    2ef8:	f7ff f9ca 	bl	2290 <bt_log>
		net_buf_unref(rsp);
    2efc:	9805      	ldr	r0, [sp, #20]
    2efe:	f008 fc4d 	bl	b79c <net_buf_unref>
    2f02:	f009 f895 	bl	c030 <_impl_k_current_get>
	BT_DBG("Generating new static random address");
    2f06:	4a28      	ldr	r2, [pc, #160]	; (2fa8 <hci_init+0x5d8>)
    2f08:	492e      	ldr	r1, [pc, #184]	; (2fc4 <hci_init+0x5f4>)
    2f0a:	4603      	mov	r3, r0
    2f0c:	2007      	movs	r0, #7
    2f0e:	f7ff f9bf 	bl	2290 <bt_log>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2f12:	4821      	ldr	r0, [pc, #132]	; (2f98 <hci_init+0x5c8>)
    2f14:	f7ff fd4e 	bl	29b4 <bt_addr_le_create_static>
	if (err) {
    2f18:	4606      	mov	r6, r0
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d1c6      	bne.n	2eac <hci_init+0x4dc>
	if (bt_storage) {
    2f1e:	683b      	ldr	r3, [r7, #0]
    2f20:	b163      	cbz	r3, 2f3c <hci_init+0x56c>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2f22:	685f      	ldr	r7, [r3, #4]
    2f24:	4a1c      	ldr	r2, [pc, #112]	; (2f98 <hci_init+0x5c8>)
    2f26:	2307      	movs	r3, #7
    2f28:	4601      	mov	r1, r0
    2f2a:	47b8      	blx	r7
		if (ret != sizeof(bt_dev.id_addr)) {
    2f2c:	2807      	cmp	r0, #7
    2f2e:	d0ae      	beq.n	2e8e <hci_init+0x4be>
			BT_ERR("Unable to store static address");
    2f30:	4a1d      	ldr	r2, [pc, #116]	; (2fa8 <hci_init+0x5d8>)
    2f32:	4925      	ldr	r1, [pc, #148]	; (2fc8 <hci_init+0x5f8>)
    2f34:	2003      	movs	r0, #3
		BT_WARN("Using temporary static random address");
    2f36:	f7ff f9ab 	bl	2290 <bt_log>
    2f3a:	e7a8      	b.n	2e8e <hci_init+0x4be>
    2f3c:	4a1a      	ldr	r2, [pc, #104]	; (2fa8 <hci_init+0x5d8>)
    2f3e:	4923      	ldr	r1, [pc, #140]	; (2fcc <hci_init+0x5fc>)
    2f40:	2004      	movs	r0, #4
    2f42:	e7f8      	b.n	2f36 <hci_init+0x566>
	err = set_random_address(&bt_dev.id_addr.a);
    2f44:	481d      	ldr	r0, [pc, #116]	; (2fbc <hci_init+0x5ec>)
    2f46:	f7ff fc3f 	bl	27c8 <set_random_address>
	if (err) {
    2f4a:	4606      	mov	r6, r0
    2f4c:	2800      	cmp	r0, #0
    2f4e:	d1ad      	bne.n	2eac <hci_init+0x4dc>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2f50:	2104      	movs	r1, #4
    2f52:	481f      	ldr	r0, [pc, #124]	; (2fd0 <hci_init+0x600>)
    2f54:	f7ff faf2 	bl	253c <atomic_or>
    2f58:	e76d      	b.n	2e36 <hci_init+0x466>
    2f5a:	bf00      	nop
    2f5c:	0000d3dd 	.word	0x0000d3dd
    2f60:	0000d86f 	.word	0x0000d86f
    2f64:	0000d8d2 	.word	0x0000d8d2
    2f68:	0000dd00 	.word	0x0000dd00
    2f6c:	0000ddfc 	.word	0x0000ddfc
    2f70:	0000dcf4 	.word	0x0000dcf4
    2f74:	0000d8eb 	.word	0x0000d8eb
    2f78:	0000ddec 	.word	0x0000ddec
    2f7c:	0000d903 	.word	0x0000d903
    2f80:	0000d412 	.word	0x0000d412
    2f84:	0000d930 	.word	0x0000d930
    2f88:	20004ee7 	.word	0x20004ee7
    2f8c:	0000d95d 	.word	0x0000d95d
    2f90:	20004ee6 	.word	0x20004ee6
    2f94:	0000cbe8 	.word	0x0000cbe8
    2f98:	20004e88 	.word	0x20004e88
    2f9c:	0000daf4 	.word	0x0000daf4
    2fa0:	0000db01 	.word	0x0000db01
    2fa4:	0000db3f 	.word	0x0000db3f
    2fa8:	0000d402 	.word	0x0000d402
    2fac:	0000dabf 	.word	0x0000dabf
    2fb0:	0000d41e 	.word	0x0000d41e
    2fb4:	0000db66 	.word	0x0000db66
    2fb8:	0000d9c3 	.word	0x0000d9c3
    2fbc:	20004e89 	.word	0x20004e89
    2fc0:	0000d9e7 	.word	0x0000d9e7
    2fc4:	0000da44 	.word	0x0000da44
    2fc8:	0000da72 	.word	0x0000da72
    2fcc:	0000da95 	.word	0x0000da95
    2fd0:	20004ef8 	.word	0x20004ef8

00002fd4 <init_work>:
{
    2fd4:	b510      	push	{r4, lr}
	err = hci_init();
    2fd6:	f7ff fcfb 	bl	29d0 <hci_init>
	if (err) {
    2fda:	b908      	cbnz	r0, 2fe0 <init_work+0xc>
    2fdc:	f7ff fcd8 	bl	2990 <bt_init.part.13>
	if (ready_cb) {
    2fe0:	4b03      	ldr	r3, [pc, #12]	; (2ff0 <init_work+0x1c>)
    2fe2:	681b      	ldr	r3, [r3, #0]
    2fe4:	b113      	cbz	r3, 2fec <init_work+0x18>
}
    2fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2fea:	4718      	bx	r3
    2fec:	bd10      	pop	{r4, pc}
    2fee:	bf00      	nop
    2ff0:	200007e0 	.word	0x200007e0

00002ff4 <bt_send>:
{
    2ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2ff6:	4604      	mov	r4, r0
    2ff8:	f009 f81a 	bl	c030 <_impl_k_current_get>
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));
    2ffc:	7d23      	ldrb	r3, [r4, #20]
    2ffe:	9302      	str	r3, [sp, #8]
    3000:	89a3      	ldrh	r3, [r4, #12]
    3002:	4a0d      	ldr	r2, [pc, #52]	; (3038 <bt_send+0x44>)
    3004:	9301      	str	r3, [sp, #4]
    3006:	9400      	str	r4, [sp, #0]
    3008:	4603      	mov	r3, r0
    300a:	490c      	ldr	r1, [pc, #48]	; (303c <bt_send+0x48>)
    300c:	2007      	movs	r0, #7
    300e:	f7ff f93f 	bl	2290 <bt_log>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    3012:	7d23      	ldrb	r3, [r4, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    3014:	68a1      	ldr	r1, [r4, #8]
    3016:	2b03      	cmp	r3, #3
    3018:	bf96      	itet	ls
    301a:	4a09      	ldrls	r2, [pc, #36]	; (3040 <bt_send+0x4c>)
    301c:	20ff      	movhi	r0, #255	; 0xff
    301e:	5cd0      	ldrbls	r0, [r2, r3]
    3020:	89a2      	ldrh	r2, [r4, #12]
    3022:	f7ff f9a3 	bl	236c <bt_monitor_send>
	return bt_dev.drv->send(buf);
    3026:	4b07      	ldr	r3, [pc, #28]	; (3044 <bt_send+0x50>)
    3028:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    302c:	68db      	ldr	r3, [r3, #12]
    302e:	4620      	mov	r0, r4
}
    3030:	b004      	add	sp, #16
    3032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_dev.drv->send(buf);
    3036:	4718      	bx	r3
    3038:	0000d427 	.word	0x0000d427
    303c:	0000d7b4 	.word	0x0000d7b4
    3040:	0000d255 	.word	0x0000d255
    3044:	20004e88 	.word	0x20004e88

00003048 <hci_tx_thread>:
{
    3048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    304c:	f008 fff0 	bl	c030 <_impl_k_current_get>
	BT_DBG("Started");
    3050:	4a5b      	ldr	r2, [pc, #364]	; (31c0 <hci_tx_thread+0x178>)
    3052:	495c      	ldr	r1, [pc, #368]	; (31c4 <hci_tx_thread+0x17c>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3054:	4c5c      	ldr	r4, [pc, #368]	; (31c8 <hci_tx_thread+0x180>)
		events[0].state = K_POLL_STATE_NOT_READY;
    3056:	4e5d      	ldr	r6, [pc, #372]	; (31cc <hci_tx_thread+0x184>)
	BT_DBG("Started");
    3058:	4603      	mov	r3, r0
    305a:	2007      	movs	r0, #7
    305c:	f7ff f918 	bl	2290 <bt_log>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3060:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
		events[0].state = K_POLL_STATE_NOT_READY;
    3064:	7b73      	ldrb	r3, [r6, #13]
    3066:	f36f 1307 	bfc	r3, #4, #4
    306a:	7373      	strb	r3, [r6, #13]
    306c:	f008 ffe0 	bl	c030 <_impl_k_current_get>
		BT_DBG("Calling k_poll with %d events", ev_count);
    3070:	2501      	movs	r5, #1
    3072:	4603      	mov	r3, r0
    3074:	4a52      	ldr	r2, [pc, #328]	; (31c0 <hci_tx_thread+0x178>)
    3076:	4956      	ldr	r1, [pc, #344]	; (31d0 <hci_tx_thread+0x188>)
    3078:	9500      	str	r5, [sp, #0]
    307a:	2007      	movs	r0, #7
    307c:	f7ff f908 	bl	2290 <bt_log>
		err = k_poll(events, ev_count, K_FOREVER);
    3080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3084:	4629      	mov	r1, r5
    3086:	4851      	ldr	r0, [pc, #324]	; (31cc <hci_tx_thread+0x184>)
    3088:	f009 fc90 	bl	c9ac <k_poll>
		BT_ASSERT(err == 0);
    308c:	b150      	cbz	r0, 30a4 <hci_tx_thread+0x5c>
    308e:	4a4c      	ldr	r2, [pc, #304]	; (31c0 <hci_tx_thread+0x178>)
    3090:	4950      	ldr	r1, [pc, #320]	; (31d4 <hci_tx_thread+0x18c>)
	BT_ASSERT(buf);
    3092:	2003      	movs	r0, #3
    3094:	f7ff f8fc 	bl	2290 <bt_log>
    3098:	4040      	eors	r0, r0
    309a:	f380 8811 	msr	BASEPRI, r0
    309e:	f04f 0004 	mov.w	r0, #4
    30a2:	df02      	svc	2
    30a4:	f008 ffc4 	bl	c030 <_impl_k_current_get>
	BT_DBG("count %d", count);
    30a8:	4a4b      	ldr	r2, [pc, #300]	; (31d8 <hci_tx_thread+0x190>)
    30aa:	494c      	ldr	r1, [pc, #304]	; (31dc <hci_tx_thread+0x194>)
    30ac:	9500      	str	r5, [sp, #0]
    30ae:	4603      	mov	r3, r0
    30b0:	2007      	movs	r0, #7
    30b2:	f7ff f8ed 	bl	2290 <bt_log>
    30b6:	f008 ffbb 	bl	c030 <_impl_k_current_get>
		BT_DBG("ev->state %u", ev->state);
    30ba:	7b73      	ldrb	r3, [r6, #13]
    30bc:	4a46      	ldr	r2, [pc, #280]	; (31d8 <hci_tx_thread+0x190>)
    30be:	4948      	ldr	r1, [pc, #288]	; (31e0 <hci_tx_thread+0x198>)
    30c0:	091b      	lsrs	r3, r3, #4
    30c2:	9300      	str	r3, [sp, #0]
    30c4:	4603      	mov	r3, r0
    30c6:	2007      	movs	r0, #7
    30c8:	f7ff f8e2 	bl	2290 <bt_log>
		switch (ev->state) {
    30cc:	7b73      	ldrb	r3, [r6, #13]
    30ce:	091b      	lsrs	r3, r3, #4
    30d0:	2b01      	cmp	r3, #1
    30d2:	d906      	bls.n	30e2 <hci_tx_thread+0x9a>
    30d4:	2b04      	cmp	r3, #4
    30d6:	d007      	beq.n	30e8 <hci_tx_thread+0xa0>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    30d8:	4a3f      	ldr	r2, [pc, #252]	; (31d8 <hci_tx_thread+0x190>)
    30da:	4942      	ldr	r1, [pc, #264]	; (31e4 <hci_tx_thread+0x19c>)
    30dc:	2004      	movs	r0, #4
    30de:	f7ff f8d7 	bl	2290 <bt_log>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    30e2:	f008 ff5f 	bl	bfa4 <_impl_k_yield>
    30e6:	e7bd      	b.n	3064 <hci_tx_thread+0x1c>
			if (ev->tag == BT_EVENT_CMD_TX) {
    30e8:	7b37      	ldrb	r7, [r6, #12]
    30ea:	2f00      	cmp	r7, #0
    30ec:	d1f9      	bne.n	30e2 <hci_tx_thread+0x9a>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    30ee:	f008 ff9f 	bl	c030 <_impl_k_current_get>
	BT_DBG("calling net_buf_get");
    30f2:	4a3d      	ldr	r2, [pc, #244]	; (31e8 <hci_tx_thread+0x1a0>)
    30f4:	493d      	ldr	r1, [pc, #244]	; (31ec <hci_tx_thread+0x1a4>)
    30f6:	4603      	mov	r3, r0
    30f8:	2007      	movs	r0, #7
    30fa:	f7ff f8c9 	bl	2290 <bt_log>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    30fe:	4639      	mov	r1, r7
    3100:	4640      	mov	r0, r8
    3102:	f008 fb21 	bl	b748 <net_buf_get>
	BT_ASSERT(buf);
    3106:	4605      	mov	r5, r0
    3108:	2800      	cmp	r0, #0
    310a:	d056      	beq.n	31ba <hci_tx_thread+0x172>
    310c:	f008 ff90 	bl	c030 <_impl_k_current_get>
	BT_DBG("calling sem_take_wait");
    3110:	4a35      	ldr	r2, [pc, #212]	; (31e8 <hci_tx_thread+0x1a0>)
    3112:	4937      	ldr	r1, [pc, #220]	; (31f0 <hci_tx_thread+0x1a8>)
    3114:	4603      	mov	r3, r0
    3116:	2007      	movs	r0, #7
    3118:	f7ff f8ba 	bl	2290 <bt_log>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    311c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3120:	4834      	ldr	r0, [pc, #208]	; (31f4 <hci_tx_thread+0x1ac>)
    3122:	f009 f843 	bl	c1ac <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3126:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    312a:	2b00      	cmp	r3, #0
    312c:	d139      	bne.n	31a2 <hci_tx_thread+0x15a>
	bt_dev.sent_cmd = net_buf_ref(buf);
    312e:	4628      	mov	r0, r5
    3130:	f008 fb62 	bl	b7f8 <net_buf_ref>
    3134:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3138:	f008 ff7a 	bl	c030 <_impl_k_current_get>
    313c:	4681      	mov	r9, r0
	BT_DBG("Sending command 0x%04x (buf %p) to driver",
    313e:	4628      	mov	r0, r5
    3140:	f008 fa6e 	bl	b620 <net_buf_id>
    3144:	4f2c      	ldr	r7, [pc, #176]	; (31f8 <hci_tx_thread+0x1b0>)
    3146:	9501      	str	r5, [sp, #4]
    3148:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    314c:	4a26      	ldr	r2, [pc, #152]	; (31e8 <hci_tx_thread+0x1a0>)
    314e:	8843      	ldrh	r3, [r0, #2]
    3150:	9300      	str	r3, [sp, #0]
    3152:	492a      	ldr	r1, [pc, #168]	; (31fc <hci_tx_thread+0x1b4>)
    3154:	464b      	mov	r3, r9
    3156:	2007      	movs	r0, #7
    3158:	f7ff f89a 	bl	2290 <bt_log>
	err = bt_send(buf);
    315c:	4628      	mov	r0, r5
    315e:	f7ff ff49 	bl	2ff4 <bt_send>
	if (err) {
    3162:	4603      	mov	r3, r0
    3164:	2800      	cmp	r0, #0
    3166:	d0bc      	beq.n	30e2 <hci_tx_thread+0x9a>
		BT_ERR("Unable to send to driver (err %d)", err);
    3168:	4a1f      	ldr	r2, [pc, #124]	; (31e8 <hci_tx_thread+0x1a0>)
    316a:	4925      	ldr	r1, [pc, #148]	; (3200 <hci_tx_thread+0x1b8>)
    316c:	2003      	movs	r0, #3
    316e:	f7ff f88f 	bl	2290 <bt_log>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3172:	4820      	ldr	r0, [pc, #128]	; (31f4 <hci_tx_thread+0x1ac>)
    3174:	f008 ffba 	bl	c0ec <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    3178:	4628      	mov	r0, r5
    317a:	f008 fa51 	bl	b620 <net_buf_id>
    317e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    3182:	2200      	movs	r2, #0
    3184:	211f      	movs	r1, #31
    3186:	8840      	ldrh	r0, [r0, #2]
    3188:	f7ff f9fa 	bl	2580 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    318c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    3190:	f008 fb04 	bl	b79c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3194:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3196:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    3198:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    319c:	f008 fafe 	bl	b79c <net_buf_unref>
    31a0:	e79f      	b.n	30e2 <hci_tx_thread+0x9a>
		BT_ERR("Uncleared pending sent_cmd");
    31a2:	4a11      	ldr	r2, [pc, #68]	; (31e8 <hci_tx_thread+0x1a0>)
    31a4:	4917      	ldr	r1, [pc, #92]	; (3204 <hci_tx_thread+0x1bc>)
    31a6:	2003      	movs	r0, #3
    31a8:	f7ff f872 	bl	2290 <bt_log>
		net_buf_unref(bt_dev.sent_cmd);
    31ac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    31b0:	f008 faf4 	bl	b79c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    31b4:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    31b8:	e7b9      	b.n	312e <hci_tx_thread+0xe6>
	BT_ASSERT(buf);
    31ba:	4a0b      	ldr	r2, [pc, #44]	; (31e8 <hci_tx_thread+0x1a0>)
    31bc:	4912      	ldr	r1, [pc, #72]	; (3208 <hci_tx_thread+0x1c0>)
    31be:	e768      	b.n	3092 <hci_tx_thread+0x4a>
    31c0:	0000d34a 	.word	0x0000d34a
    31c4:	0000db89 	.word	0x0000db89
    31c8:	20004e88 	.word	0x20004e88
    31cc:	20004f50 	.word	0x20004f50
    31d0:	0000db9a 	.word	0x0000db9a
    31d4:	0000dbc1 	.word	0x0000dbc1
    31d8:	0000d33b 	.word	0x0000d33b
    31dc:	0000dbdf 	.word	0x0000dbdf
    31e0:	0000dbf1 	.word	0x0000dbf1
    31e4:	0000dc07 	.word	0x0000dc07
    31e8:	0000d332 	.word	0x0000d332
    31ec:	0000dc2c 	.word	0x0000dc2c
    31f0:	0000dc49 	.word	0x0000dc49
    31f4:	20004f10 	.word	0x20004f10
    31f8:	20000788 	.word	0x20000788
    31fc:	0000dc68 	.word	0x0000dc68
    3200:	0000d521 	.word	0x0000d521
    3204:	0000dc9b 	.word	0x0000dc9b
    3208:	0000dcba 	.word	0x0000dcba

0000320c <bt_recv>:
{
    320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3210:	7d03      	ldrb	r3, [r0, #20]
    3212:	2b03      	cmp	r3, #3
    3214:	4604      	mov	r4, r0
    3216:	bf98      	it	ls
    3218:	4ab5      	ldrls	r2, [pc, #724]	; (34f0 <bt_recv+0x2e4>)
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    321a:	68a1      	ldr	r1, [r4, #8]
    321c:	bf98      	it	ls
    321e:	5cd0      	ldrbls	r0, [r2, r3]
    3220:	89a2      	ldrh	r2, [r4, #12]
{
    3222:	b089      	sub	sp, #36	; 0x24
    3224:	bf88      	it	hi
    3226:	20ff      	movhi	r0, #255	; 0xff
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    3228:	f7ff f8a0 	bl	236c <bt_monitor_send>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    322c:	f008 ff00 	bl	c030 <_impl_k_current_get>
	BT_DBG("buf %p len %u", buf, buf->len);
    3230:	89a3      	ldrh	r3, [r4, #12]
    3232:	9301      	str	r3, [sp, #4]
    3234:	9400      	str	r4, [sp, #0]
    3236:	4603      	mov	r3, r0
    3238:	4aae      	ldr	r2, [pc, #696]	; (34f4 <bt_recv+0x2e8>)
    323a:	49af      	ldr	r1, [pc, #700]	; (34f8 <bt_recv+0x2ec>)
    323c:	2007      	movs	r0, #7
    323e:	f7ff f827 	bl	2290 <bt_log>
    3242:	7d26      	ldrb	r6, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    3244:	2e01      	cmp	r6, #1
    3246:	f040 8146 	bne.w	34d6 <bt_recv+0x2ca>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    324a:	68a7      	ldr	r7, [r4, #8]
    324c:	f008 fef0 	bl	c030 <_impl_k_current_get>
	BT_DBG("event 0x%02x", hdr->evt);
    3250:	783b      	ldrb	r3, [r7, #0]
    3252:	9300      	str	r3, [sp, #0]
    3254:	4aa9      	ldr	r2, [pc, #676]	; (34fc <bt_recv+0x2f0>)
    3256:	49aa      	ldr	r1, [pc, #680]	; (3500 <bt_recv+0x2f4>)
    3258:	4603      	mov	r3, r0
    325a:	2007      	movs	r0, #7
    325c:	f7ff f818 	bl	2290 <bt_log>
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    3260:	783b      	ldrb	r3, [r7, #0]
    3262:	3b0e      	subs	r3, #14
    3264:	2b01      	cmp	r3, #1
    3266:	f200 816f 	bhi.w	3548 <bt_recv+0x33c>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    326a:	4aa4      	ldr	r2, [pc, #656]	; (34fc <bt_recv+0x2f0>)
    326c:	49a5      	ldr	r1, [pc, #660]	; (3504 <bt_recv+0x2f8>)
    326e:	2003      	movs	r0, #3
    3270:	f7ff f80e 	bl	2290 <bt_log>
    3274:	4040      	eors	r0, r0
    3276:	f380 8811 	msr	BASEPRI, r0
    327a:	f04f 0004 	mov.w	r0, #4
    327e:	df02      	svc	2
    3280:	68a5      	ldr	r5, [r4, #8]
    3282:	f008 fed5 	bl	c030 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    3286:	782b      	ldrb	r3, [r5, #0]
    3288:	9300      	str	r3, [sp, #0]
    328a:	4a9f      	ldr	r2, [pc, #636]	; (3508 <bt_recv+0x2fc>)
    328c:	499f      	ldr	r1, [pc, #636]	; (350c <bt_recv+0x300>)
    328e:	4603      	mov	r3, r0
    3290:	2007      	movs	r0, #7
    3292:	f7fe fffd 	bl	2290 <bt_log>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3296:	f06f 0110 	mvn.w	r1, #16
    329a:	489d      	ldr	r0, [pc, #628]	; (3510 <bt_recv+0x304>)
    329c:	f7ff f95f 	bl	255e <atomic_and>
	if (!evt->status) {
    32a0:	782b      	ldrb	r3, [r5, #0]
    32a2:	b943      	cbnz	r3, 32b6 <bt_recv+0xaa>
		memcpy(pub_key, evt->key, 64);
    32a4:	1c69      	adds	r1, r5, #1
    32a6:	2240      	movs	r2, #64	; 0x40
    32a8:	489a      	ldr	r0, [pc, #616]	; (3514 <bt_recv+0x308>)
    32aa:	f7fd f9b6 	bl	61a <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    32ae:	2108      	movs	r1, #8
    32b0:	4897      	ldr	r0, [pc, #604]	; (3510 <bt_recv+0x304>)
    32b2:	f7ff f943 	bl	253c <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    32b6:	4b98      	ldr	r3, [pc, #608]	; (3518 <bt_recv+0x30c>)
    32b8:	681e      	ldr	r6, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    32ba:	1c6f      	adds	r7, r5, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    32bc:	b936      	cbnz	r6, 32cc <bt_recv+0xc0>
	net_buf_unref(buf);
    32be:	4620      	mov	r0, r4
    32c0:	f008 fa6c 	bl	b79c <net_buf_unref>
		return 0;
    32c4:	2000      	movs	r0, #0
}
    32c6:	b009      	add	sp, #36	; 0x24
    32c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    32cc:	782a      	ldrb	r2, [r5, #0]
    32ce:	6833      	ldr	r3, [r6, #0]
    32d0:	2a00      	cmp	r2, #0
    32d2:	bf0c      	ite	eq
    32d4:	4638      	moveq	r0, r7
    32d6:	2000      	movne	r0, #0
    32d8:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    32da:	6876      	ldr	r6, [r6, #4]
    32dc:	e7ee      	b.n	32bc <bt_recv+0xb0>
    32de:	68a5      	ldr	r5, [r4, #8]
	if (dh_key_cb) {
    32e0:	4e8e      	ldr	r6, [pc, #568]	; (351c <bt_recv+0x310>)
    32e2:	f008 fea5 	bl	c030 <_impl_k_current_get>
	BT_DBG("status: 0x%x", evt->status);
    32e6:	782b      	ldrb	r3, [r5, #0]
    32e8:	9300      	str	r3, [sp, #0]
    32ea:	4a8d      	ldr	r2, [pc, #564]	; (3520 <bt_recv+0x314>)
    32ec:	4987      	ldr	r1, [pc, #540]	; (350c <bt_recv+0x300>)
    32ee:	4603      	mov	r3, r0
    32f0:	2007      	movs	r0, #7
    32f2:	f7fe ffcd 	bl	2290 <bt_log>
	if (dh_key_cb) {
    32f6:	6832      	ldr	r2, [r6, #0]
    32f8:	2a00      	cmp	r2, #0
    32fa:	d0e0      	beq.n	32be <bt_recv+0xb2>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    32fc:	782b      	ldrb	r3, [r5, #0]
    32fe:	b923      	cbnz	r3, 330a <bt_recv+0xfe>
    3300:	1c68      	adds	r0, r5, #1
    3302:	4790      	blx	r2
		dh_key_cb = NULL;
    3304:	2300      	movs	r3, #0
    3306:	6033      	str	r3, [r6, #0]
    3308:	e7d9      	b.n	32be <bt_recv+0xb2>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    330a:	2000      	movs	r0, #0
    330c:	e7f9      	b.n	3302 <bt_recv+0xf6>
	u8_t num_reports = net_buf_pull_u8(buf);
    330e:	4628      	mov	r0, r5
    3310:	f008 fa95 	bl	b83e <net_buf_simple_pull_u8>
    3314:	4680      	mov	r8, r0
    3316:	f008 fe8b 	bl	c030 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    331a:	f8cd 8000 	str.w	r8, [sp]
    331e:	4603      	mov	r3, r0
    3320:	4a80      	ldr	r2, [pc, #512]	; (3524 <bt_recv+0x318>)
    3322:	4981      	ldr	r1, [pc, #516]	; (3528 <bt_recv+0x31c>)
		if (scan_dev_found_cb) {
    3324:	f8df a21c 	ldr.w	sl, [pc, #540]	; 3544 <bt_recv+0x338>
	BT_DBG("Adv number of reports %u",  num_reports);
    3328:	2007      	movs	r0, #7
    332a:	f7fe ffb1 	bl	2290 <bt_log>
	while (num_reports--) {
    332e:	f1b8 0f00 	cmp.w	r8, #0
    3332:	d0c4      	beq.n	32be <bt_recv+0xb2>
		info = (void *)buf->data;
    3334:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3336:	2109      	movs	r1, #9
    3338:	4628      	mov	r0, r5
    333a:	f008 fa78 	bl	b82e <net_buf_simple_pull>
		rssi = info->data[info->length];
    333e:	7a33      	ldrb	r3, [r6, #8]
    3340:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    3342:	1c77      	adds	r7, r6, #1
		rssi = info->data[info->length];
    3344:	f993 b009 	ldrsb.w	fp, [r3, #9]
    3348:	f008 fe72 	bl	c030 <_impl_k_current_get>
    334c:	4681      	mov	r9, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    334e:	4638      	mov	r0, r7
    3350:	f7fe fec2 	bl	20d8 <bt_addr_le_str>
    3354:	f8cd b00c 	str.w	fp, [sp, #12]
    3358:	7a33      	ldrb	r3, [r6, #8]
    335a:	9302      	str	r3, [sp, #8]
    335c:	7833      	ldrb	r3, [r6, #0]
    335e:	4a71      	ldr	r2, [pc, #452]	; (3524 <bt_recv+0x318>)
    3360:	4972      	ldr	r1, [pc, #456]	; (352c <bt_recv+0x320>)
    3362:	e88d 0009 	stmia.w	sp, {r0, r3}
    3366:	464b      	mov	r3, r9
    3368:	2007      	movs	r0, #7
    336a:	f7fe ff91 	bl	2290 <bt_log>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    336e:	7873      	ldrb	r3, [r6, #1]
    3370:	3b02      	subs	r3, #2
    3372:	2b01      	cmp	r3, #1
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3374:	f04f 0207 	mov.w	r2, #7
    3378:	4639      	mov	r1, r7
    337a:	a806      	add	r0, sp, #24
    337c:	d829      	bhi.n	33d2 <bt_recv+0x1c6>
    337e:	f7fd f94c 	bl	61a <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3382:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3386:	3b02      	subs	r3, #2
    3388:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    338c:	f8da 3000 	ldr.w	r3, [sl]
    3390:	b1ab      	cbz	r3, 33be <bt_recv+0x1b2>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    3392:	4628      	mov	r0, r5
    3394:	f008 fa5b 	bl	b84e <net_buf_simple_headroom>
	state->len = buf->len;
    3398:	89a3      	ldrh	r3, [r4, #12]
    339a:	9305      	str	r3, [sp, #20]
			buf->len = info->length;
    339c:	7a33      	ldrb	r3, [r6, #8]
    339e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    33a0:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    33a2:	462b      	mov	r3, r5
    33a4:	7832      	ldrb	r2, [r6, #0]
    33a6:	f8da 7000 	ldr.w	r7, [sl]
    33aa:	4659      	mov	r1, fp
    33ac:	a806      	add	r0, sp, #24
    33ae:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    33b0:	6923      	ldr	r3, [r4, #16]
    33b2:	fa13 f389 	uxtah	r3, r3, r9
    33b6:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    33b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    33bc:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    33be:	7a31      	ldrb	r1, [r6, #8]
    33c0:	4628      	mov	r0, r5
    33c2:	3101      	adds	r1, #1
    33c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    33c8:	f008 fa31 	bl	b82e <net_buf_simple_pull>
    33cc:	fa5f f888 	uxtb.w	r8, r8
    33d0:	e7ad      	b.n	332e <bt_recv+0x122>
    33d2:	f7fd f922 	bl	61a <memcpy>
    33d6:	e7d9      	b.n	338c <bt_recv+0x180>
	u8_t num_reports = net_buf_pull_u8(buf);
    33d8:	4628      	mov	r0, r5
    33da:	f008 fa30 	bl	b83e <net_buf_simple_pull_u8>
    33de:	4680      	mov	r8, r0
    33e0:	f008 fe26 	bl	c030 <_impl_k_current_get>
	BT_DBG("Adv number of reports %u",  num_reports);
    33e4:	f8cd 8000 	str.w	r8, [sp]
    33e8:	4603      	mov	r3, r0
    33ea:	4a51      	ldr	r2, [pc, #324]	; (3530 <bt_recv+0x324>)
    33ec:	494e      	ldr	r1, [pc, #312]	; (3528 <bt_recv+0x31c>)
		if (scan_dev_found_cb) {
    33ee:	f8df a154 	ldr.w	sl, [pc, #340]	; 3544 <bt_recv+0x338>
	BT_DBG("Adv number of reports %u",  num_reports);
    33f2:	2007      	movs	r0, #7
    33f4:	f7fe ff4c 	bl	2290 <bt_log>
	while (num_reports--) {
    33f8:	f1b8 0f00 	cmp.w	r8, #0
    33fc:	f43f af5f 	beq.w	32be <bt_recv+0xb2>
		info = (void *)buf->data;
    3400:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    3402:	2117      	movs	r1, #23
    3404:	4628      	mov	r0, r5
    3406:	f008 fa12 	bl	b82e <net_buf_simple_pull>
		rssi = info->data[info->length];
    340a:	7db3      	ldrb	r3, [r6, #22]
    340c:	4433      	add	r3, r6
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    340e:	1c77      	adds	r7, r6, #1
		rssi = info->data[info->length];
    3410:	f993 b017 	ldrsb.w	fp, [r3, #23]
    3414:	f008 fe0c 	bl	c030 <_impl_k_current_get>
    3418:	4681      	mov	r9, r0
		BT_DBG("%s event %u, len %u, rssi %d dBm",
    341a:	4638      	mov	r0, r7
    341c:	f7fe fe5c 	bl	20d8 <bt_addr_le_str>
    3420:	f8cd b00c 	str.w	fp, [sp, #12]
    3424:	7db3      	ldrb	r3, [r6, #22]
    3426:	9302      	str	r3, [sp, #8]
    3428:	7833      	ldrb	r3, [r6, #0]
    342a:	4a41      	ldr	r2, [pc, #260]	; (3530 <bt_recv+0x324>)
    342c:	493f      	ldr	r1, [pc, #252]	; (352c <bt_recv+0x320>)
    342e:	e88d 0009 	stmia.w	sp, {r0, r3}
    3432:	464b      	mov	r3, r9
    3434:	2007      	movs	r0, #7
    3436:	f7fe ff2b 	bl	2290 <bt_log>
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    343a:	7873      	ldrb	r3, [r6, #1]
    343c:	3b02      	subs	r3, #2
    343e:	2b01      	cmp	r3, #1
    3440:	f04f 0207 	mov.w	r2, #7
    3444:	4639      	mov	r1, r7
    3446:	a806      	add	r0, sp, #24
    3448:	d829      	bhi.n	349e <bt_recv+0x292>
    344a:	f7fd f8e6 	bl	61a <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    344e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3452:	3b02      	subs	r3, #2
    3454:	f88d 3018 	strb.w	r3, [sp, #24]
		if (scan_dev_found_cb) {
    3458:	f8da 3000 	ldr.w	r3, [sl]
    345c:	b1ab      	cbz	r3, 348a <bt_recv+0x27e>
	state->offset = net_buf_simple_headroom(buf);
    345e:	4628      	mov	r0, r5
    3460:	f008 f9f5 	bl	b84e <net_buf_simple_headroom>
	state->len = buf->len;
    3464:	89a3      	ldrh	r3, [r4, #12]
    3466:	9305      	str	r3, [sp, #20]
			buf->len = info->length;
    3468:	7db3      	ldrb	r3, [r6, #22]
    346a:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    346c:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    346e:	462b      	mov	r3, r5
    3470:	7832      	ldrb	r2, [r6, #0]
    3472:	f8da 7000 	ldr.w	r7, [sl]
    3476:	4659      	mov	r1, fp
    3478:	a806      	add	r0, sp, #24
    347a:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    347c:	6923      	ldr	r3, [r4, #16]
    347e:	fa13 f389 	uxtah	r3, r3, r9
    3482:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    3484:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    3488:	81a3      	strh	r3, [r4, #12]
		net_buf_pull(buf, info->length + sizeof(rssi));
    348a:	7db1      	ldrb	r1, [r6, #22]
    348c:	4628      	mov	r0, r5
    348e:	3101      	adds	r1, #1
    3490:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3494:	f008 f9cb 	bl	b82e <net_buf_simple_pull>
    3498:	fa5f f888 	uxtb.w	r8, r8
    349c:	e7ac      	b.n	33f8 <bt_recv+0x1ec>
    349e:	f7fd f8bc 	bl	61a <memcpy>
    34a2:	e7d9      	b.n	3458 <bt_recv+0x24c>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    34a4:	89a5      	ldrh	r5, [r4, #12]
    34a6:	68a0      	ldr	r0, [r4, #8]
    34a8:	4629      	mov	r1, r5
    34aa:	f7fe fdb9 	bl	2020 <bt_hex>
    34ae:	4a21      	ldr	r2, [pc, #132]	; (3534 <bt_recv+0x328>)
    34b0:	4921      	ldr	r1, [pc, #132]	; (3538 <bt_recv+0x32c>)
    34b2:	9001      	str	r0, [sp, #4]
    34b4:	9500      	str	r5, [sp, #0]
    34b6:	4633      	mov	r3, r6
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    34b8:	2004      	movs	r0, #4
    34ba:	f7fe fee9 	bl	2290 <bt_log>
    34be:	e6fe      	b.n	32be <bt_recv+0xb2>
    34c0:	89a5      	ldrh	r5, [r4, #12]
    34c2:	68a0      	ldr	r0, [r4, #8]
    34c4:	4629      	mov	r1, r5
    34c6:	f7fe fdab 	bl	2020 <bt_hex>
    34ca:	9500      	str	r5, [sp, #0]
    34cc:	9001      	str	r0, [sp, #4]
    34ce:	463b      	mov	r3, r7
    34d0:	4a0a      	ldr	r2, [pc, #40]	; (34fc <bt_recv+0x2f0>)
    34d2:	491a      	ldr	r1, [pc, #104]	; (353c <bt_recv+0x330>)
    34d4:	e7f0      	b.n	34b8 <bt_recv+0x2ac>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    34d6:	4633      	mov	r3, r6
    34d8:	4a06      	ldr	r2, [pc, #24]	; (34f4 <bt_recv+0x2e8>)
    34da:	4919      	ldr	r1, [pc, #100]	; (3540 <bt_recv+0x334>)
    34dc:	2003      	movs	r0, #3
    34de:	f7fe fed7 	bl	2290 <bt_log>
		net_buf_unref(buf);
    34e2:	4620      	mov	r0, r4
    34e4:	f008 f95a 	bl	b79c <net_buf_unref>
		return -EINVAL;
    34e8:	f06f 0015 	mvn.w	r0, #21
    34ec:	e6eb      	b.n	32c6 <bt_recv+0xba>
    34ee:	bf00      	nop
    34f0:	0000d255 	.word	0x0000d255
    34f4:	0000d42f 	.word	0x0000d42f
    34f8:	0000d5ac 	.word	0x0000d5ac
    34fc:	0000d328 	.word	0x0000d328
    3500:	0000d5c3 	.word	0x0000d5c3
    3504:	0000d6bb 	.word	0x0000d6bb
    3508:	0000d293 	.word	0x0000d293
    350c:	0000d5f2 	.word	0x0000d5f2
    3510:	20004ef8 	.word	0x20004ef8
    3514:	2000079c 	.word	0x2000079c
    3518:	200007dc 	.word	0x200007dc
    351c:	20000798 	.word	0x20000798
    3520:	0000d2a4 	.word	0x0000d2a4
    3524:	0000d308 	.word	0x0000d308
    3528:	0000d608 	.word	0x0000d608
    352c:	0000d62a 	.word	0x0000d62a
    3530:	0000d2f6 	.word	0x0000d2f6
    3534:	0000d316 	.word	0x0000d316
    3538:	0000d654 	.word	0x0000d654
    353c:	0000d67d 	.word	0x0000d67d
    3540:	0000d6a3 	.word	0x0000d6a3
    3544:	200007e4 	.word	0x200007e4
	net_buf_pull(buf, sizeof(*hdr));
    3548:	f104 0508 	add.w	r5, r4, #8
    354c:	2102      	movs	r1, #2
    354e:	4628      	mov	r0, r5
    3550:	f008 f96d 	bl	b82e <net_buf_simple_pull>
	switch (hdr->evt) {
    3554:	783f      	ldrb	r7, [r7, #0]
    3556:	2f3e      	cmp	r7, #62	; 0x3e
    3558:	d1b2      	bne.n	34c0 <bt_recv+0x2b4>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    355a:	68a7      	ldr	r7, [r4, #8]
    355c:	f008 fd68 	bl	c030 <_impl_k_current_get>
	BT_DBG("subevent 0x%02x", evt->subevent);
    3560:	783b      	ldrb	r3, [r7, #0]
    3562:	9300      	str	r3, [sp, #0]
    3564:	4a14      	ldr	r2, [pc, #80]	; (35b8 <bt_recv+0x3ac>)
    3566:	4915      	ldr	r1, [pc, #84]	; (35bc <bt_recv+0x3b0>)
    3568:	4603      	mov	r3, r0
    356a:	2007      	movs	r0, #7
    356c:	f7fe fe90 	bl	2290 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    3570:	4631      	mov	r1, r6
    3572:	4628      	mov	r0, r5
    3574:	f008 f95b 	bl	b82e <net_buf_simple_pull>
	switch (evt->subevent) {
    3578:	783e      	ldrb	r6, [r7, #0]
    357a:	1eb3      	subs	r3, r6, #2
    357c:	2b0b      	cmp	r3, #11
    357e:	d891      	bhi.n	34a4 <bt_recv+0x298>
    3580:	a201      	add	r2, pc, #4	; (adr r2, 3588 <bt_recv+0x37c>)
    3582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3586:	bf00      	nop
    3588:	0000330f 	.word	0x0000330f
    358c:	000034a5 	.word	0x000034a5
    3590:	000034a5 	.word	0x000034a5
    3594:	000034a5 	.word	0x000034a5
    3598:	000034a5 	.word	0x000034a5
    359c:	000034a5 	.word	0x000034a5
    35a0:	00003281 	.word	0x00003281
    35a4:	000032df 	.word	0x000032df
    35a8:	000034a5 	.word	0x000034a5
    35ac:	000034a5 	.word	0x000034a5
    35b0:	000034a5 	.word	0x000034a5
    35b4:	000033d9 	.word	0x000033d9
    35b8:	0000d316 	.word	0x0000d316
    35bc:	0000d5d9 	.word	0x0000d5d9

000035c0 <bt_recv_prio>:
{
    35c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    35c4:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    35c6:	6886      	ldr	r6, [r0, #8]
    35c8:	2b03      	cmp	r3, #3
{
    35ca:	4604      	mov	r4, r0
    35cc:	bf96      	itet	ls
    35ce:	4a37      	ldrls	r2, [pc, #220]	; (36ac <bt_recv_prio+0xec>)
    35d0:	20ff      	movhi	r0, #255	; 0xff
    35d2:	5cd0      	ldrbls	r0, [r2, r3]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);
    35d4:	89a2      	ldrh	r2, [r4, #12]
    35d6:	4631      	mov	r1, r6
    35d8:	f7fe fec8 	bl	236c <bt_monitor_send>
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    35dc:	7d23      	ldrb	r3, [r4, #20]
    35de:	2b01      	cmp	r3, #1
    35e0:	d00a      	beq.n	35f8 <bt_recv_prio+0x38>
    35e2:	4a33      	ldr	r2, [pc, #204]	; (36b0 <bt_recv_prio+0xf0>)
    35e4:	4933      	ldr	r1, [pc, #204]	; (36b4 <bt_recv_prio+0xf4>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    35e6:	2003      	movs	r0, #3
    35e8:	f7fe fe52 	bl	2290 <bt_log>
    35ec:	4040      	eors	r0, r0
    35ee:	f380 8811 	msr	BASEPRI, r0
    35f2:	f04f 0004 	mov.w	r0, #4
    35f6:	df02      	svc	2
    35f8:	89a3      	ldrh	r3, [r4, #12]
    35fa:	2b01      	cmp	r3, #1
    35fc:	d802      	bhi.n	3604 <bt_recv_prio+0x44>
    35fe:	4a2c      	ldr	r2, [pc, #176]	; (36b0 <bt_recv_prio+0xf0>)
    3600:	492d      	ldr	r1, [pc, #180]	; (36b8 <bt_recv_prio+0xf8>)
    3602:	e7f0      	b.n	35e6 <bt_recv_prio+0x26>
    3604:	7833      	ldrb	r3, [r6, #0]
    3606:	3b0e      	subs	r3, #14
    3608:	2b01      	cmp	r3, #1
    360a:	d84c      	bhi.n	36a6 <bt_recv_prio+0xe6>
	net_buf_pull(buf, sizeof(*hdr));
    360c:	f104 0508 	add.w	r5, r4, #8
    3610:	2102      	movs	r1, #2
    3612:	4628      	mov	r0, r5
    3614:	f008 f90b 	bl	b82e <net_buf_simple_pull>
	switch (hdr->evt) {
    3618:	7833      	ldrb	r3, [r6, #0]
    361a:	2b0e      	cmp	r3, #14
    361c:	d007      	beq.n	362e <bt_recv_prio+0x6e>
    361e:	2b0f      	cmp	r3, #15
    3620:	d027      	beq.n	3672 <bt_recv_prio+0xb2>
		net_buf_unref(buf);
    3622:	4620      	mov	r0, r4
    3624:	f008 f8ba 	bl	b79c <net_buf_unref>
		BT_ASSERT(0);
    3628:	4a21      	ldr	r2, [pc, #132]	; (36b0 <bt_recv_prio+0xf0>)
    362a:	4924      	ldr	r1, [pc, #144]	; (36bc <bt_recv_prio+0xfc>)
    362c:	e7db      	b.n	35e6 <bt_recv_prio+0x26>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    362e:	68a3      	ldr	r3, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3630:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    3634:	781f      	ldrb	r7, [r3, #0]
    3636:	f008 fcfb 	bl	c030 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    363a:	4a21      	ldr	r2, [pc, #132]	; (36c0 <bt_recv_prio+0x100>)
    363c:	4921      	ldr	r1, [pc, #132]	; (36c4 <bt_recv_prio+0x104>)
    363e:	9600      	str	r6, [sp, #0]
    3640:	4603      	mov	r3, r0
    3642:	2007      	movs	r0, #7
    3644:	f7fe fe24 	bl	2290 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    3648:	2103      	movs	r1, #3
    364a:	4628      	mov	r0, r5
    364c:	f008 f8ef 	bl	b82e <net_buf_simple_pull>
	status = buf->data[0];
    3650:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    3652:	4622      	mov	r2, r4
    3654:	7819      	ldrb	r1, [r3, #0]
    3656:	4630      	mov	r0, r6
    3658:	f7fe ff92 	bl	2580 <hci_cmd_done>
	if (ncmd) {
    365c:	b117      	cbz	r7, 3664 <bt_recv_prio+0xa4>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    365e:	481a      	ldr	r0, [pc, #104]	; (36c8 <bt_recv_prio+0x108>)
    3660:	f008 fd44 	bl	c0ec <_impl_k_sem_give>
	net_buf_unref(buf);
    3664:	4620      	mov	r0, r4
    3666:	f008 f899 	bl	b79c <net_buf_unref>
}
    366a:	2000      	movs	r0, #0
    366c:	b002      	add	sp, #8
    366e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    3672:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    3674:	8877      	ldrh	r7, [r6, #2]
	u8_t ncmd = evt->ncmd;
    3676:	f896 8001 	ldrb.w	r8, [r6, #1]
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    367a:	f008 fcd9 	bl	c030 <_impl_k_current_get>
	BT_DBG("opcode 0x%04x", opcode);
    367e:	4a13      	ldr	r2, [pc, #76]	; (36cc <bt_recv_prio+0x10c>)
    3680:	4910      	ldr	r1, [pc, #64]	; (36c4 <bt_recv_prio+0x104>)
    3682:	9700      	str	r7, [sp, #0]
    3684:	4603      	mov	r3, r0
    3686:	2007      	movs	r0, #7
    3688:	f7fe fe02 	bl	2290 <bt_log>
	net_buf_pull(buf, sizeof(*evt));
    368c:	2104      	movs	r1, #4
    368e:	4628      	mov	r0, r5
    3690:	f008 f8cd 	bl	b82e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    3694:	4622      	mov	r2, r4
    3696:	7831      	ldrb	r1, [r6, #0]
    3698:	4638      	mov	r0, r7
    369a:	f7fe ff71 	bl	2580 <hci_cmd_done>
	if (ncmd) {
    369e:	f1b8 0f00 	cmp.w	r8, #0
    36a2:	d0df      	beq.n	3664 <bt_recv_prio+0xa4>
    36a4:	e7db      	b.n	365e <bt_recv_prio+0x9e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    36a6:	4a02      	ldr	r2, [pc, #8]	; (36b0 <bt_recv_prio+0xf0>)
    36a8:	4909      	ldr	r1, [pc, #36]	; (36d0 <bt_recv_prio+0x110>)
    36aa:	e79c      	b.n	35e6 <bt_recv_prio+0x26>
    36ac:	0000d255 	.word	0x0000d255
    36b0:	0000d437 	.word	0x0000d437
    36b4:	0000d6ee 	.word	0x0000d6ee
    36b8:	0000d726 	.word	0x0000d726
    36bc:	0000d76b 	.word	0x0000d76b
    36c0:	0000d2d6 	.word	0x0000d2d6
    36c4:	0000d754 	.word	0x0000d754
    36c8:	20004f10 	.word	0x20004f10
    36cc:	0000d2e7 	.word	0x0000d2e7
    36d0:	0000d782 	.word	0x0000d782

000036d4 <bt_hci_driver_register>:
{
    36d4:	b530      	push	{r4, r5, lr}
	if (bt_dev.drv) {
    36d6:	4b18      	ldr	r3, [pc, #96]	; (3738 <bt_hci_driver_register+0x64>)
    36d8:	f8d3 40c4 	ldr.w	r4, [r3, #196]	; 0xc4
{
    36dc:	b085      	sub	sp, #20
    36de:	4605      	mov	r5, r0
	if (bt_dev.drv) {
    36e0:	bb1c      	cbnz	r4, 372a <bt_hci_driver_register+0x56>
	if (!drv->open || !drv->send) {
    36e2:	6882      	ldr	r2, [r0, #8]
    36e4:	b322      	cbz	r2, 3730 <bt_hci_driver_register+0x5c>
    36e6:	68c2      	ldr	r2, [r0, #12]
    36e8:	b312      	cbz	r2, 3730 <bt_hci_driver_register+0x5c>
	bt_dev.drv = drv;
    36ea:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
    36ee:	f008 fc9f 	bl	c030 <_impl_k_current_get>
	BT_DBG("Registered %s", drv->name ? drv->name : "");
    36f2:	682b      	ldr	r3, [r5, #0]
    36f4:	4a11      	ldr	r2, [pc, #68]	; (373c <bt_hci_driver_register+0x68>)
    36f6:	4912      	ldr	r1, [pc, #72]	; (3740 <bt_hci_driver_register+0x6c>)
    36f8:	2b00      	cmp	r3, #0
    36fa:	bf08      	it	eq
    36fc:	4613      	moveq	r3, r2
    36fe:	9300      	str	r3, [sp, #0]
    3700:	4a10      	ldr	r2, [pc, #64]	; (3744 <bt_hci_driver_register+0x70>)
    3702:	4603      	mov	r3, r0
    3704:	2007      	movs	r0, #7
    3706:	f7fe fdc3 	bl	2290 <bt_log>
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    370a:	682b      	ldr	r3, [r5, #0]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    370c:	4a0e      	ldr	r2, [pc, #56]	; (3748 <bt_hci_driver_register+0x74>)
    370e:	7929      	ldrb	r1, [r5, #4]
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    3710:	9402      	str	r4, [sp, #8]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3712:	2b00      	cmp	r3, #0
    3714:	bf08      	it	eq
    3716:	4613      	moveq	r3, r2
    3718:	4620      	mov	r0, r4
    371a:	aa02      	add	r2, sp, #8
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");
    371c:	f8ad 400c 	strh.w	r4, [sp, #12]
	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
    3720:	f7fe feba 	bl	2498 <bt_monitor_new_index>
	return 0;
    3724:	4620      	mov	r0, r4
}
    3726:	b005      	add	sp, #20
    3728:	bd30      	pop	{r4, r5, pc}
		return -EALREADY;
    372a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    372e:	e7fa      	b.n	3726 <bt_hci_driver_register+0x52>
		return -EINVAL;
    3730:	f06f 0015 	mvn.w	r0, #21
    3734:	e7f7      	b.n	3726 <bt_hci_driver_register+0x52>
    3736:	bf00      	nop
    3738:	20004e88 	.word	0x20004e88
    373c:	0000cc2e 	.word	0x0000cc2e
    3740:	0000d595 	.word	0x0000d595
    3744:	0000d444 	.word	0x0000d444
    3748:	0000d591 	.word	0x0000d591

0000374c <bt_enable>:
{
    374c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    374e:	4d28      	ldr	r5, [pc, #160]	; (37f0 <bt_enable+0xa4>)
    3750:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
{
    3754:	b086      	sub	sp, #24
    3756:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    3758:	b94b      	cbnz	r3, 376e <bt_enable+0x22>
		BT_ERR("No HCI driver registered");
    375a:	4a26      	ldr	r2, [pc, #152]	; (37f4 <bt_enable+0xa8>)
    375c:	4926      	ldr	r1, [pc, #152]	; (37f8 <bt_enable+0xac>)
    375e:	2003      	movs	r0, #3
    3760:	f7fe fd96 	bl	2290 <bt_log>
		return -ENODEV;
    3764:	f06f 0412 	mvn.w	r4, #18
}
    3768:	4620      	mov	r0, r4
    376a:	b006      	add	sp, #24
    376c:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    376e:	2101      	movs	r1, #1
    3770:	f105 0070 	add.w	r0, r5, #112	; 0x70
    3774:	f7fe fee2 	bl	253c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    3778:	f010 0001 	ands.w	r0, r0, #1
    377c:	d135      	bne.n	37ea <bt_enable+0x9e>
	ready_cb = cb;
    377e:	4b1f      	ldr	r3, [pc, #124]	; (37fc <bt_enable+0xb0>)

    3780:	491f      	ldr	r1, [pc, #124]	; (3800 <bt_enable+0xb4>)
    3782:	601e      	str	r6, [r3, #0]
    3784:	f06f 0308 	mvn.w	r3, #8
    3788:	9005      	str	r0, [sp, #20]
    378a:	9004      	str	r0, [sp, #16]
    378c:	9303      	str	r3, [sp, #12]
    378e:	9002      	str	r0, [sp, #8]
    3790:	9001      	str	r0, [sp, #4]
    3792:	9000      	str	r0, [sp, #0]
    3794:	4b1b      	ldr	r3, [pc, #108]	; (3804 <bt_enable+0xb8>)
    3796:	481c      	ldr	r0, [pc, #112]	; (3808 <bt_enable+0xbc>)
    3798:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    379c:	f008 fee2 	bl	c564 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    37a0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    37a4:	689b      	ldr	r3, [r3, #8]
    37a6:	4798      	blx	r3
	if (err) {
    37a8:	4604      	mov	r4, r0
    37aa:	b130      	cbz	r0, 37ba <bt_enable+0x6e>
		BT_ERR("HCI driver open failed (%d)", err);
    37ac:	4603      	mov	r3, r0
    37ae:	4a11      	ldr	r2, [pc, #68]	; (37f4 <bt_enable+0xa8>)
    37b0:	4916      	ldr	r1, [pc, #88]	; (380c <bt_enable+0xc0>)
    37b2:	2003      	movs	r0, #3
    37b4:	f7fe fd6c 	bl	2290 <bt_log>
		return err;
    37b8:	e7d6      	b.n	3768 <bt_enable+0x1c>
	if (!cb) {
    37ba:	b94e      	cbnz	r6, 37d0 <bt_enable+0x84>
	err = hci_init();
    37bc:	f7ff f908 	bl	29d0 <hci_init>
	if (err) {
    37c0:	4604      	mov	r4, r0
    37c2:	2800      	cmp	r0, #0
    37c4:	d1d0      	bne.n	3768 <bt_enable+0x1c>
}
    37c6:	b006      	add	sp, #24
    37c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    37cc:	f7ff b8e0 	b.w	2990 <bt_init.part.13>
    37d0:	2101      	movs	r1, #1
    37d2:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    37d6:	f7fe feb1 	bl	253c <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    37da:	07c3      	lsls	r3, r0, #31
    37dc:	d4c4      	bmi.n	3768 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    37de:	f105 0164 	add.w	r1, r5, #100	; 0x64
    37e2:	480b      	ldr	r0, [pc, #44]	; (3810 <bt_enable+0xc4>)
    37e4:	f008 fa0f 	bl	bc06 <k_queue_append>
    37e8:	e7be      	b.n	3768 <bt_enable+0x1c>
		return -EALREADY;
    37ea:	f06f 0444 	mvn.w	r4, #68	; 0x44
    37ee:	e7bb      	b.n	3768 <bt_enable+0x1c>
    37f0:	20004e88 	.word	0x20004e88
    37f4:	0000d45b 	.word	0x0000d45b
    37f8:	0000d492 	.word	0x0000d492
    37fc:	200007e0 	.word	0x200007e0
    3800:	20002dc8 	.word	0x20002dc8
    3804:	00003049 	.word	0x00003049
    3808:	200007e8 	.word	0x200007e8
    380c:	0000d4af 	.word	0x0000d4af
    3810:	20002d50 	.word	0x20002d50

00003814 <bt_le_ext_adv_start>:


int bt_le_ext_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    3814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3818:	b089      	sub	sp, #36	; 0x24
    381a:	4605      	mov	r5, r0
    381c:	460f      	mov	r7, r1
    381e:	4690      	mov	r8, r2
    3820:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_ext_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
    3822:	f7fe fe71 	bl	2508 <valid_adv_param>
    3826:	b928      	cbnz	r0, 3834 <bt_le_ext_adv_start+0x20>
		return -EINVAL;
    3828:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    382c:	4620      	mov	r0, r4
    382e:	b009      	add	sp, #36	; 0x24
    3830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3834:	2005      	movs	r0, #5
    3836:	f7fe ff05 	bl	2644 <atomic_test_bit.constprop.23>
    383a:	4604      	mov	r4, r0
    383c:	2800      	cmp	r0, #0
    383e:	f040 80a3 	bne.w	3988 <bt_le_ext_adv_start+0x174>
	memset(&set_param, 0, sizeof(set_param));
    3842:	4601      	mov	r1, r0
    3844:	2217      	movs	r2, #23
    3846:	a802      	add	r0, sp, #8
    3848:	f7fc ff13 	bl	672 <memset>
	set_param.prim_min_interval = sys_cpu_to_le16(param->interval_min);
    384c:	886b      	ldrh	r3, [r5, #2]
    384e:	f8ad 300b 	strh.w	r3, [sp, #11]
	set_param.prim_max_interval = sys_cpu_to_le16(param->interval_max);
    3852:	88ab      	ldrh	r3, [r5, #4]
    3854:	f8ad 300d 	strh.w	r3, [sp, #13]
	set_param.prim_channel_map  = 0x01;
    3858:	2301      	movs	r3, #1
    385a:	f88d 300f 	strb.w	r3, [sp, #15]
	set_param.prim_adv_phy  	= 0x01;
    385e:	f88d 301a 	strb.w	r3, [sp, #26]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    3862:	4b4b      	ldr	r3, [pc, #300]	; (3990 <bt_le_ext_adv_start+0x17c>)
	set_param.handle			= 0x00;
    3864:	f88d 4008 	strb.w	r4, [sp, #8]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    3868:	6818      	ldr	r0, [r3, #0]
    386a:	9000      	str	r0, [sp, #0]
    386c:	889b      	ldrh	r3, [r3, #4]
    386e:	f8ad 3004 	strh.w	r3, [sp, #4]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    3872:	4669      	mov	r1, sp
	set_param.sid 				= 0x02;
    3874:	f04f 0902 	mov.w	r9, #2
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    3878:	2206      	movs	r2, #6
    387a:	f10d 0012 	add.w	r0, sp, #18
	set_param.sid 				= 0x02;
    387e:	f88d 901d 	strb.w	r9, [sp, #29]
	set_param.sec_adv_phy		= 0x00;  
    3882:	f88d 401c 	strb.w	r4, [sp, #28]
	set_param.sec_adv_max_skip  = 0;                                   //0x01
    3886:	f88d 401b 	strb.w	r4, [sp, #27]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    388a:	f7fc fec6 	bl	61a <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    388e:	782b      	ldrb	r3, [r5, #0]
    3890:	07d9      	lsls	r1, r3, #31
    3892:	d51a      	bpl.n	38ca <bt_le_ext_adv_start+0xb6>
			if (atomic_test_bit(bt_dev.flags,
    3894:	4648      	mov	r0, r9
    3896:	f7fe fed5 	bl	2644 <atomic_test_bit.constprop.23>
    389a:	b110      	cbz	r0, 38a2 <bt_le_ext_adv_start+0x8e>
				set_random_address(&bt_dev.id_addr.a);
    389c:	483d      	ldr	r0, [pc, #244]	; (3994 <bt_le_ext_adv_start+0x180>)
    389e:	f7fe ff93 	bl	27c8 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    38a2:	4b3d      	ldr	r3, [pc, #244]	; (3998 <bt_le_ext_adv_start+0x184>)
    38a4:	781b      	ldrb	r3, [r3, #0]
    38a6:	f88d 3010 	strb.w	r3, [sp, #16]
		set_param.props = BT_HCI_LE_ADV_PROP_CONN | BT_HCI_LE_ADV_PROP_SCAN;				// BT_LE_ADV_IND;
    38aa:	2303      	movs	r3, #3
    38ac:	f88d 3009 	strb.w	r3, [sp, #9]
    38b0:	2300      	movs	r3, #0
    38b2:	f88d 300a 	strb.w	r3, [sp, #10]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(set_param));
    38b6:	2117      	movs	r1, #23
    38b8:	f242 0036 	movw	r0, #8246	; 0x2036
    38bc:	f7fe fed4 	bl	2668 <bt_hci_cmd_create>
	if (!buf) {
    38c0:	4604      	mov	r4, r0
    38c2:	b9c8      	cbnz	r0, 38f8 <bt_le_ext_adv_start+0xe4>
		return -ENOBUFS;
    38c4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    38c8:	e7b0      	b.n	382c <bt_le_ext_adv_start+0x18>
		if (param->own_addr) {
    38ca:	68a8      	ldr	r0, [r5, #8]
    38cc:	b188      	cbz	r0, 38f2 <bt_le_ext_adv_start+0xde>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    38ce:	7943      	ldrb	r3, [r0, #5]
    38d0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    38d4:	d1a8      	bne.n	3828 <bt_le_ext_adv_start+0x14>
			err = set_random_address(param->own_addr);
    38d6:	f7fe ff77 	bl	27c8 <set_random_address>
			err = le_set_private_addr();
    38da:	4604      	mov	r4, r0
		if (err) {
    38dc:	2800      	cmp	r0, #0
    38de:	d1a5      	bne.n	382c <bt_le_ext_adv_start+0x18>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;									//own_addr_type
    38e0:	2301      	movs	r3, #1
    38e2:	f88d 3010 	strb.w	r3, [sp, #16]
			set_param.props =  BT_HCI_LE_ADV_PROP_TX_POWER  ; //|BT_HCI_LE_ADV_PROP_DIRECT |BT_HCI_LE_ADV_PROP_SCAN |;		//BT_LE_ADV_SCAN_IND and trx pwr
    38e6:	2340      	movs	r3, #64	; 0x40
    38e8:	f88d 3009 	strb.w	r3, [sp, #9]
    38ec:	f88d 000a 	strb.w	r0, [sp, #10]
    38f0:	e7e1      	b.n	38b6 <bt_le_ext_adv_start+0xa2>
			err = le_set_private_addr();
    38f2:	f7fe ffa9 	bl	2848 <le_set_private_addr>
    38f6:	e7f0      	b.n	38da <bt_le_ext_adv_start+0xc6>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    38f8:	2217      	movs	r2, #23
    38fa:	a902      	add	r1, sp, #8
    38fc:	3008      	adds	r0, #8
    38fe:	f007 ff85 	bl	b80c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, NULL);
    3902:	4621      	mov	r1, r4
    3904:	2200      	movs	r2, #0
    3906:	f242 0036 	movw	r0, #8246	; 0x2036
    390a:	f7fe fef7 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    390e:	4604      	mov	r4, r0
    3910:	2800      	cmp	r0, #0
    3912:	d18b      	bne.n	382c <bt_le_ext_adv_start+0x18>
	err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, ad, ad_len);
    3914:	4642      	mov	r2, r8
    3916:	4639      	mov	r1, r7
    3918:	f242 0037 	movw	r0, #8247	; 0x2037
    391c:	f7fe ffda 	bl	28d4 <set_ext_ad>
	if (err) {
    3920:	4604      	mov	r4, r0
    3922:	2800      	cmp	r0, #0
    3924:	d182      	bne.n	382c <bt_le_ext_adv_start+0x18>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3926:	bb2e      	cbnz	r6, 3974 <bt_le_ext_adv_start+0x160>
    3928:	782b      	ldrb	r3, [r5, #0]
    392a:	07da      	lsls	r2, r3, #31
    392c:	d422      	bmi.n	3974 <bt_le_ext_adv_start+0x160>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 1);
    392e:	2101      	movs	r1, #1
    3930:	f242 0039 	movw	r0, #8249	; 0x2039
    3934:	f7fe fe98 	bl	2668 <bt_hci_cmd_create>
	if (!buf) {
    3938:	4604      	mov	r4, r0
    393a:	2800      	cmp	r0, #0
    393c:	d0c2      	beq.n	38c4 <bt_le_ext_adv_start+0xb0>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    393e:	2101      	movs	r1, #1
    3940:	3008      	adds	r0, #8
    3942:	f007 ff6c 	bl	b81e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
    3946:	4621      	mov	r1, r4
    3948:	2200      	movs	r2, #0
    394a:	f242 0039 	movw	r0, #8249	; 0x2039
    394e:	f7fe fed5 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    3952:	4604      	mov	r4, r0
    3954:	2800      	cmp	r0, #0
    3956:	f47f af69 	bne.w	382c <bt_le_ext_adv_start+0x18>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    395a:	2120      	movs	r1, #32
    395c:	480f      	ldr	r0, [pc, #60]	; (399c <bt_le_ext_adv_start+0x188>)
    395e:	f7fe fded 	bl	253c <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    3962:	782b      	ldrb	r3, [r5, #0]
    3964:	079b      	lsls	r3, r3, #30
    3966:	f53f af61 	bmi.w	382c <bt_le_ext_adv_start+0x18>
    396a:	2140      	movs	r1, #64	; 0x40
    396c:	480b      	ldr	r0, [pc, #44]	; (399c <bt_le_ext_adv_start+0x188>)
    396e:	f7fe fde5 	bl	253c <atomic_or>
    3972:	e75b      	b.n	382c <bt_le_ext_adv_start+0x18>
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_SCAN_RSP_DATA, sd, sd_len);
    3974:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3976:	4631      	mov	r1, r6
    3978:	f242 0038 	movw	r0, #8248	; 0x2038
    397c:	f7fe ffaa 	bl	28d4 <set_ext_ad>
		if (err) {
    3980:	4604      	mov	r4, r0
    3982:	2800      	cmp	r0, #0
    3984:	d0d3      	beq.n	392e <bt_le_ext_adv_start+0x11a>
    3986:	e751      	b.n	382c <bt_le_ext_adv_start+0x18>
		return -EALREADY;
    3988:	f06f 0444 	mvn.w	r4, #68	; 0x44
    398c:	e74e      	b.n	382c <bt_le_ext_adv_start+0x18>
    398e:	bf00      	nop
    3990:	0000cbef 	.word	0x0000cbef
    3994:	20004e89 	.word	0x20004e89
    3998:	20004e88 	.word	0x20004e88
    399c:	20004ef8 	.word	0x20004ef8

000039a0 <bt_le_adv_stop>:

	return 0;
}

int bt_le_adv_stop(void)
{
    39a0:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    39a2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    39a6:	4819      	ldr	r0, [pc, #100]	; (3a0c <bt_le_adv_stop+0x6c>)
    39a8:	f7fe fdd9 	bl	255e <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    39ac:	2005      	movs	r0, #5
    39ae:	f7fe fe49 	bl	2644 <atomic_test_bit.constprop.23>
    39b2:	b910      	cbnz	r0, 39ba <bt_le_adv_stop+0x1a>
		return 0;
    39b4:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    39b6:	4620      	mov	r0, r4
    39b8:	bd10      	pop	{r4, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    39ba:	2101      	movs	r1, #1
    39bc:	f242 000a 	movw	r0, #8202	; 0x200a
    39c0:	f7fe fe52 	bl	2668 <bt_hci_cmd_create>
	if (!buf) {
    39c4:	4604      	mov	r4, r0
    39c6:	b1f0      	cbz	r0, 3a06 <bt_le_adv_stop+0x66>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    39c8:	2100      	movs	r1, #0
    39ca:	3008      	adds	r0, #8
    39cc:	f007 ff27 	bl	b81e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    39d0:	4621      	mov	r1, r4
    39d2:	2200      	movs	r2, #0
    39d4:	f242 000a 	movw	r0, #8202	; 0x200a
    39d8:	f7fe fe90 	bl	26fc <bt_hci_cmd_send_sync>
	if (err) {
    39dc:	4604      	mov	r4, r0
    39de:	2800      	cmp	r0, #0
    39e0:	d1e9      	bne.n	39b6 <bt_le_adv_stop+0x16>
    39e2:	f06f 0120 	mvn.w	r1, #32
    39e6:	4809      	ldr	r0, [pc, #36]	; (3a0c <bt_le_adv_stop+0x6c>)
    39e8:	f7fe fdb9 	bl	255e <atomic_and>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    39ec:	2007      	movs	r0, #7
    39ee:	f7fe fe29 	bl	2644 <atomic_test_bit.constprop.23>
    39f2:	2800      	cmp	r0, #0
    39f4:	d0de      	beq.n	39b4 <bt_le_adv_stop+0x14>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    39f6:	2009      	movs	r0, #9
    39f8:	f7fe fe24 	bl	2644 <atomic_test_bit.constprop.23>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    39fc:	2800      	cmp	r0, #0
    39fe:	d0d9      	beq.n	39b4 <bt_le_adv_stop+0x14>
			le_set_private_addr();
    3a00:	f7fe ff22 	bl	2848 <le_set_private_addr>
    3a04:	e7d7      	b.n	39b6 <bt_le_adv_stop+0x16>
		return -ENOBUFS;
    3a06:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3a0a:	e7d4      	b.n	39b6 <bt_le_adv_stop+0x16>
    3a0c:	20004ef8 	.word	0x20004ef8

00003a10 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    3a10:	b538      	push	{r3, r4, r5, lr}
    3a12:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    3a14:	4805      	ldr	r0, [pc, #20]	; (3a2c <bt_buf_get_rx+0x1c>)
    3a16:	f007 fe91 	bl	b73c <net_buf_alloc_fixed>
#endif

	if (buf) {
    3a1a:	4604      	mov	r4, r0
    3a1c:	b120      	cbz	r0, 3a28 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3a1e:	2100      	movs	r1, #0
    3a20:	3008      	adds	r0, #8
    3a22:	f007 feaa 	bl	b77a <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    3a26:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    3a28:	4620      	mov	r0, r4
    3a2a:	bd38      	pop	{r3, r4, r5, pc}
    3a2c:	200051f0 	.word	0x200051f0

00003a30 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    3a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3a32:	4606      	mov	r6, r0
	__asm__ volatile(
    3a34:	f04f 0320 	mov.w	r3, #32
    3a38:	f3ef 8211 	mrs	r2, BASEPRI
    3a3c:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3a40:	4b11      	ldr	r3, [pc, #68]	; (3a88 <bt_buf_get_cmd_complete+0x58>)
	bt_dev.sent_cmd = NULL;
    3a42:	2500      	movs	r5, #0
	buf = bt_dev.sent_cmd;
    3a44:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    3a48:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3a4c:	f382 8811 	msr	BASEPRI, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    3a50:	f008 faee 	bl	c030 <_impl_k_current_get>
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);
    3a54:	9400      	str	r4, [sp, #0]
    3a56:	4603      	mov	r3, r0
    3a58:	4a0c      	ldr	r2, [pc, #48]	; (3a8c <bt_buf_get_cmd_complete+0x5c>)
    3a5a:	490d      	ldr	r1, [pc, #52]	; (3a90 <bt_buf_get_cmd_complete+0x60>)
    3a5c:	2007      	movs	r0, #7
    3a5e:	f7fe fc17 	bl	2290 <bt_log>

	if (buf) {
    3a62:	b934      	cbnz	r4, 3a72 <bt_buf_get_cmd_complete+0x42>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3a64:	4631      	mov	r1, r6
    3a66:	2001      	movs	r0, #1
}
    3a68:	b002      	add	sp, #8
    3a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3a6e:	f7ff bfcf 	b.w	3a10 <bt_buf_get_rx>
    3a72:	2301      	movs	r3, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3a74:	f104 0008 	add.w	r0, r4, #8
    3a78:	7523      	strb	r3, [r4, #20]
		buf->len = 0;
    3a7a:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3a7c:	4629      	mov	r1, r5
    3a7e:	f007 fe7c 	bl	b77a <net_buf_simple_reserve>
}
    3a82:	4620      	mov	r0, r4
    3a84:	b002      	add	sp, #8
    3a86:	bd70      	pop	{r4, r5, r6, pc}
    3a88:	20004e88 	.word	0x20004e88
    3a8c:	0000d465 	.word	0x0000d465
    3a90:	0000d47d 	.word	0x0000d47d

00003a94 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    3a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    3a96:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3a98:	1dc3      	adds	r3, r0, #7
{
    3a9a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3a9c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3aa0:	1e50      	subs	r0, r2, #1
{
    3aa2:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3aa4:	b280      	uxth	r0, r0
{
    3aa6:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3aa8:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3aaa:	2100      	movs	r1, #0
    3aac:	2204      	movs	r2, #4
    3aae:	fb06 5000 	mla	r0, r6, r0, r5
    3ab2:	f7fc fdde 	bl	672 <memset>
    3ab6:	3c02      	subs	r4, #2
    3ab8:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    3aba:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3abe:	42bc      	cmp	r4, r7
    3ac0:	d101      	bne.n	3ac6 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    3ac2:	b003      	add	sp, #12
    3ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    3ac6:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    3aca:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    3acc:	2204      	movs	r2, #4
    3ace:	1b80      	subs	r0, r0, r6
    3ad0:	eb0d 0102 	add.w	r1, sp, r2
    3ad4:	4428      	add	r0, r5
    3ad6:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    3ad8:	9301      	str	r3, [sp, #4]
    3ada:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    3adc:	f7fc fd9d 	bl	61a <memcpy>
    3ae0:	e7ed      	b.n	3abe <mem_init+0x2a>

00003ae2 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    3ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    3ae4:	6805      	ldr	r5, [r0, #0]
{
    3ae6:	4606      	mov	r6, r0
	if (*mem_head) {
    3ae8:	b195      	cbz	r5, 3b10 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    3aea:	1deb      	adds	r3, r5, #7
    3aec:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    3af0:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    3af2:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    3af4:	4629      	mov	r1, r5
    3af6:	eb0d 0002 	add.w	r0, sp, r2
    3afa:	f7fc fd8e 	bl	61a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    3afe:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    3b00:	3c01      	subs	r4, #1
    3b02:	b2a4      	uxth	r4, r4
		if (head) {
    3b04:	b11b      	cbz	r3, 3b0e <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    3b06:	1dda      	adds	r2, r3, #7
    3b08:	f022 0203 	bic.w	r2, r2, #3
    3b0c:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    3b0e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    3b10:	4628      	mov	r0, r5
    3b12:	b002      	add	sp, #8
    3b14:	bd70      	pop	{r4, r5, r6, pc}

00003b16 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    3b16:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    3b18:	680c      	ldr	r4, [r1, #0]
{
    3b1a:	4606      	mov	r6, r0
    3b1c:	460d      	mov	r5, r1
	if (*mem_head) {
    3b1e:	b11c      	cbz	r4, 3b28 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    3b20:	1de3      	adds	r3, r4, #7
    3b22:	f023 0303 	bic.w	r3, r3, #3
    3b26:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    3b28:	2204      	movs	r2, #4
    3b2a:	4629      	mov	r1, r5
    3b2c:	4630      	mov	r0, r6
    3b2e:	f7fc fd74 	bl	61a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    3b32:	1df2      	adds	r2, r6, #7
    3b34:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    3b38:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    3b3a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    3b3c:	602e      	str	r6, [r5, #0]
    3b3e:	bd70      	pop	{r4, r5, r6, pc}

00003b40 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    3b40:	fb02 0001 	mla	r0, r2, r1, r0
    3b44:	4770      	bx	lr

00003b46 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    3b46:	1a40      	subs	r0, r0, r1
    3b48:	b280      	uxth	r0, r0
}
    3b4a:	fbb0 f0f2 	udiv	r0, r0, r2
    3b4e:	4770      	bx	lr

00003b50 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    3b50:	b510      	push	{r4, lr}
	src += len;
    3b52:	4411      	add	r1, r2
    3b54:	3801      	subs	r0, #1
	while (len--) {
    3b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3b5a:	3a01      	subs	r2, #1
    3b5c:	b292      	uxth	r2, r2
    3b5e:	429a      	cmp	r2, r3
    3b60:	d100      	bne.n	3b64 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    3b62:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    3b64:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    3b68:	f800 4f01 	strb.w	r4, [r0, #1]!
    3b6c:	e7f5      	b.n	3b5a <mem_rcopy+0xa>

00003b6e <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    3b6e:	6010      	str	r0, [r2, #0]
    3b70:	6008      	str	r0, [r1, #0]

	return link;
}
    3b72:	4770      	bx	lr

00003b74 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    3b74:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    3b76:	6814      	ldr	r4, [r2, #0]
    3b78:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    3b7a:	6814      	ldr	r4, [r2, #0]
    3b7c:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    3b7e:	6010      	str	r0, [r2, #0]

	return link;
}
    3b80:	bd10      	pop	{r4, pc}

00003b82 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    3b82:	4288      	cmp	r0, r1
    3b84:	d003      	beq.n	3b8e <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    3b86:	b11a      	cbz	r2, 3b90 <memq_peek+0xe>
		*mem = head->mem;
    3b88:	6843      	ldr	r3, [r0, #4]
    3b8a:	6013      	str	r3, [r2, #0]
    3b8c:	4770      	bx	lr
		return NULL;
    3b8e:	2000      	movs	r0, #0
	}

	return head;
}
    3b90:	4770      	bx	lr

00003b92 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    3b92:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    3b94:	4283      	cmp	r3, r0
    3b96:	d009      	beq.n	3bac <memq_dequeue+0x1a>
	if (mem) {
    3b98:	b122      	cbz	r2, 3ba4 <memq_dequeue+0x12>
		*mem = head->mem;
    3b9a:	6858      	ldr	r0, [r3, #4]
    3b9c:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    3b9e:	681a      	ldr	r2, [r3, #0]
    3ba0:	600a      	str	r2, [r1, #0]

	return link;
    3ba2:	e001      	b.n	3ba8 <memq_dequeue+0x16>
	if (!link) {
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d1fa      	bne.n	3b9e <memq_dequeue+0xc>
}
    3ba8:	4618      	mov	r0, r3
    3baa:	4770      	bx	lr
		return NULL;
    3bac:	2300      	movs	r3, #0
    3bae:	e7fb      	b.n	3ba8 <memq_dequeue+0x16>

00003bb0 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    3bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    3bb4:	4f11      	ldr	r7, [pc, #68]	; (3bfc <mayfly_init+0x4c>)
    3bb6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 3c00 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    3bba:	2604      	movs	r6, #4
	while (callee_id--) {
    3bbc:	3e01      	subs	r6, #1
    3bbe:	b2f6      	uxtb	r6, r6
    3bc0:	2eff      	cmp	r6, #255	; 0xff
    3bc2:	d019      	beq.n	3bf8 <mayfly_init+0x48>
    3bc4:	b233      	sxth	r3, r6
    3bc6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    3bca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3bce:	011d      	lsls	r5, r3, #4
    3bd0:	2404      	movs	r4, #4
    3bd2:	f04f 0a0c 	mov.w	sl, #12
    3bd6:	e00a      	b.n	3bee <mayfly_init+0x3e>
    3bd8:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    3bdc:	1d0a      	adds	r2, r1, #4
    3bde:	eb04 0008 	add.w	r0, r4, r8
    3be2:	443a      	add	r2, r7
    3be4:	4439      	add	r1, r7
    3be6:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3bea:	f7ff ffc0 	bl	3b6e <memq_init>
		while (caller_id--) {
    3bee:	3c01      	subs	r4, #1
    3bf0:	b2e4      	uxtb	r4, r4
    3bf2:	2cff      	cmp	r4, #255	; 0xff
    3bf4:	d1f0      	bne.n	3bd8 <mayfly_init+0x28>
    3bf6:	e7e1      	b.n	3bbc <mayfly_init+0xc>
    3bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3bfc:	200008d0 	.word	0x200008d0
    3c00:	20000850 	.word	0x20000850

00003c04 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    3c04:	b4f0      	push	{r4, r5, r6, r7}
    3c06:	4b12      	ldr	r3, [pc, #72]	; (3c50 <mayfly_enable+0x4c>)
    3c08:	4605      	mov	r5, r0
    3c0a:	460f      	mov	r7, r1
    3c0c:	260c      	movs	r6, #12
    3c0e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    3c10:	b172      	cbz	r2, 3c30 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    3c12:	4361      	muls	r1, r4
    3c14:	fb06 1400 	mla	r4, r6, r0, r1
    3c18:	4423      	add	r3, r4
    3c1a:	7a59      	ldrb	r1, [r3, #9]
    3c1c:	7a18      	ldrb	r0, [r3, #8]
    3c1e:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    3c20:	bf04      	itt	eq
    3c22:	3101      	addeq	r1, #1
    3c24:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    3c26:	4628      	mov	r0, r5
    3c28:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    3c2a:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    3c2c:	f007 bc22 	b.w	b474 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    3c30:	434c      	muls	r4, r1
    3c32:	fb06 4400 	mla	r4, r6, r0, r4
    3c36:	4423      	add	r3, r4
    3c38:	7a9c      	ldrb	r4, [r3, #10]
    3c3a:	7ada      	ldrb	r2, [r3, #11]
    3c3c:	42a2      	cmp	r2, r4
    3c3e:	d104      	bne.n	3c4a <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    3c40:	3201      	adds	r2, #1
    3c42:	729a      	strb	r2, [r3, #10]
}
    3c44:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    3c46:	f007 bc5d 	b.w	b504 <mayfly_pend>
}
    3c4a:	bcf0      	pop	{r4, r5, r6, r7}
    3c4c:	4770      	bx	lr
    3c4e:	bf00      	nop
    3c50:	200008d0 	.word	0x200008d0

00003c54 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    3c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c56:	4605      	mov	r5, r0
    3c58:	460e      	mov	r6, r1
    3c5a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    3c5c:	b18a      	cbz	r2, 3c82 <mayfly_enqueue+0x2e>
    3c5e:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    3c60:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    3c62:	7820      	ldrb	r0, [r4, #0]
    3c64:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    3c66:	f010 0703 	ands.w	r7, r0, #3
    3c6a:	d029      	beq.n	3cc0 <mayfly_enqueue+0x6c>
		if (chain) {
    3c6c:	b303      	cbz	r3, 3cb0 <mayfly_enqueue+0x5c>
			if (state != 1) {
    3c6e:	2f01      	cmp	r7, #1
    3c70:	d039      	beq.n	3ce6 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    3c72:	3201      	adds	r2, #1
    3c74:	b2d2      	uxtb	r2, r2
    3c76:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    3c78:	4631      	mov	r1, r6
    3c7a:	4628      	mov	r0, r5
    3c7c:	f007 fc42 	bl	b504 <mayfly_pend>
    3c80:	e01c      	b.n	3cbc <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3c82:	f007 fc2d 	bl	b4e0 <mayfly_prio_is_equal>
    3c86:	2800      	cmp	r0, #0
    3c88:	d0e9      	beq.n	3c5e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    3c8a:	4631      	mov	r1, r6
    3c8c:	4628      	mov	r0, r5
    3c8e:	f007 fc0d 	bl	b4ac <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    3c92:	2800      	cmp	r0, #0
    3c94:	d0e3      	beq.n	3c5e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    3c96:	2330      	movs	r3, #48	; 0x30
    3c98:	220c      	movs	r2, #12
    3c9a:	4373      	muls	r3, r6
    3c9c:	fb02 3305 	mla	r3, r2, r5, r3
    3ca0:	4a12      	ldr	r2, [pc, #72]	; (3cec <mayfly_enqueue+0x98>)
    3ca2:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    3ca4:	7a93      	ldrb	r3, [r2, #10]
    3ca6:	7ad2      	ldrb	r2, [r2, #11]
    3ca8:	1a9b      	subs	r3, r3, r2
    3caa:	bf18      	it	ne
    3cac:	2301      	movne	r3, #1
    3cae:	e7d7      	b.n	3c60 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    3cb0:	3202      	adds	r2, #2
    3cb2:	b2d2      	uxtb	r2, r2
    3cb4:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    3cb6:	68e3      	ldr	r3, [r4, #12]
    3cb8:	68a0      	ldr	r0, [r4, #8]
    3cba:	4798      	blx	r3
		return 0;
    3cbc:	2000      	movs	r0, #0
    3cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d0f8      	beq.n	3cb6 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    3cc4:	3201      	adds	r2, #1
    3cc6:	b2d2      	uxtb	r2, r2
    3cc8:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    3cca:	2304      	movs	r3, #4
    3ccc:	2230      	movs	r2, #48	; 0x30
    3cce:	fb12 3206 	smlabb	r2, r2, r6, r3
    3cd2:	230c      	movs	r3, #12
    3cd4:	fb13 2305 	smlabb	r3, r3, r5, r2
    3cd8:	4a04      	ldr	r2, [pc, #16]	; (3cec <mayfly_enqueue+0x98>)
    3cda:	6860      	ldr	r0, [r4, #4]
    3cdc:	441a      	add	r2, r3
    3cde:	4621      	mov	r1, r4
    3ce0:	f7ff ff48 	bl	3b74 <memq_enqueue>
    3ce4:	e7c8      	b.n	3c78 <mayfly_enqueue+0x24>
			return 1;
    3ce6:	4638      	mov	r0, r7

	return 0;
}
    3ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3cea:	bf00      	nop
    3cec:	200008d0 	.word	0x200008d0

00003cf0 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    3cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cf4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3cf8:	b089      	sub	sp, #36	; 0x24
    3cfa:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    3cfc:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    3d00:	4e43      	ldr	r6, [pc, #268]	; (3e10 <mayfly_run+0x120>)
    3d02:	9304      	str	r3, [sp, #16]
{
    3d04:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    3d06:	2404      	movs	r4, #4
	u8_t disable = 0;
    3d08:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    3d0c:	3c01      	subs	r4, #1
    3d0e:	b2e4      	uxtb	r4, r4
    3d10:	2cff      	cmp	r4, #255	; 0xff
    3d12:	d10b      	bne.n	3d2c <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    3d14:	9b01      	ldr	r3, [sp, #4]
    3d16:	2b00      	cmp	r3, #0
    3d18:	d076      	beq.n	3e08 <mayfly_run+0x118>
    3d1a:	f1b8 0f00 	cmp.w	r8, #0
    3d1e:	d173      	bne.n	3e08 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    3d20:	4642      	mov	r2, r8
    3d22:	4629      	mov	r1, r5
    3d24:	4628      	mov	r0, r5
    3d26:	f007 fba5 	bl	b474 <mayfly_enable_cb>
    3d2a:	e06d      	b.n	3e08 <mayfly_run+0x118>
		struct mayfly *m = 0;
    3d2c:	f10d 0b20 	add.w	fp, sp, #32
    3d30:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    3d32:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    3d34:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    3d38:	f04f 0930 	mov.w	r9, #48	; 0x30
    3d3c:	fb07 f304 	mul.w	r3, r7, r4
    3d40:	fb09 3005 	mla	r0, r9, r5, r3
    3d44:	1831      	adds	r1, r6, r0
    3d46:	465a      	mov	r2, fp
    3d48:	6849      	ldr	r1, [r1, #4]
    3d4a:	5830      	ldr	r0, [r6, r0]
    3d4c:	9302      	str	r3, [sp, #8]
    3d4e:	f7ff ff18 	bl	3b82 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    3d52:	9b04      	ldr	r3, [sp, #16]
    3d54:	fb17 3704 	smlabb	r7, r7, r4, r3
    3d58:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    3d5a:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    3d5c:	9303      	str	r3, [sp, #12]
		while (link) {
    3d5e:	f1ba 0f00 	cmp.w	sl, #0
    3d62:	d119      	bne.n	3d98 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    3d64:	2230      	movs	r2, #48	; 0x30
    3d66:	230c      	movs	r3, #12
    3d68:	436a      	muls	r2, r5
    3d6a:	fb03 2204 	mla	r2, r3, r4, r2
    3d6e:	4432      	add	r2, r6
    3d70:	7a91      	ldrb	r1, [r2, #10]
    3d72:	7ad0      	ldrb	r0, [r2, #11]
    3d74:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    3d76:	bf1e      	ittt	ne
    3d78:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    3d7a:	2201      	movne	r2, #1
    3d7c:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    3d7e:	2230      	movs	r2, #48	; 0x30
    3d80:	436a      	muls	r2, r5
    3d82:	fb03 2304 	mla	r3, r3, r4, r2
    3d86:	4433      	add	r3, r6
    3d88:	7a1a      	ldrb	r2, [r3, #8]
    3d8a:	7a59      	ldrb	r1, [r3, #9]
    3d8c:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    3d8e:	bf1c      	itt	ne
    3d90:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    3d92:	f04f 0801 	movne.w	r8, #1
    3d96:	e7b9      	b.n	3d0c <mayfly_run+0x1c>
			req = m->_req;
    3d98:	9b07      	ldr	r3, [sp, #28]
    3d9a:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    3d9c:	785a      	ldrb	r2, [r3, #1]
    3d9e:	1abf      	subs	r7, r7, r2
    3da0:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    3da4:	2f01      	cmp	r7, #1
    3da6:	d104      	bne.n	3db2 <mayfly_run+0xc2>
				m->_ack--;
    3da8:	3a01      	subs	r2, #1
    3daa:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    3dac:	6898      	ldr	r0, [r3, #8]
    3dae:	68da      	ldr	r2, [r3, #12]
    3db0:	4790      	blx	r2
			req = m->_req;
    3db2:	9a07      	ldr	r2, [sp, #28]
    3db4:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    3db6:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    3db8:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    3dba:	1a9a      	subs	r2, r3, r2
    3dbc:	f002 0203 	and.w	r2, r2, #3
    3dc0:	2a01      	cmp	r2, #1
    3dc2:	9305      	str	r3, [sp, #20]
    3dc4:	d00d      	beq.n	3de2 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    3dc6:	9b02      	ldr	r3, [sp, #8]
    3dc8:	9903      	ldr	r1, [sp, #12]
    3dca:	fb09 3005 	mla	r0, r9, r5, r3
    3dce:	4430      	add	r0, r6
    3dd0:	2200      	movs	r2, #0
    3dd2:	6840      	ldr	r0, [r0, #4]
    3dd4:	f7ff fedd 	bl	3b92 <memq_dequeue>
				m->_link = link;
    3dd8:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    3dda:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    3ddc:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    3de0:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    3de2:	9b02      	ldr	r3, [sp, #8]
    3de4:	fb09 3305 	mla	r3, r9, r5, r3
    3de8:	18f1      	adds	r1, r6, r3
    3dea:	465a      	mov	r2, fp
    3dec:	6849      	ldr	r1, [r1, #4]
    3dee:	58f0      	ldr	r0, [r6, r3]
    3df0:	f7ff fec7 	bl	3b82 <memq_peek>
			if (state == 1) {
    3df4:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    3df6:	4682      	mov	sl, r0
			if (state == 1) {
    3df8:	d1b1      	bne.n	3d5e <mayfly_run+0x6e>
				if (caller_id || link) {
    3dfa:	b90c      	cbnz	r4, 3e00 <mayfly_run+0x110>
    3dfc:	2800      	cmp	r0, #0
    3dfe:	d0b1      	beq.n	3d64 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    3e00:	4629      	mov	r1, r5
    3e02:	4628      	mov	r0, r5
    3e04:	f007 fb7e 	bl	b504 <mayfly_pend>
	}
}
    3e08:	b009      	add	sp, #36	; 0x24
    3e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e0e:	bf00      	nop
    3e10:	200008d0 	.word	0x200008d0

00003e14 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    3e14:	b510      	push	{r4, lr}
    3e16:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    3e18:	2000      	movs	r0, #0

	while (octets_len--) {
    3e1a:	3901      	subs	r1, #1
    3e1c:	b2c9      	uxtb	r1, r1
    3e1e:	29ff      	cmp	r1, #255	; 0xff
    3e20:	d100      	bne.n	3e24 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    3e22:	bd10      	pop	{r4, pc}
		bite = *octets;
    3e24:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d0f6      	beq.n	3e1a <util_ones_count_get+0x6>
			bite &= (bite - 1);
    3e2c:	1e5c      	subs	r4, r3, #1
			one_count++;
    3e2e:	3001      	adds	r0, #1
			bite &= (bite - 1);
    3e30:	4023      	ands	r3, r4
			one_count++;
    3e32:	b2c0      	uxtb	r0, r0
    3e34:	e7f8      	b.n	3e28 <util_ones_count_get+0x14>

00003e36 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    3e36:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    3e38:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    3e3a:	6805      	ldr	r5, [r0, #0]
	current = previous;
    3e3c:	461a      	mov	r2, r3
	total = 0;
    3e3e:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    3e40:	2aff      	cmp	r2, #255	; 0xff
    3e42:	d101      	bne.n	3e48 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    3e44:	2000      	movs	r0, #0
    3e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    3e48:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    3e4c:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    3e4e:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    3e52:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    3e56:	d004      	beq.n	3e62 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    3e58:	68b3      	ldr	r3, [r6, #8]
    3e5a:	441c      	add	r4, r3
		current = ticker_current->next;
    3e5c:	4613      	mov	r3, r2
    3e5e:	463a      	mov	r2, r7
    3e60:	e7ee      	b.n	3e40 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    3e62:	4293      	cmp	r3, r2
    3e64:	d100      	bne.n	3e68 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    3e66:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    3e68:	b21b      	sxth	r3, r3
    3e6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3e6e:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    3e70:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    3e72:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    3e76:	7833      	ldrb	r3, [r6, #0]
    3e78:	2bff      	cmp	r3, #255	; 0xff
    3e7a:	d006      	beq.n	3e8a <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    3e7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3e80:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    3e84:	689a      	ldr	r2, [r3, #8]
    3e86:	4402      	add	r2, r0
    3e88:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    3e8a:	4420      	add	r0, r4
    3e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003e8e <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    3e8e:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3e90:	1a55      	subs	r5, r2, r1
    3e92:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    3e96:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    3e98:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3e9a:	d109      	bne.n	3eb0 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3e9c:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    3ea0:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    3ea2:	42a2      	cmp	r2, r4
    3ea4:	d90e      	bls.n	3ec4 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    3ea6:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    3ea8:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    3eaa:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    3eac:	6144      	str	r4, [r0, #20]
    3eae:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3eb0:	1a8a      	subs	r2, r1, r2
    3eb2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    3eb6:	4293      	cmp	r3, r2
    3eb8:	d901      	bls.n	3ebe <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    3eba:	1a9a      	subs	r2, r3, r2
    3ebc:	e7f1      	b.n	3ea2 <ticks_to_expire_prep+0x14>
    3ebe:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    3ec0:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    3ec2:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    3ec4:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    3ec6:	2200      	movs	r2, #0
    3ec8:	e7ef      	b.n	3eaa <ticks_to_expire_prep+0x1c>

00003eca <ticker_job_op_cb>:
{
    3eca:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    3ecc:	2200      	movs	r2, #0
    3ece:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    3ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    3ed2:	6259      	str	r1, [r3, #36]	; 0x24
{
    3ed4:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    3ed6:	b10a      	cbz	r2, 3edc <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    3ed8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3eda:	4710      	bx	r2
    3edc:	4770      	bx	lr

00003ede <ticker_worker>:
{
    3ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    3ee2:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    3ee4:	2301      	movs	r3, #1
{
    3ee6:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    3ee8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    3eea:	2d00      	cmp	r5, #0
    3eec:	d14c      	bne.n	3f88 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    3eee:	7f43      	ldrb	r3, [r0, #29]
    3ef0:	2bff      	cmp	r3, #255	; 0xff
    3ef2:	d102      	bne.n	3efa <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    3ef4:	77c5      	strb	r5, [r0, #31]
		return;
    3ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    3efa:	f006 fe63 	bl	abc4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3efe:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    3f00:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    3f02:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3f06:	1bc7      	subs	r7, r0, r7
    3f08:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    3f0c:	2eff      	cmp	r6, #255	; 0xff
    3f0e:	d006      	beq.n	3f1e <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    3f10:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    3f14:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    3f18:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3f1a:	429f      	cmp	r7, r3
    3f1c:	d218      	bcs.n	3f50 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    3f1e:	7aa2      	ldrb	r2, [r4, #10]
    3f20:	7ae3      	ldrb	r3, [r4, #11]
    3f22:	4293      	cmp	r3, r2
    3f24:	d105      	bne.n	3f32 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    3f26:	3301      	adds	r3, #1
    3f28:	b2db      	uxtb	r3, r3
			last = 0;
    3f2a:	2b02      	cmp	r3, #2
    3f2c:	bf08      	it	eq
    3f2e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    3f30:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    3f32:	7ae3      	ldrb	r3, [r4, #11]
    3f34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3f38:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    3f3a:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    3f3c:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3f3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    3f40:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3f42:	46ac      	mov	ip, r5
    3f44:	4623      	mov	r3, r4
    3f46:	2104      	movs	r1, #4
    3f48:	2003      	movs	r0, #3
}
    3f4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3f4e:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    3f50:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    3f52:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3f54:	788a      	ldrb	r2, [r1, #2]
    3f56:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    3f58:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3f5c:	1a9b      	subs	r3, r3, r2
    3f5e:	b2db      	uxtb	r3, r3
    3f60:	2b01      	cmp	r3, #1
    3f62:	d1d3      	bne.n	3f0c <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    3f64:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    3f68:	3a01      	subs	r2, #1
    3f6a:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    3f6c:	f1b9 0f00 	cmp.w	r9, #0
    3f70:	d0cc      	beq.n	3f0c <ticker_worker+0x2e>
					   ticks_expired -
    3f72:	6948      	ldr	r0, [r1, #20]
    3f74:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    3f76:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    3f78:	1a28      	subs	r0, r5, r0
    3f7a:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    3f7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f80:	690b      	ldr	r3, [r1, #16]
    3f82:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3f84:	47c8      	blx	r9
    3f86:	e7c1      	b.n	3f0c <ticker_worker+0x2e>
    3f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00003f8c <ticker_job>:
{
    3f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    3f90:	7fc2      	ldrb	r2, [r0, #31]
{
    3f92:	b093      	sub	sp, #76	; 0x4c
    3f94:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    3f96:	2a00      	cmp	r2, #0
    3f98:	f040 83ba 	bne.w	4710 <ticker_job+0x784>
	ticks_previous = instance->ticks_current;
    3f9c:	6943      	ldr	r3, [r0, #20]
    3f9e:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    3fa0:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3fa2:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    3fa4:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3fa6:	7ac0      	ldrb	r0, [r0, #11]
    3fa8:	4298      	cmp	r0, r3
    3faa:	f000 808f 	beq.w	40cc <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    3fae:	440b      	add	r3, r1
    3fb0:	b2db      	uxtb	r3, r3
			first = 0;
    3fb2:	2b02      	cmp	r3, #2
    3fb4:	bf08      	it	eq
    3fb6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    3fb8:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    3fbc:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    3fc0:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    3fc2:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    3fc6:	9b05      	ldr	r3, [sp, #20]
    3fc8:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    3fca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3fce:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    3fd2:	f89b 301d 	ldrb.w	r3, [fp, #29]
    3fd6:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    3fd8:	f8db 3000 	ldr.w	r3, [fp]
    3fdc:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    3fde:	f8db 3004 	ldr.w	r3, [fp, #4]
    3fe2:	930b      	str	r3, [sp, #44]	; 0x2c
    3fe4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    3fe8:	3b01      	subs	r3, #1
    3fea:	b2db      	uxtb	r3, r3
    3fec:	9302      	str	r3, [sp, #8]
	pending = 0;
    3fee:	2300      	movs	r3, #0
    3ff0:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    3ff2:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    3ff6:	9b02      	ldr	r3, [sp, #8]
    3ff8:	2bff      	cmp	r3, #255	; 0xff
    3ffa:	d16a      	bne.n	40d2 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    3ffc:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    4000:	9a03      	ldr	r2, [sp, #12]
    4002:	1a9b      	subs	r3, r3, r2
    4004:	bf18      	it	ne
    4006:	2301      	movne	r3, #1
    4008:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    400a:	9b01      	ldr	r3, [sp, #4]
    400c:	b1e3      	cbz	r3, 4048 <ticker_job+0xbc>
	node = &instance->node[0];
    400e:	f8db 3000 	ldr.w	r3, [fp]
    4012:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    4014:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    4018:	f89b 601d 	ldrb.w	r6, [fp, #29]
    401c:	2eff      	cmp	r6, #255	; 0xff
    401e:	d00c      	beq.n	403a <ticker_job+0xae>
		ticker = &node[id_expired];
    4020:	b237      	sxth	r7, r6
    4022:	9b04      	ldr	r3, [sp, #16]
    4024:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    4028:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    402c:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    402e:	4545      	cmp	r5, r8
    4030:	f240 8136 	bls.w	42a0 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    4034:	eba5 0508 	sub.w	r5, r5, r8
    4038:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    403a:	9b02      	ldr	r3, [sp, #8]
    403c:	9a01      	ldr	r2, [sp, #4]
    403e:	9903      	ldr	r1, [sp, #12]
    4040:	42b1      	cmp	r1, r6
    4042:	bf18      	it	ne
    4044:	4613      	movne	r3, r2
    4046:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    4048:	f8db 3000 	ldr.w	r3, [fp]
    404c:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    404e:	f8db 3004 	ldr.w	r3, [fp, #4]
    4052:	9310      	str	r3, [sp, #64]	; 0x40
    4054:	f89b 3009 	ldrb.w	r3, [fp, #9]
    4058:	3b01      	subs	r3, #1
    405a:	b2db      	uxtb	r3, r3
    405c:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    405e:	9b01      	ldr	r3, [sp, #4]
    4060:	2bff      	cmp	r3, #255	; 0xff
    4062:	f040 8170 	bne.w	4346 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    4066:	f89b 301d 	ldrb.w	r3, [fp, #29]
    406a:	9a03      	ldr	r2, [sp, #12]
    406c:	4293      	cmp	r3, r2
	if (!pending) {
    406e:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    4070:	f040 8345 	bne.w	46fe <ticker_job+0x772>
	if (!pending) {
    4074:	b95b      	cbnz	r3, 408e <ticker_job+0x102>
    4076:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    407a:	f8db 3004 	ldr.w	r3, [fp, #4]
    407e:	9301      	str	r3, [sp, #4]
    4080:	3c01      	subs	r4, #1
    4082:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    4084:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    4088:	2cff      	cmp	r4, #255	; 0xff
    408a:	f040 82a0 	bne.w	45ce <ticker_job+0x642>
	instance->job_guard = 0;
    408e:	2300      	movs	r3, #0
    4090:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    4094:	9b02      	ldr	r3, [sp, #8]
    4096:	b14b      	cbz	r3, 40ac <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    4098:	f89b 301d 	ldrb.w	r3, [fp, #29]
    409c:	2bff      	cmp	r3, #255	; 0xff
    409e:	f040 82e9 	bne.w	4674 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    40a2:	f006 fd6d 	bl	ab80 <cntr_stop>
    40a6:	b908      	cbnz	r0, 40ac <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    40a8:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    40ac:	f89b 301f 	ldrb.w	r3, [fp, #31]
    40b0:	2b00      	cmp	r3, #0
    40b2:	f000 832d 	beq.w	4710 <ticker_job+0x784>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    40b6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    40ba:	465b      	mov	r3, fp
    40bc:	2201      	movs	r2, #1
    40be:	2103      	movs	r1, #3
    40c0:	2004      	movs	r0, #4
    40c2:	46a4      	mov	ip, r4
}
    40c4:	b013      	add	sp, #76	; 0x4c
    40c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    40ca:	4760      	bx	ip
		flag_elapsed = 0;
    40cc:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    40ce:	4690      	mov	r8, r2
    40d0:	e77f      	b.n	3fd2 <ticker_job+0x46>
		user = &users[count_user];
    40d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40d4:	9a02      	ldr	r2, [sp, #8]
    40d6:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    40de:	78f9      	ldrb	r1, [r7, #3]
    40e0:	78be      	ldrb	r6, [r7, #2]
    40e2:	428e      	cmp	r6, r1
    40e4:	f000 80d7 	beq.w	4296 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    40e8:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    40ea:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    40ec:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    40f0:	0112      	lsls	r2, r2, #4
    40f2:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    40f4:	1c73      	adds	r3, r6, #1
    40f6:	b2db      	uxtb	r3, r3
				middle = 0;
    40f8:	4298      	cmp	r0, r3
    40fa:	bf08      	it	eq
    40fc:	2300      	moveq	r3, #0
			user->middle = middle;
    40fe:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    4100:	9b06      	ldr	r3, [sp, #24]
    4102:	5c9a      	ldrb	r2, [r3, r2]
    4104:	2a03      	cmp	r2, #3
    4106:	d9eb      	bls.n	40e0 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    4108:	2a05      	cmp	r2, #5
    410a:	d817      	bhi.n	413c <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    410c:	7869      	ldrb	r1, [r5, #1]
    410e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    4112:	930a      	str	r3, [sp, #40]	; 0x28
    4114:	980a      	ldr	r0, [sp, #40]	; 0x28
    4116:	9b04      	ldr	r3, [sp, #16]
    4118:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    411c:	7863      	ldrb	r3, [r4, #1]
    411e:	78a0      	ldrb	r0, [r4, #2]
    4120:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    4122:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4126:	d009      	beq.n	413c <ticker_job+0x1b0>
			    (state == 0) ||
    4128:	2a04      	cmp	r2, #4
    412a:	d10c      	bne.n	4146 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    412c:	686a      	ldr	r2, [r5, #4]
    412e:	b952      	cbnz	r2, 4146 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    4130:	68aa      	ldr	r2, [r5, #8]
    4132:	b942      	cbnz	r2, 4146 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    4134:	68ea      	ldr	r2, [r5, #12]
    4136:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    413a:	d104      	bne.n	4146 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    413c:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    413e:	4628      	mov	r0, r5
    4140:	f7ff fec3 	bl	3eca <ticker_job_op_cb>
    4144:	e7cb      	b.n	40de <ticker_job+0x152>
			if (state == 1) {
    4146:	2b01      	cmp	r3, #1
    4148:	f040 809b 	bne.w	4282 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    414c:	4658      	mov	r0, fp
    414e:	f7ff fe72 	bl	3e36 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4152:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4154:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    4156:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    4158:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    415a:	f040 8084 	bne.w	4266 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    415e:	f8db 3014 	ldr.w	r3, [fp, #20]
    4162:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    4164:	f006 fd2e 	bl	abc4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4168:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    416a:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    416c:	1ac3      	subs	r3, r0, r3
    416e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    4172:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    4174:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4176:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    4178:	bf9e      	ittt	ls
    417a:	6962      	ldrls	r2, [r4, #20]
    417c:	1b92      	subls	r2, r2, r6
    417e:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    4180:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    4182:	bf96      	itet	ls
    4184:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    4186:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    4188:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    418a:	b18a      	cbz	r2, 41b0 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    418c:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    418e:	b179      	cbz	r1, 41b0 <ticker_job+0x224>
		user_op->params.update.lazy--;
    4190:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    4194:	fa1f fe8e 	uxth.w	lr, lr
    4198:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    419c:	429a      	cmp	r2, r3
    419e:	d32b      	bcc.n	41f8 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    41a0:	f8df 9324 	ldr.w	r9, [pc, #804]	; 44c8 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    41a4:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    41a8:	45e6      	cmp	lr, ip
    41aa:	d847      	bhi.n	423c <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    41ac:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    41b0:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    41b2:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    41b4:	4413      	add	r3, r2
    41b6:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    41b8:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    41ba:	6963      	ldr	r3, [r4, #20]
    41bc:	4413      	add	r3, r2
    41be:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    41c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    41c2:	4620      	mov	r0, r4
    41c4:	f7ff fe63 	bl	3e8e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    41c8:	69a2      	ldr	r2, [r4, #24]
    41ca:	892b      	ldrh	r3, [r5, #8]
    41cc:	4413      	add	r3, r2
    41ce:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    41d0:	896a      	ldrh	r2, [r5, #10]
    41d2:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    41d4:	bf8c      	ite	hi
    41d6:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    41d8:	2300      	movls	r3, #0
    41da:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    41dc:	7bab      	ldrb	r3, [r5, #14]
    41de:	b103      	cbz	r3, 41e2 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    41e0:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    41e2:	9b04      	ldr	r3, [sp, #16]
    41e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    41e6:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    41ea:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    41ec:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    41f0:	3301      	adds	r3, #1
    41f2:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    41f4:	2100      	movs	r1, #0
    41f6:	e7a2      	b.n	413e <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    41f8:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    41fc:	45e6      	cmp	lr, ip
    41fe:	d2cf      	bcs.n	41a0 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    4200:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4202:	4eaf      	ldr	r6, [pc, #700]	; (44c0 <ticker_job+0x534>)
    4204:	48af      	ldr	r0, [pc, #700]	; (44c4 <ticker_job+0x538>)
    4206:	198e      	adds	r6, r1, r6
    4208:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    420a:	bf81      	itttt	hi
    420c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    4210:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    4214:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    4218:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    421a:	6a66      	ldr	r6, [r4, #36]	; 0x24
    421c:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    421e:	bf8c      	ite	hi
    4220:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    4224:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    4228:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    422a:	4491      	add	r9, r2
			ticker->lazy_current--;
    422c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    4230:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    4232:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    4236:	f8a4 c01e 	strh.w	ip, [r4, #30]
    423a:	e7af      	b.n	419c <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    423c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    423e:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    4240:	48a0      	ldr	r0, [pc, #640]	; (44c4 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    4242:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    4244:	499e      	ldr	r1, [pc, #632]	; (44c0 <ticker_job+0x534>)
    4246:	1871      	adds	r1, r6, r1
    4248:	4281      	cmp	r1, r0
	return 0;
    424a:	bf8e      	itee	hi
    424c:	2100      	movhi	r1, #0
		return 1;
    424e:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    4250:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    4252:	4411      	add	r1, r2
			ticker->lazy_current++;
    4254:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    4258:	bf8c      	ite	hi
    425a:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    425c:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    425e:	440b      	add	r3, r1
			ticker->lazy_current++;
    4260:	f8a4 c01e 	strh.w	ip, [r4, #30]
    4264:	e79e      	b.n	41a4 <ticker_job+0x218>
		ticker->req = ticker->ack;
    4266:	78a3      	ldrb	r3, [r4, #2]
    4268:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    426a:	786b      	ldrb	r3, [r5, #1]
    426c:	f89b 201c 	ldrb.w	r2, [fp, #28]
    4270:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    4272:	bf01      	itttt	eq
    4274:	23ff      	moveq	r3, #255	; 0xff
    4276:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    427a:	2300      	moveq	r3, #0
    427c:	f8cb 3018 	streq.w	r3, [fp, #24]
    4280:	e7b8      	b.n	41f4 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    4282:	2104      	movs	r1, #4
    4284:	465b      	mov	r3, fp
    4286:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    428a:	2201      	movs	r2, #1
    428c:	4608      	mov	r0, r1
    428e:	47a0      	blx	r4
				pending = 1;
    4290:	2301      	movs	r3, #1
				user->middle = prev;
    4292:	70be      	strb	r6, [r7, #2]
				pending = 1;
    4294:	9307      	str	r3, [sp, #28]
    4296:	9b02      	ldr	r3, [sp, #8]
    4298:	3b01      	subs	r3, #1
    429a:	b2db      	uxtb	r3, r3
    429c:	9302      	str	r3, [sp, #8]
    429e:	e6aa      	b.n	3ff6 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    42a0:	f8db 3018 	ldr.w	r3, [fp, #24]
    42a4:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    42a6:	bf29      	itett	cs
    42a8:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    42aa:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    42ac:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    42b0:	2300      	movcs	r3, #0
    42b2:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    42b6:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    42b8:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    42ba:	b11b      	cbz	r3, 42c4 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    42bc:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    42c0:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    42c4:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    42c6:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    42c8:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    42ca:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    42ce:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    42d2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    42d6:	f1be 0f00 	cmp.w	lr, #0
    42da:	d030      	beq.n	433e <ticker_job+0x3b2>
    42dc:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    42de:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 44c4 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    42e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    42e4:	6a21      	ldr	r1, [r4, #32]
    42e6:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    42e8:	4975      	ldr	r1, [pc, #468]	; (44c0 <ticker_job+0x534>)
    42ea:	1859      	adds	r1, r3, r1
    42ec:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    42ee:	bf9f      	itttt	ls
    42f0:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    42f4:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    42f8:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    42fc:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    42fe:	bf92      	itee	ls
    4300:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    4302:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    4304:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    4306:	4473      	add	r3, lr
			while (count--) {
    4308:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    430c:	441a      	add	r2, r3
			while (count--) {
    430e:	d2e8      	bcs.n	42e2 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    4310:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    4312:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    4314:	f8db 1014 	ldr.w	r1, [fp, #20]
    4318:	eb03 0209 	add.w	r2, r3, r9
    431c:	4620      	mov	r0, r4
    431e:	f7ff fdb6 	bl	3e8e <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    4322:	8ba3      	ldrh	r3, [r4, #28]
    4324:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    4326:	2300      	movs	r3, #0
    4328:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    432a:	9b04      	ldr	r3, [sp, #16]
    432c:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    4330:	7863      	ldrb	r3, [r4, #1]
    4332:	3301      	adds	r3, #1
    4334:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    4336:	eba8 0805 	sub.w	r8, r8, r5
    433a:	46b2      	mov	sl, r6
    433c:	e66c      	b.n	4018 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    433e:	78a3      	ldrb	r3, [r4, #2]
    4340:	7063      	strb	r3, [r4, #1]
    4342:	4656      	mov	r6, sl
    4344:	e7f7      	b.n	4336 <ticker_job+0x3aa>
		user = &users[count_user];
    4346:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4348:	9a01      	ldr	r2, [sp, #4]
    434a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    434e:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    4350:	685b      	ldr	r3, [r3, #4]
    4352:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    4354:	9b04      	ldr	r3, [sp, #16]
    4356:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    435a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    435e:	f000 808e 	beq.w	447e <ticker_job+0x4f2>
				ticker = &node[id_insert];
    4362:	fa0f f38a 	sxth.w	r3, sl
    4366:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    436a:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    436c:	46d0      	mov	r8, sl
    436e:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    4372:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    4376:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    4378:	f8db 3000 	ldr.w	r3, [fp]
    437c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    437e:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    4380:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    4382:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    4384:	8be3      	ldrh	r3, [r4, #30]
    4386:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    4388:	bf86      	itte	hi
    438a:	1a9b      	subhi	r3, r3, r2
    438c:	b29b      	uxthhi	r3, r3
		skip = 0;
    438e:	2300      	movls	r3, #0
    4390:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    4392:	fa0f f388 	sxth.w	r3, r8
    4396:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    439a:	00db      	lsls	r3, r3, #3
    439c:	9311      	str	r3, [sp, #68]	; 0x44
    439e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    43a0:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    43a4:	f8db 0018 	ldr.w	r0, [fp, #24]
    43a8:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    43aa:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    43ae:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    43b0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    43b4:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    43b8:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    43ba:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    43bc:	2bff      	cmp	r3, #255	; 0xff
    43be:	d007      	beq.n	43d0 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    43c0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    43c4:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    43c8:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    43ca:	4281      	cmp	r1, r0
    43cc:	f200 80a9 	bhi.w	4522 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    43d0:	f8de 0018 	ldr.w	r0, [lr, #24]
    43d4:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    43d6:	eb01 0c00 	add.w	ip, r1, r0
    43da:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    43dc:	2eff      	cmp	r6, #255	; 0xff
    43de:	f040 80ae 	bne.w	453e <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    43e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    43e4:	b130      	cbz	r0, 43f4 <ticker_job+0x468>
    43e6:	9805      	ldr	r0, [sp, #20]
    43e8:	4281      	cmp	r1, r0
    43ea:	f0c0 80bf 	bcc.w	456c <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    43ee:	2eff      	cmp	r6, #255	; 0xff
    43f0:	f040 818a 	bne.w	4708 <ticker_job+0x77c>
		if (previous == current) {
    43f4:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    43f6:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    43fa:	4283      	cmp	r3, r0
			node[previous].next = id;
    43fc:	bf18      	it	ne
    43fe:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    4402:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    4406:	bf16      	itet	ne
    4408:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    440c:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    4410:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    4414:	2bff      	cmp	r3, #255	; 0xff
    4416:	d006      	beq.n	4426 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    4418:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    441c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4420:	689a      	ldr	r2, [r3, #8]
    4422:	1a51      	subs	r1, r2, r1
    4424:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    4426:	78a3      	ldrb	r3, [r4, #2]
    4428:	3301      	adds	r3, #1
    442a:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    442c:	2100      	movs	r1, #0
			if (user_op) {
    442e:	2d00      	cmp	r5, #0
    4430:	d093      	beq.n	435a <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    4432:	4628      	mov	r0, r5
    4434:	f7ff fd49 	bl	3eca <ticker_job_op_cb>
    4438:	e78f      	b.n	435a <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    443a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    443e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4440:	011b      	lsls	r3, r3, #4
    4442:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    4444:	f109 0201 	add.w	r2, r9, #1
    4448:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    444c:	9a04      	ldr	r2, [sp, #16]
    444e:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    4450:	454a      	cmp	r2, r9
    4452:	bf08      	it	eq
    4454:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    4458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    445a:	5cd3      	ldrb	r3, [r2, r3]
    445c:	2b03      	cmp	r3, #3
    445e:	d10e      	bne.n	447e <ticker_job+0x4f2>
				id_insert = user_op->id;
    4460:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    4464:	9b08      	ldr	r3, [sp, #32]
    4466:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    446a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    446e:	7862      	ldrb	r2, [r4, #1]
    4470:	78a3      	ldrb	r3, [r4, #2]
    4472:	429a      	cmp	r2, r3
    4474:	d009      	beq.n	448a <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    4476:	2101      	movs	r1, #1
    4478:	4628      	mov	r0, r5
    447a:	f7ff fd26 	bl	3eca <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    447e:	9b04      	ldr	r3, [sp, #16]
    4480:	789b      	ldrb	r3, [r3, #2]
    4482:	454b      	cmp	r3, r9
    4484:	d1d9      	bne.n	443a <ticker_job+0x4ae>
    4486:	9b01      	ldr	r3, [sp, #4]
    4488:	e5e6      	b.n	4058 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    448a:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    448c:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    4490:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    4492:	692b      	ldr	r3, [r5, #16]
    4494:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    4496:	8aab      	ldrh	r3, [r5, #20]
    4498:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    449a:	69ab      	ldr	r3, [r5, #24]
    449c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    449e:	69eb      	ldr	r3, [r5, #28]
    44a0:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    44a2:	6a2b      	ldr	r3, [r5, #32]
    44a4:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    44a6:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    44a8:	68ab      	ldr	r3, [r5, #8]
    44aa:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    44ac:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    44ae:	686a      	ldr	r2, [r5, #4]
    44b0:	4620      	mov	r0, r4
    44b2:	f7ff fcec 	bl	3e8e <ticks_to_expire_prep>
	ticker->force = 1;
    44b6:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    44b8:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    44ba:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    44bc:	70e3      	strb	r3, [r4, #3]
    44be:	e75b      	b.n	4378 <ticker_job+0x3ec>
    44c0:	ff172b5a 	.word	0xff172b5a
    44c4:	7f172b59 	.word	0x7f172b59
    44c8:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    44cc:	6860      	ldr	r0, [r4, #4]
    44ce:	2800      	cmp	r0, #0
    44d0:	d07b      	beq.n	45ca <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    44d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    44d4:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    44d6:	4b90      	ldr	r3, [pc, #576]	; (4718 <ticker_job+0x78c>)
	ticker->remainder_current += ticker->remainder_periodic;
    44d8:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    44da:	4990      	ldr	r1, [pc, #576]	; (471c <ticker_job+0x790>)
    44dc:	18d3      	adds	r3, r2, r3
    44de:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    44e0:	bf9c      	itt	ls
    44e2:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    44e6:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    44ea:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    44ec:	bf8b      	itete	hi
    44ee:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    44f0:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    44f4:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    44f6:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    44f8:	4403      	add	r3, r0
		return 1;
    44fa:	bf98      	it	ls
    44fc:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    44fe:	4413      	add	r3, r2
			ticker->lazy_current++;
    4500:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    4502:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    4504:	3201      	adds	r2, #1
    4506:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    4508:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    450a:	4293      	cmp	r3, r2
    450c:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    4510:	bf89      	itett	hi
    4512:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    4514:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    4516:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    4518:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    451a:	bf9c      	itt	ls
    451c:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    451e:	60a1      	strls	r1, [r4, #8]
    4520:	e73d      	b.n	439e <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    4522:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    4524:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    4526:	b946      	cbnz	r6, 453a <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    4528:	9f05      	ldr	r7, [sp, #20]
    452a:	42b8      	cmp	r0, r7
    452c:	d200      	bcs.n	4530 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    452e:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    4530:	9309      	str	r3, [sp, #36]	; 0x24
    4532:	9605      	str	r6, [sp, #20]
    4534:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    4538:	e740      	b.n	43bc <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    453a:	9306      	str	r3, [sp, #24]
    453c:	e7f8      	b.n	4530 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    453e:	b230      	sxth	r0, r6
    4540:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4544:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    4548:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    454a:	68bf      	ldr	r7, [r7, #8]
    454c:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    454e:	4567      	cmp	r7, ip
    4550:	d20a      	bcs.n	4568 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    4552:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4554:	69bf      	ldr	r7, [r7, #24]
    4556:	2f00      	cmp	r7, #0
    4558:	f47f af43 	bne.w	43e2 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    455c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    455e:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    4562:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    4566:	e739      	b.n	43dc <ticker_job+0x450>
			return TICKER_NULL;
    4568:	26ff      	movs	r6, #255	; 0xff
    456a:	e73a      	b.n	43e2 <ticker_job+0x456>
	while (id_insert !=
    456c:	9b06      	ldr	r3, [sp, #24]
    456e:	4598      	cmp	r8, r3
    4570:	f43f af59 	beq.w	4426 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    4574:	9b06      	ldr	r3, [sp, #24]
    4576:	2bff      	cmp	r3, #255	; 0xff
    4578:	d0a8      	beq.n	44cc <ticker_job+0x540>
    457a:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    457c:	b233      	sxth	r3, r6
    457e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4582:	9305      	str	r3, [sp, #20]
    4584:	9a05      	ldr	r2, [sp, #20]
    4586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4588:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    458c:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    458e:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    4590:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    4592:	bf88      	it	hi
    4594:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    4596:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    4598:	bf8c      	ite	hi
    459a:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    459c:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    459e:	2a00      	cmp	r2, #0
    45a0:	d094      	beq.n	44cc <ticker_job+0x540>
    45a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    45a4:	4293      	cmp	r3, r2
    45a6:	d891      	bhi.n	44cc <ticker_job+0x540>
			    skip_collide <= skip &&
    45a8:	78fa      	ldrb	r2, [r7, #3]
    45aa:	78e3      	ldrb	r3, [r4, #3]
    45ac:	429a      	cmp	r2, r3
    45ae:	d28d      	bcs.n	44cc <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    45b0:	4631      	mov	r1, r6
    45b2:	4658      	mov	r0, fp
    45b4:	f7ff fc3f 	bl	3e36 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    45b8:	78bb      	ldrb	r3, [r7, #2]
    45ba:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    45bc:	9a05      	ldr	r2, [sp, #20]
    45be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    45c0:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    45c2:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    45c6:	46b2      	mov	sl, r6
    45c8:	e6e9      	b.n	439e <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    45ca:	2101      	movs	r1, #1
    45cc:	e72f      	b.n	442e <ticker_job+0x4a2>
		user = &users[count_user];
    45ce:	9b01      	ldr	r3, [sp, #4]
    45d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    45d4:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    45d6:	786b      	ldrb	r3, [r5, #1]
    45d8:	78ea      	ldrb	r2, [r5, #3]
    45da:	429a      	cmp	r2, r3
    45dc:	d102      	bne.n	45e4 <ticker_job+0x658>
    45de:	3c01      	subs	r4, #1
    45e0:	b2e4      	uxtb	r4, r4
    45e2:	e551      	b.n	4088 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    45e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    45e8:	011b      	lsls	r3, r3, #4
    45ea:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    45ec:	5cf3      	ldrb	r3, [r6, r3]
    45ee:	2b01      	cmp	r3, #1
    45f0:	d025      	beq.n	463e <ticker_job+0x6b2>
    45f2:	2b02      	cmp	r3, #2
    45f4:	d12a      	bne.n	464c <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    45f6:	f8d2 c004 	ldr.w	ip, [r2, #4]
    45fa:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    45fc:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    4600:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    4604:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    4608:	28ff      	cmp	r0, #255	; 0xff
    460a:	d004      	beq.n	4616 <ticker_job+0x68a>
    460c:	6819      	ldr	r1, [r3, #0]
    460e:	f8db 7014 	ldr.w	r7, [fp, #20]
    4612:	42b9      	cmp	r1, r7
    4614:	d023      	beq.n	465e <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    4616:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    461a:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    461e:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    4620:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    4622:	29ff      	cmp	r1, #255	; 0xff
    4624:	d007      	beq.n	4636 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    4626:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    462a:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    462e:	6987      	ldr	r7, [r0, #24]
    4630:	6880      	ldr	r0, [r0, #8]
    4632:	b1df      	cbz	r7, 466c <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    4634:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    4636:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    463a:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    463e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    4640:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    4644:	b113      	cbz	r3, 464c <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    4646:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4648:	2000      	movs	r0, #0
    464a:	4798      	blx	r3
			first = user->first + 1;
    464c:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    464e:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    4650:	3301      	adds	r3, #1
    4652:	b2db      	uxtb	r3, r3
				first = 0;
    4654:	429a      	cmp	r2, r3
    4656:	bf08      	it	eq
    4658:	2300      	moveq	r3, #0
			user->first = first;
    465a:	706b      	strb	r3, [r5, #1]
    465c:	e7bb      	b.n	45d6 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    465e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    4662:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    4666:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    466a:	e7da      	b.n	4622 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    466c:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    466e:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    4672:	e7d6      	b.n	4622 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    4674:	9b03      	ldr	r3, [sp, #12]
    4676:	2bff      	cmp	r3, #255	; 0xff
    4678:	d107      	bne.n	468a <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    467a:	f006 faa3 	bl	abc4 <cntr_cnt_get>
    467e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    4680:	f006 fa70 	bl	ab64 <cntr_start>
    4684:	b908      	cbnz	r0, 468a <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    4686:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    468a:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    468e:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    4692:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    4696:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    469a:	260a      	movs	r6, #10
    469c:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    469e:	f006 fa91 	bl	abc4 <cntr_cnt_get>
		cc = instance->ticks_current;
    46a2:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    46a6:	1b03      	subs	r3, r0, r4
    46a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    46ac:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    46ae:	42ab      	cmp	r3, r5
    46b0:	bf2c      	ite	cs
    46b2:	18e4      	addcs	r4, r4, r3
    46b4:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    46b6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    46ba:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    46bc:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    46c0:	4620      	mov	r0, r4
    46c2:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    46c4:	f006 fa7e 	bl	abc4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    46c8:	1bc0      	subs	r0, r0, r7
    46ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    46ce:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    46d0:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    46d2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    46d6:	42a0      	cmp	r0, r4
    46d8:	f67f ace8 	bls.w	40ac <ticker_job+0x120>
		LL_ASSERT(i);
    46dc:	3e01      	subs	r6, #1
    46de:	d1de      	bne.n	469e <ticker_job+0x712>
    46e0:	4a0f      	ldr	r2, [pc, #60]	; (4720 <ticker_job+0x794>)
    46e2:	4910      	ldr	r1, [pc, #64]	; (4724 <ticker_job+0x798>)
    46e4:	2003      	movs	r0, #3
    46e6:	f7fd fdd3 	bl	2290 <bt_log>
    46ea:	4040      	eors	r0, r0
    46ec:	f380 8811 	msr	BASEPRI, r0
    46f0:	f04f 0004 	mov.w	r0, #4
    46f4:	df02      	svc	2
	instance->job_guard = 0;
    46f6:	2300      	movs	r3, #0
    46f8:	f88b 301e 	strb.w	r3, [fp, #30]
    46fc:	e4cc      	b.n	4098 <ticker_job+0x10c>
	if (!pending) {
    46fe:	2b00      	cmp	r3, #0
    4700:	d1f9      	bne.n	46f6 <ticker_job+0x76a>
		flag_compare_update = 1;
    4702:	2301      	movs	r3, #1
    4704:	9302      	str	r3, [sp, #8]
    4706:	e4b6      	b.n	4076 <ticker_job+0xea>
	while (id_insert !=
    4708:	45b0      	cmp	r8, r6
    470a:	f47f af37 	bne.w	457c <ticker_job+0x5f0>
    470e:	e68a      	b.n	4426 <ticker_job+0x49a>
}
    4710:	b013      	add	sp, #76	; 0x4c
    4712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4716:	bf00      	nop
    4718:	ff172b5a 	.word	0xff172b5a
    471c:	7f172b59 	.word	0x7f172b59
    4720:	0000de04 	.word	0x0000de04
    4724:	0000de1e 	.word	0x0000de1e

00004728 <ticker_init>:
{
    4728:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    472a:	4d1a      	ldr	r5, [pc, #104]	; (4794 <ticker_init+0x6c>)
{
    472c:	9f05      	ldr	r7, [sp, #20]
    472e:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    4732:	262c      	movs	r6, #44	; 0x2c
    4734:	4346      	muls	r6, r0
    4736:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    473a:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    473c:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    4740:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    4742:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    4746:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    474a:	3b01      	subs	r3, #1
    474c:	b2db      	uxtb	r3, r3
    474e:	2bff      	cmp	r3, #255	; 0xff
    4750:	d111      	bne.n	4776 <ticker_init+0x4e>
	if (count_op) {
    4752:	b9ec      	cbnz	r4, 4790 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    4754:	222c      	movs	r2, #44	; 0x2c
    4756:	fb02 5200 	mla	r2, r2, r0, r5
    475a:	9908      	ldr	r1, [sp, #32]
    475c:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    475e:	9909      	ldr	r1, [sp, #36]	; 0x24
    4760:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    4762:	990a      	ldr	r1, [sp, #40]	; 0x28
    4764:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    4766:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    4768:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    476a:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    476c:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    476e:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    4770:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    4772:	4620      	mov	r0, r4
    4774:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    4776:	b21a      	sxth	r2, r3
    4778:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    477c:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    477e:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    4782:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    4786:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    4788:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    478c:	b2e4      	uxtb	r4, r4
    478e:	e7dc      	b.n	474a <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    4790:	2001      	movs	r0, #1
}
    4792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4794:	20000990 	.word	0x20000990

00004798 <ticker_trigger>:
	instance = &_instance[instance_index];
    4798:	4a07      	ldr	r2, [pc, #28]	; (47b8 <ticker_trigger+0x20>)
    479a:	212c      	movs	r1, #44	; 0x2c
    479c:	fb00 2301 	mla	r3, r0, r1, r2
{
    47a0:	b410      	push	{r4}
	if (instance->sched_cb) {
    47a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    47a4:	b12c      	cbz	r4, 47b2 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    47a6:	46a4      	mov	ip, r4
    47a8:	2201      	movs	r2, #1
    47aa:	2103      	movs	r1, #3
    47ac:	2002      	movs	r0, #2
}
    47ae:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    47b0:	4760      	bx	ip
}
    47b2:	bc10      	pop	{r4}
    47b4:	4770      	bx	lr
    47b6:	bf00      	nop
    47b8:	20000990 	.word	0x20000990

000047bc <ticker_start>:
{
    47bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    47c0:	4f25      	ldr	r7, [pc, #148]	; (4858 <ticker_start+0x9c>)
    47c2:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    47c6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    47c8:	fb08 7000 	mla	r0, r8, r0, r7
    47cc:	fa0f fc81 	sxth.w	ip, r1
    47d0:	f8d0 e004 	ldr.w	lr, [r0, #4]
    47d4:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    47d8:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    47dc:	78f4      	ldrb	r4, [r6, #3]
    47de:	1c65      	adds	r5, r4, #1
    47e0:	b2ed      	uxtb	r5, r5
		last = 0;
    47e2:	45ae      	cmp	lr, r5
    47e4:	bf98      	it	ls
    47e6:	2500      	movls	r5, #0
	if (last == user->first) {
    47e8:	f896 e001 	ldrb.w	lr, [r6, #1]
    47ec:	45ae      	cmp	lr, r5
    47ee:	d02f      	beq.n	4850 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    47f0:	f8d6 c004 	ldr.w	ip, [r6, #4]
    47f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    47f8:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    47fc:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    4800:	f04f 0a03 	mov.w	sl, #3
    4804:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    4808:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    480a:	9b08      	ldr	r3, [sp, #32]
    480c:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    480e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4810:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    4812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4814:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    4816:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4818:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    481a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    481e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    4820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4822:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    4824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4826:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4828:	2302      	movs	r3, #2
    482a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    482c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    482e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    4830:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    4832:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    4834:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    4836:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4838:	6a45      	ldr	r5, [r0, #36]	; 0x24
    483a:	6a03      	ldr	r3, [r0, #32]
    483c:	4608      	mov	r0, r1
    483e:	4798      	blx	r3
    4840:	fb09 7308 	mla	r3, r9, r8, r7
    4844:	2200      	movs	r2, #0
    4846:	2104      	movs	r1, #4
    4848:	47a8      	blx	r5
	return user_op->status;
    484a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4850:	2001      	movs	r0, #1
}
    4852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4856:	bf00      	nop
    4858:	20000990 	.word	0x20000990

0000485c <ticker_update>:
{
    485c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    4860:	f8df 8090 	ldr.w	r8, [pc, #144]	; 48f4 <ticker_update+0x98>
    4864:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    4868:	fb0a 8e00 	mla	lr, sl, r0, r8
    486c:	b20f      	sxth	r7, r1
    486e:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    4872:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    4874:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    4878:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    487c:	78c4      	ldrb	r4, [r0, #3]
    487e:	1c66      	adds	r6, r4, #1
    4880:	b2f6      	uxtb	r6, r6
		last = 0;
    4882:	42b5      	cmp	r5, r6
    4884:	bf98      	it	ls
    4886:	2600      	movls	r6, #0
	if (last == user->first) {
    4888:	7845      	ldrb	r5, [r0, #1]
    488a:	42b5      	cmp	r5, r6
    488c:	d02f      	beq.n	48ee <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    488e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4892:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4896:	0125      	lsls	r5, r4, #4
    4898:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    489c:	2704      	movs	r7, #4
    489e:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    48a2:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    48a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    48a8:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    48aa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    48ae:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    48b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    48b4:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    48b6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    48ba:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    48bc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    48c0:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    48c2:	2302      	movs	r3, #2
    48c4:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    48c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    48c8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    48ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    48cc:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    48ce:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    48d0:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    48d2:	f8de 3020 	ldr.w	r3, [lr, #32]
    48d6:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    48da:	4608      	mov	r0, r1
    48dc:	4798      	blx	r3
    48de:	fb09 830a 	mla	r3, r9, sl, r8
    48e2:	2200      	movs	r2, #0
    48e4:	4639      	mov	r1, r7
    48e6:	47a8      	blx	r5
	return user_op->status;
    48e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    48ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    48ee:	2001      	movs	r0, #1
}
    48f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48f4:	20000990 	.word	0x20000990

000048f8 <ticker_stop>:
{
    48f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    48fc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 496c <ticker_stop+0x74>
    4900:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    4904:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    4908:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    490a:	f8de 0004 	ldr.w	r0, [lr, #4]
    490e:	b20e      	sxth	r6, r1
    4910:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    4914:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    4918:	78fc      	ldrb	r4, [r7, #3]
    491a:	1c65      	adds	r5, r4, #1
    491c:	b2ed      	uxtb	r5, r5
		last = 0;
    491e:	42a8      	cmp	r0, r5
    4920:	bf98      	it	ls
    4922:	2500      	movls	r5, #0
	if (last == user->first) {
    4924:	7878      	ldrb	r0, [r7, #1]
    4926:	42a8      	cmp	r0, r5
    4928:	d01d      	beq.n	4966 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    492a:	6878      	ldr	r0, [r7, #4]
    492c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4930:	0124      	lsls	r4, r4, #4
    4932:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    4934:	f04f 0c05 	mov.w	ip, #5
    4938:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    493c:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    493e:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    4940:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    4942:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    4944:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    4946:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    4948:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    494a:	f8de 3020 	ldr.w	r3, [lr, #32]
    494e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    4952:	4608      	mov	r0, r1
    4954:	4798      	blx	r3
    4956:	fb08 930a 	mla	r3, r8, sl, r9
    495a:	2200      	movs	r2, #0
    495c:	2104      	movs	r1, #4
    495e:	47a0      	blx	r4
	return user_op->status;
    4960:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4966:	2001      	movs	r0, #1
}
    4968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    496c:	20000990 	.word	0x20000990

00004970 <ticker_next_slot_get>:
{
    4970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    4974:	f8df 8078 	ldr.w	r8, [pc, #120]	; 49f0 <ticker_next_slot_get+0x80>
    4978:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    497c:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    497e:	fb0a 8000 	mla	r0, sl, r0, r8
    4982:	fa0f fe81 	sxth.w	lr, r1
    4986:	6845      	ldr	r5, [r0, #4]
    4988:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    498c:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    4990:	78fc      	ldrb	r4, [r7, #3]
    4992:	1c66      	adds	r6, r4, #1
    4994:	b2f6      	uxtb	r6, r6
		last = 0;
    4996:	42b5      	cmp	r5, r6
    4998:	bf98      	it	ls
    499a:	2600      	movls	r6, #0
	if (last == user->first) {
    499c:	787d      	ldrb	r5, [r7, #1]
    499e:	42b5      	cmp	r5, r6
    49a0:	d023      	beq.n	49ea <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    49a2:	f8d7 c004 	ldr.w	ip, [r7, #4]
    49a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    49aa:	0125      	lsls	r5, r4, #4
    49ac:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    49b0:	f04f 0e02 	mov.w	lr, #2
    49b4:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    49b8:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    49ba:	9b08      	ldr	r3, [sp, #32]
    49bc:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    49be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49c0:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    49c2:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    49c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    49c6:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    49c8:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    49ca:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    49ce:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    49d0:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    49d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    49d4:	6a03      	ldr	r3, [r0, #32]
    49d6:	4608      	mov	r0, r1
    49d8:	4798      	blx	r3
    49da:	fb09 830a 	mla	r3, r9, sl, r8
    49de:	2200      	movs	r2, #0
    49e0:	2104      	movs	r1, #4
    49e2:	47a8      	blx	r5
	return user_op->status;
    49e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    49e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    49ea:	2001      	movs	r0, #1
}
    49ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    49f0:	20000990 	.word	0x20000990

000049f4 <ticker_job_idle_get>:
{
    49f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    49f8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4a68 <ticker_job_idle_get+0x74>
    49fc:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    4a00:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    4a04:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    4a06:	f8de 0004 	ldr.w	r0, [lr, #4]
    4a0a:	b20e      	sxth	r6, r1
    4a0c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    4a10:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    4a14:	78fc      	ldrb	r4, [r7, #3]
    4a16:	1c65      	adds	r5, r4, #1
    4a18:	b2ed      	uxtb	r5, r5
		last = 0;
    4a1a:	42a8      	cmp	r0, r5
    4a1c:	bf98      	it	ls
    4a1e:	2500      	movls	r5, #0
	if (last == user->first) {
    4a20:	7878      	ldrb	r0, [r7, #1]
    4a22:	42a8      	cmp	r0, r5
    4a24:	d01d      	beq.n	4a62 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    4a26:	6878      	ldr	r0, [r7, #4]
    4a28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4a2c:	0124      	lsls	r4, r4, #4
    4a2e:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    4a30:	f04f 0c01 	mov.w	ip, #1
    4a34:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    4a38:	20ff      	movs	r0, #255	; 0xff
    4a3a:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    4a3c:	2002      	movs	r0, #2
    4a3e:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    4a40:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    4a42:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    4a44:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4a46:	f8de 3020 	ldr.w	r3, [lr, #32]
    4a4a:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    4a4e:	4608      	mov	r0, r1
    4a50:	4798      	blx	r3
    4a52:	fb08 930a 	mla	r3, r8, sl, r9
    4a56:	2200      	movs	r2, #0
    4a58:	2104      	movs	r1, #4
    4a5a:	47a0      	blx	r4
	return user_op->status;
    4a5c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    4a62:	2001      	movs	r0, #1
}
    4a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a68:	20000990 	.word	0x20000990

00004a6c <ticker_job_sched>:
{
    4a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4a70:	4c08      	ldr	r4, [pc, #32]	; (4a94 <ticker_job_sched+0x28>)
    4a72:	252c      	movs	r5, #44	; 0x2c
    4a74:	fb05 4300 	mla	r3, r5, r0, r4
{
    4a78:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4a7a:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    4a7c:	6a1b      	ldr	r3, [r3, #32]
    4a7e:	4608      	mov	r0, r1
    4a80:	4798      	blx	r3
    4a82:	fb06 4305 	mla	r3, r6, r5, r4
    4a86:	46bc      	mov	ip, r7
    4a88:	2200      	movs	r2, #0
    4a8a:	2104      	movs	r1, #4
}
    4a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4a90:	4760      	bx	ip
    4a92:	bf00      	nop
    4a94:	20000990 	.word	0x20000990

00004a98 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    4a98:	f006 b894 	b.w	abc4 <cntr_cnt_get>

00004a9c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    4a9c:	1a40      	subs	r0, r0, r1
}
    4a9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4aa2:	4770      	bx	lr

00004aa4 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    4aa4:	b508      	push	{r3, lr}
    4aa6:	4603      	mov	r3, r0
	if (addr_type > 1) {
    4aa8:	2b01      	cmp	r3, #1
{
    4aaa:	4608      	mov	r0, r1
	if (addr_type > 1) {
    4aac:	d80e      	bhi.n	4acc <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    4aae:	b133      	cbz	r3, 4abe <ll_addr_get+0x1a>
		if (bdaddr) {
    4ab0:	b119      	cbz	r1, 4aba <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    4ab2:	2206      	movs	r2, #6
    4ab4:	4906      	ldr	r1, [pc, #24]	; (4ad0 <ll_addr_get+0x2c>)
    4ab6:	f7fb fdb0 	bl	61a <memcpy>
		}

		return rnd_addr;
    4aba:	4805      	ldr	r0, [pc, #20]	; (4ad0 <ll_addr_get+0x2c>)
    4abc:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    4abe:	b119      	cbz	r1, 4ac8 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    4ac0:	2206      	movs	r2, #6
    4ac2:	4904      	ldr	r1, [pc, #16]	; (4ad4 <ll_addr_get+0x30>)
    4ac4:	f7fb fda9 	bl	61a <memcpy>
	}

	return pub_addr;
    4ac8:	4802      	ldr	r0, [pc, #8]	; (4ad4 <ll_addr_get+0x30>)
}
    4aca:	bd08      	pop	{r3, pc}
		return NULL;
    4acc:	2000      	movs	r0, #0
    4ace:	bd08      	pop	{r3, pc}
    4ad0:	200009ee 	.word	0x200009ee
    4ad4:	200009e8 	.word	0x200009e8

00004ad8 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    4ad8:	b570      	push	{r4, r5, r6, lr}
    4ada:	4606      	mov	r6, r0
    4adc:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    4ade:	f005 f805 	bl	9aec <ll_adv_is_enabled>
    4ae2:	4604      	mov	r4, r0
    4ae4:	b110      	cbz	r0, 4aec <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    4ae6:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    4ae8:	4620      	mov	r0, r4
    4aea:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    4aec:	f005 f814 	bl	9b18 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    4af0:	f010 0f06 	tst.w	r0, #6
    4af4:	d1f7      	bne.n	4ae6 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    4af6:	2206      	movs	r2, #6
    4af8:	4629      	mov	r1, r5
	if (addr_type) {
    4afa:	b11e      	cbz	r6, 4b04 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    4afc:	4802      	ldr	r0, [pc, #8]	; (4b08 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    4afe:	f7fb fd8c 	bl	61a <memcpy>
    4b02:	e7f1      	b.n	4ae8 <ll_addr_set+0x10>
    4b04:	4801      	ldr	r0, [pc, #4]	; (4b0c <ll_addr_set+0x34>)
    4b06:	e7fa      	b.n	4afe <ll_addr_set+0x26>
    4b08:	200009ee 	.word	0x200009ee
    4b0c:	200009e8 	.word	0x200009e8

00004b10 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    4b10:	2300      	movs	r3, #0
    4b12:	7003      	strb	r3, [r0, #0]
	*max = 0;
    4b14:	700b      	strb	r3, [r1, #0]
    4b16:	4770      	bx	lr

00004b18 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    4b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b1a:	4607      	mov	r7, r0
    4b1c:	460e      	mov	r6, r1
	while (len) {
    4b1e:	460c      	mov	r4, r1
    4b20:	1b35      	subs	r5, r6, r4
    4b22:	443d      	add	r5, r7
    4b24:	b18c      	cbz	r4, 4b4a <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    4b26:	f7fc fd3f 	bl	15a8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    4b2a:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    4b2c:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    4b2e:	d907      	bls.n	4b40 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    4b30:	2204      	movs	r2, #4
    4b32:	eb0d 0102 	add.w	r1, sp, r2
    4b36:	4628      	mov	r0, r5
    4b38:	f7fb fd6f 	bl	61a <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    4b3c:	3c04      	subs	r4, #4
    4b3e:	e7ef      	b.n	4b20 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    4b40:	4622      	mov	r2, r4
    4b42:	a901      	add	r1, sp, #4
    4b44:	4628      	mov	r0, r5
    4b46:	f7fb fd68 	bl	61a <memcpy>
			break;
		}
	}

	return 0;
}
    4b4a:	2000      	movs	r0, #0
    4b4c:	b003      	add	sp, #12
    4b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004b50 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    4b50:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    4b52:	4802      	ldr	r0, [pc, #8]	; (4b5c <_hci_driver_init+0xc>)
    4b54:	f7fe fdbe 	bl	36d4 <bt_hci_driver_register>

	return 0;
}
    4b58:	2000      	movs	r0, #0
    4b5a:	bd08      	pop	{r3, pc}
    4b5c:	0000de8c 	.word	0x0000de8c

00004b60 <recv_thread>:
{
    4b60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		BT_DBG("blocking");
    4b62:	4d2f      	ldr	r5, [pc, #188]	; (4c20 <recv_thread+0xc0>)
    4b64:	4e2f      	ldr	r6, [pc, #188]	; (4c24 <recv_thread+0xc4>)
    4b66:	f007 fa63 	bl	c030 <_impl_k_current_get>
    4b6a:	462a      	mov	r2, r5
    4b6c:	4603      	mov	r3, r0
    4b6e:	4631      	mov	r1, r6
    4b70:	2007      	movs	r0, #7
    4b72:	f7fd fb8d 	bl	2290 <bt_log>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    4b76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4b7a:	482b      	ldr	r0, [pc, #172]	; (4c28 <recv_thread+0xc8>)
    4b7c:	f007 f867 	bl	bc4e <k_queue_get>
    4b80:	4604      	mov	r4, r0
    4b82:	f007 fa55 	bl	c030 <_impl_k_current_get>
		BT_DBG("unblocked");
    4b86:	462a      	mov	r2, r5
    4b88:	4603      	mov	r3, r0
    4b8a:	4928      	ldr	r1, [pc, #160]	; (4c2c <recv_thread+0xcc>)
    4b8c:	2007      	movs	r0, #7
    4b8e:	f7fd fb7f 	bl	2290 <bt_log>
		if (node_rx && !buf) {
    4b92:	2c00      	cmp	r4, #0
    4b94:	d031      	beq.n	4bfa <recv_thread+0x9a>
	s8_t class = hci_get_class(node_rx);
    4b96:	4620      	mov	r0, r4
    4b98:	f000 fede 	bl	5958 <hci_get_class>
	switch (class) {
    4b9c:	2802      	cmp	r0, #2
    4b9e:	9403      	str	r4, [sp, #12]
    4ba0:	d82e      	bhi.n	4c00 <recv_thread+0xa0>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    4ba2:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    4ba4:	bf0e      	itee	eq
    4ba6:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    4ba8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4bac:	2001      	movne	r0, #1
    4bae:	f7fe ff2f 	bl	3a10 <bt_buf_get_rx>
    4bb2:	4604      	mov	r4, r0
		if (buf) {
    4bb4:	b118      	cbz	r0, 4bbe <recv_thread+0x5e>
			hci_evt_encode(node_rx, buf);
    4bb6:	4601      	mov	r1, r0
    4bb8:	9803      	ldr	r0, [sp, #12]
    4bba:	f000 fe13 	bl	57e4 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    4bbe:	9b03      	ldr	r3, [sp, #12]
    4bc0:	2100      	movs	r1, #0
    4bc2:	88d8      	ldrh	r0, [r3, #6]
    4bc4:	f005 f878 	bl	9cb8 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    4bc8:	a804      	add	r0, sp, #16
    4bca:	2200      	movs	r2, #0
    4bcc:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    4bd0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    4bd2:	f005 f807 	bl	9be4 <ll_rx_mem_release>
		if (buf) {
    4bd6:	b184      	cbz	r4, 4bfa <recv_thread+0x9a>
			if (buf->len) {
    4bd8:	89a3      	ldrh	r3, [r4, #12]
    4bda:	b1e3      	cbz	r3, 4c16 <recv_thread+0xb6>
    4bdc:	f007 fa28 	bl	c030 <_impl_k_current_get>
				BT_DBG("Packet in: type:%u len:%u",
    4be0:	89a3      	ldrh	r3, [r4, #12]
    4be2:	9301      	str	r3, [sp, #4]
    4be4:	7d23      	ldrb	r3, [r4, #20]
    4be6:	9300      	str	r3, [sp, #0]
    4be8:	462a      	mov	r2, r5
    4bea:	4603      	mov	r3, r0
    4bec:	4910      	ldr	r1, [pc, #64]	; (4c30 <recv_thread+0xd0>)
    4bee:	2007      	movs	r0, #7
    4bf0:	f7fd fb4e 	bl	2290 <bt_log>
				bt_recv(buf);
    4bf4:	4620      	mov	r0, r4
    4bf6:	f7fe fb09 	bl	320c <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4bfa:	f007 f9d3 	bl	bfa4 <_impl_k_yield>
    4bfe:	e7b2      	b.n	4b66 <recv_thread+0x6>
		LL_ASSERT(0);
    4c00:	4a0c      	ldr	r2, [pc, #48]	; (4c34 <recv_thread+0xd4>)
    4c02:	490d      	ldr	r1, [pc, #52]	; (4c38 <recv_thread+0xd8>)
    4c04:	2003      	movs	r0, #3
    4c06:	f7fd fb43 	bl	2290 <bt_log>
    4c0a:	4040      	eors	r0, r0
    4c0c:	f380 8811 	msr	BASEPRI, r0
    4c10:	f04f 0004 	mov.w	r0, #4
    4c14:	df02      	svc	2
				net_buf_unref(buf);
    4c16:	4620      	mov	r0, r4
    4c18:	f006 fdc0 	bl	b79c <net_buf_unref>
    4c1c:	e7ed      	b.n	4bfa <recv_thread+0x9a>
    4c1e:	bf00      	nop
    4c20:	0000de52 	.word	0x0000de52
    4c24:	0000df87 	.word	0x0000df87
    4c28:	200051c0 	.word	0x200051c0
    4c2c:	0000df99 	.word	0x0000df99
    4c30:	0000dfac 	.word	0x0000dfac
    4c34:	0000de46 	.word	0x0000de46
    4c38:	0000d76b 	.word	0x0000d76b

00004c3c <hci_driver_send>:
{
    4c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4c3e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4c40:	f007 f9f6 	bl	c030 <_impl_k_current_get>
	BT_DBG("enter");
    4c44:	4a1c      	ldr	r2, [pc, #112]	; (4cb8 <hci_driver_send+0x7c>)
    4c46:	491d      	ldr	r1, [pc, #116]	; (4cbc <hci_driver_send+0x80>)
    4c48:	4603      	mov	r3, r0
    4c4a:	2007      	movs	r0, #7
    4c4c:	f7fd fb20 	bl	2290 <bt_log>
	if (!buf->len) {
    4c50:	89a3      	ldrh	r3, [r4, #12]
    4c52:	b93b      	cbnz	r3, 4c64 <hci_driver_send+0x28>
		BT_ERR("Empty HCI packet");
    4c54:	4a18      	ldr	r2, [pc, #96]	; (4cb8 <hci_driver_send+0x7c>)
    4c56:	491a      	ldr	r1, [pc, #104]	; (4cc0 <hci_driver_send+0x84>)
    4c58:	2003      	movs	r0, #3
    4c5a:	f7fd fb19 	bl	2290 <bt_log>
		return -EINVAL;
    4c5e:	f06f 0015 	mvn.w	r0, #21
    4c62:	e021      	b.n	4ca8 <hci_driver_send+0x6c>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    4c64:	7d23      	ldrb	r3, [r4, #20]
	switch (type) {
    4c66:	bb0b      	cbnz	r3, 4cac <hci_driver_send+0x70>
	evt = hci_cmd_handle(buf);
    4c68:	4620      	mov	r0, r4
    4c6a:	f000 faad 	bl	51c8 <hci_cmd_handle>
	if (evt) {
    4c6e:	4605      	mov	r5, r0
    4c70:	b160      	cbz	r0, 4c8c <hci_driver_send+0x50>
    4c72:	f007 f9dd 	bl	c030 <_impl_k_current_get>
		BT_DBG("Replying with event of %u bytes", evt->len);
    4c76:	89ab      	ldrh	r3, [r5, #12]
    4c78:	9300      	str	r3, [sp, #0]
    4c7a:	4a12      	ldr	r2, [pc, #72]	; (4cc4 <hci_driver_send+0x88>)
    4c7c:	4912      	ldr	r1, [pc, #72]	; (4cc8 <hci_driver_send+0x8c>)
    4c7e:	4603      	mov	r3, r0
    4c80:	2007      	movs	r0, #7
    4c82:	f7fd fb05 	bl	2290 <bt_log>
		bt_recv_prio(evt);
    4c86:	4628      	mov	r0, r5
    4c88:	f7fe fc9a 	bl	35c0 <bt_recv_prio>
		net_buf_unref(buf);
    4c8c:	4620      	mov	r0, r4
    4c8e:	f006 fd85 	bl	b79c <net_buf_unref>
    4c92:	f007 f9cd 	bl	c030 <_impl_k_current_get>
	BT_DBG("exit: %d", err);
    4c96:	2400      	movs	r4, #0
    4c98:	4603      	mov	r3, r0
    4c9a:	9400      	str	r4, [sp, #0]
    4c9c:	2007      	movs	r0, #7
    4c9e:	4a06      	ldr	r2, [pc, #24]	; (4cb8 <hci_driver_send+0x7c>)
    4ca0:	490a      	ldr	r1, [pc, #40]	; (4ccc <hci_driver_send+0x90>)
    4ca2:	f7fd faf5 	bl	2290 <bt_log>
	return err;
    4ca6:	4620      	mov	r0, r4
}
    4ca8:	b003      	add	sp, #12
    4caa:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unknown HCI type %u", type);
    4cac:	4a02      	ldr	r2, [pc, #8]	; (4cb8 <hci_driver_send+0x7c>)
    4cae:	4908      	ldr	r1, [pc, #32]	; (4cd0 <hci_driver_send+0x94>)
    4cb0:	2003      	movs	r0, #3
    4cb2:	f7fd faed 	bl	2290 <bt_log>
    4cb6:	e7d2      	b.n	4c5e <hci_driver_send+0x22>
    4cb8:	0000de69 	.word	0x0000de69
    4cbc:	0000decf 	.word	0x0000decf
    4cc0:	0000dede 	.word	0x0000dede
    4cc4:	0000de5e 	.word	0x0000de5e
    4cc8:	0000def3 	.word	0x0000def3
    4ccc:	0000df1c 	.word	0x0000df1c
    4cd0:	0000df2e 	.word	0x0000df2e

00004cd4 <prio_recv_thread>:
{
    4cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		BT_DBG("sem take...");
    4cd6:	4c18      	ldr	r4, [pc, #96]	; (4d38 <prio_recv_thread+0x64>)
    4cd8:	4e18      	ldr	r6, [pc, #96]	; (4d3c <prio_recv_thread+0x68>)
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4cda:	4d19      	ldr	r5, [pc, #100]	; (4d40 <prio_recv_thread+0x6c>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    4cdc:	f10d 0102 	add.w	r1, sp, #2
    4ce0:	a801      	add	r0, sp, #4
    4ce2:	f004 ff47 	bl	9b74 <ll_rx_get>
    4ce6:	2800      	cmp	r0, #0
    4ce8:	d1f8      	bne.n	4cdc <prio_recv_thread+0x8>
		if (node_rx) {
    4cea:	9b01      	ldr	r3, [sp, #4]
    4cec:	b173      	cbz	r3, 4d0c <prio_recv_thread+0x38>
			ll_rx_dequeue();
    4cee:	f005 fa51 	bl	a194 <ll_rx_dequeue>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4cf2:	f007 f99d 	bl	c030 <_impl_k_current_get>
			BT_DBG("RX node enqueue");
    4cf6:	4622      	mov	r2, r4
    4cf8:	4603      	mov	r3, r0
    4cfa:	4912      	ldr	r1, [pc, #72]	; (4d44 <prio_recv_thread+0x70>)
    4cfc:	2007      	movs	r0, #7
    4cfe:	f7fd fac7 	bl	2290 <bt_log>
			k_fifo_put(&recv_fifo, node_rx);
    4d02:	9901      	ldr	r1, [sp, #4]
    4d04:	4810      	ldr	r0, [pc, #64]	; (4d48 <prio_recv_thread+0x74>)
    4d06:	f006 ff7e 	bl	bc06 <k_queue_append>
    4d0a:	e7e7      	b.n	4cdc <prio_recv_thread+0x8>
    4d0c:	f007 f990 	bl	c030 <_impl_k_current_get>
		BT_DBG("sem take...");
    4d10:	4622      	mov	r2, r4
    4d12:	4603      	mov	r3, r0
    4d14:	4631      	mov	r1, r6
    4d16:	2007      	movs	r0, #7
    4d18:	f7fd faba 	bl	2290 <bt_log>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4d20:	4628      	mov	r0, r5
    4d22:	f007 fa43 	bl	c1ac <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4d26:	f007 f983 	bl	c030 <_impl_k_current_get>
		BT_DBG("sem taken");
    4d2a:	4622      	mov	r2, r4
    4d2c:	4603      	mov	r3, r0
    4d2e:	4907      	ldr	r1, [pc, #28]	; (4d4c <prio_recv_thread+0x78>)
    4d30:	2007      	movs	r0, #7
    4d32:	f7fd faad 	bl	2290 <bt_log>
    4d36:	e7d1      	b.n	4cdc <prio_recv_thread+0x8>
    4d38:	0000de35 	.word	0x0000de35
    4d3c:	0000df5f 	.word	0x0000df5f
    4d40:	200051a8 	.word	0x200051a8
    4d44:	0000df46 	.word	0x0000df46
    4d48:	200051c0 	.word	0x200051c0
    4d4c:	0000df74 	.word	0x0000df74

00004d50 <hci_driver_open>:
{
    4d50:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    4d52:	481b      	ldr	r0, [pc, #108]	; (4dc0 <hci_driver_open+0x70>)
{
    4d54:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    4d56:	f005 fadd 	bl	a314 <ll_init>
	if (err) {
    4d5a:	4604      	mov	r4, r0
    4d5c:	b140      	cbz	r0, 4d70 <hci_driver_open+0x20>
		BT_ERR("LL initialization failed: %u", err);
    4d5e:	4a19      	ldr	r2, [pc, #100]	; (4dc4 <hci_driver_open+0x74>)
    4d60:	4919      	ldr	r1, [pc, #100]	; (4dc8 <hci_driver_open+0x78>)
    4d62:	4603      	mov	r3, r0
    4d64:	2003      	movs	r0, #3
	BT_DBG("Success.");
    4d66:	f7fd fa93 	bl	2290 <bt_log>
}
    4d6a:	4620      	mov	r0, r4
    4d6c:	b006      	add	sp, #24
    4d6e:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    4d70:	f000 fe12 	bl	5998 <hci_init>

    4d74:	f06f 0309 	mvn.w	r3, #9
    4d78:	9303      	str	r3, [sp, #12]
    4d7a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    4d7e:	4b13      	ldr	r3, [pc, #76]	; (4dcc <hci_driver_open+0x7c>)
    4d80:	4913      	ldr	r1, [pc, #76]	; (4dd0 <hci_driver_open+0x80>)
    4d82:	9405      	str	r4, [sp, #20]
    4d84:	9404      	str	r4, [sp, #16]
    4d86:	9402      	str	r4, [sp, #8]
    4d88:	9401      	str	r4, [sp, #4]
    4d8a:	9400      	str	r4, [sp, #0]
    4d8c:	4811      	ldr	r0, [pc, #68]	; (4dd4 <hci_driver_open+0x84>)
    4d8e:	f007 fbe9 	bl	c564 <_impl_k_thread_create>
    4d92:	f06f 0307 	mvn.w	r3, #7
    4d96:	f240 522c 	movw	r2, #1324	; 0x52c
    4d9a:	490f      	ldr	r1, [pc, #60]	; (4dd8 <hci_driver_open+0x88>)
    4d9c:	9303      	str	r3, [sp, #12]
    4d9e:	9405      	str	r4, [sp, #20]
    4da0:	4b0e      	ldr	r3, [pc, #56]	; (4ddc <hci_driver_open+0x8c>)
    4da2:	9404      	str	r4, [sp, #16]
    4da4:	9402      	str	r4, [sp, #8]
    4da6:	9401      	str	r4, [sp, #4]
    4da8:	9400      	str	r4, [sp, #0]
    4daa:	480d      	ldr	r0, [pc, #52]	; (4de0 <hci_driver_open+0x90>)
    4dac:	f007 fbda 	bl	c564 <_impl_k_thread_create>
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    4db0:	f007 f93e 	bl	c030 <_impl_k_current_get>
	BT_DBG("Success.");
    4db4:	4a03      	ldr	r2, [pc, #12]	; (4dc4 <hci_driver_open+0x74>)
    4db6:	490b      	ldr	r1, [pc, #44]	; (4de4 <hci_driver_open+0x94>)
    4db8:	4603      	mov	r3, r0
    4dba:	2007      	movs	r0, #7
    4dbc:	e7d3      	b.n	4d66 <hci_driver_open+0x16>
    4dbe:	bf00      	nop
    4dc0:	200051a8 	.word	0x200051a8
    4dc4:	0000de79 	.word	0x0000de79
    4dc8:	0000de9c 	.word	0x0000de9c
    4dcc:	00004cd5 	.word	0x00004cd5
    4dd0:	20003368 	.word	0x20003368
    4dd4:	20002bf8 	.word	0x20002bf8
    4dd8:	20003658 	.word	0x20003658
    4ddc:	00004b61 	.word	0x00004b61
    4de0:	20002b90 	.word	0x20002b90
    4de4:	0000debd 	.word	0x0000debd

00004de8 <sys_put_le32>:
	dst[1] = val >> 8;
    4de8:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    4dec:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    4dee:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    4df0:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    4df2:	0a00      	lsrs	r0, r0, #8
    4df4:	704b      	strb	r3, [r1, #1]
    4df6:	70c8      	strb	r0, [r1, #3]
    4df8:	4770      	bx	lr

00004dfa <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    4dfa:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    4dfc:	3008      	adds	r0, #8
{
    4dfe:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    4e00:	2102      	movs	r1, #2
{
    4e02:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    4e04:	f006 fcfc 	bl	b800 <net_buf_simple_add>
	hdr->evt = evt;
    4e08:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    4e0a:	7044      	strb	r4, [r0, #1]
    4e0c:	bd38      	pop	{r3, r4, r5, pc}
	...

00004e10 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    4e10:	b538      	push	{r3, r4, r5, lr}
    4e12:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    4e18:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4e1a:	f7fe fe09 	bl	3a30 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    4e1e:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    4e20:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    4e22:	b2d2      	uxtb	r2, r2
    4e24:	210e      	movs	r1, #14
    4e26:	f7ff ffe8 	bl	4dfa <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    4e2a:	6820      	ldr	r0, [r4, #0]
    4e2c:	2103      	movs	r1, #3
    4e2e:	3008      	adds	r0, #8
    4e30:	f006 fce6 	bl	b800 <net_buf_simple_add>
	cc->ncmd = 1;
    4e34:	2301      	movs	r3, #1
    4e36:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    4e38:	4b05      	ldr	r3, [pc, #20]	; (4e50 <cmd_complete+0x40>)
    4e3a:	881b      	ldrh	r3, [r3, #0]
    4e3c:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    4e40:	6820      	ldr	r0, [r4, #0]
    4e42:	4629      	mov	r1, r5
    4e44:	3008      	adds	r0, #8
}
    4e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    4e4a:	f006 bcd9 	b.w	b800 <net_buf_simple_add>
    4e4e:	bf00      	nop
    4e50:	200009f4 	.word	0x200009f4

00004e54 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    4e54:	b570      	push	{r4, r5, r6, lr}
    4e56:	4604      	mov	r4, r0
    4e58:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4e5a:	3201      	adds	r2, #1
{
    4e5c:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    4e5e:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4e60:	b2d2      	uxtb	r2, r2
    4e62:	213e      	movs	r1, #62	; 0x3e
    4e64:	f7ff ffc9 	bl	4dfa <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    4e68:	2101      	movs	r1, #1
    4e6a:	4620      	mov	r0, r4
    4e6c:	f006 fcc8 	bl	b800 <net_buf_simple_add>
	me->subevent = subevt;
    4e70:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    4e72:	4629      	mov	r1, r5
    4e74:	4620      	mov	r0, r4
}
    4e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    4e7a:	f006 bcc1 	b.w	b800 <net_buf_simple_add>
	...

00004e80 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    4e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4e82:	2301      	movs	r3, #1
    4e84:	f88d 3001 	strb.w	r3, [sp, #1]
    4e88:	2303      	movs	r3, #3
    4e8a:	f88d 3002 	strb.w	r3, [sp, #2]
    4e8e:	23ff      	movs	r3, #255	; 0xff
    4e90:	f88d 3003 	strb.w	r3, [sp, #3]
    4e94:	f88d 3005 	strb.w	r3, [sp, #5]
    4e98:	2302      	movs	r3, #2
    4e9a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (adv->tx_addr) {
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4e9e:	4b25      	ldr	r3, [pc, #148]	; (4f34 <le_advertising_report+0xb4>)
{
    4ea0:	4607      	mov	r7, r0
    4ea2:	4610      	mov	r0, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4ea4:	2204      	movs	r2, #4
    4ea6:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    4eae:	2200      	movs	r2, #0
    4eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4eb4:	2400      	movs	r4, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4eb6:	4313      	orrs	r3, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4eb8:	f88d 4000 	strb.w	r4, [sp]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4ebc:	d038      	beq.n	4f30 <le_advertising_report+0xb0>
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
		return;
	}
#else
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    4ebe:	4b1e      	ldr	r3, [pc, #120]	; (4f38 <le_advertising_report+0xb8>)
    4ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ec4:	2300      	movs	r3, #0
    4ec6:	f002 0202 	and.w	r2, r2, #2
    4eca:	4313      	orrs	r3, r2
    4ecc:	d030      	beq.n	4f30 <le_advertising_report+0xb0>
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    4ece:	783b      	ldrb	r3, [r7, #0]
    4ed0:	f003 030f 	and.w	r3, r3, #15
    4ed4:	2b01      	cmp	r3, #1
    4ed6:	787b      	ldrb	r3, [r7, #1]
		data_len = (adv->len - BDADDR_SIZE);
    4ed8:	bf1c      	itt	ne
    4eda:	1f9c      	subne	r4, r3, #6
    4edc:	b2e4      	uxtbne	r4, r4
	} else {
		data_len = 0;
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4ede:	4419      	add	r1, r3
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*prssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4ee0:	f104 020b 	add.w	r2, r4, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4ee4:	7a8e      	ldrb	r6, [r1, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4ee6:	b2d2      	uxtb	r2, r2
    4ee8:	2102      	movs	r1, #2
    4eea:	f7ff ffb3 	bl	4e54 <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    4eee:	2301      	movs	r3, #1
    4ef0:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    4ef2:	783b      	ldrb	r3, [r7, #0]
    4ef4:	aa02      	add	r2, sp, #8
    4ef6:	f003 030f 	and.w	r3, r3, #15
    4efa:	4413      	add	r3, r2
	} else {
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */

		adv_info->addr.type = adv->tx_addr;
    4efc:	4639      	mov	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
    4efe:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    4f02:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    4f04:	f811 3b02 	ldrb.w	r3, [r1], #2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4f08:	4605      	mov	r5, r0
		adv_info->addr.type = adv->tx_addr;
    4f0a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4f0e:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    4f10:	2206      	movs	r2, #6
    4f12:	3003      	adds	r0, #3
    4f14:	f7fb fb81 	bl	61a <memcpy>
		       sizeof(bt_addr_t));
	}

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4f18:	350a      	adds	r5, #10
	adv_info->length = data_len;
    4f1a:	f805 4c01 	strb.w	r4, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4f1e:	4276      	negs	r6, r6
    4f20:	b276      	sxtb	r6, r6
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4f22:	4622      	mov	r2, r4
    4f24:	f107 0108 	add.w	r1, r7, #8
    4f28:	4628      	mov	r0, r5
    4f2a:	f7fb fb76 	bl	61a <memcpy>
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
    4f2e:	552e      	strb	r6, [r5, r4]
}
    4f30:	b003      	add	sp, #12
    4f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f34:	20004f68 	.word	0x20004f68
    4f38:	20004f70 	.word	0x20004f70

00004f3c <le_set_adv_param.isra.21>:
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    4f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f3e:	b08b      	sub	sp, #44	; 0x2c
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4f40:	2400      	movs	r4, #0
    4f42:	7a03      	ldrb	r3, [r0, #8]
    4f44:	f8b0 2003 	ldrh.w	r2, [r0, #3]
    4f48:	7806      	ldrb	r6, [r0, #0]
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    4f4a:	460d      	mov	r5, r1
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4f4c:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    4f50:	9409      	str	r4, [sp, #36]	; 0x24
    4f52:	7d47      	ldrb	r7, [r0, #21]
    4f54:	9708      	str	r7, [sp, #32]
    4f56:	7d07      	ldrb	r7, [r0, #20]
    4f58:	9707      	str	r7, [sp, #28]
    4f5a:	7cc7      	ldrb	r7, [r0, #19]
    4f5c:	9706      	str	r7, [sp, #24]
    4f5e:	7c87      	ldrb	r7, [r0, #18]
    4f60:	9705      	str	r7, [sp, #20]
    4f62:	9404      	str	r4, [sp, #16]
    4f64:	7c04      	ldrb	r4, [r0, #16]
    4f66:	9403      	str	r4, [sp, #12]
    4f68:	79c4      	ldrb	r4, [r0, #7]
    4f6a:	9402      	str	r4, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    4f6c:	f100 040a 	add.w	r4, r0, #10
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4f70:	9401      	str	r4, [sp, #4]
    4f72:	7a40      	ldrb	r0, [r0, #9]
    4f74:	9000      	str	r0, [sp, #0]
    4f76:	4630      	mov	r0, r6
    4f78:	f005 fa6a 	bl	a450 <ll_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4f7c:	2102      	movs	r1, #2
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4f7e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4f80:	4628      	mov	r0, r5
    4f82:	f7ff ff45 	bl	4e10 <cmd_complete>
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    4f86:	7004      	strb	r4, [r0, #0]
}
    4f88:	b00b      	add	sp, #44	; 0x2c
    4f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004f8c <le_set_adv_enable.isra.25>:
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    4f8c:	b538      	push	{r3, r4, r5, lr}
	status = ll_adv_enable(cmd->enable);
    4f8e:	7800      	ldrb	r0, [r0, #0]
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    4f90:	460d      	mov	r5, r1
	status = ll_adv_enable(cmd->enable);
    4f92:	f005 fcc3 	bl	a91c <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4f96:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    4f98:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4f9a:	4628      	mov	r0, r5
    4f9c:	f7ff ff38 	bl	4e10 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    4fa0:	2c00      	cmp	r4, #0
    4fa2:	bf0c      	ite	eq
    4fa4:	2300      	moveq	r3, #0
    4fa6:	230c      	movne	r3, #12
    4fa8:	7003      	strb	r3, [r0, #0]
    4faa:	bd38      	pop	{r3, r4, r5, pc}

00004fac <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    4fac:	b570      	push	{r4, r5, r6, lr}
    4fae:	4604      	mov	r4, r0
    4fb0:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4fb2:	4b13      	ldr	r3, [pc, #76]	; (5000 <le_remote_feat_complete+0x54>)
{
    4fb4:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fba:	2200      	movs	r2, #0
    4fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4fc0:	4313      	orrs	r3, r2
{
    4fc2:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4fc4:	d01b      	beq.n	4ffe <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    4fc6:	4b0f      	ldr	r3, [pc, #60]	; (5004 <le_remote_feat_complete+0x58>)
    4fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    4fcc:	2300      	movs	r3, #0
    4fce:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4fd2:	4313      	orrs	r3, r2
    4fd4:	d013      	beq.n	4ffe <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    4fd6:	220b      	movs	r2, #11
    4fd8:	2104      	movs	r1, #4
    4fda:	f7ff ff3b 	bl	4e54 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    4fde:	2208      	movs	r2, #8
	sep->status = status;
    4fe0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4fe2:	f8a0 6001 	strh.w	r6, [r0, #1]
    4fe6:	3003      	adds	r0, #3
	if (!status) {
    4fe8:	b924      	cbnz	r4, 4ff4 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    4fea:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    4fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    4ff0:	f7fb bb13 	b.w	61a <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4ff4:	2100      	movs	r1, #0
}
    4ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4ffa:	f7fb bb3a 	b.w	672 <memset>
    4ffe:	bd70      	pop	{r4, r5, r6, pc}
    5000:	20004f68 	.word	0x20004f68
    5004:	20004f70 	.word	0x20004f70

00005008 <bt_addr_le_to_str.constprop.37>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    5008:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    500a:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    500c:	b08a      	sub	sp, #40	; 0x28
    500e:	4604      	mov	r4, r0
    5010:	460e      	mov	r6, r1
    5012:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    5014:	2b03      	cmp	r3, #3
    5016:	d820      	bhi.n	505a <bt_addr_le_to_str.constprop.37+0x52>
    5018:	e8df f003 	tbb	[pc, r3]
    501c:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    5020:	4911      	ldr	r1, [pc, #68]	; (5068 <bt_addr_le_to_str.constprop.37+0x60>)
		strcpy(type, "random");
    5022:	4628      	mov	r0, r5
    5024:	f7fb fabc 	bl	5a0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5028:	7862      	ldrb	r2, [r4, #1]
    502a:	9204      	str	r2, [sp, #16]
    502c:	78a2      	ldrb	r2, [r4, #2]
    502e:	9203      	str	r2, [sp, #12]
    5030:	78e2      	ldrb	r2, [r4, #3]
    5032:	9202      	str	r2, [sp, #8]
    5034:	7922      	ldrb	r2, [r4, #4]
    5036:	9201      	str	r2, [sp, #4]
    5038:	7962      	ldrb	r2, [r4, #5]
    503a:	9200      	str	r2, [sp, #0]
    503c:	79a3      	ldrb	r3, [r4, #6]
    503e:	9505      	str	r5, [sp, #20]
    5040:	4a0a      	ldr	r2, [pc, #40]	; (506c <bt_addr_le_to_str.constprop.37+0x64>)
    5042:	211b      	movs	r1, #27
    5044:	4630      	mov	r0, r6
    5046:	f7fc f9c3 	bl	13d0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    504a:	b00a      	add	sp, #40	; 0x28
    504c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    504e:	4908      	ldr	r1, [pc, #32]	; (5070 <bt_addr_le_to_str.constprop.37+0x68>)
    5050:	e7e7      	b.n	5022 <bt_addr_le_to_str.constprop.37+0x1a>
		strcpy(type, "public id");
    5052:	4908      	ldr	r1, [pc, #32]	; (5074 <bt_addr_le_to_str.constprop.37+0x6c>)
    5054:	e7e5      	b.n	5022 <bt_addr_le_to_str.constprop.37+0x1a>
		strcpy(type, "random id");
    5056:	4908      	ldr	r1, [pc, #32]	; (5078 <bt_addr_le_to_str.constprop.37+0x70>)
    5058:	e7e3      	b.n	5022 <bt_addr_le_to_str.constprop.37+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    505a:	4a08      	ldr	r2, [pc, #32]	; (507c <bt_addr_le_to_str.constprop.37+0x74>)
    505c:	210a      	movs	r1, #10
    505e:	4628      	mov	r0, r5
    5060:	f7fc f9b6 	bl	13d0 <snprintk>
    5064:	e7e0      	b.n	5028 <bt_addr_le_to_str.constprop.37+0x20>
    5066:	bf00      	nop
    5068:	0000d1de 	.word	0x0000d1de
    506c:	0000d200 	.word	0x0000d200
    5070:	0000d1e5 	.word	0x0000d1e5
    5074:	0000d1ec 	.word	0x0000d1ec
    5078:	0000d1f6 	.word	0x0000d1f6
    507c:	0000e127 	.word	0x0000e127

00005080 <le_adv_ext_report>:
{
    5080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5084:	460d      	mov	r5, r1
		  offsetof(struct pdu_adv, payload) + adv->len];
    5086:	7841      	ldrb	r1, [r0, #1]
{
    5088:	4616      	mov	r6, r2
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    508a:	186a      	adds	r2, r5, r1
{
    508c:	b090      	sub	sp, #64	; 0x40
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    508e:	7a97      	ldrb	r7, [r2, #10]
    5090:	427f      	negs	r7, r7
    5092:	b27f      	sxtb	r7, r7
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    5094:	9704      	str	r7, [sp, #16]
    5096:	7802      	ldrb	r2, [r0, #0]
    5098:	9101      	str	r1, [sp, #4]
{
    509a:	4604      	mov	r4, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    509c:	09d0      	lsrs	r0, r2, #7
    509e:	9003      	str	r0, [sp, #12]
    50a0:	f3c2 1080 	ubfx	r0, r2, #6, #1
    50a4:	f002 020f 	and.w	r2, r2, #15
    50a8:	9002      	str	r0, [sp, #8]
    50aa:	9200      	str	r2, [sp, #0]
    50ac:	493f      	ldr	r1, [pc, #252]	; (51ac <le_adv_ext_report+0x12c>)
    50ae:	4a40      	ldr	r2, [pc, #256]	; (51b0 <le_adv_ext_report+0x130>)
    50b0:	2004      	movs	r0, #4
    50b2:	f7fd f8ed 	bl	2290 <bt_log>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    50b6:	7823      	ldrb	r3, [r4, #0]
    50b8:	f003 030f 	and.w	r3, r3, #15
    50bc:	2b07      	cmp	r3, #7
    50be:	d16e      	bne.n	519e <le_adv_ext_report+0x11e>
    50c0:	7863      	ldrb	r3, [r4, #1]
    50c2:	2b00      	cmp	r3, #0
    50c4:	d06b      	beq.n	519e <le_adv_ext_report+0x11e>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    50c6:	78a3      	ldrb	r3, [r4, #2]
    50c8:	493a      	ldr	r1, [pc, #232]	; (51b4 <le_adv_ext_report+0x134>)
    50ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    50ce:	9200      	str	r2, [sp, #0]
    50d0:	099b      	lsrs	r3, r3, #6
    50d2:	2004      	movs	r0, #4
    50d4:	4a36      	ldr	r2, [pc, #216]	; (51b0 <le_adv_ext_report+0x130>)
    50d6:	f7fd f8db 	bl	2290 <bt_log>
		if (!p->ext_hdr_len) {
    50da:	78a3      	ldrb	r3, [r4, #2]
    50dc:	0698      	lsls	r0, r3, #26
    50de:	d05b      	beq.n	5198 <le_adv_ext_report+0x118>
		if (h->adv_addr) {
    50e0:	78e3      	ldrb	r3, [r4, #3]
    50e2:	07d9      	lsls	r1, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    50e4:	f104 0504 	add.w	r5, r4, #4
		if (h->adv_addr) {
    50e8:	d518      	bpl.n	511c <le_adv_ext_report+0x9c>
			addr.type = adv->tx_addr;
    50ea:	7823      	ldrb	r3, [r4, #0]
    50ec:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    50f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    50f4:	f808 3d24 	strb.w	r3, [r8, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    50f8:	2206      	movs	r2, #6
    50fa:	4629      	mov	r1, r5
    50fc:	f10d 001d 	add.w	r0, sp, #29
    5100:	f7fb fa8b 	bl	61a <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5104:	a909      	add	r1, sp, #36	; 0x24
    5106:	4640      	mov	r0, r8
    5108:	f7ff ff7e 	bl	5008 <bt_addr_le_to_str.constprop.37>
			BT_WARN("AdvA: %s", addr_str);
    510c:	ab09      	add	r3, sp, #36	; 0x24
    510e:	4a28      	ldr	r2, [pc, #160]	; (51b0 <le_adv_ext_report+0x130>)
    5110:	4929      	ldr	r1, [pc, #164]	; (51b8 <le_adv_ext_report+0x138>)
    5112:	2004      	movs	r0, #4
			ptr += BDADDR_SIZE;
    5114:	f104 050a 	add.w	r5, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    5118:	f7fd f8ba 	bl	2290 <bt_log>
		if(h->tgt_addr){
    511c:	78e3      	ldrb	r3, [r4, #3]
    511e:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    5120:	bf48      	it	mi
    5122:	3506      	addmi	r5, #6
		if(h->adi){
    5124:	0718      	lsls	r0, r3, #28
			ptr += sizeof(*adi_ptr);
    5126:	bf48      	it	mi
    5128:	3502      	addmi	r5, #2
		if(h->aux_ptr){
    512a:	06d9      	lsls	r1, r3, #27
			ptr += sizeof(*ap);
    512c:	bf48      	it	mi
    512e:	3503      	addmi	r5, #3
		if (h->tx_pwr) {
    5130:	065a      	lsls	r2, r3, #25
    5132:	d506      	bpl.n	5142 <le_adv_ext_report+0xc2>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    5134:	f915 3b01 	ldrsb.w	r3, [r5], #1
    5138:	4a1d      	ldr	r2, [pc, #116]	; (51b0 <le_adv_ext_report+0x130>)
    513a:	4920      	ldr	r1, [pc, #128]	; (51bc <le_adv_ext_report+0x13c>)
    513c:	2004      	movs	r0, #4
    513e:	f7fd f8a7 	bl	2290 <bt_log>
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    5142:	78a2      	ldrb	r2, [r4, #2]
    5144:	f3c2 0305 	ubfx	r3, r2, #0, #6
    5148:	7862      	ldrb	r2, [r4, #1]
    514a:	1ad2      	subs	r2, r2, r3
    514c:	b2d2      	uxtb	r2, r2
    514e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    5152:	3218      	adds	r2, #24
    5154:	4630      	mov	r0, r6
    5156:	b2d2      	uxtb	r2, r2
    5158:	210d      	movs	r1, #13
    515a:	f7ff fe7b 	bl	4e54 <meta_evt>
		sep->num_reports = 1;
    515e:	2301      	movs	r3, #1
    5160:	7003      	strb	r3, [r0, #0]
		if(h->adv_addr){
    5162:	78e3      	ldrb	r3, [r4, #3]
    5164:	07db      	lsls	r3, r3, #31
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    5166:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    516a:	4606      	mov	r6, r0
		if(h->adv_addr){
    516c:	d508      	bpl.n	5180 <le_adv_ext_report+0x100>
			adv_info->addr.type = addr.type;
    516e:	f89d 301c 	ldrb.w	r3, [sp, #28]
    5172:	7083      	strb	r3, [r0, #2]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    5174:	2206      	movs	r2, #6
    5176:	f10d 011d 	add.w	r1, sp, #29
    517a:	3003      	adds	r0, #3
    517c:	f7fb fa4d 	bl	61a <memcpy>
		adv_info->evt_type = 0x07;
    5180:	2307      	movs	r3, #7
    5182:	7073      	strb	r3, [r6, #1]
		adv_info->length = data_len;
    5184:	f886 8017 	strb.w	r8, [r6, #23]
		memcpy(&adv_info->data[0], ptr, data_len);
    5188:	3618      	adds	r6, #24
    518a:	4642      	mov	r2, r8
    518c:	4629      	mov	r1, r5
    518e:	4630      	mov	r0, r6
    5190:	f7fb fa43 	bl	61a <memcpy>
		*prssi = rssi;
    5194:	f806 7008 	strb.w	r7, [r6, r8]
}
    5198:	b010      	add	sp, #64	; 0x40
    519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		le_advertising_report(pdu_data, b, buf);
    519e:	4632      	mov	r2, r6
    51a0:	4629      	mov	r1, r5
    51a2:	4620      	mov	r0, r4
    51a4:	f7ff fe6c 	bl	4e80 <le_advertising_report>
	return;
    51a8:	e7f6      	b.n	5198 <le_adv_ext_report+0x118>
    51aa:	bf00      	nop
    51ac:	0000e12e 	.word	0x0000e12e
    51b0:	0000dffd 	.word	0x0000dffd
    51b4:	0000e16f 	.word	0x0000e16f
    51b8:	0000e194 	.word	0x0000e194
    51bc:	0000e1a1 	.word	0x0000e1a1

000051c0 <sys_get_le64>:
{
    51c0:	4603      	mov	r3, r0
}
    51c2:	6800      	ldr	r0, [r0, #0]
    51c4:	6859      	ldr	r1, [r3, #4]
    51c6:	4770      	bx	lr

000051c8 <hci_cmd_handle>:
{
    51c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    51ca:	8981      	ldrh	r1, [r0, #12]
{
    51cc:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    51ce:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    51d0:	2902      	cmp	r1, #2
{
    51d2:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    51d4:	9503      	str	r5, [sp, #12]
	if (cmd->len < sizeof(*chdr)) {
    51d6:	d807      	bhi.n	51e8 <hci_cmd_handle+0x20>
		BT_ERR("No HCI Command header");
    51d8:	4ac1      	ldr	r2, [pc, #772]	; (54e0 <hci_cmd_handle+0x318>)
    51da:	49c2      	ldr	r1, [pc, #776]	; (54e4 <hci_cmd_handle+0x31c>)
		BT_ERR("Invalid HCI CMD packet length");
    51dc:	2003      	movs	r0, #3
    51de:	f7fd f857 	bl	2290 <bt_log>
		return NULL;
    51e2:	4628      	mov	r0, r5
}
    51e4:	b00f      	add	sp, #60	; 0x3c
    51e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    51e8:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    51ea:	4ebf      	ldr	r6, [pc, #764]	; (54e8 <hci_cmd_handle+0x320>)
    51ec:	781a      	ldrb	r2, [r3, #0]
    51ee:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    51f0:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    51f2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    51f6:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    51f8:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    51fa:	d902      	bls.n	5202 <hci_cmd_handle+0x3a>
		BT_ERR("Invalid HCI CMD packet length");
    51fc:	4ab8      	ldr	r2, [pc, #736]	; (54e0 <hci_cmd_handle+0x318>)
    51fe:	49bb      	ldr	r1, [pc, #748]	; (54ec <hci_cmd_handle+0x324>)
    5200:	e7ec      	b.n	51dc <hci_cmd_handle+0x14>
	net_buf_pull(cmd, sizeof(*chdr));
    5202:	2103      	movs	r1, #3
    5204:	f104 0008 	add.w	r0, r4, #8
    5208:	f006 fb11 	bl	b82e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    520c:	8833      	ldrh	r3, [r6, #0]
    520e:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    5212:	0a9b      	lsrs	r3, r3, #10
    5214:	2b04      	cmp	r3, #4
    5216:	d06b      	beq.n	52f0 <hci_cmd_handle+0x128>
    5218:	d80e      	bhi.n	5238 <hci_cmd_handle+0x70>
    521a:	2b03      	cmp	r3, #3
    521c:	d02c      	beq.n	5278 <hci_cmd_handle+0xb0>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    521e:	2101      	movs	r1, #1
    5220:	a803      	add	r0, sp, #12
    5222:	f7ff fdf5 	bl	4e10 <cmd_complete>
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    5226:	4aae      	ldr	r2, [pc, #696]	; (54e0 <hci_cmd_handle+0x318>)
    5228:	49b1      	ldr	r1, [pc, #708]	; (54f0 <hci_cmd_handle+0x328>)
		ccst = cmd_complete(&evt, sizeof(*ccst));
    522a:	4604      	mov	r4, r0
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    522c:	2003      	movs	r0, #3
    522e:	f7fd f82f 	bl	2290 <bt_log>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    5232:	2301      	movs	r3, #1
    5234:	7023      	strb	r3, [r4, #0]
    5236:	e034      	b.n	52a2 <hci_cmd_handle+0xda>
	switch (BT_OGF(_opcode)) {
    5238:	2b08      	cmp	r3, #8
    523a:	f000 80e6 	beq.w	540a <hci_cmd_handle+0x242>
    523e:	2b3f      	cmp	r3, #63	; 0x3f
    5240:	d1ed      	bne.n	521e <hci_cmd_handle+0x56>
	switch (ocf) {
    5242:	3a01      	subs	r2, #1
    5244:	2a09      	cmp	r2, #9
    5246:	d8ea      	bhi.n	521e <hci_cmd_handle+0x56>
    5248:	a301      	add	r3, pc, #4	; (adr r3, 5250 <hci_cmd_handle+0x88>)
    524a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    524e:	bf00      	nop
    5250:	000055ff 	.word	0x000055ff
    5254:	0000562d 	.word	0x0000562d
    5258:	00005655 	.word	0x00005655
    525c:	0000521f 	.word	0x0000521f
    5260:	0000521f 	.word	0x0000521f
    5264:	00005699 	.word	0x00005699
    5268:	0000521f 	.word	0x0000521f
    526c:	0000566b 	.word	0x0000566b
    5270:	000056a3 	.word	0x000056a3
    5274:	0000570f 	.word	0x0000570f
	switch (ocf) {
    5278:	2a03      	cmp	r2, #3
    527a:	d014      	beq.n	52a6 <hci_cmd_handle+0xde>
    527c:	d808      	bhi.n	5290 <hci_cmd_handle+0xc8>
    527e:	2a01      	cmp	r2, #1
    5280:	d1cd      	bne.n	521e <hci_cmd_handle+0x56>
	event_mask = sys_get_le64(cmd->events);
    5282:	68a0      	ldr	r0, [r4, #8]
    5284:	f7ff ff9c 	bl	51c0 <sys_get_le64>
    5288:	4b9a      	ldr	r3, [pc, #616]	; (54f4 <hci_cmd_handle+0x32c>)
    528a:	e9c3 0100 	strd	r0, r1, [r3]
    528e:	e003      	b.n	5298 <hci_cmd_handle+0xd0>
	switch (ocf) {
    5290:	2a2d      	cmp	r2, #45	; 0x2d
    5292:	d017      	beq.n	52c4 <hci_cmd_handle+0xfc>
    5294:	2a63      	cmp	r2, #99	; 0x63
    5296:	d1c2      	bne.n	521e <hci_cmd_handle+0x56>
	ccst = cmd_complete(evt, sizeof(*ccst));
    5298:	2101      	movs	r1, #1
    529a:	a803      	add	r0, sp, #12
    529c:	f7ff fdb8 	bl	4e10 <cmd_complete>
	ccst->status = 0x00;
    52a0:	7005      	strb	r5, [r0, #0]
	return evt;
    52a2:	9803      	ldr	r0, [sp, #12]
    52a4:	e79e      	b.n	51e4 <hci_cmd_handle+0x1c>
	event_mask = DEFAULT_EVENT_MASK;
    52a6:	4b93      	ldr	r3, [pc, #588]	; (54f4 <hci_cmd_handle+0x32c>)
    52a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    52ac:	f641 71ff 	movw	r1, #8191	; 0x1fff
    52b0:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    52b4:	4b90      	ldr	r3, [pc, #576]	; (54f8 <hci_cmd_handle+0x330>)
    52b6:	201f      	movs	r0, #31
    52b8:	2100      	movs	r1, #0
    52ba:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    52be:	f004 fbb9 	bl	9a34 <ll_reset>
    52c2:	e7e9      	b.n	5298 <hci_cmd_handle+0xd0>
    52c4:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    52c6:	2104      	movs	r1, #4
    52c8:	a803      	add	r0, sp, #12
	handle = sys_le16_to_cpu(cmd->handle);
    52ca:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    52cc:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    52ce:	f7ff fd9f 	bl	4e10 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    52d2:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    52d4:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    52d6:	1cc2      	adds	r2, r0, #3
    52d8:	4639      	mov	r1, r7
    52da:	4630      	mov	r0, r6
    52dc:	f004 fc40 	bl	9b60 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    52e0:	2800      	cmp	r0, #0
    52e2:	bf0c      	ite	eq
    52e4:	2300      	moveq	r3, #0
    52e6:	2302      	movne	r3, #2
    52e8:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    52ea:	f8a4 5001 	strh.w	r5, [r4, #1]
    52ee:	e7d8      	b.n	52a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    52f0:	3a01      	subs	r2, #1
    52f2:	2a08      	cmp	r2, #8
    52f4:	d893      	bhi.n	521e <hci_cmd_handle+0x56>
    52f6:	a301      	add	r3, pc, #4	; (adr r3, 52fc <hci_cmd_handle+0x134>)
    52f8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    52fc:	00005321 	.word	0x00005321
    5300:	0000534b 	.word	0x0000534b
    5304:	000053d7 	.word	0x000053d7
    5308:	0000521f 	.word	0x0000521f
    530c:	0000521f 	.word	0x0000521f
    5310:	0000521f 	.word	0x0000521f
    5314:	0000521f 	.word	0x0000521f
    5318:	0000521f 	.word	0x0000521f
    531c:	000053f3 	.word	0x000053f3
	rp = cmd_complete(evt, sizeof(*rp));
    5320:	2109      	movs	r1, #9
    5322:	a803      	add	r0, sp, #12
    5324:	f7ff fd74 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5328:	2300      	movs	r3, #0
    532a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    532c:	7083      	strb	r3, [r0, #2]
    532e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    5330:	f06f 030e 	mvn.w	r3, #14
    5334:	7143      	strb	r3, [r0, #5]
    5336:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    5338:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    533a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    533c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    5340:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    5342:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    5344:	71c3      	strb	r3, [r0, #7]
    5346:	7203      	strb	r3, [r0, #8]
    5348:	e7ab      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    534a:	2141      	movs	r1, #65	; 0x41
    534c:	a803      	add	r0, sp, #12
    534e:	f7ff fd5f 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5352:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5354:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    5356:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    5358:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    535c:	f7fb f989 	bl	672 <memset>
	rp->commands[2] |= BIT(7);
    5360:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    5362:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    5364:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
    5366:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    5368:	f063 037f 	orn	r3, r3, #127	; 0x7f
    536c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    536e:	79a3      	ldrb	r3, [r4, #6]
    5370:	f063 033f 	orn	r3, r3, #63	; 0x3f
    5374:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    5376:	7ae3      	ldrb	r3, [r4, #11]
    5378:	f043 0304 	orr.w	r3, r3, #4
    537c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    537e:	7be3      	ldrb	r3, [r4, #15]
    5380:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    5384:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    5386:	7c23      	ldrb	r3, [r4, #16]
    5388:	f043 0302 	orr.w	r3, r3, #2
    538c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    538e:	7de3      	ldrb	r3, [r4, #23]
    5390:	f043 0304 	orr.w	r3, r3, #4
    5394:	75e3      	strb	r3, [r4, #23]
	rp->commands[36] |= BIT(1);
    5396:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	rp->commands[36] |= BIT(2) | BIT(3) | BIT(5) | BIT(7) | BIT(6) ;
    539a:	f063 0311 	orn	r3, r3, #17
    539e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	rp->commands[37] |= BIT(5);
    53a2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[27] |= BIT(6) | BIT(7);
    53a6:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[37] |= BIT(5);
    53aa:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[27] |= BIT(6) | BIT(7);
    53ae:	7720      	strb	r0, [r4, #28]
	rp->commands[37] |= BIT(5);
    53b0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(3);
    53b4:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[38] |= BIT(7);
    53b6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    53ba:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    53be:	f061 0108 	orn	r1, r1, #8
	rp->commands[26] |= BIT(0) | BIT(1);
    53c2:	f062 023c 	orn	r2, r2, #60	; 0x3c
	rp->commands[38] |= BIT(7);
    53c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    53ca:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    53cc:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    53ce:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    53d0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    53d4:	e765      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    53d6:	2109      	movs	r1, #9
    53d8:	a803      	add	r0, sp, #12
    53da:	f7ff fd19 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    53de:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    53e0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    53e2:	2208      	movs	r2, #8
	rp->status = 0x00;
    53e4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    53e8:	f7fb f943 	bl	672 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    53ec:	2360      	movs	r3, #96	; 0x60
    53ee:	7163      	strb	r3, [r4, #5]
    53f0:	e757      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    53f2:	2107      	movs	r1, #7
    53f4:	a803      	add	r0, sp, #12
    53f6:	f7ff fd0b 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    53fa:	4601      	mov	r1, r0
    53fc:	2300      	movs	r3, #0
    53fe:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    5402:	4618      	mov	r0, r3
    5404:	f7ff fb4e 	bl	4aa4 <ll_addr_get>
    5408:	e74b      	b.n	52a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    540a:	2a10      	cmp	r2, #16
    540c:	f000 80a6 	beq.w	555c <hci_cmd_handle+0x394>
    5410:	d847      	bhi.n	54a2 <hci_cmd_handle+0x2da>
    5412:	2a06      	cmp	r2, #6
    5414:	f000 80e3 	beq.w	55de <hci_cmd_handle+0x416>
    5418:	d822      	bhi.n	5460 <hci_cmd_handle+0x298>
    541a:	2a02      	cmp	r2, #2
    541c:	d07f      	beq.n	551e <hci_cmd_handle+0x356>
    541e:	d80f      	bhi.n	5440 <hci_cmd_handle+0x278>
    5420:	2a01      	cmp	r2, #1
    5422:	f47f aefc 	bne.w	521e <hci_cmd_handle+0x56>
	le_event_mask = sys_get_le64(cmd->events);
    5426:	68a0      	ldr	r0, [r4, #8]
    5428:	f7ff feca 	bl	51c0 <sys_get_le64>
    542c:	4b32      	ldr	r3, [pc, #200]	; (54f8 <hci_cmd_handle+0x330>)
    542e:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    5432:	2101      	movs	r1, #1
    5434:	a803      	add	r0, sp, #12
    5436:	f7ff fceb 	bl	4e10 <cmd_complete>
	ccst->status = 0x00;
    543a:	2300      	movs	r3, #0
    543c:	7003      	strb	r3, [r0, #0]
    543e:	e730      	b.n	52a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    5440:	2a03      	cmp	r2, #3
    5442:	d079      	beq.n	5538 <hci_cmd_handle+0x370>
    5444:	2a05      	cmp	r2, #5
    5446:	f47f aeea 	bne.w	521e <hci_cmd_handle+0x56>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    544a:	68a1      	ldr	r1, [r4, #8]
    544c:	2001      	movs	r0, #1
    544e:	f7ff fb43 	bl	4ad8 <ll_addr_set>
	status = ll_wl_remove(&cmd->addr);
    5452:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    5454:	2101      	movs	r1, #1
    5456:	a803      	add	r0, sp, #12
    5458:	f7ff fcda 	bl	4e10 <cmd_complete>
	ccst->status = status;
    545c:	7004      	strb	r4, [r0, #0]
    545e:	e720      	b.n	52a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    5460:	2a09      	cmp	r2, #9
    5462:	f000 80c1 	beq.w	55e8 <hci_cmd_handle+0x420>
    5466:	d80b      	bhi.n	5480 <hci_cmd_handle+0x2b8>
    5468:	2a07      	cmp	r2, #7
    546a:	f000 8148 	beq.w	56fe <hci_cmd_handle+0x536>
    546e:	2a08      	cmp	r2, #8
    5470:	f47f aed5 	bne.w	521e <hci_cmd_handle+0x56>
    5474:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    5476:	1c59      	adds	r1, r3, #1
    5478:	7818      	ldrb	r0, [r3, #0]
    547a:	f005 f9a7 	bl	a7cc <ll_adv_data_set>
    547e:	e7d8      	b.n	5432 <hci_cmd_handle+0x26a>
	switch (ocf) {
    5480:	2a0a      	cmp	r2, #10
    5482:	f000 80b7 	beq.w	55f4 <hci_cmd_handle+0x42c>
    5486:	2a0f      	cmp	r2, #15
    5488:	f47f aec9 	bne.w	521e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    548c:	2102      	movs	r1, #2
    548e:	a803      	add	r0, sp, #12
    5490:	f7ff fcbe 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5494:	2300      	movs	r3, #0
    5496:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    5498:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    549a:	f005 fab3 	bl	aa04 <ll_wl_size_get>
    549e:	7060      	strb	r0, [r4, #1]
    54a0:	e6ff      	b.n	52a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    54a2:	2a1c      	cmp	r2, #28
    54a4:	d07f      	beq.n	55a6 <hci_cmd_handle+0x3de>
    54a6:	d812      	bhi.n	54ce <hci_cmd_handle+0x306>
    54a8:	2a12      	cmp	r2, #18
    54aa:	d064      	beq.n	5576 <hci_cmd_handle+0x3ae>
    54ac:	d35f      	bcc.n	556e <hci_cmd_handle+0x3a6>
    54ae:	2a17      	cmp	r2, #23
    54b0:	d065      	beq.n	557e <hci_cmd_handle+0x3b6>
    54b2:	2a18      	cmp	r2, #24
    54b4:	f47f aeb3 	bne.w	521e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    54b8:	2109      	movs	r1, #9
    54ba:	a803      	add	r0, sp, #12
    54bc:	f7ff fca8 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    54c0:	2300      	movs	r3, #0
    54c2:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    54c6:	2108      	movs	r1, #8
    54c8:	f7ff fb26 	bl	4b18 <bt_rand>
    54cc:	e6e9      	b.n	52a2 <hci_cmd_handle+0xda>
	switch (ocf) {
    54ce:	2a38      	cmp	r2, #56	; 0x38
    54d0:	f000 808a 	beq.w	55e8 <hci_cmd_handle+0x420>
    54d4:	d812      	bhi.n	54fc <hci_cmd_handle+0x334>
    54d6:	2a36      	cmp	r2, #54	; 0x36
    54d8:	f000 8081 	beq.w	55de <hci_cmd_handle+0x416>
    54dc:	2a37      	cmp	r2, #55	; 0x37
    54de:	e7c7      	b.n	5470 <hci_cmd_handle+0x2a8>
    54e0:	0000dfee 	.word	0x0000dfee
    54e4:	0000e053 	.word	0x0000e053
    54e8:	200009f4 	.word	0x200009f4
    54ec:	0000e06d 	.word	0x0000e06d
    54f0:	0000e0ab 	.word	0x0000e0ab
    54f4:	20004f68 	.word	0x20004f68
    54f8:	20004f70 	.word	0x20004f70
    54fc:	2a39      	cmp	r2, #57	; 0x39
    54fe:	d079      	beq.n	55f4 <hci_cmd_handle+0x42c>
    5500:	2a4b      	cmp	r2, #75	; 0x4b
    5502:	f47f ae8c 	bne.w	521e <hci_cmd_handle+0x56>
	rp = cmd_complete(evt, sizeof(*rp));
    5506:	2103      	movs	r1, #3
    5508:	a803      	add	r0, sp, #12
    550a:	f7ff fc81 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    550e:	4601      	mov	r1, r0
    5510:	2300      	movs	r3, #0
    5512:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    5516:	3001      	adds	r0, #1
    5518:	f7ff fafa 	bl	4b10 <ll_tx_pwr_get>
    551c:	e6c1      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    551e:	2104      	movs	r1, #4
    5520:	a803      	add	r0, sp, #12
    5522:	f7ff fc75 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5526:	2300      	movs	r3, #0
    5528:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    552a:	f06f 0204 	mvn.w	r2, #4
    552e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    5530:	230a      	movs	r3, #10
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    5532:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    5534:	70c3      	strb	r3, [r0, #3]
    5536:	e6b4      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    5538:	2109      	movs	r1, #9
    553a:	a803      	add	r0, sp, #12
    553c:	f7ff fc68 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5540:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5542:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5544:	2208      	movs	r2, #8
	rp->status = 0x00;
    5546:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    554a:	f7fb f892 	bl	672 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    554e:	230c      	movs	r3, #12
    5550:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    5552:	2340      	movs	r3, #64	; 0x40
    5554:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    5556:	2301      	movs	r3, #1
    5558:	70e3      	strb	r3, [r4, #3]
    555a:	e6a2      	b.n	52a2 <hci_cmd_handle+0xda>
	ccst = cmd_complete(evt, sizeof(*ccst));
    555c:	2101      	movs	r1, #1
    555e:	a803      	add	r0, sp, #12
    5560:	f7ff fc56 	bl	4e10 <cmd_complete>
    5564:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    5566:	f005 fa4f 	bl	aa08 <ll_wl_clear>
    556a:	7020      	strb	r0, [r4, #0]
    556c:	e699      	b.n	52a2 <hci_cmd_handle+0xda>
	status = ll_wl_add(&cmd->addr);
    556e:	68a0      	ldr	r0, [r4, #8]
    5570:	f005 fa60 	bl	aa34 <ll_wl_add>
    5574:	e76d      	b.n	5452 <hci_cmd_handle+0x28a>
	status = ll_wl_remove(&cmd->addr);
    5576:	68a0      	ldr	r0, [r4, #8]
    5578:	f005 fa94 	bl	aaa4 <ll_wl_remove>
    557c:	e769      	b.n	5452 <hci_cmd_handle+0x28a>
    557e:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    5580:	2300      	movs	r3, #0
    5582:	aa04      	add	r2, sp, #16
    5584:	f100 0110 	add.w	r1, r0, #16
    5588:	f005 fb50 	bl	ac2c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    558c:	2111      	movs	r1, #17
    558e:	a803      	add	r0, sp, #12
    5590:	f7ff fc3e 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5594:	2300      	movs	r3, #0
	memcpy(rp->enc_data, enc_data, 16);
    5596:	2210      	movs	r2, #16
	rp->status = 0x00;
    5598:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    559c:	eb0d 0102 	add.w	r1, sp, r2
	memcpy(rp->info, build_info, sizeof(build_info));
    55a0:	f7fb f83b 	bl	61a <memcpy>
    55a4:	e67d      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    55a6:	2109      	movs	r1, #9
    55a8:	a803      	add	r0, sp, #12
    55aa:	f7ff fc31 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    55ae:	4604      	mov	r4, r0
	rp = cmd_complete(evt, sizeof(*rp));
    55b0:	4606      	mov	r6, r0
	rp->status = 0x00;
    55b2:	f804 5b01 	strb.w	r5, [r4], #1
    55b6:	f006 fd3b 	bl	c030 <_impl_k_current_get>
	BT_DBG("states: 0x%08x%08x", (u32_t)(states >> 32),
    55ba:	2703      	movs	r7, #3
    55bc:	4603      	mov	r3, r0
    55be:	4a86      	ldr	r2, [pc, #536]	; (57d8 <hci_cmd_handle+0x610>)
    55c0:	4986      	ldr	r1, [pc, #536]	; (57dc <hci_cmd_handle+0x614>)
    55c2:	2007      	movs	r0, #7
    55c4:	e88d 00a0 	stmia.w	sp, {r5, r7}
    55c8:	f7fc fe62 	bl	2290 <bt_log>
	sys_put_le32(val, dst);
    55cc:	4621      	mov	r1, r4
    55ce:	4638      	mov	r0, r7
    55d0:	f7ff fc0a 	bl	4de8 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    55d4:	1d71      	adds	r1, r6, #5
    55d6:	4628      	mov	r0, r5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    55d8:	f7ff fc06 	bl	4de8 <sys_put_le32>
    55dc:	e661      	b.n	52a2 <hci_cmd_handle+0xda>
		le_set_adv_param(cmd, evt);
    55de:	a903      	add	r1, sp, #12
    55e0:	68a0      	ldr	r0, [r4, #8]
    55e2:	f7ff fcab 	bl	4f3c <le_set_adv_param.isra.21>
    55e6:	e65c      	b.n	52a2 <hci_cmd_handle+0xda>
    55e8:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    55ea:	1c59      	adds	r1, r3, #1
    55ec:	7818      	ldrb	r0, [r3, #0]
    55ee:	f005 f953 	bl	a898 <ll_scan_data_set>
    55f2:	e71e      	b.n	5432 <hci_cmd_handle+0x26a>
		le_set_adv_enable(cmd, evt);
    55f4:	a903      	add	r1, sp, #12
    55f6:	68a0      	ldr	r0, [r4, #8]
    55f8:	f7ff fcc8 	bl	4f8c <le_set_adv_enable.isra.25>
    55fc:	e651      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    55fe:	210d      	movs	r1, #13
    5600:	a803      	add	r0, sp, #12
    5602:	f7ff fc05 	bl	4e10 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    5606:	2202      	movs	r2, #2
    5608:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    560a:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    560c:	2201      	movs	r2, #1
    560e:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5610:	220b      	movs	r2, #11
	rp->status = 0x00;
    5612:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5614:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    5616:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    5618:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    561a:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    561c:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    561e:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    5620:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    5622:	7242      	strb	r2, [r0, #9]
    5624:	7283      	strb	r3, [r0, #10]
    5626:	72c3      	strb	r3, [r0, #11]
    5628:	7303      	strb	r3, [r0, #12]
    562a:	e63a      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    562c:	2141      	movs	r1, #65	; 0x41
    562e:	a803      	add	r0, sp, #12
    5630:	f7ff fbee 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5634:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    5636:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    5638:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    563a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    563e:	f7fb f818 	bl	672 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    5642:	7863      	ldrb	r3, [r4, #1]
    5644:	f063 0358 	orn	r3, r3, #88	; 0x58
    5648:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    564a:	78a3      	ldrb	r3, [r4, #2]
    564c:	f043 0303 	orr.w	r3, r3, #3
    5650:	70a3      	strb	r3, [r4, #2]
    5652:	e626      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    5654:	2109      	movs	r1, #9
    5656:	a803      	add	r0, sp, #12
    5658:	f7ff fbda 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    565c:	2100      	movs	r1, #0
    565e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    5662:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    5664:	f7fb f805 	bl	672 <memset>
    5668:	e61b      	b.n	52a2 <hci_cmd_handle+0xda>
	const char build_info[] = HCI_VS_BUILD_INFO;
    566a:	4b5d      	ldr	r3, [pc, #372]	; (57e0 <hci_cmd_handle+0x618>)
    566c:	aa04      	add	r2, sp, #16
    566e:	f103 0628 	add.w	r6, r3, #40	; 0x28
    5672:	4615      	mov	r5, r2
    5674:	6818      	ldr	r0, [r3, #0]
    5676:	6859      	ldr	r1, [r3, #4]
    5678:	4614      	mov	r4, r2
    567a:	c403      	stmia	r4!, {r0, r1}
    567c:	3308      	adds	r3, #8
    567e:	42b3      	cmp	r3, r6
    5680:	4622      	mov	r2, r4
    5682:	d1f7      	bne.n	5674 <hci_cmd_handle+0x4ac>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    5684:	2129      	movs	r1, #41	; 0x29
    5686:	a803      	add	r0, sp, #12
    5688:	f7ff fbc2 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    568c:	2300      	movs	r3, #0
    568e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    5692:	2228      	movs	r2, #40	; 0x28
    5694:	4629      	mov	r1, r5
    5696:	e783      	b.n	55a0 <hci_cmd_handle+0x3d8>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    5698:	68a1      	ldr	r1, [r4, #8]
    569a:	2000      	movs	r0, #0
    569c:	f7ff fa1c 	bl	4ad8 <ll_addr_set>
    56a0:	e6c7      	b.n	5432 <hci_cmd_handle+0x26a>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    56a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    56a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    56aa:	3201      	adds	r2, #1
    56ac:	d106      	bne.n	56bc <hci_cmd_handle+0x4f4>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    56ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    56b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    56b6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    56b8:	4293      	cmp	r3, r2
    56ba:	d020      	beq.n	56fe <hci_cmd_handle+0x536>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    56bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    56c0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    56c4:	07db      	lsls	r3, r3, #31
    56c6:	d51a      	bpl.n	56fe <hci_cmd_handle+0x536>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    56c8:	2118      	movs	r1, #24
    56ca:	a803      	add	r0, sp, #12
    56cc:	f7ff fba0 	bl	4e10 <cmd_complete>
		rp->status = 0x00;
    56d0:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    56d2:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    56d4:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    56d6:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    56d8:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    56da:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    56de:	1ca1      	adds	r1, r4, #2
    56e0:	f7ff fb82 	bl	4de8 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    56e4:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    56e8:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    56ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    56ee:	f063 033f 	orn	r3, r3, #63	; 0x3f
    56f2:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    56f4:	2210      	movs	r2, #16
    56f6:	4631      	mov	r1, r6
    56f8:	f104 0008 	add.w	r0, r4, #8
    56fc:	e7b2      	b.n	5664 <hci_cmd_handle+0x49c>
	rp = cmd_complete(evt, sizeof(*rp));
    56fe:	2102      	movs	r1, #2
    5700:	a803      	add	r0, sp, #12
    5702:	f7ff fb85 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5706:	2300      	movs	r3, #0
    5708:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    570a:	7043      	strb	r3, [r0, #1]
    570c:	e5c9      	b.n	52a2 <hci_cmd_handle+0xda>
	rp = cmd_complete(evt, sizeof(*rp));
    570e:	2121      	movs	r1, #33	; 0x21
    5710:	a803      	add	r0, sp, #12
    5712:	f7ff fb7d 	bl	4e10 <cmd_complete>
	rp->status = 0x00;
    5716:	4603      	mov	r3, r0
    5718:	2200      	movs	r2, #0
    571a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    5722:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    5724:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    5728:	3101      	adds	r1, #1
    572a:	d04b      	beq.n	57c4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    572c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    5730:	3101      	adds	r1, #1
    5732:	d047      	beq.n	57c4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    5734:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    5738:	3101      	adds	r1, #1
    573a:	d043      	beq.n	57c4 <hci_cmd_handle+0x5fc>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    573c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    5740:	3101      	adds	r1, #1
    5742:	d03f      	beq.n	57c4 <hci_cmd_handle+0x5fc>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    5744:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    5748:	4619      	mov	r1, r3
    574a:	f7ff fb4d 	bl	4de8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    574e:	1d61      	adds	r1, r4, #5
    5750:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    5754:	f7ff fb48 	bl	4de8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    5758:	f104 0109 	add.w	r1, r4, #9
    575c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    5760:	f7ff fb42 	bl	4de8 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    5764:	f104 010d 	add.w	r1, r4, #13
    5768:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    576c:	f7ff fb3c 	bl	4de8 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    5770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5774:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    5778:	3301      	adds	r3, #1
    577a:	f104 0311 	add.w	r3, r4, #17
    577e:	d027      	beq.n	57d0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    5780:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    5784:	3101      	adds	r1, #1
    5786:	d023      	beq.n	57d0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    5788:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    578c:	3101      	adds	r1, #1
    578e:	d01f      	beq.n	57d0 <hci_cmd_handle+0x608>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    5790:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    5794:	3101      	adds	r1, #1
    5796:	d01b      	beq.n	57d0 <hci_cmd_handle+0x608>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    5798:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    579c:	4619      	mov	r1, r3
    579e:	f7ff fb23 	bl	4de8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    57a2:	f104 0115 	add.w	r1, r4, #21
    57a6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    57aa:	f7ff fb1d 	bl	4de8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    57ae:	f104 0119 	add.w	r1, r4, #25
    57b2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    57b6:	f7ff fb17 	bl	4de8 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    57ba:	f104 011d 	add.w	r1, r4, #29
    57be:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    57c2:	e709      	b.n	55d8 <hci_cmd_handle+0x410>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    57c4:	2210      	movs	r2, #16
    57c6:	2100      	movs	r1, #0
    57c8:	4618      	mov	r0, r3
    57ca:	f7fa ff52 	bl	672 <memset>
    57ce:	e7cf      	b.n	5770 <hci_cmd_handle+0x5a8>
		memset(rp->er, 0x00, sizeof(rp->er));
    57d0:	2210      	movs	r2, #16
    57d2:	2100      	movs	r1, #0
    57d4:	4618      	mov	r0, r3
    57d6:	e745      	b.n	5664 <hci_cmd_handle+0x49c>
    57d8:	0000dfda 	.word	0x0000dfda
    57dc:	0000e08f 	.word	0x0000e08f
    57e0:	0000e0ce 	.word	0x0000e0ce

000057e4 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    57e4:	b570      	push	{r4, r5, r6, lr}
    57e6:	4604      	mov	r4, r0
    57e8:	b08c      	sub	sp, #48	; 0x30
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    57ea:	7923      	ldrb	r3, [r4, #4]
    57ec:	2b01      	cmp	r3, #1
{
    57ee:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    57f0:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    57f4:	d061      	beq.n	58ba <hci_evt_encode+0xd6>
	switch (node_rx->hdr.type) {
    57f6:	3b02      	subs	r3, #2
    57f8:	2b03      	cmp	r3, #3
    57fa:	d853      	bhi.n	58a4 <hci_evt_encode+0xc0>
    57fc:	e8df f003 	tbb	[pc, r3]
    5800:	100e0802 	.word	0x100e0802
		le_advertising_report(pdu_data, b, buf);
    5804:	460a      	mov	r2, r1
    5806:	4621      	mov	r1, r4
    5808:	f7ff fb3a 	bl	4e80 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    580c:	b00c      	add	sp, #48	; 0x30
    580e:	bd70      	pop	{r4, r5, r6, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    5810:	2301      	movs	r3, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    5812:	462a      	mov	r2, r5
    5814:	4621      	mov	r1, r4
    5816:	f7ff fc33 	bl	5080 <le_adv_ext_report>
    581a:	e7f7      	b.n	580c <hci_evt_encode+0x28>
    581c:	2304      	movs	r3, #4
    581e:	e7f8      	b.n	5812 <hci_evt_encode+0x2e>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5820:	4b44      	ldr	r3, [pc, #272]	; (5934 <hci_evt_encode+0x150>)
    5822:	e9d3 2300 	ldrd	r2, r3, [r3]
    5826:	2200      	movs	r2, #0
    5828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    582c:	4313      	orrs	r3, r2
    582e:	f104 060a 	add.w	r6, r4, #10
    5832:	d007      	beq.n	5844 <hci_evt_encode+0x60>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    5834:	4b40      	ldr	r3, [pc, #256]	; (5938 <hci_evt_encode+0x154>)
    5836:	e9d3 2300 	ldrd	r2, r3, [r3]
    583a:	2300      	movs	r3, #0
    583c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5840:	4313      	orrs	r3, r2
    5842:	d11e      	bne.n	5882 <hci_evt_encode+0x9e>
		addr.type = adv->tx_addr;
    5844:	7a23      	ldrb	r3, [r4, #8]
    5846:	ad0c      	add	r5, sp, #48	; 0x30
    5848:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    584c:	2206      	movs	r2, #6
    584e:	4631      	mov	r1, r6
    5850:	f10d 000d 	add.w	r0, sp, #13
		addr.type = adv->tx_addr;
    5854:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    5858:	f7fa fedf 	bl	61a <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    585c:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    585e:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5860:	ae05      	add	r6, sp, #20
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5862:	7aa4      	ldrb	r4, [r4, #10]
    5864:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    5866:	4631      	mov	r1, r6
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    5868:	b264      	sxtb	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    586a:	4628      	mov	r0, r5
    586c:	f7ff fbcc 	bl	5008 <bt_addr_le_to_str.constprop.37>
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    5870:	9401      	str	r4, [sp, #4]
    5872:	9600      	str	r6, [sp, #0]
    5874:	2300      	movs	r3, #0
    5876:	4a31      	ldr	r2, [pc, #196]	; (593c <hci_evt_encode+0x158>)
    5878:	4931      	ldr	r1, [pc, #196]	; (5940 <hci_evt_encode+0x15c>)
    587a:	2004      	movs	r0, #4
    587c:	f7fc fd08 	bl	2290 <bt_log>
    5880:	e7c4      	b.n	580c <hci_evt_encode+0x28>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    5882:	2208      	movs	r2, #8
    5884:	2113      	movs	r1, #19
    5886:	4628      	mov	r0, r5
    5888:	f7ff fae4 	bl	4e54 <meta_evt>
	sep->handle = 0;
    588c:	2300      	movs	r3, #0
    588e:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    5890:	7a23      	ldrb	r3, [r4, #8]
    5892:	f3c3 1380 	ubfx	r3, r3, #6, #1
    5896:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    5898:	2206      	movs	r2, #6
    589a:	4631      	mov	r1, r6
    589c:	3002      	adds	r0, #2
    589e:	f7fa febc 	bl	61a <memcpy>
    58a2:	e7b3      	b.n	580c <hci_evt_encode+0x28>
		LL_ASSERT(0);
    58a4:	4a27      	ldr	r2, [pc, #156]	; (5944 <hci_evt_encode+0x160>)
		LL_ASSERT(0);
    58a6:	4928      	ldr	r1, [pc, #160]	; (5948 <hci_evt_encode+0x164>)
    58a8:	2003      	movs	r0, #3
    58aa:	f7fc fcf1 	bl	2290 <bt_log>
    58ae:	4040      	eors	r0, r0
    58b0:	f380 8811 	msr	BASEPRI, r0
    58b4:	f04f 0004 	mov.w	r0, #4
    58b8:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    58ba:	7ae1      	ldrb	r1, [r4, #11]
    58bc:	88e6      	ldrh	r6, [r4, #6]
    58be:	2909      	cmp	r1, #9
    58c0:	d00b      	beq.n	58da <hci_evt_encode+0xf6>
    58c2:	290c      	cmp	r1, #12
    58c4:	d010      	beq.n	58e8 <hci_evt_encode+0x104>
    58c6:	2907      	cmp	r1, #7
    58c8:	d131      	bne.n	592e <hci_evt_encode+0x14a>
    58ca:	7b23      	ldrb	r3, [r4, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    58cc:	2b0e      	cmp	r3, #14
    58ce:	d128      	bne.n	5922 <hci_evt_encode+0x13e>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    58d0:	462b      	mov	r3, r5
    58d2:	4632      	mov	r2, r6
    58d4:	2100      	movs	r1, #0
    58d6:	201a      	movs	r0, #26
    58d8:	e003      	b.n	58e2 <hci_evt_encode+0xfe>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    58da:	4601      	mov	r1, r0
    58dc:	462b      	mov	r3, r5
    58de:	4632      	mov	r2, r6
    58e0:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    58e2:	f7ff fb63 	bl	4fac <le_remote_feat_complete>
    58e6:	e791      	b.n	580c <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    58e8:	4b12      	ldr	r3, [pc, #72]	; (5934 <hci_evt_encode+0x150>)
    58ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    58ee:	2300      	movs	r3, #0
    58f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    58f4:	4313      	orrs	r3, r2
    58f6:	d089      	beq.n	580c <hci_evt_encode+0x28>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    58f8:	2208      	movs	r2, #8
    58fa:	4628      	mov	r0, r5
    58fc:	f7ff fa7d 	bl	4dfa <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    5900:	2108      	movs	r1, #8
    5902:	1868      	adds	r0, r5, r1
    5904:	f005 ff7c 	bl	b800 <net_buf_simple_add>
	ep->status = 0x00;
    5908:	2300      	movs	r3, #0
    590a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    590c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    5910:	7b23      	ldrb	r3, [r4, #12]
    5912:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    5914:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5918:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    591a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    591e:	80c3      	strh	r3, [r0, #6]
    5920:	e774      	b.n	580c <hci_evt_encode+0x28>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    5922:	4a0a      	ldr	r2, [pc, #40]	; (594c <hci_evt_encode+0x168>)
    5924:	490a      	ldr	r1, [pc, #40]	; (5950 <hci_evt_encode+0x16c>)
    5926:	2004      	movs	r0, #4
    5928:	f7fc fcb2 	bl	2290 <bt_log>
    592c:	e76e      	b.n	580c <hci_evt_encode+0x28>
		LL_ASSERT(0);
    592e:	4a09      	ldr	r2, [pc, #36]	; (5954 <hci_evt_encode+0x170>)
    5930:	e7b9      	b.n	58a6 <hci_evt_encode+0xc2>
    5932:	bf00      	nop
    5934:	20004f68 	.word	0x20004f68
    5938:	20004f70 	.word	0x20004f70
    593c:	0000e00f 	.word	0x0000e00f
    5940:	0000e0f6 	.word	0x0000e0f6
    5944:	0000e024 	.word	0x0000e024
    5948:	0000d76b 	.word	0x0000d76b
    594c:	0000e033 	.word	0x0000e033
    5950:	0000e11d 	.word	0x0000e11d
    5954:	0000e042 	.word	0x0000e042

00005958 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    5958:	7903      	ldrb	r3, [r0, #4]
    595a:	2b01      	cmp	r3, #1
    595c:	d00f      	beq.n	597e <hci_get_class+0x26>
    595e:	2b0a      	cmp	r3, #10
    5960:	d815      	bhi.n	598e <hci_get_class+0x36>
    5962:	2001      	movs	r0, #1
    5964:	fa00 f303 	lsl.w	r3, r0, r3
    5968:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    596c:	d112      	bne.n	5994 <hci_get_class+0x3c>
    596e:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    5972:	d110      	bne.n	5996 <hci_get_class+0x3e>
    5974:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    5978:	f343 1080 	sbfx	r0, r3, #6, #1
    597c:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    597e:	7a03      	ldrb	r3, [r0, #8]
    5980:	f003 0303 	and.w	r3, r3, #3
    5984:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    5986:	bf0c      	ite	eq
    5988:	2002      	moveq	r0, #2
    598a:	2003      	movne	r0, #3
    598c:	4770      	bx	lr
			return -1;
    598e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5992:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    5994:	2002      	movs	r0, #2
	}
}
    5996:	4770      	bx	lr

00005998 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    5998:	4b06      	ldr	r3, [pc, #24]	; (59b4 <hci_init+0x1c>)
    599a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    599e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    59a2:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    59a6:	4b04      	ldr	r3, [pc, #16]	; (59b8 <hci_init+0x20>)
    59a8:	201f      	movs	r0, #31
    59aa:	2100      	movs	r1, #0
    59ac:	e9c3 0100 	strd	r0, r1, [r3]
    59b0:	4770      	bx	lr
    59b2:	bf00      	nop
    59b4:	20004f68 	.word	0x20004f68
    59b8:	20004f70 	.word	0x20004f70

000059bc <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    59bc:	bf20      	wfe
	__SEV();
    59be:	bf40      	sev
	__WFE();
    59c0:	bf20      	wfe
    59c2:	4770      	bx	lr

000059c4 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    59c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    59c6:	4b0d      	ldr	r3, [pc, #52]	; (59fc <pdu_len_cmp+0x38>)
{
    59c8:	b089      	sub	sp, #36	; 0x24
    59ca:	4605      	mov	r5, r0
    59cc:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    59ce:	aa01      	add	r2, sp, #4
    59d0:	f103 0718 	add.w	r7, r3, #24
    59d4:	6818      	ldr	r0, [r3, #0]
    59d6:	6859      	ldr	r1, [r3, #4]
    59d8:	4614      	mov	r4, r2
    59da:	c403      	stmia	r4!, {r0, r1}
    59dc:	3308      	adds	r3, #8
    59de:	42bb      	cmp	r3, r7
    59e0:	4622      	mov	r2, r4
    59e2:	d1f7      	bne.n	59d4 <pdu_len_cmp+0x10>
    59e4:	881b      	ldrh	r3, [r3, #0]
    59e6:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    59e8:	ab08      	add	r3, sp, #32
    59ea:	441d      	add	r5, r3
    59ec:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    59f0:	1b83      	subs	r3, r0, r6
    59f2:	4258      	negs	r0, r3
    59f4:	4158      	adcs	r0, r3
    59f6:	b009      	add	sp, #36	; 0x24
    59f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59fa:	bf00      	nop
    59fc:	0000cbf5 	.word	0x0000cbf5

00005a00 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    5a00:	6008      	str	r0, [r1, #0]
    5a02:	4770      	bx	lr

00005a04 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5a04:	b918      	cbnz	r0, 5a0e <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    5a06:	680b      	ldr	r3, [r1, #0]
    5a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5a0c:	600b      	str	r3, [r1, #0]
    5a0e:	4770      	bx	lr

00005a10 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    5a10:	b918      	cbnz	r0, 5a1a <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    5a12:	680b      	ldr	r3, [r1, #0]
    5a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5a18:	600b      	str	r3, [r1, #0]
    5a1a:	4770      	bx	lr

00005a1c <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    5a1c:	b570      	push	{r4, r5, r6, lr}
    5a1e:	1d03      	adds	r3, r0, #4
    5a20:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    5a22:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    5a24:	429d      	cmp	r5, r3
    5a26:	d101      	bne.n	5a2c <chan_sel_remap+0x10>
    5a28:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    5a2a:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    5a2c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    5a30:	2200      	movs	r2, #0
    5a32:	18a0      	adds	r0, r4, r2
    5a34:	2a08      	cmp	r2, #8
    5a36:	b2c0      	uxtb	r0, r0
    5a38:	d101      	bne.n	5a3e <chan_sel_remap+0x22>
    5a3a:	4604      	mov	r4, r0
    5a3c:	e7f2      	b.n	5a24 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    5a3e:	f016 0f01 	tst.w	r6, #1
    5a42:	d003      	beq.n	5a4c <chan_sel_remap+0x30>
				if (chan_index == 0) {
    5a44:	2900      	cmp	r1, #0
    5a46:	d0f0      	beq.n	5a2a <chan_sel_remap+0xe>
				chan_index--;
    5a48:	3901      	subs	r1, #1
    5a4a:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    5a4c:	0876      	lsrs	r6, r6, #1
    5a4e:	3201      	adds	r2, #1
    5a50:	e7ef      	b.n	5a32 <chan_sel_remap+0x16>
	...

00005a54 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    5a54:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    5a56:	4a0c      	ldr	r2, [pc, #48]	; (5a88 <packet_rx_reserve_get+0x34>)
    5a58:	f892 373a 	ldrb.w	r3, [r2, #1850]	; 0x73a
	    _radio.packet_rx_last) {
    5a5c:	f892 1739 	ldrb.w	r1, [r2, #1849]	; 0x739
	if (_radio.packet_rx_acquire >=
    5a60:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    5a62:	bf38      	it	cc
    5a64:	f892 4738 	ldrbcc.w	r4, [r2, #1848]	; 0x738
			_radio.packet_rx_last);
    5a68:	f892 1739 	ldrb.w	r1, [r2, #1849]	; 0x739
			_radio.packet_rx_last +
    5a6c:	bf38      	it	cc
    5a6e:	191b      	addcc	r3, r3, r4
    5a70:	1a5b      	subs	r3, r3, r1
    5a72:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    5a74:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    5a76:	bf9d      	ittte	ls
    5a78:	f892 1739 	ldrbls.w	r1, [r2, #1849]	; 0x739
    5a7c:	f8d2 3734 	ldrls.w	r3, [r2, #1844]	; 0x734
    5a80:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    5a84:	2000      	movhi	r0, #0
}
    5a86:	bd10      	pop	{r4, pc}
    5a88:	200009f8 	.word	0x200009f8

00005a8c <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    5a8c:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    5a8e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    5a92:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    5a96:	4299      	cmp	r1, r3
    5a98:	d128      	bne.n	5aec <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    5a9a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    5a9e:	2b00      	cmp	r3, #0
    5aa0:	db26      	blt.n	5af0 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    5aa2:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    5aa4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    5aa6:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    5aaa:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    5aac:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    5ab0:	4354      	muls	r4, r2
					      conn->supervision_reload *
    5ab2:	227d      	movs	r2, #125	; 0x7d
    5ab4:	4362      	muls	r2, r4
					      125 / 1000;
    5ab6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    5aba:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    5abe:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    5ac2:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    5ac6:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    5ac8:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    5acc:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    5ace:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    5ad0:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    5ad4:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    5ad6:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    5ada:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    5adc:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    5ae0:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    5ae4:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    5ae8:	4618      	mov	r0, r3
    5aea:	bd30      	pop	{r4, r5, pc}
		return 1;
    5aec:	2001      	movs	r0, #1
    5aee:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    5af0:	2002      	movs	r0, #2
}
    5af2:	bd30      	pop	{r4, r5, pc}

00005af4 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    5af4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    5af8:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    5afa:	4294      	cmp	r4, r2
{
    5afc:	4681      	mov	r9, r0
    5afe:	460f      	mov	r7, r1
    5b00:	4690      	mov	r8, r2
	if (_first == last) {
    5b02:	d03d      	beq.n	5b80 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    5b04:	4e1f      	ldr	r6, [pc, #124]	; (5b84 <tx_cmplt_get+0x90>)
    5b06:	f8d6 3768 	ldr.w	r3, [r6, #1896]	; 0x768
    5b0a:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    5b0e:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    5b10:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    5b12:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5b16:	f206 7a5c 	addw	sl, r6, #1884	; 0x75c
		if (*handle != _radio.pkt_release[_first].handle) {
    5b1a:	b222      	sxth	r2, r4
    5b1c:	f8d6 0768 	ldr.w	r0, [r6, #1896]	; 0x768
    5b20:	f8b9 e000 	ldrh.w	lr, [r9]
    5b24:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    5b28:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    5b2c:	4596      	cmp	lr, r2
    5b2e:	d120      	bne.n	5b72 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    5b30:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    5b32:	2801      	cmp	r0, #1
    5b34:	f020 0303 	bic.w	r3, r0, #3
    5b38:	d90a      	bls.n	5b50 <tx_cmplt_get+0x5c>
    5b3a:	b1f3      	cbz	r3, 5b7a <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    5b3c:	1d02      	adds	r2, r0, #4
    5b3e:	d01c      	beq.n	5b7a <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5b40:	7942      	ldrb	r2, [r0, #5]
    5b42:	b1d2      	cbz	r2, 5b7a <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    5b44:	7902      	ldrb	r2, [r0, #4]
    5b46:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5b4a:	3a01      	subs	r2, #1
    5b4c:	2a01      	cmp	r2, #1
    5b4e:	d814      	bhi.n	5b7a <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    5b50:	2201      	movs	r2, #1
			cmplt++;
    5b52:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    5b54:	604a      	str	r2, [r1, #4]
			cmplt++;
    5b56:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    5b58:	b113      	cbz	r3, 5b60 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    5b5a:	4651      	mov	r1, sl
    5b5c:	f7fd ffdb 	bl	3b16 <mem_release>
		}

		_first = _first + 1;
    5b60:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    5b62:	f896 276c 	ldrb.w	r2, [r6, #1900]	; 0x76c
		_first = _first + 1;
    5b66:	b2e4      	uxtb	r4, r4
			_first = 0;
    5b68:	42a2      	cmp	r2, r4
    5b6a:	bf08      	it	eq
    5b6c:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    5b6e:	4544      	cmp	r4, r8
    5b70:	d1d3      	bne.n	5b1a <tx_cmplt_get+0x26>

	*first = _first;
    5b72:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    5b74:	4628      	mov	r0, r5
    5b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    5b7a:	f8c1 b004 	str.w	fp, [r1, #4]
    5b7e:	e7eb      	b.n	5b58 <tx_cmplt_get+0x64>
		return 0;
    5b80:	2500      	movs	r5, #0
    5b82:	e7f7      	b.n	5b74 <tx_cmplt_get+0x80>
    5b84:	200009f8 	.word	0x200009f8

00005b88 <connection_get>:
{
    5b88:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    5b8a:	4b09      	ldr	r3, [pc, #36]	; (5bb0 <connection_get+0x28>)
    5b8c:	f893 2710 	ldrb.w	r2, [r3, #1808]	; 0x710
    5b90:	4282      	cmp	r2, r0
{
    5b92:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    5b94:	d90a      	bls.n	5bac <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    5b96:	4602      	mov	r2, r0
    5b98:	f44f 7182 	mov.w	r1, #260	; 0x104
    5b9c:	f8d3 0708 	ldr.w	r0, [r3, #1800]	; 0x708
    5ba0:	f7fd ffce 	bl	3b40 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    5ba4:	b110      	cbz	r0, 5bac <connection_get+0x24>
    5ba6:	8c03      	ldrh	r3, [r0, #32]
    5ba8:	42a3      	cmp	r3, r4
    5baa:	d000      	beq.n	5bae <connection_get+0x26>
	return 0;
    5bac:	2000      	movs	r0, #0
}
    5bae:	bd10      	pop	{r4, pc}
    5bb0:	200009f8 	.word	0x200009f8

00005bb4 <role_disable>:
{
    5bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bb8:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5bba:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    5bbc:	2805      	cmp	r0, #5
{
    5bbe:	4605      	mov	r5, r0
    5bc0:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5bc2:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    5bc4:	d00c      	beq.n	5be0 <role_disable+0x2c>
    5bc6:	2806      	cmp	r0, #6
    5bc8:	d036      	beq.n	5c38 <role_disable+0x84>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5bca:	d93b      	bls.n	5c44 <role_disable+0x90>
			conn_handle = ticker_id_primary -
    5bcc:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    5bce:	b280      	uxth	r0, r0
    5bd0:	f7ff ffda 	bl	5b88 <connection_get>
			if (!conn) {
    5bd4:	2800      	cmp	r0, #0
    5bd6:	f000 80f3 	beq.w	5dc0 <role_disable+0x20c>
			ticks_active_to_start =
    5bda:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    5bde:	e00f      	b.n	5c00 <role_disable+0x4c>
		ticks_xtal_to_start =
    5be0:	4b78      	ldr	r3, [pc, #480]	; (5dc4 <role_disable+0x210>)
    5be2:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    5be4:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5be8:	ab02      	add	r3, sp, #8
    5bea:	9300      	str	r3, [sp, #0]
    5bec:	460a      	mov	r2, r1
    5bee:	4b76      	ldr	r3, [pc, #472]	; (5dc8 <role_disable+0x214>)
    5bf0:	2103      	movs	r1, #3
    5bf2:	2000      	movs	r0, #0
    5bf4:	f7fe fe80 	bl	48f8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5bf8:	2802      	cmp	r0, #2
    5bfa:	d00b      	beq.n	5c14 <role_disable+0x60>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5bfc:	9b02      	ldr	r3, [sp, #8]
    5bfe:	b96b      	cbnz	r3, 5c1c <role_disable+0x68>
	LL_ASSERT(!_radio.ticker_id_stop);
    5c00:	4c70      	ldr	r4, [pc, #448]	; (5dc4 <role_disable+0x210>)
    5c02:	7ca3      	ldrb	r3, [r4, #18]
    5c04:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    5c08:	b1fb      	cbz	r3, 5c4a <role_disable+0x96>
    5c0a:	4a70      	ldr	r2, [pc, #448]	; (5dcc <role_disable+0x218>)
    5c0c:	4970      	ldr	r1, [pc, #448]	; (5dd0 <role_disable+0x21c>)
    5c0e:	e00a      	b.n	5c26 <role_disable+0x72>
				cpu_sleep();
    5c10:	f7ff fed4 	bl	59bc <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5c14:	9b02      	ldr	r3, [sp, #8]
    5c16:	2b02      	cmp	r3, #2
    5c18:	d0fa      	beq.n	5c10 <role_disable+0x5c>
    5c1a:	e7ef      	b.n	5bfc <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    5c1c:	9b02      	ldr	r3, [sp, #8]
    5c1e:	2b01      	cmp	r3, #1
    5c20:	d0ee      	beq.n	5c00 <role_disable+0x4c>
    5c22:	4a6a      	ldr	r2, [pc, #424]	; (5dcc <role_disable+0x218>)
    5c24:	496b      	ldr	r1, [pc, #428]	; (5dd4 <role_disable+0x220>)
			LL_ASSERT(0);
    5c26:	2003      	movs	r0, #3
    5c28:	f7fc fb32 	bl	2290 <bt_log>
    5c2c:	4040      	eors	r0, r0
    5c2e:	f380 8811 	msr	BASEPRI, r0
    5c32:	f04f 0004 	mov.w	r0, #4
    5c36:	df02      	svc	2
		ticks_xtal_to_start =
    5c38:	4b62      	ldr	r3, [pc, #392]	; (5dc4 <role_disable+0x210>)
    5c3a:	f8d3 663c 	ldr.w	r6, [r3, #1596]	; 0x63c
		ticks_active_to_start =
    5c3e:	f8d3 8640 	ldr.w	r8, [r3, #1600]	; 0x640
		break;
    5c42:	e7dd      	b.n	5c00 <role_disable+0x4c>
			LL_ASSERT(0);
    5c44:	4a61      	ldr	r2, [pc, #388]	; (5dcc <role_disable+0x218>)
    5c46:	4964      	ldr	r1, [pc, #400]	; (5dd8 <role_disable+0x224>)
    5c48:	e7ed      	b.n	5c26 <role_disable+0x72>
	ret_cb = TICKER_STATUS_BUSY;
    5c4a:	ab06      	add	r3, sp, #24
    5c4c:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    5c4e:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    5c50:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c54:	2103      	movs	r1, #3
    5c56:	9300      	str	r3, [sp, #0]
    5c58:	462a      	mov	r2, r5
    5c5a:	4b5b      	ldr	r3, [pc, #364]	; (5dc8 <role_disable+0x214>)
    5c5c:	f7fe fe4c 	bl	48f8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5c60:	2802      	cmp	r0, #2
    5c62:	d020      	beq.n	5ca6 <role_disable+0xf2>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    5c64:	9b02      	ldr	r3, [sp, #8]
    5c66:	2b00      	cmp	r3, #0
    5c68:	d15a      	bne.n	5d20 <role_disable+0x16c>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    5c6a:	7c23      	ldrb	r3, [r4, #16]
    5c6c:	429d      	cmp	r5, r3
    5c6e:	d002      	beq.n	5c76 <role_disable+0xc2>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    5c70:	7c63      	ldrb	r3, [r4, #17]
    5c72:	429d      	cmp	r5, r3
    5c74:	d150      	bne.n	5d18 <role_disable+0x164>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5c76:	ab06      	add	r3, sp, #24
    5c78:	2202      	movs	r2, #2
    5c7a:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5c7e:	2200      	movs	r2, #0
    5c80:	9300      	str	r3, [sp, #0]
    5c82:	2103      	movs	r1, #3
    5c84:	4b50      	ldr	r3, [pc, #320]	; (5dc8 <role_disable+0x214>)
    5c86:	4610      	mov	r0, r2
    5c88:	f7fe fe36 	bl	48f8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5c8c:	2802      	cmp	r0, #2
    5c8e:	d118      	bne.n	5cc2 <role_disable+0x10e>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5c90:	2201      	movs	r2, #1
    5c92:	4611      	mov	r1, r2
    5c94:	2003      	movs	r0, #3
    5c96:	f7fd ffb5 	bl	3c04 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    5c9a:	9b03      	ldr	r3, [sp, #12]
    5c9c:	2b02      	cmp	r3, #2
    5c9e:	d110      	bne.n	5cc2 <role_disable+0x10e>
    5ca0:	4a4e      	ldr	r2, [pc, #312]	; (5ddc <role_disable+0x228>)
    5ca2:	494f      	ldr	r1, [pc, #316]	; (5de0 <role_disable+0x22c>)
    5ca4:	e7bf      	b.n	5c26 <role_disable+0x72>
		if (_radio.ticker_id_event == ticker_id_primary) {
    5ca6:	7c63      	ldrb	r3, [r4, #17]
    5ca8:	429d      	cmp	r5, r3
    5caa:	d104      	bne.n	5cb6 <role_disable+0x102>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5cac:	2201      	movs	r2, #1
    5cae:	4611      	mov	r1, r2
    5cb0:	2003      	movs	r0, #3
    5cb2:	f7fd ffa7 	bl	3c04 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    5cb6:	9b02      	ldr	r3, [sp, #8]
    5cb8:	2b02      	cmp	r3, #2
    5cba:	d1d3      	bne.n	5c64 <role_disable+0xb0>
			cpu_sleep();
    5cbc:	f7ff fe7e 	bl	59bc <cpu_sleep>
    5cc0:	e7f9      	b.n	5cb6 <role_disable+0x102>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    5cc2:	9803      	ldr	r0, [sp, #12]
    5cc4:	2800      	cmp	r0, #0
    5cc6:	d141      	bne.n	5d4c <role_disable+0x198>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    5cc8:	2302      	movs	r3, #2
    5cca:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    5ccc:	7c23      	ldrb	r3, [r4, #16]
    5cce:	b913      	cbnz	r3, 5cd6 <role_disable+0x122>
    5cd0:	4a42      	ldr	r2, [pc, #264]	; (5ddc <role_disable+0x228>)
    5cd2:	4944      	ldr	r1, [pc, #272]	; (5de4 <role_disable+0x230>)
    5cd4:	e7a7      	b.n	5c26 <role_disable+0x72>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5cd6:	ab04      	add	r3, sp, #16
    5cd8:	9300      	str	r3, [sp, #0]
    5cda:	2201      	movs	r2, #1
    5cdc:	4b3a      	ldr	r3, [pc, #232]	; (5dc8 <role_disable+0x214>)
		_radio.ticker_id_prepare = 0;
    5cde:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ce0:	2103      	movs	r1, #3
    5ce2:	f7fe fe09 	bl	48f8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5ce6:	2802      	cmp	r0, #2
    5ce8:	d10a      	bne.n	5d00 <role_disable+0x14c>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5cea:	2201      	movs	r2, #1
    5cec:	4611      	mov	r1, r2
    5cee:	2003      	movs	r0, #3
    5cf0:	f7fd ff88 	bl	3c04 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    5cf4:	9b04      	ldr	r3, [sp, #16]
    5cf6:	2b02      	cmp	r3, #2
    5cf8:	d102      	bne.n	5d00 <role_disable+0x14c>
    5cfa:	4a38      	ldr	r2, [pc, #224]	; (5ddc <role_disable+0x228>)
    5cfc:	493a      	ldr	r1, [pc, #232]	; (5de8 <role_disable+0x234>)
    5cfe:	e792      	b.n	5c26 <role_disable+0x72>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    5d00:	9a04      	ldr	r2, [sp, #16]
    5d02:	b99a      	cbnz	r2, 5d2c <role_disable+0x178>
			ticks_xtal_to_start &= ~XON_BITMASK;
    5d04:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    5d08:	45b0      	cmp	r8, r6
    5d0a:	d91d      	bls.n	5d48 <role_disable+0x194>
				ret = mayfly_enqueue(
    5d0c:	4b37      	ldr	r3, [pc, #220]	; (5dec <role_disable+0x238>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5d0e:	4611      	mov	r1, r2
    5d10:	2003      	movs	r0, #3
    5d12:	f7fd ff9f 	bl	3c54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5d16:	b9a0      	cbnz	r0, 5d42 <role_disable+0x18e>
	if (!_radio.ticker_id_stop) {
    5d18:	7ca3      	ldrb	r3, [r4, #18]
    5d1a:	b90b      	cbnz	r3, 5d20 <role_disable+0x16c>
		ret_cb = TICKER_STATUS_FAILURE;
    5d1c:	2301      	movs	r3, #1
    5d1e:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    5d20:	2300      	movs	r3, #0
    5d22:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    5d24:	9802      	ldr	r0, [sp, #8]
}
    5d26:	b006      	add	sp, #24
    5d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    5d2c:	9b04      	ldr	r3, [sp, #16]
    5d2e:	2b01      	cmp	r3, #1
    5d30:	d144      	bne.n	5dbc <role_disable+0x208>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5d32:	2200      	movs	r2, #0
    5d34:	4611      	mov	r1, r2
    5d36:	4b2d      	ldr	r3, [pc, #180]	; (5dec <role_disable+0x238>)
    5d38:	2003      	movs	r0, #3
    5d3a:	f7fd ff8b 	bl	3c54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5d3e:	4602      	mov	r2, r0
    5d40:	b110      	cbz	r0, 5d48 <role_disable+0x194>
			LL_ASSERT(!ret);
    5d42:	4a26      	ldr	r2, [pc, #152]	; (5ddc <role_disable+0x228>)
    5d44:	492a      	ldr	r1, [pc, #168]	; (5df0 <role_disable+0x23c>)
    5d46:	e76e      	b.n	5c26 <role_disable+0x72>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5d48:	4b2a      	ldr	r3, [pc, #168]	; (5df4 <role_disable+0x240>)
    5d4a:	e7e0      	b.n	5d0e <role_disable+0x15a>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    5d4c:	9d03      	ldr	r5, [sp, #12]
    5d4e:	2d01      	cmp	r5, #1
    5d50:	d134      	bne.n	5dbc <role_disable+0x208>
		if (ticker_id_stop != TICKER_NULL) {
    5d52:	2fff      	cmp	r7, #255	; 0xff
    5d54:	d01f      	beq.n	5d96 <role_disable+0x1e2>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    5d56:	ab06      	add	r3, sp, #24
    5d58:	2202      	movs	r2, #2
    5d5a:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d5e:	2103      	movs	r1, #3
    5d60:	9300      	str	r3, [sp, #0]
    5d62:	463a      	mov	r2, r7
    5d64:	4b18      	ldr	r3, [pc, #96]	; (5dc8 <role_disable+0x214>)
    5d66:	2000      	movs	r0, #0
    5d68:	f7fe fdc6 	bl	48f8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    5d6c:	2802      	cmp	r0, #2
    5d6e:	d10a      	bne.n	5d86 <role_disable+0x1d2>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5d70:	462a      	mov	r2, r5
    5d72:	4629      	mov	r1, r5
    5d74:	2003      	movs	r0, #3
    5d76:	f7fd ff45 	bl	3c04 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    5d7a:	9b05      	ldr	r3, [sp, #20]
    5d7c:	2b02      	cmp	r3, #2
    5d7e:	d102      	bne.n	5d86 <role_disable+0x1d2>
    5d80:	4a16      	ldr	r2, [pc, #88]	; (5ddc <role_disable+0x228>)
    5d82:	491d      	ldr	r1, [pc, #116]	; (5df8 <role_disable+0x244>)
    5d84:	e74f      	b.n	5c26 <role_disable+0x72>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    5d86:	9b05      	ldr	r3, [sp, #20]
    5d88:	b12b      	cbz	r3, 5d96 <role_disable+0x1e2>
    5d8a:	9b05      	ldr	r3, [sp, #20]
    5d8c:	2b01      	cmp	r3, #1
    5d8e:	d002      	beq.n	5d96 <role_disable+0x1e2>
    5d90:	4a12      	ldr	r2, [pc, #72]	; (5ddc <role_disable+0x228>)
    5d92:	491a      	ldr	r1, [pc, #104]	; (5dfc <role_disable+0x248>)
    5d94:	e747      	b.n	5c26 <role_disable+0x72>
		if (_radio.role != ROLE_NONE) {
    5d96:	7ce3      	ldrb	r3, [r4, #19]
    5d98:	2b00      	cmp	r3, #0
    5d9a:	d0bd      	beq.n	5d18 <role_disable+0x164>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5d9c:	4b18      	ldr	r3, [pc, #96]	; (5e00 <role_disable+0x24c>)
    5d9e:	2204      	movs	r2, #4
    5da0:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5da2:	2200      	movs	r2, #0
    5da4:	4611      	mov	r1, r2
    5da6:	2003      	movs	r0, #3
    5da8:	f7fd ff54 	bl	3c54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5dac:	2800      	cmp	r0, #0
    5dae:	d1c8      	bne.n	5d42 <role_disable+0x18e>
			while (_radio.role != ROLE_NONE) {
    5db0:	7ce3      	ldrb	r3, [r4, #19]
    5db2:	2b00      	cmp	r3, #0
    5db4:	d0b0      	beq.n	5d18 <role_disable+0x164>
				cpu_sleep();
    5db6:	f7ff fe01 	bl	59bc <cpu_sleep>
    5dba:	e7f9      	b.n	5db0 <role_disable+0x1fc>
		LL_ASSERT(0);
    5dbc:	4a07      	ldr	r2, [pc, #28]	; (5ddc <role_disable+0x228>)
    5dbe:	e742      	b.n	5c46 <role_disable+0x92>
				return 1;
    5dc0:	2001      	movs	r0, #1
    5dc2:	e7b0      	b.n	5d26 <role_disable+0x172>
    5dc4:	200009f8 	.word	0x200009f8
    5dc8:	00005a01 	.word	0x00005a01
    5dcc:	0000e541 	.word	0x0000e541
    5dd0:	0000ea5d 	.word	0x0000ea5d
    5dd4:	0000ea29 	.word	0x0000ea29
    5dd8:	0000d76b 	.word	0x0000d76b
    5ddc:	0000e52d 	.word	0x0000e52d
    5de0:	0000ea89 	.word	0x0000ea89
    5de4:	0000eaae 	.word	0x0000eaae
    5de8:	0000eadc 	.word	0x0000eadc
    5dec:	20004fb8 	.word	0x20004fb8
    5df0:	0000eb00 	.word	0x0000eb00
    5df4:	20005058 	.word	0x20005058
    5df8:	0000eb1a 	.word	0x0000eb1a
    5dfc:	0000eb40 	.word	0x0000eb40
    5e00:	20004fe8 	.word	0x20004fe8

00005e04 <chan_set>:
{
    5e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    5e08:	4d6f      	ldr	r5, [pc, #444]	; (5fc8 <chan_set+0x1c4>)
    5e0a:	f895 322d 	ldrb.w	r3, [r5, #557]	; 0x22d
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5e0e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    5e12:	442b      	add	r3, r5
{
    5e14:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5e16:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    5e1a:	f003 030f 	and.w	r3, r3, #15
    5e1e:	2b07      	cmp	r3, #7
    5e20:	f040 80bf 	bne.w	5fa2 <chan_set+0x19e>
		switch (chan) {
    5e24:	2826      	cmp	r0, #38	; 0x26
    5e26:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 6004 <chan_set+0x200>
    5e2a:	d030      	beq.n	5e8e <chan_set+0x8a>
    5e2c:	2827      	cmp	r0, #39	; 0x27
    5e2e:	4f67      	ldr	r7, [pc, #412]	; (5fcc <chan_set+0x1c8>)
    5e30:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 6008 <chan_set+0x204>
    5e34:	d035      	beq.n	5ea2 <chan_set+0x9e>
    5e36:	2825      	cmp	r0, #37	; 0x25
    5e38:	d162      	bne.n	5f00 <chan_set+0xfc>
			stop_time_37 = k_cycle_get_32();
    5e3a:	f7fc f8d3 	bl	1fe4 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    5e3e:	4e64      	ldr	r6, [pc, #400]	; (5fd0 <chan_set+0x1cc>)
			stop_time_37 = k_cycle_get_32();
    5e40:	4b64      	ldr	r3, [pc, #400]	; (5fd4 <chan_set+0x1d0>)
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    5e42:	683a      	ldr	r2, [r7, #0]
			stop_time_37 = k_cycle_get_32();
    5e44:	6018      	str	r0, [r3, #0]
			cycles_spent_37 = stop_time_37 - start_time37;
    5e46:	6833      	ldr	r3, [r6, #0]
    5e48:	eba0 0e03 	sub.w	lr, r0, r3
    5e4c:	4b62      	ldr	r3, [pc, #392]	; (5fd8 <chan_set+0x1d4>)
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    5e4e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time37;
    5e52:	f8c3 e000 	str.w	lr, [r3]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    5e56:	fb82 2305 	smull	r2, r3, r2, r5
    5e5a:	fba2 010e 	umull	r0, r1, r2, lr
    5e5e:	f8d8 2000 	ldr.w	r2, [r8]
    5e62:	fb0e 1103 	mla	r1, lr, r3, r1
    5e66:	17d3      	asrs	r3, r2, #31
    5e68:	f7fa f9fe 	bl	268 <__aeabi_uldivmod>
    5e6c:	4b5b      	ldr	r3, [pc, #364]	; (5fdc <chan_set+0x1d8>)
    5e6e:	fbb0 f0f5 	udiv	r0, r0, r5
    5e72:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    5e74:	f7fc f8b6 	bl	1fe4 <_timer_cycle_get_32>
    5e78:	f8cb 0000 	str.w	r0, [fp]
			start_time37= k_cycle_get_32();
    5e7c:	f7fc f8b2 	bl	1fe4 <_timer_cycle_get_32>
			pckt_send++;
    5e80:	4a57      	ldr	r2, [pc, #348]	; (5fe0 <chan_set+0x1dc>)
			start_time37= k_cycle_get_32();
    5e82:	6030      	str	r0, [r6, #0]
			pckt_send++;
    5e84:	7813      	ldrb	r3, [r2, #0]
    5e86:	3301      	adds	r3, #1
    5e88:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    5e8a:	2002      	movs	r0, #2
    5e8c:	e07e      	b.n	5f8c <chan_set+0x188>
			start_time = k_cycle_get_32();
    5e8e:	f7fc f8a9 	bl	1fe4 <_timer_cycle_get_32>
			pckt_send++;
    5e92:	4a53      	ldr	r2, [pc, #332]	; (5fe0 <chan_set+0x1dc>)
			start_time = k_cycle_get_32();
    5e94:	f8cb 0000 	str.w	r0, [fp]
			pckt_send++;
    5e98:	7813      	ldrb	r3, [r2, #0]
    5e9a:	3301      	adds	r3, #1
    5e9c:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    5e9e:	201a      	movs	r0, #26
    5ea0:	e074      	b.n	5f8c <chan_set+0x188>
			stop_time_39 = k_cycle_get_32();
    5ea2:	f7fc f89f 	bl	1fe4 <_timer_cycle_get_32>
    5ea6:	4b4f      	ldr	r3, [pc, #316]	; (5fe4 <chan_set+0x1e0>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    5ea8:	683a      	ldr	r2, [r7, #0]
			stop_time_39 = k_cycle_get_32();
    5eaa:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    5eac:	f8db 3000 	ldr.w	r3, [fp]
    5eb0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    5eb4:	eba0 0e03 	sub.w	lr, r0, r3
    5eb8:	fb82 2307 	smull	r2, r3, r2, r7
    5ebc:	fbae 0102 	umull	r0, r1, lr, r2
    5ec0:	f8d8 2000 	ldr.w	r2, [r8]
    5ec4:	fb0e 1103 	mla	r1, lr, r3, r1
    5ec8:	17d3      	asrs	r3, r2, #31
    5eca:	f7fa f9cd 	bl	268 <__aeabi_uldivmod>
    5ece:	4b46      	ldr	r3, [pc, #280]	; (5fe8 <chan_set+0x1e4>)
    5ed0:	fbb0 f0f7 	udiv	r0, r0, r7
    5ed4:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    5ed6:	4b42      	ldr	r3, [pc, #264]	; (5fe0 <chan_set+0x1dc>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    5ed8:	2600      	movs	r6, #0
			pckt_send = 0;
    5eda:	701e      	strb	r6, [r3, #0]
			start_time = k_cycle_get_32();
    5edc:	f7fc f882 	bl	1fe4 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    5ee0:	f895 3689 	ldrb.w	r3, [r5, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5ee4:	f895 2688 	ldrb.w	r2, [r5, #1672]	; 0x688
			start_time = k_cycle_get_32();
    5ee8:	f8cb 0000 	str.w	r0, [fp]
			_radio.ext_advertiser.current_slot++;
    5eec:	3301      	adds	r3, #1
    5eee:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5ef0:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    5ef2:	f885 3689 	strb.w	r3, [r5, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5ef6:	d201      	bcs.n	5efc <chan_set+0xf8>
			_radio.ext_advertiser.current_slot= 0;
    5ef8:	f885 6689 	strb.w	r6, [r5, #1673]	; 0x689
			radio_freq_chan_set(80);
    5efc:	2050      	movs	r0, #80	; 0x50
    5efe:	e045      	b.n	5f8c <chan_set+0x188>
			stop_time_aux1 = k_cycle_get_32();
    5f00:	f7fc f870 	bl	1fe4 <_timer_cycle_get_32>
    5f04:	4b39      	ldr	r3, [pc, #228]	; (5fec <chan_set+0x1e8>)
    5f06:	683e      	ldr	r6, [r7, #0]
    5f08:	6018      	str	r0, [r3, #0]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5f0a:	f8d8 3000 	ldr.w	r3, [r8]
    5f0e:	4698      	mov	r8, r3
    5f10:	ea4f 79e3 	mov.w	r9, r3, asr #31
    5f14:	f8db 3000 	ldr.w	r3, [fp]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    5f18:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 600c <chan_set+0x208>
    5f1c:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    5f20:	fb86 670a 	smull	r6, r7, r6, sl
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5f24:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    5f26:	4605      	mov	r5, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5f28:	fba3 0106 	umull	r0, r1, r3, r6
    5f2c:	fb03 1107 	mla	r1, r3, r7, r1
    5f30:	4642      	mov	r2, r8
    5f32:	464b      	mov	r3, r9
    5f34:	f7fa f998 	bl	268 <__aeabi_uldivmod>
    5f38:	4b2d      	ldr	r3, [pc, #180]	; (5ff0 <chan_set+0x1ec>)
    5f3a:	fbb0 f0fa 	udiv	r0, r0, sl
    5f3e:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    5f40:	4b23      	ldr	r3, [pc, #140]	; (5fd0 <chan_set+0x1cc>)
    5f42:	681b      	ldr	r3, [r3, #0]
    5f44:	1aeb      	subs	r3, r5, r3
    5f46:	fba3 0106 	umull	r0, r1, r3, r6
    5f4a:	fb03 1107 	mla	r1, r3, r7, r1
    5f4e:	4642      	mov	r2, r8
    5f50:	464b      	mov	r3, r9
    5f52:	f7fa f989 	bl	268 <__aeabi_uldivmod>
    5f56:	4b27      	ldr	r3, [pc, #156]	; (5ff4 <chan_set+0x1f0>)
    5f58:	fbb0 f0fa 	udiv	r0, r0, sl
    5f5c:	6018      	str	r0, [r3, #0]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    5f5e:	f8db 3000 	ldr.w	r3, [fp]
    5f62:	1aed      	subs	r5, r5, r3
    5f64:	fba5 0106 	umull	r0, r1, r5, r6
    5f68:	4642      	mov	r2, r8
    5f6a:	464b      	mov	r3, r9
    5f6c:	fb05 1107 	mla	r1, r5, r7, r1
    5f70:	f7fa f97a 	bl	268 <__aeabi_uldivmod>
    5f74:	4b20      	ldr	r3, [pc, #128]	; (5ff8 <chan_set+0x1f4>)
    5f76:	fbb0 f0fa 	udiv	r0, r0, sl
    5f7a:	6018      	str	r0, [r3, #0]
			start_time_5 = k_cycle_get_32();
    5f7c:	f7fc f832 	bl	1fe4 <_timer_cycle_get_32>
    5f80:	f8cb 0000 	str.w	r0, [fp]
			if (chan < 11) {
    5f84:	2c0a      	cmp	r4, #10
    5f86:	d808      	bhi.n	5f9a <chan_set+0x196>
				radio_freq_chan_set(4 + (2 * chan));
    5f88:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    5f8a:	0040      	lsls	r0, r0, #1
    5f8c:	f004 ff5a 	bl	ae44 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    5f90:	4620      	mov	r0, r4
}
    5f92:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_whiten_iv_set(chan);
    5f96:	f004 bf5b 	b.w	ae50 <radio_whiten_iv_set>
			} else if (chan < 40) {
    5f9a:	2c27      	cmp	r4, #39	; 0x27
    5f9c:	d809      	bhi.n	5fb2 <chan_set+0x1ae>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    5f9e:	1ce0      	adds	r0, r4, #3
    5fa0:	e7f3      	b.n	5f8a <chan_set+0x186>
		switch (chan) {
    5fa2:	2826      	cmp	r0, #38	; 0x26
    5fa4:	f43f af7b 	beq.w	5e9e <chan_set+0x9a>
    5fa8:	2827      	cmp	r0, #39	; 0x27
    5faa:	d0a7      	beq.n	5efc <chan_set+0xf8>
    5fac:	2825      	cmp	r0, #37	; 0x25
    5fae:	d1e9      	bne.n	5f84 <chan_set+0x180>
    5fb0:	e76b      	b.n	5e8a <chan_set+0x86>
				LL_ASSERT(0);
    5fb2:	4a12      	ldr	r2, [pc, #72]	; (5ffc <chan_set+0x1f8>)
    5fb4:	4912      	ldr	r1, [pc, #72]	; (6000 <chan_set+0x1fc>)
    5fb6:	2003      	movs	r0, #3
    5fb8:	f7fc f96a 	bl	2290 <bt_log>
    5fbc:	4040      	eors	r0, r0
    5fbe:	f380 8811 	msr	BASEPRI, r0
    5fc2:	f04f 0004 	mov.w	r0, #4
    5fc6:	df02      	svc	2
    5fc8:	200009f8 	.word	0x200009f8
    5fcc:	200050d4 	.word	0x200050d4
    5fd0:	20002c6c 	.word	0x20002c6c
    5fd4:	20002cd4 	.word	0x20002cd4
    5fd8:	20002d18 	.word	0x20002d18
    5fdc:	20002d34 	.word	0x20002d34
    5fe0:	200011b4 	.word	0x200011b4
    5fe4:	20002cd8 	.word	0x20002cd8
    5fe8:	20002d1c 	.word	0x20002d1c
    5fec:	20002d28 	.word	0x20002d28
    5ff0:	20002cf4 	.word	0x20002cf4
    5ff4:	20002c64 	.word	0x20002c64
    5ff8:	20002d2c 	.word	0x20002d2c
    5ffc:	0000e3b1 	.word	0x0000e3b1
    6000:	0000d76b 	.word	0x0000d76b
    6004:	20002cf0 	.word	0x20002cf0
    6008:	200050d0 	.word	0x200050d0
    600c:	20002d08 	.word	0x20002d08

00006010 <adv_setup>:
{
    6010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (_radio.advertiser.adv_data.first !=
    6014:	4c7c      	ldr	r4, [pc, #496]	; (6208 <adv_setup+0x1f8>)
    6016:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    601a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    601e:	429a      	cmp	r2, r3
    6020:	d006      	beq.n	6030 <adv_setup+0x20>
		first = _radio.advertiser.adv_data.first + 1;
    6022:	3301      	adds	r3, #1
    6024:	b2db      	uxtb	r3, r3
			first = 0;
    6026:	2b02      	cmp	r3, #2
    6028:	bf08      	it	eq
    602a:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    602c:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    6030:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
    6034:	f894 2636 	ldrb.w	r2, [r4, #1590]	; 0x636
    6038:	429a      	cmp	r2, r3
    603a:	d006      	beq.n	604a <adv_setup+0x3a>
		first = _radio.advertiser.scan_data.first + 1;
    603c:	3301      	adds	r3, #1
    603e:	b2db      	uxtb	r3, r3
			first = 0;
    6040:	2b02      	cmp	r3, #2
    6042:	bf08      	it	eq
    6044:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    6046:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
	pdu = (void *)_radio.advertiser.adv_data.data
    604a:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
    604e:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    6052:	372b      	adds	r7, #43	; 0x2b
    6054:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    6058:	5de3      	ldrb	r3, [r4, r7]
    605a:	f003 030f 	and.w	r3, r3, #15
    605e:	2b07      	cmp	r3, #7
    6060:	d15f      	bne.n	6122 <adv_setup+0x112>
			if(h->adv_addr){
    6062:	f899 3003 	ldrb.w	r3, [r9, #3]
    6066:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    6068:	bf4c      	ite	mi
    606a:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    606e:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    6072:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    6074:	bf48      	it	mi
    6076:	3506      	addmi	r5, #6
			if(h->adi){
    6078:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    607a:	bf48      	it	mi
    607c:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    607e:	06da      	lsls	r2, r3, #27
    6080:	d549      	bpl.n	6116 <adv_setup+0x106>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + 183) * _radio.ext_advertiser.current_slot;
    6082:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    6086:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + 183) * _radio.ext_advertiser.current_slot;
    608a:	f894 2689 	ldrb.w	r2, [r4, #1673]	; 0x689
    608e:	33b7      	adds	r3, #183	; 0xb7
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    6090:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + 183) * _radio.ext_advertiser.current_slot;
    6094:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    6096:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + 183) * _radio.ext_advertiser.current_slot;
    6098:	f8c4 268c 	str.w	r2, [r4, #1676]	; 0x68c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    609c:	f040 8095 	bne.w	61ca <adv_setup+0x1ba>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    60a0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    60a4:	f003 0307 	and.w	r3, r3, #7
    60a8:	2b07      	cmp	r3, #7
    60aa:	f040 8081 	bne.w	61b0 <adv_setup+0x1a0>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    60ae:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    60b2:	1a82      	subs	r2, r0, r2
    60b4:	4610      	mov	r0, r2
    60b6:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    60b8:	f8c4 269c 	str.w	r2, [r4, #1692]	; 0x69c
				if(offset > 245700){
    60bc:	4a53      	ldr	r2, [pc, #332]	; (620c <adv_setup+0x1fc>)
    60be:	78ae      	ldrb	r6, [r5, #2]
    60c0:	f895 8000 	ldrb.w	r8, [r5]
    60c4:	2300      	movs	r3, #0
    60c6:	428b      	cmp	r3, r1
    60c8:	bf08      	it	eq
    60ca:	4282      	cmpeq	r2, r0
    60cc:	f080 8086 	bcs.w	61dc <adv_setup+0x1cc>
					ap->offs = offset/300;
    60d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
    60d4:	2300      	movs	r3, #0
    60d6:	f7fa f8c7 	bl	268 <__aeabi_uldivmod>
    60da:	f026 061f 	bic.w	r6, r6, #31
    60de:	7068      	strb	r0, [r5, #1]
    60e0:	f3c0 2004 	ubfx	r0, r0, #8, #5
    60e4:	4330      	orrs	r0, r6
    60e6:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    60e8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    60ec:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    60f0:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    60f4:	07db      	lsls	r3, r3, #31
    60f6:	d508      	bpl.n	610a <adv_setup+0xfa>
					_radio.ext_advertiser.aux_pckt_chan++;
    60f8:	f894 36a0 	ldrb.w	r3, [r4, #1696]	; 0x6a0
    60fc:	3301      	adds	r3, #1
    60fe:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    6100:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    6102:	bf08      	it	eq
    6104:	2300      	moveq	r3, #0
    6106:	f884 36a0 	strb.w	r3, [r4, #1696]	; 0x6a0
				ap->chan_idx = _radio.ext_advertiser.aux_pckt_chan;	
    610a:	782b      	ldrb	r3, [r5, #0]
    610c:	f894 26a0 	ldrb.w	r2, [r4, #1696]	; 0x6a0
    6110:	f362 0305 	bfi	r3, r2, #0, #6
    6114:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;
    6116:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    611a:	f36f 0300 	bfc	r3, #0, #1
    611e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		radio_pkt_tx_set(pdu);
    6122:	4648      	mov	r0, r9
    6124:	f004 fef2 	bl	af0c <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    6128:	5de3      	ldrb	r3, [r4, r7]
    612a:	f003 030f 	and.w	r3, r3, #15
    612e:	2b02      	cmp	r3, #2
    6130:	d062      	beq.n	61f8 <adv_setup+0x1e8>
    6132:	2b07      	cmp	r3, #7
    6134:	d060      	beq.n	61f8 <adv_setup+0x1e8>
			_radio.state = STATE_TX;
    6136:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    6138:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    613a:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    613c:	f004 fff0 	bl	b120 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    6140:	2000      	movs	r0, #0
    6142:	f004 ff5d 	bl	b000 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    6146:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    614a:	f3c3 0202 	ubfx	r2, r3, #0, #3
    614e:	b2d3      	uxtb	r3, r2
    6150:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    6152:	2000      	movs	r0, #0
    6154:	07ce      	lsls	r6, r1, #31
    6156:	f100 0501 	add.w	r5, r0, #1
    615a:	d552      	bpl.n	6202 <adv_setup+0x1f2>
			(_radio.advertiser.chan_map_current - 1);
    615c:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    615e:	4013      	ands	r3, r2
    6160:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    6164:	4d2a      	ldr	r5, [pc, #168]	; (6210 <adv_setup+0x200>)
			_radio.advertiser.chan_map_current &=
    6166:	f363 0202 	bfi	r2, r3, #0, #3
    616a:	4b2a      	ldr	r3, [pc, #168]	; (6214 <adv_setup+0x204>)
    616c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    6170:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    6174:	bf08      	it	eq
    6176:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    6178:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    617a:	bf0c      	ite	eq
    617c:	3201      	addeq	r2, #1
*/			chan_case = 0 ;
    617e:	2200      	movne	r2, #0
    6180:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    6182:	f894 368a 	ldrb.w	r3, [r4, #1674]	; 0x68a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    6186:	f894 2688 	ldrb.w	r2, [r4, #1672]	; 0x688
		_radio.ext_advertiser.event++;
    618a:	3301      	adds	r3, #1
    618c:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    618e:	429a      	cmp	r2, r3
		count++;
    6190:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    6194:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
		count++;
    6198:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    619a:	bf38      	it	cc
    619c:	2300      	movcc	r3, #0
*/			chan_set(37 + chan);
    619e:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    61a0:	bf38      	it	cc
    61a2:	f884 368a 	strbcc.w	r3, [r4, #1674]	; 0x68a
*/			chan_set(37 + chan);
    61a6:	3025      	adds	r0, #37	; 0x25
}
    61a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
*/			chan_set(37 + chan);
    61ac:	f7ff be2a 	b.w	5e04 <chan_set>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    61b0:	2b06      	cmp	r3, #6
    61b2:	d104      	bne.n	61be <adv_setup+0x1ae>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    61b4:	f8d4 0694 	ldr.w	r0, [r4, #1684]	; 0x694
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    61b8:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    61ba:	2100      	movs	r1, #0
    61bc:	e77e      	b.n	60bc <adv_setup+0xac>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    61be:	2b04      	cmp	r3, #4
    61c0:	f47f af7c 	bne.w	60bc <adv_setup+0xac>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    61c4:	f8d4 0698 	ldr.w	r0, [r4, #1688]	; 0x698
    61c8:	e7f6      	b.n	61b8 <adv_setup+0x1a8>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + 183) * _radio.ext_advertiser.event;
    61ca:	f894 068a 	ldrb.w	r0, [r4, #1674]	; 0x68a
    61ce:	4358      	muls	r0, r3
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    61d0:	f8d4 3690 	ldr.w	r3, [r4, #1680]	; 0x690
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + 183) * _radio.ext_advertiser.event;
    61d4:	f8c4 068c 	str.w	r0, [r4, #1676]	; 0x68c
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    61d8:	1a18      	subs	r0, r3, r0
    61da:	e7ee      	b.n	61ba <adv_setup+0x1aa>
					ap->offs = offset /30;
    61dc:	221e      	movs	r2, #30
    61de:	2300      	movs	r3, #0
    61e0:	f7fa f842 	bl	268 <__aeabi_uldivmod>
    61e4:	f026 061f 	bic.w	r6, r6, #31
    61e8:	7068      	strb	r0, [r5, #1]
    61ea:	f3c0 2004 	ubfx	r0, r0, #8, #5
    61ee:	4306      	orrs	r6, r0
    61f0:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    61f2:	f36f 18c7 	bfc	r8, #7, #1
    61f6:	e779      	b.n	60ec <adv_setup+0xdc>
			_radio.state = STATE_CLOSE;
    61f8:	2303      	movs	r3, #3
    61fa:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    61fc:	f004 ff16 	bl	b02c <radio_switch_complete_and_disable>
    6200:	e7a1      	b.n	6146 <adv_setup+0x136>
			bitmap >>= 1;
    6202:	0849      	lsrs	r1, r1, #1
    6204:	4628      	mov	r0, r5
    6206:	e7a5      	b.n	6154 <adv_setup+0x144>
    6208:	200009f8 	.word	0x200009f8
    620c:	0003bfc4 	.word	0x0003bfc4
    6210:	20001182 	.word	0x20001182
    6214:	20001181 	.word	0x20001181

00006218 <sched_after_mstr_free_slot_get>:
{
    6218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    621c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    621e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    6220:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    6222:	f8df 912c 	ldr.w	r9, [pc, #300]	; 6350 <sched_after_mstr_free_slot_get+0x138>
	ticker_id = ticker_id_prev = 0xff;
    6226:	f88d 501f 	strb.w	r5, [sp, #31]
{
    622a:	4680      	mov	r8, r0
    622c:	4693      	mov	fp, r2
    622e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    6230:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    6234:	601c      	str	r4, [r3, #0]
    6236:	9408      	str	r4, [sp, #32]
    6238:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    623a:	2302      	movs	r3, #2
    623c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    623e:	ab09      	add	r3, sp, #36	; 0x24
    6240:	9302      	str	r3, [sp, #8]
    6242:	4b3f      	ldr	r3, [pc, #252]	; (6340 <sched_after_mstr_free_slot_get+0x128>)
    6244:	9301      	str	r3, [sp, #4]
    6246:	ab08      	add	r3, sp, #32
    6248:	9300      	str	r3, [sp, #0]
    624a:	f10d 021f 	add.w	r2, sp, #31
    624e:	465b      	mov	r3, fp
    6250:	4641      	mov	r1, r8
    6252:	2000      	movs	r0, #0
    6254:	f7fe fb8c 	bl	4970 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    6258:	2802      	cmp	r0, #2
    625a:	d010      	beq.n	627e <sched_after_mstr_free_slot_get+0x66>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    625c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    625e:	b193      	cbz	r3, 6286 <sched_after_mstr_free_slot_get+0x6e>
    6260:	4a38      	ldr	r2, [pc, #224]	; (6344 <sched_after_mstr_free_slot_get+0x12c>)
    6262:	4939      	ldr	r1, [pc, #228]	; (6348 <sched_after_mstr_free_slot_get+0x130>)
    6264:	2003      	movs	r0, #3
    6266:	f7fc f813 	bl	2290 <bt_log>
    626a:	4040      	eors	r0, r0
    626c:	f380 8811 	msr	BASEPRI, r0
    6270:	f04f 0004 	mov.w	r0, #4
    6274:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6276:	4641      	mov	r1, r8
    6278:	2000      	movs	r0, #0
    627a:	f7fe fbf7 	bl	4a6c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6280:	2b02      	cmp	r3, #2
    6282:	d0f8      	beq.n	6276 <sched_after_mstr_free_slot_get+0x5e>
    6284:	e7ea      	b.n	625c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    6286:	f89d 201f 	ldrb.w	r2, [sp, #31]
    628a:	2aff      	cmp	r2, #255	; 0xff
    628c:	d04e      	beq.n	632c <sched_after_mstr_free_slot_get+0x114>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    628e:	2a06      	cmp	r2, #6
    6290:	d9d3      	bls.n	623a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    6292:	f899 3710 	ldrb.w	r3, [r9, #1808]	; 0x710
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    6296:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    6298:	429a      	cmp	r2, r3
    629a:	dace      	bge.n	623a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    629c:	3a07      	subs	r2, #7
    629e:	b292      	uxth	r2, r2
    62a0:	f44f 7182 	mov.w	r1, #260	; 0x104
    62a4:	f8d9 0708 	ldr.w	r0, [r9, #1800]	; 0x708
    62a8:	f7fd fc4a 	bl	3b40 <mem_get>
		if (conn && !conn->role) {
    62ac:	2800      	cmp	r0, #0
    62ae:	d0c4      	beq.n	623a <sched_after_mstr_free_slot_get+0x22>
    62b0:	f990 301d 	ldrsb.w	r3, [r0, #29]
    62b4:	2b00      	cmp	r3, #0
    62b6:	dbc0      	blt.n	623a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    62b8:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    62ba:	9a08      	ldr	r2, [sp, #32]
    62bc:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    62c0:	2b00      	cmp	r3, #0
    62c2:	da12      	bge.n	62ea <sched_after_mstr_free_slot_get+0xd2>
    62c4:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    62c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    62ca:	4571      	cmp	r1, lr
    62cc:	bf2c      	ite	cs
    62ce:	1852      	addcs	r2, r2, r1
    62d0:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    62d2:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    62d4:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    62d6:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    62d8:	f101 0104 	add.w	r1, r1, #4
    62dc:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    62de:	d108      	bne.n	62f2 <sched_after_mstr_free_slot_get+0xda>
			ticker_id_prev = ticker_id;
    62e0:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    62e4:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    62e6:	4616      	mov	r6, r2
    62e8:	e7a7      	b.n	623a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    62ea:	4573      	cmp	r3, lr
    62ec:	bf38      	it	cc
    62ee:	4673      	movcc	r3, lr
    62f0:	e7f0      	b.n	62d4 <sched_after_mstr_free_slot_get+0xbc>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    62f2:	4631      	mov	r1, r6
    62f4:	4610      	mov	r0, r2
    62f6:	9305      	str	r3, [sp, #20]
    62f8:	9204      	str	r2, [sp, #16]
    62fa:	f7fe fbcf 	bl	4a9c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    62fe:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    6302:	4288      	cmp	r0, r1
    6304:	9a04      	ldr	r2, [sp, #16]
    6306:	9b05      	ldr	r3, [sp, #20]
    6308:	d9ea      	bls.n	62e0 <sched_after_mstr_free_slot_get+0xc8>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    630a:	4810      	ldr	r0, [pc, #64]	; (634c <sched_after_mstr_free_slot_get+0x134>)
    630c:	4434      	add	r4, r6
    630e:	fba4 0100 	umull	r0, r1, r4, r0
    6312:	2307      	movs	r3, #7
    6314:	fb03 1104 	mla	r1, r3, r4, r1
    6318:	a307      	add	r3, pc, #28	; (adr r3, 6338 <sched_after_mstr_free_slot_get+0x120>)
    631a:	e9d3 2300 	ldrd	r2, r3, [r3]
    631e:	f7f9 ffa3 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    6322:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    6324:	6038      	str	r0, [r7, #0]
}
    6326:	b00b      	add	sp, #44	; 0x2c
    6328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    632c:	2dff      	cmp	r5, #255	; 0xff
    632e:	d1ec      	bne.n	630a <sched_after_mstr_free_slot_get+0xf2>
    6330:	e7f9      	b.n	6326 <sched_after_mstr_free_slot_get+0x10e>
    6332:	bf00      	nop
    6334:	f3af 8000 	nop.w
    6338:	3b9aca00 	.word	0x3b9aca00
    633c:	00000000 	.word	0x00000000
    6340:	00005a01 	.word	0x00005a01
    6344:	0000e33f 	.word	0x0000e33f
    6348:	0000ebcb 	.word	0x0000ebcb
    634c:	1afd498d 	.word	0x1afd498d
    6350:	200009f8 	.word	0x200009f8

00006354 <isr_adv_ci_adva_check>:
{
    6354:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    6356:	7804      	ldrb	r4, [r0, #0]
    6358:	780a      	ldrb	r2, [r1, #0]
    635a:	f3c4 1380 	ubfx	r3, r4, #6, #1
    635e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6362:	d119      	bne.n	6398 <isr_adv_ci_adva_check+0x44>
    6364:	f004 040f 	and.w	r4, r4, #15
    6368:	2c01      	cmp	r4, #1
    636a:	f101 0608 	add.w	r6, r1, #8
    636e:	f100 0502 	add.w	r5, r0, #2
    6372:	d008      	beq.n	6386 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    6374:	2206      	movs	r2, #6
    6376:	4631      	mov	r1, r6
    6378:	4628      	mov	r0, r5
    637a:	f7fa f939 	bl	5f0 <memcmp>
			 BDADDR_SIZE)) ||
    637e:	fab0 f080 	clz	r0, r0
    6382:	0940      	lsrs	r0, r0, #5
    6384:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    6386:	2206      	movs	r2, #6
    6388:	4631      	mov	r1, r6
    638a:	4628      	mov	r0, r5
    638c:	f7fa f930 	bl	5f0 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    6390:	2800      	cmp	r0, #0
    6392:	d1ef      	bne.n	6374 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    6394:	4620      	mov	r0, r4
    6396:	bd70      	pop	{r4, r5, r6, pc}
    6398:	2000      	movs	r0, #0
}
    639a:	bd70      	pop	{r4, r5, r6, pc}

0000639c <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    639c:	4a0b      	ldr	r2, [pc, #44]	; (63cc <rx_fc_lock+0x30>)
    639e:	f892 3778 	ldrb.w	r3, [r2, #1912]	; 0x778
    63a2:	f892 1779 	ldrb.w	r1, [r2, #1913]	; 0x779
    63a6:	4299      	cmp	r1, r3
    63a8:	d10e      	bne.n	63c8 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    63aa:	f892 3778 	ldrb.w	r3, [r2, #1912]	; 0x778
    63ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    63b2:	f8a3 0772 	strh.w	r0, [r3, #1906]	; 0x772
		req = _radio.fc_req + 1;
    63b6:	f892 3778 	ldrb.w	r3, [r2, #1912]	; 0x778
    63ba:	3301      	adds	r3, #1
    63bc:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    63be:	2b03      	cmp	r3, #3
    63c0:	bf08      	it	eq
    63c2:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    63c4:	f882 3778 	strb.w	r3, [r2, #1912]	; 0x778
    63c8:	4770      	bx	lr
    63ca:	bf00      	nop
    63cc:	200009f8 	.word	0x200009f8

000063d0 <ticker_success_assert>:
{
    63d0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    63d2:	b150      	cbz	r0, 63ea <ticker_success_assert+0x1a>
    63d4:	4a05      	ldr	r2, [pc, #20]	; (63ec <ticker_success_assert+0x1c>)
    63d6:	4906      	ldr	r1, [pc, #24]	; (63f0 <ticker_success_assert+0x20>)
    63d8:	2003      	movs	r0, #3
    63da:	f7fb ff59 	bl	2290 <bt_log>
    63de:	4040      	eors	r0, r0
    63e0:	f380 8811 	msr	BASEPRI, r0
    63e4:	f04f 0004 	mov.w	r0, #4
    63e8:	df02      	svc	2
    63ea:	bd08      	pop	{r3, pc}
    63ec:	0000e268 	.word	0x0000e268
    63f0:	0000ecaf 	.word	0x0000ecaf

000063f4 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    63f4:	2801      	cmp	r0, #1
{
    63f6:	b508      	push	{r3, lr}
    63f8:	4b0c      	ldr	r3, [pc, #48]	; (642c <ticker_stop_adv_assert+0x38>)
	if (status == TICKER_STATUS_FAILURE) {
    63fa:	d110      	bne.n	641e <ticker_stop_adv_assert+0x2a>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    63fc:	7c9a      	ldrb	r2, [r3, #18]
    63fe:	2a05      	cmp	r2, #5
    6400:	d102      	bne.n	6408 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    6402:	2200      	movs	r2, #0
    6404:	749a      	strb	r2, [r3, #18]
    6406:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    6408:	4a09      	ldr	r2, [pc, #36]	; (6430 <ticker_stop_adv_assert+0x3c>)
    640a:	490a      	ldr	r1, [pc, #40]	; (6434 <ticker_stop_adv_assert+0x40>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    640c:	2003      	movs	r0, #3
    640e:	f7fb ff3f 	bl	2290 <bt_log>
    6412:	4040      	eors	r0, r0
    6414:	f380 8811 	msr	BASEPRI, r0
    6418:	f04f 0004 	mov.w	r0, #4
    641c:	df02      	svc	2
    641e:	7c1b      	ldrb	r3, [r3, #16]
    6420:	2b05      	cmp	r3, #5
    6422:	d102      	bne.n	642a <ticker_stop_adv_assert+0x36>
    6424:	4a02      	ldr	r2, [pc, #8]	; (6430 <ticker_stop_adv_assert+0x3c>)
    6426:	4904      	ldr	r1, [pc, #16]	; (6438 <ticker_stop_adv_assert+0x44>)
    6428:	e7f0      	b.n	640c <ticker_stop_adv_assert+0x18>
    642a:	bd08      	pop	{r3, pc}
    642c:	200009f8 	.word	0x200009f8
    6430:	0000e27e 	.word	0x0000e27e
    6434:	0000d76b 	.word	0x0000d76b
    6438:	0000ec19 	.word	0x0000ec19

0000643c <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    643c:	2801      	cmp	r0, #1
{
    643e:	b508      	push	{r3, lr}
    6440:	4b0c      	ldr	r3, [pc, #48]	; (6474 <ticker_stop_scan_assert+0x38>)
	if (status == TICKER_STATUS_FAILURE) {
    6442:	d110      	bne.n	6466 <ticker_stop_scan_assert+0x2a>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    6444:	7c9a      	ldrb	r2, [r3, #18]
    6446:	2a06      	cmp	r2, #6
    6448:	d102      	bne.n	6450 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    644a:	2200      	movs	r2, #0
    644c:	749a      	strb	r2, [r3, #18]
    644e:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    6450:	4a09      	ldr	r2, [pc, #36]	; (6478 <ticker_stop_scan_assert+0x3c>)
    6452:	490a      	ldr	r1, [pc, #40]	; (647c <ticker_stop_scan_assert+0x40>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    6454:	2003      	movs	r0, #3
    6456:	f7fb ff1b 	bl	2290 <bt_log>
    645a:	4040      	eors	r0, r0
    645c:	f380 8811 	msr	BASEPRI, r0
    6460:	f04f 0004 	mov.w	r0, #4
    6464:	df02      	svc	2
    6466:	7c1b      	ldrb	r3, [r3, #16]
    6468:	2b06      	cmp	r3, #6
    646a:	d102      	bne.n	6472 <ticker_stop_scan_assert+0x36>
    646c:	4a02      	ldr	r2, [pc, #8]	; (6478 <ticker_stop_scan_assert+0x3c>)
    646e:	4904      	ldr	r1, [pc, #16]	; (6480 <ticker_stop_scan_assert+0x44>)
    6470:	e7f0      	b.n	6454 <ticker_stop_scan_assert+0x18>
    6472:	bd08      	pop	{r3, pc}
    6474:	200009f8 	.word	0x200009f8
    6478:	0000e295 	.word	0x0000e295
    647c:	0000d76b 	.word	0x0000d76b
    6480:	0000ec7c 	.word	0x0000ec7c

00006484 <ticker_update_slave_assert>:
{
    6484:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    6486:	b178      	cbz	r0, 64a8 <ticker_update_slave_assert+0x24>
    6488:	4b08      	ldr	r3, [pc, #32]	; (64ac <ticker_update_slave_assert+0x28>)
    648a:	7c9b      	ldrb	r3, [r3, #18]
    648c:	b2c9      	uxtb	r1, r1
    648e:	4299      	cmp	r1, r3
    6490:	d00a      	beq.n	64a8 <ticker_update_slave_assert+0x24>
    6492:	4a07      	ldr	r2, [pc, #28]	; (64b0 <ticker_update_slave_assert+0x2c>)
    6494:	4907      	ldr	r1, [pc, #28]	; (64b4 <ticker_update_slave_assert+0x30>)
    6496:	2003      	movs	r0, #3
    6498:	f7fb fefa 	bl	2290 <bt_log>
    649c:	4040      	eors	r0, r0
    649e:	f380 8811 	msr	BASEPRI, r0
    64a2:	f04f 0004 	mov.w	r0, #4
    64a6:	df02      	svc	2
    64a8:	bd08      	pop	{r3, pc}
    64aa:	bf00      	nop
    64ac:	200009f8 	.word	0x200009f8
    64b0:	0000e2ad 	.word	0x0000e2ad
    64b4:	0000ecd0 	.word	0x0000ecd0

000064b8 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    64b8:	4b04      	ldr	r3, [pc, #16]	; (64cc <ticker_job_disable+0x14>)
    64ba:	7d1b      	ldrb	r3, [r3, #20]
    64bc:	b123      	cbz	r3, 64c8 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    64be:	2101      	movs	r1, #1
    64c0:	2200      	movs	r2, #0
    64c2:	4608      	mov	r0, r1
    64c4:	f7fd bb9e 	b.w	3c04 <mayfly_enable>
    64c8:	4770      	bx	lr
    64ca:	bf00      	nop
    64cc:	200009f8 	.word	0x200009f8

000064d0 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    64d0:	2806      	cmp	r0, #6
{
    64d2:	b510      	push	{r4, lr}
    64d4:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    64d6:	d90a      	bls.n	64ee <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    64d8:	4b09      	ldr	r3, [pc, #36]	; (6500 <hdr_conn_get+0x30>)
    64da:	1fc2      	subs	r2, r0, #7
    64dc:	b292      	uxth	r2, r2
    64de:	f44f 7182 	mov.w	r1, #260	; 0x104
    64e2:	f8d3 0708 	ldr.w	r0, [r3, #1800]	; 0x708
    64e6:	f7fd fb2b 	bl	3b40 <mem_get>
    64ea:	6020      	str	r0, [r4, #0]
    64ec:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    64ee:	2805      	cmp	r0, #5
    64f0:	d004      	beq.n	64fc <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    64f2:	2806      	cmp	r0, #6
	return NULL;
    64f4:	4803      	ldr	r0, [pc, #12]	; (6504 <hdr_conn_get+0x34>)
    64f6:	bf18      	it	ne
    64f8:	2000      	movne	r0, #0
    64fa:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    64fc:	4802      	ldr	r0, [pc, #8]	; (6508 <hdr_conn_get+0x38>)
}
    64fe:	bd10      	pop	{r4, pc}
    6500:	200009f8 	.word	0x200009f8
    6504:	20001034 	.word	0x20001034
    6508:	20000a10 	.word	0x20000a10

0000650c <event_stop.part.12>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    650c:	b508      	push	{r3, lr}
	LL_ASSERT(!retval);
    650e:	4a05      	ldr	r2, [pc, #20]	; (6524 <event_stop.part.12+0x18>)
    6510:	4905      	ldr	r1, [pc, #20]	; (6528 <event_stop.part.12+0x1c>)
    6512:	2003      	movs	r0, #3
    6514:	f7fb febc 	bl	2290 <bt_log>
    6518:	4040      	eors	r0, r0
    651a:	f380 8811 	msr	BASEPRI, r0
    651e:	f04f 0004 	mov.w	r0, #4
    6522:	df02      	svc	2
    6524:	0000e391 	.word	0x0000e391
    6528:	0000e688 	.word	0x0000e688

0000652c <mayfly_xtal_retain.part.15>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    652c:	b508      	push	{r3, lr}
		if (s_xtal_retained) {
    652e:	4b0f      	ldr	r3, [pc, #60]	; (656c <mayfly_xtal_retain.part.15+0x40>)
    6530:	781a      	ldrb	r2, [r3, #0]
    6532:	b1d2      	cbz	r2, 656a <mayfly_xtal_retain.part.15+0x3e>
			s_xtal_retained = 0;
    6534:	2200      	movs	r2, #0
    6536:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    6538:	b1a8      	cbz	r0, 6566 <mayfly_xtal_retain.part.15+0x3a>
    653a:	2801      	cmp	r0, #1
    653c:	d108      	bne.n	6550 <mayfly_xtal_retain.part.15+0x24>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    653e:	4b0c      	ldr	r3, [pc, #48]	; (6570 <mayfly_xtal_retain.part.15+0x44>)
			retval = mayfly_enqueue(caller_id,
    6540:	2200      	movs	r2, #0
    6542:	4611      	mov	r1, r2
    6544:	f7fd fb86 	bl	3c54 <mayfly_enqueue>
			LL_ASSERT(!retval);
    6548:	b178      	cbz	r0, 656a <mayfly_xtal_retain.part.15+0x3e>
    654a:	4a0a      	ldr	r2, [pc, #40]	; (6574 <mayfly_xtal_retain.part.15+0x48>)
    654c:	490a      	ldr	r1, [pc, #40]	; (6578 <mayfly_xtal_retain.part.15+0x4c>)
    654e:	e001      	b.n	6554 <mayfly_xtal_retain.part.15+0x28>
				LL_ASSERT(0);
    6550:	4a08      	ldr	r2, [pc, #32]	; (6574 <mayfly_xtal_retain.part.15+0x48>)
    6552:	490a      	ldr	r1, [pc, #40]	; (657c <mayfly_xtal_retain.part.15+0x50>)
			LL_ASSERT(!retval);
    6554:	2003      	movs	r0, #3
    6556:	f7fb fe9b 	bl	2290 <bt_log>
    655a:	4040      	eors	r0, r0
    655c:	f380 8811 	msr	BASEPRI, r0
    6560:	f04f 0004 	mov.w	r0, #4
    6564:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    6566:	4b06      	ldr	r3, [pc, #24]	; (6580 <mayfly_xtal_retain.part.15+0x54>)
    6568:	e7ea      	b.n	6540 <mayfly_xtal_retain.part.15+0x14>
    656a:	bd08      	pop	{r3, pc}
    656c:	20001208 	.word	0x20001208
    6570:	20005038 	.word	0x20005038
    6574:	0000e303 	.word	0x0000e303
    6578:	0000e688 	.word	0x0000e688
    657c:	0000d76b 	.word	0x0000d76b
    6580:	20005028 	.word	0x20005028

00006584 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6584:	2200      	movs	r2, #0
{
    6586:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6588:	4611      	mov	r1, r2
    658a:	4b08      	ldr	r3, [pc, #32]	; (65ac <event_active+0x28>)
    658c:	4610      	mov	r0, r2
    658e:	f7fd fb61 	bl	3c54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6592:	b150      	cbz	r0, 65aa <event_active+0x26>
    6594:	4a06      	ldr	r2, [pc, #24]	; (65b0 <event_active+0x2c>)
    6596:	4907      	ldr	r1, [pc, #28]	; (65b4 <event_active+0x30>)
    6598:	2003      	movs	r0, #3
    659a:	f7fb fe79 	bl	2290 <bt_log>
    659e:	4040      	eors	r0, r0
    65a0:	f380 8811 	msr	BASEPRI, r0
    65a4:	f04f 0004 	mov.w	r0, #4
    65a8:	df02      	svc	2
    65aa:	bd08      	pop	{r3, pc}
    65ac:	20004f88 	.word	0x20004f88
    65b0:	0000e2dc 	.word	0x0000e2dc
    65b4:	0000e688 	.word	0x0000e688

000065b8 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    65b8:	2200      	movs	r2, #0
{
    65ba:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    65bc:	4611      	mov	r1, r2
    65be:	4b08      	ldr	r3, [pc, #32]	; (65e0 <event_xtal+0x28>)
    65c0:	4610      	mov	r0, r2
    65c2:	f7fd fb47 	bl	3c54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    65c6:	b150      	cbz	r0, 65de <event_xtal+0x26>
    65c8:	4a06      	ldr	r2, [pc, #24]	; (65e4 <event_xtal+0x2c>)
    65ca:	4907      	ldr	r1, [pc, #28]	; (65e8 <event_xtal+0x30>)
    65cc:	2003      	movs	r0, #3
    65ce:	f7fb fe5f 	bl	2290 <bt_log>
    65d2:	4040      	eors	r0, r0
    65d4:	f380 8811 	msr	BASEPRI, r0
    65d8:	f04f 0004 	mov.w	r0, #4
    65dc:	df02      	svc	2
    65de:	bd08      	pop	{r3, pc}
    65e0:	20005008 	.word	0x20005008
    65e4:	0000e2f8 	.word	0x0000e2f8
    65e8:	0000e688 	.word	0x0000e688

000065ec <mayfly_radio_active>:
{
    65ec:	b508      	push	{r3, lr}
    65ee:	4a0e      	ldr	r2, [pc, #56]	; (6628 <mayfly_radio_active+0x3c>)
		if (s_active++) {
    65f0:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    65f2:	b138      	cbz	r0, 6604 <mayfly_radio_active+0x18>
		if (s_active++) {
    65f4:	1c59      	adds	r1, r3, #1
    65f6:	7011      	strb	r1, [r2, #0]
    65f8:	b9ab      	cbnz	r3, 6626 <mayfly_radio_active+0x3a>
		radio_active_callback(1);
    65fa:	2001      	movs	r0, #1
}
    65fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    6600:	f003 be80 	b.w	a304 <radio_active_callback>
		LL_ASSERT(s_active);
    6604:	b953      	cbnz	r3, 661c <mayfly_radio_active+0x30>
    6606:	4a09      	ldr	r2, [pc, #36]	; (662c <mayfly_radio_active+0x40>)
    6608:	4909      	ldr	r1, [pc, #36]	; (6630 <mayfly_radio_active+0x44>)
    660a:	2003      	movs	r0, #3
    660c:	f7fb fe40 	bl	2290 <bt_log>
    6610:	4040      	eors	r0, r0
    6612:	f380 8811 	msr	BASEPRI, r0
    6616:	f04f 0004 	mov.w	r0, #4
    661a:	df02      	svc	2
		if (--s_active) {
    661c:	3b01      	subs	r3, #1
    661e:	b2db      	uxtb	r3, r3
    6620:	7013      	strb	r3, [r2, #0]
    6622:	2b00      	cmp	r3, #0
    6624:	d0ea      	beq.n	65fc <mayfly_radio_active+0x10>
    6626:	bd08      	pop	{r3, pc}
    6628:	200011b5 	.word	0x200011b5
    662c:	0000e2c8 	.word	0x0000e2c8
    6630:	0000e8c1 	.word	0x0000e8c1

00006634 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    6634:	2000      	movs	r0, #0
    6636:	f7ff bfd9 	b.w	65ec <mayfly_radio_active>
	...

0000663c <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    663c:	b2c0      	uxtb	r0, r0
{
    663e:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    6640:	1f03      	subs	r3, r0, #4
    6642:	2b01      	cmp	r3, #1
    6644:	d90a      	bls.n	665c <mayfly_radio_stop+0x20>
    6646:	4a0d      	ldr	r2, [pc, #52]	; (667c <mayfly_radio_stop+0x40>)
    6648:	490d      	ldr	r1, [pc, #52]	; (6680 <mayfly_radio_stop+0x44>)
    664a:	2003      	movs	r0, #3
    664c:	f7fb fe20 	bl	2290 <bt_log>
    6650:	4040      	eors	r0, r0
    6652:	f380 8811 	msr	BASEPRI, r0
    6656:	f04f 0004 	mov.w	r0, #4
    665a:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    665c:	4a09      	ldr	r2, [pc, #36]	; (6684 <mayfly_radio_stop+0x48>)
    665e:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    6660:	b13b      	cbz	r3, 6672 <mayfly_radio_stop+0x36>
	radio_used = ((_radio.state != STATE_NONE) &&
    6662:	3b04      	subs	r3, #4
    6664:	2b01      	cmp	r3, #1
    6666:	d904      	bls.n	6672 <mayfly_radio_stop+0x36>
			_radio.state = state;
    6668:	7510      	strb	r0, [r2, #20]
}
    666a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    666e:	f004 bc6d 	b.w	af4c <radio_disable>
	if (radio_used || !radio_is_idle()) {
    6672:	f004 fc9d 	bl	afb0 <radio_is_idle>
    6676:	2800      	cmp	r0, #0
    6678:	d0f7      	beq.n	666a <mayfly_radio_stop+0x2e>
}
    667a:	bd08      	pop	{r3, pc}
    667c:	0000e37f 	.word	0x0000e37f
    6680:	0000e8df 	.word	0x0000e8df
    6684:	200009f8 	.word	0x200009f8

00006688 <rx_packet_set>:
{
    6688:	b538      	push	{r3, r4, r5, lr}
    668a:	4605      	mov	r5, r0
    668c:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    668e:	2100      	movs	r1, #0
    6690:	4608      	mov	r0, r1
    6692:	f004 fbc1 	bl	ae18 <radio_phy_set>
	if (conn->enc_rx) {
    6696:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    669a:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    669c:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    66a0:	d50d      	bpl.n	66be <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    66a2:	211f      	movs	r1, #31
    66a4:	2008      	movs	r0, #8
    66a6:	f004 fbfd 	bl	aea4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    66aa:	4622      	mov	r2, r4
    66ac:	2100      	movs	r1, #0
    66ae:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    66b2:	f004 fe2f 	bl	b314 <radio_ccm_rx_pkt_set>
}
    66b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    66ba:	f004 bc21 	b.w	af00 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    66be:	2008      	movs	r0, #8
    66c0:	211b      	movs	r1, #27
    66c2:	f004 fbef 	bl	aea4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    66c6:	4620      	mov	r0, r4
    66c8:	e7f5      	b.n	66b6 <rx_packet_set+0x2e>
	...

000066cc <pdu_node_tx_release>:
{
    66cc:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    66ce:	4a15      	ldr	r2, [pc, #84]	; (6724 <pdu_node_tx_release+0x58>)
    66d0:	f892 3770 	ldrb.w	r3, [r2, #1904]	; 0x770
	if (last == _radio.packet_tx_count) {
    66d4:	f892 476c 	ldrb.w	r4, [r2, #1900]	; 0x76c
	last = _radio.packet_release_last + 1;
    66d8:	3301      	adds	r3, #1
    66da:	b2db      	uxtb	r3, r3
		last = 0;
    66dc:	429c      	cmp	r4, r3
    66de:	bf08      	it	eq
    66e0:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    66e2:	f892 476f 	ldrb.w	r4, [r2, #1903]	; 0x76f
    66e6:	429c      	cmp	r4, r3
    66e8:	d10a      	bne.n	6700 <pdu_node_tx_release+0x34>
    66ea:	4a0f      	ldr	r2, [pc, #60]	; (6728 <pdu_node_tx_release+0x5c>)
    66ec:	490f      	ldr	r1, [pc, #60]	; (672c <pdu_node_tx_release+0x60>)
    66ee:	2003      	movs	r0, #3
    66f0:	f7fb fdce 	bl	2290 <bt_log>
    66f4:	4040      	eors	r0, r0
    66f6:	f380 8811 	msr	BASEPRI, r0
    66fa:	f04f 0004 	mov.w	r0, #4
    66fe:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    6700:	f892 5770 	ldrb.w	r5, [r2, #1904]	; 0x770
    6704:	f8d2 4768 	ldr.w	r4, [r2, #1896]	; 0x768
    6708:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    670c:	f892 0770 	ldrb.w	r0, [r2, #1904]	; 0x770
    6710:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    6714:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    6716:	f882 3770 	strb.w	r3, [r2, #1904]	; 0x770
}
    671a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    671e:	f003 bdf3 	b.w	a308 <radio_event_callback>
    6722:	bf00      	nop
    6724:	200009f8 	.word	0x200009f8
    6728:	0000e4d1 	.word	0x0000e4d1
    672c:	0000e9c1 	.word	0x0000e9c1

00006730 <packet_tx_enqueue>:
{
    6730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    6734:	4c24      	ldr	r4, [pc, #144]	; (67c8 <packet_tx_enqueue+0x98>)
{
    6736:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    6738:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    673a:	b12e      	cbz	r6, 6748 <packet_tx_enqueue+0x18>
    673c:	f894 376d 	ldrb.w	r3, [r4, #1901]	; 0x76d
    6740:	f894 276e 	ldrb.w	r2, [r4, #1902]	; 0x76e
    6744:	429a      	cmp	r2, r3
    6746:	d101      	bne.n	674c <packet_tx_enqueue+0x1c>
    6748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    674c:	f894 876d 	ldrb.w	r8, [r4, #1901]	; 0x76d
    6750:	f8d4 9764 	ldr.w	r9, [r4, #1892]	; 0x764
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6754:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
    6758:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    675c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6760:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    6764:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    6766:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    6768:	f7fd f9ea 	bl	3b40 <mem_get>
    676c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    676e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    6772:	8c1a      	ldrh	r2, [r3, #32]
    6774:	4282      	cmp	r2, r0
    6776:	d11f      	bne.n	67b8 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    6778:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    677c:	b942      	cbnz	r2, 6790 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    677e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    6782:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    6786:	b91a      	cbnz	r2, 6790 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    6788:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    678c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    6790:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    6794:	b102      	cbz	r2, 6798 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    6796:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    6798:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    679c:	f894 376d 	ldrb.w	r3, [r4, #1901]	; 0x76d
		if (first == _radio.packet_tx_count) {
    67a0:	f894 276c 	ldrb.w	r2, [r4, #1900]	; 0x76c
		first = _radio.packet_tx_first + 1;
    67a4:	3301      	adds	r3, #1
    67a6:	b2db      	uxtb	r3, r3
			first = 0;
    67a8:	429a      	cmp	r2, r3
    67aa:	bf08      	it	eq
    67ac:	2300      	moveq	r3, #0
    67ae:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    67b0:	f884 376d 	strb.w	r3, [r4, #1901]	; 0x76d
    67b4:	b2f6      	uxtb	r6, r6
    67b6:	e7c0      	b.n	673a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    67b8:	792b      	ldrb	r3, [r5, #4]
    67ba:	f367 0301 	bfi	r3, r7, #0, #2
    67be:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    67c0:	4629      	mov	r1, r5
    67c2:	f7ff ff83 	bl	66cc <pdu_node_tx_release>
    67c6:	e7e9      	b.n	679c <packet_tx_enqueue+0x6c>
    67c8:	200009f8 	.word	0x200009f8

000067cc <connection_release>:
{
    67cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    67ce:	2201      	movs	r2, #1
{
    67d0:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    67d2:	4611      	mov	r1, r2
    67d4:	2000      	movs	r0, #0
    67d6:	f7fd fa15 	bl	3c04 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    67da:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    67de:	2100      	movs	r1, #0
    67e0:	f242 734a 	movw	r3, #10058	; 0x274a
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    67e4:	3207      	adds	r2, #7
	ticker_status =
    67e6:	9300      	str	r3, [sp, #0]
    67e8:	4608      	mov	r0, r1
    67ea:	4b3c      	ldr	r3, [pc, #240]	; (68dc <connection_release+0x110>)
    67ec:	b2d2      	uxtb	r2, r2
    67ee:	f7fe f883 	bl	48f8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    67f2:	f030 0102 	bics.w	r1, r0, #2
    67f6:	d00a      	beq.n	680e <connection_release+0x42>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    67f8:	4a39      	ldr	r2, [pc, #228]	; (68e0 <connection_release+0x114>)
    67fa:	493a      	ldr	r1, [pc, #232]	; (68e4 <connection_release+0x118>)
    67fc:	2003      	movs	r0, #3
    67fe:	f7fb fd47 	bl	2290 <bt_log>
    6802:	4040      	eors	r0, r0
    6804:	f380 8811 	msr	BASEPRI, r0
    6808:	f04f 0004 	mov.w	r0, #4
    680c:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    680e:	4b36      	ldr	r3, [pc, #216]	; (68e8 <connection_release+0x11c>)
    6810:	7d1a      	ldrb	r2, [r3, #20]
    6812:	2a05      	cmp	r2, #5
    6814:	461d      	mov	r5, r3
    6816:	d11b      	bne.n	6850 <connection_release+0x84>
					  conn->handle))) {
    6818:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    681a:	7c18      	ldrb	r0, [r3, #16]
    681c:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    681e:	4290      	cmp	r0, r2
    6820:	d116      	bne.n	6850 <connection_release+0x84>
		_radio.ticker_id_prepare = 0;
    6822:	7419      	strb	r1, [r3, #16]
		ticker_status =
    6824:	f242 735b 	movw	r3, #10075	; 0x275b
    6828:	9300      	str	r3, [sp, #0]
    682a:	2201      	movs	r2, #1
    682c:	4b2b      	ldr	r3, [pc, #172]	; (68dc <connection_release+0x110>)
    682e:	4608      	mov	r0, r1
    6830:	f7fe f862 	bl	48f8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6834:	f030 0202 	bics.w	r2, r0, #2
    6838:	d1de      	bne.n	67f8 <connection_release+0x2c>
		ticker_status =
    683a:	f242 7362 	movw	r3, #10082	; 0x2762
    683e:	9300      	str	r3, [sp, #0]
    6840:	4611      	mov	r1, r2
    6842:	4b26      	ldr	r3, [pc, #152]	; (68dc <connection_release+0x110>)
    6844:	4610      	mov	r0, r2
    6846:	f7fe f857 	bl	48f8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    684a:	f030 0302 	bics.w	r3, r0, #2
    684e:	d1d3      	bne.n	67f8 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    6850:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    6854:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    6858:	4299      	cmp	r1, r3
    685a:	d003      	beq.n	6864 <connection_release+0x98>
    685c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6860:	4299      	cmp	r1, r3
    6862:	d101      	bne.n	6868 <connection_release+0x9c>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    6864:	4e21      	ldr	r6, [pc, #132]	; (68ec <connection_release+0x120>)
    6866:	e012      	b.n	688e <connection_release+0xc2>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    6868:	790b      	ldrb	r3, [r1, #4]
    686a:	f36f 0301 	bfc	r3, #0, #2
    686e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    6870:	680b      	ldr	r3, [r1, #0]
    6872:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    6876:	8c20      	ldrh	r0, [r4, #32]
    6878:	f7ff ff28 	bl	66cc <pdu_node_tx_release>
    687c:	e7e8      	b.n	6850 <connection_release+0x84>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    687e:	6803      	ldr	r3, [r0, #0]
    6880:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    6884:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    6888:	4631      	mov	r1, r6
    688a:	f7fd f944 	bl	3b16 <mem_release>
	while ((conn->pkt_tx_head) &&
    688e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    6892:	b118      	cbz	r0, 689c <connection_release+0xd0>
    6894:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6898:	4298      	cmp	r0, r3
    689a:	d1f0      	bne.n	687e <connection_release+0xb2>
	conn->pkt_tx_ctrl = NULL;
    689c:	2300      	movs	r3, #0
    689e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    68a2:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    68a6:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    68aa:	b951      	cbnz	r1, 68c2 <connection_release+0xf6>
	conn->handle = 0xffff;
    68ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    68b0:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    68b2:	f8d5 3780 	ldr.w	r3, [r5, #1920]	; 0x780
    68b6:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    68b8:	bf08      	it	eq
    68ba:	f8c5 1780 	streq.w	r1, [r5, #1920]	; 0x780
}
    68be:	b002      	add	sp, #8
    68c0:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    68c2:	790b      	ldrb	r3, [r1, #4]
    68c4:	f36f 0301 	bfc	r3, #0, #2
    68c8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    68ca:	680b      	ldr	r3, [r1, #0]
    68cc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    68d0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    68d4:	8c20      	ldrh	r0, [r4, #32]
    68d6:	f7ff fef9 	bl	66cc <pdu_node_tx_release>
    68da:	e7e4      	b.n	68a6 <connection_release+0xda>
    68dc:	000063d1 	.word	0x000063d1
    68e0:	0000e4e5 	.word	0x0000e4e5
    68e4:	0000e56e 	.word	0x0000e56e
    68e8:	200009f8 	.word	0x200009f8
    68ec:	2000114c 	.word	0x2000114c

000068f0 <tx_packet_set>:
{
    68f0:	b538      	push	{r3, r4, r5, lr}
    68f2:	4605      	mov	r5, r0
    68f4:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    68f6:	2100      	movs	r1, #0
    68f8:	4608      	mov	r0, r1
    68fa:	f004 fa8d 	bl	ae18 <radio_phy_set>
	if (conn->enc_tx) {
    68fe:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    6902:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    6904:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    6908:	d50c      	bpl.n	6924 <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    690a:	211f      	movs	r1, #31
    690c:	2008      	movs	r0, #8
    690e:	f004 fac9 	bl	aea4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    6912:	4621      	mov	r1, r4
    6914:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    6918:	f004 fd38 	bl	b38c <radio_ccm_tx_pkt_set>
}
    691c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    6920:	f004 baf4 	b.w	af0c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    6924:	2008      	movs	r0, #8
    6926:	211b      	movs	r1, #27
    6928:	f004 fabc 	bl	aea4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    692c:	4620      	mov	r0, r4
    692e:	e7f5      	b.n	691c <tx_packet_set+0x2c>

00006930 <sched_after_mstr_free_offset_get>:
{
    6930:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6932:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    6934:	aa02      	add	r2, sp, #8
{
    6936:	461c      	mov	r4, r3
    6938:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    693a:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    693e:	3127      	adds	r1, #39	; 0x27
    6940:	2001      	movs	r0, #1
    6942:	f7ff fc69 	bl	6218 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    6946:	6823      	ldr	r3, [r4, #0]
    6948:	b343      	cbz	r3, 699c <sched_after_mstr_free_offset_get+0x6c>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    694a:	9801      	ldr	r0, [sp, #4]
    694c:	1b83      	subs	r3, r0, r6
    694e:	021b      	lsls	r3, r3, #8
    6950:	d50a      	bpl.n	6968 <sched_after_mstr_free_offset_get+0x38>
    6952:	4a17      	ldr	r2, [pc, #92]	; (69b0 <sched_after_mstr_free_offset_get+0x80>)
    6954:	4917      	ldr	r1, [pc, #92]	; (69b4 <sched_after_mstr_free_offset_get+0x84>)
    6956:	2003      	movs	r0, #3
    6958:	f7fb fc9a 	bl	2290 <bt_log>
    695c:	4040      	eors	r0, r0
    695e:	f380 8811 	msr	BASEPRI, r0
    6962:	f04f 0004 	mov.w	r0, #4
    6966:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    6968:	4631      	mov	r1, r6
    696a:	f7fe f897 	bl	4a9c <ticker_ticks_diff_get>
    696e:	4602      	mov	r2, r0
    6970:	4811      	ldr	r0, [pc, #68]	; (69b8 <sched_after_mstr_free_offset_get+0x88>)
    6972:	2307      	movs	r3, #7
    6974:	fba2 0100 	umull	r0, r1, r2, r0
    6978:	fb03 1102 	mla	r1, r3, r2, r1
    697c:	a30a      	add	r3, pc, #40	; (adr r3, 69a8 <sched_after_mstr_free_offset_get+0x78>)
    697e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6982:	f7f9 fc71 	bl	268 <__aeabi_uldivmod>
    6986:	6823      	ldr	r3, [r4, #0]
    6988:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    698a:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    698c:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    698e:	db05      	blt.n	699c <sched_after_mstr_free_offset_get+0x6c>
		u32_t conn_interval_us = conn_interval * 1250;
    6990:	f240 40e2 	movw	r0, #1250	; 0x4e2
    6994:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    6996:	6823      	ldr	r3, [r4, #0]
    6998:	4298      	cmp	r0, r3
    699a:	d301      	bcc.n	69a0 <sched_after_mstr_free_offset_get+0x70>
}
    699c:	b002      	add	sp, #8
    699e:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    69a0:	1a1b      	subs	r3, r3, r0
    69a2:	6023      	str	r3, [r4, #0]
    69a4:	e7f7      	b.n	6996 <sched_after_mstr_free_offset_get+0x66>
    69a6:	bf00      	nop
    69a8:	3b9aca00 	.word	0x3b9aca00
    69ac:	00000000 	.word	0x00000000
    69b0:	0000e35e 	.word	0x0000e35e
    69b4:	0000eb7e 	.word	0x0000eb7e
    69b8:	1afd498d 	.word	0x1afd498d

000069bc <mayfly_sched_win_offset_use>:
{
    69bc:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    69be:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    69c2:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    69c4:	6f82      	ldr	r2, [r0, #120]	; 0x78
    69c6:	68c1      	ldr	r1, [r0, #12]
    69c8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    69ca:	f7ff ffb1 	bl	6930 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    69ce:	a902      	add	r1, sp, #8
    69d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    69d2:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    69d4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    69d8:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    69dc:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    69de:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    69e2:	f7f9 fe1a 	bl	61a <memcpy>
}
    69e6:	b002      	add	sp, #8
    69e8:	bd10      	pop	{r4, pc}
	...

000069ec <ticker_stop_adv_stop>:
{
    69ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    69ee:	4c45      	ldr	r4, [pc, #276]	; (6b04 <ticker_stop_adv_stop+0x118>)
	if (status != TICKER_STATUS_SUCCESS) {
    69f0:	b170      	cbz	r0, 6a10 <ticker_stop_adv_stop+0x24>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    69f2:	7ca3      	ldrb	r3, [r4, #18]
    69f4:	2b05      	cmp	r3, #5
    69f6:	f000 8083 	beq.w	6b00 <ticker_stop_adv_stop+0x114>
    69fa:	4a43      	ldr	r2, [pc, #268]	; (6b08 <ticker_stop_adv_stop+0x11c>)
    69fc:	4943      	ldr	r1, [pc, #268]	; (6b0c <ticker_stop_adv_stop+0x120>)
		LL_ASSERT(_radio.ticker_id_prepare);
    69fe:	2003      	movs	r0, #3
    6a00:	f7fb fc46 	bl	2290 <bt_log>
    6a04:	4040      	eors	r0, r0
    6a06:	f380 8811 	msr	BASEPRI, r0
    6a0a:	f04f 0004 	mov.w	r0, #4
    6a0e:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6a10:	7c23      	ldrb	r3, [r4, #16]
    6a12:	2b05      	cmp	r3, #5
    6a14:	d002      	beq.n	6a1c <ticker_stop_adv_stop+0x30>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    6a16:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6a18:	2b05      	cmp	r3, #5
    6a1a:	d162      	bne.n	6ae2 <ticker_stop_adv_stop+0xf6>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    6a1c:	ab04      	add	r3, sp, #16
    6a1e:	2202      	movs	r2, #2
    6a20:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6a24:	2200      	movs	r2, #0
    6a26:	9300      	str	r3, [sp, #0]
    6a28:	2101      	movs	r1, #1
    6a2a:	4b39      	ldr	r3, [pc, #228]	; (6b10 <ticker_stop_adv_stop+0x124>)
    6a2c:	4610      	mov	r0, r2
    6a2e:	f7fd ff63 	bl	48f8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    6a32:	2802      	cmp	r0, #2
    6a34:	d00d      	beq.n	6a52 <ticker_stop_adv_stop+0x66>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    6a36:	9802      	ldr	r0, [sp, #8]
    6a38:	b1c0      	cbz	r0, 6a6c <ticker_stop_adv_stop+0x80>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    6a3a:	9802      	ldr	r0, [sp, #8]
    6a3c:	2801      	cmp	r0, #1
    6a3e:	d15c      	bne.n	6afa <ticker_stop_adv_stop+0x10e>
		if (_radio.role != ROLE_NONE) {
    6a40:	7ce3      	ldrb	r3, [r4, #19]
    6a42:	2b00      	cmp	r3, #0
    6a44:	d04d      	beq.n	6ae2 <ticker_stop_adv_stop+0xf6>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    6a46:	4b33      	ldr	r3, [pc, #204]	; (6b14 <ticker_stop_adv_stop+0x128>)
    6a48:	2204      	movs	r2, #4
    6a4a:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6a4c:	2200      	movs	r2, #0
    6a4e:	4611      	mov	r1, r2
    6a50:	e043      	b.n	6ada <ticker_stop_adv_stop+0xee>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6a52:	2201      	movs	r2, #1
    6a54:	4611      	mov	r1, r2
    6a56:	4610      	mov	r0, r2
    6a58:	f7fd f8d4 	bl	3c04 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    6a5c:	9b02      	ldr	r3, [sp, #8]
    6a5e:	2b02      	cmp	r3, #2
    6a60:	d1e9      	bne.n	6a36 <ticker_stop_adv_stop+0x4a>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6a62:	2101      	movs	r1, #1
    6a64:	2000      	movs	r0, #0
    6a66:	f7fe f801 	bl	4a6c <ticker_job_sched>
    6a6a:	e7f7      	b.n	6a5c <ticker_stop_adv_stop+0x70>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    6a6c:	2302      	movs	r3, #2
    6a6e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    6a70:	7c23      	ldrb	r3, [r4, #16]
    6a72:	b913      	cbnz	r3, 6a7a <ticker_stop_adv_stop+0x8e>
    6a74:	4a28      	ldr	r2, [pc, #160]	; (6b18 <ticker_stop_adv_stop+0x12c>)
    6a76:	4929      	ldr	r1, [pc, #164]	; (6b1c <ticker_stop_adv_stop+0x130>)
    6a78:	e7c1      	b.n	69fe <ticker_stop_adv_stop+0x12>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6a7a:	ab03      	add	r3, sp, #12
    6a7c:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    6a7e:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6a80:	4611      	mov	r1, r2
    6a82:	9300      	str	r3, [sp, #0]
    6a84:	4b22      	ldr	r3, [pc, #136]	; (6b10 <ticker_stop_adv_stop+0x124>)
    6a86:	f7fd ff37 	bl	48f8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    6a8a:	2802      	cmp	r0, #2
    6a8c:	d00f      	beq.n	6aae <ticker_stop_adv_stop+0xc2>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    6a8e:	9a03      	ldr	r2, [sp, #12]
    6a90:	b1d2      	cbz	r2, 6ac8 <ticker_stop_adv_stop+0xdc>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    6a92:	9c03      	ldr	r4, [sp, #12]
    6a94:	2c01      	cmp	r4, #1
    6a96:	d130      	bne.n	6afa <ticker_stop_adv_stop+0x10e>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6a98:	2200      	movs	r2, #0
    6a9a:	4611      	mov	r1, r2
    6a9c:	4b20      	ldr	r3, [pc, #128]	; (6b20 <ticker_stop_adv_stop+0x134>)
    6a9e:	4620      	mov	r0, r4
    6aa0:	f7fd f8d8 	bl	3c54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    6aa4:	4602      	mov	r2, r0
    6aa6:	b330      	cbz	r0, 6af6 <ticker_stop_adv_stop+0x10a>
			LL_ASSERT(!ret);
    6aa8:	4a1b      	ldr	r2, [pc, #108]	; (6b18 <ticker_stop_adv_stop+0x12c>)
    6aaa:	491e      	ldr	r1, [pc, #120]	; (6b24 <ticker_stop_adv_stop+0x138>)
    6aac:	e7a7      	b.n	69fe <ticker_stop_adv_stop+0x12>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6aae:	2201      	movs	r2, #1
    6ab0:	4611      	mov	r1, r2
    6ab2:	4610      	mov	r0, r2
    6ab4:	f7fd f8a6 	bl	3c04 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    6ab8:	9b03      	ldr	r3, [sp, #12]
    6aba:	2b02      	cmp	r3, #2
    6abc:	d1e7      	bne.n	6a8e <ticker_stop_adv_stop+0xa2>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6abe:	2101      	movs	r1, #1
    6ac0:	2000      	movs	r0, #0
    6ac2:	f7fd ffd3 	bl	4a6c <ticker_job_sched>
    6ac6:	e7f7      	b.n	6ab8 <ticker_stop_adv_stop+0xcc>
			u32_t ticks_xtal_to_start =
    6ac8:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    6aca:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    6acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    6ad0:	428b      	cmp	r3, r1
    6ad2:	d210      	bcs.n	6af6 <ticker_stop_adv_stop+0x10a>
				ret = mayfly_enqueue(
    6ad4:	4b12      	ldr	r3, [pc, #72]	; (6b20 <ticker_stop_adv_stop+0x134>)
				ret = mayfly_enqueue(
    6ad6:	4611      	mov	r1, r2
    6ad8:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6ada:	f7fd f8bb 	bl	3c54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    6ade:	2800      	cmp	r0, #0
    6ae0:	d1e2      	bne.n	6aa8 <ticker_stop_adv_stop+0xbc>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6ae2:	2200      	movs	r2, #0
    6ae4:	4b10      	ldr	r3, [pc, #64]	; (6b28 <ticker_stop_adv_stop+0x13c>)
    6ae6:	4611      	mov	r1, r2
    6ae8:	2001      	movs	r0, #1
    6aea:	f7fd f8b3 	bl	3c54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6aee:	b138      	cbz	r0, 6b00 <ticker_stop_adv_stop+0x114>
    6af0:	4a05      	ldr	r2, [pc, #20]	; (6b08 <ticker_stop_adv_stop+0x11c>)
    6af2:	490e      	ldr	r1, [pc, #56]	; (6b2c <ticker_stop_adv_stop+0x140>)
    6af4:	e783      	b.n	69fe <ticker_stop_adv_stop+0x12>
				ret = mayfly_enqueue(
    6af6:	4b0e      	ldr	r3, [pc, #56]	; (6b30 <ticker_stop_adv_stop+0x144>)
    6af8:	e7ed      	b.n	6ad6 <ticker_stop_adv_stop+0xea>
		LL_ASSERT(0);
    6afa:	4a07      	ldr	r2, [pc, #28]	; (6b18 <ticker_stop_adv_stop+0x12c>)
    6afc:	490d      	ldr	r1, [pc, #52]	; (6b34 <ticker_stop_adv_stop+0x148>)
    6afe:	e77e      	b.n	69fe <ticker_stop_adv_stop+0x12>
}
    6b00:	b004      	add	sp, #16
    6b02:	bd10      	pop	{r4, pc}
    6b04:	200009f8 	.word	0x200009f8
    6b08:	0000e432 	.word	0x0000e432
    6b0c:	0000ec4c 	.word	0x0000ec4c
    6b10:	00005a01 	.word	0x00005a01
    6b14:	20004fd8 	.word	0x20004fd8
    6b18:	0000e416 	.word	0x0000e416
    6b1c:	0000eaae 	.word	0x0000eaae
    6b20:	20004fa8 	.word	0x20004fa8
    6b24:	0000eb00 	.word	0x0000eb00
    6b28:	20004f78 	.word	0x20004f78
    6b2c:	0000e688 	.word	0x0000e688
    6b30:	20005048 	.word	0x20005048
    6b34:	0000d76b 	.word	0x0000d76b

00006b38 <isr_scan_tgta_check.isra.29>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6b38:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6b3a:	4c16      	ldr	r4, [pc, #88]	; (6b94 <isr_scan_tgta_check.isra.29+0x5c>)
    6b3c:	7803      	ldrb	r3, [r0, #0]
    6b3e:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			BDADDR_SIZE) == 0))) ||
    6b42:	09db      	lsrs	r3, r3, #7
    6b44:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    6b48:	4605      	mov	r5, r0
    6b4a:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    6b4c:	d007      	beq.n	6b5e <isr_scan_tgta_check.isra.29+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6b4e:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
    6b52:	f3c0 1001 	ubfx	r0, r0, #4, #2
    6b56:	f010 0002 	ands.w	r0, r0, #2
    6b5a:	d10b      	bne.n	6b74 <isr_scan_tgta_check.isra.29+0x3c>
    6b5c:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    6b5e:	f100 0108 	add.w	r1, r0, #8
    6b62:	2206      	movs	r2, #6
    6b64:	f204 604e 	addw	r0, r4, #1614	; 0x64e
    6b68:	f7f9 fd42 	bl	5f0 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6b6c:	2800      	cmp	r0, #0
    6b6e:	d1ee      	bne.n	6b4e <isr_scan_tgta_check.isra.29+0x16>
			BDADDR_SIZE) == 0))) ||
    6b70:	2001      	movs	r0, #1
    6b72:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6b74:	f995 3000 	ldrsb.w	r3, [r5]
    6b78:	2b00      	cmp	r3, #0
    6b7a:	da09      	bge.n	6b90 <isr_scan_tgta_check.isra.29+0x58>
	    (pdu->rx_addr != 0) &&
    6b7c:	7b6b      	ldrb	r3, [r5, #13]
    6b7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6b82:	2b40      	cmp	r3, #64	; 0x40
    6b84:	d104      	bne.n	6b90 <isr_scan_tgta_check.isra.29+0x58>
		if (dir_report) {
    6b86:	2e00      	cmp	r6, #0
    6b88:	d0f2      	beq.n	6b70 <isr_scan_tgta_check.isra.29+0x38>
			*dir_report = true;
    6b8a:	2001      	movs	r0, #1
    6b8c:	7030      	strb	r0, [r6, #0]
    6b8e:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    6b90:	2000      	movs	r0, #0
}
    6b92:	bd70      	pop	{r4, r5, r6, pc}
    6b94:	200009f8 	.word	0x200009f8

00006b98 <packet_rx_enqueue>:
{
    6b98:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    6b9a:	4a19      	ldr	r2, [pc, #100]	; (6c00 <packet_rx_enqueue+0x68>)
    6b9c:	f892 3739 	ldrb.w	r3, [r2, #1849]	; 0x739
    6ba0:	f892 173a 	ldrb.w	r1, [r2, #1850]	; 0x73a
    6ba4:	4299      	cmp	r1, r3
    6ba6:	d10a      	bne.n	6bbe <packet_rx_enqueue+0x26>
    6ba8:	4a16      	ldr	r2, [pc, #88]	; (6c04 <packet_rx_enqueue+0x6c>)
    6baa:	4917      	ldr	r1, [pc, #92]	; (6c08 <packet_rx_enqueue+0x70>)
	LL_ASSERT(link);
    6bac:	2003      	movs	r0, #3
    6bae:	f7fb fb6f 	bl	2290 <bt_log>
    6bb2:	4040      	eors	r0, r0
    6bb4:	f380 8811 	msr	BASEPRI, r0
    6bb8:	f04f 0004 	mov.w	r0, #4
    6bbc:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6bbe:	f892 1739 	ldrb.w	r1, [r2, #1849]	; 0x739
    6bc2:	f8d2 3734 	ldr.w	r3, [r2, #1844]	; 0x734
    6bc6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6bca:	f892 3770 	ldrb.w	r3, [r2, #1904]	; 0x770
	link = node_rx->hdr.onion.link;
    6bce:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6bd0:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    6bd2:	f892 3739 	ldrb.w	r3, [r2, #1849]	; 0x739
	if (last == _radio.packet_rx_count) {
    6bd6:	f892 4738 	ldrb.w	r4, [r2, #1848]	; 0x738
	last = _radio.packet_rx_last + 1;
    6bda:	3301      	adds	r3, #1
    6bdc:	b2db      	uxtb	r3, r3
		last = 0;
    6bde:	429c      	cmp	r4, r3
    6be0:	bf08      	it	eq
    6be2:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    6be4:	f882 3739 	strb.w	r3, [r2, #1849]	; 0x739
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6be8:	f502 62e9 	add.w	r2, r2, #1864	; 0x748
    6bec:	f7fc ffc2 	bl	3b74 <memq_enqueue>
	LL_ASSERT(link);
    6bf0:	b910      	cbnz	r0, 6bf8 <packet_rx_enqueue+0x60>
    6bf2:	4a04      	ldr	r2, [pc, #16]	; (6c04 <packet_rx_enqueue+0x6c>)
    6bf4:	4905      	ldr	r1, [pc, #20]	; (6c0c <packet_rx_enqueue+0x74>)
    6bf6:	e7d9      	b.n	6bac <packet_rx_enqueue+0x14>
}
    6bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6bfc:	f003 bb84 	b.w	a308 <radio_event_callback>
    6c00:	200009f8 	.word	0x200009f8
    6c04:	0000e4bf 	.word	0x0000e4bf
    6c08:	0000e960 	.word	0x0000e960
    6c0c:	0000e9a7 	.word	0x0000e9a7

00006c10 <mayfly_adv_stop>:
{
    6c10:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    6c12:	2001      	movs	r0, #1
    6c14:	f7fe ff1e 	bl	5a54 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    6c18:	4604      	mov	r4, r0
    6c1a:	b950      	cbnz	r0, 6c32 <mayfly_adv_stop+0x22>
    6c1c:	4a0d      	ldr	r2, [pc, #52]	; (6c54 <mayfly_adv_stop+0x44>)
    6c1e:	490e      	ldr	r1, [pc, #56]	; (6c58 <mayfly_adv_stop+0x48>)
    6c20:	2003      	movs	r0, #3
    6c22:	f7fb fb35 	bl	2290 <bt_log>
    6c26:	4040      	eors	r0, r0
    6c28:	f380 8811 	msr	BASEPRI, r0
    6c2c:	f04f 0004 	mov.w	r0, #4
    6c30:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
    6c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6c36:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6c38:	2306      	movs	r3, #6
    6c3a:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    6c3c:	2210      	movs	r2, #16
    6c3e:	2100      	movs	r1, #0
    6c40:	300b      	adds	r0, #11
    6c42:	f7f9 fd16 	bl	672 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    6c46:	233c      	movs	r3, #60	; 0x3c
    6c48:	72e3      	strb	r3, [r4, #11]
}
    6c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    6c4e:	f7ff bfa3 	b.w	6b98 <packet_rx_enqueue>
    6c52:	bf00      	nop
    6c54:	0000e406 	.word	0x0000e406
    6c58:	0000e8a4 	.word	0x0000e8a4

00006c5c <terminate_ind_rx_enqueue>:
{
    6c5c:	b510      	push	{r4, lr}
    6c5e:	4603      	mov	r3, r0
    6c60:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    6c62:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    6c66:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    6c6a:	b950      	cbnz	r0, 6c82 <terminate_ind_rx_enqueue+0x26>
    6c6c:	4a11      	ldr	r2, [pc, #68]	; (6cb4 <terminate_ind_rx_enqueue+0x58>)
    6c6e:	4912      	ldr	r1, [pc, #72]	; (6cb8 <terminate_ind_rx_enqueue+0x5c>)
	LL_ASSERT(link);
    6c70:	2003      	movs	r0, #3
    6c72:	f7fb fb0d 	bl	2290 <bt_log>
    6c76:	4040      	eors	r0, r0
    6c78:	f380 8811 	msr	BASEPRI, r0
    6c7c:	f04f 0004 	mov.w	r0, #4
    6c80:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    6c82:	8c1c      	ldrh	r4, [r3, #32]
    6c84:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    6c88:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6c8c:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6c8e:	4a0b      	ldr	r2, [pc, #44]	; (6cbc <terminate_ind_rx_enqueue+0x60>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6c90:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6c94:	f892 4770 	ldrb.w	r4, [r2, #1904]	; 0x770
    6c98:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6c9c:	f502 62e9 	add.w	r2, r2, #1864	; 0x748
    6ca0:	f7fc ff68 	bl	3b74 <memq_enqueue>
	LL_ASSERT(link);
    6ca4:	b910      	cbnz	r0, 6cac <terminate_ind_rx_enqueue+0x50>
    6ca6:	4a03      	ldr	r2, [pc, #12]	; (6cb4 <terminate_ind_rx_enqueue+0x58>)
    6ca8:	4905      	ldr	r1, [pc, #20]	; (6cc0 <terminate_ind_rx_enqueue+0x64>)
    6caa:	e7e1      	b.n	6c70 <terminate_ind_rx_enqueue+0x14>
}
    6cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6cb0:	f003 bb2a 	b.w	a308 <radio_event_callback>
    6cb4:	0000e4f8 	.word	0x0000e4f8
    6cb8:	0000ebec 	.word	0x0000ebec
    6cbc:	200009f8 	.word	0x200009f8
    6cc0:	0000e9a7 	.word	0x0000e9a7

00006cc4 <isr_rx_scan_report.isra.37>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    6cc4:	b570      	push	{r4, r5, r6, lr}
    6cc6:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    6cc8:	2003      	movs	r0, #3
    6cca:	f7fe fec3 	bl	5a54 <packet_rx_reserve_get>
	if (node_rx == 0) {
    6cce:	b368      	cbz	r0, 6d2c <isr_rx_scan_report.isra.37+0x68>
	node_rx->hdr.handle = 0xffff;
    6cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6cd4:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    6cd6:	4b16      	ldr	r3, [pc, #88]	; (6d30 <isr_rx_scan_report.isra.37+0x6c>)
    6cd8:	f893 364d 	ldrb.w	r3, [r3, #1613]	; 0x64d
    6cdc:	075a      	lsls	r2, r3, #29
    6cde:	d021      	beq.n	6d24 <isr_rx_scan_report.isra.37+0x60>
		switch (_radio.scanner.phy) {
    6ce0:	f3c3 0302 	ubfx	r3, r3, #0, #3
    6ce4:	b2da      	uxtb	r2, r3
    6ce6:	2a01      	cmp	r2, #1
    6ce8:	d00c      	beq.n	6d04 <isr_rx_scan_report.isra.37+0x40>
    6cea:	2a04      	cmp	r2, #4
    6cec:	d00b      	beq.n	6d06 <isr_rx_scan_report.isra.37+0x42>
			LL_ASSERT(0);
    6cee:	4a11      	ldr	r2, [pc, #68]	; (6d34 <isr_rx_scan_report.isra.37+0x70>)
    6cf0:	4911      	ldr	r1, [pc, #68]	; (6d38 <isr_rx_scan_report.isra.37+0x74>)
    6cf2:	2003      	movs	r0, #3
    6cf4:	f7fb facc 	bl	2290 <bt_log>
    6cf8:	4040      	eors	r0, r0
    6cfa:	f380 8811 	msr	BASEPRI, r0
    6cfe:	f04f 0004 	mov.w	r0, #4
    6d02:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    6d04:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    6d06:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6d08:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    6d0a:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    6d0e:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    6d10:	b156      	cbz	r6, 6d28 <isr_rx_scan_report.isra.37+0x64>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    6d12:	f004 f9a3 	bl	b05c <radio_rssi_get>
			     pdu_adv_rx->len] =
    6d16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    6d1a:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    6d1c:	f7ff ff3c 	bl	6b98 <packet_rx_enqueue>
	return 0;
    6d20:	2000      	movs	r0, #0
    6d22:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6d24:	2302      	movs	r3, #2
    6d26:	e7ee      	b.n	6d06 <isr_rx_scan_report.isra.37+0x42>
			     pdu_adv_rx->len] =
    6d28:	207f      	movs	r0, #127	; 0x7f
    6d2a:	e7f6      	b.n	6d1a <isr_rx_scan_report.isra.37+0x56>
		return 1;
    6d2c:	2001      	movs	r0, #1
}
    6d2e:	bd70      	pop	{r4, r5, r6, pc}
    6d30:	200009f8 	.word	0x200009f8
    6d34:	0000e1dd 	.word	0x0000e1dd
    6d38:	0000d76b 	.word	0x0000d76b

00006d3c <prepare_normal_set>:
{
    6d3c:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6d3e:	6804      	ldr	r4, [r0, #0]
    6d40:	2c00      	cmp	r4, #0
{
    6d42:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6d44:	da22      	bge.n	6d8c <prepare_normal_set+0x50>
		u32_t ticks_prepare_to_start =
    6d46:	6843      	ldr	r3, [r0, #4]
    6d48:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    6d4a:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    6d4c:	429d      	cmp	r5, r3
    6d4e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    6d52:	bf34      	ite	cc
    6d54:	1ae4      	subcc	r4, r4, r3
    6d56:	1b64      	subcs	r4, r4, r5
		ticker_status =
    6d58:	4b0d      	ldr	r3, [pc, #52]	; (6d90 <prepare_normal_set+0x54>)
    6d5a:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6d5c:	b2a4      	uxth	r4, r4
		ticker_status =
    6d5e:	2300      	movs	r3, #0
    6d60:	9304      	str	r3, [sp, #16]
    6d62:	9303      	str	r3, [sp, #12]
    6d64:	9302      	str	r3, [sp, #8]
    6d66:	4618      	mov	r0, r3
    6d68:	9401      	str	r4, [sp, #4]
    6d6a:	9400      	str	r4, [sp, #0]
    6d6c:	f7fd fd76 	bl	485c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6d70:	f030 0302 	bics.w	r3, r0, #2
    6d74:	d00a      	beq.n	6d8c <prepare_normal_set+0x50>
    6d76:	4a07      	ldr	r2, [pc, #28]	; (6d94 <prepare_normal_set+0x58>)
    6d78:	4907      	ldr	r1, [pc, #28]	; (6d98 <prepare_normal_set+0x5c>)
    6d7a:	2003      	movs	r0, #3
    6d7c:	f7fb fa88 	bl	2290 <bt_log>
    6d80:	4040      	eors	r0, r0
    6d82:	f380 8811 	msr	BASEPRI, r0
    6d86:	f04f 0004 	mov.w	r0, #4
    6d8a:	df02      	svc	2
}
    6d8c:	b009      	add	sp, #36	; 0x24
    6d8e:	bd30      	pop	{r4, r5, pc}
    6d90:	00005a11 	.word	0x00005a11
    6d94:	0000e316 	.word	0x0000e316
    6d98:	0000e56e 	.word	0x0000e56e

00006d9c <preempt_calc>:
{
    6d9c:	b570      	push	{r4, r5, r6, lr}
    6d9e:	4614      	mov	r4, r2
    6da0:	460e      	mov	r6, r1
    6da2:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    6da4:	f7fd fe78 	bl	4a98 <ticker_ticks_now_get>
	u32_t diff =
    6da8:	4621      	mov	r1, r4
    6daa:	f7fd fe77 	bl	4a9c <ticker_ticks_diff_get>
	diff += 3;
    6dae:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6db0:	2c09      	cmp	r4, #9
    6db2:	f04f 0000 	mov.w	r0, #0
    6db6:	d90d      	bls.n	6dd4 <preempt_calc+0x38>
    6db8:	f7ff fbb8 	bl	652c <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6dbc:	4632      	mov	r2, r6
    6dbe:	2100      	movs	r1, #0
    6dc0:	4628      	mov	r0, r5
    6dc2:	f7ff ffbb 	bl	6d3c <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    6dc6:	68ab      	ldr	r3, [r5, #8]
    6dc8:	441c      	add	r4, r3
		if (diff <
    6dca:	2c26      	cmp	r4, #38	; 0x26
    6dcc:	d800      	bhi.n	6dd0 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    6dce:	60ac      	str	r4, [r5, #8]
		return 1;
    6dd0:	2001      	movs	r0, #1
}
    6dd2:	bd70      	pop	{r4, r5, r6, pc}
    6dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

00006dd8 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6dd8:	4b4b      	ldr	r3, [pc, #300]	; (6f08 <event_ext_adv+0x130>)
    6dda:	7cda      	ldrb	r2, [r3, #19]
{
    6ddc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6dde:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    6de2:	4605      	mov	r5, r0
    6de4:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6de6:	b152      	cbz	r2, 6dfe <event_ext_adv+0x26>
    6de8:	4a48      	ldr	r2, [pc, #288]	; (6f0c <event_ext_adv+0x134>)
    6dea:	4949      	ldr	r1, [pc, #292]	; (6f10 <event_ext_adv+0x138>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_EXT_ADV);
    6dec:	2003      	movs	r0, #3
    6dee:	f7fb fa4f 	bl	2290 <bt_log>
    6df2:	4040      	eors	r0, r0
    6df4:	f380 8811 	msr	BASEPRI, r0
    6df8:	f04f 0004 	mov.w	r0, #4
    6dfc:	df02      	svc	2
    6dfe:	7c1b      	ldrb	r3, [r3, #16]
    6e00:	b2db      	uxtb	r3, r3
    6e02:	2b08      	cmp	r3, #8
    6e04:	d002      	beq.n	6e0c <event_ext_adv+0x34>
    6e06:	4a41      	ldr	r2, [pc, #260]	; (6f0c <event_ext_adv+0x134>)
    6e08:	4942      	ldr	r1, [pc, #264]	; (6f14 <event_ext_adv+0x13c>)
    6e0a:	e7ef      	b.n	6dec <event_ext_adv+0x14>
	_radio.role = ROLE_ADV;
    6e0c:	2201      	movs	r2, #1
    6e0e:	74e2      	strb	r2, [r4, #19]
	_radio.ticker_id_prepare = 0;
    6e10:	7421      	strb	r1, [r4, #16]
	if (_radio.advertiser.adv_data.first !=
    6e12:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
	_radio.ticker_id_event = RADIO_TICKER_ID_EXT_ADV;
    6e16:	7463      	strb	r3, [r4, #17]
	if (_radio.advertiser.adv_data.first !=
    6e18:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
	_radio.ticks_anchor = ticks_at_expire;
    6e1c:	60a0      	str	r0, [r4, #8]
	if (_radio.advertiser.adv_data.first !=
    6e1e:	429a      	cmp	r2, r3
    6e20:	d006      	beq.n	6e30 <event_ext_adv+0x58>
		first = _radio.advertiser.adv_data.first + 1;
    6e22:	3301      	adds	r3, #1
    6e24:	b2db      	uxtb	r3, r3
			first = 0;
    6e26:	2b02      	cmp	r3, #2
    6e28:	bf08      	it	eq
    6e2a:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    6e2c:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    6e30:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
    6e34:	f894 2636 	ldrb.w	r2, [r4, #1590]	; 0x636
    6e38:	429a      	cmp	r2, r3
    6e3a:	d006      	beq.n	6e4a <event_ext_adv+0x72>
		first = _radio.advertiser.scan_data.first + 1;
    6e3c:	3301      	adds	r3, #1
    6e3e:	b2db      	uxtb	r3, r3
			first = 0;
    6e40:	2b02      	cmp	r3, #2
    6e42:	bf08      	it	eq
    6e44:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    6e46:	f884 3635 	strb.w	r3, [r4, #1589]	; 0x635
	pdu = (void *)_radio.advertiser.adv_data.data
    6e4a:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6e4e:	f894 0432 	ldrb.w	r0, [r4, #1074]	; 0x432
	pdu = (void *)_radio.advertiser.adv_data.data
    6e52:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6e56:	eb00 2000 	add.w	r0, r0, r0, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    6e5a:	f103 062b 	add.w	r6, r3, #43	; 0x2b
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6e5e:	f200 202f 	addw	r0, r0, #559	; 0x22f
			radio_pkt_tx_set(aux_pdu);
    6e62:	4420      	add	r0, r4
    6e64:	f004 f852 	bl	af0c <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    6e68:	5da3      	ldrb	r3, [r4, r6]
    6e6a:	f003 030f 	and.w	r3, r3, #15
    6e6e:	2b02      	cmp	r3, #2
    6e70:	d033      	beq.n	6eda <event_ext_adv+0x102>
    6e72:	2b07      	cmp	r3, #7
    6e74:	d031      	beq.n	6eda <event_ext_adv+0x102>
				_radio.state = STATE_TX;
    6e76:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    6e78:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    6e7a:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    6e7c:	f004 f950 	bl	b120 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    6e80:	2000      	movs	r0, #0
    6e82:	f004 f8bd 	bl	b000 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;
    6e86:	2300      	movs	r3, #0
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
    6e88:	f894 06a0 	ldrb.w	r0, [r4, #1696]	; 0x6a0
			_radio.ext_advertiser.current_slot = 0;
    6e8c:	f884 3689 	strb.w	r3, [r4, #1673]	; 0x689
			_radio.ext_advertiser.event = 0;
    6e90:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
    6e94:	f7fe ffb6 	bl	5e04 <chan_set>
	if (_radio.advertiser.filter_policy) {
    6e98:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6e9c:	079b      	lsls	r3, r3, #30
    6e9e:	d007      	beq.n	6eb0 <event_ext_adv+0xd8>
		struct ll_filter *wl = ctrl_filter_get(true);
    6ea0:	2001      	movs	r0, #1
    6ea2:	f003 fd99 	bl	a9d8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6ea6:	1c82      	adds	r2, r0, #2
    6ea8:	7841      	ldrb	r1, [r0, #1]
    6eaa:	7800      	ldrb	r0, [r0, #0]
    6eac:	f004 f8ee 	bl	b08c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6eb0:	68e2      	ldr	r2, [r4, #12]
    6eb2:	f105 0109 	add.w	r1, r5, #9
    6eb6:	2001      	movs	r0, #1
    6eb8:	f004 f93e 	bl	b138 <radio_tmr_start>
	radio_tmr_end_capture();
    6ebc:	f004 fa0c 	bl	b2d8 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6ec0:	462a      	mov	r2, r5
    6ec2:	2105      	movs	r1, #5
    6ec4:	4814      	ldr	r0, [pc, #80]	; (6f18 <event_ext_adv+0x140>)
    6ec6:	f7ff ff69 	bl	6d9c <preempt_calc>
    6eca:	4603      	mov	r3, r0
    6ecc:	b180      	cbz	r0, 6ef0 <event_ext_adv+0x118>
		_radio.state = STATE_STOP;
    6ece:	2304      	movs	r3, #4
    6ed0:	7523      	strb	r3, [r4, #20]
}
    6ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6ed6:	f004 b839 	b.w	af4c <radio_disable>
				_radio.state = STATE_CLOSE;
    6eda:	2303      	movs	r3, #3
    6edc:	7523      	strb	r3, [r4, #20]
				_radio.advertiser.ext_adv = 1;
    6ede:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6ee2:	f043 0301 	orr.w	r3, r3, #1
    6ee6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
				radio_switch_complete_and_disable();
    6eea:	f004 f89f 	bl	b02c <radio_switch_complete_and_disable>
    6eee:	e7ca      	b.n	6e86 <event_ext_adv+0xae>
		ticker_status =
    6ef0:	4a0a      	ldr	r2, [pc, #40]	; (6f1c <event_ext_adv+0x144>)
    6ef2:	4601      	mov	r1, r0
    6ef4:	f7fd fd7e 	bl	49f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6ef8:	f030 0302 	bics.w	r3, r0, #2
    6efc:	d002      	beq.n	6f04 <event_ext_adv+0x12c>
    6efe:	4a03      	ldr	r2, [pc, #12]	; (6f0c <event_ext_adv+0x134>)
    6f00:	4907      	ldr	r1, [pc, #28]	; (6f20 <event_ext_adv+0x148>)
    6f02:	e773      	b.n	6dec <event_ext_adv+0x14>
    6f04:	bd70      	pop	{r4, r5, r6, pc}
    6f06:	bf00      	nop
    6f08:	200009f8 	.word	0x200009f8
    6f0c:	0000e3f8 	.word	0x0000e3f8
    6f10:	0000e5e3 	.word	0x0000e5e3
    6f14:	0000e611 	.word	0x0000e611
    6f18:	20000a10 	.word	0x20000a10
    6f1c:	000064b9 	.word	0x000064b9
    6f20:	0000e56e 	.word	0x0000e56e

00006f24 <adv_scan_configure.constprop.48>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    6f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    6f26:	ad02      	add	r5, sp, #8
    6f28:	4b10      	ldr	r3, [pc, #64]	; (6f6c <adv_scan_configure.constprop.48+0x48>)
    6f2a:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    6f2e:	4604      	mov	r4, r0
	radio_reset();
    6f30:	f003 ff58 	bl	ade4 <radio_reset>
	radio_tx_power_set(0);
    6f34:	2000      	movs	r0, #0
    6f36:	f003 ff7f 	bl	ae38 <radio_tx_power_set>
	radio_isr_set(isr);
    6f3a:	480d      	ldr	r0, [pc, #52]	; (6f70 <adv_scan_configure.constprop.48+0x4c>)
    6f3c:	f003 ff1c 	bl	ad78 <radio_isr_set>
	radio_phy_set(phy, flags);
    6f40:	2101      	movs	r1, #1
    6f42:	4620      	mov	r0, r4
    6f44:	f003 ff68 	bl	ae18 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    6f48:	4628      	mov	r0, r5
    6f4a:	f003 ff93 	bl	ae74 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    6f4e:	0062      	lsls	r2, r4, #1
    6f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    6f54:	21ff      	movs	r1, #255	; 0xff
    6f56:	2008      	movs	r0, #8
    6f58:	f003 ffa4 	bl	aea4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6f5c:	4905      	ldr	r1, [pc, #20]	; (6f74 <adv_scan_configure.constprop.48+0x50>)
    6f5e:	f240 605b 	movw	r0, #1627	; 0x65b
    6f62:	f004 f82f 	bl	afc4 <radio_crc_configure>
}
    6f66:	b003      	add	sp, #12
    6f68:	bd30      	pop	{r4, r5, pc}
    6f6a:	bf00      	nop
    6f6c:	8e89bed6 	.word	0x8e89bed6
    6f70:	000081b9 	.word	0x000081b9
    6f74:	00555555 	.word	0x00555555

00006f78 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6f78:	4b2e      	ldr	r3, [pc, #184]	; (7034 <event_adv+0xbc>)
    6f7a:	7cda      	ldrb	r2, [r3, #19]
{
    6f7c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6f7e:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    6f82:	4605      	mov	r5, r0
    6f84:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6f86:	b152      	cbz	r2, 6f9e <event_adv+0x26>
    6f88:	4a2b      	ldr	r2, [pc, #172]	; (7038 <event_adv+0xc0>)
    6f8a:	492c      	ldr	r1, [pc, #176]	; (703c <event_adv+0xc4>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    6f8c:	2003      	movs	r0, #3
    6f8e:	f7fb f97f 	bl	2290 <bt_log>
    6f92:	4040      	eors	r0, r0
    6f94:	f380 8811 	msr	BASEPRI, r0
    6f98:	f04f 0004 	mov.w	r0, #4
    6f9c:	df02      	svc	2
    6f9e:	7c1b      	ldrb	r3, [r3, #16]
    6fa0:	b2db      	uxtb	r3, r3
    6fa2:	2b05      	cmp	r3, #5
    6fa4:	d002      	beq.n	6fac <event_adv+0x34>
    6fa6:	4a24      	ldr	r2, [pc, #144]	; (7038 <event_adv+0xc0>)
    6fa8:	4925      	ldr	r1, [pc, #148]	; (7040 <event_adv+0xc8>)
    6faa:	e7ef      	b.n	6f8c <event_adv+0x14>
	_radio.ticks_anchor = ticks_at_expire;
    6fac:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6fae:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    6fb2:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6fb4:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
    6fb8:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    6fba:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    6fbc:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6fbe:	f7ff ffb1 	bl	6f24 <adv_scan_configure.constprop.48>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    6fc2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6fc6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    6fca:	f3c3 1302 	ubfx	r3, r3, #4, #3
    6fce:	f363 0202 	bfi	r2, r3, #0, #3
    6fd2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    6fd6:	f7ff f81b 	bl	6010 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    6fda:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6fde:	079b      	lsls	r3, r3, #30
    6fe0:	d007      	beq.n	6ff2 <event_adv+0x7a>
		struct ll_filter *wl = ctrl_filter_get(true);
    6fe2:	4630      	mov	r0, r6
    6fe4:	f003 fcf8 	bl	a9d8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6fe8:	1c82      	adds	r2, r0, #2
    6fea:	7841      	ldrb	r1, [r0, #1]
    6fec:	7800      	ldrb	r0, [r0, #0]
    6fee:	f004 f84d 	bl	b08c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6ff2:	68e2      	ldr	r2, [r4, #12]
    6ff4:	f105 0109 	add.w	r1, r5, #9
    6ff8:	2001      	movs	r0, #1
    6ffa:	f004 f89d 	bl	b138 <radio_tmr_start>
	radio_tmr_end_capture();
    6ffe:	f004 f96b 	bl	b2d8 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    7002:	462a      	mov	r2, r5
    7004:	2105      	movs	r1, #5
    7006:	480f      	ldr	r0, [pc, #60]	; (7044 <event_adv+0xcc>)
    7008:	f7ff fec8 	bl	6d9c <preempt_calc>
    700c:	4603      	mov	r3, r0
    700e:	b128      	cbz	r0, 701c <event_adv+0xa4>
		_radio.state = STATE_STOP;
    7010:	2304      	movs	r3, #4
    7012:	7523      	strb	r3, [r4, #20]
}
    7014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    7018:	f003 bf98 	b.w	af4c <radio_disable>
		ticker_status =
    701c:	4a0a      	ldr	r2, [pc, #40]	; (7048 <event_adv+0xd0>)
    701e:	4601      	mov	r1, r0
    7020:	f7fd fce8 	bl	49f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7024:	f030 0302 	bics.w	r3, r0, #2
    7028:	d002      	beq.n	7030 <event_adv+0xb8>
    702a:	4a03      	ldr	r2, [pc, #12]	; (7038 <event_adv+0xc0>)
    702c:	4907      	ldr	r1, [pc, #28]	; (704c <event_adv+0xd4>)
    702e:	e7ad      	b.n	6f8c <event_adv+0x14>
    7030:	bd70      	pop	{r4, r5, r6, pc}
    7032:	bf00      	nop
    7034:	200009f8 	.word	0x200009f8
    7038:	0000e3ee 	.word	0x0000e3ee
    703c:	0000e5e3 	.word	0x0000e5e3
    7040:	0000e5b0 	.word	0x0000e5b0
    7044:	20000a10 	.word	0x20000a10
    7048:	000064b9 	.word	0x000064b9
    704c:	0000e56e 	.word	0x0000e56e

00007050 <event_stop.constprop.49>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    7050:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    7052:	4b05      	ldr	r3, [pc, #20]	; (7068 <event_stop.constprop.49+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7054:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    7056:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7058:	4611      	mov	r1, r2
    705a:	4610      	mov	r0, r2
    705c:	f7fc fdfa 	bl	3c54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    7060:	b108      	cbz	r0, 7066 <event_stop.constprop.49+0x16>
    7062:	f7ff fa53 	bl	650c <event_stop.part.12>
    7066:	bd08      	pop	{r3, pc}
    7068:	20004fc8 	.word	0x20004fc8

0000706c <event_common_prepare>:
{
    706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    7070:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    7072:	681d      	ldr	r5, [r3, #0]
{
    7074:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    7076:	2c00      	cmp	r4, #0
{
    7078:	4681      	mov	r9, r0
    707a:	910b      	str	r1, [sp, #44]	; 0x2c
    707c:	4690      	mov	r8, r2
    707e:	469b      	mov	fp, r3
    7080:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    7084:	da03      	bge.n	708e <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    7086:	9c16      	ldr	r4, [sp, #88]	; 0x58
    7088:	42ac      	cmp	r4, r5
    708a:	bf38      	it	cc
    708c:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    708e:	42ac      	cmp	r4, r5
    7090:	4f51      	ldr	r7, [pc, #324]	; (71d8 <event_common_prepare+0x16c>)
    7092:	d920      	bls.n	70d6 <event_common_prepare+0x6a>
		ticker_status =
    7094:	f241 63d1 	movw	r3, #5841	; 0x16d1
    7098:	9308      	str	r3, [sp, #32]
    709a:	4b50      	ldr	r3, [pc, #320]	; (71dc <event_common_prepare+0x170>)
    709c:	9305      	str	r3, [sp, #20]
    709e:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    70a0:	1b63      	subs	r3, r4, r5
		ticker_status =
    70a2:	9300      	str	r3, [sp, #0]
    70a4:	9707      	str	r7, [sp, #28]
    70a6:	464b      	mov	r3, r9
    70a8:	9106      	str	r1, [sp, #24]
    70aa:	9104      	str	r1, [sp, #16]
    70ac:	9103      	str	r1, [sp, #12]
    70ae:	9102      	str	r1, [sp, #8]
    70b0:	9101      	str	r1, [sp, #4]
    70b2:	2201      	movs	r2, #1
    70b4:	4608      	mov	r0, r1
    70b6:	f7fd fb81 	bl	47bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    70ba:	f030 0302 	bics.w	r3, r0, #2
    70be:	d030      	beq.n	7122 <event_common_prepare+0xb6>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    70c0:	4a47      	ldr	r2, [pc, #284]	; (71e0 <event_common_prepare+0x174>)
    70c2:	4948      	ldr	r1, [pc, #288]	; (71e4 <event_common_prepare+0x178>)
		LL_ASSERT(!retval);
    70c4:	2003      	movs	r0, #3
    70c6:	f7fb f8e3 	bl	2290 <bt_log>
    70ca:	4040      	eors	r0, r0
    70cc:	f380 8811 	msr	BASEPRI, r0
    70d0:	f04f 0004 	mov.w	r0, #4
    70d4:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    70d6:	d21d      	bcs.n	7114 <event_common_prepare+0xa8>
		event_active(0, 0, 0, NULL);
    70d8:	2300      	movs	r3, #0
    70da:	461a      	mov	r2, r3
    70dc:	4619      	mov	r1, r3
    70de:	4618      	mov	r0, r3
    70e0:	f7ff fa50 	bl	6584 <event_active>
		ticker_status =
    70e4:	f241 63e6 	movw	r3, #5862	; 0x16e6
    70e8:	2100      	movs	r1, #0
    70ea:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    70ec:	1b2c      	subs	r4, r5, r4
		ticker_status =
    70ee:	4b3e      	ldr	r3, [pc, #248]	; (71e8 <event_common_prepare+0x17c>)
    70f0:	9305      	str	r3, [sp, #20]
    70f2:	9707      	str	r7, [sp, #28]
    70f4:	464b      	mov	r3, r9
    70f6:	9106      	str	r1, [sp, #24]
    70f8:	9104      	str	r1, [sp, #16]
    70fa:	9103      	str	r1, [sp, #12]
    70fc:	9102      	str	r1, [sp, #8]
    70fe:	9101      	str	r1, [sp, #4]
    7100:	9400      	str	r4, [sp, #0]
    7102:	2201      	movs	r2, #1
    7104:	4608      	mov	r0, r1
    7106:	f7fd fb59 	bl	47bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    710a:	f030 0302 	bics.w	r3, r0, #2
    710e:	d1d7      	bne.n	70c0 <event_common_prepare+0x54>
    7110:	462c      	mov	r4, r5
    7112:	e00b      	b.n	712c <event_common_prepare+0xc0>
		event_active(0, 0, 0, NULL);
    7114:	2300      	movs	r3, #0
    7116:	461a      	mov	r2, r3
    7118:	4619      	mov	r1, r3
    711a:	4618      	mov	r0, r3
    711c:	f7ff fa32 	bl	6584 <event_active>
		event_xtal(0, 0, 0, NULL);
    7120:	2300      	movs	r3, #0
    7122:	461a      	mov	r2, r3
    7124:	4619      	mov	r1, r3
    7126:	4618      	mov	r0, r3
    7128:	f7ff fa46 	bl	65b8 <event_xtal>
	_radio.remainder_anchor = remainder;
    712c:	4e2f      	ldr	r6, [pc, #188]	; (71ec <event_common_prepare+0x180>)
    712e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7130:	60f3      	str	r3, [r6, #12]
	ticker_status =
    7132:	f241 63fe 	movw	r3, #5886	; 0x16fe
    7136:	9308      	str	r3, [sp, #32]
    7138:	9b19      	ldr	r3, [sp, #100]	; 0x64
    713a:	9306      	str	r3, [sp, #24]
    713c:	2200      	movs	r2, #0
    713e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7140:	9305      	str	r3, [sp, #20]
    7142:	9707      	str	r7, [sp, #28]
    7144:	464b      	mov	r3, r9
    7146:	9204      	str	r2, [sp, #16]
    7148:	9203      	str	r2, [sp, #12]
    714a:	9202      	str	r2, [sp, #8]
    714c:	9201      	str	r2, [sp, #4]
    714e:	9400      	str	r4, [sp, #0]
    7150:	4611      	mov	r1, r2
    7152:	4610      	mov	r0, r2
    7154:	f7fd fb32 	bl	47bc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7158:	f030 0302 	bics.w	r3, r0, #2
    715c:	d1b0      	bne.n	70c0 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    715e:	2005      	movs	r0, #5
    7160:	f7ff ff76 	bl	7050 <event_stop.constprop.49>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    7164:	f8d6 377c 	ldr.w	r3, [r6, #1916]	; 0x77c
    7168:	429d      	cmp	r5, r3
    716a:	d023      	beq.n	71b4 <event_common_prepare+0x148>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    716c:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    7170:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    7174:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    7176:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    7178:	bfbc      	itt	lt
    717a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    717e:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    7182:	f8d6 277c 	ldr.w	r2, [r6, #1916]	; 0x77c
    7186:	f8d8 1000 	ldr.w	r1, [r8]
    718a:	428a      	cmp	r2, r1
    718c:	bf38      	it	cc
    718e:	460a      	movcc	r2, r1
		ticker_status =
    7190:	f241 712e 	movw	r1, #5934	; 0x172e
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    7194:	b2a3      	uxth	r3, r4
    7196:	b292      	uxth	r2, r2
		ticker_status =
    7198:	9106      	str	r1, [sp, #24]
    719a:	2100      	movs	r1, #0
    719c:	9302      	str	r3, [sp, #8]
    719e:	9201      	str	r2, [sp, #4]
    71a0:	9200      	str	r2, [sp, #0]
    71a2:	9104      	str	r1, [sp, #16]
    71a4:	9103      	str	r1, [sp, #12]
    71a6:	4652      	mov	r2, sl
    71a8:	4608      	mov	r0, r1
    71aa:	f7fd fb57 	bl	485c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    71ae:	f030 0302 	bics.w	r3, r0, #2
    71b2:	d185      	bne.n	70c0 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    71b4:	20ff      	movs	r0, #255	; 0xff
    71b6:	f7ff fabb 	bl	6730 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    71ba:	4b0d      	ldr	r3, [pc, #52]	; (71f0 <event_common_prepare+0x184>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    71bc:	2201      	movs	r2, #1
    71be:	4611      	mov	r1, r2
    71c0:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    71c2:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    71c6:	f7fc fd45 	bl	3c54 <mayfly_enqueue>
		LL_ASSERT(!retval);
    71ca:	b110      	cbz	r0, 71d2 <event_common_prepare+0x166>
    71cc:	4a04      	ldr	r2, [pc, #16]	; (71e0 <event_common_prepare+0x174>)
    71ce:	4909      	ldr	r1, [pc, #36]	; (71f4 <event_common_prepare+0x188>)
    71d0:	e778      	b.n	70c4 <event_common_prepare+0x58>
}
    71d2:	b00d      	add	sp, #52	; 0x34
    71d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71d8:	000063d1 	.word	0x000063d1
    71dc:	00006585 	.word	0x00006585
    71e0:	0000e39c 	.word	0x0000e39c
    71e4:	0000e56e 	.word	0x0000e56e
    71e8:	000065b9 	.word	0x000065b9
    71ec:	200009f8 	.word	0x200009f8
    71f0:	20005068 	.word	0x20005068
    71f4:	0000e688 	.word	0x0000e688

000071f8 <radio_event_adv_prepare>:
{
    71f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    71fa:	4a0f      	ldr	r2, [pc, #60]	; (7238 <radio_event_adv_prepare+0x40>)
    71fc:	7c13      	ldrb	r3, [r2, #16]
    71fe:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7202:	b153      	cbz	r3, 721a <radio_event_adv_prepare+0x22>
    7204:	4a0d      	ldr	r2, [pc, #52]	; (723c <radio_event_adv_prepare+0x44>)
    7206:	490e      	ldr	r1, [pc, #56]	; (7240 <radio_event_adv_prepare+0x48>)
    7208:	2003      	movs	r0, #3
    720a:	f7fb f841 	bl	2290 <bt_log>
    720e:	4040      	eors	r0, r0
    7210:	f380 8811 	msr	BASEPRI, r0
    7214:	f04f 0004 	mov.w	r0, #4
    7218:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    721a:	2305      	movs	r3, #5
    721c:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    721e:	9403      	str	r4, [sp, #12]
    7220:	4c08      	ldr	r4, [pc, #32]	; (7244 <radio_event_adv_prepare+0x4c>)
    7222:	9402      	str	r4, [sp, #8]
    7224:	9301      	str	r3, [sp, #4]
    7226:	6a13      	ldr	r3, [r2, #32]
    7228:	9300      	str	r3, [sp, #0]
    722a:	f102 031c 	add.w	r3, r2, #28
    722e:	3218      	adds	r2, #24
    7230:	f7ff ff1c 	bl	706c <event_common_prepare>
}
    7234:	b004      	add	sp, #16
    7236:	bd10      	pop	{r4, pc}
    7238:	200009f8 	.word	0x200009f8
    723c:	0000e3ba 	.word	0x0000e3ba
    7240:	0000e9fa 	.word	0x0000e9fa
    7244:	00006f79 	.word	0x00006f79

00007248 <radio_event_ext_adv_prepare>:
{
    7248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    724a:	4a0f      	ldr	r2, [pc, #60]	; (7288 <radio_event_ext_adv_prepare+0x40>)
    724c:	7c13      	ldrb	r3, [r2, #16]
    724e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7252:	b153      	cbz	r3, 726a <radio_event_ext_adv_prepare+0x22>
    7254:	4a0d      	ldr	r2, [pc, #52]	; (728c <radio_event_ext_adv_prepare+0x44>)
    7256:	490e      	ldr	r1, [pc, #56]	; (7290 <radio_event_ext_adv_prepare+0x48>)
    7258:	2003      	movs	r0, #3
    725a:	f7fb f819 	bl	2290 <bt_log>
    725e:	4040      	eors	r0, r0
    7260:	f380 8811 	msr	BASEPRI, r0
    7264:	f04f 0004 	mov.w	r0, #4
    7268:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_EXT_ADV;
    726a:	2308      	movs	r3, #8
    726c:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    726e:	9403      	str	r4, [sp, #12]
    7270:	4c08      	ldr	r4, [pc, #32]	; (7294 <radio_event_ext_adv_prepare+0x4c>)
    7272:	9402      	str	r4, [sp, #8]
    7274:	9301      	str	r3, [sp, #4]
    7276:	6a13      	ldr	r3, [r2, #32]
    7278:	9300      	str	r3, [sp, #0]
    727a:	f102 031c 	add.w	r3, r2, #28
    727e:	3218      	adds	r2, #24
    7280:	f7ff fef4 	bl	706c <event_common_prepare>
}
    7284:	b004      	add	sp, #16
    7286:	bd10      	pop	{r4, pc}
    7288:	200009f8 	.word	0x200009f8
    728c:	0000e3d2 	.word	0x0000e3d2
    7290:	0000e9fa 	.word	0x0000e9fa
    7294:	00006dd9 	.word	0x00006dd9

00007298 <event_adv_stop>:
{
    7298:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    729a:	2005      	movs	r0, #5
    729c:	f7ff fed8 	bl	7050 <event_stop.constprop.49>
	ticker_status =
    72a0:	f641 33e7 	movw	r3, #7143	; 0x1be7
    72a4:	2100      	movs	r1, #0
    72a6:	9300      	str	r3, [sp, #0]
    72a8:	2205      	movs	r2, #5
    72aa:	4b0a      	ldr	r3, [pc, #40]	; (72d4 <event_adv_stop+0x3c>)
    72ac:	4608      	mov	r0, r1
    72ae:	f7fd fb23 	bl	48f8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    72b2:	f030 0302 	bics.w	r3, r0, #2
    72b6:	d00a      	beq.n	72ce <event_adv_stop+0x36>
    72b8:	4a07      	ldr	r2, [pc, #28]	; (72d8 <event_adv_stop+0x40>)
    72ba:	4908      	ldr	r1, [pc, #32]	; (72dc <event_adv_stop+0x44>)
    72bc:	2003      	movs	r0, #3
    72be:	f7fa ffe7 	bl	2290 <bt_log>
    72c2:	4040      	eors	r0, r0
    72c4:	f380 8811 	msr	BASEPRI, r0
    72c8:	f04f 0004 	mov.w	r0, #4
    72cc:	df02      	svc	2
}
    72ce:	b003      	add	sp, #12
    72d0:	f85d fb04 	ldr.w	pc, [sp], #4
    72d4:	000069ed 	.word	0x000069ed
    72d8:	0000e447 	.word	0x0000e447
    72dc:	0000e56e 	.word	0x0000e56e

000072e0 <mayfly_xtal_stop_calc>:
{
    72e0:	b570      	push	{r4, r5, r6, lr}
    72e2:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    72e4:	2302      	movs	r3, #2
    72e6:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    72e8:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    72ea:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    72ec:	4e78      	ldr	r6, [pc, #480]	; (74d0 <mayfly_xtal_stop_calc+0x1f0>)
				    _radio.connection_count));
    72ee:	4d79      	ldr	r5, [pc, #484]	; (74d4 <mayfly_xtal_stop_calc+0x1f4>)
	struct connection *conn_curr = NULL;
    72f0:	930a      	str	r3, [sp, #40]	; 0x28
{
    72f2:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    72f4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    72f6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    72fa:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    72fc:	ab09      	add	r3, sp, #36	; 0x24
    72fe:	9302      	str	r3, [sp, #8]
    7300:	ab0c      	add	r3, sp, #48	; 0x30
    7302:	9300      	str	r3, [sp, #0]
    7304:	9601      	str	r6, [sp, #4]
    7306:	ab0d      	add	r3, sp, #52	; 0x34
    7308:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    730c:	2101      	movs	r1, #1
    730e:	2000      	movs	r0, #0
    7310:	f7fd fb2e 	bl	4970 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    7314:	2802      	cmp	r0, #2
    7316:	d010      	beq.n	733a <mayfly_xtal_stop_calc+0x5a>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    7318:	9b09      	ldr	r3, [sp, #36]	; 0x24
    731a:	b193      	cbz	r3, 7342 <mayfly_xtal_stop_calc+0x62>
    731c:	4a6e      	ldr	r2, [pc, #440]	; (74d8 <mayfly_xtal_stop_calc+0x1f8>)
    731e:	496f      	ldr	r1, [pc, #444]	; (74dc <mayfly_xtal_stop_calc+0x1fc>)
	LL_ASSERT(hdr_curr);
    7320:	2003      	movs	r0, #3
    7322:	f7fa ffb5 	bl	2290 <bt_log>
    7326:	4040      	eors	r0, r0
    7328:	f380 8811 	msr	BASEPRI, r0
    732c:	f04f 0004 	mov.w	r0, #4
    7330:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    7332:	2101      	movs	r1, #1
    7334:	2000      	movs	r0, #0
    7336:	f7fd fb99 	bl	4a6c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    733a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    733c:	2b02      	cmp	r3, #2
    733e:	d0f8      	beq.n	7332 <mayfly_xtal_stop_calc+0x52>
    7340:	e7ea      	b.n	7318 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    7342:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    7346:	2bff      	cmp	r3, #255	; 0xff
    7348:	d004      	beq.n	7354 <mayfly_xtal_stop_calc+0x74>
    734a:	f895 2710 	ldrb.w	r2, [r5, #1808]	; 0x710
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    734e:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    7350:	4293      	cmp	r3, r2
    7352:	dad3      	bge.n	72fc <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    7354:	1f5a      	subs	r2, r3, #5
    7356:	b2d2      	uxtb	r2, r2
    7358:	2af9      	cmp	r2, #249	; 0xf9
    735a:	d805      	bhi.n	7368 <mayfly_xtal_stop_calc+0x88>
				_radio.connection_count))) {
    735c:	4a5d      	ldr	r2, [pc, #372]	; (74d4 <mayfly_xtal_stop_calc+0x1f4>)
    735e:	f892 2710 	ldrb.w	r2, [r2, #1808]	; 0x710
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    7362:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    7364:	4293      	cmp	r3, r2
    7366:	db04      	blt.n	7372 <mayfly_xtal_stop_calc+0x92>
    7368:	2001      	movs	r0, #1
    736a:	f7ff f8df 	bl	652c <mayfly_xtal_retain.part.15>
}
    736e:	b00e      	add	sp, #56	; 0x38
    7370:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    7372:	a90a      	add	r1, sp, #40	; 0x28
    7374:	b2e0      	uxtb	r0, r4
    7376:	f7ff f8ab 	bl	64d0 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    737a:	b910      	cbnz	r0, 7382 <mayfly_xtal_stop_calc+0xa2>
    737c:	4a56      	ldr	r2, [pc, #344]	; (74d8 <mayfly_xtal_stop_calc+0x1f8>)
    737e:	4958      	ldr	r1, [pc, #352]	; (74e0 <mayfly_xtal_stop_calc+0x200>)
    7380:	e7ce      	b.n	7320 <mayfly_xtal_stop_calc+0x40>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    7382:	6803      	ldr	r3, [r0, #0]
    7384:	6844      	ldr	r4, [r0, #4]
    7386:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    7388:	bfb8      	it	lt
    738a:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    738c:	429c      	cmp	r4, r3
    738e:	bf38      	it	cc
    7390:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    7392:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7394:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    7398:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    739a:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    739c:	f7ff f898 	bl	64d0 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    73a0:	4605      	mov	r5, r0
    73a2:	b910      	cbnz	r0, 73aa <mayfly_xtal_stop_calc+0xca>
    73a4:	4a4c      	ldr	r2, [pc, #304]	; (74d8 <mayfly_xtal_stop_calc+0x1f8>)
    73a6:	494f      	ldr	r1, [pc, #316]	; (74e4 <mayfly_xtal_stop_calc+0x204>)
    73a8:	e7ba      	b.n	7320 <mayfly_xtal_stop_calc+0x40>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    73aa:	6886      	ldr	r6, [r0, #8]
    73ac:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    73ae:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    73b0:	429e      	cmp	r6, r3
    73b2:	bf38      	it	cc
    73b4:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    73b6:	2a00      	cmp	r2, #0
    73b8:	da05      	bge.n	73c6 <mayfly_xtal_stop_calc+0xe6>
		ticks_to_expire -=
    73ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    73bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    73c0:	4433      	add	r3, r6
    73c2:	1a9b      	subs	r3, r3, r2
    73c4:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    73c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    73c8:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    73cc:	4293      	cmp	r3, r2
    73ce:	d209      	bcs.n	73e4 <mayfly_xtal_stop_calc+0x104>
    73d0:	2001      	movs	r0, #1
    73d2:	f7ff f8ab 	bl	652c <mayfly_xtal_retain.part.15>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    73d6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    73da:	2101      	movs	r1, #1
    73dc:	4628      	mov	r0, r5
    73de:	f7ff fcad 	bl	6d3c <prepare_normal_set>
    73e2:	e7c4      	b.n	736e <mayfly_xtal_stop_calc+0x8e>
		if (!s_xtal_retained) {
    73e4:	4b40      	ldr	r3, [pc, #256]	; (74e8 <mayfly_xtal_stop_calc+0x208>)
    73e6:	781a      	ldrb	r2, [r3, #0]
    73e8:	b94a      	cbnz	r2, 73fe <mayfly_xtal_stop_calc+0x11e>
			s_xtal_retained = 1;
    73ea:	2001      	movs	r0, #1
    73ec:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    73ee:	4611      	mov	r1, r2
    73f0:	4b3e      	ldr	r3, [pc, #248]	; (74ec <mayfly_xtal_stop_calc+0x20c>)
    73f2:	f7fc fc2f 	bl	3c54 <mayfly_enqueue>
			LL_ASSERT(!retval);
    73f6:	b110      	cbz	r0, 73fe <mayfly_xtal_stop_calc+0x11e>
    73f8:	4a3d      	ldr	r2, [pc, #244]	; (74f0 <mayfly_xtal_stop_calc+0x210>)
    73fa:	493e      	ldr	r1, [pc, #248]	; (74f4 <mayfly_xtal_stop_calc+0x214>)
    73fc:	e790      	b.n	7320 <mayfly_xtal_stop_calc+0x40>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    73fe:	682b      	ldr	r3, [r5, #0]
    7400:	2b00      	cmp	r3, #0
    7402:	db17      	blt.n	7434 <mayfly_xtal_stop_calc+0x154>
    7404:	429e      	cmp	r6, r3
    7406:	d215      	bcs.n	7434 <mayfly_xtal_stop_calc+0x154>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    7408:	1b9b      	subs	r3, r3, r6
			ticker_status =
    740a:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    740c:	b29b      	uxth	r3, r3
			ticker_status =
    740e:	493a      	ldr	r1, [pc, #232]	; (74f8 <mayfly_xtal_stop_calc+0x218>)
    7410:	9105      	str	r1, [sp, #20]
    7412:	9302      	str	r3, [sp, #8]
    7414:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    7418:	9506      	str	r5, [sp, #24]
    741a:	9004      	str	r0, [sp, #16]
    741c:	9003      	str	r0, [sp, #12]
    741e:	9001      	str	r0, [sp, #4]
    7420:	9000      	str	r0, [sp, #0]
    7422:	2101      	movs	r1, #1
    7424:	f7fd fa1a 	bl	485c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7428:	f030 0302 	bics.w	r3, r0, #2
    742c:	d002      	beq.n	7434 <mayfly_xtal_stop_calc+0x154>
    742e:	4a2a      	ldr	r2, [pc, #168]	; (74d8 <mayfly_xtal_stop_calc+0x1f8>)
    7430:	4932      	ldr	r1, [pc, #200]	; (74fc <mayfly_xtal_stop_calc+0x21c>)
    7432:	e775      	b.n	7320 <mayfly_xtal_stop_calc+0x40>
		if (!conn_curr || !conn_next) {
    7434:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    7436:	2e00      	cmp	r6, #0
    7438:	d099      	beq.n	736e <mayfly_xtal_stop_calc+0x8e>
    743a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    743c:	2d00      	cmp	r5, #0
    743e:	d096      	beq.n	736e <mayfly_xtal_stop_calc+0x8e>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    7440:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    7442:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    7444:	429a      	cmp	r2, r3
    7446:	d192      	bne.n	736e <mayfly_xtal_stop_calc+0x8e>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    7448:	482d      	ldr	r0, [pc, #180]	; (7500 <mayfly_xtal_stop_calc+0x220>)
    744a:	b292      	uxth	r2, r2
    744c:	fba2 0100 	umull	r0, r1, r2, r0
    7450:	f240 1323 	movw	r3, #291	; 0x123
    7454:	fb03 1102 	mla	r1, r3, r2, r1
    7458:	a31b      	add	r3, pc, #108	; (adr r3, 74c8 <mayfly_xtal_stop_calc+0x1e8>)
    745a:	e9d3 2300 	ldrd	r2, r3, [r3]
    745e:	f7f8 ff03 	bl	268 <__aeabi_uldivmod>
    7462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7464:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    7468:	2200      	movs	r2, #0
    746a:	4298      	cmp	r0, r3
    746c:	d318      	bcc.n	74a0 <mayfly_xtal_stop_calc+0x1c0>
    746e:	b102      	cbz	r2, 7472 <mayfly_xtal_stop_calc+0x192>
    7470:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    7472:	f996 201d 	ldrsb.w	r2, [r6, #29]
    7476:	2a00      	cmp	r2, #0
    7478:	f995 201d 	ldrsb.w	r2, [r5, #29]
    747c:	da13      	bge.n	74a6 <mayfly_xtal_stop_calc+0x1c6>
    747e:	2a00      	cmp	r2, #0
    7480:	f6ff af75 	blt.w	736e <mayfly_xtal_stop_calc+0x8e>
			     (ticks_slot_abs +
    7484:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    7486:	429c      	cmp	r4, r3
    7488:	f67f af71 	bls.w	736e <mayfly_xtal_stop_calc+0x8e>
				status = conn_update_req(conn_curr);
    748c:	4630      	mov	r0, r6
    748e:	f7fe fafd 	bl	5a8c <conn_update_req>
				if (status == 2) {
    7492:	2802      	cmp	r0, #2
    7494:	f47f af6b 	bne.w	736e <mayfly_xtal_stop_calc+0x8e>
					conn_update_req(conn_next);
    7498:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    749a:	f7fe faf7 	bl	5a8c <conn_update_req>
    749e:	e766      	b.n	736e <mayfly_xtal_stop_calc+0x8e>
				ticks_to_expire -= ticks_conn_interval;
    74a0:	1a1b      	subs	r3, r3, r0
    74a2:	2201      	movs	r2, #1
    74a4:	e7e1      	b.n	746a <mayfly_xtal_stop_calc+0x18a>
			} else if (!conn_curr->role && conn_next->role &&
    74a6:	2a00      	cmp	r2, #0
    74a8:	f6bf af61 	bge.w	736e <mayfly_xtal_stop_calc+0x8e>
				    (ticks_slot_abs +
    74ac:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    74ae:	429c      	cmp	r4, r3
    74b0:	f67f af5d 	bls.w	736e <mayfly_xtal_stop_calc+0x8e>
				status = conn_update_req(conn_next);
    74b4:	4628      	mov	r0, r5
    74b6:	f7fe fae9 	bl	5a8c <conn_update_req>
				if (status == 2) {
    74ba:	2802      	cmp	r0, #2
    74bc:	f47f af57 	bne.w	736e <mayfly_xtal_stop_calc+0x8e>
					conn_update_req(conn_curr);
    74c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    74c2:	e7ea      	b.n	749a <mayfly_xtal_stop_calc+0x1ba>
    74c4:	f3af 8000 	nop.w
    74c8:	1afd498d 	.word	0x1afd498d
    74cc:	00000007 	.word	0x00000007
    74d0:	00005a01 	.word	0x00005a01
    74d4:	200009f8 	.word	0x200009f8
    74d8:	0000e329 	.word	0x0000e329
    74dc:	0000ebcb 	.word	0x0000ebcb
    74e0:	0000e924 	.word	0x0000e924
    74e4:	0000e942 	.word	0x0000e942
    74e8:	20001208 	.word	0x20001208
    74ec:	20005018 	.word	0x20005018
    74f0:	0000e303 	.word	0x0000e303
    74f4:	0000e688 	.word	0x0000e688
    74f8:	00005a05 	.word	0x00005a05
    74fc:	0000e56e 	.word	0x0000e56e
    7500:	09ce5400 	.word	0x09ce5400

00007504 <packet_rx_allocate.constprop.51>:
static void packet_rx_allocate(u8_t max)
    7504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    7508:	4d21      	ldr	r5, [pc, #132]	; (7590 <packet_rx_allocate.constprop.51+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    750a:	f895 473a 	ldrb.w	r4, [r5, #1850]	; 0x73a
	if (acquire == _radio.packet_rx_count) {
    750e:	f895 3738 	ldrb.w	r3, [r5, #1848]	; 0x738
	if (max > _radio.link_rx_data_quota) {
    7512:	f895 974c 	ldrb.w	r9, [r5, #1868]	; 0x74c
	acquire = _radio.packet_rx_acquire + 1;
    7516:	3401      	adds	r4, #1
    7518:	b2e4      	uxtb	r4, r4
		acquire = 0;
    751a:	42a3      	cmp	r3, r4
    751c:	bf08      	it	eq
    751e:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    7520:	f505 67e8 	add.w	r7, r5, #1856	; 0x740
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    7524:	f505 68e5 	add.w	r8, r5, #1832	; 0x728
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    7528:	f1b9 0f00 	cmp.w	r9, #0
    752c:	d003      	beq.n	7536 <packet_rx_allocate.constprop.51+0x32>
    752e:	f895 3739 	ldrb.w	r3, [r5, #1849]	; 0x739
    7532:	429c      	cmp	r4, r3
    7534:	d101      	bne.n	753a <packet_rx_allocate.constprop.51+0x36>
    7536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    753a:	4638      	mov	r0, r7
    753c:	f7fc fad1 	bl	3ae2 <mem_acquire>
		if (!link) {
    7540:	4606      	mov	r6, r0
    7542:	2800      	cmp	r0, #0
    7544:	d0f7      	beq.n	7536 <packet_rx_allocate.constprop.51+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    7546:	4640      	mov	r0, r8
    7548:	f7fc facb 	bl	3ae2 <mem_acquire>
		if (!node_rx) {
    754c:	b928      	cbnz	r0, 755a <packet_rx_allocate.constprop.51+0x56>
			mem_release(link, &_radio.link_rx_free);
    754e:	4630      	mov	r0, r6
    7550:	4910      	ldr	r1, [pc, #64]	; (7594 <packet_rx_allocate.constprop.51+0x90>)
}
    7552:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    7556:	f7fc bade 	b.w	3b16 <mem_release>
		node_rx->hdr.onion.link = link;
    755a:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    755c:	f895 273a 	ldrb.w	r2, [r5, #1850]	; 0x73a
    7560:	f8d5 3734 	ldr.w	r3, [r5, #1844]	; 0x734
    7564:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    7568:	f885 473a 	strb.w	r4, [r5, #1850]	; 0x73a
		if (acquire == _radio.packet_rx_count) {
    756c:	f895 3738 	ldrb.w	r3, [r5, #1848]	; 0x738
		acquire = _radio.packet_rx_acquire + 1;
    7570:	3401      	adds	r4, #1
    7572:	b2e4      	uxtb	r4, r4
			acquire = 0;
    7574:	42a3      	cmp	r3, r4
    7576:	bf08      	it	eq
    7578:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    757a:	f895 374c 	ldrb.w	r3, [r5, #1868]	; 0x74c
    757e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    7582:	3b01      	subs	r3, #1
    7584:	f885 374c 	strb.w	r3, [r5, #1868]	; 0x74c
    7588:	fa5f f989 	uxtb.w	r9, r9
    758c:	e7cc      	b.n	7528 <packet_rx_allocate.constprop.51+0x24>
    758e:	bf00      	nop
    7590:	200009f8 	.word	0x200009f8
    7594:	20001138 	.word	0x20001138

00007598 <common_init>:
{
    7598:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    759a:	4c31      	ldr	r4, [pc, #196]	; (7660 <common_init+0xc8>)
    759c:	f894 2710 	ldrb.w	r2, [r4, #1808]	; 0x710
    75a0:	2a00      	cmp	r2, #0
    75a2:	d03c      	beq.n	761e <common_init+0x86>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    75a4:	f204 730c 	addw	r3, r4, #1804	; 0x70c
    75a8:	f44f 7182 	mov.w	r1, #260	; 0x104
    75ac:	f8d4 0708 	ldr.w	r0, [r4, #1800]	; 0x708
    75b0:	f7fc fa70 	bl	3a94 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    75b4:	4b2b      	ldr	r3, [pc, #172]	; (7664 <common_init+0xcc>)
    75b6:	f894 2732 	ldrb.w	r2, [r4, #1842]	; 0x732
    75ba:	f8b4 1730 	ldrh.w	r1, [r4, #1840]	; 0x730
    75be:	f8d4 0724 	ldr.w	r0, [r4, #1828]	; 0x724
    75c2:	f7fc fa67 	bl	3a94 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    75c6:	f894 1738 	ldrb.w	r1, [r4, #1848]	; 0x738
    75ca:	f894 2710 	ldrb.w	r2, [r4, #1808]	; 0x710
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    75ce:	4b26      	ldr	r3, [pc, #152]	; (7668 <common_init+0xd0>)
    75d0:	f8d4 073c 	ldr.w	r0, [r4, #1852]	; 0x73c
    75d4:	440a      	add	r2, r1
    75d6:	2108      	movs	r1, #8
    75d8:	f7fc fa5c 	bl	3a94 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    75dc:	4b23      	ldr	r3, [pc, #140]	; (766c <common_init+0xd4>)
    75de:	f8d4 0750 	ldr.w	r0, [r4, #1872]	; 0x750
    75e2:	2202      	movs	r2, #2
    75e4:	2124      	movs	r1, #36	; 0x24
    75e6:	f7fc fa55 	bl	3a94 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    75ea:	f894 276c 	ldrb.w	r2, [r4, #1900]	; 0x76c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    75ee:	f8d4 0758 	ldr.w	r0, [r4, #1880]	; 0x758
    75f2:	4b1f      	ldr	r3, [pc, #124]	; (7670 <common_init+0xd8>)
    75f4:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    75f8:	3a01      	subs	r2, #1
    75fa:	b292      	uxth	r2, r2
    75fc:	f7fc fa4a 	bl	3a94 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    7600:	4819      	ldr	r0, [pc, #100]	; (7668 <common_init+0xd0>)
    7602:	f7fc fa6e 	bl	3ae2 <mem_acquire>
	LL_ASSERT(link);
    7606:	b968      	cbnz	r0, 7624 <common_init+0x8c>
    7608:	4a1a      	ldr	r2, [pc, #104]	; (7674 <common_init+0xdc>)
    760a:	491b      	ldr	r1, [pc, #108]	; (7678 <common_init+0xe0>)
    760c:	2003      	movs	r0, #3
    760e:	f7fa fe3f 	bl	2290 <bt_log>
    7612:	4040      	eors	r0, r0
    7614:	f380 8811 	msr	BASEPRI, r0
    7618:	f04f 0004 	mov.w	r0, #4
    761c:	df02      	svc	2
		_radio.conn_free = NULL;
    761e:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
    7622:	e7c7      	b.n	75b4 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    7624:	4a15      	ldr	r2, [pc, #84]	; (767c <common_init+0xe4>)
    7626:	1f11      	subs	r1, r2, #4
    7628:	f7fc faa1 	bl	3b6e <memq_init>
	_radio.advertiser.chan_map = 0x07;
    762c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    7630:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    7634:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    7638:	23ff      	movs	r3, #255	; 0xff
    763a:	f884 371a 	strb.w	r3, [r4, #1818]	; 0x71a
	_radio.data_chan_map[1] = 0xFF;
    763e:	f884 371b 	strb.w	r3, [r4, #1819]	; 0x71b
	_radio.data_chan_map[2] = 0xFF;
    7642:	f884 371c 	strb.w	r3, [r4, #1820]	; 0x71c
	_radio.data_chan_map[3] = 0xFF;
    7646:	f884 371d 	strb.w	r3, [r4, #1821]	; 0x71d
	_radio.data_chan_map[4] = 0x1F;
    764a:	231f      	movs	r3, #31
    764c:	f884 371e 	strb.w	r3, [r4, #1822]	; 0x71e
	_radio.data_chan_count = 37;
    7650:	2325      	movs	r3, #37	; 0x25
    7652:	f884 371f 	strb.w	r3, [r4, #1823]	; 0x71f
}
    7656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    765a:	f7ff bf53 	b.w	7504 <packet_rx_allocate.constprop.51>
    765e:	bf00      	nop
    7660:	200009f8 	.word	0x200009f8
    7664:	20001120 	.word	0x20001120
    7668:	20001138 	.word	0x20001138
    766c:	2000114c 	.word	0x2000114c
    7670:	20001154 	.word	0x20001154
    7674:	0000e1b3 	.word	0x0000e1b3
    7678:	0000e9a7 	.word	0x0000e9a7
    767c:	20001140 	.word	0x20001140

00007680 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    7680:	4b02      	ldr	r3, [pc, #8]	; (768c <mayfly_xtal_start+0xc>)
    7682:	6818      	ldr	r0, [r3, #0]
    7684:	6843      	ldr	r3, [r0, #4]
    7686:	2100      	movs	r1, #0
    7688:	681b      	ldr	r3, [r3, #0]
    768a:	4718      	bx	r3
    768c:	200009f8 	.word	0x200009f8

00007690 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    7690:	4b02      	ldr	r3, [pc, #8]	; (769c <mayfly_xtal_stop+0xc>)
    7692:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    7694:	6843      	ldr	r3, [r0, #4]
    7696:	2100      	movs	r1, #0
    7698:	685b      	ldr	r3, [r3, #4]
    769a:	4718      	bx	r3
    769c:	200009f8 	.word	0x200009f8

000076a0 <chan_sel_2>:
{
    76a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    76a2:	4048      	eors	r0, r1
    76a4:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    76a6:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    76aa:	2608      	movs	r6, #8
	o = 0;
    76ac:	2400      	movs	r4, #0
		o |= (i & 1);
    76ae:	f00e 0501 	and.w	r5, lr, #1
    76b2:	3e01      	subs	r6, #1
    76b4:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    76b8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    76bc:	b2ec      	uxtb	r4, r5
		i >>= 1;
    76be:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    76c2:	d1f4      	bne.n	76ae <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    76c4:	0225      	lsls	r5, r4, #8
    76c6:	b22d      	sxth	r5, r5
    76c8:	b2c0      	uxtb	r0, r0
    76ca:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    76ce:	4634      	mov	r4, r6
		o |= (i & 1);
    76d0:	f000 0601 	and.w	r6, r0, #1
    76d4:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    76d8:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    76dc:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    76e0:	b2e4      	uxtb	r4, r4
		i >>= 1;
    76e2:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    76e6:	d1f3      	bne.n	76d0 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    76e8:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    76ea:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    76ee:	3f01      	subs	r7, #1
    76f0:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    76f2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    76f6:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    76f8:	d1d5      	bne.n	76a6 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    76fa:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    76fc:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    76fe:	fbb1 f0f4 	udiv	r0, r1, r4
    7702:	fb04 1010 	mls	r0, r4, r0, r1
    7706:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7708:	08c4      	lsrs	r4, r0, #3
    770a:	f000 0507 	and.w	r5, r0, #7
    770e:	5d14      	ldrb	r4, [r2, r4]
    7710:	412c      	asrs	r4, r5
    7712:	07e4      	lsls	r4, r4, #31
    7714:	d407      	bmi.n	7726 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    7716:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    7718:	f3c1 4107 	ubfx	r1, r1, #16, #8
    771c:	4610      	mov	r0, r2
}
    771e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    7722:	f7fe b97b 	b.w	5a1c <chan_sel_remap>
}
    7726:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007728 <ctrl_tx_enqueue>:
{
    7728:	b510      	push	{r4, lr}
	    !conn->empty &&
    772a:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    772e:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    7732:	f014 0f80 	tst.w	r4, #128	; 0x80
    7736:	d118      	bne.n	776a <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    7738:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    773c:	b1ab      	cbz	r3, 776a <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    773e:	0724      	lsls	r4, r4, #28
    7740:	d413      	bmi.n	776a <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    7742:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    7746:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    7748:	bf04      	itt	eq
    774a:	681c      	ldreq	r4, [r3, #0]
    774c:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    7750:	b992      	cbnz	r2, 7778 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    7752:	681a      	ldr	r2, [r3, #0]
    7754:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    7756:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    7758:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    775c:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    7760:	680b      	ldr	r3, [r1, #0]
    7762:	b90b      	cbnz	r3, 7768 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    7764:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    7768:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    776a:	b92a      	cbnz	r2, 7778 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    776c:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    7770:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    7772:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    7776:	e7ef      	b.n	7758 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    7778:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    777c:	681a      	ldr	r2, [r3, #0]
    777e:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    7780:	6019      	str	r1, [r3, #0]
    7782:	e7eb      	b.n	775c <ctrl_tx_enqueue+0x34>

00007784 <ctrl_tx_sec_enqueue>:
{
    7784:	b410      	push	{r4}
	if (conn->pause_tx) {
    7786:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    778a:	0724      	lsls	r4, r4, #28
{
    778c:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    778e:	d50f      	bpl.n	77b0 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    7790:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    7794:	b931      	cbnz	r1, 77a4 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    7796:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    779a:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    779c:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    77a0:	bc10      	pop	{r4}
    77a2:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    77a4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    77a8:	6819      	ldr	r1, [r3, #0]
    77aa:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    77ac:	601a      	str	r2, [r3, #0]
    77ae:	e7f7      	b.n	77a0 <ctrl_tx_sec_enqueue+0x1c>
}
    77b0:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    77b2:	f7ff bfb9 	b.w	7728 <ctrl_tx_enqueue>
	...

000077b8 <feature_rsp_send>:
{
    77b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    77ba:	4f21      	ldr	r7, [pc, #132]	; (7840 <feature_rsp_send+0x88>)
{
    77bc:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    77be:	f207 7054 	addw	r0, r7, #1876	; 0x754
{
    77c2:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    77c4:	f7fc f98d 	bl	3ae2 <mem_acquire>
	if (!node_tx) {
    77c8:	4604      	mov	r4, r0
    77ca:	b3b0      	cbz	r0, 783a <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    77cc:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    77ce:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    77d0:	f8d7 2714 	ldr.w	r2, [r7, #1812]	; 0x714
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    77d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    77d8:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    77dc:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    77e0:	f043 0310 	orr.w	r3, r3, #16
    77e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    77e8:	79b1      	ldrb	r1, [r6, #6]
    77ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    77ee:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    77f2:	f3c1 0110 	ubfx	r1, r1, #0, #17
    77f6:	400b      	ands	r3, r1
    77f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    77fc:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    7800:	f043 0320 	orr.w	r3, r3, #32
    7804:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7808:	7903      	ldrb	r3, [r0, #4]
    780a:	f043 0303 	orr.w	r3, r3, #3
    780e:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7810:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    7812:	2309      	movs	r3, #9
    7814:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    7816:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7818:	2100      	movs	r1, #0
    781a:	4410      	add	r0, r2
    781c:	f7f8 ff29 	bl	672 <memset>
		conn->llcp_features & 0xFF;
    7820:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7824:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    7826:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    7828:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    782a:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    782c:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    782e:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    7830:	4621      	mov	r1, r4
    7832:	f7ff ffa7 	bl	7784 <ctrl_tx_sec_enqueue>
	return 0;
    7836:	2000      	movs	r0, #0
    7838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    783a:	2001      	movs	r0, #1
}
    783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    783e:	bf00      	nop
    7840:	200009f8 	.word	0x200009f8
    7844:	00000000 	.word	0x00000000

00007848 <event_connection_prepare>:
{
    7848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    784c:	4d6d      	ldr	r5, [pc, #436]	; (7a04 <event_connection_prepare+0x1bc>)
{
    784e:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    7850:	7c2b      	ldrb	r3, [r5, #16]
{
    7852:	b08f      	sub	sp, #60	; 0x3c
    7854:	4680      	mov	r8, r0
    7856:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    7858:	b153      	cbz	r3, 7870 <event_connection_prepare+0x28>
    785a:	4a6b      	ldr	r2, [pc, #428]	; (7a08 <event_connection_prepare+0x1c0>)
    785c:	496b      	ldr	r1, [pc, #428]	; (7a0c <event_connection_prepare+0x1c4>)
		LL_ASSERT(!retval);
    785e:	2003      	movs	r0, #3
    7860:	f7fa fd16 	bl	2290 <bt_log>
    7864:	4040      	eors	r0, r0
    7866:	f380 8811 	msr	BASEPRI, r0
    786a:	f04f 0004 	mov.w	r0, #4
    786e:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    7870:	f894 3020 	ldrb.w	r3, [r4, #32]
    7874:	3307      	adds	r3, #7
    7876:	b2db      	uxtb	r3, r3
    7878:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    787a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    787e:	2b00      	cmp	r3, #0
    7880:	da09      	bge.n	7896 <event_connection_prepare+0x4e>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    7882:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    7884:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    7886:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    788a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    788c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    788e:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    7890:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    7892:	bf88      	it	hi
    7894:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    7896:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    7898:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    789c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    789e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    78a0:	b292      	uxth	r2, r2
    78a2:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    78a4:	4432      	add	r2, r6
    78a6:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    78a8:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    78ac:	429a      	cmp	r2, r3
    78ae:	f000 8227 	beq.w	7d00 <event_connection_prepare+0x4b8>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    78b2:	2005      	movs	r0, #5
    78b4:	f7ff fbcc 	bl	7050 <event_stop.constprop.49>
		switch (conn->llcp_type) {
    78b8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    78bc:	3b01      	subs	r3, #1
    78be:	2b03      	cmp	r3, #3
    78c0:	f200 8319 	bhi.w	7ef6 <event_connection_prepare+0x6ae>
    78c4:	e8df f013 	tbh	[pc, r3, lsl #1]
    78c8:	01f40004 	.word	0x01f40004
    78cc:	02c60298 	.word	0x02c60298
	if (!conn_upd) {
    78d0:	f8d5 3780 	ldr.w	r3, [r5, #1920]	; 0x780
    78d4:	b90b      	cbnz	r3, 78da <event_connection_prepare+0x92>
		_radio.conn_upd = conn;
    78d6:	f8c5 4780 	str.w	r4, [r5, #1920]	; 0x780
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    78da:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    78de:	f013 0303 	ands.w	r3, r3, #3
    78e2:	d05b      	beq.n	799c <event_connection_prepare+0x154>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    78e4:	484a      	ldr	r0, [pc, #296]	; (7a10 <event_connection_prepare+0x1c8>)
    78e6:	f7fc f8fc 	bl	3ae2 <mem_acquire>
		if (!node_tx) {
    78ea:	4605      	mov	r5, r0
    78ec:	2800      	cmp	r0, #0
    78ee:	f000 8207 	beq.w	7d00 <event_connection_prepare+0x4b8>
		switch (conn->llcp.conn_upd.state) {
    78f2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    78f6:	f003 0203 	and.w	r2, r3, #3
    78fa:	2a01      	cmp	r2, #1
    78fc:	d14b      	bne.n	7996 <event_connection_prepare+0x14e>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    78fe:	f36f 0301 	bfc	r3, #0, #2
    7902:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    7906:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7908:	3306      	adds	r3, #6
    790a:	4433      	add	r3, r6
    790c:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    790e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7912:	7902      	ldrb	r2, [r0, #4]
    7914:	f042 0203 	orr.w	r2, r2, #3
    7918:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    791a:	220c      	movs	r2, #12
    791c:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    791e:	2200      	movs	r2, #0
    7920:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    7922:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    7926:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    7928:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    792a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    792e:	fbb2 f2f1 	udiv	r2, r2, r1
    7932:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    7936:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    793a:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    793e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    7942:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    7946:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    794a:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    794e:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7952:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    7954:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7958:	2a00      	cmp	r2, #0
    795a:	da0a      	bge.n	7972 <event_connection_prepare+0x12a>
			u32_t ticks_prepare_to_start =
    795c:	68a3      	ldr	r3, [r4, #8]
    795e:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    7960:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    7964:	428b      	cmp	r3, r1
    7966:	bf2c      	ite	cs
    7968:	4443      	addcs	r3, r8
    796a:	eb08 0301 	addcc.w	r3, r8, r1
    796e:	1a9b      	subs	r3, r3, r2
    7970:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    7972:	f105 0309 	add.w	r3, r5, #9
    7976:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    7978:	4b26      	ldr	r3, [pc, #152]	; (7a14 <event_connection_prepare+0x1cc>)
    797a:	4a27      	ldr	r2, [pc, #156]	; (7a18 <event_connection_prepare+0x1d0>)
    797c:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    797e:	2201      	movs	r2, #1
    7980:	4611      	mov	r1, r2
    7982:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    7984:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7986:	f7fc f965 	bl	3c54 <mayfly_enqueue>
		LL_ASSERT(!retval);
    798a:	2800      	cmp	r0, #0
    798c:	f000 81b4 	beq.w	7cf8 <event_connection_prepare+0x4b0>
    7990:	4a22      	ldr	r2, [pc, #136]	; (7a1c <event_connection_prepare+0x1d4>)
    7992:	4923      	ldr	r1, [pc, #140]	; (7a20 <event_connection_prepare+0x1d8>)
    7994:	e763      	b.n	785e <event_connection_prepare+0x16>
			LL_ASSERT(0);
    7996:	4a23      	ldr	r2, [pc, #140]	; (7a24 <event_connection_prepare+0x1dc>)
			LL_ASSERT(0);
    7998:	4923      	ldr	r1, [pc, #140]	; (7a28 <event_connection_prepare+0x1e0>)
    799a:	e760      	b.n	785e <event_connection_prepare+0x16>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    799c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    79a0:	1bf7      	subs	r7, r6, r7
    79a2:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    79a4:	0438      	lsls	r0, r7, #16
    79a6:	f100 81ab 	bmi.w	7d00 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    79aa:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    79ae:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    79b2:	f8d5 2780 	ldr.w	r2, [r5, #1920]	; 0x780
		_radio.ticker_id_prepare = 0;
    79b6:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    79b8:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    79ba:	bf08      	it	eq
    79bc:	f8c5 3780 	streq.w	r3, [r5, #1920]	; 0x780
		if ((conn->llcp.conn_upd.interval !=
    79c0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    79c4:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    79c6:	429a      	cmp	r2, r3
    79c8:	d114      	bne.n	79f4 <event_connection_prepare+0x1ac>
		     conn->conn_interval) ||
    79ca:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    79ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    79d0:	4299      	cmp	r1, r3
    79d2:	d10f      	bne.n	79f4 <event_connection_prepare+0x1ac>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    79d4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    79d8:	435a      	muls	r2, r3
    79da:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    79de:	f242 7110 	movw	r1, #10000	; 0x2710
    79e2:	fb01 2303 	mla	r3, r1, r3, r2
    79e6:	3b01      	subs	r3, #1
    79e8:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    79ec:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    79ee:	b29b      	uxth	r3, r3
    79f0:	429a      	cmp	r2, r3
    79f2:	d02e      	beq.n	7a52 <event_connection_prepare+0x20a>
			node_rx = packet_rx_reserve_get(2);
    79f4:	2002      	movs	r0, #2
    79f6:	f7fe f82d 	bl	5a54 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    79fa:	b9c8      	cbnz	r0, 7a30 <event_connection_prepare+0x1e8>
    79fc:	4a09      	ldr	r2, [pc, #36]	; (7a24 <event_connection_prepare+0x1dc>)
		LL_ASSERT(node_rx);
    79fe:	490b      	ldr	r1, [pc, #44]	; (7a2c <event_connection_prepare+0x1e4>)
    7a00:	e72d      	b.n	785e <event_connection_prepare+0x16>
    7a02:	bf00      	nop
    7a04:	200009f8 	.word	0x200009f8
    7a08:	0000e48d 	.word	0x0000e48d
    7a0c:	0000e9fa 	.word	0x0000e9fa
    7a10:	2000114c 	.word	0x2000114c
    7a14:	20004ff8 	.word	0x20004ff8
    7a18:	000069bd 	.word	0x000069bd
    7a1c:	0000e456 	.word	0x0000e456
    7a20:	0000e688 	.word	0x0000e688
    7a24:	0000e46a 	.word	0x0000e46a
    7a28:	0000d76b 	.word	0x0000d76b
    7a2c:	0000e8a4 	.word	0x0000e8a4
			node_rx->hdr.handle = conn->handle;
    7a30:	8c23      	ldrh	r3, [r4, #32]
    7a32:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    7a34:	2308      	movs	r3, #8
    7a36:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    7a38:	2300      	movs	r3, #0
    7a3a:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    7a3c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    7a40:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    7a42:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7a46:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    7a48:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7a4c:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    7a4e:	f7ff f8a3 	bl	6b98 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7a52:	6823      	ldr	r3, [r4, #0]
    7a54:	6866      	ldr	r6, [r4, #4]
    7a56:	2b00      	cmp	r3, #0
    7a58:	da09      	bge.n	7a6e <event_connection_prepare+0x226>
			u32_t ticks_prepare_to_start =
    7a5a:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    7a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    7a60:	42b0      	cmp	r0, r6
    7a62:	bf2c      	ite	cs
    7a64:	4480      	addcs	r8, r0
    7a66:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    7a68:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    7a6a:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    7a6e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    7a70:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    7a74:	49c4      	ldr	r1, [pc, #784]	; (7d88 <event_connection_prepare+0x540>)
		conn_interval_old = instant_latency * conn->conn_interval;
    7a76:	fb13 f307 	smulbb	r3, r3, r7
    7a7a:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    7a7c:	fbb3 f2fa 	udiv	r2, r3, sl
    7a80:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    7a84:	fb1a f009 	smulbb	r0, sl, r9
    7a88:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    7a8a:	4283      	cmp	r3, r0
    7a8c:	f080 80a3 	bcs.w	7bd6 <event_connection_prepare+0x38e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    7a90:	1ac0      	subs	r0, r0, r3
    7a92:	f240 1223 	movw	r2, #291	; 0x123
    7a96:	4342      	muls	r2, r0
    7a98:	17c3      	asrs	r3, r0, #31
    7a9a:	fb01 2303 	mla	r3, r1, r3, r2
    7a9e:	fba0 0101 	umull	r0, r1, r0, r1
    7aa2:	4419      	add	r1, r3
    7aa4:	a3b6      	add	r3, pc, #728	; (adr r3, 7d80 <event_connection_prepare+0x538>)
    7aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
    7aaa:	f7f8 fbdd 	bl	268 <__aeabi_uldivmod>
    7aae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7ab2:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7ab6:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    7ab8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7aba:	f8df b300 	ldr.w	fp, [pc, #768]	; 7dbc <event_connection_prepare+0x574>
    7abe:	1bdb      	subs	r3, r3, r7
    7ac0:	444b      	add	r3, r9
    7ac2:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    7ac4:	6823      	ldr	r3, [r4, #0]
    7ac6:	429e      	cmp	r6, r3
    7ac8:	bf38      	it	cc
    7aca:	461e      	movcc	r6, r3
		if (conn->role) {
    7acc:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    7ad0:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7ad2:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    7ad6:	2b00      	cmp	r3, #0
    7ad8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    7ada:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7adc:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    7ae0:	f280 808a 	bge.w	7bf8 <event_connection_prepare+0x3b0>
				conn->slave.window_widening_periodic_us *
    7ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    7ae6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7ae8:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    7aec:	f895 3720 	ldrb.w	r3, [r5, #1824]	; 0x720
    7af0:	4aa6      	ldr	r2, [pc, #664]	; (7d8c <event_connection_prepare+0x544>)
    7af2:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    7af6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7afa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    7afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    7b02:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    7b06:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    7b08:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7b0a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    7b0e:	4ba0      	ldr	r3, [pc, #640]	; (7d90 <event_connection_prepare+0x548>)
				conn->llcp.conn_upd.win_size * 1250;
    7b10:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7b14:	f205 253f 	addw	r5, r5, #575	; 0x23f
    7b18:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    7b1c:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    7b1e:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    7b22:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    7b24:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    7b26:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    7b28:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    7b2a:	429f      	cmp	r7, r3
    7b2c:	bf94      	ite	ls
    7b2e:	6467      	strls	r7, [r4, #68]	; 0x44
    7b30:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    7b32:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    7b34:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    7b36:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7b38:	fba0 010b 	umull	r0, r1, r0, fp
    7b3c:	a390      	add	r3, pc, #576	; (adr r3, 7d80 <event_connection_prepare+0x538>)
    7b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b42:	f7f8 fb91 	bl	268 <__aeabi_uldivmod>
    7b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7b48:	1a1b      	subs	r3, r3, r0
    7b4a:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b4e:	fbb3 f0f8 	udiv	r0, r3, r8
    7b52:	fb08 f000 	mul.w	r0, r8, r0
    7b56:	a38a      	add	r3, pc, #552	; (adr r3, 7d80 <event_connection_prepare+0x538>)
    7b58:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b5c:	fba0 010b 	umull	r0, r1, r0, fp
    7b60:	f7f8 fb82 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    7b64:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7b66:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    7b6a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7b6e:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    7b70:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    7b74:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    7b78:	f242 7210 	movw	r2, #10000	; 0x2710
    7b7c:	fb02 6303 	mla	r3, r2, r3, r6
    7b80:	3b01      	subs	r3, #1
    7b82:	fbb3 f3f6 	udiv	r3, r3, r6
    7b86:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7b88:	4b82      	ldr	r3, [pc, #520]	; (7d94 <event_connection_prepare+0x54c>)
    7b8a:	4433      	add	r3, r6
    7b8c:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    7b90:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7b94:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    7b96:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    7b9a:	bf08      	it	eq
    7b9c:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    7b9e:	2101      	movs	r1, #1
    7ba0:	2000      	movs	r0, #0
    7ba2:	f003 fc83 	bl	b4ac <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7ba6:	2200      	movs	r2, #0
    7ba8:	2101      	movs	r1, #1
		mayfly_was_enabled =
    7baa:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7bac:	4610      	mov	r0, r2
    7bae:	f7fc f829 	bl	3c04 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bb2:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    7bb6:	f641 63e3 	movw	r3, #7907	; 0x1ee3
    7bba:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bbc:	3207      	adds	r2, #7
		ticker_status =
    7bbe:	9300      	str	r3, [sp, #0]
    7bc0:	b2d2      	uxtb	r2, r2
    7bc2:	4b75      	ldr	r3, [pc, #468]	; (7d98 <event_connection_prepare+0x550>)
    7bc4:	4608      	mov	r0, r1
    7bc6:	f7fc fe97 	bl	48f8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7bca:	f030 0802 	bics.w	r8, r0, #2
    7bce:	d020      	beq.n	7c12 <event_connection_prepare+0x3ca>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7bd0:	4a72      	ldr	r2, [pc, #456]	; (7d9c <event_connection_prepare+0x554>)
    7bd2:	4973      	ldr	r1, [pc, #460]	; (7da0 <event_connection_prepare+0x558>)
    7bd4:	e643      	b.n	785e <event_connection_prepare+0x16>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7bd6:	fb0a 3212 	mls	r2, sl, r2, r3
    7bda:	b292      	uxth	r2, r2
    7bdc:	fba2 0101 	umull	r0, r1, r2, r1
    7be0:	f240 1323 	movw	r3, #291	; 0x123
    7be4:	fb03 1102 	mla	r1, r3, r2, r1
    7be8:	a365      	add	r3, pc, #404	; (adr r3, 7d80 <event_connection_prepare+0x538>)
    7bea:	e9d3 2300 	ldrd	r2, r3, [r3]
    7bee:	f7f8 fb3b 	bl	268 <__aeabi_uldivmod>
    7bf2:	eba8 0300 	sub.w	r3, r8, r0
    7bf6:	e75e      	b.n	7ab6 <event_connection_prepare+0x26e>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7bf8:	990c      	ldr	r1, [sp, #48]	; 0x30
    7bfa:	a361      	add	r3, pc, #388	; (adr r3, 7d80 <event_connection_prepare+0x538>)
    7bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7c00:	fba1 010b 	umull	r0, r1, r1, fp
    7c04:	f7f8 fb30 	bl	268 <__aeabi_uldivmod>
    7c08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    7c0c:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    7c0e:	4635      	mov	r5, r6
    7c10:	e7ab      	b.n	7b6a <event_connection_prepare+0x322>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    7c12:	fba5 ab0b 	umull	sl, fp, r5, fp
    7c16:	a35a      	add	r3, pc, #360	; (adr r3, 7d80 <event_connection_prepare+0x538>)
    7c18:	e9d3 2300 	ldrd	r2, r3, [r3]
    7c1c:	4650      	mov	r0, sl
    7c1e:	4659      	mov	r1, fp
    7c20:	f7f8 fb22 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    7c24:	4a5f      	ldr	r2, [pc, #380]	; (7da4 <event_connection_prepare+0x55c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c26:	f894 6020 	ldrb.w	r6, [r4, #32]
    7c2a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    7c2e:	2307      	movs	r3, #7
    7c30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7c34:	2100      	movs	r1, #0
    7c36:	4343      	muls	r3, r0
    7c38:	fb02 3301 	mla	r3, r2, r1, r3
    7c3c:	fba0 0102 	umull	r0, r1, r0, r2
    7c40:	ebba 0000 	subs.w	r0, sl, r0
    7c44:	4419      	add	r1, r3
    7c46:	eb6b 0101 	sbc.w	r1, fp, r1
    7c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7c4e:	2300      	movs	r3, #0
    7c50:	f7f8 fb0a 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c54:	68e3      	ldr	r3, [r4, #12]
    7c56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7c58:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    7c5c:	4952      	ldr	r1, [pc, #328]	; (7da8 <event_connection_prepare+0x560>)
		ticker_status =
    7c5e:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c60:	441a      	add	r2, r3
    7c62:	4613      	mov	r3, r2
    7c64:	4a51      	ldr	r2, [pc, #324]	; (7dac <event_connection_prepare+0x564>)
		ticker_status =
    7c66:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c68:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    7c6c:	bf38      	it	cc
    7c6e:	460a      	movcc	r2, r1
    7c70:	3607      	adds	r6, #7
		ticker_status =
    7c72:	f641 61f3 	movw	r1, #7923	; 0x1ef3
    7c76:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c78:	b2f6      	uxtb	r6, r6
		ticker_status =
    7c7a:	4947      	ldr	r1, [pc, #284]	; (7d98 <event_connection_prepare+0x550>)
    7c7c:	9107      	str	r1, [sp, #28]
    7c7e:	9205      	str	r2, [sp, #20]
    7c80:	9406      	str	r4, [sp, #24]
    7c82:	f8cd 800c 	str.w	r8, [sp, #12]
    7c86:	9501      	str	r5, [sp, #4]
    7c88:	9700      	str	r7, [sp, #0]
    7c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c8c:	4632      	mov	r2, r6
    7c8e:	4641      	mov	r1, r8
    7c90:	4640      	mov	r0, r8
    7c92:	f7fc fd93 	bl	47bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7c96:	f030 0002 	bics.w	r0, r0, #2
    7c9a:	d199      	bne.n	7bd0 <event_connection_prepare+0x388>
		if (mayfly_was_enabled) {
    7c9c:	f1b9 0f00 	cmp.w	r9, #0
    7ca0:	d06b      	beq.n	7d7a <event_connection_prepare+0x532>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7ca2:	2201      	movs	r2, #1
    7ca4:	4611      	mov	r1, r2
}
    7ca6:	b00f      	add	sp, #60	; 0x3c
    7ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7cac:	f7fb bfaa 	b.w	3c04 <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
    7cb0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    7cb4:	2b00      	cmp	r3, #0
    7cb6:	f000 8083 	beq.w	7dc0 <event_connection_prepare+0x578>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7cba:	483d      	ldr	r0, [pc, #244]	; (7db0 <event_connection_prepare+0x568>)
    7cbc:	f7fb ff11 	bl	3ae2 <mem_acquire>
		if (node_tx) {
    7cc0:	4605      	mov	r5, r0
    7cc2:	b1e8      	cbz	r0, 7d00 <event_connection_prepare+0x4b8>
			conn->llcp.chan_map.initiate = 0;
    7cc4:	2300      	movs	r3, #0
    7cc6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    7cca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7ccc:	3306      	adds	r3, #6
    7cce:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    7cd0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7cd4:	7903      	ldrb	r3, [r0, #4]
    7cd6:	f043 0303 	orr.w	r3, r3, #3
    7cda:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7cdc:	2308      	movs	r3, #8
    7cde:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7ce0:	2301      	movs	r3, #1
    7ce2:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    7ce4:	2205      	movs	r2, #5
    7ce6:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7cea:	3008      	adds	r0, #8
    7cec:	f7f8 fc95 	bl	61a <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    7cf0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7cf4:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
    7cf8:	4629      	mov	r1, r5
    7cfa:	4620      	mov	r0, r4
    7cfc:	f7ff fd14 	bl	7728 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    7d00:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    7d04:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7d08:	429a      	cmp	r2, r3
    7d0a:	d01d      	beq.n	7d48 <event_connection_prepare+0x500>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    7d0c:	2005      	movs	r0, #5
    7d0e:	f7ff f99f 	bl	7050 <event_stop.constprop.49>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7d12:	4827      	ldr	r0, [pc, #156]	; (7db0 <event_connection_prepare+0x568>)
    7d14:	f7fb fee5 	bl	3ae2 <mem_acquire>
		if (node_tx) {
    7d18:	4601      	mov	r1, r0
    7d1a:	b1a8      	cbz	r0, 7d48 <event_connection_prepare+0x500>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    7d1c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7d20:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d24:	7903      	ldrb	r3, [r0, #4]
    7d26:	f043 0303 	orr.w	r3, r3, #3
    7d2a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7d2c:	2302      	movs	r3, #2
    7d2e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7d30:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    7d32:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    7d36:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    7d38:	4620      	mov	r0, r4
    7d3a:	f7ff fcf5 	bl	7728 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    7d3e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    7d40:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    7d42:	bf98      	it	ls
    7d44:	3301      	addls	r3, #1
    7d46:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    7d48:	f894 3020 	ldrb.w	r3, [r4, #32]
    7d4c:	f994 501d 	ldrsb.w	r5, [r4, #29]
    7d50:	4818      	ldr	r0, [pc, #96]	; (7db4 <event_connection_prepare+0x56c>)
    7d52:	4919      	ldr	r1, [pc, #100]	; (7db8 <event_connection_prepare+0x570>)
    7d54:	68a2      	ldr	r2, [r4, #8]
    7d56:	9403      	str	r4, [sp, #12]
    7d58:	3307      	adds	r3, #7
    7d5a:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    7d5e:	bf38      	it	cc
    7d60:	4601      	movcc	r1, r0
    7d62:	b2db      	uxtb	r3, r3
    7d64:	e88d 000c 	stmia.w	sp, {r2, r3}
    7d68:	9102      	str	r1, [sp, #8]
    7d6a:	1d23      	adds	r3, r4, #4
    7d6c:	4622      	mov	r2, r4
    7d6e:	4649      	mov	r1, r9
    7d70:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    7d72:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    7d74:	f7ff f97a 	bl	706c <event_common_prepare>
	conn->event_counter = event_counter + 1;
    7d78:	8466      	strh	r6, [r4, #34]	; 0x22
}
    7d7a:	b00f      	add	sp, #60	; 0x3c
    7d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d80:	1afd498d 	.word	0x1afd498d
    7d84:	00000007 	.word	0x00000007
    7d88:	09ce5400 	.word	0x09ce5400
    7d8c:	0000e6a6 	.word	0x0000e6a6
    7d90:	000f4240 	.word	0x000f4240
    7d94:	026259ff 	.word	0x026259ff
    7d98:	000063d1 	.word	0x000063d1
    7d9c:	0000e46a 	.word	0x0000e46a
    7da0:	0000e56e 	.word	0x0000e56e
    7da4:	1afd498d 	.word	0x1afd498d
    7da8:	00007f0d 	.word	0x00007f0d
    7dac:	00007f11 	.word	0x00007f11
    7db0:	2000114c 	.word	0x2000114c
    7db4:	000097dd 	.word	0x000097dd
    7db8:	00007f51 	.word	0x00007f51
    7dbc:	3b9aca00 	.word	0x3b9aca00
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    7dc0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7dc4:	1af3      	subs	r3, r6, r3
    7dc6:	0419      	lsls	r1, r3, #16
    7dc8:	d49a      	bmi.n	7d00 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    7dca:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7dce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    7dd2:	f104 0517 	add.w	r5, r4, #23
    7dd6:	2205      	movs	r2, #5
    7dd8:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7ddc:	4628      	mov	r0, r5
    7dde:	f7f8 fc1c 	bl	61a <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7de2:	2105      	movs	r1, #5
    7de4:	4628      	mov	r0, r5
    7de6:	f7fc f815 	bl	3e14 <util_ones_count_get>
		conn->data_chan_count =
    7dea:	7f63      	ldrb	r3, [r4, #29]
    7dec:	f360 0305 	bfi	r3, r0, #0, #6
    7df0:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    7df2:	2301      	movs	r3, #1
    7df4:	7723      	strb	r3, [r4, #28]
    7df6:	e783      	b.n	7d00 <event_connection_prepare+0x4b8>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7df8:	4840      	ldr	r0, [pc, #256]	; (7efc <event_connection_prepare+0x6b4>)
    7dfa:	f7fb fe72 	bl	3ae2 <mem_acquire>
	if (node_tx) {
    7dfe:	4605      	mov	r5, r0
    7e00:	2800      	cmp	r0, #0
    7e02:	f43f af7d 	beq.w	7d00 <event_connection_prepare+0x4b8>
		conn->llcp_ack = conn->llcp_req;
    7e06:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7e0a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    7e0e:	4b3c      	ldr	r3, [pc, #240]	; (7f00 <event_connection_prepare+0x6b8>)
    7e10:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7e14:	7903      	ldrb	r3, [r0, #4]
    7e16:	f043 0303 	orr.w	r3, r3, #3
    7e1a:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7e1c:	2309      	movs	r3, #9
    7e1e:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    7e20:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7e24:	2b00      	cmp	r3, #0
    7e26:	bfac      	ite	ge
    7e28:	2308      	movge	r3, #8
    7e2a:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7e2c:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    7e2e:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7e30:	2100      	movs	r1, #0
    7e32:	4410      	add	r0, r2
    7e34:	f7f8 fc1d 	bl	672 <memset>
			conn->llcp_features & 0xFF;
    7e38:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7e3c:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    7e3e:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    7e40:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7e42:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7e44:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    7e46:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    7e48:	4620      	mov	r0, r4
    7e4a:	f7ff fc6d 	bl	7728 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    7e4e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    7e50:	86a3      	strh	r3, [r4, #52]	; 0x34
    7e52:	e755      	b.n	7d00 <event_connection_prepare+0x4b8>
	if (conn->llcp_version.tx == 0) {
    7e54:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7e58:	07da      	lsls	r2, r3, #31
    7e5a:	d424      	bmi.n	7ea6 <event_connection_prepare+0x65e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7e5c:	4827      	ldr	r0, [pc, #156]	; (7efc <event_connection_prepare+0x6b4>)
    7e5e:	f7fb fe40 	bl	3ae2 <mem_acquire>
		if (node_tx) {
    7e62:	4601      	mov	r1, r0
    7e64:	2800      	cmp	r0, #0
    7e66:	f43f af4b 	beq.w	7d00 <event_connection_prepare+0x4b8>
			conn->llcp_ack = conn->llcp_req;
    7e6a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7e6e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    7e72:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7e76:	f043 0301 	orr.w	r3, r3, #1
    7e7a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7e7e:	7903      	ldrb	r3, [r0, #4]
    7e80:	f043 0303 	orr.w	r3, r3, #3
    7e84:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    7e86:	2306      	movs	r3, #6
    7e88:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7e8a:	230c      	movs	r3, #12
    7e8c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    7e8e:	2309      	movs	r3, #9
    7e90:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    7e92:	f06f 030e 	mvn.w	r3, #14
    7e96:	7243      	strb	r3, [r0, #9]
    7e98:	2305      	movs	r3, #5
    7e9a:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    7e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ea0:	72c3      	strb	r3, [r0, #11]
    7ea2:	7303      	strb	r3, [r0, #12]
    7ea4:	e7d0      	b.n	7e48 <event_connection_prepare+0x600>
	} else if (conn->llcp_version.rx != 0) {
    7ea6:	079b      	lsls	r3, r3, #30
    7ea8:	d523      	bpl.n	7ef2 <event_connection_prepare+0x6aa>
		conn->llcp_ack = conn->llcp_req;
    7eaa:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7eae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    7eb2:	2002      	movs	r0, #2
    7eb4:	f7fd fdce 	bl	5a54 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7eb8:	b908      	cbnz	r0, 7ebe <event_connection_prepare+0x676>
    7eba:	4a12      	ldr	r2, [pc, #72]	; (7f04 <event_connection_prepare+0x6bc>)
    7ebc:	e59f      	b.n	79fe <event_connection_prepare+0x1b6>
		node_rx->hdr.handle = conn->handle;
    7ebe:	8c23      	ldrh	r3, [r4, #32]
    7ec0:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7ec2:	2301      	movs	r3, #1
    7ec4:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7ec6:	7a03      	ldrb	r3, [r0, #8]
    7ec8:	f043 0303 	orr.w	r3, r3, #3
    7ecc:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    7ece:	2306      	movs	r3, #6
    7ed0:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    7ed2:	230c      	movs	r3, #12
    7ed4:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    7ed6:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    7eda:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    7edc:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    7ee0:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    7ee4:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    7ee8:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    7eec:	f7fe fe54 	bl	6b98 <packet_rx_enqueue>
    7ef0:	e706      	b.n	7d00 <event_connection_prepare+0x4b8>
		LL_ASSERT(0);
    7ef2:	4a04      	ldr	r2, [pc, #16]	; (7f04 <event_connection_prepare+0x6bc>)
    7ef4:	e550      	b.n	7998 <event_connection_prepare+0x150>
			LL_ASSERT(0);
    7ef6:	4a04      	ldr	r2, [pc, #16]	; (7f08 <event_connection_prepare+0x6c0>)
    7ef8:	e54e      	b.n	7998 <event_connection_prepare+0x150>
    7efa:	bf00      	nop
    7efc:	2000114c 	.word	0x2000114c
    7f00:	0001400c 	.word	0x0001400c
    7f04:	0000e47e 	.word	0x0000e47e
    7f08:	0000e48d 	.word	0x0000e48d

00007f0c <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    7f0c:	f7ff bc9c 	b.w	7848 <event_connection_prepare>

00007f10 <event_slave_prepare>:
    7f10:	f7ff bc9a 	b.w	7848 <event_connection_prepare>

00007f14 <connection_configure>:
{
    7f14:	b510      	push	{r4, lr}
    7f16:	4604      	mov	r4, r0
	radio_reset();
    7f18:	f002 ff64 	bl	ade4 <radio_reset>
	radio_tx_power_set(0);
    7f1c:	2000      	movs	r0, #0
    7f1e:	f002 ff8b 	bl	ae38 <radio_tx_power_set>
	radio_isr_set(isr);
    7f22:	480a      	ldr	r0, [pc, #40]	; (7f4c <connection_configure+0x38>)
    7f24:	f002 ff28 	bl	ad78 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    7f28:	f104 0010 	add.w	r0, r4, #16
    7f2c:	f002 ffa2 	bl	ae74 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    7f30:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    7f32:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    7f34:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    7f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    7f3a:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    7f3c:	f240 605b 	movw	r0, #1627	; 0x65b
    7f40:	4319      	orrs	r1, r3
}
    7f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    7f46:	f003 b83d 	b.w	afc4 <radio_crc_configure>
    7f4a:	bf00      	nop
    7f4c:	000081b9 	.word	0x000081b9

00007f50 <event_slave>:
{
    7f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f54:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    7f56:	4b5e      	ldr	r3, [pc, #376]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    7f58:	7cda      	ldrb	r2, [r3, #19]
{
    7f5a:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    7f5c:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    7f60:	461d      	mov	r5, r3
    7f62:	b152      	cbz	r2, 7f7a <event_slave+0x2a>
    7f64:	4a5b      	ldr	r2, [pc, #364]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    7f66:	495c      	ldr	r1, [pc, #368]	; (80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    7f68:	2003      	movs	r0, #3
    7f6a:	f7fa f991 	bl	2290 <bt_log>
    7f6e:	4040      	eors	r0, r0
    7f70:	f380 8811 	msr	BASEPRI, r0
    7f74:	f04f 0004 	mov.w	r0, #4
    7f78:	df02      	svc	2
    7f7a:	7c1a      	ldrb	r2, [r3, #16]
    7f7c:	8c23      	ldrh	r3, [r4, #32]
    7f7e:	b2d2      	uxtb	r2, r2
    7f80:	3307      	adds	r3, #7
    7f82:	429a      	cmp	r2, r3
    7f84:	d002      	beq.n	7f8c <event_slave+0x3c>
    7f86:	4a53      	ldr	r2, [pc, #332]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    7f88:	4954      	ldr	r1, [pc, #336]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    7f8a:	e7ed      	b.n	7f68 <event_slave+0x18>
	_radio.role = ROLE_SLAVE;
    7f8c:	2303      	movs	r3, #3
    7f8e:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    7f90:	f885 6718 	strb.w	r6, [r5, #1816]	; 0x718
	_radio.crc_expire = 0;
    7f94:	f885 6719 	strb.w	r6, [r5, #1817]	; 0x719
	_radio.state = STATE_RX;
    7f98:	2301      	movs	r3, #1
    7f9a:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    7f9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    7f9e:	f8c5 4714 	str.w	r4, [r5, #1812]	; 0x714
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7fa2:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    7fa4:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    7fa6:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    7fa8:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    7faa:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    7fac:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    7fae:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    7fb0:	f7ff ffb0 	bl	7f14 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    7fb4:	2096      	movs	r0, #150	; 0x96
    7fb6:	f003 f8b3 	bl	b120 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    7fba:	4633      	mov	r3, r6
    7fbc:	4632      	mov	r2, r6
    7fbe:	4631      	mov	r1, r6
    7fc0:	4630      	mov	r0, r6
    7fc2:	f003 f829 	bl	b018 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7fc6:	f895 2739 	ldrb.w	r2, [r5, #1849]	; 0x739
    7fca:	f8d5 3734 	ldr.w	r3, [r5, #1844]	; 0x734
    7fce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    7fd2:	4620      	mov	r0, r4
    7fd4:	3108      	adds	r1, #8
    7fd6:	f7fe fb57 	bl	6688 <rx_packet_set>
	if (conn->data_chan_sel) {
    7fda:	7f63      	ldrb	r3, [r4, #29]
    7fdc:	f013 0f40 	tst.w	r3, #64	; 0x40
    7fe0:	f104 0217 	add.w	r2, r4, #23
    7fe4:	d04a      	beq.n	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7fe6:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7fe8:	8be1      	ldrh	r1, [r4, #30]
    7fea:	3801      	subs	r0, #1
    7fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7ff0:	b280      	uxth	r0, r0
    7ff2:	f7ff fb55 	bl	76a0 <chan_sel_2>
	chan_set(data_chan_use);
    7ff6:	f7fd ff05 	bl	5e04 <chan_set>
	conn->slave.window_widening_event_us +=
    7ffa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7ffc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7ffe:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    8000:	2200      	movs	r2, #0
    8002:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    8004:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    8006:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    8008:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    800a:	bf88      	it	hi
    800c:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    800e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8010:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    8012:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    8014:	4413      	add	r3, r2
    8016:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    8018:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    801a:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    801c:	f107 0109 	add.w	r1, r7, #9
    8020:	4630      	mov	r0, r6
    8022:	f003 f889 	bl	b138 <radio_tmr_start>
    8026:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    8028:	f003 f922 	bl	b270 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    802c:	4630      	mov	r0, r6
    802e:	f003 f941 	bl	b2b4 <radio_tmr_aa_save>
    8032:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    8034:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8036:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    8038:	4631      	mov	r1, r6
    803a:	4630      	mov	r0, r6
    803c:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    8040:	f002 ff71 	bl	af26 <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    8044:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    8046:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    8048:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    804a:	4630      	mov	r0, r6
    804c:	f002 ff6d 	bl	af2a <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    8050:	4440      	add	r0, r8
    8052:	f003 f8ef 	bl	b234 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    8056:	f894 1020 	ldrb.w	r1, [r4, #32]
    805a:	3107      	adds	r1, #7
    805c:	463a      	mov	r2, r7
    805e:	b2c9      	uxtb	r1, r1
    8060:	4620      	mov	r0, r4
    8062:	f7fe fe9b 	bl	6d9c <preempt_calc>
    8066:	4603      	mov	r3, r0
    8068:	b340      	cbz	r0, 80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>
		_radio.state = STATE_STOP;
    806a:	2304      	movs	r3, #4
    806c:	752b      	strb	r3, [r5, #20]
		radio_disable();
    806e:	f002 ff6d 	bl	af4c <radio_disable>
	packet_tx_enqueue(2);
    8072:	2002      	movs	r0, #2
}
    8074:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    8078:	f7fe bb5a 	b.w	6730 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    807c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    807e:	7fa6      	ldrb	r6, [r4, #30]
    8080:	fb01 6606 	mla	r6, r1, r6, r6
    8084:	7fe1      	ldrb	r1, [r4, #31]
    8086:	2025      	movs	r0, #37	; 0x25
    8088:	440e      	add	r6, r1
    808a:	fb96 f1f0 	sdiv	r1, r6, r0
    808e:	fb00 6611 	mls	r6, r0, r1, r6
    8092:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8094:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    8096:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8098:	5c51      	ldrb	r1, [r2, r1]
    809a:	f006 0607 	and.w	r6, r6, #7
    809e:	fa41 f606 	asr.w	r6, r1, r6
    80a2:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    80a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    80a8:	d4a5      	bmi.n	7ff6 <event_slave+0xa6>
		chan_index = chan_next % chan_count;
    80aa:	fbb0 f1f3 	udiv	r1, r0, r3
    80ae:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    80b2:	b2c9      	uxtb	r1, r1
    80b4:	4610      	mov	r0, r2
    80b6:	f7fd fcb1 	bl	5a1c <chan_sel_remap>
    80ba:	e79c      	b.n	7ff6 <event_slave+0xa6>
		ticker_status =
    80bc:	4a08      	ldr	r2, [pc, #32]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    80be:	4601      	mov	r1, r0
    80c0:	f7fc fc98 	bl	49f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    80c4:	f030 0302 	bics.w	r3, r0, #2
    80c8:	d0d3      	beq.n	8072 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72>
    80ca:	4a02      	ldr	r2, [pc, #8]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    80cc:	4905      	ldr	r1, [pc, #20]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    80ce:	e74b      	b.n	7f68 <event_slave+0x18>
    80d0:	200009f8 	.word	0x200009f8
    80d4:	0000e4a6 	.word	0x0000e4a6
    80d8:	0000e5e3 	.word	0x0000e5e3
    80dc:	0000e644 	.word	0x0000e644
    80e0:	000064b9 	.word	0x000064b9
    80e4:	0000e56e 	.word	0x0000e56e

000080e8 <prepare_pdu_data_tx>:
{
    80e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    80ea:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    80ee:	061a      	lsls	r2, r3, #24
{
    80f0:	4604      	mov	r4, r0
    80f2:	460f      	mov	r7, r1
	if (/* empty packet */
    80f4:	d409      	bmi.n	810a <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    80f6:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    80fa:	b135      	cbz	r5, 810a <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    80fc:	f013 0f08 	tst.w	r3, #8
    8100:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    8104:	d022      	beq.n	814c <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    8106:	4575      	cmp	r5, lr
    8108:	d020      	beq.n	814c <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    810a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    810e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8112:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    8116:	f002 ff6b 	bl	aff0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    811a:	7803      	ldrb	r3, [r0, #0]
    811c:	2201      	movs	r2, #1
    811e:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    8122:	2200      	movs	r2, #0
    8124:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    8126:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    812a:	7003      	strb	r3, [r0, #0]
    812c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    812e:	b152      	cbz	r2, 8146 <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    8130:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    8134:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    8136:	7803      	ldrb	r3, [r0, #0]
    8138:	f36f 1347 	bfc	r3, #5, #3
    813c:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    813e:	2300      	movs	r3, #0
    8140:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    8142:	6038      	str	r0, [r7, #0]
    8144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    8146:	f362 1304 	bfi	r3, r2, #4, #1
    814a:	e7f3      	b.n	8134 <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    814c:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    8150:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    8154:	1d2a      	adds	r2, r5, #4
    8156:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    8158:	b911      	cbnz	r1, 8160 <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    815a:	7841      	ldrb	r1, [r0, #1]
    815c:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    8160:	b123      	cbz	r3, 816c <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8162:	5cd1      	ldrb	r1, [r2, r3]
    8164:	2601      	movs	r6, #1
    8166:	f366 0101 	bfi	r1, r6, #0, #2
    816a:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    816c:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    8170:	1af6      	subs	r6, r6, r3
    8172:	b2f6      	uxtb	r6, r6
    8174:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    8176:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    8178:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    817a:	f36f 1104 	bfc	r1, #4, #1
    817e:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    8180:	d905      	bls.n	818e <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    8182:	211b      	movs	r1, #27
    8184:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    8186:	5cd1      	ldrb	r1, [r2, r3]
    8188:	f041 0110 	orr.w	r1, r1, #16
    818c:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    818e:	6829      	ldr	r1, [r5, #0]
    8190:	b119      	cbz	r1, 819a <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    8192:	5cd1      	ldrb	r1, [r2, r3]
    8194:	f041 0110 	orr.w	r1, r1, #16
    8198:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    819a:	f1be 0f00 	cmp.w	lr, #0
    819e:	d1ca      	bne.n	8136 <prepare_pdu_data_tx+0x4e>
    81a0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    81a4:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    81a6:	bf1c      	itt	ne
    81a8:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    81ac:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    81b0:	e7c1      	b.n	8136 <prepare_pdu_data_tx+0x4e>
    81b2:	0000      	movs	r0, r0
    81b4:	0000      	movs	r0, r0
	...

000081b8 <isr>:
{
    81b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81bc:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    81be:	f002 feed 	bl	af9c <radio_is_done>
    81c2:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    81c4:	b336      	cbz	r6, 8214 <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    81c6:	f002 ff09 	bl	afdc <radio_crc_is_valid>
    81ca:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    81cc:	f002 ff8a 	bl	b0e4 <radio_filter_has_match>
    81d0:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    81d2:	f002 ff91 	bl	b0f8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    81d6:	f003 f939 	bl	b44c <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    81da:	f003 f925 	bl	b428 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    81de:	f002 ff4b 	bl	b078 <radio_rssi_is_ready>
    81e2:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    81e4:	f002 fec4 	bl	af70 <radio_status_reset>
	radio_tmr_status_reset();
    81e8:	f002 ff8c 	bl	b104 <radio_tmr_status_reset>
	radio_filter_status_reset();
    81ec:	f002 ff72 	bl	b0d4 <radio_filter_status_reset>
	radio_ar_status_reset();
    81f0:	f003 f920 	bl	b434 <radio_ar_status_reset>
	radio_rssi_status_reset();
    81f4:	f002 ff38 	bl	b068 <radio_rssi_status_reset>
	switch (_radio.state) {
    81f8:	4a6f      	ldr	r2, [pc, #444]	; (83b8 <isr+0x200>)
    81fa:	7d13      	ldrb	r3, [r2, #20]
    81fc:	4693      	mov	fp, r2
    81fe:	2b05      	cmp	r3, #5
    8200:	f201 82d2 	bhi.w	97a8 <isr+0x15f0>
    8204:	e8df f013 	tbh	[pc, r3, lsl #1]
    8208:	0088005d 	.word	0x0088005d
    820c:	0959000a 	.word	0x0959000a
    8210:	09590959 	.word	0x09590959
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    8214:	4635      	mov	r5, r6
    8216:	4634      	mov	r4, r6
    8218:	4637      	mov	r7, r6
    821a:	e7e3      	b.n	81e4 <isr+0x2c>
	_radio.state = STATE_RX;
    821c:	2301      	movs	r3, #1
    821e:	f88b 3014 	strb.w	r3, [fp, #20]
	hcto = radio_tmr_tifs_base_get()
    8222:	f003 f871 	bl	b308 <radio_tmr_tifs_base_get>
    8226:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    8228:	2096      	movs	r0, #150	; 0x96
    822a:	f002 ff79 	bl	b120 <radio_tmr_tifs_set>
	switch (_radio.role) {
    822e:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8232:	3b01      	subs	r3, #1
    8234:	34c3      	adds	r4, #195	; 0xc3
    8236:	2b03      	cmp	r3, #3
    8238:	d86b      	bhi.n	8312 <isr+0x15a>
    823a:	e8df f003 	tbb	[pc, r3]
    823e:	2102      	.short	0x2102
    8240:	4545      	.short	0x4545
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8242:	2300      	movs	r3, #0
    8244:	461a      	mov	r2, r3
    8246:	4619      	mov	r1, r3
    8248:	4618      	mov	r0, r3
    824a:	f002 fee5 	bl	b018 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    824e:	f002 fed3 	bl	aff8 <radio_pkt_scratch_get>
    8252:	f002 fe55 	bl	af00 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    8256:	f002 fe97 	bl	af88 <radio_is_ready>
    825a:	4605      	mov	r5, r0
    825c:	b110      	cbz	r0, 8264 <isr+0xac>
		LL_ASSERT(!radio_is_ready());
    825e:	4a57      	ldr	r2, [pc, #348]	; (83bc <isr+0x204>)
	LL_ASSERT(!radio_is_ready());
    8260:	4957      	ldr	r1, [pc, #348]	; (83c0 <isr+0x208>)
    8262:	e174      	b.n	854e <isr+0x396>
		hcto += radio_rx_chain_delay_get(0, 0);
    8264:	4601      	mov	r1, r0
    8266:	f002 fe60 	bl	af2a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    826a:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    826c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    826e:	4628      	mov	r0, r5
    8270:	f002 fe57 	bl	af22 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    8274:	1a20      	subs	r0, r4, r0
    8276:	f002 ffdd 	bl	b234 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    827a:	f003 f82d 	bl	b2d8 <radio_tmr_end_capture>
    827e:	e020      	b.n	82c2 <isr+0x10a>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8280:	2300      	movs	r3, #0
    8282:	4619      	mov	r1, r3
    8284:	461a      	mov	r2, r3
    8286:	4618      	mov	r0, r3
    8288:	f002 fec6 	bl	b018 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    828c:	f89b 2739 	ldrb.w	r2, [fp, #1849]	; 0x739
    8290:	f8db 3734 	ldr.w	r3, [fp, #1844]	; 0x734
		radio_pkt_rx_set(_radio.packet_rx
    8294:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8298:	3008      	adds	r0, #8
    829a:	f002 fe31 	bl	af00 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    829e:	f002 fe73 	bl	af88 <radio_is_ready>
    82a2:	4605      	mov	r5, r0
    82a4:	2800      	cmp	r0, #0
    82a6:	d1da      	bne.n	825e <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    82a8:	4601      	mov	r1, r0
    82aa:	f002 fe3e 	bl	af2a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    82ae:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    82b0:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    82b2:	4628      	mov	r0, r5
    82b4:	f002 fe35 	bl	af22 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    82b8:	1a20      	subs	r0, r4, r0
    82ba:	f002 ffbb 	bl	b234 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    82be:	f002 fec3 	bl	b048 <radio_rssi_measure>
}
    82c2:	b00f      	add	sp, #60	; 0x3c
    82c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    82c8:	2300      	movs	r3, #0
    82ca:	461a      	mov	r2, r3
    82cc:	4619      	mov	r1, r3
    82ce:	4618      	mov	r0, r3
    82d0:	f002 fea2 	bl	b018 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    82d4:	f89b 2739 	ldrb.w	r2, [fp, #1849]	; 0x739
    82d8:	f8db 3734 	ldr.w	r3, [fp, #1844]	; 0x734
		rx_packet_set(_radio.conn_curr,	(void *)
    82dc:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    82e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    82e4:	3108      	adds	r1, #8
    82e6:	f7fe f9cf 	bl	6688 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    82ea:	f002 fe4d 	bl	af88 <radio_is_ready>
    82ee:	4605      	mov	r5, r0
    82f0:	2800      	cmp	r0, #0
    82f2:	d1b4      	bne.n	825e <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    82f4:	4601      	mov	r1, r0
    82f6:	f002 fe18 	bl	af2a <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    82fa:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    82fc:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    82fe:	4628      	mov	r0, r5
    8300:	f002 fe0f 	bl	af22 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    8304:	1a20      	subs	r0, r4, r0
    8306:	f002 ff95 	bl	b234 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    830a:	2001      	movs	r0, #1
    830c:	f7fe fa10 	bl	6730 <packet_tx_enqueue>
    8310:	e7d7      	b.n	82c2 <isr+0x10a>
		LL_ASSERT(0);
    8312:	4a2a      	ldr	r2, [pc, #168]	; (83bc <isr+0x204>)
		LL_ASSERT(0);
    8314:	492b      	ldr	r1, [pc, #172]	; (83c4 <isr+0x20c>)
    8316:	e11a      	b.n	854e <isr+0x396>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    8318:	b92e      	cbnz	r6, 8326 <isr+0x16e>
		_radio.state = STATE_CLOSE;
    831a:	2303      	movs	r3, #3
    831c:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    8320:	f002 fe14 	bl	af4c <radio_disable>
    8324:	e7cd      	b.n	82c2 <isr+0x10a>
	switch (_radio.role) {
    8326:	f89b 3013 	ldrb.w	r3, [fp, #19]
    832a:	3b01      	subs	r3, #1
    832c:	2b03      	cmp	r3, #3
    832e:	f201 80c1 	bhi.w	94b4 <isr+0x12fc>
    8332:	e8df f013 	tbh	[pc, r3, lsl #1]
    8336:	0004      	.short	0x0004
    8338:	04e50223 	.word	0x04e50223
    833c:	04e5      	.short	0x04e5
		if (crc_ok) {
    833e:	2f00      	cmp	r7, #0
    8340:	d0eb      	beq.n	831a <isr+0x162>
	pdu_adv = (void *)radio_pkt_scratch_get();
    8342:	f002 fe59 	bl	aff8 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8346:	f89b 922d 	ldrb.w	r9, [fp, #557]	; 0x22d
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    834a:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    834c:	eb09 2909 	add.w	r9, r9, r9, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8350:	f002 030f 	and.w	r3, r2, #15
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8354:	f109 092b 	add.w	r9, r9, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8358:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    835a:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    835c:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    8360:	d134      	bne.n	83cc <isr+0x214>
    8362:	7843      	ldrb	r3, [r0, #1]
    8364:	2b0c      	cmp	r3, #12
    8366:	d131      	bne.n	83cc <isr+0x214>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    8368:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    836c:	07db      	lsls	r3, r3, #31
    836e:	d500      	bpl.n	8372 <isr+0x1ba>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    8370:	b364      	cbz	r4, 83cc <isr+0x214>
	return (adv->tx_addr == sr->rx_addr) &&
    8372:	f81b 3009 	ldrb.w	r3, [fp, r9]
    8376:	f3c3 1380 	ubfx	r3, r3, #6, #1
    837a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    837e:	d125      	bne.n	83cc <isr+0x214>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    8380:	2206      	movs	r2, #6
    8382:	f107 0108 	add.w	r1, r7, #8
    8386:	1ca8      	adds	r0, r5, #2
    8388:	f7f8 f932 	bl	5f0 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    838c:	b9f0      	cbnz	r0, 83cc <isr+0x214>
		_radio.state = STATE_CLOSE;
    838e:	2403      	movs	r4, #3
    8390:	f88b 4014 	strb.w	r4, [fp, #20]
		radio_switch_complete_and_disable();
    8394:	f002 fe4a 	bl	b02c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    8398:	f89b 0635 	ldrb.w	r0, [fp, #1589]	; 0x635
    839c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    83a0:	f200 4033 	addw	r0, r0, #1075	; 0x433
    83a4:	4458      	add	r0, fp
    83a6:	f002 fdb1 	bl	af0c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    83aa:	f002 fded 	bl	af88 <radio_is_ready>
    83ae:	2800      	cmp	r0, #0
    83b0:	d087      	beq.n	82c2 <isr+0x10a>
    83b2:	4a05      	ldr	r2, [pc, #20]	; (83c8 <isr+0x210>)
    83b4:	e754      	b.n	8260 <isr+0xa8>
    83b6:	bf00      	nop
    83b8:	200009f8 	.word	0x200009f8
    83bc:	0000e1bf 	.word	0x0000e1bf
    83c0:	0000e6b6 	.word	0x0000e6b6
    83c4:	0000d76b 	.word	0x0000d76b
    83c8:	0000e1d2 	.word	0x0000e1d2
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    83cc:	783b      	ldrb	r3, [r7, #0]
    83ce:	f003 030f 	and.w	r3, r3, #15
    83d2:	2b05      	cmp	r3, #5
    83d4:	d1a1      	bne.n	831a <isr+0x162>
    83d6:	787b      	ldrb	r3, [r7, #1]
    83d8:	2b22      	cmp	r3, #34	; 0x22
    83da:	d19e      	bne.n	831a <isr+0x162>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    83dc:	f81b 3009 	ldrb.w	r3, [fp, r9]
    83e0:	f003 030f 	and.w	r3, r3, #15
    83e4:	2b01      	cmp	r3, #1
    83e6:	f040 80bd 	bne.w	8564 <isr+0x3ac>
		       isr_adv_ci_adva_check(adv, ci) &&
    83ea:	4639      	mov	r1, r7
    83ec:	4628      	mov	r0, r5
    83ee:	f7fd ffb1 	bl	6354 <isr_adv_ci_adva_check>
    83f2:	b188      	cbz	r0, 8418 <isr+0x260>
	return (adv->rx_addr == ci->tx_addr) &&
    83f4:	783b      	ldrb	r3, [r7, #0]
    83f6:	f81b 2009 	ldrb.w	r2, [fp, r9]
    83fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    83fe:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8402:	f040 80ad 	bne.w	8560 <isr+0x3a8>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    8406:	2206      	movs	r2, #6
    8408:	1cb9      	adds	r1, r7, #2
    840a:	f105 0008 	add.w	r0, r5, #8
    840e:	f7f8 f8ef 	bl	5f0 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    8412:	fab0 f080 	clz	r0, r0
    8416:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    8418:	2800      	cmp	r0, #0
    841a:	f43f af7e 	beq.w	831a <isr+0x162>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    841e:	f89b 377a 	ldrb.w	r3, [fp, #1914]	; 0x77a
    8422:	b133      	cbz	r3, 8432 <isr+0x27a>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    8424:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
    8428:	f89b 2779 	ldrb.w	r2, [fp, #1913]	; 0x779
    842c:	429a      	cmp	r2, r3
    842e:	f47f af74 	bne.w	831a <isr+0x162>
    8432:	f8db 3638 	ldr.w	r3, [fp, #1592]	; 0x638
    8436:	2b00      	cmp	r3, #0
    8438:	f43f af6f 	beq.w	831a <isr+0x162>
			node_rx = packet_rx_reserve_get(4);
    843c:	2004      	movs	r0, #4
    843e:	f7fd fb09 	bl	5a54 <packet_rx_reserve_get>
		if (!node_rx) {
    8442:	4605      	mov	r5, r0
    8444:	2800      	cmp	r0, #0
    8446:	f43f af68 	beq.w	831a <isr+0x162>
		_radio.state = STATE_STOP;
    844a:	f04f 0a04 	mov.w	sl, #4
    844e:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    8452:	f002 fd7b 	bl	af4c <radio_disable>
		conn = _radio.advertiser.conn;
    8456:	f8db 4638 	ldr.w	r4, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    845a:	f8db 1708 	ldr.w	r1, [fp, #1800]	; 0x708
		_radio.advertiser.conn = NULL;
    845e:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8462:	f44f 7282 	mov.w	r2, #260	; 0x104
    8466:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    8468:	f8cb 8638 	str.w	r8, [fp, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    846c:	f7fb fb6b 	bl	3b46 <mem_index_get>
		memcpy(&conn->crc_init[0],
    8470:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8472:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    8474:	f107 0112 	add.w	r1, r7, #18
    8478:	f104 0014 	add.w	r0, r4, #20
    847c:	f7f8 f8cd 	bl	61a <memcpy>
		memcpy(&conn->access_addr[0],
    8480:	f104 0310 	add.w	r3, r4, #16
    8484:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    8486:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    848a:	4652      	mov	r2, sl
    848c:	f107 010e 	add.w	r1, r7, #14
    8490:	930a      	str	r3, [sp, #40]	; 0x28
    8492:	f7f8 f8c2 	bl	61a <memcpy>
		memcpy(&conn->data_chan_map[0],
    8496:	2205      	movs	r2, #5
    8498:	f107 011e 	add.w	r1, r7, #30
    849c:	4630      	mov	r0, r6
    849e:	f7f8 f8bc 	bl	61a <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    84a2:	2105      	movs	r1, #5
    84a4:	4630      	mov	r0, r6
    84a6:	f7fb fcb5 	bl	3e14 <util_ones_count_get>
		conn->data_chan_count =
    84aa:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    84ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    84ae:	f360 0205 	bfi	r2, r0, #0, #6
    84b2:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    84b4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    84b8:	f3c2 0204 	ubfx	r2, r2, #0, #5
    84bc:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    84be:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    84c0:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    84c2:	f240 46e2 	movw	r6, #1250	; 0x4e2
    84c6:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    84c8:	7ef9      	ldrb	r1, [r7, #27]
    84ca:	7eba      	ldrb	r2, [r7, #26]
    84cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    84d0:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    84d2:	4619      	mov	r1, r3
    84d4:	4652      	mov	r2, sl
    84d6:	f104 0054 	add.w	r0, r4, #84	; 0x54
    84da:	f7f8 f89e 	bl	61a <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    84de:	8bbb      	ldrh	r3, [r7, #28]
    84e0:	f242 7210 	movw	r2, #10000	; 0x2710
    84e4:	fb02 6303 	mla	r3, r2, r3, r6
    84e8:	3b01      	subs	r3, #1
    84ea:	fbb3 f3f6 	udiv	r3, r3, r6
    84ee:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    84f0:	4b97      	ldr	r3, [pc, #604]	; (8750 <isr+0x598>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    84f2:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    84f4:	4433      	add	r3, r6
    84f6:	fbb3 f3f6 	udiv	r3, r3, r6
    84fa:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    84fc:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    84fe:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    8502:	f04f 0801 	mov.w	r8, #1
    8506:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    850a:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    850c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8510:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8512:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8516:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    8518:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    851a:	f105 000e 	add.w	r0, r5, #14
    851e:	f7f8 f87c 	bl	61a <memcpy>
			pdu_adv->connect_ind.interval;
    8522:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    8524:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    8526:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    8528:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    852a:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    852c:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    852e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    8532:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    8536:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    8538:	8c20      	ldrh	r0, [r4, #32]
    853a:	f7fd ff2f 	bl	639c <rx_fc_lock>
		packet_rx_enqueue();
    853e:	f7fe fb2b 	bl	6b98 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    8542:	2003      	movs	r0, #3
    8544:	f7fd fa86 	bl	5a54 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    8548:	b9d0      	cbnz	r0, 8580 <isr+0x3c8>
    854a:	4a82      	ldr	r2, [pc, #520]	; (8754 <isr+0x59c>)
			LL_ASSERT(node_rx);
    854c:	4982      	ldr	r1, [pc, #520]	; (8758 <isr+0x5a0>)
		LL_ASSERT(0);
    854e:	2003      	movs	r0, #3
    8550:	f7f9 fe9e 	bl	2290 <bt_log>
    8554:	4040      	eors	r0, r0
    8556:	f380 8811 	msr	BASEPRI, r0
    855a:	f04f 0004 	mov.w	r0, #4
    855e:	df02      	svc	2
	return (adv->rx_addr == ci->tx_addr) &&
    8560:	2000      	movs	r0, #0
    8562:	e759      	b.n	8418 <isr+0x260>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    8564:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    8568:	079e      	lsls	r6, r3, #30
    856a:	d500      	bpl.n	856e <isr+0x3b6>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    856c:	b134      	cbz	r4, 857c <isr+0x3c4>
	       isr_adv_ci_adva_check(adv, ci);
    856e:	4639      	mov	r1, r7
    8570:	4628      	mov	r0, r5
    8572:	f7fd feef 	bl	6354 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    8576:	f000 0001 	and.w	r0, r0, #1
    857a:	e74d      	b.n	8418 <isr+0x260>
    857c:	4620      	mov	r0, r4
    857e:	e7fa      	b.n	8576 <isr+0x3be>
			node_rx->hdr.handle = conn->handle;
    8580:	8c23      	ldrh	r3, [r4, #32]
    8582:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    8584:	230a      	movs	r3, #10
    8586:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    8588:	783b      	ldrb	r3, [r7, #0]
    858a:	f013 0320 	ands.w	r3, r3, #32
    858e:	f000 80d7 	beq.w	8740 <isr+0x588>
					((u16_t)conn->access_addr[1] << 8) |
    8592:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    8594:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    8596:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    8598:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    859c:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    859e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    85a2:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    85a4:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    85a6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    85aa:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    85ac:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    85ae:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    85b2:	f7fe faf1 	bl	6b98 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    85b6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    85ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    85be:	4967      	ldr	r1, [pc, #412]	; (875c <isr+0x5a4>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    85c0:	0952      	lsrs	r2, r2, #5
    85c2:	f362 0384 	bfi	r3, r2, #2, #3
    85c6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    85ca:	f89b 3720 	ldrb.w	r3, [fp, #1824]	; 0x720
			   gc_lookup_ppm[conn->slave.sca]) *
    85ce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    85d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    85d6:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    85d8:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    85da:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    85de:	4a60      	ldr	r2, [pc, #384]	; (8760 <isr+0x5a8>)
    85e0:	f203 233f 	addw	r3, r3, #575	; 0x23f
    85e4:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    85e8:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    85ea:	0873      	lsrs	r3, r6, #1
    85ec:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    85ee:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    85f0:	7d7b      	ldrb	r3, [r7, #21]
    85f2:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    85f6:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    85fa:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    85fe:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    8600:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    8602:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    8606:	4640      	mov	r0, r8
    8608:	f002 fc8d 	bl	af26 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    860c:	4955      	ldr	r1, [pc, #340]	; (8764 <isr+0x5ac>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    860e:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    8610:	f200 4052 	addw	r0, r0, #1106	; 0x452
    8614:	a34c      	add	r3, pc, #304	; (adr r3, 8748 <isr+0x590>)
    8616:	e9d3 2300 	ldrd	r2, r3, [r3]
    861a:	fba0 0101 	umull	r0, r1, r0, r1
    861e:	f7f7 fe23 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8622:	f8db 577c 	ldr.w	r5, [fp, #1916]	; 0x77c
    8626:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    8628:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    862a:	429d      	cmp	r5, r3
    862c:	bf38      	it	cc
    862e:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    8630:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    8634:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    8636:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    8638:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    863a:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    863e:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    8640:	f002 fe5c 	bl	b2fc <radio_tmr_end_get>
    8644:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    8646:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    8648:	4641      	mov	r1, r8
		conn_offset_us +=
    864a:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    864e:	4640      	mov	r0, r8
    8650:	f002 fc67 	bl	af22 <radio_tx_chain_delay_get>
    8654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8656:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    865a:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    865c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    865e:	ebaa 0a00 	sub.w	sl, sl, r0
    8662:	ebaa 0303 	sub.w	r3, sl, r3
    8666:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8668:	f44f 63a3 	mov.w	r3, #1304	; 0x518
    866c:	9300      	str	r3, [sp, #0]
    866e:	2205      	movs	r2, #5
    8670:	4b3d      	ldr	r3, [pc, #244]	; (8768 <isr+0x5b0>)
    8672:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8764 <isr+0x5ac>
    8676:	4641      	mov	r1, r8
    8678:	4640      	mov	r0, r8
    867a:	f7fc f93d 	bl	48f8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    867e:	f240 5119 	movw	r1, #1305	; 0x519
    8682:	f7fd feb7 	bl	63f4 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    8686:	f81b 3009 	ldrb.w	r3, [fp, r9]
    868a:	f003 030f 	and.w	r3, r3, #15
    868e:	2b01      	cmp	r3, #1
    8690:	d107      	bne.n	86a2 <isr+0x4ea>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8692:	f8cd 8000 	str.w	r8, [sp]
    8696:	4643      	mov	r3, r8
    8698:	2203      	movs	r2, #3
    869a:	4641      	mov	r1, r8
    869c:	4640      	mov	r0, r8
    869e:	f7fc f92b 	bl	48f8 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    86a2:	fba6 670a 	umull	r6, r7, r6, sl
    86a6:	a328      	add	r3, pc, #160	; (adr r3, 8748 <isr+0x590>)
    86a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    86ac:	4630      	mov	r0, r6
    86ae:	4639      	mov	r1, r7
    86b0:	f7f7 fdda 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86b4:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    86b8:	4a2c      	ldr	r2, [pc, #176]	; (876c <isr+0x5b4>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86ba:	eba3 0b05 	sub.w	fp, r3, r5
    86be:	f894 3020 	ldrb.w	r3, [r4, #32]
    86c2:	9406      	str	r4, [sp, #24]
    86c4:	3307      	adds	r3, #7
    86c6:	b2db      	uxtb	r3, r3
    86c8:	930b      	str	r3, [sp, #44]	; 0x2c
    86ca:	f44f 63a6 	mov.w	r3, #1328	; 0x530
    86ce:	9308      	str	r3, [sp, #32]
    86d0:	4b27      	ldr	r3, [pc, #156]	; (8770 <isr+0x5b8>)
    86d2:	9307      	str	r3, [sp, #28]
    86d4:	4b27      	ldr	r3, [pc, #156]	; (8774 <isr+0x5bc>)
    86d6:	9305      	str	r3, [sp, #20]
    86d8:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    86da:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86dc:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    86de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    86e2:	2307      	movs	r3, #7
    86e4:	2100      	movs	r1, #0
    86e6:	4343      	muls	r3, r0
    86e8:	fb02 3301 	mla	r3, r2, r1, r3
    86ec:	fba0 0102 	umull	r0, r1, r0, r2
    86f0:	1a30      	subs	r0, r6, r0
    86f2:	4419      	add	r1, r3
    86f4:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86f8:	2400      	movs	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    86fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    86fe:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8700:	9504      	str	r5, [sp, #16]
    8702:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    8704:	f7f7 fdb0 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    8708:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    870a:	9002      	str	r0, [sp, #8]
    870c:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    8710:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    8712:	fba1 010a 	umull	r0, r1, r1, sl
    8716:	a30c      	add	r3, pc, #48	; (adr r3, 8748 <isr+0x590>)
    8718:	e9d3 2300 	ldrd	r2, r3, [r3]
    871c:	f7f7 fda4 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8720:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8724:	9000      	str	r0, [sp, #0]
    8726:	465b      	mov	r3, fp
    8728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    872a:	4621      	mov	r1, r4
    872c:	4620      	mov	r0, r4
    872e:	f7fc f845 	bl	47bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8732:	f030 0302 	bics.w	r3, r0, #2
    8736:	f43f adc4 	beq.w	82c2 <isr+0x10a>
    873a:	4a06      	ldr	r2, [pc, #24]	; (8754 <isr+0x59c>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    873c:	490e      	ldr	r1, [pc, #56]	; (8778 <isr+0x5c0>)
    873e:	e706      	b.n	854e <isr+0x396>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    8740:	72c3      	strb	r3, [r0, #11]
    8742:	e736      	b.n	85b2 <isr+0x3fa>
    8744:	f3af 8000 	nop.w
    8748:	1afd498d 	.word	0x1afd498d
    874c:	00000007 	.word	0x00000007
    8750:	026259ff 	.word	0x026259ff
    8754:	0000e1d2 	.word	0x0000e1d2
    8758:	0000e8a4 	.word	0x0000e8a4
    875c:	0000e6a6 	.word	0x0000e6a6
    8760:	000f4240 	.word	0x000f4240
    8764:	3b9aca00 	.word	0x3b9aca00
    8768:	000063f5 	.word	0x000063f5
    876c:	1afd498d 	.word	0x1afd498d
    8770:	000063d1 	.word	0x000063d1
    8774:	00007f11 	.word	0x00007f11
    8778:	0000e56e 	.word	0x0000e56e
		if (crc_ok &&
    877c:	2f00      	cmp	r7, #0
    877e:	f000 827b 	beq.w	8c78 <isr+0xac0>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    8782:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    8786:	06d8      	lsls	r0, r3, #27
    8788:	d502      	bpl.n	8790 <isr+0x5d8>
		if (crc_ok &&
    878a:	2c00      	cmp	r4, #0
    878c:	f000 8274 	beq.w	8c78 <isr+0xac0>
	bool dir_report = false;
    8790:	2300      	movs	r3, #0
    8792:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    8796:	f89b 2739 	ldrb.w	r2, [fp, #1849]	; 0x739
    879a:	f8db 3734 	ldr.w	r3, [fp, #1844]	; 0x734
    879e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    87a2:	7a3b      	ldrb	r3, [r7, #8]
    87a4:	f003 030f 	and.w	r3, r3, #15
    87a8:	2b07      	cmp	r3, #7
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    87aa:	f107 0408 	add.w	r4, r7, #8
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    87ae:	d143      	bne.n	8838 <isr+0x680>
		if(h->adv_addr){
    87b0:	7afb      	ldrb	r3, [r7, #11]
    87b2:	07d9      	lsls	r1, r3, #31
			ptr += BDADDR_SIZE;
    87b4:	bf4c      	ite	mi
    87b6:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    87ba:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
    87be:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    87c0:	bf48      	it	mi
    87c2:	3606      	addmi	r6, #6
		if(h->adi){
    87c4:	0718      	lsls	r0, r3, #28
			ptr += sizeof(*adi_ptr);
    87c6:	bf48      	it	mi
    87c8:	3602      	addmi	r6, #2
		if(h->aux_ptr && !aux_scan ){
    87ca:	06d9      	lsls	r1, r3, #27
    87cc:	d534      	bpl.n	8838 <isr+0x680>
    87ce:	4bc2      	ldr	r3, [pc, #776]	; (8ad8 <isr+0x920>)
    87d0:	781a      	ldrb	r2, [r3, #0]
    87d2:	2a00      	cmp	r2, #0
    87d4:	d130      	bne.n	8838 <isr+0x680>
			aux_scan = 0x01;
    87d6:	2201      	movs	r2, #1
    87d8:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
    87da:	7833      	ldrb	r3, [r6, #0]
    87dc:	f3c3 0305 	ubfx	r3, r3, #0, #6
    87e0:	f88b 36a8 	strb.w	r3, [fp, #1704]	; 0x6a8
			_radio.ext_scanner.chan_off	= ap->offs;
    87e4:	78b3      	ldrb	r3, [r6, #2]
    87e6:	7872      	ldrb	r2, [r6, #1]
    87e8:	f003 031f 	and.w	r3, r3, #31
    87ec:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    87f0:	4bba      	ldr	r3, [pc, #744]	; (8adc <isr+0x924>)
    87f2:	b290      	uxth	r0, r2
    87f4:	2100      	movs	r1, #0
    87f6:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
    87fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    87fe:	7831      	ldrb	r1, [r6, #0]
    8800:	f3c1 11c0 	ubfx	r1, r1, #7, #1
			if(_radio.ext_scanner.off_unit == 0 ){
    8804:	f011 0fff 	tst.w	r1, #255	; 0xff
			_radio.ext_scanner.off_unit	= ap->offs_units;
    8808:	f88b 16cc 	strb.w	r1, [fp, #1740]	; 0x6cc
    880c:	4619      	mov	r1, r3
				_radio.ext_scanner.chan_off *= 30;
    880e:	bf0c      	ite	eq
    8810:	231e      	moveq	r3, #30
				_radio.ext_scanner.chan_off *= 300;
    8812:	f44f 7396 	movne.w	r3, #300	; 0x12c
    8816:	fba2 2303 	umull	r2, r3, r2, r3
    881a:	e9c1 2300 	strd	r2, r3, [r1]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    881e:	e9d1 0100 	ldrd	r0, r1, [r1]
    8822:	4baf      	ldr	r3, [pc, #700]	; (8ae0 <isr+0x928>)
    8824:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
    8828:	f7f9 fbdc 	bl	1fe4 <_timer_cycle_get_32>
    882c:	4bad      	ldr	r3, [pc, #692]	; (8ae4 <isr+0x92c>)
    882e:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
    8830:	f7fc f932 	bl	4a98 <ticker_ticks_now_get>
    8834:	f8cb 0704 	str.w	r0, [fp, #1796]	; 0x704
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    8838:	f8db 3674 	ldr.w	r3, [fp, #1652]	; 0x674
    883c:	2b00      	cmp	r3, #0
    883e:	f000 80d0 	beq.w	89e2 <isr+0x82a>
    8842:	f89b 377a 	ldrb.w	r3, [fp, #1914]	; 0x77a
    8846:	b133      	cbz	r3, 8856 <isr+0x69e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    8848:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    884c:	f89b 2779 	ldrb.w	r2, [fp, #1913]	; 0x779
    8850:	429a      	cmp	r2, r3
    8852:	f040 80c6 	bne.w	89e2 <isr+0x82a>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    8856:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    885a:	06da      	lsls	r2, r3, #27
    885c:	f140 80b1 	bpl.w	89c2 <isr+0x80a>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8860:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    8862:	f013 030f 	ands.w	r3, r3, #15
    8866:	f040 8116 	bne.w	8a96 <isr+0x8de>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    886a:	f002 fd47 	bl	b2fc <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    886e:	f8db 3648 	ldr.w	r3, [fp, #1608]	; 0x648
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    8872:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    8876:	489c      	ldr	r0, [pc, #624]	; (8ae8 <isr+0x930>)
    8878:	2207      	movs	r2, #7
    887a:	fba3 0100 	umull	r0, r1, r3, r0
    887e:	fb02 1103 	mla	r1, r2, r3, r1
    8882:	a393      	add	r3, pc, #588	; (adr r3, 8ad0 <isr+0x918>)
    8884:	e9d3 2300 	ldrd	r2, r3, [r3]
    8888:	f7f7 fcee 	bl	268 <__aeabi_uldivmod>
    888c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    8890:	4286      	cmp	r6, r0
    8892:	f080 80a6 	bcs.w	89e2 <isr+0x82a>
			node_rx = packet_rx_reserve_get(4);
    8896:	2004      	movs	r0, #4
    8898:	f7fd f8dc 	bl	5a54 <packet_rx_reserve_get>
		if (node_rx == 0) {
    889c:	4682      	mov	sl, r0
    889e:	2800      	cmp	r0, #0
    88a0:	f000 81ea 	beq.w	8c78 <isr+0xac0>
		_radio.state = STATE_STOP;
    88a4:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    88a6:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    88a8:	f8db 4674 	ldr.w	r4, [fp, #1652]	; 0x674
		_radio.state = STATE_STOP;
    88ac:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    88b0:	f8cb 3674 	str.w	r3, [fp, #1652]	; 0x674
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    88b4:	f002 fba0 	bl	aff8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    88b8:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    88ba:	498c      	ldr	r1, [pc, #560]	; (8aec <isr+0x934>)
			pdu_adv_tx->chan_sel = 1;
    88bc:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    88c0:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    88c4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    88c6:	7a3a      	ldrb	r2, [r7, #8]
    88c8:	b2db      	uxtb	r3, r3
    88ca:	f3c2 1280 	ubfx	r2, r2, #6, #1
    88ce:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    88d2:	2222      	movs	r2, #34	; 0x22
    88d4:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    88d6:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    88da:	09d2      	lsrs	r2, r2, #7
    88dc:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    88e0:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    88e2:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    88e4:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    88e8:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    88ec:	f7f7 fe95 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    88f0:	2206      	movs	r2, #6
    88f2:	f107 010a 	add.w	r1, r7, #10
    88f6:	4648      	mov	r0, r9
    88f8:	f7f7 fe8f 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    88fc:	4632      	mov	r2, r6
    88fe:	f104 0110 	add.w	r1, r4, #16
    8902:	f105 000e 	add.w	r0, r5, #14
    8906:	f7f7 fe88 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    890a:	2203      	movs	r2, #3
    890c:	f104 0114 	add.w	r1, r4, #20
    8910:	f105 0012 	add.w	r0, r5, #18
    8914:	f7f7 fe81 	bl	61a <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    8918:	2301      	movs	r3, #1
    891a:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    891c:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
		conn_interval_us =
    8920:	f240 46e2 	movw	r6, #1250	; 0x4e2
    8924:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    8926:	f002 fce9 	bl	b2fc <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    892a:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    892e:	f8db 8678 	ldr.w	r8, [fp, #1656]	; 0x678
		if (!_radio.remainder_anchor ||
    8932:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    8934:	bfcc      	ite	gt
    8936:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    893a:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    893e:	f1b8 0f00 	cmp.w	r8, #0
    8942:	f040 80b2 	bne.w	8aaa <isr+0x8f2>
			pdu_adv_tx->connect_ind.win_offset = 0;
    8946:	f885 8016 	strb.w	r8, [r5, #22]
    894a:	f885 8017 	strb.w	r8, [r5, #23]
    894e:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    8950:	2100      	movs	r1, #0
    8952:	4608      	mov	r0, r1
    8954:	f002 fae0 	bl	af18 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    8958:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    895a:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    895e:	4608      	mov	r0, r1
    8960:	f002 fadf 	bl	af22 <radio_tx_chain_delay_get>
    8964:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    8968:	f100 031e 	add.w	r3, r0, #30
    896c:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    896e:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
    8972:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    8974:	f8bb 366a 	ldrh.w	r3, [fp, #1642]	; 0x66a
    8978:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    897a:	f8bb 366c 	ldrh.w	r3, [fp, #1644]	; 0x66c
    897e:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    8980:	f104 0117 	add.w	r1, r4, #23
    8984:	2205      	movs	r2, #5
    8986:	f105 001e 	add.w	r0, r5, #30
    898a:	f7f7 fe46 	bl	61a <memcpy>
		pdu_adv_tx->connect_ind.hop =
    898e:	7fa2      	ldrb	r2, [r4, #30]
    8990:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    8994:	f362 0304 	bfi	r3, r2, #0, #5
    8998:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    899c:	f89b 2720 	ldrb.w	r2, [fp, #1824]	; 0x720
    89a0:	f362 1347 	bfi	r3, r2, #5, #3
    89a4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    89a8:	f002 fb40 	bl	b02c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    89ac:	4628      	mov	r0, r5
    89ae:	f002 faad 	bl	af0c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    89b2:	f002 fae9 	bl	af88 <radio_is_ready>
    89b6:	4680      	mov	r8, r0
    89b8:	2800      	cmp	r0, #0
    89ba:	f000 809d 	beq.w	8af8 <isr+0x940>
		LL_ASSERT(!radio_is_ready());
    89be:	4a4c      	ldr	r2, [pc, #304]	; (8af0 <isr+0x938>)
    89c0:	e44e      	b.n	8260 <isr+0xa8>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    89c2:	7a3a      	ldrb	r2, [r7, #8]
    89c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    89c8:	f3c2 1280 	ubfx	r2, r2, #6, #1
    89cc:	4293      	cmp	r3, r2
    89ce:	d108      	bne.n	89e2 <isr+0x82a>
		(memcmp(&_radio.scanner.adv_addr[0],
    89d0:	2206      	movs	r2, #6
    89d2:	f107 010a 	add.w	r1, r7, #10
    89d6:	4847      	ldr	r0, [pc, #284]	; (8af4 <isr+0x93c>)
    89d8:	f7f7 fe0a 	bl	5f0 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    89dc:	2800      	cmp	r0, #0
    89de:	f43f af3f 	beq.w	8860 <isr+0x6a8>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    89e2:	7a3b      	ldrb	r3, [r7, #8]
    89e4:	f013 030f 	ands.w	r3, r3, #15
    89e8:	d002      	beq.n	89f0 <isr+0x838>
    89ea:	2b06      	cmp	r3, #6
    89ec:	f040 8151 	bne.w	8c92 <isr+0xada>
		 (_radio.scanner.type != 0) &&
    89f0:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    89f4:	0716      	lsls	r6, r2, #28
    89f6:	f140 813b 	bpl.w	8c70 <isr+0xab8>
		 (_radio.scanner.type != 0) &&
    89fa:	f8db 2674 	ldr.w	r2, [fp, #1652]	; 0x674
    89fe:	2a00      	cmp	r2, #0
    8a00:	f040 8136 	bne.w	8c70 <isr+0xab8>
		err = isr_rx_scan_report(rssi_ready,
    8a04:	4628      	mov	r0, r5
    8a06:	f7fe f95d 	bl	6cc4 <isr_rx_scan_report.isra.37>
		if (err) {
    8a0a:	2800      	cmp	r0, #0
    8a0c:	f040 8134 	bne.w	8c78 <isr+0xac0>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    8a10:	7a3b      	ldrb	r3, [r7, #8]
    8a12:	f003 030f 	and.w	r3, r3, #15
    8a16:	2b07      	cmp	r3, #7
    8a18:	d101      	bne.n	8a1e <isr+0x866>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8a1a:	f002 faed 	bl	aff8 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8a1e:	f002 faeb 	bl	aff8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    8a22:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8a24:	4931      	ldr	r1, [pc, #196]	; (8aec <isr+0x934>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    8a26:	2503      	movs	r5, #3
    8a28:	f365 0303 	bfi	r3, r5, #0, #4
    8a2c:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8a2e:	7a3a      	ldrb	r2, [r7, #8]
    8a30:	b2db      	uxtb	r3, r3
    8a32:	f3c2 1280 	ubfx	r2, r2, #6, #1
    8a36:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    8a3a:	220c      	movs	r2, #12
    8a3c:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8a3e:	f89b 264d 	ldrb.w	r2, [fp, #1613]	; 0x64d
    8a42:	09d2      	lsrs	r2, r2, #7
    8a44:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    8a48:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8a4a:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    8a4c:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    8a50:	f7f7 fde3 	bl	61a <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    8a54:	2206      	movs	r2, #6
    8a56:	f107 010a 	add.w	r1, r7, #10
    8a5a:	f104 0008 	add.w	r0, r4, #8
    8a5e:	f7f7 fddc 	bl	61a <memcpy>
		_radio.scanner.state = 1;
    8a62:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    8a66:	f043 0302 	orr.w	r3, r3, #2
    8a6a:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
		radio_tmr_tifs_set(RADIO_TIFS);
    8a6e:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    8a70:	2302      	movs	r3, #2
    8a72:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    8a76:	f002 fb53 	bl	b120 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    8a7a:	2000      	movs	r0, #0
    8a7c:	f002 fac0 	bl	b000 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    8a80:	4620      	mov	r0, r4
    8a82:	f002 fa43 	bl	af0c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    8a86:	f002 fc27 	bl	b2d8 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    8a8a:	f002 fa7d 	bl	af88 <radio_is_ready>
    8a8e:	2800      	cmp	r0, #0
    8a90:	f43f ac17 	beq.w	82c2 <isr+0x10a>
    8a94:	e793      	b.n	89be <isr+0x806>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    8a96:	2b01      	cmp	r3, #1
    8a98:	d1a7      	bne.n	89ea <isr+0x832>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    8a9a:	2100      	movs	r1, #0
    8a9c:	4620      	mov	r0, r4
    8a9e:	f7fe f84b 	bl	6b38 <isr_scan_tgta_check.isra.29>
				      (_radio.fc_req == _radio.fc_ack)) &&
    8aa2:	2800      	cmp	r0, #0
    8aa4:	d09d      	beq.n	89e2 <isr+0x82a>
    8aa6:	e6e0      	b.n	886a <isr+0x6b2>
				conn_space_us += conn_interval_us;
    8aa8:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    8aaa:	f1b8 0f00 	cmp.w	r8, #0
    8aae:	dbfb      	blt.n	8aa8 <isr+0x8f0>
    8ab0:	4580      	cmp	r8, r0
    8ab2:	d3f9      	bcc.n	8aa8 <isr+0x8f0>
			pdu_adv_tx->connect_ind.win_offset =
    8ab4:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    8ab8:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    8abc:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    8ac0:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    8ac2:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    8ac4:	3301      	adds	r3, #1
    8ac6:	756b      	strb	r3, [r5, #21]
    8ac8:	e742      	b.n	8950 <isr+0x798>
    8aca:	bf00      	nop
    8acc:	f3af 8000 	nop.w
    8ad0:	3b9aca00 	.word	0x3b9aca00
    8ad4:	00000000 	.word	0x00000000
    8ad8:	20001180 	.word	0x20001180
    8adc:	200010a8 	.word	0x200010a8
    8ae0:	200010b8 	.word	0x200010b8
    8ae4:	20002d04 	.word	0x20002d04
    8ae8:	1afd498d 	.word	0x1afd498d
    8aec:	20001046 	.word	0x20001046
    8af0:	0000e1f0 	.word	0x0000e1f0
    8af4:	2000104c 	.word	0x2000104c
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8af8:	f44f 7282 	mov.w	r2, #260	; 0x104
    8afc:	f8db 1708 	ldr.w	r1, [fp, #1800]	; 0x708
    8b00:	4620      	mov	r0, r4
    8b02:	f7fb f820 	bl	3b46 <mem_index_get>
    8b06:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    8b08:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    8b0c:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    8b10:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    8b12:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b16:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    8b18:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8b1c:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8b20:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    8b22:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    8b26:	f10a 000e 	add.w	r0, sl, #14
    8b2a:	f7f7 fd76 	bl	61a <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    8b2e:	f8bb 3668 	ldrh.w	r3, [fp, #1640]	; 0x668
    8b32:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    8b36:	f8bb 366a 	ldrh.w	r3, [fp, #1642]	; 0x66a
    8b3a:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    8b3e:	f8bb 366c 	ldrh.w	r3, [fp, #1644]	; 0x66c
    8b42:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    8b46:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    8b4a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    8b4e:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    8b52:	8c20      	ldrh	r0, [r4, #32]
    8b54:	f7fd fc22 	bl	639c <rx_fc_lock>
		packet_rx_enqueue();
    8b58:	f7fe f81e 	bl	6b98 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    8b5c:	2003      	movs	r0, #3
    8b5e:	f7fc ff79 	bl	5a54 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    8b62:	b908      	cbnz	r0, 8b68 <isr+0x9b0>
    8b64:	4ab4      	ldr	r2, [pc, #720]	; (8e38 <isr+0xc80>)
    8b66:	e4f1      	b.n	854c <isr+0x394>
			node_rx->hdr.handle = conn->handle;
    8b68:	8c23      	ldrh	r3, [r4, #32]
    8b6a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    8b6c:	230a      	movs	r3, #10
    8b6e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    8b70:	7a3b      	ldrb	r3, [r7, #8]
    8b72:	f013 0320 	ands.w	r3, r3, #32
    8b76:	d00e      	beq.n	8b96 <isr+0x9de>
					((u16_t)conn->access_addr[1] << 8) |
    8b78:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    8b7a:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    8b7c:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    8b7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    8b82:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    8b84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    8b88:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    8b8a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    8b8c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    8b90:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    8b92:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    8b94:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    8b96:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    8b98:	f7fd fffe 	bl	6b98 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8b9c:	f8db 377c 	ldr.w	r3, [fp, #1916]	; 0x77c
    8ba0:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    8ba2:	2b27      	cmp	r3, #39	; 0x27
    8ba4:	bf38      	it	cc
    8ba6:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8ba8:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8baa:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    8bac:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    8bae:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    8bb0:	f8db 2670 	ldr.w	r2, [fp, #1648]	; 0x670
    8bb4:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bb6:	f240 735d 	movw	r3, #1885	; 0x75d
    8bba:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    8bbc:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bbe:	4629      	mov	r1, r5
    8bc0:	9300      	str	r3, [sp, #0]
    8bc2:	4628      	mov	r0, r5
    8bc4:	4b9d      	ldr	r3, [pc, #628]	; (8e3c <isr+0xc84>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8bc6:	f8df a288 	ldr.w	sl, [pc, #648]	; 8e50 <isr+0xc98>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bca:	f7fb fe95 	bl	48f8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    8bce:	f240 715e 	movw	r1, #1886	; 0x75e
    8bd2:	f7fd fc33 	bl	643c <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bd6:	462b      	mov	r3, r5
    8bd8:	2204      	movs	r2, #4
    8bda:	4629      	mov	r1, r5
    8bdc:	9500      	str	r5, [sp, #0]
    8bde:	4628      	mov	r0, r5
    8be0:	f7fb fe8a 	bl	48f8 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8be4:	f8db 3008 	ldr.w	r3, [fp, #8]
    8be8:	f894 9020 	ldrb.w	r9, [r4, #32]
		ticker_status =
    8bec:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8bee:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    8bf2:	f240 7375 	movw	r3, #1909	; 0x775
    8bf6:	9308      	str	r3, [sp, #32]
    8bf8:	4b91      	ldr	r3, [pc, #580]	; (8e40 <isr+0xc88>)
    8bfa:	9307      	str	r3, [sp, #28]
    8bfc:	4b91      	ldr	r3, [pc, #580]	; (8e44 <isr+0xc8c>)
    8bfe:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c00:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    8c02:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c04:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c08:	4443      	add	r3, r8
		ticker_status =
    8c0a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    8c0c:	4630      	mov	r0, r6
    8c0e:	a388      	add	r3, pc, #544	; (adr r3, 8e30 <isr+0xc78>)
    8c10:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c14:	4639      	mov	r1, r7
    8c16:	f7f7 fb27 	bl	268 <__aeabi_uldivmod>
    8c1a:	4610      	mov	r0, r2
    8c1c:	4619      	mov	r1, r3
    8c1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c22:	2300      	movs	r3, #0
    8c24:	f7f7 fb20 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c28:	a381      	add	r3, pc, #516	; (adr r3, 8e30 <isr+0xc78>)
    8c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c2e:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c30:	4639      	mov	r1, r7
    8c32:	4630      	mov	r0, r6
    8c34:	f7f7 fb18 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    8c38:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8c3a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    8c3c:	a37c      	add	r3, pc, #496	; (adr r3, 8e30 <isr+0xc78>)
    8c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c42:	fba1 010a 	umull	r0, r1, r1, sl
    8c46:	f7f7 fb0f 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c4a:	f109 0907 	add.w	r9, r9, #7
    8c4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    8c52:	fa5f f989 	uxtb.w	r9, r9
    8c56:	9000      	str	r0, [sp, #0]
    8c58:	465b      	mov	r3, fp
    8c5a:	464a      	mov	r2, r9
    8c5c:	4629      	mov	r1, r5
    8c5e:	4628      	mov	r0, r5
    8c60:	f7fb fdac 	bl	47bc <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8c64:	f030 0302 	bics.w	r3, r0, #2
    8c68:	f43f ab2b 	beq.w	82c2 <isr+0x10a>
    8c6c:	4a72      	ldr	r2, [pc, #456]	; (8e38 <isr+0xc80>)
    8c6e:	e565      	b.n	873c <isr+0x584>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8c70:	b97b      	cbnz	r3, 8c92 <isr+0xada>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    8c72:	7a7b      	ldrb	r3, [r7, #9]
    8c74:	2b00      	cmp	r3, #0
    8c76:	d13b      	bne.n	8cf0 <isr+0xb38>
			_radio.state = STATE_CLOSE;
    8c78:	2303      	movs	r3, #3
    8c7a:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    8c7e:	f002 f965 	bl	af4c <radio_disable>
			_radio.scanner.state = 0;
    8c82:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
    8c86:	f36f 0341 	bfc	r3, #1, #1
    8c8a:	f88b 364c 	strb.w	r3, [fp, #1612]	; 0x64c
    8c8e:	f7ff bb18 	b.w	82c2 <isr+0x10a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8c92:	2b01      	cmp	r3, #1
    8c94:	d00d      	beq.n	8cb2 <isr+0xafa>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8c96:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    8c98:	f003 020b 	and.w	r2, r3, #11
    8c9c:	2a02      	cmp	r2, #2
    8c9e:	d0e8      	beq.n	8c72 <isr+0xaba>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    8ca0:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    8ca4:	2b07      	cmp	r3, #7
    8ca6:	d10b      	bne.n	8cc0 <isr+0xb08>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    8ca8:	f89b 364d 	ldrb.w	r3, [fp, #1613]	; 0x64d
    8cac:	075c      	lsls	r4, r3, #29
    8cae:	d1e0      	bne.n	8c72 <isr+0xaba>
    8cb0:	e7e2      	b.n	8c78 <isr+0xac0>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    8cb2:	a90d      	add	r1, sp, #52	; 0x34
    8cb4:	4620      	mov	r0, r4
    8cb6:	f7fd ff3f 	bl	6b38 <isr_scan_tgta_check.isra.29>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    8cba:	2800      	cmp	r0, #0
    8cbc:	d1d9      	bne.n	8c72 <isr+0xaba>
    8cbe:	e7ea      	b.n	8c96 <isr+0xade>
		   (_radio.scanner.phy)) ||
    8cc0:	2b04      	cmp	r3, #4
    8cc2:	d1d9      	bne.n	8c78 <isr+0xac0>
		   (_radio.scanner.state != 0) &&
    8cc4:	f89b 364c 	ldrb.w	r3, [fp, #1612]	; 0x64c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    8cc8:	0798      	lsls	r0, r3, #30
    8cca:	d5d5      	bpl.n	8c78 <isr+0xac0>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    8ccc:	f002 f994 	bl	aff8 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    8cd0:	7a3b      	ldrb	r3, [r7, #8]
    8cd2:	7802      	ldrb	r2, [r0, #0]
    8cd4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8cd8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8cdc:	d1cc      	bne.n	8c78 <isr+0xac0>
		(memcmp(&sreq->scan_req.adv_addr[0],
    8cde:	2206      	movs	r2, #6
    8ce0:	f107 010a 	add.w	r1, r7, #10
    8ce4:	3008      	adds	r0, #8
    8ce6:	f7f7 fc83 	bl	5f0 <memcmp>
		   (_radio.scanner.state != 0) &&
    8cea:	2800      	cmp	r0, #0
    8cec:	d0c1      	beq.n	8c72 <isr+0xaba>
    8cee:	e7c3      	b.n	8c78 <isr+0xac0>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    8cf0:	f8db 3674 	ldr.w	r3, [fp, #1652]	; 0x674
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d1bf      	bne.n	8c78 <isr+0xac0>
		err = isr_rx_scan_report(rssi_ready,
    8cf8:	4628      	mov	r0, r5
    8cfa:	f7fd ffe3 	bl	6cc4 <isr_rx_scan_report.isra.37>
    8cfe:	e7bb      	b.n	8c78 <isr+0xac0>
	_radio.packet_counter++;
    8d00:	f89b 3718 	ldrb.w	r3, [fp, #1816]	; 0x718
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8d04:	f89b 2739 	ldrb.w	r2, [fp, #1849]	; 0x739
	_radio.packet_counter++;
    8d08:	3301      	adds	r3, #1
    8d0a:	f88b 3718 	strb.w	r3, [fp, #1816]	; 0x718
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8d0e:	f8db 3734 	ldr.w	r3, [fp, #1844]	; 0x734
    8d12:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    8d16:	2301      	movs	r3, #1
    8d18:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    8d1a:	2f00      	cmp	r7, #0
    8d1c:	f000 838d 	beq.w	943a <isr+0x1282>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8d20:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8d24:	7a30      	ldrb	r0, [r6, #8]
    8d26:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8d2a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    8d2e:	f002 0101 	and.w	r1, r2, #1
    8d32:	4288      	cmp	r0, r1
    8d34:	f000 80c6 	beq.w	8ec4 <isr+0xd0c>
		_radio.conn_curr->sn++;
    8d38:	f081 0101 	eor.w	r1, r1, #1
    8d3c:	f361 0200 	bfi	r2, r1, #0, #1
    8d40:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    8d44:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8d48:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    8d4a:	bf02      	ittt	eq
    8d4c:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    8d50:	f042 0201 	orreq.w	r2, r2, #1
    8d54:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    8d58:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8d5c:	0611      	lsls	r1, r2, #24
    8d5e:	f100 80ad 	bmi.w	8ebc <isr+0xd04>
			node_tx = _radio.conn_curr->pkt_tx_head;
    8d62:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    8d66:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    8d6a:	f108 0c04 	add.w	ip, r8, #4
    8d6e:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    8d72:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    8d74:	b90c      	cbnz	r4, 8d7a <isr+0xbc2>
	u8_t terminate = 0;
    8d76:	2500      	movs	r5, #0
    8d78:	e029      	b.n	8dce <isr+0xc16>
				if (_radio.conn_curr->enc_tx) {
    8d7a:	0692      	lsls	r2, r2, #26
    8d7c:	d50a      	bpl.n	8d94 <isr+0xbdc>
					_radio.conn_curr->ccm_tx.counter++;
    8d7e:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    8d82:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    8d86:	3001      	adds	r0, #1
    8d88:	f141 0100 	adc.w	r1, r1, #0
    8d8c:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    8d90:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    8d94:	f81c 900e 	ldrb.w	r9, [ip, lr]
    8d98:	f009 0903 	and.w	r9, r9, #3
    8d9c:	f1b9 0f03 	cmp.w	r9, #3
    8da0:	d1e9      	bne.n	8d76 <isr+0xbbe>
	switch (pdu_data_tx->llctrl.opcode) {
    8da2:	78eb      	ldrb	r3, [r5, #3]
    8da4:	2b02      	cmp	r3, #2
    8da6:	d1e6      	bne.n	8d76 <isr+0xbbe>
		_radio.state = STATE_CLOSE;
    8da8:	f88b 9014 	strb.w	r9, [fp, #20]
		radio_disable();
    8dac:	f002 f8ce 	bl	af4c <radio_disable>
		LL_ASSERT(!radio_is_ready());
    8db0:	f002 f8ea 	bl	af88 <radio_is_ready>
    8db4:	b110      	cbz	r0, 8dbc <isr+0xc04>
    8db6:	4a24      	ldr	r2, [pc, #144]	; (8e48 <isr+0xc90>)
    8db8:	f7ff ba52 	b.w	8260 <isr+0xa8>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    8dbc:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    8dbe:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    8dc2:	2913      	cmp	r1, #19
    8dc4:	bf08      	it	eq
    8dc6:	2116      	moveq	r1, #22
    8dc8:	f7fd ff48 	bl	6c5c <terminate_ind_rx_enqueue>
		terminate = 1;
    8dcc:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8dce:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8dd2:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8dd6:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8dda:	4422      	add	r2, r4
    8ddc:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    8dde:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8de0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8de4:	d11e      	bne.n	8e24 <isr+0xc6c>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8de6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    8dea:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    8dee:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8df0:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    8df2:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    8df6:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8dfa:	d12b      	bne.n	8e54 <isr+0xc9c>
		if (node_tx) {
    8dfc:	f1b8 0f00 	cmp.w	r8, #0
    8e00:	d010      	beq.n	8e24 <isr+0xc6c>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8e02:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    8e06:	6814      	ldr	r4, [r2, #0]
    8e08:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8e0c:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    8e0e:	bf06      	itte	eq
    8e10:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    8e14:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    8e18:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    8e1c:	490b      	ldr	r1, [pc, #44]	; (8e4c <isr+0xc94>)
    8e1e:	4640      	mov	r0, r8
    8e20:	f7fa fe79 	bl	3b16 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    8e24:	f04f 0800 	mov.w	r8, #0
    8e28:	e01d      	b.n	8e66 <isr+0xcae>
    8e2a:	bf00      	nop
    8e2c:	f3af 8000 	nop.w
    8e30:	1afd498d 	.word	0x1afd498d
    8e34:	00000007 	.word	0x00000007
    8e38:	0000e1f0 	.word	0x0000e1f0
    8e3c:	0000643d 	.word	0x0000643d
    8e40:	000063d1 	.word	0x000063d1
    8e44:	00007f0d 	.word	0x00007f0d
    8e48:	0000e1fc 	.word	0x0000e1fc
    8e4c:	2000114c 	.word	0x2000114c
    8e50:	3b9aca00 	.word	0x3b9aca00
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    8e54:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    8e58:	428a      	cmp	r2, r1
    8e5a:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    8e5c:	bf08      	it	eq
    8e5e:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    8e62:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    8e66:	b37d      	cbz	r5, 8ec8 <isr+0xd10>
		connection_release(_radio.conn_curr);
    8e68:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    8e6c:	f7fd fcae 	bl	67cc <connection_release>
		_radio.conn_curr = NULL;
    8e70:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    8e72:	f8cb 5714 	str.w	r5, [fp, #1812]	; 0x714
	if (!radio_tmr_aa_restore()) {
    8e76:	f002 fa23 	bl	b2c0 <radio_tmr_aa_restore>
    8e7a:	b918      	cbnz	r0, 8e84 <isr+0xccc>
		radio_tmr_aa_save(radio_tmr_aa_get());
    8e7c:	f002 fa14 	bl	b2a8 <radio_tmr_aa_get>
    8e80:	f002 fa18 	bl	b2b4 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    8e84:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8e88:	2b00      	cmp	r3, #0
    8e8a:	f43f aa1a 	beq.w	82c2 <isr+0x10a>
	if (tx_release) {
    8e8e:	f1b8 0f00 	cmp.w	r8, #0
    8e92:	d003      	beq.n	8e9c <isr+0xce4>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    8e94:	4641      	mov	r1, r8
    8e96:	8c18      	ldrh	r0, [r3, #32]
    8e98:	f7fd fc18 	bl	66cc <pdu_node_tx_release>
	if (rx_enqueue) {
    8e9c:	2d00      	cmp	r5, #0
    8e9e:	f43f aa10 	beq.w	82c2 <isr+0x10a>
		rx_fc_lock(_radio.conn_curr->handle);
    8ea2:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8ea6:	8c18      	ldrh	r0, [r3, #32]
    8ea8:	f7fd fa78 	bl	639c <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    8eac:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8eb0:	8c1b      	ldrh	r3, [r3, #32]
    8eb2:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    8eb4:	f7fd fe70 	bl	6b98 <packet_rx_enqueue>
    8eb8:	f7ff ba03 	b.w	82c2 <isr+0x10a>
			_radio.conn_curr->empty = 0;
    8ebc:	f36f 12c7 	bfc	r2, #7, #1
    8ec0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8ec4:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8ec8:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8ecc:	7a32      	ldrb	r2, [r6, #8]
    8ece:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8ed2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    8ed6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    8eda:	429a      	cmp	r2, r3
    8edc:	d03c      	beq.n	8f58 <isr+0xda0>
	u8_t rx_enqueue = 0;
    8ede:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    8ee0:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
		_radio.crc_expire = 0;
    8ee4:	2400      	movs	r4, #0
    8ee6:	f88b 4719 	strb.w	r4, [fp, #1817]	; 0x719
		_radio.conn_curr->supervision_expire = 0;
    8eea:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8eec:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8ef0:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8ef2:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8ef6:	f7ff f8f7 	bl	80e8 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8efa:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8efe:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8f00:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8f04:	d013      	beq.n	8f2e <isr+0xd76>
    8f06:	2c00      	cmp	r4, #0
    8f08:	f040 82b0 	bne.w	946c <isr+0x12b4>
    8f0c:	b13f      	cbz	r7, 8f1e <isr+0xd66>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8f0e:	7a33      	ldrb	r3, [r6, #8]
    8f10:	06df      	lsls	r7, r3, #27
    8f12:	d404      	bmi.n	8f1e <isr+0xd66>
			 (pdu_data_tx->len == 0)) ||
    8f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8f16:	785b      	ldrb	r3, [r3, #1]
    8f18:	2b00      	cmp	r3, #0
    8f1a:	f000 82a7 	beq.w	946c <isr+0x12b4>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    8f1e:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
			 (pdu_data_tx->len == 0)) ||
    8f22:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8f26:	2b00      	cmp	r3, #0
    8f28:	bf0c      	ite	eq
    8f2a:	2302      	moveq	r3, #2
    8f2c:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    8f2e:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8f30:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    8f34:	f040 82b5 	bne.w	94a2 <isr+0x12ea>
		if (_radio.role == ROLE_MASTER) {
    8f38:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8f3c:	2b04      	cmp	r3, #4
    8f3e:	f040 8297 	bne.w	9470 <isr+0x12b8>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    8f42:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8f46:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8f4a:	f369 12c7 	bfi	r2, r9, #7, #1
    8f4e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    8f52:	f001 fffb 	bl	af4c <radio_disable>
    8f56:	e78e      	b.n	8e76 <isr+0xcbe>
	    (packet_rx_reserve_get(3) != 0) &&
    8f58:	2003      	movs	r0, #3
    8f5a:	f7fc fd7b 	bl	5a54 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8f5e:	2800      	cmp	r0, #0
    8f60:	d0bd      	beq.n	8ede <isr+0xd26>
	    (packet_rx_reserve_get(3) != 0) &&
    8f62:	f89b 377a 	ldrb.w	r3, [fp, #1914]	; 0x77a
    8f66:	b373      	cbz	r3, 8fc6 <isr+0xe0e>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8f68:	f8db 3744 	ldr.w	r3, [fp, #1860]	; 0x744
    8f6c:	f8db 2748 	ldr.w	r2, [fp, #1864]	; 0x748
	    ((_radio.fc_ena == 0) ||
    8f70:	4293      	cmp	r3, r2
    8f72:	d105      	bne.n	8f80 <isr+0xdc8>
	      (_radio.fc_req == _radio.fc_ack)) ||
    8f74:	f89b 2778 	ldrb.w	r2, [fp, #1912]	; 0x778
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8f78:	f89b 1779 	ldrb.w	r1, [fp, #1913]	; 0x779
    8f7c:	4291      	cmp	r1, r2
    8f7e:	d022      	beq.n	8fc6 <isr+0xe0e>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8f80:	f8db 2748 	ldr.w	r2, [fp, #1864]	; 0x748
	      (_radio.fc_req == _radio.fc_ack)) ||
    8f84:	4293      	cmp	r3, r2
    8f86:	d0aa      	beq.n	8ede <isr+0xd26>
	      (_radio.fc_req != _radio.fc_ack) &&
    8f88:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8f8c:	f89b 2779 	ldrb.w	r2, [fp, #1913]	; 0x779
    8f90:	429a      	cmp	r2, r3
    8f92:	d0a4      	beq.n	8ede <isr+0xd26>
		(((_radio.fc_req == 0) &&
    8f94:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
	      (_radio.fc_req != _radio.fc_ack) &&
    8f98:	b933      	cbnz	r3, 8fa8 <isr+0xdf0>
		   _radio.conn_curr->handle)) ||
    8f9a:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
		(((_radio.fc_req == 0) &&
    8f9e:	f8bb 2776 	ldrh.w	r2, [fp, #1910]	; 0x776
    8fa2:	8c1b      	ldrh	r3, [r3, #32]
    8fa4:	429a      	cmp	r2, r3
    8fa6:	d00e      	beq.n	8fc6 <isr+0xe0e>
		 ((_radio.fc_req != 0) &&
    8fa8:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
		   _radio.conn_curr->handle)) ||
    8fac:	2b00      	cmp	r3, #0
    8fae:	d096      	beq.n	8ede <isr+0xd26>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8fb0:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
		   _radio.conn_curr->handle)))))) {
    8fb4:	f8db 1714 	ldr.w	r1, [fp, #1812]	; 0x714
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8fb8:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    8fbc:	f8b3 2770 	ldrh.w	r2, [r3, #1904]	; 0x770
    8fc0:	8c0b      	ldrh	r3, [r1, #32]
    8fc2:	429a      	cmp	r2, r3
    8fc4:	d18b      	bne.n	8ede <isr+0xd26>
		if (pdu_data_rx->len != 0) {
    8fc6:	f896 9009 	ldrb.w	r9, [r6, #9]
    8fca:	f1b9 0f00 	cmp.w	r9, #0
    8fce:	f000 81f0 	beq.w	93b2 <isr+0x11fa>
			if (_radio.conn_curr->enc_rx) {
    8fd2:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8fd6:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    8fda:	f019 0910 	ands.w	r9, r9, #16
    8fde:	d008      	beq.n	8ff2 <isr+0xe3a>
				done = radio_ccm_is_done();
    8fe0:	f002 f9fa 	bl	b3d8 <radio_ccm_is_done>
				LL_ASSERT(done);
    8fe4:	b918      	cbnz	r0, 8fee <isr+0xe36>
    8fe6:	4ab7      	ldr	r2, [pc, #732]	; (92c4 <isr+0x110c>)
    8fe8:	49b7      	ldr	r1, [pc, #732]	; (92c8 <isr+0x1110>)
    8fea:	f7ff bab0 	b.w	854e <isr+0x396>
				ccm_rx_increment = 1;
    8fee:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    8ff2:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
    8ff6:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    8ffa:	06dc      	lsls	r4, r3, #27
    8ffc:	d40f      	bmi.n	901e <isr+0xe66>
			    (_radio.conn_curr->pause_rx &&
    8ffe:	f8db 4714 	ldr.w	r4, [fp, #1812]	; 0x714
    9002:	7a33      	ldrb	r3, [r6, #8]
    9004:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    9008:	f012 0f04 	tst.w	r2, #4
    900c:	d117      	bne.n	903e <isr+0xe86>
			switch (pdu_data_rx->ll_id) {
    900e:	f013 0303 	ands.w	r3, r3, #3
    9012:	f000 81ce 	beq.w	93b2 <isr+0x11fa>
    9016:	2b02      	cmp	r3, #2
    9018:	d848      	bhi.n	90ac <isr+0xef4>
				*rx_enqueue = 1;
    901a:	2501      	movs	r5, #1
    901c:	e0b7      	b.n	918e <isr+0xfd6>
			     !radio_ccm_mic_is_valid()) ||
    901e:	f002 f9f9 	bl	b414 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    9022:	2800      	cmp	r0, #0
    9024:	d1eb      	bne.n	8ffe <isr+0xe46>
				_radio.state = STATE_CLOSE;
    9026:	2403      	movs	r4, #3
    9028:	f88b 4014 	strb.w	r4, [fp, #20]
				radio_disable();
    902c:	f001 ff8e 	bl	af4c <radio_disable>
				LL_ASSERT(!radio_is_ready());
    9030:	f001 ffaa 	bl	af88 <radio_is_ready>
    9034:	4605      	mov	r5, r0
    9036:	b378      	cbz	r0, 9098 <isr+0xee0>
    9038:	4aa2      	ldr	r2, [pc, #648]	; (92c4 <isr+0x110c>)
    903a:	f7ff b911 	b.w	8260 <isr+0xa8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    903e:	f003 0103 	and.w	r1, r3, #3
    9042:	2903      	cmp	r1, #3
    9044:	d1ef      	bne.n	9026 <isr+0xe6e>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    9046:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    904a:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    904c:	2800      	cmp	r0, #0
    904e:	f002 0240 	and.w	r2, r2, #64	; 0x40
    9052:	db15      	blt.n	9080 <isr+0xec8>
	       (!conn->role &&
    9054:	b922      	cbnz	r2, 9060 <isr+0xea8>
		((!conn->refresh &&
    9056:	2902      	cmp	r1, #2
    9058:	d0d9      	beq.n	900e <isr+0xe56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    905a:	2911      	cmp	r1, #17
    905c:	d8e3      	bhi.n	9026 <isr+0xe6e>
    905e:	e009      	b.n	9074 <isr+0xebc>
		 (conn->refresh &&
    9060:	1e8a      	subs	r2, r1, #2
    9062:	b2d2      	uxtb	r2, r2
    9064:	2a09      	cmp	r2, #9
    9066:	d8f8      	bhi.n	905a <isr+0xea2>
    9068:	f240 2005 	movw	r0, #517	; 0x205
    906c:	fa20 f202 	lsr.w	r2, r0, r2
    9070:	07d0      	lsls	r0, r2, #31
    9072:	d4cc      	bmi.n	900e <isr+0xe56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    9074:	4a95      	ldr	r2, [pc, #596]	; (92cc <isr+0x1114>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    9076:	fa22 f101 	lsr.w	r1, r2, r1
    907a:	07c9      	lsls	r1, r1, #31
    907c:	d5d3      	bpl.n	9026 <isr+0xe6e>
    907e:	e7c6      	b.n	900e <isr+0xe56>
	       (conn->role &&
    9080:	b92a      	cbnz	r2, 908e <isr+0xed6>
		((!conn->refresh &&
    9082:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    9084:	d0c3      	beq.n	900e <isr+0xe56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    9086:	2911      	cmp	r1, #17
    9088:	d8cd      	bhi.n	9026 <isr+0xe6e>
    908a:	4a91      	ldr	r2, [pc, #580]	; (92d0 <isr+0x1118>)
    908c:	e7f3      	b.n	9076 <isr+0xebe>
		 (conn->refresh &&
    908e:	1e8a      	subs	r2, r1, #2
    9090:	2a01      	cmp	r2, #1
    9092:	d9bc      	bls.n	900e <isr+0xe56>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    9094:	290b      	cmp	r1, #11
    9096:	e7f5      	b.n	9084 <isr+0xecc>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    9098:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    909c:	213d      	movs	r1, #61	; 0x3d
    909e:	f7fd fddd 	bl	6c5c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    90a2:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    90a6:	f7fd fb91 	bl	67cc <connection_release>
    90aa:	e6e2      	b.n	8e72 <isr+0xcba>
	switch (pdu_data_rx->llctrl.opcode) {
    90ac:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    90ae:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    90b2:	2d19      	cmp	r5, #25
    90b4:	f200 8186 	bhi.w	93c4 <isr+0x120c>
    90b8:	e8df f015 	tbh	[pc, r5, lsl #1]
    90bc:	0081001a 	.word	0x0081001a
    90c0:	018400b5 	.word	0x018400b5
    90c4:	01840184 	.word	0x01840184
    90c8:	017d0184 	.word	0x017d0184
    90cc:	00dd00c0 	.word	0x00dd00c0
    90d0:	01840184 	.word	0x01840184
    90d4:	01840112 	.word	0x01840112
    90d8:	018400d5 	.word	0x018400d5
    90dc:	01760184 	.word	0x01760184
    90e0:	01840184 	.word	0x01840184
    90e4:	01840184 	.word	0x01840184
    90e8:	01840184 	.word	0x01840184
    90ec:	01980184 	.word	0x01980184
		if (!_radio.conn_curr->role ||
    90f0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    90f4:	2b00      	cmp	r3, #0
    90f6:	f280 8165 	bge.w	93c4 <isr+0x120c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    90fa:	7a71      	ldrb	r1, [r6, #9]
    90fc:	2000      	movs	r0, #0
    90fe:	f7fc fc61 	bl	59c4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    9102:	2800      	cmp	r0, #0
    9104:	f000 815e 	beq.w	93c4 <isr+0x120c>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    9108:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    910c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    910e:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    9110:	041a      	lsls	r2, r3, #16
    9112:	f100 834c 	bmi.w	97ae <isr+0x15f6>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    9116:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    911a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    911e:	429a      	cmp	r2, r3
    9120:	d003      	beq.n	912a <isr+0xf72>
    9122:	4a6c      	ldr	r2, [pc, #432]	; (92d4 <isr+0x111c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    9124:	496c      	ldr	r1, [pc, #432]	; (92d8 <isr+0x1120>)
    9126:	f7ff ba12 	b.w	854e <isr+0x396>
	if (_radio.conn_upd == 0) {
    912a:	f8db 2780 	ldr.w	r2, [fp, #1920]	; 0x780
    912e:	b90a      	cbnz	r2, 9134 <isr+0xf7c>
		_radio.conn_upd = conn;
    9130:	f8cb 4780 	str.w	r4, [fp, #1920]	; 0x780
	conn->llcp.conn_upd.win_size =
    9134:	7b32      	ldrb	r2, [r6, #12]
    9136:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    913a:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    913e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    9142:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    9144:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    9146:	7c30      	ldrb	r0, [r6, #16]
    9148:	7bf2      	ldrb	r2, [r6, #15]
    914a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    914e:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    9152:	7cb0      	ldrb	r0, [r6, #18]
    9154:	7c72      	ldrb	r2, [r6, #17]
    9156:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    915a:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    915e:	7cf2      	ldrb	r2, [r6, #19]
    9160:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    9162:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    9166:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    916a:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    916e:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    9172:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    9176:	f36f 0282 	bfc	r2, #2, #1
    917a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    917e:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    9180:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    9182:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    9184:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    9188:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    918c:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    918e:	f8db 1714 	ldr.w	r1, [fp, #1812]	; 0x714
    9192:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    9196:	f083 0302 	eor.w	r3, r3, #2
    919a:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    919e:	f1b9 0f00 	cmp.w	r9, #0
    91a2:	f43f ae9d 	beq.w	8ee0 <isr+0xd28>
				_radio.conn_curr->ccm_rx.counter++;
    91a6:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    91aa:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    91ae:	3201      	adds	r2, #1
    91b0:	f143 0300 	adc.w	r3, r3, #0
    91b4:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    91b8:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    91bc:	e690      	b.n	8ee0 <isr+0xd28>
		if (!_radio.conn_curr->role ||
    91be:	f994 301d 	ldrsb.w	r3, [r4, #29]
    91c2:	2b00      	cmp	r3, #0
    91c4:	f280 80fe 	bge.w	93c4 <isr+0x120c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    91c8:	7a71      	ldrb	r1, [r6, #9]
    91ca:	2001      	movs	r0, #1
    91cc:	f7fc fbfa 	bl	59c4 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    91d0:	2800      	cmp	r0, #0
    91d2:	f000 80f7 	beq.w	93c4 <isr+0x120c>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    91d6:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    91da:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    91dc:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    91de:	041b      	lsls	r3, r3, #16
    91e0:	f100 82e5 	bmi.w	97ae <isr+0x15f6>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    91e4:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    91e8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    91ec:	429a      	cmp	r2, r3
    91ee:	d001      	beq.n	91f4 <isr+0x103c>
    91f0:	4a3a      	ldr	r2, [pc, #232]	; (92dc <isr+0x1124>)
    91f2:	e797      	b.n	9124 <isr+0xf6c>
	memcpy(&conn->llcp.chan_map.chm[0],
    91f4:	2205      	movs	r2, #5
    91f6:	f106 010c 	add.w	r1, r6, #12
    91fa:	f104 0061 	add.w	r0, r4, #97	; 0x61
    91fe:	f7f7 fa0c 	bl	61a <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    9202:	7c73      	ldrb	r3, [r6, #17]
    9204:	7cb2      	ldrb	r2, [r6, #18]
    9206:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    920a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    920e:	2302      	movs	r3, #2
    9210:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    9214:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    9218:	2500      	movs	r5, #0
	conn->llcp_ack--;
    921a:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    921c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    9220:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    9224:	e7b3      	b.n	918e <isr+0xfd6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    9226:	7a71      	ldrb	r1, [r6, #9]
    9228:	2002      	movs	r0, #2
    922a:	f7fc fbcb 	bl	59c4 <pdu_len_cmp>
    922e:	2800      	cmp	r0, #0
    9230:	f000 80c8 	beq.w	93c4 <isr+0x120c>
		_radio.conn_curr->llcp_terminate.reason_peer =
    9234:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    9236:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    923a:	e0ba      	b.n	93b2 <isr+0x11fa>
		if (!_radio.conn_curr->role ||
    923c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    9240:	2b00      	cmp	r3, #0
    9242:	f280 80bf 	bge.w	93c4 <isr+0x120c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    9246:	7a71      	ldrb	r1, [r6, #9]
    9248:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    924a:	f7fc fbbb 	bl	59c4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    924e:	2800      	cmp	r0, #0
    9250:	f000 80b8 	beq.w	93c4 <isr+0x120c>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    9254:	4651      	mov	r1, sl
    9256:	4620      	mov	r0, r4
    9258:	f7fe faae 	bl	77b8 <feature_rsp_send>
    925c:	4605      	mov	r5, r0
		if (!nack) {
    925e:	2800      	cmp	r0, #0
    9260:	f47f ae3d 	bne.w	8ede <isr+0xd26>
    9264:	e793      	b.n	918e <isr+0xfd6>
		if (_radio.conn_curr->role ||
    9266:	f994 301d 	ldrsb.w	r3, [r4, #29]
    926a:	2b00      	cmp	r3, #0
    926c:	f2c0 80aa 	blt.w	93c4 <isr+0x120c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    9270:	7a71      	ldrb	r1, [r6, #9]
    9272:	200e      	movs	r0, #14
    9274:	e7e9      	b.n	924a <isr+0x1092>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    9276:	7a71      	ldrb	r1, [r6, #9]
    9278:	2009      	movs	r0, #9
    927a:	f7fc fba3 	bl	59c4 <pdu_len_cmp>
    927e:	2800      	cmp	r0, #0
    9280:	f000 80a0 	beq.w	93c4 <isr+0x120c>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9284:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    9286:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    9288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    928c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    9290:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    9294:	f043 0310 	orr.w	r3, r3, #16
    9298:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    929c:	7bb2      	ldrb	r2, [r6, #14]
    929e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    92a2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    92a6:	f3c2 0210 	ubfx	r2, r2, #0, #17
    92aa:	4013      	ands	r3, r2
    92ac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    92b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    92b4:	f043 0320 	orr.w	r3, r3, #32
    92b8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    92bc:	2300      	movs	r3, #0
    92be:	86a3      	strh	r3, [r4, #52]	; 0x34
    92c0:	e6ab      	b.n	901a <isr+0xe62>
    92c2:	bf00      	nop
    92c4:	0000e210 	.word	0x0000e210
    92c8:	0000e6e8 	.word	0x0000e6e8
    92cc:	00022060 	.word	0x00022060
    92d0:	00022040 	.word	0x00022040
    92d4:	0000e511 	.word	0x0000e511
    92d8:	0000e702 	.word	0x0000e702
    92dc:	0000e51d 	.word	0x0000e51d
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    92e0:	7a71      	ldrb	r1, [r6, #9]
    92e2:	200c      	movs	r0, #12
    92e4:	f7fc fb6e 	bl	59c4 <pdu_len_cmp>
    92e8:	2800      	cmp	r0, #0
    92ea:	d06b      	beq.n	93c4 <isr+0x120c>
	if (!conn->llcp_version.tx) {
    92ec:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    92f0:	f013 0501 	ands.w	r5, r3, #1
    92f4:	d152      	bne.n	939c <isr+0x11e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    92f6:	48ab      	ldr	r0, [pc, #684]	; (95a4 <isr+0x13ec>)
    92f8:	f7fa fbf3 	bl	3ae2 <mem_acquire>
		if (!node_tx) {
    92fc:	4601      	mov	r1, r0
    92fe:	2800      	cmp	r0, #0
    9300:	f43f aded 	beq.w	8ede <isr+0xd26>
		conn->llcp_version.tx = 1;
    9304:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    9308:	f043 0301 	orr.w	r3, r3, #1
    930c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9310:	7903      	ldrb	r3, [r0, #4]
    9312:	f043 0303 	orr.w	r3, r3, #3
    9316:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    9318:	2306      	movs	r3, #6
    931a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    931c:	230c      	movs	r3, #12
    931e:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    9320:	2309      	movs	r3, #9
    9322:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    9324:	f06f 030e 	mvn.w	r3, #14
    9328:	7243      	strb	r3, [r0, #9]
    932a:	2305      	movs	r3, #5
    932c:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    932e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9332:	72c3      	strb	r3, [r0, #11]
    9334:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    9336:	4620      	mov	r0, r4
    9338:	f7fe fa24 	bl	7784 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    933c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    9340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    9344:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    9348:	f001 fe52 	bl	aff0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    934c:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    934e:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    9350:	2201      	movs	r2, #1
    9352:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    9356:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    935a:	7003      	strb	r3, [r0, #0]
    935c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    935e:	b1c2      	cbz	r2, 9392 <isr+0x11da>
		pdu_data_tx->md = 1;
    9360:	f043 0310 	orr.w	r3, r3, #16
    9364:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    9366:	7b33      	ldrb	r3, [r6, #12]
    9368:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    936c:	7bb2      	ldrb	r2, [r6, #14]
    936e:	7b73      	ldrb	r3, [r6, #13]
    9370:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9374:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    9378:	7bf3      	ldrb	r3, [r6, #15]
    937a:	7c32      	ldrb	r2, [r6, #16]
    937c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9380:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    9384:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    9388:	f043 0302 	orr.w	r3, r3, #2
    938c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    9390:	e6fd      	b.n	918e <isr+0xfd6>
		pdu_data_tx->md = 0;
    9392:	f362 1304 	bfi	r3, r2, #4, #1
    9396:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    9398:	4615      	mov	r5, r2
    939a:	e7e4      	b.n	9366 <isr+0x11ae>
	} else if (!conn->llcp_version.rx) {
    939c:	f013 0302 	ands.w	r3, r3, #2
    93a0:	d107      	bne.n	93b2 <isr+0x11fa>
		conn->procedure_expire = 0;
    93a2:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    93a4:	2501      	movs	r5, #1
    93a6:	e7de      	b.n	9366 <isr+0x11ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    93a8:	7a71      	ldrb	r1, [r6, #9]
    93aa:	2011      	movs	r0, #17
    93ac:	f7fc fb0a 	bl	59c4 <pdu_len_cmp>
    93b0:	b140      	cbz	r0, 93c4 <isr+0x120c>
	u8_t rx_enqueue = 0;
    93b2:	2500      	movs	r5, #0
    93b4:	e6eb      	b.n	918e <isr+0xfd6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    93b6:	7a71      	ldrb	r1, [r6, #9]
    93b8:	2007      	movs	r0, #7
    93ba:	f7fc fb03 	bl	59c4 <pdu_len_cmp>
    93be:	2800      	cmp	r0, #0
    93c0:	f47f af7c 	bne.w	92bc <isr+0x1104>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    93c4:	4877      	ldr	r0, [pc, #476]	; (95a4 <isr+0x13ec>)
    93c6:	f7fa fb8c 	bl	3ae2 <mem_acquire>
	if (!node_tx) {
    93ca:	4601      	mov	r1, r0
    93cc:	2800      	cmp	r0, #0
    93ce:	f43f ad86 	beq.w	8ede <isr+0xd26>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    93d2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    93d4:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    93d6:	f043 0303 	orr.w	r3, r3, #3
    93da:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    93dc:	2302      	movs	r3, #2
    93de:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    93e0:	2307      	movs	r3, #7
    93e2:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    93e4:	4620      	mov	r0, r4
    93e6:	f7fe f99f 	bl	7728 <ctrl_tx_enqueue>
    93ea:	e7e2      	b.n	93b2 <isr+0x11fa>
		if (_radio.conn_curr->role ||
    93ec:	f994 301d 	ldrsb.w	r3, [r4, #29]
    93f0:	2b00      	cmp	r3, #0
    93f2:	dbe7      	blt.n	93c4 <isr+0x120c>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    93f4:	7a71      	ldrb	r1, [r6, #9]
    93f6:	2019      	movs	r0, #25
    93f8:	f7fc fae4 	bl	59c4 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    93fc:	2800      	cmp	r0, #0
    93fe:	d0e1      	beq.n	93c4 <isr+0x120c>
			if (!(p->phys & 0x01)) {
    9400:	7b35      	ldrb	r5, [r6, #12]
    9402:	f015 0501 	ands.w	r5, r5, #1
    9406:	f43f aec2 	beq.w	918e <isr+0xfd6>
			if (conn->llcp_req != conn->llcp_ack) {
    940a:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    940e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    9412:	429a      	cmp	r2, r3
    9414:	d1cd      	bne.n	93b2 <isr+0x11fa>
			memcpy(&conn->llcp.chan_map.chm[0],
    9416:	2205      	movs	r2, #5
    9418:	4963      	ldr	r1, [pc, #396]	; (95a8 <isr+0x13f0>)
    941a:	f104 0061 	add.w	r0, r4, #97	; 0x61
    941e:	f7f7 f8fc 	bl	61a <memcpy>
			conn->llcp.chan_map.initiate = 1;
    9422:	2301      	movs	r3, #1
    9424:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    9428:	2302      	movs	r3, #2
    942a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    942e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    9432:	3b01      	subs	r3, #1
    9434:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    9438:	e7bb      	b.n	93b2 <isr+0x11fa>
		if (_radio.crc_expire == 0) {
    943a:	f89b 3719 	ldrb.w	r3, [fp, #1817]	; 0x719
    943e:	b913      	cbnz	r3, 9446 <isr+0x128e>
			_radio.crc_expire = 2;
    9440:	2302      	movs	r3, #2
    9442:	f88b 3719 	strb.w	r3, [fp, #1817]	; 0x719
		_radio.crc_expire--;
    9446:	f89b 4719 	ldrb.w	r4, [fp, #1817]	; 0x719
		if (!_radio.conn_curr->supervision_expire) {
    944a:	f8db 3714 	ldr.w	r3, [fp, #1812]	; 0x714
		_radio.crc_expire--;
    944e:	3c01      	subs	r4, #1
    9450:	b2e4      	uxtb	r4, r4
    9452:	f88b 4719 	strb.w	r4, [fp, #1817]	; 0x719
		if (!_radio.conn_curr->supervision_expire) {
    9456:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    9458:	fab4 f484 	clz	r4, r4
    945c:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    945e:	b91d      	cbnz	r5, 9468 <isr+0x12b0>
			_radio.conn_curr->supervision_expire =
    9460:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    9462:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    9464:	46a8      	mov	r8, r5
    9466:	e541      	b.n	8eec <isr+0xd34>
	u8_t rx_enqueue = 0;
    9468:	2500      	movs	r5, #0
    946a:	e7fb      	b.n	9464 <isr+0x12ac>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    946c:	2303      	movs	r3, #3
    946e:	e55e      	b.n	8f2e <isr+0xd76>
			radio_switch_complete_and_disable();
    9470:	f001 fddc 	bl	b02c <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    9474:	990d      	ldr	r1, [sp, #52]	; 0x34
    9476:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    947a:	780b      	ldrb	r3, [r1, #0]
    947c:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    9480:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    9484:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9488:	f362 0382 	bfi	r3, r2, #2, #1
    948c:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    948e:	f7fd fa2f 	bl	68f0 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    9492:	f001 fd79 	bl	af88 <radio_is_ready>
    9496:	2800      	cmp	r0, #0
    9498:	f43f aced 	beq.w	8e76 <isr+0xcbe>
    949c:	4a43      	ldr	r2, [pc, #268]	; (95ac <isr+0x13f4>)
    949e:	f7fe bedf 	b.w	8260 <isr+0xa8>
		radio_tmr_tifs_set(RADIO_TIFS);
    94a2:	2096      	movs	r0, #150	; 0x96
    94a4:	f001 fe3c 	bl	b120 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    94a8:	2000      	movs	r0, #0
    94aa:	f001 fda9 	bl	b000 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    94ae:	f001 ff13 	bl	b2d8 <radio_tmr_end_capture>
    94b2:	e7df      	b.n	9474 <isr+0x12bc>
		LL_ASSERT(0);
    94b4:	4a3e      	ldr	r2, [pc, #248]	; (95b0 <isr+0x13f8>)
    94b6:	f7fe bf2d 	b.w	8314 <isr+0x15c>
	switch (_radio.role) {
    94ba:	f89b 2013 	ldrb.w	r2, [fp, #19]
    94be:	2a04      	cmp	r2, #4
    94c0:	f200 8162 	bhi.w	9788 <isr+0x15d0>
    94c4:	e8df f012 	tbh	[pc, r2, lsl #1]
    94c8:	00050154 	.word	0x00050154
    94cc:	0055002a 	.word	0x0055002a
    94d0:	0055      	.short	0x0055
	if ((_radio.state == STATE_CLOSE) &&
    94d2:	2b03      	cmp	r3, #3
    94d4:	d109      	bne.n	94ea <isr+0x1332>
	    (_radio.advertiser.chan_map_current != 0)) {
    94d6:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    94da:	075d      	lsls	r5, r3, #29
    94dc:	d005      	beq.n	94ea <isr+0x1332>
		adv_setup();
    94de:	f7fc fd97 	bl	6010 <adv_setup>
		radio_tx_enable();
    94e2:	f001 fd2d 	bl	af40 <radio_tx_enable>
    94e6:	f7fe bec8 	b.w	827a <isr+0xc2>
		radio_filter_disable();
    94ea:	f001 fde9 	bl	b0c0 <radio_filter_disable>
	_radio.role = ROLE_NONE;
    94ee:	2400      	movs	r4, #0
    94f0:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    94f4:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    94f8:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    94fc:	f001 fe8e 	bl	b21c <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9500:	4622      	mov	r2, r4
    9502:	4621      	mov	r1, r4
    9504:	4620      	mov	r0, r4
    9506:	4b2b      	ldr	r3, [pc, #172]	; (95b4 <isr+0x13fc>)
    9508:	f7fa fba4 	bl	3c54 <mayfly_enqueue>
	LL_ASSERT(!retval);
    950c:	4604      	mov	r4, r0
    950e:	2800      	cmp	r0, #0
    9510:	f000 813d 	beq.w	978e <isr+0x15d6>
    9514:	4a28      	ldr	r2, [pc, #160]	; (95b8 <isr+0x1400>)
    9516:	4929      	ldr	r1, [pc, #164]	; (95bc <isr+0x1404>)
    9518:	f7ff b819 	b.w	854e <isr+0x396>
	if (_radio.state == STATE_CLOSE) {
    951c:	2b03      	cmp	r3, #3
    951e:	d11a      	bne.n	9556 <isr+0x139e>
		radio_tmr_tifs_set(RADIO_TIFS);
    9520:	2096      	movs	r0, #150	; 0x96
    9522:	f001 fdfd 	bl	b120 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    9526:	2300      	movs	r3, #0
    9528:	4619      	mov	r1, r3
    952a:	461a      	mov	r2, r3
    952c:	4618      	mov	r0, r3
    952e:	f001 fd73 	bl	b018 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    9532:	f8db 3734 	ldr.w	r3, [fp, #1844]	; 0x734
    9536:	f89b 2739 	ldrb.w	r2, [fp, #1849]	; 0x739
		radio_pkt_rx_set(_radio.packet_rx
    953a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    953e:	3008      	adds	r0, #8
    9540:	f001 fcde 	bl	af00 <radio_pkt_rx_set>
		radio_rssi_measure();
    9544:	f001 fd80 	bl	b048 <radio_rssi_measure>
		_radio.state = STATE_RX;
    9548:	2301      	movs	r3, #1
    954a:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    954e:	f001 fcf1 	bl	af34 <radio_rx_enable>
    9552:	f7fe be92 	b.w	827a <isr+0xc2>
		radio_filter_disable();
    9556:	f001 fdb3 	bl	b0c0 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    955a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    955e:	2b05      	cmp	r3, #5
    9560:	d1c5      	bne.n	94ee <isr+0x1336>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    9562:	2300      	movs	r3, #0
    9564:	9300      	str	r3, [sp, #0]
    9566:	2204      	movs	r2, #4
    9568:	4619      	mov	r1, r3
    956a:	4618      	mov	r0, r3
    956c:	f7fb f9c4 	bl	48f8 <ticker_stop>
    9570:	e7bd      	b.n	94ee <isr+0x1336>
	if (_radio.conn_curr == 0) {
    9572:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    9576:	2800      	cmp	r0, #0
    9578:	d0b9      	beq.n	94ee <isr+0x1336>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    957a:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    957e:	b1f9      	cbz	r1, 95c0 <isr+0x1408>
    9580:	f89b 3013 	ldrb.w	r3, [fp, #19]
    9584:	2b03      	cmp	r3, #3
    9586:	d003      	beq.n	9590 <isr+0x13d8>
    9588:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    958c:	07dc      	lsls	r4, r3, #31
    958e:	d517      	bpl.n	95c0 <isr+0x1408>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9590:	f7fd fb64 	bl	6c5c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    9594:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    9598:	f7fd f918 	bl	67cc <connection_release>
			_radio.conn_curr = NULL;
    959c:	2300      	movs	r3, #0
    959e:	f8cb 3714 	str.w	r3, [fp, #1812]	; 0x714
    95a2:	e7a4      	b.n	94ee <isr+0x1336>
    95a4:	2000114c 	.word	0x2000114c
    95a8:	20001112 	.word	0x20001112
    95ac:	0000e220 	.word	0x0000e220
    95b0:	0000e22c 	.word	0x0000e22c
    95b4:	20004f98 	.word	0x20004f98
    95b8:	0000e2e9 	.word	0x0000e2e9
    95bc:	0000e688 	.word	0x0000e688
	latency_event = _radio.conn_curr->latency_event;
    95c0:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    95c2:	f89b 7718 	ldrb.w	r7, [fp, #1816]	; 0x718
	elapsed_event = latency_event + 1;
    95c6:	1c75      	adds	r5, r6, #1
    95c8:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    95ca:	2f00      	cmp	r7, #0
    95cc:	d06c      	beq.n	96a8 <isr+0x14f0>
		if (_radio.role == ROLE_SLAVE) {
    95ce:	f89b 3013 	ldrb.w	r3, [fp, #19]
    95d2:	2b03      	cmp	r3, #3
    95d4:	d15c      	bne.n	9690 <isr+0x14d8>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    95d6:	f001 fe73 	bl	b2c0 <radio_tmr_aa_restore>
    95da:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    95dc:	f001 fe76 	bl	b2cc <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    95e0:	f8db 7714 	ldr.w	r7, [fp, #1812]	; 0x714
    95e4:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 97d8 <isr+0x1620>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    95e8:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    95ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    95ee:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    95f2:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    95f4:	a376      	add	r3, pc, #472	; (adr r3, 97d0 <isr+0x1618>)
    95f6:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    95fa:	d83c      	bhi.n	9676 <isr+0x14be>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    95fc:	fba0 0109 	umull	r0, r1, r0, r9
    9600:	f7f6 fe32 	bl	268 <__aeabi_uldivmod>
    9604:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    9606:	ebaa 0008 	sub.w	r0, sl, r8
    960a:	a371      	add	r3, pc, #452	; (adr r3, 97d0 <isr+0x1618>)
    960c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9610:	fba0 0109 	umull	r0, r1, r0, r9
    9614:	f7f6 fe28 	bl	268 <__aeabi_uldivmod>
    9618:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    961a:	2200      	movs	r2, #0
    961c:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    961e:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    9620:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    9624:	b372      	cbz	r2, 9684 <isr+0x14cc>
				if (pdu_data_tx->len ||
    9626:	7952      	ldrb	r2, [r2, #5]
    9628:	b912      	cbnz	r2, 9630 <isr+0x1478>
    962a:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    962e:	b10a      	cbz	r2, 9634 <isr+0x147c>
					_radio.conn_curr->latency_event = 0;
    9630:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    9632:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    9634:	f8db 2714 	ldr.w	r2, [fp, #1812]	; 0x714
    9638:	2100      	movs	r1, #0
    963a:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    963c:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    9640:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    9642:	b1b2      	cbz	r2, 9672 <isr+0x14ba>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    9644:	4295      	cmp	r5, r2
    9646:	f080 808b 	bcs.w	9760 <isr+0x15a8>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    964a:	1b52      	subs	r2, r2, r5
    964c:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    964e:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    9650:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    9652:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    9654:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    9656:	f240 8085 	bls.w	9764 <isr+0x15ac>
			else if (_radio.role == ROLE_SLAVE) {
    965a:	f89b 2013 	ldrb.w	r2, [fp, #19]
    965e:	2a03      	cmp	r2, #3
    9660:	d107      	bne.n	9672 <isr+0x14ba>
				if (latency_event != 0) {
    9662:	2e00      	cmp	r6, #0
    9664:	d17e      	bne.n	9764 <isr+0x15ac>
					force = _radio.conn_curr->slave.force & 0x01;
    9666:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    9668:	087a      	lsrs	r2, r7, #1
					if (force) {
    966a:	f017 0701 	ands.w	r7, r7, #1
    966e:	d135      	bne.n	96dc <isr+0x1524>
					_radio.conn_curr->slave.force >>= 1;
    9670:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    9672:	2700      	movs	r7, #0
    9674:	e035      	b.n	96e2 <isr+0x152a>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9676:	fba8 0109 	umull	r0, r1, r8, r9
    967a:	f7f6 fdf5 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    967e:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    9680:	b284      	uxth	r4, r0
    9682:	e7ca      	b.n	961a <isr+0x1462>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    9684:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    9688:	07d2      	lsls	r2, r2, #31
    968a:	d5d3      	bpl.n	9634 <isr+0x147c>
				_radio.conn_curr->latency_event =
    968c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    968e:	e7d0      	b.n	9632 <isr+0x147a>
		} else if (reason_peer) {
    9690:	b141      	cbz	r1, 96a4 <isr+0x14ec>
			_radio.conn_curr->master.terminate_ack = 1;
    9692:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    9696:	f043 0301 	orr.w	r3, r3, #1
    969a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    969e:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    96a0:	461c      	mov	r4, r3
    96a2:	e7c7      	b.n	9634 <isr+0x147c>
	ticks_drift_minus = 0;
    96a4:	460b      	mov	r3, r1
    96a6:	e7fb      	b.n	96a0 <isr+0x14e8>
	else if (_radio.conn_curr->connect_expire) {
    96a8:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    96aa:	b184      	cbz	r4, 96ce <isr+0x1516>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    96ac:	42a5      	cmp	r5, r4
    96ae:	d204      	bcs.n	96ba <isr+0x1502>
			_radio.conn_curr->connect_expire -= elapsed_event;
    96b0:	1b64      	subs	r4, r4, r5
    96b2:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    96b4:	463c      	mov	r4, r7
    96b6:	4623      	mov	r3, r4
    96b8:	e7c0      	b.n	963c <isr+0x1484>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    96ba:	213e      	movs	r1, #62	; 0x3e
    96bc:	f7fd face 	bl	6c5c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    96c0:	f8db 0714 	ldr.w	r0, [fp, #1812]	; 0x714
    96c4:	f7fd f882 	bl	67cc <connection_release>
			_radio.conn_curr = NULL;
    96c8:	f8cb 7714 	str.w	r7, [fp, #1812]	; 0x714
    96cc:	e70f      	b.n	94ee <isr+0x1336>
		if (!_radio.conn_curr->supervision_expire) {
    96ce:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    96d0:	2b00      	cmp	r3, #0
    96d2:	d1f0      	bne.n	96b6 <isr+0x14fe>
			_radio.conn_curr->supervision_expire =
    96d4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    96d6:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    96d8:	461c      	mov	r4, r3
    96da:	e7af      	b.n	963c <isr+0x1484>
						_radio.conn_curr->slave.force |=
    96dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    96e0:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    96e2:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    96e4:	b11a      	cbz	r2, 96ee <isr+0x1536>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    96e6:	4295      	cmp	r5, r2
    96e8:	d23e      	bcs.n	9768 <isr+0x15b0>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    96ea:	1b55      	subs	r5, r2, r5
    96ec:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    96ee:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    96f2:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    96f6:	4291      	cmp	r1, r2
    96f8:	d006      	beq.n	9708 <isr+0x1550>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    96fa:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    96fe:	3a01      	subs	r2, #1
    9700:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    9702:	bf9c      	itt	ls
    9704:	2200      	movls	r2, #0
    9706:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    9708:	b917      	cbnz	r7, 9710 <isr+0x1558>
    970a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    970c:	42b2      	cmp	r2, r6
    970e:	d02d      	beq.n	976c <isr+0x15b4>
		lazy = _radio.conn_curr->latency_event + 1;
    9710:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    9712:	3101      	adds	r1, #1
    9714:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    9716:	b924      	cbnz	r4, 9722 <isr+0x156a>
    9718:	b91b      	cbnz	r3, 9722 <isr+0x156a>
    971a:	b911      	cbnz	r1, 9722 <isr+0x156a>
	    (lazy != 0) || (force != 0)) {
    971c:	2f00      	cmp	r7, #0
    971e:	f43f aee6 	beq.w	94ee <isr+0x1336>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    9722:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    9726:	4a24      	ldr	r2, [pc, #144]	; (97b8 <isr+0x1600>)
    9728:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    972a:	3507      	adds	r5, #7
		ticker_status =
    972c:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    972e:	b2ed      	uxtb	r5, r5
		ticker_status =
    9730:	9205      	str	r2, [sp, #20]
    9732:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    9734:	9506      	str	r5, [sp, #24]
		ticker_status =
    9736:	4623      	mov	r3, r4
    9738:	9704      	str	r7, [sp, #16]
    973a:	9102      	str	r1, [sp, #8]
    973c:	9101      	str	r1, [sp, #4]
    973e:	462a      	mov	r2, r5
    9740:	4608      	mov	r0, r1
    9742:	f7fb f88b 	bl	485c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    9746:	f030 0302 	bics.w	r3, r0, #2
    974a:	f43f aed0 	beq.w	94ee <isr+0x1336>
    974e:	f89b 3012 	ldrb.w	r3, [fp, #18]
    9752:	429d      	cmp	r5, r3
    9754:	f43f aecb 	beq.w	94ee <isr+0x1336>
    9758:	4a18      	ldr	r2, [pc, #96]	; (97bc <isr+0x1604>)
    975a:	4919      	ldr	r1, [pc, #100]	; (97c0 <isr+0x1608>)
    975c:	f7fe bef7 	b.w	854e <isr+0x396>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9760:	2108      	movs	r1, #8
    9762:	e715      	b.n	9590 <isr+0x13d8>
				force = 1;
    9764:	2701      	movs	r7, #1
    9766:	e7bc      	b.n	96e2 <isr+0x152a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    9768:	2122      	movs	r1, #34	; 0x22
    976a:	e711      	b.n	9590 <isr+0x13d8>
	lazy = 0;
    976c:	4639      	mov	r1, r7
    976e:	e7d2      	b.n	9716 <isr+0x155e>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    9770:	3b04      	subs	r3, #4
    9772:	2b01      	cmp	r3, #1
    9774:	d903      	bls.n	977e <isr+0x15c6>
    9776:	4a13      	ldr	r2, [pc, #76]	; (97c4 <isr+0x160c>)
    9778:	4913      	ldr	r1, [pc, #76]	; (97c8 <isr+0x1610>)
    977a:	f7fe bee8 	b.w	854e <isr+0x396>
		_radio.state = STATE_NONE;
    977e:	2300      	movs	r3, #0
    9780:	f88b 3014 	strb.w	r3, [fp, #20]
    9784:	f7fe bd9d 	b.w	82c2 <isr+0x10a>
		LL_ASSERT(0);
    9788:	4a0e      	ldr	r2, [pc, #56]	; (97c4 <isr+0x160c>)
    978a:	f7fe bdc3 	b.w	8314 <isr+0x15c>
	clock_control_off(_radio.hf_clock, NULL);
    978e:	f8db 0000 	ldr.w	r0, [fp]
    9792:	6843      	ldr	r3, [r0, #4]
    9794:	4621      	mov	r1, r4
    9796:	685b      	ldr	r3, [r3, #4]
    9798:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    979a:	2201      	movs	r2, #1
    979c:	4611      	mov	r1, r2
    979e:	4620      	mov	r0, r4
    97a0:	f7fa fa30 	bl	3c04 <mayfly_enable>
    97a4:	f7fe bd8d 	b.w	82c2 <isr+0x10a>
		LL_ASSERT(0);
    97a8:	4a08      	ldr	r2, [pc, #32]	; (97cc <isr+0x1614>)
    97aa:	f7fe bdb3 	b.w	8314 <isr+0x15c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    97ae:	2328      	movs	r3, #40	; 0x28
    97b0:	e541      	b.n	9236 <isr+0x107e>
    97b2:	bf00      	nop
    97b4:	f3af 8000 	nop.w
    97b8:	00006485 	.word	0x00006485
    97bc:	0000e23f 	.word	0x0000e23f
    97c0:	0000e738 	.word	0x0000e738
    97c4:	0000e24e 	.word	0x0000e24e
    97c8:	0000e7a2 	.word	0x0000e7a2
    97cc:	0000e264 	.word	0x0000e264
    97d0:	1afd498d 	.word	0x1afd498d
    97d4:	00000007 	.word	0x00000007
    97d8:	3b9aca00 	.word	0x3b9aca00

000097dc <event_master>:
{
    97dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    97de:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    97e0:	4b4d      	ldr	r3, [pc, #308]	; (9918 <event_master+0x13c>)
    97e2:	7cda      	ldrb	r2, [r3, #19]
{
    97e4:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    97e6:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    97ea:	461d      	mov	r5, r3
    97ec:	b152      	cbz	r2, 9804 <event_master+0x28>
    97ee:	4a4b      	ldr	r2, [pc, #300]	; (991c <event_master+0x140>)
    97f0:	494b      	ldr	r1, [pc, #300]	; (9920 <event_master+0x144>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    97f2:	2003      	movs	r0, #3
    97f4:	f7f8 fd4c 	bl	2290 <bt_log>
    97f8:	4040      	eors	r0, r0
    97fa:	f380 8811 	msr	BASEPRI, r0
    97fe:	f04f 0004 	mov.w	r0, #4
    9802:	df02      	svc	2
    9804:	7c1b      	ldrb	r3, [r3, #16]
    9806:	8c22      	ldrh	r2, [r4, #32]
    9808:	b2db      	uxtb	r3, r3
    980a:	3207      	adds	r2, #7
    980c:	4293      	cmp	r3, r2
    980e:	d002      	beq.n	9816 <event_master+0x3a>
    9810:	4a42      	ldr	r2, [pc, #264]	; (991c <event_master+0x140>)
    9812:	4944      	ldr	r1, [pc, #272]	; (9924 <event_master+0x148>)
    9814:	e7ed      	b.n	97f2 <event_master+0x16>
	_radio.role = ROLE_MASTER;
    9816:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    9818:	f885 6718 	strb.w	r6, [r5, #1816]	; 0x718
	_radio.crc_expire = 0;
    981c:	f885 6719 	strb.w	r6, [r5, #1817]	; 0x719
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    9820:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    9822:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    9824:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    9826:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    9828:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    982a:	f8c5 4714 	str.w	r4, [r5, #1812]	; 0x714
	_radio.state = STATE_TX;
    982e:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    9830:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    9832:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    9834:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    9836:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    9838:	f7fc ff7a 	bl	6730 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    983c:	a901      	add	r1, sp, #4
    983e:	4620      	mov	r0, r4
    9840:	f7fe fc52 	bl	80e8 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    9844:	9901      	ldr	r1, [sp, #4]
    9846:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    984a:	780b      	ldrb	r3, [r1, #0]
    984c:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    9850:	f3c2 0240 	ubfx	r2, r2, #1, #1
    9854:	f362 0382 	bfi	r3, r2, #2, #1
    9858:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    985a:	4620      	mov	r0, r4
    985c:	f7fe fb5a 	bl	7f14 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    9860:	2096      	movs	r0, #150	; 0x96
    9862:	f001 fc5d 	bl	b120 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    9866:	4630      	mov	r0, r6
    9868:	f001 fbca 	bl	b000 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    986c:	9901      	ldr	r1, [sp, #4]
    986e:	4620      	mov	r0, r4
    9870:	f7fd f83e 	bl	68f0 <tx_packet_set>
	if (conn->data_chan_sel) {
    9874:	7f63      	ldrb	r3, [r4, #29]
    9876:	f013 0f40 	tst.w	r3, #64	; 0x40
    987a:	f104 0217 	add.w	r2, r4, #23
    987e:	d021      	beq.n	98c4 <event_master+0xe8>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    9880:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    9882:	8be1      	ldrh	r1, [r4, #30]
    9884:	3801      	subs	r0, #1
    9886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    988a:	b280      	uxth	r0, r0
    988c:	f7fd ff08 	bl	76a0 <chan_sel_2>
	chan_set(data_chan_use);
    9890:	f7fc fab8 	bl	5e04 <chan_set>
		remainder_us = radio_tmr_start(1,
    9894:	68ea      	ldr	r2, [r5, #12]
    9896:	f107 0109 	add.w	r1, r7, #9
    989a:	2001      	movs	r0, #1
    989c:	f001 fc4c 	bl	b138 <radio_tmr_start>
		radio_tmr_end_capture();
    98a0:	f001 fd1a 	bl	b2d8 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    98a4:	f894 1020 	ldrb.w	r1, [r4, #32]
    98a8:	3107      	adds	r1, #7
    98aa:	463a      	mov	r2, r7
    98ac:	b2c9      	uxtb	r1, r1
    98ae:	4620      	mov	r0, r4
    98b0:	f7fd fa74 	bl	6d9c <preempt_calc>
	if (0 !=
    98b4:	4603      	mov	r3, r0
    98b6:	b328      	cbz	r0, 9904 <event_master+0x128>
		_radio.state = STATE_STOP;
    98b8:	2304      	movs	r3, #4
    98ba:	752b      	strb	r3, [r5, #20]
		radio_disable();
    98bc:	f001 fb46 	bl	af4c <radio_disable>
}
    98c0:	b003      	add	sp, #12
    98c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    98c4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    98c6:	7fa6      	ldrb	r6, [r4, #30]
    98c8:	fb01 6606 	mla	r6, r1, r6, r6
    98cc:	7fe1      	ldrb	r1, [r4, #31]
    98ce:	2025      	movs	r0, #37	; 0x25
    98d0:	440e      	add	r6, r1
    98d2:	fb96 f1f0 	sdiv	r1, r6, r0
    98d6:	fb00 6611 	mls	r6, r0, r1, r6
    98da:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    98dc:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    98de:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    98e0:	5c51      	ldrb	r1, [r2, r1]
    98e2:	f006 0607 	and.w	r6, r6, #7
    98e6:	fa41 f606 	asr.w	r6, r1, r6
    98ea:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    98ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    98f0:	d4ce      	bmi.n	9890 <event_master+0xb4>
		chan_index = chan_next % chan_count;
    98f2:	fbb0 f1f3 	udiv	r1, r0, r3
    98f6:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    98fa:	b2c9      	uxtb	r1, r1
    98fc:	4610      	mov	r0, r2
    98fe:	f7fc f88d 	bl	5a1c <chan_sel_remap>
    9902:	e7c5      	b.n	9890 <event_master+0xb4>
		ticker_status =
    9904:	4a08      	ldr	r2, [pc, #32]	; (9928 <event_master+0x14c>)
    9906:	4601      	mov	r1, r0
    9908:	f7fb f874 	bl	49f4 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    990c:	f030 0302 	bics.w	r3, r0, #2
    9910:	d0d6      	beq.n	98c0 <event_master+0xe4>
    9912:	4a02      	ldr	r2, [pc, #8]	; (991c <event_master+0x140>)
    9914:	4905      	ldr	r1, [pc, #20]	; (992c <event_master+0x150>)
    9916:	e76c      	b.n	97f2 <event_master+0x16>
    9918:	200009f8 	.word	0x200009f8
    991c:	0000e4b2 	.word	0x0000e4b2
    9920:	0000e5e3 	.word	0x0000e5e3
    9924:	0000e644 	.word	0x0000e644
    9928:	000064b9 	.word	0x000064b9
    992c:	0000e56e 	.word	0x0000e56e

00009930 <radio_init>:
{
    9930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    9934:	4e3e      	ldr	r6, [pc, #248]	; (9a30 <radio_init+0x100>)
{
    9936:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9938:	f89d c01c 	ldrb.w	ip, [sp, #28]
    993c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    9940:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    9944:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    9948:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    994a:	f44f 7082 	mov.w	r0, #260	; 0x104
    994e:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    9952:	f886 1720 	strb.w	r1, [r6, #1824]	; 0x720
	_radio.conn_pool = mem_radio;
    9956:	f8c6 4708 	str.w	r4, [r6, #1800]	; 0x708
	mem_radio_end = mem_radio + mem_size;
    995a:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    995c:	f10c 0401 	add.w	r4, ip, #1
    9960:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    9962:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    9964:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    9968:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    996c:	f5b4 7f81 	cmp.w	r4, #258	; 0x102
	rx_count_max += 3;
    9970:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    9972:	bf98      	it	ls
    9974:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    9978:	f8a6 872c 	strh.w	r8, [r6, #1836]	; 0x72c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    997c:	bf88      	it	hi
    997e:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    9982:	f886 274c 	strb.w	r2, [r6, #1868]	; 0x74c
		_radio.packet_rx_data_pool_size =
    9986:	bf8c      	ite	hi
    9988:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    998c:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    9990:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    9994:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    9998:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    999c:	bf8c      	ite	hi
    999e:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    99a2:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    99a4:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    99a8:	f8a6 272e 	strh.w	r2, [r6, #1838]	; 0x72e
	_radio.packet_tx_count = (tx_count_max + 1);
    99ac:	f886 c76c 	strb.w	ip, [r6, #1900]	; 0x76c
	_radio.packet_rx = (void *)mem_radio;
    99b0:	f8c6 0734 	str.w	r0, [r6, #1844]	; 0x734
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    99b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    99b8:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    99bc:	f8b6 472e 	ldrh.w	r4, [r6, #1838]	; 0x72e
	_radio.pkt_tx = (void *)mem_radio;
    99c0:	f8c6 0764 	str.w	r0, [r6, #1892]	; 0x764
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    99c4:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    99c6:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    99ca:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    99ce:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    99d0:	f8a6 2730 	strh.w	r2, [r6, #1840]	; 0x730
	_radio.pkt_rx_data_pool = mem_radio;
    99d4:	f8c6 0724 	str.w	r0, [r6, #1828]	; 0x724
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    99d8:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    99dc:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    99de:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    99e2:	f8c6 073c 	str.w	r0, [r6, #1852]	; 0x73c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    99e6:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    99ea:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    99ee:	f8c6 0750 	str.w	r0, [r6, #1872]	; 0x750
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    99f2:	340a      	adds	r4, #10
    99f4:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    99f8:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    99fa:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    99fc:	f8a6 4760 	strh.w	r4, [r6, #1888]	; 0x760
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    9a00:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    9a04:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    9a06:	f886 3710 	strb.w	r3, [r6, #1808]	; 0x710
	_radio.packet_rx_count = (rx_count_max + 1);
    9a0a:	f886 e738 	strb.w	lr, [r6, #1848]	; 0x738
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9a0e:	f886 2732 	strb.w	r2, [r6, #1842]	; 0x732
	_radio.pkt_tx_data_pool = mem_radio;
    9a12:	f8c6 0758 	str.w	r0, [r6, #1880]	; 0x758
	if (retcode) {
    9a16:	d003      	beq.n	9a20 <radio_init+0xf0>
		return (retcode + mem_size);
    9a18:	442c      	add	r4, r5
}
    9a1a:	4620      	mov	r0, r4
    9a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    9a20:	2301      	movs	r3, #1
    9a22:	f886 377a 	strb.w	r3, [r6, #1914]	; 0x77a
	common_init();
    9a26:	f7fd fdb7 	bl	7598 <common_init>
	radio_setup();
    9a2a:	f001 f9b9 	bl	ada0 <radio_setup>
	return retcode;
    9a2e:	e7f4      	b.n	9a1a <radio_init+0xea>
    9a30:	200009f8 	.word	0x200009f8

00009a34 <ll_reset>:
{
    9a34:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    9a36:	2103      	movs	r1, #3
    9a38:	2005      	movs	r0, #5
    9a3a:	f7fc f8bb 	bl	5bb4 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    9a3e:	2104      	movs	r1, #4
    9a40:	2006      	movs	r0, #6
    9a42:	f7fc f8b7 	bl	5bb4 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    9a46:	4c22      	ldr	r4, [pc, #136]	; (9ad0 <ll_reset+0x9c>)
    9a48:	2500      	movs	r5, #0
    9a4a:	f894 2710 	ldrb.w	r2, [r4, #1808]	; 0x710
    9a4e:	b2ab      	uxth	r3, r5
    9a50:	429a      	cmp	r2, r3
    9a52:	f105 0501 	add.w	r5, r5, #1
    9a56:	d835      	bhi.n	9ac4 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    9a58:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9a5c:	f36f 13c7 	bfc	r3, #7, #1
    9a60:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    9a64:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.advertiser.conn = NULL;
    9a68:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    9a6a:	f360 0300 	bfi	r3, r0, #0, #1
    9a6e:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9a72:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9a76:	f8b4 372e 	ldrh.w	r3, [r4, #1838]	; 0x72e
    9a7a:	fbb3 f3f2 	udiv	r3, r3, r2
    9a7e:	f884 3732 	strb.w	r3, [r4, #1842]	; 0x732
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9a82:	f894 3738 	ldrb.w	r3, [r4, #1848]	; 0x738
	_radio.packet_rx_last = 0;
    9a86:	f884 0739 	strb.w	r0, [r4, #1849]	; 0x739
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9a8a:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    9a8c:	f884 076d 	strb.w	r0, [r4, #1901]	; 0x76d
	_radio.packet_release_last = 0;
    9a90:	f884 0770 	strb.w	r0, [r4, #1904]	; 0x770
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9a94:	f884 374c 	strb.w	r3, [r4, #1868]	; 0x74c
	_radio.fc_ack = _radio.fc_req;
    9a98:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
	_radio.advertiser.conn = NULL;
    9a9c:	f8c4 0638 	str.w	r0, [r4, #1592]	; 0x638
	_radio.scanner.conn = NULL;
    9aa0:	f8c4 0674 	str.w	r0, [r4, #1652]	; 0x674
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9aa4:	f8a4 2730 	strh.w	r2, [r4, #1840]	; 0x730
	_radio.packet_rx_acquire = 0;
    9aa8:	f884 073a 	strb.w	r0, [r4, #1850]	; 0x73a
	_radio.packet_tx_last = 0;
    9aac:	f884 076e 	strb.w	r0, [r4, #1902]	; 0x76e
	_radio.packet_release_first = 0;
    9ab0:	f884 076f 	strb.w	r0, [r4, #1903]	; 0x76f
	_radio.fc_ack = _radio.fc_req;
    9ab4:	f884 3779 	strb.w	r3, [r4, #1913]	; 0x779
	ll_filter_reset(false);
    9ab8:	f001 f83a 	bl	ab30 <ll_filter_reset>
}
    9abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    9ac0:	f7fd bd6a 	b.w	7598 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    9ac4:	1da8      	adds	r0, r5, #6
    9ac6:	21ff      	movs	r1, #255	; 0xff
    9ac8:	b2c0      	uxtb	r0, r0
    9aca:	f7fc f873 	bl	5bb4 <role_disable>
    9ace:	e7bc      	b.n	9a4a <ll_reset+0x16>
    9ad0:	200009f8 	.word	0x200009f8

00009ad4 <radio_adv_data_get>:
}
    9ad4:	4800      	ldr	r0, [pc, #0]	; (9ad8 <radio_adv_data_get+0x4>)
    9ad6:	4770      	bx	lr
    9ad8:	20000a23 	.word	0x20000a23

00009adc <radio_aux_adv_data_get>:
}
    9adc:	4800      	ldr	r0, [pc, #0]	; (9ae0 <radio_aux_adv_data_get+0x4>)
    9ade:	4770      	bx	lr
    9ae0:	20000c27 	.word	0x20000c27

00009ae4 <radio_scan_data_get>:
}
    9ae4:	4800      	ldr	r0, [pc, #0]	; (9ae8 <radio_scan_data_get+0x4>)
    9ae6:	4770      	bx	lr
    9ae8:	20000e2b 	.word	0x20000e2b

00009aec <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    9aec:	4b02      	ldr	r3, [pc, #8]	; (9af8 <ll_adv_is_enabled+0xc>)
    9aee:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    9af2:	09c0      	lsrs	r0, r0, #7
    9af4:	4770      	bx	lr
    9af6:	bf00      	nop
    9af8:	200009f8 	.word	0x200009f8

00009afc <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    9afc:	4b05      	ldr	r3, [pc, #20]	; (9b14 <radio_adv_filter_pol_get+0x18>)
    9afe:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    9b02:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    9b04:	bfba      	itte	lt
    9b06:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    9b0a:	f000 0003 	andlt.w	r0, r0, #3
    9b0e:	2000      	movge	r0, #0
}
    9b10:	4770      	bx	lr
    9b12:	bf00      	nop
    9b14:	200009f8 	.word	0x200009f8

00009b18 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9b18:	4a09      	ldr	r2, [pc, #36]	; (9b40 <ll_scan_is_enabled+0x28>)
    9b1a:	f892 364c 	ldrb.w	r3, [r2, #1612]	; 0x64c
    9b1e:	f892 064d 	ldrb.w	r0, [r2, #1613]	; 0x64d
	       (_radio.scanner.conn ? BIT(2) : 0);
    9b22:	f8d2 2674 	ldr.w	r2, [r2, #1652]	; 0x674
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9b26:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    9b2a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9b2c:	f003 0301 	and.w	r3, r3, #1
    9b30:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    9b34:	bf14      	ite	ne
    9b36:	2004      	movne	r0, #4
    9b38:	2000      	moveq	r0, #0
}
    9b3a:	4318      	orrs	r0, r3
    9b3c:	4770      	bx	lr
    9b3e:	bf00      	nop
    9b40:	200009f8 	.word	0x200009f8

00009b44 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    9b44:	4b05      	ldr	r3, [pc, #20]	; (9b5c <radio_scan_filter_pol_get+0x18>)
    9b46:	f893 064c 	ldrb.w	r0, [r3, #1612]	; 0x64c
    9b4a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    9b4e:	bf1c      	itt	ne
    9b50:	f893 064d 	ldrbne.w	r0, [r3, #1613]	; 0x64d
    9b54:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    9b58:	4770      	bx	lr
    9b5a:	bf00      	nop
    9b5c:	200009f8 	.word	0x200009f8

00009b60 <ll_tx_pwr_lvl_get>:
{
    9b60:	b510      	push	{r4, lr}
    9b62:	4614      	mov	r4, r2
	conn = connection_get(handle);
    9b64:	f7fc f810 	bl	5b88 <connection_get>
	if (!conn) {
    9b68:	b110      	cbz	r0, 9b70 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    9b6a:	2000      	movs	r0, #0
    9b6c:	7020      	strb	r0, [r4, #0]
	return 0;
    9b6e:	bd10      	pop	{r4, pc}
		return 1;
    9b70:	2001      	movs	r0, #1
}
    9b72:	bd10      	pop	{r4, pc}

00009b74 <ll_rx_get>:
{
    9b74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9b78:	4605      	mov	r5, r0
    9b7a:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    9b7c:	4918      	ldr	r1, [pc, #96]	; (9be0 <ll_rx_get+0x6c>)
    9b7e:	f8d1 3744 	ldr.w	r3, [r1, #1860]	; 0x744
    9b82:	f8d1 2748 	ldr.w	r2, [r1, #1864]	; 0x748
    9b86:	4293      	cmp	r3, r2
    9b88:	460f      	mov	r7, r1
    9b8a:	d01f      	beq.n	9bcc <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    9b8c:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9b90:	f201 716f 	addw	r1, r1, #1903	; 0x76f
    9b94:	f898 2000 	ldrb.w	r2, [r8]
    9b98:	f7fb ffac 	bl	5af4 <tx_cmplt_get>
		if (!cmplt) {
    9b9c:	4604      	mov	r4, r0
    9b9e:	b9e0      	cbnz	r0, 9bda <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    9ba0:	ae02      	add	r6, sp, #8
    9ba2:	f897 376f 	ldrb.w	r3, [r7, #1903]	; 0x76f
    9ba6:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    9baa:	f897 2770 	ldrb.w	r2, [r7, #1904]	; 0x770
    9bae:	4631      	mov	r1, r6
    9bb0:	f10d 0006 	add.w	r0, sp, #6
    9bb4:	f7fb ff9e 	bl	5af4 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    9bb8:	b934      	cbnz	r4, 9bc8 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    9bba:	b928      	cbnz	r0, 9bc8 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    9bbc:	f8c5 8000 	str.w	r8, [r5]
}
    9bc0:	4620      	mov	r0, r4
    9bc2:	b002      	add	sp, #8
    9bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    9bc8:	4604      	mov	r4, r0
    9bca:	e7ee      	b.n	9baa <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9bcc:	f891 2770 	ldrb.w	r2, [r1, #1904]	; 0x770
    9bd0:	f201 716f 	addw	r1, r1, #1903	; 0x76f
    9bd4:	f7fb ff8e 	bl	5af4 <tx_cmplt_get>
    9bd8:	4604      	mov	r4, r0
		*node_rx = NULL;
    9bda:	2300      	movs	r3, #0
    9bdc:	602b      	str	r3, [r5, #0]
    9bde:	e7ef      	b.n	9bc0 <ll_rx_get+0x4c>
    9be0:	200009f8 	.word	0x200009f8

00009be4 <ll_rx_mem_release>:
{
    9be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    9be8:	4c19      	ldr	r4, [pc, #100]	; (9c50 <ll_rx_mem_release+0x6c>)
{
    9bea:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    9bec:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9bee:	f5a4 66e5 	sub.w	r6, r4, #1832	; 0x728
			mem_release(conn, &_radio.conn_free);
    9bf2:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    9bf6:	b920      	cbnz	r0, 9c02 <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    9bf8:	6028      	str	r0, [r5, #0]
}
    9bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    9bfe:	f7fd bc81 	b.w	7504 <packet_rx_allocate.constprop.51>
		switch (_node_rx_free->hdr.type) {
    9c02:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    9c04:	f8d0 8000 	ldr.w	r8, [r0]
    9c08:	2a0a      	cmp	r2, #10
    9c0a:	d807      	bhi.n	9c1c <ll_rx_mem_release+0x38>
    9c0c:	2301      	movs	r3, #1
    9c0e:	4093      	lsls	r3, r2
    9c10:	f240 727e 	movw	r2, #1918	; 0x77e
    9c14:	4213      	tst	r3, r2
    9c16:	d10c      	bne.n	9c32 <ll_rx_mem_release+0x4e>
    9c18:	061b      	lsls	r3, r3, #24
    9c1a:	d40f      	bmi.n	9c3c <ll_rx_mem_release+0x58>
			LL_ASSERT(0);
    9c1c:	4a0d      	ldr	r2, [pc, #52]	; (9c54 <ll_rx_mem_release+0x70>)
    9c1e:	490e      	ldr	r1, [pc, #56]	; (9c58 <ll_rx_mem_release+0x74>)
    9c20:	2003      	movs	r0, #3
    9c22:	f7f8 fb35 	bl	2290 <bt_log>
    9c26:	4040      	eors	r0, r0
    9c28:	f380 8811 	msr	BASEPRI, r0
    9c2c:	f04f 0004 	mov.w	r0, #4
    9c30:	df02      	svc	2
			mem_release(_node_rx_free,
    9c32:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    9c34:	f7f9 ff6f 	bl	3b16 <mem_release>
{
    9c38:	4640      	mov	r0, r8
    9c3a:	e7dc      	b.n	9bf6 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9c3c:	88c2      	ldrh	r2, [r0, #6]
    9c3e:	f8d6 0708 	ldr.w	r0, [r6, #1800]	; 0x708
    9c42:	f44f 7182 	mov.w	r1, #260	; 0x104
    9c46:	f7f9 ff7b 	bl	3b40 <mem_get>
			mem_release(conn, &_radio.conn_free);
    9c4a:	4639      	mov	r1, r7
    9c4c:	e7f2      	b.n	9c34 <ll_rx_mem_release+0x50>
    9c4e:	bf00      	nop
    9c50:	20001120 	.word	0x20001120
    9c54:	0000e55c 	.word	0x0000e55c
    9c58:	0000d76b 	.word	0x0000d76b

00009c5c <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    9c5c:	4291      	cmp	r1, r2
{
    9c5e:	b510      	push	{r4, lr}
    9c60:	4b14      	ldr	r3, [pc, #80]	; (9cb4 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    9c62:	d119      	bne.n	9c98 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    9c64:	f8d3 2748 	ldr.w	r2, [r3, #1864]	; 0x748
    9c68:	f8d3 4744 	ldr.w	r4, [r3, #1860]	; 0x744
    9c6c:	4294      	cmp	r4, r2
    9c6e:	d111      	bne.n	9c94 <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    9c70:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    9c72:	bf14      	ite	ne
    9c74:	460a      	movne	r2, r1
    9c76:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    9c78:	3a01      	subs	r2, #1
    9c7a:	b2d2      	uxtb	r2, r2
    9c7c:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    9c80:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    9c84:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
			_radio.fc_handle[--ack1] = handle;
    9c88:	f8a4 0772 	strh.w	r0, [r4, #1906]	; 0x772
			if (req != _radio.fc_req) {
    9c8c:	4291      	cmp	r1, r2
    9c8e:	d00f      	beq.n	9cb0 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    9c90:	f883 1779 	strb.w	r1, [r3, #1913]	; 0x779

				return 1;
			}
		} else {
			return 1;
    9c94:	2001      	movs	r0, #1
    9c96:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    9c98:	b929      	cbnz	r1, 9ca6 <do_radio_rx_fc_set+0x4a>
    9c9a:	f8b3 3776 	ldrh.w	r3, [r3, #1910]	; 0x776
				return 1;
    9c9e:	1a18      	subs	r0, r3, r0
    9ca0:	bf18      	it	ne
    9ca2:	2001      	movne	r0, #1
    9ca4:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    9ca6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    9caa:	f8b3 3770 	ldrh.w	r3, [r3, #1904]	; 0x770
    9cae:	e7f6      	b.n	9c9e <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    9cb0:	2000      	movs	r0, #0
}
    9cb2:	bd10      	pop	{r4, pc}
    9cb4:	200009f8 	.word	0x200009f8

00009cb8 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    9cb8:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    9cba:	4b14      	ldr	r3, [pc, #80]	; (9d0c <radio_rx_fc_set+0x54>)
    9cbc:	f893 277a 	ldrb.w	r2, [r3, #1914]	; 0x77a
{
    9cc0:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    9cc2:	b302      	cbz	r2, 9d06 <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    9cc4:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
    9cc8:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    9cca:	f893 2779 	ldrb.w	r2, [r3, #1913]	; 0x779

		if (fc) {
    9cce:	b135      	cbz	r5, 9cde <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    9cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9cd4:	4298      	cmp	r0, r3
    9cd6:	d016      	beq.n	9d06 <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    9cd8:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    9cda:	f7ff bfbf 	b.w	9c5c <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    9cde:	f8d3 0744 	ldr.w	r0, [r3, #1860]	; 0x744
    9ce2:	f8d3 4748 	ldr.w	r4, [r3, #1864]	; 0x748
    9ce6:	42a0      	cmp	r0, r4
    9ce8:	d10d      	bne.n	9d06 <radio_rx_fc_set+0x4e>
    9cea:	4291      	cmp	r1, r2
    9cec:	d00b      	beq.n	9d06 <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9cee:	f8d3 4748 	ldr.w	r4, [r3, #1864]	; 0x748
			_radio.fc_ack = req;
    9cf2:	f883 1779 	strb.w	r1, [r3, #1913]	; 0x779
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9cf6:	42a0      	cmp	r0, r4
    9cf8:	d005      	beq.n	9d06 <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    9cfa:	f893 0778 	ldrb.w	r0, [r3, #1912]	; 0x778
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9cfe:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    9d00:	bf08      	it	eq
    9d02:	f883 2779 	strbeq.w	r2, [r3, #1913]	; 0x779
}
    9d06:	2000      	movs	r0, #0
    9d08:	bc30      	pop	{r4, r5}
    9d0a:	4770      	bx	lr
    9d0c:	200009f8 	.word	0x200009f8

00009d10 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    9d10:	4770      	bx	lr
    9d12:	0000      	movs	r0, r0
    9d14:	0000      	movs	r0, r0
	...

00009d18 <radio_adv_enable>:
{
    9d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d1c:	b091      	sub	sp, #68	; 0x44
	if (_radio.advertiser.is_enabled) {
    9d1e:	f8df a288 	ldr.w	sl, [pc, #648]	; 9fa8 <radio_adv_enable+0x290>
{
    9d22:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    9d24:	2302      	movs	r3, #2
    9d26:	930f      	str	r3, [sp, #60]	; 0x3c
	if (_radio.advertiser.is_enabled) {
    9d28:	f99a 3028 	ldrsb.w	r3, [sl, #40]	; 0x28
{
    9d2c:	f89d 606c 	ldrb.w	r6, [sp, #108]	; 0x6c
    9d30:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	if (_radio.advertiser.is_enabled) {
    9d34:	2b00      	cmp	r3, #0
{
    9d36:	4683      	mov	fp, r0
    9d38:	4689      	mov	r9, r1
    9d3a:	4655      	mov	r5, sl
	if (_radio.advertiser.is_enabled) {
    9d3c:	da01      	bge.n	9d42 <radio_adv_enable+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    9d3e:	200c      	movs	r0, #12
    9d40:	e1ea      	b.n	a118 <radio_adv_enable+0x400>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9d42:	f89a 822e 	ldrb.w	r8, [sl, #558]	; 0x22e
    9d46:	eb08 2808 	add.w	r8, r8, r8, lsl #8
    9d4a:	f108 082b 	add.w	r8, r8, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9d4e:	f81a 3008 	ldrb.w	r3, [sl, r8]
    9d52:	f003 030f 	and.w	r3, r3, #15
    9d56:	2b01      	cmp	r3, #1
    9d58:	f200 80fd 	bhi.w	9f56 <radio_adv_enable+0x23e>
		if (_radio.advertiser.conn) {
    9d5c:	f8da 7638 	ldr.w	r7, [sl, #1592]	; 0x638
    9d60:	2f00      	cmp	r7, #0
    9d62:	d1ec      	bne.n	9d3e <radio_adv_enable+0x26>
		link = mem_acquire(&_radio.link_rx_free);
    9d64:	f50a 60e8 	add.w	r0, sl, #1856	; 0x740
    9d68:	f7f9 febb 	bl	3ae2 <mem_acquire>
		if (!link) {
    9d6c:	900c      	str	r0, [sp, #48]	; 0x30
    9d6e:	b158      	cbz	r0, 9d88 <radio_adv_enable+0x70>
		conn = mem_acquire(&_radio.conn_free);
    9d70:	f20a 700c 	addw	r0, sl, #1804	; 0x70c
    9d74:	f7f9 feb5 	bl	3ae2 <mem_acquire>
		if (!conn) {
    9d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d7a:	4604      	mov	r4, r0
    9d7c:	b930      	cbnz	r0, 9d8c <radio_adv_enable+0x74>
			mem_release(link, &_radio.link_rx_free);
    9d7e:	f50a 61e8 	add.w	r1, sl, #1856	; 0x740
    9d82:	4618      	mov	r0, r3
    9d84:	f7f9 fec7 	bl	3b16 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9d88:	2007      	movs	r0, #7
    9d8a:	e1c5      	b.n	a118 <radio_adv_enable+0x400>
		conn->handle = 0xFFFF;
    9d8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9d90:	8401      	strh	r1, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    9d92:	497f      	ldr	r1, [pc, #508]	; (9f90 <radio_adv_enable+0x278>)
    9d94:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    9d98:	7f41      	ldrb	r1, [r0, #29]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    9d9a:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
		conn->data_chan_sel = 0;
    9d9e:	f367 1186 	bfi	r1, r7, #6, #1
		conn->role = 1;
    9da2:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn->sn = 0;
    9da6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->role = 1;
    9daa:	7741      	strb	r1, [r0, #29]
		conn->connect_expire = 6;
    9dac:	2106      	movs	r1, #6
    9dae:	8581      	strh	r1, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    9db0:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
		conn->data_chan_use = 0;
    9db4:	77c7      	strb	r7, [r0, #31]
		conn->sn = 0;
    9db6:	f367 0300 	bfi	r3, r7, #0, #1
		conn->common.fex_valid = 0;
    9dba:	f367 1145 	bfi	r1, r7, #5, #1
		conn->nesn = 0;
    9dbe:	f367 0341 	bfi	r3, r7, #1, #1
		conn->slave.latency_enabled = 0;
    9dc2:	f367 0100 	bfi	r1, r7, #0, #1
		conn->pause_rx = 0;
    9dc6:	f367 0382 	bfi	r3, r7, #2, #1
		conn->slave.latency_cancel = 0;
    9dca:	f367 0141 	bfi	r1, r7, #1, #1
		conn->pause_tx = 0;
    9dce:	f367 03c3 	bfi	r3, r7, #3, #1
		conn->slave.latency_cancel = 0;
    9dd2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
		conn->enc_rx = 0;
    9dd6:	f367 1304 	bfi	r3, r7, #4, #1
		conn->llcp_version.tx = 0;
    9dda:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
		conn->event_counter = 0;
    9dde:	8447      	strh	r7, [r0, #34]	; 0x22
		conn->enc_tx = 0;
    9de0:	f367 1345 	bfi	r3, r7, #5, #1
		conn->llcp_version.tx = 0;
    9de4:	f367 0100 	bfi	r1, r7, #0, #1
		conn->refresh = 0;
    9de8:	f367 1386 	bfi	r3, r7, #6, #1
		conn->llcp_version.rx = 0;
    9dec:	f367 0141 	bfi	r1, r7, #1, #1
		conn->empty = 0;
    9df0:	f367 13c7 	bfi	r3, r7, #7, #1
		conn->latency_prepare = 0;
    9df4:	8507      	strh	r7, [r0, #40]	; 0x28
		conn->latency_event = 0;
    9df6:	8547      	strh	r7, [r0, #42]	; 0x2a
		conn->slave.window_widening_prepare_us = 0;
    9df8:	6447      	str	r7, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    9dfa:	6487      	str	r7, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    9dfc:	6587      	str	r7, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    9dfe:	8607      	strh	r7, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    9e00:	8687      	strh	r7, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    9e02:	f880 705c 	strb.w	r7, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    9e06:	f880 705d 	strb.w	r7, [r0, #93]	; 0x5d
		conn->llcp_version.rx = 0;
    9e0a:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
		conn->llcp_terminate.req = 0;
    9e0e:	f880 7098 	strb.w	r7, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    9e12:	f880 7099 	strb.w	r7, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    9e16:	f880 709b 	strb.w	r7, [r0, #155]	; 0x9b
		conn->empty = 0;
    9e1a:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    9e1e:	f8c0 70ec 	str.w	r7, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    9e22:	f8c0 70f0 	str.w	r7, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    9e26:	f8c0 70f4 	str.w	r7, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    9e2a:	f8c0 70f8 	str.w	r7, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    9e2e:	f8c0 70fc 	str.w	r7, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    9e32:	f880 7100 	strb.w	r7, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    9e36:	f880 7101 	strb.w	r7, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    9e3a:	f8ca 0638 	str.w	r0, [sl, #1592]	; 0x638
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9e3e:	a810      	add	r0, sp, #64	; 0x40
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    9e40:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9e44:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    9e48:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
    9e4c:	f361 1306 	bfi	r3, r1, #4, #3
    9e50:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    9e54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9e56:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    9e5a:	f362 0301 	bfi	r3, r2, #0, #2
    9e5e:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
    9e62:	f8d5 377c 	ldr.w	r3, [r5, #1916]	; 0x77c
    9e66:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    9e68:	2327      	movs	r3, #39	; 0x27
    9e6a:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9e6c:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    9e6e:	2300      	movs	r3, #0
    9e70:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9e72:	f7f9 ffcf 	bl	3e14 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9e76:	f81a 7008 	ldrb.w	r7, [sl, r8]
    9e7a:	f007 070f 	and.w	r7, r7, #15
    9e7e:	2f01      	cmp	r7, #1
    9e80:	d16b      	bne.n	9f5a <radio_adv_enable+0x242>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    9e82:	f44f 7327 	mov.w	r3, #668	; 0x29c
    9e86:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    9e88:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9e8c:	f8df 811c 	ldr.w	r8, [pc, #284]	; 9fac <radio_adv_enable+0x294>
    9e90:	a33d      	add	r3, pc, #244	; (adr r3, 9f88 <radio_adv_enable+0x270>)
    9e92:	e9d3 2300 	ldrd	r2, r3, [r3]
    9e96:	fba0 0108 	umull	r0, r1, r0, r8
    9e9a:	f7f6 f9e5 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    9e9e:	69eb      	ldr	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    9ea0:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    9ea2:	69a8      	ldr	r0, [r5, #24]
    9ea4:	4283      	cmp	r3, r0
    9ea6:	bf38      	it	cc
    9ea8:	4603      	movcc	r3, r0
    9eaa:	469b      	mov	fp, r3
	_radio.advertiser.is_hdcd = !interval &&
    9eac:	f1b9 0f00 	cmp.w	r9, #0
    9eb0:	d160      	bne.n	9f74 <radio_adv_enable+0x25c>
    9eb2:	1e7a      	subs	r2, r7, #1
    9eb4:	4253      	negs	r3, r2
    9eb6:	4153      	adcs	r3, r2
    9eb8:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
    9ebc:	f363 1786 	bfi	r7, r3, #6, #1
    9ec0:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    9ec4:	f017 0740 	ands.w	r7, r7, #64	; 0x40
    9ec8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    9ecc:	d070      	beq.n	9fb0 <radio_adv_enable+0x298>
		u32_t ticks_now = ticker_ticks_now_get();
    9ece:	f7fa fde3 	bl	4a98 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9ed4:	4a2f      	ldr	r2, [pc, #188]	; (9f94 <radio_adv_enable+0x27c>)
    9ed6:	9207      	str	r2, [sp, #28]
    9ed8:	445b      	add	r3, fp
		u32_t ticks_now = ticker_ticks_now_get();
    9eda:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9edc:	4a2e      	ldr	r2, [pc, #184]	; (9f98 <radio_adv_enable+0x280>)
    9ede:	9205      	str	r2, [sp, #20]
    9ee0:	2000      	movs	r0, #0
    9ee2:	9304      	str	r3, [sp, #16]
    9ee4:	e88d 0009 	stmia.w	sp, {r0, r3}
    9ee8:	f8cd a020 	str.w	sl, [sp, #32]
    9eec:	9006      	str	r0, [sp, #24]
    9eee:	9003      	str	r0, [sp, #12]
    9ef0:	9002      	str	r0, [sp, #8]
    9ef2:	4633      	mov	r3, r6
    9ef4:	2205      	movs	r2, #5
    9ef6:	2103      	movs	r1, #3
    9ef8:	f7fa fc60 	bl	47bc <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    9efc:	2802      	cmp	r0, #2
    9efe:	d03d      	beq.n	9f7c <radio_adv_enable+0x264>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    9f00:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9f02:	b9d8      	cbnz	r0, 9f3c <radio_adv_enable+0x224>
		ret_cb = TICKER_STATUS_BUSY;
    9f04:	2302      	movs	r3, #2
    9f06:	930f      	str	r3, [sp, #60]	; 0x3c
		ret =
    9f08:	4b22      	ldr	r3, [pc, #136]	; (9f94 <radio_adv_enable+0x27c>)
    9f0a:	9307      	str	r3, [sp, #28]
    9f0c:	4b23      	ldr	r3, [pc, #140]	; (9f9c <radio_adv_enable+0x284>)
    9f0e:	9305      	str	r3, [sp, #20]
    9f10:	2203      	movs	r2, #3
    9f12:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    9f16:	9300      	str	r3, [sp, #0]
    9f18:	f8cd a020 	str.w	sl, [sp, #32]
    9f1c:	9006      	str	r0, [sp, #24]
    9f1e:	9004      	str	r0, [sp, #16]
    9f20:	9003      	str	r0, [sp, #12]
    9f22:	9002      	str	r0, [sp, #8]
    9f24:	9001      	str	r0, [sp, #4]
    9f26:	4633      	mov	r3, r6
    9f28:	4611      	mov	r1, r2
		ret=	
    9f2a:	f7fa fc47 	bl	47bc <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    9f2e:	2802      	cmp	r0, #2
    9f30:	f000 80df 	beq.w	a0f2 <radio_adv_enable+0x3da>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    9f34:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9f36:	2800      	cmp	r0, #0
    9f38:	f000 80df 	beq.w	a0fa <radio_adv_enable+0x3e2>
	if (conn) {
    9f3c:	2c00      	cmp	r4, #0
    9f3e:	f43f aefe 	beq.w	9d3e <radio_adv_enable+0x26>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    9f42:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    9f46:	4916      	ldr	r1, [pc, #88]	; (9fa0 <radio_adv_enable+0x288>)
    9f48:	f7f9 fde5 	bl	3b16 <mem_release>
		mem_release(conn, &_radio.conn_free);
    9f4c:	4915      	ldr	r1, [pc, #84]	; (9fa4 <radio_adv_enable+0x28c>)
    9f4e:	4620      	mov	r0, r4
    9f50:	f7f9 fde1 	bl	3b16 <mem_release>
    9f54:	e6f3      	b.n	9d3e <radio_adv_enable+0x26>
		conn = NULL;
    9f56:	2400      	movs	r4, #0
    9f58:	e771      	b.n	9e3e <radio_adv_enable+0x126>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    9f5a:	2f02      	cmp	r7, #2
    9f5c:	d103      	bne.n	9f66 <radio_adv_enable+0x24e>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    9f5e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    9f62:	4358      	muls	r0, r3
    9f64:	e792      	b.n	9e8c <radio_adv_enable+0x174>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9f66:	2f07      	cmp	r7, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2120) * chan_cnt) ;  // 265byte =2120us
    9f68:	bf0c      	ite	eq
    9f6a:	f640 1374 	movweq	r3, #2420	; 0x974
			   152 + 376) * chan_cnt;
    9f6e:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    9f72:	e7f6      	b.n	9f62 <radio_adv_enable+0x24a>
    9f74:	2300      	movs	r3, #0
    9f76:	e79f      	b.n	9eb8 <radio_adv_enable+0x1a0>
				cpu_sleep();
    9f78:	f7fb fd20 	bl	59bc <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9f7e:	2b02      	cmp	r3, #2
    9f80:	d0fa      	beq.n	9f78 <radio_adv_enable+0x260>
    9f82:	e7bd      	b.n	9f00 <radio_adv_enable+0x1e8>
    9f84:	f3af 8000 	nop.w
    9f88:	1afd498d 	.word	0x1afd498d
    9f8c:	00000007 	.word	0x00000007
    9f90:	0001400c 	.word	0x0001400c
    9f94:	00005a01 	.word	0x00005a01
    9f98:	000071f9 	.word	0x000071f9
    9f9c:	00007299 	.word	0x00007299
    9fa0:	20001138 	.word	0x20001138
    9fa4:	20001104 	.word	0x20001104
    9fa8:	200009f8 	.word	0x200009f8
    9fac:	3b9aca00 	.word	0x3b9aca00
		u32_t ticks_now = ticker_ticks_now_get();
    9fb0:	f7fa fd72 	bl	4a98 <ticker_ticks_now_get>
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
    9fb4:	f240 2171 	movw	r1, #625	; 0x271
    9fb8:	fb01 f206 	mul.w	r2, r1, r6
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    9fbc:	fb01 f109 	mul.w	r1, r1, r9
    9fc0:	f8c5 1680 	str.w	r1, [r5, #1664]	; 0x680
		pdu = (void *)_radio.advertiser.adv_data.data
    9fc4:	f895 122d 	ldrb.w	r1, [r5, #557]	; 0x22d
		_radio.ext_advertiser.max_skip = skip;
    9fc8:	f885 6688 	strb.w	r6, [r5, #1672]	; 0x688
		size = pdu->len + 2;
    9fcc:	eb01 2101 	add.w	r1, r1, r1, lsl #8
    9fd0:	4429      	add	r1, r5
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
    9fd2:	f242 7310 	movw	r3, #10000	; 0x2710
		u32_t ticks_now = ticker_ticks_now_get();
    9fd6:	900b      	str	r0, [sp, #44]	; 0x2c
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
    9fd8:	fb09 3002 	mla	r0, r9, r2, r3
		size = pdu->len + 2;
    9fdc:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
    9fe0:	f8c5 067c 	str.w	r0, [r5, #1660]	; 0x67c
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(183 *max_skip ) );
    9fe4:	22b7      	movs	r2, #183	; 0xb7
    9fe6:	fb12 0206 	smlabb	r2, r2, r6, r0
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
    9fea:	00db      	lsls	r3, r3, #3
    9fec:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(183 *max_skip ) ) -((final_pckt_size + 50)));
    9fee:	f1a2 0132 	sub.w	r1, r2, #50	; 0x32
    9ff2:	1ac9      	subs	r1, r1, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(183 *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    9ff4:	3332      	adds	r3, #50	; 0x32
    9ff6:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    9ffa:	f8c5 3698 	str.w	r3, [r5, #1688]	; 0x698
		ret =
    9ffe:	4b4a      	ldr	r3, [pc, #296]	; (a128 <radio_adv_enable+0x410>)
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(183 *max_skip ) );
    a000:	f8c5 2690 	str.w	r2, [r5, #1680]	; 0x690
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(183 *max_skip ) ) -((final_pckt_size + 50)));
    a004:	f8c5 1694 	str.w	r1, [r5, #1684]	; 0x694
		ret =
    a008:	9307      	str	r3, [sp, #28]
    a00a:	4b48      	ldr	r3, [pc, #288]	; (a12c <radio_adv_enable+0x414>)
    a00c:	f8cd a020 	str.w	sl, [sp, #32]
    a010:	9706      	str	r7, [sp, #24]
    a012:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a014:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a016:	4846      	ldr	r0, [pc, #280]	; (a130 <radio_adv_enable+0x418>)
		ret =
    a018:	9703      	str	r7, [sp, #12]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a01a:	fa1f f289 	uxth.w	r2, r9
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a01e:	445b      	add	r3, fp
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a020:	fba2 0100 	umull	r0, r1, r2, r0
		ret =
    a024:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a026:	2391      	movs	r3, #145	; 0x91
    a028:	fb03 1102 	mla	r1, r3, r2, r1
    a02c:	a33c      	add	r3, pc, #240	; (adr r3, a120 <radio_adv_enable+0x408>)
    a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    a032:	9702      	str	r7, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a034:	f7f6 f918 	bl	268 <__aeabi_uldivmod>
		ret =
    a038:	9700      	str	r7, [sp, #0]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    a03a:	9001      	str	r0, [sp, #4]
		ret =
    a03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a03e:	2205      	movs	r2, #5
    a040:	2103      	movs	r1, #3
    a042:	4638      	mov	r0, r7
    a044:	f7fa fbba 	bl	47bc <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    a048:	2802      	cmp	r0, #2
    a04a:	d04c      	beq.n	a0e6 <radio_adv_enable+0x3ce>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    a04c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    a04e:	2f00      	cmp	r7, #0
    a050:	f47f af74 	bne.w	9f3c <radio_adv_enable+0x224>
		ret_cb = TICKER_STATUS_BUSY;
    a054:	2302      	movs	r3, #2
    a056:	930f      	str	r3, [sp, #60]	; 0x3c
		ret=	
    a058:	4b33      	ldr	r3, [pc, #204]	; (a128 <radio_adv_enable+0x410>)
    a05a:	9307      	str	r3, [sp, #28]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a05c:	f50b 70bc 	add.w	r0, fp, #376	; 0x178
		ret=	
    a060:	4b34      	ldr	r3, [pc, #208]	; (a134 <radio_adv_enable+0x41c>)
    a062:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a064:	fba0 0108 	umull	r0, r1, r0, r8
    a068:	a32d      	add	r3, pc, #180	; (adr r3, a120 <radio_adv_enable+0x408>)
    a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
    a06e:	f8cd a020 	str.w	sl, [sp, #32]
    a072:	9706      	str	r7, [sp, #24]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    a074:	f7f6 f8f8 	bl	268 <__aeabi_uldivmod>
		u8_t offset = skip + 1;
    a078:	1c72      	adds	r2, r6, #1
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a07a:	b2d2      	uxtb	r2, r2
		u16_t ticker_offset = 30 * max_skip; //to compensate the diff btween ext packet and aux packet. without this it shifts 30 *max_skip microsec
    a07c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a080:	fba2 2309 	umull	r2, r3, r2, r9
    a084:	f240 2e71 	movw	lr, #625	; 0x271
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a088:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u16_t ticker_offset = 30 * max_skip; //to compensate the diff btween ext packet and aux packet. without this it shifts 30 *max_skip microsec
    a08c:	0076      	lsls	r6, r6, #1
		ret=	
    a08e:	9004      	str	r0, [sp, #16]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a090:	fba2 010e 	umull	r0, r1, r2, lr
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval-ticker_offset ),			
    a094:	b2b2      	uxth	r2, r6
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    a096:	fb0e 1103 	mla	r1, lr, r3, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval-ticker_offset ),			
    a09a:	1a82      	subs	r2, r0, r2
    a09c:	f04f 0300 	mov.w	r3, #0
    a0a0:	eb61 0303 	sbc.w	r3, r1, r3
    a0a4:	fba2 0108 	umull	r0, r1, r2, r8
    a0a8:	fb08 1103 	mla	r1, r8, r3, r1
    a0ac:	a31c      	add	r3, pc, #112	; (adr r3, a120 <radio_adv_enable+0x408>)
    a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
    a0b2:	9703      	str	r7, [sp, #12]
    a0b4:	9702      	str	r7, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval-ticker_offset ),			
    a0b6:	f7f6 f8d7 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    a0be:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    a0c0:	f8d5 067c 	ldr.w	r0, [r5, #1660]	; 0x67c
    a0c4:	a316      	add	r3, pc, #88	; (adr r3, a120 <radio_adv_enable+0x408>)
    a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    a0ca:	fba0 0108 	umull	r0, r1, r0, r8
    a0ce:	f7f6 f8cb 	bl	268 <__aeabi_uldivmod>
		ret=	
    a0d2:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    a0d8:	9000      	str	r0, [sp, #0]
    a0da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0dc:	4611      	mov	r1, r2
    a0de:	4638      	mov	r0, r7
    a0e0:	e723      	b.n	9f2a <radio_adv_enable+0x212>
				cpu_sleep();
    a0e2:	f7fb fc6b 	bl	59bc <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    a0e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0e8:	2b02      	cmp	r3, #2
    a0ea:	d0fa      	beq.n	a0e2 <radio_adv_enable+0x3ca>
    a0ec:	e7ae      	b.n	a04c <radio_adv_enable+0x334>
			cpu_sleep();
    a0ee:	f7fb fc65 	bl	59bc <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    a0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0f4:	2b02      	cmp	r3, #2
    a0f6:	d0fa      	beq.n	a0ee <radio_adv_enable+0x3d6>
    a0f8:	e71c      	b.n	9f34 <radio_adv_enable+0x21c>
		_radio.advertiser.is_enabled = 1;
    a0fa:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    a0fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a102:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    a106:	f895 364c 	ldrb.w	r3, [r5, #1612]	; 0x64c
    a10a:	f013 0401 	ands.w	r4, r3, #1
    a10e:	d103      	bne.n	a118 <radio_adv_enable+0x400>
			ll_adv_scan_state_cb(BIT(0));
    a110:	2001      	movs	r0, #1
    a112:	f7ff fdfd 	bl	9d10 <ll_adv_scan_state_cb>
		return 0;
    a116:	4620      	mov	r0, r4
}
    a118:	b011      	add	sp, #68	; 0x44
    a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a11e:	bf00      	nop
    a120:	1afd498d 	.word	0x1afd498d
    a124:	00000007 	.word	0x00000007
    a128:	00005a01 	.word	0x00005a01
    a12c:	000071f9 	.word	0x000071f9
    a130:	84e72a00 	.word	0x84e72a00
    a134:	00007249 	.word	0x00007249

0000a138 <radio_adv_disable>:
{
    a138:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    a13a:	2103      	movs	r1, #3
    a13c:	2005      	movs	r0, #5
    a13e:	f7fb fd39 	bl	5bb4 <role_disable>
	if (!status) {
    a142:	4605      	mov	r5, r0
    a144:	b9e8      	cbnz	r0, a182 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    a146:	4c10      	ldr	r4, [pc, #64]	; (a188 <radio_adv_disable+0x50>)
    a148:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    a14c:	f360 12c7 	bfi	r2, r0, #7, #1
    a150:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    a154:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
    a158:	07d3      	lsls	r3, r2, #31
    a15a:	d401      	bmi.n	a160 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    a15c:	f7ff fdd8 	bl	9d10 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    a160:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
		if (conn) {
    a164:	b15e      	cbz	r6, a17e <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    a166:	2300      	movs	r3, #0
    a168:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    a16c:	4907      	ldr	r1, [pc, #28]	; (a18c <radio_adv_disable+0x54>)
    a16e:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    a172:	f7f9 fcd0 	bl	3b16 <mem_release>
			mem_release(conn, &_radio.conn_free);
    a176:	4906      	ldr	r1, [pc, #24]	; (a190 <radio_adv_disable+0x58>)
    a178:	4630      	mov	r0, r6
    a17a:	f7f9 fccc 	bl	3b16 <mem_release>
}
    a17e:	4628      	mov	r0, r5
    a180:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    a182:	250c      	movs	r5, #12
    a184:	e7fb      	b.n	a17e <radio_adv_disable+0x46>
    a186:	bf00      	nop
    a188:	200009f8 	.word	0x200009f8
    a18c:	20001138 	.word	0x20001138
    a190:	20001104 	.word	0x20001104

0000a194 <ll_rx_dequeue>:
{
    a194:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a196:	4d3c      	ldr	r5, [pc, #240]	; (a288 <ll_rx_dequeue+0xf4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    a198:	aa02      	add	r2, sp, #8
    a19a:	2300      	movs	r3, #0
    a19c:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a1a0:	f8d5 0748 	ldr.w	r0, [r5, #1864]	; 0x748
    a1a4:	f205 7144 	addw	r1, r5, #1860	; 0x744
    a1a8:	f7f9 fcf3 	bl	3b92 <memq_dequeue>
    a1ac:	462c      	mov	r4, r5
	LL_ASSERT(link);
    a1ae:	b950      	cbnz	r0, a1c6 <ll_rx_dequeue+0x32>
    a1b0:	4a36      	ldr	r2, [pc, #216]	; (a28c <ll_rx_dequeue+0xf8>)
    a1b2:	4937      	ldr	r1, [pc, #220]	; (a290 <ll_rx_dequeue+0xfc>)
		LL_ASSERT(_radio.link_rx_data_quota <
    a1b4:	2003      	movs	r0, #3
    a1b6:	f7f8 f86b 	bl	2290 <bt_log>
    a1ba:	4040      	eors	r0, r0
    a1bc:	f380 8811 	msr	BASEPRI, r0
    a1c0:	f04f 0004 	mov.w	r0, #4
    a1c4:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    a1c6:	f505 61e8 	add.w	r1, r5, #1856	; 0x740
    a1ca:	f7f9 fca4 	bl	3b16 <mem_release>
	switch (node_rx->hdr.type) {
    a1ce:	9a01      	ldr	r2, [sp, #4]
    a1d0:	7911      	ldrb	r1, [r2, #4]
    a1d2:	290a      	cmp	r1, #10
    a1d4:	d807      	bhi.n	a1e6 <ll_rx_dequeue+0x52>
    a1d6:	2301      	movs	r3, #1
    a1d8:	408b      	lsls	r3, r1
    a1da:	f240 707e 	movw	r0, #1918	; 0x77e
    a1de:	4203      	tst	r3, r0
    a1e0:	d104      	bne.n	a1ec <ll_rx_dequeue+0x58>
    a1e2:	0618      	lsls	r0, r3, #24
    a1e4:	d40f      	bmi.n	a206 <ll_rx_dequeue+0x72>
		LL_ASSERT(0);
    a1e6:	4a29      	ldr	r2, [pc, #164]	; (a28c <ll_rx_dequeue+0xf8>)
    a1e8:	492a      	ldr	r1, [pc, #168]	; (a294 <ll_rx_dequeue+0x100>)
    a1ea:	e7e3      	b.n	a1b4 <ll_rx_dequeue+0x20>
		LL_ASSERT(_radio.link_rx_data_quota <
    a1ec:	f895 0738 	ldrb.w	r0, [r5, #1848]	; 0x738
    a1f0:	f895 374c 	ldrb.w	r3, [r5, #1868]	; 0x74c
    a1f4:	3801      	subs	r0, #1
    a1f6:	4283      	cmp	r3, r0
    a1f8:	db02      	blt.n	a200 <ll_rx_dequeue+0x6c>
    a1fa:	4a24      	ldr	r2, [pc, #144]	; (a28c <ll_rx_dequeue+0xf8>)
    a1fc:	4926      	ldr	r1, [pc, #152]	; (a298 <ll_rx_dequeue+0x104>)
    a1fe:	e7d9      	b.n	a1b4 <ll_rx_dequeue+0x20>
		_radio.link_rx_data_quota++;
    a200:	3301      	adds	r3, #1
    a202:	f885 374c 	strb.w	r3, [r5, #1868]	; 0x74c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    a206:	2906      	cmp	r1, #6
    a208:	d12c      	bne.n	a264 <ll_rx_dequeue+0xd0>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    a20a:	7ad3      	ldrb	r3, [r2, #11]
    a20c:	2b3c      	cmp	r3, #60	; 0x3c
    a20e:	d008      	beq.n	a222 <ll_rx_dequeue+0x8e>
    a210:	7b12      	ldrb	r2, [r2, #12]
    a212:	b992      	cbnz	r2, a23a <ll_rx_dequeue+0xa6>
			LL_ASSERT(_radio.scanner.is_enabled);
    a214:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    a218:	07d9      	lsls	r1, r3, #31
    a21a:	d425      	bmi.n	a268 <ll_rx_dequeue+0xd4>
    a21c:	4a1b      	ldr	r2, [pc, #108]	; (a28c <ll_rx_dequeue+0xf8>)
    a21e:	491f      	ldr	r1, [pc, #124]	; (a29c <ll_rx_dequeue+0x108>)
    a220:	e7c8      	b.n	a1b4 <ll_rx_dequeue+0x20>
				_radio.advertiser.conn = NULL;
    a222:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    a224:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
				_radio.advertiser.conn = NULL;
    a228:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			LL_ASSERT(_radio.advertiser.is_enabled);
    a22c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    a230:	2b00      	cmp	r3, #0
    a232:	db04      	blt.n	a23e <ll_rx_dequeue+0xaa>
    a234:	4a15      	ldr	r2, [pc, #84]	; (a28c <ll_rx_dequeue+0xf8>)
    a236:	491a      	ldr	r1, [pc, #104]	; (a2a0 <ll_rx_dequeue+0x10c>)
    a238:	e7bc      	b.n	a1b4 <ll_rx_dequeue+0x20>
		struct connection *conn = NULL;
    a23a:	2500      	movs	r5, #0
    a23c:	e7f6      	b.n	a22c <ll_rx_dequeue+0x98>
			_radio.advertiser.is_enabled = 0;
    a23e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    a242:	f36f 13c7 	bfc	r3, #7, #1
    a246:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    a24a:	b995      	cbnz	r5, a272 <ll_rx_dequeue+0xde>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a24c:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
		     _radio.advertiser.is_enabled;
    a250:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    a254:	f000 0001 	and.w	r0, r0, #1
    a258:	0040      	lsls	r0, r0, #1
		if (!bm) {
    a25a:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    a25e:	d101      	bne.n	a264 <ll_rx_dequeue+0xd0>
			ll_adv_scan_state_cb(0);
    a260:	f7ff fd56 	bl	9d10 <ll_adv_scan_state_cb>
}
    a264:	b003      	add	sp, #12
    a266:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
    a268:	f362 0300 	bfi	r3, r2, #0, #1
    a26c:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    a270:	e7ec      	b.n	a24c <ll_rx_dequeue+0xb8>
			mem_release(node_rx->hdr.onion.link,
    a272:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    a276:	490b      	ldr	r1, [pc, #44]	; (a2a4 <ll_rx_dequeue+0x110>)
    a278:	f7f9 fc4d 	bl	3b16 <mem_release>
			mem_release(conn, &_radio.conn_free);
    a27c:	490a      	ldr	r1, [pc, #40]	; (a2a8 <ll_rx_dequeue+0x114>)
    a27e:	4628      	mov	r0, r5
    a280:	f7f9 fc49 	bl	3b16 <mem_release>
    a284:	e7e2      	b.n	a24c <ll_rx_dequeue+0xb8>
    a286:	bf00      	nop
    a288:	200009f8 	.word	0x200009f8
    a28c:	0000e54e 	.word	0x0000e54e
    a290:	0000e9a7 	.word	0x0000e9a7
    a294:	0000d76b 	.word	0x0000d76b
    a298:	0000e7f5 	.word	0x0000e7f5
    a29c:	0000e875 	.word	0x0000e875
    a2a0:	0000e843 	.word	0x0000e843
    a2a4:	20001138 	.word	0x20001138
    a2a8:	20001104 	.word	0x20001104

0000a2ac <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    a2ac:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    a2ae:	4c0b      	ldr	r4, [pc, #44]	; (a2dc <rtc0_nrf5_isr+0x30>)
    a2b0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    a2b4:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    a2b8:	b122      	cbz	r2, a2c4 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    a2ba:	2000      	movs	r0, #0
    a2bc:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    a2c0:	f7fa fa6a 	bl	4798 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    a2c4:	b12d      	cbz	r5, a2d2 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    a2c6:	2300      	movs	r3, #0
    a2c8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    a2cc:	2001      	movs	r0, #1
    a2ce:	f7fa fa63 	bl	4798 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    a2d2:	2000      	movs	r0, #0
}
    a2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    a2d8:	f7f9 bd0a 	b.w	3cf0 <mayfly_run>
    a2dc:	4000b000 	.word	0x4000b000

0000a2e0 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    a2e0:	2001      	movs	r0, #1
    a2e2:	f7f9 bd05 	b.w	3cf0 <mayfly_run>

0000a2e6 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a2e6:	4668      	mov	r0, sp
    a2e8:	f020 0107 	bic.w	r1, r0, #7
    a2ec:	468d      	mov	sp, r1
    a2ee:	b501      	push	{r0, lr}
	isr_radio();
    a2f0:	f000 fd3a 	bl	ad68 <isr_radio>
	ISR_DIRECT_PM();
    a2f4:	f7f6 fd50 	bl	d98 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    a2f8:	f7f6 fb2e 	bl	958 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    a2fc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    a300:	4685      	mov	sp, r0
    a302:	4770      	bx	lr

0000a304 <radio_active_callback>:
{
    a304:	4770      	bx	lr
	...

0000a308 <radio_event_callback>:
	k_sem_give(sem_recv);
    a308:	4b01      	ldr	r3, [pc, #4]	; (a310 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    a30a:	6818      	ldr	r0, [r3, #0]
    a30c:	f001 beee 	b.w	c0ec <_impl_k_sem_give>
    a310:	20002654 	.word	0x20002654

0000a314 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    a318:	4b3f      	ldr	r3, [pc, #252]	; (a418 <ll_init+0x104>)
{
    a31a:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    a31c:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    a31e:	483f      	ldr	r0, [pc, #252]	; (a41c <ll_init+0x108>)
    a320:	f001 faae 	bl	b880 <device_get_binding>
	if (!clk_k32) {
    a324:	b920      	cbnz	r0, a330 <ll_init+0x1c>
		return -ENODEV;
    a326:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    a32a:	b006      	add	sp, #24
    a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->on(dev, sys);
    a330:	6843      	ldr	r3, [r0, #4]
    a332:	2101      	movs	r1, #1
    a334:	681b      	ldr	r3, [r3, #0]
    a336:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    a338:	4839      	ldr	r0, [pc, #228]	; (a420 <ll_init+0x10c>)
    a33a:	f001 faa1 	bl	b880 <device_get_binding>
	if (!entropy) {
    a33e:	4604      	mov	r4, r0
    a340:	2800      	cmp	r0, #0
    a342:	d0f0      	beq.n	a326 <ll_init+0x12>
	cntr_init();
    a344:	f000 fc00 	bl	ab48 <cntr_init>
	mayfly_init();
    a348:	f7f9 fc32 	bl	3bb0 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    a34c:	4b35      	ldr	r3, [pc, #212]	; (a424 <ll_init+0x110>)
    a34e:	2208      	movs	r2, #8
    a350:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    a352:	2202      	movs	r2, #2
    a354:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    a356:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    a358:	4a33      	ldr	r2, [pc, #204]	; (a428 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    a35a:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    a35c:	2603      	movs	r6, #3
    a35e:	721e      	strb	r6, [r3, #8]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    a360:	9205      	str	r2, [sp, #20]
    a362:	4a32      	ldr	r2, [pc, #200]	; (a42c <ll_init+0x118>)
    a364:	9204      	str	r2, [sp, #16]
    a366:	4a32      	ldr	r2, [pc, #200]	; (a430 <ll_init+0x11c>)
    a368:	9203      	str	r2, [sp, #12]
    a36a:	4a32      	ldr	r2, [pc, #200]	; (a434 <ll_init+0x120>)
    a36c:	9202      	str	r2, [sp, #8]
    a36e:	220d      	movs	r2, #13
    a370:	9201      	str	r2, [sp, #4]
    a372:	9300      	str	r3, [sp, #0]
    a374:	4a30      	ldr	r2, [pc, #192]	; (a438 <ll_init+0x124>)
    a376:	2304      	movs	r3, #4
    a378:	2107      	movs	r1, #7
    a37a:	f7fa f9d5 	bl	4728 <ticker_init>
	LL_ASSERT(!err);
    a37e:	4680      	mov	r8, r0
    a380:	b150      	cbz	r0, a398 <ll_init+0x84>
    a382:	4a2e      	ldr	r2, [pc, #184]	; (a43c <ll_init+0x128>)
    a384:	492e      	ldr	r1, [pc, #184]	; (a440 <ll_init+0x12c>)
    a386:	4630      	mov	r0, r6
    a388:	f7f7 ff82 	bl	2290 <bt_log>
    a38c:	4040      	eors	r0, r0
    a38e:	f380 8811 	msr	BASEPRI, r0
    a392:	f04f 0004 	mov.w	r0, #4
    a396:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    a398:	482a      	ldr	r0, [pc, #168]	; (a444 <ll_init+0x130>)
    a39a:	f001 fa71 	bl	b880 <device_get_binding>
	if (!clk_m16) {
    a39e:	2800      	cmp	r0, #0
    a3a0:	d0c1      	beq.n	a326 <ll_init+0x12>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    a3a2:	4b29      	ldr	r3, [pc, #164]	; (a448 <ll_init+0x134>)
    a3a4:	9304      	str	r3, [sp, #16]
    a3a6:	23fb      	movs	r3, #251	; 0xfb
    a3a8:	9303      	str	r3, [sp, #12]
    a3aa:	9302      	str	r3, [sp, #8]
    a3ac:	f44f 5785 	mov.w	r7, #4256	; 0x10a0
    a3b0:	230a      	movs	r3, #10
    a3b2:	2501      	movs	r5, #1
    a3b4:	9301      	str	r3, [sp, #4]
    a3b6:	4622      	mov	r2, r4
    a3b8:	9705      	str	r7, [sp, #20]
    a3ba:	9500      	str	r5, [sp, #0]
    a3bc:	4643      	mov	r3, r8
    a3be:	2107      	movs	r1, #7
    a3c0:	f7ff fab6 	bl	9930 <radio_init>
	if (err) {
    a3c4:	4604      	mov	r4, r0
    a3c6:	b148      	cbz	r0, a3dc <ll_init+0xc8>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
    a3c8:	4603      	mov	r3, r0
    a3ca:	9700      	str	r7, [sp, #0]
    a3cc:	4630      	mov	r0, r6
    a3ce:	4a1b      	ldr	r2, [pc, #108]	; (a43c <ll_init+0x128>)
    a3d0:	491e      	ldr	r1, [pc, #120]	; (a44c <ll_init+0x138>)
    a3d2:	f7f7 ff5d 	bl	2290 <bt_log>
		return -ENOMEM;
    a3d6:	f06f 000b 	mvn.w	r0, #11
    a3da:	e7a6      	b.n	a32a <ll_init+0x16>
	ll_filter_reset(true);
    a3dc:	4628      	mov	r0, r5
    a3de:	f000 fba7 	bl	ab30 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    a3e2:	4622      	mov	r2, r4
    a3e4:	4621      	mov	r1, r4
    a3e6:	4628      	mov	r0, r5
    a3e8:	f7f6 fcbc 	bl	d64 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    a3ec:	4622      	mov	r2, r4
    a3ee:	4621      	mov	r1, r4
    a3f0:	200b      	movs	r0, #11
    a3f2:	f7f6 fcb7 	bl	d64 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    a3f6:	4622      	mov	r2, r4
    a3f8:	4621      	mov	r1, r4
    a3fa:	2018      	movs	r0, #24
    a3fc:	f7f6 fcb2 	bl	d64 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    a400:	4628      	mov	r0, r5
    a402:	f7f6 fc7d 	bl	d00 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    a406:	200b      	movs	r0, #11
    a408:	f7f6 fc7a 	bl	d00 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    a40c:	2018      	movs	r0, #24
    a40e:	f7f6 fc77 	bl	d00 <_arch_irq_enable>
	return 0;
    a412:	4620      	mov	r0, r4
    a414:	e789      	b.n	a32a <ll_init+0x16>
    a416:	bf00      	nop
    a418:	20002654 	.word	0x20002654
    a41c:	0000d12c 	.word	0x0000d12c
    a420:	0000d10a 	.word	0x0000d10a
    a424:	20002634 	.word	0x20002634
    a428:	0000b609 	.word	0x0000b609
    a42c:	0000b57d 	.word	0x0000b57d
    a430:	0000b541 	.word	0x0000b541
    a434:	200023c4 	.word	0x200023c4
    a438:	200022ac 	.word	0x200022ac
    a43c:	0000ed1b 	.word	0x0000ed1b
    a440:	0000ed23 	.word	0x0000ed23
    a444:	0000d137 	.word	0x0000d137
    a448:	2000120c 	.word	0x2000120c
    a44c:	0000ed3d 	.word	0x0000ed3d

0000a450 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a454:	b089      	sub	sp, #36	; 0x24
    a456:	4698      	mov	r8, r3
    a458:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    a45c:	9301      	str	r3, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a45e:	2300      	movs	r3, #0
    a460:	f88d 3018 	strb.w	r3, [sp, #24]
    a464:	2306      	movs	r3, #6
    a466:	2601      	movs	r6, #1
    a468:	f88d 301a 	strb.w	r3, [sp, #26]
    a46c:	2502      	movs	r5, #2
    a46e:	2307      	movs	r3, #7
{
    a470:	9102      	str	r1, [sp, #8]
    a472:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    a474:	f88d 6019 	strb.w	r6, [sp, #25]
    a478:	f88d 501b 	strb.w	r5, [sp, #27]
    a47c:	f88d 601c 	strb.w	r6, [sp, #28]
    a480:	f88d 301d 	strb.w	r3, [sp, #29]
	struct radio_adv_data *radio_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
    a484:	f7ff fb32 	bl	9aec <ll_adv_is_enabled>
    a488:	9902      	ldr	r1, [sp, #8]
    a48a:	4607      	mov	r7, r0
    a48c:	2800      	cmp	r0, #0
    a48e:	f040 8194 	bne.w	a7ba <ll_adv_params_set+0x36a>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
    a492:	4bcb      	ldr	r3, [pc, #812]	; (a7c0 <ll_adv_params_set+0x370>)
    a494:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    a498:	711a      	strb	r2, [r3, #4]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
    a49a:	781a      	ldrb	r2, [r3, #0]
    a49c:	f366 1247 	bfi	r2, r6, #5, #3
    a4a0:	701a      	strb	r2, [r3, #0]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
    a4a2:	06ca      	lsls	r2, r1, #27
    a4a4:	f140 809b 	bpl.w	a5de <ll_adv_params_set+0x18e>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    a4a8:	2203      	movs	r2, #3
    a4aa:	f88d 2014 	strb.w	r2, [sp, #20]
    a4ae:	f88d 0017 	strb.w	r0, [sp, #23]
    a4b2:	2204      	movs	r2, #4

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    a4b4:	0708      	lsls	r0, r1, #28
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    a4b6:	f88d 2015 	strb.w	r2, [sp, #21]
    a4ba:	f88d 5016 	strb.w	r5, [sp, #22]
			if (evt_prop & BIT(3)) {
    a4be:	d408      	bmi.n	a4d2 <ll_adv_params_set+0x82>
			adv_type = leg_adv_type[evt_prop & 0x03];
    a4c0:	f001 0203 	and.w	r2, r1, #3
    a4c4:	a808      	add	r0, sp, #32
    a4c6:	4402      	add	r2, r0
    a4c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
    a4cc:	42b2      	cmp	r2, r6
    a4ce:	f040 8096 	bne.w	a5fe <ll_adv_params_set+0x1ae>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
    a4d2:	2200      	movs	r2, #0
    a4d4:	805a      	strh	r2, [r3, #2]
    a4d6:	2201      	movs	r2, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
    a4d8:	7818      	ldrb	r0, [r3, #0]
    a4da:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    a4de:	9103      	str	r1, [sp, #12]
    a4e0:	f364 0002 	bfi	r0, r4, #0, #3
	ll_adv.filter_policy = filter_policy;
    a4e4:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
    a4e8:	9202      	str	r2, [sp, #8]
    a4ea:	f364 00c4 	bfi	r0, r4, #3, #2
    a4ee:	7018      	strb	r0, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
    a4f0:	f7ff faf0 	bl	9ad4 <radio_adv_data_get>
    a4f4:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();
    a4f6:	f7ff faf1 	bl	9adc <radio_aux_adv_data_get>

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
    a4fa:	9a02      	ldr	r2, [sp, #8]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a4fc:	f896 3203 	ldrb.w	r3, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a500:	f890 e203 	ldrb.w	lr, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    a504:	a908      	add	r1, sp, #32
    a506:	440a      	add	r2, r1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a508:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    a50c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
    a510:	f816 c003 	ldrb.w	ip, [r6, r3]
	aux_pdu->type = pdu->type;
	
	pdu->rfu = 0;
	aux_pdu->rfu = pdu->rfu;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    a514:	9903      	ldr	r1, [sp, #12]
	pdu->type = pdu_adv_type[adv_type];
    a516:	f002 020f 	and.w	r2, r2, #15
    a51a:	f362 0c03 	bfi	ip, r2, #0, #4
    a51e:	f806 c003 	strb.w	ip, [r6, r3]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a522:	eb0e 2e0e 	add.w	lr, lr, lr, lsl #8
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
    a526:	f008 0801 	and.w	r8, r8, #1
	aux_pdu->type = pdu->type;
    a52a:	f810 c00e 	ldrb.w	ip, [r0, lr]
    a52e:	f362 0c03 	bfi	ip, r2, #0, #4
    a532:	f800 c00e 	strb.w	ip, [r0, lr]
	pdu->rfu = 0;
    a536:	5cf2      	ldrb	r2, [r6, r3]
    a538:	f36f 1204 	bfc	r2, #4, #1
    a53c:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rfu = pdu->rfu;
    a53e:	f810 200e 	ldrb.w	r2, [r0, lr]
    a542:	f36f 1204 	bfc	r2, #4, #1
    a546:	f800 200e 	strb.w	r2, [r0, lr]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    a54a:	5cf2      	ldrb	r2, [r6, r3]
    a54c:	f002 0c0f 	and.w	ip, r2, #15
    a550:	f1bc 0f01 	cmp.w	ip, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    a554:	bf95      	itete	ls
    a556:	f042 0220 	orrls.w	r2, r2, #32
		pdu->chan_sel = 0;
    a55a:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    a55e:	54f2      	strbls	r2, [r6, r3]
		pdu->chan_sel = 0;
    a560:	54f2      	strbhi	r2, [r6, r3]
		aux_pdu->chan_sel = pdu->chan_sel;
    a562:	bf95      	itete	ls
    a564:	f810 200e 	ldrbls.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    a568:	f810 200e 	ldrbhi.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    a56c:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
    a570:	f36f 1245 	bfchi	r2, #5, #1
    a574:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->tx_addr =  own_addr_type & 0x1;
    a578:	5cf2      	ldrb	r2, [r6, r3]
    a57a:	f368 1286 	bfi	r2, r8, #6, #1
    a57e:	54f2      	strb	r2, [r6, r3]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
    a580:	f810 200e 	ldrb.w	r2, [r0, lr]
    a584:	f36f 1286 	bfc	r2, #6, #1
    a588:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->rx_addr = 0;  							
    a58c:	5cf2      	ldrb	r2, [r6, r3]
    a58e:	f36f 12c7 	bfc	r2, #7, #1
    a592:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rx_addr = pdu->rx_addr;
    a594:	f810 200e 	ldrb.w	r2, [r0, lr]
    a598:	f36f 12c7 	bfc	r2, #7, #1
    a59c:	f800 200e 	strb.w	r2, [r0, lr]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    a5a0:	eb00 050e 	add.w	r5, r0, lr
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
    a5a4:	f011 0004 	ands.w	r0, r1, #4
		pdu->rx_addr = 0;//direct_addr_type;
    a5a8:	bf1e      	ittt	ne
    a5aa:	5cf2      	ldrbne	r2, [r6, r3]
    a5ac:	f36f 12c7 	bfcne	r2, #7, #1
    a5b0:	54f2      	strbne	r2, [r6, r3]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a5b2:	5cf2      	ldrb	r2, [r6, r3]
    a5b4:	f002 0e0f 	and.w	lr, r2, #15
    a5b8:	f1be 0f01 	cmp.w	lr, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a5bc:	eb06 0403 	add.w	r4, r6, r3
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    a5c0:	d11f      	bne.n	a602 <ll_adv_params_set+0x1b2>
		pdu->rx_addr = direct_addr_type;
    a5c2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    a5c6:	f361 12c7 	bfi	r2, r1, #7, #1
    a5ca:	54f2      	strb	r2, [r6, r3]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    a5cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a5ce:	2206      	movs	r2, #6
    a5d0:	f104 0008 	add.w	r0, r4, #8
    a5d4:	f7f6 f821 	bl	61a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    a5d8:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    a5da:	7063      	strb	r3, [r4, #1]
    a5dc:	e0c8      	b.n	a770 <ll_adv_params_set+0x320>
			if (((evt_prop & 0x03) == 0x03) ||
    a5de:	f001 0203 	and.w	r2, r1, #3
    a5e2:	2a03      	cmp	r2, #3
    a5e4:	f000 80f0 	beq.w	a7c8 <ll_adv_params_set+0x378>
    a5e8:	f001 020c 	and.w	r2, r1, #12
    a5ec:	2a0c      	cmp	r2, #12
    a5ee:	f000 80eb 	beq.w	a7c8 <ll_adv_params_set+0x378>
			ll_adv.phy_p = phy_p;
    a5f2:	781a      	ldrb	r2, [r3, #0]
    a5f4:	9801      	ldr	r0, [sp, #4]
    a5f6:	f360 1247 	bfi	r2, r0, #5, #3
    a5fa:	701a      	strb	r2, [r3, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    a5fc:	2205      	movs	r2, #5
		ll_adv.interval = interval;
    a5fe:	805c      	strh	r4, [r3, #2]
    a600:	e76a      	b.n	a4d8 <ll_adv_params_set+0x88>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    a602:	f1be 0f07 	cmp.w	lr, #7
    a606:	f040 80d3 	bne.w	a7b0 <ll_adv_params_set+0x360>
		p->ext_hdr_len = 0;
    a60a:	78a2      	ldrb	r2, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
    a60c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a610:	f36f 1287 	bfc	r2, #6, #2
    a614:	70a2      	strb	r2, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
    a616:	78aa      	ldrb	r2, [r5, #2]
		aux_p->adv_mode = p->adv_mode;
    a618:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    a61c:	f36f 1287 	bfc	r2, #6, #2
    a620:	70aa      	strb	r2, [r5, #2]
		*(u8_t *)h = 0;
    a622:	2200      	movs	r2, #0
    a624:	70e2      	strb	r2, [r4, #3]
		*(u8_t *)aux_h = 0;
    a626:	70ea      	strb	r2, [r5, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    a628:	068a      	lsls	r2, r1, #26
		p = (void *)&pdu->adv_ext_ind;
    a62a:	f104 0c02 	add.w	ip, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    a62e:	f104 0604 	add.w	r6, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
    a632:	f105 0e02 	add.w	lr, r5, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    a636:	f105 0304 	add.w	r3, r5, #4
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    a63a:	d507      	bpl.n	a64c <ll_adv_params_set+0x1fc>
    a63c:	78a2      	ldrb	r2, [r4, #2]
    a63e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    a642:	d103      	bne.n	a64c <ll_adv_params_set+0x1fc>
    a644:	9a01      	ldr	r2, [sp, #4]
    a646:	2a04      	cmp	r2, #4
    a648:	f040 80ac 	bne.w	a7a4 <ll_adv_params_set+0x354>
			h->adv_addr = 1;
    a64c:	78e2      	ldrb	r2, [r4, #3]
    a64e:	f042 0201 	orr.w	r2, r2, #1
    a652:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    a654:	f104 020a 	add.w	r2, r4, #10
		if(evt_prop & BIT(2)){
    a658:	b120      	cbz	r0, a664 <ll_adv_params_set+0x214>
			h->tgt_addr = 1;
    a65a:	78e0      	ldrb	r0, [r4, #3]
    a65c:	f040 0002 	orr.w	r0, r0, #2
    a660:	70e0      	strb	r0, [r4, #3]
			ptr += BDADDR_SIZE;
    a662:	3206      	adds	r2, #6
		if(evt_prop & BIT(6)){
    a664:	0648      	lsls	r0, r1, #25
    a666:	f140 809f 	bpl.w	a7a8 <ll_adv_params_set+0x358>
			h->adi = 1;
    a66a:	78e1      	ldrb	r1, [r4, #3]
    a66c:	f041 0108 	orr.w	r1, r1, #8
    a670:	70e1      	strb	r1, [r4, #3]
			aux_h->adi = h->adi;
    a672:	78e9      	ldrb	r1, [r5, #3]
    a674:	f041 0108 	orr.w	r1, r1, #8
    a678:	70e9      	strb	r1, [r5, #3]
			h->aux_ptr = 1;
    a67a:	78e1      	ldrb	r1, [r4, #3]
			h->tx_pwr = 1;
    a67c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
    a680:	70e1      	strb	r1, [r4, #3]
			aux_h->tx_pwr = h->tx_pwr;
    a682:	78e9      	ldrb	r1, [r5, #3]
    a684:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a688:	70e9      	strb	r1, [r5, #3]
			ptr += sizeof(*adi_ptr);
    a68a:	f102 0902 	add.w	r9, r2, #2
			adi_ptr = ptr;
    a68e:	4693      	mov	fp, r2
			aux_ptr ++;
    a690:	1de9      	adds	r1, r5, #7
			aux_adi_ptr = aux_ptr;
    a692:	469a      	mov	sl, r3
			ptr ++;
    a694:	3206      	adds	r2, #6
		len = ptr - (u8_t *)p;
    a696:	eba2 020c 	sub.w	r2, r2, ip
    a69a:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    a69c:	2a02      	cmp	r2, #2
			p->ext_hdr_len = (len -
    a69e:	bf84      	itt	hi
    a6a0:	78a0      	ldrbhi	r0, [r4, #2]
    a6a2:	f102 3cff 	addhi.w	ip, r2, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
    a6a6:	eba1 0e0e 	sub.w	lr, r1, lr
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a6aa:	bf98      	it	ls
    a6ac:	2201      	movls	r2, #1
		aux_len = aux_ptr - (u8_t *)aux_p;
    a6ae:	fa5f fe8e 	uxtb.w	lr, lr
			p->ext_hdr_len = (len -
    a6b2:	bf88      	it	hi
    a6b4:	f36c 0005 	bfihi	r0, ip, #0, #6
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a6b8:	7062      	strb	r2, [r4, #1]
			p->ext_hdr_len = (len -
    a6ba:	bf88      	it	hi
    a6bc:	70a0      	strbhi	r0, [r4, #2]
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
    a6be:	f1be 0f02 	cmp.w	lr, #2
			aux_p->ext_hdr_len = (aux_len -
    a6c2:	bf81      	itttt	hi
    a6c4:	78aa      	ldrbhi	r2, [r5, #2]
			aux_pdu->len = aux_len;
    a6c6:	f885 e001 	strbhi.w	lr, [r5, #1]
			aux_p->ext_hdr_len = (aux_len -
    a6ca:	f10e 31ff 	addhi.w	r1, lr, #4294967295	; 0xffffffff
    a6ce:	f361 0205 	bfihi	r2, r1, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a6d2:	bf96      	itet	ls
    a6d4:	2201      	movls	r2, #1
			aux_p->ext_hdr_len = (aux_len -
    a6d6:	70aa      	strbhi	r2, [r5, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    a6d8:	706a      	strbls	r2, [r5, #1]
		if(h->adv_addr){
    a6da:	78e2      	ldrb	r2, [r4, #3]
    a6dc:	07d1      	lsls	r1, r2, #31
			ptr += BDADDR_SIZE;
    a6de:	bf48      	it	mi
    a6e0:	f104 060a 	addmi.w	r6, r4, #10
		if(h->tgt_addr){
    a6e4:	0792      	lsls	r2, r2, #30
    a6e6:	d507      	bpl.n	a6f8 <ll_adv_params_set+0x2a8>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
    a6e8:	4630      	mov	r0, r6
    a6ea:	2206      	movs	r2, #6
    a6ec:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a6ee:	9301      	str	r3, [sp, #4]
    a6f0:	f7f5 ff93 	bl	61a <memcpy>
			ptr += BDADDR_SIZE;
    a6f4:	9b01      	ldr	r3, [sp, #4]
    a6f6:	3606      	adds	r6, #6
		if(h->adi){
    a6f8:	78e1      	ldrb	r1, [r4, #3]
    a6fa:	070c      	lsls	r4, r1, #28
    a6fc:	d518      	bpl.n	a730 <ll_adv_params_set+0x2e0>
			adi_ptr->did = 0x00;
    a6fe:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adi_ptr->sid = 0x03;//sid & 0x0f;
    a702:	2003      	movs	r0, #3
    a704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			adi_ptr->did = 0x00;
    a708:	2200      	movs	r2, #0
			adi_ptr->sid = 0x03;//sid & 0x0f;
    a70a:	f360 1307 	bfi	r3, r0, #4, #4
			adi_ptr->did = 0x00;
    a70e:	f88b 2000 	strb.w	r2, [fp]
			adi_ptr->sid = 0x03;//sid & 0x0f;
    a712:	f88b 3001 	strb.w	r3, [fp, #1]
			aux_adi_ptr->did = adi_ptr->did;
    a716:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a71a:	f88a 2000 	strb.w	r2, [sl]
			aux_adi_ptr->sid = 0x02;//adi_ptr->sid;
    a71e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    a722:	2202      	movs	r2, #2
    a724:	f362 1307 	bfi	r3, r2, #4, #4
    a728:	f88a 3001 	strb.w	r3, [sl, #1]
			ptr += sizeof(*adi_ptr);
    a72c:	3602      	adds	r6, #2
			aux_ptr += sizeof(*aux_adi_ptr);
    a72e:	1dab      	adds	r3, r5, #6
		if(h->aux_ptr){
    a730:	06c8      	lsls	r0, r1, #27
    a732:	d50e      	bpl.n	a752 <ll_adv_params_set+0x302>
			ap->offs_units = 0;
    a734:	2203      	movs	r2, #3
    a736:	f889 2000 	strb.w	r2, [r9]
			ap->offs = 00;
    a73a:	f899 2002 	ldrb.w	r2, [r9, #2]
    a73e:	2000      	movs	r0, #0
			ap->phy = 0;
    a740:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
    a744:	f360 1247 	bfi	r2, r0, #5, #3
			ap->offs = 00;
    a748:	f889 0001 	strb.w	r0, [r9, #1]
			ap->phy = 0;
    a74c:	f889 2002 	strb.w	r2, [r9, #2]
			ptr += sizeof(*ap);
    a750:	3603      	adds	r6, #3
		if (h->tx_pwr) {
    a752:	064a      	lsls	r2, r1, #25
    a754:	d50a      	bpl.n	a76c <ll_adv_params_set+0x31c>
			if (tx_pwr) {
    a756:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a758:	b342      	cbz	r2, a7ac <ll_adv_params_set+0x35c>
				if (*tx_pwr != 0x7F) {
    a75a:	7812      	ldrb	r2, [r2, #0]
    a75c:	2a7f      	cmp	r2, #127	; 0x7f
    a75e:	d102      	bne.n	a766 <ll_adv_params_set+0x316>
					*tx_pwr = _tx_pwr;
    a760:	9916      	ldr	r1, [sp, #88]	; 0x58
    a762:	2200      	movs	r2, #0
    a764:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    a766:	7032      	strb	r2, [r6, #0]
			*aux_ptr = _tx_pwr;
    a768:	f803 2b01 	strb.w	r2, [r3], #1
		set_data_ptr = aux_ptr; 
    a76c:	4a15      	ldr	r2, [pc, #84]	; (a7c4 <ll_adv_params_set+0x374>)
    a76e:	6013      	str	r3, [r2, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    a770:	f7ff f9b8 	bl	9ae4 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a774:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    a778:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a77c:	2404      	movs	r4, #4
    a77e:	5c83      	ldrb	r3, [r0, r2]
    a780:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    a784:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    a788:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
    a78c:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a790:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    a792:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    a794:	784b      	ldrb	r3, [r1, #1]
    a796:	b90b      	cbnz	r3, a79c <ll_adv_params_set+0x34c>
		pdu->len = BDADDR_SIZE;
    a798:	2306      	movs	r3, #6
    a79a:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    a79c:	4638      	mov	r0, r7
    a79e:	b009      	add	sp, #36	; 0x24
    a7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
    a7a4:	4632      	mov	r2, r6
    a7a6:	e757      	b.n	a658 <ll_adv_params_set+0x208>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    a7a8:	4619      	mov	r1, r3
    a7aa:	e774      	b.n	a696 <ll_adv_params_set+0x246>
			_tx_pwr = 0;
    a7ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a7ae:	e7da      	b.n	a766 <ll_adv_params_set+0x316>
	} else if (pdu->len == 0) {
    a7b0:	7863      	ldrb	r3, [r4, #1]
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	d1dc      	bne.n	a770 <ll_adv_params_set+0x320>
		pdu->len = BDADDR_SIZE;
    a7b6:	2306      	movs	r3, #6
    a7b8:	e70f      	b.n	a5da <ll_adv_params_set+0x18a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a7ba:	270c      	movs	r7, #12
    a7bc:	e7ee      	b.n	a79c <ll_adv_params_set+0x34c>
    a7be:	bf00      	nop
    a7c0:	20002658 	.word	0x20002658
    a7c4:	20002660 	.word	0x20002660
				return 0x12; /* invalid HCI cmd param */
    a7c8:	2712      	movs	r7, #18
    a7ca:	e7e7      	b.n	a79c <ll_adv_params_set+0x34c>

0000a7cc <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    a7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7d0:	4688      	mov	r8, r1
    a7d2:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    a7d4:	f7ff f97e 	bl	9ad4 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a7d8:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
    a7dc:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
    a7e0:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    a7e2:	f810 e002 	ldrb.w	lr, [r0, r2]
    a7e6:	f00e 030f 	and.w	r3, lr, #15
    a7ea:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    a7ec:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    a7f0:	d111      	bne.n	a816 <ll_adv_data_set+0x4a>
	
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();
    a7f2:	f7ff f973 	bl	9adc <radio_aux_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    a7f6:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203

		memcpy(set_data_ptr, data, len);
    a7fa:	4b26      	ldr	r3, [pc, #152]	; (a894 <ll_adv_data_set+0xc8>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    a7fc:	eb04 2404 	add.w	r4, r4, r4, lsl #8
    a800:	4404      	add	r4, r0
		memcpy(set_data_ptr, data, len);
    a802:	4632      	mov	r2, r6
    a804:	6818      	ldr	r0, [r3, #0]
    a806:	4641      	mov	r1, r8
    a808:	f7f5 ff07 	bl	61a <memcpy>
		aux_pdu->len += len;
    a80c:	7863      	ldrb	r3, [r4, #1]
    a80e:	441e      	add	r6, r3
    a810:	7066      	strb	r6, [r4, #1]
    a812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    a816:	2b01      	cmp	r3, #1
    a818:	d039      	beq.n	a88e <ll_adv_data_set+0xc2>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    a81a:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    a81e:	42ab      	cmp	r3, r5
    a820:	d104      	bne.n	a82c <ll_adv_data_set+0x60>
			last = radio_adv_data->last + 1;
    a822:	3501      	adds	r5, #1
    a824:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    a826:	2d02      	cmp	r5, #2
    a828:	bf08      	it	eq
    a82a:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    a82c:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    a830:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
    a832:	5ce0      	ldrb	r0, [r4, r3]
    a834:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    a838:	f36f 1004 	bfc	r0, #4, #1
    a83c:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    a83e:	5ca0      	ldrb	r0, [r4, r2]
    a840:	f814 e003 	ldrb.w	lr, [r4, r3]
    a844:	f3c0 1040 	ubfx	r0, r0, #5, #1
    a848:	f360 1e45 	bfi	lr, r0, #5, #1
    a84c:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    a850:	5ca0      	ldrb	r0, [r4, r2]
    a852:	fa5f fe8e 	uxtb.w	lr, lr
    a856:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a85a:	f360 1e86 	bfi	lr, r0, #6, #1
    a85e:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
    a862:	5ca2      	ldrb	r2, [r4, r2]
    a864:	fa5f f08e 	uxtb.w	r0, lr
    a868:	09d2      	lsrs	r2, r2, #7
    a86a:	f362 10c7 	bfi	r0, r2, #7, #1
    a86e:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    a870:	2206      	movs	r2, #6
    a872:	3102      	adds	r1, #2
    a874:	1cb8      	adds	r0, r7, #2
    a876:	f7f5 fed0 	bl	61a <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    a87a:	4632      	mov	r2, r6
    a87c:	4641      	mov	r1, r8
    a87e:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
    a882:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    a884:	f7f5 fec9 	bl	61a <memcpy>
		pdu->len = BDADDR_SIZE + len;
    a888:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    a88a:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    a88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a892:	bf00      	nop
    a894:	20002660 	.word	0x20002660

0000a898 <ll_scan_data_set>:
	
//#endif	/* CONFIG_BT_CTLR_ADV_EXT */
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    a898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a89c:	4606      	mov	r6, r0
    a89e:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    a8a0:	f7ff f920 	bl	9ae4 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    a8a4:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
    a8a8:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
    a8ac:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    a8ae:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    a8b0:	d131      	bne.n	a916 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
    a8b2:	1c5d      	adds	r5, r3, #1
    a8b4:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    a8b6:	2d02      	cmp	r5, #2
			last = 0;
    a8b8:	bf08      	it	eq
    a8ba:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    a8bc:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    a8c0:	f04f 0e04 	mov.w	lr, #4
    a8c4:	5ca0      	ldrb	r0, [r4, r2]
    a8c6:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    a8ca:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    a8ce:	f36f 1045 	bfc	r0, #5, #1
    a8d2:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    a8d4:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    a8d8:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
    a8da:	5ce0      	ldrb	r0, [r4, r3]
    a8dc:	5ca3      	ldrb	r3, [r4, r2]
    a8de:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a8e2:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    a8e6:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
    a8ea:	f36f 13c7 	bfc	r3, #7, #1
    a8ee:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
    a8f0:	1db3      	adds	r3, r6, #6
    a8f2:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    a8f6:	2206      	movs	r2, #6
    a8f8:	3102      	adds	r1, #2
    a8fa:	f108 0002 	add.w	r0, r8, #2
    a8fe:	f7f5 fe8c 	bl	61a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    a902:	4632      	mov	r2, r6
    a904:	4639      	mov	r1, r7
    a906:	f108 0008 	add.w	r0, r8, #8
    a90a:	f7f5 fe86 	bl	61a <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    a90e:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    a912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a916:	461d      	mov	r5, r3
    a918:	e7d0      	b.n	a8bc <ll_scan_data_set+0x24>
	...

0000a91c <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
    a91c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	//struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
    a920:	b920      	cbnz	r0, a92c <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    a922:	b003      	add	sp, #12
    a924:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    a928:	f7ff bc06 	b.w	a138 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    a92c:	f7ff f8de 	bl	9aec <ll_adv_is_enabled>
    a930:	4607      	mov	r7, r0
    a932:	2800      	cmp	r0, #0
    a934:	d14c      	bne.n	a9d0 <ll_adv_enable+0xb4>
	radio_adv_data = radio_adv_data_get();
    a936:	f7ff f8cd 	bl	9ad4 <radio_adv_data_get>
    a93a:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    a93c:	f7ff f8d2 	bl	9ae4 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    a940:	f898 4203 	ldrb.w	r4, [r8, #515]	; 0x203
    a944:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	radio_scan_data = radio_scan_data_get();
    a948:	4605      	mov	r5, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a94a:	f818 0004 	ldrb.w	r0, [r8, r4]
    a94e:	f000 030f 	and.w	r3, r0, #15
    a952:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    a954:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    a958:	d11f      	bne.n	a99a <ll_adv_enable+0x7e>
		if (h->adv_addr) {
    a95a:	f899 3003 	ldrb.w	r3, [r9, #3]
    a95e:	07db      	lsls	r3, r3, #31
    a960:	d50a      	bpl.n	a978 <ll_adv_enable+0x5c>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    a962:	4639      	mov	r1, r7
    a964:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a968:	f7fa f89c 	bl	4aa4 <ll_addr_get>
    a96c:	2206      	movs	r2, #6
    a96e:	4601      	mov	r1, r0
    a970:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    a974:	f7f5 fe51 	bl	61a <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    a978:	4b16      	ldr	r3, [pc, #88]	; (a9d4 <ll_adv_enable+0xb8>)
    a97a:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    a97c:	8859      	ldrh	r1, [r3, #2]
    a97e:	791b      	ldrb	r3, [r3, #4]
    a980:	9301      	str	r3, [sp, #4]
    a982:	23ff      	movs	r3, #255	; 0xff
    a984:	9300      	str	r3, [sp, #0]
    a986:	f000 0207 	and.w	r2, r0, #7
    a98a:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    a98e:	0940      	lsrs	r0, r0, #5
    a990:	f7ff f9c2 	bl	9d18 <radio_adv_enable>
}
    a994:	b003      	add	sp, #12
    a996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a99a:	4639      	mov	r1, r7
    a99c:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    a9a0:	f895 6203 	ldrb.w	r6, [r5, #515]	; 0x203
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a9a4:	f7fa f87e 	bl	4aa4 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    a9a8:	2206      	movs	r2, #6
    a9aa:	4601      	mov	r1, r0
    a9ac:	f109 0002 	add.w	r0, r9, #2
    a9b0:	f7f5 fe33 	bl	61a <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    a9b4:	f818 0004 	ldrb.w	r0, [r8, r4]
    a9b8:	4639      	mov	r1, r7
    a9ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a9be:	f7fa f871 	bl	4aa4 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    a9c2:	eb06 2606 	add.w	r6, r6, r6, lsl #8
    a9c6:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    a9c8:	4601      	mov	r1, r0
    a9ca:	2206      	movs	r2, #6
    a9cc:	1ca8      	adds	r0, r5, #2
    a9ce:	e7d1      	b.n	a974 <ll_adv_enable+0x58>
		return 0;
    a9d0:	2000      	movs	r0, #0
    a9d2:	e7df      	b.n	a994 <ll_adv_enable+0x78>
    a9d4:	20002658 	.word	0x20002658

0000a9d8 <ctrl_filter_get>:
	return rl[rl_idx].wl;
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
    a9d8:	b508      	push	{r3, lr}
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    a9da:	b950      	cbnz	r0, a9f2 <ctrl_filter_get+0x1a>
    a9dc:	4a06      	ldr	r2, [pc, #24]	; (a9f8 <ctrl_filter_get+0x20>)
    a9de:	4907      	ldr	r1, [pc, #28]	; (a9fc <ctrl_filter_get+0x24>)
    a9e0:	2003      	movs	r0, #3
    a9e2:	f7f7 fc55 	bl	2290 <bt_log>
    a9e6:	4040      	eors	r0, r0
    a9e8:	f380 8811 	msr	BASEPRI, r0
    a9ec:	f04f 0004 	mov.w	r0, #4
    a9f0:	df02      	svc	2
	return &wl_filter;
#endif
}
    a9f2:	4803      	ldr	r0, [pc, #12]	; (aa00 <ctrl_filter_get+0x28>)
    a9f4:	bd08      	pop	{r3, pc}
    a9f6:	bf00      	nop
    a9f8:	0000ed66 	.word	0x0000ed66
    a9fc:	0000ed76 	.word	0x0000ed76
    aa00:	20002664 	.word	0x20002664

0000aa04 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    aa04:	2008      	movs	r0, #8
    aa06:	4770      	bx	lr

0000aa08 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    aa08:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aa0a:	f7ff f877 	bl	9afc <radio_adv_filter_pol_get>
    aa0e:	4604      	mov	r4, r0
    aa10:	b110      	cbz	r0, aa18 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    aa12:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    aa14:	4620      	mov	r0, r4
    aa16:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aa18:	f7ff f894 	bl	9b44 <radio_scan_filter_pol_get>
    aa1c:	07c3      	lsls	r3, r0, #31
    aa1e:	d4f8      	bmi.n	aa12 <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    aa20:	4b02      	ldr	r3, [pc, #8]	; (aa2c <ll_wl_clear+0x24>)
    aa22:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    aa24:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    aa26:	4b02      	ldr	r3, [pc, #8]	; (aa30 <ll_wl_clear+0x28>)
    aa28:	701c      	strb	r4, [r3, #0]
	return 0;
    aa2a:	e7f3      	b.n	aa14 <ll_wl_clear+0xc>
    aa2c:	20002664 	.word	0x20002664
    aa30:	20002d38 	.word	0x20002d38

0000aa34 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    aa34:	b570      	push	{r4, r5, r6, lr}
    aa36:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aa38:	f7ff f860 	bl	9afc <radio_adv_filter_pol_get>
    aa3c:	4605      	mov	r5, r0
    aa3e:	b110      	cbz	r0, aa46 <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    aa40:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    aa42:	4628      	mov	r0, r5
    aa44:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aa46:	f7ff f87d 	bl	9b44 <radio_scan_filter_pol_get>
    aa4a:	07c3      	lsls	r3, r0, #31
    aa4c:	d4f8      	bmi.n	aa40 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    aa4e:	7823      	ldrb	r3, [r4, #0]
    aa50:	2bff      	cmp	r3, #255	; 0xff
    aa52:	d103      	bne.n	aa5c <ll_wl_add+0x28>
		wl_anon = 1;
    aa54:	4b11      	ldr	r3, [pc, #68]	; (aa9c <ll_wl_add+0x68>)
    aa56:	2201      	movs	r2, #1
    aa58:	701a      	strb	r2, [r3, #0]
		return 0;
    aa5a:	e7f2      	b.n	aa42 <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    aa5c:	4910      	ldr	r1, [pc, #64]	; (aaa0 <ll_wl_add+0x6c>)
    aa5e:	780a      	ldrb	r2, [r1, #0]
    aa60:	2aff      	cmp	r2, #255	; 0xff
    aa62:	d018      	beq.n	aa96 <ll_wl_add+0x62>
    aa64:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    aa66:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    aa6a:	07f6      	lsls	r6, r6, #31
    aa6c:	d411      	bmi.n	aa92 <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    aa6e:	2601      	movs	r6, #1
    aa70:	4086      	lsls	r6, r0
    aa72:	4332      	orrs	r2, r6
    aa74:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    aa76:	f003 0301 	and.w	r3, r3, #1
    aa7a:	784a      	ldrb	r2, [r1, #1]
    aa7c:	4083      	lsls	r3, r0
    aa7e:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    aa80:	2206      	movs	r2, #6
    aa82:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    aa86:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    aa88:	3002      	adds	r0, #2
    aa8a:	1c61      	adds	r1, r4, #1
    aa8c:	f7f5 fdc5 	bl	61a <memcpy>
    aa90:	e7d7      	b.n	aa42 <ll_wl_add+0xe>
	     index++) {
    aa92:	3001      	adds	r0, #1
    aa94:	e7e7      	b.n	aa66 <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    aa96:	2507      	movs	r5, #7
    aa98:	e7d3      	b.n	aa42 <ll_wl_add+0xe>
    aa9a:	bf00      	nop
    aa9c:	20002d38 	.word	0x20002d38
    aaa0:	20002664 	.word	0x20002664

0000aaa4 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    aaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aaa8:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aaaa:	f7ff f827 	bl	9afc <radio_adv_filter_pol_get>
    aaae:	4606      	mov	r6, r0
    aab0:	b118      	cbz	r0, aaba <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    aab2:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    aab4:	4630      	mov	r0, r6
    aab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    aaba:	f7ff f843 	bl	9b44 <radio_scan_filter_pol_get>
    aabe:	07c1      	lsls	r1, r0, #31
    aac0:	d4f7      	bmi.n	aab2 <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    aac2:	f897 8000 	ldrb.w	r8, [r7]
    aac6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    aaca:	d102      	bne.n	aad2 <ll_wl_remove+0x2e>
		wl_anon = 0;
    aacc:	4b16      	ldr	r3, [pc, #88]	; (ab28 <ll_wl_remove+0x84>)
    aace:	701e      	strb	r6, [r3, #0]
		return 0;
    aad0:	e7f0      	b.n	aab4 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    aad2:	4c16      	ldr	r4, [pc, #88]	; (ab2c <ll_wl_remove+0x88>)
    aad4:	7823      	ldrb	r3, [r4, #0]
    aad6:	b133      	cbz	r3, aae6 <ll_wl_remove+0x42>
    aad8:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    aada:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    aadc:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    aae0:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    aae4:	d201      	bcs.n	aaea <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    aae6:	2612      	movs	r6, #18
    aae8:	e7e4      	b.n	aab4 <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    aaea:	7823      	ldrb	r3, [r4, #0]
    aaec:	40eb      	lsrs	r3, r5
    aaee:	07da      	lsls	r2, r3, #31
    aaf0:	d5f6      	bpl.n	aae0 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    aaf2:	7863      	ldrb	r3, [r4, #1]
    aaf4:	412b      	asrs	r3, r5
    aaf6:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    aafa:	07db      	lsls	r3, r3, #31
    aafc:	d4f0      	bmi.n	aae0 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    aafe:	fb09 4005 	mla	r0, r9, r5, r4
    ab02:	2206      	movs	r2, #6
    ab04:	4639      	mov	r1, r7
    ab06:	3002      	adds	r0, #2
    ab08:	f7f5 fd72 	bl	5f0 <memcmp>
		     (addr_type & 0x01)) &&
    ab0c:	2800      	cmp	r0, #0
    ab0e:	d1e7      	bne.n	aae0 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    ab10:	2301      	movs	r3, #1
    ab12:	40ab      	lsls	r3, r5
    ab14:	7822      	ldrb	r2, [r4, #0]
    ab16:	43db      	mvns	r3, r3
    ab18:	b2db      	uxtb	r3, r3
    ab1a:	401a      	ands	r2, r3
    ab1c:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    ab1e:	7862      	ldrb	r2, [r4, #1]
    ab20:	4013      	ands	r3, r2
    ab22:	7063      	strb	r3, [r4, #1]
    ab24:	e7c6      	b.n	aab4 <ll_wl_remove+0x10>
    ab26:	bf00      	nop
    ab28:	20002d38 	.word	0x20002d38
    ab2c:	20002664 	.word	0x20002664

0000ab30 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    ab30:	4a03      	ldr	r2, [pc, #12]	; (ab40 <ll_filter_reset+0x10>)
    ab32:	2300      	movs	r3, #0
    ab34:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    ab36:	4a03      	ldr	r2, [pc, #12]	; (ab44 <ll_filter_reset+0x14>)
    ab38:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    ab3a:	7053      	strb	r3, [r2, #1]
    ab3c:	4770      	bx	lr
    ab3e:	bf00      	nop
    ab40:	20002d38 	.word	0x20002d38
    ab44:	20002664 	.word	0x20002664

0000ab48 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    ab48:	4b05      	ldr	r3, [pc, #20]	; (ab60 <cntr_init+0x18>)
    ab4a:	2200      	movs	r2, #0
    ab4c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    ab50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    ab54:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    ab58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ab5c:	4770      	bx	lr
    ab5e:	bf00      	nop
    ab60:	4000b000 	.word	0x4000b000

0000ab64 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    ab64:	4a04      	ldr	r2, [pc, #16]	; (ab78 <cntr_start+0x14>)
    ab66:	7813      	ldrb	r3, [r2, #0]
    ab68:	1c59      	adds	r1, r3, #1
    ab6a:	7011      	strb	r1, [r2, #0]
    ab6c:	2001      	movs	r0, #1
    ab6e:	b913      	cbnz	r3, ab76 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    ab70:	4a02      	ldr	r2, [pc, #8]	; (ab7c <cntr_start+0x18>)
    ab72:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    ab74:	4618      	mov	r0, r3
}
    ab76:	4770      	bx	lr
    ab78:	20002696 	.word	0x20002696
    ab7c:	4000b000 	.word	0x4000b000

0000ab80 <cntr_stop>:

u32_t cntr_stop(void)
{
    ab80:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
    ab82:	4b0c      	ldr	r3, [pc, #48]	; (abb4 <cntr_stop+0x34>)
    ab84:	7818      	ldrb	r0, [r3, #0]
    ab86:	b950      	cbnz	r0, ab9e <cntr_stop+0x1e>
    ab88:	4a0b      	ldr	r2, [pc, #44]	; (abb8 <cntr_stop+0x38>)
    ab8a:	490c      	ldr	r1, [pc, #48]	; (abbc <cntr_stop+0x3c>)
    ab8c:	2003      	movs	r0, #3
    ab8e:	f7f7 fb7f 	bl	2290 <bt_log>
    ab92:	4040      	eors	r0, r0
    ab94:	f380 8811 	msr	BASEPRI, r0
    ab98:	f04f 0004 	mov.w	r0, #4
    ab9c:	df02      	svc	2

	if (--_refcount) {
    ab9e:	3801      	subs	r0, #1
    aba0:	b2c0      	uxtb	r0, r0
    aba2:	7018      	strb	r0, [r3, #0]
    aba4:	2301      	movs	r3, #1
    aba6:	b910      	cbnz	r0, abae <cntr_stop+0x2e>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    aba8:	4a05      	ldr	r2, [pc, #20]	; (abc0 <cntr_stop+0x40>)
    abaa:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    abac:	bd08      	pop	{r3, pc}
		return 1;
    abae:	4618      	mov	r0, r3
}
    abb0:	bd08      	pop	{r3, pc}
    abb2:	bf00      	nop
    abb4:	20002696 	.word	0x20002696
    abb8:	0000ed95 	.word	0x0000ed95
    abbc:	0000ed9f 	.word	0x0000ed9f
    abc0:	4000b000 	.word	0x4000b000

0000abc4 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    abc4:	4b01      	ldr	r3, [pc, #4]	; (abcc <cntr_cnt_get+0x8>)
    abc6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    abca:	4770      	bx	lr
    abcc:	4000b000 	.word	0x4000b000

0000abd0 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    abd0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    abd4:	4b01      	ldr	r3, [pc, #4]	; (abdc <cntr_cmp_set+0xc>)
    abd6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    abda:	4770      	bx	lr
    abdc:	4000b000 	.word	0x4000b000

0000abe0 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    abe0:	4b11      	ldr	r3, [pc, #68]	; (ac28 <do_ecb+0x48>)
{
    abe2:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    abe4:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    abe6:	2500      	movs	r5, #0
    abe8:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    abea:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    abec:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    abf0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    abf4:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    abf8:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    abfa:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    abfe:	b934      	cbnz	r4, ac0e <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ac00:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ac04:	b91c      	cbnz	r4, ac0e <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    ac06:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ac0a:	2c00      	cmp	r4, #0
    ac0c:	d1f5      	bne.n	abfa <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    ac0e:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    ac10:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    ac14:	2c00      	cmp	r4, #0
    ac16:	d1e8      	bne.n	abea <do_ecb+0xa>
    ac18:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    ac1c:	2e00      	cmp	r6, #0
    ac1e:	d0e4      	beq.n	abea <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    ac20:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    ac24:	bd70      	pop	{r4, r5, r6, pc}
    ac26:	bf00      	nop
    ac28:	4000e000 	.word	0x4000e000

0000ac2c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    ac2c:	b570      	push	{r4, r5, r6, lr}
    ac2e:	b08c      	sub	sp, #48	; 0x30
    ac30:	460e      	mov	r6, r1
    ac32:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ac34:	4601      	mov	r1, r0
    ac36:	2210      	movs	r2, #16
    ac38:	4668      	mov	r0, sp
{
    ac3a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ac3c:	f7f8 ff88 	bl	3b50 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    ac40:	2210      	movs	r2, #16
    ac42:	eb0d 0002 	add.w	r0, sp, r2
    ac46:	4631      	mov	r1, r6
    ac48:	f7f8 ff82 	bl	3b50 <mem_rcopy>

	do_ecb(&ecb);
    ac4c:	4668      	mov	r0, sp
    ac4e:	f7ff ffc7 	bl	abe0 <do_ecb>

	if (cipher_text_le) {
    ac52:	b125      	cbz	r5, ac5e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    ac54:	2210      	movs	r2, #16
    ac56:	a908      	add	r1, sp, #32
    ac58:	4628      	mov	r0, r5
    ac5a:	f7f8 ff79 	bl	3b50 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    ac5e:	b124      	cbz	r4, ac6a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    ac60:	2210      	movs	r2, #16
    ac62:	a908      	add	r1, sp, #32
    ac64:	4620      	mov	r0, r4
    ac66:	f7f5 fcd8 	bl	61a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    ac6a:	b00c      	add	sp, #48	; 0x30
    ac6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ac70 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    ac70:	4b07      	ldr	r3, [pc, #28]	; (ac90 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    ac72:	4a08      	ldr	r2, [pc, #32]	; (ac94 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    ac74:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    ac78:	4907      	ldr	r1, [pc, #28]	; (ac98 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    ac7a:	4a08      	ldr	r2, [pc, #32]	; (ac9c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    ac7c:	2800      	cmp	r0, #0
    ac7e:	bf14      	ite	ne
    ac80:	4610      	movne	r0, r2
    ac82:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    ac84:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    ac86:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    ac8a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ac8e:	4770      	bx	lr
    ac90:	4001f000 	.word	0x4001f000
    ac94:	40008140 	.word	0x40008140
    ac98:	40001004 	.word	0x40001004
    ac9c:	40001000 	.word	0x40001000

0000aca0 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    aca0:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    aca2:	4e2c      	ldr	r6, [pc, #176]	; (ad54 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    aca4:	4f2c      	ldr	r7, [pc, #176]	; (ad58 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    aca6:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    aca8:	4b2c      	ldr	r3, [pc, #176]	; (ad5c <sw_switch.isra.9+0xbc>)
    acaa:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    acae:	b22b      	sxth	r3, r5
    acb0:	00dc      	lsls	r4, r3, #3
    acb2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    acb6:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    acba:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    acbe:	f105 040b 	add.w	r4, r5, #11
    acc2:	b2e4      	uxtb	r4, r4
    acc4:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    acc6:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    acca:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    acce:	3fc0      	subs	r7, #192	; 0xc0
    acd0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    acd4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    acd8:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    acdc:	2800      	cmp	r0, #0
    acde:	d034      	beq.n	ad4a <sw_switch.isra.9+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    ace0:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    ace4:	f649 4040 	movw	r0, #40000	; 0x9c40
    ace8:	2a02      	cmp	r2, #2
    acea:	bf0c      	ite	eq
    acec:	4602      	moveq	r2, r0
    acee:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    acf0:	f242 47b8 	movw	r7, #9400	; 0x24b8
    acf4:	f241 3088 	movw	r0, #5000	; 0x1388
    acf8:	2902      	cmp	r1, #2
    acfa:	bf18      	it	ne
    acfc:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    acfe:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    ad02:	4401      	add	r1, r0
    ad04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ad08:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ad0c:	4a14      	ldr	r2, [pc, #80]	; (ad60 <sw_switch.isra.9+0xc0>)
    ad0e:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    ad12:	009b      	lsls	r3, r3, #2
    ad14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ad18:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    ad1c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    ad20:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ad22:	bf8b      	itete	hi
    ad24:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    ad28:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ad2a:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    ad2c:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    ad30:	bf88      	it	hi
    ad32:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    ad36:	4b08      	ldr	r3, [pc, #32]	; (ad58 <sw_switch.isra.9+0xb8>)
    ad38:	f44f 6290 	mov.w	r2, #1152	; 0x480
    ad3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    ad40:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    ad42:	f003 0301 	and.w	r3, r3, #1
    ad46:	7033      	strb	r3, [r6, #0]
    ad48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    ad4a:	4a06      	ldr	r2, [pc, #24]	; (ad64 <sw_switch.isra.9+0xc4>)
    ad4c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    ad50:	212c      	movs	r1, #44	; 0x2c
    ad52:	e7de      	b.n	ad12 <sw_switch.isra.9+0x72>
    ad54:	200028b4 	.word	0x200028b4
    ad58:	4001f000 	.word	0x4001f000
    ad5c:	4000110c 	.word	0x4000110c
    ad60:	40001000 	.word	0x40001000
    ad64:	40001004 	.word	0x40001004

0000ad68 <isr_radio>:
	if (sfp_radio_isr) {
    ad68:	4b02      	ldr	r3, [pc, #8]	; (ad74 <isr_radio+0xc>)
    ad6a:	681b      	ldr	r3, [r3, #0]
    ad6c:	b103      	cbz	r3, ad70 <isr_radio+0x8>
		sfp_radio_isr();
    ad6e:	4718      	bx	r3
    ad70:	4770      	bx	lr
    ad72:	bf00      	nop
    ad74:	200028b0 	.word	0x200028b0

0000ad78 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    ad78:	4b06      	ldr	r3, [pc, #24]	; (ad94 <radio_isr_set+0x1c>)
    ad7a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    ad7c:	4b06      	ldr	r3, [pc, #24]	; (ad98 <radio_isr_set+0x20>)
    ad7e:	2210      	movs	r2, #16
    ad80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ad84:	4b05      	ldr	r3, [pc, #20]	; (ad9c <radio_isr_set+0x24>)
    ad86:	2202      	movs	r2, #2
    ad88:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    ad8c:	2001      	movs	r0, #1
    ad8e:	f7f5 bfb7 	b.w	d00 <_arch_irq_enable>
    ad92:	bf00      	nop
    ad94:	200028b0 	.word	0x200028b0
    ad98:	40001000 	.word	0x40001000
    ad9c:	e000e100 	.word	0xe000e100

0000ada0 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    ada0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ada4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    ada8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    adaa:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    adae:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    adb2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    adb6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    adba:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    adbe:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    adc2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    adc6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    adca:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    adce:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    add2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    add6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    adda:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    adde:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    ade2:	4770      	bx	lr

0000ade4 <radio_reset>:
{
    ade4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    ade6:	2001      	movs	r0, #1
    ade8:	f7f5 ff9a 	bl	d20 <_arch_irq_disable>
	NRF_RADIO->POWER =
    adec:	4b08      	ldr	r3, [pc, #32]	; (ae10 <radio_reset+0x2c>)
    adee:	2200      	movs	r2, #0
    adf0:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    adf4:	2201      	movs	r2, #1
    adf6:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    adfa:	4a06      	ldr	r2, [pc, #24]	; (ae14 <radio_reset+0x30>)
    adfc:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    adfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    ae02:	f023 0301 	bic.w	r3, r3, #1
    ae06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    ae0a:	6013      	str	r3, [r2, #0]
    ae0c:	bd08      	pop	{r3, pc}
    ae0e:	bf00      	nop
    ae10:	40001000 	.word	0x40001000
    ae14:	40001774 	.word	0x40001774

0000ae18 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    ae18:	4b06      	ldr	r3, [pc, #24]	; (ae34 <radio_phy_set+0x1c>)
	switch (phy) {
    ae1a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    ae1c:	bf0c      	ite	eq
    ae1e:	2204      	moveq	r2, #4
    ae20:	2203      	movne	r2, #3
    ae22:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    ae26:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    ae2a:	f042 0201 	orr.w	r2, r2, #1
    ae2e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    ae32:	4770      	bx	lr
    ae34:	40001000 	.word	0x40001000

0000ae38 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    ae38:	4b01      	ldr	r3, [pc, #4]	; (ae40 <radio_tx_power_set+0x8>)
    ae3a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    ae3e:	4770      	bx	lr
    ae40:	40001000 	.word	0x40001000

0000ae44 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    ae44:	4b01      	ldr	r3, [pc, #4]	; (ae4c <radio_freq_chan_set+0x8>)
    ae46:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    ae4a:	4770      	bx	lr
    ae4c:	40001000 	.word	0x40001000

0000ae50 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    ae50:	4b07      	ldr	r3, [pc, #28]	; (ae70 <radio_whiten_iv_set+0x20>)
    ae52:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    ae56:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    ae5a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    ae5e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    ae62:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    ae66:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    ae6a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    ae6e:	4770      	bx	lr
    ae70:	40001000 	.word	0x40001000

0000ae74 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    ae74:	4a0a      	ldr	r2, [pc, #40]	; (aea0 <radio_aa_set+0x2c>)
    ae76:	2300      	movs	r3, #0
    ae78:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    ae7c:	2301      	movs	r3, #1
    ae7e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    ae82:	78c3      	ldrb	r3, [r0, #3]
    ae84:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    ae88:	7843      	ldrb	r3, [r0, #1]
    ae8a:	7881      	ldrb	r1, [r0, #2]
    ae8c:	041b      	lsls	r3, r3, #16
    ae8e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    ae92:	7801      	ldrb	r1, [r0, #0]
    ae94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    ae98:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    ae9c:	4770      	bx	lr
    ae9e:	bf00      	nop
    aea0:	40001000 	.word	0x40001000

0000aea4 <radio_pkt_configure>:
	switch (phy) {
    aea4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    aea8:	2b02      	cmp	r3, #2
{
    aeaa:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    aeac:	bf0c      	ite	eq
    aeae:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    aeb2:	2400      	movne	r4, #0
	if (dc) {
    aeb4:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    aeb6:	f1c0 0308 	rsb	r3, r0, #8
    aeba:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    aebe:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    aec2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    aec6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    aeca:	4a0b      	ldr	r2, [pc, #44]	; (aef8 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    aecc:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    aed0:	bf48      	it	mi
    aed2:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    aed6:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    aed8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    aedc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    aee0:	4b06      	ldr	r3, [pc, #24]	; (aefc <radio_pkt_configure+0x58>)
    aee2:	4003      	ands	r3, r0
    aee4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    aee8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    aeec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    aef0:	4319      	orrs	r1, r3
    aef2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    aef6:	bd10      	pop	{r4, pc}
    aef8:	40001000 	.word	0x40001000
    aefc:	fef80000 	.word	0xfef80000

0000af00 <radio_pkt_rx_set>:
    af00:	4b01      	ldr	r3, [pc, #4]	; (af08 <radio_pkt_rx_set+0x8>)
    af02:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    af06:	4770      	bx	lr
    af08:	40001000 	.word	0x40001000

0000af0c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    af0c:	4b01      	ldr	r3, [pc, #4]	; (af14 <radio_pkt_tx_set+0x8>)
    af0e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    af12:	4770      	bx	lr
    af14:	40001000 	.word	0x40001000

0000af18 <radio_tx_ready_delay_get>:
	switch (phy) {
    af18:	2802      	cmp	r0, #2
}
    af1a:	bf0c      	ite	eq
    af1c:	2028      	moveq	r0, #40	; 0x28
    af1e:	2029      	movne	r0, #41	; 0x29
    af20:	4770      	bx	lr

0000af22 <radio_tx_chain_delay_get>:
}
    af22:	2001      	movs	r0, #1
    af24:	4770      	bx	lr

0000af26 <radio_rx_ready_delay_get>:
}
    af26:	2029      	movs	r0, #41	; 0x29
    af28:	4770      	bx	lr

0000af2a <radio_rx_chain_delay_get>:
	switch (phy) {
    af2a:	2802      	cmp	r0, #2
}
    af2c:	bf0c      	ite	eq
    af2e:	2005      	moveq	r0, #5
    af30:	200a      	movne	r0, #10
    af32:	4770      	bx	lr

0000af34 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    af34:	4b01      	ldr	r3, [pc, #4]	; (af3c <radio_rx_enable+0x8>)
    af36:	2201      	movs	r2, #1
    af38:	605a      	str	r2, [r3, #4]
    af3a:	4770      	bx	lr
    af3c:	40001000 	.word	0x40001000

0000af40 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    af40:	4b01      	ldr	r3, [pc, #4]	; (af48 <radio_tx_enable+0x8>)
    af42:	2201      	movs	r2, #1
    af44:	601a      	str	r2, [r3, #0]
    af46:	4770      	bx	lr
    af48:	40001000 	.word	0x40001000

0000af4c <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    af4c:	4a07      	ldr	r2, [pc, #28]	; (af6c <radio_disable+0x20>)
    af4e:	f44f 6390 	mov.w	r3, #1152	; 0x480
    af52:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    af56:	2301      	movs	r3, #1
    af58:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    af5a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    af5c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    af60:	2100      	movs	r1, #0
    af62:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    af66:	6113      	str	r3, [r2, #16]
    af68:	4770      	bx	lr
    af6a:	bf00      	nop
    af6c:	4001f000 	.word	0x4001f000

0000af70 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    af70:	4b04      	ldr	r3, [pc, #16]	; (af84 <radio_status_reset+0x14>)
    af72:	2200      	movs	r2, #0
    af74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    af78:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    af7c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    af80:	4770      	bx	lr
    af82:	bf00      	nop
    af84:	40001000 	.word	0x40001000

0000af88 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    af88:	4b03      	ldr	r3, [pc, #12]	; (af98 <radio_is_ready+0x10>)
    af8a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    af8e:	3000      	adds	r0, #0
    af90:	bf18      	it	ne
    af92:	2001      	movne	r0, #1
    af94:	4770      	bx	lr
    af96:	bf00      	nop
    af98:	40001000 	.word	0x40001000

0000af9c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    af9c:	4b03      	ldr	r3, [pc, #12]	; (afac <radio_is_done+0x10>)
    af9e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    afa2:	3000      	adds	r0, #0
    afa4:	bf18      	it	ne
    afa6:	2001      	movne	r0, #1
    afa8:	4770      	bx	lr
    afaa:	bf00      	nop
    afac:	40001000 	.word	0x40001000

0000afb0 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    afb0:	4b03      	ldr	r3, [pc, #12]	; (afc0 <radio_is_idle+0x10>)
    afb2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    afb6:	fab0 f080 	clz	r0, r0
    afba:	0940      	lsrs	r0, r0, #5
    afbc:	4770      	bx	lr
    afbe:	bf00      	nop
    afc0:	40001000 	.word	0x40001000

0000afc4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    afc4:	4b04      	ldr	r3, [pc, #16]	; (afd8 <radio_crc_configure+0x14>)
    afc6:	f240 1203 	movw	r2, #259	; 0x103
    afca:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    afce:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    afd2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    afd6:	4770      	bx	lr
    afd8:	40001000 	.word	0x40001000

0000afdc <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    afdc:	4b03      	ldr	r3, [pc, #12]	; (afec <radio_crc_is_valid+0x10>)
    afde:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    afe2:	3000      	adds	r0, #0
    afe4:	bf18      	it	ne
    afe6:	2001      	movne	r0, #1
    afe8:	4770      	bx	lr
    afea:	bf00      	nop
    afec:	40001000 	.word	0x40001000

0000aff0 <radio_pkt_empty_get>:
}
    aff0:	4800      	ldr	r0, [pc, #0]	; (aff4 <radio_pkt_empty_get+0x4>)
    aff2:	4770      	bx	lr
    aff4:	200027a4 	.word	0x200027a4

0000aff8 <radio_pkt_scratch_get>:
}
    aff8:	4800      	ldr	r0, [pc, #0]	; (affc <radio_pkt_scratch_get+0x4>)
    affa:	4770      	bx	lr
    affc:	200027a8 	.word	0x200027a8

0000b000 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b000:	4b04      	ldr	r3, [pc, #16]	; (b014 <radio_switch_complete_and_rx+0x14>)
    b002:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    b004:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b006:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    b00a:	4602      	mov	r2, r0
    b00c:	4608      	mov	r0, r1
    b00e:	f7ff be47 	b.w	aca0 <sw_switch.isra.9>
    b012:	bf00      	nop
    b014:	40001000 	.word	0x40001000

0000b018 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    b018:	4b03      	ldr	r3, [pc, #12]	; (b028 <radio_switch_complete_and_tx+0x10>)
    b01a:	2103      	movs	r1, #3
    b01c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    b020:	4601      	mov	r1, r0
    b022:	2001      	movs	r0, #1
    b024:	f7ff be3c 	b.w	aca0 <sw_switch.isra.9>
    b028:	40001000 	.word	0x40001000

0000b02c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    b02c:	4b05      	ldr	r3, [pc, #20]	; (b044 <radio_switch_complete_and_disable+0x18>)
    b02e:	2203      	movs	r2, #3
    b030:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    b034:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    b038:	f44f 6290 	mov.w	r2, #1152	; 0x480
    b03c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    b040:	4770      	bx	lr
    b042:	bf00      	nop
    b044:	40001000 	.word	0x40001000

0000b048 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    b048:	4a03      	ldr	r2, [pc, #12]	; (b058 <radio_rssi_measure+0x10>)
    b04a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    b04e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    b052:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    b056:	4770      	bx	lr
    b058:	40001000 	.word	0x40001000

0000b05c <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    b05c:	4b01      	ldr	r3, [pc, #4]	; (b064 <radio_rssi_get+0x8>)
    b05e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    b062:	4770      	bx	lr
    b064:	40001000 	.word	0x40001000

0000b068 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    b068:	4b02      	ldr	r3, [pc, #8]	; (b074 <radio_rssi_status_reset+0xc>)
    b06a:	2200      	movs	r2, #0
    b06c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    b070:	4770      	bx	lr
    b072:	bf00      	nop
    b074:	40001000 	.word	0x40001000

0000b078 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    b078:	4b03      	ldr	r3, [pc, #12]	; (b088 <radio_rssi_is_ready+0x10>)
    b07a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    b07e:	3000      	adds	r0, #0
    b080:	bf18      	it	ne
    b082:	2001      	movne	r0, #1
    b084:	4770      	bx	lr
    b086:	bf00      	nop
    b088:	40001000 	.word	0x40001000

0000b08c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    b08c:	b530      	push	{r4, r5, lr}
    b08e:	2400      	movs	r4, #0
    b090:	00a3      	lsls	r3, r4, #2
    b092:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    b09a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    b09c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    b0a0:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    b0a2:	8895      	ldrh	r5, [r2, #4]
    b0a4:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    b0a8:	2c08      	cmp	r4, #8
		bdaddr += 6;
    b0aa:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    b0ae:	d1ef      	bne.n	b090 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    b0b0:	4b02      	ldr	r3, [pc, #8]	; (b0bc <radio_filter_configure+0x30>)
    b0b2:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    b0b6:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    b0ba:	bd30      	pop	{r4, r5, pc}
    b0bc:	40001000 	.word	0x40001000

0000b0c0 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    b0c0:	4a03      	ldr	r2, [pc, #12]	; (b0d0 <radio_filter_disable+0x10>)
    b0c2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    b0c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b0ca:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    b0ce:	4770      	bx	lr
    b0d0:	40001000 	.word	0x40001000

0000b0d4 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    b0d4:	4b02      	ldr	r3, [pc, #8]	; (b0e0 <radio_filter_status_reset+0xc>)
    b0d6:	2200      	movs	r2, #0
    b0d8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    b0dc:	4770      	bx	lr
    b0de:	bf00      	nop
    b0e0:	40001000 	.word	0x40001000

0000b0e4 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    b0e4:	4b03      	ldr	r3, [pc, #12]	; (b0f4 <radio_filter_has_match+0x10>)
    b0e6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    b0ea:	3000      	adds	r0, #0
    b0ec:	bf18      	it	ne
    b0ee:	2001      	movne	r0, #1
    b0f0:	4770      	bx	lr
    b0f2:	bf00      	nop
    b0f4:	40001000 	.word	0x40001000

0000b0f8 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    b0f8:	4b01      	ldr	r3, [pc, #4]	; (b100 <radio_filter_match_get+0x8>)
    b0fa:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    b0fe:	4770      	bx	lr
    b100:	40001000 	.word	0x40001000

0000b104 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    b104:	4b05      	ldr	r3, [pc, #20]	; (b11c <radio_tmr_status_reset+0x18>)
    b106:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    b10a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    b10e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    b112:	227f      	movs	r2, #127	; 0x7f
    b114:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    b118:	4770      	bx	lr
    b11a:	bf00      	nop
    b11c:	4000b000 	.word	0x4000b000

0000b120 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    b120:	4b03      	ldr	r3, [pc, #12]	; (b130 <radio_tmr_tifs_set+0x10>)
    b122:	4a04      	ldr	r2, [pc, #16]	; (b134 <radio_tmr_tifs_set+0x14>)
    b124:	781b      	ldrb	r3, [r3, #0]
    b126:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    b12a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    b12e:	4770      	bx	lr
    b130:	200028b4 	.word	0x200028b4
    b134:	40009000 	.word	0x40009000

0000b138 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    b138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b13c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    b140:	4c30      	ldr	r4, [pc, #192]	; (b204 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    b142:	4d31      	ldr	r5, [pc, #196]	; (b208 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    b144:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    b148:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    b14a:	bf88      	it	hi
    b14c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    b150:	4b2e      	ldr	r3, [pc, #184]	; (b20c <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    b152:	4c2f      	ldr	r4, [pc, #188]	; (b210 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    b154:	bf82      	ittt	hi
    b156:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    b15a:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    b15e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    b162:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    b164:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    b168:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b16a:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    b16c:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    b170:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    b172:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    b176:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    b17a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    b17e:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    b182:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    b186:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    b18a:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    b18e:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    b192:	4920      	ldr	r1, [pc, #128]	; (b214 <radio_tmr_start+0xdc>)
    b194:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    b198:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    b19c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    b1a0:	f7ff fd66 	bl	ac70 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    b1a4:	4b1c      	ldr	r3, [pc, #112]	; (b218 <radio_tmr_start+0xe0>)
    b1a6:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    b1a8:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    b1ac:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    b1b0:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    b1b4:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    b1b6:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    b1ba:	3b74      	subs	r3, #116	; 0x74
    b1bc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    b1c0:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    b1c4:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    b1c8:	f503 739a 	add.w	r3, r3, #308	; 0x134
    b1cc:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    b1d0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    b1d4:	33c4      	adds	r3, #196	; 0xc4
    b1d6:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    b1da:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    b1de:	3bc0      	subs	r3, #192	; 0xc0
    b1e0:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    b1e4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    b1e8:	33c8      	adds	r3, #200	; 0xc8
    b1ea:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    b1ee:	f44f 6310 	mov.w	r3, #2304	; 0x900
    b1f2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    b1f6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    b1fa:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    b1fe:	4628      	mov	r0, r5
    b200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b204:	7ff0bdbf 	.word	0x7ff0bdbf
    b208:	000f4240 	.word	0x000f4240
    b20c:	40008000 	.word	0x40008000
    b210:	4000b000 	.word	0x4000b000
    b214:	4000b148 	.word	0x4000b148
    b218:	40009000 	.word	0x40009000

0000b21c <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    b21c:	4a04      	ldr	r2, [pc, #16]	; (b230 <radio_tmr_stop+0x14>)
    b21e:	2301      	movs	r3, #1
    b220:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    b222:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    b224:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    b228:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    b22a:	6113      	str	r3, [r2, #16]
    b22c:	4770      	bx	lr
    b22e:	bf00      	nop
    b230:	40008000 	.word	0x40008000

0000b234 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    b234:	4b0c      	ldr	r3, [pc, #48]	; (b268 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b236:	4a0d      	ldr	r2, [pc, #52]	; (b26c <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    b238:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b23c:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    b240:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b244:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b248:	3240      	adds	r2, #64	; 0x40
    b24a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    b24e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    b252:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    b256:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    b25a:	3a34      	subs	r2, #52	; 0x34
    b25c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    b260:	2218      	movs	r2, #24
    b262:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b266:	4770      	bx	lr
    b268:	40008000 	.word	0x40008000
    b26c:	40001104 	.word	0x40001104

0000b270 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    b270:	4b0b      	ldr	r3, [pc, #44]	; (b2a0 <radio_tmr_aa_capture+0x30>)
    b272:	4a0c      	ldr	r2, [pc, #48]	; (b2a4 <radio_tmr_aa_capture+0x34>)
    b274:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    b278:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b27c:	3240      	adds	r2, #64	; 0x40
    b27e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    b282:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    b286:	3a3c      	subs	r2, #60	; 0x3c
    b288:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    b28c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b290:	3240      	adds	r2, #64	; 0x40
    b292:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    b296:	220c      	movs	r2, #12
    b298:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b29c:	4770      	bx	lr
    b29e:	bf00      	nop
    b2a0:	4001f000 	.word	0x4001f000
    b2a4:	40001100 	.word	0x40001100

0000b2a8 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    b2a8:	4b01      	ldr	r3, [pc, #4]	; (b2b0 <radio_tmr_aa_get+0x8>)
    b2aa:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    b2ae:	4770      	bx	lr
    b2b0:	40008000 	.word	0x40008000

0000b2b4 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    b2b4:	4b01      	ldr	r3, [pc, #4]	; (b2bc <radio_tmr_aa_save+0x8>)
    b2b6:	6018      	str	r0, [r3, #0]
    b2b8:	4770      	bx	lr
    b2ba:	bf00      	nop
    b2bc:	200028ac 	.word	0x200028ac

0000b2c0 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    b2c0:	4b01      	ldr	r3, [pc, #4]	; (b2c8 <radio_tmr_aa_restore+0x8>)
    b2c2:	6818      	ldr	r0, [r3, #0]
    b2c4:	4770      	bx	lr
    b2c6:	bf00      	nop
    b2c8:	200028ac 	.word	0x200028ac

0000b2cc <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    b2cc:	4b01      	ldr	r3, [pc, #4]	; (b2d4 <radio_tmr_ready_get+0x8>)
    b2ce:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    b2d2:	4770      	bx	lr
    b2d4:	40008000 	.word	0x40008000

0000b2d8 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    b2d8:	4b06      	ldr	r3, [pc, #24]	; (b2f4 <radio_tmr_end_capture+0x1c>)
    b2da:	4a07      	ldr	r2, [pc, #28]	; (b2f8 <radio_tmr_end_capture+0x20>)
    b2dc:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    b2e0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    b2e4:	323c      	adds	r2, #60	; 0x3c
    b2e6:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    b2ea:	2220      	movs	r2, #32
    b2ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    b2f0:	4770      	bx	lr
    b2f2:	bf00      	nop
    b2f4:	4001f000 	.word	0x4001f000
    b2f8:	4000110c 	.word	0x4000110c

0000b2fc <radio_tmr_end_get>:
    b2fc:	4b01      	ldr	r3, [pc, #4]	; (b304 <radio_tmr_end_get+0x8>)
    b2fe:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    b302:	4770      	bx	lr
    b304:	40008000 	.word	0x40008000

0000b308 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    b308:	4b01      	ldr	r3, [pc, #4]	; (b310 <radio_tmr_tifs_base_get+0x8>)
    b30a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    b30e:	4770      	bx	lr
    b310:	40008000 	.word	0x40008000

0000b314 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b314:	4b16      	ldr	r3, [pc, #88]	; (b370 <radio_ccm_rx_pkt_set+0x5c>)
{
    b316:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b318:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b31a:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b31c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    b320:	4e14      	ldr	r6, [pc, #80]	; (b374 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b322:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    b326:	4d14      	ldr	r5, [pc, #80]	; (b378 <radio_ccm_rx_pkt_set+0x64>)
    b328:	2902      	cmp	r1, #2
    b32a:	bf0c      	ite	eq
    b32c:	4629      	moveq	r1, r5
    b32e:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    b330:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b334:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    b338:	4810      	ldr	r0, [pc, #64]	; (b37c <radio_ccm_rx_pkt_set+0x68>)
    b33a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    b33e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b342:	4a0f      	ldr	r2, [pc, #60]	; (b380 <radio_ccm_rx_pkt_set+0x6c>)
    b344:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b348:	490e      	ldr	r1, [pc, #56]	; (b384 <radio_ccm_rx_pkt_set+0x70>)
    b34a:	4a0f      	ldr	r2, [pc, #60]	; (b388 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    b34c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b350:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    b354:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    b358:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    b35c:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    b360:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    b364:	2140      	movs	r1, #64	; 0x40
    b366:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    b36a:	2201      	movs	r2, #1
    b36c:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b36e:	bd70      	pop	{r4, r5, r6, pc}
    b370:	4000f000 	.word	0x4000f000
    b374:	01000001 	.word	0x01000001
    b378:	01010001 	.word	0x01010001
    b37c:	200027a8 	.word	0x200027a8
    b380:	20002698 	.word	0x20002698
    b384:	40001104 	.word	0x40001104
    b388:	4001f000 	.word	0x4001f000

0000b38c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    b38c:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b38e:	4b0e      	ldr	r3, [pc, #56]	; (b3c8 <radio_ccm_tx_pkt_set+0x3c>)
    b390:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b392:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    b394:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    b398:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    b39c:	4c0b      	ldr	r4, [pc, #44]	; (b3cc <radio_ccm_tx_pkt_set+0x40>)
    b39e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    b3a2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    b3a6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b3aa:	4809      	ldr	r0, [pc, #36]	; (b3d0 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b3ac:	4909      	ldr	r1, [pc, #36]	; (b3d4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    b3ae:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    b3b2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    b3b6:	2101      	movs	r1, #1
    b3b8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    b3bc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    b3c0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    b3c4:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    b3c6:	bd10      	pop	{r4, pc}
    b3c8:	4000f000 	.word	0x4000f000
    b3cc:	01010000 	.word	0x01010000
    b3d0:	200027a8 	.word	0x200027a8
    b3d4:	20002698 	.word	0x20002698

0000b3d8 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    b3d8:	4b0c      	ldr	r3, [pc, #48]	; (b40c <radio_ccm_is_done+0x34>)
    b3da:	2202      	movs	r2, #2
    b3dc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    b3e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    b3e4:	b16a      	cbz	r2, b402 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    b3e6:	2202      	movs	r2, #2
    b3e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b3ec:	4a08      	ldr	r2, [pc, #32]	; (b410 <radio_ccm_is_done+0x38>)
    b3ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b3f2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    b3f6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    b3fa:	fab0 f080 	clz	r0, r0
    b3fe:	0940      	lsrs	r0, r0, #5
    b400:	4770      	bx	lr
		__WFE();
    b402:	bf20      	wfe
		__SEV();
    b404:	bf40      	sev
		__WFE();
    b406:	bf20      	wfe
    b408:	e7ea      	b.n	b3e0 <radio_ccm_is_done+0x8>
    b40a:	bf00      	nop
    b40c:	4000f000 	.word	0x4000f000
    b410:	e000e100 	.word	0xe000e100

0000b414 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    b414:	4b03      	ldr	r3, [pc, #12]	; (b424 <radio_ccm_mic_is_valid+0x10>)
    b416:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b41a:	3000      	adds	r0, #0
    b41c:	bf18      	it	ne
    b41e:	2001      	movne	r0, #1
    b420:	4770      	bx	lr
    b422:	bf00      	nop
    b424:	4000f000 	.word	0x4000f000

0000b428 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    b428:	4b01      	ldr	r3, [pc, #4]	; (b430 <radio_ar_match_get+0x8>)
    b42a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    b42e:	4770      	bx	lr
    b430:	4000f000 	.word	0x4000f000

0000b434 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    b434:	4a04      	ldr	r2, [pc, #16]	; (b448 <radio_ar_status_reset+0x14>)
    b436:	2300      	movs	r3, #0
    b438:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    b43c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    b440:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    b444:	4770      	bx	lr
    b446:	bf00      	nop
    b448:	40001000 	.word	0x40001000

0000b44c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    b44c:	4b08      	ldr	r3, [pc, #32]	; (b470 <radio_ar_has_match+0x24>)
    b44e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    b452:	b160      	cbz	r0, b46e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    b454:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    b458:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    b45c:	b138      	cbz	r0, b46e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    b45e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    b462:	b120      	cbz	r0, b46e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    b464:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    b468:	fab0 f080 	clz	r0, r0
    b46c:	0940      	lsrs	r0, r0, #5
}
    b46e:	4770      	bx	lr
    b470:	40001000 	.word	0x40001000

0000b474 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    b474:	2901      	cmp	r1, #1
{
    b476:	b508      	push	{r3, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    b478:	d00a      	beq.n	b490 <mayfly_enable_cb+0x1c>
    b47a:	4a0a      	ldr	r2, [pc, #40]	; (b4a4 <mayfly_enable_cb+0x30>)
    b47c:	490a      	ldr	r1, [pc, #40]	; (b4a8 <mayfly_enable_cb+0x34>)
    b47e:	2003      	movs	r0, #3
    b480:	f7f6 ff06 	bl	2290 <bt_log>
    b484:	4040      	eors	r0, r0
    b486:	f380 8811 	msr	BASEPRI, r0
    b48a:	f04f 0004 	mov.w	r0, #4
    b48e:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    b490:	2018      	movs	r0, #24
	if (enable) {
    b492:	b11a      	cbz	r2, b49c <mayfly_enable_cb+0x28>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    b494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_enable(SWI4_IRQn);
    b498:	f7f5 bc32 	b.w	d00 <_arch_irq_enable>
}
    b49c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		irq_disable(SWI4_IRQn);
    b4a0:	f7f5 bc3e 	b.w	d20 <_arch_irq_disable>
    b4a4:	0000edbe 	.word	0x0000edbe
    b4a8:	0000eded 	.word	0x0000eded

0000b4ac <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    b4ac:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
    b4ae:	b161      	cbz	r1, b4ca <mayfly_is_enabled+0x1e>
    b4b0:	2901      	cmp	r1, #1
    b4b2:	d00f      	beq.n	b4d4 <mayfly_is_enabled+0x28>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    b4b4:	4a08      	ldr	r2, [pc, #32]	; (b4d8 <mayfly_is_enabled+0x2c>)
    b4b6:	4909      	ldr	r1, [pc, #36]	; (b4dc <mayfly_is_enabled+0x30>)
    b4b8:	2003      	movs	r0, #3
    b4ba:	f7f6 fee9 	bl	2290 <bt_log>
    b4be:	4040      	eors	r0, r0
    b4c0:	f380 8811 	msr	BASEPRI, r0
    b4c4:	f04f 0004 	mov.w	r0, #4
    b4c8:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    b4ca:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
    b4cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI4_IRQn);
    b4d0:	f7f5 bc3a 	b.w	d48 <_arch_irq_is_enabled>
    b4d4:	2018      	movs	r0, #24
    b4d6:	e7f9      	b.n	b4cc <mayfly_is_enabled+0x20>
    b4d8:	0000edcf 	.word	0x0000edcf
    b4dc:	0000d76b 	.word	0x0000d76b

0000b4e0 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b4e0:	4288      	cmp	r0, r1
    b4e2:	d00a      	beq.n	b4fa <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    b4e4:	b918      	cbnz	r0, b4ee <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    b4e6:	1e4b      	subs	r3, r1, #1
    b4e8:	4258      	negs	r0, r3
    b4ea:	4158      	adcs	r0, r3
    b4ec:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b4ee:	2801      	cmp	r0, #1
    b4f0:	d105      	bne.n	b4fe <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    b4f2:	fab1 f081 	clz	r0, r1
    b4f6:	0940      	lsrs	r0, r0, #5
    b4f8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    b4fa:	2001      	movs	r0, #1
    b4fc:	4770      	bx	lr
    b4fe:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    b500:	4770      	bx	lr
	...

0000b504 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    b504:	b508      	push	{r3, lr}
    b506:	4b0b      	ldr	r3, [pc, #44]	; (b534 <mayfly_pend+0x30>)
	(void)caller_id;

	switch (callee_id) {
    b508:	b161      	cbz	r1, b524 <mayfly_pend+0x20>
    b50a:	2901      	cmp	r1, #1
    b50c:	d00f      	beq.n	b52e <mayfly_pend+0x2a>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    b50e:	4a0a      	ldr	r2, [pc, #40]	; (b538 <mayfly_pend+0x34>)
    b510:	490a      	ldr	r1, [pc, #40]	; (b53c <mayfly_pend+0x38>)
    b512:	2003      	movs	r0, #3
    b514:	f7f6 febc 	bl	2290 <bt_log>
    b518:	4040      	eors	r0, r0
    b51a:	f380 8811 	msr	BASEPRI, r0
    b51e:	f04f 0004 	mov.w	r0, #4
    b522:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b524:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b528:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b52c:	bd08      	pop	{r3, pc}
    b52e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b532:	e7f9      	b.n	b528 <mayfly_pend+0x24>
    b534:	e000e100 	.word	0xe000e100
    b538:	0000ede1 	.word	0x0000ede1
    b53c:	0000d76b 	.word	0x0000d76b

0000b540 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    b540:	2803      	cmp	r0, #3
{
    b542:	b508      	push	{r3, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
    b544:	d90a      	bls.n	b55c <hal_ticker_instance0_caller_id_get+0x1c>
    b546:	4a09      	ldr	r2, [pc, #36]	; (b56c <hal_ticker_instance0_caller_id_get+0x2c>)
    b548:	4909      	ldr	r1, [pc, #36]	; (b570 <hal_ticker_instance0_caller_id_get+0x30>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    b54a:	2003      	movs	r0, #3
    b54c:	f7f6 fea0 	bl	2290 <bt_log>
    b550:	4040      	eors	r0, r0
    b552:	f380 8811 	msr	BASEPRI, r0
    b556:	f04f 0004 	mov.w	r0, #4
    b55a:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    b55c:	4b05      	ldr	r3, [pc, #20]	; (b574 <hal_ticker_instance0_caller_id_get+0x34>)
    b55e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    b560:	b910      	cbnz	r0, b568 <hal_ticker_instance0_caller_id_get+0x28>
    b562:	4a02      	ldr	r2, [pc, #8]	; (b56c <hal_ticker_instance0_caller_id_get+0x2c>)
    b564:	4904      	ldr	r1, [pc, #16]	; (b578 <hal_ticker_instance0_caller_id_get+0x38>)
    b566:	e7f0      	b.n	b54a <hal_ticker_instance0_caller_id_get+0xa>

	return caller_id;
}
    b568:	bd08      	pop	{r3, pc}
    b56a:	bf00      	nop
    b56c:	0000ee11 	.word	0x0000ee11
    b570:	0000ee53 	.word	0x0000ee53
    b574:	0000ee4f 	.word	0x0000ee4f
    b578:	0000ee88 	.word	0x0000ee88

0000b57c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    b57c:	3802      	subs	r0, #2
{
    b57e:	b510      	push	{r4, lr}
    b580:	461c      	mov	r4, r3
	switch (caller_id) {
    b582:	2803      	cmp	r0, #3
    b584:	d817      	bhi.n	b5b6 <hal_ticker_instance0_sched+0x3a>
    b586:	e8df f000 	tbb	[pc, r0]
    b58a:	0c02      	.short	0x0c02
    b58c:	2a12      	.short	0x2a12
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    b58e:	2903      	cmp	r1, #3
    b590:	d111      	bne.n	b5b6 <hal_ticker_instance0_sched+0x3a>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    b592:	4b16      	ldr	r3, [pc, #88]	; (b5ec <hal_ticker_instance0_sched+0x70>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    b594:	2100      	movs	r1, #0
			m.param = instance;
    b596:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    b598:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    b59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b59e:	f7f8 bb59 	b.w	3c54 <mayfly_enqueue>
		switch (callee_id) {
    b5a2:	2904      	cmp	r1, #4
    b5a4:	d107      	bne.n	b5b6 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    b5a6:	4b12      	ldr	r3, [pc, #72]	; (b5f0 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    b5a8:	2101      	movs	r1, #1
			m.param = instance;
    b5aa:	609c      	str	r4, [r3, #8]
    b5ac:	e7f4      	b.n	b598 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    b5ae:	2903      	cmp	r1, #3
    b5b0:	d00c      	beq.n	b5cc <hal_ticker_instance0_sched+0x50>
    b5b2:	2904      	cmp	r1, #4
    b5b4:	d00f      	beq.n	b5d6 <hal_ticker_instance0_sched+0x5a>
		LL_ASSERT(0);
    b5b6:	4a0f      	ldr	r2, [pc, #60]	; (b5f4 <hal_ticker_instance0_sched+0x78>)
    b5b8:	490f      	ldr	r1, [pc, #60]	; (b5f8 <hal_ticker_instance0_sched+0x7c>)
    b5ba:	2003      	movs	r0, #3
    b5bc:	f7f6 fe68 	bl	2290 <bt_log>
    b5c0:	4040      	eors	r0, r0
    b5c2:	f380 8811 	msr	BASEPRI, r0
    b5c6:	f04f 0004 	mov.w	r0, #4
    b5ca:	df02      	svc	2
			m.param = instance;
    b5cc:	4b0b      	ldr	r3, [pc, #44]	; (b5fc <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b5ce:	2100      	movs	r1, #0
			m.param = instance;
    b5d0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b5d2:	2001      	movs	r0, #1
    b5d4:	e7e1      	b.n	b59a <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    b5d6:	4b0a      	ldr	r3, [pc, #40]	; (b600 <hal_ticker_instance0_sched+0x84>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    b5d8:	2101      	movs	r1, #1
			m.param = instance;
    b5da:	609c      	str	r4, [r3, #8]
    b5dc:	e7f9      	b.n	b5d2 <hal_ticker_instance0_sched+0x56>
		switch (callee_id) {
    b5de:	2904      	cmp	r1, #4
    b5e0:	d1e9      	bne.n	b5b6 <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    b5e2:	4b08      	ldr	r3, [pc, #32]	; (b604 <hal_ticker_instance0_sched+0x88>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b5e4:	2101      	movs	r1, #1
			m.param = instance;
    b5e6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    b5e8:	2003      	movs	r0, #3
    b5ea:	e7d6      	b.n	b59a <hal_ticker_instance0_sched+0x1e>
    b5ec:	20005078 	.word	0x20005078
    b5f0:	20005088 	.word	0x20005088
    b5f4:	0000ee34 	.word	0x0000ee34
    b5f8:	0000d76b 	.word	0x0000d76b
    b5fc:	20005098 	.word	0x20005098
    b600:	200050a8 	.word	0x200050a8
    b604:	200050b8 	.word	0x200050b8

0000b608 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    b608:	4601      	mov	r1, r0
    b60a:	2000      	movs	r0, #0
    b60c:	f7ff bae0 	b.w	abd0 <cntr_cmp_set>

0000b610 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    b610:	4770      	bx	lr
	...

0000b614 <net_buf_pool_get>:
}
    b614:	4b01      	ldr	r3, [pc, #4]	; (b61c <net_buf_pool_get+0x8>)
    b616:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    b61a:	4770      	bx	lr
    b61c:	200051d0 	.word	0x200051d0

0000b620 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b620:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    b622:	4b04      	ldr	r3, [pc, #16]	; (b634 <net_buf_id+0x14>)
    b624:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    b628:	69db      	ldr	r3, [r3, #28]
    b62a:	1ac0      	subs	r0, r0, r3
}
    b62c:	4b02      	ldr	r3, [pc, #8]	; (b638 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    b62e:	10c0      	asrs	r0, r0, #3
}
    b630:	4358      	muls	r0, r3
    b632:	4770      	bx	lr
    b634:	200051d0 	.word	0x200051d0
    b638:	aaaaaaab 	.word	0xaaaaaaab

0000b63c <fixed_data_alloc>:
{
    b63c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b63e:	4b09      	ldr	r3, [pc, #36]	; (b664 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b640:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b642:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    b646:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b648:	699b      	ldr	r3, [r3, #24]
    b64a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    b64c:	6823      	ldr	r3, [r4, #0]
    b64e:	429a      	cmp	r2, r3
    b650:	bf94      	ite	ls
    b652:	600a      	strls	r2, [r1, #0]
    b654:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    b656:	f7ff ffe3 	bl	b620 <net_buf_id>
    b65a:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    b65e:	fb02 3000 	mla	r0, r2, r0, r3
    b662:	bd10      	pop	{r4, pc}
    b664:	200051d0 	.word	0x200051d0

0000b668 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    b668:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b66c:	4605      	mov	r5, r0
    b66e:	9101      	str	r1, [sp, #4]
    b670:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    b672:	f000 fdb9 	bl	c1e8 <_impl_k_uptime_get_32>
    b676:	4607      	mov	r7, r0
	__asm__ volatile(
    b678:	f04f 0320 	mov.w	r3, #32
    b67c:	f3ef 8811 	mrs	r8, BASEPRI
    b680:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    b684:	8a6b      	ldrh	r3, [r5, #18]
    b686:	2b00      	cmp	r3, #0
    b688:	d03d      	beq.n	b706 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    b68a:	8a2a      	ldrh	r2, [r5, #16]
    b68c:	429a      	cmp	r2, r3
    b68e:	d92a      	bls.n	b6e6 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    b690:	2100      	movs	r1, #0
    b692:	4628      	mov	r0, r5
    b694:	f000 fadb 	bl	bc4e <k_queue_get>
			if (buf) {
    b698:	4604      	mov	r4, r0
    b69a:	b320      	cbz	r0, b6e6 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b69c:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    b6a0:	9b01      	ldr	r3, [sp, #4]
    b6a2:	2b00      	cmp	r3, #0
    b6a4:	d03c      	beq.n	b720 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    b6a6:	1c73      	adds	r3, r6, #1
    b6a8:	2b01      	cmp	r3, #1
    b6aa:	d906      	bls.n	b6ba <net_buf_alloc_len+0x52>
    b6ac:	f000 fd9c 	bl	c1e8 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    b6b0:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    b6b2:	42b0      	cmp	r0, r6
    b6b4:	bf94      	ite	ls
    b6b6:	1a36      	subls	r6, r6, r0
    b6b8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b6ba:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    b6bc:	4f1e      	ldr	r7, [pc, #120]	; (b738 <net_buf_alloc_len+0xd0>)
    b6be:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    b6c2:	4632      	mov	r2, r6
    b6c4:	699b      	ldr	r3, [r3, #24]
    b6c6:	681b      	ldr	r3, [r3, #0]
    b6c8:	a901      	add	r1, sp, #4
    b6ca:	681b      	ldr	r3, [r3, #0]
    b6cc:	4620      	mov	r0, r4
    b6ce:	4798      	blx	r3
    b6d0:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    b6d2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    b6d4:	bb28      	cbnz	r0, b722 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    b6d6:	79a0      	ldrb	r0, [r4, #6]
    b6d8:	4621      	mov	r1, r4
    b6da:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    b6de:	f000 fa96 	bl	bc0e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    b6e2:	462c      	mov	r4, r5
    b6e4:	e018      	b.n	b718 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    b6e6:	8a6b      	ldrh	r3, [r5, #18]
    b6e8:	1e5a      	subs	r2, r3, #1
    b6ea:	826a      	strh	r2, [r5, #18]
    b6ec:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    b6f0:	8a2c      	ldrh	r4, [r5, #16]
    b6f2:	1ae4      	subs	r4, r4, r3
    b6f4:	69eb      	ldr	r3, [r5, #28]
    b6f6:	2218      	movs	r2, #24
    b6f8:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    b6fc:	4b0e      	ldr	r3, [pc, #56]	; (b738 <net_buf_alloc_len+0xd0>)
    b6fe:	1aed      	subs	r5, r5, r3
    b700:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    b702:	71a5      	strb	r5, [r4, #6]
		goto success;
    b704:	e7cc      	b.n	b6a0 <net_buf_alloc_len+0x38>
    b706:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    b70a:	4631      	mov	r1, r6
    b70c:	4628      	mov	r0, r5
    b70e:	f000 fa9e 	bl	bc4e <k_queue_get>
	if (!buf) {
    b712:	4604      	mov	r4, r0
    b714:	2800      	cmp	r0, #0
    b716:	d1c3      	bne.n	b6a0 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    b718:	4620      	mov	r0, r4
    b71a:	b002      	add	sp, #8
    b71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    b720:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    b722:	2301      	movs	r3, #1
    b724:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    b726:	2300      	movs	r3, #0
	buf->frags = NULL;
    b728:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    b72a:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    b72c:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    b72e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    b730:	6923      	ldr	r3, [r4, #16]
    b732:	81e2      	strh	r2, [r4, #14]
    b734:	60a3      	str	r3, [r4, #8]
	return buf;
    b736:	e7ef      	b.n	b718 <net_buf_alloc_len+0xb0>
    b738:	200051d0 	.word	0x200051d0

0000b73c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    b73c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    b73e:	685b      	ldr	r3, [r3, #4]
    b740:	460a      	mov	r2, r1
    b742:	6819      	ldr	r1, [r3, #0]
    b744:	f7ff bf90 	b.w	b668 <net_buf_alloc_len>

0000b748 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    b748:	b570      	push	{r4, r5, r6, lr}
    b74a:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    b74c:	f000 fa7f 	bl	bc4e <k_queue_get>
	if (!buf) {
    b750:	4605      	mov	r5, r0
    b752:	b128      	cbz	r0, b760 <net_buf_get+0x18>
    b754:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b756:	7963      	ldrb	r3, [r4, #5]
    b758:	f013 0301 	ands.w	r3, r3, #1
    b75c:	d102      	bne.n	b764 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    b75e:	6023      	str	r3, [r4, #0]

	return buf;
}
    b760:	4628      	mov	r0, r5
    b762:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b764:	2100      	movs	r1, #0
    b766:	4630      	mov	r0, r6
    b768:	f000 fa71 	bl	bc4e <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    b76c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    b76e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    b770:	f023 0301 	bic.w	r3, r3, #1
    b774:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    b776:	4604      	mov	r4, r0
    b778:	e7ed      	b.n	b756 <net_buf_get+0xe>

0000b77a <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    b77a:	6883      	ldr	r3, [r0, #8]
    b77c:	4419      	add	r1, r3
    b77e:	6001      	str	r1, [r0, #0]
    b780:	4770      	bx	lr

0000b782 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    b782:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    b784:	460a      	mov	r2, r1
    b786:	6814      	ldr	r4, [r2, #0]
    b788:	b914      	cbnz	r4, b790 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    b78a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    b78c:	f000 ba43 	b.w	bc16 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    b790:	7953      	ldrb	r3, [r2, #5]
    b792:	f043 0301 	orr.w	r3, r3, #1
    b796:	7153      	strb	r3, [r2, #5]
    b798:	4622      	mov	r2, r4
    b79a:	e7f4      	b.n	b786 <net_buf_put+0x4>

0000b79c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b79e:	4d15      	ldr	r5, [pc, #84]	; (b7f4 <net_buf_unref+0x58>)
    b7a0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    b7a2:	2600      	movs	r6, #0
	while (buf) {
    b7a4:	b904      	cbnz	r4, b7a8 <net_buf_unref+0xc>
    b7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    b7a8:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    b7aa:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    b7ac:	3b01      	subs	r3, #1
    b7ae:	b2db      	uxtb	r3, r3
    b7b0:	7123      	strb	r3, [r4, #4]
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	d1f7      	bne.n	b7a6 <net_buf_unref+0xa>
		if (buf->__buf) {
    b7b6:	6921      	ldr	r1, [r4, #16]
    b7b8:	b159      	cbz	r1, b7d2 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    b7ba:	7963      	ldrb	r3, [r4, #5]
    b7bc:	079b      	lsls	r3, r3, #30
    b7be:	d407      	bmi.n	b7d0 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    b7c0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    b7c2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    b7c6:	4620      	mov	r0, r4
    b7c8:	699b      	ldr	r3, [r3, #24]
    b7ca:	681b      	ldr	r3, [r3, #0]
    b7cc:	689b      	ldr	r3, [r3, #8]
    b7ce:	4798      	blx	r3
			buf->__buf = NULL;
    b7d0:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    b7d2:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    b7d4:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    b7d6:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    b7da:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    b7dc:	695b      	ldr	r3, [r3, #20]
    b7de:	b11b      	cbz	r3, b7e8 <net_buf_unref+0x4c>
			pool->destroy(buf);
    b7e0:	4620      	mov	r0, r4
    b7e2:	4798      	blx	r3
{
    b7e4:	463c      	mov	r4, r7
    b7e6:	e7dd      	b.n	b7a4 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    b7e8:	4621      	mov	r1, r4
    b7ea:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    b7ee:	f000 fa0e 	bl	bc0e <k_queue_prepend>
    b7f2:	e7f7      	b.n	b7e4 <net_buf_unref+0x48>
    b7f4:	200051d0 	.word	0x200051d0

0000b7f8 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    b7f8:	7903      	ldrb	r3, [r0, #4]
    b7fa:	3301      	adds	r3, #1
    b7fc:	7103      	strb	r3, [r0, #4]
	return buf;
}
    b7fe:	4770      	bx	lr

0000b800 <net_buf_simple_add>:
	return buf->data + buf->len;
    b800:	8883      	ldrh	r3, [r0, #4]
    b802:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    b804:	4419      	add	r1, r3
    b806:	8081      	strh	r1, [r0, #4]
	return tail;
}
    b808:	18d0      	adds	r0, r2, r3
    b80a:	4770      	bx	lr

0000b80c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    b80c:	b430      	push	{r4, r5}
    b80e:	8883      	ldrh	r3, [r0, #4]
    b810:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    b812:	189d      	adds	r5, r3, r2
    b814:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b816:	18e0      	adds	r0, r4, r3
}
    b818:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    b81a:	f7f4 befe 	b.w	61a <memcpy>

0000b81e <net_buf_simple_add_u8>:
    b81e:	8883      	ldrh	r3, [r0, #4]
    b820:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    b822:	b510      	push	{r4, lr}
	buf->len += len;
    b824:	1c5c      	adds	r4, r3, #1
    b826:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    b828:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    b82a:	18d0      	adds	r0, r2, r3
    b82c:	bd10      	pop	{r4, pc}

0000b82e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    b82e:	8883      	ldrh	r3, [r0, #4]
    b830:	1a5b      	subs	r3, r3, r1
    b832:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    b834:	6803      	ldr	r3, [r0, #0]
    b836:	4419      	add	r1, r3
    b838:	6001      	str	r1, [r0, #0]
}
    b83a:	4608      	mov	r0, r1
    b83c:	4770      	bx	lr

0000b83e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    b83e:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    b840:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    b842:	2101      	movs	r1, #1
	val = buf->data[0];
    b844:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    b846:	f7ff fff2 	bl	b82e <net_buf_simple_pull>

	return val;
}
    b84a:	4610      	mov	r0, r2
    b84c:	bd08      	pop	{r3, pc}

0000b84e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    b84e:	6802      	ldr	r2, [r0, #0]
    b850:	6880      	ldr	r0, [r0, #8]
}
    b852:	1a10      	subs	r0, r2, r0
    b854:	4770      	bx	lr
	...

0000b858 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    b858:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    b85a:	4b08      	ldr	r3, [pc, #32]	; (b87c <_sys_device_do_config_level+0x24>)
    b85c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b860:	3001      	adds	r0, #1
    b862:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    b866:	4620      	mov	r0, r4
    b868:	42a8      	cmp	r0, r5
    b86a:	f104 040c 	add.w	r4, r4, #12
    b86e:	d300      	bcc.n	b872 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    b870:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    b872:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b876:	685b      	ldr	r3, [r3, #4]
    b878:	4798      	blx	r3
    b87a:	e7f4      	b.n	b866 <_sys_device_do_config_level+0xe>
    b87c:	0000eeb8 	.word	0x0000eeb8

0000b880 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    b880:	4b10      	ldr	r3, [pc, #64]	; (b8c4 <device_get_binding+0x44>)
{
    b882:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    b884:	4c10      	ldr	r4, [pc, #64]	; (b8c8 <device_get_binding+0x48>)
{
    b886:	4605      	mov	r5, r0
    b888:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    b88a:	429c      	cmp	r4, r3
    b88c:	d104      	bne.n	b898 <device_get_binding+0x18>
    b88e:	4c0e      	ldr	r4, [pc, #56]	; (b8c8 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    b890:	42b4      	cmp	r4, r6
    b892:	d109      	bne.n	b8a8 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    b894:	2400      	movs	r4, #0
    b896:	e012      	b.n	b8be <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    b898:	6862      	ldr	r2, [r4, #4]
    b89a:	b11a      	cbz	r2, b8a4 <device_get_binding+0x24>
    b89c:	6822      	ldr	r2, [r4, #0]
    b89e:	6812      	ldr	r2, [r2, #0]
    b8a0:	42aa      	cmp	r2, r5
    b8a2:	d00c      	beq.n	b8be <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    b8a4:	340c      	adds	r4, #12
    b8a6:	e7f0      	b.n	b88a <device_get_binding+0xa>
		if (!info->driver_api) {
    b8a8:	6863      	ldr	r3, [r4, #4]
    b8aa:	b90b      	cbnz	r3, b8b0 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    b8ac:	340c      	adds	r4, #12
    b8ae:	e7ef      	b.n	b890 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    b8b0:	6823      	ldr	r3, [r4, #0]
    b8b2:	4628      	mov	r0, r5
    b8b4:	6819      	ldr	r1, [r3, #0]
    b8b6:	f7f4 fe8e 	bl	5d6 <strcmp>
    b8ba:	2800      	cmp	r0, #0
    b8bc:	d1f6      	bne.n	b8ac <device_get_binding+0x2c>
}
    b8be:	4620      	mov	r0, r4
    b8c0:	bd70      	pop	{r4, r5, r6, pc}
    b8c2:	bf00      	nop
    b8c4:	20005174 	.word	0x20005174
    b8c8:	200050d8 	.word	0x200050d8

0000b8cc <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    b8cc:	1c43      	adds	r3, r0, #1
    b8ce:	d003      	beq.n	b8d8 <_sys_power_save_idle_exit+0xc>
    b8d0:	4b03      	ldr	r3, [pc, #12]	; (b8e0 <_sys_power_save_idle_exit+0x14>)
    b8d2:	681b      	ldr	r3, [r3, #0]
    b8d4:	4298      	cmp	r0, r3
    b8d6:	db01      	blt.n	b8dc <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    b8d8:	f7f6 bb32 	b.w	1f40 <_timer_idle_exit>
    b8dc:	4770      	bx	lr
    b8de:	bf00      	nop
    b8e0:	200050c8 	.word	0x200050c8

0000b8e4 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b8e4:	4d0f      	ldr	r5, [pc, #60]	; (b924 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    b8e6:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    b8e8:	4f0f      	ldr	r7, [pc, #60]	; (b928 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8ea:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    b8ee:	f04f 0220 	mov.w	r2, #32
    b8f2:	f3ef 8311 	mrs	r3, BASEPRI
    b8f6:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    b8fa:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8fc:	42b3      	cmp	r3, r6
    b8fe:	d00a      	beq.n	b916 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    b900:	b14b      	cbz	r3, b916 <idle+0x32>
    b902:	691c      	ldr	r4, [r3, #16]
    b904:	1c63      	adds	r3, r4, #1
    b906:	d008      	beq.n	b91a <idle+0x36>
    b908:	683b      	ldr	r3, [r7, #0]
    b90a:	42a3      	cmp	r3, r4
    b90c:	dd05      	ble.n	b91a <idle+0x36>
	_kernel.idle = ticks;
    b90e:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    b910:	f7f5 fa7e 	bl	e10 <k_cpu_idle>
    b914:	e7eb      	b.n	b8ee <idle+0xa>
    b916:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    b91a:	4620      	mov	r0, r4
    b91c:	f7f6 fafc 	bl	1f18 <_timer_idle_enter>
    b920:	e7f5      	b.n	b90e <idle+0x2a>
    b922:	bf00      	nop
    b924:	200029b0 	.word	0x200029b0
    b928:	200050c8 	.word	0x200050c8

0000b92c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    b92c:	4802      	ldr	r0, [pc, #8]	; (b938 <_bss_zero+0xc>)
    b92e:	4a03      	ldr	r2, [pc, #12]	; (b93c <_bss_zero+0x10>)
    b930:	2100      	movs	r1, #0
    b932:	1a12      	subs	r2, r2, r0
    b934:	f7f4 be9d 	b.w	672 <memset>
    b938:	20000000 	.word	0x20000000
    b93c:	20002dc8 	.word	0x20002dc8

0000b940 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    b940:	4802      	ldr	r0, [pc, #8]	; (b94c <_data_copy+0xc>)
    b942:	4a03      	ldr	r2, [pc, #12]	; (b950 <_data_copy+0x10>)
    b944:	4903      	ldr	r1, [pc, #12]	; (b954 <_data_copy+0x14>)
    b946:	1a12      	subs	r2, r2, r0
    b948:	f7f4 be67 	b.w	61a <memcpy>
    b94c:	20004cc8 	.word	0x20004cc8
    b950:	20005210 	.word	0x20005210
    b954:	0000ef20 	.word	0x0000ef20

0000b958 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    b958:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    b95a:	2002      	movs	r0, #2
    b95c:	f7ff ff7c 	bl	b858 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    b960:	4908      	ldr	r1, [pc, #32]	; (b984 <bg_thread_main+0x2c>)
    b962:	4809      	ldr	r0, [pc, #36]	; (b988 <bg_thread_main+0x30>)
    b964:	f7f5 fd26 	bl	13b4 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    b968:	2003      	movs	r0, #3
    b96a:	f7ff ff75 	bl	b858 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    b96e:	f000 fe3d 	bl	c5ec <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    b972:	f7f4 fedd 	bl	730 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    b976:	4a05      	ldr	r2, [pc, #20]	; (b98c <bg_thread_main+0x34>)
    b978:	7a13      	ldrb	r3, [r2, #8]
    b97a:	f023 0301 	bic.w	r3, r3, #1
    b97e:	7213      	strb	r3, [r2, #8]
    b980:	bd08      	pop	{r3, pc}
    b982:	bf00      	nop
    b984:	0000eed4 	.word	0x0000eed4
    b988:	0000eef0 	.word	0x0000eef0
    b98c:	20002948 	.word	0x20002948

0000b990 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    b990:	b580      	push	{r7, lr}
    b992:	b086      	sub	sp, #24
    b994:	4e32      	ldr	r6, [pc, #200]	; (ba60 <_Cstart+0xd0>)
    b996:	af06      	add	r7, sp, #24
	_IntLibInit();
    b998:	f7f4 fff4 	bl	984 <_IntLibInit>
    b99c:	2324      	movs	r3, #36	; 0x24
    b99e:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    b9a0:	519a      	str	r2, [r3, r6]
    b9a2:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    b9a4:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    b9a8:	6052      	str	r2, [r2, #4]
    b9aa:	d1f8      	bne.n	b99e <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    b9ac:	4d2d      	ldr	r5, [pc, #180]	; (ba64 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    b9ae:	f8df 80dc 	ldr.w	r8, [pc, #220]	; ba8c <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    b9b2:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    b9b4:	2400      	movs	r4, #0
    b9b6:	f04f 0901 	mov.w	r9, #1
    b9ba:	4643      	mov	r3, r8
    b9bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b9c0:	4929      	ldr	r1, [pc, #164]	; (ba68 <_Cstart+0xd8>)
    b9c2:	f8cd 9010 	str.w	r9, [sp, #16]
    b9c6:	4628      	mov	r0, r5
    b9c8:	9403      	str	r4, [sp, #12]
    b9ca:	9402      	str	r4, [sp, #8]
    b9cc:	9401      	str	r4, [sp, #4]
    b9ce:	9400      	str	r4, [sp, #0]
    b9d0:	f000 fdc4 	bl	c55c <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b9d4:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    b9d6:	4628      	mov	r0, r5
    b9d8:	f023 0304 	bic.w	r3, r3, #4
    b9dc:	726b      	strb	r3, [r5, #9]
    b9de:	f000 f97d 	bl	bcdc <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    b9e2:	230f      	movs	r3, #15
    b9e4:	9303      	str	r3, [sp, #12]
    b9e6:	4921      	ldr	r1, [pc, #132]	; (ba6c <_Cstart+0xdc>)
    b9e8:	f8cd 9010 	str.w	r9, [sp, #16]
    b9ec:	9402      	str	r4, [sp, #8]
    b9ee:	9401      	str	r4, [sp, #4]
    b9f0:	9400      	str	r4, [sp, #0]
    b9f2:	4b1f      	ldr	r3, [pc, #124]	; (ba70 <_Cstart+0xe0>)
    b9f4:	481f      	ldr	r0, [pc, #124]	; (ba74 <_Cstart+0xe4>)
    b9f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    b9fa:	f000 fdaf 	bl	c55c <_setup_new_thread>
    b9fe:	4b1d      	ldr	r3, [pc, #116]	; (ba74 <_Cstart+0xe4>)
    ba00:	4a1c      	ldr	r2, [pc, #112]	; (ba74 <_Cstart+0xe4>)
    ba02:	7a5b      	ldrb	r3, [r3, #9]
    ba04:	f023 0304 	bic.w	r3, r3, #4
    ba08:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    ba0a:	4610      	mov	r0, r2
    ba0c:	f000 f966 	bl	bcdc <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    ba10:	4b19      	ldr	r3, [pc, #100]	; (ba78 <_Cstart+0xe8>)
    ba12:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    ba14:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    ba16:	4b19      	ldr	r3, [pc, #100]	; (ba7c <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ba18:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ba1c:	4b18      	ldr	r3, [pc, #96]	; (ba80 <_Cstart+0xf0>)
    ba1e:	22e0      	movs	r2, #224	; 0xe0
    ba20:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    ba24:	77dc      	strb	r4, [r3, #31]
    ba26:	761c      	strb	r4, [r3, #24]
    ba28:	765c      	strb	r4, [r3, #25]
    ba2a:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ba2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ba2e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    ba32:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    ba34:	f7f5 f95c 	bl	cf0 <_FaultInit>
	_CpuIdleInit();
    ba38:	f7f5 f9e4 	bl	e04 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ba3c:	4620      	mov	r0, r4
    ba3e:	f7ff ff0b 	bl	b858 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ba42:	4648      	mov	r0, r9
    ba44:	f7ff ff08 	bl	b858 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    ba48:	4b0e      	ldr	r3, [pc, #56]	; (ba84 <_Cstart+0xf4>)

	_current = main_thread;
    ba4a:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    ba4c:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    ba50:	4a0d      	ldr	r2, [pc, #52]	; (ba88 <_Cstart+0xf8>)
    ba52:	f383 8809 	msr	PSP, r3
    ba56:	2100      	movs	r1, #0
    ba58:	f381 8811 	msr	BASEPRI, r1
    ba5c:	4640      	mov	r0, r8
    ba5e:	4710      	bx	r2
    ba60:	200029b0 	.word	0x200029b0
    ba64:	20002948 	.word	0x20002948
    ba68:	20003b88 	.word	0x20003b88
    ba6c:	20003f88 	.word	0x20003f88
    ba70:	0000b8e5 	.word	0x0000b8e5
    ba74:	200028e0 	.word	0x200028e0
    ba78:	200029c0 	.word	0x200029c0
    ba7c:	200048c8 	.word	0x200048c8
    ba80:	e000ed00 	.word	0xe000ed00
    ba84:	20003f88 	.word	0x20003f88
    ba88:	0000c4f5 	.word	0x0000c4f5
    ba8c:	0000b959 	.word	0x0000b959

0000ba90 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    ba90:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    ba92:	7ac4      	ldrb	r4, [r0, #11]
    ba94:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    ba96:	428c      	cmp	r4, r1
    ba98:	f04f 040c 	mov.w	r4, #12
    ba9c:	bfb6      	itet	lt
    ba9e:	4361      	mullt	r1, r4
    baa0:	fb04 0101 	mlage	r1, r4, r1, r0
    baa4:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    baa6:	2420      	movs	r4, #32
    baa8:	fb92 f4f4 	sdiv	r4, r2, r4
    baac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    bab0:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    bab2:	f002 001f 	and.w	r0, r2, #31
    bab6:	bd10      	pop	{r4, pc}

0000bab8 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    bab8:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    baba:	ab01      	add	r3, sp, #4
    babc:	f7ff ffe8 	bl	ba90 <get_bit_ptr>

	*word |= (1<<bit);
    bac0:	9a01      	ldr	r2, [sp, #4]
    bac2:	2301      	movs	r3, #1
    bac4:	fa03 f000 	lsl.w	r0, r3, r0
    bac8:	6813      	ldr	r3, [r2, #0]
    baca:	4303      	orrs	r3, r0
    bacc:	6013      	str	r3, [r2, #0]
}
    bace:	b003      	add	sp, #12
    bad0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bad4 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    bad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bad8:	4c30      	ldr	r4, [pc, #192]	; (bb9c <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    bada:	4e31      	ldr	r6, [pc, #196]	; (bba0 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    badc:	270c      	movs	r7, #12
    bade:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    bae2:	42b5      	cmp	r5, r6
    bae4:	d302      	bcc.n	baec <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    bae6:	2000      	movs	r0, #0
    bae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    baec:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    baf0:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    baf4:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    baf8:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    bafa:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    bafe:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    bb00:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    bb02:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    bb04:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    bb08:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    bb0c:	4291      	cmp	r1, r2
    bb0e:	db07      	blt.n	bb20 <init_static_pools+0x4c>
    bb10:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    bb14:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    bb18:	4598      	cmp	r8, r3
    bb1a:	db24      	blt.n	bb66 <init_static_pools+0x92>
    bb1c:	3418      	adds	r4, #24
    bb1e:	e7de      	b.n	bade <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    bb20:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    bb24:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    bb28:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    bb2c:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    bb2e:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    bb32:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    bb36:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    bb3a:	bfc8      	it	gt
    bb3c:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    bb3e:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    bb42:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    bb46:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    bb4a:	bfca      	itet	gt
    bb4c:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    bb50:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    bb54:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    bb58:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    bb5c:	bfc8      	it	gt
    bb5e:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    bb62:	3101      	adds	r1, #1
    bb64:	e7d0      	b.n	bb08 <init_static_pools+0x34>
	return p->buf + lsz * block;
    bb66:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    bb6a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    bb6e:	f854 0c10 	ldr.w	r0, [r4, #-16]
    bb72:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    bb76:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    bb7a:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    bb7e:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    bb80:	689a      	ldr	r2, [r3, #8]
    bb82:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    bb84:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    bb86:	4628      	mov	r0, r5
    bb88:	6011      	str	r1, [r2, #0]
	list->tail = node;
    bb8a:	6099      	str	r1, [r3, #8]
    bb8c:	4642      	mov	r2, r8
    bb8e:	2100      	movs	r1, #0
    bb90:	f7ff ff92 	bl	bab8 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    bb94:	f108 0801 	add.w	r8, r8, #1
    bb98:	e7bc      	b.n	bb14 <init_static_pools+0x40>
    bb9a:	bf00      	nop
    bb9c:	200051b8 	.word	0x200051b8
    bba0:	200051a8 	.word	0x200051a8

0000bba4 <k_queue_init>:
	list->head = NULL;
    bba4:	2300      	movs	r3, #0
    bba6:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    bba8:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    bbaa:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    bbae:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    bbb0:	60c3      	str	r3, [r0, #12]
    bbb2:	4770      	bx	lr

0000bbb4 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    bbb4:	b510      	push	{r4, lr}
    bbb6:	f04f 0320 	mov.w	r3, #32
    bbba:	f3ef 8411 	mrs	r4, BASEPRI
    bbbe:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    bbc2:	b931      	cbnz	r1, bbd2 <k_queue_insert+0x1e>
	node->next = list->head;
    bbc4:	6803      	ldr	r3, [r0, #0]
    bbc6:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    bbc8:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    bbca:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    bbcc:	b943      	cbnz	r3, bbe0 <k_queue_insert+0x2c>
		list->tail = node;
    bbce:	6042      	str	r2, [r0, #4]
    bbd0:	e006      	b.n	bbe0 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    bbd2:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    bbd4:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    bbd6:	b98b      	cbnz	r3, bbfc <k_queue_insert+0x48>
	if (!list->tail) {
    bbd8:	6843      	ldr	r3, [r0, #4]
    bbda:	b96b      	cbnz	r3, bbf8 <k_queue_insert+0x44>
		list->tail = node;
    bbdc:	6042      	str	r2, [r0, #4]
		list->head = node;
    bbde:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    bbe0:	2104      	movs	r1, #4
    bbe2:	3008      	adds	r0, #8
    bbe4:	f000 ff86 	bl	caf4 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    bbe8:	b150      	cbz	r0, bc00 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    bbea:	f000 fa4b 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    bbee:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    bbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbf4:	f7f4 bed2 	b.w	99c <__swap>
		list->tail->next = node;
    bbf8:	601a      	str	r2, [r3, #0]
    bbfa:	e7e8      	b.n	bbce <k_queue_insert+0x1a>
		prev->next = node;
    bbfc:	600a      	str	r2, [r1, #0]
    bbfe:	e7ef      	b.n	bbe0 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bc00:	f384 8811 	msr	BASEPRI, r4
    bc04:	bd10      	pop	{r4, pc}

0000bc06 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    bc06:	460a      	mov	r2, r1
    bc08:	6841      	ldr	r1, [r0, #4]
    bc0a:	f7ff bfd3 	b.w	bbb4 <k_queue_insert>

0000bc0e <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    bc0e:	460a      	mov	r2, r1
    bc10:	2100      	movs	r1, #0
    bc12:	f7ff bfcf 	b.w	bbb4 <k_queue_insert>

0000bc16 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    bc16:	b510      	push	{r4, lr}
	__asm__ volatile(
    bc18:	f04f 0320 	mov.w	r3, #32
    bc1c:	f3ef 8411 	mrs	r4, BASEPRI
    bc20:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    bc24:	6843      	ldr	r3, [r0, #4]
    bc26:	b96b      	cbnz	r3, bc44 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    bc28:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    bc2a:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    bc2c:	2104      	movs	r1, #4
    bc2e:	3008      	adds	r0, #8
    bc30:	f000 ff60 	bl	caf4 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    bc34:	b140      	cbz	r0, bc48 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    bc36:	f000 fa25 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    bc3a:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    bc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc40:	f7f4 beac 	b.w	99c <__swap>
		list->tail->next = (sys_snode_t *)head;
    bc44:	6019      	str	r1, [r3, #0]
    bc46:	e7f0      	b.n	bc2a <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bc48:	f384 8811 	msr	BASEPRI, r4
    bc4c:	bd10      	pop	{r4, pc}

0000bc4e <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    bc4e:	b530      	push	{r4, r5, lr}
    bc50:	4604      	mov	r4, r0
    bc52:	b087      	sub	sp, #28
    bc54:	460d      	mov	r5, r1
	__asm__ volatile(
    bc56:	f04f 0220 	mov.w	r2, #32
    bc5a:	f3ef 8311 	mrs	r3, BASEPRI
    bc5e:	f382 8811 	msr	BASEPRI, r2
    bc62:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    bc64:	b152      	cbz	r2, bc7c <k_queue_get+0x2e>
	list->head = node->next;
    bc66:	6811      	ldr	r1, [r2, #0]
    bc68:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    bc6a:	6840      	ldr	r0, [r0, #4]
    bc6c:	4282      	cmp	r2, r0
		list->tail = list->head;
    bc6e:	bf08      	it	eq
    bc70:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bc72:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    bc76:	4610      	mov	r0, r2
    bc78:	b007      	add	sp, #28
    bc7a:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    bc7c:	b919      	cbnz	r1, bc86 <k_queue_get+0x38>
    bc7e:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    bc82:	2200      	movs	r2, #0
    bc84:	e7f7      	b.n	bc76 <k_queue_get+0x28>
    bc86:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    bc8a:	2104      	movs	r1, #4
    bc8c:	4603      	mov	r3, r0
    bc8e:	eb0d 0001 	add.w	r0, sp, r1
    bc92:	f000 fe77 	bl	c984 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    bc96:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    bc9a:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    bc9c:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    bca0:	2101      	movs	r1, #1
    bca2:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    bca4:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    bca8:	f000 fe80 	bl	c9ac <k_poll>
		if (err) {
    bcac:	2800      	cmp	r0, #0
    bcae:	d1e8      	bne.n	bc82 <k_queue_get+0x34>
	__asm__ volatile(
    bcb0:	f04f 0320 	mov.w	r3, #32
    bcb4:	f3ef 8111 	mrs	r1, BASEPRI
    bcb8:	f383 8811 	msr	BASEPRI, r3
    bcbc:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    bcbe:	b12a      	cbz	r2, bccc <k_queue_get+0x7e>
	if (list->tail == node) {
    bcc0:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    bcc2:	6813      	ldr	r3, [r2, #0]
    bcc4:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    bcc6:	4282      	cmp	r2, r0
		list->tail = list->head;
    bcc8:	bf08      	it	eq
    bcca:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bccc:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    bcd0:	2a00      	cmp	r2, #0
    bcd2:	d1d0      	bne.n	bc76 <k_queue_get+0x28>
    bcd4:	1c6b      	adds	r3, r5, #1
    bcd6:	d0de      	beq.n	bc96 <k_queue_get+0x48>
    bcd8:	e7d3      	b.n	bc82 <k_queue_get+0x34>
	...

0000bcdc <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    bcdc:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    bcde:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    bce2:	4911      	ldr	r1, [pc, #68]	; (bd28 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    bce4:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    bce8:	1162      	asrs	r2, r4, #5
    bcea:	3206      	adds	r2, #6
    bcec:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    bcf0:	f004 051f 	and.w	r5, r4, #31
    bcf4:	2401      	movs	r4, #1
    bcf6:	40ac      	lsls	r4, r5
    bcf8:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bcfa:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    bcfc:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    bcfe:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    bd00:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bd02:	1d1a      	adds	r2, r3, #4
    bd04:	440a      	add	r2, r1
	node->prev = list->tail;
    bd06:	440b      	add	r3, r1
	node->next = list;
    bd08:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    bd0a:	689a      	ldr	r2, [r3, #8]
    bd0c:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    bd0e:	689a      	ldr	r2, [r3, #8]
    bd10:	6010      	str	r0, [r2, #0]
	list->tail = node;
    bd12:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    bd14:	69cb      	ldr	r3, [r1, #28]
    bd16:	f990 400a 	ldrsb.w	r4, [r0, #10]
    bd1a:	f993 200a 	ldrsb.w	r2, [r3, #10]
    bd1e:	4294      	cmp	r4, r2
    bd20:	bfa8      	it	ge
    bd22:	4618      	movge	r0, r3
    bd24:	61c8      	str	r0, [r1, #28]
    bd26:	bd30      	pop	{r4, r5, pc}
    bd28:	200029b0 	.word	0x200029b0

0000bd2c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bd2c:	7a42      	ldrb	r2, [r0, #9]
    bd2e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    bd32:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    bd36:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    bd38:	d104      	bne.n	bd44 <_ready_thread+0x18>
    bd3a:	6a03      	ldr	r3, [r0, #32]
    bd3c:	3301      	adds	r3, #1
    bd3e:	d101      	bne.n	bd44 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    bd40:	f7ff bfcc 	b.w	bcdc <_add_thread_to_ready_q>
    bd44:	4770      	bx	lr
	...

0000bd48 <_add_timeout>:
{
    bd48:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    bd4a:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    bd4c:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    bd4e:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    bd50:	bb13      	cbnz	r3, bd98 <_add_timeout+0x50>
	__asm__ volatile(
    bd52:	f04f 0220 	mov.w	r2, #32
    bd56:	f3ef 8411 	mrs	r4, BASEPRI
    bd5a:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    bd5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bd62:	610a      	str	r2, [r1, #16]
	if (thread) {
    bd64:	b180      	cbz	r0, bd88 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    bd66:	68ca      	ldr	r2, [r1, #12]
    bd68:	b14a      	cbz	r2, bd7e <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    bd6a:	e890 0006 	ldmia.w	r0, {r1, r2}
    bd6e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    bd70:	6801      	ldr	r1, [r0, #0]
    bd72:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    bd74:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    bd76:	61c3      	str	r3, [r0, #28]
    bd78:	f022 0202 	bic.w	r2, r2, #2
    bd7c:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    bd7e:	f7ff ffd5 	bl	bd2c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bd82:	f384 8811 	msr	BASEPRI, r4
    bd86:	bd70      	pop	{r4, r5, r6, pc}
    bd88:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    bd8c:	694b      	ldr	r3, [r1, #20]
    bd8e:	b32b      	cbz	r3, bddc <_add_timeout+0x94>
			timeout->func(timeout);
    bd90:	4608      	mov	r0, r1
}
    bd92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    bd96:	4718      	bx	r3
	return list->head == list;
    bd98:	4a11      	ldr	r2, [pc, #68]	; (bde0 <_add_timeout+0x98>)
    bd9a:	4610      	mov	r0, r2
    bd9c:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bda0:	4283      	cmp	r3, r0
    bda2:	d10c      	bne.n	bdbe <_add_timeout+0x76>
	node->next = list;
    bda4:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    bda6:	6953      	ldr	r3, [r2, #20]
    bda8:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    bdaa:	6953      	ldr	r3, [r2, #20]
    bdac:	6019      	str	r1, [r3, #0]
	list->tail = node;
    bdae:	6151      	str	r1, [r2, #20]
    bdb0:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    bdb2:	1b64      	subs	r4, r4, r5
    bdb4:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    bdb6:	6954      	ldr	r4, [r2, #20]
    bdb8:	42a3      	cmp	r3, r4
    bdba:	d0f3      	beq.n	bda4 <_add_timeout+0x5c>
    bdbc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	d0f0      	beq.n	bda4 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    bdc2:	690c      	ldr	r4, [r1, #16]
    bdc4:	691d      	ldr	r5, [r3, #16]
    bdc6:	42ac      	cmp	r4, r5
    bdc8:	dcf3      	bgt.n	bdb2 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    bdca:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    bdcc:	1b2c      	subs	r4, r5, r4
    bdce:	611c      	str	r4, [r3, #16]
    bdd0:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    bdd2:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    bdd4:	685a      	ldr	r2, [r3, #4]
    bdd6:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    bdd8:	6059      	str	r1, [r3, #4]
    bdda:	bd70      	pop	{r4, r5, r6, pc}
    bddc:	bd70      	pop	{r4, r5, r6, pc}
    bdde:	bf00      	nop
    bde0:	200029b0 	.word	0x200029b0

0000bde4 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    bde4:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    bde8:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    bdea:	f990 200a 	ldrsb.w	r2, [r0, #10]
    bdee:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    bdf0:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bdf2:	3214      	adds	r2, #20
    bdf4:	604b      	str	r3, [r1, #4]
    bdf6:	4b14      	ldr	r3, [pc, #80]	; (be48 <_remove_thread_from_ready_q+0x64>)
    bdf8:	00d2      	lsls	r2, r2, #3
    bdfa:	1d11      	adds	r1, r2, #4
	return list->head == list;
    bdfc:	441a      	add	r2, r3
    bdfe:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    be00:	6852      	ldr	r2, [r2, #4]
    be02:	428a      	cmp	r2, r1
    be04:	d10f      	bne.n	be26 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    be06:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    be0a:	3110      	adds	r1, #16
    be0c:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    be0e:	3206      	adds	r2, #6
    be10:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    be14:	2401      	movs	r4, #1
    be16:	f001 011f 	and.w	r1, r1, #31
    be1a:	fa04 f101 	lsl.w	r1, r4, r1
    be1e:	6894      	ldr	r4, [r2, #8]
    be20:	ea24 0401 	bic.w	r4, r4, r1
    be24:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    be26:	69da      	ldr	r2, [r3, #28]
    be28:	4290      	cmp	r0, r2
    be2a:	d10b      	bne.n	be44 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    be2c:	6a19      	ldr	r1, [r3, #32]
    be2e:	fa91 f2a1 	rbit	r2, r1
    be32:	2900      	cmp	r1, #0
    be34:	fab2 f282 	clz	r2, r2
    be38:	bf08      	it	eq
    be3a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    be3e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    be42:	6a52      	ldr	r2, [r2, #36]	; 0x24
    be44:	61da      	str	r2, [r3, #28]
    be46:	bd10      	pop	{r4, pc}
    be48:	200029b0 	.word	0x200029b0

0000be4c <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    be4c:	b430      	push	{r4, r5}
    be4e:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    be50:	42a1      	cmp	r1, r4
    be52:	bf08      	it	eq
    be54:	2400      	moveq	r4, #0
    be56:	b314      	cbz	r4, be9e <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    be58:	f990 500a 	ldrsb.w	r5, [r0, #10]
    be5c:	f994 300a 	ldrsb.w	r3, [r4, #10]
    be60:	429d      	cmp	r5, r3
    be62:	da16      	bge.n	be92 <_pend_thread+0x46>
		node->prev = insert_point->prev;
    be64:	6863      	ldr	r3, [r4, #4]
    be66:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    be68:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    be6a:	6863      	ldr	r3, [r4, #4]
    be6c:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    be6e:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    be70:	7a43      	ldrb	r3, [r0, #9]
    be72:	f043 0302 	orr.w	r3, r3, #2
    be76:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    be78:	1c53      	adds	r3, r2, #1
    be7a:	d017      	beq.n	beac <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    be7c:	3209      	adds	r2, #9
    be7e:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    be80:	bc30      	pop	{r4, r5}
    be82:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    be86:	460a      	mov	r2, r1
    be88:	3301      	adds	r3, #1
    be8a:	f100 0110 	add.w	r1, r0, #16
    be8e:	f7ff bf5b 	b.w	bd48 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    be92:	684b      	ldr	r3, [r1, #4]
    be94:	429c      	cmp	r4, r3
    be96:	d002      	beq.n	be9e <_pend_thread+0x52>
    be98:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    be9a:	2c00      	cmp	r4, #0
    be9c:	d1db      	bne.n	be56 <_pend_thread+0xa>
	node->next = list;
    be9e:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    bea0:	684b      	ldr	r3, [r1, #4]
    bea2:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    bea4:	684b      	ldr	r3, [r1, #4]
    bea6:	6018      	str	r0, [r3, #0]
	list->tail = node;
    bea8:	6048      	str	r0, [r1, #4]
    beaa:	e7e1      	b.n	be70 <_pend_thread+0x24>
}
    beac:	bc30      	pop	{r4, r5}
    beae:	4770      	bx	lr

0000beb0 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    beb0:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    beb2:	4c06      	ldr	r4, [pc, #24]	; (becc <_pend_current_thread+0x1c>)
{
    beb4:	460e      	mov	r6, r1
    beb6:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    beb8:	68a0      	ldr	r0, [r4, #8]
    beba:	f7ff ff93 	bl	bde4 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    bebe:	4632      	mov	r2, r6
    bec0:	4629      	mov	r1, r5
    bec2:	68a0      	ldr	r0, [r4, #8]
}
    bec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    bec8:	f7ff bfc0 	b.w	be4c <_pend_thread>
    becc:	200029b0 	.word	0x200029b0

0000bed0 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    bed0:	4a09      	ldr	r2, [pc, #36]	; (bef8 <__must_switch_threads+0x28>)
    bed2:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    bed4:	6892      	ldr	r2, [r2, #8]
    bed6:	2900      	cmp	r1, #0
    bed8:	fa91 f3a1 	rbit	r3, r1
    bedc:	f992 000a 	ldrsb.w	r0, [r2, #10]
    bee0:	fab3 f383 	clz	r3, r3
    bee4:	bf08      	it	eq
    bee6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    beea:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    beec:	4298      	cmp	r0, r3
    beee:	bfd4      	ite	le
    bef0:	2000      	movle	r0, #0
    bef2:	2001      	movgt	r0, #1
    bef4:	4770      	bx	lr
    bef6:	bf00      	nop
    bef8:	200029b0 	.word	0x200029b0

0000befc <_reschedule_threads>:
{
    befc:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    befe:	4b0a      	ldr	r3, [pc, #40]	; (bf28 <_reschedule_threads+0x2c>)
    bf00:	689b      	ldr	r3, [r3, #8]
    bf02:	895b      	ldrh	r3, [r3, #10]
    bf04:	2b7f      	cmp	r3, #127	; 0x7f
    bf06:	4604      	mov	r4, r0
    bf08:	d802      	bhi.n	bf10 <_reschedule_threads+0x14>
    bf0a:	f7ff ffe1 	bl	bed0 <__must_switch_threads>
    bf0e:	b910      	cbnz	r0, bf16 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bf10:	f384 8811 	msr	BASEPRI, r4
    bf14:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    bf16:	4b05      	ldr	r3, [pc, #20]	; (bf2c <_reschedule_threads+0x30>)
    bf18:	2200      	movs	r2, #0
    bf1a:	4620      	mov	r0, r4
}
    bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    bf20:	601a      	str	r2, [r3, #0]
    bf22:	f7f4 bd3b 	b.w	99c <__swap>
    bf26:	bf00      	nop
    bf28:	200029b0 	.word	0x200029b0
    bf2c:	20002d44 	.word	0x20002d44

0000bf30 <k_sched_unlock>:
	__asm__ volatile(
    bf30:	f04f 0320 	mov.w	r3, #32
    bf34:	f3ef 8011 	mrs	r0, BASEPRI
    bf38:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    bf3c:	4b03      	ldr	r3, [pc, #12]	; (bf4c <k_sched_unlock+0x1c>)
    bf3e:	689a      	ldr	r2, [r3, #8]
    bf40:	7ad3      	ldrb	r3, [r2, #11]
    bf42:	3301      	adds	r3, #1
    bf44:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    bf46:	f7ff bfd9 	b.w	befc <_reschedule_threads>
    bf4a:	bf00      	nop
    bf4c:	200029b0 	.word	0x200029b0

0000bf50 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    bf50:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    bf54:	4a12      	ldr	r2, [pc, #72]	; (bfa0 <_move_thread_to_end_of_prio_q+0x50>)
{
    bf56:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    bf58:	3314      	adds	r3, #20
    bf5a:	00db      	lsls	r3, r3, #3
    bf5c:	1d19      	adds	r1, r3, #4
    bf5e:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    bf60:	684c      	ldr	r4, [r1, #4]
    bf62:	42a0      	cmp	r0, r4
    bf64:	d01b      	beq.n	bf9e <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    bf66:	6844      	ldr	r4, [r0, #4]
    bf68:	6805      	ldr	r5, [r0, #0]
    bf6a:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    bf6c:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    bf6e:	4413      	add	r3, r2
	node->next->prev = node->prev;
    bf70:	606c      	str	r4, [r5, #4]
	node->next = list;
    bf72:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    bf74:	6899      	ldr	r1, [r3, #8]
    bf76:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    bf78:	6899      	ldr	r1, [r3, #8]
    bf7a:	6008      	str	r0, [r1, #0]
	list->tail = node;
    bf7c:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    bf7e:	69d3      	ldr	r3, [r2, #28]
    bf80:	4298      	cmp	r0, r3
    bf82:	d10b      	bne.n	bf9c <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    bf84:	6a11      	ldr	r1, [r2, #32]
    bf86:	fa91 f3a1 	rbit	r3, r1
    bf8a:	2900      	cmp	r1, #0
    bf8c:	fab3 f383 	clz	r3, r3
    bf90:	bf08      	it	eq
    bf92:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    bf96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bf9c:	61d3      	str	r3, [r2, #28]
    bf9e:	bd30      	pop	{r4, r5, pc}
    bfa0:	200029b0 	.word	0x200029b0

0000bfa4 <_impl_k_yield>:
{
    bfa4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    bfa6:	f04f 0320 	mov.w	r3, #32
    bfaa:	f3ef 8511 	mrs	r5, BASEPRI
    bfae:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    bfb2:	4c09      	ldr	r4, [pc, #36]	; (bfd8 <_impl_k_yield+0x34>)
    bfb4:	68a0      	ldr	r0, [r4, #8]
    bfb6:	f7ff ffcb 	bl	bf50 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    bfba:	68a2      	ldr	r2, [r4, #8]
    bfbc:	69e3      	ldr	r3, [r4, #28]
    bfbe:	429a      	cmp	r2, r3
    bfc0:	d102      	bne.n	bfc8 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bfc2:	f385 8811 	msr	BASEPRI, r5
    bfc6:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    bfc8:	4b04      	ldr	r3, [pc, #16]	; (bfdc <_impl_k_yield+0x38>)
    bfca:	2200      	movs	r2, #0
    bfcc:	601a      	str	r2, [r3, #0]
    bfce:	4628      	mov	r0, r5
}
    bfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bfd4:	f7f4 bce2 	b.w	99c <__swap>
    bfd8:	200029b0 	.word	0x200029b0
    bfdc:	20002d44 	.word	0x20002d44

0000bfe0 <_impl_k_sleep>:
{
    bfe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
    bfe2:	b918      	cbnz	r0, bfec <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    bfe4:	f7ff ffde 	bl	bfa4 <_impl_k_yield>
}
    bfe8:	b003      	add	sp, #12
    bfea:	bd30      	pop	{r4, r5, pc}
    bfec:	230a      	movs	r3, #10
    bfee:	3009      	adds	r0, #9
    bff0:	fbb0 f0f3 	udiv	r0, r0, r3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    bff4:	3001      	adds	r0, #1
    bff6:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    bff8:	f04f 0320 	mov.w	r3, #32
    bffc:	f3ef 8511 	mrs	r5, BASEPRI
    c000:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    c004:	4c08      	ldr	r4, [pc, #32]	; (c028 <_impl_k_sleep+0x48>)
    c006:	68a0      	ldr	r0, [r4, #8]
    c008:	f7ff feec 	bl	bde4 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    c00c:	68a0      	ldr	r0, [r4, #8]
    c00e:	9b01      	ldr	r3, [sp, #4]
    c010:	f100 0110 	add.w	r1, r0, #16
    c014:	2200      	movs	r2, #0
    c016:	f7ff fe97 	bl	bd48 <_add_timeout>
	_time_slice_elapsed = 0;
    c01a:	4b04      	ldr	r3, [pc, #16]	; (c02c <_impl_k_sleep+0x4c>)
    c01c:	2200      	movs	r2, #0
    c01e:	4628      	mov	r0, r5
    c020:	601a      	str	r2, [r3, #0]
    c022:	f7f4 fcbb 	bl	99c <__swap>
    c026:	e7df      	b.n	bfe8 <_impl_k_sleep+0x8>
    c028:	200029b0 	.word	0x200029b0
    c02c:	20002d44 	.word	0x20002d44

0000c030 <_impl_k_current_get>:
}
    c030:	4b01      	ldr	r3, [pc, #4]	; (c038 <_impl_k_current_get+0x8>)
    c032:	6898      	ldr	r0, [r3, #8]
    c034:	4770      	bx	lr
    c036:	bf00      	nop
    c038:	200029b0 	.word	0x200029b0

0000c03c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    c03c:	4b0d      	ldr	r3, [pc, #52]	; (c074 <_is_thread_time_slicing+0x38>)
    c03e:	681b      	ldr	r3, [r3, #0]
    c040:	2b00      	cmp	r3, #0
    c042:	dd14      	ble.n	c06e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    c044:	4b0c      	ldr	r3, [pc, #48]	; (c078 <_is_thread_time_slicing+0x3c>)
    c046:	681b      	ldr	r3, [r3, #0]
    c048:	4298      	cmp	r0, r3
    c04a:	d010      	beq.n	c06e <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    c04c:	4a0b      	ldr	r2, [pc, #44]	; (c07c <_is_thread_time_slicing+0x40>)
    c04e:	f990 300a 	ldrsb.w	r3, [r0, #10]
    c052:	6812      	ldr	r2, [r2, #0]
    c054:	4293      	cmp	r3, r2
    c056:	db0a      	blt.n	c06e <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    c058:	f103 0214 	add.w	r2, r3, #20
    c05c:	4b08      	ldr	r3, [pc, #32]	; (c080 <_is_thread_time_slicing+0x44>)
    c05e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c062:	6858      	ldr	r0, [r3, #4]
    c064:	689b      	ldr	r3, [r3, #8]
    c066:	1ac0      	subs	r0, r0, r3
    c068:	bf18      	it	ne
    c06a:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    c06c:	4770      	bx	lr
		return 0;
    c06e:	2000      	movs	r0, #0
}
    c070:	4770      	bx	lr
    c072:	bf00      	nop
    c074:	20002ad4 	.word	0x20002ad4
    c078:	0000eed0 	.word	0x0000eed0
    c07c:	20002ad8 	.word	0x20002ad8
    c080:	200029b0 	.word	0x200029b0

0000c084 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    c084:	4b01      	ldr	r3, [pc, #4]	; (c08c <_update_time_slice_before_swap+0x8>)
    c086:	2200      	movs	r2, #0
    c088:	601a      	str	r2, [r3, #0]
    c08a:	4770      	bx	lr
    c08c:	20002d44 	.word	0x20002d44

0000c090 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    c090:	4a10      	ldr	r2, [pc, #64]	; (c0d4 <_unpend_first_thread+0x44>)
    c092:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    c094:	4603      	mov	r3, r0
    c096:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    c098:	b16a      	cbz	r2, c0b6 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c09a:	4283      	cmp	r3, r0
    c09c:	bf08      	it	eq
    c09e:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    c0a0:	b908      	cbnz	r0, c0a6 <_unpend_first_thread+0x16>
    c0a2:	2000      	movs	r0, #0
    c0a4:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    c0a6:	6a02      	ldr	r2, [r0, #32]
    c0a8:	3202      	adds	r2, #2
    c0aa:	d107      	bne.n	c0bc <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    c0ac:	685a      	ldr	r2, [r3, #4]
    c0ae:	4290      	cmp	r0, r2
    c0b0:	d0f7      	beq.n	c0a2 <_unpend_first_thread+0x12>
    c0b2:	6800      	ldr	r0, [r0, #0]
    c0b4:	e7f4      	b.n	c0a0 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c0b6:	4283      	cmp	r3, r0
    c0b8:	d00a      	beq.n	c0d0 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    c0ba:	b150      	cbz	r0, c0d2 <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    c0bc:	e890 000c 	ldmia.w	r0, {r2, r3}
    c0c0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c0c2:	6802      	ldr	r2, [r0, #0]
    c0c4:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c0c6:	7a43      	ldrb	r3, [r0, #9]
    c0c8:	f023 0302 	bic.w	r3, r3, #2
    c0cc:	7243      	strb	r3, [r0, #9]
    c0ce:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c0d0:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    c0d2:	4770      	bx	lr
    c0d4:	20002d40 	.word	0x20002d40

0000c0d8 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    c0d8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    c0dc:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    c0de:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    c0e0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    c0e2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    c0e4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    c0e6:	6143      	str	r3, [r0, #20]
    c0e8:	4770      	bx	lr
	...

0000c0ec <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    c0ec:	b570      	push	{r4, r5, r6, lr}
    c0ee:	4605      	mov	r5, r0
    c0f0:	f04f 0320 	mov.w	r3, #32
    c0f4:	f3ef 8611 	mrs	r6, BASEPRI
    c0f8:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    c0fc:	f7ff ffc8 	bl	c090 <_unpend_first_thread>
	if (!thread) {
    c100:	4604      	mov	r4, r0
    c102:	b998      	cbnz	r0, c12c <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    c104:	68ab      	ldr	r3, [r5, #8]
    c106:	68ea      	ldr	r2, [r5, #12]
    c108:	429a      	cmp	r2, r3
    c10a:	bf18      	it	ne
    c10c:	3301      	addne	r3, #1
    c10e:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    c110:	2102      	movs	r1, #2
    c112:	f105 0010 	add.w	r0, r5, #16
    c116:	f000 fced 	bl	caf4 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    c11a:	2800      	cmp	r0, #0
    c11c:	d03b      	beq.n	c196 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    c11e:	f7ff ffb1 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    c122:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    c124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c128:	f7f4 bc38 	b.w	99c <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c12c:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    c12e:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c132:	1c48      	adds	r0, r1, #1
    c134:	d00f      	beq.n	c156 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c136:	4b1b      	ldr	r3, [pc, #108]	; (c1a4 <_impl_k_sem_give+0xb8>)
    c138:	695b      	ldr	r3, [r3, #20]
    c13a:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    c13c:	bf1f      	itttt	ne
    c13e:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c140:	6913      	ldrne	r3, [r2, #16]
    c142:	185b      	addne	r3, r3, r1
    c144:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    c146:	6963      	ldr	r3, [r4, #20]
    c148:	6922      	ldr	r2, [r4, #16]
    c14a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c14c:	6922      	ldr	r2, [r4, #16]
    c14e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c154:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c156:	7a63      	ldrb	r3, [r4, #9]
    c158:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c15c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c160:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c162:	d102      	bne.n	c16a <_impl_k_sem_give+0x7e>
    c164:	6a23      	ldr	r3, [r4, #32]
    c166:	3301      	adds	r3, #1
    c168:	d018      	beq.n	c19c <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c16a:	2300      	movs	r3, #0
    c16c:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c16e:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    c172:	2b0d      	cmp	r3, #13
    c174:	d80f      	bhi.n	c196 <_impl_k_sem_give+0xaa>
    c176:	b11b      	cbz	r3, c180 <_impl_k_sem_give+0x94>
    c178:	4b0b      	ldr	r3, [pc, #44]	; (c1a8 <_impl_k_sem_give+0xbc>)
    c17a:	685b      	ldr	r3, [r3, #4]
    c17c:	051b      	lsls	r3, r3, #20
    c17e:	d50a      	bpl.n	c196 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    c180:	4b08      	ldr	r3, [pc, #32]	; (c1a4 <_impl_k_sem_give+0xb8>)
    c182:	689b      	ldr	r3, [r3, #8]
    c184:	895b      	ldrh	r3, [r3, #10]
    c186:	2b7f      	cmp	r3, #127	; 0x7f
    c188:	d805      	bhi.n	c196 <_impl_k_sem_give+0xaa>
    c18a:	f7ff fea1 	bl	bed0 <__must_switch_threads>
    c18e:	3000      	adds	r0, #0
    c190:	bf18      	it	ne
    c192:	2001      	movne	r0, #1
    c194:	e7c1      	b.n	c11a <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c196:	f386 8811 	msr	BASEPRI, r6
    c19a:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    c19c:	4620      	mov	r0, r4
    c19e:	f7ff fd9d 	bl	bcdc <_add_thread_to_ready_q>
    c1a2:	e7e2      	b.n	c16a <_impl_k_sem_give+0x7e>
    c1a4:	200029b0 	.word	0x200029b0
    c1a8:	e000ed00 	.word	0xe000ed00

0000c1ac <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    c1ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c1ae:	f04f 0320 	mov.w	r3, #32
    c1b2:	f3ef 8411 	mrs	r4, BASEPRI
    c1b6:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    c1ba:	6883      	ldr	r3, [r0, #8]
    c1bc:	b12b      	cbz	r3, c1ca <_impl_k_sem_take+0x1e>
		sem->count--;
    c1be:	3b01      	subs	r3, #1
    c1c0:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c1c2:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    c1c6:	2000      	movs	r0, #0
    c1c8:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    c1ca:	b921      	cbnz	r1, c1d6 <_impl_k_sem_take+0x2a>
    c1cc:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    c1d0:	f06f 000f 	mvn.w	r0, #15
    c1d4:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    c1d6:	f7ff fe6b 	bl	beb0 <_pend_current_thread>
	_update_time_slice_before_swap();
    c1da:	f7ff ff53 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    c1de:	4620      	mov	r0, r4

	return _Swap(key);
}
    c1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c1e4:	f7f4 bbda 	b.w	99c <__swap>

0000c1e8 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    c1e8:	4b03      	ldr	r3, [pc, #12]	; (c1f8 <_impl_k_uptime_get_32+0x10>)
    c1ea:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    c1ee:	230a      	movs	r3, #10
    c1f0:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    c1f4:	4770      	bx	lr
    c1f6:	bf00      	nop
    c1f8:	20002d48 	.word	0x20002d48

0000c1fc <_tick_get>:
	__asm__ volatile(
    c1fc:	f04f 0220 	mov.w	r2, #32
    c200:	f3ef 8311 	mrs	r3, BASEPRI
    c204:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    c208:	4a02      	ldr	r2, [pc, #8]	; (c214 <_tick_get+0x18>)
    c20a:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c20e:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    c212:	4770      	bx	lr
    c214:	20002d48 	.word	0x20002d48

0000c218 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
    c218:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    c21a:	f7ff ffef 	bl	c1fc <_tick_get>
    c21e:	240a      	movs	r4, #10
    c220:	fba0 2304 	umull	r2, r3, r0, r4
    c224:	fb04 3301 	mla	r3, r4, r1, r3
}
    c228:	4610      	mov	r0, r2
    c22a:	4619      	mov	r1, r3
    c22c:	bd10      	pop	{r4, pc}
	...

0000c230 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    c230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c234:	4607      	mov	r7, r0
	__asm__ volatile(
    c236:	f04f 0320 	mov.w	r3, #32
    c23a:	f3ef 8011 	mrs	r0, BASEPRI
    c23e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    c242:	4963      	ldr	r1, [pc, #396]	; (c3d0 <_nano_sys_clock_tick_announce+0x1a0>)
    c244:	e9d1 4500 	ldrd	r4, r5, [r1]
    c248:	19e2      	adds	r2, r4, r7
    c24a:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    c24e:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c252:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    c256:	466e      	mov	r6, sp
    c258:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    c25c:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    c260:	f04f 0320 	mov.w	r3, #32
    c264:	f3ef 8011 	mrs	r0, BASEPRI
    c268:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c26c:	4c59      	ldr	r4, [pc, #356]	; (c3d4 <_nano_sys_clock_tick_announce+0x1a4>)
    c26e:	4621      	mov	r1, r4
    c270:	4602      	mov	r2, r0
    c272:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c276:	428b      	cmp	r3, r1
    c278:	d000      	beq.n	c27c <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    c27a:	b9fb      	cbnz	r3, c2bc <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c27c:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    c280:	68a0      	ldr	r0, [r4, #8]
    c282:	f7ff fedb 	bl	c03c <_is_thread_time_slicing>
    c286:	b1b0      	cbz	r0, c2b6 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c288:	4a53      	ldr	r2, [pc, #332]	; (c3d8 <_nano_sys_clock_tick_announce+0x1a8>)
    c28a:	6811      	ldr	r1, [r2, #0]
    c28c:	230a      	movs	r3, #10
    c28e:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    c292:	4b52      	ldr	r3, [pc, #328]	; (c3dc <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    c294:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    c296:	681b      	ldr	r3, [r3, #0]
    c298:	429f      	cmp	r7, r3
    c29a:	db0c      	blt.n	c2b6 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    c29c:	2300      	movs	r3, #0
    c29e:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    c2a0:	f04f 0320 	mov.w	r3, #32
    c2a4:	f3ef 8511 	mrs	r5, BASEPRI
    c2a8:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    c2ac:	68a0      	ldr	r0, [r4, #8]
    c2ae:	f7ff fe4f 	bl	bf50 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c2b2:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    c2b6:	b003      	add	sp, #12
    c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    c2bc:	4d48      	ldr	r5, [pc, #288]	; (c3e0 <_nano_sys_clock_tick_announce+0x1b0>)
    c2be:	2101      	movs	r1, #1
    c2c0:	6029      	str	r1, [r5, #0]
    c2c2:	46ab      	mov	fp, r5
    c2c4:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    c2c6:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    c2ca:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    c2ce:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    c2d0:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    c2d2:	bfaa      	itet	ge
    c2d4:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    c2d8:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    c2dc:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    c2e0:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    c2e2:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    c2e4:	691d      	ldr	r5, [r3, #16]
    c2e6:	4298      	cmp	r0, r3
    c2e8:	bf14      	ite	ne
    c2ea:	6818      	ldrne	r0, [r3, #0]
    c2ec:	2000      	moveq	r0, #0
    c2ee:	b9d5      	cbnz	r5, c326 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    c2f0:	e893 0220 	ldmia.w	r3, {r5, r9}
    c2f4:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    c2f8:	681d      	ldr	r5, [r3, #0]
    c2fa:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    c2fe:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    c300:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    c304:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    c306:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    c308:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    c30a:	f8c3 c010 	str.w	ip, [r3, #16]
    c30e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    c312:	f04f 0320 	mov.w	r3, #32
    c316:	f3ef 8211 	mrs	r2, BASEPRI
    c31a:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    c31e:	4603      	mov	r3, r0
    c320:	2800      	cmp	r0, #0
    c322:	d1d4      	bne.n	c2ce <_nano_sys_clock_tick_announce+0x9e>
    c324:	e001      	b.n	c32a <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    c326:	2900      	cmp	r1, #0
    c328:	dcf1      	bgt.n	c30e <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c32a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    c32e:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c330:	42b0      	cmp	r0, r6
    c332:	d103      	bne.n	c33c <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    c334:	2300      	movs	r3, #0
    c336:	f8cb 3000 	str.w	r3, [fp]
    c33a:	e7a1      	b.n	c280 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c33c:	2800      	cmp	r0, #0
    c33e:	d0f9      	beq.n	c334 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    c340:	9b01      	ldr	r3, [sp, #4]
    c342:	4298      	cmp	r0, r3
    c344:	d101      	bne.n	c34a <_nano_sys_clock_tick_announce+0x11a>
    c346:	2600      	movs	r6, #0
    c348:	e000      	b.n	c34c <_nano_sys_clock_tick_announce+0x11c>
    c34a:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c34c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    c350:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    c354:	e890 000c 	ldmia.w	r0, {r2, r3}
    c358:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c35a:	6802      	ldr	r2, [r0, #0]
    c35c:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    c35e:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    c360:	f04f 0220 	mov.w	r2, #32
    c364:	f3ef 8a11 	mrs	sl, BASEPRI
    c368:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    c36c:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    c370:	b1fb      	cbz	r3, c3b2 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    c372:	68c2      	ldr	r2, [r0, #12]
    c374:	b152      	cbz	r2, c38c <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    c376:	6859      	ldr	r1, [r3, #4]
    c378:	681a      	ldr	r2, [r3, #0]
    c37a:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    c37c:	681a      	ldr	r2, [r3, #0]
    c37e:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c380:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    c382:	f8c3 901c 	str.w	r9, [r3, #28]
    c386:	f022 0202 	bic.w	r2, r2, #2
    c38a:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c38c:	7a5a      	ldrb	r2, [r3, #9]
    c38e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c392:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c396:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c398:	d102      	bne.n	c3a0 <_nano_sys_clock_tick_announce+0x170>
    c39a:	6a1a      	ldr	r2, [r3, #32]
    c39c:	3201      	adds	r2, #1
    c39e:	d013      	beq.n	c3c8 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c3a0:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c3a4:	2e00      	cmp	r6, #0
    c3a6:	d0c5      	beq.n	c334 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    c3a8:	9b01      	ldr	r3, [sp, #4]
    c3aa:	42b3      	cmp	r3, r6
    c3ac:	d108      	bne.n	c3c0 <_nano_sys_clock_tick_announce+0x190>
    c3ae:	2300      	movs	r3, #0
    c3b0:	e007      	b.n	c3c2 <_nano_sys_clock_tick_announce+0x192>
    c3b2:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    c3b6:	6943      	ldr	r3, [r0, #20]
    c3b8:	2b00      	cmp	r3, #0
    c3ba:	d0f3      	beq.n	c3a4 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    c3bc:	4798      	blx	r3
    c3be:	e7f1      	b.n	c3a4 <_nano_sys_clock_tick_announce+0x174>
    c3c0:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    c3c2:	4630      	mov	r0, r6
    c3c4:	461e      	mov	r6, r3
    c3c6:	e7c5      	b.n	c354 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    c3c8:	4618      	mov	r0, r3
    c3ca:	f7ff fc87 	bl	bcdc <_add_thread_to_ready_q>
    c3ce:	e7e7      	b.n	c3a0 <_nano_sys_clock_tick_announce+0x170>
    c3d0:	20002d48 	.word	0x20002d48
    c3d4:	200029b0 	.word	0x200029b0
    c3d8:	20002d44 	.word	0x20002d44
    c3dc:	20002ad4 	.word	0x20002ad4
    c3e0:	20002d40 	.word	0x20002d40

0000c3e4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    c3e4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    c3e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c3ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c3ee:	4903      	ldr	r1, [pc, #12]	; (c3fc <k_sys_work_q_init+0x18>)
    c3f0:	4803      	ldr	r0, [pc, #12]	; (c400 <k_sys_work_q_init+0x1c>)
    c3f2:	f000 f971 	bl	c6d8 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    c3f6:	2000      	movs	r0, #0
    c3f8:	bd08      	pop	{r3, pc}
    c3fa:	bf00      	nop
    c3fc:	200048c8 	.word	0x200048c8
    c400:	20002d50 	.word	0x20002d50

0000c404 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    c404:	7a43      	ldrb	r3, [r0, #9]
    c406:	06da      	lsls	r2, r3, #27
    c408:	d104      	bne.n	c414 <_is_thread_ready+0x10>
    c40a:	6a00      	ldr	r0, [r0, #32]
    c40c:	1c43      	adds	r3, r0, #1
    c40e:	4258      	negs	r0, r3
    c410:	4158      	adcs	r0, r3
    c412:	4770      	bx	lr
    c414:	2000      	movs	r0, #0
}
    c416:	4770      	bx	lr

0000c418 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c418:	6903      	ldr	r3, [r0, #16]
    c41a:	1c5a      	adds	r2, r3, #1
    c41c:	d011      	beq.n	c442 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c41e:	4a0a      	ldr	r2, [pc, #40]	; (c448 <_abort_timeout+0x30>)
    c420:	6952      	ldr	r2, [r2, #20]
    c422:	4290      	cmp	r0, r2
    c424:	bf1f      	itttt	ne
    c426:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c428:	690a      	ldrne	r2, [r1, #16]
    c42a:	189b      	addne	r3, r3, r2
    c42c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    c42e:	e890 000c 	ldmia.w	r0, {r2, r3}
    c432:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c434:	6802      	ldr	r2, [r0, #0]
    c436:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    c438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c43c:	6103      	str	r3, [r0, #16]
	return 0;
    c43e:	2000      	movs	r0, #0
    c440:	4770      	bx	lr
		return _INACTIVE;
    c442:	4618      	mov	r0, r3
}
    c444:	4770      	bx	lr
    c446:	bf00      	nop
    c448:	200029b0 	.word	0x200029b0

0000c44c <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    c44c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    c44e:	f04f 0320 	mov.w	r3, #32
    c452:	f3ef 8611 	mrs	r6, BASEPRI
    c456:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    c45a:	4a19      	ldr	r2, [pc, #100]	; (c4c0 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    c45c:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    c45e:	230a      	movs	r3, #10
    c460:	3109      	adds	r1, #9
    c462:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    c466:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c468:	6201      	str	r1, [r0, #32]
    c46a:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c46c:	2300      	movs	r3, #0
    c46e:	61c3      	str	r3, [r0, #28]
    c470:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c474:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    c476:	f100 0510 	add.w	r5, r0, #16
    c47a:	d108      	bne.n	c48e <schedule_new_thread.part.13+0x42>
	node->next = list;
    c47c:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    c47e:	6953      	ldr	r3, [r2, #20]
    c480:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    c482:	6953      	ldr	r3, [r2, #20]
    c484:	601d      	str	r5, [r3, #0]
	list->tail = node;
    c486:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c488:	f386 8811 	msr	BASEPRI, r6
    c48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c48e:	2b00      	cmp	r3, #0
    c490:	d0f4      	beq.n	c47c <schedule_new_thread.part.13+0x30>
    c492:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    c496:	6a04      	ldr	r4, [r0, #32]
    c498:	691f      	ldr	r7, [r3, #16]
    c49a:	42bc      	cmp	r4, r7
    c49c:	dc08      	bgt.n	c4b0 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    c49e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c4a0:	1b3c      	subs	r4, r7, r4
    c4a2:	611c      	str	r4, [r3, #16]
    c4a4:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    c4a6:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    c4a8:	685a      	ldr	r2, [r3, #4]
    c4aa:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    c4ac:	605d      	str	r5, [r3, #4]
    c4ae:	e7eb      	b.n	c488 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    c4b0:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    c4b2:	4573      	cmp	r3, lr
    c4b4:	6204      	str	r4, [r0, #32]
    c4b6:	d0e1      	beq.n	c47c <schedule_new_thread.part.13+0x30>
    c4b8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d1eb      	bne.n	c496 <schedule_new_thread.part.13+0x4a>
    c4be:	e7dd      	b.n	c47c <schedule_new_thread.part.13+0x30>
    c4c0:	200029b0 	.word	0x200029b0

0000c4c4 <k_is_in_isr>:
    c4c4:	f3ef 8005 	mrs	r0, IPSR
    c4c8:	280d      	cmp	r0, #13
    c4ca:	d807      	bhi.n	c4dc <k_is_in_isr+0x18>
    c4cc:	b138      	cbz	r0, c4de <k_is_in_isr+0x1a>
    c4ce:	4b04      	ldr	r3, [pc, #16]	; (c4e0 <k_is_in_isr+0x1c>)
    c4d0:	6858      	ldr	r0, [r3, #4]
    c4d2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    c4d6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    c4da:	4770      	bx	lr
    c4dc:	2001      	movs	r0, #1
}
    c4de:	4770      	bx	lr
    c4e0:	e000ed00 	.word	0xe000ed00

0000c4e4 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    c4e4:	4b02      	ldr	r3, [pc, #8]	; (c4f0 <_is_thread_essential+0xc>)
    c4e6:	689b      	ldr	r3, [r3, #8]
    c4e8:	7a18      	ldrb	r0, [r3, #8]
}
    c4ea:	f000 0001 	and.w	r0, r0, #1
    c4ee:	4770      	bx	lr
    c4f0:	200029b0 	.word	0x200029b0

0000c4f4 <_thread_entry>:
{
    c4f4:	b508      	push	{r3, lr}
    c4f6:	4604      	mov	r4, r0
    c4f8:	4608      	mov	r0, r1
    c4fa:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    c4fc:	461a      	mov	r2, r3
    c4fe:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    c500:	f7ff fd96 	bl	c030 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    c504:	f7f4 fcfa 	bl	efc <_impl_k_thread_abort>

0000c508 <_impl_k_thread_start>:
{
    c508:	b510      	push	{r4, lr}
    c50a:	4601      	mov	r1, r0
	__asm__ volatile(
    c50c:	f04f 0320 	mov.w	r3, #32
    c510:	f3ef 8411 	mrs	r4, BASEPRI
    c514:	f383 8811 	msr	BASEPRI, r3
    c518:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    c51a:	075a      	lsls	r2, r3, #29
    c51c:	d402      	bmi.n	c524 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c51e:	f384 8811 	msr	BASEPRI, r4
    c522:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c524:	f023 0304 	bic.w	r3, r3, #4
    c528:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    c52a:	f7ff ff6b 	bl	c404 <_is_thread_ready>
    c52e:	2800      	cmp	r0, #0
    c530:	d0f5      	beq.n	c51e <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    c532:	4608      	mov	r0, r1
    c534:	f7ff fbd2 	bl	bcdc <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    c538:	4b07      	ldr	r3, [pc, #28]	; (c558 <_impl_k_thread_start+0x50>)
    c53a:	689b      	ldr	r3, [r3, #8]
    c53c:	895b      	ldrh	r3, [r3, #10]
    c53e:	2b7f      	cmp	r3, #127	; 0x7f
    c540:	d8ed      	bhi.n	c51e <_impl_k_thread_start+0x16>
    c542:	f7ff fcc5 	bl	bed0 <__must_switch_threads>
    c546:	2800      	cmp	r0, #0
    c548:	d0e9      	beq.n	c51e <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    c54a:	f7ff fd9b 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    c54e:	4620      	mov	r0, r4
}
    c550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c554:	f7f4 ba22 	b.w	99c <__swap>
    c558:	200029b0 	.word	0x200029b0

0000c55c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    c55c:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    c55e:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c560:	f7f4 bc28 	b.w	db4 <_new_thread>

0000c564 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    c564:	b570      	push	{r4, r5, r6, lr}
    c566:	b086      	sub	sp, #24
    c568:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c56a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    c56c:	9604      	str	r6, [sp, #16]
    c56e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    c570:	9603      	str	r6, [sp, #12]
    c572:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    c574:	9602      	str	r6, [sp, #8]
    c576:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    c578:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c57a:	9601      	str	r6, [sp, #4]
    c57c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    c57e:	9600      	str	r6, [sp, #0]
    c580:	f7f4 fc18 	bl	db4 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    c584:	1c6b      	adds	r3, r5, #1
    c586:	d003      	beq.n	c590 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    c588:	b92d      	cbnz	r5, c596 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    c58a:	4620      	mov	r0, r4
    c58c:	f7ff ffbc 	bl	c508 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    c590:	4620      	mov	r0, r4
    c592:	b006      	add	sp, #24
    c594:	bd70      	pop	{r4, r5, r6, pc}
    c596:	4629      	mov	r1, r5
    c598:	4620      	mov	r0, r4
    c59a:	f7ff ff57 	bl	c44c <schedule_new_thread.part.13>
    c59e:	e7f7      	b.n	c590 <_impl_k_thread_create+0x2c>

0000c5a0 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    c5a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    c5a2:	b510      	push	{r4, lr}
    c5a4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    c5a6:	b103      	cbz	r3, c5aa <_k_thread_single_abort+0xa>
		thread->fn_abort();
    c5a8:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    c5aa:	4620      	mov	r0, r4
    c5ac:	f7ff ff2a 	bl	c404 <_is_thread_ready>
    c5b0:	b138      	cbz	r0, c5c2 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    c5b2:	4620      	mov	r0, r4
    c5b4:	f7ff fc16 	bl	bde4 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    c5b8:	7a63      	ldrb	r3, [r4, #9]
    c5ba:	f043 0308 	orr.w	r3, r3, #8
    c5be:	7263      	strb	r3, [r4, #9]
    c5c0:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    c5c2:	7a63      	ldrb	r3, [r4, #9]
    c5c4:	079b      	lsls	r3, r3, #30
    c5c6:	d508      	bpl.n	c5da <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    c5c8:	e894 000c 	ldmia.w	r4, {r2, r3}
    c5cc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c5ce:	6822      	ldr	r2, [r4, #0]
    c5d0:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c5d2:	7a63      	ldrb	r3, [r4, #9]
    c5d4:	f023 0302 	bic.w	r3, r3, #2
    c5d8:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    c5da:	6a23      	ldr	r3, [r4, #32]
    c5dc:	3301      	adds	r3, #1
    c5de:	d0eb      	beq.n	c5b8 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    c5e0:	f104 0010 	add.w	r0, r4, #16
    c5e4:	f7ff ff18 	bl	c418 <_abort_timeout>
    c5e8:	e7e6      	b.n	c5b8 <_k_thread_single_abort+0x18>
	...

0000c5ec <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    c5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    c5ee:	4f21      	ldr	r7, [pc, #132]	; (c674 <_init_static_threads+0x88>)
    c5f0:	4d21      	ldr	r5, [pc, #132]	; (c678 <_init_static_threads+0x8c>)
{
    c5f2:	b087      	sub	sp, #28
    c5f4:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    c5f6:	42bd      	cmp	r5, r7
    c5f8:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    c5fc:	d314      	bcc.n	c628 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    c5fe:	4b1f      	ldr	r3, [pc, #124]	; (c67c <_init_static_threads+0x90>)
    c600:	689a      	ldr	r2, [r3, #8]
    c602:	7ad3      	ldrb	r3, [r2, #11]
    c604:	3b01      	subs	r3, #1
    c606:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    c608:	f04f 0320 	mov.w	r3, #32
    c60c:	f3ef 8511 	mrs	r5, BASEPRI
    c610:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    c614:	4c18      	ldr	r4, [pc, #96]	; (c678 <_init_static_threads+0x8c>)
    c616:	42b4      	cmp	r4, r6
    c618:	d31f      	bcc.n	c65a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c61a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    c61e:	b007      	add	sp, #28
    c620:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    c624:	f7ff bc84 	b.w	bf30 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    c628:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    c62c:	9304      	str	r3, [sp, #16]
    c62e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    c632:	9303      	str	r3, [sp, #12]
    c634:	f854 3c14 	ldr.w	r3, [r4, #-20]
    c638:	9302      	str	r3, [sp, #8]
    c63a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    c63e:	9301      	str	r3, [sp, #4]
    c640:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    c644:	9300      	str	r3, [sp, #0]
    c646:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    c64a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    c64c:	f7f4 fbb2 	bl	db4 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    c650:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    c654:	64dd      	str	r5, [r3, #76]	; 0x4c
    c656:	4625      	mov	r5, r4
    c658:	e7cd      	b.n	c5f6 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    c65a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c65c:	1c4b      	adds	r3, r1, #1
    c65e:	d003      	beq.n	c668 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    c660:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    c662:	b919      	cbnz	r1, c66c <_init_static_threads+0x80>
    c664:	f7ff ff50 	bl	c508 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    c668:	342c      	adds	r4, #44	; 0x2c
    c66a:	e7d4      	b.n	c616 <_init_static_threads+0x2a>
    c66c:	f7ff feee 	bl	c44c <schedule_new_thread.part.13>
    c670:	e7fa      	b.n	c668 <_init_static_threads+0x7c>
    c672:	bf00      	nop
    c674:	20005174 	.word	0x20005174
    c678:	20005174 	.word	0x20005174
    c67c:	200029b0 	.word	0x200029b0

0000c680 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    c680:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    c682:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    c684:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    c686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    c68a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    c68c:	72c3      	strb	r3, [r0, #11]
    c68e:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    c690:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    c692:	6183      	str	r3, [r0, #24]
	t->func = func;
    c694:	6243      	str	r3, [r0, #36]	; 0x24
    c696:	4770      	bx	lr

0000c698 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    c698:	b510      	push	{r4, lr}
    c69a:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    c69c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c6a0:	4620      	mov	r0, r4
    c6a2:	f7ff fad4 	bl	bc4e <k_queue_get>
		if (!work) {
    c6a6:	4603      	mov	r3, r0
    c6a8:	2800      	cmp	r0, #0
    c6aa:	d0f7      	beq.n	c69c <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c6ac:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    c6ae:	6842      	ldr	r2, [r0, #4]
    c6b0:	f3bf 8f5b 	dmb	ish
    c6b4:	e853 1f00 	ldrex	r1, [r3]
    c6b8:	f021 0e01 	bic.w	lr, r1, #1
    c6bc:	e843 ec00 	strex	ip, lr, [r3]
    c6c0:	f1bc 0f00 	cmp.w	ip, #0
    c6c4:	d1f6      	bne.n	c6b4 <work_q_main+0x1c>
    c6c6:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    c6ca:	07cb      	lsls	r3, r1, #31
    c6cc:	d500      	bpl.n	c6d0 <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    c6ce:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    c6d0:	f7ff fc68 	bl	bfa4 <_impl_k_yield>
    c6d4:	e7e2      	b.n	c69c <work_q_main+0x4>
	...

0000c6d8 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    c6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6da:	b087      	sub	sp, #28
    c6dc:	4604      	mov	r4, r0
    c6de:	461f      	mov	r7, r3
    c6e0:	460d      	mov	r5, r1
    c6e2:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    c6e4:	f7ff fa5e 	bl	bba4 <k_queue_init>

    c6e8:	2000      	movs	r0, #0
    c6ea:	9005      	str	r0, [sp, #20]
    c6ec:	9004      	str	r0, [sp, #16]
    c6ee:	9002      	str	r0, [sp, #8]
    c6f0:	9001      	str	r0, [sp, #4]
    c6f2:	9703      	str	r7, [sp, #12]
    c6f4:	9400      	str	r4, [sp, #0]
    c6f6:	4b04      	ldr	r3, [pc, #16]	; (c708 <k_work_q_start+0x30>)
    c6f8:	4632      	mov	r2, r6
    c6fa:	4629      	mov	r1, r5
    c6fc:	f104 0010 	add.w	r0, r4, #16
    c700:	f7ff ff30 	bl	c564 <_impl_k_thread_create>
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    c704:	b007      	add	sp, #28
    c706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c708:	0000c699 	.word	0x0000c699

0000c70c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c70c:	7a42      	ldrb	r2, [r0, #9]
    c70e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    c712:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    c716:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    c718:	d104      	bne.n	c724 <_ready_thread+0x18>
    c71a:	6a03      	ldr	r3, [r0, #32]
    c71c:	3301      	adds	r3, #1
    c71e:	d101      	bne.n	c724 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
    c720:	f7ff badc 	b.w	bcdc <_add_thread_to_ready_q>
    c724:	4770      	bx	lr

0000c726 <_unpend_thread>:
	node->prev->next = node->next;
    c726:	e890 000c 	ldmia.w	r0, {r2, r3}
    c72a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c72c:	6802      	ldr	r2, [r0, #0]
    c72e:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    c730:	7a43      	ldrb	r3, [r0, #9]
    c732:	f023 0302 	bic.w	r3, r3, #2
    c736:	7243      	strb	r3, [r0, #9]
    c738:	4770      	bx	lr
	...

0000c73c <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
    c73c:	b430      	push	{r4, r5}
	timeout->thread = thread;
    c73e:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
    c740:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    c742:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    c744:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    c746:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    c748:	b972      	cbnz	r2, c768 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
    c74a:	f04f 0120 	mov.w	r1, #32
    c74e:	f3ef 8211 	mrs	r2, BASEPRI
    c752:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
    c756:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c75a:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c75c:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
    c760:	6943      	ldr	r3, [r0, #20]
    c762:	b16b      	cbz	r3, c780 <_add_timeout.constprop.9+0x44>
}
    c764:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
    c766:	4718      	bx	r3
	return list->head == list;
    c768:	4911      	ldr	r1, [pc, #68]	; (c7b0 <_add_timeout.constprop.9+0x74>)
    c76a:	4608      	mov	r0, r1
    c76c:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c770:	4282      	cmp	r2, r0
    c772:	d10d      	bne.n	c790 <_add_timeout.constprop.9+0x54>
	node->next = list;
    c774:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    c776:	694a      	ldr	r2, [r1, #20]
    c778:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    c77a:	694a      	ldr	r2, [r1, #20]
    c77c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c77e:	614b      	str	r3, [r1, #20]
}
    c780:	bc30      	pop	{r4, r5}
    c782:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
    c784:	1b64      	subs	r4, r4, r5
    c786:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
    c788:	694c      	ldr	r4, [r1, #20]
    c78a:	42a2      	cmp	r2, r4
    c78c:	d0f2      	beq.n	c774 <_add_timeout.constprop.9+0x38>
    c78e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    c790:	2a00      	cmp	r2, #0
    c792:	d0ef      	beq.n	c774 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
    c794:	691c      	ldr	r4, [r3, #16]
    c796:	6915      	ldr	r5, [r2, #16]
    c798:	42ac      	cmp	r4, r5
    c79a:	dcf3      	bgt.n	c784 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
    c79c:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
    c79e:	1b2c      	subs	r4, r5, r4
    c7a0:	6114      	str	r4, [r2, #16]
    c7a2:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
    c7a4:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
    c7a6:	6851      	ldr	r1, [r2, #4]
    c7a8:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
    c7aa:	6053      	str	r3, [r2, #4]
    c7ac:	e7e8      	b.n	c780 <_add_timeout.constprop.9+0x44>
    c7ae:	bf00      	nop
    c7b0:	200029b0 	.word	0x200029b0

0000c7b4 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    c7b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    c7b6:	2b00      	cmp	r3, #0
{
    c7b8:	b570      	push	{r4, r5, r6, lr}
    c7ba:	4604      	mov	r4, r0
    c7bc:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
    c7c0:	dd0b      	ble.n	c7da <_timer_expiration_handler+0x26>
	__asm__ volatile(
    c7c2:	f04f 0320 	mov.w	r3, #32
    c7c6:	f3ef 8611 	mrs	r6, BASEPRI
    c7ca:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    c7ce:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c7d0:	4629      	mov	r1, r5
    c7d2:	f7ff ffb3 	bl	c73c <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c7d6:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    c7da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c7dc:	3301      	adds	r3, #1
    c7de:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    c7e0:	6a23      	ldr	r3, [r4, #32]
    c7e2:	b10b      	cbz	r3, c7e8 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
    c7e4:	4620      	mov	r0, r4
    c7e6:	4798      	blx	r3
	return list->head == list;
    c7e8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c7ea:	42ac      	cmp	r4, r5
    c7ec:	d010      	beq.n	c810 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    c7ee:	b17c      	cbz	r4, c810 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    c7f0:	4620      	mov	r0, r4
    c7f2:	f7ff ff98 	bl	c726 <_unpend_thread>
	__asm__ volatile(
    c7f6:	f04f 0320 	mov.w	r3, #32
    c7fa:	f3ef 8511 	mrs	r5, BASEPRI
    c7fe:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    c802:	4620      	mov	r0, r4
    c804:	f7ff ff82 	bl	c70c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c808:	f385 8811 	msr	BASEPRI, r5
    c80c:	2300      	movs	r3, #0
    c80e:	6663      	str	r3, [r4, #100]	; 0x64
    c810:	bd70      	pop	{r4, r5, r6, pc}

0000c812 <sys_dlist_remove>:
	node->prev->next = node->next;
    c812:	e890 000c 	ldmia.w	r0, {r2, r3}
    c816:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    c818:	6802      	ldr	r2, [r0, #0]
    c81a:	6053      	str	r3, [r2, #4]
    c81c:	4770      	bx	lr

0000c81e <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    c81e:	b570      	push	{r4, r5, r6, lr}
    c820:	2414      	movs	r4, #20
    c822:	4615      	mov	r5, r2
    c824:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    c828:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    c82a:	2900      	cmp	r1, #0
    c82c:	da00      	bge.n	c830 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    c82e:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    c830:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    c832:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    c834:	f003 030f 	and.w	r3, r3, #15
    c838:	2b02      	cmp	r3, #2
    c83a:	d003      	beq.n	c844 <clear_event_registrations+0x26>
    c83c:	2b04      	cmp	r3, #4
    c83e:	d001      	beq.n	c844 <clear_event_registrations+0x26>
    c840:	2b01      	cmp	r3, #1
    c842:	d102      	bne.n	c84a <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
    c844:	4620      	mov	r0, r4
    c846:	f7ff ffe4 	bl	c812 <sys_dlist_remove>
    c84a:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    c84e:	f04f 0320 	mov.w	r3, #32
    c852:	f3ef 8511 	mrs	r5, BASEPRI
    c856:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    c85a:	3901      	subs	r1, #1
    c85c:	3c14      	subs	r4, #20
    c85e:	e7e4      	b.n	c82a <clear_event_registrations+0xc>

0000c860 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    c860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    c862:	2300      	movs	r3, #0
    c864:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    c866:	6883      	ldr	r3, [r0, #8]
{
    c868:	4605      	mov	r5, r0
    c86a:	460e      	mov	r6, r1
    c86c:	4617      	mov	r7, r2
	if (!event->poller) {
    c86e:	2b00      	cmp	r3, #0
    c870:	d049      	beq.n	c906 <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    c872:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    c874:	7a4b      	ldrb	r3, [r1, #9]
    c876:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    c87a:	0798      	lsls	r0, r3, #30
    c87c:	724a      	strb	r2, [r1, #9]
    c87e:	d542      	bpl.n	c906 <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    c880:	6a0b      	ldr	r3, [r1, #32]
    c882:	3302      	adds	r3, #2
    c884:	d04a      	beq.n	c91c <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
    c886:	4608      	mov	r0, r1
    c888:	f7ff ffc3 	bl	c812 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c88c:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c88e:	6a0c      	ldr	r4, [r1, #32]
    c890:	f023 0302 	bic.w	r3, r3, #2
    c894:	1c62      	adds	r2, r4, #1
    c896:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    c898:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c89c:	d00c      	beq.n	c8b8 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c89e:	4b21      	ldr	r3, [pc, #132]	; (c924 <signal_poll_event+0xc4>)
    c8a0:	695b      	ldr	r3, [r3, #20]
    c8a2:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    c8a4:	bf1f      	itttt	ne
    c8a6:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c8a8:	6913      	ldrne	r3, [r2, #16]
    c8aa:	191b      	addne	r3, r3, r4
    c8ac:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    c8ae:	f7ff ffb0 	bl	c812 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    c8b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8b6:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    c8b8:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    c8ba:	2e00      	cmp	r6, #0
    c8bc:	bf0c      	ite	eq
    c8be:	f06f 0303 	mvneq.w	r3, #3
    c8c2:	2300      	movne	r3, #0
    c8c4:	f010 041f 	ands.w	r4, r0, #31
    c8c8:	664b      	str	r3, [r1, #100]	; 0x64
    c8ca:	d11c      	bne.n	c906 <signal_poll_event+0xa6>
    c8cc:	6a0b      	ldr	r3, [r1, #32]
    c8ce:	3301      	adds	r3, #1
    c8d0:	d119      	bne.n	c906 <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    c8d2:	4608      	mov	r0, r1
    c8d4:	f7ff fa02 	bl	bcdc <_add_thread_to_ready_q>
    c8d8:	f3ef 8305 	mrs	r3, IPSR
    c8dc:	2b0d      	cmp	r3, #13
    c8de:	d81b      	bhi.n	c918 <signal_poll_event+0xb8>
    c8e0:	b123      	cbz	r3, c8ec <signal_poll_event+0x8c>
    c8e2:	4b11      	ldr	r3, [pc, #68]	; (c928 <signal_poll_event+0xc8>)
    c8e4:	6858      	ldr	r0, [r3, #4]
    c8e6:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    c8ea:	d00b      	beq.n	c904 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
    c8ec:	4b0d      	ldr	r3, [pc, #52]	; (c924 <signal_poll_event+0xc4>)
    c8ee:	689b      	ldr	r3, [r3, #8]
    c8f0:	895b      	ldrh	r3, [r3, #10]
    c8f2:	2b7f      	cmp	r3, #127	; 0x7f
    c8f4:	d901      	bls.n	c8fa <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    c8f6:	2000      	movs	r0, #0
    c8f8:	e004      	b.n	c904 <signal_poll_event+0xa4>
    c8fa:	f7ff fae9 	bl	bed0 <__must_switch_threads>
    c8fe:	3000      	adds	r0, #0
    c900:	bf18      	it	ne
    c902:	2001      	movne	r0, #1
    c904:	6038      	str	r0, [r7, #0]
	event->state |= state;
    c906:	7b6b      	ldrb	r3, [r5, #13]
    c908:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    c90c:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    c910:	2000      	movs	r0, #0
	event->state |= state;
    c912:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    c914:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
    c916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    c918:	4620      	mov	r0, r4
    c91a:	e7f3      	b.n	c904 <signal_poll_event+0xa4>
		return -EAGAIN;
    c91c:	f06f 000a 	mvn.w	r0, #10
    c920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c922:	bf00      	nop
    c924:	200029b0 	.word	0x200029b0
    c928:	e000ed00 	.word	0xe000ed00

0000c92c <add_event>:
	return list->head == list;
    c92c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    c92e:	4298      	cmp	r0, r3
{
    c930:	b530      	push	{r4, r5, lr}
    c932:	d00a      	beq.n	c94a <add_event+0x1e>
    c934:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    c936:	b144      	cbz	r4, c94a <add_event+0x1e>
    c938:	68a5      	ldr	r5, [r4, #8]
    c93a:	6812      	ldr	r2, [r2, #0]
    c93c:	682d      	ldr	r5, [r5, #0]
    c93e:	f992 200a 	ldrsb.w	r2, [r2, #10]
    c942:	f995 500a 	ldrsb.w	r5, [r5, #10]
    c946:	4295      	cmp	r5, r2
    c948:	da17      	bge.n	c97a <add_event+0x4e>
	node->next = list;
    c94a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    c94c:	6843      	ldr	r3, [r0, #4]
    c94e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    c950:	6843      	ldr	r3, [r0, #4]
    c952:	6019      	str	r1, [r3, #0]
	list->tail = node;
    c954:	6041      	str	r1, [r0, #4]
    c956:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
    c958:	689d      	ldr	r5, [r3, #8]
    c95a:	682d      	ldr	r5, [r5, #0]
    c95c:	f995 500a 	ldrsb.w	r5, [r5, #10]
    c960:	4295      	cmp	r5, r2
    c962:	dd06      	ble.n	c972 <add_event+0x46>
		node->prev = insert_point->prev;
    c964:	685a      	ldr	r2, [r3, #4]
    c966:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    c968:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    c96a:	685a      	ldr	r2, [r3, #4]
    c96c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    c96e:	6059      	str	r1, [r3, #4]
    c970:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    c972:	42a3      	cmp	r3, r4
    c974:	d003      	beq.n	c97e <add_event+0x52>
    c976:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    c978:	b10b      	cbz	r3, c97e <add_event+0x52>
    c97a:	2b00      	cmp	r3, #0
    c97c:	d1ec      	bne.n	c958 <add_event+0x2c>
	node->prev = list->tail;
    c97e:	e881 0011 	stmia.w	r1, {r0, r4}
    c982:	e7e5      	b.n	c950 <add_event+0x24>

0000c984 <k_poll_event_init>:
{
    c984:	b530      	push	{r4, r5, lr}
	event->type = type;
    c986:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    c988:	6103      	str	r3, [r0, #16]
	event->type = type;
    c98a:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    c98e:	7b81      	ldrb	r1, [r0, #14]
    c990:	f362 0100 	bfi	r1, r2, #0, #1
    c994:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    c996:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    c998:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    c99a:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    c99e:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    c9a2:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    c9a4:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    c9a6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    c9a8:	bd30      	pop	{r4, r5, pc}
	...

0000c9ac <k_poll>:
{
    c9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9b0:	b087      	sub	sp, #28
    c9b2:	4680      	mov	r8, r0
    c9b4:	9101      	str	r1, [sp, #4]
    c9b6:	4691      	mov	r9, r2
    c9b8:	f04f 0320 	mov.w	r3, #32
    c9bc:	f3ef 8111 	mrs	r1, BASEPRI
    c9c0:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    c9c4:	4d4a      	ldr	r5, [pc, #296]	; (caf0 <k_poll+0x144>)
    c9c6:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    c9c8:	7a53      	ldrb	r3, [r2, #9]
    c9ca:	f043 0320 	orr.w	r3, r3, #32
    c9ce:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c9d0:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    c9d4:	f10d 0a18 	add.w	sl, sp, #24
    c9d8:	68aa      	ldr	r2, [r5, #8]
    c9da:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    c9de:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    c9e0:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    c9e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    c9e6:	9b01      	ldr	r3, [sp, #4]
    c9e8:	429f      	cmp	r7, r3
    c9ea:	db15      	blt.n	ca18 <k_poll+0x6c>
	__asm__ volatile(
    c9ec:	f04f 0320 	mov.w	r3, #32
    c9f0:	f3ef 8711 	mrs	r7, BASEPRI
    c9f4:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    c9f8:	68aa      	ldr	r2, [r5, #8]
    c9fa:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    c9fc:	f013 0420 	ands.w	r4, r3, #32
    ca00:	d144      	bne.n	ca8c <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
    ca02:	463a      	mov	r2, r7
    ca04:	4631      	mov	r1, r6
    ca06:	4640      	mov	r0, r8
    ca08:	f7ff ff09 	bl	c81e <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ca0c:	f387 8811 	msr	BASEPRI, r7
}
    ca10:	4620      	mov	r0, r4
    ca12:	b007      	add	sp, #28
    ca14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    ca18:	f04f 0220 	mov.w	r2, #32
    ca1c:	f3ef 8b11 	mrs	fp, BASEPRI
    ca20:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    ca24:	7b61      	ldrb	r1, [r4, #13]
    ca26:	f001 020f 	and.w	r2, r1, #15
    ca2a:	2a02      	cmp	r2, #2
    ca2c:	d003      	beq.n	ca36 <k_poll+0x8a>
    ca2e:	2a04      	cmp	r2, #4
    ca30:	d004      	beq.n	ca3c <k_poll+0x90>
    ca32:	2a01      	cmp	r2, #1
    ca34:	d106      	bne.n	ca44 <k_poll+0x98>
		if (event->signal->signaled) {
    ca36:	6920      	ldr	r0, [r4, #16]
    ca38:	6880      	ldr	r0, [r0, #8]
    ca3a:	e001      	b.n	ca40 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    ca3c:	6920      	ldr	r0, [r4, #16]
    ca3e:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    ca40:	2800      	cmp	r0, #0
    ca42:	d148      	bne.n	cad6 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    ca44:	f1b9 0f00 	cmp.w	r9, #0
    ca48:	d016      	beq.n	ca78 <k_poll+0xcc>
    ca4a:	68a9      	ldr	r1, [r5, #8]
    ca4c:	7a49      	ldrb	r1, [r1, #9]
    ca4e:	068b      	lsls	r3, r1, #26
    ca50:	d512      	bpl.n	ca78 <k_poll+0xcc>
	switch (event->type) {
    ca52:	2a02      	cmp	r2, #2
    ca54:	d007      	beq.n	ca66 <k_poll+0xba>
    ca56:	2a04      	cmp	r2, #4
    ca58:	d013      	beq.n	ca82 <k_poll+0xd6>
    ca5a:	2a01      	cmp	r2, #1
    ca5c:	d109      	bne.n	ca72 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
    ca5e:	4652      	mov	r2, sl
    ca60:	4621      	mov	r1, r4
    ca62:	6920      	ldr	r0, [r4, #16]
    ca64:	e003      	b.n	ca6e <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
    ca66:	6920      	ldr	r0, [r4, #16]
    ca68:	4652      	mov	r2, sl
    ca6a:	4621      	mov	r1, r4
    ca6c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    ca6e:	f7ff ff5d 	bl	c92c <add_event>
	event->poller = poller;
    ca72:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    ca76:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ca78:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    ca7c:	3701      	adds	r7, #1
    ca7e:	3414      	adds	r4, #20
    ca80:	e7b1      	b.n	c9e6 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
    ca82:	6920      	ldr	r0, [r4, #16]
    ca84:	4652      	mov	r2, sl
    ca86:	4621      	mov	r1, r4
    ca88:	3008      	adds	r0, #8
    ca8a:	e7f0      	b.n	ca6e <k_poll+0xc2>
	thread->base.thread_state &= ~states;
    ca8c:	f023 0320 	bic.w	r3, r3, #32
    ca90:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    ca92:	f1b9 0f00 	cmp.w	r9, #0
    ca96:	d104      	bne.n	caa2 <k_poll+0xf6>
    ca98:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    ca9c:	f06f 040a 	mvn.w	r4, #10
    caa0:	e7b6      	b.n	ca10 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    caa2:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    caa4:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    caa6:	9004      	str	r0, [sp, #16]
    caa8:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
    caaa:	f7ff fa01 	bl	beb0 <_pend_current_thread>
	_update_time_slice_before_swap();
    caae:	f7ff fae9 	bl	c084 <_update_time_slice_before_swap>
	return __swap(key);
    cab2:	4638      	mov	r0, r7
    cab4:	f7f3 ff72 	bl	99c <__swap>
    cab8:	4604      	mov	r4, r0
	__asm__ volatile(
    caba:	f04f 0320 	mov.w	r3, #32
    cabe:	f3ef 8511 	mrs	r5, BASEPRI
    cac2:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    cac6:	462a      	mov	r2, r5
    cac8:	4631      	mov	r1, r6
    caca:	4640      	mov	r0, r8
    cacc:	f7ff fea7 	bl	c81e <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cad0:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    cad4:	e79c      	b.n	ca10 <k_poll+0x64>
	event->state |= state;
    cad6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    cada:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
    cade:	2300      	movs	r3, #0
    cae0:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    cae2:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    cae4:	68a9      	ldr	r1, [r5, #8]
    cae6:	7a4a      	ldrb	r2, [r1, #9]
    cae8:	f022 0220 	bic.w	r2, r2, #32
    caec:	724a      	strb	r2, [r1, #9]
    caee:	e7c3      	b.n	ca78 <k_poll+0xcc>
    caf0:	200029b0 	.word	0x200029b0

0000caf4 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    caf4:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    caf6:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    caf8:	42a0      	cmp	r0, r4
    cafa:	d102      	bne.n	cb02 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    cafc:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    cafe:	b002      	add	sp, #8
    cb00:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    cb02:	4620      	mov	r0, r4
    cb04:	f7ff fe85 	bl	c812 <sys_dlist_remove>
	if (!poll_event) {
    cb08:	2c00      	cmp	r4, #0
    cb0a:	d0f7      	beq.n	cafc <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    cb0c:	aa01      	add	r2, sp, #4
    cb0e:	4620      	mov	r0, r4
    cb10:	f7ff fea6 	bl	c860 <signal_poll_event>
	return must_reschedule;
    cb14:	9801      	ldr	r0, [sp, #4]
    cb16:	e7f2      	b.n	cafe <_handle_obj_poll_events+0xa>

0000cb18 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    cb18:	4770      	bx	lr
