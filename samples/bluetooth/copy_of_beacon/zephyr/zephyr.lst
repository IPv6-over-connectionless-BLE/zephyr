
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
GEN_ABS_SYM_END
       0:	20002920 	.word	0x20002920

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000ea5 	.word	0x00000ea5
       8:	00000ef5 	.word	0x00000ef5
       c:	00000d3d 	.word	0x00000d3d
      10:	00000d3d 	.word	0x00000d3d
      14:	00000d3d 	.word	0x00000d3d
      18:	00000d3d 	.word	0x00000d3d
      1c:	00000d3d 	.word	0x00000d3d
      20:	00000d3d 	.word	0x00000d3d
      24:	00000d3d 	.word	0x00000d3d
      28:	00000d3d 	.word	0x00000d3d
      2c:	00000931 	.word	0x00000931
      30:	00000d3d 	.word	0x00000d3d
      34:	00000d3d 	.word	0x00000d3d
      38:	000008ed 	.word	0x000008ed
      3c:	00000d3d 	.word	0x00000d3d

00000040 <_irq_vector_table>:
      40:	00000e69 0000971b 00000e69 00000e69     i.......i...i...
      50:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      60:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      70:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      80:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      90:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      a0:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      b0:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      c0:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      d0:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      e0:	00000e69 00000e69 00000e69 00000e69     i...i...i...i...
      f0:	00000e69 00000e69                       i...i...

000000f8 <_sw_isr_table>:
      f8:	00000000 00001659 00000000 00000cb5     ....Y...........
     108:	00000000 00000cb5 00000000 00000cb5     ................
     118:	00000000 00000cb5 00000000 00000cb5     ................
     128:	20003988 00001909 00000000 00000cb5     .9. ............
     138:	00000000 00000cb5 00000000 00000cb5     ................
     148:	00000000 00000cb5 00000000 000096e1     ................
     158:	00000000 00000cb5 20003970 00001cc9     ........p9. ....
     168:	00000000 00000cb5 00000000 00000cb5     ................
     178:	00000000 00000cb5 00000000 00001e0d     ................
     188:	00000000 00000cb5 00000000 00000cb5     ................
     198:	00000000 00000cb5 00000000 00000cb5     ................
     1a8:	00000000 00000cb5 00000000 00000cb5     ................
     1b8:	00000000 00009715 00000000 00000cb5     ................
     1c8:	00000000 00000cb5 00000000 00000cb5     ................
     1d8:	00000000 00000cb5 00000000 00000cb5     ................
     1e8:	00000000 00000cb5 00000000 00000cb5     ................
     1f8:	00000000 00000cb5 00000000 00000cb5     ................
     208:	00000000 00000cb5 00000000 00000cb5     ................
     218:	00000000 00000cb5 00000000 00000cb5     ................
     228:	00000000 00000cb5 00000000 00000cb5     ................
     238:	00000000 00000cb5 00000000 00000cb5     ................
     248:	00000000 00000cb5 00000000 00000cb5     ................
     258:	00000000 00000cb5 00000000 00000cb5     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b986 	b.w	58c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	9e08      	ldr	r6, [sp, #32]
     2c6:	4604      	mov	r4, r0
     2c8:	4688      	mov	r8, r1
     2ca:	2b00      	cmp	r3, #0
     2cc:	d14b      	bne.n	366 <__udivmoddi4+0xa6>
     2ce:	428a      	cmp	r2, r1
     2d0:	4615      	mov	r5, r2
     2d2:	d967      	bls.n	3a4 <__udivmoddi4+0xe4>
     2d4:	fab2 f282 	clz	r2, r2
     2d8:	b14a      	cbz	r2, 2ee <__udivmoddi4+0x2e>
     2da:	f1c2 0720 	rsb	r7, r2, #32
     2de:	fa01 f302 	lsl.w	r3, r1, r2
     2e2:	fa20 f707 	lsr.w	r7, r0, r7
     2e6:	4095      	lsls	r5, r2
     2e8:	ea47 0803 	orr.w	r8, r7, r3
     2ec:	4094      	lsls	r4, r2
     2ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2f2:	0c23      	lsrs	r3, r4, #16
     2f4:	fbb8 f7fe 	udiv	r7, r8, lr
     2f8:	fa1f fc85 	uxth.w	ip, r5
     2fc:	fb0e 8817 	mls	r8, lr, r7, r8
     300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
     304:	fb07 f10c 	mul.w	r1, r7, ip
     308:	4299      	cmp	r1, r3
     30a:	d909      	bls.n	320 <__udivmoddi4+0x60>
     30c:	18eb      	adds	r3, r5, r3
     30e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
     312:	f080 811b 	bcs.w	54c <CONFIG_BT_RX_STACK_SIZE+0x14c>
     316:	4299      	cmp	r1, r3
     318:	f240 8118 	bls.w	54c <CONFIG_BT_RX_STACK_SIZE+0x14c>
     31c:	3f02      	subs	r7, #2
     31e:	442b      	add	r3, r5
     320:	1a5b      	subs	r3, r3, r1
     322:	b2a4      	uxth	r4, r4
     324:	fbb3 f0fe 	udiv	r0, r3, lr
     328:	fb0e 3310 	mls	r3, lr, r0, r3
     32c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     330:	fb00 fc0c 	mul.w	ip, r0, ip
     334:	45a4      	cmp	ip, r4
     336:	d909      	bls.n	34c <__udivmoddi4+0x8c>
     338:	192c      	adds	r4, r5, r4
     33a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     33e:	f080 8107 	bcs.w	550 <CONFIG_BT_RX_STACK_SIZE+0x150>
     342:	45a4      	cmp	ip, r4
     344:	f240 8104 	bls.w	550 <CONFIG_BT_RX_STACK_SIZE+0x150>
     348:	3802      	subs	r0, #2
     34a:	442c      	add	r4, r5
     34c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
     350:	eba4 040c 	sub.w	r4, r4, ip
     354:	2700      	movs	r7, #0
     356:	b11e      	cbz	r6, 360 <__udivmoddi4+0xa0>
     358:	40d4      	lsrs	r4, r2
     35a:	2300      	movs	r3, #0
     35c:	e9c6 4300 	strd	r4, r3, [r6]
     360:	4639      	mov	r1, r7
     362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     366:	428b      	cmp	r3, r1
     368:	d909      	bls.n	37e <__udivmoddi4+0xbe>
     36a:	2e00      	cmp	r6, #0
     36c:	f000 80eb 	beq.w	546 <CONFIG_BT_RX_STACK_SIZE+0x146>
     370:	2700      	movs	r7, #0
     372:	e9c6 0100 	strd	r0, r1, [r6]
     376:	4638      	mov	r0, r7
     378:	4639      	mov	r1, r7
     37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     37e:	fab3 f783 	clz	r7, r3
     382:	2f00      	cmp	r7, #0
     384:	d147      	bne.n	416 <CONFIG_BT_RX_STACK_SIZE+0x16>
     386:	428b      	cmp	r3, r1
     388:	d302      	bcc.n	390 <__udivmoddi4+0xd0>
     38a:	4282      	cmp	r2, r0
     38c:	f200 80fa 	bhi.w	584 <CONFIG_BT_RX_STACK_SIZE+0x184>
     390:	1a84      	subs	r4, r0, r2
     392:	eb61 0303 	sbc.w	r3, r1, r3
     396:	2001      	movs	r0, #1
     398:	4698      	mov	r8, r3
     39a:	2e00      	cmp	r6, #0
     39c:	d0e0      	beq.n	360 <__udivmoddi4+0xa0>
     39e:	e9c6 4800 	strd	r4, r8, [r6]
     3a2:	e7dd      	b.n	360 <__udivmoddi4+0xa0>
     3a4:	b902      	cbnz	r2, 3a8 <__udivmoddi4+0xe8>
     3a6:	deff      	udf	#255	; 0xff
     3a8:	fab2 f282 	clz	r2, r2
     3ac:	2a00      	cmp	r2, #0
     3ae:	f040 808f 	bne.w	4d0 <CONFIG_BT_RX_STACK_SIZE+0xd0>
     3b2:	1b49      	subs	r1, r1, r5
     3b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3b8:	fa1f f885 	uxth.w	r8, r5
     3bc:	2701      	movs	r7, #1
     3be:	fbb1 fcfe 	udiv	ip, r1, lr
     3c2:	0c23      	lsrs	r3, r4, #16
     3c4:	fb0e 111c 	mls	r1, lr, ip, r1
     3c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3cc:	fb08 f10c 	mul.w	r1, r8, ip
     3d0:	4299      	cmp	r1, r3
     3d2:	d907      	bls.n	3e4 <__udivmoddi4+0x124>
     3d4:	18eb      	adds	r3, r5, r3
     3d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     3da:	d202      	bcs.n	3e2 <__udivmoddi4+0x122>
     3dc:	4299      	cmp	r1, r3
     3de:	f200 80cd 	bhi.w	57c <CONFIG_BT_RX_STACK_SIZE+0x17c>
     3e2:	4684      	mov	ip, r0
     3e4:	1a59      	subs	r1, r3, r1
     3e6:	b2a3      	uxth	r3, r4
     3e8:	fbb1 f0fe 	udiv	r0, r1, lr
     3ec:	fb0e 1410 	mls	r4, lr, r0, r1
     3f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
     3f4:	fb08 f800 	mul.w	r8, r8, r0
     3f8:	45a0      	cmp	r8, r4
     3fa:	d907      	bls.n	40c <CONFIG_BT_RX_STACK_SIZE+0xc>
     3fc:	192c      	adds	r4, r5, r4
     3fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     402:	d202      	bcs.n	40a <CONFIG_BT_RX_STACK_SIZE+0xa>
     404:	45a0      	cmp	r8, r4
     406:	f200 80b6 	bhi.w	576 <CONFIG_BT_RX_STACK_SIZE+0x176>
     40a:	4618      	mov	r0, r3
     40c:	eba4 0408 	sub.w	r4, r4, r8
     410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     414:	e79f      	b.n	356 <__udivmoddi4+0x96>
     416:	f1c7 0c20 	rsb	ip, r7, #32
     41a:	40bb      	lsls	r3, r7
     41c:	fa22 fe0c 	lsr.w	lr, r2, ip
     420:	ea4e 0e03 	orr.w	lr, lr, r3
     424:	fa01 f407 	lsl.w	r4, r1, r7
     428:	fa20 f50c 	lsr.w	r5, r0, ip
     42c:	fa21 f30c 	lsr.w	r3, r1, ip
     430:	ea4f 481e 	mov.w	r8, lr, lsr #16
     434:	4325      	orrs	r5, r4
     436:	fbb3 f9f8 	udiv	r9, r3, r8
     43a:	0c2c      	lsrs	r4, r5, #16
     43c:	fb08 3319 	mls	r3, r8, r9, r3
     440:	fa1f fa8e 	uxth.w	sl, lr
     444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
     448:	fb09 f40a 	mul.w	r4, r9, sl
     44c:	429c      	cmp	r4, r3
     44e:	fa02 f207 	lsl.w	r2, r2, r7
     452:	fa00 f107 	lsl.w	r1, r0, r7
     456:	d90b      	bls.n	470 <CONFIG_BT_RX_STACK_SIZE+0x70>
     458:	eb1e 0303 	adds.w	r3, lr, r3
     45c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     460:	f080 8087 	bcs.w	572 <CONFIG_BT_RX_STACK_SIZE+0x172>
     464:	429c      	cmp	r4, r3
     466:	f240 8084 	bls.w	572 <CONFIG_BT_RX_STACK_SIZE+0x172>
     46a:	f1a9 0902 	sub.w	r9, r9, #2
     46e:	4473      	add	r3, lr
     470:	1b1b      	subs	r3, r3, r4
     472:	b2ad      	uxth	r5, r5
     474:	fbb3 f0f8 	udiv	r0, r3, r8
     478:	fb08 3310 	mls	r3, r8, r0, r3
     47c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
     480:	fb00 fa0a 	mul.w	sl, r0, sl
     484:	45a2      	cmp	sl, r4
     486:	d908      	bls.n	49a <CONFIG_BT_RX_STACK_SIZE+0x9a>
     488:	eb1e 0404 	adds.w	r4, lr, r4
     48c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     490:	d26b      	bcs.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     492:	45a2      	cmp	sl, r4
     494:	d969      	bls.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     496:	3802      	subs	r0, #2
     498:	4474      	add	r4, lr
     49a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     49e:	fba0 8902 	umull	r8, r9, r0, r2
     4a2:	eba4 040a 	sub.w	r4, r4, sl
     4a6:	454c      	cmp	r4, r9
     4a8:	46c2      	mov	sl, r8
     4aa:	464b      	mov	r3, r9
     4ac:	d354      	bcc.n	558 <CONFIG_BT_RX_STACK_SIZE+0x158>
     4ae:	d051      	beq.n	554 <CONFIG_BT_RX_STACK_SIZE+0x154>
     4b0:	2e00      	cmp	r6, #0
     4b2:	d069      	beq.n	588 <CONFIG_BT_RX_STACK_SIZE+0x188>
     4b4:	ebb1 050a 	subs.w	r5, r1, sl
     4b8:	eb64 0403 	sbc.w	r4, r4, r3
     4bc:	fa04 fc0c 	lsl.w	ip, r4, ip
     4c0:	40fd      	lsrs	r5, r7
     4c2:	40fc      	lsrs	r4, r7
     4c4:	ea4c 0505 	orr.w	r5, ip, r5
     4c8:	e9c6 5400 	strd	r5, r4, [r6]
     4cc:	2700      	movs	r7, #0
     4ce:	e747      	b.n	360 <__udivmoddi4+0xa0>
     4d0:	f1c2 0320 	rsb	r3, r2, #32
     4d4:	fa20 f703 	lsr.w	r7, r0, r3
     4d8:	4095      	lsls	r5, r2
     4da:	fa01 f002 	lsl.w	r0, r1, r2
     4de:	fa21 f303 	lsr.w	r3, r1, r3
     4e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     4e6:	4338      	orrs	r0, r7
     4e8:	0c01      	lsrs	r1, r0, #16
     4ea:	fbb3 f7fe 	udiv	r7, r3, lr
     4ee:	fa1f f885 	uxth.w	r8, r5
     4f2:	fb0e 3317 	mls	r3, lr, r7, r3
     4f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     4fa:	fb07 f308 	mul.w	r3, r7, r8
     4fe:	428b      	cmp	r3, r1
     500:	fa04 f402 	lsl.w	r4, r4, r2
     504:	d907      	bls.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     506:	1869      	adds	r1, r5, r1
     508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
     50c:	d22f      	bcs.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     50e:	428b      	cmp	r3, r1
     510:	d92d      	bls.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     512:	3f02      	subs	r7, #2
     514:	4429      	add	r1, r5
     516:	1acb      	subs	r3, r1, r3
     518:	b281      	uxth	r1, r0
     51a:	fbb3 f0fe 	udiv	r0, r3, lr
     51e:	fb0e 3310 	mls	r3, lr, r0, r3
     522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     526:	fb00 f308 	mul.w	r3, r0, r8
     52a:	428b      	cmp	r3, r1
     52c:	d907      	bls.n	53e <CONFIG_BT_RX_STACK_SIZE+0x13e>
     52e:	1869      	adds	r1, r5, r1
     530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     534:	d217      	bcs.n	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     536:	428b      	cmp	r3, r1
     538:	d915      	bls.n	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     53a:	3802      	subs	r0, #2
     53c:	4429      	add	r1, r5
     53e:	1ac9      	subs	r1, r1, r3
     540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     544:	e73b      	b.n	3be <__udivmoddi4+0xfe>
     546:	4637      	mov	r7, r6
     548:	4630      	mov	r0, r6
     54a:	e709      	b.n	360 <__udivmoddi4+0xa0>
     54c:	4607      	mov	r7, r0
     54e:	e6e7      	b.n	320 <__udivmoddi4+0x60>
     550:	4618      	mov	r0, r3
     552:	e6fb      	b.n	34c <__udivmoddi4+0x8c>
     554:	4541      	cmp	r1, r8
     556:	d2ab      	bcs.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     558:	ebb8 0a02 	subs.w	sl, r8, r2
     55c:	eb69 020e 	sbc.w	r2, r9, lr
     560:	3801      	subs	r0, #1
     562:	4613      	mov	r3, r2
     564:	e7a4      	b.n	4b0 <CONFIG_BT_RX_STACK_SIZE+0xb0>
     566:	4660      	mov	r0, ip
     568:	e7e9      	b.n	53e <CONFIG_BT_RX_STACK_SIZE+0x13e>
     56a:	4618      	mov	r0, r3
     56c:	e795      	b.n	49a <CONFIG_BT_RX_STACK_SIZE+0x9a>
     56e:	4667      	mov	r7, ip
     570:	e7d1      	b.n	516 <CONFIG_BT_RX_STACK_SIZE+0x116>
     572:	4681      	mov	r9, r0
     574:	e77c      	b.n	470 <CONFIG_BT_RX_STACK_SIZE+0x70>
     576:	3802      	subs	r0, #2
     578:	442c      	add	r4, r5
     57a:	e747      	b.n	40c <CONFIG_BT_RX_STACK_SIZE+0xc>
     57c:	f1ac 0c02 	sub.w	ip, ip, #2
     580:	442b      	add	r3, r5
     582:	e72f      	b.n	3e4 <__udivmoddi4+0x124>
     584:	4638      	mov	r0, r7
     586:	e708      	b.n	39a <__udivmoddi4+0xda>
     588:	4637      	mov	r7, r6
     58a:	e6e9      	b.n	360 <__udivmoddi4+0xa0>

0000058c <__aeabi_idiv0>:
     58c:	4770      	bx	lr
     58e:	bf00      	nop

00000590 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     590:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     592:	4603      	mov	r3, r0
     594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     598:	b90a      	cbnz	r2, 59e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     59a:	701a      	strb	r2, [r3, #0]

	return dest;
}
     59c:	4770      	bx	lr
		*d = *s;
     59e:	f803 2b01 	strb.w	r2, [r3], #1
     5a2:	e7f7      	b.n	594 <strcpy+0x4>

000005a4 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5a4:	3801      	subs	r0, #1
     5a6:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5b0:	4293      	cmp	r3, r2
     5b2:	d102      	bne.n	5ba <strcmp+0x16>
     5b4:	2b00      	cmp	r3, #0
     5b6:	d1f7      	bne.n	5a8 <strcmp+0x4>
     5b8:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ba:	1a98      	subs	r0, r3, r2
     5bc:	4770      	bx	lr

000005be <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5be:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5c0:	b15a      	cbz	r2, 5da <memcmp+0x1c>
     5c2:	3901      	subs	r1, #1
     5c4:	1884      	adds	r4, r0, r2
     5c6:	f810 2b01 	ldrb.w	r2, [r0], #1
     5ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5ce:	42a0      	cmp	r0, r4
     5d0:	d001      	beq.n	5d6 <memcmp+0x18>
     5d2:	429a      	cmp	r2, r3
     5d4:	d0f7      	beq.n	5c6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5d6:	1ad0      	subs	r0, r2, r3
}
     5d8:	bd10      	pop	{r4, pc}
		return 0;
     5da:	4610      	mov	r0, r2
     5dc:	e7fc      	b.n	5d8 <memcmp+0x1a>

000005de <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
     5de:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5e0:	ea81 0400 	eor.w	r4, r1, r0
     5e4:	07a5      	lsls	r5, r4, #30
     5e6:	4603      	mov	r3, r0
     5e8:	d00b      	beq.n	602 <CONFIG_BT_CTLR_COMPANY_ID+0x11>
     5ea:	3b01      	subs	r3, #1
     5ec:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     5ee:	4291      	cmp	r1, r2
     5f0:	d11d      	bne.n	62e <CONFIG_BT_CTLR_COMPANY_ID+0x3d>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
     5f4:	2a00      	cmp	r2, #0
     5f6:	d0fc      	beq.n	5f2 <CONFIG_BT_CTLR_COMPANY_ID+0x1>
			*(d_byte++) = *(s_byte++);
     5f8:	f811 4b01 	ldrb.w	r4, [r1], #1
     5fc:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     600:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     602:	079c      	lsls	r4, r3, #30
     604:	d1f6      	bne.n	5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
     606:	1f1d      	subs	r5, r3, #4
     608:	460c      	mov	r4, r1
     60a:	188f      	adds	r7, r1, r2
		while (n >= sizeof(unsigned int)) {
     60c:	1b3e      	subs	r6, r7, r4
     60e:	2e03      	cmp	r6, #3
     610:	d808      	bhi.n	624 <CONFIG_BT_CTLR_COMPANY_ID+0x33>
     612:	0894      	lsrs	r4, r2, #2
     614:	f06f 0503 	mvn.w	r5, #3
     618:	fb05 2204 	mla	r2, r5, r4, r2
     61c:	00a4      	lsls	r4, r4, #2
     61e:	4423      	add	r3, r4
     620:	4421      	add	r1, r4
     622:	e7e2      	b.n	5ea <memcpy+0xc>
			*(d_word++) = *(s_word++);
     624:	f854 6b04 	ldr.w	r6, [r4], #4
     628:	f845 6f04 	str.w	r6, [r5, #4]!
     62c:	e7ee      	b.n	60c <CONFIG_BT_CTLR_COMPANY_ID+0x1b>
		*(d_byte++) = *(s_byte++);
     62e:	f811 4b01 	ldrb.w	r4, [r1], #1
     632:	f803 4f01 	strb.w	r4, [r3, #1]!
     636:	e7da      	b.n	5ee <memcpy+0x10>

00000638 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     63a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     63c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     63e:	079c      	lsls	r4, r3, #30
     640:	d10f      	bne.n	662 <memset+0x2a>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     642:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     646:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     64a:	461d      	mov	r5, r3
     64c:	189f      	adds	r7, r3, r2
     64e:	1b7e      	subs	r6, r7, r5
     650:	2e03      	cmp	r6, #3
     652:	d80c      	bhi.n	66e <memset+0x36>
     654:	0894      	lsrs	r4, r2, #2
     656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     65a:	4413      	add	r3, r2

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     65c:	429c      	cmp	r4, r3
     65e:	d109      	bne.n	674 <memset+0x3c>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     660:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (n == 0) {
     662:	2a00      	cmp	r2, #0
     664:	d0fc      	beq.n	660 <memset+0x28>
		*(d_byte++) = c_byte;
     666:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     66a:	3a01      	subs	r2, #1
     66c:	e7e7      	b.n	63e <memset+0x6>
		*(d_word++) = c_word;
     66e:	f845 4b04 	str.w	r4, [r5], #4
     672:	e7ec      	b.n	64e <memset+0x16>
		*(d_byte++) = c_byte;
     674:	f804 1b01 	strb.w	r1, [r4], #1
     678:	e7f0      	b.n	65c <memset+0x24>

0000067a <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
     67a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     67e:	4770      	bx	lr

00000680 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
     680:	4b01      	ldr	r3, [pc, #4]	; (688 <__stdout_hook_install+0x8>)
     682:	6018      	str	r0, [r3, #0]
}
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	20003660 	.word	0x20003660

0000068c <bt_ready>:
static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void bt_ready(int err)
{
     68c:	b510      	push	{r4, lr}
	if (err) {
     68e:	4604      	mov	r4, r0
{
     690:	b086      	sub	sp, #24
	if (err) {
     692:	b128      	cbz	r0, 6a0 <bt_ready+0x14>
		printk("Bluetooth init failed (err %d)\n", err);
     694:	4601      	mov	r1, r0
     696:	4810      	ldr	r0, [pc, #64]	; (6d8 <bt_ready+0x4c>)

	/* Start advertising */
	err = bt_le_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
			      sd, ARRAY_SIZE(sd));
	if (err) {
		printk("Advertising failed to start (err %d)\n", err);
     698:	f000 fe1c 	bl	12d4 <printk>
		return;
	}

	printk("Beacon started\n");
}
     69c:	b006      	add	sp, #24
     69e:	bd10      	pop	{r4, pc}
	printk("Bluetooth initialized\n");
     6a0:	480e      	ldr	r0, [pc, #56]	; (6dc <bt_ready+0x50>)
     6a2:	f000 fe17 	bl	12d4 <printk>
	err = bt_le_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad),
     6a6:	23a0      	movs	r3, #160	; 0xa0
     6a8:	e9cd 4403 	strd	r4, r4, [sp, #12]
     6ac:	f8ad 300e 	strh.w	r3, [sp, #14]
     6b0:	23f0      	movs	r3, #240	; 0xf0
     6b2:	f8ad 3010 	strh.w	r3, [sp, #16]
     6b6:	2301      	movs	r3, #1
     6b8:	9300      	str	r3, [sp, #0]
     6ba:	4909      	ldr	r1, [pc, #36]	; (6e0 <bt_ready+0x54>)
     6bc:	4b09      	ldr	r3, [pc, #36]	; (6e4 <bt_ready+0x58>)
     6be:	9405      	str	r4, [sp, #20]
     6c0:	2203      	movs	r2, #3
     6c2:	a803      	add	r0, sp, #12
     6c4:	f002 fc5a 	bl	2f7c <bt_le_adv_start>
	if (err) {
     6c8:	4601      	mov	r1, r0
     6ca:	b108      	cbz	r0, 6d0 <bt_ready+0x44>
		printk("Advertising failed to start (err %d)\n", err);
     6cc:	4806      	ldr	r0, [pc, #24]	; (6e8 <bt_ready+0x5c>)
     6ce:	e7e3      	b.n	698 <bt_ready+0xc>
	printk("Beacon started\n");
     6d0:	4806      	ldr	r0, [pc, #24]	; (6ec <bt_ready+0x60>)
     6d2:	f000 fdff 	bl	12d4 <printk>
     6d6:	e7e1      	b.n	69c <bt_ready+0x10>
     6d8:	0000bd88 	.word	0x0000bd88
     6dc:	0000bda8 	.word	0x0000bda8
     6e0:	0000bd70 	.word	0x0000bd70
     6e4:	0000be0c 	.word	0x0000be0c
     6e8:	0000bdbf 	.word	0x0000bdbf
     6ec:	0000bde5 	.word	0x0000bde5

000006f0 <main>:

void main(void)
{
     6f0:	b508      	push	{r3, lr}
	int err;

	printk("Starting Beacon Demo\n");
     6f2:	4807      	ldr	r0, [pc, #28]	; (710 <main+0x20>)
     6f4:	f000 fdee 	bl	12d4 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
     6f8:	4806      	ldr	r0, [pc, #24]	; (714 <main+0x24>)
     6fa:	f002 fbc9 	bl	2e90 <bt_enable>
	if (err) {
     6fe:	4601      	mov	r1, r0
     700:	b120      	cbz	r0, 70c <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
     702:	4805      	ldr	r0, [pc, #20]	; (718 <main+0x28>)
	}
}
     704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("Bluetooth init failed (err %d)\n", err);
     708:	f000 bde4 	b.w	12d4 <printk>
}
     70c:	bd08      	pop	{r3, pc}
     70e:	bf00      	nop
     710:	0000bdf5 	.word	0x0000bdf5
     714:	0000068d 	.word	0x0000068d
     718:	0000bd88 	.word	0x0000bd88

0000071c <errata_103>:
#endif /* CONFIG_SOC_NRF52832 */

#ifdef CONFIG_SOC_NRF52840
static bool errata_36(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     71c:	4b05      	ldr	r3, [pc, #20]	; (734 <errata_103+0x18>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     722:	bf01      	itttt	eq
     724:	4b04      	ldreq	r3, [pc, #16]	; (738 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     726:	6818      	ldreq	r0, [r3, #0]
     728:	fab0 f080 	clzeq	r0, r0
     72c:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     72e:	bf18      	it	ne
     730:	2000      	movne	r0, #0
}
     732:	4770      	bx	lr
     734:	10000130 	.word	0x10000130
     738:	10000134 	.word	0x10000134

0000073c <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     73c:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     73e:	f04f 0320 	mov.w	r3, #32
     742:	f3ef 8111 	mrs	r1, BASEPRI
     746:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     74a:	f7ff ffe7 	bl	71c <errata_103>
     74e:	b140      	cbz	r0, 762 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     754:	2200      	movs	r2, #0
     756:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     75a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     75e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     762:	f7ff ffdb 	bl	71c <errata_103>
     766:	b110      	cbz	r0, 76e <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     768:	4b38      	ldr	r3, [pc, #224]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     76a:	4a39      	ldr	r2, [pc, #228]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     76c:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     76e:	f7ff ffd5 	bl	71c <errata_103>
     772:	b118      	cbz	r0, 77c <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     774:	4b37      	ldr	r3, [pc, #220]	; (854 <CONFIG_ISR_STACK_SIZE+0x54>)
     776:	22fb      	movs	r2, #251	; 0xfb
     778:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     77c:	f7ff ffce 	bl	71c <errata_103>
     780:	b148      	cbz	r0, 796 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     782:	4835      	ldr	r0, [pc, #212]	; (858 <CONFIG_ISR_STACK_SIZE+0x58>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     784:	4b35      	ldr	r3, [pc, #212]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     786:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     788:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     78a:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     78e:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     792:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     794:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     796:	f7ff ffc1 	bl	71c <errata_103>
     79a:	b118      	cbz	r0, 7a4 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     79c:	4b30      	ldr	r3, [pc, #192]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
     79e:	f44f 7200 	mov.w	r2, #512	; 0x200
     7a2:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     7a4:	f7ff ffba 	bl	71c <errata_103>
     7a8:	b148      	cbz	r0, 7be <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     7aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     7ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7b2:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     7b4:	bf44      	itt	mi
     7b6:	f06f 0201 	mvnmi.w	r2, #1
     7ba:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     7be:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     7c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     7c6:	2a00      	cmp	r2, #0
     7c8:	db03      	blt.n	7d2 <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     7ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7ce:	2b00      	cmp	r3, #0
     7d0:	da2f      	bge.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7d2:	4b24      	ldr	r3, [pc, #144]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     7d4:	2201      	movs	r2, #1
     7d6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7de:	2a00      	cmp	r2, #0
     7e0:	d0fb      	beq.n	7da <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     7e2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7e6:	2112      	movs	r1, #18
     7e8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7ec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7f0:	2a00      	cmp	r2, #0
     7f2:	d0fb      	beq.n	7ec <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     7f4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     7f8:	2212      	movs	r2, #18
     7fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7fe:	4b19      	ldr	r3, [pc, #100]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     800:	461a      	mov	r2, r3
     802:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     806:	2900      	cmp	r1, #0
     808:	d0fb      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     80a:	2100      	movs	r1, #0
     80c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     810:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     814:	2b00      	cmp	r3, #0
     816:	d0fb      	beq.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     818:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     81c:	4912      	ldr	r1, [pc, #72]	; (868 <CONFIG_ISR_STACK_SIZE+0x68>)
     81e:	4b13      	ldr	r3, [pc, #76]	; (86c <CONFIG_ISR_STACK_SIZE+0x6c>)
     820:	68ca      	ldr	r2, [r1, #12]
     822:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     826:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     828:	60cb      	str	r3, [r1, #12]
     82a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     82e:	bf00      	nop
     830:	e7fd      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     832:	4b0d      	ldr	r3, [pc, #52]	; (868 <CONFIG_ISR_STACK_SIZE+0x68>)
     834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     838:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     83a:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     83c:	4b0c      	ldr	r3, [pc, #48]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
     83e:	4a0d      	ldr	r2, [pc, #52]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     840:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     842:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     846:	2000      	movs	r0, #0
     848:	bd08      	pop	{r3, pc}
     84a:	bf00      	nop
     84c:	4000568c 	.word	0x4000568c
     850:	00038148 	.word	0x00038148
     854:	4000f000 	.word	0x4000f000
     858:	40000ee4 	.word	0x40000ee4
     85c:	10000258 	.word	0x10000258
     860:	40029640 	.word	0x40029640
     864:	4001e000 	.word	0x4001e000
     868:	e000ed00 	.word	0xe000ed00
     86c:	05fa0004 	.word	0x05fa0004
     870:	200036c0 	.word	0x200036c0
     874:	03d09000 	.word	0x03d09000

00000878 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     878:	4808      	ldr	r0, [pc, #32]	; (89c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     87a:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     87c:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     87e:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     880:	d80b      	bhi.n	89a <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     882:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     884:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     886:	d008      	beq.n	89a <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     888:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     88a:	f00a fd6b 	bl	b364 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     88e:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     892:	4903      	ldr	r1, [pc, #12]	; (8a0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     898:	600a      	str	r2, [r1, #0]

0000089a <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     89a:	4770      	bx	lr
    ldr r0, =_kernel
     89c:	2000142c 	.word	0x2000142c
    ldr r1, =_SCS_ICSR
     8a0:	e000ed04 	.word	0xe000ed04

000008a4 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     8a4:	4804      	ldr	r0, [pc, #16]	; (8b8 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     8a6:	2300      	movs	r3, #0
     8a8:	2120      	movs	r1, #32
     8aa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     8ac:	3301      	adds	r3, #1
     8ae:	2b2e      	cmp	r3, #46	; 0x2e
     8b0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     8b4:	d1f9      	bne.n	8aa <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     8b6:	4770      	bx	lr
     8b8:	e000e100 	.word	0xe000e100

000008bc <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     8bc:	4a08      	ldr	r2, [pc, #32]	; (8e0 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     8be:	4909      	ldr	r1, [pc, #36]	; (8e4 <__swap+0x28>)
	_current->arch.basepri = key;
     8c0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     8c2:	6809      	ldr	r1, [r1, #0]
     8c4:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     8c6:	4908      	ldr	r1, [pc, #32]	; (8e8 <__swap+0x2c>)
	_current->arch.basepri = key;
     8c8:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     8ca:	684b      	ldr	r3, [r1, #4]
     8cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     8d0:	604b      	str	r3, [r1, #4]
     8d2:	2300      	movs	r3, #0
     8d4:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     8d8:	6893      	ldr	r3, [r2, #8]
}
     8da:	6e58      	ldr	r0, [r3, #100]	; 0x64
     8dc:	4770      	bx	lr
     8de:	bf00      	nop
     8e0:	2000142c 	.word	0x2000142c
     8e4:	0000dfbc 	.word	0x0000dfbc
     8e8:	e000ed00 	.word	0xe000ed00

000008ec <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     8ec:	490e      	ldr	r1, [pc, #56]	; (928 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     8ee:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     8f0:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
     8f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     8f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     8fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     8fe:	4f0b      	ldr	r7, [pc, #44]	; (92c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     900:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     904:	2020      	movs	r0, #32
    msr BASEPRI, r0
     906:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     90a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     90c:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     90e:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     910:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     912:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     914:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     916:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     91a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     91e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     922:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     926:	4770      	bx	lr
    ldr r1, =_kernel
     928:	2000142c 	.word	0x2000142c
    ldr v4, =_SCS_ICSR
     92c:	e000ed04 	.word	0xe000ed04

00000930 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     930:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     934:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     936:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     93a:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     93e:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     940:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     944:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     948:	d001      	beq.n	94e <_context_switch>

    cmp r1, #2
     94a:	2902      	cmp	r1, #2
    beq _oops
     94c:	d007      	beq.n	95e <_oops>

0000094e <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     94e:	4040      	eors	r0, r0
    msr BASEPRI, r0
     950:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     954:	4904      	ldr	r1, [pc, #16]	; (968 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     95a:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     95c:	4770      	bx	lr

0000095e <_oops>:

_oops:
    push {lr}
     95e:	b500      	push	{lr}
    blx _do_kernel_oops
     960:	f000 fa2c 	bl	dbc <_do_kernel_oops>
    pop {pc}
     964:	bd00      	pop	{pc}
     966:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     968:	e000ed04 	.word	0xe000ed04

0000096c <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     96c:	b510      	push	{r4, lr}
     96e:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     970:	f00a fcce 	bl	b310 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     974:	6822      	ldr	r2, [r4, #0]
     976:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     97c:	4801      	ldr	r0, [pc, #4]	; (984 <_FaultThreadShow.isra.2+0x18>)
     97e:	f000 bca9 	b.w	12d4 <printk>
     982:	bf00      	nop
     984:	0000bf85 	.word	0x0000bf85

00000988 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     988:	b510      	push	{r4, lr}
     98a:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     98c:	481a      	ldr	r0, [pc, #104]	; (9f8 <_UsageFault+0x70>)
     98e:	f000 fca1 	bl	12d4 <printk>

	_FaultThreadShow(esf);
     992:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     996:	4c19      	ldr	r4, [pc, #100]	; (9fc <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     998:	f7ff ffe8 	bl	96c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     99c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     99e:	019a      	lsls	r2, r3, #6
     9a0:	d502      	bpl.n	9a8 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     9a2:	4817      	ldr	r0, [pc, #92]	; (a00 <_UsageFault+0x78>)
     9a4:	f000 fc96 	bl	12d4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     9a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9aa:	01db      	lsls	r3, r3, #7
     9ac:	d502      	bpl.n	9b4 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     9ae:	4815      	ldr	r0, [pc, #84]	; (a04 <_UsageFault+0x7c>)
     9b0:	f000 fc90 	bl	12d4 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     9b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9b6:	0318      	lsls	r0, r3, #12
     9b8:	d502      	bpl.n	9c0 <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     9ba:	4813      	ldr	r0, [pc, #76]	; (a08 <_UsageFault+0x80>)
     9bc:	f000 fc8a 	bl	12d4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     9c0:	4c0e      	ldr	r4, [pc, #56]	; (9fc <_UsageFault+0x74>)
     9c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9c4:	0359      	lsls	r1, r3, #13
     9c6:	d502      	bpl.n	9ce <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     9c8:	4810      	ldr	r0, [pc, #64]	; (a0c <_UsageFault+0x84>)
     9ca:	f000 fc83 	bl	12d4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     9ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9d0:	039a      	lsls	r2, r3, #14
     9d2:	d502      	bpl.n	9da <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     9d4:	480e      	ldr	r0, [pc, #56]	; (a10 <_UsageFault+0x88>)
     9d6:	f000 fc7d 	bl	12d4 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     9da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     9dc:	03db      	lsls	r3, r3, #15
     9de:	d502      	bpl.n	9e6 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     9e0:	480c      	ldr	r0, [pc, #48]	; (a14 <_UsageFault+0x8c>)
     9e2:	f000 fc77 	bl	12d4 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     9e6:	4a05      	ldr	r2, [pc, #20]	; (9fc <_UsageFault+0x74>)
     9e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
     9ea:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     9ee:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     9f2:	6293      	str	r3, [r2, #40]	; 0x28
}
     9f4:	bd10      	pop	{r4, pc}
     9f6:	bf00      	nop
     9f8:	0000c086 	.word	0x0000c086
     9fc:	e000ed00 	.word	0xe000ed00
     a00:	0000c09f 	.word	0x0000c09f
     a04:	0000c0b3 	.word	0x0000c0b3
     a08:	0000c0ce 	.word	0x0000c0ce
     a0c:	0000c0ed 	.word	0x0000c0ed
     a10:	0000c113 	.word	0x0000c113
     a14:	0000c12e 	.word	0x0000c12e

00000a18 <_MpuFault>:
{
     a18:	b538      	push	{r3, r4, r5, lr}
     a1a:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     a1c:	4819      	ldr	r0, [pc, #100]	; (a84 <_MpuFault+0x6c>)
{
     a1e:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     a20:	f000 fc58 	bl	12d4 <printk>
	_FaultThreadShow(esf);
     a24:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     a28:	4c17      	ldr	r4, [pc, #92]	; (a88 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     a2a:	f7ff ff9f 	bl	96c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     a2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a30:	06d9      	lsls	r1, r3, #27
     a32:	d504      	bpl.n	a3e <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     a34:	4815      	ldr	r0, [pc, #84]	; (a8c <_MpuFault+0x74>)
}
     a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     a3a:	f000 bc4b 	b.w	12d4 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a40:	071a      	lsls	r2, r3, #28
     a42:	d501      	bpl.n	a48 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     a44:	4812      	ldr	r0, [pc, #72]	; (a90 <_MpuFault+0x78>)
     a46:	e7f6      	b.n	a36 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     a48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a4a:	079b      	lsls	r3, r3, #30
     a4c:	d50f      	bpl.n	a6e <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     a4e:	4811      	ldr	r0, [pc, #68]	; (a94 <_MpuFault+0x7c>)
     a50:	f000 fc40 	bl	12d4 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a58:	0618      	lsls	r0, r3, #24
     a5a:	d507      	bpl.n	a6c <_MpuFault+0x54>
			PR_EXC("  Address: 0x%x\n", mmfar);
     a5c:	480e      	ldr	r0, [pc, #56]	; (a98 <_MpuFault+0x80>)
     a5e:	f000 fc39 	bl	12d4 <printk>
			if (fromHardFault) {
     a62:	b11d      	cbz	r5, a6c <_MpuFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     a64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     a6a:	62a3      	str	r3, [r4, #40]	; 0x28
}
     a6c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     a6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a70:	07da      	lsls	r2, r3, #31
     a72:	d501      	bpl.n	a78 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     a74:	4809      	ldr	r0, [pc, #36]	; (a9c <_MpuFault+0x84>)
     a76:	e7de      	b.n	a36 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a7a:	069b      	lsls	r3, r3, #26
     a7c:	d5f6      	bpl.n	a6c <_MpuFault+0x54>
		PR_EXC("  Floating-point lazy state preservation error\n");
     a7e:	4808      	ldr	r0, [pc, #32]	; (aa0 <_MpuFault+0x88>)
     a80:	e7d9      	b.n	a36 <_MpuFault+0x1e>
     a82:	bf00      	nop
     a84:	0000bfcf 	.word	0x0000bfcf
     a88:	e000ed00 	.word	0xe000ed00
     a8c:	0000bfe6 	.word	0x0000bfe6
     a90:	0000bff8 	.word	0x0000bff8
     a94:	0000c00c 	.word	0x0000c00c
     a98:	0000c025 	.word	0x0000c025
     a9c:	0000c036 	.word	0x0000c036
     aa0:	0000c056 	.word	0x0000c056

00000aa4 <_BusFault>:
{
     aa4:	b538      	push	{r3, r4, r5, lr}
     aa6:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     aa8:	481d      	ldr	r0, [pc, #116]	; (b20 <_BusFault+0x7c>)
{
     aaa:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     aac:	f000 fc12 	bl	12d4 <printk>
	_FaultThreadShow(esf);
     ab0:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     ab4:	4c1b      	ldr	r4, [pc, #108]	; (b24 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     ab6:	f7ff ff59 	bl	96c <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     aba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     abc:	04d8      	lsls	r0, r3, #19
     abe:	d504      	bpl.n	aca <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     ac0:	4819      	ldr	r0, [pc, #100]	; (b28 <_BusFault+0x84>)
}
     ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     ac6:	f000 bc05 	b.w	12d4 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     acc:	0519      	lsls	r1, r3, #20
     ace:	d501      	bpl.n	ad4 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     ad0:	4816      	ldr	r0, [pc, #88]	; (b2c <_BusFault+0x88>)
     ad2:	e7f6      	b.n	ac2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     ad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ad6:	059a      	lsls	r2, r3, #22
     ad8:	d514      	bpl.n	b04 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     ada:	4815      	ldr	r0, [pc, #84]	; (b30 <_BusFault+0x8c>)
     adc:	f000 fbfa 	bl	12d4 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     ae0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     ae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ae4:	041b      	lsls	r3, r3, #16
     ae6:	d507      	bpl.n	af8 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     ae8:	4812      	ldr	r0, [pc, #72]	; (b34 <_BusFault+0x90>)
     aea:	f000 fbf3 	bl	12d4 <printk>
			if (fromHardFault) {
     aee:	b11d      	cbz	r5, af8 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     af0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     af2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     af6:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     af8:	4b0a      	ldr	r3, [pc, #40]	; (b24 <_BusFault+0x80>)
     afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     afc:	0558      	lsls	r0, r3, #21
     afe:	d50e      	bpl.n	b1e <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     b00:	480d      	ldr	r0, [pc, #52]	; (b38 <_BusFault+0x94>)
     b02:	e7de      	b.n	ac2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     b04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b06:	0559      	lsls	r1, r3, #21
     b08:	d4fa      	bmi.n	b00 <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b0c:	05da      	lsls	r2, r3, #23
     b0e:	d501      	bpl.n	b14 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     b10:	480a      	ldr	r0, [pc, #40]	; (b3c <_BusFault+0x98>)
     b12:	e7d6      	b.n	ac2 <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b16:	049b      	lsls	r3, r3, #18
     b18:	d501      	bpl.n	b1e <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     b1a:	4809      	ldr	r0, [pc, #36]	; (b40 <_BusFault+0x9c>)
     b1c:	e7d1      	b.n	ac2 <_BusFault+0x1e>
}
     b1e:	bd38      	pop	{r3, r4, r5, pc}
     b20:	0000be4c 	.word	0x0000be4c
     b24:	e000ed00 	.word	0xe000ed00
     b28:	0000bfe6 	.word	0x0000bfe6
     b2c:	0000bff8 	.word	0x0000bff8
     b30:	0000be63 	.word	0x0000be63
     b34:	0000c025 	.word	0x0000c025
     b38:	0000be7d 	.word	0x0000be7d
     b3c:	0000be99 	.word	0x0000be99
     b40:	0000c056 	.word	0x0000c056

00000b44 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     b44:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     b46:	4d27      	ldr	r5, [pc, #156]	; (be4 <_Fault+0xa0>)
     b48:	686b      	ldr	r3, [r5, #4]
     b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     b4e:	1eda      	subs	r2, r3, #3
{
     b50:	4604      	mov	r4, r0
	switch (fault) {
     b52:	2a09      	cmp	r2, #9
     b54:	d83a      	bhi.n	bcc <_Fault+0x88>
     b56:	e8df f002 	tbb	[pc, r2]
     b5a:	3305      	.short	0x3305
     b5c:	39392f35 	.word	0x39392f35
     b60:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     b64:	4820      	ldr	r0, [pc, #128]	; (be8 <_Fault+0xa4>)
     b66:	f000 fbb5 	bl	12d4 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     b6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     b6c:	079a      	lsls	r2, r3, #30
     b6e:	d503      	bpl.n	b78 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     b70:	481e      	ldr	r0, [pc, #120]	; (bec <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     b72:	f000 fbaf 	bl	12d4 <printk>
     b76:	e00c      	b.n	b92 <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     b78:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     b7a:	005b      	lsls	r3, r3, #1
     b7c:	d509      	bpl.n	b92 <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     b7e:	481c      	ldr	r0, [pc, #112]	; (bf0 <_Fault+0xac>)
     b80:	f000 fba8 	bl	12d4 <printk>
		if (SCB_MMFSR) {
     b84:	4b1b      	ldr	r3, [pc, #108]	; (bf4 <_Fault+0xb0>)
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	b14b      	cbz	r3, b9e <_Fault+0x5a>
			_MpuFault(esf, 1);
     b8a:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     b8c:	4620      	mov	r0, r4
     b8e:	f7ff ff43 	bl	a18 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     b92:	4621      	mov	r1, r4
     b94:	2000      	movs	r0, #0
}
     b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     b9a:	f000 b913 	b.w	dc4 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     b9e:	4b16      	ldr	r3, [pc, #88]	; (bf8 <_Fault+0xb4>)
     ba0:	781b      	ldrb	r3, [r3, #0]
     ba2:	b123      	cbz	r3, bae <_Fault+0x6a>
			_BusFault(esf, 1);
     ba4:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     ba6:	4620      	mov	r0, r4
     ba8:	f7ff ff7c 	bl	aa4 <_BusFault>
     bac:	e7f1      	b.n	b92 <_Fault+0x4e>
		} else if (SCB_UFSR) {
     bae:	4b13      	ldr	r3, [pc, #76]	; (bfc <_Fault+0xb8>)
     bb0:	881b      	ldrh	r3, [r3, #0]
     bb2:	b29b      	uxth	r3, r3
     bb4:	2b00      	cmp	r3, #0
     bb6:	d0ec      	beq.n	b92 <_Fault+0x4e>
		_UsageFault(esf);
     bb8:	4620      	mov	r0, r4
     bba:	f7ff fee5 	bl	988 <_UsageFault>
     bbe:	e7e8      	b.n	b92 <_Fault+0x4e>
		_MpuFault(esf, 0);
     bc0:	2100      	movs	r1, #0
     bc2:	e7e3      	b.n	b8c <_Fault+0x48>
		_BusFault(esf, 0);
     bc4:	2100      	movs	r1, #0
     bc6:	e7ee      	b.n	ba6 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     bc8:	480d      	ldr	r0, [pc, #52]	; (c00 <_Fault+0xbc>)
     bca:	e7d2      	b.n	b72 <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     bcc:	480d      	ldr	r0, [pc, #52]	; (c04 <_Fault+0xc0>)
     bce:	490e      	ldr	r1, [pc, #56]	; (c08 <_Fault+0xc4>)
     bd0:	f1a3 0210 	sub.w	r2, r3, #16
     bd4:	2b0f      	cmp	r3, #15
     bd6:	bfd8      	it	le
     bd8:	4601      	movle	r1, r0
     bda:	480c      	ldr	r0, [pc, #48]	; (c0c <_Fault+0xc8>)
     bdc:	f000 fb7a 	bl	12d4 <printk>
     be0:	e7d7      	b.n	b92 <_Fault+0x4e>
     be2:	bf00      	nop
     be4:	e000ed00 	.word	0xe000ed00
     be8:	0000bee0 	.word	0x0000bee0
     bec:	0000bef8 	.word	0x0000bef8
     bf0:	0000bf1a 	.word	0x0000bf1a
     bf4:	e000ed28 	.word	0xe000ed28
     bf8:	e000ed29 	.word	0xe000ed29
     bfc:	e000ed2a 	.word	0xe000ed2a
     c00:	0000bf3a 	.word	0x0000bf3a
     c04:	0000beb2 	.word	0x0000beb2
     c08:	0000bec7 	.word	0x0000bec7
     c0c:	0000bf71 	.word	0x0000bf71

00000c10 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     c10:	4a02      	ldr	r2, [pc, #8]	; (c1c <_FaultInit+0xc>)
     c12:	6953      	ldr	r3, [r2, #20]
     c14:	f043 0310 	orr.w	r3, r3, #16
     c18:	6153      	str	r3, [r2, #20]
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     c1a:	4770      	bx	lr
     c1c:	e000ed00 	.word	0xe000ed00

00000c20 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     c20:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c22:	2b00      	cmp	r3, #0
     c24:	db08      	blt.n	c38 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c26:	2201      	movs	r2, #1
     c28:	f000 001f 	and.w	r0, r0, #31
     c2c:	fa02 f000 	lsl.w	r0, r2, r0
     c30:	095b      	lsrs	r3, r3, #5
     c32:	4a02      	ldr	r2, [pc, #8]	; (c3c <_arch_irq_enable+0x1c>)
     c34:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
     c38:	4770      	bx	lr
     c3a:	bf00      	nop
     c3c:	e000e100 	.word	0xe000e100

00000c40 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     c40:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c42:	2b00      	cmp	r3, #0
     c44:	db0d      	blt.n	c62 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c46:	2201      	movs	r2, #1
     c48:	095b      	lsrs	r3, r3, #5
     c4a:	f000 001f 	and.w	r0, r0, #31
     c4e:	fa02 f000 	lsl.w	r0, r2, r0
     c52:	3320      	adds	r3, #32
     c54:	4a03      	ldr	r2, [pc, #12]	; (c64 <_arch_irq_disable+0x24>)
     c56:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c5e:	f3bf 8f6f 	isb	sy
}
     c62:	4770      	bx	lr
     c64:	e000e100 	.word	0xe000e100

00000c68 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     c68:	0942      	lsrs	r2, r0, #5
     c6a:	4b05      	ldr	r3, [pc, #20]	; (c80 <_arch_irq_is_enabled+0x18>)
     c6c:	f000 001f 	and.w	r0, r0, #31
     c70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     c74:	2301      	movs	r3, #1
     c76:	fa03 f000 	lsl.w	r0, r3, r0
}
     c7a:	4010      	ands	r0, r2
     c7c:	4770      	bx	lr
     c7e:	bf00      	nop
     c80:	e000e100 	.word	0xe000e100

00000c84 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     c84:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     c86:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c88:	bfa8      	it	ge
     c8a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     c8e:	f101 0101 	add.w	r1, r1, #1
     c92:	ea4f 1141 	mov.w	r1, r1, lsl #5
     c96:	bfae      	itee	ge
     c98:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     c9c:	f000 000f 	andlt.w	r0, r0, #15
     ca0:	4b03      	ldrlt	r3, [pc, #12]	; (cb0 <_irq_priority_set+0x2c>)
     ca2:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ca4:	bfac      	ite	ge
     ca6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     caa:	5419      	strblt	r1, [r3, r0]
}
     cac:	4770      	bx	lr
     cae:	bf00      	nop
     cb0:	e000ed14 	.word	0xe000ed14

00000cb4 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     cb4:	f000 b842 	b.w	d3c <__bus_fault>

00000cb8 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     cb8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     cba:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     cbc:	4b04      	ldr	r3, [pc, #16]	; (cd0 <_arch_isr_direct_pm+0x18>)
     cbe:	6998      	ldr	r0, [r3, #24]
     cc0:	b118      	cbz	r0, cca <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     cc2:	2200      	movs	r2, #0
     cc4:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     cc6:	f009 ffa9 	bl	ac1c <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     cca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
     ccc:	bd08      	pop	{r3, pc}
     cce:	bf00      	nop
     cd0:	2000142c 	.word	0x2000142c

00000cd4 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cd6:	460c      	mov	r4, r1
     cd8:	4616      	mov	r6, r2
     cda:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     cdc:	2204      	movs	r2, #4
     cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
     ce2:	4605      	mov	r5, r0
     ce4:	f00a fe12 	bl	b90c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     ce8:	f1a6 0120 	sub.w	r1, r6, #32
     cec:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     cee:	4a0c      	ldr	r2, [pc, #48]	; (d20 <_new_thread+0x4c>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     cf0:	f021 0107 	bic.w	r1, r1, #7

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
     cf4:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     cf6:	f022 0201 	bic.w	r2, r2, #1
	thread->fn_abort = NULL;
     cfa:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
	thread->stack_info.size = (u32_t)stackSize;
     cfe:	e9c5 4616 	strd	r4, r6, [r5, #88]	; 0x58
     d02:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     d04:	9a06      	ldr	r2, [sp, #24]
     d06:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     d08:	9a07      	ldr	r2, [sp, #28]
     d0a:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     d0c:	9a08      	ldr	r2, [sp, #32]
     d0e:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
     d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->a1 = (u32_t)pEntry;
     d14:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     d16:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     d18:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     d1a:	662b      	str	r3, [r5, #96]	; 0x60
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
	thread_monitor_init(thread);
#endif
}
     d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d1e:	bf00      	nop
     d20:	0000b785 	.word	0x0000b785

00000d24 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     d24:	4901      	ldr	r1, [pc, #4]	; (d2c <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     d26:	2210      	movs	r2, #16
	str r2, [r1]
     d28:	600a      	str	r2, [r1, #0]
	bx lr
     d2a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     d2c:	e000ed10 	.word	0xe000ed10

00000d30 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     d30:	4040      	eors	r0, r0
	msr BASEPRI, r0
     d32:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     d36:	bf30      	wfi

	bx lr
     d38:	4770      	bx	lr
     d3a:	bf00      	nop

00000d3c <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     d3c:	4040      	eors	r0, r0
	msr BASEPRI, r0
     d3e:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     d42:	f8df c01c 	ldr.w	ip, [pc, #28]	; d60 <__bus_fault+0x24>
	ldr ip, [ip]
     d46:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     d4a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     d4e:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     d50:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     d54:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     d58:	b500      	push	{lr}
	bl _Fault
     d5a:	f7ff fef3 	bl	b44 <_Fault>

	pop {pc}
     d5e:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     d60:	e000ed04 	.word	0xe000ed04

00000d64 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     d64:	2804      	cmp	r0, #4
{
     d66:	b538      	push	{r3, r4, r5, lr}
     d68:	4604      	mov	r4, r0
     d6a:	460d      	mov	r5, r1
	switch (reason) {
     d6c:	d013      	beq.n	d96 <_NanoFatalErrorHandler+0x32>
     d6e:	2805      	cmp	r0, #5
     d70:	d013      	beq.n	d9a <_NanoFatalErrorHandler+0x36>
     d72:	2803      	cmp	r0, #3
     d74:	d113      	bne.n	d9e <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     d76:	480c      	ldr	r0, [pc, #48]	; (da8 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     d78:	f000 faac 	bl	12d4 <printk>
     d7c:	f00a fac8 	bl	b310 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     d80:	69aa      	ldr	r2, [r5, #24]
     d82:	4601      	mov	r1, r0
     d84:	4809      	ldr	r0, [pc, #36]	; (dac <_NanoFatalErrorHandler+0x48>)
     d86:	f000 faa5 	bl	12d4 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     d8a:	4629      	mov	r1, r5
     d8c:	4620      	mov	r0, r4
}
     d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     d92:	f000 b817 	b.w	dc4 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     d96:	4806      	ldr	r0, [pc, #24]	; (db0 <_NanoFatalErrorHandler+0x4c>)
     d98:	e7ee      	b.n	d78 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     d9a:	4806      	ldr	r0, [pc, #24]	; (db4 <_NanoFatalErrorHandler+0x50>)
     d9c:	e7ec      	b.n	d78 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     d9e:	4601      	mov	r1, r0
     da0:	4805      	ldr	r0, [pc, #20]	; (db8 <_NanoFatalErrorHandler+0x54>)
     da2:	f000 fa97 	bl	12d4 <printk>
		break;
     da6:	e7e9      	b.n	d7c <_NanoFatalErrorHandler+0x18>
     da8:	0000c15a 	.word	0x0000c15a
     dac:	0000c1d8 	.word	0x0000c1d8
     db0:	0000c180 	.word	0x0000c180
     db4:	0000c19a 	.word	0x0000c19a
     db8:	0000c1b5 	.word	0x0000c1b5

00000dbc <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     dbc:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     dbe:	6800      	ldr	r0, [r0, #0]
     dc0:	f7ff bfd0 	b.w	d64 <_NanoFatalErrorHandler>

00000dc4 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     dc4:	2805      	cmp	r0, #5
{
     dc6:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     dc8:	d00c      	beq.n	de4 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     dca:	f00a fcc3 	bl	b754 <k_is_in_isr>
     dce:	b160      	cbz	r0, dea <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     dd0:	f00a fcc0 	bl	b754 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     dd4:	490c      	ldr	r1, [pc, #48]	; (e08 <_SysFatalErrorHandler+0x44>)
     dd6:	4b0d      	ldr	r3, [pc, #52]	; (e0c <_SysFatalErrorHandler+0x48>)
     dd8:	2800      	cmp	r0, #0
     dda:	bf08      	it	eq
     ddc:	4619      	moveq	r1, r3
     dde:	480c      	ldr	r0, [pc, #48]	; (e10 <_SysFatalErrorHandler+0x4c>)
     de0:	f000 fa78 	bl	12d4 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     de4:	f7ff ffa4 	bl	d30 <k_cpu_idle>
     de8:	e7fc      	b.n	de4 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     dea:	f00a fcc3 	bl	b774 <_is_thread_essential>
     dee:	2800      	cmp	r0, #0
     df0:	d1ee      	bne.n	dd0 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     df2:	4c08      	ldr	r4, [pc, #32]	; (e14 <_SysFatalErrorHandler+0x50>)
     df4:	4808      	ldr	r0, [pc, #32]	; (e18 <_SysFatalErrorHandler+0x54>)
     df6:	68a1      	ldr	r1, [r4, #8]
     df8:	f000 fa6c 	bl	12d4 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     dfc:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     e02:	f000 b80b 	b.w	e1c <_impl_k_thread_abort>
     e06:	bf00      	nop
     e08:	0000c214 	.word	0x0000c214
     e0c:	0000c218 	.word	0x0000c218
     e10:	0000c229 	.word	0x0000c229
     e14:	2000142c 	.word	0x2000142c
     e18:	0000c249 	.word	0x0000c249

00000e1c <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     e1c:	b538      	push	{r3, r4, r5, lr}
     e1e:	4605      	mov	r5, r0
	__asm__ volatile(
     e20:	f04f 0320 	mov.w	r3, #32
     e24:	f3ef 8411 	mrs	r4, BASEPRI
     e28:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     e2c:	f00a fcfe 	bl	b82c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     e30:	4b0b      	ldr	r3, [pc, #44]	; (e60 <_impl_k_thread_abort+0x44>)
     e32:	689b      	ldr	r3, [r3, #8]
     e34:	42ab      	cmp	r3, r5
     e36:	d10d      	bne.n	e54 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     e38:	4b0a      	ldr	r3, [pc, #40]	; (e64 <_impl_k_thread_abort+0x48>)
     e3a:	685a      	ldr	r2, [r3, #4]
     e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     e40:	b922      	cbnz	r2, e4c <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     e42:	f00a fa8f 	bl	b364 <_update_time_slice_before_swap>

	return __swap(key);
     e46:	4620      	mov	r0, r4
     e48:	f7ff fd38 	bl	8bc <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     e4c:	685a      	ldr	r2, [r3, #4]
     e4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     e52:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     e54:	4620      	mov	r0, r4
}
     e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     e5a:	f00a b9e7 	b.w	b22c <_reschedule_threads>
     e5e:	bf00      	nop
     e60:	2000142c 	.word	0x2000142c
     e64:	e000ed00 	.word	0xe000ed00

00000e68 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     e68:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     e6a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     e6c:	4a0b      	ldr	r2, [pc, #44]	; (e9c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     e6e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     e70:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     e72:	bf1e      	ittt	ne
	movne	r1, #0
     e74:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     e76:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     e78:	f009 fed0 	blne	ac1c <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     e7c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     e7e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     e82:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     e86:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     e8a:	4905      	ldr	r1, [pc, #20]	; (ea0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     e8c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     e8e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     e90:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     e92:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     e96:	f7ff bcef 	b.w	878 <_ExcExit>
     e9a:	0000      	.short	0x0000
	ldr r2, =_kernel
     e9c:	2000142c 	.word	0x2000142c
	ldr r1, =_sw_isr_table
     ea0:	000000f8 	.word	0x000000f8

00000ea4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     ea4:	2020      	movs	r0, #32
    msr BASEPRI, r0
     ea6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     eaa:	4805      	ldr	r0, [pc, #20]	; (ec0 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     eb0:	1840      	adds	r0, r0, r1
    msr PSP, r0
     eb2:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     eb6:	2002      	movs	r0, #2
    msr CONTROL, r0
     eb8:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     ebc:	f000 b806 	b.w	ecc <_PrepC>
    ldr r0, =_interrupt_stack
     ec0:	20002a60 	.word	0x20002a60

00000ec4 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     ec4:	bf30      	wfi
    b _SysNmiOnReset
     ec6:	f7ff bffd 	b.w	ec4 <_SysNmiOnReset>
     eca:	bf00      	nop

00000ecc <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     ecc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     ece:	4b07      	ldr	r3, [pc, #28]	; (eec <_PrepC+0x20>)
     ed0:	4a07      	ldr	r2, [pc, #28]	; (ef0 <_PrepC+0x24>)
     ed2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     ed6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     edc:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     ee0:	f009 fecc 	bl	ac7c <_bss_zero>
	_data_copy();
     ee4:	f009 fed4 	bl	ac90 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     ee8:	f009 fefa 	bl	ace0 <_Cstart>
     eec:	00000000 	.word	0x00000000
     ef0:	e000ed00 	.word	0xe000ed00

00000ef4 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     ef4:	b508      	push	{r3, lr}
	handler();
     ef6:	f7ff ffe5 	bl	ec4 <_SysNmiOnReset>
	_ExcExit();
}
     efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     efe:	f7ff bcbb 	b.w	878 <_ExcExit>
	...

00000f04 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     f04:	4b15      	ldr	r3, [pc, #84]	; (f5c <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     f06:	4916      	ldr	r1, [pc, #88]	; (f60 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     f08:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     f0a:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     f0c:	680d      	ldr	r5, [r1, #0]
     f0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
     f12:	4295      	cmp	r5, r2
     f14:	d80f      	bhi.n	f36 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     f16:	2200      	movs	r2, #0
     f18:	6848      	ldr	r0, [r1, #4]
     f1a:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     f1c:	4295      	cmp	r5, r2
     f1e:	f100 000c 	add.w	r0, r0, #12
     f22:	d10a      	bne.n	f3a <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
     f24:	2205      	movs	r2, #5
     f26:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
     f28:	4b0e      	ldr	r3, [pc, #56]	; (f64 <arm_mpu_init+0x60>)
     f2a:	2201      	movs	r2, #1
     f2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
     f2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f32:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
     f36:	2000      	movs	r0, #0
     f38:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
     f3a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
     f3e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
     f42:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     f44:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
     f48:	f041 0110 	orr.w	r1, r1, #16
     f4c:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     f4e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     f52:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     f54:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     f56:	611c      	str	r4, [r3, #16]
     f58:	e7e0      	b.n	f1c <arm_mpu_init+0x18>
     f5a:	bf00      	nop
     f5c:	e000ed90 	.word	0xe000ed90
     f60:	2000367c 	.word	0x2000367c
     f64:	20000000 	.word	0x20000000

00000f68 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     f68:	2000      	movs	r0, #0
     f6a:	4770      	bx	lr

00000f6c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     f6c:	680b      	ldr	r3, [r1, #0]
     f6e:	3301      	adds	r3, #1
     f70:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     f72:	4b01      	ldr	r3, [pc, #4]	; (f78 <char_out+0xc>)
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	4718      	bx	r3
     f78:	200036c4 	.word	0x200036c4

00000f7c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f80:	b085      	sub	sp, #20
     f82:	469b      	mov	fp, r3
     f84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     f86:	f8df a090 	ldr.w	sl, [pc, #144]	; 1018 <_printk_dec_ulong+0x9c>
     f8a:	2c01      	cmp	r4, #1
     f8c:	bfb8      	it	lt
     f8e:	2401      	movlt	r4, #1
     f90:	2b01      	cmp	r3, #1
     f92:	bf0c      	ite	eq
     f94:	2330      	moveq	r3, #48	; 0x30
     f96:	2320      	movne	r3, #32
     f98:	4615      	mov	r5, r2
     f9a:	4680      	mov	r8, r0
     f9c:	4689      	mov	r9, r1
     f9e:	9401      	str	r4, [sp, #4]
     fa0:	9302      	str	r3, [sp, #8]
     fa2:	2601      	movs	r6, #1
     fa4:	270a      	movs	r7, #10
     fa6:	2200      	movs	r2, #0
     fa8:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     fac:	b90a      	cbnz	r2, fb2 <_printk_dec_ulong+0x36>
     fae:	45aa      	cmp	sl, r5
     fb0:	d21f      	bcs.n	ff2 <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     fb2:	fbb5 f0f4 	udiv	r0, r5, r4
     fb6:	4649      	mov	r1, r9
     fb8:	3030      	adds	r0, #48	; 0x30
     fba:	47c0      	blx	r8
			digits++;
     fbc:	3601      	adds	r6, #1
			found_largest_digit = 1;
     fbe:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
     fc0:	3f01      	subs	r7, #1
	while (pos >= 9) {
     fc2:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
     fc4:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
     fc8:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
     fcc:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
     fd0:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
     fd4:	d1e8      	bne.n	fa8 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
     fd6:	4649      	mov	r1, r9
     fd8:	f105 0030 	add.w	r0, r5, #48	; 0x30
     fdc:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
     fde:	f1bb 0f03 	cmp.w	fp, #3
     fe2:	d103      	bne.n	fec <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
     fe4:	9b01      	ldr	r3, [sp, #4]
     fe6:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
     fe8:	2c00      	cmp	r4, #0
     fea:	dc0f      	bgt.n	100c <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
     fec:	b005      	add	sp, #20
     fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     ff2:	9b01      	ldr	r3, [sp, #4]
     ff4:	42bb      	cmp	r3, r7
     ff6:	dbe3      	blt.n	fc0 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     ff8:	f1bb 0f02 	cmp.w	fp, #2
     ffc:	d8e0      	bhi.n	fc0 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     ffe:	4649      	mov	r1, r9
    1000:	9802      	ldr	r0, [sp, #8]
    1002:	9203      	str	r2, [sp, #12]
			digits++;
    1004:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1006:	47c0      	blx	r8
			digits++;
    1008:	9a03      	ldr	r2, [sp, #12]
    100a:	e7d9      	b.n	fc0 <_printk_dec_ulong+0x44>
			out(' ', ctx);
    100c:	4649      	mov	r1, r9
    100e:	2020      	movs	r0, #32
    1010:	47c0      	blx	r8
    1012:	3c01      	subs	r4, #1
    1014:	e7e8      	b.n	fe8 <_printk_dec_ulong+0x6c>
    1016:	bf00      	nop
    1018:	3b9ac9ff 	.word	0x3b9ac9ff

0000101c <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    101c:	b530      	push	{r4, r5, lr}
    101e:	688a      	ldr	r2, [r1, #8]
	if (!ctx->str || ctx->count >= ctx->max) {
    1020:	680c      	ldr	r4, [r1, #0]
    1022:	1c55      	adds	r5, r2, #1
    1024:	b114      	cbz	r4, 102c <str_out+0x10>
    1026:	684b      	ldr	r3, [r1, #4]
    1028:	4293      	cmp	r3, r2
    102a:	dc01      	bgt.n	1030 <str_out+0x14>
		ctx->count++;
    102c:	608d      	str	r5, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
	}

	return c;
}
    102e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    1030:	3b01      	subs	r3, #1
    1032:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    1034:	bf08      	it	eq
    1036:	2200      	moveq	r2, #0
    1038:	608d      	str	r5, [r1, #8]
    103a:	bf0c      	ite	eq
    103c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    103e:	54a0      	strbne	r0, [r4, r2]
    1040:	e7f5      	b.n	102e <str_out+0x12>
	...

00001044 <__printk_hook_install>:
	_char_out = fn;
    1044:	4b01      	ldr	r3, [pc, #4]	; (104c <__printk_hook_install+0x8>)
    1046:	6018      	str	r0, [r3, #0]
}
    1048:	4770      	bx	lr
    104a:	bf00      	nop
    104c:	200036c4 	.word	0x200036c4

00001050 <_vprintk>:
{
    1050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1054:	b089      	sub	sp, #36	; 0x24
    1056:	461c      	mov	r4, r3
	int long_ctr = 0;
    1058:	f04f 0a00 	mov.w	sl, #0
    105c:	1e53      	subs	r3, r2, #1
{
    105e:	4606      	mov	r6, r0
    1060:	460f      	mov	r7, r1
    1062:	9304      	str	r3, [sp, #16]
	int min_width = -1;
    1064:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    1068:	46d0      	mov	r8, sl
			might_format = 0;
    106a:	2500      	movs	r5, #0
				break;
    106c:	e005      	b.n	107a <_vprintk+0x2a>
		if (!might_format) {
    106e:	b96d      	cbnz	r5, 108c <_vprintk+0x3c>
			if (*fmt != '%') {
    1070:	2825      	cmp	r0, #37	; 0x25
    1072:	f000 8112 	beq.w	129a <_vprintk+0x24a>
				out((int)*fmt, ctx);
    1076:	4639      	mov	r1, r7
    1078:	47b0      	blx	r6
	while (*fmt) {
    107a:	9b04      	ldr	r3, [sp, #16]
    107c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    1080:	9304      	str	r3, [sp, #16]
    1082:	2800      	cmp	r0, #0
    1084:	d1f3      	bne.n	106e <_vprintk+0x1e>
}
    1086:	b009      	add	sp, #36	; 0x24
    1088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    108c:	2864      	cmp	r0, #100	; 0x64
    108e:	d061      	beq.n	1154 <_vprintk+0x104>
    1090:	d819      	bhi.n	10c6 <_vprintk+0x76>
    1092:	2839      	cmp	r0, #57	; 0x39
    1094:	d80a      	bhi.n	10ac <_vprintk+0x5c>
    1096:	2831      	cmp	r0, #49	; 0x31
    1098:	d250      	bcs.n	113c <_vprintk+0xec>
    109a:	282d      	cmp	r0, #45	; 0x2d
    109c:	d03c      	beq.n	1118 <_vprintk+0xc8>
    109e:	2830      	cmp	r0, #48	; 0x30
    10a0:	d03d      	beq.n	111e <_vprintk+0xce>
    10a2:	2825      	cmp	r0, #37	; 0x25
    10a4:	d108      	bne.n	10b8 <_vprintk+0x68>
				out((int)'%', ctx);
    10a6:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    10a8:	47b0      	blx	r6
    10aa:	e7de      	b.n	106a <_vprintk+0x1a>
			switch (*fmt) {
    10ac:	2858      	cmp	r0, #88	; 0x58
    10ae:	f000 8088 	beq.w	11c2 <_vprintk+0x172>
    10b2:	2863      	cmp	r0, #99	; 0x63
    10b4:	f000 80eb 	beq.w	128e <_vprintk+0x23e>
				out((int)'%', ctx);
    10b8:	4639      	mov	r1, r7
    10ba:	2025      	movs	r0, #37	; 0x25
    10bc:	47b0      	blx	r6
				out((int)*fmt, ctx);
    10be:	9b04      	ldr	r3, [sp, #16]
    10c0:	4639      	mov	r1, r7
    10c2:	7818      	ldrb	r0, [r3, #0]
    10c4:	e7f0      	b.n	10a8 <_vprintk+0x58>
			switch (*fmt) {
    10c6:	2870      	cmp	r0, #112	; 0x70
    10c8:	d071      	beq.n	11ae <_vprintk+0x15e>
    10ca:	d806      	bhi.n	10da <_vprintk+0x8a>
    10cc:	2869      	cmp	r0, #105	; 0x69
    10ce:	d041      	beq.n	1154 <_vprintk+0x104>
    10d0:	286c      	cmp	r0, #108	; 0x6c
    10d2:	d03c      	beq.n	114e <_vprintk+0xfe>
    10d4:	2868      	cmp	r0, #104	; 0x68
    10d6:	d0d0      	beq.n	107a <_vprintk+0x2a>
    10d8:	e7ee      	b.n	10b8 <_vprintk+0x68>
    10da:	2875      	cmp	r0, #117	; 0x75
    10dc:	d057      	beq.n	118e <_vprintk+0x13e>
    10de:	d817      	bhi.n	1110 <_vprintk+0xc0>
    10e0:	2873      	cmp	r0, #115	; 0x73
    10e2:	d1e9      	bne.n	10b8 <_vprintk+0x68>
				char *s = va_arg(ap, char *);
    10e4:	6823      	ldr	r3, [r4, #0]
    10e6:	f104 0b04 	add.w	fp, r4, #4
    10ea:	461c      	mov	r4, r3
				while (*s)
    10ec:	4625      	mov	r5, r4
    10ee:	f815 0b01 	ldrb.w	r0, [r5], #1
    10f2:	2800      	cmp	r0, #0
    10f4:	f040 80c0 	bne.w	1278 <_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
    10f8:	f1b8 0f03 	cmp.w	r8, #3
    10fc:	f040 80d6 	bne.w	12ac <_vprintk+0x25c>
					int remaining = min_width - (s - start);
    1100:	1ae4      	subs	r4, r4, r3
    1102:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1106:	2c00      	cmp	r4, #0
    1108:	f300 80bc 	bgt.w	1284 <_vprintk+0x234>
				char *s = va_arg(ap, char *);
    110c:	465c      	mov	r4, fp
    110e:	e7ac      	b.n	106a <_vprintk+0x1a>
			switch (*fmt) {
    1110:	2878      	cmp	r0, #120	; 0x78
    1112:	d056      	beq.n	11c2 <_vprintk+0x172>
    1114:	287a      	cmp	r0, #122	; 0x7a
    1116:	e7de      	b.n	10d6 <_vprintk+0x86>
				padding = PAD_SPACE_AFTER;
    1118:	f04f 0803 	mov.w	r8, #3
    111c:	e7ad      	b.n	107a <_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    111e:	f1b9 0f00 	cmp.w	r9, #0
    1122:	da0e      	bge.n	1142 <_vprintk+0xf2>
    1124:	f1b8 0f00 	cmp.w	r8, #0
    1128:	f000 80bd 	beq.w	12a6 <_vprintk+0x256>
					min_width = *fmt - '0';
    112c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    1130:	f1b8 0f00 	cmp.w	r8, #0
    1134:	bf08      	it	eq
    1136:	f04f 0802 	moveq.w	r8, #2
    113a:	e79e      	b.n	107a <_vprintk+0x2a>
				if (min_width < 0) {
    113c:	f1b9 0f00 	cmp.w	r9, #0
    1140:	dbf4      	blt.n	112c <_vprintk+0xdc>
					min_width = 10 * min_width + *fmt - '0';
    1142:	230a      	movs	r3, #10
    1144:	fb03 0909 	mla	r9, r3, r9, r0
    1148:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    114c:	e7f0      	b.n	1130 <_vprintk+0xe0>
				long_ctr++;
    114e:	f10a 0a01 	add.w	sl, sl, #1
    1152:	e792      	b.n	107a <_vprintk+0x2a>
				if (long_ctr < 2) {
    1154:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    1158:	bfc5      	ittet	gt
    115a:	3407      	addgt	r4, #7
    115c:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    1160:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    1162:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    1164:	bfd4      	ite	le
    1166:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    1168:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    116c:	2d00      	cmp	r5, #0
    116e:	da05      	bge.n	117c <_vprintk+0x12c>
					out((int)'-', ctx);
    1170:	4639      	mov	r1, r7
    1172:	202d      	movs	r0, #45	; 0x2d
    1174:	47b0      	blx	r6
					d = -d;
    1176:	426d      	negs	r5, r5
					min_width--;
    1178:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    117c:	f8cd 9000 	str.w	r9, [sp]
    1180:	4643      	mov	r3, r8
    1182:	462a      	mov	r2, r5
    1184:	4639      	mov	r1, r7
    1186:	4630      	mov	r0, r6
    1188:	f7ff fef8 	bl	f7c <_printk_dec_ulong>
    118c:	e76d      	b.n	106a <_vprintk+0x1a>
				if (long_ctr < 2) {
    118e:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    1192:	bfc5      	ittet	gt
    1194:	3407      	addgt	r4, #7
    1196:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    119a:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    119c:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    119e:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    11a2:	bfcc      	ite	gt
    11a4:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    11a8:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    11aa:	4643      	mov	r3, r8
    11ac:	e7ea      	b.n	1184 <_vprintk+0x134>
				  out('0', ctx);
    11ae:	4639      	mov	r1, r7
    11b0:	2030      	movs	r0, #48	; 0x30
    11b2:	47b0      	blx	r6
				  out('x', ctx);
    11b4:	4639      	mov	r1, r7
    11b6:	2078      	movs	r0, #120	; 0x78
    11b8:	47b0      	blx	r6
				  min_width = 8;
    11ba:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    11be:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    11c2:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    11c6:	bfc7      	ittee	gt
    11c8:	3407      	addgt	r4, #7
    11ca:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    11ce:	6823      	ldrle	r3, [r4, #0]
    11d0:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    11d2:	bfc2      	ittt	gt
    11d4:	f103 0408 	addgt.w	r4, r3, #8
    11d8:	681b      	ldrgt	r3, [r3, #0]
    11da:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    11dc:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    11e0:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    11e4:	bfd8      	it	le
    11e6:	3404      	addle	r4, #4
	int digits = 0;
    11e8:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    11ea:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    11ec:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    11ee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    11f2:	9b05      	ldr	r3, [sp, #20]
    11f4:	ea4f 008b 	mov.w	r0, fp, lsl #2
    11f8:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    11fc:	f010 000f 	ands.w	r0, r0, #15
    1200:	d109      	bne.n	1216 <_vprintk+0x1c6>
    1202:	9b07      	ldr	r3, [sp, #28]
    1204:	b913      	cbnz	r3, 120c <_vprintk+0x1bc>
    1206:	f1bb 0f00 	cmp.w	fp, #0
    120a:	d124      	bne.n	1256 <_vprintk+0x206>
			nibble += nibble > 9 ? 87 : 48;
    120c:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1210:	e007      	b.n	1222 <_vprintk+0x1d2>
	for (; size; size--) {
    1212:	9a06      	ldr	r2, [sp, #24]
    1214:	e7eb      	b.n	11ee <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    1216:	2809      	cmp	r0, #9
    1218:	bf8c      	ite	hi
    121a:	f04f 0c57 	movhi.w	ip, #87	; 0x57
    121e:	f04f 0c30 	movls.w	ip, #48	; 0x30
			out((int)nibble, ctx);
    1222:	4639      	mov	r1, r7
    1224:	4460      	add	r0, ip
    1226:	9206      	str	r2, [sp, #24]
    1228:	47b0      	blx	r6
			digits++;
    122a:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    122c:	9507      	str	r5, [sp, #28]
			digits++;
    122e:	3301      	adds	r3, #1
    1230:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1232:	f1bb 0f00 	cmp.w	fp, #0
    1236:	d1ec      	bne.n	1212 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    1238:	f1b8 0f03 	cmp.w	r8, #3
    123c:	f47f af15 	bne.w	106a <_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    1240:	9b03      	ldr	r3, [sp, #12]
    1242:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1246:	2d00      	cmp	r5, #0
    1248:	f77f af0f 	ble.w	106a <_vprintk+0x1a>
			out(' ', ctx);
    124c:	4639      	mov	r1, r7
    124e:	2020      	movs	r0, #32
    1250:	47b0      	blx	r6
    1252:	3d01      	subs	r5, #1
    1254:	e7f7      	b.n	1246 <_vprintk+0x1f6>
		if (remaining-- <= min_width) {
    1256:	1e53      	subs	r3, r2, #1
    1258:	4591      	cmp	r9, r2
    125a:	9306      	str	r3, [sp, #24]
    125c:	dbe9      	blt.n	1232 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    125e:	f1b8 0f01 	cmp.w	r8, #1
    1262:	d103      	bne.n	126c <_vprintk+0x21c>
				out('0', ctx);
    1264:	4639      	mov	r1, r7
    1266:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1268:	47b0      	blx	r6
    126a:	e7e2      	b.n	1232 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    126c:	f1b8 0f02 	cmp.w	r8, #2
    1270:	d1df      	bne.n	1232 <_vprintk+0x1e2>
				out(' ', ctx);
    1272:	4639      	mov	r1, r7
    1274:	2020      	movs	r0, #32
    1276:	e7f7      	b.n	1268 <_vprintk+0x218>
					out((int)(*s++), ctx);
    1278:	4639      	mov	r1, r7
    127a:	9303      	str	r3, [sp, #12]
    127c:	462c      	mov	r4, r5
    127e:	47b0      	blx	r6
    1280:	9b03      	ldr	r3, [sp, #12]
    1282:	e733      	b.n	10ec <_vprintk+0x9c>
						out(' ', ctx);
    1284:	4639      	mov	r1, r7
    1286:	2020      	movs	r0, #32
    1288:	47b0      	blx	r6
    128a:	3c01      	subs	r4, #1
    128c:	e73b      	b.n	1106 <_vprintk+0xb6>
				out(c, ctx);
    128e:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    1290:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    1292:	4639      	mov	r1, r7
    1294:	47b0      	blx	r6
				int c = va_arg(ap, int);
    1296:	462c      	mov	r4, r5
    1298:	e6e7      	b.n	106a <_vprintk+0x1a>
				long_ctr = 0;
    129a:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    129c:	46a8      	mov	r8, r5
				min_width = -1;
    129e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    12a2:	2501      	movs	r5, #1
    12a4:	e6e9      	b.n	107a <_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    12a6:	f04f 0801 	mov.w	r8, #1
    12aa:	e6e6      	b.n	107a <_vprintk+0x2a>
				char *s = va_arg(ap, char *);
    12ac:	465c      	mov	r4, fp
			might_format = 0;
    12ae:	4605      	mov	r5, r0
    12b0:	e6e3      	b.n	107a <_vprintk+0x2a>
	...

000012b4 <vprintk>:
{
    12b4:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    12b6:	ac02      	add	r4, sp, #8
    12b8:	2300      	movs	r3, #0
    12ba:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    12be:	4602      	mov	r2, r0
    12c0:	460b      	mov	r3, r1
    12c2:	4803      	ldr	r0, [pc, #12]	; (12d0 <vprintk+0x1c>)
    12c4:	4621      	mov	r1, r4
    12c6:	f7ff fec3 	bl	1050 <_vprintk>
}
    12ca:	9801      	ldr	r0, [sp, #4]
    12cc:	b002      	add	sp, #8
    12ce:	bd10      	pop	{r4, pc}
    12d0:	00000f6d 	.word	0x00000f6d

000012d4 <printk>:
{
    12d4:	b40f      	push	{r0, r1, r2, r3}
    12d6:	b507      	push	{r0, r1, r2, lr}
    12d8:	a904      	add	r1, sp, #16
    12da:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    12de:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    12e0:	f7ff ffe8 	bl	12b4 <vprintk>
}
    12e4:	b003      	add	sp, #12
    12e6:	f85d eb04 	ldr.w	lr, [sp], #4
    12ea:	b004      	add	sp, #16
    12ec:	4770      	bx	lr
	...

000012f0 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    12f0:	b40c      	push	{r2, r3}
    12f2:	b530      	push	{r4, r5, lr}
    12f4:	b085      	sub	sp, #20
    12f6:	ab08      	add	r3, sp, #32
	struct str_context ctx = { str, size, 0 };
    12f8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    12fc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;

	va_start(ap, fmt);
    1300:	9300      	str	r3, [sp, #0]
{
    1302:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1304:	2500      	movs	r5, #0
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1306:	a901      	add	r1, sp, #4
    1308:	4806      	ldr	r0, [pc, #24]	; (1324 <snprintk+0x34>)
	struct str_context ctx = { str, size, 0 };
    130a:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    130c:	f7ff fea0 	bl	1050 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    1310:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1314:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1316:	bfb8      	it	lt
    1318:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    131a:	b005      	add	sp, #20
    131c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1320:	b002      	add	sp, #8
    1322:	4770      	bx	lr
    1324:	0000101d 	.word	0x0000101d

00001328 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);

GEN_ABS_SYM_END
    1328:	4770      	bx	lr

0000132a <_GetAvailWriteSpace>:
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    132a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    132c:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
    132e:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1330:	bf9d      	ittte	ls
    1332:	6882      	ldrls	r2, [r0, #8]
    1334:	18d2      	addls	r2, r2, r3
    1336:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
  } else {
    r = RdOff - WrOff - 1u;
    133a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    133e:	bf94      	ite	ls
    1340:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
    1342:	1a58      	subhi	r0, r3, r1
  }
  return r;
}
    1344:	4770      	bx	lr

00001346 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    134a:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    134e:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    1350:	1bf6      	subs	r6, r6, r7
    1352:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    1354:	4296      	cmp	r6, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1356:	4688      	mov	r8, r1
    1358:	4615      	mov	r5, r2
    135a:	4438      	add	r0, r7
  if (Rem > NumBytes) {
    135c:	d905      	bls.n	136a <_WriteNoCheck+0x24>
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    135e:	f7ff f93e 	bl	5de <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    1362:	443d      	add	r5, r7
    pRing->WrOff = NumBytesAtOnce;
    1364:	60e5      	str	r5, [r4, #12]
}
    1366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    136a:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    136c:	1bad      	subs	r5, r5, r6
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    136e:	f7ff f936 	bl	5de <memcpy>
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    1372:	462a      	mov	r2, r5
    1374:	eb08 0106 	add.w	r1, r8, r6
    1378:	6860      	ldr	r0, [r4, #4]
    137a:	f7ff f930 	bl	5de <memcpy>
    137e:	e7f1      	b.n	1364 <_WriteNoCheck+0x1e>

00001380 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    1384:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1386:	4606      	mov	r6, r0
    1388:	4689      	mov	r9, r1
    138a:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    138c:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1390:	6934      	ldr	r4, [r6, #16]
    1392:	68b3      	ldr	r3, [r6, #8]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    1394:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    1396:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1398:	bf28      	it	cs
    139a:	18e4      	addcs	r4, r4, r3
    139c:	3c01      	subs	r4, #1
    139e:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    13a0:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    13a2:	42bc      	cmp	r4, r7
    13a4:	bf28      	it	cs
    13a6:	463c      	movcs	r4, r7
    13a8:	4294      	cmp	r4, r2
    13aa:	bf28      	it	cs
    13ac:	4614      	movcs	r4, r2
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    13ae:	4649      	mov	r1, r9
    13b0:	4428      	add	r0, r5
    13b2:	4622      	mov	r2, r4
    13b4:	f7ff f913 	bl	5de <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    13b8:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    13ba:	4425      	add	r5, r4
      WrOff = 0u;
    13bc:	42ab      	cmp	r3, r5
    13be:	bf08      	it	eq
    13c0:	2500      	moveq	r5, #0
  } while (NumBytes);
    13c2:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    13c4:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    13c6:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    13c8:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    13ca:	d1e1      	bne.n	1390 <_WriteBlocking+0x10>
}
    13cc:	4640      	mov	r0, r8
    13ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000013d4 <_DoInit>:
static void _DoInit(void) {
    13d4:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    13d6:	4c11      	ldr	r4, [pc, #68]	; (141c <_DoInit+0x48>)
  p->aUp[0].sName         = "Terminal";
    13d8:	4a11      	ldr	r2, [pc, #68]	; (1420 <_DoInit+0x4c>)
    13da:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    13dc:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    13de:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    13e2:	4b10      	ldr	r3, [pc, #64]	; (1424 <_DoInit+0x50>)
    13e4:	61e3      	str	r3, [r4, #28]
  p->aDown[0].sName         = "Terminal";
    13e6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    13e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    13ec:	4a0e      	ldr	r2, [pc, #56]	; (1428 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    13ee:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    13f0:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    13f2:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    13f4:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    13f6:	490d      	ldr	r1, [pc, #52]	; (142c <_DoInit+0x58>)
  p->aUp[0].RdOff         = 0u;
    13f8:	62a3      	str	r3, [r4, #40]	; 0x28
  strcpy(&p->acID[7], "RTT");
    13fa:	1de0      	adds	r0, r4, #7
  p->aUp[0].WrOff         = 0u;
    13fc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    13fe:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1400:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1402:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1404:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1406:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1408:	f7ff f8c2 	bl	590 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    140c:	4908      	ldr	r1, [pc, #32]	; (1430 <_DoInit+0x5c>)
    140e:	4620      	mov	r0, r4
    1410:	f7ff f8be 	bl	590 <strcpy>
  p->acID[6] = ' ';
    1414:	2320      	movs	r3, #32
    1416:	71a3      	strb	r3, [r4, #6]
}
    1418:	bd10      	pop	{r4, pc}
    141a:	bf00      	nop
    141c:	20001558 	.word	0x20001558
    1420:	0000c26e 	.word	0x0000c26e
    1424:	20000011 	.word	0x20000011
    1428:	20000001 	.word	0x20000001
    142c:	0000c277 	.word	0x0000c277
    1430:	0000c27b 	.word	0x0000c27b

00001434 <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1436:	4c18      	ldr	r4, [pc, #96]	; (1498 <SEGGER_RTT_WriteNoLock+0x64>)
    1438:	2318      	movs	r3, #24
    143a:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    143e:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1442:	4425      	add	r5, r4
  switch (pRing->Flags) {
    1444:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    1446:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1448:	460f      	mov	r7, r1
    144a:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    144c:	d011      	beq.n	1472 <SEGGER_RTT_WriteNoLock+0x3e>
    144e:	d303      	bcc.n	1458 <SEGGER_RTT_WriteNoLock+0x24>
    1450:	2c02      	cmp	r4, #2
    1452:	d01b      	beq.n	148c <SEGGER_RTT_WriteNoLock+0x58>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    1454:	2400      	movs	r4, #0
    break;
  }
  //
  // Finish up.
  //
  return Status;
    1456:	e00a      	b.n	146e <SEGGER_RTT_WriteNoLock+0x3a>
    Avail = _GetAvailWriteSpace(pRing);
    1458:	4628      	mov	r0, r5
    145a:	f7ff ff66 	bl	132a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    145e:	4286      	cmp	r6, r0
    1460:	d805      	bhi.n	146e <SEGGER_RTT_WriteNoLock+0x3a>
      _WriteNoCheck(pRing, pData, NumBytes);
    1462:	4632      	mov	r2, r6
    1464:	4639      	mov	r1, r7
    1466:	4628      	mov	r0, r5
    1468:	f7ff ff6d 	bl	1346 <_WriteNoCheck>
    146c:	4634      	mov	r4, r6
}
    146e:	4620      	mov	r0, r4
    1470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    1472:	4628      	mov	r0, r5
    1474:	f7ff ff59 	bl	132a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    1478:	4286      	cmp	r6, r0
    147a:	4634      	mov	r4, r6
    147c:	bf28      	it	cs
    147e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    1480:	4622      	mov	r2, r4
    1482:	4639      	mov	r1, r7
    1484:	4628      	mov	r0, r5
    1486:	f7ff ff5e 	bl	1346 <_WriteNoCheck>
    break;
    148a:	e7f0      	b.n	146e <SEGGER_RTT_WriteNoLock+0x3a>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    148c:	4628      	mov	r0, r5
}
    148e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1492:	f7ff bf75 	b.w	1380 <_WriteBlocking>
    1496:	bf00      	nop
    1498:	20001558 	.word	0x20001558

0000149c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    149c:	f7ff bf9a 	b.w	13d4 <_DoInit>

000014a0 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    14a0:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    14a2:	4c11      	ldr	r4, [pc, #68]	; (14e8 <sys_rand32_get+0x48>)
    14a4:	f3bf 8f5b 	dmb	ish
    14a8:	6820      	ldr	r0, [r4, #0]
    14aa:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    14ae:	b960      	cbnz	r0, 14ca <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    14b0:	480e      	ldr	r0, [pc, #56]	; (14ec <sys_rand32_get+0x4c>)
    14b2:	f009 fb8d 	bl	abd0 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    14b6:	f3bf 8f5b 	dmb	ish
    14ba:	e854 3f00 	ldrex	r3, [r4]
    14be:	e844 0200 	strex	r2, r0, [r4]
    14c2:	2a00      	cmp	r2, #0
    14c4:	d1f9      	bne.n	14ba <sys_rand32_get+0x1a>
    14c6:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    14ca:	6843      	ldr	r3, [r0, #4]
    14cc:	2204      	movs	r2, #4
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	eb0d 0102 	add.w	r1, sp, r2
    14d4:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    14d6:	2800      	cmp	r0, #0
    14d8:	da02      	bge.n	14e0 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    14da:	f000 fd05 	bl	1ee8 <_timer_cycle_get_32>
    14de:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    14e0:	9801      	ldr	r0, [sp, #4]
    14e2:	b002      	add	sp, #8
    14e4:	bd10      	pop	{r4, pc}
    14e6:	bf00      	nop
    14e8:	20000414 	.word	0x20000414
    14ec:	0000c282 	.word	0x0000c282

000014f0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
    14f0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	SEGGER_RTT_Init();

	__printk_hook_install(rtt_console_out);
    14f2:	4c05      	ldr	r4, [pc, #20]	; (1508 <rtt_console_init+0x18>)
	SEGGER_RTT_Init();
    14f4:	f7ff ffd2 	bl	149c <SEGGER_RTT_Init>
	__printk_hook_install(rtt_console_out);
    14f8:	4620      	mov	r0, r4
    14fa:	f7ff fda3 	bl	1044 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    14fe:	4620      	mov	r0, r4
    1500:	f7ff f8be 	bl	680 <__stdout_hook_install>

	return 0;
}
    1504:	2000      	movs	r0, #0
    1506:	bd10      	pop	{r4, pc}
    1508:	0000150d 	.word	0x0000150d

0000150c <rtt_console_out>:
{
    150c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	char c = (char)character;
    150e:	a902      	add	r1, sp, #8
{
    1510:	4604      	mov	r4, r0
	char c = (char)character;
    1512:	f801 0d01 	strb.w	r0, [r1, #-1]!
    1516:	f04f 0320 	mov.w	r3, #32
    151a:	f3ef 8511 	mrs	r5, BASEPRI
    151e:	f383 8811 	msr	BASEPRI, r3
	SEGGER_RTT_WriteNoLock(0, &c, 1);
    1522:	2201      	movs	r2, #1
    1524:	2000      	movs	r0, #0
    1526:	f7ff ff85 	bl	1434 <SEGGER_RTT_WriteNoLock>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    152a:	f385 8811 	msr	BASEPRI, r5
}
    152e:	4620      	mov	r0, r4
    1530:	b003      	add	sp, #12
    1532:	bd30      	pop	{r4, r5, pc}

00001534 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1534:	b510      	push	{r4, lr}
	__asm__ volatile(
    1536:	f04f 0320 	mov.w	r3, #32
    153a:	f3ef 8211 	mrs	r2, BASEPRI
    153e:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1542:	4c11      	ldr	r4, [pc, #68]	; (1588 <_m16src_stop+0x54>)
    1544:	7823      	ldrb	r3, [r4, #0]
    1546:	b923      	cbnz	r3, 1552 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1548:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    154c:	f06f 0044 	mvn.w	r0, #68	; 0x44

	/* release resource guard */
	m16src_grd = 0;

	return 0;
}
    1550:	bd10      	pop	{r4, pc}
	if (--m16src_ref) {
    1552:	3b01      	subs	r3, #1
    1554:	b2db      	uxtb	r3, r3
    1556:	7023      	strb	r3, [r4, #0]
    1558:	b123      	cbz	r3, 1564 <_m16src_stop+0x30>
    155a:	f382 8811 	msr	BASEPRI, r2
		return -EBUSY;
    155e:	f06f 000f 	mvn.w	r0, #15
    1562:	e7f5      	b.n	1550 <_m16src_stop+0x1c>
	if (m16src_grd) {
    1564:	4b09      	ldr	r3, [pc, #36]	; (158c <_m16src_stop+0x58>)
    1566:	7818      	ldrb	r0, [r3, #0]
    1568:	2101      	movs	r1, #1
    156a:	b128      	cbz	r0, 1578 <_m16src_stop+0x44>
		m16src_ref++;
    156c:	7021      	strb	r1, [r4, #0]
    156e:	f382 8811 	msr	BASEPRI, r2
		return -EAGAIN;
    1572:	f06f 000a 	mvn.w	r0, #10
    1576:	e7eb      	b.n	1550 <_m16src_stop+0x1c>
	m16src_grd = 1;
    1578:	7019      	strb	r1, [r3, #0]
    157a:	f382 8811 	msr	BASEPRI, r2
	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    157e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1582:	6051      	str	r1, [r2, #4]
	m16src_grd = 0;
    1584:	7018      	strb	r0, [r3, #0]
	return 0;
    1586:	e7e3      	b.n	1550 <_m16src_stop+0x1c>
    1588:	2000041a 	.word	0x2000041a
    158c:	20000419 	.word	0x20000419

00001590 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1590:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1592:	2200      	movs	r2, #0
    1594:	4610      	mov	r0, r2
    1596:	2101      	movs	r1, #1
    1598:	f7ff fb74 	bl	c84 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    159c:	2000      	movs	r0, #0
    159e:	f7ff fb3f 	bl	c20 <_arch_irq_enable>

	return 0;
}
    15a2:	2000      	movs	r0, #0
    15a4:	bd08      	pop	{r3, pc}
	...

000015a8 <_m16src_start>:
{
    15a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    15aa:	f04f 0220 	mov.w	r2, #32
    15ae:	f3ef 8311 	mrs	r3, BASEPRI
    15b2:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    15b6:	4a25      	ldr	r2, [pc, #148]	; (164c <_m16src_start+0xa4>)
    15b8:	7810      	ldrb	r0, [r2, #0]
    15ba:	1c44      	adds	r4, r0, #1
    15bc:	7014      	strb	r4, [r2, #0]
    15be:	b160      	cbz	r0, 15da <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    15c0:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    15c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    15cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    15d0:	bf14      	ite	ne
    15d2:	2000      	movne	r0, #0
    15d4:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    15d8:	e007      	b.n	15ea <_m16src_start+0x42>
	if (m16src_grd) {
    15da:	4d1d      	ldr	r5, [pc, #116]	; (1650 <_m16src_start+0xa8>)
    15dc:	782f      	ldrb	r7, [r5, #0]
    15de:	b12f      	cbz	r7, 15ec <_m16src_start+0x44>
		m16src_ref--;
    15e0:	7010      	strb	r0, [r2, #0]
    15e2:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    15e6:	f06f 000a 	mvn.w	r0, #10
}
    15ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    15ec:	2601      	movs	r6, #1
    15ee:	702e      	strb	r6, [r5, #0]
    15f0:	f383 8811 	msr	BASEPRI, r3
    15f4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    15f8:	b319      	cbz	r1, 1642 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    15fa:	4638      	mov	r0, r7
    15fc:	f7ff fb20 	bl	c40 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1600:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1604:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1608:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    160c:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    160e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1612:	b192      	cbz	r2, 163a <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1614:	2200      	movs	r2, #0
    1616:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    161a:	4a0e      	ldr	r2, [pc, #56]	; (1654 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    161c:	f013 0f01 	tst.w	r3, #1
    1620:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1624:	bf08      	it	eq
    1626:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    162a:	2000      	movs	r0, #0
    162c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1630:	f7ff faf6 	bl	c20 <_arch_irq_enable>
	m16src_grd = 0;
    1634:	2300      	movs	r3, #0
    1636:	702b      	strb	r3, [r5, #0]
    1638:	e7c4      	b.n	15c4 <_m16src_start+0x1c>
			__WFE();
    163a:	bf20      	wfe
			__SEV();
    163c:	bf40      	sev
			__WFE();
    163e:	bf20      	wfe
    1640:	e7e5      	b.n	160e <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1642:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1646:	6026      	str	r6, [r4, #0]
    1648:	e7f4      	b.n	1634 <_m16src_start+0x8c>
    164a:	bf00      	nop
    164c:	2000041a 	.word	0x2000041a
    1650:	20000419 	.word	0x20000419
    1654:	e000e100 	.word	0xe000e100

00001658 <_power_clock_isr>:
{
    1658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    165a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    165e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1660:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1664:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1668:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    166c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1670:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1674:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1678:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    167c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1680:	f1bc 0f00 	cmp.w	ip, #0
    1684:	d003      	beq.n	168e <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    1686:	f04f 0c00 	mov.w	ip, #0
    168a:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	if (hf) {
    168e:	b127      	cbz	r7, 169a <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1694:	2700      	movs	r7, #0
    1696:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    169a:	b13a      	cbz	r2, 16ac <_power_clock_isr+0x54>
    169c:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    169e:	bf41      	itttt	mi
    16a0:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    16a4:	2201      	movmi	r2, #1
    16a6:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    16aa:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    16ac:	b120      	cbz	r0, 16b8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    16ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16b2:	2200      	movs	r2, #0
    16b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    16b8:	b149      	cbz	r1, 16ce <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    16ba:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    16be:	2100      	movs	r1, #0
    16c0:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    16c4:	4628      	mov	r0, r5
    16c6:	f7ff ff35 	bl	1534 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    16ca:	2301      	movs	r3, #1
    16cc:	6163      	str	r3, [r4, #20]
	if (ctto) {
    16ce:	b176      	cbz	r6, 16ee <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    16d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16d4:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    16d6:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    16d8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    16dc:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    16de:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    16e2:	f7ff ff61 	bl	15a8 <_m16src_start>
		if (!err) {
    16e6:	b910      	cbnz	r0, 16ee <_power_clock_isr+0x96>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16e8:	4b01      	ldr	r3, [pc, #4]	; (16f0 <_power_clock_isr+0x98>)
    16ea:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
}
    16ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16f0:	e000e100 	.word	0xe000e100

000016f4 <_k32src_start>:
{
    16f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16f6:	4606      	mov	r6, r0
    16f8:	460c      	mov	r4, r1
	__asm__ volatile(
    16fa:	f04f 0220 	mov.w	r2, #32
    16fe:	f3ef 8311 	mrs	r3, BASEPRI
    1702:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    1706:	4a2c      	ldr	r2, [pc, #176]	; (17b8 <_k32src_start+0xc4>)
    1708:	7815      	ldrb	r5, [r2, #0]
    170a:	b165      	cbz	r5, 1726 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    170c:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    1710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1714:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    1718:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    171c:	bf0c      	ite	eq
    171e:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    1722:	2000      	movne	r0, #0
    1724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1726:	2701      	movs	r7, #1
    1728:	7017      	strb	r7, [r2, #0]
    172a:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    172e:	4628      	mov	r0, r5
    1730:	f7ff fa86 	bl	c40 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1738:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    173a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    173e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1742:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1746:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    174a:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    174c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1750:	b371      	cbz	r1, 17b0 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1752:	0792      	lsls	r2, r2, #30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1754:	4f19      	ldr	r7, [pc, #100]	; (17bc <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1756:	bf58      	it	pl
    1758:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    175a:	f04f 0100 	mov.w	r1, #0
    175e:	f04f 0501 	mov.w	r5, #1
    1762:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    1766:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    176a:	bf58      	it	pl
    176c:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1770:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1774:	f7ff fa54 	bl	c20 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    177c:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    177e:	2218      	movs	r2, #24
    1780:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1784:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1788:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    178c:	f014 0103 	ands.w	r1, r4, #3
    1790:	d1be      	bne.n	1710 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1792:	2010      	movs	r0, #16
    1794:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1798:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    179c:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    179e:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    17a2:	f7ff ff01 	bl	15a8 <_m16src_start>
		if (!err) {
    17a6:	2800      	cmp	r0, #0
    17a8:	d1b2      	bne.n	1710 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17aa:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    17ae:	e7af      	b.n	1710 <_k32src_start+0x1c>
		__WFE();
    17b0:	bf20      	wfe
		__SEV();
    17b2:	bf40      	sev
		__WFE();
    17b4:	bf20      	wfe
    17b6:	e7c9      	b.n	174c <_k32src_start+0x58>
    17b8:	20000418 	.word	0x20000418
    17bc:	e000e100 	.word	0xe000e100

000017c0 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    17c0:	6803      	ldr	r3, [r0, #0]
    17c2:	689b      	ldr	r3, [r3, #8]
{
    17c4:	b510      	push	{r4, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    17c6:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    17c8:	6883      	ldr	r3, [r0, #8]
    17ca:	68da      	ldr	r2, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    17cc:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    17ce:	fa22 f300 	lsr.w	r3, r2, r0
    17d2:	07db      	lsls	r3, r3, #31
    17d4:	d507      	bpl.n	17e6 <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    17d6:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    17da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    17de:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    17e2:	428b      	cmp	r3, r1
    17e4:	d004      	beq.n	17f0 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    17e6:	3001      	adds	r0, #1
    17e8:	2808      	cmp	r0, #8
    17ea:	d1f0      	bne.n	17ce <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    17ec:	f06f 0012 	mvn.w	r0, #18
}
    17f0:	bd10      	pop	{r4, pc}

000017f2 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    17f2:	6800      	ldr	r0, [r0, #0]
    17f4:	6880      	ldr	r0, [r0, #8]
    17f6:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    17f8:	b941      	cbnz	r1, 180c <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    17fa:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    17fe:	fa21 f202 	lsr.w	r2, r1, r2
    1802:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    1806:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1808:	2000      	movs	r0, #0
    180a:	4770      	bx	lr
		*value = gpio->IN;
    180c:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1810:	e7f9      	b.n	1806 <gpio_nrf5_read+0x14>

00001812 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1812:	6800      	ldr	r0, [r0, #0]
    1814:	6880      	ldr	r0, [r0, #8]
    1816:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1818:	b951      	cbnz	r1, 1830 <gpio_nrf5_write+0x1e>
    181a:	2101      	movs	r1, #1
    181c:	fa01 f202 	lsl.w	r2, r1, r2
		if (value) { /* 1 */
    1820:	b11b      	cbz	r3, 182a <gpio_nrf5_write+0x18>
			gpio->OUTSET = BIT(pin);
    1822:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    1826:	2000      	movs	r0, #0
    1828:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    182a:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    182e:	e7fa      	b.n	1826 <gpio_nrf5_write+0x14>
		gpio->OUT = value;
    1830:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    1834:	e7f7      	b.n	1826 <gpio_nrf5_write+0x14>

00001836 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1836:	6883      	ldr	r3, [r0, #8]
{
    1838:	b510      	push	{r4, lr}
    183a:	6818      	ldr	r0, [r3, #0]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    183c:	b16a      	cbz	r2, 185a <gpio_nrf5_manage_callback+0x24>
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;

	if (!list->tail) {
    183e:	685a      	ldr	r2, [r3, #4]
	node->next = list->head;
    1840:	6008      	str	r0, [r1, #0]
	list->head = node;
    1842:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    1844:	b902      	cbnz	r2, 1848 <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    1846:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    1848:	2000      	movs	r0, #0
    184a:	bd10      	pop	{r4, pc}
		}
	} else {
		prev_node->next = node->next;

		/* Was node the tail? */
		if (list->tail == node) {
    184c:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    184e:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    1850:	bf08      	it	eq
    1852:	605a      	streq	r2, [r3, #4]
    1854:	e00d      	b.n	1872 <gpio_nrf5_manage_callback+0x3c>
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1856:	4602      	mov	r2, r0
    1858:	6800      	ldr	r0, [r0, #0]
    185a:	2800      	cmp	r0, #0
    185c:	d0f4      	beq.n	1848 <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    185e:	4288      	cmp	r0, r1
    1860:	d1f9      	bne.n	1856 <gpio_nrf5_manage_callback+0x20>
    1862:	6808      	ldr	r0, [r1, #0]
    1864:	685c      	ldr	r4, [r3, #4]
	if (!prev_node) {
    1866:	2a00      	cmp	r2, #0
    1868:	d1f0      	bne.n	184c <gpio_nrf5_manage_callback+0x16>
		if (list->tail == node) {
    186a:	42a1      	cmp	r1, r4
		list->head = node->next;
    186c:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    186e:	d100      	bne.n	1872 <gpio_nrf5_manage_callback+0x3c>
			list->tail = list->head;
    1870:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    1872:	2300      	movs	r3, #0
    1874:	600b      	str	r3, [r1, #0]
    1876:	e7e7      	b.n	1848 <gpio_nrf5_manage_callback+0x12>

00001878 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    187a:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    187c:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    187e:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1880:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1882:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1884:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1886:	b9a1      	cbnz	r1, 18b2 <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    1888:	4621      	mov	r1, r4
    188a:	f7ff ff99 	bl	17c0 <gpiote_find_channel>
		if (i < 0) {
    188e:	2800      	cmp	r0, #0
    1890:	db0e      	blt.n	18b0 <gpio_nrf5_enable_callback+0x38>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    1892:	68ba      	ldr	r2, [r7, #8]
    1894:	2301      	movs	r3, #1
    1896:	fa03 f404 	lsl.w	r4, r3, r4
    189a:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    189c:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    18a0:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    18a4:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    18a6:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    18aa:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    18ae:	4628      	mov	r0, r5
}
    18b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    18b2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    18b6:	e7fb      	b.n	18b0 <gpio_nrf5_enable_callback+0x38>

000018b8 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    18b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ba:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18bc:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    18be:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18c0:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    18c2:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18c4:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    18c6:	b989      	cbnz	r1, 18ec <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    18c8:	4621      	mov	r1, r4
    18ca:	f7ff ff79 	bl	17c0 <gpiote_find_channel>
		if (i < 0) {
    18ce:	2800      	cmp	r0, #0
    18d0:	db0b      	blt.n	18ea <gpio_nrf5_disable_callback+0x32>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    18d2:	68b2      	ldr	r2, [r6, #8]
    18d4:	2301      	movs	r3, #1
    18d6:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    18da:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    18de:	ea22 0404 	bic.w	r4, r2, r4
    18e2:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    18e4:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    18e8:	4628      	mov	r0, r5
}
    18ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    18ec:	f06f 0022 	mvn.w	r0, #34	; 0x22
    18f0:	e7fb      	b.n	18ea <gpio_nrf5_disable_callback+0x32>

000018f2 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    18f2:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    18f4:	2200      	movs	r2, #0
    18f6:	2101      	movs	r1, #1
    18f8:	2006      	movs	r0, #6
    18fa:	f7ff f9c3 	bl	c84 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    18fe:	2006      	movs	r0, #6
    1900:	f7ff f98e 	bl	c20 <_arch_irq_enable>

	return 0;
}
    1904:	2000      	movs	r0, #0
    1906:	bd08      	pop	{r3, pc}

00001908 <gpio_nrf5_port_isr>:
{
    1908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    190a:	6803      	ldr	r3, [r0, #0]
{
    190c:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    190e:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1910:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1912:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1914:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    1916:	461f      	mov	r7, r3
			gpiote->EVENTS_IN[i] = 0;
    1918:	461d      	mov	r5, r3
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    191a:	f04f 0c01 	mov.w	ip, #1
    191e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    1922:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    1926:	b141      	cbz	r1, 193a <gpio_nrf5_port_isr+0x32>
			gpiote->EVENTS_IN[i] = 0;
    1928:	f8c2 5100 	str.w	r5, [r2, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    192c:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    1930:	f3c1 2104 	ubfx	r1, r1, #8, #5
    1934:	fa0c f101 	lsl.w	r1, ip, r1
    1938:	430f      	orrs	r7, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    193a:	3301      	adds	r3, #1
    193c:	2b08      	cmp	r3, #8
    193e:	d1ee      	bne.n	191e <gpio_nrf5_port_isr+0x16>
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1940:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    1942:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1944:	f7ff f97c 	bl	c40 <_arch_irq_disable>
    1948:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    194a:	b15c      	cbz	r4, 1964 <gpio_nrf5_port_isr+0x5c>
	enabled_int = int_status & data->pin_callback_enables;
    194c:	403d      	ands	r5, r7
		if (cb->pin_mask & pins) {
    194e:	68a3      	ldr	r3, [r4, #8]
    1950:	421d      	tst	r5, r3
    1952:	d004      	beq.n	195e <gpio_nrf5_port_isr+0x56>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1954:	6863      	ldr	r3, [r4, #4]
    1956:	462a      	mov	r2, r5
    1958:	4621      	mov	r1, r4
    195a:	4630      	mov	r0, r6
    195c:	4798      	blx	r3
	return node->next;
    195e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1960:	2c00      	cmp	r4, #0
    1962:	d1f4      	bne.n	194e <gpio_nrf5_port_isr+0x46>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1964:	2006      	movs	r0, #6
}
    1966:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    196a:	f7ff b959 	b.w	c20 <_arch_irq_enable>
	...

00001970 <gpio_nrf5_config>:
{
    1970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1974:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1976:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1978:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    197a:	6892      	ldr	r2, [r2, #8]
{
    197c:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    197e:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1980:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1982:	b119      	cbz	r1, 198c <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    1984:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    198c:	f403 7140 	and.w	r1, r3, #768	; 0x300
    1990:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1994:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1998:	f3c3 3281 	ubfx	r2, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    199c:	f403 3c40 	and.w	ip, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    19a0:	d055      	beq.n	1a4e <gpio_nrf5_config+0xde>
		u8_t pull = GPIO_PULL_DISABLE;
    19a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    19a6:	bf0c      	ite	eq
    19a8:	2104      	moveq	r1, #4
    19aa:	2100      	movne	r1, #0
			sense = GPIO_SENSE_DISABLE;
    19ac:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
    19b0:	eb02 028e 	add.w	r2, r2, lr, lsl #2
    19b4:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 1a78 <gpio_nrf5_config+0x108>
    19b8:	bf08      	it	eq
    19ba:	f04f 0c00 	moveq.w	ip, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    19be:	f013 0f01 	tst.w	r3, #1
    19c2:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    19c6:	f504 7ee0 	add.w	lr, r4, #448	; 0x1c0
    19ca:	d04b      	beq.n	1a64 <gpio_nrf5_config+0xf4>
			if (pull == GPIO_PULL_UP) {
    19cc:	290c      	cmp	r1, #12
    19ce:	d140      	bne.n	1a52 <gpio_nrf5_config+0xe2>
				gpio->OUTSET = BIT(pin);
    19d0:	f04f 0c01 	mov.w	ip, #1
    19d4:	fa0c fc04 	lsl.w	ip, ip, r4
    19d8:	f8c0 c508 	str.w	ip, [r0, #1288]	; 0x508
					      GPIO_INPUT_DISCONNECT |
    19dc:	f042 0203 	orr.w	r2, r2, #3
    19e0:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    19e2:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	if (flags & GPIO_INT) {
    19e6:	f013 0002 	ands.w	r0, r3, #2
    19ea:	d0cd      	beq.n	1988 <gpio_nrf5_config+0x18>
		if (flags & GPIO_INT_EDGE) {
    19ec:	0699      	lsls	r1, r3, #26
    19ee:	d5c9      	bpl.n	1984 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    19f0:	065a      	lsls	r2, r3, #25
    19f2:	d43b      	bmi.n	1a6c <gpio_nrf5_config+0xfc>
				config |= GPIOTE_CFG_POL_L2H;
    19f4:	f013 0f04 	tst.w	r3, #4
    19f8:	bf0c      	ite	eq
    19fa:	f44f 3800 	moveq.w	r8, #131072	; 0x20000
    19fe:	f44f 3880 	movne.w	r8, #65536	; 0x10000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1a02:	68f8      	ldr	r0, [r7, #12]
    1a04:	f7fe fc48 	bl	298 <__popcountsi2>
    1a08:	2808      	cmp	r0, #8
    1a0a:	d032      	beq.n	1a72 <gpio_nrf5_config+0x102>
		int i = gpiote_find_channel(dev, pin);
    1a0c:	4621      	mov	r1, r4
    1a0e:	4630      	mov	r0, r6
    1a10:	f7ff fed6 	bl	17c0 <gpiote_find_channel>
		if (i < 0) {
    1a14:	2800      	cmp	r0, #0
    1a16:	68fb      	ldr	r3, [r7, #12]
    1a18:	da08      	bge.n	1a2c <gpio_nrf5_config+0xbc>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1a1a:	43da      	mvns	r2, r3
    1a1c:	fa92 f0a2 	rbit	r0, r2
    1a20:	2a00      	cmp	r2, #0
    1a22:	fab0 f080 	clz	r0, r0
    1a26:	bf08      	it	eq
    1a28:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    1a2c:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    1a2e:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    1a30:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    1a34:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    1a36:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    1a3a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    1a3e:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    1a40:	ea44 0408 	orr.w	r4, r4, r8
		data->gpiote_chan_mask |= BIT(i);
    1a44:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    1a46:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    1a4a:	2000      	movs	r0, #0
    1a4c:	e79c      	b.n	1988 <gpio_nrf5_config+0x18>
			pull = GPIO_PULL_UP;
    1a4e:	210c      	movs	r1, #12
    1a50:	e7ac      	b.n	19ac <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    1a52:	2904      	cmp	r1, #4
				gpio->OUTCLR = BIT(pin);
    1a54:	bf02      	ittt	eq
    1a56:	f04f 0c01 	moveq.w	ip, #1
    1a5a:	fa0c fc04 	lsleq.w	ip, ip, r4
    1a5e:	f8c0 c50c 	streq.w	ip, [r0, #1292]	; 0x50c
    1a62:	e7bb      	b.n	19dc <gpio_nrf5_config+0x6c>
					      drive_strength[ds_low][ds_high] |
    1a64:	430a      	orrs	r2, r1
    1a66:	ea42 020c 	orr.w	r2, r2, ip
    1a6a:	e7ba      	b.n	19e2 <gpio_nrf5_config+0x72>
				config |= GPIOTE_CFG_POL_TOGG;
    1a6c:	f44f 3840 	mov.w	r8, #196608	; 0x30000
    1a70:	e7c7      	b.n	1a02 <gpio_nrf5_config+0x92>
			return -EIO;
    1a72:	f06f 0004 	mvn.w	r0, #4
    1a76:	e787      	b.n	1988 <gpio_nrf5_config+0x18>
    1a78:	0000c2bc 	.word	0x0000c2bc

00001a7c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a7c:	6803      	ldr	r3, [r0, #0]
    1a7e:	689b      	ldr	r3, [r3, #8]
    1a80:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1a82:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    1a86:	b132      	cbz	r2, 1a96 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1a88:	2000      	movs	r0, #0
    1a8a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    1a8e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1a92:	700b      	strb	r3, [r1, #0]

	return 0;
    1a94:	4770      	bx	lr
		return -1;
    1a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1a9a:	4770      	bx	lr

00001a9c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a9c:	6803      	ldr	r3, [r0, #0]
    1a9e:	689b      	ldr	r3, [r3, #8]
    1aa0:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1aa2:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1aa6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    1aaa:	2a00      	cmp	r2, #0
    1aac:	d0fb      	beq.n	1aa6 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    1aae:	2200      	movs	r2, #0
    1ab0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1ab4:	4608      	mov	r0, r1
    1ab6:	4770      	bx	lr

00001ab8 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1ab8:	6803      	ldr	r3, [r0, #0]
    1aba:	689b      	ldr	r3, [r3, #8]
    1abc:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    1abe:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    1ac2:	b118      	cbz	r0, 1acc <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1ac4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1ac8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1acc:	f000 000f 	and.w	r0, r0, #15
    1ad0:	4770      	bx	lr
	...

00001ad4 <uart_nrf5_init>:
{
    1ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1ad6:	6803      	ldr	r3, [r0, #0]
    1ad8:	689b      	ldr	r3, [r3, #8]
{
    1ada:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1adc:	4818      	ldr	r0, [pc, #96]	; (1b40 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1ade:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1ae0:	f009 f876 	bl	abd0 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1ae4:	6843      	ldr	r3, [r0, #4]
    1ae6:	4606      	mov	r6, r0
    1ae8:	681f      	ldr	r7, [r3, #0]
    1aea:	2206      	movs	r2, #6
    1aec:	f240 1301 	movw	r3, #257	; 0x101
    1af0:	2100      	movs	r1, #0
    1af2:	47b8      	blx	r7
    1af4:	6873      	ldr	r3, [r6, #4]
    1af6:	681f      	ldr	r7, [r3, #0]
    1af8:	2300      	movs	r3, #0
    1afa:	4619      	mov	r1, r3
    1afc:	2208      	movs	r2, #8
    1afe:	4630      	mov	r0, r6
    1b00:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1b02:	2306      	movs	r3, #6
    1b04:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1b08:	2308      	movs	r3, #8
    1b0a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1b0e:	68ab      	ldr	r3, [r5, #8]
    1b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    1b14:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1b16:	682b      	ldr	r3, [r5, #0]
    1b18:	689b      	ldr	r3, [r3, #8]
    1b1a:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1b1c:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1b20:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1b24:	2304      	movs	r3, #4
    1b26:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1b2a:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1b2c:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1b2e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1b32:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1b36:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1b38:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1b3a:	4b02      	ldr	r3, [pc, #8]	; (1b44 <uart_nrf5_init+0x70>)
    1b3c:	606b      	str	r3, [r5, #4]
}
    1b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b40:	0000c324 	.word	0x0000c324
    1b44:	0000c33c 	.word	0x0000c33c

00001b48 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1b4c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1b4e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1b50:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1b52:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1b54:	440a      	add	r2, r1
	s = &rng->rand[first];
    1b56:	4406      	add	r6, r0
	if (first <= last) {
    1b58:	d81f      	bhi.n	1b9a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1b5a:	1ae4      	subs	r4, r4, r3
    1b5c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1b5e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1b60:	bf3e      	ittt	cc
    1b62:	1a64      	subcc	r4, r4, r1
    1b64:	b2e7      	uxtbcc	r7, r4
    1b66:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1b68:	4423      	add	r3, r4
		octets -= avail;
    1b6a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1b6e:	bf28      	it	cs
    1b70:	2700      	movcs	r7, #0
		first += avail;
    1b72:	b2db      	uxtb	r3, r3
		octets -= avail;
    1b74:	b2c9      	uxtb	r1, r1
    1b76:	4434      	add	r4, r6

		while (avail--) {
    1b78:	42a6      	cmp	r6, r4
    1b7a:	d109      	bne.n	1b90 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1b7c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1b7e:	7843      	ldrb	r3, [r0, #1]
    1b80:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1b82:	bf82      	ittt	hi
    1b84:	4b20      	ldrhi	r3, [pc, #128]	; (1c08 <get+0xc0>)
    1b86:	2201      	movhi	r2, #1
    1b88:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1b8a:	4608      	mov	r0, r1
    1b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1b90:	f816 5b01 	ldrb.w	r5, [r6], #1
    1b94:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1b98:	e7ee      	b.n	1b78 <get+0x30>
		avail = rng->count - first;
    1b9a:	7805      	ldrb	r5, [r0, #0]
    1b9c:	1aed      	subs	r5, r5, r3
    1b9e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1ba0:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1ba2:	bf3f      	itttt	cc
    1ba4:	1a67      	subcc	r7, r4, r1
    1ba6:	19ed      	addcc	r5, r5, r7
    1ba8:	b2ef      	uxtbcc	r7, r5
    1baa:	460d      	movcc	r5, r1
			first += avail;
    1bac:	bf38      	it	cc
    1bae:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1bb0:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1bb4:	bf32      	itee	cc
    1bb6:	b2db      	uxtbcc	r3, r3
    1bb8:	4627      	movcs	r7, r4
			first = 0;
    1bba:	2300      	movcs	r3, #0
		octets -= avail;
    1bbc:	b2c9      	uxtb	r1, r1
    1bbe:	4694      	mov	ip, r2
    1bc0:	eb06 0e05 	add.w	lr, r6, r5
		while (avail--) {
    1bc4:	4576      	cmp	r6, lr
    1bc6:	d119      	bne.n	1bfc <get+0xb4>
    1bc8:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    1bca:	2900      	cmp	r1, #0
    1bcc:	d0d6      	beq.n	1b7c <get+0x34>
    1bce:	2c00      	cmp	r4, #0
    1bd0:	d0d4      	beq.n	1b7c <get+0x34>
			if (octets < last) {
    1bd2:	428c      	cmp	r4, r1
    1bd4:	bf8a      	itet	hi
    1bd6:	460b      	movhi	r3, r1
    1bd8:	4623      	movls	r3, r4
				remaining = last - octets;
    1bda:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    1bdc:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    1be0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    1be4:	bf8c      	ite	hi
    1be6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    1be8:	2700      	movls	r7, #0
			octets -= last;
    1bea:	b2c9      	uxtb	r1, r1
    1bec:	18f4      	adds	r4, r6, r3
			while (last--) {
    1bee:	42a6      	cmp	r6, r4
    1bf0:	d0c4      	beq.n	1b7c <get+0x34>
				*(--d) = *s++;
    1bf2:	f816 5b01 	ldrb.w	r5, [r6], #1
    1bf6:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1bfa:	e7f8      	b.n	1bee <get+0xa6>
			*(--d) = *s++;
    1bfc:	f816 8b01 	ldrb.w	r8, [r6], #1
    1c00:	f80c 8d01 	strb.w	r8, [ip, #-1]!
    1c04:	e7de      	b.n	1bc4 <get+0x7c>
    1c06:	bf00      	nop
    1c08:	4000d000 	.word	0x4000d000

00001c0c <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1c0c:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1c0e:	b1d0      	cbz	r0, 1c46 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1c10:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1c12:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1c14:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1c16:	1c53      	adds	r3, r2, #1
    1c18:	b2db      	uxtb	r3, r3
		last = 0;
    1c1a:	429d      	cmp	r5, r3
    1c1c:	bf08      	it	eq
    1c1e:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1c20:	429c      	cmp	r4, r3
    1c22:	d010      	beq.n	1c46 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1c24:	b161      	cbz	r1, 1c40 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1c26:	490a      	ldr	r1, [pc, #40]	; (1c50 <isr+0x44>)
    1c28:	4402      	add	r2, r0
    1c2a:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1c2e:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1c30:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1c32:	3301      	adds	r3, #1
    1c34:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1c36:	429d      	cmp	r5, r3
    1c38:	bf08      	it	eq
    1c3a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1c3c:	429c      	cmp	r4, r3
    1c3e:	d005      	beq.n	1c4c <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1c40:	f06f 000f 	mvn.w	r0, #15
}
    1c44:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1c46:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1c4a:	e7fb      	b.n	1c44 <isr+0x38>
		return 0;
    1c4c:	2000      	movs	r0, #0
    1c4e:	e7f9      	b.n	1c44 <isr+0x38>
    1c50:	4000d000 	.word	0x4000d000

00001c54 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1c54:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1c56:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1c58:	2201      	movs	r2, #1
    1c5a:	4611      	mov	r1, r2
    1c5c:	4620      	mov	r0, r4
    1c5e:	f009 fba1 	bl	b3a4 <_impl_k_sem_init>
    1c62:	f104 0018 	add.w	r0, r4, #24
    1c66:	2201      	movs	r2, #1
    1c68:	2100      	movs	r1, #0
    1c6a:	f009 fb9b 	bl	b3a4 <_impl_k_sem_init>
	rng->threshold = threshold;
    1c6e:	2304      	movs	r3, #4
    1c70:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1c74:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1c76:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1c78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1c7c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1c7e:	4b11      	ldr	r3, [pc, #68]	; (1cc4 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1c80:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1c84:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1c86:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1c8a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1c8e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1c92:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1c96:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1c9a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1c9e:	f042 0201 	orr.w	r2, r2, #1
    1ca2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1ca6:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1ca8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1cac:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1cae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1cb2:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1cb4:	462a      	mov	r2, r5
    1cb6:	f7fe ffe5 	bl	c84 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1cba:	4630      	mov	r0, r6
    1cbc:	f7fe ffb0 	bl	c20 <_arch_irq_enable>

	return 0;
}
    1cc0:	4628      	mov	r0, r5
    1cc2:	bd70      	pop	{r4, r5, r6, pc}
    1cc4:	4000d000 	.word	0x4000d000

00001cc8 <isr_rand>:
{
    1cc8:	b570      	push	{r4, r5, r6, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1cca:	4c13      	ldr	r4, [pc, #76]	; (1d18 <isr_rand+0x50>)
    1ccc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    1cd0:	b15b      	cbz	r3, 1cea <isr_rand+0x22>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1cd2:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1cd4:	2101      	movs	r1, #1
    1cd6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1cda:	f7ff ff97 	bl	1c0c <isr>
		if (ret != -EBUSY) {
    1cde:	f110 0f10 	cmn.w	r0, #16
    1ce2:	d103      	bne.n	1cec <isr_rand+0x24>
		NRF_RNG->EVENTS_VALRDY = 0;
    1ce4:	2300      	movs	r3, #0
    1ce6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
}
    1cea:	bd70      	pop	{r4, r5, r6, pc}
			ret = isr((struct rand *)dev_data->thr,
    1cec:	3037      	adds	r0, #55	; 0x37
    1cee:	bf14      	ite	ne
    1cf0:	2100      	movne	r1, #0
    1cf2:	2101      	moveq	r1, #1
    1cf4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1cf8:	f7ff ff88 	bl	1c0c <isr>
    1cfc:	4606      	mov	r6, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1cfe:	f105 0018 	add.w	r0, r5, #24
    1d02:	f009 fb59 	bl	b3b8 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1d06:	2300      	movs	r3, #0
		if (ret != -EBUSY) {
    1d08:	3610      	adds	r6, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1d0a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1d0e:	bf1c      	itt	ne
    1d10:	2301      	movne	r3, #1
    1d12:	6063      	strne	r3, [r4, #4]
}
    1d14:	e7e9      	b.n	1cea <isr_rand+0x22>
    1d16:	bf00      	nop
    1d18:	4000d000 	.word	0x4000d000

00001d1c <entropy_nrf5_get_entropy>:
{
    1d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1d20:	6885      	ldr	r5, [r0, #8]
{
    1d22:	460f      	mov	r7, r1
    1d24:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1d26:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1d2a:	b914      	cbnz	r4, 1d32 <entropy_nrf5_get_entropy+0x16>
}
    1d2c:	4620      	mov	r0, r4
    1d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d32:	2cff      	cmp	r4, #255	; 0xff
    1d34:	4623      	mov	r3, r4
    1d36:	bf28      	it	cs
    1d38:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1d3a:	1ae4      	subs	r4, r4, r3
    1d3c:	b2de      	uxtb	r6, r3
    1d3e:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1d40:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1d48:	4628      	mov	r0, r5
    1d4a:	f009 fb99 	bl	b480 <_impl_k_sem_take>
    1d4e:	4631      	mov	r1, r6
    1d50:	463a      	mov	r2, r7
    1d52:	4648      	mov	r0, r9
    1d54:	f7ff fef8 	bl	1b48 <get>
    1d58:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1d5a:	4628      	mov	r0, r5
    1d5c:	f009 fb2c 	bl	b3b8 <_impl_k_sem_give>
			if (len8) {
    1d60:	2e00      	cmp	r6, #0
    1d62:	d0e2      	beq.n	1d2a <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1d68:	4640      	mov	r0, r8
    1d6a:	f009 fb89 	bl	b480 <_impl_k_sem_take>
    1d6e:	e7e9      	b.n	1d44 <entropy_nrf5_get_entropy+0x28>

00001d70 <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    1d70:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    1d72:	4802      	ldr	r0, [pc, #8]	; (1d7c <entropy_get_entropy_isr+0xc>)
    1d74:	460a      	mov	r2, r1
    1d76:	4619      	mov	r1, r3
    1d78:	f7ff bee6 	b.w	1b48 <get>
    1d7c:	20000468 	.word	0x20000468

00001d80 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1d80:	4b08      	ldr	r3, [pc, #32]	; (1da4 <rtc_compare_set+0x24>)
    1d82:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1d86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1d8a:	1ac0      	subs	r0, r0, r3
    1d8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d90:	4b05      	ldr	r3, [pc, #20]	; (1da8 <rtc_compare_set+0x28>)
    1d92:	3802      	subs	r0, #2
    1d94:	4298      	cmp	r0, r3
    1d96:	bf82      	ittt	hi
    1d98:	4b04      	ldrhi	r3, [pc, #16]	; (1dac <rtc_compare_set+0x2c>)
    1d9a:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1d9e:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
	    (((rtc_ticks - rtc_now) & RTC_MASK) > RTC_HALF)) {
		NVIC_SetPendingIRQ(NRF5_IRQ_RTC1_IRQn);
	}
}
    1da2:	4770      	bx	lr
    1da4:	40011000 	.word	0x40011000
    1da8:	007ffffd 	.word	0x007ffffd
    1dac:	e000e100 	.word	0xe000e100

00001db0 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1db0:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1db2:	4b12      	ldr	r3, [pc, #72]	; (1dfc <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1db4:	4c12      	ldr	r4, [pc, #72]	; (1e00 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1db6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1dba:	6822      	ldr	r2, [r4, #0]
    1dbc:	1a80      	subs	r0, r0, r2
    1dbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1dc2:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1dc6:	d911      	bls.n	1dec <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1dc8:	490e      	ldr	r1, [pc, #56]	; (1e04 <rtc_announce_set_next+0x54>)
    1dca:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1dcc:	f240 1347 	movw	r3, #327	; 0x147
    1dd0:	fbb0 f0f3 	udiv	r0, r0, r3
    1dd4:	4288      	cmp	r0, r1
    1dd6:	bf28      	it	cs
    1dd8:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1dda:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1dde:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1de2:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1de4:	4b08      	ldr	r3, [pc, #32]	; (1e08 <rtc_announce_set_next+0x58>)
    1de6:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1de8:	f009 fb72 	bl	b4d0 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1dec:	6820      	ldr	r0, [r4, #0]
}
    1dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1df2:	f200 1047 	addw	r0, r0, #327	; 0x147
    1df6:	f7ff bfc3 	b.w	1d80 <rtc_compare_set>
    1dfa:	bf00      	nop
    1dfc:	40011000 	.word	0x40011000
    1e00:	20000480 	.word	0x20000480
    1e04:	2000047c 	.word	0x2000047c
    1e08:	20003914 	.word	0x20003914

00001e0c <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1e0c:	4b02      	ldr	r3, [pc, #8]	; (1e18 <rtc1_nrf5_isr+0xc>)
    1e0e:	2200      	movs	r2, #0
    1e10:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1e14:	f7ff bfcc 	b.w	1db0 <rtc_announce_set_next>
    1e18:	40011000 	.word	0x40011000

00001e1c <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1e1c:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1e20:	4298      	cmp	r0, r3
    1e22:	bf28      	it	cs
    1e24:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1e26:	4b05      	ldr	r3, [pc, #20]	; (1e3c <_timer_idle_enter+0x20>)
    1e28:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1e2a:	4b05      	ldr	r3, [pc, #20]	; (1e40 <_timer_idle_enter+0x24>)
    1e2c:	681b      	ldr	r3, [r3, #0]
    1e2e:	f240 1247 	movw	r2, #327	; 0x147
    1e32:	fb02 3000 	mla	r0, r2, r0, r3
    1e36:	f7ff bfa3 	b.w	1d80 <rtc_compare_set>
    1e3a:	bf00      	nop
    1e3c:	2000047c 	.word	0x2000047c
    1e40:	20000480 	.word	0x20000480

00001e44 <_timer_idle_exit>:
{
    1e44:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1e46:	4b07      	ldr	r3, [pc, #28]	; (1e64 <_timer_idle_exit+0x20>)
    1e48:	2200      	movs	r2, #0
    1e4a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e4e:	4b06      	ldr	r3, [pc, #24]	; (1e68 <_timer_idle_exit+0x24>)
    1e50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1e58:	f7ff ffaa 	bl	1db0 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1e5c:	4b03      	ldr	r3, [pc, #12]	; (1e6c <_timer_idle_exit+0x28>)
    1e5e:	2201      	movs	r2, #1
    1e60:	601a      	str	r2, [r3, #0]
}
    1e62:	bd08      	pop	{r3, pc}
    1e64:	40011000 	.word	0x40011000
    1e68:	e000e100 	.word	0xe000e100
    1e6c:	2000047c 	.word	0x2000047c

00001e70 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1e72:	4818      	ldr	r0, [pc, #96]	; (1ed4 <_sys_clock_driver_init+0x64>)
    1e74:	f008 feac 	bl	abd0 <device_get_binding>
	if (!clock) {
    1e78:	b348      	cbz	r0, 1ece <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1e7a:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1e7c:	4d16      	ldr	r5, [pc, #88]	; (1ed8 <_sys_clock_driver_init+0x68>)
    1e7e:	681b      	ldr	r3, [r3, #0]
    1e80:	2101      	movs	r1, #1
    1e82:	4798      	blx	r3
	rtc_past = 0;
    1e84:	4b15      	ldr	r3, [pc, #84]	; (1edc <_sys_clock_driver_init+0x6c>)
    1e86:	2400      	movs	r4, #0
    1e88:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1e8a:	4b15      	ldr	r3, [pc, #84]	; (1ee0 <_sys_clock_driver_init+0x70>)
    1e8c:	2601      	movs	r6, #1
    1e8e:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1e90:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1e94:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1e98:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1ea0:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1ea4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1ea8:	4b0e      	ldr	r3, [pc, #56]	; (1ee4 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1eaa:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1eae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1eb2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1eb6:	4631      	mov	r1, r6
    1eb8:	4622      	mov	r2, r4
    1eba:	2011      	movs	r0, #17
    1ebc:	f7fe fee2 	bl	c84 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1ec0:	2011      	movs	r0, #17
    1ec2:	f7fe fead 	bl	c20 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1ec6:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1ec8:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1eca:	602e      	str	r6, [r5, #0]
}
    1ecc:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ed2:	e7fb      	b.n	1ecc <_sys_clock_driver_init+0x5c>
    1ed4:	0000c2a4 	.word	0x0000c2a4
    1ed8:	40011000 	.word	0x40011000
    1edc:	20000480 	.word	0x20000480
    1ee0:	2000047c 	.word	0x2000047c
    1ee4:	e000e100 	.word	0xe000e100

00001ee8 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1ee8:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1eea:	4a0b      	ldr	r2, [pc, #44]	; (1f18 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1eec:	480b      	ldr	r0, [pc, #44]	; (1f1c <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1eee:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1ef2:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1ef6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1efa:	4299      	cmp	r1, r3
    1efc:	d10a      	bne.n	1f14 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1efe:	4a08      	ldr	r2, [pc, #32]	; (1f20 <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1f00:	f240 1347 	movw	r3, #327	; 0x147
    1f04:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1f08:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1f0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1f0e:	fb00 3004 	mla	r0, r0, r4, r3
    1f12:	bd30      	pop	{r4, r5, pc}
    1f14:	4619      	mov	r1, r3
    1f16:	e7ec      	b.n	1ef2 <_timer_cycle_get_32+0xa>
    1f18:	40011000 	.word	0x40011000
    1f1c:	200016e0 	.word	0x200016e0
    1f20:	20003918 	.word	0x20003918

00001f24 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    1f24:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    1f26:	f04f 0320 	mov.w	r3, #32
    1f2a:	f3ef 8511 	mrs	r5, BASEPRI
    1f2e:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    1f32:	4c14      	ldr	r4, [pc, #80]	; (1f84 <bt_hex+0x60>)
    1f34:	4e14      	ldr	r6, [pc, #80]	; (1f88 <bt_hex+0x64>)
    1f36:	7823      	ldrb	r3, [r4, #0]
    1f38:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    1f3c:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    1f3e:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    1f42:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    1f44:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1f46:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    1f4a:	2940      	cmp	r1, #64	; 0x40
    1f4c:	bf28      	it	cs
    1f4e:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    1f50:	4d0e      	ldr	r5, [pc, #56]	; (1f8c <bt_hex+0x68>)
    1f52:	3801      	subs	r0, #1
    1f54:	4613      	mov	r3, r2
    1f56:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    1f5a:	42b3      	cmp	r3, r6
    1f5c:	d104      	bne.n	1f68 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    1f5e:	2300      	movs	r3, #0
    1f60:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    1f64:	4610      	mov	r0, r2
    1f66:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    1f68:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    1f6c:	0924      	lsrs	r4, r4, #4
    1f6e:	3302      	adds	r3, #2
    1f70:	5d2c      	ldrb	r4, [r5, r4]
    1f72:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    1f76:	7804      	ldrb	r4, [r0, #0]
    1f78:	f004 040f 	and.w	r4, r4, #15
    1f7c:	5d2c      	ldrb	r4, [r5, r4]
    1f7e:	f803 4c01 	strb.w	r4, [r3, #-1]
    1f82:	e7ea      	b.n	1f5a <bt_hex+0x36>
    1f84:	200004bb 	.word	0x200004bb
    1f88:	200004bc 	.word	0x200004bc
    1f8c:	0000c3a2 	.word	0x0000c3a2

00001f90 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    1f90:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    1f92:	4a1d      	ldr	r2, [pc, #116]	; (2008 <bt_addr_le_str+0x78>)
    1f94:	491d      	ldr	r1, [pc, #116]	; (200c <bt_addr_le_str+0x7c>)
    1f96:	7813      	ldrb	r3, [r2, #0]
    1f98:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    1f9c:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    1f9e:	f003 0301 	and.w	r3, r3, #1
    1fa2:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    1fa4:	7803      	ldrb	r3, [r0, #0]
{
    1fa6:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    1fa8:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    1fac:	4604      	mov	r4, r0
	str = bufs[cur++];
    1fae:	440e      	add	r6, r1
    1fb0:	ad07      	add	r5, sp, #28
    1fb2:	2b03      	cmp	r3, #3
    1fb4:	d821      	bhi.n	1ffa <bt_addr_le_str+0x6a>
    1fb6:	e8df f003 	tbb	[pc, r3]
    1fba:	1a02      	.short	0x1a02
    1fbc:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    1fbe:	4914      	ldr	r1, [pc, #80]	; (2010 <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1fc0:	4628      	mov	r0, r5
    1fc2:	f7fe fae5 	bl	590 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1fc6:	7862      	ldrb	r2, [r4, #1]
    1fc8:	9204      	str	r2, [sp, #16]
    1fca:	78a2      	ldrb	r2, [r4, #2]
    1fcc:	9203      	str	r2, [sp, #12]
    1fce:	78e2      	ldrb	r2, [r4, #3]
    1fd0:	9202      	str	r2, [sp, #8]
    1fd2:	7922      	ldrb	r2, [r4, #4]
    1fd4:	9201      	str	r2, [sp, #4]
    1fd6:	7962      	ldrb	r2, [r4, #5]
    1fd8:	9200      	str	r2, [sp, #0]
    1fda:	79a3      	ldrb	r3, [r4, #6]
    1fdc:	9505      	str	r5, [sp, #20]
    1fde:	4a0d      	ldr	r2, [pc, #52]	; (2014 <bt_addr_le_str+0x84>)
    1fe0:	211b      	movs	r1, #27
    1fe2:	4630      	mov	r0, r6
    1fe4:	f7ff f984 	bl	12f0 <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    1fe8:	4630      	mov	r0, r6
    1fea:	b00a      	add	sp, #40	; 0x28
    1fec:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    1fee:	490a      	ldr	r1, [pc, #40]	; (2018 <bt_addr_le_str+0x88>)
    1ff0:	e7e6      	b.n	1fc0 <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    1ff2:	490a      	ldr	r1, [pc, #40]	; (201c <bt_addr_le_str+0x8c>)
    1ff4:	e7e4      	b.n	1fc0 <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    1ff6:	490a      	ldr	r1, [pc, #40]	; (2020 <bt_addr_le_str+0x90>)
    1ff8:	e7e2      	b.n	1fc0 <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1ffa:	4a0a      	ldr	r2, [pc, #40]	; (2024 <bt_addr_le_str+0x94>)
    1ffc:	210a      	movs	r1, #10
    1ffe:	4628      	mov	r0, r5
    2000:	f7ff f976 	bl	12f0 <snprintk>
    2004:	e7df      	b.n	1fc6 <bt_addr_le_str+0x36>
    2006:	bf00      	nop
    2008:	200004ba 	.word	0x200004ba
    200c:	20000484 	.word	0x20000484
    2010:	0000c356 	.word	0x0000c356
    2014:	0000c37f 	.word	0x0000c37f
    2018:	0000c35d 	.word	0x0000c35d
    201c:	0000c364 	.word	0x0000c364
    2020:	0000c36e 	.word	0x0000c36e
    2024:	0000c378 	.word	0x0000c378

00002028 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    2028:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    202a:	4d0b      	ldr	r5, [pc, #44]	; (2058 <ver_str+0x30>)
{
    202c:	4606      	mov	r6, r0
	const char * const str[] = {
    202e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2030:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    2032:	466c      	mov	r4, sp
    2034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    203a:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    203e:	2e09      	cmp	r6, #9
	const char * const str[] = {
    2040:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    2044:	bf9b      	ittet	ls
    2046:	ab0a      	addls	r3, sp, #40	; 0x28
    2048:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    204c:	4803      	ldrhi	r0, [pc, #12]	; (205c <ver_str+0x34>)
		return str[ver];
    204e:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    2052:	b00a      	add	sp, #40	; 0x28
    2054:	bd70      	pop	{r4, r5, r6, pc}
    2056:	bf00      	nop
    2058:	0000bd24 	.word	0x0000bd24
    205c:	0000cc78 	.word	0x0000cc78

00002060 <atomic_or>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2060:	f3bf 8f5b 	dmb	ish
    2064:	e850 3f00 	ldrex	r3, [r0]
    2068:	ea43 0201 	orr.w	r2, r3, r1
    206c:	e840 2c00 	strex	ip, r2, [r0]
    2070:	f1bc 0f00 	cmp.w	ip, #0
    2074:	d1f6      	bne.n	2064 <atomic_or+0x4>
    2076:	f3bf 8f5b 	dmb	ish
}
    207a:	4618      	mov	r0, r3
    207c:	4770      	bx	lr

0000207e <atomic_and>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    207e:	f3bf 8f5b 	dmb	ish
    2082:	e850 3f00 	ldrex	r3, [r0]
    2086:	ea03 0201 	and.w	r2, r3, r1
    208a:	e840 2c00 	strex	ip, r2, [r0]
    208e:	f1bc 0f00 	cmp.w	ip, #0
    2092:	d1f6      	bne.n	2082 <atomic_and+0x4>
    2094:	f3bf 8f5b 	dmb	ish
}
    2098:	4618      	mov	r0, r3
    209a:	4770      	bx	lr

0000209c <hci_cmd_done>:
{
    209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20a0:	4606      	mov	r6, r0
    20a2:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20a4:	7990      	ldrb	r0, [r2, #6]
    20a6:	4f26      	ldr	r7, [pc, #152]	; (2140 <hci_cmd_done+0xa4>)
{
    20a8:	4688      	mov	r8, r1
    20aa:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    20ac:	f008 fc5a 	bl	a964 <net_buf_pool_get>
    20b0:	4287      	cmp	r7, r0
    20b2:	d013      	beq.n	20dc <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    20b4:	79ac      	ldrb	r4, [r5, #6]
    20b6:	4620      	mov	r0, r4
    20b8:	f008 fc54 	bl	a964 <net_buf_pool_get>
    20bc:	4b21      	ldr	r3, [pc, #132]	; (2144 <hci_cmd_done+0xa8>)
    20be:	4a22      	ldr	r2, [pc, #136]	; (2148 <hci_cmd_done+0xac>)
    20c0:	4922      	ldr	r1, [pc, #136]	; (214c <hci_cmd_done+0xb0>)
    20c2:	e9cd 7304 	strd	r7, r3, [sp, #16]
    20c6:	e9cd 4002 	strd	r4, r0, [sp, #8]
    20ca:	e9cd 3600 	strd	r3, r6, [sp]
    20ce:	4820      	ldr	r0, [pc, #128]	; (2150 <hci_cmd_done+0xb4>)
    20d0:	4b20      	ldr	r3, [pc, #128]	; (2154 <hci_cmd_done+0xb8>)
    20d2:	f7ff f8ff 	bl	12d4 <printk>
}
    20d6:	b006      	add	sp, #24
    20d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    20dc:	4628      	mov	r0, r5
    20de:	f008 fc47 	bl	a970 <net_buf_id>
    20e2:	4c1d      	ldr	r4, [pc, #116]	; (2158 <hci_cmd_done+0xbc>)
    20e4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    20e8:	8843      	ldrh	r3, [r0, #2]
    20ea:	42b3      	cmp	r3, r6
    20ec:	d010      	beq.n	2110 <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    20ee:	4628      	mov	r0, r5
    20f0:	f008 fc3e 	bl	a970 <net_buf_id>
    20f4:	4b13      	ldr	r3, [pc, #76]	; (2144 <hci_cmd_done+0xa8>)
    20f6:	9303      	str	r3, [sp, #12]
    20f8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    20fc:	4913      	ldr	r1, [pc, #76]	; (214c <hci_cmd_done+0xb0>)
    20fe:	8842      	ldrh	r2, [r0, #2]
    2100:	9300      	str	r3, [sp, #0]
    2102:	e9cd 6201 	strd	r6, r2, [sp, #4]
    2106:	4b13      	ldr	r3, [pc, #76]	; (2154 <hci_cmd_done+0xb8>)
    2108:	4a0f      	ldr	r2, [pc, #60]	; (2148 <hci_cmd_done+0xac>)
    210a:	4814      	ldr	r0, [pc, #80]	; (215c <hci_cmd_done+0xc0>)
    210c:	f7ff f8e2 	bl	12d4 <printk>
	if (cmd(buf)->sync) {
    2110:	4628      	mov	r0, r5
    2112:	f008 fc2d 	bl	a970 <net_buf_id>
    2116:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    211a:	6843      	ldr	r3, [r0, #4]
    211c:	2b00      	cmp	r3, #0
    211e:	d0da      	beq.n	20d6 <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    2120:	4628      	mov	r0, r5
    2122:	f008 fc25 	bl	a970 <net_buf_id>
    2126:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    212a:	4628      	mov	r0, r5
    212c:	f008 fc20 	bl	a970 <net_buf_id>
    2130:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2134:	6840      	ldr	r0, [r0, #4]
}
    2136:	b006      	add	sp, #24
    2138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    213c:	f009 b93c 	b.w	b3b8 <_impl_k_sem_give>
    2140:	200039d4 	.word	0x200039d4
    2144:	0000bda7 	.word	0x0000bda7
    2148:	0000c68c 	.word	0x0000c68c
    214c:	0000c693 	.word	0x0000c693
    2150:	0000c696 	.word	0x0000c696
    2154:	0000c3b3 	.word	0x0000c3b3
    2158:	200006c0 	.word	0x200006c0
    215c:	0000c6db 	.word	0x0000c6db

00002160 <atomic_test_bit.constprop.23>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2160:	4b05      	ldr	r3, [pc, #20]	; (2178 <atomic_test_bit.constprop.23+0x18>)
    2162:	f3bf 8f5b 	dmb	ish
    2166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    2168:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    216c:	fa43 f000 	asr.w	r0, r3, r0
}
    2170:	f000 0001 	and.w	r0, r0, #1
    2174:	4770      	bx	lr
    2176:	bf00      	nop
    2178:	200036d0 	.word	0x200036d0

0000217c <bt_hci_cmd_create>:
{
    217c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2180:	4680      	mov	r8, r0
    2182:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2184:	4813      	ldr	r0, [pc, #76]	; (21d4 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    2186:	4d14      	ldr	r5, [pc, #80]	; (21d8 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    218c:	f008 fc7e 	bl	aa8c <net_buf_alloc_fixed>
    2190:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2192:	f100 0608 	add.w	r6, r0, #8
    2196:	2100      	movs	r1, #0
    2198:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    219a:	2700      	movs	r7, #0
    219c:	f008 fc95 	bl	aaca <net_buf_simple_reserve>
    21a0:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    21a2:	4620      	mov	r0, r4
    21a4:	f008 fbe4 	bl	a970 <net_buf_id>
    21a8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    21ac:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    21b0:	4620      	mov	r0, r4
    21b2:	f008 fbdd 	bl	a970 <net_buf_id>
    21b6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    21ba:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    21bc:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    21be:	4630      	mov	r0, r6
    21c0:	f008 fcc6 	bl	ab50 <net_buf_simple_add>
	hdr->param_len = param_len;
    21c4:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    21c8:	f8a0 8000 	strh.w	r8, [r0]
}
    21cc:	4620      	mov	r0, r4
    21ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    21d2:	bf00      	nop
    21d4:	200039d4 	.word	0x200039d4
    21d8:	200006c0 	.word	0x200006c0

000021dc <bt_hci_cmd_send_sync>:
{
    21dc:	b570      	push	{r4, r5, r6, lr}
    21de:	4615      	mov	r5, r2
    21e0:	b086      	sub	sp, #24
	if (!buf) {
    21e2:	460c      	mov	r4, r1
    21e4:	b919      	cbnz	r1, 21ee <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    21e6:	f7ff ffc9 	bl	217c <bt_hci_cmd_create>
		if (!buf) {
    21ea:	4604      	mov	r4, r0
    21ec:	b368      	cbz	r0, 224a <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    21ee:	2201      	movs	r2, #1
    21f0:	2100      	movs	r1, #0
    21f2:	4668      	mov	r0, sp
    21f4:	f009 f8d6 	bl	b3a4 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    21f8:	4620      	mov	r0, r4
    21fa:	f008 fbb9 	bl	a970 <net_buf_id>
    21fe:	4e14      	ldr	r6, [pc, #80]	; (2250 <bt_hci_cmd_send_sync+0x74>)
    2200:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2204:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    2208:	4620      	mov	r0, r4
    220a:	f008 fc9d 	bl	ab48 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    220e:	4621      	mov	r1, r4
    2210:	4810      	ldr	r0, [pc, #64]	; (2254 <bt_hci_cmd_send_sync+0x78>)
    2212:	f008 fc5e 	bl	aad2 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2216:	f242 7110 	movw	r1, #10000	; 0x2710
    221a:	4668      	mov	r0, sp
    221c:	f009 f930 	bl	b480 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2220:	4620      	mov	r0, r4
    2222:	f008 fba5 	bl	a970 <net_buf_id>
    2226:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    222a:	b130      	cbz	r0, 223a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    222c:	4620      	mov	r0, r4
    222e:	f008 fc5d 	bl	aaec <net_buf_unref>
		err = -EIO;
    2232:	f06f 0004 	mvn.w	r0, #4
}
    2236:	b006      	add	sp, #24
    2238:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    223a:	b10d      	cbz	r5, 2240 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    223c:	602c      	str	r4, [r5, #0]
    223e:	e7fa      	b.n	2236 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2240:	4620      	mov	r0, r4
    2242:	f008 fc53 	bl	aaec <net_buf_unref>
		err = 0;
    2246:	4628      	mov	r0, r5
    2248:	e7f5      	b.n	2236 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    224a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    224e:	e7f2      	b.n	2236 <bt_hci_cmd_send_sync+0x5a>
    2250:	200006c0 	.word	0x200006c0
    2254:	20003784 	.word	0x20003784

00002258 <set_random_address>:
{
    2258:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    225a:	4d15      	ldr	r5, [pc, #84]	; (22b0 <set_random_address+0x58>)
    225c:	2206      	movs	r2, #6
    225e:	f105 0108 	add.w	r1, r5, #8
    2262:	4606      	mov	r6, r0
    2264:	f7fe f9ab 	bl	5be <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2268:	4604      	mov	r4, r0
    226a:	b1d8      	cbz	r0, 22a4 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    226c:	2106      	movs	r1, #6
    226e:	f242 0005 	movw	r0, #8197	; 0x2005
    2272:	f7ff ff83 	bl	217c <bt_hci_cmd_create>
	if (!buf) {
    2276:	4604      	mov	r4, r0
    2278:	b1b0      	cbz	r0, 22a8 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    227a:	2206      	movs	r2, #6
    227c:	4631      	mov	r1, r6
    227e:	3008      	adds	r0, #8
    2280:	f008 fc6c 	bl	ab5c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2284:	4621      	mov	r1, r4
    2286:	2200      	movs	r2, #0
    2288:	f242 0005 	movw	r0, #8197	; 0x2005
    228c:	f7ff ffa6 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    2290:	4604      	mov	r4, r0
    2292:	b938      	cbnz	r0, 22a4 <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2294:	2206      	movs	r2, #6
    2296:	4631      	mov	r1, r6
    2298:	f105 0008 	add.w	r0, r5, #8
    229c:	f7fe f99f 	bl	5de <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    22a0:	2301      	movs	r3, #1
    22a2:	71eb      	strb	r3, [r5, #7]
}
    22a4:	4620      	mov	r0, r4
    22a6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    22a8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    22ac:	e7fa      	b.n	22a4 <set_random_address+0x4c>
    22ae:	bf00      	nop
    22b0:	200036d0 	.word	0x200036d0

000022b4 <le_set_private_addr>:
{
    22b4:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    22b6:	2106      	movs	r1, #6
    22b8:	4668      	mov	r0, sp
    22ba:	f001 ff65 	bl	4188 <bt_rand>
	if (err) {
    22be:	b940      	cbnz	r0, 22d2 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    22c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22c4:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    22c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    22ca:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    22ce:	f7ff ffc3 	bl	2258 <set_random_address>
}
    22d2:	b003      	add	sp, #12
    22d4:	f85d fb04 	ldr.w	pc, [sp], #4

000022d8 <set_le_scan_enable>:
{
    22d8:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    22da:	2102      	movs	r1, #2
{
    22dc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    22de:	f242 000c 	movw	r0, #8204	; 0x200c
    22e2:	f7ff ff4b 	bl	217c <bt_hci_cmd_create>
	if (!buf) {
    22e6:	4604      	mov	r4, r0
    22e8:	b320      	cbz	r0, 2334 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    22ea:	2102      	movs	r1, #2
    22ec:	3008      	adds	r0, #8
    22ee:	f008 fc2f 	bl	ab50 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    22f2:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    22f4:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    22f6:	d114      	bne.n	2322 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    22f8:	200a      	movs	r0, #10
    22fa:	f7ff ff31 	bl	2160 <atomic_test_bit.constprop.23>
    22fe:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    2300:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2302:	4621      	mov	r1, r4
    2304:	2200      	movs	r2, #0
    2306:	f242 000c 	movw	r0, #8204	; 0x200c
    230a:	f7ff ff67 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    230e:	4604      	mov	r4, r0
    2310:	b928      	cbnz	r0, 231e <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2312:	2d01      	cmp	r5, #1
    2314:	d108      	bne.n	2328 <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2316:	2180      	movs	r1, #128	; 0x80
    2318:	4808      	ldr	r0, [pc, #32]	; (233c <set_le_scan_enable+0x64>)
    231a:	f7ff fea1 	bl	2060 <atomic_or>
}
    231e:	4620      	mov	r0, r4
    2320:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2322:	2300      	movs	r3, #0
    2324:	7043      	strb	r3, [r0, #1]
    2326:	e7eb      	b.n	2300 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2328:	f06f 0180 	mvn.w	r1, #128	; 0x80
    232c:	4803      	ldr	r0, [pc, #12]	; (233c <set_le_scan_enable+0x64>)
    232e:	f7ff fea6 	bl	207e <atomic_and>
    2332:	e7f4      	b.n	231e <set_le_scan_enable+0x46>
		return -ENOBUFS;
    2334:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2338:	e7f1      	b.n	231e <set_le_scan_enable+0x46>
    233a:	bf00      	nop
    233c:	20003740 	.word	0x20003740

00002340 <set_ad>:

	return true;
}

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    2340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2344:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2346:	2120      	movs	r1, #32
{
    2348:	4607      	mov	r7, r0
    234a:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    234c:	f7ff ff16 	bl	217c <bt_hci_cmd_create>
	if (!buf) {
    2350:	4606      	mov	r6, r0
    2352:	2800      	cmp	r0, #0
    2354:	d03c      	beq.n	23d0 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    2356:	2120      	movs	r1, #32
    2358:	3008      	adds	r0, #8
    235a:	f008 fbf9 	bl	ab50 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    235e:	2220      	movs	r2, #32
    2360:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    2362:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    2364:	f7fe f968 	bl	638 <memset>

	for (i = 0; i < ad_len; i++) {
    2368:	f04f 0900 	mov.w	r9, #0
    236c:	45c1      	cmp	r9, r8
    236e:	d106      	bne.n	237e <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2370:	4631      	mov	r1, r6
    2372:	4638      	mov	r0, r7
    2374:	2200      	movs	r2, #0
}
    2376:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    237a:	f7ff bf2f 	b.w	21dc <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    237e:	7862      	ldrb	r2, [r4, #1]
    2380:	782b      	ldrb	r3, [r5, #0]
    2382:	18d1      	adds	r1, r2, r3
    2384:	3102      	adds	r1, #2
    2386:	291f      	cmp	r1, #31
    2388:	f104 0408 	add.w	r4, r4, #8
    238c:	dd06      	ble.n	239c <set_ad+0x5c>
			net_buf_unref(buf);
    238e:	4630      	mov	r0, r6
    2390:	f008 fbac 	bl	aaec <net_buf_unref>
			return -EINVAL;
    2394:	f06f 0015 	mvn.w	r0, #21
}
    2398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    239c:	18e9      	adds	r1, r5, r3
    239e:	1c50      	adds	r0, r2, #1
    23a0:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    23a2:	1c98      	adds	r0, r3, #2
    23a4:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    23a6:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    23a8:	7028      	strb	r0, [r5, #0]
    23aa:	fa55 f383 	uxtab	r3, r5, r3
    23ae:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    23b2:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    23b4:	3001      	adds	r0, #1
    23b6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    23ba:	4428      	add	r0, r5
    23bc:	f7fe f90f 	bl	5de <memcpy>
		set_data->len += ad[i].data_len;
    23c0:	782b      	ldrb	r3, [r5, #0]
    23c2:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    23c6:	4413      	add	r3, r2
    23c8:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    23ca:	f109 0901 	add.w	r9, r9, #1
    23ce:	e7cd      	b.n	236c <set_ad+0x2c>
		return -ENOBUFS;
    23d0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    23d4:	e7e0      	b.n	2398 <set_ad+0x58>

000023d6 <bt_le_scan_update>:
{
    23d6:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    23d8:	2008      	movs	r0, #8
    23da:	f7ff fec1 	bl	2160 <atomic_test_bit.constprop.23>
    23de:	4602      	mov	r2, r0
    23e0:	b940      	cbnz	r0, 23f4 <bt_le_scan_update+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    23e2:	2007      	movs	r0, #7
    23e4:	f7ff febc 	bl	2160 <atomic_test_bit.constprop.23>
    23e8:	b120      	cbz	r0, 23f4 <bt_le_scan_update+0x1e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    23ea:	4610      	mov	r0, r2
}
    23ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    23f0:	f7ff bf72 	b.w	22d8 <set_le_scan_enable>
}
    23f4:	2000      	movs	r0, #0
    23f6:	bd08      	pop	{r3, pc}

000023f8 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    23f8:	2301      	movs	r3, #1
{
    23fa:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    23fc:	2106      	movs	r1, #6
{
    23fe:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2400:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2404:	f001 fec0 	bl	4188 <bt_rand>
	if (err) {
    2408:	b918      	cbnz	r0, 2412 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    240a:	79a3      	ldrb	r3, [r4, #6]
    240c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2410:	71a3      	strb	r3, [r4, #6]
}
    2412:	bd10      	pop	{r4, pc}

00002414 <hci_init>:
{
    2414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2418:	b08e      	sub	sp, #56	; 0x38
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    241a:	aa0c      	add	r2, sp, #48	; 0x30
    241c:	2100      	movs	r1, #0
    241e:	f640 4003 	movw	r0, #3075	; 0xc03
    2422:	f7ff fedb 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    2426:	4604      	mov	r4, r0
    2428:	2800      	cmp	r0, #0
    242a:	d17e      	bne.n	252a <hci_init+0x116>
	u8_t status = buf->data[0];
    242c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    242e:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2430:	781b      	ldrb	r3, [r3, #0]
    2432:	b96b      	cbnz	r3, 2450 <hci_init+0x3c>
	scan_dev_found_cb = NULL;
    2434:	4aa0      	ldr	r2, [pc, #640]	; (26b8 <hci_init+0x2a4>)
    2436:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2438:	4ba0      	ldr	r3, [pc, #640]	; (26bc <hci_init+0x2a8>)
    243a:	f3bf 8f5b 	dmb	ish
    243e:	2201      	movs	r2, #1
    2440:	e853 1f00 	ldrex	r1, [r3]
    2444:	e843 2000 	strex	r0, r2, [r3]
    2448:	2800      	cmp	r0, #0
    244a:	d1f9      	bne.n	2440 <hci_init+0x2c>
    244c:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    2450:	980c      	ldr	r0, [sp, #48]	; 0x30
    2452:	f008 fb4b 	bl	aaec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    2456:	aa0c      	add	r2, sp, #48	; 0x30
    2458:	2100      	movs	r1, #0
    245a:	f241 0003 	movw	r0, #4099	; 0x1003
    245e:	f7ff febd 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    2462:	4604      	mov	r4, r0
    2464:	2800      	cmp	r0, #0
    2466:	d160      	bne.n	252a <hci_init+0x116>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    2468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    246a:	4d95      	ldr	r5, [pc, #596]	; (26c0 <hci_init+0x2ac>)
    246c:	6899      	ldr	r1, [r3, #8]
    246e:	2208      	movs	r2, #8
    2470:	3101      	adds	r1, #1
    2472:	f105 0016 	add.w	r0, r5, #22
    2476:	f7fe f8b2 	bl	5de <memcpy>
	net_buf_unref(rsp);
    247a:	980c      	ldr	r0, [sp, #48]	; 0x30
    247c:	f008 fb36 	bl	aaec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    2480:	4621      	mov	r1, r4
    2482:	aa0c      	add	r2, sp, #48	; 0x30
    2484:	f241 0001 	movw	r0, #4097	; 0x1001
    2488:	f7ff fea8 	bl	21dc <bt_hci_cmd_send_sync>
    248c:	462e      	mov	r6, r5
	if (err) {
    248e:	4604      	mov	r4, r0
    2490:	2800      	cmp	r0, #0
    2492:	d14a      	bne.n	252a <hci_init+0x116>
	read_local_ver_complete(rsp);
    2494:	980c      	ldr	r0, [sp, #48]	; 0x30
    2496:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    2498:	785a      	ldrb	r2, [r3, #1]
    249a:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    249c:	78d9      	ldrb	r1, [r3, #3]
    249e:	789a      	ldrb	r2, [r3, #2]
    24a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    24a4:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    24a6:	791a      	ldrb	r2, [r3, #4]
    24a8:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    24aa:	7a19      	ldrb	r1, [r3, #8]
    24ac:	79da      	ldrb	r2, [r3, #7]
    24ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    24b2:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    24b4:	795a      	ldrb	r2, [r3, #5]
    24b6:	799b      	ldrb	r3, [r3, #6]
    24b8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    24bc:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    24be:	f008 fb15 	bl	aaec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    24c2:	4621      	mov	r1, r4
    24c4:	aa0c      	add	r2, sp, #48	; 0x30
    24c6:	f241 0009 	movw	r0, #4105	; 0x1009
    24ca:	f7ff fe87 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    24ce:	4604      	mov	r4, r0
    24d0:	bb58      	cbnz	r0, 252a <hci_init+0x116>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    24d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    24d4:	6899      	ldr	r1, [r3, #8]
    24d6:	2206      	movs	r2, #6
    24d8:	3101      	adds	r1, #1
    24da:	1c68      	adds	r0, r5, #1
    24dc:	f7fe f87f 	bl	5de <memcpy>
	net_buf_unref(rsp);
    24e0:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    24e2:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    24e4:	f008 fb02 	bl	aaec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    24e8:	4621      	mov	r1, r4
    24ea:	aa0c      	add	r2, sp, #48	; 0x30
    24ec:	f241 0002 	movw	r0, #4098	; 0x1002
    24f0:	f7ff fe74 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    24f4:	4604      	mov	r4, r0
    24f6:	b9c0      	cbnz	r0, 252a <hci_init+0x116>
	memcpy(bt_dev.supported_commands, rp->commands,
    24f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    24fa:	6899      	ldr	r1, [r3, #8]
    24fc:	2240      	movs	r2, #64	; 0x40
    24fe:	3101      	adds	r1, #1
    2500:	f105 001e 	add.w	r0, r5, #30
    2504:	f7fe f86b 	bl	5de <memcpy>
	net_buf_unref(rsp);
    2508:	980c      	ldr	r0, [sp, #48]	; 0x30
    250a:	f008 faef 	bl	aaec <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    250e:	7eab      	ldrb	r3, [r5, #26]
    2510:	0658      	lsls	r0, r3, #25
    2512:	d40e      	bmi.n	2532 <hci_init+0x11e>
		BT_ERR("Non-LE capable controller detected!");
    2514:	4b6b      	ldr	r3, [pc, #428]	; (26c4 <hci_init+0x2b0>)
    2516:	4a6c      	ldr	r2, [pc, #432]	; (26c8 <hci_init+0x2b4>)
    2518:	496c      	ldr	r1, [pc, #432]	; (26cc <hci_init+0x2b8>)
    251a:	486d      	ldr	r0, [pc, #436]	; (26d0 <hci_init+0x2bc>)
    251c:	e9cd 3300 	strd	r3, r3, [sp]
    2520:	4b6c      	ldr	r3, [pc, #432]	; (26d4 <hci_init+0x2c0>)
    2522:	f7fe fed7 	bl	12d4 <printk>
		return -ENODEV;
    2526:	f06f 0412 	mvn.w	r4, #18
}
    252a:	4620      	mov	r0, r4
    252c:	b00e      	add	sp, #56	; 0x38
    252e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2532:	4621      	mov	r1, r4
    2534:	aa0c      	add	r2, sp, #48	; 0x30
    2536:	f242 0003 	movw	r0, #8195	; 0x2003
    253a:	f7ff fe4f 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    253e:	4604      	mov	r4, r0
    2540:	2800      	cmp	r0, #0
    2542:	d1f2      	bne.n	252a <hci_init+0x116>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2546:	6899      	ldr	r1, [r3, #8]
    2548:	2208      	movs	r2, #8
    254a:	3101      	adds	r1, #1
    254c:	f105 0078 	add.w	r0, r5, #120	; 0x78
    2550:	f7fe f845 	bl	5de <memcpy>
	net_buf_unref(rsp);
    2554:	980c      	ldr	r0, [sp, #48]	; 0x30
    2556:	f008 fac9 	bl	aaec <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    255a:	7eab      	ldrb	r3, [r5, #26]
    255c:	0699      	lsls	r1, r3, #26
    255e:	d57a      	bpl.n	2656 <hci_init+0x242>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2560:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    2564:	071a      	lsls	r2, r3, #28
    2566:	f100 8092 	bmi.w	268e <hci_init+0x27a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    256a:	2108      	movs	r1, #8
    256c:	f242 0001 	movw	r0, #8193	; 0x2001
    2570:	f7ff fe04 	bl	217c <bt_hci_cmd_create>
	if (!buf) {
    2574:	4604      	mov	r4, r0
    2576:	2800      	cmp	r0, #0
    2578:	d074      	beq.n	2664 <hci_init+0x250>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    257a:	2108      	movs	r1, #8
    257c:	4408      	add	r0, r1
    257e:	f008 fae7 	bl	ab50 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2582:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    2586:	f003 0306 	and.w	r3, r3, #6
	mask |= BT_EVT_MASK_LE_ADVERTISING_REPORT;
    258a:	2b06      	cmp	r3, #6
    258c:	bf0c      	ite	eq
    258e:	f44f 73c1 	moveq.w	r3, #386	; 0x182
    2592:	2302      	movne	r3, #2
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    2594:	2200      	movs	r2, #0
    2596:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    2598:	0a1b      	lsrs	r3, r3, #8
    259a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    259c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    259e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    25a0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    25a2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    25a4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    25a6:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    25a8:	4621      	mov	r1, r4
    25aa:	f242 0001 	movw	r0, #8193	; 0x2001
    25ae:	f7ff fe15 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    25b2:	4604      	mov	r4, r0
    25b4:	2800      	cmp	r0, #0
    25b6:	d1b8      	bne.n	252a <hci_init+0x116>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    25b8:	2108      	movs	r1, #8
    25ba:	f640 4001 	movw	r0, #3073	; 0xc01
    25be:	f7ff fddd 	bl	217c <bt_hci_cmd_create>
	if (!buf) {
    25c2:	4605      	mov	r5, r0
    25c4:	2800      	cmp	r0, #0
    25c6:	d04d      	beq.n	2664 <hci_init+0x250>
	ev = net_buf_add(buf, sizeof(*ev));
    25c8:	2108      	movs	r1, #8
    25ca:	4408      	add	r0, r1
    25cc:	f008 fac0 	bl	ab50 <net_buf_simple_add>
    25d0:	2380      	movs	r3, #128	; 0x80
    25d2:	7043      	strb	r3, [r0, #1]
    25d4:	2302      	movs	r3, #2
    25d6:	70c3      	strb	r3, [r0, #3]
    25d8:	2320      	movs	r3, #32
	dst[0] = val;
    25da:	7004      	strb	r4, [r0, #0]
    25dc:	7084      	strb	r4, [r0, #2]
    25de:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    25e0:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    25e2:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    25e4:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    25e6:	4622      	mov	r2, r4
    25e8:	4629      	mov	r1, r5
    25ea:	f640 4001 	movw	r0, #3073	; 0xc01
    25ee:	f7ff fdf5 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    25f2:	4604      	mov	r4, r0
    25f4:	2800      	cmp	r0, #0
    25f6:	d198      	bne.n	252a <hci_init+0x116>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    25f8:	4601      	mov	r1, r0
    25fa:	aa0c      	add	r2, sp, #48	; 0x30
    25fc:	f64f 4001 	movw	r0, #64513	; 0xfc01
    2600:	f7ff fdec 	bl	21dc <bt_hci_cmd_send_sync>
    2604:	4d2f      	ldr	r5, [pc, #188]	; (26c4 <hci_init+0x2b0>)
	if (err) {
    2606:	2800      	cmp	r0, #0
    2608:	d072      	beq.n	26f0 <hci_init+0x2dc>
		BT_WARN("Vendor HCI extensions not available");
    260a:	e9cd 5500 	strd	r5, r5, [sp]
    260e:	4b32      	ldr	r3, [pc, #200]	; (26d8 <hci_init+0x2c4>)
    2610:	4a32      	ldr	r2, [pc, #200]	; (26dc <hci_init+0x2c8>)
    2612:	492e      	ldr	r1, [pc, #184]	; (26cc <hci_init+0x2b8>)
    2614:	4832      	ldr	r0, [pc, #200]	; (26e0 <hci_init+0x2cc>)
		BT_WARN("Failed to read supported vendor commands");
    2616:	f7fe fe5d 	bl	12d4 <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    261a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    261c:	2207      	movs	r2, #7
    261e:	a90a      	add	r1, sp, #40	; 0x28
    2620:	4827      	ldr	r0, [pc, #156]	; (26c0 <hci_init+0x2ac>)
    2622:	930a      	str	r3, [sp, #40]	; 0x28
    2624:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
    2628:	f7fd ffc9 	bl	5be <memcmp>
    262c:	2800      	cmp	r0, #0
    262e:	f040 80d9 	bne.w	27e4 <hci_init+0x3d0>
	if (bt_storage) {
    2632:	4a2c      	ldr	r2, [pc, #176]	; (26e4 <hci_init+0x2d0>)
    2634:	6813      	ldr	r3, [r2, #0]
    2636:	4690      	mov	r8, r2
    2638:	2b00      	cmp	r3, #0
    263a:	f040 8113 	bne.w	2864 <hci_init+0x450>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    263e:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    2642:	07db      	lsls	r3, r3, #31
    2644:	f100 8133 	bmi.w	28ae <hci_init+0x49a>
		BT_WARN("Read Static Addresses command not available");
    2648:	e9cd 5500 	strd	r5, r5, [sp]
    264c:	4b26      	ldr	r3, [pc, #152]	; (26e8 <hci_init+0x2d4>)
    264e:	4a23      	ldr	r2, [pc, #140]	; (26dc <hci_init+0x2c8>)
    2650:	491e      	ldr	r1, [pc, #120]	; (26cc <hci_init+0x2b8>)
    2652:	4826      	ldr	r0, [pc, #152]	; (26ec <hci_init+0x2d8>)
    2654:	e138      	b.n	28c8 <hci_init+0x4b4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    2656:	2102      	movs	r1, #2
    2658:	f640 406d 	movw	r0, #3181	; 0xc6d
    265c:	f7ff fd8e 	bl	217c <bt_hci_cmd_create>
		if (!buf) {
    2660:	4605      	mov	r5, r0
    2662:	b910      	cbnz	r0, 266a <hci_init+0x256>
		return -ENOBUFS;
    2664:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2668:	e75f      	b.n	252a <hci_init+0x116>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    266a:	2102      	movs	r1, #2
    266c:	3008      	adds	r0, #8
    266e:	f008 fa6f 	bl	ab50 <net_buf_simple_add>
		cp_le->le = 0x01;
    2672:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    2674:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    2676:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    2678:	4622      	mov	r2, r4
    267a:	4629      	mov	r1, r5
    267c:	f640 406d 	movw	r0, #3181	; 0xc6d
    2680:	f7ff fdac 	bl	21dc <bt_hci_cmd_send_sync>
		if (err) {
    2684:	4604      	mov	r4, r0
    2686:	2800      	cmp	r0, #0
    2688:	f43f af6a 	beq.w	2560 <hci_init+0x14c>
    268c:	e74d      	b.n	252a <hci_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    268e:	aa0c      	add	r2, sp, #48	; 0x30
    2690:	2100      	movs	r1, #0
    2692:	f242 001c 	movw	r0, #8220	; 0x201c
    2696:	f7ff fda1 	bl	21dc <bt_hci_cmd_send_sync>
		if (err) {
    269a:	4604      	mov	r4, r0
    269c:	2800      	cmp	r0, #0
    269e:	f47f af44 	bne.w	252a <hci_init+0x116>
		le_read_supp_states_complete(rsp);
    26a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    26a4:	6883      	ldr	r3, [r0, #8]
    26a6:	f853 2f01 	ldr.w	r2, [r3, #1]!
    26aa:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    26ac:	e9c6 2320 	strd	r2, r3, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    26b0:	f008 fa1c 	bl	aaec <net_buf_unref>
    26b4:	e759      	b.n	256a <hci_init+0x156>
    26b6:	bf00      	nop
    26b8:	2000071c 	.word	0x2000071c
    26bc:	20003740 	.word	0x20003740
    26c0:	200036d0 	.word	0x200036d0
    26c4:	0000bda7 	.word	0x0000bda7
    26c8:	0000c71e 	.word	0x0000c71e
    26cc:	0000c693 	.word	0x0000c693
    26d0:	0000c725 	.word	0x0000c725
    26d4:	0000c402 	.word	0x0000c402
    26d8:	0000c428 	.word	0x0000c428
    26dc:	0000c68c 	.word	0x0000c68c
    26e0:	0000c759 	.word	0x0000c759
    26e4:	20001600 	.word	0x20001600
    26e8:	0000c40a 	.word	0x0000c40a
    26ec:	0000c8fd 	.word	0x0000c8fd
	rp.info = (void *)rsp->data;
    26f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    26f2:	499a      	ldr	r1, [pc, #616]	; (295c <hci_init+0x548>)
	rp.info = (void *)rsp->data;
    26f4:	689f      	ldr	r7, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    26f6:	489a      	ldr	r0, [pc, #616]	; (2960 <hci_init+0x54c>)
    26f8:	f8b7 3001 	ldrh.w	r3, [r7, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    26fc:	2b03      	cmp	r3, #3
		return plat_str[platform];
    26fe:	bf96      	itet	ls
    2700:	4a98      	ldrls	r2, [pc, #608]	; (2964 <hci_init+0x550>)
	return "unknown";
    2702:	4a99      	ldrhi	r2, [pc, #612]	; (2968 <hci_init+0x554>)
		return plat_str[platform];
    2704:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    2708:	e9cd 3502 	strd	r3, r5, [sp, #8]
    270c:	e9cd 5200 	strd	r5, r2, [sp]
    2710:	4b96      	ldr	r3, [pc, #600]	; (296c <hci_init+0x558>)
    2712:	4a97      	ldr	r2, [pc, #604]	; (2970 <hci_init+0x55c>)
    2714:	f7fe fdde 	bl	12d4 <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2718:	f8b7 3001 	ldrh.w	r3, [r7, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    271c:	f8b7 2003 	ldrh.w	r2, [r7, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    2720:	2b02      	cmp	r3, #2
    2722:	d13a      	bne.n	279a <hci_init+0x386>
	if (variant < ARRAY_SIZE(nordic_str)) {
    2724:	2a02      	cmp	r2, #2
    2726:	d838      	bhi.n	279a <hci_init+0x386>
		return nordic_str[variant];
    2728:	4b92      	ldr	r3, [pc, #584]	; (2974 <hci_init+0x560>)
    272a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    272e:	498b      	ldr	r1, [pc, #556]	; (295c <hci_init+0x548>)
    2730:	4891      	ldr	r0, [pc, #580]	; (2978 <hci_init+0x564>)
    2732:	e9cd 2502 	strd	r2, r5, [sp, #8]
    2736:	e9cd 5300 	strd	r5, r3, [sp]
    273a:	4a8d      	ldr	r2, [pc, #564]	; (2970 <hci_init+0x55c>)
    273c:	4b8b      	ldr	r3, [pc, #556]	; (296c <hci_init+0x558>)
    273e:	f7fe fdc9 	bl	12d4 <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2742:	797b      	ldrb	r3, [r7, #5]
    2744:	9506      	str	r5, [sp, #24]
    2746:	f8d7 1009 	ldr.w	r1, [r7, #9]
    274a:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    274c:	2b03      	cmp	r3, #3
		return var_str[variant];
    274e:	bf98      	it	ls
    2750:	4a8a      	ldrls	r2, [pc, #552]	; (297c <hci_init+0x568>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2752:	f8b7 1007 	ldrh.w	r1, [r7, #7]
    2756:	9104      	str	r1, [sp, #16]
		return var_str[variant];
    2758:	bf94      	ite	ls
    275a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    275e:	4a82      	ldrhi	r2, [pc, #520]	; (2968 <hci_init+0x554>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    2760:	79b9      	ldrb	r1, [r7, #6]
    2762:	4887      	ldr	r0, [pc, #540]	; (2980 <hci_init+0x56c>)
    2764:	e9cd 3102 	strd	r3, r1, [sp, #8]
    2768:	e9cd 5200 	strd	r5, r2, [sp]
    276c:	4b7f      	ldr	r3, [pc, #508]	; (296c <hci_init+0x558>)
    276e:	4a80      	ldr	r2, [pc, #512]	; (2970 <hci_init+0x55c>)
    2770:	497a      	ldr	r1, [pc, #488]	; (295c <hci_init+0x548>)
    2772:	f7fe fdaf 	bl	12d4 <printk>
	net_buf_unref(rsp);
    2776:	980c      	ldr	r0, [sp, #48]	; 0x30
    2778:	f008 f9b8 	bl	aaec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    277c:	aa0c      	add	r2, sp, #48	; 0x30
    277e:	2100      	movs	r1, #0
    2780:	f64f 4002 	movw	r0, #64514	; 0xfc02
    2784:	f7ff fd2a 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    2788:	4607      	mov	r7, r0
    278a:	b140      	cbz	r0, 279e <hci_init+0x38a>
		BT_WARN("Failed to read supported vendor features");
    278c:	e9cd 5500 	strd	r5, r5, [sp]
    2790:	4b76      	ldr	r3, [pc, #472]	; (296c <hci_init+0x558>)
    2792:	4a7c      	ldr	r2, [pc, #496]	; (2984 <hci_init+0x570>)
    2794:	4971      	ldr	r1, [pc, #452]	; (295c <hci_init+0x548>)
    2796:	487c      	ldr	r0, [pc, #496]	; (2988 <hci_init+0x574>)
    2798:	e73d      	b.n	2616 <hci_init+0x202>
		return "unknown";
    279a:	4b73      	ldr	r3, [pc, #460]	; (2968 <hci_init+0x554>)
    279c:	e7c7      	b.n	272e <hci_init+0x31a>
	rp.cmds = (void *)rsp->data;
    279e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    27a0:	487a      	ldr	r0, [pc, #488]	; (298c <hci_init+0x578>)
    27a2:	6899      	ldr	r1, [r3, #8]
    27a4:	2202      	movs	r2, #2
    27a6:	3101      	adds	r1, #1
    27a8:	f7fd ff19 	bl	5de <memcpy>
	net_buf_unref(rsp);
    27ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    27ae:	f008 f99d 	bl	aaec <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    27b2:	aa0c      	add	r2, sp, #48	; 0x30
    27b4:	4639      	mov	r1, r7
    27b6:	f64f 4003 	movw	r0, #64515	; 0xfc03
    27ba:	f7ff fd0f 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    27be:	b130      	cbz	r0, 27ce <hci_init+0x3ba>
		BT_WARN("Failed to read supported vendor commands");
    27c0:	e9cd 5500 	strd	r5, r5, [sp]
    27c4:	4b69      	ldr	r3, [pc, #420]	; (296c <hci_init+0x558>)
    27c6:	4a6f      	ldr	r2, [pc, #444]	; (2984 <hci_init+0x570>)
    27c8:	4964      	ldr	r1, [pc, #400]	; (295c <hci_init+0x548>)
    27ca:	4871      	ldr	r0, [pc, #452]	; (2990 <hci_init+0x57c>)
    27cc:	e723      	b.n	2616 <hci_init+0x202>
	rp.feat = (void *)rsp->data;
    27ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    27d0:	4870      	ldr	r0, [pc, #448]	; (2994 <hci_init+0x580>)
    27d2:	6899      	ldr	r1, [r3, #8]
    27d4:	2201      	movs	r2, #1
    27d6:	4411      	add	r1, r2
    27d8:	f7fd ff01 	bl	5de <memcpy>
	net_buf_unref(rsp);
    27dc:	980c      	ldr	r0, [sp, #48]	; 0x30
    27de:	f008 f985 	bl	aaec <net_buf_unref>
    27e2:	e71a      	b.n	261a <hci_init+0x206>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    27e4:	4b6c      	ldr	r3, [pc, #432]	; (2998 <hci_init+0x584>)
    27e6:	6818      	ldr	r0, [r3, #0]
    27e8:	889a      	ldrh	r2, [r3, #4]
    27ea:	900c      	str	r0, [sp, #48]	; 0x30
    27ec:	799b      	ldrb	r3, [r3, #6]
    27ee:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    27f2:	a90c      	add	r1, sp, #48	; 0x30
    27f4:	2207      	movs	r2, #7
    27f6:	4869      	ldr	r0, [pc, #420]	; (299c <hci_init+0x588>)
    27f8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    27fc:	f7fd fedf 	bl	5be <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    2800:	2800      	cmp	r0, #0
    2802:	f43f af16 	beq.w	2632 <hci_init+0x21e>
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    2806:	4865      	ldr	r0, [pc, #404]	; (299c <hci_init+0x588>)
    2808:	f7ff fbc2 	bl	1f90 <bt_addr_le_str>
    280c:	4b64      	ldr	r3, [pc, #400]	; (29a0 <hci_init+0x58c>)
    280e:	4a58      	ldr	r2, [pc, #352]	; (2970 <hci_init+0x55c>)
    2810:	4952      	ldr	r1, [pc, #328]	; (295c <hci_init+0x548>)
    2812:	9500      	str	r5, [sp, #0]
    2814:	e9cd 0501 	strd	r0, r5, [sp, #4]
    2818:	4862      	ldr	r0, [pc, #392]	; (29a4 <hci_init+0x590>)
    281a:	f7fe fd5b 	bl	12d4 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    281e:	7bb7      	ldrb	r7, [r6, #14]
    2820:	4638      	mov	r0, r7
    2822:	f7ff fc01 	bl	2028 <ver_str>
    2826:	9505      	str	r5, [sp, #20]
    2828:	8ab3      	ldrh	r3, [r6, #20]
    282a:	9304      	str	r3, [sp, #16]
    282c:	8a33      	ldrh	r3, [r6, #16]
    282e:	4a50      	ldr	r2, [pc, #320]	; (2970 <hci_init+0x55c>)
    2830:	494a      	ldr	r1, [pc, #296]	; (295c <hci_init+0x548>)
    2832:	e9cd 7302 	strd	r7, r3, [sp, #8]
    2836:	e9cd 5000 	strd	r5, r0, [sp]
    283a:	4b59      	ldr	r3, [pc, #356]	; (29a0 <hci_init+0x58c>)
    283c:	485a      	ldr	r0, [pc, #360]	; (29a8 <hci_init+0x594>)
    283e:	f7fe fd49 	bl	12d4 <printk>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2842:	7bf7      	ldrb	r7, [r6, #15]
    2844:	4638      	mov	r0, r7
    2846:	f7ff fbef 	bl	2028 <ver_str>
    284a:	9504      	str	r5, [sp, #16]
    284c:	8a73      	ldrh	r3, [r6, #18]
    284e:	4a48      	ldr	r2, [pc, #288]	; (2970 <hci_init+0x55c>)
    2850:	4942      	ldr	r1, [pc, #264]	; (295c <hci_init+0x548>)
    2852:	e9cd 7302 	strd	r7, r3, [sp, #8]
    2856:	e9cd 5000 	strd	r5, r0, [sp]
    285a:	4b51      	ldr	r3, [pc, #324]	; (29a0 <hci_init+0x58c>)
    285c:	4853      	ldr	r0, [pc, #332]	; (29ac <hci_init+0x598>)
    285e:	f7fe fd39 	bl	12d4 <printk>
    2862:	e662      	b.n	252a <hci_init+0x116>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2864:	2100      	movs	r1, #0
    2866:	681f      	ldr	r7, [r3, #0]
    2868:	4a4c      	ldr	r2, [pc, #304]	; (299c <hci_init+0x588>)
    286a:	2307      	movs	r3, #7
    286c:	4608      	mov	r0, r1
    286e:	47b8      	blx	r7
		if (ret == sizeof(bt_dev.id_addr)) {
    2870:	2807      	cmp	r0, #7
    2872:	f47f aee4 	bne.w	263e <hci_init+0x22a>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2876:	7833      	ldrb	r3, [r6, #0]
    2878:	2b01      	cmp	r3, #1
    287a:	d104      	bne.n	2886 <hci_init+0x472>
    287c:	79b3      	ldrb	r3, [r6, #6]
    287e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2882:	2bc0      	cmp	r3, #192	; 0xc0
    2884:	d05e      	beq.n	2944 <hci_init+0x530>
		BT_ERR("Only static random address supported as identity");
    2886:	e9cd 5500 	strd	r5, r5, [sp]
    288a:	4b49      	ldr	r3, [pc, #292]	; (29b0 <hci_init+0x59c>)
    288c:	4a49      	ldr	r2, [pc, #292]	; (29b4 <hci_init+0x5a0>)
    288e:	4933      	ldr	r1, [pc, #204]	; (295c <hci_init+0x548>)
    2890:	4849      	ldr	r0, [pc, #292]	; (29b8 <hci_init+0x5a4>)
    2892:	f7fe fd1f 	bl	12d4 <printk>
		return -EINVAL;
    2896:	f06f 0715 	mvn.w	r7, #21
			BT_ERR("Unable to set identity address");
    289a:	e9cd 5500 	strd	r5, r5, [sp]
    289e:	4b47      	ldr	r3, [pc, #284]	; (29bc <hci_init+0x5a8>)
    28a0:	4a44      	ldr	r2, [pc, #272]	; (29b4 <hci_init+0x5a0>)
    28a2:	492e      	ldr	r1, [pc, #184]	; (295c <hci_init+0x548>)
    28a4:	4846      	ldr	r0, [pc, #280]	; (29c0 <hci_init+0x5ac>)
    28a6:	f7fe fd15 	bl	12d4 <printk>
			return err;
    28aa:	463c      	mov	r4, r7
    28ac:	e63d      	b.n	252a <hci_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    28ae:	aa09      	add	r2, sp, #36	; 0x24
    28b0:	2100      	movs	r1, #0
    28b2:	f64f 4009 	movw	r0, #64521	; 0xfc09
    28b6:	f7ff fc91 	bl	21dc <bt_hci_cmd_send_sync>
		if (err) {
    28ba:	b140      	cbz	r0, 28ce <hci_init+0x4ba>
			BT_WARN("Failed to read static addresses");
    28bc:	e9cd 5500 	strd	r5, r5, [sp]
    28c0:	4b3b      	ldr	r3, [pc, #236]	; (29b0 <hci_init+0x59c>)
    28c2:	4a30      	ldr	r2, [pc, #192]	; (2984 <hci_init+0x570>)
    28c4:	4925      	ldr	r1, [pc, #148]	; (295c <hci_init+0x548>)
    28c6:	483f      	ldr	r0, [pc, #252]	; (29c4 <hci_init+0x5b0>)
		BT_WARN("Read Static Addresses command not available");
    28c8:	f7fe fd04 	bl	12d4 <printk>
    28cc:	e019      	b.n	2902 <hci_init+0x4ee>
		rp = (void *)rsp->data;
    28ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28d0:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    28d2:	784b      	ldrb	r3, [r1, #1]
    28d4:	b153      	cbz	r3, 28ec <hci_init+0x4d8>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    28d6:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    28d8:	2206      	movs	r2, #6
    28da:	3102      	adds	r1, #2
    28dc:	483a      	ldr	r0, [pc, #232]	; (29c8 <hci_init+0x5b4>)
    28de:	7033      	strb	r3, [r6, #0]
    28e0:	f7fd fe7d 	bl	5de <memcpy>
			net_buf_unref(rsp);
    28e4:	9809      	ldr	r0, [sp, #36]	; 0x24
    28e6:	f008 f901 	bl	aaec <net_buf_unref>
    28ea:	e7c4      	b.n	2876 <hci_init+0x462>
		BT_WARN("No static addresses stored in controller");
    28ec:	e9cd 5500 	strd	r5, r5, [sp]
    28f0:	4b2f      	ldr	r3, [pc, #188]	; (29b0 <hci_init+0x59c>)
    28f2:	4a24      	ldr	r2, [pc, #144]	; (2984 <hci_init+0x570>)
    28f4:	4919      	ldr	r1, [pc, #100]	; (295c <hci_init+0x548>)
    28f6:	4835      	ldr	r0, [pc, #212]	; (29cc <hci_init+0x5b8>)
    28f8:	f7fe fcec 	bl	12d4 <printk>
		net_buf_unref(rsp);
    28fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    28fe:	f008 f8f5 	bl	aaec <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    2902:	4826      	ldr	r0, [pc, #152]	; (299c <hci_init+0x588>)
    2904:	f7ff fd78 	bl	23f8 <bt_addr_le_create_static>
	if (err) {
    2908:	4607      	mov	r7, r0
    290a:	2800      	cmp	r0, #0
    290c:	d1c5      	bne.n	289a <hci_init+0x486>
	if (bt_storage) {
    290e:	f8d8 3000 	ldr.w	r3, [r8]
    2912:	b183      	cbz	r3, 2936 <hci_init+0x522>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    2914:	f8d3 8004 	ldr.w	r8, [r3, #4]
    2918:	4a20      	ldr	r2, [pc, #128]	; (299c <hci_init+0x588>)
    291a:	2307      	movs	r3, #7
    291c:	4601      	mov	r1, r0
    291e:	47c0      	blx	r8
		if (ret != sizeof(bt_dev.id_addr)) {
    2920:	2807      	cmp	r0, #7
    2922:	d0a8      	beq.n	2876 <hci_init+0x462>
			BT_ERR("Unable to store static address");
    2924:	e9cd 5500 	strd	r5, r5, [sp]
    2928:	4b21      	ldr	r3, [pc, #132]	; (29b0 <hci_init+0x59c>)
    292a:	4a22      	ldr	r2, [pc, #136]	; (29b4 <hci_init+0x5a0>)
    292c:	490b      	ldr	r1, [pc, #44]	; (295c <hci_init+0x548>)
    292e:	4828      	ldr	r0, [pc, #160]	; (29d0 <hci_init+0x5bc>)
		BT_WARN("Using temporary static random address");
    2930:	f7fe fcd0 	bl	12d4 <printk>
    2934:	e79f      	b.n	2876 <hci_init+0x462>
    2936:	e9cd 5500 	strd	r5, r5, [sp]
    293a:	4b1d      	ldr	r3, [pc, #116]	; (29b0 <hci_init+0x59c>)
    293c:	4a11      	ldr	r2, [pc, #68]	; (2984 <hci_init+0x570>)
    293e:	4907      	ldr	r1, [pc, #28]	; (295c <hci_init+0x548>)
    2940:	4824      	ldr	r0, [pc, #144]	; (29d4 <hci_init+0x5c0>)
    2942:	e7f5      	b.n	2930 <hci_init+0x51c>
	err = set_random_address(&bt_dev.id_addr.a);
    2944:	4820      	ldr	r0, [pc, #128]	; (29c8 <hci_init+0x5b4>)
    2946:	f7ff fc87 	bl	2258 <set_random_address>
	if (err) {
    294a:	4607      	mov	r7, r0
    294c:	2800      	cmp	r0, #0
    294e:	d1a4      	bne.n	289a <hci_init+0x486>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2950:	2104      	movs	r1, #4
    2952:	4821      	ldr	r0, [pc, #132]	; (29d8 <hci_init+0x5c4>)
    2954:	f7ff fb84 	bl	2060 <atomic_or>
    2958:	e755      	b.n	2806 <hci_init+0x3f2>
    295a:	bf00      	nop
    295c:	0000c693 	.word	0x0000c693
    2960:	0000c794 	.word	0x0000c794
    2964:	0000cb88 	.word	0x0000cb88
    2968:	0000cc78 	.word	0x0000cc78
    296c:	0000c428 	.word	0x0000c428
    2970:	0000c78d 	.word	0x0000c78d
    2974:	0000cb7c 	.word	0x0000cb7c
    2978:	0000c7bd 	.word	0x0000c7bd
    297c:	0000cc68 	.word	0x0000cc68
    2980:	0000c7e5 	.word	0x0000c7e5
    2984:	0000c68c 	.word	0x0000c68c
    2988:	0000c822 	.word	0x0000c822
    298c:	2000372f 	.word	0x2000372f
    2990:	0000c85b 	.word	0x0000c85b
    2994:	2000372e 	.word	0x2000372e
    2998:	0000bd4c 	.word	0x0000bd4c
    299c:	200036d0 	.word	0x200036d0
    29a0:	0000c41a 	.word	0x0000c41a
    29a4:	0000ca0e 	.word	0x0000ca0e
    29a8:	0000ca2b 	.word	0x0000ca2b
    29ac:	0000ca79 	.word	0x0000ca79
    29b0:	0000c40a 	.word	0x0000c40a
    29b4:	0000c71e 	.word	0x0000c71e
    29b8:	0000c99e 	.word	0x0000c99e
    29bc:	0000c434 	.word	0x0000c434
    29c0:	0000c9df 	.word	0x0000c9df
    29c4:	0000c894 	.word	0x0000c894
    29c8:	200036d1 	.word	0x200036d1
    29cc:	0000c8c4 	.word	0x0000c8c4
    29d0:	0000c939 	.word	0x0000c939
    29d4:	0000c968 	.word	0x0000c968
    29d8:	20003740 	.word	0x20003740

000029dc <init_work>:
{
    29dc:	b510      	push	{r4, lr}
	err = hci_init();
    29de:	f7ff fd19 	bl	2414 <hci_init>
	if (err) {
    29e2:	4604      	mov	r4, r0
    29e4:	b930      	cbnz	r0, 29f4 <init_work+0x18>
    29e6:	2102      	movs	r1, #2
    29e8:	4806      	ldr	r0, [pc, #24]	; (2a04 <init_work+0x28>)
    29ea:	f7ff fb39 	bl	2060 <atomic_or>
	bt_le_scan_update(false);
    29ee:	4620      	mov	r0, r4
    29f0:	f7ff fcf1 	bl	23d6 <bt_le_scan_update>
	if (ready_cb) {
    29f4:	4b04      	ldr	r3, [pc, #16]	; (2a08 <init_work+0x2c>)
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	b11b      	cbz	r3, 2a02 <init_work+0x26>
		ready_cb(err);
    29fa:	4620      	mov	r0, r4
}
    29fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2a00:	4718      	bx	r3
}
    2a02:	bd10      	pop	{r4, pc}
    2a04:	20003740 	.word	0x20003740
    2a08:	20000718 	.word	0x20000718

00002a0c <bt_send>:
	return bt_dev.drv->send(buf);
    2a0c:	4b02      	ldr	r3, [pc, #8]	; (2a18 <bt_send+0xc>)
    2a0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    2a12:	68db      	ldr	r3, [r3, #12]
    2a14:	4718      	bx	r3
    2a16:	bf00      	nop
    2a18:	200036d0 	.word	0x200036d0

00002a1c <hci_tx_thread>:
{
    2a1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2a20:	4c44      	ldr	r4, [pc, #272]	; (2b34 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2a22:	4e45      	ldr	r6, [pc, #276]	; (2b38 <hci_tx_thread+0x11c>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2a24:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
		events[0].state = K_POLL_STATE_NOT_READY;
    2a28:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    2a2a:	4843      	ldr	r0, [pc, #268]	; (2b38 <hci_tx_thread+0x11c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2a2c:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(events, ev_count, K_FOREVER);
    2a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a34:	2101      	movs	r1, #1
		events[0].state = K_POLL_STATE_NOT_READY;
    2a36:	7373      	strb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    2a38:	f009 f872 	bl	bb20 <k_poll>
		BT_ASSERT(err == 0);
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d161      	bne.n	2b04 <hci_tx_thread+0xe8>
		switch (ev->state) {
    2a40:	7b73      	ldrb	r3, [r6, #13]
    2a42:	091b      	lsrs	r3, r3, #4
    2a44:	2b01      	cmp	r3, #1
    2a46:	d90b      	bls.n	2a60 <hci_tx_thread+0x44>
    2a48:	2b04      	cmp	r3, #4
    2a4a:	d00c      	beq.n	2a66 <hci_tx_thread+0x4a>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2a4c:	4a3b      	ldr	r2, [pc, #236]	; (2b3c <hci_tx_thread+0x120>)
    2a4e:	9200      	str	r2, [sp, #0]
		switch (ev->state) {
    2a50:	e9cd 3201 	strd	r3, r2, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    2a54:	493a      	ldr	r1, [pc, #232]	; (2b40 <hci_tx_thread+0x124>)
    2a56:	4b3b      	ldr	r3, [pc, #236]	; (2b44 <hci_tx_thread+0x128>)
    2a58:	4a3b      	ldr	r2, [pc, #236]	; (2b48 <hci_tx_thread+0x12c>)
    2a5a:	483c      	ldr	r0, [pc, #240]	; (2b4c <hci_tx_thread+0x130>)
    2a5c:	f7fe fc3a 	bl	12d4 <printk>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2a60:	f008 fc38 	bl	b2d4 <_impl_k_yield>
    2a64:	e7e0      	b.n	2a28 <hci_tx_thread+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2a66:	7b37      	ldrb	r7, [r6, #12]
    2a68:	2f00      	cmp	r7, #0
    2a6a:	d1f9      	bne.n	2a60 <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2a6c:	4639      	mov	r1, r7
    2a6e:	4640      	mov	r0, r8
    2a70:	f008 f812 	bl	aa98 <net_buf_get>
	BT_ASSERT(buf);
    2a74:	4605      	mov	r5, r0
    2a76:	2800      	cmp	r0, #0
    2a78:	d053      	beq.n	2b22 <hci_tx_thread+0x106>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2a7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2a7e:	4834      	ldr	r0, [pc, #208]	; (2b50 <hci_tx_thread+0x134>)
    2a80:	f008 fcfe 	bl	b480 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    2a84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    2a88:	bb63      	cbnz	r3, 2ae4 <hci_tx_thread+0xc8>
	bt_dev.sent_cmd = net_buf_ref(buf);
    2a8a:	4628      	mov	r0, r5
    2a8c:	f008 f85c 	bl	ab48 <net_buf_ref>
    2a90:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	err = bt_send(buf);
    2a94:	4628      	mov	r0, r5
    2a96:	f7ff ffb9 	bl	2a0c <bt_send>
	if (err) {
    2a9a:	2800      	cmp	r0, #0
    2a9c:	d0e0      	beq.n	2a60 <hci_tx_thread+0x44>
		BT_ERR("Unable to send to driver (err %d)", err);
    2a9e:	4b27      	ldr	r3, [pc, #156]	; (2b3c <hci_tx_thread+0x120>)
    2aa0:	4a2c      	ldr	r2, [pc, #176]	; (2b54 <hci_tx_thread+0x138>)
    2aa2:	4927      	ldr	r1, [pc, #156]	; (2b40 <hci_tx_thread+0x124>)
    2aa4:	9300      	str	r3, [sp, #0]
    2aa6:	e9cd 0301 	strd	r0, r3, [sp, #4]
    2aaa:	4b2b      	ldr	r3, [pc, #172]	; (2b58 <hci_tx_thread+0x13c>)
    2aac:	482b      	ldr	r0, [pc, #172]	; (2b5c <hci_tx_thread+0x140>)
    2aae:	f7fe fc11 	bl	12d4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2ab2:	4827      	ldr	r0, [pc, #156]	; (2b50 <hci_tx_thread+0x134>)
    2ab4:	f008 fc80 	bl	b3b8 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    2ab8:	4628      	mov	r0, r5
    2aba:	f007 ff59 	bl	a970 <net_buf_id>
    2abe:	4b28      	ldr	r3, [pc, #160]	; (2b60 <hci_tx_thread+0x144>)
    2ac0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2ac4:	2200      	movs	r2, #0
    2ac6:	211f      	movs	r1, #31
    2ac8:	8840      	ldrh	r0, [r0, #2]
    2aca:	f7ff fae7 	bl	209c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    2ace:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    2ad2:	f008 f80b 	bl	aaec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2ad6:	2300      	movs	r3, #0
		net_buf_unref(buf);
    2ad8:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    2ada:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    2ade:	f008 f805 	bl	aaec <net_buf_unref>
    2ae2:	e7bd      	b.n	2a60 <hci_tx_thread+0x44>
		BT_ERR("Uncleared pending sent_cmd");
    2ae4:	4b15      	ldr	r3, [pc, #84]	; (2b3c <hci_tx_thread+0x120>)
    2ae6:	4a1b      	ldr	r2, [pc, #108]	; (2b54 <hci_tx_thread+0x138>)
    2ae8:	4915      	ldr	r1, [pc, #84]	; (2b40 <hci_tx_thread+0x124>)
    2aea:	481e      	ldr	r0, [pc, #120]	; (2b64 <hci_tx_thread+0x148>)
    2aec:	e9cd 3300 	strd	r3, r3, [sp]
    2af0:	4b19      	ldr	r3, [pc, #100]	; (2b58 <hci_tx_thread+0x13c>)
    2af2:	f7fe fbef 	bl	12d4 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    2af6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    2afa:	f007 fff7 	bl	aaec <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    2afe:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    2b02:	e7c2      	b.n	2a8a <hci_tx_thread+0x6e>
		BT_ASSERT(err == 0);
    2b04:	4b0d      	ldr	r3, [pc, #52]	; (2b3c <hci_tx_thread+0x120>)
    2b06:	4a13      	ldr	r2, [pc, #76]	; (2b54 <hci_tx_thread+0x138>)
    2b08:	490d      	ldr	r1, [pc, #52]	; (2b40 <hci_tx_thread+0x124>)
    2b0a:	4817      	ldr	r0, [pc, #92]	; (2b68 <hci_tx_thread+0x14c>)
    2b0c:	e9cd 3300 	strd	r3, r3, [sp]
    2b10:	4b16      	ldr	r3, [pc, #88]	; (2b6c <hci_tx_thread+0x150>)
	BT_ASSERT(buf);
    2b12:	f7fe fbdf 	bl	12d4 <printk>
    2b16:	4040      	eors	r0, r0
    2b18:	f380 8811 	msr	BASEPRI, r0
    2b1c:	f04f 0004 	mov.w	r0, #4
    2b20:	df02      	svc	2
    2b22:	4b06      	ldr	r3, [pc, #24]	; (2b3c <hci_tx_thread+0x120>)
    2b24:	4a0b      	ldr	r2, [pc, #44]	; (2b54 <hci_tx_thread+0x138>)
    2b26:	4906      	ldr	r1, [pc, #24]	; (2b40 <hci_tx_thread+0x124>)
    2b28:	4811      	ldr	r0, [pc, #68]	; (2b70 <hci_tx_thread+0x154>)
    2b2a:	e9cd 3300 	strd	r3, r3, [sp]
    2b2e:	4b0a      	ldr	r3, [pc, #40]	; (2b58 <hci_tx_thread+0x13c>)
    2b30:	e7ef      	b.n	2b12 <hci_tx_thread+0xf6>
    2b32:	bf00      	nop
    2b34:	200036d0 	.word	0x200036d0
    2b38:	20003798 	.word	0x20003798
    2b3c:	0000bda7 	.word	0x0000bda7
    2b40:	0000c693 	.word	0x0000c693
    2b44:	0000c3e5 	.word	0x0000c3e5
    2b48:	0000c68c 	.word	0x0000c68c
    2b4c:	0000cab0 	.word	0x0000cab0
    2b50:	20003758 	.word	0x20003758
    2b54:	0000c71e 	.word	0x0000c71e
    2b58:	0000c3dc 	.word	0x0000c3dc
    2b5c:	0000c4b1 	.word	0x0000c4b1
    2b60:	200006c0 	.word	0x200006c0
    2b64:	0000cae1 	.word	0x0000cae1
    2b68:	0000cb0c 	.word	0x0000cb0c
    2b6c:	0000c3f4 	.word	0x0000c3f4
    2b70:	0000cb36 	.word	0x0000cb36

00002b74 <bt_recv>:
{
    2b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    2b78:	7d06      	ldrb	r6, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    2b7a:	2e01      	cmp	r6, #1
{
    2b7c:	b08b      	sub	sp, #44	; 0x2c
    2b7e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2b80:	f040 80c4 	bne.w	2d0c <bt_recv+0x198>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2b84:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2b86:	783b      	ldrb	r3, [r7, #0]
    2b88:	3b0e      	subs	r3, #14
    2b8a:	2b01      	cmp	r3, #1
    2b8c:	d80e      	bhi.n	2bac <bt_recv+0x38>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2b8e:	4b67      	ldr	r3, [pc, #412]	; (2d2c <bt_recv+0x1b8>)
    2b90:	4a67      	ldr	r2, [pc, #412]	; (2d30 <bt_recv+0x1bc>)
    2b92:	4968      	ldr	r1, [pc, #416]	; (2d34 <bt_recv+0x1c0>)
    2b94:	4868      	ldr	r0, [pc, #416]	; (2d38 <bt_recv+0x1c4>)
    2b96:	e9cd 3300 	strd	r3, r3, [sp]
    2b9a:	4b68      	ldr	r3, [pc, #416]	; (2d3c <bt_recv+0x1c8>)
    2b9c:	f7fe fb9a 	bl	12d4 <printk>
    2ba0:	4040      	eors	r0, r0
    2ba2:	f380 8811 	msr	BASEPRI, r0
    2ba6:	f04f 0004 	mov.w	r0, #4
    2baa:	df02      	svc	2
	net_buf_pull(buf, sizeof(*hdr));
    2bac:	f100 0308 	add.w	r3, r0, #8
    2bb0:	2102      	movs	r1, #2
    2bb2:	4618      	mov	r0, r3
    2bb4:	9307      	str	r3, [sp, #28]
    2bb6:	f007 ffe2 	bl	ab7e <net_buf_simple_pull>
	switch (hdr->evt) {
    2bba:	783f      	ldrb	r7, [r7, #0]
    2bbc:	2f3e      	cmp	r7, #62	; 0x3e
    2bbe:	f040 8095 	bne.w	2cec <bt_recv+0x178>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    2bc2:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2bc4:	9807      	ldr	r0, [sp, #28]
    2bc6:	4631      	mov	r1, r6
    2bc8:	f007 ffd9 	bl	ab7e <net_buf_simple_pull>
	switch (evt->subevent) {
    2bcc:	783e      	ldrb	r6, [r7, #0]
    2bce:	2e08      	cmp	r6, #8
    2bd0:	d044      	beq.n	2c5c <bt_recv+0xe8>
    2bd2:	2e09      	cmp	r6, #9
    2bd4:	d067      	beq.n	2ca6 <bt_recv+0x132>
    2bd6:	2e02      	cmp	r6, #2
    2bd8:	d176      	bne.n	2cc8 <bt_recv+0x154>
	u8_t num_reports = net_buf_pull_u8(buf);
    2bda:	9807      	ldr	r0, [sp, #28]
		if (scan_dev_found_cb) {
    2bdc:	4f58      	ldr	r7, [pc, #352]	; (2d40 <bt_recv+0x1cc>)
	u8_t num_reports = net_buf_pull_u8(buf);
    2bde:	f007 ffd6 	bl	ab8e <net_buf_simple_pull_u8>
    2be2:	4680      	mov	r8, r0
	while (num_reports--) {
    2be4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2be8:	fa5f f888 	uxtb.w	r8, r8
    2bec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    2bf0:	d049      	beq.n	2c86 <bt_recv+0x112>
		info = (void *)buf->data;
    2bf2:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    2bf4:	9807      	ldr	r0, [sp, #28]
    2bf6:	2109      	movs	r1, #9
    2bf8:	f007 ffc1 	bl	ab7e <net_buf_simple_pull>
		rssi = info->data[info->length];
    2bfc:	7a33      	ldrb	r3, [r6, #8]
    2bfe:	4433      	add	r3, r6
    2c00:	1c71      	adds	r1, r6, #1
    2c02:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2c06:	7873      	ldrb	r3, [r6, #1]
    2c08:	3b02      	subs	r3, #2
    2c0a:	2b01      	cmp	r3, #1
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    2c0c:	f04f 0207 	mov.w	r2, #7
    2c10:	a808      	add	r0, sp, #32
    2c12:	d856      	bhi.n	2cc2 <bt_recv+0x14e>
    2c14:	f7fd fce3 	bl	5de <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2c18:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2c1c:	3b02      	subs	r3, #2
    2c1e:	f88d 3020 	strb.w	r3, [sp, #32]
		if (scan_dev_found_cb) {
    2c22:	683b      	ldr	r3, [r7, #0]
    2c24:	b1a3      	cbz	r3, 2c50 <bt_recv+0xdc>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2c26:	9807      	ldr	r0, [sp, #28]
    2c28:	f007 ffb9 	bl	ab9e <net_buf_simple_headroom>
			buf->len = info->length;
    2c2c:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    2c2e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
    2c32:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    2c34:	4681      	mov	r9, r0
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2c36:	9b07      	ldr	r3, [sp, #28]
    2c38:	7832      	ldrb	r2, [r6, #0]
    2c3a:	683d      	ldr	r5, [r7, #0]
    2c3c:	fa4f f18b 	sxtb.w	r1, fp
    2c40:	a808      	add	r0, sp, #32
    2c42:	47a8      	blx	r5
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2c44:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    2c46:	f8a4 a00c 	strh.w	sl, [r4, #12]
	buf->data = buf->__buf + state->offset;
    2c4a:	fa13 f389 	uxtah	r3, r3, r9
    2c4e:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    2c50:	7a31      	ldrb	r1, [r6, #8]
    2c52:	9807      	ldr	r0, [sp, #28]
    2c54:	3101      	adds	r1, #1
    2c56:	f007 ff92 	bl	ab7e <net_buf_simple_pull>
    2c5a:	e7c3      	b.n	2be4 <bt_recv+0x70>
    2c5c:	68a7      	ldr	r7, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c5e:	4839      	ldr	r0, [pc, #228]	; (2d44 <bt_recv+0x1d0>)
    2c60:	f06f 0110 	mvn.w	r1, #16
    2c64:	f7ff fa0b 	bl	207e <atomic_and>
	if (!evt->status) {
    2c68:	783b      	ldrb	r3, [r7, #0]
    2c6a:	b943      	cbnz	r3, 2c7e <bt_recv+0x10a>
		memcpy(pub_key, evt->key, 64);
    2c6c:	1c79      	adds	r1, r7, #1
    2c6e:	2240      	movs	r2, #64	; 0x40
    2c70:	4835      	ldr	r0, [pc, #212]	; (2d48 <bt_recv+0x1d4>)
    2c72:	f7fd fcb4 	bl	5de <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2c76:	4631      	mov	r1, r6
    2c78:	4832      	ldr	r0, [pc, #200]	; (2d44 <bt_recv+0x1d0>)
    2c7a:	f7ff f9f1 	bl	2060 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2c7e:	4b33      	ldr	r3, [pc, #204]	; (2d4c <bt_recv+0x1d8>)
    2c80:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    2c82:	1c7e      	adds	r6, r7, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2c84:	b935      	cbnz	r5, 2c94 <bt_recv+0x120>
	net_buf_unref(buf);
    2c86:	4620      	mov	r0, r4
    2c88:	f007 ff30 	bl	aaec <net_buf_unref>
		return 0;
    2c8c:	2000      	movs	r0, #0
}
    2c8e:	b00b      	add	sp, #44	; 0x2c
    2c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    2c94:	783a      	ldrb	r2, [r7, #0]
    2c96:	682b      	ldr	r3, [r5, #0]
    2c98:	2a00      	cmp	r2, #0
    2c9a:	bf0c      	ite	eq
    2c9c:	4630      	moveq	r0, r6
    2c9e:	2000      	movne	r0, #0
    2ca0:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2ca2:	686d      	ldr	r5, [r5, #4]
    2ca4:	e7ee      	b.n	2c84 <bt_recv+0x110>
	if (dh_key_cb) {
    2ca6:	4d2a      	ldr	r5, [pc, #168]	; (2d50 <bt_recv+0x1dc>)
    2ca8:	682a      	ldr	r2, [r5, #0]
    2caa:	2a00      	cmp	r2, #0
    2cac:	d0eb      	beq.n	2c86 <bt_recv+0x112>
    2cae:	68a0      	ldr	r0, [r4, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2cb0:	7803      	ldrb	r3, [r0, #0]
    2cb2:	b923      	cbnz	r3, 2cbe <bt_recv+0x14a>
    2cb4:	3001      	adds	r0, #1
    2cb6:	4790      	blx	r2
		dh_key_cb = NULL;
    2cb8:	2300      	movs	r3, #0
    2cba:	602b      	str	r3, [r5, #0]
    2cbc:	e7e3      	b.n	2c86 <bt_recv+0x112>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2cbe:	2000      	movs	r0, #0
    2cc0:	e7f9      	b.n	2cb6 <bt_recv+0x142>
    2cc2:	f7fd fc8c 	bl	5de <memcpy>
    2cc6:	e7ac      	b.n	2c22 <bt_recv+0xae>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    2cc8:	89a5      	ldrh	r5, [r4, #12]
    2cca:	68a0      	ldr	r0, [r4, #8]
    2ccc:	4629      	mov	r1, r5
    2cce:	f7ff f929 	bl	1f24 <bt_hex>
    2cd2:	4b16      	ldr	r3, [pc, #88]	; (2d2c <bt_recv+0x1b8>)
    2cd4:	9300      	str	r3, [sp, #0]
	switch (evt->subevent) {
    2cd6:	e9cd 6501 	strd	r6, r5, [sp, #4]
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    2cda:	e9cd 0303 	strd	r0, r3, [sp, #12]
    2cde:	4a1d      	ldr	r2, [pc, #116]	; (2d54 <bt_recv+0x1e0>)
    2ce0:	4b1d      	ldr	r3, [pc, #116]	; (2d58 <bt_recv+0x1e4>)
    2ce2:	4914      	ldr	r1, [pc, #80]	; (2d34 <bt_recv+0x1c0>)
    2ce4:	481d      	ldr	r0, [pc, #116]	; (2d5c <bt_recv+0x1e8>)
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    2ce6:	f7fe faf5 	bl	12d4 <printk>
    2cea:	e7cc      	b.n	2c86 <bt_recv+0x112>
    2cec:	89a5      	ldrh	r5, [r4, #12]
    2cee:	68a0      	ldr	r0, [r4, #8]
    2cf0:	4629      	mov	r1, r5
    2cf2:	f7ff f917 	bl	1f24 <bt_hex>
    2cf6:	4b0d      	ldr	r3, [pc, #52]	; (2d2c <bt_recv+0x1b8>)
    2cf8:	9300      	str	r3, [sp, #0]
    2cfa:	e9cd 0303 	strd	r0, r3, [sp, #12]
	switch (hdr->evt) {
    2cfe:	e9cd 7501 	strd	r7, r5, [sp, #4]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    2d02:	4b0e      	ldr	r3, [pc, #56]	; (2d3c <bt_recv+0x1c8>)
    2d04:	4a13      	ldr	r2, [pc, #76]	; (2d54 <bt_recv+0x1e0>)
    2d06:	490b      	ldr	r1, [pc, #44]	; (2d34 <bt_recv+0x1c0>)
    2d08:	4815      	ldr	r0, [pc, #84]	; (2d60 <bt_recv+0x1ec>)
    2d0a:	e7ec      	b.n	2ce6 <bt_recv+0x172>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    2d0c:	4b07      	ldr	r3, [pc, #28]	; (2d2c <bt_recv+0x1b8>)
    2d0e:	9300      	str	r3, [sp, #0]
	switch (bt_buf_get_type(buf)) {
    2d10:	e9cd 6301 	strd	r6, r3, [sp, #4]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    2d14:	4a06      	ldr	r2, [pc, #24]	; (2d30 <bt_recv+0x1bc>)
    2d16:	4b13      	ldr	r3, [pc, #76]	; (2d64 <bt_recv+0x1f0>)
    2d18:	4906      	ldr	r1, [pc, #24]	; (2d34 <bt_recv+0x1c0>)
    2d1a:	4813      	ldr	r0, [pc, #76]	; (2d68 <bt_recv+0x1f4>)
    2d1c:	f7fe fada 	bl	12d4 <printk>
		net_buf_unref(buf);
    2d20:	4620      	mov	r0, r4
    2d22:	f007 fee3 	bl	aaec <net_buf_unref>
		return -EINVAL;
    2d26:	f06f 0015 	mvn.w	r0, #21
    2d2a:	e7b0      	b.n	2c8e <bt_recv+0x11a>
    2d2c:	0000bda7 	.word	0x0000bda7
    2d30:	0000c71e 	.word	0x0000c71e
    2d34:	0000c693 	.word	0x0000c693
    2d38:	0000c4e3 	.word	0x0000c4e3
    2d3c:	0000c3d2 	.word	0x0000c3d2
    2d40:	2000071c 	.word	0x2000071c
    2d44:	20003740 	.word	0x20003740
    2d48:	200006d4 	.word	0x200006d4
    2d4c:	20000714 	.word	0x20000714
    2d50:	200006d0 	.word	0x200006d0
    2d54:	0000c68c 	.word	0x0000c68c
    2d58:	0000c3c0 	.word	0x0000c3c0
    2d5c:	0000c522 	.word	0x0000c522
    2d60:	0000c557 	.word	0x0000c557
    2d64:	0000c43d 	.word	0x0000c43d
    2d68:	0000c589 	.word	0x0000c589

00002d6c <bt_recv_prio>:
{
    2d6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2d70:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2d72:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2d74:	2b01      	cmp	r3, #1
{
    2d76:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2d78:	d00e      	beq.n	2d98 <bt_recv_prio+0x2c>
    2d7a:	4b32      	ldr	r3, [pc, #200]	; (2e44 <bt_recv_prio+0xd8>)
    2d7c:	4a32      	ldr	r2, [pc, #200]	; (2e48 <bt_recv_prio+0xdc>)
    2d7e:	4933      	ldr	r1, [pc, #204]	; (2e4c <bt_recv_prio+0xe0>)
    2d80:	4833      	ldr	r0, [pc, #204]	; (2e50 <bt_recv_prio+0xe4>)
    2d82:	e9cd 3300 	strd	r3, r3, [sp]
    2d86:	4b33      	ldr	r3, [pc, #204]	; (2e54 <bt_recv_prio+0xe8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2d88:	f7fe faa4 	bl	12d4 <printk>
    2d8c:	4040      	eors	r0, r0
    2d8e:	f380 8811 	msr	BASEPRI, r0
    2d92:	f04f 0004 	mov.w	r0, #4
    2d96:	df02      	svc	2
    2d98:	8983      	ldrh	r3, [r0, #12]
    2d9a:	2b01      	cmp	r3, #1
    2d9c:	d807      	bhi.n	2dae <bt_recv_prio+0x42>
    2d9e:	4b29      	ldr	r3, [pc, #164]	; (2e44 <bt_recv_prio+0xd8>)
    2da0:	4a29      	ldr	r2, [pc, #164]	; (2e48 <bt_recv_prio+0xdc>)
    2da2:	492a      	ldr	r1, [pc, #168]	; (2e4c <bt_recv_prio+0xe0>)
    2da4:	482c      	ldr	r0, [pc, #176]	; (2e58 <bt_recv_prio+0xec>)
    2da6:	e9cd 3300 	strd	r3, r3, [sp]
    2daa:	4b2a      	ldr	r3, [pc, #168]	; (2e54 <bt_recv_prio+0xe8>)
    2dac:	e7ec      	b.n	2d88 <bt_recv_prio+0x1c>
    2dae:	782b      	ldrb	r3, [r5, #0]
    2db0:	3b0e      	subs	r3, #14
    2db2:	2b01      	cmp	r3, #1
    2db4:	d815      	bhi.n	2de2 <bt_recv_prio+0x76>
	net_buf_pull(buf, sizeof(*hdr));
    2db6:	f100 0608 	add.w	r6, r0, #8
    2dba:	2102      	movs	r1, #2
    2dbc:	4630      	mov	r0, r6
    2dbe:	f007 fede 	bl	ab7e <net_buf_simple_pull>
	switch (hdr->evt) {
    2dc2:	782b      	ldrb	r3, [r5, #0]
    2dc4:	2b0e      	cmp	r3, #14
    2dc6:	d014      	beq.n	2df2 <bt_recv_prio+0x86>
    2dc8:	2b0f      	cmp	r3, #15
    2dca:	d02b      	beq.n	2e24 <bt_recv_prio+0xb8>
		net_buf_unref(buf);
    2dcc:	4620      	mov	r0, r4
    2dce:	f007 fe8d 	bl	aaec <net_buf_unref>
		BT_ASSERT(0);
    2dd2:	4b1c      	ldr	r3, [pc, #112]	; (2e44 <bt_recv_prio+0xd8>)
    2dd4:	4a1c      	ldr	r2, [pc, #112]	; (2e48 <bt_recv_prio+0xdc>)
    2dd6:	491d      	ldr	r1, [pc, #116]	; (2e4c <bt_recv_prio+0xe0>)
    2dd8:	4820      	ldr	r0, [pc, #128]	; (2e5c <bt_recv_prio+0xf0>)
    2dda:	e9cd 3300 	strd	r3, r3, [sp]
    2dde:	4b1d      	ldr	r3, [pc, #116]	; (2e54 <bt_recv_prio+0xe8>)
    2de0:	e7d2      	b.n	2d88 <bt_recv_prio+0x1c>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2de2:	4b18      	ldr	r3, [pc, #96]	; (2e44 <bt_recv_prio+0xd8>)
    2de4:	4a18      	ldr	r2, [pc, #96]	; (2e48 <bt_recv_prio+0xdc>)
    2de6:	4919      	ldr	r1, [pc, #100]	; (2e4c <bt_recv_prio+0xe0>)
    2de8:	481d      	ldr	r0, [pc, #116]	; (2e60 <bt_recv_prio+0xf4>)
    2dea:	e9cd 3300 	strd	r3, r3, [sp]
    2dee:	4b19      	ldr	r3, [pc, #100]	; (2e54 <bt_recv_prio+0xe8>)
    2df0:	e7ca      	b.n	2d88 <bt_recv_prio+0x1c>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    2df2:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2df4:	2103      	movs	r1, #3
    2df6:	4630      	mov	r0, r6
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    2df8:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    2dfc:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    2dfe:	f007 febe 	bl	ab7e <net_buf_simple_pull>
	status = buf->data[0];
    2e02:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    2e04:	4622      	mov	r2, r4
    2e06:	7819      	ldrb	r1, [r3, #0]
    2e08:	4638      	mov	r0, r7
    2e0a:	f7ff f947 	bl	209c <hci_cmd_done>
	if (ncmd) {
    2e0e:	b115      	cbz	r5, 2e16 <bt_recv_prio+0xaa>
    2e10:	4814      	ldr	r0, [pc, #80]	; (2e64 <bt_recv_prio+0xf8>)
    2e12:	f008 fad1 	bl	b3b8 <_impl_k_sem_give>
	net_buf_unref(buf);
    2e16:	4620      	mov	r0, r4
    2e18:	f007 fe68 	bl	aaec <net_buf_unref>
}
    2e1c:	2000      	movs	r0, #0
    2e1e:	b002      	add	sp, #8
    2e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    2e24:	68a5      	ldr	r5, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    2e26:	f8b5 8002 	ldrh.w	r8, [r5, #2]
	u8_t ncmd = evt->ncmd;
    2e2a:	786f      	ldrb	r7, [r5, #1]
	net_buf_pull(buf, sizeof(*evt));
    2e2c:	2104      	movs	r1, #4
    2e2e:	4630      	mov	r0, r6
    2e30:	f007 fea5 	bl	ab7e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    2e34:	4622      	mov	r2, r4
    2e36:	7829      	ldrb	r1, [r5, #0]
    2e38:	4640      	mov	r0, r8
    2e3a:	f7ff f92f 	bl	209c <hci_cmd_done>
	if (ncmd) {
    2e3e:	2f00      	cmp	r7, #0
    2e40:	d0e9      	beq.n	2e16 <bt_recv_prio+0xaa>
    2e42:	e7e5      	b.n	2e10 <bt_recv_prio+0xa4>
    2e44:	0000bda7 	.word	0x0000bda7
    2e48:	0000c71e 	.word	0x0000c71e
    2e4c:	0000c693 	.word	0x0000c693
    2e50:	0000c5ad 	.word	0x0000c5ad
    2e54:	0000c445 	.word	0x0000c445
    2e58:	0000c5f1 	.word	0x0000c5f1
    2e5c:	0000c669 	.word	0x0000c669
    2e60:	0000c62b 	.word	0x0000c62b
    2e64:	20003758 	.word	0x20003758

00002e68 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    2e68:	4a08      	ldr	r2, [pc, #32]	; (2e8c <bt_hci_driver_register+0x24>)
    2e6a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2e6e:	b93b      	cbnz	r3, 2e80 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    2e70:	6881      	ldr	r1, [r0, #8]
    2e72:	b141      	cbz	r1, 2e86 <bt_hci_driver_register+0x1e>
    2e74:	68c1      	ldr	r1, [r0, #12]
    2e76:	b131      	cbz	r1, 2e86 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    2e78:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	return 0;
    2e7c:	4618      	mov	r0, r3
    2e7e:	4770      	bx	lr
		return -EALREADY;
    2e80:	f06f 0044 	mvn.w	r0, #68	; 0x44
    2e84:	4770      	bx	lr
		return -EINVAL;
    2e86:	f06f 0015 	mvn.w	r0, #21
}
    2e8a:	4770      	bx	lr
    2e8c:	200036d0 	.word	0x200036d0

00002e90 <bt_enable>:
{
    2e90:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    2e92:	4d2e      	ldr	r5, [pc, #184]	; (2f4c <bt_enable+0xbc>)
    2e94:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
{
    2e98:	b086      	sub	sp, #24
    2e9a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    2e9c:	b96b      	cbnz	r3, 2eba <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    2e9e:	4b2c      	ldr	r3, [pc, #176]	; (2f50 <bt_enable+0xc0>)
    2ea0:	4a2c      	ldr	r2, [pc, #176]	; (2f54 <bt_enable+0xc4>)
    2ea2:	492d      	ldr	r1, [pc, #180]	; (2f58 <bt_enable+0xc8>)
    2ea4:	482d      	ldr	r0, [pc, #180]	; (2f5c <bt_enable+0xcc>)
    2ea6:	e9cd 3300 	strd	r3, r3, [sp]
    2eaa:	4b2d      	ldr	r3, [pc, #180]	; (2f60 <bt_enable+0xd0>)
    2eac:	f7fe fa12 	bl	12d4 <printk>
		return -ENODEV;
    2eb0:	f06f 0412 	mvn.w	r4, #18
}
    2eb4:	4620      	mov	r0, r4
    2eb6:	b006      	add	sp, #24
    2eb8:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2eba:	2101      	movs	r1, #1
    2ebc:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2ec0:	f7ff f8ce 	bl	2060 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    2ec4:	f010 0001 	ands.w	r0, r0, #1
    2ec8:	d13d      	bne.n	2f46 <bt_enable+0xb6>
	ready_cb = cb;
    2eca:	4b26      	ldr	r3, [pc, #152]	; (2f64 <bt_enable+0xd4>)
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    2ecc:	4926      	ldr	r1, [pc, #152]	; (2f68 <bt_enable+0xd8>)
    2ece:	601e      	str	r6, [r3, #0]
    2ed0:	f06f 0308 	mvn.w	r3, #8
    2ed4:	e9cd 0302 	strd	r0, r3, [sp, #8]
    2ed8:	e9cd 0004 	strd	r0, r0, [sp, #16]
    2edc:	e9cd 0000 	strd	r0, r0, [sp]
    2ee0:	4b22      	ldr	r3, [pc, #136]	; (2f6c <bt_enable+0xdc>)
    2ee2:	4823      	ldr	r0, [pc, #140]	; (2f70 <bt_enable+0xe0>)
    2ee4:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    2ee8:	f008 fc82 	bl	b7f0 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    2eec:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2ef0:	689b      	ldr	r3, [r3, #8]
    2ef2:	4798      	blx	r3
	if (err) {
    2ef4:	4604      	mov	r4, r0
    2ef6:	b150      	cbz	r0, 2f0e <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    2ef8:	4b15      	ldr	r3, [pc, #84]	; (2f50 <bt_enable+0xc0>)
    2efa:	9300      	str	r3, [sp, #0]
    2efc:	e9cd 0301 	strd	r0, r3, [sp, #4]
    2f00:	4a14      	ldr	r2, [pc, #80]	; (2f54 <bt_enable+0xc4>)
    2f02:	4b17      	ldr	r3, [pc, #92]	; (2f60 <bt_enable+0xd0>)
    2f04:	4914      	ldr	r1, [pc, #80]	; (2f58 <bt_enable+0xc8>)
    2f06:	481b      	ldr	r0, [pc, #108]	; (2f74 <bt_enable+0xe4>)
    2f08:	f7fe f9e4 	bl	12d4 <printk>
		return err;
    2f0c:	e7d2      	b.n	2eb4 <bt_enable+0x24>
	if (!cb) {
    2f0e:	b96e      	cbnz	r6, 2f2c <bt_enable+0x9c>
	err = hci_init();
    2f10:	f7ff fa80 	bl	2414 <hci_init>
	if (err) {
    2f14:	4604      	mov	r4, r0
    2f16:	2800      	cmp	r0, #0
    2f18:	d1cc      	bne.n	2eb4 <bt_enable+0x24>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2f1a:	2102      	movs	r1, #2
    2f1c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2f20:	f7ff f89e 	bl	2060 <atomic_or>
	bt_le_scan_update(false);
    2f24:	4620      	mov	r0, r4
    2f26:	f7ff fa56 	bl	23d6 <bt_le_scan_update>
    2f2a:	e7c3      	b.n	2eb4 <bt_enable+0x24>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2f2c:	2101      	movs	r1, #1
    2f2e:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2f32:	f7ff f895 	bl	2060 <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    2f36:	07c3      	lsls	r3, r0, #31
    2f38:	d4bc      	bmi.n	2eb4 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    2f3a:	f105 0164 	add.w	r1, r5, #100	; 0x64
    2f3e:	480e      	ldr	r0, [pc, #56]	; (2f78 <bt_enable+0xe8>)
    2f40:	f008 f803 	bl	af4a <k_queue_append>
    2f44:	e7b6      	b.n	2eb4 <bt_enable+0x24>
		return -EALREADY;
    2f46:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2f4a:	e7b3      	b.n	2eb4 <bt_enable+0x24>
    2f4c:	200036d0 	.word	0x200036d0
    2f50:	0000bda7 	.word	0x0000bda7
    2f54:	0000c71e 	.word	0x0000c71e
    2f58:	0000c693 	.word	0x0000c693
    2f5c:	0000c45c 	.word	0x0000c45c
    2f60:	0000c452 	.word	0x0000c452
    2f64:	20000718 	.word	0x20000718
    2f68:	20001760 	.word	0x20001760
    2f6c:	00002a1d 	.word	0x00002a1d
    2f70:	20000720 	.word	0x20000720
    2f74:	0000c485 	.word	0x0000c485
    2f78:	200016e8 	.word	0x200016e8

00002f7c <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    2f7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    2f7e:	4605      	mov	r5, r0
    2f80:	461e      	mov	r6, r3
    2f82:	8843      	ldrh	r3, [r0, #2]
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2f84:	7800      	ldrb	r0, [r0, #0]
    2f86:	07c0      	lsls	r0, r0, #31
    2f88:	d40a      	bmi.n	2fa0 <bt_le_adv_start+0x24>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    2f8a:	4850      	ldr	r0, [pc, #320]	; (30cc <bt_le_adv_start+0x150>)
    2f8c:	7b80      	ldrb	r0, [r0, #14]
    2f8e:	2808      	cmp	r0, #8
    2f90:	d806      	bhi.n	2fa0 <bt_le_adv_start+0x24>
    2f92:	2b9f      	cmp	r3, #159	; 0x9f
    2f94:	d804      	bhi.n	2fa0 <bt_le_adv_start+0x24>
	struct bt_hci_cp_le_set_adv_param set_param;
	struct net_buf *buf;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    2f96:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    2f9a:	4620      	mov	r0, r4
    2f9c:	b004      	add	sp, #16
    2f9e:	bd70      	pop	{r4, r5, r6, pc}
	if (param->interval_min > param->interval_max ||
    2fa0:	88a8      	ldrh	r0, [r5, #4]
    2fa2:	4298      	cmp	r0, r3
    2fa4:	d3f7      	bcc.n	2f96 <bt_le_adv_start+0x1a>
    2fa6:	2b1f      	cmp	r3, #31
    2fa8:	d9f5      	bls.n	2f96 <bt_le_adv_start+0x1a>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    2faa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    2fae:	d8f2      	bhi.n	2f96 <bt_le_adv_start+0x1a>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2fb0:	2005      	movs	r0, #5
    2fb2:	f7ff f8d5 	bl	2160 <atomic_test_bit.constprop.23>
    2fb6:	2800      	cmp	r0, #0
    2fb8:	f040 8085 	bne.w	30c6 <bt_le_adv_start+0x14a>
	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    2fbc:	f242 0008 	movw	r0, #8200	; 0x2008
    2fc0:	f7ff f9be 	bl	2340 <set_ad>
	if (err) {
    2fc4:	4604      	mov	r4, r0
    2fc6:	2800      	cmp	r0, #0
    2fc8:	d1e7      	bne.n	2f9a <bt_le_adv_start+0x1e>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2fca:	bb5e      	cbnz	r6, 3024 <bt_le_adv_start+0xa8>
    2fcc:	782b      	ldrb	r3, [r5, #0]
    2fce:	07d9      	lsls	r1, r3, #31
    2fd0:	d428      	bmi.n	3024 <bt_le_adv_start+0xa8>
	memset(&set_param, 0, sizeof(set_param));
    2fd2:	220f      	movs	r2, #15
    2fd4:	2100      	movs	r1, #0
    2fd6:	4668      	mov	r0, sp
    2fd8:	f7fd fb2e 	bl	638 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    2fdc:	886b      	ldrh	r3, [r5, #2]
    2fde:	f8ad 3000 	strh.w	r3, [sp]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    2fe2:	88ab      	ldrh	r3, [r5, #4]
    2fe4:	f8ad 3002 	strh.w	r3, [sp, #2]
	set_param.channel_map  = 0x07;
    2fe8:	2307      	movs	r3, #7
    2fea:	f88d 300d 	strb.w	r3, [sp, #13]
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    2fee:	782b      	ldrb	r3, [r5, #0]
    2ff0:	07da      	lsls	r2, r3, #31
    2ff2:	d521      	bpl.n	3038 <bt_le_adv_start+0xbc>
			if (atomic_test_bit(bt_dev.flags,
    2ff4:	2002      	movs	r0, #2
    2ff6:	f7ff f8b3 	bl	2160 <atomic_test_bit.constprop.23>
    2ffa:	b110      	cbz	r0, 3002 <bt_le_adv_start+0x86>
				set_random_address(&bt_dev.id_addr.a);
    2ffc:	4834      	ldr	r0, [pc, #208]	; (30d0 <bt_le_adv_start+0x154>)
    2ffe:	f7ff f92b 	bl	2258 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    3002:	4b32      	ldr	r3, [pc, #200]	; (30cc <bt_le_adv_start+0x150>)
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	f88d 3005 	strb.w	r3, [sp, #5]
		set_param.type = BT_LE_ADV_IND;
    300a:	2300      	movs	r3, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    300c:	210f      	movs	r1, #15
    300e:	f242 0006 	movw	r0, #8198	; 0x2006
			set_param.type = BT_LE_ADV_NONCONN_IND;
    3012:	f88d 3004 	strb.w	r3, [sp, #4]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    3016:	f7ff f8b1 	bl	217c <bt_hci_cmd_create>
	if (!buf) {
    301a:	4604      	mov	r4, r0
    301c:	bb10      	cbnz	r0, 3064 <bt_le_adv_start+0xe8>
		return -ENOBUFS;
    301e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3022:	e7ba      	b.n	2f9a <bt_le_adv_start+0x1e>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    3024:	9a08      	ldr	r2, [sp, #32]
    3026:	4631      	mov	r1, r6
    3028:	f242 0009 	movw	r0, #8201	; 0x2009
    302c:	f7ff f988 	bl	2340 <set_ad>
		if (err) {
    3030:	4604      	mov	r4, r0
    3032:	2800      	cmp	r0, #0
    3034:	d0cd      	beq.n	2fd2 <bt_le_adv_start+0x56>
    3036:	e7b0      	b.n	2f9a <bt_le_adv_start+0x1e>
		if (param->own_addr) {
    3038:	68a8      	ldr	r0, [r5, #8]
    303a:	b170      	cbz	r0, 305a <bt_le_adv_start+0xde>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    303c:	7943      	ldrb	r3, [r0, #5]
    303e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    3042:	d1a8      	bne.n	2f96 <bt_le_adv_start+0x1a>
			err = set_random_address(param->own_addr);
    3044:	f7ff f908 	bl	2258 <set_random_address>
			err = le_set_private_addr();
    3048:	4604      	mov	r4, r0
		if (err) {
    304a:	2800      	cmp	r0, #0
    304c:	d1a5      	bne.n	2f9a <bt_le_adv_start+0x1e>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;
    304e:	2301      	movs	r3, #1
    3050:	f88d 3005 	strb.w	r3, [sp, #5]
		if (sd) {
    3054:	b126      	cbz	r6, 3060 <bt_le_adv_start+0xe4>
			set_param.type = BT_LE_ADV_SCAN_IND;
    3056:	2302      	movs	r3, #2
    3058:	e7d8      	b.n	300c <bt_le_adv_start+0x90>
			err = le_set_private_addr();
    305a:	f7ff f92b 	bl	22b4 <le_set_private_addr>
    305e:	e7f3      	b.n	3048 <bt_le_adv_start+0xcc>
			set_param.type = BT_LE_ADV_NONCONN_IND;
    3060:	2303      	movs	r3, #3
    3062:	e7d3      	b.n	300c <bt_le_adv_start+0x90>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    3064:	220f      	movs	r2, #15
    3066:	4669      	mov	r1, sp
    3068:	3008      	adds	r0, #8
    306a:	f007 fd77 	bl	ab5c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    306e:	4621      	mov	r1, r4
    3070:	2200      	movs	r2, #0
    3072:	f242 0006 	movw	r0, #8198	; 0x2006
    3076:	f7ff f8b1 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    307a:	4604      	mov	r4, r0
    307c:	2800      	cmp	r0, #0
    307e:	d18c      	bne.n	2f9a <bt_le_adv_start+0x1e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    3080:	2101      	movs	r1, #1
    3082:	f242 000a 	movw	r0, #8202	; 0x200a
    3086:	f7ff f879 	bl	217c <bt_hci_cmd_create>
	if (!buf) {
    308a:	4606      	mov	r6, r0
    308c:	2800      	cmp	r0, #0
    308e:	d0c6      	beq.n	301e <bt_le_adv_start+0xa2>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    3090:	2101      	movs	r1, #1
    3092:	3008      	adds	r0, #8
    3094:	f007 fd6b 	bl	ab6e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    3098:	4622      	mov	r2, r4
    309a:	4631      	mov	r1, r6
    309c:	f242 000a 	movw	r0, #8202	; 0x200a
    30a0:	f7ff f89c 	bl	21dc <bt_hci_cmd_send_sync>
	if (err) {
    30a4:	4604      	mov	r4, r0
    30a6:	2800      	cmp	r0, #0
    30a8:	f47f af77 	bne.w	2f9a <bt_le_adv_start+0x1e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    30ac:	2120      	movs	r1, #32
    30ae:	4809      	ldr	r0, [pc, #36]	; (30d4 <bt_le_adv_start+0x158>)
    30b0:	f7fe ffd6 	bl	2060 <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    30b4:	782b      	ldrb	r3, [r5, #0]
    30b6:	079b      	lsls	r3, r3, #30
    30b8:	f53f af6f 	bmi.w	2f9a <bt_le_adv_start+0x1e>
    30bc:	2140      	movs	r1, #64	; 0x40
    30be:	4805      	ldr	r0, [pc, #20]	; (30d4 <bt_le_adv_start+0x158>)
    30c0:	f7fe ffce 	bl	2060 <atomic_or>
    30c4:	e769      	b.n	2f9a <bt_le_adv_start+0x1e>
		return -EALREADY;
    30c6:	f06f 0444 	mvn.w	r4, #68	; 0x44
    30ca:	e766      	b.n	2f9a <bt_le_adv_start+0x1e>
    30cc:	200036d0 	.word	0x200036d0
    30d0:	200036d1 	.word	0x200036d1
    30d4:	20003740 	.word	0x20003740

000030d8 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    30d8:	b538      	push	{r3, r4, r5, lr}
    30da:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    30dc:	4805      	ldr	r0, [pc, #20]	; (30f4 <bt_buf_get_rx+0x1c>)
    30de:	f007 fcd5 	bl	aa8c <net_buf_alloc_fixed>
#endif

	if (buf) {
    30e2:	4604      	mov	r4, r0
    30e4:	b120      	cbz	r0, 30f0 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    30e6:	2100      	movs	r1, #0
    30e8:	3008      	adds	r0, #8
    30ea:	f007 fcee 	bl	aaca <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    30ee:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    30f0:	4620      	mov	r0, r4
    30f2:	bd38      	pop	{r3, r4, r5, pc}
    30f4:	200039f4 	.word	0x200039f4

000030f8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    30f8:	b510      	push	{r4, lr}
    30fa:	4601      	mov	r1, r0
	__asm__ volatile(
    30fc:	f04f 0320 	mov.w	r3, #32
    3100:	f3ef 8011 	mrs	r0, BASEPRI
    3104:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    3108:	4a0b      	ldr	r2, [pc, #44]	; (3138 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    310a:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    310c:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    3110:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    3114:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    3118:	b924      	cbnz	r4, 3124 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    311a:	2001      	movs	r0, #1
}
    311c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    3120:	f7ff bfda 	b.w	30d8 <bt_buf_get_rx>
    3124:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    3126:	f104 0008 	add.w	r0, r4, #8
    312a:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    312c:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    312e:	4619      	mov	r1, r3
    3130:	f007 fccb 	bl	aaca <net_buf_simple_reserve>
}
    3134:	4620      	mov	r0, r4
    3136:	bd10      	pop	{r4, pc}
    3138:	200036d0 	.word	0x200036d0

0000313c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    313c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    313e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3140:	1dc3      	adds	r3, r0, #7
    3142:	f023 0303 	bic.w	r3, r3, #3
{
    3146:	460e      	mov	r6, r1
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    3148:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    314a:	3a01      	subs	r2, #1
    314c:	b294      	uxth	r4, r2
{
    314e:	4605      	mov	r5, r0
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    3150:	2204      	movs	r2, #4
    3152:	2100      	movs	r1, #0
    3154:	fb06 0004 	mla	r0, r6, r4, r0
    3158:	f7fd fa6e 	bl	638 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    315c:	f64f 77ff 	movw	r7, #65535	; 0xffff
    3160:	3c01      	subs	r4, #1
    3162:	b2a4      	uxth	r4, r4
    3164:	42bc      	cmp	r4, r7
    3166:	d101      	bne.n	316c <mem_init+0x30>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    3168:	b003      	add	sp, #12
    316a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    316c:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    3170:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    3172:	2204      	movs	r2, #4
    3174:	1b80      	subs	r0, r0, r6
    3176:	eb0d 0102 	add.w	r1, sp, r2
    317a:	4428      	add	r0, r5
		next = (u32_t)((u8_t *) mem_pool +
    317c:	9301      	str	r3, [sp, #4]
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    317e:	f7fd fa2e 	bl	5de <memcpy>
    3182:	e7ed      	b.n	3160 <mem_init+0x24>

00003184 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    3184:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    3186:	6804      	ldr	r4, [r0, #0]
{
    3188:	4606      	mov	r6, r0
	if (*mem_head) {
    318a:	b18c      	cbz	r4, 31b0 <mem_acquire+0x2c>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    318c:	1de3      	adds	r3, r4, #7
    318e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    3192:	2204      	movs	r2, #4
    3194:	4621      	mov	r1, r4
    3196:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    319a:	881d      	ldrh	r5, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    319c:	f7fd fa1f 	bl	5de <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    31a0:	9b01      	ldr	r3, [sp, #4]
    31a2:	b123      	cbz	r3, 31ae <mem_acquire+0x2a>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    31a4:	1dda      	adds	r2, r3, #7
    31a6:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    31aa:	3d01      	subs	r5, #1
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    31ac:	8015      	strh	r5, [r2, #0]
				free_count;
		}

		*mem_head = head;
    31ae:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    31b0:	4620      	mov	r0, r4
    31b2:	b002      	add	sp, #8
    31b4:	bd70      	pop	{r4, r5, r6, pc}

000031b6 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    31b6:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    31b8:	680c      	ldr	r4, [r1, #0]
{
    31ba:	4606      	mov	r6, r0
    31bc:	460d      	mov	r5, r1
	if (*mem_head) {
    31be:	b11c      	cbz	r4, 31c8 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    31c0:	1de3      	adds	r3, r4, #7
    31c2:	f023 0303 	bic.w	r3, r3, #3
    31c6:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    31c8:	2204      	movs	r2, #4
    31ca:	4629      	mov	r1, r5
    31cc:	4630      	mov	r0, r6
    31ce:	f7fd fa06 	bl	5de <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    31d2:	1df2      	adds	r2, r6, #7
    31d4:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    31d8:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    31da:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    31dc:	602e      	str	r6, [r5, #0]
}
    31de:	bd70      	pop	{r4, r5, r6, pc}

000031e0 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    31e0:	fb02 0001 	mla	r0, r2, r1, r0
    31e4:	4770      	bx	lr

000031e6 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    31e6:	1a40      	subs	r0, r0, r1
    31e8:	b280      	uxth	r0, r0
}
    31ea:	fbb0 f0f2 	udiv	r0, r0, r2
    31ee:	4770      	bx	lr

000031f0 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    31f0:	b510      	push	{r4, lr}
	src += len;
    31f2:	4411      	add	r1, r2
    31f4:	3801      	subs	r0, #1
	while (len--) {
    31f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    31fa:	3a01      	subs	r2, #1
    31fc:	b292      	uxth	r2, r2
    31fe:	429a      	cmp	r2, r3
    3200:	d100      	bne.n	3204 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    3202:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    3204:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    3208:	f800 4f01 	strb.w	r4, [r0, #1]!
    320c:	e7f5      	b.n	31fa <mem_rcopy+0xa>

0000320e <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    320e:	6010      	str	r0, [r2, #0]
    3210:	6008      	str	r0, [r1, #0]

	return link;
}
    3212:	4770      	bx	lr

00003214 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    3214:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    3216:	6814      	ldr	r4, [r2, #0]
    3218:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    321a:	6814      	ldr	r4, [r2, #0]
    321c:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    321e:	6010      	str	r0, [r2, #0]

	return link;
}
    3220:	bd10      	pop	{r4, pc}

00003222 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    3222:	4288      	cmp	r0, r1
    3224:	d003      	beq.n	322e <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    3226:	b11a      	cbz	r2, 3230 <memq_peek+0xe>
		*mem = head->mem;
    3228:	6843      	ldr	r3, [r0, #4]
    322a:	6013      	str	r3, [r2, #0]
    322c:	4770      	bx	lr
		return NULL;
    322e:	2000      	movs	r0, #0
	}

	return head;
}
    3230:	4770      	bx	lr

00003232 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    3232:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    3234:	4283      	cmp	r3, r0
    3236:	d007      	beq.n	3248 <memq_dequeue+0x16>
	if (mem) {
    3238:	b10a      	cbz	r2, 323e <memq_dequeue+0xc>
		*mem = head->mem;
    323a:	6858      	ldr	r0, [r3, #4]
    323c:	6010      	str	r0, [r2, #0]
	if (!link) {
    323e:	b10b      	cbz	r3, 3244 <memq_dequeue+0x12>
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    3240:	681a      	ldr	r2, [r3, #0]
    3242:	600a      	str	r2, [r1, #0]

	return link;
}
    3244:	4618      	mov	r0, r3
    3246:	4770      	bx	lr
		return NULL;
    3248:	2300      	movs	r3, #0
    324a:	e7fb      	b.n	3244 <memq_dequeue+0x12>

0000324c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    324c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    3250:	4f11      	ldr	r7, [pc, #68]	; (3298 <mayfly_init+0x4c>)
    3252:	f8df 9048 	ldr.w	r9, [pc, #72]	; 329c <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    3256:	2604      	movs	r6, #4
	while (callee_id--) {
    3258:	3e01      	subs	r6, #1
    325a:	b2f6      	uxtb	r6, r6
    325c:	2eff      	cmp	r6, #255	; 0xff
    325e:	d019      	beq.n	3294 <mayfly_init+0x48>
    3260:	b233      	sxth	r3, r6
    3262:	ea4f 0883 	mov.w	r8, r3, lsl #2
    3266:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    326a:	011d      	lsls	r5, r3, #4
		caller_id = MAYFLY_CALLER_COUNT;
    326c:	2404      	movs	r4, #4
    326e:	f04f 0a0c 	mov.w	sl, #12
    3272:	e00a      	b.n	328a <mayfly_init+0x3e>
    3274:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    3278:	1d0a      	adds	r2, r1, #4
    327a:	eb04 0008 	add.w	r0, r4, r8
    327e:	443a      	add	r2, r7
    3280:	4439      	add	r1, r7
    3282:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    3286:	f7ff ffc2 	bl	320e <memq_init>
		while (caller_id--) {
    328a:	3c01      	subs	r4, #1
    328c:	b2e4      	uxtb	r4, r4
    328e:	2cff      	cmp	r4, #255	; 0xff
    3290:	d1f0      	bne.n	3274 <mayfly_init+0x28>
    3292:	e7e1      	b.n	3258 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    3294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3298:	20000808 	.word	0x20000808
    329c:	20000788 	.word	0x20000788

000032a0 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    32a0:	b4f0      	push	{r4, r5, r6, r7}
    32a2:	4b12      	ldr	r3, [pc, #72]	; (32ec <mayfly_enable+0x4c>)
    32a4:	4605      	mov	r5, r0
    32a6:	460f      	mov	r7, r1
    32a8:	260c      	movs	r6, #12
    32aa:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    32ac:	b172      	cbz	r2, 32cc <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    32ae:	4361      	muls	r1, r4
    32b0:	fb06 1400 	mla	r4, r6, r0, r1
    32b4:	4423      	add	r3, r4
    32b6:	7a59      	ldrb	r1, [r3, #9]
    32b8:	7a18      	ldrb	r0, [r3, #8]
    32ba:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    32bc:	bf04      	itt	eq
    32be:	3101      	addeq	r1, #1
    32c0:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    32c2:	4628      	mov	r0, r5
    32c4:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    32c6:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    32c8:	f007 ba3c 	b.w	a744 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    32cc:	434c      	muls	r4, r1
    32ce:	fb06 4400 	mla	r4, r6, r0, r4
    32d2:	4423      	add	r3, r4
    32d4:	7a9c      	ldrb	r4, [r3, #10]
    32d6:	7ada      	ldrb	r2, [r3, #11]
    32d8:	42a2      	cmp	r2, r4
    32da:	d104      	bne.n	32e6 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    32dc:	3201      	adds	r2, #1
    32de:	729a      	strb	r2, [r3, #10]
}
    32e0:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    32e2:	f007 ba8f 	b.w	a804 <mayfly_pend>
}
    32e6:	bcf0      	pop	{r4, r5, r6, r7}
    32e8:	4770      	bx	lr
    32ea:	bf00      	nop
    32ec:	20000808 	.word	0x20000808

000032f0 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    32f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32f2:	4605      	mov	r5, r0
    32f4:	460e      	mov	r6, r1
    32f6:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    32f8:	b18a      	cbz	r2, 331e <mayfly_enqueue+0x2e>
    32fa:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    32fc:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    32fe:	7820      	ldrb	r0, [r4, #0]
    3300:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    3302:	f010 0703 	ands.w	r7, r0, #3
    3306:	d029      	beq.n	335c <mayfly_enqueue+0x6c>
		if (chain) {
    3308:	b303      	cbz	r3, 334c <mayfly_enqueue+0x5c>
			if (state != 1) {
    330a:	2f01      	cmp	r7, #1
    330c:	d039      	beq.n	3382 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    330e:	3201      	adds	r2, #1
    3310:	b2d2      	uxtb	r2, r2
    3312:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    3314:	4631      	mov	r1, r6
    3316:	4628      	mov	r0, r5
    3318:	f007 fa74 	bl	a804 <mayfly_pend>
    331c:	e01c      	b.n	3358 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    331e:	f007 fa5f 	bl	a7e0 <mayfly_prio_is_equal>
    3322:	2800      	cmp	r0, #0
    3324:	d0e9      	beq.n	32fa <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    3326:	4631      	mov	r1, r6
    3328:	4628      	mov	r0, r5
    332a:	f007 fa33 	bl	a794 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    332e:	2800      	cmp	r0, #0
    3330:	d0e3      	beq.n	32fa <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    3332:	2330      	movs	r3, #48	; 0x30
    3334:	220c      	movs	r2, #12
    3336:	4373      	muls	r3, r6
    3338:	fb02 3305 	mla	r3, r2, r5, r3
    333c:	4a12      	ldr	r2, [pc, #72]	; (3388 <mayfly_enqueue+0x98>)
    333e:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    3340:	7a93      	ldrb	r3, [r2, #10]
    3342:	7ad2      	ldrb	r2, [r2, #11]
    3344:	1a9b      	subs	r3, r3, r2
    3346:	bf18      	it	ne
    3348:	2301      	movne	r3, #1
    334a:	e7d7      	b.n	32fc <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    334c:	3202      	adds	r2, #2
    334e:	b2d2      	uxtb	r2, r2
    3350:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    3352:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    3356:	4798      	blx	r3
		return 0;
    3358:	2000      	movs	r0, #0

	return 0;
}
    335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    335c:	2b00      	cmp	r3, #0
    335e:	d0f8      	beq.n	3352 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    3360:	3201      	adds	r2, #1
    3362:	b2d2      	uxtb	r2, r2
    3364:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    3366:	2304      	movs	r3, #4
    3368:	2230      	movs	r2, #48	; 0x30
    336a:	fb12 3206 	smlabb	r2, r2, r6, r3
    336e:	230c      	movs	r3, #12
    3370:	fb13 2305 	smlabb	r3, r3, r5, r2
    3374:	4a04      	ldr	r2, [pc, #16]	; (3388 <mayfly_enqueue+0x98>)
    3376:	6860      	ldr	r0, [r4, #4]
    3378:	441a      	add	r2, r3
    337a:	4621      	mov	r1, r4
    337c:	f7ff ff4a 	bl	3214 <memq_enqueue>
    3380:	e7c8      	b.n	3314 <mayfly_enqueue+0x24>
			return 1;
    3382:	4638      	mov	r0, r7
    3384:	e7e9      	b.n	335a <mayfly_enqueue+0x6a>
    3386:	bf00      	nop
    3388:	20000808 	.word	0x20000808

0000338c <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3390:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3394:	b089      	sub	sp, #36	; 0x24
    3396:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    3398:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    339c:	4e43      	ldr	r6, [pc, #268]	; (34ac <mayfly_run+0x120>)
    339e:	9304      	str	r3, [sp, #16]
{
    33a0:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    33a2:	2404      	movs	r4, #4
	u8_t disable = 0;
    33a4:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    33a8:	3c01      	subs	r4, #1
    33aa:	b2e4      	uxtb	r4, r4
    33ac:	2cff      	cmp	r4, #255	; 0xff
    33ae:	d10b      	bne.n	33c8 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    33b0:	9b01      	ldr	r3, [sp, #4]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d072      	beq.n	349c <mayfly_run+0x110>
    33b6:	f1b8 0f00 	cmp.w	r8, #0
    33ba:	d16f      	bne.n	349c <mayfly_run+0x110>
		mayfly_enable_cb(callee_id, callee_id, 0);
    33bc:	4642      	mov	r2, r8
    33be:	4629      	mov	r1, r5
    33c0:	4628      	mov	r0, r5
    33c2:	f007 f9bf 	bl	a744 <mayfly_enable_cb>
    33c6:	e069      	b.n	349c <mayfly_run+0x110>
		struct mayfly *m = 0;
    33c8:	f10d 0b20 	add.w	fp, sp, #32
    33cc:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    33ce:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    33d0:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    33d4:	f04f 0930 	mov.w	r9, #48	; 0x30
    33d8:	fb07 f304 	mul.w	r3, r7, r4
    33dc:	fb09 3005 	mla	r0, r9, r5, r3
    33e0:	1831      	adds	r1, r6, r0
    33e2:	465a      	mov	r2, fp
    33e4:	6849      	ldr	r1, [r1, #4]
    33e6:	5830      	ldr	r0, [r6, r0]
    33e8:	9302      	str	r3, [sp, #8]
    33ea:	f7ff ff1a 	bl	3222 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    33ee:	9b04      	ldr	r3, [sp, #16]
    33f0:	fb17 3704 	smlabb	r7, r7, r4, r3
    33f4:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    33f6:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    33f8:	9303      	str	r3, [sp, #12]
		while (link) {
    33fa:	f1ba 0f00 	cmp.w	sl, #0
    33fe:	d032      	beq.n	3466 <mayfly_run+0xda>
			req = m->_req;
    3400:	9b07      	ldr	r3, [sp, #28]
    3402:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    3404:	785a      	ldrb	r2, [r3, #1]
    3406:	1abf      	subs	r7, r7, r2
    3408:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    340c:	2f01      	cmp	r7, #1
    340e:	d104      	bne.n	341a <mayfly_run+0x8e>
				m->_ack--;
    3410:	3a01      	subs	r2, #1
    3412:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    3414:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
    3418:	4790      	blx	r2
			req = m->_req;
    341a:	9a07      	ldr	r2, [sp, #28]
    341c:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    341e:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    3420:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    3422:	1a9a      	subs	r2, r3, r2
    3424:	f002 0203 	and.w	r2, r2, #3
    3428:	2a01      	cmp	r2, #1
    342a:	9305      	str	r3, [sp, #20]
    342c:	d00d      	beq.n	344a <mayfly_run+0xbe>
				memq_dequeue(mft[callee_id][caller_id].tail,
    342e:	9b02      	ldr	r3, [sp, #8]
    3430:	9903      	ldr	r1, [sp, #12]
    3432:	fb09 3005 	mla	r0, r9, r5, r3
    3436:	4430      	add	r0, r6
    3438:	2200      	movs	r2, #0
    343a:	6840      	ldr	r0, [r0, #4]
    343c:	f7ff fef9 	bl	3232 <memq_dequeue>
				m->_link = link;
    3440:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    3442:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    3444:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    3448:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    344a:	9b02      	ldr	r3, [sp, #8]
    344c:	fb09 3305 	mla	r3, r9, r5, r3
    3450:	18f1      	adds	r1, r6, r3
    3452:	465a      	mov	r2, fp
    3454:	6849      	ldr	r1, [r1, #4]
    3456:	58f0      	ldr	r0, [r6, r3]
    3458:	f7ff fee3 	bl	3222 <memq_peek>
			if (state == 1) {
    345c:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    345e:	4682      	mov	sl, r0
			if (state == 1) {
    3460:	d1cb      	bne.n	33fa <mayfly_run+0x6e>
				if (caller_id || link) {
    3462:	b9bc      	cbnz	r4, 3494 <mayfly_run+0x108>
    3464:	b9b0      	cbnz	r0, 3494 <mayfly_run+0x108>
		if (mft[callee_id][caller_id].disable_req !=
    3466:	2230      	movs	r2, #48	; 0x30
    3468:	230c      	movs	r3, #12
    346a:	436a      	muls	r2, r5
    346c:	fb03 2204 	mla	r2, r3, r4, r2
    3470:	4432      	add	r2, r6
    3472:	7a91      	ldrb	r1, [r2, #10]
    3474:	7ad0      	ldrb	r0, [r2, #11]
    3476:	4288      	cmp	r0, r1
    3478:	d113      	bne.n	34a2 <mayfly_run+0x116>
		if (mft[callee_id][caller_id].enable_req !=
    347a:	2230      	movs	r2, #48	; 0x30
    347c:	436a      	muls	r2, r5
    347e:	fb03 2304 	mla	r3, r3, r4, r2
    3482:	4433      	add	r3, r6
    3484:	7a1a      	ldrb	r2, [r3, #8]
    3486:	7a59      	ldrb	r1, [r3, #9]
    3488:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    348a:	bf1c      	itt	ne
    348c:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    348e:	f04f 0801 	movne.w	r8, #1
    3492:	e789      	b.n	33a8 <mayfly_run+0x1c>
					mayfly_pend(callee_id, callee_id);
    3494:	4629      	mov	r1, r5
    3496:	4628      	mov	r0, r5
    3498:	f007 f9b4 	bl	a804 <mayfly_pend>
	}
}
    349c:	b009      	add	sp, #36	; 0x24
    349e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mft[callee_id][caller_id].disable_ack =
    34a2:	72d1      	strb	r1, [r2, #11]
			disable = 1;
    34a4:	2201      	movs	r2, #1
    34a6:	9201      	str	r2, [sp, #4]
    34a8:	e7e7      	b.n	347a <mayfly_run+0xee>
    34aa:	bf00      	nop
    34ac:	20000808 	.word	0x20000808

000034b0 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    34b0:	b510      	push	{r4, lr}
    34b2:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    34b4:	2000      	movs	r0, #0

	while (octets_len--) {
    34b6:	3901      	subs	r1, #1
    34b8:	b2c9      	uxtb	r1, r1
    34ba:	29ff      	cmp	r1, #255	; 0xff
    34bc:	d100      	bne.n	34c0 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    34be:	bd10      	pop	{r4, pc}
		bite = *octets;
    34c0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    34c4:	2b00      	cmp	r3, #0
    34c6:	d0f6      	beq.n	34b6 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    34c8:	1e5c      	subs	r4, r3, #1
			one_count++;
    34ca:	3001      	adds	r0, #1
			bite &= (bite - 1);
    34cc:	4023      	ands	r3, r4
			one_count++;
    34ce:	b2c0      	uxtb	r0, r0
    34d0:	e7f8      	b.n	34c4 <util_ones_count_get+0x14>

000034d2 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    34d2:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    34d4:	7f42      	ldrb	r2, [r0, #29]
	node = &instance->node[0];
    34d6:	6804      	ldr	r4, [r0, #0]
{
    34d8:	4606      	mov	r6, r0
	previous = instance->ticker_id_head;
    34da:	4613      	mov	r3, r2
	current = previous;
	total = 0;
    34dc:	2000      	movs	r0, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    34de:	2aff      	cmp	r2, #255	; 0xff
    34e0:	d101      	bne.n	34e6 <ticker_dequeue+0x14>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    34e2:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    34e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    34e6:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    34ea:	eb04 07c5 	add.w	r7, r4, r5, lsl #3
		if (current == id) {
    34ee:	428a      	cmp	r2, r1
    34f0:	f8d7 c008 	ldr.w	ip, [r7, #8]
    34f4:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
    34f8:	4460      	add	r0, ip
    34fa:	d002      	beq.n	3502 <ticker_dequeue+0x30>
    34fc:	4613      	mov	r3, r2
    34fe:	462a      	mov	r2, r5
    3500:	e7ed      	b.n	34de <ticker_dequeue+0xc>
	if (previous == current) {
    3502:	4293      	cmp	r3, r2
    3504:	d100      	bne.n	3508 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
    3506:	7775      	strb	r5, [r6, #29]
	node[previous].next = ticker_current->next;
    3508:	b21b      	sxth	r3, r3
    350a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    350e:	f804 5033 	strb.w	r5, [r4, r3, lsl #3]
	if (ticker_current->next != TICKER_NULL) {
    3512:	783b      	ldrb	r3, [r7, #0]
    3514:	2bff      	cmp	r3, #255	; 0xff
    3516:	d0e5      	beq.n	34e4 <ticker_dequeue+0x12>
		node[ticker_current->next].ticks_to_expire += timeout;
    3518:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    351c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    3520:	68a3      	ldr	r3, [r4, #8]
    3522:	4463      	add	r3, ip
    3524:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
    3526:	e7dd      	b.n	34e4 <ticker_dequeue+0x12>

00003528 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    3528:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    352a:	1a55      	subs	r5, r2, r1
    352c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    3530:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    3532:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    3534:	d109      	bne.n	354a <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3536:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    353a:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    353c:	42a2      	cmp	r2, r4
    353e:	d90e      	bls.n	355e <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    3540:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    3542:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    3544:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    3546:	6144      	str	r4, [r0, #20]
}
    3548:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    354a:	1a8a      	subs	r2, r1, r2
    354c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    3550:	4293      	cmp	r3, r2
    3552:	d901      	bls.n	3558 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    3554:	1a9a      	subs	r2, r3, r2
    3556:	e7f1      	b.n	353c <ticks_to_expire_prep+0x14>
    3558:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    355a:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    355c:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    355e:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    3560:	2200      	movs	r2, #0
    3562:	e7ef      	b.n	3544 <ticks_to_expire_prep+0x1c>

00003564 <ticker_job_op_cb>:
{
    3564:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    3566:	2200      	movs	r2, #0
    3568:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    356a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    356c:	6259      	str	r1, [r3, #36]	; 0x24
{
    356e:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    3570:	b10a      	cbz	r2, 3576 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    3572:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3574:	4710      	bx	r2
}
    3576:	4770      	bx	lr

00003578 <ticker_worker>:
{
    3578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    357c:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    357e:	2301      	movs	r3, #1
{
    3580:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    3582:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    3584:	b91d      	cbnz	r5, 358e <ticker_worker+0x16>
	if (instance->ticker_id_head == TICKER_NULL) {
    3586:	7f43      	ldrb	r3, [r0, #29]
    3588:	2bff      	cmp	r3, #255	; 0xff
    358a:	d102      	bne.n	3592 <ticker_worker+0x1a>
		instance->worker_trigger = 0;
    358c:	77c5      	strb	r5, [r0, #31]
}
    358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    3592:	f006 fc7f 	bl	9e94 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3596:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    3598:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    359a:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    359e:	1bc7      	subs	r7, r0, r7
    35a0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    35a4:	2eff      	cmp	r6, #255	; 0xff
    35a6:	d006      	beq.n	35b6 <ticker_worker+0x3e>
		ticker = &node[ticker_id_head];
    35a8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    35ac:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    35b0:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    35b2:	429f      	cmp	r7, r3
    35b4:	d218      	bcs.n	35e8 <ticker_worker+0x70>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    35b6:	7aa2      	ldrb	r2, [r4, #10]
    35b8:	7ae3      	ldrb	r3, [r4, #11]
    35ba:	4293      	cmp	r3, r2
    35bc:	d105      	bne.n	35ca <ticker_worker+0x52>
		last = instance->ticks_elapsed_last + 1;
    35be:	3301      	adds	r3, #1
    35c0:	b2db      	uxtb	r3, r3
			last = 0;
    35c2:	2b02      	cmp	r3, #2
    35c4:	bf08      	it	eq
    35c6:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    35c8:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    35ca:	7ae3      	ldrb	r3, [r4, #11]
    35cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    35d0:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    35d2:	60dd      	str	r5, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    35d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    35d6:	2300      	movs	r3, #0
    35d8:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    35da:	46ac      	mov	ip, r5
    35dc:	4623      	mov	r3, r4
    35de:	2104      	movs	r1, #4
    35e0:	2003      	movs	r0, #3
}
    35e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    35e6:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    35e8:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    35ea:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    35ec:	788a      	ldrb	r2, [r1, #2]
    35ee:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    35f0:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    35f4:	1a9b      	subs	r3, r3, r2
    35f6:	b2db      	uxtb	r3, r3
    35f8:	2b01      	cmp	r3, #1
    35fa:	d1d3      	bne.n	35a4 <ticker_worker+0x2c>
		if (ticker->timeout_func) {
    35fc:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    3600:	3a01      	subs	r2, #1
    3602:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    3604:	f1b9 0f00 	cmp.w	r9, #0
    3608:	d0cc      	beq.n	35a4 <ticker_worker+0x2c>
					   ticks_expired -
    360a:	6948      	ldr	r0, [r1, #20]
    360c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    360e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    3610:	1a28      	subs	r0, r5, r0
    3612:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    3614:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3618:	690b      	ldr	r3, [r1, #16]
    361a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    361c:	47c8      	blx	r9
    361e:	e7c1      	b.n	35a4 <ticker_worker+0x2c>

00003620 <ticker_job>:
{
    3620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    3624:	7fc2      	ldrb	r2, [r0, #31]
{
    3626:	b095      	sub	sp, #84	; 0x54
    3628:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    362a:	2a00      	cmp	r2, #0
    362c:	f040 83bf 	bne.w	3dae <ticker_job+0x78e>
	ticks_previous = instance->ticks_current;
    3630:	6943      	ldr	r3, [r0, #20]
    3632:	9306      	str	r3, [sp, #24]
	instance->job_guard = 1;
    3634:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3636:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    3638:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    363a:	7ac0      	ldrb	r0, [r0, #11]
    363c:	4298      	cmp	r0, r3
    363e:	f000 808c 	beq.w	375a <ticker_job+0x13a>
		first = instance->ticks_elapsed_first + 1;
    3642:	440b      	add	r3, r1
    3644:	b2db      	uxtb	r3, r3
			first = 0;
    3646:	2b02      	cmp	r3, #2
    3648:	bf08      	it	eq
    364a:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    364c:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    3650:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    3654:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    3656:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    365a:	9b06      	ldr	r3, [sp, #24]
    365c:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    365e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3662:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    3666:	f89b 301d 	ldrb.w	r3, [fp, #29]
    366a:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    366c:	f8db 3000 	ldr.w	r3, [fp]
    3670:	9307      	str	r3, [sp, #28]
	users = &instance->user[0];
    3672:	f8db 3004 	ldr.w	r3, [fp, #4]
    3676:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    3678:	f89b 3009 	ldrb.w	r3, [fp, #9]
    367c:	9304      	str	r3, [sp, #16]
	pending = 0;
    367e:	2300      	movs	r3, #0
    3680:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    3682:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    3686:	9b04      	ldr	r3, [sp, #16]
    3688:	3b01      	subs	r3, #1
    368a:	b2db      	uxtb	r3, r3
    368c:	2bff      	cmp	r3, #255	; 0xff
    368e:	9304      	str	r3, [sp, #16]
    3690:	d166      	bne.n	3760 <ticker_job+0x140>
	if (instance->ticker_id_head != ticker_id_old_head) {
    3692:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    3696:	9a05      	ldr	r2, [sp, #20]
    3698:	1a9b      	subs	r3, r3, r2
    369a:	bf18      	it	ne
    369c:	2301      	movne	r3, #1
    369e:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    36a0:	9b03      	ldr	r3, [sp, #12]
    36a2:	b1cb      	cbz	r3, 36d8 <ticker_job+0xb8>
    36a4:	f8db 9000 	ldr.w	r9, [fp]
	ticks_expired = 0;
    36a8:	2700      	movs	r7, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    36aa:	f89b 501d 	ldrb.w	r5, [fp, #29]
    36ae:	2dff      	cmp	r5, #255	; 0xff
    36b0:	d00b      	beq.n	36ca <ticker_job+0xaa>
		ticker = &node[id_expired];
    36b2:	b22e      	sxth	r6, r5
    36b4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    36b8:	eb09 04c6 	add.w	r4, r9, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    36bc:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    36be:	4543      	cmp	r3, r8
    36c0:	f240 8132 	bls.w	3928 <ticker_job+0x308>
			ticker->ticks_to_expire -= ticks_elapsed;
    36c4:	eba3 0308 	sub.w	r3, r3, r8
    36c8:	60a3      	str	r3, [r4, #8]
			flag_compare_update = 1;
    36ca:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    36ce:	9905      	ldr	r1, [sp, #20]
    36d0:	42a9      	cmp	r1, r5
    36d2:	bf18      	it	ne
    36d4:	4613      	movne	r3, r2
    36d6:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    36d8:	f8db 3000 	ldr.w	r3, [fp]
    36dc:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    36de:	f8db 3004 	ldr.w	r3, [fp, #4]
    36e2:	9312      	str	r3, [sp, #72]	; 0x48
	count_user = instance->count_user;
    36e4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    36e8:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    36ea:	9b03      	ldr	r3, [sp, #12]
    36ec:	3b01      	subs	r3, #1
    36ee:	b2db      	uxtb	r3, r3
    36f0:	2bff      	cmp	r3, #255	; 0xff
    36f2:	9303      	str	r3, [sp, #12]
    36f4:	f040 8168 	bne.w	39c8 <ticker_job+0x3a8>
	if (instance->ticker_id_head != ticker_id_old_head) {
    36f8:	f89b 301d 	ldrb.w	r3, [fp, #29]
    36fc:	9a05      	ldr	r2, [sp, #20]
    36fe:	4293      	cmp	r3, r2
	if (!pending) {
    3700:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    3702:	f040 8349 	bne.w	3d98 <ticker_job+0x778>
	if (!pending) {
    3706:	b94b      	cbnz	r3, 371c <ticker_job+0xfc>
	users = &instance->user[0];
    3708:	f8db 3004 	ldr.w	r3, [fp, #4]
	count_user = instance->count_user;
    370c:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    3710:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    3712:	3c01      	subs	r4, #1
    3714:	b2e4      	uxtb	r4, r4
    3716:	2cff      	cmp	r4, #255	; 0xff
    3718:	f040 829c 	bne.w	3c54 <ticker_job+0x634>
	instance->job_guard = 0;
    371c:	2300      	movs	r3, #0
    371e:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    3722:	9b04      	ldr	r3, [sp, #16]
    3724:	b14b      	cbz	r3, 373a <ticker_job+0x11a>
	if (instance->ticker_id_head == TICKER_NULL) {
    3726:	f89b 301d 	ldrb.w	r3, [fp, #29]
    372a:	2bff      	cmp	r3, #255	; 0xff
    372c:	f040 82e1 	bne.w	3cf2 <ticker_job+0x6d2>
		if (cntr_stop() == 0) {
    3730:	f006 fb82 	bl	9e38 <cntr_stop>
    3734:	b908      	cbnz	r0, 373a <ticker_job+0x11a>
			instance->ticks_slot_previous = 0;
    3736:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    373a:	f89b 301f 	ldrb.w	r3, [fp, #31]
    373e:	2b00      	cmp	r3, #0
    3740:	f000 8335 	beq.w	3dae <ticker_job+0x78e>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    3744:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    3748:	465b      	mov	r3, fp
    374a:	2201      	movs	r2, #1
    374c:	2103      	movs	r1, #3
    374e:	2004      	movs	r0, #4
    3750:	46a4      	mov	ip, r4
}
    3752:	b015      	add	sp, #84	; 0x54
    3754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    3758:	4760      	bx	ip
		flag_elapsed = 0;
    375a:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    375c:	4690      	mov	r8, r2
    375e:	e782      	b.n	3666 <ticker_job+0x46>
		user = &users[count_user];
    3760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3762:	9a04      	ldr	r2, [sp, #16]
    3764:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    376c:	78f9      	ldrb	r1, [r7, #3]
    376e:	78be      	ldrb	r6, [r7, #2]
    3770:	428e      	cmp	r6, r1
    3772:	d088      	beq.n	3686 <ticker_job+0x66>
			user_op = &user_ops[user->middle];
    3774:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    3776:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    3778:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    377c:	0112      	lsls	r2, r2, #4
    377e:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    3780:	1c73      	adds	r3, r6, #1
    3782:	b2db      	uxtb	r3, r3
				middle = 0;
    3784:	4298      	cmp	r0, r3
    3786:	bf08      	it	eq
    3788:	2300      	moveq	r3, #0
			user->middle = middle;
    378a:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    378c:	9b08      	ldr	r3, [sp, #32]
    378e:	5c9a      	ldrb	r2, [r3, r2]
    3790:	2a03      	cmp	r2, #3
    3792:	d9ec      	bls.n	376e <ticker_job+0x14e>
			ticker = &node[user_op->id];
    3794:	7869      	ldrb	r1, [r5, #1]
    3796:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    379a:	930c      	str	r3, [sp, #48]	; 0x30
    379c:	980c      	ldr	r0, [sp, #48]	; 0x30
    379e:	9b07      	ldr	r3, [sp, #28]
    37a0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    37a4:	2a05      	cmp	r2, #5
			state = (ticker->req - ticker->ack) & 0xff;
    37a6:	7863      	ldrb	r3, [r4, #1]
    37a8:	78a0      	ldrb	r0, [r4, #2]
    37aa:	eba3 0300 	sub.w	r3, r3, r0
    37ae:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    37b0:	d80a      	bhi.n	37c8 <ticker_job+0x1a8>
    37b2:	b14b      	cbz	r3, 37c8 <ticker_job+0x1a8>
			    (state == 0) ||
    37b4:	2a04      	cmp	r2, #4
    37b6:	d10c      	bne.n	37d2 <ticker_job+0x1b2>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    37b8:	686a      	ldr	r2, [r5, #4]
    37ba:	b952      	cbnz	r2, 37d2 <ticker_job+0x1b2>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    37bc:	68aa      	ldr	r2, [r5, #8]
    37be:	b942      	cbnz	r2, 37d2 <ticker_job+0x1b2>
			     (user_op->params.update.lazy == 0) &&
    37c0:	68ea      	ldr	r2, [r5, #12]
    37c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    37c6:	d104      	bne.n	37d2 <ticker_job+0x1b2>
				ticker_job_op_cb(user_op,
    37c8:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    37ca:	4628      	mov	r0, r5
    37cc:	f7ff feca 	bl	3564 <ticker_job_op_cb>
    37d0:	e7cc      	b.n	376c <ticker_job+0x14c>
			if (state == 1) {
    37d2:	2b01      	cmp	r3, #1
    37d4:	f040 809d 	bne.w	3912 <ticker_job+0x2f2>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    37d8:	4658      	mov	r0, fp
    37da:	f7ff fe7a 	bl	34d2 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    37de:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    37e0:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    37e2:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    37e4:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    37e6:	f040 8086 	bne.w	38f6 <ticker_job+0x2d6>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    37ea:	f8db 3014 	ldr.w	r3, [fp, #20]
    37ee:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    37f0:	f006 fb50 	bl	9e94 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    37f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    37f6:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    37f8:	1ac3      	subs	r3, r0, r3
    37fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    37fe:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    3800:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3802:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    3804:	bf9e      	ittt	ls
    3806:	6962      	ldrls	r2, [r4, #20]
    3808:	1b92      	subls	r2, r2, r6
    380a:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    380c:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    380e:	bf96      	itet	ls
    3810:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    3812:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    3814:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    3816:	2a00      	cmp	r2, #0
    3818:	d049      	beq.n	38ae <ticker_job+0x28e>
	    (user_op->params.update.lazy != 0)) {
    381a:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    381c:	2900      	cmp	r1, #0
    381e:	d046      	beq.n	38ae <ticker_job+0x28e>
		user_op->params.update.lazy--;
    3820:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    3824:	fa1f fc8c 	uxth.w	ip, ip
    3828:	f8a5 c00c 	strh.w	ip, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    382c:	429a      	cmp	r2, r3
    382e:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    3832:	d201      	bcs.n	3838 <ticker_job+0x218>
    3834:	45f4      	cmp	ip, lr
    3836:	d302      	bcc.n	383e <ticker_job+0x21e>
		ticker->remainder_current -= 30517578UL;
    3838:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3ab0 <ticker_job+0x490>
    383c:	e031      	b.n	38a2 <ticker_job+0x282>
	if ((ticker->remainder_current >= BIT(31)) ||
    383e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3840:	4e99      	ldr	r6, [pc, #612]	; (3aa8 <ticker_job+0x488>)
    3842:	489a      	ldr	r0, [pc, #616]	; (3aac <ticker_job+0x48c>)
    3844:	198e      	adds	r6, r1, r6
    3846:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    3848:	bf81      	itttt	hi
    384a:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    384e:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    3852:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    3856:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    3858:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
		decrement++;
    385c:	bf8c      	ite	hi
    385e:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    3862:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    3866:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    3868:	4491      	add	r9, r2
			ticker->lazy_current--;
    386a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    386e:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    3870:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    3874:	f8a4 e01e 	strh.w	lr, [r4, #30]
    3878:	e7d8      	b.n	382c <ticker_job+0x20c>
	ticker->remainder_current += ticker->remainder_periodic;
    387a:	e9d4 1608 	ldrd	r1, r6, [r4, #32]
    387e:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3880:	4989      	ldr	r1, [pc, #548]	; (3aa8 <ticker_job+0x488>)
    3882:	488a      	ldr	r0, [pc, #552]	; (3aac <ticker_job+0x48c>)
    3884:	1871      	adds	r1, r6, r1
    3886:	4281      	cmp	r1, r0
	return 0;
    3888:	bf8e      	itee	hi
    388a:	2100      	movhi	r1, #0
		return 1;
    388c:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    388e:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    3890:	4411      	add	r1, r2
			ticker->lazy_current++;
    3892:	f10e 0e01 	add.w	lr, lr, #1
	ticker->remainder_current += ticker->remainder_periodic;
    3896:	bf8c      	ite	hi
    3898:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    389a:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    389c:	440b      	add	r3, r1
			ticker->lazy_current++;
    389e:	f8a4 e01e 	strh.w	lr, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    38a2:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
    38a6:	45f4      	cmp	ip, lr
    38a8:	d8e7      	bhi.n	387a <ticker_job+0x25a>
		ticker->lazy_periodic = user_op->params.update.lazy;
    38aa:	f8a4 c01c 	strh.w	ip, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    38ae:	88aa      	ldrh	r2, [r5, #4]
	ticker->ticks_to_expire = ticks_to_expire +
    38b0:	4413      	add	r3, r2
    38b2:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    38b4:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    38b6:	6963      	ldr	r3, [r4, #20]
    38b8:	4413      	add	r3, r2
    38ba:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    38bc:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    38c0:	4620      	mov	r0, r4
    38c2:	f7ff fe31 	bl	3528 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    38c6:	69a2      	ldr	r2, [r4, #24]
    38c8:	892b      	ldrh	r3, [r5, #8]
    38ca:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    38cc:	896a      	ldrh	r2, [r5, #10]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    38ce:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    38d0:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    38d2:	bf8c      	ite	hi
    38d4:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    38d6:	2300      	movls	r3, #0
    38d8:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    38da:	7bab      	ldrb	r3, [r5, #14]
    38dc:	b103      	cbz	r3, 38e0 <ticker_job+0x2c0>
		ticker->force = user_op->params.update.force;
    38de:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    38e0:	9b07      	ldr	r3, [sp, #28]
    38e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    38e4:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    38e8:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    38ea:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    38ee:	3301      	adds	r3, #1
    38f0:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    38f2:	2100      	movs	r1, #0
    38f4:	e769      	b.n	37ca <ticker_job+0x1aa>
		ticker->req = ticker->ack;
    38f6:	78a3      	ldrb	r3, [r4, #2]
    38f8:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    38fa:	786b      	ldrb	r3, [r5, #1]
    38fc:	f89b 201c 	ldrb.w	r2, [fp, #28]
    3900:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    3902:	bf01      	itttt	eq
    3904:	23ff      	moveq	r3, #255	; 0xff
    3906:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    390a:	2300      	moveq	r3, #0
    390c:	f8cb 3018 	streq.w	r3, [fp, #24]
    3910:	e7ef      	b.n	38f2 <ticker_job+0x2d2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    3912:	2104      	movs	r1, #4
    3914:	465b      	mov	r3, fp
    3916:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    391a:	2201      	movs	r2, #1
    391c:	4608      	mov	r0, r1
    391e:	47a0      	blx	r4
				pending = 1;
    3920:	2301      	movs	r3, #1
				user->middle = prev;
    3922:	70be      	strb	r6, [r7, #2]
				pending = 1;
    3924:	9309      	str	r3, [sp, #36]	; 0x24
    3926:	e6ae      	b.n	3686 <ticker_job+0x66>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3928:	f8db 2018 	ldr.w	r2, [fp, #24]
    392c:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    392e:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
    3932:	441f      	add	r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    3934:	bf29      	itett	cs
    3936:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    3938:	1ad3      	subcc	r3, r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    393a:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    393e:	2300      	movcs	r3, #0
    3940:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    3944:	69a3      	ldr	r3, [r4, #24]
    3946:	b11b      	cbz	r3, 3950 <ticker_job+0x330>
			instance->ticker_id_slot_previous = id_expired;
    3948:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    394c:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    3950:	2200      	movs	r2, #0
    3952:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    3954:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
    3958:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    395c:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3960:	f1bc 0f00 	cmp.w	ip, #0
    3964:	d02c      	beq.n	39c0 <ticker_job+0x3a0>
    3966:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    3968:	f8df e140 	ldr.w	lr, [pc, #320]	; 3aac <ticker_job+0x48c>
	ticker->remainder_current += ticker->remainder_periodic;
    396c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
    3970:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3972:	494d      	ldr	r1, [pc, #308]	; (3aa8 <ticker_job+0x488>)
    3974:	1859      	adds	r1, r3, r1
    3976:	4571      	cmp	r1, lr
		ticker->remainder_current -= 30517578UL;
    3978:	bf9f      	itttt	ls
    397a:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    397e:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    3982:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    3986:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    3988:	bf92      	itee	ls
    398a:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    398c:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    398e:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    3990:	4463      	add	r3, ip
			while (count--) {
    3992:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    3996:	441a      	add	r2, r3
			while (count--) {
    3998:	d2e8      	bcs.n	396c <ticker_job+0x34c>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    399a:	9b06      	ldr	r3, [sp, #24]
			ticker->ticks_to_expire = ticks_to_expire;
    399c:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    399e:	f8db 1014 	ldr.w	r1, [fp, #20]
    39a2:	19da      	adds	r2, r3, r7
    39a4:	4620      	mov	r0, r4
    39a6:	f7ff fdbf 	bl	3528 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    39aa:	8ba3      	ldrh	r3, [r4, #28]
    39ac:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    39ae:	2300      	movs	r3, #0
    39b0:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    39b2:	f809 a036 	strb.w	sl, [r9, r6, lsl #3]
			ticker->req++;
    39b6:	7863      	ldrb	r3, [r4, #1]
    39b8:	3301      	adds	r3, #1
    39ba:	7063      	strb	r3, [r4, #1]
			ticker->req = ticker->ack;
    39bc:	46aa      	mov	sl, r5
    39be:	e674      	b.n	36aa <ticker_job+0x8a>
    39c0:	78a3      	ldrb	r3, [r4, #2]
    39c2:	7063      	strb	r3, [r4, #1]
    39c4:	4655      	mov	r5, sl
    39c6:	e7f9      	b.n	39bc <ticker_job+0x39c>
		user = &users[count_user];
    39c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    39ca:	9a03      	ldr	r2, [sp, #12]
    39cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    39d0:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    39d2:	685b      	ldr	r3, [r3, #4]
    39d4:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    39d6:	9b06      	ldr	r3, [sp, #24]
    39d8:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    39dc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    39e0:	d040      	beq.n	3a64 <ticker_job+0x444>
				ticker = &node[id_insert];
    39e2:	fa0f f38a 	sxth.w	r3, sl
    39e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    39ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    39ec:	46d0      	mov	r8, sl
    39ee:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    39f2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    39f6:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    39f8:	f8db 3000 	ldr.w	r3, [fp]
    39fc:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    39fe:	23ff      	movs	r3, #255	; 0xff
    3a00:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    3a02:	8ba2      	ldrh	r2, [r4, #28]
    3a04:	8be3      	ldrh	r3, [r4, #30]
    3a06:	4293      	cmp	r3, r2
    3a08:	f240 8080 	bls.w	3b0c <ticker_job+0x4ec>
		skip = ticker->lazy_current -
    3a0c:	1a9b      	subs	r3, r3, r2
    3a0e:	b29b      	uxth	r3, r3
		skip = 0;
    3a10:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    3a12:	fa0f f388 	sxth.w	r3, r8
    3a16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a1a:	00db      	lsls	r3, r3, #3
    3a1c:	9313      	str	r3, [sp, #76]	; 0x4c
    3a1e:	e0c8      	b.n	3bb2 <ticker_job+0x592>
				user_op = &user_ops[user_ops_first];
    3a20:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a26:	011b      	lsls	r3, r3, #4
    3a28:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    3a2a:	f109 0201 	add.w	r2, r9, #1
    3a2e:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    3a32:	9a06      	ldr	r2, [sp, #24]
    3a34:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    3a36:	454a      	cmp	r2, r9
    3a38:	bf08      	it	eq
    3a3a:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    3a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3a40:	5cd3      	ldrb	r3, [r2, r3]
    3a42:	2b03      	cmp	r3, #3
    3a44:	d10e      	bne.n	3a64 <ticker_job+0x444>
				id_insert = user_op->id;
    3a46:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    3a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3a4c:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    3a50:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    3a54:	7862      	ldrb	r2, [r4, #1]
    3a56:	78a3      	ldrb	r3, [r4, #2]
    3a58:	429a      	cmp	r2, r3
    3a5a:	d008      	beq.n	3a6e <ticker_job+0x44e>
					ticker_job_op_cb(user_op,
    3a5c:	2101      	movs	r1, #1
    3a5e:	4628      	mov	r0, r5
    3a60:	f7ff fd80 	bl	3564 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    3a64:	9b06      	ldr	r3, [sp, #24]
    3a66:	789b      	ldrb	r3, [r3, #2]
    3a68:	454b      	cmp	r3, r9
    3a6a:	d1d9      	bne.n	3a20 <ticker_job+0x400>
    3a6c:	e63d      	b.n	36ea <ticker_job+0xca>
	ticker->ticks_periodic = start->ticks_periodic;
    3a6e:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    3a70:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    3a74:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    3a76:	692b      	ldr	r3, [r5, #16]
    3a78:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    3a7a:	8aab      	ldrh	r3, [r5, #20]
    3a7c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    3a7e:	69ab      	ldr	r3, [r5, #24]
    3a80:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    3a82:	69eb      	ldr	r3, [r5, #28]
    3a84:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    3a86:	6a2b      	ldr	r3, [r5, #32]
    3a88:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    3a8a:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    3a8c:	68ab      	ldr	r3, [r5, #8]
    3a8e:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    3a90:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    3a92:	686a      	ldr	r2, [r5, #4]
    3a94:	4620      	mov	r0, r4
    3a96:	f7ff fd47 	bl	3528 <ticks_to_expire_prep>
	ticker->force = 1;
    3a9a:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    3a9c:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    3a9e:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    3aa0:	70e3      	strb	r3, [r4, #3]
    3aa2:	f04f 0aff 	mov.w	sl, #255	; 0xff
    3aa6:	e7a7      	b.n	39f8 <ticker_job+0x3d8>
    3aa8:	ff172b5a 	.word	0xff172b5a
    3aac:	7f172b59 	.word	0x7f172b59
    3ab0:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    3ab4:	6860      	ldr	r0, [r4, #4]
    3ab6:	2800      	cmp	r0, #0
    3ab8:	f000 80c7 	beq.w	3c4a <ticker_job+0x62a>
	ticker->remainder_current += ticker->remainder_periodic;
    3abc:	e9d4 1208 	ldrd	r1, r2, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    3ac0:	4bae      	ldr	r3, [pc, #696]	; (3d7c <ticker_job+0x75c>)
	ticker->remainder_current += ticker->remainder_periodic;
    3ac2:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3ac4:	49ae      	ldr	r1, [pc, #696]	; (3d80 <ticker_job+0x760>)
    3ac6:	18d3      	adds	r3, r2, r3
    3ac8:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    3aca:	bf9c      	itt	ls
    3acc:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    3ad0:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3ad4:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    3ad6:	bf8b      	itete	hi
    3ad8:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    3ada:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    3ade:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    3ae0:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3ae2:	4403      	add	r3, r0
		return 1;
    3ae4:	bf98      	it	ls
    3ae6:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3ae8:	4413      	add	r3, r2
			ticker->lazy_current++;
    3aea:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3aec:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    3aee:	3201      	adds	r2, #1
    3af0:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    3af2:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    3af4:	4293      	cmp	r3, r2
    3af6:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    3afa:	bf89      	itett	hi
    3afc:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    3afe:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    3b00:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    3b02:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    3b04:	bf9c      	itt	ls
    3b06:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    3b08:	60a1      	strls	r1, [r4, #8]
    3b0a:	e052      	b.n	3bb2 <ticker_job+0x592>
		skip = 0;
    3b0c:	2300      	movs	r3, #0
    3b0e:	e77f      	b.n	3a10 <ticker_job+0x3f0>
		if (ticker_current->ticks_slot != 0) {
    3b10:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    3b12:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    3b14:	b946      	cbnz	r6, 3b28 <ticker_job+0x508>
			if (ticks_slot_previous > ticks_to_expire_current) {
    3b16:	9f07      	ldr	r7, [sp, #28]
    3b18:	42b8      	cmp	r0, r7
    3b1a:	d200      	bcs.n	3b1e <ticker_job+0x4fe>
				ticks_slot_previous -= ticks_to_expire_current;
    3b1c:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    3b1e:	930b      	str	r3, [sp, #44]	; 0x2c
    3b20:	9607      	str	r6, [sp, #28]
    3b22:	f812 303e 	ldrb.w	r3, [r2, lr, lsl #3]
    3b26:	e053      	b.n	3bd0 <ticker_job+0x5b0>
		if (ticker_current->ticks_slot != 0) {
    3b28:	9308      	str	r3, [sp, #32]
    3b2a:	e7f8      	b.n	3b1e <ticker_job+0x4fe>
		ticker = &node[ticker_id_head];
    3b2c:	b230      	sxth	r0, r6
    3b2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3b32:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    3b36:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    3b38:	68bf      	ldr	r7, [r7, #8]
    3b3a:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    3b3c:	4577      	cmp	r7, lr
    3b3e:	d209      	bcs.n	3b54 <ticker_job+0x534>
		if (ticker->ticks_slot) {
    3b40:	9f10      	ldr	r7, [sp, #64]	; 0x40
    3b42:	69bf      	ldr	r7, [r7, #24]
    3b44:	2f00      	cmp	r7, #0
    3b46:	d154      	bne.n	3bf2 <ticker_job+0x5d2>
		ticks_slot -= ticks_to_expire;
    3b48:	9e11      	ldr	r6, [sp, #68]	; 0x44
    3b4a:	ebae 0e06 	sub.w	lr, lr, r6
		ticker_id_head = ticker->next;
    3b4e:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    3b52:	e04c      	b.n	3bee <ticker_job+0x5ce>
			return TICKER_NULL;
    3b54:	26ff      	movs	r6, #255	; 0xff
    3b56:	e04c      	b.n	3bf2 <ticker_job+0x5d2>
	while (id_insert !=
    3b58:	9b08      	ldr	r3, [sp, #32]
    3b5a:	4598      	cmp	r8, r3
    3b5c:	d06a      	beq.n	3c34 <ticker_job+0x614>
		if (id_collide != TICKER_NULL) {
    3b5e:	9b08      	ldr	r3, [sp, #32]
    3b60:	2bff      	cmp	r3, #255	; 0xff
    3b62:	d0a7      	beq.n	3ab4 <ticker_job+0x494>
    3b64:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    3b66:	b233      	sxth	r3, r6
    3b68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3b6c:	9307      	str	r3, [sp, #28]
    3b6e:	9a07      	ldr	r2, [sp, #28]
    3b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3b72:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    3b76:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    3b78:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    3b7a:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    3b7c:	bf88      	it	hi
    3b7e:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    3b80:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    3b82:	bf8c      	ite	hi
    3b84:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    3b86:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    3b88:	2a00      	cmp	r2, #0
    3b8a:	d093      	beq.n	3ab4 <ticker_job+0x494>
    3b8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3b8e:	4293      	cmp	r3, r2
    3b90:	d890      	bhi.n	3ab4 <ticker_job+0x494>
			    skip_collide <= skip &&
    3b92:	78fa      	ldrb	r2, [r7, #3]
    3b94:	78e3      	ldrb	r3, [r4, #3]
    3b96:	429a      	cmp	r2, r3
    3b98:	d28c      	bcs.n	3ab4 <ticker_job+0x494>
					ticker_dequeue(instance, id_collide);
    3b9a:	4631      	mov	r1, r6
    3b9c:	4658      	mov	r0, fp
    3b9e:	f7ff fc98 	bl	34d2 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    3ba2:	78bb      	ldrb	r3, [r7, #2]
    3ba4:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    3ba6:	9a07      	ldr	r2, [sp, #28]
    3ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    3baa:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    3bac:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    3bb0:	46b2      	mov	sl, r6
	ticker_new = &node[id];
    3bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    3bb4:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    3bb8:	f8db 0018 	ldr.w	r0, [fp, #24]
    3bbc:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    3bbe:	eb02 0c03 	add.w	ip, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    3bc2:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    3bc4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    3bc8:	f8dc 1008 	ldr.w	r1, [ip, #8]
	previous = current;
    3bcc:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    3bce:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    3bd0:	2bff      	cmp	r3, #255	; 0xff
    3bd2:	d006      	beq.n	3be2 <ticker_job+0x5c2>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    3bd4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
    3bd8:	eb02 06ce 	add.w	r6, r2, lr, lsl #3
		(ticks_to_expire_current =
    3bdc:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    3bde:	4281      	cmp	r1, r0
    3be0:	d896      	bhi.n	3b10 <ticker_job+0x4f0>
				     ticks_to_expire + ticker_new->ticks_slot);
    3be2:	f8dc 0018 	ldr.w	r0, [ip, #24]
    3be6:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    3be8:	eb01 0e00 	add.w	lr, r1, r0
    3bec:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    3bee:	2eff      	cmp	r6, #255	; 0xff
    3bf0:	d19c      	bne.n	3b2c <ticker_job+0x50c>
	if ((ticker_new->ticks_slot == 0) ||
    3bf2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    3bf4:	b128      	cbz	r0, 3c02 <ticker_job+0x5e2>
    3bf6:	9807      	ldr	r0, [sp, #28]
    3bf8:	4281      	cmp	r1, r0
    3bfa:	d3ad      	bcc.n	3b58 <ticker_job+0x538>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    3bfc:	2eff      	cmp	r6, #255	; 0xff
    3bfe:	f040 80d2 	bne.w	3da6 <ticker_job+0x786>
		if (previous == current) {
    3c02:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    3c04:	f8cc 1008 	str.w	r1, [ip, #8]
		if (previous == current) {
    3c08:	4283      	cmp	r3, r0
			node[previous].next = id;
    3c0a:	bf18      	it	ne
    3c0c:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    3c10:	f88c 3000 	strb.w	r3, [ip]
			node[previous].next = id;
    3c14:	bf16      	itet	ne
    3c16:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    3c1a:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    3c1e:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    3c22:	2bff      	cmp	r3, #255	; 0xff
    3c24:	d006      	beq.n	3c34 <ticker_job+0x614>
			node[current].ticks_to_expire -= ticks_to_expire;
    3c26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3c2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3c2e:	689a      	ldr	r2, [r3, #8]
    3c30:	1a51      	subs	r1, r2, r1
    3c32:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    3c34:	78a3      	ldrb	r3, [r4, #2]
    3c36:	3301      	adds	r3, #1
    3c38:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    3c3a:	2100      	movs	r1, #0
			if (user_op) {
    3c3c:	2d00      	cmp	r5, #0
    3c3e:	f43f aecd 	beq.w	39dc <ticker_job+0x3bc>
				ticker_job_op_cb(user_op, status);
    3c42:	4628      	mov	r0, r5
    3c44:	f7ff fc8e 	bl	3564 <ticker_job_op_cb>
    3c48:	e6c8      	b.n	39dc <ticker_job+0x3bc>
			return TICKER_STATUS_FAILURE;
    3c4a:	2101      	movs	r1, #1
    3c4c:	e7f6      	b.n	3c3c <ticker_job+0x61c>
		flag_compare_update = 1;
    3c4e:	2301      	movs	r3, #1
    3c50:	9304      	str	r3, [sp, #16]
    3c52:	e559      	b.n	3708 <ticker_job+0xe8>
		user = &users[count_user];
    3c54:	9b03      	ldr	r3, [sp, #12]
    3c56:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    3c5a:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    3c5c:	786b      	ldrb	r3, [r5, #1]
    3c5e:	78ea      	ldrb	r2, [r5, #3]
    3c60:	429a      	cmp	r2, r3
    3c62:	f43f ad56 	beq.w	3712 <ticker_job+0xf2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    3c66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c6a:	011a      	lsls	r2, r3, #4
    3c6c:	18b3      	adds	r3, r6, r2
	switch (uop->op) {
    3c6e:	5cb2      	ldrb	r2, [r6, r2]
    3c70:	2a01      	cmp	r2, #1
    3c72:	d024      	beq.n	3cbe <ticker_job+0x69e>
    3c74:	2a02      	cmp	r2, #2
    3c76:	d129      	bne.n	3ccc <ticker_job+0x6ac>
		ticker_by_next_slot_get(instance,
    3c78:	e9d3 9001 	ldrd	r9, r0, [r3, #4]
	_ticker_id_head = *ticker_id_head;
    3c7c:	f899 2000 	ldrb.w	r2, [r9]
		ticker_by_next_slot_get(instance,
    3c80:	f8d3 e00c 	ldr.w	lr, [r3, #12]
	node = instance->node;
    3c84:	f8db c000 	ldr.w	ip, [fp]
    3c88:	f8db 1014 	ldr.w	r1, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    3c8c:	2aff      	cmp	r2, #255	; 0xff
    3c8e:	d002      	beq.n	3c96 <ticker_job+0x676>
    3c90:	6807      	ldr	r7, [r0, #0]
    3c92:	42b9      	cmp	r1, r7
    3c94:	d023      	beq.n	3cde <ticker_job+0x6be>
		_ticker_id_head = instance->ticker_id_head;
    3c96:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    3c9a:	6001      	str	r1, [r0, #0]
		_ticks_to_expire = 0;
    3c9c:	2100      	movs	r1, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    3c9e:	2aff      	cmp	r2, #255	; 0xff
    3ca0:	d009      	beq.n	3cb6 <ticker_job+0x696>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    3ca2:	eb02 0882 	add.w	r8, r2, r2, lsl #2
    3ca6:	eb0c 0ac8 	add.w	sl, ip, r8, lsl #3
    3caa:	f8da 0008 	ldr.w	r0, [sl, #8]
    3cae:	4401      	add	r1, r0
	while ((_ticker_id_head != TICKER_NULL) &&
    3cb0:	f8da 0018 	ldr.w	r0, [sl, #24]
    3cb4:	b1d0      	cbz	r0, 3cec <ticker_job+0x6cc>
	*ticker_id_head = _ticker_id_head;
    3cb6:	f889 2000 	strb.w	r2, [r9]
	*ticks_to_expire = _ticks_to_expire;
    3cba:	f8ce 1000 	str.w	r1, [lr]
		uop->status = TICKER_STATUS_SUCCESS;
    3cbe:	2200      	movs	r2, #0
    3cc0:	625a      	str	r2, [r3, #36]	; 0x24
		fp_op_func = uop->fp_op_func;
    3cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (fp_op_func) {
    3cc4:	b112      	cbz	r2, 3ccc <ticker_job+0x6ac>
		fp_op_func(uop->status, uop->op_context);
    3cc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3cc8:	2000      	movs	r0, #0
    3cca:	4790      	blx	r2
			first = user->first + 1;
    3ccc:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    3cce:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    3cd0:	3301      	adds	r3, #1
    3cd2:	b2db      	uxtb	r3, r3
				first = 0;
    3cd4:	429a      	cmp	r2, r3
    3cd6:	bf08      	it	eq
    3cd8:	2300      	moveq	r3, #0
			user->first = first;
    3cda:	706b      	strb	r3, [r5, #1]
    3cdc:	e7be      	b.n	3c5c <ticker_job+0x63c>
		ticker = &node[_ticker_id_head];
    3cde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    3ce2:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    3ce6:	f81c 2032 	ldrb.w	r2, [ip, r2, lsl #3]
    3cea:	e7d8      	b.n	3c9e <ticker_job+0x67e>
		_ticker_id_head = ticker->next;
    3cec:	f81c 2038 	ldrb.w	r2, [ip, r8, lsl #3]
    3cf0:	e7d5      	b.n	3c9e <ticker_job+0x67e>
	if (ticker_id_old_head == TICKER_NULL) {
    3cf2:	9b05      	ldr	r3, [sp, #20]
    3cf4:	2bff      	cmp	r3, #255	; 0xff
    3cf6:	d107      	bne.n	3d08 <ticker_job+0x6e8>
		ticks_current = cntr_cnt_get();
    3cf8:	f006 f8cc 	bl	9e94 <cntr_cnt_get>
    3cfc:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    3cfe:	f006 f88d 	bl	9e1c <cntr_start>
    3d02:	b908      	cbnz	r0, 3d08 <ticker_job+0x6e8>
			instance->ticks_current = ticks_current;
    3d04:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    3d08:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    3d0c:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    3d10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    3d14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3d18:	260a      	movs	r6, #10
    3d1a:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    3d1c:	f006 f8ba 	bl	9e94 <cntr_cnt_get>
		cc = instance->ticks_current;
    3d20:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3d24:	1b03      	subs	r3, r0, r4
    3d26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    3d2a:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    3d2c:	42ab      	cmp	r3, r5
    3d2e:	bf2c      	ite	cs
    3d30:	18e4      	addcs	r4, r4, r3
    3d32:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    3d34:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    3d38:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    3d3a:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3d3e:	4620      	mov	r0, r4
    3d40:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    3d42:	f006 f8a7 	bl	9e94 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3d46:	1bc0      	subs	r0, r0, r7
    3d48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d4c:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3d4e:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3d50:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    3d54:	42a0      	cmp	r0, r4
    3d56:	f67f acf0 	bls.w	373a <ticker_job+0x11a>
		LL_ASSERT(i);
    3d5a:	3e01      	subs	r6, #1
    3d5c:	d1de      	bne.n	3d1c <ticker_job+0x6fc>
    3d5e:	4b09      	ldr	r3, [pc, #36]	; (3d84 <ticker_job+0x764>)
    3d60:	4a09      	ldr	r2, [pc, #36]	; (3d88 <ticker_job+0x768>)
    3d62:	490a      	ldr	r1, [pc, #40]	; (3d8c <ticker_job+0x76c>)
    3d64:	480a      	ldr	r0, [pc, #40]	; (3d90 <ticker_job+0x770>)
    3d66:	e9cd 3300 	strd	r3, r3, [sp]
    3d6a:	4b0a      	ldr	r3, [pc, #40]	; (3d94 <ticker_job+0x774>)
    3d6c:	f7fd fab2 	bl	12d4 <printk>
    3d70:	4040      	eors	r0, r0
    3d72:	f380 8811 	msr	BASEPRI, r0
    3d76:	f04f 0004 	mov.w	r0, #4
    3d7a:	df02      	svc	2
    3d7c:	ff172b5a 	.word	0xff172b5a
    3d80:	7f172b59 	.word	0x7f172b59
    3d84:	0000bda7 	.word	0x0000bda7
    3d88:	0000c71e 	.word	0x0000c71e
    3d8c:	0000c693 	.word	0x0000c693
    3d90:	0000cc9a 	.word	0x0000cc9a
    3d94:	0000cc80 	.word	0x0000cc80
	if (!pending) {
    3d98:	2b00      	cmp	r3, #0
    3d9a:	f43f af58 	beq.w	3c4e <ticker_job+0x62e>
	instance->job_guard = 0;
    3d9e:	2300      	movs	r3, #0
    3da0:	f88b 301e 	strb.w	r3, [fp, #30]
    3da4:	e4bf      	b.n	3726 <ticker_job+0x106>
	while (id_insert !=
    3da6:	45b0      	cmp	r8, r6
    3da8:	f47f aedd 	bne.w	3b66 <ticker_job+0x546>
    3dac:	e742      	b.n	3c34 <ticker_job+0x614>
}
    3dae:	b015      	add	sp, #84	; 0x54
    3db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003db4 <ticker_init>:
{
    3db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    3db6:	4e1c      	ldr	r6, [pc, #112]	; (3e28 <ticker_init+0x74>)
{
    3db8:	9f05      	ldr	r7, [sp, #20]
    3dba:	f89d 4018 	ldrb.w	r4, [sp, #24]
    3dbe:	f8dd c01c 	ldr.w	ip, [sp, #28]
	instance->count_node = count_node;
    3dc2:	252c      	movs	r5, #44	; 0x2c
    3dc4:	4345      	muls	r5, r0
    3dc6:	eb06 0e05 	add.w	lr, r6, r5
	instance->node = node;
    3dca:	5172      	str	r2, [r6, r5]
	instance->count_node = count_node;
    3dcc:	f88e 1008 	strb.w	r1, [lr, #8]
	instance->count_user = count_user;
    3dd0:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    3dd4:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    3dd8:	3b01      	subs	r3, #1
    3dda:	b2db      	uxtb	r3, r3
    3ddc:	2bff      	cmp	r3, #255	; 0xff
    3dde:	d113      	bne.n	3e08 <ticker_init+0x54>
	if (count_op) {
    3de0:	bb04      	cbnz	r4, 3e24 <ticker_init+0x70>
	instance->caller_id_get_cb = caller_id_get_cb;
    3de2:	232c      	movs	r3, #44	; 0x2c
    3de4:	4358      	muls	r0, r3
    3de6:	1833      	adds	r3, r6, r0
    3de8:	9a08      	ldr	r2, [sp, #32]
    3dea:	621a      	str	r2, [r3, #32]
	instance->sched_cb = sched_cb;
    3dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3dee:	625a      	str	r2, [r3, #36]	; 0x24
    3df0:	3018      	adds	r0, #24
	instance->trigger_set_cb = trigger_set_cb;
    3df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3df4:	629a      	str	r2, [r3, #40]	; 0x28
    3df6:	1832      	adds	r2, r6, r0
	instance->ticks_slot_previous = 0;
    3df8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3dfc:	5034      	str	r4, [r6, r0]
    3dfe:	8091      	strh	r1, [r2, #4]
	return TICKER_STATUS_SUCCESS;
    3e00:	4620      	mov	r0, r4
	instance->ticks_current = 0;
    3e02:	615c      	str	r4, [r3, #20]
	instance->ticks_elapsed_first = 0;
    3e04:	815c      	strh	r4, [r3, #10]
}
    3e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    3e08:	b21a      	sxth	r2, r3
    3e0a:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
    3e0e:	f8c1 c004 	str.w	ip, [r1, #4]
		user_op_ += users[count_user].count_user_op;
    3e12:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    3e16:	eb02 0142 	add.w	r1, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    3e1a:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    3e1c:	eb0c 1c01 	add.w	ip, ip, r1, lsl #4
		count_op -= users[count_user].count_user_op;
    3e20:	b2e4      	uxtb	r4, r4
    3e22:	e7d9      	b.n	3dd8 <ticker_init+0x24>
		return TICKER_STATUS_FAILURE;
    3e24:	2001      	movs	r0, #1
    3e26:	e7ee      	b.n	3e06 <ticker_init+0x52>
    3e28:	200008c8 	.word	0x200008c8

00003e2c <ticker_trigger>:
	instance = &_instance[instance_index];
    3e2c:	4a07      	ldr	r2, [pc, #28]	; (3e4c <ticker_trigger+0x20>)
    3e2e:	212c      	movs	r1, #44	; 0x2c
    3e30:	fb00 2301 	mla	r3, r0, r1, r2
{
    3e34:	b410      	push	{r4}
	if (instance->sched_cb) {
    3e36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3e38:	b12c      	cbz	r4, 3e46 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3e3a:	46a4      	mov	ip, r4
    3e3c:	2201      	movs	r2, #1
    3e3e:	2103      	movs	r1, #3
    3e40:	2002      	movs	r0, #2
}
    3e42:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3e44:	4760      	bx	ip
}
    3e46:	bc10      	pop	{r4}
    3e48:	4770      	bx	lr
    3e4a:	bf00      	nop
    3e4c:	200008c8 	.word	0x200008c8

00003e50 <ticker_start>:
{
    3e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    3e54:	4c22      	ldr	r4, [pc, #136]	; (3ee0 <ticker_start+0x90>)
    3e56:	272c      	movs	r7, #44	; 0x2c
    3e58:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
    3e5c:	b20d      	sxth	r5, r1
    3e5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3e62:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    3e66:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    3e6a:	f89c 4003 	ldrb.w	r4, [ip, #3]
    3e6e:	1c66      	adds	r6, r4, #1
    3e70:	b2f6      	uxtb	r6, r6
		last = 0;
    3e72:	42b0      	cmp	r0, r6
    3e74:	bf98      	it	ls
    3e76:	2600      	movls	r6, #0
	if (last == user->first) {
    3e78:	f89c 0001 	ldrb.w	r0, [ip, #1]
    3e7c:	42b0      	cmp	r0, r6
    3e7e:	d02d      	beq.n	3edc <ticker_start+0x8c>
	user_op = &user->user_op[user->last];
    3e80:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3e84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3e88:	0125      	lsls	r5, r4, #4
    3e8a:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
    3e8c:	f04f 0e03 	mov.w	lr, #3
    3e90:	f800 e005 	strb.w	lr, [r0, r5]
	user_op->params.start.ticks_at_start = ticks_anchor;
    3e94:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    3e96:	9b06      	ldr	r3, [sp, #24]
    3e98:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3e9a:	9b07      	ldr	r3, [sp, #28]
    3e9c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    3e9e:	9b08      	ldr	r3, [sp, #32]
    3ea0:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    3ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3ea4:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    3ea6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3eaa:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    3eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3eae:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    3eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3eb2:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3eb4:	2302      	movs	r3, #2
    3eb6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3eb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3eba:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    3ebe:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3ec2:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3ec6:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    3eca:	4608      	mov	r0, r1
    3ecc:	4798      	blx	r3
    3ece:	4643      	mov	r3, r8
    3ed0:	2200      	movs	r2, #0
    3ed2:	2104      	movs	r1, #4
    3ed4:	47a8      	blx	r5
	return user_op->status;
    3ed6:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    3edc:	2001      	movs	r0, #1
    3ede:	e7fb      	b.n	3ed8 <ticker_start+0x88>
    3ee0:	200008c8 	.word	0x200008c8

00003ee4 <ticker_update>:
{
    3ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    3ee8:	4c22      	ldr	r4, [pc, #136]	; (3f74 <ticker_update+0x90>)
    3eea:	272c      	movs	r7, #44	; 0x2c
    3eec:	fb00 4907 	mla	r9, r0, r7, r4
	user = &instance->user[user_id];
    3ef0:	b20d      	sxth	r5, r1
    3ef2:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3ef6:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    3efa:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    3efe:	f89c 4003 	ldrb.w	r4, [ip, #3]
    3f02:	1c66      	adds	r6, r4, #1
    3f04:	b2f6      	uxtb	r6, r6
		last = 0;
    3f06:	42b0      	cmp	r0, r6
    3f08:	bf98      	it	ls
    3f0a:	2600      	movls	r6, #0
	if (last == user->first) {
    3f0c:	f89c 0001 	ldrb.w	r0, [ip, #1]
    3f10:	42b0      	cmp	r0, r6
    3f12:	d02d      	beq.n	3f70 <ticker_update+0x8c>
	user_op = &user->user_op[user->last];
    3f14:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3f18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3f1c:	0125      	lsls	r5, r4, #4
    3f1e:	1944      	adds	r4, r0, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    3f20:	f04f 0804 	mov.w	r8, #4
    3f24:	f800 8005 	strb.w	r8, [r0, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    3f28:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3f2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    3f2e:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    3f30:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3f34:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    3f36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3f3a:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    3f3c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3f40:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    3f42:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3f46:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    3f48:	2302      	movs	r3, #2
    3f4a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3f4e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    3f52:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3f54:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3f56:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3f5a:	e9d9 3508 	ldrd	r3, r5, [r9, #32]
    3f5e:	4608      	mov	r0, r1
    3f60:	4798      	blx	r3
    3f62:	464b      	mov	r3, r9
    3f64:	2200      	movs	r2, #0
    3f66:	4641      	mov	r1, r8
    3f68:	47a8      	blx	r5
	return user_op->status;
    3f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    3f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    3f70:	2001      	movs	r0, #1
    3f72:	e7fb      	b.n	3f6c <ticker_update+0x88>
    3f74:	200008c8 	.word	0x200008c8

00003f78 <ticker_stop>:
{
    3f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    3f7c:	4c1a      	ldr	r4, [pc, #104]	; (3fe8 <ticker_stop+0x70>)
    3f7e:	262c      	movs	r6, #44	; 0x2c
    3f80:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
    3f84:	b20f      	sxth	r7, r1
    3f86:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3f8a:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    3f8e:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    3f92:	f89c 4003 	ldrb.w	r4, [ip, #3]
    3f96:	1c65      	adds	r5, r4, #1
    3f98:	b2ed      	uxtb	r5, r5
		last = 0;
    3f9a:	42a8      	cmp	r0, r5
    3f9c:	bf98      	it	ls
    3f9e:	2500      	movls	r5, #0
	if (last == user->first) {
    3fa0:	f89c 0001 	ldrb.w	r0, [ip, #1]
    3fa4:	42a8      	cmp	r0, r5
    3fa6:	d01c      	beq.n	3fe2 <ticker_stop+0x6a>
	user_op = &user->user_op[user->last];
    3fa8:	f8dc 0004 	ldr.w	r0, [ip, #4]
    3fac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3fb0:	0124      	lsls	r4, r4, #4
    3fb2:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3fb4:	f04f 0e05 	mov.w	lr, #5
    3fb8:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = ticker_id;
    3fbc:	707a      	strb	r2, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3fbe:	2202      	movs	r2, #2
	user_op->fp_op_func = fp_op_func;
    3fc0:	e9c7 2309 	strd	r2, r3, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    3fc4:	9b06      	ldr	r3, [sp, #24]
    3fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    3fc8:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3fcc:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    3fd0:	4608      	mov	r0, r1
    3fd2:	4798      	blx	r3
    3fd4:	4643      	mov	r3, r8
    3fd6:	2200      	movs	r2, #0
    3fd8:	2104      	movs	r1, #4
    3fda:	47a0      	blx	r4
	return user_op->status;
    3fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    3fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    3fe2:	2001      	movs	r0, #1
    3fe4:	e7fb      	b.n	3fde <ticker_stop+0x66>
    3fe6:	bf00      	nop
    3fe8:	200008c8 	.word	0x200008c8

00003fec <ticker_next_slot_get>:
{
    3fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    3ff0:	4c1c      	ldr	r4, [pc, #112]	; (4064 <ticker_next_slot_get+0x78>)
    3ff2:	272c      	movs	r7, #44	; 0x2c
    3ff4:	fb00 4807 	mla	r8, r0, r7, r4
	user = &instance->user[user_id];
    3ff8:	b20d      	sxth	r5, r1
    3ffa:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3ffe:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
	if (last >= user->count_user_op) {
    4002:	f810 0035 	ldrb.w	r0, [r0, r5, lsl #3]
	last = user->last + 1;
    4006:	f89c 4003 	ldrb.w	r4, [ip, #3]
    400a:	1c66      	adds	r6, r4, #1
    400c:	b2f6      	uxtb	r6, r6
		last = 0;
    400e:	42b0      	cmp	r0, r6
    4010:	bf98      	it	ls
    4012:	2600      	movls	r6, #0
	if (last == user->first) {
    4014:	f89c 0001 	ldrb.w	r0, [ip, #1]
    4018:	42b0      	cmp	r0, r6
    401a:	d021      	beq.n	4060 <ticker_next_slot_get+0x74>
	user_op = &user->user_op[user->last];
    401c:	f8dc e004 	ldr.w	lr, [ip, #4]
    4020:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    4024:	0125      	lsls	r5, r4, #4
    4026:	eb0e 0405 	add.w	r4, lr, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    402a:	2002      	movs	r0, #2
    402c:	f80e 0005 	strb.w	r0, [lr, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    4030:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    4034:	9b06      	ldr	r3, [sp, #24]
    4036:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    4038:	9b07      	ldr	r3, [sp, #28]
    403a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    403c:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    403e:	9b08      	ldr	r3, [sp, #32]
	user_op->id = TICKER_NULL;
    4040:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    4042:	6260      	str	r0, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    4044:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    4046:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    404a:	e9d8 3508 	ldrd	r3, r5, [r8, #32]
    404e:	4608      	mov	r0, r1
    4050:	4798      	blx	r3
    4052:	4643      	mov	r3, r8
    4054:	2200      	movs	r2, #0
    4056:	2104      	movs	r1, #4
    4058:	47a8      	blx	r5
	return user_op->status;
    405a:	6a60      	ldr	r0, [r4, #36]	; 0x24
}
    405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    4060:	2001      	movs	r0, #1
    4062:	e7fb      	b.n	405c <ticker_next_slot_get+0x70>
    4064:	200008c8 	.word	0x200008c8

00004068 <ticker_job_idle_get>:
{
    4068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    406c:	4c1a      	ldr	r4, [pc, #104]	; (40d8 <ticker_job_idle_get+0x70>)
    406e:	262c      	movs	r6, #44	; 0x2c
    4070:	fb00 4806 	mla	r8, r0, r6, r4
	user = &instance->user[user_id];
    4074:	b20f      	sxth	r7, r1
    4076:	f8d8 0004 	ldr.w	r0, [r8, #4]
    407a:	eb00 0cc7 	add.w	ip, r0, r7, lsl #3
	if (last >= user->count_user_op) {
    407e:	f810 0037 	ldrb.w	r0, [r0, r7, lsl #3]
	last = user->last + 1;
    4082:	f89c 4003 	ldrb.w	r4, [ip, #3]
    4086:	1c65      	adds	r5, r4, #1
    4088:	b2ed      	uxtb	r5, r5
		last = 0;
    408a:	42a8      	cmp	r0, r5
    408c:	bf98      	it	ls
    408e:	2500      	movls	r5, #0
	if (last == user->first) {
    4090:	f89c 0001 	ldrb.w	r0, [ip, #1]
    4094:	42a8      	cmp	r0, r5
    4096:	d01c      	beq.n	40d2 <ticker_job_idle_get+0x6a>
	user_op = &user->user_op[user->last];
    4098:	f8dc 0004 	ldr.w	r0, [ip, #4]
    409c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    40a0:	0124      	lsls	r4, r4, #4
    40a2:	1907      	adds	r7, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    40a4:	f04f 0e01 	mov.w	lr, #1
    40a8:	f800 e004 	strb.w	lr, [r0, r4]
	user_op->id = TICKER_NULL;
    40ac:	20ff      	movs	r0, #255	; 0xff
    40ae:	7078      	strb	r0, [r7, #1]
	user_op->status = TICKER_STATUS_BUSY;
    40b0:	2002      	movs	r0, #2
	user_op->fp_op_func = fp_op_func;
    40b2:	e9c7 0209 	strd	r0, r2, [r7, #36]	; 0x24
	user_op->op_context = op_context;
    40b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	user->last = last;
    40b8:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    40bc:	e9d8 3408 	ldrd	r3, r4, [r8, #32]
    40c0:	4608      	mov	r0, r1
    40c2:	4798      	blx	r3
    40c4:	4643      	mov	r3, r8
    40c6:	2200      	movs	r2, #0
    40c8:	2104      	movs	r1, #4
    40ca:	47a0      	blx	r4
	return user_op->status;
    40cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
}
    40ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    40d2:	2001      	movs	r0, #1
    40d4:	e7fb      	b.n	40ce <ticker_job_idle_get+0x66>
    40d6:	bf00      	nop
    40d8:	200008c8 	.word	0x200008c8

000040dc <ticker_job_sched>:
{
    40dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    40e0:	4c08      	ldr	r4, [pc, #32]	; (4104 <ticker_job_sched+0x28>)
    40e2:	252c      	movs	r5, #44	; 0x2c
    40e4:	fb05 4300 	mla	r3, r5, r0, r4
    40e8:	e9d3 3708 	ldrd	r3, r7, [r3, #32]
{
    40ec:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    40ee:	4608      	mov	r0, r1
    40f0:	4798      	blx	r3
    40f2:	fb06 4305 	mla	r3, r6, r5, r4
    40f6:	46bc      	mov	ip, r7
    40f8:	2200      	movs	r2, #0
    40fa:	2104      	movs	r1, #4
}
    40fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    4100:	4760      	bx	ip
    4102:	bf00      	nop
    4104:	200008c8 	.word	0x200008c8

00004108 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    4108:	f005 bec4 	b.w	9e94 <cntr_cnt_get>

0000410c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    410c:	1a40      	subs	r0, r0, r1
}
    410e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4112:	4770      	bx	lr

00004114 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    4114:	b508      	push	{r3, lr}
    4116:	4603      	mov	r3, r0
	if (addr_type > 1) {
    4118:	2b01      	cmp	r3, #1
{
    411a:	4608      	mov	r0, r1
	if (addr_type > 1) {
    411c:	d80e      	bhi.n	413c <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    411e:	b133      	cbz	r3, 412e <ll_addr_get+0x1a>
		if (bdaddr) {
    4120:	b119      	cbz	r1, 412a <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    4122:	2206      	movs	r2, #6
    4124:	4906      	ldr	r1, [pc, #24]	; (4140 <ll_addr_get+0x2c>)
    4126:	f7fc fa5a 	bl	5de <memcpy>
		}

		return rnd_addr;
    412a:	4805      	ldr	r0, [pc, #20]	; (4140 <ll_addr_get+0x2c>)
    412c:	e007      	b.n	413e <ll_addr_get+0x2a>
	}

	if (bdaddr) {
    412e:	b119      	cbz	r1, 4138 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    4130:	2206      	movs	r2, #6
    4132:	4904      	ldr	r1, [pc, #16]	; (4144 <ll_addr_get+0x30>)
    4134:	f7fc fa53 	bl	5de <memcpy>
	}

	return pub_addr;
    4138:	4802      	ldr	r0, [pc, #8]	; (4144 <ll_addr_get+0x30>)
    413a:	e000      	b.n	413e <ll_addr_get+0x2a>
		return NULL;
    413c:	2000      	movs	r0, #0
}
    413e:	bd08      	pop	{r3, pc}
    4140:	20000926 	.word	0x20000926
    4144:	20000920 	.word	0x20000920

00004148 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    4148:	b570      	push	{r4, r5, r6, lr}
    414a:	4606      	mov	r6, r0
    414c:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    414e:	f004 ff79 	bl	9044 <ll_adv_is_enabled>
    4152:	4604      	mov	r4, r0
    4154:	b110      	cbz	r0, 415c <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    4156:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    4158:	4620      	mov	r0, r4
    415a:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    415c:	f004 ff86 	bl	906c <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    4160:	f010 0f06 	tst.w	r0, #6
    4164:	d1f7      	bne.n	4156 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    4166:	2206      	movs	r2, #6
    4168:	4629      	mov	r1, r5
	if (addr_type) {
    416a:	b11e      	cbz	r6, 4174 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    416c:	4802      	ldr	r0, [pc, #8]	; (4178 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    416e:	f7fc fa36 	bl	5de <memcpy>
    4172:	e7f1      	b.n	4158 <ll_addr_set+0x10>
    4174:	4801      	ldr	r0, [pc, #4]	; (417c <ll_addr_set+0x34>)
    4176:	e7fa      	b.n	416e <ll_addr_set+0x26>
    4178:	20000926 	.word	0x20000926
    417c:	20000920 	.word	0x20000920

00004180 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    4180:	2300      	movs	r3, #0
    4182:	7003      	strb	r3, [r0, #0]
	*max = 0;
    4184:	700b      	strb	r3, [r1, #0]
}
    4186:	4770      	bx	lr

00004188 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    4188:	b573      	push	{r0, r1, r4, r5, r6, lr}
    418a:	460c      	mov	r4, r1
    418c:	1846      	adds	r6, r0, r1
    418e:	1b35      	subs	r5, r6, r4
	while (len) {
    4190:	b18c      	cbz	r4, 41b6 <bt_rand+0x2e>
		u32_t v = sys_rand32_get();
    4192:	f7fd f985 	bl	14a0 <sys_rand32_get>

		if (len >= sizeof(v)) {
    4196:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    4198:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    419a:	d907      	bls.n	41ac <bt_rand+0x24>
			memcpy(buf, &v, sizeof(v));
    419c:	2204      	movs	r2, #4
    419e:	eb0d 0102 	add.w	r1, sp, r2
    41a2:	4628      	mov	r0, r5
    41a4:	f7fc fa1b 	bl	5de <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    41a8:	3c04      	subs	r4, #4
    41aa:	e7f0      	b.n	418e <bt_rand+0x6>
		} else {
			memcpy(buf, &v, len);
    41ac:	4622      	mov	r2, r4
    41ae:	a901      	add	r1, sp, #4
    41b0:	4628      	mov	r0, r5
    41b2:	f7fc fa14 	bl	5de <memcpy>
			break;
		}
	}

	return 0;
}
    41b6:	2000      	movs	r0, #0
    41b8:	b002      	add	sp, #8
    41ba:	bd70      	pop	{r4, r5, r6, pc}

000041bc <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    41bc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    41be:	4802      	ldr	r0, [pc, #8]	; (41c8 <_hci_driver_init+0xc>)
    41c0:	f7fe fe52 	bl	2e68 <bt_hci_driver_register>

	return 0;
}
    41c4:	2000      	movs	r0, #0
    41c6:	bd08      	pop	{r3, pc}
    41c8:	0000ccec 	.word	0x0000ccec

000041cc <recv_thread>:
{
    41cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    41ce:	4d21      	ldr	r5, [pc, #132]	; (4254 <recv_thread+0x88>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    41d0:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    41d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    41d6:	4628      	mov	r0, r5
    41d8:	f006 fedb 	bl	af92 <k_queue_get>
		if (node_rx && !buf) {
    41dc:	4604      	mov	r4, r0
    41de:	b318      	cbz	r0, 4228 <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    41e0:	f000 fe4c 	bl	4e7c <hci_get_class>
	switch (class) {
    41e4:	2802      	cmp	r0, #2
    41e6:	9403      	str	r4, [sp, #12]
    41e8:	d821      	bhi.n	422e <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    41ea:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    41ec:	bf0e      	itee	eq
    41ee:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    41f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    41f4:	2001      	movne	r0, #1
    41f6:	f7fe ff6f 	bl	30d8 <bt_buf_get_rx>
    41fa:	4604      	mov	r4, r0
		if (buf) {
    41fc:	b118      	cbz	r0, 4206 <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    41fe:	4601      	mov	r1, r0
    4200:	9803      	ldr	r0, [sp, #12]
    4202:	f000 fd13 	bl	4c2c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    4206:	9b03      	ldr	r3, [sp, #12]
    4208:	2100      	movs	r1, #0
    420a:	88d8      	ldrh	r0, [r3, #6]
    420c:	f005 f808 	bl	9220 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    4210:	a804      	add	r0, sp, #16
    4212:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    4216:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    4218:	f004 ff8e 	bl	9138 <ll_rx_mem_release>
		if (buf) {
    421c:	b124      	cbz	r4, 4228 <recv_thread+0x5c>
			if (buf->len) {
    421e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    4220:	4620      	mov	r0, r4
			if (buf->len) {
    4222:	b19b      	cbz	r3, 424c <recv_thread+0x80>
				bt_recv(buf);
    4224:	f7fe fca6 	bl	2b74 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    4228:	f007 f854 	bl	b2d4 <_impl_k_yield>
    422c:	e7d1      	b.n	41d2 <recv_thread+0x6>
		LL_ASSERT(0);
    422e:	4b0a      	ldr	r3, [pc, #40]	; (4258 <recv_thread+0x8c>)
    4230:	4a0a      	ldr	r2, [pc, #40]	; (425c <recv_thread+0x90>)
    4232:	490b      	ldr	r1, [pc, #44]	; (4260 <recv_thread+0x94>)
    4234:	480b      	ldr	r0, [pc, #44]	; (4264 <recv_thread+0x98>)
    4236:	e9cd 3300 	strd	r3, r3, [sp]
    423a:	4b0b      	ldr	r3, [pc, #44]	; (4268 <recv_thread+0x9c>)
    423c:	f7fd f84a 	bl	12d4 <printk>
    4240:	4040      	eors	r0, r0
    4242:	f380 8811 	msr	BASEPRI, r0
    4246:	f04f 0004 	mov.w	r0, #4
    424a:	df02      	svc	2
				net_buf_unref(buf);
    424c:	f006 fc4e 	bl	aaec <net_buf_unref>
    4250:	e7ea      	b.n	4228 <recv_thread+0x5c>
    4252:	bf00      	nop
    4254:	200039c4 	.word	0x200039c4
    4258:	0000bda7 	.word	0x0000bda7
    425c:	0000c71e 	.word	0x0000c71e
    4260:	0000c693 	.word	0x0000c693
    4264:	0000c669 	.word	0x0000c669
    4268:	0000ccbd 	.word	0x0000ccbd

0000426c <hci_driver_send>:
{
    426c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!buf->len) {
    426e:	8983      	ldrh	r3, [r0, #12]
{
    4270:	4604      	mov	r4, r0
	if (!buf->len) {
    4272:	b95b      	cbnz	r3, 428c <hci_driver_send+0x20>
		BT_ERR("Empty HCI packet");
    4274:	4b11      	ldr	r3, [pc, #68]	; (42bc <hci_driver_send+0x50>)
    4276:	4a12      	ldr	r2, [pc, #72]	; (42c0 <hci_driver_send+0x54>)
    4278:	4912      	ldr	r1, [pc, #72]	; (42c4 <hci_driver_send+0x58>)
    427a:	4813      	ldr	r0, [pc, #76]	; (42c8 <hci_driver_send+0x5c>)
    427c:	e9cd 3300 	strd	r3, r3, [sp]
    4280:	4b12      	ldr	r3, [pc, #72]	; (42cc <hci_driver_send+0x60>)
    4282:	f7fd f827 	bl	12d4 <printk>
		return -EINVAL;
    4286:	f06f 0015 	mvn.w	r0, #21
    428a:	e00a      	b.n	42a2 <hci_driver_send+0x36>
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    428c:	7d02      	ldrb	r2, [r0, #20]
	switch (type) {
    428e:	b952      	cbnz	r2, 42a6 <hci_driver_send+0x3a>
	evt = hci_cmd_handle(buf);
    4290:	f000 f9c6 	bl	4620 <hci_cmd_handle>
	if (evt) {
    4294:	b108      	cbz	r0, 429a <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    4296:	f7fe fd69 	bl	2d6c <bt_recv_prio>
		net_buf_unref(buf);
    429a:	4620      	mov	r0, r4
    429c:	f006 fc26 	bl	aaec <net_buf_unref>
	return err;
    42a0:	2000      	movs	r0, #0
}
    42a2:	b004      	add	sp, #16
    42a4:	bd10      	pop	{r4, pc}
		BT_ERR("Unknown HCI type %u", type);
    42a6:	4b05      	ldr	r3, [pc, #20]	; (42bc <hci_driver_send+0x50>)
    42a8:	9300      	str	r3, [sp, #0]
	switch (type) {
    42aa:	e9cd 2301 	strd	r2, r3, [sp, #4]
		BT_ERR("Unknown HCI type %u", type);
    42ae:	4905      	ldr	r1, [pc, #20]	; (42c4 <hci_driver_send+0x58>)
    42b0:	4b06      	ldr	r3, [pc, #24]	; (42cc <hci_driver_send+0x60>)
    42b2:	4a03      	ldr	r2, [pc, #12]	; (42c0 <hci_driver_send+0x54>)
    42b4:	4806      	ldr	r0, [pc, #24]	; (42d0 <hci_driver_send+0x64>)
    42b6:	f7fd f80d 	bl	12d4 <printk>
    42ba:	e7e4      	b.n	4286 <hci_driver_send+0x1a>
    42bc:	0000bda7 	.word	0x0000bda7
    42c0:	0000c71e 	.word	0x0000c71e
    42c4:	0000c693 	.word	0x0000c693
    42c8:	0000cd29 	.word	0x0000cd29
    42cc:	0000ccc9 	.word	0x0000ccc9
    42d0:	0000cd4a 	.word	0x0000cd4a

000042d4 <prio_recv_thread>:
{
    42d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    42d6:	4c0c      	ldr	r4, [pc, #48]	; (4308 <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    42d8:	4d0c      	ldr	r5, [pc, #48]	; (430c <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    42da:	f10d 0102 	add.w	r1, sp, #2
    42de:	a801      	add	r0, sp, #4
    42e0:	f004 fef2 	bl	90c8 <ll_rx_get>
    42e4:	2800      	cmp	r0, #0
    42e6:	d1f8      	bne.n	42da <prio_recv_thread+0x6>
		if (node_rx) {
    42e8:	9b01      	ldr	r3, [sp, #4]
    42ea:	b133      	cbz	r3, 42fa <prio_recv_thread+0x26>
			ll_rx_dequeue();
    42ec:	f005 f94c 	bl	9588 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    42f0:	9901      	ldr	r1, [sp, #4]
    42f2:	4628      	mov	r0, r5
    42f4:	f006 fe29 	bl	af4a <k_queue_append>
    42f8:	e7ef      	b.n	42da <prio_recv_thread+0x6>
    42fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    42fe:	4620      	mov	r0, r4
    4300:	f007 f8be 	bl	b480 <_impl_k_sem_take>
    4304:	e7e9      	b.n	42da <prio_recv_thread+0x6>
    4306:	bf00      	nop
    4308:	200039ac 	.word	0x200039ac
    430c:	200039c4 	.word	0x200039c4

00004310 <hci_driver_open>:
{
    4310:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    4312:	481a      	ldr	r0, [pc, #104]	; (437c <hci_driver_open+0x6c>)
{
    4314:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    4316:	f005 fa17 	bl	9748 <ll_init>
	if (err) {
    431a:	4604      	mov	r4, r0
    431c:	b160      	cbz	r0, 4338 <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    431e:	4b18      	ldr	r3, [pc, #96]	; (4380 <hci_driver_open+0x70>)
    4320:	9300      	str	r3, [sp, #0]
    4322:	e9cd 0301 	strd	r0, r3, [sp, #4]
    4326:	4a17      	ldr	r2, [pc, #92]	; (4384 <hci_driver_open+0x74>)
    4328:	4b17      	ldr	r3, [pc, #92]	; (4388 <hci_driver_open+0x78>)
    432a:	4918      	ldr	r1, [pc, #96]	; (438c <hci_driver_open+0x7c>)
    432c:	4818      	ldr	r0, [pc, #96]	; (4390 <hci_driver_open+0x80>)
    432e:	f7fc ffd1 	bl	12d4 <printk>
}
    4332:	4620      	mov	r0, r4
    4334:	b006      	add	sp, #24
    4336:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    4338:	f000 fdc0 	bl	4ebc <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    433c:	f06f 0309 	mvn.w	r3, #9
    4340:	e9cd 4302 	strd	r4, r3, [sp, #8]
    4344:	e9cd 4404 	strd	r4, r4, [sp, #16]
    4348:	e9cd 4400 	strd	r4, r4, [sp]
    434c:	4b11      	ldr	r3, [pc, #68]	; (4394 <hci_driver_open+0x84>)
    434e:	4912      	ldr	r1, [pc, #72]	; (4398 <hci_driver_open+0x88>)
    4350:	4812      	ldr	r0, [pc, #72]	; (439c <hci_driver_open+0x8c>)
    4352:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    4356:	f007 fa4b 	bl	b7f0 <_impl_k_thread_create>
    435a:	f06f 0307 	mvn.w	r3, #7
    435e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    4362:	e9cd 4404 	strd	r4, r4, [sp, #16]
    4366:	e9cd 4400 	strd	r4, r4, [sp]
    436a:	4b0d      	ldr	r3, [pc, #52]	; (43a0 <hci_driver_open+0x90>)
    436c:	490d      	ldr	r1, [pc, #52]	; (43a4 <hci_driver_open+0x94>)
    436e:	480e      	ldr	r0, [pc, #56]	; (43a8 <hci_driver_open+0x98>)
    4370:	f240 522c 	movw	r2, #1324	; 0x52c
    4374:	f007 fa3c 	bl	b7f0 <_impl_k_thread_create>
    4378:	e7db      	b.n	4332 <hci_driver_open+0x22>
    437a:	bf00      	nop
    437c:	200039ac 	.word	0x200039ac
    4380:	0000bda7 	.word	0x0000bda7
    4384:	0000c71e 	.word	0x0000c71e
    4388:	0000ccd9 	.word	0x0000ccd9
    438c:	0000c693 	.word	0x0000c693
    4390:	0000ccfc 	.word	0x0000ccfc
    4394:	000042d5 	.word	0x000042d5
    4398:	20001d00 	.word	0x20001d00
    439c:	2000166c 	.word	0x2000166c
    43a0:	000041cd 	.word	0x000041cd
    43a4:	20001ff0 	.word	0x20001ff0
    43a8:	20001604 	.word	0x20001604

000043ac <sys_put_le32>:
	dst[1] = val >> 8;
    43ac:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    43b0:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    43b2:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    43b4:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    43b6:	0a00      	lsrs	r0, r0, #8
    43b8:	704b      	strb	r3, [r1, #1]
    43ba:	70c8      	strb	r0, [r1, #3]
}
    43bc:	4770      	bx	lr

000043be <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    43be:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    43c0:	3008      	adds	r0, #8
{
    43c2:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    43c4:	2102      	movs	r1, #2
{
    43c6:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    43c8:	f006 fbc2 	bl	ab50 <net_buf_simple_add>
	hdr->evt = evt;
    43cc:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    43ce:	7044      	strb	r4, [r0, #1]
}
    43d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000043d4 <cmd_complete>:

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    43d4:	b538      	push	{r3, r4, r5, lr}
    43d6:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    43d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    43dc:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    43de:	f7fe fe8b 	bl	30f8 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    43e2:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    43e4:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    43e6:	b2d2      	uxtb	r2, r2
    43e8:	210e      	movs	r1, #14
    43ea:	f7ff ffe8 	bl	43be <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    43ee:	6820      	ldr	r0, [r4, #0]
    43f0:	2103      	movs	r1, #3
    43f2:	3008      	adds	r0, #8
    43f4:	f006 fbac 	bl	ab50 <net_buf_simple_add>
	cc->ncmd = 1;
    43f8:	2301      	movs	r3, #1
    43fa:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    43fc:	4b05      	ldr	r3, [pc, #20]	; (4414 <cmd_complete+0x40>)
    43fe:	881b      	ldrh	r3, [r3, #0]
    4400:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    4404:	6820      	ldr	r0, [r4, #0]
    4406:	4629      	mov	r1, r5
    4408:	3008      	adds	r0, #8
}
    440a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    440e:	f006 bb9f 	b.w	ab50 <net_buf_simple_add>
    4412:	bf00      	nop
    4414:	2000092c 	.word	0x2000092c

00004418 <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    4418:	b570      	push	{r4, r5, r6, lr}
    441a:	4604      	mov	r4, r0
    441c:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    441e:	3201      	adds	r2, #1
{
    4420:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    4422:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    4424:	b2d2      	uxtb	r2, r2
    4426:	213e      	movs	r1, #62	; 0x3e
    4428:	f7ff ffc9 	bl	43be <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    442c:	2101      	movs	r1, #1
    442e:	4620      	mov	r0, r4
    4430:	f006 fb8e 	bl	ab50 <net_buf_simple_add>
	me->subevent = subevt;
    4434:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    4436:	4629      	mov	r1, r5
    4438:	4620      	mov	r0, r4
}
    443a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    443e:	f006 bb87 	b.w	ab50 <net_buf_simple_add>
	...

00004444 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    4444:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
    4448:	4604      	mov	r4, r0
    444a:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    444c:	4b15      	ldr	r3, [pc, #84]	; (44a4 <le_remote_feat_complete+0x60>)
{
    444e:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4450:	e9d3 2300 	ldrd	r2, r3, [r3]
    4454:	f04f 0b00 	mov.w	fp, #0
    4458:	f003 5c00 	and.w	ip, r3, #536870912	; 0x20000000
    445c:	ea5b 030c 	orrs.w	r3, fp, ip
{
    4460:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4462:	d01d      	beq.n	44a0 <le_remote_feat_complete+0x5c>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    4464:	4b10      	ldr	r3, [pc, #64]	; (44a8 <le_remote_feat_complete+0x64>)
    4466:	e9d3 2300 	ldrd	r2, r3, [r3]
    446a:	f04f 0c00 	mov.w	ip, #0
    446e:	f002 0b08 	and.w	fp, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4472:	ea5b 030c 	orrs.w	r3, fp, ip
    4476:	d013      	beq.n	44a0 <le_remote_feat_complete+0x5c>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    4478:	220b      	movs	r2, #11
    447a:	2104      	movs	r1, #4
    447c:	f7ff ffcc 	bl	4418 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    4480:	2208      	movs	r2, #8
	sep->status = status;
    4482:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4484:	f8a0 6001 	strh.w	r6, [r0, #1]
    4488:	3003      	adds	r0, #3
	if (!status) {
    448a:	b924      	cbnz	r4, 4496 <le_remote_feat_complete+0x52>
		memcpy(&sep->features[0],
    448c:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    448e:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memcpy(&sep->features[0],
    4492:	f7fc b8a4 	b.w	5de <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4496:	2100      	movs	r1, #0
}
    4498:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    449c:	f7fc b8cc 	b.w	638 <memset>
}
    44a0:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
    44a4:	200037b0 	.word	0x200037b0
    44a8:	200037b8 	.word	0x200037b8

000044ac <bt_addr_le_to_str.constprop.42>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    44ac:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    44ae:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    44b0:	b08a      	sub	sp, #40	; 0x28
    44b2:	4604      	mov	r4, r0
    44b4:	460e      	mov	r6, r1
    44b6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    44b8:	2b03      	cmp	r3, #3
    44ba:	d820      	bhi.n	44fe <bt_addr_le_to_str.constprop.42+0x52>
    44bc:	e8df f003 	tbb	[pc, r3]
    44c0:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    44c4:	4911      	ldr	r1, [pc, #68]	; (450c <bt_addr_le_to_str.constprop.42+0x60>)
		strcpy(type, "random");
    44c6:	4628      	mov	r0, r5
    44c8:	f7fc f862 	bl	590 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    44cc:	7862      	ldrb	r2, [r4, #1]
    44ce:	9204      	str	r2, [sp, #16]
    44d0:	78a2      	ldrb	r2, [r4, #2]
    44d2:	9203      	str	r2, [sp, #12]
    44d4:	78e2      	ldrb	r2, [r4, #3]
    44d6:	9202      	str	r2, [sp, #8]
    44d8:	7922      	ldrb	r2, [r4, #4]
    44da:	9201      	str	r2, [sp, #4]
    44dc:	7962      	ldrb	r2, [r4, #5]
    44de:	9200      	str	r2, [sp, #0]
    44e0:	79a3      	ldrb	r3, [r4, #6]
    44e2:	9505      	str	r5, [sp, #20]
    44e4:	4a0a      	ldr	r2, [pc, #40]	; (4510 <bt_addr_le_to_str.constprop.42+0x64>)
    44e6:	211b      	movs	r1, #27
    44e8:	4630      	mov	r0, r6
    44ea:	f7fc ff01 	bl	12f0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    44ee:	b00a      	add	sp, #40	; 0x28
    44f0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    44f2:	4908      	ldr	r1, [pc, #32]	; (4514 <bt_addr_le_to_str.constprop.42+0x68>)
    44f4:	e7e7      	b.n	44c6 <bt_addr_le_to_str.constprop.42+0x1a>
		strcpy(type, "public id");
    44f6:	4908      	ldr	r1, [pc, #32]	; (4518 <bt_addr_le_to_str.constprop.42+0x6c>)
    44f8:	e7e5      	b.n	44c6 <bt_addr_le_to_str.constprop.42+0x1a>
		strcpy(type, "random id");
    44fa:	4908      	ldr	r1, [pc, #32]	; (451c <bt_addr_le_to_str.constprop.42+0x70>)
    44fc:	e7e3      	b.n	44c6 <bt_addr_le_to_str.constprop.42+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    44fe:	4a08      	ldr	r2, [pc, #32]	; (4520 <bt_addr_le_to_str.constprop.42+0x74>)
    4500:	210a      	movs	r1, #10
    4502:	4628      	mov	r0, r5
    4504:	f7fc fef4 	bl	12f0 <snprintk>
    4508:	e7e0      	b.n	44cc <bt_addr_le_to_str.constprop.42+0x20>
    450a:	bf00      	nop
    450c:	0000c356 	.word	0x0000c356
    4510:	0000c37f 	.word	0x0000c37f
    4514:	0000c35d 	.word	0x0000c35d
    4518:	0000c364 	.word	0x0000c364
    451c:	0000c36e 	.word	0x0000c36e
    4520:	0000c378 	.word	0x0000c378

00004524 <le_adv_ext_report.isra.38>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    4524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4528:	4604      	mov	r4, r0
		  offsetof(struct pdu_adv, payload) + adv->len];
    452a:	7840      	ldrb	r0, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    452c:	4d32      	ldr	r5, [pc, #200]	; (45f8 <le_adv_ext_report.isra.38+0xd4>)
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    452e:	b092      	sub	sp, #72	; 0x48
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4530:	4401      	add	r1, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4532:	9507      	str	r5, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4534:	7a8b      	ldrb	r3, [r1, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    4536:	9500      	str	r5, [sp, #0]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4538:	425b      	negs	r3, r3
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    453a:	b25b      	sxtb	r3, r3
    453c:	9306      	str	r3, [sp, #24]
    453e:	7823      	ldrb	r3, [r4, #0]
    4540:	09d9      	lsrs	r1, r3, #7
    4542:	9105      	str	r1, [sp, #20]
    4544:	f3c3 1180 	ubfx	r1, r3, #6, #1
    4548:	f003 030f 	and.w	r3, r3, #15
    454c:	e9cd 0103 	strd	r0, r1, [sp, #12]
    4550:	e9cd 2301 	strd	r2, r3, [sp, #4]
    4554:	4929      	ldr	r1, [pc, #164]	; (45fc <le_adv_ext_report.isra.38+0xd8>)
    4556:	4b2a      	ldr	r3, [pc, #168]	; (4600 <le_adv_ext_report.isra.38+0xdc>)
    4558:	4a2a      	ldr	r2, [pc, #168]	; (4604 <le_adv_ext_report.isra.38+0xe0>)
    455a:	482b      	ldr	r0, [pc, #172]	; (4608 <le_adv_ext_report.isra.38+0xe4>)
    455c:	f7fc feba 	bl	12d4 <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    4560:	7823      	ldrb	r3, [r4, #0]
    4562:	f003 030f 	and.w	r3, r3, #15
    4566:	2b07      	cmp	r3, #7
    4568:	d143      	bne.n	45f2 <le_adv_ext_report.isra.38+0xce>
    456a:	7863      	ldrb	r3, [r4, #1]
    456c:	2b00      	cmp	r3, #0
    456e:	d040      	beq.n	45f2 <le_adv_ext_report.isra.38+0xce>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    4570:	78a3      	ldrb	r3, [r4, #2]
    4572:	4922      	ldr	r1, [pc, #136]	; (45fc <le_adv_ext_report.isra.38+0xd8>)
    4574:	9503      	str	r5, [sp, #12]
    4576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    457a:	099b      	lsrs	r3, r3, #6
    457c:	9202      	str	r2, [sp, #8]
    457e:	e9cd 5300 	strd	r5, r3, [sp]
    4582:	4a20      	ldr	r2, [pc, #128]	; (4604 <le_adv_ext_report.isra.38+0xe0>)
    4584:	4b1e      	ldr	r3, [pc, #120]	; (4600 <le_adv_ext_report.isra.38+0xdc>)
    4586:	4821      	ldr	r0, [pc, #132]	; (460c <le_adv_ext_report.isra.38+0xe8>)
    4588:	f7fc fea4 	bl	12d4 <printk>
		if (!p->ext_hdr_len) {
    458c:	78a3      	ldrb	r3, [r4, #2]
    458e:	0699      	lsls	r1, r3, #26
    4590:	d02f      	beq.n	45f2 <le_adv_ext_report.isra.38+0xce>
		if (h->adv_addr) {
    4592:	78e3      	ldrb	r3, [r4, #3]
    4594:	07da      	lsls	r2, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    4596:	f104 0604 	add.w	r6, r4, #4
		if (h->adv_addr) {
    459a:	d51c      	bpl.n	45d6 <le_adv_ext_report.isra.38+0xb2>
			addr.type = adv->tx_addr;
    459c:	7823      	ldrb	r3, [r4, #0]
    459e:	af12      	add	r7, sp, #72	; 0x48
    45a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    45a4:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    45a8:	2206      	movs	r2, #6
    45aa:	4631      	mov	r1, r6
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    45ac:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    45b0:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    45b4:	f7fc f813 	bl	5de <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    45b8:	4641      	mov	r1, r8
    45ba:	4638      	mov	r0, r7
    45bc:	f7ff ff76 	bl	44ac <bt_addr_le_to_str.constprop.42>
			BT_WARN("AdvA: %s", addr_str);
    45c0:	e9cd 8501 	strd	r8, r5, [sp, #4]
    45c4:	9500      	str	r5, [sp, #0]
    45c6:	4b0e      	ldr	r3, [pc, #56]	; (4600 <le_adv_ext_report.isra.38+0xdc>)
    45c8:	4a0e      	ldr	r2, [pc, #56]	; (4604 <le_adv_ext_report.isra.38+0xe0>)
    45ca:	490c      	ldr	r1, [pc, #48]	; (45fc <le_adv_ext_report.isra.38+0xd8>)
    45cc:	4810      	ldr	r0, [pc, #64]	; (4610 <le_adv_ext_report.isra.38+0xec>)
			ptr += BDADDR_SIZE;
    45ce:	f104 060a 	add.w	r6, r4, #10
			BT_WARN("AdvA: %s", addr_str);
    45d2:	f7fc fe7f 	bl	12d4 <printk>
		if (h->tx_pwr) {
    45d6:	78e3      	ldrb	r3, [r4, #3]
    45d8:	065b      	lsls	r3, r3, #25
    45da:	d50a      	bpl.n	45f2 <le_adv_ext_report.isra.38+0xce>
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    45dc:	9502      	str	r5, [sp, #8]
    45de:	f996 3000 	ldrsb.w	r3, [r6]
    45e2:	4a08      	ldr	r2, [pc, #32]	; (4604 <le_adv_ext_report.isra.38+0xe0>)
    45e4:	4905      	ldr	r1, [pc, #20]	; (45fc <le_adv_ext_report.isra.38+0xd8>)
    45e6:	480b      	ldr	r0, [pc, #44]	; (4614 <le_adv_ext_report.isra.38+0xf0>)
    45e8:	e9cd 5300 	strd	r5, r3, [sp]
    45ec:	4b04      	ldr	r3, [pc, #16]	; (4600 <le_adv_ext_report.isra.38+0xdc>)
    45ee:	f7fc fe71 	bl	12d4 <printk>
}
    45f2:	b012      	add	sp, #72	; 0x48
    45f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45f8:	0000bda7 	.word	0x0000bda7
    45fc:	0000c693 	.word	0x0000c693
    4600:	0000cd88 	.word	0x0000cd88
    4604:	0000c68c 	.word	0x0000c68c
    4608:	0000ceaa 	.word	0x0000ceaa
    460c:	0000cef7 	.word	0x0000cef7
    4610:	0000cf28 	.word	0x0000cf28
    4614:	0000cf41 	.word	0x0000cf41

00004618 <sys_get_le64>:
{
    4618:	4603      	mov	r3, r0
}
    461a:	6800      	ldr	r0, [r0, #0]
    461c:	6859      	ldr	r1, [r3, #4]
    461e:	4770      	bx	lr

00004620 <hci_cmd_handle>:
{
    4620:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    4622:	8981      	ldrh	r1, [r0, #12]
{
    4624:	b099      	sub	sp, #100	; 0x64
	struct net_buf *evt = NULL;
    4626:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    4628:	2902      	cmp	r1, #2
{
    462a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    462c:	950d      	str	r5, [sp, #52]	; 0x34
	if (cmd->len < sizeof(*chdr)) {
    462e:	d80b      	bhi.n	4648 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    4630:	4bc2      	ldr	r3, [pc, #776]	; (493c <hci_cmd_handle+0x31c>)
    4632:	4ac3      	ldr	r2, [pc, #780]	; (4940 <hci_cmd_handle+0x320>)
    4634:	49c3      	ldr	r1, [pc, #780]	; (4944 <hci_cmd_handle+0x324>)
    4636:	48c4      	ldr	r0, [pc, #784]	; (4948 <hci_cmd_handle+0x328>)
    4638:	e9cd 3300 	strd	r3, r3, [sp]
    463c:	4bc3      	ldr	r3, [pc, #780]	; (494c <hci_cmd_handle+0x32c>)
		BT_ERR("Invalid HCI CMD packet length");
    463e:	f7fc fe49 	bl	12d4 <printk>
		return NULL;
    4642:	4628      	mov	r0, r5
}
    4644:	b019      	add	sp, #100	; 0x64
    4646:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    4648:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    464a:	4ec1      	ldr	r6, [pc, #772]	; (4950 <hci_cmd_handle+0x330>)
    464c:	781a      	ldrb	r2, [r3, #0]
    464e:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    4650:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4652:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    4656:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4658:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    465a:	d907      	bls.n	466c <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    465c:	4bb7      	ldr	r3, [pc, #732]	; (493c <hci_cmd_handle+0x31c>)
    465e:	4ab8      	ldr	r2, [pc, #736]	; (4940 <hci_cmd_handle+0x320>)
    4660:	49b8      	ldr	r1, [pc, #736]	; (4944 <hci_cmd_handle+0x324>)
    4662:	48bc      	ldr	r0, [pc, #752]	; (4954 <hci_cmd_handle+0x334>)
    4664:	e9cd 3300 	strd	r3, r3, [sp]
    4668:	4bb8      	ldr	r3, [pc, #736]	; (494c <hci_cmd_handle+0x32c>)
    466a:	e7e8      	b.n	463e <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    466c:	2103      	movs	r1, #3
    466e:	f104 0008 	add.w	r0, r4, #8
    4672:	f006 fa84 	bl	ab7e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    4676:	8833      	ldrh	r3, [r6, #0]
    4678:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    467c:	0a9b      	lsrs	r3, r3, #10
    467e:	2b04      	cmp	r3, #4
    4680:	d064      	beq.n	474c <hci_cmd_handle+0x12c>
    4682:	d807      	bhi.n	4694 <hci_cmd_handle+0x74>
    4684:	2b03      	cmp	r3, #3
    4686:	d025      	beq.n	46d4 <hci_cmd_handle+0xb4>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    4688:	2101      	movs	r1, #1
    468a:	a80d      	add	r0, sp, #52	; 0x34
    468c:	f7ff fea2 	bl	43d4 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    4690:	2301      	movs	r3, #1
    4692:	e1da      	b.n	4a4a <hci_cmd_handle+0x42a>
	switch (BT_OGF(_opcode)) {
    4694:	2b08      	cmp	r3, #8
    4696:	f000 80da 	beq.w	484e <hci_cmd_handle+0x22e>
    469a:	2b3f      	cmp	r3, #63	; 0x3f
    469c:	d1f4      	bne.n	4688 <hci_cmd_handle+0x68>
	switch (ocf) {
    469e:	3a01      	subs	r2, #1
    46a0:	2a09      	cmp	r2, #9
    46a2:	d8f1      	bhi.n	4688 <hci_cmd_handle+0x68>
    46a4:	a301      	add	r3, pc, #4	; (adr r3, 46ac <hci_cmd_handle+0x8c>)
    46a6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    46aa:	bf00      	nop
    46ac:	00004a4f 	.word	0x00004a4f
    46b0:	00004a7d 	.word	0x00004a7d
    46b4:	00004aa5 	.word	0x00004aa5
    46b8:	00004689 	.word	0x00004689
    46bc:	00004689 	.word	0x00004689
    46c0:	00004ae9 	.word	0x00004ae9
    46c4:	00004689 	.word	0x00004689
    46c8:	00004abb 	.word	0x00004abb
    46cc:	00004af3 	.word	0x00004af3
    46d0:	00004b5f 	.word	0x00004b5f
	switch (ocf) {
    46d4:	2a03      	cmp	r2, #3
    46d6:	d014      	beq.n	4702 <hci_cmd_handle+0xe2>
    46d8:	d808      	bhi.n	46ec <hci_cmd_handle+0xcc>
    46da:	2a01      	cmp	r2, #1
    46dc:	d1d4      	bne.n	4688 <hci_cmd_handle+0x68>
	event_mask = sys_get_le64(cmd->events);
    46de:	68a0      	ldr	r0, [r4, #8]
    46e0:	f7ff ff9a 	bl	4618 <sys_get_le64>
    46e4:	4b9c      	ldr	r3, [pc, #624]	; (4958 <hci_cmd_handle+0x338>)
    46e6:	e9c3 0100 	strd	r0, r1, [r3]
    46ea:	e003      	b.n	46f4 <hci_cmd_handle+0xd4>
	switch (ocf) {
    46ec:	2a2d      	cmp	r2, #45	; 0x2d
    46ee:	d017      	beq.n	4720 <hci_cmd_handle+0x100>
    46f0:	2a63      	cmp	r2, #99	; 0x63
    46f2:	d1c9      	bne.n	4688 <hci_cmd_handle+0x68>
		ccst = cmd_complete(evt, sizeof(*ccst));
    46f4:	2101      	movs	r1, #1
    46f6:	a80d      	add	r0, sp, #52	; 0x34
    46f8:	f7ff fe6c 	bl	43d4 <cmd_complete>
		ccst->status = 0x00;
    46fc:	7005      	strb	r5, [r0, #0]
	return evt;
    46fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    4700:	e7a0      	b.n	4644 <hci_cmd_handle+0x24>
	event_mask = DEFAULT_EVENT_MASK;
    4702:	4b95      	ldr	r3, [pc, #596]	; (4958 <hci_cmd_handle+0x338>)
    4704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4708:	f641 71ff 	movw	r1, #8191	; 0x1fff
    470c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    4710:	4b92      	ldr	r3, [pc, #584]	; (495c <hci_cmd_handle+0x33c>)
    4712:	201f      	movs	r0, #31
    4714:	2100      	movs	r1, #0
    4716:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    471a:	f004 fc3d 	bl	8f98 <ll_reset>
    471e:	e7e9      	b.n	46f4 <hci_cmd_handle+0xd4>
    4720:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    4722:	2104      	movs	r1, #4
    4724:	a80d      	add	r0, sp, #52	; 0x34
	handle = sys_le16_to_cpu(cmd->handle);
    4726:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    4728:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    472a:	f7ff fe53 	bl	43d4 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    472e:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    4730:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    4732:	1cc2      	adds	r2, r0, #3
    4734:	4639      	mov	r1, r7
    4736:	4630      	mov	r0, r6
    4738:	f004 fcbc 	bl	90b4 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    473c:	2800      	cmp	r0, #0
    473e:	bf14      	ite	ne
    4740:	2302      	movne	r3, #2
    4742:	2300      	moveq	r3, #0
    4744:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    4746:	f8a4 5001 	strh.w	r5, [r4, #1]
    474a:	e7d8      	b.n	46fe <hci_cmd_handle+0xde>
	switch (ocf) {
    474c:	3a01      	subs	r2, #1
    474e:	2a08      	cmp	r2, #8
    4750:	d89a      	bhi.n	4688 <hci_cmd_handle+0x68>
    4752:	a301      	add	r3, pc, #4	; (adr r3, 4758 <hci_cmd_handle+0x138>)
    4754:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    4758:	0000477d 	.word	0x0000477d
    475c:	000047a7 	.word	0x000047a7
    4760:	0000481b 	.word	0x0000481b
    4764:	00004689 	.word	0x00004689
    4768:	00004689 	.word	0x00004689
    476c:	00004689 	.word	0x00004689
    4770:	00004689 	.word	0x00004689
    4774:	00004689 	.word	0x00004689
    4778:	00004837 	.word	0x00004837
	rp = cmd_complete(evt, sizeof(*rp));
    477c:	2109      	movs	r1, #9
    477e:	a80d      	add	r0, sp, #52	; 0x34
    4780:	f7ff fe28 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4784:	2300      	movs	r3, #0
    4786:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    4788:	7083      	strb	r3, [r0, #2]
    478a:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    478c:	f06f 030e 	mvn.w	r3, #14
    4790:	7143      	strb	r3, [r0, #5]
    4792:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    4794:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4796:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    4798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    479c:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    479e:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    47a0:	71c3      	strb	r3, [r0, #7]
    47a2:	7203      	strb	r3, [r0, #8]
    47a4:	e7ab      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    47a6:	2141      	movs	r1, #65	; 0x41
    47a8:	a80d      	add	r0, sp, #52	; 0x34
    47aa:	f7ff fe13 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    47ae:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    47b0:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    47b2:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    47b4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    47b8:	f7fb ff3e 	bl	638 <memset>
	rp->commands[2] |= BIT(7);
    47bc:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    47be:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    47c0:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[2] |= BIT(7);
    47c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    47c6:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    47c8:	79a3      	ldrb	r3, [r4, #6]
    47ca:	f063 033f 	orn	r3, r3, #63	; 0x3f
    47ce:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    47d0:	7ae3      	ldrb	r3, [r4, #11]
    47d2:	f043 0304 	orr.w	r3, r3, #4
    47d6:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    47d8:	7be3      	ldrb	r3, [r4, #15]
    47da:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    47de:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    47e0:	7c23      	ldrb	r3, [r4, #16]
    47e2:	f043 0302 	orr.w	r3, r3, #2
    47e6:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    47e8:	7de3      	ldrb	r3, [r4, #23]
    47ea:	f043 0304 	orr.w	r3, r3, #4
    47ee:	75e3      	strb	r3, [r4, #23]
	rp->commands[26] |= BIT(6) | BIT(7);
    47f0:	7ee3      	ldrb	r3, [r4, #27]
	rp->commands[27] |= BIT(6) | BIT(7);
    47f2:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[26] |= BIT(0) | BIT(1);
    47f6:	f063 033c 	orn	r3, r3, #60	; 0x3c
	rp->commands[27] |= BIT(6) | BIT(7);
    47fa:	7721      	strb	r1, [r4, #28]
	rp->commands[26] |= BIT(0) | BIT(1);
    47fc:	76e3      	strb	r3, [r4, #27]
	rp->commands[28] |= BIT(3);
    47fe:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    4800:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    4804:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    4808:	f062 0208 	orn	r2, r2, #8
	rp->commands[38] |= BIT(7);
    480c:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    4810:	7761      	strb	r1, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    4812:	76a2      	strb	r2, [r4, #26]
	rp->commands[38] |= BIT(7);
    4814:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    4818:	e771      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    481a:	2109      	movs	r1, #9
    481c:	a80d      	add	r0, sp, #52	; 0x34
    481e:	f7ff fdd9 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4822:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4824:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4826:	2208      	movs	r2, #8
	rp->status = 0x00;
    4828:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    482c:	f7fb ff04 	bl	638 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    4830:	2360      	movs	r3, #96	; 0x60
    4832:	7163      	strb	r3, [r4, #5]
    4834:	e763      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    4836:	2107      	movs	r1, #7
    4838:	a80d      	add	r0, sp, #52	; 0x34
    483a:	f7ff fdcb 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    483e:	4601      	mov	r1, r0
    4840:	2300      	movs	r3, #0
    4842:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    4846:	4618      	mov	r0, r3
    4848:	f7ff fc64 	bl	4114 <ll_addr_get>
    484c:	e757      	b.n	46fe <hci_cmd_handle+0xde>
	switch (ocf) {
    484e:	2a0a      	cmp	r2, #10
    4850:	f000 80ee 	beq.w	4a30 <hci_cmd_handle+0x410>
    4854:	d827      	bhi.n	48a6 <hci_cmd_handle+0x286>
    4856:	2a05      	cmp	r2, #5
    4858:	f000 8094 	beq.w	4984 <hci_cmd_handle+0x364>
    485c:	d812      	bhi.n	4884 <hci_cmd_handle+0x264>
    485e:	2a02      	cmp	r2, #2
    4860:	d060      	beq.n	4924 <hci_cmd_handle+0x304>
    4862:	2a03      	cmp	r2, #3
    4864:	d07c      	beq.n	4960 <hci_cmd_handle+0x340>
    4866:	2a01      	cmp	r2, #1
    4868:	f47f af0e 	bne.w	4688 <hci_cmd_handle+0x68>
	le_event_mask = sys_get_le64(cmd->events);
    486c:	68a0      	ldr	r0, [r4, #8]
    486e:	f7ff fed3 	bl	4618 <sys_get_le64>
    4872:	4b3a      	ldr	r3, [pc, #232]	; (495c <hci_cmd_handle+0x33c>)
    4874:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4878:	2101      	movs	r1, #1
    487a:	a80d      	add	r0, sp, #52	; 0x34
    487c:	f7ff fdaa 	bl	43d4 <cmd_complete>
	ccst->status = 0x00;
    4880:	2300      	movs	r3, #0
    4882:	e0e2      	b.n	4a4a <hci_cmd_handle+0x42a>
	switch (ocf) {
    4884:	2a07      	cmp	r2, #7
    4886:	f000 8162 	beq.w	4b4e <hci_cmd_handle+0x52e>
    488a:	f0c0 80b3 	bcc.w	49f4 <hci_cmd_handle+0x3d4>
    488e:	2a08      	cmp	r2, #8
    4890:	f000 80c8 	beq.w	4a24 <hci_cmd_handle+0x404>
    4894:	2a09      	cmp	r2, #9
    4896:	f47f aef7 	bne.w	4688 <hci_cmd_handle+0x68>
    489a:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    489c:	1c59      	adds	r1, r3, #1
    489e:	7818      	ldrb	r0, [r3, #0]
    48a0:	f005 f944 	bl	9b2c <ll_scan_data_set>
    48a4:	e7e8      	b.n	4878 <hci_cmd_handle+0x258>
	switch (ocf) {
    48a6:	2a12      	cmp	r2, #18
    48a8:	f000 8084 	beq.w	49b4 <hci_cmd_handle+0x394>
    48ac:	d810      	bhi.n	48d0 <hci_cmd_handle+0x2b0>
    48ae:	2a10      	cmp	r2, #16
    48b0:	d073      	beq.n	499a <hci_cmd_handle+0x37a>
    48b2:	d87b      	bhi.n	49ac <hci_cmd_handle+0x38c>
    48b4:	2a0f      	cmp	r2, #15
    48b6:	f47f aee7 	bne.w	4688 <hci_cmd_handle+0x68>
	rp = cmd_complete(evt, sizeof(*rp));
    48ba:	2102      	movs	r1, #2
    48bc:	a80d      	add	r0, sp, #52	; 0x34
    48be:	f7ff fd89 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    48c2:	2300      	movs	r3, #0
    48c4:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    48c6:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    48c8:	f005 f9f8 	bl	9cbc <ll_wl_size_get>
    48cc:	7060      	strb	r0, [r4, #1]
    48ce:	e716      	b.n	46fe <hci_cmd_handle+0xde>
	switch (ocf) {
    48d0:	2a18      	cmp	r2, #24
    48d2:	d073      	beq.n	49bc <hci_cmd_handle+0x39c>
    48d4:	d815      	bhi.n	4902 <hci_cmd_handle+0x2e2>
    48d6:	2a17      	cmp	r2, #23
    48d8:	f47f aed6 	bne.w	4688 <hci_cmd_handle+0x68>
    48dc:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    48de:	2300      	movs	r3, #0
    48e0:	aa0e      	add	r2, sp, #56	; 0x38
    48e2:	f100 0110 	add.w	r1, r0, #16
    48e6:	f005 fb09 	bl	9efc <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    48ea:	2111      	movs	r1, #17
    48ec:	a80d      	add	r0, sp, #52	; 0x34
    48ee:	f7ff fd71 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    48f2:	2300      	movs	r3, #0
    48f4:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    48f8:	2210      	movs	r2, #16
    48fa:	a90e      	add	r1, sp, #56	; 0x38
	memcpy(rp->info, build_info, sizeof(build_info));
    48fc:	f7fb fe6f 	bl	5de <memcpy>
    4900:	e6fd      	b.n	46fe <hci_cmd_handle+0xde>
	switch (ocf) {
    4902:	2a1c      	cmp	r2, #28
    4904:	d065      	beq.n	49d2 <hci_cmd_handle+0x3b2>
    4906:	2a4b      	cmp	r2, #75	; 0x4b
    4908:	f47f aebe 	bne.w	4688 <hci_cmd_handle+0x68>
	rp = cmd_complete(evt, sizeof(*rp));
    490c:	2103      	movs	r1, #3
    490e:	a80d      	add	r0, sp, #52	; 0x34
    4910:	f7ff fd60 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4914:	4601      	mov	r1, r0
    4916:	2300      	movs	r3, #0
    4918:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    491c:	3001      	adds	r0, #1
    491e:	f7ff fc2f 	bl	4180 <ll_tx_pwr_get>
    4922:	e6ec      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    4924:	2104      	movs	r1, #4
    4926:	a80d      	add	r0, sp, #52	; 0x34
    4928:	f7ff fd54 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    492c:	2300      	movs	r3, #0
    492e:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4930:	221b      	movs	r2, #27
    4932:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    4934:	2302      	movs	r3, #2
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4936:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    4938:	70c3      	strb	r3, [r0, #3]
    493a:	e6e0      	b.n	46fe <hci_cmd_handle+0xde>
    493c:	0000bda7 	.word	0x0000bda7
    4940:	0000c71e 	.word	0x0000c71e
    4944:	0000c693 	.word	0x0000c693
    4948:	0000cdde 	.word	0x0000cdde
    494c:	0000cd79 	.word	0x0000cd79
    4950:	2000092c 	.word	0x2000092c
    4954:	0000ce04 	.word	0x0000ce04
    4958:	200037b0 	.word	0x200037b0
    495c:	200037b8 	.word	0x200037b8
	rp = cmd_complete(evt, sizeof(*rp));
    4960:	2109      	movs	r1, #9
    4962:	a80d      	add	r0, sp, #52	; 0x34
    4964:	f7ff fd36 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4968:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    496a:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    496c:	2208      	movs	r2, #8
	rp->status = 0x00;
    496e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4972:	f7fb fe61 	bl	638 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    4976:	230c      	movs	r3, #12
    4978:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    497a:	2340      	movs	r3, #64	; 0x40
    497c:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    497e:	2301      	movs	r3, #1
    4980:	70e3      	strb	r3, [r4, #3]
    4982:	e6bc      	b.n	46fe <hci_cmd_handle+0xde>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    4984:	68a1      	ldr	r1, [r4, #8]
    4986:	2001      	movs	r0, #1
    4988:	f7ff fbde 	bl	4148 <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
    498c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    498e:	2101      	movs	r1, #1
    4990:	a80d      	add	r0, sp, #52	; 0x34
    4992:	f7ff fd1f 	bl	43d4 <cmd_complete>
	ccst->status = status;
    4996:	7004      	strb	r4, [r0, #0]
    4998:	e6b1      	b.n	46fe <hci_cmd_handle+0xde>
	ccst = cmd_complete(evt, sizeof(*ccst));
    499a:	2101      	movs	r1, #1
    499c:	a80d      	add	r0, sp, #52	; 0x34
    499e:	f7ff fd19 	bl	43d4 <cmd_complete>
    49a2:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    49a4:	f005 f98c 	bl	9cc0 <ll_wl_clear>
    49a8:	7020      	strb	r0, [r4, #0]
    49aa:	e6a8      	b.n	46fe <hci_cmd_handle+0xde>
	status = ll_wl_add(&cmd->addr);
    49ac:	68a0      	ldr	r0, [r4, #8]
    49ae:	f005 f99d 	bl	9cec <ll_wl_add>
    49b2:	e7eb      	b.n	498c <hci_cmd_handle+0x36c>
	status = ll_wl_remove(&cmd->addr);
    49b4:	68a0      	ldr	r0, [r4, #8]
    49b6:	f005 f9d1 	bl	9d5c <ll_wl_remove>
    49ba:	e7e7      	b.n	498c <hci_cmd_handle+0x36c>
	rp = cmd_complete(evt, sizeof(*rp));
    49bc:	2109      	movs	r1, #9
    49be:	a80d      	add	r0, sp, #52	; 0x34
    49c0:	f7ff fd08 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    49c4:	2300      	movs	r3, #0
    49c6:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    49ca:	2108      	movs	r1, #8
    49cc:	f7ff fbdc 	bl	4188 <bt_rand>
    49d0:	e695      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    49d2:	2109      	movs	r1, #9
    49d4:	a80d      	add	r0, sp, #52	; 0x34
    49d6:	f7ff fcfd 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    49da:	4601      	mov	r1, r0
    49dc:	2200      	movs	r2, #0
	rp = cmd_complete(evt, sizeof(*rp));
    49de:	4604      	mov	r4, r0
	rp->status = 0x00;
    49e0:	f801 2b01 	strb.w	r2, [r1], #1
	sys_put_le32(val, dst);
    49e4:	2003      	movs	r0, #3
    49e6:	f7ff fce1 	bl	43ac <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    49ea:	1d61      	adds	r1, r4, #5
    49ec:	4610      	mov	r0, r2
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    49ee:	f7ff fcdd 	bl	43ac <sys_put_le32>
    49f2:	e684      	b.n	46fe <hci_cmd_handle+0xde>
    49f4:	68a0      	ldr	r0, [r4, #8]
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    49f6:	2100      	movs	r1, #0
    49f8:	7903      	ldrb	r3, [r0, #4]
    49fa:	8802      	ldrh	r2, [r0, #0]
    49fc:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
    4a00:	e9cd 1107 	strd	r1, r1, [sp, #28]
    4a04:	e9cd 1105 	strd	r1, r1, [sp, #20]
    4a08:	7b84      	ldrb	r4, [r0, #14]
    4a0a:	9404      	str	r4, [sp, #16]
    4a0c:	7b44      	ldrb	r4, [r0, #13]
    4a0e:	9403      	str	r4, [sp, #12]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    4a10:	1dc4      	adds	r4, r0, #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    4a12:	9402      	str	r4, [sp, #8]
    4a14:	7984      	ldrb	r4, [r0, #6]
    4a16:	9401      	str	r4, [sp, #4]
    4a18:	7940      	ldrb	r0, [r0, #5]
    4a1a:	9000      	str	r0, [sp, #0]
    4a1c:	4608      	mov	r0, r1
    4a1e:	f004 ff3b 	bl	9898 <ll_adv_params_set>
    4a22:	e7b3      	b.n	498c <hci_cmd_handle+0x36c>
    4a24:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    4a26:	1c59      	adds	r1, r3, #1
    4a28:	7818      	ldrb	r0, [r3, #0]
    4a2a:	f005 f827 	bl	9a7c <ll_adv_data_set>
    4a2e:	e723      	b.n	4878 <hci_cmd_handle+0x258>
	status = ll_adv_enable(cmd->enable);
    4a30:	68a3      	ldr	r3, [r4, #8]
    4a32:	7818      	ldrb	r0, [r3, #0]
    4a34:	f005 f8c0 	bl	9bb8 <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4a38:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    4a3a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4a3c:	a80d      	add	r0, sp, #52	; 0x34
    4a3e:	f7ff fcc9 	bl	43d4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    4a42:	2c00      	cmp	r4, #0
    4a44:	bf14      	ite	ne
    4a46:	230c      	movne	r3, #12
    4a48:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    4a4a:	7003      	strb	r3, [r0, #0]
    4a4c:	e657      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    4a4e:	210d      	movs	r1, #13
    4a50:	a80d      	add	r0, sp, #52	; 0x34
    4a52:	f7ff fcbf 	bl	43d4 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4a56:	2202      	movs	r2, #2
    4a58:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    4a5a:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    4a5c:	2201      	movs	r2, #1
    4a5e:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4a60:	220b      	movs	r2, #11
	rp->status = 0x00;
    4a62:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4a64:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4a66:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    4a68:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4a6a:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    4a6c:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    4a6e:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4a70:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4a72:	7242      	strb	r2, [r0, #9]
    4a74:	7283      	strb	r3, [r0, #10]
    4a76:	72c3      	strb	r3, [r0, #11]
    4a78:	7303      	strb	r3, [r0, #12]
    4a7a:	e640      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    4a7c:	2141      	movs	r1, #65	; 0x41
    4a7e:	a80d      	add	r0, sp, #52	; 0x34
    4a80:	f7ff fca8 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4a84:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4a86:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4a88:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    4a8a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4a8e:	f7fb fdd3 	bl	638 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    4a92:	7863      	ldrb	r3, [r4, #1]
    4a94:	f063 0358 	orn	r3, r3, #88	; 0x58
    4a98:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    4a9a:	78a3      	ldrb	r3, [r4, #2]
    4a9c:	f043 0303 	orr.w	r3, r3, #3
    4aa0:	70a3      	strb	r3, [r4, #2]
    4aa2:	e62c      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    4aa4:	2109      	movs	r1, #9
    4aa6:	a80d      	add	r0, sp, #52	; 0x34
    4aa8:	f7ff fc94 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4aac:	2100      	movs	r1, #0
    4aae:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4ab2:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    4ab4:	f7fb fdc0 	bl	638 <memset>
    4ab8:	e621      	b.n	46fe <hci_cmd_handle+0xde>
	const char build_info[] = HCI_VS_BUILD_INFO;
    4aba:	4b5b      	ldr	r3, [pc, #364]	; (4c28 <hci_cmd_handle+0x608>)
    4abc:	aa0e      	add	r2, sp, #56	; 0x38
    4abe:	f103 0628 	add.w	r6, r3, #40	; 0x28
    4ac2:	4615      	mov	r5, r2
    4ac4:	6818      	ldr	r0, [r3, #0]
    4ac6:	6859      	ldr	r1, [r3, #4]
    4ac8:	4614      	mov	r4, r2
    4aca:	c403      	stmia	r4!, {r0, r1}
    4acc:	3308      	adds	r3, #8
    4ace:	42b3      	cmp	r3, r6
    4ad0:	4622      	mov	r2, r4
    4ad2:	d1f7      	bne.n	4ac4 <hci_cmd_handle+0x4a4>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    4ad4:	2129      	movs	r1, #41	; 0x29
    4ad6:	a80d      	add	r0, sp, #52	; 0x34
    4ad8:	f7ff fc7c 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4adc:	2300      	movs	r3, #0
    4ade:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    4ae2:	2228      	movs	r2, #40	; 0x28
    4ae4:	4629      	mov	r1, r5
    4ae6:	e709      	b.n	48fc <hci_cmd_handle+0x2dc>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    4ae8:	68a1      	ldr	r1, [r4, #8]
    4aea:	2000      	movs	r0, #0
    4aec:	f7ff fb2c 	bl	4148 <ll_addr_set>
    4af0:	e6c2      	b.n	4878 <hci_cmd_handle+0x258>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4af6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    4afa:	3201      	adds	r2, #1
    4afc:	d106      	bne.n	4b0c <hci_cmd_handle+0x4ec>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4afe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4b06:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4b08:	4293      	cmp	r3, r2
    4b0a:	d020      	beq.n	4b4e <hci_cmd_handle+0x52e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    4b0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4b10:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4b14:	07db      	lsls	r3, r3, #31
    4b16:	d51a      	bpl.n	4b4e <hci_cmd_handle+0x52e>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    4b18:	2118      	movs	r1, #24
    4b1a:	a80d      	add	r0, sp, #52	; 0x34
    4b1c:	f7ff fc5a 	bl	43d4 <cmd_complete>
		rp->status = 0x00;
    4b20:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    4b22:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    4b24:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    4b26:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    4b28:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    4b2a:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    4b2e:	1ca1      	adds	r1, r4, #2
    4b30:	f7ff fc3c 	bl	43ac <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    4b34:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    4b38:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    4b3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    4b3e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4b42:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    4b44:	2210      	movs	r2, #16
    4b46:	4631      	mov	r1, r6
    4b48:	f104 0008 	add.w	r0, r4, #8
    4b4c:	e7b2      	b.n	4ab4 <hci_cmd_handle+0x494>
	rp = cmd_complete(evt, sizeof(*rp));
    4b4e:	2102      	movs	r1, #2
    4b50:	a80d      	add	r0, sp, #52	; 0x34
    4b52:	f7ff fc3f 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4b56:	2300      	movs	r3, #0
    4b58:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    4b5a:	7043      	strb	r3, [r0, #1]
    4b5c:	e5cf      	b.n	46fe <hci_cmd_handle+0xde>
	rp = cmd_complete(evt, sizeof(*rp));
    4b5e:	2121      	movs	r1, #33	; 0x21
    4b60:	a80d      	add	r0, sp, #52	; 0x34
    4b62:	f7ff fc37 	bl	43d4 <cmd_complete>
	rp->status = 0x00;
    4b66:	4603      	mov	r3, r0
    4b68:	2200      	movs	r2, #0
    4b6a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    4b72:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4b74:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    4b78:	3101      	adds	r1, #1
    4b7a:	d04b      	beq.n	4c14 <hci_cmd_handle+0x5f4>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    4b7c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4b80:	3101      	adds	r1, #1
    4b82:	d047      	beq.n	4c14 <hci_cmd_handle+0x5f4>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4b84:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    4b88:	3101      	adds	r1, #1
    4b8a:	d043      	beq.n	4c14 <hci_cmd_handle+0x5f4>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    4b8c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4b90:	3101      	adds	r1, #1
    4b92:	d03f      	beq.n	4c14 <hci_cmd_handle+0x5f4>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    4b94:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    4b98:	4619      	mov	r1, r3
    4b9a:	f7ff fc07 	bl	43ac <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    4b9e:	1d61      	adds	r1, r4, #5
    4ba0:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    4ba4:	f7ff fc02 	bl	43ac <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    4ba8:	f104 0109 	add.w	r1, r4, #9
    4bac:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4bb0:	f7ff fbfc 	bl	43ac <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    4bb4:	f104 010d 	add.w	r1, r4, #13
    4bb8:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    4bbc:	f7ff fbf6 	bl	43ac <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4bc4:	f104 0311 	add.w	r3, r4, #17
    4bc8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
    4bcc:	3101      	adds	r1, #1
    4bce:	d027      	beq.n	4c20 <hci_cmd_handle+0x600>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4bd0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4bd4:	3101      	adds	r1, #1
    4bd6:	d023      	beq.n	4c20 <hci_cmd_handle+0x600>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4bd8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4bdc:	3101      	adds	r1, #1
    4bde:	d01f      	beq.n	4c20 <hci_cmd_handle+0x600>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    4be0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4be4:	3101      	adds	r1, #1
    4be6:	d01b      	beq.n	4c20 <hci_cmd_handle+0x600>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    4be8:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    4bec:	4619      	mov	r1, r3
    4bee:	f7ff fbdd 	bl	43ac <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    4bf2:	f104 0115 	add.w	r1, r4, #21
    4bf6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    4bfa:	f7ff fbd7 	bl	43ac <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    4bfe:	f104 0119 	add.w	r1, r4, #25
    4c02:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    4c06:	f7ff fbd1 	bl	43ac <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    4c0a:	f104 011d 	add.w	r1, r4, #29
    4c0e:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    4c12:	e6ec      	b.n	49ee <hci_cmd_handle+0x3ce>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    4c14:	2210      	movs	r2, #16
    4c16:	2100      	movs	r1, #0
    4c18:	4618      	mov	r0, r3
    4c1a:	f7fb fd0d 	bl	638 <memset>
    4c1e:	e7cf      	b.n	4bc0 <hci_cmd_handle+0x5a0>
		memset(rp->er, 0x00, sizeof(rp->er));
    4c20:	2210      	movs	r2, #16
    4c22:	2100      	movs	r1, #0
    4c24:	4618      	mov	r0, r3
    4c26:	e745      	b.n	4ab4 <hci_cmd_handle+0x494>
    4c28:	0000ce32 	.word	0x0000ce32

00004c2c <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    4c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4c30:	7903      	ldrb	r3, [r0, #4]
    4c32:	2b01      	cmp	r3, #1
{
    4c34:	b090      	sub	sp, #64	; 0x40
    4c36:	4604      	mov	r4, r0
    4c38:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    4c3a:	f100 0808 	add.w	r8, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4c3e:	f000 80b9 	beq.w	4db4 <hci_evt_encode+0x188>
	switch (node_rx->hdr.type) {
    4c42:	3b02      	subs	r3, #2
    4c44:	2b03      	cmp	r3, #3
    4c46:	f200 80a6 	bhi.w	4d96 <hci_evt_encode+0x16a>
    4c4a:	e8df f003 	tbb	[pc, r3]
    4c4e:	5302      	.short	0x5302
    4c50:	5b59      	.short	0x5b59
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    4c52:	4b7c      	ldr	r3, [pc, #496]	; (4e44 <hci_evt_encode+0x218>)
    4c54:	9309      	str	r3, [sp, #36]	; 0x24
    4c56:	f64f 7304 	movw	r3, #65284	; 0xff04
    4c5a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    4c5e:	2302      	movs	r3, #2
    4c60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    4c64:	4b78      	ldr	r3, [pc, #480]	; (4e48 <hci_evt_encode+0x21c>)
    4c66:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c6a:	2000      	movs	r0, #0
    4c6c:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    4c70:	ea50 0301 	orrs.w	r3, r0, r1
    4c74:	d03b      	beq.n	4cee <hci_evt_encode+0xc2>
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    4c76:	4b75      	ldr	r3, [pc, #468]	; (4e4c <hci_evt_encode+0x220>)
    4c78:	e9d3 2300 	ldrd	r2, r3, [r3]
    4c7c:	2100      	movs	r1, #0
    4c7e:	f002 0002 	and.w	r0, r2, #2
    4c82:	ea50 0301 	orrs.w	r3, r0, r1
    4c86:	d032      	beq.n	4cee <hci_evt_encode+0xc2>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    4c88:	7a22      	ldrb	r2, [r4, #8]
    4c8a:	7a63      	ldrb	r3, [r4, #9]
    4c8c:	f002 020f 	and.w	r2, r2, #15
    4c90:	2a01      	cmp	r2, #1
		data_len = (adv->len - BDADDR_SIZE);
    4c92:	bf1a      	itte	ne
    4c94:	1f9e      	subne	r6, r3, #6
    4c96:	b2f6      	uxtbne	r6, r6
		data_len = 0;
    4c98:	2600      	moveq	r6, #0
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4c9a:	4423      	add	r3, r4
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4c9c:	f106 020b 	add.w	r2, r6, #11
    4ca0:	b2d2      	uxtb	r2, r2
    4ca2:	2102      	movs	r1, #2
    4ca4:	4628      	mov	r0, r5
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4ca6:	7a9f      	ldrb	r7, [r3, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4ca8:	f7ff fbb6 	bl	4418 <meta_evt>
	sep->num_reports = 1;
    4cac:	2301      	movs	r3, #1
    4cae:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    4cb0:	7a23      	ldrb	r3, [r4, #8]
    4cb2:	aa10      	add	r2, sp, #64	; 0x40
    4cb4:	f003 030f 	and.w	r3, r3, #15
    4cb8:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    4cba:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    4cbc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    4cc0:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    4cc2:	7a23      	ldrb	r3, [r4, #8]
    4cc4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4cc8:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    4cca:	2206      	movs	r2, #6
    4ccc:	f104 010a 	add.w	r1, r4, #10
    4cd0:	3003      	adds	r0, #3
    4cd2:	f7fb fc84 	bl	5de <memcpy>
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4cd6:	350a      	adds	r5, #10
	adv_info->length = data_len;
    4cd8:	f805 6c01 	strb.w	r6, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4cdc:	427f      	negs	r7, r7
    4cde:	b27f      	sxtb	r7, r7
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    4ce0:	4632      	mov	r2, r6
    4ce2:	f108 0108 	add.w	r1, r8, #8
    4ce6:	4628      	mov	r0, r5
    4ce8:	f7fb fc79 	bl	5de <memcpy>
	*prssi = rssi;
    4cec:	55af      	strb	r7, [r5, r6]
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    4cee:	b010      	add	sp, #64	; 0x40
    4cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    4cf4:	2201      	movs	r2, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    4cf6:	4621      	mov	r1, r4
    4cf8:	4640      	mov	r0, r8
    4cfa:	f7ff fc13 	bl	4524 <le_adv_ext_report.isra.38>
    4cfe:	e7f6      	b.n	4cee <hci_evt_encode+0xc2>
    4d00:	2204      	movs	r2, #4
    4d02:	e7f8      	b.n	4cf6 <hci_evt_encode+0xca>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4d04:	4b50      	ldr	r3, [pc, #320]	; (4e48 <hci_evt_encode+0x21c>)
    4d06:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d0a:	f100 060a 	add.w	r6, r0, #10
    4d0e:	f003 5100 	and.w	r1, r3, #536870912	; 0x20000000
    4d12:	2000      	movs	r0, #0
    4d14:	ea50 0301 	orrs.w	r3, r0, r1
    4d18:	d008      	beq.n	4d2c <hci_evt_encode+0x100>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    4d1a:	4b4c      	ldr	r3, [pc, #304]	; (4e4c <hci_evt_encode+0x220>)
    4d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d20:	2100      	movs	r1, #0
    4d22:	f402 2080 	and.w	r0, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4d26:	ea50 0301 	orrs.w	r3, r0, r1
    4d2a:	d123      	bne.n	4d74 <hci_evt_encode+0x148>
		addr.type = adv->tx_addr;
    4d2c:	7a23      	ldrb	r3, [r4, #8]
    4d2e:	ad10      	add	r5, sp, #64	; 0x40
    4d30:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    4d34:	2206      	movs	r2, #6
    4d36:	4631      	mov	r1, r6
    4d38:	f10d 001d 	add.w	r0, sp, #29
		addr.type = adv->tx_addr;
    4d3c:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    4d40:	f7fb fc4d 	bl	5de <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    4d44:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4d46:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4d48:	ae09      	add	r6, sp, #36	; 0x24
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4d4a:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4d4c:	4631      	mov	r1, r6
    4d4e:	4628      	mov	r0, r5
    4d50:	f7ff fbac 	bl	44ac <bt_addr_le_to_str.constprop.42>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4d54:	4264      	negs	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    4d56:	4b3e      	ldr	r3, [pc, #248]	; (4e50 <hci_evt_encode+0x224>)
    4d58:	9602      	str	r6, [sp, #8]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4d5a:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    4d5c:	2200      	movs	r2, #0
    4d5e:	e9cd 3200 	strd	r3, r2, [sp]
    4d62:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4d66:	4a3b      	ldr	r2, [pc, #236]	; (4e54 <hci_evt_encode+0x228>)
    4d68:	4b3b      	ldr	r3, [pc, #236]	; (4e58 <hci_evt_encode+0x22c>)
    4d6a:	493c      	ldr	r1, [pc, #240]	; (4e5c <hci_evt_encode+0x230>)
    4d6c:	483c      	ldr	r0, [pc, #240]	; (4e60 <hci_evt_encode+0x234>)
    4d6e:	f7fc fab1 	bl	12d4 <printk>
    4d72:	e7bc      	b.n	4cee <hci_evt_encode+0xc2>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    4d74:	2208      	movs	r2, #8
    4d76:	2113      	movs	r1, #19
    4d78:	4628      	mov	r0, r5
    4d7a:	f7ff fb4d 	bl	4418 <meta_evt>
	sep->handle = 0;
    4d7e:	2300      	movs	r3, #0
    4d80:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    4d82:	7a23      	ldrb	r3, [r4, #8]
    4d84:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4d88:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    4d8a:	2206      	movs	r2, #6
    4d8c:	4631      	mov	r1, r6
    4d8e:	3002      	adds	r0, #2
    4d90:	f7fb fc25 	bl	5de <memcpy>
    4d94:	e7ab      	b.n	4cee <hci_evt_encode+0xc2>
		LL_ASSERT(0);
    4d96:	4b2e      	ldr	r3, [pc, #184]	; (4e50 <hci_evt_encode+0x224>)
    4d98:	e9cd 3300 	strd	r3, r3, [sp]
    4d9c:	4b31      	ldr	r3, [pc, #196]	; (4e64 <hci_evt_encode+0x238>)
		LL_ASSERT(0);
    4d9e:	4a32      	ldr	r2, [pc, #200]	; (4e68 <hci_evt_encode+0x23c>)
    4da0:	492e      	ldr	r1, [pc, #184]	; (4e5c <hci_evt_encode+0x230>)
    4da2:	4832      	ldr	r0, [pc, #200]	; (4e6c <hci_evt_encode+0x240>)
    4da4:	f7fc fa96 	bl	12d4 <printk>
    4da8:	4040      	eors	r0, r0
    4daa:	f380 8811 	msr	BASEPRI, r0
    4dae:	f04f 0004 	mov.w	r0, #4
    4db2:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    4db4:	7ac1      	ldrb	r1, [r0, #11]
    4db6:	88c6      	ldrh	r6, [r0, #6]
    4db8:	2909      	cmp	r1, #9
    4dba:	d00b      	beq.n	4dd4 <hci_evt_encode+0x1a8>
    4dbc:	290c      	cmp	r1, #12
    4dbe:	d010      	beq.n	4de2 <hci_evt_encode+0x1b6>
    4dc0:	2907      	cmp	r1, #7
    4dc2:	d139      	bne.n	4e38 <hci_evt_encode+0x20c>
    4dc4:	7b02      	ldrb	r2, [r0, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    4dc6:	2a0e      	cmp	r2, #14
    4dc8:	d12b      	bne.n	4e22 <hci_evt_encode+0x1f6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4dca:	462b      	mov	r3, r5
    4dcc:	4632      	mov	r2, r6
    4dce:	2100      	movs	r1, #0
    4dd0:	201a      	movs	r0, #26
    4dd2:	e003      	b.n	4ddc <hci_evt_encode+0x1b0>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    4dd4:	462b      	mov	r3, r5
    4dd6:	4632      	mov	r2, r6
    4dd8:	4641      	mov	r1, r8
    4dda:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    4ddc:	f7ff fb32 	bl	4444 <le_remote_feat_complete>
    4de0:	e785      	b.n	4cee <hci_evt_encode+0xc2>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    4de2:	4b19      	ldr	r3, [pc, #100]	; (4e48 <hci_evt_encode+0x21c>)
    4de4:	e9d3 2300 	ldrd	r2, r3, [r3]
    4de8:	f04f 0800 	mov.w	r8, #0
    4dec:	f402 6700 	and.w	r7, r2, #2048	; 0x800
    4df0:	ea57 0308 	orrs.w	r3, r7, r8
    4df4:	f43f af7b 	beq.w	4cee <hci_evt_encode+0xc2>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    4df8:	2208      	movs	r2, #8
    4dfa:	4628      	mov	r0, r5
    4dfc:	f7ff fadf 	bl	43be <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    4e00:	2108      	movs	r1, #8
    4e02:	1868      	adds	r0, r5, r1
    4e04:	f005 fea4 	bl	ab50 <net_buf_simple_add>
	ep->status = 0x00;
    4e08:	2300      	movs	r3, #0
    4e0a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    4e0c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    4e10:	7b23      	ldrb	r3, [r4, #12]
    4e12:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    4e14:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    4e18:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    4e1a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    4e1e:	80c3      	strh	r3, [r0, #6]
    4e20:	e765      	b.n	4cee <hci_evt_encode+0xc2>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    4e22:	4b0b      	ldr	r3, [pc, #44]	; (4e50 <hci_evt_encode+0x224>)
    4e24:	9300      	str	r3, [sp, #0]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    4e26:	e9cd 2301 	strd	r2, r3, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    4e2a:	490c      	ldr	r1, [pc, #48]	; (4e5c <hci_evt_encode+0x230>)
    4e2c:	4b10      	ldr	r3, [pc, #64]	; (4e70 <hci_evt_encode+0x244>)
    4e2e:	4a09      	ldr	r2, [pc, #36]	; (4e54 <hci_evt_encode+0x228>)
    4e30:	4810      	ldr	r0, [pc, #64]	; (4e74 <hci_evt_encode+0x248>)
    4e32:	f7fc fa4f 	bl	12d4 <printk>
    4e36:	e75a      	b.n	4cee <hci_evt_encode+0xc2>
		LL_ASSERT(0);
    4e38:	4b05      	ldr	r3, [pc, #20]	; (4e50 <hci_evt_encode+0x224>)
    4e3a:	e9cd 3300 	strd	r3, r3, [sp]
    4e3e:	4b0e      	ldr	r3, [pc, #56]	; (4e78 <hci_evt_encode+0x24c>)
    4e40:	e7ad      	b.n	4d9e <hci_evt_encode+0x172>
    4e42:	bf00      	nop
    4e44:	ff030100 	.word	0xff030100
    4e48:	200037b0 	.word	0x200037b0
    4e4c:	200037b8 	.word	0x200037b8
    4e50:	0000bda7 	.word	0x0000bda7
    4e54:	0000c68c 	.word	0x0000c68c
    4e58:	0000cd9a 	.word	0x0000cd9a
    4e5c:	0000c693 	.word	0x0000c693
    4e60:	0000ce5a 	.word	0x0000ce5a
    4e64:	0000cdaf 	.word	0x0000cdaf
    4e68:	0000c71e 	.word	0x0000c71e
    4e6c:	0000c669 	.word	0x0000c669
    4e70:	0000cdbe 	.word	0x0000cdbe
    4e74:	0000ce8d 	.word	0x0000ce8d
    4e78:	0000cdcd 	.word	0x0000cdcd

00004e7c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4e7c:	7903      	ldrb	r3, [r0, #4]
    4e7e:	2b01      	cmp	r3, #1
    4e80:	d00f      	beq.n	4ea2 <hci_get_class+0x26>
    4e82:	2b0a      	cmp	r3, #10
    4e84:	d815      	bhi.n	4eb2 <hci_get_class+0x36>
    4e86:	2001      	movs	r0, #1
    4e88:	fa00 f303 	lsl.w	r3, r0, r3
    4e8c:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    4e90:	d112      	bne.n	4eb8 <hci_get_class+0x3c>
    4e92:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    4e96:	d110      	bne.n	4eba <hci_get_class+0x3e>
    4e98:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    4e9c:	f343 1080 	sbfx	r0, r3, #6, #1
    4ea0:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    4ea2:	7a03      	ldrb	r3, [r0, #8]
    4ea4:	f003 0303 	and.w	r3, r3, #3
    4ea8:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    4eaa:	bf0c      	ite	eq
    4eac:	2002      	moveq	r0, #2
    4eae:	2003      	movne	r0, #3
    4eb0:	4770      	bx	lr
			return -1;
    4eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4eb6:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    4eb8:	2002      	movs	r0, #2
	}
}
    4eba:	4770      	bx	lr

00004ebc <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    4ebc:	4b06      	ldr	r3, [pc, #24]	; (4ed8 <hci_init+0x1c>)
    4ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ec2:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4ec6:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    4eca:	4b04      	ldr	r3, [pc, #16]	; (4edc <hci_init+0x20>)
    4ecc:	201f      	movs	r0, #31
    4ece:	2100      	movs	r1, #0
    4ed0:	e9c3 0100 	strd	r0, r1, [r3]
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    4ed4:	4770      	bx	lr
    4ed6:	bf00      	nop
    4ed8:	200037b0 	.word	0x200037b0
    4edc:	200037b8 	.word	0x200037b8

00004ee0 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    4ee0:	bf20      	wfe
	__SEV();
    4ee2:	bf40      	sev
	__WFE();
    4ee4:	bf20      	wfe
}
    4ee6:	4770      	bx	lr

00004ee8 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    4ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    4eea:	4b0d      	ldr	r3, [pc, #52]	; (4f20 <pdu_len_cmp+0x38>)
{
    4eec:	b089      	sub	sp, #36	; 0x24
    4eee:	4605      	mov	r5, r0
    4ef0:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    4ef2:	aa01      	add	r2, sp, #4
    4ef4:	f103 0718 	add.w	r7, r3, #24
    4ef8:	6818      	ldr	r0, [r3, #0]
    4efa:	6859      	ldr	r1, [r3, #4]
    4efc:	4614      	mov	r4, r2
    4efe:	c403      	stmia	r4!, {r0, r1}
    4f00:	3308      	adds	r3, #8
    4f02:	42bb      	cmp	r3, r7
    4f04:	4622      	mov	r2, r4
    4f06:	d1f7      	bne.n	4ef8 <pdu_len_cmp+0x10>
    4f08:	881b      	ldrh	r3, [r3, #0]
    4f0a:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    4f0c:	ab08      	add	r3, sp, #32
    4f0e:	441d      	add	r5, r3
    4f10:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    4f14:	1b83      	subs	r3, r0, r6
    4f16:	4258      	negs	r0, r3
    4f18:	4158      	adcs	r0, r3
    4f1a:	b009      	add	sp, #36	; 0x24
    4f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f1e:	bf00      	nop
    4f20:	0000bd53 	.word	0x0000bd53

00004f24 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    4f24:	6008      	str	r0, [r1, #0]
}
    4f26:	4770      	bx	lr

00004f28 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4f28:	b918      	cbnz	r0, 4f32 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    4f2a:	680b      	ldr	r3, [r1, #0]
    4f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4f30:	600b      	str	r3, [r1, #0]
	}
}
    4f32:	4770      	bx	lr

00004f34 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4f34:	b918      	cbnz	r0, 4f3e <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    4f36:	680b      	ldr	r3, [r1, #0]
    4f38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    4f3c:	600b      	str	r3, [r1, #0]
	}
}
    4f3e:	4770      	bx	lr

00004f40 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    4f40:	b570      	push	{r4, r5, r6, lr}
    4f42:	1d03      	adds	r3, r0, #4
    4f44:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    4f46:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    4f48:	429d      	cmp	r5, r3
    4f4a:	d101      	bne.n	4f50 <chan_sel_remap+0x10>
    4f4c:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    4f4e:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    4f50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    4f54:	2200      	movs	r2, #0
    4f56:	18a0      	adds	r0, r4, r2
    4f58:	2a08      	cmp	r2, #8
    4f5a:	b2c0      	uxtb	r0, r0
    4f5c:	d101      	bne.n	4f62 <chan_sel_remap+0x22>
    4f5e:	4604      	mov	r4, r0
    4f60:	e7f2      	b.n	4f48 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    4f62:	f016 0f01 	tst.w	r6, #1
    4f66:	d003      	beq.n	4f70 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    4f68:	2900      	cmp	r1, #0
    4f6a:	d0f0      	beq.n	4f4e <chan_sel_remap+0xe>
				chan_index--;
    4f6c:	3901      	subs	r1, #1
    4f6e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    4f70:	0876      	lsrs	r6, r6, #1
    4f72:	3201      	adds	r2, #1
    4f74:	e7ef      	b.n	4f56 <chan_sel_remap+0x16>
	...

00004f78 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    4f78:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    4f7a:	4a0c      	ldr	r2, [pc, #48]	; (4fac <packet_rx_reserve_get+0x34>)
    4f7c:	f892 313a 	ldrb.w	r3, [r2, #314]	; 0x13a
	    _radio.packet_rx_last) {
    4f80:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
	if (_radio.packet_rx_acquire >=
    4f84:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    4f86:	bf38      	it	cc
    4f88:	f892 4138 	ldrbcc.w	r4, [r2, #312]	; 0x138
			_radio.packet_rx_last);
    4f8c:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
			_radio.packet_rx_last +
    4f90:	bf38      	it	cc
    4f92:	191b      	addcc	r3, r3, r4
    4f94:	1a5b      	subs	r3, r3, r1
    4f96:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    4f98:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    4f9a:	bf9b      	ittet	ls
    4f9c:	f892 1139 	ldrbls.w	r1, [r2, #313]	; 0x139
    4fa0:	f8d2 3134 	ldrls.w	r3, [r2, #308]	; 0x134
		return 0;
    4fa4:	2000      	movhi	r0, #0
	return _radio.packet_rx[_radio.packet_rx_last];
    4fa6:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
}
    4faa:	bd10      	pop	{r4, pc}
    4fac:	20000930 	.word	0x20000930

00004fb0 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    4fb0:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    4fb2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    4fb6:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    4fba:	4299      	cmp	r1, r3
    4fbc:	d128      	bne.n	5010 <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    4fbe:	f990 301d 	ldrsb.w	r3, [r0, #29]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	db26      	blt.n	5014 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    4fc6:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4fc8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    4fca:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    4fce:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4fd0:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4fd4:	4354      	muls	r4, r2
					      conn->supervision_reload *
    4fd6:	227d      	movs	r2, #125	; 0x7d
    4fd8:	4362      	muls	r2, r4
					      125 / 1000;
    4fda:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    4fde:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4fe2:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4fe6:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    4fea:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4fec:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    4ff0:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    4ff2:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    4ff4:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    4ff8:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    4ffa:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    4ffe:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    5000:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_type = LLCP_CONN_UPD;
    5004:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e
		conn->llcp_ack--;
    5008:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d

		return 0;
    500c:	4618      	mov	r0, r3
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
}
    500e:	bd30      	pop	{r4, r5, pc}
		return 1;
    5010:	2001      	movs	r0, #1
    5012:	e7fc      	b.n	500e <conn_update_req+0x5e>
	return 2;
    5014:	2002      	movs	r0, #2
    5016:	e7fa      	b.n	500e <conn_update_req+0x5e>

00005018 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    5018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    501c:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    501e:	4294      	cmp	r4, r2
{
    5020:	4681      	mov	r9, r0
    5022:	460f      	mov	r7, r1
    5024:	4690      	mov	r8, r2
	if (_first == last) {
    5026:	d03d      	beq.n	50a4 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    5028:	4e1f      	ldr	r6, [pc, #124]	; (50a8 <tx_cmplt_get+0x90>)
    502a:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
    502e:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    5032:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    5034:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    5036:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    503a:	f506 7aae 	add.w	sl, r6, #348	; 0x15c
		if (*handle != _radio.pkt_release[_first].handle) {
    503e:	b222      	sxth	r2, r4
    5040:	f8d6 0168 	ldr.w	r0, [r6, #360]	; 0x168
    5044:	f8b9 c000 	ldrh.w	ip, [r9]
    5048:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    504c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    5050:	4594      	cmp	ip, r2
    5052:	d120      	bne.n	5096 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    5054:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    5056:	2801      	cmp	r0, #1
    5058:	f020 0303 	bic.w	r3, r0, #3
    505c:	d90a      	bls.n	5074 <tx_cmplt_get+0x5c>
    505e:	b1f3      	cbz	r3, 509e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    5060:	1d02      	adds	r2, r0, #4
    5062:	d01c      	beq.n	509e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    5064:	7942      	ldrb	r2, [r0, #5]
    5066:	b1d2      	cbz	r2, 509e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    5068:	7902      	ldrb	r2, [r0, #4]
    506a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    506e:	3a01      	subs	r2, #1
    5070:	2a01      	cmp	r2, #1
    5072:	d814      	bhi.n	509e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    5074:	2201      	movs	r2, #1
			cmplt++;
    5076:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    5078:	604a      	str	r2, [r1, #4]
			cmplt++;
    507a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    507c:	b113      	cbz	r3, 5084 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    507e:	4651      	mov	r1, sl
    5080:	f7fe f899 	bl	31b6 <mem_release>
		}

		_first = _first + 1;
    5084:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    5086:	f896 216c 	ldrb.w	r2, [r6, #364]	; 0x16c
		_first = _first + 1;
    508a:	b2e4      	uxtb	r4, r4
			_first = 0;
    508c:	42a2      	cmp	r2, r4
    508e:	bf08      	it	eq
    5090:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    5092:	4544      	cmp	r4, r8
    5094:	d1d3      	bne.n	503e <tx_cmplt_get+0x26>

	*first = _first;
    5096:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    5098:	4628      	mov	r0, r5
    509a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    509e:	f8c1 b004 	str.w	fp, [r1, #4]
    50a2:	e7eb      	b.n	507c <tx_cmplt_get+0x64>
		return 0;
    50a4:	2500      	movs	r5, #0
    50a6:	e7f7      	b.n	5098 <tx_cmplt_get+0x80>
    50a8:	20000930 	.word	0x20000930

000050ac <connection_get>:
{
    50ac:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    50ae:	4b09      	ldr	r3, [pc, #36]	; (50d4 <connection_get+0x28>)
    50b0:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
    50b4:	4282      	cmp	r2, r0
{
    50b6:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    50b8:	d90a      	bls.n	50d0 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    50ba:	4602      	mov	r2, r0
    50bc:	f44f 7182 	mov.w	r1, #260	; 0x104
    50c0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    50c4:	f7fe f88c 	bl	31e0 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    50c8:	b110      	cbz	r0, 50d0 <connection_get+0x24>
    50ca:	8c03      	ldrh	r3, [r0, #32]
    50cc:	42a3      	cmp	r3, r4
    50ce:	d000      	beq.n	50d2 <connection_get+0x26>
	return 0;
    50d0:	2000      	movs	r0, #0
}
    50d2:	bd10      	pop	{r4, pc}
    50d4:	20000930 	.word	0x20000930

000050d8 <role_disable>:
{
    50d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50dc:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    50de:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    50e0:	2805      	cmp	r0, #5
{
    50e2:	4605      	mov	r5, r0
    50e4:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    50e6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    50e8:	d00c      	beq.n	5104 <role_disable+0x2c>
    50ea:	2806      	cmp	r0, #6
    50ec:	d03f      	beq.n	516e <role_disable+0x96>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    50ee:	d942      	bls.n	5176 <role_disable+0x9e>
			conn_handle = ticker_id_primary -
    50f0:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    50f2:	b280      	uxth	r0, r0
    50f4:	f7ff ffda 	bl	50ac <connection_get>
			if (!conn) {
    50f8:	2800      	cmp	r0, #0
    50fa:	f000 8120 	beq.w	533e <role_disable+0x266>
			ticks_active_to_start =
    50fe:	e9d0 6800 	ldrd	r6, r8, [r0]
		break;
    5102:	e00e      	b.n	5122 <role_disable+0x4a>
		ticks_xtal_to_start =
    5104:	4b8f      	ldr	r3, [pc, #572]	; (5344 <role_disable+0x26c>)
		ticks_active_to_start =
    5106:	e9d3 6806 	ldrd	r6, r8, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    510a:	ab02      	add	r3, sp, #8
    510c:	9300      	str	r3, [sp, #0]
    510e:	460a      	mov	r2, r1
    5110:	4b8d      	ldr	r3, [pc, #564]	; (5348 <role_disable+0x270>)
    5112:	2103      	movs	r1, #3
    5114:	2000      	movs	r0, #0
    5116:	f7fe ff2f 	bl	3f78 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    511a:	2802      	cmp	r0, #2
    511c:	d011      	beq.n	5142 <role_disable+0x6a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    511e:	9b02      	ldr	r3, [sp, #8]
    5120:	b99b      	cbnz	r3, 514a <role_disable+0x72>
	LL_ASSERT(!_radio.ticker_id_stop);
    5122:	4c88      	ldr	r4, [pc, #544]	; (5344 <role_disable+0x26c>)
    5124:	7ca3      	ldrb	r3, [r4, #18]
    5126:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    512a:	2b00      	cmp	r3, #0
    512c:	d02b      	beq.n	5186 <role_disable+0xae>
    512e:	4b87      	ldr	r3, [pc, #540]	; (534c <role_disable+0x274>)
    5130:	4a87      	ldr	r2, [pc, #540]	; (5350 <role_disable+0x278>)
    5132:	4988      	ldr	r1, [pc, #544]	; (5354 <role_disable+0x27c>)
    5134:	4888      	ldr	r0, [pc, #544]	; (5358 <role_disable+0x280>)
    5136:	e9cd 3300 	strd	r3, r3, [sp]
    513a:	4b88      	ldr	r3, [pc, #544]	; (535c <role_disable+0x284>)
    513c:	e00f      	b.n	515e <role_disable+0x86>
				cpu_sleep();
    513e:	f7ff fecf 	bl	4ee0 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5142:	9b02      	ldr	r3, [sp, #8]
    5144:	2b02      	cmp	r3, #2
    5146:	d0fa      	beq.n	513e <role_disable+0x66>
    5148:	e7e9      	b.n	511e <role_disable+0x46>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    514a:	9b02      	ldr	r3, [sp, #8]
    514c:	2b01      	cmp	r3, #1
    514e:	d0e8      	beq.n	5122 <role_disable+0x4a>
    5150:	4b7e      	ldr	r3, [pc, #504]	; (534c <role_disable+0x274>)
    5152:	4a7f      	ldr	r2, [pc, #508]	; (5350 <role_disable+0x278>)
    5154:	497f      	ldr	r1, [pc, #508]	; (5354 <role_disable+0x27c>)
    5156:	4882      	ldr	r0, [pc, #520]	; (5360 <role_disable+0x288>)
    5158:	e9cd 3300 	strd	r3, r3, [sp]
    515c:	4b7f      	ldr	r3, [pc, #508]	; (535c <role_disable+0x284>)
			LL_ASSERT(0);
    515e:	f7fc f8b9 	bl	12d4 <printk>
    5162:	4040      	eors	r0, r0
    5164:	f380 8811 	msr	BASEPRI, r0
    5168:	f04f 0004 	mov.w	r0, #4
    516c:	df02      	svc	2
		ticks_xtal_to_start =
    516e:	4b75      	ldr	r3, [pc, #468]	; (5344 <role_disable+0x26c>)
		ticks_active_to_start =
    5170:	e9d3 6834 	ldrd	r6, r8, [r3, #208]	; 0xd0
		break;
    5174:	e7d5      	b.n	5122 <role_disable+0x4a>
			LL_ASSERT(0);
    5176:	4b75      	ldr	r3, [pc, #468]	; (534c <role_disable+0x274>)
    5178:	e9cd 3300 	strd	r3, r3, [sp]
    517c:	4b77      	ldr	r3, [pc, #476]	; (535c <role_disable+0x284>)
    517e:	4a74      	ldr	r2, [pc, #464]	; (5350 <role_disable+0x278>)
    5180:	4974      	ldr	r1, [pc, #464]	; (5354 <role_disable+0x27c>)
    5182:	4878      	ldr	r0, [pc, #480]	; (5364 <role_disable+0x28c>)
    5184:	e7eb      	b.n	515e <role_disable+0x86>
	ret_cb = TICKER_STATUS_BUSY;
    5186:	ab06      	add	r3, sp, #24
    5188:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    518a:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    518c:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5190:	2103      	movs	r1, #3
    5192:	9300      	str	r3, [sp, #0]
    5194:	462a      	mov	r2, r5
    5196:	4b6c      	ldr	r3, [pc, #432]	; (5348 <role_disable+0x270>)
    5198:	f7fe feee 	bl	3f78 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    519c:	2802      	cmp	r0, #2
    519e:	d025      	beq.n	51ec <role_disable+0x114>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    51a0:	9b02      	ldr	r3, [sp, #8]
    51a2:	2b00      	cmp	r3, #0
    51a4:	d169      	bne.n	527a <role_disable+0x1a2>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    51a6:	7c23      	ldrb	r3, [r4, #16]
    51a8:	42ab      	cmp	r3, r5
    51aa:	d002      	beq.n	51b2 <role_disable+0xda>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    51ac:	7c63      	ldrb	r3, [r4, #17]
    51ae:	42ab      	cmp	r3, r5
    51b0:	d15f      	bne.n	5272 <role_disable+0x19a>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    51b2:	ab06      	add	r3, sp, #24
    51b4:	2202      	movs	r2, #2
    51b6:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    51ba:	2200      	movs	r2, #0
    51bc:	9300      	str	r3, [sp, #0]
    51be:	2103      	movs	r1, #3
    51c0:	4b61      	ldr	r3, [pc, #388]	; (5348 <role_disable+0x270>)
    51c2:	4610      	mov	r0, r2
    51c4:	f7fe fed8 	bl	3f78 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    51c8:	2802      	cmp	r0, #2
    51ca:	d11d      	bne.n	5208 <role_disable+0x130>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    51cc:	2201      	movs	r2, #1
    51ce:	4611      	mov	r1, r2
    51d0:	2003      	movs	r0, #3
    51d2:	f7fe f865 	bl	32a0 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    51d6:	9b03      	ldr	r3, [sp, #12]
    51d8:	2b02      	cmp	r3, #2
    51da:	d115      	bne.n	5208 <role_disable+0x130>
    51dc:	4b5b      	ldr	r3, [pc, #364]	; (534c <role_disable+0x274>)
    51de:	4a5c      	ldr	r2, [pc, #368]	; (5350 <role_disable+0x278>)
    51e0:	495c      	ldr	r1, [pc, #368]	; (5354 <role_disable+0x27c>)
    51e2:	4861      	ldr	r0, [pc, #388]	; (5368 <role_disable+0x290>)
    51e4:	e9cd 3300 	strd	r3, r3, [sp]
    51e8:	4b60      	ldr	r3, [pc, #384]	; (536c <role_disable+0x294>)
    51ea:	e7b8      	b.n	515e <role_disable+0x86>
		if (_radio.ticker_id_event == ticker_id_primary) {
    51ec:	7c63      	ldrb	r3, [r4, #17]
    51ee:	42ab      	cmp	r3, r5
    51f0:	d104      	bne.n	51fc <role_disable+0x124>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    51f2:	2201      	movs	r2, #1
    51f4:	4611      	mov	r1, r2
    51f6:	2003      	movs	r0, #3
    51f8:	f7fe f852 	bl	32a0 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    51fc:	9b02      	ldr	r3, [sp, #8]
    51fe:	2b02      	cmp	r3, #2
    5200:	d1ce      	bne.n	51a0 <role_disable+0xc8>
			cpu_sleep();
    5202:	f7ff fe6d 	bl	4ee0 <cpu_sleep>
    5206:	e7f9      	b.n	51fc <role_disable+0x124>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    5208:	9803      	ldr	r0, [sp, #12]
    520a:	2800      	cmp	r0, #0
    520c:	d150      	bne.n	52b0 <role_disable+0x1d8>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    520e:	2302      	movs	r3, #2
    5210:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    5212:	7c23      	ldrb	r3, [r4, #16]
    5214:	b93b      	cbnz	r3, 5226 <role_disable+0x14e>
    5216:	4b4d      	ldr	r3, [pc, #308]	; (534c <role_disable+0x274>)
    5218:	4a4d      	ldr	r2, [pc, #308]	; (5350 <role_disable+0x278>)
    521a:	494e      	ldr	r1, [pc, #312]	; (5354 <role_disable+0x27c>)
    521c:	4854      	ldr	r0, [pc, #336]	; (5370 <role_disable+0x298>)
    521e:	e9cd 3300 	strd	r3, r3, [sp]
    5222:	4b52      	ldr	r3, [pc, #328]	; (536c <role_disable+0x294>)
    5224:	e79b      	b.n	515e <role_disable+0x86>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5226:	ab04      	add	r3, sp, #16
    5228:	9300      	str	r3, [sp, #0]
    522a:	2201      	movs	r2, #1
    522c:	4b46      	ldr	r3, [pc, #280]	; (5348 <role_disable+0x270>)
		_radio.ticker_id_prepare = 0;
    522e:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5230:	2103      	movs	r1, #3
    5232:	f7fe fea1 	bl	3f78 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5236:	2802      	cmp	r0, #2
    5238:	d10f      	bne.n	525a <role_disable+0x182>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    523a:	2201      	movs	r2, #1
    523c:	4611      	mov	r1, r2
    523e:	2003      	movs	r0, #3
    5240:	f7fe f82e 	bl	32a0 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    5244:	9b04      	ldr	r3, [sp, #16]
    5246:	2b02      	cmp	r3, #2
    5248:	d107      	bne.n	525a <role_disable+0x182>
    524a:	4b40      	ldr	r3, [pc, #256]	; (534c <role_disable+0x274>)
    524c:	4a40      	ldr	r2, [pc, #256]	; (5350 <role_disable+0x278>)
    524e:	4941      	ldr	r1, [pc, #260]	; (5354 <role_disable+0x27c>)
    5250:	4848      	ldr	r0, [pc, #288]	; (5374 <role_disable+0x29c>)
    5252:	e9cd 3300 	strd	r3, r3, [sp]
    5256:	4b45      	ldr	r3, [pc, #276]	; (536c <role_disable+0x294>)
    5258:	e781      	b.n	515e <role_disable+0x86>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    525a:	9a04      	ldr	r2, [sp, #16]
    525c:	b99a      	cbnz	r2, 5286 <role_disable+0x1ae>
			ticks_xtal_to_start &= ~XON_BITMASK;
    525e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    5262:	45b0      	cmp	r8, r6
    5264:	d922      	bls.n	52ac <role_disable+0x1d4>
				ret = mayfly_enqueue(
    5266:	4b44      	ldr	r3, [pc, #272]	; (5378 <role_disable+0x2a0>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5268:	4611      	mov	r1, r2
    526a:	2003      	movs	r0, #3
    526c:	f7fe f840 	bl	32f0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5270:	b9a0      	cbnz	r0, 529c <role_disable+0x1c4>
	if (!_radio.ticker_id_stop) {
    5272:	7ca3      	ldrb	r3, [r4, #18]
    5274:	b90b      	cbnz	r3, 527a <role_disable+0x1a2>
		ret_cb = TICKER_STATUS_FAILURE;
    5276:	2301      	movs	r3, #1
    5278:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    527a:	2300      	movs	r3, #0
    527c:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    527e:	9802      	ldr	r0, [sp, #8]
}
    5280:	b006      	add	sp, #24
    5282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    5286:	9b04      	ldr	r3, [sp, #16]
    5288:	2b01      	cmp	r3, #1
    528a:	d153      	bne.n	5334 <role_disable+0x25c>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    528c:	2200      	movs	r2, #0
    528e:	4611      	mov	r1, r2
    5290:	4b39      	ldr	r3, [pc, #228]	; (5378 <role_disable+0x2a0>)
    5292:	2003      	movs	r0, #3
    5294:	f7fe f82c 	bl	32f0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5298:	4602      	mov	r2, r0
    529a:	b138      	cbz	r0, 52ac <role_disable+0x1d4>
			LL_ASSERT(!ret);
    529c:	4b2b      	ldr	r3, [pc, #172]	; (534c <role_disable+0x274>)
    529e:	4a2c      	ldr	r2, [pc, #176]	; (5350 <role_disable+0x278>)
    52a0:	492c      	ldr	r1, [pc, #176]	; (5354 <role_disable+0x27c>)
    52a2:	4836      	ldr	r0, [pc, #216]	; (537c <role_disable+0x2a4>)
    52a4:	e9cd 3300 	strd	r3, r3, [sp]
    52a8:	4b30      	ldr	r3, [pc, #192]	; (536c <role_disable+0x294>)
    52aa:	e758      	b.n	515e <role_disable+0x86>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    52ac:	4b34      	ldr	r3, [pc, #208]	; (5380 <role_disable+0x2a8>)
    52ae:	e7db      	b.n	5268 <role_disable+0x190>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    52b0:	9d03      	ldr	r5, [sp, #12]
    52b2:	2d01      	cmp	r5, #1
    52b4:	d13e      	bne.n	5334 <role_disable+0x25c>
		if (ticker_id_stop != TICKER_NULL) {
    52b6:	2fff      	cmp	r7, #255	; 0xff
    52b8:	d029      	beq.n	530e <role_disable+0x236>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    52ba:	ab06      	add	r3, sp, #24
    52bc:	2202      	movs	r2, #2
    52be:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    52c2:	2103      	movs	r1, #3
    52c4:	9300      	str	r3, [sp, #0]
    52c6:	463a      	mov	r2, r7
    52c8:	4b1f      	ldr	r3, [pc, #124]	; (5348 <role_disable+0x270>)
    52ca:	2000      	movs	r0, #0
    52cc:	f7fe fe54 	bl	3f78 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    52d0:	2802      	cmp	r0, #2
    52d2:	d10f      	bne.n	52f4 <role_disable+0x21c>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    52d4:	462a      	mov	r2, r5
    52d6:	4629      	mov	r1, r5
    52d8:	2003      	movs	r0, #3
    52da:	f7fd ffe1 	bl	32a0 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    52de:	9b05      	ldr	r3, [sp, #20]
    52e0:	2b02      	cmp	r3, #2
    52e2:	d107      	bne.n	52f4 <role_disable+0x21c>
    52e4:	4b19      	ldr	r3, [pc, #100]	; (534c <role_disable+0x274>)
    52e6:	4a1a      	ldr	r2, [pc, #104]	; (5350 <role_disable+0x278>)
    52e8:	491a      	ldr	r1, [pc, #104]	; (5354 <role_disable+0x27c>)
    52ea:	4826      	ldr	r0, [pc, #152]	; (5384 <role_disable+0x2ac>)
    52ec:	e9cd 3300 	strd	r3, r3, [sp]
    52f0:	4b1e      	ldr	r3, [pc, #120]	; (536c <role_disable+0x294>)
    52f2:	e734      	b.n	515e <role_disable+0x86>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    52f4:	9b05      	ldr	r3, [sp, #20]
    52f6:	b153      	cbz	r3, 530e <role_disable+0x236>
    52f8:	9b05      	ldr	r3, [sp, #20]
    52fa:	2b01      	cmp	r3, #1
    52fc:	d007      	beq.n	530e <role_disable+0x236>
    52fe:	4b13      	ldr	r3, [pc, #76]	; (534c <role_disable+0x274>)
    5300:	4a13      	ldr	r2, [pc, #76]	; (5350 <role_disable+0x278>)
    5302:	4914      	ldr	r1, [pc, #80]	; (5354 <role_disable+0x27c>)
    5304:	4820      	ldr	r0, [pc, #128]	; (5388 <role_disable+0x2b0>)
    5306:	e9cd 3300 	strd	r3, r3, [sp]
    530a:	4b18      	ldr	r3, [pc, #96]	; (536c <role_disable+0x294>)
    530c:	e727      	b.n	515e <role_disable+0x86>
		if (_radio.role != ROLE_NONE) {
    530e:	7ce3      	ldrb	r3, [r4, #19]
    5310:	2b00      	cmp	r3, #0
    5312:	d0ae      	beq.n	5272 <role_disable+0x19a>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5314:	4b1d      	ldr	r3, [pc, #116]	; (538c <role_disable+0x2b4>)
    5316:	2204      	movs	r2, #4
    5318:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    531a:	2200      	movs	r2, #0
    531c:	4611      	mov	r1, r2
    531e:	2003      	movs	r0, #3
    5320:	f7fd ffe6 	bl	32f0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5324:	2800      	cmp	r0, #0
    5326:	d1b9      	bne.n	529c <role_disable+0x1c4>
			while (_radio.role != ROLE_NONE) {
    5328:	7ce3      	ldrb	r3, [r4, #19]
    532a:	2b00      	cmp	r3, #0
    532c:	d0a1      	beq.n	5272 <role_disable+0x19a>
				cpu_sleep();
    532e:	f7ff fdd7 	bl	4ee0 <cpu_sleep>
    5332:	e7f9      	b.n	5328 <role_disable+0x250>
		LL_ASSERT(0);
    5334:	4b05      	ldr	r3, [pc, #20]	; (534c <role_disable+0x274>)
    5336:	e9cd 3300 	strd	r3, r3, [sp]
    533a:	4b0c      	ldr	r3, [pc, #48]	; (536c <role_disable+0x294>)
    533c:	e71f      	b.n	517e <role_disable+0xa6>
				return 1;
    533e:	2001      	movs	r0, #1
    5340:	e79e      	b.n	5280 <role_disable+0x1a8>
    5342:	bf00      	nop
    5344:	20000930 	.word	0x20000930
    5348:	00004f25 	.word	0x00004f25
    534c:	0000bda7 	.word	0x0000bda7
    5350:	0000c71e 	.word	0x0000c71e
    5354:	0000c693 	.word	0x0000c693
    5358:	0000d9f3 	.word	0x0000d9f3
    535c:	0000d2ea 	.word	0x0000d2ea
    5360:	0000d9b3 	.word	0x0000d9b3
    5364:	0000c669 	.word	0x0000c669
    5368:	0000da2b 	.word	0x0000da2b
    536c:	0000d2d6 	.word	0x0000d2d6
    5370:	0000da5c 	.word	0x0000da5c
    5374:	0000da96 	.word	0x0000da96
    5378:	20003800 	.word	0x20003800
    537c:	0000dac6 	.word	0x0000dac6
    5380:	200038a0 	.word	0x200038a0
    5384:	0000daec 	.word	0x0000daec
    5388:	0000db1e 	.word	0x0000db1e
    538c:	20003830 	.word	0x20003830

00005390 <mayfly_xtal_retain>:
{
    5390:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5392:	4b17      	ldr	r3, [pc, #92]	; (53f0 <mayfly_xtal_retain+0x60>)
    5394:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    5396:	b1f9      	cbz	r1, 53d8 <mayfly_xtal_retain+0x48>
		if (!s_xtal_retained) {
    5398:	bb42      	cbnz	r2, 53ec <mayfly_xtal_retain+0x5c>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    539a:	2801      	cmp	r0, #1
    539c:	d00e      	beq.n	53bc <mayfly_xtal_retain+0x2c>
    539e:	4b15      	ldr	r3, [pc, #84]	; (53f4 <mayfly_xtal_retain+0x64>)
    53a0:	4a15      	ldr	r2, [pc, #84]	; (53f8 <mayfly_xtal_retain+0x68>)
    53a2:	4916      	ldr	r1, [pc, #88]	; (53fc <mayfly_xtal_retain+0x6c>)
    53a4:	4816      	ldr	r0, [pc, #88]	; (5400 <mayfly_xtal_retain+0x70>)
    53a6:	e9cd 3300 	strd	r3, r3, [sp]
    53aa:	4b16      	ldr	r3, [pc, #88]	; (5404 <mayfly_xtal_retain+0x74>)
			LL_ASSERT(!retval);
    53ac:	f7fb ff92 	bl	12d4 <printk>
    53b0:	4040      	eors	r0, r0
    53b2:	f380 8811 	msr	BASEPRI, r0
    53b6:	f04f 0004 	mov.w	r0, #4
    53ba:	df02      	svc	2
			s_xtal_retained = 1;
    53bc:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    53be:	4b12      	ldr	r3, [pc, #72]	; (5408 <mayfly_xtal_retain+0x78>)
    53c0:	4611      	mov	r1, r2
    53c2:	f7fd ff95 	bl	32f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
    53c6:	b188      	cbz	r0, 53ec <mayfly_xtal_retain+0x5c>
    53c8:	4b0a      	ldr	r3, [pc, #40]	; (53f4 <mayfly_xtal_retain+0x64>)
    53ca:	4a0b      	ldr	r2, [pc, #44]	; (53f8 <mayfly_xtal_retain+0x68>)
    53cc:	490b      	ldr	r1, [pc, #44]	; (53fc <mayfly_xtal_retain+0x6c>)
    53ce:	480f      	ldr	r0, [pc, #60]	; (540c <mayfly_xtal_retain+0x7c>)
    53d0:	e9cd 3300 	strd	r3, r3, [sp]
    53d4:	4b0b      	ldr	r3, [pc, #44]	; (5404 <mayfly_xtal_retain+0x74>)
    53d6:	e7e9      	b.n	53ac <mayfly_xtal_retain+0x1c>
		if (s_xtal_retained) {
    53d8:	b142      	cbz	r2, 53ec <mayfly_xtal_retain+0x5c>
			s_xtal_retained = 0;
    53da:	7019      	strb	r1, [r3, #0]
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    53dc:	4b0c      	ldr	r3, [pc, #48]	; (5410 <mayfly_xtal_retain+0x80>)
    53de:	f1a3 0210 	sub.w	r2, r3, #16
			retval = mayfly_enqueue(caller_id,
    53e2:	2801      	cmp	r0, #1
    53e4:	bf18      	it	ne
    53e6:	4613      	movne	r3, r2
    53e8:	460a      	mov	r2, r1
    53ea:	e7ea      	b.n	53c2 <mayfly_xtal_retain+0x32>
}
    53ec:	b003      	add	sp, #12
    53ee:	bd30      	pop	{r4, r5, pc}
    53f0:	20000b38 	.word	0x20000b38
    53f4:	0000bda7 	.word	0x0000bda7
    53f8:	0000c71e 	.word	0x0000c71e
    53fc:	0000c693 	.word	0x0000c693
    5400:	0000d80d 	.word	0x0000d80d
    5404:	0000d0d6 	.word	0x0000d0d6
    5408:	20003860 	.word	0x20003860
    540c:	0000d83d 	.word	0x0000d83d
    5410:	20003880 	.word	0x20003880
    5414:	00000000 	.word	0x00000000

00005418 <sched_after_mstr_free_slot_get>:
{
    5418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    541c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    541e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    5420:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    5422:	f8df 9138 	ldr.w	r9, [pc, #312]	; 555c <sched_after_mstr_free_slot_get+0x144>
	ticker_id = ticker_id_prev = 0xff;
    5426:	f88d 501f 	strb.w	r5, [sp, #31]
{
    542a:	4680      	mov	r8, r0
    542c:	4693      	mov	fp, r2
    542e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    5430:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5434:	601c      	str	r4, [r3, #0]
    5436:	9408      	str	r4, [sp, #32]
    5438:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    543a:	2302      	movs	r3, #2
    543c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    543e:	ab09      	add	r3, sp, #36	; 0x24
    5440:	9302      	str	r3, [sp, #8]
    5442:	4b3f      	ldr	r3, [pc, #252]	; (5540 <sched_after_mstr_free_slot_get+0x128>)
    5444:	9301      	str	r3, [sp, #4]
    5446:	ab08      	add	r3, sp, #32
    5448:	9300      	str	r3, [sp, #0]
    544a:	f10d 021f 	add.w	r2, sp, #31
    544e:	465b      	mov	r3, fp
    5450:	4641      	mov	r1, r8
    5452:	2000      	movs	r0, #0
    5454:	f7fe fdca 	bl	3fec <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    5458:	2802      	cmp	r0, #2
    545a:	d014      	beq.n	5486 <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    545c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    545e:	b1b3      	cbz	r3, 548e <sched_after_mstr_free_slot_get+0x76>
    5460:	4b38      	ldr	r3, [pc, #224]	; (5544 <sched_after_mstr_free_slot_get+0x12c>)
    5462:	4a39      	ldr	r2, [pc, #228]	; (5548 <sched_after_mstr_free_slot_get+0x130>)
    5464:	4939      	ldr	r1, [pc, #228]	; (554c <sched_after_mstr_free_slot_get+0x134>)
    5466:	483a      	ldr	r0, [pc, #232]	; (5550 <sched_after_mstr_free_slot_get+0x138>)
    5468:	e9cd 3300 	strd	r3, r3, [sp]
    546c:	4b39      	ldr	r3, [pc, #228]	; (5554 <sched_after_mstr_free_slot_get+0x13c>)
    546e:	f7fb ff31 	bl	12d4 <printk>
    5472:	4040      	eors	r0, r0
    5474:	f380 8811 	msr	BASEPRI, r0
    5478:	f04f 0004 	mov.w	r0, #4
    547c:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    547e:	4641      	mov	r1, r8
    5480:	2000      	movs	r0, #0
    5482:	f7fe fe2b 	bl	40dc <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5486:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5488:	2b02      	cmp	r3, #2
    548a:	d0f8      	beq.n	547e <sched_after_mstr_free_slot_get+0x66>
    548c:	e7e6      	b.n	545c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    548e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5492:	2aff      	cmp	r2, #255	; 0xff
    5494:	d04d      	beq.n	5532 <sched_after_mstr_free_slot_get+0x11a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5496:	2a06      	cmp	r2, #6
    5498:	d9cf      	bls.n	543a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    549a:	f899 3110 	ldrb.w	r3, [r9, #272]	; 0x110
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    549e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    54a0:	429a      	cmp	r2, r3
    54a2:	daca      	bge.n	543a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    54a4:	3a07      	subs	r2, #7
    54a6:	b292      	uxth	r2, r2
    54a8:	f44f 7182 	mov.w	r1, #260	; 0x104
    54ac:	f8d9 0108 	ldr.w	r0, [r9, #264]	; 0x108
    54b0:	f7fd fe96 	bl	31e0 <mem_get>
		if (conn && !conn->role) {
    54b4:	2800      	cmp	r0, #0
    54b6:	d0c0      	beq.n	543a <sched_after_mstr_free_slot_get+0x22>
    54b8:	f990 301d 	ldrsb.w	r3, [r0, #29]
    54bc:	2b00      	cmp	r3, #0
    54be:	dbbc      	blt.n	543a <sched_after_mstr_free_slot_get+0x22>
    54c0:	e9d0 3c00 	ldrd	r3, ip, [r0]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    54c4:	2b00      	cmp	r3, #0
			u32_t ticks_to_expire_normal = ticks_to_expire;
    54c6:	9a08      	ldr	r2, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    54c8:	da12      	bge.n	54f0 <sched_after_mstr_free_slot_get+0xd8>
    54ca:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    54cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    54d0:	458c      	cmp	ip, r1
    54d2:	bf2c      	ite	cs
    54d4:	4462      	addcs	r2, ip
    54d6:	1852      	addcc	r2, r2, r1
				ticks_to_expire_normal -=
    54d8:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    54da:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    54dc:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    54de:	f101 0104 	add.w	r1, r1, #4
    54e2:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    54e4:	d108      	bne.n	54f8 <sched_after_mstr_free_slot_get+0xe0>
			ticker_id_prev = ticker_id;
    54e6:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    54ea:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    54ec:	4616      	mov	r6, r2
    54ee:	e7a4      	b.n	543a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    54f0:	4563      	cmp	r3, ip
    54f2:	bf38      	it	cc
    54f4:	4663      	movcc	r3, ip
    54f6:	e7f0      	b.n	54da <sched_after_mstr_free_slot_get+0xc2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    54f8:	4631      	mov	r1, r6
    54fa:	4610      	mov	r0, r2
    54fc:	9305      	str	r3, [sp, #20]
    54fe:	9204      	str	r2, [sp, #16]
    5500:	f7fe fe04 	bl	410c <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    5504:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    5508:	4288      	cmp	r0, r1
    550a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    550e:	d9ea      	bls.n	54e6 <sched_after_mstr_free_slot_get+0xce>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5510:	4811      	ldr	r0, [pc, #68]	; (5558 <sched_after_mstr_free_slot_get+0x140>)
    5512:	4434      	add	r4, r6
    5514:	fba4 0100 	umull	r0, r1, r4, r0
    5518:	2307      	movs	r3, #7
    551a:	fb03 1104 	mla	r1, r3, r4, r1
    551e:	a306      	add	r3, pc, #24	; (adr r3, 5538 <sched_after_mstr_free_slot_get+0x120>)
    5520:	e9d3 2300 	ldrd	r2, r3, [r3]
    5524:	f7fa fea0 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    5528:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    552a:	6038      	str	r0, [r7, #0]
}
    552c:	b00b      	add	sp, #44	; 0x2c
    552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    5532:	2dff      	cmp	r5, #255	; 0xff
    5534:	d1ec      	bne.n	5510 <sched_after_mstr_free_slot_get+0xf8>
    5536:	e7f9      	b.n	552c <sched_after_mstr_free_slot_get+0x114>
    5538:	3b9aca00 	.word	0x3b9aca00
    553c:	00000000 	.word	0x00000000
    5540:	00004f25 	.word	0x00004f25
    5544:	0000bda7 	.word	0x0000bda7
    5548:	0000c71e 	.word	0x0000c71e
    554c:	0000c693 	.word	0x0000c693
    5550:	0000dbc1 	.word	0x0000dbc1
    5554:	0000d112 	.word	0x0000d112
    5558:	1afd498d 	.word	0x1afd498d
    555c:	20000930 	.word	0x20000930

00005560 <isr_adv_ci_adva_check>:
{
    5560:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    5562:	7804      	ldrb	r4, [r0, #0]
    5564:	780a      	ldrb	r2, [r1, #0]
    5566:	f3c4 1380 	ubfx	r3, r4, #6, #1
    556a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    556e:	d119      	bne.n	55a4 <isr_adv_ci_adva_check+0x44>
    5570:	f004 040f 	and.w	r4, r4, #15
    5574:	2c01      	cmp	r4, #1
    5576:	f100 0502 	add.w	r5, r0, #2
    557a:	f101 0608 	add.w	r6, r1, #8
    557e:	d008      	beq.n	5592 <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    5580:	2206      	movs	r2, #6
    5582:	4631      	mov	r1, r6
    5584:	4628      	mov	r0, r5
    5586:	f7fb f81a 	bl	5be <memcmp>
			 BDADDR_SIZE)) ||
    558a:	fab0 f080 	clz	r0, r0
    558e:	0940      	lsrs	r0, r0, #5
}
    5590:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    5592:	2206      	movs	r2, #6
    5594:	4631      	mov	r1, r6
    5596:	4628      	mov	r0, r5
    5598:	f7fb f811 	bl	5be <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    559c:	2800      	cmp	r0, #0
    559e:	d1ef      	bne.n	5580 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    55a0:	4620      	mov	r0, r4
    55a2:	e7f5      	b.n	5590 <isr_adv_ci_adva_check+0x30>
    55a4:	2000      	movs	r0, #0
    55a6:	e7f3      	b.n	5590 <isr_adv_ci_adva_check+0x30>

000055a8 <packet_rx_enqueue>:
{
    55a8:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    55aa:	4a1e      	ldr	r2, [pc, #120]	; (5624 <packet_rx_enqueue+0x7c>)
    55ac:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
    55b0:	f892 113a 	ldrb.w	r1, [r2, #314]	; 0x13a
    55b4:	4299      	cmp	r1, r3
    55b6:	d10e      	bne.n	55d6 <packet_rx_enqueue+0x2e>
    55b8:	4b1b      	ldr	r3, [pc, #108]	; (5628 <packet_rx_enqueue+0x80>)
    55ba:	4a1c      	ldr	r2, [pc, #112]	; (562c <packet_rx_enqueue+0x84>)
    55bc:	491c      	ldr	r1, [pc, #112]	; (5630 <packet_rx_enqueue+0x88>)
    55be:	481d      	ldr	r0, [pc, #116]	; (5634 <packet_rx_enqueue+0x8c>)
    55c0:	e9cd 3300 	strd	r3, r3, [sp]
    55c4:	4b1c      	ldr	r3, [pc, #112]	; (5638 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    55c6:	f7fb fe85 	bl	12d4 <printk>
    55ca:	4040      	eors	r0, r0
    55cc:	f380 8811 	msr	BASEPRI, r0
    55d0:	f04f 0004 	mov.w	r0, #4
    55d4:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    55d6:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
    55da:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
    55de:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    55e2:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	link = node_rx->hdr.onion.link;
    55e6:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    55e8:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    55ea:	f892 3139 	ldrb.w	r3, [r2, #313]	; 0x139
	if (last == _radio.packet_rx_count) {
    55ee:	f892 4138 	ldrb.w	r4, [r2, #312]	; 0x138
	last = _radio.packet_rx_last + 1;
    55f2:	3301      	adds	r3, #1
    55f4:	b2db      	uxtb	r3, r3
		last = 0;
    55f6:	429c      	cmp	r4, r3
    55f8:	bf08      	it	eq
    55fa:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    55fc:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    5600:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    5604:	f7fd fe06 	bl	3214 <memq_enqueue>
	LL_ASSERT(link);
    5608:	b938      	cbnz	r0, 561a <packet_rx_enqueue+0x72>
    560a:	4b07      	ldr	r3, [pc, #28]	; (5628 <packet_rx_enqueue+0x80>)
    560c:	4a07      	ldr	r2, [pc, #28]	; (562c <packet_rx_enqueue+0x84>)
    560e:	4908      	ldr	r1, [pc, #32]	; (5630 <packet_rx_enqueue+0x88>)
    5610:	480a      	ldr	r0, [pc, #40]	; (563c <packet_rx_enqueue+0x94>)
    5612:	e9cd 3300 	strd	r3, r3, [sp]
    5616:	4b08      	ldr	r3, [pc, #32]	; (5638 <packet_rx_enqueue+0x90>)
    5618:	e7d5      	b.n	55c6 <packet_rx_enqueue+0x1e>
}
    561a:	b002      	add	sp, #8
    561c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    5620:	f004 b88c 	b.w	973c <radio_event_callback>
    5624:	20000930 	.word	0x20000930
    5628:	0000bda7 	.word	0x0000bda7
    562c:	0000c71e 	.word	0x0000c71e
    5630:	0000c693 	.word	0x0000c693
    5634:	0000d8ba 	.word	0x0000d8ba
    5638:	0000d268 	.word	0x0000d268
    563c:	0000d90d 	.word	0x0000d90d

00005640 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    5640:	4a0b      	ldr	r2, [pc, #44]	; (5670 <rx_fc_lock+0x30>)
    5642:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    5646:	f892 1179 	ldrb.w	r1, [r2, #377]	; 0x179
    564a:	4299      	cmp	r1, r3
    564c:	d10e      	bne.n	566c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    564e:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    5652:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5656:	f8a3 0172 	strh.w	r0, [r3, #370]	; 0x172
		req = _radio.fc_req + 1;
    565a:	f892 3178 	ldrb.w	r3, [r2, #376]	; 0x178
    565e:	3301      	adds	r3, #1
    5660:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    5662:	2b03      	cmp	r3, #3
    5664:	bf08      	it	eq
    5666:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    5668:	f882 3178 	strb.w	r3, [r2, #376]	; 0x178
	}
}
    566c:	4770      	bx	lr
    566e:	bf00      	nop
    5670:	20000930 	.word	0x20000930

00005674 <ticker_success_assert>:
{
    5674:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5676:	b170      	cbz	r0, 5696 <ticker_success_assert+0x22>
    5678:	4b08      	ldr	r3, [pc, #32]	; (569c <ticker_success_assert+0x28>)
    567a:	4a09      	ldr	r2, [pc, #36]	; (56a0 <ticker_success_assert+0x2c>)
    567c:	4909      	ldr	r1, [pc, #36]	; (56a4 <ticker_success_assert+0x30>)
    567e:	480a      	ldr	r0, [pc, #40]	; (56a8 <ticker_success_assert+0x34>)
    5680:	e9cd 3300 	strd	r3, r3, [sp]
    5684:	4b09      	ldr	r3, [pc, #36]	; (56ac <ticker_success_assert+0x38>)
    5686:	f7fb fe25 	bl	12d4 <printk>
    568a:	4040      	eors	r0, r0
    568c:	f380 8811 	msr	BASEPRI, r0
    5690:	f04f 0004 	mov.w	r0, #4
    5694:	df02      	svc	2
}
    5696:	b003      	add	sp, #12
    5698:	f85d fb04 	ldr.w	pc, [sp], #4
    569c:	0000bda7 	.word	0x0000bda7
    56a0:	0000c71e 	.word	0x0000c71e
    56a4:	0000c693 	.word	0x0000c693
    56a8:	0000dce1 	.word	0x0000dce1
    56ac:	0000d022 	.word	0x0000d022

000056b0 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    56b0:	2801      	cmp	r0, #1
{
    56b2:	b507      	push	{r0, r1, r2, lr}
    56b4:	4b11      	ldr	r3, [pc, #68]	; (56fc <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    56b6:	d116      	bne.n	56e6 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    56b8:	7c9a      	ldrb	r2, [r3, #18]
    56ba:	2a05      	cmp	r2, #5
    56bc:	d104      	bne.n	56c8 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    56be:	2200      	movs	r2, #0
    56c0:	749a      	strb	r2, [r3, #18]
}
    56c2:	b003      	add	sp, #12
    56c4:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    56c8:	4b0d      	ldr	r3, [pc, #52]	; (5700 <ticker_stop_adv_assert+0x50>)
    56ca:	4a0e      	ldr	r2, [pc, #56]	; (5704 <ticker_stop_adv_assert+0x54>)
    56cc:	490e      	ldr	r1, [pc, #56]	; (5708 <ticker_stop_adv_assert+0x58>)
    56ce:	480f      	ldr	r0, [pc, #60]	; (570c <ticker_stop_adv_assert+0x5c>)
    56d0:	e9cd 3300 	strd	r3, r3, [sp]
    56d4:	4b0e      	ldr	r3, [pc, #56]	; (5710 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    56d6:	f7fb fdfd 	bl	12d4 <printk>
    56da:	4040      	eors	r0, r0
    56dc:	f380 8811 	msr	BASEPRI, r0
    56e0:	f04f 0004 	mov.w	r0, #4
    56e4:	df02      	svc	2
    56e6:	7c1b      	ldrb	r3, [r3, #16]
    56e8:	2b05      	cmp	r3, #5
    56ea:	d1ea      	bne.n	56c2 <ticker_stop_adv_assert+0x12>
    56ec:	4b04      	ldr	r3, [pc, #16]	; (5700 <ticker_stop_adv_assert+0x50>)
    56ee:	4a05      	ldr	r2, [pc, #20]	; (5704 <ticker_stop_adv_assert+0x54>)
    56f0:	4905      	ldr	r1, [pc, #20]	; (5708 <ticker_stop_adv_assert+0x58>)
    56f2:	4808      	ldr	r0, [pc, #32]	; (5714 <ticker_stop_adv_assert+0x64>)
    56f4:	e9cd 3300 	strd	r3, r3, [sp]
    56f8:	4b05      	ldr	r3, [pc, #20]	; (5710 <ticker_stop_adv_assert+0x60>)
    56fa:	e7ec      	b.n	56d6 <ticker_stop_adv_assert+0x26>
    56fc:	20000930 	.word	0x20000930
    5700:	0000bda7 	.word	0x0000bda7
    5704:	0000c71e 	.word	0x0000c71e
    5708:	0000c693 	.word	0x0000c693
    570c:	0000c669 	.word	0x0000c669
    5710:	0000d038 	.word	0x0000d038
    5714:	0000dc27 	.word	0x0000dc27

00005718 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5718:	2801      	cmp	r0, #1
{
    571a:	b507      	push	{r0, r1, r2, lr}
    571c:	4b11      	ldr	r3, [pc, #68]	; (5764 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    571e:	d116      	bne.n	574e <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    5720:	7c9a      	ldrb	r2, [r3, #18]
    5722:	2a06      	cmp	r2, #6
    5724:	d104      	bne.n	5730 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    5726:	2200      	movs	r2, #0
    5728:	749a      	strb	r2, [r3, #18]
}
    572a:	b003      	add	sp, #12
    572c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    5730:	4b0d      	ldr	r3, [pc, #52]	; (5768 <ticker_stop_scan_assert+0x50>)
    5732:	4a0e      	ldr	r2, [pc, #56]	; (576c <ticker_stop_scan_assert+0x54>)
    5734:	490e      	ldr	r1, [pc, #56]	; (5770 <ticker_stop_scan_assert+0x58>)
    5736:	480f      	ldr	r0, [pc, #60]	; (5774 <ticker_stop_scan_assert+0x5c>)
    5738:	e9cd 3300 	strd	r3, r3, [sp]
    573c:	4b0e      	ldr	r3, [pc, #56]	; (5778 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    573e:	f7fb fdc9 	bl	12d4 <printk>
    5742:	4040      	eors	r0, r0
    5744:	f380 8811 	msr	BASEPRI, r0
    5748:	f04f 0004 	mov.w	r0, #4
    574c:	df02      	svc	2
    574e:	7c1b      	ldrb	r3, [r3, #16]
    5750:	2b06      	cmp	r3, #6
    5752:	d1ea      	bne.n	572a <ticker_stop_scan_assert+0x12>
    5754:	4b04      	ldr	r3, [pc, #16]	; (5768 <ticker_stop_scan_assert+0x50>)
    5756:	4a05      	ldr	r2, [pc, #20]	; (576c <ticker_stop_scan_assert+0x54>)
    5758:	4905      	ldr	r1, [pc, #20]	; (5770 <ticker_stop_scan_assert+0x58>)
    575a:	4808      	ldr	r0, [pc, #32]	; (577c <ticker_stop_scan_assert+0x64>)
    575c:	e9cd 3300 	strd	r3, r3, [sp]
    5760:	4b05      	ldr	r3, [pc, #20]	; (5778 <ticker_stop_scan_assert+0x60>)
    5762:	e7ec      	b.n	573e <ticker_stop_scan_assert+0x26>
    5764:	20000930 	.word	0x20000930
    5768:	0000bda7 	.word	0x0000bda7
    576c:	0000c71e 	.word	0x0000c71e
    5770:	0000c693 	.word	0x0000c693
    5774:	0000c669 	.word	0x0000c669
    5778:	0000d04f 	.word	0x0000d04f
    577c:	0000dca2 	.word	0x0000dca2

00005780 <ticker_update_adv_assert>:
{
    5780:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5782:	b190      	cbz	r0, 57aa <ticker_update_adv_assert+0x2a>
    5784:	4b0a      	ldr	r3, [pc, #40]	; (57b0 <ticker_update_adv_assert+0x30>)
    5786:	7c9b      	ldrb	r3, [r3, #18]
    5788:	2b05      	cmp	r3, #5
    578a:	d00e      	beq.n	57aa <ticker_update_adv_assert+0x2a>
    578c:	4b09      	ldr	r3, [pc, #36]	; (57b4 <ticker_update_adv_assert+0x34>)
    578e:	4a0a      	ldr	r2, [pc, #40]	; (57b8 <ticker_update_adv_assert+0x38>)
    5790:	490a      	ldr	r1, [pc, #40]	; (57bc <ticker_update_adv_assert+0x3c>)
    5792:	480b      	ldr	r0, [pc, #44]	; (57c0 <ticker_update_adv_assert+0x40>)
    5794:	e9cd 3300 	strd	r3, r3, [sp]
    5798:	4b0a      	ldr	r3, [pc, #40]	; (57c4 <ticker_update_adv_assert+0x44>)
    579a:	f7fb fd9b 	bl	12d4 <printk>
    579e:	4040      	eors	r0, r0
    57a0:	f380 8811 	msr	BASEPRI, r0
    57a4:	f04f 0004 	mov.w	r0, #4
    57a8:	df02      	svc	2
}
    57aa:	b003      	add	sp, #12
    57ac:	f85d fb04 	ldr.w	pc, [sp], #4
    57b0:	20000930 	.word	0x20000930
    57b4:	0000bda7 	.word	0x0000bda7
    57b8:	0000c71e 	.word	0x0000c71e
    57bc:	0000c693 	.word	0x0000c693
    57c0:	0000dd0e 	.word	0x0000dd0e
    57c4:	0000d067 	.word	0x0000d067

000057c8 <ticker_update_slave_assert>:
{
    57c8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    57ca:	b198      	cbz	r0, 57f4 <ticker_update_slave_assert+0x2c>
    57cc:	4b0b      	ldr	r3, [pc, #44]	; (57fc <ticker_update_slave_assert+0x34>)
    57ce:	7c9b      	ldrb	r3, [r3, #18]
    57d0:	b2c9      	uxtb	r1, r1
    57d2:	4299      	cmp	r1, r3
    57d4:	d00e      	beq.n	57f4 <ticker_update_slave_assert+0x2c>
    57d6:	4b0a      	ldr	r3, [pc, #40]	; (5800 <ticker_update_slave_assert+0x38>)
    57d8:	4a0a      	ldr	r2, [pc, #40]	; (5804 <ticker_update_slave_assert+0x3c>)
    57da:	490b      	ldr	r1, [pc, #44]	; (5808 <ticker_update_slave_assert+0x40>)
    57dc:	480b      	ldr	r0, [pc, #44]	; (580c <ticker_update_slave_assert+0x44>)
    57de:	e9cd 3300 	strd	r3, r3, [sp]
    57e2:	4b0b      	ldr	r3, [pc, #44]	; (5810 <ticker_update_slave_assert+0x48>)
    57e4:	f7fb fd76 	bl	12d4 <printk>
    57e8:	4040      	eors	r0, r0
    57ea:	f380 8811 	msr	BASEPRI, r0
    57ee:	f04f 0004 	mov.w	r0, #4
    57f2:	df02      	svc	2
}
    57f4:	b003      	add	sp, #12
    57f6:	f85d fb04 	ldr.w	pc, [sp], #4
    57fa:	bf00      	nop
    57fc:	20000930 	.word	0x20000930
    5800:	0000bda7 	.word	0x0000bda7
    5804:	0000c71e 	.word	0x0000c71e
    5808:	0000c693 	.word	0x0000c693
    580c:	0000dd5d 	.word	0x0000dd5d
    5810:	0000d080 	.word	0x0000d080

00005814 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    5814:	4b04      	ldr	r3, [pc, #16]	; (5828 <ticker_job_disable+0x14>)
    5816:	7d1b      	ldrb	r3, [r3, #20]
    5818:	b123      	cbz	r3, 5824 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    581a:	2101      	movs	r1, #1
    581c:	2200      	movs	r2, #0
    581e:	4608      	mov	r0, r1
    5820:	f7fd bd3e 	b.w	32a0 <mayfly_enable>
}
    5824:	4770      	bx	lr
    5826:	bf00      	nop
    5828:	20000930 	.word	0x20000930

0000582c <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    582c:	2806      	cmp	r0, #6
{
    582e:	b510      	push	{r4, lr}
    5830:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5832:	d90a      	bls.n	584a <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5834:	4b09      	ldr	r3, [pc, #36]	; (585c <hdr_conn_get+0x30>)
    5836:	1fc2      	subs	r2, r0, #7
    5838:	b292      	uxth	r2, r2
    583a:	f44f 7182 	mov.w	r1, #260	; 0x104
    583e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    5842:	f7fd fccd 	bl	31e0 <mem_get>
    5846:	6020      	str	r0, [r4, #0]
}
    5848:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    584a:	2805      	cmp	r0, #5
    584c:	d004      	beq.n	5858 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    584e:	2806      	cmp	r0, #6
	return NULL;
    5850:	4803      	ldr	r0, [pc, #12]	; (5860 <hdr_conn_get+0x34>)
    5852:	bf18      	it	ne
    5854:	2000      	movne	r0, #0
    5856:	e7f7      	b.n	5848 <hdr_conn_get+0x1c>
		return &_radio.advertiser.hdr;
    5858:	4802      	ldr	r0, [pc, #8]	; (5864 <hdr_conn_get+0x38>)
    585a:	e7f5      	b.n	5848 <hdr_conn_get+0x1c>
    585c:	20000930 	.word	0x20000930
    5860:	20000a00 	.word	0x20000a00
    5864:	20000948 	.word	0x20000948

00005868 <event_stop.part.13>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    5868:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    586a:	4b07      	ldr	r3, [pc, #28]	; (5888 <event_stop.part.13+0x20>)
    586c:	4a07      	ldr	r2, [pc, #28]	; (588c <event_stop.part.13+0x24>)
    586e:	4908      	ldr	r1, [pc, #32]	; (5890 <event_stop.part.13+0x28>)
    5870:	4808      	ldr	r0, [pc, #32]	; (5894 <event_stop.part.13+0x2c>)
    5872:	e9cd 3300 	strd	r3, r3, [sp]
    5876:	4b08      	ldr	r3, [pc, #32]	; (5898 <event_stop.part.13+0x30>)
    5878:	f7fb fd2c 	bl	12d4 <printk>
    587c:	4040      	eors	r0, r0
    587e:	f380 8811 	msr	BASEPRI, r0
    5882:	f04f 0004 	mov.w	r0, #4
    5886:	df02      	svc	2
    5888:	0000bda7 	.word	0x0000bda7
    588c:	0000c71e 	.word	0x0000c71e
    5890:	0000c693 	.word	0x0000c693
    5894:	0000d83d 	.word	0x0000d83d
    5898:	0000d164 	.word	0x0000d164

0000589c <event_active>:
{
    589c:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    589e:	2200      	movs	r2, #0
    58a0:	4b0b      	ldr	r3, [pc, #44]	; (58d0 <event_active+0x34>)
    58a2:	4611      	mov	r1, r2
    58a4:	4610      	mov	r0, r2
    58a6:	f7fd fd23 	bl	32f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    58aa:	b170      	cbz	r0, 58ca <event_active+0x2e>
    58ac:	4b09      	ldr	r3, [pc, #36]	; (58d4 <event_active+0x38>)
    58ae:	4a0a      	ldr	r2, [pc, #40]	; (58d8 <event_active+0x3c>)
    58b0:	490a      	ldr	r1, [pc, #40]	; (58dc <event_active+0x40>)
    58b2:	480b      	ldr	r0, [pc, #44]	; (58e0 <event_active+0x44>)
    58b4:	e9cd 3300 	strd	r3, r3, [sp]
    58b8:	4b0a      	ldr	r3, [pc, #40]	; (58e4 <event_active+0x48>)
    58ba:	f7fb fd0b 	bl	12d4 <printk>
    58be:	4040      	eors	r0, r0
    58c0:	f380 8811 	msr	BASEPRI, r0
    58c4:	f04f 0004 	mov.w	r0, #4
    58c8:	df02      	svc	2
}
    58ca:	b003      	add	sp, #12
    58cc:	f85d fb04 	ldr.w	pc, [sp], #4
    58d0:	200037d0 	.word	0x200037d0
    58d4:	0000bda7 	.word	0x0000bda7
    58d8:	0000c71e 	.word	0x0000c71e
    58dc:	0000c693 	.word	0x0000c693
    58e0:	0000d83d 	.word	0x0000d83d
    58e4:	0000d0af 	.word	0x0000d0af

000058e8 <event_xtal>:
{
    58e8:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    58ea:	2200      	movs	r2, #0
    58ec:	4b0b      	ldr	r3, [pc, #44]	; (591c <event_xtal+0x34>)
    58ee:	4611      	mov	r1, r2
    58f0:	4610      	mov	r0, r2
    58f2:	f7fd fcfd 	bl	32f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    58f6:	b170      	cbz	r0, 5916 <event_xtal+0x2e>
    58f8:	4b09      	ldr	r3, [pc, #36]	; (5920 <event_xtal+0x38>)
    58fa:	4a0a      	ldr	r2, [pc, #40]	; (5924 <event_xtal+0x3c>)
    58fc:	490a      	ldr	r1, [pc, #40]	; (5928 <event_xtal+0x40>)
    58fe:	480b      	ldr	r0, [pc, #44]	; (592c <event_xtal+0x44>)
    5900:	e9cd 3300 	strd	r3, r3, [sp]
    5904:	4b0a      	ldr	r3, [pc, #40]	; (5930 <event_xtal+0x48>)
    5906:	f7fb fce5 	bl	12d4 <printk>
    590a:	4040      	eors	r0, r0
    590c:	f380 8811 	msr	BASEPRI, r0
    5910:	f04f 0004 	mov.w	r0, #4
    5914:	df02      	svc	2
}
    5916:	b003      	add	sp, #12
    5918:	f85d fb04 	ldr.w	pc, [sp], #4
    591c:	20003850 	.word	0x20003850
    5920:	0000bda7 	.word	0x0000bda7
    5924:	0000c71e 	.word	0x0000c71e
    5928:	0000c693 	.word	0x0000c693
    592c:	0000d83d 	.word	0x0000d83d
    5930:	0000d0cb 	.word	0x0000d0cb

00005934 <mayfly_radio_active>:
{
    5934:	b507      	push	{r0, r1, r2, lr}
    5936:	4a12      	ldr	r2, [pc, #72]	; (5980 <mayfly_radio_active+0x4c>)
    5938:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    593a:	b140      	cbz	r0, 594e <mayfly_radio_active+0x1a>
		if (s_active++) {
    593c:	1c59      	adds	r1, r3, #1
    593e:	7011      	strb	r1, [r2, #0]
    5940:	b9d3      	cbnz	r3, 5978 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    5942:	2001      	movs	r0, #1
}
    5944:	b003      	add	sp, #12
    5946:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    594a:	f003 bef5 	b.w	9738 <radio_active_callback>
		LL_ASSERT(s_active);
    594e:	b973      	cbnz	r3, 596e <mayfly_radio_active+0x3a>
    5950:	4b0c      	ldr	r3, [pc, #48]	; (5984 <mayfly_radio_active+0x50>)
    5952:	4a0d      	ldr	r2, [pc, #52]	; (5988 <mayfly_radio_active+0x54>)
    5954:	490d      	ldr	r1, [pc, #52]	; (598c <mayfly_radio_active+0x58>)
    5956:	480e      	ldr	r0, [pc, #56]	; (5990 <mayfly_radio_active+0x5c>)
    5958:	e9cd 3300 	strd	r3, r3, [sp]
    595c:	4b0d      	ldr	r3, [pc, #52]	; (5994 <mayfly_radio_active+0x60>)
    595e:	f7fb fcb9 	bl	12d4 <printk>
    5962:	4040      	eors	r0, r0
    5964:	f380 8811 	msr	BASEPRI, r0
    5968:	f04f 0004 	mov.w	r0, #4
    596c:	df02      	svc	2
		if (--s_active) {
    596e:	3b01      	subs	r3, #1
    5970:	b2db      	uxtb	r3, r3
    5972:	7013      	strb	r3, [r2, #0]
    5974:	2b00      	cmp	r3, #0
    5976:	d0e5      	beq.n	5944 <mayfly_radio_active+0x10>
}
    5978:	b003      	add	sp, #12
    597a:	f85d fb04 	ldr.w	pc, [sp], #4
    597e:	bf00      	nop
    5980:	20000ae4 	.word	0x20000ae4
    5984:	0000bda7 	.word	0x0000bda7
    5988:	0000c71e 	.word	0x0000c71e
    598c:	0000c693 	.word	0x0000c693
    5990:	0000d792 	.word	0x0000d792
    5994:	0000d09b 	.word	0x0000d09b

00005998 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    5998:	2000      	movs	r0, #0
    599a:	f7ff bfcb 	b.w	5934 <mayfly_radio_active>
	...

000059a0 <mayfly_radio_stop>:
{
    59a0:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    59a2:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    59a4:	1f03      	subs	r3, r0, #4
    59a6:	2b01      	cmp	r3, #1
    59a8:	d90e      	bls.n	59c8 <mayfly_radio_stop+0x28>
    59aa:	4b11      	ldr	r3, [pc, #68]	; (59f0 <mayfly_radio_stop+0x50>)
    59ac:	4a11      	ldr	r2, [pc, #68]	; (59f4 <mayfly_radio_stop+0x54>)
    59ae:	4912      	ldr	r1, [pc, #72]	; (59f8 <mayfly_radio_stop+0x58>)
    59b0:	4812      	ldr	r0, [pc, #72]	; (59fc <mayfly_radio_stop+0x5c>)
    59b2:	e9cd 3300 	strd	r3, r3, [sp]
    59b6:	4b12      	ldr	r3, [pc, #72]	; (5a00 <mayfly_radio_stop+0x60>)
    59b8:	f7fb fc8c 	bl	12d4 <printk>
    59bc:	4040      	eors	r0, r0
    59be:	f380 8811 	msr	BASEPRI, r0
    59c2:	f04f 0004 	mov.w	r0, #4
    59c6:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    59c8:	4a0e      	ldr	r2, [pc, #56]	; (5a04 <mayfly_radio_stop+0x64>)
    59ca:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    59cc:	b113      	cbz	r3, 59d4 <mayfly_radio_stop+0x34>
	radio_used = ((_radio.state != STATE_NONE) &&
    59ce:	3b04      	subs	r3, #4
    59d0:	2b01      	cmp	r3, #1
    59d2:	d807      	bhi.n	59e4 <mayfly_radio_stop+0x44>
	if (radio_used || !radio_is_idle()) {
    59d4:	f004 fc54 	bl	a280 <radio_is_idle>
    59d8:	b930      	cbnz	r0, 59e8 <mayfly_radio_stop+0x48>
}
    59da:	b003      	add	sp, #12
    59dc:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    59e0:	f004 bc1c 	b.w	a21c <radio_disable>
			_radio.state = state;
    59e4:	7510      	strb	r0, [r2, #20]
    59e6:	e7f8      	b.n	59da <mayfly_radio_stop+0x3a>
}
    59e8:	b003      	add	sp, #12
    59ea:	f85d fb04 	ldr.w	pc, [sp], #4
    59ee:	bf00      	nop
    59f0:	0000bda7 	.word	0x0000bda7
    59f4:	0000c71e 	.word	0x0000c71e
    59f8:	0000c693 	.word	0x0000c693
    59fc:	0000d7bc 	.word	0x0000d7bc
    5a00:	0000d152 	.word	0x0000d152
    5a04:	20000930 	.word	0x20000930

00005a08 <rx_packet_set>:
{
    5a08:	b538      	push	{r3, r4, r5, lr}
    5a0a:	4605      	mov	r5, r0
    5a0c:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    5a0e:	2100      	movs	r1, #0
    5a10:	4608      	mov	r0, r1
    5a12:	f004 fb69 	bl	a0e8 <radio_phy_set>
	if (conn->enc_rx) {
    5a16:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    5a1a:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    5a1c:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    5a20:	d50d      	bpl.n	5a3e <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    5a22:	211f      	movs	r1, #31
    5a24:	2008      	movs	r0, #8
    5a26:	f004 fba5 	bl	a174 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    5a2a:	4622      	mov	r2, r4
    5a2c:	2100      	movs	r1, #0
    5a2e:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    5a32:	f004 fdd7 	bl	a5e4 <radio_ccm_rx_pkt_set>
}
    5a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    5a3a:	f004 bbc9 	b.w	a1d0 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    5a3e:	2008      	movs	r0, #8
    5a40:	211b      	movs	r1, #27
    5a42:	f004 fb97 	bl	a174 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    5a46:	4620      	mov	r0, r4
    5a48:	e7f5      	b.n	5a36 <rx_packet_set+0x2e>
	...

00005a4c <pdu_node_tx_release>:
{
    5a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    5a4e:	4a17      	ldr	r2, [pc, #92]	; (5aac <pdu_node_tx_release+0x60>)
    5a50:	f892 3170 	ldrb.w	r3, [r2, #368]	; 0x170
	if (last == _radio.packet_tx_count) {
    5a54:	f892 416c 	ldrb.w	r4, [r2, #364]	; 0x16c
	last = _radio.packet_release_last + 1;
    5a58:	3301      	adds	r3, #1
    5a5a:	b2db      	uxtb	r3, r3
		last = 0;
    5a5c:	429c      	cmp	r4, r3
    5a5e:	bf08      	it	eq
    5a60:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    5a62:	f892 416f 	ldrb.w	r4, [r2, #367]	; 0x16f
    5a66:	429c      	cmp	r4, r3
    5a68:	d10e      	bne.n	5a88 <pdu_node_tx_release+0x3c>
    5a6a:	4b11      	ldr	r3, [pc, #68]	; (5ab0 <pdu_node_tx_release+0x64>)
    5a6c:	4a11      	ldr	r2, [pc, #68]	; (5ab4 <pdu_node_tx_release+0x68>)
    5a6e:	4912      	ldr	r1, [pc, #72]	; (5ab8 <pdu_node_tx_release+0x6c>)
    5a70:	4812      	ldr	r0, [pc, #72]	; (5abc <pdu_node_tx_release+0x70>)
    5a72:	e9cd 3300 	strd	r3, r3, [sp]
    5a76:	4b12      	ldr	r3, [pc, #72]	; (5ac0 <pdu_node_tx_release+0x74>)
    5a78:	f7fb fc2c 	bl	12d4 <printk>
    5a7c:	4040      	eors	r0, r0
    5a7e:	f380 8811 	msr	BASEPRI, r0
    5a82:	f04f 0004 	mov.w	r0, #4
    5a86:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    5a88:	f892 5170 	ldrb.w	r5, [r2, #368]	; 0x170
    5a8c:	f8d2 4168 	ldr.w	r4, [r2, #360]	; 0x168
    5a90:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    5a94:	f892 0170 	ldrb.w	r0, [r2, #368]	; 0x170
    5a98:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    5a9c:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    5a9e:	f882 3170 	strb.w	r3, [r2, #368]	; 0x170
}
    5aa2:	b003      	add	sp, #12
    5aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    5aa8:	f003 be48 	b.w	973c <radio_event_callback>
    5aac:	20000930 	.word	0x20000930
    5ab0:	0000bda7 	.word	0x0000bda7
    5ab4:	0000c71e 	.word	0x0000c71e
    5ab8:	0000c693 	.word	0x0000c693
    5abc:	0000d933 	.word	0x0000d933
    5ac0:	0000d27a 	.word	0x0000d27a

00005ac4 <packet_tx_enqueue>:
{
    5ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5ac8:	4d25      	ldr	r5, [pc, #148]	; (5b60 <packet_tx_enqueue+0x9c>)
{
    5aca:	4606      	mov	r6, r0
    5acc:	46a8      	mov	r8, r5
		node_tx_new->next = NULL;
    5ace:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5ad0:	f895 316d 	ldrb.w	r3, [r5, #365]	; 0x16d
    5ad4:	f895 216e 	ldrb.w	r2, [r5, #366]	; 0x16e
    5ad8:	429a      	cmp	r2, r3
    5ada:	d036      	beq.n	5b4a <packet_tx_enqueue+0x86>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    5adc:	f895 916d 	ldrb.w	r9, [r5, #365]	; 0x16d
    5ae0:	f8d5 a164 	ldr.w	sl, [r5, #356]	; 0x164
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5ae4:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
    5ae8:	f83a 2039 	ldrh.w	r2, [sl, r9, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    5aec:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5af0:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    5af4:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
    5af6:	6027      	str	r7, [r4, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5af8:	f7fd fb72 	bl	31e0 <mem_get>
    5afc:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    5afe:	f83a 0039 	ldrh.w	r0, [sl, r9, lsl #3]
    5b02:	8c1a      	ldrh	r2, [r3, #32]
    5b04:	4282      	cmp	r2, r0
    5b06:	d122      	bne.n	5b4e <packet_tx_enqueue+0x8a>
			if (conn->pkt_tx_data == 0) {
    5b08:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    5b0c:	b942      	cbnz	r2, 5b20 <packet_tx_enqueue+0x5c>
				if (conn->pkt_tx_head == 0) {
    5b0e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    5b12:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    5b16:	b91a      	cbnz	r2, 5b20 <packet_tx_enqueue+0x5c>
					conn->pkt_tx_head = node_tx_new;
    5b18:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    5b1c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    5b20:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    5b24:	b102      	cbz	r2, 5b28 <packet_tx_enqueue+0x64>
				conn->pkt_tx_last->next = node_tx_new;
    5b26:	6014      	str	r4, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    5b28:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    5b2c:	f898 316d 	ldrb.w	r3, [r8, #365]	; 0x16d
		if (first == _radio.packet_tx_count) {
    5b30:	f898 216c 	ldrb.w	r2, [r8, #364]	; 0x16c
		first = _radio.packet_tx_first + 1;
    5b34:	3301      	adds	r3, #1
    5b36:	b2db      	uxtb	r3, r3
    5b38:	3e01      	subs	r6, #1
			first = 0;
    5b3a:	429a      	cmp	r2, r3
    5b3c:	bf08      	it	eq
    5b3e:	2300      	moveq	r3, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5b40:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		_radio.packet_tx_first = first;
    5b44:	f888 316d 	strb.w	r3, [r8, #365]	; 0x16d
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5b48:	d1c2      	bne.n	5ad0 <packet_tx_enqueue+0xc>
}
    5b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5b4e:	7923      	ldrb	r3, [r4, #4]
    5b50:	f367 0301 	bfi	r3, r7, #0, #2
    5b54:	7123      	strb	r3, [r4, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    5b56:	4621      	mov	r1, r4
    5b58:	f7ff ff78 	bl	5a4c <pdu_node_tx_release>
    5b5c:	e7e6      	b.n	5b2c <packet_tx_enqueue+0x68>
    5b5e:	bf00      	nop
    5b60:	20000930 	.word	0x20000930

00005b64 <connection_release>:
{
    5b64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    5b66:	2201      	movs	r2, #1
{
    5b68:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    5b6a:	4611      	mov	r1, r2
    5b6c:	2000      	movs	r0, #0
    5b6e:	f7fd fb97 	bl	32a0 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b72:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    5b76:	2100      	movs	r1, #0
    5b78:	f242 330e 	movw	r3, #8974	; 0x230e
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5b7c:	3207      	adds	r2, #7
	ticker_status =
    5b7e:	9300      	str	r3, [sp, #0]
    5b80:	4608      	mov	r0, r1
    5b82:	4b3b      	ldr	r3, [pc, #236]	; (5c70 <connection_release+0x10c>)
    5b84:	b2d2      	uxtb	r2, r2
    5b86:	f7fe f9f7 	bl	3f78 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5b8a:	f030 0102 	bics.w	r1, r0, #2
    5b8e:	d00e      	beq.n	5bae <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5b90:	4b38      	ldr	r3, [pc, #224]	; (5c74 <connection_release+0x110>)
    5b92:	4a39      	ldr	r2, [pc, #228]	; (5c78 <connection_release+0x114>)
    5b94:	4939      	ldr	r1, [pc, #228]	; (5c7c <connection_release+0x118>)
    5b96:	483a      	ldr	r0, [pc, #232]	; (5c80 <connection_release+0x11c>)
    5b98:	e9cd 3300 	strd	r3, r3, [sp]
    5b9c:	4b39      	ldr	r3, [pc, #228]	; (5c84 <connection_release+0x120>)
    5b9e:	f7fb fb99 	bl	12d4 <printk>
    5ba2:	4040      	eors	r0, r0
    5ba4:	f380 8811 	msr	BASEPRI, r0
    5ba8:	f04f 0004 	mov.w	r0, #4
    5bac:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    5bae:	4b36      	ldr	r3, [pc, #216]	; (5c88 <connection_release+0x124>)
    5bb0:	7d1a      	ldrb	r2, [r3, #20]
    5bb2:	2a05      	cmp	r2, #5
    5bb4:	461d      	mov	r5, r3
    5bb6:	d11b      	bne.n	5bf0 <connection_release+0x8c>
					  conn->handle))) {
    5bb8:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    5bba:	7c18      	ldrb	r0, [r3, #16]
    5bbc:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    5bbe:	4290      	cmp	r0, r2
    5bc0:	d116      	bne.n	5bf0 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    5bc2:	7419      	strb	r1, [r3, #16]
		ticker_status =
    5bc4:	f242 331f 	movw	r3, #8991	; 0x231f
    5bc8:	9300      	str	r3, [sp, #0]
    5bca:	2201      	movs	r2, #1
    5bcc:	4b28      	ldr	r3, [pc, #160]	; (5c70 <connection_release+0x10c>)
    5bce:	4608      	mov	r0, r1
    5bd0:	f7fe f9d2 	bl	3f78 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5bd4:	f030 0202 	bics.w	r2, r0, #2
    5bd8:	d1da      	bne.n	5b90 <connection_release+0x2c>
		ticker_status =
    5bda:	f242 3326 	movw	r3, #8998	; 0x2326
    5bde:	9300      	str	r3, [sp, #0]
    5be0:	4611      	mov	r1, r2
    5be2:	4b23      	ldr	r3, [pc, #140]	; (5c70 <connection_release+0x10c>)
    5be4:	4610      	mov	r0, r2
    5be6:	f7fe f9c7 	bl	3f78 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5bea:	f030 0302 	bics.w	r3, r0, #2
    5bee:	d1cf      	bne.n	5b90 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    5bf0:	e9d4 133b 	ldrd	r1, r3, [r4, #236]	; 0xec
    5bf4:	4299      	cmp	r1, r3
    5bf6:	d003      	beq.n	5c00 <connection_release+0x9c>
    5bf8:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5bfc:	4299      	cmp	r1, r3
    5bfe:	d101      	bne.n	5c04 <connection_release+0xa0>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5c00:	4e22      	ldr	r6, [pc, #136]	; (5c8c <connection_release+0x128>)
    5c02:	e010      	b.n	5c26 <connection_release+0xc2>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5c04:	790b      	ldrb	r3, [r1, #4]
    5c06:	f36f 0301 	bfc	r3, #0, #2
    5c0a:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5c0c:	680b      	ldr	r3, [r1, #0]
    5c0e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    5c12:	8c20      	ldrh	r0, [r4, #32]
    5c14:	f7ff ff1a 	bl	5a4c <pdu_node_tx_release>
    5c18:	e7ea      	b.n	5bf0 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5c1a:	6803      	ldr	r3, [r0, #0]
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5c1c:	4631      	mov	r1, r6
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    5c1e:	e9c4 333b 	strd	r3, r3, [r4, #236]	; 0xec
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5c22:	f7fd fac8 	bl	31b6 <mem_release>
	while ((conn->pkt_tx_head) &&
    5c26:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5c2a:	b118      	cbz	r0, 5c34 <connection_release+0xd0>
    5c2c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5c30:	4298      	cmp	r0, r3
    5c32:	d1f2      	bne.n	5c1a <connection_release+0xb6>
	conn->pkt_tx_ctrl = NULL;
    5c34:	2300      	movs	r3, #0
	conn->pkt_tx_ctrl_last = NULL;
    5c36:	e9c4 333c 	strd	r3, r3, [r4, #240]	; 0xf0
	while (conn->pkt_tx_head) {
    5c3a:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    5c3e:	b951      	cbnz	r1, 5c56 <connection_release+0xf2>
	conn->handle = 0xffff;
    5c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5c44:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    5c46:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    5c4a:	42a3      	cmp	r3, r4
		_radio.conn_upd = NULL;
    5c4c:	bf08      	it	eq
    5c4e:	f8c5 1180 	streq.w	r1, [r5, #384]	; 0x180
}
    5c52:	b002      	add	sp, #8
    5c54:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5c56:	790b      	ldrb	r3, [r1, #4]
    5c58:	f36f 0301 	bfc	r3, #0, #2
    5c5c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5c5e:	680b      	ldr	r3, [r1, #0]
    5c60:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    5c64:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    5c68:	8c20      	ldrh	r0, [r4, #32]
    5c6a:	f7ff feef 	bl	5a4c <pdu_node_tx_release>
    5c6e:	e7e4      	b.n	5c3a <connection_release+0xd6>
    5c70:	00005675 	.word	0x00005675
    5c74:	0000bda7 	.word	0x0000bda7
    5c78:	0000c71e 	.word	0x0000c71e
    5c7c:	0000c693 	.word	0x0000c693
    5c80:	0000d317 	.word	0x0000d317
    5c84:	0000d28e 	.word	0x0000d28e
    5c88:	20000930 	.word	0x20000930
    5c8c:	20000a84 	.word	0x20000a84

00005c90 <tx_packet_set>:
{
    5c90:	b538      	push	{r3, r4, r5, lr}
    5c92:	4605      	mov	r5, r0
    5c94:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    5c96:	2100      	movs	r1, #0
    5c98:	4608      	mov	r0, r1
    5c9a:	f004 fa25 	bl	a0e8 <radio_phy_set>
	if (conn->enc_tx) {
    5c9e:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    5ca2:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    5ca4:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    5ca8:	d50c      	bpl.n	5cc4 <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    5caa:	211f      	movs	r1, #31
    5cac:	2008      	movs	r0, #8
    5cae:	f004 fa61 	bl	a174 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    5cb2:	4621      	mov	r1, r4
    5cb4:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    5cb8:	f004 fcd0 	bl	a65c <radio_ccm_tx_pkt_set>
}
    5cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    5cc0:	f004 ba8c 	b.w	a1dc <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    5cc4:	2008      	movs	r0, #8
    5cc6:	211b      	movs	r1, #27
    5cc8:	f004 fa54 	bl	a174 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    5ccc:	4620      	mov	r0, r4
    5cce:	e7f5      	b.n	5cbc <tx_packet_set+0x2c>

00005cd0 <chan_set>:
	switch (chan) {
    5cd0:	2826      	cmp	r0, #38	; 0x26
{
    5cd2:	b513      	push	{r0, r1, r4, lr}
    5cd4:	4604      	mov	r4, r0
	switch (chan) {
    5cd6:	d00c      	beq.n	5cf2 <chan_set+0x22>
    5cd8:	2827      	cmp	r0, #39	; 0x27
    5cda:	d00c      	beq.n	5cf6 <chan_set+0x26>
    5cdc:	2825      	cmp	r0, #37	; 0x25
    5cde:	d10c      	bne.n	5cfa <chan_set+0x2a>
		radio_freq_chan_set(2);
    5ce0:	2002      	movs	r0, #2
			radio_freq_chan_set(4 + (2 * chan));
    5ce2:	f004 fa17 	bl	a114 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    5ce6:	4620      	mov	r0, r4
}
    5ce8:	b002      	add	sp, #8
    5cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
    5cee:	f004 ba17 	b.w	a120 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
    5cf2:	201a      	movs	r0, #26
    5cf4:	e7f5      	b.n	5ce2 <chan_set+0x12>
		radio_freq_chan_set(80);
    5cf6:	2050      	movs	r0, #80	; 0x50
    5cf8:	e7f3      	b.n	5ce2 <chan_set+0x12>
		if (chan < 11) {
    5cfa:	280a      	cmp	r0, #10
    5cfc:	d802      	bhi.n	5d04 <chan_set+0x34>
			radio_freq_chan_set(4 + (2 * chan));
    5cfe:	3002      	adds	r0, #2
    5d00:	0040      	lsls	r0, r0, #1
    5d02:	e7ee      	b.n	5ce2 <chan_set+0x12>
		} else if (chan < 40) {
    5d04:	2827      	cmp	r0, #39	; 0x27
    5d06:	d801      	bhi.n	5d0c <chan_set+0x3c>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
    5d08:	3003      	adds	r0, #3
    5d0a:	e7f9      	b.n	5d00 <chan_set+0x30>
			LL_ASSERT(0);
    5d0c:	4b07      	ldr	r3, [pc, #28]	; (5d2c <chan_set+0x5c>)
    5d0e:	4a08      	ldr	r2, [pc, #32]	; (5d30 <chan_set+0x60>)
    5d10:	4908      	ldr	r1, [pc, #32]	; (5d34 <chan_set+0x64>)
    5d12:	4809      	ldr	r0, [pc, #36]	; (5d38 <chan_set+0x68>)
    5d14:	e9cd 3300 	strd	r3, r3, [sp]
    5d18:	4b08      	ldr	r3, [pc, #32]	; (5d3c <chan_set+0x6c>)
    5d1a:	f7fb fadb 	bl	12d4 <printk>
    5d1e:	4040      	eors	r0, r0
    5d20:	f380 8811 	msr	BASEPRI, r0
    5d24:	f04f 0004 	mov.w	r0, #4
    5d28:	df02      	svc	2
    5d2a:	bf00      	nop
    5d2c:	0000bda7 	.word	0x0000bda7
    5d30:	0000c71e 	.word	0x0000c71e
    5d34:	0000c693 	.word	0x0000c693
    5d38:	0000c669 	.word	0x0000c669
    5d3c:	0000d184 	.word	0x0000d184

00005d40 <adv_setup>:
{
    5d40:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
    5d42:	4c2a      	ldr	r4, [pc, #168]	; (5dec <adv_setup+0xac>)
    5d44:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    5d48:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    5d4c:	429a      	cmp	r2, r3
    5d4e:	d006      	beq.n	5d5e <adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    5d50:	3301      	adds	r3, #1
    5d52:	b2db      	uxtb	r3, r3
			first = 0;
    5d54:	2b02      	cmp	r3, #2
    5d56:	bf08      	it	eq
    5d58:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    5d5a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	if (_radio.advertiser.scan_data.first != _radio.
    5d5e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
    5d62:	f894 20c9 	ldrb.w	r2, [r4, #201]	; 0xc9
    5d66:	429a      	cmp	r2, r3
    5d68:	d006      	beq.n	5d78 <adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    5d6a:	3301      	adds	r3, #1
    5d6c:	b2db      	uxtb	r3, r3
			first = 0;
    5d6e:	2b02      	cmp	r3, #2
    5d70:	bf08      	it	eq
    5d72:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    5d74:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	pdu = (void *)_radio.advertiser.adv_data.data
    5d78:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    5d7c:	232a      	movs	r3, #42	; 0x2a
    5d7e:	2527      	movs	r5, #39	; 0x27
    5d80:	fb15 3502 	smlabb	r5, r5, r2, r3
	radio_pkt_tx_set(pdu);
    5d84:	1960      	adds	r0, r4, r5
    5d86:	f004 fa29 	bl	a1dc <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    5d8a:	5d63      	ldrb	r3, [r4, r5]
    5d8c:	f003 030f 	and.w	r3, r3, #15
    5d90:	2b02      	cmp	r3, #2
    5d92:	d023      	beq.n	5ddc <adv_setup+0x9c>
    5d94:	2b07      	cmp	r3, #7
    5d96:	d021      	beq.n	5ddc <adv_setup+0x9c>
		_radio.state = STATE_TX;
    5d98:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    5d9a:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    5d9c:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    5d9e:	f004 fb27 	bl	a3f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    5da2:	2000      	movs	r0, #0
    5da4:	f004 fa94 	bl	a2d0 <radio_switch_complete_and_rx>
	bitmap = _radio.advertiser.chan_map_current;
    5da8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5dac:	f3c3 0202 	ubfx	r2, r3, #0, #3
    5db0:	b2d3      	uxtb	r3, r2
    5db2:	4619      	mov	r1, r3
	while ((bitmap & 0x01) == 0) {
    5db4:	2000      	movs	r0, #0
    5db6:	f011 0f01 	tst.w	r1, #1
    5dba:	f100 0501 	add.w	r5, r0, #1
    5dbe:	d012      	beq.n	5de6 <adv_setup+0xa6>
		(_radio.advertiser.chan_map_current - 1);
    5dc0:	3b01      	subs	r3, #1
	_radio.advertiser.chan_map_current &=
    5dc2:	4013      	ands	r3, r2
    5dc4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    5dc8:	b2c0      	uxtb	r0, r0
	_radio.advertiser.chan_map_current &=
    5dca:	f363 0202 	bfi	r2, r3, #0, #3
    5dce:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	chan_set(37 + chan);
    5dd2:	3025      	adds	r0, #37	; 0x25
}
    5dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	chan_set(37 + chan);
    5dd8:	f7ff bf7a 	b.w	5cd0 <chan_set>
		_radio.state = STATE_CLOSE;
    5ddc:	2303      	movs	r3, #3
    5dde:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    5de0:	f004 fa8c 	bl	a2fc <radio_switch_complete_and_disable>
    5de4:	e7e0      	b.n	5da8 <adv_setup+0x68>
		bitmap >>= 1;
    5de6:	0849      	lsrs	r1, r1, #1
    5de8:	4628      	mov	r0, r5
    5dea:	e7e4      	b.n	5db6 <adv_setup+0x76>
    5dec:	20000930 	.word	0x20000930

00005df0 <sched_after_mstr_free_offset_get>:
{
    5df0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5df2:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    5df4:	aa04      	add	r2, sp, #16
{
    5df6:	461c      	mov	r4, r3
    5df8:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    5dfa:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    5dfe:	3127      	adds	r1, #39	; 0x27
    5e00:	2001      	movs	r0, #1
    5e02:	f7ff fb09 	bl	5418 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    5e06:	6823      	ldr	r3, [r4, #0]
    5e08:	b363      	cbz	r3, 5e64 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    5e0a:	9803      	ldr	r0, [sp, #12]
    5e0c:	1b83      	subs	r3, r0, r6
    5e0e:	021b      	lsls	r3, r3, #8
    5e10:	d50e      	bpl.n	5e30 <sched_after_mstr_free_offset_get+0x40>
    5e12:	4b19      	ldr	r3, [pc, #100]	; (5e78 <sched_after_mstr_free_offset_get+0x88>)
    5e14:	4a19      	ldr	r2, [pc, #100]	; (5e7c <sched_after_mstr_free_offset_get+0x8c>)
    5e16:	491a      	ldr	r1, [pc, #104]	; (5e80 <sched_after_mstr_free_offset_get+0x90>)
    5e18:	481a      	ldr	r0, [pc, #104]	; (5e84 <sched_after_mstr_free_offset_get+0x94>)
    5e1a:	e9cd 3300 	strd	r3, r3, [sp]
    5e1e:	4b1a      	ldr	r3, [pc, #104]	; (5e88 <sched_after_mstr_free_offset_get+0x98>)
    5e20:	f7fb fa58 	bl	12d4 <printk>
    5e24:	4040      	eors	r0, r0
    5e26:	f380 8811 	msr	BASEPRI, r0
    5e2a:	f04f 0004 	mov.w	r0, #4
    5e2e:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    5e30:	4631      	mov	r1, r6
    5e32:	f7fe f96b 	bl	410c <ticker_ticks_diff_get>
    5e36:	4602      	mov	r2, r0
    5e38:	4814      	ldr	r0, [pc, #80]	; (5e8c <sched_after_mstr_free_offset_get+0x9c>)
    5e3a:	2307      	movs	r3, #7
    5e3c:	fba2 0100 	umull	r0, r1, r2, r0
    5e40:	fb03 1102 	mla	r1, r3, r2, r1
    5e44:	a30a      	add	r3, pc, #40	; (adr r3, 5e70 <sched_after_mstr_free_offset_get+0x80>)
    5e46:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e4a:	f7fa fa0d 	bl	268 <__aeabi_uldivmod>
    5e4e:	6823      	ldr	r3, [r4, #0]
    5e50:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    5e52:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    5e54:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    5e56:	db05      	blt.n	5e64 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    5e58:	f240 40e2 	movw	r0, #1250	; 0x4e2
    5e5c:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    5e5e:	6823      	ldr	r3, [r4, #0]
    5e60:	4283      	cmp	r3, r0
    5e62:	d801      	bhi.n	5e68 <sched_after_mstr_free_offset_get+0x78>
}
    5e64:	b004      	add	sp, #16
    5e66:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    5e68:	1a1b      	subs	r3, r3, r0
    5e6a:	6023      	str	r3, [r4, #0]
    5e6c:	e7f7      	b.n	5e5e <sched_after_mstr_free_offset_get+0x6e>
    5e6e:	bf00      	nop
    5e70:	3b9aca00 	.word	0x3b9aca00
    5e74:	00000000 	.word	0x00000000
    5e78:	0000bda7 	.word	0x0000bda7
    5e7c:	0000c71e 	.word	0x0000c71e
    5e80:	0000c693 	.word	0x0000c693
    5e84:	0000db68 	.word	0x0000db68
    5e88:	0000d131 	.word	0x0000d131
    5e8c:	1afd498d 	.word	0x1afd498d

00005e90 <mayfly_sched_win_offset_use>:
{
    5e90:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5e92:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    5e96:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5e98:	6f82      	ldr	r2, [r0, #120]	; 0x78
    5e9a:	68c1      	ldr	r1, [r0, #12]
    5e9c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    5e9e:	f7ff ffa7 	bl	5df0 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5ea2:	a902      	add	r1, sp, #8
    5ea4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5ea6:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5ea8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    5eac:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5eb0:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5eb2:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5eb6:	f7fa fb92 	bl	5de <memcpy>
}
    5eba:	b002      	add	sp, #8
    5ebc:	bd10      	pop	{r4, pc}
	...

00005ec0 <ticker_stop_adv_stop>:
{
    5ec0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5ec2:	4c52      	ldr	r4, [pc, #328]	; (600c <ticker_stop_adv_stop+0x14c>)
	if (status != TICKER_STATUS_SUCCESS) {
    5ec4:	b190      	cbz	r0, 5eec <ticker_stop_adv_stop+0x2c>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    5ec6:	7ca3      	ldrb	r3, [r4, #18]
    5ec8:	2b05      	cmp	r3, #5
    5eca:	f000 809c 	beq.w	6006 <ticker_stop_adv_stop+0x146>
    5ece:	4b50      	ldr	r3, [pc, #320]	; (6010 <ticker_stop_adv_stop+0x150>)
    5ed0:	4a50      	ldr	r2, [pc, #320]	; (6014 <ticker_stop_adv_stop+0x154>)
    5ed2:	4951      	ldr	r1, [pc, #324]	; (6018 <ticker_stop_adv_stop+0x158>)
    5ed4:	4851      	ldr	r0, [pc, #324]	; (601c <ticker_stop_adv_stop+0x15c>)
    5ed6:	e9cd 3300 	strd	r3, r3, [sp]
    5eda:	4b51      	ldr	r3, [pc, #324]	; (6020 <ticker_stop_adv_stop+0x160>)
		LL_ASSERT(_radio.ticker_id_prepare);
    5edc:	f7fb f9fa 	bl	12d4 <printk>
    5ee0:	4040      	eors	r0, r0
    5ee2:	f380 8811 	msr	BASEPRI, r0
    5ee6:	f04f 0004 	mov.w	r0, #4
    5eea:	df02      	svc	2
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    5eec:	7c23      	ldrb	r3, [r4, #16]
    5eee:	2b05      	cmp	r3, #5
    5ef0:	d002      	beq.n	5ef8 <ticker_stop_adv_stop+0x38>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    5ef2:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    5ef4:	2b05      	cmp	r3, #5
    5ef6:	d16d      	bne.n	5fd4 <ticker_stop_adv_stop+0x114>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    5ef8:	ab04      	add	r3, sp, #16
    5efa:	2202      	movs	r2, #2
    5efc:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f00:	2200      	movs	r2, #0
    5f02:	9300      	str	r3, [sp, #0]
    5f04:	2101      	movs	r1, #1
    5f06:	4b47      	ldr	r3, [pc, #284]	; (6024 <ticker_stop_adv_stop+0x164>)
    5f08:	4610      	mov	r0, r2
    5f0a:	f7fe f835 	bl	3f78 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    5f0e:	2802      	cmp	r0, #2
    5f10:	d00d      	beq.n	5f2e <ticker_stop_adv_stop+0x6e>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    5f12:	9802      	ldr	r0, [sp, #8]
    5f14:	b1c0      	cbz	r0, 5f48 <ticker_stop_adv_stop+0x88>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    5f16:	9802      	ldr	r0, [sp, #8]
    5f18:	2801      	cmp	r0, #1
    5f1a:	d16c      	bne.n	5ff6 <ticker_stop_adv_stop+0x136>
		if (_radio.role != ROLE_NONE) {
    5f1c:	7ce3      	ldrb	r3, [r4, #19]
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d058      	beq.n	5fd4 <ticker_stop_adv_stop+0x114>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    5f22:	4b41      	ldr	r3, [pc, #260]	; (6028 <ticker_stop_adv_stop+0x168>)
    5f24:	2204      	movs	r2, #4
    5f26:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    5f28:	2200      	movs	r2, #0
    5f2a:	4611      	mov	r1, r2
    5f2c:	e04e      	b.n	5fcc <ticker_stop_adv_stop+0x10c>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    5f2e:	2201      	movs	r2, #1
    5f30:	4611      	mov	r1, r2
    5f32:	4610      	mov	r0, r2
    5f34:	f7fd f9b4 	bl	32a0 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    5f38:	9b02      	ldr	r3, [sp, #8]
    5f3a:	2b02      	cmp	r3, #2
    5f3c:	d1e9      	bne.n	5f12 <ticker_stop_adv_stop+0x52>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f3e:	2101      	movs	r1, #1
    5f40:	2000      	movs	r0, #0
    5f42:	f7fe f8cb 	bl	40dc <ticker_job_sched>
    5f46:	e7f7      	b.n	5f38 <ticker_stop_adv_stop+0x78>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    5f48:	2302      	movs	r3, #2
    5f4a:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    5f4c:	7c23      	ldrb	r3, [r4, #16]
    5f4e:	b93b      	cbnz	r3, 5f60 <ticker_stop_adv_stop+0xa0>
    5f50:	4b2f      	ldr	r3, [pc, #188]	; (6010 <ticker_stop_adv_stop+0x150>)
    5f52:	4a30      	ldr	r2, [pc, #192]	; (6014 <ticker_stop_adv_stop+0x154>)
    5f54:	4930      	ldr	r1, [pc, #192]	; (6018 <ticker_stop_adv_stop+0x158>)
    5f56:	4835      	ldr	r0, [pc, #212]	; (602c <ticker_stop_adv_stop+0x16c>)
    5f58:	e9cd 3300 	strd	r3, r3, [sp]
    5f5c:	4b34      	ldr	r3, [pc, #208]	; (6030 <ticker_stop_adv_stop+0x170>)
    5f5e:	e7bd      	b.n	5edc <ticker_stop_adv_stop+0x1c>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f60:	ab03      	add	r3, sp, #12
    5f62:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    5f64:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f66:	4611      	mov	r1, r2
    5f68:	9300      	str	r3, [sp, #0]
    5f6a:	4b2e      	ldr	r3, [pc, #184]	; (6024 <ticker_stop_adv_stop+0x164>)
    5f6c:	f7fe f804 	bl	3f78 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    5f70:	2802      	cmp	r0, #2
    5f72:	d015      	beq.n	5fa0 <ticker_stop_adv_stop+0xe0>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    5f74:	9a03      	ldr	r2, [sp, #12]
    5f76:	b302      	cbz	r2, 5fba <ticker_stop_adv_stop+0xfa>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    5f78:	9c03      	ldr	r4, [sp, #12]
    5f7a:	2c01      	cmp	r4, #1
    5f7c:	d13b      	bne.n	5ff6 <ticker_stop_adv_stop+0x136>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    5f7e:	2200      	movs	r2, #0
    5f80:	4611      	mov	r1, r2
    5f82:	4b2c      	ldr	r3, [pc, #176]	; (6034 <ticker_stop_adv_stop+0x174>)
    5f84:	4620      	mov	r0, r4
    5f86:	f7fd f9b3 	bl	32f0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5f8a:	4602      	mov	r2, r0
    5f8c:	2800      	cmp	r0, #0
    5f8e:	d030      	beq.n	5ff2 <ticker_stop_adv_stop+0x132>
			LL_ASSERT(!ret);
    5f90:	4b1f      	ldr	r3, [pc, #124]	; (6010 <ticker_stop_adv_stop+0x150>)
    5f92:	4a20      	ldr	r2, [pc, #128]	; (6014 <ticker_stop_adv_stop+0x154>)
    5f94:	4920      	ldr	r1, [pc, #128]	; (6018 <ticker_stop_adv_stop+0x158>)
    5f96:	4828      	ldr	r0, [pc, #160]	; (6038 <ticker_stop_adv_stop+0x178>)
    5f98:	e9cd 3300 	strd	r3, r3, [sp]
    5f9c:	4b24      	ldr	r3, [pc, #144]	; (6030 <ticker_stop_adv_stop+0x170>)
    5f9e:	e79d      	b.n	5edc <ticker_stop_adv_stop+0x1c>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    5fa0:	2201      	movs	r2, #1
    5fa2:	4611      	mov	r1, r2
    5fa4:	4610      	mov	r0, r2
    5fa6:	f7fd f97b 	bl	32a0 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    5faa:	9b03      	ldr	r3, [sp, #12]
    5fac:	2b02      	cmp	r3, #2
    5fae:	d1e1      	bne.n	5f74 <ticker_stop_adv_stop+0xb4>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5fb0:	2101      	movs	r1, #1
    5fb2:	2000      	movs	r0, #0
    5fb4:	f7fe f892 	bl	40dc <ticker_job_sched>
    5fb8:	e7f7      	b.n	5faa <ticker_stop_adv_stop+0xea>
			u32_t ticks_xtal_to_start =
    5fba:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    5fbc:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    5fbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    5fc2:	428b      	cmp	r3, r1
    5fc4:	d215      	bcs.n	5ff2 <ticker_stop_adv_stop+0x132>
				ret = mayfly_enqueue(
    5fc6:	4b1b      	ldr	r3, [pc, #108]	; (6034 <ticker_stop_adv_stop+0x174>)
				ret = mayfly_enqueue(
    5fc8:	4611      	mov	r1, r2
    5fca:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    5fcc:	f7fd f990 	bl	32f0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5fd0:	2800      	cmp	r0, #0
    5fd2:	d1dd      	bne.n	5f90 <ticker_stop_adv_stop+0xd0>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    5fd4:	2200      	movs	r2, #0
    5fd6:	4b19      	ldr	r3, [pc, #100]	; (603c <ticker_stop_adv_stop+0x17c>)
    5fd8:	4611      	mov	r1, r2
    5fda:	2001      	movs	r0, #1
    5fdc:	f7fd f988 	bl	32f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    5fe0:	b188      	cbz	r0, 6006 <ticker_stop_adv_stop+0x146>
    5fe2:	4b0b      	ldr	r3, [pc, #44]	; (6010 <ticker_stop_adv_stop+0x150>)
    5fe4:	4a0b      	ldr	r2, [pc, #44]	; (6014 <ticker_stop_adv_stop+0x154>)
    5fe6:	490c      	ldr	r1, [pc, #48]	; (6018 <ticker_stop_adv_stop+0x158>)
    5fe8:	4815      	ldr	r0, [pc, #84]	; (6040 <ticker_stop_adv_stop+0x180>)
    5fea:	e9cd 3300 	strd	r3, r3, [sp]
    5fee:	4b0c      	ldr	r3, [pc, #48]	; (6020 <ticker_stop_adv_stop+0x160>)
    5ff0:	e774      	b.n	5edc <ticker_stop_adv_stop+0x1c>
				ret = mayfly_enqueue(
    5ff2:	4b14      	ldr	r3, [pc, #80]	; (6044 <ticker_stop_adv_stop+0x184>)
    5ff4:	e7e8      	b.n	5fc8 <ticker_stop_adv_stop+0x108>
		LL_ASSERT(0);
    5ff6:	4b06      	ldr	r3, [pc, #24]	; (6010 <ticker_stop_adv_stop+0x150>)
    5ff8:	4a06      	ldr	r2, [pc, #24]	; (6014 <ticker_stop_adv_stop+0x154>)
    5ffa:	4907      	ldr	r1, [pc, #28]	; (6018 <ticker_stop_adv_stop+0x158>)
    5ffc:	4812      	ldr	r0, [pc, #72]	; (6048 <ticker_stop_adv_stop+0x188>)
    5ffe:	e9cd 3300 	strd	r3, r3, [sp]
    6002:	4b0b      	ldr	r3, [pc, #44]	; (6030 <ticker_stop_adv_stop+0x170>)
    6004:	e76a      	b.n	5edc <ticker_stop_adv_stop+0x1c>
}
    6006:	b004      	add	sp, #16
    6008:	bd10      	pop	{r4, pc}
    600a:	bf00      	nop
    600c:	20000930 	.word	0x20000930
    6010:	0000bda7 	.word	0x0000bda7
    6014:	0000c71e 	.word	0x0000c71e
    6018:	0000c693 	.word	0x0000c693
    601c:	0000dc66 	.word	0x0000dc66
    6020:	0000d1db 	.word	0x0000d1db
    6024:	00004f25 	.word	0x00004f25
    6028:	20003820 	.word	0x20003820
    602c:	0000da5c 	.word	0x0000da5c
    6030:	0000d1bf 	.word	0x0000d1bf
    6034:	200037f0 	.word	0x200037f0
    6038:	0000dac6 	.word	0x0000dac6
    603c:	200037c0 	.word	0x200037c0
    6040:	0000d83d 	.word	0x0000d83d
    6044:	20003890 	.word	0x20003890
    6048:	0000c669 	.word	0x0000c669

0000604c <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    604c:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    604e:	4c16      	ldr	r4, [pc, #88]	; (60a8 <isr_scan_tgta_check.isra.30+0x5c>)
    6050:	7803      	ldrb	r3, [r0, #0]
    6052:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
			BDADDR_SIZE) == 0))) ||
    6056:	09db      	lsrs	r3, r3, #7
    6058:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    605c:	4605      	mov	r5, r0
    605e:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    6060:	d007      	beq.n	6072 <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6062:	f894 00e1 	ldrb.w	r0, [r4, #225]	; 0xe1
    6066:	f3c0 1001 	ubfx	r0, r0, #4, #2
    606a:	f010 0002 	ands.w	r0, r0, #2
    606e:	d10b      	bne.n	6088 <isr_scan_tgta_check.isra.30+0x3c>
}
    6070:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    6072:	f100 0108 	add.w	r1, r0, #8
    6076:	2206      	movs	r2, #6
    6078:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
    607c:	f7fa fa9f 	bl	5be <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6080:	2800      	cmp	r0, #0
    6082:	d1ee      	bne.n	6062 <isr_scan_tgta_check.isra.30+0x16>
			BDADDR_SIZE) == 0))) ||
    6084:	2001      	movs	r0, #1
    6086:	e7f3      	b.n	6070 <isr_scan_tgta_check.isra.30+0x24>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6088:	f995 3000 	ldrsb.w	r3, [r5]
    608c:	2b00      	cmp	r3, #0
    608e:	da09      	bge.n	60a4 <isr_scan_tgta_check.isra.30+0x58>
	    (pdu->rx_addr != 0) &&
    6090:	7b6b      	ldrb	r3, [r5, #13]
    6092:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6096:	2b40      	cmp	r3, #64	; 0x40
    6098:	d104      	bne.n	60a4 <isr_scan_tgta_check.isra.30+0x58>
		if (dir_report) {
    609a:	2e00      	cmp	r6, #0
    609c:	d0f2      	beq.n	6084 <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    609e:	2001      	movs	r0, #1
    60a0:	7030      	strb	r0, [r6, #0]
    60a2:	e7e5      	b.n	6070 <isr_scan_tgta_check.isra.30+0x24>
			BDADDR_SIZE) == 0))) ||
    60a4:	2000      	movs	r0, #0
    60a6:	e7e3      	b.n	6070 <isr_scan_tgta_check.isra.30+0x24>
    60a8:	20000930 	.word	0x20000930

000060ac <mayfly_adv_stop>:
{
    60ac:	b513      	push	{r0, r1, r4, lr}
	node_rx = packet_rx_reserve_get(1);
    60ae:	2001      	movs	r0, #1
    60b0:	f7fe ff62 	bl	4f78 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    60b4:	4604      	mov	r4, r0
    60b6:	b970      	cbnz	r0, 60d6 <mayfly_adv_stop+0x2a>
    60b8:	4b0f      	ldr	r3, [pc, #60]	; (60f8 <mayfly_adv_stop+0x4c>)
    60ba:	4a10      	ldr	r2, [pc, #64]	; (60fc <mayfly_adv_stop+0x50>)
    60bc:	4910      	ldr	r1, [pc, #64]	; (6100 <mayfly_adv_stop+0x54>)
    60be:	4811      	ldr	r0, [pc, #68]	; (6104 <mayfly_adv_stop+0x58>)
    60c0:	e9cd 3300 	strd	r3, r3, [sp]
    60c4:	4b10      	ldr	r3, [pc, #64]	; (6108 <mayfly_adv_stop+0x5c>)
    60c6:	f7fb f905 	bl	12d4 <printk>
    60ca:	4040      	eors	r0, r0
    60cc:	f380 8811 	msr	BASEPRI, r0
    60d0:	f04f 0004 	mov.w	r0, #4
    60d4:	df02      	svc	2
	node_rx->hdr.handle = 0xffff;
    60d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    60da:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    60dc:	2306      	movs	r3, #6
    60de:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    60e0:	2210      	movs	r2, #16
    60e2:	2100      	movs	r1, #0
    60e4:	300b      	adds	r0, #11
    60e6:	f7fa faa7 	bl	638 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    60ea:	233c      	movs	r3, #60	; 0x3c
    60ec:	72e3      	strb	r3, [r4, #11]
}
    60ee:	b002      	add	sp, #8
    60f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    60f4:	f7ff ba58 	b.w	55a8 <packet_rx_enqueue>
    60f8:	0000bda7 	.word	0x0000bda7
    60fc:	0000c71e 	.word	0x0000c71e
    6100:	0000c693 	.word	0x0000c693
    6104:	0000d769 	.word	0x0000d769
    6108:	0000d1af 	.word	0x0000d1af

0000610c <terminate_ind_rx_enqueue>:
{
    610c:	b513      	push	{r0, r1, r4, lr}
    610e:	4603      	mov	r3, r0
    6110:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    6112:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    6116:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    611a:	b970      	cbnz	r0, 613a <terminate_ind_rx_enqueue+0x2e>
    611c:	4b16      	ldr	r3, [pc, #88]	; (6178 <terminate_ind_rx_enqueue+0x6c>)
    611e:	4a17      	ldr	r2, [pc, #92]	; (617c <terminate_ind_rx_enqueue+0x70>)
    6120:	4917      	ldr	r1, [pc, #92]	; (6180 <terminate_ind_rx_enqueue+0x74>)
    6122:	4818      	ldr	r0, [pc, #96]	; (6184 <terminate_ind_rx_enqueue+0x78>)
    6124:	e9cd 3300 	strd	r3, r3, [sp]
    6128:	4b17      	ldr	r3, [pc, #92]	; (6188 <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    612a:	f7fb f8d3 	bl	12d4 <printk>
    612e:	4040      	eors	r0, r0
    6130:	f380 8811 	msr	BASEPRI, r0
    6134:	f04f 0004 	mov.w	r0, #4
    6138:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    613a:	8c1c      	ldrh	r4, [r3, #32]
    613c:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    6140:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6144:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    6146:	4a11      	ldr	r2, [pc, #68]	; (618c <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    6148:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    614c:	f892 4170 	ldrb.w	r4, [r2, #368]	; 0x170
    6150:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    6154:	f502 72a4 	add.w	r2, r2, #328	; 0x148
    6158:	f7fd f85c 	bl	3214 <memq_enqueue>
	LL_ASSERT(link);
    615c:	b938      	cbnz	r0, 616e <terminate_ind_rx_enqueue+0x62>
    615e:	4b06      	ldr	r3, [pc, #24]	; (6178 <terminate_ind_rx_enqueue+0x6c>)
    6160:	4a06      	ldr	r2, [pc, #24]	; (617c <terminate_ind_rx_enqueue+0x70>)
    6162:	4907      	ldr	r1, [pc, #28]	; (6180 <terminate_ind_rx_enqueue+0x74>)
    6164:	480a      	ldr	r0, [pc, #40]	; (6190 <terminate_ind_rx_enqueue+0x84>)
    6166:	e9cd 3300 	strd	r3, r3, [sp]
    616a:	4b07      	ldr	r3, [pc, #28]	; (6188 <terminate_ind_rx_enqueue+0x7c>)
    616c:	e7dd      	b.n	612a <terminate_ind_rx_enqueue+0x1e>
}
    616e:	b002      	add	sp, #8
    6170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    6174:	f003 bae2 	b.w	973c <radio_event_callback>
    6178:	0000bda7 	.word	0x0000bda7
    617c:	0000c71e 	.word	0x0000c71e
    6180:	0000c693 	.word	0x0000c693
    6184:	0000dbee 	.word	0x0000dbee
    6188:	0000d2a1 	.word	0x0000d2a1
    618c:	20000930 	.word	0x20000930
    6190:	0000d90d 	.word	0x0000d90d

00006194 <isr_rx_scan_report.isra.36>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    6194:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6196:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    6198:	2003      	movs	r0, #3
    619a:	f7fe feed 	bl	4f78 <packet_rx_reserve_get>
	if (node_rx == 0) {
    619e:	4604      	mov	r4, r0
    61a0:	2800      	cmp	r0, #0
    61a2:	d032      	beq.n	620a <isr_rx_scan_report.isra.36+0x76>
	node_rx->hdr.handle = 0xffff;
    61a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    61a8:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    61aa:	4b19      	ldr	r3, [pc, #100]	; (6210 <isr_rx_scan_report.isra.36+0x7c>)
    61ac:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
    61b0:	075a      	lsls	r2, r3, #29
    61b2:	d026      	beq.n	6202 <isr_rx_scan_report.isra.36+0x6e>
		switch (_radio.scanner.phy) {
    61b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    61b8:	b2da      	uxtb	r2, r3
    61ba:	2a01      	cmp	r2, #1
    61bc:	d010      	beq.n	61e0 <isr_rx_scan_report.isra.36+0x4c>
    61be:	2a04      	cmp	r2, #4
    61c0:	d00f      	beq.n	61e2 <isr_rx_scan_report.isra.36+0x4e>
			LL_ASSERT(0);
    61c2:	4b14      	ldr	r3, [pc, #80]	; (6214 <isr_rx_scan_report.isra.36+0x80>)
    61c4:	4a14      	ldr	r2, [pc, #80]	; (6218 <isr_rx_scan_report.isra.36+0x84>)
    61c6:	4915      	ldr	r1, [pc, #84]	; (621c <isr_rx_scan_report.isra.36+0x88>)
    61c8:	4815      	ldr	r0, [pc, #84]	; (6220 <isr_rx_scan_report.isra.36+0x8c>)
    61ca:	e9cd 3300 	strd	r3, r3, [sp]
    61ce:	4b15      	ldr	r3, [pc, #84]	; (6224 <isr_rx_scan_report.isra.36+0x90>)
    61d0:	f7fb f880 	bl	12d4 <printk>
    61d4:	4040      	eors	r0, r0
    61d6:	f380 8811 	msr	BASEPRI, r0
    61da:	f04f 0004 	mov.w	r0, #4
    61de:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    61e0:	2303      	movs	r3, #3
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    61e2:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    61e4:	f104 0508 	add.w	r5, r4, #8
			     pdu_adv_rx->len] =
    61e8:	b16e      	cbz	r6, 6206 <isr_rx_scan_report.isra.36+0x72>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    61ea:	f004 f89f 	bl	a32c <radio_rssi_get>
			     pdu_adv_rx->len] =
    61ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    61f2:	7a63      	ldrb	r3, [r4, #9]
    61f4:	441d      	add	r5, r3
    61f6:	70a8      	strb	r0, [r5, #2]
	packet_rx_enqueue();
    61f8:	f7ff f9d6 	bl	55a8 <packet_rx_enqueue>
	return 0;
    61fc:	2000      	movs	r0, #0
}
    61fe:	b002      	add	sp, #8
    6200:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6202:	2302      	movs	r3, #2
    6204:	e7ed      	b.n	61e2 <isr_rx_scan_report.isra.36+0x4e>
			     pdu_adv_rx->len] =
    6206:	207f      	movs	r0, #127	; 0x7f
    6208:	e7f3      	b.n	61f2 <isr_rx_scan_report.isra.36+0x5e>
		return 1;
    620a:	2001      	movs	r0, #1
    620c:	e7f7      	b.n	61fe <isr_rx_scan_report.isra.36+0x6a>
    620e:	bf00      	nop
    6210:	20000930 	.word	0x20000930
    6214:	0000bda7 	.word	0x0000bda7
    6218:	0000c71e 	.word	0x0000c71e
    621c:	0000c693 	.word	0x0000c693
    6220:	0000c669 	.word	0x0000c669
    6224:	0000cf89 	.word	0x0000cf89

00006228 <prepare_normal_set>:
{
    6228:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    622a:	6804      	ldr	r4, [r0, #0]
    622c:	2c00      	cmp	r4, #0
{
    622e:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    6230:	da26      	bge.n	6280 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    6232:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    6236:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    623a:	429d      	cmp	r5, r3
    623c:	bf34      	ite	cc
    623e:	1ae4      	subcc	r4, r4, r3
    6240:	1b64      	subcs	r4, r4, r5
		ticker_status =
    6242:	4b10      	ldr	r3, [pc, #64]	; (6284 <prepare_normal_set+0x5c>)
    6244:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6246:	b2a4      	uxth	r4, r4
		ticker_status =
    6248:	2300      	movs	r3, #0
    624a:	9006      	str	r0, [sp, #24]
    624c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    6250:	e9cd 4301 	strd	r4, r3, [sp, #4]
    6254:	4618      	mov	r0, r3
    6256:	9400      	str	r4, [sp, #0]
    6258:	f7fd fe44 	bl	3ee4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    625c:	f030 0302 	bics.w	r3, r0, #2
    6260:	d00e      	beq.n	6280 <prepare_normal_set+0x58>
    6262:	4b09      	ldr	r3, [pc, #36]	; (6288 <prepare_normal_set+0x60>)
    6264:	4a09      	ldr	r2, [pc, #36]	; (628c <prepare_normal_set+0x64>)
    6266:	490a      	ldr	r1, [pc, #40]	; (6290 <prepare_normal_set+0x68>)
    6268:	480a      	ldr	r0, [pc, #40]	; (6294 <prepare_normal_set+0x6c>)
    626a:	e9cd 3300 	strd	r3, r3, [sp]
    626e:	4b0a      	ldr	r3, [pc, #40]	; (6298 <prepare_normal_set+0x70>)
    6270:	f7fb f830 	bl	12d4 <printk>
    6274:	4040      	eors	r0, r0
    6276:	f380 8811 	msr	BASEPRI, r0
    627a:	f04f 0004 	mov.w	r0, #4
    627e:	df02      	svc	2
}
    6280:	b009      	add	sp, #36	; 0x24
    6282:	bd30      	pop	{r4, r5, pc}
    6284:	00004f35 	.word	0x00004f35
    6288:	0000bda7 	.word	0x0000bda7
    628c:	0000c71e 	.word	0x0000c71e
    6290:	0000c693 	.word	0x0000c693
    6294:	0000d317 	.word	0x0000d317
    6298:	0000d0e9 	.word	0x0000d0e9
    629c:	00000000 	.word	0x00000000

000062a0 <mayfly_xtal_stop_calc>:
{
    62a0:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
    62a4:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    62a6:	2302      	movs	r3, #2
    62a8:	9309      	str	r3, [sp, #36]	; 0x24
	struct connection *conn_curr = NULL;
    62aa:	2300      	movs	r3, #0
	struct connection *conn_next = NULL;
    62ac:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
	ticker_id_next = 0xff;
    62b0:	22ff      	movs	r2, #255	; 0xff
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    62b2:	4e7f      	ldr	r6, [pc, #508]	; (64b0 <mayfly_xtal_stop_calc+0x210>)
				    _radio.connection_count));
    62b4:	4d7f      	ldr	r5, [pc, #508]	; (64b4 <mayfly_xtal_stop_calc+0x214>)
	ticker_id_next = 0xff;
    62b6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
{
    62ba:	4604      	mov	r4, r0
	ticks_to_expire = 0;
    62bc:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    62be:	ab09      	add	r3, sp, #36	; 0x24
    62c0:	e9cd 6301 	strd	r6, r3, [sp, #4]
    62c4:	ab0c      	add	r3, sp, #48	; 0x30
    62c6:	9300      	str	r3, [sp, #0]
    62c8:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    62cc:	ab0d      	add	r3, sp, #52	; 0x34
    62ce:	2101      	movs	r1, #1
    62d0:	2000      	movs	r0, #0
    62d2:	f7fd fe8b 	bl	3fec <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    62d6:	2802      	cmp	r0, #2
    62d8:	d014      	beq.n	6304 <mayfly_xtal_stop_calc+0x64>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    62da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    62dc:	b1b3      	cbz	r3, 630c <mayfly_xtal_stop_calc+0x6c>
    62de:	4b76      	ldr	r3, [pc, #472]	; (64b8 <mayfly_xtal_stop_calc+0x218>)
    62e0:	4a76      	ldr	r2, [pc, #472]	; (64bc <mayfly_xtal_stop_calc+0x21c>)
    62e2:	4977      	ldr	r1, [pc, #476]	; (64c0 <mayfly_xtal_stop_calc+0x220>)
    62e4:	4877      	ldr	r0, [pc, #476]	; (64c4 <mayfly_xtal_stop_calc+0x224>)
    62e6:	e9cd 3300 	strd	r3, r3, [sp]
    62ea:	4b77      	ldr	r3, [pc, #476]	; (64c8 <mayfly_xtal_stop_calc+0x228>)
	LL_ASSERT(hdr_curr);
    62ec:	f7fa fff2 	bl	12d4 <printk>
    62f0:	4040      	eors	r0, r0
    62f2:	f380 8811 	msr	BASEPRI, r0
    62f6:	f04f 0004 	mov.w	r0, #4
    62fa:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    62fc:	2101      	movs	r1, #1
    62fe:	2000      	movs	r0, #0
    6300:	f7fd feec 	bl	40dc <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    6304:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6306:	2b02      	cmp	r3, #2
    6308:	d0f8      	beq.n	62fc <mayfly_xtal_stop_calc+0x5c>
    630a:	e7e6      	b.n	62da <mayfly_xtal_stop_calc+0x3a>
	} while (ticker_id_next != TICKER_NULL &&
    630c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    6310:	2bff      	cmp	r3, #255	; 0xff
    6312:	d004      	beq.n	631e <mayfly_xtal_stop_calc+0x7e>
    6314:	f895 2110 	ldrb.w	r2, [r5, #272]	; 0x110
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    6318:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    631a:	4293      	cmp	r3, r2
    631c:	dacf      	bge.n	62be <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
    631e:	1f5a      	subs	r2, r3, #5
    6320:	b2d2      	uxtb	r2, r2
    6322:	2af9      	cmp	r2, #249	; 0xf9
    6324:	d805      	bhi.n	6332 <mayfly_xtal_stop_calc+0x92>
				_radio.connection_count))) {
    6326:	4a63      	ldr	r2, [pc, #396]	; (64b4 <mayfly_xtal_stop_calc+0x214>)
    6328:	f892 2110 	ldrb.w	r2, [r2, #272]	; 0x110
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    632c:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    632e:	4293      	cmp	r3, r2
    6330:	db06      	blt.n	6340 <mayfly_xtal_stop_calc+0xa0>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    6332:	2100      	movs	r1, #0
    6334:	2001      	movs	r0, #1
    6336:	f7ff f82b 	bl	5390 <mayfly_xtal_retain>
}
    633a:	b00f      	add	sp, #60	; 0x3c
    633c:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    6340:	a90a      	add	r1, sp, #40	; 0x28
    6342:	b2e0      	uxtb	r0, r4
    6344:	f7ff fa72 	bl	582c <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    6348:	b938      	cbnz	r0, 635a <mayfly_xtal_stop_calc+0xba>
    634a:	4b5b      	ldr	r3, [pc, #364]	; (64b8 <mayfly_xtal_stop_calc+0x218>)
    634c:	4a5b      	ldr	r2, [pc, #364]	; (64bc <mayfly_xtal_stop_calc+0x21c>)
    634e:	495c      	ldr	r1, [pc, #368]	; (64c0 <mayfly_xtal_stop_calc+0x220>)
    6350:	485e      	ldr	r0, [pc, #376]	; (64cc <mayfly_xtal_stop_calc+0x22c>)
    6352:	e9cd 3300 	strd	r3, r3, [sp]
    6356:	4b5c      	ldr	r3, [pc, #368]	; (64c8 <mayfly_xtal_stop_calc+0x228>)
    6358:	e7c8      	b.n	62ec <mayfly_xtal_stop_calc+0x4c>
    635a:	e9d0 3400 	ldrd	r3, r4, [r0]
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    635e:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    6360:	bfb8      	it	lt
    6362:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    6364:	429c      	cmp	r4, r3
    6366:	bf38      	it	cc
    6368:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    636a:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    636c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    6370:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    6372:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    6374:	f7ff fa5a 	bl	582c <hdr_conn_get>
	LL_ASSERT(hdr_next);
    6378:	4605      	mov	r5, r0
    637a:	b938      	cbnz	r0, 638c <mayfly_xtal_stop_calc+0xec>
    637c:	4b4e      	ldr	r3, [pc, #312]	; (64b8 <mayfly_xtal_stop_calc+0x218>)
    637e:	4a4f      	ldr	r2, [pc, #316]	; (64bc <mayfly_xtal_stop_calc+0x21c>)
    6380:	494f      	ldr	r1, [pc, #316]	; (64c0 <mayfly_xtal_stop_calc+0x220>)
    6382:	4853      	ldr	r0, [pc, #332]	; (64d0 <mayfly_xtal_stop_calc+0x230>)
    6384:	e9cd 3300 	strd	r3, r3, [sp]
    6388:	4b4f      	ldr	r3, [pc, #316]	; (64c8 <mayfly_xtal_stop_calc+0x228>)
    638a:	e7af      	b.n	62ec <mayfly_xtal_stop_calc+0x4c>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    638c:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    6390:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    6392:	429e      	cmp	r6, r3
    6394:	bf38      	it	cc
    6396:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    6398:	2a00      	cmp	r2, #0
    639a:	da05      	bge.n	63a8 <mayfly_xtal_stop_calc+0x108>
		ticks_to_expire -=
    639c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    639e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    63a2:	4433      	add	r3, r6
    63a4:	1a9b      	subs	r3, r3, r2
    63a6:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    63a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    63aa:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    63ae:	4293      	cmp	r3, r2
    63b0:	d20a      	bcs.n	63c8 <mayfly_xtal_stop_calc+0x128>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    63b2:	2100      	movs	r1, #0
    63b4:	2001      	movs	r0, #1
    63b6:	f7fe ffeb 	bl	5390 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    63ba:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    63be:	2101      	movs	r1, #1
    63c0:	4628      	mov	r0, r5
    63c2:	f7ff ff31 	bl	6228 <prepare_normal_set>
    63c6:	e7b8      	b.n	633a <mayfly_xtal_stop_calc+0x9a>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    63c8:	2101      	movs	r1, #1
    63ca:	4608      	mov	r0, r1
    63cc:	f7fe ffe0 	bl	5390 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    63d0:	682b      	ldr	r3, [r5, #0]
    63d2:	2b00      	cmp	r3, #0
    63d4:	db1c      	blt.n	6410 <mayfly_xtal_stop_calc+0x170>
    63d6:	42b3      	cmp	r3, r6
    63d8:	d91a      	bls.n	6410 <mayfly_xtal_stop_calc+0x170>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    63da:	1b9b      	subs	r3, r3, r6
			ticker_status =
    63dc:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    63de:	b29b      	uxth	r3, r3
			ticker_status =
    63e0:	493c      	ldr	r1, [pc, #240]	; (64d4 <mayfly_xtal_stop_calc+0x234>)
    63e2:	9105      	str	r1, [sp, #20]
    63e4:	e9cd 0301 	strd	r0, r3, [sp, #4]
    63e8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    63ec:	9506      	str	r5, [sp, #24]
    63ee:	e9cd 0003 	strd	r0, r0, [sp, #12]
    63f2:	9000      	str	r0, [sp, #0]
    63f4:	2101      	movs	r1, #1
    63f6:	f7fd fd75 	bl	3ee4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    63fa:	f030 0302 	bics.w	r3, r0, #2
    63fe:	d007      	beq.n	6410 <mayfly_xtal_stop_calc+0x170>
    6400:	4b2d      	ldr	r3, [pc, #180]	; (64b8 <mayfly_xtal_stop_calc+0x218>)
    6402:	4a2e      	ldr	r2, [pc, #184]	; (64bc <mayfly_xtal_stop_calc+0x21c>)
    6404:	492e      	ldr	r1, [pc, #184]	; (64c0 <mayfly_xtal_stop_calc+0x220>)
    6406:	4834      	ldr	r0, [pc, #208]	; (64d8 <mayfly_xtal_stop_calc+0x238>)
    6408:	e9cd 3300 	strd	r3, r3, [sp]
    640c:	4b2e      	ldr	r3, [pc, #184]	; (64c8 <mayfly_xtal_stop_calc+0x228>)
    640e:	e76d      	b.n	62ec <mayfly_xtal_stop_calc+0x4c>
		if (!conn_curr || !conn_next) {
    6410:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    6412:	2e00      	cmp	r6, #0
    6414:	d091      	beq.n	633a <mayfly_xtal_stop_calc+0x9a>
    6416:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    6418:	2d00      	cmp	r5, #0
    641a:	d08e      	beq.n	633a <mayfly_xtal_stop_calc+0x9a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    641c:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    641e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    6420:	429a      	cmp	r2, r3
    6422:	d18a      	bne.n	633a <mayfly_xtal_stop_calc+0x9a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    6424:	482d      	ldr	r0, [pc, #180]	; (64dc <mayfly_xtal_stop_calc+0x23c>)
    6426:	fa1f fb82 	uxth.w	fp, r2
    642a:	fbab 0100 	umull	r0, r1, fp, r0
    642e:	f240 1323 	movw	r3, #291	; 0x123
    6432:	fb03 110b 	mla	r1, r3, fp, r1
    6436:	a31c      	add	r3, pc, #112	; (adr r3, 64a8 <mayfly_xtal_stop_calc+0x208>)
    6438:	e9d3 2300 	ldrd	r2, r3, [r3]
    643c:	f7f9 ff14 	bl	268 <__aeabi_uldivmod>
    6440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6442:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    6446:	2200      	movs	r2, #0
    6448:	4283      	cmp	r3, r0
    644a:	d818      	bhi.n	647e <mayfly_xtal_stop_calc+0x1de>
    644c:	b102      	cbz	r2, 6450 <mayfly_xtal_stop_calc+0x1b0>
    644e:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    6450:	f996 101d 	ldrsb.w	r1, [r6, #29]
    6454:	f995 201d 	ldrsb.w	r2, [r5, #29]
    6458:	2900      	cmp	r1, #0
    645a:	da13      	bge.n	6484 <mayfly_xtal_stop_calc+0x1e4>
    645c:	2a00      	cmp	r2, #0
    645e:	f6ff af6c 	blt.w	633a <mayfly_xtal_stop_calc+0x9a>
			     (ticks_slot_abs +
    6462:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    6464:	42a3      	cmp	r3, r4
    6466:	f4bf af68 	bcs.w	633a <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_curr);
    646a:	4630      	mov	r0, r6
    646c:	f7fe fda0 	bl	4fb0 <conn_update_req>
				if (status == 2) {
    6470:	2802      	cmp	r0, #2
    6472:	f47f af62 	bne.w	633a <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_next);
    6476:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    6478:	f7fe fd9a 	bl	4fb0 <conn_update_req>
    647c:	e75d      	b.n	633a <mayfly_xtal_stop_calc+0x9a>
				ticks_to_expire -= ticks_conn_interval;
    647e:	1a1b      	subs	r3, r3, r0
    6480:	2201      	movs	r2, #1
    6482:	e7e1      	b.n	6448 <mayfly_xtal_stop_calc+0x1a8>
			} else if (!conn_curr->role && conn_next->role &&
    6484:	2a00      	cmp	r2, #0
    6486:	f6bf af58 	bge.w	633a <mayfly_xtal_stop_calc+0x9a>
				    (ticks_slot_abs +
    648a:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    648c:	42a3      	cmp	r3, r4
    648e:	f4bf af54 	bcs.w	633a <mayfly_xtal_stop_calc+0x9a>
				status = conn_update_req(conn_next);
    6492:	4628      	mov	r0, r5
    6494:	f7fe fd8c 	bl	4fb0 <conn_update_req>
				if (status == 2) {
    6498:	2802      	cmp	r0, #2
    649a:	f47f af4e 	bne.w	633a <mayfly_xtal_stop_calc+0x9a>
					conn_update_req(conn_curr);
    649e:	980a      	ldr	r0, [sp, #40]	; 0x28
    64a0:	e7ea      	b.n	6478 <mayfly_xtal_stop_calc+0x1d8>
    64a2:	bf00      	nop
    64a4:	f3af 8000 	nop.w
    64a8:	1afd498d 	.word	0x1afd498d
    64ac:	00000007 	.word	0x00000007
    64b0:	00004f25 	.word	0x00004f25
    64b4:	20000930 	.word	0x20000930
    64b8:	0000bda7 	.word	0x0000bda7
    64bc:	0000c71e 	.word	0x0000c71e
    64c0:	0000c693 	.word	0x0000c693
    64c4:	0000dbc1 	.word	0x0000dbc1
    64c8:	0000d0fc 	.word	0x0000d0fc
    64cc:	0000d866 	.word	0x0000d866
    64d0:	0000d890 	.word	0x0000d890
    64d4:	00004f29 	.word	0x00004f29
    64d8:	0000d317 	.word	0x0000d317
    64dc:	09ce5400 	.word	0x09ce5400

000064e0 <preempt_calc>:
{
    64e0:	b570      	push	{r4, r5, r6, lr}
    64e2:	4614      	mov	r4, r2
    64e4:	460e      	mov	r6, r1
    64e6:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    64e8:	f7fd fe0e 	bl	4108 <ticker_ticks_now_get>
	u32_t diff =
    64ec:	4621      	mov	r1, r4
    64ee:	f7fd fe0d 	bl	410c <ticker_ticks_diff_get>
	diff += 3;
    64f2:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    64f4:	2c09      	cmp	r4, #9
    64f6:	d90f      	bls.n	6518 <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    64f8:	2100      	movs	r1, #0
    64fa:	4608      	mov	r0, r1
    64fc:	f7fe ff48 	bl	5390 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6500:	4632      	mov	r2, r6
    6502:	2100      	movs	r1, #0
    6504:	4628      	mov	r0, r5
    6506:	f7ff fe8f 	bl	6228 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    650a:	68ab      	ldr	r3, [r5, #8]
    650c:	441c      	add	r4, r3
		if (diff <
    650e:	2c26      	cmp	r4, #38	; 0x26
    6510:	d800      	bhi.n	6514 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    6512:	60ac      	str	r4, [r5, #8]
		return 1;
    6514:	2001      	movs	r0, #1
    6516:	e000      	b.n	651a <preempt_calc+0x3a>
	return 0;
    6518:	2000      	movs	r0, #0
}
    651a:	bd70      	pop	{r4, r5, r6, pc}

0000651c <adv_scan_configure.constprop.46>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    651c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    651e:	ad02      	add	r5, sp, #8
    6520:	4b10      	ldr	r3, [pc, #64]	; (6564 <adv_scan_configure.constprop.46+0x48>)
    6522:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    6526:	4604      	mov	r4, r0
	radio_reset();
    6528:	f003 fdc4 	bl	a0b4 <radio_reset>
	radio_tx_power_set(0);
    652c:	2000      	movs	r0, #0
    652e:	f003 fdeb 	bl	a108 <radio_tx_power_set>
	radio_isr_set(isr);
    6532:	480d      	ldr	r0, [pc, #52]	; (6568 <adv_scan_configure.constprop.46+0x4c>)
    6534:	f003 fd88 	bl	a048 <radio_isr_set>
	radio_phy_set(phy, flags);
    6538:	2101      	movs	r1, #1
    653a:	4620      	mov	r0, r4
    653c:	f003 fdd4 	bl	a0e8 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    6540:	4628      	mov	r0, r5
    6542:	f003 fdff 	bl	a144 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    6546:	0062      	lsls	r2, r4, #1
    6548:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    654c:	2125      	movs	r1, #37	; 0x25
    654e:	2008      	movs	r0, #8
    6550:	f003 fe10 	bl	a174 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6554:	4905      	ldr	r1, [pc, #20]	; (656c <adv_scan_configure.constprop.46+0x50>)
    6556:	f240 605b 	movw	r0, #1627	; 0x65b
    655a:	f003 fe9b 	bl	a294 <radio_crc_configure>
}
    655e:	b003      	add	sp, #12
    6560:	bd30      	pop	{r4, r5, pc}
    6562:	bf00      	nop
    6564:	8e89bed6 	.word	0x8e89bed6
    6568:	00007641 	.word	0x00007641
    656c:	00555555 	.word	0x00555555

00006570 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    6570:	4b36      	ldr	r3, [pc, #216]	; (664c <event_adv+0xdc>)
    6572:	7cda      	ldrb	r2, [r3, #19]
{
    6574:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6576:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6578:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    657c:	461c      	mov	r4, r3
    657e:	b172      	cbz	r2, 659e <event_adv+0x2e>
    6580:	4b33      	ldr	r3, [pc, #204]	; (6650 <event_adv+0xe0>)
    6582:	4a34      	ldr	r2, [pc, #208]	; (6654 <event_adv+0xe4>)
    6584:	4934      	ldr	r1, [pc, #208]	; (6658 <event_adv+0xe8>)
    6586:	4835      	ldr	r0, [pc, #212]	; (665c <event_adv+0xec>)
    6588:	e9cd 3300 	strd	r3, r3, [sp]
    658c:	4b34      	ldr	r3, [pc, #208]	; (6660 <event_adv+0xf0>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    658e:	f7fa fea1 	bl	12d4 <printk>
    6592:	4040      	eors	r0, r0
    6594:	f380 8811 	msr	BASEPRI, r0
    6598:	f04f 0004 	mov.w	r0, #4
    659c:	df02      	svc	2
    659e:	7c1b      	ldrb	r3, [r3, #16]
    65a0:	b2db      	uxtb	r3, r3
    65a2:	2b05      	cmp	r3, #5
    65a4:	d007      	beq.n	65b6 <event_adv+0x46>
    65a6:	4b2a      	ldr	r3, [pc, #168]	; (6650 <event_adv+0xe0>)
    65a8:	4a2a      	ldr	r2, [pc, #168]	; (6654 <event_adv+0xe4>)
    65aa:	492b      	ldr	r1, [pc, #172]	; (6658 <event_adv+0xe8>)
    65ac:	482d      	ldr	r0, [pc, #180]	; (6664 <event_adv+0xf4>)
    65ae:	e9cd 3300 	strd	r3, r3, [sp]
    65b2:	4b2b      	ldr	r3, [pc, #172]	; (6660 <event_adv+0xf0>)
    65b4:	e7eb      	b.n	658e <event_adv+0x1e>
	_radio.ticks_anchor = ticks_at_expire;
    65b6:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    65b8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    65bc:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    65be:	f000 0007 	and.w	r0, r0, #7
	_radio.role = ROLE_ADV;
    65c2:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    65c4:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    65c6:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    65c8:	f7ff ffa8 	bl	651c <adv_scan_configure.constprop.46>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    65cc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    65d0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    65d4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    65d8:	f363 0202 	bfi	r2, r3, #0, #3
    65dc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    65e0:	f7ff fbae 	bl	5d40 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    65e4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    65e8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    65ec:	d007      	beq.n	65fe <event_adv+0x8e>
		struct ll_filter *wl = ctrl_filter_get(true);
    65ee:	4630      	mov	r0, r6
    65f0:	f003 fb42 	bl	9c78 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    65f4:	1c82      	adds	r2, r0, #2
    65f6:	7841      	ldrb	r1, [r0, #1]
    65f8:	7800      	ldrb	r0, [r0, #0]
    65fa:	f003 feaf 	bl	a35c <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    65fe:	68e2      	ldr	r2, [r4, #12]
    6600:	f105 0109 	add.w	r1, r5, #9
    6604:	2001      	movs	r0, #1
    6606:	f003 feff 	bl	a408 <radio_tmr_start>
	radio_tmr_end_capture();
    660a:	f003 ffcd 	bl	a5a8 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    660e:	462a      	mov	r2, r5
    6610:	2105      	movs	r1, #5
    6612:	4815      	ldr	r0, [pc, #84]	; (6668 <event_adv+0xf8>)
    6614:	f7ff ff64 	bl	64e0 <preempt_calc>
    6618:	4603      	mov	r3, r0
    661a:	b130      	cbz	r0, 662a <event_adv+0xba>
		_radio.state = STATE_STOP;
    661c:	2304      	movs	r3, #4
    661e:	7523      	strb	r3, [r4, #20]
}
    6620:	b002      	add	sp, #8
    6622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6626:	f003 bdf9 	b.w	a21c <radio_disable>
		ticker_status =
    662a:	4a10      	ldr	r2, [pc, #64]	; (666c <event_adv+0xfc>)
    662c:	4601      	mov	r1, r0
    662e:	f7fd fd1b 	bl	4068 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6632:	f030 0302 	bics.w	r3, r0, #2
    6636:	d007      	beq.n	6648 <event_adv+0xd8>
    6638:	4b05      	ldr	r3, [pc, #20]	; (6650 <event_adv+0xe0>)
    663a:	4a06      	ldr	r2, [pc, #24]	; (6654 <event_adv+0xe4>)
    663c:	4906      	ldr	r1, [pc, #24]	; (6658 <event_adv+0xe8>)
    663e:	480c      	ldr	r0, [pc, #48]	; (6670 <event_adv+0x100>)
    6640:	e9cd 3300 	strd	r3, r3, [sp]
    6644:	4b06      	ldr	r3, [pc, #24]	; (6660 <event_adv+0xf0>)
    6646:	e7a2      	b.n	658e <event_adv+0x1e>
}
    6648:	b002      	add	sp, #8
    664a:	bd70      	pop	{r4, r5, r6, pc}
    664c:	20000930 	.word	0x20000930
    6650:	0000bda7 	.word	0x0000bda7
    6654:	0000c71e 	.word	0x0000c71e
    6658:	0000c693 	.word	0x0000c693
    665c:	0000d3a4 	.word	0x0000d3a4
    6660:	0000d1a5 	.word	0x0000d1a5
    6664:	0000d365 	.word	0x0000d365
    6668:	20000948 	.word	0x20000948
    666c:	00005815 	.word	0x00005815
    6670:	0000d317 	.word	0x0000d317

00006674 <event_stop.constprop.47>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    6674:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    6676:	4b05      	ldr	r3, [pc, #20]	; (668c <event_stop.constprop.47+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6678:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    667a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    667c:	4611      	mov	r1, r2
    667e:	4610      	mov	r0, r2
    6680:	f7fc fe36 	bl	32f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6684:	b108      	cbz	r0, 668a <event_stop.constprop.47+0x16>
    6686:	f7ff f8ef 	bl	5868 <event_stop.part.13>
}
    668a:	bd08      	pop	{r3, pc}
    668c:	20003810 	.word	0x20003810

00006690 <event_common_prepare>:
{
    6690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    6694:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    6696:	681d      	ldr	r5, [r3, #0]
{
    6698:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    669a:	2c00      	cmp	r4, #0
{
    669c:	4681      	mov	r9, r0
    669e:	910b      	str	r1, [sp, #44]	; 0x2c
    66a0:	4690      	mov	r8, r2
    66a2:	469b      	mov	fp, r3
    66a4:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    66a8:	da03      	bge.n	66b2 <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    66aa:	9c16      	ldr	r4, [sp, #88]	; 0x58
    66ac:	42ac      	cmp	r4, r5
    66ae:	bf38      	it	cc
    66b0:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    66b2:	42ac      	cmp	r4, r5
    66b4:	4f56      	ldr	r7, [pc, #344]	; (6810 <event_common_prepare+0x180>)
    66b6:	d924      	bls.n	6702 <event_common_prepare+0x72>
		ticker_status =
    66b8:	f241 538b 	movw	r3, #5515	; 0x158b
    66bc:	e9cd 7307 	strd	r7, r3, [sp, #28]
    66c0:	4b54      	ldr	r3, [pc, #336]	; (6814 <event_common_prepare+0x184>)
    66c2:	2100      	movs	r1, #0
    66c4:	e9cd 1304 	strd	r1, r3, [sp, #16]
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    66c8:	1b63      	subs	r3, r4, r5
		ticker_status =
    66ca:	9300      	str	r3, [sp, #0]
    66cc:	9106      	str	r1, [sp, #24]
    66ce:	464b      	mov	r3, r9
    66d0:	e9cd 1102 	strd	r1, r1, [sp, #8]
    66d4:	9101      	str	r1, [sp, #4]
    66d6:	2201      	movs	r2, #1
    66d8:	4608      	mov	r0, r1
    66da:	f7fd fbb9 	bl	3e50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    66de:	f030 0302 	bics.w	r3, r0, #2
    66e2:	d034      	beq.n	674e <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    66e4:	4b4c      	ldr	r3, [pc, #304]	; (6818 <event_common_prepare+0x188>)
    66e6:	4a4d      	ldr	r2, [pc, #308]	; (681c <event_common_prepare+0x18c>)
    66e8:	494d      	ldr	r1, [pc, #308]	; (6820 <event_common_prepare+0x190>)
    66ea:	484e      	ldr	r0, [pc, #312]	; (6824 <event_common_prepare+0x194>)
    66ec:	e9cd 3300 	strd	r3, r3, [sp]
    66f0:	4b4d      	ldr	r3, [pc, #308]	; (6828 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    66f2:	f7fa fdef 	bl	12d4 <printk>
    66f6:	4040      	eors	r0, r0
    66f8:	f380 8811 	msr	BASEPRI, r0
    66fc:	f04f 0004 	mov.w	r0, #4
    6700:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    6702:	d21d      	bcs.n	6740 <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    6704:	2300      	movs	r3, #0
    6706:	461a      	mov	r2, r3
    6708:	4619      	mov	r1, r3
    670a:	4618      	mov	r0, r3
    670c:	f7ff f8c6 	bl	589c <event_active>
		ticker_status =
    6710:	f44f 53ad 	mov.w	r3, #5536	; 0x15a0
    6714:	e9cd 7307 	strd	r7, r3, [sp, #28]
    6718:	4b44      	ldr	r3, [pc, #272]	; (682c <event_common_prepare+0x19c>)
    671a:	2100      	movs	r1, #0
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    671c:	1b2c      	subs	r4, r5, r4
		ticker_status =
    671e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    6722:	9106      	str	r1, [sp, #24]
    6724:	464b      	mov	r3, r9
    6726:	e9cd 1102 	strd	r1, r1, [sp, #8]
    672a:	e9cd 4100 	strd	r4, r1, [sp]
    672e:	2201      	movs	r2, #1
    6730:	4608      	mov	r0, r1
    6732:	f7fd fb8d 	bl	3e50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6736:	f030 0302 	bics.w	r3, r0, #2
    673a:	d1d3      	bne.n	66e4 <event_common_prepare+0x54>
    673c:	462c      	mov	r4, r5
    673e:	e00b      	b.n	6758 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    6740:	2300      	movs	r3, #0
    6742:	461a      	mov	r2, r3
    6744:	4619      	mov	r1, r3
    6746:	4618      	mov	r0, r3
    6748:	f7ff f8a8 	bl	589c <event_active>
		event_xtal(0, 0, 0, NULL);
    674c:	2300      	movs	r3, #0
    674e:	461a      	mov	r2, r3
    6750:	4619      	mov	r1, r3
    6752:	4618      	mov	r0, r3
    6754:	f7ff f8c8 	bl	58e8 <event_xtal>
	_radio.remainder_anchor = remainder;
    6758:	4e35      	ldr	r6, [pc, #212]	; (6830 <event_common_prepare+0x1a0>)
    675a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    675c:	60f3      	str	r3, [r6, #12]
	ticker_status =
    675e:	f241 53b8 	movw	r3, #5560	; 0x15b8
    6762:	e9cd 7307 	strd	r7, r3, [sp, #28]
    6766:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6768:	9306      	str	r3, [sp, #24]
    676a:	2200      	movs	r2, #0
    676c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    676e:	9305      	str	r3, [sp, #20]
    6770:	e9cd 2203 	strd	r2, r2, [sp, #12]
    6774:	464b      	mov	r3, r9
    6776:	e9cd 2201 	strd	r2, r2, [sp, #4]
    677a:	9400      	str	r4, [sp, #0]
    677c:	4611      	mov	r1, r2
    677e:	4610      	mov	r0, r2
    6780:	f7fd fb66 	bl	3e50 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6784:	f030 0302 	bics.w	r3, r0, #2
    6788:	d1ac      	bne.n	66e4 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    678a:	2005      	movs	r0, #5
    678c:	f7ff ff72 	bl	6674 <event_stop.constprop.47>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    6790:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
    6794:	42ab      	cmp	r3, r5
    6796:	d023      	beq.n	67e0 <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    6798:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    679c:	f8d8 3000 	ldr.w	r3, [r8]
    67a0:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    67a2:	bfbc      	itt	lt
    67a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    67a8:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    67ac:	f8d6 217c 	ldr.w	r2, [r6, #380]	; 0x17c
    67b0:	f8d8 1000 	ldr.w	r1, [r8]
    67b4:	428a      	cmp	r2, r1
    67b6:	bf38      	it	cc
    67b8:	460a      	movcc	r2, r1
		ticker_status =
    67ba:	f241 51e8 	movw	r1, #5608	; 0x15e8
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    67be:	b2a3      	uxth	r3, r4
    67c0:	b292      	uxth	r2, r2
		ticker_status =
    67c2:	e9cd 7105 	strd	r7, r1, [sp, #20]
    67c6:	2100      	movs	r1, #0
    67c8:	e9cd 2301 	strd	r2, r3, [sp, #4]
    67cc:	9200      	str	r2, [sp, #0]
    67ce:	e9cd 1103 	strd	r1, r1, [sp, #12]
    67d2:	4652      	mov	r2, sl
    67d4:	4608      	mov	r0, r1
    67d6:	f7fd fb85 	bl	3ee4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    67da:	f030 0302 	bics.w	r3, r0, #2
    67de:	d181      	bne.n	66e4 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    67e0:	20ff      	movs	r0, #255	; 0xff
    67e2:	f7ff f96f 	bl	5ac4 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    67e6:	4b13      	ldr	r3, [pc, #76]	; (6834 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    67e8:	2201      	movs	r2, #1
    67ea:	4611      	mov	r1, r2
    67ec:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    67ee:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    67f2:	f7fc fd7d 	bl	32f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    67f6:	b138      	cbz	r0, 6808 <event_common_prepare+0x178>
    67f8:	4b07      	ldr	r3, [pc, #28]	; (6818 <event_common_prepare+0x188>)
    67fa:	4a08      	ldr	r2, [pc, #32]	; (681c <event_common_prepare+0x18c>)
    67fc:	4908      	ldr	r1, [pc, #32]	; (6820 <event_common_prepare+0x190>)
    67fe:	480e      	ldr	r0, [pc, #56]	; (6838 <event_common_prepare+0x1a8>)
    6800:	e9cd 3300 	strd	r3, r3, [sp]
    6804:	4b08      	ldr	r3, [pc, #32]	; (6828 <event_common_prepare+0x198>)
    6806:	e774      	b.n	66f2 <event_common_prepare+0x62>
}
    6808:	b00d      	add	sp, #52	; 0x34
    680a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    680e:	bf00      	nop
    6810:	00005675 	.word	0x00005675
    6814:	0000589d 	.word	0x0000589d
    6818:	0000bda7 	.word	0x0000bda7
    681c:	0000c71e 	.word	0x0000c71e
    6820:	0000c693 	.word	0x0000c693
    6824:	0000d317 	.word	0x0000d317
    6828:	0000d16f 	.word	0x0000d16f
    682c:	000058e9 	.word	0x000058e9
    6830:	20000930 	.word	0x20000930
    6834:	200038b0 	.word	0x200038b0
    6838:	0000d83d 	.word	0x0000d83d

0000683c <radio_event_adv_prepare>:
{
    683c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    683e:	4a11      	ldr	r2, [pc, #68]	; (6884 <radio_event_adv_prepare+0x48>)
    6840:	7c13      	ldrb	r3, [r2, #16]
    6842:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    6846:	b173      	cbz	r3, 6866 <radio_event_adv_prepare+0x2a>
    6848:	4b0f      	ldr	r3, [pc, #60]	; (6888 <radio_event_adv_prepare+0x4c>)
    684a:	4a10      	ldr	r2, [pc, #64]	; (688c <radio_event_adv_prepare+0x50>)
    684c:	4910      	ldr	r1, [pc, #64]	; (6890 <radio_event_adv_prepare+0x54>)
    684e:	4811      	ldr	r0, [pc, #68]	; (6894 <radio_event_adv_prepare+0x58>)
    6850:	e9cd 3300 	strd	r3, r3, [sp]
    6854:	4b10      	ldr	r3, [pc, #64]	; (6898 <radio_event_adv_prepare+0x5c>)
    6856:	f7fa fd3d 	bl	12d4 <printk>
    685a:	4040      	eors	r0, r0
    685c:	f380 8811 	msr	BASEPRI, r0
    6860:	f04f 0004 	mov.w	r0, #4
    6864:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    6866:	2305      	movs	r3, #5
    6868:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    686a:	9403      	str	r4, [sp, #12]
    686c:	4c0b      	ldr	r4, [pc, #44]	; (689c <radio_event_adv_prepare+0x60>)
    686e:	e9cd 3401 	strd	r3, r4, [sp, #4]
    6872:	6a13      	ldr	r3, [r2, #32]
    6874:	9300      	str	r3, [sp, #0]
    6876:	f102 031c 	add.w	r3, r2, #28
    687a:	3218      	adds	r2, #24
    687c:	f7ff ff08 	bl	6690 <event_common_prepare>
}
    6880:	b004      	add	sp, #16
    6882:	bd10      	pop	{r4, pc}
    6884:	20000930 	.word	0x20000930
    6888:	0000bda7 	.word	0x0000bda7
    688c:	0000c71e 	.word	0x0000c71e
    6890:	0000c693 	.word	0x0000c693
    6894:	0000d978 	.word	0x0000d978
    6898:	0000d18d 	.word	0x0000d18d
    689c:	00006571 	.word	0x00006571

000068a0 <event_adv_stop>:
{
    68a0:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    68a2:	2005      	movs	r0, #5
    68a4:	f7ff fee6 	bl	6674 <event_stop.constprop.47>
	ticker_status =
    68a8:	f641 03ac 	movw	r3, #6316	; 0x18ac
    68ac:	2100      	movs	r1, #0
    68ae:	9300      	str	r3, [sp, #0]
    68b0:	2205      	movs	r2, #5
    68b2:	4b0c      	ldr	r3, [pc, #48]	; (68e4 <event_adv_stop+0x44>)
    68b4:	4608      	mov	r0, r1
    68b6:	f7fd fb5f 	bl	3f78 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    68ba:	f030 0302 	bics.w	r3, r0, #2
    68be:	d00e      	beq.n	68de <event_adv_stop+0x3e>
    68c0:	4b09      	ldr	r3, [pc, #36]	; (68e8 <event_adv_stop+0x48>)
    68c2:	4a0a      	ldr	r2, [pc, #40]	; (68ec <event_adv_stop+0x4c>)
    68c4:	490a      	ldr	r1, [pc, #40]	; (68f0 <event_adv_stop+0x50>)
    68c6:	480b      	ldr	r0, [pc, #44]	; (68f4 <event_adv_stop+0x54>)
    68c8:	e9cd 3300 	strd	r3, r3, [sp]
    68cc:	4b0a      	ldr	r3, [pc, #40]	; (68f8 <event_adv_stop+0x58>)
    68ce:	f7fa fd01 	bl	12d4 <printk>
    68d2:	4040      	eors	r0, r0
    68d4:	f380 8811 	msr	BASEPRI, r0
    68d8:	f04f 0004 	mov.w	r0, #4
    68dc:	df02      	svc	2
}
    68de:	b003      	add	sp, #12
    68e0:	f85d fb04 	ldr.w	pc, [sp], #4
    68e4:	00005ec1 	.word	0x00005ec1
    68e8:	0000bda7 	.word	0x0000bda7
    68ec:	0000c71e 	.word	0x0000c71e
    68f0:	0000c693 	.word	0x0000c693
    68f4:	0000d317 	.word	0x0000d317
    68f8:	0000d1f0 	.word	0x0000d1f0

000068fc <packet_rx_allocate.constprop.48>:
static void packet_rx_allocate(u8_t max)
    68fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    6900:	4d21      	ldr	r5, [pc, #132]	; (6988 <packet_rx_allocate.constprop.48+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    6902:	f895 413a 	ldrb.w	r4, [r5, #314]	; 0x13a
	if (acquire == _radio.packet_rx_count) {
    6906:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
	if (max > _radio.link_rx_data_quota) {
    690a:	f895 914c 	ldrb.w	r9, [r5, #332]	; 0x14c
	acquire = _radio.packet_rx_acquire + 1;
    690e:	3401      	adds	r4, #1
    6910:	b2e4      	uxtb	r4, r4
		acquire = 0;
    6912:	42a3      	cmp	r3, r4
    6914:	bf08      	it	eq
    6916:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    6918:	f505 77a0 	add.w	r7, r5, #320	; 0x140
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    691c:	f505 7894 	add.w	r8, r5, #296	; 0x128
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    6920:	f1b9 0f00 	cmp.w	r9, #0
    6924:	d003      	beq.n	692e <packet_rx_allocate.constprop.48+0x32>
    6926:	f895 3139 	ldrb.w	r3, [r5, #313]	; 0x139
    692a:	429c      	cmp	r4, r3
    692c:	d101      	bne.n	6932 <packet_rx_allocate.constprop.48+0x36>
}
    692e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    6932:	4638      	mov	r0, r7
    6934:	f7fc fc26 	bl	3184 <mem_acquire>
		if (!link) {
    6938:	4606      	mov	r6, r0
    693a:	2800      	cmp	r0, #0
    693c:	d0f7      	beq.n	692e <packet_rx_allocate.constprop.48+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    693e:	4640      	mov	r0, r8
    6940:	f7fc fc20 	bl	3184 <mem_acquire>
		if (!node_rx) {
    6944:	b928      	cbnz	r0, 6952 <packet_rx_allocate.constprop.48+0x56>
			mem_release(link, &_radio.link_rx_free);
    6946:	4630      	mov	r0, r6
    6948:	4910      	ldr	r1, [pc, #64]	; (698c <packet_rx_allocate.constprop.48+0x90>)
}
    694a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    694e:	f7fc bc32 	b.w	31b6 <mem_release>
		node_rx->hdr.onion.link = link;
    6952:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    6954:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
    6958:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    695c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    6960:	f885 413a 	strb.w	r4, [r5, #314]	; 0x13a
		if (acquire == _radio.packet_rx_count) {
    6964:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
		acquire = _radio.packet_rx_acquire + 1;
    6968:	3401      	adds	r4, #1
    696a:	b2e4      	uxtb	r4, r4
			acquire = 0;
    696c:	42a3      	cmp	r3, r4
    696e:	bf08      	it	eq
    6970:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    6972:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    6976:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    697a:	3b01      	subs	r3, #1
    697c:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
    6980:	fa5f f989 	uxtb.w	r9, r9
    6984:	e7cc      	b.n	6920 <packet_rx_allocate.constprop.48+0x24>
    6986:	bf00      	nop
    6988:	20000930 	.word	0x20000930
    698c:	20000a70 	.word	0x20000a70

00006990 <common_init>:
{
    6990:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    6992:	4c31      	ldr	r4, [pc, #196]	; (6a58 <common_init+0xc8>)
    6994:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    6998:	2a00      	cmp	r2, #0
    699a:	d040      	beq.n	6a1e <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    699c:	f504 7386 	add.w	r3, r4, #268	; 0x10c
    69a0:	f44f 7182 	mov.w	r1, #260	; 0x104
    69a4:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    69a8:	f7fc fbc8 	bl	313c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    69ac:	4b2b      	ldr	r3, [pc, #172]	; (6a5c <common_init+0xcc>)
    69ae:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
    69b2:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    69b6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    69ba:	f7fc fbbf 	bl	313c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    69be:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
    69c2:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    69c6:	4b26      	ldr	r3, [pc, #152]	; (6a60 <common_init+0xd0>)
    69c8:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    69cc:	440a      	add	r2, r1
    69ce:	2108      	movs	r1, #8
    69d0:	f7fc fbb4 	bl	313c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    69d4:	4b23      	ldr	r3, [pc, #140]	; (6a64 <common_init+0xd4>)
    69d6:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    69da:	2202      	movs	r2, #2
    69dc:	2124      	movs	r1, #36	; 0x24
    69de:	f7fc fbad 	bl	313c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    69e2:	f894 216c 	ldrb.w	r2, [r4, #364]	; 0x16c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    69e6:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    69ea:	4b1f      	ldr	r3, [pc, #124]	; (6a68 <common_init+0xd8>)
    69ec:	f8b4 1160 	ldrh.w	r1, [r4, #352]	; 0x160
    69f0:	3a01      	subs	r2, #1
    69f2:	b292      	uxth	r2, r2
    69f4:	f7fc fba2 	bl	313c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    69f8:	4819      	ldr	r0, [pc, #100]	; (6a60 <common_init+0xd0>)
    69fa:	f7fc fbc3 	bl	3184 <mem_acquire>
	LL_ASSERT(link);
    69fe:	b988      	cbnz	r0, 6a24 <common_init+0x94>
    6a00:	4b1a      	ldr	r3, [pc, #104]	; (6a6c <common_init+0xdc>)
    6a02:	4a1b      	ldr	r2, [pc, #108]	; (6a70 <common_init+0xe0>)
    6a04:	491b      	ldr	r1, [pc, #108]	; (6a74 <common_init+0xe4>)
    6a06:	481c      	ldr	r0, [pc, #112]	; (6a78 <common_init+0xe8>)
    6a08:	e9cd 3300 	strd	r3, r3, [sp]
    6a0c:	4b1b      	ldr	r3, [pc, #108]	; (6a7c <common_init+0xec>)
    6a0e:	f7fa fc61 	bl	12d4 <printk>
    6a12:	4040      	eors	r0, r0
    6a14:	f380 8811 	msr	BASEPRI, r0
    6a18:	f04f 0004 	mov.w	r0, #4
    6a1c:	df02      	svc	2
		_radio.conn_free = NULL;
    6a1e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
    6a22:	e7c3      	b.n	69ac <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    6a24:	4a16      	ldr	r2, [pc, #88]	; (6a80 <common_init+0xf0>)
    6a26:	1f11      	subs	r1, r2, #4
    6a28:	f7fc fbf1 	bl	320e <memq_init>
	_radio.advertiser.chan_map = 0x07;
    6a2c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6a30:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    6a34:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    6a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6a3c:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_map[1] = 0xFF;
    6a40:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	_radio.data_chan_map[3] = 0xFF;
    6a44:	f242 531f 	movw	r3, #9503	; 0x251f
    6a48:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
}
    6a4c:	b002      	add	sp, #8
    6a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    6a52:	f7ff bf53 	b.w	68fc <packet_rx_allocate.constprop.48>
    6a56:	bf00      	nop
    6a58:	20000930 	.word	0x20000930
    6a5c:	20000a58 	.word	0x20000a58
    6a60:	20000a70 	.word	0x20000a70
    6a64:	20000a84 	.word	0x20000a84
    6a68:	20000a8c 	.word	0x20000a8c
    6a6c:	0000bda7 	.word	0x0000bda7
    6a70:	0000c71e 	.word	0x0000c71e
    6a74:	0000c693 	.word	0x0000c693
    6a78:	0000d90d 	.word	0x0000d90d
    6a7c:	0000cf5f 	.word	0x0000cf5f
    6a80:	20000a78 	.word	0x20000a78

00006a84 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    6a84:	4b02      	ldr	r3, [pc, #8]	; (6a90 <mayfly_xtal_start+0xc>)
    6a86:	6818      	ldr	r0, [r3, #0]
    6a88:	6843      	ldr	r3, [r0, #4]
    6a8a:	2100      	movs	r1, #0
    6a8c:	681b      	ldr	r3, [r3, #0]
    6a8e:	4718      	bx	r3
    6a90:	20000930 	.word	0x20000930

00006a94 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    6a94:	4b02      	ldr	r3, [pc, #8]	; (6aa0 <mayfly_xtal_stop+0xc>)
    6a96:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    6a98:	6843      	ldr	r3, [r0, #4]
    6a9a:	2100      	movs	r1, #0
    6a9c:	685b      	ldr	r3, [r3, #4]
    6a9e:	4718      	bx	r3
    6aa0:	20000930 	.word	0x20000930

00006aa4 <chan_sel_2>:
{
    6aa4:	b4f0      	push	{r4, r5, r6, r7}
	prn_e = counter ^ chan_id;
    6aa6:	4048      	eors	r0, r1
    6aa8:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6aaa:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    6aae:	2608      	movs	r6, #8
	o = 0;
    6ab0:	2400      	movs	r4, #0
		o |= (i & 1);
    6ab2:	f00c 0501 	and.w	r5, ip, #1
    6ab6:	3e01      	subs	r6, #1
    6ab8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    6abc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    6ac0:	b2ec      	uxtb	r4, r5
		i >>= 1;
    6ac2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    6ac6:	d1f4      	bne.n	6ab2 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6ac8:	0225      	lsls	r5, r4, #8
    6aca:	b22d      	sxth	r5, r5
    6acc:	b2c0      	uxtb	r0, r0
    6ace:	f04f 0c08 	mov.w	ip, #8
	o = 0;
    6ad2:	4634      	mov	r4, r6
		o |= (i & 1);
    6ad4:	f000 0601 	and.w	r6, r0, #1
    6ad8:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    6adc:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    6ae0:	f016 0cff 	ands.w	ip, r6, #255	; 0xff
		o |= (i & 1);
    6ae4:	b2e4      	uxtb	r4, r4
		i >>= 1;
    6ae6:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    6aea:	d1f3      	bne.n	6ad4 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6aec:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6aee:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    6af2:	3f01      	subs	r7, #1
    6af4:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    6af6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6afa:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    6afc:	d1d5      	bne.n	6aaa <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    6afe:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    6b00:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    6b02:	fbb1 f0f4 	udiv	r0, r1, r4
    6b06:	fb04 1010 	mls	r0, r4, r0, r1
    6b0a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6b0c:	08c4      	lsrs	r4, r0, #3
    6b0e:	f000 0507 	and.w	r5, r0, #7
    6b12:	5d14      	ldrb	r4, [r2, r4]
    6b14:	412c      	asrs	r4, r5
    6b16:	07e4      	lsls	r4, r4, #31
    6b18:	d405      	bmi.n	6b26 <chan_sel_2+0x82>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    6b1a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    6b1c:	0c09      	lsrs	r1, r1, #16
    6b1e:	4610      	mov	r0, r2
}
    6b20:	bcf0      	pop	{r4, r5, r6, r7}
		chan_next = chan_sel_remap(chan_map, chan_index);
    6b22:	f7fe ba0d 	b.w	4f40 <chan_sel_remap>
}
    6b26:	bcf0      	pop	{r4, r5, r6, r7}
    6b28:	4770      	bx	lr
	...

00006b2c <connection_configure>:
{
    6b2c:	b510      	push	{r4, lr}
    6b2e:	4604      	mov	r4, r0
	radio_reset();
    6b30:	f003 fac0 	bl	a0b4 <radio_reset>
	radio_tx_power_set(0);
    6b34:	2000      	movs	r0, #0
    6b36:	f003 fae7 	bl	a108 <radio_tx_power_set>
	radio_isr_set(isr);
    6b3a:	480a      	ldr	r0, [pc, #40]	; (6b64 <connection_configure+0x38>)
    6b3c:	f003 fa84 	bl	a048 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    6b40:	f104 0010 	add.w	r0, r4, #16
    6b44:	f003 fafe 	bl	a144 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    6b48:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    6b4a:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    6b4c:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    6b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    6b52:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6b54:	f240 605b 	movw	r0, #1627	; 0x65b
    6b58:	4319      	orrs	r1, r3
}
    6b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6b5e:	f003 bb99 	b.w	a294 <radio_crc_configure>
    6b62:	bf00      	nop
    6b64:	00007641 	.word	0x00007641

00006b68 <event_slave>:
{
    6b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6b6c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6b6e:	4b64      	ldr	r3, [pc, #400]	; (6d00 <event_slave+0x198>)
    6b70:	7cda      	ldrb	r2, [r3, #19]
{
    6b72:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6b74:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    6b78:	461d      	mov	r5, r3
    6b7a:	b172      	cbz	r2, 6b9a <event_slave+0x32>
    6b7c:	4b61      	ldr	r3, [pc, #388]	; (6d04 <event_slave+0x19c>)
    6b7e:	4a62      	ldr	r2, [pc, #392]	; (6d08 <event_slave+0x1a0>)
    6b80:	4962      	ldr	r1, [pc, #392]	; (6d0c <event_slave+0x1a4>)
    6b82:	4863      	ldr	r0, [pc, #396]	; (6d10 <event_slave+0x1a8>)
    6b84:	e9cd 3300 	strd	r3, r3, [sp]
    6b88:	4b62      	ldr	r3, [pc, #392]	; (6d14 <event_slave+0x1ac>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    6b8a:	f7fa fba3 	bl	12d4 <printk>
    6b8e:	4040      	eors	r0, r0
    6b90:	f380 8811 	msr	BASEPRI, r0
    6b94:	f04f 0004 	mov.w	r0, #4
    6b98:	df02      	svc	2
    6b9a:	7c1a      	ldrb	r2, [r3, #16]
    6b9c:	8c23      	ldrh	r3, [r4, #32]
    6b9e:	b2d2      	uxtb	r2, r2
    6ba0:	3307      	adds	r3, #7
    6ba2:	429a      	cmp	r2, r3
    6ba4:	d007      	beq.n	6bb6 <event_slave+0x4e>
    6ba6:	4b57      	ldr	r3, [pc, #348]	; (6d04 <event_slave+0x19c>)
    6ba8:	4a57      	ldr	r2, [pc, #348]	; (6d08 <event_slave+0x1a0>)
    6baa:	4958      	ldr	r1, [pc, #352]	; (6d0c <event_slave+0x1a4>)
    6bac:	485a      	ldr	r0, [pc, #360]	; (6d18 <event_slave+0x1b0>)
    6bae:	e9cd 3300 	strd	r3, r3, [sp]
    6bb2:	4b58      	ldr	r3, [pc, #352]	; (6d14 <event_slave+0x1ac>)
    6bb4:	e7e9      	b.n	6b8a <event_slave+0x22>
	_radio.role = ROLE_SLAVE;
    6bb6:	2303      	movs	r3, #3
    6bb8:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    6bba:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
	_radio.state = STATE_RX;
    6bbe:	2301      	movs	r3, #1
    6bc0:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    6bc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    6bc4:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    6bc8:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    6bca:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    6bcc:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    6bce:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    6bd0:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    6bd2:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    6bd4:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    6bd6:	f7ff ffa9 	bl	6b2c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    6bda:	2096      	movs	r0, #150	; 0x96
    6bdc:	f003 fc08 	bl	a3f0 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6be0:	4633      	mov	r3, r6
    6be2:	4632      	mov	r2, r6
    6be4:	4631      	mov	r1, r6
    6be6:	4630      	mov	r0, r6
    6be8:	f003 fb7e 	bl	a2e8 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6bec:	f895 2139 	ldrb.w	r2, [r5, #313]	; 0x139
    6bf0:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    6bf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    6bf8:	4620      	mov	r0, r4
    6bfa:	3108      	adds	r1, #8
    6bfc:	f7fe ff04 	bl	5a08 <rx_packet_set>
	if (conn->data_chan_sel) {
    6c00:	7f63      	ldrb	r3, [r4, #29]
    6c02:	0658      	lsls	r0, r3, #25
    6c04:	f104 0217 	add.w	r2, r4, #23
    6c08:	d54b      	bpl.n	6ca2 <event_slave+0x13a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    6c0a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    6c0c:	8be1      	ldrh	r1, [r4, #30]
    6c0e:	3801      	subs	r0, #1
    6c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c14:	b280      	uxth	r0, r0
    6c16:	f7ff ff45 	bl	6aa4 <chan_sel_2>
	chan_set(data_chan_use);
    6c1a:	f7ff f859 	bl	5cd0 <chan_set>
	conn->slave.window_widening_event_us +=
    6c1e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    6c22:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    6c24:	2200      	movs	r2, #0
    6c26:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    6c28:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    6c2a:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    6c2c:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    6c2e:	bf88      	it	hi
    6c30:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    6c32:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    6c36:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    6c38:	4413      	add	r3, r2
    6c3a:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6c3c:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    6c3e:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6c40:	f107 0109 	add.w	r1, r7, #9
    6c44:	4630      	mov	r0, r6
    6c46:	f003 fbdf 	bl	a408 <radio_tmr_start>
    6c4a:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    6c4c:	f003 fc78 	bl	a540 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    6c50:	4630      	mov	r0, r6
    6c52:	f003 fc97 	bl	a584 <radio_tmr_aa_save>
    6c56:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    6c58:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    6c5a:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    6c5c:	4631      	mov	r1, r6
    6c5e:	4630      	mov	r0, r6
    6c60:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    6c64:	f003 fac7 	bl	a1f6 <radio_rx_ready_delay_get>
    6c68:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    6c6a:	4631      	mov	r1, r6
    6c6c:	4480      	add	r8, r0
    6c6e:	4630      	mov	r0, r6
    6c70:	f003 fac3 	bl	a1fa <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    6c74:	4440      	add	r0, r8
    6c76:	f003 fc45 	bl	a504 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    6c7a:	f894 1020 	ldrb.w	r1, [r4, #32]
    6c7e:	3107      	adds	r1, #7
    6c80:	463a      	mov	r2, r7
    6c82:	b2c9      	uxtb	r1, r1
    6c84:	4620      	mov	r0, r4
    6c86:	f7ff fc2b 	bl	64e0 <preempt_calc>
    6c8a:	4603      	mov	r3, r0
    6c8c:	b348      	cbz	r0, 6ce2 <event_slave+0x17a>
		_radio.state = STATE_STOP;
    6c8e:	2304      	movs	r3, #4
    6c90:	752b      	strb	r3, [r5, #20]
		radio_disable();
    6c92:	f003 fac3 	bl	a21c <radio_disable>
	packet_tx_enqueue(2);
    6c96:	2002      	movs	r0, #2
}
    6c98:	b003      	add	sp, #12
    6c9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    6c9e:	f7fe bf11 	b.w	5ac4 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    6ca2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    6ca4:	7fa6      	ldrb	r6, [r4, #30]
    6ca6:	fb01 6606 	mla	r6, r1, r6, r6
    6caa:	7fe1      	ldrb	r1, [r4, #31]
    6cac:	2025      	movs	r0, #37	; 0x25
    6cae:	440e      	add	r6, r1
    6cb0:	fb96 f1f0 	sdiv	r1, r6, r0
    6cb4:	fb00 6611 	mls	r6, r0, r1, r6
    6cb8:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6cba:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    6cbc:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6cbe:	5c51      	ldrb	r1, [r2, r1]
    6cc0:	f006 0607 	and.w	r6, r6, #7
    6cc4:	fa41 f606 	asr.w	r6, r1, r6
    6cc8:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    6cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6cce:	d4a4      	bmi.n	6c1a <event_slave+0xb2>
		chan_index = chan_next % chan_count;
    6cd0:	fbb0 f1f3 	udiv	r1, r0, r3
    6cd4:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    6cd8:	b2c9      	uxtb	r1, r1
    6cda:	4610      	mov	r0, r2
    6cdc:	f7fe f930 	bl	4f40 <chan_sel_remap>
    6ce0:	e79b      	b.n	6c1a <event_slave+0xb2>
		ticker_status =
    6ce2:	4a0e      	ldr	r2, [pc, #56]	; (6d1c <event_slave+0x1b4>)
    6ce4:	4601      	mov	r1, r0
    6ce6:	f7fd f9bf 	bl	4068 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6cea:	f030 0302 	bics.w	r3, r0, #2
    6cee:	d0d2      	beq.n	6c96 <event_slave+0x12e>
    6cf0:	4b04      	ldr	r3, [pc, #16]	; (6d04 <event_slave+0x19c>)
    6cf2:	4a05      	ldr	r2, [pc, #20]	; (6d08 <event_slave+0x1a0>)
    6cf4:	4905      	ldr	r1, [pc, #20]	; (6d0c <event_slave+0x1a4>)
    6cf6:	480a      	ldr	r0, [pc, #40]	; (6d20 <event_slave+0x1b8>)
    6cf8:	e9cd 3300 	strd	r3, r3, [sp]
    6cfc:	4b05      	ldr	r3, [pc, #20]	; (6d14 <event_slave+0x1ac>)
    6cfe:	e744      	b.n	6b8a <event_slave+0x22>
    6d00:	20000930 	.word	0x20000930
    6d04:	0000bda7 	.word	0x0000bda7
    6d08:	0000c71e 	.word	0x0000c71e
    6d0c:	0000c693 	.word	0x0000c693
    6d10:	0000d3a4 	.word	0x0000d3a4
    6d14:	0000d24f 	.word	0x0000d24f
    6d18:	0000d457 	.word	0x0000d457
    6d1c:	00005815 	.word	0x00005815
    6d20:	0000d317 	.word	0x0000d317

00006d24 <ctrl_tx_enqueue>:
{
    6d24:	b510      	push	{r4, lr}
	    !conn->empty &&
    6d26:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    6d2a:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    6d2e:	f014 0f80 	tst.w	r4, #128	; 0x80
    6d32:	d118      	bne.n	6d66 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    6d34:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    6d38:	b1ab      	cbz	r3, 6d66 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    6d3a:	0724      	lsls	r4, r4, #28
    6d3c:	d413      	bmi.n	6d66 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6d3e:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    6d42:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6d44:	bf04      	itt	eq
    6d46:	681c      	ldreq	r4, [r3, #0]
    6d48:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    6d4c:	b992      	cbnz	r2, 6d74 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    6d4e:	681a      	ldr	r2, [r3, #0]
    6d50:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    6d52:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    6d54:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    6d58:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    6d5c:	680b      	ldr	r3, [r1, #0]
    6d5e:	b90b      	cbnz	r3, 6d64 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    6d60:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
}
    6d64:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    6d66:	b92a      	cbnz	r2, 6d74 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    6d68:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    6d6c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    6d6e:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    6d72:	e7ef      	b.n	6d54 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    6d74:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    6d78:	681a      	ldr	r2, [r3, #0]
    6d7a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    6d7c:	6019      	str	r1, [r3, #0]
    6d7e:	e7eb      	b.n	6d58 <ctrl_tx_enqueue+0x34>

00006d80 <ctrl_tx_sec_enqueue>:
{
    6d80:	b410      	push	{r4}
	if (conn->pause_tx) {
    6d82:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    6d86:	0724      	lsls	r4, r4, #28
{
    6d88:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    6d8a:	d50f      	bpl.n	6dac <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    6d8c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    6d90:	b931      	cbnz	r1, 6da0 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    6d92:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    6d96:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    6d98:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    6d9c:	bc10      	pop	{r4}
    6d9e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    6da0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    6da4:	6819      	ldr	r1, [r3, #0]
    6da6:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    6da8:	601a      	str	r2, [r3, #0]
    6daa:	e7f7      	b.n	6d9c <ctrl_tx_sec_enqueue+0x1c>
}
    6dac:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    6dae:	f7ff bfb9 	b.w	6d24 <ctrl_tx_enqueue>
	...

00006db4 <feature_rsp_send>:
{
    6db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6db6:	4f21      	ldr	r7, [pc, #132]	; (6e3c <feature_rsp_send+0x88>)
{
    6db8:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6dba:	f507 70aa 	add.w	r0, r7, #340	; 0x154
{
    6dbe:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6dc0:	f7fc f9e0 	bl	3184 <mem_acquire>
	if (!node_tx) {
    6dc4:	4604      	mov	r4, r0
    6dc6:	b3b0      	cbz	r0, 6e36 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6dc8:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    6dca:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6dcc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    6dd4:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    6dd8:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    6ddc:	f043 0310 	orr.w	r3, r3, #16
    6de0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    6de4:	79b1      	ldrb	r1, [r6, #6]
    6de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    6dea:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    6dee:	f3c1 0110 	ubfx	r1, r1, #0, #17
    6df2:	400b      	ands	r3, r1
    6df4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    6df8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    6dfc:	f043 0320 	orr.w	r3, r3, #32
    6e00:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6e04:	7903      	ldrb	r3, [r0, #4]
    6e06:	f043 0303 	orr.w	r3, r3, #3
    6e0a:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6e0c:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    6e0e:	2309      	movs	r3, #9
    6e10:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    6e12:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6e14:	2100      	movs	r1, #0
    6e16:	4410      	add	r0, r2
    6e18:	f7f9 fc0e 	bl	638 <memset>
		conn->llcp_features & 0xFF;
    6e1c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    6e20:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    6e22:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    6e24:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    6e26:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    6e28:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    6e2a:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    6e2c:	4621      	mov	r1, r4
    6e2e:	f7ff ffa7 	bl	6d80 <ctrl_tx_sec_enqueue>
	return 0;
    6e32:	2000      	movs	r0, #0
}
    6e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    6e36:	2001      	movs	r0, #1
    6e38:	e7fc      	b.n	6e34 <feature_rsp_send+0x80>
    6e3a:	bf00      	nop
    6e3c:	20000930 	.word	0x20000930

00006e40 <event_connection_prepare>:
{
    6e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6e44:	4d76      	ldr	r5, [pc, #472]	; (7020 <event_connection_prepare+0x1e0>)
{
    6e46:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    6e48:	7c2b      	ldrb	r3, [r5, #16]
{
    6e4a:	b08f      	sub	sp, #60	; 0x3c
    6e4c:	4680      	mov	r8, r0
    6e4e:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    6e50:	b173      	cbz	r3, 6e70 <event_connection_prepare+0x30>
    6e52:	4b74      	ldr	r3, [pc, #464]	; (7024 <event_connection_prepare+0x1e4>)
    6e54:	4a74      	ldr	r2, [pc, #464]	; (7028 <event_connection_prepare+0x1e8>)
    6e56:	4975      	ldr	r1, [pc, #468]	; (702c <event_connection_prepare+0x1ec>)
    6e58:	4875      	ldr	r0, [pc, #468]	; (7030 <event_connection_prepare+0x1f0>)
    6e5a:	e9cd 3300 	strd	r3, r3, [sp]
    6e5e:	4b75      	ldr	r3, [pc, #468]	; (7034 <event_connection_prepare+0x1f4>)
		LL_ASSERT(!retval);
    6e60:	f7fa fa38 	bl	12d4 <printk>
    6e64:	4040      	eors	r0, r0
    6e66:	f380 8811 	msr	BASEPRI, r0
    6e6a:	f04f 0004 	mov.w	r0, #4
    6e6e:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    6e70:	f894 3020 	ldrb.w	r3, [r4, #32]
    6e74:	3307      	adds	r3, #7
    6e76:	b2db      	uxtb	r3, r3
    6e78:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    6e7a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6e7e:	2b00      	cmp	r3, #0
    6e80:	da09      	bge.n	6e96 <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    6e82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    6e84:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    6e86:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    6e8a:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    6e8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    6e8e:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    6e90:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    6e92:	bf88      	it	hi
    6e94:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    6e96:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    6e98:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    6e9c:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    6e9e:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    6ea0:	b292      	uxth	r2, r2
    6ea2:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    6ea4:	4432      	add	r2, r6
    6ea6:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    6ea8:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    6eac:	429a      	cmp	r2, r3
    6eae:	f000 8248 	beq.w	7342 <event_connection_prepare+0x502>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    6eb2:	2005      	movs	r0, #5
    6eb4:	f7ff fbde 	bl	6674 <event_stop.constprop.47>
		switch (conn->llcp_type) {
    6eb8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    6ebc:	3b01      	subs	r3, #1
    6ebe:	2b03      	cmp	r3, #3
    6ec0:	f200 8349 	bhi.w	7556 <event_connection_prepare+0x716>
    6ec4:	e8df f013 	tbh	[pc, r3, lsl #1]
    6ec8:	02150004 	.word	0x02150004
    6ecc:	02f002c2 	.word	0x02f002c2
	if (!conn_upd) {
    6ed0:	f8d5 3180 	ldr.w	r3, [r5, #384]	; 0x180
    6ed4:	b90b      	cbnz	r3, 6eda <event_connection_prepare+0x9a>
		_radio.conn_upd = conn;
    6ed6:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    6eda:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6ede:	f013 0303 	ands.w	r3, r3, #3
    6ee2:	d065      	beq.n	6fb0 <event_connection_prepare+0x170>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6ee4:	4854      	ldr	r0, [pc, #336]	; (7038 <event_connection_prepare+0x1f8>)
    6ee6:	f7fc f94d 	bl	3184 <mem_acquire>
		if (!node_tx) {
    6eea:	4605      	mov	r5, r0
    6eec:	2800      	cmp	r0, #0
    6eee:	f000 8228 	beq.w	7342 <event_connection_prepare+0x502>
		switch (conn->llcp.conn_upd.state) {
    6ef2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6ef6:	f003 0203 	and.w	r2, r3, #3
    6efa:	2a01      	cmp	r2, #1
    6efc:	d150      	bne.n	6fa0 <event_connection_prepare+0x160>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    6efe:	f36f 0301 	bfc	r3, #0, #2
    6f02:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    6f06:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6f08:	7902      	ldrb	r2, [r0, #4]
		event_counter + conn->latency + 6;
    6f0a:	3306      	adds	r3, #6
    6f0c:	4433      	add	r3, r6
    6f0e:	b29b      	uxth	r3, r3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6f10:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp.conn_upd.instant =
    6f14:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6f18:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    6f1a:	220c      	movs	r2, #12
    6f1c:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    6f1e:	2200      	movs	r2, #0
    6f20:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    6f22:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    6f26:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6f28:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6f2c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6f2e:	fbb2 f2f1 	udiv	r2, r2, r1
    6f32:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    6f36:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    6f3a:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    6f3e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    6f42:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    6f46:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    6f4a:	f8a0 200f 	strh.w	r2, [r0, #15]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6f4e:	6822      	ldr	r2, [r4, #0]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    6f50:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6f54:	2a00      	cmp	r2, #0
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    6f56:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6f5a:	da0a      	bge.n	6f72 <event_connection_prepare+0x132>
			u32_t ticks_prepare_to_start =
    6f5c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    6f60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    6f64:	428b      	cmp	r3, r1
    6f66:	bf2c      	ite	cs
    6f68:	4443      	addcs	r3, r8
    6f6a:	eb08 0301 	addcc.w	r3, r8, r1
    6f6e:	1a9b      	subs	r3, r3, r2
    6f70:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    6f72:	f105 0309 	add.w	r3, r5, #9
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    6f76:	4a31      	ldr	r2, [pc, #196]	; (703c <event_connection_prepare+0x1fc>)
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    6f78:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    6f7a:	4b31      	ldr	r3, [pc, #196]	; (7040 <event_connection_prepare+0x200>)
		mayfly_sched_offset->param = (void *)conn;
    6f7c:	e9c3 4202 	strd	r4, r2, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6f80:	2201      	movs	r2, #1
    6f82:	4611      	mov	r1, r2
    6f84:	2000      	movs	r0, #0
    6f86:	f7fc f9b3 	bl	32f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    6f8a:	2800      	cmp	r0, #0
    6f8c:	f000 81d5 	beq.w	733a <event_connection_prepare+0x4fa>
    6f90:	4b24      	ldr	r3, [pc, #144]	; (7024 <event_connection_prepare+0x1e4>)
    6f92:	4a25      	ldr	r2, [pc, #148]	; (7028 <event_connection_prepare+0x1e8>)
    6f94:	4925      	ldr	r1, [pc, #148]	; (702c <event_connection_prepare+0x1ec>)
    6f96:	482b      	ldr	r0, [pc, #172]	; (7044 <event_connection_prepare+0x204>)
    6f98:	e9cd 3300 	strd	r3, r3, [sp]
    6f9c:	4b2a      	ldr	r3, [pc, #168]	; (7048 <event_connection_prepare+0x208>)
    6f9e:	e75f      	b.n	6e60 <event_connection_prepare+0x20>
			LL_ASSERT(0);
    6fa0:	4b20      	ldr	r3, [pc, #128]	; (7024 <event_connection_prepare+0x1e4>)
    6fa2:	e9cd 3300 	strd	r3, r3, [sp]
    6fa6:	4b29      	ldr	r3, [pc, #164]	; (704c <event_connection_prepare+0x20c>)
			LL_ASSERT(0);
    6fa8:	4a1f      	ldr	r2, [pc, #124]	; (7028 <event_connection_prepare+0x1e8>)
    6faa:	4920      	ldr	r1, [pc, #128]	; (702c <event_connection_prepare+0x1ec>)
    6fac:	4828      	ldr	r0, [pc, #160]	; (7050 <event_connection_prepare+0x210>)
    6fae:	e757      	b.n	6e60 <event_connection_prepare+0x20>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    6fb0:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    6fb4:	1bf7      	subs	r7, r6, r7
    6fb6:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    6fb8:	0438      	lsls	r0, r7, #16
    6fba:	f100 81c2 	bmi.w	7342 <event_connection_prepare+0x502>
		conn->llcp_ack = conn->llcp_req;
    6fbe:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    6fc2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    6fc6:	f8d5 2180 	ldr.w	r2, [r5, #384]	; 0x180
		_radio.ticker_id_prepare = 0;
    6fca:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    6fcc:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    6fce:	bf08      	it	eq
    6fd0:	f8c5 3180 	streq.w	r3, [r5, #384]	; 0x180
		if ((conn->llcp.conn_upd.interval !=
    6fd4:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    6fd6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    6fda:	429a      	cmp	r2, r3
    6fdc:	d114      	bne.n	7008 <event_connection_prepare+0x1c8>
		     conn->conn_interval) ||
    6fde:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    6fe2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    6fe4:	4299      	cmp	r1, r3
    6fe6:	d10f      	bne.n	7008 <event_connection_prepare+0x1c8>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    6fe8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    6fec:	435a      	muls	r2, r3
    6fee:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    6ff2:	f242 7110 	movw	r1, #10000	; 0x2710
    6ff6:	fb01 2303 	mla	r3, r1, r3, r2
    6ffa:	3b01      	subs	r3, #1
    6ffc:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    7000:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    7002:	b29b      	uxth	r3, r3
    7004:	429a      	cmp	r2, r3
    7006:	d038      	beq.n	707a <event_connection_prepare+0x23a>
			node_rx = packet_rx_reserve_get(2);
    7008:	2002      	movs	r0, #2
    700a:	f7fd ffb5 	bl	4f78 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    700e:	bb18      	cbnz	r0, 7058 <event_connection_prepare+0x218>
    7010:	4b04      	ldr	r3, [pc, #16]	; (7024 <event_connection_prepare+0x1e4>)
    7012:	e9cd 3300 	strd	r3, r3, [sp]
    7016:	4b0d      	ldr	r3, [pc, #52]	; (704c <event_connection_prepare+0x20c>)
		LL_ASSERT(node_rx);
    7018:	4a03      	ldr	r2, [pc, #12]	; (7028 <event_connection_prepare+0x1e8>)
    701a:	4904      	ldr	r1, [pc, #16]	; (702c <event_connection_prepare+0x1ec>)
    701c:	480d      	ldr	r0, [pc, #52]	; (7054 <event_connection_prepare+0x214>)
    701e:	e71f      	b.n	6e60 <event_connection_prepare+0x20>
    7020:	20000930 	.word	0x20000930
    7024:	0000bda7 	.word	0x0000bda7
    7028:	0000c71e 	.word	0x0000c71e
    702c:	0000c693 	.word	0x0000c693
    7030:	0000d978 	.word	0x0000d978
    7034:	0000d236 	.word	0x0000d236
    7038:	20000a84 	.word	0x20000a84
    703c:	00005e91 	.word	0x00005e91
    7040:	20003840 	.word	0x20003840
    7044:	0000d83d 	.word	0x0000d83d
    7048:	0000d1ff 	.word	0x0000d1ff
    704c:	0000d213 	.word	0x0000d213
    7050:	0000c669 	.word	0x0000c669
    7054:	0000d769 	.word	0x0000d769
			node_rx->hdr.handle = conn->handle;
    7058:	8c23      	ldrh	r3, [r4, #32]
    705a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    705c:	2308      	movs	r3, #8
    705e:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    7060:	2300      	movs	r3, #0
    7062:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    7064:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    7068:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    706a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    706e:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    7070:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7074:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    7076:	f7fe fa97 	bl	55a8 <packet_rx_enqueue>
    707a:	e9d4 3600 	ldrd	r3, r6, [r4]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    707e:	2b00      	cmp	r3, #0
    7080:	da09      	bge.n	7096 <event_connection_prepare+0x256>
			u32_t ticks_prepare_to_start =
    7082:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    7084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    7088:	4286      	cmp	r6, r0
    708a:	bf2c      	ite	cs
    708c:	44b0      	addcs	r8, r6
    708e:	4480      	addcc	r8, r0
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    7090:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    7092:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    7096:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    7098:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    709c:	49cc      	ldr	r1, [pc, #816]	; (73d0 <event_connection_prepare+0x590>)
		conn_interval_old = instant_latency * conn->conn_interval;
    709e:	fb13 f307 	smulbb	r3, r3, r7
    70a2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    70a4:	fbb3 f2fa 	udiv	r2, r3, sl
    70a8:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    70ac:	fb1a f009 	smulbb	r0, sl, r9
    70b0:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    70b2:	4283      	cmp	r3, r0
    70b4:	f080 80a9 	bcs.w	720a <event_connection_prepare+0x3ca>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    70b8:	1ac0      	subs	r0, r0, r3
    70ba:	f240 1223 	movw	r2, #291	; 0x123
    70be:	ea4f 7ce0 	mov.w	ip, r0, asr #31
    70c2:	4342      	muls	r2, r0
    70c4:	fb01 230c 	mla	r3, r1, ip, r2
    70c8:	fba0 0101 	umull	r0, r1, r0, r1
    70cc:	4419      	add	r1, r3
    70ce:	a3be      	add	r3, pc, #760	; (adr r3, 73c8 <event_connection_prepare+0x588>)
    70d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    70d4:	f7f9 f8c8 	bl	268 <__aeabi_uldivmod>
    70d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    70dc:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    70e0:	930c      	str	r3, [sp, #48]	; 0x30
		conn->latency_prepare -= (instant_latency - latency);
    70e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    70e4:	f8df b328 	ldr.w	fp, [pc, #808]	; 7410 <event_connection_prepare+0x5d0>
    70e8:	1bdb      	subs	r3, r3, r7
    70ea:	444b      	add	r3, r9
    70ec:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    70ee:	6823      	ldr	r3, [r4, #0]
    70f0:	429e      	cmp	r6, r3
    70f2:	bf38      	it	cc
    70f4:	461e      	movcc	r6, r3
    70f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    70f8:	930a      	str	r3, [sp, #40]	; 0x28
		if (conn->role) {
    70fa:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    70fe:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7100:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    7104:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    7106:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    710a:	f280 8090 	bge.w	722e <event_connection_prepare+0x3ee>
				conn->slave.window_widening_periodic_us *
    710e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    7110:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7112:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    7116:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
    711a:	4aae      	ldr	r2, [pc, #696]	; (73d4 <event_connection_prepare+0x594>)
    711c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    7120:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7124:	f3c3 0382 	ubfx	r3, r3, #2, #3
    7128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    712c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    7130:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    7132:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7134:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    7138:	4ba7      	ldr	r3, [pc, #668]	; (73d8 <event_connection_prepare+0x598>)
				conn->llcp.conn_upd.win_size * 1250;
    713a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    713e:	f205 253f 	addw	r5, r5, #575	; 0x23f
    7142:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    7146:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    7148:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    714c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    714e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    7150:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    7152:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    7154:	429f      	cmp	r7, r3
    7156:	bf94      	ite	ls
    7158:	6467      	strls	r7, [r4, #68]	; 0x44
    715a:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    715c:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    715e:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    7160:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7162:	fba0 010b 	umull	r0, r1, r0, fp
    7166:	a398      	add	r3, pc, #608	; (adr r3, 73c8 <event_connection_prepare+0x588>)
    7168:	e9d3 2300 	ldrd	r2, r3, [r3]
    716c:	f7f9 f87c 	bl	268 <__aeabi_uldivmod>
    7170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7172:	1a1b      	subs	r3, r3, r0
    7174:	930c      	str	r3, [sp, #48]	; 0x30
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7178:	fbb3 f0f8 	udiv	r0, r3, r8
    717c:	fb08 f000 	mul.w	r0, r8, r0
    7180:	a391      	add	r3, pc, #580	; (adr r3, 73c8 <event_connection_prepare+0x588>)
    7182:	e9d3 2300 	ldrd	r2, r3, [r3]
    7186:	fba0 010b 	umull	r0, r1, r0, fp
    718a:	f7f9 f86d 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    718e:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7190:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    7194:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    7198:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    719a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    719e:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    71a2:	f242 7210 	movw	r2, #10000	; 0x2710
    71a6:	fb02 6303 	mla	r3, r2, r3, r6
    71aa:	3b01      	subs	r3, #1
    71ac:	fbb3 f3f6 	udiv	r3, r3, r6
    71b0:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    71b2:	4b8a      	ldr	r3, [pc, #552]	; (73dc <event_connection_prepare+0x59c>)
    71b4:	4433      	add	r3, r6
    71b6:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    71ba:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    71be:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    71c0:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    71c4:	bf08      	it	eq
    71c6:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    71c8:	2101      	movs	r1, #1
    71ca:	2000      	movs	r0, #0
    71cc:	f003 fae2 	bl	a794 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    71d0:	2200      	movs	r2, #0
    71d2:	2101      	movs	r1, #1
		mayfly_was_enabled =
    71d4:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    71d6:	4610      	mov	r0, r2
    71d8:	f7fc f862 	bl	32a0 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    71dc:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    71e0:	f641 23a7 	movw	r3, #6823	; 0x1aa7
    71e4:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    71e6:	3207      	adds	r2, #7
		ticker_status =
    71e8:	9300      	str	r3, [sp, #0]
    71ea:	b2d2      	uxtb	r2, r2
    71ec:	4b7c      	ldr	r3, [pc, #496]	; (73e0 <event_connection_prepare+0x5a0>)
    71ee:	4608      	mov	r0, r1
    71f0:	f7fc fec2 	bl	3f78 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    71f4:	f030 0802 	bics.w	r8, r0, #2
    71f8:	d026      	beq.n	7248 <event_connection_prepare+0x408>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    71fa:	4b7a      	ldr	r3, [pc, #488]	; (73e4 <event_connection_prepare+0x5a4>)
    71fc:	4a7a      	ldr	r2, [pc, #488]	; (73e8 <event_connection_prepare+0x5a8>)
    71fe:	497b      	ldr	r1, [pc, #492]	; (73ec <event_connection_prepare+0x5ac>)
    7200:	487b      	ldr	r0, [pc, #492]	; (73f0 <event_connection_prepare+0x5b0>)
    7202:	e9cd 3300 	strd	r3, r3, [sp]
    7206:	4b7b      	ldr	r3, [pc, #492]	; (73f4 <event_connection_prepare+0x5b4>)
    7208:	e62a      	b.n	6e60 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    720a:	fb0a 3212 	mls	r2, sl, r2, r3
    720e:	fa1f fb82 	uxth.w	fp, r2
    7212:	fbab 0101 	umull	r0, r1, fp, r1
    7216:	f240 1323 	movw	r3, #291	; 0x123
    721a:	fb03 110b 	mla	r1, r3, fp, r1
    721e:	a36a      	add	r3, pc, #424	; (adr r3, 73c8 <event_connection_prepare+0x588>)
    7220:	e9d3 2300 	ldrd	r2, r3, [r3]
    7224:	f7f9 f820 	bl	268 <__aeabi_uldivmod>
    7228:	eba8 0300 	sub.w	r3, r8, r0
    722c:	e758      	b.n	70e0 <event_connection_prepare+0x2a0>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    722e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7230:	a365      	add	r3, pc, #404	; (adr r3, 73c8 <event_connection_prepare+0x588>)
    7232:	e9d3 2300 	ldrd	r2, r3, [r3]
    7236:	fba1 010b 	umull	r0, r1, r1, fp
    723a:	f7f9 f815 	bl	268 <__aeabi_uldivmod>
    723e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    7242:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    7244:	4635      	mov	r5, r6
    7246:	e7a5      	b.n	7194 <event_connection_prepare+0x354>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    7248:	fba5 ab0b 	umull	sl, fp, r5, fp
    724c:	a35e      	add	r3, pc, #376	; (adr r3, 73c8 <event_connection_prepare+0x588>)
    724e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7252:	4650      	mov	r0, sl
    7254:	4659      	mov	r1, fp
    7256:	f7f9 f807 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    725a:	2300      	movs	r3, #0
    725c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    7260:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    7264:	990a      	ldr	r1, [sp, #40]	; 0x28
    7266:	4a64      	ldr	r2, [pc, #400]	; (73f8 <event_connection_prepare+0x5b8>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7268:	f894 6020 	ldrb.w	r6, [r4, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    726c:	2307      	movs	r3, #7
    726e:	434b      	muls	r3, r1
    7270:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7272:	fb02 3301 	mla	r3, r2, r1, r3
    7276:	990a      	ldr	r1, [sp, #40]	; 0x28
    7278:	fba1 1202 	umull	r1, r2, r1, r2
    727c:	441a      	add	r2, r3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    727e:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    7282:	4608      	mov	r0, r1
    7284:	ebba 0000 	subs.w	r0, sl, r0
    7288:	4611      	mov	r1, r2
    728a:	eb6b 0101 	sbc.w	r1, fp, r1
    728e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7292:	2300      	movs	r3, #0
    7294:	f7f8 ffe8 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7298:	68e3      	ldr	r3, [r4, #12]
    729a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    729c:	f994 c01d 	ldrsb.w	ip, [r4, #29]
    72a0:	4956      	ldr	r1, [pc, #344]	; (73fc <event_connection_prepare+0x5bc>)
    72a2:	441a      	add	r2, r3
    72a4:	4613      	mov	r3, r2
    72a6:	4a56      	ldr	r2, [pc, #344]	; (7400 <event_connection_prepare+0x5c0>)
    72a8:	ea32 022c 	bics.w	r2, r2, ip, asr #32
    72ac:	bf28      	it	cs
    72ae:	460a      	movcs	r2, r1
		ticker_status =
    72b0:	f641 21b7 	movw	r1, #6839	; 0x1ab7
    72b4:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    72b6:	3607      	adds	r6, #7
		ticker_status =
    72b8:	4949      	ldr	r1, [pc, #292]	; (73e0 <event_connection_prepare+0x5a0>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    72ba:	b2f6      	uxtb	r6, r6
		ticker_status =
    72bc:	e9cd 3204 	strd	r3, r2, [sp, #16]
    72c0:	e9cd 4106 	strd	r4, r1, [sp, #24]
    72c4:	e9cd 0802 	strd	r0, r8, [sp, #8]
    72c8:	e9cd 7500 	strd	r7, r5, [sp]
    72cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    72ce:	4632      	mov	r2, r6
    72d0:	4641      	mov	r1, r8
    72d2:	4640      	mov	r0, r8
    72d4:	f7fc fdbc 	bl	3e50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    72d8:	f030 0002 	bics.w	r0, r0, #2
    72dc:	d18d      	bne.n	71fa <event_connection_prepare+0x3ba>
		if (mayfly_was_enabled) {
    72de:	f1b9 0f00 	cmp.w	r9, #0
    72e2:	d06b      	beq.n	73bc <event_connection_prepare+0x57c>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    72e4:	2201      	movs	r2, #1
    72e6:	4611      	mov	r1, r2
}
    72e8:	b00f      	add	sp, #60	; 0x3c
    72ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    72ee:	f7fb bfd7 	b.w	32a0 <mayfly_enable>
	if (conn->llcp.chan_map.initiate) {
    72f2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    72f6:	2b00      	cmp	r3, #0
    72f8:	f000 808c 	beq.w	7414 <event_connection_prepare+0x5d4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    72fc:	4841      	ldr	r0, [pc, #260]	; (7404 <event_connection_prepare+0x5c4>)
    72fe:	f7fb ff41 	bl	3184 <mem_acquire>
		if (node_tx) {
    7302:	4605      	mov	r5, r0
    7304:	b1e8      	cbz	r0, 7342 <event_connection_prepare+0x502>
			conn->llcp.chan_map.initiate = 0;
    7306:	2300      	movs	r3, #0
    7308:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    730c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    730e:	3306      	adds	r3, #6
    7310:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    7312:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7316:	7903      	ldrb	r3, [r0, #4]
    7318:	f043 0303 	orr.w	r3, r3, #3
    731c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    731e:	2308      	movs	r3, #8
    7320:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7322:	2301      	movs	r3, #1
    7324:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    7326:	2205      	movs	r2, #5
    7328:	f104 0161 	add.w	r1, r4, #97	; 0x61
    732c:	3008      	adds	r0, #8
    732e:	f7f9 f956 	bl	5de <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    7332:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7336:	f8a5 300d 	strh.w	r3, [r5, #13]
			ctrl_tx_enqueue(conn, node_tx);
    733a:	4629      	mov	r1, r5
    733c:	4620      	mov	r0, r4
    733e:	f7ff fcf1 	bl	6d24 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    7342:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    7346:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    734a:	429a      	cmp	r2, r3
    734c:	d01d      	beq.n	738a <event_connection_prepare+0x54a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    734e:	2005      	movs	r0, #5
    7350:	f7ff f990 	bl	6674 <event_stop.constprop.47>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7354:	482b      	ldr	r0, [pc, #172]	; (7404 <event_connection_prepare+0x5c4>)
    7356:	f7fb ff15 	bl	3184 <mem_acquire>
		if (node_tx) {
    735a:	4601      	mov	r1, r0
    735c:	b1a8      	cbz	r0, 738a <event_connection_prepare+0x54a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    735e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    7362:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7366:	7903      	ldrb	r3, [r0, #4]
    7368:	f043 0303 	orr.w	r3, r3, #3
    736c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    736e:	2302      	movs	r3, #2
    7370:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7372:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    7374:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    7378:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    737a:	4620      	mov	r0, r4
    737c:	f7ff fcd2 	bl	6d24 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    7380:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    7382:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    7384:	bf98      	it	ls
    7386:	3301      	addls	r3, #1
    7388:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    738a:	f894 3020 	ldrb.w	r3, [r4, #32]
    738e:	f994 501d 	ldrsb.w	r5, [r4, #29]
    7392:	481d      	ldr	r0, [pc, #116]	; (7408 <event_connection_prepare+0x5c8>)
    7394:	491d      	ldr	r1, [pc, #116]	; (740c <event_connection_prepare+0x5cc>)
    7396:	68a2      	ldr	r2, [r4, #8]
    7398:	3307      	adds	r3, #7
    739a:	ea31 0125 	bics.w	r1, r1, r5, asr #32
    739e:	bf28      	it	cs
    73a0:	4601      	movcs	r1, r0
    73a2:	b2db      	uxtb	r3, r3
    73a4:	e9cd 2300 	strd	r2, r3, [sp]
    73a8:	e9cd 1402 	strd	r1, r4, [sp, #8]
    73ac:	1d23      	adds	r3, r4, #4
    73ae:	4622      	mov	r2, r4
    73b0:	4649      	mov	r1, r9
    73b2:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    73b4:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    73b6:	f7ff f96b 	bl	6690 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    73ba:	8466      	strh	r6, [r4, #34]	; 0x22
}
    73bc:	b00f      	add	sp, #60	; 0x3c
    73be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    73c2:	bf00      	nop
    73c4:	f3af 8000 	nop.w
    73c8:	1afd498d 	.word	0x1afd498d
    73cc:	00000007 	.word	0x00000007
    73d0:	09ce5400 	.word	0x09ce5400
    73d4:	0000d4a8 	.word	0x0000d4a8
    73d8:	000f4240 	.word	0x000f4240
    73dc:	026259ff 	.word	0x026259ff
    73e0:	00005675 	.word	0x00005675
    73e4:	0000bda7 	.word	0x0000bda7
    73e8:	0000c71e 	.word	0x0000c71e
    73ec:	0000c693 	.word	0x0000c693
    73f0:	0000d317 	.word	0x0000d317
    73f4:	0000d213 	.word	0x0000d213
    73f8:	1afd498d 	.word	0x1afd498d
    73fc:	00007575 	.word	0x00007575
    7400:	00007579 	.word	0x00007579
    7404:	20000a84 	.word	0x20000a84
    7408:	00006b69 	.word	0x00006b69
    740c:	00008d1d 	.word	0x00008d1d
    7410:	3b9aca00 	.word	0x3b9aca00
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    7414:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    7418:	1af3      	subs	r3, r6, r3
    741a:	0419      	lsls	r1, r3, #16
    741c:	d491      	bmi.n	7342 <event_connection_prepare+0x502>
		conn->llcp_ack = conn->llcp_req;
    741e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7422:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    7426:	f104 0517 	add.w	r5, r4, #23
    742a:	2205      	movs	r2, #5
    742c:	f104 0161 	add.w	r1, r4, #97	; 0x61
    7430:	4628      	mov	r0, r5
    7432:	f7f9 f8d4 	bl	5de <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7436:	2105      	movs	r1, #5
    7438:	4628      	mov	r0, r5
    743a:	f7fc f839 	bl	34b0 <util_ones_count_get>
		conn->data_chan_count =
    743e:	7f63      	ldrb	r3, [r4, #29]
    7440:	f360 0305 	bfi	r3, r0, #0, #6
    7444:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    7446:	2301      	movs	r3, #1
    7448:	7723      	strb	r3, [r4, #28]
    744a:	e77a      	b.n	7342 <event_connection_prepare+0x502>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    744c:	4844      	ldr	r0, [pc, #272]	; (7560 <event_connection_prepare+0x720>)
    744e:	f7fb fe99 	bl	3184 <mem_acquire>
	if (node_tx) {
    7452:	4605      	mov	r5, r0
    7454:	2800      	cmp	r0, #0
    7456:	f43f af74 	beq.w	7342 <event_connection_prepare+0x502>
		conn->llcp_ack = conn->llcp_req;
    745a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    745e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    7462:	4b40      	ldr	r3, [pc, #256]	; (7564 <event_connection_prepare+0x724>)
    7464:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7468:	7903      	ldrb	r3, [r0, #4]
    746a:	f043 0303 	orr.w	r3, r3, #3
    746e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7470:	2309      	movs	r3, #9
    7472:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    7474:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7478:	2b00      	cmp	r3, #0
    747a:	bfb4      	ite	lt
    747c:	230e      	movlt	r3, #14
    747e:	2308      	movge	r3, #8
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7480:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    7482:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7484:	2100      	movs	r1, #0
    7486:	4410      	add	r0, r2
    7488:	f7f9 f8d6 	bl	638 <memset>
			conn->llcp_features & 0xFF;
    748c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7490:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    7492:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    7494:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7496:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7498:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    749a:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    749c:	4620      	mov	r0, r4
    749e:	f7ff fc41 	bl	6d24 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    74a2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    74a4:	86a3      	strh	r3, [r4, #52]	; 0x34
    74a6:	e74c      	b.n	7342 <event_connection_prepare+0x502>
	if (conn->llcp_version.tx == 0) {
    74a8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    74ac:	07da      	lsls	r2, r3, #31
    74ae:	d424      	bmi.n	74fa <event_connection_prepare+0x6ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    74b0:	482b      	ldr	r0, [pc, #172]	; (7560 <event_connection_prepare+0x720>)
    74b2:	f7fb fe67 	bl	3184 <mem_acquire>
		if (node_tx) {
    74b6:	4601      	mov	r1, r0
    74b8:	2800      	cmp	r0, #0
    74ba:	f43f af42 	beq.w	7342 <event_connection_prepare+0x502>
			conn->llcp_ack = conn->llcp_req;
    74be:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    74c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    74c6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    74ca:	f043 0301 	orr.w	r3, r3, #1
    74ce:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    74d2:	7903      	ldrb	r3, [r0, #4]
    74d4:	f043 0303 	orr.w	r3, r3, #3
    74d8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    74da:	2306      	movs	r3, #6
    74dc:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    74de:	230c      	movs	r3, #12
    74e0:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    74e2:	2309      	movs	r3, #9
    74e4:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    74e6:	f06f 030e 	mvn.w	r3, #14
    74ea:	7243      	strb	r3, [r0, #9]
    74ec:	2305      	movs	r3, #5
    74ee:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    74f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    74f4:	72c3      	strb	r3, [r0, #11]
    74f6:	7303      	strb	r3, [r0, #12]
    74f8:	e7d0      	b.n	749c <event_connection_prepare+0x65c>
	} else if (conn->llcp_version.rx != 0) {
    74fa:	079b      	lsls	r3, r3, #30
    74fc:	d526      	bpl.n	754c <event_connection_prepare+0x70c>
		conn->llcp_ack = conn->llcp_req;
    74fe:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7502:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    7506:	2002      	movs	r0, #2
    7508:	f7fd fd36 	bl	4f78 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    750c:	b920      	cbnz	r0, 7518 <event_connection_prepare+0x6d8>
    750e:	4b16      	ldr	r3, [pc, #88]	; (7568 <event_connection_prepare+0x728>)
    7510:	e9cd 3300 	strd	r3, r3, [sp]
    7514:	4b15      	ldr	r3, [pc, #84]	; (756c <event_connection_prepare+0x72c>)
    7516:	e57f      	b.n	7018 <event_connection_prepare+0x1d8>
		node_rx->hdr.handle = conn->handle;
    7518:	8c23      	ldrh	r3, [r4, #32]
    751a:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    751c:	2301      	movs	r3, #1
    751e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7520:	7a03      	ldrb	r3, [r0, #8]
    7522:	f043 0303 	orr.w	r3, r3, #3
    7526:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    7528:	2306      	movs	r3, #6
    752a:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    752c:	230c      	movs	r3, #12
    752e:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    7530:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    7534:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    7536:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    753a:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    753e:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    7542:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    7546:	f7fe f82f 	bl	55a8 <packet_rx_enqueue>
    754a:	e6fa      	b.n	7342 <event_connection_prepare+0x502>
		LL_ASSERT(0);
    754c:	4b06      	ldr	r3, [pc, #24]	; (7568 <event_connection_prepare+0x728>)
    754e:	e9cd 3300 	strd	r3, r3, [sp]
    7552:	4b06      	ldr	r3, [pc, #24]	; (756c <event_connection_prepare+0x72c>)
    7554:	e528      	b.n	6fa8 <event_connection_prepare+0x168>
			LL_ASSERT(0);
    7556:	4b04      	ldr	r3, [pc, #16]	; (7568 <event_connection_prepare+0x728>)
    7558:	e9cd 3300 	strd	r3, r3, [sp]
    755c:	4b04      	ldr	r3, [pc, #16]	; (7570 <event_connection_prepare+0x730>)
    755e:	e523      	b.n	6fa8 <event_connection_prepare+0x168>
    7560:	20000a84 	.word	0x20000a84
    7564:	0001400c 	.word	0x0001400c
    7568:	0000bda7 	.word	0x0000bda7
    756c:	0000d227 	.word	0x0000d227
    7570:	0000d236 	.word	0x0000d236

00007574 <event_slave_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    7574:	f7ff bc64 	b.w	6e40 <event_connection_prepare>

00007578 <event_master_prepare>:
    7578:	f7ff bc62 	b.w	6e40 <event_connection_prepare>

0000757c <prepare_pdu_data_tx>:
{
    757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    757e:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    7582:	061a      	lsls	r2, r3, #24
{
    7584:	4604      	mov	r4, r0
    7586:	460f      	mov	r7, r1
	if (/* empty packet */
    7588:	d408      	bmi.n	759c <prepare_pdu_data_tx+0x20>
	    !conn->pkt_tx_head ||
    758a:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    758e:	b12d      	cbz	r5, 759c <prepare_pdu_data_tx+0x20>
	    !conn->pkt_tx_head ||
    7590:	071b      	lsls	r3, r3, #28
    7592:	f8d0 c0f0 	ldr.w	ip, [r0, #240]	; 0xf0
    7596:	d522      	bpl.n	75de <prepare_pdu_data_tx+0x62>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    7598:	4565      	cmp	r5, ip
    759a:	d020      	beq.n	75de <prepare_pdu_data_tx+0x62>
	conn->empty = 1;
    759c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    75a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    75a4:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    75a8:	f002 fe8a 	bl	a2c0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    75ac:	7803      	ldrb	r3, [r0, #0]
    75ae:	2201      	movs	r2, #1
    75b0:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    75b4:	2200      	movs	r2, #0
    75b6:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    75b8:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    75bc:	7003      	strb	r3, [r0, #0]
    75be:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    75c0:	b152      	cbz	r2, 75d8 <prepare_pdu_data_tx+0x5c>
		pdu_data_tx->md = 1;
    75c2:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    75c6:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    75c8:	7803      	ldrb	r3, [r0, #0]
    75ca:	f36f 1347 	bfc	r3, #5, #3
    75ce:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    75d0:	2300      	movs	r3, #0
    75d2:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    75d4:	6038      	str	r0, [r7, #0]
}
    75d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    75d8:	f362 1304 	bfi	r3, r2, #4, #1
    75dc:	e7f3      	b.n	75c6 <prepare_pdu_data_tx+0x4a>
					conn->packet_tx_head_offset);
    75de:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    75e2:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    75e6:	1d2a      	adds	r2, r5, #4
    75e8:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    75ea:	b911      	cbnz	r1, 75f2 <prepare_pdu_data_tx+0x76>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    75ec:	7841      	ldrb	r1, [r0, #1]
    75ee:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    75f2:	b123      	cbz	r3, 75fe <prepare_pdu_data_tx+0x82>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    75f4:	5cd1      	ldrb	r1, [r2, r3]
    75f6:	2601      	movs	r6, #1
    75f8:	f366 0101 	bfi	r1, r6, #0, #2
    75fc:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    75fe:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    7602:	1af6      	subs	r6, r6, r3
    7604:	b2f6      	uxtb	r6, r6
    7606:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    7608:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    760a:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    760c:	f36f 1104 	bfc	r1, #4, #1
    7610:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    7612:	d905      	bls.n	7620 <prepare_pdu_data_tx+0xa4>
			_pdu_data_tx->len = max_tx_octets;
    7614:	211b      	movs	r1, #27
    7616:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    7618:	5cd1      	ldrb	r1, [r2, r3]
    761a:	f041 0110 	orr.w	r1, r1, #16
    761e:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    7620:	6829      	ldr	r1, [r5, #0]
    7622:	b119      	cbz	r1, 762c <prepare_pdu_data_tx+0xb0>
			_pdu_data_tx->md = 1;
    7624:	5cd1      	ldrb	r1, [r2, r3]
    7626:	f041 0110 	orr.w	r1, r1, #16
    762a:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    762c:	f1bc 0f00 	cmp.w	ip, #0
    7630:	d1ca      	bne.n	75c8 <prepare_pdu_data_tx+0x4c>
    7632:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    7636:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    7638:	bf18      	it	ne
    763a:	e9c4 553c 	strdne	r5, r5, [r4, #240]	; 0xf0
    763e:	e7c3      	b.n	75c8 <prepare_pdu_data_tx+0x4c>

00007640 <isr>:
{
    7640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7644:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    7646:	f002 fe11 	bl	a26c <radio_is_done>
    764a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    764c:	b33e      	cbz	r6, 769e <isr+0x5e>
		crc_ok = radio_crc_is_valid();
    764e:	f002 fe2d 	bl	a2ac <radio_crc_is_valid>
    7652:	fa5f f880 	uxtb.w	r8, r0
		devmatch_ok = radio_filter_has_match();
    7656:	f002 fead 	bl	a3b4 <radio_filter_has_match>
    765a:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    765c:	f002 feb4 	bl	a3c8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    7660:	f003 f85c 	bl	a71c <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    7664:	f003 f848 	bl	a6f8 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    7668:	f002 fe6e 	bl	a348 <radio_rssi_is_ready>
    766c:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    766e:	f002 fde7 	bl	a240 <radio_status_reset>
	radio_tmr_status_reset();
    7672:	f002 feaf 	bl	a3d4 <radio_tmr_status_reset>
	radio_filter_status_reset();
    7676:	f002 fe95 	bl	a3a4 <radio_filter_status_reset>
	radio_ar_status_reset();
    767a:	f003 f843 	bl	a704 <radio_ar_status_reset>
	radio_rssi_status_reset();
    767e:	f002 fe5b 	bl	a338 <radio_rssi_status_reset>
	switch (_radio.state) {
    7682:	4875      	ldr	r0, [pc, #468]	; (7858 <isr+0x218>)
    7684:	7d03      	ldrb	r3, [r0, #20]
    7686:	4683      	mov	fp, r0
    7688:	2b05      	cmp	r3, #5
    768a:	f201 8322 	bhi.w	8cd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcd2>
    768e:	e8df f013 	tbh	[pc, r3, lsl #1]
    7692:	0061      	.short	0x0061
    7694:	000a0091 	.word	0x000a0091
    7698:	09430943 	.word	0x09430943
    769c:	0943      	.short	0x0943
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    769e:	4635      	mov	r5, r6
    76a0:	4634      	mov	r4, r6
    76a2:	46b0      	mov	r8, r6
    76a4:	e7e3      	b.n	766e <isr+0x2e>
	_radio.state = STATE_RX;
    76a6:	2301      	movs	r3, #1
    76a8:	7503      	strb	r3, [r0, #20]
	hcto = radio_tmr_tifs_base_get()
    76aa:	f002 ff95 	bl	a5d8 <radio_tmr_tifs_base_get>
    76ae:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    76b0:	2096      	movs	r0, #150	; 0x96
    76b2:	f002 fe9d 	bl	a3f0 <radio_tmr_tifs_set>
	switch (_radio.role) {
    76b6:	f89b 3013 	ldrb.w	r3, [fp, #19]
    76ba:	3b01      	subs	r3, #1
    76bc:	34c3      	adds	r4, #195	; 0xc3
    76be:	2b03      	cmp	r3, #3
    76c0:	d870      	bhi.n	77a4 <isr+0x164>
    76c2:	e8df f003 	tbb	[pc, r3]
    76c6:	2602      	.short	0x2602
    76c8:	4a4a      	.short	0x4a4a
		radio_switch_complete_and_tx(0, 0, 0, 0);
    76ca:	2300      	movs	r3, #0
    76cc:	461a      	mov	r2, r3
    76ce:	4619      	mov	r1, r3
    76d0:	4618      	mov	r0, r3
    76d2:	f002 fe09 	bl	a2e8 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    76d6:	f002 fdf7 	bl	a2c8 <radio_pkt_scratch_get>
    76da:	f002 fd79 	bl	a1d0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    76de:	f002 fdbb 	bl	a258 <radio_is_ready>
    76e2:	4605      	mov	r5, r0
    76e4:	b138      	cbz	r0, 76f6 <isr+0xb6>
		LL_ASSERT(!radio_is_ready());
    76e6:	4b5d      	ldr	r3, [pc, #372]	; (785c <isr+0x21c>)
    76e8:	e9cd 3300 	strd	r3, r3, [sp]
    76ec:	4b5c      	ldr	r3, [pc, #368]	; (7860 <isr+0x220>)
	LL_ASSERT(!radio_is_ready());
    76ee:	4a5d      	ldr	r2, [pc, #372]	; (7864 <isr+0x224>)
    76f0:	495d      	ldr	r1, [pc, #372]	; (7868 <isr+0x228>)
    76f2:	485e      	ldr	r0, [pc, #376]	; (786c <isr+0x22c>)
    76f4:	e187      	b.n	7a06 <isr+0x3c6>
		hcto += radio_rx_chain_delay_get(0, 0);
    76f6:	4601      	mov	r1, r0
    76f8:	f002 fd7f 	bl	a1fa <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    76fc:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    76fe:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    7700:	4628      	mov	r0, r5
    7702:	f002 fd76 	bl	a1f2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    7706:	1a20      	subs	r0, r4, r0
    7708:	f002 fefc 	bl	a504 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    770c:	f002 ff4c 	bl	a5a8 <radio_tmr_end_capture>
    7710:	e020      	b.n	7754 <isr+0x114>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    7712:	2300      	movs	r3, #0
    7714:	4619      	mov	r1, r3
    7716:	461a      	mov	r2, r3
    7718:	4618      	mov	r0, r3
    771a:	f002 fde5 	bl	a2e8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    771e:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
    7722:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
		radio_pkt_rx_set(_radio.packet_rx
    7726:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    772a:	3008      	adds	r0, #8
    772c:	f002 fd50 	bl	a1d0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    7730:	f002 fd92 	bl	a258 <radio_is_ready>
    7734:	4605      	mov	r5, r0
    7736:	2800      	cmp	r0, #0
    7738:	d1d5      	bne.n	76e6 <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    773a:	4601      	mov	r1, r0
    773c:	f002 fd5d 	bl	a1fa <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    7740:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    7742:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    7744:	4628      	mov	r0, r5
    7746:	f002 fd54 	bl	a1f2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    774a:	1a20      	subs	r0, r4, r0
    774c:	f002 feda 	bl	a504 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    7750:	f002 fde2 	bl	a318 <radio_rssi_measure>
}
    7754:	b00f      	add	sp, #60	; 0x3c
    7756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    775a:	2300      	movs	r3, #0
    775c:	461a      	mov	r2, r3
    775e:	4619      	mov	r1, r3
    7760:	4618      	mov	r0, r3
    7762:	f002 fdc1 	bl	a2e8 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7766:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
    776a:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
		rx_packet_set(_radio.conn_curr,	(void *)
    776e:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    7776:	3108      	adds	r1, #8
    7778:	f7fe f946 	bl	5a08 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    777c:	f002 fd6c 	bl	a258 <radio_is_ready>
    7780:	4605      	mov	r5, r0
    7782:	2800      	cmp	r0, #0
    7784:	d1af      	bne.n	76e6 <isr+0xa6>
		hcto += radio_rx_chain_delay_get(0, 0);
    7786:	4601      	mov	r1, r0
    7788:	f002 fd37 	bl	a1fa <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    778c:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    778e:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    7790:	4628      	mov	r0, r5
    7792:	f002 fd2e 	bl	a1f2 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    7796:	1a20      	subs	r0, r4, r0
    7798:	f002 feb4 	bl	a504 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    779c:	2001      	movs	r0, #1
    779e:	f7fe f991 	bl	5ac4 <packet_tx_enqueue>
    77a2:	e7d7      	b.n	7754 <isr+0x114>
		LL_ASSERT(0);
    77a4:	4b2d      	ldr	r3, [pc, #180]	; (785c <isr+0x21c>)
    77a6:	e9cd 3300 	strd	r3, r3, [sp]
    77aa:	4b2d      	ldr	r3, [pc, #180]	; (7860 <isr+0x220>)
		LL_ASSERT(0);
    77ac:	4a2d      	ldr	r2, [pc, #180]	; (7864 <isr+0x224>)
    77ae:	492e      	ldr	r1, [pc, #184]	; (7868 <isr+0x228>)
    77b0:	482f      	ldr	r0, [pc, #188]	; (7870 <isr+0x230>)
    77b2:	e128      	b.n	7a06 <isr+0x3c6>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    77b4:	b92e      	cbnz	r6, 77c2 <isr+0x182>
		_radio.state = STATE_CLOSE;
    77b6:	2303      	movs	r3, #3
    77b8:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    77bc:	f002 fd2e 	bl	a21c <radio_disable>
    77c0:	e7c8      	b.n	7754 <isr+0x114>
	switch (_radio.role) {
    77c2:	7cc3      	ldrb	r3, [r0, #19]
    77c4:	3b01      	subs	r3, #1
    77c6:	2b03      	cmp	r3, #3
    77c8:	f201 80a0 	bhi.w	890c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90c>
    77cc:	e8df f013 	tbh	[pc, r3, lsl #1]
    77d0:	023c0004 	.word	0x023c0004
    77d4:	04ad04ad 	.word	0x04ad04ad
		if (crc_ok) {
    77d8:	f1b8 0f00 	cmp.w	r8, #0
    77dc:	d0eb      	beq.n	77b6 <isr+0x176>
	pdu_adv = (void *)radio_pkt_scratch_get();
    77de:	f002 fd73 	bl	a2c8 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    77e2:	f89b 2078 	ldrb.w	r2, [fp, #120]	; 0x78
    77e6:	232a      	movs	r3, #42	; 0x2a
    77e8:	f04f 0927 	mov.w	r9, #39	; 0x27
    77ec:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    77f0:	7802      	ldrb	r2, [r0, #0]
    77f2:	f002 030f 	and.w	r3, r2, #15
    77f6:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    77f8:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    77fa:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    77fe:	d13b      	bne.n	7878 <isr+0x238>
    7800:	7843      	ldrb	r3, [r0, #1]
    7802:	2b0c      	cmp	r3, #12
    7804:	d138      	bne.n	7878 <isr+0x238>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    7806:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    780a:	0659      	lsls	r1, r3, #25
    780c:	d500      	bpl.n	7810 <isr+0x1d0>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    780e:	b39c      	cbz	r4, 7878 <isr+0x238>
	return (adv->tx_addr == sr->rx_addr) &&
    7810:	f81b 3009 	ldrb.w	r3, [fp, r9]
    7814:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7818:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    781c:	d12c      	bne.n	7878 <isr+0x238>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    781e:	2206      	movs	r2, #6
    7820:	f107 0108 	add.w	r1, r7, #8
    7824:	1ca8      	adds	r0, r5, #2
    7826:	f7f8 feca 	bl	5be <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    782a:	bb28      	cbnz	r0, 7878 <isr+0x238>
		_radio.state = STATE_CLOSE;
    782c:	2303      	movs	r3, #3
    782e:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_switch_complete_and_disable();
    7832:	f002 fd63 	bl	a2fc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    7836:	f89b 00c8 	ldrb.w	r0, [fp, #200]	; 0xc8
    783a:	2327      	movs	r3, #39	; 0x27
    783c:	fb03 b000 	mla	r0, r3, r0, fp
    7840:	307a      	adds	r0, #122	; 0x7a
    7842:	f002 fccb 	bl	a1dc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    7846:	f002 fd07 	bl	a258 <radio_is_ready>
    784a:	2800      	cmp	r0, #0
    784c:	d082      	beq.n	7754 <isr+0x114>
    784e:	4b03      	ldr	r3, [pc, #12]	; (785c <isr+0x21c>)
    7850:	e9cd 3300 	strd	r3, r3, [sp]
    7854:	4b07      	ldr	r3, [pc, #28]	; (7874 <isr+0x234>)
    7856:	e74a      	b.n	76ee <isr+0xae>
    7858:	20000930 	.word	0x20000930
    785c:	0000bda7 	.word	0x0000bda7
    7860:	0000cf6b 	.word	0x0000cf6b
    7864:	0000c71e 	.word	0x0000c71e
    7868:	0000c693 	.word	0x0000c693
    786c:	0000d4b8 	.word	0x0000d4b8
    7870:	0000c669 	.word	0x0000c669
    7874:	0000cf7e 	.word	0x0000cf7e
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    7878:	783b      	ldrb	r3, [r7, #0]
    787a:	f003 030f 	and.w	r3, r3, #15
    787e:	2b05      	cmp	r3, #5
    7880:	d199      	bne.n	77b6 <isr+0x176>
    7882:	787b      	ldrb	r3, [r7, #1]
    7884:	2b22      	cmp	r3, #34	; 0x22
    7886:	d196      	bne.n	77b6 <isr+0x176>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7888:	f81b 3009 	ldrb.w	r3, [fp, r9]
    788c:	f003 030f 	and.w	r3, r3, #15
    7890:	2b01      	cmp	r3, #1
    7892:	f040 80c2 	bne.w	7a1a <isr+0x3da>
		       isr_adv_ci_adva_check(adv, ci) &&
    7896:	4639      	mov	r1, r7
    7898:	4628      	mov	r0, r5
    789a:	f7fd fe61 	bl	5560 <isr_adv_ci_adva_check>
    789e:	b188      	cbz	r0, 78c4 <isr+0x284>
	return (adv->rx_addr == ci->tx_addr) &&
    78a0:	783b      	ldrb	r3, [r7, #0]
    78a2:	f81b 2009 	ldrb.w	r2, [fp, r9]
    78a6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    78aa:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    78ae:	f040 80b2 	bne.w	7a16 <isr+0x3d6>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    78b2:	2206      	movs	r2, #6
    78b4:	1cb9      	adds	r1, r7, #2
    78b6:	f105 0008 	add.w	r0, r5, #8
    78ba:	f7f8 fe80 	bl	5be <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    78be:	fab0 f080 	clz	r0, r0
    78c2:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    78c4:	2800      	cmp	r0, #0
    78c6:	f43f af76 	beq.w	77b6 <isr+0x176>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    78ca:	f89b 317a 	ldrb.w	r3, [fp, #378]	; 0x17a
    78ce:	b133      	cbz	r3, 78de <isr+0x29e>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    78d0:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    78d4:	f89b 2179 	ldrb.w	r2, [fp, #377]	; 0x179
    78d8:	429a      	cmp	r2, r3
    78da:	f47f af6c 	bne.w	77b6 <isr+0x176>
    78de:	f8db 30cc 	ldr.w	r3, [fp, #204]	; 0xcc
    78e2:	2b00      	cmp	r3, #0
    78e4:	f43f af67 	beq.w	77b6 <isr+0x176>
			node_rx = packet_rx_reserve_get(4);
    78e8:	2004      	movs	r0, #4
    78ea:	f7fd fb45 	bl	4f78 <packet_rx_reserve_get>
		if (!node_rx) {
    78ee:	4605      	mov	r5, r0
    78f0:	2800      	cmp	r0, #0
    78f2:	f43f af60 	beq.w	77b6 <isr+0x176>
		_radio.state = STATE_STOP;
    78f6:	f04f 0a04 	mov.w	sl, #4
    78fa:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    78fe:	f002 fc8d 	bl	a21c <radio_disable>
		conn = _radio.advertiser.conn;
    7902:	f8db 40cc 	ldr.w	r4, [fp, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7906:	f8db 1108 	ldr.w	r1, [fp, #264]	; 0x108
		_radio.advertiser.conn = NULL;
    790a:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    790e:	f44f 7282 	mov.w	r2, #260	; 0x104
    7912:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    7914:	f8cb 80cc 	str.w	r8, [fp, #204]	; 0xcc
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7918:	f7fb fc65 	bl	31e6 <mem_index_get>
		memcpy(&conn->crc_init[0],
    791c:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    791e:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    7920:	f107 0112 	add.w	r1, r7, #18
    7924:	f104 0014 	add.w	r0, r4, #20
    7928:	f7f8 fe59 	bl	5de <memcpy>
		memcpy(&conn->access_addr[0],
    792c:	f104 0310 	add.w	r3, r4, #16
    7930:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    7932:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    7936:	4652      	mov	r2, sl
    7938:	f107 010e 	add.w	r1, r7, #14
    793c:	930a      	str	r3, [sp, #40]	; 0x28
    793e:	f7f8 fe4e 	bl	5de <memcpy>
		memcpy(&conn->data_chan_map[0],
    7942:	2205      	movs	r2, #5
    7944:	f107 011e 	add.w	r1, r7, #30
    7948:	4630      	mov	r0, r6
    794a:	f7f8 fe48 	bl	5de <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    794e:	2105      	movs	r1, #5
    7950:	4630      	mov	r0, r6
    7952:	f7fb fdad 	bl	34b0 <util_ones_count_get>
		conn->data_chan_count =
    7956:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    7958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    795a:	f360 0205 	bfi	r2, r0, #0, #6
    795e:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    7960:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    7964:	f3c2 0204 	ubfx	r2, r2, #0, #5
    7968:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    796a:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    796c:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval;
    796e:	b291      	uxth	r1, r2
			pdu_adv->connect_ind.interval * 1250;
    7970:	f240 46e2 	movw	r6, #1250	; 0x4e2
    7974:	434e      	muls	r6, r1
		conn->latency = pdu_adv->connect_ind.latency;
    7976:	7eba      	ldrb	r2, [r7, #26]
    7978:	7ef9      	ldrb	r1, [r7, #27]
    797a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    797e:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    7980:	4619      	mov	r1, r3
    7982:	4652      	mov	r2, sl
    7984:	f104 0054 	add.w	r0, r4, #84	; 0x54
    7988:	f7f8 fe29 	bl	5de <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    798c:	8bbb      	ldrh	r3, [r7, #28]
    798e:	f242 7210 	movw	r2, #10000	; 0x2710
    7992:	fb02 6303 	mla	r3, r2, r3, r6
    7996:	3b01      	subs	r3, #1
    7998:	fbb3 f3f6 	udiv	r3, r3, r6
    799c:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    799e:	4b9c      	ldr	r3, [pc, #624]	; (7c10 <isr+0x5d0>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    79a0:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    79a2:	4433      	add	r3, r6
    79a4:	fbb3 f3f6 	udiv	r3, r3, r6
    79a8:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    79aa:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    79ac:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    79b0:	f04f 0801 	mov.w	r8, #1
    79b4:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    79b8:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    79ba:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    79be:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    79c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    79c4:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    79c6:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    79c8:	f105 000e 	add.w	r0, r5, #14
    79cc:	f7f8 fe07 	bl	5de <memcpy>
			pdu_adv->connect_ind.interval;
    79d0:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    79d2:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    79d4:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    79d6:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    79d8:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    79da:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    79dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    79e0:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    79e4:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    79e6:	8c20      	ldrh	r0, [r4, #32]
    79e8:	f7fd fe2a 	bl	5640 <rx_fc_lock>
		packet_rx_enqueue();
    79ec:	f7fd fddc 	bl	55a8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    79f0:	2003      	movs	r0, #3
    79f2:	f7fd fac1 	bl	4f78 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    79f6:	b9f0      	cbnz	r0, 7a36 <isr+0x3f6>
    79f8:	4b86      	ldr	r3, [pc, #536]	; (7c14 <isr+0x5d4>)
    79fa:	e9cd 3300 	strd	r3, r3, [sp]
    79fe:	4b86      	ldr	r3, [pc, #536]	; (7c18 <isr+0x5d8>)
			LL_ASSERT(node_rx);
    7a00:	4a86      	ldr	r2, [pc, #536]	; (7c1c <isr+0x5dc>)
    7a02:	4987      	ldr	r1, [pc, #540]	; (7c20 <isr+0x5e0>)
    7a04:	4887      	ldr	r0, [pc, #540]	; (7c24 <isr+0x5e4>)
		LL_ASSERT(0);
    7a06:	f7f9 fc65 	bl	12d4 <printk>
    7a0a:	4040      	eors	r0, r0
    7a0c:	f380 8811 	msr	BASEPRI, r0
    7a10:	f04f 0004 	mov.w	r0, #4
    7a14:	df02      	svc	2
	return (adv->rx_addr == ci->tx_addr) &&
    7a16:	2000      	movs	r0, #0
    7a18:	e754      	b.n	78c4 <isr+0x284>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7a1a:	f89b 3029 	ldrb.w	r3, [fp, #41]	; 0x29
		(devmatch_ok)) &&
    7a1e:	09db      	lsrs	r3, r3, #7
    7a20:	d000      	beq.n	7a24 <isr+0x3e4>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7a22:	b134      	cbz	r4, 7a32 <isr+0x3f2>
	       isr_adv_ci_adva_check(adv, ci);
    7a24:	4639      	mov	r1, r7
    7a26:	4628      	mov	r0, r5
    7a28:	f7fd fd9a 	bl	5560 <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    7a2c:	f000 0001 	and.w	r0, r0, #1
    7a30:	e748      	b.n	78c4 <isr+0x284>
    7a32:	4620      	mov	r0, r4
    7a34:	e7fa      	b.n	7a2c <isr+0x3ec>
			node_rx->hdr.handle = conn->handle;
    7a36:	8c23      	ldrh	r3, [r4, #32]
    7a38:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    7a3a:	230a      	movs	r3, #10
    7a3c:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    7a3e:	783b      	ldrb	r3, [r7, #0]
    7a40:	f013 0320 	ands.w	r3, r3, #32
    7a44:	f000 80de 	beq.w	7c04 <isr+0x5c4>
					((u16_t)conn->access_addr[1] << 8) |
    7a48:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    7a4a:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    7a4c:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    7a4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    7a52:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    7a54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    7a58:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7a5a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    7a5c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    7a60:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7a62:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    7a64:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    7a68:	f7fd fd9e 	bl	55a8 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    7a6c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    7a70:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    7a74:	496c      	ldr	r1, [pc, #432]	; (7c28 <isr+0x5e8>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    7a76:	0952      	lsrs	r2, r2, #5
    7a78:	f362 0384 	bfi	r3, r2, #2, #3
    7a7c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    7a80:	f89b 3120 	ldrb.w	r3, [fp, #288]	; 0x120
			   gc_lookup_ppm[conn->slave.sca]) *
    7a84:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    7a88:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7a8c:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    7a8e:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    7a90:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    7a94:	4a65      	ldr	r2, [pc, #404]	; (7c2c <isr+0x5ec>)
    7a96:	f203 233f 	addw	r3, r3, #575	; 0x23f
    7a9a:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    7a9e:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    7aa0:	0873      	lsrs	r3, r6, #1
    7aa2:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    7aa4:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    7aa6:	7d7b      	ldrb	r3, [r7, #21]
    7aa8:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    7aac:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    7ab0:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    7ab4:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7ab6:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    7ab8:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7abc:	4640      	mov	r0, r8
    7abe:	f002 fb9a 	bl	a1f6 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7ac2:	495b      	ldr	r1, [pc, #364]	; (7c30 <isr+0x5f0>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    7ac4:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7ac6:	f200 4052 	addw	r0, r0, #1106	; 0x452
    7aca:	a34f      	add	r3, pc, #316	; (adr r3, 7c08 <isr+0x5c8>)
    7acc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ad0:	fba0 0101 	umull	r0, r1, r0, r1
    7ad4:	f7f8 fbc8 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    7ad8:	f8db 517c 	ldr.w	r5, [fp, #380]	; 0x17c
    7adc:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    7ade:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    7ae0:	429d      	cmp	r5, r3
    7ae2:	bf38      	it	cc
    7ae4:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    7ae6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    7aea:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    7aec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    7aee:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    7af0:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    7af4:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    7af6:	f002 fd69 	bl	a5cc <radio_tmr_end_get>
    7afa:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    7afc:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    7afe:	4641      	mov	r1, r8
		conn_offset_us +=
    7b00:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    7b04:	4640      	mov	r0, r8
    7b06:	f002 fb74 	bl	a1f2 <radio_tx_chain_delay_get>
    7b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7b0c:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    7b10:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    7b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7b14:	ebaa 0a00 	sub.w	sl, sl, r0
    7b18:	ebaa 0303 	sub.w	r3, sl, r3
    7b1c:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b1e:	f240 4385 	movw	r3, #1157	; 0x485
    7b22:	9300      	str	r3, [sp, #0]
    7b24:	2205      	movs	r2, #5
    7b26:	4b43      	ldr	r3, [pc, #268]	; (7c34 <isr+0x5f4>)
    7b28:	f8df a104 	ldr.w	sl, [pc, #260]	; 7c30 <isr+0x5f0>
    7b2c:	4641      	mov	r1, r8
    7b2e:	4640      	mov	r0, r8
    7b30:	f7fc fa22 	bl	3f78 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    7b34:	f240 4186 	movw	r1, #1158	; 0x486
    7b38:	f7fd fdba 	bl	56b0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7b3c:	f81b 3009 	ldrb.w	r3, [fp, r9]
    7b40:	f003 030f 	and.w	r3, r3, #15
    7b44:	2b01      	cmp	r3, #1
    7b46:	d107      	bne.n	7b58 <isr+0x518>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b48:	f8cd 8000 	str.w	r8, [sp]
    7b4c:	4643      	mov	r3, r8
    7b4e:	2203      	movs	r2, #3
    7b50:	4641      	mov	r1, r8
    7b52:	4640      	mov	r0, r8
    7b54:	f7fc fa10 	bl	3f78 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7b58:	fba6 670a 	umull	r6, r7, r6, sl
    7b5c:	a32a      	add	r3, pc, #168	; (adr r3, 7c08 <isr+0x5c8>)
    7b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b62:	4630      	mov	r0, r6
    7b64:	4639      	mov	r1, r7
    7b66:	f7f8 fb7f 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b6a:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7b6e:	4a32      	ldr	r2, [pc, #200]	; (7c38 <isr+0x5f8>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b70:	eba3 0b05 	sub.w	fp, r3, r5
    7b74:	f894 3020 	ldrb.w	r3, [r4, #32]
    7b78:	3307      	adds	r3, #7
    7b7a:	b2db      	uxtb	r3, r3
    7b7c:	930b      	str	r3, [sp, #44]	; 0x2c
    7b7e:	f240 439d 	movw	r3, #1181	; 0x49d
    7b82:	9308      	str	r3, [sp, #32]
    7b84:	4b2d      	ldr	r3, [pc, #180]	; (7c3c <isr+0x5fc>)
    7b86:	e9cd 4306 	strd	r4, r3, [sp, #24]
    7b8a:	4b2d      	ldr	r3, [pc, #180]	; (7c40 <isr+0x600>)
    7b8c:	9305      	str	r3, [sp, #20]
    7b8e:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7b90:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b92:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7b94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7b98:	2307      	movs	r3, #7
    7b9a:	2100      	movs	r1, #0
    7b9c:	4343      	muls	r3, r0
    7b9e:	fb02 3301 	mla	r3, r2, r1, r3
    7ba2:	fba0 1202 	umull	r1, r2, r0, r2
    7ba6:	441a      	add	r2, r3
    7ba8:	4608      	mov	r0, r1
    7baa:	1a30      	subs	r0, r6, r0
    7bac:	4611      	mov	r1, r2
    7bae:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bb2:	2400      	movs	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7bb8:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bba:	9504      	str	r5, [sp, #16]
    7bbc:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7bbe:	f7f8 fb53 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    7bc2:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bc4:	9002      	str	r0, [sp, #8]
    7bc6:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    7bca:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    7bcc:	fba1 010a 	umull	r0, r1, r1, sl
    7bd0:	a30d      	add	r3, pc, #52	; (adr r3, 7c08 <isr+0x5c8>)
    7bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    7bd6:	f7f8 fb47 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7bda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7bde:	9000      	str	r0, [sp, #0]
    7be0:	465b      	mov	r3, fp
    7be2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7be4:	4621      	mov	r1, r4
    7be6:	4620      	mov	r0, r4
    7be8:	f7fc f932 	bl	3e50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7bec:	f030 0302 	bics.w	r3, r0, #2
    7bf0:	f43f adb0 	beq.w	7754 <isr+0x114>
    7bf4:	4b07      	ldr	r3, [pc, #28]	; (7c14 <isr+0x5d4>)
    7bf6:	e9cd 3300 	strd	r3, r3, [sp]
    7bfa:	4b07      	ldr	r3, [pc, #28]	; (7c18 <isr+0x5d8>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7bfc:	4a07      	ldr	r2, [pc, #28]	; (7c1c <isr+0x5dc>)
    7bfe:	4908      	ldr	r1, [pc, #32]	; (7c20 <isr+0x5e0>)
    7c00:	4810      	ldr	r0, [pc, #64]	; (7c44 <isr+0x604>)
    7c02:	e700      	b.n	7a06 <isr+0x3c6>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    7c04:	72c3      	strb	r3, [r0, #11]
    7c06:	e72f      	b.n	7a68 <isr+0x428>
    7c08:	1afd498d 	.word	0x1afd498d
    7c0c:	00000007 	.word	0x00000007
    7c10:	026259ff 	.word	0x026259ff
    7c14:	0000bda7 	.word	0x0000bda7
    7c18:	0000cf7e 	.word	0x0000cf7e
    7c1c:	0000c71e 	.word	0x0000c71e
    7c20:	0000c693 	.word	0x0000c693
    7c24:	0000d769 	.word	0x0000d769
    7c28:	0000d4a8 	.word	0x0000d4a8
    7c2c:	000f4240 	.word	0x000f4240
    7c30:	3b9aca00 	.word	0x3b9aca00
    7c34:	000056b1 	.word	0x000056b1
    7c38:	1afd498d 	.word	0x1afd498d
    7c3c:	00005675 	.word	0x00005675
    7c40:	00007575 	.word	0x00007575
    7c44:	0000d317 	.word	0x0000d317
		if (crc_ok &&
    7c48:	f1b8 0f00 	cmp.w	r8, #0
    7c4c:	f000 8229 	beq.w	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    7c50:	f890 30e1 	ldrb.w	r3, [r0, #225]	; 0xe1
    7c54:	f3c3 1300 	ubfx	r3, r3, #4, #1
    7c58:	b113      	cbz	r3, 7c60 <isr+0x620>
		if (crc_ok &&
    7c5a:	2c00      	cmp	r4, #0
    7c5c:	f000 8221 	beq.w	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
	bool dir_report = false;
    7c60:	2200      	movs	r2, #0
    7c62:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    7c66:	f89b 1139 	ldrb.w	r1, [fp, #313]	; 0x139
    7c6a:	f8db 2134 	ldr.w	r2, [fp, #308]	; 0x134
    7c6e:	f852 7021 	ldr.w	r7, [r2, r1, lsl #2]
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7c72:	f8db 2100 	ldr.w	r2, [fp, #256]	; 0x100
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    7c76:	f107 0408 	add.w	r4, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7c7a:	b1da      	cbz	r2, 7cb4 <isr+0x674>
    7c7c:	f89b 217a 	ldrb.w	r2, [fp, #378]	; 0x17a
    7c80:	b12a      	cbz	r2, 7c8e <isr+0x64e>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7c82:	f89b 2178 	ldrb.w	r2, [fp, #376]	; 0x178
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7c86:	f89b 1179 	ldrb.w	r1, [fp, #377]	; 0x179
    7c8a:	4291      	cmp	r1, r2
    7c8c:	d112      	bne.n	7cb4 <isr+0x674>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d164      	bne.n	7d5c <isr+0x71c>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    7c92:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    7c96:	7a3b      	ldrb	r3, [r7, #8]
    7c98:	f3c2 1280 	ubfx	r2, r2, #6, #1
    7c9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7ca0:	429a      	cmp	r2, r3
    7ca2:	d107      	bne.n	7cb4 <isr+0x674>
		(memcmp(&_radio.scanner.adv_addr[0],
    7ca4:	2206      	movs	r2, #6
    7ca6:	f107 010a 	add.w	r1, r7, #10
    7caa:	48b3      	ldr	r0, [pc, #716]	; (7f78 <isr+0x938>)
    7cac:	f7f8 fc87 	bl	5be <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    7cb0:	2800      	cmp	r0, #0
    7cb2:	d053      	beq.n	7d5c <isr+0x71c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    7cb4:	7a3b      	ldrb	r3, [r7, #8]
    7cb6:	f013 030f 	ands.w	r3, r3, #15
    7cba:	d002      	beq.n	7cc2 <isr+0x682>
    7cbc:	2b06      	cmp	r3, #6
    7cbe:	f040 81fd 	bne.w	80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>
		 (_radio.scanner.type != 0) &&
    7cc2:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    7cc6:	0712      	lsls	r2, r2, #28
    7cc8:	f140 81e7 	bpl.w	809a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a>
		 (_radio.scanner.type != 0) &&
    7ccc:	f8db 2100 	ldr.w	r2, [fp, #256]	; 0x100
    7cd0:	2a00      	cmp	r2, #0
    7cd2:	f040 81e2 	bne.w	809a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a>
		err = isr_rx_scan_report(rssi_ready,
    7cd6:	4628      	mov	r0, r5
    7cd8:	f7fe fa5c 	bl	6194 <isr_rx_scan_report.isra.36>
		if (err) {
    7cdc:	4605      	mov	r5, r0
    7cde:	2800      	cmp	r0, #0
    7ce0:	f040 81df 	bne.w	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7ce4:	f002 faf0 	bl	a2c8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    7ce8:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    7cea:	49a4      	ldr	r1, [pc, #656]	; (7f7c <isr+0x93c>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    7cec:	2203      	movs	r2, #3
    7cee:	f362 0303 	bfi	r3, r2, #0, #4
    7cf2:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    7cf4:	7a3a      	ldrb	r2, [r7, #8]
    7cf6:	b2db      	uxtb	r3, r3
    7cf8:	f3c2 1280 	ubfx	r2, r2, #6, #1
    7cfc:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    7d00:	220c      	movs	r2, #12
    7d02:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7d04:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    7d08:	09d2      	lsrs	r2, r2, #7
    7d0a:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7d0e:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    7d10:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7d12:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    7d16:	f7f8 fc62 	bl	5de <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    7d1a:	2206      	movs	r2, #6
    7d1c:	f107 010a 	add.w	r1, r7, #10
    7d20:	f104 0008 	add.w	r0, r4, #8
    7d24:	f7f8 fc5b 	bl	5de <memcpy>
		_radio.scanner.state = 1;
    7d28:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
    7d2c:	f043 0302 	orr.w	r3, r3, #2
    7d30:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
		radio_tmr_tifs_set(RADIO_TIFS);
    7d34:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    7d36:	2302      	movs	r3, #2
    7d38:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    7d3c:	f002 fb58 	bl	a3f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    7d40:	4628      	mov	r0, r5
    7d42:	f002 fac5 	bl	a2d0 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    7d46:	4620      	mov	r0, r4
    7d48:	f002 fa48 	bl	a1dc <radio_pkt_tx_set>
		radio_tmr_end_capture();
    7d4c:	f002 fc2c 	bl	a5a8 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    7d50:	f002 fa82 	bl	a258 <radio_is_ready>
    7d54:	2800      	cmp	r0, #0
    7d56:	f43f acfd 	beq.w	7754 <isr+0x114>
    7d5a:	e0aa      	b.n	7eb2 <isr+0x872>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    7d5c:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    7d5e:	f013 030f 	ands.w	r3, r3, #15
    7d62:	f040 80ab 	bne.w	7ebc <isr+0x87c>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    7d66:	f002 fc31 	bl	a5cc <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7d6a:	f8db 30dc 	ldr.w	r3, [fp, #220]	; 0xdc
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    7d6e:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    7d72:	4883      	ldr	r0, [pc, #524]	; (7f80 <isr+0x940>)
    7d74:	2207      	movs	r2, #7
    7d76:	fba3 0100 	umull	r0, r1, r3, r0
    7d7a:	fb02 1103 	mla	r1, r2, r3, r1
    7d7e:	a37c      	add	r3, pc, #496	; (adr r3, 7f70 <isr+0x930>)
    7d80:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d84:	f7f8 fa70 	bl	268 <__aeabi_uldivmod>
    7d88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    7d8c:	4286      	cmp	r6, r0
    7d8e:	d291      	bcs.n	7cb4 <isr+0x674>
			node_rx = packet_rx_reserve_get(4);
    7d90:	2004      	movs	r0, #4
    7d92:	f7fd f8f1 	bl	4f78 <packet_rx_reserve_get>
		if (node_rx == 0) {
    7d96:	4682      	mov	sl, r0
    7d98:	2800      	cmp	r0, #0
    7d9a:	f000 8182 	beq.w	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
		_radio.state = STATE_STOP;
    7d9e:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    7da0:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    7da2:	f8db 4100 	ldr.w	r4, [fp, #256]	; 0x100
		_radio.state = STATE_STOP;
    7da6:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    7daa:	f8cb 3100 	str.w	r3, [fp, #256]	; 0x100
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7dae:	f002 fa8b 	bl	a2c8 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    7db2:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7db4:	4971      	ldr	r1, [pc, #452]	; (7f7c <isr+0x93c>)
			pdu_adv_tx->chan_sel = 1;
    7db6:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    7dba:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    7dbe:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    7dc0:	7a3a      	ldrb	r2, [r7, #8]
    7dc2:	b2db      	uxtb	r3, r3
    7dc4:	f3c2 1280 	ubfx	r2, r2, #6, #1
    7dc8:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    7dcc:	2222      	movs	r2, #34	; 0x22
    7dce:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7dd0:	f89b 20e1 	ldrb.w	r2, [fp, #225]	; 0xe1
    7dd4:	09d2      	lsrs	r2, r2, #7
    7dd6:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7dda:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7ddc:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7dde:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    7de2:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7de6:	f7f8 fbfa 	bl	5de <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    7dea:	2206      	movs	r2, #6
    7dec:	f107 010a 	add.w	r1, r7, #10
    7df0:	4648      	mov	r0, r9
    7df2:	f7f8 fbf4 	bl	5de <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    7df6:	4632      	mov	r2, r6
    7df8:	f104 0110 	add.w	r1, r4, #16
    7dfc:	f105 000e 	add.w	r0, r5, #14
    7e00:	f7f8 fbed 	bl	5de <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    7e04:	2203      	movs	r2, #3
    7e06:	f104 0114 	add.w	r1, r4, #20
    7e0a:	f105 0012 	add.w	r0, r5, #18
    7e0e:	f7f8 fbe6 	bl	5de <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    7e12:	2301      	movs	r3, #1
    7e14:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    7e16:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
		conn_interval_us =
    7e1a:	f240 46e2 	movw	r6, #1250	; 0x4e2
    7e1e:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    7e20:	f002 fbd4 	bl	a5cc <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    7e24:	f8db 200c 	ldr.w	r2, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    7e28:	f8db 8104 	ldr.w	r8, [fp, #260]	; 0x104
		if (!_radio.remainder_anchor ||
    7e2c:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    7e2e:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    7e32:	bfd8      	it	le
    7e34:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    7e38:	f1b8 0f00 	cmp.w	r8, #0
    7e3c:	d14a      	bne.n	7ed4 <isr+0x894>
			pdu_adv_tx->connect_ind.win_offset = 0;
    7e3e:	f885 8016 	strb.w	r8, [r5, #22]
    7e42:	f885 8017 	strb.w	r8, [r5, #23]
    7e46:	4698      	mov	r8, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    7e48:	2100      	movs	r1, #0
    7e4a:	4608      	mov	r0, r1
    7e4c:	f002 f9cc 	bl	a1e8 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    7e50:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    7e52:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    7e56:	4608      	mov	r0, r1
    7e58:	f002 f9cb 	bl	a1f2 <radio_tx_chain_delay_get>
    7e5c:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    7e60:	f100 031e 	add.w	r3, r0, #30
    7e64:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    7e66:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
    7e6a:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    7e6c:	f8bb 30f6 	ldrh.w	r3, [fp, #246]	; 0xf6
    7e70:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    7e72:	f8bb 30f8 	ldrh.w	r3, [fp, #248]	; 0xf8
    7e76:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    7e78:	f104 0117 	add.w	r1, r4, #23
    7e7c:	2205      	movs	r2, #5
    7e7e:	f105 001e 	add.w	r0, r5, #30
    7e82:	f7f8 fbac 	bl	5de <memcpy>
		pdu_adv_tx->connect_ind.hop =
    7e86:	7fa2      	ldrb	r2, [r4, #30]
    7e88:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    7e8c:	f362 0304 	bfi	r3, r2, #0, #5
    7e90:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    7e94:	f89b 2120 	ldrb.w	r2, [fp, #288]	; 0x120
    7e98:	f362 1347 	bfi	r3, r2, #5, #3
    7e9c:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    7ea0:	f002 fa2c 	bl	a2fc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    7ea4:	4628      	mov	r0, r5
    7ea6:	f002 f999 	bl	a1dc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    7eaa:	f002 f9d5 	bl	a258 <radio_is_ready>
    7eae:	4680      	mov	r8, r0
    7eb0:	b300      	cbz	r0, 7ef4 <isr+0x8b4>
		LL_ASSERT(!radio_is_ready());
    7eb2:	4b34      	ldr	r3, [pc, #208]	; (7f84 <isr+0x944>)
    7eb4:	e9cd 3300 	strd	r3, r3, [sp]
    7eb8:	4b33      	ldr	r3, [pc, #204]	; (7f88 <isr+0x948>)
    7eba:	e418      	b.n	76ee <isr+0xae>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    7ebc:	2b01      	cmp	r3, #1
    7ebe:	f47f aef9 	bne.w	7cb4 <isr+0x674>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    7ec2:	2100      	movs	r1, #0
    7ec4:	4620      	mov	r0, r4
    7ec6:	f7fe f8c1 	bl	604c <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7eca:	2800      	cmp	r0, #0
    7ecc:	f47f af4b 	bne.w	7d66 <isr+0x726>
    7ed0:	e6f0      	b.n	7cb4 <isr+0x674>
				conn_space_us += conn_interval_us;
    7ed2:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    7ed4:	f1b8 0f00 	cmp.w	r8, #0
    7ed8:	dbfb      	blt.n	7ed2 <isr+0x892>
    7eda:	4598      	cmp	r8, r3
    7edc:	d3f9      	bcc.n	7ed2 <isr+0x892>
				(conn_space_us - conn_offset_us) / 1250;
    7ede:	eba8 0303 	sub.w	r3, r8, r3
			pdu_adv_tx->connect_ind.win_offset =
    7ee2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    7ee6:	fbb3 f3f2 	udiv	r3, r3, r2
    7eea:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    7eec:	7d6b      	ldrb	r3, [r5, #21]
    7eee:	3301      	adds	r3, #1
    7ef0:	756b      	strb	r3, [r5, #21]
    7ef2:	e7a9      	b.n	7e48 <isr+0x808>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
    7ef8:	f8db 1108 	ldr.w	r1, [fp, #264]	; 0x108
    7efc:	4620      	mov	r0, r4
    7efe:	f7fb f972 	bl	31e6 <mem_index_get>
    7f02:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    7f04:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    7f08:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    7f0c:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    7f0e:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7f12:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    7f14:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7f18:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7f1c:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    7f1e:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7f22:	f10a 000e 	add.w	r0, sl, #14
    7f26:	f7f8 fb5a 	bl	5de <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    7f2a:	f8bb 30f4 	ldrh.w	r3, [fp, #244]	; 0xf4
    7f2e:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    7f32:	f8bb 30f6 	ldrh.w	r3, [fp, #246]	; 0xf6
    7f36:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    7f3a:	f8bb 30f8 	ldrh.w	r3, [fp, #248]	; 0xf8
    7f3e:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    7f42:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    7f46:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    7f4a:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    7f4e:	8c20      	ldrh	r0, [r4, #32]
    7f50:	f7fd fb76 	bl	5640 <rx_fc_lock>
		packet_rx_enqueue();
    7f54:	f7fd fb28 	bl	55a8 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    7f58:	2003      	movs	r0, #3
    7f5a:	f7fd f80d 	bl	4f78 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7f5e:	b9a8      	cbnz	r0, 7f8c <isr+0x94c>
    7f60:	4b08      	ldr	r3, [pc, #32]	; (7f84 <isr+0x944>)
    7f62:	e9cd 3300 	strd	r3, r3, [sp]
    7f66:	4b08      	ldr	r3, [pc, #32]	; (7f88 <isr+0x948>)
    7f68:	e54a      	b.n	7a00 <isr+0x3c0>
    7f6a:	bf00      	nop
    7f6c:	f3af 8000 	nop.w
    7f70:	3b9aca00 	.word	0x3b9aca00
    7f74:	00000000 	.word	0x00000000
    7f78:	20000a18 	.word	0x20000a18
    7f7c:	20000a12 	.word	0x20000a12
    7f80:	1afd498d 	.word	0x1afd498d
    7f84:	0000bda7 	.word	0x0000bda7
    7f88:	0000cf9c 	.word	0x0000cf9c
			node_rx->hdr.handle = conn->handle;
    7f8c:	8c23      	ldrh	r3, [r4, #32]
    7f8e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    7f90:	230a      	movs	r3, #10
    7f92:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    7f94:	7a3b      	ldrb	r3, [r7, #8]
    7f96:	f013 0320 	ands.w	r3, r3, #32
    7f9a:	d00e      	beq.n	7fba <isr+0x97a>
					((u16_t)conn->access_addr[1] << 8) |
    7f9c:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    7f9e:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    7fa0:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    7fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    7fa6:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    7fa8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    7fac:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7fae:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    7fb0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    7fb4:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    7fb6:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    7fb8:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    7fba:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    7fbc:	f7fd faf4 	bl	55a8 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    7fc0:	f8db 317c 	ldr.w	r3, [fp, #380]	; 0x17c
    7fc4:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    7fc6:	2b27      	cmp	r3, #39	; 0x27
    7fc8:	bf38      	it	cc
    7fca:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    7fcc:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    7fce:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    7fd0:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    7fd2:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    7fd4:	f8db 20fc 	ldr.w	r2, [fp, #252]	; 0xfc
    7fd8:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7fda:	f240 633c 	movw	r3, #1596	; 0x63c
    7fde:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    7fe0:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7fe2:	4629      	mov	r1, r5
    7fe4:	9300      	str	r3, [sp, #0]
    7fe6:	4628      	mov	r0, r5
    7fe8:	4bb5      	ldr	r3, [pc, #724]	; (82c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c0>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7fea:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7fee:	f7fb ffc3 	bl	3f78 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    7ff2:	f240 613d 	movw	r1, #1597	; 0x63d
    7ff6:	f7fd fb8f 	bl	5718 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7ffa:	462b      	mov	r3, r5
    7ffc:	2204      	movs	r2, #4
    7ffe:	4629      	mov	r1, r5
    8000:	9500      	str	r5, [sp, #0]
    8002:	4628      	mov	r0, r5
    8004:	f7fb ffb8 	bl	3f78 <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8008:	f8db 3008 	ldr.w	r3, [fp, #8]
    800c:	f894 9020 	ldrb.w	r9, [r4, #32]
    8010:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    8014:	f240 6354 	movw	r3, #1620	; 0x654
    8018:	9308      	str	r3, [sp, #32]
    801a:	4baa      	ldr	r3, [pc, #680]	; (82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>)
    801c:	e9cd 4306 	strd	r4, r3, [sp, #24]
    8020:	4ba9      	ldr	r3, [pc, #676]	; (82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>)
    8022:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8024:	68e3      	ldr	r3, [r4, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8026:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    802a:	4443      	add	r3, r8
		ticker_status =
    802c:	e9cd 5303 	strd	r5, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    8030:	4630      	mov	r0, r6
    8032:	a3a1      	add	r3, pc, #644	; (adr r3, 82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>)
    8034:	e9d3 2300 	ldrd	r2, r3, [r3]
    8038:	4639      	mov	r1, r7
    803a:	f7f8 f915 	bl	268 <__aeabi_uldivmod>
    803e:	4610      	mov	r0, r2
    8040:	4619      	mov	r1, r3
    8042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8046:	2300      	movs	r3, #0
    8048:	f7f8 f90e 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    804c:	a39a      	add	r3, pc, #616	; (adr r3, 82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>)
    804e:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8052:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    8054:	4639      	mov	r1, r7
    8056:	4630      	mov	r0, r6
    8058:	f7f8 f906 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    805c:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    805e:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    8060:	a395      	add	r3, pc, #596	; (adr r3, 82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>)
    8062:	e9d3 2300 	ldrd	r2, r3, [r3]
    8066:	fba1 010a 	umull	r0, r1, r1, sl
    806a:	f7f8 f8fd 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    806e:	f109 0907 	add.w	r9, r9, #7
    8072:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    8076:	fa5f f989 	uxtb.w	r9, r9
    807a:	9000      	str	r0, [sp, #0]
    807c:	465b      	mov	r3, fp
    807e:	464a      	mov	r2, r9
    8080:	4629      	mov	r1, r5
    8082:	4628      	mov	r0, r5
    8084:	f7fb fee4 	bl	3e50 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8088:	f030 0302 	bics.w	r3, r0, #2
    808c:	f43f ab62 	beq.w	7754 <isr+0x114>
    8090:	4b8e      	ldr	r3, [pc, #568]	; (82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>)
    8092:	e9cd 3300 	strd	r3, r3, [sp]
    8096:	4b8e      	ldr	r3, [pc, #568]	; (82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>)
    8098:	e5b0      	b.n	7bfc <isr+0x5bc>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    809a:	b97b      	cbnz	r3, 80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    809c:	7a7b      	ldrb	r3, [r7, #9]
    809e:	2b00      	cmp	r3, #0
    80a0:	d13b      	bne.n	811a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a>
			_radio.state = STATE_CLOSE;
    80a2:	2303      	movs	r3, #3
    80a4:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    80a8:	f002 f8b8 	bl	a21c <radio_disable>
			_radio.scanner.state = 0;
    80ac:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
    80b0:	f36f 0341 	bfc	r3, #1, #1
    80b4:	f88b 30e0 	strb.w	r3, [fp, #224]	; 0xe0
    80b8:	f7ff bb4c 	b.w	7754 <isr+0x114>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    80bc:	2b01      	cmp	r3, #1
    80be:	d00d      	beq.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    80c0:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    80c2:	f003 020b 	and.w	r2, r3, #11
    80c6:	2a02      	cmp	r2, #2
    80c8:	d0e8      	beq.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    80ca:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    80ce:	2b07      	cmp	r3, #7
    80d0:	d10b      	bne.n	80ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xea>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    80d2:	f89b 30e1 	ldrb.w	r3, [fp, #225]	; 0xe1
    80d6:	075b      	lsls	r3, r3, #29
    80d8:	d1e0      	bne.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    80da:	e7e2      	b.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    80dc:	a90d      	add	r1, sp, #52	; 0x34
    80de:	4620      	mov	r0, r4
    80e0:	f7fd ffb4 	bl	604c <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    80e4:	2800      	cmp	r0, #0
    80e6:	d1d9      	bne.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    80e8:	e7ea      	b.n	80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>
		   (_radio.scanner.phy)) ||
    80ea:	2b04      	cmp	r3, #4
    80ec:	d1d9      	bne.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
		   (_radio.scanner.state != 0) &&
    80ee:	f89b 30e0 	ldrb.w	r3, [fp, #224]	; 0xe0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    80f2:	079e      	lsls	r6, r3, #30
    80f4:	d5d5      	bpl.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    80f6:	f002 f8e7 	bl	a2c8 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    80fa:	7a3b      	ldrb	r3, [r7, #8]
    80fc:	7802      	ldrb	r2, [r0, #0]
    80fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
    8102:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    8106:	d1cc      	bne.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
		(memcmp(&sreq->scan_req.adv_addr[0],
    8108:	2206      	movs	r2, #6
    810a:	f107 010a 	add.w	r1, r7, #10
    810e:	3008      	adds	r0, #8
    8110:	f7f8 fa55 	bl	5be <memcmp>
		   (_radio.scanner.state != 0) &&
    8114:	2800      	cmp	r0, #0
    8116:	d0c1      	beq.n	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    8118:	e7c3      	b.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    811a:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
    811e:	2b00      	cmp	r3, #0
    8120:	d1bf      	bne.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
		err = isr_rx_scan_report(rssi_ready,
    8122:	4628      	mov	r0, r5
    8124:	f7fe f836 	bl	6194 <isr_rx_scan_report.isra.36>
    8128:	e7bb      	b.n	80a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa2>
	_radio.packet_counter++;
    812a:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    812e:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
	_radio.packet_counter++;
    8132:	3301      	adds	r3, #1
    8134:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    8138:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    813c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    8140:	2301      	movs	r3, #1
    8142:	7133      	strb	r3, [r6, #4]
    8144:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
	if (crc_ok) {
    8148:	f1b8 0f00 	cmp.w	r8, #0
    814c:	f000 836c 	beq.w	8828 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x828>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    8150:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8154:	7a30      	ldrb	r0, [r6, #8]
    8156:	f002 0101 	and.w	r1, r2, #1
    815a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    815e:	4288      	cmp	r0, r1
    8160:	f000 80c2 	beq.w	82e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e8>
		_radio.conn_curr->sn++;
    8164:	f081 0101 	eor.w	r1, r1, #1
    8168:	f361 0200 	bfi	r2, r1, #0, #1
    816c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    8170:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8174:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    8176:	bf02      	ittt	eq
    8178:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    817c:	f042 0201 	orreq.w	r2, r2, #1
    8180:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    8184:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    8188:	0614      	lsls	r4, r2, #24
    818a:	f100 80a9 	bmi.w	82e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e0>
			node_tx = _radio.conn_curr->pkt_tx_head;
    818e:	f8d3 70ec 	ldr.w	r7, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    8192:	f893 c101 	ldrb.w	ip, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    8196:	f107 0e04 	add.w	lr, r7, #4
    819a:	eb0e 050c 	add.w	r5, lr, ip
			pdu_data_tx_len = pdu_data_tx->len;
    819e:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    81a0:	b90c      	cbnz	r4, 81a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a6>
	u8_t terminate = 0;
    81a2:	2500      	movs	r5, #0
    81a4:	e02c      	b.n	8200 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x200>
				if (_radio.conn_curr->enc_tx) {
    81a6:	0690      	lsls	r0, r2, #26
    81a8:	d50b      	bpl.n	81c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c2>
					_radio.conn_curr->ccm_tx.counter++;
    81aa:	f8d3 90da 	ldr.w	r9, [r3, #218]	; 0xda
    81ae:	f8d3 a0de 	ldr.w	sl, [r3, #222]	; 0xde
    81b2:	f119 0001 	adds.w	r0, r9, #1
    81b6:	f14a 0100 	adc.w	r1, sl, #0
    81ba:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    81be:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    81c2:	f81e 300c 	ldrb.w	r3, [lr, ip]
    81c6:	f003 0303 	and.w	r3, r3, #3
    81ca:	2b03      	cmp	r3, #3
    81cc:	d1e9      	bne.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
	switch (pdu_data_tx->llctrl.opcode) {
    81ce:	78ea      	ldrb	r2, [r5, #3]
    81d0:	2a02      	cmp	r2, #2
    81d2:	d1e6      	bne.n	81a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2>
		_radio.state = STATE_CLOSE;
    81d4:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    81d8:	f002 f820 	bl	a21c <radio_disable>
		LL_ASSERT(!radio_is_ready());
    81dc:	f002 f83c 	bl	a258 <radio_is_ready>
    81e0:	b128      	cbz	r0, 81ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ee>
    81e2:	4b3a      	ldr	r3, [pc, #232]	; (82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>)
    81e4:	e9cd 3300 	strd	r3, r3, [sp]
    81e8:	4b3a      	ldr	r3, [pc, #232]	; (82d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d4>)
    81ea:	f7ff ba80 	b.w	76ee <isr+0xae>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    81ee:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    81f0:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    81f4:	2913      	cmp	r1, #19
    81f6:	bf08      	it	eq
    81f8:	2116      	moveq	r1, #22
    81fa:	f7fd ff87 	bl	610c <terminate_ind_rx_enqueue>
		terminate = 1;
    81fe:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8200:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
    8204:	f892 3101 	ldrb.w	r3, [r2, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8208:	f892 1100 	ldrb.w	r1, [r2, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    820c:	4423      	add	r3, r4
    820e:	b2db      	uxtb	r3, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    8210:	4299      	cmp	r1, r3
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    8212:	f882 3101 	strb.w	r3, [r2, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    8216:	d02a      	beq.n	826e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26e>
	return NULL;
    8218:	2700      	movs	r7, #0
	if (terminate) {
    821a:	2d00      	cmp	r5, #0
    821c:	d065      	beq.n	82ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2ea>
		connection_release(_radio.conn_curr);
    821e:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8222:	f7fd fc9f 	bl	5b64 <connection_release>
		_radio.conn_curr = NULL;
    8226:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    8228:	f8cb 5114 	str.w	r5, [fp, #276]	; 0x114
	if (!radio_tmr_aa_restore()) {
    822c:	f002 f9b0 	bl	a590 <radio_tmr_aa_restore>
    8230:	b918      	cbnz	r0, 823a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23a>
		radio_tmr_aa_save(radio_tmr_aa_get());
    8232:	f002 f9a1 	bl	a578 <radio_tmr_aa_get>
    8236:	f002 f9a5 	bl	a584 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    823a:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    823e:	2b00      	cmp	r3, #0
    8240:	f43f aa88 	beq.w	7754 <isr+0x114>
	if (tx_release) {
    8244:	b11f      	cbz	r7, 824e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24e>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    8246:	4639      	mov	r1, r7
    8248:	8c18      	ldrh	r0, [r3, #32]
    824a:	f7fd fbff 	bl	5a4c <pdu_node_tx_release>
	if (rx_enqueue) {
    824e:	2d00      	cmp	r5, #0
    8250:	f43f aa80 	beq.w	7754 <isr+0x114>
		rx_fc_lock(_radio.conn_curr->handle);
    8254:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    8258:	8c18      	ldrh	r0, [r3, #32]
    825a:	f7fd f9f1 	bl	5640 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    825e:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    8262:	8c1b      	ldrh	r3, [r3, #32]
    8264:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    8266:	f7fd f99f 	bl	55a8 <packet_rx_enqueue>
    826a:	f7ff ba73 	b.w	7754 <isr+0x114>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    826e:	e9d2 313b 	ldrd	r3, r1, [r2, #236]	; 0xec
	conn->packet_tx_head_len = 0;
    8272:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    8274:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    8276:	f8a2 0100 	strh.w	r0, [r2, #256]	; 0x100
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    827a:	d111      	bne.n	82a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a0>
		if (node_tx) {
    827c:	2f00      	cmp	r7, #0
    827e:	d0cb      	beq.n	8218 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x218>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    8280:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    8284:	681c      	ldr	r4, [r3, #0]
    8286:	f8c2 40ec 	str.w	r4, [r2, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    828a:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl_last = NULL;
    828c:	bf0c      	ite	eq
    828e:	e9c2 003c 	strdeq	r0, r0, [r2, #240]	; 0xf0
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    8292:	f8c2 40f0 	strne.w	r4, [r2, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    8296:	4910      	ldr	r1, [pc, #64]	; (82d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d8>)
    8298:	4638      	mov	r0, r7
    829a:	f7fa ff8c 	bl	31b6 <mem_release>
    829e:	e7bb      	b.n	8218 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x218>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    82a0:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
    82a4:	6818      	ldr	r0, [r3, #0]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    82a6:	f8c2 00ec 	str.w	r0, [r2, #236]	; 0xec
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    82aa:	428b      	cmp	r3, r1
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    82ac:	bf08      	it	eq
    82ae:	f8c2 00f8 	streq.w	r0, [r2, #248]	; 0xf8
    82b2:	e7b2      	b.n	821a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21a>
    82b4:	f3af 8000 	nop.w
    82b8:	1afd498d 	.word	0x1afd498d
    82bc:	00000007 	.word	0x00000007
    82c0:	00005719 	.word	0x00005719
    82c4:	00005675 	.word	0x00005675
    82c8:	00007579 	.word	0x00007579
    82cc:	0000bda7 	.word	0x0000bda7
    82d0:	0000cf9c 	.word	0x0000cf9c
    82d4:	0000cfa8 	.word	0x0000cfa8
    82d8:	20000a84 	.word	0x20000a84
    82dc:	3b9aca00 	.word	0x3b9aca00
			_radio.conn_curr->empty = 0;
    82e0:	f36f 12c7 	bfc	r2, #7, #1
    82e4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	struct radio_pdu_node_tx *tx_release = NULL;
    82e8:	2700      	movs	r7, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    82ea:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    82ee:	7a32      	ldrb	r2, [r6, #8]
    82f0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    82f4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    82f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    82fc:	429a      	cmp	r2, r3
    82fe:	f040 81a0 	bne.w	8642 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x642>
	    (packet_rx_reserve_get(3) != 0) &&
    8302:	2003      	movs	r0, #3
    8304:	f7fc fe38 	bl	4f78 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8308:	2800      	cmp	r0, #0
    830a:	f000 819a 	beq.w	8642 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x642>
	    (packet_rx_reserve_get(3) != 0) &&
    830e:	f89b 317a 	ldrb.w	r3, [fp, #378]	; 0x17a
    8312:	b383      	cbz	r3, 8376 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x376>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8314:	f8db 3144 	ldr.w	r3, [fp, #324]	; 0x144
    8318:	f8db 2148 	ldr.w	r2, [fp, #328]	; 0x148
	    ((_radio.fc_ena == 0) ||
    831c:	4293      	cmp	r3, r2
    831e:	d105      	bne.n	832c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32c>
	      (_radio.fc_req == _radio.fc_ack)) ||
    8320:	f89b 2178 	ldrb.w	r2, [fp, #376]	; 0x178
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8324:	f89b 1179 	ldrb.w	r1, [fp, #377]	; 0x179
    8328:	4291      	cmp	r1, r2
    832a:	d024      	beq.n	8376 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x376>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    832c:	f8db 2148 	ldr.w	r2, [fp, #328]	; 0x148
	      (_radio.fc_req == _radio.fc_ack)) ||
    8330:	4293      	cmp	r3, r2
    8332:	f000 8186 	beq.w	8642 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x642>
	      (_radio.fc_req != _radio.fc_ack) &&
    8336:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    833a:	f89b 2179 	ldrb.w	r2, [fp, #377]	; 0x179
    833e:	429a      	cmp	r2, r3
    8340:	f000 817f 	beq.w	8642 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x642>
		(((_radio.fc_req == 0) &&
    8344:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    8348:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
	      (_radio.fc_req != _radio.fc_ack) &&
    834c:	b923      	cbnz	r3, 8358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x358>
		(((_radio.fc_req == 0) &&
    834e:	f8bb 1176 	ldrh.w	r1, [fp, #374]	; 0x176
    8352:	8c13      	ldrh	r3, [r2, #32]
    8354:	4299      	cmp	r1, r3
    8356:	d00e      	beq.n	8376 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x376>
		 ((_radio.fc_req != 0) &&
    8358:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
		   _radio.conn_curr->handle)) ||
    835c:	2b00      	cmp	r3, #0
    835e:	f000 8170 	beq.w	8642 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x642>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    8362:	f89b 3178 	ldrb.w	r3, [fp, #376]	; 0x178
    8366:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    836a:	f8b3 1170 	ldrh.w	r1, [r3, #368]	; 0x170
    836e:	8c13      	ldrh	r3, [r2, #32]
    8370:	4299      	cmp	r1, r3
    8372:	f040 8166 	bne.w	8642 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x642>
		if (pdu_data_rx->len != 0) {
    8376:	f896 9009 	ldrb.w	r9, [r6, #9]
    837a:	f1b9 0f00 	cmp.w	r9, #0
    837e:	f000 8142 	beq.w	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
			if (_radio.conn_curr->enc_rx) {
    8382:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    8386:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    838a:	f019 0910 	ands.w	r9, r9, #16
    838e:	d00d      	beq.n	83ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ac>
				done = radio_ccm_is_done();
    8390:	f002 f98a 	bl	a6a8 <radio_ccm_is_done>
				LL_ASSERT(done);
    8394:	b940      	cbnz	r0, 83a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a8>
    8396:	4bb0      	ldr	r3, [pc, #704]	; (8658 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x658>)
    8398:	4ab0      	ldr	r2, [pc, #704]	; (865c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65c>)
    839a:	49b1      	ldr	r1, [pc, #708]	; (8660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x660>)
    839c:	48b1      	ldr	r0, [pc, #708]	; (8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>)
    839e:	e9cd 3300 	strd	r3, r3, [sp]
    83a2:	4bb1      	ldr	r3, [pc, #708]	; (8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>)
    83a4:	f7ff bb2f 	b.w	7a06 <isr+0x3c6>
				ccm_rx_increment = 1;
    83a8:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    83ac:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    83b0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    83b4:	06d9      	lsls	r1, r3, #27
    83b6:	d40f      	bmi.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
			    (_radio.conn_curr->pause_rx &&
    83b8:	f8db 4114 	ldr.w	r4, [fp, #276]	; 0x114
    83bc:	7a33      	ldrb	r3, [r6, #8]
    83be:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    83c2:	f012 0f04 	tst.w	r2, #4
    83c6:	d11a      	bne.n	83fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3fe>
			switch (pdu_data_rx->ll_id) {
    83c8:	f013 0303 	ands.w	r3, r3, #3
    83cc:	f000 811b 	beq.w	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
    83d0:	2b02      	cmp	r3, #2
    83d2:	d84b      	bhi.n	846c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46c>
				*rx_enqueue = 1;
    83d4:	2501      	movs	r5, #1
    83d6:	e0bf      	b.n	8558 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x558>
			     !radio_ccm_mic_is_valid()) ||
    83d8:	f002 f984 	bl	a6e4 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    83dc:	2800      	cmp	r0, #0
    83de:	d1eb      	bne.n	83b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b8>
				_radio.state = STATE_CLOSE;
    83e0:	2303      	movs	r3, #3
    83e2:	f88b 3014 	strb.w	r3, [fp, #20]
				radio_disable();
    83e6:	f001 ff19 	bl	a21c <radio_disable>
				LL_ASSERT(!radio_is_ready());
    83ea:	f001 ff35 	bl	a258 <radio_is_ready>
    83ee:	4605      	mov	r5, r0
    83f0:	b390      	cbz	r0, 8458 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x458>
    83f2:	4b99      	ldr	r3, [pc, #612]	; (8658 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x658>)
    83f4:	e9cd 3300 	strd	r3, r3, [sp]
    83f8:	4b9b      	ldr	r3, [pc, #620]	; (8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>)
    83fa:	f7ff b978 	b.w	76ee <isr+0xae>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    83fe:	f003 0103 	and.w	r1, r3, #3
    8402:	2903      	cmp	r1, #3
    8404:	d1ec      	bne.n	83e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e0>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    8406:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    840a:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    840c:	2800      	cmp	r0, #0
    840e:	f002 0240 	and.w	r2, r2, #64	; 0x40
    8412:	db15      	blt.n	8440 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x440>
	       (!conn->role &&
    8414:	b922      	cbnz	r2, 8420 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x420>
		((!conn->refresh &&
    8416:	2902      	cmp	r1, #2
    8418:	d0d6      	beq.n	83c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    841a:	2911      	cmp	r1, #17
    841c:	d8e0      	bhi.n	83e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e0>
    841e:	e009      	b.n	8434 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x434>
		 (conn->refresh &&
    8420:	1e8a      	subs	r2, r1, #2
    8422:	b2d2      	uxtb	r2, r2
    8424:	2a09      	cmp	r2, #9
    8426:	d8f8      	bhi.n	841a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x41a>
    8428:	f240 2005 	movw	r0, #517	; 0x205
    842c:	fa20 f202 	lsr.w	r2, r0, r2
    8430:	07d2      	lsls	r2, r2, #31
    8432:	d4c9      	bmi.n	83c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8434:	4a8d      	ldr	r2, [pc, #564]	; (866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8436:	fa22 f101 	lsr.w	r1, r2, r1
    843a:	07cd      	lsls	r5, r1, #31
    843c:	d5d0      	bpl.n	83e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e0>
    843e:	e7c3      	b.n	83c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c8>
	       (conn->role &&
    8440:	b92a      	cbnz	r2, 844e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44e>
		((!conn->refresh &&
    8442:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    8444:	d0c0      	beq.n	83c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    8446:	2911      	cmp	r1, #17
    8448:	d8ca      	bhi.n	83e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e0>
    844a:	4a89      	ldr	r2, [pc, #548]	; (8670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x670>)
    844c:	e7f3      	b.n	8436 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x436>
		 (conn->refresh &&
    844e:	1e8a      	subs	r2, r1, #2
    8450:	2a01      	cmp	r2, #1
    8452:	d9b9      	bls.n	83c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    8454:	290b      	cmp	r1, #11
    8456:	e7f5      	b.n	8444 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x444>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    8458:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    845c:	213d      	movs	r1, #61	; 0x3d
    845e:	f7fd fe55 	bl	610c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    8462:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8466:	f7fd fb7d 	bl	5b64 <connection_release>
    846a:	e6dd      	b.n	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
	switch (pdu_data_rx->llctrl.opcode) {
    846c:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    846e:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    8472:	2d19      	cmp	r5, #25
    8474:	f200 8195 	bhi.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
    8478:	e8df f015 	tbh	[pc, r5, lsl #1]
    847c:	008c001a 	.word	0x008c001a
    8480:	019300c7 	.word	0x019300c7
    8484:	01930193 	.word	0x01930193
    8488:	01a70193 	.word	0x01a70193
    848c:	010200d0 	.word	0x010200d0
    8490:	01930193 	.word	0x01930193
    8494:	01930128 	.word	0x01930128
    8498:	019300e5 	.word	0x019300e5
    849c:	018c0193 	.word	0x018c0193
    84a0:	01930193 	.word	0x01930193
    84a4:	01930193 	.word	0x01930193
    84a8:	01930193 	.word	0x01930193
    84ac:	01ae0193 	.word	0x01ae0193
		if (!_radio.conn_curr->role ||
    84b0:	f994 301d 	ldrsb.w	r3, [r4, #29]
    84b4:	2b00      	cmp	r3, #0
    84b6:	f280 8174 	bge.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    84ba:	7a71      	ldrb	r1, [r6, #9]
    84bc:	2000      	movs	r0, #0
    84be:	f7fc fd13 	bl	4ee8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    84c2:	2800      	cmp	r0, #0
    84c4:	f000 816d 	beq.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    84c8:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    84cc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    84ce:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    84d0:	0418      	lsls	r0, r3, #16
    84d2:	f100 8095 	bmi.w	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    84d6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    84da:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    84de:	429a      	cmp	r2, r3
    84e0:	d008      	beq.n	84f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4f4>
    84e2:	4b5d      	ldr	r3, [pc, #372]	; (8658 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x658>)
    84e4:	e9cd 3300 	strd	r3, r3, [sp]
    84e8:	4b62      	ldr	r3, [pc, #392]	; (8674 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x674>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    84ea:	4a5c      	ldr	r2, [pc, #368]	; (865c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x65c>)
    84ec:	495c      	ldr	r1, [pc, #368]	; (8660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x660>)
    84ee:	4862      	ldr	r0, [pc, #392]	; (8678 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x678>)
    84f0:	f7ff ba89 	b.w	7a06 <isr+0x3c6>
	if (_radio.conn_upd == 0) {
    84f4:	f8db 2180 	ldr.w	r2, [fp, #384]	; 0x180
    84f8:	b90a      	cbnz	r2, 84fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4fe>
		_radio.conn_upd = conn;
    84fa:	f8cb 4180 	str.w	r4, [fp, #384]	; 0x180
	conn->llcp.conn_upd.win_size =
    84fe:	7b32      	ldrb	r2, [r6, #12]
    8500:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    8504:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    8508:	f240 42e2 	movw	r2, #1250	; 0x4e2
    850c:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    850e:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    8510:	7c30      	ldrb	r0, [r6, #16]
    8512:	7bf2      	ldrb	r2, [r6, #15]
    8514:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    8518:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    851c:	7cb0      	ldrb	r0, [r6, #18]
    851e:	7c72      	ldrb	r2, [r6, #17]
    8520:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    8524:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    8528:	7cf2      	ldrb	r2, [r6, #19]
    852a:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    852c:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    8530:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    8534:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    8538:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    853c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    8540:	f36f 0282 	bfc	r2, #2, #1
    8544:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    8548:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    854a:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    854c:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    854e:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    8552:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    8556:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    8558:	f8db 1114 	ldr.w	r1, [fp, #276]	; 0x114
    855c:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    8560:	f083 0302 	eor.w	r3, r3, #2
    8564:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    8568:	f1b9 0f00 	cmp.w	r9, #0
    856c:	d00b      	beq.n	8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
				_radio.conn_curr->ccm_rx.counter++;
    856e:	f8d1 90b9 	ldr.w	r9, [r1, #185]	; 0xb9
    8572:	f8d1 a0bd 	ldr.w	sl, [r1, #189]	; 0xbd
    8576:	f119 0201 	adds.w	r2, r9, #1
    857a:	f14a 0300 	adc.w	r3, sl, #0
    857e:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    8582:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
		_radio.conn_curr->supervision_expire = 0;
    8586:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
		_radio.crc_expire = 0;
    858a:	2400      	movs	r4, #0
    858c:	f88b 4119 	strb.w	r4, [fp, #281]	; 0x119
		_radio.conn_curr->supervision_expire = 0;
    8590:	861c      	strh	r4, [r3, #48]	; 0x30
    8592:	e15e      	b.n	8852 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x852>
		if (!_radio.conn_curr->role ||
    8594:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8598:	2b00      	cmp	r3, #0
    859a:	f280 8102 	bge.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    859e:	7a71      	ldrb	r1, [r6, #9]
    85a0:	2001      	movs	r0, #1
    85a2:	f7fc fca1 	bl	4ee8 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    85a6:	2800      	cmp	r0, #0
    85a8:	f000 80fb 	beq.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
	      conn->event_counter) & 0xffff) > 0x7fff) {
    85ac:	8c62      	ldrh	r2, [r4, #34]	; 0x22
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    85ae:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    85b2:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    85b4:	041a      	lsls	r2, r3, #16
    85b6:	d423      	bmi.n	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    85b8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    85bc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    85c0:	429a      	cmp	r2, r3
    85c2:	d004      	beq.n	85ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ce>
    85c4:	4b24      	ldr	r3, [pc, #144]	; (8658 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x658>)
    85c6:	e9cd 3300 	strd	r3, r3, [sp]
    85ca:	4b2c      	ldr	r3, [pc, #176]	; (867c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67c>)
    85cc:	e78d      	b.n	84ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ea>
	memcpy(&conn->llcp.chan_map.chm[0],
    85ce:	2205      	movs	r2, #5
    85d0:	f106 010c 	add.w	r1, r6, #12
    85d4:	f104 0061 	add.w	r0, r4, #97	; 0x61
    85d8:	f7f8 f801 	bl	5de <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    85dc:	7c73      	ldrb	r3, [r6, #17]
    85de:	7cb2      	ldrb	r2, [r6, #18]
    85e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    85e4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    85e8:	2302      	movs	r3, #2
    85ea:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    85ee:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    85f2:	2500      	movs	r5, #0
	conn->llcp_ack--;
    85f4:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    85f6:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    85fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    85fe:	e7ab      	b.n	8558 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x558>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    8600:	2328      	movs	r3, #40	; 0x28
		_radio.conn_curr->llcp_terminate.reason_peer =
    8602:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
	u8_t rx_enqueue = 0;
    8606:	2500      	movs	r5, #0
    8608:	e7a6      	b.n	8558 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x558>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    860a:	7a71      	ldrb	r1, [r6, #9]
    860c:	2002      	movs	r0, #2
    860e:	f7fc fc6b 	bl	4ee8 <pdu_len_cmp>
    8612:	2800      	cmp	r0, #0
    8614:	f000 80c5 	beq.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
		_radio.conn_curr->llcp_terminate.reason_peer =
    8618:	7b33      	ldrb	r3, [r6, #12]
    861a:	e7f2      	b.n	8602 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x602>
		if (!_radio.conn_curr->role ||
    861c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8620:	2b00      	cmp	r3, #0
    8622:	f280 80be 	bge.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    8626:	7a71      	ldrb	r1, [r6, #9]
    8628:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    862a:	f7fc fc5d 	bl	4ee8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    862e:	2800      	cmp	r0, #0
    8630:	f000 80b7 	beq.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    8634:	4651      	mov	r1, sl
    8636:	4620      	mov	r0, r4
    8638:	f7fe fbbc 	bl	6db4 <feature_rsp_send>
    863c:	4605      	mov	r5, r0
		if (!nack) {
    863e:	2800      	cmp	r0, #0
    8640:	d08a      	beq.n	8558 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x558>
	u8_t rx_enqueue = 0;
    8642:	2500      	movs	r5, #0
    8644:	e79f      	b.n	8586 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x586>
		if (_radio.conn_curr->role ||
    8646:	f994 301d 	ldrsb.w	r3, [r4, #29]
    864a:	2b00      	cmp	r3, #0
    864c:	f2c0 80a9 	blt.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    8650:	7a71      	ldrb	r1, [r6, #9]
    8652:	200e      	movs	r0, #14
    8654:	e7e9      	b.n	862a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62a>
    8656:	bf00      	nop
    8658:	0000bda7 	.word	0x0000bda7
    865c:	0000c71e 	.word	0x0000c71e
    8660:	0000c693 	.word	0x0000c693
    8664:	0000d4eb 	.word	0x0000d4eb
    8668:	0000cfbc 	.word	0x0000cfbc
    866c:	00022060 	.word	0x00022060
    8670:	00022040 	.word	0x00022040
    8674:	0000d2ba 	.word	0x0000d2ba
    8678:	0000d511 	.word	0x0000d511
    867c:	0000d2c6 	.word	0x0000d2c6
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    8680:	7a71      	ldrb	r1, [r6, #9]
    8682:	2009      	movs	r0, #9
    8684:	f7fc fc30 	bl	4ee8 <pdu_len_cmp>
    8688:	2800      	cmp	r0, #0
    868a:	f000 808a 	beq.w	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    868e:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    8690:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    8692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    8696:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    869a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    869e:	f043 0310 	orr.w	r3, r3, #16
    86a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    86a6:	7bb2      	ldrb	r2, [r6, #14]
    86a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    86ac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    86b0:	f3c2 0210 	ubfx	r2, r2, #0, #17
    86b4:	4013      	ands	r3, r2
    86b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    86ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    86be:	f043 0320 	orr.w	r3, r3, #32
    86c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    86c6:	2300      	movs	r3, #0
    86c8:	86a3      	strh	r3, [r4, #52]	; 0x34
    86ca:	e683      	b.n	83d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    86cc:	7a71      	ldrb	r1, [r6, #9]
    86ce:	200c      	movs	r0, #12
    86d0:	f7fc fc0a 	bl	4ee8 <pdu_len_cmp>
    86d4:	2800      	cmp	r0, #0
    86d6:	d064      	beq.n	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
	if (!conn->llcp_version.tx) {
    86d8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    86dc:	f013 0501 	ands.w	r5, r3, #1
    86e0:	d151      	bne.n	8786 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x786>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    86e2:	48c1      	ldr	r0, [pc, #772]	; (89e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e8>)
    86e4:	f7fa fd4e 	bl	3184 <mem_acquire>
		if (!node_tx) {
    86e8:	4601      	mov	r1, r0
    86ea:	2800      	cmp	r0, #0
    86ec:	d0a9      	beq.n	8642 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x642>
		conn->llcp_version.tx = 1;
    86ee:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    86f2:	f043 0301 	orr.w	r3, r3, #1
    86f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    86fa:	7903      	ldrb	r3, [r0, #4]
    86fc:	f043 0303 	orr.w	r3, r3, #3
    8700:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    8702:	2306      	movs	r3, #6
    8704:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    8706:	230c      	movs	r3, #12
    8708:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    870a:	2309      	movs	r3, #9
    870c:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    870e:	f06f 030e 	mvn.w	r3, #14
    8712:	7243      	strb	r3, [r0, #9]
    8714:	2305      	movs	r3, #5
    8716:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    8718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    871c:	72c3      	strb	r3, [r0, #11]
    871e:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    8720:	4620      	mov	r0, r4
    8722:	f7fe fb2d 	bl	6d80 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    8726:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    872a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    872e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    8732:	f001 fdc5 	bl	a2c0 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8736:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    8738:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    873a:	2201      	movs	r2, #1
    873c:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    8740:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8744:	7003      	strb	r3, [r0, #0]
    8746:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    8748:	b1c2      	cbz	r2, 877c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x77c>
		pdu_data_tx->md = 1;
    874a:	f043 0310 	orr.w	r3, r3, #16
    874e:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    8750:	7b33      	ldrb	r3, [r6, #12]
    8752:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    8756:	7bb2      	ldrb	r2, [r6, #14]
    8758:	7b73      	ldrb	r3, [r6, #13]
    875a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    875e:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    8762:	7bf3      	ldrb	r3, [r6, #15]
    8764:	7c32      	ldrb	r2, [r6, #16]
    8766:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    876a:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    876e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    8772:	f043 0302 	orr.w	r3, r3, #2
    8776:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    877a:	e6ed      	b.n	8558 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x558>
		pdu_data_tx->md = 0;
    877c:	f362 1304 	bfi	r3, r2, #4, #1
    8780:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    8782:	4615      	mov	r5, r2
    8784:	e7e4      	b.n	8750 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x750>
	} else if (!conn->llcp_version.rx) {
    8786:	f013 0302 	ands.w	r3, r3, #2
    878a:	f47f af3c 	bne.w	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
		conn->procedure_expire = 0;
    878e:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    8790:	2501      	movs	r5, #1
    8792:	e7dd      	b.n	8750 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x750>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    8794:	7a71      	ldrb	r1, [r6, #9]
    8796:	2011      	movs	r0, #17
    8798:	f7fc fba6 	bl	4ee8 <pdu_len_cmp>
    879c:	2800      	cmp	r0, #0
    879e:	f47f af32 	bne.w	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    87a2:	4891      	ldr	r0, [pc, #580]	; (89e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e8>)
    87a4:	f7fa fcee 	bl	3184 <mem_acquire>
	if (!node_tx) {
    87a8:	4601      	mov	r1, r0
    87aa:	2800      	cmp	r0, #0
    87ac:	f43f af49 	beq.w	8642 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x642>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    87b0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    87b2:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    87b4:	f043 0303 	orr.w	r3, r3, #3
    87b8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    87ba:	2302      	movs	r3, #2
    87bc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    87be:	2307      	movs	r3, #7
    87c0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    87c2:	4620      	mov	r0, r4
    87c4:	f7fe faae 	bl	6d24 <ctrl_tx_enqueue>
    87c8:	e71d      	b.n	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    87ca:	7a71      	ldrb	r1, [r6, #9]
    87cc:	2007      	movs	r0, #7
    87ce:	f7fc fb8b 	bl	4ee8 <pdu_len_cmp>
    87d2:	2800      	cmp	r0, #0
    87d4:	d0e5      	beq.n	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
    87d6:	e776      	b.n	86c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c6>
		if (_radio.conn_curr->role ||
    87d8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    87dc:	2b00      	cmp	r3, #0
    87de:	dbe0      	blt.n	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    87e0:	7a71      	ldrb	r1, [r6, #9]
    87e2:	2019      	movs	r0, #25
    87e4:	f7fc fb80 	bl	4ee8 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    87e8:	2800      	cmp	r0, #0
    87ea:	d0da      	beq.n	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
			if (!(p->phys & 0x01)) {
    87ec:	7b35      	ldrb	r5, [r6, #12]
    87ee:	f015 0501 	ands.w	r5, r5, #1
    87f2:	f43f aeb1 	beq.w	8558 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x558>
			if (conn->llcp_req != conn->llcp_ack) {
    87f6:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    87fa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    87fe:	429a      	cmp	r2, r3
    8800:	f47f af01 	bne.w	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
			memcpy(&conn->llcp.chan_map.chm[0],
    8804:	2205      	movs	r2, #5
    8806:	4979      	ldr	r1, [pc, #484]	; (89ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9ec>)
    8808:	f104 0061 	add.w	r0, r4, #97	; 0x61
    880c:	f7f7 fee7 	bl	5de <memcpy>
			conn->llcp.chan_map.initiate = 1;
    8810:	2301      	movs	r3, #1
    8812:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    8816:	2302      	movs	r3, #2
    8818:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    881c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    8820:	3b01      	subs	r3, #1
    8822:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    8826:	e6ee      	b.n	8606 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x606>
		if (_radio.crc_expire == 0) {
    8828:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
    882c:	b912      	cbnz	r2, 8834 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x834>
			_radio.crc_expire = 2;
    882e:	2202      	movs	r2, #2
    8830:	f880 2119 	strb.w	r2, [r0, #281]	; 0x119
		_radio.crc_expire--;
    8834:	f89b 4119 	ldrb.w	r4, [fp, #281]	; 0x119
    8838:	3c01      	subs	r4, #1
    883a:	b2e4      	uxtb	r4, r4
    883c:	f88b 4119 	strb.w	r4, [fp, #281]	; 0x119
		if (!_radio.conn_curr->supervision_expire) {
    8840:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    8842:	fab4 f484 	clz	r4, r4
    8846:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    8848:	2d00      	cmp	r5, #0
    884a:	d148      	bne.n	88de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8de>
			_radio.conn_curr->supervision_expire =
    884c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    884e:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    8850:	462f      	mov	r7, r5
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8852:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    8856:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8858:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    885c:	f7fe fe8e 	bl	757c <prepare_pdu_data_tx>
			STATE_CLOSE : STATE_TX;
    8860:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8864:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    8866:	ea4f 19d9 	mov.w	r9, r9, lsr #7
			STATE_CLOSE : STATE_TX;
    886a:	d03d      	beq.n	88e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e8>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    886c:	2c00      	cmp	r4, #0
    886e:	d138      	bne.n	88e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e2>
    8870:	f1b8 0f00 	cmp.w	r8, #0
    8874:	d005      	beq.n	8882 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x882>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    8876:	7a33      	ldrb	r3, [r6, #8]
    8878:	06db      	lsls	r3, r3, #27
    887a:	d402      	bmi.n	8882 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x882>
			 (pdu_data_tx->len == 0)) ||
    887c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    887e:	785b      	ldrb	r3, [r3, #1]
    8880:	b37b      	cbz	r3, 88e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e2>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    8882:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
			 (pdu_data_tx->len == 0)) ||
    8886:	f893 409b 	ldrb.w	r4, [r3, #155]	; 0x9b
    888a:	bb54      	cbnz	r4, 88e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e2>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    888c:	2302      	movs	r3, #2
		radio_tmr_tifs_set(RADIO_TIFS);
    888e:	2096      	movs	r0, #150	; 0x96
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    8890:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    8894:	f001 fdac 	bl	a3f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    8898:	4620      	mov	r0, r4
    889a:	f001 fd19 	bl	a2d0 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    889e:	f001 fe83 	bl	a5a8 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    88a2:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    88a6:	990d      	ldr	r1, [sp, #52]	; 0x34
    88a8:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    88ac:	780b      	ldrb	r3, [r1, #0]
    88ae:	f3c2 0200 	ubfx	r2, r2, #0, #1
    88b2:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    88b6:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    88ba:	f3c2 0240 	ubfx	r2, r2, #1, #1
    88be:	f362 0382 	bfi	r3, r2, #2, #1
    88c2:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    88c4:	f7fd f9e4 	bl	5c90 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    88c8:	f001 fcc6 	bl	a258 <radio_is_ready>
    88cc:	2800      	cmp	r0, #0
    88ce:	f43f acad 	beq.w	822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>
    88d2:	4b47      	ldr	r3, [pc, #284]	; (89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>)
    88d4:	e9cd 3300 	strd	r3, r3, [sp]
    88d8:	4b46      	ldr	r3, [pc, #280]	; (89f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f4>)
    88da:	f7fe bf08 	b.w	76ee <isr+0xae>
	u8_t rx_enqueue = 0;
    88de:	2500      	movs	r5, #0
    88e0:	e7b6      	b.n	8850 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x850>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    88e2:	2303      	movs	r3, #3
    88e4:	f88b 3014 	strb.w	r3, [fp, #20]
		if (_radio.role == ROLE_MASTER) {
    88e8:	f89b 3013 	ldrb.w	r3, [fp, #19]
    88ec:	2b04      	cmp	r3, #4
    88ee:	d10a      	bne.n	8906 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x906>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    88f0:	f8db 3114 	ldr.w	r3, [fp, #276]	; 0x114
    88f4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    88f8:	f369 12c7 	bfi	r2, r9, #7, #1
    88fc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    8900:	f001 fc8c 	bl	a21c <radio_disable>
    8904:	e492      	b.n	822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>
			radio_switch_complete_and_disable();
    8906:	f001 fcf9 	bl	a2fc <radio_switch_complete_and_disable>
    890a:	e7ca      	b.n	88a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a2>
		LL_ASSERT(0);
    890c:	4b38      	ldr	r3, [pc, #224]	; (89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>)
    890e:	e9cd 3300 	strd	r3, r3, [sp]
    8912:	4b39      	ldr	r3, [pc, #228]	; (89f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f8>)
    8914:	f7fe bf4a 	b.w	77ac <isr+0x16c>
	switch (_radio.role) {
    8918:	7cc2      	ldrb	r2, [r0, #19]
    891a:	2a04      	cmp	r2, #4
    891c:	f200 81c6 	bhi.w	8cac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcac>
    8920:	e8df f012 	tbh	[pc, r2, lsl #1]
    8924:	000501b4 	.word	0x000501b4
    8928:	00be0078 	.word	0x00be0078
    892c:	00be      	.short	0x00be
	if ((_radio.state == STATE_CLOSE) &&
    892e:	2b03      	cmp	r3, #3
    8930:	d109      	bne.n	8946 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x946>
	    (_radio.advertiser.chan_map_current != 0)) {
    8932:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    8936:	075d      	lsls	r5, r3, #29
    8938:	d005      	beq.n	8946 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x946>
		adv_setup();
    893a:	f7fd fa01 	bl	5d40 <adv_setup>
		radio_tx_enable();
    893e:	f001 fc67 	bl	a210 <radio_tx_enable>
    8942:	f7fe bee3 	b.w	770c <isr+0xcc>
		radio_filter_disable();
    8946:	f001 fd23 	bl	a390 <radio_filter_disable>
		if ((_radio.state == STATE_CLOSE) &&
    894a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    894e:	2b03      	cmp	r3, #3
    8950:	f040 808a 	bne.w	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
		    (!_radio.advertiser.is_hdcd)) {
    8954:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    8958:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    895c:	f040 8084 	bne.w	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
			entropy_get_entropy_isr(_radio.entropy, &random_delay,
    8960:	2201      	movs	r2, #1
    8962:	a90d      	add	r1, sp, #52	; 0x34
    8964:	f8db 0004 	ldr.w	r0, [fp, #4]
    8968:	f7f9 fa02 	bl	1d70 <entropy_get_entropy_isr>
			random_delay %= 10;
    896c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    8970:	4822      	ldr	r0, [pc, #136]	; (89fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9fc>)
			random_delay %= 10;
    8972:	230a      	movs	r3, #10
    8974:	fbb1 f2f3 	udiv	r2, r1, r3
    8978:	fb03 1212 	mls	r2, r3, r2, r1
			random_delay += 1;
    897c:	3201      	adds	r2, #1
    897e:	b2d2      	uxtb	r2, r2
					HAL_TICKER_US_TO_TICKS(random_delay *
    8980:	b2d5      	uxtb	r5, r2
    8982:	fba5 0100 	umull	r0, r1, r5, r0
    8986:	23e8      	movs	r3, #232	; 0xe8
			random_delay += 1;
    8988:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
					HAL_TICKER_US_TO_TICKS(random_delay *
    898c:	fb03 1105 	mla	r1, r3, r5, r1
    8990:	a313      	add	r3, pc, #76	; (adr r3, 89e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e0>)
    8992:	e9d3 2300 	ldrd	r2, r3, [r3]
    8996:	f7f7 fc67 	bl	268 <__aeabi_uldivmod>
			ticker_status =
    899a:	f640 734e 	movw	r3, #3918	; 0xf4e
    899e:	9306      	str	r3, [sp, #24]
    89a0:	4b17      	ldr	r3, [pc, #92]	; (8a00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa00>)
    89a2:	e9cd 4402 	strd	r4, r4, [sp, #8]
    89a6:	e9cd 4304 	strd	r4, r3, [sp, #16]
    89aa:	e9cd 4400 	strd	r4, r4, [sp]
    89ae:	b283      	uxth	r3, r0
    89b0:	2205      	movs	r2, #5
    89b2:	4621      	mov	r1, r4
    89b4:	4620      	mov	r0, r4
    89b6:	f7fb fa95 	bl	3ee4 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    89ba:	f030 0302 	bics.w	r3, r0, #2
    89be:	d053      	beq.n	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
    89c0:	f89b 3012 	ldrb.w	r3, [fp, #18]
    89c4:	2b05      	cmp	r3, #5
    89c6:	d04f      	beq.n	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
    89c8:	4b09      	ldr	r3, [pc, #36]	; (89f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9f0>)
    89ca:	4a0e      	ldr	r2, [pc, #56]	; (8a04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa04>)
    89cc:	490e      	ldr	r1, [pc, #56]	; (8a08 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa08>)
    89ce:	480f      	ldr	r0, [pc, #60]	; (8a0c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0c>)
    89d0:	e9cd 3300 	strd	r3, r3, [sp]
    89d4:	4b0e      	ldr	r3, [pc, #56]	; (8a10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa10>)
    89d6:	f7ff b816 	b.w	7a06 <isr+0x3c6>
    89da:	bf00      	nop
    89dc:	f3af 8000 	nop.w
    89e0:	1afd498d 	.word	0x1afd498d
    89e4:	00000007 	.word	0x00000007
    89e8:	20000a84 	.word	0x20000a84
    89ec:	20000a4a 	.word	0x20000a4a
    89f0:	0000bda7 	.word	0x0000bda7
    89f4:	0000cfcc 	.word	0x0000cfcc
    89f8:	0000cfd8 	.word	0x0000cfd8
    89fc:	d4a51000 	.word	0xd4a51000
    8a00:	00005781 	.word	0x00005781
    8a04:	0000c71e 	.word	0x0000c71e
    8a08:	0000c693 	.word	0x0000c693
    8a0c:	0000d553 	.word	0x0000d553
    8a10:	0000cfeb 	.word	0x0000cfeb
	if (_radio.state == STATE_CLOSE) {
    8a14:	2b03      	cmp	r3, #3
    8a16:	d11a      	bne.n	8a4e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4e>
		radio_tmr_tifs_set(RADIO_TIFS);
    8a18:	2096      	movs	r0, #150	; 0x96
    8a1a:	f001 fce9 	bl	a3f0 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8a1e:	2300      	movs	r3, #0
    8a20:	4619      	mov	r1, r3
    8a22:	461a      	mov	r2, r3
    8a24:	4618      	mov	r0, r3
    8a26:	f001 fc5f 	bl	a2e8 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    8a2a:	f8db 3134 	ldr.w	r3, [fp, #308]	; 0x134
    8a2e:	f89b 2139 	ldrb.w	r2, [fp, #313]	; 0x139
		radio_pkt_rx_set(_radio.packet_rx
    8a32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8a36:	3008      	adds	r0, #8
    8a38:	f001 fbca 	bl	a1d0 <radio_pkt_rx_set>
		radio_rssi_measure();
    8a3c:	f001 fc6c 	bl	a318 <radio_rssi_measure>
		_radio.state = STATE_RX;
    8a40:	2301      	movs	r3, #1
    8a42:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    8a46:	f001 fbdd 	bl	a204 <radio_rx_enable>
    8a4a:	f7fe be5f 	b.w	770c <isr+0xcc>
		radio_filter_disable();
    8a4e:	f001 fc9f 	bl	a390 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    8a52:	f89b 3014 	ldrb.w	r3, [fp, #20]
    8a56:	2b05      	cmp	r3, #5
    8a58:	d106      	bne.n	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8a5a:	2300      	movs	r3, #0
    8a5c:	9300      	str	r3, [sp, #0]
    8a5e:	2204      	movs	r2, #4
    8a60:	4619      	mov	r1, r3
    8a62:	4618      	mov	r0, r3
    8a64:	f7fb fa88 	bl	3f78 <ticker_stop>
	_radio.role = ROLE_NONE;
    8a68:	2400      	movs	r4, #0
    8a6a:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    8a6e:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    8a72:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    8a76:	f001 fd39 	bl	a4ec <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    8a7a:	4622      	mov	r2, r4
    8a7c:	4621      	mov	r1, r4
    8a7e:	4620      	mov	r0, r4
    8a80:	4b99      	ldr	r3, [pc, #612]	; (8ce8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce8>)
    8a82:	f7fa fc35 	bl	32f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    8a86:	4604      	mov	r4, r0
    8a88:	2800      	cmp	r0, #0
    8a8a:	f000 8115 	beq.w	8cb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcb8>
    8a8e:	4b97      	ldr	r3, [pc, #604]	; (8cec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcec>)
    8a90:	4a97      	ldr	r2, [pc, #604]	; (8cf0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcf0>)
    8a92:	4998      	ldr	r1, [pc, #608]	; (8cf4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcf4>)
    8a94:	4898      	ldr	r0, [pc, #608]	; (8cf8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcf8>)
    8a96:	e9cd 3300 	strd	r3, r3, [sp]
    8a9a:	4b98      	ldr	r3, [pc, #608]	; (8cfc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcfc>)
    8a9c:	f7fe bfb3 	b.w	7a06 <isr+0x3c6>
	if (_radio.conn_curr == 0) {
    8aa0:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
    8aa4:	2800      	cmp	r0, #0
    8aa6:	d0df      	beq.n	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    8aa8:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    8aac:	b189      	cbz	r1, 8ad2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xad2>
    8aae:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8ab2:	2b03      	cmp	r3, #3
    8ab4:	d003      	beq.n	8abe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xabe>
    8ab6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    8aba:	07dc      	lsls	r4, r3, #31
    8abc:	d509      	bpl.n	8ad2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xad2>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    8abe:	f7fd fb25 	bl	610c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8ac2:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8ac6:	f7fd f84d 	bl	5b64 <connection_release>
			_radio.conn_curr = NULL;
    8aca:	2300      	movs	r3, #0
    8acc:	f8cb 3114 	str.w	r3, [fp, #276]	; 0x114
    8ad0:	e7ca      	b.n	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
	latency_event = _radio.conn_curr->latency_event;
    8ad2:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    8ad4:	f89b 7118 	ldrb.w	r7, [fp, #280]	; 0x118
	elapsed_event = latency_event + 1;
    8ad8:	1c75      	adds	r5, r6, #1
    8ada:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    8adc:	2f00      	cmp	r7, #0
    8ade:	d06d      	beq.n	8bbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbbc>
		if (_radio.role == ROLE_SLAVE) {
    8ae0:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8ae4:	2b03      	cmp	r3, #3
    8ae6:	d15d      	bne.n	8ba4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba4>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    8ae8:	f001 fd52 	bl	a590 <radio_tmr_aa_restore>
    8aec:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    8aee:	f001 fd55 	bl	a59c <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    8af2:	f8db 7114 	ldr.w	r7, [fp, #276]	; 0x114
    8af6:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8d18 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd18>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    8afa:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    8afe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    8b00:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    8b04:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8b06:	a376      	add	r3, pc, #472	; (adr r3, 8ce0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce0>)
    8b08:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    8b0c:	d83d      	bhi.n	8b8a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8a>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8b0e:	fba0 0109 	umull	r0, r1, r0, r9
    8b12:	f7f7 fba9 	bl	268 <__aeabi_uldivmod>
    8b16:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8b18:	ebaa 0008 	sub.w	r0, sl, r8
    8b1c:	a370      	add	r3, pc, #448	; (adr r3, 8ce0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce0>)
    8b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8b22:	fba0 0109 	umull	r0, r1, r0, r9
    8b26:	f7f7 fb9f 	bl	268 <__aeabi_uldivmod>
    8b2a:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    8b2c:	2200      	movs	r2, #0
    8b2e:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    8b30:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    8b32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    8b36:	b37a      	cbz	r2, 8b98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb98>
				if (pdu_data_tx->len ||
    8b38:	7952      	ldrb	r2, [r2, #5]
    8b3a:	b912      	cbnz	r2, 8b42 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb42>
    8b3c:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    8b40:	b10a      	cbz	r2, 8b46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb46>
					_radio.conn_curr->latency_event = 0;
    8b42:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    8b44:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    8b46:	f8db 2114 	ldr.w	r2, [fp, #276]	; 0x114
    8b4a:	2100      	movs	r1, #0
    8b4c:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    8b4e:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8b52:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    8b54:	b1ba      	cbz	r2, 8b86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb86>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    8b56:	4295      	cmp	r5, r2
    8b58:	f080 8090 	bcs.w	8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    8b5c:	1b52      	subs	r2, r2, r5
    8b5e:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    8b60:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    8b62:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    8b64:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    8b66:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    8b68:	f240 808a 	bls.w	8c80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc80>
			else if (_radio.role == ROLE_SLAVE) {
    8b6c:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8b70:	2a03      	cmp	r2, #3
    8b72:	d108      	bne.n	8b86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb86>
				if (latency_event != 0) {
    8b74:	2e00      	cmp	r6, #0
    8b76:	f040 8083 	bne.w	8c80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc80>
					force = _radio.conn_curr->slave.force & 0x01;
    8b7a:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    8b7c:	087a      	lsrs	r2, r7, #1
					if (force) {
    8b7e:	f017 0701 	ands.w	r7, r7, #1
    8b82:	d135      	bne.n	8bf0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf0>
					_radio.conn_curr->slave.force >>= 1;
    8b84:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    8b86:	2700      	movs	r7, #0
    8b88:	e035      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8b8a:	fba8 0109 	umull	r0, r1, r8, r9
    8b8e:	f7f7 fb6b 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8b92:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8b94:	b284      	uxth	r4, r0
    8b96:	e7c9      	b.n	8b2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2c>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    8b98:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    8b9c:	07d2      	lsls	r2, r2, #31
    8b9e:	d5d2      	bpl.n	8b46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb46>
				_radio.conn_curr->latency_event =
    8ba0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8ba2:	e7cf      	b.n	8b44 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb44>
		} else if (reason_peer) {
    8ba4:	b141      	cbz	r1, 8bb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb8>
			_radio.conn_curr->master.terminate_ack = 1;
    8ba6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    8baa:	f043 0301 	orr.w	r3, r3, #1
    8bae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    8bb2:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    8bb4:	461c      	mov	r4, r3
    8bb6:	e7c6      	b.n	8b46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb46>
	ticks_drift_minus = 0;
    8bb8:	460b      	mov	r3, r1
    8bba:	e7fb      	b.n	8bb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbb4>
	else if (_radio.conn_curr->connect_expire) {
    8bbc:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    8bbe:	b184      	cbz	r4, 8be2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe2>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    8bc0:	42a5      	cmp	r5, r4
    8bc2:	d204      	bcs.n	8bce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbce>
			_radio.conn_curr->connect_expire -= elapsed_event;
    8bc4:	1b64      	subs	r4, r4, r5
    8bc6:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    8bc8:	463c      	mov	r4, r7
    8bca:	4623      	mov	r3, r4
    8bcc:	e7bf      	b.n	8b4e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    8bce:	213e      	movs	r1, #62	; 0x3e
    8bd0:	f7fd fa9c 	bl	610c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    8bd4:	f8db 0114 	ldr.w	r0, [fp, #276]	; 0x114
    8bd8:	f7fc ffc4 	bl	5b64 <connection_release>
			_radio.conn_curr = NULL;
    8bdc:	f8cb 7114 	str.w	r7, [fp, #276]	; 0x114
    8be0:	e742      	b.n	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
		if (!_radio.conn_curr->supervision_expire) {
    8be2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    8be4:	2b00      	cmp	r3, #0
    8be6:	d1f0      	bne.n	8bca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbca>
			_radio.conn_curr->supervision_expire =
    8be8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    8bea:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    8bec:	461c      	mov	r4, r3
    8bee:	e7ae      	b.n	8b4e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4e>
						_radio.conn_curr->slave.force |=
    8bf0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    8bf4:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    8bf6:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    8bf8:	b11a      	cbz	r2, 8c02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc02>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    8bfa:	4295      	cmp	r5, r2
    8bfc:	d242      	bcs.n	8c84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc84>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    8bfe:	1b55      	subs	r5, r2, r5
    8c00:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    8c02:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    8c06:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    8c0a:	4291      	cmp	r1, r2
    8c0c:	d006      	beq.n	8c1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc1c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    8c0e:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    8c12:	3a01      	subs	r2, #1
    8c14:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    8c16:	bf9c      	itt	ls
    8c18:	2200      	movls	r2, #0
    8c1a:	8542      	strhls	r2, [r0, #42]	; 0x2a
    8c1c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    8c1e:	b90f      	cbnz	r7, 8c24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc24>
    8c20:	428e      	cmp	r6, r1
    8c22:	d031      	beq.n	8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>
		lazy = _radio.conn_curr->latency_event + 1;
    8c24:	3101      	adds	r1, #1
    8c26:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    8c28:	b924      	cbnz	r4, 8c34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc34>
    8c2a:	b91b      	cbnz	r3, 8c34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc34>
    8c2c:	b911      	cbnz	r1, 8c34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc34>
	    (lazy != 0) || (force != 0)) {
    8c2e:	2f00      	cmp	r7, #0
    8c30:	f43f af1a 	beq.w	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8c34:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    8c38:	4a31      	ldr	r2, [pc, #196]	; (8d00 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd00>)
    8c3a:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8c3c:	3507      	adds	r5, #7
		ticker_status =
    8c3e:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8c40:	b2ed      	uxtb	r5, r5
		ticker_status =
    8c42:	e9cd 7204 	strd	r7, r2, [sp, #16]
    8c46:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    8c48:	9506      	str	r5, [sp, #24]
		ticker_status =
    8c4a:	4623      	mov	r3, r4
    8c4c:	e9cd 1101 	strd	r1, r1, [sp, #4]
    8c50:	462a      	mov	r2, r5
    8c52:	4608      	mov	r0, r1
    8c54:	f7fb f946 	bl	3ee4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8c58:	f030 0302 	bics.w	r3, r0, #2
    8c5c:	f43f af04 	beq.w	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
    8c60:	f89b 3012 	ldrb.w	r3, [fp, #18]
    8c64:	429d      	cmp	r5, r3
    8c66:	f43f aeff 	beq.w	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
    8c6a:	4b20      	ldr	r3, [pc, #128]	; (8cec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcec>)
    8c6c:	4a20      	ldr	r2, [pc, #128]	; (8cf0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcf0>)
    8c6e:	4921      	ldr	r1, [pc, #132]	; (8cf4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcf4>)
    8c70:	4824      	ldr	r0, [pc, #144]	; (8d04 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd04>)
    8c72:	e9cd 3300 	strd	r3, r3, [sp]
    8c76:	4b24      	ldr	r3, [pc, #144]	; (8d08 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd08>)
    8c78:	f7fe bec5 	b.w	7a06 <isr+0x3c6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    8c7c:	2108      	movs	r1, #8
    8c7e:	e71e      	b.n	8abe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xabe>
				force = 1;
    8c80:	2701      	movs	r7, #1
    8c82:	e7b8      	b.n	8bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbf6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    8c84:	2122      	movs	r1, #34	; 0x22
    8c86:	e71a      	b.n	8abe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xabe>
	lazy = 0;
    8c88:	4639      	mov	r1, r7
    8c8a:	e7cd      	b.n	8c28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc28>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    8c8c:	3b04      	subs	r3, #4
    8c8e:	2b01      	cmp	r3, #1
    8c90:	d908      	bls.n	8ca4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca4>
    8c92:	4b16      	ldr	r3, [pc, #88]	; (8cec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcec>)
    8c94:	4a16      	ldr	r2, [pc, #88]	; (8cf0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcf0>)
    8c96:	4917      	ldr	r1, [pc, #92]	; (8cf4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcf4>)
    8c98:	481c      	ldr	r0, [pc, #112]	; (8d0c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0c>)
    8c9a:	e9cd 3300 	strd	r3, r3, [sp]
    8c9e:	4b1c      	ldr	r3, [pc, #112]	; (8d10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd10>)
    8ca0:	f7fe beb1 	b.w	7a06 <isr+0x3c6>
		_radio.state = STATE_NONE;
    8ca4:	2300      	movs	r3, #0
    8ca6:	7503      	strb	r3, [r0, #20]
    8ca8:	f7fe bd54 	b.w	7754 <isr+0x114>
		LL_ASSERT(0);
    8cac:	4b0f      	ldr	r3, [pc, #60]	; (8cec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcec>)
    8cae:	e9cd 3300 	strd	r3, r3, [sp]
    8cb2:	4b17      	ldr	r3, [pc, #92]	; (8d10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd10>)
    8cb4:	f7fe bd7a 	b.w	77ac <isr+0x16c>
	clock_control_off(_radio.hf_clock, NULL);
    8cb8:	f8db 0000 	ldr.w	r0, [fp]
    8cbc:	6843      	ldr	r3, [r0, #4]
    8cbe:	4621      	mov	r1, r4
    8cc0:	685b      	ldr	r3, [r3, #4]
    8cc2:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    8cc4:	2201      	movs	r2, #1
    8cc6:	4611      	mov	r1, r2
    8cc8:	4620      	mov	r0, r4
    8cca:	f7fa fae9 	bl	32a0 <mayfly_enable>
    8cce:	f7fe bd41 	b.w	7754 <isr+0x114>
		LL_ASSERT(0);
    8cd2:	4b06      	ldr	r3, [pc, #24]	; (8cec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcec>)
    8cd4:	e9cd 3300 	strd	r3, r3, [sp]
    8cd8:	4b0e      	ldr	r3, [pc, #56]	; (8d14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd14>)
    8cda:	f7fe bd67 	b.w	77ac <isr+0x16c>
    8cde:	bf00      	nop
    8ce0:	1afd498d 	.word	0x1afd498d
    8ce4:	00000007 	.word	0x00000007
    8ce8:	200037e0 	.word	0x200037e0
    8cec:	0000bda7 	.word	0x0000bda7
    8cf0:	0000c71e 	.word	0x0000c71e
    8cf4:	0000c693 	.word	0x0000c693
    8cf8:	0000d83d 	.word	0x0000d83d
    8cfc:	0000d0bc 	.word	0x0000d0bc
    8d00:	000057c9 	.word	0x000057c9
    8d04:	0000d5c1 	.word	0x0000d5c1
    8d08:	0000cff9 	.word	0x0000cff9
    8d0c:	0000d637 	.word	0x0000d637
    8d10:	0000d008 	.word	0x0000d008
    8d14:	0000d01e 	.word	0x0000d01e
    8d18:	3b9aca00 	.word	0x3b9aca00

00008d1c <event_master>:
{
    8d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d1e:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    8d20:	4b55      	ldr	r3, [pc, #340]	; (8e78 <event_master+0x15c>)
    8d22:	7cda      	ldrb	r2, [r3, #19]
{
    8d24:	b085      	sub	sp, #20
    8d26:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    8d28:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    8d2c:	461d      	mov	r5, r3
    8d2e:	b172      	cbz	r2, 8d4e <event_master+0x32>
    8d30:	4b52      	ldr	r3, [pc, #328]	; (8e7c <event_master+0x160>)
    8d32:	4a53      	ldr	r2, [pc, #332]	; (8e80 <event_master+0x164>)
    8d34:	4953      	ldr	r1, [pc, #332]	; (8e84 <event_master+0x168>)
    8d36:	4854      	ldr	r0, [pc, #336]	; (8e88 <event_master+0x16c>)
    8d38:	e9cd 3300 	strd	r3, r3, [sp]
    8d3c:	4b53      	ldr	r3, [pc, #332]	; (8e8c <event_master+0x170>)
	LL_ASSERT(_radio.ticker_id_prepare ==
    8d3e:	f7f8 fac9 	bl	12d4 <printk>
    8d42:	4040      	eors	r0, r0
    8d44:	f380 8811 	msr	BASEPRI, r0
    8d48:	f04f 0004 	mov.w	r0, #4
    8d4c:	df02      	svc	2
    8d4e:	7c1b      	ldrb	r3, [r3, #16]
    8d50:	8c22      	ldrh	r2, [r4, #32]
    8d52:	b2db      	uxtb	r3, r3
    8d54:	3207      	adds	r2, #7
    8d56:	4293      	cmp	r3, r2
    8d58:	d007      	beq.n	8d6a <event_master+0x4e>
    8d5a:	4b48      	ldr	r3, [pc, #288]	; (8e7c <event_master+0x160>)
    8d5c:	4a48      	ldr	r2, [pc, #288]	; (8e80 <event_master+0x164>)
    8d5e:	4949      	ldr	r1, [pc, #292]	; (8e84 <event_master+0x168>)
    8d60:	484b      	ldr	r0, [pc, #300]	; (8e90 <event_master+0x174>)
    8d62:	e9cd 3300 	strd	r3, r3, [sp]
    8d66:	4b49      	ldr	r3, [pc, #292]	; (8e8c <event_master+0x170>)
    8d68:	e7e9      	b.n	8d3e <event_master+0x22>
	_radio.role = ROLE_MASTER;
    8d6a:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    8d6c:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    8d70:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    8d72:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    8d74:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    8d76:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    8d78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    8d7a:	f8c5 4114 	str.w	r4, [r5, #276]	; 0x114
	_radio.state = STATE_TX;
    8d7e:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    8d80:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    8d82:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    8d84:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    8d86:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    8d88:	f7fc fe9c 	bl	5ac4 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    8d8c:	a903      	add	r1, sp, #12
    8d8e:	4620      	mov	r0, r4
    8d90:	f7fe fbf4 	bl	757c <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    8d94:	9903      	ldr	r1, [sp, #12]
    8d96:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    8d9a:	780b      	ldrb	r3, [r1, #0]
    8d9c:	f3c2 0200 	ubfx	r2, r2, #0, #1
    8da0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    8da4:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    8da8:	f3c2 0240 	ubfx	r2, r2, #1, #1
    8dac:	f362 0382 	bfi	r3, r2, #2, #1
    8db0:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    8db2:	4620      	mov	r0, r4
    8db4:	f7fd feba 	bl	6b2c <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    8db8:	2096      	movs	r0, #150	; 0x96
    8dba:	f001 fb19 	bl	a3f0 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    8dbe:	4630      	mov	r0, r6
    8dc0:	f001 fa86 	bl	a2d0 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    8dc4:	4620      	mov	r0, r4
    8dc6:	9903      	ldr	r1, [sp, #12]
    8dc8:	f7fc ff62 	bl	5c90 <tx_packet_set>
	if (conn->data_chan_sel) {
    8dcc:	7f63      	ldrb	r3, [r4, #29]
    8dce:	0658      	lsls	r0, r3, #25
    8dd0:	f104 0217 	add.w	r2, r4, #23
    8dd4:	d521      	bpl.n	8e1a <event_master+0xfe>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    8dd6:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    8dd8:	8be1      	ldrh	r1, [r4, #30]
    8dda:	3801      	subs	r0, #1
    8ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8de0:	b280      	uxth	r0, r0
    8de2:	f7fd fe5f 	bl	6aa4 <chan_sel_2>
	chan_set(data_chan_use);
    8de6:	f7fc ff73 	bl	5cd0 <chan_set>
		remainder_us = radio_tmr_start(1,
    8dea:	68ea      	ldr	r2, [r5, #12]
    8dec:	f107 0109 	add.w	r1, r7, #9
    8df0:	2001      	movs	r0, #1
    8df2:	f001 fb09 	bl	a408 <radio_tmr_start>
		radio_tmr_end_capture();
    8df6:	f001 fbd7 	bl	a5a8 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    8dfa:	f894 1020 	ldrb.w	r1, [r4, #32]
    8dfe:	3107      	adds	r1, #7
    8e00:	463a      	mov	r2, r7
    8e02:	b2c9      	uxtb	r1, r1
    8e04:	4620      	mov	r0, r4
    8e06:	f7fd fb6b 	bl	64e0 <preempt_calc>
	if (0 !=
    8e0a:	4603      	mov	r3, r0
    8e0c:	b328      	cbz	r0, 8e5a <event_master+0x13e>
		_radio.state = STATE_STOP;
    8e0e:	2304      	movs	r3, #4
    8e10:	752b      	strb	r3, [r5, #20]
		radio_disable();
    8e12:	f001 fa03 	bl	a21c <radio_disable>
}
    8e16:	b005      	add	sp, #20
    8e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    8e1a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    8e1c:	7fa6      	ldrb	r6, [r4, #30]
    8e1e:	fb01 6606 	mla	r6, r1, r6, r6
    8e22:	7fe1      	ldrb	r1, [r4, #31]
    8e24:	2025      	movs	r0, #37	; 0x25
    8e26:	440e      	add	r6, r1
    8e28:	fb96 f1f0 	sdiv	r1, r6, r0
    8e2c:	fb00 6611 	mls	r6, r0, r1, r6
    8e30:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8e32:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    8e34:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8e36:	5c51      	ldrb	r1, [r2, r1]
    8e38:	f006 0607 	and.w	r6, r6, #7
    8e3c:	fa41 f606 	asr.w	r6, r1, r6
    8e40:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    8e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8e46:	d4ce      	bmi.n	8de6 <event_master+0xca>
		chan_index = chan_next % chan_count;
    8e48:	fbb0 f1f3 	udiv	r1, r0, r3
    8e4c:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    8e50:	b2c9      	uxtb	r1, r1
    8e52:	4610      	mov	r0, r2
    8e54:	f7fc f874 	bl	4f40 <chan_sel_remap>
    8e58:	e7c5      	b.n	8de6 <event_master+0xca>
		ticker_status =
    8e5a:	4a0e      	ldr	r2, [pc, #56]	; (8e94 <event_master+0x178>)
    8e5c:	4601      	mov	r1, r0
    8e5e:	f7fb f903 	bl	4068 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8e62:	f030 0302 	bics.w	r3, r0, #2
    8e66:	d0d6      	beq.n	8e16 <event_master+0xfa>
    8e68:	4b04      	ldr	r3, [pc, #16]	; (8e7c <event_master+0x160>)
    8e6a:	4a05      	ldr	r2, [pc, #20]	; (8e80 <event_master+0x164>)
    8e6c:	4905      	ldr	r1, [pc, #20]	; (8e84 <event_master+0x168>)
    8e6e:	480a      	ldr	r0, [pc, #40]	; (8e98 <event_master+0x17c>)
    8e70:	e9cd 3300 	strd	r3, r3, [sp]
    8e74:	4b05      	ldr	r3, [pc, #20]	; (8e8c <event_master+0x170>)
    8e76:	e762      	b.n	8d3e <event_master+0x22>
    8e78:	20000930 	.word	0x20000930
    8e7c:	0000bda7 	.word	0x0000bda7
    8e80:	0000c71e 	.word	0x0000c71e
    8e84:	0000c693 	.word	0x0000c693
    8e88:	0000d3a4 	.word	0x0000d3a4
    8e8c:	0000d25b 	.word	0x0000d25b
    8e90:	0000d457 	.word	0x0000d457
    8e94:	00005815 	.word	0x00005815
    8e98:	0000d317 	.word	0x0000d317

00008e9c <radio_init>:
{
    8e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    8ea0:	4e3c      	ldr	r6, [pc, #240]	; (8f94 <radio_init+0xf8>)
{
    8ea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    8ea4:	f89d 801c 	ldrb.w	r8, [sp, #28]
    8ea8:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    8eac:	f8bd e020 	ldrh.w	lr, [sp, #32]
    8eb0:	f89d c018 	ldrb.w	ip, [sp, #24]
	_radio.hf_clock = hf_clock;
    8eb4:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    8eb6:	f44f 7082 	mov.w	r0, #260	; 0x104
    8eba:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    8ebe:	f886 1120 	strb.w	r1, [r6, #288]	; 0x120
	_radio.conn_pool = mem_radio;
    8ec2:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	mem_radio_end = mem_radio + mem_size;
    8ec6:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    8ec8:	f108 0401 	add.w	r4, r8, #1
    8ecc:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    8ece:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    8ed0:	f10e 0403 	add.w	r4, lr, #3
	rx_count_max += 3;
    8ed4:	f10c 0203 	add.w	r2, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    8ed8:	2c28      	cmp	r4, #40	; 0x28
	rx_count_max += 3;
    8eda:	b2d2      	uxtb	r2, r2
	_radio.packet_data_octets_max = packet_data_octets_max;
    8edc:	f8a6 e12c 	strh.w	lr, [r6, #300]	; 0x12c
	_radio.link_rx_data_quota = rx_count_max;
    8ee0:	f886 214c 	strb.w	r2, [r6, #332]	; 0x14c
		_radio.packet_rx_data_pool_size =
    8ee4:	bf88      	it	hi
    8ee6:	f10e 0e0e 	addhi.w	lr, lr, #14
    8eea:	b292      	uxth	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    8eec:	bf94      	ite	ls
    8eee:	eb02 0242 	addls.w	r2, r2, r2, lsl #1
		_radio.packet_rx_data_pool_size =
    8ef2:	f02e 0e03 	bichi.w	lr, lr, #3
	_radio.packet_rx_count = (rx_count_max + 1);
    8ef6:	f10c 0c04 	add.w	ip, ip, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    8efa:	f108 0802 	add.w	r8, r8, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    8efe:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    8f02:	bf8c      	ite	hi
    8f04:	fb1e f202 	smulbbhi	r2, lr, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    8f08:	0112      	lslls	r2, r2, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    8f0a:	fa5f f888 	uxtb.w	r8, r8
		_radio.packet_rx_data_pool_size =
    8f0e:	f8a6 212e 	strh.w	r2, [r6, #302]	; 0x12e
	_radio.packet_tx_count = (tx_count_max + 1);
    8f12:	f886 816c 	strb.w	r8, [r6, #364]	; 0x16c
	_radio.packet_rx = (void *)mem_radio;
    8f16:	f8c6 0134 	str.w	r0, [r6, #308]	; 0x134
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8f1a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	mem_radio +=
    8f1e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8f22:	f8b6 412e 	ldrh.w	r4, [r6, #302]	; 0x12e
	_radio.pkt_tx = (void *)mem_radio;
    8f26:	f8c6 0164 	str.w	r0, [r6, #356]	; 0x164
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8f2a:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    8f2c:	2230      	movs	r2, #48	; 0x30
	_radio.pkt_release = (void *)mem_radio;
    8f2e:	f8c6 0168 	str.w	r0, [r6, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8f32:	4440      	add	r0, r8
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    8f34:	f8a6 2130 	strh.w	r2, [r6, #304]	; 0x130
	_radio.pkt_rx_data_pool = mem_radio;
    8f38:	f8c6 0124 	str.w	r0, [r6, #292]	; 0x124
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8f3c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    8f40:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    8f42:	eb0c 0403 	add.w	r4, ip, r3
	_radio.link_rx_pool = mem_radio;
    8f46:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    8f4a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    8f4e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    8f52:	f8c6 0150 	str.w	r0, [r6, #336]	; 0x150
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    8f56:	340a      	adds	r4, #10
    8f58:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    8f5c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    8f5e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    8f60:	f8a6 4160 	strh.w	r4, [r6, #352]	; 0x160
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    8f64:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    8f68:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    8f6a:	f886 3110 	strb.w	r3, [r6, #272]	; 0x110
	_radio.packet_rx_count = (rx_count_max + 1);
    8f6e:	f886 c138 	strb.w	ip, [r6, #312]	; 0x138
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8f72:	f886 2132 	strb.w	r2, [r6, #306]	; 0x132
	_radio.pkt_tx_data_pool = mem_radio;
    8f76:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
	if (retcode) {
    8f7a:	d003      	beq.n	8f84 <radio_init+0xe8>
		return (retcode + mem_size);
    8f7c:	442c      	add	r4, r5
}
    8f7e:	4620      	mov	r0, r4
    8f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    8f84:	2301      	movs	r3, #1
    8f86:	f886 317a 	strb.w	r3, [r6, #378]	; 0x17a
	common_init();
    8f8a:	f7fd fd01 	bl	6990 <common_init>
	radio_setup();
    8f8e:	f001 f86f 	bl	a070 <radio_setup>
	return retcode;
    8f92:	e7f4      	b.n	8f7e <radio_init+0xe2>
    8f94:	20000930 	.word	0x20000930

00008f98 <ll_reset>:
{
    8f98:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    8f9a:	2103      	movs	r1, #3
    8f9c:	2005      	movs	r0, #5
    8f9e:	f7fc f89b 	bl	50d8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    8fa2:	2104      	movs	r1, #4
    8fa4:	2006      	movs	r0, #6
    8fa6:	f7fc f897 	bl	50d8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    8faa:	4c21      	ldr	r4, [pc, #132]	; (9030 <ll_reset+0x98>)
    8fac:	2500      	movs	r5, #0
    8fae:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
    8fb2:	b2ab      	uxth	r3, r5
    8fb4:	429a      	cmp	r2, r3
    8fb6:	f105 0501 	add.w	r5, r5, #1
    8fba:	d832      	bhi.n	9022 <ll_reset+0x8a>
	_radio.advertiser.is_enabled = 0;
    8fbc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    8fc0:	f36f 13c7 	bfc	r3, #7, #1
    8fc4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    8fc8:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
	_radio.advertiser.conn = NULL;
    8fcc:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    8fce:	f360 0300 	bfi	r3, r0, #0, #1
    8fd2:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    8fd6:	2230      	movs	r2, #48	; 0x30
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8fd8:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
    8fdc:	fbb3 f3f2 	udiv	r3, r3, r2
    8fe0:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    8fe4:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
	_radio.packet_rx_last = 0;
    8fe8:	f884 0139 	strb.w	r0, [r4, #313]	; 0x139
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    8fec:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    8fee:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
	_radio.packet_release_last = 0;
    8ff2:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    8ff6:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
	_radio.fc_ack = _radio.fc_req;
    8ffa:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
	_radio.advertiser.conn = NULL;
    8ffe:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	_radio.scanner.conn = NULL;
    9002:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9006:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
	_radio.packet_rx_acquire = 0;
    900a:	f884 013a 	strb.w	r0, [r4, #314]	; 0x13a
	_radio.packet_tx_last = 0;
    900e:	f8a4 016e 	strh.w	r0, [r4, #366]	; 0x16e
	_radio.fc_ack = _radio.fc_req;
    9012:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	ll_filter_reset(false);
    9016:	f000 fee7 	bl	9de8 <ll_filter_reset>
}
    901a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    901e:	f7fd bcb7 	b.w	6990 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    9022:	1da8      	adds	r0, r5, #6
    9024:	21ff      	movs	r1, #255	; 0xff
    9026:	b2c0      	uxtb	r0, r0
    9028:	f7fc f856 	bl	50d8 <role_disable>
    902c:	e7bf      	b.n	8fae <ll_reset+0x16>
    902e:	bf00      	nop
    9030:	20000930 	.word	0x20000930

00009034 <radio_adv_data_get>:
}
    9034:	4800      	ldr	r0, [pc, #0]	; (9038 <radio_adv_data_get+0x4>)
    9036:	4770      	bx	lr
    9038:	2000095a 	.word	0x2000095a

0000903c <radio_scan_data_get>:
}
    903c:	4800      	ldr	r0, [pc, #0]	; (9040 <radio_scan_data_get+0x4>)
    903e:	4770      	bx	lr
    9040:	200009aa 	.word	0x200009aa

00009044 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    9044:	4b02      	ldr	r3, [pc, #8]	; (9050 <ll_adv_is_enabled+0xc>)
    9046:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    904a:	09c0      	lsrs	r0, r0, #7
    904c:	4770      	bx	lr
    904e:	bf00      	nop
    9050:	20000930 	.word	0x20000930

00009054 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    9054:	4b04      	ldr	r3, [pc, #16]	; (9068 <radio_adv_filter_pol_get+0x14>)
    9056:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    905a:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    905c:	bfba      	itte	lt
    905e:	f893 0029 	ldrblt.w	r0, [r3, #41]	; 0x29
    9062:	0980      	lsrlt	r0, r0, #6
	return 0;
    9064:	2000      	movge	r0, #0
}
    9066:	4770      	bx	lr
    9068:	20000930 	.word	0x20000930

0000906c <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    906c:	4a09      	ldr	r2, [pc, #36]	; (9094 <ll_scan_is_enabled+0x28>)
    906e:	f892 30e0 	ldrb.w	r3, [r2, #224]	; 0xe0
    9072:	f892 00e1 	ldrb.w	r0, [r2, #225]	; 0xe1
	       (_radio.scanner.conn ? BIT(2) : 0);
    9076:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    907a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    907e:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    9080:	f003 0301 	and.w	r3, r3, #1
    9084:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    9088:	bf14      	ite	ne
    908a:	2004      	movne	r0, #4
    908c:	2000      	moveq	r0, #0
}
    908e:	4318      	orrs	r0, r3
    9090:	4770      	bx	lr
    9092:	bf00      	nop
    9094:	20000930 	.word	0x20000930

00009098 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    9098:	4b05      	ldr	r3, [pc, #20]	; (90b0 <radio_scan_filter_pol_get+0x18>)
    909a:	f893 00e0 	ldrb.w	r0, [r3, #224]	; 0xe0
    909e:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    90a2:	bf1c      	itt	ne
    90a4:	f893 00e1 	ldrbne.w	r0, [r3, #225]	; 0xe1
    90a8:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    90ac:	4770      	bx	lr
    90ae:	bf00      	nop
    90b0:	20000930 	.word	0x20000930

000090b4 <ll_tx_pwr_lvl_get>:
{
    90b4:	b510      	push	{r4, lr}
    90b6:	4614      	mov	r4, r2
	conn = connection_get(handle);
    90b8:	f7fb fff8 	bl	50ac <connection_get>
	if (!conn) {
    90bc:	b110      	cbz	r0, 90c4 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    90be:	2000      	movs	r0, #0
    90c0:	7020      	strb	r0, [r4, #0]
}
    90c2:	bd10      	pop	{r4, pc}
		return 1;
    90c4:	2001      	movs	r0, #1
    90c6:	e7fc      	b.n	90c2 <ll_tx_pwr_lvl_get+0xe>

000090c8 <ll_rx_get>:
{
    90c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    90cc:	4605      	mov	r5, r0
    90ce:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    90d0:	4918      	ldr	r1, [pc, #96]	; (9134 <ll_rx_get+0x6c>)
    90d2:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
    90d6:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    90da:	4293      	cmp	r3, r2
    90dc:	460f      	mov	r7, r1
    90de:	d01f      	beq.n	9120 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    90e0:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    90e4:	f201 116f 	addw	r1, r1, #367	; 0x16f
    90e8:	f898 2000 	ldrb.w	r2, [r8]
    90ec:	f7fb ff94 	bl	5018 <tx_cmplt_get>
		if (!cmplt) {
    90f0:	4604      	mov	r4, r0
    90f2:	b9e0      	cbnz	r0, 912e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    90f4:	ae02      	add	r6, sp, #8
    90f6:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
    90fa:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    90fe:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
    9102:	4631      	mov	r1, r6
    9104:	f10d 0006 	add.w	r0, sp, #6
    9108:	f7fb ff86 	bl	5018 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    910c:	b934      	cbnz	r4, 911c <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    910e:	b928      	cbnz	r0, 911c <ll_rx_get+0x54>
			*node_rx = _node_rx;
    9110:	f8c5 8000 	str.w	r8, [r5]
}
    9114:	4620      	mov	r0, r4
    9116:	b002      	add	sp, #8
    9118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    911c:	4604      	mov	r4, r0
    911e:	e7ee      	b.n	90fe <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    9120:	f891 2170 	ldrb.w	r2, [r1, #368]	; 0x170
    9124:	f201 116f 	addw	r1, r1, #367	; 0x16f
    9128:	f7fb ff76 	bl	5018 <tx_cmplt_get>
    912c:	4604      	mov	r4, r0
		*node_rx = NULL;
    912e:	2300      	movs	r3, #0
    9130:	602b      	str	r3, [r5, #0]
    9132:	e7ef      	b.n	9114 <ll_rx_get+0x4c>
    9134:	20000930 	.word	0x20000930

00009138 <ll_rx_mem_release>:
{
    9138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    913c:	4c1b      	ldr	r4, [pc, #108]	; (91ac <ll_rx_mem_release+0x74>)
{
    913e:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    9140:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    9142:	f5a4 7694 	sub.w	r6, r4, #296	; 0x128
			mem_release(conn, &_radio.conn_free);
    9146:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    914a:	b928      	cbnz	r0, 9158 <ll_rx_mem_release+0x20>
	*node_rx = _node_rx;
    914c:	6028      	str	r0, [r5, #0]
}
    914e:	b002      	add	sp, #8
    9150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    9154:	f7fd bbd2 	b.w	68fc <packet_rx_allocate.constprop.48>
		switch (_node_rx_free->hdr.type) {
    9158:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    915a:	f8d0 8000 	ldr.w	r8, [r0]
    915e:	2a0a      	cmp	r2, #10
    9160:	d807      	bhi.n	9172 <ll_rx_mem_release+0x3a>
    9162:	2301      	movs	r3, #1
    9164:	4093      	lsls	r3, r2
    9166:	f240 727e 	movw	r2, #1918	; 0x77e
    916a:	4213      	tst	r3, r2
    916c:	d110      	bne.n	9190 <ll_rx_mem_release+0x58>
    916e:	061b      	lsls	r3, r3, #24
    9170:	d413      	bmi.n	919a <ll_rx_mem_release+0x62>
			LL_ASSERT(0);
    9172:	4b0f      	ldr	r3, [pc, #60]	; (91b0 <ll_rx_mem_release+0x78>)
    9174:	4a0f      	ldr	r2, [pc, #60]	; (91b4 <ll_rx_mem_release+0x7c>)
    9176:	4910      	ldr	r1, [pc, #64]	; (91b8 <ll_rx_mem_release+0x80>)
    9178:	4810      	ldr	r0, [pc, #64]	; (91bc <ll_rx_mem_release+0x84>)
    917a:	e9cd 3300 	strd	r3, r3, [sp]
    917e:	4b10      	ldr	r3, [pc, #64]	; (91c0 <ll_rx_mem_release+0x88>)
    9180:	f7f8 f8a8 	bl	12d4 <printk>
    9184:	4040      	eors	r0, r0
    9186:	f380 8811 	msr	BASEPRI, r0
    918a:	f04f 0004 	mov.w	r0, #4
    918e:	df02      	svc	2
			mem_release(_node_rx_free,
    9190:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    9192:	f7fa f810 	bl	31b6 <mem_release>
{
    9196:	4640      	mov	r0, r8
    9198:	e7d7      	b.n	914a <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    919a:	88c2      	ldrh	r2, [r0, #6]
    919c:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    91a0:	f44f 7182 	mov.w	r1, #260	; 0x104
    91a4:	f7fa f81c 	bl	31e0 <mem_get>
			mem_release(conn, &_radio.conn_free);
    91a8:	4639      	mov	r1, r7
    91aa:	e7f2      	b.n	9192 <ll_rx_mem_release+0x5a>
    91ac:	20000a58 	.word	0x20000a58
    91b0:	0000bda7 	.word	0x0000bda7
    91b4:	0000c71e 	.word	0x0000c71e
    91b8:	0000c693 	.word	0x0000c693
    91bc:	0000c669 	.word	0x0000c669
    91c0:	0000d305 	.word	0x0000d305

000091c4 <do_radio_rx_fc_set>:

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    91c4:	4291      	cmp	r1, r2
{
    91c6:	b510      	push	{r4, lr}
    91c8:	4b14      	ldr	r3, [pc, #80]	; (921c <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    91ca:	d119      	bne.n	9200 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    91cc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    91d0:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
    91d4:	4294      	cmp	r4, r2
    91d6:	d111      	bne.n	91fc <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    91d8:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    91da:	bf14      	ite	ne
    91dc:	460a      	movne	r2, r1
    91de:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    91e0:	3a01      	subs	r2, #1
    91e2:	b2d2      	uxtb	r2, r2
    91e4:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    91e8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    91ec:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
			_radio.fc_handle[--ack1] = handle;
    91f0:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
			if (req != _radio.fc_req) {
    91f4:	4291      	cmp	r1, r2
    91f6:	d00f      	beq.n	9218 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    91f8:	f883 1179 	strb.w	r1, [r3, #377]	; 0x179

				return 1;
			}
		} else {
			return 1;
    91fc:	2001      	movs	r0, #1
    91fe:	e005      	b.n	920c <do_radio_rx_fc_set+0x48>
		}
	} else if (((req == 0) &&
    9200:	b929      	cbnz	r1, 920e <do_radio_rx_fc_set+0x4a>
    9202:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
				return 1;
    9206:	1a18      	subs	r0, r3, r0
    9208:	bf18      	it	ne
    920a:	2001      	movne	r0, #1
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
}
    920c:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    920e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    9212:	f8b3 3170 	ldrh.w	r3, [r3, #368]	; 0x170
    9216:	e7f6      	b.n	9206 <do_radio_rx_fc_set+0x42>
	return 0;
    9218:	2000      	movs	r0, #0
    921a:	e7f7      	b.n	920c <do_radio_rx_fc_set+0x48>
    921c:	20000930 	.word	0x20000930

00009220 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    9220:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    9222:	4b14      	ldr	r3, [pc, #80]	; (9274 <radio_rx_fc_set+0x54>)
    9224:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
{
    9228:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    922a:	b302      	cbz	r2, 926e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    922c:	f893 2178 	ldrb.w	r2, [r3, #376]	; 0x178
    9230:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    9232:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179

		if (fc) {
    9236:	b135      	cbz	r5, 9246 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    9238:	f64f 73ff 	movw	r3, #65535	; 0xffff
    923c:	4298      	cmp	r0, r3
    923e:	d016      	beq.n	926e <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    9240:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    9242:	f7ff bfbf 	b.w	91c4 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    9246:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
    924a:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
    924e:	42a0      	cmp	r0, r4
    9250:	d10d      	bne.n	926e <radio_rx_fc_set+0x4e>
    9252:	4291      	cmp	r1, r2
    9254:	d00b      	beq.n	926e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9256:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
			_radio.fc_ack = req;
    925a:	f883 1179 	strb.w	r1, [r3, #377]	; 0x179
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    925e:	42a0      	cmp	r0, r4
    9260:	d005      	beq.n	926e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    9262:	f893 0178 	ldrb.w	r0, [r3, #376]	; 0x178
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    9266:	4288      	cmp	r0, r1
				_radio.fc_ack = ack;
    9268:	bf08      	it	eq
    926a:	f883 2179 	strbeq.w	r2, [r3, #377]	; 0x179
}
    926e:	2000      	movs	r0, #0
    9270:	bc30      	pop	{r4, r5}
    9272:	4770      	bx	lr
    9274:	20000930 	.word	0x20000930

00009278 <ll_adv_scan_state_cb>:
	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
}
    9278:	4770      	bx	lr
    927a:	0000      	movs	r0, r0
    927c:	0000      	movs	r0, r0
	...

00009280 <radio_adv_enable>:
{
    9280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.advertiser.is_enabled) {
    9284:	4fa0      	ldr	r7, [pc, #640]	; (9508 <radio_adv_enable+0x288>)
{
    9286:	b08f      	sub	sp, #60	; 0x3c
    9288:	469a      	mov	sl, r3
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    928a:	2302      	movs	r3, #2
    928c:	930d      	str	r3, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
    928e:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
{
    9292:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	if (_radio.advertiser.is_enabled) {
    9296:	2b00      	cmp	r3, #0
{
    9298:	4683      	mov	fp, r0
    929a:	4688      	mov	r8, r1
    929c:	463d      	mov	r5, r7
	if (_radio.advertiser.is_enabled) {
    929e:	da01      	bge.n	92a4 <radio_adv_enable+0x24>
	return BT_HCI_ERR_CMD_DISALLOWED;
    92a0:	200c      	movs	r0, #12
    92a2:	e12a      	b.n	94fa <radio_adv_enable+0x27a>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    92a4:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
    92a8:	232a      	movs	r3, #42	; 0x2a
    92aa:	f04f 0927 	mov.w	r9, #39	; 0x27
    92ae:	fb19 3902 	smlabb	r9, r9, r2, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    92b2:	f817 3009 	ldrb.w	r3, [r7, r9]
    92b6:	f003 030f 	and.w	r3, r3, #15
    92ba:	2b01      	cmp	r3, #1
    92bc:	f200 80d6 	bhi.w	946c <radio_adv_enable+0x1ec>
		if (_radio.advertiser.conn) {
    92c0:	f8d7 60cc 	ldr.w	r6, [r7, #204]	; 0xcc
    92c4:	2e00      	cmp	r6, #0
    92c6:	d1eb      	bne.n	92a0 <radio_adv_enable+0x20>
		link = mem_acquire(&_radio.link_rx_free);
    92c8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
    92cc:	f7f9 ff5a 	bl	3184 <mem_acquire>
		if (!link) {
    92d0:	900a      	str	r0, [sp, #40]	; 0x28
    92d2:	b158      	cbz	r0, 92ec <radio_adv_enable+0x6c>
		conn = mem_acquire(&_radio.conn_free);
    92d4:	f507 7086 	add.w	r0, r7, #268	; 0x10c
    92d8:	f7f9 ff54 	bl	3184 <mem_acquire>
		if (!conn) {
    92dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    92de:	4604      	mov	r4, r0
    92e0:	b930      	cbnz	r0, 92f0 <radio_adv_enable+0x70>
			mem_release(link, &_radio.link_rx_free);
    92e2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
    92e6:	4610      	mov	r0, r2
    92e8:	f7f9 ff65 	bl	31b6 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    92ec:	2007      	movs	r0, #7
    92ee:	e104      	b.n	94fa <radio_adv_enable+0x27a>
		conn->handle = 0xFFFF;
    92f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    92f4:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    92f6:	4b85      	ldr	r3, [pc, #532]	; (950c <radio_adv_enable+0x28c>)
    92f8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    92fc:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
    92fe:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
    9300:	f366 1386 	bfi	r3, r6, #6, #1
		conn->role = 1;
    9304:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9308:	7743      	strb	r3, [r0, #29]
		conn->latency_event = 0;
    930a:	2306      	movs	r3, #6
    930c:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    930e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
    9312:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->common.fex_valid = 0;
    9314:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
    9318:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
    931c:	f366 0341 	bfi	r3, r6, #1, #1
    9320:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0;
    9324:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->latency_prepare = 0;
    9328:	6286      	str	r6, [r0, #40]	; 0x28
		conn->llcp_version.tx = 0;
    932a:	f366 0300 	bfi	r3, r6, #0, #1
		conn->pkt_tx_head = NULL;
    932e:	e9c0 663b 	strd	r6, r6, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl_last = NULL;
    9332:	e9c0 663d 	strd	r6, r6, [r0, #244]	; 0xf4
		conn->llcp_version.rx = 0;
    9336:	f366 0341 	bfi	r3, r6, #1, #1
		conn->slave.window_widening_event_us = 0;
    933a:	e9c0 6611 	strd	r6, r6, [r0, #68]	; 0x44
		conn->supervision_expire = 0;
    933e:	8606      	strh	r6, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    9340:	8686      	strh	r6, [r0, #52]	; 0x34
		conn->slave.ticks_to_offset = 0;
    9342:	6586      	str	r6, [r0, #88]	; 0x58
    9344:	f8a0 605c 	strh.w	r6, [r0, #92]	; 0x5c
		conn->llcp_version.rx = 0;
    9348:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->llcp_terminate.req = 0;
    934c:	f8a0 6098 	strh.w	r6, [r0, #152]	; 0x98
		conn->llcp_terminate.reason_peer = 0;
    9350:	f880 609b 	strb.w	r6, [r0, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    9354:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		conn->sn = 0;
    9358:	f880 60a8 	strb.w	r6, [r0, #168]	; 0xa8
		conn->pkt_tx_data = NULL;
    935c:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
		conn->pkt_tx_last = NULL;
    9360:	f8a0 6100 	strh.w	r6, [r0, #256]	; 0x100
		_radio.advertiser.conn = conn;
    9364:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	_radio.advertiser.chan_map = chan_map;
    9368:	a80e      	add	r0, sp, #56	; 0x38
	_radio.advertiser.phy_p = phy_p;
    936a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;
    936e:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p;
    9372:	f36b 0302 	bfi	r3, fp, #0, #3
	_radio.advertiser.chan_map = chan_map;
    9376:	f362 03c5 	bfi	r3, r2, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
    937a:	f36a 1387 	bfi	r3, sl, #6, #2
    937e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.hdr.ticks_active_to_start =
    9382:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
    9386:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    9388:	2327      	movs	r3, #39	; 0x27
    938a:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    938c:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    938e:	2300      	movs	r3, #0
    9390:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    9392:	f7fa f88d 	bl	34b0 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9396:	f817 6009 	ldrb.w	r6, [r7, r9]
    939a:	f006 060f 	and.w	r6, r6, #15
    939e:	2e01      	cmp	r6, #1
    93a0:	d166      	bne.n	9470 <radio_adv_enable+0x1f0>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    93a2:	f44f 7327 	mov.w	r3, #668	; 0x29c
    93a6:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    93a8:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    93ac:	4958      	ldr	r1, [pc, #352]	; (9510 <radio_adv_enable+0x290>)
    93ae:	a354      	add	r3, pc, #336	; (adr r3, 9500 <radio_adv_enable+0x280>)
    93b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    93b4:	fba0 0101 	umull	r0, r1, r0, r1
    93b8:	f7f6 ff56 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    93bc:	e9d5 3706 	ldrd	r3, r7, [r5, #24]
    93c0:	429f      	cmp	r7, r3
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    93c2:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    93c4:	bf38      	it	cc
    93c6:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
    93c8:	f1b8 0f00 	cmp.w	r8, #0
    93cc:	d158      	bne.n	9480 <radio_adv_enable+0x200>
    93ce:	1e72      	subs	r2, r6, #1
    93d0:	4253      	negs	r3, r2
    93d2:	4153      	adcs	r3, r2
    93d4:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
    93d8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9524 <radio_adv_enable+0x2a4>
    93dc:	f8df b148 	ldr.w	fp, [pc, #328]	; 9528 <radio_adv_enable+0x2a8>
    93e0:	f363 1686 	bfi	r6, r3, #6, #1
    93e4:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    93e8:	f016 0640 	ands.w	r6, r6, #64	; 0x40
    93ec:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    93f0:	d04e      	beq.n	9490 <radio_adv_enable+0x210>
		u32_t ticks_now = ticker_ticks_now_get();
    93f2:	f7fa fe89 	bl	4108 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    93f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		u32_t ticks_now = ticker_ticks_now_get();
    93f8:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    93fa:	441f      	add	r7, r3
    93fc:	2000      	movs	r0, #0
    93fe:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    9402:	e9cd b005 	strd	fp, r0, [sp, #20]
    9406:	e9cd 0703 	strd	r0, r7, [sp, #12]
    940a:	e9cd 7001 	strd	r7, r0, [sp, #4]
    940e:	9000      	str	r0, [sp, #0]
    9410:	4633      	mov	r3, r6
    9412:	2205      	movs	r2, #5
    9414:	2103      	movs	r1, #3
    9416:	f7fa fd1b 	bl	3e50 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    941a:	2802      	cmp	r0, #2
    941c:	d034      	beq.n	9488 <radio_adv_enable+0x208>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    941e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9420:	b9b8      	cbnz	r0, 9452 <radio_adv_enable+0x1d2>
		ret_cb = TICKER_STATUS_BUSY;
    9422:	2302      	movs	r3, #2
    9424:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
    9426:	4b3b      	ldr	r3, [pc, #236]	; (9514 <radio_adv_enable+0x294>)
    9428:	9006      	str	r0, [sp, #24]
    942a:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    942e:	e9cd 0002 	strd	r0, r0, [sp, #8]
    9432:	e9cd 0304 	strd	r0, r3, [sp, #16]
    9436:	2203      	movs	r2, #3
    9438:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    943c:	9300      	str	r3, [sp, #0]
    943e:	9001      	str	r0, [sp, #4]
    9440:	4633      	mov	r3, r6
    9442:	4611      	mov	r1, r2
		ret =
    9444:	f7fa fd04 	bl	3e50 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    9448:	2802      	cmp	r0, #2
    944a:	d043      	beq.n	94d4 <radio_adv_enable+0x254>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    944c:	980d      	ldr	r0, [sp, #52]	; 0x34
    944e:	2800      	cmp	r0, #0
    9450:	d044      	beq.n	94dc <radio_adv_enable+0x25c>
	if (conn) {
    9452:	2c00      	cmp	r4, #0
    9454:	f43f af24 	beq.w	92a0 <radio_adv_enable+0x20>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    9458:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    945c:	492e      	ldr	r1, [pc, #184]	; (9518 <radio_adv_enable+0x298>)
    945e:	f7f9 feaa 	bl	31b6 <mem_release>
		mem_release(conn, &_radio.conn_free);
    9462:	492e      	ldr	r1, [pc, #184]	; (951c <radio_adv_enable+0x29c>)
    9464:	4620      	mov	r0, r4
    9466:	f7f9 fea6 	bl	31b6 <mem_release>
    946a:	e719      	b.n	92a0 <radio_adv_enable+0x20>
		conn = NULL;
    946c:	2400      	movs	r4, #0
    946e:	e77b      	b.n	9368 <radio_adv_enable+0xe8>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    9470:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    9472:	bf0c      	ite	eq
    9474:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    9478:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    947c:	4358      	muls	r0, r3
    947e:	e795      	b.n	93ac <radio_adv_enable+0x12c>
	_radio.advertiser.is_hdcd = !interval &&
    9480:	2300      	movs	r3, #0
    9482:	e7a7      	b.n	93d4 <radio_adv_enable+0x154>
				cpu_sleep();
    9484:	f7fb fd2c 	bl	4ee0 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    9488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    948a:	2b02      	cmp	r3, #2
    948c:	d0fa      	beq.n	9484 <radio_adv_enable+0x204>
    948e:	e7c6      	b.n	941e <radio_adv_enable+0x19e>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9490:	f7fa fe3a 	bl	4108 <ticker_ticks_now_get>
		ret =
    9494:	e9cd 9a07 	strd	r9, sl, [sp, #28]
    9498:	e9cd b605 	strd	fp, r6, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    949c:	900a      	str	r0, [sp, #40]	; 0x28
    949e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    94a0:	481f      	ldr	r0, [pc, #124]	; (9520 <radio_adv_enable+0x2a0>)
		ret =
    94a2:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    94a4:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    94a8:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    94aa:	fba8 0100 	umull	r0, r1, r8, r0
    94ae:	2391      	movs	r3, #145	; 0x91
    94b0:	fb03 1108 	mla	r1, r3, r8, r1
    94b4:	a312      	add	r3, pc, #72	; (adr r3, 9500 <radio_adv_enable+0x280>)
    94b6:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    94ba:	e9cd 6703 	strd	r6, r7, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    94be:	f7f6 fed3 	bl	268 <__aeabi_uldivmod>
		ret =
    94c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    94c4:	e9cd 6000 	strd	r6, r0, [sp]
    94c8:	2205      	movs	r2, #5
    94ca:	2103      	movs	r1, #3
    94cc:	4630      	mov	r0, r6
    94ce:	e7b9      	b.n	9444 <radio_adv_enable+0x1c4>
			cpu_sleep();
    94d0:	f7fb fd06 	bl	4ee0 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    94d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    94d6:	2b02      	cmp	r3, #2
    94d8:	d0fa      	beq.n	94d0 <radio_adv_enable+0x250>
    94da:	e7b7      	b.n	944c <radio_adv_enable+0x1cc>
		_radio.advertiser.is_enabled = 1;
    94dc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    94e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    94e4:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    94e8:	f895 30e0 	ldrb.w	r3, [r5, #224]	; 0xe0
    94ec:	f013 0401 	ands.w	r4, r3, #1
    94f0:	d103      	bne.n	94fa <radio_adv_enable+0x27a>
			ll_adv_scan_state_cb(BIT(0));
    94f2:	2001      	movs	r0, #1
    94f4:	f7ff fec0 	bl	9278 <ll_adv_scan_state_cb>
		return 0;
    94f8:	4620      	mov	r0, r4
}
    94fa:	b00f      	add	sp, #60	; 0x3c
    94fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9500:	1afd498d 	.word	0x1afd498d
    9504:	00000007 	.word	0x00000007
    9508:	20000930 	.word	0x20000930
    950c:	0001400c 	.word	0x0001400c
    9510:	3b9aca00 	.word	0x3b9aca00
    9514:	000068a1 	.word	0x000068a1
    9518:	20000a70 	.word	0x20000a70
    951c:	20000a3c 	.word	0x20000a3c
    9520:	84e72a00 	.word	0x84e72a00
    9524:	00004f25 	.word	0x00004f25
    9528:	0000683d 	.word	0x0000683d

0000952c <radio_adv_disable>:
{
    952c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    952e:	2103      	movs	r1, #3
    9530:	2005      	movs	r0, #5
    9532:	f7fb fdd1 	bl	50d8 <role_disable>
	if (!status) {
    9536:	4605      	mov	r5, r0
    9538:	b9e8      	cbnz	r0, 9576 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    953a:	4c10      	ldr	r4, [pc, #64]	; (957c <radio_adv_disable+0x50>)
    953c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    9540:	f360 12c7 	bfi	r2, r0, #7, #1
    9544:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    9548:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    954c:	07d3      	lsls	r3, r2, #31
    954e:	d401      	bmi.n	9554 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    9550:	f7ff fe92 	bl	9278 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    9554:	f8d4 60cc 	ldr.w	r6, [r4, #204]	; 0xcc
		if (conn) {
    9558:	b15e      	cbz	r6, 9572 <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    955a:	2300      	movs	r3, #0
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    955c:	4908      	ldr	r1, [pc, #32]	; (9580 <radio_adv_disable+0x54>)
    955e:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
			_radio.advertiser.conn = NULL;
    9562:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    9566:	f7f9 fe26 	bl	31b6 <mem_release>
			mem_release(conn, &_radio.conn_free);
    956a:	4906      	ldr	r1, [pc, #24]	; (9584 <radio_adv_disable+0x58>)
    956c:	4630      	mov	r0, r6
    956e:	f7f9 fe22 	bl	31b6 <mem_release>
}
    9572:	4628      	mov	r0, r5
    9574:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    9576:	250c      	movs	r5, #12
    9578:	e7fb      	b.n	9572 <radio_adv_disable+0x46>
    957a:	bf00      	nop
    957c:	20000930 	.word	0x20000930
    9580:	20000a70 	.word	0x20000a70
    9584:	20000a3c 	.word	0x20000a3c

00009588 <ll_rx_dequeue>:
{
    9588:	b530      	push	{r4, r5, lr}
    958a:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    958c:	4d48      	ldr	r5, [pc, #288]	; (96b0 <ll_rx_dequeue+0x128>)
	struct radio_pdu_node_rx *node_rx = NULL;
    958e:	aa04      	add	r2, sp, #16
    9590:	2300      	movs	r3, #0
    9592:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    9596:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
    959a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    959e:	f7f9 fe48 	bl	3232 <memq_dequeue>
    95a2:	462c      	mov	r4, r5
	LL_ASSERT(link);
    95a4:	b970      	cbnz	r0, 95c4 <ll_rx_dequeue+0x3c>
    95a6:	4b43      	ldr	r3, [pc, #268]	; (96b4 <ll_rx_dequeue+0x12c>)
    95a8:	4a43      	ldr	r2, [pc, #268]	; (96b8 <ll_rx_dequeue+0x130>)
    95aa:	4944      	ldr	r1, [pc, #272]	; (96bc <ll_rx_dequeue+0x134>)
    95ac:	4844      	ldr	r0, [pc, #272]	; (96c0 <ll_rx_dequeue+0x138>)
    95ae:	e9cd 3300 	strd	r3, r3, [sp]
    95b2:	4b44      	ldr	r3, [pc, #272]	; (96c4 <ll_rx_dequeue+0x13c>)
		LL_ASSERT(_radio.link_rx_data_quota <
    95b4:	f7f7 fe8e 	bl	12d4 <printk>
    95b8:	4040      	eors	r0, r0
    95ba:	f380 8811 	msr	BASEPRI, r0
    95be:	f04f 0004 	mov.w	r0, #4
    95c2:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    95c4:	f505 71a0 	add.w	r1, r5, #320	; 0x140
    95c8:	f7f9 fdf5 	bl	31b6 <mem_release>
	switch (node_rx->hdr.type) {
    95cc:	9a03      	ldr	r2, [sp, #12]
    95ce:	7911      	ldrb	r1, [r2, #4]
    95d0:	290a      	cmp	r1, #10
    95d2:	d807      	bhi.n	95e4 <ll_rx_dequeue+0x5c>
    95d4:	2301      	movs	r3, #1
    95d6:	408b      	lsls	r3, r1
    95d8:	f240 707e 	movw	r0, #1918	; 0x77e
    95dc:	4203      	tst	r3, r0
    95de:	d109      	bne.n	95f4 <ll_rx_dequeue+0x6c>
    95e0:	0618      	lsls	r0, r3, #24
    95e2:	d419      	bmi.n	9618 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
    95e4:	4b33      	ldr	r3, [pc, #204]	; (96b4 <ll_rx_dequeue+0x12c>)
    95e6:	4a34      	ldr	r2, [pc, #208]	; (96b8 <ll_rx_dequeue+0x130>)
    95e8:	4934      	ldr	r1, [pc, #208]	; (96bc <ll_rx_dequeue+0x134>)
    95ea:	4837      	ldr	r0, [pc, #220]	; (96c8 <ll_rx_dequeue+0x140>)
    95ec:	e9cd 3300 	strd	r3, r3, [sp]
    95f0:	4b34      	ldr	r3, [pc, #208]	; (96c4 <ll_rx_dequeue+0x13c>)
    95f2:	e7df      	b.n	95b4 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
    95f4:	f895 0138 	ldrb.w	r0, [r5, #312]	; 0x138
    95f8:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
    95fc:	3801      	subs	r0, #1
    95fe:	4283      	cmp	r3, r0
    9600:	db07      	blt.n	9612 <ll_rx_dequeue+0x8a>
    9602:	4b2c      	ldr	r3, [pc, #176]	; (96b4 <ll_rx_dequeue+0x12c>)
    9604:	4a2c      	ldr	r2, [pc, #176]	; (96b8 <ll_rx_dequeue+0x130>)
    9606:	492d      	ldr	r1, [pc, #180]	; (96bc <ll_rx_dequeue+0x134>)
    9608:	4830      	ldr	r0, [pc, #192]	; (96cc <ll_rx_dequeue+0x144>)
    960a:	e9cd 3300 	strd	r3, r3, [sp]
    960e:	4b2d      	ldr	r3, [pc, #180]	; (96c4 <ll_rx_dequeue+0x13c>)
    9610:	e7d0      	b.n	95b4 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
    9612:	3301      	adds	r3, #1
    9614:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    9618:	2906      	cmp	r1, #6
    961a:	d137      	bne.n	968c <ll_rx_dequeue+0x104>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    961c:	7ad3      	ldrb	r3, [r2, #11]
    961e:	2b3c      	cmp	r3, #60	; 0x3c
    9620:	d00d      	beq.n	963e <ll_rx_dequeue+0xb6>
    9622:	7b12      	ldrb	r2, [r2, #12]
    9624:	b9e2      	cbnz	r2, 9660 <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
    9626:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    962a:	07d9      	lsls	r1, r3, #31
    962c:	d430      	bmi.n	9690 <ll_rx_dequeue+0x108>
    962e:	4b21      	ldr	r3, [pc, #132]	; (96b4 <ll_rx_dequeue+0x12c>)
    9630:	4a21      	ldr	r2, [pc, #132]	; (96b8 <ll_rx_dequeue+0x130>)
    9632:	4922      	ldr	r1, [pc, #136]	; (96bc <ll_rx_dequeue+0x134>)
    9634:	4826      	ldr	r0, [pc, #152]	; (96d0 <ll_rx_dequeue+0x148>)
    9636:	e9cd 3300 	strd	r3, r3, [sp]
    963a:	4b22      	ldr	r3, [pc, #136]	; (96c4 <ll_rx_dequeue+0x13c>)
    963c:	e7ba      	b.n	95b4 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
    963e:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    9640:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
				_radio.advertiser.conn = NULL;
    9644:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
			LL_ASSERT(_radio.advertiser.is_enabled);
    9648:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    964c:	2b00      	cmp	r3, #0
    964e:	db09      	blt.n	9664 <ll_rx_dequeue+0xdc>
    9650:	4b18      	ldr	r3, [pc, #96]	; (96b4 <ll_rx_dequeue+0x12c>)
    9652:	4a19      	ldr	r2, [pc, #100]	; (96b8 <ll_rx_dequeue+0x130>)
    9654:	4919      	ldr	r1, [pc, #100]	; (96bc <ll_rx_dequeue+0x134>)
    9656:	481f      	ldr	r0, [pc, #124]	; (96d4 <ll_rx_dequeue+0x14c>)
    9658:	e9cd 3300 	strd	r3, r3, [sp]
    965c:	4b19      	ldr	r3, [pc, #100]	; (96c4 <ll_rx_dequeue+0x13c>)
    965e:	e7a9      	b.n	95b4 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
    9660:	2500      	movs	r5, #0
    9662:	e7f1      	b.n	9648 <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
    9664:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    9668:	f36f 13c7 	bfc	r3, #7, #1
    966c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    9670:	b99d      	cbnz	r5, 969a <ll_rx_dequeue+0x112>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    9672:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    9676:	f000 0301 	and.w	r3, r0, #1
		     _radio.advertiser.is_enabled;
    967a:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    967e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
		if (!bm) {
    9682:	ea50 0043 	orrs.w	r0, r0, r3, lsl #1
    9686:	d101      	bne.n	968c <ll_rx_dequeue+0x104>
			ll_adv_scan_state_cb(0);
    9688:	f7ff fdf6 	bl	9278 <ll_adv_scan_state_cb>
}
    968c:	b005      	add	sp, #20
    968e:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
    9690:	f362 0300 	bfi	r3, r2, #0, #1
    9694:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
    9698:	e7eb      	b.n	9672 <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
    969a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    969e:	490e      	ldr	r1, [pc, #56]	; (96d8 <ll_rx_dequeue+0x150>)
    96a0:	f7f9 fd89 	bl	31b6 <mem_release>
			mem_release(conn, &_radio.conn_free);
    96a4:	490d      	ldr	r1, [pc, #52]	; (96dc <ll_rx_dequeue+0x154>)
    96a6:	4628      	mov	r0, r5
    96a8:	f7f9 fd85 	bl	31b6 <mem_release>
    96ac:	e7e1      	b.n	9672 <ll_rx_dequeue+0xea>
    96ae:	bf00      	nop
    96b0:	20000930 	.word	0x20000930
    96b4:	0000bda7 	.word	0x0000bda7
    96b8:	0000c71e 	.word	0x0000c71e
    96bc:	0000c693 	.word	0x0000c693
    96c0:	0000d90d 	.word	0x0000d90d
    96c4:	0000d2f7 	.word	0x0000d2f7
    96c8:	0000c669 	.word	0x0000c669
    96cc:	0000d696 	.word	0x0000d696
    96d0:	0000d72e 	.word	0x0000d72e
    96d4:	0000d6f0 	.word	0x0000d6f0
    96d8:	20000a70 	.word	0x20000a70
    96dc:	20000a3c 	.word	0x20000a3c

000096e0 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    96e0:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    96e2:	4c0b      	ldr	r4, [pc, #44]	; (9710 <rtc0_nrf5_isr+0x30>)
    96e4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    96e8:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    96ec:	b122      	cbz	r2, 96f8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    96ee:	2000      	movs	r0, #0
    96f0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    96f4:	f7fa fb9a 	bl	3e2c <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    96f8:	b12d      	cbz	r5, 9706 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    96fa:	2300      	movs	r3, #0
    96fc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    9700:	2001      	movs	r0, #1
    9702:	f7fa fb93 	bl	3e2c <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    9706:	2000      	movs	r0, #0
}
    9708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    970c:	f7f9 be3e 	b.w	338c <mayfly_run>
    9710:	4000b000 	.word	0x4000b000

00009714 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    9714:	2001      	movs	r0, #1
    9716:	f7f9 be39 	b.w	338c <mayfly_run>

0000971a <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    971a:	4668      	mov	r0, sp
    971c:	f020 0107 	bic.w	r1, r0, #7
    9720:	468d      	mov	sp, r1
    9722:	b501      	push	{r0, lr}
	isr_radio();
    9724:	f000 fc88 	bl	a038 <isr_radio>
	ISR_DIRECT_PM();
    9728:	f7f7 fac6 	bl	cb8 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    972c:	f7f7 f8a4 	bl	878 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    9730:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    9734:	4685      	mov	sp, r0
    9736:	4770      	bx	lr

00009738 <radio_active_callback>:
}
    9738:	4770      	bx	lr
	...

0000973c <radio_event_callback>:
	k_sem_give(sem_recv);
    973c:	4b01      	ldr	r3, [pc, #4]	; (9744 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    973e:	6818      	ldr	r0, [r3, #0]
    9740:	f001 be3a 	b.w	b3b8 <_impl_k_sem_give>
    9744:	200010d4 	.word	0x200010d4

00009748 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    9748:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    974a:	4b42      	ldr	r3, [pc, #264]	; (9854 <ll_init+0x10c>)
{
    974c:	b087      	sub	sp, #28
	sem_recv = sem_rx;
    974e:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    9750:	4841      	ldr	r0, [pc, #260]	; (9858 <ll_init+0x110>)
    9752:	f001 fa3d 	bl	abd0 <device_get_binding>
	if (!clk_k32) {
    9756:	b918      	cbnz	r0, 9760 <ll_init+0x18>
		return -ENODEV;
    9758:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    975c:	b007      	add	sp, #28
    975e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->on(dev, sys);
    9760:	6843      	ldr	r3, [r0, #4]
    9762:	2101      	movs	r1, #1
    9764:	681b      	ldr	r3, [r3, #0]
    9766:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    9768:	483c      	ldr	r0, [pc, #240]	; (985c <ll_init+0x114>)
    976a:	f001 fa31 	bl	abd0 <device_get_binding>
	if (!entropy) {
    976e:	4604      	mov	r4, r0
    9770:	2800      	cmp	r0, #0
    9772:	d0f1      	beq.n	9758 <ll_init+0x10>
	cntr_init();
    9774:	f000 fb44 	bl	9e00 <cntr_init>
	mayfly_init();
    9778:	f7f9 fd68 	bl	324c <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    977c:	4b38      	ldr	r3, [pc, #224]	; (9860 <ll_init+0x118>)
    977e:	2208      	movs	r2, #8
    9780:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    9782:	2203      	movs	r2, #3
    9784:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    9786:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    9788:	4a36      	ldr	r2, [pc, #216]	; (9864 <ll_init+0x11c>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    978a:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    978c:	2502      	movs	r5, #2
    978e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    9790:	9205      	str	r2, [sp, #20]
    9792:	4a35      	ldr	r2, [pc, #212]	; (9868 <ll_init+0x120>)
    9794:	9204      	str	r2, [sp, #16]
    9796:	4a35      	ldr	r2, [pc, #212]	; (986c <ll_init+0x124>)
    9798:	9203      	str	r2, [sp, #12]
    979a:	4a35      	ldr	r2, [pc, #212]	; (9870 <ll_init+0x128>)
    979c:	9202      	str	r2, [sp, #8]
    979e:	220d      	movs	r2, #13
    97a0:	e9cd 3200 	strd	r3, r2, [sp]
    97a4:	2107      	movs	r1, #7
    97a6:	2304      	movs	r3, #4
    97a8:	4a32      	ldr	r2, [pc, #200]	; (9874 <ll_init+0x12c>)
    97aa:	f7fa fb03 	bl	3db4 <ticker_init>
	LL_ASSERT(!err);
    97ae:	4607      	mov	r7, r0
    97b0:	b170      	cbz	r0, 97d0 <ll_init+0x88>
    97b2:	4b31      	ldr	r3, [pc, #196]	; (9878 <ll_init+0x130>)
    97b4:	4a31      	ldr	r2, [pc, #196]	; (987c <ll_init+0x134>)
    97b6:	4932      	ldr	r1, [pc, #200]	; (9880 <ll_init+0x138>)
    97b8:	4832      	ldr	r0, [pc, #200]	; (9884 <ll_init+0x13c>)
    97ba:	e9cd 3300 	strd	r3, r3, [sp]
    97be:	4b32      	ldr	r3, [pc, #200]	; (9888 <ll_init+0x140>)
    97c0:	f7f7 fd88 	bl	12d4 <printk>
    97c4:	4040      	eors	r0, r0
    97c6:	f380 8811 	msr	BASEPRI, r0
    97ca:	f04f 0004 	mov.w	r0, #4
    97ce:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    97d0:	482e      	ldr	r0, [pc, #184]	; (988c <ll_init+0x144>)
    97d2:	f001 f9fd 	bl	abd0 <device_get_binding>
	if (!clk_m16) {
    97d6:	2800      	cmp	r0, #0
    97d8:	d0be      	beq.n	9758 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    97da:	4b2d      	ldr	r3, [pc, #180]	; (9890 <ll_init+0x148>)
    97dc:	9304      	str	r3, [sp, #16]
    97de:	9501      	str	r5, [sp, #4]
    97e0:	231b      	movs	r3, #27
    97e2:	f44f 76f8 	mov.w	r6, #496	; 0x1f0
    97e6:	2501      	movs	r5, #1
    97e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    97ec:	4622      	mov	r2, r4
    97ee:	9605      	str	r6, [sp, #20]
    97f0:	9500      	str	r5, [sp, #0]
    97f2:	463b      	mov	r3, r7
    97f4:	2107      	movs	r1, #7
    97f6:	f7ff fb51 	bl	8e9c <radio_init>
	if (err) {
    97fa:	4604      	mov	r4, r0
    97fc:	b168      	cbz	r0, 981a <ll_init+0xd2>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
    97fe:	4b1e      	ldr	r3, [pc, #120]	; (9878 <ll_init+0x130>)
    9800:	4a1e      	ldr	r2, [pc, #120]	; (987c <ll_init+0x134>)
    9802:	491f      	ldr	r1, [pc, #124]	; (9880 <ll_init+0x138>)
    9804:	e9cd 3000 	strd	r3, r0, [sp]
    9808:	e9cd 6302 	strd	r6, r3, [sp, #8]
    980c:	4821      	ldr	r0, [pc, #132]	; (9894 <ll_init+0x14c>)
    980e:	4b1e      	ldr	r3, [pc, #120]	; (9888 <ll_init+0x140>)
    9810:	f7f7 fd60 	bl	12d4 <printk>
		return -ENOMEM;
    9814:	f06f 000b 	mvn.w	r0, #11
    9818:	e7a0      	b.n	975c <ll_init+0x14>
	ll_filter_reset(true);
    981a:	4628      	mov	r0, r5
    981c:	f000 fae4 	bl	9de8 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    9820:	4622      	mov	r2, r4
    9822:	4621      	mov	r1, r4
    9824:	4628      	mov	r0, r5
    9826:	f7f7 fa2d 	bl	c84 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    982a:	4622      	mov	r2, r4
    982c:	4621      	mov	r1, r4
    982e:	200b      	movs	r0, #11
    9830:	f7f7 fa28 	bl	c84 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    9834:	4622      	mov	r2, r4
    9836:	4621      	mov	r1, r4
    9838:	2018      	movs	r0, #24
    983a:	f7f7 fa23 	bl	c84 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    983e:	4628      	mov	r0, r5
    9840:	f7f7 f9ee 	bl	c20 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    9844:	200b      	movs	r0, #11
    9846:	f7f7 f9eb 	bl	c20 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    984a:	2018      	movs	r0, #24
    984c:	f7f7 f9e8 	bl	c20 <_arch_irq_enable>
	return 0;
    9850:	4620      	mov	r0, r4
    9852:	e783      	b.n	975c <ll_init+0x14>
    9854:	200010d4 	.word	0x200010d4
    9858:	0000c2a4 	.word	0x0000c2a4
    985c:	0000c282 	.word	0x0000c282
    9860:	200010b4 	.word	0x200010b4
    9864:	0000a959 	.word	0x0000a959
    9868:	0000a8b5 	.word	0x0000a8b5
    986c:	0000a859 	.word	0x0000a859
    9870:	20000e44 	.word	0x20000e44
    9874:	20000d2c 	.word	0x20000d2c
    9878:	0000bda7 	.word	0x0000bda7
    987c:	0000c71e 	.word	0x0000c71e
    9880:	0000c693 	.word	0x0000c693
    9884:	0000ddbc 	.word	0x0000ddbc
    9888:	0000ddb4 	.word	0x0000ddb4
    988c:	0000c2af 	.word	0x0000c2af
    9890:	20000b3c 	.word	0x20000b3c
    9894:	0000dde2 	.word	0x0000dde2

00009898 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    9898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    989c:	b085      	sub	sp, #20
    989e:	4699      	mov	r9, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    98a0:	4b73      	ldr	r3, [pc, #460]	; (9a70 <ll_adv_params_set+0x1d8>)
    98a2:	9302      	str	r3, [sp, #8]
    98a4:	f240 7301 	movw	r3, #1793	; 0x701
{
    98a8:	460d      	mov	r5, r1
    98aa:	4614      	mov	r4, r2
    98ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
    98ae:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    98b2:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    98b6:	f7ff fbc5 	bl	9044 <ll_adv_is_enabled>
    98ba:	4680      	mov	r8, r0
    98bc:	2800      	cmp	r0, #0
    98be:	f040 80d1 	bne.w	9a64 <ll_adv_params_set+0x1cc>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */

	ll_adv.phy_p = BIT(0);
    98c2:	496c      	ldr	r1, [pc, #432]	; (9a74 <ll_adv_params_set+0x1dc>)
    98c4:	780b      	ldrb	r3, [r1, #0]
    98c6:	2201      	movs	r2, #1
    98c8:	f362 1347 	bfi	r3, r2, #5, #3

	/* extended */
	if (adv_type > 0x04) {
    98cc:	f1b9 0f04 	cmp.w	r9, #4
	ll_adv.phy_p = BIT(0);
    98d0:	700b      	strb	r3, [r1, #0]
	if (adv_type > 0x04) {
    98d2:	d90b      	bls.n	98ec <ll_adv_params_set+0x54>
		/* legacy */
		if (evt_prop & BIT(4)) {
    98d4:	06e8      	lsls	r0, r5, #27
    98d6:	f005 0303 	and.w	r3, r5, #3
    98da:	d50f      	bpl.n	98fc <ll_adv_params_set+0x64>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    98dc:	4a66      	ldr	r2, [pc, #408]	; (9a78 <ll_adv_params_set+0x1e0>)
    98de:	9201      	str	r2, [sp, #4]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    98e0:	072a      	lsls	r2, r5, #28
    98e2:	d406      	bmi.n	98f2 <ll_adv_params_set+0x5a>
			adv_type = leg_adv_type[evt_prop & 0x03];
    98e4:	aa04      	add	r2, sp, #16
    98e6:	4413      	add	r3, r2
    98e8:	f813 9c0c 	ldrb.w	r9, [r3, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type != 0x01) {
    98ec:	f1b9 0f01 	cmp.w	r9, #1
    98f0:	d112      	bne.n	9918 <ll_adv_params_set+0x80>
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
    98f2:	2300      	movs	r3, #0
    98f4:	604b      	str	r3, [r1, #4]
    98f6:	f04f 0901 	mov.w	r9, #1
    98fa:	e00e      	b.n	991a <ll_adv_params_set+0x82>
			if (((evt_prop & 0x03) == 0x03) ||
    98fc:	2b03      	cmp	r3, #3
    98fe:	f000 80b4 	beq.w	9a6a <ll_adv_params_set+0x1d2>
    9902:	f005 030c 	and.w	r3, r5, #12
    9906:	2b0c      	cmp	r3, #12
    9908:	f000 80af 	beq.w	9a6a <ll_adv_params_set+0x1d2>
			ll_adv.phy_p = phy_p;
    990c:	780b      	ldrb	r3, [r1, #0]
    990e:	f367 1347 	bfi	r3, r7, #5, #3
    9912:	700b      	strb	r3, [r1, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    9914:	f04f 0905 	mov.w	r9, #5
		ll_adv.interval = interval;
    9918:	604c      	str	r4, [r1, #4]
	}
	ll_adv.chan_map = chan_map;
    991a:	780b      	ldrb	r3, [r1, #0]
    991c:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
    9920:	f362 0302 	bfi	r3, r2, #0, #3
	ll_adv.filter_policy = filter_policy;
    9924:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    9928:	f362 03c4 	bfi	r3, r2, #3, #2
    992c:	700b      	strb	r3, [r1, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    992e:	f7ff fb81 	bl	9034 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9932:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    9936:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    993a:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = pdu_adv_type[adv_type];
    993e:	ab04      	add	r3, sp, #16
    9940:	4499      	add	r9, r3
    9942:	5c83      	ldrb	r3, [r0, r2]
    9944:	f819 1c08 	ldrb.w	r1, [r9, #-8]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    9948:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	pdu->type = pdu_adv_type[adv_type];
    994c:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->rfu = 0;
    9950:	f36f 1304 	bfc	r3, #4, #1
    9954:	5483      	strb	r3, [r0, r2]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    9956:	b2db      	uxtb	r3, r3
    9958:	f003 010f 	and.w	r1, r3, #15
    995c:	2901      	cmp	r1, #1
		pdu->chan_sel = 1;
    995e:	bf94      	ite	ls
    9960:	f043 0320 	orrls.w	r3, r3, #32
		pdu->chan_sel = 0;
    9964:	f36f 1345 	bfchi	r3, #5, #1
    9968:	5483      	strb	r3, [r0, r2]
	pdu->tx_addr = own_addr_type & 0x1;
    996a:	5c83      	ldrb	r3, [r0, r2]
    996c:	f009 0901 	and.w	r9, r9, #1
    9970:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    9974:	f36f 13c7 	bfc	r3, #7, #1
    9978:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    997a:	b2db      	uxtb	r3, r3
    997c:	f003 010f 	and.w	r1, r3, #15
    9980:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9982:	eb00 0402 	add.w	r4, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    9986:	d10d      	bne.n	99a4 <ll_adv_params_set+0x10c>
		pdu->rx_addr = direct_addr_type;
    9988:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    998c:	f361 13c7 	bfi	r3, r1, #7, #1
    9990:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    9992:	990e      	ldr	r1, [sp, #56]	; 0x38
    9994:	2206      	movs	r2, #6
    9996:	f104 0008 	add.w	r0, r4, #8
    999a:	f7f6 fe20 	bl	5de <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    999e:	230c      	movs	r3, #12

		/* NOTE: AdvA, filled at enable and RPA timeout */
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    99a0:	7063      	strb	r3, [r4, #1]
    99a2:	e03c      	b.n	9a1e <ll_adv_params_set+0x186>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    99a4:	2907      	cmp	r1, #7
    99a6:	d158      	bne.n	9a5a <ll_adv_params_set+0x1c2>
		p->ext_hdr_len = 0;
    99a8:	78a1      	ldrb	r1, [r4, #2]
		p->adv_mode = evt_prop & 0x03;
    99aa:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    99ae:	f365 1187 	bfi	r1, r5, #6, #2
    99b2:	70a1      	strb	r1, [r4, #2]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    99b4:	06a8      	lsls	r0, r5, #26
		*(u8_t *)h = 0;
    99b6:	f04f 0100 	mov.w	r1, #0
		p = (void *)&pdu->adv_ext_ind;
    99ba:	f104 0302 	add.w	r3, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    99be:	f104 0204 	add.w	r2, r4, #4
		*(u8_t *)h = 0;
    99c2:	70e1      	strb	r1, [r4, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
    99c4:	d409      	bmi.n	99da <ll_adv_params_set+0x142>
    99c6:	78a1      	ldrb	r1, [r4, #2]
    99c8:	f011 0fc0 	tst.w	r1, #192	; 0xc0
    99cc:	d105      	bne.n	99da <ll_adv_params_set+0x142>
    99ce:	2f04      	cmp	r7, #4
			h->adv_addr = 1;
    99d0:	bf1e      	ittt	ne
    99d2:	2201      	movne	r2, #1
    99d4:	70e2      	strbne	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    99d6:	f104 020a 	addne.w	r2, r4, #10
		if (evt_prop & BIT(6)) {
    99da:	0669      	lsls	r1, r5, #25
			h->tx_pwr = 1;
    99dc:	bf44      	itt	mi
    99de:	78e1      	ldrbmi	r1, [r4, #3]
			ptr++;
    99e0:	3201      	addmi	r2, #1
		len = ptr - (u8_t *)p;
    99e2:	eba2 0303 	sub.w	r3, r2, r3
			h->tx_pwr = 1;
    99e6:	bf48      	it	mi
    99e8:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
		len = ptr - (u8_t *)p;
    99ec:	b2db      	uxtb	r3, r3
			h->tx_pwr = 1;
    99ee:	bf48      	it	mi
    99f0:	70e1      	strbmi	r1, [r4, #3]
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    99f2:	2b02      	cmp	r3, #2
			p->ext_hdr_len = len -
    99f4:	bf8a      	itet	hi
    99f6:	78a1      	ldrbhi	r1, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    99f8:	2301      	movls	r3, #1
			p->ext_hdr_len = len -
    99fa:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    99fe:	7063      	strb	r3, [r4, #1]
		if (h->tx_pwr) {
    9a00:	78e3      	ldrb	r3, [r4, #3]
			p->ext_hdr_len = len -
    9a02:	bf84      	itt	hi
    9a04:	f360 0105 	bfihi	r1, r0, #0, #6
    9a08:	70a1      	strbhi	r1, [r4, #2]
		if (h->tx_pwr) {
    9a0a:	065b      	lsls	r3, r3, #25
    9a0c:	d507      	bpl.n	9a1e <ll_adv_params_set+0x186>
			if (tx_pwr) {
    9a0e:	b316      	cbz	r6, 9a56 <ll_adv_params_set+0x1be>
				if (*tx_pwr != 0x7F) {
    9a10:	7833      	ldrb	r3, [r6, #0]
    9a12:	2b7f      	cmp	r3, #127	; 0x7f
    9a14:	d101      	bne.n	9a1a <ll_adv_params_set+0x182>
					*tx_pwr = _tx_pwr;
    9a16:	2300      	movs	r3, #0
    9a18:	7033      	strb	r3, [r6, #0]
			*ptr = _tx_pwr;
    9a1a:	f802 3c01 	strb.w	r3, [r2, #-1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    9a1e:	f7ff fb0d 	bl	903c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9a22:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
    9a26:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    9a2a:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9a2e:	2404      	movs	r4, #4
    9a30:	5c83      	ldrb	r3, [r0, r2]
    9a32:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    9a36:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    9a3a:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    9a3e:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9a42:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    9a44:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    9a46:	784b      	ldrb	r3, [r1, #1]
    9a48:	b90b      	cbnz	r3, 9a4e <ll_adv_params_set+0x1b6>
		pdu->len = BDADDR_SIZE;
    9a4a:	2306      	movs	r3, #6
    9a4c:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    9a4e:	4640      	mov	r0, r8
    9a50:	b005      	add	sp, #20
    9a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_tx_pwr = 0;
    9a56:	4633      	mov	r3, r6
    9a58:	e7df      	b.n	9a1a <ll_adv_params_set+0x182>
	} else if (pdu->len == 0) {
    9a5a:	7863      	ldrb	r3, [r4, #1]
    9a5c:	2b00      	cmp	r3, #0
    9a5e:	d1de      	bne.n	9a1e <ll_adv_params_set+0x186>
		pdu->len = BDADDR_SIZE;
    9a60:	2306      	movs	r3, #6
    9a62:	e79d      	b.n	99a0 <ll_adv_params_set+0x108>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9a64:	f04f 080c 	mov.w	r8, #12
    9a68:	e7f1      	b.n	9a4e <ll_adv_params_set+0x1b6>
				return 0x12; /* invalid HCI cmd param */
    9a6a:	f04f 0812 	mov.w	r8, #18
    9a6e:	e7ee      	b.n	9a4e <ll_adv_params_set+0x1b6>
    9a70:	02060100 	.word	0x02060100
    9a74:	200010d8 	.word	0x200010d8
    9a78:	00020403 	.word	0x00020403

00009a7c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    9a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a80:	460f      	mov	r7, r1
    9a82:	4606      	mov	r6, r0
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    9a84:	f7ff fad6 	bl	9034 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9a88:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    9a8c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    9a90:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	radio_adv_data = radio_adv_data_get();
    9a94:	4604      	mov	r4, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    9a96:	f810 c002 	ldrb.w	ip, [r0, r2]
    9a9a:	f00c 030f 	and.w	r3, ip, #15
    9a9e:	2b01      	cmp	r3, #1
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9aa0:	eb00 0102 	add.w	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    9aa4:	d040      	beq.n	9b28 <ll_adv_data_set+0xac>
    9aa6:	2b07      	cmp	r3, #7
    9aa8:	d03e      	beq.n	9b28 <ll_adv_data_set+0xac>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
    9aaa:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
    9aae:	42ab      	cmp	r3, r5
    9ab0:	d104      	bne.n	9abc <ll_adv_data_set+0x40>
		last = radio_adv_data->last + 1;
    9ab2:	3501      	adds	r5, #1
    9ab4:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
    9ab6:	2d02      	cmp	r5, #2
    9ab8:	bf08      	it	eq
    9aba:	2500      	moveq	r5, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    9abc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9ac0:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
    9ac4:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
    9ac8:	5ce0      	ldrb	r0, [r4, r3]
    9aca:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
    9ace:	f36f 1004 	bfc	r0, #4, #1
    9ad2:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
    9ad4:	5ca0      	ldrb	r0, [r4, r2]
    9ad6:	f814 c003 	ldrb.w	ip, [r4, r3]
    9ada:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9ade:	f360 1c45 	bfi	ip, r0, #5, #1
    9ae2:	f804 c003 	strb.w	ip, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
    9ae6:	5ca0      	ldrb	r0, [r4, r2]
    9ae8:	fa5f fc8c 	uxtb.w	ip, ip
    9aec:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9af0:	f360 1c86 	bfi	ip, r0, #6, #1
    9af4:	f804 c003 	strb.w	ip, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
    9af8:	5ca2      	ldrb	r2, [r4, r2]
    9afa:	fa5f f08c 	uxtb.w	r0, ip
    9afe:	09d2      	lsrs	r2, r2, #7
    9b00:	f362 10c7 	bfi	r0, r2, #7, #1
    9b04:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    9b06:	2206      	movs	r2, #6
    9b08:	3102      	adds	r1, #2
    9b0a:	f108 0002 	add.w	r0, r8, #2
    9b0e:	f7f6 fd66 	bl	5de <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    9b12:	4632      	mov	r2, r6
    9b14:	4639      	mov	r1, r7
    9b16:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
    9b1a:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    9b1c:	f7f6 fd5f 	bl	5de <memcpy>
	pdu->len = BDADDR_SIZE + len;
    9b20:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    9b24:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
    9b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009b2c <ll_scan_data_set>:

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    9b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b30:	4606      	mov	r6, r0
    9b32:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    9b34:	f7ff fa82 	bl	903c <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    9b38:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
    9b3c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
    9b40:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    9b42:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    9b44:	d136      	bne.n	9bb4 <ll_scan_data_set+0x88>
		last = radio_scan_data->last + 1;
    9b46:	1c5d      	adds	r5, r3, #1
    9b48:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    9b4a:	2d02      	cmp	r5, #2
			last = 0;
    9b4c:	bf08      	it	eq
    9b4e:	2500      	moveq	r5, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
    9b50:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    9b54:	ebc3 02c2 	rsb	r2, r3, r2, lsl #3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    9b58:	b22b      	sxth	r3, r5
    9b5a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    9b5e:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    9b62:	f04f 0c04 	mov.w	ip, #4
    9b66:	5ce0      	ldrb	r0, [r4, r3]
    9b68:	f36c 0003 	bfi	r0, ip, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    9b6c:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    9b70:	f36f 1045 	bfc	r0, #5, #1
    9b74:	54e0      	strb	r0, [r4, r3]
	pdu->tx_addr = prev->tx_addr;
    9b76:	5ca0      	ldrb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    9b78:	18a1      	adds	r1, r4, r2
	pdu->tx_addr = prev->tx_addr;
    9b7a:	5ce2      	ldrb	r2, [r4, r3]
    9b7c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9b80:	f360 1286 	bfi	r2, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    9b84:	eb04 0803 	add.w	r8, r4, r3
	pdu->rx_addr = 0;
    9b88:	f36f 12c7 	bfc	r2, #7, #1
    9b8c:	54e2      	strb	r2, [r4, r3]
	pdu->len = BDADDR_SIZE + len;
    9b8e:	1db3      	adds	r3, r6, #6
    9b90:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    9b94:	2206      	movs	r2, #6
    9b96:	3102      	adds	r1, #2
    9b98:	f108 0002 	add.w	r0, r8, #2
    9b9c:	f7f6 fd1f 	bl	5de <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    9ba0:	4632      	mov	r2, r6
    9ba2:	4639      	mov	r1, r7
    9ba4:	f108 0008 	add.w	r0, r8, #8
    9ba8:	f7f6 fd19 	bl	5de <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    9bac:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
}
    9bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bb4:	461d      	mov	r5, r3
    9bb6:	e7cb      	b.n	9b50 <ll_scan_data_set+0x24>

00009bb8 <ll_adv_enable>:

u32_t ll_adv_enable(u8_t enable)
{
    9bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    9bbc:	b920      	cbnz	r0, 9bc8 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    9bbe:	b003      	add	sp, #12
    9bc0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    9bc4:	f7ff bcb2 	b.w	952c <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    9bc8:	f7ff fa3c 	bl	9044 <ll_adv_is_enabled>
    9bcc:	4607      	mov	r7, r0
    9bce:	2800      	cmp	r0, #0
    9bd0:	d14e      	bne.n	9c70 <ll_adv_enable+0xb8>
	radio_adv_data = radio_adv_data_get();
    9bd2:	f7ff fa2f 	bl	9034 <radio_adv_data_get>
    9bd6:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    9bd8:	f7ff fa30 	bl	903c <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9bdc:	f898 404f 	ldrb.w	r4, [r8, #79]	; 0x4f
    9be0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    9be4:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
	radio_scan_data = radio_scan_data_get();
    9be8:	4606      	mov	r6, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9bea:	f818 0004 	ldrb.w	r0, [r8, r4]
    9bee:	f000 030f 	and.w	r3, r0, #15
    9bf2:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9bf4:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    9bf8:	d11d      	bne.n	9c36 <ll_adv_enable+0x7e>
		if (h->adv_addr) {
    9bfa:	f899 3003 	ldrb.w	r3, [r9, #3]
    9bfe:	07db      	lsls	r3, r3, #31
    9c00:	d50a      	bpl.n	9c18 <ll_adv_enable+0x60>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    9c02:	4639      	mov	r1, r7
    9c04:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9c08:	f7fa fa84 	bl	4114 <ll_addr_get>
    9c0c:	2206      	movs	r2, #6
    9c0e:	4601      	mov	r1, r0
    9c10:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9c14:	f7f6 fce3 	bl	5de <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    9c18:	4b16      	ldr	r3, [pc, #88]	; (9c74 <ll_adv_enable+0xbc>)
    9c1a:	7818      	ldrb	r0, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    9c1c:	8899      	ldrh	r1, [r3, #4]
    9c1e:	23ff      	movs	r3, #255	; 0xff
    9c20:	9300      	str	r3, [sp, #0]
    9c22:	f000 0207 	and.w	r2, r0, #7
    9c26:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    9c2a:	0940      	lsrs	r0, r0, #5
    9c2c:	f7ff fb28 	bl	9280 <radio_adv_enable>
}
    9c30:	b003      	add	sp, #12
    9c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9c36:	4639      	mov	r1, r7
    9c38:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    9c3c:	f896 504f 	ldrb.w	r5, [r6, #79]	; 0x4f
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9c40:	f7fa fa68 	bl	4114 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    9c44:	2206      	movs	r2, #6
    9c46:	4601      	mov	r1, r0
    9c48:	f109 0002 	add.w	r0, r9, #2
    9c4c:	f7f6 fcc7 	bl	5de <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9c50:	f818 0004 	ldrb.w	r0, [r8, r4]
    9c54:	4639      	mov	r1, r7
    9c56:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9c5a:	f7fa fa5b 	bl	4114 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    9c5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    9c62:	ebc5 05c3 	rsb	r5, r5, r3, lsl #3
    9c66:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9c68:	4601      	mov	r1, r0
    9c6a:	2206      	movs	r2, #6
    9c6c:	1ca8      	adds	r0, r5, #2
    9c6e:	e7d1      	b.n	9c14 <ll_adv_enable+0x5c>
		return 0;
    9c70:	2000      	movs	r0, #0
    9c72:	e7dd      	b.n	9c30 <ll_adv_enable+0x78>
    9c74:	200010d8 	.word	0x200010d8

00009c78 <ctrl_filter_get>:
	return rl[rl_idx].wl;
}
#endif

struct ll_filter *ctrl_filter_get(bool whitelist)
{
    9c78:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    9c7a:	b970      	cbnz	r0, 9c9a <ctrl_filter_get+0x22>
    9c7c:	4b09      	ldr	r3, [pc, #36]	; (9ca4 <ctrl_filter_get+0x2c>)
    9c7e:	4a0a      	ldr	r2, [pc, #40]	; (9ca8 <ctrl_filter_get+0x30>)
    9c80:	490a      	ldr	r1, [pc, #40]	; (9cac <ctrl_filter_get+0x34>)
    9c82:	480b      	ldr	r0, [pc, #44]	; (9cb0 <ctrl_filter_get+0x38>)
    9c84:	e9cd 3300 	strd	r3, r3, [sp]
    9c88:	4b0a      	ldr	r3, [pc, #40]	; (9cb4 <ctrl_filter_get+0x3c>)
    9c8a:	f7f7 fb23 	bl	12d4 <printk>
    9c8e:	4040      	eors	r0, r0
    9c90:	f380 8811 	msr	BASEPRI, r0
    9c94:	f04f 0004 	mov.w	r0, #4
    9c98:	df02      	svc	2
	return &wl_filter;
#endif
}
    9c9a:	4807      	ldr	r0, [pc, #28]	; (9cb8 <ctrl_filter_get+0x40>)
    9c9c:	b003      	add	sp, #12
    9c9e:	f85d fb04 	ldr.w	pc, [sp], #4
    9ca2:	bf00      	nop
    9ca4:	0000bda7 	.word	0x0000bda7
    9ca8:	0000c71e 	.word	0x0000c71e
    9cac:	0000c693 	.word	0x0000c693
    9cb0:	0000de27 	.word	0x0000de27
    9cb4:	0000de17 	.word	0x0000de17
    9cb8:	200010e0 	.word	0x200010e0

00009cbc <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    9cbc:	2008      	movs	r0, #8
    9cbe:	4770      	bx	lr

00009cc0 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    9cc0:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9cc2:	f7ff f9c7 	bl	9054 <radio_adv_filter_pol_get>
    9cc6:	4604      	mov	r4, r0
    9cc8:	b110      	cbz	r0, 9cd0 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9cca:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    9ccc:	4620      	mov	r0, r4
    9cce:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9cd0:	f7ff f9e2 	bl	9098 <radio_scan_filter_pol_get>
    9cd4:	07c3      	lsls	r3, r0, #31
    9cd6:	d4f8      	bmi.n	9cca <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    9cd8:	4b02      	ldr	r3, [pc, #8]	; (9ce4 <ll_wl_clear+0x24>)
    9cda:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    9cdc:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    9cde:	4b02      	ldr	r3, [pc, #8]	; (9ce8 <ll_wl_clear+0x28>)
    9ce0:	701c      	strb	r4, [r3, #0]
	return 0;
    9ce2:	e7f3      	b.n	9ccc <ll_wl_clear+0xc>
    9ce4:	200010e0 	.word	0x200010e0
    9ce8:	200016d4 	.word	0x200016d4

00009cec <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    9cec:	b570      	push	{r4, r5, r6, lr}
    9cee:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9cf0:	f7ff f9b0 	bl	9054 <radio_adv_filter_pol_get>
    9cf4:	4605      	mov	r5, r0
    9cf6:	b110      	cbz	r0, 9cfe <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9cf8:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    9cfa:	4628      	mov	r0, r5
    9cfc:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9cfe:	f7ff f9cb 	bl	9098 <radio_scan_filter_pol_get>
    9d02:	07c3      	lsls	r3, r0, #31
    9d04:	d4f8      	bmi.n	9cf8 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    9d06:	7823      	ldrb	r3, [r4, #0]
    9d08:	2bff      	cmp	r3, #255	; 0xff
    9d0a:	d103      	bne.n	9d14 <ll_wl_add+0x28>
		wl_anon = 1;
    9d0c:	4b11      	ldr	r3, [pc, #68]	; (9d54 <ll_wl_add+0x68>)
    9d0e:	2201      	movs	r2, #1
    9d10:	701a      	strb	r2, [r3, #0]
		return 0;
    9d12:	e7f2      	b.n	9cfa <ll_wl_add+0xe>
	return filter_add(&wl_filter, addr->type, addr->a.val);
    9d14:	1c61      	adds	r1, r4, #1
	if (filter->enable_bitmask == 0xFF) {
    9d16:	4c10      	ldr	r4, [pc, #64]	; (9d58 <ll_wl_add+0x6c>)
    9d18:	7822      	ldrb	r2, [r4, #0]
    9d1a:	2aff      	cmp	r2, #255	; 0xff
    9d1c:	d017      	beq.n	9d4e <ll_wl_add+0x62>
	for (index = 0;
    9d1e:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    9d20:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    9d24:	07f6      	lsls	r6, r6, #31
    9d26:	d410      	bmi.n	9d4a <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    9d28:	2601      	movs	r6, #1
    9d2a:	4086      	lsls	r6, r0
    9d2c:	4332      	orrs	r2, r6
    9d2e:	7022      	strb	r2, [r4, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9d30:	f003 0301 	and.w	r3, r3, #1
    9d34:	7862      	ldrb	r2, [r4, #1]
    9d36:	4083      	lsls	r3, r0
    9d38:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    9d3a:	2206      	movs	r2, #6
    9d3c:	fb02 4000 	mla	r0, r2, r0, r4
    9d40:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9d42:	7063      	strb	r3, [r4, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    9d44:	f7f6 fc4b 	bl	5de <memcpy>
    9d48:	e7d7      	b.n	9cfa <ll_wl_add+0xe>
	     index++) {
    9d4a:	3001      	adds	r0, #1
    9d4c:	e7e8      	b.n	9d20 <ll_wl_add+0x34>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9d4e:	2507      	movs	r5, #7
    9d50:	e7d3      	b.n	9cfa <ll_wl_add+0xe>
    9d52:	bf00      	nop
    9d54:	200016d4 	.word	0x200016d4
    9d58:	200010e0 	.word	0x200010e0

00009d5c <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    9d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d60:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9d62:	f7ff f977 	bl	9054 <radio_adv_filter_pol_get>
    9d66:	4606      	mov	r6, r0
    9d68:	b118      	cbz	r0, 9d72 <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9d6a:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    9d6c:	4630      	mov	r0, r6
    9d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9d72:	f7ff f991 	bl	9098 <radio_scan_filter_pol_get>
    9d76:	07c1      	lsls	r1, r0, #31
    9d78:	d4f7      	bmi.n	9d6a <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    9d7a:	f897 8000 	ldrb.w	r8, [r7]
    9d7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    9d82:	d102      	bne.n	9d8a <ll_wl_remove+0x2e>
		wl_anon = 0;
    9d84:	4b16      	ldr	r3, [pc, #88]	; (9de0 <ll_wl_remove+0x84>)
    9d86:	701e      	strb	r6, [r3, #0]
		return 0;
    9d88:	e7f0      	b.n	9d6c <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    9d8a:	4c16      	ldr	r4, [pc, #88]	; (9de4 <ll_wl_remove+0x88>)
    9d8c:	7823      	ldrb	r3, [r4, #0]
    9d8e:	b90b      	cbnz	r3, 9d94 <ll_wl_remove+0x38>
		return BT_HCI_ERR_INVALID_PARAM;
    9d90:	2612      	movs	r6, #18
    9d92:	e7eb      	b.n	9d6c <ll_wl_remove+0x10>
	index = 8;
    9d94:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    9d96:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    9d98:	f04f 0906 	mov.w	r9, #6
    9d9c:	f104 0a02 	add.w	sl, r4, #2
	while (index--) {
    9da0:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    9da4:	d3f4      	bcc.n	9d90 <ll_wl_remove+0x34>
		if ((filter->enable_bitmask & BIT(index)) &&
    9da6:	7823      	ldrb	r3, [r4, #0]
    9da8:	40eb      	lsrs	r3, r5
    9daa:	07da      	lsls	r2, r3, #31
    9dac:	d5f8      	bpl.n	9da0 <ll_wl_remove+0x44>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    9dae:	7863      	ldrb	r3, [r4, #1]
    9db0:	412b      	asrs	r3, r5
    9db2:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    9db6:	07db      	lsls	r3, r3, #31
    9db8:	d4f2      	bmi.n	9da0 <ll_wl_remove+0x44>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    9dba:	2206      	movs	r2, #6
    9dbc:	4639      	mov	r1, r7
    9dbe:	fb09 a005 	mla	r0, r9, r5, sl
    9dc2:	f7f6 fbfc 	bl	5be <memcmp>
		     (addr_type & 0x01)) &&
    9dc6:	2800      	cmp	r0, #0
    9dc8:	d1ea      	bne.n	9da0 <ll_wl_remove+0x44>
			filter->enable_bitmask &= ~BIT(index);
    9dca:	2301      	movs	r3, #1
    9dcc:	40ab      	lsls	r3, r5
    9dce:	7822      	ldrb	r2, [r4, #0]
    9dd0:	43db      	mvns	r3, r3
    9dd2:	b2db      	uxtb	r3, r3
    9dd4:	401a      	ands	r2, r3
    9dd6:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    9dd8:	7862      	ldrb	r2, [r4, #1]
    9dda:	4013      	ands	r3, r2
    9ddc:	7063      	strb	r3, [r4, #1]
    9dde:	e7c5      	b.n	9d6c <ll_wl_remove+0x10>
    9de0:	200016d4 	.word	0x200016d4
    9de4:	200010e0 	.word	0x200010e0

00009de8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    9de8:	4a03      	ldr	r2, [pc, #12]	; (9df8 <ll_filter_reset+0x10>)
    9dea:	2300      	movs	r3, #0
    9dec:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    9dee:	4a03      	ldr	r2, [pc, #12]	; (9dfc <ll_filter_reset+0x14>)
    9df0:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    9df2:	7053      	strb	r3, [r2, #1]
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    9df4:	4770      	bx	lr
    9df6:	bf00      	nop
    9df8:	200016d4 	.word	0x200016d4
    9dfc:	200010e0 	.word	0x200010e0

00009e00 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    9e00:	4b05      	ldr	r3, [pc, #20]	; (9e18 <cntr_init+0x18>)
    9e02:	2200      	movs	r2, #0
    9e04:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    9e08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    9e0c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    9e10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
			     RTC_INTENSET_COMPARE1_Msk);
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif
}
    9e14:	4770      	bx	lr
    9e16:	bf00      	nop
    9e18:	4000b000 	.word	0x4000b000

00009e1c <cntr_start>:

u32_t cntr_start(void)
{
	if (_refcount++) {
    9e1c:	4a04      	ldr	r2, [pc, #16]	; (9e30 <cntr_start+0x14>)
    9e1e:	7813      	ldrb	r3, [r2, #0]
    9e20:	1c59      	adds	r1, r3, #1
    9e22:	7011      	strb	r1, [r2, #0]
    9e24:	2001      	movs	r0, #1
    9e26:	b913      	cbnz	r3, 9e2e <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    9e28:	4a02      	ldr	r2, [pc, #8]	; (9e34 <cntr_start+0x18>)
    9e2a:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    9e2c:	4618      	mov	r0, r3
}
    9e2e:	4770      	bx	lr
    9e30:	20001112 	.word	0x20001112
    9e34:	4000b000 	.word	0x4000b000

00009e38 <cntr_stop>:

u32_t cntr_stop(void)
{
    9e38:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
    9e3a:	4b0f      	ldr	r3, [pc, #60]	; (9e78 <cntr_stop+0x40>)
    9e3c:	7818      	ldrb	r0, [r3, #0]
    9e3e:	b970      	cbnz	r0, 9e5e <cntr_stop+0x26>
    9e40:	4b0e      	ldr	r3, [pc, #56]	; (9e7c <cntr_stop+0x44>)
    9e42:	4a0f      	ldr	r2, [pc, #60]	; (9e80 <cntr_stop+0x48>)
    9e44:	490f      	ldr	r1, [pc, #60]	; (9e84 <cntr_stop+0x4c>)
    9e46:	4810      	ldr	r0, [pc, #64]	; (9e88 <cntr_stop+0x50>)
    9e48:	e9cd 3300 	strd	r3, r3, [sp]
    9e4c:	4b0f      	ldr	r3, [pc, #60]	; (9e8c <cntr_stop+0x54>)
    9e4e:	f7f7 fa41 	bl	12d4 <printk>
    9e52:	4040      	eors	r0, r0
    9e54:	f380 8811 	msr	BASEPRI, r0
    9e58:	f04f 0004 	mov.w	r0, #4
    9e5c:	df02      	svc	2

	if (--_refcount) {
    9e5e:	3801      	subs	r0, #1
    9e60:	b2c0      	uxtb	r0, r0
    9e62:	7018      	strb	r0, [r3, #0]
    9e64:	2301      	movs	r3, #1
    9e66:	b920      	cbnz	r0, 9e72 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    9e68:	4a09      	ldr	r2, [pc, #36]	; (9e90 <cntr_stop+0x58>)
    9e6a:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
    9e6c:	b003      	add	sp, #12
    9e6e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
    9e72:	4618      	mov	r0, r3
    9e74:	e7fa      	b.n	9e6c <cntr_stop+0x34>
    9e76:	bf00      	nop
    9e78:	20001112 	.word	0x20001112
    9e7c:	0000bda7 	.word	0x0000bda7
    9e80:	0000c71e 	.word	0x0000c71e
    9e84:	0000c693 	.word	0x0000c693
    9e88:	0000de5c 	.word	0x0000de5c
    9e8c:	0000de52 	.word	0x0000de52
    9e90:	4000b000 	.word	0x4000b000

00009e94 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    9e94:	4b01      	ldr	r3, [pc, #4]	; (9e9c <cntr_cnt_get+0x8>)
    9e96:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    9e9a:	4770      	bx	lr
    9e9c:	4000b000 	.word	0x4000b000

00009ea0 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    9ea0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    9ea4:	4b01      	ldr	r3, [pc, #4]	; (9eac <cntr_cmp_set+0xc>)
    9ea6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    9eaa:	4770      	bx	lr
    9eac:	4000b000 	.word	0x4000b000

00009eb0 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    9eb0:	4b11      	ldr	r3, [pc, #68]	; (9ef8 <do_ecb+0x48>)
{
    9eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    9eb4:	2401      	movs	r4, #1
    9eb6:	4626      	mov	r6, r4
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    9eb8:	2500      	movs	r5, #0
    9eba:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    9ebc:	605e      	str	r6, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    9ebe:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    9ec2:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    9ec6:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    9eca:	601e      	str	r6, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    9ecc:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    9ed0:	b931      	cbnz	r1, 9ee0 <do_ecb+0x30>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    9ed2:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    9ed6:	b919      	cbnz	r1, 9ee0 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    9ed8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    9edc:	2900      	cmp	r1, #0
    9ede:	d1f5      	bne.n	9ecc <do_ecb+0x1c>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    9ee0:	6054      	str	r4, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    9ee2:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    9ee6:	2900      	cmp	r1, #0
    9ee8:	d1e8      	bne.n	9ebc <do_ecb+0xc>
    9eea:	f8d2 7504 	ldr.w	r7, [r2, #1284]	; 0x504
    9eee:	2f00      	cmp	r7, #0
    9ef0:	d0e4      	beq.n	9ebc <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
    9ef2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
    9ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ef8:	4000e000 	.word	0x4000e000

00009efc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    9efc:	b570      	push	{r4, r5, r6, lr}
    9efe:	b08c      	sub	sp, #48	; 0x30
    9f00:	460e      	mov	r6, r1
    9f02:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    9f04:	4601      	mov	r1, r0
    9f06:	2210      	movs	r2, #16
    9f08:	4668      	mov	r0, sp
{
    9f0a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    9f0c:	f7f9 f970 	bl	31f0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    9f10:	2210      	movs	r2, #16
    9f12:	eb0d 0002 	add.w	r0, sp, r2
    9f16:	4631      	mov	r1, r6
    9f18:	f7f9 f96a 	bl	31f0 <mem_rcopy>

	do_ecb(&ecb);
    9f1c:	4668      	mov	r0, sp
    9f1e:	f7ff ffc7 	bl	9eb0 <do_ecb>

	if (cipher_text_le) {
    9f22:	b125      	cbz	r5, 9f2e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    9f24:	2210      	movs	r2, #16
    9f26:	a908      	add	r1, sp, #32
    9f28:	4628      	mov	r0, r5
    9f2a:	f7f9 f961 	bl	31f0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    9f2e:	b124      	cbz	r4, 9f3a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    9f30:	2210      	movs	r2, #16
    9f32:	a908      	add	r1, sp, #32
    9f34:	4620      	mov	r0, r4
    9f36:	f7f6 fb52 	bl	5de <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    9f3a:	b00c      	add	sp, #48	; 0x30
    9f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

00009f40 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    9f40:	4b07      	ldr	r3, [pc, #28]	; (9f60 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    9f42:	4a08      	ldr	r2, [pc, #32]	; (9f64 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    9f44:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    9f48:	4907      	ldr	r1, [pc, #28]	; (9f68 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    9f4a:	4a08      	ldr	r2, [pc, #32]	; (9f6c <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    9f4c:	2800      	cmp	r0, #0
    9f4e:	bf14      	ite	ne
    9f50:	4610      	movne	r0, r2
    9f52:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    9f54:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    9f56:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    9f5a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    9f5e:	4770      	bx	lr
    9f60:	4001f000 	.word	0x4001f000
    9f64:	40008140 	.word	0x40008140
    9f68:	40001004 	.word	0x40001004
    9f6c:	40001000 	.word	0x40001000

00009f70 <sw_switch.isra.10>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    9f70:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    9f72:	4e2c      	ldr	r6, [pc, #176]	; (a024 <sw_switch.isra.10+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    9f74:	4f2c      	ldr	r7, [pc, #176]	; (a028 <sw_switch.isra.10+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    9f76:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    9f78:	4b2c      	ldr	r3, [pc, #176]	; (a02c <sw_switch.isra.10+0xbc>)
    9f7a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    9f7e:	b22b      	sxth	r3, r5
    9f80:	00dc      	lsls	r4, r3, #3
    9f82:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    9f86:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    9f8a:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    9f8e:	f105 040b 	add.w	r4, r5, #11
    9f92:	b2e4      	uxtb	r4, r4
    9f94:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    9f96:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    9f9a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    9f9e:	3fc0      	subs	r7, #192	; 0xc0
    9fa0:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    9fa4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    9fa8:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    9fac:	2800      	cmp	r0, #0
    9fae:	d034      	beq.n	a01a <sw_switch.isra.10+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    9fb0:	f649 4040 	movw	r0, #40000	; 0x9c40
    9fb4:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    9fb8:	2a02      	cmp	r2, #2
    9fba:	bf0c      	ite	eq
    9fbc:	4602      	moveq	r2, r0
    9fbe:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    9fc0:	f241 3088 	movw	r0, #5000	; 0x1388
    9fc4:	f242 47b8 	movw	r7, #9400	; 0x24b8
    9fc8:	2902      	cmp	r1, #2
    9fca:	bf18      	it	ne
    9fcc:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    9fce:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    9fd2:	4401      	add	r1, r0
    9fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9fd8:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    9fdc:	4a14      	ldr	r2, [pc, #80]	; (a030 <sw_switch.isra.10+0xc0>)
    9fde:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    9fe2:	009b      	lsls	r3, r3, #2
    9fe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9fe8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    9fec:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    9ff0:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    9ff2:	bf8b      	itete	hi
    9ff4:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    9ff8:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    9ffa:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    9ffc:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    a000:	bf88      	it	hi
    a002:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    a006:	4b08      	ldr	r3, [pc, #32]	; (a028 <sw_switch.isra.10+0xb8>)
    a008:	f44f 6290 	mov.w	r2, #1152	; 0x480
    a00c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    a010:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    a012:	f003 0301 	and.w	r3, r3, #1
    a016:	7033      	strb	r3, [r6, #0]
}
    a018:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    a01a:	4a06      	ldr	r2, [pc, #24]	; (a034 <sw_switch.isra.10+0xc4>)
    a01c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    a020:	212c      	movs	r1, #44	; 0x2c
    a022:	e7de      	b.n	9fe2 <sw_switch.isra.10+0x72>
    a024:	20001330 	.word	0x20001330
    a028:	4001f000 	.word	0x4001f000
    a02c:	4000110c 	.word	0x4000110c
    a030:	40001000 	.word	0x40001000
    a034:	40001004 	.word	0x40001004

0000a038 <isr_radio>:
	if (sfp_radio_isr) {
    a038:	4b02      	ldr	r3, [pc, #8]	; (a044 <isr_radio+0xc>)
    a03a:	681b      	ldr	r3, [r3, #0]
    a03c:	b103      	cbz	r3, a040 <isr_radio+0x8>
		sfp_radio_isr();
    a03e:	4718      	bx	r3
}
    a040:	4770      	bx	lr
    a042:	bf00      	nop
    a044:	2000132c 	.word	0x2000132c

0000a048 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    a048:	4b06      	ldr	r3, [pc, #24]	; (a064 <radio_isr_set+0x1c>)
    a04a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    a04c:	4b06      	ldr	r3, [pc, #24]	; (a068 <radio_isr_set+0x20>)
    a04e:	2210      	movs	r2, #16
    a050:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    a054:	4b05      	ldr	r3, [pc, #20]	; (a06c <radio_isr_set+0x24>)
    a056:	2202      	movs	r2, #2
    a058:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    a05c:	2001      	movs	r0, #1
    a05e:	f7f6 bddf 	b.w	c20 <_arch_irq_enable>
    a062:	bf00      	nop
    a064:	2000132c 	.word	0x2000132c
    a068:	40001000 	.word	0x40001000
    a06c:	e000e100 	.word	0xe000e100

0000a070 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    a070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    a078:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    a07a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    a07e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    a082:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    a086:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    a08a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    a08e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    a092:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    a096:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    a09a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    a09e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    a0a2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    a0a6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    a0aa:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    a0ae:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
    a0b2:	4770      	bx	lr

0000a0b4 <radio_reset>:
{
    a0b4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    a0b6:	2001      	movs	r0, #1
    a0b8:	f7f6 fdc2 	bl	c40 <_arch_irq_disable>
	NRF_RADIO->POWER =
    a0bc:	4b08      	ldr	r3, [pc, #32]	; (a0e0 <radio_reset+0x2c>)
    a0be:	2200      	movs	r2, #0
    a0c0:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    a0c4:	2201      	movs	r2, #1
    a0c6:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    a0ca:	4a06      	ldr	r2, [pc, #24]	; (a0e4 <radio_reset+0x30>)
    a0cc:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    a0ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    a0d2:	f023 0301 	bic.w	r3, r3, #1
    a0d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    a0da:	6013      	str	r3, [r2, #0]
}
    a0dc:	bd08      	pop	{r3, pc}
    a0de:	bf00      	nop
    a0e0:	40001000 	.word	0x40001000
    a0e4:	40001774 	.word	0x40001774

0000a0e8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    a0e8:	4b06      	ldr	r3, [pc, #24]	; (a104 <radio_phy_set+0x1c>)
	switch (phy) {
    a0ea:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    a0ec:	bf0c      	ite	eq
    a0ee:	2204      	moveq	r2, #4
    a0f0:	2203      	movne	r2, #3
    a0f2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    a0f6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    a0fa:	f042 0201 	orr.w	r2, r2, #1
    a0fe:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
    a102:	4770      	bx	lr
    a104:	40001000 	.word	0x40001000

0000a108 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    a108:	4b01      	ldr	r3, [pc, #4]	; (a110 <radio_tx_power_set+0x8>)
    a10a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    a10e:	4770      	bx	lr
    a110:	40001000 	.word	0x40001000

0000a114 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    a114:	4b01      	ldr	r3, [pc, #4]	; (a11c <radio_freq_chan_set+0x8>)
    a116:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    a11a:	4770      	bx	lr
    a11c:	40001000 	.word	0x40001000

0000a120 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    a120:	4b07      	ldr	r3, [pc, #28]	; (a140 <radio_whiten_iv_set+0x20>)
    a122:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    a126:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    a12a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    a12e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    a132:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    a136:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    a13a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    a13e:	4770      	bx	lr
    a140:	40001000 	.word	0x40001000

0000a144 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    a144:	4a0a      	ldr	r2, [pc, #40]	; (a170 <radio_aa_set+0x2c>)
    a146:	2300      	movs	r3, #0
    a148:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    a14c:	2301      	movs	r3, #1
    a14e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    a152:	78c3      	ldrb	r3, [r0, #3]
    a154:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    a158:	7843      	ldrb	r3, [r0, #1]
    a15a:	7881      	ldrb	r1, [r0, #2]
    a15c:	041b      	lsls	r3, r3, #16
    a15e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    a162:	7801      	ldrb	r1, [r0, #0]
    a164:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    a168:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
    a16c:	4770      	bx	lr
    a16e:	bf00      	nop
    a170:	40001000 	.word	0x40001000

0000a174 <radio_pkt_configure>:
	switch (phy) {
    a174:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    a178:	2b02      	cmp	r3, #2
{
    a17a:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    a17c:	bf0c      	ite	eq
    a17e:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    a182:	2400      	movne	r4, #0
	if (dc) {
    a184:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    a186:	f1c0 0308 	rsb	r3, r0, #8
    a18a:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    a18e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    a192:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    a196:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a19a:	4a0b      	ldr	r2, [pc, #44]	; (a1c8 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    a19c:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    a1a0:	bf48      	it	mi
    a1a2:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    a1a6:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    a1a8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    a1ac:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    a1b0:	4b06      	ldr	r3, [pc, #24]	; (a1cc <radio_pkt_configure+0x58>)
    a1b2:	4003      	ands	r3, r0
    a1b4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    a1b8:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    a1bc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    a1c0:	4319      	orrs	r1, r3
    a1c2:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
    a1c6:	bd10      	pop	{r4, pc}
    a1c8:	40001000 	.word	0x40001000
    a1cc:	fef80000 	.word	0xfef80000

0000a1d0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    a1d0:	4b01      	ldr	r3, [pc, #4]	; (a1d8 <radio_pkt_rx_set+0x8>)
    a1d2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
    a1d6:	4770      	bx	lr
    a1d8:	40001000 	.word	0x40001000

0000a1dc <radio_pkt_tx_set>:
    a1dc:	4b01      	ldr	r3, [pc, #4]	; (a1e4 <radio_pkt_tx_set+0x8>)
    a1de:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    a1e2:	4770      	bx	lr
    a1e4:	40001000 	.word	0x40001000

0000a1e8 <radio_tx_ready_delay_get>:
	switch (phy) {
    a1e8:	2802      	cmp	r0, #2
}
    a1ea:	bf0c      	ite	eq
    a1ec:	2028      	moveq	r0, #40	; 0x28
    a1ee:	2029      	movne	r0, #41	; 0x29
    a1f0:	4770      	bx	lr

0000a1f2 <radio_tx_chain_delay_get>:
}
    a1f2:	2001      	movs	r0, #1
    a1f4:	4770      	bx	lr

0000a1f6 <radio_rx_ready_delay_get>:
}
    a1f6:	2029      	movs	r0, #41	; 0x29
    a1f8:	4770      	bx	lr

0000a1fa <radio_rx_chain_delay_get>:
	switch (phy) {
    a1fa:	2802      	cmp	r0, #2
}
    a1fc:	bf0c      	ite	eq
    a1fe:	2005      	moveq	r0, #5
    a200:	200a      	movne	r0, #10
    a202:	4770      	bx	lr

0000a204 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    a204:	4b01      	ldr	r3, [pc, #4]	; (a20c <radio_rx_enable+0x8>)
    a206:	2201      	movs	r2, #1
    a208:	605a      	str	r2, [r3, #4]
}
    a20a:	4770      	bx	lr
    a20c:	40001000 	.word	0x40001000

0000a210 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    a210:	4b01      	ldr	r3, [pc, #4]	; (a218 <radio_tx_enable+0x8>)
    a212:	2201      	movs	r2, #1
    a214:	601a      	str	r2, [r3, #0]
}
    a216:	4770      	bx	lr
    a218:	40001000 	.word	0x40001000

0000a21c <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    a21c:	4a07      	ldr	r2, [pc, #28]	; (a23c <radio_disable+0x20>)
    a21e:	f44f 6390 	mov.w	r3, #1152	; 0x480
    a222:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    a226:	2301      	movs	r3, #1
    a228:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    a22a:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    a22c:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    a230:	2100      	movs	r1, #0
    a232:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    a236:	6113      	str	r3, [r2, #16]
}
    a238:	4770      	bx	lr
    a23a:	bf00      	nop
    a23c:	4001f000 	.word	0x4001f000

0000a240 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    a240:	4b04      	ldr	r3, [pc, #16]	; (a254 <radio_status_reset+0x14>)
    a242:	2200      	movs	r2, #0
    a244:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    a248:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    a24c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    a250:	4770      	bx	lr
    a252:	bf00      	nop
    a254:	40001000 	.word	0x40001000

0000a258 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    a258:	4b03      	ldr	r3, [pc, #12]	; (a268 <radio_is_ready+0x10>)
    a25a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    a25e:	3000      	adds	r0, #0
    a260:	bf18      	it	ne
    a262:	2001      	movne	r0, #1
    a264:	4770      	bx	lr
    a266:	bf00      	nop
    a268:	40001000 	.word	0x40001000

0000a26c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    a26c:	4b03      	ldr	r3, [pc, #12]	; (a27c <radio_is_done+0x10>)
    a26e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    a272:	3000      	adds	r0, #0
    a274:	bf18      	it	ne
    a276:	2001      	movne	r0, #1
    a278:	4770      	bx	lr
    a27a:	bf00      	nop
    a27c:	40001000 	.word	0x40001000

0000a280 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    a280:	4b03      	ldr	r3, [pc, #12]	; (a290 <radio_is_idle+0x10>)
    a282:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    a286:	fab0 f080 	clz	r0, r0
    a28a:	0940      	lsrs	r0, r0, #5
    a28c:	4770      	bx	lr
    a28e:	bf00      	nop
    a290:	40001000 	.word	0x40001000

0000a294 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    a294:	4b04      	ldr	r3, [pc, #16]	; (a2a8 <radio_crc_configure+0x14>)
    a296:	f240 1203 	movw	r2, #259	; 0x103
    a29a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    a29e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    a2a2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
    a2a6:	4770      	bx	lr
    a2a8:	40001000 	.word	0x40001000

0000a2ac <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    a2ac:	4b03      	ldr	r3, [pc, #12]	; (a2bc <radio_crc_is_valid+0x10>)
    a2ae:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a2b2:	3000      	adds	r0, #0
    a2b4:	bf18      	it	ne
    a2b6:	2001      	movne	r0, #1
    a2b8:	4770      	bx	lr
    a2ba:	bf00      	nop
    a2bc:	40001000 	.word	0x40001000

0000a2c0 <radio_pkt_empty_get>:
}
    a2c0:	4800      	ldr	r0, [pc, #0]	; (a2c4 <radio_pkt_empty_get+0x4>)
    a2c2:	4770      	bx	lr
    a2c4:	20001220 	.word	0x20001220

0000a2c8 <radio_pkt_scratch_get>:
}
    a2c8:	4800      	ldr	r0, [pc, #0]	; (a2cc <radio_pkt_scratch_get+0x4>)
    a2ca:	4770      	bx	lr
    a2cc:	20001224 	.word	0x20001224

0000a2d0 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a2d0:	4b04      	ldr	r3, [pc, #16]	; (a2e4 <radio_switch_complete_and_rx+0x14>)
    a2d2:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    a2d4:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a2d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    a2da:	4602      	mov	r2, r0
    a2dc:	4608      	mov	r0, r1
    a2de:	f7ff be47 	b.w	9f70 <sw_switch.isra.10>
    a2e2:	bf00      	nop
    a2e4:	40001000 	.word	0x40001000

0000a2e8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    a2e8:	4b03      	ldr	r3, [pc, #12]	; (a2f8 <radio_switch_complete_and_tx+0x10>)
    a2ea:	2103      	movs	r1, #3
    a2ec:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    a2f0:	4601      	mov	r1, r0
    a2f2:	2001      	movs	r0, #1
    a2f4:	f7ff be3c 	b.w	9f70 <sw_switch.isra.10>
    a2f8:	40001000 	.word	0x40001000

0000a2fc <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    a2fc:	4b05      	ldr	r3, [pc, #20]	; (a314 <radio_switch_complete_and_disable+0x18>)
    a2fe:	2203      	movs	r2, #3
    a300:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    a304:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    a308:	f44f 6290 	mov.w	r2, #1152	; 0x480
    a30c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			   HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_DISABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    a310:	4770      	bx	lr
    a312:	bf00      	nop
    a314:	40001000 	.word	0x40001000

0000a318 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    a318:	4a03      	ldr	r2, [pc, #12]	; (a328 <radio_rssi_measure+0x10>)
    a31a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    a31e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    a322:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    a326:	4770      	bx	lr
    a328:	40001000 	.word	0x40001000

0000a32c <radio_rssi_get>:

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    a32c:	4b01      	ldr	r3, [pc, #4]	; (a334 <radio_rssi_get+0x8>)
    a32e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    a332:	4770      	bx	lr
    a334:	40001000 	.word	0x40001000

0000a338 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    a338:	4b02      	ldr	r3, [pc, #8]	; (a344 <radio_rssi_status_reset+0xc>)
    a33a:	2200      	movs	r2, #0
    a33c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
    a340:	4770      	bx	lr
    a342:	bf00      	nop
    a344:	40001000 	.word	0x40001000

0000a348 <radio_rssi_is_ready>:

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    a348:	4b03      	ldr	r3, [pc, #12]	; (a358 <radio_rssi_is_ready+0x10>)
    a34a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    a34e:	3000      	adds	r0, #0
    a350:	bf18      	it	ne
    a352:	2001      	movne	r0, #1
    a354:	4770      	bx	lr
    a356:	bf00      	nop
    a358:	40001000 	.word	0x40001000

0000a35c <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    a35c:	b530      	push	{r4, r5, lr}
    a35e:	2400      	movs	r4, #0
    a360:	00a3      	lsls	r3, r4, #2
    a362:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    a36a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    a36c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    a370:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    a372:	8895      	ldrh	r5, [r2, #4]
    a374:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    a378:	2c08      	cmp	r4, #8
		bdaddr += 6;
    a37a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    a37e:	d1ef      	bne.n	a360 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    a380:	4b02      	ldr	r3, [pc, #8]	; (a38c <radio_filter_configure+0x30>)
    a382:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    a386:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    a38a:	bd30      	pop	{r4, r5, pc}
    a38c:	40001000 	.word	0x40001000

0000a390 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    a390:	4a03      	ldr	r2, [pc, #12]	; (a3a0 <radio_filter_disable+0x10>)
    a392:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    a396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a39a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
    a39e:	4770      	bx	lr
    a3a0:	40001000 	.word	0x40001000

0000a3a4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    a3a4:	4b02      	ldr	r3, [pc, #8]	; (a3b0 <radio_filter_status_reset+0xc>)
    a3a6:	2200      	movs	r2, #0
    a3a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    a3ac:	4770      	bx	lr
    a3ae:	bf00      	nop
    a3b0:	40001000 	.word	0x40001000

0000a3b4 <radio_filter_has_match>:

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    a3b4:	4b03      	ldr	r3, [pc, #12]	; (a3c4 <radio_filter_has_match+0x10>)
    a3b6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    a3ba:	3000      	adds	r0, #0
    a3bc:	bf18      	it	ne
    a3be:	2001      	movne	r0, #1
    a3c0:	4770      	bx	lr
    a3c2:	bf00      	nop
    a3c4:	40001000 	.word	0x40001000

0000a3c8 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    a3c8:	4b01      	ldr	r3, [pc, #4]	; (a3d0 <radio_filter_match_get+0x8>)
    a3ca:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    a3ce:	4770      	bx	lr
    a3d0:	40001000 	.word	0x40001000

0000a3d4 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    a3d4:	4b05      	ldr	r3, [pc, #20]	; (a3ec <radio_tmr_status_reset+0x18>)
    a3d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    a3da:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    a3de:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    a3e2:	227f      	movs	r2, #127	; 0x7f
    a3e4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			HAL_TRIGGER_CRYPT_PPI_DISABLE;

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif
}
    a3e8:	4770      	bx	lr
    a3ea:	bf00      	nop
    a3ec:	4000b000 	.word	0x4000b000

0000a3f0 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    a3f0:	4b03      	ldr	r3, [pc, #12]	; (a400 <radio_tmr_tifs_set+0x10>)
    a3f2:	4a04      	ldr	r2, [pc, #16]	; (a404 <radio_tmr_tifs_set+0x14>)
    a3f4:	781b      	ldrb	r3, [r3, #0]
    a3f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    a3fa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(SW_SWITCH_TIMER_NBR, sw_tifs_toggle);
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    a3fe:	4770      	bx	lr
    a400:	20001330 	.word	0x20001330
    a404:	40009000 	.word	0x40009000

0000a408 <radio_tmr_start>:

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a40c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    a410:	4c30      	ldr	r4, [pc, #192]	; (a4d4 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    a412:	4d31      	ldr	r5, [pc, #196]	; (a4d8 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    a414:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    a418:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    a41a:	bf88      	it	hi
    a41c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    a420:	4b2e      	ldr	r3, [pc, #184]	; (a4dc <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    a422:	4c2f      	ldr	r4, [pc, #188]	; (a4e0 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    a424:	bf82      	ittt	hi
    a426:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    a42a:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    a42e:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    a432:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    a434:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    a438:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    a43a:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    a43c:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    a440:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    a442:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    a446:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    a44a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    a44e:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    a452:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    a456:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    a45a:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    a45e:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    a462:	4920      	ldr	r1, [pc, #128]	; (a4e4 <radio_tmr_start+0xdc>)
    a464:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    a468:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    a46c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    a470:	f7ff fd66 	bl	9f40 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    a474:	4b1c      	ldr	r3, [pc, #112]	; (a4e8 <radio_tmr_start+0xe0>)
    a476:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    a478:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    a47c:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    a480:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    a484:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    a486:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    a48a:	3b74      	subs	r3, #116	; 0x74
    a48c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    a490:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    a494:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    a498:	f503 739a 	add.w	r3, r3, #308	; 0x134
    a49c:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    a4a0:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    a4a4:	33c4      	adds	r3, #196	; 0xc4
    a4a6:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    a4aa:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    a4ae:	3bc0      	subs	r3, #192	; 0xc0
    a4b0:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    a4b4:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    a4b8:	33c8      	adds	r3, #200	; 0xc8
    a4ba:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    a4be:	f44f 6310 	mov.w	r3, #2304	; 0x900
    a4c2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    a4c6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    a4ca:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    a4ce:	4628      	mov	r0, r5
    a4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a4d4:	7ff0bdbf 	.word	0x7ff0bdbf
    a4d8:	000f4240 	.word	0x000f4240
    a4dc:	40008000 	.word	0x40008000
    a4e0:	4000b000 	.word	0x4000b000
    a4e4:	4000b148 	.word	0x4000b148
    a4e8:	40009000 	.word	0x40009000

0000a4ec <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    a4ec:	4a04      	ldr	r2, [pc, #16]	; (a500 <radio_tmr_stop+0x14>)
    a4ee:	2301      	movs	r3, #1
    a4f0:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    a4f2:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    a4f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    a4f8:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    a4fa:	6113      	str	r3, [r2, #16]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_STOP(SW_SWITCH_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    a4fc:	4770      	bx	lr
    a4fe:	bf00      	nop
    a500:	40008000 	.word	0x40008000

0000a504 <radio_tmr_hcto_configure>:

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    a504:	4b0c      	ldr	r3, [pc, #48]	; (a538 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a506:	4a0d      	ldr	r2, [pc, #52]	; (a53c <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    a508:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a50c:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    a510:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    a514:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    a518:	3240      	adds	r2, #64	; 0x40
    a51a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    a51e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    a522:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    a526:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    a52a:	3a34      	subs	r2, #52	; 0x34
    a52c:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    a530:	2218      	movs	r2, #24
    a532:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE |
		HAL_RADIO_DISABLE_ON_HCTO_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    a536:	4770      	bx	lr
    a538:	40008000 	.word	0x40008000
    a53c:	40001104 	.word	0x40001104

0000a540 <radio_tmr_aa_capture>:

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    a540:	4b0b      	ldr	r3, [pc, #44]	; (a570 <radio_tmr_aa_capture+0x30>)
    a542:	4a0c      	ldr	r2, [pc, #48]	; (a574 <radio_tmr_aa_capture+0x34>)
    a544:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    a548:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    a54c:	3240      	adds	r2, #64	; 0x40
    a54e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    a552:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    a556:	3a3c      	subs	r2, #60	; 0x3c
    a558:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    a55c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    a560:	3240      	adds	r2, #64	; 0x40
    a562:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    a566:	220c      	movs	r2, #12
    a568:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		HAL_RADIO_READY_TIME_CAPTURE_PPI_ENABLE |
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_ENABLE;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    a56c:	4770      	bx	lr
    a56e:	bf00      	nop
    a570:	4001f000 	.word	0x4001f000
    a574:	40001100 	.word	0x40001100

0000a578 <radio_tmr_aa_get>:

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    a578:	4b01      	ldr	r3, [pc, #4]	; (a580 <radio_tmr_aa_get+0x8>)
    a57a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    a57e:	4770      	bx	lr
    a580:	40008000 	.word	0x40008000

0000a584 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    a584:	4b01      	ldr	r3, [pc, #4]	; (a58c <radio_tmr_aa_save+0x8>)
    a586:	6018      	str	r0, [r3, #0]
}
    a588:	4770      	bx	lr
    a58a:	bf00      	nop
    a58c:	20001328 	.word	0x20001328

0000a590 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    a590:	4b01      	ldr	r3, [pc, #4]	; (a598 <radio_tmr_aa_restore+0x8>)
    a592:	6818      	ldr	r0, [r3, #0]
    a594:	4770      	bx	lr
    a596:	bf00      	nop
    a598:	20001328 	.word	0x20001328

0000a59c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    a59c:	4b01      	ldr	r3, [pc, #4]	; (a5a4 <radio_tmr_ready_get+0x8>)
    a59e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    a5a2:	4770      	bx	lr
    a5a4:	40008000 	.word	0x40008000

0000a5a8 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    a5a8:	4b06      	ldr	r3, [pc, #24]	; (a5c4 <radio_tmr_end_capture+0x1c>)
    a5aa:	4a07      	ldr	r2, [pc, #28]	; (a5c8 <radio_tmr_end_capture+0x20>)
    a5ac:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    a5b0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    a5b4:	323c      	adds	r2, #60	; 0x3c
    a5b6:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    a5ba:	2220      	movs	r2, #32
    a5bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif
}
    a5c0:	4770      	bx	lr
    a5c2:	bf00      	nop
    a5c4:	4001f000 	.word	0x4001f000
    a5c8:	4000110c 	.word	0x4000110c

0000a5cc <radio_tmr_end_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    a5cc:	4b01      	ldr	r3, [pc, #4]	; (a5d4 <radio_tmr_end_get+0x8>)
    a5ce:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
    a5d2:	4770      	bx	lr
    a5d4:	40008000 	.word	0x40008000

0000a5d8 <radio_tmr_tifs_base_get>:
    a5d8:	4b01      	ldr	r3, [pc, #4]	; (a5e0 <radio_tmr_tifs_base_get+0x8>)
    a5da:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    a5de:	4770      	bx	lr
    a5e0:	40008000 	.word	0x40008000

0000a5e4 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a5e4:	4b16      	ldr	r3, [pc, #88]	; (a640 <radio_ccm_rx_pkt_set+0x5c>)
{
    a5e6:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a5e8:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a5ea:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a5ec:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    a5f0:	4e14      	ldr	r6, [pc, #80]	; (a644 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a5f2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    a5f6:	4d14      	ldr	r5, [pc, #80]	; (a648 <radio_ccm_rx_pkt_set+0x64>)
    a5f8:	2902      	cmp	r1, #2
    a5fa:	bf0c      	ite	eq
    a5fc:	4629      	moveq	r1, r5
    a5fe:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    a600:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a604:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    a608:	4810      	ldr	r0, [pc, #64]	; (a64c <radio_ccm_rx_pkt_set+0x68>)
    a60a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    a60e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a612:	4a0f      	ldr	r2, [pc, #60]	; (a650 <radio_ccm_rx_pkt_set+0x6c>)
    a614:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    a618:	490e      	ldr	r1, [pc, #56]	; (a654 <radio_ccm_rx_pkt_set+0x70>)
    a61a:	4a0f      	ldr	r2, [pc, #60]	; (a658 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    a61c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    a620:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    a624:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    a628:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    a62c:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    a630:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    a634:	2140      	movs	r1, #64	; 0x40
    a636:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    a63a:	2201      	movs	r2, #1
    a63c:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    a63e:	bd70      	pop	{r4, r5, r6, pc}
    a640:	4000f000 	.word	0x4000f000
    a644:	01000001 	.word	0x01000001
    a648:	01010001 	.word	0x01010001
    a64c:	20001224 	.word	0x20001224
    a650:	20001114 	.word	0x20001114
    a654:	40001104 	.word	0x40001104
    a658:	4001f000 	.word	0x4001f000

0000a65c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    a65c:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a65e:	4b0e      	ldr	r3, [pc, #56]	; (a698 <radio_ccm_tx_pkt_set+0x3c>)
    a660:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a662:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    a664:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    a668:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    a66c:	4c0b      	ldr	r4, [pc, #44]	; (a69c <radio_ccm_tx_pkt_set+0x40>)
    a66e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    a672:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    a676:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    a67a:	4809      	ldr	r0, [pc, #36]	; (a6a0 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a67c:	4909      	ldr	r1, [pc, #36]	; (a6a4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    a67e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    a682:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    a686:	2101      	movs	r1, #1
    a688:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    a68c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    a690:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    a694:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    a696:	bd10      	pop	{r4, pc}
    a698:	4000f000 	.word	0x4000f000
    a69c:	01010000 	.word	0x01010000
    a6a0:	20001224 	.word	0x20001224
    a6a4:	20001114 	.word	0x20001114

0000a6a8 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    a6a8:	4b0c      	ldr	r3, [pc, #48]	; (a6dc <radio_ccm_is_done+0x34>)
    a6aa:	2202      	movs	r2, #2
    a6ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    a6b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    a6b4:	b16a      	cbz	r2, a6d2 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    a6b6:	2202      	movs	r2, #2
    a6b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    a6bc:	4a08      	ldr	r2, [pc, #32]	; (a6e0 <radio_ccm_is_done+0x38>)
    a6be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a6c2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    a6c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    a6ca:	fab0 f080 	clz	r0, r0
    a6ce:	0940      	lsrs	r0, r0, #5
    a6d0:	4770      	bx	lr
		__WFE();
    a6d2:	bf20      	wfe
		__SEV();
    a6d4:	bf40      	sev
		__WFE();
    a6d6:	bf20      	wfe
    a6d8:	e7ea      	b.n	a6b0 <radio_ccm_is_done+0x8>
    a6da:	bf00      	nop
    a6dc:	4000f000 	.word	0x4000f000
    a6e0:	e000e100 	.word	0xe000e100

0000a6e4 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    a6e4:	4b03      	ldr	r3, [pc, #12]	; (a6f4 <radio_ccm_mic_is_valid+0x10>)
    a6e6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a6ea:	3000      	adds	r0, #0
    a6ec:	bf18      	it	ne
    a6ee:	2001      	movne	r0, #1
    a6f0:	4770      	bx	lr
    a6f2:	bf00      	nop
    a6f4:	4000f000 	.word	0x4000f000

0000a6f8 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    a6f8:	4b01      	ldr	r3, [pc, #4]	; (a700 <radio_ar_match_get+0x8>)
    a6fa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a6fe:	4770      	bx	lr
    a700:	4000f000 	.word	0x4000f000

0000a704 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    a704:	4a04      	ldr	r2, [pc, #16]	; (a718 <radio_ar_status_reset+0x14>)
    a706:	2300      	movs	r3, #0
    a708:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    a70c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    a710:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
    a714:	4770      	bx	lr
    a716:	bf00      	nop
    a718:	40001000 	.word	0x40001000

0000a71c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    a71c:	4b08      	ldr	r3, [pc, #32]	; (a740 <radio_ar_has_match+0x24>)
    a71e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    a722:	b160      	cbz	r0, a73e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    a724:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    a728:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    a72c:	b138      	cbz	r0, a73e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    a72e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    a732:	b120      	cbz	r0, a73e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    a734:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    a738:	fab0 f080 	clz	r0, r0
    a73c:	0940      	lsrs	r0, r0, #5
}
    a73e:	4770      	bx	lr
    a740:	40001000 	.word	0x40001000

0000a744 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    a744:	2901      	cmp	r1, #1
{
    a746:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    a748:	d00e      	beq.n	a768 <mayfly_enable_cb+0x24>
    a74a:	4b0d      	ldr	r3, [pc, #52]	; (a780 <mayfly_enable_cb+0x3c>)
    a74c:	4a0d      	ldr	r2, [pc, #52]	; (a784 <mayfly_enable_cb+0x40>)
    a74e:	490e      	ldr	r1, [pc, #56]	; (a788 <mayfly_enable_cb+0x44>)
    a750:	480e      	ldr	r0, [pc, #56]	; (a78c <mayfly_enable_cb+0x48>)
    a752:	e9cd 3300 	strd	r3, r3, [sp]
    a756:	4b0e      	ldr	r3, [pc, #56]	; (a790 <mayfly_enable_cb+0x4c>)
    a758:	f7f6 fdbc 	bl	12d4 <printk>
    a75c:	4040      	eors	r0, r0
    a75e:	f380 8811 	msr	BASEPRI, r0
    a762:	f04f 0004 	mov.w	r0, #4
    a766:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    a768:	2018      	movs	r0, #24
	if (enable) {
    a76a:	b122      	cbz	r2, a776 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    a76c:	b003      	add	sp, #12
    a76e:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
    a772:	f7f6 ba55 	b.w	c20 <_arch_irq_enable>
}
    a776:	b003      	add	sp, #12
    a778:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
    a77c:	f7f6 ba60 	b.w	c40 <_arch_irq_disable>
    a780:	0000bda7 	.word	0x0000bda7
    a784:	0000c71e 	.word	0x0000c71e
    a788:	0000c693 	.word	0x0000c693
    a78c:	0000deb6 	.word	0x0000deb6
    a790:	0000de87 	.word	0x0000de87

0000a794 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    a794:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
    a796:	b181      	cbz	r1, a7ba <mayfly_is_enabled+0x26>
    a798:	2901      	cmp	r1, #1
    a79a:	d014      	beq.n	a7c6 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    a79c:	4b0b      	ldr	r3, [pc, #44]	; (a7cc <mayfly_is_enabled+0x38>)
    a79e:	4a0c      	ldr	r2, [pc, #48]	; (a7d0 <mayfly_is_enabled+0x3c>)
    a7a0:	490c      	ldr	r1, [pc, #48]	; (a7d4 <mayfly_is_enabled+0x40>)
    a7a2:	480d      	ldr	r0, [pc, #52]	; (a7d8 <mayfly_is_enabled+0x44>)
    a7a4:	e9cd 3300 	strd	r3, r3, [sp]
    a7a8:	4b0c      	ldr	r3, [pc, #48]	; (a7dc <mayfly_is_enabled+0x48>)
    a7aa:	f7f6 fd93 	bl	12d4 <printk>
    a7ae:	4040      	eors	r0, r0
    a7b0:	f380 8811 	msr	BASEPRI, r0
    a7b4:	f04f 0004 	mov.w	r0, #4
    a7b8:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    a7ba:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
    a7bc:	b003      	add	sp, #12
    a7be:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
    a7c2:	f7f6 ba51 	b.w	c68 <_arch_irq_is_enabled>
    a7c6:	2018      	movs	r0, #24
    a7c8:	e7f8      	b.n	a7bc <mayfly_is_enabled+0x28>
    a7ca:	bf00      	nop
    a7cc:	0000bda7 	.word	0x0000bda7
    a7d0:	0000c71e 	.word	0x0000c71e
    a7d4:	0000c693 	.word	0x0000c693
    a7d8:	0000c669 	.word	0x0000c669
    a7dc:	0000de98 	.word	0x0000de98

0000a7e0 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a7e0:	4288      	cmp	r0, r1
    a7e2:	d00a      	beq.n	a7fa <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    a7e4:	b918      	cbnz	r0, a7ee <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    a7e6:	1e4b      	subs	r3, r1, #1
    a7e8:	4258      	negs	r0, r3
    a7ea:	4158      	adcs	r0, r3
    a7ec:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a7ee:	2801      	cmp	r0, #1
    a7f0:	d105      	bne.n	a7fe <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    a7f2:	fab1 f081 	clz	r0, r1
    a7f6:	0940      	lsrs	r0, r0, #5
    a7f8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a7fa:	2001      	movs	r0, #1
    a7fc:	4770      	bx	lr
    a7fe:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    a800:	4770      	bx	lr
	...

0000a804 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    a804:	b507      	push	{r0, r1, r2, lr}
    a806:	4b0e      	ldr	r3, [pc, #56]	; (a840 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
    a808:	b181      	cbz	r1, a82c <mayfly_pend+0x28>
    a80a:	2901      	cmp	r1, #1
    a80c:	d015      	beq.n	a83a <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    a80e:	4b0d      	ldr	r3, [pc, #52]	; (a844 <mayfly_pend+0x40>)
    a810:	4a0d      	ldr	r2, [pc, #52]	; (a848 <mayfly_pend+0x44>)
    a812:	490e      	ldr	r1, [pc, #56]	; (a84c <mayfly_pend+0x48>)
    a814:	480e      	ldr	r0, [pc, #56]	; (a850 <mayfly_pend+0x4c>)
    a816:	e9cd 3300 	strd	r3, r3, [sp]
    a81a:	4b0e      	ldr	r3, [pc, #56]	; (a854 <mayfly_pend+0x50>)
    a81c:	f7f6 fd5a 	bl	12d4 <printk>
    a820:	4040      	eors	r0, r0
    a822:	f380 8811 	msr	BASEPRI, r0
    a826:	f04f 0004 	mov.w	r0, #4
    a82a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a82c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a830:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
    a834:	b003      	add	sp, #12
    a836:	f85d fb04 	ldr.w	pc, [sp], #4
    a83a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a83e:	e7f7      	b.n	a830 <mayfly_pend+0x2c>
    a840:	e000e100 	.word	0xe000e100
    a844:	0000bda7 	.word	0x0000bda7
    a848:	0000c71e 	.word	0x0000c71e
    a84c:	0000c693 	.word	0x0000c693
    a850:	0000c669 	.word	0x0000c669
    a854:	0000deaa 	.word	0x0000deaa

0000a858 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    a858:	2803      	cmp	r0, #3
{
    a85a:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
    a85c:	d90e      	bls.n	a87c <hal_ticker_instance0_caller_id_get+0x24>
    a85e:	4b0e      	ldr	r3, [pc, #56]	; (a898 <hal_ticker_instance0_caller_id_get+0x40>)
    a860:	4a0e      	ldr	r2, [pc, #56]	; (a89c <hal_ticker_instance0_caller_id_get+0x44>)
    a862:	490f      	ldr	r1, [pc, #60]	; (a8a0 <hal_ticker_instance0_caller_id_get+0x48>)
    a864:	480f      	ldr	r0, [pc, #60]	; (a8a4 <hal_ticker_instance0_caller_id_get+0x4c>)
    a866:	e9cd 3300 	strd	r3, r3, [sp]
    a86a:	4b0f      	ldr	r3, [pc, #60]	; (a8a8 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    a86c:	f7f6 fd32 	bl	12d4 <printk>
    a870:	4040      	eors	r0, r0
    a872:	f380 8811 	msr	BASEPRI, r0
    a876:	f04f 0004 	mov.w	r0, #4
    a87a:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    a87c:	4b0b      	ldr	r3, [pc, #44]	; (a8ac <hal_ticker_instance0_caller_id_get+0x54>)
    a87e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    a880:	b938      	cbnz	r0, a892 <hal_ticker_instance0_caller_id_get+0x3a>
    a882:	4b05      	ldr	r3, [pc, #20]	; (a898 <hal_ticker_instance0_caller_id_get+0x40>)
    a884:	4a05      	ldr	r2, [pc, #20]	; (a89c <hal_ticker_instance0_caller_id_get+0x44>)
    a886:	4906      	ldr	r1, [pc, #24]	; (a8a0 <hal_ticker_instance0_caller_id_get+0x48>)
    a888:	4809      	ldr	r0, [pc, #36]	; (a8b0 <hal_ticker_instance0_caller_id_get+0x58>)
    a88a:	e9cd 3300 	strd	r3, r3, [sp]
    a88e:	4b06      	ldr	r3, [pc, #24]	; (a8a8 <hal_ticker_instance0_caller_id_get+0x50>)
    a890:	e7ec      	b.n	a86c <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
    a892:	b003      	add	sp, #12
    a894:	f85d fb04 	ldr.w	pc, [sp], #4
    a898:	0000bda7 	.word	0x0000bda7
    a89c:	0000c71e 	.word	0x0000c71e
    a8a0:	0000c693 	.word	0x0000c693
    a8a4:	0000df28 	.word	0x0000df28
    a8a8:	0000dee6 	.word	0x0000dee6
    a8ac:	0000df24 	.word	0x0000df24
    a8b0:	0000df69 	.word	0x0000df69

0000a8b4 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
    a8b4:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    a8b6:	3802      	subs	r0, #2
{
    a8b8:	461c      	mov	r4, r3
	switch (caller_id) {
    a8ba:	2803      	cmp	r0, #3
    a8bc:	d818      	bhi.n	a8f0 <hal_ticker_instance0_sched+0x3c>
    a8be:	e8df f000 	tbb	[pc, r0]
    a8c2:	0d02      	.short	0x0d02
    a8c4:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    a8c6:	2903      	cmp	r1, #3
    a8c8:	d112      	bne.n	a8f0 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    a8ca:	4b19      	ldr	r3, [pc, #100]	; (a930 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    a8cc:	2100      	movs	r1, #0
			m.param = instance;
    a8ce:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    a8d0:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    a8d2:	b002      	add	sp, #8
    a8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a8d8:	f7f8 bd0a 	b.w	32f0 <mayfly_enqueue>
		switch (callee_id) {
    a8dc:	2904      	cmp	r1, #4
    a8de:	d107      	bne.n	a8f0 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
    a8e0:	4b14      	ldr	r3, [pc, #80]	; (a934 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    a8e2:	2101      	movs	r1, #1
			m.param = instance;
    a8e4:	609c      	str	r4, [r3, #8]
    a8e6:	e7f3      	b.n	a8d0 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    a8e8:	2903      	cmp	r1, #3
    a8ea:	d010      	beq.n	a90e <hal_ticker_instance0_sched+0x5a>
    a8ec:	2904      	cmp	r1, #4
    a8ee:	d013      	beq.n	a918 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
    a8f0:	4b11      	ldr	r3, [pc, #68]	; (a938 <hal_ticker_instance0_sched+0x84>)
    a8f2:	4a12      	ldr	r2, [pc, #72]	; (a93c <hal_ticker_instance0_sched+0x88>)
    a8f4:	4912      	ldr	r1, [pc, #72]	; (a940 <hal_ticker_instance0_sched+0x8c>)
    a8f6:	4813      	ldr	r0, [pc, #76]	; (a944 <hal_ticker_instance0_sched+0x90>)
    a8f8:	e9cd 3300 	strd	r3, r3, [sp]
    a8fc:	4b12      	ldr	r3, [pc, #72]	; (a948 <hal_ticker_instance0_sched+0x94>)
    a8fe:	f7f6 fce9 	bl	12d4 <printk>
    a902:	4040      	eors	r0, r0
    a904:	f380 8811 	msr	BASEPRI, r0
    a908:	f04f 0004 	mov.w	r0, #4
    a90c:	df02      	svc	2
			m.param = instance;
    a90e:	4b0f      	ldr	r3, [pc, #60]	; (a94c <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a910:	2100      	movs	r1, #0
			m.param = instance;
    a912:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a914:	2001      	movs	r0, #1
    a916:	e7dc      	b.n	a8d2 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    a918:	4b0d      	ldr	r3, [pc, #52]	; (a950 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a91a:	2101      	movs	r1, #1
			m.param = instance;
    a91c:	609c      	str	r4, [r3, #8]
    a91e:	e7f9      	b.n	a914 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
    a920:	2904      	cmp	r1, #4
    a922:	d1e5      	bne.n	a8f0 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
    a924:	4b0b      	ldr	r3, [pc, #44]	; (a954 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a926:	2101      	movs	r1, #1
			m.param = instance;
    a928:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a92a:	2003      	movs	r0, #3
    a92c:	e7d1      	b.n	a8d2 <hal_ticker_instance0_sched+0x1e>
    a92e:	bf00      	nop
    a930:	200038c0 	.word	0x200038c0
    a934:	200038d0 	.word	0x200038d0
    a938:	0000bda7 	.word	0x0000bda7
    a93c:	0000c71e 	.word	0x0000c71e
    a940:	0000c693 	.word	0x0000c693
    a944:	0000c669 	.word	0x0000c669
    a948:	0000df09 	.word	0x0000df09
    a94c:	200038e0 	.word	0x200038e0
    a950:	200038f0 	.word	0x200038f0
    a954:	20003900 	.word	0x20003900

0000a958 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    a958:	4601      	mov	r1, r0
    a95a:	2000      	movs	r0, #0
    a95c:	f7ff baa0 	b.w	9ea0 <cntr_cmp_set>

0000a960 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
    a960:	4770      	bx	lr
	...

0000a964 <net_buf_pool_get>:
}
    a964:	4b01      	ldr	r3, [pc, #4]	; (a96c <net_buf_pool_get+0x8>)
    a966:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    a96a:	4770      	bx	lr
    a96c:	200039d4 	.word	0x200039d4

0000a970 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a970:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    a972:	4b04      	ldr	r3, [pc, #16]	; (a984 <net_buf_id+0x14>)
    a974:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    a978:	69db      	ldr	r3, [r3, #28]
    a97a:	1ac0      	subs	r0, r0, r3
}
    a97c:	4b02      	ldr	r3, [pc, #8]	; (a988 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    a97e:	10c0      	asrs	r0, r0, #3
}
    a980:	4358      	muls	r0, r3
    a982:	4770      	bx	lr
    a984:	200039d4 	.word	0x200039d4
    a988:	aaaaaaab 	.word	0xaaaaaaab

0000a98c <fixed_data_alloc>:
{
    a98c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a98e:	4b09      	ldr	r3, [pc, #36]	; (a9b4 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a990:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a992:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    a996:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a998:	699b      	ldr	r3, [r3, #24]
    a99a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    a99c:	6823      	ldr	r3, [r4, #0]
    a99e:	429a      	cmp	r2, r3
    a9a0:	bf94      	ite	ls
    a9a2:	600a      	strls	r2, [r1, #0]
    a9a4:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    a9a6:	f7ff ffe3 	bl	a970 <net_buf_id>
    a9aa:	e9d4 2300 	ldrd	r2, r3, [r4]
}
    a9ae:	fb02 3000 	mla	r0, r2, r0, r3
    a9b2:	bd10      	pop	{r4, pc}
    a9b4:	200039d4 	.word	0x200039d4

0000a9b8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    a9b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a9bc:	4605      	mov	r5, r0
    a9be:	9101      	str	r1, [sp, #4]
    a9c0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    a9c2:	f000 fd7b 	bl	b4bc <_impl_k_uptime_get_32>
    a9c6:	4607      	mov	r7, r0
	__asm__ volatile(
    a9c8:	f04f 0320 	mov.w	r3, #32
    a9cc:	f3ef 8811 	mrs	r8, BASEPRI
    a9d0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    a9d4:	8a6b      	ldrh	r3, [r5, #18]
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d03d      	beq.n	aa56 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    a9da:	8a2a      	ldrh	r2, [r5, #16]
    a9dc:	429a      	cmp	r2, r3
    a9de:	d92a      	bls.n	aa36 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    a9e0:	2100      	movs	r1, #0
    a9e2:	4628      	mov	r0, r5
    a9e4:	f000 fad5 	bl	af92 <k_queue_get>
			if (buf) {
    a9e8:	4604      	mov	r4, r0
    a9ea:	b320      	cbz	r0, aa36 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a9ec:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    a9f0:	9b01      	ldr	r3, [sp, #4]
    a9f2:	2b00      	cmp	r3, #0
    a9f4:	d03c      	beq.n	aa70 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    a9f6:	1c73      	adds	r3, r6, #1
    a9f8:	2b01      	cmp	r3, #1
    a9fa:	d906      	bls.n	aa0a <net_buf_alloc_len+0x52>
    a9fc:	f000 fd5e 	bl	b4bc <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    aa00:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    aa02:	42b0      	cmp	r0, r6
    aa04:	bf94      	ite	ls
    aa06:	1a36      	subls	r6, r6, r0
    aa08:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    aa0a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    aa0c:	4f1e      	ldr	r7, [pc, #120]	; (aa88 <net_buf_alloc_len+0xd0>)
    aa0e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    aa12:	4632      	mov	r2, r6
    aa14:	699b      	ldr	r3, [r3, #24]
    aa16:	681b      	ldr	r3, [r3, #0]
    aa18:	a901      	add	r1, sp, #4
    aa1a:	681b      	ldr	r3, [r3, #0]
    aa1c:	4620      	mov	r0, r4
    aa1e:	4798      	blx	r3
    aa20:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    aa22:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    aa24:	bb28      	cbnz	r0, aa72 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    aa26:	79a0      	ldrb	r0, [r4, #6]
    aa28:	4621      	mov	r1, r4
    aa2a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    aa2e:	f000 fa90 	bl	af52 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    aa32:	462c      	mov	r4, r5
    aa34:	e018      	b.n	aa68 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    aa36:	8a6b      	ldrh	r3, [r5, #18]
    aa38:	1e5a      	subs	r2, r3, #1
    aa3a:	826a      	strh	r2, [r5, #18]
    aa3c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    aa40:	8a2c      	ldrh	r4, [r5, #16]
    aa42:	1ae4      	subs	r4, r4, r3
    aa44:	69eb      	ldr	r3, [r5, #28]
    aa46:	2218      	movs	r2, #24
    aa48:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    aa4c:	4b0e      	ldr	r3, [pc, #56]	; (aa88 <net_buf_alloc_len+0xd0>)
    aa4e:	1aed      	subs	r5, r5, r3
    aa50:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    aa52:	71a5      	strb	r5, [r4, #6]
		goto success;
    aa54:	e7cc      	b.n	a9f0 <net_buf_alloc_len+0x38>
    aa56:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    aa5a:	4631      	mov	r1, r6
    aa5c:	4628      	mov	r0, r5
    aa5e:	f000 fa98 	bl	af92 <k_queue_get>
	if (!buf) {
    aa62:	4604      	mov	r4, r0
    aa64:	2800      	cmp	r0, #0
    aa66:	d1c3      	bne.n	a9f0 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    aa68:	4620      	mov	r0, r4
    aa6a:	b002      	add	sp, #8
    aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    aa70:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
    aa72:	2300      	movs	r3, #0
    aa74:	6023      	str	r3, [r4, #0]
    aa76:	2201      	movs	r2, #1
    aa78:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0;
    aa7a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
    aa7c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
    aa7e:	6923      	ldr	r3, [r4, #16]
    aa80:	81e2      	strh	r2, [r4, #14]
    aa82:	60a3      	str	r3, [r4, #8]
	return buf;
    aa84:	e7f0      	b.n	aa68 <net_buf_alloc_len+0xb0>
    aa86:	bf00      	nop
    aa88:	200039d4 	.word	0x200039d4

0000aa8c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    aa8c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    aa8e:	685b      	ldr	r3, [r3, #4]
    aa90:	460a      	mov	r2, r1
    aa92:	6819      	ldr	r1, [r3, #0]
    aa94:	f7ff bf90 	b.w	a9b8 <net_buf_alloc_len>

0000aa98 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    aa98:	b570      	push	{r4, r5, r6, lr}
    aa9a:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    aa9c:	f000 fa79 	bl	af92 <k_queue_get>
	if (!buf) {
    aaa0:	4605      	mov	r5, r0
    aaa2:	b128      	cbz	r0, aab0 <net_buf_get+0x18>
    aaa4:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    aaa6:	7963      	ldrb	r3, [r4, #5]
    aaa8:	f013 0301 	ands.w	r3, r3, #1
    aaac:	d102      	bne.n	aab4 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    aaae:	6023      	str	r3, [r4, #0]

	return buf;
}
    aab0:	4628      	mov	r0, r5
    aab2:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    aab4:	2100      	movs	r1, #0
    aab6:	4630      	mov	r0, r6
    aab8:	f000 fa6b 	bl	af92 <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    aabc:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    aabe:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    aac0:	f023 0301 	bic.w	r3, r3, #1
    aac4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    aac6:	4604      	mov	r4, r0
    aac8:	e7ed      	b.n	aaa6 <net_buf_get+0xe>

0000aaca <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    aaca:	6883      	ldr	r3, [r0, #8]
    aacc:	4419      	add	r1, r3
    aace:	6001      	str	r1, [r0, #0]
}
    aad0:	4770      	bx	lr

0000aad2 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    aad2:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    aad4:	460a      	mov	r2, r1
    aad6:	6814      	ldr	r4, [r2, #0]
    aad8:	b914      	cbnz	r4, aae0 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    aada:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    aadc:	f000 ba3d 	b.w	af5a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    aae0:	7953      	ldrb	r3, [r2, #5]
    aae2:	f043 0301 	orr.w	r3, r3, #1
    aae6:	7153      	strb	r3, [r2, #5]
    aae8:	4622      	mov	r2, r4
    aaea:	e7f4      	b.n	aad6 <net_buf_put+0x4>

0000aaec <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aaee:	4d15      	ldr	r5, [pc, #84]	; (ab44 <net_buf_unref+0x58>)
    aaf0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    aaf2:	2600      	movs	r6, #0
	while (buf) {
    aaf4:	b904      	cbnz	r4, aaf8 <net_buf_unref+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
    aaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    aaf8:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    aafa:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    aafc:	3b01      	subs	r3, #1
    aafe:	b2db      	uxtb	r3, r3
    ab00:	7123      	strb	r3, [r4, #4]
    ab02:	2b00      	cmp	r3, #0
    ab04:	d1f7      	bne.n	aaf6 <net_buf_unref+0xa>
		if (buf->__buf) {
    ab06:	6921      	ldr	r1, [r4, #16]
    ab08:	b159      	cbz	r1, ab22 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    ab0a:	7963      	ldrb	r3, [r4, #5]
    ab0c:	079b      	lsls	r3, r3, #30
    ab0e:	d407      	bmi.n	ab20 <net_buf_unref+0x34>
	pool->alloc->cb->unref(buf, data);
    ab10:	79a3      	ldrb	r3, [r4, #6]
    ab12:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    ab16:	4620      	mov	r0, r4
    ab18:	699b      	ldr	r3, [r3, #24]
    ab1a:	681b      	ldr	r3, [r3, #0]
    ab1c:	689b      	ldr	r3, [r3, #8]
    ab1e:	4798      	blx	r3
			buf->__buf = NULL;
    ab20:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
    ab22:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    ab24:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
    ab26:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    ab2a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    ab2c:	695b      	ldr	r3, [r3, #20]
    ab2e:	b11b      	cbz	r3, ab38 <net_buf_unref+0x4c>
			pool->destroy(buf);
    ab30:	4620      	mov	r0, r4
    ab32:	4798      	blx	r3
{
    ab34:	463c      	mov	r4, r7
    ab36:	e7dd      	b.n	aaf4 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    ab38:	4621      	mov	r1, r4
    ab3a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    ab3e:	f000 fa08 	bl	af52 <k_queue_prepend>
    ab42:	e7f7      	b.n	ab34 <net_buf_unref+0x48>
    ab44:	200039d4 	.word	0x200039d4

0000ab48 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    ab48:	7903      	ldrb	r3, [r0, #4]
    ab4a:	3301      	adds	r3, #1
    ab4c:	7103      	strb	r3, [r0, #4]
	return buf;
}
    ab4e:	4770      	bx	lr

0000ab50 <net_buf_simple_add>:
	return buf->data + buf->len;
    ab50:	8883      	ldrh	r3, [r0, #4]
    ab52:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    ab54:	4419      	add	r1, r3
    ab56:	8081      	strh	r1, [r0, #4]
	return tail;
}
    ab58:	18d0      	adds	r0, r2, r3
    ab5a:	4770      	bx	lr

0000ab5c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    ab5c:	b430      	push	{r4, r5}
    ab5e:	8883      	ldrh	r3, [r0, #4]
    ab60:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    ab62:	189d      	adds	r5, r3, r2
    ab64:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    ab66:	18e0      	adds	r0, r4, r3
}
    ab68:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    ab6a:	f7f5 bd38 	b.w	5de <memcpy>

0000ab6e <net_buf_simple_add_u8>:
    ab6e:	8883      	ldrh	r3, [r0, #4]
    ab70:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    ab72:	b510      	push	{r4, lr}
	buf->len += len;
    ab74:	1c5c      	adds	r4, r3, #1
    ab76:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    ab78:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    ab7a:	18d0      	adds	r0, r2, r3
    ab7c:	bd10      	pop	{r4, pc}

0000ab7e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    ab7e:	8883      	ldrh	r3, [r0, #4]
    ab80:	1a5b      	subs	r3, r3, r1
    ab82:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    ab84:	6803      	ldr	r3, [r0, #0]
    ab86:	4419      	add	r1, r3
    ab88:	6001      	str	r1, [r0, #0]
}
    ab8a:	4608      	mov	r0, r1
    ab8c:	4770      	bx	lr

0000ab8e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    ab8e:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    ab90:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    ab92:	2101      	movs	r1, #1
	val = buf->data[0];
    ab94:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    ab96:	f7ff fff2 	bl	ab7e <net_buf_simple_pull>

	return val;
}
    ab9a:	4610      	mov	r0, r2
    ab9c:	bd08      	pop	{r3, pc}

0000ab9e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    ab9e:	6802      	ldr	r2, [r0, #0]
    aba0:	6880      	ldr	r0, [r0, #8]
}
    aba2:	1a10      	subs	r0, r2, r0
    aba4:	4770      	bx	lr
	...

0000aba8 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    aba8:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    abaa:	4b08      	ldr	r3, [pc, #32]	; (abcc <_sys_device_do_config_level+0x24>)
    abac:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    abb0:	3001      	adds	r0, #1
    abb2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    abb6:	4620      	mov	r0, r4
    abb8:	4285      	cmp	r5, r0
    abba:	f104 040c 	add.w	r4, r4, #12
    abbe:	d800      	bhi.n	abc2 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    abc0:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    abc2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    abc6:	685b      	ldr	r3, [r3, #4]
    abc8:	4798      	blx	r3
    abca:	e7f4      	b.n	abb6 <_sys_device_do_config_level+0xe>
    abcc:	0000dfa8 	.word	0x0000dfa8

0000abd0 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    abd0:	4b10      	ldr	r3, [pc, #64]	; (ac14 <device_get_binding+0x44>)
{
    abd2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    abd4:	4c10      	ldr	r4, [pc, #64]	; (ac18 <device_get_binding+0x48>)
{
    abd6:	4605      	mov	r5, r0
    abd8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    abda:	429c      	cmp	r4, r3
    abdc:	d104      	bne.n	abe8 <device_get_binding+0x18>
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    abde:	4c0e      	ldr	r4, [pc, #56]	; (ac18 <device_get_binding+0x48>)
    abe0:	42b4      	cmp	r4, r6
    abe2:	d109      	bne.n	abf8 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    abe4:	2400      	movs	r4, #0
    abe6:	e012      	b.n	ac0e <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    abe8:	6862      	ldr	r2, [r4, #4]
    abea:	b11a      	cbz	r2, abf4 <device_get_binding+0x24>
    abec:	6822      	ldr	r2, [r4, #0]
    abee:	6812      	ldr	r2, [r2, #0]
    abf0:	42aa      	cmp	r2, r5
    abf2:	d00c      	beq.n	ac0e <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    abf4:	340c      	adds	r4, #12
    abf6:	e7f0      	b.n	abda <device_get_binding+0xa>
		if (!info->driver_api) {
    abf8:	6863      	ldr	r3, [r4, #4]
    abfa:	b90b      	cbnz	r3, ac00 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    abfc:	340c      	adds	r4, #12
    abfe:	e7ef      	b.n	abe0 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    ac00:	6823      	ldr	r3, [r4, #0]
    ac02:	4628      	mov	r0, r5
    ac04:	6819      	ldr	r1, [r3, #0]
    ac06:	f7f5 fccd 	bl	5a4 <strcmp>
    ac0a:	2800      	cmp	r0, #0
    ac0c:	d1f6      	bne.n	abfc <device_get_binding+0x2c>
}
    ac0e:	4620      	mov	r0, r4
    ac10:	bd70      	pop	{r4, r5, r6, pc}
    ac12:	bf00      	nop
    ac14:	200039ac 	.word	0x200039ac
    ac18:	2000391c 	.word	0x2000391c

0000ac1c <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    ac1c:	1c43      	adds	r3, r0, #1
    ac1e:	d003      	beq.n	ac28 <_sys_power_save_idle_exit+0xc>
    ac20:	4b03      	ldr	r3, [pc, #12]	; (ac30 <_sys_power_save_idle_exit+0x14>)
    ac22:	681b      	ldr	r3, [r3, #0]
    ac24:	4283      	cmp	r3, r0
    ac26:	dc01      	bgt.n	ac2c <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    ac28:	f7f7 b90c 	b.w	1e44 <_timer_idle_exit>
	}
}
    ac2c:	4770      	bx	lr
    ac2e:	bf00      	nop
    ac30:	20003910 	.word	0x20003910

0000ac34 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ac34:	4d0f      	ldr	r5, [pc, #60]	; (ac74 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    ac36:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    ac38:	4f0f      	ldr	r7, [pc, #60]	; (ac78 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac3a:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    ac3e:	f04f 0220 	mov.w	r2, #32
    ac42:	f3ef 8311 	mrs	r3, BASEPRI
    ac46:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    ac4a:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac4c:	42b3      	cmp	r3, r6
    ac4e:	d00a      	beq.n	ac66 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    ac50:	b14b      	cbz	r3, ac66 <idle+0x32>
    ac52:	691c      	ldr	r4, [r3, #16]
    ac54:	1c63      	adds	r3, r4, #1
    ac56:	d008      	beq.n	ac6a <idle+0x36>
    ac58:	683b      	ldr	r3, [r7, #0]
    ac5a:	42a3      	cmp	r3, r4
    ac5c:	dd05      	ble.n	ac6a <idle+0x36>
	_kernel.idle = ticks;
    ac5e:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    ac60:	f7f6 f866 	bl	d30 <k_cpu_idle>
    ac64:	e7eb      	b.n	ac3e <idle+0xa>
    ac66:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    ac6a:	4620      	mov	r0, r4
    ac6c:	f7f7 f8d6 	bl	1e1c <_timer_idle_enter>
    ac70:	e7f5      	b.n	ac5e <idle+0x2a>
    ac72:	bf00      	nop
    ac74:	2000142c 	.word	0x2000142c
    ac78:	20003910 	.word	0x20003910

0000ac7c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    ac7c:	4802      	ldr	r0, [pc, #8]	; (ac88 <_bss_zero+0xc>)
    ac7e:	4a03      	ldr	r2, [pc, #12]	; (ac8c <_bss_zero+0x10>)
    ac80:	2100      	movs	r1, #0
    ac82:	1a12      	subs	r2, r2, r0
    ac84:	f7f5 bcd8 	b.w	638 <memset>
    ac88:	20000000 	.word	0x20000000
    ac8c:	20001760 	.word	0x20001760

0000ac90 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    ac90:	4802      	ldr	r0, [pc, #8]	; (ac9c <_data_copy+0xc>)
    ac92:	4a03      	ldr	r2, [pc, #12]	; (aca0 <_data_copy+0x10>)
    ac94:	4903      	ldr	r1, [pc, #12]	; (aca4 <_data_copy+0x14>)
    ac96:	1a12      	subs	r2, r2, r0
    ac98:	f7f5 bca1 	b.w	5de <memcpy>
    ac9c:	20003660 	.word	0x20003660
    aca0:	20003a14 	.word	0x20003a14
    aca4:	0000e010 	.word	0x0000e010

0000aca8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    aca8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    acaa:	2002      	movs	r0, #2
    acac:	f7ff ff7c 	bl	aba8 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    acb0:	4908      	ldr	r1, [pc, #32]	; (acd4 <bg_thread_main+0x2c>)
    acb2:	4809      	ldr	r0, [pc, #36]	; (acd8 <bg_thread_main+0x30>)
    acb4:	f7f6 fb0e 	bl	12d4 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    acb8:	2003      	movs	r0, #3
    acba:	f7ff ff75 	bl	aba8 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    acbe:	f000 fddb 	bl	b878 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    acc2:	f7f5 fd15 	bl	6f0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    acc6:	4a05      	ldr	r2, [pc, #20]	; (acdc <bg_thread_main+0x34>)
    acc8:	7a13      	ldrb	r3, [r2, #8]
    acca:	f023 0301 	bic.w	r3, r3, #1
    acce:	7213      	strb	r3, [r2, #8]
}
    acd0:	bd08      	pop	{r3, pc}
    acd2:	bf00      	nop
    acd4:	0000dfc4 	.word	0x0000dfc4
    acd8:	0000dfe0 	.word	0x0000dfe0
    acdc:	200013c4 	.word	0x200013c4

0000ace0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    ace0:	b580      	push	{r7, lr}
    ace2:	b086      	sub	sp, #24
    ace4:	4e30      	ldr	r6, [pc, #192]	; (ada8 <_Cstart+0xc8>)
    ace6:	af06      	add	r7, sp, #24
	_IntLibInit();
    ace8:	f7f5 fddc 	bl	8a4 <_IntLibInit>
    acec:	2324      	movs	r3, #36	; 0x24
    acee:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    acf0:	519a      	str	r2, [r3, r6]
    acf2:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    acf4:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    acf8:	6052      	str	r2, [r2, #4]
    acfa:	d1f8      	bne.n	acee <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    acfc:	4d2b      	ldr	r5, [pc, #172]	; (adac <_Cstart+0xcc>)
	_setup_new_thread(_main_thread, _main_stack,
    acfe:	f8df 90d4 	ldr.w	r9, [pc, #212]	; add4 <_Cstart+0xf4>
	_ready_q.cache = _main_thread;
    ad02:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    ad04:	2400      	movs	r4, #0
    ad06:	f04f 0801 	mov.w	r8, #1
    ad0a:	464b      	mov	r3, r9
    ad0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ad10:	4927      	ldr	r1, [pc, #156]	; (adb0 <_Cstart+0xd0>)
    ad12:	9400      	str	r4, [sp, #0]
    ad14:	4628      	mov	r0, r5
    ad16:	e9cd 4803 	strd	r4, r8, [sp, #12]
    ad1a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ad1e:	f000 fd65 	bl	b7ec <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ad22:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    ad24:	4628      	mov	r0, r5
    ad26:	f023 0304 	bic.w	r3, r3, #4
    ad2a:	726b      	strb	r3, [r5, #9]
    ad2c:	f000 f96e 	bl	b00c <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    ad30:	230f      	movs	r3, #15
    ad32:	e9cd 4302 	strd	r4, r3, [sp, #8]
    ad36:	491f      	ldr	r1, [pc, #124]	; (adb4 <_Cstart+0xd4>)
    ad38:	f8cd 8010 	str.w	r8, [sp, #16]
    ad3c:	e9cd 4400 	strd	r4, r4, [sp]
    ad40:	4b1d      	ldr	r3, [pc, #116]	; (adb8 <_Cstart+0xd8>)
    ad42:	481e      	ldr	r0, [pc, #120]	; (adbc <_Cstart+0xdc>)
    ad44:	f44f 72a0 	mov.w	r2, #320	; 0x140
    ad48:	f000 fd50 	bl	b7ec <_setup_new_thread>
    ad4c:	4a1b      	ldr	r2, [pc, #108]	; (adbc <_Cstart+0xdc>)
    ad4e:	7a53      	ldrb	r3, [r2, #9]
    ad50:	f023 0304 	bic.w	r3, r3, #4
    ad54:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    ad56:	4610      	mov	r0, r2
    ad58:	f000 f958 	bl	b00c <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    ad5c:	4b18      	ldr	r3, [pc, #96]	; (adc0 <_Cstart+0xe0>)
	list->tail = (sys_dnode_t *)list;
    ad5e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    ad62:	4b18      	ldr	r3, [pc, #96]	; (adc4 <_Cstart+0xe4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    ad64:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ad68:	4b17      	ldr	r3, [pc, #92]	; (adc8 <_Cstart+0xe8>)
    ad6a:	22e0      	movs	r2, #224	; 0xe0
    ad6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    ad70:	77dc      	strb	r4, [r3, #31]
    ad72:	761c      	strb	r4, [r3, #24]
    ad74:	765c      	strb	r4, [r3, #25]
    ad76:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    ad78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ad7a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    ad7e:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    ad80:	f7f5 ff46 	bl	c10 <_FaultInit>
	_CpuIdleInit();
    ad84:	f7f5 ffce 	bl	d24 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    ad88:	4620      	mov	r0, r4
    ad8a:	f7ff ff0d 	bl	aba8 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    ad8e:	4640      	mov	r0, r8
    ad90:	f7ff ff0a 	bl	aba8 <_sys_device_do_config_level>
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    ad94:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    ad96:	4b0d      	ldr	r3, [pc, #52]	; (adcc <_Cstart+0xec>)
    ad98:	4a0d      	ldr	r2, [pc, #52]	; (add0 <_Cstart+0xf0>)
    ad9a:	f383 8809 	msr	PSP, r3
    ad9e:	2100      	movs	r1, #0
    ada0:	f381 8811 	msr	BASEPRI, r1
    ada4:	4648      	mov	r0, r9
    ada6:	4710      	bx	r2
    ada8:	2000142c 	.word	0x2000142c
    adac:	200013c4 	.word	0x200013c4
    adb0:	20002520 	.word	0x20002520
    adb4:	20002920 	.word	0x20002920
    adb8:	0000ac35 	.word	0x0000ac35
    adbc:	2000135c 	.word	0x2000135c
    adc0:	2000143c 	.word	0x2000143c
    adc4:	20003260 	.word	0x20003260
    adc8:	e000ed00 	.word	0xe000ed00
    adcc:	20002920 	.word	0x20002920
    add0:	0000b785 	.word	0x0000b785
    add4:	0000aca9 	.word	0x0000aca9

0000add8 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    add8:	b570      	push	{r4, r5, r6, lr}
    adda:	68c6      	ldr	r6, [r0, #12]
	u32_t *bitarray = level <= p->max_inline_level ?
    addc:	7ac0      	ldrb	r0, [r0, #11]
    adde:	250c      	movs	r5, #12
    ade0:	434d      	muls	r5, r1
		&p->levels[level].bits : p->levels[level].bits_p;
    ade2:	4288      	cmp	r0, r1
    ade4:	eb06 0405 	add.w	r4, r6, r5
    ade8:	bfb4      	ite	lt
    adea:	5971      	ldrlt	r1, [r6, r5]
    adec:	4621      	movge	r1, r4

	*word = &bitarray[bn / 32];
    adee:	2420      	movs	r4, #32
    adf0:	fb92 f4f4 	sdiv	r4, r2, r4
    adf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    adf8:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    adfa:	f002 001f 	and.w	r0, r2, #31
    adfe:	bd70      	pop	{r4, r5, r6, pc}

0000ae00 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    ae00:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    ae02:	ab01      	add	r3, sp, #4
    ae04:	f7ff ffe8 	bl	add8 <get_bit_ptr>

	*word |= (1<<bit);
    ae08:	9a01      	ldr	r2, [sp, #4]
    ae0a:	2301      	movs	r3, #1
    ae0c:	fa03 f000 	lsl.w	r0, r3, r0
    ae10:	6813      	ldr	r3, [r2, #0]
    ae12:	4303      	orrs	r3, r0
    ae14:	6013      	str	r3, [r2, #0]
}
    ae16:	b003      	add	sp, #12
    ae18:	f85d fb04 	ldr.w	pc, [sp], #4

0000ae1c <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    ae1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae20:	4c2f      	ldr	r4, [pc, #188]	; (aee0 <init_static_pools+0xc4>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    ae22:	4e30      	ldr	r6, [pc, #192]	; (aee4 <init_static_pools+0xc8>)
		sys_dlist_init(&p->levels[i].free_list);
    ae24:	270c      	movs	r7, #12
    ae26:	f1a4 0518 	sub.w	r5, r4, #24
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    ae2a:	42b5      	cmp	r5, r6
    ae2c:	d302      	bcc.n	ae34 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    ae2e:	2000      	movs	r0, #0
    ae30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    ae34:	f854 3c14 	ldr.w	r3, [r4, #-20]
    ae38:	f834 cc10 	ldrh.w	ip, [r4, #-16]
	u32_t *bits = p->buf + buflen;
    ae3c:	f854 0c18 	ldr.w	r0, [r4, #-24]
    ae40:	f1a4 0208 	sub.w	r2, r4, #8
    ae44:	e944 2202 	strd	r2, r2, [r4, #-8]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    ae48:	fb03 fc0c 	mul.w	ip, r3, ip
	u32_t *bits = p->buf + buflen;
    ae4c:	4460      	add	r0, ip
	for (i = 0; i < p->n_levels; i++) {
    ae4e:	2100      	movs	r1, #0
    ae50:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    ae54:	4291      	cmp	r1, r2
    ae56:	db07      	blt.n	ae68 <init_static_pools+0x4c>
	for (i = 0; i < p->n_max; i++) {
    ae58:	f04f 0800 	mov.w	r8, #0
    ae5c:	f834 3c10 	ldrh.w	r3, [r4, #-16]
    ae60:	4598      	cmp	r8, r3
    ae62:	db23      	blt.n	aeac <init_static_pools+0x90>
    ae64:	3418      	adds	r4, #24
    ae66:	e7de      	b.n	ae26 <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    ae68:	f854 9c0c 	ldr.w	r9, [r4, #-12]
		int nblocks = buflen / sz;
    ae6c:	fbbc f2f3 	udiv	r2, ip, r3
		sys_dlist_init(&p->levels[i].free_list);
    ae70:	fb07 f801 	mul.w	r8, r7, r1
		if (nblocks < 32) {
    ae74:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    ae76:	eb09 0e08 	add.w	lr, r9, r8
			bits += (nblocks + 31)/32;
    ae7a:	bfc8      	it	gt
    ae7c:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    ae7e:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    ae82:	f10e 0a04 	add.w	sl, lr, #4
			bits += (nblocks + 31)/32;
    ae86:	bfc8      	it	gt
    ae88:	0952      	lsrgt	r2, r2, #5
		sz = _ALIGN4(sz / 4);
    ae8a:	f103 0303 	add.w	r3, r3, #3
    ae8e:	e9ce aa01 	strd	sl, sl, [lr, #4]
    ae92:	f023 0303 	bic.w	r3, r3, #3
			p->max_inline_level = i;
    ae96:	bfd4      	ite	le
    ae98:	f804 1c0d 	strble.w	r1, [r4, #-13]
			p->levels[i].bits_p = bits;
    ae9c:	f849 0008 	strgt.w	r0, [r9, r8]
	for (i = 0; i < p->n_levels; i++) {
    aea0:	f101 0101 	add.w	r1, r1, #1
			bits += (nblocks + 31)/32;
    aea4:	bfc8      	it	gt
    aea6:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
    aeaa:	e7d1      	b.n	ae50 <init_static_pools+0x34>
	return p->buf + lsz * block;
    aeac:	f854 2c14 	ldr.w	r2, [r4, #-20]
		sys_dlist_append(&p->levels[0].free_list, block);
    aeb0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
	return p->buf + lsz * block;
    aeb4:	f854 0c18 	ldr.w	r0, [r4, #-24]
    aeb8:	fb02 f208 	mul.w	r2, r2, r8
    aebc:	1881      	adds	r1, r0, r2
		sys_dlist_append(&p->levels[0].free_list, block);
    aebe:	f103 0c04 	add.w	ip, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    aec2:	f840 c002 	str.w	ip, [r0, r2]
	node->prev = list->tail;
    aec6:	689a      	ldr	r2, [r3, #8]
    aec8:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    aeca:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    aecc:	4628      	mov	r0, r5
    aece:	6011      	str	r1, [r2, #0]
	list->tail = node;
    aed0:	6099      	str	r1, [r3, #8]
    aed2:	4642      	mov	r2, r8
    aed4:	2100      	movs	r1, #0
    aed6:	f7ff ff93 	bl	ae00 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    aeda:	f108 0801 	add.w	r8, r8, #1
    aede:	e7bd      	b.n	ae5c <init_static_pools+0x40>
    aee0:	200039c4 	.word	0x200039c4
    aee4:	200039ac 	.word	0x200039ac

0000aee8 <k_queue_init>:
	list->head = NULL;
    aee8:	2300      	movs	r3, #0
	list->tail = NULL;
    aeea:	e9c0 3300 	strd	r3, r3, [r0]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    aeee:	f100 0308 	add.w	r3, r0, #8
	list->tail = (sys_dnode_t *)list;
    aef2:	e9c0 3302 	strd	r3, r3, [r0, #8]
#endif

	SYS_TRACING_OBJ_INIT(k_queue, queue);
}
    aef6:	4770      	bx	lr

0000aef8 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    aef8:	b510      	push	{r4, lr}
    aefa:	f04f 0320 	mov.w	r3, #32
    aefe:	f3ef 8411 	mrs	r4, BASEPRI
    af02:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    af06:	b931      	cbnz	r1, af16 <k_queue_insert+0x1e>
	node->next = list->head;
    af08:	6803      	ldr	r3, [r0, #0]
    af0a:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    af0c:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    af0e:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    af10:	b943      	cbnz	r3, af24 <k_queue_insert+0x2c>
		list->tail = node;
    af12:	6042      	str	r2, [r0, #4]
    af14:	e006      	b.n	af24 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    af16:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    af18:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    af1a:	b98b      	cbnz	r3, af40 <k_queue_insert+0x48>
	if (!list->tail) {
    af1c:	6843      	ldr	r3, [r0, #4]
    af1e:	b96b      	cbnz	r3, af3c <k_queue_insert+0x44>
		list->head = node;
    af20:	e9c0 2200 	strd	r2, r2, [r0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    af24:	2104      	movs	r1, #4
    af26:	3008      	adds	r0, #8
    af28:	f000 fe9e 	bl	bc68 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    af2c:	b150      	cbz	r0, af44 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    af2e:	f000 fa19 	bl	b364 <_update_time_slice_before_swap>
	return __swap(key);
    af32:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    af34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af38:	f7f5 bcc0 	b.w	8bc <__swap>
		list->tail->next = node;
    af3c:	601a      	str	r2, [r3, #0]
    af3e:	e7e8      	b.n	af12 <k_queue_insert+0x1a>
		prev->next = node;
    af40:	600a      	str	r2, [r1, #0]
    af42:	e7ef      	b.n	af24 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    af44:	f384 8811 	msr	BASEPRI, r4
    af48:	bd10      	pop	{r4, pc}

0000af4a <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    af4a:	460a      	mov	r2, r1
    af4c:	6841      	ldr	r1, [r0, #4]
    af4e:	f7ff bfd3 	b.w	aef8 <k_queue_insert>

0000af52 <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    af52:	460a      	mov	r2, r1
    af54:	2100      	movs	r1, #0
    af56:	f7ff bfcf 	b.w	aef8 <k_queue_insert>

0000af5a <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    af5a:	b510      	push	{r4, lr}
	__asm__ volatile(
    af5c:	f04f 0320 	mov.w	r3, #32
    af60:	f3ef 8411 	mrs	r4, BASEPRI
    af64:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    af68:	6843      	ldr	r3, [r0, #4]
    af6a:	b96b      	cbnz	r3, af88 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    af6c:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    af6e:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    af70:	2104      	movs	r1, #4
    af72:	3008      	adds	r0, #8
    af74:	f000 fe78 	bl	bc68 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    af78:	b140      	cbz	r0, af8c <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    af7a:	f000 f9f3 	bl	b364 <_update_time_slice_before_swap>
	return __swap(key);
    af7e:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    af80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    af84:	f7f5 bc9a 	b.w	8bc <__swap>
		list->tail->next = (sys_snode_t *)head;
    af88:	6019      	str	r1, [r3, #0]
    af8a:	e7f0      	b.n	af6e <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    af8c:	f384 8811 	msr	BASEPRI, r4
    af90:	bd10      	pop	{r4, pc}

0000af92 <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    af92:	b530      	push	{r4, r5, lr}
    af94:	4604      	mov	r4, r0
    af96:	b087      	sub	sp, #28
    af98:	460d      	mov	r5, r1
	__asm__ volatile(
    af9a:	f04f 0220 	mov.w	r2, #32
    af9e:	f3ef 8311 	mrs	r3, BASEPRI
    afa2:	f382 8811 	msr	BASEPRI, r2
    afa6:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    afa8:	b132      	cbz	r2, afb8 <k_queue_get+0x26>
	if (list->tail == node) {
    afaa:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    afac:	6811      	ldr	r1, [r2, #0]
    afae:	6021      	str	r1, [r4, #0]
	if (list->tail == node) {
    afb0:	4282      	cmp	r2, r0
		list->tail = list->head;
    afb2:	bf08      	it	eq
    afb4:	6061      	streq	r1, [r4, #4]
    afb6:	e000      	b.n	afba <k_queue_get+0x28>
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
    afb8:	b911      	cbnz	r1, afc0 <k_queue_get+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    afba:	f383 8811 	msr	BASEPRI, r3
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
    afbe:	e014      	b.n	afea <k_queue_get+0x58>
    afc0:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    afc4:	2104      	movs	r1, #4
    afc6:	4603      	mov	r3, r0
    afc8:	eb0d 0001 	add.w	r0, sp, r1
    afcc:	f000 fd95 	bl	bafa <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    afd0:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    afd4:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    afd6:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    afda:	2101      	movs	r1, #1
    afdc:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    afde:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    afe2:	f000 fd9d 	bl	bb20 <k_poll>
		if (err) {
    afe6:	b118      	cbz	r0, aff0 <k_queue_get+0x5e>
			return NULL;
    afe8:	2200      	movs	r2, #0
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    afea:	4610      	mov	r0, r2
    afec:	b007      	add	sp, #28
    afee:	bd30      	pop	{r4, r5, pc}
	__asm__ volatile(
    aff0:	f04f 0220 	mov.w	r2, #32
    aff4:	f3ef 8311 	mrs	r3, BASEPRI
    aff8:	f382 8811 	msr	BASEPRI, r2
    affc:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    affe:	2a00      	cmp	r2, #0
    b000:	d1d3      	bne.n	afaa <k_queue_get+0x18>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b002:	f383 8811 	msr	BASEPRI, r3
	} while (!val && timeout == K_FOREVER);
    b006:	1c6b      	adds	r3, r5, #1
    b008:	d0e2      	beq.n	afd0 <k_queue_get+0x3e>
    b00a:	e7ed      	b.n	afe8 <k_queue_get+0x56>

0000b00c <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    b00c:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b00e:	f990 500a 	ldrsb.w	r5, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    b012:	4a11      	ldr	r2, [pc, #68]	; (b058 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    b014:	f105 0110 	add.w	r1, r5, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    b018:	114b      	asrs	r3, r1, #5
    b01a:	3306      	adds	r3, #6
    b01c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b020:	f001 041f 	and.w	r4, r1, #31
    b024:	2101      	movs	r1, #1
    b026:	40a1      	lsls	r1, r4
    b028:	689c      	ldr	r4, [r3, #8]
    b02a:	4321      	orrs	r1, r4
    b02c:	6099      	str	r1, [r3, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b02e:	f105 0314 	add.w	r3, r5, #20
    b032:	00db      	lsls	r3, r3, #3
    b034:	1d19      	adds	r1, r3, #4
	node->prev = list->tail;
    b036:	4413      	add	r3, r2
    b038:	4411      	add	r1, r2
	node->next = list;
    b03a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    b03c:	6899      	ldr	r1, [r3, #8]
    b03e:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    b040:	6899      	ldr	r1, [r3, #8]
    b042:	6008      	str	r0, [r1, #0]
	list->tail = node;
    b044:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    b046:	69d3      	ldr	r3, [r2, #28]
    b048:	f993 100a 	ldrsb.w	r1, [r3, #10]
    b04c:	42a9      	cmp	r1, r5
    b04e:	bfd8      	it	le
    b050:	4618      	movle	r0, r3
    b052:	61d0      	str	r0, [r2, #28]
	_ready_q.prio_bmap[0] = 1;
# ifndef CONFIG_SMP
	_ready_q.cache = thread;
# endif
#endif
}
    b054:	bd30      	pop	{r4, r5, pc}
    b056:	bf00      	nop
    b058:	2000142c 	.word	0x2000142c

0000b05c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b05c:	7a42      	ldrb	r2, [r0, #9]
    b05e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    b062:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b066:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b068:	d104      	bne.n	b074 <_ready_thread+0x18>
    b06a:	6a03      	ldr	r3, [r0, #32]
    b06c:	3301      	adds	r3, #1
    b06e:	d101      	bne.n	b074 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    b070:	f7ff bfcc 	b.w	b00c <_add_thread_to_ready_q>
	}

#ifdef CONFIG_KERNEL_EVENT_LOGGER_THREAD
	_sys_k_event_logger_thread_ready(thread);
#endif
}
    b074:	4770      	bx	lr
	...

0000b078 <_add_timeout>:
{
    b078:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    b07a:	610b      	str	r3, [r1, #16]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    b07c:	e9c1 0202 	strd	r0, r2, [r1, #8]
	if (!timeout_in_ticks) {
    b080:	bb1b      	cbnz	r3, b0ca <_add_timeout+0x52>
	__asm__ volatile(
    b082:	f04f 0220 	mov.w	r2, #32
    b086:	f3ef 8411 	mrs	r4, BASEPRI
    b08a:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    b08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b092:	610a      	str	r2, [r1, #16]
	if (thread) {
    b094:	b180      	cbz	r0, b0b8 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    b096:	68ca      	ldr	r2, [r1, #12]
    b098:	b14a      	cbz	r2, b0ae <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    b09a:	e9d0 1200 	ldrd	r1, r2, [r0]
    b09e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    b0a0:	6801      	ldr	r1, [r0, #0]
    b0a2:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b0a4:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    b0a6:	61c3      	str	r3, [r0, #28]
    b0a8:	f022 0202 	bic.w	r2, r2, #2
    b0ac:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    b0ae:	f7ff ffd5 	bl	b05c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b0b2:	f384 8811 	msr	BASEPRI, r4
}
    b0b6:	bd70      	pop	{r4, r5, r6, pc}
    b0b8:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    b0bc:	694b      	ldr	r3, [r1, #20]
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d0f9      	beq.n	b0b6 <_add_timeout+0x3e>
			timeout->func(timeout);
    b0c2:	4608      	mov	r0, r1
}
    b0c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    b0c8:	4718      	bx	r3
	return list->head == list;
    b0ca:	4a11      	ldr	r2, [pc, #68]	; (b110 <_add_timeout+0x98>)
    b0cc:	e9d2 3604 	ldrd	r3, r6, [r2, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0d0:	f102 0010 	add.w	r0, r2, #16
    b0d4:	4283      	cmp	r3, r0
    b0d6:	4605      	mov	r5, r0
    b0d8:	d013      	beq.n	b102 <_add_timeout+0x8a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b0da:	b193      	cbz	r3, b102 <_add_timeout+0x8a>
		if (*delta <= in_q->delta_ticks_from_prev) {
    b0dc:	6908      	ldr	r0, [r1, #16]
    b0de:	691c      	ldr	r4, [r3, #16]
    b0e0:	42a0      	cmp	r0, r4
    b0e2:	dc08      	bgt.n	b0f6 <_add_timeout+0x7e>
		node->prev = insert_point->prev;
    b0e4:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    b0e6:	1a20      	subs	r0, r4, r0
    b0e8:	6118      	str	r0, [r3, #16]
		node->next = insert_point;
    b0ea:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    b0ee:	685a      	ldr	r2, [r3, #4]
    b0f0:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    b0f2:	6059      	str	r1, [r3, #4]
    b0f4:	e7df      	b.n	b0b6 <_add_timeout+0x3e>
		*delta -= in_q->delta_ticks_from_prev;
    b0f6:	1b00      	subs	r0, r0, r4
	return (node == list->tail) ? NULL : node->next;
    b0f8:	429e      	cmp	r6, r3
    b0fa:	6108      	str	r0, [r1, #16]
    b0fc:	d001      	beq.n	b102 <_add_timeout+0x8a>
    b0fe:	681b      	ldr	r3, [r3, #0]
    b100:	e7eb      	b.n	b0da <_add_timeout+0x62>
	node->prev = list->tail;
    b102:	e9c1 5600 	strd	r5, r6, [r1]
	list->tail->next = node;
    b106:	6953      	ldr	r3, [r2, #20]
    b108:	6019      	str	r1, [r3, #0]
	list->tail = node;
    b10a:	6151      	str	r1, [r2, #20]
    b10c:	e7d3      	b.n	b0b6 <_add_timeout+0x3e>
    b10e:	bf00      	nop
    b110:	2000142c 	.word	0x2000142c

0000b114 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    b114:	b510      	push	{r4, lr}
	node->prev->next = node->next;
    b116:	e9d0 4300 	ldrd	r4, r3, [r0]
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b11a:	f990 200a 	ldrsb.w	r2, [r0, #10]
    b11e:	601c      	str	r4, [r3, #0]
	node->next->prev = node->prev;
    b120:	6804      	ldr	r4, [r0, #0]
	return prio + _NUM_COOP_PRIO;
    b122:	f102 0110 	add.w	r1, r2, #16
    b126:	6063      	str	r3, [r4, #4]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b128:	3214      	adds	r2, #20
    b12a:	4b13      	ldr	r3, [pc, #76]	; (b178 <_remove_thread_from_ready_q+0x64>)
    b12c:	00d2      	lsls	r2, r2, #3
    b12e:	1d14      	adds	r4, r2, #4
	return list->head == list;
    b130:	441a      	add	r2, r3
    b132:	441c      	add	r4, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    b134:	6852      	ldr	r2, [r2, #4]
    b136:	42a2      	cmp	r2, r4
    b138:	d10c      	bne.n	b154 <_remove_thread_from_ready_q+0x40>
	return (prio + _NUM_COOP_PRIO) >> 5;
    b13a:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    b13c:	3206      	adds	r2, #6
    b13e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    b142:	2401      	movs	r4, #1
    b144:	f001 011f 	and.w	r1, r1, #31
    b148:	fa04 f101 	lsl.w	r1, r4, r1
    b14c:	6894      	ldr	r4, [r2, #8]
    b14e:	ea24 0401 	bic.w	r4, r4, r1
    b152:	6094      	str	r4, [r2, #8]
		clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    b154:	69da      	ldr	r2, [r3, #28]
    b156:	4282      	cmp	r2, r0
    b158:	d10b      	bne.n	b172 <_remove_thread_from_ready_q+0x5e>
	return __builtin_ffs(op);
    b15a:	6a19      	ldr	r1, [r3, #32]
    b15c:	fa91 f2a1 	rbit	r2, r1
    b160:	2900      	cmp	r1, #0
    b162:	fab2 f282 	clz	r2, r2
    b166:	bf08      	it	eq
    b168:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    b16c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    b170:	6a52      	ldr	r2, [r2, #36]	; 0x24
    b172:	61da      	str	r2, [r3, #28]
	_ready_q.prio_bmap[0] = 0;
	_ready_q.cache = NULL;
# endif
	sys_dlist_remove(&thread->base.k_q_node);
#endif
}
    b174:	bd10      	pop	{r4, pc}
    b176:	bf00      	nop
    b178:	2000142c 	.word	0x2000142c

0000b17c <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    b17c:	b430      	push	{r4, r5}
    b17e:	680c      	ldr	r4, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b180:	42a1      	cmp	r1, r4
    b182:	d023      	beq.n	b1cc <_pend_thread+0x50>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    b184:	b314      	cbz	r4, b1cc <_pend_thread+0x50>
    b186:	f990 300a 	ldrsb.w	r3, [r0, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    b18a:	f994 500a 	ldrsb.w	r5, [r4, #10]
    b18e:	429d      	cmp	r5, r3
    b190:	dd16      	ble.n	b1c0 <_pend_thread+0x44>
		node->prev = insert_point->prev;
    b192:	6863      	ldr	r3, [r4, #4]
		node->next = insert_point;
    b194:	e9c0 4300 	strd	r4, r3, [r0]
		insert_point->prev->next = node;
    b198:	6863      	ldr	r3, [r4, #4]
    b19a:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    b19c:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    b19e:	7a43      	ldrb	r3, [r0, #9]
    b1a0:	f043 0302 	orr.w	r3, r3, #2
    b1a4:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    b1a6:	1c53      	adds	r3, r2, #1
    b1a8:	d017      	beq.n	b1da <_pend_thread+0x5e>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    b1aa:	3209      	adds	r2, #9
    b1ac:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    b1ae:	bc30      	pop	{r4, r5}
    b1b0:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    b1b4:	460a      	mov	r2, r1
    b1b6:	3301      	adds	r3, #1
    b1b8:	f100 0110 	add.w	r1, r0, #16
    b1bc:	f7ff bf5c 	b.w	b078 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    b1c0:	684d      	ldr	r5, [r1, #4]
    b1c2:	42ac      	cmp	r4, r5
    b1c4:	d002      	beq.n	b1cc <_pend_thread+0x50>
    b1c6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    b1c8:	2c00      	cmp	r4, #0
    b1ca:	d1de      	bne.n	b18a <_pend_thread+0xe>
	node->prev = list->tail;
    b1cc:	684b      	ldr	r3, [r1, #4]
    b1ce:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    b1d0:	684b      	ldr	r3, [r1, #4]
	node->next = list;
    b1d2:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    b1d4:	6018      	str	r0, [r3, #0]
	list->tail = node;
    b1d6:	6048      	str	r0, [r1, #4]
    b1d8:	e7e1      	b.n	b19e <_pend_thread+0x22>
}
    b1da:	bc30      	pop	{r4, r5}
    b1dc:	4770      	bx	lr
	...

0000b1e0 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    b1e0:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    b1e2:	4c06      	ldr	r4, [pc, #24]	; (b1fc <_pend_current_thread+0x1c>)
{
    b1e4:	460e      	mov	r6, r1
    b1e6:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    b1e8:	68a0      	ldr	r0, [r4, #8]
    b1ea:	f7ff ff93 	bl	b114 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    b1ee:	4632      	mov	r2, r6
    b1f0:	4629      	mov	r1, r5
    b1f2:	68a0      	ldr	r0, [r4, #8]
}
    b1f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    b1f8:	f7ff bfc0 	b.w	b17c <_pend_thread>
    b1fc:	2000142c 	.word	0x2000142c

0000b200 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    b200:	4a09      	ldr	r2, [pc, #36]	; (b228 <__must_switch_threads+0x28>)
    b202:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    b204:	6892      	ldr	r2, [r2, #8]
    b206:	2900      	cmp	r1, #0
    b208:	fa91 f3a1 	rbit	r3, r1
    b20c:	f992 000a 	ldrsb.w	r0, [r2, #10]
    b210:	fab3 f383 	clz	r3, r3
    b214:	bf08      	it	eq
    b216:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    b21a:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    b21c:	4298      	cmp	r0, r3
    b21e:	bfd4      	ite	le
    b220:	2000      	movle	r0, #0
    b222:	2001      	movgt	r0, #1
    b224:	4770      	bx	lr
    b226:	bf00      	nop
    b228:	2000142c 	.word	0x2000142c

0000b22c <_reschedule_threads>:
	return _is_preempt(_current) && __must_switch_threads();
    b22c:	4b0a      	ldr	r3, [pc, #40]	; (b258 <_reschedule_threads+0x2c>)
    b22e:	689b      	ldr	r3, [r3, #8]
    b230:	895b      	ldrh	r3, [r3, #10]
    b232:	2b7f      	cmp	r3, #127	; 0x7f
{
    b234:	b510      	push	{r4, lr}
    b236:	4604      	mov	r4, r0
    b238:	d80a      	bhi.n	b250 <_reschedule_threads+0x24>
    b23a:	f7ff ffe1 	bl	b200 <__must_switch_threads>
    b23e:	b138      	cbz	r0, b250 <_reschedule_threads+0x24>
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    b240:	4b06      	ldr	r3, [pc, #24]	; (b25c <_reschedule_threads+0x30>)
    b242:	2200      	movs	r2, #0
    b244:	4620      	mov	r0, r4
}
    b246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    b24a:	601a      	str	r2, [r3, #0]
    b24c:	f7f5 bb36 	b.w	8bc <__swap>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b250:	f384 8811 	msr	BASEPRI, r4
}
    b254:	bd10      	pop	{r4, pc}
    b256:	bf00      	nop
    b258:	2000142c 	.word	0x2000142c
    b25c:	200016dc 	.word	0x200016dc

0000b260 <k_sched_unlock>:
	__asm__ volatile(
    b260:	f04f 0320 	mov.w	r3, #32
    b264:	f3ef 8011 	mrs	r0, BASEPRI
    b268:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    b26c:	4b03      	ldr	r3, [pc, #12]	; (b27c <k_sched_unlock+0x1c>)
    b26e:	689a      	ldr	r2, [r3, #8]
    b270:	7ad3      	ldrb	r3, [r2, #11]
    b272:	3301      	adds	r3, #1
    b274:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    b276:	f7ff bfd9 	b.w	b22c <_reschedule_threads>
    b27a:	bf00      	nop
    b27c:	2000142c 	.word	0x2000142c

0000b280 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    b280:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    b284:	4a12      	ldr	r2, [pc, #72]	; (b2d0 <_move_thread_to_end_of_prio_q+0x50>)
    b286:	3314      	adds	r3, #20
    b288:	00db      	lsls	r3, r3, #3
    b28a:	1d19      	adds	r1, r3, #4
    b28c:	4411      	add	r1, r2
{
    b28e:	b530      	push	{r4, r5, lr}
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    b290:	684c      	ldr	r4, [r1, #4]
    b292:	42a0      	cmp	r0, r4
    b294:	d01b      	beq.n	b2ce <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    b296:	e9d0 5400 	ldrd	r5, r4, [r0]
    b29a:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    b29c:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    b29e:	4413      	add	r3, r2
	node->next->prev = node->prev;
    b2a0:	606c      	str	r4, [r5, #4]
	node->next = list;
    b2a2:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    b2a4:	6899      	ldr	r1, [r3, #8]
    b2a6:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    b2a8:	6899      	ldr	r1, [r3, #8]
    b2aa:	6008      	str	r0, [r1, #0]
	list->tail = node;
    b2ac:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    b2ae:	69d3      	ldr	r3, [r2, #28]
    b2b0:	4283      	cmp	r3, r0
    b2b2:	d10b      	bne.n	b2cc <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    b2b4:	6a11      	ldr	r1, [r2, #32]
    b2b6:	fa91 f3a1 	rbit	r3, r1
    b2ba:	2900      	cmp	r1, #0
    b2bc:	fab3 f383 	clz	r3, r3
    b2c0:	bf08      	it	eq
    b2c2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    b2c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b2cc:	61d3      	str	r3, [r2, #28]
}
    b2ce:	bd30      	pop	{r4, r5, pc}
    b2d0:	2000142c 	.word	0x2000142c

0000b2d4 <_impl_k_yield>:
{
    b2d4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b2d6:	f04f 0320 	mov.w	r3, #32
    b2da:	f3ef 8511 	mrs	r5, BASEPRI
    b2de:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    b2e2:	4c09      	ldr	r4, [pc, #36]	; (b308 <_impl_k_yield+0x34>)
    b2e4:	68a0      	ldr	r0, [r4, #8]
    b2e6:	f7ff ffcb 	bl	b280 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    b2ea:	68a2      	ldr	r2, [r4, #8]
    b2ec:	69e3      	ldr	r3, [r4, #28]
    b2ee:	429a      	cmp	r2, r3
    b2f0:	d102      	bne.n	b2f8 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b2f2:	f385 8811 	msr	BASEPRI, r5
}
    b2f6:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    b2f8:	4b04      	ldr	r3, [pc, #16]	; (b30c <_impl_k_yield+0x38>)
    b2fa:	2200      	movs	r2, #0
    b2fc:	601a      	str	r2, [r3, #0]
    b2fe:	4628      	mov	r0, r5
}
    b300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b304:	f7f5 bada 	b.w	8bc <__swap>
    b308:	2000142c 	.word	0x2000142c
    b30c:	200016dc 	.word	0x200016dc

0000b310 <_impl_k_current_get>:
}
    b310:	4b01      	ldr	r3, [pc, #4]	; (b318 <_impl_k_current_get+0x8>)
    b312:	6898      	ldr	r0, [r3, #8]
    b314:	4770      	bx	lr
    b316:	bf00      	nop
    b318:	2000142c 	.word	0x2000142c

0000b31c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    b31c:	4b0d      	ldr	r3, [pc, #52]	; (b354 <_is_thread_time_slicing+0x38>)
    b31e:	681b      	ldr	r3, [r3, #0]
    b320:	2b00      	cmp	r3, #0
    b322:	dd14      	ble.n	b34e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    b324:	4b0c      	ldr	r3, [pc, #48]	; (b358 <_is_thread_time_slicing+0x3c>)
    b326:	681b      	ldr	r3, [r3, #0]
    b328:	4298      	cmp	r0, r3
    b32a:	d010      	beq.n	b34e <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    b32c:	4a0b      	ldr	r2, [pc, #44]	; (b35c <_is_thread_time_slicing+0x40>)
    b32e:	f990 300a 	ldrsb.w	r3, [r0, #10]
    b332:	6812      	ldr	r2, [r2, #0]
    b334:	4293      	cmp	r3, r2
    b336:	db0a      	blt.n	b34e <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    b338:	f103 0214 	add.w	r2, r3, #20
    b33c:	4b08      	ldr	r3, [pc, #32]	; (b360 <_is_thread_time_slicing+0x44>)
    b33e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b342:	e9d3 0301 	ldrd	r0, r3, [r3, #4]
    b346:	1ac0      	subs	r0, r0, r3
    b348:	bf18      	it	ne
    b34a:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    b34c:	4770      	bx	lr
		return 0;
    b34e:	2000      	movs	r0, #0
}
    b350:	4770      	bx	lr
    b352:	bf00      	nop
    b354:	20001550 	.word	0x20001550
    b358:	0000dfc0 	.word	0x0000dfc0
    b35c:	20001554 	.word	0x20001554
    b360:	2000142c 	.word	0x2000142c

0000b364 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    b364:	4b01      	ldr	r3, [pc, #4]	; (b36c <_update_time_slice_before_swap+0x8>)
    b366:	2200      	movs	r2, #0
    b368:	601a      	str	r2, [r3, #0]
}
    b36a:	4770      	bx	lr
    b36c:	200016dc 	.word	0x200016dc

0000b370 <_find_first_thread_to_unpend.constprop.8>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    b370:	4b0b      	ldr	r3, [pc, #44]	; (b3a0 <_find_first_thread_to_unpend.constprop.8+0x30>)
    b372:	681a      	ldr	r2, [r3, #0]
    b374:	6803      	ldr	r3, [r0, #0]
    b376:	b172      	cbz	r2, b396 <_find_first_thread_to_unpend.constprop.8+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b378:	4298      	cmp	r0, r3
    b37a:	d108      	bne.n	b38e <_find_first_thread_to_unpend.constprop.8+0x1e>
    b37c:	2300      	movs	r3, #0
    b37e:	e008      	b.n	b392 <_find_first_thread_to_unpend.constprop.8+0x22>

		/* skip threads that have an expired timeout */
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    b380:	6a1a      	ldr	r2, [r3, #32]
    b382:	3202      	adds	r2, #2
    b384:	d105      	bne.n	b392 <_find_first_thread_to_unpend.constprop.8+0x22>
	return (node == list->tail) ? NULL : node->next;
    b386:	6842      	ldr	r2, [r0, #4]
    b388:	4293      	cmp	r3, r2
    b38a:	d0f7      	beq.n	b37c <_find_first_thread_to_unpend.constprop.8+0xc>
    b38c:	681b      	ldr	r3, [r3, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    b38e:	2b00      	cmp	r3, #0
    b390:	d1f6      	bne.n	b380 <_find_first_thread_to_unpend.constprop.8+0x10>
	ARG_UNUSED(from);
#endif

	return (struct k_thread *)sys_dlist_peek_head(wait_q);

}
    b392:	4618      	mov	r0, r3
    b394:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b396:	4298      	cmp	r0, r3
    b398:	bf08      	it	eq
    b39a:	2300      	moveq	r3, #0
    b39c:	e7f9      	b.n	b392 <_find_first_thread_to_unpend.constprop.8+0x22>
    b39e:	bf00      	nop
    b3a0:	200016d8 	.word	0x200016d8

0000b3a4 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    b3a4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    b3a8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    b3ac:	e9c0 0000 	strd	r0, r0, [r0]
    b3b0:	e9c0 3304 	strd	r3, r3, [r0, #16]
#endif

	SYS_TRACING_OBJ_INIT(k_sem, sem);

	_k_object_init(sem);
}
    b3b4:	4770      	bx	lr
	...

0000b3b8 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    b3b8:	b570      	push	{r4, r5, r6, lr}
    b3ba:	4605      	mov	r5, r0
	__asm__ volatile(
    b3bc:	f04f 0320 	mov.w	r3, #32
    b3c0:	f3ef 8611 	mrs	r6, BASEPRI
    b3c4:	f383 8811 	msr	BASEPRI, r3

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);
    b3c8:	f7ff ffd2 	bl	b370 <_find_first_thread_to_unpend.constprop.8>

	if (thread) {
    b3cc:	4604      	mov	r4, r0
    b3ce:	2800      	cmp	r0, #0
    b3d0:	d046      	beq.n	b460 <_impl_k_sem_give+0xa8>
	node->prev->next = node->next;
    b3d2:	e9d0 2300 	ldrd	r2, r3, [r0]
    b3d6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b3d8:	6802      	ldr	r2, [r0, #0]
    b3da:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b3dc:	7a43      	ldrb	r3, [r0, #9]
    b3de:	f023 0302 	bic.w	r3, r3, #2
    b3e2:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b3e4:	6a21      	ldr	r1, [r4, #32]
    b3e6:	1c4a      	adds	r2, r1, #1
	return _abort_timeout(&thread->base.timeout);
    b3e8:	f100 0010 	add.w	r0, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b3ec:	d00e      	beq.n	b40c <_impl_k_sem_give+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    b3ee:	4a22      	ldr	r2, [pc, #136]	; (b478 <_impl_k_sem_give+0xc0>)
    b3f0:	6923      	ldr	r3, [r4, #16]
    b3f2:	6952      	ldr	r2, [r2, #20]
    b3f4:	4290      	cmp	r0, r2
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    b3f6:	bf1e      	ittt	ne
    b3f8:	691a      	ldrne	r2, [r3, #16]
    b3fa:	1852      	addne	r2, r2, r1
    b3fc:	611a      	strne	r2, [r3, #16]
	node->prev->next = node->next;
    b3fe:	6962      	ldr	r2, [r4, #20]
    b400:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    b402:	6923      	ldr	r3, [r4, #16]
    b404:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    b406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b40a:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b40c:	7a63      	ldrb	r3, [r4, #9]
    b40e:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    b412:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b416:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b418:	d105      	bne.n	b426 <_impl_k_sem_give+0x6e>
    b41a:	6a23      	ldr	r3, [r4, #32]
    b41c:	3301      	adds	r3, #1
    b41e:	d102      	bne.n	b426 <_impl_k_sem_give+0x6e>
		_add_thread_to_ready_q(thread);
    b420:	4620      	mov	r0, r4
    b422:	f7ff fdf3 	bl	b00c <_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b426:	2300      	movs	r3, #0
    b428:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b42a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    b42e:	2b0d      	cmp	r3, #13
    b430:	d813      	bhi.n	b45a <_impl_k_sem_give+0xa2>
    b432:	b11b      	cbz	r3, b43c <_impl_k_sem_give+0x84>
    b434:	4b11      	ldr	r3, [pc, #68]	; (b47c <_impl_k_sem_give+0xc4>)
    b436:	685b      	ldr	r3, [r3, #4]
    b438:	051b      	lsls	r3, r3, #20
    b43a:	d50e      	bpl.n	b45a <_impl_k_sem_give+0xa2>
	return _is_preempt(_current) && __must_switch_threads();
    b43c:	4b0e      	ldr	r3, [pc, #56]	; (b478 <_impl_k_sem_give+0xc0>)
    b43e:	689b      	ldr	r3, [r3, #8]
    b440:	895b      	ldrh	r3, [r3, #10]
    b442:	2b7f      	cmp	r3, #127	; 0x7f
    b444:	d809      	bhi.n	b45a <_impl_k_sem_give+0xa2>
    b446:	f7ff fedb 	bl	b200 <__must_switch_threads>
    b44a:	b130      	cbz	r0, b45a <_impl_k_sem_give+0xa2>
	_update_time_slice_before_swap();
    b44c:	f7ff ff8a 	bl	b364 <_update_time_slice_before_swap>
	return __swap(key);
    b450:	4630      	mov	r0, r6
	if (do_sem_give(sem)) {
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    b452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b456:	f7f5 ba31 	b.w	8bc <__swap>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b45a:	f386 8811 	msr	BASEPRI, r6
    b45e:	bd70      	pop	{r4, r5, r6, pc}
	sem->count += (sem->count != sem->limit);
    b460:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    b464:	429a      	cmp	r2, r3
    b466:	bf18      	it	ne
    b468:	3301      	addne	r3, #1
    b46a:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    b46c:	2102      	movs	r1, #2
    b46e:	f105 0010 	add.w	r0, r5, #16
    b472:	f000 fbf9 	bl	bc68 <_handle_obj_poll_events>
    b476:	e7e8      	b.n	b44a <_impl_k_sem_give+0x92>
    b478:	2000142c 	.word	0x2000142c
    b47c:	e000ed00 	.word	0xe000ed00

0000b480 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    b480:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b482:	f04f 0320 	mov.w	r3, #32
    b486:	f3ef 8411 	mrs	r4, BASEPRI
    b48a:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    b48e:	6883      	ldr	r3, [r0, #8]
    b490:	b12b      	cbz	r3, b49e <_impl_k_sem_take+0x1e>
		sem->count--;
    b492:	3b01      	subs	r3, #1
    b494:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b496:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    b49a:	2000      	movs	r0, #0
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
}
    b49c:	bd38      	pop	{r3, r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    b49e:	b921      	cbnz	r1, b4aa <_impl_k_sem_take+0x2a>
    b4a0:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
    b4a4:	f06f 000f 	mvn.w	r0, #15
    b4a8:	e7f8      	b.n	b49c <_impl_k_sem_take+0x1c>
	_pend_current_thread(&sem->wait_q, timeout);
    b4aa:	f7ff fe99 	bl	b1e0 <_pend_current_thread>
	_update_time_slice_before_swap();
    b4ae:	f7ff ff59 	bl	b364 <_update_time_slice_before_swap>
	return __swap(key);
    b4b2:	4620      	mov	r0, r4
}
    b4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b4b8:	f7f5 ba00 	b.w	8bc <__swap>

0000b4bc <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    b4bc:	4b03      	ldr	r3, [pc, #12]	; (b4cc <_impl_k_uptime_get_32+0x10>)
    b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
	return (u64_t)ticks * _ms_per_tick;
    b4c2:	230a      	movs	r3, #10
    b4c4:	4610      	mov	r0, r2
    b4c6:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    b4ca:	4770      	bx	lr
    b4cc:	200016e0 	.word	0x200016e0

0000b4d0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    b4d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4d4:	4607      	mov	r7, r0
	__asm__ volatile(
    b4d6:	f04f 0320 	mov.w	r3, #32
    b4da:	f3ef 8011 	mrs	r0, BASEPRI
    b4de:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    b4e2:	4961      	ldr	r1, [pc, #388]	; (b668 <_nano_sys_clock_tick_announce+0x198>)
    b4e4:	e9d1 4500 	ldrd	r4, r5, [r1]
    b4e8:	19e2      	adds	r2, r4, r7
    b4ea:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    b4ee:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b4f2:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    b4f6:	466e      	mov	r6, sp
	list->tail = (sys_dnode_t *)list;
    b4f8:	e9cd 6600 	strd	r6, r6, [sp]
	__asm__ volatile(
    b4fc:	f04f 0320 	mov.w	r3, #32
    b500:	f3ef 8011 	mrs	r0, BASEPRI
    b504:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    b508:	4c58      	ldr	r4, [pc, #352]	; (b66c <_nano_sys_clock_tick_announce+0x19c>)
    b50a:	4621      	mov	r1, r4
    b50c:	4602      	mov	r2, r0
    b50e:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b512:	428b      	cmp	r3, r1
    b514:	d000      	beq.n	b518 <_nano_sys_clock_tick_announce+0x48>
	if (!next) {
    b516:	b9fb      	cbnz	r3, b558 <_nano_sys_clock_tick_announce+0x88>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b518:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    b51c:	68a0      	ldr	r0, [r4, #8]
    b51e:	f7ff fefd 	bl	b31c <_is_thread_time_slicing>
    b522:	b1b0      	cbz	r0, b552 <_nano_sys_clock_tick_announce+0x82>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    b524:	4a52      	ldr	r2, [pc, #328]	; (b670 <_nano_sys_clock_tick_announce+0x1a0>)
    b526:	6811      	ldr	r1, [r2, #0]
    b528:	230a      	movs	r3, #10
    b52a:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    b52e:	4b51      	ldr	r3, [pc, #324]	; (b674 <_nano_sys_clock_tick_announce+0x1a4>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    b530:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    b532:	681b      	ldr	r3, [r3, #0]
    b534:	429f      	cmp	r7, r3
    b536:	db0c      	blt.n	b552 <_nano_sys_clock_tick_announce+0x82>
		_time_slice_elapsed = 0;
    b538:	2300      	movs	r3, #0
    b53a:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    b53c:	f04f 0320 	mov.w	r3, #32
    b540:	f3ef 8511 	mrs	r5, BASEPRI
    b544:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    b548:	68a0      	ldr	r0, [r4, #8]
    b54a:	f7ff fe99 	bl	b280 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b54e:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    b552:	b003      	add	sp, #12
    b554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    b558:	4d47      	ldr	r5, [pc, #284]	; (b678 <_nano_sys_clock_tick_announce+0x1a8>)
    b55a:	2101      	movs	r1, #1
    b55c:	6029      	str	r1, [r5, #0]
    b55e:	46ab      	mov	fp, r5
    b560:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    b562:	f04f 0c00 	mov.w	ip, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    b566:	f06f 0e01 	mvn.w	lr, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    b56a:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    b56c:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    b56e:	bfaa      	itet	ge
    b570:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    b574:	f8c3 c010 	strlt.w	ip, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    b578:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    b57c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    b57e:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    b580:	691d      	ldr	r5, [r3, #16]
    b582:	4298      	cmp	r0, r3
    b584:	bf14      	ite	ne
    b586:	6818      	ldrne	r0, [r3, #0]
    b588:	2000      	moveq	r0, #0
    b58a:	b9d5      	cbnz	r5, b5c2 <_nano_sys_clock_tick_announce+0xf2>
	node->prev->next = node->next;
    b58c:	e9d3 5900 	ldrd	r5, r9, [r3]
    b590:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    b594:	681d      	ldr	r5, [r3, #0]
    b596:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    b59a:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    b59c:	e9c3 5600 	strd	r5, r6, [r3]
	list->head->prev = node;
    b5a0:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    b5a2:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    b5a4:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    b5a6:	f8c3 e010 	str.w	lr, [r3, #16]
    b5aa:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    b5ae:	f04f 0320 	mov.w	r3, #32
    b5b2:	f3ef 8211 	mrs	r2, BASEPRI
    b5b6:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    b5ba:	4603      	mov	r3, r0
    b5bc:	2800      	cmp	r0, #0
    b5be:	d1d4      	bne.n	b56a <_nano_sys_clock_tick_announce+0x9a>
    b5c0:	e001      	b.n	b5c6 <_nano_sys_clock_tick_announce+0xf6>
		} else if (ticks <= 0) {
    b5c2:	2900      	cmp	r1, #0
    b5c4:	dcf1      	bgt.n	b5aa <_nano_sys_clock_tick_announce+0xda>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b5c6:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    b5ca:	9b00      	ldr	r3, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b5cc:	42b3      	cmp	r3, r6
    b5ce:	d103      	bne.n	b5d8 <_nano_sys_clock_tick_announce+0x108>
	_handling_timeouts = 0;
    b5d0:	2300      	movs	r3, #0
    b5d2:	f8cb 3000 	str.w	r3, [fp]
    b5d6:	e7a1      	b.n	b51c <_nano_sys_clock_tick_announce+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    b5d8:	2b00      	cmp	r3, #0
    b5da:	d0f9      	beq.n	b5d0 <_nano_sys_clock_tick_announce+0x100>
    b5dc:	681e      	ldr	r6, [r3, #0]
    b5de:	9a01      	ldr	r2, [sp, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    b5e0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    b5e4:	4293      	cmp	r3, r2
    b5e6:	bf08      	it	eq
    b5e8:	2600      	moveq	r6, #0
		thread->base.timeout.wait_q = NULL;
    b5ea:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    b5ee:	e9d3 1200 	ldrd	r1, r2, [r3]
    b5f2:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    b5f4:	6819      	ldr	r1, [r3, #0]
	struct k_thread *thread = timeout->thread;
    b5f6:	6898      	ldr	r0, [r3, #8]
    b5f8:	604a      	str	r2, [r1, #4]
	__asm__ volatile(
    b5fa:	f04f 0220 	mov.w	r2, #32
    b5fe:	f3ef 8a11 	mrs	sl, BASEPRI
    b602:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    b606:	f8c3 8010 	str.w	r8, [r3, #16]
	if (thread) {
    b60a:	b308      	cbz	r0, b650 <_nano_sys_clock_tick_announce+0x180>
	if (timeout_obj->wait_q) {
    b60c:	68db      	ldr	r3, [r3, #12]
    b60e:	b153      	cbz	r3, b626 <_nano_sys_clock_tick_announce+0x156>
	node->prev->next = node->next;
    b610:	e9d0 3200 	ldrd	r3, r2, [r0]
    b614:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    b616:	6803      	ldr	r3, [r0, #0]
    b618:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b61a:	7a43      	ldrb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    b61c:	f8c0 901c 	str.w	r9, [r0, #28]
    b620:	f023 0302 	bic.w	r3, r3, #2
    b624:	7243      	strb	r3, [r0, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b626:	7a43      	ldrb	r3, [r0, #9]
    b628:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    b62c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b630:	7242      	strb	r2, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b632:	d104      	bne.n	b63e <_nano_sys_clock_tick_announce+0x16e>
    b634:	6a03      	ldr	r3, [r0, #32]
    b636:	3301      	adds	r3, #1
    b638:	d101      	bne.n	b63e <_nano_sys_clock_tick_announce+0x16e>
		_add_thread_to_ready_q(thread);
    b63a:	f7ff fce7 	bl	b00c <_add_thread_to_ready_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b63e:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    b642:	2e00      	cmp	r6, #0
    b644:	d0c4      	beq.n	b5d0 <_nano_sys_clock_tick_announce+0x100>
	return (node == list->tail) ? NULL : node->next;
    b646:	9b01      	ldr	r3, [sp, #4]
    b648:	42b3      	cmp	r3, r6
    b64a:	d109      	bne.n	b660 <_nano_sys_clock_tick_announce+0x190>
    b64c:	2200      	movs	r2, #0
    b64e:	e008      	b.n	b662 <_nano_sys_clock_tick_announce+0x192>
    b650:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    b654:	695a      	ldr	r2, [r3, #20]
    b656:	2a00      	cmp	r2, #0
    b658:	d0f3      	beq.n	b642 <_nano_sys_clock_tick_announce+0x172>
			timeout->func(timeout);
    b65a:	4618      	mov	r0, r3
    b65c:	4790      	blx	r2
    b65e:	e7f0      	b.n	b642 <_nano_sys_clock_tick_announce+0x172>
    b660:	6832      	ldr	r2, [r6, #0]
    b662:	4633      	mov	r3, r6
    b664:	4616      	mov	r6, r2
    b666:	e7c2      	b.n	b5ee <_nano_sys_clock_tick_announce+0x11e>
    b668:	200016e0 	.word	0x200016e0
    b66c:	2000142c 	.word	0x2000142c
    b670:	200016dc 	.word	0x200016dc
    b674:	20001550 	.word	0x20001550
    b678:	200016d8 	.word	0x200016d8

0000b67c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    b67c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    b67e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b686:	4903      	ldr	r1, [pc, #12]	; (b694 <k_sys_work_q_init+0x18>)
    b688:	4803      	ldr	r0, [pc, #12]	; (b698 <k_sys_work_q_init+0x1c>)
    b68a:	f000 f96b 	bl	b964 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    b68e:	2000      	movs	r0, #0
    b690:	bd08      	pop	{r3, pc}
    b692:	bf00      	nop
    b694:	20003260 	.word	0x20003260
    b698:	200016e8 	.word	0x200016e8

0000b69c <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    b69c:	7a43      	ldrb	r3, [r0, #9]
    b69e:	06da      	lsls	r2, r3, #27
    b6a0:	d104      	bne.n	b6ac <_is_thread_ready+0x10>
    b6a2:	6a00      	ldr	r0, [r0, #32]
    b6a4:	1c43      	adds	r3, r0, #1
    b6a6:	4258      	negs	r0, r3
    b6a8:	4158      	adcs	r0, r3
    b6aa:	4770      	bx	lr
    b6ac:	2000      	movs	r0, #0
}
    b6ae:	4770      	bx	lr

0000b6b0 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b6b0:	6903      	ldr	r3, [r0, #16]
    b6b2:	1c5a      	adds	r2, r3, #1
    b6b4:	d010      	beq.n	b6d8 <_abort_timeout+0x28>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    b6b6:	4909      	ldr	r1, [pc, #36]	; (b6dc <_abort_timeout+0x2c>)
    b6b8:	6802      	ldr	r2, [r0, #0]
    b6ba:	6949      	ldr	r1, [r1, #20]
    b6bc:	4288      	cmp	r0, r1
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    b6be:	bf1e      	ittt	ne
    b6c0:	6911      	ldrne	r1, [r2, #16]
    b6c2:	185b      	addne	r3, r3, r1
    b6c4:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    b6c6:	6843      	ldr	r3, [r0, #4]
    b6c8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b6ca:	6802      	ldr	r2, [r0, #0]
    b6cc:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    b6ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b6d2:	6103      	str	r3, [r0, #16]
	return 0;
    b6d4:	2000      	movs	r0, #0
    b6d6:	4770      	bx	lr
		return _INACTIVE;
    b6d8:	4618      	mov	r0, r3
}
    b6da:	4770      	bx	lr
    b6dc:	2000142c 	.word	0x2000142c

0000b6e0 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    b6e2:	f04f 0320 	mov.w	r3, #32
    b6e6:	f3ef 8611 	mrs	r6, BASEPRI
    b6ea:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    b6ee:	4a18      	ldr	r2, [pc, #96]	; (b750 <schedule_new_thread.part.13+0x70>)
	timeout->thread = thread;
    b6f0:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    b6f2:	230a      	movs	r3, #10
    b6f4:	3109      	adds	r1, #9
    b6f6:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    b6fa:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    b6fc:	6201      	str	r1, [r0, #32]
    b6fe:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    b700:	2300      	movs	r3, #0
    b702:	61c3      	str	r3, [r0, #28]
    b704:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b708:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    b70a:	f100 0510 	add.w	r5, r0, #16
    b70e:	d018      	beq.n	b742 <schedule_new_thread.part.13+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b710:	b1bb      	cbz	r3, b742 <schedule_new_thread.part.13+0x62>
    b712:	f8d2 c014 	ldr.w	ip, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    b716:	6a04      	ldr	r4, [r0, #32]
    b718:	691f      	ldr	r7, [r3, #16]
    b71a:	42bc      	cmp	r4, r7
    b71c:	dc0a      	bgt.n	b734 <schedule_new_thread.part.13+0x54>
		node->prev = insert_point->prev;
    b71e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    b720:	1b3c      	subs	r4, r7, r4
    b722:	611c      	str	r4, [r3, #16]
		node->next = insert_point;
    b724:	e9c0 3204 	strd	r3, r2, [r0, #16]
		insert_point->prev->next = node;
    b728:	685a      	ldr	r2, [r3, #4]
    b72a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    b72c:	605d      	str	r5, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b72e:	f386 8811 	msr	BASEPRI, r6
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    b732:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*delta -= in_q->delta_ticks_from_prev;
    b734:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    b736:	4563      	cmp	r3, ip
    b738:	6204      	str	r4, [r0, #32]
    b73a:	d002      	beq.n	b742 <schedule_new_thread.part.13+0x62>
    b73c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b73e:	2b00      	cmp	r3, #0
    b740:	d1e9      	bne.n	b716 <schedule_new_thread.part.13+0x36>
	node->prev = list->tail;
    b742:	6953      	ldr	r3, [r2, #20]
    b744:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    b746:	6953      	ldr	r3, [r2, #20]
	node->next = list;
    b748:	6101      	str	r1, [r0, #16]
	list->tail->next = node;
    b74a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b74c:	6155      	str	r5, [r2, #20]
    b74e:	e7ee      	b.n	b72e <schedule_new_thread.part.13+0x4e>
    b750:	2000142c 	.word	0x2000142c

0000b754 <k_is_in_isr>:
    b754:	f3ef 8005 	mrs	r0, IPSR
    b758:	280d      	cmp	r0, #13
    b75a:	d807      	bhi.n	b76c <k_is_in_isr+0x18>
    b75c:	b138      	cbz	r0, b76e <k_is_in_isr+0x1a>
    b75e:	4b04      	ldr	r3, [pc, #16]	; (b770 <k_is_in_isr+0x1c>)
    b760:	6858      	ldr	r0, [r3, #4]
    b762:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    b766:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    b76a:	4770      	bx	lr
    b76c:	2001      	movs	r0, #1
}
    b76e:	4770      	bx	lr
    b770:	e000ed00 	.word	0xe000ed00

0000b774 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    b774:	4b02      	ldr	r3, [pc, #8]	; (b780 <_is_thread_essential+0xc>)
    b776:	689b      	ldr	r3, [r3, #8]
    b778:	7a18      	ldrb	r0, [r3, #8]
}
    b77a:	f000 0001 	and.w	r0, r0, #1
    b77e:	4770      	bx	lr
    b780:	2000142c 	.word	0x2000142c

0000b784 <_thread_entry>:
{
    b784:	b508      	push	{r3, lr}
    b786:	4604      	mov	r4, r0
    b788:	4608      	mov	r0, r1
    b78a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    b78c:	461a      	mov	r2, r3
    b78e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    b790:	f7ff fdbe 	bl	b310 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    b794:	f7f5 fb42 	bl	e1c <_impl_k_thread_abort>

0000b798 <_impl_k_thread_start>:
{
    b798:	b510      	push	{r4, lr}
    b79a:	4601      	mov	r1, r0
	__asm__ volatile(
    b79c:	f04f 0320 	mov.w	r3, #32
    b7a0:	f3ef 8411 	mrs	r4, BASEPRI
    b7a4:	f383 8811 	msr	BASEPRI, r3
    b7a8:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    b7aa:	075a      	lsls	r2, r3, #29
    b7ac:	d402      	bmi.n	b7b4 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b7ae:	f384 8811 	msr	BASEPRI, r4
}
    b7b2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b7b4:	f023 0304 	bic.w	r3, r3, #4
    b7b8:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    b7ba:	f7ff ff6f 	bl	b69c <_is_thread_ready>
    b7be:	2800      	cmp	r0, #0
    b7c0:	d0f5      	beq.n	b7ae <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    b7c2:	4608      	mov	r0, r1
    b7c4:	f7ff fc22 	bl	b00c <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    b7c8:	4b07      	ldr	r3, [pc, #28]	; (b7e8 <_impl_k_thread_start+0x50>)
    b7ca:	689b      	ldr	r3, [r3, #8]
    b7cc:	895b      	ldrh	r3, [r3, #10]
    b7ce:	2b7f      	cmp	r3, #127	; 0x7f
    b7d0:	d8ed      	bhi.n	b7ae <_impl_k_thread_start+0x16>
    b7d2:	f7ff fd15 	bl	b200 <__must_switch_threads>
    b7d6:	2800      	cmp	r0, #0
    b7d8:	d0e9      	beq.n	b7ae <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    b7da:	f7ff fdc3 	bl	b364 <_update_time_slice_before_swap>
	return __swap(key);
    b7de:	4620      	mov	r0, r4
}
    b7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7e4:	f7f5 b86a 	b.w	8bc <__swap>
    b7e8:	2000142c 	.word	0x2000142c

0000b7ec <_setup_new_thread>:
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b7ec:	f7f5 ba72 	b.w	cd4 <_new_thread>

0000b7f0 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    b7f0:	b570      	push	{r4, r5, r6, lr}
    b7f2:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b7f4:	e9dd 650e 	ldrd	r6, r5, [sp, #56]	; 0x38
    b7f8:	9604      	str	r6, [sp, #16]
    b7fa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b7fc:	9603      	str	r6, [sp, #12]
    b7fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b800:	9602      	str	r6, [sp, #8]
    b802:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b804:	9601      	str	r6, [sp, #4]
    b806:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b808:	9600      	str	r6, [sp, #0]
{
    b80a:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b80c:	f7f5 fa62 	bl	cd4 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    b810:	1c6b      	adds	r3, r5, #1
    b812:	d003      	beq.n	b81c <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    b814:	b92d      	cbnz	r5, b822 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    b816:	4620      	mov	r0, r4
    b818:	f7ff ffbe 	bl	b798 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    b81c:	4620      	mov	r0, r4
    b81e:	b006      	add	sp, #24
    b820:	bd70      	pop	{r4, r5, r6, pc}
    b822:	4629      	mov	r1, r5
    b824:	4620      	mov	r0, r4
    b826:	f7ff ff5b 	bl	b6e0 <schedule_new_thread.part.13>
    b82a:	e7f7      	b.n	b81c <_impl_k_thread_create+0x2c>

0000b82c <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    b82c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    b82e:	b510      	push	{r4, lr}
    b830:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    b832:	b103      	cbz	r3, b836 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    b834:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    b836:	4620      	mov	r0, r4
    b838:	f7ff ff30 	bl	b69c <_is_thread_ready>
    b83c:	b138      	cbz	r0, b84e <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    b83e:	4620      	mov	r0, r4
    b840:	f7ff fc68 	bl	b114 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    b844:	7a63      	ldrb	r3, [r4, #9]
    b846:	f043 0308 	orr.w	r3, r3, #8
    b84a:	7263      	strb	r3, [r4, #9]
	_k_object_uninit(thread);

	/* Revoke permissions on thread's ID so that it may be recycled */
	_thread_perms_all_clear(thread);
#endif
}
    b84c:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    b84e:	7a63      	ldrb	r3, [r4, #9]
    b850:	079b      	lsls	r3, r3, #30
    b852:	d508      	bpl.n	b866 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    b854:	e9d4 2300 	ldrd	r2, r3, [r4]
    b858:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b85a:	6822      	ldr	r2, [r4, #0]
    b85c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b85e:	7a63      	ldrb	r3, [r4, #9]
    b860:	f023 0302 	bic.w	r3, r3, #2
    b864:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    b866:	6a23      	ldr	r3, [r4, #32]
    b868:	3301      	adds	r3, #1
    b86a:	d0eb      	beq.n	b844 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    b86c:	f104 0010 	add.w	r0, r4, #16
    b870:	f7ff ff1e 	bl	b6b0 <_abort_timeout>
    b874:	e7e6      	b.n	b844 <_k_thread_single_abort+0x18>
	...

0000b878 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    b878:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    b87a:	4f21      	ldr	r7, [pc, #132]	; (b900 <_init_static_threads+0x88>)
    b87c:	4d21      	ldr	r5, [pc, #132]	; (b904 <_init_static_threads+0x8c>)
{
    b87e:	b087      	sub	sp, #28
    b880:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    b882:	42bd      	cmp	r5, r7
    b884:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    b888:	d314      	bcc.n	b8b4 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    b88a:	4b1f      	ldr	r3, [pc, #124]	; (b908 <_init_static_threads+0x90>)
    b88c:	689a      	ldr	r2, [r3, #8]
    b88e:	7ad3      	ldrb	r3, [r2, #11]
    b890:	3b01      	subs	r3, #1
    b892:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    b894:	f04f 0320 	mov.w	r3, #32
    b898:	f3ef 8511 	mrs	r5, BASEPRI
    b89c:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    b8a0:	4c18      	ldr	r4, [pc, #96]	; (b904 <_init_static_threads+0x8c>)
    b8a2:	42b4      	cmp	r4, r6
    b8a4:	d320      	bcc.n	b8e8 <_init_static_threads+0x70>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b8a6:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    b8aa:	b007      	add	sp, #28
    b8ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    b8b0:	f7ff bcd6 	b.w	b260 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b8b4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b8b8:	9304      	str	r3, [sp, #16]
    b8ba:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b8be:	9303      	str	r3, [sp, #12]
    b8c0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b8c4:	9302      	str	r3, [sp, #8]
    b8c6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b8ca:	9301      	str	r3, [sp, #4]
    b8cc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b8d0:	9300      	str	r3, [sp, #0]
    b8d2:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    b8d6:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    b8da:	f7f5 f9fb 	bl	cd4 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b8de:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    b8e2:	64dd      	str	r5, [r3, #76]	; 0x4c
    b8e4:	4625      	mov	r5, r4
    b8e6:	e7cc      	b.n	b882 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    b8e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b8ea:	1c4b      	adds	r3, r1, #1
    b8ec:	d003      	beq.n	b8f6 <_init_static_threads+0x7e>
			schedule_new_thread(thread_data->init_thread,
    b8ee:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    b8f0:	b919      	cbnz	r1, b8fa <_init_static_threads+0x82>
    b8f2:	f7ff ff51 	bl	b798 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b8f6:	342c      	adds	r4, #44	; 0x2c
    b8f8:	e7d3      	b.n	b8a2 <_init_static_threads+0x2a>
    b8fa:	f7ff fef1 	bl	b6e0 <schedule_new_thread.part.13>
    b8fe:	e7fa      	b.n	b8f6 <_init_static_threads+0x7e>
    b900:	200039ac 	.word	0x200039ac
    b904:	200039ac 	.word	0x200039ac
    b908:	2000142c 	.word	0x2000142c

0000b90c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    b90c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    b90e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    b910:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    b912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    b916:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    b918:	72c3      	strb	r3, [r0, #11]
	t->wait_q = NULL;
    b91a:	e9c0 3207 	strd	r3, r2, [r0, #28]
	t->thread = NULL;
    b91e:	6183      	str	r3, [r0, #24]
	t->func = func;
    b920:	6243      	str	r3, [r0, #36]	; 0x24

	/* swap_data does not need to be initialized */

	_init_thread_timeout(thread_base);
}
    b922:	4770      	bx	lr

0000b924 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    b924:	b510      	push	{r4, lr}
    b926:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    b928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b92c:	4620      	mov	r0, r4
    b92e:	f7ff fb30 	bl	af92 <k_queue_get>
		if (!work) {
    b932:	4603      	mov	r3, r0
    b934:	2800      	cmp	r0, #0
    b936:	d0f7      	beq.n	b928 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b938:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    b93a:	6842      	ldr	r2, [r0, #4]
    b93c:	f3bf 8f5b 	dmb	ish
    b940:	e853 1f00 	ldrex	r1, [r3]
    b944:	f021 0c01 	bic.w	ip, r1, #1
    b948:	e843 ce00 	strex	lr, ip, [r3]
    b94c:	f1be 0f00 	cmp.w	lr, #0
    b950:	d1f6      	bne.n	b940 <work_q_main+0x1c>
    b952:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    b956:	07cb      	lsls	r3, r1, #31
    b958:	d500      	bpl.n	b95c <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    b95a:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    b95c:	f7ff fcba 	bl	b2d4 <_impl_k_yield>
    b960:	e7e2      	b.n	b928 <work_q_main+0x4>
	...

0000b964 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    b964:	b5f0      	push	{r4, r5, r6, r7, lr}
    b966:	b087      	sub	sp, #28
    b968:	4604      	mov	r4, r0
    b96a:	461f      	mov	r7, r3
    b96c:	460d      	mov	r5, r1
    b96e:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    b970:	f7ff faba 	bl	aee8 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    b974:	2000      	movs	r0, #0
    b976:	e9cd 0004 	strd	r0, r0, [sp, #16]
    b97a:	e9cd 0702 	strd	r0, r7, [sp, #8]
    b97e:	e9cd 4000 	strd	r4, r0, [sp]
    b982:	4b04      	ldr	r3, [pc, #16]	; (b994 <k_work_q_start+0x30>)
    b984:	4632      	mov	r2, r6
    b986:	4629      	mov	r1, r5
    b988:	f104 0010 	add.w	r0, r4, #16
    b98c:	f7ff ff30 	bl	b7f0 <_impl_k_thread_create>
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    b990:	b007      	add	sp, #28
    b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b994:	0000b925 	.word	0x0000b925

0000b998 <sys_dlist_remove>:
	node->prev->next = node->next;
    b998:	e9d0 2300 	ldrd	r2, r3, [r0]
    b99c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b99e:	6802      	ldr	r2, [r0, #0]
    b9a0:	6053      	str	r3, [r2, #4]
}
    b9a2:	4770      	bx	lr

0000b9a4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    b9a4:	b570      	push	{r4, r5, r6, lr}
    b9a6:	2414      	movs	r4, #20
    b9a8:	4615      	mov	r5, r2
    b9aa:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    b9ae:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    b9b0:	2900      	cmp	r1, #0
    b9b2:	da00      	bge.n	b9b6 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    b9b4:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    b9b6:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    b9b8:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    b9ba:	f013 030f 	ands.w	r3, r3, #15
    b9be:	d006      	beq.n	b9ce <clear_event_registrations+0x2a>
    b9c0:	2b02      	cmp	r3, #2
    b9c2:	d901      	bls.n	b9c8 <clear_event_registrations+0x24>
    b9c4:	2b04      	cmp	r3, #4
    b9c6:	d102      	bne.n	b9ce <clear_event_registrations+0x2a>
		sys_dlist_remove(&event->_node);
    b9c8:	4620      	mov	r0, r4
    b9ca:	f7ff ffe5 	bl	b998 <sys_dlist_remove>
    b9ce:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    b9d2:	f04f 0320 	mov.w	r3, #32
    b9d6:	f3ef 8511 	mrs	r5, BASEPRI
    b9da:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    b9de:	3901      	subs	r1, #1
    b9e0:	3c14      	subs	r4, #20
    b9e2:	e7e5      	b.n	b9b0 <clear_event_registrations+0xc>

0000b9e4 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    b9e6:	2300      	movs	r3, #0
    b9e8:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    b9ea:	6883      	ldr	r3, [r0, #8]
{
    b9ec:	4605      	mov	r5, r0
    b9ee:	460e      	mov	r6, r1
    b9f0:	4617      	mov	r7, r2
	if (!event->poller) {
    b9f2:	2b00      	cmp	r3, #0
    b9f4:	d047      	beq.n	ba86 <signal_poll_event+0xa2>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    b9f6:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    b9f8:	7a4b      	ldrb	r3, [r1, #9]
    b9fa:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    b9fe:	0798      	lsls	r0, r3, #30
    ba00:	724a      	strb	r2, [r1, #9]
    ba02:	d540      	bpl.n	ba86 <signal_poll_event+0xa2>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    ba04:	6a0b      	ldr	r3, [r1, #32]
    ba06:	3302      	adds	r3, #2
    ba08:	d048      	beq.n	ba9c <signal_poll_event+0xb8>
	sys_dlist_remove(&thread->base.k_q_node);
    ba0a:	4608      	mov	r0, r1
    ba0c:	f7ff ffc4 	bl	b998 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ba10:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ba12:	6a0c      	ldr	r4, [r1, #32]
    ba14:	f023 0302 	bic.w	r3, r3, #2
    ba18:	1c62      	adds	r2, r4, #1
    ba1a:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    ba1c:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ba20:	d00c      	beq.n	ba3c <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    ba22:	4b20      	ldr	r3, [pc, #128]	; (baa4 <signal_poll_event+0xc0>)
    ba24:	695b      	ldr	r3, [r3, #20]
    ba26:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    ba28:	bf1f      	itttt	ne
    ba2a:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    ba2c:	6913      	ldrne	r3, [r2, #16]
    ba2e:	191b      	addne	r3, r3, r4
    ba30:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    ba32:	f7ff ffb1 	bl	b998 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    ba36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ba3a:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    ba3c:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    ba3e:	2e00      	cmp	r6, #0
    ba40:	bf0c      	ite	eq
    ba42:	f06f 0303 	mvneq.w	r3, #3
    ba46:	2300      	movne	r3, #0
    ba48:	f010 041f 	ands.w	r4, r0, #31
    ba4c:	664b      	str	r3, [r1, #100]	; 0x64
    ba4e:	d11a      	bne.n	ba86 <signal_poll_event+0xa2>
    ba50:	6a0b      	ldr	r3, [r1, #32]
    ba52:	3301      	adds	r3, #1
    ba54:	d117      	bne.n	ba86 <signal_poll_event+0xa2>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    ba56:	4608      	mov	r0, r1
    ba58:	f7ff fad8 	bl	b00c <_add_thread_to_ready_q>
    ba5c:	f3ef 8305 	mrs	r3, IPSR
    ba60:	2b0d      	cmp	r3, #13
    ba62:	d819      	bhi.n	ba98 <signal_poll_event+0xb4>
    ba64:	b123      	cbz	r3, ba70 <signal_poll_event+0x8c>
    ba66:	4b10      	ldr	r3, [pc, #64]	; (baa8 <signal_poll_event+0xc4>)
    ba68:	6858      	ldr	r0, [r3, #4]
    ba6a:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    ba6e:	d009      	beq.n	ba84 <signal_poll_event+0xa0>
	return _is_preempt(_current) && __must_switch_threads();
    ba70:	4b0c      	ldr	r3, [pc, #48]	; (baa4 <signal_poll_event+0xc0>)
    ba72:	689b      	ldr	r3, [r3, #8]
    ba74:	895b      	ldrh	r3, [r3, #10]
    ba76:	2b7f      	cmp	r3, #127	; 0x7f
    ba78:	d80e      	bhi.n	ba98 <signal_poll_event+0xb4>
    ba7a:	f7ff fbc1 	bl	b200 <__must_switch_threads>
    ba7e:	3000      	adds	r0, #0
    ba80:	bf18      	it	ne
    ba82:	2001      	movne	r0, #1
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    ba84:	6038      	str	r0, [r7, #0]
	event->state |= state;
    ba86:	7b6b      	ldrb	r3, [r5, #13]
    ba88:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
	event->poller = NULL;
    ba8c:	2000      	movs	r0, #0
	event->state |= state;
    ba8e:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    ba92:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    ba94:	736b      	strb	r3, [r5, #13]

ready_event:
	set_event_ready(event, state);
	return 0;
}
    ba96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    ba98:	2000      	movs	r0, #0
    ba9a:	e7f3      	b.n	ba84 <signal_poll_event+0xa0>
		return -EAGAIN;
    ba9c:	f06f 000a 	mvn.w	r0, #10
    baa0:	e7f9      	b.n	ba96 <signal_poll_event+0xb2>
    baa2:	bf00      	nop
    baa4:	2000142c 	.word	0x2000142c
    baa8:	e000ed00 	.word	0xe000ed00

0000baac <add_event>:
{
    baac:	b530      	push	{r4, r5, lr}
    baae:	e9d0 3400 	ldrd	r3, r4, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    bab2:	4298      	cmp	r0, r3
    bab4:	d009      	beq.n	baca <add_event+0x1e>
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    bab6:	b144      	cbz	r4, baca <add_event+0x1e>
    bab8:	68a5      	ldr	r5, [r4, #8]
    baba:	6812      	ldr	r2, [r2, #0]
    babc:	682d      	ldr	r5, [r5, #0]
    babe:	f992 200a 	ldrsb.w	r2, [r2, #10]
    bac2:	f995 500a 	ldrsb.w	r5, [r5, #10]
    bac6:	4295      	cmp	r5, r2
    bac8:	da08      	bge.n	badc <add_event+0x30>
	node->prev = list->tail;
    baca:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    bace:	6843      	ldr	r3, [r0, #4]
    bad0:	6019      	str	r1, [r3, #0]
	list->tail = node;
    bad2:	6041      	str	r1, [r0, #4]
    bad4:	e010      	b.n	baf8 <add_event+0x4c>
	return (node == list->tail) ? NULL : node->next;
    bad6:	42a3      	cmp	r3, r4
    bad8:	d0f7      	beq.n	baca <add_event+0x1e>
    bada:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    badc:	2b00      	cmp	r3, #0
    bade:	d0f4      	beq.n	baca <add_event+0x1e>
		if (_is_t1_higher_prio_than_t2(poller->thread,
    bae0:	689d      	ldr	r5, [r3, #8]
    bae2:	682d      	ldr	r5, [r5, #0]
    bae4:	f995 500a 	ldrsb.w	r5, [r5, #10]
    bae8:	4295      	cmp	r5, r2
    baea:	ddf4      	ble.n	bad6 <add_event+0x2a>
		node->prev = insert_point->prev;
    baec:	685a      	ldr	r2, [r3, #4]
		node->next = insert_point;
    baee:	e9c1 3200 	strd	r3, r2, [r1]
		insert_point->prev->next = node;
    baf2:	685a      	ldr	r2, [r3, #4]
    baf4:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    baf6:	6059      	str	r1, [r3, #4]
}
    baf8:	bd30      	pop	{r4, r5, pc}

0000bafa <k_poll_event_init>:
{
    bafa:	b530      	push	{r4, r5, lr}
	event->type = type;
    bafc:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    bafe:	6103      	str	r3, [r0, #16]
	event->type = type;
    bb00:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    bb04:	7b81      	ldrb	r1, [r0, #14]
    bb06:	f362 0100 	bfi	r1, r2, #0, #1
    bb0a:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    bb0c:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    bb0e:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    bb10:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    bb14:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    bb18:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    bb1a:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    bb1c:	81c2      	strh	r2, [r0, #14]
}
    bb1e:	bd30      	pop	{r4, r5, pc}

0000bb20 <k_poll>:
{
    bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb24:	b087      	sub	sp, #28
    bb26:	4680      	mov	r8, r0
    bb28:	9101      	str	r1, [sp, #4]
    bb2a:	4691      	mov	r9, r2
    bb2c:	f04f 0320 	mov.w	r3, #32
    bb30:	f3ef 8111 	mrs	r1, BASEPRI
    bb34:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    bb38:	4d4a      	ldr	r5, [pc, #296]	; (bc64 <k_poll+0x144>)
    bb3a:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    bb3c:	7a53      	ldrb	r3, [r2, #9]
    bb3e:	f043 0320 	orr.w	r3, r3, #32
    bb42:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bb44:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    bb48:	f10d 0a18 	add.w	sl, sp, #24
    bb4c:	68aa      	ldr	r2, [r5, #8]
    bb4e:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    bb52:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    bb54:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    bb56:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    bb5a:	9b01      	ldr	r3, [sp, #4]
    bb5c:	429f      	cmp	r7, r3
    bb5e:	db15      	blt.n	bb8c <k_poll+0x6c>
	__asm__ volatile(
    bb60:	f04f 0320 	mov.w	r3, #32
    bb64:	f3ef 8711 	mrs	r7, BASEPRI
    bb68:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    bb6c:	68aa      	ldr	r2, [r5, #8]
    bb6e:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    bb70:	f013 0420 	ands.w	r4, r3, #32
    bb74:	d150      	bne.n	bc18 <k_poll+0xf8>
		clear_event_registrations(events, last_registered, key);
    bb76:	463a      	mov	r2, r7
    bb78:	4631      	mov	r1, r6
    bb7a:	4640      	mov	r0, r8
    bb7c:	f7ff ff12 	bl	b9a4 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bb80:	f387 8811 	msr	BASEPRI, r7
}
    bb84:	4620      	mov	r0, r4
    bb86:	b007      	add	sp, #28
    bb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    bb8c:	f04f 0220 	mov.w	r2, #32
    bb90:	f3ef 8b11 	mrs	fp, BASEPRI
    bb94:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    bb98:	7b61      	ldrb	r1, [r4, #13]
    bb9a:	f001 020f 	and.w	r2, r1, #15
    bb9e:	2a02      	cmp	r2, #2
    bba0:	d003      	beq.n	bbaa <k_poll+0x8a>
    bba2:	2a04      	cmp	r2, #4
    bba4:	d004      	beq.n	bbb0 <k_poll+0x90>
    bba6:	2a01      	cmp	r2, #1
    bba8:	d116      	bne.n	bbd8 <k_poll+0xb8>
		if (event->signal->signaled) {
    bbaa:	6920      	ldr	r0, [r4, #16]
    bbac:	6880      	ldr	r0, [r0, #8]
    bbae:	e001      	b.n	bbb4 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    bbb0:	6920      	ldr	r0, [r4, #16]
    bbb2:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    bbb4:	b180      	cbz	r0, bbd8 <k_poll+0xb8>
	event->state |= state;
    bbb6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    bbba:	f362 1107 	bfi	r1, r2, #4, #4
    bbbe:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    bbc0:	68a9      	ldr	r1, [r5, #8]
	event->poller = NULL;
    bbc2:	2300      	movs	r3, #0
    bbc4:	60a3      	str	r3, [r4, #8]
	thread->base.thread_state &= ~states;
    bbc6:	7a4a      	ldrb	r2, [r1, #9]
    bbc8:	f022 0220 	bic.w	r2, r2, #32
    bbcc:	724a      	strb	r2, [r1, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bbce:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    bbd2:	3701      	adds	r7, #1
    bbd4:	3414      	adds	r4, #20
    bbd6:	e7c0      	b.n	bb5a <k_poll+0x3a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    bbd8:	f1b9 0f00 	cmp.w	r9, #0
    bbdc:	d0f7      	beq.n	bbce <k_poll+0xae>
    bbde:	68a9      	ldr	r1, [r5, #8]
    bbe0:	7a49      	ldrb	r1, [r1, #9]
    bbe2:	068b      	lsls	r3, r1, #26
    bbe4:	d5f3      	bpl.n	bbce <k_poll+0xae>
	switch (event->type) {
    bbe6:	2a02      	cmp	r2, #2
    bbe8:	d007      	beq.n	bbfa <k_poll+0xda>
    bbea:	2a04      	cmp	r2, #4
    bbec:	d00f      	beq.n	bc0e <k_poll+0xee>
    bbee:	2a01      	cmp	r2, #1
    bbf0:	d109      	bne.n	bc06 <k_poll+0xe6>
		add_event(&event->signal->poll_events, event, poller);
    bbf2:	4652      	mov	r2, sl
    bbf4:	4621      	mov	r1, r4
    bbf6:	6920      	ldr	r0, [r4, #16]
    bbf8:	e003      	b.n	bc02 <k_poll+0xe2>
		add_event(&event->sem->poll_events, event, poller);
    bbfa:	6920      	ldr	r0, [r4, #16]
    bbfc:	4652      	mov	r2, sl
    bbfe:	4621      	mov	r1, r4
    bc00:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    bc02:	f7ff ff53 	bl	baac <add_event>
	event->poller = poller;
    bc06:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    bc0a:	3601      	adds	r6, #1
    bc0c:	e7df      	b.n	bbce <k_poll+0xae>
		add_event(&event->queue->poll_events, event, poller);
    bc0e:	6920      	ldr	r0, [r4, #16]
    bc10:	4652      	mov	r2, sl
    bc12:	4621      	mov	r1, r4
    bc14:	3008      	adds	r0, #8
    bc16:	e7f4      	b.n	bc02 <k_poll+0xe2>
    bc18:	f023 0320 	bic.w	r3, r3, #32
    bc1c:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    bc1e:	f1b9 0f00 	cmp.w	r9, #0
    bc22:	d104      	bne.n	bc2e <k_poll+0x10e>
    bc24:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    bc28:	f06f 040a 	mvn.w	r4, #10
    bc2c:	e7aa      	b.n	bb84 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    bc2e:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    bc30:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    bc32:	e9cd 0004 	strd	r0, r0, [sp, #16]
	_pend_current_thread(&wait_q, timeout);
    bc36:	f7ff fad3 	bl	b1e0 <_pend_current_thread>
	_update_time_slice_before_swap();
    bc3a:	f7ff fb93 	bl	b364 <_update_time_slice_before_swap>
	return __swap(key);
    bc3e:	4638      	mov	r0, r7
    bc40:	f7f4 fe3c 	bl	8bc <__swap>
    bc44:	4604      	mov	r4, r0
	__asm__ volatile(
    bc46:	f04f 0320 	mov.w	r3, #32
    bc4a:	f3ef 8511 	mrs	r5, BASEPRI
    bc4e:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    bc52:	462a      	mov	r2, r5
    bc54:	4631      	mov	r1, r6
    bc56:	4640      	mov	r0, r8
    bc58:	f7ff fea4 	bl	b9a4 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    bc5c:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    bc60:	e790      	b.n	bb84 <k_poll+0x64>
    bc62:	bf00      	nop
    bc64:	2000142c 	.word	0x2000142c

0000bc68 <_handle_obj_poll_events>:

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    bc68:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    bc6a:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    bc6c:	42a0      	cmp	r0, r4
    bc6e:	d102      	bne.n	bc76 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    bc70:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    bc72:	b002      	add	sp, #8
    bc74:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    bc76:	4620      	mov	r0, r4
    bc78:	f7ff fe8e 	bl	b998 <sys_dlist_remove>
	if (!poll_event) {
    bc7c:	2c00      	cmp	r4, #0
    bc7e:	d0f7      	beq.n	bc70 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    bc80:	aa01      	add	r2, sp, #4
    bc82:	f7ff feaf 	bl	b9e4 <signal_poll_event>
	return must_reschedule;
    bc86:	9801      	ldr	r0, [sp, #4]
    bc88:	e7f3      	b.n	bc72 <_handle_obj_poll_events+0xa>

0000bc8a <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    bc8a:	4770      	bx	lr
