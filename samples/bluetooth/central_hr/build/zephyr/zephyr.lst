
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20007868 	.word	0x20007868

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	000012b1 	.word	0x000012b1
       8:	00001301 	.word	0x00001301
       c:	00001149 	.word	0x00001149
      10:	00001149 	.word	0x00001149
      14:	00001149 	.word	0x00001149
      18:	00001149 	.word	0x00001149
      1c:	00001149 	.word	0x00001149
      20:	00001149 	.word	0x00001149
      24:	00001149 	.word	0x00001149
      28:	00001149 	.word	0x00001149
      2c:	00000d3d 	.word	0x00000d3d
      30:	00001149 	.word	0x00001149
      34:	00001149 	.word	0x00001149
      38:	00000cf9 	.word	0x00000cf9
      3c:	00001149 	.word	0x00001149

00000040 <_irq_vector_table>:
      40:	00001275 00014ec3 00001275 00001275     u....N..u...u...
      50:	00001275 00001275 00001275 00001275     u...u...u...u...
      60:	00001275 00001275 00001275 00001275     u...u...u...u...
      70:	00001275 00001275 00001275 00001275     u...u...u...u...
      80:	00001275 00001275 00001275 00001275     u...u...u...u...
      90:	00001275 00001275 00001275 00001275     u...u...u...u...
      a0:	00001275 00001275 00001275 00001275     u...u...u...u...
      b0:	00001275 00001275 00001275 00001275     u...u...u...u...
      c0:	00001275 00001275 00001275 00001275     u...u...u...u...
      d0:	00001275 00001275 00001275 00001275     u...u...u...u...
      e0:	00001275 00001275 00001275 00001275     u...u...u...u...
      f0:	00001275 00001275                       u...u...

000000f8 <_sw_isr_table>:
      f8:	00000000 00001eed 00000000 000010c1     ................
     108:	00000000 000010c1 00000000 000010c1     ................
     118:	00000000 000010c1 00000000 000010c1     ................
     128:	20008ab4 000020d1 00000000 000010c1     ... . ..........
     138:	00000000 000010c1 00000000 000010c1     ................
     148:	00000000 000010c1 00000000 00014e89     .............N..
     158:	00000000 000010c1 20008a90 00002499     ........... .$..
     168:	00000000 000010c1 00000000 000010c1     ................
     178:	00000000 000010c1 00000000 000025d9     .............%..
     188:	00000000 000010c1 00000000 000010c1     ................
     198:	00000000 000010c1 00000000 000010c1     ................
     1a8:	00000000 000010c1 00000000 000010c1     ................
     1b8:	00000000 00014ebd 00000000 000010c1     .....N..........
     1c8:	00000000 000010c1 00000000 000010c1     ................
     1d8:	00000000 000010c1 00000000 000010c1     ................
     1e8:	00000000 000010c1 00000000 000010c1     ................
     1f8:	00000000 000010c1 00000000 000010c1     ................
     208:	00000000 000010c1 00000000 000010c1     ................
     218:	00000000 000010c1 00000000 000010c1     ................
     228:	00000000 000010c1 00000000 000010c1     ................
     238:	00000000 000010c1 00000000 000010c1     ................
     248:	00000000 000010c1 00000000 000010c1     ................
     258:	00000000 000010c1 00000000 000010c1     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_BT_RX_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_BT_RX_STACK_SIZE+0x190>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_BT_RX_STACK_SIZE+0x194>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     542:	d012      	beq.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     544:	b156      	cbz	r6, 55c <CONFIG_BT_RX_STACK_SIZE+0x15c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     5a0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     5a2:	4603      	mov	r3, r0
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	b90a      	cbnz	r2, 5ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     5aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
     5ac:	4770      	bx	lr
		*d = *s;
     5ae:	f803 2b01 	strb.w	r2, [r3], #1
     5b2:	e7f7      	b.n	5a4 <strcpy+0x4>

000005b4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
     5b4:	4602      	mov	r2, r0
	size_t n = 0;

	while (*s != '\0') {
     5b6:	4603      	mov	r3, r0
     5b8:	1a98      	subs	r0, r3, r2
     5ba:	f813 1b01 	ldrb.w	r1, [r3], #1
     5be:	2900      	cmp	r1, #0
     5c0:	d1fa      	bne.n	5b8 <strlen+0x4>
		s++;
		n++;
	}

	return n;
}
     5c2:	4770      	bx	lr

000005c4 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5c4:	3801      	subs	r0, #1
     5c6:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5c8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5d0:	4293      	cmp	r3, r2
     5d2:	d102      	bne.n	5da <strcmp+0x16>
     5d4:	2b00      	cmp	r3, #0
     5d6:	d1f7      	bne.n	5c8 <strcmp+0x4>
     5d8:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5da:	1a98      	subs	r0, r3, r2
     5dc:	4770      	bx	lr

000005de <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5de:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5e0:	b182      	cbz	r2, 604 <CONFIG_BT_CTLR_COMPANY_ID+0x13>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5e2:	3a01      	subs	r2, #1
     5e4:	460c      	mov	r4, r1
     5e6:	4603      	mov	r3, r0
     5e8:	d103      	bne.n	5f2 <CONFIG_BT_CTLR_COMPANY_ID+0x1>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5ea:	781a      	ldrb	r2, [r3, #0]
     5ec:	7820      	ldrb	r0, [r4, #0]
     5ee:	1a10      	subs	r0, r2, r0
     5f0:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     5f2:	781e      	ldrb	r6, [r3, #0]
     5f4:	7825      	ldrb	r5, [r4, #0]
     5f6:	42ae      	cmp	r6, r5
     5f8:	f100 0001 	add.w	r0, r0, #1
     5fc:	f101 0101 	add.w	r1, r1, #1
     600:	d0ef      	beq.n	5e2 <memcmp+0x4>
     602:	e7f2      	b.n	5ea <memcmp+0xc>
		return 0;
     604:	4610      	mov	r0, r2
}
     606:	bd70      	pop	{r4, r5, r6, pc}

00000608 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     608:	ea81 0300 	eor.w	r3, r1, r0
     60c:	f013 0f03 	tst.w	r3, #3
{
     610:	b570      	push	{r4, r5, r6, lr}
     612:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     614:	d00b      	beq.n	62e <memcpy+0x26>
     616:	3b01      	subs	r3, #1
     618:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     61a:	4291      	cmp	r1, r2
     61c:	d11b      	bne.n	656 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     61e:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     620:	2a00      	cmp	r2, #0
     622:	d0fc      	beq.n	61e <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     624:	f811 4b01 	ldrb.w	r4, [r1], #1
     628:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     62c:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     62e:	079c      	lsls	r4, r3, #30
     630:	d1f6      	bne.n	620 <memcpy+0x18>
     632:	1f1e      	subs	r6, r3, #4
     634:	460d      	mov	r5, r1
     636:	1b54      	subs	r4, r2, r5
     638:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     63a:	2c03      	cmp	r4, #3
     63c:	d806      	bhi.n	64c <memcpy+0x44>
     63e:	f022 0403 	bic.w	r4, r2, #3
     642:	4421      	add	r1, r4
     644:	4423      	add	r3, r4
     646:	f002 0203 	and.w	r2, r2, #3
     64a:	e7e4      	b.n	616 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     64c:	f855 4b04 	ldr.w	r4, [r5], #4
     650:	f846 4f04 	str.w	r4, [r6, #4]!
     654:	e7ef      	b.n	636 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     656:	f811 4b01 	ldrb.w	r4, [r1], #1
     65a:	f803 4f01 	strb.w	r4, [r3, #1]!
     65e:	e7dc      	b.n	61a <memcpy+0x12>

00000660 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     660:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     662:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     664:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     666:	079c      	lsls	r4, r3, #30
     668:	d111      	bne.n	68e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     66a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     66e:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     672:	461e      	mov	r6, r3
     674:	1b95      	subs	r5, r2, r6
     676:	441d      	add	r5, r3
     678:	2d03      	cmp	r5, #3
     67a:	d80e      	bhi.n	69a <memset+0x3a>
     67c:	f022 0403 	bic.w	r4, r2, #3
     680:	4423      	add	r3, r4
     682:	f002 0203 	and.w	r2, r2, #3
     686:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     688:	4293      	cmp	r3, r2
     68a:	d109      	bne.n	6a0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     68c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     68e:	2a00      	cmp	r2, #0
     690:	d0fc      	beq.n	68c <memset+0x2c>
		*(d_byte++) = c_byte;
     692:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     696:	3a01      	subs	r2, #1
     698:	e7e5      	b.n	666 <memset+0x6>
		*(d_word++) = c_word;
     69a:	f846 4b04 	str.w	r4, [r6], #4
     69e:	e7e9      	b.n	674 <memset+0x14>
		*(d_byte++) = c_byte;
     6a0:	f803 1b01 	strb.w	r1, [r3], #1
     6a4:	e7f0      	b.n	688 <memset+0x28>
	...

000006a8 <notify_func>:
static struct bt_gatt_subscribe_params subscribe_params;

static u8_t notify_func(struct bt_conn *conn,
			   struct bt_gatt_subscribe_params *params,
			   const void *data, u16_t length)
{
     6a8:	b538      	push	{r3, r4, r5, lr}
     6aa:	460d      	mov	r5, r1
	static int count = 0;
	if (!data) {
     6ac:	4614      	mov	r4, r2
     6ae:	b92a      	cbnz	r2, 6bc <notify_func+0x14>
		printk("[UNSUBSCRIBED]\n");
     6b0:	4809      	ldr	r0, [pc, #36]	; (6d8 <notify_func+0x30>)
     6b2:	f001 f815 	bl	16e0 <printk>
		params->value_handle = 0;
     6b6:	84ac      	strh	r4, [r5, #36]	; 0x24
		return BT_GATT_ITER_STOP;
     6b8:	4620      	mov	r0, r4
     6ba:	bd38      	pop	{r3, r4, r5, pc}
	}

	printk("[NOTIFICATION] data %p length %u\n", data, length);
     6bc:	461a      	mov	r2, r3
     6be:	4621      	mov	r1, r4
     6c0:	4806      	ldr	r0, [pc, #24]	; (6dc <notify_func+0x34>)
     6c2:	f001 f80d 	bl	16e0 <printk>
	count ++;
     6c6:	4b06      	ldr	r3, [pc, #24]	; (6e0 <notify_func+0x38>)
	printk("count %d  \n", count);
     6c8:	4806      	ldr	r0, [pc, #24]	; (6e4 <notify_func+0x3c>)
	count ++;
     6ca:	6819      	ldr	r1, [r3, #0]
     6cc:	3101      	adds	r1, #1
     6ce:	6019      	str	r1, [r3, #0]
	printk("count %d  \n", count);
     6d0:	f001 f806 	bl	16e0 <printk>

	return BT_GATT_ITER_CONTINUE;
     6d4:	2001      	movs	r0, #1
}
     6d6:	bd38      	pop	{r3, r4, r5, pc}
     6d8:	00018650 	.word	0x00018650
     6dc:	00018660 	.word	0x00018660
     6e0:	20000000 	.word	0x20000000
     6e4:	00018682 	.word	0x00018682

000006e8 <exchange_func>:
static struct bt_gatt_exchange_params exchange_params;

static void exchange_func(struct bt_conn *conn, u8_t err, struct bt_gatt_exchange_params *params)
{

	printk("Exchange %s\n", err == 0 ? "successful" : "failed");
     6e8:	4b04      	ldr	r3, [pc, #16]	; (6fc <exchange_func+0x14>)
     6ea:	4a05      	ldr	r2, [pc, #20]	; (700 <exchange_func+0x18>)
     6ec:	4805      	ldr	r0, [pc, #20]	; (704 <exchange_func+0x1c>)
     6ee:	2900      	cmp	r1, #0
     6f0:	bf0c      	ite	eq
     6f2:	4611      	moveq	r1, r2
     6f4:	4619      	movne	r1, r3
     6f6:	f000 bff3 	b.w	16e0 <printk>
     6fa:	bf00      	nop
     6fc:	000185e6 	.word	0x000185e6
     700:	000185db 	.word	0x000185db
     704:	000185ed 	.word	0x000185ed

00000708 <discover_func>:
{
     708:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
     70c:	4607      	mov	r7, r0
     70e:	4614      	mov	r4, r2
	if (!attr) {
     710:	460d      	mov	r5, r1
     712:	b959      	cbnz	r1, 72c <discover_func+0x24>
		printk("Discover complete\n");
     714:	4839      	ldr	r0, [pc, #228]	; (7fc <discover_func+0xf4>)
     716:	f000 ffe3 	bl	16e0 <printk>
		memset(params, 0, sizeof(*params));
     71a:	222c      	movs	r2, #44	; 0x2c
     71c:	4629      	mov	r1, r5
     71e:	4620      	mov	r0, r4
     720:	f7ff ff9e 	bl	660 <memset>
}
     724:	2000      	movs	r0, #0
     726:	b004      	add	sp, #16
     728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_HRS)) {
     72c:	4c34      	ldr	r4, [pc, #208]	; (800 <CONFIG_ISR_STACK_SIZE>)
	printk("[ATTRIBUTE] handle %u\n", attr->handle);
     72e:	8a09      	ldrh	r1, [r1, #16]
     730:	4834      	ldr	r0, [pc, #208]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     732:	f000 ffd5 	bl	16e0 <printk>
	if (!bt_uuid_cmp(discover_params.uuid, BT_UUID_HRS)) {
     736:	2600      	movs	r6, #0
     738:	f641 030d 	movw	r3, #6157	; 0x180d
     73c:	4669      	mov	r1, sp
     73e:	69a0      	ldr	r0, [r4, #24]
     740:	f8ad 3002 	strh.w	r3, [sp, #2]
     744:	f88d 6000 	strb.w	r6, [sp]
     748:	f002 f8da 	bl	2900 <bt_uuid_cmp>
     74c:	f642 2337 	movw	r3, #10807	; 0x2a37
     750:	b9e0      	cbnz	r0, 78c <discover_func+0x84>
		memcpy(&uuid, BT_UUID_HRS_MEASUREMENT, sizeof(uuid));
     752:	4e2d      	ldr	r6, [pc, #180]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     754:	f88d 0004 	strb.w	r0, [sp, #4]
     758:	2204      	movs	r2, #4
     75a:	eb0d 0102 	add.w	r1, sp, r2
     75e:	4630      	mov	r0, r6
     760:	f8ad 3006 	strh.w	r3, [sp, #6]
     764:	f7ff ff50 	bl	608 <memcpy>
		discover_params.start_handle = attr->handle + 1;
     768:	8a2b      	ldrh	r3, [r5, #16]
		discover_params.uuid = &uuid.uuid;
     76a:	61a6      	str	r6, [r4, #24]
		discover_params.start_handle = attr->handle + 1;
     76c:	3301      	adds	r3, #1
     76e:	8423      	strh	r3, [r4, #32]
		discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
     770:	2303      	movs	r3, #3
     772:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		err = bt_gatt_discover(conn, &discover_params);
     776:	4621      	mov	r1, r4
     778:	4638      	mov	r0, r7
     77a:	f007 fc63 	bl	8044 <bt_gatt_discover>
		if (err) {
     77e:	4601      	mov	r1, r0
     780:	2800      	cmp	r0, #0
     782:	d0cf      	beq.n	724 <discover_func+0x1c>
			printk("Discover failed (err %d)\n", err);
     784:	4821      	ldr	r0, [pc, #132]	; (80c <CONFIG_ISR_STACK_SIZE+0xc>)
			printk("Subscribe failed (err %d)\n", err);
     786:	f000 ffab 	bl	16e0 <printk>
     78a:	e7cb      	b.n	724 <discover_func+0x1c>
	} else if (!bt_uuid_cmp(discover_params.uuid,
     78c:	a902      	add	r1, sp, #8
     78e:	69a0      	ldr	r0, [r4, #24]
				BT_UUID_HRS_MEASUREMENT)) {
     790:	f88d 6008 	strb.w	r6, [sp, #8]
     794:	f8ad 300a 	strh.w	r3, [sp, #10]
	} else if (!bt_uuid_cmp(discover_params.uuid,
     798:	f002 f8b2 	bl	2900 <bt_uuid_cmp>
     79c:	4e1c      	ldr	r6, [pc, #112]	; (810 <CONFIG_ISR_STACK_SIZE+0x10>)
     79e:	b9b8      	cbnz	r0, 7d0 <discover_func+0xc8>
		memcpy(&uuid, BT_UUID_GATT_CCC, sizeof(uuid));
     7a0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 808 <CONFIG_ISR_STACK_SIZE+0x8>
     7a4:	f88d 000c 	strb.w	r0, [sp, #12]
     7a8:	f642 1302 	movw	r3, #10498	; 0x2902
     7ac:	2204      	movs	r2, #4
     7ae:	a903      	add	r1, sp, #12
     7b0:	4640      	mov	r0, r8
     7b2:	f8ad 300e 	strh.w	r3, [sp, #14]
     7b6:	f7ff ff27 	bl	608 <memcpy>
		discover_params.start_handle = attr->handle + 2;
     7ba:	8a2b      	ldrh	r3, [r5, #16]
		discover_params.uuid = &uuid.uuid;
     7bc:	f8c4 8018 	str.w	r8, [r4, #24]
		discover_params.start_handle = attr->handle + 2;
     7c0:	1c9a      	adds	r2, r3, #2
     7c2:	8422      	strh	r2, [r4, #32]
		subscribe_params.value_handle = attr->handle + 1;
     7c4:	3301      	adds	r3, #1
		discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
     7c6:	2204      	movs	r2, #4
     7c8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		subscribe_params.value_handle = attr->handle + 1;
     7cc:	84b3      	strh	r3, [r6, #36]	; 0x24
     7ce:	e7d2      	b.n	776 <discover_func+0x6e>
		subscribe_params.notify = notify_func;
     7d0:	4b10      	ldr	r3, [pc, #64]	; (814 <CONFIG_ISR_STACK_SIZE+0x14>)
     7d2:	6233      	str	r3, [r6, #32]
		subscribe_params.value = BT_GATT_CCC_NOTIFY;
     7d4:	2301      	movs	r3, #1
     7d6:	8533      	strh	r3, [r6, #40]	; 0x28
		err = bt_gatt_subscribe(conn, &subscribe_params);
     7d8:	4631      	mov	r1, r6
		subscribe_params.ccc_handle = attr->handle;
     7da:	8a2b      	ldrh	r3, [r5, #16]
     7dc:	84f3      	strh	r3, [r6, #38]	; 0x26
		err = bt_gatt_subscribe(conn, &subscribe_params);
     7de:	4638      	mov	r0, r7
     7e0:	f007 ff42 	bl	8668 <bt_gatt_subscribe>
		if (err && err != -EALREADY) {
     7e4:	4601      	mov	r1, r0
     7e6:	b120      	cbz	r0, 7f2 <discover_func+0xea>
     7e8:	f110 0f45 	cmn.w	r0, #69	; 0x45
     7ec:	d001      	beq.n	7f2 <discover_func+0xea>
			printk("Subscribe failed (err %d)\n", err);
     7ee:	480a      	ldr	r0, [pc, #40]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
     7f0:	e7c9      	b.n	786 <discover_func+0x7e>
			printk("[SUBSCRIBED]\n");
     7f2:	480a      	ldr	r0, [pc, #40]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     7f4:	f000 ff74 	bl	16e0 <printk>
     7f8:	e794      	b.n	724 <discover_func+0x1c>
     7fa:	bf00      	nop
     7fc:	0001856e 	.word	0x0001856e
     800:	20000008 	.word	0x20000008
     804:	00018581 	.word	0x00018581
     808:	20000080 	.word	0x20000080
     80c:	00018598 	.word	0x00018598
     810:	20000050 	.word	0x20000050
     814:	000006a9 	.word	0x000006a9
     818:	000185b2 	.word	0x000185b2
     81c:	000185cd 	.word	0x000185cd

00000820 <bt_addr_le_to_str.constprop.1>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     820:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     822:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
     824:	b08a      	sub	sp, #40	; 0x28
     826:	4604      	mov	r4, r0
     828:	460e      	mov	r6, r1
     82a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
     82c:	2b03      	cmp	r3, #3
     82e:	d820      	bhi.n	872 <bt_addr_le_to_str.constprop.1+0x52>
     830:	e8df f003 	tbb	[pc, r3]
     834:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     838:	4911      	ldr	r1, [pc, #68]	; (880 <bt_addr_le_to_str.constprop.1+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     83a:	4628      	mov	r0, r5
     83c:	f7ff feb0 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     840:	7862      	ldrb	r2, [r4, #1]
     842:	9204      	str	r2, [sp, #16]
     844:	78a2      	ldrb	r2, [r4, #2]
     846:	9203      	str	r2, [sp, #12]
     848:	78e2      	ldrb	r2, [r4, #3]
     84a:	9202      	str	r2, [sp, #8]
     84c:	7922      	ldrb	r2, [r4, #4]
     84e:	9201      	str	r2, [sp, #4]
     850:	7962      	ldrb	r2, [r4, #5]
     852:	9200      	str	r2, [sp, #0]
     854:	79a3      	ldrb	r3, [r4, #6]
     856:	9505      	str	r5, [sp, #20]
     858:	4a0a      	ldr	r2, [pc, #40]	; (884 <bt_addr_le_to_str.constprop.1+0x64>)
     85a:	211b      	movs	r1, #27
     85c:	4630      	mov	r0, r6
     85e:	f000 ff4d 	bl	16fc <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
     862:	b00a      	add	sp, #40	; 0x28
     864:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     866:	4908      	ldr	r1, [pc, #32]	; (888 <bt_addr_le_to_str.constprop.1+0x68>)
     868:	e7e7      	b.n	83a <bt_addr_le_to_str.constprop.1+0x1a>
		strcpy(type, "public id");
     86a:	4908      	ldr	r1, [pc, #32]	; (88c <bt_addr_le_to_str.constprop.1+0x6c>)
     86c:	e7e5      	b.n	83a <bt_addr_le_to_str.constprop.1+0x1a>
		strcpy(type, "random id");
     86e:	4908      	ldr	r1, [pc, #32]	; (890 <bt_addr_le_to_str.constprop.1+0x70>)
     870:	e7e3      	b.n	83a <bt_addr_le_to_str.constprop.1+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     872:	4a08      	ldr	r2, [pc, #32]	; (894 <bt_addr_le_to_str.constprop.1+0x74>)
     874:	210a      	movs	r1, #10
     876:	4628      	mov	r0, r5
     878:	f000 ff40 	bl	16fc <snprintk>
     87c:	e7e0      	b.n	840 <bt_addr_le_to_str.constprop.1+0x20>
     87e:	bf00      	nop
     880:	000183e7 	.word	0x000183e7
     884:	00018410 	.word	0x00018410
     888:	000183ee 	.word	0x000183ee
     88c:	000183f5 	.word	0x000183f5
     890:	000183ff 	.word	0x000183ff
     894:	00018409 	.word	0x00018409

00000898 <connected>:
	return err;
}


static void connected(struct bt_conn *conn, u8_t conn_err)
{
     898:	b5f0      	push	{r4, r5, r6, r7, lr}
     89a:	b089      	sub	sp, #36	; 0x24
     89c:	460c      	mov	r4, r1
     89e:	4606      	mov	r6, r0
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     8a0:	f004 ffcf 	bl	5842 <bt_conn_get_dst>
     8a4:	a901      	add	r1, sp, #4
     8a6:	f7ff ffbb 	bl	820 <bt_addr_le_to_str.constprop.1>

	if (conn_err) {
     8aa:	b134      	cbz	r4, 8ba <connected+0x22>
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
     8ac:	4622      	mov	r2, r4
     8ae:	a901      	add	r1, sp, #4
     8b0:	481f      	ldr	r0, [pc, #124]	; (930 <connected+0x98>)
     8b2:	f000 ff15 	bl	16e0 <printk>
			return;
		}
	}

	exchange_mtu();
}
     8b6:	b009      	add	sp, #36	; 0x24
     8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn == default_conn) {
     8ba:	4d1e      	ldr	r5, [pc, #120]	; (934 <connected+0x9c>)
	printk("Connected: %s\n", addr);
     8bc:	481e      	ldr	r0, [pc, #120]	; (938 <connected+0xa0>)
     8be:	a901      	add	r1, sp, #4
     8c0:	f000 ff0e 	bl	16e0 <printk>
	if (conn == default_conn) {
     8c4:	682b      	ldr	r3, [r5, #0]
     8c6:	429e      	cmp	r6, r3
     8c8:	462f      	mov	r7, r5
     8ca:	d11f      	bne.n	90c <connected+0x74>
		memcpy(&uuid, BT_UUID_HRS, sizeof(uuid));
     8cc:	4e1b      	ldr	r6, [pc, #108]	; (93c <connected+0xa4>)
     8ce:	f88d 4000 	strb.w	r4, [sp]
     8d2:	f641 030d 	movw	r3, #6157	; 0x180d
     8d6:	2204      	movs	r2, #4
     8d8:	4669      	mov	r1, sp
     8da:	4630      	mov	r0, r6
     8dc:	f8ad 3002 	strh.w	r3, [sp, #2]
     8e0:	f7ff fe92 	bl	608 <memcpy>
		discover_params.uuid = &uuid.uuid;
     8e4:	4916      	ldr	r1, [pc, #88]	; (940 <connected+0xa8>)
		discover_params.func = discover_func;
     8e6:	4b17      	ldr	r3, [pc, #92]	; (944 <connected+0xac>)
     8e8:	61cb      	str	r3, [r1, #28]
		discover_params.start_handle = 0x0001;
     8ea:	2301      	movs	r3, #1
     8ec:	840b      	strh	r3, [r1, #32]
		err = bt_gatt_discover(default_conn, &discover_params);
     8ee:	6828      	ldr	r0, [r5, #0]
		discover_params.uuid = &uuid.uuid;
     8f0:	618e      	str	r6, [r1, #24]
		discover_params.end_handle = 0xffff;
     8f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
     8f6:	84cb      	strh	r3, [r1, #38]	; 0x26
		discover_params.type = BT_GATT_DISCOVER_PRIMARY;
     8f8:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
		err = bt_gatt_discover(default_conn, &discover_params);
     8fc:	f007 fba2 	bl	8044 <bt_gatt_discover>
		if (err) {
     900:	4601      	mov	r1, r0
     902:	b118      	cbz	r0, 90c <connected+0x74>
			printk("Discover failed(err %d)\n", err);
     904:	4810      	ldr	r0, [pc, #64]	; (948 <connected+0xb0>)
		printk("Exchange failed (err %d)\n", err);
     906:	f000 feeb 	bl	16e0 <printk>
     90a:	e7d4      	b.n	8b6 <connected+0x1e>
	if (!default_conn) {
     90c:	6838      	ldr	r0, [r7, #0]
     90e:	b918      	cbnz	r0, 918 <connected+0x80>
		printk("Not connected\n");
     910:	480e      	ldr	r0, [pc, #56]	; (94c <connected+0xb4>)
		printk("Exchange pending\n");
     912:	f000 fee5 	bl	16e0 <printk>
     916:	e7ce      	b.n	8b6 <connected+0x1e>
	exchange_params.func = exchange_func;
     918:	490d      	ldr	r1, [pc, #52]	; (950 <connected+0xb8>)
     91a:	4b0e      	ldr	r3, [pc, #56]	; (954 <connected+0xbc>)
     91c:	618b      	str	r3, [r1, #24]
	err = bt_gatt_exchange_mtu(default_conn, &exchange_params);
     91e:	f007 fb6b 	bl	7ff8 <bt_gatt_exchange_mtu>
	if (err) {
     922:	4601      	mov	r1, r0
     924:	b108      	cbz	r0, 92a <connected+0x92>
		printk("Exchange failed (err %d)\n", err);
     926:	480c      	ldr	r0, [pc, #48]	; (958 <connected+0xc0>)
     928:	e7ed      	b.n	906 <connected+0x6e>
		printk("Exchange pending\n");
     92a:	480c      	ldr	r0, [pc, #48]	; (95c <connected+0xc4>)
     92c:	e7f1      	b.n	912 <connected+0x7a>
     92e:	bf00      	nop
     930:	00018433 	.word	0x00018433
     934:	20000004 	.word	0x20000004
     938:	00018451 	.word	0x00018451
     93c:	20000080 	.word	0x20000080
     940:	20000008 	.word	0x20000008
     944:	00000709 	.word	0x00000709
     948:	00018460 	.word	0x00018460
     94c:	00018479 	.word	0x00018479
     950:	20000034 	.word	0x20000034
     954:	000006e9 	.word	0x000006e9
     958:	00018488 	.word	0x00018488
     95c:	000184a2 	.word	0x000184a2

00000960 <disconnected>:
		ad_parse(ad, eir_found, (void *)addr);
	}
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
     960:	b530      	push	{r4, r5, lr}
     962:	b08b      	sub	sp, #44	; 0x2c
     964:	460c      	mov	r4, r1
     966:	4605      	mov	r5, r0
	char addr[BT_ADDR_LE_STR_LEN];
	int err;

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
     968:	f004 ff6b 	bl	5842 <bt_conn_get_dst>
     96c:	a903      	add	r1, sp, #12
     96e:	f7ff ff57 	bl	820 <bt_addr_le_to_str.constprop.1>

	printk("Disconnected: %s (reason %u)\n", addr, reason);
     972:	4622      	mov	r2, r4

	if (default_conn != conn) {
     974:	4c0e      	ldr	r4, [pc, #56]	; (9b0 <disconnected+0x50>)
	printk("Disconnected: %s (reason %u)\n", addr, reason);
     976:	480f      	ldr	r0, [pc, #60]	; (9b4 <disconnected+0x54>)
     978:	a903      	add	r1, sp, #12
     97a:	f000 feb1 	bl	16e0 <printk>
	if (default_conn != conn) {
     97e:	6823      	ldr	r3, [r4, #0]
     980:	429d      	cmp	r5, r3
     982:	d113      	bne.n	9ac <disconnected+0x4c>
		return;
	}

	bt_conn_unref(default_conn);
     984:	4628      	mov	r0, r5
     986:	f004 ff59 	bl	583c <bt_conn_unref>
	default_conn = NULL;
     98a:	2300      	movs	r3, #0
     98c:	6023      	str	r3, [r4, #0]

	/* This demo doesn't require active scan */
	err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, device_found);
     98e:	4b0a      	ldr	r3, [pc, #40]	; (9b8 <disconnected+0x58>)
     990:	490a      	ldr	r1, [pc, #40]	; (9bc <disconnected+0x5c>)
     992:	6818      	ldr	r0, [r3, #0]
     994:	9001      	str	r0, [sp, #4]
     996:	889b      	ldrh	r3, [r3, #4]
     998:	f8ad 3008 	strh.w	r3, [sp, #8]
     99c:	a801      	add	r0, sp, #4
     99e:	f004 f977 	bl	4c90 <bt_le_scan_start>
	if (err) {
     9a2:	4601      	mov	r1, r0
     9a4:	b110      	cbz	r0, 9ac <disconnected+0x4c>
		printk("Scanning failed to start (err %d)\n", err);
     9a6:	4806      	ldr	r0, [pc, #24]	; (9c0 <disconnected+0x60>)
     9a8:	f000 fe9a 	bl	16e0 <printk>
	}
}
     9ac:	b00b      	add	sp, #44	; 0x2c
     9ae:	bd30      	pop	{r4, r5, pc}
     9b0:	20000004 	.word	0x20000004
     9b4:	0001852d 	.word	0x0001852d
     9b8:	00018358 	.word	0x00018358
     9bc:	000009c5 	.word	0x000009c5
     9c0:	0001854b 	.word	0x0001854b

000009c4 <device_found>:
{
     9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9c8:	461c      	mov	r4, r3
     9ca:	b08f      	sub	sp, #60	; 0x3c
     9cc:	4615      	mov	r5, r2
     9ce:	460e      	mov	r6, r1
	bt_addr_le_to_str(addr, dev, sizeof(dev));
     9d0:	a907      	add	r1, sp, #28
{
     9d2:	4680      	mov	r8, r0
	bt_addr_le_to_str(addr, dev, sizeof(dev));
     9d4:	f7ff ff24 	bl	820 <bt_addr_le_to_str.constprop.1>
	printk("[DEVICE]: %s, AD evt type %u, AD data len %u, RSSI %i\n",
     9d8:	88a3      	ldrh	r3, [r4, #4]
     9da:	9600      	str	r6, [sp, #0]
     9dc:	462a      	mov	r2, r5
     9de:	a907      	add	r1, sp, #28
     9e0:	4832      	ldr	r0, [pc, #200]	; (aac <device_found+0xe8>)
     9e2:	f000 fe7d 	bl	16e0 <printk>
	if (type == BT_LE_ADV_IND || type == BT_LE_ADV_DIRECT_IND) {
     9e6:	2d01      	cmp	r5, #1
     9e8:	d812      	bhi.n	a10 <device_found+0x4c>
			printk("AD malformed\n");
     9ea:	f8df 90c4 	ldr.w	r9, [pc, #196]	; ab0 <device_found+0xec>
				printk("Stop LE scan failed (err %d)\n", err);
     9ee:	f8df a0d0 	ldr.w	sl, [pc, #208]	; ac0 <device_found+0xfc>
	while (ad->len > 1) {
     9f2:	88a3      	ldrh	r3, [r4, #4]
     9f4:	2b01      	cmp	r3, #1
     9f6:	d90b      	bls.n	a10 <device_found+0x4c>
		u8_t len = net_buf_simple_pull_u8(ad);
     9f8:	4620      	mov	r0, r4
     9fa:	f016 f9f7 	bl	16dec <net_buf_simple_pull_u8>
		if (len == 0) {
     9fe:	4605      	mov	r5, r0
     a00:	b130      	cbz	r0, a10 <device_found+0x4c>
		if (len > ad->len) {
     a02:	88a2      	ldrh	r2, [r4, #4]
     a04:	b283      	uxth	r3, r0
     a06:	429a      	cmp	r2, r3
     a08:	d205      	bcs.n	a16 <device_found+0x52>
			printk("AD malformed\n");
     a0a:	4829      	ldr	r0, [pc, #164]	; (ab0 <device_found+0xec>)
     a0c:	f000 fe68 	bl	16e0 <printk>
}
     a10:	b00f      	add	sp, #60	; 0x3c
     a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		type = net_buf_simple_pull_u8(ad);
     a16:	4620      	mov	r0, r4
     a18:	f016 f9e8 	bl	16dec <net_buf_simple_pull_u8>
		if (!func(type, ad->data, len - 1, user_data)) {
     a1c:	3d01      	subs	r5, #1
		type = net_buf_simple_pull_u8(ad);
     a1e:	4606      	mov	r6, r0
		if (!func(type, ad->data, len - 1, user_data)) {
     a20:	b2ef      	uxtb	r7, r5
	printk("[AD]: %u data_len %u\n", type, data_len);
     a22:	4601      	mov	r1, r0
     a24:	463a      	mov	r2, r7
     a26:	4823      	ldr	r0, [pc, #140]	; (ab4 <device_found+0xf0>)
		if (!func(type, ad->data, len - 1, user_data)) {
     a28:	f8d4 b000 	ldr.w	fp, [r4]
	switch (type) {
     a2c:	3e02      	subs	r6, #2
	printk("[AD]: %u data_len %u\n", type, data_len);
     a2e:	f000 fe57 	bl	16e0 <printk>
	switch (type) {
     a32:	2e01      	cmp	r6, #1
     a34:	d805      	bhi.n	a42 <device_found+0x7e>
		if (data_len % sizeof(u16_t) != 0) {
     a36:	f017 0601 	ands.w	r6, r7, #1
     a3a:	d028      	beq.n	a8e <device_found+0xca>
			printk("AD malformed\n");
     a3c:	4648      	mov	r0, r9
     a3e:	f000 fe4f 	bl	16e0 <printk>
		net_buf_simple_pull(ad, len - 1);
     a42:	4629      	mov	r1, r5
     a44:	4620      	mov	r0, r4
     a46:	f016 f9c9 	bl	16ddc <net_buf_simple_pull>
     a4a:	e7d2      	b.n	9f2 <device_found+0x2e>
			memcpy(&u16, &data[i], sizeof(u16));
     a4c:	2202      	movs	r2, #2
     a4e:	eb0b 0106 	add.w	r1, fp, r6
     a52:	f10d 000a 	add.w	r0, sp, #10
     a56:	f7ff fdd7 	bl	608 <memcpy>
			uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
     a5a:	2300      	movs	r3, #0
     a5c:	f88d 3010 	strb.w	r3, [sp, #16]
     a60:	f8bd 200a 	ldrh.w	r2, [sp, #10]
			if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
     a64:	f88d 300c 	strb.w	r3, [sp, #12]
     a68:	a903      	add	r1, sp, #12
     a6a:	f641 030d 	movw	r3, #6157	; 0x180d
     a6e:	a804      	add	r0, sp, #16
			uuid = BT_UUID_DECLARE_16(sys_le16_to_cpu(u16));
     a70:	f8ad 2012 	strh.w	r2, [sp, #18]
			if (bt_uuid_cmp(uuid, BT_UUID_HRS)) {
     a74:	f8ad 300e 	strh.w	r3, [sp, #14]
     a78:	f001 ff42 	bl	2900 <bt_uuid_cmp>
     a7c:	b930      	cbnz	r0, a8c <device_found+0xc8>
			err = bt_le_scan_stop();
     a7e:	f004 f959 	bl	4d34 <bt_le_scan_stop>
			if (err) {
     a82:	4601      	mov	r1, r0
     a84:	b130      	cbz	r0, a94 <device_found+0xd0>
				printk("Stop LE scan failed (err %d)\n", err);
     a86:	4650      	mov	r0, sl
     a88:	f000 fe2a 	bl	16e0 <printk>
		for (i = 0; i < data_len; i += sizeof(u16_t)) {
     a8c:	3602      	adds	r6, #2
     a8e:	42b7      	cmp	r7, r6
     a90:	dcdc      	bgt.n	a4c <device_found+0x88>
     a92:	e7d6      	b.n	a42 <device_found+0x7e>
							 BT_LE_CONN_PARAM_DEFAULT);
     a94:	4a08      	ldr	r2, [pc, #32]	; (ab8 <device_found+0xf4>)
     a96:	6810      	ldr	r0, [r2, #0]
     a98:	6851      	ldr	r1, [r2, #4]
     a9a:	ab05      	add	r3, sp, #20
     a9c:	c303      	stmia	r3!, {r0, r1}
			default_conn = bt_conn_create_le(addr,
     a9e:	a905      	add	r1, sp, #20
     aa0:	4640      	mov	r0, r8
     aa2:	f004 fef1 	bl	5888 <bt_conn_create_le>
     aa6:	4b05      	ldr	r3, [pc, #20]	; (abc <device_found+0xf8>)
     aa8:	6018      	str	r0, [r3, #0]
     aaa:	e7b1      	b.n	a10 <device_found+0x4c>
     aac:	000184b4 	.word	0x000184b4
     ab0:	000184eb 	.word	0x000184eb
     ab4:	000184f9 	.word	0x000184f9
     ab8:	0001835e 	.word	0x0001835e
     abc:	20000004 	.word	0x20000004
     ac0:	0001850f 	.word	0x0001850f

00000ac4 <main>:
	.connected = connected,
	.disconnected = disconnected,
};

void main(void)
{
     ac4:	b507      	push	{r0, r1, r2, lr}
	int err;
	err = bt_enable(NULL);
     ac6:	2000      	movs	r0, #0
     ac8:	f004 f86a 	bl	4ba0 <bt_enable>

	if (err) {
     acc:	4601      	mov	r1, r0
     ace:	b128      	cbz	r0, adc <main+0x18>
		printk("Bluetooth init failed (err %d)\n", err);
     ad0:	480e      	ldr	r0, [pc, #56]	; (b0c <main+0x48>)
	bt_conn_cb_register(&conn_callbacks);

	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);

	if (err) {
		printk("Scanning failed to start (err %d)\n", err);
     ad2:	f000 fe05 	bl	16e0 <printk>
		return;
	}

	printk("Scanning successfully started\n");
}
     ad6:	b003      	add	sp, #12
     ad8:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("Bluetooth initialized\n");
     adc:	480c      	ldr	r0, [pc, #48]	; (b10 <main+0x4c>)
     ade:	f000 fdff 	bl	16e0 <printk>
	bt_conn_cb_register(&conn_callbacks);
     ae2:	480c      	ldr	r0, [pc, #48]	; (b14 <main+0x50>)
     ae4:	f004 fb40 	bl	5168 <bt_conn_cb_register>
	err = bt_le_scan_start(BT_LE_SCAN_ACTIVE, device_found);
     ae8:	4b0b      	ldr	r3, [pc, #44]	; (b18 <main+0x54>)
     aea:	490c      	ldr	r1, [pc, #48]	; (b1c <main+0x58>)
     aec:	6818      	ldr	r0, [r3, #0]
     aee:	9000      	str	r0, [sp, #0]
     af0:	889b      	ldrh	r3, [r3, #4]
     af2:	f8ad 3004 	strh.w	r3, [sp, #4]
     af6:	4668      	mov	r0, sp
     af8:	f004 f8ca 	bl	4c90 <bt_le_scan_start>
	if (err) {
     afc:	4601      	mov	r1, r0
     afe:	b108      	cbz	r0, b04 <main+0x40>
		printk("Scanning failed to start (err %d)\n", err);
     b00:	4807      	ldr	r0, [pc, #28]	; (b20 <main+0x5c>)
     b02:	e7e6      	b.n	ad2 <main+0xe>
	printk("Scanning successfully started\n");
     b04:	4807      	ldr	r0, [pc, #28]	; (b24 <main+0x60>)
     b06:	f000 fdeb 	bl	16e0 <printk>
     b0a:	e7e4      	b.n	ad6 <main+0x12>
     b0c:	000185fa 	.word	0x000185fa
     b10:	0001861a 	.word	0x0001861a
     b14:	200085a8 	.word	0x200085a8
     b18:	00018366 	.word	0x00018366
     b1c:	000009c5 	.word	0x000009c5
     b20:	0001854b 	.word	0x0001854b
     b24:	00018631 	.word	0x00018631

00000b28 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     b28:	4b05      	ldr	r3, [pc, #20]	; (b40 <errata_103+0x18>)
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     b2e:	bf01      	itttt	eq
     b30:	4b04      	ldreq	r3, [pc, #16]	; (b44 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     b32:	6818      	ldreq	r0, [r3, #0]
     b34:	fab0 f080 	clzeq	r0, r0
     b38:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     b3a:	bf18      	it	ne
     b3c:	2000      	movne	r0, #0
}
     b3e:	4770      	bx	lr
     b40:	10000130 	.word	0x10000130
     b44:	10000134 	.word	0x10000134

00000b48 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     b48:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     b4a:	f04f 0320 	mov.w	r3, #32
     b4e:	f3ef 8111 	mrs	r1, BASEPRI
     b52:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     b56:	f7ff ffe7 	bl	b28 <errata_103>
     b5a:	b140      	cbz	r0, b6e <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     b60:	2200      	movs	r2, #0
     b62:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     b66:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     b6a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     b6e:	f7ff ffdb 	bl	b28 <errata_103>
     b72:	b110      	cbz	r0, b7a <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     b74:	4b38      	ldr	r3, [pc, #224]	; (c58 <nordicsemi_nrf52_init+0x110>)
     b76:	4a39      	ldr	r2, [pc, #228]	; (c5c <nordicsemi_nrf52_init+0x114>)
     b78:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     b7a:	f7ff ffd5 	bl	b28 <errata_103>
     b7e:	b118      	cbz	r0, b88 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     b80:	4b37      	ldr	r3, [pc, #220]	; (c60 <nordicsemi_nrf52_init+0x118>)
     b82:	22fb      	movs	r2, #251	; 0xfb
     b84:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     b88:	f7ff ffce 	bl	b28 <errata_103>
     b8c:	b148      	cbz	r0, ba2 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     b8e:	4835      	ldr	r0, [pc, #212]	; (c64 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     b90:	4b35      	ldr	r3, [pc, #212]	; (c68 <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     b92:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     b94:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     b96:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     b9a:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     b9e:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     ba0:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     ba2:	f7ff ffc1 	bl	b28 <errata_103>
     ba6:	b118      	cbz	r0, bb0 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     ba8:	4b30      	ldr	r3, [pc, #192]	; (c6c <nordicsemi_nrf52_init+0x124>)
     baa:	f44f 7200 	mov.w	r2, #512	; 0x200
     bae:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     bb0:	f7ff ffba 	bl	b28 <errata_103>
     bb4:	b148      	cbz	r0, bca <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     bba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     bbe:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     bc0:	bf44      	itt	mi
     bc2:	f06f 0201 	mvnmi.w	r2, #1
     bc6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     bca:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     bce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     bd2:	2a00      	cmp	r2, #0
     bd4:	db03      	blt.n	bde <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     bd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     bda:	2b00      	cmp	r3, #0
     bdc:	da2f      	bge.n	c3e <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     bde:	4b24      	ldr	r3, [pc, #144]	; (c70 <nordicsemi_nrf52_init+0x128>)
     be0:	2201      	movs	r2, #1
     be2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     be6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     bea:	2a00      	cmp	r2, #0
     bec:	d0fb      	beq.n	be6 <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     bee:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     bf2:	2112      	movs	r1, #18
     bf4:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     bf8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     bfc:	2a00      	cmp	r2, #0
     bfe:	d0fb      	beq.n	bf8 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     c00:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     c04:	2212      	movs	r2, #18
     c06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     c0a:	4b19      	ldr	r3, [pc, #100]	; (c70 <nordicsemi_nrf52_init+0x128>)
     c0c:	461a      	mov	r2, r3
     c0e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     c12:	2900      	cmp	r1, #0
     c14:	d0fb      	beq.n	c0e <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     c16:	2100      	movs	r1, #0
     c18:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     c1c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     c20:	2b00      	cmp	r3, #0
     c22:	d0fb      	beq.n	c1c <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     c24:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     c28:	4912      	ldr	r1, [pc, #72]	; (c74 <nordicsemi_nrf52_init+0x12c>)
     c2a:	4b13      	ldr	r3, [pc, #76]	; (c78 <nordicsemi_nrf52_init+0x130>)
     c2c:	68ca      	ldr	r2, [r1, #12]
     c2e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     c32:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     c34:	60cb      	str	r3, [r1, #12]
     c36:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     c3a:	bf00      	nop
     c3c:	e7fd      	b.n	c3a <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     c3e:	4b0d      	ldr	r3, [pc, #52]	; (c74 <nordicsemi_nrf52_init+0x12c>)
     c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     c44:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     c46:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     c48:	4b0c      	ldr	r3, [pc, #48]	; (c7c <nordicsemi_nrf52_init+0x134>)
     c4a:	4a0d      	ldr	r2, [pc, #52]	; (c80 <nordicsemi_nrf52_init+0x138>)
     c4c:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     c4e:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     c52:	2000      	movs	r0, #0
     c54:	bd08      	pop	{r3, pc}
     c56:	bf00      	nop
     c58:	4000568c 	.word	0x4000568c
     c5c:	00038148 	.word	0x00038148
     c60:	4000f000 	.word	0x4000f000
     c64:	40000ee4 	.word	0x40000ee4
     c68:	10000258 	.word	0x10000258
     c6c:	40029640 	.word	0x40029640
     c70:	4001e000 	.word	0x4001e000
     c74:	e000ed00 	.word	0xe000ed00
     c78:	05fa0004 	.word	0x05fa0004
     c7c:	20008608 	.word	0x20008608
     c80:	03d09000 	.word	0x03d09000

00000c84 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     c84:	4808      	ldr	r0, [pc, #32]	; (ca8 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     c86:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     c88:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     c8a:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     c8c:	d80b      	bhi.n	ca6 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     c8e:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     c90:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     c92:	d008      	beq.n	ca6 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     c94:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     c96:	f016 fcb5 	bl	17604 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     c9a:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     c9e:	4903      	ldr	r1, [pc, #12]	; (cac <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     ca4:	600a      	str	r2, [r1, #0]

00000ca6 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     ca6:	4770      	bx	lr
    ldr r0, =_kernel
     ca8:	20003f38 	.word	0x20003f38
    ldr r1, =_SCS_ICSR
     cac:	e000ed04 	.word	0xe000ed04

00000cb0 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     cb0:	4804      	ldr	r0, [pc, #16]	; (cc4 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     cb2:	2300      	movs	r3, #0
     cb4:	2120      	movs	r1, #32
     cb6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     cb8:	3301      	adds	r3, #1
     cba:	2b2e      	cmp	r3, #46	; 0x2e
     cbc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     cc0:	d1f9      	bne.n	cb6 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     cc2:	4770      	bx	lr
     cc4:	e000e100 	.word	0xe000e100

00000cc8 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     cc8:	4a08      	ldr	r2, [pc, #32]	; (cec <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     cca:	4909      	ldr	r1, [pc, #36]	; (cf0 <__swap+0x28>)
	_current->arch.basepri = key;
     ccc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     cce:	6809      	ldr	r1, [r1, #0]
     cd0:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     cd2:	4908      	ldr	r1, [pc, #32]	; (cf4 <__swap+0x2c>)
	_current->arch.basepri = key;
     cd4:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     cd6:	684b      	ldr	r3, [r1, #4]
     cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     cdc:	604b      	str	r3, [r1, #4]
     cde:	2300      	movs	r3, #0
     ce0:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     ce4:	6893      	ldr	r3, [r2, #8]
}
     ce6:	6e58      	ldr	r0, [r3, #100]	; 0x64
     ce8:	4770      	bx	lr
     cea:	bf00      	nop
     cec:	20003f38 	.word	0x20003f38
     cf0:	0001c65c 	.word	0x0001c65c
     cf4:	e000ed00 	.word	0xe000ed00

00000cf8 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     cf8:	490e      	ldr	r1, [pc, #56]	; (d34 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     cfa:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     cfc:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     cfe:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     d00:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     d04:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     d08:	4f0b      	ldr	r7, [pc, #44]	; (d38 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     d0a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     d0e:	2020      	movs	r0, #32
    msr BASEPRI, r0
     d10:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     d14:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     d16:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     d18:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     d1a:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     d1c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     d1e:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     d20:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     d24:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     d28:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     d2c:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     d30:	4770      	bx	lr
     d32:	0000      	.short	0x0000
    ldr r1, =_kernel
     d34:	20003f38 	.word	0x20003f38
    ldr v4, =_SCS_ICSR
     d38:	e000ed04 	.word	0xe000ed04

00000d3c <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     d3c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     d40:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     d42:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     d46:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     d4a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     d4c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     d50:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     d54:	d001      	beq.n	d5a <_context_switch>

    cmp r1, #2
     d56:	2902      	cmp	r1, #2
    beq _oops
     d58:	d007      	beq.n	d6a <_oops>

00000d5a <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     d5a:	4040      	eors	r0, r0
    msr BASEPRI, r0
     d5c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     d60:	4904      	ldr	r1, [pc, #16]	; (d74 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     d66:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     d68:	4770      	bx	lr

00000d6a <_oops>:

_oops:
    push {lr}
     d6a:	b500      	push	{lr}
    blx _do_kernel_oops
     d6c:	f000 fa2c 	bl	11c8 <_do_kernel_oops>
    pop {pc}
     d70:	bd00      	pop	{pc}
     d72:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     d74:	e000ed04 	.word	0xe000ed04

00000d78 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     d78:	b510      	push	{r4, lr}
     d7a:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     d7c:	f016 fc18 	bl	175b0 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     d80:	6822      	ldr	r2, [r4, #0]
     d82:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     d88:	4801      	ldr	r0, [pc, #4]	; (d90 <_FaultThreadShow.isra.2+0x18>)
     d8a:	f000 bca9 	b.w	16e0 <printk>
     d8e:	bf00      	nop
     d90:	000187f3 	.word	0x000187f3

00000d94 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     d94:	b510      	push	{r4, lr}
     d96:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     d98:	481a      	ldr	r0, [pc, #104]	; (e04 <_UsageFault+0x70>)
     d9a:	f000 fca1 	bl	16e0 <printk>

	_FaultThreadShow(esf);
     d9e:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     da2:	4c19      	ldr	r4, [pc, #100]	; (e08 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     da4:	f7ff ffe8 	bl	d78 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     da8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     daa:	019a      	lsls	r2, r3, #6
     dac:	d502      	bpl.n	db4 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     dae:	4817      	ldr	r0, [pc, #92]	; (e0c <_UsageFault+0x78>)
     db0:	f000 fc96 	bl	16e0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     db6:	01db      	lsls	r3, r3, #7
     db8:	d502      	bpl.n	dc0 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     dba:	4815      	ldr	r0, [pc, #84]	; (e10 <_UsageFault+0x7c>)
     dbc:	f000 fc90 	bl	16e0 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     dc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     dc2:	0318      	lsls	r0, r3, #12
     dc4:	d502      	bpl.n	dcc <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     dc6:	4813      	ldr	r0, [pc, #76]	; (e14 <_UsageFault+0x80>)
     dc8:	f000 fc8a 	bl	16e0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     dcc:	4c0e      	ldr	r4, [pc, #56]	; (e08 <_UsageFault+0x74>)
     dce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     dd0:	0359      	lsls	r1, r3, #13
     dd2:	d502      	bpl.n	dda <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     dd4:	4810      	ldr	r0, [pc, #64]	; (e18 <_UsageFault+0x84>)
     dd6:	f000 fc83 	bl	16e0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     dda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ddc:	039a      	lsls	r2, r3, #14
     dde:	d502      	bpl.n	de6 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     de0:	480e      	ldr	r0, [pc, #56]	; (e1c <_UsageFault+0x88>)
     de2:	f000 fc7d 	bl	16e0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     de6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     de8:	03db      	lsls	r3, r3, #15
     dea:	d502      	bpl.n	df2 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     dec:	480c      	ldr	r0, [pc, #48]	; (e20 <_UsageFault+0x8c>)
     dee:	f000 fc77 	bl	16e0 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     df2:	4a05      	ldr	r2, [pc, #20]	; (e08 <_UsageFault+0x74>)
     df4:	6a93      	ldr	r3, [r2, #40]	; 0x28
     df6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     dfa:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     dfe:	6293      	str	r3, [r2, #40]	; 0x28
     e00:	bd10      	pop	{r4, pc}
     e02:	bf00      	nop
     e04:	000188f4 	.word	0x000188f4
     e08:	e000ed00 	.word	0xe000ed00
     e0c:	0001890d 	.word	0x0001890d
     e10:	00018921 	.word	0x00018921
     e14:	0001893c 	.word	0x0001893c
     e18:	0001895b 	.word	0x0001895b
     e1c:	00018981 	.word	0x00018981
     e20:	0001899c 	.word	0x0001899c

00000e24 <_MpuFault>:
{
     e24:	b538      	push	{r3, r4, r5, lr}
     e26:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     e28:	4819      	ldr	r0, [pc, #100]	; (e90 <_MpuFault+0x6c>)
{
     e2a:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     e2c:	f000 fc58 	bl	16e0 <printk>
	_FaultThreadShow(esf);
     e30:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     e34:	4c17      	ldr	r4, [pc, #92]	; (e94 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     e36:	f7ff ff9f 	bl	d78 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e3c:	06d9      	lsls	r1, r3, #27
     e3e:	d504      	bpl.n	e4a <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     e40:	4815      	ldr	r0, [pc, #84]	; (e98 <_MpuFault+0x74>)
}
     e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     e46:	f000 bc4b 	b.w	16e0 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e4c:	071a      	lsls	r2, r3, #28
     e4e:	d501      	bpl.n	e54 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     e50:	4812      	ldr	r0, [pc, #72]	; (e9c <_MpuFault+0x78>)
     e52:	e7f6      	b.n	e42 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     e54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e56:	079b      	lsls	r3, r3, #30
     e58:	d50f      	bpl.n	e7a <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     e5a:	4811      	ldr	r0, [pc, #68]	; (ea0 <_MpuFault+0x7c>)
     e5c:	f000 fc40 	bl	16e0 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e64:	0618      	lsls	r0, r3, #24
     e66:	d512      	bpl.n	e8e <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     e68:	480e      	ldr	r0, [pc, #56]	; (ea4 <_MpuFault+0x80>)
     e6a:	f000 fc39 	bl	16e0 <printk>
			if (fromHardFault) {
     e6e:	b175      	cbz	r5, e8e <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     e70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     e76:	62a3      	str	r3, [r4, #40]	; 0x28
     e78:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     e7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e7c:	07da      	lsls	r2, r3, #31
     e7e:	d501      	bpl.n	e84 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     e80:	4809      	ldr	r0, [pc, #36]	; (ea8 <_MpuFault+0x84>)
     e82:	e7de      	b.n	e42 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     e84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e86:	069b      	lsls	r3, r3, #26
     e88:	d501      	bpl.n	e8e <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     e8a:	4808      	ldr	r0, [pc, #32]	; (eac <_MpuFault+0x88>)
     e8c:	e7d9      	b.n	e42 <_MpuFault+0x1e>
     e8e:	bd38      	pop	{r3, r4, r5, pc}
     e90:	0001883d 	.word	0x0001883d
     e94:	e000ed00 	.word	0xe000ed00
     e98:	00018854 	.word	0x00018854
     e9c:	00018866 	.word	0x00018866
     ea0:	0001887a 	.word	0x0001887a
     ea4:	00018893 	.word	0x00018893
     ea8:	000188a4 	.word	0x000188a4
     eac:	000188c4 	.word	0x000188c4

00000eb0 <_BusFault>:
{
     eb0:	b538      	push	{r3, r4, r5, lr}
     eb2:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     eb4:	481d      	ldr	r0, [pc, #116]	; (f2c <_BusFault+0x7c>)
{
     eb6:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     eb8:	f000 fc12 	bl	16e0 <printk>
	_FaultThreadShow(esf);
     ebc:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     ec0:	4c1b      	ldr	r4, [pc, #108]	; (f30 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     ec2:	f7ff ff59 	bl	d78 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     ec6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ec8:	04d8      	lsls	r0, r3, #19
     eca:	d504      	bpl.n	ed6 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     ecc:	4819      	ldr	r0, [pc, #100]	; (f34 <_BusFault+0x84>)
}
     ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     ed2:	f000 bc05 	b.w	16e0 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     ed6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ed8:	0519      	lsls	r1, r3, #20
     eda:	d501      	bpl.n	ee0 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     edc:	4816      	ldr	r0, [pc, #88]	; (f38 <_BusFault+0x88>)
     ede:	e7f6      	b.n	ece <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ee2:	059a      	lsls	r2, r3, #22
     ee4:	d514      	bpl.n	f10 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     ee6:	4815      	ldr	r0, [pc, #84]	; (f3c <_BusFault+0x8c>)
     ee8:	f000 fbfa 	bl	16e0 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     eec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     eee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ef0:	041b      	lsls	r3, r3, #16
     ef2:	d507      	bpl.n	f04 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     ef4:	4812      	ldr	r0, [pc, #72]	; (f40 <_BusFault+0x90>)
     ef6:	f000 fbf3 	bl	16e0 <printk>
			if (fromHardFault) {
     efa:	b11d      	cbz	r5, f04 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     efc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     efe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     f02:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     f04:	4b0a      	ldr	r3, [pc, #40]	; (f30 <_BusFault+0x80>)
     f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f08:	0558      	lsls	r0, r3, #21
     f0a:	d50e      	bpl.n	f2a <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     f0c:	480d      	ldr	r0, [pc, #52]	; (f44 <_BusFault+0x94>)
     f0e:	e7de      	b.n	ece <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     f10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f12:	0559      	lsls	r1, r3, #21
     f14:	d4fa      	bmi.n	f0c <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     f16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f18:	05da      	lsls	r2, r3, #23
     f1a:	d501      	bpl.n	f20 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     f1c:	480a      	ldr	r0, [pc, #40]	; (f48 <_BusFault+0x98>)
     f1e:	e7d6      	b.n	ece <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     f20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     f22:	049b      	lsls	r3, r3, #18
     f24:	d501      	bpl.n	f2a <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     f26:	4809      	ldr	r0, [pc, #36]	; (f4c <_BusFault+0x9c>)
     f28:	e7d1      	b.n	ece <_BusFault+0x1e>
     f2a:	bd38      	pop	{r3, r4, r5, pc}
     f2c:	000186ba 	.word	0x000186ba
     f30:	e000ed00 	.word	0xe000ed00
     f34:	00018854 	.word	0x00018854
     f38:	00018866 	.word	0x00018866
     f3c:	000186d1 	.word	0x000186d1
     f40:	00018893 	.word	0x00018893
     f44:	000186eb 	.word	0x000186eb
     f48:	00018707 	.word	0x00018707
     f4c:	000188c4 	.word	0x000188c4

00000f50 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     f50:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     f52:	4d27      	ldr	r5, [pc, #156]	; (ff0 <_Fault+0xa0>)
     f54:	686b      	ldr	r3, [r5, #4]
     f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     f5a:	1eda      	subs	r2, r3, #3
{
     f5c:	4604      	mov	r4, r0
	switch (fault) {
     f5e:	2a09      	cmp	r2, #9
     f60:	d83a      	bhi.n	fd8 <_Fault+0x88>
     f62:	e8df f002 	tbb	[pc, r2]
     f66:	3305      	.short	0x3305
     f68:	39392f35 	.word	0x39392f35
     f6c:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     f70:	4820      	ldr	r0, [pc, #128]	; (ff4 <_Fault+0xa4>)
     f72:	f000 fbb5 	bl	16e0 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     f76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     f78:	079a      	lsls	r2, r3, #30
     f7a:	d503      	bpl.n	f84 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     f7c:	481e      	ldr	r0, [pc, #120]	; (ff8 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     f7e:	f000 fbaf 	bl	16e0 <printk>
     f82:	e00c      	b.n	f9e <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     f84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     f86:	005b      	lsls	r3, r3, #1
     f88:	d509      	bpl.n	f9e <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     f8a:	481c      	ldr	r0, [pc, #112]	; (ffc <_Fault+0xac>)
     f8c:	f000 fba8 	bl	16e0 <printk>
		if (SCB_MMFSR) {
     f90:	4b1b      	ldr	r3, [pc, #108]	; (1000 <_Fault+0xb0>)
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	b14b      	cbz	r3, faa <_Fault+0x5a>
			_MpuFault(esf, 1);
     f96:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     f98:	4620      	mov	r0, r4
     f9a:	f7ff ff43 	bl	e24 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     f9e:	4621      	mov	r1, r4
     fa0:	2000      	movs	r0, #0
}
     fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     fa6:	f000 b913 	b.w	11d0 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     faa:	4b16      	ldr	r3, [pc, #88]	; (1004 <_Fault+0xb4>)
     fac:	781b      	ldrb	r3, [r3, #0]
     fae:	b123      	cbz	r3, fba <_Fault+0x6a>
			_BusFault(esf, 1);
     fb0:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     fb2:	4620      	mov	r0, r4
     fb4:	f7ff ff7c 	bl	eb0 <_BusFault>
     fb8:	e7f1      	b.n	f9e <_Fault+0x4e>
		} else if (SCB_UFSR) {
     fba:	4b13      	ldr	r3, [pc, #76]	; (1008 <_Fault+0xb8>)
     fbc:	881b      	ldrh	r3, [r3, #0]
     fbe:	b29b      	uxth	r3, r3
     fc0:	2b00      	cmp	r3, #0
     fc2:	d0ec      	beq.n	f9e <_Fault+0x4e>
		_UsageFault(esf);
     fc4:	4620      	mov	r0, r4
     fc6:	f7ff fee5 	bl	d94 <_UsageFault>
     fca:	e7e8      	b.n	f9e <_Fault+0x4e>
		_MpuFault(esf, 0);
     fcc:	2100      	movs	r1, #0
     fce:	e7e3      	b.n	f98 <_Fault+0x48>
		_BusFault(esf, 0);
     fd0:	2100      	movs	r1, #0
     fd2:	e7ee      	b.n	fb2 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     fd4:	480d      	ldr	r0, [pc, #52]	; (100c <_Fault+0xbc>)
     fd6:	e7d2      	b.n	f7e <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     fd8:	480d      	ldr	r0, [pc, #52]	; (1010 <_Fault+0xc0>)
     fda:	490e      	ldr	r1, [pc, #56]	; (1014 <_Fault+0xc4>)
     fdc:	f1a3 0210 	sub.w	r2, r3, #16
     fe0:	2b0f      	cmp	r3, #15
     fe2:	bfd8      	it	le
     fe4:	4601      	movle	r1, r0
     fe6:	480c      	ldr	r0, [pc, #48]	; (1018 <_Fault+0xc8>)
     fe8:	f000 fb7a 	bl	16e0 <printk>
     fec:	e7d7      	b.n	f9e <_Fault+0x4e>
     fee:	bf00      	nop
     ff0:	e000ed00 	.word	0xe000ed00
     ff4:	0001874e 	.word	0x0001874e
     ff8:	00018766 	.word	0x00018766
     ffc:	00018788 	.word	0x00018788
    1000:	e000ed28 	.word	0xe000ed28
    1004:	e000ed29 	.word	0xe000ed29
    1008:	e000ed2a 	.word	0xe000ed2a
    100c:	000187a8 	.word	0x000187a8
    1010:	00018720 	.word	0x00018720
    1014:	00018735 	.word	0x00018735
    1018:	000187df 	.word	0x000187df

0000101c <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    101c:	4a02      	ldr	r2, [pc, #8]	; (1028 <_FaultInit+0xc>)
    101e:	6953      	ldr	r3, [r2, #20]
    1020:	f043 0310 	orr.w	r3, r3, #16
    1024:	6153      	str	r3, [r2, #20]
    1026:	4770      	bx	lr
    1028:	e000ed00 	.word	0xe000ed00

0000102c <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    102c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    102e:	2b00      	cmp	r3, #0
    1030:	db08      	blt.n	1044 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1032:	2201      	movs	r2, #1
    1034:	f000 001f 	and.w	r0, r0, #31
    1038:	fa02 f000 	lsl.w	r0, r2, r0
    103c:	095b      	lsrs	r3, r3, #5
    103e:	4a02      	ldr	r2, [pc, #8]	; (1048 <_arch_irq_enable+0x1c>)
    1040:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1044:	4770      	bx	lr
    1046:	bf00      	nop
    1048:	e000e100 	.word	0xe000e100

0000104c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    104c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    104e:	2b00      	cmp	r3, #0
    1050:	db0d      	blt.n	106e <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1052:	2201      	movs	r2, #1
    1054:	095b      	lsrs	r3, r3, #5
    1056:	f000 001f 	and.w	r0, r0, #31
    105a:	fa02 f000 	lsl.w	r0, r2, r0
    105e:	3320      	adds	r3, #32
    1060:	4a03      	ldr	r2, [pc, #12]	; (1070 <_arch_irq_disable+0x24>)
    1062:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    106a:	f3bf 8f6f 	isb	sy
    106e:	4770      	bx	lr
    1070:	e000e100 	.word	0xe000e100

00001074 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    1074:	0942      	lsrs	r2, r0, #5
    1076:	4b05      	ldr	r3, [pc, #20]	; (108c <_arch_irq_is_enabled+0x18>)
    1078:	f000 001f 	and.w	r0, r0, #31
    107c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1080:	2301      	movs	r3, #1
    1082:	fa03 f000 	lsl.w	r0, r3, r0
}
    1086:	4010      	ands	r0, r2
    1088:	4770      	bx	lr
    108a:	bf00      	nop
    108c:	e000e100 	.word	0xe000e100

00001090 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1090:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1092:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1094:	bfa8      	it	ge
    1096:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    109a:	f101 0101 	add.w	r1, r1, #1
    109e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    10a2:	bfad      	iteet	ge
    10a4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10a8:	f000 000f 	andlt.w	r0, r0, #15
    10ac:	4b03      	ldrlt	r3, [pc, #12]	; (10bc <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10ae:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10b0:	bfb6      	itet	lt
    10b2:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10b4:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    10b8:	5419      	strblt	r1, [r3, r0]
    10ba:	4770      	bx	lr
    10bc:	e000ed14 	.word	0xe000ed14

000010c0 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    10c0:	f000 b842 	b.w	1148 <__bus_fault>

000010c4 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    10c4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    10c6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    10c8:	4b04      	ldr	r3, [pc, #16]	; (10dc <_arch_isr_direct_pm+0x18>)
    10ca:	6998      	ldr	r0, [r3, #24]
    10cc:	b118      	cbz	r0, 10d6 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    10ce:	2200      	movs	r2, #0
    10d0:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
    10d2:	f015 fee1 	bl	16e98 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    10d6:	b662      	cpsie	i
    10d8:	bd08      	pop	{r3, pc}
    10da:	bf00      	nop
    10dc:	20003f38 	.word	0x20003f38

000010e0 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
    10e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10e2:	460c      	mov	r4, r1
    10e4:	4616      	mov	r6, r2
    10e6:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
    10e8:	2204      	movs	r2, #4
    10ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    10ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    10ee:	4605      	mov	r5, r0
    10f0:	f016 fd86 	bl	17c00 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    10f4:	f1a6 0120 	sub.w	r1, r6, #32
    10f8:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
    10fa:	4a0c      	ldr	r2, [pc, #48]	; (112c <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
    10fc:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    10fe:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
    1102:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
    1104:	f022 0201 	bic.w	r2, r2, #1
    1108:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
    110a:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
    110c:	65ee      	str	r6, [r5, #92]	; 0x5c
    110e:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
    1110:	9a06      	ldr	r2, [sp, #24]
    1112:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
    1114:	9a07      	ldr	r2, [sp, #28]
    1116:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
    1118:	9a08      	ldr	r2, [sp, #32]
    111a:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
    111c:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
    111e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1122:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    1124:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
    1126:	662b      	str	r3, [r5, #96]	; 0x60
    1128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    112a:	bf00      	nop
    112c:	00017a75 	.word	0x00017a75

00001130 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    1130:	4901      	ldr	r1, [pc, #4]	; (1138 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    1132:	2210      	movs	r2, #16
	str r2, [r1]
    1134:	600a      	str	r2, [r1, #0]
	bx lr
    1136:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1138:	e000ed10 	.word	0xe000ed10

0000113c <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    113c:	4040      	eors	r0, r0
	msr BASEPRI, r0
    113e:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    1142:	bf30      	wfi

	bx lr
    1144:	4770      	bx	lr
    1146:	bf00      	nop

00001148 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
    1148:	4040      	eors	r0, r0
	msr BASEPRI, r0
    114a:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
    114e:	f8df c01c 	ldr.w	ip, [pc, #28]	; 116c <__bus_fault+0x24>
	ldr ip, [ip]
    1152:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    1156:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    115a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    115c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    1160:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
    1164:	b500      	push	{lr}
	bl _Fault
    1166:	f7ff fef3 	bl	f50 <_Fault>

	pop {pc}
    116a:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
    116c:	e000ed04 	.word	0xe000ed04

00001170 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
    1170:	2804      	cmp	r0, #4
{
    1172:	b538      	push	{r3, r4, r5, lr}
    1174:	4604      	mov	r4, r0
    1176:	460d      	mov	r5, r1
	switch (reason) {
    1178:	d013      	beq.n	11a2 <_NanoFatalErrorHandler+0x32>
    117a:	2805      	cmp	r0, #5
    117c:	d013      	beq.n	11a6 <_NanoFatalErrorHandler+0x36>
    117e:	2803      	cmp	r0, #3
    1180:	d113      	bne.n	11aa <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
    1182:	480c      	ldr	r0, [pc, #48]	; (11b4 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
    1184:	f000 faac 	bl	16e0 <printk>
    1188:	f016 fa12 	bl	175b0 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
    118c:	69aa      	ldr	r2, [r5, #24]
    118e:	4601      	mov	r1, r0
    1190:	4809      	ldr	r0, [pc, #36]	; (11b8 <_NanoFatalErrorHandler+0x48>)
    1192:	f000 faa5 	bl	16e0 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    1196:	4629      	mov	r1, r5
    1198:	4620      	mov	r0, r4
}
    119a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
    119e:	f000 b817 	b.w	11d0 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
    11a2:	4806      	ldr	r0, [pc, #24]	; (11bc <_NanoFatalErrorHandler+0x4c>)
    11a4:	e7ee      	b.n	1184 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
    11a6:	4806      	ldr	r0, [pc, #24]	; (11c0 <_NanoFatalErrorHandler+0x50>)
    11a8:	e7ec      	b.n	1184 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
    11aa:	4601      	mov	r1, r0
    11ac:	4805      	ldr	r0, [pc, #20]	; (11c4 <_NanoFatalErrorHandler+0x54>)
    11ae:	f000 fa97 	bl	16e0 <printk>
		break;
    11b2:	e7e9      	b.n	1188 <_NanoFatalErrorHandler+0x18>
    11b4:	000189c8 	.word	0x000189c8
    11b8:	00018a46 	.word	0x00018a46
    11bc:	000189ee 	.word	0x000189ee
    11c0:	00018a08 	.word	0x00018a08
    11c4:	00018a23 	.word	0x00018a23

000011c8 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
    11c8:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
    11ca:	6800      	ldr	r0, [r0, #0]
    11cc:	f7ff bfd0 	b.w	1170 <_NanoFatalErrorHandler>

000011d0 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    11d0:	2805      	cmp	r0, #5
{
    11d2:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
    11d4:	d00c      	beq.n	11f0 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
    11d6:	f016 fc35 	bl	17a44 <k_is_in_isr>
    11da:	b160      	cbz	r0, 11f6 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    11dc:	f016 fc32 	bl	17a44 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
    11e0:	4b0c      	ldr	r3, [pc, #48]	; (1214 <_SysFatalErrorHandler+0x44>)
    11e2:	490d      	ldr	r1, [pc, #52]	; (1218 <_SysFatalErrorHandler+0x48>)
    11e4:	2800      	cmp	r0, #0
    11e6:	bf08      	it	eq
    11e8:	4619      	moveq	r1, r3
    11ea:	480c      	ldr	r0, [pc, #48]	; (121c <_SysFatalErrorHandler+0x4c>)
    11ec:	f000 fa78 	bl	16e0 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
    11f0:	f7ff ffa4 	bl	113c <k_cpu_idle>
    11f4:	e7fc      	b.n	11f0 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
    11f6:	f016 fc35 	bl	17a64 <_is_thread_essential>
    11fa:	2800      	cmp	r0, #0
    11fc:	d1ee      	bne.n	11dc <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    11fe:	4c08      	ldr	r4, [pc, #32]	; (1220 <_SysFatalErrorHandler+0x50>)
    1200:	4808      	ldr	r0, [pc, #32]	; (1224 <_SysFatalErrorHandler+0x54>)
    1202:	68a1      	ldr	r1, [r4, #8]
    1204:	f000 fa6c 	bl	16e0 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    1208:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
    120a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    120e:	f000 b80b 	b.w	1228 <_impl_k_thread_abort>
    1212:	bf00      	nop
    1214:	00018a86 	.word	0x00018a86
    1218:	00018a82 	.word	0x00018a82
    121c:	00018a97 	.word	0x00018a97
    1220:	20003f38 	.word	0x20003f38
    1224:	00018ab7 	.word	0x00018ab7

00001228 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
    1228:	b538      	push	{r3, r4, r5, lr}
    122a:	4605      	mov	r5, r0
	__asm__ volatile(
    122c:	f04f 0320 	mov.w	r3, #32
    1230:	f3ef 8411 	mrs	r4, BASEPRI
    1234:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
    1238:	f016 fc72 	bl	17b20 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    123c:	4b0b      	ldr	r3, [pc, #44]	; (126c <_impl_k_thread_abort+0x44>)
    123e:	689b      	ldr	r3, [r3, #8]
    1240:	429d      	cmp	r5, r3
    1242:	d10d      	bne.n	1260 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1244:	4b0a      	ldr	r3, [pc, #40]	; (1270 <_impl_k_thread_abort+0x48>)
    1246:	685a      	ldr	r2, [r3, #4]
    1248:	f3c2 0208 	ubfx	r2, r2, #0, #9
    124c:	b922      	cbnz	r2, 1258 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
    124e:	f016 f9d9 	bl	17604 <_update_time_slice_before_swap>

	return __swap(key);
    1252:	4620      	mov	r0, r4
    1254:	f7ff fd38 	bl	cc8 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1258:	685a      	ldr	r2, [r3, #4]
    125a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    125e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    1260:	4620      	mov	r0, r4
}
    1262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
    1266:	f016 b931 	b.w	174cc <_reschedule_threads>
    126a:	bf00      	nop
    126c:	20003f38 	.word	0x20003f38
    1270:	e000ed00 	.word	0xe000ed00

00001274 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    1274:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1276:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1278:	4a0b      	ldr	r2, [pc, #44]	; (12a8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    127a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    127c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    127e:	bf1e      	ittt	ne
	movne	r1, #0
    1280:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1282:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
    1284:	f015 fe08 	blne	16e98 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1288:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    128a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    128e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1292:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1296:	4905      	ldr	r1, [pc, #20]	; (12ac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1298:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    129a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
    129c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
    129e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
    12a2:	f7ff bcef 	b.w	c84 <_ExcExit>
    12a6:	0000      	.short	0x0000
	ldr r2, =_kernel
    12a8:	20003f38 	.word	0x20003f38
	ldr r1, =_sw_isr_table
    12ac:	000000f8 	.word	0x000000f8

000012b0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    12b0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    12b2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
    12b6:	4805      	ldr	r0, [pc, #20]	; (12cc <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    12b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    12bc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    12be:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    12c2:	2002      	movs	r0, #2
    msr CONTROL, r0
    12c4:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    12c8:	f000 b806 	b.w	12d8 <_PrepC>
    ldr r0, =_interrupt_stack
    12cc:	200079a8 	.word	0x200079a8

000012d0 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    12d0:	bf30      	wfi
    b _SysNmiOnReset
    12d2:	f7ff bffd 	b.w	12d0 <_SysNmiOnReset>
    12d6:	bf00      	nop

000012d8 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
    12d8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    12da:	4b07      	ldr	r3, [pc, #28]	; (12f8 <_PrepC+0x20>)
    12dc:	4a07      	ldr	r2, [pc, #28]	; (12fc <_PrepC+0x24>)
    12de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    12e2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    12e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12e8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    12ec:	f015 fe06 	bl	16efc <_bss_zero>
	_data_copy();
    12f0:	f015 fe0e 	bl	16f10 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
    12f4:	f015 fe34 	bl	16f60 <_Cstart>
    12f8:	00000000 	.word	0x00000000
    12fc:	e000ed00 	.word	0xe000ed00

00001300 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    1300:	b508      	push	{r3, lr}
	handler();
    1302:	f7ff ffe5 	bl	12d0 <_SysNmiOnReset>
	_ExcExit();
}
    1306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
    130a:	f7ff bcbb 	b.w	c84 <_ExcExit>
	...

00001310 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
    1310:	4b15      	ldr	r3, [pc, #84]	; (1368 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
    1312:	4916      	ldr	r1, [pc, #88]	; (136c <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
    1314:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
    1316:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
    1318:	680d      	ldr	r5, [r1, #0]
    131a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    131e:	4295      	cmp	r5, r2
    1320:	d80f      	bhi.n	1342 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
    1322:	2200      	movs	r2, #0
    1324:	6848      	ldr	r0, [r1, #4]
    1326:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1328:	4295      	cmp	r5, r2
    132a:	f100 000c 	add.w	r0, r0, #12
    132e:	d10a      	bne.n	1346 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
    1330:	2205      	movs	r2, #5
    1332:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
    1334:	4b0e      	ldr	r3, [pc, #56]	; (1370 <arm_mpu_init+0x60>)
    1336:	2201      	movs	r2, #1
    1338:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    133a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    133e:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    1342:	2000      	movs	r0, #0
    1344:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1346:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    134a:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    134e:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1350:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1354:	f041 0110 	orr.w	r1, r1, #16
    1358:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    135a:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    135e:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1360:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1362:	611c      	str	r4, [r3, #16]
    1364:	e7e0      	b.n	1328 <arm_mpu_init+0x18>
    1366:	bf00      	nop
    1368:	e000ed90 	.word	0xe000ed90
    136c:	200085c4 	.word	0x200085c4
    1370:	20000084 	.word	0x20000084

00001374 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1374:	2000      	movs	r0, #0
    1376:	4770      	bx	lr

00001378 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1378:	680b      	ldr	r3, [r1, #0]
    137a:	3301      	adds	r3, #1
    137c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    137e:	4b01      	ldr	r3, [pc, #4]	; (1384 <char_out+0xc>)
    1380:	681b      	ldr	r3, [r3, #0]
    1382:	4718      	bx	r3
    1384:	2000860c 	.word	0x2000860c

00001388 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    138c:	b085      	sub	sp, #20
    138e:	469b      	mov	fp, r3
    1390:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1392:	f8df a090 	ldr.w	sl, [pc, #144]	; 1424 <_printk_dec_ulong+0x9c>
    1396:	2c01      	cmp	r4, #1
    1398:	bfb8      	it	lt
    139a:	2401      	movlt	r4, #1
    139c:	2b01      	cmp	r3, #1
    139e:	bf0c      	ite	eq
    13a0:	2330      	moveq	r3, #48	; 0x30
    13a2:	2320      	movne	r3, #32
    13a4:	4615      	mov	r5, r2
    13a6:	4680      	mov	r8, r0
    13a8:	4689      	mov	r9, r1
    13aa:	9401      	str	r4, [sp, #4]
    13ac:	9302      	str	r3, [sp, #8]
    13ae:	2601      	movs	r6, #1
    13b0:	270a      	movs	r7, #10
    13b2:	2200      	movs	r2, #0
    13b4:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    13b8:	b90a      	cbnz	r2, 13be <_printk_dec_ulong+0x36>
    13ba:	45aa      	cmp	sl, r5
    13bc:	d21f      	bcs.n	13fe <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    13be:	fbb5 f0f4 	udiv	r0, r5, r4
    13c2:	4649      	mov	r1, r9
    13c4:	3030      	adds	r0, #48	; 0x30
    13c6:	47c0      	blx	r8
			digits++;
    13c8:	3601      	adds	r6, #1
			found_largest_digit = 1;
    13ca:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    13cc:	3f01      	subs	r7, #1
	while (pos >= 9) {
    13ce:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    13d0:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    13d4:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    13d8:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    13dc:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    13e0:	d1e8      	bne.n	13b4 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    13e2:	4649      	mov	r1, r9
    13e4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    13e8:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    13ea:	f1bb 0f03 	cmp.w	fp, #3
    13ee:	d103      	bne.n	13f8 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    13f0:	9b01      	ldr	r3, [sp, #4]
    13f2:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    13f4:	2c00      	cmp	r4, #0
    13f6:	dc0f      	bgt.n	1418 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    13f8:	b005      	add	sp, #20
    13fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    13fe:	9b01      	ldr	r3, [sp, #4]
    1400:	42bb      	cmp	r3, r7
    1402:	dbe3      	blt.n	13cc <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    1404:	f1bb 0f02 	cmp.w	fp, #2
    1408:	d8e0      	bhi.n	13cc <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    140a:	4649      	mov	r1, r9
    140c:	9802      	ldr	r0, [sp, #8]
    140e:	9203      	str	r2, [sp, #12]
			digits++;
    1410:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    1412:	47c0      	blx	r8
			digits++;
    1414:	9a03      	ldr	r2, [sp, #12]
    1416:	e7d9      	b.n	13cc <_printk_dec_ulong+0x44>
			out(' ', ctx);
    1418:	4649      	mov	r1, r9
    141a:	2020      	movs	r0, #32
    141c:	47c0      	blx	r8
    141e:	3c01      	subs	r4, #1
    1420:	e7e8      	b.n	13f4 <_printk_dec_ulong+0x6c>
    1422:	bf00      	nop
    1424:	3b9ac9ff 	.word	0x3b9ac9ff

00001428 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    1428:	680a      	ldr	r2, [r1, #0]
    142a:	688b      	ldr	r3, [r1, #8]
{
    142c:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    142e:	b112      	cbz	r2, 1436 <str_out+0xe>
    1430:	684c      	ldr	r4, [r1, #4]
    1432:	42a3      	cmp	r3, r4
    1434:	db02      	blt.n	143c <str_out+0x14>
		ctx->count++;
    1436:	3301      	adds	r3, #1
    1438:	608b      	str	r3, [r1, #8]
		return c;
    143a:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    143c:	1e65      	subs	r5, r4, #1
    143e:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1440:	bf0b      	itete	eq
    1442:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1444:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    1446:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    1448:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    144a:	bf0c      	ite	eq
    144c:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    144e:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    1450:	bd30      	pop	{r4, r5, pc}
	...

00001454 <__printk_hook_install>:
	_char_out = fn;
    1454:	4b01      	ldr	r3, [pc, #4]	; (145c <__printk_hook_install+0x8>)
    1456:	6018      	str	r0, [r3, #0]
    1458:	4770      	bx	lr
    145a:	bf00      	nop
    145c:	2000860c 	.word	0x2000860c

00001460 <_vprintk>:
{
    1460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1464:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    1466:	f04f 0a00 	mov.w	sl, #0
{
    146a:	4606      	mov	r6, r0
    146c:	460f      	mov	r7, r1
    146e:	9204      	str	r2, [sp, #16]
    1470:	461c      	mov	r4, r3
	int min_width = -1;
    1472:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    1476:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    1478:	4655      	mov	r5, sl
	while (*fmt) {
    147a:	9b04      	ldr	r3, [sp, #16]
    147c:	7818      	ldrb	r0, [r3, #0]
    147e:	b910      	cbnz	r0, 1486 <_vprintk+0x26>
}
    1480:	b009      	add	sp, #36	; 0x24
    1482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    1486:	b945      	cbnz	r5, 149a <_vprintk+0x3a>
			if (*fmt != '%') {
    1488:	2825      	cmp	r0, #37	; 0x25
    148a:	f000 810c 	beq.w	16a6 <_vprintk+0x246>
				out((int)*fmt, ctx);
    148e:	4639      	mov	r1, r7
    1490:	47b0      	blx	r6
		++fmt;
    1492:	9b04      	ldr	r3, [sp, #16]
    1494:	3301      	adds	r3, #1
    1496:	9304      	str	r3, [sp, #16]
    1498:	e7ef      	b.n	147a <_vprintk+0x1a>
			switch (*fmt) {
    149a:	2864      	cmp	r0, #100	; 0x64
    149c:	d061      	beq.n	1562 <_vprintk+0x102>
    149e:	d819      	bhi.n	14d4 <_vprintk+0x74>
    14a0:	2839      	cmp	r0, #57	; 0x39
    14a2:	d80a      	bhi.n	14ba <_vprintk+0x5a>
    14a4:	2831      	cmp	r0, #49	; 0x31
    14a6:	d250      	bcs.n	154a <_vprintk+0xea>
    14a8:	282d      	cmp	r0, #45	; 0x2d
    14aa:	d03c      	beq.n	1526 <_vprintk+0xc6>
    14ac:	2830      	cmp	r0, #48	; 0x30
    14ae:	d03d      	beq.n	152c <_vprintk+0xcc>
    14b0:	2825      	cmp	r0, #37	; 0x25
    14b2:	d108      	bne.n	14c6 <_vprintk+0x66>
				out((int)'%', ctx);
    14b4:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    14b6:	47b0      	blx	r6
    14b8:	e06f      	b.n	159a <_vprintk+0x13a>
			switch (*fmt) {
    14ba:	2858      	cmp	r0, #88	; 0x58
    14bc:	f000 8089 	beq.w	15d2 <_vprintk+0x172>
    14c0:	2863      	cmp	r0, #99	; 0x63
    14c2:	f000 80ea 	beq.w	169a <_vprintk+0x23a>
				out((int)'%', ctx);
    14c6:	4639      	mov	r1, r7
    14c8:	2025      	movs	r0, #37	; 0x25
    14ca:	47b0      	blx	r6
				out((int)*fmt, ctx);
    14cc:	9b04      	ldr	r3, [sp, #16]
    14ce:	4639      	mov	r1, r7
    14d0:	7818      	ldrb	r0, [r3, #0]
    14d2:	e7f0      	b.n	14b6 <_vprintk+0x56>
			switch (*fmt) {
    14d4:	2870      	cmp	r0, #112	; 0x70
    14d6:	d072      	beq.n	15be <_vprintk+0x15e>
    14d8:	d806      	bhi.n	14e8 <_vprintk+0x88>
    14da:	2869      	cmp	r0, #105	; 0x69
    14dc:	d041      	beq.n	1562 <_vprintk+0x102>
    14de:	286c      	cmp	r0, #108	; 0x6c
    14e0:	d03c      	beq.n	155c <_vprintk+0xfc>
    14e2:	2868      	cmp	r0, #104	; 0x68
    14e4:	d0d5      	beq.n	1492 <_vprintk+0x32>
    14e6:	e7ee      	b.n	14c6 <_vprintk+0x66>
    14e8:	2875      	cmp	r0, #117	; 0x75
    14ea:	d058      	beq.n	159e <_vprintk+0x13e>
    14ec:	d817      	bhi.n	151e <_vprintk+0xbe>
    14ee:	2873      	cmp	r0, #115	; 0x73
    14f0:	d1e9      	bne.n	14c6 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    14f2:	6823      	ldr	r3, [r4, #0]
    14f4:	f104 0b04 	add.w	fp, r4, #4
    14f8:	461c      	mov	r4, r3
				while (*s)
    14fa:	4625      	mov	r5, r4
    14fc:	f815 0b01 	ldrb.w	r0, [r5], #1
    1500:	2800      	cmp	r0, #0
    1502:	f040 80bf 	bne.w	1684 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    1506:	f1b8 0f03 	cmp.w	r8, #3
    150a:	f040 80d5 	bne.w	16b8 <_vprintk+0x258>
					int remaining = min_width - (s - start);
    150e:	1ae4      	subs	r4, r4, r3
    1510:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    1514:	2c00      	cmp	r4, #0
    1516:	f300 80bb 	bgt.w	1690 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    151a:	465c      	mov	r4, fp
    151c:	e03d      	b.n	159a <_vprintk+0x13a>
			switch (*fmt) {
    151e:	2878      	cmp	r0, #120	; 0x78
    1520:	d057      	beq.n	15d2 <_vprintk+0x172>
    1522:	287a      	cmp	r0, #122	; 0x7a
    1524:	e7de      	b.n	14e4 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    1526:	f04f 0803 	mov.w	r8, #3
    152a:	e7b2      	b.n	1492 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    152c:	f1b9 0f00 	cmp.w	r9, #0
    1530:	da0e      	bge.n	1550 <_vprintk+0xf0>
    1532:	f1b8 0f00 	cmp.w	r8, #0
    1536:	f000 80bc 	beq.w	16b2 <_vprintk+0x252>
					min_width = *fmt - '0';
    153a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    153e:	f1b8 0f00 	cmp.w	r8, #0
    1542:	bf08      	it	eq
    1544:	f04f 0802 	moveq.w	r8, #2
    1548:	e7a3      	b.n	1492 <_vprintk+0x32>
				if (min_width < 0) {
    154a:	f1b9 0f00 	cmp.w	r9, #0
    154e:	dbf4      	blt.n	153a <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    1550:	230a      	movs	r3, #10
    1552:	fb03 0909 	mla	r9, r3, r9, r0
    1556:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    155a:	e7f0      	b.n	153e <_vprintk+0xde>
				long_ctr++;
    155c:	f10a 0a01 	add.w	sl, sl, #1
    1560:	e797      	b.n	1492 <_vprintk+0x32>
				if (long_ctr < 2) {
    1562:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    1566:	bfc5      	ittet	gt
    1568:	3407      	addgt	r4, #7
    156a:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    156e:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    1570:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    1572:	bfd4      	ite	le
    1574:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    1576:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    157a:	2d00      	cmp	r5, #0
    157c:	da05      	bge.n	158a <_vprintk+0x12a>
					out((int)'-', ctx);
    157e:	4639      	mov	r1, r7
    1580:	202d      	movs	r0, #45	; 0x2d
    1582:	47b0      	blx	r6
					d = -d;
    1584:	426d      	negs	r5, r5
					min_width--;
    1586:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    158a:	f8cd 9000 	str.w	r9, [sp]
    158e:	4643      	mov	r3, r8
    1590:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    1592:	4639      	mov	r1, r7
    1594:	4630      	mov	r0, r6
    1596:	f7ff fef7 	bl	1388 <_printk_dec_ulong>
			might_format = 0;
    159a:	2500      	movs	r5, #0
				break;
    159c:	e779      	b.n	1492 <_vprintk+0x32>
				if (long_ctr < 2) {
    159e:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    15a2:	bfc5      	ittet	gt
    15a4:	3407      	addgt	r4, #7
    15a6:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    15aa:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    15ac:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    15ae:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    15b2:	bfcc      	ite	gt
    15b4:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    15b8:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    15ba:	4643      	mov	r3, r8
    15bc:	e7e9      	b.n	1592 <_vprintk+0x132>
				  out('0', ctx);
    15be:	4639      	mov	r1, r7
    15c0:	2030      	movs	r0, #48	; 0x30
    15c2:	47b0      	blx	r6
				  out('x', ctx);
    15c4:	4639      	mov	r1, r7
    15c6:	2078      	movs	r0, #120	; 0x78
    15c8:	47b0      	blx	r6
				  min_width = 8;
    15ca:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    15ce:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    15d2:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    15d6:	bfc7      	ittee	gt
    15d8:	3407      	addgt	r4, #7
    15da:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    15de:	6823      	ldrle	r3, [r4, #0]
    15e0:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    15e2:	bfc2      	ittt	gt
    15e4:	f103 0408 	addgt.w	r4, r3, #8
    15e8:	681b      	ldrgt	r3, [r3, #0]
    15ea:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    15ec:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    15f0:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    15f4:	bfd8      	it	le
    15f6:	3404      	addle	r4, #4
	int digits = 0;
    15f8:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    15fa:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    15fc:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    15fe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    1602:	9b05      	ldr	r3, [sp, #20]
    1604:	ea4f 008b 	mov.w	r0, fp, lsl #2
    1608:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    160c:	f010 000f 	ands.w	r0, r0, #15
    1610:	d109      	bne.n	1626 <_vprintk+0x1c6>
    1612:	9b07      	ldr	r3, [sp, #28]
    1614:	b913      	cbnz	r3, 161c <_vprintk+0x1bc>
    1616:	f1bb 0f00 	cmp.w	fp, #0
    161a:	d122      	bne.n	1662 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    161c:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1620:	e007      	b.n	1632 <_vprintk+0x1d2>
	for (; size; size--) {
    1622:	9a06      	ldr	r2, [sp, #24]
    1624:	e7eb      	b.n	15fe <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    1626:	2809      	cmp	r0, #9
    1628:	bf8c      	ite	hi
    162a:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    162e:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    1632:	4639      	mov	r1, r7
    1634:	4470      	add	r0, lr
    1636:	9206      	str	r2, [sp, #24]
    1638:	47b0      	blx	r6
			digits++;
    163a:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    163c:	9507      	str	r5, [sp, #28]
			digits++;
    163e:	3301      	adds	r3, #1
    1640:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1642:	f1bb 0f00 	cmp.w	fp, #0
    1646:	d1ec      	bne.n	1622 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    1648:	f1b8 0f03 	cmp.w	r8, #3
    164c:	d1a5      	bne.n	159a <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    164e:	9b03      	ldr	r3, [sp, #12]
    1650:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1654:	2d00      	cmp	r5, #0
    1656:	dda0      	ble.n	159a <_vprintk+0x13a>
			out(' ', ctx);
    1658:	4639      	mov	r1, r7
    165a:	2020      	movs	r0, #32
    165c:	47b0      	blx	r6
    165e:	3d01      	subs	r5, #1
    1660:	e7f8      	b.n	1654 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    1662:	1e53      	subs	r3, r2, #1
    1664:	4591      	cmp	r9, r2
    1666:	9306      	str	r3, [sp, #24]
    1668:	dbeb      	blt.n	1642 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    166a:	f1b8 0f01 	cmp.w	r8, #1
    166e:	d103      	bne.n	1678 <_vprintk+0x218>
				out('0', ctx);
    1670:	4639      	mov	r1, r7
    1672:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1674:	47b0      	blx	r6
    1676:	e7e4      	b.n	1642 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    1678:	f1b8 0f02 	cmp.w	r8, #2
    167c:	d1e1      	bne.n	1642 <_vprintk+0x1e2>
				out(' ', ctx);
    167e:	4639      	mov	r1, r7
    1680:	2020      	movs	r0, #32
    1682:	e7f7      	b.n	1674 <_vprintk+0x214>
					out((int)(*s++), ctx);
    1684:	4639      	mov	r1, r7
    1686:	9303      	str	r3, [sp, #12]
    1688:	462c      	mov	r4, r5
    168a:	47b0      	blx	r6
    168c:	9b03      	ldr	r3, [sp, #12]
    168e:	e734      	b.n	14fa <_vprintk+0x9a>
						out(' ', ctx);
    1690:	4639      	mov	r1, r7
    1692:	2020      	movs	r0, #32
    1694:	47b0      	blx	r6
    1696:	3c01      	subs	r4, #1
    1698:	e73c      	b.n	1514 <_vprintk+0xb4>
				out(c, ctx);
    169a:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    169c:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    169e:	4639      	mov	r1, r7
    16a0:	47b0      	blx	r6
				int c = va_arg(ap, int);
    16a2:	462c      	mov	r4, r5
    16a4:	e779      	b.n	159a <_vprintk+0x13a>
				long_ctr = 0;
    16a6:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    16a8:	46a8      	mov	r8, r5
				min_width = -1;
    16aa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    16ae:	2501      	movs	r5, #1
    16b0:	e6ef      	b.n	1492 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    16b2:	f04f 0801 	mov.w	r8, #1
    16b6:	e6ec      	b.n	1492 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    16b8:	465c      	mov	r4, fp
			might_format = 0;
    16ba:	4605      	mov	r5, r0
    16bc:	e6e9      	b.n	1492 <_vprintk+0x32>
	...

000016c0 <vprintk>:
{
    16c0:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    16c2:	ac02      	add	r4, sp, #8
    16c4:	2300      	movs	r3, #0
    16c6:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    16ca:	4602      	mov	r2, r0
    16cc:	460b      	mov	r3, r1
    16ce:	4803      	ldr	r0, [pc, #12]	; (16dc <vprintk+0x1c>)
    16d0:	4621      	mov	r1, r4
    16d2:	f7ff fec5 	bl	1460 <_vprintk>
}
    16d6:	9801      	ldr	r0, [sp, #4]
    16d8:	b002      	add	sp, #8
    16da:	bd10      	pop	{r4, pc}
    16dc:	00001379 	.word	0x00001379

000016e0 <printk>:
{
    16e0:	b40f      	push	{r0, r1, r2, r3}
    16e2:	b507      	push	{r0, r1, r2, lr}
    16e4:	a904      	add	r1, sp, #16
    16e6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    16ea:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    16ec:	f7ff ffe8 	bl	16c0 <vprintk>
}
    16f0:	b003      	add	sp, #12
    16f2:	f85d eb04 	ldr.w	lr, [sp], #4
    16f6:	b004      	add	sp, #16
    16f8:	4770      	bx	lr
	...

000016fc <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    16fc:	b40c      	push	{r2, r3}
    16fe:	b530      	push	{r4, r5, lr}
    1700:	b085      	sub	sp, #20
    1702:	ab08      	add	r3, sp, #32
    1704:	4604      	mov	r4, r0
    1706:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    170a:	9001      	str	r0, [sp, #4]
    170c:	9102      	str	r1, [sp, #8]
    170e:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1710:	a901      	add	r1, sp, #4
    1712:	4807      	ldr	r0, [pc, #28]	; (1730 <snprintk+0x34>)
	va_start(ap, fmt);
    1714:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    1716:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    1718:	f7ff fea2 	bl	1460 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    171c:	9803      	ldr	r0, [sp, #12]
    171e:	9b02      	ldr	r3, [sp, #8]
    1720:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1722:	bfb8      	it	lt
    1724:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1726:	b005      	add	sp, #20
    1728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    172c:	b002      	add	sp, #8
    172e:	4770      	bx	lr
    1730:	00001429 	.word	0x00001429

00001734 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES_CMAC, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    1734:	4770      	bx	lr

00001736 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    1736:	428b      	cmp	r3, r1
{
    1738:	b538      	push	{r3, r4, r5, lr}
    173a:	4615      	mov	r5, r2
    173c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    173e:	d805      	bhi.n	174c <_copy+0x16>
		(void)memcpy(to, from, from_len);
    1740:	461a      	mov	r2, r3
    1742:	4629      	mov	r1, r5
    1744:	f7fe ff60 	bl	608 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
    1748:	4620      	mov	r0, r4
    174a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
    174c:	2400      	movs	r4, #0
    174e:	e7fb      	b.n	1748 <_copy+0x12>

00001750 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
    1750:	f7fe bf86 	b.w	660 <memset>

00001754 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    1754:	09c3      	lsrs	r3, r0, #7
    1756:	005a      	lsls	r2, r3, #1
    1758:	4413      	add	r3, r2
    175a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    175e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    1762:	b2c0      	uxtb	r0, r0
    1764:	4770      	bx	lr

00001766 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    1766:	78cb      	ldrb	r3, [r1, #3]
    1768:	7802      	ldrb	r2, [r0, #0]
    176a:	4053      	eors	r3, r2
    176c:	7003      	strb	r3, [r0, #0]
    176e:	884b      	ldrh	r3, [r1, #2]
    1770:	7842      	ldrb	r2, [r0, #1]
    1772:	4053      	eors	r3, r2
    1774:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    1776:	680a      	ldr	r2, [r1, #0]
    1778:	7883      	ldrb	r3, [r0, #2]
    177a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    177e:	7083      	strb	r3, [r0, #2]
    1780:	680a      	ldr	r2, [r1, #0]
    1782:	78c3      	ldrb	r3, [r0, #3]
    1784:	4053      	eors	r3, r2
    1786:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    1788:	79cb      	ldrb	r3, [r1, #7]
    178a:	7902      	ldrb	r2, [r0, #4]
    178c:	4053      	eors	r3, r2
    178e:	7103      	strb	r3, [r0, #4]
    1790:	88cb      	ldrh	r3, [r1, #6]
    1792:	7942      	ldrb	r2, [r0, #5]
    1794:	4053      	eors	r3, r2
    1796:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    1798:	684a      	ldr	r2, [r1, #4]
    179a:	7983      	ldrb	r3, [r0, #6]
    179c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    17a0:	7183      	strb	r3, [r0, #6]
    17a2:	684a      	ldr	r2, [r1, #4]
    17a4:	79c3      	ldrb	r3, [r0, #7]
    17a6:	4053      	eors	r3, r2
    17a8:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    17aa:	7acb      	ldrb	r3, [r1, #11]
    17ac:	7a02      	ldrb	r2, [r0, #8]
    17ae:	4053      	eors	r3, r2
    17b0:	7203      	strb	r3, [r0, #8]
    17b2:	7a42      	ldrb	r2, [r0, #9]
    17b4:	894b      	ldrh	r3, [r1, #10]
    17b6:	4053      	eors	r3, r2
    17b8:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    17ba:	688a      	ldr	r2, [r1, #8]
    17bc:	7a83      	ldrb	r3, [r0, #10]
    17be:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    17c2:	7283      	strb	r3, [r0, #10]
    17c4:	688a      	ldr	r2, [r1, #8]
    17c6:	7ac3      	ldrb	r3, [r0, #11]
    17c8:	4053      	eors	r3, r2
    17ca:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    17cc:	7bcb      	ldrb	r3, [r1, #15]
    17ce:	7b02      	ldrb	r2, [r0, #12]
    17d0:	4053      	eors	r3, r2
    17d2:	7303      	strb	r3, [r0, #12]
    17d4:	89cb      	ldrh	r3, [r1, #14]
    17d6:	7b42      	ldrb	r2, [r0, #13]
    17d8:	4053      	eors	r3, r2
    17da:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    17dc:	68ca      	ldr	r2, [r1, #12]
    17de:	7b83      	ldrb	r3, [r0, #14]
    17e0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
    17e4:	7383      	strb	r3, [r0, #14]
    17e6:	68ca      	ldr	r2, [r1, #12]
    17e8:	7bc3      	ldrb	r3, [r0, #15]
    17ea:	4053      	eors	r3, r2
    17ec:	73c3      	strb	r3, [r0, #15]
    17ee:	4770      	bx	lr

000017f0 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    17f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    17f2:	7802      	ldrb	r2, [r0, #0]
    17f4:	f88d 2000 	strb.w	r2, [sp]
    17f8:	7942      	ldrb	r2, [r0, #5]
    17fa:	f88d 2001 	strb.w	r2, [sp, #1]
    17fe:	7a82      	ldrb	r2, [r0, #10]
    1800:	f88d 2002 	strb.w	r2, [sp, #2]
    1804:	7bc2      	ldrb	r2, [r0, #15]
    1806:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    180a:	7902      	ldrb	r2, [r0, #4]
    180c:	f88d 2004 	strb.w	r2, [sp, #4]
    1810:	7a42      	ldrb	r2, [r0, #9]
    1812:	f88d 2005 	strb.w	r2, [sp, #5]
    1816:	7b82      	ldrb	r2, [r0, #14]
    1818:	f88d 2006 	strb.w	r2, [sp, #6]
    181c:	78c2      	ldrb	r2, [r0, #3]
    181e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    1822:	7a02      	ldrb	r2, [r0, #8]
    1824:	f88d 2008 	strb.w	r2, [sp, #8]
    1828:	7b42      	ldrb	r2, [r0, #13]
    182a:	f88d 2009 	strb.w	r2, [sp, #9]
    182e:	7882      	ldrb	r2, [r0, #2]
    1830:	f88d 200a 	strb.w	r2, [sp, #10]
    1834:	79c2      	ldrb	r2, [r0, #7]
    1836:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    183a:	7b02      	ldrb	r2, [r0, #12]
    183c:	f88d 200c 	strb.w	r2, [sp, #12]
    1840:	7842      	ldrb	r2, [r0, #1]
    1842:	f88d 200d 	strb.w	r2, [sp, #13]
    1846:	7ac3      	ldrb	r3, [r0, #11]
    1848:	7982      	ldrb	r2, [r0, #6]
    184a:	f88d 200e 	strb.w	r2, [sp, #14]
    184e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    1852:	2310      	movs	r3, #16
    1854:	466a      	mov	r2, sp
    1856:	4619      	mov	r1, r3
    1858:	f7ff ff6d 	bl	1736 <_copy>
}
    185c:	b005      	add	sp, #20
    185e:	f85d fb04 	ldr.w	pc, [sp], #4

00001862 <mult_row_column>:
{
    1862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1864:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    1866:	7808      	ldrb	r0, [r1, #0]
{
    1868:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    186a:	f7ff ff73 	bl	1754 <_double_byte>
    186e:	4605      	mov	r5, r0
    1870:	7860      	ldrb	r0, [r4, #1]
    1872:	f7ff ff6f 	bl	1754 <_double_byte>
    1876:	78a2      	ldrb	r2, [r4, #2]
    1878:	7863      	ldrb	r3, [r4, #1]
    187a:	4053      	eors	r3, r2
    187c:	78e2      	ldrb	r2, [r4, #3]
    187e:	4053      	eors	r3, r2
    1880:	405d      	eors	r5, r3
    1882:	4045      	eors	r5, r0
    1884:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    1886:	7860      	ldrb	r0, [r4, #1]
    1888:	7827      	ldrb	r7, [r4, #0]
    188a:	f7ff ff63 	bl	1754 <_double_byte>
    188e:	4605      	mov	r5, r0
    1890:	78a0      	ldrb	r0, [r4, #2]
    1892:	f7ff ff5f 	bl	1754 <_double_byte>
    1896:	78a3      	ldrb	r3, [r4, #2]
    1898:	405f      	eors	r7, r3
    189a:	78e3      	ldrb	r3, [r4, #3]
    189c:	405f      	eors	r7, r3
    189e:	407d      	eors	r5, r7
    18a0:	4045      	eors	r5, r0
    18a2:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    18a4:	78a0      	ldrb	r0, [r4, #2]
    18a6:	7865      	ldrb	r5, [r4, #1]
    18a8:	7827      	ldrb	r7, [r4, #0]
    18aa:	f7ff ff53 	bl	1754 <_double_byte>
    18ae:	406f      	eors	r7, r5
    18b0:	4605      	mov	r5, r0
    18b2:	78e0      	ldrb	r0, [r4, #3]
    18b4:	f7ff ff4e 	bl	1754 <_double_byte>
    18b8:	78e3      	ldrb	r3, [r4, #3]
    18ba:	405f      	eors	r7, r3
    18bc:	407d      	eors	r5, r7
    18be:	4045      	eors	r5, r0
    18c0:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    18c2:	7820      	ldrb	r0, [r4, #0]
    18c4:	f7ff ff46 	bl	1754 <_double_byte>
    18c8:	7863      	ldrb	r3, [r4, #1]
    18ca:	7825      	ldrb	r5, [r4, #0]
    18cc:	405d      	eors	r5, r3
    18ce:	78a3      	ldrb	r3, [r4, #2]
    18d0:	405d      	eors	r5, r3
    18d2:	4045      	eors	r5, r0
    18d4:	78e0      	ldrb	r0, [r4, #3]
    18d6:	f7ff ff3d 	bl	1754 <_double_byte>
    18da:	b2ed      	uxtb	r5, r5
    18dc:	4068      	eors	r0, r5
    18de:	70f0      	strb	r0, [r6, #3]
    18e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000018e4 <tc_aes128_set_encrypt_key>:
{
    18e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    18e6:	4e28      	ldr	r6, [pc, #160]	; (1988 <tc_aes128_set_encrypt_key+0xa4>)
{
    18e8:	4607      	mov	r7, r0
    18ea:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    18ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    18ee:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    18f0:	ad01      	add	r5, sp, #4
    18f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    18f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    18f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    18f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    18fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    1900:	2f00      	cmp	r7, #0
    1902:	d03c      	beq.n	197e <tc_aes128_set_encrypt_key+0x9a>
	} else if (k == (const uint8_t *) 0) {
    1904:	2c00      	cmp	r4, #0
    1906:	d03c      	beq.n	1982 <tc_aes128_set_encrypt_key+0x9e>
    1908:	1f38      	subs	r0, r7, #4
    190a:	4621      	mov	r1, r4
    190c:	4602      	mov	r2, r0
    190e:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    1910:	784b      	ldrb	r3, [r1, #1]
    1912:	780d      	ldrb	r5, [r1, #0]
    1914:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    1916:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    191a:	78cd      	ldrb	r5, [r1, #3]
    191c:	432b      	orrs	r3, r5
    191e:	788d      	ldrb	r5, [r1, #2]
    1920:	3104      	adds	r1, #4
    1922:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    1926:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    1928:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    192c:	d1f0      	bne.n	1910 <tc_aes128_set_encrypt_key+0x2c>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    192e:	4c17      	ldr	r4, [pc, #92]	; (198c <tc_aes128_set_encrypt_key+0xa8>)
    1930:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    1932:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    1934:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    1936:	d118      	bne.n	196a <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
    1938:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    193c:	0e1a      	lsrs	r2, r3, #24
    193e:	5ca5      	ldrb	r5, [r4, r2]
    1940:	b2da      	uxtb	r2, r3
    1942:	5ca2      	ldrb	r2, [r4, r2]
    1944:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    1948:	f3c3 4507 	ubfx	r5, r3, #16, #8
    194c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    1950:	5d65      	ldrb	r5, [r4, r5]
    1952:	5ce3      	ldrb	r3, [r4, r3]
    1954:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    1958:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    195c:	ad0c      	add	r5, sp, #48	; 0x30
    195e:	f021 0303 	bic.w	r3, r1, #3
    1962:	442b      	add	r3, r5
    1964:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    1968:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    196a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    196e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    1970:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    1972:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    1974:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    1976:	d1dc      	bne.n	1932 <tc_aes128_set_encrypt_key+0x4e>
	return TC_CRYPTO_SUCCESS;
    1978:	2001      	movs	r0, #1
}
    197a:	b00d      	add	sp, #52	; 0x34
    197c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    197e:	4638      	mov	r0, r7
    1980:	e7fb      	b.n	197a <tc_aes128_set_encrypt_key+0x96>
    1982:	4620      	mov	r0, r4
    1984:	e7f9      	b.n	197a <tc_aes128_set_encrypt_key+0x96>
    1986:	bf00      	nop
    1988:	0001836c 	.word	0x0001836c
    198c:	00018adc 	.word	0x00018adc

00001990 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    1990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1994:	4615      	mov	r5, r2
    1996:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    1998:	4680      	mov	r8, r0
    199a:	2800      	cmp	r0, #0
    199c:	d05b      	beq.n	1a56 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    199e:	2900      	cmp	r1, #0
    19a0:	d05a      	beq.n	1a58 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    19a2:	2a00      	cmp	r2, #0
    19a4:	d05a      	beq.n	1a5c <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    19a6:	2310      	movs	r3, #16
    19a8:	460a      	mov	r2, r1
    19aa:	4668      	mov	r0, sp
    19ac:	4619      	mov	r1, r3
    19ae:	f7ff fec2 	bl	1736 <_copy>
	add_round_key(state, s->words);
    19b2:	4629      	mov	r1, r5
    19b4:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    19b6:	4c2a      	ldr	r4, [pc, #168]	; (1a60 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    19b8:	f7ff fed5 	bl	1766 <add_round_key>
    19bc:	f105 0710 	add.w	r7, r5, #16
    19c0:	46a1      	mov	r9, r4
    19c2:	35a0      	adds	r5, #160	; 0xa0
{
    19c4:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    19c6:	f81d 3006 	ldrb.w	r3, [sp, r6]
    19ca:	5ce3      	ldrb	r3, [r4, r3]
    19cc:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    19d0:	3601      	adds	r6, #1
    19d2:	2e10      	cmp	r6, #16
    19d4:	d1f7      	bne.n	19c6 <tc_aes_encrypt+0x36>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    19d6:	4668      	mov	r0, sp
    19d8:	f7ff ff0a 	bl	17f0 <shift_rows>
	mult_row_column(t, s);
    19dc:	4669      	mov	r1, sp
    19de:	a804      	add	r0, sp, #16
    19e0:	f7ff ff3f 	bl	1862 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    19e4:	a901      	add	r1, sp, #4
    19e6:	a805      	add	r0, sp, #20
    19e8:	f7ff ff3b 	bl	1862 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    19ec:	a902      	add	r1, sp, #8
    19ee:	a806      	add	r0, sp, #24
    19f0:	f7ff ff37 	bl	1862 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    19f4:	a903      	add	r1, sp, #12
    19f6:	a807      	add	r0, sp, #28
    19f8:	f7ff ff33 	bl	1862 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    19fc:	4633      	mov	r3, r6
    19fe:	aa04      	add	r2, sp, #16
    1a00:	4631      	mov	r1, r6
    1a02:	4668      	mov	r0, sp
    1a04:	f7ff fe97 	bl	1736 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    1a08:	4639      	mov	r1, r7
    1a0a:	4668      	mov	r0, sp
    1a0c:	3710      	adds	r7, #16
    1a0e:	f7ff feaa 	bl	1766 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    1a12:	42bd      	cmp	r5, r7
    1a14:	d1d6      	bne.n	19c4 <tc_aes_encrypt+0x34>
    1a16:	2600      	movs	r6, #0
		s[i] = sbox[s[i]];
    1a18:	f81d 3006 	ldrb.w	r3, [sp, r6]
    1a1c:	f819 3003 	ldrb.w	r3, [r9, r3]
    1a20:	f80d 3006 	strb.w	r3, [sp, r6]
	for (i = 0; i < (Nb * Nk); ++i) {
    1a24:	3601      	adds	r6, #1
    1a26:	2e10      	cmp	r6, #16
    1a28:	d1f6      	bne.n	1a18 <tc_aes_encrypt+0x88>
	}

	sub_bytes(state);
	shift_rows(state);
    1a2a:	4668      	mov	r0, sp
    1a2c:	f7ff fee0 	bl	17f0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    1a30:	4629      	mov	r1, r5
    1a32:	4668      	mov	r0, sp
    1a34:	f7ff fe97 	bl	1766 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    1a38:	4633      	mov	r3, r6
    1a3a:	466a      	mov	r2, sp
    1a3c:	4631      	mov	r1, r6
    1a3e:	4640      	mov	r0, r8
    1a40:	f7ff fe79 	bl	1736 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    1a44:	4668      	mov	r0, sp
    1a46:	4632      	mov	r2, r6
    1a48:	2100      	movs	r1, #0
    1a4a:	f7ff fe81 	bl	1750 <_set>

	return TC_CRYPTO_SUCCESS;
    1a4e:	2001      	movs	r0, #1
}
    1a50:	b009      	add	sp, #36	; 0x24
    1a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1a56:	e7fb      	b.n	1a50 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
    1a58:	4608      	mov	r0, r1
    1a5a:	e7f9      	b.n	1a50 <tc_aes_encrypt+0xc0>
    1a5c:	4610      	mov	r0, r2
    1a5e:	e7f7      	b.n	1a50 <tc_aes_encrypt+0xc0>
    1a60:	00018adc 	.word	0x00018adc

00001a64 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    1a64:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1a66:	f991 3000 	ldrsb.w	r3, [r1]
    1a6a:	2b00      	cmp	r3, #0
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    1a6c:	f101 020f 	add.w	r2, r1, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    1a70:	bfb4      	ite	lt
    1a72:	2387      	movlt	r3, #135	; 0x87
    1a74:	2300      	movge	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    1a76:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    1a78:	7814      	ldrb	r4, [r2, #0]
		if (x == in) {
    1a7a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
    1a7c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    1a80:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
    1a84:	d003      	beq.n	1a8e <gf_double+0x2a>
			break;
		}
		carry = *x-- >> 7;
    1a86:	f812 3901 	ldrb.w	r3, [r2], #-1
    1a8a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    1a8c:	e7f4      	b.n	1a78 <gf_double+0x14>
    1a8e:	bd10      	pop	{r4, pc}

00001a90 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
    1a90:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
    1a92:	b128      	cbz	r0, 1aa0 <tc_cmac_erase+0x10>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    1a94:	2258      	movs	r2, #88	; 0x58
    1a96:	2100      	movs	r1, #0
    1a98:	f7ff fe5a 	bl	1750 <_set>

	return TC_CRYPTO_SUCCESS;
    1a9c:	2001      	movs	r0, #1
    1a9e:	bd08      	pop	{r3, pc}
}
    1aa0:	bd08      	pop	{r3, pc}

00001aa2 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
    1aa2:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1aa4:	4604      	mov	r4, r0
    1aa6:	b190      	cbz	r0, 1ace <tc_cmac_init+0x2c>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1aa8:	2210      	movs	r2, #16
    1aaa:	2100      	movs	r1, #0
    1aac:	f7ff fe50 	bl	1750 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    1ab0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1ab4:	2210      	movs	r2, #16
    1ab6:	2100      	movs	r1, #0
    1ab8:	f7ff fe4a 	bl	1750 <_set>
	s->leftover_offset = 0;
    1abc:	2300      	movs	r3, #0
    1abe:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    1ac0:	2200      	movs	r2, #0
    1ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1ac6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    1aca:	2001      	movs	r0, #1
    1acc:	bd10      	pop	{r4, pc}
}
    1ace:	bd10      	pop	{r4, pc}

00001ad0 <tc_cmac_setup>:
{
    1ad0:	b570      	push	{r4, r5, r6, lr}
    1ad2:	460d      	mov	r5, r1
    1ad4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
    1ad6:	4604      	mov	r4, r0
    1ad8:	b318      	cbz	r0, 1b22 <tc_cmac_setup+0x52>
    1ada:	b319      	cbz	r1, 1b24 <tc_cmac_setup+0x54>
	_set(s, 0, sizeof(*s));
    1adc:	2258      	movs	r2, #88	; 0x58
    1ade:	2100      	movs	r1, #0
    1ae0:	f7ff fe36 	bl	1750 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
    1ae4:	4629      	mov	r1, r5
	s->sched = sched;
    1ae6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    1ae8:	4630      	mov	r0, r6
    1aea:	f7ff fefb 	bl	18e4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    1aee:	4620      	mov	r0, r4
    1af0:	2210      	movs	r2, #16
    1af2:	2100      	movs	r1, #0
    1af4:	f7ff fe2c 	bl	1750 <_set>
	gf_double (s->K1, s->iv);
    1af8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    1afc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1afe:	4621      	mov	r1, r4
    1b00:	4620      	mov	r0, r4
    1b02:	f7ff ff45 	bl	1990 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    1b06:	4621      	mov	r1, r4
    1b08:	4628      	mov	r0, r5
    1b0a:	f7ff ffab 	bl	1a64 <gf_double>
	gf_double (s->K2, s->K1);
    1b0e:	4629      	mov	r1, r5
    1b10:	f104 0020 	add.w	r0, r4, #32
    1b14:	f7ff ffa6 	bl	1a64 <gf_double>
	tc_cmac_init(s);
    1b18:	4620      	mov	r0, r4
    1b1a:	f7ff ffc2 	bl	1aa2 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    1b1e:	2001      	movs	r0, #1
    1b20:	bd70      	pop	{r4, r5, r6, pc}
    1b22:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    1b24:	4608      	mov	r0, r1
}
    1b26:	bd70      	pop	{r4, r5, r6, pc}

00001b28 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
    1b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b2a:	460d      	mov	r5, r1
    1b2c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    1b2e:	4604      	mov	r4, r0
    1b30:	2800      	cmp	r0, #0
    1b32:	d05b      	beq.n	1bec <tc_cmac_update+0xc4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    1b34:	b90a      	cbnz	r2, 1b3a <tc_cmac_update+0x12>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    1b36:	2001      	movs	r0, #1
    1b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (data == (const uint8_t *) 0) {
    1b3a:	2900      	cmp	r1, #0
    1b3c:	d056      	beq.n	1bec <tc_cmac_update+0xc4>
	if (s->countdown == 0) {
    1b3e:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    1b42:	ea52 0103 	orrs.w	r1, r2, r3
    1b46:	d051      	beq.n	1bec <tc_cmac_update+0xc4>
	s->countdown--;
    1b48:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    1b4c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    1b50:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
    1b54:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1b56:	b348      	cbz	r0, 1bac <tc_cmac_update+0x84>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    1b58:	f1c0 0710 	rsb	r7, r0, #16
		if (data_length < remaining_space) {
    1b5c:	42be      	cmp	r6, r7
    1b5e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    1b62:	d209      	bcs.n	1b78 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    1b64:	4633      	mov	r3, r6
    1b66:	4631      	mov	r1, r6
    1b68:	462a      	mov	r2, r5
    1b6a:	4420      	add	r0, r4
    1b6c:	f7ff fde3 	bl	1736 <_copy>
			s->leftover_offset += data_length;
    1b70:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1b72:	441e      	add	r6, r3
		s->leftover_offset = data_length;
    1b74:	6466      	str	r6, [r4, #68]	; 0x44
    1b76:	e7de      	b.n	1b36 <tc_cmac_update+0xe>
		_copy(&s->leftover[s->leftover_offset],
    1b78:	463b      	mov	r3, r7
    1b7a:	462a      	mov	r2, r5
    1b7c:	4639      	mov	r1, r7
    1b7e:	4420      	add	r0, r4
    1b80:	f7ff fdd9 	bl	1736 <_copy>
		s->leftover_offset = 0;
    1b84:	2300      	movs	r3, #0
    1b86:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
    1b88:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    1b8a:	443d      	add	r5, r7
    1b8c:	1e63      	subs	r3, r4, #1
    1b8e:	f104 000f 	add.w	r0, r4, #15
			s->iv[i] ^= s->leftover[i];
    1b92:	785a      	ldrb	r2, [r3, #1]
    1b94:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    1b98:	404a      	eors	r2, r1
    1b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1b9e:	4283      	cmp	r3, r0
    1ba0:	d1f7      	bne.n	1b92 <tc_cmac_update+0x6a>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1ba2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1ba4:	4621      	mov	r1, r4
    1ba6:	4620      	mov	r0, r4
    1ba8:	f7ff fef2 	bl	1990 <tc_aes_encrypt>
    1bac:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
    1bb0:	2e10      	cmp	r6, #16
    1bb2:	d911      	bls.n	1bd8 <tc_cmac_update+0xb0>
    1bb4:	1e63      	subs	r3, r4, #1
    1bb6:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
    1bb8:	785a      	ldrb	r2, [r3, #1]
    1bba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    1bbe:	4042      	eors	r2, r0
    1bc0:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1bc4:	42bb      	cmp	r3, r7
    1bc6:	d1f7      	bne.n	1bb8 <tc_cmac_update+0x90>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    1bc8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1bca:	4621      	mov	r1, r4
    1bcc:	4620      	mov	r0, r4
    1bce:	f7ff fedf 	bl	1990 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    1bd2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    1bd4:	3e10      	subs	r6, #16
    1bd6:	e7eb      	b.n	1bb0 <tc_cmac_update+0x88>
	if (data_length > 0) {
    1bd8:	2e00      	cmp	r6, #0
    1bda:	d0ac      	beq.n	1b36 <tc_cmac_update+0xe>
		_copy(s->leftover, data_length, data, data_length);
    1bdc:	4633      	mov	r3, r6
    1bde:	462a      	mov	r2, r5
    1be0:	4631      	mov	r1, r6
    1be2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1be6:	f7ff fda6 	bl	1736 <_copy>
    1bea:	e7c3      	b.n	1b74 <tc_cmac_update+0x4c>
		return TC_CRYPTO_FAIL;
    1bec:	2000      	movs	r0, #0
}
    1bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001bf0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
    1bf0:	b570      	push	{r4, r5, r6, lr}
    1bf2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    1bf4:	4605      	mov	r5, r0
    1bf6:	b370      	cbz	r0, 1c56 <tc_cmac_final+0x66>
    1bf8:	b371      	cbz	r1, 1c58 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    1bfa:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    1bfc:	2a10      	cmp	r2, #16
    1bfe:	d11a      	bne.n	1c36 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
    1c00:	f101 0210 	add.w	r2, r1, #16
    1c04:	1e61      	subs	r1, r4, #1
    1c06:	3a01      	subs	r2, #1
    1c08:	f104 060f 	add.w	r6, r4, #15
		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
		s->iv[i] ^= s->leftover[i] ^ k[i];
    1c0c:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    1c10:	784b      	ldrb	r3, [r1, #1]
    1c12:	4043      	eors	r3, r0
    1c14:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    1c18:	4043      	eors	r3, r0
    1c1a:	f801 3f01 	strb.w	r3, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    1c1e:	428e      	cmp	r6, r1
    1c20:	d1f4      	bne.n	1c0c <tc_cmac_final+0x1c>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    1c22:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1c24:	4621      	mov	r1, r4
    1c26:	4628      	mov	r0, r5
    1c28:	f7ff feb2 	bl	1990 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    1c2c:	4620      	mov	r0, r4
    1c2e:	f7ff ff2f 	bl	1a90 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    1c32:	2001      	movs	r0, #1
    1c34:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
    1c36:	f102 0030 	add.w	r0, r2, #48	; 0x30
    1c3a:	2100      	movs	r1, #0
    1c3c:	f1c2 0210 	rsb	r2, r2, #16
    1c40:	4420      	add	r0, r4
    1c42:	f7ff fd85 	bl	1750 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    1c46:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1c48:	4423      	add	r3, r4
    1c4a:	2280      	movs	r2, #128	; 0x80
    1c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    1c50:	f104 0220 	add.w	r2, r4, #32
    1c54:	e7d6      	b.n	1c04 <tc_cmac_final+0x14>
    1c56:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    1c58:	4608      	mov	r0, r1
}
    1c5a:	bd70      	pop	{r4, r5, r6, pc}

00001c5c <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    1c5c:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c5e:	4c11      	ldr	r4, [pc, #68]	; (1ca4 <sys_rand32_get+0x48>)
    1c60:	f3bf 8f5b 	dmb	ish
    1c64:	6820      	ldr	r0, [r4, #0]
    1c66:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1c6a:	b960      	cbnz	r0, 1c86 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    1c6c:	480e      	ldr	r0, [pc, #56]	; (1ca8 <sys_rand32_get+0x4c>)
    1c6e:	f015 f8ed 	bl	16e4c <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1c72:	f3bf 8f5b 	dmb	ish
    1c76:	e854 3f00 	ldrex	r3, [r4]
    1c7a:	e844 0200 	strex	r2, r0, [r4]
    1c7e:	2a00      	cmp	r2, #0
    1c80:	d1f9      	bne.n	1c76 <sys_rand32_get+0x1a>
    1c82:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1c86:	6843      	ldr	r3, [r0, #4]
    1c88:	2204      	movs	r2, #4
    1c8a:	681b      	ldr	r3, [r3, #0]
    1c8c:	eb0d 0102 	add.w	r1, sp, r2
    1c90:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    1c92:	2800      	cmp	r0, #0
    1c94:	da02      	bge.n	1c9c <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1c96:	f000 fd0d 	bl	26b4 <_timer_cycle_get_32>
    1c9a:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1c9c:	9801      	ldr	r0, [sp, #4]
    1c9e:	b002      	add	sp, #8
    1ca0:	bd10      	pop	{r4, pc}
    1ca2:	bf00      	nop
    1ca4:	20000088 	.word	0x20000088
    1ca8:	00018bdc 	.word	0x00018bdc

00001cac <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1cac:	280a      	cmp	r0, #10
{
    1cae:	b538      	push	{r3, r4, r5, lr}
    1cb0:	4604      	mov	r4, r0
    1cb2:	4d07      	ldr	r5, [pc, #28]	; (1cd0 <console_out+0x24>)
	if ('\n' == c) {
    1cb4:	d104      	bne.n	1cc0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1cb6:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    1cb8:	6843      	ldr	r3, [r0, #4]
    1cba:	210d      	movs	r1, #13
    1cbc:	685b      	ldr	r3, [r3, #4]
    1cbe:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    1cc0:	6828      	ldr	r0, [r5, #0]
    1cc2:	6843      	ldr	r3, [r0, #4]
    1cc4:	b2e1      	uxtb	r1, r4
    1cc6:	685b      	ldr	r3, [r3, #4]
    1cc8:	4798      	blx	r3

	return c;
}
    1cca:	4620      	mov	r0, r4
    1ccc:	bd38      	pop	{r3, r4, r5, pc}
    1cce:	bf00      	nop
    1cd0:	2000008c 	.word	0x2000008c

00001cd4 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1cd4:	4801      	ldr	r0, [pc, #4]	; (1cdc <uart_console_hook_install+0x8>)
    1cd6:	f7ff bbbd 	b.w	1454 <__printk_hook_install>
    1cda:	bf00      	nop
    1cdc:	00001cad 	.word	0x00001cad

00001ce0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1ce0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1ce2:	4804      	ldr	r0, [pc, #16]	; (1cf4 <uart_console_init+0x14>)
    1ce4:	f015 f8b2 	bl	16e4c <device_get_binding>
    1ce8:	4b03      	ldr	r3, [pc, #12]	; (1cf8 <uart_console_init+0x18>)
    1cea:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1cec:	f7ff fff2 	bl	1cd4 <uart_console_hook_install>

	return 0;
}
    1cf0:	2000      	movs	r0, #0
    1cf2:	bd08      	pop	{r3, pc}
    1cf4:	00018be6 	.word	0x00018be6
    1cf8:	2000008c 	.word	0x2000008c

00001cfc <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1cfc:	b510      	push	{r4, lr}
    1cfe:	f04f 0320 	mov.w	r3, #32
    1d02:	f3ef 8211 	mrs	r2, BASEPRI
    1d06:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1d0a:	4c11      	ldr	r4, [pc, #68]	; (1d50 <_m16src_stop+0x54>)
    1d0c:	7823      	ldrb	r3, [r4, #0]
    1d0e:	b923      	cbnz	r3, 1d1a <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1d10:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1d14:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1d18:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    1d1a:	3b01      	subs	r3, #1
    1d1c:	b2db      	uxtb	r3, r3
    1d1e:	7023      	strb	r3, [r4, #0]
    1d20:	b123      	cbz	r3, 1d2c <_m16src_stop+0x30>
    1d22:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    1d26:	f06f 000f 	mvn.w	r0, #15
    1d2a:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    1d2c:	4b09      	ldr	r3, [pc, #36]	; (1d54 <_m16src_stop+0x58>)
    1d2e:	7818      	ldrb	r0, [r3, #0]
    1d30:	2101      	movs	r1, #1
    1d32:	b128      	cbz	r0, 1d40 <_m16src_stop+0x44>
		m16src_ref++;
    1d34:	7021      	strb	r1, [r4, #0]
    1d36:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    1d3a:	f06f 000a 	mvn.w	r0, #10
    1d3e:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    1d40:	7019      	strb	r1, [r3, #0]
    1d42:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1d4a:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    1d4c:	7018      	strb	r0, [r3, #0]

	return 0;
}
    1d4e:	bd10      	pop	{r4, pc}
    1d50:	20000092 	.word	0x20000092
    1d54:	20000091 	.word	0x20000091

00001d58 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1d58:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1d5a:	2200      	movs	r2, #0
    1d5c:	4610      	mov	r0, r2
    1d5e:	2101      	movs	r1, #1
    1d60:	f7ff f996 	bl	1090 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1d64:	2000      	movs	r0, #0
    1d66:	f7ff f961 	bl	102c <_arch_irq_enable>

	return 0;
}
    1d6a:	2000      	movs	r0, #0
    1d6c:	bd08      	pop	{r3, pc}
	...

00001d70 <_m16src_start>:
{
    1d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    1d72:	f04f 0220 	mov.w	r2, #32
    1d76:	f3ef 8311 	mrs	r3, BASEPRI
    1d7a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    1d7e:	4a25      	ldr	r2, [pc, #148]	; (1e14 <_m16src_start+0xa4>)
    1d80:	7810      	ldrb	r0, [r2, #0]
    1d82:	1c44      	adds	r4, r0, #1
    1d84:	7014      	strb	r4, [r2, #0]
    1d86:	b160      	cbz	r0, 1da2 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1d88:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d90:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1d94:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1d98:	bf14      	ite	ne
    1d9a:	2000      	movne	r0, #0
    1d9c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    1da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    1da2:	4d1d      	ldr	r5, [pc, #116]	; (1e18 <_m16src_start+0xa8>)
    1da4:	782f      	ldrb	r7, [r5, #0]
    1da6:	b12f      	cbz	r7, 1db4 <_m16src_start+0x44>
		m16src_ref--;
    1da8:	7010      	strb	r0, [r2, #0]
    1daa:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    1dae:	f06f 000a 	mvn.w	r0, #10
    1db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1db4:	2601      	movs	r6, #1
    1db6:	702e      	strb	r6, [r5, #0]
    1db8:	f383 8811 	msr	BASEPRI, r3
    1dbc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    1dc0:	b319      	cbz	r1, 1e0a <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    1dc2:	4638      	mov	r0, r7
    1dc4:	f7ff f942 	bl	104c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1dc8:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1dcc:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1dd0:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1dd4:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1dd6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1dda:	b192      	cbz	r2, 1e02 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1ddc:	2200      	movs	r2, #0
    1dde:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1de2:	4a0e      	ldr	r2, [pc, #56]	; (1e1c <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1de4:	f013 0f01 	tst.w	r3, #1
    1de8:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1dec:	bf08      	it	eq
    1dee:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    1df2:	2000      	movs	r0, #0
    1df4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1df8:	f7ff f918 	bl	102c <_arch_irq_enable>
	m16src_grd = 0;
    1dfc:	2300      	movs	r3, #0
    1dfe:	702b      	strb	r3, [r5, #0]
    1e00:	e7c4      	b.n	1d8c <_m16src_start+0x1c>
			__WFE();
    1e02:	bf20      	wfe
			__SEV();
    1e04:	bf40      	sev
			__WFE();
    1e06:	bf20      	wfe
    1e08:	e7e5      	b.n	1dd6 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1e0a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1e0e:	6026      	str	r6, [r4, #0]
    1e10:	e7f4      	b.n	1dfc <_m16src_start+0x8c>
    1e12:	bf00      	nop
    1e14:	20000092 	.word	0x20000092
    1e18:	20000091 	.word	0x20000091
    1e1c:	e000e100 	.word	0xe000e100

00001e20 <_k32src_start>:
{
    1e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e22:	4606      	mov	r6, r0
    1e24:	460c      	mov	r4, r1
	__asm__ volatile(
    1e26:	f04f 0220 	mov.w	r2, #32
    1e2a:	f3ef 8311 	mrs	r3, BASEPRI
    1e2e:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    1e32:	4a2c      	ldr	r2, [pc, #176]	; (1ee4 <_k32src_start+0xc4>)
    1e34:	7815      	ldrb	r5, [r2, #0]
    1e36:	b165      	cbz	r5, 1e52 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1e38:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    1e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e40:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    1e44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    1e48:	bf0c      	ite	eq
    1e4a:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    1e4e:	2000      	movne	r0, #0
    1e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    1e52:	2701      	movs	r7, #1
    1e54:	7017      	strb	r7, [r2, #0]
    1e56:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    1e5a:	4628      	mov	r0, r5
    1e5c:	f7ff f8f6 	bl	104c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1e64:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1e66:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    1e6a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1e6e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    1e72:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1e76:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1e78:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1e7c:	b371      	cbz	r1, 1edc <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    1e7e:	0792      	lsls	r2, r2, #30
    1e80:	4f19      	ldr	r7, [pc, #100]	; (1ee8 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1e82:	bf58      	it	pl
    1e84:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1e86:	f04f 0100 	mov.w	r1, #0
    1e8a:	f04f 0501 	mov.w	r5, #1
    1e8e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    1e92:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1e96:	bf58      	it	pl
    1e98:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1e9c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    1ea0:	f7ff f8c4 	bl	102c <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1ea8:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1eaa:	2218      	movs	r2, #24
    1eac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    1eb0:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1eb4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1eb8:	f014 0103 	ands.w	r1, r4, #3
    1ebc:	d1be      	bne.n	1e3c <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    1ebe:	2010      	movs	r0, #16
    1ec0:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1ec4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1ec8:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1eca:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1ece:	f7ff ff4f 	bl	1d70 <_m16src_start>
		if (!err) {
    1ed2:	2800      	cmp	r0, #0
    1ed4:	d1b2      	bne.n	1e3c <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ed6:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1eda:	e7af      	b.n	1e3c <_k32src_start+0x1c>
		__WFE();
    1edc:	bf20      	wfe
		__SEV();
    1ede:	bf40      	sev
		__WFE();
    1ee0:	bf20      	wfe
    1ee2:	e7c9      	b.n	1e78 <_k32src_start+0x58>
    1ee4:	20000090 	.word	0x20000090
    1ee8:	e000e100 	.word	0xe000e100

00001eec <_power_clock_isr>:
{
    1eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    1ef2:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1ef4:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1ef8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1efc:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    1f00:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1f04:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1f08:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1f0c:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1f10:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1f14:	f1be 0f00 	cmp.w	lr, #0
    1f18:	d003      	beq.n	1f22 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    1f1a:	f04f 0e00 	mov.w	lr, #0
    1f1e:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    1f22:	b127      	cbz	r7, 1f2e <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1f24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f28:	2700      	movs	r7, #0
    1f2a:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    1f2e:	b13a      	cbz	r2, 1f40 <_power_clock_isr+0x54>
    1f30:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1f32:	bf41      	itttt	mi
    1f34:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    1f38:	2201      	movmi	r2, #1
    1f3a:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    1f3e:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    1f40:	b120      	cbz	r0, 1f4c <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f46:	2200      	movs	r2, #0
    1f48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    1f4c:	b149      	cbz	r1, 1f62 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    1f4e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1f52:	2100      	movs	r1, #0
    1f54:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    1f58:	4628      	mov	r0, r5
    1f5a:	f7ff fecf 	bl	1cfc <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    1f5e:	2301      	movs	r3, #1
    1f60:	6163      	str	r3, [r4, #20]
	if (ctto) {
    1f62:	b176      	cbz	r6, 1f82 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f68:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1f6a:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    1f6c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1f70:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1f72:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1f76:	f7ff fefb 	bl	1d70 <_m16src_start>
		if (!err) {
    1f7a:	b910      	cbnz	r0, 1f82 <_power_clock_isr+0x96>
    1f7c:	4b01      	ldr	r3, [pc, #4]	; (1f84 <_power_clock_isr+0x98>)
    1f7e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f84:	e000e100 	.word	0xe000e100

00001f88 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1f88:	6803      	ldr	r3, [r0, #0]
    1f8a:	689b      	ldr	r3, [r3, #8]
    1f8c:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1f8e:	6883      	ldr	r3, [r0, #8]
{
    1f90:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1f92:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1f94:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1f96:	fa24 f300 	lsr.w	r3, r4, r0
    1f9a:	07db      	lsls	r3, r3, #31
    1f9c:	d507      	bpl.n	1fae <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    1f9e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    1fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fa6:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1faa:	428b      	cmp	r3, r1
    1fac:	d004      	beq.n	1fb8 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1fae:	3001      	adds	r0, #1
    1fb0:	2808      	cmp	r0, #8
    1fb2:	d1f0      	bne.n	1f96 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    1fb4:	f06f 0012 	mvn.w	r0, #18
}
    1fb8:	bd10      	pop	{r4, pc}

00001fba <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1fba:	6800      	ldr	r0, [r0, #0]
    1fbc:	6880      	ldr	r0, [r0, #8]
    1fbe:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1fc0:	b941      	cbnz	r1, 1fd4 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    1fc2:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1fc6:	fa21 f202 	lsr.w	r2, r1, r2
    1fca:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    1fce:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1fd0:	2000      	movs	r0, #0
    1fd2:	4770      	bx	lr
		*value = gpio->IN;
    1fd4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1fd8:	e7f9      	b.n	1fce <gpio_nrf5_read+0x14>

00001fda <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1fda:	6800      	ldr	r0, [r0, #0]
    1fdc:	6880      	ldr	r0, [r0, #8]
    1fde:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1fe0:	b949      	cbnz	r1, 1ff6 <gpio_nrf5_write+0x1c>
    1fe2:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1fe4:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    1fe6:	b11b      	cbz	r3, 1ff0 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    1fe8:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    1fec:	2000      	movs	r0, #0
    1fee:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    1ff0:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    1ff4:	e7fa      	b.n	1fec <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    1ff6:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    1ffa:	e7f7      	b.n	1fec <gpio_nrf5_write+0x12>

00001ffc <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1ffc:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1ffe:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2000:	b13a      	cbz	r2, 2012 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2002:	681a      	ldr	r2, [r3, #0]
    2004:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    2006:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    2008:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    200a:	b902      	cbnz	r2, 200e <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    200c:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    200e:	2000      	movs	r0, #0
    2010:	bd10      	pop	{r4, pc}
    2012:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    2014:	2800      	cmp	r0, #0
    2016:	d0fa      	beq.n	200e <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    2018:	4281      	cmp	r1, r0
    201a:	d10e      	bne.n	203a <gpio_nrf5_manage_callback+0x3e>
    201c:	685c      	ldr	r4, [r3, #4]
    201e:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    2020:	b932      	cbnz	r2, 2030 <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    2022:	42a1      	cmp	r1, r4
		list->head = node->next;
    2024:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    2026:	d100      	bne.n	202a <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    2028:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    202a:	2300      	movs	r3, #0
    202c:	600b      	str	r3, [r1, #0]
    202e:	e7ee      	b.n	200e <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    2030:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    2032:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    2034:	bf08      	it	eq
    2036:	605a      	streq	r2, [r3, #4]
    2038:	e7f7      	b.n	202a <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    203a:	4602      	mov	r2, r0
    203c:	6800      	ldr	r0, [r0, #0]
    203e:	e7e9      	b.n	2014 <gpio_nrf5_manage_callback+0x18>

00002040 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    2040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2042:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2044:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2046:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2048:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    204a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    204c:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    204e:	b9a1      	cbnz	r1, 207a <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    2050:	4621      	mov	r1, r4
    2052:	f7ff ff99 	bl	1f88 <gpiote_find_channel>
		if (i < 0) {
    2056:	2800      	cmp	r0, #0
    2058:	db11      	blt.n	207e <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    205a:	68ba      	ldr	r2, [r7, #8]
    205c:	2301      	movs	r3, #1
    205e:	fa03 f404 	lsl.w	r4, r3, r4
    2062:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2064:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    2068:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    206c:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    206e:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    2072:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    2076:	4628      	mov	r0, r5
    2078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    207a:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002080 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2082:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2084:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2086:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2088:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    208a:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    208c:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    208e:	b989      	cbnz	r1, 20b4 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    2090:	4621      	mov	r1, r4
    2092:	f7ff ff79 	bl	1f88 <gpiote_find_channel>
		if (i < 0) {
    2096:	2800      	cmp	r0, #0
    2098:	db0e      	blt.n	20b8 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    209a:	68b2      	ldr	r2, [r6, #8]
    209c:	2301      	movs	r3, #1
    209e:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    20a2:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    20a6:	ea22 0404 	bic.w	r4, r2, r4
    20aa:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    20ac:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    20b0:	4628      	mov	r0, r5
    20b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    20b4:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    20b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000020ba <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    20ba:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    20bc:	2200      	movs	r2, #0
    20be:	2101      	movs	r1, #1
    20c0:	2006      	movs	r0, #6
    20c2:	f7fe ffe5 	bl	1090 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    20c6:	2006      	movs	r0, #6
    20c8:	f7fe ffb0 	bl	102c <_arch_irq_enable>

	return 0;
}
    20cc:	2000      	movs	r0, #0
    20ce:	bd08      	pop	{r3, pc}

000020d0 <gpio_nrf5_port_isr>:
{
    20d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    20d2:	6803      	ldr	r3, [r0, #0]
{
    20d4:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    20d6:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    20d8:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    20da:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    20dc:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    20de:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    20e0:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    20e2:	2701      	movs	r7, #1
    20e4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    20e8:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    20ec:	f1be 0f00 	cmp.w	lr, #0
    20f0:	d008      	beq.n	2104 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    20f2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    20f6:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    20fa:	f3c1 2104 	ubfx	r1, r1, #8, #5
    20fe:	fa07 f101 	lsl.w	r1, r7, r1
    2102:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2104:	3201      	adds	r2, #1
    2106:	2a08      	cmp	r2, #8
    2108:	d1ec      	bne.n	20e4 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    210a:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    210c:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    210e:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    2110:	f7fe ff9c 	bl	104c <_arch_irq_disable>
    2114:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    2116:	b924      	cbnz	r4, 2122 <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2118:	2006      	movs	r0, #6
}
    211a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    211e:	f7fe bf85 	b.w	102c <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    2122:	68a3      	ldr	r3, [r4, #8]
    2124:	421d      	tst	r5, r3
    2126:	d0f5      	beq.n	2114 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    2128:	6863      	ldr	r3, [r4, #4]
    212a:	462a      	mov	r2, r5
    212c:	4621      	mov	r1, r4
    212e:	4630      	mov	r0, r6
    2130:	4798      	blx	r3
    2132:	e7ef      	b.n	2114 <gpio_nrf5_port_isr+0x44>

00002134 <gpio_nrf5_config>:
{
    2134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2138:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    213a:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    213c:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    213e:	6892      	ldr	r2, [r2, #8]
{
    2140:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2142:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2144:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2146:	b119      	cbz	r1, 2150 <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    2148:	f06f 0022 	mvn.w	r0, #34	; 0x22
    214c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2150:	f403 7240 	and.w	r2, r3, #768	; 0x300
    2154:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2158:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    215c:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    2160:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2164:	d056      	beq.n	2214 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    2166:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    216a:	bf0c      	ite	eq
    216c:	2204      	moveq	r2, #4
    216e:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    2170:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    2174:	bf08      	it	eq
    2176:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    217a:	f013 0f01 	tst.w	r3, #1
    217e:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2248 <gpio_nrf5_config+0x114>
    2182:	ea4f 0181 	mov.w	r1, r1, lsl #2
    2186:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    218a:	d04e      	beq.n	222a <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    218c:	2a0c      	cmp	r2, #12
    218e:	d143      	bne.n	2218 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    2190:	f04f 0e01 	mov.w	lr, #1
    2194:	fa0e fe04 	lsl.w	lr, lr, r4
    2198:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    219c:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    219e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    21a2:	f041 0103 	orr.w	r1, r1, #3
    21a6:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    21a8:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    21ac:	f013 0002 	ands.w	r0, r3, #2
    21b0:	d047      	beq.n	2242 <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    21b2:	0699      	lsls	r1, r3, #26
    21b4:	d5c8      	bpl.n	2148 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    21b6:	065a      	lsls	r2, r3, #25
    21b8:	d43e      	bmi.n	2238 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    21ba:	f013 0f04 	tst.w	r3, #4
    21be:	bf14      	ite	ne
    21c0:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    21c4:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    21c8:	68f8      	ldr	r0, [r7, #12]
    21ca:	f7fe f865 	bl	298 <__popcountsi2>
    21ce:	2808      	cmp	r0, #8
    21d0:	d035      	beq.n	223e <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    21d2:	4621      	mov	r1, r4
    21d4:	4640      	mov	r0, r8
    21d6:	f7ff fed7 	bl	1f88 <gpiote_find_channel>
		if (i < 0) {
    21da:	2800      	cmp	r0, #0
    21dc:	68fb      	ldr	r3, [r7, #12]
    21de:	da08      	bge.n	21f2 <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    21e0:	43da      	mvns	r2, r3
    21e2:	fa92 f0a2 	rbit	r0, r2
    21e6:	2a00      	cmp	r2, #0
    21e8:	fab0 f080 	clz	r0, r0
    21ec:	bf08      	it	eq
    21ee:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    21f2:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    21f4:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    21f6:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    21fa:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    21fc:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    2200:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    2204:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    2206:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    2208:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    220a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    220e:	2000      	movs	r0, #0
    2210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    2214:	220c      	movs	r2, #12
    2216:	e7ab      	b.n	2170 <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    2218:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    221a:	bf02      	ittt	eq
    221c:	f04f 0e01 	moveq.w	lr, #1
    2220:	fa0e fe04 	lsleq.w	lr, lr, r4
    2224:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    2228:	e7b8      	b.n	219c <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    222a:	4449      	add	r1, r9
    222c:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    2230:	430a      	orrs	r2, r1
    2232:	ea42 020e 	orr.w	r2, r2, lr
    2236:	e7b7      	b.n	21a8 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    2238:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    223c:	e7c4      	b.n	21c8 <gpio_nrf5_config+0x94>
			return -EIO;
    223e:	f06f 0004 	mvn.w	r0, #4
}
    2242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2246:	bf00      	nop
    2248:	00018c20 	.word	0x00018c20

0000224c <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    224c:	6803      	ldr	r3, [r0, #0]
    224e:	689b      	ldr	r3, [r3, #8]
    2250:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2252:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    2256:	b132      	cbz	r2, 2266 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2258:	2000      	movs	r0, #0
    225a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    225e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2262:	700b      	strb	r3, [r1, #0]

	return 0;
    2264:	4770      	bx	lr
		return -1;
    2266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    226a:	4770      	bx	lr

0000226c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    226c:	6803      	ldr	r3, [r0, #0]
    226e:	689b      	ldr	r3, [r3, #8]
    2270:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2272:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    2276:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    227a:	2a00      	cmp	r2, #0
    227c:	d0fb      	beq.n	2276 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    227e:	2200      	movs	r2, #0
    2280:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    2284:	4608      	mov	r0, r1
    2286:	4770      	bx	lr

00002288 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2288:	6803      	ldr	r3, [r0, #0]
    228a:	689b      	ldr	r3, [r3, #8]
    228c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    228e:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    2292:	b118      	cbz	r0, 229c <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2294:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2298:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    229c:	f000 000f 	and.w	r0, r0, #15
    22a0:	4770      	bx	lr
	...

000022a4 <uart_nrf5_init>:
{
    22a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    22a6:	6803      	ldr	r3, [r0, #0]
    22a8:	689b      	ldr	r3, [r3, #8]
{
    22aa:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    22ac:	4818      	ldr	r0, [pc, #96]	; (2310 <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    22ae:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    22b0:	f014 fdcc 	bl	16e4c <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    22b4:	6843      	ldr	r3, [r0, #4]
    22b6:	4606      	mov	r6, r0
    22b8:	681f      	ldr	r7, [r3, #0]
    22ba:	2206      	movs	r2, #6
    22bc:	f240 1301 	movw	r3, #257	; 0x101
    22c0:	2100      	movs	r1, #0
    22c2:	47b8      	blx	r7
    22c4:	6873      	ldr	r3, [r6, #4]
    22c6:	681f      	ldr	r7, [r3, #0]
    22c8:	2300      	movs	r3, #0
    22ca:	4619      	mov	r1, r3
    22cc:	2208      	movs	r2, #8
    22ce:	4630      	mov	r0, r6
    22d0:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    22d2:	2306      	movs	r3, #6
    22d4:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    22d8:	2308      	movs	r3, #8
    22da:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    22de:	68ab      	ldr	r3, [r5, #8]
    22e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    22e4:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    22e6:	682b      	ldr	r3, [r5, #0]
    22e8:	689b      	ldr	r3, [r3, #8]
    22ea:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    22ec:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    22f0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    22f4:	2304      	movs	r3, #4
    22f6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    22fa:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    22fc:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    22fe:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    2302:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    2306:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    2308:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    230a:	4b02      	ldr	r3, [pc, #8]	; (2314 <uart_nrf5_init+0x70>)
    230c:	606b      	str	r3, [r5, #4]
}
    230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2310:	00018c88 	.word	0x00018c88
    2314:	00018c98 	.word	0x00018c98

00002318 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    2318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    231c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    231e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    2320:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    2322:	42a3      	cmp	r3, r4
	d = &rand[octets];
    2324:	440a      	add	r2, r1
	s = &rng->rand[first];
    2326:	4406      	add	r6, r0
	if (first <= last) {
    2328:	d81f      	bhi.n	236a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    232a:	1ae4      	subs	r4, r4, r3
    232c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    232e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    2330:	bf3e      	ittt	cc
    2332:	1a64      	subcc	r4, r4, r1
    2334:	b2e7      	uxtbcc	r7, r4
    2336:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    2338:	4423      	add	r3, r4
		octets -= avail;
    233a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    233e:	bf28      	it	cs
    2340:	2700      	movcs	r7, #0
		first += avail;
    2342:	b2db      	uxtb	r3, r3
		octets -= avail;
    2344:	b2c9      	uxtb	r1, r1
    2346:	4434      	add	r4, r6

		while (avail--) {
    2348:	42a6      	cmp	r6, r4
    234a:	d109      	bne.n	2360 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    234c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    234e:	7843      	ldrb	r3, [r0, #1]
    2350:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    2352:	bf82      	ittt	hi
    2354:	4b20      	ldrhi	r3, [pc, #128]	; (23d8 <get+0xc0>)
    2356:	2201      	movhi	r2, #1
    2358:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    235a:	4608      	mov	r0, r1
    235c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    2360:	f816 5b01 	ldrb.w	r5, [r6], #1
    2364:	f802 5d01 	strb.w	r5, [r2, #-1]!
    2368:	e7ee      	b.n	2348 <get+0x30>
		avail = rng->count - first;
    236a:	7805      	ldrb	r5, [r0, #0]
    236c:	1aed      	subs	r5, r5, r3
    236e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    2370:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    2372:	bf3f      	itttt	cc
    2374:	1a67      	subcc	r7, r4, r1
    2376:	19ed      	addcc	r5, r5, r7
    2378:	b2ef      	uxtbcc	r7, r5
    237a:	460d      	movcc	r5, r1
			first += avail;
    237c:	bf38      	it	cc
    237e:	185b      	addcc	r3, r3, r1
		octets -= avail;
    2380:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    2384:	bf32      	itee	cc
    2386:	b2db      	uxtbcc	r3, r3
    2388:	4627      	movcs	r7, r4
			first = 0;
    238a:	2300      	movcs	r3, #0
		octets -= avail;
    238c:	b2c9      	uxtb	r1, r1
    238e:	4696      	mov	lr, r2
    2390:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    2394:	4566      	cmp	r6, ip
    2396:	d119      	bne.n	23cc <get+0xb4>
    2398:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    239a:	2900      	cmp	r1, #0
    239c:	d0d6      	beq.n	234c <get+0x34>
    239e:	2c00      	cmp	r4, #0
    23a0:	d0d4      	beq.n	234c <get+0x34>
			if (octets < last) {
    23a2:	428c      	cmp	r4, r1
    23a4:	bf8a      	itet	hi
    23a6:	460b      	movhi	r3, r1
    23a8:	4623      	movls	r3, r4
				remaining = last - octets;
    23aa:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    23ac:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    23b0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    23b4:	bf8c      	ite	hi
    23b6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    23b8:	2700      	movls	r7, #0
			octets -= last;
    23ba:	b2c9      	uxtb	r1, r1
    23bc:	18f4      	adds	r4, r6, r3
			while (last--) {
    23be:	42a6      	cmp	r6, r4
    23c0:	d0c4      	beq.n	234c <get+0x34>
				*(--d) = *s++;
    23c2:	f816 5b01 	ldrb.w	r5, [r6], #1
    23c6:	f802 5d01 	strb.w	r5, [r2, #-1]!
    23ca:	e7f8      	b.n	23be <get+0xa6>
			*(--d) = *s++;
    23cc:	f816 8b01 	ldrb.w	r8, [r6], #1
    23d0:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    23d4:	e7de      	b.n	2394 <get+0x7c>
    23d6:	bf00      	nop
    23d8:	4000d000 	.word	0x4000d000

000023dc <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    23dc:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    23de:	b1d0      	cbz	r0, 2416 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    23e0:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    23e2:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    23e4:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    23e6:	1c53      	adds	r3, r2, #1
    23e8:	b2db      	uxtb	r3, r3
		last = 0;
    23ea:	42ab      	cmp	r3, r5
    23ec:	bf08      	it	eq
    23ee:	2300      	moveq	r3, #0
	if (last == rng->first) {
    23f0:	42a3      	cmp	r3, r4
    23f2:	d010      	beq.n	2416 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    23f4:	b161      	cbz	r1, 2410 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    23f6:	490a      	ldr	r1, [pc, #40]	; (2420 <isr+0x44>)
    23f8:	4402      	add	r2, r0
    23fa:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    23fe:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    2400:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    2402:	3301      	adds	r3, #1
    2404:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    2406:	429d      	cmp	r5, r3
    2408:	bf08      	it	eq
    240a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    240c:	42a3      	cmp	r3, r4
    240e:	d005      	beq.n	241c <isr+0x40>
		return 0;
	}

	return -EBUSY;
    2410:	f06f 000f 	mvn.w	r0, #15
    2414:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    2416:	f06f 0036 	mvn.w	r0, #54	; 0x36
    241a:	bd30      	pop	{r4, r5, pc}
		return 0;
    241c:	2000      	movs	r0, #0
}
    241e:	bd30      	pop	{r4, r5, pc}
    2420:	4000d000 	.word	0x4000d000

00002424 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    2424:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    2426:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2428:	2201      	movs	r2, #1
    242a:	4611      	mov	r1, r2
    242c:	4620      	mov	r0, r4
    242e:	f015 f913 	bl	17658 <_impl_k_sem_init>
    2432:	f104 0018 	add.w	r0, r4, #24
    2436:	2201      	movs	r2, #1
    2438:	2100      	movs	r1, #0
    243a:	f015 f90d 	bl	17658 <_impl_k_sem_init>
	rng->threshold = threshold;
    243e:	2304      	movs	r3, #4
    2440:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    2444:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    2446:	2500      	movs	r5, #0
	rng->threshold = threshold;
    2448:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    244c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    244e:	4b11      	ldr	r3, [pc, #68]	; (2494 <entropy_nrf5_init+0x70>)
	rng->count = len;
    2450:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2454:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    2456:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    245a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    245e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    2462:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    2466:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    246a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    246e:	f042 0201 	orr.w	r2, r2, #1
    2472:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    2476:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    2478:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    247c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    247e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    2482:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    2484:	462a      	mov	r2, r5
    2486:	f7fe fe03 	bl	1090 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    248a:	4630      	mov	r0, r6
    248c:	f7fe fdce 	bl	102c <_arch_irq_enable>

	return 0;
}
    2490:	4628      	mov	r0, r5
    2492:	bd70      	pop	{r4, r5, r6, pc}
    2494:	4000d000 	.word	0x4000d000

00002498 <isr_rand>:
{
    2498:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    249a:	4b12      	ldr	r3, [pc, #72]	; (24e4 <isr_rand+0x4c>)
    249c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    24a0:	b1fb      	cbz	r3, 24e2 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    24a2:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    24a4:	2101      	movs	r1, #1
    24a6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    24aa:	f7ff ff97 	bl	23dc <isr>
		if (ret != -EBUSY) {
    24ae:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    24b2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    24b4:	d00d      	beq.n	24d2 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    24b6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    24ba:	bf14      	ite	ne
    24bc:	2100      	movne	r1, #0
    24be:	2101      	moveq	r1, #1
    24c0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    24c4:	f7ff ff8a 	bl	23dc <isr>
    24c8:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    24ca:	f105 0018 	add.w	r0, r5, #24
    24ce:	f015 f8cd 	bl	1766c <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    24d2:	4b04      	ldr	r3, [pc, #16]	; (24e4 <isr_rand+0x4c>)
    24d4:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    24d6:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    24d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    24dc:	bf1c      	itt	ne
    24de:	2201      	movne	r2, #1
    24e0:	605a      	strne	r2, [r3, #4]
    24e2:	bd38      	pop	{r3, r4, r5, pc}
    24e4:	4000d000 	.word	0x4000d000

000024e8 <entropy_nrf5_get_entropy>:
{
    24e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    24ec:	6885      	ldr	r5, [r0, #8]
{
    24ee:	460f      	mov	r7, r1
    24f0:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    24f2:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    24f6:	b914      	cbnz	r4, 24fe <entropy_nrf5_get_entropy+0x16>
}
    24f8:	4620      	mov	r0, r4
    24fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    24fe:	2cff      	cmp	r4, #255	; 0xff
    2500:	4623      	mov	r3, r4
    2502:	bf28      	it	cs
    2504:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    2506:	1ae4      	subs	r4, r4, r3
    2508:	b2de      	uxtb	r6, r3
    250a:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    250c:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2514:	4628      	mov	r0, r5
    2516:	f015 f909 	bl	1772c <_impl_k_sem_take>
    251a:	4631      	mov	r1, r6
    251c:	463a      	mov	r2, r7
    251e:	4648      	mov	r0, r9
    2520:	f7ff fefa 	bl	2318 <get>
    2524:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2526:	4628      	mov	r0, r5
    2528:	f015 f8a0 	bl	1766c <_impl_k_sem_give>
			if (len8) {
    252c:	2e00      	cmp	r6, #0
    252e:	d0e2      	beq.n	24f6 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2534:	4640      	mov	r0, r8
    2536:	f015 f8f9 	bl	1772c <_impl_k_sem_take>
    253a:	e7e9      	b.n	2510 <entropy_nrf5_get_entropy+0x28>

0000253c <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    253c:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    253e:	4802      	ldr	r0, [pc, #8]	; (2548 <entropy_get_entropy_isr+0xc>)
    2540:	460a      	mov	r2, r1
    2542:	4619      	mov	r1, r3
    2544:	f7ff bee8 	b.w	2318 <get>
    2548:	200000e0 	.word	0x200000e0

0000254c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    254c:	4b08      	ldr	r3, [pc, #32]	; (2570 <rtc_compare_set+0x24>)
    254e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    2552:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    2556:	1ac0      	subs	r0, r0, r3
    2558:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    255c:	4b05      	ldr	r3, [pc, #20]	; (2574 <rtc_compare_set+0x28>)
    255e:	3802      	subs	r0, #2
    2560:	4298      	cmp	r0, r3
    2562:	bf82      	ittt	hi
    2564:	4b04      	ldrhi	r3, [pc, #16]	; (2578 <rtc_compare_set+0x2c>)
    2566:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    256a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    256e:	4770      	bx	lr
    2570:	40011000 	.word	0x40011000
    2574:	007ffffd 	.word	0x007ffffd
    2578:	e000e100 	.word	0xe000e100

0000257c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    257c:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    257e:	4b12      	ldr	r3, [pc, #72]	; (25c8 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    2580:	4c12      	ldr	r4, [pc, #72]	; (25cc <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    2582:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    2586:	6822      	ldr	r2, [r4, #0]
    2588:	1a80      	subs	r0, r0, r2
    258a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    258e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    2592:	d911      	bls.n	25b8 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    2594:	490e      	ldr	r1, [pc, #56]	; (25d0 <rtc_announce_set_next+0x54>)
    2596:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    2598:	f240 1347 	movw	r3, #327	; 0x147
    259c:	fbb0 f0f3 	udiv	r0, r0, r3
    25a0:	4288      	cmp	r0, r1
    25a2:	bf28      	it	cs
    25a4:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    25a6:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    25aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    25ae:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    25b0:	4b08      	ldr	r3, [pc, #32]	; (25d4 <rtc_announce_set_next+0x58>)
    25b2:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    25b4:	f015 f8fc 	bl	177b0 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    25b8:	6820      	ldr	r0, [r4, #0]
}
    25ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    25be:	f200 1047 	addw	r0, r0, #327	; 0x147
    25c2:	f7ff bfc3 	b.w	254c <rtc_compare_set>
    25c6:	bf00      	nop
    25c8:	40011000 	.word	0x40011000
    25cc:	200000f8 	.word	0x200000f8
    25d0:	200000f4 	.word	0x200000f4
    25d4:	20008a3c 	.word	0x20008a3c

000025d8 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    25d8:	4b02      	ldr	r3, [pc, #8]	; (25e4 <rtc1_nrf5_isr+0xc>)
    25da:	2200      	movs	r2, #0
    25dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    25e0:	f7ff bfcc 	b.w	257c <rtc_announce_set_next>
    25e4:	40011000 	.word	0x40011000

000025e8 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    25e8:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    25ec:	4298      	cmp	r0, r3
    25ee:	bf28      	it	cs
    25f0:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    25f2:	4b05      	ldr	r3, [pc, #20]	; (2608 <_timer_idle_enter+0x20>)
    25f4:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    25f6:	4b05      	ldr	r3, [pc, #20]	; (260c <_timer_idle_enter+0x24>)
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	f240 1247 	movw	r2, #327	; 0x147
    25fe:	fb02 3000 	mla	r0, r2, r0, r3
    2602:	f7ff bfa3 	b.w	254c <rtc_compare_set>
    2606:	bf00      	nop
    2608:	200000f4 	.word	0x200000f4
    260c:	200000f8 	.word	0x200000f8

00002610 <_timer_idle_exit>:
{
    2610:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    2612:	4b07      	ldr	r3, [pc, #28]	; (2630 <_timer_idle_exit+0x20>)
    2614:	2200      	movs	r2, #0
    2616:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    261a:	4b06      	ldr	r3, [pc, #24]	; (2634 <_timer_idle_exit+0x24>)
    261c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2620:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    2624:	f7ff ffaa 	bl	257c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    2628:	4b03      	ldr	r3, [pc, #12]	; (2638 <_timer_idle_exit+0x28>)
    262a:	2201      	movs	r2, #1
    262c:	601a      	str	r2, [r3, #0]
    262e:	bd08      	pop	{r3, pc}
    2630:	40011000 	.word	0x40011000
    2634:	e000e100 	.word	0xe000e100
    2638:	200000f4 	.word	0x200000f4

0000263c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    263c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    263e:	4818      	ldr	r0, [pc, #96]	; (26a0 <_sys_clock_driver_init+0x64>)
    2640:	f014 fc04 	bl	16e4c <device_get_binding>
	if (!clock) {
    2644:	b348      	cbz	r0, 269a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    2646:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    2648:	4d16      	ldr	r5, [pc, #88]	; (26a4 <_sys_clock_driver_init+0x68>)
    264a:	681b      	ldr	r3, [r3, #0]
    264c:	2101      	movs	r1, #1
    264e:	4798      	blx	r3
	rtc_past = 0;
    2650:	4b15      	ldr	r3, [pc, #84]	; (26a8 <_sys_clock_driver_init+0x6c>)
    2652:	2400      	movs	r4, #0
    2654:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    2656:	4b15      	ldr	r3, [pc, #84]	; (26ac <_sys_clock_driver_init+0x70>)
    2658:	2601      	movs	r6, #1
    265a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    265c:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    2660:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    2664:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    2668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    266c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    2670:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    2674:	4b0e      	ldr	r3, [pc, #56]	; (26b0 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    2676:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    267a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    267e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    2682:	4631      	mov	r1, r6
    2684:	4622      	mov	r2, r4
    2686:	2011      	movs	r0, #17
    2688:	f7fe fd02 	bl	1090 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    268c:	2011      	movs	r0, #17
    268e:	f7fe fccd 	bl	102c <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    2692:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    2694:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    2696:	602e      	str	r6, [r5, #0]
	return 0;
    2698:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    269a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    269e:	bd70      	pop	{r4, r5, r6, pc}
    26a0:	00018c08 	.word	0x00018c08
    26a4:	40011000 	.word	0x40011000
    26a8:	200000f8 	.word	0x200000f8
    26ac:	200000f4 	.word	0x200000f4
    26b0:	e000e100 	.word	0xe000e100

000026b4 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    26b4:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    26b6:	4a0b      	ldr	r2, [pc, #44]	; (26e4 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    26b8:	480b      	ldr	r0, [pc, #44]	; (26e8 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    26ba:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    26be:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    26c2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    26c6:	4299      	cmp	r1, r3
    26c8:	d10a      	bne.n	26e0 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    26ca:	4a08      	ldr	r2, [pc, #32]	; (26ec <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    26cc:	f240 1347 	movw	r3, #327	; 0x147
    26d0:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    26d4:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    26d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    26da:	fb00 3004 	mla	r0, r0, r4, r3
    26de:	bd30      	pop	{r4, r5, pc}
    26e0:	4619      	mov	r1, r3
    26e2:	e7ec      	b.n	26be <_timer_cycle_get_32+0xa>
    26e4:	40011000 	.word	0x40011000
    26e8:	20005468 	.word	0x20005468
    26ec:	20008a40 	.word	0x20008a40

000026f0 <bt_hex>:
#include <misc/util.h>
#include <bluetooth/bluetooth.h>
#include <bluetooth/hci.h>

const char *bt_hex(const void *buf, size_t len)
{
    26f0:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    26f2:	f04f 0320 	mov.w	r3, #32
    26f6:	f3ef 8511 	mrs	r5, BASEPRI
    26fa:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    26fe:	4c14      	ldr	r4, [pc, #80]	; (2750 <bt_hex+0x60>)
    2700:	4e14      	ldr	r6, [pc, #80]	; (2754 <bt_hex+0x64>)
    2702:	7823      	ldrb	r3, [r4, #0]
    2704:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
    2708:	3301      	adds	r3, #1
	curbuf %= ARRAY_SIZE(hexbufs);
    270a:	f003 0303 	and.w	r3, r3, #3
	str = hexbufs[curbuf++];
    270e:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    2710:	7023      	strb	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2712:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    2716:	2940      	cmp	r1, #64	; 0x40
    2718:	bf28      	it	cs
    271a:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    271c:	4d0e      	ldr	r5, [pc, #56]	; (2758 <bt_hex+0x68>)
    271e:	3801      	subs	r0, #1
    2720:	4613      	mov	r3, r2
    2722:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	for (i = 0; i < len; i++) {
    2726:	42b3      	cmp	r3, r6
    2728:	d104      	bne.n	2734 <bt_hex+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    272a:	2300      	movs	r3, #0
    272c:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    2730:	4610      	mov	r0, r2
    2732:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    2734:	7844      	ldrb	r4, [r0, #1]
    2736:	0924      	lsrs	r4, r4, #4
    2738:	3302      	adds	r3, #2
    273a:	5d2c      	ldrb	r4, [r5, r4]
    273c:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    2740:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    2744:	f004 040f 	and.w	r4, r4, #15
    2748:	5d2c      	ldrb	r4, [r5, r4]
    274a:	f803 4c01 	strb.w	r4, [r3, #-1]
    274e:	e7ea      	b.n	2726 <bt_hex+0x36>
    2750:	20000133 	.word	0x20000133
    2754:	20000134 	.word	0x20000134
    2758:	00018cb2 	.word	0x00018cb2

0000275c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
    275c:	b570      	push	{r4, r5, r6, lr}
	static char bufs[2][BT_ADDR_LE_STR_LEN];
	static u8_t cur;
	char *str;

	str = bufs[cur++];
    275e:	4a1d      	ldr	r2, [pc, #116]	; (27d4 <bt_addr_le_str+0x78>)
    2760:	491d      	ldr	r1, [pc, #116]	; (27d8 <bt_addr_le_str+0x7c>)
    2762:	7813      	ldrb	r3, [r2, #0]
    2764:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    2768:	3301      	adds	r3, #1
	cur %= ARRAY_SIZE(bufs);
    276a:	f003 0301 	and.w	r3, r3, #1
    276e:	7013      	strb	r3, [r2, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    2770:	7803      	ldrb	r3, [r0, #0]
{
    2772:	b08a      	sub	sp, #40	; 0x28
	str = bufs[cur++];
    2774:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
{
    2778:	4604      	mov	r4, r0
	str = bufs[cur++];
    277a:	440e      	add	r6, r1
    277c:	ad07      	add	r5, sp, #28
    277e:	2b03      	cmp	r3, #3
    2780:	d821      	bhi.n	27c6 <bt_addr_le_str+0x6a>
    2782:	e8df f003 	tbb	[pc, r3]
    2786:	1a02      	.short	0x1a02
    2788:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    278a:	4914      	ldr	r1, [pc, #80]	; (27dc <bt_addr_le_str+0x80>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    278c:	4628      	mov	r0, r5
    278e:	f7fd ff07 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2792:	7862      	ldrb	r2, [r4, #1]
    2794:	9204      	str	r2, [sp, #16]
    2796:	78a2      	ldrb	r2, [r4, #2]
    2798:	9203      	str	r2, [sp, #12]
    279a:	78e2      	ldrb	r2, [r4, #3]
    279c:	9202      	str	r2, [sp, #8]
    279e:	7922      	ldrb	r2, [r4, #4]
    27a0:	9201      	str	r2, [sp, #4]
    27a2:	7962      	ldrb	r2, [r4, #5]
    27a4:	9200      	str	r2, [sp, #0]
    27a6:	79a3      	ldrb	r3, [r4, #6]
    27a8:	9505      	str	r5, [sp, #20]
    27aa:	4a0d      	ldr	r2, [pc, #52]	; (27e0 <bt_addr_le_str+0x84>)
    27ac:	211b      	movs	r1, #27
    27ae:	4630      	mov	r0, r6
    27b0:	f7fe ffa4 	bl	16fc <snprintk>
	bt_addr_le_to_str(addr, str, sizeof(bufs[cur]));

	return str;
}
    27b4:	4630      	mov	r0, r6
    27b6:	b00a      	add	sp, #40	; 0x28
    27b8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    27ba:	490a      	ldr	r1, [pc, #40]	; (27e4 <bt_addr_le_str+0x88>)
    27bc:	e7e6      	b.n	278c <bt_addr_le_str+0x30>
		strcpy(type, "public id");
    27be:	490a      	ldr	r1, [pc, #40]	; (27e8 <bt_addr_le_str+0x8c>)
    27c0:	e7e4      	b.n	278c <bt_addr_le_str+0x30>
		strcpy(type, "random id");
    27c2:	490a      	ldr	r1, [pc, #40]	; (27ec <bt_addr_le_str+0x90>)
    27c4:	e7e2      	b.n	278c <bt_addr_le_str+0x30>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    27c6:	4a0a      	ldr	r2, [pc, #40]	; (27f0 <bt_addr_le_str+0x94>)
    27c8:	210a      	movs	r1, #10
    27ca:	4628      	mov	r0, r5
    27cc:	f7fe ff96 	bl	16fc <snprintk>
    27d0:	e7df      	b.n	2792 <bt_addr_le_str+0x36>
    27d2:	bf00      	nop
    27d4:	20000132 	.word	0x20000132
    27d8:	200000fc 	.word	0x200000fc
    27dc:	000183e7 	.word	0x000183e7
    27e0:	00018410 	.word	0x00018410
    27e4:	000183ee 	.word	0x000183ee
    27e8:	000183f5 	.word	0x000183f5
    27ec:	000183ff 	.word	0x000183ff
    27f0:	00018409 	.word	0x00018409

000027f4 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    27f4:	b530      	push	{r4, r5, lr}
    27f6:	b085      	sub	sp, #20
    27f8:	4604      	mov	r4, r0
    27fa:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    27fc:	4668      	mov	r0, sp
    27fe:	2203      	movs	r2, #3
    2800:	f7fd ff02 	bl	608 <memcpy>
	memset(res + 3, 0, 13);
    2804:	220d      	movs	r2, #13
    2806:	2100      	movs	r1, #0
    2808:	f10d 0003 	add.w	r0, sp, #3
    280c:	f7fd ff28 	bl	660 <memset>

	err = bt_encrypt_le(irk, res, res);
    2810:	4620      	mov	r0, r4
    2812:	466a      	mov	r2, sp
    2814:	4669      	mov	r1, sp
    2816:	f008 fe37 	bl	b488 <bt_encrypt_le>
	if (err) {
    281a:	4604      	mov	r4, r0
    281c:	b920      	cbnz	r0, 2828 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    281e:	2203      	movs	r2, #3
    2820:	4669      	mov	r1, sp
    2822:	4628      	mov	r0, r5
    2824:	f7fd fef0 	bl	608 <memcpy>

	return 0;
}
    2828:	4620      	mov	r0, r4
    282a:	b005      	add	sp, #20
    282c:	bd30      	pop	{r4, r5, pc}

0000282e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    282e:	b513      	push	{r0, r1, r4, lr}
    2830:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    2832:	aa01      	add	r2, sp, #4
    2834:	3103      	adds	r1, #3
    2836:	f7ff ffdd 	bl	27f4 <ah>
	if (err) {
    283a:	b948      	cbnz	r0, 2850 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    283c:	2203      	movs	r2, #3
    283e:	a901      	add	r1, sp, #4
    2840:	4620      	mov	r0, r4
    2842:	f7fd fecc 	bl	5de <memcmp>
    2846:	fab0 f080 	clz	r0, r0
    284a:	0940      	lsrs	r0, r0, #5
}
    284c:	b002      	add	sp, #8
    284e:	bd10      	pop	{r4, pc}
		return false;
    2850:	2000      	movs	r0, #0
    2852:	e7fb      	b.n	284c <bt_rpa_irk_matches+0x1e>

00002854 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    2854:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    2856:	1ccd      	adds	r5, r1, #3
{
    2858:	4606      	mov	r6, r0
    285a:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    285c:	4628      	mov	r0, r5
    285e:	2103      	movs	r1, #3
    2860:	f008 fdf6 	bl	b450 <bt_rand>
	if (err) {
    2864:	b960      	cbnz	r0, 2880 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    2866:	7963      	ldrb	r3, [r4, #5]
    2868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    286c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2870:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    2872:	4622      	mov	r2, r4
    2874:	4629      	mov	r1, r5
    2876:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    2878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    287c:	f7ff bfba 	b.w	27f4 <ah>
}
    2880:	bd70      	pop	{r4, r5, r6, pc}
	...

00002884 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    2884:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    2886:	7802      	ldrb	r2, [r0, #0]
    2888:	2a01      	cmp	r2, #1
{
    288a:	4604      	mov	r4, r0
    288c:	460b      	mov	r3, r1
	switch (src->type) {
    288e:	d017      	beq.n	28c0 <uuid_to_uuid128+0x3c>
    2890:	d303      	bcc.n	289a <uuid_to_uuid128+0x16>
    2892:	2a02      	cmp	r2, #2
    2894:	d02c      	beq.n	28f0 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    2896:	bcf0      	pop	{r4, r5, r6, r7}
    2898:	4770      	bx	lr
		*dst = uuid128_base;
    289a:	4a18      	ldr	r2, [pc, #96]	; (28fc <uuid_to_uuid128+0x78>)
    289c:	460d      	mov	r5, r1
    289e:	f102 0710 	add.w	r7, r2, #16
    28a2:	6810      	ldr	r0, [r2, #0]
    28a4:	6851      	ldr	r1, [r2, #4]
    28a6:	462e      	mov	r6, r5
    28a8:	c603      	stmia	r6!, {r0, r1}
    28aa:	3208      	adds	r2, #8
    28ac:	42ba      	cmp	r2, r7
    28ae:	4635      	mov	r5, r6
    28b0:	d1f7      	bne.n	28a2 <uuid_to_uuid128+0x1e>
    28b2:	7812      	ldrb	r2, [r2, #0]
    28b4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    28b6:	8862      	ldrh	r2, [r4, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    28b8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    28ba:	0a12      	lsrs	r2, r2, #8
    28bc:	739a      	strb	r2, [r3, #14]
    28be:	e7ea      	b.n	2896 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
    28c0:	4a0e      	ldr	r2, [pc, #56]	; (28fc <uuid_to_uuid128+0x78>)
    28c2:	460d      	mov	r5, r1
    28c4:	f102 0710 	add.w	r7, r2, #16
    28c8:	6810      	ldr	r0, [r2, #0]
    28ca:	6851      	ldr	r1, [r2, #4]
    28cc:	462e      	mov	r6, r5
    28ce:	c603      	stmia	r6!, {r0, r1}
    28d0:	3208      	adds	r2, #8
    28d2:	42ba      	cmp	r2, r7
    28d4:	4635      	mov	r5, r6
    28d6:	d1f7      	bne.n	28c8 <uuid_to_uuid128+0x44>
    28d8:	7812      	ldrb	r2, [r2, #0]
    28da:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    28dc:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    28de:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    28e0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    28e4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    28e6:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    28e8:	0a12      	lsrs	r2, r2, #8
    28ea:	7399      	strb	r1, [r3, #14]
    28ec:	741a      	strb	r2, [r3, #16]
    28ee:	e7d2      	b.n	2896 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
    28f0:	4601      	mov	r1, r0
    28f2:	2211      	movs	r2, #17
    28f4:	4618      	mov	r0, r3
}
    28f6:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    28f8:	f7fd be86 	b.w	608 <memcpy>
    28fc:	00018cc3 	.word	0x00018cc3

00002900 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    2900:	b510      	push	{r4, lr}
    2902:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    2904:	7801      	ldrb	r1, [r0, #0]
    2906:	7822      	ldrb	r2, [r4, #0]
    2908:	428a      	cmp	r2, r1
{
    290a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type)
    290c:	d00e      	beq.n	292c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
    290e:	4669      	mov	r1, sp
    2910:	f7ff ffb8 	bl	2884 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    2914:	a905      	add	r1, sp, #20
    2916:	4620      	mov	r0, r4
    2918:	f7ff ffb4 	bl	2884 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
    291c:	2210      	movs	r2, #16
    291e:	f10d 0115 	add.w	r1, sp, #21
    2922:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    2926:	f7fd fe5a 	bl	5de <memcmp>
    292a:	e00a      	b.n	2942 <bt_uuid_cmp+0x42>
	switch (u1->type) {
    292c:	2a01      	cmp	r2, #1
    292e:	d00a      	beq.n	2946 <bt_uuid_cmp+0x46>
    2930:	d304      	bcc.n	293c <bt_uuid_cmp+0x3c>
    2932:	2a02      	cmp	r2, #2
    2934:	d00a      	beq.n	294c <bt_uuid_cmp+0x4c>
	}

	return -EINVAL;
    2936:	f06f 0015 	mvn.w	r0, #21
    293a:	e002      	b.n	2942 <bt_uuid_cmp+0x42>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    293c:	8840      	ldrh	r0, [r0, #2]
    293e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    2940:	1ac0      	subs	r0, r0, r3
}
    2942:	b00a      	add	sp, #40	; 0x28
    2944:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    2946:	6840      	ldr	r0, [r0, #4]
    2948:	6863      	ldr	r3, [r4, #4]
    294a:	e7f9      	b.n	2940 <bt_uuid_cmp+0x40>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    294c:	2210      	movs	r2, #16
    294e:	1c61      	adds	r1, r4, #1
    2950:	3001      	adds	r0, #1
    2952:	e7e8      	b.n	2926 <bt_uuid_cmp+0x26>

00002954 <ver_str>:
	return 0;
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(u8_t ver)
{
    2954:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    2956:	4d0b      	ldr	r5, [pc, #44]	; (2984 <ver_str+0x30>)
{
    2958:	4606      	mov	r6, r0
	const char * const str[] = {
    295a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    295c:	b08a      	sub	sp, #40	; 0x28
	const char * const str[] = {
    295e:	466c      	mov	r4, sp
    2960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2966:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0",
	};

	if (ver < ARRAY_SIZE(str)) {
    296a:	2e09      	cmp	r6, #9
	const char * const str[] = {
    296c:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
    2970:	bf9b      	ittet	ls
    2972:	ab0a      	addls	r3, sp, #40	; 0x28
    2974:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    2978:	4803      	ldrhi	r0, [pc, #12]	; (2988 <ver_str+0x34>)
		return str[ver];
    297a:	f856 0c28 	ldrls.w	r0, [r6, #-40]
}
    297e:	b00a      	add	sp, #40	; 0x28
    2980:	bd70      	pop	{r4, r5, r6, pc}
    2982:	bf00      	nop
    2984:	00018398 	.word	0x00018398
    2988:	00019ad4 	.word	0x00019ad4

0000298c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    298c:	2207      	movs	r2, #7
    298e:	f7fd be3b 	b.w	608 <memcpy>

00002992 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    2992:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    2994:	f3bf 8f5b 	dmb	ish
    2998:	e850 3f00 	ldrex	r3, [r0]
    299c:	ea43 0201 	orr.w	r2, r3, r1
    29a0:	e840 2e00 	strex	lr, r2, [r0]
    29a4:	f1be 0f00 	cmp.w	lr, #0
    29a8:	d1f6      	bne.n	2998 <atomic_or+0x6>
    29aa:	f3bf 8f5b 	dmb	ish
    29ae:	4618      	mov	r0, r3
    29b0:	f85d fb04 	ldr.w	pc, [sp], #4

000029b4 <atomic_test_bit>:
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    29b4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    29b6:	f3bf 8f5b 	dmb	ish
    29ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    29be:	f3bf 8f5b 	dmb	ish

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    29c2:	f001 011f 	and.w	r1, r1, #31
    29c6:	4108      	asrs	r0, r1
}
    29c8:	f000 0001 	and.w	r0, r0, #1
    29cc:	4770      	bx	lr

000029ce <atomic_and>:
{
    29ce:	b500      	push	{lr}
}
    29d0:	f3bf 8f5b 	dmb	ish
    29d4:	e850 3f00 	ldrex	r3, [r0]
    29d8:	ea03 0201 	and.w	r2, r3, r1
    29dc:	e840 2e00 	strex	lr, r2, [r0]
    29e0:	f1be 0f00 	cmp.w	lr, #0
    29e4:	d1f6      	bne.n	29d4 <atomic_and+0x6>
    29e6:	f3bf 8f5b 	dmb	ish
    29ea:	4618      	mov	r0, r3
    29ec:	f85d fb04 	ldr.w	pc, [sp], #4

000029f0 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    29f0:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    29f2:	f001 031f 	and.w	r3, r1, #31
    29f6:	2401      	movs	r4, #1
    29f8:	409c      	lsls	r4, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    29fa:	094b      	lsrs	r3, r1, #5
    29fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2a00:	43e1      	mvns	r1, r4
    2a02:	f7ff ffe4 	bl	29ce <atomic_and>

	return (old & mask) != 0;
    2a06:	4204      	tst	r4, r0
}
    2a08:	bf14      	ite	ne
    2a0a:	2001      	movne	r0, #1
    2a0c:	2000      	moveq	r0, #0
    2a0e:	bd10      	pop	{r4, pc}

00002a10 <update_conn_param>:
	k_delayed_work_submit(&conn->le.update_work,
    2a10:	78c3      	ldrb	r3, [r0, #3]
    2a12:	2b00      	cmp	r3, #0
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    2a14:	f241 3288 	movw	r2, #5000	; 0x1388
    2a18:	f100 0174 	add.w	r1, r0, #116	; 0x74
    2a1c:	bf08      	it	eq
    2a1e:	2200      	moveq	r2, #0
    2a20:	4801      	ldr	r0, [pc, #4]	; (2a28 <update_conn_param+0x18>)
    2a22:	f015 b9c7 	b.w	17db4 <k_delayed_work_submit_to_queue>
    2a26:	bf00      	nop
    2a28:	20005470 	.word	0x20005470

00002a2c <update_sec_level>:
{
    2a2c:	b513      	push	{r0, r1, r4, lr}
	if (!conn->encrypt) {
    2a2e:	7a83      	ldrb	r3, [r0, #10]
{
    2a30:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    2a32:	b91b      	cbnz	r3, 2a3c <update_sec_level+0x10>
		conn->sec_level = BT_SECURITY_LOW;
    2a34:	2301      	movs	r3, #1
    2a36:	7203      	strb	r3, [r0, #8]
}
    2a38:	b002      	add	sp, #8
    2a3a:	bd10      	pop	{r4, pc}
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    2a3c:	6f00      	ldr	r0, [r0, #112]	; 0x70
    2a3e:	b1f8      	cbz	r0, 2a80 <update_sec_level+0x54>
    2a40:	2100      	movs	r1, #0
    2a42:	3008      	adds	r0, #8
    2a44:	f7ff ffb6 	bl	29b4 <atomic_test_bit>
    2a48:	b1d0      	cbz	r0, 2a80 <update_sec_level+0x54>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    2a4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    2a4c:	899b      	ldrh	r3, [r3, #12]
    2a4e:	069b      	lsls	r3, r3, #26
			conn->sec_level = BT_SECURITY_FIPS;
    2a50:	bf4c      	ite	mi
    2a52:	2304      	movmi	r3, #4
			conn->sec_level = BT_SECURITY_HIGH;
    2a54:	2303      	movpl	r3, #3
		conn->sec_level = BT_SECURITY_MEDIUM;
    2a56:	7223      	strb	r3, [r4, #8]
	if (conn->required_sec_level > conn->sec_level) {
    2a58:	7a62      	ldrb	r2, [r4, #9]
    2a5a:	7a23      	ldrb	r3, [r4, #8]
    2a5c:	429a      	cmp	r2, r3
    2a5e:	d9eb      	bls.n	2a38 <update_sec_level+0xc>
		BT_ERR("Failed to set required security level");
    2a60:	4b08      	ldr	r3, [pc, #32]	; (2a84 <update_sec_level+0x58>)
    2a62:	9301      	str	r3, [sp, #4]
    2a64:	9300      	str	r3, [sp, #0]
    2a66:	4a08      	ldr	r2, [pc, #32]	; (2a88 <update_sec_level+0x5c>)
    2a68:	4b08      	ldr	r3, [pc, #32]	; (2a8c <update_sec_level+0x60>)
    2a6a:	4909      	ldr	r1, [pc, #36]	; (2a90 <update_sec_level+0x64>)
    2a6c:	4809      	ldr	r0, [pc, #36]	; (2a94 <update_sec_level+0x68>)
    2a6e:	f7fe fe37 	bl	16e0 <printk>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    2a72:	2105      	movs	r1, #5
    2a74:	4620      	mov	r0, r4
}
    2a76:	b002      	add	sp, #8
    2a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    2a7c:	f002 bfb6 	b.w	59ec <bt_conn_disconnect>
		conn->sec_level = BT_SECURITY_MEDIUM;
    2a80:	2302      	movs	r3, #2
    2a82:	e7e8      	b.n	2a56 <update_sec_level+0x2a>
    2a84:	0001868d 	.word	0x0001868d
    2a88:	00019a84 	.word	0x00019a84
    2a8c:	00018dc4 	.word	0x00018dc4
    2a90:	00019a8b 	.word	0x00019a8b
    2a94:	00019a8e 	.word	0x00019a8e

00002a98 <hci_cmd_done>:
{
    2a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a9c:	4606      	mov	r6, r0
    2a9e:	b086      	sub	sp, #24
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2aa0:	7990      	ldrb	r0, [r2, #6]
    2aa2:	4f26      	ldr	r7, [pc, #152]	; (2b3c <hci_cmd_done+0xa4>)
{
    2aa4:	4688      	mov	r8, r1
    2aa6:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    2aa8:	f014 f874 	bl	16b94 <net_buf_pool_get>
    2aac:	4287      	cmp	r7, r0
    2aae:	d013      	beq.n	2ad8 <hci_cmd_done+0x40>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    2ab0:	79ac      	ldrb	r4, [r5, #6]
    2ab2:	4620      	mov	r0, r4
    2ab4:	f014 f86e 	bl	16b94 <net_buf_pool_get>
    2ab8:	4b21      	ldr	r3, [pc, #132]	; (2b40 <hci_cmd_done+0xa8>)
    2aba:	9305      	str	r3, [sp, #20]
    2abc:	9003      	str	r0, [sp, #12]
    2abe:	e88d 0048 	stmia.w	sp, {r3, r6}
    2ac2:	9704      	str	r7, [sp, #16]
    2ac4:	9402      	str	r4, [sp, #8]
    2ac6:	4b1f      	ldr	r3, [pc, #124]	; (2b44 <hci_cmd_done+0xac>)
    2ac8:	4a1f      	ldr	r2, [pc, #124]	; (2b48 <hci_cmd_done+0xb0>)
    2aca:	4920      	ldr	r1, [pc, #128]	; (2b4c <hci_cmd_done+0xb4>)
    2acc:	4820      	ldr	r0, [pc, #128]	; (2b50 <hci_cmd_done+0xb8>)
    2ace:	f7fe fe07 	bl	16e0 <printk>
}
    2ad2:	b006      	add	sp, #24
    2ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    2ad8:	4628      	mov	r0, r5
    2ada:	f014 f861 	bl	16ba0 <net_buf_id>
    2ade:	4c1d      	ldr	r4, [pc, #116]	; (2b54 <hci_cmd_done+0xbc>)
    2ae0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2ae4:	8843      	ldrh	r3, [r0, #2]
    2ae6:	42b3      	cmp	r3, r6
    2ae8:	d010      	beq.n	2b0c <hci_cmd_done+0x74>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    2aea:	4628      	mov	r0, r5
    2aec:	f014 f858 	bl	16ba0 <net_buf_id>
    2af0:	4b13      	ldr	r3, [pc, #76]	; (2b40 <hci_cmd_done+0xa8>)
    2af2:	9303      	str	r3, [sp, #12]
    2af4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2af8:	4914      	ldr	r1, [pc, #80]	; (2b4c <hci_cmd_done+0xb4>)
    2afa:	8842      	ldrh	r2, [r0, #2]
    2afc:	9202      	str	r2, [sp, #8]
    2afe:	e88d 0048 	stmia.w	sp, {r3, r6}
    2b02:	4a11      	ldr	r2, [pc, #68]	; (2b48 <hci_cmd_done+0xb0>)
    2b04:	4b0f      	ldr	r3, [pc, #60]	; (2b44 <hci_cmd_done+0xac>)
    2b06:	4814      	ldr	r0, [pc, #80]	; (2b58 <hci_cmd_done+0xc0>)
    2b08:	f7fe fdea 	bl	16e0 <printk>
	if (cmd(buf)->sync) {
    2b0c:	4628      	mov	r0, r5
    2b0e:	f014 f847 	bl	16ba0 <net_buf_id>
    2b12:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2b16:	6843      	ldr	r3, [r0, #4]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d0da      	beq.n	2ad2 <hci_cmd_done+0x3a>
		cmd(buf)->status = status;
    2b1c:	4628      	mov	r0, r5
    2b1e:	f014 f83f 	bl	16ba0 <net_buf_id>
    2b22:	f804 8030 	strb.w	r8, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    2b26:	4628      	mov	r0, r5
    2b28:	f014 f83a 	bl	16ba0 <net_buf_id>
    2b2c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2b30:	6840      	ldr	r0, [r0, #4]
}
    2b32:	b006      	add	sp, #24
    2b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2b38:	f014 bd98 	b.w	1766c <_impl_k_sem_give>
    2b3c:	20008b74 	.word	0x20008b74
    2b40:	0001868d 	.word	0x0001868d
    2b44:	00018e29 	.word	0x00018e29
    2b48:	00019806 	.word	0x00019806
    2b4c:	00019a8b 	.word	0x00019a8b
    2b50:	0001980d 	.word	0x0001980d
    2b54:	2000033c 	.word	0x2000033c
    2b58:	00019852 	.word	0x00019852

00002b5c <sys_put_le64>:
    2b5c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    2b60:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
    2b62:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
    2b64:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
    2b66:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[0] = val;
    2b6a:	7111      	strb	r1, [r2, #4]
	sys_put_le16(val >> 16, &dst[2]);
    2b6c:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
    2b6e:	7090      	strb	r0, [r2, #2]
    2b70:	7191      	strb	r1, [r2, #6]
	dst[1] = val >> 8;
    2b72:	0a00      	lsrs	r0, r0, #8
    2b74:	0a09      	lsrs	r1, r1, #8
    2b76:	70d0      	strb	r0, [r2, #3]
    2b78:	7153      	strb	r3, [r2, #5]
    2b7a:	71d1      	strb	r1, [r2, #7]
    2b7c:	4770      	bx	lr
	...

00002b80 <bt_hci_cmd_create>:
{
    2b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b84:	4680      	mov	r8, r0
    2b86:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2b88:	4813      	ldr	r0, [pc, #76]	; (2bd8 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    2b8a:	4d14      	ldr	r5, [pc, #80]	; (2bdc <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    2b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2b90:	f014 f894 	bl	16cbc <net_buf_alloc_fixed>
    2b94:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2b96:	f100 0608 	add.w	r6, r0, #8
    2b9a:	2100      	movs	r1, #0
    2b9c:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    2b9e:	2700      	movs	r7, #0
    2ba0:	f014 f8ab 	bl	16cfa <net_buf_simple_reserve>
    2ba4:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    2ba6:	4620      	mov	r0, r4
    2ba8:	f013 fffa 	bl	16ba0 <net_buf_id>
    2bac:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2bb0:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    2bb4:	4620      	mov	r0, r4
    2bb6:	f013 fff3 	bl	16ba0 <net_buf_id>
    2bba:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    2bbe:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    2bc0:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    2bc2:	4630      	mov	r0, r6
    2bc4:	f014 f8dc 	bl	16d80 <net_buf_simple_add>
	hdr->param_len = param_len;
    2bc8:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    2bcc:	f8a0 8000 	strh.w	r8, [r0]
}
    2bd0:	4620      	mov	r0, r4
    2bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bd6:	bf00      	nop
    2bd8:	20008b74 	.word	0x20008b74
    2bdc:	2000033c 	.word	0x2000033c

00002be0 <bt_hci_cmd_send_sync>:
{
    2be0:	b570      	push	{r4, r5, r6, lr}
    2be2:	4615      	mov	r5, r2
    2be4:	b086      	sub	sp, #24
	if (!buf) {
    2be6:	460c      	mov	r4, r1
    2be8:	b919      	cbnz	r1, 2bf2 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    2bea:	f7ff ffc9 	bl	2b80 <bt_hci_cmd_create>
		if (!buf) {
    2bee:	4604      	mov	r4, r0
    2bf0:	b368      	cbz	r0, 2c4e <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    2bf2:	2201      	movs	r2, #1
    2bf4:	2100      	movs	r1, #0
    2bf6:	4668      	mov	r0, sp
    2bf8:	f014 fd2e 	bl	17658 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    2bfc:	4620      	mov	r0, r4
    2bfe:	f013 ffcf 	bl	16ba0 <net_buf_id>
    2c02:	4e14      	ldr	r6, [pc, #80]	; (2c54 <bt_hci_cmd_send_sync+0x74>)
    2c04:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    2c08:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    2c0c:	4620      	mov	r0, r4
    2c0e:	f014 f8b3 	bl	16d78 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2c12:	4621      	mov	r1, r4
    2c14:	4810      	ldr	r0, [pc, #64]	; (2c58 <bt_hci_cmd_send_sync+0x78>)
    2c16:	f014 f874 	bl	16d02 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2c1a:	f242 7110 	movw	r1, #10000	; 0x2710
    2c1e:	4668      	mov	r0, sp
    2c20:	f014 fd84 	bl	1772c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    2c24:	4620      	mov	r0, r4
    2c26:	f013 ffbb 	bl	16ba0 <net_buf_id>
    2c2a:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    2c2e:	b130      	cbz	r0, 2c3e <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    2c30:	4620      	mov	r0, r4
    2c32:	f014 f873 	bl	16d1c <net_buf_unref>
		err = -EIO;
    2c36:	f06f 0004 	mvn.w	r0, #4
}
    2c3a:	b006      	add	sp, #24
    2c3c:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    2c3e:	b10d      	cbz	r5, 2c44 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    2c40:	602c      	str	r4, [r5, #0]
    2c42:	e7fa      	b.n	2c3a <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2c44:	4620      	mov	r0, r4
    2c46:	f014 f869 	bl	16d1c <net_buf_unref>
		err = 0;
    2c4a:	4628      	mov	r0, r5
    2c4c:	e7f5      	b.n	2c3a <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    2c4e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2c52:	e7f2      	b.n	2c3a <bt_hci_cmd_send_sync+0x5a>
    2c54:	2000033c 	.word	0x2000033c
    2c58:	200086ec 	.word	0x200086ec

00002c5c <set_random_address>:
{
    2c5c:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    2c5e:	4d15      	ldr	r5, [pc, #84]	; (2cb4 <set_random_address+0x58>)
    2c60:	2206      	movs	r2, #6
    2c62:	f105 0108 	add.w	r1, r5, #8
    2c66:	4606      	mov	r6, r0
    2c68:	f7fd fcb9 	bl	5de <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2c6c:	4604      	mov	r4, r0
    2c6e:	b1d8      	cbz	r0, 2ca8 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2c70:	2106      	movs	r1, #6
    2c72:	f242 0005 	movw	r0, #8197	; 0x2005
    2c76:	f7ff ff83 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    2c7a:	4604      	mov	r4, r0
    2c7c:	b1b0      	cbz	r0, 2cac <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2c7e:	2206      	movs	r2, #6
    2c80:	4631      	mov	r1, r6
    2c82:	3008      	adds	r0, #8
    2c84:	f014 f882 	bl	16d8c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    2c88:	4621      	mov	r1, r4
    2c8a:	2200      	movs	r2, #0
    2c8c:	f242 0005 	movw	r0, #8197	; 0x2005
    2c90:	f7ff ffa6 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    2c94:	4604      	mov	r4, r0
    2c96:	b938      	cbnz	r0, 2ca8 <set_random_address+0x4c>
	memcpy(dst, src, sizeof(*dst));
    2c98:	2206      	movs	r2, #6
    2c9a:	4631      	mov	r1, r6
    2c9c:	f105 0008 	add.w	r0, r5, #8
    2ca0:	f7fd fcb2 	bl	608 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2ca4:	2301      	movs	r3, #1
    2ca6:	71eb      	strb	r3, [r5, #7]
}
    2ca8:	4620      	mov	r0, r4
    2caa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2cac:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2cb0:	e7fa      	b.n	2ca8 <set_random_address+0x4c>
    2cb2:	bf00      	nop
    2cb4:	20008618 	.word	0x20008618

00002cb8 <le_set_private_addr>:
{
    2cb8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    2cba:	2106      	movs	r1, #6
    2cbc:	4668      	mov	r0, sp
    2cbe:	f008 fbc7 	bl	b450 <bt_rand>
	if (err) {
    2cc2:	b940      	cbnz	r0, 2cd6 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2cc4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2cc8:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    2cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2cce:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2cd2:	f7ff ffc3 	bl	2c5c <set_random_address>
}
    2cd6:	b003      	add	sp, #12
    2cd8:	f85d fb04 	ldr.w	pc, [sp], #4

00002cdc <hci_id_add>:
{
    2cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cde:	4607      	mov	r7, r0
    2ce0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    2ce2:	f242 0027 	movw	r0, #8231	; 0x2027
    2ce6:	2127      	movs	r1, #39	; 0x27
    2ce8:	f7ff ff4a 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    2cec:	4604      	mov	r4, r0
    2cee:	b1d0      	cbz	r0, 2d26 <hci_id_add+0x4a>
	cp = net_buf_add(buf, sizeof(*cp));
    2cf0:	2127      	movs	r1, #39	; 0x27
    2cf2:	3008      	adds	r0, #8
    2cf4:	f014 f844 	bl	16d80 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    2cf8:	4639      	mov	r1, r7
	cp = net_buf_add(buf, sizeof(*cp));
    2cfa:	4605      	mov	r5, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    2cfc:	f7ff fe46 	bl	298c <bt_addr_le_copy>
	memcpy(cp->peer_irk, val, 16);
    2d00:	4631      	mov	r1, r6
    2d02:	2210      	movs	r2, #16
    2d04:	1de8      	adds	r0, r5, #7
    2d06:	f7fd fc7f 	bl	608 <memcpy>
	memset(cp->local_irk, 0, 16);
    2d0a:	2210      	movs	r2, #16
    2d0c:	2100      	movs	r1, #0
    2d0e:	f105 0017 	add.w	r0, r5, #23
    2d12:	f7fd fca5 	bl	660 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    2d16:	4621      	mov	r1, r4
    2d18:	2200      	movs	r2, #0
    2d1a:	f242 0027 	movw	r0, #8231	; 0x2027
}
    2d1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    2d22:	f7ff bf5d 	b.w	2be0 <bt_hci_cmd_send_sync>
}
    2d26:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002d2c <keys_add_id>:
	hci_id_add(&keys->addr, keys->irk.val);
    2d2c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    2d30:	f7ff bfd4 	b.w	2cdc <hci_id_add>

00002d34 <addr_res_enable>:
{
    2d34:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    2d36:	2101      	movs	r1, #1
{
    2d38:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
    2d3a:	f242 002d 	movw	r0, #8237	; 0x202d
    2d3e:	f7ff ff1f 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    2d42:	4604      	mov	r4, r0
    2d44:	b158      	cbz	r0, 2d5e <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
    2d46:	4629      	mov	r1, r5
    2d48:	3008      	adds	r0, #8
    2d4a:	f014 f828 	bl	16d9e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    2d4e:	4621      	mov	r1, r4
    2d50:	2200      	movs	r2, #0
    2d52:	f242 002d 	movw	r0, #8237	; 0x202d
}
    2d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
    2d5a:	f7ff bf41 	b.w	2be0 <bt_hci_cmd_send_sync>
}
    2d5e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2d62:	bd38      	pop	{r3, r4, r5, pc}

00002d64 <set_le_scan_enable>:
{
    2d64:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2d66:	2102      	movs	r1, #2
{
    2d68:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    2d6a:	f242 000c 	movw	r0, #8204	; 0x200c
    2d6e:	f7ff ff07 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    2d72:	4604      	mov	r4, r0
    2d74:	b328      	cbz	r0, 2dc2 <set_le_scan_enable+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
    2d76:	2102      	movs	r1, #2
    2d78:	3008      	adds	r0, #8
    2d7a:	f014 f801 	bl	16d80 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2d7e:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    2d80:	4602      	mov	r2, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2d82:	d115      	bne.n	2db0 <set_le_scan_enable+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    2d84:	210a      	movs	r1, #10
    2d86:	4810      	ldr	r0, [pc, #64]	; (2dc8 <set_le_scan_enable+0x64>)
    2d88:	f7ff fe14 	bl	29b4 <atomic_test_bit>
    2d8c:	7050      	strb	r0, [r2, #1]
	cp->enable = enable;
    2d8e:	7015      	strb	r5, [r2, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    2d90:	4621      	mov	r1, r4
    2d92:	2200      	movs	r2, #0
    2d94:	f242 000c 	movw	r0, #8204	; 0x200c
    2d98:	f7ff ff22 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    2d9c:	4604      	mov	r4, r0
    2d9e:	b928      	cbnz	r0, 2dac <set_le_scan_enable+0x48>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    2da0:	2d01      	cmp	r5, #1
    2da2:	d108      	bne.n	2db6 <set_le_scan_enable+0x52>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2da4:	2180      	movs	r1, #128	; 0x80
    2da6:	4808      	ldr	r0, [pc, #32]	; (2dc8 <set_le_scan_enable+0x64>)
    2da8:	f7ff fdf3 	bl	2992 <atomic_or>
}
    2dac:	4620      	mov	r0, r4
    2dae:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    2db0:	2300      	movs	r3, #0
    2db2:	7043      	strb	r3, [r0, #1]
    2db4:	e7eb      	b.n	2d8e <set_le_scan_enable+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2db6:	f06f 0180 	mvn.w	r1, #128	; 0x80
    2dba:	4803      	ldr	r0, [pc, #12]	; (2dc8 <set_le_scan_enable+0x64>)
    2dbc:	f7ff fe07 	bl	29ce <atomic_and>
    2dc0:	e7f4      	b.n	2dac <set_le_scan_enable+0x48>
		return -ENOBUFS;
    2dc2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2dc6:	e7f1      	b.n	2dac <set_le_scan_enable+0x48>
    2dc8:	20008688 	.word	0x20008688

00002dcc <set_advertise_enable>:
{
    2dcc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2dce:	2101      	movs	r1, #1
{
    2dd0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    2dd2:	f242 000a 	movw	r0, #8202	; 0x200a
    2dd6:	f7ff fed3 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    2dda:	4604      	mov	r4, r0
    2ddc:	b1d8      	cbz	r0, 2e16 <set_advertise_enable+0x4a>
    2dde:	3008      	adds	r0, #8
	if (enable) {
    2de0:	b18d      	cbz	r5, 2e06 <set_advertise_enable+0x3a>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2de2:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2de4:	f013 ffdb 	bl	16d9e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    2de8:	4621      	mov	r1, r4
    2dea:	2200      	movs	r2, #0
    2dec:	f242 000a 	movw	r0, #8202	; 0x200a
    2df0:	f7ff fef6 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    2df4:	4604      	mov	r4, r0
    2df6:	b920      	cbnz	r0, 2e02 <set_advertise_enable+0x36>
	if (enable) {
    2df8:	b13d      	cbz	r5, 2e0a <set_advertise_enable+0x3e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2dfa:	2120      	movs	r1, #32
    2dfc:	4807      	ldr	r0, [pc, #28]	; (2e1c <set_advertise_enable+0x50>)
    2dfe:	f7ff fdc8 	bl	2992 <atomic_or>
}
    2e02:	4620      	mov	r0, r4
    2e04:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    2e06:	4629      	mov	r1, r5
    2e08:	e7ec      	b.n	2de4 <set_advertise_enable+0x18>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2e0a:	f06f 0120 	mvn.w	r1, #32
    2e0e:	4803      	ldr	r0, [pc, #12]	; (2e1c <set_advertise_enable+0x50>)
    2e10:	f7ff fddd 	bl	29ce <atomic_and>
    2e14:	e7f5      	b.n	2e02 <set_advertise_enable+0x36>
		return -ENOBUFS;
    2e16:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2e1a:	e7f2      	b.n	2e02 <set_advertise_enable+0x36>
    2e1c:	20008688 	.word	0x20008688

00002e20 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    2e20:	8802      	ldrh	r2, [r0, #0]
    2e22:	8843      	ldrh	r3, [r0, #2]
    2e24:	429a      	cmp	r2, r3
{
    2e26:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
    2e28:	d818      	bhi.n	2e5c <bt_le_conn_params_valid+0x3c>
    2e2a:	2a05      	cmp	r2, #5
    2e2c:	d916      	bls.n	2e5c <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
    2e2e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    2e32:	d813      	bhi.n	2e5c <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
    2e34:	8884      	ldrh	r4, [r0, #4]
    2e36:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    2e3a:	d20f      	bcs.n	2e5c <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
    2e3c:	88c1      	ldrh	r1, [r0, #6]
    2e3e:	f1a1 020a 	sub.w	r2, r1, #10
    2e42:	b292      	uxth	r2, r2
    2e44:	f640 4076 	movw	r0, #3190	; 0xc76
    2e48:	4282      	cmp	r2, r0
    2e4a:	d807      	bhi.n	2e5c <bt_le_conn_params_valid+0x3c>
	     ((1 + param->latency) * param->interval_max))) {
    2e4c:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    2e50:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
    2e54:	bfb4      	ite	lt
    2e56:	2001      	movlt	r0, #1
    2e58:	2000      	movge	r0, #0
    2e5a:	bd10      	pop	{r4, pc}
		return false;
    2e5c:	2000      	movs	r0, #0
}
    2e5e:	bd10      	pop	{r4, pc}

00002e60 <bt_id_add>:
{
    2e60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    2e64:	4d66      	ldr	r5, [pc, #408]	; (3000 <bt_id_add+0x1a0>)
    2e66:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
{
    2e6a:	4606      	mov	r6, r0
    2e6c:	462c      	mov	r4, r5
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    2e6e:	b11b      	cbz	r3, 2e78 <bt_id_add+0x18>
    2e70:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    2e74:	429a      	cmp	r2, r3
    2e76:	d909      	bls.n	2e8c <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    2e78:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    2e7c:	3301      	adds	r3, #1
    2e7e:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		return 0;
    2e82:	2500      	movs	r5, #0
}
    2e84:	4628      	mov	r0, r5
    2e86:	b004      	add	sp, #16
    2e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    2e8c:	2102      	movs	r1, #2
    2e8e:	2000      	movs	r0, #0
    2e90:	f002 fcb2 	bl	57f8 <bt_conn_lookup_state_le>
	if (conn) {
    2e94:	4680      	mov	r8, r0
    2e96:	b180      	cbz	r0, 2eba <bt_id_add+0x5a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2e9c:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2ea0:	f7ff fd77 	bl	2992 <atomic_or>
    2ea4:	2104      	movs	r1, #4
    2ea6:	f106 0008 	add.w	r0, r6, #8
    2eaa:	f7ff fd72 	bl	2992 <atomic_or>
		bt_conn_unref(conn);
    2eae:	4640      	mov	r0, r8
    2eb0:	f002 fcc4 	bl	583c <bt_conn_unref>
		return -EAGAIN;
    2eb4:	f06f 050a 	mvn.w	r5, #10
    2eb8:	e7e4      	b.n	2e84 <bt_id_add+0x24>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    2eba:	2105      	movs	r1, #5
    2ebc:	f105 0070 	add.w	r0, r5, #112	; 0x70
    2ec0:	f7ff fd78 	bl	29b4 <atomic_test_bit>
	if (adv_enabled) {
    2ec4:	4607      	mov	r7, r0
    2ec6:	b110      	cbz	r0, 2ece <bt_id_add+0x6e>
		set_advertise_enable(false);
    2ec8:	4640      	mov	r0, r8
    2eca:	f7ff ff7f 	bl	2dcc <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    2ece:	2107      	movs	r1, #7
    2ed0:	484c      	ldr	r0, [pc, #304]	; (3004 <bt_id_add+0x1a4>)
    2ed2:	f7ff fd6f 	bl	29b4 <atomic_test_bit>
	if (scan_enabled) {
    2ed6:	4680      	mov	r8, r0
    2ed8:	b110      	cbz	r0, 2ee0 <bt_id_add+0x80>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2eda:	2000      	movs	r0, #0
    2edc:	f7ff ff42 	bl	2d64 <set_le_scan_enable>
	if (bt_dev.le.rl_entries) {
    2ee0:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    2ee4:	b1e3      	cbz	r3, 2f20 <bt_id_add+0xc0>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    2ee6:	2000      	movs	r0, #0
    2ee8:	f7ff ff24 	bl	2d34 <addr_res_enable>
		if (err) {
    2eec:	4605      	mov	r5, r0
    2eee:	b1b8      	cbz	r0, 2f20 <bt_id_add+0xc0>
			BT_WARN("Failed to disable address resolution");
    2ef0:	4b45      	ldr	r3, [pc, #276]	; (3008 <bt_id_add+0x1a8>)
    2ef2:	9301      	str	r3, [sp, #4]
    2ef4:	9300      	str	r3, [sp, #0]
    2ef6:	4a45      	ldr	r2, [pc, #276]	; (300c <bt_id_add+0x1ac>)
    2ef8:	4b45      	ldr	r3, [pc, #276]	; (3010 <bt_id_add+0x1b0>)
    2efa:	4946      	ldr	r1, [pc, #280]	; (3014 <bt_id_add+0x1b4>)
    2efc:	4846      	ldr	r0, [pc, #280]	; (3018 <bt_id_add+0x1b8>)
			BT_ERR("Failed to clear resolution list");
    2efe:	f7fe fbef 	bl	16e0 <printk>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    2f02:	2001      	movs	r0, #1
    2f04:	f7ff ff16 	bl	2d34 <addr_res_enable>
	if (scan_enabled) {
    2f08:	f1b8 0f00 	cmp.w	r8, #0
    2f0c:	d002      	beq.n	2f14 <bt_id_add+0xb4>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2f0e:	2001      	movs	r0, #1
    2f10:	f7ff ff28 	bl	2d64 <set_le_scan_enable>
	if (adv_enabled) {
    2f14:	2f00      	cmp	r7, #0
    2f16:	d0b5      	beq.n	2e84 <bt_id_add+0x24>
		set_advertise_enable(true);
    2f18:	2001      	movs	r0, #1
    2f1a:	f7ff ff57 	bl	2dcc <set_advertise_enable>
    2f1e:	e7b1      	b.n	2e84 <bt_id_add+0x24>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    2f20:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    2f24:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    2f28:	429a      	cmp	r2, r3
    2f2a:	d11d      	bne.n	2f68 <bt_id_add+0x108>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    2f2c:	4e36      	ldr	r6, [pc, #216]	; (3008 <bt_id_add+0x1a8>)
    2f2e:	4b38      	ldr	r3, [pc, #224]	; (3010 <bt_id_add+0x1b0>)
    2f30:	4a36      	ldr	r2, [pc, #216]	; (300c <bt_id_add+0x1ac>)
    2f32:	4938      	ldr	r1, [pc, #224]	; (3014 <bt_id_add+0x1b4>)
    2f34:	9601      	str	r6, [sp, #4]
    2f36:	9600      	str	r6, [sp, #0]
    2f38:	4838      	ldr	r0, [pc, #224]	; (301c <bt_id_add+0x1bc>)
    2f3a:	f7fe fbd1 	bl	16e0 <printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    2f3e:	2200      	movs	r2, #0
    2f40:	4611      	mov	r1, r2
    2f42:	f242 0029 	movw	r0, #8233	; 0x2029
    2f46:	f7ff fe4b 	bl	2be0 <bt_hci_cmd_send_sync>
		if (err) {
    2f4a:	4605      	mov	r5, r0
    2f4c:	b130      	cbz	r0, 2f5c <bt_id_add+0xfc>
			BT_ERR("Failed to clear resolution list");
    2f4e:	9601      	str	r6, [sp, #4]
    2f50:	9600      	str	r6, [sp, #0]
    2f52:	4b2f      	ldr	r3, [pc, #188]	; (3010 <bt_id_add+0x1b0>)
    2f54:	4a32      	ldr	r2, [pc, #200]	; (3020 <bt_id_add+0x1c0>)
    2f56:	492f      	ldr	r1, [pc, #188]	; (3014 <bt_id_add+0x1b4>)
    2f58:	4832      	ldr	r0, [pc, #200]	; (3024 <bt_id_add+0x1c4>)
    2f5a:	e7d0      	b.n	2efe <bt_id_add+0x9e>
		bt_dev.le.rl_entries++;
    2f5c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    2f60:	3301      	adds	r3, #1
    2f62:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
    2f66:	e7cc      	b.n	2f02 <bt_id_add+0xa2>
	err = hci_id_add(&keys->addr, keys->irk.val);
    2f68:	f106 0130 	add.w	r1, r6, #48	; 0x30
    2f6c:	4630      	mov	r0, r6
    2f6e:	f7ff feb5 	bl	2cdc <hci_id_add>
	if (err) {
    2f72:	4605      	mov	r5, r0
    2f74:	b138      	cbz	r0, 2f86 <bt_id_add+0x126>
		BT_ERR("Failed to add IRK to controller");
    2f76:	4b24      	ldr	r3, [pc, #144]	; (3008 <bt_id_add+0x1a8>)
    2f78:	9301      	str	r3, [sp, #4]
    2f7a:	9300      	str	r3, [sp, #0]
    2f7c:	4a28      	ldr	r2, [pc, #160]	; (3020 <bt_id_add+0x1c0>)
    2f7e:	4b24      	ldr	r3, [pc, #144]	; (3010 <bt_id_add+0x1b0>)
    2f80:	4924      	ldr	r1, [pc, #144]	; (3014 <bt_id_add+0x1b4>)
    2f82:	4829      	ldr	r0, [pc, #164]	; (3028 <bt_id_add+0x1c8>)
    2f84:	e7bb      	b.n	2efe <bt_id_add+0x9e>
	bt_dev.le.rl_entries++;
    2f86:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
    2f8a:	3301      	adds	r3, #1
    2f8c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    2f90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    2f94:	075b      	lsls	r3, r3, #29
    2f96:	d407      	bmi.n	2fa8 <bt_id_add+0x148>
		BT_WARN("Set privacy mode command is not supported");
    2f98:	4b1b      	ldr	r3, [pc, #108]	; (3008 <bt_id_add+0x1a8>)
    2f9a:	9301      	str	r3, [sp, #4]
    2f9c:	9300      	str	r3, [sp, #0]
    2f9e:	4a1b      	ldr	r2, [pc, #108]	; (300c <bt_id_add+0x1ac>)
    2fa0:	4b22      	ldr	r3, [pc, #136]	; (302c <bt_id_add+0x1cc>)
    2fa2:	491c      	ldr	r1, [pc, #112]	; (3014 <bt_id_add+0x1b4>)
    2fa4:	4822      	ldr	r0, [pc, #136]	; (3030 <bt_id_add+0x1d0>)
    2fa6:	e7aa      	b.n	2efe <bt_id_add+0x9e>
	bt_addr_le_copy(&cp.id_addr, addr);
    2fa8:	4631      	mov	r1, r6
    2faa:	a802      	add	r0, sp, #8
    2fac:	f7ff fcee 	bl	298c <bt_addr_le_copy>
	cp.mode = mode;
    2fb0:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    2fb2:	2108      	movs	r1, #8
    2fb4:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    2fb8:	f88d 300f 	strb.w	r3, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    2fbc:	f7ff fde0 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    2fc0:	4604      	mov	r4, r0
    2fc2:	b1c8      	cbz	r0, 2ff8 <bt_id_add+0x198>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    2fc4:	2208      	movs	r2, #8
    2fc6:	eb0d 0102 	add.w	r1, sp, r2
    2fca:	4410      	add	r0, r2
    2fcc:	f013 fede 	bl	16d8c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    2fd0:	4621      	mov	r1, r4
    2fd2:	462a      	mov	r2, r5
    2fd4:	f242 004e 	movw	r0, #8270	; 0x204e
    2fd8:	f7ff fe02 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    2fdc:	4604      	mov	r4, r0
    2fde:	2800      	cmp	r0, #0
    2fe0:	d08f      	beq.n	2f02 <bt_id_add+0xa2>
		BT_ERR("Failed to set privacy mode");
    2fe2:	4b09      	ldr	r3, [pc, #36]	; (3008 <bt_id_add+0x1a8>)
    2fe4:	9301      	str	r3, [sp, #4]
    2fe6:	9300      	str	r3, [sp, #0]
    2fe8:	4a0d      	ldr	r2, [pc, #52]	; (3020 <bt_id_add+0x1c0>)
    2fea:	4b09      	ldr	r3, [pc, #36]	; (3010 <bt_id_add+0x1b0>)
    2fec:	4909      	ldr	r1, [pc, #36]	; (3014 <bt_id_add+0x1b4>)
    2fee:	4811      	ldr	r0, [pc, #68]	; (3034 <bt_id_add+0x1d4>)
    2ff0:	f7fe fb76 	bl	16e0 <printk>
    2ff4:	4625      	mov	r5, r4
    2ff6:	e784      	b.n	2f02 <bt_id_add+0xa2>
		return -ENOBUFS;
    2ff8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2ffc:	e7f1      	b.n	2fe2 <bt_id_add+0x182>
    2ffe:	bf00      	nop
    3000:	20008618 	.word	0x20008618
    3004:	20008688 	.word	0x20008688
    3008:	0001868d 	.word	0x0001868d
    300c:	00019806 	.word	0x00019806
    3010:	00018db0 	.word	0x00018db0
    3014:	00019a8b 	.word	0x00019a8b
    3018:	00018f68 	.word	0x00018f68
    301c:	00018f9d 	.word	0x00018f9d
    3020:	00019a84 	.word	0x00019a84
    3024:	00018fde 	.word	0x00018fde
    3028:	0001900e 	.word	0x0001900e
    302c:	00018d9c 	.word	0x00018d9c
    3030:	0001903e 	.word	0x0001903e
    3034:	00019078 	.word	0x00019078

00003038 <bt_id_del>:
{
    3038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    303c:	4c4d      	ldr	r4, [pc, #308]	; (3174 <bt_id_del+0x13c>)
    303e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
{
    3042:	b085      	sub	sp, #20
    3044:	4606      	mov	r6, r0
    3046:	4625      	mov	r5, r4
	if (!bt_dev.le.rl_size ||
    3048:	b123      	cbz	r3, 3054 <bt_id_del+0x1c>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    304a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    304e:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
    3050:	429a      	cmp	r2, r3
    3052:	dd09      	ble.n	3068 <bt_id_del+0x30>
		bt_dev.le.rl_entries--;
    3054:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3058:	3b01      	subs	r3, #1
    305a:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		return 0;
    305e:	2400      	movs	r4, #0
}
    3060:	4620      	mov	r0, r4
    3062:	b005      	add	sp, #20
    3064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3068:	2102      	movs	r1, #2
    306a:	2000      	movs	r0, #0
    306c:	f002 fbc4 	bl	57f8 <bt_conn_lookup_state_le>
	if (conn) {
    3070:	4680      	mov	r8, r0
    3072:	b178      	cbz	r0, 3094 <bt_id_del+0x5c>
    3074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3078:	f104 0070 	add.w	r0, r4, #112	; 0x70
    307c:	f7ff fc89 	bl	2992 <atomic_or>
    3080:	2108      	movs	r1, #8
    3082:	1870      	adds	r0, r6, r1
    3084:	f7ff fc85 	bl	2992 <atomic_or>
		bt_conn_unref(conn);
    3088:	4640      	mov	r0, r8
    308a:	f002 fbd7 	bl	583c <bt_conn_unref>
		return -EAGAIN;
    308e:	f06f 040a 	mvn.w	r4, #10
    3092:	e7e5      	b.n	3060 <bt_id_del+0x28>
	adv_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING);
    3094:	2105      	movs	r1, #5
    3096:	f104 0070 	add.w	r0, r4, #112	; 0x70
    309a:	f7ff fc8b 	bl	29b4 <atomic_test_bit>
	if (adv_enabled) {
    309e:	4607      	mov	r7, r0
    30a0:	b110      	cbz	r0, 30a8 <bt_id_del+0x70>
		set_advertise_enable(false);
    30a2:	4640      	mov	r0, r8
    30a4:	f7ff fe92 	bl	2dcc <set_advertise_enable>
	scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
    30a8:	2107      	movs	r1, #7
    30aa:	4833      	ldr	r0, [pc, #204]	; (3178 <bt_id_del+0x140>)
    30ac:	f7ff fc82 	bl	29b4 <atomic_test_bit>
	if (scan_enabled) {
    30b0:	4680      	mov	r8, r0
    30b2:	b110      	cbz	r0, 30ba <bt_id_del+0x82>
		set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    30b4:	2000      	movs	r0, #0
    30b6:	f7ff fe55 	bl	2d64 <set_le_scan_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    30ba:	2000      	movs	r0, #0
    30bc:	f7ff fe3a 	bl	2d34 <addr_res_enable>
	if (err) {
    30c0:	4604      	mov	r4, r0
    30c2:	b1d8      	cbz	r0, 30fc <bt_id_del+0xc4>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    30c4:	4b2d      	ldr	r3, [pc, #180]	; (317c <bt_id_del+0x144>)
    30c6:	9302      	str	r3, [sp, #8]
    30c8:	e88d 0018 	stmia.w	sp, {r3, r4}
    30cc:	4a2c      	ldr	r2, [pc, #176]	; (3180 <bt_id_del+0x148>)
    30ce:	4b2d      	ldr	r3, [pc, #180]	; (3184 <bt_id_del+0x14c>)
    30d0:	492d      	ldr	r1, [pc, #180]	; (3188 <bt_id_del+0x150>)
    30d2:	482e      	ldr	r0, [pc, #184]	; (318c <bt_id_del+0x154>)
    30d4:	f7fe fb04 	bl	16e0 <printk>
	if (bt_dev.le.rl_entries) {
    30d8:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    30dc:	b113      	cbz	r3, 30e4 <bt_id_del+0xac>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    30de:	2001      	movs	r0, #1
    30e0:	f7ff fe28 	bl	2d34 <addr_res_enable>
	if (scan_enabled) {
    30e4:	f1b8 0f00 	cmp.w	r8, #0
    30e8:	d002      	beq.n	30f0 <bt_id_del+0xb8>
		set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    30ea:	2001      	movs	r0, #1
    30ec:	f7ff fe3a 	bl	2d64 <set_le_scan_enable>
	if (adv_enabled) {
    30f0:	2f00      	cmp	r7, #0
    30f2:	d0b5      	beq.n	3060 <bt_id_del+0x28>
		set_advertise_enable(true);
    30f4:	2001      	movs	r0, #1
    30f6:	f7ff fe69 	bl	2dcc <set_advertise_enable>
    30fa:	e7b1      	b.n	3060 <bt_id_del+0x28>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    30fc:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3100:	f895 20a4 	ldrb.w	r2, [r5, #164]	; 0xa4
    3104:	429a      	cmp	r2, r3
    3106:	d20b      	bcs.n	3120 <bt_id_del+0xe8>
		bt_dev.le.rl_entries--;
    3108:	3b01      	subs	r3, #1
    310a:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		keys->keys &= ~BT_KEYS_IRK;
    310e:	89b3      	ldrh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3110:	491f      	ldr	r1, [pc, #124]	; (3190 <bt_id_del+0x158>)
		keys->keys &= ~BT_KEYS_IRK;
    3112:	f023 0302 	bic.w	r3, r3, #2
    3116:	81b3      	strh	r3, [r6, #12]
		bt_keys_foreach(BT_KEYS_IRK, keys_add_id);
    3118:	2002      	movs	r0, #2
    311a:	f007 f8cd 	bl	a2b8 <bt_keys_foreach>
    311e:	e7db      	b.n	30d8 <bt_id_del+0xa0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    3120:	2107      	movs	r1, #7
    3122:	f242 0028 	movw	r0, #8232	; 0x2028
    3126:	f7ff fd2b 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    312a:	4681      	mov	r9, r0
    312c:	b1f0      	cbz	r0, 316c <bt_id_del+0x134>
	cp = net_buf_add(buf, sizeof(*cp));
    312e:	2107      	movs	r1, #7
    3130:	3008      	adds	r0, #8
    3132:	f013 fe25 	bl	16d80 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, &keys->addr);
    3136:	4631      	mov	r1, r6
    3138:	f7ff fc28 	bl	298c <bt_addr_le_copy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    313c:	4622      	mov	r2, r4
    313e:	4649      	mov	r1, r9
    3140:	f242 0028 	movw	r0, #8232	; 0x2028
    3144:	f7ff fd4c 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    3148:	4604      	mov	r4, r0
    314a:	b148      	cbz	r0, 3160 <bt_id_del+0x128>
		BT_ERR("Failed to remove IRK from controller");
    314c:	4b0b      	ldr	r3, [pc, #44]	; (317c <bt_id_del+0x144>)
    314e:	9301      	str	r3, [sp, #4]
    3150:	9300      	str	r3, [sp, #0]
    3152:	4a0b      	ldr	r2, [pc, #44]	; (3180 <bt_id_del+0x148>)
    3154:	4b0b      	ldr	r3, [pc, #44]	; (3184 <bt_id_del+0x14c>)
    3156:	490c      	ldr	r1, [pc, #48]	; (3188 <bt_id_del+0x150>)
    3158:	480e      	ldr	r0, [pc, #56]	; (3194 <bt_id_del+0x15c>)
    315a:	f7fe fac1 	bl	16e0 <printk>
    315e:	e7bb      	b.n	30d8 <bt_id_del+0xa0>
	bt_dev.le.rl_entries--;
    3160:	f895 30a5 	ldrb.w	r3, [r5, #165]	; 0xa5
    3164:	3b01      	subs	r3, #1
    3166:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
    316a:	e7b5      	b.n	30d8 <bt_id_del+0xa0>
		err = -ENOBUFS;
    316c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    3170:	e7b2      	b.n	30d8 <bt_id_del+0xa0>
    3172:	bf00      	nop
    3174:	20008618 	.word	0x20008618
    3178:	20008688 	.word	0x20008688
    317c:	0001868d 	.word	0x0001868d
    3180:	00019a84 	.word	0x00019a84
    3184:	00018dba 	.word	0x00018dba
    3188:	00019a8b 	.word	0x00019a8b
    318c:	000190a3 	.word	0x000190a3
    3190:	00002d2d 	.word	0x00002d2d
    3194:	000190e0 	.word	0x000190e0

00003198 <update_pending_id>:
{
    3198:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    319a:	f100 0508 	add.w	r5, r0, #8
{
    319e:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_ADD)) {
    31a0:	2102      	movs	r1, #2
    31a2:	4628      	mov	r0, r5
    31a4:	f7ff fc24 	bl	29f0 <atomic_test_and_clear_bit>
    31a8:	b120      	cbz	r0, 31b4 <update_pending_id+0x1c>
		bt_id_add(keys);
    31aa:	4620      	mov	r0, r4
}
    31ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_add(keys);
    31b0:	f7ff be56 	b.w	2e60 <bt_id_add>
	if (atomic_test_and_clear_bit(keys->flags, BT_KEYS_ID_PENDING_DEL)) {
    31b4:	2103      	movs	r1, #3
    31b6:	4628      	mov	r0, r5
    31b8:	f7ff fc1a 	bl	29f0 <atomic_test_and_clear_bit>
    31bc:	b120      	cbz	r0, 31c8 <update_pending_id+0x30>
		bt_id_del(keys);
    31be:	4620      	mov	r0, r4
}
    31c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_id_del(keys);
    31c4:	f7ff bf38 	b.w	3038 <bt_id_del>
    31c8:	bd38      	pop	{r3, r4, r5, pc}

000031ca <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    31ca:	2301      	movs	r3, #1
{
    31cc:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    31ce:	2106      	movs	r1, #6
{
    31d0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    31d2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    31d6:	f008 f93b 	bl	b450 <bt_rand>
	if (err) {
    31da:	b918      	cbnz	r0, 31e4 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    31dc:	79a3      	ldrb	r3, [r4, #6]
    31de:	f063 033f 	orn	r3, r3, #63	; 0x3f
    31e2:	71a3      	strb	r3, [r4, #6]
}
    31e4:	bd10      	pop	{r4, pc}
	...

000031e8 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    31e8:	4b02      	ldr	r3, [pc, #8]	; (31f4 <bt_send+0xc>)
    31ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    31ee:	68db      	ldr	r3, [r3, #12]
    31f0:	4718      	bx	r3
    31f2:	bf00      	nop
    31f4:	20008618 	.word	0x20008618

000031f8 <bt_hci_cmd_send>:
{
    31f8:	b530      	push	{r4, r5, lr}
    31fa:	4604      	mov	r4, r0
    31fc:	b085      	sub	sp, #20
	if (!buf) {
    31fe:	460d      	mov	r5, r1
    3200:	b919      	cbnz	r1, 320a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    3202:	f7ff fcbd 	bl	2b80 <bt_hci_cmd_create>
		if (!buf) {
    3206:	4605      	mov	r5, r0
    3208:	b1f0      	cbz	r0, 3248 <bt_hci_cmd_send+0x50>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    320a:	f640 4335 	movw	r3, #3125	; 0xc35
    320e:	429c      	cmp	r4, r3
    3210:	d114      	bne.n	323c <bt_hci_cmd_send+0x44>
		err = bt_send(buf);
    3212:	4628      	mov	r0, r5
    3214:	f7ff ffe8 	bl	31e8 <bt_send>
		if (err) {
    3218:	4604      	mov	r4, r0
    321a:	b160      	cbz	r0, 3236 <bt_hci_cmd_send+0x3e>
			BT_ERR("Unable to send to driver (err %d)", err);
    321c:	4b0c      	ldr	r3, [pc, #48]	; (3250 <bt_hci_cmd_send+0x58>)
    321e:	9302      	str	r3, [sp, #8]
    3220:	e88d 0018 	stmia.w	sp, {r3, r4}
    3224:	4a0b      	ldr	r2, [pc, #44]	; (3254 <bt_hci_cmd_send+0x5c>)
    3226:	4b0c      	ldr	r3, [pc, #48]	; (3258 <bt_hci_cmd_send+0x60>)
    3228:	490c      	ldr	r1, [pc, #48]	; (325c <bt_hci_cmd_send+0x64>)
    322a:	480d      	ldr	r0, [pc, #52]	; (3260 <bt_hci_cmd_send+0x68>)
    322c:	f7fe fa58 	bl	16e0 <printk>
			net_buf_unref(buf);
    3230:	4628      	mov	r0, r5
    3232:	f013 fd73 	bl	16d1c <net_buf_unref>
}
    3236:	4620      	mov	r0, r4
    3238:	b005      	add	sp, #20
    323a:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    323c:	4629      	mov	r1, r5
    323e:	4809      	ldr	r0, [pc, #36]	; (3264 <bt_hci_cmd_send+0x6c>)
    3240:	f013 fd5f 	bl	16d02 <net_buf_put>
	return 0;
    3244:	2400      	movs	r4, #0
    3246:	e7f6      	b.n	3236 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    3248:	f06f 0436 	mvn.w	r4, #54	; 0x36
    324c:	e7f3      	b.n	3236 <bt_hci_cmd_send+0x3e>
    324e:	bf00      	nop
    3250:	0001868d 	.word	0x0001868d
    3254:	00019a84 	.word	0x00019a84
    3258:	00018cd4 	.word	0x00018cd4
    325c:	00019a8b 	.word	0x00019a8b
    3260:	00018f36 	.word	0x00018f36
    3264:	200086ec 	.word	0x200086ec

00003268 <start_le_scan>:
{
    3268:	b573      	push	{r0, r1, r4, r5, r6, lr}
    326a:	4605      	mov	r5, r0
    326c:	460e      	mov	r6, r1
    326e:	4614      	mov	r4, r2
	memset(&set_param, 0, sizeof(set_param));
    3270:	2100      	movs	r1, #0
    3272:	2207      	movs	r2, #7
    3274:	4668      	mov	r0, sp
    3276:	f7fd f9f3 	bl	660 <memset>
		set_param.addr_type =  bt_dev.id_addr.type;
    327a:	4821      	ldr	r0, [pc, #132]	; (3300 <start_le_scan+0x98>)
	set_param.scan_type = scan_type;
    327c:	f88d 5000 	strb.w	r5, [sp]
	set_param.filter_policy = 0x00;
    3280:	2300      	movs	r3, #0
    3282:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3286:	2d01      	cmp	r5, #1
		set_param.addr_type =  bt_dev.id_addr.type;
    3288:	7803      	ldrb	r3, [r0, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    328a:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    328e:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    3292:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    3296:	d10a      	bne.n	32ae <start_le_scan+0x46>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    3298:	2105      	movs	r1, #5
    329a:	3070      	adds	r0, #112	; 0x70
    329c:	f7ff fb8a 	bl	29b4 <atomic_test_bit>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    32a0:	b928      	cbnz	r0, 32ae <start_le_scan+0x46>
			err = le_set_private_addr();
    32a2:	f7ff fd09 	bl	2cb8 <le_set_private_addr>
			if (err) {
    32a6:	4604      	mov	r4, r0
    32a8:	b9f0      	cbnz	r0, 32e8 <start_le_scan+0x80>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    32aa:	f88d 5005 	strb.w	r5, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    32ae:	2107      	movs	r1, #7
    32b0:	f242 000b 	movw	r0, #8203	; 0x200b
    32b4:	f7ff fc64 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    32b8:	4604      	mov	r4, r0
    32ba:	b1f0      	cbz	r0, 32fa <start_le_scan+0x92>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    32bc:	2207      	movs	r2, #7
    32be:	4669      	mov	r1, sp
    32c0:	3008      	adds	r0, #8
    32c2:	f013 fd63 	bl	16d8c <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    32c6:	4621      	mov	r1, r4
    32c8:	f242 000b 	movw	r0, #8203	; 0x200b
    32cc:	f7ff ff94 	bl	31f8 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    32d0:	2001      	movs	r0, #1
    32d2:	f7ff fd47 	bl	2d64 <set_le_scan_enable>
	if (err) {
    32d6:	4604      	mov	r4, r0
    32d8:	b930      	cbnz	r0, 32e8 <start_le_scan+0x80>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    32da:	2d01      	cmp	r5, #1
    32dc:	d107      	bne.n	32ee <start_le_scan+0x86>
    32de:	f44f 7100 	mov.w	r1, #512	; 0x200
    32e2:	4808      	ldr	r0, [pc, #32]	; (3304 <start_le_scan+0x9c>)
    32e4:	f7ff fb55 	bl	2992 <atomic_or>
}
    32e8:	4620      	mov	r0, r4
    32ea:	b002      	add	sp, #8
    32ec:	bd70      	pop	{r4, r5, r6, pc}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    32ee:	f46f 7100 	mvn.w	r1, #512	; 0x200
    32f2:	4804      	ldr	r0, [pc, #16]	; (3304 <start_le_scan+0x9c>)
    32f4:	f7ff fb6b 	bl	29ce <atomic_and>
    32f8:	e7f6      	b.n	32e8 <start_le_scan+0x80>
		return -ENOBUFS;
    32fa:	f06f 0436 	mvn.w	r4, #54	; 0x36
    32fe:	e7f3      	b.n	32e8 <start_le_scan+0x80>
    3300:	20008618 	.word	0x20008618
    3304:	20008688 	.word	0x20008688

00003308 <bt_le_scan_update>:
{
    3308:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    330a:	2108      	movs	r1, #8
{
    330c:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    330e:	4816      	ldr	r0, [pc, #88]	; (3368 <bt_le_scan_update+0x60>)
    3310:	f7ff fb50 	bl	29b4 <atomic_test_bit>
    3314:	4602      	mov	r2, r0
    3316:	b108      	cbz	r0, 331c <bt_le_scan_update+0x14>
		return 0;
    3318:	2000      	movs	r0, #0
    331a:	bd38      	pop	{r3, r4, r5, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    331c:	2107      	movs	r1, #7
    331e:	4812      	ldr	r0, [pc, #72]	; (3368 <bt_le_scan_update+0x60>)
    3320:	f7ff fb48 	bl	29b4 <atomic_test_bit>
    3324:	b9d0      	cbnz	r0, 335c <bt_le_scan_update+0x54>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    3326:	2101      	movs	r1, #1
    3328:	2000      	movs	r0, #0
    332a:	f002 fa65 	bl	57f8 <bt_conn_lookup_state_le>
		if (!conn) {
    332e:	4604      	mov	r4, r0
    3330:	2800      	cmp	r0, #0
    3332:	d0f1      	beq.n	3318 <bt_le_scan_update+0x10>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3334:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3338:	480b      	ldr	r0, [pc, #44]	; (3368 <bt_le_scan_update+0x60>)
    333a:	f7ff fb2a 	bl	2992 <atomic_or>
		bt_conn_unref(conn);
    333e:	4620      	mov	r0, r4
    3340:	f002 fa7c 	bl	583c <bt_conn_unref>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    3344:	2d00      	cmp	r5, #0
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3346:	bf15      	itete	ne
    3348:	2230      	movne	r2, #48	; 0x30
    334a:	2212      	moveq	r2, #18
    334c:	2160      	movne	r1, #96	; 0x60
    334e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    3352:	2000      	movs	r0, #0
}
    3354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    3358:	f7ff bf86 	b.w	3268 <start_le_scan>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    335c:	4610      	mov	r0, r2
    335e:	f7ff fd01 	bl	2d64 <set_le_scan_enable>
		if (err) {
    3362:	2800      	cmp	r0, #0
    3364:	d0df      	beq.n	3326 <bt_le_scan_update+0x1e>
    3366:	bd38      	pop	{r3, r4, r5, pc}
    3368:	20008688 	.word	0x20008688
    336c:	00000000 	.word	0x00000000

00003370 <bt_init>:
	return 0;
}
#endif /* CONFIG_BT_PRIVACY */

static int bt_init(void)
{
    3370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3374:	b08e      	sub	sp, #56	; 0x38
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    3376:	aa0c      	add	r2, sp, #48	; 0x30
    3378:	2100      	movs	r1, #0
    337a:	f640 4003 	movw	r0, #3075	; 0xc03
    337e:	f7ff fc2f 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    3382:	4604      	mov	r4, r0
    3384:	2800      	cmp	r0, #0
    3386:	d17e      	bne.n	3486 <bt_init+0x116>
	u8_t status = buf->data[0];
    3388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    338a:	689b      	ldr	r3, [r3, #8]
	if (status) {
    338c:	781b      	ldrb	r3, [r3, #0]
    338e:	b96b      	cbnz	r3, 33ac <bt_init+0x3c>
	scan_dev_found_cb = NULL;
    3390:	4a3f      	ldr	r2, [pc, #252]	; (3490 <bt_init+0x120>)
    3392:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3394:	4b3f      	ldr	r3, [pc, #252]	; (3494 <bt_init+0x124>)
    3396:	f3bf 8f5b 	dmb	ish
    339a:	2201      	movs	r2, #1
    339c:	e853 1f00 	ldrex	r1, [r3]
    33a0:	e843 2000 	strex	r0, r2, [r3]
    33a4:	2800      	cmp	r0, #0
    33a6:	d1f9      	bne.n	339c <bt_init+0x2c>
    33a8:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    33ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    33ae:	f013 fcb5 	bl	16d1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    33b2:	aa0c      	add	r2, sp, #48	; 0x30
    33b4:	2100      	movs	r1, #0
    33b6:	f241 0003 	movw	r0, #4099	; 0x1003
    33ba:	f7ff fc11 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    33be:	4604      	mov	r4, r0
    33c0:	2800      	cmp	r0, #0
    33c2:	d160      	bne.n	3486 <bt_init+0x116>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    33c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    33c6:	4d34      	ldr	r5, [pc, #208]	; (3498 <bt_init+0x128>)
    33c8:	6899      	ldr	r1, [r3, #8]
    33ca:	2208      	movs	r2, #8
    33cc:	3101      	adds	r1, #1
    33ce:	f105 0016 	add.w	r0, r5, #22
    33d2:	f7fd f919 	bl	608 <memcpy>
	net_buf_unref(rsp);
    33d6:	980c      	ldr	r0, [sp, #48]	; 0x30
    33d8:	f013 fca0 	bl	16d1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    33dc:	4621      	mov	r1, r4
    33de:	aa0c      	add	r2, sp, #48	; 0x30
    33e0:	f241 0001 	movw	r0, #4097	; 0x1001
    33e4:	f7ff fbfc 	bl	2be0 <bt_hci_cmd_send_sync>
    33e8:	462e      	mov	r6, r5
	if (err) {
    33ea:	4604      	mov	r4, r0
    33ec:	2800      	cmp	r0, #0
    33ee:	d14a      	bne.n	3486 <bt_init+0x116>
	read_local_ver_complete(rsp);
    33f0:	980c      	ldr	r0, [sp, #48]	; 0x30
    33f2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    33f4:	785a      	ldrb	r2, [r3, #1]
    33f6:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    33f8:	78d9      	ldrb	r1, [r3, #3]
    33fa:	789a      	ldrb	r2, [r3, #2]
    33fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3400:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    3402:	791a      	ldrb	r2, [r3, #4]
    3404:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    3406:	7a19      	ldrb	r1, [r3, #8]
    3408:	79da      	ldrb	r2, [r3, #7]
    340a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    340e:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    3410:	795a      	ldrb	r2, [r3, #5]
    3412:	799b      	ldrb	r3, [r3, #6]
    3414:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    3418:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    341a:	f013 fc7f 	bl	16d1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    341e:	4621      	mov	r1, r4
    3420:	aa0c      	add	r2, sp, #48	; 0x30
    3422:	f241 0009 	movw	r0, #4105	; 0x1009
    3426:	f7ff fbdb 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    342a:	4604      	mov	r4, r0
    342c:	bb58      	cbnz	r0, 3486 <bt_init+0x116>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    342e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3430:	6899      	ldr	r1, [r3, #8]
    3432:	2206      	movs	r2, #6
    3434:	3101      	adds	r1, #1
    3436:	1c68      	adds	r0, r5, #1
    3438:	f7fd f8e6 	bl	608 <memcpy>
	net_buf_unref(rsp);
    343c:	980c      	ldr	r0, [sp, #48]	; 0x30
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    343e:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    3440:	f013 fc6c 	bl	16d1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    3444:	4621      	mov	r1, r4
    3446:	aa0c      	add	r2, sp, #48	; 0x30
    3448:	f241 0002 	movw	r0, #4098	; 0x1002
    344c:	f7ff fbc8 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    3450:	4604      	mov	r4, r0
    3452:	b9c0      	cbnz	r0, 3486 <bt_init+0x116>
	memcpy(bt_dev.supported_commands, rp->commands,
    3454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3456:	6899      	ldr	r1, [r3, #8]
    3458:	2240      	movs	r2, #64	; 0x40
    345a:	3101      	adds	r1, #1
    345c:	f105 001e 	add.w	r0, r5, #30
    3460:	f7fd f8d2 	bl	608 <memcpy>
	net_buf_unref(rsp);
    3464:	980c      	ldr	r0, [sp, #48]	; 0x30
    3466:	f013 fc59 	bl	16d1c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    346a:	7eab      	ldrb	r3, [r5, #26]
    346c:	065d      	lsls	r5, r3, #25
    346e:	d41f      	bmi.n	34b0 <bt_init+0x140>
		BT_ERR("Non-LE capable controller detected!");
    3470:	4b0a      	ldr	r3, [pc, #40]	; (349c <bt_init+0x12c>)
    3472:	9301      	str	r3, [sp, #4]
    3474:	9300      	str	r3, [sp, #0]
    3476:	4a0a      	ldr	r2, [pc, #40]	; (34a0 <bt_init+0x130>)
    3478:	4b0a      	ldr	r3, [pc, #40]	; (34a4 <bt_init+0x134>)
    347a:	490b      	ldr	r1, [pc, #44]	; (34a8 <bt_init+0x138>)
    347c:	480b      	ldr	r0, [pc, #44]	; (34ac <bt_init+0x13c>)
    347e:	f7fe f92f 	bl	16e0 <printk>
		return -ENODEV;
    3482:	f06f 0412 	mvn.w	r4, #18
	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);

	return 0;
}
    3486:	4620      	mov	r0, r4
    3488:	b00e      	add	sp, #56	; 0x38
    348a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    348e:	bf00      	nop
    3490:	2000039c 	.word	0x2000039c
    3494:	20008688 	.word	0x20008688
    3498:	20008618 	.word	0x20008618
    349c:	0001868d 	.word	0x0001868d
    34a0:	00019a84 	.word	0x00019a84
    34a4:	00018e78 	.word	0x00018e78
    34a8:	00019a8b 	.word	0x00019a8b
    34ac:	00019115 	.word	0x00019115
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    34b0:	4621      	mov	r1, r4
    34b2:	aa0c      	add	r2, sp, #48	; 0x30
    34b4:	f242 0003 	movw	r0, #8195	; 0x2003
    34b8:	f7ff fb92 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    34bc:	4604      	mov	r4, r0
    34be:	2800      	cmp	r0, #0
    34c0:	d1e1      	bne.n	3486 <bt_init+0x116>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    34c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34c4:	6899      	ldr	r1, [r3, #8]
    34c6:	2208      	movs	r2, #8
    34c8:	3101      	adds	r1, #1
    34ca:	f106 0078 	add.w	r0, r6, #120	; 0x78
    34ce:	f7fd f89b 	bl	608 <memcpy>
	net_buf_unref(rsp);
    34d2:	980c      	ldr	r0, [sp, #48]	; 0x30
    34d4:	f013 fc22 	bl	16d1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    34d8:	4621      	mov	r1, r4
    34da:	aa0c      	add	r2, sp, #48	; 0x30
    34dc:	f242 0002 	movw	r0, #8194	; 0x2002
    34e0:	f7ff fb7e 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    34e4:	4604      	mov	r4, r0
    34e6:	2800      	cmp	r0, #0
    34e8:	d1cd      	bne.n	3486 <bt_init+0x116>
    34ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    34ec:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    34ee:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    34f2:	f8a6 2088 	strh.w	r2, [r6, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    34f6:	b142      	cbz	r2, 350a <bt_init+0x19a>
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    34f8:	78da      	ldrb	r2, [r3, #3]
	k_sem_init(&bt_dev.le.pkts, le_max_num, le_max_num);
    34fa:	2a0a      	cmp	r2, #10
    34fc:	bf28      	it	cs
    34fe:	220a      	movcs	r2, #10
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    3500:	4611      	mov	r1, r2
    3502:	f106 008c 	add.w	r0, r6, #140	; 0x8c
    3506:	f014 f8a7 	bl	17658 <_impl_k_sem_init>
	net_buf_unref(rsp);
    350a:	980c      	ldr	r0, [sp, #48]	; 0x30
    350c:	f013 fc06 	bl	16d1c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    3510:	7eb4      	ldrb	r4, [r6, #26]
    3512:	f014 0420 	ands.w	r4, r4, #32
    3516:	f000 80c9 	beq.w	36ac <bt_init+0x33c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    351a:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    351e:	071c      	lsls	r4, r3, #28
    3520:	d513      	bpl.n	354a <bt_init+0x1da>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    3522:	aa0c      	add	r2, sp, #48	; 0x30
    3524:	2100      	movs	r1, #0
    3526:	f242 001c 	movw	r0, #8220	; 0x201c
    352a:	f7ff fb59 	bl	2be0 <bt_hci_cmd_send_sync>
		if (err) {
    352e:	4604      	mov	r4, r0
    3530:	2800      	cmp	r0, #0
    3532:	d1a8      	bne.n	3486 <bt_init+0x116>
		le_read_supp_states_complete(rsp);
    3534:	980c      	ldr	r0, [sp, #48]	; 0x30
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3536:	6883      	ldr	r3, [r0, #8]
    3538:	f853 2f01 	ldr.w	r2, [r3, #1]!
    353c:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    353e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    3542:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
		net_buf_unref(rsp);
    3546:	f013 fbe9 	bl	16d1c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    354a:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    354e:	0698      	lsls	r0, r3, #26
    3550:	f100 80c8 	bmi.w	36e4 <bt_init+0x374>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    3554:	2108      	movs	r1, #8
    3556:	f242 0001 	movw	r0, #8193	; 0x2001
    355a:	f7ff fb11 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    355e:	4604      	mov	r4, r0
    3560:	2800      	cmp	r0, #0
    3562:	f000 80aa 	beq.w	36ba <bt_init+0x34a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    3566:	2108      	movs	r1, #8
    3568:	4408      	add	r0, r1
    356a:	f013 fc09 	bl	16d80 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    356e:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    3572:	f896 5079 	ldrb.w	r5, [r6, #121]	; 0x79
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    3576:	0799      	lsls	r1, r3, #30
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    3578:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    357a:	bf4c      	ite	mi
    357c:	202f      	movmi	r0, #47	; 0x2f
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    357e:	200f      	movpl	r0, #15
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    3580:	069f      	lsls	r7, r3, #26
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    3582:	bf48      	it	mi
    3584:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    3588:	f015 0f09 	tst.w	r5, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    358c:	bf18      	it	ne
    358e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    3592:	07dd      	lsls	r5, r3, #31
	if ((bt_dev.supported_commands[34] & 0x02) &&
    3594:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    3598:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    359c:	bf48      	it	mi
    359e:	f040 0010 	orrmi.w	r0, r0, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    35a2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    35a4:	bf08      	it	eq
    35a6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    35aa:	2100      	movs	r1, #0
	sys_put_le64(mask, cp_mask->events);
    35ac:	f7ff fad6 	bl	2b5c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    35b0:	4621      	mov	r1, r4
    35b2:	2200      	movs	r2, #0
    35b4:	f242 0001 	movw	r0, #8193	; 0x2001
    35b8:	f7ff fb12 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    35bc:	4604      	mov	r4, r0
    35be:	2800      	cmp	r0, #0
    35c0:	f47f af61 	bne.w	3486 <bt_init+0x116>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    35c4:	7eb3      	ldrb	r3, [r6, #26]
    35c6:	0698      	lsls	r0, r3, #26
    35c8:	d421      	bmi.n	360e <bt_init+0x29e>
	if (bt_dev.le.mtu) {
    35ca:	f8b6 1088 	ldrh.w	r1, [r6, #136]	; 0x88
    35ce:	b9f1      	cbnz	r1, 360e <bt_init+0x29e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    35d0:	aa0c      	add	r2, sp, #48	; 0x30
    35d2:	f241 0005 	movw	r0, #4101	; 0x1005
    35d6:	f7ff fb03 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    35da:	4604      	mov	r4, r0
    35dc:	2800      	cmp	r0, #0
    35de:	f47f af52 	bne.w	3486 <bt_init+0x116>
	if (bt_dev.le.mtu) {
    35e2:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    35e6:	b97b      	cbnz	r3, 3608 <bt_init+0x298>
    35e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35ea:	4895      	ldr	r0, [pc, #596]	; (3840 <bt_init+0x4d0>)
    35ec:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    35ee:	7899      	ldrb	r1, [r3, #2]
    35f0:	785a      	ldrb	r2, [r3, #1]
    35f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    35f6:	f8a6 2088 	strh.w	r2, [r6, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    35fa:	889a      	ldrh	r2, [r3, #4]
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    35fc:	2a0a      	cmp	r2, #10
    35fe:	bf28      	it	cs
    3600:	220a      	movcs	r2, #10
    3602:	4611      	mov	r1, r2
    3604:	f014 f828 	bl	17658 <_impl_k_sem_init>
	net_buf_unref(rsp);
    3608:	980c      	ldr	r0, [sp, #48]	; 0x30
    360a:	f013 fb87 	bl	16d1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    360e:	2108      	movs	r1, #8
    3610:	f640 4001 	movw	r0, #3073	; 0xc01
    3614:	f7ff fab4 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    3618:	4604      	mov	r4, r0
    361a:	2800      	cmp	r0, #0
    361c:	d04d      	beq.n	36ba <bt_init+0x34a>
	ev = net_buf_add(buf, sizeof(*ev));
    361e:	2108      	movs	r1, #8
    3620:	4408      	add	r0, r1
    3622:	f013 fbad 	bl	16d80 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    3626:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    362a:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
    362c:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    362e:	f140 8085 	bpl.w	373c <bt_init+0x3cc>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    3632:	a181      	add	r1, pc, #516	; (adr r1, 3838 <bt_init+0x4c8>)
    3634:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    3638:	f7ff fa90 	bl	2b5c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    363c:	4621      	mov	r1, r4
    363e:	2200      	movs	r2, #0
    3640:	f640 4001 	movw	r0, #3073	; 0xc01
    3644:	f7ff facc 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    3648:	4604      	mov	r4, r0
    364a:	2800      	cmp	r0, #0
    364c:	f47f af1b 	bne.w	3486 <bt_init+0x116>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    3650:	4601      	mov	r1, r0
    3652:	aa0c      	add	r2, sp, #48	; 0x30
    3654:	f64f 4001 	movw	r0, #64513	; 0xfc01
    3658:	f7ff fac2 	bl	2be0 <bt_hci_cmd_send_sync>
    365c:	4d79      	ldr	r5, [pc, #484]	; (3844 <bt_init+0x4d4>)
	if (err) {
    365e:	2800      	cmp	r0, #0
    3660:	d070      	beq.n	3744 <bt_init+0x3d4>
		BT_WARN("Vendor HCI extensions not available");
    3662:	4b79      	ldr	r3, [pc, #484]	; (3848 <bt_init+0x4d8>)
    3664:	4a79      	ldr	r2, [pc, #484]	; (384c <bt_init+0x4dc>)
    3666:	497a      	ldr	r1, [pc, #488]	; (3850 <bt_init+0x4e0>)
    3668:	487a      	ldr	r0, [pc, #488]	; (3854 <bt_init+0x4e4>)
    366a:	9501      	str	r5, [sp, #4]
    366c:	9500      	str	r5, [sp, #0]
		BT_WARN("Failed to read supported vendor commands");
    366e:	f7fe f837 	bl	16e0 <printk>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    3672:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    3674:	2207      	movs	r2, #7
    3676:	a90c      	add	r1, sp, #48	; 0x30
    3678:	4877      	ldr	r0, [pc, #476]	; (3858 <bt_init+0x4e8>)
    367a:	930c      	str	r3, [sp, #48]	; 0x30
    367c:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    3680:	f7fc ffad 	bl	5de <memcmp>
    3684:	2800      	cmp	r0, #0
    3686:	f040 8109 	bne.w	389c <bt_init+0x52c>
	if (bt_storage) {
    368a:	4f74      	ldr	r7, [pc, #464]	; (385c <bt_init+0x4ec>)
    368c:	683b      	ldr	r3, [r7, #0]
    368e:	2b00      	cmp	r3, #0
    3690:	f040 8151 	bne.w	3936 <bt_init+0x5c6>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    3694:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    3698:	07db      	lsls	r3, r3, #31
    369a:	f100 8170 	bmi.w	397e <bt_init+0x60e>
		BT_WARN("Read Static Addresses command not available");
    369e:	9501      	str	r5, [sp, #4]
    36a0:	9500      	str	r5, [sp, #0]
    36a2:	4b6f      	ldr	r3, [pc, #444]	; (3860 <bt_init+0x4f0>)
    36a4:	4a69      	ldr	r2, [pc, #420]	; (384c <bt_init+0x4dc>)
    36a6:	496a      	ldr	r1, [pc, #424]	; (3850 <bt_init+0x4e0>)
    36a8:	486e      	ldr	r0, [pc, #440]	; (3864 <bt_init+0x4f4>)
    36aa:	e175      	b.n	3998 <bt_init+0x628>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    36ac:	2102      	movs	r1, #2
    36ae:	f640 406d 	movw	r0, #3181	; 0xc6d
    36b2:	f7ff fa65 	bl	2b80 <bt_hci_cmd_create>
		if (!buf) {
    36b6:	4605      	mov	r5, r0
    36b8:	b910      	cbnz	r0, 36c0 <bt_init+0x350>
		return -ENOBUFS;
    36ba:	f06f 0436 	mvn.w	r4, #54	; 0x36
    36be:	e6e2      	b.n	3486 <bt_init+0x116>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    36c0:	2102      	movs	r1, #2
    36c2:	3008      	adds	r0, #8
    36c4:	f013 fb5c 	bl	16d80 <net_buf_simple_add>
		cp_le->le = 0x01;
    36c8:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    36ca:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    36cc:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    36ce:	4622      	mov	r2, r4
    36d0:	4629      	mov	r1, r5
    36d2:	f640 406d 	movw	r0, #3181	; 0xc6d
    36d6:	f7ff fa83 	bl	2be0 <bt_hci_cmd_send_sync>
		if (err) {
    36da:	4604      	mov	r4, r0
    36dc:	2800      	cmp	r0, #0
    36de:	f43f af1c 	beq.w	351a <bt_init+0x1aa>
    36e2:	e6d0      	b.n	3486 <bt_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    36e4:	aa0c      	add	r2, sp, #48	; 0x30
    36e6:	2100      	movs	r1, #0
    36e8:	f242 002f 	movw	r0, #8239	; 0x202f
    36ec:	f7ff fa78 	bl	2be0 <bt_hci_cmd_send_sync>
		if (err) {
    36f0:	4604      	mov	r4, r0
    36f2:	2800      	cmp	r0, #0
    36f4:	f47f aec7 	bne.w	3486 <bt_init+0x116>
		rp = (void *)rsp->data;
    36f8:	980c      	ldr	r0, [sp, #48]	; 0x30
    36fa:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    36fc:	f8b3 8001 	ldrh.w	r8, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    3700:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		net_buf_unref(rsp);
    3704:	f013 fb0a 	bl	16d1c <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    3708:	2104      	movs	r1, #4
    370a:	f242 0024 	movw	r0, #8228	; 0x2024
    370e:	f7ff fa37 	bl	2b80 <bt_hci_cmd_create>
		if (!buf) {
    3712:	4605      	mov	r5, r0
    3714:	2800      	cmp	r0, #0
    3716:	d0d0      	beq.n	36ba <bt_init+0x34a>
		cp = net_buf_add(buf, sizeof(*cp));
    3718:	2104      	movs	r1, #4
    371a:	3008      	adds	r0, #8
    371c:	f013 fb30 	bl	16d80 <net_buf_simple_add>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    3720:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    3722:	f8a0 8000 	strh.w	r8, [r0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    3726:	8047      	strh	r7, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    3728:	4629      	mov	r1, r5
    372a:	f242 0024 	movw	r0, #8228	; 0x2024
    372e:	f7ff fa57 	bl	2be0 <bt_hci_cmd_send_sync>
		if (err) {
    3732:	4604      	mov	r4, r0
    3734:	2800      	cmp	r0, #0
    3736:	f43f af0d 	beq.w	3554 <bt_init+0x1e4>
    373a:	e6a4      	b.n	3486 <bt_init+0x116>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    373c:	484a      	ldr	r0, [pc, #296]	; (3868 <bt_init+0x4f8>)
    373e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3742:	e779      	b.n	3638 <bt_init+0x2c8>
	rp.info = (void *)rsp->data;
    3744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	BT_INFO("HW Platform: %s (0x%04x)",
    3746:	4942      	ldr	r1, [pc, #264]	; (3850 <bt_init+0x4e0>)
	rp.info = (void *)rsp->data;
    3748:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    374a:	4848      	ldr	r0, [pc, #288]	; (386c <bt_init+0x4fc>)
    374c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
    3750:	9302      	str	r3, [sp, #8]
	if (platform < ARRAY_SIZE(plat_str)) {
    3752:	2b03      	cmp	r3, #3
		return plat_str[platform];
    3754:	bf96      	itet	ls
    3756:	4a46      	ldrls	r2, [pc, #280]	; (3870 <bt_init+0x500>)
	return "unknown";
    3758:	4a46      	ldrhi	r2, [pc, #280]	; (3874 <bt_init+0x504>)
		return plat_str[platform];
    375a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    375e:	9201      	str	r2, [sp, #4]
    3760:	4b39      	ldr	r3, [pc, #228]	; (3848 <bt_init+0x4d8>)
    3762:	4a45      	ldr	r2, [pc, #276]	; (3878 <bt_init+0x508>)
    3764:	9503      	str	r5, [sp, #12]
    3766:	9500      	str	r5, [sp, #0]
    3768:	f7fd ffba 	bl	16e0 <printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    376c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    3770:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    3774:	2b02      	cmp	r3, #2
    3776:	d13a      	bne.n	37ee <bt_init+0x47e>
	if (variant < ARRAY_SIZE(nordic_str)) {
    3778:	2a02      	cmp	r2, #2
    377a:	d838      	bhi.n	37ee <bt_init+0x47e>
		return nordic_str[variant];
    377c:	4b3f      	ldr	r3, [pc, #252]	; (387c <bt_init+0x50c>)
    377e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    3782:	9202      	str	r2, [sp, #8]
    3784:	9301      	str	r3, [sp, #4]
    3786:	4a3c      	ldr	r2, [pc, #240]	; (3878 <bt_init+0x508>)
    3788:	4b2f      	ldr	r3, [pc, #188]	; (3848 <bt_init+0x4d8>)
    378a:	4931      	ldr	r1, [pc, #196]	; (3850 <bt_init+0x4e0>)
    378c:	9503      	str	r5, [sp, #12]
    378e:	9500      	str	r5, [sp, #0]
    3790:	483b      	ldr	r0, [pc, #236]	; (3880 <bt_init+0x510>)
    3792:	f7fd ffa5 	bl	16e0 <printk>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    3796:	7963      	ldrb	r3, [r4, #5]
    3798:	9506      	str	r5, [sp, #24]
    379a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    379e:	9105      	str	r1, [sp, #20]
	if (variant < ARRAY_SIZE(var_str)) {
    37a0:	2b03      	cmp	r3, #3
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    37a2:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
    37a6:	bf98      	it	ls
    37a8:	4a36      	ldrls	r2, [pc, #216]	; (3884 <bt_init+0x514>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    37aa:	9104      	str	r1, [sp, #16]
    37ac:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
    37ae:	bf94      	ite	ls
    37b0:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
    37b4:	4a2f      	ldrhi	r2, [pc, #188]	; (3874 <bt_init+0x504>)
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    37b6:	9103      	str	r1, [sp, #12]
    37b8:	9302      	str	r3, [sp, #8]
    37ba:	4925      	ldr	r1, [pc, #148]	; (3850 <bt_init+0x4e0>)
    37bc:	4b22      	ldr	r3, [pc, #136]	; (3848 <bt_init+0x4d8>)
    37be:	9201      	str	r2, [sp, #4]
    37c0:	9500      	str	r5, [sp, #0]
    37c2:	4a2d      	ldr	r2, [pc, #180]	; (3878 <bt_init+0x508>)
    37c4:	4830      	ldr	r0, [pc, #192]	; (3888 <bt_init+0x518>)
    37c6:	f7fd ff8b 	bl	16e0 <printk>
	net_buf_unref(rsp);
    37ca:	980c      	ldr	r0, [sp, #48]	; 0x30
    37cc:	f013 faa6 	bl	16d1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    37d0:	aa0c      	add	r2, sp, #48	; 0x30
    37d2:	2100      	movs	r1, #0
    37d4:	f64f 4002 	movw	r0, #64514	; 0xfc02
    37d8:	f7ff fa02 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    37dc:	4604      	mov	r4, r0
    37de:	b140      	cbz	r0, 37f2 <bt_init+0x482>
		BT_WARN("Failed to read supported vendor features");
    37e0:	9501      	str	r5, [sp, #4]
    37e2:	9500      	str	r5, [sp, #0]
    37e4:	4b18      	ldr	r3, [pc, #96]	; (3848 <bt_init+0x4d8>)
    37e6:	4a19      	ldr	r2, [pc, #100]	; (384c <bt_init+0x4dc>)
    37e8:	4919      	ldr	r1, [pc, #100]	; (3850 <bt_init+0x4e0>)
    37ea:	4828      	ldr	r0, [pc, #160]	; (388c <bt_init+0x51c>)
    37ec:	e73f      	b.n	366e <bt_init+0x2fe>
		return "unknown";
    37ee:	4b21      	ldr	r3, [pc, #132]	; (3874 <bt_init+0x504>)
    37f0:	e7c7      	b.n	3782 <bt_init+0x412>
	rp.cmds = (void *)rsp->data;
    37f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    37f4:	4826      	ldr	r0, [pc, #152]	; (3890 <bt_init+0x520>)
    37f6:	6899      	ldr	r1, [r3, #8]
    37f8:	2202      	movs	r2, #2
    37fa:	3101      	adds	r1, #1
    37fc:	f7fc ff04 	bl	608 <memcpy>
	net_buf_unref(rsp);
    3800:	980c      	ldr	r0, [sp, #48]	; 0x30
    3802:	f013 fa8b 	bl	16d1c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    3806:	aa0c      	add	r2, sp, #48	; 0x30
    3808:	4621      	mov	r1, r4
    380a:	f64f 4003 	movw	r0, #64515	; 0xfc03
    380e:	f7ff f9e7 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    3812:	b130      	cbz	r0, 3822 <bt_init+0x4b2>
		BT_WARN("Failed to read supported vendor commands");
    3814:	9501      	str	r5, [sp, #4]
    3816:	9500      	str	r5, [sp, #0]
    3818:	4b0b      	ldr	r3, [pc, #44]	; (3848 <bt_init+0x4d8>)
    381a:	4a0c      	ldr	r2, [pc, #48]	; (384c <bt_init+0x4dc>)
    381c:	490c      	ldr	r1, [pc, #48]	; (3850 <bt_init+0x4e0>)
    381e:	481d      	ldr	r0, [pc, #116]	; (3894 <bt_init+0x524>)
    3820:	e725      	b.n	366e <bt_init+0x2fe>
	rp.feat = (void *)rsp->data;
    3822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    3824:	481c      	ldr	r0, [pc, #112]	; (3898 <bt_init+0x528>)
    3826:	6899      	ldr	r1, [r3, #8]
    3828:	2201      	movs	r2, #1
    382a:	4411      	add	r1, r2
    382c:	f7fc feec 	bl	608 <memcpy>
	net_buf_unref(rsp);
    3830:	980c      	ldr	r0, [sp, #48]	; 0x30
    3832:	f013 fa73 	bl	16d1c <net_buf_unref>
    3836:	e71c      	b.n	3672 <bt_init+0x302>
    3838:	02008890 	.word	0x02008890
    383c:	20008000 	.word	0x20008000
    3840:	200086a4 	.word	0x200086a4
    3844:	0001868d 	.word	0x0001868d
    3848:	00018e9e 	.word	0x00018e9e
    384c:	00019806 	.word	0x00019806
    3850:	00019a8b 	.word	0x00019a8b
    3854:	00019149 	.word	0x00019149
    3858:	20008618 	.word	0x20008618
    385c:	2000457c 	.word	0x2000457c
    3860:	00018e80 	.word	0x00018e80
    3864:	000192ed 	.word	0x000192ed
    3868:	02008810 	.word	0x02008810
    386c:	00019184 	.word	0x00019184
    3870:	000199a4 	.word	0x000199a4
    3874:	00019ad4 	.word	0x00019ad4
    3878:	0001917d 	.word	0x0001917d
    387c:	00019998 	.word	0x00019998
    3880:	000191ad 	.word	0x000191ad
    3884:	00019ac4 	.word	0x00019ac4
    3888:	000191d5 	.word	0x000191d5
    388c:	00019212 	.word	0x00019212
    3890:	20008677 	.word	0x20008677
    3894:	0001924b 	.word	0x0001924b
    3898:	20008676 	.word	0x20008676
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    389c:	4b62      	ldr	r3, [pc, #392]	; (3a28 <bt_init+0x6b8>)
    389e:	6818      	ldr	r0, [r3, #0]
    38a0:	889a      	ldrh	r2, [r3, #4]
    38a2:	900a      	str	r0, [sp, #40]	; 0x28
    38a4:	799b      	ldrb	r3, [r3, #6]
    38a6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    38aa:	a90a      	add	r1, sp, #40	; 0x28
    38ac:	2207      	movs	r2, #7
    38ae:	485f      	ldr	r0, [pc, #380]	; (3a2c <bt_init+0x6bc>)
    38b0:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    38b4:	f7fc fe93 	bl	5de <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    38b8:	2800      	cmp	r0, #0
    38ba:	f43f aee6 	beq.w	368a <bt_init+0x31a>
	BT_INFO("Identity: %s", bt_addr_le_str(&bt_dev.id_addr));
    38be:	485b      	ldr	r0, [pc, #364]	; (3a2c <bt_init+0x6bc>)
    38c0:	f7fe ff4c 	bl	275c <bt_addr_le_str>
    38c4:	4b5a      	ldr	r3, [pc, #360]	; (3a30 <bt_init+0x6c0>)
    38c6:	4a5b      	ldr	r2, [pc, #364]	; (3a34 <bt_init+0x6c4>)
    38c8:	495b      	ldr	r1, [pc, #364]	; (3a38 <bt_init+0x6c8>)
    38ca:	9001      	str	r0, [sp, #4]
    38cc:	9502      	str	r5, [sp, #8]
    38ce:	9500      	str	r5, [sp, #0]
    38d0:	485a      	ldr	r0, [pc, #360]	; (3a3c <bt_init+0x6cc>)
    38d2:	f7fd ff05 	bl	16e0 <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    38d6:	7bb4      	ldrb	r4, [r6, #14]
    38d8:	4620      	mov	r0, r4
    38da:	f7ff f83b 	bl	2954 <ver_str>
    38de:	9505      	str	r5, [sp, #20]
    38e0:	8ab3      	ldrh	r3, [r6, #20]
    38e2:	9304      	str	r3, [sp, #16]
    38e4:	8a33      	ldrh	r3, [r6, #16]
    38e6:	4a53      	ldr	r2, [pc, #332]	; (3a34 <bt_init+0x6c4>)
    38e8:	4953      	ldr	r1, [pc, #332]	; (3a38 <bt_init+0x6c8>)
    38ea:	9303      	str	r3, [sp, #12]
    38ec:	9402      	str	r4, [sp, #8]
    38ee:	4b50      	ldr	r3, [pc, #320]	; (3a30 <bt_init+0x6c0>)
    38f0:	9001      	str	r0, [sp, #4]
    38f2:	9500      	str	r5, [sp, #0]
    38f4:	4852      	ldr	r0, [pc, #328]	; (3a40 <bt_init+0x6d0>)
    38f6:	f7fd fef3 	bl	16e0 <printk>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    38fa:	7bf4      	ldrb	r4, [r6, #15]
    38fc:	4620      	mov	r0, r4
    38fe:	f7ff f829 	bl	2954 <ver_str>
    3902:	9504      	str	r5, [sp, #16]
    3904:	8a73      	ldrh	r3, [r6, #18]
    3906:	9303      	str	r3, [sp, #12]
    3908:	9402      	str	r4, [sp, #8]
    390a:	9001      	str	r0, [sp, #4]
    390c:	4b48      	ldr	r3, [pc, #288]	; (3a30 <bt_init+0x6c0>)
    390e:	4a49      	ldr	r2, [pc, #292]	; (3a34 <bt_init+0x6c4>)
    3910:	4949      	ldr	r1, [pc, #292]	; (3a38 <bt_init+0x6c8>)
    3912:	9500      	str	r5, [sp, #0]
    3914:	484b      	ldr	r0, [pc, #300]	; (3a44 <bt_init+0x6d4>)
    3916:	f7fd fee3 	bl	16e0 <printk>
		err = bt_conn_init();
    391a:	f002 f9db 	bl	5cd4 <bt_conn_init>
		if (err) {
    391e:	4604      	mov	r4, r0
    3920:	2800      	cmp	r0, #0
    3922:	f47f adb0 	bne.w	3486 <bt_init+0x116>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3926:	2102      	movs	r1, #2
    3928:	4847      	ldr	r0, [pc, #284]	; (3a48 <bt_init+0x6d8>)
    392a:	f7ff f832 	bl	2992 <atomic_or>
	bt_le_scan_update(false);
    392e:	4620      	mov	r0, r4
    3930:	f7ff fcea 	bl	3308 <bt_le_scan_update>
    3934:	e5a7      	b.n	3486 <bt_init+0x116>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    3936:	2100      	movs	r1, #0
    3938:	681c      	ldr	r4, [r3, #0]
    393a:	4a3c      	ldr	r2, [pc, #240]	; (3a2c <bt_init+0x6bc>)
    393c:	2307      	movs	r3, #7
    393e:	4608      	mov	r0, r1
    3940:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    3942:	2807      	cmp	r0, #7
    3944:	f47f aea6 	bne.w	3694 <bt_init+0x324>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    3948:	7833      	ldrb	r3, [r6, #0]
    394a:	2b01      	cmp	r3, #1
    394c:	d104      	bne.n	3958 <bt_init+0x5e8>
    394e:	79b3      	ldrb	r3, [r6, #6]
    3950:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3954:	2bc0      	cmp	r3, #192	; 0xc0
    3956:	d05b      	beq.n	3a10 <bt_init+0x6a0>
		BT_ERR("Only static random address supported as identity");
    3958:	9501      	str	r5, [sp, #4]
    395a:	9500      	str	r5, [sp, #0]
    395c:	4b3b      	ldr	r3, [pc, #236]	; (3a4c <bt_init+0x6dc>)
    395e:	4a3c      	ldr	r2, [pc, #240]	; (3a50 <bt_init+0x6e0>)
    3960:	4935      	ldr	r1, [pc, #212]	; (3a38 <bt_init+0x6c8>)
    3962:	483c      	ldr	r0, [pc, #240]	; (3a54 <bt_init+0x6e4>)
    3964:	f7fd febc 	bl	16e0 <printk>
		return -EINVAL;
    3968:	f06f 0415 	mvn.w	r4, #21
			BT_ERR("Unable to set identity address");
    396c:	9501      	str	r5, [sp, #4]
    396e:	9500      	str	r5, [sp, #0]
    3970:	4b39      	ldr	r3, [pc, #228]	; (3a58 <bt_init+0x6e8>)
    3972:	4a37      	ldr	r2, [pc, #220]	; (3a50 <bt_init+0x6e0>)
    3974:	4930      	ldr	r1, [pc, #192]	; (3a38 <bt_init+0x6c8>)
    3976:	4839      	ldr	r0, [pc, #228]	; (3a5c <bt_init+0x6ec>)
    3978:	f7fd feb2 	bl	16e0 <printk>
    397c:	e583      	b.n	3486 <bt_init+0x116>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    397e:	aa09      	add	r2, sp, #36	; 0x24
    3980:	2100      	movs	r1, #0
    3982:	f64f 4009 	movw	r0, #64521	; 0xfc09
    3986:	f7ff f92b 	bl	2be0 <bt_hci_cmd_send_sync>
		if (err) {
    398a:	b140      	cbz	r0, 399e <bt_init+0x62e>
			BT_WARN("Failed to read static addresses");
    398c:	4b2f      	ldr	r3, [pc, #188]	; (3a4c <bt_init+0x6dc>)
    398e:	4a34      	ldr	r2, [pc, #208]	; (3a60 <bt_init+0x6f0>)
    3990:	4929      	ldr	r1, [pc, #164]	; (3a38 <bt_init+0x6c8>)
    3992:	4834      	ldr	r0, [pc, #208]	; (3a64 <bt_init+0x6f4>)
    3994:	9501      	str	r5, [sp, #4]
    3996:	9500      	str	r5, [sp, #0]
		BT_WARN("Read Static Addresses command not available");
    3998:	f7fd fea2 	bl	16e0 <printk>
    399c:	e019      	b.n	39d2 <bt_init+0x662>
		rp = (void *)rsp->data;
    399e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    39a0:	6899      	ldr	r1, [r3, #8]
		if (rp->num_addrs) {
    39a2:	784b      	ldrb	r3, [r1, #1]
    39a4:	b153      	cbz	r3, 39bc <bt_init+0x64c>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    39a6:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    39a8:	2206      	movs	r2, #6
    39aa:	3102      	adds	r1, #2
    39ac:	482e      	ldr	r0, [pc, #184]	; (3a68 <bt_init+0x6f8>)
    39ae:	7033      	strb	r3, [r6, #0]
    39b0:	f7fc fe2a 	bl	608 <memcpy>
			net_buf_unref(rsp);
    39b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    39b6:	f013 f9b1 	bl	16d1c <net_buf_unref>
    39ba:	e7c5      	b.n	3948 <bt_init+0x5d8>
		BT_WARN("No static addresses stored in controller");
    39bc:	9501      	str	r5, [sp, #4]
    39be:	9500      	str	r5, [sp, #0]
    39c0:	4b22      	ldr	r3, [pc, #136]	; (3a4c <bt_init+0x6dc>)
    39c2:	4a27      	ldr	r2, [pc, #156]	; (3a60 <bt_init+0x6f0>)
    39c4:	491c      	ldr	r1, [pc, #112]	; (3a38 <bt_init+0x6c8>)
    39c6:	4829      	ldr	r0, [pc, #164]	; (3a6c <bt_init+0x6fc>)
    39c8:	f7fd fe8a 	bl	16e0 <printk>
		net_buf_unref(rsp);
    39cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    39ce:	f013 f9a5 	bl	16d1c <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    39d2:	4816      	ldr	r0, [pc, #88]	; (3a2c <bt_init+0x6bc>)
    39d4:	f7ff fbf9 	bl	31ca <bt_addr_le_create_static>
	if (err) {
    39d8:	4604      	mov	r4, r0
    39da:	2800      	cmp	r0, #0
    39dc:	d1c6      	bne.n	396c <bt_init+0x5fc>
	if (bt_storage) {
    39de:	683b      	ldr	r3, [r7, #0]
    39e0:	b17b      	cbz	r3, 3a02 <bt_init+0x692>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    39e2:	685f      	ldr	r7, [r3, #4]
    39e4:	4a11      	ldr	r2, [pc, #68]	; (3a2c <bt_init+0x6bc>)
    39e6:	2307      	movs	r3, #7
    39e8:	4601      	mov	r1, r0
    39ea:	47b8      	blx	r7
		if (ret != sizeof(bt_dev.id_addr)) {
    39ec:	2807      	cmp	r0, #7
    39ee:	d0ab      	beq.n	3948 <bt_init+0x5d8>
			BT_ERR("Unable to store static address");
    39f0:	4b16      	ldr	r3, [pc, #88]	; (3a4c <bt_init+0x6dc>)
    39f2:	4a17      	ldr	r2, [pc, #92]	; (3a50 <bt_init+0x6e0>)
    39f4:	4910      	ldr	r1, [pc, #64]	; (3a38 <bt_init+0x6c8>)
    39f6:	481e      	ldr	r0, [pc, #120]	; (3a70 <bt_init+0x700>)
    39f8:	9501      	str	r5, [sp, #4]
    39fa:	9500      	str	r5, [sp, #0]
		BT_WARN("Using temporary static random address");
    39fc:	f7fd fe70 	bl	16e0 <printk>
    3a00:	e7a2      	b.n	3948 <bt_init+0x5d8>
    3a02:	9501      	str	r5, [sp, #4]
    3a04:	9500      	str	r5, [sp, #0]
    3a06:	4b11      	ldr	r3, [pc, #68]	; (3a4c <bt_init+0x6dc>)
    3a08:	4a15      	ldr	r2, [pc, #84]	; (3a60 <bt_init+0x6f0>)
    3a0a:	490b      	ldr	r1, [pc, #44]	; (3a38 <bt_init+0x6c8>)
    3a0c:	4819      	ldr	r0, [pc, #100]	; (3a74 <bt_init+0x704>)
    3a0e:	e7f5      	b.n	39fc <bt_init+0x68c>
	err = set_random_address(&bt_dev.id_addr.a);
    3a10:	4815      	ldr	r0, [pc, #84]	; (3a68 <bt_init+0x6f8>)
    3a12:	f7ff f923 	bl	2c5c <set_random_address>
	if (err) {
    3a16:	4604      	mov	r4, r0
    3a18:	2800      	cmp	r0, #0
    3a1a:	d1a7      	bne.n	396c <bt_init+0x5fc>
    3a1c:	2104      	movs	r1, #4
    3a1e:	480a      	ldr	r0, [pc, #40]	; (3a48 <bt_init+0x6d8>)
    3a20:	f7fe ffb7 	bl	2992 <atomic_or>
    3a24:	e74b      	b.n	38be <bt_init+0x54e>
    3a26:	bf00      	nop
    3a28:	000183c0 	.word	0x000183c0
    3a2c:	20008618 	.word	0x20008618
    3a30:	00018e90 	.word	0x00018e90
    3a34:	0001917d 	.word	0x0001917d
    3a38:	00019a8b 	.word	0x00019a8b
    3a3c:	000193cf 	.word	0x000193cf
    3a40:	000193ec 	.word	0x000193ec
    3a44:	0001943a 	.word	0x0001943a
    3a48:	20008688 	.word	0x20008688
    3a4c:	00018e80 	.word	0x00018e80
    3a50:	00019a84 	.word	0x00019a84
    3a54:	0001938e 	.word	0x0001938e
    3a58:	00018eaa 	.word	0x00018eaa
    3a5c:	00019471 	.word	0x00019471
    3a60:	00019806 	.word	0x00019806
    3a64:	00019284 	.word	0x00019284
    3a68:	20008619 	.word	0x20008619
    3a6c:	000192b4 	.word	0x000192b4
    3a70:	00019329 	.word	0x00019329
    3a74:	00019358 	.word	0x00019358

00003a78 <init_work>:

static void init_work(struct k_work *work)
{
    3a78:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    3a7a:	f7ff fc79 	bl	3370 <bt_init>
	if (ready_cb) {
    3a7e:	4b03      	ldr	r3, [pc, #12]	; (3a8c <init_work+0x14>)
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	b113      	cbz	r3, 3a8a <init_work+0x12>
		ready_cb(err);
	}
}
    3a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    3a88:	4718      	bx	r3
    3a8a:	bd10      	pop	{r4, pc}
    3a8c:	20000398 	.word	0x20000398

00003a90 <check_pending_conn.part.29>:
static void check_pending_conn(const bt_addr_le_t *id_addr,
    3a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a94:	460d      	mov	r5, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    3a96:	2101      	movs	r1, #1
    3a98:	f001 feae 	bl	57f8 <bt_conn_lookup_state_le>
	if (!conn) {
    3a9c:	4604      	mov	r4, r0
    3a9e:	2800      	cmp	r0, #0
    3aa0:	d068      	beq.n	3b74 <check_pending_conn.part.29+0xe4>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3aa2:	2107      	movs	r1, #7
    3aa4:	4834      	ldr	r0, [pc, #208]	; (3b78 <check_pending_conn.part.29+0xe8>)
    3aa6:	f7fe ff85 	bl	29b4 <atomic_test_bit>
    3aaa:	2800      	cmp	r0, #0
    3aac:	d14f      	bne.n	3b4e <check_pending_conn.part.29+0xbe>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    3aae:	2102      	movs	r1, #2
    3ab0:	4831      	ldr	r0, [pc, #196]	; (3b78 <check_pending_conn.part.29+0xe8>)
    3ab2:	f7fe ff7f 	bl	29b4 <atomic_test_bit>
    3ab6:	b110      	cbz	r0, 3abe <check_pending_conn.part.29+0x2e>
			set_random_address(&bt_dev.id_addr.a);
    3ab8:	4830      	ldr	r0, [pc, #192]	; (3b7c <check_pending_conn.part.29+0xec>)
    3aba:	f7ff f8cf 	bl	2c5c <set_random_address>
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3abe:	4930      	ldr	r1, [pc, #192]	; (3b80 <check_pending_conn.part.29+0xf0>)
    3ac0:	f104 004f 	add.w	r0, r4, #79	; 0x4f
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3ac4:	f104 0856 	add.w	r8, r4, #86	; 0x56
		bt_addr_le_copy(&conn->le.init_addr, &bt_dev.id_addr);
    3ac8:	f7fe ff60 	bl	298c <bt_addr_le_copy>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    3acc:	4629      	mov	r1, r5
    3ace:	4640      	mov	r0, r8
    3ad0:	f7fe ff5c 	bl	298c <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    3ad4:	2119      	movs	r1, #25
    3ad6:	f242 000d 	movw	r0, #8205	; 0x200d
    3ada:	f7ff f851 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    3ade:	4606      	mov	r6, r0
    3ae0:	b3d0      	cbz	r0, 3b58 <check_pending_conn.part.29+0xc8>
	cp = net_buf_add(buf, sizeof(*cp));
    3ae2:	2119      	movs	r1, #25
    3ae4:	3008      	adds	r0, #8
    3ae6:	f013 f94b 	bl	16d80 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    3aea:	2219      	movs	r2, #25
	cp = net_buf_add(buf, sizeof(*cp));
    3aec:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    3aee:	2100      	movs	r1, #0
    3af0:	f7fc fdb6 	bl	660 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3af4:	2700      	movs	r7, #0
    3af6:	2360      	movs	r3, #96	; 0x60
    3af8:	702b      	strb	r3, [r5, #0]
	cp->scan_window = cp->scan_interval;
    3afa:	70ab      	strb	r3, [r5, #2]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3afc:	4641      	mov	r1, r8
    3afe:	1d68      	adds	r0, r5, #5
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    3b00:	706f      	strb	r7, [r5, #1]
	cp->scan_window = cp->scan_interval;
    3b02:	70ef      	strb	r7, [r5, #3]
	bt_addr_le_copy(&cp->peer_addr, &conn->le.resp_addr);
    3b04:	f7fe ff42 	bl	298c <bt_addr_le_copy>
	cp->own_addr_type = conn->le.init_addr.type;
    3b08:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
    3b0c:	732b      	strb	r3, [r5, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    3b0e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    3b12:	f8a5 300d 	strh.w	r3, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    3b16:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    3b1a:	f8a5 300f 	strh.w	r3, [r5, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    3b1e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    3b22:	f8a5 3011 	strh.w	r3, [r5, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    3b26:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    3b2a:	f8a5 3013 	strh.w	r3, [r5, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    3b2e:	463a      	mov	r2, r7
    3b30:	4631      	mov	r1, r6
    3b32:	f242 000d 	movw	r0, #8205	; 0x200d
    3b36:	f7ff f853 	bl	2be0 <bt_hci_cmd_send_sync>
	if (hci_le_create_conn(conn)) {
    3b3a:	b968      	cbnz	r0, 3b58 <check_pending_conn.part.29+0xc8>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    3b3c:	4620      	mov	r0, r4
    3b3e:	2102      	movs	r1, #2
    3b40:	f001 fd32 	bl	55a8 <bt_conn_set_state>
	bt_conn_unref(conn);
    3b44:	4620      	mov	r0, r4
}
    3b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_conn_unref(conn);
    3b4a:	f001 be77 	b.w	583c <bt_conn_unref>
	    set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE)) {
    3b4e:	2000      	movs	r0, #0
    3b50:	f7ff f908 	bl	2d64 <set_le_scan_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    3b54:	2800      	cmp	r0, #0
    3b56:	d0aa      	beq.n	3aae <check_pending_conn.part.29+0x1e>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    3b58:	231f      	movs	r3, #31
    3b5a:	72e3      	strb	r3, [r4, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3b5c:	4620      	mov	r0, r4
    3b5e:	2100      	movs	r1, #0
    3b60:	f001 fd22 	bl	55a8 <bt_conn_set_state>
	bt_conn_unref(conn);
    3b64:	4620      	mov	r0, r4
    3b66:	f001 fe69 	bl	583c <bt_conn_unref>
	bt_le_scan_update(false);
    3b6a:	2000      	movs	r0, #0
}
    3b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_le_scan_update(false);
    3b70:	f7ff bbca 	b.w	3308 <bt_le_scan_update>
    3b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b78:	20008688 	.word	0x20008688
    3b7c:	20008619 	.word	0x20008619
    3b80:	20008618 	.word	0x20008618

00003b84 <hci_le_set_phy.isra.31>:
static int hci_le_set_phy(struct bt_conn *conn)
    3b84:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3b86:	2107      	movs	r1, #7
static int hci_le_set_phy(struct bt_conn *conn)
    3b88:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    3b8a:	f242 0032 	movw	r0, #8242	; 0x2032
    3b8e:	f7fe fff7 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    3b92:	4605      	mov	r5, r0
    3b94:	b198      	cbz	r0, 3bbe <hci_le_set_phy.isra.31+0x3a>
	cp = net_buf_add(buf, sizeof(*cp));
    3b96:	2107      	movs	r1, #7
    3b98:	3008      	adds	r0, #8
    3b9a:	f013 f8f1 	bl	16d80 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3b9e:	8823      	ldrh	r3, [r4, #0]
    3ba0:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    3ba2:	2400      	movs	r4, #0
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3ba4:	2302      	movs	r3, #2
	cp->all_phys = 0;
    3ba6:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3ba8:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    3baa:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    3bac:	7144      	strb	r4, [r0, #5]
    3bae:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    3bb0:	4629      	mov	r1, r5
    3bb2:	f242 0032 	movw	r0, #8242	; 0x2032
    3bb6:	f7ff fb1f 	bl	31f8 <bt_hci_cmd_send>
	return 0;
    3bba:	4620      	mov	r0, r4
    3bbc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    3bbe:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    3bc2:	bd38      	pop	{r3, r4, r5, pc}

00003bc4 <hci_le_set_data_len.isra.32>:
static int hci_le_set_data_len(struct bt_conn *conn)
    3bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bc6:	4607      	mov	r7, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    3bc8:	aa01      	add	r2, sp, #4
    3bca:	2100      	movs	r1, #0
    3bcc:	f242 002f 	movw	r0, #8239	; 0x202f
    3bd0:	f7ff f806 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    3bd4:	b9d8      	cbnz	r0, 3c0e <hci_le_set_data_len.isra.32+0x4a>
	rp = (void *)rsp->data;
    3bd6:	9801      	ldr	r0, [sp, #4]
    3bd8:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    3bda:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    3bde:	f8b3 5003 	ldrh.w	r5, [r3, #3]
	net_buf_unref(rsp);
    3be2:	f013 f89b 	bl	16d1c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    3be6:	2106      	movs	r1, #6
    3be8:	f242 0022 	movw	r0, #8226	; 0x2022
    3bec:	f7fe ffc8 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    3bf0:	4604      	mov	r4, r0
    3bf2:	b170      	cbz	r0, 3c12 <hci_le_set_data_len.isra.32+0x4e>
	cp = net_buf_add(buf, sizeof(*cp));
    3bf4:	2106      	movs	r1, #6
    3bf6:	3008      	adds	r0, #8
    3bf8:	f013 f8c2 	bl	16d80 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3bfc:	883b      	ldrh	r3, [r7, #0]
    3bfe:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    3c00:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    3c02:	8085      	strh	r5, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    3c04:	4621      	mov	r1, r4
    3c06:	f242 0022 	movw	r0, #8226	; 0x2022
    3c0a:	f7ff faf5 	bl	31f8 <bt_hci_cmd_send>
}
    3c0e:	b003      	add	sp, #12
    3c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
    3c12:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3c16:	e7fa      	b.n	3c0e <hci_le_set_data_len.isra.32+0x4a>

00003c18 <le_enh_conn_complete>:
{
    3c18:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3c1a:	f8b0 6001 	ldrh.w	r6, [r0, #1]
{
    3c1e:	b089      	sub	sp, #36	; 0x24
    3c20:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    3c22:	210c      	movs	r1, #12
    3c24:	4867      	ldr	r0, [pc, #412]	; (3dc4 <le_enh_conn_complete+0x1ac>)
	u16_t handle = sys_le16_to_cpu(evt->handle);
    3c26:	b2b7      	uxth	r7, r6
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    3c28:	f7fe fee2 	bl	29f0 <atomic_test_and_clear_bit>
    3c2c:	b118      	cbz	r0, 3c36 <le_enh_conn_complete+0x1e>
		bt_keys_foreach(BT_KEYS_IRK, update_pending_id);
    3c2e:	4966      	ldr	r1, [pc, #408]	; (3dc8 <le_enh_conn_complete+0x1b0>)
    3c30:	2002      	movs	r0, #2
    3c32:	f006 fb41 	bl	a2b8 <bt_keys_foreach>
	if (evt->status) {
    3c36:	782b      	ldrb	r3, [r5, #0]
    3c38:	b17b      	cbz	r3, 3c5a <le_enh_conn_complete+0x42>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    3c3a:	2102      	movs	r1, #2
    3c3c:	2000      	movs	r0, #0
    3c3e:	f001 fddb 	bl	57f8 <bt_conn_lookup_state_le>
		if (!conn) {
    3c42:	4604      	mov	r4, r0
    3c44:	b138      	cbz	r0, 3c56 <le_enh_conn_complete+0x3e>
		conn->err = evt->status;
    3c46:	782b      	ldrb	r3, [r5, #0]
    3c48:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    3c4a:	2100      	movs	r1, #0
    3c4c:	f001 fcac 	bl	55a8 <bt_conn_set_state>
		bt_conn_unref(conn);
    3c50:	4620      	mov	r0, r4
    3c52:	f001 fdf3 	bl	583c <bt_conn_unref>
}
    3c56:	b009      	add	sp, #36	; 0x24
    3c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_copy(&id_addr, &evt->peer_addr);
    3c5a:	1d2c      	adds	r4, r5, #4
    3c5c:	4621      	mov	r1, r4
    3c5e:	a806      	add	r0, sp, #24
    3c60:	f7fe fe94 	bl	298c <bt_addr_le_copy>
	if (id_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    3c64:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3c68:	3b02      	subs	r3, #2
    3c6a:	b2db      	uxtb	r3, r3
    3c6c:	2b01      	cmp	r3, #1
    3c6e:	d829      	bhi.n	3cc4 <le_enh_conn_complete+0xac>
    3c70:	2206      	movs	r2, #6
    3c72:	f105 0111 	add.w	r1, r5, #17
    3c76:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    3c7a:	f88d 3018 	strb.w	r3, [sp, #24]
    3c7e:	f7fc fcc3 	bl	608 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    3c82:	2301      	movs	r3, #1
    3c84:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    3c88:	2102      	movs	r1, #2
    3c8a:	a806      	add	r0, sp, #24
    3c8c:	f001 fdb4 	bl	57f8 <bt_conn_lookup_state_le>
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3c90:	78eb      	ldrb	r3, [r5, #3]
    3c92:	2b01      	cmp	r3, #1
	conn = bt_conn_lookup_state_le(&id_addr, BT_CONN_CONNECT);
    3c94:	4604      	mov	r4, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    3c96:	d109      	bne.n	3cac <le_enh_conn_complete+0x94>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3c98:	f06f 0120 	mvn.w	r1, #32
    3c9c:	4849      	ldr	r0, [pc, #292]	; (3dc4 <le_enh_conn_complete+0x1ac>)
    3c9e:	f7fe fe96 	bl	29ce <atomic_and>
		if (!conn) {
    3ca2:	b9a4      	cbnz	r4, 3cce <le_enh_conn_complete+0xb6>
			conn = bt_conn_add_le(&id_addr);
    3ca4:	a806      	add	r0, sp, #24
    3ca6:	f001 fc43 	bl	5530 <bt_conn_add_le>
    3caa:	4604      	mov	r4, r0
	if (!conn) {
    3cac:	b97c      	cbnz	r4, 3cce <le_enh_conn_complete+0xb6>
		BT_ERR("Unable to add new conn for handle %u", handle);
    3cae:	4b47      	ldr	r3, [pc, #284]	; (3dcc <le_enh_conn_complete+0x1b4>)
    3cb0:	9302      	str	r3, [sp, #8]
    3cb2:	e88d 0088 	stmia.w	sp, {r3, r7}
    3cb6:	4a46      	ldr	r2, [pc, #280]	; (3dd0 <le_enh_conn_complete+0x1b8>)
    3cb8:	4b46      	ldr	r3, [pc, #280]	; (3dd4 <le_enh_conn_complete+0x1bc>)
    3cba:	4947      	ldr	r1, [pc, #284]	; (3dd8 <le_enh_conn_complete+0x1c0>)
    3cbc:	4847      	ldr	r0, [pc, #284]	; (3ddc <le_enh_conn_complete+0x1c4>)
    3cbe:	f7fd fd0f 	bl	16e0 <printk>
		return;
    3cc2:	e7c8      	b.n	3c56 <le_enh_conn_complete+0x3e>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    3cc4:	4621      	mov	r1, r4
    3cc6:	a804      	add	r0, sp, #16
    3cc8:	f7fe fe60 	bl	298c <bt_addr_le_copy>
    3ccc:	e7dc      	b.n	3c88 <le_enh_conn_complete+0x70>
	conn->handle   = handle;
    3cce:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3cd0:	a906      	add	r1, sp, #24
	conn->handle   = handle;
    3cd2:	f820 6b48 	strh.w	r6, [r0], #72
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    3cd6:	f7fe fe59 	bl	298c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    3cda:	7e2a      	ldrb	r2, [r5, #24]
    3cdc:	7deb      	ldrb	r3, [r5, #23]
    3cde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3ce2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    3ce6:	7eaa      	ldrb	r2, [r5, #26]
    3ce8:	7e6b      	ldrb	r3, [r5, #25]
    3cea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3cee:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3cf2:	7eeb      	ldrb	r3, [r5, #27]
    3cf4:	7f2a      	ldrb	r2, [r5, #28]
    3cf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3cfa:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->role = evt->role;
    3cfe:	78ee      	ldrb	r6, [r5, #3]
    3d00:	70e6      	strb	r6, [r4, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    3d02:	2e01      	cmp	r6, #1
    3d04:	d11a      	bne.n	3d3c <le_enh_conn_complete+0x124>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3d06:	4f36      	ldr	r7, [pc, #216]	; (3de0 <le_enh_conn_complete+0x1c8>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    3d08:	a904      	add	r1, sp, #16
    3d0a:	f104 004f 	add.w	r0, r4, #79	; 0x4f
    3d0e:	f7fe fe3d 	bl	298c <bt_addr_le_copy>
			bt_addr_le_copy(&conn->le.resp_addr, &bt_dev.id_addr);
    3d12:	4639      	mov	r1, r7
    3d14:	f104 0056 	add.w	r0, r4, #86	; 0x56
    3d18:	f7fe fe38 	bl	298c <bt_addr_le_copy>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3d1c:	2106      	movs	r1, #6
    3d1e:	f107 0070 	add.w	r0, r7, #112	; 0x70
    3d22:	f7fe fe47 	bl	29b4 <atomic_test_bit>
    3d26:	b148      	cbz	r0, 3d3c <le_enh_conn_complete+0x124>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    3d28:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
    3d2c:	2200      	movs	r2, #0
    3d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    3d32:	4313      	orrs	r3, r2
    3d34:	d002      	beq.n	3d3c <le_enh_conn_complete+0x124>
			set_advertise_enable(true);
    3d36:	4630      	mov	r0, r6
    3d38:	f7ff f848 	bl	2dcc <set_advertise_enable>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    3d3c:	2103      	movs	r1, #3
    3d3e:	4620      	mov	r0, r4
    3d40:	f001 fc32 	bl	55a8 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    3d44:	7b23      	ldrb	r3, [r4, #12]
    3d46:	2b03      	cmp	r3, #3
    3d48:	d118      	bne.n	3d7c <le_enh_conn_complete+0x164>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3d4a:	78eb      	ldrb	r3, [r5, #3]
    3d4c:	b123      	cbz	r3, 3d58 <le_enh_conn_complete+0x140>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    3d4e:	4b24      	ldr	r3, [pc, #144]	; (3de0 <le_enh_conn_complete+0x1c8>)
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    3d50:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3d54:	0719      	lsls	r1, r3, #28
    3d56:	d518      	bpl.n	3d8a <le_enh_conn_complete+0x172>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    3d58:	2102      	movs	r1, #2
    3d5a:	f242 0016 	movw	r0, #8214	; 0x2016
    3d5e:	f7fe ff0f 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    3d62:	4605      	mov	r5, r0
    3d64:	b188      	cbz	r0, 3d8a <le_enh_conn_complete+0x172>
	cp = net_buf_add(buf, sizeof(*cp));
    3d66:	2102      	movs	r1, #2
    3d68:	3008      	adds	r0, #8
    3d6a:	f013 f809 	bl	16d80 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    3d6e:	8823      	ldrh	r3, [r4, #0]
    3d70:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    3d72:	4629      	mov	r1, r5
    3d74:	f242 0016 	movw	r0, #8214	; 0x2016
    3d78:	f7ff fa3e 	bl	31f8 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    3d7c:	4620      	mov	r0, r4
    3d7e:	f001 fd5d 	bl	583c <bt_conn_unref>
	bt_le_scan_update(false);
    3d82:	2000      	movs	r0, #0
    3d84:	f7ff fac0 	bl	3308 <bt_le_scan_update>
    3d88:	e765      	b.n	3c56 <le_enh_conn_complete+0x3e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    3d8a:	4d15      	ldr	r5, [pc, #84]	; (3de0 <le_enh_conn_complete+0x1c8>)
    3d8c:	f895 2079 	ldrb.w	r2, [r5, #121]	; 0x79
    3d90:	07d2      	lsls	r2, r2, #31
    3d92:	d508      	bpl.n	3da6 <le_enh_conn_complete+0x18e>
		err = hci_le_set_phy(conn);
    3d94:	4620      	mov	r0, r4
    3d96:	f7ff fef5 	bl	3b84 <hci_le_set_phy.isra.31>
		if (!err) {
    3d9a:	b920      	cbnz	r0, 3da6 <le_enh_conn_complete+0x18e>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    3d9c:	2180      	movs	r1, #128	; 0x80
    3d9e:	1d20      	adds	r0, r4, #4
    3da0:	f7fe fdf7 	bl	2992 <atomic_or>
    3da4:	e7ea      	b.n	3d7c <le_enh_conn_complete+0x164>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    3da6:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    3daa:	069b      	lsls	r3, r3, #26
    3dac:	d506      	bpl.n	3dbc <le_enh_conn_complete+0x1a4>
		err = hci_le_set_data_len(conn);
    3dae:	4620      	mov	r0, r4
    3db0:	f7ff ff08 	bl	3bc4 <hci_le_set_data_len.isra.32>
		if (!err) {
    3db4:	b910      	cbnz	r0, 3dbc <le_enh_conn_complete+0x1a4>
    3db6:	f44f 7180 	mov.w	r1, #256	; 0x100
    3dba:	e7f0      	b.n	3d9e <le_enh_conn_complete+0x186>
	update_conn_param(conn);
    3dbc:	4620      	mov	r0, r4
    3dbe:	f7fe fe27 	bl	2a10 <update_conn_param>
    3dc2:	e7db      	b.n	3d7c <le_enh_conn_complete+0x164>
    3dc4:	20008688 	.word	0x20008688
    3dc8:	00003199 	.word	0x00003199
    3dcc:	0001868d 	.word	0x0001868d
    3dd0:	00019a84 	.word	0x00019a84
    3dd4:	00018d1b 	.word	0x00018d1b
    3dd8:	00019a8b 	.word	0x00019a8b
    3ddc:	00019940 	.word	0x00019940
    3de0:	20008618 	.word	0x20008618

00003de4 <le_conn_param_neg_reply>:
{
    3de4:	b570      	push	{r4, r5, r6, lr}
    3de6:	4606      	mov	r6, r0
    3de8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    3dea:	f242 0021 	movw	r0, #8225	; 0x2021
    3dee:	2103      	movs	r1, #3
    3df0:	f7fe fec6 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    3df4:	4604      	mov	r4, r0
    3df6:	b160      	cbz	r0, 3e12 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
    3df8:	2103      	movs	r1, #3
    3dfa:	3008      	adds	r0, #8
    3dfc:	f012 ffc0 	bl	16d80 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    3e00:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    3e02:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3e04:	4621      	mov	r1, r4
    3e06:	f242 0021 	movw	r0, #8225	; 0x2021
}
    3e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    3e0e:	f7ff b9f3 	b.w	31f8 <bt_hci_cmd_send>
}
    3e12:	f06f 0036 	mvn.w	r0, #54	; 0x36
    3e16:	bd70      	pop	{r4, r5, r6, pc}

00003e18 <hci_tx_thread>:
{
    3e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    3e1c:	f8df a148 	ldr.w	sl, [pc, #328]	; 3f68 <hci_tx_thread+0x150>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3e20:	4d4f      	ldr	r5, [pc, #316]	; (3f60 <hci_tx_thread+0x148>)
{
    3e22:	b085      	sub	sp, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    3e24:	f89a 300d 	ldrb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3e28:	484e      	ldr	r0, [pc, #312]	; (3f64 <hci_tx_thread+0x14c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    3e2a:	f36f 1307 	bfc	r3, #4, #4
    3e2e:	f88a 300d 	strb.w	r3, [sl, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    3e32:	f001 fb35 	bl	54a0 <bt_conn_prepare_events>
    3e36:	f100 0901 	add.w	r9, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    3e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e3e:	4649      	mov	r1, r9
    3e40:	4849      	ldr	r0, [pc, #292]	; (3f68 <hci_tx_thread+0x150>)
    3e42:	f014 f95d 	bl	18100 <k_poll>
		BT_ASSERT(err == 0);
    3e46:	b948      	cbnz	r0, 3e5c <hci_tx_thread+0x44>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3e48:	4c48      	ldr	r4, [pc, #288]	; (3f6c <hci_tx_thread+0x154>)
    3e4a:	4e47      	ldr	r6, [pc, #284]	; (3f68 <hci_tx_thread+0x150>)
    3e4c:	f104 0bd4 	add.w	fp, r4, #212	; 0xd4
	for (; count; ev++, count--) {
    3e50:	f1b9 0f00 	cmp.w	r9, #0
    3e54:	d111      	bne.n	3e7a <hci_tx_thread+0x62>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3e56:	f013 fb8d 	bl	17574 <_impl_k_yield>
    3e5a:	e7e3      	b.n	3e24 <hci_tx_thread+0xc>
		BT_ASSERT(err == 0);
    3e5c:	4b40      	ldr	r3, [pc, #256]	; (3f60 <hci_tx_thread+0x148>)
    3e5e:	9301      	str	r3, [sp, #4]
    3e60:	9300      	str	r3, [sp, #0]
    3e62:	4a43      	ldr	r2, [pc, #268]	; (3f70 <hci_tx_thread+0x158>)
    3e64:	4b43      	ldr	r3, [pc, #268]	; (3f74 <hci_tx_thread+0x15c>)
    3e66:	4944      	ldr	r1, [pc, #272]	; (3f78 <hci_tx_thread+0x160>)
    3e68:	4844      	ldr	r0, [pc, #272]	; (3f7c <hci_tx_thread+0x164>)
	BT_ASSERT(buf);
    3e6a:	f7fd fc39 	bl	16e0 <printk>
    3e6e:	4040      	eors	r0, r0
    3e70:	f380 8811 	msr	BASEPRI, r0
    3e74:	f04f 0004 	mov.w	r0, #4
    3e78:	df02      	svc	2
		switch (ev->state) {
    3e7a:	7b73      	ldrb	r3, [r6, #13]
    3e7c:	091b      	lsrs	r3, r3, #4
    3e7e:	2b01      	cmp	r3, #1
    3e80:	d952      	bls.n	3f28 <hci_tx_thread+0x110>
    3e82:	2b04      	cmp	r3, #4
    3e84:	d162      	bne.n	3f4c <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
    3e86:	7b37      	ldrb	r7, [r6, #12]
    3e88:	2f00      	cmp	r7, #0
    3e8a:	d151      	bne.n	3f30 <hci_tx_thread+0x118>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    3e8c:	4639      	mov	r1, r7
    3e8e:	4658      	mov	r0, fp
    3e90:	f012 ff1a 	bl	16cc8 <net_buf_get>
	BT_ASSERT(buf);
    3e94:	4680      	mov	r8, r0
    3e96:	b938      	cbnz	r0, 3ea8 <hci_tx_thread+0x90>
    3e98:	4b31      	ldr	r3, [pc, #196]	; (3f60 <hci_tx_thread+0x148>)
    3e9a:	9301      	str	r3, [sp, #4]
    3e9c:	9300      	str	r3, [sp, #0]
    3e9e:	4a34      	ldr	r2, [pc, #208]	; (3f70 <hci_tx_thread+0x158>)
    3ea0:	4b37      	ldr	r3, [pc, #220]	; (3f80 <hci_tx_thread+0x168>)
    3ea2:	4935      	ldr	r1, [pc, #212]	; (3f78 <hci_tx_thread+0x160>)
    3ea4:	4837      	ldr	r0, [pc, #220]	; (3f84 <hci_tx_thread+0x16c>)
    3ea6:	e7e0      	b.n	3e6a <hci_tx_thread+0x52>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3eac:	4836      	ldr	r0, [pc, #216]	; (3f88 <hci_tx_thread+0x170>)
    3eae:	f013 fc3d 	bl	1772c <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    3eb2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    3eb6:	b16b      	cbz	r3, 3ed4 <hci_tx_thread+0xbc>
		BT_ERR("Uncleared pending sent_cmd");
    3eb8:	4b31      	ldr	r3, [pc, #196]	; (3f80 <hci_tx_thread+0x168>)
    3eba:	4a2d      	ldr	r2, [pc, #180]	; (3f70 <hci_tx_thread+0x158>)
    3ebc:	492e      	ldr	r1, [pc, #184]	; (3f78 <hci_tx_thread+0x160>)
    3ebe:	9501      	str	r5, [sp, #4]
    3ec0:	9500      	str	r5, [sp, #0]
    3ec2:	4832      	ldr	r0, [pc, #200]	; (3f8c <hci_tx_thread+0x174>)
    3ec4:	f7fd fc0c 	bl	16e0 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    3ec8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    3ecc:	f012 ff26 	bl	16d1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3ed0:	f8c4 70c0 	str.w	r7, [r4, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    3ed4:	4640      	mov	r0, r8
    3ed6:	f012 ff4f 	bl	16d78 <net_buf_ref>
    3eda:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	err = bt_send(buf);
    3ede:	4640      	mov	r0, r8
    3ee0:	f7ff f982 	bl	31e8 <bt_send>
	if (err) {
    3ee4:	b300      	cbz	r0, 3f28 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    3ee6:	4b26      	ldr	r3, [pc, #152]	; (3f80 <hci_tx_thread+0x168>)
    3ee8:	4a21      	ldr	r2, [pc, #132]	; (3f70 <hci_tx_thread+0x158>)
    3eea:	4923      	ldr	r1, [pc, #140]	; (3f78 <hci_tx_thread+0x160>)
    3eec:	9001      	str	r0, [sp, #4]
    3eee:	9502      	str	r5, [sp, #8]
    3ef0:	9500      	str	r5, [sp, #0]
    3ef2:	4827      	ldr	r0, [pc, #156]	; (3f90 <hci_tx_thread+0x178>)
    3ef4:	f7fd fbf4 	bl	16e0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3ef8:	4823      	ldr	r0, [pc, #140]	; (3f88 <hci_tx_thread+0x170>)
    3efa:	f013 fbb7 	bl	1766c <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    3efe:	4640      	mov	r0, r8
    3f00:	f012 fe4e 	bl	16ba0 <net_buf_id>
    3f04:	4b23      	ldr	r3, [pc, #140]	; (3f94 <hci_tx_thread+0x17c>)
    3f06:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3f0a:	2200      	movs	r2, #0
    3f0c:	211f      	movs	r1, #31
    3f0e:	8840      	ldrh	r0, [r0, #2]
    3f10:	f7fe fdc2 	bl	2a98 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    3f14:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    3f18:	f012 ff00 	bl	16d1c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    3f1c:	2300      	movs	r3, #0
		net_buf_unref(buf);
    3f1e:	4640      	mov	r0, r8
		bt_dev.sent_cmd = NULL;
    3f20:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
		net_buf_unref(buf);
    3f24:	f012 fefa 	bl	16d1c <net_buf_unref>
	for (; count; ev++, count--) {
    3f28:	3614      	adds	r6, #20
    3f2a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    3f2e:	e78f      	b.n	3e50 <hci_tx_thread+0x38>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    3f30:	2f01      	cmp	r7, #1
    3f32:	d104      	bne.n	3f3e <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    3f34:	6930      	ldr	r0, [r6, #16]
					bt_conn_notify_tx(conn);
    3f36:	381c      	subs	r0, #28
    3f38:	f001 f9de 	bl	52f8 <bt_conn_notify_tx>
    3f3c:	e7f4      	b.n	3f28 <hci_tx_thread+0x110>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    3f3e:	2f02      	cmp	r7, #2
    3f40:	d1f2      	bne.n	3f28 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    3f42:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    3f44:	382c      	subs	r0, #44	; 0x2c
    3f46:	f001 fe49 	bl	5bdc <bt_conn_process_tx>
    3f4a:	e7ed      	b.n	3f28 <hci_tx_thread+0x110>
		switch (ev->state) {
    3f4c:	9301      	str	r3, [sp, #4]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    3f4e:	9502      	str	r5, [sp, #8]
    3f50:	9500      	str	r5, [sp, #0]
    3f52:	4b11      	ldr	r3, [pc, #68]	; (3f98 <hci_tx_thread+0x180>)
    3f54:	4a11      	ldr	r2, [pc, #68]	; (3f9c <hci_tx_thread+0x184>)
    3f56:	4908      	ldr	r1, [pc, #32]	; (3f78 <hci_tx_thread+0x160>)
    3f58:	4811      	ldr	r0, [pc, #68]	; (3fa0 <hci_tx_thread+0x188>)
    3f5a:	f7fd fbc1 	bl	16e0 <printk>
    3f5e:	e7e3      	b.n	3f28 <hci_tx_thread+0x110>
    3f60:	0001868d 	.word	0x0001868d
    3f64:	20008714 	.word	0x20008714
    3f68:	20008700 	.word	0x20008700
    3f6c:	20008618 	.word	0x20008618
    3f70:	00019a84 	.word	0x00019a84
    3f74:	00018e6a 	.word	0x00018e6a
    3f78:	00019a8b 	.word	0x00019a8b
    3f7c:	00019895 	.word	0x00019895
    3f80:	00018e52 	.word	0x00018e52
    3f84:	000198bf 	.word	0x000198bf
    3f88:	200086c0 	.word	0x200086c0
    3f8c:	000198e4 	.word	0x000198e4
    3f90:	00018f36 	.word	0x00018f36
    3f94:	2000033c 	.word	0x2000033c
    3f98:	00018e5b 	.word	0x00018e5b
    3f9c:	00019806 	.word	0x00019806
    3fa0:	0001990f 	.word	0x0001990f

00003fa4 <bt_recv>:
{
    3fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    3fa8:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    3faa:	2b01      	cmp	r3, #1
{
    3fac:	b095      	sub	sp, #84	; 0x54
    3fae:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    3fb0:	d040      	beq.n	4034 <bt_recv+0x90>
    3fb2:	2b03      	cmp	r3, #3
    3fb4:	f040 8463 	bne.w	487e <bt_recv+0x8da>
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3fb8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(hdr->handle);
    3fba:	881e      	ldrh	r6, [r3, #0]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3fbc:	885d      	ldrh	r5, [r3, #2]
	acl(buf)->handle = bt_acl_handle(handle);
    3fbe:	f3c6 030b 	ubfx	r3, r6, #0, #12
    3fc2:	82c3      	strh	r3, [r0, #22]
	acl(buf)->id = BT_CONN_ID_INVALID;
    3fc4:	23ff      	movs	r3, #255	; 0xff
    3fc6:	7543      	strb	r3, [r0, #21]
	net_buf_pull(buf, sizeof(*hdr));
    3fc8:	2104      	movs	r1, #4
    3fca:	3008      	adds	r0, #8
    3fcc:	f012 ff06 	bl	16ddc <net_buf_simple_pull>
	if (buf->len != len) {
    3fd0:	89a2      	ldrh	r2, [r4, #12]
    3fd2:	4295      	cmp	r5, r2
    3fd4:	d00e      	beq.n	3ff4 <bt_recv+0x50>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    3fd6:	4ba9      	ldr	r3, [pc, #676]	; (427c <bt_recv+0x2d8>)
    3fd8:	9303      	str	r3, [sp, #12]
    3fda:	9201      	str	r2, [sp, #4]
    3fdc:	9300      	str	r3, [sp, #0]
    3fde:	9502      	str	r5, [sp, #8]
    3fe0:	4ba7      	ldr	r3, [pc, #668]	; (4280 <bt_recv+0x2dc>)
    3fe2:	4aa8      	ldr	r2, [pc, #672]	; (4284 <bt_recv+0x2e0>)
    3fe4:	49a8      	ldr	r1, [pc, #672]	; (4288 <bt_recv+0x2e4>)
    3fe6:	48a9      	ldr	r0, [pc, #676]	; (428c <bt_recv+0x2e8>)
    3fe8:	f7fd fb7a 	bl	16e0 <printk>
	net_buf_unref(buf);
    3fec:	4620      	mov	r0, r4
    3fee:	f012 fe95 	bl	16d1c <net_buf_unref>
    3ff2:	e01b      	b.n	402c <bt_recv+0x88>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3ff4:	8ae0      	ldrh	r0, [r4, #22]
    3ff6:	f001 fbb3 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    3ffa:	4605      	mov	r5, r0
    3ffc:	b958      	cbnz	r0, 4016 <bt_recv+0x72>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    3ffe:	4b9f      	ldr	r3, [pc, #636]	; (427c <bt_recv+0x2d8>)
    4000:	8ae2      	ldrh	r2, [r4, #22]
    4002:	9302      	str	r3, [sp, #8]
    4004:	9201      	str	r2, [sp, #4]
    4006:	9300      	str	r3, [sp, #0]
    4008:	4a9e      	ldr	r2, [pc, #632]	; (4284 <bt_recv+0x2e0>)
    400a:	4b9d      	ldr	r3, [pc, #628]	; (4280 <bt_recv+0x2dc>)
    400c:	499e      	ldr	r1, [pc, #632]	; (4288 <bt_recv+0x2e4>)
    400e:	48a0      	ldr	r0, [pc, #640]	; (4290 <bt_recv+0x2ec>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4010:	f7fd fb66 	bl	16e0 <printk>
    4014:	e7ea      	b.n	3fec <bt_recv+0x48>
	acl(buf)->id = bt_conn_get_id(conn);
    4016:	f001 fe51 	bl	5cbc <bt_conn_get_id>
	bt_conn_recv(conn, buf, flags);
    401a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->id = bt_conn_get_id(conn);
    401c:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    401e:	4621      	mov	r1, r4
    4020:	4628      	mov	r0, r5
    4022:	f001 f8a9 	bl	5178 <bt_conn_recv>
	bt_conn_unref(conn);
    4026:	4628      	mov	r0, r5
    4028:	f001 fc08 	bl	583c <bt_conn_unref>
		return 0;
    402c:	2000      	movs	r0, #0
}
    402e:	b015      	add	sp, #84	; 0x54
    4030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    4034:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    4036:	7832      	ldrb	r2, [r6, #0]
    4038:	2a13      	cmp	r2, #19
    403a:	f200 845b 	bhi.w	48f4 <bt_recv+0x950>
    403e:	4093      	lsls	r3, r2
    4040:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    4044:	f000 8456 	beq.w	48f4 <bt_recv+0x950>
    4048:	4b8c      	ldr	r3, [pc, #560]	; (427c <bt_recv+0x2d8>)
    404a:	9301      	str	r3, [sp, #4]
    404c:	9300      	str	r3, [sp, #0]
    404e:	4a8d      	ldr	r2, [pc, #564]	; (4284 <bt_recv+0x2e0>)
    4050:	4b90      	ldr	r3, [pc, #576]	; (4294 <bt_recv+0x2f0>)
    4052:	498d      	ldr	r1, [pc, #564]	; (4288 <bt_recv+0x2e4>)
    4054:	4890      	ldr	r0, [pc, #576]	; (4298 <bt_recv+0x2f4>)
    4056:	f7fd fb43 	bl	16e0 <printk>
    405a:	4040      	eors	r0, r0
    405c:	f380 8811 	msr	BASEPRI, r0
    4060:	f04f 0004 	mov.w	r0, #4
    4064:	df02      	svc	2
    4066:	68a7      	ldr	r7, [r4, #8]
	if (evt->status) {
    4068:	783e      	ldrb	r6, [r7, #0]
    406a:	2e00      	cmp	r6, #0
    406c:	d1be      	bne.n	3fec <bt_recv+0x48>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    406e:	f8b7 8001 	ldrh.w	r8, [r7, #1]
	conn = bt_conn_lookup_handle(handle);
    4072:	4640      	mov	r0, r8
    4074:	f001 fb74 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    4078:	4605      	mov	r5, r0
    407a:	b9c8      	cbnz	r0, 40b0 <bt_recv+0x10c>
		BT_ERR("Unable to look up conn with handle %u", handle);
    407c:	4b7f      	ldr	r3, [pc, #508]	; (427c <bt_recv+0x2d8>)
    407e:	9302      	str	r3, [sp, #8]
    4080:	e88d 0108 	stmia.w	sp, {r3, r8}
    4084:	4a7f      	ldr	r2, [pc, #508]	; (4284 <bt_recv+0x2e0>)
    4086:	4b85      	ldr	r3, [pc, #532]	; (429c <bt_recv+0x2f8>)
    4088:	497f      	ldr	r1, [pc, #508]	; (4288 <bt_recv+0x2e4>)
    408a:	4885      	ldr	r0, [pc, #532]	; (42a0 <bt_recv+0x2fc>)
    408c:	f7fd fb28 	bl	16e0 <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4090:	2106      	movs	r1, #6
    4092:	4884      	ldr	r0, [pc, #528]	; (42a4 <bt_recv+0x300>)
    4094:	f7fe fc8e 	bl	29b4 <atomic_test_bit>
    4098:	2800      	cmp	r0, #0
    409a:	d0a7      	beq.n	3fec <bt_recv+0x48>
	    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    409c:	2105      	movs	r1, #5
    409e:	4881      	ldr	r0, [pc, #516]	; (42a4 <bt_recv+0x300>)
    40a0:	f7fe fc88 	bl	29b4 <atomic_test_bit>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    40a4:	2800      	cmp	r0, #0
    40a6:	d1a1      	bne.n	3fec <bt_recv+0x48>
		set_advertise_enable(true);
    40a8:	2001      	movs	r0, #1
    40aa:	f7fe fe8f 	bl	2dcc <set_advertise_enable>
    40ae:	e79d      	b.n	3fec <bt_recv+0x48>
	conn->err = evt->reason;
    40b0:	78fb      	ldrb	r3, [r7, #3]
    40b2:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    40b4:	f012 ff20 	bl	16ef8 <k_call_stacks_analyze>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    40b8:	4631      	mov	r1, r6
    40ba:	4628      	mov	r0, r5
    40bc:	f001 fa74 	bl	55a8 <bt_conn_set_state>
	conn->handle = 0;
    40c0:	802e      	strh	r6, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    40c2:	78ae      	ldrb	r6, [r5, #2]
    40c4:	b10e      	cbz	r6, 40ca <bt_recv+0x126>
	bt_conn_unref(conn);
    40c6:	4628      	mov	r0, r5
    40c8:	e159      	b.n	437e <bt_recv+0x3da>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    40ca:	4631      	mov	r1, r6
    40cc:	1d28      	adds	r0, r5, #4
    40ce:	f7fe fc71 	bl	29b4 <atomic_test_bit>
    40d2:	b130      	cbz	r0, 40e2 <bt_recv+0x13e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    40d4:	4628      	mov	r0, r5
    40d6:	2101      	movs	r1, #1
    40d8:	f001 fa66 	bl	55a8 <bt_conn_set_state>
		bt_le_scan_update(false);
    40dc:	4630      	mov	r0, r6
    40de:	f7ff f913 	bl	3308 <bt_le_scan_update>
	bt_conn_unref(conn);
    40e2:	4628      	mov	r0, r5
    40e4:	f001 fbaa 	bl	583c <bt_conn_unref>
    40e8:	e7d2      	b.n	4090 <bt_recv+0xec>
    40ea:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    40ec:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    40f0:	4638      	mov	r0, r7
    40f2:	f001 fb35 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    40f6:	4605      	mov	r5, r0
    40f8:	b940      	cbnz	r0, 410c <bt_recv+0x168>
		BT_ERR("Unable to look up conn with handle %u", handle);
    40fa:	4b60      	ldr	r3, [pc, #384]	; (427c <bt_recv+0x2d8>)
    40fc:	9302      	str	r3, [sp, #8]
    40fe:	e88d 0088 	stmia.w	sp, {r3, r7}
    4102:	4b69      	ldr	r3, [pc, #420]	; (42a8 <bt_recv+0x304>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4104:	4a5f      	ldr	r2, [pc, #380]	; (4284 <bt_recv+0x2e0>)
    4106:	4960      	ldr	r1, [pc, #384]	; (4288 <bt_recv+0x2e4>)
    4108:	4865      	ldr	r0, [pc, #404]	; (42a0 <bt_recv+0x2fc>)
    410a:	e781      	b.n	4010 <bt_recv+0x6c>
	if (evt->status) {
    410c:	7833      	ldrb	r3, [r6, #0]
    410e:	7882      	ldrb	r2, [r0, #2]
    4110:	b123      	cbz	r3, 411c <bt_recv+0x178>
		if (conn->type == BT_CONN_TYPE_LE) {
    4112:	2a00      	cmp	r2, #0
    4114:	d1d7      	bne.n	40c6 <bt_recv+0x122>
			conn->required_sec_level = conn->sec_level;
    4116:	7a03      	ldrb	r3, [r0, #8]
    4118:	7243      	strb	r3, [r0, #9]
    411a:	e7d4      	b.n	40c6 <bt_recv+0x122>
	conn->encrypt = evt->encrypt;
    411c:	78f3      	ldrb	r3, [r6, #3]
    411e:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    4120:	b9e2      	cbnz	r2, 415c <bt_recv+0x1b8>
		if (conn->encrypt) {
    4122:	b10b      	cbz	r3, 4128 <bt_recv+0x184>
		bt_smp_update_keys(conn);
    4124:	f005 ffd8 	bl	a0d8 <bt_smp_update_keys>
		update_sec_level(conn);
    4128:	4628      	mov	r0, r5
    412a:	f7fe fc7f 	bl	2a2c <update_sec_level>
    412e:	e015      	b.n	415c <bt_recv+0x1b8>
    4130:	68a6      	ldr	r6, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    4132:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4136:	4638      	mov	r0, r7
    4138:	f001 fb12 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    413c:	4605      	mov	r5, r0
    413e:	b928      	cbnz	r0, 414c <bt_recv+0x1a8>
		BT_ERR("Unable to look up conn with handle %u", handle);
    4140:	4b4e      	ldr	r3, [pc, #312]	; (427c <bt_recv+0x2d8>)
    4142:	9302      	str	r3, [sp, #8]
    4144:	e88d 0088 	stmia.w	sp, {r3, r7}
    4148:	4b58      	ldr	r3, [pc, #352]	; (42ac <bt_recv+0x308>)
    414a:	e7db      	b.n	4104 <bt_recv+0x160>
	if (evt->status) {
    414c:	7831      	ldrb	r1, [r6, #0]
    414e:	b111      	cbz	r1, 4156 <bt_recv+0x1b2>
		bt_l2cap_encrypt_change(conn, evt->status);
    4150:	f001 feeb 	bl	5f2a <bt_l2cap_encrypt_change>
    4154:	e74a      	b.n	3fec <bt_recv+0x48>
	if (conn->type == BT_CONN_TYPE_LE) {
    4156:	7883      	ldrb	r3, [r0, #2]
    4158:	2b00      	cmp	r3, #0
    415a:	d0e3      	beq.n	4124 <bt_recv+0x180>
	bt_l2cap_encrypt_change(conn, evt->status);
    415c:	4628      	mov	r0, r5
    415e:	7831      	ldrb	r1, [r6, #0]
    4160:	f001 fee3 	bl	5f2a <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4164:	4628      	mov	r0, r5
    4166:	f000 ff91 	bl	508c <bt_conn_security_changed>
    416a:	e7ac      	b.n	40c6 <bt_recv+0x122>
    416c:	68a1      	ldr	r1, [r4, #8]
	enh.status         = evt->status;
    416e:	780b      	ldrb	r3, [r1, #0]
    4170:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	enh.handle         = evt->handle;
    4174:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    4178:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
	enh.role           = evt->role;
    417c:	78cb      	ldrb	r3, [r1, #3]
    417e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	enh.interval       = evt->interval;
    4182:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    4186:	f8ad 3047 	strh.w	r3, [sp, #71]	; 0x47
	enh.latency        = evt->latency;
    418a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    418e:	f8ad 3049 	strh.w	r3, [sp, #73]	; 0x49
	enh.supv_timeout   = evt->supv_timeout;
    4192:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    4196:	f8ad 304b 	strh.w	r3, [sp, #75]	; 0x4b
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    419a:	ae0d      	add	r6, sp, #52	; 0x34
	enh.clock_accuracy = evt->clock_accuracy;
    419c:	7c4b      	ldrb	r3, [r1, #17]
    419e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    41a2:	3104      	adds	r1, #4
    41a4:	4630      	mov	r0, r6
    41a6:	f7fe fbf1 	bl	298c <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
    41aa:	2500      	movs	r5, #0
    41ac:	2206      	movs	r2, #6
    41ae:	a908      	add	r1, sp, #32
    41b0:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
    41b4:	9508      	str	r5, [sp, #32]
    41b6:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
    41ba:	f7fc fa25 	bl	608 <memcpy>
		keys = bt_keys_find_irk(addr);
    41be:	4630      	mov	r0, r6
    41c0:	f006 f8a2 	bl	a308 <bt_keys_find_irk>
		if (keys) {
    41c4:	4607      	mov	r7, r0
    41c6:	b1a8      	cbz	r0, 41f4 <bt_recv+0x250>
	if (id_addr != &enh.peer_addr) {
    41c8:	42b0      	cmp	r0, r6
    41ca:	d013      	beq.n	41f4 <bt_recv+0x250>
    41cc:	2206      	movs	r2, #6
    41ce:	f10d 0135 	add.w	r1, sp, #53	; 0x35
    41d2:	f10d 0041 	add.w	r0, sp, #65	; 0x41
    41d6:	f7fc fa17 	bl	608 <memcpy>
		bt_addr_le_copy(&enh.peer_addr, id_addr);
    41da:	4639      	mov	r1, r7
    41dc:	4630      	mov	r0, r6
    41de:	f7fe fbd5 	bl	298c <bt_addr_le_copy>
		enh.peer_addr.type += BT_ADDR_LE_PUBLIC_ID;
    41e2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    41e6:	3302      	adds	r3, #2
    41e8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	le_enh_conn_complete(&enh);
    41ec:	a80c      	add	r0, sp, #48	; 0x30
		le_enh_conn_complete((void *)buf->data);
    41ee:	f7ff fd13 	bl	3c18 <le_enh_conn_complete>
    41f2:	e6fb      	b.n	3fec <bt_recv+0x48>
    41f4:	2206      	movs	r2, #6
    41f6:	a90a      	add	r1, sp, #40	; 0x28
    41f8:	f10d 0041 	add.w	r0, sp, #65	; 0x41
		bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    41fc:	950a      	str	r5, [sp, #40]	; 0x28
    41fe:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
    4202:	f7fc fa01 	bl	608 <memcpy>
    4206:	e7f1      	b.n	41ec <bt_recv+0x248>
		le_enh_conn_complete((void *)buf->data);
    4208:	68a0      	ldr	r0, [r4, #8]
    420a:	e7f0      	b.n	41ee <bt_recv+0x24a>
    420c:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    420e:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    4212:	4638      	mov	r0, r7
    4214:	f001 faa4 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    4218:	4606      	mov	r6, r0
    421a:	b940      	cbnz	r0, 422e <bt_recv+0x28a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    421c:	4b17      	ldr	r3, [pc, #92]	; (427c <bt_recv+0x2d8>)
    421e:	9302      	str	r3, [sp, #8]
    4220:	e88d 0088 	stmia.w	sp, {r3, r7}
    4224:	4b22      	ldr	r3, [pc, #136]	; (42b0 <bt_recv+0x30c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4226:	4a17      	ldr	r2, [pc, #92]	; (4284 <bt_recv+0x2e0>)
    4228:	4917      	ldr	r1, [pc, #92]	; (4288 <bt_recv+0x2e4>)
    422a:	4822      	ldr	r0, [pc, #136]	; (42b4 <bt_recv+0x310>)
    422c:	e6f0      	b.n	4010 <bt_recv+0x6c>
	if (!evt->status) {
    422e:	782b      	ldrb	r3, [r5, #0]
    4230:	b99b      	cbnz	r3, 425a <bt_recv+0x2b6>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4232:	792a      	ldrb	r2, [r5, #4]
    4234:	78eb      	ldrb	r3, [r5, #3]
    4236:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    423a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    423e:	79aa      	ldrb	r2, [r5, #6]
    4240:	796b      	ldrb	r3, [r5, #5]
    4242:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4246:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    424a:	79eb      	ldrb	r3, [r5, #7]
    424c:	7a2a      	ldrb	r2, [r5, #8]
    424e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4252:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4256:	f000 fe91 	bl	4f7c <notify_le_param_updated>
	bt_conn_unref(conn);
    425a:	4630      	mov	r0, r6
    425c:	e08f      	b.n	437e <bt_recv+0x3da>
    425e:	68a6      	ldr	r6, [r4, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4260:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4264:	4638      	mov	r0, r7
    4266:	f001 fa7b 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    426a:	4605      	mov	r5, r0
    426c:	bb30      	cbnz	r0, 42bc <bt_recv+0x318>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    426e:	4b03      	ldr	r3, [pc, #12]	; (427c <bt_recv+0x2d8>)
    4270:	9302      	str	r3, [sp, #8]
    4272:	e88d 0088 	stmia.w	sp, {r3, r7}
    4276:	4b10      	ldr	r3, [pc, #64]	; (42b8 <bt_recv+0x314>)
    4278:	e7d5      	b.n	4226 <bt_recv+0x282>
    427a:	bf00      	nop
    427c:	0001868d 	.word	0x0001868d
    4280:	00018ce4 	.word	0x00018ce4
    4284:	00019a84 	.word	0x00019a84
    4288:	00019a8b 	.word	0x00019a8b
    428c:	00019509 	.word	0x00019509
    4290:	0001953d 	.word	0x0001953d
    4294:	00018e48 	.word	0x00018e48
    4298:	00019695 	.word	0x00019695
    429c:	00018d06 	.word	0x00018d06
    42a0:	0001956f 	.word	0x0001956f
    42a4:	20008688 	.word	0x20008688
    42a8:	00018dd5 	.word	0x00018dd5
    42ac:	00018de8 	.word	0x00018de8
    42b0:	00018d84 	.word	0x00018d84
    42b4:	000195a5 	.word	0x000195a5
    42b8:	00018d30 	.word	0x00018d30
	if (!evt->status) {
    42bc:	7833      	ldrb	r3, [r6, #0]
    42be:	b923      	cbnz	r3, 42ca <bt_recv+0x326>
		memcpy(conn->le.features, evt->features,
    42c0:	2208      	movs	r2, #8
    42c2:	1cf1      	adds	r1, r6, #3
    42c4:	3068      	adds	r0, #104	; 0x68
    42c6:	f7fc f99f 	bl	608 <memcpy>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    42ca:	4eb2      	ldr	r6, [pc, #712]	; (4594 <bt_recv+0x5f0>)
    42cc:	f896 2079 	ldrb.w	r2, [r6, #121]	; 0x79
    42d0:	07d2      	lsls	r2, r2, #31
    42d2:	d50c      	bpl.n	42ee <bt_recv+0x34a>
    42d4:	f895 3069 	ldrb.w	r3, [r5, #105]	; 0x69
    42d8:	07db      	lsls	r3, r3, #31
    42da:	d508      	bpl.n	42ee <bt_recv+0x34a>
		err = hci_le_set_phy(conn);
    42dc:	4628      	mov	r0, r5
    42de:	f7ff fc51 	bl	3b84 <hci_le_set_phy.isra.31>
		if (!err) {
    42e2:	b920      	cbnz	r0, 42ee <bt_recv+0x34a>
    42e4:	2180      	movs	r1, #128	; 0x80
    42e6:	1d28      	adds	r0, r5, #4
    42e8:	f7fe fb53 	bl	2992 <atomic_or>
    42ec:	e6eb      	b.n	40c6 <bt_recv+0x122>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    42ee:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    42f2:	069f      	lsls	r7, r3, #26
    42f4:	d57e      	bpl.n	43f4 <bt_recv+0x450>
    42f6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    42fa:	069e      	lsls	r6, r3, #26
    42fc:	d57a      	bpl.n	43f4 <bt_recv+0x450>
		err = hci_le_set_data_len(conn);
    42fe:	4628      	mov	r0, r5
    4300:	f7ff fc60 	bl	3bc4 <hci_le_set_data_len.isra.32>
		if (!err) {
    4304:	2800      	cmp	r0, #0
    4306:	d175      	bne.n	43f4 <bt_recv+0x450>
    4308:	f44f 7180 	mov.w	r1, #256	; 0x100
    430c:	e7eb      	b.n	42e6 <bt_recv+0x342>
    430e:	68a3      	ldr	r3, [r4, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4310:	78d9      	ldrb	r1, [r3, #3]
    4312:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    4314:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    4316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    431a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    431e:	7959      	ldrb	r1, [r3, #5]
    4320:	791a      	ldrb	r2, [r3, #4]
    4322:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4326:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
	param.latency = sys_le16_to_cpu(evt->latency);
    432a:	799a      	ldrb	r2, [r3, #6]
    432c:	79d9      	ldrb	r1, [r3, #7]
    432e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4332:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4336:	7a1a      	ldrb	r2, [r3, #8]
    4338:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    433a:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    433c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    4340:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
    4342:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
	conn = bt_conn_lookup_handle(handle);
    4346:	f001 fa0b 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    434a:	4680      	mov	r8, r0
    434c:	b970      	cbnz	r0, 436c <bt_recv+0x3c8>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    434e:	4b92      	ldr	r3, [pc, #584]	; (4598 <bt_recv+0x5f4>)
    4350:	9302      	str	r3, [sp, #8]
    4352:	e88d 0028 	stmia.w	sp, {r3, r5}
    4356:	4a91      	ldr	r2, [pc, #580]	; (459c <bt_recv+0x5f8>)
    4358:	4b91      	ldr	r3, [pc, #580]	; (45a0 <bt_recv+0x5fc>)
    435a:	4992      	ldr	r1, [pc, #584]	; (45a4 <bt_recv+0x600>)
    435c:	4892      	ldr	r0, [pc, #584]	; (45a8 <bt_recv+0x604>)
    435e:	f7fd f9bf 	bl	16e0 <printk>
		return le_conn_param_neg_reply(handle,
    4362:	2102      	movs	r1, #2
    4364:	4628      	mov	r0, r5
    4366:	f7ff fd3d 	bl	3de4 <le_conn_param_neg_reply>
    436a:	e63f      	b.n	3fec <bt_recv+0x48>
	if (!le_param_req(conn, &param)) {
    436c:	a90c      	add	r1, sp, #48	; 0x30
    436e:	f000 fe19 	bl	4fa4 <le_param_req>
    4372:	b938      	cbnz	r0, 4384 <bt_recv+0x3e0>
		err = le_conn_param_neg_reply(handle,
    4374:	211e      	movs	r1, #30
    4376:	4628      	mov	r0, r5
    4378:	f7ff fd34 	bl	3de4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    437c:	4640      	mov	r0, r8
	bt_conn_unref(conn);
    437e:	f001 fa5d 	bl	583c <bt_conn_unref>
    4382:	e633      	b.n	3fec <bt_recv+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    4384:	210e      	movs	r1, #14
    4386:	f242 0020 	movw	r0, #8224	; 0x2020
    438a:	f7fe fbf9 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    438e:	4606      	mov	r6, r0
    4390:	2800      	cmp	r0, #0
    4392:	d0f3      	beq.n	437c <bt_recv+0x3d8>
	cp = net_buf_add(buf, sizeof(*cp));
    4394:	210e      	movs	r1, #14
    4396:	3008      	adds	r0, #8
    4398:	f012 fcf2 	bl	16d80 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
    439c:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    439e:	4605      	mov	r5, r0
	memset(cp, 0, sizeof(*cp));
    43a0:	2100      	movs	r1, #0
    43a2:	f7fc f95d 	bl	660 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    43a6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    43aa:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    43ac:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    43b0:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    43b2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    43b6:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    43b8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cp->handle = sys_cpu_to_le16(handle);
    43bc:	802f      	strh	r7, [r5, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    43be:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    43c0:	4631      	mov	r1, r6
    43c2:	f242 0020 	movw	r0, #8224	; 0x2020
    43c6:	f7fe ff17 	bl	31f8 <bt_hci_cmd_send>
    43ca:	e7d7      	b.n	437c <bt_recv+0x3d8>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    43cc:	68a3      	ldr	r3, [r4, #8]
    43ce:	881e      	ldrh	r6, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    43d0:	4630      	mov	r0, r6
    43d2:	f001 f9c5 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    43d6:	4605      	mov	r5, r0
    43d8:	b928      	cbnz	r0, 43e6 <bt_recv+0x442>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    43da:	4b6f      	ldr	r3, [pc, #444]	; (4598 <bt_recv+0x5f4>)
    43dc:	9302      	str	r3, [sp, #8]
    43de:	e88d 0048 	stmia.w	sp, {r3, r6}
    43e2:	4b72      	ldr	r3, [pc, #456]	; (45ac <bt_recv+0x608>)
    43e4:	e71f      	b.n	4226 <bt_recv+0x282>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    43e6:	2108      	movs	r1, #8
    43e8:	3004      	adds	r0, #4
    43ea:	f7fe fb01 	bl	29f0 <atomic_test_and_clear_bit>
    43ee:	2800      	cmp	r0, #0
    43f0:	f43f ae69 	beq.w	40c6 <bt_recv+0x122>
	update_conn_param(conn);
    43f4:	4628      	mov	r0, r5
    43f6:	f7fe fb0b 	bl	2a10 <update_conn_param>
    43fa:	e664      	b.n	40c6 <bt_recv+0x122>
	u16_t handle = sys_le16_to_cpu(evt->handle);
    43fc:	68a3      	ldr	r3, [r4, #8]
    43fe:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    4402:	4630      	mov	r0, r6
    4404:	f001 f9ac 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    4408:	4605      	mov	r5, r0
    440a:	b928      	cbnz	r0, 4418 <bt_recv+0x474>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    440c:	4b62      	ldr	r3, [pc, #392]	; (4598 <bt_recv+0x5f4>)
    440e:	9302      	str	r3, [sp, #8]
    4410:	e88d 0048 	stmia.w	sp, {r3, r6}
    4414:	4b66      	ldr	r3, [pc, #408]	; (45b0 <bt_recv+0x60c>)
    4416:	e706      	b.n	4226 <bt_recv+0x282>
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    4418:	1d06      	adds	r6, r0, #4
    441a:	2107      	movs	r1, #7
    441c:	4630      	mov	r0, r6
    441e:	f7fe fae7 	bl	29f0 <atomic_test_and_clear_bit>
    4422:	2800      	cmp	r0, #0
    4424:	f43f ae4f 	beq.w	40c6 <bt_recv+0x122>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    4428:	4b5a      	ldr	r3, [pc, #360]	; (4594 <bt_recv+0x5f0>)
    442a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    442e:	0698      	lsls	r0, r3, #26
    4430:	d5e0      	bpl.n	43f4 <bt_recv+0x450>
    4432:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4436:	0699      	lsls	r1, r3, #26
    4438:	d5dc      	bpl.n	43f4 <bt_recv+0x450>
		err = hci_le_set_data_len(conn);
    443a:	4628      	mov	r0, r5
    443c:	f7ff fbc2 	bl	3bc4 <hci_le_set_data_len.isra.32>
		if (!err) {
    4440:	2800      	cmp	r0, #0
    4442:	d1d7      	bne.n	43f4 <bt_recv+0x450>
    4444:	f44f 7180 	mov.w	r1, #256	; 0x100
    4448:	4630      	mov	r0, r6
    444a:	e74d      	b.n	42e8 <bt_recv+0x344>
    444c:	68a5      	ldr	r5, [r4, #8]
	handle = sys_le16_to_cpu(evt->handle);
    444e:	882f      	ldrh	r7, [r5, #0]
	conn = bt_conn_lookup_handle(handle);
    4450:	4638      	mov	r0, r7
    4452:	f001 f985 	bl	5760 <bt_conn_lookup_handle>
	if (!conn) {
    4456:	4606      	mov	r6, r0
    4458:	b928      	cbnz	r0, 4466 <bt_recv+0x4c2>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    445a:	4b4f      	ldr	r3, [pc, #316]	; (4598 <bt_recv+0x5f4>)
    445c:	9302      	str	r3, [sp, #8]
    445e:	e88d 0088 	stmia.w	sp, {r3, r7}
    4462:	4b54      	ldr	r3, [pc, #336]	; (45b4 <bt_recv+0x610>)
    4464:	e6df      	b.n	4226 <bt_recv+0x282>
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    4466:	f8d5 2002 	ldr.w	r2, [r5, #2]
    446a:	f8d5 3006 	ldr.w	r3, [r5, #6]
    446e:	4313      	orrs	r3, r2
    4470:	d127      	bne.n	44c2 <bt_recv+0x51e>
    4472:	896b      	ldrh	r3, [r5, #10]
    4474:	bb2b      	cbnz	r3, 44c2 <bt_recv+0x51e>
    4476:	a90c      	add	r1, sp, #48	; 0x30
    4478:	f005 feb0 	bl	a1dc <bt_smp_get_tk>
    447c:	b308      	cbz	r0, 44c2 <bt_recv+0x51e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    447e:	2112      	movs	r1, #18
    4480:	f242 001a 	movw	r0, #8218	; 0x201a
    4484:	f7fe fb7c 	bl	2b80 <bt_hci_cmd_create>
		if (!buf) {
    4488:	4607      	mov	r7, r0
    448a:	b948      	cbnz	r0, 44a0 <bt_recv+0x4fc>
			BT_ERR("Out of command buffers");
    448c:	4b42      	ldr	r3, [pc, #264]	; (4598 <bt_recv+0x5f4>)
    448e:	9301      	str	r3, [sp, #4]
    4490:	9300      	str	r3, [sp, #0]
    4492:	4b48      	ldr	r3, [pc, #288]	; (45b4 <bt_recv+0x610>)
		BT_ERR("Out of command buffers");
    4494:	4a41      	ldr	r2, [pc, #260]	; (459c <bt_recv+0x5f8>)
    4496:	4943      	ldr	r1, [pc, #268]	; (45a4 <bt_recv+0x600>)
    4498:	4847      	ldr	r0, [pc, #284]	; (45b8 <bt_recv+0x614>)
    449a:	f7fd f921 	bl	16e0 <printk>
    449e:	e6dc      	b.n	425a <bt_recv+0x2b6>
		cp = net_buf_add(buf, sizeof(*cp));
    44a0:	2112      	movs	r1, #18
    44a2:	3008      	adds	r0, #8
    44a4:	f012 fc6c 	bl	16d80 <net_buf_simple_add>
		cp->handle = evt->handle;
    44a8:	882b      	ldrh	r3, [r5, #0]
    44aa:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    44ae:	2210      	movs	r2, #16
    44b0:	a90c      	add	r1, sp, #48	; 0x30
    44b2:	f7fc f8a9 	bl	608 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    44b6:	4639      	mov	r1, r7
    44b8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    44bc:	f7fe fe9c 	bl	31f8 <bt_hci_cmd_send>
    44c0:	e6cb      	b.n	425a <bt_recv+0x2b6>
	if (!conn->le.keys) {
    44c2:	6f33      	ldr	r3, [r6, #112]	; 0x70
    44c4:	2b00      	cmp	r3, #0
    44c6:	f040 825f 	bne.w	4988 <bt_recv+0x9e4>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    44ca:	f106 0748 	add.w	r7, r6, #72	; 0x48
    44ce:	4639      	mov	r1, r7
    44d0:	2020      	movs	r0, #32
    44d2:	f005 fefb 	bl	a2cc <bt_keys_find>
    44d6:	6730      	str	r0, [r6, #112]	; 0x70
		if (!conn->le.keys) {
    44d8:	2800      	cmp	r0, #0
    44da:	f040 8255 	bne.w	4988 <bt_recv+0x9e4>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    44de:	4639      	mov	r1, r7
    44e0:	2001      	movs	r0, #1
    44e2:	f005 fef3 	bl	a2cc <bt_keys_find>
    44e6:	6730      	str	r0, [r6, #112]	; 0x70
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    44e8:	2800      	cmp	r0, #0
    44ea:	d067      	beq.n	45bc <bt_recv+0x618>
    44ec:	8981      	ldrh	r1, [r0, #12]
    44ee:	068a      	lsls	r2, r1, #26
    44f0:	d52b      	bpl.n	454a <bt_recv+0x5a6>
	    evt->rand == 0 && evt->ediv == 0) {
    44f2:	f8d5 2002 	ldr.w	r2, [r5, #2]
    44f6:	f8d5 3006 	ldr.w	r3, [r5, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    44fa:	4313      	orrs	r3, r2
    44fc:	d125      	bne.n	454a <bt_recv+0x5a6>
	    evt->rand == 0 && evt->ediv == 0) {
    44fe:	f8b5 800a 	ldrh.w	r8, [r5, #10]
    4502:	f1b8 0f00 	cmp.w	r8, #0
    4506:	d120      	bne.n	454a <bt_recv+0x5a6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    4508:	2112      	movs	r1, #18
    450a:	f242 001a 	movw	r0, #8218	; 0x201a
    450e:	f7fe fb37 	bl	2b80 <bt_hci_cmd_create>
		if (!buf) {
    4512:	4607      	mov	r7, r0
    4514:	2800      	cmp	r0, #0
    4516:	d0b9      	beq.n	448c <bt_recv+0x4e8>
		cp = net_buf_add(buf, sizeof(*cp));
    4518:	2112      	movs	r1, #18
    451a:	3008      	adds	r0, #8
    451c:	f012 fc30 	bl	16d80 <net_buf_simple_add>
		cp->handle = evt->handle;
    4520:	882b      	ldrh	r3, [r5, #0]
    4522:	4605      	mov	r5, r0
    4524:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    4528:	6f31      	ldr	r1, [r6, #112]	; 0x70
    452a:	79ca      	ldrb	r2, [r1, #7]
    452c:	311a      	adds	r1, #26
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    452e:	4628      	mov	r0, r5
    4530:	f7fc f86a 	bl	608 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    4534:	6f33      	ldr	r3, [r6, #112]	; 0x70
    4536:	79d8      	ldrb	r0, [r3, #7]
    4538:	280f      	cmp	r0, #15
    453a:	d8bc      	bhi.n	44b6 <bt_recv+0x512>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    453c:	f1c0 0210 	rsb	r2, r0, #16
    4540:	2100      	movs	r1, #0
    4542:	4428      	add	r0, r5
    4544:	f7fc f88c 	bl	660 <memset>
    4548:	e7b5      	b.n	44b6 <bt_recv+0x512>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    454a:	07cb      	lsls	r3, r1, #31
    454c:	d536      	bpl.n	45bc <bt_recv+0x618>
    454e:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    4552:	f8d5 9006 	ldr.w	r9, [r5, #6]
    4556:	f8d5 8002 	ldr.w	r8, [r5, #2]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    455a:	454b      	cmp	r3, r9
    455c:	bf08      	it	eq
    455e:	4542      	cmpeq	r2, r8
    4560:	d12c      	bne.n	45bc <bt_recv+0x618>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    4562:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
    4566:	896b      	ldrh	r3, [r5, #10]
    4568:	429a      	cmp	r2, r3
    456a:	d127      	bne.n	45bc <bt_recv+0x618>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    456c:	2112      	movs	r1, #18
    456e:	f242 001a 	movw	r0, #8218	; 0x201a
    4572:	f7fe fb05 	bl	2b80 <bt_hci_cmd_create>
		if (!buf) {
    4576:	4607      	mov	r7, r0
    4578:	2800      	cmp	r0, #0
    457a:	d087      	beq.n	448c <bt_recv+0x4e8>
		cp = net_buf_add(buf, sizeof(*cp));
    457c:	2112      	movs	r1, #18
    457e:	3008      	adds	r0, #8
    4580:	f012 fbfe 	bl	16d80 <net_buf_simple_add>
		cp->handle = evt->handle;
    4584:	882b      	ldrh	r3, [r5, #0]
    4586:	4605      	mov	r5, r0
    4588:	f825 3b02 	strh.w	r3, [r5], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    458c:	6f31      	ldr	r1, [r6, #112]	; 0x70
    458e:	79ca      	ldrb	r2, [r1, #7]
    4590:	3152      	adds	r1, #82	; 0x52
    4592:	e7cc      	b.n	452e <bt_recv+0x58a>
    4594:	20008618 	.word	0x20008618
    4598:	0001868d 	.word	0x0001868d
    459c:	00019a84 	.word	0x00019a84
    45a0:	00018d72 	.word	0x00018d72
    45a4:	00019a8b 	.word	0x00019a8b
    45a8:	000195a5 	.word	0x000195a5
    45ac:	00018d48 	.word	0x00018d48
    45b0:	00018d5b 	.word	0x00018d5b
    45b4:	00018e1a 	.word	0x00018e1a
    45b8:	000195d9 	.word	0x000195d9
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    45bc:	2102      	movs	r1, #2
    45be:	f242 001b 	movw	r0, #8219	; 0x201b
	le_ltk_neg_reply(evt->handle);
    45c2:	882f      	ldrh	r7, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    45c4:	f7fe fadc 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    45c8:	4605      	mov	r5, r0
    45ca:	b920      	cbnz	r0, 45d6 <bt_recv+0x632>
		BT_ERR("Out of command buffers");
    45cc:	4bb4      	ldr	r3, [pc, #720]	; (48a0 <bt_recv+0x8fc>)
    45ce:	9301      	str	r3, [sp, #4]
    45d0:	9300      	str	r3, [sp, #0]
    45d2:	4bb4      	ldr	r3, [pc, #720]	; (48a4 <bt_recv+0x900>)
    45d4:	e75e      	b.n	4494 <bt_recv+0x4f0>
	cp = net_buf_add(buf, sizeof(*cp));
    45d6:	2102      	movs	r1, #2
    45d8:	3008      	adds	r0, #8
    45da:	f012 fbd1 	bl	16d80 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    45de:	4629      	mov	r1, r5
	cp->handle = handle;
    45e0:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    45e2:	f242 001b 	movw	r0, #8219	; 0x201b
    45e6:	e769      	b.n	44bc <bt_recv+0x518>
    45e8:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    45ea:	48af      	ldr	r0, [pc, #700]	; (48a8 <bt_recv+0x904>)
    45ec:	f06f 0110 	mvn.w	r1, #16
    45f0:	f7fe f9ed 	bl	29ce <atomic_and>
	if (!evt->status) {
    45f4:	7833      	ldrb	r3, [r6, #0]
    45f6:	b943      	cbnz	r3, 460a <bt_recv+0x666>
		memcpy(pub_key, evt->key, 64);
    45f8:	1c71      	adds	r1, r6, #1
    45fa:	2240      	movs	r2, #64	; 0x40
    45fc:	48ab      	ldr	r0, [pc, #684]	; (48ac <bt_recv+0x908>)
    45fe:	f7fc f803 	bl	608 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4602:	2108      	movs	r1, #8
    4604:	48a8      	ldr	r0, [pc, #672]	; (48a8 <bt_recv+0x904>)
    4606:	f7fe f9c4 	bl	2992 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    460a:	4ba9      	ldr	r3, [pc, #676]	; (48b0 <bt_recv+0x90c>)
    460c:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    460e:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4610:	2d00      	cmp	r5, #0
    4612:	f43f aceb 	beq.w	3fec <bt_recv+0x48>
		cb->func(evt->status ? NULL : evt->key);
    4616:	7832      	ldrb	r2, [r6, #0]
    4618:	682b      	ldr	r3, [r5, #0]
    461a:	2a00      	cmp	r2, #0
    461c:	bf0c      	ite	eq
    461e:	4638      	moveq	r0, r7
    4620:	2000      	movne	r0, #0
    4622:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4624:	686d      	ldr	r5, [r5, #4]
    4626:	e7f3      	b.n	4610 <bt_recv+0x66c>
	if (dh_key_cb) {
    4628:	4da2      	ldr	r5, [pc, #648]	; (48b4 <bt_recv+0x910>)
    462a:	68a0      	ldr	r0, [r4, #8]
    462c:	682a      	ldr	r2, [r5, #0]
    462e:	2a00      	cmp	r2, #0
    4630:	f43f acdc 	beq.w	3fec <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4634:	7803      	ldrb	r3, [r0, #0]
    4636:	b923      	cbnz	r3, 4642 <bt_recv+0x69e>
    4638:	3001      	adds	r0, #1
    463a:	4790      	blx	r2
		dh_key_cb = NULL;
    463c:	2300      	movs	r3, #0
    463e:	602b      	str	r3, [r5, #0]
    4640:	e4d4      	b.n	3fec <bt_recv+0x48>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    4642:	2000      	movs	r0, #0
    4644:	e7f9      	b.n	463a <bt_recv+0x696>
	u8_t num_reports = net_buf_pull_u8(buf);
    4646:	4628      	mov	r0, r5
    4648:	f012 fbd0 	bl	16dec <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    464c:	f8df a29c 	ldr.w	sl, [pc, #668]	; 48ec <bt_recv+0x948>
	u8_t num_reports = net_buf_pull_u8(buf);
    4650:	9006      	str	r0, [sp, #24]
	while (num_reports--) {
    4652:	9b06      	ldr	r3, [sp, #24]
    4654:	2b00      	cmp	r3, #0
    4656:	f43f acc9 	beq.w	3fec <bt_recv+0x48>
		info = (void *)buf->data;
    465a:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    465c:	2109      	movs	r1, #9
    465e:	4628      	mov	r0, r5
    4660:	f012 fbbc 	bl	16ddc <net_buf_simple_pull>
		rssi = info->data[info->length];
    4664:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4666:	46b0      	mov	r8, r6
		rssi = info->data[info->length];
    4668:	4433      	add	r3, r6
    466a:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    466e:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    4672:	3b02      	subs	r3, #2
    4674:	2b01      	cmp	r3, #1
    4676:	d83c      	bhi.n	46f2 <bt_recv+0x74e>
			bt_addr_le_copy(&id_addr, &info->addr);
    4678:	4641      	mov	r1, r8
    467a:	a80c      	add	r0, sp, #48	; 0x30
    467c:	f7fe f986 	bl	298c <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    4680:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    4684:	3b02      	subs	r3, #2
    4686:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    468a:	f8da 3000 	ldr.w	r3, [sl]
    468e:	b1c3      	cbz	r3, 46c2 <bt_recv+0x71e>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    4690:	4628      	mov	r0, r5
    4692:	f012 fbbb 	bl	16e0c <net_buf_simple_headroom>
			buf->len = info->length;
    4696:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    4698:	f8b4 900c 	ldrh.w	r9, [r4, #12]
    469c:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    469e:	7832      	ldrb	r2, [r6, #0]
    46a0:	9400      	str	r4, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    46a2:	9007      	str	r0, [sp, #28]
    46a4:	462b      	mov	r3, r5
    46a6:	fa4f f18b 	sxtb.w	r1, fp
    46aa:	a80c      	add	r0, sp, #48	; 0x30
    46ac:	f8da 7000 	ldr.w	r7, [sl]
    46b0:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    46b2:	6923      	ldr	r3, [r4, #16]
    46b4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	buf->len = state->len;
    46b8:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    46bc:	fa13 f382 	uxtah	r3, r3, r2
    46c0:	60a3      	str	r3, [r4, #8]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    46c2:	2108      	movs	r1, #8
    46c4:	4878      	ldr	r0, [pc, #480]	; (48a8 <bt_recv+0x904>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    46c6:	7837      	ldrb	r7, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    46c8:	f7fe f974 	bl	29b4 <atomic_test_bit>
    46cc:	b928      	cbnz	r0, 46da <bt_recv+0x736>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    46ce:	2f01      	cmp	r7, #1
    46d0:	d803      	bhi.n	46da <bt_recv+0x736>
    46d2:	4641      	mov	r1, r8
    46d4:	a80c      	add	r0, sp, #48	; 0x30
    46d6:	f7ff f9db 	bl	3a90 <check_pending_conn.part.29>
		net_buf_pull(buf, info->length + sizeof(rssi));
    46da:	7a31      	ldrb	r1, [r6, #8]
    46dc:	4628      	mov	r0, r5
    46de:	3101      	adds	r1, #1
    46e0:	f012 fb7c 	bl	16ddc <net_buf_simple_pull>
    46e4:	9b06      	ldr	r3, [sp, #24]
    46e6:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    46ea:	fa5f f389 	uxtb.w	r3, r9
    46ee:	9306      	str	r3, [sp, #24]
    46f0:	e7af      	b.n	4652 <bt_recv+0x6ae>
		keys = bt_keys_find_irk(addr);
    46f2:	4640      	mov	r0, r8
    46f4:	f005 fe08 	bl	a308 <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    46f8:	2800      	cmp	r0, #0
    46fa:	bf14      	ite	ne
    46fc:	4601      	movne	r1, r0
    46fe:	4641      	moveq	r1, r8
    4700:	a80c      	add	r0, sp, #48	; 0x30
    4702:	f7fe f943 	bl	298c <bt_addr_le_copy>
    4706:	e7c0      	b.n	468a <bt_recv+0x6e6>
	num_reports = net_buf_pull_u8(buf);
    4708:	4628      	mov	r0, r5
    470a:	f012 fb6f 	bl	16dec <net_buf_simple_pull_u8>
    470e:	4b6a      	ldr	r3, [pc, #424]	; (48b8 <bt_recv+0x914>)
		if (scan_dev_found_cb) {
    4710:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 48ec <bt_recv+0x948>
				pointer_index = 0;
    4714:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 48f0 <bt_recv+0x94c>
	num_reports = net_buf_pull_u8(buf);
    4718:	7018      	strb	r0, [r3, #0]
    471a:	9306      	str	r3, [sp, #24]
	while (num_reports--) {
    471c:	9b06      	ldr	r3, [sp, #24]
    471e:	9906      	ldr	r1, [sp, #24]
    4720:	781b      	ldrb	r3, [r3, #0]
    4722:	1e5a      	subs	r2, r3, #1
    4724:	700a      	strb	r2, [r1, #0]
    4726:	2b00      	cmp	r3, #0
    4728:	f43f ac60 	beq.w	3fec <bt_recv+0x48>
		info = (void *)buf->data;
    472c:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    472e:	2118      	movs	r1, #24
    4730:	4628      	mov	r0, r5
    4732:	f012 fb53 	bl	16ddc <net_buf_simple_pull>
		net_buf_pull(buf, 2);   // remove 0x81 0xFF 
    4736:	2102      	movs	r1, #2
    4738:	4628      	mov	r0, r5
    473a:	f012 fb4f 	bl	16ddc <net_buf_simple_pull>
		rssi = info->data[info->length - 2];
    473e:	7df3      	ldrb	r3, [r6, #23]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4740:	46b1      	mov	r9, r6
		rssi = info->data[info->length - 2];
    4742:	4433      	add	r3, r6
    4744:	f893 a016 	ldrb.w	sl, [r3, #22]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    4748:	f819 3f02 	ldrb.w	r3, [r9, #2]!
    474c:	3b02      	subs	r3, #2
    474e:	2b01      	cmp	r3, #1
    4750:	d840      	bhi.n	47d4 <bt_recv+0x830>
			bt_addr_le_copy(&id_addr, &info->addr);
    4752:	4649      	mov	r1, r9
    4754:	a80c      	add	r0, sp, #48	; 0x30
    4756:	f7fe f919 	bl	298c <bt_addr_le_copy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    475a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    475e:	3b02      	subs	r3, #2
    4760:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (scan_dev_found_cb) {
    4764:	f8db 3000 	ldr.w	r3, [fp]
		buf->len = info->length;
    4768:	7df2      	ldrb	r2, [r6, #23]
    476a:	81a2      	strh	r2, [r4, #12]
		if (scan_dev_found_cb) {
    476c:	b323      	cbz	r3, 47b8 <bt_recv+0x814>
			if(info->frag == 0x01){  //First fragment - more packets to come;
    476e:	7873      	ldrb	r3, [r6, #1]
    4770:	2b01      	cmp	r3, #1
    4772:	d13a      	bne.n	47ea <bt_recv+0x846>
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    4774:	4b51      	ldr	r3, [pc, #324]	; (48bc <bt_recv+0x918>)
    4776:	f8b8 0000 	ldrh.w	r0, [r8]
				memcpy(temp_data, buf->b.data , buf->b.len);
    477a:	4f51      	ldr	r7, [pc, #324]	; (48c0 <bt_recv+0x91c>)
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    477c:	68a1      	ldr	r1, [r4, #8]
    477e:	4418      	add	r0, r3
    4780:	f7fb ff42 	bl	608 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    4784:	89a2      	ldrh	r2, [r4, #12]
    4786:	68a1      	ldr	r1, [r4, #8]
    4788:	4638      	mov	r0, r7
    478a:	f7fb ff3d 	bl	608 <memcpy>
				pointer_index += (buf->b.len - 2);
    478e:	f8b8 3000 	ldrh.w	r3, [r8]
    4792:	89a2      	ldrh	r2, [r4, #12]
    4794:	3b02      	subs	r3, #2
    4796:	4413      	add	r3, r2
    4798:	f8a8 3000 	strh.w	r3, [r8]
				if(temp_data[100] == 0xDD){
    479c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    47a0:	2bdd      	cmp	r3, #221	; 0xdd
    47a2:	d102      	bne.n	47aa <bt_recv+0x806>
					printk("DD \n");
    47a4:	4847      	ldr	r0, [pc, #284]	; (48c4 <bt_recv+0x920>)
    47a6:	f7fc ff9b 	bl	16e0 <printk>
				if(temp_data[100] == 0xEE){
    47aa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    47ae:	2bee      	cmp	r3, #238	; 0xee
    47b0:	d102      	bne.n	47b8 <bt_recv+0x814>
					printk("EE \n");
    47b2:	4845      	ldr	r0, [pc, #276]	; (48c8 <bt_recv+0x924>)
    47b4:	f7fc ff94 	bl	16e0 <printk>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    47b8:	2108      	movs	r1, #8
    47ba:	483b      	ldr	r0, [pc, #236]	; (48a8 <bt_recv+0x904>)
		check_pending_conn(&id_addr, &info->addr, info->evt_type);
    47bc:	7836      	ldrb	r6, [r6, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    47be:	f7fe f8f9 	bl	29b4 <atomic_test_bit>
    47c2:	2800      	cmp	r0, #0
    47c4:	d1aa      	bne.n	471c <bt_recv+0x778>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    47c6:	2e01      	cmp	r6, #1
    47c8:	d8a8      	bhi.n	471c <bt_recv+0x778>
    47ca:	4649      	mov	r1, r9
    47cc:	a80c      	add	r0, sp, #48	; 0x30
    47ce:	f7ff f95f 	bl	3a90 <check_pending_conn.part.29>
    47d2:	e7a3      	b.n	471c <bt_recv+0x778>
		keys = bt_keys_find_irk(addr);
    47d4:	4648      	mov	r0, r9
    47d6:	f005 fd97 	bl	a308 <bt_keys_find_irk>
			bt_addr_le_copy(&id_addr, find_id_addr(&info->addr));
    47da:	2800      	cmp	r0, #0
    47dc:	bf14      	ite	ne
    47de:	4601      	movne	r1, r0
    47e0:	4649      	moveq	r1, r9
    47e2:	a80c      	add	r0, sp, #48	; 0x30
    47e4:	f7fe f8d2 	bl	298c <bt_addr_le_copy>
    47e8:	e7bc      	b.n	4764 <bt_recv+0x7c0>
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    47ea:	2b02      	cmp	r3, #2
		rssi = info->data[info->length - 2];
    47ec:	fa4f fa8a 	sxtb.w	sl, sl
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    47f0:	d127      	bne.n	4842 <bt_recv+0x89e>
				memcpy(&copied_data[pointer_index], buf->b.data , buf->b.len);
    47f2:	4b32      	ldr	r3, [pc, #200]	; (48bc <bt_recv+0x918>)
    47f4:	f8b8 0000 	ldrh.w	r0, [r8]
    47f8:	68a1      	ldr	r1, [r4, #8]
    47fa:	4418      	add	r0, r3
    47fc:	f7fb ff04 	bl	608 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    4800:	89a2      	ldrh	r2, [r4, #12]
    4802:	68a1      	ldr	r1, [r4, #8]
    4804:	482e      	ldr	r0, [pc, #184]	; (48c0 <bt_recv+0x91c>)
    4806:	f7fb feff 	bl	608 <memcpy>
				pointer_index += (buf->b.len - 2);
    480a:	f8b8 2000 	ldrh.w	r2, [r8]
    480e:	89a3      	ldrh	r3, [r4, #12]
				buffer_size1 = (buf->b.len - 2);
    4810:	492e      	ldr	r1, [pc, #184]	; (48cc <bt_recv+0x928>)
				pointer_index += (buf->b.len - 2);
    4812:	3a02      	subs	r2, #2
    4814:	441a      	add	r2, r3
				buffer_size1 = (buf->b.len - 2);
    4816:	3b02      	subs	r3, #2
				pointer_index += (buf->b.len - 2);
    4818:	b292      	uxth	r2, r2
				buffer_size1 = (buf->b.len - 2);
    481a:	800b      	strh	r3, [r1, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    481c:	4628      	mov	r0, r5
    481e:	4927      	ldr	r1, [pc, #156]	; (48bc <bt_recv+0x918>)
				pointer_index += (buf->b.len - 2);
    4820:	f8a8 2000 	strh.w	r2, [r8]
				net_buf_add_mem(buf, copied_data, pointer_index);
    4824:	f012 fab2 	bl	16d8c <net_buf_simple_add_mem>
				net_buf_pull(buf, info->length);
    4828:	7df1      	ldrb	r1, [r6, #23]
    482a:	4628      	mov	r0, r5
    482c:	f012 fad6 	bl	16ddc <net_buf_simple_pull>
				scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    4830:	7832      	ldrb	r2, [r6, #0]
    4832:	9400      	str	r4, [sp, #0]
    4834:	f8db 7000 	ldr.w	r7, [fp]
    4838:	462b      	mov	r3, r5
    483a:	4651      	mov	r1, sl
    483c:	a80c      	add	r0, sp, #48	; 0x30
    483e:	47b8      	blx	r7
    4840:	e7ba      	b.n	47b8 <bt_recv+0x814>
			else if(info->frag == 0x03){        // packet received on primary adv channel
    4842:	2b03      	cmp	r3, #3
    4844:	d1b8      	bne.n	47b8 <bt_recv+0x814>
				pointer_index = 0;
    4846:	2100      	movs	r1, #0
				memset(copied_data, 0, 1500);
    4848:	f240 52dc 	movw	r2, #1500	; 0x5dc
    484c:	481b      	ldr	r0, [pc, #108]	; (48bc <bt_recv+0x918>)
				pointer_index = 0;
    484e:	f8a8 1000 	strh.w	r1, [r8]
				memset(copied_data, 0, 1500);
    4852:	f7fb ff05 	bl	660 <memset>
    4856:	e7eb      	b.n	4830 <bt_recv+0x88c>
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    4858:	89a5      	ldrh	r5, [r4, #12]
    485a:	68a0      	ldr	r0, [r4, #8]
    485c:	4629      	mov	r1, r5
    485e:	f7fd ff47 	bl	26f0 <bt_hex>
    4862:	4b0f      	ldr	r3, [pc, #60]	; (48a0 <bt_recv+0x8fc>)
    4864:	9304      	str	r3, [sp, #16]
    4866:	9003      	str	r0, [sp, #12]
    4868:	e88d 0048 	stmia.w	sp, {r3, r6}
    486c:	4a18      	ldr	r2, [pc, #96]	; (48d0 <bt_recv+0x92c>)
    486e:	4b19      	ldr	r3, [pc, #100]	; (48d4 <bt_recv+0x930>)
    4870:	4919      	ldr	r1, [pc, #100]	; (48d8 <bt_recv+0x934>)
    4872:	481a      	ldr	r0, [pc, #104]	; (48dc <bt_recv+0x938>)
    4874:	9502      	str	r5, [sp, #8]
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    4876:	f7fc ff33 	bl	16e0 <printk>
    487a:	f7ff bbb7 	b.w	3fec <bt_recv+0x48>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    487e:	4a08      	ldr	r2, [pc, #32]	; (48a0 <bt_recv+0x8fc>)
    4880:	9202      	str	r2, [sp, #8]
    4882:	e88d 000c 	stmia.w	sp, {r2, r3}
    4886:	4914      	ldr	r1, [pc, #80]	; (48d8 <bt_recv+0x934>)
    4888:	4b15      	ldr	r3, [pc, #84]	; (48e0 <bt_recv+0x93c>)
    488a:	4a16      	ldr	r2, [pc, #88]	; (48e4 <bt_recv+0x940>)
    488c:	4816      	ldr	r0, [pc, #88]	; (48e8 <bt_recv+0x944>)
    488e:	f7fc ff27 	bl	16e0 <printk>
		net_buf_unref(buf);
    4892:	4620      	mov	r0, r4
    4894:	f012 fa42 	bl	16d1c <net_buf_unref>
		return -EINVAL;
    4898:	f06f 0015 	mvn.w	r0, #21
    489c:	f7ff bbc7 	b.w	402e <bt_recv+0x8a>
    48a0:	0001868d 	.word	0x0001868d
    48a4:	00018e09 	.word	0x00018e09
    48a8:	20008688 	.word	0x20008688
    48ac:	20000352 	.word	0x20000352
    48b0:	20000394 	.word	0x20000394
    48b4:	2000034c 	.word	0x2000034c
    48b8:	2000457a 	.word	0x2000457a
    48bc:	2000469c 	.word	0x2000469c
    48c0:	20004580 	.word	0x20004580
    48c4:	00019600 	.word	0x00019600
    48c8:	00019605 	.word	0x00019605
    48cc:	20000338 	.word	0x20000338
    48d0:	00019806 	.word	0x00019806
    48d4:	00018e36 	.word	0x00018e36
    48d8:	00019a8b 	.word	0x00019a8b
    48dc:	0001960a 	.word	0x0001960a
    48e0:	00018eb3 	.word	0x00018eb3
    48e4:	00019a84 	.word	0x00019a84
    48e8:	00019671 	.word	0x00019671
    48ec:	2000039c 	.word	0x2000039c
    48f0:	20000350 	.word	0x20000350
	net_buf_pull(buf, sizeof(*hdr));
    48f4:	f104 0508 	add.w	r5, r4, #8
    48f8:	2102      	movs	r1, #2
    48fa:	4628      	mov	r0, r5
    48fc:	f012 fa6e 	bl	16ddc <net_buf_simple_pull>
	switch (hdr->evt) {
    4900:	7836      	ldrb	r6, [r6, #0]
    4902:	2e08      	cmp	r6, #8
    4904:	f43f abf1 	beq.w	40ea <bt_recv+0x146>
    4908:	d812      	bhi.n	4930 <bt_recv+0x98c>
    490a:	2e05      	cmp	r6, #5
    490c:	f43f abab 	beq.w	4066 <bt_recv+0xc2>
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    4910:	89a5      	ldrh	r5, [r4, #12]
    4912:	68a0      	ldr	r0, [r4, #8]
    4914:	4629      	mov	r1, r5
    4916:	f7fd feeb 	bl	26f0 <bt_hex>
    491a:	4b1c      	ldr	r3, [pc, #112]	; (498c <bt_recv+0x9e8>)
    491c:	9304      	str	r3, [sp, #16]
    491e:	9003      	str	r0, [sp, #12]
    4920:	e88d 0048 	stmia.w	sp, {r3, r6}
    4924:	9502      	str	r5, [sp, #8]
    4926:	4b1a      	ldr	r3, [pc, #104]	; (4990 <bt_recv+0x9ec>)
    4928:	4a1a      	ldr	r2, [pc, #104]	; (4994 <bt_recv+0x9f0>)
    492a:	491b      	ldr	r1, [pc, #108]	; (4998 <bt_recv+0x9f4>)
    492c:	481b      	ldr	r0, [pc, #108]	; (499c <bt_recv+0x9f8>)
    492e:	e7a2      	b.n	4876 <bt_recv+0x8d2>
	switch (hdr->evt) {
    4930:	2e30      	cmp	r6, #48	; 0x30
    4932:	f43f abfd 	beq.w	4130 <bt_recv+0x18c>
    4936:	2e3e      	cmp	r6, #62	; 0x3e
    4938:	d1ea      	bne.n	4910 <bt_recv+0x96c>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    493a:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    493c:	2101      	movs	r1, #1
    493e:	4628      	mov	r0, r5
    4940:	f012 fa4c 	bl	16ddc <net_buf_simple_pull>
	switch (evt->subevent) {
    4944:	7836      	ldrb	r6, [r6, #0]
    4946:	1e73      	subs	r3, r6, #1
    4948:	2b0c      	cmp	r3, #12
    494a:	d885      	bhi.n	4858 <bt_recv+0x8b4>
    494c:	a201      	add	r2, pc, #4	; (adr r2, 4954 <bt_recv+0x9b0>)
    494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4952:	bf00      	nop
    4954:	0000416d 	.word	0x0000416d
    4958:	00004647 	.word	0x00004647
    495c:	0000420d 	.word	0x0000420d
    4960:	0000425f 	.word	0x0000425f
    4964:	0000444d 	.word	0x0000444d
    4968:	0000430f 	.word	0x0000430f
    496c:	000043cd 	.word	0x000043cd
    4970:	000045e9 	.word	0x000045e9
    4974:	00004629 	.word	0x00004629
    4978:	00004209 	.word	0x00004209
    497c:	00004859 	.word	0x00004859
    4980:	000043fd 	.word	0x000043fd
    4984:	00004709 	.word	0x00004709
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    4988:	6f30      	ldr	r0, [r6, #112]	; 0x70
    498a:	e5af      	b.n	44ec <bt_recv+0x548>
    498c:	0001868d 	.word	0x0001868d
    4990:	00018e48 	.word	0x00018e48
    4994:	00019806 	.word	0x00019806
    4998:	00019a8b 	.word	0x00019a8b
    499c:	0001963f 	.word	0x0001963f

000049a0 <bt_recv_prio>:
{
    49a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    49a4:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    49a6:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    49a8:	2b01      	cmp	r3, #1
{
    49aa:	b087      	sub	sp, #28
    49ac:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    49ae:	d00e      	beq.n	49ce <bt_recv_prio+0x2e>
    49b0:	4b65      	ldr	r3, [pc, #404]	; (4b48 <bt_recv_prio+0x1a8>)
    49b2:	9301      	str	r3, [sp, #4]
    49b4:	9300      	str	r3, [sp, #0]
    49b6:	4a65      	ldr	r2, [pc, #404]	; (4b4c <bt_recv_prio+0x1ac>)
    49b8:	4b65      	ldr	r3, [pc, #404]	; (4b50 <bt_recv_prio+0x1b0>)
    49ba:	4966      	ldr	r1, [pc, #408]	; (4b54 <bt_recv_prio+0x1b4>)
    49bc:	4866      	ldr	r0, [pc, #408]	; (4b58 <bt_recv_prio+0x1b8>)
	BT_ASSERT(buf->len >= sizeof(*hdr));
    49be:	f7fc fe8f 	bl	16e0 <printk>
    49c2:	4040      	eors	r0, r0
    49c4:	f380 8811 	msr	BASEPRI, r0
    49c8:	f04f 0004 	mov.w	r0, #4
    49cc:	df02      	svc	2
    49ce:	8982      	ldrh	r2, [r0, #12]
    49d0:	2a01      	cmp	r2, #1
    49d2:	d807      	bhi.n	49e4 <bt_recv_prio+0x44>
    49d4:	4b5c      	ldr	r3, [pc, #368]	; (4b48 <bt_recv_prio+0x1a8>)
    49d6:	9301      	str	r3, [sp, #4]
    49d8:	9300      	str	r3, [sp, #0]
    49da:	4a5c      	ldr	r2, [pc, #368]	; (4b4c <bt_recv_prio+0x1ac>)
    49dc:	4b5c      	ldr	r3, [pc, #368]	; (4b50 <bt_recv_prio+0x1b0>)
    49de:	495d      	ldr	r1, [pc, #372]	; (4b54 <bt_recv_prio+0x1b4>)
    49e0:	485e      	ldr	r0, [pc, #376]	; (4b5c <bt_recv_prio+0x1bc>)
    49e2:	e7ec      	b.n	49be <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    49e4:	7832      	ldrb	r2, [r6, #0]
    49e6:	2a13      	cmp	r2, #19
    49e8:	f200 80a5 	bhi.w	4b36 <bt_recv_prio+0x196>
    49ec:	4093      	lsls	r3, r2
    49ee:	f413 2f0c 	tst.w	r3, #573440	; 0x8c000
    49f2:	f000 80a0 	beq.w	4b36 <bt_recv_prio+0x196>
	net_buf_pull(buf, sizeof(*hdr));
    49f6:	f100 0508 	add.w	r5, r0, #8
    49fa:	2102      	movs	r1, #2
    49fc:	4628      	mov	r0, r5
    49fe:	f012 f9ed 	bl	16ddc <net_buf_simple_pull>
	switch (hdr->evt) {
    4a02:	7833      	ldrb	r3, [r6, #0]
    4a04:	2b0f      	cmp	r3, #15
    4a06:	d01d      	beq.n	4a44 <bt_recv_prio+0xa4>
    4a08:	2b13      	cmp	r3, #19
    4a0a:	d02b      	beq.n	4a64 <bt_recv_prio+0xc4>
    4a0c:	2b0e      	cmp	r3, #14
    4a0e:	f040 8087 	bne.w	4b20 <bt_recv_prio+0x180>
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4a12:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    4a14:	2103      	movs	r1, #3
    4a16:	4628      	mov	r0, r5
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4a18:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4a1c:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4a1e:	f012 f9dd 	bl	16ddc <net_buf_simple_pull>
	status = buf->data[0];
    4a22:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4a24:	4622      	mov	r2, r4
    4a26:	7819      	ldrb	r1, [r3, #0]
    4a28:	4638      	mov	r0, r7
    4a2a:	f7fe f835 	bl	2a98 <hci_cmd_done>
	if (ncmd) {
    4a2e:	b116      	cbz	r6, 4a36 <bt_recv_prio+0x96>
    4a30:	484b      	ldr	r0, [pc, #300]	; (4b60 <bt_recv_prio+0x1c0>)
    4a32:	f012 fe1b 	bl	1766c <_impl_k_sem_give>
	net_buf_unref(buf);
    4a36:	4620      	mov	r0, r4
    4a38:	f012 f970 	bl	16d1c <net_buf_unref>
}
    4a3c:	2000      	movs	r0, #0
    4a3e:	b007      	add	sp, #28
    4a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4a44:	68a6      	ldr	r6, [r4, #8]
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4a46:	f8b6 8002 	ldrh.w	r8, [r6, #2]
	u8_t ncmd = evt->ncmd;
    4a4a:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    4a4c:	2104      	movs	r1, #4
    4a4e:	4628      	mov	r0, r5
    4a50:	f012 f9c4 	bl	16ddc <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4a54:	4622      	mov	r2, r4
    4a56:	7831      	ldrb	r1, [r6, #0]
    4a58:	4640      	mov	r0, r8
    4a5a:	f7fe f81d 	bl	2a98 <hci_cmd_done>
	if (ncmd) {
    4a5e:	2f00      	cmp	r7, #0
    4a60:	d0e9      	beq.n	4a36 <bt_recv_prio+0x96>
    4a62:	e7e5      	b.n	4a30 <bt_recv_prio+0x90>
    4a64:	68a3      	ldr	r3, [r4, #8]
				BT_ERR("packets count mismatch");
    4a66:	4f38      	ldr	r7, [pc, #224]	; (4b48 <bt_recv_prio+0x1a8>)
    4a68:	f8df 9108 	ldr.w	r9, [pc, #264]	; 4b74 <bt_recv_prio+0x1d4>
    4a6c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 4b4c <bt_recv_prio+0x1ac>
    4a70:	9304      	str	r3, [sp, #16]
	for (i = 0; i < evt->num_handles; i++) {
    4a72:	2600      	movs	r6, #0
    4a74:	9b04      	ldr	r3, [sp, #16]
    4a76:	781b      	ldrb	r3, [r3, #0]
    4a78:	429e      	cmp	r6, r3
    4a7a:	dadc      	bge.n	4a36 <bt_recv_prio+0x96>
    4a7c:	9b04      	ldr	r3, [sp, #16]
    4a7e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4a82:	f8b3 2001 	ldrh.w	r2, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4a86:	f8b3 8003 	ldrh.w	r8, [r3, #3]
	__asm__ volatile(
    4a8a:	f04f 0120 	mov.w	r1, #32
    4a8e:	f3ef 8b11 	mrs	fp, BASEPRI
    4a92:	f381 8811 	msr	BASEPRI, r1
		conn = bt_conn_lookup_handle(handle);
    4a96:	4610      	mov	r0, r2
    4a98:	9205      	str	r2, [sp, #20]
    4a9a:	f000 fe61 	bl	5760 <bt_conn_lookup_handle>
		if (!conn) {
    4a9e:	9a05      	ldr	r2, [sp, #20]
    4aa0:	4605      	mov	r5, r0
    4aa2:	b960      	cbnz	r0, 4abe <bt_recv_prio+0x11e>
			BT_ERR("No connection for handle %u", handle);
    4aa4:	9201      	str	r2, [sp, #4]
    4aa6:	9702      	str	r7, [sp, #8]
    4aa8:	9700      	str	r7, [sp, #0]
    4aaa:	464b      	mov	r3, r9
    4aac:	4652      	mov	r2, sl
    4aae:	4929      	ldr	r1, [pc, #164]	; (4b54 <bt_recv_prio+0x1b4>)
    4ab0:	482c      	ldr	r0, [pc, #176]	; (4b64 <bt_recv_prio+0x1c4>)
    4ab2:	f7fc fe15 	bl	16e0 <printk>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4ab6:	f38b 8811 	msr	BASEPRI, fp
	for (i = 0; i < evt->num_handles; i++) {
    4aba:	3601      	adds	r6, #1
    4abc:	e7da      	b.n	4a74 <bt_recv_prio+0xd4>
    4abe:	f38b 8811 	msr	BASEPRI, fp
			k_fifo_put(&conn->tx_notify, node);
    4ac2:	f100 0b1c 	add.w	fp, r0, #28
		while (count--) {
    4ac6:	f1b8 0f00 	cmp.w	r8, #0
    4aca:	d01c      	beq.n	4b06 <bt_recv_prio+0x166>
	__asm__ volatile(
    4acc:	f04f 0220 	mov.w	r2, #32
    4ad0:	f3ef 8e11 	mrs	lr, BASEPRI
    4ad4:	f382 8811 	msr	BASEPRI, r2
    4ad8:	6969      	ldr	r1, [r5, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4ada:	b129      	cbz	r1, 4ae8 <bt_recv_prio+0x148>
	if (list->tail == node) {
    4adc:	69aa      	ldr	r2, [r5, #24]
	list->head = node->next;
    4ade:	6808      	ldr	r0, [r1, #0]
    4ae0:	6168      	str	r0, [r5, #20]
	if (list->tail == node) {
    4ae2:	4291      	cmp	r1, r2
		list->tail = list->head;
    4ae4:	bf08      	it	eq
    4ae6:	61a8      	streq	r0, [r5, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4ae8:	f38e 8811 	msr	BASEPRI, lr
    4aec:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    4af0:	fa1f f883 	uxth.w	r8, r3
			if (!node) {
    4af4:	b959      	cbnz	r1, 4b0e <bt_recv_prio+0x16e>
				BT_ERR("packets count mismatch");
    4af6:	9701      	str	r7, [sp, #4]
    4af8:	9700      	str	r7, [sp, #0]
    4afa:	464b      	mov	r3, r9
    4afc:	4652      	mov	r2, sl
    4afe:	4915      	ldr	r1, [pc, #84]	; (4b54 <bt_recv_prio+0x1b4>)
    4b00:	4819      	ldr	r0, [pc, #100]	; (4b68 <bt_recv_prio+0x1c8>)
    4b02:	f7fc fded 	bl	16e0 <printk>
		bt_conn_unref(conn);
    4b06:	4628      	mov	r0, r5
    4b08:	f000 fe98 	bl	583c <bt_conn_unref>
    4b0c:	e7d5      	b.n	4aba <bt_recv_prio+0x11a>
			k_fifo_put(&conn->tx_notify, node);
    4b0e:	4658      	mov	r0, fp
    4b10:	f012 fb61 	bl	171d6 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4b14:	4628      	mov	r0, r5
    4b16:	f000 fa2d 	bl	4f74 <bt_conn_get_pkts>
    4b1a:	f012 fda7 	bl	1766c <_impl_k_sem_give>
    4b1e:	e7d2      	b.n	4ac6 <bt_recv_prio+0x126>
		net_buf_unref(buf);
    4b20:	4620      	mov	r0, r4
    4b22:	f012 f8fb 	bl	16d1c <net_buf_unref>
		BT_ASSERT(0);
    4b26:	4b08      	ldr	r3, [pc, #32]	; (4b48 <bt_recv_prio+0x1a8>)
    4b28:	9301      	str	r3, [sp, #4]
    4b2a:	9300      	str	r3, [sp, #0]
    4b2c:	4a07      	ldr	r2, [pc, #28]	; (4b4c <bt_recv_prio+0x1ac>)
    4b2e:	4b08      	ldr	r3, [pc, #32]	; (4b50 <bt_recv_prio+0x1b0>)
    4b30:	4908      	ldr	r1, [pc, #32]	; (4b54 <bt_recv_prio+0x1b4>)
    4b32:	480e      	ldr	r0, [pc, #56]	; (4b6c <bt_recv_prio+0x1cc>)
    4b34:	e743      	b.n	49be <bt_recv_prio+0x1e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    4b36:	4b04      	ldr	r3, [pc, #16]	; (4b48 <bt_recv_prio+0x1a8>)
    4b38:	9301      	str	r3, [sp, #4]
    4b3a:	9300      	str	r3, [sp, #0]
    4b3c:	4a03      	ldr	r2, [pc, #12]	; (4b4c <bt_recv_prio+0x1ac>)
    4b3e:	4b04      	ldr	r3, [pc, #16]	; (4b50 <bt_recv_prio+0x1b0>)
    4b40:	4904      	ldr	r1, [pc, #16]	; (4b54 <bt_recv_prio+0x1b4>)
    4b42:	480b      	ldr	r0, [pc, #44]	; (4b70 <bt_recv_prio+0x1d0>)
    4b44:	e73b      	b.n	49be <bt_recv_prio+0x1e>
    4b46:	bf00      	nop
    4b48:	0001868d 	.word	0x0001868d
    4b4c:	00019a84 	.word	0x00019a84
    4b50:	00018ebb 	.word	0x00018ebb
    4b54:	00019a8b 	.word	0x00019a8b
    4b58:	000196d4 	.word	0x000196d4
    4b5c:	00019718 	.word	0x00019718
    4b60:	200086c0 	.word	0x200086c0
    4b64:	00019752 	.word	0x00019752
    4b68:	0001977e 	.word	0x0001977e
    4b6c:	000197a5 	.word	0x000197a5
    4b70:	000197c8 	.word	0x000197c8
    4b74:	00018cec 	.word	0x00018cec

00004b78 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    4b78:	4a08      	ldr	r2, [pc, #32]	; (4b9c <bt_hci_driver_register+0x24>)
    4b7a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    4b7e:	b93b      	cbnz	r3, 4b90 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    4b80:	6881      	ldr	r1, [r0, #8]
    4b82:	b141      	cbz	r1, 4b96 <bt_hci_driver_register+0x1e>
    4b84:	68c1      	ldr	r1, [r0, #12]
    4b86:	b131      	cbz	r1, 4b96 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    4b88:	f8c2 00e4 	str.w	r0, [r2, #228]	; 0xe4
	return 0;
    4b8c:	4618      	mov	r0, r3
    4b8e:	4770      	bx	lr
		return -EALREADY;
    4b90:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4b94:	4770      	bx	lr
		return -EINVAL;
    4b96:	f06f 0015 	mvn.w	r0, #21
}
    4b9a:	4770      	bx	lr
    4b9c:	20008618 	.word	0x20008618

00004ba0 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    4ba0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    4ba2:	4d2a      	ldr	r5, [pc, #168]	; (4c4c <bt_enable+0xac>)
    4ba4:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
{
    4ba8:	b086      	sub	sp, #24
    4baa:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    4bac:	b96b      	cbnz	r3, 4bca <bt_enable+0x2a>
		BT_ERR("No HCI driver registered");
    4bae:	4b28      	ldr	r3, [pc, #160]	; (4c50 <bt_enable+0xb0>)
    4bb0:	9301      	str	r3, [sp, #4]
    4bb2:	9300      	str	r3, [sp, #0]
    4bb4:	4a27      	ldr	r2, [pc, #156]	; (4c54 <bt_enable+0xb4>)
    4bb6:	4b28      	ldr	r3, [pc, #160]	; (4c58 <bt_enable+0xb8>)
    4bb8:	4928      	ldr	r1, [pc, #160]	; (4c5c <bt_enable+0xbc>)
    4bba:	4829      	ldr	r0, [pc, #164]	; (4c60 <bt_enable+0xc0>)
    4bbc:	f7fc fd90 	bl	16e0 <printk>
		return -ENODEV;
    4bc0:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    4bc4:	4620      	mov	r0, r4
    4bc6:	b006      	add	sp, #24
    4bc8:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4bca:	2101      	movs	r1, #1
    4bcc:	f105 0070 	add.w	r0, r5, #112	; 0x70
    4bd0:	f7fd fedf 	bl	2992 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    4bd4:	f010 0001 	ands.w	r0, r0, #1
    4bd8:	d134      	bne.n	4c44 <bt_enable+0xa4>
	ready_cb = cb;
    4bda:	4b22      	ldr	r3, [pc, #136]	; (4c64 <bt_enable+0xc4>)

    4bdc:	4922      	ldr	r1, [pc, #136]	; (4c68 <bt_enable+0xc8>)
    4bde:	601e      	str	r6, [r3, #0]
    4be0:	f06f 0308 	mvn.w	r3, #8
    4be4:	9005      	str	r0, [sp, #20]
    4be6:	9004      	str	r0, [sp, #16]
    4be8:	9303      	str	r3, [sp, #12]
    4bea:	9002      	str	r0, [sp, #8]
    4bec:	9001      	str	r0, [sp, #4]
    4bee:	9000      	str	r0, [sp, #0]
    4bf0:	4b1e      	ldr	r3, [pc, #120]	; (4c6c <bt_enable+0xcc>)
    4bf2:	481f      	ldr	r0, [pc, #124]	; (4c70 <bt_enable+0xd0>)
    4bf4:	f44f 726b 	mov.w	r2, #940	; 0x3ac
    4bf8:	f012 ff74 	bl	17ae4 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    4bfc:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
    4c00:	689b      	ldr	r3, [r3, #8]
    4c02:	4798      	blx	r3
	if (err) {
    4c04:	4604      	mov	r4, r0
    4c06:	b150      	cbz	r0, 4c1e <bt_enable+0x7e>
		BT_ERR("HCI driver open failed (%d)", err);
    4c08:	4b11      	ldr	r3, [pc, #68]	; (4c50 <bt_enable+0xb0>)
    4c0a:	9302      	str	r3, [sp, #8]
    4c0c:	e88d 0018 	stmia.w	sp, {r3, r4}
    4c10:	4a10      	ldr	r2, [pc, #64]	; (4c54 <bt_enable+0xb4>)
    4c12:	4b11      	ldr	r3, [pc, #68]	; (4c58 <bt_enable+0xb8>)
    4c14:	4911      	ldr	r1, [pc, #68]	; (4c5c <bt_enable+0xbc>)
    4c16:	4817      	ldr	r0, [pc, #92]	; (4c74 <bt_enable+0xd4>)
    4c18:	f7fc fd62 	bl	16e0 <printk>
		return err;
    4c1c:	e7d2      	b.n	4bc4 <bt_enable+0x24>
	if (!cb) {
    4c1e:	b926      	cbnz	r6, 4c2a <bt_enable+0x8a>
}
    4c20:	b006      	add	sp, #24
    4c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    4c26:	f7fe bba3 	b.w	3370 <bt_init>
    4c2a:	2101      	movs	r1, #1
    4c2c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    4c30:	f7fd feaf 	bl	2992 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    4c34:	07c3      	lsls	r3, r0, #31
    4c36:	d4c5      	bmi.n	4bc4 <bt_enable+0x24>
		k_queue_append(&work_q->queue, work);
    4c38:	f105 0164 	add.w	r1, r5, #100	; 0x64
    4c3c:	480e      	ldr	r0, [pc, #56]	; (4c78 <bt_enable+0xd8>)
    4c3e:	f012 faca 	bl	171d6 <k_queue_append>
    4c42:	e7bf      	b.n	4bc4 <bt_enable+0x24>
		return -EALREADY;
    4c44:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4c48:	e7bc      	b.n	4bc4 <bt_enable+0x24>
    4c4a:	bf00      	nop
    4c4c:	20008618 	.word	0x20008618
    4c50:	0001868d 	.word	0x0001868d
    4c54:	00019a84 	.word	0x00019a84
    4c58:	00018ec8 	.word	0x00018ec8
    4c5c:	00019a8b 	.word	0x00019a8b
    4c60:	00018ee1 	.word	0x00018ee1
    4c64:	20000398 	.word	0x20000398
    4c68:	200054e8 	.word	0x200054e8
    4c6c:	00003e19 	.word	0x00003e19
    4c70:	200003a0 	.word	0x200003a0
    4c74:	00018f0a 	.word	0x00018f0a
    4c78:	20005470 	.word	0x20005470

00004c7c <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(const bt_addr_le_t *addr)
{
    4c7c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(addr);
    4c7e:	f005 fb77 	bl	a370 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
    4c82:	b118      	cbz	r0, 4c8c <bt_addr_le_is_bonded+0x10>
    4c84:	8980      	ldrh	r0, [r0, #12]
    4c86:	3000      	adds	r0, #0
    4c88:	bf18      	it	ne
    4c8a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
    4c8c:	bd08      	pop	{r3, pc}
	...

00004c90 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    4c90:	b570      	push	{r4, r5, r6, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4c92:	7803      	ldrb	r3, [r0, #0]
    4c94:	2b01      	cmp	r3, #1
{
    4c96:	4605      	mov	r5, r0
    4c98:	460e      	mov	r6, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    4c9a:	d810      	bhi.n	4cbe <bt_le_scan_start+0x2e>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    4c9c:	7843      	ldrb	r3, [r0, #1]
    4c9e:	2b01      	cmp	r3, #1
    4ca0:	d80d      	bhi.n	4cbe <bt_le_scan_start+0x2e>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    4ca2:	8841      	ldrh	r1, [r0, #2]
    4ca4:	1f0b      	subs	r3, r1, #4
    4ca6:	b29b      	uxth	r3, r3
    4ca8:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    4cac:	4283      	cmp	r3, r0
    4cae:	d806      	bhi.n	4cbe <bt_le_scan_start+0x2e>
	if (param->window < 0x0004 || param->window > 0x4000) {
    4cb0:	88aa      	ldrh	r2, [r5, #4]
    4cb2:	1f13      	subs	r3, r2, #4
    4cb4:	b29b      	uxth	r3, r3
    4cb6:	4283      	cmp	r3, r0
    4cb8:	d801      	bhi.n	4cbe <bt_le_scan_start+0x2e>
	if (param->window > param->interval) {
    4cba:	4291      	cmp	r1, r2
    4cbc:	d22b      	bcs.n	4d16 <bt_le_scan_start+0x86>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    4cbe:	f06f 0415 	mvn.w	r4, #21
    4cc2:	e00e      	b.n	4ce2 <bt_le_scan_start+0x52>
	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4cc4:	2107      	movs	r1, #7
    4cc6:	4819      	ldr	r0, [pc, #100]	; (4d2c <bt_le_scan_start+0x9c>)
    4cc8:	f7fd fe74 	bl	29b4 <atomic_test_bit>
    4ccc:	b158      	cbz	r0, 4ce6 <bt_le_scan_start+0x56>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    4cce:	4610      	mov	r0, r2
    4cd0:	f7fe f848 	bl	2d64 <set_le_scan_enable>
		if (err) {
    4cd4:	4604      	mov	r4, r0
    4cd6:	b130      	cbz	r0, 4ce6 <bt_le_scan_start+0x56>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4cd8:	f46f 7180 	mvn.w	r1, #256	; 0x100
    4cdc:	4813      	ldr	r0, [pc, #76]	; (4d2c <bt_le_scan_start+0x9c>)
    4cde:	f7fd fe76 	bl	29ce <atomic_and>
	}

	scan_dev_found_cb = cb;

	return 0;
}
    4ce2:	4620      	mov	r0, r4
    4ce4:	bd70      	pop	{r4, r5, r6, pc}
	if (param->filter_dup) {
    4ce6:	786b      	ldrb	r3, [r5, #1]
    4ce8:	b17b      	cbz	r3, 4d0a <bt_le_scan_start+0x7a>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    4cea:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4cee:	480f      	ldr	r0, [pc, #60]	; (4d2c <bt_le_scan_start+0x9c>)
    4cf0:	f7fd fe4f 	bl	2992 <atomic_or>
	err = start_le_scan(param->type, param->interval, param->window);
    4cf4:	88aa      	ldrh	r2, [r5, #4]
    4cf6:	8869      	ldrh	r1, [r5, #2]
    4cf8:	7828      	ldrb	r0, [r5, #0]
    4cfa:	f7fe fab5 	bl	3268 <start_le_scan>
	if (err) {
    4cfe:	4604      	mov	r4, r0
    4d00:	2800      	cmp	r0, #0
    4d02:	d1e9      	bne.n	4cd8 <bt_le_scan_start+0x48>
	scan_dev_found_cb = cb;
    4d04:	4b0a      	ldr	r3, [pc, #40]	; (4d30 <bt_le_scan_start+0xa0>)
    4d06:	601e      	str	r6, [r3, #0]
	return 0;
    4d08:	e7eb      	b.n	4ce2 <bt_le_scan_start+0x52>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4d0a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    4d0e:	4807      	ldr	r0, [pc, #28]	; (4d2c <bt_le_scan_start+0x9c>)
    4d10:	f7fd fe5d 	bl	29ce <atomic_and>
    4d14:	e7ee      	b.n	4cf4 <bt_le_scan_start+0x64>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    4d16:	f44f 7180 	mov.w	r1, #256	; 0x100
    4d1a:	4804      	ldr	r0, [pc, #16]	; (4d2c <bt_le_scan_start+0x9c>)
    4d1c:	f7fd fe39 	bl	2992 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4d20:	f410 7280 	ands.w	r2, r0, #256	; 0x100
    4d24:	d0ce      	beq.n	4cc4 <bt_le_scan_start+0x34>
		return -EALREADY;
    4d26:	f06f 0444 	mvn.w	r4, #68	; 0x44
    4d2a:	e7da      	b.n	4ce2 <bt_le_scan_start+0x52>
    4d2c:	20008688 	.word	0x20008688
    4d30:	2000039c 	.word	0x2000039c

00004d34 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    4d34:	b508      	push	{r3, lr}
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4d36:	2108      	movs	r1, #8
    4d38:	4806      	ldr	r0, [pc, #24]	; (4d54 <bt_le_scan_stop+0x20>)
    4d3a:	f7fd fe59 	bl	29f0 <atomic_test_and_clear_bit>
    4d3e:	b130      	cbz	r0, 4d4e <bt_le_scan_stop+0x1a>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    4d40:	4b05      	ldr	r3, [pc, #20]	; (4d58 <bt_le_scan_stop+0x24>)
    4d42:	2000      	movs	r0, #0
    4d44:	6018      	str	r0, [r3, #0]

	return bt_le_scan_update(false);
}
    4d46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    4d4a:	f7fe badd 	b.w	3308 <bt_le_scan_update>
}
    4d4e:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4d52:	bd08      	pop	{r3, pc}
    4d54:	20008688 	.word	0x20008688
    4d58:	2000039c 	.word	0x2000039c

00004d5c <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    4d5c:	b538      	push	{r3, r4, r5, lr}
    4d5e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    4d60:	4805      	ldr	r0, [pc, #20]	; (4d78 <bt_buf_get_rx+0x1c>)
    4d62:	f011 ffab 	bl	16cbc <net_buf_alloc_fixed>
#endif

	if (buf) {
    4d66:	4604      	mov	r4, r0
    4d68:	b120      	cbz	r0, 4d74 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4d6a:	2100      	movs	r1, #0
    4d6c:	3008      	adds	r0, #8
    4d6e:	f011 ffc4 	bl	16cfa <net_buf_simple_reserve>
	*(u8_t *)net_buf_user_data(buf) = type;
    4d72:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    4d74:	4620      	mov	r0, r4
    4d76:	bd38      	pop	{r3, r4, r5, pc}
    4d78:	20008b94 	.word	0x20008b94

00004d7c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    4d7c:	b510      	push	{r4, lr}
    4d7e:	4601      	mov	r1, r0
	__asm__ volatile(
    4d80:	f04f 0320 	mov.w	r3, #32
    4d84:	f3ef 8011 	mrs	r0, BASEPRI
    4d88:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    4d8c:	4a0b      	ldr	r2, [pc, #44]	; (4dbc <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    4d8e:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    4d90:	f8d2 40c0 	ldr.w	r4, [r2, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    4d94:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4d98:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    4d9c:	b924      	cbnz	r4, 4da8 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4d9e:	2001      	movs	r0, #1
}
    4da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4da4:	f7ff bfda 	b.w	4d5c <bt_buf_get_rx>
    4da8:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4daa:	f104 0008 	add.w	r0, r4, #8
    4dae:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    4db0:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4db2:	4619      	mov	r1, r3
    4db4:	f011 ffa1 	bl	16cfa <net_buf_simple_reserve>
}
    4db8:	4620      	mov	r0, r4
    4dba:	bd10      	pop	{r4, pc}
    4dbc:	20008618 	.word	0x20008618

00004dc0 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    4dc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    4dc4:	4e27      	ldr	r6, [pc, #156]	; (4e64 <bt_pub_key_gen+0xa4>)
    4dc6:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    4dca:	f003 0306 	and.w	r3, r3, #6
    4dce:	2b06      	cmp	r3, #6
{
    4dd0:	4607      	mov	r7, r0
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    4dd2:	d00e      	beq.n	4df2 <bt_pub_key_gen+0x32>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
    4dd4:	4b24      	ldr	r3, [pc, #144]	; (4e68 <bt_pub_key_gen+0xa8>)
    4dd6:	9301      	str	r3, [sp, #4]
    4dd8:	9300      	str	r3, [sp, #0]
    4dda:	4a24      	ldr	r2, [pc, #144]	; (4e6c <bt_pub_key_gen+0xac>)
    4ddc:	4b24      	ldr	r3, [pc, #144]	; (4e70 <bt_pub_key_gen+0xb0>)
    4dde:	4925      	ldr	r1, [pc, #148]	; (4e74 <bt_pub_key_gen+0xb4>)
    4de0:	4825      	ldr	r0, [pc, #148]	; (4e78 <bt_pub_key_gen+0xb8>)
    4de2:	f7fc fc7d 	bl	16e0 <printk>
		return -ENOTSUP;
    4de6:	f06f 0422 	mvn.w	r4, #34	; 0x22
			cb->func(NULL);
		}
	}

	return 0;
}
    4dea:	4620      	mov	r0, r4
    4dec:	b002      	add	sp, #8
    4dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	new_cb->_next = pub_key_cb;
    4df2:	4d22      	ldr	r5, [pc, #136]	; (4e7c <bt_pub_key_gen+0xbc>)
    4df4:	682b      	ldr	r3, [r5, #0]
    4df6:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    4df8:	6028      	str	r0, [r5, #0]
    4dfa:	2110      	movs	r1, #16
    4dfc:	f106 0070 	add.w	r0, r6, #112	; 0x70
    4e00:	f7fd fdc7 	bl	2992 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4e04:	f010 0810 	ands.w	r8, r0, #16
    4e08:	d001      	beq.n	4e0e <bt_pub_key_gen+0x4e>
		return 0;
    4e0a:	2400      	movs	r4, #0
    4e0c:	e7ed      	b.n	4dea <bt_pub_key_gen+0x2a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4e0e:	f06f 0108 	mvn.w	r1, #8
    4e12:	f106 0070 	add.w	r0, r6, #112	; 0x70
    4e16:	f7fd fdda 	bl	29ce <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    4e1a:	4642      	mov	r2, r8
    4e1c:	4641      	mov	r1, r8
    4e1e:	f242 0025 	movw	r0, #8229	; 0x2025
    4e22:	f7fd fedd 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    4e26:	4604      	mov	r4, r0
    4e28:	b188      	cbz	r0, 4e4e <bt_pub_key_gen+0x8e>
		BT_ERR("Sending LE P256 Public Key command failed");
    4e2a:	4b0f      	ldr	r3, [pc, #60]	; (4e68 <bt_pub_key_gen+0xa8>)
    4e2c:	9301      	str	r3, [sp, #4]
    4e2e:	9300      	str	r3, [sp, #0]
    4e30:	4a13      	ldr	r2, [pc, #76]	; (4e80 <bt_pub_key_gen+0xc0>)
    4e32:	4b0f      	ldr	r3, [pc, #60]	; (4e70 <bt_pub_key_gen+0xb0>)
    4e34:	490f      	ldr	r1, [pc, #60]	; (4e74 <bt_pub_key_gen+0xb4>)
    4e36:	4813      	ldr	r0, [pc, #76]	; (4e84 <bt_pub_key_gen+0xc4>)
    4e38:	f7fc fc52 	bl	16e0 <printk>
    4e3c:	f06f 0110 	mvn.w	r1, #16
    4e40:	f106 0070 	add.w	r0, r6, #112	; 0x70
    4e44:	f7fd fdc3 	bl	29ce <atomic_and>
		pub_key_cb = NULL;
    4e48:	f8c5 8000 	str.w	r8, [r5]
		return err;
    4e4c:	e7cd      	b.n	4dea <bt_pub_key_gen+0x2a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4e4e:	682c      	ldr	r4, [r5, #0]
    4e50:	2c00      	cmp	r4, #0
    4e52:	d0da      	beq.n	4e0a <bt_pub_key_gen+0x4a>
		if (cb != new_cb) {
    4e54:	42bc      	cmp	r4, r7
    4e56:	d002      	beq.n	4e5e <bt_pub_key_gen+0x9e>
			cb->func(NULL);
    4e58:	6823      	ldr	r3, [r4, #0]
    4e5a:	2000      	movs	r0, #0
    4e5c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    4e5e:	6864      	ldr	r4, [r4, #4]
    4e60:	e7f6      	b.n	4e50 <bt_pub_key_gen+0x90>
    4e62:	bf00      	nop
    4e64:	20008618 	.word	0x20008618
    4e68:	0001868d 	.word	0x0001868d
    4e6c:	00019806 	.word	0x00019806
    4e70:	00018ed2 	.word	0x00018ed2
    4e74:	00019a8b 	.word	0x00019a8b
    4e78:	000194a0 	.word	0x000194a0
    4e7c:	20000394 	.word	0x20000394
    4e80:	00019a84 	.word	0x00019a84
    4e84:	000194cf 	.word	0x000194cf

00004e88 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    4e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4e8a:	4c1a      	ldr	r4, [pc, #104]	; (4ef4 <bt_dh_key_gen+0x6c>)
    4e8c:	6823      	ldr	r3, [r4, #0]
{
    4e8e:	4607      	mov	r7, r0
    4e90:	460a      	mov	r2, r1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4e92:	b113      	cbz	r3, 4e9a <bt_dh_key_gen+0x12>
		return -EBUSY;
    4e94:	f06f 000f 	mvn.w	r0, #15
    4e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    4e9a:	2104      	movs	r1, #4
    4e9c:	4816      	ldr	r0, [pc, #88]	; (4ef8 <bt_dh_key_gen+0x70>)
    4e9e:	f7fd fd89 	bl	29b4 <atomic_test_bit>
    4ea2:	4606      	mov	r6, r0
    4ea4:	2800      	cmp	r0, #0
    4ea6:	d1f5      	bne.n	4e94 <bt_dh_key_gen+0xc>
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    4ea8:	2103      	movs	r1, #3
    4eaa:	4813      	ldr	r0, [pc, #76]	; (4ef8 <bt_dh_key_gen+0x70>)
    4eac:	f7fd fd82 	bl	29b4 <atomic_test_bit>
    4eb0:	b1e0      	cbz	r0, 4eec <bt_dh_key_gen+0x64>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    4eb2:	2140      	movs	r1, #64	; 0x40
    4eb4:	f242 0026 	movw	r0, #8230	; 0x2026
	dh_key_cb = cb;
    4eb8:	6022      	str	r2, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    4eba:	f7fd fe61 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    4ebe:	4605      	mov	r5, r0
    4ec0:	b918      	cbnz	r0, 4eca <bt_dh_key_gen+0x42>
		dh_key_cb = NULL;
    4ec2:	6020      	str	r0, [r4, #0]
		return -ENOBUFS;
    4ec4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    4ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	cp = net_buf_add(buf, sizeof(*cp));
    4eca:	2140      	movs	r1, #64	; 0x40
    4ecc:	3008      	adds	r0, #8
    4ece:	f011 ff57 	bl	16d80 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    4ed2:	2240      	movs	r2, #64	; 0x40
    4ed4:	4639      	mov	r1, r7
    4ed6:	f7fb fb97 	bl	608 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    4eda:	4632      	mov	r2, r6
    4edc:	4629      	mov	r1, r5
    4ede:	f242 0026 	movw	r0, #8230	; 0x2026
    4ee2:	f7fd fe7d 	bl	2be0 <bt_hci_cmd_send_sync>
	if (err) {
    4ee6:	b118      	cbz	r0, 4ef0 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
    4ee8:	6026      	str	r6, [r4, #0]
		return err;
    4eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EADDRNOTAVAIL;
    4eec:	f06f 0030 	mvn.w	r0, #48	; 0x30
	}

	return 0;
}
    4ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ef2:	bf00      	nop
    4ef4:	2000034c 	.word	0x2000034c
    4ef8:	20008688 	.word	0x20008688

00004efc <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    4efc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    4efe:	4b06      	ldr	r3, [pc, #24]	; (4f18 <notify_connected+0x1c>)
    4f00:	681c      	ldr	r4, [r3, #0]
{
    4f02:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4f04:	b904      	cbnz	r4, 4f08 <notify_connected+0xc>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
    4f06:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->connected) {
    4f08:	6823      	ldr	r3, [r4, #0]
    4f0a:	b113      	cbz	r3, 4f12 <notify_connected+0x16>
			cb->connected(conn, conn->err);
    4f0c:	7ae9      	ldrb	r1, [r5, #11]
    4f0e:	4628      	mov	r0, r5
    4f10:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    4f12:	69a4      	ldr	r4, [r4, #24]
    4f14:	e7f6      	b.n	4f04 <notify_connected+0x8>
    4f16:	bf00      	nop
    4f18:	20000408 	.word	0x20000408

00004f1c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4f1c:	f3bf 8f5b 	dmb	ish
    4f20:	6800      	ldr	r0, [r0, #0]
    4f22:	f3bf 8f5b 	dmb	ish
}
    4f26:	4770      	bx	lr

00004f28 <bt_conn_reset_rx_state>:
	callback_list = cb;
}

static void bt_conn_reset_rx_state(struct bt_conn *conn)
{
	if (!conn->rx_len) {
    4f28:	89c3      	ldrh	r3, [r0, #14]
{
    4f2a:	b510      	push	{r4, lr}
    4f2c:	4604      	mov	r4, r0
	if (!conn->rx_len) {
    4f2e:	b12b      	cbz	r3, 4f3c <bt_conn_reset_rx_state+0x14>
		return;
	}

	net_buf_unref(conn->rx);
    4f30:	6900      	ldr	r0, [r0, #16]
    4f32:	f011 fef3 	bl	16d1c <net_buf_unref>
	conn->rx = NULL;
    4f36:	2300      	movs	r3, #0
    4f38:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    4f3a:	81e3      	strh	r3, [r4, #14]
    4f3c:	bd10      	pop	{r4, pc}

00004f3e <atomic_dec>:
}
    4f3e:	f3bf 8f5b 	dmb	ish
    4f42:	e850 3f00 	ldrex	r3, [r0]
    4f46:	1e5a      	subs	r2, r3, #1
    4f48:	e840 2100 	strex	r1, r2, [r0]
    4f4c:	2900      	cmp	r1, #0
    4f4e:	d1f8      	bne.n	4f42 <atomic_dec+0x4>
    4f50:	f3bf 8f5b 	dmb	ish
    4f54:	4618      	mov	r0, r3
    4f56:	4770      	bx	lr

00004f58 <atomic_inc>:
}
    4f58:	f3bf 8f5b 	dmb	ish
    4f5c:	e850 3f00 	ldrex	r3, [r0]
    4f60:	1c5a      	adds	r2, r3, #1
    4f62:	e840 2100 	strex	r1, r2, [r0]
    4f66:	2900      	cmp	r1, #0
    4f68:	d1f8      	bne.n	4f5c <atomic_inc+0x4>
    4f6a:	f3bf 8f5b 	dmb	ish
    4f6e:	4618      	mov	r0, r3
    4f70:	4770      	bx	lr
	...

00004f74 <bt_conn_get_pkts>:
}
    4f74:	4800      	ldr	r0, [pc, #0]	; (4f78 <bt_conn_get_pkts+0x4>)
    4f76:	4770      	bx	lr
    4f78:	200086a4 	.word	0x200086a4

00004f7c <notify_le_param_updated>:
	for (cb = callback_list; cb; cb = cb->_next) {
    4f7c:	4b08      	ldr	r3, [pc, #32]	; (4fa0 <notify_le_param_updated+0x24>)
{
    4f7e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    4f80:	681c      	ldr	r4, [r3, #0]
{
    4f82:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    4f84:	b904      	cbnz	r4, 4f88 <notify_le_param_updated+0xc>
}
    4f86:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    4f88:	68e6      	ldr	r6, [r4, #12]
    4f8a:	b13e      	cbz	r6, 4f9c <notify_le_param_updated+0x20>
			cb->le_param_updated(conn, conn->le.interval,
    4f8c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    4f90:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    4f94:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    4f98:	4628      	mov	r0, r5
    4f9a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    4f9c:	69a4      	ldr	r4, [r4, #24]
    4f9e:	e7f1      	b.n	4f84 <notify_le_param_updated+0x8>
    4fa0:	20000408 	.word	0x20000408

00004fa4 <le_param_req>:
{
    4fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fa6:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    4fa8:	4608      	mov	r0, r1
{
    4faa:	460e      	mov	r6, r1
	if (!bt_le_conn_params_valid(param)) {
    4fac:	f7fd ff38 	bl	2e20 <bt_le_conn_params_valid>
    4fb0:	4605      	mov	r5, r0
    4fb2:	b910      	cbnz	r0, 4fba <le_param_req+0x16>
		return false;
    4fb4:	2500      	movs	r5, #0
}
    4fb6:	4628      	mov	r0, r5
    4fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    4fba:	4b09      	ldr	r3, [pc, #36]	; (4fe0 <le_param_req+0x3c>)
    4fbc:	681c      	ldr	r4, [r3, #0]
    4fbe:	2c00      	cmp	r4, #0
    4fc0:	d0f9      	beq.n	4fb6 <le_param_req+0x12>
		if (!cb->le_param_req) {
    4fc2:	68a3      	ldr	r3, [r4, #8]
    4fc4:	b90b      	cbnz	r3, 4fca <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    4fc6:	69a4      	ldr	r4, [r4, #24]
    4fc8:	e7f9      	b.n	4fbe <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    4fca:	4631      	mov	r1, r6
    4fcc:	4638      	mov	r0, r7
    4fce:	4798      	blx	r3
    4fd0:	2800      	cmp	r0, #0
    4fd2:	d0ef      	beq.n	4fb4 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    4fd4:	4630      	mov	r0, r6
    4fd6:	f7fd ff23 	bl	2e20 <bt_le_conn_params_valid>
    4fda:	2800      	cmp	r0, #0
    4fdc:	d1f3      	bne.n	4fc6 <le_param_req+0x22>
    4fde:	e7e9      	b.n	4fb4 <le_param_req+0x10>
    4fe0:	20000408 	.word	0x20000408

00004fe4 <bt_conn_identity_resolved>:
{
    4fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4fe6:	78c3      	ldrb	r3, [r0, #3]
{
    4fe8:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    4fea:	b93b      	cbnz	r3, 4ffc <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    4fec:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    4ff0:	4b08      	ldr	r3, [pc, #32]	; (5014 <bt_conn_identity_resolved+0x30>)
    4ff2:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    4ff4:	f104 0748 	add.w	r7, r4, #72	; 0x48
	for (cb = callback_list; cb; cb = cb->_next) {
    4ff8:	b91d      	cbnz	r5, 5002 <bt_conn_identity_resolved+0x1e>
}
    4ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    4ffc:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    5000:	e7f6      	b.n	4ff0 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    5002:	692b      	ldr	r3, [r5, #16]
    5004:	b11b      	cbz	r3, 500e <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    5006:	463a      	mov	r2, r7
    5008:	4631      	mov	r1, r6
    500a:	4620      	mov	r0, r4
    500c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    500e:	69ad      	ldr	r5, [r5, #24]
    5010:	e7f2      	b.n	4ff8 <bt_conn_identity_resolved+0x14>
    5012:	bf00      	nop
    5014:	20000408 	.word	0x20000408

00005018 <bt_conn_le_start_encryption>:
{
    5018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    501c:	211c      	movs	r1, #28
{
    501e:	4682      	mov	sl, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5020:	f242 0019 	movw	r0, #8217	; 0x2019
{
    5024:	4691      	mov	r9, r2
    5026:	4698      	mov	r8, r3
    5028:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    502c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    502e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    5030:	f7fd fda6 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    5034:	4606      	mov	r6, r0
    5036:	b320      	cbz	r0, 5082 <bt_conn_le_start_encryption+0x6a>
	cp = net_buf_add(buf, sizeof(*cp));
    5038:	211c      	movs	r1, #28
    503a:	3008      	adds	r0, #8
    503c:	f011 fea0 	bl	16d80 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5040:	4603      	mov	r3, r0
    5042:	f8ba 2000 	ldrh.w	r2, [sl]
    5046:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    504a:	f8c0 9002 	str.w	r9, [r0, #2]
    504e:	f8c3 8004 	str.w	r8, [r3, #4]
	cp->ediv = ediv;
    5052:	8144      	strh	r4, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    5054:	f100 040c 	add.w	r4, r0, #12
    5058:	462a      	mov	r2, r5
    505a:	4639      	mov	r1, r7
    505c:	4620      	mov	r0, r4
    505e:	f7fb fad3 	bl	608 <memcpy>
	if (len < sizeof(cp->ltk)) {
    5062:	2d0f      	cmp	r5, #15
    5064:	d805      	bhi.n	5072 <bt_conn_le_start_encryption+0x5a>
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    5066:	f1c5 0210 	rsb	r2, r5, #16
    506a:	2100      	movs	r1, #0
    506c:	1960      	adds	r0, r4, r5
    506e:	f7fb faf7 	bl	660 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    5072:	4631      	mov	r1, r6
    5074:	2200      	movs	r2, #0
    5076:	f242 0019 	movw	r0, #8217	; 0x2019
}
    507a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    507e:	f7fd bdaf 	b.w	2be0 <bt_hci_cmd_send_sync>
}
    5082:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000508c <bt_conn_security_changed>:
{
    508c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    508e:	4b06      	ldr	r3, [pc, #24]	; (50a8 <bt_conn_security_changed+0x1c>)
    5090:	681c      	ldr	r4, [r3, #0]
{
    5092:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    5094:	b904      	cbnz	r4, 5098 <bt_conn_security_changed+0xc>
}
    5096:	bd38      	pop	{r3, r4, r5, pc}
		if (cb->security_changed) {
    5098:	6963      	ldr	r3, [r4, #20]
    509a:	b113      	cbz	r3, 50a2 <bt_conn_security_changed+0x16>
			cb->security_changed(conn, conn->sec_level);
    509c:	7a29      	ldrb	r1, [r5, #8]
    509e:	4628      	mov	r0, r5
    50a0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    50a2:	69a4      	ldr	r4, [r4, #24]
    50a4:	e7f6      	b.n	5094 <bt_conn_security_changed+0x8>
    50a6:	bf00      	nop
    50a8:	20000408 	.word	0x20000408

000050ac <bt_conn_security>:
{
    50ac:	b530      	push	{r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    50ae:	7b03      	ldrb	r3, [r0, #12]
    50b0:	2b03      	cmp	r3, #3
{
    50b2:	b085      	sub	sp, #20
    50b4:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    50b6:	d152      	bne.n	515e <bt_conn_security+0xb2>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    50b8:	7a03      	ldrb	r3, [r0, #8]
    50ba:	428b      	cmp	r3, r1
    50bc:	d302      	bcc.n	50c4 <bt_conn_security+0x18>
		return 0;
    50be:	2000      	movs	r0, #0
}
    50c0:	b005      	add	sp, #20
    50c2:	bd30      	pop	{r4, r5, pc}
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    50c4:	7a43      	ldrb	r3, [r0, #9]
    50c6:	428b      	cmp	r3, r1
    50c8:	d2f9      	bcs.n	50be <bt_conn_security+0x12>
	switch (conn->role) {
    50ca:	78c3      	ldrb	r3, [r0, #3]
	conn->required_sec_level = sec;
    50cc:	7241      	strb	r1, [r0, #9]
	switch (conn->role) {
    50ce:	2b00      	cmp	r3, #0
    50d0:	d142      	bne.n	5158 <bt_conn_security+0xac>
		if (!conn->le.keys) {
    50d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
    50d4:	2b00      	cmp	r3, #0
    50d6:	d145      	bne.n	5164 <bt_conn_security+0xb8>
						     &conn->le.dst);
    50d8:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    50dc:	4629      	mov	r1, r5
    50de:	2020      	movs	r0, #32
    50e0:	f005 f8f4 	bl	a2cc <bt_keys_find>
    50e4:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    50e6:	2800      	cmp	r0, #0
    50e8:	d13c      	bne.n	5164 <bt_conn_security+0xb8>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    50ea:	4629      	mov	r1, r5
    50ec:	2004      	movs	r0, #4
    50ee:	f005 f8ed 	bl	a2cc <bt_keys_find>
    50f2:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys ||
    50f4:	b118      	cbz	r0, 50fe <bt_conn_security+0x52>
    50f6:	8983      	ldrh	r3, [r0, #12]
    50f8:	f003 0324 	and.w	r3, r3, #36	; 0x24
    50fc:	b93b      	cbnz	r3, 510e <bt_conn_security+0x62>
			return bt_smp_send_pairing_req(conn);
    50fe:	4620      	mov	r0, r4
    5100:	f004 fed6 	bl	9eb0 <bt_smp_send_pairing_req>
	if (err) {
    5104:	2800      	cmp	r0, #0
    5106:	d0da      	beq.n	50be <bt_conn_security+0x12>
		conn->required_sec_level = conn->sec_level;
    5108:	7a23      	ldrb	r3, [r4, #8]
    510a:	7263      	strb	r3, [r4, #9]
    510c:	e7d8      	b.n	50c0 <bt_conn_security+0x14>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    510e:	7a63      	ldrb	r3, [r4, #9]
    5110:	2b02      	cmp	r3, #2
    5112:	d904      	bls.n	511e <bt_conn_security+0x72>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5114:	3008      	adds	r0, #8
    5116:	f7ff ff01 	bl	4f1c <atomic_get>
    511a:	07c1      	lsls	r1, r0, #31
    511c:	d5ef      	bpl.n	50fe <bt_conn_security+0x52>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    511e:	7a63      	ldrb	r3, [r4, #9]
    5120:	2b03      	cmp	r3, #3
    5122:	d909      	bls.n	5138 <bt_conn_security+0x8c>
		    !atomic_test_bit(conn->le.keys->flags,
    5124:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5126:	3008      	adds	r0, #8
    5128:	f7ff fef8 	bl	4f1c <atomic_get>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    512c:	07c2      	lsls	r2, r0, #31
    512e:	d403      	bmi.n	5138 <bt_conn_security+0x8c>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    5130:	6f23      	ldr	r3, [r4, #112]	; 0x70
				     BT_KEYS_AUTHENTICATED) &&
    5132:	899b      	ldrh	r3, [r3, #12]
    5134:	069b      	lsls	r3, r3, #26
    5136:	d5e2      	bpl.n	50fe <bt_conn_security+0x52>
						   conn->le.keys->ltk.rand,
    5138:	6f23      	ldr	r3, [r4, #112]	; 0x70
		return bt_conn_le_start_encryption(conn,
    513a:	79da      	ldrb	r2, [r3, #7]
    513c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    5140:	9202      	str	r2, [sp, #8]
						   conn->le.keys->ltk.val,
    5142:	f103 021a 	add.w	r2, r3, #26
		return bt_conn_le_start_encryption(conn,
    5146:	9201      	str	r2, [sp, #4]
    5148:	8b1b      	ldrh	r3, [r3, #24]
    514a:	9300      	str	r3, [sp, #0]
    514c:	4602      	mov	r2, r0
    514e:	460b      	mov	r3, r1
    5150:	4620      	mov	r0, r4
    5152:	f7ff ff61 	bl	5018 <bt_conn_le_start_encryption>
    5156:	e7d5      	b.n	5104 <bt_conn_security+0x58>
		return -EINVAL;
    5158:	f06f 0015 	mvn.w	r0, #21
    515c:	e7d4      	b.n	5108 <bt_conn_security+0x5c>
		return -ENOTCONN;
    515e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5162:	e7ad      	b.n	50c0 <bt_conn_security+0x14>
		if (!conn->le.keys ||
    5164:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5166:	e7c6      	b.n	50f6 <bt_conn_security+0x4a>

00005168 <bt_conn_cb_register>:
	cb->_next = callback_list;
    5168:	4b02      	ldr	r3, [pc, #8]	; (5174 <bt_conn_cb_register+0xc>)
    516a:	681a      	ldr	r2, [r3, #0]
    516c:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    516e:	6018      	str	r0, [r3, #0]
    5170:	4770      	bx	lr
    5172:	bf00      	nop
    5174:	20000408 	.word	0x20000408

00005178 <bt_conn_recv>:
	u16_t len;

	BT_DBG("handle %u len %u flags %02x", conn->handle, buf->len, flags);

	/* Check packet boundary flags */
	switch (flags) {
    5178:	2a01      	cmp	r2, #1
{
    517a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    517c:	4604      	mov	r4, r0
    517e:	460d      	mov	r5, r1
	switch (flags) {
    5180:	d01b      	beq.n	51ba <bt_conn_recv+0x42>
    5182:	2a02      	cmp	r2, #2
    5184:	d16b      	bne.n	525e <bt_conn_recv+0xe6>
	case BT_ACL_START:
		hdr = (void *)buf->data;
		len = sys_le16_to_cpu(hdr->len);
    5186:	688b      	ldr	r3, [r1, #8]
    5188:	881e      	ldrh	r6, [r3, #0]

		BT_DBG("First, len %u final %u", buf->len, len);

		if (conn->rx_len) {
    518a:	89c3      	ldrh	r3, [r0, #14]
    518c:	b15b      	cbz	r3, 51a6 <bt_conn_recv+0x2e>
			BT_ERR("Unexpected first L2CAP frame");
    518e:	4b3d      	ldr	r3, [pc, #244]	; (5284 <bt_conn_recv+0x10c>)
    5190:	9301      	str	r3, [sp, #4]
    5192:	9300      	str	r3, [sp, #0]
    5194:	4a3c      	ldr	r2, [pc, #240]	; (5288 <bt_conn_recv+0x110>)
    5196:	4b3d      	ldr	r3, [pc, #244]	; (528c <bt_conn_recv+0x114>)
    5198:	493d      	ldr	r1, [pc, #244]	; (5290 <bt_conn_recv+0x118>)
    519a:	483e      	ldr	r0, [pc, #248]	; (5294 <bt_conn_recv+0x11c>)
    519c:	f7fc faa0 	bl	16e0 <printk>
			bt_conn_reset_rx_state(conn);
    51a0:	4620      	mov	r0, r4
    51a2:	f7ff fec1 	bl	4f28 <bt_conn_reset_rx_state>
		}

		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    51a6:	89ab      	ldrh	r3, [r5, #12]
    51a8:	1af3      	subs	r3, r6, r3
    51aa:	3304      	adds	r3, #4
    51ac:	b29b      	uxth	r3, r3
    51ae:	81e3      	strh	r3, [r4, #14]
		BT_DBG("rx_len %u", conn->rx_len);
		if (conn->rx_len) {
    51b0:	2b00      	cmp	r3, #0
    51b2:	d042      	beq.n	523a <bt_conn_recv+0xc2>
			conn->rx = buf;
    51b4:	6125      	str	r5, [r4, #16]
	}

	BT_DBG("Successfully parsed %u byte L2CAP packet", buf->len);

	bt_l2cap_recv(conn, buf);
}
    51b6:	b004      	add	sp, #16
    51b8:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    51ba:	89c3      	ldrh	r3, [r0, #14]
    51bc:	b98b      	cbnz	r3, 51e2 <bt_conn_recv+0x6a>
			BT_ERR("Unexpected L2CAP continuation");
    51be:	4b31      	ldr	r3, [pc, #196]	; (5284 <bt_conn_recv+0x10c>)
    51c0:	9301      	str	r3, [sp, #4]
    51c2:	9300      	str	r3, [sp, #0]
    51c4:	4a30      	ldr	r2, [pc, #192]	; (5288 <bt_conn_recv+0x110>)
    51c6:	4b31      	ldr	r3, [pc, #196]	; (528c <bt_conn_recv+0x114>)
    51c8:	4931      	ldr	r1, [pc, #196]	; (5290 <bt_conn_recv+0x118>)
    51ca:	4833      	ldr	r0, [pc, #204]	; (5298 <bt_conn_recv+0x120>)
			BT_ERR("L2CAP data overflow");
    51cc:	f7fc fa88 	bl	16e0 <printk>
			bt_conn_reset_rx_state(conn);
    51d0:	4620      	mov	r0, r4
    51d2:	f7ff fea9 	bl	4f28 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    51d6:	4628      	mov	r0, r5
}
    51d8:	b004      	add	sp, #16
    51da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    51de:	f011 bd9d 	b.w	16d1c <net_buf_unref>
		if (buf->len > conn->rx_len) {
    51e2:	898e      	ldrh	r6, [r1, #12]
    51e4:	42b3      	cmp	r3, r6
    51e6:	d207      	bcs.n	51f8 <bt_conn_recv+0x80>
			BT_ERR("L2CAP data overflow");
    51e8:	4b26      	ldr	r3, [pc, #152]	; (5284 <bt_conn_recv+0x10c>)
    51ea:	9301      	str	r3, [sp, #4]
    51ec:	9300      	str	r3, [sp, #0]
    51ee:	4a26      	ldr	r2, [pc, #152]	; (5288 <bt_conn_recv+0x110>)
    51f0:	4b26      	ldr	r3, [pc, #152]	; (528c <bt_conn_recv+0x114>)
    51f2:	4927      	ldr	r1, [pc, #156]	; (5290 <bt_conn_recv+0x118>)
    51f4:	4829      	ldr	r0, [pc, #164]	; (529c <bt_conn_recv+0x124>)
    51f6:	e7e9      	b.n	51cc <bt_conn_recv+0x54>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    51f8:	6900      	ldr	r0, [r0, #16]
    51fa:	3008      	adds	r0, #8
    51fc:	f011 fe0a 	bl	16e14 <net_buf_simple_tailroom>
    5200:	4286      	cmp	r6, r0
    5202:	d907      	bls.n	5214 <bt_conn_recv+0x9c>
			BT_ERR("Not enough buffer space for L2CAP data");
    5204:	4b1f      	ldr	r3, [pc, #124]	; (5284 <bt_conn_recv+0x10c>)
    5206:	9301      	str	r3, [sp, #4]
    5208:	9300      	str	r3, [sp, #0]
    520a:	4a1f      	ldr	r2, [pc, #124]	; (5288 <bt_conn_recv+0x110>)
    520c:	4b1f      	ldr	r3, [pc, #124]	; (528c <bt_conn_recv+0x114>)
    520e:	4920      	ldr	r1, [pc, #128]	; (5290 <bt_conn_recv+0x118>)
    5210:	4823      	ldr	r0, [pc, #140]	; (52a0 <bt_conn_recv+0x128>)
    5212:	e7db      	b.n	51cc <bt_conn_recv+0x54>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    5214:	6920      	ldr	r0, [r4, #16]
    5216:	89aa      	ldrh	r2, [r5, #12]
    5218:	68a9      	ldr	r1, [r5, #8]
    521a:	3008      	adds	r0, #8
    521c:	f011 fdb6 	bl	16d8c <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    5220:	89e3      	ldrh	r3, [r4, #14]
    5222:	89aa      	ldrh	r2, [r5, #12]
    5224:	1a9b      	subs	r3, r3, r2
    5226:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    5228:	4628      	mov	r0, r5
    522a:	f011 fd77 	bl	16d1c <net_buf_unref>
		if (conn->rx_len) {
    522e:	89e3      	ldrh	r3, [r4, #14]
    5230:	2b00      	cmp	r3, #0
    5232:	d1c0      	bne.n	51b6 <bt_conn_recv+0x3e>
		buf = conn->rx;
    5234:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0;
    5236:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    5238:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    523a:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    523c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    523e:	881a      	ldrh	r2, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    5240:	1d13      	adds	r3, r2, #4
    5242:	428b      	cmp	r3, r1
    5244:	d016      	beq.n	5274 <bt_conn_recv+0xfc>
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    5246:	4b0f      	ldr	r3, [pc, #60]	; (5284 <bt_conn_recv+0x10c>)
    5248:	9303      	str	r3, [sp, #12]
    524a:	9102      	str	r1, [sp, #8]
    524c:	9201      	str	r2, [sp, #4]
    524e:	9300      	str	r3, [sp, #0]
    5250:	4a0d      	ldr	r2, [pc, #52]	; (5288 <bt_conn_recv+0x110>)
    5252:	4b0e      	ldr	r3, [pc, #56]	; (528c <bt_conn_recv+0x114>)
    5254:	490e      	ldr	r1, [pc, #56]	; (5290 <bt_conn_recv+0x118>)
    5256:	4813      	ldr	r0, [pc, #76]	; (52a4 <bt_conn_recv+0x12c>)
    5258:	f7fc fa42 	bl	16e0 <printk>
    525c:	e7bb      	b.n	51d6 <bt_conn_recv+0x5e>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    525e:	4b09      	ldr	r3, [pc, #36]	; (5284 <bt_conn_recv+0x10c>)
    5260:	9302      	str	r3, [sp, #8]
	switch (flags) {
    5262:	9201      	str	r2, [sp, #4]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    5264:	9300      	str	r3, [sp, #0]
    5266:	4a08      	ldr	r2, [pc, #32]	; (5288 <bt_conn_recv+0x110>)
    5268:	4b08      	ldr	r3, [pc, #32]	; (528c <bt_conn_recv+0x114>)
    526a:	4909      	ldr	r1, [pc, #36]	; (5290 <bt_conn_recv+0x118>)
    526c:	480e      	ldr	r0, [pc, #56]	; (52a8 <bt_conn_recv+0x130>)
    526e:	f7fc fa37 	bl	16e0 <printk>
    5272:	e7ad      	b.n	51d0 <bt_conn_recv+0x58>
	bt_l2cap_recv(conn, buf);
    5274:	4629      	mov	r1, r5
    5276:	4620      	mov	r0, r4
}
    5278:	b004      	add	sp, #16
    527a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    527e:	f000 bf71 	b.w	6164 <bt_l2cap_recv>
    5282:	bf00      	nop
    5284:	0001868d 	.word	0x0001868d
    5288:	00019a84 	.word	0x00019a84
    528c:	00019adc 	.word	0x00019adc
    5290:	00019a8b 	.word	0x00019a8b
    5294:	00019b28 	.word	0x00019b28
    5298:	00019b55 	.word	0x00019b55
    529c:	00019b83 	.word	0x00019b83
    52a0:	00019ba7 	.word	0x00019ba7
    52a4:	00019c0c 	.word	0x00019c0c
    52a8:	00019bde 	.word	0x00019bde

000052ac <bt_conn_send_cb>:
int bt_conn_send_cb(struct bt_conn *conn, struct net_buf *buf,
		    bt_conn_tx_cb_t cb)
{
	BT_DBG("conn handle %u buf len %u cb %p", conn->handle, buf->len, cb);

	if (conn->state != BT_CONN_CONNECTED) {
    52ac:	7b03      	ldrb	r3, [r0, #12]
    52ae:	2b03      	cmp	r3, #3
{
    52b0:	b513      	push	{r0, r1, r4, lr}
    52b2:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    52b4:	d00f      	beq.n	52d6 <bt_conn_send_cb+0x2a>
		BT_ERR("not connected!");
    52b6:	4b0b      	ldr	r3, [pc, #44]	; (52e4 <bt_conn_send_cb+0x38>)
    52b8:	9301      	str	r3, [sp, #4]
    52ba:	9300      	str	r3, [sp, #0]
    52bc:	4a0a      	ldr	r2, [pc, #40]	; (52e8 <bt_conn_send_cb+0x3c>)
    52be:	4b0b      	ldr	r3, [pc, #44]	; (52ec <bt_conn_send_cb+0x40>)
    52c0:	490b      	ldr	r1, [pc, #44]	; (52f0 <bt_conn_send_cb+0x44>)
    52c2:	480c      	ldr	r0, [pc, #48]	; (52f4 <bt_conn_send_cb+0x48>)
    52c4:	f7fc fa0c 	bl	16e0 <printk>
		net_buf_unref(buf);
    52c8:	4620      	mov	r0, r4
    52ca:	f011 fd27 	bl	16d1c <net_buf_unref>
		return -ENOTCONN;
    52ce:	f06f 0038 	mvn.w	r0, #56	; 0x38

	conn_tx(buf)->cb = cb;

	net_buf_put(&conn->tx_queue, buf);
	return 0;
}
    52d2:	b002      	add	sp, #8
    52d4:	bd10      	pop	{r4, pc}
	net_buf_put(&conn->tx_queue, buf);
    52d6:	302c      	adds	r0, #44	; 0x2c
	conn_tx(buf)->cb = cb;
    52d8:	614a      	str	r2, [r1, #20]
	net_buf_put(&conn->tx_queue, buf);
    52da:	f011 fd12 	bl	16d02 <net_buf_put>
	return 0;
    52de:	2000      	movs	r0, #0
    52e0:	e7f7      	b.n	52d2 <bt_conn_send_cb+0x26>
    52e2:	bf00      	nop
    52e4:	0001868d 	.word	0x0001868d
    52e8:	00019a84 	.word	0x00019a84
    52ec:	00019ae9 	.word	0x00019ae9
    52f0:	00019a8b 	.word	0x00019a8b
    52f4:	00019c38 	.word	0x00019c38

000052f8 <bt_conn_notify_tx>:
	tx->cb = NULL;
	sys_slist_prepend(&free_tx, &tx->node);
}

void bt_conn_notify_tx(struct bt_conn *conn)
{
    52f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	node->next = list->head;
    52fc:	4d0d      	ldr	r5, [pc, #52]	; (5334 <bt_conn_notify_tx+0x3c>)
    52fe:	4606      	mov	r6, r0
	struct bt_conn_tx *tx;

	BT_DBG("conn %p", conn);

	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    5300:	f100 071c 	add.w	r7, r0, #28
    5304:	f04f 0800 	mov.w	r8, #0
    5308:	2100      	movs	r1, #0
    530a:	4638      	mov	r0, r7
    530c:	f011 ff87 	bl	1721e <k_queue_get>
    5310:	4604      	mov	r4, r0
    5312:	b908      	cbnz	r0, 5318 <bt_conn_notify_tx+0x20>
			tx->cb(conn);
		}

		tx_free(tx);
	}
}
    5314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tx->cb) {
    5318:	6863      	ldr	r3, [r4, #4]
    531a:	b10b      	cbz	r3, 5320 <bt_conn_notify_tx+0x28>
			tx->cb(conn);
    531c:	4630      	mov	r0, r6
    531e:	4798      	blx	r3
    5320:	682b      	ldr	r3, [r5, #0]
    5322:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    5324:	686b      	ldr	r3, [r5, #4]
	tx->cb = NULL;
    5326:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    532a:	602c      	str	r4, [r5, #0]
	if (!list->tail) {
    532c:	2b00      	cmp	r3, #0
    532e:	d1eb      	bne.n	5308 <bt_conn_notify_tx+0x10>
		list->tail = list->head;
    5330:	606c      	str	r4, [r5, #4]
    5332:	e7e7      	b.n	5304 <bt_conn_notify_tx+0xc>
    5334:	200004f8 	.word	0x200004f8

00005338 <send_frag>:
	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, u8_t flags,
		      bool always_consume)
{
    5338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    533c:	4605      	mov	r5, r0
    533e:	460f      	mov	r7, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    5340:	4843      	ldr	r0, [pc, #268]	; (5450 <send_frag+0x118>)
    5342:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5346:	4698      	mov	r8, r3
    5348:	4614      	mov	r4, r2
    534a:	f012 f9ef 	bl	1772c <_impl_k_sem_take>
		if (!atomic_get(&conns[i].ref)) {
    534e:	4b41      	ldr	r3, [pc, #260]	; (5454 <send_frag+0x11c>)
    5350:	f103 0044 	add.w	r0, r3, #68	; 0x44
    5354:	f7ff fde2 	bl	4f1c <atomic_get>
    5358:	b130      	cbz	r0, 5368 <send_frag+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    535a:	7b1a      	ldrb	r2, [r3, #12]
    535c:	3a03      	subs	r2, #3
    535e:	2a01      	cmp	r2, #1
    5360:	d802      	bhi.n	5368 <send_frag+0x30>
			bt_conn_notify_tx(&conns[i]);
    5362:	4618      	mov	r0, r3
    5364:	f7ff ffc8 	bl	52f8 <bt_conn_notify_tx>

	/* Make sure we notify and free up any pending tx contexts */
	notify_tx();

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    5368:	7b2b      	ldrb	r3, [r5, #12]
    536a:	2b03      	cmp	r3, #3
    536c:	d153      	bne.n	5416 <send_frag+0xde>
		goto fail;
	}

	hdr = net_buf_push(buf, sizeof(*hdr));
    536e:	2104      	movs	r1, #4
    5370:	f107 0008 	add.w	r0, r7, #8
    5374:	f011 fd2a 	bl	16dcc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    5378:	882a      	ldrh	r2, [r5, #0]
	sys_snode_t *node = list->head;
    537a:	4e37      	ldr	r6, [pc, #220]	; (5458 <send_frag+0x120>)
    537c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
    5380:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5382:	89bb      	ldrh	r3, [r7, #12]
    5384:	6834      	ldr	r4, [r6, #0]
	if (list->tail == node) {
    5386:	6871      	ldr	r1, [r6, #4]

	cb = conn_tx(buf)->cb;
    5388:	697a      	ldr	r2, [r7, #20]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    538a:	3b04      	subs	r3, #4
    538c:	8043      	strh	r3, [r0, #2]
    538e:	2302      	movs	r3, #2
    5390:	753b      	strb	r3, [r7, #20]
	list->head = node->next;
    5392:	6823      	ldr	r3, [r4, #0]
    5394:	6033      	str	r3, [r6, #0]
	if (list->tail == node) {
    5396:	428c      	cmp	r4, r1
		list->tail = list->head;
    5398:	bf08      	it	eq
    539a:	6073      	streq	r3, [r6, #4]
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    539c:	6062      	str	r2, [r4, #4]
	__asm__ volatile(
    539e:	f04f 0320 	mov.w	r3, #32
    53a2:	f3ef 8211 	mrs	r2, BASEPRI
    53a6:	f383 8811 	msr	BASEPRI, r3
	node->next = NULL;
    53aa:	2300      	movs	r3, #0
    53ac:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    53ae:	69ab      	ldr	r3, [r5, #24]
    53b0:	2b00      	cmp	r3, #0
    53b2:	d13f      	bne.n	5434 <send_frag+0xfc>
		list->tail = node;
    53b4:	61ac      	str	r4, [r5, #24]
		list->head = node;
    53b6:	616c      	str	r4, [r5, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    53b8:	f382 8811 	msr	BASEPRI, r2
	bt_buf_set_type(buf, BT_BUF_ACL_OUT);

	node = add_pending_tx(conn, cb);

	err = bt_send(buf);
    53bc:	4638      	mov	r0, r7
    53be:	f7fd ff13 	bl	31e8 <bt_send>
	if (err) {
    53c2:	2800      	cmp	r0, #0
    53c4:	d041      	beq.n	544a <send_frag+0x112>
		BT_ERR("Unable to send to driver (err %d)", err);
    53c6:	4b25      	ldr	r3, [pc, #148]	; (545c <send_frag+0x124>)
    53c8:	9302      	str	r3, [sp, #8]
    53ca:	9001      	str	r0, [sp, #4]
    53cc:	9300      	str	r3, [sp, #0]
    53ce:	4a24      	ldr	r2, [pc, #144]	; (5460 <send_frag+0x128>)
    53d0:	4b24      	ldr	r3, [pc, #144]	; (5464 <send_frag+0x12c>)
    53d2:	4925      	ldr	r1, [pc, #148]	; (5468 <send_frag+0x130>)
    53d4:	4825      	ldr	r0, [pc, #148]	; (546c <send_frag+0x134>)
    53d6:	f7fc f983 	bl	16e0 <printk>
	__asm__ volatile(
    53da:	f04f 0320 	mov.w	r3, #32
    53de:	f3ef 8011 	mrs	r0, BASEPRI
    53e2:	f383 8811 	msr	BASEPRI, r3
    53e6:	696b      	ldr	r3, [r5, #20]
	sys_snode_t *prev = NULL;
    53e8:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    53ea:	b153      	cbz	r3, 5402 <send_frag+0xca>
		if (test == node) {
    53ec:	429c      	cmp	r4, r3
    53ee:	d129      	bne.n	5444 <send_frag+0x10c>
    53f0:	6823      	ldr	r3, [r4, #0]
    53f2:	69a9      	ldr	r1, [r5, #24]
	if (!prev_node) {
    53f4:	bb0a      	cbnz	r2, 543a <send_frag+0x102>
		if (list->tail == node) {
    53f6:	428c      	cmp	r4, r1
		list->head = node->next;
    53f8:	616b      	str	r3, [r5, #20]
		if (list->tail == node) {
    53fa:	d100      	bne.n	53fe <send_frag+0xc6>
			list->tail = list->head;
    53fc:	61ab      	str	r3, [r5, #24]
	node->next = NULL;
    53fe:	2300      	movs	r3, #0
    5400:	6023      	str	r3, [r4, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5402:	f380 8811 	msr	BASEPRI, r0
	tx->cb = NULL;
    5406:	2300      	movs	r3, #0
    5408:	6063      	str	r3, [r4, #4]
	node->next = list->head;
    540a:	6833      	ldr	r3, [r6, #0]
    540c:	6023      	str	r3, [r4, #0]
	if (!list->tail) {
    540e:	6873      	ldr	r3, [r6, #4]
	list->head = node;
    5410:	6034      	str	r4, [r6, #0]
	if (!list->tail) {
    5412:	b903      	cbnz	r3, 5416 <send_frag+0xde>
		list->tail = list->head;
    5414:	6074      	str	r4, [r6, #4]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5416:	480e      	ldr	r0, [pc, #56]	; (5450 <send_frag+0x118>)
    5418:	f012 f928 	bl	1766c <_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (always_consume) {
    541c:	f1b8 0f00 	cmp.w	r8, #0
    5420:	d004      	beq.n	542c <send_frag+0xf4>
		net_buf_unref(buf);
    5422:	4638      	mov	r0, r7
    5424:	f011 fc7a 	bl	16d1c <net_buf_unref>
	}
	return false;
    5428:	f04f 0800 	mov.w	r8, #0
}
    542c:	4640      	mov	r0, r8
    542e:	b004      	add	sp, #16
    5430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail->next = node;
    5434:	601c      	str	r4, [r3, #0]
		list->tail = node;
    5436:	61ac      	str	r4, [r5, #24]
    5438:	e7be      	b.n	53b8 <send_frag+0x80>
		if (list->tail == node) {
    543a:	428c      	cmp	r4, r1
		prev_node->next = node->next;
    543c:	6013      	str	r3, [r2, #0]
			list->tail = prev_node;
    543e:	bf08      	it	eq
    5440:	61aa      	streq	r2, [r5, #24]
    5442:	e7dc      	b.n	53fe <send_frag+0xc6>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    5444:	461a      	mov	r2, r3
    5446:	681b      	ldr	r3, [r3, #0]
    5448:	e7cf      	b.n	53ea <send_frag+0xb2>
	return true;
    544a:	f04f 0801 	mov.w	r8, #1
    544e:	e7ed      	b.n	542c <send_frag+0xf4>
    5450:	200086a4 	.word	0x200086a4
    5454:	2000045c 	.word	0x2000045c
    5458:	200004f8 	.word	0x200004f8
    545c:	0001868d 	.word	0x0001868d
    5460:	00019a84 	.word	0x00019a84
    5464:	00019af9 	.word	0x00019af9
    5468:	00019a8b 	.word	0x00019a8b
    546c:	00018f36 	.word	0x00018f36

00005470 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    5470:	b538      	push	{r3, r4, r5, lr}
    5472:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    5474:	f100 052c 	add.w	r5, r0, #44	; 0x2c
    5478:	2100      	movs	r1, #0
    547a:	4628      	mov	r0, r5
    547c:	f011 fc24 	bl	16cc8 <net_buf_get>
    5480:	b958      	cbnz	r0, 549a <conn_cleanup+0x2a>
		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");

	bt_conn_notify_tx(conn);
    5482:	4620      	mov	r0, r4
    5484:	f7ff ff38 	bl	52f8 <bt_conn_notify_tx>

	bt_conn_reset_rx_state(conn);
    5488:	4620      	mov	r0, r4
    548a:	f7ff fd4d 	bl	4f28 <bt_conn_reset_rx_state>
	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
	atomic_dec(&conn->ref);
    548e:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    5492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	atomic_dec(&conn->ref);
    5496:	f7ff bd52 	b.w	4f3e <atomic_dec>
		net_buf_unref(buf);
    549a:	f011 fc3f 	bl	16d1c <net_buf_unref>
    549e:	e7eb      	b.n	5478 <conn_cleanup+0x8>

000054a0 <bt_conn_prepare_events>:
{
    54a0:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0;
    54a2:	4b1f      	ldr	r3, [pc, #124]	; (5520 <bt_conn_prepare_events+0x80>)
    54a4:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    54a6:	2101      	movs	r1, #1
	conn_change.signaled = 0;
    54a8:	609a      	str	r2, [r3, #8]
{
    54aa:	4605      	mov	r5, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    54ac:	f012 fe14 	bl	180d8 <k_poll_event_init>
		if (!atomic_get(&conn->ref)) {
    54b0:	4b1c      	ldr	r3, [pc, #112]	; (5524 <bt_conn_prepare_events+0x84>)
    54b2:	f103 0044 	add.w	r0, r3, #68	; 0x44
    54b6:	f7ff fd31 	bl	4f1c <atomic_get>
    54ba:	4619      	mov	r1, r3
    54bc:	b908      	cbnz	r0, 54c2 <bt_conn_prepare_events+0x22>
			continue;
    54be:	2001      	movs	r0, #1
    54c0:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    54c2:	7b1a      	ldrb	r2, [r3, #12]
    54c4:	b99a      	cbnz	r2, 54ee <bt_conn_prepare_events+0x4e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    54c6:	f3bf 8f5b 	dmb	ish
    54ca:	1d1a      	adds	r2, r3, #4
    54cc:	e852 0f00 	ldrex	r0, [r2]
    54d0:	f020 0440 	bic.w	r4, r0, #64	; 0x40
    54d4:	e842 4e00 	strex	lr, r4, [r2]
    54d8:	f1be 0f00 	cmp.w	lr, #0
    54dc:	d1f6      	bne.n	54cc <bt_conn_prepare_events+0x2c>
    54de:	f3bf 8f5b 	dmb	ish
    54e2:	0642      	lsls	r2, r0, #25
    54e4:	d503      	bpl.n	54ee <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    54e6:	4618      	mov	r0, r3
    54e8:	f7ff ffc2 	bl	5470 <conn_cleanup>
    54ec:	e7e7      	b.n	54be <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    54ee:	7b0c      	ldrb	r4, [r1, #12]
    54f0:	2c03      	cmp	r4, #3
    54f2:	d1e4      	bne.n	54be <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    54f4:	f105 0014 	add.w	r0, r5, #20
    54f8:	4b0b      	ldr	r3, [pc, #44]	; (5528 <bt_conn_prepare_events+0x88>)
    54fa:	2200      	movs	r2, #0
    54fc:	2104      	movs	r1, #4
    54fe:	f012 fdeb 	bl	180d8 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    5502:	2301      	movs	r3, #1
    5504:	f885 3020 	strb.w	r3, [r5, #32]
		k_poll_event_init(&events[ev_count],
    5508:	f105 0028 	add.w	r0, r5, #40	; 0x28
    550c:	4b07      	ldr	r3, [pc, #28]	; (552c <bt_conn_prepare_events+0x8c>)
    550e:	2200      	movs	r2, #0
    5510:	2104      	movs	r1, #4
    5512:	f012 fde1 	bl	180d8 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    5516:	2302      	movs	r3, #2
    5518:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    551c:	4620      	mov	r0, r4
}
    551e:	bd38      	pop	{r3, r4, r5, pc}
    5520:	20008750 	.word	0x20008750
    5524:	2000045c 	.word	0x2000045c
    5528:	20000478 	.word	0x20000478
    552c:	20000488 	.word	0x20000488

00005530 <bt_conn_add_le>:
{
    5530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    5534:	4c1a      	ldr	r4, [pc, #104]	; (55a0 <bt_conn_add_le+0x70>)
    5536:	f104 0744 	add.w	r7, r4, #68	; 0x44
{
    553a:	4680      	mov	r8, r0
		if (!atomic_get(&conns[i].ref)) {
    553c:	4638      	mov	r0, r7
    553e:	f7ff fced 	bl	4f1c <atomic_get>
    5542:	4605      	mov	r5, r0
    5544:	b110      	cbz	r0, 554c <bt_conn_add_le+0x1c>
		return NULL;
    5546:	2000      	movs	r0, #0
    5548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(conn, 0, sizeof(*conn));
    554c:	4601      	mov	r1, r0
    554e:	229c      	movs	r2, #156	; 0x9c
    5550:	4620      	mov	r0, r4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5552:	2601      	movs	r6, #1
    5554:	f7fb f884 	bl	660 <memset>
    5558:	f3bf 8f5b 	dmb	ish
    555c:	e857 3f00 	ldrex	r3, [r7]
    5560:	e847 6200 	strex	r2, r6, [r7]
    5564:	2a00      	cmp	r2, #0
    5566:	d1f9      	bne.n	555c <bt_conn_add_le+0x2c>
    5568:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
    556c:	2207      	movs	r2, #7
    556e:	4641      	mov	r1, r8
    5570:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5574:	f7fb f848 	bl	608 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    5578:	f44f 6316 	mov.w	r3, #2400	; 0x960
    557c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    5580:	f44f 6319 	mov.w	r3, #2448	; 0x990
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    5584:	f104 0074 	add.w	r0, r4, #116	; 0x74
	conn->sec_level = BT_SECURITY_LOW;
    5588:	7226      	strb	r6, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    558a:	7266      	strb	r6, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    558c:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    558e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    5592:	4904      	ldr	r1, [pc, #16]	; (55a4 <bt_conn_add_le+0x74>)
    5594:	f012 fb96 	bl	17cc4 <k_delayed_work_init>
			conn = &conns[i];
    5598:	4620      	mov	r0, r4
}
    559a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    559e:	bf00      	nop
    55a0:	2000045c 	.word	0x2000045c
    55a4:	00005b05 	.word	0x00005b05

000055a8 <bt_conn_set_state>:
{
    55a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == state) {
    55aa:	7b05      	ldrb	r5, [r0, #12]
    55ac:	428d      	cmp	r5, r1
{
    55ae:	b085      	sub	sp, #20
    55b0:	4604      	mov	r4, r0
    55b2:	460e      	mov	r6, r1
	if (conn->state == state) {
    55b4:	d10a      	bne.n	55cc <bt_conn_set_state+0x24>
		BT_WARN("no transition");
    55b6:	4b5f      	ldr	r3, [pc, #380]	; (5734 <bt_conn_set_state+0x18c>)
    55b8:	9301      	str	r3, [sp, #4]
    55ba:	9300      	str	r3, [sp, #0]
    55bc:	4a5e      	ldr	r2, [pc, #376]	; (5738 <bt_conn_set_state+0x190>)
    55be:	4b5f      	ldr	r3, [pc, #380]	; (573c <bt_conn_set_state+0x194>)
    55c0:	495f      	ldr	r1, [pc, #380]	; (5740 <bt_conn_set_state+0x198>)
    55c2:	4860      	ldr	r0, [pc, #384]	; (5744 <bt_conn_set_state+0x19c>)
    55c4:	f7fc f88c 	bl	16e0 <printk>
}
    55c8:	b005      	add	sp, #20
    55ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->state = state;
    55cc:	7321      	strb	r1, [r4, #12]
	switch (old_state) {
    55ce:	b19d      	cbz	r5, 55f8 <bt_conn_set_state+0x50>
    55d0:	2d02      	cmp	r5, #2
    55d2:	d015      	beq.n	5600 <bt_conn_set_state+0x58>
	switch (conn->state) {
    55d4:	7b23      	ldrb	r3, [r4, #12]
    55d6:	2b04      	cmp	r3, #4
    55d8:	f200 80a1 	bhi.w	571e <bt_conn_set_state+0x176>
    55dc:	a201      	add	r2, pc, #4	; (adr r2, 55e4 <bt_conn_set_state+0x3c>)
    55de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    55e2:	bf00      	nop
    55e4:	00005645 	.word	0x00005645
    55e8:	000055c9 	.word	0x000055c9
    55ec:	00005703 	.word	0x00005703
    55f0:	0000560f 	.word	0x0000560f
    55f4:	000055c9 	.word	0x000055c9
	atomic_inc(&conn->ref);
    55f8:	3044      	adds	r0, #68	; 0x44
    55fa:	f7ff fcad 	bl	4f58 <atomic_inc>
    55fe:	e7e9      	b.n	55d4 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5600:	7883      	ldrb	r3, [r0, #2]
    5602:	2b00      	cmp	r3, #0
    5604:	d1e6      	bne.n	55d4 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->le.update_work);
    5606:	3074      	adds	r0, #116	; 0x74
    5608:	f012 fb7a 	bl	17d00 <k_delayed_work_cancel>
    560c:	e7e2      	b.n	55d4 <bt_conn_set_state+0x2c>
		if (conn->type == BT_CONN_TYPE_SCO) {
    560e:	78a3      	ldrb	r3, [r4, #2]
    5610:	2b02      	cmp	r3, #2
    5612:	d0d9      	beq.n	55c8 <bt_conn_set_state+0x20>
		k_fifo_init(&conn->tx_queue);
    5614:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5618:	f011 fdac 	bl	17174 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    561c:	f104 001c 	add.w	r0, r4, #28
    5620:	f011 fda8 	bl	17174 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    5624:	2100      	movs	r1, #0
    5626:	4848      	ldr	r0, [pc, #288]	; (5748 <bt_conn_set_state+0x1a0>)
    5628:	f012 fe20 	bl	1826c <k_poll_signal>
	list->head = NULL;
    562c:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    562e:	4620      	mov	r0, r4
    5630:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    5632:	6423      	str	r3, [r4, #64]	; 0x40
    5634:	f000 fc26 	bl	5e84 <bt_l2cap_connected>
		notify_connected(conn);
    5638:	4620      	mov	r0, r4
}
    563a:	b005      	add	sp, #20
    563c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		notify_connected(conn);
    5640:	f7ff bc5c 	b.w	4efc <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    5644:	78a3      	ldrb	r3, [r4, #2]
    5646:	2b02      	cmp	r3, #2
    5648:	d106      	bne.n	5658 <bt_conn_set_state+0xb0>
	atomic_dec(&conn->ref);
    564a:	f104 0044 	add.w	r0, r4, #68	; 0x44
}
    564e:	b005      	add	sp, #20
    5650:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	atomic_dec(&conn->ref);
    5654:	f7ff bc73 	b.w	4f3e <atomic_dec>
		if (old_state == BT_CONN_CONNECTED ||
    5658:	1eeb      	subs	r3, r5, #3
    565a:	2b01      	cmp	r3, #1
    565c:	d844      	bhi.n	56e8 <bt_conn_set_state+0x140>
			bt_l2cap_disconnected(conn);
    565e:	4620      	mov	r0, r4
    5660:	f000 fc4a 	bl	5ef8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    5664:	4b39      	ldr	r3, [pc, #228]	; (574c <bt_conn_set_state+0x1a4>)
    5666:	681d      	ldr	r5, [r3, #0]
    5668:	b9ed      	cbnz	r5, 56a6 <bt_conn_set_state+0xfe>
	node->next = list->head;
    566a:	4e39      	ldr	r6, [pc, #228]	; (5750 <bt_conn_set_state+0x1a8>)
    566c:	4f39      	ldr	r7, [pc, #228]	; (5754 <bt_conn_set_state+0x1ac>)
	__asm__ volatile(
    566e:	f04f 0320 	mov.w	r3, #32
    5672:	f3ef 8111 	mrs	r1, BASEPRI
    5676:	f383 8811 	msr	BASEPRI, r3
    567a:	6963      	ldr	r3, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    567c:	b12b      	cbz	r3, 568a <bt_conn_set_state+0xe2>
	if (list->tail == node) {
    567e:	69a0      	ldr	r0, [r4, #24]
	list->head = node->next;
    5680:	681a      	ldr	r2, [r3, #0]
    5682:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    5684:	4283      	cmp	r3, r0
		list->tail = list->head;
    5686:	bf08      	it	eq
    5688:	61a2      	streq	r2, [r4, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    568a:	f381 8811 	msr	BASEPRI, r1
		if (!node) {
    568e:	b18b      	cbz	r3, 56b4 <bt_conn_set_state+0x10c>
	node->next = list->head;
    5690:	6832      	ldr	r2, [r6, #0]
    5692:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    5694:	6872      	ldr	r2, [r6, #4]
	tx->cb = NULL;
    5696:	605d      	str	r5, [r3, #4]
	list->head = node;
    5698:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
    569a:	b902      	cbnz	r2, 569e <bt_conn_set_state+0xf6>
		list->tail = list->head;
    569c:	6073      	str	r3, [r6, #4]
    569e:	4638      	mov	r0, r7
    56a0:	f011 ffe4 	bl	1766c <_impl_k_sem_give>
    56a4:	e7e3      	b.n	566e <bt_conn_set_state+0xc6>
		if (cb->disconnected) {
    56a6:	686b      	ldr	r3, [r5, #4]
    56a8:	b113      	cbz	r3, 56b0 <bt_conn_set_state+0x108>
			cb->disconnected(conn, conn->err);
    56aa:	7ae1      	ldrb	r1, [r4, #11]
    56ac:	4620      	mov	r0, r4
    56ae:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    56b0:	69ad      	ldr	r5, [r5, #24]
    56b2:	e7d9      	b.n	5668 <bt_conn_set_state+0xc0>
			if (conn->type == BT_CONN_TYPE_LE) {
    56b4:	78a3      	ldrb	r3, [r4, #2]
    56b6:	b91b      	cbnz	r3, 56c0 <bt_conn_set_state+0x118>
				k_delayed_work_cancel(&conn->le.update_work);
    56b8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    56bc:	f012 fb20 	bl	17d00 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    56c0:	f3bf 8f5b 	dmb	ish
    56c4:	3404      	adds	r4, #4
    56c6:	e854 3f00 	ldrex	r3, [r4]
    56ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    56ce:	e844 3200 	strex	r2, r3, [r4]
    56d2:	2a00      	cmp	r2, #0
    56d4:	d1f7      	bne.n	56c6 <bt_conn_set_state+0x11e>
    56d6:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    56da:	481b      	ldr	r0, [pc, #108]	; (5748 <bt_conn_set_state+0x1a0>)
    56dc:	2100      	movs	r1, #0
}
    56de:	b005      	add	sp, #20
    56e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			k_poll_signal(&conn_change, 0);
    56e4:	f012 bdc2 	b.w	1826c <k_poll_signal>
		} else if (old_state == BT_CONN_CONNECT) {
    56e8:	2d02      	cmp	r5, #2
    56ea:	d103      	bne.n	56f4 <bt_conn_set_state+0x14c>
			notify_connected(conn);
    56ec:	4620      	mov	r0, r4
    56ee:	f7ff fc05 	bl	4efc <notify_connected>
    56f2:	e7aa      	b.n	564a <bt_conn_set_state+0xa2>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    56f4:	2d01      	cmp	r5, #1
    56f6:	f47f af67 	bne.w	55c8 <bt_conn_set_state+0x20>
			if (conn->err) {
    56fa:	7ae3      	ldrb	r3, [r4, #11]
    56fc:	2b00      	cmp	r3, #0
    56fe:	d0a4      	beq.n	564a <bt_conn_set_state+0xa2>
    5700:	e7f4      	b.n	56ec <bt_conn_set_state+0x144>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5702:	78a3      	ldrb	r3, [r4, #2]
    5704:	2b00      	cmp	r3, #0
    5706:	f47f af5f 	bne.w	55c8 <bt_conn_set_state+0x20>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    570a:	4813      	ldr	r0, [pc, #76]	; (5758 <bt_conn_set_state+0x1b0>)
    570c:	f640 32b8 	movw	r2, #3000	; 0xbb8
    5710:	f104 0174 	add.w	r1, r4, #116	; 0x74
}
    5714:	b005      	add	sp, #20
    5716:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    571a:	f012 bb4b 	b.w	17db4 <k_delayed_work_submit_to_queue>
		BT_WARN("no valid (%u) state was set", state);
    571e:	4b05      	ldr	r3, [pc, #20]	; (5734 <bt_conn_set_state+0x18c>)
    5720:	9302      	str	r3, [sp, #8]
    5722:	e88d 0048 	stmia.w	sp, {r3, r6}
    5726:	4a04      	ldr	r2, [pc, #16]	; (5738 <bt_conn_set_state+0x190>)
    5728:	4b04      	ldr	r3, [pc, #16]	; (573c <bt_conn_set_state+0x194>)
    572a:	4905      	ldr	r1, [pc, #20]	; (5740 <bt_conn_set_state+0x198>)
    572c:	480b      	ldr	r0, [pc, #44]	; (575c <bt_conn_set_state+0x1b4>)
    572e:	f7fb ffd7 	bl	16e0 <printk>
		break;
    5732:	e749      	b.n	55c8 <bt_conn_set_state+0x20>
    5734:	0001868d 	.word	0x0001868d
    5738:	00019806 	.word	0x00019806
    573c:	00019b16 	.word	0x00019b16
    5740:	00019a8b 	.word	0x00019a8b
    5744:	00019c57 	.word	0x00019c57
    5748:	20008750 	.word	0x20008750
    574c:	20000408 	.word	0x20000408
    5750:	200004f8 	.word	0x200004f8
    5754:	200086a4 	.word	0x200086a4
    5758:	20005470 	.word	0x20005470
    575c:	00019c75 	.word	0x00019c75

00005760 <bt_conn_lookup_handle>:
{
    5760:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    5762:	4c0b      	ldr	r4, [pc, #44]	; (5790 <bt_conn_lookup_handle+0x30>)
{
    5764:	4602      	mov	r2, r0
		if (!atomic_get(&conns[i].ref)) {
    5766:	f104 0044 	add.w	r0, r4, #68	; 0x44
    576a:	f7ff fbd7 	bl	4f1c <atomic_get>
    576e:	b168      	cbz	r0, 578c <bt_conn_lookup_handle+0x2c>
		if (conns[i].state != BT_CONN_CONNECTED &&
    5770:	7b23      	ldrb	r3, [r4, #12]
    5772:	3b03      	subs	r3, #3
    5774:	2b01      	cmp	r3, #1
    5776:	d808      	bhi.n	578a <bt_conn_lookup_handle+0x2a>
		if (conns[i].handle == handle) {
    5778:	8823      	ldrh	r3, [r4, #0]
    577a:	4293      	cmp	r3, r2
    577c:	d105      	bne.n	578a <bt_conn_lookup_handle+0x2a>
	atomic_inc(&conn->ref);
    577e:	f104 0044 	add.w	r0, r4, #68	; 0x44
    5782:	f7ff fbe9 	bl	4f58 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    5786:	4620      	mov	r0, r4
    5788:	bd10      	pop	{r4, pc}
	return NULL;
    578a:	2000      	movs	r0, #0
}
    578c:	bd10      	pop	{r4, pc}
    578e:	bf00      	nop
    5790:	2000045c 	.word	0x2000045c

00005794 <bt_conn_addr_le_cmp>:
{
    5794:	b538      	push	{r3, r4, r5, lr}
    5796:	460d      	mov	r5, r1
    5798:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    579a:	f100 0148 	add.w	r1, r0, #72	; 0x48
    579e:	2207      	movs	r2, #7
    57a0:	4628      	mov	r0, r5
    57a2:	f7fa ff1c 	bl	5de <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    57a6:	b160      	cbz	r0, 57c2 <bt_conn_addr_le_cmp+0x2e>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    57a8:	78e3      	ldrb	r3, [r4, #3]
    57aa:	2207      	movs	r2, #7
    57ac:	b933      	cbnz	r3, 57bc <bt_conn_addr_le_cmp+0x28>
    57ae:	f104 0156 	add.w	r1, r4, #86	; 0x56
    57b2:	4628      	mov	r0, r5
}
    57b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    57b8:	f7fa bf11 	b.w	5de <memcmp>
    57bc:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    57c0:	e7f7      	b.n	57b2 <bt_conn_addr_le_cmp+0x1e>
    57c2:	bd38      	pop	{r3, r4, r5, pc}

000057c4 <bt_conn_lookup_addr_le>:
{
    57c4:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    57c6:	4c0b      	ldr	r4, [pc, #44]	; (57f4 <bt_conn_lookup_addr_le+0x30>)
{
    57c8:	4601      	mov	r1, r0
		if (!atomic_get(&conns[i].ref)) {
    57ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
    57ce:	f7ff fba5 	bl	4f1c <atomic_get>
    57d2:	b908      	cbnz	r0, 57d8 <bt_conn_lookup_addr_le+0x14>
	return NULL;
    57d4:	2000      	movs	r0, #0
    57d6:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    57d8:	78a3      	ldrb	r3, [r4, #2]
    57da:	2b00      	cmp	r3, #0
    57dc:	d1fa      	bne.n	57d4 <bt_conn_lookup_addr_le+0x10>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    57de:	4620      	mov	r0, r4
    57e0:	f7ff ffd8 	bl	5794 <bt_conn_addr_le_cmp>
    57e4:	2800      	cmp	r0, #0
    57e6:	d1f5      	bne.n	57d4 <bt_conn_lookup_addr_le+0x10>
	atomic_inc(&conn->ref);
    57e8:	f104 0044 	add.w	r0, r4, #68	; 0x44
    57ec:	f7ff fbb4 	bl	4f58 <atomic_inc>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    57f0:	4620      	mov	r0, r4
}
    57f2:	bd10      	pop	{r4, pc}
    57f4:	2000045c 	.word	0x2000045c

000057f8 <bt_conn_lookup_state_le>:
{
    57f8:	b538      	push	{r3, r4, r5, lr}
		if (!atomic_get(&conns[i].ref)) {
    57fa:	4c0e      	ldr	r4, [pc, #56]	; (5834 <bt_conn_lookup_state_le+0x3c>)
{
    57fc:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    57fe:	f104 0044 	add.w	r0, r4, #68	; 0x44
{
    5802:	460d      	mov	r5, r1
		if (!atomic_get(&conns[i].ref)) {
    5804:	f7ff fb8a 	bl	4f1c <atomic_get>
    5808:	b908      	cbnz	r0, 580e <bt_conn_lookup_state_le+0x16>
	return NULL;
    580a:	2000      	movs	r0, #0
    580c:	bd38      	pop	{r3, r4, r5, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    580e:	78a2      	ldrb	r2, [r4, #2]
    5810:	2a00      	cmp	r2, #0
    5812:	d1fa      	bne.n	580a <bt_conn_lookup_state_le+0x12>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    5814:	b93b      	cbnz	r3, 5826 <bt_conn_lookup_state_le+0x2e>
		if (conns[i].state == state) {
    5816:	7b23      	ldrb	r3, [r4, #12]
    5818:	42ab      	cmp	r3, r5
    581a:	d1f6      	bne.n	580a <bt_conn_lookup_state_le+0x12>
	atomic_inc(&conn->ref);
    581c:	4806      	ldr	r0, [pc, #24]	; (5838 <bt_conn_lookup_state_le+0x40>)
    581e:	f7ff fb9b 	bl	4f58 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    5822:	4804      	ldr	r0, [pc, #16]	; (5834 <bt_conn_lookup_state_le+0x3c>)
}
    5824:	bd38      	pop	{r3, r4, r5, pc}
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    5826:	4619      	mov	r1, r3
    5828:	4620      	mov	r0, r4
    582a:	f7ff ffb3 	bl	5794 <bt_conn_addr_le_cmp>
    582e:	2800      	cmp	r0, #0
    5830:	d1eb      	bne.n	580a <bt_conn_lookup_state_le+0x12>
    5832:	e7f0      	b.n	5816 <bt_conn_lookup_state_le+0x1e>
    5834:	2000045c 	.word	0x2000045c
    5838:	200004a0 	.word	0x200004a0

0000583c <bt_conn_unref>:
	atomic_dec(&conn->ref);
    583c:	3044      	adds	r0, #68	; 0x44
    583e:	f7ff bb7e 	b.w	4f3e <atomic_dec>

00005842 <bt_conn_get_dst>:
}

const bt_addr_le_t *bt_conn_get_dst(const struct bt_conn *conn)
{
	return &conn->le.dst;
}
    5842:	3048      	adds	r0, #72	; 0x48
    5844:	4770      	bx	lr

00005846 <bt_hci_disconnect>:

	return -EINVAL;
}

int bt_hci_disconnect(struct bt_conn *conn, u8_t reason)
{
    5846:	b570      	push	{r4, r5, r6, lr}
    5848:	4605      	mov	r5, r0
    584a:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_cp_disconnect *disconn;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    584c:	f240 4006 	movw	r0, #1030	; 0x406
    5850:	2103      	movs	r1, #3
    5852:	f7fd f995 	bl	2b80 <bt_hci_cmd_create>
	if (!buf) {
    5856:	4604      	mov	r4, r0
    5858:	b198      	cbz	r0, 5882 <bt_hci_disconnect+0x3c>
		return -ENOBUFS;
	}

	disconn = net_buf_add(buf, sizeof(*disconn));
    585a:	2103      	movs	r1, #3
    585c:	3008      	adds	r0, #8
    585e:	f011 fa8f 	bl	16d80 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    5862:	882b      	ldrh	r3, [r5, #0]
    5864:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    5866:	7086      	strb	r6, [r0, #2]

	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    5868:	4621      	mov	r1, r4
    586a:	f240 4006 	movw	r0, #1030	; 0x406
    586e:	f7fd fcc3 	bl	31f8 <bt_hci_cmd_send>
	if (err) {
    5872:	4604      	mov	r4, r0
    5874:	b918      	cbnz	r0, 587e <bt_hci_disconnect+0x38>
		return err;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    5876:	2104      	movs	r1, #4
    5878:	4628      	mov	r0, r5
    587a:	f7ff fe95 	bl	55a8 <bt_conn_set_state>

	return 0;
}
    587e:	4620      	mov	r0, r4
    5880:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5882:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5886:	e7fa      	b.n	587e <bt_hci_disconnect+0x38>

00005888 <bt_conn_create_le>:
	conn->le.timeout = param->timeout;
}

struct bt_conn *bt_conn_create_le(const bt_addr_le_t *peer,
				  const struct bt_le_conn_param *param)
{
    5888:	b570      	push	{r4, r5, r6, lr}
    588a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (!bt_le_conn_params_valid(param)) {
    588c:	4608      	mov	r0, r1
{
    588e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    5890:	f7fd fac6 	bl	2e20 <bt_le_conn_params_valid>
    5894:	b908      	cbnz	r0, 589a <bt_conn_create_le+0x12>
		case BT_CONN_CONNECT:
		case BT_CONN_CONNECTED:
			return conn;
		default:
			bt_conn_unref(conn);
			return NULL;
    5896:	2400      	movs	r4, #0
    5898:	e01d      	b.n	58d6 <bt_conn_create_le+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    589a:	481e      	ldr	r0, [pc, #120]	; (5914 <bt_conn_create_le+0x8c>)
    589c:	f7ff fb3e 	bl	4f1c <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    58a0:	05c3      	lsls	r3, r0, #23
    58a2:	d4f8      	bmi.n	5896 <bt_conn_create_le+0xe>
	conn = bt_conn_lookup_addr_le(peer);
    58a4:	4630      	mov	r0, r6
    58a6:	f7ff ff8d 	bl	57c4 <bt_conn_lookup_addr_le>
	if (conn) {
    58aa:	4604      	mov	r4, r0
    58ac:	b1a8      	cbz	r0, 58da <bt_conn_create_le+0x52>
		switch (conn->state) {
    58ae:	7b03      	ldrb	r3, [r0, #12]
    58b0:	2b01      	cmp	r3, #1
    58b2:	d007      	beq.n	58c4 <bt_conn_create_le+0x3c>
    58b4:	d301      	bcc.n	58ba <bt_conn_create_le+0x32>
    58b6:	2b03      	cmp	r3, #3
    58b8:	d90d      	bls.n	58d6 <bt_conn_create_le+0x4e>
	atomic_dec(&conn->ref);
    58ba:	f104 0044 	add.w	r0, r4, #68	; 0x44
    58be:	f7ff fb3e 	bl	4f3e <atomic_dec>
    58c2:	e7e8      	b.n	5896 <bt_conn_create_le+0xe>
	conn->le.interval_max = param->interval_max;
    58c4:	886b      	ldrh	r3, [r5, #2]
    58c6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    58ca:	88ab      	ldrh	r3, [r5, #4]
    58cc:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    58d0:	88eb      	ldrh	r3, [r5, #6]
    58d2:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);

	bt_le_scan_update(true);

	return conn;
}
    58d6:	4620      	mov	r0, r4
    58d8:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_add_le(peer);
    58da:	4630      	mov	r0, r6
    58dc:	f7ff fe28 	bl	5530 <bt_conn_add_le>
	if (!conn) {
    58e0:	4604      	mov	r4, r0
    58e2:	2800      	cmp	r0, #0
    58e4:	d0f7      	beq.n	58d6 <bt_conn_create_le+0x4e>
	memcpy(dst, src, sizeof(*dst));
    58e6:	2207      	movs	r2, #7
    58e8:	4631      	mov	r1, r6
    58ea:	3056      	adds	r0, #86	; 0x56
    58ec:	f7fa fe8c 	bl	608 <memcpy>
	conn->le.interval_max = param->interval_max;
    58f0:	886b      	ldrh	r3, [r5, #2]
    58f2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    58f6:	88ab      	ldrh	r3, [r5, #4]
    58f8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    58fc:	88eb      	ldrh	r3, [r5, #6]
    58fe:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5902:	4620      	mov	r0, r4
    5904:	2101      	movs	r1, #1
    5906:	f7ff fe4f 	bl	55a8 <bt_conn_set_state>
	bt_le_scan_update(true);
    590a:	2001      	movs	r0, #1
    590c:	f7fd fcfc 	bl	3308 <bt_le_scan_update>
	return conn;
    5910:	e7e1      	b.n	58d6 <bt_conn_create_le+0x4e>
    5912:	bf00      	nop
    5914:	20008688 	.word	0x20008688

00005918 <bt_le_set_auto_conn>:

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    5918:	b570      	push	{r4, r5, r6, lr}
    591a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    591c:	460d      	mov	r5, r1
    591e:	2900      	cmp	r1, #0
    5920:	d13d      	bne.n	599e <bt_le_set_auto_conn+0x86>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    5922:	4630      	mov	r0, r6
    5924:	f7ff ff4e 	bl	57c4 <bt_conn_lookup_addr_le>
	if (!conn) {
    5928:	4604      	mov	r4, r0
    592a:	b928      	cbnz	r0, 5938 <bt_le_set_auto_conn+0x20>
		conn = bt_conn_add_le(addr);
    592c:	4630      	mov	r0, r6
    592e:	f7ff fdff 	bl	5530 <bt_conn_add_le>
		if (!conn) {
    5932:	4604      	mov	r4, r0
    5934:	2800      	cmp	r0, #0
    5936:	d053      	beq.n	59e0 <bt_le_set_auto_conn+0xc8>
    5938:	1d23      	adds	r3, r4, #4
    593a:	f104 0644 	add.w	r6, r4, #68	; 0x44
			return -ENOMEM;
		}
	}

	if (param) {
    593e:	2d00      	cmp	r5, #0
    5940:	d035      	beq.n	59ae <bt_le_set_auto_conn+0x96>
	conn->le.interval_max = param->interval_max;
    5942:	886a      	ldrh	r2, [r5, #2]
    5944:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
	conn->le.latency = param->latency;
    5948:	88aa      	ldrh	r2, [r5, #4]
    594a:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
	conn->le.timeout = param->timeout;
    594e:	88ea      	ldrh	r2, [r5, #6]
    5950:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5954:	f3bf 8f5b 	dmb	ish
    5958:	e853 2f00 	ldrex	r2, [r3]
    595c:	f042 0101 	orr.w	r1, r2, #1
    5960:	e843 1000 	strex	r0, r1, [r3]
    5964:	2800      	cmp	r0, #0
    5966:	d1f7      	bne.n	5958 <bt_le_set_auto_conn+0x40>
    5968:	f3bf 8f5b 	dmb	ish
		bt_conn_set_param_le(conn, param);

		if (!atomic_test_and_set_bit(conn->flags,
    596c:	07d1      	lsls	r1, r2, #31
    596e:	d402      	bmi.n	5976 <bt_le_set_auto_conn+0x5e>
	atomic_inc(&conn->ref);
    5970:	4630      	mov	r0, r6
    5972:	f7ff faf1 	bl	4f58 <atomic_inc>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    5976:	7b23      	ldrb	r3, [r4, #12]
    5978:	b963      	cbnz	r3, 5994 <bt_le_set_auto_conn+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    597a:	481b      	ldr	r0, [pc, #108]	; (59e8 <bt_le_set_auto_conn+0xd0>)
    597c:	f7ff face 	bl	4f1c <atomic_get>
    5980:	0783      	lsls	r3, r0, #30
    5982:	d507      	bpl.n	5994 <bt_le_set_auto_conn+0x7c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		if (param) {
    5984:	b11d      	cbz	r5, 598e <bt_le_set_auto_conn+0x76>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5986:	2101      	movs	r1, #1
    5988:	4620      	mov	r0, r4
    598a:	f7ff fe0d 	bl	55a8 <bt_conn_set_state>
		}
		bt_le_scan_update(false);
    598e:	2000      	movs	r0, #0
    5990:	f7fd fcba 	bl	3308 <bt_le_scan_update>
	atomic_dec(&conn->ref);
    5994:	4630      	mov	r0, r6
    5996:	f7ff fad2 	bl	4f3e <atomic_dec>
	}

	bt_conn_unref(conn);

	return 0;
    599a:	2000      	movs	r0, #0
    599c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    599e:	4608      	mov	r0, r1
    59a0:	f7fd fa3e 	bl	2e20 <bt_le_conn_params_valid>
    59a4:	2800      	cmp	r0, #0
    59a6:	d1bc      	bne.n	5922 <bt_le_set_auto_conn+0xa>
		return -EINVAL;
    59a8:	f06f 0015 	mvn.w	r0, #21
    59ac:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    59ae:	f3bf 8f5b 	dmb	ish
    59b2:	e853 2f00 	ldrex	r2, [r3]
    59b6:	f022 0101 	bic.w	r1, r2, #1
    59ba:	e843 1000 	strex	r0, r1, [r3]
    59be:	2800      	cmp	r0, #0
    59c0:	d1f7      	bne.n	59b2 <bt_le_set_auto_conn+0x9a>
    59c2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    59c6:	07d2      	lsls	r2, r2, #31
    59c8:	d5d5      	bpl.n	5976 <bt_le_set_auto_conn+0x5e>
	atomic_dec(&conn->ref);
    59ca:	4630      	mov	r0, r6
    59cc:	f7ff fab7 	bl	4f3e <atomic_dec>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    59d0:	7b23      	ldrb	r3, [r4, #12]
    59d2:	2b01      	cmp	r3, #1
    59d4:	d1cf      	bne.n	5976 <bt_le_set_auto_conn+0x5e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    59d6:	4629      	mov	r1, r5
    59d8:	4620      	mov	r0, r4
    59da:	f7ff fde5 	bl	55a8 <bt_conn_set_state>
    59de:	e7ca      	b.n	5976 <bt_le_set_auto_conn+0x5e>
			return -ENOMEM;
    59e0:	f06f 000b 	mvn.w	r0, #11
}
    59e4:	bd70      	pop	{r4, r5, r6, pc}
    59e6:	bf00      	nop
    59e8:	20008688 	.word	0x20008688

000059ec <bt_conn_disconnect>:
{
    59ec:	b538      	push	{r3, r4, r5, lr}
    59ee:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    59f0:	7881      	ldrb	r1, [r0, #2]
{
    59f2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    59f4:	b911      	cbnz	r1, 59fc <bt_conn_disconnect+0x10>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    59f6:	3048      	adds	r0, #72	; 0x48
    59f8:	f7ff ff8e 	bl	5918 <bt_le_set_auto_conn>
	switch (conn->state) {
    59fc:	7b23      	ldrb	r3, [r4, #12]
    59fe:	3b01      	subs	r3, #1
    5a00:	2b03      	cmp	r3, #3
    5a02:	d803      	bhi.n	5a0c <bt_conn_disconnect+0x20>
    5a04:	e8df f003 	tbb	[pc, r3]
    5a08:	0d1a0f05 	.word	0x0d1a0f05
		return -ENOTCONN;
    5a0c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    5a10:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5a12:	4620      	mov	r0, r4
		conn->err = reason;
    5a14:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5a16:	2100      	movs	r1, #0
    5a18:	f7ff fdc6 	bl	55a8 <bt_conn_set_state>
		bt_le_scan_update(false);
    5a1c:	2000      	movs	r0, #0
    5a1e:	f7fd fc73 	bl	3308 <bt_le_scan_update>
		return 0;
    5a22:	2000      	movs	r0, #0
}
    5a24:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    5a26:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5a2a:	f012 f969 	bl	17d00 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    5a2e:	2100      	movs	r1, #0
    5a30:	f242 000e 	movw	r0, #8206	; 0x200e
}
    5a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    5a38:	f7fd bbde 	b.w	31f8 <bt_hci_cmd_send>
		return bt_hci_disconnect(conn, reason);
    5a3c:	4629      	mov	r1, r5
    5a3e:	4620      	mov	r0, r4
}
    5a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_hci_disconnect(conn, reason);
    5a44:	f7ff beff 	b.w	5846 <bt_hci_disconnect>

00005a48 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    5a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a4a:	4607      	mov	r7, r0
    5a4c:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    5a4e:	f242 0013 	movw	r0, #8211	; 0x2013
    5a52:	210e      	movs	r1, #14
    5a54:	f7fd f894 	bl	2b80 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    5a58:	4606      	mov	r6, r0
    5a5a:	b1c8      	cbz	r0, 5a90 <bt_conn_le_conn_update+0x48>
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    5a5c:	210e      	movs	r1, #14
    5a5e:	3008      	adds	r0, #8
    5a60:	f011 f98e 	bl	16d80 <net_buf_simple_add>
	memset(conn_update, 0, sizeof(*conn_update));
    5a64:	2100      	movs	r1, #0
	conn_update = net_buf_add(buf, sizeof(*conn_update));
    5a66:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    5a68:	220e      	movs	r2, #14
    5a6a:	f7fa fdf9 	bl	660 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    5a6e:	883b      	ldrh	r3, [r7, #0]
    5a70:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    5a72:	882b      	ldrh	r3, [r5, #0]
    5a74:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    5a76:	886b      	ldrh	r3, [r5, #2]
    5a78:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    5a7a:	88ab      	ldrh	r3, [r5, #4]
    5a7c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    5a7e:	88eb      	ldrh	r3, [r5, #6]
    5a80:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    5a82:	4631      	mov	r1, r6
    5a84:	f242 0013 	movw	r0, #8211	; 0x2013
}
    5a88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    5a8c:	f7fd bbb4 	b.w	31f8 <bt_hci_cmd_send>
}
    5a90:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005a98 <bt_conn_le_param_update>:
{
    5a98:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    5a9a:	880a      	ldrh	r2, [r1, #0]
    5a9c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    5aa0:	429a      	cmp	r2, r3
{
    5aa2:	4604      	mov	r4, r0
    5aa4:	460d      	mov	r5, r1
	if (conn->le.interval >= param->interval_min &&
    5aa6:	d80c      	bhi.n	5ac2 <bt_conn_le_param_update+0x2a>
    5aa8:	884a      	ldrh	r2, [r1, #2]
    5aaa:	429a      	cmp	r2, r3
    5aac:	d309      	bcc.n	5ac2 <bt_conn_le_param_update+0x2a>
	    conn->le.interval <= param->interval_max &&
    5aae:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    5ab2:	888b      	ldrh	r3, [r1, #4]
    5ab4:	429a      	cmp	r2, r3
    5ab6:	d104      	bne.n	5ac2 <bt_conn_le_param_update+0x2a>
	    conn->le.latency == param->latency &&
    5ab8:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    5abc:	88cb      	ldrh	r3, [r1, #6]
    5abe:	429a      	cmp	r2, r3
    5ac0:	d01a      	beq.n	5af8 <bt_conn_le_param_update+0x60>
	k_delayed_work_cancel(&conn->le.update_work);
    5ac2:	f104 0074 	add.w	r0, r4, #116	; 0x74
    5ac6:	f012 f91b 	bl	17d00 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    5aca:	4b0d      	ldr	r3, [pc, #52]	; (5b00 <bt_conn_le_param_update+0x68>)
    5acc:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5ad0:	079a      	lsls	r2, r3, #30
    5ad2:	d503      	bpl.n	5adc <bt_conn_le_param_update+0x44>
    5ad4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    5ad8:	079b      	lsls	r3, r3, #30
    5ada:	d401      	bmi.n	5ae0 <bt_conn_le_param_update+0x48>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    5adc:	78e3      	ldrb	r3, [r4, #3]
    5ade:	b92b      	cbnz	r3, 5aec <bt_conn_le_param_update+0x54>
		return bt_conn_le_conn_update(conn, param);
    5ae0:	4629      	mov	r1, r5
    5ae2:	4620      	mov	r0, r4
}
    5ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_conn_le_conn_update(conn, param);
    5ae8:	f7ff bfae 	b.w	5a48 <bt_conn_le_conn_update>
	return bt_l2cap_update_conn_param(conn, param);
    5aec:	4629      	mov	r1, r5
    5aee:	4620      	mov	r0, r4
}
    5af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    5af4:	f000 bb76 	b.w	61e4 <bt_l2cap_update_conn_param>
}
    5af8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    5afc:	bd38      	pop	{r3, r4, r5, pc}
    5afe:	bf00      	nop
    5b00:	20008618 	.word	0x20008618

00005b04 <le_conn_update>:
{
    5b04:	4603      	mov	r3, r0
    5b06:	b507      	push	{r0, r1, r2, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5b08:	f813 2c68 	ldrb.w	r2, [r3, #-104]
    5b0c:	2a02      	cmp	r2, #2
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    5b0e:	f1a0 0074 	sub.w	r0, r0, #116	; 0x74
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5b12:	d105      	bne.n	5b20 <le_conn_update+0x1c>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    5b14:	2113      	movs	r1, #19
    5b16:	f7ff ff69 	bl	59ec <bt_conn_disconnect>
}
    5b1a:	b003      	add	sp, #12
    5b1c:	f85d fb04 	ldr.w	pc, [sp], #4
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    5b20:	f833 2c14 	ldrh.w	r2, [r3, #-20]
    5b24:	f8ad 2000 	strh.w	r2, [sp]
    5b28:	f833 2c12 	ldrh.w	r2, [r3, #-18]
    5b2c:	f8ad 2002 	strh.w	r2, [sp, #2]
	bt_conn_le_param_update(conn, param);
    5b30:	4669      	mov	r1, sp
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    5b32:	f833 2c10 	ldrh.w	r2, [r3, #-16]
    5b36:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
    5b3a:	f8ad 2004 	strh.w	r2, [sp, #4]
    5b3e:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    5b42:	f7ff ffa9 	bl	5a98 <bt_conn_le_param_update>
    5b46:	e7e8      	b.n	5b1a <le_conn_update+0x16>

00005b48 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    5b48:	b538      	push	{r3, r4, r5, lr}

	if (!pool) {
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    5b4a:	4b08      	ldr	r3, [pc, #32]	; (5b6c <bt_conn_create_pdu+0x24>)
{
    5b4c:	460d      	mov	r5, r1
	buf = net_buf_alloc(pool, K_FOREVER);
    5b4e:	2800      	cmp	r0, #0
    5b50:	bf08      	it	eq
    5b52:	4618      	moveq	r0, r3
    5b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5b58:	f011 f8b0 	bl	16cbc <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    5b5c:	1d29      	adds	r1, r5, #4
	buf = net_buf_alloc(pool, K_FOREVER);
    5b5e:	4604      	mov	r4, r0
	net_buf_reserve(buf, reserve);
    5b60:	3008      	adds	r0, #8
    5b62:	f011 f8ca 	bl	16cfa <net_buf_simple_reserve>

	return buf;
}
    5b66:	4620      	mov	r0, r4
    5b68:	bd38      	pop	{r3, r4, r5, pc}
    5b6a:	bf00      	nop
    5b6c:	20008b34 	.word	0x20008b34

00005b70 <create_frag.isra.6>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    5b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b74:	4606      	mov	r6, r0
    5b76:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(&frag_pool, 0);
    5b78:	4816      	ldr	r0, [pc, #88]	; (5bd4 <create_frag.isra.6+0x64>)
    5b7a:	2100      	movs	r1, #0
    5b7c:	f7ff ffe4 	bl	5b48 <bt_conn_create_pdu>
	if (conn->state != BT_CONN_CONNECTED) {
    5b80:	7833      	ldrb	r3, [r6, #0]
    5b82:	2b03      	cmp	r3, #3
	frag = bt_conn_create_pdu(&frag_pool, 0);
    5b84:	4605      	mov	r5, r0
    5b86:	f04f 0600 	mov.w	r6, #0
	if (conn->state != BT_CONN_CONNECTED) {
    5b8a:	d005      	beq.n	5b98 <create_frag.isra.6+0x28>
		net_buf_unref(frag);
    5b8c:	f011 f8c6 	bl	16d1c <net_buf_unref>
		return NULL;
    5b90:	4635      	mov	r5, r6
}
    5b92:	4628      	mov	r0, r5
    5b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn_tx(frag)->cb = NULL;
    5b98:	6146      	str	r6, [r0, #20]
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5b9a:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    5b9e:	4e0e      	ldr	r6, [pc, #56]	; (5bd8 <create_frag.isra.6+0x68>)
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5ba0:	4638      	mov	r0, r7
    5ba2:	f8b6 8088 	ldrh.w	r8, [r6, #136]	; 0x88
    5ba6:	f011 f935 	bl	16e14 <net_buf_simple_tailroom>
    5baa:	4580      	cmp	r8, r0
    5bac:	d20c      	bcs.n	5bc8 <create_frag.isra.6+0x58>
	return bt_dev.le.mtu;
    5bae:	f8b6 6088 	ldrh.w	r6, [r6, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    5bb2:	f854 1f08 	ldr.w	r1, [r4, #8]!
    5bb6:	4632      	mov	r2, r6
    5bb8:	4638      	mov	r0, r7
    5bba:	f011 f8e7 	bl	16d8c <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    5bbe:	4631      	mov	r1, r6
    5bc0:	4620      	mov	r0, r4
    5bc2:	f011 f90b 	bl	16ddc <net_buf_simple_pull>
    5bc6:	e7e4      	b.n	5b92 <create_frag.isra.6+0x22>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    5bc8:	4638      	mov	r0, r7
    5bca:	f011 f923 	bl	16e14 <net_buf_simple_tailroom>
    5bce:	b286      	uxth	r6, r0
    5bd0:	e7ef      	b.n	5bb2 <create_frag.isra.6+0x42>
    5bd2:	bf00      	nop
    5bd4:	20008b54 	.word	0x20008b54
    5bd8:	20008618 	.word	0x20008618

00005bdc <bt_conn_process_tx>:
	if (conn->state == BT_CONN_DISCONNECTED &&
    5bdc:	7b03      	ldrb	r3, [r0, #12]
{
    5bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5be0:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    5be2:	b99b      	cbnz	r3, 5c0c <bt_conn_process_tx+0x30>
    5be4:	f3bf 8f5b 	dmb	ish
    5be8:	1d03      	adds	r3, r0, #4
    5bea:	e853 2f00 	ldrex	r2, [r3]
    5bee:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    5bf2:	e843 1400 	strex	r4, r1, [r3]
    5bf6:	2c00      	cmp	r4, #0
    5bf8:	d1f7      	bne.n	5bea <bt_conn_process_tx+0xe>
    5bfa:	f3bf 8f5b 	dmb	ish
    5bfe:	0653      	lsls	r3, r2, #25
    5c00:	d504      	bpl.n	5c0c <bt_conn_process_tx+0x30>
}
    5c02:	b003      	add	sp, #12
    5c04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    5c08:	f7ff bc32 	b.w	5470 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    5c0c:	2100      	movs	r1, #0
    5c0e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    5c12:	f011 f859 	bl	16cc8 <net_buf_get>
	BT_ASSERT(buf);
    5c16:	4604      	mov	r4, r0
    5c18:	b970      	cbnz	r0, 5c38 <bt_conn_process_tx+0x5c>
    5c1a:	4b22      	ldr	r3, [pc, #136]	; (5ca4 <bt_conn_process_tx+0xc8>)
    5c1c:	9301      	str	r3, [sp, #4]
    5c1e:	9300      	str	r3, [sp, #0]
    5c20:	4a21      	ldr	r2, [pc, #132]	; (5ca8 <bt_conn_process_tx+0xcc>)
    5c22:	4b22      	ldr	r3, [pc, #136]	; (5cac <bt_conn_process_tx+0xd0>)
    5c24:	4922      	ldr	r1, [pc, #136]	; (5cb0 <bt_conn_process_tx+0xd4>)
    5c26:	4823      	ldr	r0, [pc, #140]	; (5cb4 <bt_conn_process_tx+0xd8>)
    5c28:	f7fb fd5a 	bl	16e0 <printk>
    5c2c:	4040      	eors	r0, r0
    5c2e:	f380 8811 	msr	BASEPRI, r0
    5c32:	f04f 0004 	mov.w	r0, #4
    5c36:	df02      	svc	2
	return bt_dev.le.mtu;
    5c38:	4e1f      	ldr	r6, [pc, #124]	; (5cb8 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
    5c3a:	8981      	ldrh	r1, [r0, #12]
    5c3c:	f8b6 2088 	ldrh.w	r2, [r6, #136]	; 0x88
    5c40:	4291      	cmp	r1, r2
    5c42:	d808      	bhi.n	5c56 <bt_conn_process_tx+0x7a>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    5c44:	2300      	movs	r3, #0
    5c46:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5c48:	4621      	mov	r1, r4
    5c4a:	4628      	mov	r0, r5
    5c4c:	f7ff fb74 	bl	5338 <send_frag>
	if (!send_buf(conn, buf)) {
    5c50:	b148      	cbz	r0, 5c66 <bt_conn_process_tx+0x8a>
}
    5c52:	b003      	add	sp, #12
    5c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c56:	f105 070c 	add.w	r7, r5, #12
	frag = create_frag(conn, buf);
    5c5a:	4601      	mov	r1, r0
    5c5c:	4638      	mov	r0, r7
    5c5e:	f7ff ff87 	bl	5b70 <create_frag.isra.6>
	if (!frag) {
    5c62:	4601      	mov	r1, r0
    5c64:	b928      	cbnz	r0, 5c72 <bt_conn_process_tx+0x96>
		net_buf_unref(buf);
    5c66:	4620      	mov	r0, r4
}
    5c68:	b003      	add	sp, #12
    5c6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    5c6e:	f011 b855 	b.w	16d1c <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    5c72:	2301      	movs	r3, #1
    5c74:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5c76:	4628      	mov	r0, r5
    5c78:	f7ff fb5e 	bl	5338 <send_frag>
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d0f2      	beq.n	5c66 <bt_conn_process_tx+0x8a>
	while (buf->len > conn_mtu(conn)) {
    5c80:	89a2      	ldrh	r2, [r4, #12]
    5c82:	f8b6 3088 	ldrh.w	r3, [r6, #136]	; 0x88
    5c86:	429a      	cmp	r2, r3
    5c88:	d802      	bhi.n	5c90 <bt_conn_process_tx+0xb4>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    5c8a:	2300      	movs	r3, #0
    5c8c:	2201      	movs	r2, #1
    5c8e:	e7db      	b.n	5c48 <bt_conn_process_tx+0x6c>
		frag = create_frag(conn, buf);
    5c90:	4621      	mov	r1, r4
    5c92:	4638      	mov	r0, r7
    5c94:	f7ff ff6c 	bl	5b70 <create_frag.isra.6>
		if (!frag) {
    5c98:	4601      	mov	r1, r0
    5c9a:	2800      	cmp	r0, #0
    5c9c:	d0e3      	beq.n	5c66 <bt_conn_process_tx+0x8a>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    5c9e:	2301      	movs	r3, #1
    5ca0:	461a      	mov	r2, r3
    5ca2:	e7e8      	b.n	5c76 <bt_conn_process_tx+0x9a>
    5ca4:	0001868d 	.word	0x0001868d
    5ca8:	00019a84 	.word	0x00019a84
    5cac:	00019b03 	.word	0x00019b03
    5cb0:	00019a8b 	.word	0x00019a8b
    5cb4:	000198bf 	.word	0x000198bf
    5cb8:	20008618 	.word	0x20008618

00005cbc <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    5cbc:	4b03      	ldr	r3, [pc, #12]	; (5ccc <bt_conn_get_id+0x10>)
    5cbe:	1ac0      	subs	r0, r0, r3
    5cc0:	4b03      	ldr	r3, [pc, #12]	; (5cd0 <bt_conn_get_id+0x14>)
    5cc2:	1080      	asrs	r0, r0, #2
    5cc4:	4358      	muls	r0, r3
}
    5cc6:	b2c0      	uxtb	r0, r0
    5cc8:	4770      	bx	lr
    5cca:	bf00      	nop
    5ccc:	2000045c 	.word	0x2000045c
    5cd0:	96f96f97 	.word	0x96f96f97

00005cd4 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    5cd4:	4b14      	ldr	r3, [pc, #80]	; (5d28 <bt_conn_init+0x54>)
    5cd6:	b570      	push	{r4, r5, r6, lr}
    5cd8:	2200      	movs	r2, #0
    5cda:	681d      	ldr	r5, [r3, #0]
    5cdc:	6859      	ldr	r1, [r3, #4]
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    5cde:	4e13      	ldr	r6, [pc, #76]	; (5d2c <bt_conn_init+0x58>)
{
    5ce0:	4614      	mov	r4, r2
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    5ce2:	18b0      	adds	r0, r6, r2
	node->next = list->head;
    5ce4:	5195      	str	r5, [r2, r6]
	if (!list->tail) {
    5ce6:	b909      	cbnz	r1, 5cec <bt_conn_init+0x18>
		list->tail = list->head;
    5ce8:	4601      	mov	r1, r0
	if (!list->tail) {
    5cea:	2401      	movs	r4, #1
    5cec:	3208      	adds	r2, #8
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    5cee:	2a50      	cmp	r2, #80	; 0x50
	list->head = node;
    5cf0:	4605      	mov	r5, r0
    5cf2:	d1f6      	bne.n	5ce2 <bt_conn_init+0xe>
    5cf4:	6018      	str	r0, [r3, #0]
    5cf6:	b104      	cbz	r4, 5cfa <bt_conn_init+0x26>
    5cf8:	6059      	str	r1, [r3, #4]
	}

	bt_att_init();
    5cfa:	f001 fc05 	bl	7508 <bt_att_init>

	err = bt_smp_init();
    5cfe:	f004 fa93 	bl	a228 <bt_smp_init>
	if (err) {
    5d02:	4604      	mov	r4, r0
    5d04:	b970      	cbnz	r0, 5d24 <bt_conn_init+0x50>
		return err;
	}

	bt_l2cap_init();
    5d06:	f000 fa95 	bl	6234 <bt_l2cap_init>
	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
			struct bt_conn *conn = &conns[i];

			if (!atomic_get(&conn->ref)) {
    5d0a:	4809      	ldr	r0, [pc, #36]	; (5d30 <bt_conn_init+0x5c>)
    5d0c:	f7ff f906 	bl	4f1c <atomic_get>
    5d10:	b140      	cbz	r0, 5d24 <bt_conn_init+0x50>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5d12:	4808      	ldr	r0, [pc, #32]	; (5d34 <bt_conn_init+0x60>)
    5d14:	f7ff f902 	bl	4f1c <atomic_get>
				continue;
			}

			if (atomic_test_bit(conn->flags,
    5d18:	07c3      	lsls	r3, r0, #31
    5d1a:	d503      	bpl.n	5d24 <bt_conn_init+0x50>
					    BT_CONN_AUTO_CONNECT)) {
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5d1c:	2101      	movs	r1, #1
    5d1e:	4806      	ldr	r0, [pc, #24]	; (5d38 <bt_conn_init+0x64>)
    5d20:	f7ff fc42 	bl	55a8 <bt_conn_set_state>
			}
		}
	}

	return 0;
}
    5d24:	4620      	mov	r0, r4
    5d26:	bd70      	pop	{r4, r5, r6, pc}
    5d28:	200004f8 	.word	0x200004f8
    5d2c:	2000040c 	.word	0x2000040c
    5d30:	200004a0 	.word	0x200004a0
    5d34:	20000460 	.word	0x20000460
    5d38:	2000045c 	.word	0x2000045c

00005d3c <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    5d3c:	4770      	bx	lr
	...

00005d40 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    5d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    5d42:	4a0b      	ldr	r2, [pc, #44]	; (5d70 <l2cap_accept+0x30>)
    5d44:	6813      	ldr	r3, [r2, #0]
    5d46:	b933      	cbnz	r3, 5d56 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    5d48:	480a      	ldr	r0, [pc, #40]	; (5d74 <l2cap_accept+0x34>)
    5d4a:	6050      	str	r0, [r2, #4]
		*chan = &l2cap->chan.chan;
    5d4c:	600a      	str	r2, [r1, #0]

		return 0;
    5d4e:	4618      	mov	r0, r3
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    5d50:	b005      	add	sp, #20
    5d52:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    5d56:	4b08      	ldr	r3, [pc, #32]	; (5d78 <l2cap_accept+0x38>)
    5d58:	9302      	str	r3, [sp, #8]
    5d5a:	9001      	str	r0, [sp, #4]
    5d5c:	9300      	str	r3, [sp, #0]
    5d5e:	4a07      	ldr	r2, [pc, #28]	; (5d7c <l2cap_accept+0x3c>)
    5d60:	4b07      	ldr	r3, [pc, #28]	; (5d80 <l2cap_accept+0x40>)
    5d62:	4908      	ldr	r1, [pc, #32]	; (5d84 <l2cap_accept+0x44>)
    5d64:	4808      	ldr	r0, [pc, #32]	; (5d88 <l2cap_accept+0x48>)
    5d66:	f7fb fcbb 	bl	16e0 <printk>
	return -ENOMEM;
    5d6a:	f06f 000b 	mvn.w	r0, #11
    5d6e:	e7ef      	b.n	5d50 <l2cap_accept+0x10>
    5d70:	20000500 	.word	0x20000500
    5d74:	2000876c 	.word	0x2000876c
    5d78:	0001868d 	.word	0x0001868d
    5d7c:	00019a84 	.word	0x00019a84
    5d80:	00019d1a 	.word	0x00019d1a
    5d84:	00019a8b 	.word	0x00019a8b
    5d88:	00019d89 	.word	0x00019d89

00005d8c <l2cap_create_le_sig_pdu.isra.2>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d8e:	4607      	mov	r7, r0
    5d90:	460e      	mov	r6, r1
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5d92:	2000      	movs	r0, #0
    5d94:	2104      	movs	r1, #4
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    5d96:	4615      	mov	r5, r2
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5d98:	f7ff fed6 	bl	5b48 <bt_conn_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5d9c:	2104      	movs	r1, #4
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5d9e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5da0:	3008      	adds	r0, #8
    5da2:	f010 ffed 	bl	16d80 <net_buf_simple_add>
	hdr->code = code;
    5da6:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    5da8:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    5daa:	8045      	strh	r5, [r0, #2]
}
    5dac:	4620      	mov	r0, r4
    5dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005db0 <l2cap_connected>:
    5db0:	4770      	bx	lr
	...

00005db4 <bt_l2cap_le_fixed_chan_register>:
	node->next = NULL;
    5db4:	2300      	movs	r3, #0
    5db6:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    5db8:	4b05      	ldr	r3, [pc, #20]	; (5dd0 <bt_l2cap_le_fixed_chan_register+0x1c>)
    5dba:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&le_channels, &chan->node);
    5dbc:	f100 0208 	add.w	r2, r0, #8
    5dc0:	b911      	cbnz	r1, 5dc8 <bt_l2cap_le_fixed_chan_register+0x14>
		list->tail = node;
    5dc2:	605a      	str	r2, [r3, #4]
		list->head = node;
    5dc4:	601a      	str	r2, [r3, #0]
    5dc6:	4770      	bx	lr
		list->tail->next = node;
    5dc8:	600a      	str	r2, [r1, #0]
		list->tail = node;
    5dca:	605a      	str	r2, [r3, #4]
    5dcc:	4770      	bx	lr
    5dce:	bf00      	nop
    5dd0:	20000598 	.word	0x20000598

00005dd4 <bt_l2cap_chan_remove>:
{
    5dd4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    5dd6:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5dd8:	b113      	cbz	r3, 5de0 <bt_l2cap_chan_remove+0xc>
    5dda:	3b08      	subs	r3, #8
    5ddc:	2200      	movs	r2, #0
    5dde:	b903      	cbnz	r3, 5de2 <bt_l2cap_chan_remove+0xe>
    5de0:	bd30      	pop	{r4, r5, pc}
		if (chan == ch) {
    5de2:	428b      	cmp	r3, r1
    5de4:	f103 0408 	add.w	r4, r3, #8
    5de8:	d10e      	bne.n	5e08 <bt_l2cap_chan_remove+0x34>
    5dea:	6899      	ldr	r1, [r3, #8]
    5dec:	6c05      	ldr	r5, [r0, #64]	; 0x40
	if (!prev_node) {
    5dee:	b932      	cbnz	r2, 5dfe <bt_l2cap_chan_remove+0x2a>
		if (list->tail == node) {
    5df0:	42ac      	cmp	r4, r5
		list->head = node->next;
    5df2:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    5df4:	d100      	bne.n	5df8 <bt_l2cap_chan_remove+0x24>
			list->tail = list->head;
    5df6:	6401      	str	r1, [r0, #64]	; 0x40
	node->next = NULL;
    5df8:	2200      	movs	r2, #0
    5dfa:	609a      	str	r2, [r3, #8]
    5dfc:	bd30      	pop	{r4, r5, pc}
		if (list->tail == node) {
    5dfe:	42ac      	cmp	r4, r5
		prev_node->next = node->next;
    5e00:	6011      	str	r1, [r2, #0]
			list->tail = prev_node;
    5e02:	bf08      	it	eq
    5e04:	6402      	streq	r2, [r0, #64]	; 0x40
    5e06:	e7f7      	b.n	5df8 <bt_l2cap_chan_remove+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    5e08:	4622      	mov	r2, r4
    5e0a:	2c00      	cmp	r4, #0
    5e0c:	d0e8      	beq.n	5de0 <bt_l2cap_chan_remove+0xc>
	return node->next;
    5e0e:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5e10:	2b00      	cmp	r3, #0
    5e12:	d0e5      	beq.n	5de0 <bt_l2cap_chan_remove+0xc>
    5e14:	3b08      	subs	r3, #8
    5e16:	e7e2      	b.n	5dde <bt_l2cap_chan_remove+0xa>

00005e18 <bt_l2cap_chan_del>:
	if (!chan->conn) {
    5e18:	6803      	ldr	r3, [r0, #0]
{
    5e1a:	b510      	push	{r4, lr}
    5e1c:	4604      	mov	r4, r0
	if (!chan->conn) {
    5e1e:	b12b      	cbz	r3, 5e2c <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    5e20:	6843      	ldr	r3, [r0, #4]
    5e22:	685b      	ldr	r3, [r3, #4]
    5e24:	b103      	cbz	r3, 5e28 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    5e26:	4798      	blx	r3
	chan->conn = NULL;
    5e28:	2300      	movs	r3, #0
    5e2a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
    5e2c:	68e3      	ldr	r3, [r4, #12]
    5e2e:	b11b      	cbz	r3, 5e38 <bt_l2cap_chan_del+0x20>
		chan->destroy(chan);
    5e30:	4620      	mov	r0, r4
}
    5e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		chan->destroy(chan);
    5e36:	4718      	bx	r3
    5e38:	bd10      	pop	{r4, pc}
	...

00005e3c <l2cap_rtx_timeout>:
{
    5e3c:	b530      	push	{r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
    5e3e:	4b0c      	ldr	r3, [pc, #48]	; (5e70 <l2cap_rtx_timeout+0x34>)
    5e40:	4a0c      	ldr	r2, [pc, #48]	; (5e74 <l2cap_rtx_timeout+0x38>)
    5e42:	490d      	ldr	r1, [pc, #52]	; (5e78 <l2cap_rtx_timeout+0x3c>)
{
    5e44:	b085      	sub	sp, #20
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
    5e46:	f1a0 0410 	sub.w	r4, r0, #16
{
    5e4a:	4605      	mov	r5, r0
	BT_ERR("chan %p timeout", chan);
    5e4c:	9302      	str	r3, [sp, #8]
    5e4e:	e88d 0018 	stmia.w	sp, {r3, r4}
    5e52:	480a      	ldr	r0, [pc, #40]	; (5e7c <l2cap_rtx_timeout+0x40>)
    5e54:	4b0a      	ldr	r3, [pc, #40]	; (5e80 <l2cap_rtx_timeout+0x44>)
    5e56:	f7fb fc43 	bl	16e0 <printk>
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    5e5a:	f855 0c10 	ldr.w	r0, [r5, #-16]
    5e5e:	4621      	mov	r1, r4
    5e60:	f7ff ffb8 	bl	5dd4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    5e64:	4620      	mov	r0, r4
}
    5e66:	b005      	add	sp, #20
    5e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    5e6c:	f7ff bfd4 	b.w	5e18 <bt_l2cap_chan_del>
    5e70:	0001868d 	.word	0x0001868d
    5e74:	00019a84 	.word	0x00019a84
    5e78:	00019a8b 	.word	0x00019a8b
    5e7c:	00019edd 	.word	0x00019edd
    5e80:	00019cc4 	.word	0x00019cc4

00005e84 <bt_l2cap_connected>:
{
    5e84:	4b1a      	ldr	r3, [pc, #104]	; (5ef0 <bt_l2cap_connected+0x6c>)
    5e86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5e8a:	681c      	ldr	r4, [r3, #0]
    5e8c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5e8e:	b12c      	cbz	r4, 5e9c <bt_l2cap_connected+0x18>
	node->next = NULL;
    5e90:	2700      	movs	r7, #0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5e92:	f8df 8060 	ldr.w	r8, [pc, #96]	; 5ef4 <bt_l2cap_connected+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5e96:	3c08      	subs	r4, #8
    5e98:	46b9      	mov	r9, r7
    5e9a:	b914      	cbnz	r4, 5ea2 <bt_l2cap_connected+0x1e>
}
    5e9c:	b003      	add	sp, #12
    5e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    5ea2:	6863      	ldr	r3, [r4, #4]
    5ea4:	a901      	add	r1, sp, #4
    5ea6:	4630      	mov	r0, r6
    5ea8:	4798      	blx	r3
    5eaa:	2800      	cmp	r0, #0
    5eac:	db18      	blt.n	5ee0 <bt_l2cap_connected+0x5c>
		ch = BT_L2CAP_LE_CHAN(chan);
    5eae:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    5eb0:	8823      	ldrh	r3, [r4, #0]
    5eb2:	872b      	strh	r3, [r5, #56]	; 0x38
		ch->tx.cid = fchan->cid;
    5eb4:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    5eb8:	4641      	mov	r1, r8
    5eba:	f105 0010 	add.w	r0, r5, #16
    5ebe:	f011 ff01 	bl	17cc4 <k_delayed_work_init>
	if (!list->tail) {
    5ec2:	6c32      	ldr	r2, [r6, #64]	; 0x40
	node->next = NULL;
    5ec4:	60af      	str	r7, [r5, #8]
	sys_slist_append(&conn->channels, &chan->node);
    5ec6:	f105 0308 	add.w	r3, r5, #8
	if (!list->tail) {
    5eca:	b972      	cbnz	r2, 5eea <bt_l2cap_connected+0x66>
		list->tail = node;
    5ecc:	6433      	str	r3, [r6, #64]	; 0x40
		list->head = node;
    5ece:	63f3      	str	r3, [r6, #60]	; 0x3c
		if (chan->ops->connected) {
    5ed0:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    5ed2:	602e      	str	r6, [r5, #0]
		if (chan->ops->connected) {
    5ed4:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    5ed6:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    5eda:	681b      	ldr	r3, [r3, #0]
    5edc:	b103      	cbz	r3, 5ee0 <bt_l2cap_connected+0x5c>
			chan->ops->connected(chan);
    5ede:	4798      	blx	r3
	return node->next;
    5ee0:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    5ee2:	2c00      	cmp	r4, #0
    5ee4:	d0da      	beq.n	5e9c <bt_l2cap_connected+0x18>
    5ee6:	3c08      	subs	r4, #8
    5ee8:	e7d7      	b.n	5e9a <bt_l2cap_connected+0x16>
		list->tail->next = node;
    5eea:	6013      	str	r3, [r2, #0]
		list->tail = node;
    5eec:	6433      	str	r3, [r6, #64]	; 0x40
    5eee:	e7ef      	b.n	5ed0 <bt_l2cap_connected+0x4c>
    5ef0:	20000598 	.word	0x20000598
    5ef4:	00005e3d 	.word	0x00005e3d

00005ef8 <bt_l2cap_disconnected>:
{
    5ef8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    5efa:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5efc:	b1a3      	cbz	r3, 5f28 <bt_l2cap_disconnected+0x30>
    5efe:	f1b3 0008 	subs.w	r0, r3, #8
    5f02:	d10a      	bne.n	5f1a <bt_l2cap_disconnected+0x22>
    5f04:	bd10      	pop	{r4, pc}
    5f06:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
    5f08:	f7ff ff86 	bl	5e18 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5f0c:	b164      	cbz	r4, 5f28 <bt_l2cap_disconnected+0x30>
	return node->next;
    5f0e:	68a3      	ldr	r3, [r4, #8]
    5f10:	b103      	cbz	r3, 5f14 <bt_l2cap_disconnected+0x1c>
    5f12:	3b08      	subs	r3, #8
{
    5f14:	4620      	mov	r0, r4
    5f16:	461c      	mov	r4, r3
    5f18:	e7f6      	b.n	5f08 <bt_l2cap_disconnected+0x10>
    5f1a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    5f1c:	2c00      	cmp	r4, #0
    5f1e:	d1f2      	bne.n	5f06 <bt_l2cap_disconnected+0xe>
}
    5f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_l2cap_chan_del(chan);
    5f24:	f7ff bf78 	b.w	5e18 <bt_l2cap_chan_del>
    5f28:	bd10      	pop	{r4, pc}

00005f2a <bt_l2cap_encrypt_change>:
{
    5f2a:	b538      	push	{r3, r4, r5, lr}
    5f2c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    5f2e:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    5f30:	b10c      	cbz	r4, 5f36 <bt_l2cap_encrypt_change+0xc>
    5f32:	3c08      	subs	r4, #8
    5f34:	b904      	cbnz	r4, 5f38 <bt_l2cap_encrypt_change+0xe>
    5f36:	bd38      	pop	{r3, r4, r5, pc}
		if (chan->ops->encrypt_change) {
    5f38:	6863      	ldr	r3, [r4, #4]
    5f3a:	689b      	ldr	r3, [r3, #8]
    5f3c:	b113      	cbz	r3, 5f44 <bt_l2cap_encrypt_change+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
    5f3e:	4629      	mov	r1, r5
    5f40:	4620      	mov	r0, r4
    5f42:	4798      	blx	r3
    5f44:	68a4      	ldr	r4, [r4, #8]
    5f46:	e7f3      	b.n	5f30 <bt_l2cap_encrypt_change+0x6>

00005f48 <bt_l2cap_create_pdu>:
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    5f48:	3104      	adds	r1, #4
    5f4a:	f7ff bdfd 	b.w	5b48 <bt_conn_create_pdu>

00005f4e <bt_l2cap_send_cb>:
{
    5f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f50:	4614      	mov	r4, r2
    5f52:	4605      	mov	r5, r0
    5f54:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
    5f56:	f102 0008 	add.w	r0, r2, #8
    5f5a:	2104      	movs	r1, #4
{
    5f5c:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    5f5e:	f010 ff35 	bl	16dcc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5f62:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
    5f64:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    5f66:	3904      	subs	r1, #4
    5f68:	8001      	strh	r1, [r0, #0]
	bt_conn_send_cb(conn, buf, cb);
    5f6a:	4632      	mov	r2, r6
    5f6c:	4621      	mov	r1, r4
    5f6e:	4628      	mov	r0, r5
}
    5f70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_send_cb(conn, buf, cb);
    5f74:	f7ff b99a 	b.w	52ac <bt_conn_send_cb>

00005f78 <l2cap_recv>:
{
    5f78:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    5f7a:	898b      	ldrh	r3, [r1, #12]
    5f7c:	2b03      	cmp	r3, #3
{
    5f7e:	b087      	sub	sp, #28
    5f80:	4607      	mov	r7, r0
    5f82:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    5f84:	d809      	bhi.n	5f9a <l2cap_recv+0x22>
		BT_ERR("Too small L2CAP signaling PDU");
    5f86:	4b5a      	ldr	r3, [pc, #360]	; (60f0 <l2cap_recv+0x178>)
    5f88:	9301      	str	r3, [sp, #4]
    5f8a:	9300      	str	r3, [sp, #0]
    5f8c:	4a59      	ldr	r2, [pc, #356]	; (60f4 <l2cap_recv+0x17c>)
    5f8e:	4b5a      	ldr	r3, [pc, #360]	; (60f8 <l2cap_recv+0x180>)
    5f90:	495a      	ldr	r1, [pc, #360]	; (60fc <l2cap_recv+0x184>)
    5f92:	485b      	ldr	r0, [pc, #364]	; (6100 <l2cap_recv+0x188>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    5f94:	f7fb fba4 	bl	16e0 <printk>
		return;
    5f98:	e014      	b.n	5fc4 <l2cap_recv+0x4c>
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5f9a:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    5f9c:	2104      	movs	r1, #4
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    5f9e:	f850 4f08 	ldr.w	r4, [r0, #8]!
	len = sys_le16_to_cpu(hdr->len);
    5fa2:	8866      	ldrh	r6, [r4, #2]
	net_buf_pull(buf, sizeof(*hdr));
    5fa4:	f010 ff1a 	bl	16ddc <net_buf_simple_pull>
	if (buf->len != len) {
    5fa8:	89aa      	ldrh	r2, [r5, #12]
    5faa:	4296      	cmp	r6, r2
    5fac:	d00c      	beq.n	5fc8 <l2cap_recv+0x50>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    5fae:	4b50      	ldr	r3, [pc, #320]	; (60f0 <l2cap_recv+0x178>)
    5fb0:	9303      	str	r3, [sp, #12]
    5fb2:	9201      	str	r2, [sp, #4]
    5fb4:	9300      	str	r3, [sp, #0]
    5fb6:	9602      	str	r6, [sp, #8]
    5fb8:	4b4f      	ldr	r3, [pc, #316]	; (60f8 <l2cap_recv+0x180>)
    5fba:	4a4e      	ldr	r2, [pc, #312]	; (60f4 <l2cap_recv+0x17c>)
    5fbc:	494f      	ldr	r1, [pc, #316]	; (60fc <l2cap_recv+0x184>)
    5fbe:	4851      	ldr	r0, [pc, #324]	; (6104 <l2cap_recv+0x18c>)
    5fc0:	f7fb fb8e 	bl	16e0 <printk>
}
    5fc4:	b007      	add	sp, #28
    5fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
    5fc8:	7861      	ldrb	r1, [r4, #1]
    5fca:	b939      	cbnz	r1, 5fdc <l2cap_recv+0x64>
		BT_ERR("Invalid ident value in L2CAP PDU");
    5fcc:	4b48      	ldr	r3, [pc, #288]	; (60f0 <l2cap_recv+0x178>)
    5fce:	9301      	str	r3, [sp, #4]
    5fd0:	9300      	str	r3, [sp, #0]
    5fd2:	4a48      	ldr	r2, [pc, #288]	; (60f4 <l2cap_recv+0x17c>)
    5fd4:	4b48      	ldr	r3, [pc, #288]	; (60f8 <l2cap_recv+0x180>)
    5fd6:	4949      	ldr	r1, [pc, #292]	; (60fc <l2cap_recv+0x184>)
    5fd8:	484b      	ldr	r0, [pc, #300]	; (6108 <l2cap_recv+0x190>)
    5fda:	e7db      	b.n	5f94 <l2cap_recv+0x1c>
	switch (hdr->code) {
    5fdc:	7823      	ldrb	r3, [r4, #0]
    5fde:	2b12      	cmp	r3, #18
    5fe0:	d029      	beq.n	6036 <l2cap_recv+0xbe>
    5fe2:	2b13      	cmp	r3, #19
    5fe4:	d01d      	beq.n	6022 <l2cap_recv+0xaa>
    5fe6:	2b01      	cmp	r3, #1
    5fe8:	d0ec      	beq.n	5fc4 <l2cap_recv+0x4c>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    5fea:	4a41      	ldr	r2, [pc, #260]	; (60f0 <l2cap_recv+0x178>)
    5fec:	9202      	str	r2, [sp, #8]
    5fee:	e88d 000c 	stmia.w	sp, {r2, r3}
    5ff2:	4942      	ldr	r1, [pc, #264]	; (60fc <l2cap_recv+0x184>)
    5ff4:	4b40      	ldr	r3, [pc, #256]	; (60f8 <l2cap_recv+0x180>)
    5ff6:	4a45      	ldr	r2, [pc, #276]	; (610c <l2cap_recv+0x194>)
    5ff8:	4845      	ldr	r0, [pc, #276]	; (6110 <l2cap_recv+0x198>)
    5ffa:	f7fb fb71 	bl	16e0 <printk>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    5ffe:	2202      	movs	r2, #2
    6000:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    6002:	683d      	ldr	r5, [r7, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6004:	2001      	movs	r0, #1
    6006:	f7ff fec1 	bl	5d8c <l2cap_create_le_sig_pdu.isra.2>
	rej = net_buf_add(buf, sizeof(*rej));
    600a:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    600c:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    600e:	3008      	adds	r0, #8
    6010:	f010 feb6 	bl	16d80 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6014:	2300      	movs	r3, #0
    6016:	7003      	strb	r3, [r0, #0]
    6018:	7043      	strb	r3, [r0, #1]
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    601a:	4622      	mov	r2, r4
    601c:	2105      	movs	r1, #5
    601e:	4628      	mov	r0, r5
    6020:	e025      	b.n	606e <l2cap_recv+0xf6>
	if (buf->len < sizeof(*rsp)) {
    6022:	2e01      	cmp	r6, #1
    6024:	d8ce      	bhi.n	5fc4 <l2cap_recv+0x4c>
		BT_ERR("Too small LE conn param rsp");
    6026:	4b32      	ldr	r3, [pc, #200]	; (60f0 <l2cap_recv+0x178>)
    6028:	9301      	str	r3, [sp, #4]
    602a:	9300      	str	r3, [sp, #0]
    602c:	4a31      	ldr	r2, [pc, #196]	; (60f4 <l2cap_recv+0x17c>)
    602e:	4b39      	ldr	r3, [pc, #228]	; (6114 <l2cap_recv+0x19c>)
    6030:	4932      	ldr	r1, [pc, #200]	; (60fc <l2cap_recv+0x184>)
    6032:	4839      	ldr	r0, [pc, #228]	; (6118 <l2cap_recv+0x1a0>)
    6034:	e7ae      	b.n	5f94 <l2cap_recv+0x1c>
	if (buf->len < sizeof(*req)) {
    6036:	2e07      	cmp	r6, #7
    6038:	d807      	bhi.n	604a <l2cap_recv+0xd2>
		BT_ERR("Too small LE conn update param req");
    603a:	4b2d      	ldr	r3, [pc, #180]	; (60f0 <l2cap_recv+0x178>)
    603c:	9301      	str	r3, [sp, #4]
    603e:	9300      	str	r3, [sp, #0]
    6040:	4a2c      	ldr	r2, [pc, #176]	; (60f4 <l2cap_recv+0x17c>)
    6042:	4b36      	ldr	r3, [pc, #216]	; (611c <l2cap_recv+0x1a4>)
    6044:	492d      	ldr	r1, [pc, #180]	; (60fc <l2cap_recv+0x184>)
    6046:	4836      	ldr	r0, [pc, #216]	; (6120 <l2cap_recv+0x1a8>)
    6048:	e7a4      	b.n	5f94 <l2cap_recv+0x1c>
    604a:	683c      	ldr	r4, [r7, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
    604c:	78e6      	ldrb	r6, [r4, #3]
    604e:	b18e      	cbz	r6, 6074 <l2cap_recv+0xfc>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    6050:	2202      	movs	r2, #2
    6052:	2001      	movs	r0, #1
    6054:	f7ff fe9a 	bl	5d8c <l2cap_create_le_sig_pdu.isra.2>
	rej = net_buf_add(buf, sizeof(*rej));
    6058:	2102      	movs	r1, #2
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    605a:	4605      	mov	r5, r0
	rej = net_buf_add(buf, sizeof(*rej));
    605c:	3008      	adds	r0, #8
    605e:	f010 fe8f 	bl	16d80 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    6062:	2300      	movs	r3, #0
    6064:	7003      	strb	r3, [r0, #0]
    6066:	7043      	strb	r3, [r0, #1]
    6068:	462a      	mov	r2, r5
    606a:	2105      	movs	r1, #5
    606c:	4620      	mov	r0, r4
    606e:	f7ff ff6e 	bl	5f4e <bt_l2cap_send_cb>
    6072:	e7a7      	b.n	5fc4 <l2cap_recv+0x4c>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    6074:	68ab      	ldr	r3, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    6076:	7858      	ldrb	r0, [r3, #1]
    6078:	781a      	ldrb	r2, [r3, #0]
    607a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    607e:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    6082:	78d8      	ldrb	r0, [r3, #3]
    6084:	789a      	ldrb	r2, [r3, #2]
    6086:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    608a:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(req->latency);
    608e:	7958      	ldrb	r0, [r3, #5]
    6090:	791a      	ldrb	r2, [r3, #4]
    6092:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    6096:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(req->timeout);
    609a:	799a      	ldrb	r2, [r3, #6]
    609c:	79db      	ldrb	r3, [r3, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    609e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    60a0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    60a4:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    60a6:	f8ad 3016 	strh.w	r3, [sp, #22]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    60aa:	f7ff fe6f 	bl	5d8c <l2cap_create_le_sig_pdu.isra.2>
	accepted = le_param_req(conn, &param);
    60ae:	a904      	add	r1, sp, #16
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    60b0:	4607      	mov	r7, r0
	accepted = le_param_req(conn, &param);
    60b2:	4620      	mov	r0, r4
    60b4:	f7fe ff76 	bl	4fa4 <le_param_req>
	rsp = net_buf_add(buf, sizeof(*rsp));
    60b8:	2102      	movs	r1, #2
	accepted = le_param_req(conn, &param);
    60ba:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    60bc:	f107 0008 	add.w	r0, r7, #8
    60c0:	f010 fe5e 	bl	16d80 <net_buf_simple_add>
	if (accepted) {
    60c4:	b17d      	cbz	r5, 60e6 <l2cap_recv+0x16e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    60c6:	7006      	strb	r6, [r0, #0]
    60c8:	7046      	strb	r6, [r0, #1]
    60ca:	2300      	movs	r3, #0
    60cc:	463a      	mov	r2, r7
    60ce:	2105      	movs	r1, #5
    60d0:	4620      	mov	r0, r4
    60d2:	f7ff ff3c 	bl	5f4e <bt_l2cap_send_cb>
	if (accepted) {
    60d6:	2d00      	cmp	r5, #0
    60d8:	f43f af74 	beq.w	5fc4 <l2cap_recv+0x4c>
		bt_conn_le_conn_update(conn, &param);
    60dc:	a904      	add	r1, sp, #16
    60de:	4620      	mov	r0, r4
    60e0:	f7ff fcb2 	bl	5a48 <bt_conn_le_conn_update>
    60e4:	e76e      	b.n	5fc4 <l2cap_recv+0x4c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    60e6:	2301      	movs	r3, #1
    60e8:	7003      	strb	r3, [r0, #0]
    60ea:	7045      	strb	r5, [r0, #1]
    60ec:	e7ed      	b.n	60ca <l2cap_recv+0x152>
    60ee:	bf00      	nop
    60f0:	0001868d 	.word	0x0001868d
    60f4:	00019a84 	.word	0x00019a84
    60f8:	00019d01 	.word	0x00019d01
    60fc:	00019a8b 	.word	0x00019a8b
    6100:	00019dc0 	.word	0x00019dc0
    6104:	00019dee 	.word	0x00019dee
    6108:	00019e1f 	.word	0x00019e1f
    610c:	00019806 	.word	0x00019806
    6110:	00019eaf 	.word	0x00019eaf
    6114:	00019cd6 	.word	0x00019cd6
    6118:	00019e50 	.word	0x00019e50
    611c:	00019ce8 	.word	0x00019ce8
    6120:	00019e7c 	.word	0x00019e7c

00006124 <bt_l2cap_le_lookup_tx_cid>:
{
    6124:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6126:	b100      	cbz	r0, 612a <bt_l2cap_le_lookup_tx_cid+0x6>
    6128:	3808      	subs	r0, #8
    612a:	b900      	cbnz	r0, 612e <bt_l2cap_le_lookup_tx_cid+0xa>
}
    612c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    612e:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
    6132:	428b      	cmp	r3, r1
    6134:	d0fa      	beq.n	612c <bt_l2cap_le_lookup_tx_cid+0x8>
    6136:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6138:	2000      	movs	r0, #0
    613a:	2b00      	cmp	r3, #0
    613c:	d0f6      	beq.n	612c <bt_l2cap_le_lookup_tx_cid+0x8>
    613e:	f1a3 0008 	sub.w	r0, r3, #8
    6142:	e7f2      	b.n	612a <bt_l2cap_le_lookup_tx_cid+0x6>

00006144 <bt_l2cap_le_lookup_rx_cid>:
{
    6144:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6146:	b100      	cbz	r0, 614a <bt_l2cap_le_lookup_rx_cid+0x6>
    6148:	3808      	subs	r0, #8
    614a:	b900      	cbnz	r0, 614e <bt_l2cap_le_lookup_rx_cid+0xa>
}
    614c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    614e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    6150:	428b      	cmp	r3, r1
    6152:	d0fb      	beq.n	614c <bt_l2cap_le_lookup_rx_cid+0x8>
    6154:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6156:	2000      	movs	r0, #0
    6158:	2b00      	cmp	r3, #0
    615a:	d0f7      	beq.n	614c <bt_l2cap_le_lookup_rx_cid+0x8>
    615c:	f1a3 0008 	sub.w	r0, r3, #8
    6160:	e7f3      	b.n	614a <bt_l2cap_le_lookup_rx_cid+0x6>
	...

00006164 <bt_l2cap_recv>:
{
    6164:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (buf->len < sizeof(*hdr)) {
    6166:	898b      	ldrh	r3, [r1, #12]
    6168:	2b03      	cmp	r3, #3
{
    616a:	4606      	mov	r6, r0
    616c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    616e:	d80e      	bhi.n	618e <bt_l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP PDU received");
    6170:	4b15      	ldr	r3, [pc, #84]	; (61c8 <bt_l2cap_recv+0x64>)
    6172:	9301      	str	r3, [sp, #4]
    6174:	9300      	str	r3, [sp, #0]
    6176:	4a15      	ldr	r2, [pc, #84]	; (61cc <bt_l2cap_recv+0x68>)
    6178:	4b15      	ldr	r3, [pc, #84]	; (61d0 <bt_l2cap_recv+0x6c>)
    617a:	4916      	ldr	r1, [pc, #88]	; (61d4 <bt_l2cap_recv+0x70>)
    617c:	4816      	ldr	r0, [pc, #88]	; (61d8 <bt_l2cap_recv+0x74>)
    617e:	f7fb faaf 	bl	16e0 <printk>
	net_buf_unref(buf);
    6182:	4620      	mov	r0, r4
}
    6184:	b004      	add	sp, #16
    6186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	net_buf_unref(buf);
    618a:	f010 bdc7 	b.w	16d1c <net_buf_unref>
	cid = sys_le16_to_cpu(hdr->cid);
    618e:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    6190:	2104      	movs	r1, #4
	cid = sys_le16_to_cpu(hdr->cid);
    6192:	f850 3f08 	ldr.w	r3, [r0, #8]!
    6196:	885d      	ldrh	r5, [r3, #2]
	net_buf_pull(buf, sizeof(*hdr));
    6198:	f010 fe20 	bl	16ddc <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    619c:	4629      	mov	r1, r5
    619e:	4630      	mov	r0, r6
    61a0:	f7ff ffd0 	bl	6144 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    61a4:	b950      	cbnz	r0, 61bc <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    61a6:	4b08      	ldr	r3, [pc, #32]	; (61c8 <bt_l2cap_recv+0x64>)
    61a8:	9302      	str	r3, [sp, #8]
    61aa:	e88d 0028 	stmia.w	sp, {r3, r5}
    61ae:	4a0b      	ldr	r2, [pc, #44]	; (61dc <bt_l2cap_recv+0x78>)
    61b0:	4b07      	ldr	r3, [pc, #28]	; (61d0 <bt_l2cap_recv+0x6c>)
    61b2:	4908      	ldr	r1, [pc, #32]	; (61d4 <bt_l2cap_recv+0x70>)
    61b4:	480a      	ldr	r0, [pc, #40]	; (61e0 <bt_l2cap_recv+0x7c>)
    61b6:	f7fb fa93 	bl	16e0 <printk>
    61ba:	e7e2      	b.n	6182 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    61bc:	6843      	ldr	r3, [r0, #4]
    61be:	4621      	mov	r1, r4
    61c0:	691b      	ldr	r3, [r3, #16]
    61c2:	4798      	blx	r3
    61c4:	e7dd      	b.n	6182 <bt_l2cap_recv+0x1e>
    61c6:	bf00      	nop
    61c8:	0001868d 	.word	0x0001868d
    61cc:	00019a84 	.word	0x00019a84
    61d0:	00019d0c 	.word	0x00019d0c
    61d4:	00019a8b 	.word	0x00019a8b
    61d8:	00019d27 	.word	0x00019d27
    61dc:	00019806 	.word	0x00019806
    61e0:	00019d54 	.word	0x00019d54

000061e4 <bt_l2cap_update_conn_param>:
{
    61e4:	b570      	push	{r4, r5, r6, lr}
	ident++;
    61e6:	4b12      	ldr	r3, [pc, #72]	; (6230 <bt_l2cap_update_conn_param+0x4c>)
    61e8:	781a      	ldrb	r2, [r3, #0]
    61ea:	3201      	adds	r2, #1
	if (!ident) {
    61ec:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    61f0:	bf08      	it	eq
    61f2:	2201      	moveq	r2, #1
    61f4:	701a      	strb	r2, [r3, #0]
{
    61f6:	460c      	mov	r4, r1
    61f8:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    61fa:	7819      	ldrb	r1, [r3, #0]
    61fc:	2208      	movs	r2, #8
    61fe:	2012      	movs	r0, #18
    6200:	f7ff fdc4 	bl	5d8c <l2cap_create_le_sig_pdu.isra.2>
	req = net_buf_add(buf, sizeof(*req));
    6204:	2108      	movs	r1, #8
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    6206:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    6208:	4408      	add	r0, r1
    620a:	f010 fdb9 	bl	16d80 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    620e:	8823      	ldrh	r3, [r4, #0]
    6210:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    6212:	8863      	ldrh	r3, [r4, #2]
    6214:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    6216:	88a3      	ldrh	r3, [r4, #4]
    6218:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    621a:	88e3      	ldrh	r3, [r4, #6]
    621c:	80c3      	strh	r3, [r0, #6]
    621e:	4632      	mov	r2, r6
    6220:	4628      	mov	r0, r5
    6222:	2300      	movs	r3, #0
    6224:	2105      	movs	r1, #5
    6226:	f7ff fe92 	bl	5f4e <bt_l2cap_send_cb>
}
    622a:	2000      	movs	r0, #0
    622c:	bd70      	pop	{r4, r5, r6, pc}
    622e:	bf00      	nop
    6230:	20000594 	.word	0x20000594

00006234 <bt_l2cap_init>:
	static struct bt_l2cap_fixed_chan chan = {
		.cid	= BT_L2CAP_CID_LE_SIG,
		.accept	= l2cap_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    6234:	4801      	ldr	r0, [pc, #4]	; (623c <bt_l2cap_init+0x8>)
    6236:	f7ff bdbd 	b.w	5db4 <bt_l2cap_le_fixed_chan_register>
    623a:	bf00      	nop
    623c:	20008760 	.word	0x20008760

00006240 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    6240:	2006      	movs	r0, #6
    6242:	4770      	bx	lr

00006244 <att_op_get_type>:
		ATT_COMMAND,
		att_signed_write_cmd },
};

static att_type_t att_op_get_type(u8_t op)
{
    6244:	b510      	push	{r4, lr}
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
		if (op == handlers[i].op) {
    6246:	4a0a      	ldr	r2, [pc, #40]	; (6270 <att_op_get_type+0x2c>)
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6248:	2300      	movs	r3, #0
		if (op == handlers[i].op) {
    624a:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    624e:	4284      	cmp	r4, r0
    6250:	ea4f 01c3 	mov.w	r1, r3, lsl #3
    6254:	d102      	bne.n	625c <att_op_get_type+0x18>
			return handlers[i].type;
    6256:	440a      	add	r2, r1
    6258:	7890      	ldrb	r0, [r2, #2]
    625a:	bd10      	pop	{r4, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    625c:	3301      	adds	r3, #1
    625e:	2b1b      	cmp	r3, #27
    6260:	d1f3      	bne.n	624a <att_op_get_type+0x6>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    6262:	f010 0f40 	tst.w	r0, #64	; 0x40
    6266:	bf14      	ite	ne
    6268:	2000      	movne	r0, #0
    626a:	2006      	moveq	r0, #6
}
    626c:	bd10      	pop	{r4, pc}
    626e:	bf00      	nop
    6270:	0001a218 	.word	0x0001a218

00006274 <att_req_destroy>:
{
    6274:	b510      	push	{r4, lr}
    6276:	4604      	mov	r4, r0
	if (req->buf) {
    6278:	6900      	ldr	r0, [r0, #16]
    627a:	b108      	cbz	r0, 6280 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    627c:	f010 fd4e 	bl	16d1c <net_buf_unref>
	if (req->destroy) {
    6280:	68a3      	ldr	r3, [r4, #8]
    6282:	b10b      	cbz	r3, 6288 <att_req_destroy+0x14>
		req->destroy(req);
    6284:	4620      	mov	r0, r4
    6286:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    6288:	4620      	mov	r0, r4
    628a:	2218      	movs	r2, #24
    628c:	2100      	movs	r1, #0
}
    628e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(req, 0, sizeof(*req));
    6292:	f7fa b9e5 	b.w	660 <memset>

00006296 <att_notify>:
{
    6296:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6298:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    629a:	f101 0008 	add.w	r0, r1, #8
{
    629e:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    62a0:	f010 fdac 	bl	16dfc <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    62a4:	89a3      	ldrh	r3, [r4, #12]
    62a6:	68a2      	ldr	r2, [r4, #8]
    62a8:	4601      	mov	r1, r0
    62aa:	4628      	mov	r0, r5
    62ac:	f002 fa90 	bl	87d0 <bt_gatt_notification>
}
    62b0:	2000      	movs	r0, #0
    62b2:	bd38      	pop	{r3, r4, r5, pc}

000062b4 <read_group_cb>:
{
    62b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    62b8:	680d      	ldr	r5, [r1, #0]
{
    62ba:	4606      	mov	r6, r0
    62bc:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    62be:	f04f 0800 	mov.w	r8, #0
    62c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    62c6:	a902      	add	r1, sp, #8
    62c8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    62ca:	682f      	ldr	r7, [r5, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    62cc:	f88d 8008 	strb.w	r8, [sp, #8]
    62d0:	f8ad 300a 	strh.w	r3, [sp, #10]
    62d4:	f7fc fb14 	bl	2900 <bt_uuid_cmp>
    62d8:	b198      	cbz	r0, 6302 <read_group_cb+0x4e>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    62da:	f642 0301 	movw	r3, #10241	; 0x2801
    62de:	a903      	add	r1, sp, #12
    62e0:	6830      	ldr	r0, [r6, #0]
    62e2:	f88d 800c 	strb.w	r8, [sp, #12]
    62e6:	f8ad 300e 	strh.w	r3, [sp, #14]
    62ea:	f7fc fb09 	bl	2900 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    62ee:	b140      	cbz	r0, 6302 <read_group_cb+0x4e>
		if (data->group && attr->handle > data->group->end_handle) {
    62f0:	6923      	ldr	r3, [r4, #16]
    62f2:	b123      	cbz	r3, 62fe <read_group_cb+0x4a>
    62f4:	8a32      	ldrh	r2, [r6, #16]
    62f6:	8859      	ldrh	r1, [r3, #2]
    62f8:	4291      	cmp	r1, r2
    62fa:	d200      	bcs.n	62fe <read_group_cb+0x4a>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    62fc:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    62fe:	2001      	movs	r0, #1
    6300:	e012      	b.n	6328 <read_group_cb+0x74>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6302:	6861      	ldr	r1, [r4, #4]
    6304:	6830      	ldr	r0, [r6, #0]
    6306:	f7fc fafb 	bl	2900 <bt_uuid_cmp>
    630a:	b110      	cbz	r0, 6312 <read_group_cb+0x5e>
		data->group = NULL;
    630c:	2300      	movs	r3, #0
    630e:	6123      	str	r3, [r4, #16]
    6310:	e7f5      	b.n	62fe <read_group_cb+0x4a>
	if (data->rsp->len &&
    6312:	68e3      	ldr	r3, [r4, #12]
    6314:	68a0      	ldr	r0, [r4, #8]
    6316:	781a      	ldrb	r2, [r3, #0]
    6318:	b14a      	cbz	r2, 632e <read_group_cb+0x7a>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    631a:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    631e:	8981      	ldrh	r1, [r0, #12]
    6320:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    6322:	4293      	cmp	r3, r2
    6324:	da03      	bge.n	632e <read_group_cb+0x7a>
		return BT_GATT_ITER_STOP;
    6326:	2000      	movs	r0, #0
}
    6328:	b004      	add	sp, #16
    632a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    632e:	2104      	movs	r1, #4
    6330:	3008      	adds	r0, #8
    6332:	f010 fd25 	bl	16d80 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    6336:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6338:	68a1      	ldr	r1, [r4, #8]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    633a:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    633c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    633e:	8043      	strh	r3, [r0, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6340:	898a      	ldrh	r2, [r1, #12]
    6342:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
    6346:	6889      	ldr	r1, [r1, #8]
    6348:	f8d6 8004 	ldr.w	r8, [r6, #4]
    634c:	1a9b      	subs	r3, r3, r2
    634e:	2500      	movs	r5, #0
    6350:	440a      	add	r2, r1
    6352:	9500      	str	r5, [sp, #0]
    6354:	4631      	mov	r1, r6
    6356:	b29b      	uxth	r3, r3
    6358:	4638      	mov	r0, r7
    635a:	47c0      	blx	r8
	if (read < 0) {
    635c:	1e01      	subs	r1, r0, #0
    635e:	dbe2      	blt.n	6326 <read_group_cb+0x72>
	if (!data->rsp->len) {
    6360:	68e0      	ldr	r0, [r4, #12]
    6362:	7802      	ldrb	r2, [r0, #0]
    6364:	1d0b      	adds	r3, r1, #4
    6366:	b92a      	cbnz	r2, 6374 <read_group_cb+0xc0>
		data->rsp->len = read + sizeof(*data->group);
    6368:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    636a:	68a0      	ldr	r0, [r4, #8]
    636c:	3008      	adds	r0, #8
    636e:	f010 fd07 	bl	16d80 <net_buf_simple_add>
    6372:	e7c4      	b.n	62fe <read_group_cb+0x4a>
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    6374:	429a      	cmp	r2, r3
    6376:	d0f8      	beq.n	636a <read_group_cb+0xb6>
		data->buf->len -= sizeof(*data->group);
    6378:	68a2      	ldr	r2, [r4, #8]
    637a:	8993      	ldrh	r3, [r2, #12]
    637c:	3b04      	subs	r3, #4
    637e:	8193      	strh	r3, [r2, #12]
    6380:	e7d1      	b.n	6326 <read_group_cb+0x72>

00006382 <find_info_cb>:
	if (!data->rsp) {
    6382:	688b      	ldr	r3, [r1, #8]
{
    6384:	b570      	push	{r4, r5, r6, lr}
    6386:	4605      	mov	r5, r0
    6388:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    638a:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    638c:	b963      	cbnz	r3, 63a8 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    638e:	6848      	ldr	r0, [r1, #4]
    6390:	2101      	movs	r1, #1
    6392:	3008      	adds	r0, #8
    6394:	f010 fcf4 	bl	16d80 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    6398:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    639a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    639c:	781b      	ldrb	r3, [r3, #0]
    639e:	2b00      	cmp	r3, #0
    63a0:	bf0c      	ite	eq
    63a2:	2301      	moveq	r3, #1
    63a4:	2302      	movne	r3, #2
    63a6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
    63a8:	68a3      	ldr	r3, [r4, #8]
    63aa:	781b      	ldrb	r3, [r3, #0]
    63ac:	2b01      	cmp	r3, #1
    63ae:	d003      	beq.n	63b8 <find_info_cb+0x36>
    63b0:	2b02      	cmp	r3, #2
    63b2:	d01a      	beq.n	63ea <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
    63b4:	2000      	movs	r0, #0
}
    63b6:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    63b8:	682b      	ldr	r3, [r5, #0]
    63ba:	781b      	ldrb	r3, [r3, #0]
    63bc:	2b00      	cmp	r3, #0
    63be:	d1f9      	bne.n	63b4 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    63c0:	6860      	ldr	r0, [r4, #4]
    63c2:	2104      	movs	r1, #4
    63c4:	3008      	adds	r0, #8
    63c6:	f010 fcdb 	bl	16d80 <net_buf_simple_add>
    63ca:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    63cc:	8a2b      	ldrh	r3, [r5, #16]
    63ce:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    63d0:	682b      	ldr	r3, [r5, #0]
    63d2:	885b      	ldrh	r3, [r3, #2]
    63d4:	8043      	strh	r3, [r0, #2]
		if (att->chan.tx.mtu - data->buf->len >
    63d6:	6863      	ldr	r3, [r4, #4]
    63d8:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    63dc:	899b      	ldrh	r3, [r3, #12]
    63de:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    63e0:	2804      	cmp	r0, #4
    63e2:	bf94      	ite	ls
    63e4:	2000      	movls	r0, #0
    63e6:	2001      	movhi	r0, #1
    63e8:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    63ea:	682b      	ldr	r3, [r5, #0]
    63ec:	781b      	ldrb	r3, [r3, #0]
    63ee:	2b02      	cmp	r3, #2
    63f0:	d1e0      	bne.n	63b4 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    63f2:	6860      	ldr	r0, [r4, #4]
    63f4:	2112      	movs	r1, #18
    63f6:	3008      	adds	r0, #8
    63f8:	f010 fcc2 	bl	16d80 <net_buf_simple_add>
    63fc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    63fe:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    6400:	8a2b      	ldrh	r3, [r5, #16]
    6402:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    6406:	2210      	movs	r2, #16
    6408:	3101      	adds	r1, #1
    640a:	f7fa f8fd 	bl	608 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    640e:	6863      	ldr	r3, [r4, #4]
    6410:	f8b6 005a 	ldrh.w	r0, [r6, #90]	; 0x5a
    6414:	899b      	ldrh	r3, [r3, #12]
    6416:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
    6418:	2812      	cmp	r0, #18
    641a:	e7e2      	b.n	63e2 <find_info_cb+0x60>

0000641c <find_type_cb>:
{
    641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_att *att = data->att;
    6420:	680e      	ldr	r6, [r1, #0]
{
    6422:	b088      	sub	sp, #32
    6424:	4605      	mov	r5, r0
    6426:	460c      	mov	r4, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6428:	2700      	movs	r7, #0
    642a:	f642 0301 	movw	r3, #10241	; 0x2801
    642e:	a902      	add	r1, sp, #8
    6430:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    6432:	f8d6 8000 	ldr.w	r8, [r6]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    6436:	f88d 7008 	strb.w	r7, [sp, #8]
    643a:	f8ad 300a 	strh.w	r3, [sp, #10]
    643e:	f7fc fa5f 	bl	2900 <bt_uuid_cmp>
    6442:	b928      	cbnz	r0, 6450 <find_type_cb+0x34>
		data->group = NULL;
    6444:	2300      	movs	r3, #0
    6446:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    6448:	2001      	movs	r0, #1
}
    644a:	b008      	add	sp, #32
    644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    6450:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6454:	a903      	add	r1, sp, #12
    6456:	6828      	ldr	r0, [r5, #0]
    6458:	f88d 700c 	strb.w	r7, [sp, #12]
    645c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6460:	f7fc fa4e 	bl	2900 <bt_uuid_cmp>
    6464:	b140      	cbz	r0, 6478 <find_type_cb+0x5c>
		if (data->group && attr->handle > data->group->end_handle) {
    6466:	68a3      	ldr	r3, [r4, #8]
    6468:	2b00      	cmp	r3, #0
    646a:	d0ed      	beq.n	6448 <find_type_cb+0x2c>
    646c:	8a2a      	ldrh	r2, [r5, #16]
    646e:	8859      	ldrh	r1, [r3, #2]
    6470:	4291      	cmp	r1, r2
    6472:	d2e9      	bcs.n	6448 <find_type_cb+0x2c>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    6474:	805a      	strh	r2, [r3, #2]
    6476:	e7e7      	b.n	6448 <find_type_cb+0x2c>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    6478:	6862      	ldr	r2, [r4, #4]
    647a:	f8b6 305a 	ldrh.w	r3, [r6, #90]	; 0x5a
    647e:	8992      	ldrh	r2, [r2, #12]
    6480:	1a9b      	subs	r3, r3, r2
    6482:	2b03      	cmp	r3, #3
    6484:	d9e1      	bls.n	644a <find_type_cb+0x2e>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    6486:	2310      	movs	r3, #16
    6488:	9000      	str	r0, [sp, #0]
    648a:	eb0d 0203 	add.w	r2, sp, r3
    648e:	686e      	ldr	r6, [r5, #4]
    6490:	4629      	mov	r1, r5
    6492:	4640      	mov	r0, r8
    6494:	47b0      	blx	r6
	if (read < 0) {
    6496:	1e02      	subs	r2, r0, #0
    6498:	dbd4      	blt.n	6444 <find_type_cb+0x28>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    649a:	7c23      	ldrb	r3, [r4, #16]
    649c:	429a      	cmp	r2, r3
    649e:	d1d1      	bne.n	6444 <find_type_cb+0x28>
    64a0:	a904      	add	r1, sp, #16
    64a2:	68e0      	ldr	r0, [r4, #12]
    64a4:	f7fa f89b 	bl	5de <memcmp>
    64a8:	2800      	cmp	r0, #0
    64aa:	d1cb      	bne.n	6444 <find_type_cb+0x28>
	data->err = 0x00;
    64ac:	7460      	strb	r0, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    64ae:	6860      	ldr	r0, [r4, #4]
    64b0:	2104      	movs	r1, #4
    64b2:	3008      	adds	r0, #8
    64b4:	f010 fc64 	bl	16d80 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    64b8:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    64ba:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    64bc:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    64be:	8043      	strh	r3, [r0, #2]
    64c0:	e7c2      	b.n	6448 <find_type_cb+0x2c>
	...

000064c4 <bt_att_connected>:
	bt_gatt_disconnected(ch->chan.conn);
	ch->chan.conn = NULL;
}

static void bt_att_connected(struct bt_l2cap_chan *chan)
{
    64c4:	b510      	push	{r4, lr}

#if CONFIG_BT_ATT_PREPARE_COUNT > 0
	k_fifo_init(&att->prep_queue);
#endif

	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    64c6:	2317      	movs	r3, #23
{
    64c8:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    64ca:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    64ce:	8743      	strh	r3, [r0, #58]	; 0x3a

	k_delayed_work_init(&att->timeout_work, att_timeout);
    64d0:	4906      	ldr	r1, [pc, #24]	; (64ec <bt_att_connected+0x28>)
    64d2:	30a4      	adds	r0, #164	; 0xa4
    64d4:	f011 fbf6 	bl	17cc4 <k_delayed_work_init>
	list->head = NULL;
    64d8:	2300      	movs	r3, #0
    64da:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	list->tail = NULL;
    64de:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	sys_slist_init(&att->reqs);

	bt_gatt_connected(ch->chan.conn);
    64e2:	6820      	ldr	r0, [r4, #0]
}
    64e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(ch->chan.conn);
    64e8:	f002 b9a6 	b.w	8838 <bt_gatt_connected>
    64ec:	00006a49 	.word	0x00006a49

000064f0 <check_perm>:
{
    64f0:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
    64f2:	f012 0f01 	tst.w	r2, #1
    64f6:	7c8b      	ldrb	r3, [r1, #18]
    64f8:	d004      	beq.n	6504 <check_perm+0x14>
    64fa:	f013 0f15 	tst.w	r3, #21
    64fe:	d018      	beq.n	6532 <check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    6500:	684c      	ldr	r4, [r1, #4]
    6502:	b1b4      	cbz	r4, 6532 <check_perm+0x42>
	if ((mask & BT_GATT_PERM_WRITE) &&
    6504:	0794      	lsls	r4, r2, #30
    6506:	d504      	bpl.n	6512 <check_perm+0x22>
    6508:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    650c:	d013      	beq.n	6536 <check_perm+0x46>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    650e:	6889      	ldr	r1, [r1, #8]
    6510:	b189      	cbz	r1, 6536 <check_perm+0x46>
	mask &= attr->perm;
    6512:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    6514:	f012 0f30 	tst.w	r2, #48	; 0x30
    6518:	d002      	beq.n	6520 <check_perm+0x30>
		if (conn->sec_level < BT_SECURITY_HIGH) {
    651a:	7a03      	ldrb	r3, [r0, #8]
    651c:	2b02      	cmp	r3, #2
    651e:	d90c      	bls.n	653a <check_perm+0x4a>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    6520:	f012 020c 	ands.w	r2, r2, #12
    6524:	d00b      	beq.n	653e <check_perm+0x4e>
		if (!conn->encrypt) {
    6526:	7a83      	ldrb	r3, [r0, #10]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    6528:	2b00      	cmp	r3, #0
    652a:	bf14      	ite	ne
    652c:	2000      	movne	r0, #0
    652e:	200f      	moveq	r0, #15
    6530:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    6532:	2002      	movs	r0, #2
    6534:	bd10      	pop	{r4, pc}
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    6536:	2003      	movs	r0, #3
    6538:	bd10      	pop	{r4, pc}
			return BT_ATT_ERR_AUTHENTICATION;
    653a:	2005      	movs	r0, #5
    653c:	bd10      	pop	{r4, pc}
	return 0;
    653e:	4610      	mov	r0, r2
}
    6540:	bd10      	pop	{r4, pc}

00006542 <read_type_cb>:
{
    6542:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att *att = data->att;
    6546:	680f      	ldr	r7, [r1, #0]
{
    6548:	4606      	mov	r6, r0
    654a:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    654c:	6800      	ldr	r0, [r0, #0]
    654e:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = att->chan.chan.conn;
    6550:	f8d7 9000 	ldr.w	r9, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    6554:	f7fc f9d4 	bl	2900 <bt_uuid_cmp>
    6558:	4680      	mov	r8, r0
    655a:	2800      	cmp	r0, #0
    655c:	d14e      	bne.n	65fc <read_type_cb+0xba>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    655e:	2215      	movs	r2, #21
    6560:	4631      	mov	r1, r6
    6562:	4648      	mov	r0, r9
    6564:	f7ff ffc4 	bl	64f0 <check_perm>
    6568:	4605      	mov	r5, r0
    656a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    656c:	b148      	cbz	r0, 6582 <read_type_cb+0x40>
		if (data->rsp->len) {
    656e:	68e3      	ldr	r3, [r4, #12]
    6570:	781d      	ldrb	r5, [r3, #0]
    6572:	b115      	cbz	r5, 657a <read_type_cb+0x38>
			data->err = 0x00;
    6574:	f884 8014 	strb.w	r8, [r4, #20]
		return BT_GATT_ITER_STOP;
    6578:	4645      	mov	r5, r8
}
    657a:	4628      	mov	r0, r5
    657c:	b003      	add	sp, #12
    657e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    6582:	68a0      	ldr	r0, [r4, #8]
    6584:	2102      	movs	r1, #2
    6586:	3008      	adds	r0, #8
    6588:	f010 fbfa 	bl	16d80 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    658c:	8a33      	ldrh	r3, [r6, #16]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    658e:	68a1      	ldr	r1, [r4, #8]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    6590:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    6592:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6594:	898a      	ldrh	r2, [r1, #12]
    6596:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
    659a:	6889      	ldr	r1, [r1, #8]
    659c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    65a0:	9500      	str	r5, [sp, #0]
    65a2:	1a9b      	subs	r3, r3, r2
    65a4:	b29b      	uxth	r3, r3
    65a6:	440a      	add	r2, r1
    65a8:	4648      	mov	r0, r9
    65aa:	4631      	mov	r1, r6
    65ac:	47c0      	blx	r8
	if (read < 0) {
    65ae:	1e01      	subs	r1, r0, #0
    65b0:	da08      	bge.n	65c4 <read_type_cb+0x82>
	if (err < 0 && err >= -0xff) {
    65b2:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    65b6:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    65b8:	bf9a      	itte	ls
    65ba:	4249      	negls	r1, r1
    65bc:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    65be:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    65c0:	7521      	strb	r1, [r4, #20]
		return BT_GATT_ITER_STOP;
    65c2:	e7da      	b.n	657a <read_type_cb+0x38>
	if (!data->rsp->len) {
    65c4:	68e0      	ldr	r0, [r4, #12]
    65c6:	7802      	ldrb	r2, [r0, #0]
    65c8:	1c8b      	adds	r3, r1, #2
    65ca:	b982      	cbnz	r2, 65ee <read_type_cb+0xac>
		data->rsp->len = read + sizeof(*data->item);
    65cc:	7003      	strb	r3, [r0, #0]
	net_buf_add(data->buf, read);
    65ce:	68a0      	ldr	r0, [r4, #8]
    65d0:	3008      	adds	r0, #8
    65d2:	f010 fbd5 	bl	16d80 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    65d6:	68a3      	ldr	r3, [r4, #8]
    65d8:	f8b7 505a 	ldrh.w	r5, [r7, #90]	; 0x5a
    65dc:	899b      	ldrh	r3, [r3, #12]
    65de:	1aed      	subs	r5, r5, r3
    65e0:	68e3      	ldr	r3, [r4, #12]
    65e2:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    65e4:	429d      	cmp	r5, r3
    65e6:	bfd4      	ite	le
    65e8:	2500      	movle	r5, #0
    65ea:	2501      	movgt	r5, #1
    65ec:	e7c5      	b.n	657a <read_type_cb+0x38>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    65ee:	429a      	cmp	r2, r3
    65f0:	d0ed      	beq.n	65ce <read_type_cb+0x8c>
		data->buf->len -= sizeof(*data->item);
    65f2:	68a2      	ldr	r2, [r4, #8]
    65f4:	8993      	ldrh	r3, [r2, #12]
    65f6:	3b02      	subs	r3, #2
    65f8:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    65fa:	e7be      	b.n	657a <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    65fc:	2501      	movs	r5, #1
    65fe:	e7bc      	b.n	657a <read_type_cb+0x38>

00006600 <att_cb.isra.3>:
static bt_conn_tx_cb_t att_cb(struct net_buf *buf)
    6600:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    6602:	7800      	ldrb	r0, [r0, #0]
    6604:	f7ff fe1e 	bl	6244 <att_op_get_type>
    6608:	3801      	subs	r0, #1
    660a:	b2c0      	uxtb	r0, r0
    660c:	2804      	cmp	r0, #4
    660e:	bf9a      	itte	ls
    6610:	4b02      	ldrls	r3, [pc, #8]	; (661c <att_cb.isra.3+0x1c>)
    6612:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    6616:	4802      	ldrhi	r0, [pc, #8]	; (6620 <att_cb.isra.3+0x20>)
}
    6618:	bd08      	pop	{r3, pc}
    661a:	bf00      	nop
    661c:	00019f00 	.word	0x00019f00
    6620:	00006a8d 	.word	0x00006a8d

00006624 <uuid_create>:
{
    6624:	b510      	push	{r4, lr}
	switch (buf->len) {
    6626:	898a      	ldrh	r2, [r1, #12]
    6628:	2a02      	cmp	r2, #2
{
    662a:	4604      	mov	r4, r0
	switch (buf->len) {
    662c:	d003      	beq.n	6636 <uuid_create+0x12>
    662e:	2a10      	cmp	r2, #16
    6630:	d00a      	beq.n	6648 <uuid_create+0x24>
	return false;
    6632:	2000      	movs	r0, #0
}
    6634:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    6636:	2300      	movs	r3, #0
    6638:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    663a:	f101 0008 	add.w	r0, r1, #8
    663e:	f010 fbdd 	bl	16dfc <net_buf_simple_pull_le16>
    6642:	8060      	strh	r0, [r4, #2]
		return true;
    6644:	2001      	movs	r0, #1
    6646:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    6648:	2302      	movs	r3, #2
    664a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    664e:	6889      	ldr	r1, [r1, #8]
    6650:	f7f9 ffda 	bl	608 <memcpy>
    6654:	e7f6      	b.n	6644 <uuid_create+0x20>
	...

00006658 <att_req_sent>:
{
    6658:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    665a:	2104      	movs	r1, #4
    665c:	f7ff fd62 	bl	6124 <bt_l2cap_le_lookup_tx_cid>
    6660:	4604      	mov	r4, r0
    6662:	30cc      	adds	r0, #204	; 0xcc
    6664:	f011 f802 	bl	1766c <_impl_k_sem_give>
	if (att->req) {
    6668:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    666c:	b143      	cbz	r3, 6680 <att_req_sent+0x28>
    666e:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
    6672:	f247 5230 	movw	r2, #30000	; 0x7530
    6676:	4803      	ldr	r0, [pc, #12]	; (6684 <att_req_sent+0x2c>)
}
    6678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    667c:	f011 bb9a 	b.w	17db4 <k_delayed_work_submit_to_queue>
    6680:	bd10      	pop	{r4, pc}
    6682:	bf00      	nop
    6684:	20005470 	.word	0x20005470

00006688 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    6688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
		struct bt_att *att = &bt_req_pool[i];

		if (att->chan.chan.conn) {
    668a:	4d14      	ldr	r5, [pc, #80]	; (66dc <bt_att_accept+0x54>)
    668c:	682c      	ldr	r4, [r5, #0]
{
    668e:	460e      	mov	r6, r1
		if (att->chan.chan.conn) {
    6690:	b9bc      	cbnz	r4, 66c2 <bt_att_accept+0x3a>
			continue;
		}

		att->chan.chan.ops = &ops;
    6692:	4b13      	ldr	r3, [pc, #76]	; (66e0 <bt_att_accept+0x58>)
    6694:	606b      	str	r3, [r5, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6696:	f105 0394 	add.w	r3, r5, #148	; 0x94
    669a:	f3bf 8f5b 	dmb	ish
    669e:	e853 2f00 	ldrex	r2, [r3]
    66a2:	e843 4100 	strex	r1, r4, [r3]
    66a6:	2900      	cmp	r1, #0
    66a8:	d1f9      	bne.n	669e <bt_att_accept+0x16>
    66aa:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    66ae:	2203      	movs	r2, #3
    66b0:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    66b4:	4611      	mov	r1, r2
    66b6:	f010 ffcf 	bl	17658 <_impl_k_sem_init>
		atomic_set(att->flags, 0);
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
			   CONFIG_BT_ATT_TX_MAX);

		*chan = &att->chan.chan;
    66ba:	6035      	str	r5, [r6, #0]

		return 0;
    66bc:	4620      	mov	r0, r4
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
}
    66be:	b004      	add	sp, #16
    66c0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ERR("No available ATT context for conn %p", conn);
    66c2:	4b08      	ldr	r3, [pc, #32]	; (66e4 <bt_att_accept+0x5c>)
    66c4:	9302      	str	r3, [sp, #8]
    66c6:	9001      	str	r0, [sp, #4]
    66c8:	9300      	str	r3, [sp, #0]
    66ca:	4a07      	ldr	r2, [pc, #28]	; (66e8 <bt_att_accept+0x60>)
    66cc:	4b07      	ldr	r3, [pc, #28]	; (66ec <bt_att_accept+0x64>)
    66ce:	4908      	ldr	r1, [pc, #32]	; (66f0 <bt_att_accept+0x68>)
    66d0:	4808      	ldr	r0, [pc, #32]	; (66f4 <bt_att_accept+0x6c>)
    66d2:	f7fb f805 	bl	16e0 <printk>
	return -ENOMEM;
    66d6:	f06f 000b 	mvn.w	r0, #11
    66da:	e7f0      	b.n	66be <bt_att_accept+0x36>
    66dc:	200005a0 	.word	0x200005a0
    66e0:	2000878c 	.word	0x2000878c
    66e4:	0001868d 	.word	0x0001868d
    66e8:	00019a84 	.word	0x00019a84
    66ec:	00019f92 	.word	0x00019f92
    66f0:	00019a8b 	.word	0x00019a8b
    66f4:	0001a0ae 	.word	0x0001a0ae

000066f8 <att_is_connected>:
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    66f8:	6803      	ldr	r3, [r0, #0]
    66fa:	7b1b      	ldrb	r3, [r3, #12]
    66fc:	2b03      	cmp	r3, #3
    66fe:	d10a      	bne.n	6716 <att_is_connected+0x1e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6700:	f3bf 8f5b 	dmb	ish
    6704:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    6708:	f3bf 8f5b 	dmb	ish
    670c:	ea6f 00a0 	mvn.w	r0, r0, asr #2
    6710:	f000 0001 	and.w	r0, r0, #1
    6714:	4770      	bx	lr
    6716:	2001      	movs	r0, #1
}
    6718:	4770      	bx	lr

0000671a <att_prepare_write_req>:
    671a:	2006      	movs	r0, #6
    671c:	4770      	bx	lr
	...

00006720 <att_send_req>:
{
    6720:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6722:	4605      	mov	r5, r0
	k_sem_take(&att->tx_sem, K_FOREVER);
    6724:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
	att->req = req;
    6728:	f8c5 1098 	str.w	r1, [r5, #152]	; 0x98
{
    672c:	460c      	mov	r4, r1
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    672e:	4630      	mov	r0, r6
    6730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6734:	f010 fffa 	bl	1772c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    6738:	4628      	mov	r0, r5
    673a:	f7ff ffdd 	bl	66f8 <att_is_connected>
    673e:	b978      	cbnz	r0, 6760 <att_send_req+0x40>
		BT_WARN("Disconnected");
    6740:	4b14      	ldr	r3, [pc, #80]	; (6794 <att_send_req+0x74>)
    6742:	9301      	str	r3, [sp, #4]
    6744:	9300      	str	r3, [sp, #0]
    6746:	4a14      	ldr	r2, [pc, #80]	; (6798 <att_send_req+0x78>)
    6748:	4b14      	ldr	r3, [pc, #80]	; (679c <att_send_req+0x7c>)
    674a:	4915      	ldr	r1, [pc, #84]	; (67a0 <att_send_req+0x80>)
    674c:	4815      	ldr	r0, [pc, #84]	; (67a4 <att_send_req+0x84>)
    674e:	f7fa ffc7 	bl	16e0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6752:	4630      	mov	r0, r6
    6754:	f010 ff8a 	bl	1766c <_impl_k_sem_give>
		return -ENOTCONN;
    6758:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    675c:	b002      	add	sp, #8
    675e:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_simple_save(&req->buf->b, &req->state);
    6760:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    6762:	f106 0008 	add.w	r0, r6, #8
    6766:	f010 fb51 	bl	16e0c <net_buf_simple_headroom>
	state->len = buf->len;
    676a:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
    676c:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    676e:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    6770:	6920      	ldr	r0, [r4, #16]
    6772:	682d      	ldr	r5, [r5, #0]
    6774:	f010 fb00 	bl	16d78 <net_buf_ref>
    6778:	6923      	ldr	r3, [r4, #16]
    677a:	4606      	mov	r6, r0
    677c:	6898      	ldr	r0, [r3, #8]
    677e:	f7ff ff3f 	bl	6600 <att_cb.isra.3>
    6782:	4632      	mov	r2, r6
    6784:	4603      	mov	r3, r0
    6786:	2104      	movs	r1, #4
    6788:	4628      	mov	r0, r5
    678a:	f7ff fbe0 	bl	5f4e <bt_l2cap_send_cb>
	return 0;
    678e:	2000      	movs	r0, #0
    6790:	e7e4      	b.n	675c <att_send_req+0x3c>
    6792:	bf00      	nop
    6794:	0001868d 	.word	0x0001868d
    6798:	00019806 	.word	0x00019806
    679c:	00019f14 	.word	0x00019f14
    67a0:	00019a8b 	.word	0x00019a8b
    67a4:	0001a050 	.word	0x0001a050

000067a8 <att_handle_rsp>:
{
    67a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    67ac:	4604      	mov	r4, r0
	k_delayed_work_cancel(&att->timeout_work);
    67ae:	30a4      	adds	r0, #164	; 0xa4
{
    67b0:	461e      	mov	r6, r3
    67b2:	460f      	mov	r7, r1
    67b4:	4690      	mov	r8, r2
	k_delayed_work_cancel(&att->timeout_work);
    67b6:	f011 faa3 	bl	17d00 <k_delayed_work_cancel>
	if (!att->req) {
    67ba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    67be:	b9db      	cbnz	r3, 67f8 <att_handle_rsp+0x50>
		BT_WARN("No pending ATT request");
    67c0:	4b1c      	ldr	r3, [pc, #112]	; (6834 <att_handle_rsp+0x8c>)
    67c2:	9301      	str	r3, [sp, #4]
    67c4:	9300      	str	r3, [sp, #0]
    67c6:	4a1c      	ldr	r2, [pc, #112]	; (6838 <att_handle_rsp+0x90>)
    67c8:	4b1c      	ldr	r3, [pc, #112]	; (683c <att_handle_rsp+0x94>)
    67ca:	491d      	ldr	r1, [pc, #116]	; (6840 <att_handle_rsp+0x98>)
    67cc:	481d      	ldr	r0, [pc, #116]	; (6844 <att_handle_rsp+0x9c>)
    67ce:	f7fa ff87 	bl	16e0 <printk>
    67d2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    67d6:	b159      	cbz	r1, 67f0 <att_handle_rsp+0x48>
	if (list->tail == node) {
    67d8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	list->head = node->next;
    67dc:	680b      	ldr	r3, [r1, #0]
    67de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	if (list->tail == node) {
    67e2:	4291      	cmp	r1, r2
		list->tail = list->head;
    67e4:	bf08      	it	eq
    67e6:	f8c4 30a0 	streq.w	r3, [r4, #160]	; 0xa0
	att_send_req(att, ATT_REQ(node));
    67ea:	4620      	mov	r0, r4
    67ec:	f7ff ff98 	bl	6720 <att_send_req>
}
    67f0:	2000      	movs	r0, #0
    67f2:	b003      	add	sp, #12
    67f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (att->req->buf) {
    67f8:	6918      	ldr	r0, [r3, #16]
    67fa:	b128      	cbz	r0, 6808 <att_handle_rsp+0x60>
		net_buf_unref(att->req->buf);
    67fc:	f010 fa8e 	bl	16d1c <net_buf_unref>
		att->req->buf = NULL;
    6800:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6804:	2200      	movs	r2, #0
    6806:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    6808:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	func(att->chan.chan.conn, err, pdu, len, att->req);
    680c:	6820      	ldr	r0, [r4, #0]
	func = att->req->func;
    680e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	att->req->func = NULL;
    6812:	2500      	movs	r5, #0
    6814:	605d      	str	r5, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    6816:	463a      	mov	r2, r7
    6818:	9300      	str	r3, [sp, #0]
    681a:	4631      	mov	r1, r6
    681c:	4643      	mov	r3, r8
    681e:	47c8      	blx	r9
	if (!att->req->func) {
    6820:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    6824:	6843      	ldr	r3, [r0, #4]
    6826:	b90b      	cbnz	r3, 682c <att_handle_rsp+0x84>
		att_req_destroy(att->req);
    6828:	f7ff fd24 	bl	6274 <att_req_destroy>
	att->req = NULL;
    682c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
    6830:	e7cf      	b.n	67d2 <att_handle_rsp+0x2a>
    6832:	bf00      	nop
    6834:	0001868d 	.word	0x0001868d
    6838:	00019806 	.word	0x00019806
    683c:	00019f21 	.word	0x00019f21
    6840:	00019a8b 	.word	0x00019a8b
    6844:	0001a029 	.word	0x0001a029

00006848 <att_confirm>:
	return att_handle_rsp(att, buf->data, buf->len, 0);
    6848:	898a      	ldrh	r2, [r1, #12]
    684a:	6889      	ldr	r1, [r1, #8]
    684c:	2300      	movs	r3, #0
    684e:	f7ff bfab 	b.w	67a8 <att_handle_rsp>

00006852 <att_handle_exec_write_rsp>:
    6852:	f7ff bff9 	b.w	6848 <att_confirm>

00006856 <att_handle_prepare_write_rsp>:
    6856:	f7ff bff7 	b.w	6848 <att_confirm>

0000685a <att_handle_write_rsp>:
    685a:	f7ff bff5 	b.w	6848 <att_confirm>

0000685e <att_handle_read_mult_rsp>:
    685e:	f7ff bff3 	b.w	6848 <att_confirm>

00006862 <att_handle_read_blob_rsp>:
    6862:	f7ff bff1 	b.w	6848 <att_confirm>

00006866 <att_handle_read_rsp>:
    6866:	f7ff bfef 	b.w	6848 <att_confirm>

0000686a <att_handle_read_type_rsp>:
    686a:	f7ff bfed 	b.w	6848 <att_confirm>

0000686e <att_handle_find_type_rsp>:
    686e:	f7ff bfeb 	b.w	6848 <att_confirm>

00006872 <att_handle_find_info_rsp>:
    6872:	f7ff bfe9 	b.w	6848 <att_confirm>

00006876 <att_mtu_rsp>:
{
    6876:	b410      	push	{r4}
    6878:	460a      	mov	r2, r1
	if (!att) {
    687a:	b190      	cbz	r0, 68a2 <att_mtu_rsp+0x2c>
	rsp = (void *)buf->data;
    687c:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    687e:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    6880:	2b16      	cmp	r3, #22
    6882:	d805      	bhi.n	6890 <att_mtu_rsp+0x1a>
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    6884:	2200      	movs	r2, #0
    6886:	2304      	movs	r3, #4
    6888:	4611      	mov	r1, r2
}
    688a:	bc10      	pop	{r4}
	return att_handle_rsp(att, rsp, buf->len, 0);
    688c:	f7ff bf8c 	b.w	67a8 <att_handle_rsp>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    6890:	2bf7      	cmp	r3, #247	; 0xf7
    6892:	bf28      	it	cs
    6894:	23f7      	movcs	r3, #247	; 0xf7
    6896:	8743      	strh	r3, [r0, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    6898:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
	return att_handle_rsp(att, rsp, buf->len, 0);
    689c:	8992      	ldrh	r2, [r2, #12]
    689e:	2300      	movs	r3, #0
    68a0:	e7f3      	b.n	688a <att_mtu_rsp+0x14>
}
    68a2:	bc10      	pop	{r4}
    68a4:	4770      	bx	lr
	...

000068a8 <bt_att_encrypt_change>:
{
    68a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    68aa:	4604      	mov	r4, r0
	if (hci_status) {
    68ac:	460d      	mov	r5, r1
    68ae:	b139      	cbz	r1, 68c0 <bt_att_encrypt_change+0x18>
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    68b0:	2200      	movs	r2, #0
    68b2:	2305      	movs	r3, #5
    68b4:	4611      	mov	r1, r2
}
    68b6:	b003      	add	sp, #12
    68b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    68bc:	f7ff bf74 	b.w	67a8 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    68c0:	6806      	ldr	r6, [r0, #0]
	if (conn->sec_level == BT_SECURITY_LOW) {
    68c2:	7a33      	ldrb	r3, [r6, #8]
    68c4:	2b01      	cmp	r3, #1
    68c6:	d02d      	beq.n	6924 <bt_att_encrypt_change+0x7c>
	if (!att->req || !att->req->retrying) {
    68c8:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    68cc:	b353      	cbz	r3, 6924 <bt_att_encrypt_change+0x7c>
    68ce:	7d1b      	ldrb	r3, [r3, #20]
    68d0:	b343      	cbz	r3, 6924 <bt_att_encrypt_change+0x7c>
	k_sem_take(&att->tx_sem, K_FOREVER);
    68d2:	f100 07cc 	add.w	r7, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    68d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    68da:	4638      	mov	r0, r7
    68dc:	f010 ff26 	bl	1772c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    68e0:	4620      	mov	r0, r4
    68e2:	f7ff ff09 	bl	66f8 <att_is_connected>
    68e6:	b970      	cbnz	r0, 6906 <bt_att_encrypt_change+0x5e>
		BT_WARN("Disconnected");
    68e8:	4b0f      	ldr	r3, [pc, #60]	; (6928 <bt_att_encrypt_change+0x80>)
    68ea:	9301      	str	r3, [sp, #4]
    68ec:	9300      	str	r3, [sp, #0]
    68ee:	4a0f      	ldr	r2, [pc, #60]	; (692c <bt_att_encrypt_change+0x84>)
    68f0:	4b0f      	ldr	r3, [pc, #60]	; (6930 <bt_att_encrypt_change+0x88>)
    68f2:	4910      	ldr	r1, [pc, #64]	; (6934 <bt_att_encrypt_change+0x8c>)
    68f4:	4810      	ldr	r0, [pc, #64]	; (6938 <bt_att_encrypt_change+0x90>)
    68f6:	f7fa fef3 	bl	16e0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    68fa:	4638      	mov	r0, r7
}
    68fc:	b003      	add	sp, #12
    68fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6902:	f010 beb3 	b.w	1766c <_impl_k_sem_give>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    6906:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    690a:	691f      	ldr	r7, [r3, #16]
    690c:	68b8      	ldr	r0, [r7, #8]
    690e:	f7ff fe77 	bl	6600 <att_cb.isra.3>
    6912:	463a      	mov	r2, r7
    6914:	4603      	mov	r3, r0
    6916:	2104      	movs	r1, #4
    6918:	4630      	mov	r0, r6
    691a:	f7ff fb18 	bl	5f4e <bt_l2cap_send_cb>
	att->req->buf = NULL;
    691e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6922:	611d      	str	r5, [r3, #16]
}
    6924:	b003      	add	sp, #12
    6926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6928:	0001868d 	.word	0x0001868d
    692c:	00019806 	.word	0x00019806
    6930:	00019f7c 	.word	0x00019f7c
    6934:	00019a8b 	.word	0x00019a8b
    6938:	0001a050 	.word	0x0001a050

0000693c <att_error_rsp>:
{
    693c:	b570      	push	{r4, r5, r6, lr}
    693e:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    6940:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    6942:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    6946:	b332      	cbz	r2, 6996 <att_error_rsp+0x5a>
	if (att->req->buf) {
    6948:	6913      	ldr	r3, [r2, #16]
    694a:	b12b      	cbz	r3, 6958 <att_error_rsp+0x1c>
	buf->data = buf->__buf + state->offset;
    694c:	8995      	ldrh	r5, [r2, #12]
    694e:	6919      	ldr	r1, [r3, #16]
    6950:	4429      	add	r1, r5
    6952:	6099      	str	r1, [r3, #8]
	buf->len = state->len;
    6954:	89d1      	ldrh	r1, [r2, #14]
    6956:	8199      	strh	r1, [r3, #12]
	if (att->req->retrying) {
    6958:	7d13      	ldrb	r3, [r2, #20]
	err = rsp->error;
    695a:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    695c:	b9e3      	cbnz	r3, 6998 <att_error_rsp+0x5c>
	switch (err) {
    695e:	2d05      	cmp	r5, #5
	if (!att_change_security(att->chan.chan.conn, err)) {
    6960:	6820      	ldr	r0, [r4, #0]
	switch (err) {
    6962:	d006      	beq.n	6972 <att_error_rsp+0x36>
    6964:	2d0f      	cmp	r5, #15
    6966:	d117      	bne.n	6998 <att_error_rsp+0x5c>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    6968:	7a03      	ldrb	r3, [r0, #8]
    696a:	2b01      	cmp	r3, #1
    696c:	d814      	bhi.n	6998 <att_error_rsp+0x5c>
		sec = BT_SECURITY_MEDIUM;
    696e:	2102      	movs	r1, #2
    6970:	e007      	b.n	6982 <att_error_rsp+0x46>
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    6972:	7a03      	ldrb	r3, [r0, #8]
    6974:	2b01      	cmp	r3, #1
    6976:	d9fa      	bls.n	696e <att_error_rsp+0x32>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    6978:	2b02      	cmp	r3, #2
    697a:	d00a      	beq.n	6992 <att_error_rsp+0x56>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    697c:	2b03      	cmp	r3, #3
    697e:	d10b      	bne.n	6998 <att_error_rsp+0x5c>
			sec = BT_SECURITY_FIPS;
    6980:	2104      	movs	r1, #4
	return bt_conn_security(conn, sec);
    6982:	f7fe fb93 	bl	50ac <bt_conn_security>
	if (!att_change_security(att->chan.chan.conn, err)) {
    6986:	b938      	cbnz	r0, 6998 <att_error_rsp+0x5c>
		att->req->retrying = true;
    6988:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    698c:	2201      	movs	r2, #1
    698e:	751a      	strb	r2, [r3, #20]
		return 0;
    6990:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_HIGH;
    6992:	2103      	movs	r1, #3
    6994:	e7f5      	b.n	6982 <att_error_rsp+0x46>
		err = BT_ATT_ERR_UNLIKELY;
    6996:	250e      	movs	r5, #14
	return att_handle_rsp(att, NULL, 0, err);
    6998:	2200      	movs	r2, #0
    699a:	462b      	mov	r3, r5
    699c:	4620      	mov	r0, r4
    699e:	4611      	mov	r1, r2
}
    69a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(att, NULL, 0, err);
    69a4:	f7ff bf00 	b.w	67a8 <att_handle_rsp>

000069a8 <att_reset>:
{
    69a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    69aa:	f100 0394 	add.w	r3, r0, #148	; 0x94
    69ae:	4605      	mov	r5, r0
    69b0:	f3bf 8f5b 	dmb	ish
    69b4:	e853 2f00 	ldrex	r2, [r3]
    69b8:	f042 0204 	orr.w	r2, r2, #4
    69bc:	e843 2100 	strex	r1, r2, [r3]
    69c0:	2900      	cmp	r1, #0
    69c2:	d1f7      	bne.n	69b4 <att_reset+0xc>
    69c4:	f3bf 8f5b 	dmb	ish
		k_sem_give(&att->tx_sem);
    69c8:	f105 04cc 	add.w	r4, r5, #204	; 0xcc
    69cc:	4620      	mov	r0, r4
    69ce:	f010 fe4d 	bl	1766c <_impl_k_sem_give>
    69d2:	4620      	mov	r0, r4
    69d4:	f010 fe4a 	bl	1766c <_impl_k_sem_give>
    69d8:	4620      	mov	r0, r4
    69da:	f010 fe47 	bl	1766c <_impl_k_sem_give>
    69de:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    69e2:	b98c      	cbnz	r4, 6a08 <att_reset+0x60>
	if (!att->req) {
    69e4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	list->head = NULL;
    69e8:	2200      	movs	r2, #0
    69ea:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
	list->tail = NULL;
    69ee:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    69f2:	b90b      	cbnz	r3, 69f8 <att_reset+0x50>
}
    69f4:	b003      	add	sp, #12
    69f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    69f8:	230e      	movs	r3, #14
    69fa:	4611      	mov	r1, r2
    69fc:	4628      	mov	r0, r5
}
    69fe:	b003      	add	sp, #12
    6a00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    6a04:	f7ff bed0 	b.w	67a8 <att_handle_rsp>
	return node->next;
    6a08:	6826      	ldr	r6, [r4, #0]
		if (req->func) {
    6a0a:	6867      	ldr	r7, [r4, #4]
    6a0c:	b12f      	cbz	r7, 6a1a <att_reset+0x72>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    6a0e:	2300      	movs	r3, #0
    6a10:	9400      	str	r4, [sp, #0]
    6a12:	461a      	mov	r2, r3
    6a14:	210e      	movs	r1, #14
    6a16:	4618      	mov	r0, r3
    6a18:	47b8      	blx	r7
		att_req_destroy(req);
    6a1a:	4620      	mov	r0, r4
    6a1c:	f7ff fc2a 	bl	6274 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    6a20:	2e00      	cmp	r6, #0
    6a22:	d0df      	beq.n	69e4 <att_reset+0x3c>
    6a24:	4634      	mov	r4, r6
    6a26:	6836      	ldr	r6, [r6, #0]
    6a28:	e7ef      	b.n	6a0a <att_reset+0x62>

00006a2a <bt_att_disconnected>:
{
    6a2a:	b510      	push	{r4, lr}
    6a2c:	4604      	mov	r4, r0
	att_reset(att);
    6a2e:	f7ff ffbb 	bl	69a8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    6a32:	6820      	ldr	r0, [r4, #0]
    6a34:	f001 ff22 	bl	887c <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    6a38:	4620      	mov	r0, r4
    6a3a:	22e4      	movs	r2, #228	; 0xe4
    6a3c:	2100      	movs	r1, #0
}
    6a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(att, 0, sizeof(*att));
    6a42:	f7f9 be0d 	b.w	660 <memset>
	...

00006a48 <att_timeout>:
{
    6a48:	b513      	push	{r0, r1, r4, lr}
	BT_ERR("ATT Timeout");
    6a4a:	4b0b      	ldr	r3, [pc, #44]	; (6a78 <att_timeout+0x30>)
    6a4c:	4a0b      	ldr	r2, [pc, #44]	; (6a7c <att_timeout+0x34>)
    6a4e:	490c      	ldr	r1, [pc, #48]	; (6a80 <att_timeout+0x38>)
    6a50:	9301      	str	r3, [sp, #4]
{
    6a52:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    6a54:	9300      	str	r3, [sp, #0]
    6a56:	480b      	ldr	r0, [pc, #44]	; (6a84 <att_timeout+0x3c>)
    6a58:	4b0b      	ldr	r3, [pc, #44]	; (6a88 <att_timeout+0x40>)
    6a5a:	f7fa fe41 	bl	16e0 <printk>
	att_reset(att);
    6a5e:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
    6a62:	f7ff ffa1 	bl	69a8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    6a66:	f854 0ca4 	ldr.w	r0, [r4, #-164]
    6a6a:	f001 ff07 	bl	887c <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    6a6e:	2300      	movs	r3, #0
    6a70:	f844 3ca4 	str.w	r3, [r4, #-164]
}
    6a74:	b002      	add	sp, #8
    6a76:	bd10      	pop	{r4, pc}
    6a78:	0001868d 	.word	0x0001868d
    6a7c:	00019a84 	.word	0x00019a84
    6a80:	00019a8b 	.word	0x00019a8b
    6a84:	0001a092 	.word	0x0001a092
    6a88:	00019f70 	.word	0x00019f70

00006a8c <att_pdu_sent>:
{
    6a8c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6a8e:	2104      	movs	r1, #4
    6a90:	f7ff fb48 	bl	6124 <bt_l2cap_le_lookup_tx_cid>
}
    6a94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6a98:	30cc      	adds	r0, #204	; 0xcc
    6a9a:	f010 bde7 	b.w	1766c <_impl_k_sem_give>

00006a9e <att_cfm_sent>:
{
    6a9e:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6aa0:	2104      	movs	r1, #4
    6aa2:	f7ff fb3f 	bl	6124 <bt_l2cap_le_lookup_tx_cid>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6aa6:	f3bf 8f5b 	dmb	ish
    6aaa:	f100 0394 	add.w	r3, r0, #148	; 0x94
    6aae:	e853 2f00 	ldrex	r2, [r3]
    6ab2:	f022 0202 	bic.w	r2, r2, #2
    6ab6:	e843 2100 	strex	r1, r2, [r3]
    6aba:	2900      	cmp	r1, #0
    6abc:	d1f7      	bne.n	6aae <att_cfm_sent+0x10>
    6abe:	f3bf 8f5b 	dmb	ish
    6ac2:	30cc      	adds	r0, #204	; 0xcc
}
    6ac4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6ac8:	f010 bdd0 	b.w	1766c <_impl_k_sem_give>

00006acc <att_rsp_sent>:
{
    6acc:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    6ace:	2104      	movs	r1, #4
    6ad0:	f7ff fb28 	bl	6124 <bt_l2cap_le_lookup_tx_cid>
    6ad4:	f3bf 8f5b 	dmb	ish
    6ad8:	f100 0394 	add.w	r3, r0, #148	; 0x94
    6adc:	e853 2f00 	ldrex	r2, [r3]
    6ae0:	f022 0201 	bic.w	r2, r2, #1
    6ae4:	e843 2100 	strex	r1, r2, [r3]
    6ae8:	2900      	cmp	r1, #0
    6aea:	d1f7      	bne.n	6adc <att_rsp_sent+0x10>
    6aec:	f3bf 8f5b 	dmb	ish
    6af0:	30cc      	adds	r0, #204	; 0xcc
}
    6af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6af6:	f010 bdb9 	b.w	1766c <_impl_k_sem_give>
	...

00006afc <att_chan_get>:
	if (conn->state != BT_CONN_CONNECTED) {
    6afc:	7b03      	ldrb	r3, [r0, #12]
    6afe:	2b03      	cmp	r3, #3
{
    6b00:	b513      	push	{r0, r1, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6b02:	d00b      	beq.n	6b1c <att_chan_get+0x20>
		BT_WARN("Not connected");
    6b04:	4b15      	ldr	r3, [pc, #84]	; (6b5c <att_chan_get+0x60>)
    6b06:	9301      	str	r3, [sp, #4]
    6b08:	9300      	str	r3, [sp, #0]
    6b0a:	4a15      	ldr	r2, [pc, #84]	; (6b60 <att_chan_get+0x64>)
    6b0c:	4b15      	ldr	r3, [pc, #84]	; (6b64 <att_chan_get+0x68>)
    6b0e:	4916      	ldr	r1, [pc, #88]	; (6b68 <att_chan_get+0x6c>)
    6b10:	4816      	ldr	r0, [pc, #88]	; (6b6c <att_chan_get+0x70>)
		BT_WARN("ATT context flagged as disconnected");
    6b12:	f7fa fde5 	bl	16e0 <printk>
		return NULL;
    6b16:	2000      	movs	r0, #0
}
    6b18:	b002      	add	sp, #8
    6b1a:	bd10      	pop	{r4, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    6b1c:	2104      	movs	r1, #4
    6b1e:	f7ff fb11 	bl	6144 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    6b22:	4604      	mov	r4, r0
    6b24:	b950      	cbnz	r0, 6b3c <att_chan_get+0x40>
		BT_ERR("Unable to find ATT channel");
    6b26:	4b0d      	ldr	r3, [pc, #52]	; (6b5c <att_chan_get+0x60>)
    6b28:	9301      	str	r3, [sp, #4]
    6b2a:	9300      	str	r3, [sp, #0]
    6b2c:	4a10      	ldr	r2, [pc, #64]	; (6b70 <att_chan_get+0x74>)
    6b2e:	4b0d      	ldr	r3, [pc, #52]	; (6b64 <att_chan_get+0x68>)
    6b30:	490d      	ldr	r1, [pc, #52]	; (6b68 <att_chan_get+0x6c>)
    6b32:	4810      	ldr	r0, [pc, #64]	; (6b74 <att_chan_get+0x78>)
    6b34:	f7fa fdd4 	bl	16e0 <printk>
    6b38:	4620      	mov	r0, r4
    6b3a:	e7ed      	b.n	6b18 <att_chan_get+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b3c:	f3bf 8f5b 	dmb	ish
    6b40:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    6b44:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    6b48:	075b      	lsls	r3, r3, #29
    6b4a:	d5f5      	bpl.n	6b38 <att_chan_get+0x3c>
		BT_WARN("ATT context flagged as disconnected");
    6b4c:	4b03      	ldr	r3, [pc, #12]	; (6b5c <att_chan_get+0x60>)
    6b4e:	9301      	str	r3, [sp, #4]
    6b50:	9300      	str	r3, [sp, #0]
    6b52:	4a03      	ldr	r2, [pc, #12]	; (6b60 <att_chan_get+0x64>)
    6b54:	4b03      	ldr	r3, [pc, #12]	; (6b64 <att_chan_get+0x68>)
    6b56:	4904      	ldr	r1, [pc, #16]	; (6b68 <att_chan_get+0x6c>)
    6b58:	4807      	ldr	r0, [pc, #28]	; (6b78 <att_chan_get+0x7c>)
    6b5a:	e7da      	b.n	6b12 <att_chan_get+0x16>
    6b5c:	0001868d 	.word	0x0001868d
    6b60:	00019806 	.word	0x00019806
    6b64:	00019f51 	.word	0x00019f51
    6b68:	00019a8b 	.word	0x00019a8b
    6b6c:	00019fac 	.word	0x00019fac
    6b70:	00019a84 	.word	0x00019a84
    6b74:	00019fca 	.word	0x00019fca
    6b78:	00019ff5 	.word	0x00019ff5

00006b7c <write_cb>:
{
    6b7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    6b80:	680f      	ldr	r7, [r1, #0]
{
    6b82:	460c      	mov	r4, r1
    6b84:	4606      	mov	r6, r0
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    6b86:	4601      	mov	r1, r0
    6b88:	222a      	movs	r2, #42	; 0x2a
    6b8a:	4638      	mov	r0, r7
    6b8c:	f7ff fcb0 	bl	64f0 <check_perm>
    6b90:	4605      	mov	r5, r0
    6b92:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    6b94:	b9e8      	cbnz	r0, 6bd2 <write_cb+0x56>
	write = attr->write(data->conn, attr, data->value, data->len,
    6b96:	8a62      	ldrh	r2, [r4, #18]
    6b98:	9001      	str	r0, [sp, #4]
    6b9a:	9200      	str	r2, [sp, #0]
    6b9c:	7c23      	ldrb	r3, [r4, #16]
    6b9e:	f8d6 8008 	ldr.w	r8, [r6, #8]
    6ba2:	68e2      	ldr	r2, [r4, #12]
    6ba4:	4631      	mov	r1, r6
    6ba6:	4638      	mov	r0, r7
    6ba8:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    6baa:	2800      	cmp	r0, #0
    6bac:	db02      	blt.n	6bb4 <write_cb+0x38>
    6bae:	7c23      	ldrb	r3, [r4, #16]
    6bb0:	4298      	cmp	r0, r3
    6bb2:	d00b      	beq.n	6bcc <write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    6bb4:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    6bb8:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    6bba:	bf9a      	itte	ls
    6bbc:	4240      	negls	r0, r0
    6bbe:	b2c0      	uxtbls	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    6bc0:	200e      	movhi	r0, #14
		data->err = err_to_att(write);
    6bc2:	7520      	strb	r0, [r4, #20]
}
    6bc4:	4628      	mov	r0, r5
    6bc6:	b002      	add	sp, #8
    6bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->err = 0;
    6bcc:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    6bce:	2501      	movs	r5, #1
    6bd0:	e7f8      	b.n	6bc4 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
    6bd2:	2500      	movs	r5, #0
    6bd4:	e7f6      	b.n	6bc4 <write_cb+0x48>

00006bd6 <read_cb>:
{
    6bd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6bda:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6bdc:	6888      	ldr	r0, [r1, #8]
	struct bt_att *att = data->att;
    6bde:	f8d1 9000 	ldr.w	r9, [r1]
{
    6be2:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6be4:	3008      	adds	r0, #8
    6be6:	2100      	movs	r1, #0
	struct bt_conn *conn = att->chan.chan.conn;
    6be8:	f8d9 8000 	ldr.w	r8, [r9]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6bec:	f010 f8c8 	bl	16d80 <net_buf_simple_add>
	data->err = 0x00;
    6bf0:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    6bf2:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    6bf4:	7427      	strb	r7, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    6bf6:	2215      	movs	r2, #21
    6bf8:	4631      	mov	r1, r6
    6bfa:	4640      	mov	r0, r8
    6bfc:	f7ff fc78 	bl	64f0 <check_perm>
    6c00:	4605      	mov	r5, r0
    6c02:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    6c04:	bb08      	cbnz	r0, 6c4a <read_cb+0x74>
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    6c06:	68a1      	ldr	r1, [r4, #8]
    6c08:	f8b9 305a 	ldrh.w	r3, [r9, #90]	; 0x5a
    6c0c:	898a      	ldrh	r2, [r1, #12]
    6c0e:	6889      	ldr	r1, [r1, #8]
    6c10:	88a0      	ldrh	r0, [r4, #4]
    6c12:	9000      	str	r0, [sp, #0]
    6c14:	1a9b      	subs	r3, r3, r2
    6c16:	6877      	ldr	r7, [r6, #4]
    6c18:	440a      	add	r2, r1
    6c1a:	b29b      	uxth	r3, r3
    6c1c:	4631      	mov	r1, r6
    6c1e:	4640      	mov	r0, r8
    6c20:	47b8      	blx	r7
	if (read < 0) {
    6c22:	1e01      	subs	r1, r0, #0
    6c24:	da0b      	bge.n	6c3e <read_cb+0x68>
	if (err < 0 && err >= -0xff) {
    6c26:	f101 03ff 	add.w	r3, r1, #255	; 0xff
    6c2a:	2bfe      	cmp	r3, #254	; 0xfe
		return -err;
    6c2c:	bf9a      	itte	ls
    6c2e:	4249      	negls	r1, r1
    6c30:	b2c9      	uxtbls	r1, r1
	return BT_ATT_ERR_UNLIKELY;
    6c32:	210e      	movhi	r1, #14
		data->err = err_to_att(read);
    6c34:	7421      	strb	r1, [r4, #16]
}
    6c36:	4628      	mov	r0, r5
    6c38:	b003      	add	sp, #12
    6c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	net_buf_add(data->buf, read);
    6c3e:	68a0      	ldr	r0, [r4, #8]
    6c40:	3008      	adds	r0, #8
    6c42:	f010 f89d 	bl	16d80 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    6c46:	2501      	movs	r5, #1
    6c48:	e7f5      	b.n	6c36 <read_cb+0x60>
		return BT_GATT_ITER_STOP;
    6c4a:	463d      	mov	r5, r7
    6c4c:	e7f3      	b.n	6c36 <read_cb+0x60>
	...

00006c50 <bt_att_create_pdu>:
{
    6c50:	b530      	push	{r4, r5, lr}
    6c52:	b085      	sub	sp, #20
    6c54:	460d      	mov	r5, r1
    6c56:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    6c58:	f7ff ff50 	bl	6afc <att_chan_get>
	if (!att) {
    6c5c:	b1f0      	cbz	r0, 6c9c <bt_att_create_pdu+0x4c>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    6c5e:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
    6c62:	3401      	adds	r4, #1
    6c64:	428c      	cmp	r4, r1
    6c66:	d90e      	bls.n	6c86 <bt_att_create_pdu+0x36>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    6c68:	4b0d      	ldr	r3, [pc, #52]	; (6ca0 <bt_att_create_pdu+0x50>)
    6c6a:	9303      	str	r3, [sp, #12]
    6c6c:	9402      	str	r4, [sp, #8]
    6c6e:	9101      	str	r1, [sp, #4]
    6c70:	9300      	str	r3, [sp, #0]
    6c72:	4a0c      	ldr	r2, [pc, #48]	; (6ca4 <bt_att_create_pdu+0x54>)
    6c74:	4b0c      	ldr	r3, [pc, #48]	; (6ca8 <bt_att_create_pdu+0x58>)
    6c76:	490d      	ldr	r1, [pc, #52]	; (6cac <bt_att_create_pdu+0x5c>)
    6c78:	480d      	ldr	r0, [pc, #52]	; (6cb0 <bt_att_create_pdu+0x60>)
    6c7a:	f7fa fd31 	bl	16e0 <printk>
		return NULL;
    6c7e:	2400      	movs	r4, #0
}
    6c80:	4620      	mov	r0, r4
    6c82:	b005      	add	sp, #20
    6c84:	bd30      	pop	{r4, r5, pc}
	buf = bt_l2cap_create_pdu(NULL, 0);
    6c86:	2100      	movs	r1, #0
    6c88:	4608      	mov	r0, r1
    6c8a:	f7ff f95d 	bl	5f48 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6c8e:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    6c90:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6c92:	3008      	adds	r0, #8
    6c94:	f010 f874 	bl	16d80 <net_buf_simple_add>
	hdr->code = op;
    6c98:	7005      	strb	r5, [r0, #0]
	return buf;
    6c9a:	e7f1      	b.n	6c80 <bt_att_create_pdu+0x30>
		return NULL;
    6c9c:	4604      	mov	r4, r0
    6c9e:	e7ef      	b.n	6c80 <bt_att_create_pdu+0x30>
    6ca0:	0001868d 	.word	0x0001868d
    6ca4:	00019806 	.word	0x00019806
    6ca8:	00019f5e 	.word	0x00019f5e
    6cac:	00019a8b 	.word	0x00019a8b
    6cb0:	0001a0e3 	.word	0x0001a0e3

00006cb4 <att_indicate>:
{
    6cb4:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    6cb6:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    6cb8:	f101 0008 	add.w	r0, r1, #8
{
    6cbc:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    6cbe:	f010 f89d 	bl	16dfc <net_buf_simple_pull_le16>
	bt_gatt_notification(conn, handle, buf->data, buf->len);
    6cc2:	89ab      	ldrh	r3, [r5, #12]
    6cc4:	68aa      	ldr	r2, [r5, #8]
    6cc6:	4601      	mov	r1, r0
    6cc8:	4620      	mov	r0, r4
    6cca:	f001 fd81 	bl	87d0 <bt_gatt_notification>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    6cce:	2200      	movs	r2, #0
    6cd0:	211e      	movs	r1, #30
    6cd2:	4620      	mov	r0, r4
    6cd4:	f7ff ffbc 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    6cd8:	4602      	mov	r2, r0
    6cda:	b120      	cbz	r0, 6ce6 <att_indicate+0x32>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    6cdc:	4b03      	ldr	r3, [pc, #12]	; (6cec <att_indicate+0x38>)
    6cde:	2104      	movs	r1, #4
    6ce0:	4620      	mov	r0, r4
    6ce2:	f7ff f934 	bl	5f4e <bt_l2cap_send_cb>
}
    6ce6:	2000      	movs	r0, #0
    6ce8:	bd38      	pop	{r3, r4, r5, pc}
    6cea:	bf00      	nop
    6cec:	00006a9f 	.word	0x00006a9f

00006cf0 <att_mtu_req>:
{
    6cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
    6cf4:	688b      	ldr	r3, [r1, #8]
    6cf6:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6cf8:	2d16      	cmp	r5, #22
{
    6cfa:	4606      	mov	r6, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    6cfc:	d920      	bls.n	6d40 <att_mtu_req+0x50>
	struct bt_conn *conn = att->chan.chan.conn;
    6cfe:	f8d0 8000 	ldr.w	r8, [r0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    6d02:	2202      	movs	r2, #2
    6d04:	2103      	movs	r1, #3
    6d06:	4640      	mov	r0, r8
    6d08:	f7ff ffa2 	bl	6c50 <bt_att_create_pdu>
	if (!pdu) {
    6d0c:	4607      	mov	r7, r0
    6d0e:	b1d0      	cbz	r0, 6d46 <att_mtu_req+0x56>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    6d10:	2102      	movs	r1, #2
    6d12:	3008      	adds	r0, #8
    6d14:	f010 f834 	bl	16d80 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    6d18:	2400      	movs	r4, #0
    6d1a:	f06f 0308 	mvn.w	r3, #8
    6d1e:	7003      	strb	r3, [r0, #0]
    6d20:	7044      	strb	r4, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    6d22:	4b0a      	ldr	r3, [pc, #40]	; (6d4c <att_mtu_req+0x5c>)
    6d24:	4640      	mov	r0, r8
    6d26:	463a      	mov	r2, r7
    6d28:	2104      	movs	r1, #4
    6d2a:	f7ff f910 	bl	5f4e <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    6d2e:	2df7      	cmp	r5, #247	; 0xf7
    6d30:	bf28      	it	cs
    6d32:	25f7      	movcs	r5, #247	; 0xf7
    6d34:	8775      	strh	r5, [r6, #58]	; 0x3a
	att->chan.tx.mtu = att->chan.rx.mtu;
    6d36:	f8a6 505a 	strh.w	r5, [r6, #90]	; 0x5a
	return 0;
    6d3a:	4620      	mov	r0, r4
    6d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
    6d40:	2004      	movs	r0, #4
    6d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    6d46:	200e      	movs	r0, #14
}
    6d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d4c:	00006acd 	.word	0x00006acd

00006d50 <send_err_rsp.part.7>:
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    6d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d54:	4688      	mov	r8, r1
    6d56:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    6d58:	2101      	movs	r1, #1
    6d5a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_conn *conn, u8_t req, u16_t handle,
    6d5c:	4605      	mov	r5, r0
    6d5e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    6d60:	f7ff ff76 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    6d64:	4604      	mov	r4, r0
    6d66:	b180      	cbz	r0, 6d8a <send_err_rsp.part.7+0x3a>
	rsp = net_buf_add(buf, sizeof(*rsp));
    6d68:	2104      	movs	r1, #4
    6d6a:	3008      	adds	r0, #8
    6d6c:	f010 f808 	bl	16d80 <net_buf_simple_add>
	rsp->request = req;
    6d70:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    6d74:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    6d76:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6d7a:	4622      	mov	r2, r4
    6d7c:	4628      	mov	r0, r5
    6d7e:	4b04      	ldr	r3, [pc, #16]	; (6d90 <send_err_rsp.part.7+0x40>)
    6d80:	2104      	movs	r1, #4
}
    6d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    6d86:	f7ff b8e2 	b.w	5f4e <bt_l2cap_send_cb>
    6d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d8e:	bf00      	nop
    6d90:	00006acd 	.word	0x00006acd

00006d94 <bt_att_recv>:
{
    6d94:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    6d96:	898b      	ldrh	r3, [r1, #12]
{
    6d98:	b085      	sub	sp, #20
    6d9a:	4604      	mov	r4, r0
    6d9c:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
    6d9e:	b953      	cbnz	r3, 6db6 <bt_att_recv+0x22>
		BT_ERR("Too small ATT PDU received");
    6da0:	4b4b      	ldr	r3, [pc, #300]	; (6ed0 <bt_att_recv+0x13c>)
    6da2:	9301      	str	r3, [sp, #4]
    6da4:	9300      	str	r3, [sp, #0]
    6da6:	4a4b      	ldr	r2, [pc, #300]	; (6ed4 <bt_att_recv+0x140>)
    6da8:	4b4b      	ldr	r3, [pc, #300]	; (6ed8 <bt_att_recv+0x144>)
    6daa:	494c      	ldr	r1, [pc, #304]	; (6edc <bt_att_recv+0x148>)
    6dac:	484c      	ldr	r0, [pc, #304]	; (6ee0 <bt_att_recv+0x14c>)
			BT_WARN("Ignoring unexpected request");
    6dae:	f7fa fc97 	bl	16e0 <printk>
}
    6db2:	b005      	add	sp, #20
    6db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_att_hdr *hdr = (void *)buf->data;
    6db6:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    6db8:	2101      	movs	r1, #1
	struct bt_att_hdr *hdr = (void *)buf->data;
    6dba:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    6dbe:	f010 f80d 	bl	16ddc <net_buf_simple_pull>
		if (hdr->code == handlers[i].op) {
    6dc2:	4a48      	ldr	r2, [pc, #288]	; (6ee4 <bt_att_recv+0x150>)
    6dc4:	7828      	ldrb	r0, [r5, #0]
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6dc6:	2300      	movs	r3, #0
    6dc8:	4611      	mov	r1, r2
		if (hdr->code == handlers[i].op) {
    6dca:	f812 6033 	ldrb.w	r6, [r2, r3, lsl #3]
    6dce:	4286      	cmp	r6, r0
    6dd0:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
    6dd4:	d11c      	bne.n	6e10 <bt_att_recv+0x7c>
		if (handler->type == ATT_REQUEST &&
    6dd6:	4472      	add	r2, lr
    6dd8:	7896      	ldrb	r6, [r2, #2]
    6dda:	2e01      	cmp	r6, #1
    6ddc:	d136      	bne.n	6e4c <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6dde:	f3bf 8f5b 	dmb	ish
    6de2:	f104 0294 	add.w	r2, r4, #148	; 0x94
    6de6:	e852 3f00 	ldrex	r3, [r2]
    6dea:	f043 0001 	orr.w	r0, r3, #1
    6dee:	e842 0c00 	strex	ip, r0, [r2]
    6df2:	f1bc 0f00 	cmp.w	ip, #0
    6df6:	d1f6      	bne.n	6de6 <bt_att_recv+0x52>
    6df8:	f3bf 8f5b 	dmb	ish
    6dfc:	07da      	lsls	r2, r3, #31
    6dfe:	d540      	bpl.n	6e82 <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected request");
    6e00:	4b33      	ldr	r3, [pc, #204]	; (6ed0 <bt_att_recv+0x13c>)
    6e02:	9301      	str	r3, [sp, #4]
    6e04:	9300      	str	r3, [sp, #0]
    6e06:	4a38      	ldr	r2, [pc, #224]	; (6ee8 <bt_att_recv+0x154>)
    6e08:	4b33      	ldr	r3, [pc, #204]	; (6ed8 <bt_att_recv+0x144>)
    6e0a:	4934      	ldr	r1, [pc, #208]	; (6edc <bt_att_recv+0x148>)
    6e0c:	4837      	ldr	r0, [pc, #220]	; (6eec <bt_att_recv+0x158>)
    6e0e:	e7ce      	b.n	6dae <bt_att_recv+0x1a>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    6e10:	3301      	adds	r3, #1
    6e12:	2b1b      	cmp	r3, #27
    6e14:	d1d9      	bne.n	6dca <bt_att_recv+0x36>
		BT_WARN("Unknown ATT code 0x%02x", hdr->code);
    6e16:	4b2e      	ldr	r3, [pc, #184]	; (6ed0 <bt_att_recv+0x13c>)
    6e18:	9302      	str	r3, [sp, #8]
    6e1a:	9001      	str	r0, [sp, #4]
    6e1c:	9300      	str	r3, [sp, #0]
    6e1e:	4a32      	ldr	r2, [pc, #200]	; (6ee8 <bt_att_recv+0x154>)
    6e20:	4b2d      	ldr	r3, [pc, #180]	; (6ed8 <bt_att_recv+0x144>)
    6e22:	492e      	ldr	r1, [pc, #184]	; (6edc <bt_att_recv+0x148>)
    6e24:	4832      	ldr	r0, [pc, #200]	; (6ef0 <bt_att_recv+0x15c>)
    6e26:	f7fa fc5b 	bl	16e0 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    6e2a:	782d      	ldrb	r5, [r5, #0]
    6e2c:	4628      	mov	r0, r5
    6e2e:	f7ff fa09 	bl	6244 <att_op_get_type>
    6e32:	2800      	cmp	r0, #0
    6e34:	d0bd      	beq.n	6db2 <bt_att_recv+0x1e>
	if (!req) {
    6e36:	2d00      	cmp	r5, #0
    6e38:	d0bb      	beq.n	6db2 <bt_att_recv+0x1e>
    6e3a:	2306      	movs	r3, #6
    6e3c:	2200      	movs	r2, #0
    6e3e:	4629      	mov	r1, r5
    6e40:	6820      	ldr	r0, [r4, #0]
}
    6e42:	b005      	add	sp, #20
    6e44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6e48:	f7ff bf82 	b.w	6d50 <send_err_rsp.part.7>
		} else if (handler->type == ATT_INDICATION &&
    6e4c:	2e05      	cmp	r6, #5
    6e4e:	d118      	bne.n	6e82 <bt_att_recv+0xee>
    6e50:	f3bf 8f5b 	dmb	ish
    6e54:	f104 0294 	add.w	r2, r4, #148	; 0x94
    6e58:	e852 3f00 	ldrex	r3, [r2]
    6e5c:	f043 0002 	orr.w	r0, r3, #2
    6e60:	e842 0c00 	strex	ip, r0, [r2]
    6e64:	f1bc 0f00 	cmp.w	ip, #0
    6e68:	d1f6      	bne.n	6e58 <bt_att_recv+0xc4>
    6e6a:	f3bf 8f5b 	dmb	ish
    6e6e:	079b      	lsls	r3, r3, #30
    6e70:	d507      	bpl.n	6e82 <bt_att_recv+0xee>
			BT_WARN("Ignoring unexpected indication");
    6e72:	4b17      	ldr	r3, [pc, #92]	; (6ed0 <bt_att_recv+0x13c>)
    6e74:	9301      	str	r3, [sp, #4]
    6e76:	9300      	str	r3, [sp, #0]
    6e78:	4a1b      	ldr	r2, [pc, #108]	; (6ee8 <bt_att_recv+0x154>)
    6e7a:	4b17      	ldr	r3, [pc, #92]	; (6ed8 <bt_att_recv+0x144>)
    6e7c:	4917      	ldr	r1, [pc, #92]	; (6edc <bt_att_recv+0x148>)
    6e7e:	481d      	ldr	r0, [pc, #116]	; (6ef4 <bt_att_recv+0x160>)
    6e80:	e795      	b.n	6dae <bt_att_recv+0x1a>
	if (buf->len < handler->expect_len) {
    6e82:	eb01 030e 	add.w	r3, r1, lr
    6e86:	89ba      	ldrh	r2, [r7, #12]
    6e88:	7859      	ldrb	r1, [r3, #1]
    6e8a:	4291      	cmp	r1, r2
    6e8c:	d90f      	bls.n	6eae <bt_att_recv+0x11a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    6e8e:	4b10      	ldr	r3, [pc, #64]	; (6ed0 <bt_att_recv+0x13c>)
    6e90:	9303      	str	r3, [sp, #12]
    6e92:	7829      	ldrb	r1, [r5, #0]
    6e94:	9102      	str	r1, [sp, #8]
    6e96:	9201      	str	r2, [sp, #4]
    6e98:	9300      	str	r3, [sp, #0]
    6e9a:	4a0e      	ldr	r2, [pc, #56]	; (6ed4 <bt_att_recv+0x140>)
    6e9c:	4b0e      	ldr	r3, [pc, #56]	; (6ed8 <bt_att_recv+0x144>)
    6e9e:	490f      	ldr	r1, [pc, #60]	; (6edc <bt_att_recv+0x148>)
    6ea0:	4815      	ldr	r0, [pc, #84]	; (6ef8 <bt_att_recv+0x164>)
    6ea2:	f7fa fc1d 	bl	16e0 <printk>
	if (handler->type == ATT_REQUEST && err) {
    6ea6:	2e01      	cmp	r6, #1
    6ea8:	d183      	bne.n	6db2 <bt_att_recv+0x1e>
		err = BT_ATT_ERR_INVALID_PDU;
    6eaa:	2304      	movs	r3, #4
    6eac:	e00a      	b.n	6ec4 <bt_att_recv+0x130>
		err = handler->func(att, buf);
    6eae:	685b      	ldr	r3, [r3, #4]
    6eb0:	4639      	mov	r1, r7
    6eb2:	4620      	mov	r0, r4
    6eb4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    6eb6:	2e01      	cmp	r6, #1
		err = handler->func(att, buf);
    6eb8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    6eba:	f47f af7a 	bne.w	6db2 <bt_att_recv+0x1e>
    6ebe:	2800      	cmp	r0, #0
    6ec0:	f43f af77 	beq.w	6db2 <bt_att_recv+0x1e>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    6ec4:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    6ec6:	2900      	cmp	r1, #0
    6ec8:	f43f af73 	beq.w	6db2 <bt_att_recv+0x1e>
    6ecc:	2200      	movs	r2, #0
    6ece:	e7b7      	b.n	6e40 <bt_att_recv+0xac>
    6ed0:	0001868d 	.word	0x0001868d
    6ed4:	00019a84 	.word	0x00019a84
    6ed8:	00019f45 	.word	0x00019f45
    6edc:	00019a8b 	.word	0x00019a8b
    6ee0:	0001a118 	.word	0x0001a118
    6ee4:	0001a218 	.word	0x0001a218
    6ee8:	00019806 	.word	0x00019806
    6eec:	0001a143 	.word	0x0001a143
    6ef0:	0001a1cd 	.word	0x0001a1cd
    6ef4:	0001a16f 	.word	0x0001a16f
    6ef8:	0001a19e 	.word	0x0001a19e

00006efc <att_read_group_req>:
{
    6efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6f00:	898b      	ldrh	r3, [r1, #12]
    6f02:	2b06      	cmp	r3, #6
{
    6f04:	b08d      	sub	sp, #52	; 0x34
    6f06:	4680      	mov	r8, r0
    6f08:	460c      	mov	r4, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    6f0a:	d001      	beq.n	6f10 <att_read_group_req+0x14>
    6f0c:	2b14      	cmp	r3, #20
    6f0e:	d168      	bne.n	6fe2 <att_read_group_req+0xe6>
	req = (void *)buf->data;
    6f10:	4620      	mov	r0, r4
	net_buf_pull(buf, sizeof(*req));
    6f12:	2104      	movs	r1, #4
	req = (void *)buf->data;
    6f14:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    6f18:	f8d8 9000 	ldr.w	r9, [r8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    6f1c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    6f1e:	885e      	ldrh	r6, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    6f20:	af02      	add	r7, sp, #8
	net_buf_pull(buf, sizeof(*req));
    6f22:	f00f ff5b 	bl	16ddc <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    6f26:	4621      	mov	r1, r4
    6f28:	4638      	mov	r0, r7
    6f2a:	f7ff fb7b 	bl	6624 <uuid_create>
    6f2e:	2800      	cmp	r0, #0
    6f30:	d059      	beq.n	6fe6 <att_read_group_req+0xea>
	if (!start || !end) {
    6f32:	2d00      	cmp	r5, #0
    6f34:	d05a      	beq.n	6fec <att_read_group_req+0xf0>
    6f36:	2400      	movs	r4, #0
    6f38:	2e00      	cmp	r6, #0
    6f3a:	d056      	beq.n	6fea <att_read_group_req+0xee>
	if (start > end) {
    6f3c:	42b5      	cmp	r5, r6
    6f3e:	d855      	bhi.n	6fec <att_read_group_req+0xf0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6f40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    6f44:	4669      	mov	r1, sp
    6f46:	4638      	mov	r0, r7
    6f48:	f88d 4000 	strb.w	r4, [sp]
    6f4c:	f8ad 3002 	strh.w	r3, [sp, #2]
    6f50:	f7fb fcd6 	bl	2900 <bt_uuid_cmp>
    6f54:	bb38      	cbnz	r0, 6fa6 <att_read_group_req+0xaa>
	struct bt_conn *conn = att->chan.chan.conn;
    6f56:	f8d8 9000 	ldr.w	r9, [r8]
	memset(&data, 0, sizeof(data));
    6f5a:	2214      	movs	r2, #20
    6f5c:	2100      	movs	r1, #0
    6f5e:	a807      	add	r0, sp, #28
    6f60:	f7f9 fb7e 	bl	660 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    6f64:	2201      	movs	r2, #1
    6f66:	2111      	movs	r1, #17
    6f68:	4648      	mov	r0, r9
    6f6a:	f7ff fe71 	bl	6c50 <bt_att_create_pdu>
    6f6e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    6f70:	2800      	cmp	r0, #0
    6f72:	d038      	beq.n	6fe6 <att_read_group_req+0xea>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6f74:	2101      	movs	r1, #1
    6f76:	3008      	adds	r0, #8
	data.uuid = uuid;
    6f78:	9708      	str	r7, [sp, #32]
	data.att = att;
    6f7a:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6f7e:	f00f feff 	bl	16d80 <net_buf_simple_add>
	data.rsp->len = 0;
    6f82:	2700      	movs	r7, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    6f84:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6f86:	ab07      	add	r3, sp, #28
	data.rsp->len = 0;
    6f88:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6f8a:	4a1c      	ldr	r2, [pc, #112]	; (6ffc <att_read_group_req+0x100>)
	data.group = NULL;
    6f8c:	970b      	str	r7, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    6f8e:	4631      	mov	r1, r6
    6f90:	4628      	mov	r0, r5
    6f92:	f000 ff49 	bl	7e28 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    6f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6f98:	781c      	ldrb	r4, [r3, #0]
    6f9a:	b9d4      	cbnz	r4, 6fd2 <att_read_group_req+0xd6>
		net_buf_unref(data.buf);
    6f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f9e:	f00f febd 	bl	16d1c <net_buf_unref>
    6fa2:	230a      	movs	r3, #10
    6fa4:	e00c      	b.n	6fc0 <att_read_group_req+0xc4>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    6fa6:	f642 0301 	movw	r3, #10241	; 0x2801
    6faa:	a901      	add	r1, sp, #4
    6fac:	4638      	mov	r0, r7
    6fae:	f88d 4004 	strb.w	r4, [sp, #4]
    6fb2:	f8ad 3006 	strh.w	r3, [sp, #6]
    6fb6:	f7fb fca3 	bl	2900 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    6fba:	2800      	cmp	r0, #0
    6fbc:	d0cb      	beq.n	6f56 <att_read_group_req+0x5a>
    6fbe:	2310      	movs	r3, #16
    6fc0:	462a      	mov	r2, r5
    6fc2:	2110      	movs	r1, #16
    6fc4:	4648      	mov	r0, r9
    6fc6:	f7ff fec3 	bl	6d50 <send_err_rsp.part.7>
}
    6fca:	4620      	mov	r0, r4
    6fcc:	b00d      	add	sp, #52	; 0x34
    6fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    6fd2:	4b0b      	ldr	r3, [pc, #44]	; (7000 <att_read_group_req+0x104>)
    6fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6fd6:	2104      	movs	r1, #4
    6fd8:	4648      	mov	r0, r9
    6fda:	f7fe ffb8 	bl	5f4e <bt_l2cap_send_cb>
		return 0;
    6fde:	2400      	movs	r4, #0
    6fe0:	e7f3      	b.n	6fca <att_read_group_req+0xce>
		return BT_ATT_ERR_INVALID_PDU;
    6fe2:	2404      	movs	r4, #4
    6fe4:	e7f1      	b.n	6fca <att_read_group_req+0xce>
		return BT_ATT_ERR_UNLIKELY;
    6fe6:	240e      	movs	r4, #14
    6fe8:	e7ef      	b.n	6fca <att_read_group_req+0xce>
			*err = 0;
    6fea:	4635      	mov	r5, r6
    6fec:	2301      	movs	r3, #1
    6fee:	462a      	mov	r2, r5
    6ff0:	2110      	movs	r1, #16
    6ff2:	4648      	mov	r0, r9
    6ff4:	f7ff feac 	bl	6d50 <send_err_rsp.part.7>
    6ff8:	e7f1      	b.n	6fde <att_read_group_req+0xe2>
    6ffa:	bf00      	nop
    6ffc:	000062b5 	.word	0x000062b5
    7000:	00006acd 	.word	0x00006acd

00007004 <att_read_mult_req>:
{
    7004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7008:	6804      	ldr	r4, [r0, #0]
{
    700a:	b087      	sub	sp, #28
	memset(&data, 0, sizeof(data));
    700c:	2214      	movs	r2, #20
{
    700e:	4606      	mov	r6, r0
    7010:	460d      	mov	r5, r1
	memset(&data, 0, sizeof(data));
    7012:	a801      	add	r0, sp, #4
    7014:	2100      	movs	r1, #0
    7016:	f7f9 fb23 	bl	660 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    701a:	2200      	movs	r2, #0
    701c:	210f      	movs	r1, #15
    701e:	4620      	mov	r0, r4
    7020:	f7ff fe16 	bl	6c50 <bt_att_create_pdu>
    7024:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    7026:	b368      	cbz	r0, 7084 <att_read_mult_req+0x80>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7028:	f8df 9060 	ldr.w	r9, [pc, #96]	; 708c <att_read_mult_req+0x88>
	data.att = att;
    702c:	9601      	str	r6, [sp, #4]
		handle = net_buf_pull_le16(buf);
    702e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7032:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(u16_t)) {
    7036:	89ab      	ldrh	r3, [r5, #12]
    7038:	2b01      	cmp	r3, #1
    703a:	d806      	bhi.n	704a <att_read_mult_req+0x46>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    703c:	4b12      	ldr	r3, [pc, #72]	; (7088 <att_read_mult_req+0x84>)
    703e:	9a03      	ldr	r2, [sp, #12]
    7040:	2104      	movs	r1, #4
    7042:	4620      	mov	r0, r4
    7044:	f7fe ff83 	bl	5f4e <bt_l2cap_send_cb>
    7048:	e018      	b.n	707c <att_read_mult_req+0x78>
		handle = net_buf_pull_le16(buf);
    704a:	4638      	mov	r0, r7
    704c:	f00f fed6 	bl	16dfc <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    7050:	ab01      	add	r3, sp, #4
    7052:	464a      	mov	r2, r9
    7054:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    7056:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    7058:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    705c:	f000 fee4 	bl	7e28 <bt_gatt_foreach_attr>
		if (data.err) {
    7060:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7064:	2b00      	cmp	r3, #0
    7066:	d0e6      	beq.n	7036 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    7068:	9803      	ldr	r0, [sp, #12]
    706a:	f00f fe57 	bl	16d1c <net_buf_unref>
    706e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7072:	4632      	mov	r2, r6
    7074:	210e      	movs	r1, #14
    7076:	4620      	mov	r0, r4
    7078:	f7ff fe6a 	bl	6d50 <send_err_rsp.part.7>
	return 0;
    707c:	2000      	movs	r0, #0
}
    707e:	b007      	add	sp, #28
    7080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    7084:	200e      	movs	r0, #14
    7086:	e7fa      	b.n	707e <att_read_mult_req+0x7a>
    7088:	00006acd 	.word	0x00006acd
    708c:	00006bd7 	.word	0x00006bd7

00007090 <att_read_rsp>:
{
    7090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7094:	4607      	mov	r7, r0
    7096:	b086      	sub	sp, #24
    7098:	460c      	mov	r4, r1
    709a:	4690      	mov	r8, r2
	if (!handle) {
    709c:	461d      	mov	r5, r3
    709e:	b3a3      	cbz	r3, 710a <att_read_rsp+0x7a>
	struct bt_conn *conn = att->chan.chan.conn;
    70a0:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    70a2:	2214      	movs	r2, #20
    70a4:	2100      	movs	r1, #0
    70a6:	a801      	add	r0, sp, #4
    70a8:	f7f9 fada 	bl	660 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    70ac:	2200      	movs	r2, #0
    70ae:	4641      	mov	r1, r8
    70b0:	4630      	mov	r0, r6
    70b2:	f7ff fdcd 	bl	6c50 <bt_att_create_pdu>
    70b6:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    70b8:	b348      	cbz	r0, 710e <att_read_rsp+0x7e>
	data.offset = offset;
    70ba:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    70be:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    70c2:	2301      	movs	r3, #1
    70c4:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    70c8:	4a12      	ldr	r2, [pc, #72]	; (7114 <att_read_rsp+0x84>)
	data.att = att;
    70ca:	9701      	str	r7, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    70cc:	ab01      	add	r3, sp, #4
    70ce:	4629      	mov	r1, r5
    70d0:	4628      	mov	r0, r5
    70d2:	f000 fea9 	bl	7e28 <bt_gatt_foreach_attr>
	if (data.err) {
    70d6:	f89d 7014 	ldrb.w	r7, [sp, #20]
    70da:	b17f      	cbz	r7, 70fc <att_read_rsp+0x6c>
		net_buf_unref(data.buf);
    70dc:	9803      	ldr	r0, [sp, #12]
    70de:	f00f fe1d 	bl	16d1c <net_buf_unref>
	if (!req) {
    70e2:	b13c      	cbz	r4, 70f4 <att_read_rsp+0x64>
    70e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    70e8:	462a      	mov	r2, r5
    70ea:	4621      	mov	r1, r4
    70ec:	4630      	mov	r0, r6
    70ee:	f7ff fe2f 	bl	6d50 <send_err_rsp.part.7>
		return 0;
    70f2:	2400      	movs	r4, #0
}
    70f4:	4620      	mov	r0, r4
    70f6:	b006      	add	sp, #24
    70f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    70fc:	4b06      	ldr	r3, [pc, #24]	; (7118 <att_read_rsp+0x88>)
    70fe:	9a03      	ldr	r2, [sp, #12]
    7100:	2104      	movs	r1, #4
    7102:	4630      	mov	r0, r6
    7104:	f7fe ff23 	bl	5f4e <bt_l2cap_send_cb>
    7108:	e7f3      	b.n	70f2 <att_read_rsp+0x62>
		return BT_ATT_ERR_INVALID_HANDLE;
    710a:	2401      	movs	r4, #1
    710c:	e7f2      	b.n	70f4 <att_read_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
    710e:	240e      	movs	r4, #14
    7110:	e7f0      	b.n	70f4 <att_read_rsp+0x64>
    7112:	bf00      	nop
    7114:	00006bd7 	.word	0x00006bd7
    7118:	00006acd 	.word	0x00006acd

0000711c <att_read_blob_req>:
{
    711c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
    711e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    7120:	8813      	ldrh	r3, [r2, #0]
    7122:	8852      	ldrh	r2, [r2, #2]
    7124:	9200      	str	r2, [sp, #0]
    7126:	210c      	movs	r1, #12
    7128:	220d      	movs	r2, #13
    712a:	f7ff ffb1 	bl	7090 <att_read_rsp>
}
    712e:	b003      	add	sp, #12
    7130:	f85d fb04 	ldr.w	pc, [sp], #4

00007134 <att_read_req>:
{
    7134:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
    7136:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    7138:	2200      	movs	r2, #0
    713a:	881b      	ldrh	r3, [r3, #0]
    713c:	9200      	str	r2, [sp, #0]
    713e:	210a      	movs	r1, #10
    7140:	220b      	movs	r2, #11
    7142:	f7ff ffa5 	bl	7090 <att_read_rsp>
}
    7146:	b003      	add	sp, #12
    7148:	f85d fb04 	ldr.w	pc, [sp], #4

0000714c <att_read_type_req>:
{
    714c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    7150:	898b      	ldrh	r3, [r1, #12]
    7152:	2b06      	cmp	r3, #6
{
    7154:	b08d      	sub	sp, #52	; 0x34
    7156:	4607      	mov	r7, r0
    7158:	460e      	mov	r6, r1
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    715a:	d001      	beq.n	7160 <att_read_type_req+0x14>
    715c:	2b14      	cmp	r3, #20
    715e:	d152      	bne.n	7206 <att_read_type_req+0xba>
	req = (void *)buf->data;
    7160:	4630      	mov	r0, r6
	net_buf_pull(buf, sizeof(*req));
    7162:	2104      	movs	r1, #4
	req = (void *)buf->data;
    7164:	f850 3f08 	ldr.w	r3, [r0, #8]!
	struct bt_conn *conn = att->chan.chan.conn;
    7168:	f8d7 9000 	ldr.w	r9, [r7]
	start_handle = sys_le16_to_cpu(req->start_handle);
    716c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    716e:	885c      	ldrh	r4, [r3, #2]
	if (!uuid_create(&u.uuid, buf)) {
    7170:	f10d 0804 	add.w	r8, sp, #4
	net_buf_pull(buf, sizeof(*req));
    7174:	f00f fe32 	bl	16ddc <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    7178:	4631      	mov	r1, r6
    717a:	4640      	mov	r0, r8
    717c:	f7ff fa52 	bl	6624 <uuid_create>
    7180:	b198      	cbz	r0, 71aa <att_read_type_req+0x5e>
	if (!start || !end) {
    7182:	2d00      	cmp	r5, #0
    7184:	d042      	beq.n	720c <att_read_type_req+0xc0>
    7186:	2c00      	cmp	r4, #0
    7188:	d03f      	beq.n	720a <att_read_type_req+0xbe>
	if (start > end) {
    718a:	42a5      	cmp	r5, r4
    718c:	d83e      	bhi.n	720c <att_read_type_req+0xc0>
	memset(&data, 0, sizeof(data));
    718e:	2218      	movs	r2, #24
	struct bt_conn *conn = att->chan.chan.conn;
    7190:	683e      	ldr	r6, [r7, #0]
	memset(&data, 0, sizeof(data));
    7192:	2100      	movs	r1, #0
    7194:	eb0d 0002 	add.w	r0, sp, r2
    7198:	f7f9 fa62 	bl	660 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    719c:	2201      	movs	r2, #1
    719e:	2109      	movs	r1, #9
    71a0:	4630      	mov	r0, r6
    71a2:	f7ff fd55 	bl	6c50 <bt_att_create_pdu>
    71a6:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    71a8:	b908      	cbnz	r0, 71ae <att_read_type_req+0x62>
		return BT_ATT_ERR_UNLIKELY;
    71aa:	240e      	movs	r4, #14
    71ac:	e027      	b.n	71fe <att_read_type_req+0xb2>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    71ae:	2101      	movs	r1, #1
    71b0:	3008      	adds	r0, #8
	data.att = att;
    71b2:	9706      	str	r7, [sp, #24]
	data.uuid = uuid;
    71b4:	f8cd 801c 	str.w	r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    71b8:	f00f fde2 	bl	16d80 <net_buf_simple_add>
	data.rsp->len = 0;
    71bc:	2700      	movs	r7, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    71be:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    71c0:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    71c2:	4621      	mov	r1, r4
	data.rsp->len = 0;
    71c4:	7007      	strb	r7, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    71c6:	4a14      	ldr	r2, [pc, #80]	; (7218 <att_read_type_req+0xcc>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    71c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    71cc:	4628      	mov	r0, r5
    71ce:	ab06      	add	r3, sp, #24
    71d0:	f000 fe2a 	bl	7e28 <bt_gatt_foreach_attr>
	if (data.err) {
    71d4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    71d8:	b15c      	cbz	r4, 71f2 <att_read_type_req+0xa6>
		net_buf_unref(data.buf);
    71da:	9808      	ldr	r0, [sp, #32]
    71dc:	f00f fd9e 	bl	16d1c <net_buf_unref>
    71e0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    71e4:	462a      	mov	r2, r5
    71e6:	2108      	movs	r1, #8
    71e8:	4630      	mov	r0, r6
    71ea:	f7ff fdb1 	bl	6d50 <send_err_rsp.part.7>
		return 0;
    71ee:	2400      	movs	r4, #0
    71f0:	e005      	b.n	71fe <att_read_type_req+0xb2>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    71f2:	4b0a      	ldr	r3, [pc, #40]	; (721c <att_read_type_req+0xd0>)
    71f4:	9a08      	ldr	r2, [sp, #32]
    71f6:	2104      	movs	r1, #4
    71f8:	4630      	mov	r0, r6
    71fa:	f7fe fea8 	bl	5f4e <bt_l2cap_send_cb>
}
    71fe:	4620      	mov	r0, r4
    7200:	b00d      	add	sp, #52	; 0x34
    7202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_INVALID_PDU;
    7206:	2404      	movs	r4, #4
    7208:	e7f9      	b.n	71fe <att_read_type_req+0xb2>
			*err = 0;
    720a:	4625      	mov	r5, r4
    720c:	2301      	movs	r3, #1
    720e:	462a      	mov	r2, r5
    7210:	2108      	movs	r1, #8
    7212:	4648      	mov	r0, r9
    7214:	e7e9      	b.n	71ea <att_read_type_req+0x9e>
    7216:	bf00      	nop
    7218:	00006543 	.word	0x00006543
    721c:	00006acd 	.word	0x00006acd

00007220 <att_find_type_req>:
{
    7220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    7224:	f8d0 9000 	ldr.w	r9, [r0]
{
    7228:	4680      	mov	r8, r0
	req = (void *)buf->data;
    722a:	4608      	mov	r0, r1
{
    722c:	b089      	sub	sp, #36	; 0x24
	req = (void *)buf->data;
    722e:	f850 3f08 	ldr.w	r3, [r0, #8]!
{
    7232:	468b      	mov	fp, r1
	value = net_buf_pull(buf, sizeof(*req));
    7234:	2106      	movs	r1, #6
	start_handle = sys_le16_to_cpu(req->start_handle);
    7236:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    7238:	885f      	ldrh	r7, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    723a:	889e      	ldrh	r6, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    723c:	f00f fdce 	bl	16ddc <net_buf_simple_pull>
    7240:	4682      	mov	sl, r0
	if (!start || !end) {
    7242:	2d00      	cmp	r5, #0
    7244:	d057      	beq.n	72f6 <att_find_type_req+0xd6>
    7246:	2400      	movs	r4, #0
    7248:	2f00      	cmp	r7, #0
    724a:	d053      	beq.n	72f4 <att_find_type_req+0xd4>
	if (start > end) {
    724c:	42bd      	cmp	r5, r7
    724e:	d852      	bhi.n	72f6 <att_find_type_req+0xd6>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    7250:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7254:	a902      	add	r1, sp, #8
    7256:	a801      	add	r0, sp, #4
    7258:	f8ad 6006 	strh.w	r6, [sp, #6]
    725c:	f88d 4004 	strb.w	r4, [sp, #4]
    7260:	f88d 4008 	strb.w	r4, [sp, #8]
    7264:	f8ad 300a 	strh.w	r3, [sp, #10]
    7268:	f7fb fb4a 	bl	2900 <bt_uuid_cmp>
    726c:	4606      	mov	r6, r0
    726e:	b148      	cbz	r0, 7284 <att_find_type_req+0x64>
    7270:	230a      	movs	r3, #10
    7272:	462a      	mov	r2, r5
    7274:	2106      	movs	r1, #6
    7276:	4648      	mov	r0, r9
    7278:	f7ff fd6a 	bl	6d50 <send_err_rsp.part.7>
}
    727c:	4620      	mov	r0, r4
    727e:	b009      	add	sp, #36	; 0x24
    7280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct bt_conn *conn = att->chan.chan.conn;
    7284:	f8d8 9000 	ldr.w	r9, [r8]
				 buf->len);
    7288:	f8bb 400c 	ldrh.w	r4, [fp, #12]
	memset(&data, 0, sizeof(data));
    728c:	2214      	movs	r2, #20
    728e:	4631      	mov	r1, r6
    7290:	a803      	add	r0, sp, #12
    7292:	f7f9 f9e5 	bl	660 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    7296:	4632      	mov	r2, r6
    7298:	2107      	movs	r1, #7
    729a:	4648      	mov	r0, r9
    729c:	f7ff fcd8 	bl	6c50 <bt_att_create_pdu>
    72a0:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
    72a2:	b328      	cbz	r0, 72f0 <att_find_type_req+0xd0>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    72a4:	230a      	movs	r3, #10
    72a6:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72aa:	4a14      	ldr	r2, [pc, #80]	; (72fc <att_find_type_req+0xdc>)
	return att_find_type_rsp(att, start_handle, end_handle, value,
    72ac:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72b0:	ab03      	add	r3, sp, #12
    72b2:	4639      	mov	r1, r7
    72b4:	4628      	mov	r0, r5
	data.att = att;
    72b6:	f8cd 800c 	str.w	r8, [sp, #12]
	data.group = NULL;
    72ba:	9605      	str	r6, [sp, #20]
	data.value = value;
    72bc:	f8cd a018 	str.w	sl, [sp, #24]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    72c0:	f000 fdb2 	bl	7e28 <bt_gatt_foreach_attr>
	if (data.err) {
    72c4:	f89d 401d 	ldrb.w	r4, [sp, #29]
    72c8:	b15c      	cbz	r4, 72e2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    72ca:	9804      	ldr	r0, [sp, #16]
    72cc:	f00f fd26 	bl	16d1c <net_buf_unref>
    72d0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    72d4:	462a      	mov	r2, r5
    72d6:	2106      	movs	r1, #6
    72d8:	4648      	mov	r0, r9
    72da:	f7ff fd39 	bl	6d50 <send_err_rsp.part.7>
		return 0;
    72de:	2400      	movs	r4, #0
    72e0:	e7cc      	b.n	727c <att_find_type_req+0x5c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    72e2:	4b07      	ldr	r3, [pc, #28]	; (7300 <att_find_type_req+0xe0>)
    72e4:	9a04      	ldr	r2, [sp, #16]
    72e6:	2104      	movs	r1, #4
    72e8:	4648      	mov	r0, r9
    72ea:	f7fe fe30 	bl	5f4e <bt_l2cap_send_cb>
    72ee:	e7c5      	b.n	727c <att_find_type_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
    72f0:	240e      	movs	r4, #14
	return att_find_type_rsp(att, start_handle, end_handle, value,
    72f2:	e7c3      	b.n	727c <att_find_type_req+0x5c>
			*err = 0;
    72f4:	463d      	mov	r5, r7
    72f6:	2301      	movs	r3, #1
    72f8:	e7ec      	b.n	72d4 <att_find_type_req+0xb4>
    72fa:	bf00      	nop
    72fc:	0000641d 	.word	0x0000641d
    7300:	00006acd 	.word	0x00006acd

00007304 <att_find_info_req>:
{
    7304:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    7306:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = att->chan.chan.conn;
    7308:	6806      	ldr	r6, [r0, #0]
	start_handle = sys_le16_to_cpu(req->start_handle);
    730a:	881d      	ldrh	r5, [r3, #0]
{
    730c:	b085      	sub	sp, #20
    730e:	4607      	mov	r7, r0
	if (!start || !end) {
    7310:	b375      	cbz	r5, 7370 <att_find_info_req+0x6c>
	end_handle = sys_le16_to_cpu(req->end_handle);
    7312:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    7314:	b35c      	cbz	r4, 736e <att_find_info_req+0x6a>
	if (start > end) {
    7316:	42a5      	cmp	r5, r4
    7318:	d82a      	bhi.n	7370 <att_find_info_req+0x6c>
	memset(&data, 0, sizeof(data));
    731a:	2210      	movs	r2, #16
    731c:	2100      	movs	r1, #0
    731e:	4668      	mov	r0, sp
    7320:	f7f9 f99e 	bl	660 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    7324:	2200      	movs	r2, #0
    7326:	2105      	movs	r1, #5
    7328:	4630      	mov	r0, r6
    732a:	f7ff fc91 	bl	6c50 <bt_att_create_pdu>
    732e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    7330:	b910      	cbnz	r0, 7338 <att_find_info_req+0x34>
		return BT_ATT_ERR_UNLIKELY;
    7332:	200e      	movs	r0, #14
}
    7334:	b005      	add	sp, #20
    7336:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7338:	4621      	mov	r1, r4
    733a:	466b      	mov	r3, sp
    733c:	4a0d      	ldr	r2, [pc, #52]	; (7374 <att_find_info_req+0x70>)
	data.att = att;
    733e:	9700      	str	r7, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    7340:	4628      	mov	r0, r5
    7342:	f000 fd71 	bl	7e28 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    7346:	9c02      	ldr	r4, [sp, #8]
    7348:	b94c      	cbnz	r4, 735e <att_find_info_req+0x5a>
		net_buf_unref(data.buf);
    734a:	9801      	ldr	r0, [sp, #4]
    734c:	f00f fce6 	bl	16d1c <net_buf_unref>
    7350:	230a      	movs	r3, #10
    7352:	462a      	mov	r2, r5
    7354:	2104      	movs	r1, #4
    7356:	4630      	mov	r0, r6
    7358:	f7ff fcfa 	bl	6d50 <send_err_rsp.part.7>
    735c:	e005      	b.n	736a <att_find_info_req+0x66>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    735e:	4b06      	ldr	r3, [pc, #24]	; (7378 <att_find_info_req+0x74>)
    7360:	9a01      	ldr	r2, [sp, #4]
    7362:	2104      	movs	r1, #4
    7364:	4630      	mov	r0, r6
    7366:	f7fe fdf2 	bl	5f4e <bt_l2cap_send_cb>
		return 0;
    736a:	2000      	movs	r0, #0
    736c:	e7e2      	b.n	7334 <att_find_info_req+0x30>
			*err = 0;
    736e:	4625      	mov	r5, r4
    7370:	2301      	movs	r3, #1
    7372:	e7ee      	b.n	7352 <att_find_info_req+0x4e>
    7374:	00006383 	.word	0x00006383
    7378:	00006acd 	.word	0x00006acd

0000737c <att_write_rsp.part.8.constprop.15>:
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7380:	b086      	sub	sp, #24
    7382:	4690      	mov	r8, r2
    7384:	4605      	mov	r5, r0
    7386:	460e      	mov	r6, r1
	memset(&data, 0, sizeof(data));
    7388:	2218      	movs	r2, #24
    738a:	2100      	movs	r1, #0
    738c:	4668      	mov	r0, sp
static u8_t att_write_rsp(struct bt_conn *conn, u8_t op, u8_t rsp,
    738e:	461f      	mov	r7, r3
	memset(&data, 0, sizeof(data));
    7390:	f7f9 f966 	bl	660 <memset>
	if (rsp) {
    7394:	f1b8 0f00 	cmp.w	r8, #0
    7398:	d11f      	bne.n	73da <att_write_rsp.part.8.constprop.15+0x5e>
	data.offset = offset;
    739a:	2300      	movs	r3, #0
    739c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    73a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    73a2:	9303      	str	r3, [sp, #12]
	data.len = len;
    73a4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    73a8:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    73ac:	2301      	movs	r3, #1
    73ae:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    73b2:	4a1b      	ldr	r2, [pc, #108]	; (7420 <att_write_rsp.part.8.constprop.15+0xa4>)
	data.conn = conn;
    73b4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    73b6:	466b      	mov	r3, sp
    73b8:	4639      	mov	r1, r7
    73ba:	4638      	mov	r0, r7
	data.op = op;
    73bc:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    73c0:	f000 fd32 	bl	7e28 <bt_gatt_foreach_attr>
	if (data.err) {
    73c4:	f89d 4014 	ldrb.w	r4, [sp, #20]
    73c8:	b98c      	cbnz	r4, 73ee <att_write_rsp.part.8.constprop.15+0x72>
	if (data.buf) {
    73ca:	9a01      	ldr	r2, [sp, #4]
    73cc:	b1b2      	cbz	r2, 73fc <att_write_rsp.part.8.constprop.15+0x80>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    73ce:	4b15      	ldr	r3, [pc, #84]	; (7424 <att_write_rsp.part.8.constprop.15+0xa8>)
    73d0:	2104      	movs	r1, #4
    73d2:	4628      	mov	r0, r5
    73d4:	f7fe fdbb 	bl	5f4e <bt_l2cap_send_cb>
    73d8:	e011      	b.n	73fe <att_write_rsp.part.8.constprop.15+0x82>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    73da:	2200      	movs	r2, #0
    73dc:	4641      	mov	r1, r8
    73de:	4628      	mov	r0, r5
    73e0:	f7ff fc36 	bl	6c50 <bt_att_create_pdu>
    73e4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    73e6:	2800      	cmp	r0, #0
    73e8:	d1d7      	bne.n	739a <att_write_rsp.part.8.constprop.15+0x1e>
			return BT_ATT_ERR_UNLIKELY;
    73ea:	240e      	movs	r4, #14
    73ec:	e007      	b.n	73fe <att_write_rsp.part.8.constprop.15+0x82>
		if (rsp) {
    73ee:	f1b8 0f00 	cmp.w	r8, #0
    73f2:	d00f      	beq.n	7414 <att_write_rsp.part.8.constprop.15+0x98>
			net_buf_unref(data.buf);
    73f4:	9801      	ldr	r0, [sp, #4]
    73f6:	f00f fc91 	bl	16d1c <net_buf_unref>
	if (!req) {
    73fa:	b926      	cbnz	r6, 7406 <att_write_rsp.part.8.constprop.15+0x8a>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    73fc:	2400      	movs	r4, #0
}
    73fe:	4620      	mov	r0, r4
    7400:	b006      	add	sp, #24
    7402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7406:	f89d 3014 	ldrb.w	r3, [sp, #20]
    740a:	463a      	mov	r2, r7
    740c:	4631      	mov	r1, r6
    740e:	4628      	mov	r0, r5
    7410:	f7ff fc9e 	bl	6d50 <send_err_rsp.part.7>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    7414:	2e18      	cmp	r6, #24
    7416:	d1f1      	bne.n	73fc <att_write_rsp.part.8.constprop.15+0x80>
    7418:	f89d 4014 	ldrb.w	r4, [sp, #20]
    741c:	e7ef      	b.n	73fe <att_write_rsp.part.8.constprop.15+0x82>
    741e:	bf00      	nop
    7420:	00006b7d 	.word	0x00006b7d
    7424:	00006acd 	.word	0x00006acd

00007428 <att_signed_write_cmd>:
{
    7428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    742c:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    742e:	6806      	ldr	r6, [r0, #0]
	handle = sys_le16_to_cpu(req->handle);
    7430:	f854 3f08 	ldr.w	r3, [r4, #8]!
{
    7434:	460d      	mov	r5, r1
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    7436:	4620      	mov	r0, r4
    7438:	2101      	movs	r1, #1
	handle = sys_le16_to_cpu(req->handle);
    743a:	f8b3 8000 	ldrh.w	r8, [r3]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    743e:	f00f fcc5 	bl	16dcc <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    7442:	4629      	mov	r1, r5
    7444:	4630      	mov	r0, r6
    7446:	f002 fe41 	bl	a0cc <bt_smp_sign_verify>
	if (err) {
    744a:	4607      	mov	r7, r0
    744c:	b160      	cbz	r0, 7468 <att_signed_write_cmd+0x40>
		BT_ERR("Error verifying data");
    744e:	4b13      	ldr	r3, [pc, #76]	; (749c <att_signed_write_cmd+0x74>)
    7450:	9301      	str	r3, [sp, #4]
    7452:	9300      	str	r3, [sp, #0]
    7454:	4a12      	ldr	r2, [pc, #72]	; (74a0 <att_signed_write_cmd+0x78>)
    7456:	4b13      	ldr	r3, [pc, #76]	; (74a4 <att_signed_write_cmd+0x7c>)
    7458:	4913      	ldr	r1, [pc, #76]	; (74a8 <att_signed_write_cmd+0x80>)
    745a:	4814      	ldr	r0, [pc, #80]	; (74ac <att_signed_write_cmd+0x84>)
    745c:	f7fa f940 	bl	16e0 <printk>
    7460:	2000      	movs	r0, #0
}
    7462:	b002      	add	sp, #8
    7464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    7468:	2101      	movs	r1, #1
    746a:	4620      	mov	r0, r4
    746c:	f00f fcb6 	bl	16ddc <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    7470:	2102      	movs	r1, #2
    7472:	4620      	mov	r0, r4
    7474:	f00f fcb2 	bl	16ddc <net_buf_simple_pull>
	if (!handle) {
    7478:	f1b8 0f00 	cmp.w	r8, #0
    747c:	d00c      	beq.n	7498 <att_signed_write_cmd+0x70>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    747e:	7b2b      	ldrb	r3, [r5, #12]
    7480:	3b0c      	subs	r3, #12
    7482:	b2db      	uxtb	r3, r3
    7484:	9301      	str	r3, [sp, #4]
    7486:	68ab      	ldr	r3, [r5, #8]
    7488:	9300      	str	r3, [sp, #0]
    748a:	463a      	mov	r2, r7
    748c:	4643      	mov	r3, r8
    748e:	4639      	mov	r1, r7
    7490:	4630      	mov	r0, r6
    7492:	f7ff ff73 	bl	737c <att_write_rsp.part.8.constprop.15>
    7496:	e7e4      	b.n	7462 <att_signed_write_cmd+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
    7498:	2001      	movs	r0, #1
    749a:	e7e2      	b.n	7462 <att_signed_write_cmd+0x3a>
    749c:	0001868d 	.word	0x0001868d
    74a0:	00019a84 	.word	0x00019a84
    74a4:	00019f30 	.word	0x00019f30
    74a8:	00019a8b 	.word	0x00019a8b
    74ac:	0001a06d 	.word	0x0001a06d

000074b0 <att_write_cmd>:
{
    74b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    74b2:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    74b4:	f101 0008 	add.w	r0, r1, #8
{
    74b8:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    74ba:	f00f fc9f 	bl	16dfc <net_buf_simple_pull_le16>
	if (!handle) {
    74be:	4603      	mov	r3, r0
    74c0:	b150      	cbz	r0, 74d8 <att_write_cmd+0x28>
    74c2:	7b22      	ldrb	r2, [r4, #12]
    74c4:	9201      	str	r2, [sp, #4]
    74c6:	68a2      	ldr	r2, [r4, #8]
    74c8:	9200      	str	r2, [sp, #0]
    74ca:	2200      	movs	r2, #0
    74cc:	4611      	mov	r1, r2
    74ce:	4628      	mov	r0, r5
    74d0:	f7ff ff54 	bl	737c <att_write_rsp.part.8.constprop.15>
}
    74d4:	b003      	add	sp, #12
    74d6:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    74d8:	2001      	movs	r0, #1
    74da:	e7fb      	b.n	74d4 <att_write_cmd+0x24>

000074dc <att_write_req>:
{
    74dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    74de:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    74e0:	f101 0008 	add.w	r0, r1, #8
{
    74e4:	460c      	mov	r4, r1
	handle = net_buf_pull_le16(buf);
    74e6:	f00f fc89 	bl	16dfc <net_buf_simple_pull_le16>
	if (!handle) {
    74ea:	4603      	mov	r3, r0
    74ec:	b150      	cbz	r0, 7504 <att_write_req+0x28>
    74ee:	7b22      	ldrb	r2, [r4, #12]
    74f0:	9201      	str	r2, [sp, #4]
    74f2:	68a2      	ldr	r2, [r4, #8]
    74f4:	9200      	str	r2, [sp, #0]
    74f6:	2112      	movs	r1, #18
    74f8:	2213      	movs	r2, #19
    74fa:	4628      	mov	r0, r5
    74fc:	f7ff ff3e 	bl	737c <att_write_rsp.part.8.constprop.15>
}
    7500:	b003      	add	sp, #12
    7502:	bd30      	pop	{r4, r5, pc}
		return BT_ATT_ERR_INVALID_HANDLE;
    7504:	2001      	movs	r0, #1
    7506:	e7fb      	b.n	7500 <att_write_req+0x24>

00007508 <bt_att_init>:

void bt_att_init(void)
{
    7508:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    750a:	4803      	ldr	r0, [pc, #12]	; (7518 <bt_att_init+0x10>)
    750c:	f7fe fc52 	bl	5db4 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
}
    7510:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_gatt_init();
    7514:	f000 bc72 	b.w	7dfc <bt_gatt_init>
    7518:	20008780 	.word	0x20008780

0000751c <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    751c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    751e:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    7520:	4607      	mov	r7, r0
    7522:	2800      	cmp	r0, #0
    7524:	d043      	beq.n	75ae <bt_att_send+0x92>
    7526:	2900      	cmp	r1, #0
    7528:	d041      	beq.n	75ae <bt_att_send+0x92>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    752a:	f7ff fae7 	bl	6afc <att_chan_get>
	if (!att) {
    752e:	4604      	mov	r4, r0
    7530:	b1b0      	cbz	r0, 7560 <bt_att_send+0x44>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    7532:	f100 06cc 	add.w	r6, r0, #204	; 0xcc
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7536:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    753a:	4630      	mov	r0, r6
    753c:	f010 f8f6 	bl	1772c <_impl_k_sem_take>
	if (!att_is_connected(att)) {
    7540:	4620      	mov	r0, r4
    7542:	f7ff f8d9 	bl	66f8 <att_is_connected>
    7546:	b970      	cbnz	r0, 7566 <bt_att_send+0x4a>
		BT_WARN("Disconnected");
    7548:	4b1a      	ldr	r3, [pc, #104]	; (75b4 <bt_att_send+0x98>)
    754a:	9301      	str	r3, [sp, #4]
    754c:	9300      	str	r3, [sp, #0]
    754e:	4a1a      	ldr	r2, [pc, #104]	; (75b8 <bt_att_send+0x9c>)
    7550:	4b1a      	ldr	r3, [pc, #104]	; (75bc <bt_att_send+0xa0>)
    7552:	491b      	ldr	r1, [pc, #108]	; (75c0 <bt_att_send+0xa4>)
    7554:	481b      	ldr	r0, [pc, #108]	; (75c4 <bt_att_send+0xa8>)
    7556:	f7fa f8c3 	bl	16e0 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    755a:	4630      	mov	r0, r6
    755c:	f010 f886 	bl	1766c <_impl_k_sem_give>
		return -ENOTCONN;
    7560:	f06f 0438 	mvn.w	r4, #56	; 0x38
    7564:	e015      	b.n	7592 <bt_att_send+0x76>

	hdr = (void *)buf->data;

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7566:	68ab      	ldr	r3, [r5, #8]
    7568:	781b      	ldrb	r3, [r3, #0]
    756a:	2bd2      	cmp	r3, #210	; 0xd2
    756c:	d114      	bne.n	7598 <bt_att_send+0x7c>
		int err;

		err = bt_smp_sign(conn, buf);
    756e:	4629      	mov	r1, r5
    7570:	4638      	mov	r0, r7
    7572:	f002 fdae 	bl	a0d2 <bt_smp_sign>
		if (err) {
    7576:	4604      	mov	r4, r0
    7578:	b170      	cbz	r0, 7598 <bt_att_send+0x7c>
			BT_ERR("Error signing data");
    757a:	4b0e      	ldr	r3, [pc, #56]	; (75b4 <bt_att_send+0x98>)
    757c:	9301      	str	r3, [sp, #4]
    757e:	9300      	str	r3, [sp, #0]
    7580:	4a11      	ldr	r2, [pc, #68]	; (75c8 <bt_att_send+0xac>)
    7582:	4b0e      	ldr	r3, [pc, #56]	; (75bc <bt_att_send+0xa0>)
    7584:	490e      	ldr	r1, [pc, #56]	; (75c0 <bt_att_send+0xa4>)
    7586:	4811      	ldr	r0, [pc, #68]	; (75cc <bt_att_send+0xb0>)
    7588:	f7fa f8aa 	bl	16e0 <printk>
    758c:	4630      	mov	r0, r6
    758e:	f010 f86d 	bl	1766c <_impl_k_sem_give>
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));

	return 0;
}
    7592:	4620      	mov	r0, r4
    7594:	b003      	add	sp, #12
    7596:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    7598:	68a8      	ldr	r0, [r5, #8]
    759a:	f7ff f831 	bl	6600 <att_cb.isra.3>
    759e:	462a      	mov	r2, r5
    75a0:	4603      	mov	r3, r0
    75a2:	2104      	movs	r1, #4
    75a4:	4638      	mov	r0, r7
    75a6:	f7fe fcd2 	bl	5f4e <bt_l2cap_send_cb>
	return 0;
    75aa:	2400      	movs	r4, #0
    75ac:	e7f1      	b.n	7592 <bt_att_send+0x76>
		return -EINVAL;
    75ae:	f06f 0415 	mvn.w	r4, #21
    75b2:	e7ee      	b.n	7592 <bt_att_send+0x76>
    75b4:	0001868d 	.word	0x0001868d
    75b8:	00019806 	.word	0x00019806
    75bc:	00019fa0 	.word	0x00019fa0
    75c0:	00019a8b 	.word	0x00019a8b
    75c4:	0001a050 	.word	0x0001a050
    75c8:	00019a84 	.word	0x00019a84
    75cc:	0001a1f5 	.word	0x0001a1f5

000075d0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
    75d0:	b510      	push	{r4, lr}
    75d2:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    75d4:	b1d8      	cbz	r0, 760e <bt_att_req_send+0x3e>
    75d6:	b1d1      	cbz	r1, 760e <bt_att_req_send+0x3e>
		return -EINVAL;
	}

	att = att_chan_get(conn);
    75d8:	f7ff fa90 	bl	6afc <att_chan_get>
	if (!att) {
    75dc:	4603      	mov	r3, r0
    75de:	b1c8      	cbz	r0, 7614 <bt_att_req_send+0x44>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    75e0:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
    75e4:	b172      	cbz	r2, 7604 <bt_att_req_send+0x34>
	if (!list->tail) {
    75e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
	node->next = NULL;
    75ea:	2000      	movs	r0, #0
    75ec:	6020      	str	r0, [r4, #0]
	if (!list->tail) {
    75ee:	b92a      	cbnz	r2, 75fc <bt_att_req_send+0x2c>
		list->tail = node;
    75f0:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
		list->head = node;
    75f4:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    75f8:	4610      	mov	r0, r2
    75fa:	bd10      	pop	{r4, pc}
		list->tail->next = node;
    75fc:	6014      	str	r4, [r2, #0]
		list->tail = node;
    75fe:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    7602:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    7604:	4621      	mov	r1, r4
}
    7606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return att_send_req(att, req);
    760a:	f7ff b889 	b.w	6720 <att_send_req>
		return -EINVAL;
    760e:	f06f 0015 	mvn.w	r0, #21
    7612:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    7614:	f06f 0038 	mvn.w	r0, #56	; 0x38
}
    7618:	bd10      	pop	{r4, pc}

0000761a <sys_slist_remove>:
{
    761a:	b510      	push	{r4, lr}
    761c:	6813      	ldr	r3, [r2, #0]
    761e:	6844      	ldr	r4, [r0, #4]
	if (!prev_node) {
    7620:	b931      	cbnz	r1, 7630 <sys_slist_remove+0x16>
		if (list->tail == node) {
    7622:	42a2      	cmp	r2, r4
		list->head = node->next;
    7624:	6003      	str	r3, [r0, #0]
		if (list->tail == node) {
    7626:	d100      	bne.n	762a <sys_slist_remove+0x10>
			list->tail = list->head;
    7628:	6043      	str	r3, [r0, #4]
	node->next = NULL;
    762a:	2300      	movs	r3, #0
    762c:	6013      	str	r3, [r2, #0]
    762e:	bd10      	pop	{r4, pc}
		if (list->tail == node) {
    7630:	42a2      	cmp	r2, r4
		prev_node->next = node->next;
    7632:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
    7634:	bf08      	it	eq
    7636:	6041      	streq	r1, [r0, #4]
    7638:	e7f7      	b.n	762a <sys_slist_remove+0x10>

0000763a <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    763a:	4770      	bx	lr

0000763c <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    763c:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    763e:	2000      	movs	r0, #0
    7640:	4770      	bx	lr

00007642 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    7642:	b430      	push	{r4, r5}
	int i;
	u16_t value = 0x0000;
    7644:	2300      	movs	r3, #0
    7646:	684d      	ldr	r5, [r1, #4]

	for (i = 0; i < ccc->cfg_len; i++) {
    7648:	461a      	mov	r2, r3
    764a:	42aa      	cmp	r2, r5
    764c:	d107      	bne.n	765e <gatt_ccc_changed+0x1c>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    764e:	890a      	ldrh	r2, [r1, #8]
    7650:	429a      	cmp	r2, r3
    7652:	d00d      	beq.n	7670 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    7654:	810b      	strh	r3, [r1, #8]
		ccc->cfg_changed(attr, value);
    7656:	68ca      	ldr	r2, [r1, #12]
	}
}
    7658:	bc30      	pop	{r4, r5}
		ccc->cfg_changed(attr, value);
    765a:	4619      	mov	r1, r3
    765c:	4710      	bx	r2
		if (ccc->cfg[i].value > value) {
    765e:	680c      	ldr	r4, [r1, #0]
    7660:	eb04 1402 	add.w	r4, r4, r2, lsl #4
	for (i = 0; i < ccc->cfg_len; i++) {
    7664:	3201      	adds	r2, #1
    7666:	8924      	ldrh	r4, [r4, #8]
    7668:	42a3      	cmp	r3, r4
    766a:	bf38      	it	cc
    766c:	4623      	movcc	r3, r4
    766e:	e7ec      	b.n	764a <gatt_ccc_changed+0x8>
}
    7670:	bc30      	pop	{r4, r5}
    7672:	4770      	bx	lr

00007674 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    7674:	b410      	push	{r4}
    7676:	9b01      	ldr	r3, [sp, #4]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    7678:	69dc      	ldr	r4, [r3, #28]
    767a:	460a      	mov	r2, r1
    767c:	6999      	ldr	r1, [r3, #24]
    767e:	4623      	mov	r3, r4
}
    7680:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
    7682:	4718      	bx	r3

00007684 <gatt_subscription_remove>:
	bt_addr_le_copy(&params->_peer, &conn->le.dst);
}

static void gatt_subscription_remove(struct bt_conn *conn, sys_snode_t *prev,
				     struct bt_gatt_subscribe_params *params)
{
    7684:	b570      	push	{r4, r5, r6, lr}
    7686:	4614      	mov	r4, r2
    7688:	4606      	mov	r6, r0
	/* Remove subscription from the list*/
	sys_slist_remove(&subscriptions, prev, &params->node);
    768a:	322c      	adds	r2, #44	; 0x2c
    768c:	4805      	ldr	r0, [pc, #20]	; (76a4 <gatt_subscription_remove+0x20>)
    768e:	f7ff ffc4 	bl	761a <sys_slist_remove>

	params->notify(conn, params, NULL, 0);
    7692:	6a25      	ldr	r5, [r4, #32]
    7694:	2300      	movs	r3, #0
    7696:	4621      	mov	r1, r4
    7698:	4630      	mov	r0, r6
    769a:	46ac      	mov	ip, r5
    769c:	461a      	mov	r2, r3
}
    769e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->notify(conn, params, NULL, 0);
    76a2:	4760      	bx	ip
    76a4:	20000704 	.word	0x20000704

000076a8 <gatt_mtu_rsp>:
	}
}

static void gatt_mtu_rsp(struct bt_conn *conn, u8_t err, const void *pdu,
			 u16_t length, void *user_data)
{
    76a8:	9a00      	ldr	r2, [sp, #0]
	struct bt_gatt_exchange_params *params = user_data;

	params->func(conn, err, params);
    76aa:	6993      	ldr	r3, [r2, #24]
    76ac:	4718      	bx	r3
	...

000076b0 <bt_gatt_attr_write_ccc>:
{
    76b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76b4:	4689      	mov	r9, r1
    76b6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
	struct _bt_gatt_ccc *ccc = attr->user_data;
    76ba:	f8d9 400c 	ldr.w	r4, [r9, #12]
	if (offset > sizeof(u16_t)) {
    76be:	2902      	cmp	r1, #2
{
    76c0:	4682      	mov	sl, r0
	if (offset > sizeof(u16_t)) {
    76c2:	d856      	bhi.n	7772 <bt_gatt_attr_write_ccc+0xc2>
	if (offset + len > sizeof(u16_t)) {
    76c4:	4419      	add	r1, r3
    76c6:	2902      	cmp	r1, #2
    76c8:	461e      	mov	r6, r3
    76ca:	dc55      	bgt.n	7778 <bt_gatt_attr_write_ccc+0xc8>
	return ((u16_t)src[1] << 8) | src[0];
    76cc:	7853      	ldrb	r3, [r2, #1]
    76ce:	7817      	ldrb	r7, [r2, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    76d0:	2500      	movs	r5, #0
    76d2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    76d6:	6863      	ldr	r3, [r4, #4]
    76d8:	429d      	cmp	r5, r3
    76da:	d207      	bcs.n	76ec <bt_gatt_attr_write_ccc+0x3c>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    76dc:	6821      	ldr	r1, [r4, #0]
    76de:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    76e2:	3101      	adds	r1, #1
    76e4:	4650      	mov	r0, sl
    76e6:	f7fe f855 	bl	5794 <bt_conn_addr_le_cmp>
    76ea:	b9a8      	cbnz	r0, 7718 <bt_gatt_attr_write_ccc+0x68>
	if (i == ccc->cfg_len) {
    76ec:	6863      	ldr	r3, [r4, #4]
    76ee:	429d      	cmp	r5, r3
    76f0:	d12f      	bne.n	7752 <bt_gatt_attr_write_ccc+0xa2>
    76f2:	f04f 0800 	mov.w	r8, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    76f6:	4545      	cmp	r5, r8
    76f8:	d110      	bne.n	771c <bt_gatt_attr_write_ccc+0x6c>
			BT_WARN("No space to store CCC cfg");
    76fa:	4b21      	ldr	r3, [pc, #132]	; (7780 <bt_gatt_attr_write_ccc+0xd0>)
    76fc:	9301      	str	r3, [sp, #4]
    76fe:	9300      	str	r3, [sp, #0]
    7700:	4a20      	ldr	r2, [pc, #128]	; (7784 <bt_gatt_attr_write_ccc+0xd4>)
    7702:	4b21      	ldr	r3, [pc, #132]	; (7788 <bt_gatt_attr_write_ccc+0xd8>)
    7704:	4921      	ldr	r1, [pc, #132]	; (778c <bt_gatt_attr_write_ccc+0xdc>)
    7706:	4822      	ldr	r0, [pc, #136]	; (7790 <bt_gatt_attr_write_ccc+0xe0>)
    7708:	f7f9 ffea 	bl	16e0 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    770c:	f06f 0610 	mvn.w	r6, #16
}
    7710:	4630      	mov	r0, r6
    7712:	b003      	add	sp, #12
    7714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    7718:	3501      	adds	r5, #1
    771a:	e7dc      	b.n	76d6 <bt_gatt_attr_write_ccc+0x26>
    771c:	ea4f 1b08 	mov.w	fp, r8, lsl #4
			if (ccc->cfg[i].valid) {
    7720:	6823      	ldr	r3, [r4, #0]
    7722:	eb03 000b 	add.w	r0, r3, fp
    7726:	f813 300b 	ldrb.w	r3, [r3, fp]
    772a:	b113      	cbz	r3, 7732 <bt_gatt_attr_write_ccc+0x82>
		for (i = 0; i < ccc->cfg_len; i++) {
    772c:	f108 0801 	add.w	r8, r8, #1
    7730:	e7e1      	b.n	76f6 <bt_gatt_attr_write_ccc+0x46>
    7732:	2207      	movs	r2, #7
    7734:	f10a 0148 	add.w	r1, sl, #72	; 0x48
    7738:	3001      	adds	r0, #1
    773a:	f7f8 ff65 	bl	608 <memcpy>
			if (value) {
    773e:	b11f      	cbz	r7, 7748 <bt_gatt_attr_write_ccc+0x98>
				ccc->cfg[i].valid = true;
    7740:	6823      	ldr	r3, [r4, #0]
    7742:	2201      	movs	r2, #1
    7744:	f803 200b 	strb.w	r2, [r3, fp]
		if (i == ccc->cfg_len) {
    7748:	6863      	ldr	r3, [r4, #4]
    774a:	4598      	cmp	r8, r3
    774c:	d0d5      	beq.n	76fa <bt_gatt_attr_write_ccc+0x4a>
    774e:	4645      	mov	r5, r8
    7750:	e003      	b.n	775a <bt_gatt_attr_write_ccc+0xaa>
	} else if (!value) {
    7752:	b917      	cbnz	r7, 775a <bt_gatt_attr_write_ccc+0xaa>
		ccc->cfg[i].valid = false;
    7754:	6822      	ldr	r2, [r4, #0]
    7756:	012b      	lsls	r3, r5, #4
    7758:	54d7      	strb	r7, [r2, r3]
	ccc->cfg[i].value = value;
    775a:	6823      	ldr	r3, [r4, #0]
    775c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
	if (ccc->cfg[i].value != ccc->value) {
    7760:	8923      	ldrh	r3, [r4, #8]
	ccc->cfg[i].value = value;
    7762:	812f      	strh	r7, [r5, #8]
	if (ccc->cfg[i].value != ccc->value) {
    7764:	42bb      	cmp	r3, r7
    7766:	d0d3      	beq.n	7710 <bt_gatt_attr_write_ccc+0x60>
		gatt_ccc_changed(attr, ccc);
    7768:	4621      	mov	r1, r4
    776a:	4648      	mov	r0, r9
    776c:	f7ff ff69 	bl	7642 <gatt_ccc_changed>
    7770:	e7ce      	b.n	7710 <bt_gatt_attr_write_ccc+0x60>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7772:	f06f 0606 	mvn.w	r6, #6
    7776:	e7cb      	b.n	7710 <bt_gatt_attr_write_ccc+0x60>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    7778:	f06f 060c 	mvn.w	r6, #12
    777c:	e7c8      	b.n	7710 <bt_gatt_attr_write_ccc+0x60>
    777e:	bf00      	nop
    7780:	0001868d 	.word	0x0001868d
    7784:	00019806 	.word	0x00019806
    7788:	0001a315 	.word	0x0001a315
    778c:	00019a8b 	.word	0x00019a8b
    7790:	0001a3f2 	.word	0x0001a3f2

00007794 <gatt_write_ccc_rsp>:
}

static void gatt_write_ccc_rsp(struct bt_conn *conn, u8_t err,
			       const void *pdu, u16_t length,
			       void *user_data)
{
    7794:	b430      	push	{r4, r5}
    7796:	9c02      	ldr	r4, [sp, #8]
    7798:	4605      	mov	r5, r0
	struct bt_gatt_subscribe_params *params = user_data;

	BT_DBG("err 0x%02x", err);

	/* if write to CCC failed we remove subscription and notify app */
	if (err) {
    779a:	b181      	cbz	r1, 77be <gatt_write_ccc_rsp+0x2a>
    779c:	4b0d      	ldr	r3, [pc, #52]	; (77d4 <gatt_write_ccc_rsp+0x40>)
    779e:	681b      	ldr	r3, [r3, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    77a0:	b1ab      	cbz	r3, 77ce <gatt_write_ccc_rsp+0x3a>
	return node->next;
    77a2:	6819      	ldr	r1, [r3, #0]
		sys_snode_t *node, *tmp, *prev = NULL;

		SYS_SLIST_FOR_EACH_NODE_SAFE(&subscriptions, node, tmp) {
			if (node == &params->node) {
    77a4:	f104 022c 	add.w	r2, r4, #44	; 0x2c
    77a8:	4293      	cmp	r3, r2
    77aa:	d104      	bne.n	77b6 <gatt_write_ccc_rsp+0x22>
				gatt_subscription_remove(conn, tmp, params);
    77ac:	4622      	mov	r2, r4
    77ae:	4628      	mov	r0, r5
		}
	} else if (!params->value) {
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
	}
}
    77b0:	bc30      	pop	{r4, r5}
				gatt_subscription_remove(conn, tmp, params);
    77b2:	f7ff bf67 	b.w	7684 <gatt_subscription_remove>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    77b6:	b151      	cbz	r1, 77ce <gatt_write_ccc_rsp+0x3a>
    77b8:	460b      	mov	r3, r1
    77ba:	6809      	ldr	r1, [r1, #0]
    77bc:	e7f4      	b.n	77a8 <gatt_write_ccc_rsp+0x14>
	} else if (!params->value) {
    77be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    77c0:	b92b      	cbnz	r3, 77ce <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
    77c2:	6a25      	ldr	r5, [r4, #32]
    77c4:	4621      	mov	r1, r4
    77c6:	46ac      	mov	ip, r5
    77c8:	461a      	mov	r2, r3
}
    77ca:	bc30      	pop	{r4, r5}
		params->notify(conn, params, NULL, 0);
    77cc:	4760      	bx	ip
}
    77ce:	bc30      	pop	{r4, r5}
    77d0:	4770      	bx	lr
    77d2:	bf00      	nop
    77d4:	20000704 	.word	0x20000704

000077d8 <gatt_register>:
{
    77d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (sys_slist_is_empty(&db)) {
    77da:	4a1f      	ldr	r2, [pc, #124]	; (7858 <gatt_register+0x80>)
	struct bt_gatt_attr *attrs = svc->attrs;
    77dc:	6801      	ldr	r1, [r0, #0]
	if (sys_slist_is_empty(&db)) {
    77de:	6813      	ldr	r3, [r2, #0]
	u16_t count = svc->attr_count;
    77e0:	8885      	ldrh	r5, [r0, #4]
	if (sys_slist_is_empty(&db)) {
    77e2:	b15b      	cbz	r3, 77fc <gatt_register+0x24>
    77e4:	6853      	ldr	r3, [r2, #4]
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    77e6:	2b00      	cmp	r3, #0
    77e8:	d033      	beq.n	7852 <gatt_register+0x7a>
	handle = last->attrs[last->attr_count - 1].handle;
    77ea:	f833 4c04 	ldrh.w	r4, [r3, #-4]
    77ee:	f853 3c08 	ldr.w	r3, [r3, #-8]
    77f2:	2614      	movs	r6, #20
    77f4:	fb06 3304 	mla	r3, r6, r4, r3
    77f8:	f833 3c04 	ldrh.w	r3, [r3, #-4]
    77fc:	2414      	movs	r4, #20
    77fe:	fb04 1505 	mla	r5, r4, r5, r1
	for (; attrs && count; attrs++, count--) {
    7802:	b109      	cbz	r1, 7808 <gatt_register+0x30>
    7804:	42a9      	cmp	r1, r5
    7806:	d108      	bne.n	781a <gatt_register+0x42>
	node->next = NULL;
    7808:	2300      	movs	r3, #0
	sys_slist_append(&db, &svc->node);
    780a:	f100 0108 	add.w	r1, r0, #8
    780e:	6083      	str	r3, [r0, #8]
	if (!list->tail) {
    7810:	6850      	ldr	r0, [r2, #4]
    7812:	b9d0      	cbnz	r0, 784a <gatt_register+0x72>
		list->tail = node;
    7814:	6051      	str	r1, [r2, #4]
		list->head = node;
    7816:	6011      	str	r1, [r2, #0]
    7818:	e015      	b.n	7846 <gatt_register+0x6e>
		if (!attrs->handle) {
    781a:	8a0c      	ldrh	r4, [r1, #16]
    781c:	b92c      	cbnz	r4, 782a <gatt_register+0x52>
			attrs->handle = ++handle;
    781e:	3301      	adds	r3, #1
    7820:	b29c      	uxth	r4, r3
    7822:	820c      	strh	r4, [r1, #16]
	for (; attrs && count; attrs++, count--) {
    7824:	3114      	adds	r1, #20
    7826:	4623      	mov	r3, r4
    7828:	e7eb      	b.n	7802 <gatt_register+0x2a>
		} else if (attrs->handle > handle) {
    782a:	42a3      	cmp	r3, r4
    782c:	d3fa      	bcc.n	7824 <gatt_register+0x4c>
			BT_ERR("Unable to register handle 0x%04x",
    782e:	4b0b      	ldr	r3, [pc, #44]	; (785c <gatt_register+0x84>)
    7830:	9302      	str	r3, [sp, #8]
    7832:	e88d 0018 	stmia.w	sp, {r3, r4}
    7836:	4a0a      	ldr	r2, [pc, #40]	; (7860 <gatt_register+0x88>)
    7838:	4b0a      	ldr	r3, [pc, #40]	; (7864 <gatt_register+0x8c>)
    783a:	490b      	ldr	r1, [pc, #44]	; (7868 <gatt_register+0x90>)
    783c:	480b      	ldr	r0, [pc, #44]	; (786c <gatt_register+0x94>)
    783e:	f7f9 ff4f 	bl	16e0 <printk>
			return -EINVAL;
    7842:	f06f 0015 	mvn.w	r0, #21
}
    7846:	b004      	add	sp, #16
    7848:	bd70      	pop	{r4, r5, r6, pc}
		list->tail->next = node;
    784a:	6001      	str	r1, [r0, #0]
		list->tail = node;
    784c:	6051      	str	r1, [r2, #4]
	return 0;
    784e:	4618      	mov	r0, r3
    7850:	e7f9      	b.n	7846 <gatt_register+0x6e>
	handle = last->attrs[last->attr_count - 1].handle;
    7852:	681b      	ldr	r3, [r3, #0]
    7854:	deff      	udf	#255	; 0xff
    7856:	bf00      	nop
    7858:	20000684 	.word	0x20000684
    785c:	0001868d 	.word	0x0001868d
    7860:	00019a84 	.word	0x00019a84
    7864:	0001a2f0 	.word	0x0001a2f0
    7868:	00019a8b 	.word	0x00019a8b
    786c:	0001a522 	.word	0x0001a522

00007870 <gatt_notify>:
{
    7870:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    7874:	468a      	mov	sl, r1
    7876:	4691      	mov	r9, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    7878:	211b      	movs	r1, #27
    787a:	1c9a      	adds	r2, r3, #2
{
    787c:	4680      	mov	r8, r0
    787e:	461e      	mov	r6, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    7880:	f7ff f9e6 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    7884:	4604      	mov	r4, r0
    7886:	b968      	cbnz	r0, 78a4 <gatt_notify+0x34>
		BT_WARN("No buffer available to send notification");
    7888:	4b13      	ldr	r3, [pc, #76]	; (78d8 <gatt_notify+0x68>)
    788a:	9301      	str	r3, [sp, #4]
    788c:	9300      	str	r3, [sp, #0]
    788e:	4a13      	ldr	r2, [pc, #76]	; (78dc <gatt_notify+0x6c>)
    7890:	4b13      	ldr	r3, [pc, #76]	; (78e0 <gatt_notify+0x70>)
    7892:	4914      	ldr	r1, [pc, #80]	; (78e4 <gatt_notify+0x74>)
    7894:	4814      	ldr	r0, [pc, #80]	; (78e8 <gatt_notify+0x78>)
    7896:	f7f9 ff23 	bl	16e0 <printk>
    789a:	f06f 000b 	mvn.w	r0, #11
}
    789e:	b002      	add	sp, #8
    78a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nfy = net_buf_add(buf, sizeof(*nfy));
    78a4:	f100 0708 	add.w	r7, r0, #8
    78a8:	2102      	movs	r1, #2
    78aa:	4638      	mov	r0, r7
    78ac:	f00f fa68 	bl	16d80 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    78b0:	4605      	mov	r5, r0
	net_buf_add(buf, len);
    78b2:	4631      	mov	r1, r6
	nfy->handle = sys_cpu_to_le16(handle);
    78b4:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    78b8:	4638      	mov	r0, r7
    78ba:	f00f fa61 	bl	16d80 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    78be:	4632      	mov	r2, r6
    78c0:	4649      	mov	r1, r9
    78c2:	4628      	mov	r0, r5
    78c4:	f7f8 fea0 	bl	608 <memcpy>
    78c8:	4640      	mov	r0, r8
    78ca:	2300      	movs	r3, #0
    78cc:	4622      	mov	r2, r4
    78ce:	2104      	movs	r1, #4
    78d0:	f7fe fb3d 	bl	5f4e <bt_l2cap_send_cb>
	return 0;
    78d4:	2000      	movs	r0, #0
    78d6:	e7e2      	b.n	789e <gatt_notify+0x2e>
    78d8:	0001868d 	.word	0x0001868d
    78dc:	00019806 	.word	0x00019806
    78e0:	0001a32c 	.word	0x0001a32c
    78e4:	00019a8b 	.word	0x00019a8b
    78e8:	0001a4c5 	.word	0x0001a4c5

000078ec <gatt_send.constprop.29>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    78ec:	b530      	push	{r4, r5, lr}
    78ee:	460d      	mov	r5, r1
    78f0:	b085      	sub	sp, #20
	if (params) {
    78f2:	b1c3      	cbz	r3, 7926 <gatt_send.constprop.29+0x3a>
		req->func = func;
    78f4:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    78f6:	2200      	movs	r2, #0
		req->buf = buf;
    78f8:	6119      	str	r1, [r3, #16]
		req->destroy = destroy;
    78fa:	609a      	str	r2, [r3, #8]
		err = bt_att_req_send(conn, req);
    78fc:	4619      	mov	r1, r3
    78fe:	f7ff fe67 	bl	75d0 <bt_att_req_send>
		err = bt_att_send(conn, buf);
    7902:	4604      	mov	r4, r0
	if (err) {
    7904:	b160      	cbz	r0, 7920 <gatt_send.constprop.29+0x34>
		BT_ERR("Error sending ATT PDU: %d", err);
    7906:	4b09      	ldr	r3, [pc, #36]	; (792c <gatt_send.constprop.29+0x40>)
    7908:	9302      	str	r3, [sp, #8]
    790a:	e88d 0018 	stmia.w	sp, {r3, r4}
    790e:	4a08      	ldr	r2, [pc, #32]	; (7930 <gatt_send.constprop.29+0x44>)
    7910:	4b08      	ldr	r3, [pc, #32]	; (7934 <gatt_send.constprop.29+0x48>)
    7912:	4909      	ldr	r1, [pc, #36]	; (7938 <gatt_send.constprop.29+0x4c>)
    7914:	4809      	ldr	r0, [pc, #36]	; (793c <gatt_send.constprop.29+0x50>)
    7916:	f7f9 fee3 	bl	16e0 <printk>
		net_buf_unref(buf);
    791a:	4628      	mov	r0, r5
    791c:	f00f f9fe 	bl	16d1c <net_buf_unref>
}
    7920:	4620      	mov	r0, r4
    7922:	b005      	add	sp, #20
    7924:	bd30      	pop	{r4, r5, pc}
		err = bt_att_send(conn, buf);
    7926:	f7ff fdf9 	bl	751c <bt_att_send>
    792a:	e7ea      	b.n	7902 <gatt_send.constprop.29+0x16>
    792c:	0001868d 	.word	0x0001868d
    7930:	00019a84 	.word	0x00019a84
    7934:	0001a338 	.word	0x0001a338
    7938:	00019a8b 	.word	0x00019a8b
    793c:	0001a553 	.word	0x0001a553

00007940 <gatt_write_ccc.constprop.19>:

static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    7940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7944:	4689      	mov	r9, r1
    7946:	4690      	mov	r8, r2
			  struct bt_gatt_subscribe_params *params)
{
	struct net_buf *buf;
	struct bt_att_write_req *req;

	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    7948:	2112      	movs	r1, #18
    794a:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, u16_t handle, u16_t value,
    794c:	4606      	mov	r6, r0
    794e:	461f      	mov	r7, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    7950:	f7ff f97e 	bl	6c50 <bt_att_create_pdu>
				sizeof(*req) + sizeof(u16_t));
	if (!buf) {
    7954:	4604      	mov	r4, r0
    7956:	b198      	cbz	r0, 7980 <gatt_write_ccc.constprop.19+0x40>
		return -ENOMEM;
	}

	req = net_buf_add(buf, sizeof(*req));
    7958:	f100 0508 	add.w	r5, r0, #8
    795c:	2102      	movs	r1, #2
    795e:	4628      	mov	r0, r5
    7960:	f00f fa0e 	bl	16d80 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(handle);
	net_buf_add_le16(buf, value);
    7964:	4641      	mov	r1, r8
	req->handle = sys_cpu_to_le16(handle);
    7966:	f8a0 9000 	strh.w	r9, [r0]
	net_buf_add_le16(buf, value);
    796a:	4628      	mov	r0, r5
    796c:	f00f fa1f 	bl	16dae <net_buf_simple_add_le16>

	BT_DBG("handle 0x%04x value 0x%04x", handle, value);

	return gatt_send(conn, buf, func, params, NULL);
    7970:	463b      	mov	r3, r7
    7972:	4621      	mov	r1, r4
    7974:	4630      	mov	r0, r6
    7976:	4a04      	ldr	r2, [pc, #16]	; (7988 <gatt_write_ccc.constprop.19+0x48>)
}
    7978:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    797c:	f7ff bfb6 	b.w	78ec <gatt_send.constprop.29>
}
    7980:	f06f 000b 	mvn.w	r0, #11
    7984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7988:	00007795 	.word	0x00007795

0000798c <gatt_indicate>:
				sizeof(*ind) + params->len);
    798c:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
{
    798e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    7992:	3202      	adds	r2, #2
{
    7994:	460c      	mov	r4, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    7996:	211d      	movs	r1, #29
{
    7998:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    799a:	f7ff f959 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    799e:	4605      	mov	r5, r0
    79a0:	b1e0      	cbz	r0, 79dc <gatt_indicate+0x50>
	ind = net_buf_add(buf, sizeof(*ind));
    79a2:	f100 0708 	add.w	r7, r0, #8
    79a6:	2102      	movs	r1, #2
    79a8:	4638      	mov	r0, r7
    79aa:	f00f f9e9 	bl	16d80 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    79ae:	69a3      	ldr	r3, [r4, #24]
	net_buf_add(buf, params->len);
    79b0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    79b2:	8a1b      	ldrh	r3, [r3, #16]
    79b4:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    79b6:	4638      	mov	r0, r7
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    79b8:	f826 3b02 	strh.w	r3, [r6], #2
	net_buf_add(buf, params->len);
    79bc:	f00f f9e0 	bl	16d80 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    79c0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    79c2:	6a21      	ldr	r1, [r4, #32]
    79c4:	4630      	mov	r0, r6
    79c6:	f7f8 fe1f 	bl	608 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    79ca:	4a0b      	ldr	r2, [pc, #44]	; (79f8 <gatt_indicate+0x6c>)
    79cc:	4623      	mov	r3, r4
    79ce:	4629      	mov	r1, r5
    79d0:	4640      	mov	r0, r8
}
    79d2:	b002      	add	sp, #8
    79d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    79d8:	f7ff bf88 	b.w	78ec <gatt_send.constprop.29>
		BT_WARN("No buffer available to send indication");
    79dc:	4b07      	ldr	r3, [pc, #28]	; (79fc <gatt_indicate+0x70>)
    79de:	9301      	str	r3, [sp, #4]
    79e0:	9300      	str	r3, [sp, #0]
    79e2:	4a07      	ldr	r2, [pc, #28]	; (7a00 <gatt_indicate+0x74>)
    79e4:	4b07      	ldr	r3, [pc, #28]	; (7a04 <gatt_indicate+0x78>)
    79e6:	4908      	ldr	r1, [pc, #32]	; (7a08 <gatt_indicate+0x7c>)
    79e8:	4808      	ldr	r0, [pc, #32]	; (7a0c <gatt_indicate+0x80>)
    79ea:	f7f9 fe79 	bl	16e0 <printk>
}
    79ee:	f06f 000b 	mvn.w	r0, #11
    79f2:	b002      	add	sp, #8
    79f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79f8:	00007675 	.word	0x00007675
    79fc:	0001868d 	.word	0x0001868d
    7a00:	00019806 	.word	0x00019806
    7a04:	0001a342 	.word	0x0001a342
    7a08:	00019a8b 	.word	0x00019a8b
    7a0c:	0001a48e 	.word	0x0001a48e

00007a10 <sc_indicate.constprop.26>:
static void sc_indicate(struct gatt_sc *sc, uint16_t start, uint16_t end)
    7a10:	b510      	push	{r4, lr}
    7a12:	4b17      	ldr	r3, [pc, #92]	; (7a70 <sc_indicate.constprop.26+0x60>)
    7a14:	f3bf 8f5b 	dmb	ish
    7a18:	f103 0254 	add.w	r2, r3, #84	; 0x54
    7a1c:	e852 4f00 	ldrex	r4, [r2]
    7a20:	f044 0e01 	orr.w	lr, r4, #1
    7a24:	e842 ec00 	strex	ip, lr, [r2]
    7a28:	f1bc 0f00 	cmp.w	ip, #0
    7a2c:	d1f6      	bne.n	7a1c <sc_indicate.constprop.26+0xc>
    7a2e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    7a32:	07e2      	lsls	r2, r4, #31
    7a34:	d402      	bmi.n	7a3c <sc_indicate.constprop.26+0x2c>
		sc->start = start;
    7a36:	8518      	strh	r0, [r3, #40]	; 0x28
		*end = new_end;
    7a38:	8559      	strh	r1, [r3, #42]	; 0x2a
    7a3a:	e00a      	b.n	7a52 <sc_indicate.constprop.26+0x42>
	if (new_start >= *start && new_end <= *end) {
    7a3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    7a3e:	4282      	cmp	r2, r0
    7a40:	d803      	bhi.n	7a4a <sc_indicate.constprop.26+0x3a>
    7a42:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    7a44:	428a      	cmp	r2, r1
    7a46:	d301      	bcc.n	7a4c <sc_indicate.constprop.26+0x3c>
    7a48:	bd10      	pop	{r4, pc}
		*start = new_start;
    7a4a:	8518      	strh	r0, [r3, #40]	; 0x28
	if (*end < new_end) {
    7a4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    7a4e:	428a      	cmp	r2, r1
    7a50:	d3f2      	bcc.n	7a38 <sc_indicate.constprop.26+0x28>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7a52:	f3bf 8f5b 	dmb	ish
    7a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7a58:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    7a5c:	079b      	lsls	r3, r3, #30
    7a5e:	d406      	bmi.n	7a6e <sc_indicate.constprop.26+0x5e>
    7a60:	220a      	movs	r2, #10
    7a62:	4904      	ldr	r1, [pc, #16]	; (7a74 <sc_indicate.constprop.26+0x64>)
    7a64:	4804      	ldr	r0, [pc, #16]	; (7a78 <sc_indicate.constprop.26+0x68>)
}
    7a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a6a:	f010 b9a3 	b.w	17db4 <k_delayed_work_submit_to_queue>
    7a6e:	bd10      	pop	{r4, pc}
    7a70:	2000068c 	.word	0x2000068c
    7a74:	200006b8 	.word	0x200006b8
    7a78:	20005470 	.word	0x20005470

00007a7c <connected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a7c:	6882      	ldr	r2, [r0, #8]
    7a7e:	4b19      	ldr	r3, [pc, #100]	; (7ae4 <connected_cb+0x68>)
    7a80:	429a      	cmp	r2, r3
{
    7a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a86:	4607      	mov	r7, r0
    7a88:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7a8a:	d126      	bne.n	7ada <connected_cb+0x5e>
	ccc = attr->user_data;
    7a8c:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    7a8e:	2600      	movs	r6, #0
    7a90:	686b      	ldr	r3, [r5, #4]
    7a92:	429e      	cmp	r6, r3
    7a94:	d221      	bcs.n	7ada <connected_cb+0x5e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7a96:	6829      	ldr	r1, [r5, #0]
    7a98:	ea4f 1806 	mov.w	r8, r6, lsl #4
    7a9c:	4441      	add	r1, r8
    7a9e:	3101      	adds	r1, #1
    7aa0:	4620      	mov	r0, r4
    7aa2:	f7fd fe77 	bl	5794 <bt_conn_addr_le_cmp>
    7aa6:	b9d8      	cbnz	r0, 7ae0 <connected_cb+0x64>
		if (ccc->cfg[i].value) {
    7aa8:	682b      	ldr	r3, [r5, #0]
    7aaa:	4443      	add	r3, r8
    7aac:	891b      	ldrh	r3, [r3, #8]
    7aae:	b1bb      	cbz	r3, 7ae0 <connected_cb+0x64>
			gatt_ccc_changed(attr, ccc);
    7ab0:	4629      	mov	r1, r5
    7ab2:	4638      	mov	r0, r7
    7ab4:	f7ff fdc5 	bl	7642 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    7ab8:	682c      	ldr	r4, [r5, #0]
    7aba:	4b0b      	ldr	r3, [pc, #44]	; (7ae8 <connected_cb+0x6c>)
    7abc:	429c      	cmp	r4, r3
    7abe:	d10c      	bne.n	7ada <connected_cb+0x5e>
				sc_restore(&ccc->cfg[i]);
    7ac0:	4444      	add	r4, r8
	if (!data->start && !data->end) {
    7ac2:	89a0      	ldrh	r0, [r4, #12]
    7ac4:	89e1      	ldrh	r1, [r4, #14]
    7ac6:	b900      	cbnz	r0, 7aca <connected_cb+0x4e>
    7ac8:	b139      	cbz	r1, 7ada <connected_cb+0x5e>
	sc_indicate(&gatt_sc, data->start, data->end);
    7aca:	f7ff ffa1 	bl	7a10 <sc_indicate.constprop.26>
	memset(cfg->data, 0, sizeof(cfg->data));
    7ace:	2204      	movs	r2, #4
    7ad0:	2100      	movs	r1, #0
    7ad2:	f104 000c 	add.w	r0, r4, #12
    7ad6:	f7f8 fdc3 	bl	660 <memset>
}
    7ada:	2001      	movs	r0, #1
    7adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ccc->cfg_len; i++) {
    7ae0:	3601      	adds	r6, #1
    7ae2:	e7d5      	b.n	7a90 <connected_cb+0x14>
    7ae4:	000076b1 	.word	0x000076b1
    7ae8:	200006e4 	.word	0x200006e4

00007aec <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7aec:	490d      	ldr	r1, [pc, #52]	; (7b24 <sc_indicate_rsp+0x38>)
    7aee:	f3bf 8f5b 	dmb	ish
    7af2:	f101 0354 	add.w	r3, r1, #84	; 0x54
    7af6:	e853 2f00 	ldrex	r2, [r3]
    7afa:	f022 0202 	bic.w	r2, r2, #2
    7afe:	e843 2000 	strex	r0, r2, [r3]
    7b02:	2800      	cmp	r0, #0
    7b04:	d1f7      	bne.n	7af6 <sc_indicate_rsp+0xa>
    7b06:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7b0a:	f3bf 8f5b 	dmb	ish
    7b0e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    7b10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    7b14:	07db      	lsls	r3, r3, #31
    7b16:	d504      	bpl.n	7b22 <sc_indicate_rsp+0x36>
    7b18:	2200      	movs	r2, #0
    7b1a:	312c      	adds	r1, #44	; 0x2c
    7b1c:	4802      	ldr	r0, [pc, #8]	; (7b28 <sc_indicate_rsp+0x3c>)
    7b1e:	f010 b949 	b.w	17db4 <k_delayed_work_submit_to_queue>
    7b22:	4770      	bx	lr
    7b24:	2000068c 	.word	0x2000068c
    7b28:	20005470 	.word	0x20005470

00007b2c <read_appearance>:
{
    7b2c:	b513      	push	{r0, r1, r4, lr}
    7b2e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7b32:	4610      	mov	r0, r2
	if (offset > value_len) {
    7b34:	2902      	cmp	r1, #2
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    7b36:	f04f 0200 	mov.w	r2, #0
    7b3a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    7b3e:	d80d      	bhi.n	7b5c <read_appearance+0x30>
	len = min(buf_len, value_len - offset);
    7b40:	f1c1 0402 	rsb	r4, r1, #2
    7b44:	429c      	cmp	r4, r3
    7b46:	bfa8      	it	ge
    7b48:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    7b4a:	f10d 0306 	add.w	r3, sp, #6
    7b4e:	4622      	mov	r2, r4
    7b50:	4419      	add	r1, r3
    7b52:	f7f8 fd59 	bl	608 <memcpy>
}
    7b56:	4620      	mov	r0, r4
    7b58:	b002      	add	sp, #8
    7b5a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7b5c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    7b60:	e7f9      	b.n	7b56 <read_appearance+0x2a>
	...

00007b64 <disconnected_cb>:
{
    7b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7b68:	6882      	ldr	r2, [r0, #8]
    7b6a:	4b24      	ldr	r3, [pc, #144]	; (7bfc <disconnected_cb+0x98>)
    7b6c:	429a      	cmp	r2, r3
{
    7b6e:	4607      	mov	r7, r0
    7b70:	4688      	mov	r8, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    7b72:	d129      	bne.n	7bc8 <disconnected_cb+0x64>
	ccc = attr->user_data;
    7b74:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    7b76:	8923      	ldrh	r3, [r4, #8]
    7b78:	b333      	cbz	r3, 7bc8 <disconnected_cb+0x64>
    7b7a:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7b7c:	f101 0948 	add.w	r9, r1, #72	; 0x48
	for (i = 0; i < ccc->cfg_len; i++) {
    7b80:	6863      	ldr	r3, [r4, #4]
    7b82:	429e      	cmp	r6, r3
    7b84:	d30b      	bcc.n	7b9e <disconnected_cb+0x3a>
	memset(&ccc->value, 0, sizeof(ccc->value));
    7b86:	2202      	movs	r2, #2
    7b88:	2100      	movs	r1, #0
    7b8a:	f104 0008 	add.w	r0, r4, #8
    7b8e:	f7f8 fd67 	bl	660 <memset>
	if (ccc->cfg_changed) {
    7b92:	68e3      	ldr	r3, [r4, #12]
    7b94:	b1c3      	cbz	r3, 7bc8 <disconnected_cb+0x64>
		ccc->cfg_changed(attr, ccc->value);
    7b96:	8921      	ldrh	r1, [r4, #8]
    7b98:	4638      	mov	r0, r7
    7b9a:	4798      	blx	r3
    7b9c:	e014      	b.n	7bc8 <disconnected_cb+0x64>
		if (!ccc->cfg[i].value) {
    7b9e:	6821      	ldr	r1, [r4, #0]
    7ba0:	0135      	lsls	r5, r6, #4
    7ba2:	4429      	add	r1, r5
    7ba4:	890b      	ldrh	r3, [r1, #8]
    7ba6:	b1a3      	cbz	r3, 7bd2 <disconnected_cb+0x6e>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7ba8:	3101      	adds	r1, #1
    7baa:	4640      	mov	r0, r8
    7bac:	f7fd fdf2 	bl	5794 <bt_conn_addr_le_cmp>
    7bb0:	b188      	cbz	r0, 7bd6 <disconnected_cb+0x72>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    7bb2:	6820      	ldr	r0, [r4, #0]
    7bb4:	4428      	add	r0, r5
    7bb6:	3001      	adds	r0, #1
    7bb8:	f7fd fe04 	bl	57c4 <bt_conn_lookup_addr_le>
			if (tmp) {
    7bbc:	b148      	cbz	r0, 7bd2 <disconnected_cb+0x6e>
				if (tmp->state == BT_CONN_CONNECTED) {
    7bbe:	7b03      	ldrb	r3, [r0, #12]
    7bc0:	2b03      	cmp	r3, #3
    7bc2:	d104      	bne.n	7bce <disconnected_cb+0x6a>
					bt_conn_unref(tmp);
    7bc4:	f7fd fe3a 	bl	583c <bt_conn_unref>
}
    7bc8:	2001      	movs	r0, #1
    7bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				bt_conn_unref(tmp);
    7bce:	f7fd fe35 	bl	583c <bt_conn_unref>
	for (i = 0; i < ccc->cfg_len; i++) {
    7bd2:	3601      	adds	r6, #1
    7bd4:	e7d4      	b.n	7b80 <disconnected_cb+0x1c>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7bd6:	4648      	mov	r0, r9
    7bd8:	f7fd f850 	bl	4c7c <bt_addr_le_is_bonded>
    7bdc:	6823      	ldr	r3, [r4, #0]
    7bde:	4601      	mov	r1, r0
				ccc->cfg[i].valid = false;
    7be0:	1958      	adds	r0, r3, r5
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    7be2:	b929      	cbnz	r1, 7bf0 <disconnected_cb+0x8c>
				ccc->cfg[i].valid = false;
    7be4:	5559      	strb	r1, [r3, r5]
				memset(&ccc->cfg[i].value, 0,
    7be6:	2202      	movs	r2, #2
    7be8:	3008      	adds	r0, #8
    7bea:	f7f8 fd39 	bl	660 <memset>
    7bee:	e7f0      	b.n	7bd2 <disconnected_cb+0x6e>
    7bf0:	2207      	movs	r2, #7
    7bf2:	4649      	mov	r1, r9
    7bf4:	3001      	adds	r0, #1
    7bf6:	f7f8 fd07 	bl	608 <memcpy>
    7bfa:	e7ea      	b.n	7bd2 <disconnected_cb+0x6e>
    7bfc:	000076b1 	.word	0x000076b1

00007c00 <read_name>:
{
    7c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				 strlen(gap_name));
    7c04:	4e0d      	ldr	r6, [pc, #52]	; (7c3c <read_name+0x3c>)
{
    7c06:	f8bd 5018 	ldrh.w	r5, [sp, #24]
				 strlen(gap_name));
    7c0a:	4630      	mov	r0, r6
{
    7c0c:	4698      	mov	r8, r3
    7c0e:	4617      	mov	r7, r2
				 strlen(gap_name));
    7c10:	f7f8 fcd0 	bl	5b4 <strlen>
	if (offset > value_len) {
    7c14:	b283      	uxth	r3, r0
    7c16:	42ab      	cmp	r3, r5
    7c18:	d30d      	bcc.n	7c36 <read_name+0x36>
	len = min(buf_len, value_len - offset);
    7c1a:	1b5c      	subs	r4, r3, r5
    7c1c:	4544      	cmp	r4, r8
    7c1e:	4623      	mov	r3, r4
    7c20:	bfa8      	it	ge
    7c22:	4643      	movge	r3, r8
    7c24:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    7c26:	4622      	mov	r2, r4
    7c28:	1971      	adds	r1, r6, r5
    7c2a:	4638      	mov	r0, r7
    7c2c:	f7f8 fcec 	bl	608 <memcpy>
}
    7c30:	4620      	mov	r0, r4
    7c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7c36:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    7c3a:	e7f9      	b.n	7c30 <read_name+0x30>
    7c3c:	0001a57d 	.word	0x0001a57d

00007c40 <bt_gatt_attr_read_ccc>:
{
    7c40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc = attr->user_data;
    7c44:	68ce      	ldr	r6, [r1, #12]
{
    7c46:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    7c4a:	4604      	mov	r4, r0
    7c4c:	4690      	mov	r8, r2
    7c4e:	4699      	mov	r9, r3
	for (i = 0; i < ccc->cfg_len; i++) {
    7c50:	2500      	movs	r5, #0
    7c52:	6873      	ldr	r3, [r6, #4]
    7c54:	429d      	cmp	r5, r3
    7c56:	d20f      	bcs.n	7c78 <bt_gatt_attr_read_ccc+0x38>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    7c58:	6831      	ldr	r1, [r6, #0]
    7c5a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
    7c5e:	4451      	add	r1, sl
    7c60:	3101      	adds	r1, #1
    7c62:	4620      	mov	r0, r4
    7c64:	f7fd fd96 	bl	5794 <bt_conn_addr_le_cmp>
    7c68:	b108      	cbz	r0, 7c6e <bt_gatt_attr_read_ccc+0x2e>
	for (i = 0; i < ccc->cfg_len; i++) {
    7c6a:	3501      	adds	r5, #1
    7c6c:	e7f1      	b.n	7c52 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    7c6e:	6832      	ldr	r2, [r6, #0]
    7c70:	4452      	add	r2, sl
    7c72:	8913      	ldrh	r3, [r2, #8]
    7c74:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (i == ccc->cfg_len) {
    7c78:	6873      	ldr	r3, [r6, #4]
    7c7a:	429d      	cmp	r5, r3
		value = 0x0000;
    7c7c:	bf04      	itt	eq
    7c7e:	2300      	moveq	r3, #0
    7c80:	f8ad 3006 	strheq.w	r3, [sp, #6]
	if (offset > value_len) {
    7c84:	2f02      	cmp	r7, #2
    7c86:	d80f      	bhi.n	7ca8 <bt_gatt_attr_read_ccc+0x68>
	len = min(buf_len, value_len - offset);
    7c88:	f1c7 0402 	rsb	r4, r7, #2
    7c8c:	454c      	cmp	r4, r9
    7c8e:	bfa8      	it	ge
    7c90:	464c      	movge	r4, r9
	memcpy(buf, value + offset, len);
    7c92:	f10d 0306 	add.w	r3, sp, #6
    7c96:	4622      	mov	r2, r4
    7c98:	19d9      	adds	r1, r3, r7
    7c9a:	4640      	mov	r0, r8
    7c9c:	f7f8 fcb4 	bl	608 <memcpy>
}
    7ca0:	4620      	mov	r0, r4
    7ca2:	b002      	add	sp, #8
    7ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7ca8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    7cac:	e7f8      	b.n	7ca0 <bt_gatt_attr_read_ccc+0x60>

00007cae <bt_gatt_attr_read_service>:
{
    7cae:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
    7cb0:	68c9      	ldr	r1, [r1, #12]
{
    7cb2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    7cb6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
    7cb8:	780a      	ldrb	r2, [r1, #0]
    7cba:	b992      	cbnz	r2, 7ce2 <bt_gatt_attr_read_service+0x34>
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    7cbc:	884a      	ldrh	r2, [r1, #2]
    7cbe:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
    7cc2:	2d02      	cmp	r5, #2
    7cc4:	d819      	bhi.n	7cfa <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    7cc6:	f1c5 0402 	rsb	r4, r5, #2
    7cca:	429c      	cmp	r4, r3
    7ccc:	bfa8      	it	ge
    7cce:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    7cd0:	f10d 0306 	add.w	r3, sp, #6
    7cd4:	4622      	mov	r2, r4
    7cd6:	1959      	adds	r1, r3, r5
    7cd8:	f7f8 fc96 	bl	608 <memcpy>
}
    7cdc:	4620      	mov	r0, r4
    7cde:	b003      	add	sp, #12
    7ce0:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
    7ce2:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
    7ce4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
    7ce8:	d807      	bhi.n	7cfa <bt_gatt_attr_read_service+0x4c>
	len = min(buf_len, value_len - offset);
    7cea:	f1c5 0410 	rsb	r4, r5, #16
    7cee:	429c      	cmp	r4, r3
    7cf0:	bfa8      	it	ge
    7cf2:	461c      	movge	r4, r3
	memcpy(buf, value + offset, len);
    7cf4:	4622      	mov	r2, r4
    7cf6:	4429      	add	r1, r5
    7cf8:	e7ee      	b.n	7cd8 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7cfa:	f06f 0406 	mvn.w	r4, #6
    7cfe:	e7ed      	b.n	7cdc <bt_gatt_attr_read_service+0x2e>

00007d00 <notify_cb>:
{
    7d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    7d04:	f642 1302 	movw	r3, #10498	; 0x2902
{
    7d08:	4605      	mov	r5, r0
    7d0a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    7d0c:	2400      	movs	r4, #0
    7d0e:	4669      	mov	r1, sp
    7d10:	6800      	ldr	r0, [r0, #0]
    7d12:	f88d 4000 	strb.w	r4, [sp]
    7d16:	f8ad 3002 	strh.w	r3, [sp, #2]
    7d1a:	f7fa fdf1 	bl	2900 <bt_uuid_cmp>
    7d1e:	b178      	cbz	r0, 7d40 <notify_cb+0x40>
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    7d20:	f642 0303 	movw	r3, #10243	; 0x2803
    7d24:	6828      	ldr	r0, [r5, #0]
    7d26:	f88d 4004 	strb.w	r4, [sp, #4]
    7d2a:	a901      	add	r1, sp, #4
    7d2c:	f8ad 3006 	strh.w	r3, [sp, #6]
    7d30:	f7fa fde6 	bl	2900 <bt_uuid_cmp>
			return BT_GATT_ITER_STOP;
    7d34:	1b00      	subs	r0, r0, r4
    7d36:	bf18      	it	ne
    7d38:	2001      	movne	r0, #1
}
    7d3a:	b003      	add	sp, #12
    7d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr->write != bt_gatt_attr_write_ccc) {
    7d40:	68aa      	ldr	r2, [r5, #8]
    7d42:	4b2c      	ldr	r3, [pc, #176]	; (7df4 <notify_cb+0xf4>)
    7d44:	429a      	cmp	r2, r3
    7d46:	d001      	beq.n	7d4c <notify_cb+0x4c>
		return BT_GATT_ITER_CONTINUE;
    7d48:	2001      	movs	r0, #1
    7d4a:	e7f6      	b.n	7d3a <notify_cb+0x3a>
	ccc = attr->user_data;
    7d4c:	68ef      	ldr	r7, [r5, #12]
    7d4e:	4d2a      	ldr	r5, [pc, #168]	; (7df8 <notify_cb+0xf8>)
	for (i = 0; i < ccc->cfg_len; i++) {
    7d50:	4604      	mov	r4, r0
    7d52:	46a8      	mov	r8, r5
    7d54:	4681      	mov	r9, r0
    7d56:	687b      	ldr	r3, [r7, #4]
    7d58:	429c      	cmp	r4, r3
    7d5a:	d2f5      	bcs.n	7d48 <notify_cb+0x48>
		if (ccc->cfg[i].value != data->type) {
    7d5c:	6838      	ldr	r0, [r7, #0]
    7d5e:	88b3      	ldrh	r3, [r6, #4]
    7d60:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    7d64:	8902      	ldrh	r2, [r0, #8]
    7d66:	429a      	cmp	r2, r3
    7d68:	d115      	bne.n	7d96 <notify_cb+0x96>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    7d6a:	3001      	adds	r0, #1
    7d6c:	f7fd fd2a 	bl	57c4 <bt_conn_lookup_addr_le>
		if (!conn) {
    7d70:	4683      	mov	fp, r0
    7d72:	b9f8      	cbnz	r0, 7db4 <notify_cb+0xb4>
			if (ccc->cfg == sc_ccc_cfg) {
    7d74:	683b      	ldr	r3, [r7, #0]
    7d76:	4543      	cmp	r3, r8
    7d78:	d10d      	bne.n	7d96 <notify_cb+0x96>
				sc_save(&ccc->cfg[i], data->params);
    7d7a:	6973      	ldr	r3, [r6, #20]
	memcpy(&data, params->data, params->len);
    7d7c:	a801      	add	r0, sp, #4
    7d7e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    7d80:	6a19      	ldr	r1, [r3, #32]
    7d82:	f7f8 fc41 	bl	608 <memcpy>
	if (!stored->start && !stored->end) {
    7d86:	89a8      	ldrh	r0, [r5, #12]
	data.end = sys_le16_to_cpu(data.end);
    7d88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7d8c:	89ea      	ldrh	r2, [r5, #14]
	if (!stored->start && !stored->end) {
    7d8e:	b928      	cbnz	r0, 7d9c <notify_cb+0x9c>
    7d90:	b942      	cbnz	r2, 7da4 <notify_cb+0xa4>
		*stored = data;
    7d92:	9801      	ldr	r0, [sp, #4]
    7d94:	60e8      	str	r0, [r5, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    7d96:	3401      	adds	r4, #1
    7d98:	3510      	adds	r5, #16
    7d9a:	e7dc      	b.n	7d56 <notify_cb+0x56>
	data.start = sys_le16_to_cpu(data.start);
    7d9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
	if (new_start >= *start && new_end <= *end) {
    7da0:	4281      	cmp	r1, r0
    7da2:	d305      	bcc.n	7db0 <notify_cb+0xb0>
    7da4:	429a      	cmp	r2, r3
    7da6:	d2f6      	bcs.n	7d96 <notify_cb+0x96>
	if (*end < new_end) {
    7da8:	429a      	cmp	r2, r3
    7daa:	d2f4      	bcs.n	7d96 <notify_cb+0x96>
		*end = new_end;
    7dac:	81eb      	strh	r3, [r5, #14]
    7dae:	e7f2      	b.n	7d96 <notify_cb+0x96>
		*start = new_start;
    7db0:	81a9      	strh	r1, [r5, #12]
    7db2:	e7f9      	b.n	7da8 <notify_cb+0xa8>
		if (conn->state != BT_CONN_CONNECTED) {
    7db4:	7b03      	ldrb	r3, [r0, #12]
    7db6:	2b03      	cmp	r3, #3
    7db8:	d002      	beq.n	7dc0 <notify_cb+0xc0>
			bt_conn_unref(conn);
    7dba:	f7fd fd3f 	bl	583c <bt_conn_unref>
    7dbe:	e7ea      	b.n	7d96 <notify_cb+0x96>
		if (data->type == BT_GATT_CCC_INDICATE) {
    7dc0:	88b3      	ldrh	r3, [r6, #4]
    7dc2:	2b02      	cmp	r3, #2
    7dc4:	d10c      	bne.n	7de0 <notify_cb+0xe0>
			err = gatt_indicate(conn, data->params);
    7dc6:	6971      	ldr	r1, [r6, #20]
    7dc8:	f7ff fde0 	bl	798c <gatt_indicate>
			err = gatt_notify(conn, data->attr->handle, data->data,
    7dcc:	4682      	mov	sl, r0
		bt_conn_unref(conn);
    7dce:	4658      	mov	r0, fp
    7dd0:	f7fd fd34 	bl	583c <bt_conn_unref>
		if (err < 0) {
    7dd4:	f1ba 0f00 	cmp.w	sl, #0
    7dd8:	db09      	blt.n	7dee <notify_cb+0xee>
		data->err = 0;
    7dda:	f8c6 9000 	str.w	r9, [r6]
    7dde:	e7da      	b.n	7d96 <notify_cb+0x96>
			err = gatt_notify(conn, data->attr->handle, data->data,
    7de0:	68b1      	ldr	r1, [r6, #8]
    7de2:	8a33      	ldrh	r3, [r6, #16]
    7de4:	68f2      	ldr	r2, [r6, #12]
    7de6:	8a09      	ldrh	r1, [r1, #16]
    7de8:	f7ff fd42 	bl	7870 <gatt_notify>
    7dec:	e7ee      	b.n	7dcc <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
    7dee:	2000      	movs	r0, #0
    7df0:	e7a3      	b.n	7d3a <notify_cb+0x3a>
    7df2:	bf00      	nop
    7df4:	000076b1 	.word	0x000076b1
    7df8:	200006e4 	.word	0x200006e4

00007dfc <bt_gatt_init>:
{
    7dfc:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    7dfe:	4806      	ldr	r0, [pc, #24]	; (7e18 <bt_gatt_init+0x1c>)
    7e00:	f7ff fcea 	bl	77d8 <gatt_register>
	gatt_register(&gatt_svc);
    7e04:	4805      	ldr	r0, [pc, #20]	; (7e1c <bt_gatt_init+0x20>)
    7e06:	f7ff fce7 	bl	77d8 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    7e0a:	4905      	ldr	r1, [pc, #20]	; (7e20 <bt_gatt_init+0x24>)
    7e0c:	4805      	ldr	r0, [pc, #20]	; (7e24 <bt_gatt_init+0x28>)
}
    7e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_delayed_work_init(&gatt_sc.work, sc_process);
    7e12:	f00f bf57 	b.w	17cc4 <k_delayed_work_init>
    7e16:	bf00      	nop
    7e18:	20008864 	.word	0x20008864
    7e1c:	200088c0 	.word	0x200088c0
    7e20:	00007ea9 	.word	0x00007ea9
    7e24:	200006b8 	.word	0x200006b8

00007e28 <bt_gatt_foreach_attr>:
{
    7e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e2c:	4699      	mov	r9, r3
    7e2e:	4b12      	ldr	r3, [pc, #72]	; (7e78 <bt_gatt_foreach_attr+0x50>)
    7e30:	681c      	ldr	r4, [r3, #0]
    7e32:	4606      	mov	r6, r0
    7e34:	460f      	mov	r7, r1
    7e36:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7e38:	b1dc      	cbz	r4, 7e72 <bt_gatt_foreach_attr+0x4a>
    7e3a:	3c08      	subs	r4, #8
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7e3c:	f04f 0a14 	mov.w	sl, #20
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7e40:	b1bc      	cbz	r4, 7e72 <bt_gatt_foreach_attr+0x4a>
    7e42:	2500      	movs	r5, #0
    7e44:	e006      	b.n	7e54 <bt_gatt_foreach_attr+0x2c>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    7e46:	6820      	ldr	r0, [r4, #0]
    7e48:	fb0a 0005 	mla	r0, sl, r5, r0
			if (attr->handle < start_handle ||
    7e4c:	8a03      	ldrh	r3, [r0, #16]
    7e4e:	42b3      	cmp	r3, r6
    7e50:	d207      	bcs.n	7e62 <bt_gatt_foreach_attr+0x3a>
		for (i = 0; i < svc->attr_count; i++) {
    7e52:	3501      	adds	r5, #1
    7e54:	88a3      	ldrh	r3, [r4, #4]
    7e56:	429d      	cmp	r5, r3
    7e58:	dbf5      	blt.n	7e46 <bt_gatt_foreach_attr+0x1e>
	return node->next;
    7e5a:	68a4      	ldr	r4, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    7e5c:	b14c      	cbz	r4, 7e72 <bt_gatt_foreach_attr+0x4a>
    7e5e:	3c08      	subs	r4, #8
    7e60:	e7ee      	b.n	7e40 <bt_gatt_foreach_attr+0x18>
			if (attr->handle < start_handle ||
    7e62:	42bb      	cmp	r3, r7
    7e64:	d8f5      	bhi.n	7e52 <bt_gatt_foreach_attr+0x2a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    7e66:	4649      	mov	r1, r9
    7e68:	47c0      	blx	r8
    7e6a:	2800      	cmp	r0, #0
    7e6c:	d1f1      	bne.n	7e52 <bt_gatt_foreach_attr+0x2a>
    7e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e76:	bf00      	nop
    7e78:	20000684 	.word	0x20000684

00007e7c <bt_gatt_indicate.part.12>:
int bt_gatt_indicate(struct bt_conn *conn,
    7e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nfy.err = -ENOTCONN;
    7e7e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	nfy.params = params;
    7e82:	9005      	str	r0, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    7e84:	6980      	ldr	r0, [r0, #24]
	nfy.err = -ENOTCONN;
    7e86:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    7e88:	2302      	movs	r3, #2
    7e8a:	f8ad 3004 	strh.w	r3, [sp, #4]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    7e8e:	4a05      	ldr	r2, [pc, #20]	; (7ea4 <bt_gatt_indicate.part.12+0x28>)
    7e90:	8a00      	ldrh	r0, [r0, #16]
    7e92:	466b      	mov	r3, sp
    7e94:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7e98:	f7ff ffc6 	bl	7e28 <bt_gatt_foreach_attr>
}
    7e9c:	9800      	ldr	r0, [sp, #0]
    7e9e:	b007      	add	sp, #28
    7ea0:	f85d fb04 	ldr.w	pc, [sp], #4
    7ea4:	00007d01 	.word	0x00007d01

00007ea8 <sc_process>:
{
    7ea8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    7eaa:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    7eae:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    7eb2:	4603      	mov	r3, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    7eb4:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    7eb8:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    7ebc:	382c      	subs	r0, #44	; 0x2c
    7ebe:	f103 0428 	add.w	r4, r3, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7ec2:	f3bf 8f5b 	dmb	ish
    7ec6:	e854 2f00 	ldrex	r2, [r4]
    7eca:	f022 0201 	bic.w	r2, r2, #1
    7ece:	e844 2100 	strex	r1, r2, [r4]
    7ed2:	2900      	cmp	r1, #0
    7ed4:	d1f7      	bne.n	7ec6 <sc_process+0x1e>
    7ed6:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    7eda:	2200      	movs	r2, #0
    7edc:	f823 2c04 	strh.w	r2, [r3, #-4]
	sc->end = 0;
    7ee0:	f823 2c02 	strh.w	r2, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    7ee4:	4a0e      	ldr	r2, [pc, #56]	; (7f20 <sc_process+0x78>)
    7ee6:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    7eea:	4a0e      	ldr	r2, [pc, #56]	; (7f24 <sc_process+0x7c>)
    7eec:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    7ef0:	aa01      	add	r2, sp, #4
    7ef2:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    7ef6:	2204      	movs	r2, #4
    7ef8:	f823 2c08 	strh.w	r2, [r3, #-8]
    7efc:	f7ff ffbe 	bl	7e7c <bt_gatt_indicate.part.12>
	if (bt_gatt_indicate(NULL, &sc->params)) {
    7f00:	b958      	cbnz	r0, 7f1a <sc_process+0x72>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7f02:	f3bf 8f5b 	dmb	ish
    7f06:	e854 3f00 	ldrex	r3, [r4]
    7f0a:	f043 0302 	orr.w	r3, r3, #2
    7f0e:	e844 3200 	strex	r2, r3, [r4]
    7f12:	2a00      	cmp	r2, #0
    7f14:	d1f7      	bne.n	7f06 <sc_process+0x5e>
    7f16:	f3bf 8f5b 	dmb	ish
}
    7f1a:	b002      	add	sp, #8
    7f1c:	bd10      	pop	{r4, pc}
    7f1e:	bf00      	nop
    7f20:	20008898 	.word	0x20008898
    7f24:	00007aed 	.word	0x00007aed

00007f28 <bt_gatt_attr_next>:
{
    7f28:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7f2a:	8a01      	ldrh	r1, [r0, #16]
	struct bt_gatt_attr *next = NULL;
    7f2c:	ab02      	add	r3, sp, #8
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7f2e:	3101      	adds	r1, #1
    7f30:	b289      	uxth	r1, r1
	struct bt_gatt_attr *next = NULL;
    7f32:	2200      	movs	r2, #0
    7f34:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    7f38:	4608      	mov	r0, r1
    7f3a:	4a03      	ldr	r2, [pc, #12]	; (7f48 <bt_gatt_attr_next+0x20>)
    7f3c:	f7ff ff74 	bl	7e28 <bt_gatt_foreach_attr>
}
    7f40:	9801      	ldr	r0, [sp, #4]
    7f42:	b003      	add	sp, #12
    7f44:	f85d fb04 	ldr.w	pc, [sp], #4
    7f48:	0000763d 	.word	0x0000763d

00007f4c <bt_gatt_attr_read_chrc>:
{
    7f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
    7f50:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    7f54:	b08b      	sub	sp, #44	; 0x2c
    7f56:	461c      	mov	r4, r3
	next = bt_gatt_attr_next(attr);
    7f58:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
    7f5a:	f899 3004 	ldrb.w	r3, [r9, #4]
{
    7f5e:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
	pdu.properties = chrc->properties;
    7f62:	f88d 3014 	strb.w	r3, [sp, #20]
{
    7f66:	4688      	mov	r8, r1
    7f68:	4617      	mov	r7, r2
	next = bt_gatt_attr_next(attr);
    7f6a:	f7ff ffdd 	bl	7f28 <bt_gatt_attr_next>
	if (!next) {
    7f6e:	4605      	mov	r5, r0
    7f70:	bb40      	cbnz	r0, 7fc4 <bt_gatt_attr_read_chrc+0x78>
		BT_WARN("No value for characteristic at 0x%04x", attr->handle);
    7f72:	4b1c      	ldr	r3, [pc, #112]	; (7fe4 <bt_gatt_attr_read_chrc+0x98>)
    7f74:	f8b8 2010 	ldrh.w	r2, [r8, #16]
    7f78:	9302      	str	r3, [sp, #8]
    7f7a:	9201      	str	r2, [sp, #4]
    7f7c:	9300      	str	r3, [sp, #0]
    7f7e:	4a1a      	ldr	r2, [pc, #104]	; (7fe8 <bt_gatt_attr_read_chrc+0x9c>)
    7f80:	4b1a      	ldr	r3, [pc, #104]	; (7fec <bt_gatt_attr_read_chrc+0xa0>)
    7f82:	491b      	ldr	r1, [pc, #108]	; (7ff0 <bt_gatt_attr_read_chrc+0xa4>)
    7f84:	481b      	ldr	r0, [pc, #108]	; (7ff4 <bt_gatt_attr_read_chrc+0xa8>)
    7f86:	f7f9 fbab 	bl	16e0 <printk>
		pdu.value_handle = 0x0000;
    7f8a:	f88d 5015 	strb.w	r5, [sp, #21]
    7f8e:	f88d 5016 	strb.w	r5, [sp, #22]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    7f92:	f8d9 1000 	ldr.w	r1, [r9]
    7f96:	780b      	ldrb	r3, [r1, #0]
    7f98:	b9c3      	cbnz	r3, 7fcc <bt_gatt_attr_read_chrc+0x80>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    7f9a:	884b      	ldrh	r3, [r1, #2]
    7f9c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    7fa0:	2305      	movs	r3, #5
	if (offset > value_len) {
    7fa2:	42b3      	cmp	r3, r6
    7fa4:	d31a      	bcc.n	7fdc <bt_gatt_attr_read_chrc+0x90>
	len = min(buf_len, value_len - offset);
    7fa6:	1b9b      	subs	r3, r3, r6
    7fa8:	42a3      	cmp	r3, r4
    7faa:	bfa8      	it	ge
    7fac:	4623      	movge	r3, r4
    7fae:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    7fb0:	ab05      	add	r3, sp, #20
    7fb2:	4622      	mov	r2, r4
    7fb4:	1999      	adds	r1, r3, r6
    7fb6:	4638      	mov	r0, r7
    7fb8:	f7f8 fb26 	bl	608 <memcpy>
}
    7fbc:	4620      	mov	r0, r4
    7fbe:	b00b      	add	sp, #44	; 0x2c
    7fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    7fc4:	8a03      	ldrh	r3, [r0, #16]
    7fc6:	f8ad 3015 	strh.w	r3, [sp, #21]
    7fca:	e7e2      	b.n	7f92 <bt_gatt_attr_read_chrc+0x46>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    7fcc:	2210      	movs	r2, #16
    7fce:	3101      	adds	r1, #1
    7fd0:	f10d 0017 	add.w	r0, sp, #23
    7fd4:	f7f8 fb18 	bl	608 <memcpy>
		value_len += 16;
    7fd8:	2313      	movs	r3, #19
    7fda:	e7e2      	b.n	7fa2 <bt_gatt_attr_read_chrc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    7fdc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    7fe0:	e7ec      	b.n	7fbc <bt_gatt_attr_read_chrc+0x70>
    7fe2:	bf00      	nop
    7fe4:	0001868d 	.word	0x0001868d
    7fe8:	00019806 	.word	0x00019806
    7fec:	0001a2fe 	.word	0x0001a2fe
    7ff0:	00019a8b 	.word	0x00019a8b
    7ff4:	0001a3bc 	.word	0x0001a3bc

00007ff8 <bt_gatt_exchange_mtu>:
	if (conn->state != BT_CONN_CONNECTED) {
    7ff8:	7b03      	ldrb	r3, [r0, #12]
    7ffa:	2b03      	cmp	r3, #3
{
    7ffc:	b570      	push	{r4, r5, r6, lr}
    7ffe:	4605      	mov	r5, r0
    8000:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    8002:	d116      	bne.n	8032 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_MTU_REQ, sizeof(*req));
    8004:	2202      	movs	r2, #2
    8006:	4611      	mov	r1, r2
    8008:	f7fe fe22 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    800c:	4604      	mov	r4, r0
    800e:	b198      	cbz	r0, 8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
	req = net_buf_add(buf, sizeof(*req));
    8010:	2102      	movs	r1, #2
    8012:	3008      	adds	r0, #8
    8014:	f00e feb4 	bl	16d80 <net_buf_simple_add>
	req->mtu = sys_cpu_to_le16(mtu);
    8018:	f06f 0308 	mvn.w	r3, #8
    801c:	7003      	strb	r3, [r0, #0]
    801e:	2300      	movs	r3, #0
    8020:	7043      	strb	r3, [r0, #1]
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    8022:	4621      	mov	r1, r4
    8024:	4633      	mov	r3, r6
    8026:	4628      	mov	r0, r5
    8028:	4a05      	ldr	r2, [pc, #20]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
}
    802a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return gatt_send(conn, buf, gatt_mtu_rsp, params, NULL);
    802e:	f7ff bc5d 	b.w	78ec <gatt_send.constprop.29>
		return -ENOTCONN;
    8032:	f06f 0038 	mvn.w	r0, #56	; 0x38
    8036:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    8038:	f06f 000b 	mvn.w	r0, #11
}
    803c:	bd70      	pop	{r4, r5, r6, pc}
    803e:	bf00      	nop
    8040:	000076a9 	.word	0x000076a9

00008044 <bt_gatt_discover>:
{
    8044:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8046:	7b03      	ldrb	r3, [r0, #12]
    8048:	2b03      	cmp	r3, #3
{
    804a:	b087      	sub	sp, #28
    804c:	4605      	mov	r5, r0
    804e:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    8050:	f040 8097 	bne.w	8182 <bt_gatt_discover+0x13e>
	switch (params->type) {
    8054:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    8058:	2b04      	cmp	r3, #4
    805a:	f200 8087 	bhi.w	816c <bt_gatt_discover+0x128>
    805e:	e8df f003 	tbb	[pc, r3]
    8062:	0303      	.short	0x0303
    8064:	5454      	.short	0x5454
    8066:	73          	.byte	0x73
    8067:	00          	.byte	0x00
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    8068:	2206      	movs	r2, #6
    806a:	4611      	mov	r1, r2
    806c:	f7fe fdf0 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    8070:	4606      	mov	r6, r0
    8072:	b918      	cbnz	r0, 807c <bt_gatt_discover+0x38>
		return -ENOMEM;
    8074:	f06f 000b 	mvn.w	r0, #11
}
    8078:	b007      	add	sp, #28
    807a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	req = net_buf_add(buf, sizeof(*req));
    807c:	f100 0708 	add.w	r7, r0, #8
    8080:	2106      	movs	r1, #6
    8082:	4638      	mov	r0, r7
    8084:	f00e fe7c 	bl	16d80 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    8088:	8c23      	ldrh	r3, [r4, #32]
    808a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    808c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    808e:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    8090:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    8094:	b9eb      	cbnz	r3, 80d2 <bt_gatt_discover+0x8e>
		uuid = BT_UUID_GATT_PRIMARY;
    8096:	f88d 3014 	strb.w	r3, [sp, #20]
    809a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    809e:	f8ad 3016 	strh.w	r3, [sp, #22]
    80a2:	ab05      	add	r3, sp, #20
	req->type = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    80a4:	885b      	ldrh	r3, [r3, #2]
	switch (params->uuid->type) {
    80a6:	69a1      	ldr	r1, [r4, #24]
	req->type = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    80a8:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    80aa:	780b      	ldrb	r3, [r1, #0]
    80ac:	b1d3      	cbz	r3, 80e4 <bt_gatt_discover+0xa0>
    80ae:	2b02      	cmp	r3, #2
    80b0:	d025      	beq.n	80fe <bt_gatt_discover+0xba>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    80b2:	4a35      	ldr	r2, [pc, #212]	; (8188 <bt_gatt_discover+0x144>)
    80b4:	9202      	str	r2, [sp, #8]
    80b6:	e88d 000c 	stmia.w	sp, {r2, r3}
    80ba:	4934      	ldr	r1, [pc, #208]	; (818c <bt_gatt_discover+0x148>)
    80bc:	4b34      	ldr	r3, [pc, #208]	; (8190 <bt_gatt_discover+0x14c>)
    80be:	4a35      	ldr	r2, [pc, #212]	; (8194 <bt_gatt_discover+0x150>)
    80c0:	4835      	ldr	r0, [pc, #212]	; (8198 <bt_gatt_discover+0x154>)
    80c2:	f7f9 fb0d 	bl	16e0 <printk>
		net_buf_unref(buf);
    80c6:	4630      	mov	r0, r6
    80c8:	f00e fe28 	bl	16d1c <net_buf_unref>
	return -EINVAL;
    80cc:	f06f 0015 	mvn.w	r0, #21
    80d0:	e7d2      	b.n	8078 <bt_gatt_discover+0x34>
		uuid = BT_UUID_GATT_SECONDARY;
    80d2:	2300      	movs	r3, #0
    80d4:	f88d 3010 	strb.w	r3, [sp, #16]
    80d8:	f642 0301 	movw	r3, #10241	; 0x2801
    80dc:	f8ad 3012 	strh.w	r3, [sp, #18]
    80e0:	ab04      	add	r3, sp, #16
    80e2:	e7df      	b.n	80a4 <bt_gatt_discover+0x60>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
    80e4:	8849      	ldrh	r1, [r1, #2]
    80e6:	4638      	mov	r0, r7
    80e8:	f00e fe61 	bl	16dae <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    80ec:	4a2b      	ldr	r2, [pc, #172]	; (819c <bt_gatt_discover+0x158>)
    80ee:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    80f0:	4631      	mov	r1, r6
    80f2:	4628      	mov	r0, r5
}
    80f4:	b007      	add	sp, #28
    80f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    80fa:	f7ff bbf7 	b.w	78ec <gatt_send.constprop.29>
		net_buf_add_mem(buf, BT_UUID_128(params->uuid)->val, 16);
    80fe:	2210      	movs	r2, #16
    8100:	3101      	adds	r1, #1
    8102:	4638      	mov	r0, r7
    8104:	f00e fe42 	bl	16d8c <net_buf_simple_add_mem>
    8108:	e7f0      	b.n	80ec <bt_gatt_discover+0xa8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    810a:	2204      	movs	r2, #4
    810c:	2108      	movs	r1, #8
    810e:	f7fe fd9f 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    8112:	4606      	mov	r6, r0
    8114:	2800      	cmp	r0, #0
    8116:	d0ad      	beq.n	8074 <bt_gatt_discover+0x30>
	req = net_buf_add(buf, sizeof(*req));
    8118:	f100 0708 	add.w	r7, r0, #8
    811c:	2104      	movs	r1, #4
    811e:	4638      	mov	r0, r7
    8120:	f00e fe2e 	bl	16d80 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    8124:	8c23      	ldrh	r3, [r4, #32]
    8126:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    8128:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    812a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    812c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    8130:	2b02      	cmp	r3, #2
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_INCLUDE)->val);
    8132:	bf0c      	ite	eq
    8134:	f642 0102 	movweq	r1, #10242	; 0x2802
		net_buf_add_le16(buf, BT_UUID_16(BT_UUID_GATT_CHRC)->val);
    8138:	f642 0103 	movwne	r1, #10243	; 0x2803
    813c:	4638      	mov	r0, r7
    813e:	f00e fe36 	bl	16dae <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    8142:	4623      	mov	r3, r4
    8144:	4a16      	ldr	r2, [pc, #88]	; (81a0 <bt_gatt_discover+0x15c>)
    8146:	e7d3      	b.n	80f0 <bt_gatt_discover+0xac>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    8148:	2204      	movs	r2, #4
    814a:	4611      	mov	r1, r2
    814c:	f7fe fd80 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    8150:	4606      	mov	r6, r0
    8152:	2800      	cmp	r0, #0
    8154:	d08e      	beq.n	8074 <bt_gatt_discover+0x30>
	req = net_buf_add(buf, sizeof(*req));
    8156:	2104      	movs	r1, #4
    8158:	3008      	adds	r0, #8
    815a:	f00e fe11 	bl	16d80 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    815e:	8c23      	ldrh	r3, [r4, #32]
    8160:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    8162:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    8164:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    8166:	4a0f      	ldr	r2, [pc, #60]	; (81a4 <bt_gatt_discover+0x160>)
    8168:	4623      	mov	r3, r4
    816a:	e7c1      	b.n	80f0 <bt_gatt_discover+0xac>
		BT_ERR("Invalid discovery type: %u", params->type);
    816c:	4a06      	ldr	r2, [pc, #24]	; (8188 <bt_gatt_discover+0x144>)
    816e:	9202      	str	r2, [sp, #8]
    8170:	e88d 000c 	stmia.w	sp, {r2, r3}
    8174:	4905      	ldr	r1, [pc, #20]	; (818c <bt_gatt_discover+0x148>)
    8176:	4b0c      	ldr	r3, [pc, #48]	; (81a8 <bt_gatt_discover+0x164>)
    8178:	4a06      	ldr	r2, [pc, #24]	; (8194 <bt_gatt_discover+0x150>)
    817a:	480c      	ldr	r0, [pc, #48]	; (81ac <bt_gatt_discover+0x168>)
    817c:	f7f9 fab0 	bl	16e0 <printk>
    8180:	e7a4      	b.n	80cc <bt_gatt_discover+0x88>
		return -ENOTCONN;
    8182:	f06f 0038 	mvn.w	r0, #56	; 0x38
    8186:	e777      	b.n	8078 <bt_gatt_discover+0x34>
    8188:	0001868d 	.word	0x0001868d
    818c:	00019a8b 	.word	0x00019a8b
    8190:	0001a350 	.word	0x0001a350
    8194:	00019a84 	.word	0x00019a84
    8198:	0001a41c 	.word	0x0001a41c
    819c:	000081e7 	.word	0x000081e7
    81a0:	00008289 	.word	0x00008289
    81a4:	00008581 	.word	0x00008581
    81a8:	0001a3ab 	.word	0x0001a3ab
    81ac:	0001a441 	.word	0x0001a441

000081b0 <gatt_discover_next>:
{
    81b0:	b570      	push	{r4, r5, r6, lr}
    81b2:	4605      	mov	r5, r0
    81b4:	4614      	mov	r4, r2
	if (!last_handle)
    81b6:	b929      	cbnz	r1, 81c4 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
    81b8:	4621      	mov	r1, r4
    81ba:	4628      	mov	r0, r5
    81bc:	f7ff ff42 	bl	8044 <bt_gatt_discover>
    81c0:	b950      	cbnz	r0, 81d8 <gatt_discover_next+0x28>
    81c2:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
    81c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    81c8:	4299      	cmp	r1, r3
		params->start_handle++;
    81ca:	bf18      	it	ne
    81cc:	3101      	addne	r1, #1
    81ce:	8411      	strh	r1, [r2, #32]
	if (params->start_handle >= params->end_handle) {
    81d0:	8c12      	ldrh	r2, [r2, #32]
    81d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    81d4:	429a      	cmp	r2, r3
    81d6:	d3ef      	bcc.n	81b8 <gatt_discover_next+0x8>
	params->func(conn, NULL, params);
    81d8:	69e3      	ldr	r3, [r4, #28]
    81da:	4622      	mov	r2, r4
    81dc:	4628      	mov	r0, r5
    81de:	2100      	movs	r1, #0
}
    81e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
    81e4:	4718      	bx	r3

000081e6 <gatt_find_type_rsp>:
{
    81e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81ea:	b08a      	sub	sp, #40	; 0x28
    81ec:	4607      	mov	r7, r0
    81ee:	4690      	mov	r8, r2
    81f0:	461e      	mov	r6, r3
    81f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
	if (err) {
    81f4:	2900      	cmp	r1, #0
    81f6:	d140      	bne.n	827a <gatt_find_type_rsp+0x94>
    81f8:	460c      	mov	r4, r1
    81fa:	468a      	mov	sl, r1
		struct bt_gatt_attr attr = {};
    81fc:	4689      	mov	r9, r1
	for (i = 0; length >= sizeof(rsp->list[i]);
    81fe:	2e03      	cmp	r6, #3
    8200:	d809      	bhi.n	8216 <gatt_find_type_rsp+0x30>
	if (length > 0) {
    8202:	2e00      	cmp	r6, #0
    8204:	d139      	bne.n	827a <gatt_find_type_rsp+0x94>
	gatt_discover_next(conn, end_handle, params);
    8206:	462a      	mov	r2, r5
    8208:	4651      	mov	r1, sl
    820a:	4638      	mov	r0, r7
    820c:	f7ff ffd0 	bl	81b0 <gatt_discover_next>
}
    8210:	b00a      	add	sp, #40	; 0x28
    8212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_gatt_attr attr = {};
    8216:	2214      	movs	r2, #20
    8218:	eb0d 0002 	add.w	r0, sp, r2
    821c:	2100      	movs	r1, #0
    821e:	f7f8 fa1f 	bl	660 <memset>
    8222:	b2e3      	uxtb	r3, r4
    8224:	eb08 0383 	add.w	r3, r8, r3, lsl #2
		start_handle = sys_le16_to_cpu(rsp->list[i].start_handle);
    8228:	881a      	ldrh	r2, [r3, #0]
		end_handle = sys_le16_to_cpu(rsp->list[i].end_handle);
    822a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    822e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    8232:	b9d3      	cbnz	r3, 826a <gatt_find_type_rsp+0x84>
			attr.uuid = BT_UUID_GATT_PRIMARY;
    8234:	f88d 3004 	strb.w	r3, [sp, #4]
    8238:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    823c:	f8ad 3006 	strh.w	r3, [sp, #6]
    8240:	ab01      	add	r3, sp, #4
			attr.uuid = BT_UUID_GATT_SECONDARY;
    8242:	9305      	str	r3, [sp, #20]
		value.uuid = params->uuid;
    8244:	69ab      	ldr	r3, [r5, #24]
    8246:	9303      	str	r3, [sp, #12]
		attr.user_data = &value;
    8248:	ab03      	add	r3, sp, #12
		attr.handle = start_handle;
    824a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
		attr.user_data = &value;
    824e:	9308      	str	r3, [sp, #32]
		value.end_handle = end_handle;
    8250:	f8ad a010 	strh.w	sl, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    8254:	69eb      	ldr	r3, [r5, #28]
    8256:	462a      	mov	r2, r5
    8258:	a905      	add	r1, sp, #20
    825a:	4638      	mov	r0, r7
    825c:	4798      	blx	r3
    825e:	3401      	adds	r4, #1
    8260:	2800      	cmp	r0, #0
    8262:	d0d5      	beq.n	8210 <gatt_find_type_rsp+0x2a>
	     i++, length -=  sizeof(rsp->list[i])) {
    8264:	3e04      	subs	r6, #4
    8266:	b2b6      	uxth	r6, r6
    8268:	e7c9      	b.n	81fe <gatt_find_type_rsp+0x18>
			attr.uuid = BT_UUID_GATT_SECONDARY;
    826a:	f642 0301 	movw	r3, #10241	; 0x2801
    826e:	f8ad 300a 	strh.w	r3, [sp, #10]
    8272:	f88d 9008 	strb.w	r9, [sp, #8]
    8276:	ab02      	add	r3, sp, #8
    8278:	e7e3      	b.n	8242 <gatt_find_type_rsp+0x5c>
	params->func(conn, NULL, params);
    827a:	69eb      	ldr	r3, [r5, #28]
    827c:	462a      	mov	r2, r5
    827e:	2100      	movs	r1, #0
    8280:	4638      	mov	r0, r7
    8282:	4798      	blx	r3
    8284:	e7c4      	b.n	8210 <gatt_find_type_rsp+0x2a>
	...

00008288 <gatt_read_type_rsp>:
{
    8288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    828c:	b095      	sub	sp, #84	; 0x54
    828e:	4607      	mov	r7, r0
    8290:	4690      	mov	r8, r2
    8292:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	if (err) {
    8294:	b121      	cbz	r1, 82a0 <gatt_read_type_rsp+0x18>
		params->func(conn, NULL, params);
    8296:	69eb      	ldr	r3, [r5, #28]
    8298:	462a      	mov	r2, r5
    829a:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    829c:	4798      	blx	r3
    829e:	e05a      	b.n	8356 <gatt_read_type_rsp+0xce>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    82a0:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    82a4:	7812      	ldrb	r2, [r2, #0]
    82a6:	2802      	cmp	r0, #2
    82a8:	f040 8092 	bne.w	83d0 <gatt_read_type_rsp+0x148>
	switch (rsp->len) {
    82ac:	2a06      	cmp	r2, #6
    82ae:	d011      	beq.n	82d4 <gatt_read_type_rsp+0x4c>
    82b0:	2a08      	cmp	r2, #8
    82b2:	d112      	bne.n	82da <gatt_read_type_rsp+0x52>
		u.uuid.type = BT_UUID_TYPE_16;
    82b4:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
	for (length--, pdu = rsp->data; length >= rsp->len;
    82b8:	1e5c      	subs	r4, r3, #1
    82ba:	b2a4      	uxth	r4, r4
    82bc:	f108 0901 	add.w	r9, r8, #1
	u16_t handle = 0;
    82c0:	2600      	movs	r6, #0
			value.uuid = &u.uuid;
    82c2:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
	for (length--, pdu = rsp->data; length >= rsp->len;
    82c6:	f898 3000 	ldrb.w	r3, [r8]
    82ca:	42a3      	cmp	r3, r4
    82cc:	d914      	bls.n	82f8 <gatt_read_type_rsp+0x70>
	if (length == 0 && handle) {
    82ce:	b974      	cbnz	r4, 82ee <gatt_read_type_rsp+0x66>
    82d0:	b16e      	cbz	r6, 82ee <gatt_read_type_rsp+0x66>
    82d2:	e069      	b.n	83a8 <gatt_read_type_rsp+0x120>
		u.uuid.type = BT_UUID_TYPE_128;
    82d4:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    82d8:	e7ee      	b.n	82b8 <gatt_read_type_rsp+0x30>
		BT_ERR("Invalid data len %u", rsp->len);
    82da:	4b74      	ldr	r3, [pc, #464]	; (84ac <gatt_read_type_rsp+0x224>)
    82dc:	9302      	str	r3, [sp, #8]
    82de:	9300      	str	r3, [sp, #0]
    82e0:	4b73      	ldr	r3, [pc, #460]	; (84b0 <gatt_read_type_rsp+0x228>)
	switch (rsp->len) {
    82e2:	9201      	str	r2, [sp, #4]
		BT_ERR("Invalid data len %u", rsp->len);
    82e4:	4a73      	ldr	r2, [pc, #460]	; (84b4 <gatt_read_type_rsp+0x22c>)
    82e6:	4974      	ldr	r1, [pc, #464]	; (84b8 <gatt_read_type_rsp+0x230>)
    82e8:	4874      	ldr	r0, [pc, #464]	; (84bc <gatt_read_type_rsp+0x234>)
    82ea:	f7f9 f9f9 	bl	16e0 <printk>
	params->func(conn, NULL, params);
    82ee:	69eb      	ldr	r3, [r5, #28]
    82f0:	462a      	mov	r2, r5
    82f2:	2100      	movs	r1, #0
    82f4:	4638      	mov	r0, r7
    82f6:	e7d1      	b.n	829c <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
    82f8:	f8b9 b000 	ldrh.w	fp, [r9]
    82fc:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
    8300:	2e00      	cmp	r6, #0
    8302:	d0f4      	beq.n	82ee <gatt_read_type_rsp+0x66>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    8304:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    8308:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
		switch (u.uuid.type) {
    830c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    8310:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    8314:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
		switch (u.uuid.type) {
    8318:	b303      	cbz	r3, 835c <gatt_read_type_rsp+0xd4>
    831a:	2b02      	cmp	r3, #2
    831c:	d029      	beq.n	8372 <gatt_read_type_rsp+0xea>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    831e:	69a9      	ldr	r1, [r5, #24]
    8320:	2900      	cmp	r1, #0
    8322:	d14a      	bne.n	83ba <gatt_read_type_rsp+0x132>
		attr = (&(struct bt_gatt_attr) {
    8324:	2214      	movs	r2, #20
    8326:	2100      	movs	r1, #0
    8328:	a80a      	add	r0, sp, #40	; 0x28
    832a:	f7f8 f999 	bl	660 <memset>
			.uuid = BT_UUID_GATT_INCLUDE,
    832e:	2300      	movs	r3, #0
    8330:	f88d 3018 	strb.w	r3, [sp, #24]
    8334:	f642 0302 	movw	r3, #10242	; 0x2802
    8338:	f8ad 301a 	strh.w	r3, [sp, #26]
		attr = (&(struct bt_gatt_attr) {
    833c:	ab06      	add	r3, sp, #24
    833e:	930a      	str	r3, [sp, #40]	; 0x28
    8340:	ab08      	add	r3, sp, #32
    8342:	930d      	str	r3, [sp, #52]	; 0x34
		attr->handle = handle;
    8344:	f8ad b038 	strh.w	fp, [sp, #56]	; 0x38
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    8348:	462a      	mov	r2, r5
    834a:	a90a      	add	r1, sp, #40	; 0x28
    834c:	4638      	mov	r0, r7
    834e:	69eb      	ldr	r3, [r5, #28]
    8350:	4798      	blx	r3
    8352:	2800      	cmp	r0, #0
    8354:	d136      	bne.n	83c4 <gatt_read_type_rsp+0x13c>
}
    8356:	b015      	add	sp, #84	; 0x54
    8358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			value.uuid = &u.uuid;
    835c:	f8cd a020 	str.w	sl, [sp, #32]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    8360:	f899 3006 	ldrb.w	r3, [r9, #6]
    8364:	f899 2007 	ldrb.w	r2, [r9, #7]
    8368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    836c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    8370:	e7d5      	b.n	831e <gatt_read_type_rsp+0x96>
			params->_included.start_handle = value.start_handle;
    8372:	8469      	strh	r1, [r5, #34]	; 0x22
			params->_included.end_handle = value.end_handle;
    8374:	84aa      	strh	r2, [r5, #36]	; 0x24
			params->_included.attr_handle = handle;
    8376:	842e      	strh	r6, [r5, #32]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    8378:	461a      	mov	r2, r3
    837a:	210a      	movs	r1, #10
    837c:	4638      	mov	r0, r7
    837e:	9305      	str	r3, [sp, #20]
    8380:	f7fe fc66 	bl	6c50 <bt_att_create_pdu>
	if (!buf) {
    8384:	4604      	mov	r4, r0
    8386:	b1a8      	cbz	r0, 83b4 <gatt_read_type_rsp+0x12c>
	req = net_buf_add(buf, sizeof(*req));
    8388:	9b05      	ldr	r3, [sp, #20]
    838a:	3008      	adds	r0, #8
    838c:	4619      	mov	r1, r3
    838e:	f00e fcf7 	bl	16d80 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    8392:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    8394:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    8396:	4a4a      	ldr	r2, [pc, #296]	; (84c0 <gatt_read_type_rsp+0x238>)
    8398:	462b      	mov	r3, r5
    839a:	4621      	mov	r1, r4
    839c:	4638      	mov	r0, r7
    839e:	f7ff faa5 	bl	78ec <gatt_send.constprop.29>
			return read_included_uuid(conn, params);
    83a2:	b286      	uxth	r6, r0
	if (!handle) {
    83a4:	2e00      	cmp	r6, #0
    83a6:	d0d6      	beq.n	8356 <gatt_read_type_rsp+0xce>
	gatt_discover_next(conn, handle, params);
    83a8:	462a      	mov	r2, r5
    83aa:	4631      	mov	r1, r6
    83ac:	4638      	mov	r0, r7
    83ae:	f7ff feff 	bl	81b0 <gatt_discover_next>
    83b2:	e7d0      	b.n	8356 <gatt_read_type_rsp+0xce>
		return -ENOMEM;
    83b4:	f06f 000b 	mvn.w	r0, #11
    83b8:	e7f3      	b.n	83a2 <gatt_read_type_rsp+0x11a>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    83ba:	4650      	mov	r0, sl
    83bc:	f7fa faa0 	bl	2900 <bt_uuid_cmp>
    83c0:	2800      	cmp	r0, #0
    83c2:	d0af      	beq.n	8324 <gatt_read_type_rsp+0x9c>
	     length -= rsp->len, pdu += rsp->len) {
    83c4:	f898 2000 	ldrb.w	r2, [r8]
    83c8:	1aa4      	subs	r4, r4, r2
    83ca:	b2a4      	uxth	r4, r4
    83cc:	4491      	add	r9, r2
    83ce:	e77a      	b.n	82c6 <gatt_read_type_rsp+0x3e>
	switch (rsp->len) {
    83d0:	2a07      	cmp	r2, #7
    83d2:	d007      	beq.n	83e4 <gatt_read_type_rsp+0x15c>
    83d4:	2a15      	cmp	r2, #21
    83d6:	d04e      	beq.n	8476 <gatt_read_type_rsp+0x1ee>
		BT_ERR("Invalid data len %u", rsp->len);
    83d8:	4b34      	ldr	r3, [pc, #208]	; (84ac <gatt_read_type_rsp+0x224>)
    83da:	9302      	str	r3, [sp, #8]
    83dc:	9300      	str	r3, [sp, #0]
	switch (rsp->len) {
    83de:	9201      	str	r2, [sp, #4]
		BT_ERR("Invalid data len %u", rsp->len);
    83e0:	4b38      	ldr	r3, [pc, #224]	; (84c4 <gatt_read_type_rsp+0x23c>)
    83e2:	e77f      	b.n	82e4 <gatt_read_type_rsp+0x5c>
		u.uuid.type = BT_UUID_TYPE_16;
    83e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
	for (length--, pdu = rsp->data; length >= rsp->len;
    83e8:	1e5c      	subs	r4, r3, #1
    83ea:	b2a4      	uxth	r4, r4
    83ec:	f108 0901 	add.w	r9, r8, #1
	u16_t handle = 0;
    83f0:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    83f2:	f898 3000 	ldrb.w	r3, [r8]
    83f6:	42a3      	cmp	r3, r4
    83f8:	f63f af69 	bhi.w	82ce <gatt_read_type_rsp+0x46>
		handle = sys_le16_to_cpu(data->handle);
    83fc:	f8b9 b000 	ldrh.w	fp, [r9]
    8400:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
    8404:	2e00      	cmp	r6, #0
    8406:	f43f af72 	beq.w	82ee <gatt_read_type_rsp+0x66>
		switch (u.uuid.type) {
    840a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    840e:	2b00      	cmp	r3, #0
    8410:	d035      	beq.n	847e <gatt_read_type_rsp+0x1f6>
    8412:	2b02      	cmp	r3, #2
    8414:	d03c      	beq.n	8490 <gatt_read_type_rsp+0x208>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    8416:	69a9      	ldr	r1, [r5, #24]
    8418:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
    841c:	2900      	cmp	r1, #0
    841e:	d13f      	bne.n	84a0 <gatt_read_type_rsp+0x218>
		attr = (&(struct bt_gatt_attr)BT_GATT_CHARACTERISTIC(&u.uuid,
    8420:	2214      	movs	r2, #20
    8422:	2100      	movs	r1, #0
    8424:	a80f      	add	r0, sp, #60	; 0x3c
    8426:	f7f8 f91b 	bl	660 <memset>
    842a:	2300      	movs	r3, #0
    842c:	f88d 301c 	strb.w	r3, [sp, #28]
    8430:	f642 0303 	movw	r3, #10243	; 0x2803
    8434:	f8ad 301e 	strh.w	r3, [sp, #30]
    8438:	ab07      	add	r3, sp, #28
    843a:	930f      	str	r3, [sp, #60]	; 0x3c
    843c:	4b22      	ldr	r3, [pc, #136]	; (84c8 <gatt_read_type_rsp+0x240>)
    843e:	9310      	str	r3, [sp, #64]	; 0x40
    8440:	f899 3002 	ldrb.w	r3, [r9, #2]
    8444:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    8448:	ab08      	add	r3, sp, #32
    844a:	9312      	str	r3, [sp, #72]	; 0x48
    844c:	2301      	movs	r3, #1
    844e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    8452:	f8cd a020 	str.w	sl, [sp, #32]
		attr->handle = handle;
    8456:	f8ad b04c 	strh.w	fp, [sp, #76]	; 0x4c
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    845a:	69eb      	ldr	r3, [r5, #28]
    845c:	462a      	mov	r2, r5
    845e:	a90f      	add	r1, sp, #60	; 0x3c
    8460:	4638      	mov	r0, r7
    8462:	4798      	blx	r3
    8464:	2800      	cmp	r0, #0
    8466:	f43f af76 	beq.w	8356 <gatt_read_type_rsp+0xce>
	     length -= rsp->len, pdu += rsp->len) {
    846a:	f898 2000 	ldrb.w	r2, [r8]
    846e:	1aa4      	subs	r4, r4, r2
    8470:	b2a4      	uxth	r4, r4
    8472:	4491      	add	r9, r2
    8474:	e7bd      	b.n	83f2 <gatt_read_type_rsp+0x16a>
		u.uuid.type = BT_UUID_TYPE_128;
    8476:	2202      	movs	r2, #2
    8478:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    847c:	e7b4      	b.n	83e8 <gatt_read_type_rsp+0x160>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    847e:	f899 3005 	ldrb.w	r3, [r9, #5]
    8482:	f899 2006 	ldrb.w	r2, [r9, #6]
    8486:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    848a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    848e:	e7c2      	b.n	8416 <gatt_read_type_rsp+0x18e>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    8490:	2210      	movs	r2, #16
    8492:	f109 0105 	add.w	r1, r9, #5
    8496:	f10d 0029 	add.w	r0, sp, #41	; 0x29
    849a:	f7f8 f8b5 	bl	608 <memcpy>
    849e:	e7ba      	b.n	8416 <gatt_read_type_rsp+0x18e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    84a0:	4650      	mov	r0, sl
    84a2:	f7fa fa2d 	bl	2900 <bt_uuid_cmp>
    84a6:	2800      	cmp	r0, #0
    84a8:	d0ba      	beq.n	8420 <gatt_read_type_rsp+0x198>
    84aa:	e7de      	b.n	846a <gatt_read_type_rsp+0x1e2>
    84ac:	0001868d 	.word	0x0001868d
    84b0:	0001a375 	.word	0x0001a375
    84b4:	00019a84 	.word	0x00019a84
    84b8:	00019a8b 	.word	0x00019a8b
    84bc:	0001a4fe 	.word	0x0001a4fe
    84c0:	000084cd 	.word	0x000084cd
    84c4:	0001a383 	.word	0x0001a383
    84c8:	00007f4d 	.word	0x00007f4d

000084cc <read_included_uuid_cb>:
{
    84cc:	b570      	push	{r4, r5, r6, lr}
    84ce:	b092      	sub	sp, #72	; 0x48
	if (length != 16) {
    84d0:	2b10      	cmp	r3, #16
{
    84d2:	4605      	mov	r5, r0
    84d4:	4611      	mov	r1, r2
    84d6:	9c16      	ldr	r4, [sp, #88]	; 0x58
	if (length != 16) {
    84d8:	d010      	beq.n	84fc <read_included_uuid_cb+0x30>
		BT_ERR("Invalid data len %u", length);
    84da:	4a24      	ldr	r2, [pc, #144]	; (856c <read_included_uuid_cb+0xa0>)
    84dc:	9202      	str	r2, [sp, #8]
    84de:	e88d 000c 	stmia.w	sp, {r2, r3}
    84e2:	4923      	ldr	r1, [pc, #140]	; (8570 <read_included_uuid_cb+0xa4>)
    84e4:	4b23      	ldr	r3, [pc, #140]	; (8574 <read_included_uuid_cb+0xa8>)
    84e6:	4a24      	ldr	r2, [pc, #144]	; (8578 <read_included_uuid_cb+0xac>)
    84e8:	4824      	ldr	r0, [pc, #144]	; (857c <read_included_uuid_cb+0xb0>)
    84ea:	f7f9 f8f9 	bl	16e0 <printk>
		params->func(conn, NULL, params);
    84ee:	69e3      	ldr	r3, [r4, #28]
    84f0:	4622      	mov	r2, r4
    84f2:	2100      	movs	r1, #0
    84f4:	4628      	mov	r0, r5
    84f6:	4798      	blx	r3
}
    84f8:	b012      	add	sp, #72	; 0x48
    84fa:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    84fc:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    84fe:	f8ad 201c 	strh.w	r2, [sp, #28]
	value.end_handle = params->_included.end_handle;
    8502:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    8504:	f8ad 201e 	strh.w	r2, [sp, #30]
	u.uuid.type = BT_UUID_TYPE_128;
    8508:	2202      	movs	r2, #2
    850a:	f88d 2020 	strb.w	r2, [sp, #32]
	value.uuid = &u.uuid;
    850e:	ae08      	add	r6, sp, #32
	memcpy(u.u128.val, pdu, length);
    8510:	461a      	mov	r2, r3
    8512:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	value.uuid = &u.uuid;
    8516:	9606      	str	r6, [sp, #24]
	memcpy(u.u128.val, pdu, length);
    8518:	f7f8 f876 	bl	608 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    851c:	69a1      	ldr	r1, [r4, #24]
    851e:	b9f9      	cbnz	r1, 8560 <read_included_uuid_cb+0x94>
	attr = (&(struct bt_gatt_attr) {
    8520:	2214      	movs	r2, #20
    8522:	2100      	movs	r1, #0
    8524:	a80d      	add	r0, sp, #52	; 0x34
    8526:	f7f8 f89b 	bl	660 <memset>
		.uuid = BT_UUID_GATT_INCLUDE,
    852a:	2300      	movs	r3, #0
    852c:	f88d 3014 	strb.w	r3, [sp, #20]
    8530:	f642 0302 	movw	r3, #10242	; 0x2802
    8534:	f8ad 3016 	strh.w	r3, [sp, #22]
	attr = (&(struct bt_gatt_attr) {
    8538:	ab05      	add	r3, sp, #20
    853a:	930d      	str	r3, [sp, #52]	; 0x34
    853c:	ab06      	add	r3, sp, #24
    853e:	9310      	str	r3, [sp, #64]	; 0x40
	attr->handle = params->_included.attr_handle;
    8540:	8c23      	ldrh	r3, [r4, #32]
    8542:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    8546:	4622      	mov	r2, r4
    8548:	69e3      	ldr	r3, [r4, #28]
    854a:	a90d      	add	r1, sp, #52	; 0x34
    854c:	4628      	mov	r0, r5
    854e:	4798      	blx	r3
    8550:	2800      	cmp	r0, #0
    8552:	d0d1      	beq.n	84f8 <read_included_uuid_cb+0x2c>
	gatt_discover_next(conn, params->start_handle, params);
    8554:	4622      	mov	r2, r4
    8556:	8c21      	ldrh	r1, [r4, #32]
    8558:	4628      	mov	r0, r5
    855a:	f7ff fe29 	bl	81b0 <gatt_discover_next>
    855e:	e7cb      	b.n	84f8 <read_included_uuid_cb+0x2c>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    8560:	4630      	mov	r0, r6
    8562:	f7fa f9cd 	bl	2900 <bt_uuid_cmp>
    8566:	2800      	cmp	r0, #0
    8568:	d0da      	beq.n	8520 <read_included_uuid_cb+0x54>
    856a:	e7f3      	b.n	8554 <read_included_uuid_cb+0x88>
    856c:	0001868d 	.word	0x0001868d
    8570:	00019a8b 	.word	0x00019a8b
    8574:	0001a35f 	.word	0x0001a35f
    8578:	00019a84 	.word	0x00019a84
    857c:	0001a4fe 	.word	0x0001a4fe

00008580 <gatt_find_info_rsp>:
{
    8580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8584:	b08f      	sub	sp, #60	; 0x3c
    8586:	4607      	mov	r7, r0
    8588:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    858a:	b971      	cbnz	r1, 85aa <gatt_find_info_rsp+0x2a>
	switch (rsp->format) {
    858c:	7810      	ldrb	r0, [r2, #0]
    858e:	2801      	cmp	r0, #1
    8590:	d011      	beq.n	85b6 <gatt_find_info_rsp+0x36>
    8592:	2802      	cmp	r0, #2
    8594:	d024      	beq.n	85e0 <gatt_find_info_rsp+0x60>
		BT_ERR("Invalid format %u", rsp->format);
    8596:	4b2f      	ldr	r3, [pc, #188]	; (8654 <gatt_find_info_rsp+0xd4>)
    8598:	9302      	str	r3, [sp, #8]
	switch (rsp->format) {
    859a:	9001      	str	r0, [sp, #4]
		BT_ERR("Invalid format %u", rsp->format);
    859c:	9300      	str	r3, [sp, #0]
    859e:	4a2e      	ldr	r2, [pc, #184]	; (8658 <gatt_find_info_rsp+0xd8>)
    85a0:	4b2e      	ldr	r3, [pc, #184]	; (865c <gatt_find_info_rsp+0xdc>)
    85a2:	492f      	ldr	r1, [pc, #188]	; (8660 <gatt_find_info_rsp+0xe0>)
    85a4:	482f      	ldr	r0, [pc, #188]	; (8664 <gatt_find_info_rsp+0xe4>)
    85a6:	f7f9 f89b 	bl	16e0 <printk>
	params->func(conn, NULL, params);
    85aa:	69f3      	ldr	r3, [r6, #28]
    85ac:	4632      	mov	r2, r6
    85ae:	2100      	movs	r1, #0
    85b0:	4638      	mov	r0, r7
    85b2:	4798      	blx	r3
    85b4:	e033      	b.n	861e <gatt_find_info_rsp+0x9e>
		u.uuid.type = BT_UUID_TYPE_16;
    85b6:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i16);
    85ba:	f04f 0804 	mov.w	r8, #4
	for (length--, pdu = rsp->info; length >= len;
    85be:	3b01      	subs	r3, #1
    85c0:	b29c      	uxth	r4, r3
    85c2:	1c55      	adds	r5, r2, #1
	u16_t handle = 0;
    85c4:	f04f 0900 	mov.w	r9, #0
	for (length--, pdu = rsp->info; length >= len;
    85c8:	fa1f fa88 	uxth.w	sl, r8
    85cc:	4554      	cmp	r4, sl
    85ce:	d20c      	bcs.n	85ea <gatt_find_info_rsp+0x6a>
	if (length > 0) {
    85d0:	2c00      	cmp	r4, #0
    85d2:	d1ea      	bne.n	85aa <gatt_find_info_rsp+0x2a>
	gatt_discover_next(conn, handle, params);
    85d4:	4632      	mov	r2, r6
    85d6:	4649      	mov	r1, r9
    85d8:	4638      	mov	r0, r7
    85da:	f7ff fde9 	bl	81b0 <gatt_discover_next>
	return;
    85de:	e01e      	b.n	861e <gatt_find_info_rsp+0x9e>
		u.uuid.type = BT_UUID_TYPE_128;
    85e0:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i128);
    85e4:	f04f 0812 	mov.w	r8, #18
		break;
    85e8:	e7e9      	b.n	85be <gatt_find_info_rsp+0x3e>
		handle = sys_le16_to_cpu(info.i16->handle);
    85ea:	f8b5 b000 	ldrh.w	fp, [r5]
		switch (u.uuid.type) {
    85ee:	f89d 3010 	ldrb.w	r3, [sp, #16]
		handle = sys_le16_to_cpu(info.i16->handle);
    85f2:	fa1f f98b 	uxth.w	r9, fp
		switch (u.uuid.type) {
    85f6:	b1ab      	cbz	r3, 8624 <gatt_find_info_rsp+0xa4>
    85f8:	2b02      	cmp	r3, #2
    85fa:	d01a      	beq.n	8632 <gatt_find_info_rsp+0xb2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    85fc:	69b1      	ldr	r1, [r6, #24]
    85fe:	b9f9      	cbnz	r1, 8640 <gatt_find_info_rsp+0xc0>
			BT_GATT_DESCRIPTOR(&u.uuid, 0, NULL, NULL, NULL));
    8600:	2214      	movs	r2, #20
    8602:	2100      	movs	r1, #0
    8604:	a809      	add	r0, sp, #36	; 0x24
    8606:	f7f8 f82b 	bl	660 <memset>
    860a:	ab04      	add	r3, sp, #16
    860c:	9309      	str	r3, [sp, #36]	; 0x24
		attr->handle = handle;
    860e:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
		if (params->func(conn, attr, params) == BT_GATT_ITER_STOP) {
    8612:	69f3      	ldr	r3, [r6, #28]
    8614:	4632      	mov	r2, r6
    8616:	a909      	add	r1, sp, #36	; 0x24
    8618:	4638      	mov	r0, r7
    861a:	4798      	blx	r3
    861c:	b9a8      	cbnz	r0, 864a <gatt_find_info_rsp+0xca>
}
    861e:	b00f      	add	sp, #60	; 0x3c
    8620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    8624:	78ab      	ldrb	r3, [r5, #2]
    8626:	78ea      	ldrb	r2, [r5, #3]
    8628:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    862c:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    8630:	e7e4      	b.n	85fc <gatt_find_info_rsp+0x7c>
			memcpy(u.u128.val, info.i128->uuid, 16);
    8632:	2210      	movs	r2, #16
    8634:	1ca9      	adds	r1, r5, #2
    8636:	f10d 0011 	add.w	r0, sp, #17
    863a:	f7f7 ffe5 	bl	608 <memcpy>
			break;
    863e:	e7dd      	b.n	85fc <gatt_find_info_rsp+0x7c>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    8640:	a804      	add	r0, sp, #16
    8642:	f7fa f95d 	bl	2900 <bt_uuid_cmp>
    8646:	2800      	cmp	r0, #0
    8648:	d0da      	beq.n	8600 <gatt_find_info_rsp+0x80>
    864a:	eba4 040a 	sub.w	r4, r4, sl
    864e:	b2a4      	uxth	r4, r4
    8650:	4445      	add	r5, r8
    8652:	e7bb      	b.n	85cc <gatt_find_info_rsp+0x4c>
    8654:	0001868d 	.word	0x0001868d
    8658:	00019a84 	.word	0x00019a84
    865c:	0001a398 	.word	0x0001a398
    8660:	00019a8b 	.word	0x00019a8b
    8664:	0001a46c 	.word	0x0001a46c

00008668 <bt_gatt_subscribe>:
	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params && params->notify,  "invalid parameters\n");
	__ASSERT(params->value, "invalid parameters\n");
	__ASSERT(params->ccc_handle, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    8668:	7b03      	ldrb	r3, [r0, #12]
    866a:	2b03      	cmp	r3, #3
{
    866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8670:	4607      	mov	r7, r0
    8672:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
    8674:	d141      	bne.n	86fa <bt_gatt_subscribe+0x92>
    8676:	4e25      	ldr	r6, [pc, #148]	; (870c <bt_gatt_subscribe+0xa4>)
    8678:	6834      	ldr	r4, [r6, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, tmp, node) {
    867a:	b104      	cbz	r4, 867e <bt_gatt_subscribe+0x16>
    867c:	3c2c      	subs	r4, #44	; 0x2c
    867e:	f04f 0800 	mov.w	r8, #0
    8682:	b99c      	cbnz	r4, 86ac <bt_gatt_subscribe+0x44>
			has_subscription = true;
		}
	}

	/* Skip write if already subscribed */
	if (!has_subscription) {
    8684:	f1b8 0f00 	cmp.w	r8, #0
    8688:	d02a      	beq.n	86e0 <bt_gatt_subscribe+0x78>
    868a:	2207      	movs	r2, #7
    868c:	f107 0148 	add.w	r1, r7, #72	; 0x48
    8690:	f105 0018 	add.w	r0, r5, #24
    8694:	f7f7 ffb8 	bl	608 <memcpy>
	if (!list->tail) {
    8698:	6870      	ldr	r0, [r6, #4]
	node->next = list->head;
    869a:	6832      	ldr	r2, [r6, #0]
    869c:	62ea      	str	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&subscriptions, &params->node);
    869e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
	list->head = node;
    86a2:	6033      	str	r3, [r6, #0]
	if (!list->tail) {
    86a4:	b330      	cbz	r0, 86f4 <bt_gatt_subscribe+0x8c>
	 * Add subscription before write complete as some implementation were
	 * reported to send notification before reply to CCC write.
	 */
	gatt_subscription_add(conn, params);

	return 0;
    86a6:	2000      	movs	r0, #0
    86a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tmp == params) {
    86ac:	42ac      	cmp	r4, r5
    86ae:	d028      	beq.n	8702 <bt_gatt_subscribe+0x9a>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    86b0:	f104 0118 	add.w	r1, r4, #24
    86b4:	4638      	mov	r0, r7
    86b6:	f7fd f86d 	bl	5794 <bt_conn_addr_le_cmp>
    86ba:	b948      	cbnz	r0, 86d0 <bt_gatt_subscribe+0x68>
    86bc:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    86be:	8cab      	ldrh	r3, [r5, #36]	; 0x24
    86c0:	429a      	cmp	r2, r3
    86c2:	d105      	bne.n	86d0 <bt_gatt_subscribe+0x68>
		    tmp->value_handle == params->value_handle &&
    86c4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    86c6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
			has_subscription = true;
    86c8:	429a      	cmp	r2, r3
    86ca:	bf28      	it	cs
    86cc:	f04f 0801 	movcs.w	r8, #1
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    86d0:	f114 0f2c 	cmn.w	r4, #44	; 0x2c
    86d4:	d0d6      	beq.n	8684 <bt_gatt_subscribe+0x1c>
	return node->next;
    86d6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, tmp, node) {
    86d8:	2c00      	cmp	r4, #0
    86da:	d0d3      	beq.n	8684 <bt_gatt_subscribe+0x1c>
    86dc:	3c2c      	subs	r4, #44	; 0x2c
    86de:	e7d0      	b.n	8682 <bt_gatt_subscribe+0x1a>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
    86e0:	462b      	mov	r3, r5
    86e2:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    86e4:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
    86e6:	4638      	mov	r0, r7
    86e8:	f7ff f92a 	bl	7940 <gatt_write_ccc.constprop.19>
		if (err) {
    86ec:	2800      	cmp	r0, #0
    86ee:	d0cc      	beq.n	868a <bt_gatt_subscribe+0x22>
    86f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		list->tail = list->head;
    86f4:	6073      	str	r3, [r6, #4]
    86f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    86fa:	f06f 0038 	mvn.w	r0, #56	; 0x38
    86fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -EALREADY;
    8702:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    8706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    870a:	bf00      	nop
    870c:	20000704 	.word	0x20000704

00008710 <bt_gatt_unsubscribe>:
	sys_snode_t *prev = NULL;

	__ASSERT(conn, "invalid parameters\n");
	__ASSERT(params, "invalid parameters\n");

	if (conn->state != BT_CONN_CONNECTED) {
    8710:	7b03      	ldrb	r3, [r0, #12]
    8712:	2b03      	cmp	r3, #3
{
    8714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8718:	4680      	mov	r8, r0
    871a:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
    871c:	d144      	bne.n	87a8 <bt_gatt_unsubscribe+0x98>
    871e:	4b2b      	ldr	r3, [pc, #172]	; (87cc <bt_gatt_unsubscribe+0xbc>)
    8720:	681c      	ldr	r4, [r3, #0]
		return -ENOTCONN;
	}

	/* Lookup existing subscriptions */
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    8722:	b1cc      	cbz	r4, 8758 <bt_gatt_unsubscribe+0x48>
    8724:	f1b4 052c 	subs.w	r5, r4, #44	; 0x2c
    8728:	d144      	bne.n	87b4 <bt_gatt_unsubscribe+0xa4>
    872a:	462c      	mov	r4, r5
    872c:	f04f 0b00 	mov.w	fp, #0
		/* Remove subscription */
		if (params == tmp) {
			found = true;
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    8730:	f8df a098 	ldr.w	sl, [pc, #152]	; 87cc <bt_gatt_unsubscribe+0xbc>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    8734:	465a      	mov	r2, fp
    8736:	465f      	mov	r7, fp
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    8738:	f106 092c 	add.w	r9, r6, #44	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    873c:	b975      	cbnz	r5, 875c <bt_gatt_unsubscribe+0x4c>
		    tmp->value_handle == params->value_handle) {
			has_subscription = true;
		}
	}

	if (!found) {
    873e:	2a00      	cmp	r2, #0
    8740:	d035      	beq.n	87ae <bt_gatt_unsubscribe+0x9e>
		return -EINVAL;
	}

	if (has_subscription) {
    8742:	b33f      	cbz	r7, 8794 <bt_gatt_unsubscribe+0x84>
		/* Notify with NULL data to complete unsubscribe */
		params->notify(conn, params, NULL, 0);
    8744:	6a34      	ldr	r4, [r6, #32]
    8746:	462b      	mov	r3, r5
    8748:	462a      	mov	r2, r5
    874a:	4631      	mov	r1, r6
    874c:	4640      	mov	r0, r8
    874e:	47a0      	blx	r4
		return 0;
    8750:	4628      	mov	r0, r5

	params->value = 0x0000;

	return gatt_write_ccc(conn, params->ccc_handle, params->value,
			      gatt_write_ccc_rsp, params);
}
    8752:	b003      	add	sp, #12
    8754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8758:	4625      	mov	r5, r4
    875a:	e7e7      	b.n	872c <bt_gatt_unsubscribe+0x1c>
		if (params == tmp) {
    875c:	42b5      	cmp	r5, r6
    875e:	d108      	bne.n	8772 <bt_gatt_unsubscribe+0x62>
			sys_slist_remove(&subscriptions, prev, &tmp->node);
    8760:	464a      	mov	r2, r9
    8762:	4659      	mov	r1, fp
    8764:	4650      	mov	r0, sl
    8766:	f7fe ff58 	bl	761a <sys_slist_remove>
			found = true;
    876a:	2201      	movs	r2, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    876c:	bb3c      	cbnz	r4, 87be <bt_gatt_unsubscribe+0xae>
    876e:	4623      	mov	r3, r4
    8770:	e028      	b.n	87c4 <bt_gatt_unsubscribe+0xb4>
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    8772:	f105 0118 	add.w	r1, r5, #24
    8776:	4640      	mov	r0, r8
    8778:	9201      	str	r2, [sp, #4]
    877a:	f7fd f80b 	bl	5794 <bt_conn_addr_le_cmp>
			prev = &tmp->node;
    877e:	f105 0b2c 	add.w	fp, r5, #44	; 0x2c
		if (!bt_conn_addr_le_cmp(conn, &tmp->_peer) &&
    8782:	9a01      	ldr	r2, [sp, #4]
    8784:	2800      	cmp	r0, #0
    8786:	d1f1      	bne.n	876c <bt_gatt_unsubscribe+0x5c>
    8788:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
    878a:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
			has_subscription = true;
    878c:	4299      	cmp	r1, r3
    878e:	bf08      	it	eq
    8790:	2701      	moveq	r7, #1
    8792:	e7eb      	b.n	876c <bt_gatt_unsubscribe+0x5c>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    8794:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
	params->value = 0x0000;
    8796:	8537      	strh	r7, [r6, #40]	; 0x28
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    8798:	4633      	mov	r3, r6
    879a:	463a      	mov	r2, r7
    879c:	4640      	mov	r0, r8
}
    879e:	b003      	add	sp, #12
    87a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
    87a4:	f7ff b8cc 	b.w	7940 <gatt_write_ccc.constprop.19>
		return -ENOTCONN;
    87a8:	f06f 0038 	mvn.w	r0, #56	; 0x38
    87ac:	e7d1      	b.n	8752 <bt_gatt_unsubscribe+0x42>
		return -EINVAL;
    87ae:	f06f 0015 	mvn.w	r0, #21
    87b2:	e7ce      	b.n	8752 <bt_gatt_unsubscribe+0x42>
	return node->next;
    87b4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, tmp, next, node) {
    87b6:	2c00      	cmp	r4, #0
    87b8:	d0b8      	beq.n	872c <bt_gatt_unsubscribe+0x1c>
    87ba:	3c2c      	subs	r4, #44	; 0x2c
    87bc:	e7b6      	b.n	872c <bt_gatt_unsubscribe+0x1c>
    87be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    87c0:	b103      	cbz	r3, 87c4 <bt_gatt_unsubscribe+0xb4>
    87c2:	3b2c      	subs	r3, #44	; 0x2c
    87c4:	4625      	mov	r5, r4
    87c6:	461c      	mov	r4, r3
    87c8:	e7b8      	b.n	873c <bt_gatt_unsubscribe+0x2c>
    87ca:	bf00      	nop
    87cc:	20000704 	.word	0x20000704

000087d0 <bt_gatt_notification>:
{
    87d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    87d4:	4699      	mov	r9, r3
    87d6:	4b17      	ldr	r3, [pc, #92]	; (8834 <bt_gatt_notification+0x64>)
    87d8:	681b      	ldr	r3, [r3, #0]
    87da:	4605      	mov	r5, r0
    87dc:	460e      	mov	r6, r1
    87de:	4690      	mov	r8, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    87e0:	b333      	cbz	r3, 8830 <bt_gatt_notification+0x60>
    87e2:	f1b3 0a2c 	subs.w	sl, r3, #44	; 0x2c
    87e6:	d101      	bne.n	87ec <bt_gatt_notification+0x1c>
    87e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87ec:	681c      	ldr	r4, [r3, #0]
    87ee:	b104      	cbz	r4, 87f2 <bt_gatt_notification+0x22>
    87f0:	3c2c      	subs	r4, #44	; 0x2c
		if (bt_conn_addr_le_cmp(conn, &params->_peer) ||
    87f2:	f10a 0118 	add.w	r1, sl, #24
    87f6:	4628      	mov	r0, r5
    87f8:	f7fc ffcc 	bl	5794 <bt_conn_addr_le_cmp>
    87fc:	b978      	cbnz	r0, 881e <bt_gatt_notification+0x4e>
    87fe:	f8ba 3024 	ldrh.w	r3, [sl, #36]	; 0x24
    8802:	42b3      	cmp	r3, r6
    8804:	d10b      	bne.n	881e <bt_gatt_notification+0x4e>
		if (params->notify(conn, params, data, length) ==
    8806:	f8da 7020 	ldr.w	r7, [sl, #32]
    880a:	464b      	mov	r3, r9
    880c:	4642      	mov	r2, r8
    880e:	4651      	mov	r1, sl
    8810:	4628      	mov	r0, r5
    8812:	47b8      	blx	r7
    8814:	b918      	cbnz	r0, 881e <bt_gatt_notification+0x4e>
			bt_gatt_unsubscribe(conn, params);
    8816:	4651      	mov	r1, sl
    8818:	4628      	mov	r0, r5
    881a:	f7ff ff79 	bl	8710 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    881e:	b90c      	cbnz	r4, 8824 <bt_gatt_notification+0x54>
    8820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8824:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8826:	b103      	cbz	r3, 882a <bt_gatt_notification+0x5a>
    8828:	3b2c      	subs	r3, #44	; 0x2c
    882a:	46a2      	mov	sl, r4
    882c:	461c      	mov	r4, r3
    882e:	e7e0      	b.n	87f2 <bt_gatt_notification+0x22>
    8830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8834:	20000704 	.word	0x20000704

00008838 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    8838:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    883a:	4a0e      	ldr	r2, [pc, #56]	; (8874 <bt_gatt_connected+0x3c>)
    883c:	4603      	mov	r3, r0
{
    883e:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    8840:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8844:	2001      	movs	r0, #1
    8846:	f7ff faef 	bl	7e28 <bt_gatt_foreach_attr>
    884a:	4b0b      	ldr	r3, [pc, #44]	; (8878 <bt_gatt_connected+0x40>)
    884c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&subscriptions, params, node) {
    884e:	b10c      	cbz	r4, 8854 <bt_gatt_connected+0x1c>
    8850:	3c2c      	subs	r4, #44	; 0x2c
    8852:	b904      	cbnz	r4, 8856 <bt_gatt_connected+0x1e>
    8854:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    8856:	f104 0118 	add.w	r1, r4, #24
    885a:	4628      	mov	r0, r5
    885c:	f7fc ff9a 	bl	5794 <bt_conn_addr_le_cmp>
    8860:	b928      	cbnz	r0, 886e <bt_gatt_connected+0x36>
		gatt_write_ccc(conn, params->ccc_handle, params->value,
    8862:	4623      	mov	r3, r4
    8864:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    8866:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    8868:	4628      	mov	r0, r5
    886a:	f7ff f869 	bl	7940 <gatt_write_ccc.constprop.19>
    886e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    8870:	e7ed      	b.n	884e <bt_gatt_connected+0x16>
    8872:	bf00      	nop
    8874:	00007a7d 	.word	0x00007a7d
    8878:	20000704 	.word	0x20000704

0000887c <bt_gatt_disconnected>:
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    887c:	4603      	mov	r3, r0
{
    887e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8882:	4a21      	ldr	r2, [pc, #132]	; (8908 <bt_gatt_disconnected+0x8c>)
{
    8884:	4607      	mov	r7, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    8886:	f64f 71ff 	movw	r1, #65535	; 0xffff
    888a:	2001      	movs	r0, #1
    888c:	f7ff facc 	bl	7e28 <bt_gatt_foreach_attr>
    8890:	4b1e      	ldr	r3, [pc, #120]	; (890c <bt_gatt_disconnected+0x90>)
    8892:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    8894:	b3b3      	cbz	r3, 8904 <bt_gatt_disconnected+0x88>
    8896:	f1b3 062c 	subs.w	r6, r3, #44	; 0x2c
    889a:	d11b      	bne.n	88d4 <bt_gatt_disconnected+0x58>
    889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    88a0:	4640      	mov	r0, r8
    88a2:	f7fc f9eb 	bl	4c7c <bt_addr_le_is_bonded>
    88a6:	b118      	cbz	r0, 88b0 <bt_gatt_disconnected+0x34>
    88a8:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
    88ac:	07db      	lsls	r3, r3, #31
    88ae:	d509      	bpl.n	88c4 <bt_gatt_disconnected+0x48>
			params->value = 0;
    88b0:	f8a6 9028 	strh.w	r9, [r6, #40]	; 0x28
			gatt_subscription_remove(conn, prev, params);
    88b4:	4632      	mov	r2, r6
    88b6:	4629      	mov	r1, r5
    88b8:	4638      	mov	r0, r7
    88ba:	f7fe fee3 	bl	7684 <gatt_subscription_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    88be:	b9dc      	cbnz	r4, 88f8 <bt_gatt_disconnected+0x7c>
    88c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (params->_peer.type == BT_ADDR_LE_PUBLIC) {
    88c4:	7e33      	ldrb	r3, [r6, #24]
    88c6:	b1a3      	cbz	r3, 88f2 <bt_gatt_disconnected+0x76>
    88c8:	2207      	movs	r2, #7
    88ca:	4641      	mov	r1, r8
    88cc:	4650      	mov	r0, sl
    88ce:	f7f7 fe9b 	bl	608 <memcpy>
    88d2:	e00e      	b.n	88f2 <bt_gatt_disconnected+0x76>
    88d4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    88d6:	b104      	cbz	r4, 88da <bt_gatt_disconnected+0x5e>
    88d8:	3c2c      	subs	r4, #44	; 0x2c
    88da:	2500      	movs	r5, #0
		if (!bt_addr_le_is_bonded(&conn->le.dst) ||
    88dc:	f107 0848 	add.w	r8, r7, #72	; 0x48
			params->value = 0;
    88e0:	46a9      	mov	r9, r5
		if (bt_conn_addr_le_cmp(conn, &params->_peer)) {
    88e2:	f106 0a18 	add.w	sl, r6, #24
    88e6:	4651      	mov	r1, sl
    88e8:	4638      	mov	r0, r7
    88ea:	f7fc ff53 	bl	5794 <bt_conn_addr_le_cmp>
    88ee:	2800      	cmp	r0, #0
    88f0:	d0d6      	beq.n	88a0 <bt_gatt_disconnected+0x24>
			prev = &params->node;
    88f2:	f106 052c 	add.w	r5, r6, #44	; 0x2c
    88f6:	e7e2      	b.n	88be <bt_gatt_disconnected+0x42>
    88f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&subscriptions, params, tmp, node) {
    88fa:	b103      	cbz	r3, 88fe <bt_gatt_disconnected+0x82>
    88fc:	3b2c      	subs	r3, #44	; 0x2c
    88fe:	4626      	mov	r6, r4
    8900:	461c      	mov	r4, r3
    8902:	e7ee      	b.n	88e2 <bt_gatt_disconnected+0x66>
    8904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8908:	00007b65 	.word	0x00007b65
    890c:	20000704 	.word	0x20000704

00008910 <sys_memcpy_swap>:
{
	__ASSERT(((src < dst && (src + length) <= dst) ||
		  (src > dst && (dst + length) <= src)),
		 "Source and destination buffers must not overlap");

	src += length - 1;
    8910:	1e53      	subs	r3, r2, #1
    8912:	4419      	add	r1, r3
    8914:	3801      	subs	r0, #1
    8916:	1a52      	subs	r2, r2, r1

	for (; length > 0; length--) {
    8918:	42d1      	cmn	r1, r2
    891a:	d100      	bne.n	891e <sys_memcpy_swap+0xe>
		*((u8_t *)dst++) = *((u8_t *)src--);
	}
}
    891c:	4770      	bx	lr
		*((u8_t *)dst++) = *((u8_t *)src--);
    891e:	f811 3901 	ldrb.w	r3, [r1], #-1
    8922:	f800 3f01 	strb.w	r3, [r0, #1]!
    8926:	e7f7      	b.n	8918 <sys_memcpy_swap+0x8>

00008928 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    8928:	4b10      	ldr	r3, [pc, #64]	; (896c <get_io_capa+0x44>)
    892a:	681b      	ldr	r3, [r3, #0]
    892c:	b1ab      	cbz	r3, 895a <get_io_capa+0x32>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    892e:	681a      	ldr	r2, [r3, #0]
    8930:	b132      	cbz	r2, 8940 <get_io_capa+0x18>
    8932:	6859      	ldr	r1, [r3, #4]
    8934:	b121      	cbz	r1, 8940 <get_io_capa+0x18>
    8936:	6899      	ldr	r1, [r3, #8]
    8938:	b989      	cbnz	r1, 895e <get_io_capa+0x36>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    893a:	490d      	ldr	r1, [pc, #52]	; (8970 <get_io_capa+0x48>)
    893c:	7809      	ldrb	r1, [r1, #0]
    893e:	b171      	cbz	r1, 895e <get_io_capa+0x36>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    8940:	490b      	ldr	r1, [pc, #44]	; (8970 <get_io_capa+0x48>)
    8942:	7809      	ldrb	r1, [r1, #0]
    8944:	b111      	cbz	r1, 894c <get_io_capa+0x24>
    8946:	b10a      	cbz	r2, 894c <get_io_capa+0x24>
    8948:	6899      	ldr	r1, [r3, #8]
    894a:	b951      	cbnz	r1, 8962 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    894c:	685b      	ldr	r3, [r3, #4]
    894e:	b953      	cbnz	r3, 8966 <get_io_capa+0x3e>
		return BT_SMP_IO_KEYBOARD_ONLY;
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    8950:	2a00      	cmp	r2, #0
    8952:	bf0c      	ite	eq
    8954:	2003      	moveq	r0, #3
    8956:	2000      	movne	r0, #0
    8958:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    895a:	2003      	movs	r0, #3
    895c:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    895e:	2004      	movs	r0, #4
    8960:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    8962:	2001      	movs	r0, #1
    8964:	4770      	bx	lr
		return BT_SMP_IO_KEYBOARD_ONLY;
    8966:	2002      	movs	r0, #2
}
    8968:	4770      	bx	lr
    896a:	bf00      	nop
    896c:	20004c78 	.word	0x20004c78
    8970:	200008e9 	.word	0x200008e9

00008974 <smp_signing_info>:
}
#else
static u8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
{
	return BT_SMP_ERR_CMD_NOTSUPP;
}
    8974:	2007      	movs	r0, #7
    8976:	4770      	bx	lr

00008978 <bt_smp_accept>:

	return true;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    897a:	4a0b      	ldr	r2, [pc, #44]	; (89a8 <bt_smp_accept+0x30>)
    897c:	6813      	ldr	r3, [r2, #0]
    897e:	b933      	cbnz	r3, 898e <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.chan.ops = &ops;
    8980:	480a      	ldr	r0, [pc, #40]	; (89ac <bt_smp_accept+0x34>)
    8982:	6050      	str	r0, [r2, #4]

		*chan = &smp->chan.chan;
    8984:	600a      	str	r2, [r1, #0]

		return 0;
    8986:	4618      	mov	r0, r3
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    8988:	b005      	add	sp, #20
    898a:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    898e:	4b08      	ldr	r3, [pc, #32]	; (89b0 <bt_smp_accept+0x38>)
    8990:	9302      	str	r3, [sp, #8]
    8992:	9001      	str	r0, [sp, #4]
    8994:	9300      	str	r3, [sp, #0]
    8996:	4a07      	ldr	r2, [pc, #28]	; (89b4 <bt_smp_accept+0x3c>)
    8998:	4b07      	ldr	r3, [pc, #28]	; (89b8 <bt_smp_accept+0x40>)
    899a:	4908      	ldr	r1, [pc, #32]	; (89bc <bt_smp_accept+0x44>)
    899c:	4808      	ldr	r0, [pc, #32]	; (89c0 <bt_smp_accept+0x48>)
    899e:	f7f8 fe9f 	bl	16e0 <printk>
	return -ENOMEM;
    89a2:	f06f 000b 	mvn.w	r0, #11
    89a6:	e7ef      	b.n	8988 <bt_smp_accept+0x10>
    89a8:	2000070c 	.word	0x2000070c
    89ac:	200088d8 	.word	0x200088d8
    89b0:	0001868d 	.word	0x0001868d
    89b4:	00019a84 	.word	0x00019a84
    89b8:	0001a6a0 	.word	0x0001a6a0
    89bc:	00019a8b 	.word	0x00019a8b
    89c0:	0001a6ae 	.word	0x0001a6ae

000089c4 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    89c4:	094b      	lsrs	r3, r1, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    89c6:	f3bf 8f5b 	dmb	ish
    89ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    89ce:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    89d2:	f001 011f 	and.w	r1, r1, #31
    89d6:	4108      	asrs	r0, r1
}
    89d8:	f000 0001 	and.w	r0, r0, #1
    89dc:	4770      	bx	lr

000089de <atomic_set_bit>:
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    89de:	094b      	lsrs	r3, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    89e0:	2201      	movs	r2, #1
    89e2:	f001 011f 	and.w	r1, r1, #31
    89e6:	fa02 f101 	lsl.w	r1, r2, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    89ea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    89ee:	f3bf 8f5b 	dmb	ish
    89f2:	e850 3f00 	ldrex	r3, [r0]
    89f6:	430b      	orrs	r3, r1
    89f8:	e840 3200 	strex	r2, r3, [r0]
    89fc:	2a00      	cmp	r2, #0
    89fe:	d1f8      	bne.n	89f2 <atomic_set_bit+0x14>
    8a00:	f3bf 8f5b 	dmb	ish
    8a04:	4770      	bx	lr

00008a06 <bt_smp_aes_cmac>:
{
    8a06:	b570      	push	{r4, r5, r6, lr}
    8a08:	b0c2      	sub	sp, #264	; 0x108
    8a0a:	460d      	mov	r5, r1
    8a0c:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    8a0e:	4601      	mov	r1, r0
    8a10:	aa16      	add	r2, sp, #88	; 0x58
    8a12:	4668      	mov	r0, sp
{
    8a14:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    8a16:	f7f9 f85b 	bl	1ad0 <tc_cmac_setup>
    8a1a:	b918      	cbnz	r0, 8a24 <bt_smp_aes_cmac+0x1e>
		return -EIO;
    8a1c:	f06f 0004 	mvn.w	r0, #4
}
    8a20:	b042      	add	sp, #264	; 0x108
    8a22:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    8a24:	4632      	mov	r2, r6
    8a26:	4629      	mov	r1, r5
    8a28:	4668      	mov	r0, sp
    8a2a:	f7f9 f87d 	bl	1b28 <tc_cmac_update>
    8a2e:	2800      	cmp	r0, #0
    8a30:	d0f4      	beq.n	8a1c <bt_smp_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    8a32:	4669      	mov	r1, sp
    8a34:	4620      	mov	r0, r4
    8a36:	f7f9 f8db 	bl	1bf0 <tc_cmac_final>
    8a3a:	2800      	cmp	r0, #0
    8a3c:	d0ee      	beq.n	8a1c <bt_smp_aes_cmac+0x16>
	return 0;
    8a3e:	2000      	movs	r0, #0
    8a40:	e7ee      	b.n	8a20 <bt_smp_aes_cmac+0x1a>

00008a42 <bt_smp_disconnected>:
{
    8a42:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
    8a44:	6803      	ldr	r3, [r0, #0]
    8a46:	6f1c      	ldr	r4, [r3, #112]	; 0x70
{
    8a48:	4605      	mov	r5, r0
	k_delayed_work_cancel(&smp->work);
    8a4a:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    8a4e:	f00f f957 	bl	17d00 <k_delayed_work_cancel>
	if (keys) {
    8a52:	b124      	cbz	r4, 8a5e <bt_smp_disconnected+0x1c>
		if (!keys->keys ||
    8a54:	89a3      	ldrh	r3, [r4, #12]
    8a56:	b953      	cbnz	r3, 8a6e <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    8a58:	4620      	mov	r0, r4
    8a5a:	f001 fc01 	bl	a260 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    8a5e:	4628      	mov	r0, r5
    8a60:	f44f 72ce 	mov.w	r2, #412	; 0x19c
    8a64:	2100      	movs	r1, #0
}
    8a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(smp, 0, sizeof(*smp));
    8a6a:	f7f7 bdf9 	b.w	660 <memset>
		    atomic_test_bit(keys->flags, BT_KEYS_DEBUG)) {
    8a6e:	2101      	movs	r1, #1
    8a70:	f104 0008 	add.w	r0, r4, #8
    8a74:	f7ff ffa6 	bl	89c4 <atomic_test_bit>
		if (!keys->keys ||
    8a78:	2800      	cmp	r0, #0
    8a7a:	d1ed      	bne.n	8a58 <bt_smp_disconnected+0x16>
    8a7c:	e7ef      	b.n	8a5e <bt_smp_disconnected+0x1c>
	...

00008a80 <smp_ident_info>:
{
    8a80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8a82:	4605      	mov	r5, r0
    8a84:	460a      	mov	r2, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    8a86:	3098      	adds	r0, #152	; 0x98
    8a88:	210a      	movs	r1, #10
    8a8a:	f7ff ff9b 	bl	89c4 <atomic_test_bit>
    8a8e:	b1e0      	cbz	r0, 8aca <smp_ident_info+0x4a>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    8a90:	682c      	ldr	r4, [r5, #0]
		struct bt_smp_ident_info *req = (void *)buf->data;
    8a92:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    8a94:	3448      	adds	r4, #72	; 0x48
    8a96:	4621      	mov	r1, r4
    8a98:	2002      	movs	r0, #2
    8a9a:	f001 fc27 	bl	a2ec <bt_keys_get_type>
		if (!keys) {
    8a9e:	b978      	cbnz	r0, 8ac0 <smp_ident_info+0x40>
			BT_ERR("Unable to get keys for %s",
    8aa0:	4620      	mov	r0, r4
    8aa2:	f7f9 fe5b 	bl	275c <bt_addr_le_str>
    8aa6:	4b0c      	ldr	r3, [pc, #48]	; (8ad8 <smp_ident_info+0x58>)
    8aa8:	9302      	str	r3, [sp, #8]
    8aaa:	9001      	str	r0, [sp, #4]
    8aac:	9300      	str	r3, [sp, #0]
    8aae:	4a0b      	ldr	r2, [pc, #44]	; (8adc <smp_ident_info+0x5c>)
    8ab0:	4b0b      	ldr	r3, [pc, #44]	; (8ae0 <smp_ident_info+0x60>)
    8ab2:	490c      	ldr	r1, [pc, #48]	; (8ae4 <smp_ident_info+0x64>)
    8ab4:	480c      	ldr	r0, [pc, #48]	; (8ae8 <smp_ident_info+0x68>)
    8ab6:	f7f8 fe13 	bl	16e0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    8aba:	2008      	movs	r0, #8
}
    8abc:	b004      	add	sp, #16
    8abe:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    8ac0:	2210      	movs	r2, #16
    8ac2:	4631      	mov	r1, r6
    8ac4:	3030      	adds	r0, #48	; 0x30
    8ac6:	f7f7 fd9f 	bl	608 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    8aca:	f105 0094 	add.w	r0, r5, #148	; 0x94
    8ace:	2109      	movs	r1, #9
    8ad0:	f7ff ff85 	bl	89de <atomic_set_bit>
	return 0;
    8ad4:	2000      	movs	r0, #0
    8ad6:	e7f1      	b.n	8abc <smp_ident_info+0x3c>
    8ad8:	0001868d 	.word	0x0001868d
    8adc:	00019a84 	.word	0x00019a84
    8ae0:	0001a628 	.word	0x0001a628
    8ae4:	00019a8b 	.word	0x00019a8b
    8ae8:	0001a9aa 	.word	0x0001a9aa

00008aec <smp_encrypt_info>:
{
    8aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8aee:	4605      	mov	r5, r0
    8af0:	460a      	mov	r2, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    8af2:	3098      	adds	r0, #152	; 0x98
    8af4:	210a      	movs	r1, #10
    8af6:	f7ff ff65 	bl	89c4 <atomic_test_bit>
    8afa:	b1e0      	cbz	r0, 8b36 <smp_encrypt_info+0x4a>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    8afc:	682c      	ldr	r4, [r5, #0]
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    8afe:	6896      	ldr	r6, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    8b00:	3448      	adds	r4, #72	; 0x48
    8b02:	4621      	mov	r1, r4
    8b04:	2004      	movs	r0, #4
    8b06:	f001 fbf1 	bl	a2ec <bt_keys_get_type>
		if (!keys) {
    8b0a:	b978      	cbnz	r0, 8b2c <smp_encrypt_info+0x40>
			BT_ERR("Unable to get keys for %s",
    8b0c:	4620      	mov	r0, r4
    8b0e:	f7f9 fe25 	bl	275c <bt_addr_le_str>
    8b12:	4b0c      	ldr	r3, [pc, #48]	; (8b44 <smp_encrypt_info+0x58>)
    8b14:	9302      	str	r3, [sp, #8]
    8b16:	9001      	str	r0, [sp, #4]
    8b18:	9300      	str	r3, [sp, #0]
    8b1a:	4a0b      	ldr	r2, [pc, #44]	; (8b48 <smp_encrypt_info+0x5c>)
    8b1c:	4b0b      	ldr	r3, [pc, #44]	; (8b4c <smp_encrypt_info+0x60>)
    8b1e:	490c      	ldr	r1, [pc, #48]	; (8b50 <smp_encrypt_info+0x64>)
    8b20:	480c      	ldr	r0, [pc, #48]	; (8b54 <smp_encrypt_info+0x68>)
    8b22:	f7f8 fddd 	bl	16e0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    8b26:	2008      	movs	r0, #8
}
    8b28:	b004      	add	sp, #16
    8b2a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    8b2c:	2210      	movs	r2, #16
    8b2e:	4631      	mov	r1, r6
    8b30:	301a      	adds	r0, #26
    8b32:	f7f7 fd69 	bl	608 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    8b36:	f105 0094 	add.w	r0, r5, #148	; 0x94
    8b3a:	2107      	movs	r1, #7
    8b3c:	f7ff ff4f 	bl	89de <atomic_set_bit>
	return 0;
    8b40:	2000      	movs	r0, #0
    8b42:	e7f1      	b.n	8b28 <smp_encrypt_info+0x3c>
    8b44:	0001868d 	.word	0x0001868d
    8b48:	00019a84 	.word	0x00019a84
    8b4c:	0001a5e6 	.word	0x0001a5e6
    8b50:	00019a8b 	.word	0x00019a8b
    8b54:	0001a9aa 	.word	0x0001a9aa

00008b58 <smp_chan_get>:
{
    8b58:	b513      	push	{r0, r1, r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    8b5a:	2106      	movs	r1, #6
    8b5c:	f7fd faf2 	bl	6144 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8b60:	4604      	mov	r4, r0
    8b62:	b940      	cbnz	r0, 8b76 <smp_chan_get+0x1e>
		BT_ERR("Unable to find SMP channel");
    8b64:	4b05      	ldr	r3, [pc, #20]	; (8b7c <smp_chan_get+0x24>)
    8b66:	9301      	str	r3, [sp, #4]
    8b68:	9300      	str	r3, [sp, #0]
    8b6a:	4a05      	ldr	r2, [pc, #20]	; (8b80 <smp_chan_get+0x28>)
    8b6c:	4b05      	ldr	r3, [pc, #20]	; (8b84 <smp_chan_get+0x2c>)
    8b6e:	4906      	ldr	r1, [pc, #24]	; (8b88 <smp_chan_get+0x30>)
    8b70:	4806      	ldr	r0, [pc, #24]	; (8b8c <smp_chan_get+0x34>)
    8b72:	f7f8 fdb5 	bl	16e0 <printk>
}
    8b76:	4620      	mov	r0, r4
    8b78:	b002      	add	sp, #8
    8b7a:	bd10      	pop	{r4, pc}
    8b7c:	0001868d 	.word	0x0001868d
    8b80:	00019a84 	.word	0x00019a84
    8b84:	0001a608 	.word	0x0001a608
    8b88:	00019a8b 	.word	0x00019a8b
    8b8c:	0001a954 	.word	0x0001a954

00008b90 <smp_create_pdu.isra.2>:
	buf = bt_l2cap_create_pdu(NULL, 0);
    8b90:	2100      	movs	r1, #0
static struct net_buf *smp_create_pdu(struct bt_conn *conn, u8_t op,
    8b92:	b538      	push	{r3, r4, r5, lr}
    8b94:	4605      	mov	r5, r0
	buf = bt_l2cap_create_pdu(NULL, 0);
    8b96:	4608      	mov	r0, r1
    8b98:	f7fd f9d6 	bl	5f48 <bt_l2cap_create_pdu>
	hdr = net_buf_add(buf, sizeof(*hdr));
    8b9c:	2101      	movs	r1, #1
	buf = bt_l2cap_create_pdu(NULL, 0);
    8b9e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8ba0:	3008      	adds	r0, #8
    8ba2:	f00e f8ed 	bl	16d80 <net_buf_simple_add>
	hdr->code = op;
    8ba6:	7005      	strb	r5, [r0, #0]
}
    8ba8:	4620      	mov	r0, r4
    8baa:	bd38      	pop	{r3, r4, r5, pc}

00008bac <sys_mem_swap.constprop.12>:
 * Where n is an index and 'end' the last index of buf.
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
    8bac:	b510      	push	{r4, lr}
    8bae:	1e43      	subs	r3, r0, #1
    8bb0:	f100 0210 	add.w	r2, r0, #16
    8bb4:	3007      	adds	r0, #7
	size_t i;

	for (i = 0; i < (length/2); i++) {
		u8_t tmp = ((u8_t *)buf)[i];

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    8bb6:	f812 4c01 	ldrb.w	r4, [r2, #-1]
		u8_t tmp = ((u8_t *)buf)[i];
    8bba:	7859      	ldrb	r1, [r3, #1]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    8bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
	for (i = 0; i < (length/2); i++) {
    8bc0:	4283      	cmp	r3, r0
		((u8_t *)buf)[length - 1 - i] = tmp;
    8bc2:	f802 1d01 	strb.w	r1, [r2, #-1]!
	for (i = 0; i < (length/2); i++) {
    8bc6:	d1f6      	bne.n	8bb6 <sys_mem_swap.constprop.12+0xa>
	}
}
    8bc8:	bd10      	pop	{r4, pc}

00008bca <smp_f6>:
{
    8bca:	b570      	push	{r4, r5, r6, lr}
    8bcc:	b096      	sub	sp, #88	; 0x58
    8bce:	4605      	mov	r5, r0
    8bd0:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
    8bd2:	a805      	add	r0, sp, #20
    8bd4:	2210      	movs	r2, #16
{
    8bd6:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
    8bd8:	f7ff fe9a 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
    8bdc:	2210      	movs	r2, #16
    8bde:	4631      	mov	r1, r6
    8be0:	a809      	add	r0, sp, #36	; 0x24
    8be2:	f7ff fe95 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
    8be6:	4621      	mov	r1, r4
    8be8:	2210      	movs	r2, #16
    8bea:	a80d      	add	r0, sp, #52	; 0x34
    8bec:	f7ff fe90 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
    8bf0:	2203      	movs	r2, #3
    8bf2:	991a      	ldr	r1, [sp, #104]	; 0x68
    8bf4:	a811      	add	r0, sp, #68	; 0x44
    8bf6:	f7ff fe8b 	bl	8910 <sys_memcpy_swap>
	m[51] = a1->type;
    8bfa:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    8bfc:	f814 3b01 	ldrb.w	r3, [r4], #1
    8c00:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
    8c04:	4621      	mov	r1, r4
    8c06:	2206      	movs	r2, #6
    8c08:	a812      	add	r0, sp, #72	; 0x48
    8c0a:	f7f7 fcfd 	bl	608 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
    8c0e:	4621      	mov	r1, r4
    8c10:	2206      	movs	r2, #6
    8c12:	a812      	add	r0, sp, #72	; 0x48
    8c14:	f7ff fe7c 	bl	8910 <sys_memcpy_swap>
	m[58] = a2->type;
    8c18:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    8c1a:	f814 3b01 	ldrb.w	r3, [r4], #1
    8c1e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
    8c22:	4621      	mov	r1, r4
    8c24:	2206      	movs	r2, #6
    8c26:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    8c2a:	f7f7 fced 	bl	608 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
    8c2e:	4621      	mov	r1, r4
    8c30:	2206      	movs	r2, #6
    8c32:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    8c36:	f7ff fe6b 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
    8c3a:	2210      	movs	r2, #16
    8c3c:	4629      	mov	r1, r5
    8c3e:	a801      	add	r0, sp, #4
    8c40:	f7ff fe66 	bl	8910 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    8c44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8c46:	2241      	movs	r2, #65	; 0x41
    8c48:	a905      	add	r1, sp, #20
    8c4a:	a801      	add	r0, sp, #4
    8c4c:	f7ff fedb 	bl	8a06 <bt_smp_aes_cmac>
	if (err) {
    8c50:	4604      	mov	r4, r0
    8c52:	b910      	cbnz	r0, 8c5a <smp_f6+0x90>
	sys_mem_swap(check, 16);
    8c54:	981d      	ldr	r0, [sp, #116]	; 0x74
    8c56:	f7ff ffa9 	bl	8bac <sys_mem_swap.constprop.12>
}
    8c5a:	4620      	mov	r0, r4
    8c5c:	b016      	add	sp, #88	; 0x58
    8c5e:	bd70      	pop	{r4, r5, r6, pc}

00008c60 <smp_dhkey_check>:
{
    8c60:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    8c62:	6803      	ldr	r3, [r0, #0]
    8c64:	78dd      	ldrb	r5, [r3, #3]
{
    8c66:	b08d      	sub	sp, #52	; 0x34
    8c68:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8c6a:	2d00      	cmp	r5, #0
    8c6c:	d14d      	bne.n	8d0a <smp_dhkey_check+0xaa>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    8c6e:	688f      	ldr	r7, [r1, #8]
		memset(r, 0, sizeof(r));
    8c70:	2210      	movs	r2, #16
    8c72:	4629      	mov	r1, r5
    8c74:	a808      	add	r0, sp, #32
    8c76:	f7f7 fcf3 	bl	660 <memset>
		switch (smp->method) {
    8c7a:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    8c7e:	2b03      	cmp	r3, #3
    8c80:	d81e      	bhi.n	8cc0 <smp_dhkey_check+0x60>
    8c82:	e8df f003 	tbb	[pc, r3]
    8c86:	0208      	.short	0x0208
    8c88:	0802      	.short	0x0802
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    8c8a:	2204      	movs	r2, #4
    8c8c:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    8c90:	a808      	add	r0, sp, #32
    8c92:	f7f7 fcb9 	bl	608 <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
    8c96:	4622      	mov	r2, r4
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    8c98:	ae04      	add	r6, sp, #16
			   &smp->chan.chan.conn->le.resp_addr,
    8c9a:	f852 3bbb 	ldr.w	r3, [r2], #187
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    8c9e:	9603      	str	r6, [sp, #12]
			   &smp->chan.chan.conn->le.init_addr, e)) {
    8ca0:	f103 014f 	add.w	r1, r3, #79	; 0x4f
			   &smp->chan.chan.conn->le.resp_addr,
    8ca4:	3356      	adds	r3, #86	; 0x56
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    8ca6:	9301      	str	r3, [sp, #4]
    8ca8:	f104 03a5 	add.w	r3, r4, #165	; 0xa5
    8cac:	9102      	str	r1, [sp, #8]
    8cae:	9300      	str	r3, [sp, #0]
    8cb0:	f104 01cb 	add.w	r1, r4, #203	; 0xcb
    8cb4:	ab08      	add	r3, sp, #32
    8cb6:	f204 105b 	addw	r0, r4, #347	; 0x15b
    8cba:	f7ff ff86 	bl	8bca <smp_f6>
    8cbe:	b108      	cbz	r0, 8cc4 <smp_dhkey_check+0x64>
			return BT_SMP_ERR_UNSPECIFIED;
    8cc0:	2508      	movs	r5, #8
    8cc2:	e01d      	b.n	8d00 <smp_dhkey_check+0xa0>
		if (memcmp(e, req->e, 16)) {
    8cc4:	2210      	movs	r2, #16
    8cc6:	4639      	mov	r1, r7
    8cc8:	4630      	mov	r0, r6
    8cca:	f7f7 fc88 	bl	5de <memcmp>
    8cce:	b9d0      	cbnz	r0, 8d06 <smp_dhkey_check+0xa6>
	return min(req->max_key_size, rsp->max_key_size);
    8cd0:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    8cd4:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    8cd8:	429a      	cmp	r2, r3
    8cda:	bf94      	ite	ls
    8cdc:	9202      	strls	r2, [sp, #8]
    8cde:	9302      	strhi	r3, [sp, #8]
						smp->tk, enc_size) < 0) {
    8ce0:	f104 03db 	add.w	r3, r4, #219	; 0xdb
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    8ce4:	e88d 0009 	stmia.w	sp, {r0, r3}
    8ce8:	2200      	movs	r2, #0
    8cea:	2300      	movs	r3, #0
    8cec:	6820      	ldr	r0, [r4, #0]
    8cee:	f7fc f993 	bl	5018 <bt_conn_le_start_encryption>
    8cf2:	2800      	cmp	r0, #0
    8cf4:	dbe4      	blt.n	8cc0 <smp_dhkey_check+0x60>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    8cf6:	2101      	movs	r1, #1
    8cf8:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8cfc:	f7ff fe6f 	bl	89de <atomic_set_bit>
}
    8d00:	4628      	mov	r0, r5
    8d02:	b00d      	add	sp, #52	; 0x34
    8d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    8d06:	250b      	movs	r5, #11
    8d08:	e7fa      	b.n	8d00 <smp_dhkey_check+0xa0>
	return 0;
    8d0a:	2500      	movs	r5, #0
    8d0c:	e7f8      	b.n	8d00 <smp_dhkey_check+0xa0>

00008d0e <smp_f4>:
{
    8d0e:	b570      	push	{r4, r5, r6, lr}
    8d10:	b096      	sub	sp, #88	; 0x58
    8d12:	4614      	mov	r4, r2
    8d14:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
    8d16:	2220      	movs	r2, #32
    8d18:	4601      	mov	r1, r0
    8d1a:	a805      	add	r0, sp, #20
{
    8d1c:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    8d1e:	f7ff fdf7 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    8d22:	2220      	movs	r2, #32
    8d24:	4631      	mov	r1, r6
    8d26:	a80d      	add	r0, sp, #52	; 0x34
    8d28:	f7ff fdf2 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    8d2c:	4621      	mov	r1, r4
    8d2e:	2210      	movs	r2, #16
    8d30:	a801      	add	r0, sp, #4
	m[64] = z;
    8d32:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
    8d36:	f7ff fdeb 	bl	8910 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    8d3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8d3c:	2241      	movs	r2, #65	; 0x41
    8d3e:	a905      	add	r1, sp, #20
    8d40:	a801      	add	r0, sp, #4
    8d42:	f7ff fe60 	bl	8a06 <bt_smp_aes_cmac>
	if (err) {
    8d46:	4604      	mov	r4, r0
    8d48:	b910      	cbnz	r0, 8d50 <smp_f4+0x42>
	sys_mem_swap(res, 16);
    8d4a:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d4c:	f7ff ff2e 	bl	8bac <sys_mem_swap.constprop.12>
}
    8d50:	4620      	mov	r0, r4
    8d52:	b016      	add	sp, #88	; 0x58
    8d54:	bd70      	pop	{r4, r5, r6, pc}
	...

00008d58 <smp_send>:
{
    8d58:	b510      	push	{r4, lr}
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    8d5a:	4613      	mov	r3, r2
{
    8d5c:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    8d5e:	460a      	mov	r2, r1
    8d60:	6800      	ldr	r0, [r0, #0]
    8d62:	2106      	movs	r1, #6
    8d64:	f7fd f8f3 	bl	5f4e <bt_l2cap_send_cb>
    8d68:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    8d6c:	f247 5230 	movw	r2, #30000	; 0x7530
    8d70:	4802      	ldr	r0, [pc, #8]	; (8d7c <smp_send+0x24>)
}
    8d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d76:	f00f b81d 	b.w	17db4 <k_delayed_work_submit_to_queue>
    8d7a:	bf00      	nop
    8d7c:	20005470 	.word	0x20005470

00008d80 <compute_and_send_master_dhcheck>:
{
    8d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	memset(r, 0, sizeof(r));
    8d84:	2210      	movs	r2, #16
{
    8d86:	b0a2      	sub	sp, #136	; 0x88
    8d88:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    8d8a:	2100      	movs	r1, #0
    8d8c:	eb0d 0002 	add.w	r0, sp, r2
    8d90:	f7f7 fc66 	bl	660 <memset>
	switch (smp->method) {
    8d94:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    8d98:	2b03      	cmp	r3, #3
    8d9a:	f200 809e 	bhi.w	8eda <compute_and_send_master_dhcheck+0x15a>
    8d9e:	e8df f003 	tbb	[pc, r3]
    8da2:	0208      	.short	0x0208
    8da4:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    8da6:	2204      	movs	r2, #4
    8da8:	f504 71b6 	add.w	r1, r4, #364	; 0x16c
    8dac:	a804      	add	r0, sp, #16
    8dae:	f7f7 fc2b 	bl	608 <memcpy>
	u8_t m[53] = { 0x00, /* counter */
    8db2:	ae14      	add	r6, sp, #80	; 0x50
    8db4:	2235      	movs	r2, #53	; 0x35
    8db6:	2100      	movs	r1, #0
    8db8:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    8dba:	6825      	ldr	r5, [r4, #0]
	u8_t m[53] = { 0x00, /* counter */
    8dbc:	f7f7 fc50 	bl	660 <memset>
    8dc0:	2362      	movs	r3, #98	; 0x62
    8dc2:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    8dc6:	2374      	movs	r3, #116	; 0x74
    8dc8:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    8dcc:	236c      	movs	r3, #108	; 0x6c
    8dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(ws, w, 32);
    8dd2:	2220      	movs	r2, #32
	u8_t m[53] = { 0x00, /* counter */
    8dd4:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
    8dd6:	f204 112b 	addw	r1, r4, #299	; 0x12b
    8dda:	a80c      	add	r0, sp, #48	; 0x30
	u8_t m[53] = { 0x00, /* counter */
    8ddc:	f04f 0a01 	mov.w	sl, #1
    8de0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
    8de4:	f88d a083 	strb.w	sl, [sp, #131]	; 0x83
	sys_memcpy_swap(ws, w, 32);
    8de8:	f7ff fd92 	bl	8910 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    8dec:	ab08      	add	r3, sp, #32
    8dee:	2220      	movs	r2, #32
    8df0:	a90c      	add	r1, sp, #48	; 0x30
    8df2:	483b      	ldr	r0, [pc, #236]	; (8ee0 <compute_and_send_master_dhcheck+0x160>)
    8df4:	f7ff fe07 	bl	8a06 <bt_smp_aes_cmac>
	if (err) {
    8df8:	2800      	cmp	r0, #0
    8dfa:	d16e      	bne.n	8eda <compute_and_send_master_dhcheck+0x15a>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    8dfc:	f104 08bb 	add.w	r8, r4, #187	; 0xbb
	sys_memcpy_swap(m + 5, n1, 16);
    8e00:	2210      	movs	r2, #16
    8e02:	4641      	mov	r1, r8
    8e04:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    8e08:	f104 09cb 	add.w	r9, r4, #203	; 0xcb
	sys_memcpy_swap(m + 5, n1, 16);
    8e0c:	f7ff fd80 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    8e10:	2210      	movs	r2, #16
    8e12:	4649      	mov	r1, r9
    8e14:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    8e18:	f7ff fd7a 	bl	8910 <sys_memcpy_swap>
	m[37] = a1->type;
    8e1c:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    8e20:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    8e24:	2206      	movs	r2, #6
    8e26:	f105 0150 	add.w	r1, r5, #80	; 0x50
    8e2a:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    8e2e:	f7ff fd6f 	bl	8910 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    8e32:	f204 175b 	addw	r7, r4, #347	; 0x15b
	m[44] = a2->type;
    8e36:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
    8e3a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    8e3e:	2206      	movs	r2, #6
    8e40:	f105 0157 	add.w	r1, r5, #87	; 0x57
    8e44:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    8e48:	f7ff fd62 	bl	8910 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    8e4c:	463b      	mov	r3, r7
    8e4e:	2235      	movs	r2, #53	; 0x35
    8e50:	4631      	mov	r1, r6
    8e52:	a808      	add	r0, sp, #32
    8e54:	f7ff fdd7 	bl	8a06 <bt_smp_aes_cmac>
	if (err) {
    8e58:	2800      	cmp	r0, #0
    8e5a:	d13e      	bne.n	8eda <compute_and_send_master_dhcheck+0x15a>
	sys_mem_swap(mackey, 16);
    8e5c:	4638      	mov	r0, r7
		   smp->tk)) {
    8e5e:	f104 05db 	add.w	r5, r4, #219	; 0xdb
	sys_mem_swap(mackey, 16);
    8e62:	f7ff fea3 	bl	8bac <sys_mem_swap.constprop.12>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    8e66:	462b      	mov	r3, r5
    8e68:	2235      	movs	r2, #53	; 0x35
    8e6a:	4631      	mov	r1, r6
    8e6c:	a808      	add	r0, sp, #32
	m[0] = 0x01;
    8e6e:	f88d a050 	strb.w	sl, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    8e72:	f7ff fdc8 	bl	8a06 <bt_smp_aes_cmac>
	if (err) {
    8e76:	bb80      	cbnz	r0, 8eda <compute_and_send_master_dhcheck+0x15a>
	sys_mem_swap(ltk, 16);
    8e78:	4628      	mov	r0, r5
    8e7a:	f7ff fe97 	bl	8bac <sys_mem_swap.constprop.12>
		   &smp->chan.chan.conn->le.init_addr,
    8e7e:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    8e80:	4638      	mov	r0, r7
		   &smp->chan.chan.conn->le.init_addr,
    8e82:	f852 3b9e 	ldr.w	r3, [r2], #158
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    8e86:	9603      	str	r6, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    8e88:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr,
    8e8c:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    8e8e:	e88d 000c 	stmia.w	sp, {r2, r3}
    8e92:	9102      	str	r1, [sp, #8]
    8e94:	ab04      	add	r3, sp, #16
    8e96:	464a      	mov	r2, r9
    8e98:	4641      	mov	r1, r8
    8e9a:	f7ff fe96 	bl	8bca <smp_f6>
    8e9e:	4607      	mov	r7, r0
    8ea0:	b9d8      	cbnz	r0, 8eda <compute_and_send_master_dhcheck+0x15a>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    8ea2:	210d      	movs	r1, #13
    8ea4:	f104 0094 	add.w	r0, r4, #148	; 0x94
    8ea8:	f7ff fd99 	bl	89de <atomic_set_bit>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    8eac:	200d      	movs	r0, #13
    8eae:	f7ff fe6f 	bl	8b90 <smp_create_pdu.isra.2>
	if (!buf) {
    8eb2:	4605      	mov	r5, r0
    8eb4:	b180      	cbz	r0, 8ed8 <compute_and_send_master_dhcheck+0x158>
	req = net_buf_add(buf, sizeof(*req));
    8eb6:	2110      	movs	r1, #16
    8eb8:	3008      	adds	r0, #8
    8eba:	f00d ff61 	bl	16d80 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    8ebe:	2210      	movs	r2, #16
    8ec0:	4631      	mov	r1, r6
    8ec2:	f7f7 fba1 	bl	608 <memcpy>
	smp_send(smp, buf, NULL);
    8ec6:	4620      	mov	r0, r4
    8ec8:	463a      	mov	r2, r7
    8eca:	4629      	mov	r1, r5
    8ecc:	f7ff ff44 	bl	8d58 <smp_send>
	return 0;
    8ed0:	4638      	mov	r0, r7
}
    8ed2:	b022      	add	sp, #136	; 0x88
    8ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8ed8:	e7fb      	b.n	8ed2 <compute_and_send_master_dhcheck+0x152>
		return BT_SMP_ERR_UNSPECIFIED;
    8eda:	2008      	movs	r0, #8
    8edc:	e7f9      	b.n	8ed2 <compute_and_send_master_dhcheck+0x152>
    8ede:	bf00      	nop
    8ee0:	0001a904 	.word	0x0001a904

00008ee4 <sc_send_public_key>:
{
    8ee4:	b570      	push	{r4, r5, r6, lr}
    8ee6:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    8ee8:	200c      	movs	r0, #12
    8eea:	f7ff fe51 	bl	8b90 <smp_create_pdu.isra.2>
	if (!req_buf) {
    8eee:	4604      	mov	r4, r0
    8ef0:	b1a0      	cbz	r0, 8f1c <sc_send_public_key+0x38>
	req = net_buf_add(req_buf, sizeof(*req));
    8ef2:	2140      	movs	r1, #64	; 0x40
    8ef4:	3008      	adds	r0, #8
    8ef6:	f00d ff43 	bl	16d80 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    8efa:	2220      	movs	r2, #32
    8efc:	4908      	ldr	r1, [pc, #32]	; (8f20 <sc_send_public_key+0x3c>)
	req = net_buf_add(req_buf, sizeof(*req));
    8efe:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    8f00:	f7f7 fb82 	bl	608 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    8f04:	2220      	movs	r2, #32
    8f06:	18b0      	adds	r0, r6, r2
    8f08:	4906      	ldr	r1, [pc, #24]	; (8f24 <sc_send_public_key+0x40>)
    8f0a:	f7f7 fb7d 	bl	608 <memcpy>
	smp_send(smp, req_buf, NULL);
    8f0e:	4628      	mov	r0, r5
    8f10:	2200      	movs	r2, #0
    8f12:	4621      	mov	r1, r4
    8f14:	f7ff ff20 	bl	8d58 <smp_send>
	return 0;
    8f18:	2000      	movs	r0, #0
    8f1a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    8f1c:	2008      	movs	r0, #8
}
    8f1e:	bd70      	pop	{r4, r5, r6, pc}
    8f20:	200008a9 	.word	0x200008a9
    8f24:	200008c9 	.word	0x200008c9

00008f28 <smp_pairing_confirm>:
{
    8f28:	b570      	push	{r4, r5, r6, lr}
    8f2a:	4605      	mov	r5, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    8f2c:	2210      	movs	r2, #16
    8f2e:	6889      	ldr	r1, [r1, #8]
    8f30:	30ab      	adds	r0, #171	; 0xab
    8f32:	f7f7 fb69 	bl	608 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    8f36:	682b      	ldr	r3, [r5, #0]
    8f38:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8f3a:	b9cc      	cbnz	r4, 8f70 <smp_pairing_confirm+0x48>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    8f3c:	2104      	movs	r1, #4
    8f3e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    8f42:	f7ff fd4c 	bl	89de <atomic_set_bit>
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    8f46:	2004      	movs	r0, #4
    8f48:	f7ff fe22 	bl	8b90 <smp_create_pdu.isra.2>
	if (!rsp_buf) {
    8f4c:	4606      	mov	r6, r0
    8f4e:	b188      	cbz	r0, 8f74 <smp_pairing_confirm+0x4c>
	req = net_buf_add(rsp_buf, sizeof(*req));
    8f50:	2110      	movs	r1, #16
    8f52:	3008      	adds	r0, #8
    8f54:	f00d ff14 	bl	16d80 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    8f58:	2210      	movs	r2, #16
    8f5a:	f105 01bb 	add.w	r1, r5, #187	; 0xbb
    8f5e:	f7f7 fb53 	bl	608 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    8f62:	4622      	mov	r2, r4
    8f64:	4631      	mov	r1, r6
    8f66:	4628      	mov	r0, r5
    8f68:	f7ff fef6 	bl	8d58 <smp_send>
}
    8f6c:	4620      	mov	r0, r4
    8f6e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
    8f70:	2400      	movs	r4, #0
    8f72:	e7fb      	b.n	8f6c <smp_pairing_confirm+0x44>
		return BT_SMP_ERR_UNSPECIFIED;
    8f74:	2408      	movs	r4, #8
    8f76:	e7f9      	b.n	8f6c <smp_pairing_confirm+0x44>

00008f78 <bt_smp_distribute_keys>:
{
    8f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8f7c:	4605      	mov	r5, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    8f7e:	6800      	ldr	r0, [r0, #0]
	if (!keys) {
    8f80:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
    8f82:	b08d      	sub	sp, #52	; 0x34
	if (!keys) {
    8f84:	b97b      	cbnz	r3, 8fa6 <bt_smp_distribute_keys+0x2e>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    8f86:	3048      	adds	r0, #72	; 0x48
    8f88:	f7f9 fbe8 	bl	275c <bt_addr_le_str>
    8f8c:	4b43      	ldr	r3, [pc, #268]	; (909c <bt_smp_distribute_keys+0x124>)
    8f8e:	9302      	str	r3, [sp, #8]
    8f90:	9001      	str	r0, [sp, #4]
    8f92:	9300      	str	r3, [sp, #0]
    8f94:	4a42      	ldr	r2, [pc, #264]	; (90a0 <bt_smp_distribute_keys+0x128>)
    8f96:	4b43      	ldr	r3, [pc, #268]	; (90a4 <bt_smp_distribute_keys+0x12c>)
    8f98:	4943      	ldr	r1, [pc, #268]	; (90a8 <bt_smp_distribute_keys+0x130>)
    8f9a:	4844      	ldr	r0, [pc, #272]	; (90ac <bt_smp_distribute_keys+0x134>)
    8f9c:	f7f8 fba0 	bl	16e0 <printk>
}
    8fa0:	b00d      	add	sp, #52	; 0x34
    8fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    8fa6:	f105 0798 	add.w	r7, r5, #152	; 0x98
    8faa:	2105      	movs	r1, #5
    8fac:	4638      	mov	r0, r7
    8fae:	f7ff fd09 	bl	89c4 <atomic_test_bit>
    8fb2:	4680      	mov	r8, r0
    8fb4:	2800      	cmp	r0, #0
    8fb6:	d1f3      	bne.n	8fa0 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    8fb8:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
    8fbc:	07db      	lsls	r3, r3, #31
    8fbe:	d5ef      	bpl.n	8fa0 <bt_smp_distribute_keys+0x28>
	struct bt_keys *keys = conn->le.keys;
    8fc0:	682b      	ldr	r3, [r5, #0]
		bt_rand(key, sizeof(key));
    8fc2:	2110      	movs	r1, #16
    8fc4:	a808      	add	r0, sp, #32
	struct bt_keys *keys = conn->le.keys;
    8fc6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
		bt_rand(key, sizeof(key));
    8fc8:	f002 fa42 	bl	b450 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    8fcc:	2108      	movs	r1, #8
    8fce:	a806      	add	r0, sp, #24
    8fd0:	f002 fa3e 	bl	b450 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    8fd4:	2102      	movs	r1, #2
    8fd6:	f10d 0016 	add.w	r0, sp, #22
    8fda:	f002 fa39 	bl	b450 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    8fde:	2006      	movs	r0, #6
    8fe0:	f7ff fdd6 	bl	8b90 <smp_create_pdu.isra.2>
		if (!buf) {
    8fe4:	4606      	mov	r6, r0
    8fe6:	b948      	cbnz	r0, 8ffc <bt_smp_distribute_keys+0x84>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    8fe8:	4b2c      	ldr	r3, [pc, #176]	; (909c <bt_smp_distribute_keys+0x124>)
    8fea:	9301      	str	r3, [sp, #4]
    8fec:	9300      	str	r3, [sp, #0]
    8fee:	4a2c      	ldr	r2, [pc, #176]	; (90a0 <bt_smp_distribute_keys+0x128>)
    8ff0:	4b2f      	ldr	r3, [pc, #188]	; (90b0 <bt_smp_distribute_keys+0x138>)
    8ff2:	492d      	ldr	r1, [pc, #180]	; (90a8 <bt_smp_distribute_keys+0x130>)
    8ff4:	482f      	ldr	r0, [pc, #188]	; (90b4 <bt_smp_distribute_keys+0x13c>)
			BT_ERR("Unable to allocate Master Ident buffer");
    8ff6:	f7f8 fb73 	bl	16e0 <printk>
    8ffa:	e7d1      	b.n	8fa0 <bt_smp_distribute_keys+0x28>
		info = net_buf_add(buf, sizeof(*info));
    8ffc:	2110      	movs	r1, #16
    8ffe:	3008      	adds	r0, #8
    9000:	f00d febe 	bl	16d80 <net_buf_simple_add>
		memcpy(info->ltk, key, keys->enc_size);
    9004:	79e2      	ldrb	r2, [r4, #7]
    9006:	a908      	add	r1, sp, #32
		info = net_buf_add(buf, sizeof(*info));
    9008:	4681      	mov	r9, r0
		memcpy(info->ltk, key, keys->enc_size);
    900a:	f7f7 fafd 	bl	608 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    900e:	79e0      	ldrb	r0, [r4, #7]
    9010:	280f      	cmp	r0, #15
    9012:	d805      	bhi.n	9020 <bt_smp_distribute_keys+0xa8>
			memset(info->ltk + keys->enc_size, 0,
    9014:	f1c0 0210 	rsb	r2, r0, #16
    9018:	4641      	mov	r1, r8
    901a:	4448      	add	r0, r9
    901c:	f7f7 fb20 	bl	660 <memset>
		smp_send(smp, buf, NULL);
    9020:	4631      	mov	r1, r6
    9022:	2200      	movs	r2, #0
    9024:	4628      	mov	r0, r5
    9026:	f7ff fe97 	bl	8d58 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    902a:	2007      	movs	r0, #7
    902c:	f7ff fdb0 	bl	8b90 <smp_create_pdu.isra.2>
		if (!buf) {
    9030:	4606      	mov	r6, r0
    9032:	b938      	cbnz	r0, 9044 <bt_smp_distribute_keys+0xcc>
			BT_ERR("Unable to allocate Master Ident buffer");
    9034:	4b19      	ldr	r3, [pc, #100]	; (909c <bt_smp_distribute_keys+0x124>)
    9036:	9301      	str	r3, [sp, #4]
    9038:	9300      	str	r3, [sp, #0]
    903a:	4a19      	ldr	r2, [pc, #100]	; (90a0 <bt_smp_distribute_keys+0x128>)
    903c:	4b1c      	ldr	r3, [pc, #112]	; (90b0 <bt_smp_distribute_keys+0x138>)
    903e:	491a      	ldr	r1, [pc, #104]	; (90a8 <bt_smp_distribute_keys+0x130>)
    9040:	481d      	ldr	r0, [pc, #116]	; (90b8 <bt_smp_distribute_keys+0x140>)
    9042:	e7d8      	b.n	8ff6 <bt_smp_distribute_keys+0x7e>
		ident = net_buf_add(buf, sizeof(*ident));
    9044:	210a      	movs	r1, #10
    9046:	3008      	adds	r0, #8
    9048:	f00d fe9a 	bl	16d80 <net_buf_simple_add>
		ident->rand = rand;
    904c:	9b06      	ldr	r3, [sp, #24]
    904e:	f8c0 3002 	str.w	r3, [r0, #2]
    9052:	9b07      	ldr	r3, [sp, #28]
    9054:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    9058:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    905c:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    905e:	4631      	mov	r1, r6
    9060:	4628      	mov	r0, r5
    9062:	4a16      	ldr	r2, [pc, #88]	; (90bc <bt_smp_distribute_keys+0x144>)
    9064:	f7ff fe78 	bl	8d58 <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9068:	210a      	movs	r1, #10
    906a:	4638      	mov	r0, r7
    906c:	f7ff fcaa 	bl	89c4 <atomic_test_bit>
    9070:	2800      	cmp	r0, #0
    9072:	d095      	beq.n	8fa0 <bt_smp_distribute_keys+0x28>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    9074:	2101      	movs	r1, #1
    9076:	4620      	mov	r0, r4
    9078:	f001 f988 	bl	a38c <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    907c:	2210      	movs	r2, #16
    907e:	a908      	add	r1, sp, #32
    9080:	f104 0052 	add.w	r0, r4, #82	; 0x52
    9084:	f7f7 fac0 	bl	608 <memcpy>
			keys->slave_ltk.rand = rand;
    9088:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    908c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
			keys->slave_ltk.ediv = ediv;
    9090:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9094:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    9098:	e782      	b.n	8fa0 <bt_smp_distribute_keys+0x28>
    909a:	bf00      	nop
    909c:	0001868d 	.word	0x0001868d
    90a0:	00019a84 	.word	0x00019a84
    90a4:	0001a5a7 	.word	0x0001a5a7
    90a8:	00019a8b 	.word	0x00019a8b
    90ac:	0001a6e3 	.word	0x0001a6e3
    90b0:	0001a590 	.word	0x0001a590
    90b4:	0001a708 	.word	0x0001a708
    90b8:	0001a73f 	.word	0x0001a73f
    90bc:	0000960d 	.word	0x0000960d

000090c0 <smp_pairing_req>:
    90c0:	2007      	movs	r0, #7
    90c2:	4770      	bx	lr

000090c4 <atomic_test_and_clear_bit>:
{
    90c4:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    90c6:	f001 021f 	and.w	r2, r1, #31
    90ca:	2301      	movs	r3, #1
    90cc:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    90ce:	0949      	lsrs	r1, r1, #5
    90d0:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    90d2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    90d6:	f3bf 8f5b 	dmb	ish
    90da:	e850 2f00 	ldrex	r2, [r0]
    90de:	ea02 0104 	and.w	r1, r2, r4
    90e2:	e840 1e00 	strex	lr, r1, [r0]
    90e6:	f1be 0f00 	cmp.w	lr, #0
    90ea:	d1f6      	bne.n	90da <atomic_test_and_clear_bit+0x16>
    90ec:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
    90f0:	421a      	tst	r2, r3
}
    90f2:	bf14      	ite	ne
    90f4:	2001      	movne	r0, #1
    90f6:	2000      	moveq	r0, #0
    90f8:	bd10      	pop	{r4, pc}

000090fa <smp_reset>:
{
    90fa:	b538      	push	{r3, r4, r5, lr}
    90fc:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    90fe:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    9100:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    9104:	f00e fdfc 	bl	17d00 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    9108:	2300      	movs	r3, #0
    910a:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
	atomic_set(&smp->allowed_cmds, 0);
    910e:	f104 0094 	add.w	r0, r4, #148	; 0x94
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9112:	f3bf 8f5b 	dmb	ish
    9116:	e850 2f00 	ldrex	r2, [r0]
    911a:	e840 3100 	strex	r1, r3, [r0]
    911e:	2900      	cmp	r1, #0
    9120:	d1f9      	bne.n	9116 <smp_reset+0x1c>
    9122:	f3bf 8f5b 	dmb	ish
    9126:	f3bf 8f5b 	dmb	ish
    912a:	3498      	adds	r4, #152	; 0x98
    912c:	e854 2f00 	ldrex	r2, [r4]
    9130:	e844 3100 	strex	r1, r3, [r4]
    9134:	2900      	cmp	r1, #0
    9136:	d1f9      	bne.n	912c <smp_reset+0x32>
    9138:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    913c:	7a2b      	ldrb	r3, [r5, #8]
    913e:	7a6a      	ldrb	r2, [r5, #9]
    9140:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
    9142:	bf18      	it	ne
    9144:	726b      	strbne	r3, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9146:	78eb      	ldrb	r3, [r5, #3]
    9148:	b923      	cbnz	r3, 9154 <smp_reset+0x5a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    914a:	210b      	movs	r1, #11
}
    914c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    9150:	f7ff bc45 	b.w	89de <atomic_set_bit>
    9154:	bd38      	pop	{r3, r4, r5, pc}

00009156 <smp_error>:
{
    9156:	b570      	push	{r4, r5, r6, lr}
    9158:	4605      	mov	r5, r0
    915a:	460e      	mov	r6, r1
	smp_reset(smp);
    915c:	f7ff ffcd 	bl	90fa <smp_reset>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    9160:	2005      	movs	r0, #5
    9162:	f7ff fd15 	bl	8b90 <smp_create_pdu.isra.2>
	if (!buf) {
    9166:	4604      	mov	r4, r0
    9168:	b160      	cbz	r0, 9184 <smp_error+0x2e>
	rsp = net_buf_add(buf, sizeof(*rsp));
    916a:	2101      	movs	r1, #1
    916c:	3008      	adds	r0, #8
    916e:	f00d fe07 	bl	16d80 <net_buf_simple_add>
	rsp->reason = reason;
    9172:	7006      	strb	r6, [r0, #0]
    9174:	6828      	ldr	r0, [r5, #0]
    9176:	2300      	movs	r3, #0
    9178:	4622      	mov	r2, r4
    917a:	2106      	movs	r1, #6
    917c:	f7fc fee7 	bl	5f4e <bt_l2cap_send_cb>
	return 0;
    9180:	2000      	movs	r0, #0
    9182:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    9184:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9188:	bd70      	pop	{r4, r5, r6, pc}
	...

0000918c <bt_smp_dhkey_ready>:
{
    918c:	b538      	push	{r3, r4, r5, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    918e:	4c1c      	ldr	r4, [pc, #112]	; (9200 <bt_smp_dhkey_ready+0x74>)
{
    9190:	4605      	mov	r5, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    9192:	2107      	movs	r1, #7
    9194:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9198:	f7ff ff94 	bl	90c4 <atomic_test_and_clear_bit>
    919c:	b370      	cbz	r0, 91fc <bt_smp_dhkey_ready+0x70>
	if (!dhkey) {
    919e:	b92d      	cbnz	r5, 91ac <bt_smp_dhkey_ready+0x20>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    91a0:	210b      	movs	r1, #11
				smp_error(smp, err);
    91a2:	4620      	mov	r0, r4
}
    91a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				smp_error(smp, err);
    91a8:	f7ff bfd5 	b.w	9156 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    91ac:	4629      	mov	r1, r5
    91ae:	2220      	movs	r2, #32
    91b0:	f204 102b 	addw	r0, r4, #299	; 0x12b
    91b4:	f7f7 fa28 	bl	608 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    91b8:	2109      	movs	r1, #9
    91ba:	f104 0098 	add.w	r0, r4, #152	; 0x98
    91be:	f7ff fc01 	bl	89c4 <atomic_test_bit>
    91c2:	b128      	cbz	r0, 91d0 <bt_smp_dhkey_ready+0x44>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    91c4:	2108      	movs	r1, #8
    91c6:	480f      	ldr	r0, [pc, #60]	; (9204 <bt_smp_dhkey_ready+0x78>)
}
    91c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    91cc:	f7ff bc07 	b.w	89de <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    91d0:	210d      	movs	r1, #13
    91d2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    91d6:	f7ff fbf5 	bl	89c4 <atomic_test_bit>
    91da:	2800      	cmp	r0, #0
    91dc:	d1f2      	bne.n	91c4 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    91de:	2108      	movs	r1, #8
    91e0:	f104 0098 	add.w	r0, r4, #152	; 0x98
    91e4:	f7ff fbee 	bl	89c4 <atomic_test_bit>
    91e8:	b140      	cbz	r0, 91fc <bt_smp_dhkey_ready+0x70>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    91ea:	6823      	ldr	r3, [r4, #0]
    91ec:	78db      	ldrb	r3, [r3, #3]
    91ee:	b92b      	cbnz	r3, 91fc <bt_smp_dhkey_ready+0x70>
			err = compute_and_send_master_dhcheck(smp);
    91f0:	4620      	mov	r0, r4
    91f2:	f7ff fdc5 	bl	8d80 <compute_and_send_master_dhcheck>
			if (err) {
    91f6:	4601      	mov	r1, r0
    91f8:	2800      	cmp	r0, #0
    91fa:	d1d2      	bne.n	91a2 <bt_smp_dhkey_ready+0x16>
    91fc:	bd38      	pop	{r3, r4, r5, pc}
    91fe:	bf00      	nop
    9200:	2000070c 	.word	0x2000070c
    9204:	200007a4 	.word	0x200007a4

00009208 <bt_smp_pkey_ready>:
{
    9208:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!pkey) {
    920a:	4604      	mov	r4, r0
    920c:	4d17      	ldr	r5, [pc, #92]	; (926c <bt_smp_pkey_ready+0x64>)
    920e:	b958      	cbnz	r0, 9228 <bt_smp_pkey_ready+0x20>
		BT_WARN("Public key not available");
    9210:	4b17      	ldr	r3, [pc, #92]	; (9270 <bt_smp_pkey_ready+0x68>)
    9212:	9301      	str	r3, [sp, #4]
    9214:	9300      	str	r3, [sp, #0]
    9216:	4a17      	ldr	r2, [pc, #92]	; (9274 <bt_smp_pkey_ready+0x6c>)
    9218:	4b17      	ldr	r3, [pc, #92]	; (9278 <bt_smp_pkey_ready+0x70>)
    921a:	4918      	ldr	r1, [pc, #96]	; (927c <bt_smp_pkey_ready+0x74>)
    921c:	4818      	ldr	r0, [pc, #96]	; (9280 <bt_smp_pkey_ready+0x78>)
    921e:	f7f8 fa5f 	bl	16e0 <printk>
		sc_local_pkey_valid = false;
    9222:	702c      	strb	r4, [r5, #0]
}
    9224:	b003      	add	sp, #12
    9226:	bd30      	pop	{r4, r5, pc}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    9228:	4c16      	ldr	r4, [pc, #88]	; (9284 <bt_smp_pkey_ready+0x7c>)
	memcpy(sc_public_key, pkey, 64);
    922a:	4601      	mov	r1, r0
    922c:	2240      	movs	r2, #64	; 0x40
    922e:	4816      	ldr	r0, [pc, #88]	; (9288 <bt_smp_pkey_ready+0x80>)
    9230:	f7f7 f9ea 	bl	608 <memcpy>
	sc_local_pkey_valid = true;
    9234:	2301      	movs	r3, #1
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    9236:	2106      	movs	r1, #6
    9238:	f104 0098 	add.w	r0, r4, #152	; 0x98
	sc_local_pkey_valid = true;
    923c:	702b      	strb	r3, [r5, #0]
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    923e:	f7ff fbc1 	bl	89c4 <atomic_test_bit>
    9242:	2800      	cmp	r0, #0
    9244:	d0ee      	beq.n	9224 <bt_smp_pkey_ready+0x1c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9246:	6823      	ldr	r3, [r4, #0]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9248:	78db      	ldrb	r3, [r3, #3]
    924a:	2b00      	cmp	r3, #0
    924c:	d1ea      	bne.n	9224 <bt_smp_pkey_ready+0x1c>
			err = sc_send_public_key(smp);
    924e:	4620      	mov	r0, r4
    9250:	f7ff fe48 	bl	8ee4 <sc_send_public_key>
			if (err) {
    9254:	4601      	mov	r1, r0
    9256:	b110      	cbz	r0, 925e <bt_smp_pkey_ready+0x56>
				smp_error(smp, err);
    9258:	4620      	mov	r0, r4
    925a:	f7ff ff7c 	bl	9156 <smp_error>
			atomic_set_bit(&smp->allowed_cmds,
    925e:	480b      	ldr	r0, [pc, #44]	; (928c <bt_smp_pkey_ready+0x84>)
    9260:	210c      	movs	r1, #12
}
    9262:	b003      	add	sp, #12
    9264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			atomic_set_bit(&smp->allowed_cmds,
    9268:	f7ff bbb9 	b.w	89de <atomic_set_bit>
    926c:	200008a8 	.word	0x200008a8
    9270:	0001868d 	.word	0x0001868d
    9274:	00019806 	.word	0x00019806
    9278:	0001a67b 	.word	0x0001a67b
    927c:	00019a8b 	.word	0x00019a8b
    9280:	0001a776 	.word	0x0001a776
    9284:	2000070c 	.word	0x2000070c
    9288:	200008a9 	.word	0x200008a9
    928c:	200007a0 	.word	0x200007a0

00009290 <bt_smp_recv>:
{
    9290:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    9292:	898b      	ldrh	r3, [r1, #12]
{
    9294:	b085      	sub	sp, #20
    9296:	4604      	mov	r4, r0
    9298:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
    929a:	b953      	cbnz	r3, 92b2 <bt_smp_recv+0x22>
		BT_ERR("Too small SMP PDU received");
    929c:	4b36      	ldr	r3, [pc, #216]	; (9378 <bt_smp_recv+0xe8>)
    929e:	9301      	str	r3, [sp, #4]
    92a0:	9300      	str	r3, [sp, #0]
    92a2:	4a36      	ldr	r2, [pc, #216]	; (937c <bt_smp_recv+0xec>)
    92a4:	4b36      	ldr	r3, [pc, #216]	; (9380 <bt_smp_recv+0xf0>)
    92a6:	4937      	ldr	r1, [pc, #220]	; (9384 <bt_smp_recv+0xf4>)
    92a8:	4837      	ldr	r0, [pc, #220]	; (9388 <bt_smp_recv+0xf8>)
    92aa:	f7f8 fa19 	bl	16e0 <printk>
}
    92ae:	b005      	add	sp, #20
    92b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    92b2:	4608      	mov	r0, r1
	net_buf_pull(buf, sizeof(*hdr));
    92b4:	2101      	movs	r1, #1
	struct bt_smp_hdr *hdr = (void *)buf->data;
    92b6:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*hdr));
    92ba:	f00d fd8f 	bl	16ddc <net_buf_simple_pull>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    92be:	2104      	movs	r1, #4
    92c0:	f104 0098 	add.w	r0, r4, #152	; 0x98
    92c4:	f7ff fb7e 	bl	89c4 <atomic_test_bit>
    92c8:	b158      	cbz	r0, 92e2 <bt_smp_recv+0x52>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    92ca:	4b2b      	ldr	r3, [pc, #172]	; (9378 <bt_smp_recv+0xe8>)
    92cc:	9302      	str	r3, [sp, #8]
    92ce:	782a      	ldrb	r2, [r5, #0]
    92d0:	9201      	str	r2, [sp, #4]
    92d2:	9300      	str	r3, [sp, #0]
    92d4:	4a2d      	ldr	r2, [pc, #180]	; (938c <bt_smp_recv+0xfc>)
    92d6:	4b2a      	ldr	r3, [pc, #168]	; (9380 <bt_smp_recv+0xf0>)
    92d8:	492a      	ldr	r1, [pc, #168]	; (9384 <bt_smp_recv+0xf4>)
    92da:	482d      	ldr	r0, [pc, #180]	; (9390 <bt_smp_recv+0x100>)
    92dc:	f7f8 fa00 	bl	16e0 <printk>
		return;
    92e0:	e7e5      	b.n	92ae <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    92e2:	7829      	ldrb	r1, [r5, #0]
    92e4:	290d      	cmp	r1, #13
    92e6:	d803      	bhi.n	92f0 <bt_smp_recv+0x60>
    92e8:	4f2a      	ldr	r7, [pc, #168]	; (9394 <bt_smp_recv+0x104>)
    92ea:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    92ee:	b983      	cbnz	r3, 9312 <bt_smp_recv+0x82>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    92f0:	4b21      	ldr	r3, [pc, #132]	; (9378 <bt_smp_recv+0xe8>)
    92f2:	9302      	str	r3, [sp, #8]
    92f4:	9101      	str	r1, [sp, #4]
    92f6:	9300      	str	r3, [sp, #0]
    92f8:	4922      	ldr	r1, [pc, #136]	; (9384 <bt_smp_recv+0xf4>)
    92fa:	4b21      	ldr	r3, [pc, #132]	; (9380 <bt_smp_recv+0xf0>)
    92fc:	4a23      	ldr	r2, [pc, #140]	; (938c <bt_smp_recv+0xfc>)
    92fe:	4826      	ldr	r0, [pc, #152]	; (9398 <bt_smp_recv+0x108>)
    9300:	f7f8 f9ee 	bl	16e0 <printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    9304:	2107      	movs	r1, #7
		smp_error(smp, err);
    9306:	4620      	mov	r0, r4
}
    9308:	b005      	add	sp, #20
    930a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		smp_error(smp, err);
    930e:	f7ff bf22 	b.w	9156 <smp_error>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    9312:	f104 0094 	add.w	r0, r4, #148	; 0x94
    9316:	f7ff fed5 	bl	90c4 <atomic_test_and_clear_bit>
    931a:	b978      	cbnz	r0, 933c <bt_smp_recv+0xac>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    931c:	4b16      	ldr	r3, [pc, #88]	; (9378 <bt_smp_recv+0xe8>)
    931e:	9302      	str	r3, [sp, #8]
    9320:	782a      	ldrb	r2, [r5, #0]
    9322:	9201      	str	r2, [sp, #4]
    9324:	9300      	str	r3, [sp, #0]
    9326:	4a19      	ldr	r2, [pc, #100]	; (938c <bt_smp_recv+0xfc>)
    9328:	4b15      	ldr	r3, [pc, #84]	; (9380 <bt_smp_recv+0xf0>)
    932a:	4916      	ldr	r1, [pc, #88]	; (9384 <bt_smp_recv+0xf4>)
    932c:	481b      	ldr	r0, [pc, #108]	; (939c <bt_smp_recv+0x10c>)
    932e:	f7f8 f9d7 	bl	16e0 <printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    9332:	782b      	ldrb	r3, [r5, #0]
    9334:	2b05      	cmp	r3, #5
    9336:	d0ba      	beq.n	92ae <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    9338:	2108      	movs	r1, #8
    933a:	e7e4      	b.n	9306 <bt_smp_recv+0x76>
	if (buf->len != handlers[hdr->code].expect_len) {
    933c:	782b      	ldrb	r3, [r5, #0]
    933e:	89b1      	ldrh	r1, [r6, #12]
    9340:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    9344:	7912      	ldrb	r2, [r2, #4]
    9346:	428a      	cmp	r2, r1
    9348:	d00c      	beq.n	9364 <bt_smp_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    934a:	4a0b      	ldr	r2, [pc, #44]	; (9378 <bt_smp_recv+0xe8>)
    934c:	9203      	str	r2, [sp, #12]
    934e:	9302      	str	r3, [sp, #8]
    9350:	9101      	str	r1, [sp, #4]
    9352:	9200      	str	r2, [sp, #0]
    9354:	490b      	ldr	r1, [pc, #44]	; (9384 <bt_smp_recv+0xf4>)
    9356:	4b0a      	ldr	r3, [pc, #40]	; (9380 <bt_smp_recv+0xf0>)
    9358:	4a08      	ldr	r2, [pc, #32]	; (937c <bt_smp_recv+0xec>)
    935a:	4811      	ldr	r0, [pc, #68]	; (93a0 <bt_smp_recv+0x110>)
    935c:	f7f8 f9c0 	bl	16e0 <printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    9360:	210a      	movs	r1, #10
    9362:	e7d0      	b.n	9306 <bt_smp_recv+0x76>
	err = handlers[hdr->code].func(smp, buf);
    9364:	4631      	mov	r1, r6
    9366:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    936a:	4620      	mov	r0, r4
    936c:	4798      	blx	r3
	if (err) {
    936e:	4601      	mov	r1, r0
    9370:	2800      	cmp	r0, #0
    9372:	d09c      	beq.n	92ae <bt_smp_recv+0x1e>
    9374:	e7c7      	b.n	9306 <bt_smp_recv+0x76>
    9376:	bf00      	nop
    9378:	0001868d 	.word	0x0001868d
    937c:	00019a84 	.word	0x00019a84
    9380:	0001a66f 	.word	0x0001a66f
    9384:	00019a8b 	.word	0x00019a8b
    9388:	0001a79f 	.word	0x0001a79f
    938c:	00019806 	.word	0x00019806
    9390:	0001a7ca 	.word	0x0001a7ca
    9394:	0001a894 	.word	0x0001a894
    9398:	0001a80b 	.word	0x0001a80b
    939c:	0001a835 	.word	0x0001a835
    93a0:	0001a19e 	.word	0x0001a19e

000093a4 <smp_pairing_failed>:
{
    93a4:	b530      	push	{r4, r5, lr}
    93a6:	b085      	sub	sp, #20
	BT_ERR("reason 0x%x", req->reason);
    93a8:	4b14      	ldr	r3, [pc, #80]	; (93fc <smp_pairing_failed+0x58>)
	struct bt_conn *conn = smp->chan.chan.conn;
    93aa:	6805      	ldr	r5, [r0, #0]
	BT_ERR("reason 0x%x", req->reason);
    93ac:	9302      	str	r3, [sp, #8]
    93ae:	688a      	ldr	r2, [r1, #8]
    93b0:	4913      	ldr	r1, [pc, #76]	; (9400 <smp_pairing_failed+0x5c>)
    93b2:	7812      	ldrb	r2, [r2, #0]
    93b4:	9201      	str	r2, [sp, #4]
{
    93b6:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    93b8:	9300      	str	r3, [sp, #0]
    93ba:	4a12      	ldr	r2, [pc, #72]	; (9404 <smp_pairing_failed+0x60>)
    93bc:	4b12      	ldr	r3, [pc, #72]	; (9408 <smp_pairing_failed+0x64>)
    93be:	4813      	ldr	r0, [pc, #76]	; (940c <smp_pairing_failed+0x68>)
    93c0:	f7f8 f98e 	bl	16e0 <printk>
	switch (smp->method) {
    93c4:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    93c8:	3b01      	subs	r3, #1
    93ca:	2b02      	cmp	r3, #2
    93cc:	d804      	bhi.n	93d8 <smp_pairing_failed+0x34>
		bt_auth->cancel(conn);
    93ce:	4b10      	ldr	r3, [pc, #64]	; (9410 <smp_pairing_failed+0x6c>)
    93d0:	681b      	ldr	r3, [r3, #0]
    93d2:	4628      	mov	r0, r5
    93d4:	68db      	ldr	r3, [r3, #12]
    93d6:	4798      	blx	r3
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    93d8:	2102      	movs	r1, #2
    93da:	f104 0098 	add.w	r0, r4, #152	; 0x98
    93de:	f7ff faf1 	bl	89c4 <atomic_test_bit>
    93e2:	b120      	cbz	r0, 93ee <smp_pairing_failed+0x4a>
	    smp->chan.chan.conn->le.keys) {
    93e4:	6823      	ldr	r3, [r4, #0]
    93e6:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    93e8:	b108      	cbz	r0, 93ee <smp_pairing_failed+0x4a>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    93ea:	f000 ff39 	bl	a260 <bt_keys_clear>
	smp_reset(smp);
    93ee:	4620      	mov	r0, r4
    93f0:	f7ff fe83 	bl	90fa <smp_reset>
}
    93f4:	2000      	movs	r0, #0
    93f6:	b005      	add	sp, #20
    93f8:	bd30      	pop	{r4, r5, pc}
    93fa:	bf00      	nop
    93fc:	0001868d 	.word	0x0001868d
    9400:	00019a8b 	.word	0x00019a8b
    9404:	00019a84 	.word	0x00019a84
    9408:	0001a615 	.word	0x0001a615
    940c:	0001a9d4 	.word	0x0001a9d4
    9410:	20004c78 	.word	0x20004c78

00009414 <smp_timeout>:
{
    9414:	b537      	push	{r0, r1, r2, r4, r5, lr}
	BT_ERR("SMP Timeout");
    9416:	4b10      	ldr	r3, [pc, #64]	; (9458 <smp_timeout+0x44>)
    9418:	9301      	str	r3, [sp, #4]
{
    941a:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    941c:	9300      	str	r3, [sp, #0]
    941e:	490f      	ldr	r1, [pc, #60]	; (945c <smp_timeout+0x48>)
    9420:	4b0f      	ldr	r3, [pc, #60]	; (9460 <smp_timeout+0x4c>)
    9422:	4a10      	ldr	r2, [pc, #64]	; (9464 <smp_timeout+0x50>)
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    9424:	f5a0 75ba 	sub.w	r5, r0, #372	; 0x174
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9428:	3cdc      	subs	r4, #220	; 0xdc
	BT_ERR("SMP Timeout");
    942a:	480f      	ldr	r0, [pc, #60]	; (9468 <smp_timeout+0x54>)
    942c:	f7f8 f958 	bl	16e0 <printk>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    9430:	2102      	movs	r1, #2
    9432:	4620      	mov	r0, r4
    9434:	f7ff fac6 	bl	89c4 <atomic_test_bit>
    9438:	b120      	cbz	r0, 9444 <smp_timeout+0x30>
	    smp->chan.chan.conn->le.keys) {
    943a:	682b      	ldr	r3, [r5, #0]
    943c:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    943e:	b108      	cbz	r0, 9444 <smp_timeout+0x30>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    9440:	f000 ff0e 	bl	a260 <bt_keys_clear>
	smp_reset(smp);
    9444:	4628      	mov	r0, r5
    9446:	f7ff fe58 	bl	90fa <smp_reset>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    944a:	2104      	movs	r1, #4
    944c:	4620      	mov	r0, r4
}
    944e:	b003      	add	sp, #12
    9450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    9454:	f7ff bac3 	b.w	89de <atomic_set_bit>
    9458:	0001868d 	.word	0x0001868d
    945c:	00019a8b 	.word	0x00019a8b
    9460:	0001a584 	.word	0x0001a584
    9464:	00019a84 	.word	0x00019a84
    9468:	0001ab2b 	.word	0x0001ab2b

0000946c <bt_smp_encrypt_change>:
{
    946c:	b570      	push	{r4, r5, r6, lr}
    946e:	4604      	mov	r4, r0
	if (hci_status) {
    9470:	2900      	cmp	r1, #0
    9472:	d15d      	bne.n	9530 <bt_smp_encrypt_change+0xc4>
	struct bt_conn *conn = chan->conn;
    9474:	6806      	ldr	r6, [r0, #0]
	if (!smp || !conn->encrypt) {
    9476:	7ab3      	ldrb	r3, [r6, #10]
    9478:	2b00      	cmp	r3, #0
    947a:	d059      	beq.n	9530 <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    947c:	f100 0598 	add.w	r5, r0, #152	; 0x98
    9480:	2101      	movs	r1, #1
    9482:	4628      	mov	r0, r5
    9484:	f7ff fe1e 	bl	90c4 <atomic_test_and_clear_bit>
    9488:	2800      	cmp	r0, #0
    948a:	d051      	beq.n	9530 <bt_smp_encrypt_change+0xc4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    948c:	2103      	movs	r1, #3
    948e:	4628      	mov	r0, r5
    9490:	f7ff fa98 	bl	89c4 <atomic_test_bit>
    9494:	b930      	cbnz	r0, 94a4 <bt_smp_encrypt_change+0x38>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    9496:	f104 0094 	add.w	r0, r4, #148	; 0x94
    949a:	210b      	movs	r1, #11
}
    949c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    94a0:	f7ff ba9d 	b.w	89de <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    94a4:	2105      	movs	r1, #5
    94a6:	4628      	mov	r0, r5
    94a8:	f7ff fa8c 	bl	89c4 <atomic_test_bit>
    94ac:	b1b8      	cbz	r0, 94de <bt_smp_encrypt_change+0x72>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    94ae:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    94b2:	071b      	lsls	r3, r3, #28
    94b4:	d507      	bpl.n	94c6 <bt_smp_encrypt_change+0x5a>
    94b6:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    94ba:	0718      	lsls	r0, r3, #28
    94bc:	d503      	bpl.n	94c6 <bt_smp_encrypt_change+0x5a>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    94be:	210e      	movs	r1, #14
    94c0:	4628      	mov	r0, r5
    94c2:	f7ff fa8c 	bl	89de <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    94c6:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
    94ca:	f023 0308 	bic.w	r3, r3, #8
    94ce:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    94d2:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    94d6:	f023 0308 	bic.w	r3, r3, #8
    94da:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    94de:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    94e2:	07d9      	lsls	r1, r3, #31
    94e4:	d51c      	bpl.n	9520 <bt_smp_encrypt_change+0xb4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    94e6:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    94e8:	f104 0094 	add.w	r0, r4, #148	; 0x94
    94ec:	f7ff fa77 	bl	89de <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    94f0:	2102      	movs	r1, #2
    94f2:	4628      	mov	r0, r5
    94f4:	f7ff fa73 	bl	89de <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    94f8:	78f3      	ldrb	r3, [r6, #3]
    94fa:	b913      	cbnz	r3, 9502 <bt_smp_encrypt_change+0x96>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    94fc:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    9500:	b9b3      	cbnz	r3, 9530 <bt_smp_encrypt_change+0xc4>
	bt_smp_distribute_keys(smp);
    9502:	4620      	mov	r0, r4
    9504:	f7ff fd38 	bl	8f78 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    9508:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
    950c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9510:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9514:	b963      	cbnz	r3, 9530 <bt_smp_encrypt_change+0xc4>
	smp_reset(smp);
    9516:	4620      	mov	r0, r4
}
    9518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	smp_reset(smp);
    951c:	f7ff bded 	b.w	90fa <smp_reset>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    9520:	079a      	lsls	r2, r3, #30
    9522:	d501      	bpl.n	9528 <bt_smp_encrypt_change+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    9524:	2108      	movs	r1, #8
    9526:	e7df      	b.n	94e8 <bt_smp_encrypt_change+0x7c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    9528:	075b      	lsls	r3, r3, #29
    952a:	d5e1      	bpl.n	94f0 <bt_smp_encrypt_change+0x84>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    952c:	210a      	movs	r1, #10
    952e:	e7db      	b.n	94e8 <bt_smp_encrypt_change+0x7c>
    9530:	bd70      	pop	{r4, r5, r6, pc}
	...

00009534 <smp_master_ident>:
{
    9534:	b5f0      	push	{r4, r5, r6, r7, lr}
    9536:	460a      	mov	r2, r1
    9538:	b085      	sub	sp, #20
    953a:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    953c:	210a      	movs	r1, #10
	struct bt_conn *conn = smp->chan.chan.conn;
    953e:	f850 6b98 	ldr.w	r6, [r0], #152
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9542:	f7ff fa3f 	bl	89c4 <atomic_test_bit>
    9546:	b340      	cbz	r0, 959a <smp_master_ident+0x66>
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    9548:	f106 0748 	add.w	r7, r6, #72	; 0x48
    954c:	4639      	mov	r1, r7
    954e:	2004      	movs	r0, #4
		struct bt_smp_master_ident *req = (void *)buf->data;
    9550:	6894      	ldr	r4, [r2, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    9552:	f000 fecb 	bl	a2ec <bt_keys_get_type>
		if (!keys) {
    9556:	b978      	cbnz	r0, 9578 <smp_master_ident+0x44>
			BT_ERR("Unable to get keys for %s",
    9558:	4638      	mov	r0, r7
    955a:	f7f9 f8ff 	bl	275c <bt_addr_le_str>
    955e:	4b1f      	ldr	r3, [pc, #124]	; (95dc <smp_master_ident+0xa8>)
    9560:	9302      	str	r3, [sp, #8]
    9562:	9001      	str	r0, [sp, #4]
    9564:	9300      	str	r3, [sp, #0]
    9566:	4a1e      	ldr	r2, [pc, #120]	; (95e0 <smp_master_ident+0xac>)
    9568:	4b1e      	ldr	r3, [pc, #120]	; (95e4 <smp_master_ident+0xb0>)
    956a:	491f      	ldr	r1, [pc, #124]	; (95e8 <smp_master_ident+0xb4>)
    956c:	481f      	ldr	r0, [pc, #124]	; (95ec <smp_master_ident+0xb8>)
    956e:	f7f8 f8b7 	bl	16e0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    9572:	2008      	movs	r0, #8
}
    9574:	b005      	add	sp, #20
    9576:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys->ltk.ediv = req->ediv;
    9578:	7862      	ldrb	r2, [r4, #1]
    957a:	7823      	ldrb	r3, [r4, #0]
    957c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9580:	8303      	strh	r3, [r0, #24]
		keys->ltk.rand = req->rand;
    9582:	f8d4 2002 	ldr.w	r2, [r4, #2]
    9586:	f8d4 3006 	ldr.w	r3, [r4, #6]
    958a:	6143      	str	r3, [r0, #20]
    958c:	6102      	str	r2, [r0, #16]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    958e:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    9592:	f023 0301 	bic.w	r3, r3, #1
    9596:	f885 3172 	strb.w	r3, [r5, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    959a:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    959e:	079a      	lsls	r2, r3, #30
    95a0:	d518      	bpl.n	95d4 <smp_master_ident+0xa0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    95a2:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    95a4:	f105 0094 	add.w	r0, r5, #148	; 0x94
    95a8:	f7ff fa19 	bl	89de <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    95ac:	78f3      	ldrb	r3, [r6, #3]
    95ae:	b92b      	cbnz	r3, 95bc <smp_master_ident+0x88>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    95b0:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    95b4:	b913      	cbnz	r3, 95bc <smp_master_ident+0x88>
		bt_smp_distribute_keys(smp);
    95b6:	4628      	mov	r0, r5
    95b8:	f7ff fcde 	bl	8f78 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    95bc:	f8d5 4170 	ldr.w	r4, [r5, #368]	; 0x170
    95c0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    95c4:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    95c8:	b914      	cbnz	r4, 95d0 <smp_master_ident+0x9c>
	smp_reset(smp);
    95ca:	4628      	mov	r0, r5
    95cc:	f7ff fd95 	bl	90fa <smp_reset>
	return 0;
    95d0:	2000      	movs	r0, #0
    95d2:	e7cf      	b.n	9574 <smp_master_ident+0x40>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    95d4:	075b      	lsls	r3, r3, #29
    95d6:	d5e9      	bpl.n	95ac <smp_master_ident+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    95d8:	210a      	movs	r1, #10
    95da:	e7e3      	b.n	95a4 <smp_master_ident+0x70>
    95dc:	0001868d 	.word	0x0001868d
    95e0:	00019a84 	.word	0x00019a84
    95e4:	0001a5f7 	.word	0x0001a5f7
    95e8:	00019a8b 	.word	0x00019a8b
    95ec:	0001a9aa 	.word	0x0001a9aa

000095f0 <bt_smp_connected>:
{
    95f0:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    95f2:	4905      	ldr	r1, [pc, #20]	; (9608 <bt_smp_connected+0x18>)
{
    95f4:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    95f6:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    95fa:	f00e fb63 	bl	17cc4 <k_delayed_work_init>
	smp_reset(smp);
    95fe:	4620      	mov	r0, r4
}
    9600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    9604:	f7ff bd79 	b.w	90fa <smp_reset>
    9608:	00009415 	.word	0x00009415

0000960c <ident_sent>:
{
    960c:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
    960e:	7883      	ldrb	r3, [r0, #2]
    9610:	b99b      	cbnz	r3, 963a <ident_sent+0x2e>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    9612:	2106      	movs	r1, #6
    9614:	f7fc fd86 	bl	6124 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    9618:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
    961c:	f022 0201 	bic.w	r2, r2, #1
    9620:	f880 2171 	strb.w	r2, [r0, #369]	; 0x171
		if (!smp->local_dist && !smp->remote_dist) {
    9624:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
    9628:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    962c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9630:	b91b      	cbnz	r3, 963a <ident_sent+0x2e>
}
    9632:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	smp_reset(smp);
    9636:	f7ff bd60 	b.w	90fa <smp_reset>
    963a:	bd08      	pop	{r3, pc}

0000963c <smp_send_pairing_confirm>:
{
    963c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    963e:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
{
    9642:	4604      	mov	r4, r0
	switch (smp->method) {
    9644:	2b03      	cmp	r3, #3
    9646:	d824      	bhi.n	9692 <smp_send_pairing_confirm+0x56>
    9648:	e8df f003 	tbb	[pc, r3]
    964c:	25020225 	.word	0x25020225
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9650:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    9654:	f8d0 516c 	ldr.w	r5, [r0, #364]	; 0x16c
    9658:	40dd      	lsrs	r5, r3
    965a:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    965e:	f065 057f 	orn	r5, r5, #127	; 0x7f
    9662:	b2ed      	uxtb	r5, r5
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    9664:	2003      	movs	r0, #3
    9666:	f7ff fa93 	bl	8b90 <smp_create_pdu.isra.2>
	if (!buf) {
    966a:	4606      	mov	r6, r0
    966c:	b188      	cbz	r0, 9692 <smp_send_pairing_confirm+0x56>
	req = net_buf_add(buf, sizeof(*req));
    966e:	2110      	movs	r1, #16
    9670:	3008      	adds	r0, #8
    9672:	f00d fb85 	bl	16d80 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    9676:	462b      	mov	r3, r5
    9678:	9000      	str	r0, [sp, #0]
    967a:	f104 02bb 	add.w	r2, r4, #187	; 0xbb
    967e:	f104 01eb 	add.w	r1, r4, #235	; 0xeb
    9682:	4810      	ldr	r0, [pc, #64]	; (96c4 <smp_send_pairing_confirm+0x88>)
    9684:	f7ff fb43 	bl	8d0e <smp_f4>
    9688:	4605      	mov	r5, r0
    968a:	b130      	cbz	r0, 969a <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
    968c:	4630      	mov	r0, r6
    968e:	f00d fb45 	bl	16d1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    9692:	2008      	movs	r0, #8
    9694:	e014      	b.n	96c0 <smp_send_pairing_confirm+0x84>
		r = 0;
    9696:	2500      	movs	r5, #0
    9698:	e7e4      	b.n	9664 <smp_send_pairing_confirm+0x28>
	smp_send(smp, buf, NULL);
    969a:	4602      	mov	r2, r0
    969c:	4631      	mov	r1, r6
    969e:	4620      	mov	r0, r4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    96a0:	3498      	adds	r4, #152	; 0x98
    96a2:	f7ff fb59 	bl	8d58 <smp_send>
    96a6:	f3bf 8f5b 	dmb	ish
    96aa:	e854 3f00 	ldrex	r3, [r4]
    96ae:	f023 0301 	bic.w	r3, r3, #1
    96b2:	e844 3200 	strex	r2, r3, [r4]
    96b6:	2a00      	cmp	r2, #0
    96b8:	d1f7      	bne.n	96aa <smp_send_pairing_confirm+0x6e>
    96ba:	f3bf 8f5b 	dmb	ish
	return 0;
    96be:	4628      	mov	r0, r5
}
    96c0:	b002      	add	sp, #8
    96c2:	bd70      	pop	{r4, r5, r6, pc}
    96c4:	200008a9 	.word	0x200008a9

000096c8 <smp_public_key>:
{
    96c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    96ca:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    96cc:	f100 05eb 	add.w	r5, r0, #235	; 0xeb
{
    96d0:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    96d2:	2220      	movs	r2, #32
    96d4:	4631      	mov	r1, r6
    96d6:	4628      	mov	r0, r5
    96d8:	f7f6 ff96 	bl	608 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    96dc:	2220      	movs	r2, #32
    96de:	18b1      	adds	r1, r6, r2
    96e0:	f204 100b 	addw	r0, r4, #267	; 0x10b
    96e4:	f7f6 ff90 	bl	608 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    96e8:	2240      	movs	r2, #64	; 0x40
    96ea:	492f      	ldr	r1, [pc, #188]	; (97a8 <smp_public_key+0xe0>)
    96ec:	4628      	mov	r0, r5
    96ee:	f7f6 ff76 	bl	5de <memcmp>
    96f2:	b968      	cbnz	r0, 9710 <smp_public_key+0x48>
		BT_INFO("Remote is using Debug Public key");
    96f4:	4b2d      	ldr	r3, [pc, #180]	; (97ac <smp_public_key+0xe4>)
    96f6:	9301      	str	r3, [sp, #4]
    96f8:	9300      	str	r3, [sp, #0]
    96fa:	492d      	ldr	r1, [pc, #180]	; (97b0 <smp_public_key+0xe8>)
    96fc:	4b2d      	ldr	r3, [pc, #180]	; (97b4 <smp_public_key+0xec>)
    96fe:	4a2e      	ldr	r2, [pc, #184]	; (97b8 <smp_public_key+0xf0>)
    9700:	482e      	ldr	r0, [pc, #184]	; (97bc <smp_public_key+0xf4>)
    9702:	f7f7 ffed 	bl	16e0 <printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    9706:	210b      	movs	r1, #11
    9708:	f104 0098 	add.w	r0, r4, #152	; 0x98
    970c:	f7ff f967 	bl	89de <atomic_set_bit>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9710:	6823      	ldr	r3, [r4, #0]
    9712:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9714:	b9b3      	cbnz	r3, 9744 <smp_public_key+0x7c>
		switch (smp->method) {
    9716:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    971a:	2b03      	cmp	r3, #3
    971c:	d81a      	bhi.n	9754 <smp_public_key+0x8c>
    971e:	e8df f003 	tbb	[pc, r3]
    9722:	3802      	.short	0x3802
    9724:	0213      	.short	0x0213
			atomic_set_bit(&smp->allowed_cmds,
    9726:	2103      	movs	r1, #3
    9728:	f104 0094 	add.w	r0, r4, #148	; 0x94
    972c:	f7ff f957 	bl	89de <atomic_set_bit>
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    9730:	4923      	ldr	r1, [pc, #140]	; (97c0 <smp_public_key+0xf8>)
    9732:	4628      	mov	r0, r5
    9734:	f7fb fba8 	bl	4e88 <bt_dh_key_gen>
    9738:	b960      	cbnz	r0, 9754 <smp_public_key+0x8c>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    973a:	2107      	movs	r1, #7
    973c:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9740:	f7ff f94d 	bl	89de <atomic_set_bit>
	return 0;
    9744:	2000      	movs	r0, #0
    9746:	e022      	b.n	978e <smp_public_key+0xc6>
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9748:	2104      	movs	r1, #4
    974a:	f504 70b6 	add.w	r0, r4, #364	; 0x16c
    974e:	f001 fe7f 	bl	b450 <bt_rand>
    9752:	b108      	cbz	r0, 9758 <smp_public_key+0x90>
			return BT_SMP_ERR_UNSPECIFIED;
    9754:	2008      	movs	r0, #8
    9756:	e01a      	b.n	978e <smp_public_key+0xc6>
	smp->passkey %= 1000000;
    9758:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
    975c:	4b19      	ldr	r3, [pc, #100]	; (97c4 <smp_public_key+0xfc>)
    975e:	fbb2 f1f3 	udiv	r1, r2, r3
    9762:	fb03 2111 	mls	r1, r3, r1, r2
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9766:	4b18      	ldr	r3, [pc, #96]	; (97c8 <smp_public_key+0x100>)
	smp->passkey_round = 0;
    9768:	f884 0170 	strb.w	r0, [r4, #368]	; 0x170
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    976c:	4626      	mov	r6, r4
    976e:	681b      	ldr	r3, [r3, #0]
    9770:	f856 0b94 	ldr.w	r0, [r6], #148
	smp->passkey %= 1000000;
    9774:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9778:	681b      	ldr	r3, [r3, #0]
    977a:	4798      	blx	r3
			atomic_set_bit(&smp->allowed_cmds,
    977c:	4630      	mov	r0, r6
    977e:	2103      	movs	r1, #3
    9780:	f7ff f92d 	bl	89de <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    9784:	4620      	mov	r0, r4
    9786:	f7ff ff59 	bl	963c <smp_send_pairing_confirm>
			if (err) {
    978a:	2800      	cmp	r0, #0
    978c:	d0d0      	beq.n	9730 <smp_public_key+0x68>
}
    978e:	b002      	add	sp, #8
    9790:	bd70      	pop	{r4, r5, r6, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9792:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9796:	2109      	movs	r1, #9
    9798:	f7ff f921 	bl	89de <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    979c:	4b0a      	ldr	r3, [pc, #40]	; (97c8 <smp_public_key+0x100>)
    979e:	6820      	ldr	r0, [r4, #0]
    97a0:	681b      	ldr	r3, [r3, #0]
    97a2:	685b      	ldr	r3, [r3, #4]
    97a4:	4798      	blx	r3
    97a6:	e7c3      	b.n	9730 <smp_public_key+0x68>
    97a8:	0001a914 	.word	0x0001a914
    97ac:	0001868d 	.word	0x0001868d
    97b0:	00019a8b 	.word	0x00019a8b
    97b4:	0001a660 	.word	0x0001a660
    97b8:	0001917d 	.word	0x0001917d
    97bc:	0001aa84 	.word	0x0001aa84
    97c0:	0000918d 	.word	0x0000918d
    97c4:	000f4240 	.word	0x000f4240
    97c8:	20004c78 	.word	0x20004c78

000097cc <smp_c1>:
{
    97cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    97d0:	b089      	sub	sp, #36	; 0x24
    97d2:	461f      	mov	r7, r3
    97d4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    97d8:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	p1[0] = ia->type;
    97dc:	f898 3000 	ldrb.w	r3, [r8]
    97e0:	f88d 3000 	strb.w	r3, [sp]
{
    97e4:	4606      	mov	r6, r0
	p1[1] = ra->type;
    97e6:	f899 3000 	ldrb.w	r3, [r9]
    97ea:	f88d 3001 	strb.w	r3, [sp, #1]
{
    97ee:	460c      	mov	r4, r1
	memcpy(p1 + 2, preq, 7);
    97f0:	f10d 0002 	add.w	r0, sp, #2
{
    97f4:	4611      	mov	r1, r2
	memcpy(p1 + 2, preq, 7);
    97f6:	2207      	movs	r2, #7
{
    97f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
	memcpy(p1 + 2, preq, 7);
    97fa:	f7f6 ff05 	bl	608 <memcpy>
	memcpy(p1 + 9, pres, 7);
    97fe:	2207      	movs	r2, #7
    9800:	4639      	mov	r1, r7
    9802:	f10d 0009 	add.w	r0, sp, #9
    9806:	f7f6 feff 	bl	608 <memcpy>
    980a:	2300      	movs	r3, #0
		*r++ = *p++ ^ *q++;
    980c:	f814 2b01 	ldrb.w	r2, [r4], #1
    9810:	f81d 1003 	ldrb.w	r1, [sp, r3]
    9814:	404a      	eors	r2, r1
    9816:	54ea      	strb	r2, [r5, r3]
    9818:	3301      	adds	r3, #1
	while (len--) {
    981a:	2b10      	cmp	r3, #16
    981c:	d1f6      	bne.n	980c <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
    981e:	462a      	mov	r2, r5
    9820:	4629      	mov	r1, r5
    9822:	4630      	mov	r0, r6
    9824:	f001 fe30 	bl	b488 <bt_encrypt_le>
	if (err) {
    9828:	4604      	mov	r4, r0
    982a:	bb08      	cbnz	r0, 9870 <smp_c1+0xa4>
	memcpy(p2, ra->a.val, 6);
    982c:	af04      	add	r7, sp, #16
    982e:	2206      	movs	r2, #6
    9830:	f109 0101 	add.w	r1, r9, #1
    9834:	4638      	mov	r0, r7
    9836:	f7f6 fee7 	bl	608 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    983a:	2206      	movs	r2, #6
    983c:	f108 0101 	add.w	r1, r8, #1
    9840:	f10d 0016 	add.w	r0, sp, #22
    9844:	f7f6 fee0 	bl	608 <memcpy>
	memset(p2 + 12, 0, 4);
    9848:	2204      	movs	r2, #4
    984a:	4621      	mov	r1, r4
    984c:	a807      	add	r0, sp, #28
    984e:	f7f6 ff07 	bl	660 <memset>
    9852:	1e6b      	subs	r3, r5, #1
		*r++ = *p++ ^ *q++;
    9854:	785a      	ldrb	r2, [r3, #1]
    9856:	5d39      	ldrb	r1, [r7, r4]
    9858:	3401      	adds	r4, #1
    985a:	404a      	eors	r2, r1
	while (len--) {
    985c:	2c10      	cmp	r4, #16
		*r++ = *p++ ^ *q++;
    985e:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (len--) {
    9862:	d1f7      	bne.n	9854 <smp_c1+0x88>
	return bt_encrypt_le(k, enc_data, enc_data);
    9864:	462a      	mov	r2, r5
    9866:	4629      	mov	r1, r5
    9868:	4630      	mov	r0, r6
    986a:	f001 fe0d 	bl	b488 <bt_encrypt_le>
    986e:	4604      	mov	r4, r0
}
    9870:	4620      	mov	r0, r4
    9872:	b009      	add	sp, #36	; 0x24
    9874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00009878 <legacy_send_pairing_confirm>:
{
    9878:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    987a:	6805      	ldr	r5, [r0, #0]
{
    987c:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    987e:	2003      	movs	r0, #3
    9880:	f7ff f986 	bl	8b90 <smp_create_pdu.isra.2>
	if (!buf) {
    9884:	4606      	mov	r6, r0
    9886:	b1c0      	cbz	r0, 98ba <legacy_send_pairing_confirm+0x42>
	req = net_buf_add(buf, sizeof(*req));
    9888:	2110      	movs	r1, #16
    988a:	3008      	adds	r0, #8
    988c:	f00d fa78 	bl	16d80 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    9890:	f105 0356 	add.w	r3, r5, #86	; 0x56
    9894:	354f      	adds	r5, #79	; 0x4f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    9896:	9002      	str	r0, [sp, #8]
    9898:	9301      	str	r3, [sp, #4]
    989a:	9500      	str	r5, [sp, #0]
    989c:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
    98a0:	f104 029d 	add.w	r2, r4, #157	; 0x9d
    98a4:	f104 01bb 	add.w	r1, r4, #187	; 0xbb
    98a8:	f104 00db 	add.w	r0, r4, #219	; 0xdb
    98ac:	f7ff ff8e 	bl	97cc <smp_c1>
    98b0:	4605      	mov	r5, r0
    98b2:	b120      	cbz	r0, 98be <legacy_send_pairing_confirm+0x46>
		net_buf_unref(buf);
    98b4:	4630      	mov	r0, r6
    98b6:	f00d fa31 	bl	16d1c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    98ba:	2008      	movs	r0, #8
    98bc:	e012      	b.n	98e4 <legacy_send_pairing_confirm+0x6c>
	smp_send(smp, buf, NULL);
    98be:	4602      	mov	r2, r0
    98c0:	4631      	mov	r1, r6
    98c2:	4620      	mov	r0, r4
    98c4:	3498      	adds	r4, #152	; 0x98
    98c6:	f7ff fa47 	bl	8d58 <smp_send>
    98ca:	f3bf 8f5b 	dmb	ish
    98ce:	e854 3f00 	ldrex	r3, [r4]
    98d2:	f023 0301 	bic.w	r3, r3, #1
    98d6:	e844 3200 	strex	r2, r3, [r4]
    98da:	2a00      	cmp	r2, #0
    98dc:	d1f7      	bne.n	98ce <legacy_send_pairing_confirm+0x56>
    98de:	f3bf 8f5b 	dmb	ish
	return 0;
    98e2:	4628      	mov	r0, r5
}
    98e4:	b004      	add	sp, #16
    98e6:	bd70      	pop	{r4, r5, r6, pc}

000098e8 <smp_pairing_rsp>:
{
    98e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    98ea:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    98ec:	78eb      	ldrb	r3, [r5, #3]
    98ee:	3b07      	subs	r3, #7
    98f0:	2b09      	cmp	r3, #9
{
    98f2:	b087      	sub	sp, #28
    98f4:	4606      	mov	r6, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    98f6:	f200 8111 	bhi.w	9b1c <smp_pairing_rsp+0x234>
	smp->local_dist &= rsp->init_key_dist;
    98fa:	792a      	ldrb	r2, [r5, #4]
    98fc:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
    9900:	4013      	ands	r3, r2
    9902:	f880 3171 	strb.w	r3, [r0, #369]	; 0x171
	smp->remote_dist &= rsp->resp_key_dist;
    9906:	796a      	ldrb	r2, [r5, #5]
    9908:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
    990c:	4013      	ands	r3, r2
    990e:	f880 3172 	strb.w	r3, [r0, #370]	; 0x172
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    9912:	2302      	movs	r3, #2
    9914:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    9918:	2206      	movs	r2, #6
    991a:	4629      	mov	r1, r5
    991c:	30a5      	adds	r0, #165	; 0xa5
    991e:	f7f6 fe73 	bl	608 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    9922:	78ab      	ldrb	r3, [r5, #2]
    9924:	f013 0f08 	tst.w	r3, #8
    9928:	f106 0798 	add.w	r7, r6, #152	; 0x98
    992c:	d007      	beq.n	993e <smp_pairing_rsp+0x56>
    992e:	f896 30a0 	ldrb.w	r3, [r6, #160]	; 0xa0
    9932:	071c      	lsls	r4, r3, #28
    9934:	d503      	bpl.n	993e <smp_pairing_rsp+0x56>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    9936:	2105      	movs	r1, #5
    9938:	4638      	mov	r0, r7
    993a:	f7ff f850 	bl	89de <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    993e:	78ab      	ldrb	r3, [r5, #2]
    9940:	0698      	lsls	r0, r3, #26
    9942:	d507      	bpl.n	9954 <smp_pairing_rsp+0x6c>
    9944:	f896 30a0 	ldrb.w	r3, [r6, #160]	; 0xa0
    9948:	0699      	lsls	r1, r3, #26
    994a:	d503      	bpl.n	9954 <smp_pairing_rsp+0x6c>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    994c:	2111      	movs	r1, #17
    994e:	4638      	mov	r0, r7
    9950:	f7ff f845 	bl	89de <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    9954:	78ab      	ldrb	r3, [r5, #2]
    9956:	07da      	lsls	r2, r3, #31
    9958:	d507      	bpl.n	996a <smp_pairing_rsp+0x82>
    995a:	f896 30a0 	ldrb.w	r3, [r6, #160]	; 0xa0
    995e:	07db      	lsls	r3, r3, #31
    9960:	d503      	bpl.n	996a <smp_pairing_rsp+0x82>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    9962:	210a      	movs	r1, #10
    9964:	4638      	mov	r0, r7
    9966:	f7ff f83a 	bl	89de <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    996a:	2105      	movs	r1, #5
    996c:	4638      	mov	r0, r7
    996e:	f7ff f829 	bl	89c4 <atomic_test_bit>
    9972:	782d      	ldrb	r5, [r5, #0]
    9974:	2800      	cmp	r0, #0
    9976:	f040 8095 	bne.w	9aa4 <smp_pairing_rsp+0x1bc>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    997a:	2d04      	cmp	r5, #4
    997c:	d82c      	bhi.n	99d8 <smp_pairing_rsp+0xf0>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    997e:	f896 40a0 	ldrb.w	r4, [r6, #160]	; 0xa0
    9982:	f896 00a7 	ldrb.w	r0, [r6, #167]	; 0xa7
    9986:	4304      	orrs	r4, r0
    9988:	f014 0404 	ands.w	r4, r4, #4
    998c:	d00e      	beq.n	99ac <smp_pairing_rsp+0xc4>
	method = gen_method_legacy[remote_io][get_io_capa()];
    998e:	f7fe ffcb 	bl	8928 <get_io_capa>
    9992:	4b63      	ldr	r3, [pc, #396]	; (9b20 <smp_pairing_rsp+0x238>)
    9994:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9998:	441d      	add	r5, r3
    999a:	5c2c      	ldrb	r4, [r5, r0]
	if (method == PASSKEY_ROLE) {
    999c:	2c04      	cmp	r4, #4
    999e:	d105      	bne.n	99ac <smp_pairing_rsp+0xc4>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    99a0:	6833      	ldr	r3, [r6, #0]
    99a2:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    99a4:	2b00      	cmp	r3, #0
    99a6:	bf0c      	ite	eq
    99a8:	2402      	moveq	r4, #2
    99aa:	2401      	movne	r4, #1
	smp->method = legacy_get_pair_method(smp, remote_io);
    99ac:	f886 409c 	strb.w	r4, [r6, #156]	; 0x9c
	if (smp->method == JUST_WORKS &&
    99b0:	b9a4      	cbnz	r4, 99dc <smp_pairing_rsp+0xf4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    99b2:	210c      	movs	r1, #12
    99b4:	4638      	mov	r0, r7
    99b6:	f7ff f805 	bl	89c4 <atomic_test_bit>
	if (smp->method == JUST_WORKS &&
    99ba:	b178      	cbz	r0, 99dc <smp_pairing_rsp+0xf4>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    99bc:	4d59      	ldr	r5, [pc, #356]	; (9b24 <smp_pairing_rsp+0x23c>)
    99be:	682b      	ldr	r3, [r5, #0]
    99c0:	b163      	cbz	r3, 99dc <smp_pairing_rsp+0xf4>
	    bt_auth && bt_auth->pairing_confirm) {
    99c2:	691b      	ldr	r3, [r3, #16]
    99c4:	b153      	cbz	r3, 99dc <smp_pairing_rsp+0xf4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    99c6:	4638      	mov	r0, r7
    99c8:	2109      	movs	r1, #9
    99ca:	f7ff f808 	bl	89de <atomic_set_bit>
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    99ce:	682b      	ldr	r3, [r5, #0]
    99d0:	6830      	ldr	r0, [r6, #0]
    99d2:	691b      	ldr	r3, [r3, #16]
    99d4:	4798      	blx	r3
			return 0;
    99d6:	e062      	b.n	9a9e <smp_pairing_rsp+0x1b6>
		return JUST_WORKS;
    99d8:	4604      	mov	r4, r0
    99da:	e7e7      	b.n	99ac <smp_pairing_rsp+0xc4>
	struct bt_conn *conn = smp->chan.chan.conn;
    99dc:	6834      	ldr	r4, [r6, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    99de:	f104 0048 	add.w	r0, r4, #72	; 0x48
    99e2:	f000 fcc5 	bl	a370 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    99e6:	b190      	cbz	r0, 9a0e <smp_pairing_rsp+0x126>
    99e8:	2100      	movs	r1, #0
    99ea:	3008      	adds	r0, #8
    99ec:	f7fe ffea 	bl	89c4 <atomic_test_bit>
    99f0:	b168      	cbz	r0, 9a0e <smp_pairing_rsp+0x126>
    99f2:	f896 309c 	ldrb.w	r3, [r6, #156]	; 0x9c
    99f6:	b953      	cbnz	r3, 9a0e <smp_pairing_rsp+0x126>
		BT_ERR("JustWorks failed, authenticated keys present");
    99f8:	4b4b      	ldr	r3, [pc, #300]	; (9b28 <smp_pairing_rsp+0x240>)
    99fa:	9301      	str	r3, [sp, #4]
    99fc:	9300      	str	r3, [sp, #0]
    99fe:	4a4b      	ldr	r2, [pc, #300]	; (9b2c <smp_pairing_rsp+0x244>)
    9a00:	4b4b      	ldr	r3, [pc, #300]	; (9b30 <smp_pairing_rsp+0x248>)
    9a02:	494c      	ldr	r1, [pc, #304]	; (9b34 <smp_pairing_rsp+0x24c>)
    9a04:	484c      	ldr	r0, [pc, #304]	; (9b38 <smp_pairing_rsp+0x250>)
    9a06:	f7f7 fe6b 	bl	16e0 <printk>
    9a0a:	2408      	movs	r4, #8
    9a0c:	e047      	b.n	9a9e <smp_pairing_rsp+0x1b6>
	switch (smp->method) {
    9a0e:	f896 309c 	ldrb.w	r3, [r6, #156]	; 0x9c
    9a12:	2b01      	cmp	r3, #1
    9a14:	d029      	beq.n	9a6a <smp_pairing_rsp+0x182>
    9a16:	d319      	bcc.n	9a4c <smp_pairing_rsp+0x164>
    9a18:	2b02      	cmp	r3, #2
    9a1a:	d130      	bne.n	9a7e <smp_pairing_rsp+0x196>
		if (bt_rand(&passkey, sizeof(passkey))) {
    9a1c:	2104      	movs	r1, #4
    9a1e:	a805      	add	r0, sp, #20
    9a20:	f001 fd16 	bl	b450 <bt_rand>
    9a24:	2800      	cmp	r0, #0
    9a26:	d1f0      	bne.n	9a0a <smp_pairing_rsp+0x122>
		passkey %= 1000000;
    9a28:	9a05      	ldr	r2, [sp, #20]
    9a2a:	4b44      	ldr	r3, [pc, #272]	; (9b3c <smp_pairing_rsp+0x254>)
    9a2c:	fbb2 f1f3 	udiv	r1, r2, r3
    9a30:	fb03 2111 	mls	r1, r3, r1, r2
		bt_auth->passkey_display(conn, passkey);
    9a34:	4b3b      	ldr	r3, [pc, #236]	; (9b24 <smp_pairing_rsp+0x23c>)
		passkey %= 1000000;
    9a36:	9105      	str	r1, [sp, #20]
		bt_auth->passkey_display(conn, passkey);
    9a38:	681b      	ldr	r3, [r3, #0]
    9a3a:	4620      	mov	r0, r4
    9a3c:	681b      	ldr	r3, [r3, #0]
    9a3e:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    9a40:	2204      	movs	r2, #4
    9a42:	a905      	add	r1, sp, #20
    9a44:	f106 00db 	add.w	r0, r6, #219	; 0xdb
    9a48:	f7f6 fdde 	bl	608 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    9a4c:	2109      	movs	r1, #9
    9a4e:	4638      	mov	r0, r7
    9a50:	f7fe ffb8 	bl	89c4 <atomic_test_bit>
    9a54:	b9f0      	cbnz	r0, 9a94 <smp_pairing_rsp+0x1ac>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    9a56:	f106 0094 	add.w	r0, r6, #148	; 0x94
    9a5a:	2103      	movs	r1, #3
    9a5c:	f7fe ffbf 	bl	89de <atomic_set_bit>
		return legacy_send_pairing_confirm(smp);
    9a60:	4630      	mov	r0, r6
    9a62:	f7ff ff09 	bl	9878 <legacy_send_pairing_confirm>
	return sc_send_public_key(smp);
    9a66:	4604      	mov	r4, r0
    9a68:	e019      	b.n	9a9e <smp_pairing_rsp+0x1b6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9a6a:	4638      	mov	r0, r7
    9a6c:	2109      	movs	r1, #9
    9a6e:	f7fe ffb6 	bl	89de <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    9a72:	4b2c      	ldr	r3, [pc, #176]	; (9b24 <smp_pairing_rsp+0x23c>)
    9a74:	681b      	ldr	r3, [r3, #0]
    9a76:	4620      	mov	r0, r4
    9a78:	685b      	ldr	r3, [r3, #4]
    9a7a:	4798      	blx	r3
    9a7c:	e7e6      	b.n	9a4c <smp_pairing_rsp+0x164>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    9a7e:	4a2a      	ldr	r2, [pc, #168]	; (9b28 <smp_pairing_rsp+0x240>)
    9a80:	9202      	str	r2, [sp, #8]
    9a82:	e88d 000c 	stmia.w	sp, {r2, r3}
    9a86:	492b      	ldr	r1, [pc, #172]	; (9b34 <smp_pairing_rsp+0x24c>)
    9a88:	4b29      	ldr	r3, [pc, #164]	; (9b30 <smp_pairing_rsp+0x248>)
    9a8a:	4a28      	ldr	r2, [pc, #160]	; (9b2c <smp_pairing_rsp+0x244>)
    9a8c:	482c      	ldr	r0, [pc, #176]	; (9b40 <smp_pairing_rsp+0x258>)
    9a8e:	f7f7 fe27 	bl	16e0 <printk>
    9a92:	e7ba      	b.n	9a0a <smp_pairing_rsp+0x122>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    9a94:	2100      	movs	r1, #0
    9a96:	4638      	mov	r0, r7
    9a98:	f7fe ffa1 	bl	89de <atomic_set_bit>
	return 0;
    9a9c:	2400      	movs	r4, #0
}
    9a9e:	4620      	mov	r0, r4
    9aa0:	b007      	add	sp, #28
    9aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9aa4:	2d04      	cmp	r5, #4
    9aa6:	d82e      	bhi.n	9b06 <smp_pairing_rsp+0x21e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9aa8:	f896 40a0 	ldrb.w	r4, [r6, #160]	; 0xa0
    9aac:	f896 00a7 	ldrb.w	r0, [r6, #167]	; 0xa7
    9ab0:	4304      	orrs	r4, r0
    9ab2:	f014 0404 	ands.w	r4, r4, #4
    9ab6:	d006      	beq.n	9ac6 <smp_pairing_rsp+0x1de>
	return gen_method_sc[remote_io][get_io_capa()];
    9ab8:	f7fe ff36 	bl	8928 <get_io_capa>
    9abc:	4b21      	ldr	r3, [pc, #132]	; (9b44 <smp_pairing_rsp+0x25c>)
    9abe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    9ac2:	441d      	add	r5, r3
    9ac4:	5c2c      	ldrb	r4, [r5, r0]
	smp->method = get_pair_method(smp, rsp->io_capability);
    9ac6:	f886 409c 	strb.w	r4, [r6, #156]	; 0x9c
	smp->local_dist &= SEND_KEYS_SC;
    9aca:	2300      	movs	r3, #0
    9acc:	f886 3171 	strb.w	r3, [r6, #369]	; 0x171
	smp->remote_dist &= RECV_KEYS_SC;
    9ad0:	f896 3172 	ldrb.w	r3, [r6, #370]	; 0x172
    9ad4:	f003 0302 	and.w	r3, r3, #2
    9ad8:	f886 3172 	strb.w	r3, [r6, #370]	; 0x172
	if (smp->method == JUST_WORKS) {
    9adc:	b95c      	cbnz	r4, 9af6 <smp_pairing_rsp+0x20e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    9ade:	210c      	movs	r1, #12
    9ae0:	4638      	mov	r0, r7
    9ae2:	f7fe ff6f 	bl	89c4 <atomic_test_bit>
    9ae6:	b130      	cbz	r0, 9af6 <smp_pairing_rsp+0x20e>
    9ae8:	4d0e      	ldr	r5, [pc, #56]	; (9b24 <smp_pairing_rsp+0x23c>)
    9aea:	682b      	ldr	r3, [r5, #0]
    9aec:	b11b      	cbz	r3, 9af6 <smp_pairing_rsp+0x20e>
		    bt_auth && bt_auth->pairing_confirm) {
    9aee:	691b      	ldr	r3, [r3, #16]
    9af0:	2b00      	cmp	r3, #0
    9af2:	f47f af68 	bne.w	99c6 <smp_pairing_rsp+0xde>
	if (!sc_local_pkey_valid) {
    9af6:	4b14      	ldr	r3, [pc, #80]	; (9b48 <smp_pairing_rsp+0x260>)
    9af8:	781c      	ldrb	r4, [r3, #0]
    9afa:	b934      	cbnz	r4, 9b0a <smp_pairing_rsp+0x222>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    9afc:	2106      	movs	r1, #6
    9afe:	4638      	mov	r0, r7
    9b00:	f7fe ff6d 	bl	89de <atomic_set_bit>
		return 0;
    9b04:	e7cb      	b.n	9a9e <smp_pairing_rsp+0x1b6>
		return JUST_WORKS;
    9b06:	2400      	movs	r4, #0
    9b08:	e7dd      	b.n	9ac6 <smp_pairing_rsp+0x1de>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    9b0a:	f106 0094 	add.w	r0, r6, #148	; 0x94
    9b0e:	210c      	movs	r1, #12
    9b10:	f7fe ff65 	bl	89de <atomic_set_bit>
	return sc_send_public_key(smp);
    9b14:	4630      	mov	r0, r6
    9b16:	f7ff f9e5 	bl	8ee4 <sc_send_public_key>
    9b1a:	e7a4      	b.n	9a66 <smp_pairing_rsp+0x17e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    9b1c:	2406      	movs	r4, #6
    9b1e:	e7be      	b.n	9a9e <smp_pairing_rsp+0x1b6>
    9b20:	0001a860 	.word	0x0001a860
    9b24:	20004c78 	.word	0x20004c78
    9b28:	0001868d 	.word	0x0001868d
    9b2c:	00019a84 	.word	0x00019a84
    9b30:	0001a5be 	.word	0x0001a5be
    9b34:	00019a8b 	.word	0x00019a8b
    9b38:	0001aa1b 	.word	0x0001aa1b
    9b3c:	000f4240 	.word	0x000f4240
    9b40:	0001aa58 	.word	0x0001aa58
    9b44:	0001a879 	.word	0x0001a879
    9b48:	200008a8 	.word	0x200008a8

00009b4c <smp_pairing_random>:
{
    9b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b50:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    9b52:	f100 08cb 	add.w	r8, r0, #203	; 0xcb
{
    9b56:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    9b58:	2210      	movs	r2, #16
    9b5a:	6889      	ldr	r1, [r1, #8]
    9b5c:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9b5e:	f104 0698 	add.w	r6, r4, #152	; 0x98
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    9b62:	f7f6 fd51 	bl	608 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9b66:	2105      	movs	r1, #5
    9b68:	4630      	mov	r0, r6
    9b6a:	f7fe ff2b 	bl	89c4 <atomic_test_bit>
    9b6e:	f8d4 9000 	ldr.w	r9, [r4]
    9b72:	2800      	cmp	r0, #0
    9b74:	d153      	bne.n	9c1e <smp_pairing_random+0xd2>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    9b76:	f109 0356 	add.w	r3, r9, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    9b7a:	f104 0adb 	add.w	sl, r4, #219	; 0xdb
    9b7e:	af0a      	add	r7, sp, #40	; 0x28
    9b80:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    9b82:	f109 034f 	add.w	r3, r9, #79	; 0x4f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    9b86:	9300      	str	r3, [sp, #0]
    9b88:	9702      	str	r7, [sp, #8]
    9b8a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
    9b8e:	f104 029d 	add.w	r2, r4, #157	; 0x9d
    9b92:	4641      	mov	r1, r8
    9b94:	4650      	mov	r0, sl
    9b96:	f7ff fe19 	bl	97cc <smp_c1>
	if (err) {
    9b9a:	b108      	cbz	r0, 9ba0 <smp_pairing_random+0x54>
				return BT_SMP_ERR_UNSPECIFIED;
    9b9c:	2508      	movs	r5, #8
    9b9e:	e0ab      	b.n	9cf8 <smp_pairing_random+0x1ac>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    9ba0:	2210      	movs	r2, #16
    9ba2:	4639      	mov	r1, r7
    9ba4:	f104 00ab 	add.w	r0, r4, #171	; 0xab
    9ba8:	f7f6 fd19 	bl	5de <memcmp>
    9bac:	2800      	cmp	r0, #0
    9bae:	f040 80ce 	bne.w	9d4e <smp_pairing_random+0x202>
	    conn->role == BT_HCI_ROLE_MASTER) {
    9bb2:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9bb6:	2d00      	cmp	r5, #0
    9bb8:	f040 80c7 	bne.w	9d4a <smp_pairing_random+0x1fe>
	memcpy(out, r2, 8);
    9bbc:	2208      	movs	r2, #8
    9bbe:	f104 01bb 	add.w	r1, r4, #187	; 0xbb
    9bc2:	4638      	mov	r0, r7
    9bc4:	f7f6 fd20 	bl	608 <memcpy>
	memcpy(out + 8, r1, 8);
    9bc8:	2208      	movs	r2, #8
    9bca:	4641      	mov	r1, r8
    9bcc:	a80c      	add	r0, sp, #48	; 0x30
    9bce:	f7f6 fd1b 	bl	608 <memcpy>
	return bt_encrypt_le(k, out, out);
    9bd2:	463a      	mov	r2, r7
    9bd4:	4639      	mov	r1, r7
    9bd6:	4650      	mov	r0, sl
    9bd8:	f001 fc56 	bl	b488 <bt_encrypt_le>
		if (err) {
    9bdc:	2800      	cmp	r0, #0
    9bde:	d1dd      	bne.n	9b9c <smp_pairing_random+0x50>
	return min(req->max_key_size, rsp->max_key_size);
    9be0:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    9be4:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    9be8:	429a      	cmp	r2, r3
    9bea:	bf94      	ite	ls
    9bec:	9202      	strls	r2, [sp, #8]
    9bee:	9302      	strhi	r3, [sp, #8]
    9bf0:	e88d 00a0 	stmia.w	sp, {r5, r7}
    9bf4:	2200      	movs	r2, #0
    9bf6:	2300      	movs	r3, #0
    9bf8:	4648      	mov	r0, r9
    9bfa:	f7fb fa0d 	bl	5018 <bt_conn_le_start_encryption>
    9bfe:	b148      	cbz	r0, 9c14 <smp_pairing_random+0xc8>
			BT_ERR("Failed to start encryption");
    9c00:	4b54      	ldr	r3, [pc, #336]	; (9d54 <smp_pairing_random+0x208>)
    9c02:	9301      	str	r3, [sp, #4]
    9c04:	9300      	str	r3, [sp, #0]
    9c06:	4a54      	ldr	r2, [pc, #336]	; (9d58 <smp_pairing_random+0x20c>)
    9c08:	4b54      	ldr	r3, [pc, #336]	; (9d5c <smp_pairing_random+0x210>)
    9c0a:	4955      	ldr	r1, [pc, #340]	; (9d60 <smp_pairing_random+0x214>)
    9c0c:	4855      	ldr	r0, [pc, #340]	; (9d64 <smp_pairing_random+0x218>)
    9c0e:	f7f7 fd67 	bl	16e0 <printk>
    9c12:	e7c3      	b.n	9b9c <smp_pairing_random+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    9c14:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9c16:	4630      	mov	r0, r6
    9c18:	f7fe fee1 	bl	89de <atomic_set_bit>
			return 0;
    9c1c:	e06c      	b.n	9cf8 <smp_pairing_random+0x1ac>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9c1e:	f899 5003 	ldrb.w	r5, [r9, #3]
    9c22:	2d00      	cmp	r5, #0
    9c24:	f040 8091 	bne.w	9d4a <smp_pairing_random+0x1fe>
	switch (smp->method) {
    9c28:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    9c2c:	2b03      	cmp	r3, #3
    9c2e:	d8b5      	bhi.n	9b9c <smp_pairing_random+0x50>
    9c30:	e8df f003 	tbb	[pc, r3]
    9c34:	27020227 	.word	0x27020227
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9c38:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    9c3c:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
    9c40:	40d3      	lsrs	r3, r2
    9c42:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    9c46:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9c4a:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    9c4c:	f104 09eb 	add.w	r9, r4, #235	; 0xeb
    9c50:	af0a      	add	r7, sp, #40	; 0x28
    9c52:	9700      	str	r7, [sp, #0]
    9c54:	4642      	mov	r2, r8
    9c56:	4944      	ldr	r1, [pc, #272]	; (9d68 <smp_pairing_random+0x21c>)
    9c58:	4648      	mov	r0, r9
    9c5a:	f7ff f858 	bl	8d0e <smp_f4>
    9c5e:	2800      	cmp	r0, #0
    9c60:	d19c      	bne.n	9b9c <smp_pairing_random+0x50>
	if (memcmp(smp->pcnf, cfm, 16)) {
    9c62:	2210      	movs	r2, #16
    9c64:	4639      	mov	r1, r7
    9c66:	f104 00ab 	add.w	r0, r4, #171	; 0xab
    9c6a:	f7f6 fcb8 	bl	5de <memcmp>
    9c6e:	2800      	cmp	r0, #0
    9c70:	d16d      	bne.n	9d4e <smp_pairing_random+0x202>
		switch (smp->method) {
    9c72:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    9c76:	2b03      	cmp	r3, #3
    9c78:	d890      	bhi.n	9b9c <smp_pairing_random+0x50>
    9c7a:	e8df f003 	tbb	[pc, r3]
    9c7e:	415a      	.short	0x415a
    9c80:	0441      	.short	0x0441
		r = 0;
    9c82:	2300      	movs	r3, #0
    9c84:	e7e2      	b.n	9c4c <smp_pairing_random+0x100>
	sys_memcpy_swap(m, u, 32);
    9c86:	2220      	movs	r2, #32
    9c88:	4937      	ldr	r1, [pc, #220]	; (9d68 <smp_pairing_random+0x21c>)
    9c8a:	4638      	mov	r0, r7
    9c8c:	f7fe fe40 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    9c90:	2220      	movs	r2, #32
    9c92:	4649      	mov	r1, r9
    9c94:	a812      	add	r0, sp, #72	; 0x48
    9c96:	f7fe fe3b 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    9c9a:	2210      	movs	r2, #16
    9c9c:	4641      	mov	r1, r8
    9c9e:	a81a      	add	r0, sp, #104	; 0x68
    9ca0:	f7fe fe36 	bl	8910 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    9ca4:	2210      	movs	r2, #16
    9ca6:	f104 01bb 	add.w	r1, r4, #187	; 0xbb
    9caa:	a806      	add	r0, sp, #24
    9cac:	f7fe fe30 	bl	8910 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    9cb0:	ab06      	add	r3, sp, #24
    9cb2:	2250      	movs	r2, #80	; 0x50
    9cb4:	4639      	mov	r1, r7
    9cb6:	4618      	mov	r0, r3
    9cb8:	f7fe fea5 	bl	8a06 <bt_smp_aes_cmac>
	if (err) {
    9cbc:	2800      	cmp	r0, #0
    9cbe:	f47f af6d 	bne.w	9b9c <smp_pairing_random+0x50>
	memcpy(passkey, xs + 12, 4);
    9cc2:	2204      	movs	r2, #4
    9cc4:	a909      	add	r1, sp, #36	; 0x24
    9cc6:	a805      	add	r0, sp, #20
    9cc8:	f7f6 fc9e 	bl	608 <memcpy>
    9ccc:	9b05      	ldr	r3, [sp, #20]
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    9cce:	4927      	ldr	r1, [pc, #156]	; (9d6c <smp_pairing_random+0x220>)
    9cd0:	ba1b      	rev	r3, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9cd2:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    9cd4:	fbb3 f2f1 	udiv	r2, r3, r1
    9cd8:	fb01 3312 	mls	r3, r1, r2, r3
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9cdc:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    9cde:	9305      	str	r3, [sp, #20]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9ce0:	f7fe fe7d 	bl	89de <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9ce4:	2108      	movs	r1, #8
    9ce6:	4630      	mov	r0, r6
    9ce8:	f7fe fe79 	bl	89de <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    9cec:	4b20      	ldr	r3, [pc, #128]	; (9d70 <smp_pairing_random+0x224>)
    9cee:	9905      	ldr	r1, [sp, #20]
    9cf0:	681b      	ldr	r3, [r3, #0]
    9cf2:	6820      	ldr	r0, [r4, #0]
    9cf4:	689b      	ldr	r3, [r3, #8]
    9cf6:	4798      	blx	r3
}
    9cf8:	4628      	mov	r0, r5
    9cfa:	b01e      	add	sp, #120	; 0x78
    9cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			smp->passkey_round++;
    9d00:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    9d04:	3301      	adds	r3, #1
    9d06:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20) {
    9d08:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    9d0a:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
			if (smp->passkey_round == 20) {
    9d0e:	d010      	beq.n	9d32 <smp_pairing_random+0x1e6>
			if (bt_rand(smp->prnd, 16)) {
    9d10:	2110      	movs	r1, #16
    9d12:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
    9d16:	f001 fb9b 	bl	b450 <bt_rand>
    9d1a:	2800      	cmp	r0, #0
    9d1c:	f47f af3e 	bne.w	9b9c <smp_pairing_random+0x50>
			atomic_set_bit(&smp->allowed_cmds,
    9d20:	f104 0094 	add.w	r0, r4, #148	; 0x94
    9d24:	2103      	movs	r1, #3
    9d26:	f7fe fe5a 	bl	89de <atomic_set_bit>
			smp_send_pairing_confirm(smp);
    9d2a:	4620      	mov	r0, r4
    9d2c:	f7ff fc86 	bl	963c <smp_send_pairing_confirm>
			return 0;
    9d30:	e7e2      	b.n	9cf8 <smp_pairing_random+0x1ac>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    9d32:	2107      	movs	r1, #7
    9d34:	4630      	mov	r0, r6
    9d36:	f7fe fe45 	bl	89c4 <atomic_test_bit>
    9d3a:	b108      	cbz	r0, 9d40 <smp_pairing_random+0x1f4>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    9d3c:	2108      	movs	r1, #8
    9d3e:	e76a      	b.n	9c16 <smp_pairing_random+0xca>
		return compute_and_send_master_dhcheck(smp);
    9d40:	4620      	mov	r0, r4
    9d42:	f7ff f81d 	bl	8d80 <compute_and_send_master_dhcheck>
    9d46:	4605      	mov	r5, r0
    9d48:	e7d6      	b.n	9cf8 <smp_pairing_random+0x1ac>
	return 0;
    9d4a:	2500      	movs	r5, #0
    9d4c:	e7d4      	b.n	9cf8 <smp_pairing_random+0x1ac>
		return BT_SMP_ERR_CONFIRM_FAILED;
    9d4e:	2504      	movs	r5, #4
    9d50:	e7d2      	b.n	9cf8 <smp_pairing_random+0x1ac>
    9d52:	bf00      	nop
    9d54:	0001868d 	.word	0x0001868d
    9d58:	00019a84 	.word	0x00019a84
    9d5c:	0001a5d0 	.word	0x0001a5d0
    9d60:	00019a8b 	.word	0x00019a8b
    9d64:	0001a9f0 	.word	0x0001a9f0
    9d68:	200008a9 	.word	0x200008a9
    9d6c:	000f4240 	.word	0x000f4240
    9d70:	20004c78 	.word	0x20004c78

00009d74 <smp_ident_addr_info>:
{
    9d74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    9d78:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    9d7a:	6804      	ldr	r4, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    9d7c:	7833      	ldrb	r3, [r6, #0]
{
    9d7e:	4605      	mov	r5, r0
    9d80:	b1db      	cbz	r3, 9dba <smp_ident_addr_info+0x46>
	if (!bt_addr_le_is_identity(&req->addr)) {
    9d82:	79b3      	ldrb	r3, [r6, #6]
    9d84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9d88:	2bc0      	cmp	r3, #192	; 0xc0
    9d8a:	d016      	beq.n	9dba <smp_ident_addr_info+0x46>
		BT_ERR("Invalid identity %s for %s",
    9d8c:	4630      	mov	r0, r6
    9d8e:	f7f8 fce5 	bl	275c <bt_addr_le_str>
    9d92:	4605      	mov	r5, r0
    9d94:	f104 0048 	add.w	r0, r4, #72	; 0x48
    9d98:	f7f8 fce0 	bl	275c <bt_addr_le_str>
    9d9c:	4b3e      	ldr	r3, [pc, #248]	; (9e98 <smp_ident_addr_info+0x124>)
    9d9e:	9303      	str	r3, [sp, #12]
    9da0:	9002      	str	r0, [sp, #8]
    9da2:	e88d 0028 	stmia.w	sp, {r3, r5}
    9da6:	4a3d      	ldr	r2, [pc, #244]	; (9e9c <smp_ident_addr_info+0x128>)
    9da8:	4b3d      	ldr	r3, [pc, #244]	; (9ea0 <smp_ident_addr_info+0x12c>)
    9daa:	493e      	ldr	r1, [pc, #248]	; (9ea4 <smp_ident_addr_info+0x130>)
    9dac:	483e      	ldr	r0, [pc, #248]	; (9ea8 <smp_ident_addr_info+0x134>)
    9dae:	f7f7 fc97 	bl	16e0 <printk>
		return BT_SMP_ERR_INVALID_PARAMS;
    9db2:	200a      	movs	r0, #10
}
    9db4:	b004      	add	sp, #16
    9db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9dba:	210a      	movs	r1, #10
    9dbc:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9dc0:	f7fe fe00 	bl	89c4 <atomic_test_bit>
    9dc4:	2800      	cmp	r0, #0
    9dc6:	d042      	beq.n	9e4e <smp_ident_addr_info+0xda>
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    9dc8:	f104 0848 	add.w	r8, r4, #72	; 0x48
    9dcc:	4641      	mov	r1, r8
    9dce:	2002      	movs	r0, #2
    9dd0:	f000 fa8c 	bl	a2ec <bt_keys_get_type>
		if (!keys) {
    9dd4:	4607      	mov	r7, r0
    9dd6:	b970      	cbnz	r0, 9df6 <smp_ident_addr_info+0x82>
			BT_ERR("Unable to get keys for %s",
    9dd8:	4640      	mov	r0, r8
    9dda:	f7f8 fcbf 	bl	275c <bt_addr_le_str>
    9dde:	4b2e      	ldr	r3, [pc, #184]	; (9e98 <smp_ident_addr_info+0x124>)
    9de0:	9302      	str	r3, [sp, #8]
    9de2:	9001      	str	r0, [sp, #4]
    9de4:	9300      	str	r3, [sp, #0]
    9de6:	4a2d      	ldr	r2, [pc, #180]	; (9e9c <smp_ident_addr_info+0x128>)
    9de8:	4b2d      	ldr	r3, [pc, #180]	; (9ea0 <smp_ident_addr_info+0x12c>)
    9dea:	492e      	ldr	r1, [pc, #184]	; (9ea4 <smp_ident_addr_info+0x130>)
    9dec:	482f      	ldr	r0, [pc, #188]	; (9eac <smp_ident_addr_info+0x138>)
    9dee:	f7f7 fc77 	bl	16e0 <printk>
			return BT_SMP_ERR_UNSPECIFIED;
    9df2:	2008      	movs	r0, #8
    9df4:	e7de      	b.n	9db4 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    9df6:	78e3      	ldrb	r3, [r4, #3]
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d149      	bne.n	9e90 <smp_ident_addr_info+0x11c>
			dst = &conn->le.resp_addr;
    9dfc:	f104 0156 	add.w	r1, r4, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    9e00:	780b      	ldrb	r3, [r1, #0]
    9e02:	2b01      	cmp	r3, #1
    9e04:	d120      	bne.n	9e48 <smp_ident_addr_info+0xd4>
		if (bt_addr_le_is_rpa(dst)) {
    9e06:	798b      	ldrb	r3, [r1, #6]
    9e08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9e0c:	2b40      	cmp	r3, #64	; 0x40
    9e0e:	d11b      	bne.n	9e48 <smp_ident_addr_info+0xd4>
	memcpy(dst, src, sizeof(*dst));
    9e10:	2206      	movs	r2, #6
    9e12:	3101      	adds	r1, #1
    9e14:	f107 0040 	add.w	r0, r7, #64	; 0x40
    9e18:	f7f6 fbf6 	bl	608 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    9e1c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    9e20:	b193      	cbz	r3, 9e48 <smp_ident_addr_info+0xd4>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    9e22:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    9e26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9e2a:	2bc0      	cmp	r3, #192	; 0xc0
    9e2c:	d00c      	beq.n	9e48 <smp_ident_addr_info+0xd4>
	memcpy(dst, src, sizeof(*dst));
    9e2e:	2207      	movs	r2, #7
    9e30:	4631      	mov	r1, r6
    9e32:	4638      	mov	r0, r7
    9e34:	f7f6 fbe8 	bl	608 <memcpy>
    9e38:	2207      	movs	r2, #7
    9e3a:	4631      	mov	r1, r6
    9e3c:	4640      	mov	r0, r8
    9e3e:	f7f6 fbe3 	bl	608 <memcpy>
				bt_conn_identity_resolved(conn);
    9e42:	4620      	mov	r0, r4
    9e44:	f7fb f8ce 	bl	4fe4 <bt_conn_identity_resolved>
		bt_id_add(keys);
    9e48:	4638      	mov	r0, r7
    9e4a:	f7f9 f809 	bl	2e60 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    9e4e:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    9e52:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    9e56:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    9e58:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    9e5c:	d504      	bpl.n	9e68 <smp_ident_addr_info+0xf4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    9e5e:	210a      	movs	r1, #10
    9e60:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9e64:	f7fe fdbb 	bl	89de <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9e68:	78e3      	ldrb	r3, [r4, #3]
    9e6a:	b92b      	cbnz	r3, 9e78 <smp_ident_addr_info+0x104>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    9e6c:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
    9e70:	b913      	cbnz	r3, 9e78 <smp_ident_addr_info+0x104>
		bt_smp_distribute_keys(smp);
    9e72:	4628      	mov	r0, r5
    9e74:	f7ff f880 	bl	8f78 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    9e78:	f8d5 4170 	ldr.w	r4, [r5, #368]	; 0x170
    9e7c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    9e80:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
    9e84:	b914      	cbnz	r4, 9e8c <smp_ident_addr_info+0x118>
	smp_reset(smp);
    9e86:	4628      	mov	r0, r5
    9e88:	f7ff f937 	bl	90fa <smp_reset>
	return 0;
    9e8c:	2000      	movs	r0, #0
    9e8e:	e791      	b.n	9db4 <smp_ident_addr_info+0x40>
			dst = &conn->le.init_addr;
    9e90:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    9e94:	e7b4      	b.n	9e00 <smp_ident_addr_info+0x8c>
    9e96:	bf00      	nop
    9e98:	0001868d 	.word	0x0001868d
    9e9c:	00019a84 	.word	0x00019a84
    9ea0:	0001a637 	.word	0x0001a637
    9ea4:	00019a8b 	.word	0x00019a8b
    9ea8:	0001a97f 	.word	0x0001a97f
    9eac:	0001a9aa 	.word	0x0001a9aa

00009eb0 <bt_smp_send_pairing_req>:
{
    9eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9eb4:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    9eb6:	f7fe fe4f 	bl	8b58 <smp_chan_get>
	if (!smp) {
    9eba:	4604      	mov	r4, r0
    9ebc:	2800      	cmp	r0, #0
    9ebe:	d07c      	beq.n	9fba <bt_smp_send_pairing_req+0x10a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    9ec0:	f100 0898 	add.w	r8, r0, #152	; 0x98
    9ec4:	2104      	movs	r1, #4
    9ec6:	4640      	mov	r0, r8
    9ec8:	f7fe fd7c 	bl	89c4 <atomic_test_bit>
    9ecc:	2800      	cmp	r0, #0
    9ece:	d177      	bne.n	9fc0 <bt_smp_send_pairing_req+0x110>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    9ed0:	2103      	movs	r1, #3
    9ed2:	4640      	mov	r0, r8
    9ed4:	f7fe fd76 	bl	89c4 <atomic_test_bit>
    9ed8:	2800      	cmp	r0, #0
    9eda:	d174      	bne.n	9fc6 <bt_smp_send_pairing_req+0x116>
	switch (conn->required_sec_level) {
    9edc:	7a6b      	ldrb	r3, [r5, #9]
    9ede:	3b01      	subs	r3, #1
    9ee0:	2b03      	cmp	r3, #3
    9ee2:	d873      	bhi.n	9fcc <bt_smp_send_pairing_req+0x11c>
    9ee4:	e8df f003 	tbb	[pc, r3]
    9ee8:	1c020909 	.word	0x1c020909
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    9eec:	f7fe fd1c 	bl	8928 <get_io_capa>
    9ef0:	3803      	subs	r0, #3
    9ef2:	bf18      	it	ne
    9ef4:	2001      	movne	r0, #1
	if (!sec_level_reachable(conn)) {
    9ef6:	2800      	cmp	r0, #0
    9ef8:	d068      	beq.n	9fcc <bt_smp_send_pairing_req+0x11c>
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    9efa:	f104 0994 	add.w	r9, r4, #148	; 0x94
    9efe:	22e0      	movs	r2, #224	; 0xe0
    9f00:	2100      	movs	r1, #0
    9f02:	4648      	mov	r0, r9
    9f04:	f7f6 fbac 	bl	660 <memset>
	if (bt_rand(smp->prnd, 16)) {
    9f08:	2110      	movs	r1, #16
    9f0a:	f104 00bb 	add.w	r0, r4, #187	; 0xbb
    9f0e:	f001 fa9f 	bl	b450 <bt_rand>
    9f12:	4605      	mov	r5, r0
    9f14:	b170      	cbz	r0, 9f34 <bt_smp_send_pairing_req+0x84>
		return -ENOBUFS;
    9f16:	f06f 0536 	mvn.w	r5, #54	; 0x36
}
    9f1a:	4628      	mov	r0, r5
    9f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    9f20:	f7fe fd02 	bl	8928 <get_io_capa>
    9f24:	2803      	cmp	r0, #3
    9f26:	bf1a      	itte	ne
    9f28:	4b2a      	ldrne	r3, [pc, #168]	; (9fd4 <bt_smp_send_pairing_req+0x124>)
    9f2a:	7818      	ldrbne	r0, [r3, #0]
    9f2c:	2000      	moveq	r0, #0
    9f2e:	f000 0001 	and.w	r0, r0, #1
    9f32:	e7e0      	b.n	9ef6 <bt_smp_send_pairing_req+0x46>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    9f34:	2105      	movs	r1, #5
    9f36:	4648      	mov	r0, r9
    9f38:	f7fe fd51 	bl	89de <atomic_set_bit>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    9f3c:	2001      	movs	r0, #1
    9f3e:	f7fe fe27 	bl	8b90 <smp_create_pdu.isra.2>
	if (!req_buf) {
    9f42:	4682      	mov	sl, r0
    9f44:	2800      	cmp	r0, #0
    9f46:	d0e6      	beq.n	9f16 <bt_smp_send_pairing_req+0x66>
	req = net_buf_add(req_buf, sizeof(*req));
    9f48:	2106      	movs	r1, #6
    9f4a:	3008      	adds	r0, #8
    9f4c:	f00c ff18 	bl	16d80 <net_buf_simple_add>
	if (sc_supported) {
    9f50:	4b20      	ldr	r3, [pc, #128]	; (9fd4 <bt_smp_send_pairing_req+0x124>)
    9f52:	781b      	ldrb	r3, [r3, #0]
		auth &= BT_SMP_AUTH_MASK;
    9f54:	2b00      	cmp	r3, #0
	req = net_buf_add(req_buf, sizeof(*req));
    9f56:	4606      	mov	r6, r0
		auth &= BT_SMP_AUTH_MASK;
    9f58:	bf14      	ite	ne
    9f5a:	2709      	movne	r7, #9
    9f5c:	2701      	moveq	r7, #1
	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    9f5e:	f7fe fce3 	bl	8928 <get_io_capa>
    9f62:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
    9f64:	bf18      	it	ne
    9f66:	f047 0704 	orrne.w	r7, r7, #4
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    9f6a:	70b7      	strb	r7, [r6, #2]
	req->io_capability = get_io_capa();
    9f6c:	f7fe fcdc 	bl	8928 <get_io_capa>
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    9f70:	2310      	movs	r3, #16
    9f72:	70f3      	strb	r3, [r6, #3]
	req->resp_key_dist = RECV_KEYS;
    9f74:	2703      	movs	r7, #3
	req->init_key_dist = SEND_KEYS;
    9f76:	2301      	movs	r3, #1
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    9f78:	f04f 0b00 	mov.w	fp, #0
	req->init_key_dist = SEND_KEYS;
    9f7c:	7133      	strb	r3, [r6, #4]
	req->io_capability = get_io_capa();
    9f7e:	7030      	strb	r0, [r6, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    9f80:	f886 b001 	strb.w	fp, [r6, #1]
	req->resp_key_dist = RECV_KEYS;
    9f84:	7177      	strb	r7, [r6, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
    9f86:	4631      	mov	r1, r6
	smp->local_dist = SEND_KEYS;
    9f88:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    9f8c:	f884 309d 	strb.w	r3, [r4, #157]	; 0x9d
	smp->remote_dist = RECV_KEYS;
    9f90:	f884 7172 	strb.w	r7, [r4, #370]	; 0x172
	memcpy(smp->preq + 1, req, sizeof(*req));
    9f94:	2206      	movs	r2, #6
    9f96:	f104 009e 	add.w	r0, r4, #158	; 0x9e
    9f9a:	f7f6 fb35 	bl	608 <memcpy>
	smp_send(smp, req_buf, NULL);
    9f9e:	465a      	mov	r2, fp
    9fa0:	4651      	mov	r1, sl
    9fa2:	4620      	mov	r0, r4
    9fa4:	f7fe fed8 	bl	8d58 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    9fa8:	4648      	mov	r0, r9
    9faa:	2102      	movs	r1, #2
    9fac:	f7fe fd17 	bl	89de <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    9fb0:	4639      	mov	r1, r7
    9fb2:	4640      	mov	r0, r8
    9fb4:	f7fe fd13 	bl	89de <atomic_set_bit>
	return 0;
    9fb8:	e7af      	b.n	9f1a <bt_smp_send_pairing_req+0x6a>
		return -ENOTCONN;
    9fba:	f06f 0538 	mvn.w	r5, #56	; 0x38
    9fbe:	e7ac      	b.n	9f1a <bt_smp_send_pairing_req+0x6a>
		return -EIO;
    9fc0:	f06f 0504 	mvn.w	r5, #4
    9fc4:	e7a9      	b.n	9f1a <bt_smp_send_pairing_req+0x6a>
		return -EBUSY;
    9fc6:	f06f 050f 	mvn.w	r5, #15
    9fca:	e7a6      	b.n	9f1a <bt_smp_send_pairing_req+0x6a>
		return -EINVAL;
    9fcc:	f06f 0515 	mvn.w	r5, #21
    9fd0:	e7a3      	b.n	9f1a <bt_smp_send_pairing_req+0x6a>
    9fd2:	bf00      	nop
    9fd4:	200008e9 	.word	0x200008e9

00009fd8 <smp_security_request>:
{
    9fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sc_supported) {
    9fda:	4b34      	ldr	r3, [pc, #208]	; (a0ac <smp_security_request+0xd4>)
	struct bt_smp_security_request *req = (void *)buf->data;
    9fdc:	688a      	ldr	r2, [r1, #8]
	if (sc_supported) {
    9fde:	781b      	ldrb	r3, [r3, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    9fe0:	6805      	ldr	r5, [r0, #0]
    9fe2:	7814      	ldrb	r4, [r2, #0]
{
    9fe4:	b085      	sub	sp, #20
    9fe6:	4606      	mov	r6, r0
	if (sc_supported) {
    9fe8:	b33b      	cbz	r3, a03a <smp_security_request+0x62>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    9fea:	f004 040f 	and.w	r4, r4, #15
	if (!conn->le.keys) {
    9fee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    9ff0:	2b00      	cmp	r3, #0
    9ff2:	d158      	bne.n	a0a6 <smp_security_request+0xce>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    9ff4:	f105 0748 	add.w	r7, r5, #72	; 0x48
    9ff8:	4639      	mov	r1, r7
    9ffa:	2020      	movs	r0, #32
    9ffc:	f000 f966 	bl	a2cc <bt_keys_find>
    a000:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    a002:	2800      	cmp	r0, #0
    a004:	d14f      	bne.n	a0a6 <smp_security_request+0xce>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    a006:	4639      	mov	r1, r7
    a008:	2004      	movs	r0, #4
    a00a:	f000 f95f 	bl	a2cc <bt_keys_find>
    a00e:	6728      	str	r0, [r5, #112]	; 0x70
	if (!conn->le.keys) {
    a010:	b1d8      	cbz	r0, a04a <smp_security_request+0x72>
	if ((auth & BT_SMP_AUTH_MITM) &&
    a012:	0761      	lsls	r1, r4, #29
    a014:	d520      	bpl.n	a058 <smp_security_request+0x80>
	    !atomic_test_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED)) {
    a016:	2100      	movs	r1, #0
    a018:	3008      	adds	r0, #8
    a01a:	f7fe fcd3 	bl	89c4 <atomic_test_bit>
	if ((auth & BT_SMP_AUTH_MITM) &&
    a01e:	b9d8      	cbnz	r0, a058 <smp_security_request+0x80>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    a020:	f7fe fc82 	bl	8928 <get_io_capa>
    a024:	4b22      	ldr	r3, [pc, #136]	; (a0b0 <smp_security_request+0xd8>)
			BT_INFO("New auth requirements: 0x%x, repairing",
    a026:	9302      	str	r3, [sp, #8]
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    a028:	2803      	cmp	r0, #3
			BT_INFO("New auth requirements: 0x%x, repairing",
    a02a:	e88d 0018 	stmia.w	sp, {r3, r4}
    a02e:	4b21      	ldr	r3, [pc, #132]	; (a0b4 <smp_security_request+0xdc>)
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    a030:	d006      	beq.n	a040 <smp_security_request+0x68>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    a032:	4a21      	ldr	r2, [pc, #132]	; (a0b8 <smp_security_request+0xe0>)
    a034:	4921      	ldr	r1, [pc, #132]	; (a0bc <smp_security_request+0xe4>)
    a036:	4822      	ldr	r0, [pc, #136]	; (a0c0 <smp_security_request+0xe8>)
    a038:	e005      	b.n	a046 <smp_security_request+0x6e>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    a03a:	f004 0407 	and.w	r4, r4, #7
    a03e:	e7d6      	b.n	9fee <smp_security_request+0x16>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    a040:	4a20      	ldr	r2, [pc, #128]	; (a0c4 <smp_security_request+0xec>)
    a042:	491e      	ldr	r1, [pc, #120]	; (a0bc <smp_security_request+0xe4>)
    a044:	4820      	ldr	r0, [pc, #128]	; (a0c8 <smp_security_request+0xf0>)
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    a046:	f7f7 fb4b 	bl	16e0 <printk>
	if (bt_smp_send_pairing_req(conn) < 0) {
    a04a:	4628      	mov	r0, r5
    a04c:	f7ff ff30 	bl	9eb0 <bt_smp_send_pairing_req>
    a050:	2800      	cmp	r0, #0
    a052:	db1e      	blt.n	a092 <smp_security_request+0xba>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    a054:	210c      	movs	r1, #12
    a056:	e020      	b.n	a09a <smp_security_request+0xc2>
	if ((auth & BT_SMP_AUTH_SC) &&
    a058:	f014 0f08 	tst.w	r4, #8
    a05c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    a05e:	d008      	beq.n	a072 <smp_security_request+0x9a>
    a060:	899a      	ldrh	r2, [r3, #12]
    a062:	0692      	lsls	r2, r2, #26
    a064:	d405      	bmi.n	a072 <smp_security_request+0x9a>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    a066:	4b12      	ldr	r3, [pc, #72]	; (a0b0 <smp_security_request+0xd8>)
    a068:	9302      	str	r3, [sp, #8]
    a06a:	e88d 0018 	stmia.w	sp, {r3, r4}
    a06e:	4b11      	ldr	r3, [pc, #68]	; (a0b4 <smp_security_request+0xdc>)
    a070:	e7df      	b.n	a032 <smp_security_request+0x5a>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    a072:	79da      	ldrb	r2, [r3, #7]
    a074:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    a078:	9202      	str	r2, [sp, #8]
					conn->le.keys->ltk.val,
    a07a:	f103 021a 	add.w	r2, r3, #26
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    a07e:	9201      	str	r2, [sp, #4]
    a080:	8b1b      	ldrh	r3, [r3, #24]
    a082:	9300      	str	r3, [sp, #0]
    a084:	4602      	mov	r2, r0
    a086:	460b      	mov	r3, r1
    a088:	4628      	mov	r0, r5
    a08a:	f7fa ffc5 	bl	5018 <bt_conn_le_start_encryption>
    a08e:	2800      	cmp	r0, #0
    a090:	da02      	bge.n	a098 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    a092:	2008      	movs	r0, #8
}
    a094:	b005      	add	sp, #20
    a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a098:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    a09a:	f106 0098 	add.w	r0, r6, #152	; 0x98
    a09e:	f7fe fc9e 	bl	89de <atomic_set_bit>
	return 0;
    a0a2:	2000      	movs	r0, #0
    a0a4:	e7f6      	b.n	a094 <smp_security_request+0xbc>
	if (!conn->le.keys) {
    a0a6:	6f28      	ldr	r0, [r5, #112]	; 0x70
    a0a8:	e7b3      	b.n	a012 <smp_security_request+0x3a>
    a0aa:	bf00      	nop
    a0ac:	200008e9 	.word	0x200008e9
    a0b0:	0001868d 	.word	0x0001868d
    a0b4:	0001a64b 	.word	0x0001a64b
    a0b8:	0001917d 	.word	0x0001917d
    a0bc:	00019a8b 	.word	0x00019a8b
    a0c0:	0001aab5 	.word	0x0001aab5
    a0c4:	00019806 	.word	0x00019806
    a0c8:	0001aaec 	.word	0x0001aaec

0000a0cc <bt_smp_sign_verify>:
    a0cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    a0d0:	4770      	bx	lr

0000a0d2 <bt_smp_sign>:
}
    a0d2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    a0d6:	4770      	bx	lr

0000a0d8 <bt_smp_update_keys>:
{
    a0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0da:	b085      	sub	sp, #20
    a0dc:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    a0de:	f7fe fd3b 	bl	8b58 <smp_chan_get>
	if (!smp) {
    a0e2:	4605      	mov	r5, r0
    a0e4:	2800      	cmp	r0, #0
    a0e6:	d05f      	beq.n	a1a8 <bt_smp_update_keys+0xd0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a0e8:	f100 0698 	add.w	r6, r0, #152	; 0x98
    a0ec:	2103      	movs	r1, #3
    a0ee:	4630      	mov	r0, r6
    a0f0:	f7fe fc68 	bl	89c4 <atomic_test_bit>
    a0f4:	2800      	cmp	r0, #0
    a0f6:	d057      	beq.n	a1a8 <bt_smp_update_keys+0xd0>
	if (conn->le.keys) {
    a0f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a0fa:	b108      	cbz	r0, a100 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    a0fc:	f000 f8b0 	bl	a260 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    a100:	f104 0748 	add.w	r7, r4, #72	; 0x48
    a104:	4638      	mov	r0, r7
    a106:	f000 f8b9 	bl	a27c <bt_keys_get_addr>
    a10a:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    a10c:	b998      	cbnz	r0, a136 <bt_smp_update_keys+0x5e>
		BT_ERR("Unable to get keys for %s",
    a10e:	4638      	mov	r0, r7
    a110:	f7f8 fb24 	bl	275c <bt_addr_le_str>
    a114:	4b2c      	ldr	r3, [pc, #176]	; (a1c8 <bt_smp_update_keys+0xf0>)
    a116:	9302      	str	r3, [sp, #8]
    a118:	9001      	str	r0, [sp, #4]
    a11a:	9300      	str	r3, [sp, #0]
    a11c:	4a2b      	ldr	r2, [pc, #172]	; (a1cc <bt_smp_update_keys+0xf4>)
    a11e:	4b2c      	ldr	r3, [pc, #176]	; (a1d0 <bt_smp_update_keys+0xf8>)
    a120:	492c      	ldr	r1, [pc, #176]	; (a1d4 <bt_smp_update_keys+0xfc>)
    a122:	482d      	ldr	r0, [pc, #180]	; (a1d8 <bt_smp_update_keys+0x100>)
    a124:	f7f7 fadc 	bl	16e0 <printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    a128:	2108      	movs	r1, #8
    a12a:	4628      	mov	r0, r5
}
    a12c:	b005      	add	sp, #20
    a12e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    a132:	f7ff b810 	b.w	9156 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    a136:	210b      	movs	r1, #11
    a138:	4630      	mov	r0, r6
    a13a:	f7fe fc43 	bl	89c4 <atomic_test_bit>
    a13e:	b120      	cbz	r0, a14a <bt_smp_update_keys+0x72>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    a140:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a142:	2101      	movs	r1, #1
    a144:	3008      	adds	r0, #8
    a146:	f7fe fc4a 	bl	89de <atomic_set_bit>
	switch (smp->method) {
    a14a:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
    a14e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a150:	3b01      	subs	r3, #1
    a152:	2b02      	cmp	r3, #2
    a154:	d82a      	bhi.n	a1ac <bt_smp_update_keys+0xd4>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    a156:	2100      	movs	r1, #0
    a158:	3008      	adds	r0, #8
    a15a:	f7fe fc40 	bl	89de <atomic_set_bit>
	return min(req->max_key_size, rsp->max_key_size);
    a15e:	f895 10a1 	ldrb.w	r1, [r5, #161]	; 0xa1
    a162:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    a166:	6f22      	ldr	r2, [r4, #112]	; 0x70
	return min(req->max_key_size, rsp->max_key_size);
    a168:	428b      	cmp	r3, r1
    a16a:	bf28      	it	cs
    a16c:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    a16e:	71d3      	strb	r3, [r2, #7]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    a170:	2105      	movs	r1, #5
    a172:	4630      	mov	r0, r6
    a174:	f7fe fc26 	bl	89c4 <atomic_test_bit>
    a178:	b1b0      	cbz	r0, a1a8 <bt_smp_update_keys+0xd0>
	    atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    a17a:	210a      	movs	r1, #10
    a17c:	4630      	mov	r0, r6
    a17e:	f7fe fc21 	bl	89c4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    a182:	b188      	cbz	r0, a1a8 <bt_smp_update_keys+0xd0>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    a184:	2120      	movs	r1, #32
    a186:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a188:	f000 f900 	bl	a38c <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    a18c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    a18e:	2210      	movs	r2, #16
    a190:	f105 01db 	add.w	r1, r5, #219	; 0xdb
    a194:	301a      	adds	r0, #26
    a196:	f7f6 fa37 	bl	608 <memcpy>
		conn->le.keys->ltk.rand = 0;
    a19a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    a19c:	2000      	movs	r0, #0
    a19e:	2100      	movs	r1, #0
    a1a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    a1a4:	2200      	movs	r2, #0
    a1a6:	831a      	strh	r2, [r3, #24]
}
    a1a8:	b005      	add	sp, #20
    a1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1ac:	3008      	adds	r0, #8
    a1ae:	f3bf 8f5b 	dmb	ish
    a1b2:	e850 3f00 	ldrex	r3, [r0]
    a1b6:	f023 0301 	bic.w	r3, r3, #1
    a1ba:	e840 3200 	strex	r2, r3, [r0]
    a1be:	2a00      	cmp	r2, #0
    a1c0:	d1f7      	bne.n	a1b2 <bt_smp_update_keys+0xda>
    a1c2:	f3bf 8f5b 	dmb	ish
    a1c6:	e7ca      	b.n	a15e <bt_smp_update_keys+0x86>
    a1c8:	0001868d 	.word	0x0001868d
    a1cc:	00019a84 	.word	0x00019a84
    a1d0:	0001a68d 	.word	0x0001a68d
    a1d4:	00019a8b 	.word	0x00019a8b
    a1d8:	0001a9aa 	.word	0x0001a9aa

0000a1dc <bt_smp_get_tk>:
{
    a1dc:	b570      	push	{r4, r5, r6, lr}
    a1de:	460e      	mov	r6, r1
	smp = smp_chan_get(conn);
    a1e0:	f7fe fcba 	bl	8b58 <smp_chan_get>
	if (!smp) {
    a1e4:	4605      	mov	r5, r0
    a1e6:	b908      	cbnz	r0, a1ec <bt_smp_get_tk+0x10>
		return false;
    a1e8:	2000      	movs	r0, #0
    a1ea:	bd70      	pop	{r4, r5, r6, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a1ec:	2103      	movs	r1, #3
    a1ee:	3098      	adds	r0, #152	; 0x98
    a1f0:	f7fe fbe8 	bl	89c4 <atomic_test_bit>
    a1f4:	2800      	cmp	r0, #0
    a1f6:	d0f7      	beq.n	a1e8 <bt_smp_get_tk+0xc>
	return min(req->max_key_size, rsp->max_key_size);
    a1f8:	f895 40a8 	ldrb.w	r4, [r5, #168]	; 0xa8
    a1fc:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    a200:	429c      	cmp	r4, r3
    a202:	bf28      	it	cs
    a204:	461c      	movcs	r4, r3
	memcpy(tk, smp->tk, enc_size);
    a206:	4622      	mov	r2, r4
    a208:	f105 01db 	add.w	r1, r5, #219	; 0xdb
    a20c:	4630      	mov	r0, r6
    a20e:	f7f6 f9fb 	bl	608 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    a212:	2c0f      	cmp	r4, #15
    a214:	d805      	bhi.n	a222 <bt_smp_get_tk+0x46>
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    a216:	f1c4 0210 	rsb	r2, r4, #16
    a21a:	2100      	movs	r1, #0
    a21c:	1930      	adds	r0, r6, r4
    a21e:	f7f6 fa1f 	bl	660 <memset>
	return true;
    a222:	2001      	movs	r0, #1
}
    a224:	bd70      	pop	{r4, r5, r6, pc}
	...

0000a228 <bt_smp_init>:
	return (bt_dev.supported_commands[34] & 0x02) &&
	       (bt_dev.supported_commands[34] & 0x04);
}

int bt_smp_init(void)
{
    a228:	b508      	push	{r3, lr}
	return (bt_dev.supported_commands[34] & 0x02) &&
    a22a:	4b09      	ldr	r3, [pc, #36]	; (a250 <bt_smp_init+0x28>)
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    a22c:	4809      	ldr	r0, [pc, #36]	; (a254 <bt_smp_init+0x2c>)
	return (bt_dev.supported_commands[34] & 0x02) &&
    a22e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    a232:	f003 0306 	and.w	r3, r3, #6
    a236:	1f9a      	subs	r2, r3, #6
    a238:	4253      	negs	r3, r2
    a23a:	4153      	adcs	r3, r2
    a23c:	4a06      	ldr	r2, [pc, #24]	; (a258 <bt_smp_init+0x30>)
    a23e:	7013      	strb	r3, [r2, #0]
	bt_l2cap_le_fixed_chan_register(&chan);
    a240:	f7fb fdb8 	bl	5db4 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    a244:	4805      	ldr	r0, [pc, #20]	; (a25c <bt_smp_init+0x34>)
    a246:	f7fa fdbb 	bl	4dc0 <bt_pub_key_gen>

	return smp_self_test();
}
    a24a:	2000      	movs	r0, #0
    a24c:	bd08      	pop	{r3, pc}
    a24e:	bf00      	nop
    a250:	20008618 	.word	0x20008618
    a254:	200088cc 	.word	0x200088cc
    a258:	200008e9 	.word	0x200008e9
    a25c:	200088ec 	.word	0x200088ec

0000a260 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	if (keys->keys & BT_KEYS_IRK) {
    a260:	8983      	ldrh	r3, [r0, #12]
    a262:	079b      	lsls	r3, r3, #30
{
    a264:	b510      	push	{r4, lr}
    a266:	4604      	mov	r4, r0
	if (keys->keys & BT_KEYS_IRK) {
    a268:	d501      	bpl.n	a26e <bt_keys_clear+0xe>
		bt_id_del(keys);
    a26a:	f7f8 fee5 	bl	3038 <bt_id_del>
	}

	memset(keys, 0, sizeof(*keys));
    a26e:	4620      	mov	r0, r4
    a270:	2268      	movs	r2, #104	; 0x68
    a272:	2100      	movs	r1, #0
}
    a274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(keys, 0, sizeof(*keys));
    a278:	f7f6 b9f2 	b.w	660 <memset>

0000a27c <bt_keys_get_addr>:
{
    a27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a27e:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    a280:	4601      	mov	r1, r0
    a282:	2207      	movs	r2, #7
    a284:	480b      	ldr	r0, [pc, #44]	; (a2b4 <bt_keys_get_addr+0x38>)
    a286:	f7f6 f9aa 	bl	5de <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    a28a:	b170      	cbz	r0, a2aa <bt_keys_get_addr+0x2e>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    a28c:	2400      	movs	r4, #0
    a28e:	2207      	movs	r2, #7
    a290:	4669      	mov	r1, sp
    a292:	4808      	ldr	r0, [pc, #32]	; (a2b4 <bt_keys_get_addr+0x38>)
    a294:	9400      	str	r4, [sp, #0]
    a296:	f8cd 4003 	str.w	r4, [sp, #3]
    a29a:	f7f6 f9a0 	bl	5de <memcmp>
    a29e:	b938      	cbnz	r0, a2b0 <bt_keys_get_addr+0x34>
	memcpy(dst, src, sizeof(*dst));
    a2a0:	2207      	movs	r2, #7
    a2a2:	4629      	mov	r1, r5
    a2a4:	4803      	ldr	r0, [pc, #12]	; (a2b4 <bt_keys_get_addr+0x38>)
    a2a6:	f7f6 f9af 	bl	608 <memcpy>
		keys = &key_pool[i];
    a2aa:	4802      	ldr	r0, [pc, #8]	; (a2b4 <bt_keys_get_addr+0x38>)
}
    a2ac:	b003      	add	sp, #12
    a2ae:	bd30      	pop	{r4, r5, pc}
	return NULL;
    a2b0:	4620      	mov	r0, r4
    a2b2:	e7fb      	b.n	a2ac <bt_keys_get_addr+0x30>
    a2b4:	200008f0 	.word	0x200008f0

0000a2b8 <bt_keys_foreach>:
		if ((key_pool[i].keys & type)) {
    a2b8:	4b03      	ldr	r3, [pc, #12]	; (a2c8 <bt_keys_foreach+0x10>)
    a2ba:	899a      	ldrh	r2, [r3, #12]
    a2bc:	4202      	tst	r2, r0
    a2be:	d001      	beq.n	a2c4 <bt_keys_foreach+0xc>
			func(&key_pool[i]);
    a2c0:	4618      	mov	r0, r3
    a2c2:	4708      	bx	r1
    a2c4:	4770      	bx	lr
    a2c6:	bf00      	nop
    a2c8:	200008f0 	.word	0x200008f0

0000a2cc <bt_keys_find>:
{
    a2cc:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) &&
    a2ce:	4c06      	ldr	r4, [pc, #24]	; (a2e8 <bt_keys_find+0x1c>)
    a2d0:	89a3      	ldrh	r3, [r4, #12]
    a2d2:	4203      	tst	r3, r0
    a2d4:	d004      	beq.n	a2e0 <bt_keys_find+0x14>
	return memcmp(a, b, sizeof(*a));
    a2d6:	2207      	movs	r2, #7
    a2d8:	4620      	mov	r0, r4
    a2da:	f7f6 f980 	bl	5de <memcmp>
    a2de:	b108      	cbz	r0, a2e4 <bt_keys_find+0x18>
	return NULL;
    a2e0:	2000      	movs	r0, #0
    a2e2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    a2e4:	4620      	mov	r0, r4
}
    a2e6:	bd10      	pop	{r4, pc}
    a2e8:	200008f0 	.word	0x200008f0

0000a2ec <bt_keys_get_type>:
{
    a2ec:	b538      	push	{r3, r4, r5, lr}
    a2ee:	4604      	mov	r4, r0
    a2f0:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    a2f2:	f7ff ffeb 	bl	a2cc <bt_keys_find>
	if (keys) {
    a2f6:	b930      	cbnz	r0, a306 <bt_keys_get_type+0x1a>
	keys = bt_keys_get_addr(addr);
    a2f8:	4628      	mov	r0, r5
    a2fa:	f7ff ffbf 	bl	a27c <bt_keys_get_addr>
	if (!keys) {
    a2fe:	b110      	cbz	r0, a306 <bt_keys_get_type+0x1a>
	keys->keys |= type;
    a300:	8983      	ldrh	r3, [r0, #12]
    a302:	431c      	orrs	r4, r3
    a304:	8184      	strh	r4, [r0, #12]
}
    a306:	bd38      	pop	{r3, r4, r5, pc}

0000a308 <bt_keys_find_irk>:
{
    a308:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    a30a:	7803      	ldrb	r3, [r0, #0]
    a30c:	2b01      	cmp	r3, #1
    a30e:	4605      	mov	r5, r0
    a310:	d001      	beq.n	a316 <bt_keys_find_irk+0xe>
		return NULL;
    a312:	2000      	movs	r0, #0
    a314:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    a316:	7983      	ldrb	r3, [r0, #6]
    a318:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a31c:	2b40      	cmp	r3, #64	; 0x40
    a31e:	d1f8      	bne.n	a312 <bt_keys_find_irk+0xa>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    a320:	4c10      	ldr	r4, [pc, #64]	; (a364 <bt_keys_find_irk+0x5c>)
    a322:	89a3      	ldrh	r3, [r4, #12]
    a324:	f013 0f02 	tst.w	r3, #2
    a328:	4626      	mov	r6, r4
    a32a:	d110      	bne.n	a34e <bt_keys_find_irk+0x46>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    a32c:	89b3      	ldrh	r3, [r6, #12]
    a32e:	079b      	lsls	r3, r3, #30
    a330:	d5ef      	bpl.n	a312 <bt_keys_find_irk+0xa>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    a332:	3501      	adds	r5, #1
    a334:	4629      	mov	r1, r5
    a336:	480c      	ldr	r0, [pc, #48]	; (a368 <bt_keys_find_irk+0x60>)
    a338:	f7f8 fa79 	bl	282e <bt_rpa_irk_matches>
    a33c:	2800      	cmp	r0, #0
    a33e:	d0e8      	beq.n	a312 <bt_keys_find_irk+0xa>
	memcpy(dst, src, sizeof(*dst));
    a340:	2206      	movs	r2, #6
    a342:	4629      	mov	r1, r5
    a344:	4809      	ldr	r0, [pc, #36]	; (a36c <bt_keys_find_irk+0x64>)
    a346:	f7f6 f95f 	bl	608 <memcpy>
			return &key_pool[i];
    a34a:	4806      	ldr	r0, [pc, #24]	; (a364 <bt_keys_find_irk+0x5c>)
    a34c:	bd70      	pop	{r4, r5, r6, pc}
	return memcmp(a, b, sizeof(*a));
    a34e:	2206      	movs	r2, #6
    a350:	f104 0140 	add.w	r1, r4, #64	; 0x40
    a354:	3001      	adds	r0, #1
    a356:	f7f6 f942 	bl	5de <memcmp>
		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    a35a:	2800      	cmp	r0, #0
    a35c:	d1e6      	bne.n	a32c <bt_keys_find_irk+0x24>
			return &key_pool[i];
    a35e:	4620      	mov	r0, r4
}
    a360:	bd70      	pop	{r4, r5, r6, pc}
    a362:	bf00      	nop
    a364:	200008f0 	.word	0x200008f0
    a368:	20000920 	.word	0x20000920
    a36c:	20000930 	.word	0x20000930

0000a370 <bt_keys_find_addr>:
	return memcmp(a, b, sizeof(*a));
    a370:	4601      	mov	r1, r0
{
    a372:	b508      	push	{r3, lr}
    a374:	2207      	movs	r2, #7
    a376:	4804      	ldr	r0, [pc, #16]	; (a388 <bt_keys_find_addr+0x18>)
    a378:	f7f6 f931 	bl	5de <memcmp>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    a37c:	2800      	cmp	r0, #0
}
    a37e:	4802      	ldr	r0, [pc, #8]	; (a388 <bt_keys_find_addr+0x18>)
    a380:	bf18      	it	ne
    a382:	2000      	movne	r0, #0
    a384:	bd08      	pop	{r3, pc}
    a386:	bf00      	nop
    a388:	200008f0 	.word	0x200008f0

0000a38c <bt_keys_add_type>:
	keys->keys |= type;
    a38c:	8983      	ldrh	r3, [r0, #12]
    a38e:	4319      	orrs	r1, r3
    a390:	8181      	strh	r1, [r0, #12]
    a392:	4770      	bx	lr

0000a394 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    a394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    a396:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a398:	1dc3      	adds	r3, r0, #7
{
    a39a:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a39c:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a3a0:	1e50      	subs	r0, r2, #1
{
    a3a2:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a3a4:	b280      	uxth	r0, r0
{
    a3a6:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    a3a8:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    a3aa:	2100      	movs	r1, #0
    a3ac:	2204      	movs	r2, #4
    a3ae:	fb06 5000 	mla	r0, r6, r0, r5
    a3b2:	f7f6 f955 	bl	660 <memset>
    a3b6:	3c02      	subs	r4, #2
    a3b8:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    a3ba:	f64f 77ff 	movw	r7, #65535	; 0xffff
    a3be:	42bc      	cmp	r4, r7
    a3c0:	d101      	bne.n	a3c6 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    a3c2:	b003      	add	sp, #12
    a3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    a3c6:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    a3ca:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    a3cc:	2204      	movs	r2, #4
    a3ce:	1b80      	subs	r0, r0, r6
    a3d0:	eb0d 0102 	add.w	r1, sp, r2
    a3d4:	4428      	add	r0, r5
    a3d6:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    a3d8:	9301      	str	r3, [sp, #4]
    a3da:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    a3dc:	f7f6 f914 	bl	608 <memcpy>
    a3e0:	e7ed      	b.n	a3be <mem_init+0x2a>

0000a3e2 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    a3e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    a3e4:	6805      	ldr	r5, [r0, #0]
{
    a3e6:	4606      	mov	r6, r0
	if (*mem_head) {
    a3e8:	b195      	cbz	r5, a410 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    a3ea:	1deb      	adds	r3, r5, #7
    a3ec:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    a3f0:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    a3f2:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    a3f4:	4629      	mov	r1, r5
    a3f6:	eb0d 0002 	add.w	r0, sp, r2
    a3fa:	f7f6 f905 	bl	608 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    a3fe:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    a400:	3c01      	subs	r4, #1
    a402:	b2a4      	uxth	r4, r4
		if (head) {
    a404:	b11b      	cbz	r3, a40e <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    a406:	1dda      	adds	r2, r3, #7
    a408:	f022 0203 	bic.w	r2, r2, #3
    a40c:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    a40e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    a410:	4628      	mov	r0, r5
    a412:	b002      	add	sp, #8
    a414:	bd70      	pop	{r4, r5, r6, pc}

0000a416 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    a416:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    a418:	680c      	ldr	r4, [r1, #0]
{
    a41a:	4606      	mov	r6, r0
    a41c:	460d      	mov	r5, r1
	if (*mem_head) {
    a41e:	b11c      	cbz	r4, a428 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    a420:	1de3      	adds	r3, r4, #7
    a422:	f023 0303 	bic.w	r3, r3, #3
    a426:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    a428:	2204      	movs	r2, #4
    a42a:	4629      	mov	r1, r5
    a42c:	4630      	mov	r0, r6
    a42e:	f7f6 f8eb 	bl	608 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    a432:	1df2      	adds	r2, r6, #7
    a434:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    a438:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    a43a:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    a43c:	602e      	str	r6, [r5, #0]
    a43e:	bd70      	pop	{r4, r5, r6, pc}

0000a440 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    a440:	b118      	cbz	r0, a44a <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    a442:	3007      	adds	r0, #7
    a444:	f020 0003 	bic.w	r0, r0, #3
    a448:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    a44a:	4770      	bx	lr

0000a44c <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    a44c:	fb02 0001 	mla	r0, r2, r1, r0
    a450:	4770      	bx	lr

0000a452 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    a452:	1a40      	subs	r0, r0, r1
    a454:	b280      	uxth	r0, r0
}
    a456:	fbb0 f0f2 	udiv	r0, r0, r2
    a45a:	4770      	bx	lr

0000a45c <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    a45c:	b510      	push	{r4, lr}
	src += len;
    a45e:	4411      	add	r1, r2
    a460:	3801      	subs	r0, #1
	while (len--) {
    a462:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a466:	3a01      	subs	r2, #1
    a468:	b292      	uxth	r2, r2
    a46a:	429a      	cmp	r2, r3
    a46c:	d100      	bne.n	a470 <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    a46e:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    a470:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    a474:	f800 4f01 	strb.w	r4, [r0, #1]!
    a478:	e7f5      	b.n	a466 <mem_rcopy+0xa>

0000a47a <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    a47a:	4401      	add	r1, r0
	while (len--) {
    a47c:	4288      	cmp	r0, r1
    a47e:	d101      	bne.n	a484 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    a480:	2000      	movs	r0, #0
    a482:	4770      	bx	lr
		if (*src++) {
    a484:	f810 3b01 	ldrb.w	r3, [r0], #1
    a488:	2b00      	cmp	r3, #0
    a48a:	d0f7      	beq.n	a47c <mem_nz+0x2>
			return 1;
    a48c:	2001      	movs	r0, #1
}
    a48e:	4770      	bx	lr

0000a490 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    a490:	6010      	str	r0, [r2, #0]
    a492:	6008      	str	r0, [r1, #0]

	return link;
}
    a494:	4770      	bx	lr

0000a496 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    a496:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    a498:	6814      	ldr	r4, [r2, #0]
    a49a:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    a49c:	6814      	ldr	r4, [r2, #0]
    a49e:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    a4a0:	6010      	str	r0, [r2, #0]

	return link;
}
    a4a2:	bd10      	pop	{r4, pc}

0000a4a4 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    a4a4:	4288      	cmp	r0, r1
    a4a6:	d003      	beq.n	a4b0 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    a4a8:	b11a      	cbz	r2, a4b2 <memq_peek+0xe>
		*mem = head->mem;
    a4aa:	6843      	ldr	r3, [r0, #4]
    a4ac:	6013      	str	r3, [r2, #0]
    a4ae:	4770      	bx	lr
		return NULL;
    a4b0:	2000      	movs	r0, #0
	}

	return head;
}
    a4b2:	4770      	bx	lr

0000a4b4 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    a4b4:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    a4b6:	4283      	cmp	r3, r0
    a4b8:	d009      	beq.n	a4ce <memq_dequeue+0x1a>
	if (mem) {
    a4ba:	b122      	cbz	r2, a4c6 <memq_dequeue+0x12>
		*mem = head->mem;
    a4bc:	6858      	ldr	r0, [r3, #4]
    a4be:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    a4c0:	681a      	ldr	r2, [r3, #0]
    a4c2:	600a      	str	r2, [r1, #0]

	return link;
    a4c4:	e001      	b.n	a4ca <memq_dequeue+0x16>
	if (!link) {
    a4c6:	2b00      	cmp	r3, #0
    a4c8:	d1fa      	bne.n	a4c0 <memq_dequeue+0xc>
}
    a4ca:	4618      	mov	r0, r3
    a4cc:	4770      	bx	lr
		return NULL;
    a4ce:	2300      	movs	r3, #0
    a4d0:	e7fb      	b.n	a4ca <memq_dequeue+0x16>
	...

0000a4d4 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    a4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    a4d8:	4f11      	ldr	r7, [pc, #68]	; (a520 <mayfly_init+0x4c>)
    a4da:	f8df 9048 	ldr.w	r9, [pc, #72]	; a524 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    a4de:	2604      	movs	r6, #4
	while (callee_id--) {
    a4e0:	3e01      	subs	r6, #1
    a4e2:	b2f6      	uxtb	r6, r6
    a4e4:	2eff      	cmp	r6, #255	; 0xff
    a4e6:	d019      	beq.n	a51c <mayfly_init+0x48>
    a4e8:	b233      	sxth	r3, r6
    a4ea:	ea4f 0883 	mov.w	r8, r3, lsl #2
    a4ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a4f2:	011d      	lsls	r5, r3, #4
    a4f4:	2404      	movs	r4, #4
    a4f6:	f04f 0a0c 	mov.w	sl, #12
    a4fa:	e00a      	b.n	a512 <mayfly_init+0x3e>
    a4fc:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    a500:	1d0a      	adds	r2, r1, #4
    a502:	eb04 0008 	add.w	r0, r4, r8
    a506:	443a      	add	r2, r7
    a508:	4439      	add	r1, r7
    a50a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    a50e:	f7ff ffbf 	bl	a490 <memq_init>
		while (caller_id--) {
    a512:	3c01      	subs	r4, #1
    a514:	b2e4      	uxtb	r4, r4
    a516:	2cff      	cmp	r4, #255	; 0xff
    a518:	d1f0      	bne.n	a4fc <mayfly_init+0x28>
    a51a:	e7e1      	b.n	a4e0 <mayfly_init+0xc>
    a51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a520:	200009d8 	.word	0x200009d8
    a524:	20000958 	.word	0x20000958

0000a528 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    a528:	b4f0      	push	{r4, r5, r6, r7}
    a52a:	4b12      	ldr	r3, [pc, #72]	; (a574 <mayfly_enable+0x4c>)
    a52c:	4605      	mov	r5, r0
    a52e:	460f      	mov	r7, r1
    a530:	260c      	movs	r6, #12
    a532:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    a534:	b172      	cbz	r2, a554 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    a536:	4361      	muls	r1, r4
    a538:	fb06 1400 	mla	r4, r6, r0, r1
    a53c:	4423      	add	r3, r4
    a53e:	7a59      	ldrb	r1, [r3, #9]
    a540:	7a18      	ldrb	r0, [r3, #8]
    a542:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    a544:	bf04      	itt	eq
    a546:	3101      	addeq	r1, #1
    a548:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    a54a:	4628      	mov	r0, r5
    a54c:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    a54e:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    a550:	f00c ba10 	b.w	16974 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    a554:	434c      	muls	r4, r1
    a556:	fb06 4400 	mla	r4, r6, r0, r4
    a55a:	4423      	add	r3, r4
    a55c:	7a9c      	ldrb	r4, [r3, #10]
    a55e:	7ada      	ldrb	r2, [r3, #11]
    a560:	42a2      	cmp	r2, r4
    a562:	d104      	bne.n	a56e <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    a564:	3201      	adds	r2, #1
    a566:	729a      	strb	r2, [r3, #10]
}
    a568:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    a56a:	f00c ba63 	b.w	16a34 <mayfly_pend>
}
    a56e:	bcf0      	pop	{r4, r5, r6, r7}
    a570:	4770      	bx	lr
    a572:	bf00      	nop
    a574:	200009d8 	.word	0x200009d8

0000a578 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a57a:	4605      	mov	r5, r0
    a57c:	460e      	mov	r6, r1
    a57e:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    a580:	b18a      	cbz	r2, a5a6 <mayfly_enqueue+0x2e>
    a582:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    a584:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    a586:	7820      	ldrb	r0, [r4, #0]
    a588:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    a58a:	f010 0703 	ands.w	r7, r0, #3
    a58e:	d029      	beq.n	a5e4 <mayfly_enqueue+0x6c>
		if (chain) {
    a590:	b303      	cbz	r3, a5d4 <mayfly_enqueue+0x5c>
			if (state != 1) {
    a592:	2f01      	cmp	r7, #1
    a594:	d039      	beq.n	a60a <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    a596:	3201      	adds	r2, #1
    a598:	b2d2      	uxtb	r2, r2
    a59a:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    a59c:	4631      	mov	r1, r6
    a59e:	4628      	mov	r0, r5
    a5a0:	f00c fa48 	bl	16a34 <mayfly_pend>
    a5a4:	e01c      	b.n	a5e0 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a5a6:	f00c fa33 	bl	16a10 <mayfly_prio_is_equal>
    a5aa:	2800      	cmp	r0, #0
    a5ac:	d0e9      	beq.n	a582 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    a5ae:	4631      	mov	r1, r6
    a5b0:	4628      	mov	r0, r5
    a5b2:	f00c fa07 	bl	169c4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    a5b6:	2800      	cmp	r0, #0
    a5b8:	d0e3      	beq.n	a582 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    a5ba:	2330      	movs	r3, #48	; 0x30
    a5bc:	220c      	movs	r2, #12
    a5be:	4373      	muls	r3, r6
    a5c0:	fb02 3305 	mla	r3, r2, r5, r3
    a5c4:	4a12      	ldr	r2, [pc, #72]	; (a610 <mayfly_enqueue+0x98>)
    a5c6:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    a5c8:	7a93      	ldrb	r3, [r2, #10]
    a5ca:	7ad2      	ldrb	r2, [r2, #11]
    a5cc:	1a9b      	subs	r3, r3, r2
    a5ce:	bf18      	it	ne
    a5d0:	2301      	movne	r3, #1
    a5d2:	e7d7      	b.n	a584 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    a5d4:	3202      	adds	r2, #2
    a5d6:	b2d2      	uxtb	r2, r2
    a5d8:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    a5da:	68e3      	ldr	r3, [r4, #12]
    a5dc:	68a0      	ldr	r0, [r4, #8]
    a5de:	4798      	blx	r3
		return 0;
    a5e0:	2000      	movs	r0, #0
    a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d0f8      	beq.n	a5da <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    a5e8:	3201      	adds	r2, #1
    a5ea:	b2d2      	uxtb	r2, r2
    a5ec:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    a5ee:	2304      	movs	r3, #4
    a5f0:	2230      	movs	r2, #48	; 0x30
    a5f2:	fb12 3206 	smlabb	r2, r2, r6, r3
    a5f6:	230c      	movs	r3, #12
    a5f8:	fb13 2305 	smlabb	r3, r3, r5, r2
    a5fc:	4a04      	ldr	r2, [pc, #16]	; (a610 <mayfly_enqueue+0x98>)
    a5fe:	6860      	ldr	r0, [r4, #4]
    a600:	441a      	add	r2, r3
    a602:	4621      	mov	r1, r4
    a604:	f7ff ff47 	bl	a496 <memq_enqueue>
    a608:	e7c8      	b.n	a59c <mayfly_enqueue+0x24>
			return 1;
    a60a:	4638      	mov	r0, r7

	return 0;
}
    a60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a60e:	bf00      	nop
    a610:	200009d8 	.word	0x200009d8

0000a614 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    a614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a618:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    a61c:	b089      	sub	sp, #36	; 0x24
    a61e:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    a620:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    a624:	4e43      	ldr	r6, [pc, #268]	; (a734 <mayfly_run+0x120>)
    a626:	9304      	str	r3, [sp, #16]
{
    a628:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    a62a:	2404      	movs	r4, #4
	u8_t disable = 0;
    a62c:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    a630:	3c01      	subs	r4, #1
    a632:	b2e4      	uxtb	r4, r4
    a634:	2cff      	cmp	r4, #255	; 0xff
    a636:	d10b      	bne.n	a650 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    a638:	9b01      	ldr	r3, [sp, #4]
    a63a:	2b00      	cmp	r3, #0
    a63c:	d076      	beq.n	a72c <mayfly_run+0x118>
    a63e:	f1b8 0f00 	cmp.w	r8, #0
    a642:	d173      	bne.n	a72c <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    a644:	4642      	mov	r2, r8
    a646:	4629      	mov	r1, r5
    a648:	4628      	mov	r0, r5
    a64a:	f00c f993 	bl	16974 <mayfly_enable_cb>
    a64e:	e06d      	b.n	a72c <mayfly_run+0x118>
		struct mayfly *m = 0;
    a650:	f10d 0b20 	add.w	fp, sp, #32
    a654:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    a656:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    a658:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    a65c:	f04f 0930 	mov.w	r9, #48	; 0x30
    a660:	fb07 f304 	mul.w	r3, r7, r4
    a664:	fb09 3005 	mla	r0, r9, r5, r3
    a668:	1831      	adds	r1, r6, r0
    a66a:	465a      	mov	r2, fp
    a66c:	6849      	ldr	r1, [r1, #4]
    a66e:	5830      	ldr	r0, [r6, r0]
    a670:	9302      	str	r3, [sp, #8]
    a672:	f7ff ff17 	bl	a4a4 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    a676:	9b04      	ldr	r3, [sp, #16]
    a678:	fb17 3704 	smlabb	r7, r7, r4, r3
    a67c:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    a67e:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    a680:	9303      	str	r3, [sp, #12]
		while (link) {
    a682:	f1ba 0f00 	cmp.w	sl, #0
    a686:	d119      	bne.n	a6bc <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    a688:	2230      	movs	r2, #48	; 0x30
    a68a:	230c      	movs	r3, #12
    a68c:	436a      	muls	r2, r5
    a68e:	fb03 2204 	mla	r2, r3, r4, r2
    a692:	4432      	add	r2, r6
    a694:	7a91      	ldrb	r1, [r2, #10]
    a696:	7ad0      	ldrb	r0, [r2, #11]
    a698:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    a69a:	bf1e      	ittt	ne
    a69c:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    a69e:	2201      	movne	r2, #1
    a6a0:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    a6a2:	2230      	movs	r2, #48	; 0x30
    a6a4:	436a      	muls	r2, r5
    a6a6:	fb03 2304 	mla	r3, r3, r4, r2
    a6aa:	4433      	add	r3, r6
    a6ac:	7a1a      	ldrb	r2, [r3, #8]
    a6ae:	7a59      	ldrb	r1, [r3, #9]
    a6b0:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    a6b2:	bf1c      	itt	ne
    a6b4:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    a6b6:	f04f 0801 	movne.w	r8, #1
    a6ba:	e7b9      	b.n	a630 <mayfly_run+0x1c>
			req = m->_req;
    a6bc:	9b07      	ldr	r3, [sp, #28]
    a6be:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    a6c0:	785a      	ldrb	r2, [r3, #1]
    a6c2:	1abf      	subs	r7, r7, r2
    a6c4:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    a6c8:	2f01      	cmp	r7, #1
    a6ca:	d104      	bne.n	a6d6 <mayfly_run+0xc2>
				m->_ack--;
    a6cc:	3a01      	subs	r2, #1
    a6ce:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    a6d0:	6898      	ldr	r0, [r3, #8]
    a6d2:	68da      	ldr	r2, [r3, #12]
    a6d4:	4790      	blx	r2
			req = m->_req;
    a6d6:	9a07      	ldr	r2, [sp, #28]
    a6d8:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    a6da:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    a6dc:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    a6de:	1a9a      	subs	r2, r3, r2
    a6e0:	f002 0203 	and.w	r2, r2, #3
    a6e4:	2a01      	cmp	r2, #1
    a6e6:	9305      	str	r3, [sp, #20]
    a6e8:	d00d      	beq.n	a706 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    a6ea:	9b02      	ldr	r3, [sp, #8]
    a6ec:	9903      	ldr	r1, [sp, #12]
    a6ee:	fb09 3005 	mla	r0, r9, r5, r3
    a6f2:	4430      	add	r0, r6
    a6f4:	2200      	movs	r2, #0
    a6f6:	6840      	ldr	r0, [r0, #4]
    a6f8:	f7ff fedc 	bl	a4b4 <memq_dequeue>
				m->_link = link;
    a6fc:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    a6fe:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    a700:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    a704:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    a706:	9b02      	ldr	r3, [sp, #8]
    a708:	fb09 3305 	mla	r3, r9, r5, r3
    a70c:	18f1      	adds	r1, r6, r3
    a70e:	465a      	mov	r2, fp
    a710:	6849      	ldr	r1, [r1, #4]
    a712:	58f0      	ldr	r0, [r6, r3]
    a714:	f7ff fec6 	bl	a4a4 <memq_peek>
			if (state == 1) {
    a718:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    a71a:	4682      	mov	sl, r0
			if (state == 1) {
    a71c:	d1b1      	bne.n	a682 <mayfly_run+0x6e>
				if (caller_id || link) {
    a71e:	b90c      	cbnz	r4, a724 <mayfly_run+0x110>
    a720:	2800      	cmp	r0, #0
    a722:	d0b1      	beq.n	a688 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    a724:	4629      	mov	r1, r5
    a726:	4628      	mov	r0, r5
    a728:	f00c f984 	bl	16a34 <mayfly_pend>
	}
}
    a72c:	b009      	add	sp, #36	; 0x24
    a72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a732:	bf00      	nop
    a734:	200009d8 	.word	0x200009d8

0000a738 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    a738:	b510      	push	{r4, lr}
    a73a:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    a73c:	2000      	movs	r0, #0

	while (octets_len--) {
    a73e:	3901      	subs	r1, #1
    a740:	b2c9      	uxtb	r1, r1
    a742:	29ff      	cmp	r1, #255	; 0xff
    a744:	d100      	bne.n	a748 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    a746:	bd10      	pop	{r4, pc}
		bite = *octets;
    a748:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    a74c:	2b00      	cmp	r3, #0
    a74e:	d0f6      	beq.n	a73e <util_ones_count_get+0x6>
			bite &= (bite - 1);
    a750:	1e5c      	subs	r4, r3, #1
			one_count++;
    a752:	3001      	adds	r0, #1
			bite &= (bite - 1);
    a754:	4023      	ands	r3, r4
			one_count++;
    a756:	b2c0      	uxtb	r0, r0
    a758:	e7f8      	b.n	a74c <util_ones_count_get+0x14>

0000a75a <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    a75a:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    a75c:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    a75e:	6805      	ldr	r5, [r0, #0]
	current = previous;
    a760:	461a      	mov	r2, r3
	total = 0;
    a762:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    a764:	2aff      	cmp	r2, #255	; 0xff
    a766:	d101      	bne.n	a76c <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    a768:	2000      	movs	r0, #0
    a76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    a76c:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    a770:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    a772:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    a776:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    a77a:	d004      	beq.n	a786 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    a77c:	68b3      	ldr	r3, [r6, #8]
    a77e:	441c      	add	r4, r3
		current = ticker_current->next;
    a780:	4613      	mov	r3, r2
    a782:	463a      	mov	r2, r7
    a784:	e7ee      	b.n	a764 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    a786:	4293      	cmp	r3, r2
    a788:	d100      	bne.n	a78c <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    a78a:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    a78c:	b21b      	sxth	r3, r3
    a78e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a792:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    a794:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    a796:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    a79a:	7833      	ldrb	r3, [r6, #0]
    a79c:	2bff      	cmp	r3, #255	; 0xff
    a79e:	d006      	beq.n	a7ae <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    a7a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a7a4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    a7a8:	689a      	ldr	r2, [r3, #8]
    a7aa:	4402      	add	r2, r0
    a7ac:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    a7ae:	4420      	add	r0, r4
    a7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a7b2 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    a7b2:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    a7b4:	1a55      	subs	r5, r2, r1
    a7b6:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    a7ba:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    a7bc:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    a7be:	d109      	bne.n	a7d4 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    a7c0:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    a7c4:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    a7c6:	42a2      	cmp	r2, r4
    a7c8:	d90e      	bls.n	a7e8 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    a7ca:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    a7cc:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    a7ce:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    a7d0:	6144      	str	r4, [r0, #20]
    a7d2:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    a7d4:	1a8a      	subs	r2, r1, r2
    a7d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    a7da:	4293      	cmp	r3, r2
    a7dc:	d901      	bls.n	a7e2 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    a7de:	1a9a      	subs	r2, r3, r2
    a7e0:	e7f1      	b.n	a7c6 <ticks_to_expire_prep+0x14>
    a7e2:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    a7e4:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    a7e6:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    a7e8:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    a7ea:	2200      	movs	r2, #0
    a7ec:	e7ef      	b.n	a7ce <ticks_to_expire_prep+0x1c>

0000a7ee <ticker_job_op_cb>:
{
    a7ee:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    a7f0:	2200      	movs	r2, #0
    a7f2:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    a7f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    a7f6:	6259      	str	r1, [r3, #36]	; 0x24
{
    a7f8:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    a7fa:	b10a      	cbz	r2, a800 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    a7fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    a7fe:	4710      	bx	r2
    a800:	4770      	bx	lr

0000a802 <ticker_worker>:
{
    a802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    a806:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    a808:	2301      	movs	r3, #1
{
    a80a:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    a80c:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    a80e:	2d00      	cmp	r5, #0
    a810:	d14c      	bne.n	a8ac <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    a812:	7f43      	ldrb	r3, [r0, #29]
    a814:	2bff      	cmp	r3, #255	; 0xff
    a816:	d102      	bne.n	a81e <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    a818:	77c5      	strb	r5, [r0, #31]
		return;
    a81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    a81e:	f00b fb3d 	bl	15e9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    a822:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    a824:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    a826:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    a82a:	1bc7      	subs	r7, r0, r7
    a82c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    a830:	2eff      	cmp	r6, #255	; 0xff
    a832:	d006      	beq.n	a842 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    a834:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    a838:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    a83c:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    a83e:	429f      	cmp	r7, r3
    a840:	d218      	bcs.n	a874 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    a842:	7aa2      	ldrb	r2, [r4, #10]
    a844:	7ae3      	ldrb	r3, [r4, #11]
    a846:	4293      	cmp	r3, r2
    a848:	d105      	bne.n	a856 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    a84a:	3301      	adds	r3, #1
    a84c:	b2db      	uxtb	r3, r3
			last = 0;
    a84e:	2b02      	cmp	r3, #2
    a850:	bf08      	it	eq
    a852:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    a854:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    a856:	7ae3      	ldrb	r3, [r4, #11]
    a858:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a85c:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    a85e:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    a860:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a862:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    a864:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a866:	46ac      	mov	ip, r5
    a868:	4623      	mov	r3, r4
    a86a:	2104      	movs	r1, #4
    a86c:	2003      	movs	r0, #3
}
    a86e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    a872:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    a874:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    a876:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    a878:	788a      	ldrb	r2, [r1, #2]
    a87a:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    a87c:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    a880:	1a9b      	subs	r3, r3, r2
    a882:	b2db      	uxtb	r3, r3
    a884:	2b01      	cmp	r3, #1
    a886:	d1d3      	bne.n	a830 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    a888:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    a88c:	3a01      	subs	r2, #1
    a88e:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    a890:	f1b9 0f00 	cmp.w	r9, #0
    a894:	d0cc      	beq.n	a830 <ticker_worker+0x2e>
					   ticks_expired -
    a896:	6948      	ldr	r0, [r1, #20]
    a898:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    a89a:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    a89c:	1a28      	subs	r0, r5, r0
    a89e:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    a8a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a8a4:	690b      	ldr	r3, [r1, #16]
    a8a6:	6a49      	ldr	r1, [r1, #36]	; 0x24
    a8a8:	47c8      	blx	r9
    a8aa:	e7c1      	b.n	a830 <ticker_worker+0x2e>
    a8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000a8b0 <ticker_job>:
{
    a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    a8b4:	7fc2      	ldrb	r2, [r0, #31]
{
    a8b6:	b095      	sub	sp, #84	; 0x54
    a8b8:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    a8ba:	2a00      	cmp	r2, #0
    a8bc:	f040 83be 	bne.w	b03c <ticker_job+0x78c>
	ticks_previous = instance->ticks_current;
    a8c0:	6943      	ldr	r3, [r0, #20]
    a8c2:	9307      	str	r3, [sp, #28]
	instance->job_guard = 1;
    a8c4:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    a8c6:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    a8c8:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    a8ca:	7ac0      	ldrb	r0, [r0, #11]
    a8cc:	4298      	cmp	r0, r3
    a8ce:	f000 808f 	beq.w	a9f0 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    a8d2:	440b      	add	r3, r1
    a8d4:	b2db      	uxtb	r3, r3
			first = 0;
    a8d6:	2b02      	cmp	r3, #2
    a8d8:	bf08      	it	eq
    a8da:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    a8dc:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    a8e0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    a8e4:	9103      	str	r1, [sp, #12]
		ticks_elapsed =
    a8e6:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    a8ea:	9b07      	ldr	r3, [sp, #28]
    a8ec:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    a8ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a8f2:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    a8f6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    a8fa:	9305      	str	r3, [sp, #20]
	node = &instance->node[0];
    a8fc:	f8db 3000 	ldr.w	r3, [fp]
    a900:	9306      	str	r3, [sp, #24]
	users = &instance->user[0];
    a902:	f8db 3004 	ldr.w	r3, [fp, #4]
    a906:	930d      	str	r3, [sp, #52]	; 0x34
    a908:	f89b 3009 	ldrb.w	r3, [fp, #9]
    a90c:	3b01      	subs	r3, #1
    a90e:	b2db      	uxtb	r3, r3
    a910:	9304      	str	r3, [sp, #16]
	pending = 0;
    a912:	2300      	movs	r3, #0
    a914:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
    a916:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    a91a:	9b04      	ldr	r3, [sp, #16]
    a91c:	2bff      	cmp	r3, #255	; 0xff
    a91e:	d16a      	bne.n	a9f6 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    a920:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    a924:	9a05      	ldr	r2, [sp, #20]
    a926:	1a9b      	subs	r3, r3, r2
    a928:	bf18      	it	ne
    a92a:	2301      	movne	r3, #1
    a92c:	9304      	str	r3, [sp, #16]
	if (flag_elapsed) {
    a92e:	9b03      	ldr	r3, [sp, #12]
    a930:	b1e3      	cbz	r3, a96c <ticker_job+0xbc>
	node = &instance->node[0];
    a932:	f8db 3000 	ldr.w	r3, [fp]
    a936:	9306      	str	r3, [sp, #24]
	ticks_expired = 0;
    a938:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    a93c:	f89b 601d 	ldrb.w	r6, [fp, #29]
    a940:	2eff      	cmp	r6, #255	; 0xff
    a942:	d00c      	beq.n	a95e <ticker_job+0xae>
		ticker = &node[id_expired];
    a944:	b237      	sxth	r7, r6
    a946:	9b06      	ldr	r3, [sp, #24]
    a948:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a94c:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    a950:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    a952:	4545      	cmp	r5, r8
    a954:	f240 8136 	bls.w	abc4 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    a958:	eba5 0508 	sub.w	r5, r5, r8
    a95c:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    a95e:	9b04      	ldr	r3, [sp, #16]
    a960:	9a03      	ldr	r2, [sp, #12]
    a962:	9905      	ldr	r1, [sp, #20]
    a964:	42b1      	cmp	r1, r6
    a966:	bf18      	it	ne
    a968:	4613      	movne	r3, r2
    a96a:	9304      	str	r3, [sp, #16]
	node = &instance->node[0];
    a96c:	f8db 3000 	ldr.w	r3, [fp]
    a970:	930a      	str	r3, [sp, #40]	; 0x28
	users = &instance->user[0];
    a972:	f8db 3004 	ldr.w	r3, [fp, #4]
    a976:	9312      	str	r3, [sp, #72]	; 0x48
    a978:	f89b 3009 	ldrb.w	r3, [fp, #9]
    a97c:	3b01      	subs	r3, #1
    a97e:	b2db      	uxtb	r3, r3
    a980:	9303      	str	r3, [sp, #12]
	while (count_user--) {
    a982:	9b03      	ldr	r3, [sp, #12]
    a984:	2bff      	cmp	r3, #255	; 0xff
    a986:	f040 8170 	bne.w	ac6a <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    a98a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    a98e:	9a05      	ldr	r2, [sp, #20]
    a990:	4293      	cmp	r3, r2
	if (!pending) {
    a992:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if (instance->ticker_id_head != ticker_id_old_head) {
    a994:	f040 8349 	bne.w	b02a <ticker_job+0x77a>
	if (!pending) {
    a998:	b95b      	cbnz	r3, a9b2 <ticker_job+0x102>
    a99a:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    a99e:	f8db 3004 	ldr.w	r3, [fp, #4]
    a9a2:	9303      	str	r3, [sp, #12]
    a9a4:	3c01      	subs	r4, #1
    a9a6:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    a9a8:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    a9ac:	2cff      	cmp	r4, #255	; 0xff
    a9ae:	f040 82a0 	bne.w	aef2 <ticker_job+0x642>
	instance->job_guard = 0;
    a9b2:	2300      	movs	r3, #0
    a9b4:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    a9b8:	9b04      	ldr	r3, [sp, #16]
    a9ba:	b14b      	cbz	r3, a9d0 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    a9bc:	f89b 301d 	ldrb.w	r3, [fp, #29]
    a9c0:	2bff      	cmp	r3, #255	; 0xff
    a9c2:	f040 82e9 	bne.w	af98 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    a9c6:	f00b fa3b 	bl	15e40 <cntr_stop>
    a9ca:	b908      	cbnz	r0, a9d0 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    a9cc:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    a9d0:	f89b 301f 	ldrb.w	r3, [fp, #31]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	f000 8331 	beq.w	b03c <ticker_job+0x78c>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    a9da:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    a9de:	465b      	mov	r3, fp
    a9e0:	2201      	movs	r2, #1
    a9e2:	2103      	movs	r1, #3
    a9e4:	2004      	movs	r0, #4
    a9e6:	46a4      	mov	ip, r4
}
    a9e8:	b015      	add	sp, #84	; 0x54
    a9ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    a9ee:	4760      	bx	ip
		flag_elapsed = 0;
    a9f0:	9203      	str	r2, [sp, #12]
		ticks_elapsed = 0;
    a9f2:	4690      	mov	r8, r2
    a9f4:	e77f      	b.n	a8f6 <ticker_job+0x46>
		user = &users[count_user];
    a9f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a9f8:	9a04      	ldr	r2, [sp, #16]
    a9fa:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    a9fe:	687b      	ldr	r3, [r7, #4]
    aa00:	9308      	str	r3, [sp, #32]
		while (user->middle != user->last) {
    aa02:	78f9      	ldrb	r1, [r7, #3]
    aa04:	78be      	ldrb	r6, [r7, #2]
    aa06:	428e      	cmp	r6, r1
    aa08:	f000 80d7 	beq.w	abba <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    aa0c:	9b08      	ldr	r3, [sp, #32]
			if (middle == user->count_user_op) {
    aa0e:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    aa10:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    aa14:	0112      	lsls	r2, r2, #4
    aa16:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    aa18:	1c73      	adds	r3, r6, #1
    aa1a:	b2db      	uxtb	r3, r3
				middle = 0;
    aa1c:	4298      	cmp	r0, r3
    aa1e:	bf08      	it	eq
    aa20:	2300      	moveq	r3, #0
			user->middle = middle;
    aa22:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    aa24:	9b08      	ldr	r3, [sp, #32]
    aa26:	5c9a      	ldrb	r2, [r3, r2]
    aa28:	2a03      	cmp	r2, #3
    aa2a:	d9eb      	bls.n	aa04 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    aa2c:	2a05      	cmp	r2, #5
    aa2e:	d817      	bhi.n	aa60 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    aa30:	7869      	ldrb	r1, [r5, #1]
    aa32:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    aa36:	930c      	str	r3, [sp, #48]	; 0x30
    aa38:	980c      	ldr	r0, [sp, #48]	; 0x30
    aa3a:	9b06      	ldr	r3, [sp, #24]
    aa3c:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    aa40:	7863      	ldrb	r3, [r4, #1]
    aa42:	78a0      	ldrb	r0, [r4, #2]
    aa44:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    aa46:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    aa4a:	d009      	beq.n	aa60 <ticker_job+0x1b0>
			    (state == 0) ||
    aa4c:	2a04      	cmp	r2, #4
    aa4e:	d10c      	bne.n	aa6a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    aa50:	686a      	ldr	r2, [r5, #4]
    aa52:	b952      	cbnz	r2, aa6a <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    aa54:	68aa      	ldr	r2, [r5, #8]
    aa56:	b942      	cbnz	r2, aa6a <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    aa58:	68ea      	ldr	r2, [r5, #12]
    aa5a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    aa5e:	d104      	bne.n	aa6a <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    aa60:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    aa62:	4628      	mov	r0, r5
    aa64:	f7ff fec3 	bl	a7ee <ticker_job_op_cb>
    aa68:	e7cb      	b.n	aa02 <ticker_job+0x152>
			if (state == 1) {
    aa6a:	2b01      	cmp	r3, #1
    aa6c:	f040 809b 	bne.w	aba6 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    aa70:	4658      	mov	r0, fp
    aa72:	f7ff fe72 	bl	a75a <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    aa76:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    aa78:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    aa7a:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    aa7c:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    aa7e:	f040 8084 	bne.w	ab8a <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    aa82:	f8db 3014 	ldr.w	r3, [fp, #20]
    aa86:	930a      	str	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    aa88:	f00b fa08 	bl	15e9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    aa8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticks_now = cntr_cnt_get();
    aa8e:	900b      	str	r0, [sp, #44]	; 0x2c
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    aa90:	1ac3      	subs	r3, r0, r3
    aa92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    aa96:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    aa98:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    aa9a:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    aa9c:	bf9e      	ittt	ls
    aa9e:	6962      	ldrls	r2, [r4, #20]
    aaa0:	1b92      	subls	r2, r2, r6
    aaa2:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    aaa4:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    aaa6:	bf96      	itet	ls
    aaa8:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    aaaa:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    aaac:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    aaae:	b18a      	cbz	r2, aad4 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    aab0:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    aab2:	b179      	cbz	r1, aad4 <ticker_job+0x224>
		user_op->params.update.lazy--;
    aab4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    aab8:	fa1f fe8e 	uxth.w	lr, lr
    aabc:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    aac0:	429a      	cmp	r2, r3
    aac2:	d32b      	bcc.n	ab1c <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    aac4:	f8df 9324 	ldr.w	r9, [pc, #804]	; adec <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    aac8:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    aacc:	45e6      	cmp	lr, ip
    aace:	d847      	bhi.n	ab60 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    aad0:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    aad4:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    aad6:	990a      	ldr	r1, [sp, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    aad8:	4413      	add	r3, r2
    aada:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    aadc:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    aade:	6963      	ldr	r3, [r4, #20]
    aae0:	4413      	add	r3, r2
    aae2:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    aae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aae6:	4620      	mov	r0, r4
    aae8:	f7ff fe63 	bl	a7b2 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    aaec:	69a2      	ldr	r2, [r4, #24]
    aaee:	892b      	ldrh	r3, [r5, #8]
    aaf0:	4413      	add	r3, r2
    aaf2:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    aaf4:	896a      	ldrh	r2, [r5, #10]
    aaf6:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    aaf8:	bf8c      	ite	hi
    aafa:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    aafc:	2300      	movls	r3, #0
    aafe:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    ab00:	7bab      	ldrb	r3, [r5, #14]
    ab02:	b103      	cbz	r3, ab06 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    ab04:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    ab06:	9b06      	ldr	r3, [sp, #24]
    ab08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ab0a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    ab0e:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    ab10:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    ab14:	3301      	adds	r3, #1
    ab16:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    ab18:	2100      	movs	r1, #0
    ab1a:	e7a2      	b.n	aa62 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    ab1c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    ab20:	45e6      	cmp	lr, ip
    ab22:	d2cf      	bcs.n	aac4 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    ab24:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ab26:	4eaf      	ldr	r6, [pc, #700]	; (ade4 <ticker_job+0x534>)
    ab28:	48af      	ldr	r0, [pc, #700]	; (ade8 <ticker_job+0x538>)
    ab2a:	198e      	adds	r6, r1, r6
    ab2c:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    ab2e:	bf81      	itttt	hi
    ab30:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    ab34:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    ab38:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    ab3c:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    ab3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    ab40:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    ab42:	bf8c      	ite	hi
    ab44:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    ab48:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    ab4c:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    ab4e:	4491      	add	r9, r2
			ticker->lazy_current--;
    ab50:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    ab54:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    ab56:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    ab5a:	f8a4 c01e 	strh.w	ip, [r4, #30]
    ab5e:	e7af      	b.n	aac0 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    ab60:	6a66      	ldr	r6, [r4, #36]	; 0x24
    ab62:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    ab64:	48a0      	ldr	r0, [pc, #640]	; (ade8 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    ab66:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    ab68:	499e      	ldr	r1, [pc, #632]	; (ade4 <ticker_job+0x534>)
    ab6a:	1871      	adds	r1, r6, r1
    ab6c:	4281      	cmp	r1, r0
	return 0;
    ab6e:	bf8e      	itee	hi
    ab70:	2100      	movhi	r1, #0
		return 1;
    ab72:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    ab74:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    ab76:	4411      	add	r1, r2
			ticker->lazy_current++;
    ab78:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    ab7c:	bf8c      	ite	hi
    ab7e:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    ab80:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    ab82:	440b      	add	r3, r1
			ticker->lazy_current++;
    ab84:	f8a4 c01e 	strh.w	ip, [r4, #30]
    ab88:	e79e      	b.n	aac8 <ticker_job+0x218>
		ticker->req = ticker->ack;
    ab8a:	78a3      	ldrb	r3, [r4, #2]
    ab8c:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    ab8e:	786b      	ldrb	r3, [r5, #1]
    ab90:	f89b 201c 	ldrb.w	r2, [fp, #28]
    ab94:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    ab96:	bf01      	itttt	eq
    ab98:	23ff      	moveq	r3, #255	; 0xff
    ab9a:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    ab9e:	2300      	moveq	r3, #0
    aba0:	f8cb 3018 	streq.w	r3, [fp, #24]
    aba4:	e7b8      	b.n	ab18 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    aba6:	2104      	movs	r1, #4
    aba8:	465b      	mov	r3, fp
    abaa:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    abae:	2201      	movs	r2, #1
    abb0:	4608      	mov	r0, r1
    abb2:	47a0      	blx	r4
				pending = 1;
    abb4:	2301      	movs	r3, #1
				user->middle = prev;
    abb6:	70be      	strb	r6, [r7, #2]
				pending = 1;
    abb8:	9309      	str	r3, [sp, #36]	; 0x24
    abba:	9b04      	ldr	r3, [sp, #16]
    abbc:	3b01      	subs	r3, #1
    abbe:	b2db      	uxtb	r3, r3
    abc0:	9304      	str	r3, [sp, #16]
    abc2:	e6aa      	b.n	a91a <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    abc4:	f8db 3018 	ldr.w	r3, [fp, #24]
    abc8:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    abca:	bf29      	itett	cs
    abcc:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    abce:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    abd0:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    abd4:	2300      	movcs	r3, #0
    abd6:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    abda:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    abdc:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    abde:	b11b      	cbz	r3, abe8 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    abe0:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    abe4:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    abe8:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    abea:	9b06      	ldr	r3, [sp, #24]
		ticker->ticks_to_expire = 0;
    abec:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    abee:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    abf2:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    abf6:	f8d4 e004 	ldr.w	lr, [r4, #4]
    abfa:	f1be 0f00 	cmp.w	lr, #0
    abfe:	d030      	beq.n	ac62 <ticker_job+0x3b2>
    ac00:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    ac02:	f8df c1e4 	ldr.w	ip, [pc, #484]	; ade8 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    ac06:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ac08:	6a21      	ldr	r1, [r4, #32]
    ac0a:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    ac0c:	4975      	ldr	r1, [pc, #468]	; (ade4 <ticker_job+0x534>)
    ac0e:	1859      	adds	r1, r3, r1
    ac10:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    ac12:	bf9f      	itttt	ls
    ac14:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    ac18:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    ac1c:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    ac20:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    ac22:	bf92      	itee	ls
    ac24:	9b03      	ldrls	r3, [sp, #12]
	ticker->remainder_current += ticker->remainder_periodic;
    ac26:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    ac28:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    ac2a:	4473      	add	r3, lr
			while (count--) {
    ac2c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    ac30:	441a      	add	r2, r3
			while (count--) {
    ac32:	d2e8      	bcs.n	ac06 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    ac34:	9b07      	ldr	r3, [sp, #28]
			ticker->ticks_to_expire = ticks_to_expire;
    ac36:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    ac38:	f8db 1014 	ldr.w	r1, [fp, #20]
    ac3c:	eb03 0209 	add.w	r2, r3, r9
    ac40:	4620      	mov	r0, r4
    ac42:	f7ff fdb6 	bl	a7b2 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    ac46:	8ba3      	ldrh	r3, [r4, #28]
    ac48:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    ac4a:	2300      	movs	r3, #0
    ac4c:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    ac4e:	9b06      	ldr	r3, [sp, #24]
    ac50:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    ac54:	7863      	ldrb	r3, [r4, #1]
    ac56:	3301      	adds	r3, #1
    ac58:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    ac5a:	eba8 0805 	sub.w	r8, r8, r5
    ac5e:	46b2      	mov	sl, r6
    ac60:	e66c      	b.n	a93c <ticker_job+0x8c>
			ticker->req = ticker->ack;
    ac62:	78a3      	ldrb	r3, [r4, #2]
    ac64:	7063      	strb	r3, [r4, #1]
    ac66:	4656      	mov	r6, sl
    ac68:	e7f7      	b.n	ac5a <ticker_job+0x3aa>
		user = &users[count_user];
    ac6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ac6c:	9a03      	ldr	r2, [sp, #12]
    ac6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ac72:	9306      	str	r3, [sp, #24]
		user_ops = (void *)&user->user_op[0];
    ac74:	685b      	ldr	r3, [r3, #4]
    ac76:	930c      	str	r3, [sp, #48]	; 0x30
		user_ops_first = user->first;
    ac78:	9b06      	ldr	r3, [sp, #24]
    ac7a:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    ac7e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    ac82:	f000 808e 	beq.w	ada2 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    ac86:	fa0f f38a 	sxth.w	r3, sl
    ac8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ac8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
				insert_head = ticker->next;
    ac90:	46d0      	mov	r8, sl
    ac92:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    ac96:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    ac9a:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    ac9c:	f8db 3000 	ldr.w	r3, [fp]
    aca0:	930d      	str	r3, [sp, #52]	; 0x34
	ticker->next = TICKER_NULL;
    aca2:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    aca4:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    aca6:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    aca8:	8be3      	ldrh	r3, [r4, #30]
    acaa:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    acac:	bf86      	itte	hi
    acae:	1a9b      	subhi	r3, r3, r2
    acb0:	b29b      	uxthhi	r3, r3
		skip = 0;
    acb2:	2300      	movls	r3, #0
    acb4:	930e      	str	r3, [sp, #56]	; 0x38
	ticker_new = &node[id];
    acb6:	fa0f f388 	sxth.w	r3, r8
    acba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    acbe:	00db      	lsls	r3, r3, #3
    acc0:	9313      	str	r3, [sp, #76]	; 0x4c
    acc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	node = &instance->node[0];
    acc4:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    acc8:	f8db 0018 	ldr.w	r0, [fp, #24]
    accc:	9007      	str	r0, [sp, #28]
	ticker_new = &node[id];
    acce:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    acd2:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    acd4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    acd8:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    acdc:	930b      	str	r3, [sp, #44]	; 0x2c
	collide = ticker_id_slot_previous = TICKER_NULL;
    acde:	9008      	str	r0, [sp, #32]
	while ((current != TICKER_NULL) &&
    ace0:	2bff      	cmp	r3, #255	; 0xff
    ace2:	d007      	beq.n	acf4 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    ace4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    ace8:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    acec:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    acee:	4281      	cmp	r1, r0
    acf0:	f200 80a9 	bhi.w	ae46 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    acf4:	f8de 0018 	ldr.w	r0, [lr, #24]
    acf8:	900f      	str	r0, [sp, #60]	; 0x3c
	collide = ticker_by_slot_get(&node[0], current,
    acfa:	eb01 0c00 	add.w	ip, r1, r0
    acfe:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    ad00:	2eff      	cmp	r6, #255	; 0xff
    ad02:	f040 80ae 	bne.w	ae62 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    ad06:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ad08:	b130      	cbz	r0, ad18 <ticker_job+0x468>
    ad0a:	9807      	ldr	r0, [sp, #28]
    ad0c:	4281      	cmp	r1, r0
    ad0e:	f0c0 80bf 	bcc.w	ae90 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    ad12:	2eff      	cmp	r6, #255	; 0xff
    ad14:	f040 818e 	bne.w	b034 <ticker_job+0x784>
		if (previous == current) {
    ad18:	980b      	ldr	r0, [sp, #44]	; 0x2c
		ticker_new->ticks_to_expire = ticks_to_expire;
    ad1a:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    ad1e:	4283      	cmp	r3, r0
			node[previous].next = id;
    ad20:	bf18      	it	ne
    ad22:	f9bd 002c 	ldrshne.w	r0, [sp, #44]	; 0x2c
		ticker_new->next = current;
    ad26:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    ad2a:	bf16      	itet	ne
    ad2c:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    ad30:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    ad34:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    ad38:	2bff      	cmp	r3, #255	; 0xff
    ad3a:	d006      	beq.n	ad4a <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    ad3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ad40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ad44:	689a      	ldr	r2, [r3, #8]
    ad46:	1a51      	subs	r1, r2, r1
    ad48:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    ad4a:	78a3      	ldrb	r3, [r4, #2]
    ad4c:	3301      	adds	r3, #1
    ad4e:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    ad50:	2100      	movs	r1, #0
			if (user_op) {
    ad52:	2d00      	cmp	r5, #0
    ad54:	d093      	beq.n	ac7e <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    ad56:	4628      	mov	r0, r5
    ad58:	f7ff fd49 	bl	a7ee <ticker_job_op_cb>
    ad5c:	e78f      	b.n	ac7e <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    ad5e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    ad62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ad64:	011b      	lsls	r3, r3, #4
    ad66:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    ad68:	f109 0201 	add.w	r2, r9, #1
    ad6c:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    ad70:	9a06      	ldr	r2, [sp, #24]
    ad72:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    ad74:	454a      	cmp	r2, r9
    ad76:	bf08      	it	eq
    ad78:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    ad7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ad7e:	5cd3      	ldrb	r3, [r2, r3]
    ad80:	2b03      	cmp	r3, #3
    ad82:	d10e      	bne.n	ada2 <ticker_job+0x4f2>
				id_insert = user_op->id;
    ad84:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    ad88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad8a:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    ad8e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    ad92:	7862      	ldrb	r2, [r4, #1]
    ad94:	78a3      	ldrb	r3, [r4, #2]
    ad96:	429a      	cmp	r2, r3
    ad98:	d009      	beq.n	adae <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    ad9a:	2101      	movs	r1, #1
    ad9c:	4628      	mov	r0, r5
    ad9e:	f7ff fd26 	bl	a7ee <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    ada2:	9b06      	ldr	r3, [sp, #24]
    ada4:	789b      	ldrb	r3, [r3, #2]
    ada6:	454b      	cmp	r3, r9
    ada8:	d1d9      	bne.n	ad5e <ticker_job+0x4ae>
    adaa:	9b03      	ldr	r3, [sp, #12]
    adac:	e5e6      	b.n	a97c <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    adae:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    adb0:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    adb4:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    adb6:	692b      	ldr	r3, [r5, #16]
    adb8:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    adba:	8aab      	ldrh	r3, [r5, #20]
    adbc:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    adbe:	69ab      	ldr	r3, [r5, #24]
    adc0:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    adc2:	69eb      	ldr	r3, [r5, #28]
    adc4:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    adc6:	6a2b      	ldr	r3, [r5, #32]
    adc8:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    adca:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    adcc:	68ab      	ldr	r3, [r5, #8]
    adce:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    add0:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    add2:	686a      	ldr	r2, [r5, #4]
    add4:	4620      	mov	r0, r4
    add6:	f7ff fcec 	bl	a7b2 <ticks_to_expire_prep>
	ticker->force = 1;
    adda:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    addc:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    adde:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    ade0:	70e3      	strb	r3, [r4, #3]
    ade2:	e75b      	b.n	ac9c <ticker_job+0x3ec>
    ade4:	ff172b5a 	.word	0xff172b5a
    ade8:	7f172b59 	.word	0x7f172b59
    adec:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    adf0:	6860      	ldr	r0, [r4, #4]
    adf2:	2800      	cmp	r0, #0
    adf4:	d07b      	beq.n	aeee <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    adf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    adf8:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    adfa:	4b92      	ldr	r3, [pc, #584]	; (b044 <ticker_job+0x794>)
	ticker->remainder_current += ticker->remainder_periodic;
    adfc:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    adfe:	4992      	ldr	r1, [pc, #584]	; (b048 <ticker_job+0x798>)
    ae00:	18d3      	adds	r3, r2, r3
    ae02:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    ae04:	bf9c      	itt	ls
    ae06:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    ae0a:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    ae0e:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    ae10:	bf8b      	itete	hi
    ae12:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    ae14:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    ae18:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    ae1a:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    ae1c:	4403      	add	r3, r0
		return 1;
    ae1e:	bf98      	it	ls
    ae20:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    ae22:	4413      	add	r3, r2
			ticker->lazy_current++;
    ae24:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    ae26:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    ae28:	3201      	adds	r2, #1
    ae2a:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    ae2c:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    ae2e:	4293      	cmp	r3, r2
    ae30:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    ae34:	bf89      	itett	hi
    ae36:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    ae38:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    ae3a:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    ae3c:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    ae3e:	bf9c      	itt	ls
    ae40:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    ae42:	60a1      	strls	r1, [r4, #8]
    ae44:	e73d      	b.n	acc2 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    ae46:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    ae48:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    ae4a:	b946      	cbnz	r6, ae5e <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    ae4c:	9f07      	ldr	r7, [sp, #28]
    ae4e:	42b8      	cmp	r0, r7
    ae50:	d200      	bcs.n	ae54 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    ae52:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    ae54:	930b      	str	r3, [sp, #44]	; 0x2c
    ae56:	9607      	str	r6, [sp, #28]
    ae58:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    ae5c:	e740      	b.n	ace0 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    ae5e:	9308      	str	r3, [sp, #32]
    ae60:	e7f8      	b.n	ae54 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    ae62:	b230      	sxth	r0, r6
    ae64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ae68:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    ae6c:	9710      	str	r7, [sp, #64]	; 0x40
		ticks_to_expire = ticker->ticks_to_expire;
    ae6e:	68bf      	ldr	r7, [r7, #8]
    ae70:	9711      	str	r7, [sp, #68]	; 0x44
		if (ticks_slot <= ticks_to_expire) {
    ae72:	4567      	cmp	r7, ip
    ae74:	d20a      	bcs.n	ae8c <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    ae76:	9f10      	ldr	r7, [sp, #64]	; 0x40
    ae78:	69bf      	ldr	r7, [r7, #24]
    ae7a:	2f00      	cmp	r7, #0
    ae7c:	f47f af43 	bne.w	ad06 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    ae80:	9e11      	ldr	r6, [sp, #68]	; 0x44
    ae82:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    ae86:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    ae8a:	e739      	b.n	ad00 <ticker_job+0x450>
			return TICKER_NULL;
    ae8c:	26ff      	movs	r6, #255	; 0xff
    ae8e:	e73a      	b.n	ad06 <ticker_job+0x456>
	while (id_insert !=
    ae90:	9b08      	ldr	r3, [sp, #32]
    ae92:	4598      	cmp	r8, r3
    ae94:	f43f af59 	beq.w	ad4a <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    ae98:	9b08      	ldr	r3, [sp, #32]
    ae9a:	2bff      	cmp	r3, #255	; 0xff
    ae9c:	d0a8      	beq.n	adf0 <ticker_job+0x540>
    ae9e:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    aea0:	b233      	sxth	r3, r6
    aea2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    aea6:	9307      	str	r3, [sp, #28]
    aea8:	9a07      	ldr	r2, [sp, #28]
    aeaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aeac:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    aeb0:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    aeb2:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    aeb4:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    aeb6:	bf88      	it	hi
    aeb8:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    aeba:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    aebc:	bf8c      	ite	hi
    aebe:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    aec0:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    aec2:	2a00      	cmp	r2, #0
    aec4:	d094      	beq.n	adf0 <ticker_job+0x540>
    aec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aec8:	4293      	cmp	r3, r2
    aeca:	d891      	bhi.n	adf0 <ticker_job+0x540>
			    skip_collide <= skip &&
    aecc:	78fa      	ldrb	r2, [r7, #3]
    aece:	78e3      	ldrb	r3, [r4, #3]
    aed0:	429a      	cmp	r2, r3
    aed2:	d28d      	bcs.n	adf0 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    aed4:	4631      	mov	r1, r6
    aed6:	4658      	mov	r0, fp
    aed8:	f7ff fc3f 	bl	a75a <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    aedc:	78bb      	ldrb	r3, [r7, #2]
    aede:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    aee0:	9a07      	ldr	r2, [sp, #28]
    aee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				ticker_collide->ticks_to_expire =
    aee4:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    aee6:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    aeea:	46b2      	mov	sl, r6
    aeec:	e6e9      	b.n	acc2 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    aeee:	2101      	movs	r1, #1
    aef0:	e72f      	b.n	ad52 <ticker_job+0x4a2>
		user = &users[count_user];
    aef2:	9b03      	ldr	r3, [sp, #12]
    aef4:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    aef8:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    aefa:	786b      	ldrb	r3, [r5, #1]
    aefc:	78ea      	ldrb	r2, [r5, #3]
    aefe:	429a      	cmp	r2, r3
    af00:	d102      	bne.n	af08 <ticker_job+0x658>
    af02:	3c01      	subs	r4, #1
    af04:	b2e4      	uxtb	r4, r4
    af06:	e551      	b.n	a9ac <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    af08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    af0c:	011b      	lsls	r3, r3, #4
    af0e:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    af10:	5cf3      	ldrb	r3, [r6, r3]
    af12:	2b01      	cmp	r3, #1
    af14:	d025      	beq.n	af62 <ticker_job+0x6b2>
    af16:	2b02      	cmp	r3, #2
    af18:	d12a      	bne.n	af70 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    af1a:	f8d2 c004 	ldr.w	ip, [r2, #4]
    af1e:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    af20:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    af24:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    af28:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    af2c:	28ff      	cmp	r0, #255	; 0xff
    af2e:	d004      	beq.n	af3a <ticker_job+0x68a>
    af30:	6819      	ldr	r1, [r3, #0]
    af32:	f8db 7014 	ldr.w	r7, [fp, #20]
    af36:	42b9      	cmp	r1, r7
    af38:	d023      	beq.n	af82 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    af3a:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    af3e:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    af42:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    af44:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    af46:	29ff      	cmp	r1, #255	; 0xff
    af48:	d007      	beq.n	af5a <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    af4a:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    af4e:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    af52:	6987      	ldr	r7, [r0, #24]
    af54:	6880      	ldr	r0, [r0, #8]
    af56:	b1df      	cbz	r7, af90 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    af58:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    af5a:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    af5e:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    af62:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    af64:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    af68:	b113      	cbz	r3, af70 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    af6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    af6c:	2000      	movs	r0, #0
    af6e:	4798      	blx	r3
			first = user->first + 1;
    af70:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    af72:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    af74:	3301      	adds	r3, #1
    af76:	b2db      	uxtb	r3, r3
				first = 0;
    af78:	429a      	cmp	r2, r3
    af7a:	bf08      	it	eq
    af7c:	2300      	moveq	r3, #0
			user->first = first;
    af7e:	706b      	strb	r3, [r5, #1]
    af80:	e7bb      	b.n	aefa <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    af82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    af86:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    af8a:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    af8e:	e7da      	b.n	af46 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    af90:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    af92:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    af96:	e7d6      	b.n	af46 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    af98:	9b05      	ldr	r3, [sp, #20]
    af9a:	2bff      	cmp	r3, #255	; 0xff
    af9c:	d107      	bne.n	afae <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    af9e:	f00a ff7d 	bl	15e9c <cntr_cnt_get>
    afa2:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    afa4:	f00a ff3e 	bl	15e24 <cntr_start>
    afa8:	b908      	cbnz	r0, afae <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    afaa:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    afae:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    afb2:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    afb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    afba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    afbe:	260a      	movs	r6, #10
    afc0:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    afc2:	f00a ff6b 	bl	15e9c <cntr_cnt_get>
		cc = instance->ticks_current;
    afc6:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    afca:	1b03      	subs	r3, r0, r4
    afcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    afd0:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    afd2:	42ab      	cmp	r3, r5
    afd4:	bf2c      	ite	cs
    afd6:	18e4      	addcs	r4, r4, r3
    afd8:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    afda:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    afde:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    afe0:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    afe4:	4620      	mov	r0, r4
    afe6:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    afe8:	f00a ff58 	bl	15e9c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    afec:	1bc0      	subs	r0, r0, r7
    afee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aff2:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    aff4:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    aff6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    affa:	42a0      	cmp	r0, r4
    affc:	f67f ace8 	bls.w	a9d0 <ticker_job+0x120>
		LL_ASSERT(i);
    b000:	3e01      	subs	r6, #1
    b002:	d1de      	bne.n	afc2 <ticker_job+0x712>
    b004:	4b11      	ldr	r3, [pc, #68]	; (b04c <ticker_job+0x79c>)
    b006:	9301      	str	r3, [sp, #4]
    b008:	9300      	str	r3, [sp, #0]
    b00a:	4a11      	ldr	r2, [pc, #68]	; (b050 <ticker_job+0x7a0>)
    b00c:	4b11      	ldr	r3, [pc, #68]	; (b054 <ticker_job+0x7a4>)
    b00e:	4912      	ldr	r1, [pc, #72]	; (b058 <ticker_job+0x7a8>)
    b010:	4812      	ldr	r0, [pc, #72]	; (b05c <ticker_job+0x7ac>)
    b012:	f7f6 fb65 	bl	16e0 <printk>
    b016:	4040      	eors	r0, r0
    b018:	f380 8811 	msr	BASEPRI, r0
    b01c:	f04f 0004 	mov.w	r0, #4
    b020:	df02      	svc	2
	instance->job_guard = 0;
    b022:	2300      	movs	r3, #0
    b024:	f88b 301e 	strb.w	r3, [fp, #30]
    b028:	e4c8      	b.n	a9bc <ticker_job+0x10c>
	if (!pending) {
    b02a:	2b00      	cmp	r3, #0
    b02c:	d1f9      	bne.n	b022 <ticker_job+0x772>
		flag_compare_update = 1;
    b02e:	2301      	movs	r3, #1
    b030:	9304      	str	r3, [sp, #16]
    b032:	e4b2      	b.n	a99a <ticker_job+0xea>
	while (id_insert !=
    b034:	45b0      	cmp	r8, r6
    b036:	f47f af33 	bne.w	aea0 <ticker_job+0x5f0>
    b03a:	e686      	b.n	ad4a <ticker_job+0x49a>
}
    b03c:	b015      	add	sp, #84	; 0x54
    b03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b042:	bf00      	nop
    b044:	ff172b5a 	.word	0xff172b5a
    b048:	7f172b59 	.word	0x7f172b59
    b04c:	0001868d 	.word	0x0001868d
    b050:	00019a84 	.word	0x00019a84
    b054:	0001ab47 	.word	0x0001ab47
    b058:	00019a8b 	.word	0x00019a8b
    b05c:	0001ab61 	.word	0x0001ab61

0000b060 <ticker_init>:
{
    b060:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    b062:	4d1a      	ldr	r5, [pc, #104]	; (b0cc <ticker_init+0x6c>)
{
    b064:	9f05      	ldr	r7, [sp, #20]
    b066:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    b06a:	262c      	movs	r6, #44	; 0x2c
    b06c:	4346      	muls	r6, r0
    b06e:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    b072:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    b074:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    b078:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    b07a:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    b07e:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    b082:	3b01      	subs	r3, #1
    b084:	b2db      	uxtb	r3, r3
    b086:	2bff      	cmp	r3, #255	; 0xff
    b088:	d111      	bne.n	b0ae <ticker_init+0x4e>
	if (count_op) {
    b08a:	b9ec      	cbnz	r4, b0c8 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    b08c:	222c      	movs	r2, #44	; 0x2c
    b08e:	fb02 5200 	mla	r2, r2, r0, r5
    b092:	9908      	ldr	r1, [sp, #32]
    b094:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    b096:	9909      	ldr	r1, [sp, #36]	; 0x24
    b098:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    b09a:	990a      	ldr	r1, [sp, #40]	; 0x28
    b09c:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    b09e:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    b0a0:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    b0a2:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    b0a4:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    b0a6:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    b0a8:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    b0aa:	4620      	mov	r0, r4
    b0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    b0ae:	b21a      	sxth	r2, r3
    b0b0:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    b0b4:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    b0b6:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    b0ba:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    b0be:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    b0c0:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    b0c4:	b2e4      	uxtb	r4, r4
    b0c6:	e7dc      	b.n	b082 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    b0c8:	2001      	movs	r0, #1
}
    b0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0cc:	20000a98 	.word	0x20000a98

0000b0d0 <ticker_trigger>:
	instance = &_instance[instance_index];
    b0d0:	4a07      	ldr	r2, [pc, #28]	; (b0f0 <ticker_trigger+0x20>)
    b0d2:	212c      	movs	r1, #44	; 0x2c
    b0d4:	fb00 2301 	mla	r3, r0, r1, r2
{
    b0d8:	b410      	push	{r4}
	if (instance->sched_cb) {
    b0da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    b0dc:	b12c      	cbz	r4, b0ea <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b0de:	46a4      	mov	ip, r4
    b0e0:	2201      	movs	r2, #1
    b0e2:	2103      	movs	r1, #3
    b0e4:	2002      	movs	r0, #2
}
    b0e6:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    b0e8:	4760      	bx	ip
}
    b0ea:	bc10      	pop	{r4}
    b0ec:	4770      	bx	lr
    b0ee:	bf00      	nop
    b0f0:	20000a98 	.word	0x20000a98

0000b0f4 <ticker_start>:
{
    b0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b0f8:	4f25      	ldr	r7, [pc, #148]	; (b190 <ticker_start+0x9c>)
    b0fa:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    b0fe:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    b100:	fb08 7000 	mla	r0, r8, r0, r7
    b104:	fa0f fc81 	sxth.w	ip, r1
    b108:	f8d0 e004 	ldr.w	lr, [r0, #4]
    b10c:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    b110:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    b114:	78f4      	ldrb	r4, [r6, #3]
    b116:	1c65      	adds	r5, r4, #1
    b118:	b2ed      	uxtb	r5, r5
		last = 0;
    b11a:	45ae      	cmp	lr, r5
    b11c:	bf98      	it	ls
    b11e:	2500      	movls	r5, #0
	if (last == user->first) {
    b120:	f896 e001 	ldrb.w	lr, [r6, #1]
    b124:	45ae      	cmp	lr, r5
    b126:	d02f      	beq.n	b188 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    b128:	f8d6 c004 	ldr.w	ip, [r6, #4]
    b12c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b130:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    b134:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    b138:	f04f 0a03 	mov.w	sl, #3
    b13c:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    b140:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    b142:	9b08      	ldr	r3, [sp, #32]
    b144:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b148:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    b14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b14c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    b14e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b150:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    b152:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    b156:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    b158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b15a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    b15c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b15e:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    b160:	2302      	movs	r3, #2
    b162:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    b164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b166:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    b168:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    b16a:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    b16c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    b16e:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b170:	6a45      	ldr	r5, [r0, #36]	; 0x24
    b172:	6a03      	ldr	r3, [r0, #32]
    b174:	4608      	mov	r0, r1
    b176:	4798      	blx	r3
    b178:	fb09 7308 	mla	r3, r9, r8, r7
    b17c:	2200      	movs	r2, #0
    b17e:	2104      	movs	r1, #4
    b180:	47a8      	blx	r5
	return user_op->status;
    b182:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b188:	2001      	movs	r0, #1
}
    b18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b18e:	bf00      	nop
    b190:	20000a98 	.word	0x20000a98

0000b194 <ticker_update>:
{
    b194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b198:	f8df 8090 	ldr.w	r8, [pc, #144]	; b22c <ticker_update+0x98>
    b19c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    b1a0:	fb0a 8e00 	mla	lr, sl, r0, r8
    b1a4:	b20f      	sxth	r7, r1
    b1a6:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    b1aa:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    b1ac:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    b1b0:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    b1b4:	78c4      	ldrb	r4, [r0, #3]
    b1b6:	1c66      	adds	r6, r4, #1
    b1b8:	b2f6      	uxtb	r6, r6
		last = 0;
    b1ba:	42b5      	cmp	r5, r6
    b1bc:	bf98      	it	ls
    b1be:	2600      	movls	r6, #0
	if (last == user->first) {
    b1c0:	7845      	ldrb	r5, [r0, #1]
    b1c2:	42b5      	cmp	r5, r6
    b1c4:	d02f      	beq.n	b226 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    b1c6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b1ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b1ce:	0125      	lsls	r5, r4, #4
    b1d0:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    b1d4:	2704      	movs	r7, #4
    b1d6:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    b1da:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    b1dc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    b1e0:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    b1e2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    b1e6:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    b1e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b1ec:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    b1ee:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    b1f2:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    b1f4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b1f8:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    b1fa:	2302      	movs	r3, #2
    b1fc:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    b1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b200:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    b202:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    b204:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    b206:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    b208:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b20a:	f8de 3020 	ldr.w	r3, [lr, #32]
    b20e:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    b212:	4608      	mov	r0, r1
    b214:	4798      	blx	r3
    b216:	fb09 830a 	mla	r3, r9, sl, r8
    b21a:	2200      	movs	r2, #0
    b21c:	4639      	mov	r1, r7
    b21e:	47a8      	blx	r5
	return user_op->status;
    b220:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b226:	2001      	movs	r0, #1
}
    b228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b22c:	20000a98 	.word	0x20000a98

0000b230 <ticker_stop>:
{
    b230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b234:	f8df 906c 	ldr.w	r9, [pc, #108]	; b2a4 <ticker_stop+0x74>
    b238:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    b23c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    b240:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    b242:	f8de 0004 	ldr.w	r0, [lr, #4]
    b246:	b20e      	sxth	r6, r1
    b248:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    b24c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    b250:	78fc      	ldrb	r4, [r7, #3]
    b252:	1c65      	adds	r5, r4, #1
    b254:	b2ed      	uxtb	r5, r5
		last = 0;
    b256:	42a8      	cmp	r0, r5
    b258:	bf98      	it	ls
    b25a:	2500      	movls	r5, #0
	if (last == user->first) {
    b25c:	7878      	ldrb	r0, [r7, #1]
    b25e:	42a8      	cmp	r0, r5
    b260:	d01d      	beq.n	b29e <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    b262:	6878      	ldr	r0, [r7, #4]
    b264:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b268:	0124      	lsls	r4, r4, #4
    b26a:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    b26c:	f04f 0c05 	mov.w	ip, #5
    b270:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    b274:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    b276:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    b278:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    b27a:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    b27c:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    b27e:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    b280:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b282:	f8de 3020 	ldr.w	r3, [lr, #32]
    b286:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    b28a:	4608      	mov	r0, r1
    b28c:	4798      	blx	r3
    b28e:	fb08 930a 	mla	r3, r8, sl, r9
    b292:	2200      	movs	r2, #0
    b294:	2104      	movs	r1, #4
    b296:	47a0      	blx	r4
	return user_op->status;
    b298:	6a70      	ldr	r0, [r6, #36]	; 0x24
    b29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b29e:	2001      	movs	r0, #1
}
    b2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b2a4:	20000a98 	.word	0x20000a98

0000b2a8 <ticker_next_slot_get>:
{
    b2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b2ac:	f8df 8078 	ldr.w	r8, [pc, #120]	; b328 <ticker_next_slot_get+0x80>
    b2b0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    b2b4:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    b2b6:	fb0a 8000 	mla	r0, sl, r0, r8
    b2ba:	fa0f fe81 	sxth.w	lr, r1
    b2be:	6845      	ldr	r5, [r0, #4]
    b2c0:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    b2c4:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    b2c8:	78fc      	ldrb	r4, [r7, #3]
    b2ca:	1c66      	adds	r6, r4, #1
    b2cc:	b2f6      	uxtb	r6, r6
		last = 0;
    b2ce:	42b5      	cmp	r5, r6
    b2d0:	bf98      	it	ls
    b2d2:	2600      	movls	r6, #0
	if (last == user->first) {
    b2d4:	787d      	ldrb	r5, [r7, #1]
    b2d6:	42b5      	cmp	r5, r6
    b2d8:	d023      	beq.n	b322 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    b2da:	f8d7 c004 	ldr.w	ip, [r7, #4]
    b2de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b2e2:	0125      	lsls	r5, r4, #4
    b2e4:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    b2e8:	f04f 0e02 	mov.w	lr, #2
    b2ec:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    b2f0:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    b2f2:	9b08      	ldr	r3, [sp, #32]
    b2f4:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    b2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2f8:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    b2fa:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    b2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    b2fe:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    b300:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b302:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    b306:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    b308:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b30a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    b30c:	6a03      	ldr	r3, [r0, #32]
    b30e:	4608      	mov	r0, r1
    b310:	4798      	blx	r3
    b312:	fb09 830a 	mla	r3, r9, sl, r8
    b316:	2200      	movs	r2, #0
    b318:	2104      	movs	r1, #4
    b31a:	47a8      	blx	r5
	return user_op->status;
    b31c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    b31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b322:	2001      	movs	r0, #1
}
    b324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b328:	20000a98 	.word	0x20000a98

0000b32c <ticker_job_idle_get>:
{
    b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    b330:	f8df 906c 	ldr.w	r9, [pc, #108]	; b3a0 <ticker_job_idle_get+0x74>
    b334:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    b338:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    b33c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    b33e:	f8de 0004 	ldr.w	r0, [lr, #4]
    b342:	b20e      	sxth	r6, r1
    b344:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    b348:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    b34c:	78fc      	ldrb	r4, [r7, #3]
    b34e:	1c65      	adds	r5, r4, #1
    b350:	b2ed      	uxtb	r5, r5
		last = 0;
    b352:	42a8      	cmp	r0, r5
    b354:	bf98      	it	ls
    b356:	2500      	movls	r5, #0
	if (last == user->first) {
    b358:	7878      	ldrb	r0, [r7, #1]
    b35a:	42a8      	cmp	r0, r5
    b35c:	d01d      	beq.n	b39a <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    b35e:	6878      	ldr	r0, [r7, #4]
    b360:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    b364:	0124      	lsls	r4, r4, #4
    b366:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    b368:	f04f 0c01 	mov.w	ip, #1
    b36c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    b370:	20ff      	movs	r0, #255	; 0xff
    b372:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    b374:	2002      	movs	r0, #2
    b376:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    b378:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    b37a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    b37c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b37e:	f8de 3020 	ldr.w	r3, [lr, #32]
    b382:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    b386:	4608      	mov	r0, r1
    b388:	4798      	blx	r3
    b38a:	fb08 930a 	mla	r3, r8, sl, r9
    b38e:	2200      	movs	r2, #0
    b390:	2104      	movs	r1, #4
    b392:	47a0      	blx	r4
	return user_op->status;
    b394:	6a70      	ldr	r0, [r6, #36]	; 0x24
    b396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    b39a:	2001      	movs	r0, #1
}
    b39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3a0:	20000a98 	.word	0x20000a98

0000b3a4 <ticker_job_sched>:
{
    b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b3a8:	4c08      	ldr	r4, [pc, #32]	; (b3cc <ticker_job_sched+0x28>)
    b3aa:	252c      	movs	r5, #44	; 0x2c
    b3ac:	fb05 4300 	mla	r3, r5, r0, r4
{
    b3b0:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b3b2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    b3b4:	6a1b      	ldr	r3, [r3, #32]
    b3b6:	4608      	mov	r0, r1
    b3b8:	4798      	blx	r3
    b3ba:	fb06 4305 	mla	r3, r6, r5, r4
    b3be:	46bc      	mov	ip, r7
    b3c0:	2200      	movs	r2, #0
    b3c2:	2104      	movs	r1, #4
}
    b3c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    b3c8:	4760      	bx	ip
    b3ca:	bf00      	nop
    b3cc:	20000a98 	.word	0x20000a98

0000b3d0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    b3d0:	f00a bd64 	b.w	15e9c <cntr_cnt_get>

0000b3d4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    b3d4:	1a40      	subs	r0, r0, r1
}
    b3d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b3da:	4770      	bx	lr

0000b3dc <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    b3dc:	b508      	push	{r3, lr}
    b3de:	4603      	mov	r3, r0
	if (addr_type > 1) {
    b3e0:	2b01      	cmp	r3, #1
{
    b3e2:	4608      	mov	r0, r1
	if (addr_type > 1) {
    b3e4:	d80e      	bhi.n	b404 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    b3e6:	b133      	cbz	r3, b3f6 <ll_addr_get+0x1a>
		if (bdaddr) {
    b3e8:	b119      	cbz	r1, b3f2 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    b3ea:	2206      	movs	r2, #6
    b3ec:	4906      	ldr	r1, [pc, #24]	; (b408 <ll_addr_get+0x2c>)
    b3ee:	f7f5 f90b 	bl	608 <memcpy>
		}

		return rnd_addr;
    b3f2:	4805      	ldr	r0, [pc, #20]	; (b408 <ll_addr_get+0x2c>)
    b3f4:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    b3f6:	b119      	cbz	r1, b400 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    b3f8:	2206      	movs	r2, #6
    b3fa:	4904      	ldr	r1, [pc, #16]	; (b40c <ll_addr_get+0x30>)
    b3fc:	f7f5 f904 	bl	608 <memcpy>
	}

	return pub_addr;
    b400:	4802      	ldr	r0, [pc, #8]	; (b40c <ll_addr_get+0x30>)
}
    b402:	bd08      	pop	{r3, pc}
		return NULL;
    b404:	2000      	movs	r0, #0
    b406:	bd08      	pop	{r3, pc}
    b408:	20000af6 	.word	0x20000af6
    b40c:	20000af0 	.word	0x20000af0

0000b410 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    b410:	b570      	push	{r4, r5, r6, lr}
    b412:	4606      	mov	r6, r0
    b414:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    b416:	f008 fdb9 	bl	13f8c <ll_adv_is_enabled>
    b41a:	4604      	mov	r4, r0
    b41c:	b110      	cbz	r0, b424 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    b41e:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    b420:	4620      	mov	r0, r4
    b422:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    b424:	f008 fdc8 	bl	13fb8 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    b428:	f010 0f06 	tst.w	r0, #6
    b42c:	d1f7      	bne.n	b41e <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    b42e:	2206      	movs	r2, #6
    b430:	4629      	mov	r1, r5
	if (addr_type) {
    b432:	b11e      	cbz	r6, b43c <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    b434:	4802      	ldr	r0, [pc, #8]	; (b440 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    b436:	f7f5 f8e7 	bl	608 <memcpy>
    b43a:	e7f1      	b.n	b420 <ll_addr_set+0x10>
    b43c:	4801      	ldr	r0, [pc, #4]	; (b444 <ll_addr_set+0x34>)
    b43e:	e7fa      	b.n	b436 <ll_addr_set+0x26>
    b440:	20000af6 	.word	0x20000af6
    b444:	20000af0 	.word	0x20000af0

0000b448 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    b448:	2300      	movs	r3, #0
    b44a:	7003      	strb	r3, [r0, #0]
	*max = 0;
    b44c:	700b      	strb	r3, [r1, #0]
    b44e:	4770      	bx	lr

0000b450 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    b450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b452:	4607      	mov	r7, r0
    b454:	460e      	mov	r6, r1
	while (len) {
    b456:	460c      	mov	r4, r1
    b458:	1b35      	subs	r5, r6, r4
    b45a:	443d      	add	r5, r7
    b45c:	b18c      	cbz	r4, b482 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    b45e:	f7f6 fbfd 	bl	1c5c <sys_rand32_get>

		if (len >= sizeof(v)) {
    b462:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    b464:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    b466:	d907      	bls.n	b478 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    b468:	2204      	movs	r2, #4
    b46a:	eb0d 0102 	add.w	r1, sp, r2
    b46e:	4628      	mov	r0, r5
    b470:	f7f5 f8ca 	bl	608 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    b474:	3c04      	subs	r4, #4
    b476:	e7ef      	b.n	b458 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    b478:	4622      	mov	r2, r4
    b47a:	a901      	add	r1, sp, #4
    b47c:	4628      	mov	r0, r5
    b47e:	f7f5 f8c3 	bl	608 <memcpy>
			break;
		}
	}

	return 0;
}
    b482:	2000      	movs	r0, #0
    b484:	b003      	add	sp, #12
    b486:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b488 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    b488:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    b48a:	2300      	movs	r3, #0
    b48c:	f00a fd3a 	bl	15f04 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    b490:	2000      	movs	r0, #0
    b492:	bd08      	pop	{r3, pc}

0000b494 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    b494:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    b496:	4802      	ldr	r0, [pc, #8]	; (b4a0 <_hci_driver_init+0xc>)
    b498:	f7f9 fb6e 	bl	4b78 <bt_hci_driver_register>

	return 0;
}
    b49c:	2000      	movs	r0, #0
    b49e:	bd08      	pop	{r3, pc}
    b4a0:	0001abb0 	.word	0x0001abb0

0000b4a4 <recv_thread>:
{
    b4a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    b4a6:	4d28      	ldr	r5, [pc, #160]	; (b548 <recv_thread+0xa4>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    b4a8:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    b4aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b4ae:	4628      	mov	r0, r5
    b4b0:	f00b feb5 	bl	1721e <k_queue_get>
		if (node_rx && !buf) {
    b4b4:	4604      	mov	r4, r0
    b4b6:	2800      	cmp	r0, #0
    b4b8:	d036      	beq.n	b528 <recv_thread+0x84>
	s8_t class = hci_get_class(node_rx);
    b4ba:	f001 fda7 	bl	d00c <hci_get_class>
	switch (class) {
    b4be:	1e03      	subs	r3, r0, #0
    b4c0:	9403      	str	r4, [sp, #12]
    b4c2:	db03      	blt.n	b4cc <recv_thread+0x28>
    b4c4:	2b02      	cmp	r3, #2
    b4c6:	dd10      	ble.n	b4ea <recv_thread+0x46>
    b4c8:	2b03      	cmp	r3, #3
    b4ca:	d030      	beq.n	b52e <recv_thread+0x8a>
		LL_ASSERT(0);
    b4cc:	4b1f      	ldr	r3, [pc, #124]	; (b54c <recv_thread+0xa8>)
    b4ce:	9301      	str	r3, [sp, #4]
    b4d0:	9300      	str	r3, [sp, #0]
    b4d2:	4a1f      	ldr	r2, [pc, #124]	; (b550 <recv_thread+0xac>)
    b4d4:	4b1f      	ldr	r3, [pc, #124]	; (b554 <recv_thread+0xb0>)
    b4d6:	4920      	ldr	r1, [pc, #128]	; (b558 <recv_thread+0xb4>)
    b4d8:	4820      	ldr	r0, [pc, #128]	; (b55c <recv_thread+0xb8>)
    b4da:	f7f6 f901 	bl	16e0 <printk>
    b4de:	4040      	eors	r0, r0
    b4e0:	f380 8811 	msr	BASEPRI, r0
    b4e4:	f04f 0004 	mov.w	r0, #4
    b4e8:	df02      	svc	2
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    b4ea:	2b01      	cmp	r3, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    b4ec:	bf0e      	itee	eq
    b4ee:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b4f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    b4f4:	2001      	movne	r0, #1
    b4f6:	f7f9 fc31 	bl	4d5c <bt_buf_get_rx>
    b4fa:	4604      	mov	r4, r0
		if (buf) {
    b4fc:	b118      	cbz	r0, b506 <recv_thread+0x62>
			hci_evt_encode(node_rx, buf);
    b4fe:	4601      	mov	r1, r0
    b500:	9803      	ldr	r0, [sp, #12]
    b502:	f001 fafb 	bl	cafc <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    b506:	9b03      	ldr	r3, [sp, #12]
    b508:	2100      	movs	r1, #0
    b50a:	88d8      	ldrh	r0, [r3, #6]
    b50c:	f009 f9be 	bl	1488c <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    b510:	a804      	add	r0, sp, #16
    b512:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    b516:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    b518:	f009 f942 	bl	147a0 <ll_rx_mem_release>
		if (buf) {
    b51c:	b124      	cbz	r4, b528 <recv_thread+0x84>
			if (buf->len) {
    b51e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    b520:	4620      	mov	r0, r4
			if (buf->len) {
    b522:	b173      	cbz	r3, b542 <recv_thread+0x9e>
				bt_recv(buf);
    b524:	f7f8 fd3e 	bl	3fa4 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    b528:	f00c f824 	bl	17574 <_impl_k_yield>
    b52c:	e7bd      	b.n	b4aa <recv_thread+0x6>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    b52e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b532:	f7f9 fc13 	bl	4d5c <bt_buf_get_rx>
    b536:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    b538:	4601      	mov	r1, r0
    b53a:	9803      	ldr	r0, [sp, #12]
    b53c:	f001 fa9e 	bl	ca7c <hci_acl_encode>
    b540:	e7e1      	b.n	b506 <recv_thread+0x62>
				net_buf_unref(buf);
    b542:	f00b fbeb 	bl	16d1c <net_buf_unref>
    b546:	e7ef      	b.n	b528 <recv_thread+0x84>
    b548:	20008b24 	.word	0x20008b24
    b54c:	0001868d 	.word	0x0001868d
    b550:	00019a84 	.word	0x00019a84
    b554:	0001ab84 	.word	0x0001ab84
    b558:	00019a8b 	.word	0x00019a8b
    b55c:	000197a5 	.word	0x000197a5

0000b560 <hci_driver_send>:
{
    b560:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    b562:	8983      	ldrh	r3, [r0, #12]
{
    b564:	b087      	sub	sp, #28
    b566:	4605      	mov	r5, r0
	if (!buf->len) {
    b568:	b96b      	cbnz	r3, b586 <hci_driver_send+0x26>
		BT_ERR("Empty HCI packet");
    b56a:	4b19      	ldr	r3, [pc, #100]	; (b5d0 <hci_driver_send+0x70>)
    b56c:	9301      	str	r3, [sp, #4]
    b56e:	9300      	str	r3, [sp, #0]
    b570:	4a18      	ldr	r2, [pc, #96]	; (b5d4 <hci_driver_send+0x74>)
    b572:	4b19      	ldr	r3, [pc, #100]	; (b5d8 <hci_driver_send+0x78>)
    b574:	4919      	ldr	r1, [pc, #100]	; (b5dc <hci_driver_send+0x7c>)
    b576:	481a      	ldr	r0, [pc, #104]	; (b5e0 <hci_driver_send+0x80>)
    b578:	f7f6 f8b2 	bl	16e0 <printk>
		return -EINVAL;
    b57c:	f06f 0415 	mvn.w	r4, #21
}
    b580:	4620      	mov	r0, r4
    b582:	b007      	add	sp, #28
    b584:	bd30      	pop	{r4, r5, pc}
	return (enum bt_buf_type)(*(u8_t *)net_buf_user_data(buf));
    b586:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    b588:	b183      	cbz	r3, b5ac <hci_driver_send+0x4c>
    b58a:	2b02      	cmp	r3, #2
    b58c:	d115      	bne.n	b5ba <hci_driver_send+0x5a>
	err = hci_acl_handle(buf, &evt);
    b58e:	a905      	add	r1, sp, #20
    b590:	f001 f9e4 	bl	c95c <hci_acl_handle>
    b594:	4604      	mov	r4, r0
	if (evt) {
    b596:	9805      	ldr	r0, [sp, #20]
    b598:	b108      	cbz	r0, b59e <hci_driver_send+0x3e>
		bt_recv_prio(evt);
    b59a:	f7f9 fa01 	bl	49a0 <bt_recv_prio>
	if (!err) {
    b59e:	2c00      	cmp	r4, #0
    b5a0:	d1ee      	bne.n	b580 <hci_driver_send+0x20>
		net_buf_unref(buf);
    b5a2:	4628      	mov	r0, r5
    b5a4:	f00b fbba 	bl	16d1c <net_buf_unref>
    b5a8:	2400      	movs	r4, #0
    b5aa:	e7e9      	b.n	b580 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    b5ac:	f000 fc56 	bl	be5c <hci_cmd_handle>
	if (evt) {
    b5b0:	2800      	cmp	r0, #0
    b5b2:	d0f6      	beq.n	b5a2 <hci_driver_send+0x42>
		bt_recv_prio(evt);
    b5b4:	f7f9 f9f4 	bl	49a0 <bt_recv_prio>
    b5b8:	e7f3      	b.n	b5a2 <hci_driver_send+0x42>
		BT_ERR("Unknown HCI type %u", type);
    b5ba:	4a05      	ldr	r2, [pc, #20]	; (b5d0 <hci_driver_send+0x70>)
    b5bc:	9202      	str	r2, [sp, #8]
    b5be:	e88d 000c 	stmia.w	sp, {r2, r3}
    b5c2:	4906      	ldr	r1, [pc, #24]	; (b5dc <hci_driver_send+0x7c>)
    b5c4:	4b04      	ldr	r3, [pc, #16]	; (b5d8 <hci_driver_send+0x78>)
    b5c6:	4a03      	ldr	r2, [pc, #12]	; (b5d4 <hci_driver_send+0x74>)
    b5c8:	4806      	ldr	r0, [pc, #24]	; (b5e4 <hci_driver_send+0x84>)
    b5ca:	f7f6 f889 	bl	16e0 <printk>
    b5ce:	e7d5      	b.n	b57c <hci_driver_send+0x1c>
    b5d0:	0001868d 	.word	0x0001868d
    b5d4:	00019a84 	.word	0x00019a84
    b5d8:	0001ab90 	.word	0x0001ab90
    b5dc:	00019a8b 	.word	0x00019a8b
    b5e0:	0001abed 	.word	0x0001abed
    b5e4:	0001ac0e 	.word	0x0001ac0e

0000b5e8 <prio_recv_thread>:
{
    b5e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    b5ea:	4d14      	ldr	r5, [pc, #80]	; (b63c <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    b5ec:	4e14      	ldr	r6, [pc, #80]	; (b640 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    b5ee:	f10d 0102 	add.w	r1, sp, #2
    b5f2:	a801      	add	r0, sp, #4
    b5f4:	f009 f89c 	bl	14730 <ll_rx_get>
    b5f8:	4604      	mov	r4, r0
    b5fa:	b940      	cbnz	r0, b60e <prio_recv_thread+0x26>
		if (node_rx) {
    b5fc:	9b01      	ldr	r3, [sp, #4]
    b5fe:	b1bb      	cbz	r3, b630 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    b600:	f009 fb98 	bl	14d34 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    b604:	9901      	ldr	r1, [sp, #4]
    b606:	4630      	mov	r0, r6
    b608:	f00b fde5 	bl	171d6 <k_queue_append>
    b60c:	e7ef      	b.n	b5ee <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b60e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b612:	2001      	movs	r0, #1
    b614:	f7f9 fba2 	bl	4d5c <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    b618:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    b61a:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    b61c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    b620:	f001 fce0 	bl	cfe4 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    b624:	4638      	mov	r0, r7
    b626:	f7f9 f9bb 	bl	49a0 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    b62a:	f00b ffa3 	bl	17574 <_impl_k_yield>
    b62e:	e7de      	b.n	b5ee <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    b630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b634:	4628      	mov	r0, r5
    b636:	f00c f879 	bl	1772c <_impl_k_sem_take>
    b63a:	e7d8      	b.n	b5ee <prio_recv_thread+0x6>
    b63c:	20008b0c 	.word	0x20008b0c
    b640:	20008b24 	.word	0x20008b24

0000b644 <hci_driver_open>:
{
    b644:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    b646:	481a      	ldr	r0, [pc, #104]	; (b6b0 <hci_driver_open+0x6c>)
{
    b648:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    b64a:	f009 fc51 	bl	14ef0 <ll_init>
	if (err) {
    b64e:	4604      	mov	r4, r0
    b650:	b160      	cbz	r0, b66c <hci_driver_open+0x28>
		BT_ERR("LL initialization failed: %u", err);
    b652:	4b18      	ldr	r3, [pc, #96]	; (b6b4 <hci_driver_open+0x70>)
    b654:	9302      	str	r3, [sp, #8]
    b656:	e88d 0018 	stmia.w	sp, {r3, r4}
    b65a:	4a17      	ldr	r2, [pc, #92]	; (b6b8 <hci_driver_open+0x74>)
    b65c:	4b17      	ldr	r3, [pc, #92]	; (b6bc <hci_driver_open+0x78>)
    b65e:	4918      	ldr	r1, [pc, #96]	; (b6c0 <hci_driver_open+0x7c>)
    b660:	4818      	ldr	r0, [pc, #96]	; (b6c4 <hci_driver_open+0x80>)
    b662:	f7f6 f83d 	bl	16e0 <printk>
}
    b666:	4620      	mov	r0, r4
    b668:	b006      	add	sp, #24
    b66a:	bd10      	pop	{r4, pc}
	hci_init(NULL);
    b66c:	f001 fce6 	bl	d03c <hci_init>

    b670:	f06f 0309 	mvn.w	r3, #9
    b674:	9303      	str	r3, [sp, #12]
    b676:	9405      	str	r4, [sp, #20]
    b678:	9404      	str	r4, [sp, #16]
    b67a:	9402      	str	r4, [sp, #8]
    b67c:	9401      	str	r4, [sp, #4]
    b67e:	9400      	str	r4, [sp, #0]
    b680:	4b11      	ldr	r3, [pc, #68]	; (b6c8 <hci_driver_open+0x84>)
    b682:	4912      	ldr	r1, [pc, #72]	; (b6cc <hci_driver_open+0x88>)
    b684:	4812      	ldr	r0, [pc, #72]	; (b6d0 <hci_driver_open+0x8c>)
    b686:	f44f 723b 	mov.w	r2, #748	; 0x2ec
    b68a:	f00c fa2b 	bl	17ae4 <_impl_k_thread_create>
    b68e:	f06f 0307 	mvn.w	r3, #7
    b692:	9303      	str	r3, [sp, #12]
    b694:	9405      	str	r4, [sp, #20]
    b696:	9404      	str	r4, [sp, #16]
    b698:	9402      	str	r4, [sp, #8]
    b69a:	9401      	str	r4, [sp, #4]
    b69c:	9400      	str	r4, [sp, #0]
    b69e:	4b0d      	ldr	r3, [pc, #52]	; (b6d4 <hci_driver_open+0x90>)
    b6a0:	490d      	ldr	r1, [pc, #52]	; (b6d8 <hci_driver_open+0x94>)
    b6a2:	480e      	ldr	r0, [pc, #56]	; (b6dc <hci_driver_open+0x98>)
    b6a4:	f240 522c 	movw	r2, #1324	; 0x52c
    b6a8:	f00c fa1c 	bl	17ae4 <_impl_k_thread_create>
    b6ac:	e7db      	b.n	b666 <hci_driver_open+0x22>
    b6ae:	bf00      	nop
    b6b0:	20008b0c 	.word	0x20008b0c
    b6b4:	0001868d 	.word	0x0001868d
    b6b8:	00019a84 	.word	0x00019a84
    b6bc:	0001aba0 	.word	0x0001aba0
    b6c0:	00019a8b 	.word	0x00019a8b
    b6c4:	0001abc0 	.word	0x0001abc0
    b6c8:	0000b5e9 	.word	0x0000b5e9
    b6cc:	20006c48 	.word	0x20006c48
    b6d0:	20004ce4 	.word	0x20004ce4
    b6d4:	0000b4a5 	.word	0x0000b4a5
    b6d8:	20006f38 	.word	0x20006f38
    b6dc:	20004c7c 	.word	0x20004c7c

0000b6e0 <sys_put_le32>:
	dst[1] = val >> 8;
    b6e0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    b6e4:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    b6e6:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    b6e8:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    b6ea:	0a00      	lsrs	r0, r0, #8
    b6ec:	704b      	strb	r3, [r1, #1]
    b6ee:	70c8      	strb	r0, [r1, #3]
    b6f0:	4770      	bx	lr

0000b6f2 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    b6f2:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    b6f4:	3008      	adds	r0, #8
{
    b6f6:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    b6f8:	2102      	movs	r1, #2
{
    b6fa:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    b6fc:	f00b fb40 	bl	16d80 <net_buf_simple_add>
	hdr->evt = evt;
    b700:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    b702:	7044      	strb	r4, [r0, #1]
    b704:	bd38      	pop	{r3, r4, r5, pc}
	...

0000b708 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    b708:	b538      	push	{r3, r4, r5, lr}
    b70a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    b70c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b710:	f7f9 fb34 	bl	4d7c <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    b714:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    b716:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    b718:	210f      	movs	r1, #15
    b71a:	f7ff ffea 	bl	b6f2 <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    b71e:	2104      	movs	r1, #4
    b720:	f104 0008 	add.w	r0, r4, #8
    b724:	f00b fb2c 	bl	16d80 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    b728:	2301      	movs	r3, #1
    b72a:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    b72c:	4b02      	ldr	r3, [pc, #8]	; (b738 <cmd_status+0x30>)
	cs->status = status;
    b72e:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    b730:	881b      	ldrh	r3, [r3, #0]
    b732:	8043      	strh	r3, [r0, #2]

	return buf;
}
    b734:	4620      	mov	r0, r4
    b736:	bd38      	pop	{r3, r4, r5, pc}
    b738:	20000afc 	.word	0x20000afc

0000b73c <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    b73c:	b570      	push	{r4, r5, r6, lr}
    b73e:	4604      	mov	r4, r0
    b740:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    b742:	3201      	adds	r2, #1
{
    b744:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    b746:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    b748:	b2d2      	uxtb	r2, r2
    b74a:	213e      	movs	r1, #62	; 0x3e
    b74c:	f7ff ffd1 	bl	b6f2 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    b750:	2101      	movs	r1, #1
    b752:	4620      	mov	r0, r4
    b754:	f00b fb14 	bl	16d80 <net_buf_simple_add>
	me->subevent = subevt;
    b758:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    b75a:	4629      	mov	r1, r5
    b75c:	4620      	mov	r0, r4
}
    b75e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    b762:	f00b bb0d 	b.w	16d80 <net_buf_simple_add>
	...

0000b768 <cmd_complete>:
{
    b768:	b538      	push	{r3, r4, r5, lr}
    b76a:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    b76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    b770:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    b772:	f7f9 fb03 	bl	4d7c <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    b776:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    b778:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    b77a:	b2d2      	uxtb	r2, r2
    b77c:	210e      	movs	r1, #14
    b77e:	f7ff ffb8 	bl	b6f2 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    b782:	6820      	ldr	r0, [r4, #0]
    b784:	2103      	movs	r1, #3
    b786:	3008      	adds	r0, #8
    b788:	f00b fafa 	bl	16d80 <net_buf_simple_add>
	cc->ncmd = 1;
    b78c:	2301      	movs	r3, #1
    b78e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    b790:	4b05      	ldr	r3, [pc, #20]	; (b7a8 <cmd_complete+0x40>)
    b792:	881b      	ldrh	r3, [r3, #0]
    b794:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    b798:	6820      	ldr	r0, [r4, #0]
    b79a:	4629      	mov	r1, r5
    b79c:	3008      	adds	r0, #8
}
    b79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    b7a2:	f00b baed 	b.w	16d80 <net_buf_simple_add>
    b7a6:	bf00      	nop
    b7a8:	20000afc 	.word	0x20000afc

0000b7ac <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7b0:	b087      	sub	sp, #28
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b7b2:	2301      	movs	r3, #1
    b7b4:	f88d 3011 	strb.w	r3, [sp, #17]
    b7b8:	2303      	movs	r3, #3
    b7ba:	f88d 3012 	strb.w	r3, [sp, #18]
    b7be:	23ff      	movs	r3, #255	; 0xff
    b7c0:	f88d 3013 	strb.w	r3, [sp, #19]
    b7c4:	f88d 3015 	strb.w	r3, [sp, #21]
    b7c8:	2302      	movs	r3, #2
    b7ca:	f88d 3016 	strb.w	r3, [sp, #22]
	u8_t direct;
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */
	s8_t *prssi;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    b7ce:	7843      	ldrb	r3, [r0, #1]
{
    b7d0:	4688      	mov	r8, r1
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    b7d2:	4443      	add	r3, r8
{
    b7d4:	4604      	mov	r4, r0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    b7d6:	7add      	ldrb	r5, [r3, #11]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
	/* Update current RPA */
	if (adv->tx_addr) {
    b7d8:	7803      	ldrb	r3, [r0, #0]
{
    b7da:	4693      	mov	fp, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b7dc:	2100      	movs	r1, #0
    b7de:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    b7e0:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    b7e2:	f88d 1010 	strb.w	r1, [sp, #16]
    b7e6:	f88d 2014 	strb.w	r2, [sp, #20]
	if (adv->tx_addr) {
    b7ea:	d504      	bpl.n	b7f6 <le_advertising_report+0x4a>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    b7ec:	1ca3      	adds	r3, r4, #2
    b7ee:	462a      	mov	r2, r5
    b7f0:	4608      	mov	r0, r1
    b7f2:	f00a fa25 	bl	15c40 <ll_rl_crpa_set>
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    b7f6:	4b7d      	ldr	r3, [pc, #500]	; (b9ec <le_advertising_report+0x240>)
    b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    b7fc:	2200      	movs	r2, #0
    b7fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    b802:	4313      	orrs	r3, r2
    b804:	f000 80ae 	beq.w	b964 <le_advertising_report+0x1b8>
		return;
	}

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    b808:	7863      	ldrb	r3, [r4, #1]
    b80a:	4443      	add	r3, r8
    b80c:	f893 a00c 	ldrb.w	sl, [r3, #12]
    b810:	4b77      	ldr	r3, [pc, #476]	; (b9f0 <le_advertising_report+0x244>)
		   offsetof(struct pdu_adv, payload) + adv->len + 2];

	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    b812:	e9d3 2300 	ldrd	r2, r3, [r3]
    b816:	f1ba 0f00 	cmp.w	sl, #0
    b81a:	d138      	bne.n	b88e <le_advertising_report+0xe2>
    b81c:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    b820:	2300      	movs	r3, #0
    b822:	4313      	orrs	r3, r2
    b824:	f000 809e 	beq.w	b964 <le_advertising_report+0x1b8>
	if (dup_count >= 0) {
    b828:	4f72      	ldr	r7, [pc, #456]	; (b9f4 <le_advertising_report+0x248>)
    b82a:	683b      	ldr	r3, [r7, #0]
    b82c:	2b00      	cmp	r3, #0
    b82e:	db50      	blt.n	b8d2 <le_advertising_report+0x126>
    b830:	f8df 91e0 	ldr.w	r9, [pc, #480]	; ba14 <le_advertising_report+0x268>
    b834:	2600      	movs	r6, #0
    b836:	1ca3      	adds	r3, r4, #2
		for (i = 0; i < dup_count; i++) {
    b838:	683a      	ldr	r2, [r7, #0]
    b83a:	4296      	cmp	r6, r2
    b83c:	db2a      	blt.n	b894 <le_advertising_report+0xe8>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    b83e:	4e6e      	ldr	r6, [pc, #440]	; (b9f8 <le_advertising_report+0x24c>)
    b840:	f8df 91b8 	ldr.w	r9, [pc, #440]	; b9fc <le_advertising_report+0x250>
    b844:	6830      	ldr	r0, [r6, #0]
    b846:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    b84a:	4619      	mov	r1, r3
    b84c:	2206      	movs	r2, #6
    b84e:	3002      	adds	r0, #2
    b850:	f7f4 feda 	bl	608 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    b854:	6832      	ldr	r2, [r6, #0]
    b856:	7823      	ldrb	r3, [r4, #0]
    b858:	eb09 01c2 	add.w	r1, r9, r2, lsl #3
    b85c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b860:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    b862:	7823      	ldrb	r3, [r4, #0]
    b864:	f003 010f 	and.w	r1, r3, #15
    b868:	2301      	movs	r3, #1
    b86a:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    b86c:	6839      	ldr	r1, [r7, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    b86e:	f809 3032 	strb.w	r3, [r9, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    b872:	290f      	cmp	r1, #15
			dup_count++;
    b874:	bfd5      	itete	le
    b876:	3101      	addle	r1, #1
			dup_curr++;
    b878:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    b87a:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    b87c:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    b87e:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    b880:	bfd8      	it	le
    b882:	6039      	strle	r1, [r7, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    b884:	2a10      	cmp	r2, #16
    b886:	d124      	bne.n	b8d2 <le_advertising_report+0x126>
			dup_curr = 0;
    b888:	2200      	movs	r2, #0
    b88a:	6032      	str	r2, [r6, #0]
    b88c:	e021      	b.n	b8d2 <le_advertising_report+0x126>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    b88e:	f002 020b 	and.w	r2, r2, #11
    b892:	e7c5      	b.n	b820 <le_advertising_report+0x74>
			if (!memcmp(&adv->adv_ind.addr[0],
    b894:	4618      	mov	r0, r3
    b896:	2206      	movs	r2, #6
    b898:	4649      	mov	r1, r9
    b89a:	9303      	str	r3, [sp, #12]
    b89c:	f7f4 fe9f 	bl	5de <memcmp>
    b8a0:	9b03      	ldr	r3, [sp, #12]
    b8a2:	b9f0      	cbnz	r0, b8e2 <le_advertising_report+0x136>
			    adv->tx_addr == dup_filter[i].addr.type) {
    b8a4:	7821      	ldrb	r1, [r4, #0]
    b8a6:	f819 0c01 	ldrb.w	r0, [r9, #-1]
    b8aa:	460a      	mov	r2, r1
    b8ac:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    b8b0:	4281      	cmp	r1, r0
    b8b2:	d116      	bne.n	b8e2 <le_advertising_report+0x136>
				if (dup_filter[i].mask & BIT(adv->type)) {
    b8b4:	4851      	ldr	r0, [pc, #324]	; (b9fc <le_advertising_report+0x250>)
    b8b6:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    b8ba:	f002 020f 	and.w	r2, r2, #15
    b8be:	fa23 f102 	lsr.w	r1, r3, r2
    b8c2:	07c9      	lsls	r1, r1, #31
    b8c4:	d44e      	bmi.n	b964 <le_advertising_report+0x1b8>
				dup_filter[i].mask |= BIT(adv->type);
    b8c6:	2101      	movs	r1, #1
    b8c8:	fa01 f202 	lsl.w	r2, r1, r2
    b8cc:	4313      	orrs	r3, r2
    b8ce:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    b8d2:	7823      	ldrb	r3, [r4, #0]
    b8d4:	7862      	ldrb	r2, [r4, #1]
    b8d6:	f003 030f 	and.w	r3, r3, #15
    b8da:	2b01      	cmp	r3, #1
    b8dc:	d105      	bne.n	b8ea <le_advertising_report+0x13e>
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    b8de:	2600      	movs	r6, #0
    b8e0:	e005      	b.n	b8ee <le_advertising_report+0x142>
		for (i = 0; i < dup_count; i++) {
    b8e2:	3601      	adds	r6, #1
    b8e4:	f109 0908 	add.w	r9, r9, #8
    b8e8:	e7a6      	b.n	b838 <le_advertising_report+0x8c>
		data_len = (adv->len - BDADDR_SIZE);
    b8ea:	1f96      	subs	r6, r2, #6
    b8ec:	b2f6      	uxtb	r6, r6
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    b8ee:	4442      	add	r2, r8
    b8f0:	f104 0908 	add.w	r9, r4, #8
    b8f4:	7a97      	ldrb	r7, [r2, #10]
    b8f6:	427f      	negs	r7, r7
    b8f8:	b27f      	sxtb	r7, r7
		  offsetof(struct pdu_adv, payload) + adv->len];

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	if (direct) {
    b8fa:	f1ba 0f00 	cmp.w	sl, #0
    b8fe:	d03e      	beq.n	b97e <le_advertising_report+0x1d2>
		struct bt_hci_evt_le_direct_adv_report *drp;
		struct bt_hci_evt_le_direct_adv_info *dir_info;

		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    b900:	2b01      	cmp	r3, #1
    b902:	d00e      	beq.n	b922 <le_advertising_report+0x176>
    b904:	4b3e      	ldr	r3, [pc, #248]	; (ba00 <le_advertising_report+0x254>)
    b906:	9301      	str	r3, [sp, #4]
    b908:	9300      	str	r3, [sp, #0]
    b90a:	4a3e      	ldr	r2, [pc, #248]	; (ba04 <le_advertising_report+0x258>)
    b90c:	4b3e      	ldr	r3, [pc, #248]	; (ba08 <le_advertising_report+0x25c>)
    b90e:	493f      	ldr	r1, [pc, #252]	; (ba0c <le_advertising_report+0x260>)
    b910:	483f      	ldr	r0, [pc, #252]	; (ba10 <le_advertising_report+0x264>)
    b912:	f7f5 fee5 	bl	16e0 <printk>
    b916:	4040      	eors	r0, r0
    b918:	f380 8811 	msr	BASEPRI, r0
    b91c:	f04f 0004 	mov.w	r0, #4
    b920:	df02      	svc	2
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    b922:	2211      	movs	r2, #17
    b924:	210b      	movs	r1, #11
    b926:	4658      	mov	r0, fp
    b928:	9303      	str	r3, [sp, #12]
    b92a:	f7ff ff07 	bl	b73c <meta_evt>
			       sizeof(*drp) + sizeof(*dir_info));

		drp->num_reports = 1;
    b92e:	9b03      	ldr	r3, [sp, #12]
    b930:	7003      	strb	r3, [r0, #0]
		dir_info = (void *)(((u8_t *)drp) + sizeof(*drp));

		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    b932:	7043      	strb	r3, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    b934:	4606      	mov	r6, r0

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (rl_idx < ll_rl_size_get()) {
    b936:	f00a f859 	bl	159ec <ll_rl_size_get>
    b93a:	4285      	cmp	r5, r0
    b93c:	f106 0003 	add.w	r0, r6, #3
    b940:	d213      	bcs.n	b96a <le_advertising_report+0x1be>
			/* Store identity address */
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    b942:	4602      	mov	r2, r0
    b944:	1cb1      	adds	r1, r6, #2
    b946:	4628      	mov	r0, r5
    b948:	f009 feee 	bl	15728 <ll_rl_id_addr_get>
					  &dir_info->addr.a.val[0]);
			/* Mark it as identity address from RPA (0x02, 0x03) */
			dir_info->addr.type += 2;
    b94c:	78b3      	ldrb	r3, [r6, #2]
    b94e:	3302      	adds	r3, #2
    b950:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
			       &adv->direct_ind.adv_addr[0],
			       sizeof(bt_addr_t));
		}

		dir_info->dir_addr.type = 0x1;
    b952:	2301      	movs	r3, #1
    b954:	7273      	strb	r3, [r6, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    b956:	2206      	movs	r2, #6
    b958:	4649      	mov	r1, r9
    b95a:	f106 000a 	add.w	r0, r6, #10
    b95e:	f7f4 fe53 	bl	608 <memcpy>
		       &adv->direct_ind.tgt_addr[0], sizeof(bt_addr_t));

		dir_info->rssi = rssi;
    b962:	7437      	strb	r7, [r6, #16]
	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
}
    b964:	b007      	add	sp, #28
    b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    b96a:	4621      	mov	r1, r4
			memcpy(&dir_info->addr.a.val[0],
    b96c:	2206      	movs	r2, #6
			dir_info->addr.type = adv->tx_addr;
    b96e:	f811 3b02 	ldrb.w	r3, [r1], #2
    b972:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b976:	70b3      	strb	r3, [r6, #2]
			memcpy(&dir_info->addr.a.val[0],
    b978:	f7f4 fe46 	bl	608 <memcpy>
    b97c:	e7e9      	b.n	b952 <le_advertising_report+0x1a6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    b97e:	f106 020b 	add.w	r2, r6, #11
    b982:	b2d2      	uxtb	r2, r2
    b984:	2102      	movs	r1, #2
    b986:	4658      	mov	r0, fp
    b988:	f7ff fed8 	bl	b73c <meta_evt>
	sep->num_reports = 1;
    b98c:	2301      	movs	r3, #1
    b98e:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    b990:	7823      	ldrb	r3, [r4, #0]
    b992:	aa06      	add	r2, sp, #24
    b994:	f003 030f 	and.w	r3, r3, #15
    b998:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    b99a:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    b99c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    b9a0:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    b9a2:	7863      	ldrb	r3, [r4, #1]
    b9a4:	4498      	add	r8, r3
    b9a6:	f898 800b 	ldrb.w	r8, [r8, #11]
	if (rl_idx < ll_rl_size_get()) {
    b9aa:	f00a f81f 	bl	159ec <ll_rl_size_get>
    b9ae:	4580      	cmp	r8, r0
    b9b0:	f105 0003 	add.w	r0, r5, #3
    b9b4:	d210      	bcs.n	b9d8 <le_advertising_report+0x22c>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    b9b6:	4602      	mov	r2, r0
    b9b8:	1ca9      	adds	r1, r5, #2
    b9ba:	4640      	mov	r0, r8
    b9bc:	f009 feb4 	bl	15728 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    b9c0:	78ab      	ldrb	r3, [r5, #2]
    b9c2:	3302      	adds	r3, #2
    b9c4:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    b9c6:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    b9c8:	350a      	adds	r5, #10
    b9ca:	4632      	mov	r2, r6
    b9cc:	4649      	mov	r1, r9
    b9ce:	4628      	mov	r0, r5
    b9d0:	f7f4 fe1a 	bl	608 <memcpy>
	*prssi = rssi;
    b9d4:	55af      	strb	r7, [r5, r6]
    b9d6:	e7c5      	b.n	b964 <le_advertising_report+0x1b8>
		adv_info->addr.type = adv->tx_addr;
    b9d8:	4621      	mov	r1, r4
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    b9da:	2206      	movs	r2, #6
		adv_info->addr.type = adv->tx_addr;
    b9dc:	f811 3b02 	ldrb.w	r3, [r1], #2
    b9e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    b9e4:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    b9e6:	f7f4 fe0f 	bl	608 <memcpy>
    b9ea:	e7ec      	b.n	b9c6 <le_advertising_report+0x21a>
    b9ec:	200088f8 	.word	0x200088f8
    b9f0:	20008900 	.word	0x20008900
    b9f4:	20000b04 	.word	0x20000b04
    b9f8:	20000b08 	.word	0x20000b08
    b9fc:	20000b0c 	.word	0x20000b0c
    ba00:	0001868d 	.word	0x0001868d
    ba04:	00019a84 	.word	0x00019a84
    ba08:	0001ac66 	.word	0x0001ac66
    ba0c:	00019a8b 	.word	0x00019a8b
    ba10:	0001af77 	.word	0x0001af77
    ba14:	20000b0e 	.word	0x20000b0e

0000ba18 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ba18:	4b0e      	ldr	r3, [pc, #56]	; (ba54 <encrypt_change+0x3c>)
{
    ba1a:	b570      	push	{r4, r5, r6, lr}
    ba1c:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ba1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba22:	2300      	movs	r3, #0
    ba24:	f002 0280 	and.w	r2, r2, #128	; 0x80
    ba28:	4313      	orrs	r3, r2
{
    ba2a:	4604      	mov	r4, r0
    ba2c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ba2e:	d010      	beq.n	ba52 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    ba30:	2204      	movs	r2, #4
    ba32:	2108      	movs	r1, #8
    ba34:	4628      	mov	r0, r5
    ba36:	f7ff fe5c 	bl	b6f2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ba3a:	2104      	movs	r1, #4
    ba3c:	f105 0008 	add.w	r0, r5, #8
    ba40:	f00b f99e 	bl	16d80 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    ba44:	fab4 f384 	clz	r3, r4
    ba48:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    ba4a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ba4c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ba50:	70c3      	strb	r3, [r0, #3]
    ba52:	bd70      	pop	{r4, r5, r6, pc}
    ba54:	200088f8 	.word	0x200088f8

0000ba58 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    ba58:	b570      	push	{r4, r5, r6, lr}
    ba5a:	4604      	mov	r4, r0
    ba5c:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ba5e:	4b13      	ldr	r3, [pc, #76]	; (baac <le_remote_feat_complete+0x54>)
{
    ba60:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba66:	2200      	movs	r2, #0
    ba68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ba6c:	4313      	orrs	r3, r2
{
    ba6e:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ba70:	d01b      	beq.n	baaa <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    ba72:	4b0f      	ldr	r3, [pc, #60]	; (bab0 <le_remote_feat_complete+0x58>)
    ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
    ba78:	2300      	movs	r3, #0
    ba7a:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ba7e:	4313      	orrs	r3, r2
    ba80:	d013      	beq.n	baaa <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    ba82:	220b      	movs	r2, #11
    ba84:	2104      	movs	r1, #4
    ba86:	f7ff fe59 	bl	b73c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    ba8a:	2208      	movs	r2, #8
	sep->status = status;
    ba8c:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    ba8e:	f8a0 6001 	strh.w	r6, [r0, #1]
    ba92:	3003      	adds	r0, #3
	if (!status) {
    ba94:	b924      	cbnz	r4, baa0 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    ba96:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    ba98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    ba9c:	f7f4 bdb4 	b.w	608 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    baa0:	2100      	movs	r1, #0
}
    baa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    baa6:	f7f4 bddb 	b.w	660 <memset>
    baaa:	bd70      	pop	{r4, r5, r6, pc}
    baac:	200088f8 	.word	0x200088f8
    bab0:	20008900 	.word	0x20008900

0000bab4 <le_conn_complete.part.39>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    bab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bab8:	4605      	mov	r5, r0
    baba:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    babc:	4b46      	ldr	r3, [pc, #280]	; (bbd8 <le_conn_complete.part.39+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    babe:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
    bac4:	f240 2801 	movw	r8, #513	; 0x201
    bac8:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    bacc:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    bad0:	ea03 0309 	and.w	r3, r3, r9
    bad4:	ea02 0208 	and.w	r2, r2, r8
    bad8:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    bada:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    badc:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    bae0:	d077      	beq.n	bbd2 <le_conn_complete.part.39+0x11e>
	if (!status) {
    bae2:	2d00      	cmp	r5, #0
    bae4:	d150      	bne.n	bb88 <le_conn_complete.part.39+0xd4>
		conn_count++;
    bae6:	4a3d      	ldr	r2, [pc, #244]	; (bbdc <le_conn_complete.part.39+0x128>)
    bae8:	6813      	ldr	r3, [r2, #0]
    baea:	3301      	adds	r3, #1
    baec:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    baee:	ea5a 030b 	orrs.w	r3, sl, fp
    baf2:	f101 0803 	add.w	r8, r1, #3
    baf6:	d151      	bne.n	bb9c <le_conn_complete.part.39+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    baf8:	2212      	movs	r2, #18
    bafa:	2101      	movs	r1, #1
    bafc:	f7ff fe1e 	bl	b73c <meta_evt>
	lecc->status = 0x00;
    bb00:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    bb02:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    bb06:	7863      	ldrb	r3, [r4, #1]
    bb08:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    bb0a:	78a3      	ldrb	r3, [r4, #2]
    bb0c:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    bb0e:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    bb10:	2206      	movs	r2, #6
    bb12:	4641      	mov	r1, r8
    bb14:	3005      	adds	r0, #5
    bb16:	f7f4 fd77 	bl	608 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    bb1a:	8ae3      	ldrh	r3, [r4, #22]
    bb1c:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    bb20:	8b23      	ldrh	r3, [r4, #24]
    bb22:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    bb26:	8b63      	ldrh	r3, [r4, #26]
    bb28:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    bb2c:	7f23      	ldrb	r3, [r4, #28]
    bb2e:	747b      	strb	r3, [r7, #17]
    bb30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    bb34:	221e      	movs	r2, #30
    bb36:	210a      	movs	r1, #10
    bb38:	f7ff fe00 	bl	b73c <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    bb3c:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    bb3e:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    bb40:	2100      	movs	r1, #0
    bb42:	f7f4 fd8d 	bl	660 <memset>
		lecc->status = status;
    bb46:	7025      	strb	r5, [r4, #0]
    bb48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    bb4c:	7d63      	ldrb	r3, [r4, #21]
    bb4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    bb52:	2b40      	cmp	r3, #64	; 0x40
    bb54:	d138      	bne.n	bbc8 <le_conn_complete.part.39+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    bb56:	2206      	movs	r2, #6
    bb58:	f104 0110 	add.w	r1, r4, #16
    bb5c:	f7f4 fd54 	bl	608 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    bb60:	2206      	movs	r2, #6
    bb62:	f104 0109 	add.w	r1, r4, #9
    bb66:	f107 0011 	add.w	r0, r7, #17
    bb6a:	f7f4 fd4d 	bl	608 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    bb6e:	8ae3      	ldrh	r3, [r4, #22]
    bb70:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    bb74:	8b23      	ldrh	r3, [r4, #24]
    bb76:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    bb7a:	8b63      	ldrh	r3, [r4, #26]
    bb7c:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    bb80:	7f23      	ldrb	r3, [r4, #28]
    bb82:	777b      	strb	r3, [r7, #29]
    bb84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    bb88:	ea5a 030b 	orrs.w	r3, sl, fp
    bb8c:	d1d2      	bne.n	bb34 <le_conn_complete.part.39+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    bb8e:	2212      	movs	r2, #18
    bb90:	2101      	movs	r1, #1
    bb92:	f7ff fdd3 	bl	b73c <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    bb96:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    bb98:	4604      	mov	r4, r0
    bb9a:	e7d1      	b.n	bb40 <le_conn_complete.part.39+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    bb9c:	221e      	movs	r2, #30
    bb9e:	210a      	movs	r1, #10
    bba0:	f7ff fdcc 	bl	b73c <meta_evt>
		leecc->status = 0x00;
    bba4:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    bba6:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    bbaa:	7863      	ldrb	r3, [r4, #1]
    bbac:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    bbae:	78a3      	ldrb	r3, [r4, #2]
    bbb0:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    bbb2:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    bbb4:	2206      	movs	r2, #6
    bbb6:	4641      	mov	r1, r8
    bbb8:	3005      	adds	r0, #5
    bbba:	f7f4 fd25 	bl	608 <memcpy>
		if ((radio_cc->own_addr_type) &&
    bbbe:	7be3      	ldrb	r3, [r4, #15]
    bbc0:	f107 000b 	add.w	r0, r7, #11
    bbc4:	2b00      	cmp	r3, #0
    bbc6:	d1c1      	bne.n	bb4c <le_conn_complete.part.39+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    bbc8:	2206      	movs	r2, #6
    bbca:	2100      	movs	r1, #0
    bbcc:	f7f4 fd48 	bl	660 <memset>
    bbd0:	e7c6      	b.n	bb60 <le_conn_complete.part.39+0xac>
    bbd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbd6:	bf00      	nop
    bbd8:	20008900 	.word	0x20008900
    bbdc:	20000b00 	.word	0x20000b00

0000bbe0 <bt_addr_le_to_str.constprop.66>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    bbe0:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    bbe2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    bbe4:	b08a      	sub	sp, #40	; 0x28
    bbe6:	4604      	mov	r4, r0
    bbe8:	460e      	mov	r6, r1
    bbea:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    bbec:	2b03      	cmp	r3, #3
    bbee:	d820      	bhi.n	bc32 <bt_addr_le_to_str.constprop.66+0x52>
    bbf0:	e8df f003 	tbb	[pc, r3]
    bbf4:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    bbf8:	4911      	ldr	r1, [pc, #68]	; (bc40 <bt_addr_le_to_str.constprop.66+0x60>)
		strcpy(type, "random");
    bbfa:	4628      	mov	r0, r5
    bbfc:	f7f4 fcd0 	bl	5a0 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    bc00:	7862      	ldrb	r2, [r4, #1]
    bc02:	9204      	str	r2, [sp, #16]
    bc04:	78a2      	ldrb	r2, [r4, #2]
    bc06:	9203      	str	r2, [sp, #12]
    bc08:	78e2      	ldrb	r2, [r4, #3]
    bc0a:	9202      	str	r2, [sp, #8]
    bc0c:	7922      	ldrb	r2, [r4, #4]
    bc0e:	9201      	str	r2, [sp, #4]
    bc10:	7962      	ldrb	r2, [r4, #5]
    bc12:	9200      	str	r2, [sp, #0]
    bc14:	79a3      	ldrb	r3, [r4, #6]
    bc16:	9505      	str	r5, [sp, #20]
    bc18:	4a0a      	ldr	r2, [pc, #40]	; (bc44 <bt_addr_le_to_str.constprop.66+0x64>)
    bc1a:	211b      	movs	r1, #27
    bc1c:	4630      	mov	r0, r6
    bc1e:	f7f5 fd6d 	bl	16fc <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    bc22:	b00a      	add	sp, #40	; 0x28
    bc24:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    bc26:	4908      	ldr	r1, [pc, #32]	; (bc48 <bt_addr_le_to_str.constprop.66+0x68>)
    bc28:	e7e7      	b.n	bbfa <bt_addr_le_to_str.constprop.66+0x1a>
		strcpy(type, "public id");
    bc2a:	4908      	ldr	r1, [pc, #32]	; (bc4c <bt_addr_le_to_str.constprop.66+0x6c>)
    bc2c:	e7e5      	b.n	bbfa <bt_addr_le_to_str.constprop.66+0x1a>
		strcpy(type, "random id");
    bc2e:	4908      	ldr	r1, [pc, #32]	; (bc50 <bt_addr_le_to_str.constprop.66+0x70>)
    bc30:	e7e3      	b.n	bbfa <bt_addr_le_to_str.constprop.66+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    bc32:	4a08      	ldr	r2, [pc, #32]	; (bc54 <bt_addr_le_to_str.constprop.66+0x74>)
    bc34:	210a      	movs	r1, #10
    bc36:	4628      	mov	r0, r5
    bc38:	f7f5 fd60 	bl	16fc <snprintk>
    bc3c:	e7e0      	b.n	bc00 <bt_addr_le_to_str.constprop.66+0x20>
    bc3e:	bf00      	nop
    bc40:	000183e7 	.word	0x000183e7
    bc44:	00018410 	.word	0x00018410
    bc48:	000183ee 	.word	0x000183ee
    bc4c:	000183f5 	.word	0x000183f5
    bc50:	000183ff 	.word	0x000183ff
    bc54:	00018409 	.word	0x00018409

0000bc58 <le_adv_ext_report>:
{
    bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc5c:	460c      	mov	r4, r1
		  offsetof(struct pdu_adv, payload) + adv->len];
    bc5e:	7841      	ldrb	r1, [r0, #1]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    bc60:	4f73      	ldr	r7, [pc, #460]	; (be30 <le_adv_ext_report+0x1d8>)
{
    bc62:	4693      	mov	fp, r2
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bc64:	1862      	adds	r2, r4, r1
{
    bc66:	b095      	sub	sp, #84	; 0x54
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bc68:	f892 800a 	ldrb.w	r8, [r2, #10]
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    bc6c:	9707      	str	r7, [sp, #28]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bc6e:	f1c8 0800 	rsb	r8, r8, #0
    bc72:	fa4f f888 	sxtb.w	r8, r8
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    bc76:	f8cd 8018 	str.w	r8, [sp, #24]
    bc7a:	7802      	ldrb	r2, [r0, #0]
    bc7c:	9103      	str	r1, [sp, #12]
{
    bc7e:	4605      	mov	r5, r0
	BT_WARN("phy= 0x%x, type= 0x%x, len= %u, tat= %u, rat= %u, rssi=%d dB",
    bc80:	09d0      	lsrs	r0, r2, #7
    bc82:	9005      	str	r0, [sp, #20]
    bc84:	f3c2 1080 	ubfx	r0, r2, #6, #1
    bc88:	f002 020f 	and.w	r2, r2, #15
    bc8c:	9004      	str	r0, [sp, #16]
    bc8e:	9202      	str	r2, [sp, #8]
    bc90:	9301      	str	r3, [sp, #4]
    bc92:	9700      	str	r7, [sp, #0]
    bc94:	4b67      	ldr	r3, [pc, #412]	; (be34 <le_adv_ext_report+0x1dc>)
    bc96:	4a68      	ldr	r2, [pc, #416]	; (be38 <le_adv_ext_report+0x1e0>)
    bc98:	4968      	ldr	r1, [pc, #416]	; (be3c <le_adv_ext_report+0x1e4>)
    bc9a:	4869      	ldr	r0, [pc, #420]	; (be40 <le_adv_ext_report+0x1e8>)
    bc9c:	f7f5 fd20 	bl	16e0 <printk>
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    bca0:	782b      	ldrb	r3, [r5, #0]
    bca2:	f003 030f 	and.w	r3, r3, #15
    bca6:	2b07      	cmp	r3, #7
    bca8:	f040 80b1 	bne.w	be0e <le_adv_ext_report+0x1b6>
    bcac:	786b      	ldrb	r3, [r5, #1]
    bcae:	2b00      	cmp	r3, #0
    bcb0:	f000 80ad 	beq.w	be0e <le_adv_ext_report+0x1b6>
		BT_WARN("Ext. adv mode= 0x%x, hdr len= %u", p->adv_mode,
    bcb4:	9703      	str	r7, [sp, #12]
    bcb6:	78ab      	ldrb	r3, [r5, #2]
    bcb8:	4960      	ldr	r1, [pc, #384]	; (be3c <le_adv_ext_report+0x1e4>)
    bcba:	9700      	str	r7, [sp, #0]
    bcbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    bcc0:	099b      	lsrs	r3, r3, #6
    bcc2:	9202      	str	r2, [sp, #8]
    bcc4:	9301      	str	r3, [sp, #4]
    bcc6:	4a5c      	ldr	r2, [pc, #368]	; (be38 <le_adv_ext_report+0x1e0>)
    bcc8:	4b5a      	ldr	r3, [pc, #360]	; (be34 <le_adv_ext_report+0x1dc>)
    bcca:	485e      	ldr	r0, [pc, #376]	; (be44 <le_adv_ext_report+0x1ec>)
    bccc:	f7f5 fd08 	bl	16e0 <printk>
		if (!p->ext_hdr_len) {
    bcd0:	78ab      	ldrb	r3, [r5, #2]
    bcd2:	069b      	lsls	r3, r3, #26
    bcd4:	f000 808d 	beq.w	bdf2 <le_adv_ext_report+0x19a>
		if (h->adv_addr) {
    bcd8:	78eb      	ldrb	r3, [r5, #3]
    bcda:	07de      	lsls	r6, r3, #31
		ptr = (u8_t *)h + sizeof(*h);
    bcdc:	f105 0404 	add.w	r4, r5, #4
		if (h->adv_addr) {
    bce0:	d51c      	bpl.n	bd1c <le_adv_ext_report+0xc4>
			addr.type = adv->tx_addr;
    bce2:	782b      	ldrb	r3, [r5, #0]
    bce4:	ae14      	add	r6, sp, #80	; 0x50
    bce6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bcea:	f806 3d24 	strb.w	r3, [r6, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    bcee:	2206      	movs	r2, #6
    bcf0:	4621      	mov	r1, r4
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    bcf2:	f10d 0934 	add.w	r9, sp, #52	; 0x34
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    bcf6:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
    bcfa:	f7f4 fc85 	bl	608 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    bcfe:	4649      	mov	r1, r9
    bd00:	4630      	mov	r0, r6
    bd02:	f7ff ff6d 	bl	bbe0 <bt_addr_le_to_str.constprop.66>
			BT_WARN("AdvA: %s", addr_str);
    bd06:	9702      	str	r7, [sp, #8]
    bd08:	e88d 0280 	stmia.w	sp, {r7, r9}
    bd0c:	4b49      	ldr	r3, [pc, #292]	; (be34 <le_adv_ext_report+0x1dc>)
    bd0e:	4a4a      	ldr	r2, [pc, #296]	; (be38 <le_adv_ext_report+0x1e0>)
    bd10:	494a      	ldr	r1, [pc, #296]	; (be3c <le_adv_ext_report+0x1e4>)
    bd12:	484d      	ldr	r0, [pc, #308]	; (be48 <le_adv_ext_report+0x1f0>)
			ptr += BDADDR_SIZE;
    bd14:	f105 040a 	add.w	r4, r5, #10
			BT_WARN("AdvA: %s", addr_str);
    bd18:	f7f5 fce2 	bl	16e0 <printk>
		if(h->tgt_addr){
    bd1c:	78eb      	ldrb	r3, [r5, #3]
    bd1e:	0798      	lsls	r0, r3, #30
			ptr += BDADDR_SIZE;
    bd20:	bf48      	it	mi
    bd22:	3406      	addmi	r4, #6
		if(h->adi){
    bd24:	f013 0908 	ands.w	r9, r3, #8
    bd28:	d06a      	beq.n	be00 <le_adv_ext_report+0x1a8>
			sid_for_info = adi_ptr->sid;
    bd2a:	7866      	ldrb	r6, [r4, #1]
    bd2c:	0932      	lsrs	r2, r6, #4
			if(adi_ptr->sid == 0x04){
    bd2e:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    bd32:	2e40      	cmp	r6, #64	; 0x40
			sid_for_info = adi_ptr->sid;
    bd34:	9209      	str	r2, [sp, #36]	; 0x24
			if(adi_ptr->sid == 0x04){
    bd36:	d05f      	beq.n	bdf8 <le_adv_ext_report+0x1a0>
			}else if(adi_ptr->sid == 0x02){
    bd38:	f1a6 0120 	sub.w	r1, r6, #32
    bd3c:	424e      	negs	r6, r1
    bd3e:	414e      	adcs	r6, r1
	bool aux_adi_present = false;
    bd40:	f04f 0900 	mov.w	r9, #0
			ptr += sizeof(*adi_ptr);
    bd44:	9408      	str	r4, [sp, #32]
    bd46:	3402      	adds	r4, #2
		if(h->aux_ptr){
    bd48:	f013 0a10 	ands.w	sl, r3, #16
			ptr += sizeof(*ap);
    bd4c:	bf1c      	itt	ne
    bd4e:	3403      	addne	r4, #3
			aux_ptr_present = true;
    bd50:	f04f 0a01 	movne.w	sl, #1
		if (h->tx_pwr) {
    bd54:	065a      	lsls	r2, r3, #25
    bd56:	d50a      	bpl.n	bd6e <le_adv_ext_report+0x116>
			tx_pwr = *(s8_t *)ptr;
    bd58:	f914 3b01 	ldrsb.w	r3, [r4], #1
			BT_WARN("Tx pwr= %d dB", tx_pwr);
    bd5c:	9301      	str	r3, [sp, #4]
    bd5e:	9702      	str	r7, [sp, #8]
    bd60:	9700      	str	r7, [sp, #0]
    bd62:	4b34      	ldr	r3, [pc, #208]	; (be34 <le_adv_ext_report+0x1dc>)
    bd64:	4a34      	ldr	r2, [pc, #208]	; (be38 <le_adv_ext_report+0x1e0>)
    bd66:	4935      	ldr	r1, [pc, #212]	; (be3c <le_adv_ext_report+0x1e4>)
    bd68:	4838      	ldr	r0, [pc, #224]	; (be4c <le_adv_ext_report+0x1f4>)
    bd6a:	f7f5 fcb9 	bl	16e0 <printk>
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    bd6e:	78aa      	ldrb	r2, [r5, #2]
    bd70:	f3c2 0305 	ubfx	r3, r2, #0, #6
    bd74:	786a      	ldrb	r2, [r5, #1]
    bd76:	1ad2      	subs	r2, r2, r3
    bd78:	b2d2      	uxtb	r2, r2
    bd7a:	1e57      	subs	r7, r2, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    bd7c:	3218      	adds	r2, #24
    bd7e:	4658      	mov	r0, fp
    bd80:	b2d2      	uxtb	r2, r2
    bd82:	210d      	movs	r1, #13
    bd84:	f7ff fcda 	bl	b73c <meta_evt>
		sep->num_reports = 1;
    bd88:	2301      	movs	r3, #1
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    bd8a:	b2ff      	uxtb	r7, r7
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    bd8c:	4683      	mov	fp, r0
		sep->num_reports = 1;
    bd8e:	7003      	strb	r3, [r0, #0]
		if( aux_adi_present && aux_ptr_present){ //aux packet
    bd90:	f1b9 0f00 	cmp.w	r9, #0
    bd94:	d045      	beq.n	be22 <le_adv_ext_report+0x1ca>
    bd96:	f1ba 0f00 	cmp.w	sl, #0
    bd9a:	d03e      	beq.n	be1a <le_adv_ext_report+0x1c2>
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    bd9c:	f88b 3002 	strb.w	r3, [fp, #2]
		if(h->adv_addr){
    bda0:	78eb      	ldrb	r3, [r5, #3]
    bda2:	07db      	lsls	r3, r3, #31
    bda4:	d50a      	bpl.n	bdbc <le_adv_ext_report+0x164>
			adv_info->addr.type = addr.type;
    bda6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    bdaa:	f88b 3003 	strb.w	r3, [fp, #3]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    bdae:	2206      	movs	r2, #6
    bdb0:	f10d 012d 	add.w	r1, sp, #45	; 0x2d
    bdb4:	f10b 0004 	add.w	r0, fp, #4
    bdb8:	f7f4 fc26 	bl	608 <memcpy>
		adv_info->evt_type = 0x07;
    bdbc:	2307      	movs	r3, #7
    bdbe:	f88b 3001 	strb.w	r3, [fp, #1]
		adv_info->sid = sid_for_info;
    bdc2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    bdc6:	f88b 300c 	strb.w	r3, [fp, #12]
		if(adi_ptr->sid == 0x04){
    bdca:	9b08      	ldr	r3, [sp, #32]
    bdcc:	785b      	ldrb	r3, [r3, #1]
			adv_info->length = data_len;
    bdce:	f88b 7018 	strb.w	r7, [fp, #24]
		if(adi_ptr->sid == 0x04){
    bdd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    bdd6:	f10b 0519 	add.w	r5, fp, #25
    bdda:	2b40      	cmp	r3, #64	; 0x40
			memcpy(&adv_info->data[0], ptr, data_len);
    bddc:	463a      	mov	r2, r7
    bdde:	4621      	mov	r1, r4
    bde0:	4628      	mov	r0, r5
		if(adi_ptr->sid == 0x04){
    bde2:	d10f      	bne.n	be04 <le_adv_ext_report+0x1ac>
			memcpy(&adv_info->data[0], ptr, data_len);
    bde4:	f7f4 fc10 	bl	608 <memcpy>
			memcpy(copy_data, ptr, data_len);
    bde8:	463a      	mov	r2, r7
    bdea:	4621      	mov	r1, r4
    bdec:	4818      	ldr	r0, [pc, #96]	; (be50 <le_adv_ext_report+0x1f8>)
    bdee:	f7f4 fc0b 	bl	608 <memcpy>
}
    bdf2:	b015      	add	sp, #84	; 0x54
    bdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aux_adi_present = true;				// chain pdu's
    bdf8:	f04f 0901 	mov.w	r9, #1
	bool adi_present = false;		// to identify aux packet and fragment it
    bdfc:	2600      	movs	r6, #0
    bdfe:	e7a1      	b.n	bd44 <le_adv_ext_report+0xec>
    be00:	464e      	mov	r6, r9
    be02:	e7a1      	b.n	bd48 <le_adv_ext_report+0xf0>
			memcpy(&adv_info->data[0], ptr, data_len);
    be04:	f7f4 fc00 	bl	608 <memcpy>
			*prssi = rssi;
    be08:	f805 8007 	strb.w	r8, [r5, r7]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    be0c:	e7f1      	b.n	bdf2 <le_adv_ext_report+0x19a>
		le_advertising_report(pdu_data, b, buf);
    be0e:	465a      	mov	r2, fp
    be10:	4621      	mov	r1, r4
    be12:	4628      	mov	r0, r5
    be14:	f7ff fcca 	bl	b7ac <le_advertising_report>
	return;
    be18:	e7eb      	b.n	bdf2 <le_adv_ext_report+0x19a>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    be1a:	2e00      	cmp	r6, #0
    be1c:	d1c0      	bne.n	bda0 <le_adv_ext_report+0x148>
			adv_info->frag = 0x02; //last paacket of the data or complete packet
    be1e:	2302      	movs	r3, #2
    be20:	e7bc      	b.n	bd9c <le_adv_ext_report+0x144>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    be22:	2e00      	cmp	r6, #0
    be24:	d0bc      	beq.n	bda0 <le_adv_ext_report+0x148>
		}else if(adi_present && aux_ptr_present){
    be26:	f1ba 0f00 	cmp.w	sl, #0
    be2a:	d0b9      	beq.n	bda0 <le_adv_ext_report+0x148>
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    be2c:	2303      	movs	r3, #3
    be2e:	e7b5      	b.n	bd9c <le_adv_ext_report+0x144>
    be30:	0001868d 	.word	0x0001868d
    be34:	0001ac7c 	.word	0x0001ac7c
    be38:	00019806 	.word	0x00019806
    be3c:	00019a8b 	.word	0x00019a8b
    be40:	0001aec2 	.word	0x0001aec2
    be44:	0001af0f 	.word	0x0001af0f
    be48:	0001af40 	.word	0x0001af40
    be4c:	0001af59 	.word	0x0001af59
    be50:	20004d4c 	.word	0x20004d4c

0000be54 <sys_get_le64>:
{
    be54:	4603      	mov	r3, r0
}
    be56:	6800      	ldr	r0, [r0, #0]
    be58:	6859      	ldr	r1, [r3, #4]
    be5a:	4770      	bx	lr

0000be5c <hci_cmd_handle>:
{
    be5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    be5e:	8981      	ldrh	r1, [r0, #12]
{
    be60:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    be62:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    be64:	2902      	cmp	r1, #2
{
    be66:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    be68:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    be6a:	d80b      	bhi.n	be84 <hci_cmd_handle+0x28>
		BT_ERR("No HCI Command header");
    be6c:	4b8f      	ldr	r3, [pc, #572]	; (c0ac <hci_cmd_handle+0x250>)
    be6e:	9301      	str	r3, [sp, #4]
    be70:	9300      	str	r3, [sp, #0]
    be72:	4a8f      	ldr	r2, [pc, #572]	; (c0b0 <hci_cmd_handle+0x254>)
    be74:	4b8f      	ldr	r3, [pc, #572]	; (c0b4 <hci_cmd_handle+0x258>)
    be76:	4990      	ldr	r1, [pc, #576]	; (c0b8 <hci_cmd_handle+0x25c>)
    be78:	4890      	ldr	r0, [pc, #576]	; (c0bc <hci_cmd_handle+0x260>)
		BT_ERR("Invalid HCI CMD packet length");
    be7a:	f7f5 fc31 	bl	16e0 <printk>
		return NULL;
    be7e:	4628      	mov	r0, r5
}
    be80:	b013      	add	sp, #76	; 0x4c
    be82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    be84:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    be86:	4e8e      	ldr	r6, [pc, #568]	; (c0c0 <hci_cmd_handle+0x264>)
    be88:	781a      	ldrb	r2, [r3, #0]
    be8a:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    be8c:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    be8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    be92:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    be94:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    be96:	d907      	bls.n	bea8 <hci_cmd_handle+0x4c>
		BT_ERR("Invalid HCI CMD packet length");
    be98:	4b84      	ldr	r3, [pc, #528]	; (c0ac <hci_cmd_handle+0x250>)
    be9a:	9301      	str	r3, [sp, #4]
    be9c:	9300      	str	r3, [sp, #0]
    be9e:	4a84      	ldr	r2, [pc, #528]	; (c0b0 <hci_cmd_handle+0x254>)
    bea0:	4b84      	ldr	r3, [pc, #528]	; (c0b4 <hci_cmd_handle+0x258>)
    bea2:	4985      	ldr	r1, [pc, #532]	; (c0b8 <hci_cmd_handle+0x25c>)
    bea4:	4887      	ldr	r0, [pc, #540]	; (c0c4 <hci_cmd_handle+0x268>)
    bea6:	e7e8      	b.n	be7a <hci_cmd_handle+0x1e>
	net_buf_pull(cmd, sizeof(*chdr));
    bea8:	2103      	movs	r1, #3
    beaa:	f104 0008 	add.w	r0, r4, #8
    beae:	f00a ff95 	bl	16ddc <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    beb2:	8833      	ldrh	r3, [r6, #0]
    beb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    beb8:	0a9b      	lsrs	r3, r3, #10
    beba:	2b04      	cmp	r3, #4
    bebc:	f000 80c6 	beq.w	c04c <hci_cmd_handle+0x1f0>
    bec0:	d813      	bhi.n	beea <hci_cmd_handle+0x8e>
    bec2:	2b01      	cmp	r3, #1
    bec4:	d030      	beq.n	bf28 <hci_cmd_handle+0xcc>
    bec6:	2b03      	cmp	r3, #3
    bec8:	d045      	beq.n	bf56 <hci_cmd_handle+0xfa>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    beca:	2101      	movs	r1, #1
    becc:	a807      	add	r0, sp, #28
    bece:	f7ff fc4b 	bl	b768 <cmd_complete>
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    bed2:	4b76      	ldr	r3, [pc, #472]	; (c0ac <hci_cmd_handle+0x250>)
    bed4:	9301      	str	r3, [sp, #4]
    bed6:	9300      	str	r3, [sp, #0]
		ccst = cmd_complete(&evt, sizeof(*ccst));
    bed8:	4604      	mov	r4, r0
		BT_ERR("Invalid BT_HCI_ERR_UNKNOWN_CMD");
    beda:	4b76      	ldr	r3, [pc, #472]	; (c0b4 <hci_cmd_handle+0x258>)
    bedc:	4a74      	ldr	r2, [pc, #464]	; (c0b0 <hci_cmd_handle+0x254>)
    bede:	4976      	ldr	r1, [pc, #472]	; (c0b8 <hci_cmd_handle+0x25c>)
    bee0:	4879      	ldr	r0, [pc, #484]	; (c0c8 <hci_cmd_handle+0x26c>)
    bee2:	f7f5 fbfd 	bl	16e0 <printk>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    bee6:	2301      	movs	r3, #1
    bee8:	e359      	b.n	c59e <hci_cmd_handle+0x742>
	switch (BT_OGF(_opcode)) {
    beea:	2b08      	cmp	r3, #8
    beec:	f000 8176 	beq.w	c1dc <hci_cmd_handle+0x380>
    bef0:	2b3f      	cmp	r3, #63	; 0x3f
    bef2:	d1ea      	bne.n	beca <hci_cmd_handle+0x6e>
	switch (ocf) {
    bef4:	3a01      	subs	r2, #1
    bef6:	2a09      	cmp	r2, #9
    bef8:	d8e7      	bhi.n	beca <hci_cmd_handle+0x6e>
    befa:	a301      	add	r3, pc, #4	; (adr r3, bf00 <hci_cmd_handle+0xa4>)
    befc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    bf00:	0000c775 	.word	0x0000c775
    bf04:	0000c7a5 	.word	0x0000c7a5
    bf08:	0000c7cf 	.word	0x0000c7cf
    bf0c:	0000becb 	.word	0x0000becb
    bf10:	0000becb 	.word	0x0000becb
    bf14:	0000c815 	.word	0x0000c815
    bf18:	0000becb 	.word	0x0000becb
    bf1c:	0000c7e7 	.word	0x0000c7e7
    bf20:	0000c821 	.word	0x0000c821
    bf24:	0000c88f 	.word	0x0000c88f
	switch (ocf) {
    bf28:	2a06      	cmp	r2, #6
    bf2a:	d006      	beq.n	bf3a <hci_cmd_handle+0xde>
    bf2c:	2a1d      	cmp	r2, #29
    bf2e:	d1cc      	bne.n	beca <hci_cmd_handle+0x6e>
	handle = sys_le16_to_cpu(cmd->handle);
    bf30:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    bf32:	8818      	ldrh	r0, [r3, #0]
    bf34:	f008 fb11 	bl	1455a <ll_version_ind_send>
    bf38:	e004      	b.n	bf44 <hci_cmd_handle+0xe8>
    bf3a:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    bf3c:	7899      	ldrb	r1, [r3, #2]
    bf3e:	8818      	ldrh	r0, [r3, #0]
    bf40:	f008 fb1f 	bl	14582 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    bf44:	2800      	cmp	r0, #0
    bf46:	bf14      	ite	ne
    bf48:	200c      	movne	r0, #12
    bf4a:	2000      	moveq	r0, #0
    bf4c:	f7ff fbdc 	bl	b708 <cmd_status>
    bf50:	9007      	str	r0, [sp, #28]
	return evt;
    bf52:	9807      	ldr	r0, [sp, #28]
    bf54:	e794      	b.n	be80 <hci_cmd_handle+0x24>
	switch (ocf) {
    bf56:	2a2d      	cmp	r2, #45	; 0x2d
    bf58:	d03a      	beq.n	bfd0 <hci_cmd_handle+0x174>
    bf5a:	d820      	bhi.n	bf9e <hci_cmd_handle+0x142>
    bf5c:	2a01      	cmp	r2, #1
    bf5e:	d02b      	beq.n	bfb8 <hci_cmd_handle+0x15c>
    bf60:	2a03      	cmp	r2, #3
    bf62:	d1b2      	bne.n	beca <hci_cmd_handle+0x6e>
	dup_count = -1;
    bf64:	4b59      	ldr	r3, [pc, #356]	; (c0cc <hci_cmd_handle+0x270>)
    bf66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bf6a:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    bf6c:	4b58      	ldr	r3, [pc, #352]	; (c0d0 <hci_cmd_handle+0x274>)
    bf6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bf72:	f641 71ff 	movw	r1, #8191	; 0x1fff
    bf76:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    bf7a:	4b56      	ldr	r3, [pc, #344]	; (c0d4 <hci_cmd_handle+0x278>)
    bf7c:	2000      	movs	r0, #0
    bf7e:	2100      	movs	r1, #0
    bf80:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    bf84:	4b54      	ldr	r3, [pc, #336]	; (c0d8 <hci_cmd_handle+0x27c>)
    bf86:	201f      	movs	r0, #31
    bf88:	2100      	movs	r1, #0
    bf8a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    bf8e:	f007 ffad 	bl	13eec <ll_reset>
	ccst = cmd_complete(evt, sizeof(*ccst));
    bf92:	2101      	movs	r1, #1
    bf94:	a807      	add	r0, sp, #28
    bf96:	f7ff fbe7 	bl	b768 <cmd_complete>
	ccst->status = 0x00;
    bf9a:	2300      	movs	r3, #0
    bf9c:	e24d      	b.n	c43a <hci_cmd_handle+0x5de>
	switch (ocf) {
    bf9e:	2a7b      	cmp	r2, #123	; 0x7b
    bfa0:	d02c      	beq.n	bffc <hci_cmd_handle+0x1a0>
    bfa2:	2a7c      	cmp	r2, #124	; 0x7c
    bfa4:	d041      	beq.n	c02a <hci_cmd_handle+0x1ce>
    bfa6:	2a63      	cmp	r2, #99	; 0x63
    bfa8:	d18f      	bne.n	beca <hci_cmd_handle+0x6e>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    bfaa:	68a0      	ldr	r0, [r4, #8]
    bfac:	f7ff ff52 	bl	be54 <sys_get_le64>
    bfb0:	4b48      	ldr	r3, [pc, #288]	; (c0d4 <hci_cmd_handle+0x278>)
	le_event_mask = sys_get_le64(cmd->events);
    bfb2:	e9c3 0100 	strd	r0, r1, [r3]
    bfb6:	e7ec      	b.n	bf92 <hci_cmd_handle+0x136>
	event_mask = sys_get_le64(cmd->events);
    bfb8:	68a0      	ldr	r0, [r4, #8]
    bfba:	f7ff ff4b 	bl	be54 <sys_get_le64>
    bfbe:	4b44      	ldr	r3, [pc, #272]	; (c0d0 <hci_cmd_handle+0x274>)
    bfc0:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    bfc4:	4611      	mov	r1, r2
    bfc6:	a807      	add	r0, sp, #28
    bfc8:	f7ff fbce 	bl	b768 <cmd_complete>
	ccst->status = 0x00;
    bfcc:	7005      	strb	r5, [r0, #0]
    bfce:	e7c0      	b.n	bf52 <hci_cmd_handle+0xf6>
    bfd0:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    bfd2:	2104      	movs	r1, #4
    bfd4:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    bfd6:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    bfd8:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    bfda:	f7ff fbc5 	bl	b768 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    bfde:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    bfe0:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    bfe2:	1cc2      	adds	r2, r0, #3
    bfe4:	4639      	mov	r1, r7
    bfe6:	4630      	mov	r0, r6
    bfe8:	f008 fadf 	bl	145aa <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    bfec:	2800      	cmp	r0, #0
    bfee:	bf14      	ite	ne
    bff0:	2302      	movne	r3, #2
    bff2:	2300      	moveq	r3, #0
    bff4:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    bff6:	f8a4 5001 	strh.w	r5, [r4, #1]
    bffa:	e7aa      	b.n	bf52 <hci_cmd_handle+0xf6>
	handle = sys_le16_to_cpu(cmd->handle);
    bffc:	68a3      	ldr	r3, [r4, #8]
    bffe:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    c000:	a908      	add	r1, sp, #32
    c002:	b2a0      	uxth	r0, r4
    c004:	f008 fadb 	bl	145be <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    c008:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    c00a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    c00c:	a807      	add	r0, sp, #28
    c00e:	f7ff fbab 	bl	b768 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c012:	2d00      	cmp	r5, #0
    c014:	bf14      	ite	ne
    c016:	230c      	movne	r3, #12
    c018:	2300      	moveq	r3, #0
    c01a:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    c01c:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    c020:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    c024:	f8a0 3003 	strh.w	r3, [r0, #3]
    c028:	e793      	b.n	bf52 <hci_cmd_handle+0xf6>
    c02a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c02c:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    c02e:	8859      	ldrh	r1, [r3, #2]
    c030:	b2a0      	uxth	r0, r4
    c032:	f008 fad8 	bl	145e6 <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    c036:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    c038:	2103      	movs	r1, #3
    c03a:	a807      	add	r0, sp, #28
    c03c:	f7ff fb94 	bl	b768 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c040:	2d00      	cmp	r5, #0
    c042:	bf14      	ite	ne
    c044:	230c      	movne	r3, #12
    c046:	2300      	moveq	r3, #0
    c048:	7003      	strb	r3, [r0, #0]
    c04a:	e28c      	b.n	c566 <hci_cmd_handle+0x70a>
	switch (ocf) {
    c04c:	3a01      	subs	r2, #1
    c04e:	2a08      	cmp	r2, #8
    c050:	f63f af3b 	bhi.w	beca <hci_cmd_handle+0x6e>
    c054:	a301      	add	r3, pc, #4	; (adr r3, c05c <hci_cmd_handle+0x200>)
    c056:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c05a:	bf00      	nop
    c05c:	0000c081 	.word	0x0000c081
    c060:	0000c0dd 	.word	0x0000c0dd
    c064:	0000c1a9 	.word	0x0000c1a9
    c068:	0000becb 	.word	0x0000becb
    c06c:	0000becb 	.word	0x0000becb
    c070:	0000becb 	.word	0x0000becb
    c074:	0000becb 	.word	0x0000becb
    c078:	0000becb 	.word	0x0000becb
    c07c:	0000c1c5 	.word	0x0000c1c5
	rp = cmd_complete(evt, sizeof(*rp));
    c080:	2109      	movs	r1, #9
    c082:	a807      	add	r0, sp, #28
    c084:	f7ff fb70 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c088:	2300      	movs	r3, #0
    c08a:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    c08c:	7083      	strb	r3, [r0, #2]
    c08e:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c090:	f06f 030e 	mvn.w	r3, #14
    c094:	7143      	strb	r3, [r0, #5]
    c096:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    c098:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c09a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c09c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    c0a0:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    c0a2:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c0a4:	71c3      	strb	r3, [r0, #7]
    c0a6:	7203      	strb	r3, [r0, #8]
    c0a8:	e753      	b.n	bf52 <hci_cmd_handle+0xf6>
    c0aa:	bf00      	nop
    c0ac:	0001868d 	.word	0x0001868d
    c0b0:	00019a84 	.word	0x00019a84
    c0b4:	0001ac48 	.word	0x0001ac48
    c0b8:	00019a8b 	.word	0x00019a8b
    c0bc:	0001ad8b 	.word	0x0001ad8b
    c0c0:	20000afc 	.word	0x20000afc
    c0c4:	0001adb1 	.word	0x0001adb1
    c0c8:	0001addf 	.word	0x0001addf
    c0cc:	20000b04 	.word	0x20000b04
    c0d0:	200088f8 	.word	0x200088f8
    c0d4:	20000b90 	.word	0x20000b90
    c0d8:	20008900 	.word	0x20008900
	rp = cmd_complete(evt, sizeof(*rp));
    c0dc:	2141      	movs	r1, #65	; 0x41
    c0de:	a807      	add	r0, sp, #28
    c0e0:	f7ff fb42 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c0e4:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c0e6:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    c0e8:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c0ea:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    c0ee:	f7f4 fab7 	bl	660 <memset>
	rp->commands[2] |= BIT(7);
    c0f2:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[26] |= BIT(6) | BIT(7);
    c0f4:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[36] |= BIT(4);
    c0f6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
	rp->commands[2] |= BIT(7);
    c0fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c0fe:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    c100:	79a3      	ldrb	r3, [r4, #6]
    c102:	f063 033f 	orn	r3, r3, #63	; 0x3f
    c106:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    c108:	7ae3      	ldrb	r3, [r4, #11]
    c10a:	f043 0304 	orr.w	r3, r3, #4
    c10e:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    c110:	7be3      	ldrb	r3, [r4, #15]
    c112:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    c116:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    c118:	7c23      	ldrb	r3, [r4, #16]
    c11a:	f043 0302 	orr.w	r3, r3, #2
    c11e:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    c120:	7de3      	ldrb	r3, [r4, #23]
    c122:	f043 0304 	orr.w	r3, r3, #4
    c126:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    c128:	7ea3      	ldrb	r3, [r4, #26]
    c12a:	f043 0317 	orr.w	r3, r3, #23
    c12e:	76a3      	strb	r3, [r4, #26]
	rp->commands[28] |= BIT(3);
    c130:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[28] |= BIT(0);
    c132:	f043 0309 	orr.w	r3, r3, #9
    c136:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    c138:	7863      	ldrb	r3, [r4, #1]
    c13a:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[26] |= BIT(4) | BIT(5);
    c13e:	f062 0203 	orn	r2, r2, #3
	rp->commands[0] |= BIT(5);
    c142:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    c144:	23ff      	movs	r3, #255	; 0xff
	rp->commands[26] |= BIT(4) | BIT(5);
    c146:	76e2      	strb	r2, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    c148:	7723      	strb	r3, [r4, #28]
	rp->commands[32] |= BIT(4) | BIT(5);
    c14a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(4) | BIT(5);
    c14e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[36] |= BIT(4);
    c152:	f041 0112 	orr.w	r1, r1, #18
	rp->commands[32] |= BIT(4) | BIT(5);
    c156:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    c15a:	f063 030f 	orn	r3, r3, #15
	rp->commands[36] |= BIT(4);
    c15e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	rp->commands[32] |= BIT(4) | BIT(5);
    c162:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	rp->commands[37] |= BIT(6);
    c166:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c16a:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[33] |= BIT(6) | BIT(7);
    c16e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[35] |= BIT(3);
    c172:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[37] |= BIT(6);
    c176:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c17a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c17e:	f062 0206 	orn	r2, r2, #6
	rp->commands[37] |= BIT(6);
    c182:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    c186:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    c18a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    c18e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c192:	f043 0304 	orr.w	r3, r3, #4
    c196:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    c19a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    c19e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c1a2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    c1a6:	e6d4      	b.n	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c1a8:	2109      	movs	r1, #9
    c1aa:	a807      	add	r0, sp, #28
    c1ac:	f7ff fadc 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c1b0:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c1b2:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c1b4:	2208      	movs	r2, #8
	rp->status = 0x00;
    c1b6:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c1ba:	f7f4 fa51 	bl	660 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    c1be:	2360      	movs	r3, #96	; 0x60
    c1c0:	7163      	strb	r3, [r4, #5]
    c1c2:	e6c6      	b.n	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c1c4:	2107      	movs	r1, #7
    c1c6:	a807      	add	r0, sp, #28
    c1c8:	f7ff face 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c1cc:	4601      	mov	r1, r0
    c1ce:	2300      	movs	r3, #0
    c1d0:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    c1d4:	4618      	mov	r0, r3
    c1d6:	f7ff f901 	bl	b3dc <ll_addr_get>
    c1da:	e6ba      	b.n	bf52 <hci_cmd_handle+0xf6>
	switch (ocf) {
    c1dc:	3a01      	subs	r2, #1
    c1de:	2a4d      	cmp	r2, #77	; 0x4d
    c1e0:	f63f ae73 	bhi.w	beca <hci_cmd_handle+0x6e>
    c1e4:	a301      	add	r3, pc, #4	; (adr r3, c1ec <hci_cmd_handle+0x390>)
    c1e6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    c1ea:	bf00      	nop
    c1ec:	0000c325 	.word	0x0000c325
    c1f0:	0000c32f 	.word	0x0000c32f
    c1f4:	0000c349 	.word	0x0000c349
    c1f8:	0000becb 	.word	0x0000becb
    c1fc:	0000c36d 	.word	0x0000c36d
    c200:	0000becb 	.word	0x0000becb
    c204:	0000becb 	.word	0x0000becb
    c208:	0000becb 	.word	0x0000becb
    c20c:	0000becb 	.word	0x0000becb
    c210:	0000becb 	.word	0x0000becb
    c214:	0000c411 	.word	0x0000c411
    c218:	0000c43f 	.word	0x0000c43f
    c21c:	0000c45f 	.word	0x0000c45f
    c220:	0000c489 	.word	0x0000c489
    c224:	0000c379 	.word	0x0000c379
    c228:	0000c38f 	.word	0x0000c38f
    c22c:	0000c3a1 	.word	0x0000c3a1
    c230:	0000c3a9 	.word	0x0000c3a9
    c234:	0000c529 	.word	0x0000c529
    c238:	0000c4e9 	.word	0x0000c4e9
    c23c:	0000c505 	.word	0x0000c505
    c240:	0000c51f 	.word	0x0000c51f
    c244:	0000c3b1 	.word	0x0000c3b1
    c248:	0000c3d7 	.word	0x0000c3d7
    c24c:	0000c4f1 	.word	0x0000c4f1
    c250:	0000becb 	.word	0x0000becb
    c254:	0000becb 	.word	0x0000becb
    c258:	0000c3ed 	.word	0x0000c3ed
    c25c:	0000becb 	.word	0x0000becb
    c260:	0000becb 	.word	0x0000becb
    c264:	0000becb 	.word	0x0000becb
    c268:	0000c543 	.word	0x0000c543
    c26c:	0000c56d 	.word	0x0000c56d
    c270:	0000c57b 	.word	0x0000c57b
    c274:	0000c58b 	.word	0x0000c58b
    c278:	0000c5a3 	.word	0x0000c5a3
    c27c:	0000becb 	.word	0x0000becb
    c280:	0000becb 	.word	0x0000becb
    c284:	0000c6bd 	.word	0x0000c6bd
    c288:	0000c6cb 	.word	0x0000c6cb
    c28c:	0000c6d3 	.word	0x0000c6d3
    c290:	0000c6e3 	.word	0x0000c6e3
    c294:	0000c6f5 	.word	0x0000c6f5
    c298:	0000c713 	.word	0x0000c713
    c29c:	0000c731 	.word	0x0000c731
    c2a0:	0000c747 	.word	0x0000c747
    c2a4:	0000c5bf 	.word	0x0000c5bf
    c2a8:	0000c5ed 	.word	0x0000c5ed
    c2ac:	0000c643 	.word	0x0000c643
    c2b0:	0000c661 	.word	0x0000c661
    c2b4:	0000becb 	.word	0x0000becb
    c2b8:	0000becb 	.word	0x0000becb
    c2bc:	0000becb 	.word	0x0000becb
    c2c0:	0000becb 	.word	0x0000becb
    c2c4:	0000becb 	.word	0x0000becb
    c2c8:	0000becb 	.word	0x0000becb
    c2cc:	0000becb 	.word	0x0000becb
    c2d0:	0000becb 	.word	0x0000becb
    c2d4:	0000becb 	.word	0x0000becb
    c2d8:	0000becb 	.word	0x0000becb
    c2dc:	0000becb 	.word	0x0000becb
    c2e0:	0000becb 	.word	0x0000becb
    c2e4:	0000becb 	.word	0x0000becb
    c2e8:	0000becb 	.word	0x0000becb
    c2ec:	0000becb 	.word	0x0000becb
    c2f0:	0000becb 	.word	0x0000becb
    c2f4:	0000becb 	.word	0x0000becb
    c2f8:	0000becb 	.word	0x0000becb
    c2fc:	0000becb 	.word	0x0000becb
    c300:	0000becb 	.word	0x0000becb
    c304:	0000becb 	.word	0x0000becb
    c308:	0000becb 	.word	0x0000becb
    c30c:	0000becb 	.word	0x0000becb
    c310:	0000becb 	.word	0x0000becb
    c314:	0000c75b 	.word	0x0000c75b
    c318:	0000becb 	.word	0x0000becb
    c31c:	0000becb 	.word	0x0000becb
    c320:	0000c751 	.word	0x0000c751
	le_event_mask = sys_get_le64(cmd->events);
    c324:	68a0      	ldr	r0, [r4, #8]
    c326:	f7ff fd95 	bl	be54 <sys_get_le64>
    c32a:	4bab      	ldr	r3, [pc, #684]	; (c5d8 <hci_cmd_handle+0x77c>)
    c32c:	e641      	b.n	bfb2 <hci_cmd_handle+0x156>
	rp = cmd_complete(evt, sizeof(*rp));
    c32e:	2104      	movs	r1, #4
    c330:	a807      	add	r0, sp, #28
    c332:	f7ff fa19 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c336:	2300      	movs	r3, #0
    c338:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    c33a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c33e:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    c340:	230a      	movs	r3, #10
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    c342:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    c344:	70c3      	strb	r3, [r0, #3]
    c346:	e604      	b.n	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c348:	2109      	movs	r1, #9
    c34a:	a807      	add	r0, sp, #28
    c34c:	f7ff fa0c 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c350:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c352:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c354:	2208      	movs	r2, #8
	rp->status = 0x00;
    c356:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c35a:	f7f4 f981 	bl	660 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    c35e:	23ff      	movs	r3, #255	; 0xff
    c360:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    c362:	2349      	movs	r3, #73	; 0x49
    c364:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    c366:	2301      	movs	r3, #1
    c368:	70e3      	strb	r3, [r4, #3]
    c36a:	e5f2      	b.n	bf52 <hci_cmd_handle+0xf6>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    c36c:	68a1      	ldr	r1, [r4, #8]
    c36e:	2001      	movs	r0, #1
    c370:	f7ff f84e 	bl	b410 <ll_addr_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    c374:	4604      	mov	r4, r0
    c376:	e0af      	b.n	c4d8 <hci_cmd_handle+0x67c>
	rp = cmd_complete(evt, sizeof(*rp));
    c378:	2102      	movs	r1, #2
    c37a:	a807      	add	r0, sp, #28
    c37c:	f7ff f9f4 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c380:	2300      	movs	r3, #0
    c382:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    c384:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    c386:	f009 f8a1 	bl	154cc <ll_wl_size_get>
    c38a:	7060      	strb	r0, [r4, #1]
    c38c:	e5e1      	b.n	bf52 <hci_cmd_handle+0xf6>
	ccst = cmd_complete(evt, sizeof(*ccst));
    c38e:	2101      	movs	r1, #1
    c390:	a807      	add	r0, sp, #28
    c392:	f7ff f9e9 	bl	b768 <cmd_complete>
    c396:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    c398:	f009 f89a 	bl	154d0 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    c39c:	7020      	strb	r0, [r4, #0]
    c39e:	e5d8      	b.n	bf52 <hci_cmd_handle+0xf6>
	status = ll_wl_add(&cmd->addr);
    c3a0:	68a0      	ldr	r0, [r4, #8]
    c3a2:	f009 f935 	bl	15610 <ll_wl_add>
    c3a6:	e7e5      	b.n	c374 <hci_cmd_handle+0x518>
	status = ll_wl_remove(&cmd->addr);
    c3a8:	68a0      	ldr	r0, [r4, #8]
    c3aa:	f009 f8b1 	bl	15510 <ll_wl_remove>
    c3ae:	e7e1      	b.n	c374 <hci_cmd_handle+0x518>
    c3b0:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    c3b2:	2300      	movs	r3, #0
    c3b4:	aa08      	add	r2, sp, #32
    c3b6:	f100 0110 	add.w	r1, r0, #16
    c3ba:	f009 fda3 	bl	15f04 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    c3be:	2111      	movs	r1, #17
    c3c0:	a807      	add	r0, sp, #28
    c3c2:	f7ff f9d1 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c3c6:	2300      	movs	r3, #0
    c3c8:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    c3cc:	2210      	movs	r2, #16
    c3ce:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    c3d0:	f7f4 f91a 	bl	608 <memcpy>
    c3d4:	e5bd      	b.n	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c3d6:	2109      	movs	r1, #9
    c3d8:	a807      	add	r0, sp, #28
    c3da:	f7ff f9c5 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c3de:	2300      	movs	r3, #0
    c3e0:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    c3e4:	2108      	movs	r1, #8
    c3e6:	f7ff f833 	bl	b450 <bt_rand>
    c3ea:	e5b2      	b.n	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c3ec:	2109      	movs	r1, #9
    c3ee:	a807      	add	r0, sp, #28
    c3f0:	f7ff f9ba 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c3f4:	4601      	mov	r1, r0
    c3f6:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c3f8:	4602      	mov	r2, r0
	rp->status = 0x00;
    c3fa:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    c3fe:	4877      	ldr	r0, [pc, #476]	; (c5dc <hci_cmd_handle+0x780>)
    c400:	f7ff f96e 	bl	b6e0 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    c404:	f240 203f 	movw	r0, #575	; 0x23f
    c408:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    c40a:	f7ff f969 	bl	b6e0 <sys_put_le32>
    c40e:	e5a0      	b.n	bf52 <hci_cmd_handle+0xf6>
    c410:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    c412:	7963      	ldrb	r3, [r4, #5]
    c414:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    c418:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    c41c:	7820      	ldrb	r0, [r4, #0]
    c41e:	79a4      	ldrb	r4, [r4, #6]
    c420:	9400      	str	r4, [sp, #0]
    c422:	f008 fe0b 	bl	1503c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    c426:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    c428:	2101      	movs	r1, #1
    c42a:	a807      	add	r0, sp, #28
    c42c:	f7ff f99c 	bl	b768 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c430:	2c00      	cmp	r4, #0
    c432:	bf18      	it	ne
    c434:	230c      	movne	r3, #12
    c436:	bf08      	it	eq
    c438:	2300      	moveq	r3, #0
	ccst->status = 0x00;
    c43a:	7003      	strb	r3, [r0, #0]
    c43c:	e589      	b.n	bf52 <hci_cmd_handle+0xf6>
    c43e:	68a2      	ldr	r2, [r4, #8]
    c440:	4b67      	ldr	r3, [pc, #412]	; (c5e0 <hci_cmd_handle+0x784>)
	if (cmd->enable && cmd->filter_dup) {
    c442:	7810      	ldrb	r0, [r2, #0]
    c444:	b140      	cbz	r0, c458 <hci_cmd_handle+0x5fc>
    c446:	7852      	ldrb	r2, [r2, #1]
    c448:	b132      	cbz	r2, c458 <hci_cmd_handle+0x5fc>
		dup_count = 0;
    c44a:	2200      	movs	r2, #0
    c44c:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    c44e:	4b65      	ldr	r3, [pc, #404]	; (c5e4 <hci_cmd_handle+0x788>)
		dup_count = -1;
    c450:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    c452:	f008 fe17 	bl	15084 <ll_scan_enable>
    c456:	e7e6      	b.n	c426 <hci_cmd_handle+0x5ca>
		dup_count = -1;
    c458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c45c:	e7f8      	b.n	c450 <hci_cmd_handle+0x5f4>
    c45e:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    c460:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    c464:	7963      	ldrb	r3, [r4, #5]
    c466:	7922      	ldrb	r2, [r4, #4]
    c468:	8861      	ldrh	r1, [r4, #2]
    c46a:	8820      	ldrh	r0, [r4, #0]
    c46c:	9504      	str	r5, [sp, #16]
    c46e:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    c472:	9503      	str	r5, [sp, #12]
    c474:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    c478:	9502      	str	r5, [sp, #8]
    c47a:	7b25      	ldrb	r5, [r4, #12]
    c47c:	9501      	str	r5, [sp, #4]
    c47e:	3406      	adds	r4, #6
    c480:	9400      	str	r4, [sp, #0]
    c482:	f008 fe39 	bl	150f8 <ll_create_connection>
    c486:	e55d      	b.n	bf44 <hci_cmd_handle+0xe8>
	status = ll_connect_disable();
    c488:	f008 fc4a 	bl	14d20 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    c48c:	4606      	mov	r6, r0
    c48e:	bb48      	cbnz	r0, c4e4 <hci_cmd_handle+0x688>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c494:	2001      	movs	r0, #1
    c496:	f7f8 fc61 	bl	4d5c <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c49a:	4a53      	ldr	r2, [pc, #332]	; (c5e8 <hci_cmd_handle+0x78c>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c49c:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c49e:	e9d2 4500 	ldrd	r4, r5, [r2]
    c4a2:	2400      	movs	r4, #0
    c4a4:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    c4a8:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c4ac:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c4ae:	d004      	beq.n	c4ba <hci_cmd_handle+0x65e>
    c4b0:	4632      	mov	r2, r6
    c4b2:	4631      	mov	r1, r6
    c4b4:	2002      	movs	r0, #2
    c4b6:	f7ff fafd 	bl	bab4 <le_conn_complete.part.39>
		if ((*evt)->len) {
    c4ba:	9807      	ldr	r0, [sp, #28]
    c4bc:	8984      	ldrh	r4, [r0, #12]
    c4be:	b14c      	cbz	r4, c4d4 <hci_cmd_handle+0x678>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    c4c0:	2101      	movs	r1, #1
    c4c2:	a808      	add	r0, sp, #32
    c4c4:	f7ff f950 	bl	b768 <cmd_complete>
			ccst->status = cmd_status;
    c4c8:	2300      	movs	r3, #0
    c4ca:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    c4cc:	9808      	ldr	r0, [sp, #32]
    c4ce:	f7f8 fa67 	bl	49a0 <bt_recv_prio>
    c4d2:	e53e      	b.n	bf52 <hci_cmd_handle+0xf6>
			net_buf_unref(*evt);
    c4d4:	f00a fc22 	bl	16d1c <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    c4d8:	2101      	movs	r1, #1
    c4da:	a807      	add	r0, sp, #28
    c4dc:	f7ff f944 	bl	b768 <cmd_complete>
	ccst->status = status;
    c4e0:	7004      	strb	r4, [r0, #0]
    c4e2:	e536      	b.n	bf52 <hci_cmd_handle+0xf6>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    c4e4:	240c      	movs	r4, #12
    c4e6:	e7f7      	b.n	c4d8 <hci_cmd_handle+0x67c>
	status = ll_chm_update(&cmd->ch_map[0]);
    c4e8:	68a0      	ldr	r0, [r4, #8]
    c4ea:	f007 ffcb 	bl	14484 <ll_chm_update>
    c4ee:	e79a      	b.n	c426 <hci_cmd_handle+0x5ca>
    c4f0:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    c4f2:	f100 030c 	add.w	r3, r0, #12
    c4f6:	f100 020a 	add.w	r2, r0, #10
    c4fa:	1c81      	adds	r1, r0, #2
    c4fc:	8800      	ldrh	r0, [r0, #0]
    c4fe:	f008 fa75 	bl	149ec <ll_enc_req_send>
    c502:	e51f      	b.n	bf44 <hci_cmd_handle+0xe8>
	handle = sys_le16_to_cpu(cmd->handle);
    c504:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    c506:	2108      	movs	r1, #8
    c508:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    c50a:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    c50c:	f7ff f92c 	bl	b768 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    c510:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    c512:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    c514:	1cc1      	adds	r1, r0, #3
    c516:	4630      	mov	r0, r6
    c518:	f007 fff6 	bl	14508 <ll_chm_get>
    c51c:	e566      	b.n	bfec <hci_cmd_handle+0x190>
	handle = sys_le16_to_cpu(cmd->handle);
    c51e:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    c520:	8818      	ldrh	r0, [r3, #0]
    c522:	f008 f806 	bl	14532 <ll_feature_req_send>
    c526:	e50d      	b.n	bf44 <hci_cmd_handle+0xe8>
    c528:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    c52a:	8911      	ldrh	r1, [r2, #8]
    c52c:	8893      	ldrh	r3, [r2, #4]
    c52e:	8810      	ldrh	r0, [r2, #0]
    c530:	9101      	str	r1, [sp, #4]
    c532:	88d2      	ldrh	r2, [r2, #6]
    c534:	9200      	str	r2, [sp, #0]
    c536:	2200      	movs	r2, #0
    c538:	4611      	mov	r1, r2
    c53a:	f007 ff2b 	bl	14394 <ll_conn_update>
	*evt = cmd_status(status);
    c53e:	b2c0      	uxtb	r0, r0
    c540:	e504      	b.n	bf4c <hci_cmd_handle+0xf0>
    c542:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    c544:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c546:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    c548:	8893      	ldrh	r3, [r2, #4]
    c54a:	9101      	str	r1, [sp, #4]
    c54c:	88d2      	ldrh	r2, [r2, #6]
    c54e:	9200      	str	r2, [sp, #0]
    c550:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    c552:	2102      	movs	r1, #2
    c554:	b2a0      	uxth	r0, r4
    c556:	f007 ff1d 	bl	14394 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    c55a:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    c55c:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    c55e:	a807      	add	r0, sp, #28
    c560:	f7ff f902 	bl	b768 <cmd_complete>
	rp->status = status;
    c564:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    c566:	f8a0 4001 	strh.w	r4, [r0, #1]
    c56a:	e4f2      	b.n	bf52 <hci_cmd_handle+0xf6>
    c56c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c56e:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    c570:	789a      	ldrb	r2, [r3, #2]
    c572:	2300      	movs	r3, #0
    c574:	9301      	str	r3, [sp, #4]
    c576:	9300      	str	r3, [sp, #0]
    c578:	e7eb      	b.n	c552 <hci_cmd_handle+0x6f6>
    c57a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    c57c:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    c57e:	889a      	ldrh	r2, [r3, #4]
    c580:	8859      	ldrh	r1, [r3, #2]
    c582:	b2a0      	uxth	r0, r4
    c584:	f008 f845 	bl	14612 <ll_length_req_send>
    c588:	e555      	b.n	c036 <hci_cmd_handle+0x1da>
	rp = cmd_complete(evt, sizeof(*rp));
    c58a:	2105      	movs	r1, #5
    c58c:	a807      	add	r0, sp, #28
    c58e:	f7ff f8eb 	bl	b768 <cmd_complete>
    c592:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    c594:	1cc1      	adds	r1, r0, #3
    c596:	3001      	adds	r0, #1
    c598:	f008 f85e 	bl	14658 <ll_length_default_get>
	rp->status = 0x00;
    c59c:	2300      	movs	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    c59e:	7023      	strb	r3, [r4, #0]
    c5a0:	e4d7      	b.n	bf52 <hci_cmd_handle+0xf6>
    c5a2:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    c5a4:	8859      	ldrh	r1, [r3, #2]
    c5a6:	8818      	ldrh	r0, [r3, #0]
    c5a8:	f008 f860 	bl	1466c <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    c5ac:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    c5ae:	2101      	movs	r1, #1
    c5b0:	a807      	add	r0, sp, #28
    c5b2:	f7ff f8d9 	bl	b768 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    c5b6:	2c00      	cmp	r4, #0
    c5b8:	bf18      	it	ne
    c5ba:	231e      	movne	r3, #30
    c5bc:	e73b      	b.n	c436 <hci_cmd_handle+0x5da>
	rp = cmd_complete(evt, sizeof(*rp));
    c5be:	2109      	movs	r1, #9
    c5c0:	a807      	add	r0, sp, #28
    c5c2:	f7ff f8d1 	bl	b768 <cmd_complete>
    c5c6:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    c5c8:	1dc3      	adds	r3, r0, #7
    c5ca:	1d42      	adds	r2, r0, #5
    c5cc:	1cc1      	adds	r1, r0, #3
    c5ce:	3001      	adds	r0, #1
    c5d0:	f008 f856 	bl	14680 <ll_length_max_get>
    c5d4:	e7e2      	b.n	c59c <hci_cmd_handle+0x740>
    c5d6:	bf00      	nop
    c5d8:	20008900 	.word	0x20008900
    c5dc:	130f3370 	.word	0x130f3370
    c5e0:	20000b04 	.word	0x20000b04
    c5e4:	20000b08 	.word	0x20000b08
    c5e8:	200088f8 	.word	0x200088f8
	handle = sys_le16_to_cpu(cmd->handle);
    c5ec:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    c5ee:	2105      	movs	r1, #5
    c5f0:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    c5f2:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    c5f4:	f7ff f8b8 	bl	b768 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    c5f8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    c5fa:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    c5fc:	1d02      	adds	r2, r0, #4
    c5fe:	1cc1      	adds	r1, r0, #3
    c600:	4630      	mov	r0, r6
    c602:	f008 f846 	bl	14692 <ll_phy_get>
	return __builtin_ffs(op);
    c606:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    c608:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    c60c:	2800      	cmp	r0, #0
    c60e:	bf14      	ite	ne
    c610:	230c      	movne	r3, #12
    c612:	2300      	moveq	r3, #0
    c614:	7023      	strb	r3, [r4, #0]
    c616:	2a00      	cmp	r2, #0
    c618:	fa92 f3a2 	rbit	r3, r2
    c61c:	fab3 f383 	clz	r3, r3
    c620:	7922      	ldrb	r2, [r4, #4]
    c622:	bf08      	it	eq
    c624:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    c628:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    c62a:	70e3      	strb	r3, [r4, #3]
    c62c:	2a00      	cmp	r2, #0
    c62e:	fa92 f3a2 	rbit	r3, r2
    c632:	fab3 f383 	clz	r3, r3
    c636:	bf08      	it	eq
    c638:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    c63c:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    c63e:	7123      	strb	r3, [r4, #4]
    c640:	e487      	b.n	bf52 <hci_cmd_handle+0xf6>
    c642:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c644:	781a      	ldrb	r2, [r3, #0]
    c646:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    c648:	bf44      	itt	mi
    c64a:	2107      	movmi	r1, #7
    c64c:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    c64e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    c650:	bf44      	itt	mi
    c652:	2207      	movmi	r2, #7
    c654:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    c656:	7899      	ldrb	r1, [r3, #2]
    c658:	7858      	ldrb	r0, [r3, #1]
    c65a:	f008 f82f 	bl	146bc <ll_phy_default_set>
    c65e:	e7a5      	b.n	c5ac <hci_cmd_handle+0x750>
    c660:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c662:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    c664:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    c666:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    c66a:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    c66c:	bf44      	itt	mi
    c66e:	2107      	movmi	r1, #7
    c670:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    c672:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    c674:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    c676:	bf44      	itt	mi
    c678:	2207      	movmi	r2, #7
    c67a:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    c67c:	074d      	lsls	r5, r1, #29
    c67e:	d002      	beq.n	c686 <hci_cmd_handle+0x82a>
	    !(cmd->rx_phys & 0x07)) {
    c680:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    c682:	075a      	lsls	r2, r3, #29
    c684:	d105      	bne.n	c692 <hci_cmd_handle+0x836>
		ccst = cmd_complete(evt, sizeof(*ccst));
    c686:	2101      	movs	r1, #1
    c688:	a807      	add	r0, sp, #28
    c68a:	f7ff f86d 	bl	b768 <cmd_complete>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    c68e:	2312      	movs	r3, #18
    c690:	e6d3      	b.n	c43a <hci_cmd_handle+0x5de>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    c692:	ea41 0203 	orr.w	r2, r1, r3
    c696:	f012 0ff8 	tst.w	r2, #248	; 0xf8
    c69a:	d005      	beq.n	c6a8 <hci_cmd_handle+0x84c>
		ccst = cmd_complete(evt, sizeof(*ccst));
    c69c:	2101      	movs	r1, #1
    c69e:	a807      	add	r0, sp, #28
    c6a0:	f7ff f862 	bl	b768 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    c6a4:	2311      	movs	r3, #17
    c6a6:	e6c8      	b.n	c43a <hci_cmd_handle+0x5de>
	if (phy_opts & 0x03) {
    c6a8:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    c6ac:	bf1c      	itt	ne
    c6ae:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    c6b2:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    c6b6:	f008 f80b 	bl	146d0 <ll_phy_req_send>
    c6ba:	e443      	b.n	bf44 <hci_cmd_handle+0xe8>
    c6bc:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    c6be:	f100 0217 	add.w	r2, r0, #23
    c6c2:	1dc1      	adds	r1, r0, #7
    c6c4:	f009 f9ae 	bl	15a24 <ll_rl_add>
    c6c8:	e654      	b.n	c374 <hci_cmd_handle+0x518>
	status = ll_rl_remove(&cmd->peer_id_addr);
    c6ca:	68a0      	ldr	r0, [r4, #8]
    c6cc:	f009 fa4c 	bl	15b68 <ll_rl_remove>
    c6d0:	e650      	b.n	c374 <hci_cmd_handle+0x518>
	ccst = cmd_complete(evt, sizeof(*ccst));
    c6d2:	2101      	movs	r1, #1
    c6d4:	a807      	add	r0, sp, #28
    c6d6:	f7ff f847 	bl	b768 <cmd_complete>
    c6da:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    c6dc:	f009 f988 	bl	159f0 <ll_rl_clear>
    c6e0:	e65c      	b.n	c39c <hci_cmd_handle+0x540>
	rp = cmd_complete(evt, sizeof(*rp));
    c6e2:	2102      	movs	r1, #2
    c6e4:	a807      	add	r0, sp, #28
    c6e6:	f7ff f83f 	bl	b768 <cmd_complete>
    c6ea:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    c6ec:	f009 f97e 	bl	159ec <ll_rl_size_get>
    c6f0:	7060      	strb	r0, [r4, #1]
    c6f2:	e753      	b.n	c59c <hci_cmd_handle+0x740>
	memcpy(dst, src, sizeof(*dst));
    c6f4:	2207      	movs	r2, #7
    c6f6:	68a1      	ldr	r1, [r4, #8]
    c6f8:	a808      	add	r0, sp, #32
    c6fa:	f7f3 ff85 	bl	608 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    c6fe:	2107      	movs	r1, #7
    c700:	a807      	add	r0, sp, #28
    c702:	f7ff f831 	bl	b768 <cmd_complete>
    c706:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    c708:	1c41      	adds	r1, r0, #1
    c70a:	a808      	add	r0, sp, #32
    c70c:	f009 faba 	bl	15c84 <ll_rl_crpa_get>
    c710:	e644      	b.n	c39c <hci_cmd_handle+0x540>
    c712:	2207      	movs	r2, #7
    c714:	68a1      	ldr	r1, [r4, #8]
    c716:	a808      	add	r0, sp, #32
    c718:	f7f3 ff76 	bl	608 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    c71c:	2107      	movs	r1, #7
    c71e:	a807      	add	r0, sp, #28
    c720:	f7ff f822 	bl	b768 <cmd_complete>
    c724:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    c726:	1c41      	adds	r1, r0, #1
    c728:	a808      	add	r0, sp, #32
    c72a:	f009 facb 	bl	15cc4 <ll_rl_lrpa_get>
    c72e:	e635      	b.n	c39c <hci_cmd_handle+0x540>
	u8_t enable = cmd->enable;
    c730:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    c732:	2101      	movs	r1, #1
    c734:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    c736:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    c738:	f7ff f816 	bl	b768 <cmd_complete>
    c73c:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    c73e:	4628      	mov	r0, r5
    c740:	f009 fad8 	bl	15cf4 <ll_rl_enable>
    c744:	e62a      	b.n	c39c <hci_cmd_handle+0x540>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    c746:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    c748:	8818      	ldrh	r0, [r3, #0]
    c74a:	f009 fae5 	bl	15d18 <ll_rl_timeout_set>
    c74e:	e420      	b.n	bf92 <hci_cmd_handle+0x136>
    c750:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    c752:	79c1      	ldrb	r1, [r0, #7]
    c754:	f009 fae8 	bl	15d28 <ll_priv_mode_set>
    c758:	e60c      	b.n	c374 <hci_cmd_handle+0x518>
	rp = cmd_complete(evt, sizeof(*rp));
    c75a:	2103      	movs	r1, #3
    c75c:	a807      	add	r0, sp, #28
    c75e:	f7ff f803 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c762:	4601      	mov	r1, r0
    c764:	2300      	movs	r3, #0
    c766:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    c76a:	3001      	adds	r0, #1
    c76c:	f7fe fe6c 	bl	b448 <ll_tx_pwr_get>
    c770:	f7ff bbef 	b.w	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c774:	210d      	movs	r1, #13
    c776:	a807      	add	r0, sp, #28
    c778:	f7fe fff6 	bl	b768 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    c77c:	2202      	movs	r2, #2
    c77e:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    c780:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    c782:	2201      	movs	r2, #1
    c784:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    c786:	220b      	movs	r2, #11
	rp->status = 0x00;
    c788:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    c78a:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    c78c:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    c78e:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    c790:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    c792:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    c794:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    c796:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    c798:	7242      	strb	r2, [r0, #9]
    c79a:	7283      	strb	r3, [r0, #10]
    c79c:	72c3      	strb	r3, [r0, #11]
    c79e:	7303      	strb	r3, [r0, #12]
    c7a0:	f7ff bbd7 	b.w	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c7a4:	2141      	movs	r1, #65	; 0x41
    c7a6:	a807      	add	r0, sp, #28
    c7a8:	f7fe ffde 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c7ac:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    c7ae:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    c7b0:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    c7b2:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    c7b6:	f7f3 ff53 	bl	660 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    c7ba:	7863      	ldrb	r3, [r4, #1]
    c7bc:	f063 0358 	orn	r3, r3, #88	; 0x58
    c7c0:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    c7c2:	78a3      	ldrb	r3, [r4, #2]
    c7c4:	f043 0303 	orr.w	r3, r3, #3
    c7c8:	70a3      	strb	r3, [r4, #2]
    c7ca:	f7ff bbc2 	b.w	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c7ce:	2109      	movs	r1, #9
    c7d0:	a807      	add	r0, sp, #28
    c7d2:	f7fe ffc9 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c7d6:	2100      	movs	r1, #0
    c7d8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    c7dc:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    c7de:	f7f3 ff3f 	bl	660 <memset>
    c7e2:	f7ff bbb6 	b.w	bf52 <hci_cmd_handle+0xf6>
	const char build_info[] = HCI_VS_BUILD_INFO;
    c7e6:	4b5c      	ldr	r3, [pc, #368]	; (c958 <hci_cmd_handle+0xafc>)
    c7e8:	aa08      	add	r2, sp, #32
    c7ea:	f103 0628 	add.w	r6, r3, #40	; 0x28
    c7ee:	4615      	mov	r5, r2
    c7f0:	6818      	ldr	r0, [r3, #0]
    c7f2:	6859      	ldr	r1, [r3, #4]
    c7f4:	4614      	mov	r4, r2
    c7f6:	c403      	stmia	r4!, {r0, r1}
    c7f8:	3308      	adds	r3, #8
    c7fa:	42b3      	cmp	r3, r6
    c7fc:	4622      	mov	r2, r4
    c7fe:	d1f7      	bne.n	c7f0 <hci_cmd_handle+0x994>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    c800:	2129      	movs	r1, #41	; 0x29
    c802:	a807      	add	r0, sp, #28
    c804:	f7fe ffb0 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c808:	2300      	movs	r3, #0
    c80a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    c80e:	2228      	movs	r2, #40	; 0x28
    c810:	4629      	mov	r1, r5
    c812:	e5dd      	b.n	c3d0 <hci_cmd_handle+0x574>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    c814:	68a1      	ldr	r1, [r4, #8]
    c816:	2000      	movs	r0, #0
    c818:	f7fe fdfa 	bl	b410 <ll_addr_set>
    c81c:	f7ff bbb9 	b.w	bf92 <hci_cmd_handle+0x136>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    c820:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c824:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    c828:	3201      	adds	r2, #1
    c82a:	d106      	bne.n	c83a <hci_cmd_handle+0x9de>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    c82c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    c830:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    c834:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    c836:	4293      	cmp	r3, r2
    c838:	d020      	beq.n	c87c <hci_cmd_handle+0xa20>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    c83a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c83e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    c842:	07db      	lsls	r3, r3, #31
    c844:	d51a      	bpl.n	c87c <hci_cmd_handle+0xa20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    c846:	2118      	movs	r1, #24
    c848:	a807      	add	r0, sp, #28
    c84a:	f7fe ff8d 	bl	b768 <cmd_complete>
		rp->status = 0x00;
    c84e:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    c850:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    c852:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    c854:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    c856:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    c858:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c85c:	1ca1      	adds	r1, r4, #2
    c85e:	f7fe ff3f 	bl	b6e0 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    c862:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    c866:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    c868:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    c86c:	f063 033f 	orn	r3, r3, #63	; 0x3f
    c870:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    c872:	2210      	movs	r2, #16
    c874:	4631      	mov	r1, r6
    c876:	f104 0008 	add.w	r0, r4, #8
    c87a:	e7b0      	b.n	c7de <hci_cmd_handle+0x982>
	rp = cmd_complete(evt, sizeof(*rp));
    c87c:	2102      	movs	r1, #2
    c87e:	a807      	add	r0, sp, #28
    c880:	f7fe ff72 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c884:	2300      	movs	r3, #0
    c886:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    c888:	7043      	strb	r3, [r0, #1]
    c88a:	f7ff bb62 	b.w	bf52 <hci_cmd_handle+0xf6>
	rp = cmd_complete(evt, sizeof(*rp));
    c88e:	2121      	movs	r1, #33	; 0x21
    c890:	a807      	add	r0, sp, #28
    c892:	f7fe ff69 	bl	b768 <cmd_complete>
	rp->status = 0x00;
    c896:	4603      	mov	r3, r0
    c898:	2200      	movs	r2, #0
    c89a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    c89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    c8a2:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    c8a4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    c8a8:	3101      	adds	r1, #1
    c8aa:	d04b      	beq.n	c944 <hci_cmd_handle+0xae8>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    c8ac:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    c8b0:	3101      	adds	r1, #1
    c8b2:	d047      	beq.n	c944 <hci_cmd_handle+0xae8>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    c8b4:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    c8b8:	3101      	adds	r1, #1
    c8ba:	d043      	beq.n	c944 <hci_cmd_handle+0xae8>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    c8bc:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    c8c0:	3101      	adds	r1, #1
    c8c2:	d03f      	beq.n	c944 <hci_cmd_handle+0xae8>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    c8c4:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    c8c8:	4619      	mov	r1, r3
    c8ca:	f7fe ff09 	bl	b6e0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    c8ce:	1d61      	adds	r1, r4, #5
    c8d0:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    c8d4:	f7fe ff04 	bl	b6e0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    c8d8:	f104 0109 	add.w	r1, r4, #9
    c8dc:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    c8e0:	f7fe fefe 	bl	b6e0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    c8e4:	f104 010d 	add.w	r1, r4, #13
    c8e8:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    c8ec:	f7fe fef8 	bl	b6e0 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    c8f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    c8f4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    c8f8:	3301      	adds	r3, #1
    c8fa:	f104 0311 	add.w	r3, r4, #17
    c8fe:	d027      	beq.n	c950 <hci_cmd_handle+0xaf4>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    c900:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    c904:	3101      	adds	r1, #1
    c906:	d023      	beq.n	c950 <hci_cmd_handle+0xaf4>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    c908:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    c90c:	3101      	adds	r1, #1
    c90e:	d01f      	beq.n	c950 <hci_cmd_handle+0xaf4>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    c910:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    c914:	3101      	adds	r1, #1
    c916:	d01b      	beq.n	c950 <hci_cmd_handle+0xaf4>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    c918:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    c91c:	4619      	mov	r1, r3
    c91e:	f7fe fedf 	bl	b6e0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    c922:	f104 0115 	add.w	r1, r4, #21
    c926:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    c92a:	f7fe fed9 	bl	b6e0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    c92e:	f104 0119 	add.w	r1, r4, #25
    c932:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    c936:	f7fe fed3 	bl	b6e0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    c93a:	f104 011d 	add.w	r1, r4, #29
    c93e:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    c942:	e562      	b.n	c40a <hci_cmd_handle+0x5ae>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    c944:	2210      	movs	r2, #16
    c946:	2100      	movs	r1, #0
    c948:	4618      	mov	r0, r3
    c94a:	f7f3 fe89 	bl	660 <memset>
    c94e:	e7cf      	b.n	c8f0 <hci_cmd_handle+0xa94>
		memset(rp->er, 0x00, sizeof(rp->er));
    c950:	2210      	movs	r2, #16
    c952:	2100      	movs	r1, #0
    c954:	4618      	mov	r0, r3
    c956:	e742      	b.n	c7de <hci_cmd_handle+0x982>
    c958:	0001ae0e 	.word	0x0001ae0e

0000c95c <hci_acl_handle>:
{
    c95c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    c960:	2300      	movs	r3, #0
    c962:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    c964:	8983      	ldrh	r3, [r0, #12]
    c966:	2b03      	cmp	r3, #3
{
    c968:	4606      	mov	r6, r0
    c96a:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    c96c:	d80d      	bhi.n	c98a <hci_acl_handle+0x2e>
		BT_ERR("No HCI ACL header");
    c96e:	4b3a      	ldr	r3, [pc, #232]	; (ca58 <hci_acl_handle+0xfc>)
    c970:	9301      	str	r3, [sp, #4]
    c972:	9300      	str	r3, [sp, #0]
    c974:	4a39      	ldr	r2, [pc, #228]	; (ca5c <hci_acl_handle+0x100>)
    c976:	4b3a      	ldr	r3, [pc, #232]	; (ca60 <hci_acl_handle+0x104>)
    c978:	493a      	ldr	r1, [pc, #232]	; (ca64 <hci_acl_handle+0x108>)
    c97a:	483b      	ldr	r0, [pc, #236]	; (ca68 <hci_acl_handle+0x10c>)
		BT_ERR("Invalid HCI ACL packet length");
    c97c:	f7f4 feb0 	bl	16e0 <printk>
		return -EINVAL;
    c980:	f06f 0015 	mvn.w	r0, #21
}
    c984:	b003      	add	sp, #12
    c986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    c98a:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    c98e:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    c990:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    c992:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    c994:	f00a fa22 	bl	16ddc <net_buf_simple_pull>
	if (buf->len < len) {
    c998:	89b3      	ldrh	r3, [r6, #12]
    c99a:	42bb      	cmp	r3, r7
    c99c:	d207      	bcs.n	c9ae <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    c99e:	4b2e      	ldr	r3, [pc, #184]	; (ca58 <hci_acl_handle+0xfc>)
    c9a0:	9301      	str	r3, [sp, #4]
    c9a2:	9300      	str	r3, [sp, #0]
    c9a4:	4a2d      	ldr	r2, [pc, #180]	; (ca5c <hci_acl_handle+0x100>)
    c9a6:	4b2e      	ldr	r3, [pc, #184]	; (ca60 <hci_acl_handle+0x104>)
    c9a8:	492e      	ldr	r1, [pc, #184]	; (ca64 <hci_acl_handle+0x108>)
    c9aa:	4830      	ldr	r0, [pc, #192]	; (ca6c <hci_acl_handle+0x110>)
    c9ac:	e7e6      	b.n	c97c <hci_acl_handle+0x20>
	node_tx = ll_tx_mem_acquire();
    c9ae:	f007 ff99 	bl	148e4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    c9b2:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    c9b6:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    c9b8:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    c9bc:	bb30      	cbnz	r0, ca0c <hci_acl_handle+0xb0>
		BT_ERR("Tx Buffer Overflow");
    c9be:	4b26      	ldr	r3, [pc, #152]	; (ca58 <hci_acl_handle+0xfc>)
    c9c0:	9301      	str	r3, [sp, #4]
    c9c2:	9300      	str	r3, [sp, #0]
    c9c4:	4a25      	ldr	r2, [pc, #148]	; (ca5c <hci_acl_handle+0x100>)
    c9c6:	4b26      	ldr	r3, [pc, #152]	; (ca60 <hci_acl_handle+0x104>)
    c9c8:	4926      	ldr	r1, [pc, #152]	; (ca64 <hci_acl_handle+0x108>)
    c9ca:	4829      	ldr	r0, [pc, #164]	; (ca70 <hci_acl_handle+0x114>)
    c9cc:	f7f4 fe88 	bl	16e0 <printk>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    c9d0:	4b28      	ldr	r3, [pc, #160]	; (ca74 <hci_acl_handle+0x118>)
    c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    c9d6:	2300      	movs	r3, #0
    c9d8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    c9dc:	4313      	orrs	r3, r2
    c9de:	d012      	beq.n	ca06 <hci_acl_handle+0xaa>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c9e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c9e4:	2001      	movs	r0, #1
    c9e6:	f7f8 f9b9 	bl	4d5c <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    c9ea:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    c9ec:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    c9f0:	211a      	movs	r1, #26
    c9f2:	f7fe fe7e 	bl	b6f2 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    c9f6:	f8d8 0000 	ldr.w	r0, [r8]
    c9fa:	2101      	movs	r1, #1
    c9fc:	3008      	adds	r0, #8
    c9fe:	f00a f9bf 	bl	16d80 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    ca02:	2301      	movs	r3, #1
    ca04:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    ca06:	f06f 0036 	mvn.w	r0, #54	; 0x36
    ca0a:	e7bb      	b.n	c984 <hci_acl_handle+0x28>
    ca0c:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    ca0e:	f1b9 0f00 	cmp.w	r9, #0
    ca12:	d002      	beq.n	ca1a <hci_acl_handle+0xbe>
    ca14:	f1b9 0f02 	cmp.w	r9, #2
    ca18:	d11c      	bne.n	ca54 <hci_acl_handle+0xf8>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ca1a:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ca1c:	f362 0301 	bfi	r3, r2, #0, #2
    ca20:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    ca22:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    ca24:	68b1      	ldr	r1, [r6, #8]
    ca26:	463a      	mov	r2, r7
    ca28:	1de0      	adds	r0, r4, #7
    ca2a:	f7f3 fded 	bl	608 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    ca2e:	4621      	mov	r1, r4
    ca30:	4628      	mov	r0, r5
    ca32:	f007 ff63 	bl	148fc <ll_tx_mem_enqueue>
    ca36:	2800      	cmp	r0, #0
    ca38:	d0a4      	beq.n	c984 <hci_acl_handle+0x28>
		BT_ERR("Invalid Tx Enqueue");
    ca3a:	4b07      	ldr	r3, [pc, #28]	; (ca58 <hci_acl_handle+0xfc>)
    ca3c:	9301      	str	r3, [sp, #4]
    ca3e:	9300      	str	r3, [sp, #0]
    ca40:	4a06      	ldr	r2, [pc, #24]	; (ca5c <hci_acl_handle+0x100>)
    ca42:	4b07      	ldr	r3, [pc, #28]	; (ca60 <hci_acl_handle+0x104>)
    ca44:	4907      	ldr	r1, [pc, #28]	; (ca64 <hci_acl_handle+0x108>)
    ca46:	480c      	ldr	r0, [pc, #48]	; (ca78 <hci_acl_handle+0x11c>)
    ca48:	f7f4 fe4a 	bl	16e0 <printk>
		ll_tx_mem_release(node_tx);
    ca4c:	4620      	mov	r0, r4
    ca4e:	f007 ff4f 	bl	148f0 <ll_tx_mem_release>
    ca52:	e795      	b.n	c980 <hci_acl_handle+0x24>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ca54:	2201      	movs	r2, #1
    ca56:	e7e1      	b.n	ca1c <hci_acl_handle+0xc0>
    ca58:	0001868d 	.word	0x0001868d
    ca5c:	00019a84 	.word	0x00019a84
    ca60:	0001ac57 	.word	0x0001ac57
    ca64:	00019a8b 	.word	0x00019a8b
    ca68:	0001acf5 	.word	0x0001acf5
    ca6c:	0001ad17 	.word	0x0001ad17
    ca70:	0001ad45 	.word	0x0001ad45
    ca74:	200088f8 	.word	0x200088f8
    ca78:	0001ad68 	.word	0x0001ad68

0000ca7c <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    ca7c:	7a03      	ldrb	r3, [r0, #8]
    ca7e:	f003 0303 	and.w	r3, r3, #3
    ca82:	3b01      	subs	r3, #1
    ca84:	2b01      	cmp	r3, #1
{
    ca86:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ca88:	4604      	mov	r4, r0
	handle = node_rx->hdr.handle;
    ca8a:	88c5      	ldrh	r5, [r0, #6]
	switch (pdu_data->ll_id) {
    ca8c:	d81c      	bhi.n	cac8 <hci_acl_encode+0x4c>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    ca8e:	f101 0608 	add.w	r6, r1, #8
    ca92:	4630      	mov	r0, r6
    ca94:	2104      	movs	r1, #4
    ca96:	f00a f973 	bl	16d80 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    ca9a:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    ca9c:	7a61      	ldrb	r1, [r4, #9]
    ca9e:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    caa0:	f003 0303 	and.w	r3, r3, #3
    caa4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    caa6:	bf0c      	ite	eq
    caa8:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    caac:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    cab0:	8005      	strh	r5, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    cab2:	4630      	mov	r0, r6
    cab4:	f00a f964 	bl	16d80 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    cab8:	7a62      	ldrb	r2, [r4, #9]
    caba:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    cabe:	b002      	add	sp, #8
    cac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    cac4:	f7f3 bda0 	b.w	608 <memcpy>
		LL_ASSERT(0);
    cac8:	4b07      	ldr	r3, [pc, #28]	; (cae8 <hci_acl_encode+0x6c>)
    caca:	9301      	str	r3, [sp, #4]
    cacc:	9300      	str	r3, [sp, #0]
    cace:	4a07      	ldr	r2, [pc, #28]	; (caec <hci_acl_encode+0x70>)
    cad0:	4b07      	ldr	r3, [pc, #28]	; (caf0 <hci_acl_encode+0x74>)
    cad2:	4908      	ldr	r1, [pc, #32]	; (caf4 <hci_acl_encode+0x78>)
    cad4:	4808      	ldr	r0, [pc, #32]	; (caf8 <hci_acl_encode+0x7c>)
    cad6:	f7f4 fe03 	bl	16e0 <printk>
    cada:	4040      	eors	r0, r0
    cadc:	f380 8811 	msr	BASEPRI, r0
    cae0:	f04f 0004 	mov.w	r0, #4
    cae4:	df02      	svc	2
    cae6:	bf00      	nop
    cae8:	0001868d 	.word	0x0001868d
    caec:	00019a84 	.word	0x00019a84
    caf0:	0001ace6 	.word	0x0001ace6
    caf4:	00019a8b 	.word	0x00019a8b
    caf8:	000197a5 	.word	0x000197a5

0000cafc <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    cafc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cafe:	4604      	mov	r4, r0
    cb00:	b091      	sub	sp, #68	; 0x44
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cb02:	7923      	ldrb	r3, [r4, #4]
	handle = node_rx->hdr.handle;
    cb04:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cb06:	2b01      	cmp	r3, #1
{
    cb08:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    cb0a:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    cb0e:	f000 816c 	beq.w	cdea <hci_evt_encode+0x2ee>
	switch (node_rx->hdr.type) {
    cb12:	3b02      	subs	r3, #2
    cb14:	2b0a      	cmp	r3, #10
    cb16:	f200 8159 	bhi.w	cdcc <hci_evt_encode+0x2d0>
    cb1a:	e8df f013 	tbh	[pc, r3, lsl #1]
    cb1e:	000b      	.short	0x000b
    cb20:	00170011 	.word	0x00170011
    cb24:	00600019 	.word	0x00600019
    cb28:	0097007a 	.word	0x0097007a
    cb2c:	00d400bc 	.word	0x00d400bc
    cb30:	010400e9 	.word	0x010400e9
		le_advertising_report(pdu_data, b, buf);
    cb34:	460a      	mov	r2, r1
    cb36:	4621      	mov	r1, r4
    cb38:	f7fe fe38 	bl	b7ac <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    cb3c:	b011      	add	sp, #68	; 0x44
    cb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    cb40:	2301      	movs	r3, #1
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    cb42:	462a      	mov	r2, r5
    cb44:	4621      	mov	r1, r4
    cb46:	f7ff f887 	bl	bc58 <le_adv_ext_report>
    cb4a:	e7f7      	b.n	cb3c <hci_evt_encode+0x40>
    cb4c:	2304      	movs	r3, #4
    cb4e:	e7f8      	b.n	cb42 <hci_evt_encode+0x46>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cb50:	4bb3      	ldr	r3, [pc, #716]	; (ce20 <hci_evt_encode+0x324>)
    cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb56:	2200      	movs	r2, #0
    cb58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cb5c:	4313      	orrs	r3, r2
    cb5e:	f104 060a 	add.w	r6, r4, #10
    cb62:	d007      	beq.n	cb74 <hci_evt_encode+0x78>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    cb64:	4baf      	ldr	r3, [pc, #700]	; (ce24 <hci_evt_encode+0x328>)
    cb66:	e9d3 2300 	ldrd	r2, r3, [r3]
    cb6a:	2300      	movs	r3, #0
    cb6c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cb70:	4313      	orrs	r3, r2
    cb72:	d123      	bne.n	cbbc <hci_evt_encode+0xc0>
		addr.type = adv->tx_addr;
    cb74:	7a23      	ldrb	r3, [r4, #8]
    cb76:	ad10      	add	r5, sp, #64	; 0x40
    cb78:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    cb7c:	2206      	movs	r2, #6
    cb7e:	4631      	mov	r1, r6
    cb80:	f10d 001d 	add.w	r0, sp, #29
		addr.type = adv->tx_addr;
    cb84:	f805 3d24 	strb.w	r3, [r5, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    cb88:	f7f3 fd3e 	bl	608 <memcpy>
			  offsetof(struct pdu_adv, payload) + adv->len];
    cb8c:	7a63      	ldrb	r3, [r4, #9]
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cb8e:	441c      	add	r4, r3
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    cb90:	ae09      	add	r6, sp, #36	; 0x24
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cb92:	7aa4      	ldrb	r4, [r4, #10]
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    cb94:	4631      	mov	r1, r6
    cb96:	4628      	mov	r0, r5
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cb98:	4264      	negs	r4, r4
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    cb9a:	f7ff f821 	bl	bbe0 <bt_addr_le_to_str.constprop.66>
		rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    cb9e:	b264      	sxtb	r4, r4
		BT_WARN("handle: %d, addr: %s, rssi: %d dB.",
    cba0:	4ba1      	ldr	r3, [pc, #644]	; (ce28 <hci_evt_encode+0x32c>)
    cba2:	9304      	str	r3, [sp, #16]
    cba4:	2200      	movs	r2, #0
    cba6:	9201      	str	r2, [sp, #4]
    cba8:	9300      	str	r3, [sp, #0]
    cbaa:	9403      	str	r4, [sp, #12]
    cbac:	9602      	str	r6, [sp, #8]
    cbae:	4b9f      	ldr	r3, [pc, #636]	; (ce2c <hci_evt_encode+0x330>)
    cbb0:	4a9f      	ldr	r2, [pc, #636]	; (ce30 <hci_evt_encode+0x334>)
    cbb2:	49a0      	ldr	r1, [pc, #640]	; (ce34 <hci_evt_encode+0x338>)
    cbb4:	48a0      	ldr	r0, [pc, #640]	; (ce38 <hci_evt_encode+0x33c>)
    cbb6:	f7f4 fd93 	bl	16e0 <printk>
    cbba:	e7bf      	b.n	cb3c <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    cbbc:	2208      	movs	r2, #8
    cbbe:	2113      	movs	r1, #19
    cbc0:	4628      	mov	r0, r5
    cbc2:	f7fe fdbb 	bl	b73c <meta_evt>
	sep->handle = 0;
    cbc6:	2300      	movs	r3, #0
    cbc8:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    cbca:	7a23      	ldrb	r3, [r4, #8]
    cbcc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    cbd0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    cbd2:	2206      	movs	r2, #6
    cbd4:	4631      	mov	r1, r6
    cbd6:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    cbd8:	f7f3 fd16 	bl	608 <memcpy>
    cbdc:	e7ae      	b.n	cb3c <hci_evt_encode+0x40>
			le_conn_complete(cc->status, cc, handle, buf);
    cbde:	7ae7      	ldrb	r7, [r4, #11]
	if (!status) {
    cbe0:	b93f      	cbnz	r7, cbf2 <hci_evt_encode+0xf6>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    cbe2:	f104 0314 	add.w	r3, r4, #20
    cbe6:	22ff      	movs	r2, #255	; 0xff
    cbe8:	f104 010e 	add.w	r1, r4, #14
    cbec:	7b60      	ldrb	r0, [r4, #13]
    cbee:	f009 f827 	bl	15c40 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cbf2:	4b8b      	ldr	r3, [pc, #556]	; (ce20 <hci_evt_encode+0x324>)
    cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
    cbf8:	2200      	movs	r2, #0
    cbfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cbfe:	4313      	orrs	r3, r2
    cc00:	d09c      	beq.n	cb3c <hci_evt_encode+0x40>
    cc02:	462b      	mov	r3, r5
    cc04:	4632      	mov	r2, r6
    cc06:	f104 010b 	add.w	r1, r4, #11
    cc0a:	4638      	mov	r0, r7
    cc0c:	f7fe ff52 	bl	bab4 <le_conn_complete.part.39>
    cc10:	e794      	b.n	cb3c <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    cc12:	4b83      	ldr	r3, [pc, #524]	; (ce20 <hci_evt_encode+0x324>)
    cc14:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc18:	2300      	movs	r3, #0
    cc1a:	f002 0210 	and.w	r2, r2, #16
    cc1e:	4313      	orrs	r3, r2
    cc20:	d08c      	beq.n	cb3c <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    cc22:	2204      	movs	r2, #4
    cc24:	2105      	movs	r1, #5
    cc26:	4628      	mov	r0, r5
    cc28:	f7fe fd63 	bl	b6f2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cc2c:	2104      	movs	r1, #4
    cc2e:	f105 0008 	add.w	r0, r5, #8
    cc32:	f00a f8a5 	bl	16d80 <net_buf_simple_add>
	ep->status = 0x00;
    cc36:	2300      	movs	r3, #0
	conn_count--;
    cc38:	4a80      	ldr	r2, [pc, #512]	; (ce3c <hci_evt_encode+0x340>)
	ep->status = 0x00;
    cc3a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cc3c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    cc40:	7a23      	ldrb	r3, [r4, #8]
    cc42:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    cc44:	6813      	ldr	r3, [r2, #0]
    cc46:	3b01      	subs	r3, #1
    cc48:	6013      	str	r3, [r2, #0]
    cc4a:	e777      	b.n	cb3c <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cc4c:	4b74      	ldr	r3, [pc, #464]	; (ce20 <hci_evt_encode+0x324>)
    cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc52:	2200      	movs	r2, #0
    cc54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cc58:	4313      	orrs	r3, r2
    cc5a:	f43f af6f 	beq.w	cb3c <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    cc5e:	4b71      	ldr	r3, [pc, #452]	; (ce24 <hci_evt_encode+0x328>)
    cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc64:	2300      	movs	r3, #0
    cc66:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cc6a:	4313      	orrs	r3, r2
    cc6c:	f43f af66 	beq.w	cb3c <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    cc70:	2209      	movs	r2, #9
    cc72:	2103      	movs	r1, #3
    cc74:	4628      	mov	r0, r5
    cc76:	f7fe fd61 	bl	b73c <meta_evt>
	sep->status = radio_cu->status;
    cc7a:	7ae3      	ldrb	r3, [r4, #11]
    cc7c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    cc7e:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    cc80:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    cc84:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    cc88:	89e3      	ldrh	r3, [r4, #14]
    cc8a:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    cc8e:	8a23      	ldrh	r3, [r4, #16]
    cc90:	f8a0 3007 	strh.w	r3, [r0, #7]
    cc94:	e752      	b.n	cb3c <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    cc96:	4b62      	ldr	r3, [pc, #392]	; (ce20 <hci_evt_encode+0x324>)
    cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc9c:	2200      	movs	r2, #0
    cc9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    cca2:	4313      	orrs	r3, r2
    cca4:	f43f af4a 	beq.w	cb3c <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    cca8:	2203      	movs	r2, #3
    ccaa:	2130      	movs	r1, #48	; 0x30
    ccac:	4628      	mov	r0, r5
    ccae:	f7fe fd20 	bl	b6f2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ccb2:	2103      	movs	r1, #3
    ccb4:	f105 0008 	add.w	r0, r5, #8
    ccb8:	f00a f862 	bl	16d80 <net_buf_simple_add>
	ep->status = 0x00;
    ccbc:	2300      	movs	r3, #0
    ccbe:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ccc0:	f8a0 6001 	strh.w	r6, [r0, #1]
    ccc4:	e73a      	b.n	cb3c <hci_evt_encode+0x40>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    ccc6:	4b5e      	ldr	r3, [pc, #376]	; (ce40 <hci_evt_encode+0x344>)
    ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    cccc:	2300      	movs	r3, #0
    ccce:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    ccd2:	4313      	orrs	r3, r2
    ccd4:	f43f af32 	beq.w	cb3c <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    ccd8:	2202      	movs	r2, #2
    ccda:	2157      	movs	r1, #87	; 0x57
    ccdc:	4628      	mov	r0, r5
    ccde:	f7fe fd08 	bl	b6f2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cce2:	2102      	movs	r1, #2
    cce4:	f105 0008 	add.w	r0, r5, #8
    cce8:	f00a f84a 	bl	16d80 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    ccec:	8006      	strh	r6, [r0, #0]
    ccee:	e725      	b.n	cb3c <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ccf0:	4b4b      	ldr	r3, [pc, #300]	; (ce20 <hci_evt_encode+0x324>)
    ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccf6:	2200      	movs	r2, #0
    ccf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ccfc:	4313      	orrs	r3, r2
    ccfe:	f43f af1d 	beq.w	cb3c <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    cd02:	4b48      	ldr	r3, [pc, #288]	; (ce24 <hci_evt_encode+0x328>)
    cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd08:	2300      	movs	r3, #0
    cd0a:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd0e:	4313      	orrs	r3, r2
    cd10:	f43f af14 	beq.w	cb3c <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    cd14:	2203      	movs	r2, #3
    cd16:	2114      	movs	r1, #20
    cd18:	4628      	mov	r0, r5
    cd1a:	f7fe fd0f 	bl	b73c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    cd1e:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    cd20:	7ae3      	ldrb	r3, [r4, #11]
    cd22:	7083      	strb	r3, [r0, #2]
    cd24:	e70a      	b.n	cb3c <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd26:	4b3e      	ldr	r3, [pc, #248]	; (ce20 <hci_evt_encode+0x324>)
    cd28:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd2c:	2200      	movs	r2, #0
    cd2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cd32:	4313      	orrs	r3, r2
    cd34:	d007      	beq.n	cd46 <hci_evt_encode+0x24a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    cd36:	4b3b      	ldr	r3, [pc, #236]	; (ce24 <hci_evt_encode+0x328>)
    cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
    cd3c:	2300      	movs	r3, #0
    cd3e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cd42:	4313      	orrs	r3, r2
    cd44:	d122      	bne.n	cd8c <hci_evt_encode+0x290>
    cd46:	7b22      	ldrb	r2, [r4, #12]
    cd48:	7b61      	ldrb	r1, [r4, #13]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    cd4a:	483e      	ldr	r0, [pc, #248]	; (ce44 <hci_evt_encode+0x348>)
    cd4c:	2a00      	cmp	r2, #0
    cd4e:	fa92 f3a2 	rbit	r3, r2
    cd52:	fab3 f383 	clz	r3, r3
    cd56:	fa91 f2a1 	rbit	r2, r1
    cd5a:	bf08      	it	eq
    cd5c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    cd60:	2900      	cmp	r1, #0
    cd62:	fab2 f282 	clz	r2, r2
    cd66:	bf08      	it	eq
    cd68:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    cd6c:	492e      	ldr	r1, [pc, #184]	; (ce28 <hci_evt_encode+0x32c>)
    cd6e:	9105      	str	r1, [sp, #20]
    cd70:	3301      	adds	r3, #1
    cd72:	3201      	adds	r2, #1
    cd74:	9204      	str	r2, [sp, #16]
    cd76:	9303      	str	r3, [sp, #12]
    cd78:	7ae3      	ldrb	r3, [r4, #11]
    cd7a:	9302      	str	r3, [sp, #8]
    cd7c:	e88d 0042 	stmia.w	sp, {r1, r6}
    cd80:	4b31      	ldr	r3, [pc, #196]	; (ce48 <hci_evt_encode+0x34c>)
    cd82:	4a2b      	ldr	r2, [pc, #172]	; (ce30 <hci_evt_encode+0x334>)
    cd84:	492b      	ldr	r1, [pc, #172]	; (ce34 <hci_evt_encode+0x338>)
    cd86:	f7f4 fcab 	bl	16e0 <printk>
    cd8a:	e6d7      	b.n	cb3c <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    cd8c:	2205      	movs	r2, #5
    cd8e:	210c      	movs	r1, #12
    cd90:	4628      	mov	r0, r5
    cd92:	f7fe fcd3 	bl	b73c <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    cd96:	7ae3      	ldrb	r3, [r4, #11]
    cd98:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    cd9a:	f8a0 6001 	strh.w	r6, [r0, #1]
    cd9e:	7b22      	ldrb	r2, [r4, #12]
    cda0:	2a00      	cmp	r2, #0
    cda2:	fa92 f3a2 	rbit	r3, r2
    cda6:	fab3 f383 	clz	r3, r3
    cdaa:	bf08      	it	eq
    cdac:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    cdb0:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    cdb2:	70c3      	strb	r3, [r0, #3]
    cdb4:	7b62      	ldrb	r2, [r4, #13]
    cdb6:	fa92 f3a2 	rbit	r3, r2
    cdba:	2a00      	cmp	r2, #0
    cdbc:	fab3 f383 	clz	r3, r3
    cdc0:	bf08      	it	eq
    cdc2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    cdc6:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    cdc8:	7103      	strb	r3, [r0, #4]
    cdca:	e6b7      	b.n	cb3c <hci_evt_encode+0x40>
		LL_ASSERT(0);
    cdcc:	4b16      	ldr	r3, [pc, #88]	; (ce28 <hci_evt_encode+0x32c>)
    cdce:	9301      	str	r3, [sp, #4]
    cdd0:	9300      	str	r3, [sp, #0]
    cdd2:	4b1e      	ldr	r3, [pc, #120]	; (ce4c <hci_evt_encode+0x350>)
		LL_ASSERT(0);
    cdd4:	4a1e      	ldr	r2, [pc, #120]	; (ce50 <hci_evt_encode+0x354>)
    cdd6:	4917      	ldr	r1, [pc, #92]	; (ce34 <hci_evt_encode+0x338>)
    cdd8:	481e      	ldr	r0, [pc, #120]	; (ce54 <hci_evt_encode+0x358>)
    cdda:	f7f4 fc81 	bl	16e0 <printk>
    cdde:	4040      	eors	r0, r0
    cde0:	f380 8811 	msr	BASEPRI, r0
    cde4:	f04f 0004 	mov.w	r0, #4
    cde8:	df02      	svc	2
	switch (pdu_data->llctrl.opcode) {
    cdea:	7ae3      	ldrb	r3, [r4, #11]
    cdec:	3b03      	subs	r3, #3
    cdee:	2b12      	cmp	r3, #18
    cdf0:	f200 80e2 	bhi.w	cfb8 <hci_evt_encode+0x4bc>
    cdf4:	e8df f013 	tbh	[pc, r3, lsl #1]
    cdf8:	00e00030 	.word	0x00e00030
    cdfc:	005500e0 	.word	0x005500e0
    ce00:	00e000cd 	.word	0x00e000cd
    ce04:	00e0005b 	.word	0x00e0005b
    ce08:	006200e0 	.word	0x006200e0
    ce0c:	00e00081 	.word	0x00e00081
    ce10:	00e00085 	.word	0x00e00085
    ce14:	00e000e0 	.word	0x00e000e0
    ce18:	00ad00e0 	.word	0x00ad00e0
    ce1c:	00ad      	.short	0x00ad
    ce1e:	bf00      	nop
    ce20:	200088f8 	.word	0x200088f8
    ce24:	20008900 	.word	0x20008900
    ce28:	0001868d 	.word	0x0001868d
    ce2c:	0001ac8e 	.word	0x0001ac8e
    ce30:	00019806 	.word	0x00019806
    ce34:	00019a8b 	.word	0x00019a8b
    ce38:	0001ae36 	.word	0x0001ae36
    ce3c:	20000b00 	.word	0x20000b00
    ce40:	20000b90 	.word	0x20000b90
    ce44:	0001ae69 	.word	0x0001ae69
    ce48:	0001aca3 	.word	0x0001aca3
    ce4c:	0001acb7 	.word	0x0001acb7
    ce50:	00019a84 	.word	0x00019a84
    ce54:	000197a5 	.word	0x000197a5
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ce58:	4b5a      	ldr	r3, [pc, #360]	; (cfc4 <hci_evt_encode+0x4c8>)
    ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce5e:	2200      	movs	r2, #0
    ce60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ce64:	4313      	orrs	r3, r2
    ce66:	f43f ae69 	beq.w	cb3c <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    ce6a:	4b57      	ldr	r3, [pc, #348]	; (cfc8 <hci_evt_encode+0x4cc>)
    ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ce70:	2300      	movs	r3, #0
    ce72:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ce76:	4313      	orrs	r3, r2
    ce78:	f43f ae60 	beq.w	cb3c <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    ce7c:	220c      	movs	r2, #12
    ce7e:	2105      	movs	r1, #5
    ce80:	4628      	mov	r0, r5
    ce82:	f7fe fc5b 	bl	b73c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    ce86:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    ce88:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    ce8a:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    ce8e:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    ce92:	f7f3 fbb9 	bl	608 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    ce96:	2202      	movs	r2, #2
    ce98:	f104 0114 	add.w	r1, r4, #20
    ce9c:	f105 000a 	add.w	r0, r5, #10
    cea0:	e69a      	b.n	cbd8 <hci_evt_encode+0xdc>
		encrypt_change(0x00, handle, buf);
    cea2:	460a      	mov	r2, r1
    cea4:	2000      	movs	r0, #0
    cea6:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    cea8:	f7fe fdb6 	bl	ba18 <encrypt_change>
    ceac:	e646      	b.n	cb3c <hci_evt_encode+0x40>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    ceae:	460b      	mov	r3, r1
    ceb0:	4632      	mov	r2, r6
    ceb2:	4601      	mov	r1, r0
    ceb4:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    ceb6:	f7fe fdcf 	bl	ba58 <le_remote_feat_complete>
    ceba:	e63f      	b.n	cb3c <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    cebc:	4b41      	ldr	r3, [pc, #260]	; (cfc4 <hci_evt_encode+0x4c8>)
    cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
    cec2:	2300      	movs	r3, #0
    cec4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    cec8:	4313      	orrs	r3, r2
    ceca:	f43f ae37 	beq.w	cb3c <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    cece:	2208      	movs	r2, #8
    ced0:	210c      	movs	r1, #12
    ced2:	4628      	mov	r0, r5
    ced4:	f7fe fc0d 	bl	b6f2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ced8:	2108      	movs	r1, #8
    ceda:	1868      	adds	r0, r5, r1
    cedc:	f009 ff50 	bl	16d80 <net_buf_simple_add>
	ep->status = 0x00;
    cee0:	2300      	movs	r3, #0
    cee2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cee4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    cee8:	7b23      	ldrb	r3, [r4, #12]
    ceea:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    ceec:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    cef0:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    cef2:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    cef6:	80c3      	strh	r3, [r0, #6]
    cef8:	e620      	b.n	cb3c <hci_evt_encode+0x40>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    cefa:	460a      	mov	r2, r1
    cefc:	7b20      	ldrb	r0, [r4, #12]
    cefe:	4631      	mov	r1, r6
    cf00:	e7d2      	b.n	cea8 <hci_evt_encode+0x3ac>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf02:	4b30      	ldr	r3, [pc, #192]	; (cfc4 <hci_evt_encode+0x4c8>)
    cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf08:	2200      	movs	r2, #0
    cf0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cf0e:	4313      	orrs	r3, r2
    cf10:	d007      	beq.n	cf22 <hci_evt_encode+0x426>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    cf12:	4b2d      	ldr	r3, [pc, #180]	; (cfc8 <hci_evt_encode+0x4cc>)
    cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf18:	2300      	movs	r3, #0
    cf1a:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf1e:	4313      	orrs	r3, r2
    cf20:	d108      	bne.n	cf34 <hci_evt_encode+0x438>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    cf22:	2300      	movs	r3, #0
    cf24:	9301      	str	r3, [sp, #4]
    cf26:	9300      	str	r3, [sp, #0]
    cf28:	221a      	movs	r2, #26
    cf2a:	2102      	movs	r1, #2
    cf2c:	4630      	mov	r0, r6
    cf2e:	f007 fa31 	bl	14394 <ll_conn_update>
    cf32:	e603      	b.n	cb3c <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    cf34:	220a      	movs	r2, #10
    cf36:	2106      	movs	r1, #6
    cf38:	4628      	mov	r0, r5
    cf3a:	f7fe fbff 	bl	b73c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    cf3e:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    cf40:	89a3      	ldrh	r3, [r4, #12]
    cf42:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    cf44:	89e3      	ldrh	r3, [r4, #14]
    cf46:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    cf48:	8a23      	ldrh	r3, [r4, #16]
    cf4a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    cf4c:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    cf4e:	8103      	strh	r3, [r0, #8]
    cf50:	e5f4      	b.n	cb3c <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf52:	4b1c      	ldr	r3, [pc, #112]	; (cfc4 <hci_evt_encode+0x4c8>)
    cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf58:	2200      	movs	r2, #0
    cf5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cf5e:	4313      	orrs	r3, r2
    cf60:	f43f adec 	beq.w	cb3c <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    cf64:	4b18      	ldr	r3, [pc, #96]	; (cfc8 <hci_evt_encode+0x4cc>)
    cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
    cf6a:	2300      	movs	r3, #0
    cf6c:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cf70:	4313      	orrs	r3, r2
    cf72:	f43f ade3 	beq.w	cb3c <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    cf76:	220a      	movs	r2, #10
    cf78:	2107      	movs	r1, #7
    cf7a:	4628      	mov	r0, r5
    cf7c:	f7fe fbde 	bl	b73c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    cf80:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    cf82:	8a23      	ldrh	r3, [r4, #16]
    cf84:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    cf86:	8a63      	ldrh	r3, [r4, #18]
    cf88:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    cf8a:	89a3      	ldrh	r3, [r4, #12]
    cf8c:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    cf8e:	89e3      	ldrh	r3, [r4, #14]
    cf90:	e7dd      	b.n	cf4e <hci_evt_encode+0x452>
    cf92:	7b22      	ldrb	r2, [r4, #12]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    cf94:	2a0e      	cmp	r2, #14
    cf96:	d104      	bne.n	cfa2 <hci_evt_encode+0x4a6>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    cf98:	460b      	mov	r3, r1
    cf9a:	4632      	mov	r2, r6
    cf9c:	2100      	movs	r1, #0
    cf9e:	201a      	movs	r0, #26
    cfa0:	e789      	b.n	ceb6 <hci_evt_encode+0x3ba>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    cfa2:	4b0a      	ldr	r3, [pc, #40]	; (cfcc <hci_evt_encode+0x4d0>)
    cfa4:	9302      	str	r3, [sp, #8]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    cfa6:	9201      	str	r2, [sp, #4]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    cfa8:	9300      	str	r3, [sp, #0]
    cfaa:	4a09      	ldr	r2, [pc, #36]	; (cfd0 <hci_evt_encode+0x4d4>)
    cfac:	4b09      	ldr	r3, [pc, #36]	; (cfd4 <hci_evt_encode+0x4d8>)
    cfae:	490a      	ldr	r1, [pc, #40]	; (cfd8 <hci_evt_encode+0x4dc>)
    cfb0:	480a      	ldr	r0, [pc, #40]	; (cfdc <hci_evt_encode+0x4e0>)
    cfb2:	f7f4 fb95 	bl	16e0 <printk>
    cfb6:	e5c1      	b.n	cb3c <hci_evt_encode+0x40>
		LL_ASSERT(0);
    cfb8:	4b04      	ldr	r3, [pc, #16]	; (cfcc <hci_evt_encode+0x4d0>)
    cfba:	9301      	str	r3, [sp, #4]
    cfbc:	9300      	str	r3, [sp, #0]
    cfbe:	4b08      	ldr	r3, [pc, #32]	; (cfe0 <hci_evt_encode+0x4e4>)
    cfc0:	e708      	b.n	cdd4 <hci_evt_encode+0x2d8>
    cfc2:	bf00      	nop
    cfc4:	200088f8 	.word	0x200088f8
    cfc8:	20008900 	.word	0x20008900
    cfcc:	0001868d 	.word	0x0001868d
    cfd0:	00019806 	.word	0x00019806
    cfd4:	0001acc6 	.word	0x0001acc6
    cfd8:	00019a8b 	.word	0x00019a8b
    cfdc:	0001aea5 	.word	0x0001aea5
    cfe0:	0001acd5 	.word	0x0001acd5

0000cfe4 <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    cfe4:	b570      	push	{r4, r5, r6, lr}
    cfe6:	4606      	mov	r6, r0
    cfe8:	460d      	mov	r5, r1
    cfea:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    cfec:	2113      	movs	r1, #19
    cfee:	2205      	movs	r2, #5
    cff0:	f7fe fb7f 	bl	b6f2 <evt_create>

	ep = net_buf_add(buf, len);
    cff4:	2105      	movs	r1, #5
    cff6:	f106 0008 	add.w	r0, r6, #8
    cffa:	f009 fec1 	bl	16d80 <net_buf_simple_add>
	ep->num_handles = num_handles;
    cffe:	2301      	movs	r3, #1
    d000:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    d002:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    d006:	f8a0 4003 	strh.w	r4, [r0, #3]
    d00a:	bd70      	pop	{r4, r5, r6, pc}

0000d00c <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d00c:	7903      	ldrb	r3, [r0, #4]
    d00e:	2b01      	cmp	r3, #1
    d010:	d006      	beq.n	d020 <hci_get_class+0x14>
    d012:	3b02      	subs	r3, #2
    d014:	b2db      	uxtb	r3, r3
    d016:	2b0a      	cmp	r3, #10
    d018:	d80a      	bhi.n	d030 <hci_get_class+0x24>
    d01a:	4a07      	ldr	r2, [pc, #28]	; (d038 <hci_get_class+0x2c>)
    d01c:	56d0      	ldrsb	r0, [r2, r3]
    d01e:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    d020:	7a03      	ldrb	r3, [r0, #8]
    d022:	f003 0303 	and.w	r3, r3, #3
    d026:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    d028:	bf0c      	ite	eq
    d02a:	2002      	moveq	r0, #2
    d02c:	2003      	movne	r0, #3
    d02e:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    d034:	4770      	bx	lr
    d036:	bf00      	nop
    d038:	0001ac3d 	.word	0x0001ac3d

0000d03c <hci_init>:
	dup_count = -1;
    d03c:	4b0a      	ldr	r3, [pc, #40]	; (d068 <hci_init+0x2c>)
    d03e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d042:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d044:	4b09      	ldr	r3, [pc, #36]	; (d06c <hci_init+0x30>)
    d046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d04a:	f641 71ff 	movw	r1, #8191	; 0x1fff
    d04e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d052:	4b07      	ldr	r3, [pc, #28]	; (d070 <hci_init+0x34>)
    d054:	2000      	movs	r0, #0
    d056:	2100      	movs	r1, #0
    d058:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d05c:	4b05      	ldr	r3, [pc, #20]	; (d074 <hci_init+0x38>)
    d05e:	201f      	movs	r0, #31
    d060:	2100      	movs	r1, #0
    d062:	e9c3 0100 	strd	r0, r1, [r3]
    d066:	4770      	bx	lr
    d068:	20000b04 	.word	0x20000b04
    d06c:	200088f8 	.word	0x200088f8
    d070:	20000b90 	.word	0x20000b90
    d074:	20008900 	.word	0x20008900

0000d078 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    d078:	bf20      	wfe
	__SEV();
    d07a:	bf40      	sev
	__WFE();
    d07c:	bf20      	wfe
    d07e:	4770      	bx	lr

0000d080 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    d080:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    d082:	4b0d      	ldr	r3, [pc, #52]	; (d0b8 <pdu_len_cmp+0x38>)
{
    d084:	b089      	sub	sp, #36	; 0x24
    d086:	4605      	mov	r5, r0
    d088:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    d08a:	aa01      	add	r2, sp, #4
    d08c:	f103 0718 	add.w	r7, r3, #24
    d090:	6818      	ldr	r0, [r3, #0]
    d092:	6859      	ldr	r1, [r3, #4]
    d094:	4614      	mov	r4, r2
    d096:	c403      	stmia	r4!, {r0, r1}
    d098:	3308      	adds	r3, #8
    d09a:	42bb      	cmp	r3, r7
    d09c:	4622      	mov	r2, r4
    d09e:	d1f7      	bne.n	d090 <pdu_len_cmp+0x10>
    d0a0:	881b      	ldrh	r3, [r3, #0]
    d0a2:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    d0a4:	ab08      	add	r3, sp, #32
    d0a6:	441d      	add	r5, r3
    d0a8:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    d0ac:	1b83      	subs	r3, r0, r6
    d0ae:	4258      	negs	r0, r3
    d0b0:	4158      	adcs	r0, r3
    d0b2:	b009      	add	sp, #36	; 0x24
    d0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0b6:	bf00      	nop
    d0b8:	000183cd 	.word	0x000183cd

0000d0bc <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    d0bc:	6008      	str	r0, [r1, #0]
    d0be:	4770      	bx	lr

0000d0c0 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    d0c0:	b918      	cbnz	r0, d0ca <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    d0c2:	680b      	ldr	r3, [r1, #0]
    d0c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d0c8:	600b      	str	r3, [r1, #0]
    d0ca:	4770      	bx	lr

0000d0cc <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    d0cc:	b918      	cbnz	r0, d0d6 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    d0ce:	680b      	ldr	r3, [r1, #0]
    d0d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d0d4:	600b      	str	r3, [r1, #0]
    d0d6:	4770      	bx	lr

0000d0d8 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    d0d8:	b570      	push	{r4, r5, r6, lr}
    d0da:	1d03      	adds	r3, r0, #4
    d0dc:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    d0de:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    d0e0:	429d      	cmp	r5, r3
    d0e2:	d101      	bne.n	d0e8 <chan_sel_remap+0x10>
    d0e4:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    d0e6:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    d0e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    d0ec:	2200      	movs	r2, #0
    d0ee:	18a0      	adds	r0, r4, r2
    d0f0:	2a08      	cmp	r2, #8
    d0f2:	b2c0      	uxtb	r0, r0
    d0f4:	d101      	bne.n	d0fa <chan_sel_remap+0x22>
    d0f6:	4604      	mov	r4, r0
    d0f8:	e7f2      	b.n	d0e0 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    d0fa:	f016 0f01 	tst.w	r6, #1
    d0fe:	d003      	beq.n	d108 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    d100:	2900      	cmp	r1, #0
    d102:	d0f0      	beq.n	d0e6 <chan_sel_remap+0xe>
				chan_index--;
    d104:	3901      	subs	r1, #1
    d106:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    d108:	0876      	lsrs	r6, r6, #1
    d10a:	3201      	adds	r2, #1
    d10c:	e7ef      	b.n	d0ee <chan_sel_remap+0x16>
	...

0000d110 <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    d110:	4b09      	ldr	r3, [pc, #36]	; (d138 <packet_rx_acquired_count_get+0x28>)
    d112:	f893 0d2a 	ldrb.w	r0, [r3, #3370]	; 0xd2a
	    _radio.packet_rx_last) {
    d116:	f893 2d29 	ldrb.w	r2, [r3, #3369]	; 0xd29
	if (_radio.packet_rx_acquire >=
    d11a:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    d11c:	bf3b      	ittet	cc
    d11e:	f893 2d29 	ldrbcc.w	r2, [r3, #3369]	; 0xd29
    d122:	f893 3d28 	ldrbcc.w	r3, [r3, #3368]	; 0xd28
			_radio.packet_rx_last);
    d126:	f893 3d29 	ldrbcs.w	r3, [r3, #3369]	; 0xd29
			_radio.packet_rx_last +
    d12a:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    d12c:	bf2c      	ite	cs
    d12e:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    d130:	1a80      	subcc	r0, r0, r2
    d132:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    d134:	4770      	bx	lr
    d136:	bf00      	nop
    d138:	20000b98 	.word	0x20000b98

0000d13c <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    d13c:	b508      	push	{r3, lr}
    d13e:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    d140:	f7ff ffe6 	bl	d110 <packet_rx_acquired_count_get>
    d144:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    d146:	bf21      	itttt	cs
    d148:	4b04      	ldrcs	r3, [pc, #16]	; (d15c <packet_rx_reserve_get+0x20>)
    d14a:	f893 2d29 	ldrbcs.w	r2, [r3, #3369]	; 0xd29
    d14e:	f8d3 3d24 	ldrcs.w	r3, [r3, #3364]	; 0xd24
    d152:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    d156:	bf38      	it	cc
    d158:	2000      	movcc	r0, #0
}
    d15a:	bd08      	pop	{r3, pc}
    d15c:	20000b98 	.word	0x20000b98

0000d160 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    d160:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    d162:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    d166:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    d16a:	429c      	cmp	r4, r3
    d16c:	d15a      	bne.n	d224 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    d16e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    d172:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    d176:	428b      	cmp	r3, r1
    d178:	d154      	bne.n	d224 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    d17a:	f990 301d 	ldrsb.w	r3, [r0, #29]
    d17e:	2b00      	cmp	r3, #0
    d180:	db25      	blt.n	d1ce <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    d182:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    d184:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    d186:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    d18a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    d18c:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    d190:	4351      	muls	r1, r2
					      conn->supervision_reload *
    d192:	227d      	movs	r2, #125	; 0x7d
    d194:	434a      	muls	r2, r1
					      125 / 1000;
    d196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d19a:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    d19e:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d1a2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    d1a6:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    d1a8:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    d1ac:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    d1ae:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    d1b0:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    d1b4:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    d1b6:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    d1ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    d1be:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    d1c2:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    d1c6:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    d1ca:	4618      	mov	r0, r3
    d1cc:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    d1ce:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    d1d2:	06dc      	lsls	r4, r3, #27
    d1d4:	d428      	bmi.n	d228 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    d1d6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    d1da:	069a      	lsls	r2, r3, #26
    d1dc:	d503      	bpl.n	d1e6 <conn_update_req+0x86>
		    (conn->llcp_features &
    d1de:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    d1e2:	079b      	lsls	r3, r3, #30
    d1e4:	d520      	bpl.n	d228 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    d1e6:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    d1e8:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    d1ea:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    d1ee:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    d1f0:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    d1f4:	4354      	muls	r4, r2
						conn->supervision_reload *
    d1f6:	227d      	movs	r2, #125	; 0x7d
    d1f8:	4362      	muls	r2, r4
						125 / 1000;
    d1fa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    d1fe:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    d202:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    d206:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    d20a:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    d20c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    d210:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    d214:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    d216:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    d21a:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    d21e:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    d222:	e7d2      	b.n	d1ca <conn_update_req+0x6a>
		return 1;
    d224:	2001      	movs	r0, #1
    d226:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    d228:	2002      	movs	r0, #2
}
    d22a:	bd30      	pop	{r4, r5, pc}

0000d22c <packet_rx_allocate>:
{
    d22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    d230:	4d22      	ldr	r5, [pc, #136]	; (d2bc <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    d232:	f895 4d2a 	ldrb.w	r4, [r5, #3370]	; 0xd2a
    d236:	f895 9d3c 	ldrb.w	r9, [r5, #3388]	; 0xd3c
	if (acquire == _radio.packet_rx_count) {
    d23a:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
	acquire = _radio.packet_rx_acquire + 1;
    d23e:	3401      	adds	r4, #1
    d240:	4581      	cmp	r9, r0
    d242:	b2e4      	uxtb	r4, r4
    d244:	bf28      	it	cs
    d246:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    d248:	f505 6753 	add.w	r7, r5, #3376	; 0xd30
		acquire = 0;
    d24c:	42a3      	cmp	r3, r4
    d24e:	bf08      	it	eq
    d250:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    d252:	f605 5818 	addw	r8, r5, #3352	; 0xd18
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    d256:	f1b9 0f00 	cmp.w	r9, #0
    d25a:	d003      	beq.n	d264 <packet_rx_allocate+0x38>
    d25c:	f895 3d29 	ldrb.w	r3, [r5, #3369]	; 0xd29
    d260:	429c      	cmp	r4, r3
    d262:	d101      	bne.n	d268 <packet_rx_allocate+0x3c>
    d264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    d268:	4638      	mov	r0, r7
    d26a:	f7fd f8ba 	bl	a3e2 <mem_acquire>
		if (!link) {
    d26e:	4606      	mov	r6, r0
    d270:	2800      	cmp	r0, #0
    d272:	d0f7      	beq.n	d264 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    d274:	4640      	mov	r0, r8
    d276:	f7fd f8b4 	bl	a3e2 <mem_acquire>
		if (!node_rx) {
    d27a:	b928      	cbnz	r0, d288 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    d27c:	4630      	mov	r0, r6
    d27e:	4910      	ldr	r1, [pc, #64]	; (d2c0 <packet_rx_allocate+0x94>)
}
    d280:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    d284:	f7fd b8c7 	b.w	a416 <mem_release>
		node_rx->hdr.onion.link = link;
    d288:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    d28a:	f895 2d2a 	ldrb.w	r2, [r5, #3370]	; 0xd2a
    d28e:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
    d292:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    d296:	f885 4d2a 	strb.w	r4, [r5, #3370]	; 0xd2a
		if (acquire == _radio.packet_rx_count) {
    d29a:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
		acquire = _radio.packet_rx_acquire + 1;
    d29e:	3401      	adds	r4, #1
    d2a0:	b2e4      	uxtb	r4, r4
			acquire = 0;
    d2a2:	42a3      	cmp	r3, r4
    d2a4:	bf08      	it	eq
    d2a6:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    d2a8:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
    d2ac:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    d2b0:	3b01      	subs	r3, #1
    d2b2:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
    d2b6:	fa5f f989 	uxtb.w	r9, r9
    d2ba:	e7cc      	b.n	d256 <packet_rx_allocate+0x2a>
    d2bc:	20000b98 	.word	0x20000b98
    d2c0:	200018c8 	.word	0x200018c8

0000d2c4 <common_init>:
{
    d2c4:	b513      	push	{r0, r1, r4, lr}
	if (_radio.connection_count) {
    d2c6:	4c39      	ldr	r4, [pc, #228]	; (d3ac <common_init+0xe8>)
    d2c8:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    d2cc:	2a00      	cmp	r2, #0
    d2ce:	d040      	beq.n	d352 <common_init+0x8e>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    d2d0:	f604 43f4 	addw	r3, r4, #3316	; 0xcf4
    d2d4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    d2d8:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    d2dc:	f7fd f85a 	bl	a394 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    d2e0:	4b33      	ldr	r3, [pc, #204]	; (d3b0 <common_init+0xec>)
    d2e2:	f894 2d22 	ldrb.w	r2, [r4, #3362]	; 0xd22
    d2e6:	f8b4 1d20 	ldrh.w	r1, [r4, #3360]	; 0xd20
    d2ea:	f8d4 0d14 	ldr.w	r0, [r4, #3348]	; 0xd14
    d2ee:	f7fd f851 	bl	a394 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    d2f2:	f894 1d28 	ldrb.w	r1, [r4, #3368]	; 0xd28
    d2f6:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    d2fa:	4b2e      	ldr	r3, [pc, #184]	; (d3b4 <common_init+0xf0>)
    d2fc:	f8d4 0d2c 	ldr.w	r0, [r4, #3372]	; 0xd2c
    d300:	440a      	add	r2, r1
    d302:	2108      	movs	r1, #8
    d304:	f7fd f846 	bl	a394 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    d308:	4b2b      	ldr	r3, [pc, #172]	; (d3b8 <common_init+0xf4>)
    d30a:	f8d4 0d40 	ldr.w	r0, [r4, #3392]	; 0xd40
    d30e:	2202      	movs	r2, #2
    d310:	2124      	movs	r1, #36	; 0x24
    d312:	f7fd f83f 	bl	a394 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    d316:	f894 2d5c 	ldrb.w	r2, [r4, #3420]	; 0xd5c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    d31a:	f8d4 0d48 	ldr.w	r0, [r4, #3400]	; 0xd48
    d31e:	4b27      	ldr	r3, [pc, #156]	; (d3bc <common_init+0xf8>)
    d320:	f8b4 1d50 	ldrh.w	r1, [r4, #3408]	; 0xd50
    d324:	3a01      	subs	r2, #1
    d326:	b292      	uxth	r2, r2
    d328:	f7fd f834 	bl	a394 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    d32c:	4821      	ldr	r0, [pc, #132]	; (d3b4 <common_init+0xf0>)
    d32e:	f7fd f858 	bl	a3e2 <mem_acquire>
	LL_ASSERT(link);
    d332:	b988      	cbnz	r0, d358 <common_init+0x94>
    d334:	4b22      	ldr	r3, [pc, #136]	; (d3c0 <common_init+0xfc>)
    d336:	9301      	str	r3, [sp, #4]
    d338:	9300      	str	r3, [sp, #0]
    d33a:	4a22      	ldr	r2, [pc, #136]	; (d3c4 <common_init+0x100>)
    d33c:	4b22      	ldr	r3, [pc, #136]	; (d3c8 <common_init+0x104>)
    d33e:	4923      	ldr	r1, [pc, #140]	; (d3cc <common_init+0x108>)
    d340:	4823      	ldr	r0, [pc, #140]	; (d3d0 <common_init+0x10c>)
    d342:	f7f4 f9cd 	bl	16e0 <printk>
    d346:	4040      	eors	r0, r0
    d348:	f380 8811 	msr	BASEPRI, r0
    d34c:	f04f 0004 	mov.w	r0, #4
    d350:	df02      	svc	2
		_radio.conn_free = NULL;
    d352:	f8c4 2cf4 	str.w	r2, [r4, #3316]	; 0xcf4
    d356:	e7c3      	b.n	d2e0 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    d358:	4a1e      	ldr	r2, [pc, #120]	; (d3d4 <common_init+0x110>)
    d35a:	1f11      	subs	r1, r2, #4
    d35c:	f7fd f898 	bl	a490 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    d360:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    d364:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    d368:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    d36c:	231f      	movs	r3, #31
    d36e:	f884 3d06 	strb.w	r3, [r4, #3334]	; 0xd06
	_radio.data_chan_count = 37;
    d372:	2325      	movs	r3, #37	; 0x25
    d374:	f884 3d07 	strb.w	r3, [r4, #3335]	; 0xd07
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    d378:	231b      	movs	r3, #27
    d37a:	f8a4 3d0a 	strh.w	r3, [r4, #3338]	; 0xd0a
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    d37e:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    d382:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    d384:	f8a4 3d0c 	strh.w	r3, [r4, #3340]	; 0xd0c
	_radio.default_phy_tx |= BIT(2);
    d388:	2307      	movs	r3, #7
	_radio.data_chan_map[0] = 0xFF;
    d38a:	f884 0d02 	strb.w	r0, [r4, #3330]	; 0xd02
	_radio.data_chan_map[1] = 0xFF;
    d38e:	f884 0d03 	strb.w	r0, [r4, #3331]	; 0xd03
	_radio.data_chan_map[2] = 0xFF;
    d392:	f884 0d04 	strb.w	r0, [r4, #3332]	; 0xd04
	_radio.data_chan_map[3] = 0xFF;
    d396:	f884 0d05 	strb.w	r0, [r4, #3333]	; 0xd05
	_radio.default_phy_tx |= BIT(2);
    d39a:	f8a4 3d0e 	strh.w	r3, [r4, #3342]	; 0xd0e
	_radio.default_phy_rx |= BIT(2);
    d39e:	f8a4 3d10 	strh.w	r3, [r4, #3344]	; 0xd10
}
    d3a2:	b002      	add	sp, #8
    d3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    d3a8:	f7ff bf40 	b.w	d22c <packet_rx_allocate>
    d3ac:	20000b98 	.word	0x20000b98
    d3b0:	200018b0 	.word	0x200018b0
    d3b4:	200018c8 	.word	0x200018c8
    d3b8:	200018dc 	.word	0x200018dc
    d3bc:	200018e4 	.word	0x200018e4
    d3c0:	0001868d 	.word	0x0001868d
    d3c4:	00019a84 	.word	0x00019a84
    d3c8:	0001afbd 	.word	0x0001afbd
    d3cc:	00019a8b 	.word	0x00019a8b
    d3d0:	0001b44d 	.word	0x0001b44d
    d3d4:	200018d0 	.word	0x200018d0

0000d3d8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    d3d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    d3dc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    d3de:	4294      	cmp	r4, r2
{
    d3e0:	4681      	mov	r9, r0
    d3e2:	460f      	mov	r7, r1
    d3e4:	4690      	mov	r8, r2
	if (_first == last) {
    d3e6:	d03d      	beq.n	d464 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    d3e8:	4e1f      	ldr	r6, [pc, #124]	; (d468 <tx_cmplt_get+0x90>)
    d3ea:	f8d6 3d58 	ldr.w	r3, [r6, #3416]	; 0xd58
    d3ee:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    d3f2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    d3f4:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    d3f6:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    d3fa:	f606 5a4c 	addw	sl, r6, #3404	; 0xd4c
		if (*handle != _radio.pkt_release[_first].handle) {
    d3fe:	b222      	sxth	r2, r4
    d400:	f8d6 0d58 	ldr.w	r0, [r6, #3416]	; 0xd58
    d404:	f8b9 e000 	ldrh.w	lr, [r9]
    d408:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    d40c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    d410:	4596      	cmp	lr, r2
    d412:	d120      	bne.n	d456 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    d414:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    d416:	2801      	cmp	r0, #1
    d418:	f020 0303 	bic.w	r3, r0, #3
    d41c:	d90a      	bls.n	d434 <tx_cmplt_get+0x5c>
    d41e:	b1f3      	cbz	r3, d45e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    d420:	1d02      	adds	r2, r0, #4
    d422:	d01c      	beq.n	d45e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    d424:	7942      	ldrb	r2, [r0, #5]
    d426:	b1d2      	cbz	r2, d45e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    d428:	7902      	ldrb	r2, [r0, #4]
    d42a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    d42e:	3a01      	subs	r2, #1
    d430:	2a01      	cmp	r2, #1
    d432:	d814      	bhi.n	d45e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    d434:	2201      	movs	r2, #1
			cmplt++;
    d436:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    d438:	604a      	str	r2, [r1, #4]
			cmplt++;
    d43a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    d43c:	b113      	cbz	r3, d444 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    d43e:	4651      	mov	r1, sl
    d440:	f7fc ffe9 	bl	a416 <mem_release>
		}

		_first = _first + 1;
    d444:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    d446:	f896 2d5c 	ldrb.w	r2, [r6, #3420]	; 0xd5c
		_first = _first + 1;
    d44a:	b2e4      	uxtb	r4, r4
			_first = 0;
    d44c:	42a2      	cmp	r2, r4
    d44e:	bf08      	it	eq
    d450:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    d452:	4544      	cmp	r4, r8
    d454:	d1d3      	bne.n	d3fe <tx_cmplt_get+0x26>

	*first = _first;
    d456:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    d458:	4628      	mov	r0, r5
    d45a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    d45e:	f8c1 b004 	str.w	fp, [r1, #4]
    d462:	e7eb      	b.n	d43c <tx_cmplt_get+0x64>
		return 0;
    d464:	2500      	movs	r5, #0
    d466:	e7f7      	b.n	d458 <tx_cmplt_get+0x80>
    d468:	20000b98 	.word	0x20000b98

0000d46c <connection_get>:
{
    d46c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    d46e:	4b09      	ldr	r3, [pc, #36]	; (d494 <connection_get+0x28>)
    d470:	f893 2cf8 	ldrb.w	r2, [r3, #3320]	; 0xcf8
    d474:	4282      	cmp	r2, r0
{
    d476:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    d478:	d90a      	bls.n	d490 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    d47a:	4602      	mov	r2, r0
    d47c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    d480:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    d484:	f7fc ffe2 	bl	a44c <mem_get>
		if ((conn) && (conn->handle == handle)) {
    d488:	b110      	cbz	r0, d490 <connection_get+0x24>
    d48a:	8c03      	ldrh	r3, [r0, #32]
    d48c:	42a3      	cmp	r3, r4
    d48e:	d000      	beq.n	d492 <connection_get+0x26>
	return 0;
    d490:	2000      	movs	r0, #0
}
    d492:	bd10      	pop	{r4, pc}
    d494:	20000b98 	.word	0x20000b98

0000d498 <role_disable>:
{
    d498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d49c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    d49e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    d4a0:	2805      	cmp	r0, #5
{
    d4a2:	4605      	mov	r5, r0
    d4a4:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    d4a6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    d4a8:	d00c      	beq.n	d4c4 <role_disable+0x2c>
    d4aa:	2806      	cmp	r0, #6
    d4ac:	d040      	beq.n	d530 <role_disable+0x98>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    d4ae:	d945      	bls.n	d53c <role_disable+0xa4>
			conn_handle = ticker_id_primary -
    d4b0:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    d4b2:	b280      	uxth	r0, r0
    d4b4:	f7ff ffda 	bl	d46c <connection_get>
			if (!conn) {
    d4b8:	2800      	cmp	r0, #0
    d4ba:	f000 8123 	beq.w	d704 <role_disable+0x26c>
			ticks_active_to_start =
    d4be:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    d4c2:	e00f      	b.n	d4e4 <role_disable+0x4c>
		ticks_xtal_to_start =
    d4c4:	4b90      	ldr	r3, [pc, #576]	; (d708 <role_disable+0x270>)
    d4c6:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    d4c8:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d4cc:	ab02      	add	r3, sp, #8
    d4ce:	9300      	str	r3, [sp, #0]
    d4d0:	460a      	mov	r2, r1
    d4d2:	4b8e      	ldr	r3, [pc, #568]	; (d70c <role_disable+0x274>)
    d4d4:	2103      	movs	r1, #3
    d4d6:	2000      	movs	r0, #0
    d4d8:	f7fd feaa 	bl	b230 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    d4dc:	2802      	cmp	r0, #2
    d4de:	d011      	beq.n	d504 <role_disable+0x6c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    d4e0:	9b02      	ldr	r3, [sp, #8]
    d4e2:	b99b      	cbnz	r3, d50c <role_disable+0x74>
	LL_ASSERT(!_radio.ticker_id_stop);
    d4e4:	4c88      	ldr	r4, [pc, #544]	; (d708 <role_disable+0x270>)
    d4e6:	7ca3      	ldrb	r3, [r4, #18]
    d4e8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    d4ec:	2b00      	cmp	r3, #0
    d4ee:	d02d      	beq.n	d54c <role_disable+0xb4>
    d4f0:	4b87      	ldr	r3, [pc, #540]	; (d710 <role_disable+0x278>)
    d4f2:	9301      	str	r3, [sp, #4]
    d4f4:	9300      	str	r3, [sp, #0]
    d4f6:	4a87      	ldr	r2, [pc, #540]	; (d714 <role_disable+0x27c>)
    d4f8:	4b87      	ldr	r3, [pc, #540]	; (d718 <role_disable+0x280>)
    d4fa:	4988      	ldr	r1, [pc, #544]	; (d71c <role_disable+0x284>)
    d4fc:	4888      	ldr	r0, [pc, #544]	; (d720 <role_disable+0x288>)
    d4fe:	e00f      	b.n	d520 <role_disable+0x88>
				cpu_sleep();
    d500:	f7ff fdba 	bl	d078 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    d504:	9b02      	ldr	r3, [sp, #8]
    d506:	2b02      	cmp	r3, #2
    d508:	d0fa      	beq.n	d500 <role_disable+0x68>
    d50a:	e7e9      	b.n	d4e0 <role_disable+0x48>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    d50c:	9b02      	ldr	r3, [sp, #8]
    d50e:	2b01      	cmp	r3, #1
    d510:	d0e8      	beq.n	d4e4 <role_disable+0x4c>
    d512:	4b7f      	ldr	r3, [pc, #508]	; (d710 <role_disable+0x278>)
    d514:	9301      	str	r3, [sp, #4]
    d516:	9300      	str	r3, [sp, #0]
    d518:	4a7e      	ldr	r2, [pc, #504]	; (d714 <role_disable+0x27c>)
    d51a:	4b7f      	ldr	r3, [pc, #508]	; (d718 <role_disable+0x280>)
    d51c:	497f      	ldr	r1, [pc, #508]	; (d71c <role_disable+0x284>)
    d51e:	4881      	ldr	r0, [pc, #516]	; (d724 <role_disable+0x28c>)
			LL_ASSERT(0);
    d520:	f7f4 f8de 	bl	16e0 <printk>
    d524:	4040      	eors	r0, r0
    d526:	f380 8811 	msr	BASEPRI, r0
    d52a:	f04f 0004 	mov.w	r0, #4
    d52e:	df02      	svc	2
		ticks_xtal_to_start =
    d530:	4b75      	ldr	r3, [pc, #468]	; (d708 <role_disable+0x270>)
    d532:	f8d3 6c1c 	ldr.w	r6, [r3, #3100]	; 0xc1c
		ticks_active_to_start =
    d536:	f8d3 8c20 	ldr.w	r8, [r3, #3104]	; 0xc20
		break;
    d53a:	e7d3      	b.n	d4e4 <role_disable+0x4c>
			LL_ASSERT(0);
    d53c:	4b74      	ldr	r3, [pc, #464]	; (d710 <role_disable+0x278>)
    d53e:	9301      	str	r3, [sp, #4]
    d540:	9300      	str	r3, [sp, #0]
    d542:	4b75      	ldr	r3, [pc, #468]	; (d718 <role_disable+0x280>)
    d544:	4a73      	ldr	r2, [pc, #460]	; (d714 <role_disable+0x27c>)
    d546:	4975      	ldr	r1, [pc, #468]	; (d71c <role_disable+0x284>)
    d548:	4877      	ldr	r0, [pc, #476]	; (d728 <role_disable+0x290>)
    d54a:	e7e9      	b.n	d520 <role_disable+0x88>
	ret_cb = TICKER_STATUS_BUSY;
    d54c:	ab06      	add	r3, sp, #24
    d54e:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    d550:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    d552:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d556:	2103      	movs	r1, #3
    d558:	9300      	str	r3, [sp, #0]
    d55a:	462a      	mov	r2, r5
    d55c:	4b6b      	ldr	r3, [pc, #428]	; (d70c <role_disable+0x274>)
    d55e:	f7fd fe67 	bl	b230 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    d562:	2802      	cmp	r0, #2
    d564:	d025      	beq.n	d5b2 <role_disable+0x11a>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    d566:	9b02      	ldr	r3, [sp, #8]
    d568:	2b00      	cmp	r3, #0
    d56a:	d169      	bne.n	d640 <role_disable+0x1a8>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    d56c:	7c23      	ldrb	r3, [r4, #16]
    d56e:	429d      	cmp	r5, r3
    d570:	d002      	beq.n	d578 <role_disable+0xe0>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    d572:	7c63      	ldrb	r3, [r4, #17]
    d574:	429d      	cmp	r5, r3
    d576:	d15f      	bne.n	d638 <role_disable+0x1a0>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    d578:	ab06      	add	r3, sp, #24
    d57a:	2202      	movs	r2, #2
    d57c:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d580:	2200      	movs	r2, #0
    d582:	9300      	str	r3, [sp, #0]
    d584:	2103      	movs	r1, #3
    d586:	4b61      	ldr	r3, [pc, #388]	; (d70c <role_disable+0x274>)
    d588:	4610      	mov	r0, r2
    d58a:	f7fd fe51 	bl	b230 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    d58e:	2802      	cmp	r0, #2
    d590:	d11d      	bne.n	d5ce <role_disable+0x136>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    d592:	2201      	movs	r2, #1
    d594:	4611      	mov	r1, r2
    d596:	2003      	movs	r0, #3
    d598:	f7fc ffc6 	bl	a528 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    d59c:	9b03      	ldr	r3, [sp, #12]
    d59e:	2b02      	cmp	r3, #2
    d5a0:	d115      	bne.n	d5ce <role_disable+0x136>
    d5a2:	4b5b      	ldr	r3, [pc, #364]	; (d710 <role_disable+0x278>)
    d5a4:	9301      	str	r3, [sp, #4]
    d5a6:	9300      	str	r3, [sp, #0]
    d5a8:	4a5a      	ldr	r2, [pc, #360]	; (d714 <role_disable+0x27c>)
    d5aa:	4b60      	ldr	r3, [pc, #384]	; (d72c <role_disable+0x294>)
    d5ac:	495b      	ldr	r1, [pc, #364]	; (d71c <role_disable+0x284>)
    d5ae:	4860      	ldr	r0, [pc, #384]	; (d730 <role_disable+0x298>)
    d5b0:	e7b6      	b.n	d520 <role_disable+0x88>
		if (_radio.ticker_id_event == ticker_id_primary) {
    d5b2:	7c63      	ldrb	r3, [r4, #17]
    d5b4:	429d      	cmp	r5, r3
    d5b6:	d104      	bne.n	d5c2 <role_disable+0x12a>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    d5b8:	2201      	movs	r2, #1
    d5ba:	4611      	mov	r1, r2
    d5bc:	2003      	movs	r0, #3
    d5be:	f7fc ffb3 	bl	a528 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    d5c2:	9b02      	ldr	r3, [sp, #8]
    d5c4:	2b02      	cmp	r3, #2
    d5c6:	d1ce      	bne.n	d566 <role_disable+0xce>
			cpu_sleep();
    d5c8:	f7ff fd56 	bl	d078 <cpu_sleep>
    d5cc:	e7f9      	b.n	d5c2 <role_disable+0x12a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    d5ce:	9803      	ldr	r0, [sp, #12]
    d5d0:	2800      	cmp	r0, #0
    d5d2:	d150      	bne.n	d676 <role_disable+0x1de>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    d5d4:	2302      	movs	r3, #2
    d5d6:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    d5d8:	7c23      	ldrb	r3, [r4, #16]
    d5da:	b93b      	cbnz	r3, d5ec <role_disable+0x154>
    d5dc:	4b4c      	ldr	r3, [pc, #304]	; (d710 <role_disable+0x278>)
    d5de:	9301      	str	r3, [sp, #4]
    d5e0:	9300      	str	r3, [sp, #0]
    d5e2:	4a4c      	ldr	r2, [pc, #304]	; (d714 <role_disable+0x27c>)
    d5e4:	4b51      	ldr	r3, [pc, #324]	; (d72c <role_disable+0x294>)
    d5e6:	494d      	ldr	r1, [pc, #308]	; (d71c <role_disable+0x284>)
    d5e8:	4852      	ldr	r0, [pc, #328]	; (d734 <role_disable+0x29c>)
    d5ea:	e799      	b.n	d520 <role_disable+0x88>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d5ec:	ab04      	add	r3, sp, #16
    d5ee:	9300      	str	r3, [sp, #0]
    d5f0:	2201      	movs	r2, #1
    d5f2:	4b46      	ldr	r3, [pc, #280]	; (d70c <role_disable+0x274>)
		_radio.ticker_id_prepare = 0;
    d5f4:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d5f6:	2103      	movs	r1, #3
    d5f8:	f7fd fe1a 	bl	b230 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    d5fc:	2802      	cmp	r0, #2
    d5fe:	d10f      	bne.n	d620 <role_disable+0x188>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    d600:	2201      	movs	r2, #1
    d602:	4611      	mov	r1, r2
    d604:	2003      	movs	r0, #3
    d606:	f7fc ff8f 	bl	a528 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    d60a:	9b04      	ldr	r3, [sp, #16]
    d60c:	2b02      	cmp	r3, #2
    d60e:	d107      	bne.n	d620 <role_disable+0x188>
    d610:	4b3f      	ldr	r3, [pc, #252]	; (d710 <role_disable+0x278>)
    d612:	9301      	str	r3, [sp, #4]
    d614:	9300      	str	r3, [sp, #0]
    d616:	4a3f      	ldr	r2, [pc, #252]	; (d714 <role_disable+0x27c>)
    d618:	4b44      	ldr	r3, [pc, #272]	; (d72c <role_disable+0x294>)
    d61a:	4940      	ldr	r1, [pc, #256]	; (d71c <role_disable+0x284>)
    d61c:	4846      	ldr	r0, [pc, #280]	; (d738 <role_disable+0x2a0>)
    d61e:	e77f      	b.n	d520 <role_disable+0x88>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    d620:	9a04      	ldr	r2, [sp, #16]
    d622:	b99a      	cbnz	r2, d64c <role_disable+0x1b4>
			ticks_xtal_to_start &= ~XON_BITMASK;
    d624:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    d628:	45b0      	cmp	r8, r6
    d62a:	d922      	bls.n	d672 <role_disable+0x1da>
				ret = mayfly_enqueue(
    d62c:	4b43      	ldr	r3, [pc, #268]	; (d73c <role_disable+0x2a4>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    d62e:	4611      	mov	r1, r2
    d630:	2003      	movs	r0, #3
    d632:	f7fc ffa1 	bl	a578 <mayfly_enqueue>
			LL_ASSERT(!ret);
    d636:	b9a0      	cbnz	r0, d662 <role_disable+0x1ca>
	if (!_radio.ticker_id_stop) {
    d638:	7ca3      	ldrb	r3, [r4, #18]
    d63a:	b90b      	cbnz	r3, d640 <role_disable+0x1a8>
		ret_cb = TICKER_STATUS_FAILURE;
    d63c:	2301      	movs	r3, #1
    d63e:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    d640:	2300      	movs	r3, #0
    d642:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    d644:	9802      	ldr	r0, [sp, #8]
}
    d646:	b006      	add	sp, #24
    d648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    d64c:	9b04      	ldr	r3, [sp, #16]
    d64e:	2b01      	cmp	r3, #1
    d650:	d153      	bne.n	d6fa <role_disable+0x262>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    d652:	2200      	movs	r2, #0
    d654:	4611      	mov	r1, r2
    d656:	4b39      	ldr	r3, [pc, #228]	; (d73c <role_disable+0x2a4>)
    d658:	2003      	movs	r0, #3
    d65a:	f7fc ff8d 	bl	a578 <mayfly_enqueue>
			LL_ASSERT(!ret);
    d65e:	4602      	mov	r2, r0
    d660:	b138      	cbz	r0, d672 <role_disable+0x1da>
			LL_ASSERT(!ret);
    d662:	4b2b      	ldr	r3, [pc, #172]	; (d710 <role_disable+0x278>)
    d664:	9301      	str	r3, [sp, #4]
    d666:	9300      	str	r3, [sp, #0]
    d668:	4a2a      	ldr	r2, [pc, #168]	; (d714 <role_disable+0x27c>)
    d66a:	4b30      	ldr	r3, [pc, #192]	; (d72c <role_disable+0x294>)
    d66c:	492b      	ldr	r1, [pc, #172]	; (d71c <role_disable+0x284>)
    d66e:	4834      	ldr	r0, [pc, #208]	; (d740 <role_disable+0x2a8>)
    d670:	e756      	b.n	d520 <role_disable+0x88>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    d672:	4b34      	ldr	r3, [pc, #208]	; (d744 <role_disable+0x2ac>)
    d674:	e7db      	b.n	d62e <role_disable+0x196>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    d676:	9d03      	ldr	r5, [sp, #12]
    d678:	2d01      	cmp	r5, #1
    d67a:	d13e      	bne.n	d6fa <role_disable+0x262>
		if (ticker_id_stop != TICKER_NULL) {
    d67c:	2fff      	cmp	r7, #255	; 0xff
    d67e:	d029      	beq.n	d6d4 <role_disable+0x23c>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    d680:	ab06      	add	r3, sp, #24
    d682:	2202      	movs	r2, #2
    d684:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    d688:	2103      	movs	r1, #3
    d68a:	9300      	str	r3, [sp, #0]
    d68c:	463a      	mov	r2, r7
    d68e:	4b1f      	ldr	r3, [pc, #124]	; (d70c <role_disable+0x274>)
    d690:	2000      	movs	r0, #0
    d692:	f7fd fdcd 	bl	b230 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    d696:	2802      	cmp	r0, #2
    d698:	d10f      	bne.n	d6ba <role_disable+0x222>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    d69a:	462a      	mov	r2, r5
    d69c:	4629      	mov	r1, r5
    d69e:	2003      	movs	r0, #3
    d6a0:	f7fc ff42 	bl	a528 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    d6a4:	9b05      	ldr	r3, [sp, #20]
    d6a6:	2b02      	cmp	r3, #2
    d6a8:	d107      	bne.n	d6ba <role_disable+0x222>
    d6aa:	4b19      	ldr	r3, [pc, #100]	; (d710 <role_disable+0x278>)
    d6ac:	9301      	str	r3, [sp, #4]
    d6ae:	9300      	str	r3, [sp, #0]
    d6b0:	4a18      	ldr	r2, [pc, #96]	; (d714 <role_disable+0x27c>)
    d6b2:	4b1e      	ldr	r3, [pc, #120]	; (d72c <role_disable+0x294>)
    d6b4:	4919      	ldr	r1, [pc, #100]	; (d71c <role_disable+0x284>)
    d6b6:	4824      	ldr	r0, [pc, #144]	; (d748 <role_disable+0x2b0>)
    d6b8:	e732      	b.n	d520 <role_disable+0x88>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    d6ba:	9b05      	ldr	r3, [sp, #20]
    d6bc:	b153      	cbz	r3, d6d4 <role_disable+0x23c>
    d6be:	9b05      	ldr	r3, [sp, #20]
    d6c0:	2b01      	cmp	r3, #1
    d6c2:	d007      	beq.n	d6d4 <role_disable+0x23c>
    d6c4:	4b12      	ldr	r3, [pc, #72]	; (d710 <role_disable+0x278>)
    d6c6:	9301      	str	r3, [sp, #4]
    d6c8:	9300      	str	r3, [sp, #0]
    d6ca:	4a12      	ldr	r2, [pc, #72]	; (d714 <role_disable+0x27c>)
    d6cc:	4b17      	ldr	r3, [pc, #92]	; (d72c <role_disable+0x294>)
    d6ce:	4913      	ldr	r1, [pc, #76]	; (d71c <role_disable+0x284>)
    d6d0:	481e      	ldr	r0, [pc, #120]	; (d74c <role_disable+0x2b4>)
    d6d2:	e725      	b.n	d520 <role_disable+0x88>
		if (_radio.role != ROLE_NONE) {
    d6d4:	7ce3      	ldrb	r3, [r4, #19]
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d0ae      	beq.n	d638 <role_disable+0x1a0>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    d6da:	4b1d      	ldr	r3, [pc, #116]	; (d750 <role_disable+0x2b8>)
    d6dc:	2204      	movs	r2, #4
    d6de:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    d6e0:	2200      	movs	r2, #0
    d6e2:	4611      	mov	r1, r2
    d6e4:	2003      	movs	r0, #3
    d6e6:	f7fc ff47 	bl	a578 <mayfly_enqueue>
			LL_ASSERT(!ret);
    d6ea:	2800      	cmp	r0, #0
    d6ec:	d1b9      	bne.n	d662 <role_disable+0x1ca>
			while (_radio.role != ROLE_NONE) {
    d6ee:	7ce3      	ldrb	r3, [r4, #19]
    d6f0:	2b00      	cmp	r3, #0
    d6f2:	d0a1      	beq.n	d638 <role_disable+0x1a0>
				cpu_sleep();
    d6f4:	f7ff fcc0 	bl	d078 <cpu_sleep>
    d6f8:	e7f9      	b.n	d6ee <role_disable+0x256>
		LL_ASSERT(0);
    d6fa:	4b05      	ldr	r3, [pc, #20]	; (d710 <role_disable+0x278>)
    d6fc:	9301      	str	r3, [sp, #4]
    d6fe:	9300      	str	r3, [sp, #0]
    d700:	4b0a      	ldr	r3, [pc, #40]	; (d72c <role_disable+0x294>)
    d702:	e71f      	b.n	d544 <role_disable+0xac>
				return 1;
    d704:	2001      	movs	r0, #1
    d706:	e79e      	b.n	d646 <role_disable+0x1ae>
    d708:	20000b98 	.word	0x20000b98
    d70c:	0000d0bd 	.word	0x0000d0bd
    d710:	0001868d 	.word	0x0001868d
    d714:	00019a84 	.word	0x00019a84
    d718:	0001b3df 	.word	0x0001b3df
    d71c:	00019a8b 	.word	0x00019a8b
    d720:	0001bd75 	.word	0x0001bd75
    d724:	0001bd35 	.word	0x0001bd35
    d728:	000197a5 	.word	0x000197a5
    d72c:	0001b3cb 	.word	0x0001b3cb
    d730:	0001bdad 	.word	0x0001bdad
    d734:	0001bdde 	.word	0x0001bdde
    d738:	0001be18 	.word	0x0001be18
    d73c:	20008928 	.word	0x20008928
    d740:	0001be48 	.word	0x0001be48
    d744:	200089c8 	.word	0x200089c8
    d748:	0001be6e 	.word	0x0001be6e
    d74c:	0001bea0 	.word	0x0001bea0
    d750:	20008948 	.word	0x20008948

0000d754 <mayfly_xtal_retain>:
{
    d754:	b513      	push	{r0, r1, r4, lr}
    d756:	4b1d      	ldr	r3, [pc, #116]	; (d7cc <mayfly_xtal_retain+0x78>)
    d758:	4604      	mov	r4, r0
		if (!s_xtal_retained) {
    d75a:	781a      	ldrb	r2, [r3, #0]
	if (retain) {
    d75c:	b301      	cbz	r1, d7a0 <mayfly_xtal_retain+0x4c>
		if (!s_xtal_retained) {
    d75e:	2a00      	cmp	r2, #0
    d760:	d132      	bne.n	d7c8 <mayfly_xtal_retain+0x74>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
    d762:	2801      	cmp	r0, #1
    d764:	d00e      	beq.n	d784 <mayfly_xtal_retain+0x30>
    d766:	4b1a      	ldr	r3, [pc, #104]	; (d7d0 <mayfly_xtal_retain+0x7c>)
    d768:	9301      	str	r3, [sp, #4]
    d76a:	9300      	str	r3, [sp, #0]
    d76c:	4a19      	ldr	r2, [pc, #100]	; (d7d4 <mayfly_xtal_retain+0x80>)
    d76e:	4b1a      	ldr	r3, [pc, #104]	; (d7d8 <mayfly_xtal_retain+0x84>)
    d770:	491a      	ldr	r1, [pc, #104]	; (d7dc <mayfly_xtal_retain+0x88>)
    d772:	481b      	ldr	r0, [pc, #108]	; (d7e0 <mayfly_xtal_retain+0x8c>)
			LL_ASSERT(!retval);
    d774:	f7f3 ffb4 	bl	16e0 <printk>
    d778:	4040      	eors	r0, r0
    d77a:	f380 8811 	msr	BASEPRI, r0
    d77e:	f04f 0004 	mov.w	r0, #4
    d782:	df02      	svc	2
			s_xtal_retained = 1;
    d784:	7018      	strb	r0, [r3, #0]
			retval = mayfly_enqueue(caller_id,
    d786:	4b17      	ldr	r3, [pc, #92]	; (d7e4 <mayfly_xtal_retain+0x90>)
    d788:	4611      	mov	r1, r2
    d78a:	f7fc fef5 	bl	a578 <mayfly_enqueue>
			LL_ASSERT(!retval);
    d78e:	b1d8      	cbz	r0, d7c8 <mayfly_xtal_retain+0x74>
    d790:	4b0f      	ldr	r3, [pc, #60]	; (d7d0 <mayfly_xtal_retain+0x7c>)
    d792:	9301      	str	r3, [sp, #4]
    d794:	9300      	str	r3, [sp, #0]
    d796:	4a0f      	ldr	r2, [pc, #60]	; (d7d4 <mayfly_xtal_retain+0x80>)
    d798:	4b0f      	ldr	r3, [pc, #60]	; (d7d8 <mayfly_xtal_retain+0x84>)
    d79a:	4910      	ldr	r1, [pc, #64]	; (d7dc <mayfly_xtal_retain+0x88>)
    d79c:	4812      	ldr	r0, [pc, #72]	; (d7e8 <mayfly_xtal_retain+0x94>)
    d79e:	e7e9      	b.n	d774 <mayfly_xtal_retain+0x20>
		if (s_xtal_retained) {
    d7a0:	b192      	cbz	r2, d7c8 <mayfly_xtal_retain+0x74>
			s_xtal_retained = 0;
    d7a2:	7019      	strb	r1, [r3, #0]
			switch (caller_id) {
    d7a4:	b170      	cbz	r0, d7c4 <mayfly_xtal_retain+0x70>
    d7a6:	2801      	cmp	r0, #1
    d7a8:	d104      	bne.n	d7b4 <mayfly_xtal_retain+0x60>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    d7aa:	4b10      	ldr	r3, [pc, #64]	; (d7ec <mayfly_xtal_retain+0x98>)
			retval = mayfly_enqueue(caller_id,
    d7ac:	2200      	movs	r2, #0
    d7ae:	4611      	mov	r1, r2
    d7b0:	4620      	mov	r0, r4
    d7b2:	e7ea      	b.n	d78a <mayfly_xtal_retain+0x36>
				LL_ASSERT(0);
    d7b4:	4b06      	ldr	r3, [pc, #24]	; (d7d0 <mayfly_xtal_retain+0x7c>)
    d7b6:	9301      	str	r3, [sp, #4]
    d7b8:	9300      	str	r3, [sp, #0]
    d7ba:	4a06      	ldr	r2, [pc, #24]	; (d7d4 <mayfly_xtal_retain+0x80>)
    d7bc:	4b06      	ldr	r3, [pc, #24]	; (d7d8 <mayfly_xtal_retain+0x84>)
    d7be:	4907      	ldr	r1, [pc, #28]	; (d7dc <mayfly_xtal_retain+0x88>)
    d7c0:	480b      	ldr	r0, [pc, #44]	; (d7f0 <mayfly_xtal_retain+0x9c>)
    d7c2:	e7d7      	b.n	d774 <mayfly_xtal_retain+0x20>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    d7c4:	4b0b      	ldr	r3, [pc, #44]	; (d7f4 <mayfly_xtal_retain+0xa0>)
    d7c6:	e7f1      	b.n	d7ac <mayfly_xtal_retain+0x58>
}
    d7c8:	b002      	add	sp, #8
    d7ca:	bd10      	pop	{r4, pc}
    d7cc:	2000199c 	.word	0x2000199c
    d7d0:	0001868d 	.word	0x0001868d
    d7d4:	00019a84 	.word	0x00019a84
    d7d8:	0001b184 	.word	0x0001b184
    d7dc:	00019a8b 	.word	0x00019a8b
    d7e0:	0001bb8e 	.word	0x0001bb8e
    d7e4:	20008998 	.word	0x20008998
    d7e8:	0001bbbe 	.word	0x0001bbbe
    d7ec:	200089b8 	.word	0x200089b8
    d7f0:	000197a5 	.word	0x000197a5
    d7f4:	200089a8 	.word	0x200089a8

0000d7f8 <rx_packet_set>:
{
    d7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    d7fa:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    d7fe:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    d800:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    d802:	f004 0407 	and.w	r4, r4, #7
{
    d806:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    d808:	4620      	mov	r0, r4
    d80a:	2100      	movs	r1, #0
    d80c:	f008 fd0c 	bl	16228 <radio_phy_set>
	if (conn->enc_rx) {
    d810:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d814:	f013 0f10 	tst.w	r3, #16
    d818:	ea4f 0244 	mov.w	r2, r4, lsl #1
    d81c:	d010      	beq.n	d840 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    d81e:	1d29      	adds	r1, r5, #4
    d820:	f042 0201 	orr.w	r2, r2, #1
    d824:	b2c9      	uxtb	r1, r1
    d826:	2008      	movs	r0, #8
    d828:	f008 fd62 	bl	162f0 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    d82c:	463a      	mov	r2, r7
    d82e:	4621      	mov	r1, r4
    d830:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    d834:	f008 ffa2 	bl	1677c <radio_ccm_rx_pkt_set>
}
    d838:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    d83c:	f008 bd8a 	b.w	16354 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    d840:	2008      	movs	r0, #8
    d842:	f042 0201 	orr.w	r2, r2, #1
    d846:	b2e9      	uxtb	r1, r5
    d848:	f008 fd52 	bl	162f0 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    d84c:	4638      	mov	r0, r7
    d84e:	e7f3      	b.n	d838 <rx_packet_set+0x40>

0000d850 <tx_packet_set>:
{
    d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d852:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    d854:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    d858:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    d85a:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    d85e:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    d860:	09c9      	lsrs	r1, r1, #7
    d862:	4620      	mov	r0, r4
    d864:	f008 fce0 	bl	16228 <radio_phy_set>
	if (conn->enc_tx) {
    d868:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    d86c:	f013 0f20 	tst.w	r3, #32
    d870:	ea4f 0244 	mov.w	r2, r4, lsl #1
    d874:	d00f      	beq.n	d896 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    d876:	1d29      	adds	r1, r5, #4
    d878:	b2c9      	uxtb	r1, r1
    d87a:	2008      	movs	r0, #8
    d87c:	f042 0201 	orr.w	r2, r2, #1
    d880:	f008 fd36 	bl	162f0 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    d884:	4639      	mov	r1, r7
    d886:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    d88a:	f008 ffcd 	bl	16828 <radio_ccm_tx_pkt_set>
}
    d88e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    d892:	f008 bd65 	b.w	16360 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    d896:	2008      	movs	r0, #8
    d898:	f042 0201 	orr.w	r2, r2, #1
    d89c:	b2e9      	uxtb	r1, r5
    d89e:	f008 fd27 	bl	162f0 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    d8a2:	4638      	mov	r0, r7
    d8a4:	e7f3      	b.n	d88e <tx_packet_set+0x3e>
	...

0000d8a8 <chan_set>:
{
    d8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    d8ac:	4e82      	ldr	r6, [pc, #520]	; (dab8 <chan_set+0x210>)
    d8ae:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    d8b2:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    d8b6:	4433      	add	r3, r6
{
    d8b8:	b086      	sub	sp, #24
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    d8ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    d8be:	f003 030f 	and.w	r3, r3, #15
    d8c2:	2b07      	cmp	r3, #7
{
    d8c4:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    d8c6:	f040 80e0 	bne.w	da8a <chan_set+0x1e2>
		switch (chan) {
    d8ca:	2826      	cmp	r0, #38	; 0x26
    d8cc:	f8df 8238 	ldr.w	r8, [pc, #568]	; db08 <chan_set+0x260>
    d8d0:	d030      	beq.n	d934 <chan_set+0x8c>
    d8d2:	2827      	cmp	r0, #39	; 0x27
    d8d4:	f8df a234 	ldr.w	sl, [pc, #564]	; db0c <chan_set+0x264>
    d8d8:	f8df 9234 	ldr.w	r9, [pc, #564]	; db10 <chan_set+0x268>
    d8dc:	d034      	beq.n	d948 <chan_set+0xa0>
    d8de:	2825      	cmp	r0, #37	; 0x25
    d8e0:	d162      	bne.n	d9a8 <chan_set+0x100>
			stop_time_37 = k_cycle_get_32();
    d8e2:	f7f4 fee7 	bl	26b4 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    d8e6:	4e75      	ldr	r6, [pc, #468]	; (dabc <chan_set+0x214>)
			stop_time_37 = k_cycle_get_32();
    d8e8:	4b75      	ldr	r3, [pc, #468]	; (dac0 <chan_set+0x218>)
			cycles_spent_37 = stop_time_37 - start_time37;
    d8ea:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    d8ec:	6018      	str	r0, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    d8ee:	f8da 2000 	ldr.w	r2, [sl]
			cycles_spent_37 = stop_time_37 - start_time37;
    d8f2:	4b74      	ldr	r3, [pc, #464]	; (dac4 <chan_set+0x21c>)
    d8f4:	1bc7      	subs	r7, r0, r7
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    d8f6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time37;
    d8fa:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    d8fc:	fb82 2305 	smull	r2, r3, r2, r5
    d900:	fba2 0107 	umull	r0, r1, r2, r7
    d904:	f8d9 2000 	ldr.w	r2, [r9]
    d908:	fb07 1103 	mla	r1, r7, r3, r1
    d90c:	17d3      	asrs	r3, r2, #31
    d90e:	f7f2 fcab 	bl	268 <__aeabi_uldivmod>
    d912:	4b6d      	ldr	r3, [pc, #436]	; (dac8 <chan_set+0x220>)
    d914:	fbb0 f0f5 	udiv	r0, r0, r5
    d918:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    d91a:	f7f4 fecb 	bl	26b4 <_timer_cycle_get_32>
    d91e:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    d922:	f7f4 fec7 	bl	26b4 <_timer_cycle_get_32>
			pckt_send++;
    d926:	4a69      	ldr	r2, [pc, #420]	; (dacc <chan_set+0x224>)
			start_time37= k_cycle_get_32();
    d928:	6030      	str	r0, [r6, #0]
			pckt_send++;
    d92a:	7813      	ldrb	r3, [r2, #0]
    d92c:	3301      	adds	r3, #1
    d92e:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    d930:	2002      	movs	r0, #2
    d932:	e09e      	b.n	da72 <chan_set+0x1ca>
			start_time = k_cycle_get_32();
    d934:	f7f4 febe 	bl	26b4 <_timer_cycle_get_32>
			pckt_send++;
    d938:	4a64      	ldr	r2, [pc, #400]	; (dacc <chan_set+0x224>)
			start_time = k_cycle_get_32();
    d93a:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    d93e:	7813      	ldrb	r3, [r2, #0]
    d940:	3301      	adds	r3, #1
    d942:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    d944:	201a      	movs	r0, #26
    d946:	e094      	b.n	da72 <chan_set+0x1ca>
			stop_time_39 = k_cycle_get_32();
    d948:	f7f4 feb4 	bl	26b4 <_timer_cycle_get_32>
    d94c:	4b60      	ldr	r3, [pc, #384]	; (dad0 <chan_set+0x228>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    d94e:	f8da 2000 	ldr.w	r2, [sl]
			stop_time_39 = k_cycle_get_32();
    d952:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    d954:	f8d8 3000 	ldr.w	r3, [r8]
    d958:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    d95c:	eba0 0e03 	sub.w	lr, r0, r3
    d960:	fb82 2307 	smull	r2, r3, r2, r7
    d964:	fbae 0102 	umull	r0, r1, lr, r2
    d968:	f8d9 2000 	ldr.w	r2, [r9]
    d96c:	fb0e 1103 	mla	r1, lr, r3, r1
    d970:	17d3      	asrs	r3, r2, #31
    d972:	f7f2 fc79 	bl	268 <__aeabi_uldivmod>
    d976:	4b57      	ldr	r3, [pc, #348]	; (dad4 <chan_set+0x22c>)
    d978:	fbb0 f0f7 	udiv	r0, r0, r7
    d97c:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    d97e:	4b53      	ldr	r3, [pc, #332]	; (dacc <chan_set+0x224>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    d980:	2500      	movs	r5, #0
			pckt_send = 0;
    d982:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    d984:	f7f4 fe96 	bl	26b4 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    d988:	f896 3c69 	ldrb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    d98c:	f896 2c68 	ldrb.w	r2, [r6, #3176]	; 0xc68
			start_time = k_cycle_get_32();
    d990:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    d994:	3301      	adds	r3, #1
    d996:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    d998:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    d99a:	f886 3c69 	strb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    d99e:	d201      	bcs.n	d9a4 <chan_set+0xfc>
			_radio.ext_advertiser.current_slot= 0;
    d9a0:	f886 5c69 	strb.w	r5, [r6, #3177]	; 0xc69
			radio_freq_chan_set(80);
    d9a4:	2050      	movs	r0, #80	; 0x50
    d9a6:	e064      	b.n	da72 <chan_set+0x1ca>
			stop_time_aux1 = k_cycle_get_32();
    d9a8:	f7f4 fe84 	bl	26b4 <_timer_cycle_get_32>
    d9ac:	4b4a      	ldr	r3, [pc, #296]	; (dad8 <chan_set+0x230>)
    d9ae:	6018      	str	r0, [r3, #0]
    d9b0:	f8da 3000 	ldr.w	r3, [sl]
    d9b4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    d9b8:	fb83 2305 	smull	r2, r3, r3, r5
    d9bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    d9c0:	f8d9 3000 	ldr.w	r3, [r9]
    d9c4:	4619      	mov	r1, r3
    d9c6:	17da      	asrs	r2, r3, #31
    d9c8:	f8d8 3000 	ldr.w	r3, [r8]
    d9cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
    d9d0:	9a02      	ldr	r2, [sp, #8]
    d9d2:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    d9d4:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    d9d6:	fba3 0102 	umull	r0, r1, r3, r2
    d9da:	9a03      	ldr	r2, [sp, #12]
    d9dc:	fb03 1102 	mla	r1, r3, r2, r1
    d9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d9e4:	f7f2 fc40 	bl	268 <__aeabi_uldivmod>
    d9e8:	4b3c      	ldr	r3, [pc, #240]	; (dadc <chan_set+0x234>)
    d9ea:	fbb0 f0f5 	udiv	r0, r0, r5
    d9ee:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    d9f0:	4b32      	ldr	r3, [pc, #200]	; (dabc <chan_set+0x214>)
    d9f2:	681b      	ldr	r3, [r3, #0]
    d9f4:	1aff      	subs	r7, r7, r3
    d9f6:	9b02      	ldr	r3, [sp, #8]
    d9f8:	fba7 0103 	umull	r0, r1, r7, r3
    d9fc:	9b03      	ldr	r3, [sp, #12]
    d9fe:	fb07 1103 	mla	r1, r7, r3, r1
    da02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    da06:	f7f2 fc2f 	bl	268 <__aeabi_uldivmod>
    da0a:	4b35      	ldr	r3, [pc, #212]	; (dae0 <chan_set+0x238>)
    da0c:	fbb0 f0f5 	udiv	r0, r0, r5
    da10:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    da12:	f7f4 fe4f 	bl	26b4 <_timer_cycle_get_32>
    da16:	4b33      	ldr	r3, [pc, #204]	; (dae4 <chan_set+0x23c>)
			last_dynamic_cal = final_dynamic_cal;
    da18:	4f33      	ldr	r7, [pc, #204]	; (dae8 <chan_set+0x240>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    da1a:	2100      	movs	r1, #0
    da1c:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    da20:	4b32      	ldr	r3, [pc, #200]	; (daec <chan_set+0x244>)
    da22:	f8d7 8000 	ldr.w	r8, [r7]
    da26:	687a      	ldr	r2, [r7, #4]
    da28:	f8c3 8000 	str.w	r8, [r3]
    da2c:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    da2e:	4b30      	ldr	r3, [pc, #192]	; (daf0 <chan_set+0x248>)
    da30:	e9d3 2300 	ldrd	r2, r3, [r3]
    da34:	1a82      	subs	r2, r0, r2
    da36:	f8da 0000 	ldr.w	r0, [sl]
    da3a:	eb61 0303 	sbc.w	r3, r1, r3
    da3e:	fb80 0105 	smull	r0, r1, r0, r5
    da42:	4351      	muls	r1, r2
    da44:	fb00 1303 	mla	r3, r0, r3, r1
    da48:	fba2 0100 	umull	r0, r1, r2, r0
    da4c:	f8d9 2000 	ldr.w	r2, [r9]
    da50:	4419      	add	r1, r3
    da52:	17d3      	asrs	r3, r2, #31
    da54:	f7f2 fc08 	bl	268 <__aeabi_uldivmod>
    da58:	2300      	movs	r3, #0
    da5a:	fbb0 f0f5 	udiv	r0, r0, r5
    da5e:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    da60:	eba0 0008 	sub.w	r0, r0, r8
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    da64:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    da66:	f8c6 0c88 	str.w	r0, [r6, #3208]	; 0xc88
			if (chan < 11) {
    da6a:	2c0a      	cmp	r4, #10
    da6c:	d809      	bhi.n	da82 <chan_set+0x1da>
				radio_freq_chan_set(4 + (2 * chan));
    da6e:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    da70:	0040      	lsls	r0, r0, #1
    da72:	f008 fc0d 	bl	16290 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    da76:	4620      	mov	r0, r4
}
    da78:	b006      	add	sp, #24
    da7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_whiten_iv_set(chan);
    da7e:	f008 bc0d 	b.w	1629c <radio_whiten_iv_set>
			} else if (chan < 40) {
    da82:	2c27      	cmp	r4, #39	; 0x27
    da84:	d809      	bhi.n	da9a <chan_set+0x1f2>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    da86:	1ce0      	adds	r0, r4, #3
    da88:	e7f2      	b.n	da70 <chan_set+0x1c8>
		switch (chan) {
    da8a:	2826      	cmp	r0, #38	; 0x26
    da8c:	f43f af5a 	beq.w	d944 <chan_set+0x9c>
    da90:	2827      	cmp	r0, #39	; 0x27
    da92:	d087      	beq.n	d9a4 <chan_set+0xfc>
    da94:	2825      	cmp	r0, #37	; 0x25
    da96:	d1e8      	bne.n	da6a <chan_set+0x1c2>
    da98:	e74a      	b.n	d930 <chan_set+0x88>
				LL_ASSERT(0);
    da9a:	4b16      	ldr	r3, [pc, #88]	; (daf4 <chan_set+0x24c>)
    da9c:	9301      	str	r3, [sp, #4]
    da9e:	9300      	str	r3, [sp, #0]
    daa0:	4a15      	ldr	r2, [pc, #84]	; (daf8 <chan_set+0x250>)
    daa2:	4b16      	ldr	r3, [pc, #88]	; (dafc <chan_set+0x254>)
    daa4:	4916      	ldr	r1, [pc, #88]	; (db00 <chan_set+0x258>)
    daa6:	4817      	ldr	r0, [pc, #92]	; (db04 <chan_set+0x25c>)
    daa8:	f7f3 fe1a 	bl	16e0 <printk>
    daac:	4040      	eors	r0, r0
    daae:	f380 8811 	msr	BASEPRI, r0
    dab2:	f04f 0004 	mov.w	r0, #4
    dab6:	df02      	svc	2
    dab8:	20000b98 	.word	0x20000b98
    dabc:	20005344 	.word	0x20005344
    dac0:	200053ac 	.word	0x200053ac
    dac4:	20005400 	.word	0x20005400
    dac8:	20005420 	.word	0x20005420
    dacc:	20001940 	.word	0x20001940
    dad0:	200053b0 	.word	0x200053b0
    dad4:	20005408 	.word	0x20005408
    dad8:	20005414 	.word	0x20005414
    dadc:	200053dc 	.word	0x200053dc
    dae0:	20005330 	.word	0x20005330
    dae4:	200053d0 	.word	0x200053d0
    dae8:	20001918 	.word	0x20001918
    daec:	20001920 	.word	0x20001920
    daf0:	20005338 	.word	0x20005338
    daf4:	0001868d 	.word	0x0001868d
    daf8:	00019a84 	.word	0x00019a84
    dafc:	0001b24d 	.word	0x0001b24d
    db00:	00019a8b 	.word	0x00019a8b
    db04:	000197a5 	.word	0x000197a5
    db08:	200053c8 	.word	0x200053c8
    db0c:	20008a44 	.word	0x20008a44
    db10:	20008a40 	.word	0x20008a40

0000db14 <adv_setup>:
{
    db14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.advertiser.adv_data.first !=
    db18:	4c8c      	ldr	r4, [pc, #560]	; (dd4c <adv_setup+0x238>)
    db1a:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    db1e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    db22:	429a      	cmp	r2, r3
    db24:	f000 80db 	beq.w	dcde <adv_setup+0x1ca>
		first = _radio.advertiser.adv_data.first + 1;
    db28:	3301      	adds	r3, #1
    db2a:	b2db      	uxtb	r3, r3
			first = 0;
    db2c:	2b02      	cmp	r3, #2
    db2e:	bf08      	it	eq
    db30:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    db32:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    db36:	f04f 0a01 	mov.w	sl, #1
	if (_radio.advertiser.scan_data.first != _radio.
    db3a:	f894 3c14 	ldrb.w	r3, [r4, #3092]	; 0xc14
    db3e:	f894 2c15 	ldrb.w	r2, [r4, #3093]	; 0xc15
    db42:	429a      	cmp	r2, r3
    db44:	d008      	beq.n	db58 <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    db46:	3301      	adds	r3, #1
    db48:	b2db      	uxtb	r3, r3
			first = 0;
    db4a:	2b02      	cmp	r3, #2
    db4c:	bf08      	it	eq
    db4e:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    db50:	f884 3c14 	strb.w	r3, [r4, #3092]	; 0xc14
		upd = 1;
    db54:	f04f 0a01 	mov.w	sl, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    db58:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    db5c:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    db60:	372c      	adds	r7, #44	; 0x2c
    db62:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    db66:	5de3      	ldrb	r3, [r4, r7]
    db68:	f003 030f 	and.w	r3, r3, #15
    db6c:	2b07      	cmp	r3, #7
    db6e:	d160      	bne.n	dc32 <adv_setup+0x11e>
			if(h->adv_addr){
    db70:	f899 3003 	ldrb.w	r3, [r9, #3]
    db74:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    db76:	bf4c      	ite	mi
    db78:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    db7c:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    db80:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    db82:	bf48      	it	mi
    db84:	3506      	addmi	r5, #6
			if(h->adi){
    db86:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    db88:	bf48      	it	mi
    db8a:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    db8c:	06da      	lsls	r2, r3, #27
    db8e:	d54a      	bpl.n	dc26 <adv_setup+0x112>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    db90:	f8d4 2c84 	ldr.w	r2, [r4, #3204]	; 0xc84
    db94:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    db98:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    db9c:	4413      	add	r3, r2
    db9e:	f894 2c69 	ldrb.w	r2, [r4, #3177]	; 0xc69
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    dba2:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    dba6:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    dba8:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    dbaa:	f8c4 2c6c 	str.w	r2, [r4, #3180]	; 0xc6c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    dbae:	f040 80a6 	bne.w	dcfe <adv_setup+0x1ea>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    dbb2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    dbb6:	f003 0307 	and.w	r3, r3, #7
    dbba:	2b07      	cmp	r3, #7
    dbbc:	f040 8092 	bne.w	dce4 <adv_setup+0x1d0>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    dbc0:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    dbc4:	1a82      	subs	r2, r0, r2
    dbc6:	4610      	mov	r0, r2
    dbc8:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    dbca:	f8c4 2c7c 	str.w	r2, [r4, #3196]	; 0xc7c
				if(offset > 245700){
    dbce:	4a60      	ldr	r2, [pc, #384]	; (dd50 <adv_setup+0x23c>)
    dbd0:	78ae      	ldrb	r6, [r5, #2]
    dbd2:	f895 8000 	ldrb.w	r8, [r5]
    dbd6:	2300      	movs	r3, #0
    dbd8:	428b      	cmp	r3, r1
    dbda:	bf08      	it	eq
    dbdc:	4282      	cmpeq	r2, r0
    dbde:	f080 809f 	bcs.w	dd20 <adv_setup+0x20c>
					ap->offs = offset/300;
    dbe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
    dbe6:	2300      	movs	r3, #0
    dbe8:	f7f2 fb3e 	bl	268 <__aeabi_uldivmod>
    dbec:	f026 061f 	bic.w	r6, r6, #31
    dbf0:	7068      	strb	r0, [r5, #1]
    dbf2:	f3c0 2004 	ubfx	r0, r0, #8, #5
    dbf6:	4330      	orrs	r0, r6
    dbf8:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    dbfa:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    dbfe:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    dc02:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    dc06:	07db      	lsls	r3, r3, #31
    dc08:	d508      	bpl.n	dc1c <adv_setup+0x108>
					_radio.ext_advertiser.aux_pckt_chan++;
    dc0a:	f894 3c80 	ldrb.w	r3, [r4, #3200]	; 0xc80
    dc0e:	3301      	adds	r3, #1
    dc10:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    dc12:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    dc14:	bf08      	it	eq
    dc16:	2300      	moveq	r3, #0
    dc18:	f884 3c80 	strb.w	r3, [r4, #3200]	; 0xc80
				ap->chan_idx = 0x03;
    dc1c:	782b      	ldrb	r3, [r5, #0]
    dc1e:	2203      	movs	r2, #3
    dc20:	f362 0305 	bfi	r3, r2, #0, #6
    dc24:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;   //in order to change the aux packet channel index
    dc26:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    dc2a:	f36f 0300 	bfc	r3, #0, #1
    dc2e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (upd) {
    dc32:	f1ba 0f00 	cmp.w	sl, #0
    dc36:	d00b      	beq.n	dc50 <adv_setup+0x13c>
		struct pdu_adv *scan_pdu = (void *)
    dc38:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    dc3c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    dc40:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    dc42:	2206      	movs	r2, #6
    dc44:	f109 0102 	add.w	r1, r9, #2
    dc48:	f600 2014 	addw	r0, r0, #2580	; 0xa14
    dc4c:	f7f2 fcdc 	bl	608 <memcpy>
		radio_pkt_tx_set(pdu);
    dc50:	4648      	mov	r0, r9
    dc52:	f008 fb85 	bl	16360 <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    dc56:	5de3      	ldrb	r3, [r4, r7]
    dc58:	f003 030f 	and.w	r3, r3, #15
    dc5c:	2b02      	cmp	r3, #2
    dc5e:	d06d      	beq.n	dd3c <adv_setup+0x228>
    dc60:	2b07      	cmp	r3, #7
    dc62:	d06b      	beq.n	dd3c <adv_setup+0x228>
			_radio.state = STATE_TX;
    dc64:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    dc66:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    dc68:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    dc6a:	f008 fc9f 	bl	165ac <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    dc6e:	2000      	movs	r0, #0
    dc70:	f008 fbfe 	bl	16470 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    dc74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    dc78:	f3c3 0202 	ubfx	r2, r3, #0, #3
    dc7c:	b2d3      	uxtb	r3, r2
    dc7e:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    dc80:	2000      	movs	r0, #0
    dc82:	07ce      	lsls	r6, r1, #31
    dc84:	f100 0501 	add.w	r5, r0, #1
    dc88:	d55d      	bpl.n	dd46 <adv_setup+0x232>
			(_radio.advertiser.chan_map_current - 1);
    dc8a:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    dc8c:	4013      	ands	r3, r2
    dc8e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    dc92:	4d30      	ldr	r5, [pc, #192]	; (dd54 <adv_setup+0x240>)
			_radio.advertiser.chan_map_current &=
    dc94:	f363 0202 	bfi	r2, r3, #0, #3
    dc98:	4b2f      	ldr	r3, [pc, #188]	; (dd58 <adv_setup+0x244>)
    dc9a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    dc9e:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    dca2:	bf08      	it	eq
    dca4:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    dca6:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    dca8:	bf0c      	ite	eq
    dcaa:	3201      	addeq	r2, #1
			chan_case = 0 ;
    dcac:	2200      	movne	r2, #0
    dcae:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    dcb0:	f894 3c6a 	ldrb.w	r3, [r4, #3178]	; 0xc6a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    dcb4:	f894 2c68 	ldrb.w	r2, [r4, #3176]	; 0xc68
		_radio.ext_advertiser.event++;
    dcb8:	3301      	adds	r3, #1
    dcba:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    dcbc:	429a      	cmp	r2, r3
		count++;
    dcbe:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    dcc2:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
		count++;
    dcc6:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    dcc8:	bf38      	it	cc
    dcca:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    dccc:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    dcce:	bf38      	it	cc
    dcd0:	f884 3c6a 	strbcc.w	r3, [r4, #3178]	; 0xc6a
		chan_set(37 + chan);
    dcd4:	3025      	adds	r0, #37	; 0x25
}
    dcd6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		chan_set(37 + chan);
    dcda:	f7ff bde5 	b.w	d8a8 <chan_set>
	u8_t upd = 0;
    dcde:	f04f 0a00 	mov.w	sl, #0
    dce2:	e72a      	b.n	db3a <adv_setup+0x26>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    dce4:	2b06      	cmp	r3, #6
    dce6:	d104      	bne.n	dcf2 <adv_setup+0x1de>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    dce8:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	; 0xc74
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    dcec:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    dcee:	2100      	movs	r1, #0
    dcf0:	e76d      	b.n	dbce <adv_setup+0xba>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    dcf2:	2b04      	cmp	r3, #4
    dcf4:	f47f af6b 	bne.w	dbce <adv_setup+0xba>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    dcf8:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	; 0xc78
    dcfc:	e7f6      	b.n	dcec <adv_setup+0x1d8>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    dcfe:	f894 6c6a 	ldrb.w	r6, [r4, #3178]	; 0xc6a
    dd02:	4373      	muls	r3, r6
    dd04:	f8c4 3c6c 	str.w	r3, [r4, #3180]	; 0xc6c
					if(_radio.ext_advertiser.event == 0){
    dd08:	b926      	cbnz	r6, dd14 <adv_setup+0x200>
						start_dynamic_cal = k_cycle_get_32(); 
    dd0a:	f7f4 fcd3 	bl	26b4 <_timer_cycle_get_32>
    dd0e:	4b13      	ldr	r3, [pc, #76]	; (dd5c <adv_setup+0x248>)
    dd10:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    dd14:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    dd18:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	; 0xc6c
    dd1c:	1ac0      	subs	r0, r0, r3
    dd1e:	e7e6      	b.n	dcee <adv_setup+0x1da>
					ap->offs = offset /30;
    dd20:	221e      	movs	r2, #30
    dd22:	2300      	movs	r3, #0
    dd24:	f7f2 faa0 	bl	268 <__aeabi_uldivmod>
    dd28:	f026 061f 	bic.w	r6, r6, #31
    dd2c:	7068      	strb	r0, [r5, #1]
    dd2e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    dd32:	4306      	orrs	r6, r0
    dd34:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    dd36:	f36f 18c7 	bfc	r8, #7, #1
    dd3a:	e760      	b.n	dbfe <adv_setup+0xea>
			_radio.state = STATE_CLOSE;
    dd3c:	2303      	movs	r3, #3
    dd3e:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    dd40:	f008 fbac 	bl	1649c <radio_switch_complete_and_disable>
    dd44:	e796      	b.n	dc74 <adv_setup+0x160>
			bitmap >>= 1;
    dd46:	0849      	lsrs	r1, r1, #1
    dd48:	4628      	mov	r0, r5
    dd4a:	e79a      	b.n	dc82 <adv_setup+0x16e>
    dd4c:	20000b98 	.word	0x20000b98
    dd50:	0003bfc4 	.word	0x0003bfc4
    dd54:	20001913 	.word	0x20001913
    dd58:	20001912 	.word	0x20001912
    dd5c:	20005338 	.word	0x20005338

0000dd60 <ext_adv_setup>:
{
    dd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.advertiser.adv_data.first !=
    dd64:	4c63      	ldr	r4, [pc, #396]	; (def4 <ext_adv_setup+0x194>)
    dd66:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    dd6a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    dd6e:	429a      	cmp	r2, r3
    dd70:	d02d      	beq.n	ddce <ext_adv_setup+0x6e>
		first = _radio.advertiser.adv_data.first + 1;
    dd72:	3301      	adds	r3, #1
    dd74:	b2db      	uxtb	r3, r3
			first = 0;
    dd76:	2b02      	cmp	r3, #2
    dd78:	bf08      	it	eq
    dd7a:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    dd7c:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    dd80:	f04f 0801 	mov.w	r8, #1
	if (_radio.advertiser.scan_data.first != _radio.
    dd84:	f894 3c14 	ldrb.w	r3, [r4, #3092]	; 0xc14
    dd88:	f894 2c15 	ldrb.w	r2, [r4, #3093]	; 0xc15
    dd8c:	429a      	cmp	r2, r3
    dd8e:	d008      	beq.n	dda2 <ext_adv_setup+0x42>
		first = _radio.advertiser.scan_data.first + 1;
    dd90:	3301      	adds	r3, #1
    dd92:	b2db      	uxtb	r3, r3
			first = 0;
    dd94:	2b02      	cmp	r3, #2
    dd96:	bf08      	it	eq
    dd98:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    dd9a:	f884 3c14 	strb.w	r3, [r4, #3092]	; 0xc14
		upd = 1;
    dd9e:	f04f 0801 	mov.w	r8, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    dda2:	f894 622e 	ldrb.w	r6, [r4, #558]	; 0x22e
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    dda6:	f894 5433 	ldrb.w	r5, [r4, #1075]	; 0x433
	switch(_radio.ext_advertiser.aux_chain_count_current){
    ddaa:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
	pdu = (void *)_radio.advertiser.adv_data.data
    ddae:	eb06 2606 	add.w	r6, r6, r6, lsl #8
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    ddb2:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    ddb6:	362c      	adds	r6, #44	; 0x2c
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    ddb8:	f505 750c 	add.w	r5, r5, #560	; 0x230
	pdu = (void *)_radio.advertiser.adv_data.data
    ddbc:	19a7      	adds	r7, r4, r6
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    ddbe:	4425      	add	r5, r4
	switch(_radio.ext_advertiser.aux_chain_count_current){
    ddc0:	2b05      	cmp	r3, #5
    ddc2:	d80d      	bhi.n	dde0 <ext_adv_setup+0x80>
    ddc4:	e8df f003 	tbb	[pc, r3]
    ddc8:	68605606 	.word	0x68605606
    ddcc:	7870      	.short	0x7870
	u8_t upd = 0;
    ddce:	f04f 0800 	mov.w	r8, #0
    ddd2:	e7d7      	b.n	dd84 <ext_adv_setup+0x24>
			memcpy(aux_pdu, copy_pdu, 257);
    ddd4:	f240 1201 	movw	r2, #257	; 0x101
    ddd8:	4947      	ldr	r1, [pc, #284]	; (def8 <ext_adv_setup+0x198>)
    ddda:	4628      	mov	r0, r5
    dddc:	f7f2 fc14 	bl	608 <memcpy>
		if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    dde0:	5da3      	ldrb	r3, [r4, r6]
    dde2:	f003 030f 	and.w	r3, r3, #15
    dde6:	2b07      	cmp	r3, #7
    dde8:	d11a      	bne.n	de20 <ext_adv_setup+0xc0>
			if(h->adv_addr){
    ddea:	78fa      	ldrb	r2, [r7, #3]
    ddec:	07d3      	lsls	r3, r2, #31
				ptr += BDADDR_SIZE;
    ddee:	bf4c      	ite	mi
    ddf0:	f107 030a 	addmi.w	r3, r7, #10
		ptr = (u8_t *)h + sizeof(*h);
    ddf4:	1d3b      	addpl	r3, r7, #4
			if(h->tgt_addr){
    ddf6:	0790      	lsls	r0, r2, #30
				ptr += BDADDR_SIZE;
    ddf8:	bf48      	it	mi
    ddfa:	3306      	addmi	r3, #6
			if(h->adi){
    ddfc:	0711      	lsls	r1, r2, #28
				ptr += sizeof(*adi_ptr);
    ddfe:	bf48      	it	mi
    de00:	3302      	addmi	r3, #2
			if(h->aux_ptr){
    de02:	06d2      	lsls	r2, r2, #27
    de04:	d50c      	bpl.n	de20 <ext_adv_setup+0xc0>
					ap->offs = offset /30;
    de06:	2206      	movs	r2, #6
    de08:	705a      	strb	r2, [r3, #1]
    de0a:	789a      	ldrb	r2, [r3, #2]
    de0c:	f022 021f 	bic.w	r2, r2, #31
    de10:	709a      	strb	r2, [r3, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    de12:	781a      	ldrb	r2, [r3, #0]
				ap->chan_idx = 0x03;
    de14:	2103      	movs	r1, #3
    de16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    de1a:	f361 0205 	bfi	r2, r1, #0, #6
    de1e:	701a      	strb	r2, [r3, #0]
	if (upd) {
    de20:	f1b8 0f00 	cmp.w	r8, #0
    de24:	d00a      	beq.n	de3c <ext_adv_setup+0xdc>
		struct pdu_adv *scan_pdu = (void *)
    de26:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
    de2a:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    de2e:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    de30:	2206      	movs	r2, #6
    de32:	1cb9      	adds	r1, r7, #2
    de34:	f600 2014 	addw	r0, r0, #2580	; 0xa14
    de38:	f7f2 fbe6 	bl	608 <memcpy>
			radio_pkt_tx_set(aux_pdu);
    de3c:	4628      	mov	r0, r5
    de3e:	f008 fa8f 	bl	16360 <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    de42:	5da3      	ldrb	r3, [r4, r6]
    de44:	f003 030f 	and.w	r3, r3, #15
    de48:	2b02      	cmp	r3, #2
    de4a:	d03d      	beq.n	dec8 <ext_adv_setup+0x168>
    de4c:	2b07      	cmp	r3, #7
    de4e:	d03b      	beq.n	dec8 <ext_adv_setup+0x168>
				_radio.state = STATE_TX;
    de50:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    de52:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    de54:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    de56:	f008 fba9 	bl	165ac <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    de5a:	2000      	movs	r0, #0
    de5c:	f008 fb08 	bl	16470 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;			// for packets which are transmittedon primaty channels
    de60:	2300      	movs	r3, #0
    de62:	f884 3c69 	strb.w	r3, [r4, #3177]	; 0xc69
			_radio.ext_advertiser.event = 0;				// skip number of events before transmitting aux
    de66:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
			chan_set(03);
    de6a:	2003      	movs	r0, #3
}
    de6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			chan_set(03);
    de70:	f7ff bd1a 	b.w	d8a8 <chan_set>
			memcpy(aux_pdu, copy_pdu, 257);
    de74:	f240 1201 	movw	r2, #257	; 0x101
    de78:	4920      	ldr	r1, [pc, #128]	; (defc <ext_adv_setup+0x19c>)
    de7a:	4628      	mov	r0, r5
    de7c:	f7f2 fbc4 	bl	608 <memcpy>
			chan_set(1);
    de80:	2001      	movs	r0, #1
			chan_set(5);
    de82:	f7ff fd11 	bl	d8a8 <chan_set>
			break;
    de86:	e7ab      	b.n	dde0 <ext_adv_setup+0x80>
			memcpy(aux_pdu, copy_pdu, 257);
    de88:	f240 1201 	movw	r2, #257	; 0x101
    de8c:	491c      	ldr	r1, [pc, #112]	; (df00 <ext_adv_setup+0x1a0>)
    de8e:	4628      	mov	r0, r5
    de90:	f7f2 fbba 	bl	608 <memcpy>
			chan_set(2);
    de94:	2002      	movs	r0, #2
    de96:	e7f4      	b.n	de82 <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    de98:	f240 1201 	movw	r2, #257	; 0x101
    de9c:	4919      	ldr	r1, [pc, #100]	; (df04 <ext_adv_setup+0x1a4>)
    de9e:	4628      	mov	r0, r5
    dea0:	f7f2 fbb2 	bl	608 <memcpy>
			chan_set(3);
    dea4:	2003      	movs	r0, #3
    dea6:	e7ec      	b.n	de82 <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    dea8:	f240 1201 	movw	r2, #257	; 0x101
    deac:	4916      	ldr	r1, [pc, #88]	; (df08 <ext_adv_setup+0x1a8>)
    deae:	4628      	mov	r0, r5
    deb0:	f7f2 fbaa 	bl	608 <memcpy>
			chan_set(4);
    deb4:	2004      	movs	r0, #4
    deb6:	e7e4      	b.n	de82 <ext_adv_setup+0x122>
			memcpy(aux_pdu, copy_pdu, 257);
    deb8:	f240 1201 	movw	r2, #257	; 0x101
    debc:	4913      	ldr	r1, [pc, #76]	; (df0c <ext_adv_setup+0x1ac>)
    debe:	4628      	mov	r0, r5
    dec0:	f7f2 fba2 	bl	608 <memcpy>
			chan_set(5);
    dec4:	2005      	movs	r0, #5
    dec6:	e7dc      	b.n	de82 <ext_adv_setup+0x122>
				chain_flag = 1;
    dec8:	4a11      	ldr	r2, [pc, #68]	; (df10 <ext_adv_setup+0x1b0>)
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    deca:	f894 1c8c 	ldrb.w	r1, [r4, #3212]	; 0xc8c
				chain_flag = 1;
    dece:	2301      	movs	r3, #1
    ded0:	7013      	strb	r3, [r2, #0]
				_radio.ext_advertiser.aux_chain_count_current++;
    ded2:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
    ded6:	3301      	adds	r3, #1
    ded8:	b2db      	uxtb	r3, r3
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    deda:	4299      	cmp	r1, r3
				_radio.ext_advertiser.aux_chain_count_current++;
    dedc:	f884 3c8d 	strb.w	r3, [r4, #3213]	; 0xc8d
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    dee0:	d1b6      	bne.n	de50 <ext_adv_setup+0xf0>
					_radio.advertiser.ext_adv = 1;
    dee2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    dee6:	f043 0301 	orr.w	r3, r3, #1
    deea:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					chain_flag = 0;
    deee:	2300      	movs	r3, #0
    def0:	7013      	strb	r3, [r2, #0]
    def2:	e7ad      	b.n	de50 <ext_adv_setup+0xf0>
    def4:	20000b98 	.word	0x20000b98
    def8:	20000fcc 	.word	0x20000fcc
    defc:	200010cd 	.word	0x200010cd
    df00:	200011ce 	.word	0x200011ce
    df04:	200012cf 	.word	0x200012cf
    df08:	200013d0 	.word	0x200013d0
    df0c:	200014d1 	.word	0x200014d1
    df10:	20001911 	.word	0x20001911
    df14:	00000000 	.word	0x00000000

0000df18 <sched_free_win_offset_calc>:
{
    df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df1c:	b08f      	sub	sp, #60	; 0x3c
    df1e:	4692      	mov	sl, r2
    df20:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    df22:	6803      	ldr	r3, [r0, #0]
{
    df24:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    df26:	2b00      	cmp	r3, #0
{
    df28:	4680      	mov	r8, r0
    df2a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    df2c:	da3a      	bge.n	dfa4 <sched_free_win_offset_calc+0x8c>
		u32_t ticks_prepare_to_start =
    df2e:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    df30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    df34:	4291      	cmp	r1, r2
    df36:	bf2c      	ite	cs
    df38:	1a5a      	subcs	r2, r3, r1
    df3a:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    df3c:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    df3e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    df42:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    df44:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    df46:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    df48:	18d3      	adds	r3, r2, r3
    df4a:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    df4c:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    df50:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    df54:	940c      	str	r4, [sp, #48]	; 0x30
    df56:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    df58:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    df5a:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    df5c:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    df5e:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    df60:	2302      	movs	r3, #2
    df62:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    df64:	ab0d      	add	r3, sp, #52	; 0x34
    df66:	9302      	str	r3, [sp, #8]
    df68:	4b81      	ldr	r3, [pc, #516]	; (e170 <sched_free_win_offset_calc+0x258>)
    df6a:	9301      	str	r3, [sp, #4]
    df6c:	ab0b      	add	r3, sp, #44	; 0x2c
    df6e:	9300      	str	r3, [sp, #0]
    df70:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    df74:	ab0c      	add	r3, sp, #48	; 0x30
    df76:	2101      	movs	r1, #1
    df78:	2000      	movs	r0, #0
    df7a:	f7fd f995 	bl	b2a8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    df7e:	2802      	cmp	r0, #2
    df80:	d019      	beq.n	dfb6 <sched_free_win_offset_calc+0x9e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    df82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    df84:	b1db      	cbz	r3, dfbe <sched_free_win_offset_calc+0xa6>
    df86:	4b7b      	ldr	r3, [pc, #492]	; (e174 <sched_free_win_offset_calc+0x25c>)
    df88:	9301      	str	r3, [sp, #4]
    df8a:	9300      	str	r3, [sp, #0]
    df8c:	4a7a      	ldr	r2, [pc, #488]	; (e178 <sched_free_win_offset_calc+0x260>)
    df8e:	4b7b      	ldr	r3, [pc, #492]	; (e17c <sched_free_win_offset_calc+0x264>)
    df90:	497b      	ldr	r1, [pc, #492]	; (e180 <sched_free_win_offset_calc+0x268>)
    df92:	487c      	ldr	r0, [pc, #496]	; (e184 <sched_free_win_offset_calc+0x26c>)
			LL_ASSERT(0);
    df94:	f7f3 fba4 	bl	16e0 <printk>
    df98:	4040      	eors	r0, r0
    df9a:	f380 8811 	msr	BASEPRI, r0
    df9e:	f04f 0004 	mov.w	r0, #4
    dfa2:	df02      	svc	2
		u32_t ticks_prepare_to_start =
    dfa4:	4293      	cmp	r3, r2
    dfa6:	bf38      	it	cc
    dfa8:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    dfaa:	2200      	movs	r2, #0
    dfac:	e7c6      	b.n	df3c <sched_free_win_offset_calc+0x24>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    dfae:	2101      	movs	r1, #1
    dfb0:	2000      	movs	r0, #0
    dfb2:	f7fd f9f7 	bl	b3a4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    dfb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dfb8:	2b02      	cmp	r3, #2
    dfba:	d0f8      	beq.n	dfae <sched_free_win_offset_calc+0x96>
    dfbc:	e7e1      	b.n	df82 <sched_free_win_offset_calc+0x6a>
		if (ticker_id == 0xff) {
    dfbe:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    dfc2:	2aff      	cmp	r2, #255	; 0xff
    dfc4:	d065      	beq.n	e092 <sched_free_win_offset_calc+0x17a>
		if ((ticker_id_prev != 0xff) &&
    dfc6:	2fff      	cmp	r7, #255	; 0xff
    dfc8:	d00a      	beq.n	dfe0 <sched_free_win_offset_calc+0xc8>
    dfca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dfcc:	4599      	cmp	r9, r3
    dfce:	d007      	beq.n	dfe0 <sched_free_win_offset_calc+0xc8>
			LL_ASSERT(0);
    dfd0:	4b68      	ldr	r3, [pc, #416]	; (e174 <sched_free_win_offset_calc+0x25c>)
    dfd2:	9301      	str	r3, [sp, #4]
    dfd4:	9300      	str	r3, [sp, #0]
    dfd6:	4a68      	ldr	r2, [pc, #416]	; (e178 <sched_free_win_offset_calc+0x260>)
    dfd8:	4b68      	ldr	r3, [pc, #416]	; (e17c <sched_free_win_offset_calc+0x264>)
    dfda:	4969      	ldr	r1, [pc, #420]	; (e180 <sched_free_win_offset_calc+0x268>)
    dfdc:	486a      	ldr	r0, [pc, #424]	; (e188 <sched_free_win_offset_calc+0x270>)
    dfde:	e7d9      	b.n	df94 <sched_free_win_offset_calc+0x7c>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    dfe0:	2a05      	cmp	r2, #5
    dfe2:	d951      	bls.n	e088 <sched_free_win_offset_calc+0x170>
				  _radio.connection_count)) {
    dfe4:	4869      	ldr	r0, [pc, #420]	; (e18c <sched_free_win_offset_calc+0x274>)
    dfe6:	f890 3cf8 	ldrb.w	r3, [r0, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    dfea:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    dfec:	429a      	cmp	r2, r3
    dfee:	da4b      	bge.n	e088 <sched_free_win_offset_calc+0x170>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    dff0:	2a06      	cmp	r2, #6
    dff2:	f000 8092 	beq.w	e11a <sched_free_win_offset_calc+0x202>
		if (ticker_id_other != 0xFF) {
    dff6:	9b06      	ldr	r3, [sp, #24]
    dff8:	2bff      	cmp	r3, #255	; 0xff
    dffa:	d14a      	bne.n	e092 <sched_free_win_offset_calc+0x17a>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    dffc:	3a07      	subs	r2, #7
    dffe:	b292      	uxth	r2, r2
    e000:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e004:	f8d0 0cf0 	ldr.w	r0, [r0, #3312]	; 0xcf0
    e008:	f7fc fa20 	bl	a44c <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    e00c:	4580      	cmp	r8, r0
    e00e:	d03b      	beq.n	e088 <sched_free_win_offset_calc+0x170>
    e010:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e012:	b91b      	cbnz	r3, e01c <sched_free_win_offset_calc+0x104>
    e014:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e018:	2b00      	cmp	r3, #0
    e01a:	db35      	blt.n	e088 <sched_free_win_offset_calc+0x170>
			u32_t ticks_to_expire_normal =
    e01c:	9b05      	ldr	r3, [sp, #20]
    e01e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    e020:	6841      	ldr	r1, [r0, #4]
    e022:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e024:	6803      	ldr	r3, [r0, #0]
    e026:	2b00      	cmp	r3, #0
    e028:	da4e      	bge.n	e0c8 <sched_free_win_offset_calc+0x1b0>
				u32_t ticks_prepare_to_start =
    e02a:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    e02c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e030:	428a      	cmp	r2, r1
    e032:	bf2c      	ite	cs
    e034:	18b6      	addcs	r6, r6, r2
    e036:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    e038:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    e03a:	68c2      	ldr	r2, [r0, #12]
    e03c:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    e040:	444b      	add	r3, r9
    e042:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    e044:	f8da 3000 	ldr.w	r3, [sl]
    e048:	429e      	cmp	r6, r3
    e04a:	d916      	bls.n	e07a <sched_free_win_offset_calc+0x162>
    e04c:	429d      	cmp	r5, r3
    e04e:	bf38      	it	cc
    e050:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    e052:	9b07      	ldr	r3, [sp, #28]
    e054:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    e058:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e05a:	781b      	ldrb	r3, [r3, #0]
    e05c:	42a3      	cmp	r3, r4
    e05e:	d905      	bls.n	e06c <sched_free_win_offset_calc+0x154>
				       (ticker_ticks_diff_get(
    e060:	4629      	mov	r1, r5
    e062:	4630      	mov	r0, r6
    e064:	f7fd f9b6 	bl	b3d4 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    e068:	42b8      	cmp	r0, r7
    e06a:	d231      	bcs.n	e0d0 <sched_free_win_offset_calc+0x1b8>
				if (_win_offset >= conn_interval) {
    e06c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    e070:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    e072:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    e076:	4293      	cmp	r3, r2
    e078:	d20b      	bcs.n	e092 <sched_free_win_offset_calc+0x17a>
			ticks_anchor_prev = ticks_anchor;
    e07a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    e07e:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    e082:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    e086:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    e088:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e08a:	781b      	ldrb	r3, [r3, #0]
    e08c:	42a3      	cmp	r3, r4
    e08e:	f63f af67 	bhi.w	df60 <sched_free_win_offset_calc+0x48>
	if (ticker_id == 0xFF) {
    e092:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    e096:	2bff      	cmp	r3, #255	; 0xff
    e098:	d111      	bne.n	e0be <sched_free_win_offset_calc+0x1a6>
    e09a:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e09e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; e190 <sched_free_win_offset_calc+0x278>
    e0a2:	a731      	add	r7, pc, #196	; (adr r7, e168 <sched_free_win_offset_calc+0x250>)
    e0a4:	e9d7 6700 	ldrd	r6, r7, [r7]
    e0a8:	429d      	cmp	r5, r3
    e0aa:	bf38      	it	cc
    e0ac:	461d      	movcc	r5, r3
    e0ae:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    e0b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	42a3      	cmp	r3, r4
    e0b8:	d831      	bhi.n	e11e <sched_free_win_offset_calc+0x206>
		*ticks_to_offset_next = ticks_to_expire_prev;
    e0ba:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    e0be:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e0c0:	701c      	strb	r4, [r3, #0]
}
    e0c2:	b00f      	add	sp, #60	; 0x3c
    e0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				u32_t ticks_prepare_to_start =
    e0c8:	428b      	cmp	r3, r1
    e0ca:	bf38      	it	cc
    e0cc:	460b      	movcc	r3, r1
    e0ce:	e7b4      	b.n	e03a <sched_free_win_offset_calc+0x122>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e0d0:	4a2f      	ldr	r2, [pc, #188]	; (e190 <sched_free_win_offset_calc+0x278>)
    e0d2:	eb05 030b 	add.w	r3, r5, fp
    e0d6:	fba3 0102 	umull	r0, r1, r3, r2
    e0da:	2207      	movs	r2, #7
    e0dc:	fb02 1103 	mla	r1, r2, r3, r1
    e0e0:	a321      	add	r3, pc, #132	; (adr r3, e168 <sched_free_win_offset_calc+0x250>)
    e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    e0e6:	f7f2 f8bf 	bl	268 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    e0ea:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e0ee:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    e0f2:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e0f4:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    e0f6:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    e0f8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    e0fc:	d20b      	bcs.n	e116 <sched_free_win_offset_calc+0x1fe>
					memcpy(win_offset +
    e0fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e100:	2202      	movs	r2, #2
    e102:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    e106:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    e10a:	3401      	adds	r4, #1
					memcpy(win_offset +
    e10c:	f7f2 fa7c 	bl	608 <memcpy>
					offset_index++;
    e110:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    e112:	3528      	adds	r5, #40	; 0x28
    e114:	e7a0      	b.n	e058 <sched_free_win_offset_calc+0x140>
						ticks_to_expire_prev = 0;
    e116:	2500      	movs	r5, #0
    e118:	e7a8      	b.n	e06c <sched_free_win_offset_calc+0x154>
    e11a:	9206      	str	r2, [sp, #24]
    e11c:	e7b4      	b.n	e088 <sched_free_win_offset_calc+0x170>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e11e:	eb05 030b 	add.w	r3, r5, fp
    e122:	fba3 0108 	umull	r0, r1, r3, r8
    e126:	fb09 1103 	mla	r1, r9, r3, r1
    e12a:	4632      	mov	r2, r6
    e12c:	463b      	mov	r3, r7
    e12e:	f7f2 f89b 	bl	268 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    e132:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e136:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    e13a:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e13c:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    e13e:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    e140:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    e144:	d90b      	bls.n	e15e <sched_free_win_offset_calc+0x246>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    e146:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e148:	2202      	movs	r2, #2
    e14a:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    e14e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    e152:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    e154:	f7f2 fa58 	bl	608 <memcpy>
			offset_index++;
    e158:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    e15a:	3528      	adds	r5, #40	; 0x28
    e15c:	e7a9      	b.n	e0b2 <sched_free_win_offset_calc+0x19a>
				ticks_to_expire_prev = 0;
    e15e:	2500      	movs	r5, #0
    e160:	e7ab      	b.n	e0ba <sched_free_win_offset_calc+0x1a2>
    e162:	bf00      	nop
    e164:	f3af 8000 	nop.w
    e168:	3b9aca00 	.word	0x3b9aca00
    e16c:	00000000 	.word	0x00000000
    e170:	0000d0bd 	.word	0x0000d0bd
    e174:	0001868d 	.word	0x0001868d
    e178:	00019a84 	.word	0x00019a84
    e17c:	0001b200 	.word	0x0001b200
    e180:	00019a8b 	.word	0x00019a8b
    e184:	0001bf7d 	.word	0x0001bf7d
    e188:	000197a5 	.word	0x000197a5
    e18c:	20000b98 	.word	0x20000b98
    e190:	1afd498d 	.word	0x1afd498d

0000e194 <mayfly_sched_free_win_offset_calc>:
{
    e194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    e196:	2300      	movs	r3, #0
    e198:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    e19a:	2306      	movs	r3, #6
    e19c:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    e1a0:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e1a4:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    e1a8:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    e1aa:	bfbe      	ittt	lt
    e1ac:	4602      	movlt	r2, r0
    e1ae:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    e1b0:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e1b4:	9101      	str	r1, [sp, #4]
    e1b6:	f10d 010b 	add.w	r1, sp, #11
    e1ba:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    e1bc:	bfa8      	it	ge
    e1be:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    e1c0:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    e1c4:	2100      	movs	r1, #0
    e1c6:	f7ff fea7 	bl	df18 <sched_free_win_offset_calc>
}
    e1ca:	b005      	add	sp, #20
    e1cc:	f85d fb04 	ldr.w	pc, [sp], #4

0000e1d0 <mayfly_sched_win_offset_select>:
{
    e1d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e1d4:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    e1d8:	b089      	sub	sp, #36	; 0x24
    e1da:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e1dc:	4840      	ldr	r0, [pc, #256]	; (e2e0 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    e1de:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e1e0:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e1e2:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    e1e6:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e1ea:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e1ee:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e1f0:	fb03 1102 	mla	r1, r3, r2, r1
    e1f4:	a338      	add	r3, pc, #224	; (adr r3, e2d8 <mayfly_sched_win_offset_select+0x108>)
    e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    e1fa:	9505      	str	r5, [sp, #20]
    e1fc:	6075      	str	r5, [r6, #4]
    e1fe:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e200:	f7f2 f832 	bl	268 <__aeabi_uldivmod>
    e204:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    e206:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    e20a:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    e20e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    e212:	9100      	str	r1, [sp, #0]
    e214:	9601      	str	r6, [sp, #4]
    e216:	2101      	movs	r1, #1
    e218:	4620      	mov	r0, r4
    e21a:	f7ff fe7d 	bl	df18 <sched_free_win_offset_calc>
    e21e:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    e222:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    e226:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    e22a:	2202      	movs	r2, #2
    e22c:	4639      	mov	r1, r7
    e22e:	f10d 000e 	add.w	r0, sp, #14
    e232:	f7f2 f9e9 	bl	608 <memcpy>
		while (offset_index_m < offset_m_max) {
    e236:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    e23a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    e23e:	2300      	movs	r3, #0
    e240:	b2d9      	uxtb	r1, r3
    e242:	4288      	cmp	r0, r1
    e244:	d811      	bhi.n	e26a <mayfly_sched_win_offset_select+0x9a>
    e246:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    e248:	4547      	cmp	r7, r8
    e24a:	d1ee      	bne.n	e22a <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    e24c:	b9b5      	cbnz	r5, e27c <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    e24e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e252:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e256:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    e258:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e25c:	2202      	movs	r2, #2
    e25e:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e260:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e264:	f7f2 f9d0 	bl	608 <memcpy>
    e268:	e027      	b.n	e2ba <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    e26a:	454a      	cmp	r2, r9
    e26c:	d004      	beq.n	e278 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    e26e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    e272:	4291      	cmp	r1, r2
    e274:	d024      	beq.n	e2c0 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    e276:	2501      	movs	r5, #1
    e278:	3301      	adds	r3, #1
    e27a:	e7e1      	b.n	e240 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    e27c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    e280:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    e284:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    e288:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    e28c:	4b15      	ldr	r3, [pc, #84]	; (e2e4 <mayfly_sched_win_offset_select+0x114>)
    e28e:	2200      	movs	r2, #0
    e290:	f8c3 2d70 	str.w	r2, [r3, #3440]	; 0xd70
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    e294:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    e298:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    e29c:	f042 0203 	orr.w	r2, r2, #3
    e2a0:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    e2a4:	2203      	movs	r2, #3
    e2a6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    e2aa:	2211      	movs	r2, #17
    e2ac:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    e2b0:	220f      	movs	r2, #15
    e2b2:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    e2b6:	2220      	movs	r2, #32
    e2b8:	701a      	strb	r2, [r3, #0]
}
    e2ba:	b009      	add	sp, #36	; 0x24
    e2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    e2c0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    e2c4:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    e2c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    e2ca:	2202      	movs	r2, #2
    e2cc:	f10d 010e 	add.w	r1, sp, #14
    e2d0:	e7c6      	b.n	e260 <mayfly_sched_win_offset_select+0x90>
    e2d2:	bf00      	nop
    e2d4:	f3af 8000 	nop.w
    e2d8:	1afd498d 	.word	0x1afd498d
    e2dc:	00000007 	.word	0x00000007
    e2e0:	09ce5400 	.word	0x09ce5400
    e2e4:	20000b98 	.word	0x20000b98

0000e2e8 <sched_after_mstr_free_slot_get>:
{
    e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2ec:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    e2ee:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    e2f0:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    e2f2:	f8df 9140 	ldr.w	r9, [pc, #320]	; e434 <sched_after_mstr_free_slot_get+0x14c>
	ticker_id = ticker_id_prev = 0xff;
    e2f6:	f88d 501f 	strb.w	r5, [sp, #31]
{
    e2fa:	4680      	mov	r8, r0
    e2fc:	4693      	mov	fp, r2
    e2fe:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    e300:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    e304:	601c      	str	r4, [r3, #0]
    e306:	9408      	str	r4, [sp, #32]
    e308:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    e30a:	2302      	movs	r3, #2
    e30c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    e30e:	ab09      	add	r3, sp, #36	; 0x24
    e310:	9302      	str	r3, [sp, #8]
    e312:	4b41      	ldr	r3, [pc, #260]	; (e418 <sched_after_mstr_free_slot_get+0x130>)
    e314:	9301      	str	r3, [sp, #4]
    e316:	ab08      	add	r3, sp, #32
    e318:	9300      	str	r3, [sp, #0]
    e31a:	f10d 021f 	add.w	r2, sp, #31
    e31e:	465b      	mov	r3, fp
    e320:	4641      	mov	r1, r8
    e322:	2000      	movs	r0, #0
    e324:	f7fc ffc0 	bl	b2a8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    e328:	2802      	cmp	r0, #2
    e32a:	d014      	beq.n	e356 <sched_after_mstr_free_slot_get+0x6e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    e32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e32e:	b1b3      	cbz	r3, e35e <sched_after_mstr_free_slot_get+0x76>
    e330:	4b3a      	ldr	r3, [pc, #232]	; (e41c <sched_after_mstr_free_slot_get+0x134>)
    e332:	9301      	str	r3, [sp, #4]
    e334:	9300      	str	r3, [sp, #0]
    e336:	4a3a      	ldr	r2, [pc, #232]	; (e420 <sched_after_mstr_free_slot_get+0x138>)
    e338:	4b3a      	ldr	r3, [pc, #232]	; (e424 <sched_after_mstr_free_slot_get+0x13c>)
    e33a:	493b      	ldr	r1, [pc, #236]	; (e428 <sched_after_mstr_free_slot_get+0x140>)
    e33c:	483b      	ldr	r0, [pc, #236]	; (e42c <sched_after_mstr_free_slot_get+0x144>)
    e33e:	f7f3 f9cf 	bl	16e0 <printk>
    e342:	4040      	eors	r0, r0
    e344:	f380 8811 	msr	BASEPRI, r0
    e348:	f04f 0004 	mov.w	r0, #4
    e34c:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    e34e:	4641      	mov	r1, r8
    e350:	2000      	movs	r0, #0
    e352:	f7fd f827 	bl	b3a4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    e356:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e358:	2b02      	cmp	r3, #2
    e35a:	d0f8      	beq.n	e34e <sched_after_mstr_free_slot_get+0x66>
    e35c:	e7e6      	b.n	e32c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    e35e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e362:	2aff      	cmp	r2, #255	; 0xff
    e364:	d04e      	beq.n	e404 <sched_after_mstr_free_slot_get+0x11c>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    e366:	2a06      	cmp	r2, #6
    e368:	d9cf      	bls.n	e30a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    e36a:	f899 3cf8 	ldrb.w	r3, [r9, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    e36e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    e370:	429a      	cmp	r2, r3
    e372:	daca      	bge.n	e30a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e374:	3a07      	subs	r2, #7
    e376:	b292      	uxth	r2, r2
    e378:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e37c:	f8d9 0cf0 	ldr.w	r0, [r9, #3312]	; 0xcf0
    e380:	f7fc f864 	bl	a44c <mem_get>
		if (conn && !conn->role) {
    e384:	2800      	cmp	r0, #0
    e386:	d0c0      	beq.n	e30a <sched_after_mstr_free_slot_get+0x22>
    e388:	f990 301d 	ldrsb.w	r3, [r0, #29]
    e38c:	2b00      	cmp	r3, #0
    e38e:	dbbc      	blt.n	e30a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e390:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    e392:	9a08      	ldr	r2, [sp, #32]
    e394:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    e398:	2b00      	cmp	r3, #0
    e39a:	da12      	bge.n	e3c2 <sched_after_mstr_free_slot_get+0xda>
    e39c:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    e39e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    e3a2:	4571      	cmp	r1, lr
    e3a4:	bf2c      	ite	cs
    e3a6:	1852      	addcs	r2, r2, r1
    e3a8:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    e3aa:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    e3ac:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    e3ae:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    e3b0:	f101 0104 	add.w	r1, r1, #4
    e3b4:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    e3b6:	d108      	bne.n	e3ca <sched_after_mstr_free_slot_get+0xe2>
			ticker_id_prev = ticker_id;
    e3b8:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    e3bc:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    e3be:	4616      	mov	r6, r2
    e3c0:	e7a3      	b.n	e30a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    e3c2:	4573      	cmp	r3, lr
    e3c4:	bf38      	it	cc
    e3c6:	4673      	movcc	r3, lr
    e3c8:	e7f0      	b.n	e3ac <sched_after_mstr_free_slot_get+0xc4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    e3ca:	4631      	mov	r1, r6
    e3cc:	4610      	mov	r0, r2
    e3ce:	9305      	str	r3, [sp, #20]
    e3d0:	9204      	str	r2, [sp, #16]
    e3d2:	f7fc ffff 	bl	b3d4 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    e3d6:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    e3da:	4288      	cmp	r0, r1
    e3dc:	9a04      	ldr	r2, [sp, #16]
    e3de:	9b05      	ldr	r3, [sp, #20]
    e3e0:	d9ea      	bls.n	e3b8 <sched_after_mstr_free_slot_get+0xd0>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    e3e2:	4813      	ldr	r0, [pc, #76]	; (e430 <sched_after_mstr_free_slot_get+0x148>)
    e3e4:	4434      	add	r4, r6
    e3e6:	fba4 0100 	umull	r0, r1, r4, r0
    e3ea:	2307      	movs	r3, #7
    e3ec:	fb03 1104 	mla	r1, r3, r4, r1
    e3f0:	a307      	add	r3, pc, #28	; (adr r3, e410 <sched_after_mstr_free_slot_get+0x128>)
    e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    e3f6:	f7f1 ff37 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    e3fa:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    e3fc:	6038      	str	r0, [r7, #0]
}
    e3fe:	b00b      	add	sp, #44	; 0x2c
    e400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    e404:	2dff      	cmp	r5, #255	; 0xff
    e406:	d1ec      	bne.n	e3e2 <sched_after_mstr_free_slot_get+0xfa>
    e408:	e7f9      	b.n	e3fe <sched_after_mstr_free_slot_get+0x116>
    e40a:	bf00      	nop
    e40c:	f3af 8000 	nop.w
    e410:	3b9aca00 	.word	0x3b9aca00
    e414:	00000000 	.word	0x00000000
    e418:	0000d0bd 	.word	0x0000d0bd
    e41c:	0001868d 	.word	0x0001868d
    e420:	00019a84 	.word	0x00019a84
    e424:	0001b1c0 	.word	0x0001b1c0
    e428:	00019a8b 	.word	0x00019a8b
    e42c:	0001bf7d 	.word	0x0001bf7d
    e430:	1afd498d 	.word	0x1afd498d
    e434:	20000b98 	.word	0x20000b98

0000e438 <isr_adv_ci_adva_check>:
{
    e438:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    e43a:	7804      	ldrb	r4, [r0, #0]
    e43c:	780a      	ldrb	r2, [r1, #0]
    e43e:	f3c4 1380 	ubfx	r3, r4, #6, #1
    e442:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e446:	d119      	bne.n	e47c <isr_adv_ci_adva_check+0x44>
    e448:	f004 040f 	and.w	r4, r4, #15
    e44c:	2c01      	cmp	r4, #1
    e44e:	f101 0608 	add.w	r6, r1, #8
    e452:	f100 0502 	add.w	r5, r0, #2
    e456:	d008      	beq.n	e46a <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    e458:	2206      	movs	r2, #6
    e45a:	4631      	mov	r1, r6
    e45c:	4628      	mov	r0, r5
    e45e:	f7f2 f8be 	bl	5de <memcmp>
			 BDADDR_SIZE)) ||
    e462:	fab0 f080 	clz	r0, r0
    e466:	0940      	lsrs	r0, r0, #5
    e468:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    e46a:	2206      	movs	r2, #6
    e46c:	4631      	mov	r1, r6
    e46e:	4628      	mov	r0, r5
    e470:	f7f2 f8b5 	bl	5de <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    e474:	2800      	cmp	r0, #0
    e476:	d1ef      	bne.n	e458 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    e478:	4620      	mov	r0, r4
    e47a:	bd70      	pop	{r4, r5, r6, pc}
    e47c:	2000      	movs	r0, #0
}
    e47e:	bd70      	pop	{r4, r5, r6, pc}

0000e480 <packet_rx_enqueue>:
{
    e480:	b513      	push	{r0, r1, r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    e482:	4a1e      	ldr	r2, [pc, #120]	; (e4fc <packet_rx_enqueue+0x7c>)
    e484:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
    e488:	f892 1d2a 	ldrb.w	r1, [r2, #3370]	; 0xd2a
    e48c:	4299      	cmp	r1, r3
    e48e:	d10e      	bne.n	e4ae <packet_rx_enqueue+0x2e>
    e490:	4b1b      	ldr	r3, [pc, #108]	; (e500 <packet_rx_enqueue+0x80>)
    e492:	9301      	str	r3, [sp, #4]
    e494:	9300      	str	r3, [sp, #0]
    e496:	4a1b      	ldr	r2, [pc, #108]	; (e504 <packet_rx_enqueue+0x84>)
    e498:	4b1b      	ldr	r3, [pc, #108]	; (e508 <packet_rx_enqueue+0x88>)
    e49a:	491c      	ldr	r1, [pc, #112]	; (e50c <packet_rx_enqueue+0x8c>)
    e49c:	481c      	ldr	r0, [pc, #112]	; (e510 <packet_rx_enqueue+0x90>)
	LL_ASSERT(link);
    e49e:	f7f3 f91f 	bl	16e0 <printk>
    e4a2:	4040      	eors	r0, r0
    e4a4:	f380 8811 	msr	BASEPRI, r0
    e4a8:	f04f 0004 	mov.w	r0, #4
    e4ac:	df02      	svc	2
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    e4ae:	f892 1d29 	ldrb.w	r1, [r2, #3369]	; 0xd29
    e4b2:	f8d2 3d24 	ldr.w	r3, [r2, #3364]	; 0xd24
    e4b6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    e4ba:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
	link = node_rx->hdr.onion.link;
    e4be:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    e4c0:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    e4c2:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
	if (last == _radio.packet_rx_count) {
    e4c6:	f892 4d28 	ldrb.w	r4, [r2, #3368]	; 0xd28
	last = _radio.packet_rx_last + 1;
    e4ca:	3301      	adds	r3, #1
    e4cc:	b2db      	uxtb	r3, r3
		last = 0;
    e4ce:	429c      	cmp	r4, r3
    e4d0:	bf08      	it	eq
    e4d2:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    e4d4:	f882 3d29 	strb.w	r3, [r2, #3369]	; 0xd29
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    e4d8:	f602 5238 	addw	r2, r2, #3384	; 0xd38
    e4dc:	f7fb ffdb 	bl	a496 <memq_enqueue>
	LL_ASSERT(link);
    e4e0:	b938      	cbnz	r0, e4f2 <packet_rx_enqueue+0x72>
    e4e2:	4b07      	ldr	r3, [pc, #28]	; (e500 <packet_rx_enqueue+0x80>)
    e4e4:	9301      	str	r3, [sp, #4]
    e4e6:	9300      	str	r3, [sp, #0]
    e4e8:	4a06      	ldr	r2, [pc, #24]	; (e504 <packet_rx_enqueue+0x84>)
    e4ea:	4b07      	ldr	r3, [pc, #28]	; (e508 <packet_rx_enqueue+0x88>)
    e4ec:	4907      	ldr	r1, [pc, #28]	; (e50c <packet_rx_enqueue+0x8c>)
    e4ee:	4809      	ldr	r0, [pc, #36]	; (e514 <packet_rx_enqueue+0x94>)
    e4f0:	e7d5      	b.n	e49e <packet_rx_enqueue+0x1e>
}
    e4f2:	b002      	add	sp, #8
    e4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    e4f8:	f006 bcf4 	b.w	14ee4 <radio_event_callback>
    e4fc:	20000b98 	.word	0x20000b98
    e500:	0001868d 	.word	0x0001868d
    e504:	00019a84 	.word	0x00019a84
    e508:	0001b351 	.word	0x0001b351
    e50c:	00019a8b 	.word	0x00019a8b
    e510:	0001bc3b 	.word	0x0001bc3b
    e514:	0001b44d 	.word	0x0001b44d

0000e518 <isr_scan_tgta_check>:
{
    e518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e51c:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e51e:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    e520:	f101 0808 	add.w	r8, r1, #8
{
    e524:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e526:	09c0      	lsrs	r0, r0, #7
    e528:	4641      	mov	r1, r8
{
    e52a:	4691      	mov	r9, r2
    e52c:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    e52e:	f007 f975 	bl	1581c <ctrl_rl_addr_resolve>
    e532:	4604      	mov	r4, r0
    e534:	b9d8      	cbnz	r0, e56e <isr_scan_tgta_check+0x56>
    e536:	4f1c      	ldr	r7, [pc, #112]	; (e5a8 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    e538:	f1ba 0f00 	cmp.w	sl, #0
    e53c:	d10e      	bne.n	e55c <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    e53e:	782b      	ldrb	r3, [r5, #0]
    e540:	f897 2c2d 	ldrb.w	r2, [r7, #3117]	; 0xc2d
			BDADDR_SIZE) == 0))) ||
    e544:	09db      	lsrs	r3, r3, #7
    e546:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    e54a:	d113      	bne.n	e574 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    e54c:	2206      	movs	r2, #6
    e54e:	4641      	mov	r1, r8
    e550:	4816      	ldr	r0, [pc, #88]	; (e5ac <isr_scan_tgta_check+0x94>)
    e552:	f7f2 f844 	bl	5de <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    e556:	b968      	cbnz	r0, e574 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    e558:	2001      	movs	r0, #1
    e55a:	e012      	b.n	e582 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    e55c:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
    e560:	07db      	lsls	r3, r3, #31
    e562:	d5ec      	bpl.n	e53e <isr_scan_tgta_check+0x26>
    e564:	4648      	mov	r0, r9
    e566:	f006 fec1 	bl	152ec <ctrl_lrpa_get>
    e56a:	2800      	cmp	r0, #0
    e56c:	d0e7      	beq.n	e53e <isr_scan_tgta_check+0x26>
}
    e56e:	4620      	mov	r0, r4
    e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    e574:	f897 0c2d 	ldrb.w	r0, [r7, #3117]	; 0xc2d
    e578:	f3c0 1001 	ubfx	r0, r0, #4, #2
    e57c:	f010 0002 	ands.w	r0, r0, #2
    e580:	d101      	bne.n	e586 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    e582:	4604      	mov	r4, r0
    e584:	e7f3      	b.n	e56e <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    e586:	f995 3000 	ldrsb.w	r3, [r5]
    e58a:	2b00      	cmp	r3, #0
    e58c:	da09      	bge.n	e5a2 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    e58e:	7b6b      	ldrb	r3, [r5, #13]
    e590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e594:	2b40      	cmp	r3, #64	; 0x40
    e596:	d104      	bne.n	e5a2 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    e598:	2e00      	cmp	r6, #0
    e59a:	d0dd      	beq.n	e558 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    e59c:	2001      	movs	r0, #1
    e59e:	7030      	strb	r0, [r6, #0]
    e5a0:	e7ef      	b.n	e582 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    e5a2:	2000      	movs	r0, #0
    e5a4:	e7ed      	b.n	e582 <isr_scan_tgta_check+0x6a>
    e5a6:	bf00      	nop
    e5a8:	20000b98 	.word	0x20000b98
    e5ac:	200017c8 	.word	0x200017c8

0000e5b0 <isr_rx_scan_report>:
{
    e5b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e5b4:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    e5b6:	2003      	movs	r0, #3
{
    e5b8:	460f      	mov	r7, r1
    e5ba:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    e5bc:	f7fe fdbe 	bl	d13c <packet_rx_reserve_get>
	if (node_rx == 0) {
    e5c0:	4604      	mov	r4, r0
    e5c2:	2800      	cmp	r0, #0
    e5c4:	d03e      	beq.n	e644 <isr_rx_scan_report+0x94>
	node_rx->hdr.handle = 0xffff;
    e5c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e5ca:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    e5cc:	4b1e      	ldr	r3, [pc, #120]	; (e648 <isr_rx_scan_report+0x98>)
    e5ce:	f893 3c2d 	ldrb.w	r3, [r3, #3117]	; 0xc2d
    e5d2:	075a      	lsls	r2, r3, #29
    e5d4:	d032      	beq.n	e63c <isr_rx_scan_report+0x8c>
		switch (_radio.scanner.phy) {
    e5d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    e5da:	b2da      	uxtb	r2, r3
    e5dc:	2a01      	cmp	r2, #1
    e5de:	d010      	beq.n	e602 <isr_rx_scan_report+0x52>
    e5e0:	2a04      	cmp	r2, #4
    e5e2:	d00f      	beq.n	e604 <isr_rx_scan_report+0x54>
			LL_ASSERT(0);
    e5e4:	4b19      	ldr	r3, [pc, #100]	; (e64c <isr_rx_scan_report+0x9c>)
    e5e6:	9301      	str	r3, [sp, #4]
    e5e8:	9300      	str	r3, [sp, #0]
    e5ea:	4a19      	ldr	r2, [pc, #100]	; (e650 <isr_rx_scan_report+0xa0>)
    e5ec:	4b19      	ldr	r3, [pc, #100]	; (e654 <isr_rx_scan_report+0xa4>)
    e5ee:	491a      	ldr	r1, [pc, #104]	; (e658 <isr_rx_scan_report+0xa8>)
    e5f0:	481a      	ldr	r0, [pc, #104]	; (e65c <isr_rx_scan_report+0xac>)
    e5f2:	f7f3 f875 	bl	16e0 <printk>
    e5f6:	4040      	eors	r0, r0
    e5f8:	f380 8811 	msr	BASEPRI, r0
    e5fc:	f04f 0004 	mov.w	r0, #4
    e600:	df02      	svc	2
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    e602:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    e604:	f894 8009 	ldrb.w	r8, [r4, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    e608:	7123      	strb	r3, [r4, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    e60a:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    e60e:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    e612:	f1b9 0f00 	cmp.w	r9, #0
    e616:	d013      	beq.n	e640 <isr_rx_scan_report+0x90>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    e618:	f007 ff58 	bl	164cc <radio_rssi_get>
			     pdu_adv_rx->len] =
    e61c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    e620:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    e624:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    e626:	442b      	add	r3, r5
    e628:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    e62a:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    e62c:	441d      	add	r5, r3
    e62e:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    e630:	f7ff ff26 	bl	e480 <packet_rx_enqueue>
	return 0;
    e634:	2000      	movs	r0, #0
}
    e636:	b003      	add	sp, #12
    e638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    e63c:	2302      	movs	r3, #2
    e63e:	e7e1      	b.n	e604 <isr_rx_scan_report+0x54>
			     pdu_adv_rx->len] =
    e640:	207f      	movs	r0, #127	; 0x7f
    e642:	e7ed      	b.n	e620 <isr_rx_scan_report+0x70>
		return 1;
    e644:	2001      	movs	r0, #1
    e646:	e7f6      	b.n	e636 <isr_rx_scan_report+0x86>
    e648:	20000b98 	.word	0x20000b98
    e64c:	0001868d 	.word	0x0001868d
    e650:	00019a84 	.word	0x00019a84
    e654:	0001afe7 	.word	0x0001afe7
    e658:	00019a8b 	.word	0x00019a8b
    e65c:	000197a5 	.word	0x000197a5

0000e660 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    e660:	4a0b      	ldr	r2, [pc, #44]	; (e690 <rx_fc_lock+0x30>)
    e662:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    e666:	f892 1d69 	ldrb.w	r1, [r2, #3433]	; 0xd69
    e66a:	4299      	cmp	r1, r3
    e66c:	d10e      	bne.n	e68c <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    e66e:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    e672:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    e676:	f8a3 0d62 	strh.w	r0, [r3, #3426]	; 0xd62
		req = _radio.fc_req + 1;
    e67a:	f892 3d68 	ldrb.w	r3, [r2, #3432]	; 0xd68
    e67e:	3301      	adds	r3, #1
    e680:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    e682:	2b03      	cmp	r3, #3
    e684:	bf08      	it	eq
    e686:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    e688:	f882 3d68 	strb.w	r3, [r2, #3432]	; 0xd68
    e68c:	4770      	bx	lr
    e68e:	bf00      	nop
    e690:	20000b98 	.word	0x20000b98

0000e694 <ticker_success_assert>:
{
    e694:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    e696:	b170      	cbz	r0, e6b6 <ticker_success_assert+0x22>
    e698:	4b08      	ldr	r3, [pc, #32]	; (e6bc <ticker_success_assert+0x28>)
    e69a:	9301      	str	r3, [sp, #4]
    e69c:	9300      	str	r3, [sp, #0]
    e69e:	4a08      	ldr	r2, [pc, #32]	; (e6c0 <ticker_success_assert+0x2c>)
    e6a0:	4b08      	ldr	r3, [pc, #32]	; (e6c4 <ticker_success_assert+0x30>)
    e6a2:	4909      	ldr	r1, [pc, #36]	; (e6c8 <ticker_success_assert+0x34>)
    e6a4:	4809      	ldr	r0, [pc, #36]	; (e6cc <ticker_success_assert+0x38>)
    e6a6:	f7f3 f81b 	bl	16e0 <printk>
    e6aa:	4040      	eors	r0, r0
    e6ac:	f380 8811 	msr	BASEPRI, r0
    e6b0:	f04f 0004 	mov.w	r0, #4
    e6b4:	df02      	svc	2
}
    e6b6:	b003      	add	sp, #12
    e6b8:	f85d fb04 	ldr.w	pc, [sp], #4
    e6bc:	0001868d 	.word	0x0001868d
    e6c0:	00019a84 	.word	0x00019a84
    e6c4:	0001b0d0 	.word	0x0001b0d0
    e6c8:	00019a8b 	.word	0x00019a8b
    e6cc:	0001c095 	.word	0x0001c095

0000e6d0 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    e6d0:	2801      	cmp	r0, #1
{
    e6d2:	b507      	push	{r0, r1, r2, lr}
    e6d4:	4b11      	ldr	r3, [pc, #68]	; (e71c <ticker_stop_adv_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    e6d6:	d116      	bne.n	e706 <ticker_stop_adv_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    e6d8:	7c9a      	ldrb	r2, [r3, #18]
    e6da:	2a05      	cmp	r2, #5
    e6dc:	d104      	bne.n	e6e8 <ticker_stop_adv_assert+0x18>
			_radio.ticker_id_stop = 0;
    e6de:	2200      	movs	r2, #0
    e6e0:	749a      	strb	r2, [r3, #18]
}
    e6e2:	b003      	add	sp, #12
    e6e4:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    e6e8:	4b0d      	ldr	r3, [pc, #52]	; (e720 <ticker_stop_adv_assert+0x50>)
    e6ea:	9301      	str	r3, [sp, #4]
    e6ec:	9300      	str	r3, [sp, #0]
    e6ee:	4a0d      	ldr	r2, [pc, #52]	; (e724 <ticker_stop_adv_assert+0x54>)
    e6f0:	4b0d      	ldr	r3, [pc, #52]	; (e728 <ticker_stop_adv_assert+0x58>)
    e6f2:	490e      	ldr	r1, [pc, #56]	; (e72c <ticker_stop_adv_assert+0x5c>)
    e6f4:	480e      	ldr	r0, [pc, #56]	; (e730 <ticker_stop_adv_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    e6f6:	f7f2 fff3 	bl	16e0 <printk>
    e6fa:	4040      	eors	r0, r0
    e6fc:	f380 8811 	msr	BASEPRI, r0
    e700:	f04f 0004 	mov.w	r0, #4
    e704:	df02      	svc	2
    e706:	7c1b      	ldrb	r3, [r3, #16]
    e708:	2b05      	cmp	r3, #5
    e70a:	d1ea      	bne.n	e6e2 <ticker_stop_adv_assert+0x12>
    e70c:	4b04      	ldr	r3, [pc, #16]	; (e720 <ticker_stop_adv_assert+0x50>)
    e70e:	9301      	str	r3, [sp, #4]
    e710:	9300      	str	r3, [sp, #0]
    e712:	4a04      	ldr	r2, [pc, #16]	; (e724 <ticker_stop_adv_assert+0x54>)
    e714:	4b04      	ldr	r3, [pc, #16]	; (e728 <ticker_stop_adv_assert+0x58>)
    e716:	4905      	ldr	r1, [pc, #20]	; (e72c <ticker_stop_adv_assert+0x5c>)
    e718:	4806      	ldr	r0, [pc, #24]	; (e734 <ticker_stop_adv_assert+0x64>)
    e71a:	e7ec      	b.n	e6f6 <ticker_stop_adv_assert+0x26>
    e71c:	20000b98 	.word	0x20000b98
    e720:	0001868d 	.word	0x0001868d
    e724:	00019a84 	.word	0x00019a84
    e728:	0001b0e6 	.word	0x0001b0e6
    e72c:	00019a8b 	.word	0x00019a8b
    e730:	000197a5 	.word	0x000197a5
    e734:	0001c017 	.word	0x0001c017

0000e738 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    e738:	2801      	cmp	r0, #1
{
    e73a:	b507      	push	{r0, r1, r2, lr}
    e73c:	4b11      	ldr	r3, [pc, #68]	; (e784 <ticker_stop_scan_assert+0x4c>)
	if (status == TICKER_STATUS_FAILURE) {
    e73e:	d116      	bne.n	e76e <ticker_stop_scan_assert+0x36>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    e740:	7c9a      	ldrb	r2, [r3, #18]
    e742:	2a06      	cmp	r2, #6
    e744:	d104      	bne.n	e750 <ticker_stop_scan_assert+0x18>
			_radio.ticker_id_stop = 0;
    e746:	2200      	movs	r2, #0
    e748:	749a      	strb	r2, [r3, #18]
}
    e74a:	b003      	add	sp, #12
    e74c:	f85d fb04 	ldr.w	pc, [sp], #4
			LL_ASSERT(0);
    e750:	4b0d      	ldr	r3, [pc, #52]	; (e788 <ticker_stop_scan_assert+0x50>)
    e752:	9301      	str	r3, [sp, #4]
    e754:	9300      	str	r3, [sp, #0]
    e756:	4a0d      	ldr	r2, [pc, #52]	; (e78c <ticker_stop_scan_assert+0x54>)
    e758:	4b0d      	ldr	r3, [pc, #52]	; (e790 <ticker_stop_scan_assert+0x58>)
    e75a:	490e      	ldr	r1, [pc, #56]	; (e794 <ticker_stop_scan_assert+0x5c>)
    e75c:	480e      	ldr	r0, [pc, #56]	; (e798 <ticker_stop_scan_assert+0x60>)
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    e75e:	f7f2 ffbf 	bl	16e0 <printk>
    e762:	4040      	eors	r0, r0
    e764:	f380 8811 	msr	BASEPRI, r0
    e768:	f04f 0004 	mov.w	r0, #4
    e76c:	df02      	svc	2
    e76e:	7c1b      	ldrb	r3, [r3, #16]
    e770:	2b06      	cmp	r3, #6
    e772:	d1ea      	bne.n	e74a <ticker_stop_scan_assert+0x12>
    e774:	4b04      	ldr	r3, [pc, #16]	; (e788 <ticker_stop_scan_assert+0x50>)
    e776:	9301      	str	r3, [sp, #4]
    e778:	9300      	str	r3, [sp, #0]
    e77a:	4a04      	ldr	r2, [pc, #16]	; (e78c <ticker_stop_scan_assert+0x54>)
    e77c:	4b04      	ldr	r3, [pc, #16]	; (e790 <ticker_stop_scan_assert+0x58>)
    e77e:	4905      	ldr	r1, [pc, #20]	; (e794 <ticker_stop_scan_assert+0x5c>)
    e780:	4806      	ldr	r0, [pc, #24]	; (e79c <ticker_stop_scan_assert+0x64>)
    e782:	e7ec      	b.n	e75e <ticker_stop_scan_assert+0x26>
    e784:	20000b98 	.word	0x20000b98
    e788:	0001868d 	.word	0x0001868d
    e78c:	00019a84 	.word	0x00019a84
    e790:	0001b0fd 	.word	0x0001b0fd
    e794:	00019a8b 	.word	0x00019a8b
    e798:	000197a5 	.word	0x000197a5
    e79c:	0001c056 	.word	0x0001c056

0000e7a0 <ticker_update_adv_assert>:
{
    e7a0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    e7a2:	b190      	cbz	r0, e7ca <ticker_update_adv_assert+0x2a>
    e7a4:	4b0a      	ldr	r3, [pc, #40]	; (e7d0 <ticker_update_adv_assert+0x30>)
    e7a6:	7c9b      	ldrb	r3, [r3, #18]
    e7a8:	2b05      	cmp	r3, #5
    e7aa:	d00e      	beq.n	e7ca <ticker_update_adv_assert+0x2a>
    e7ac:	4b09      	ldr	r3, [pc, #36]	; (e7d4 <ticker_update_adv_assert+0x34>)
    e7ae:	9301      	str	r3, [sp, #4]
    e7b0:	9300      	str	r3, [sp, #0]
    e7b2:	4a09      	ldr	r2, [pc, #36]	; (e7d8 <ticker_update_adv_assert+0x38>)
    e7b4:	4b09      	ldr	r3, [pc, #36]	; (e7dc <ticker_update_adv_assert+0x3c>)
    e7b6:	490a      	ldr	r1, [pc, #40]	; (e7e0 <ticker_update_adv_assert+0x40>)
    e7b8:	480a      	ldr	r0, [pc, #40]	; (e7e4 <ticker_update_adv_assert+0x44>)
    e7ba:	f7f2 ff91 	bl	16e0 <printk>
    e7be:	4040      	eors	r0, r0
    e7c0:	f380 8811 	msr	BASEPRI, r0
    e7c4:	f04f 0004 	mov.w	r0, #4
    e7c8:	df02      	svc	2
}
    e7ca:	b003      	add	sp, #12
    e7cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e7d0:	20000b98 	.word	0x20000b98
    e7d4:	0001868d 	.word	0x0001868d
    e7d8:	00019a84 	.word	0x00019a84
    e7dc:	0001b115 	.word	0x0001b115
    e7e0:	00019a8b 	.word	0x00019a8b
    e7e4:	0001c0c2 	.word	0x0001c0c2

0000e7e8 <ticker_update_slave_assert>:
{
    e7e8:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    e7ea:	b198      	cbz	r0, e814 <ticker_update_slave_assert+0x2c>
    e7ec:	4b0b      	ldr	r3, [pc, #44]	; (e81c <ticker_update_slave_assert+0x34>)
    e7ee:	7c9b      	ldrb	r3, [r3, #18]
    e7f0:	b2c9      	uxtb	r1, r1
    e7f2:	4299      	cmp	r1, r3
    e7f4:	d00e      	beq.n	e814 <ticker_update_slave_assert+0x2c>
    e7f6:	4b0a      	ldr	r3, [pc, #40]	; (e820 <ticker_update_slave_assert+0x38>)
    e7f8:	9301      	str	r3, [sp, #4]
    e7fa:	9300      	str	r3, [sp, #0]
    e7fc:	4a09      	ldr	r2, [pc, #36]	; (e824 <ticker_update_slave_assert+0x3c>)
    e7fe:	4b0a      	ldr	r3, [pc, #40]	; (e828 <ticker_update_slave_assert+0x40>)
    e800:	490a      	ldr	r1, [pc, #40]	; (e82c <ticker_update_slave_assert+0x44>)
    e802:	480b      	ldr	r0, [pc, #44]	; (e830 <ticker_update_slave_assert+0x48>)
    e804:	f7f2 ff6c 	bl	16e0 <printk>
    e808:	4040      	eors	r0, r0
    e80a:	f380 8811 	msr	BASEPRI, r0
    e80e:	f04f 0004 	mov.w	r0, #4
    e812:	df02      	svc	2
}
    e814:	b003      	add	sp, #12
    e816:	f85d fb04 	ldr.w	pc, [sp], #4
    e81a:	bf00      	nop
    e81c:	20000b98 	.word	0x20000b98
    e820:	0001868d 	.word	0x0001868d
    e824:	00019a84 	.word	0x00019a84
    e828:	0001b12e 	.word	0x0001b12e
    e82c:	00019a8b 	.word	0x00019a8b
    e830:	0001c111 	.word	0x0001c111

0000e834 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    e834:	b507      	push	{r0, r1, r2, lr}
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    e836:	b170      	cbz	r0, e856 <ticker_op_latency_cancelled+0x22>
    e838:	4b0b      	ldr	r3, [pc, #44]	; (e868 <ticker_op_latency_cancelled+0x34>)
    e83a:	9301      	str	r3, [sp, #4]
    e83c:	9300      	str	r3, [sp, #0]
    e83e:	4a0b      	ldr	r2, [pc, #44]	; (e86c <ticker_op_latency_cancelled+0x38>)
    e840:	4b0b      	ldr	r3, [pc, #44]	; (e870 <ticker_op_latency_cancelled+0x3c>)
    e842:	490c      	ldr	r1, [pc, #48]	; (e874 <ticker_op_latency_cancelled+0x40>)
    e844:	480c      	ldr	r0, [pc, #48]	; (e878 <ticker_op_latency_cancelled+0x44>)
    e846:	f7f2 ff4b 	bl	16e0 <printk>
    e84a:	4040      	eors	r0, r0
    e84c:	f380 8811 	msr	BASEPRI, r0
    e850:	f04f 0004 	mov.w	r0, #4
    e854:	df02      	svc	2

	conn->slave.latency_cancel = 0;
    e856:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    e85a:	f360 0341 	bfi	r3, r0, #1, #1
    e85e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
    e862:	b003      	add	sp, #12
    e864:	f85d fb04 	ldr.w	pc, [sp], #4
    e868:	0001868d 	.word	0x0001868d
    e86c:	00019a84 	.word	0x00019a84
    e870:	0001b41f 	.word	0x0001b41f
    e874:	00019a8b 	.word	0x00019a8b
    e878:	0001bfe3 	.word	0x0001bfe3

0000e87c <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    e87c:	4b04      	ldr	r3, [pc, #16]	; (e890 <ticker_job_disable+0x14>)
    e87e:	7d1b      	ldrb	r3, [r3, #20]
    e880:	b123      	cbz	r3, e88c <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    e882:	2101      	movs	r1, #1
    e884:	2200      	movs	r2, #0
    e886:	4608      	mov	r0, r1
    e888:	f7fb be4e 	b.w	a528 <mayfly_enable>
    e88c:	4770      	bx	lr
    e88e:	bf00      	nop
    e890:	20000b98 	.word	0x20000b98

0000e894 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    e894:	2806      	cmp	r0, #6
{
    e896:	b510      	push	{r4, lr}
    e898:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    e89a:	d90a      	bls.n	e8b2 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    e89c:	4b09      	ldr	r3, [pc, #36]	; (e8c4 <hdr_conn_get+0x30>)
    e89e:	1fc2      	subs	r2, r0, #7
    e8a0:	b292      	uxth	r2, r2
    e8a2:	f44f 71aa 	mov.w	r1, #340	; 0x154
    e8a6:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    e8aa:	f7fb fdcf 	bl	a44c <mem_get>
    e8ae:	6020      	str	r0, [r4, #0]
    e8b0:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    e8b2:	2805      	cmp	r0, #5
    e8b4:	d004      	beq.n	e8c0 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    e8b6:	2806      	cmp	r0, #6
	return NULL;
    e8b8:	4803      	ldr	r0, [pc, #12]	; (e8c8 <hdr_conn_get+0x34>)
    e8ba:	bf18      	it	ne
    e8bc:	2000      	movne	r0, #0
    e8be:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    e8c0:	4802      	ldr	r0, [pc, #8]	; (e8cc <hdr_conn_get+0x38>)
}
    e8c2:	bd10      	pop	{r4, pc}
    e8c4:	20000b98 	.word	0x20000b98
    e8c8:	200017b4 	.word	0x200017b4
    e8cc:	20000bb0 	.word	0x20000bb0

0000e8d0 <event_stop.part.11>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    e8d0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(!retval);
    e8d2:	4b07      	ldr	r3, [pc, #28]	; (e8f0 <event_stop.part.11+0x20>)
    e8d4:	9301      	str	r3, [sp, #4]
    e8d6:	9300      	str	r3, [sp, #0]
    e8d8:	4a06      	ldr	r2, [pc, #24]	; (e8f4 <event_stop.part.11+0x24>)
    e8da:	4b07      	ldr	r3, [pc, #28]	; (e8f8 <event_stop.part.11+0x28>)
    e8dc:	4907      	ldr	r1, [pc, #28]	; (e8fc <event_stop.part.11+0x2c>)
    e8de:	4808      	ldr	r0, [pc, #32]	; (e900 <event_stop.part.11+0x30>)
    e8e0:	f7f2 fefe 	bl	16e0 <printk>
    e8e4:	4040      	eors	r0, r0
    e8e6:	f380 8811 	msr	BASEPRI, r0
    e8ea:	f04f 0004 	mov.w	r0, #4
    e8ee:	df02      	svc	2
    e8f0:	0001868d 	.word	0x0001868d
    e8f4:	00019a84 	.word	0x00019a84
    e8f8:	0001b22d 	.word	0x0001b22d
    e8fc:	00019a8b 	.word	0x00019a8b
    e900:	0001bbbe 	.word	0x0001bbbe

0000e904 <event_stop>:
	s_mfy_radio_stop.param = context;
    e904:	4a06      	ldr	r2, [pc, #24]	; (e920 <event_stop+0x1c>)
{
    e906:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    e908:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    e90a:	4613      	mov	r3, r2
    e90c:	2200      	movs	r2, #0
    e90e:	4611      	mov	r1, r2
    e910:	4610      	mov	r0, r2
    e912:	f7fb fe31 	bl	a578 <mayfly_enqueue>
	LL_ASSERT(!retval);
    e916:	b108      	cbz	r0, e91c <event_stop+0x18>
    e918:	f7ff ffda 	bl	e8d0 <event_stop.part.11>
    e91c:	bd08      	pop	{r3, pc}
    e91e:	bf00      	nop
    e920:	20008938 	.word	0x20008938

0000e924 <event_active>:
{
    e924:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    e926:	2200      	movs	r2, #0
    e928:	4b0b      	ldr	r3, [pc, #44]	; (e958 <event_active+0x34>)
    e92a:	4611      	mov	r1, r2
    e92c:	4610      	mov	r0, r2
    e92e:	f7fb fe23 	bl	a578 <mayfly_enqueue>
	LL_ASSERT(!retval);
    e932:	b170      	cbz	r0, e952 <event_active+0x2e>
    e934:	4b09      	ldr	r3, [pc, #36]	; (e95c <event_active+0x38>)
    e936:	9301      	str	r3, [sp, #4]
    e938:	9300      	str	r3, [sp, #0]
    e93a:	4a09      	ldr	r2, [pc, #36]	; (e960 <event_active+0x3c>)
    e93c:	4b09      	ldr	r3, [pc, #36]	; (e964 <event_active+0x40>)
    e93e:	490a      	ldr	r1, [pc, #40]	; (e968 <event_active+0x44>)
    e940:	480a      	ldr	r0, [pc, #40]	; (e96c <event_active+0x48>)
    e942:	f7f2 fecd 	bl	16e0 <printk>
    e946:	4040      	eors	r0, r0
    e948:	f380 8811 	msr	BASEPRI, r0
    e94c:	f04f 0004 	mov.w	r0, #4
    e950:	df02      	svc	2
}
    e952:	b003      	add	sp, #12
    e954:	f85d fb04 	ldr.w	pc, [sp], #4
    e958:	20008908 	.word	0x20008908
    e95c:	0001868d 	.word	0x0001868d
    e960:	00019a84 	.word	0x00019a84
    e964:	0001b15d 	.word	0x0001b15d
    e968:	00019a8b 	.word	0x00019a8b
    e96c:	0001bbbe 	.word	0x0001bbbe

0000e970 <event_xtal>:
{
    e970:	b507      	push	{r0, r1, r2, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    e972:	2200      	movs	r2, #0
    e974:	4b0b      	ldr	r3, [pc, #44]	; (e9a4 <event_xtal+0x34>)
    e976:	4611      	mov	r1, r2
    e978:	4610      	mov	r0, r2
    e97a:	f7fb fdfd 	bl	a578 <mayfly_enqueue>
	LL_ASSERT(!retval);
    e97e:	b170      	cbz	r0, e99e <event_xtal+0x2e>
    e980:	4b09      	ldr	r3, [pc, #36]	; (e9a8 <event_xtal+0x38>)
    e982:	9301      	str	r3, [sp, #4]
    e984:	9300      	str	r3, [sp, #0]
    e986:	4a09      	ldr	r2, [pc, #36]	; (e9ac <event_xtal+0x3c>)
    e988:	4b09      	ldr	r3, [pc, #36]	; (e9b0 <event_xtal+0x40>)
    e98a:	490a      	ldr	r1, [pc, #40]	; (e9b4 <event_xtal+0x44>)
    e98c:	480a      	ldr	r0, [pc, #40]	; (e9b8 <event_xtal+0x48>)
    e98e:	f7f2 fea7 	bl	16e0 <printk>
    e992:	4040      	eors	r0, r0
    e994:	f380 8811 	msr	BASEPRI, r0
    e998:	f04f 0004 	mov.w	r0, #4
    e99c:	df02      	svc	2
}
    e99e:	b003      	add	sp, #12
    e9a0:	f85d fb04 	ldr.w	pc, [sp], #4
    e9a4:	20008988 	.word	0x20008988
    e9a8:	0001868d 	.word	0x0001868d
    e9ac:	00019a84 	.word	0x00019a84
    e9b0:	0001b179 	.word	0x0001b179
    e9b4:	00019a8b 	.word	0x00019a8b
    e9b8:	0001bbbe 	.word	0x0001bbbe

0000e9bc <mayfly_radio_active>:
{
    e9bc:	b507      	push	{r0, r1, r2, lr}
    e9be:	4a12      	ldr	r2, [pc, #72]	; (ea08 <mayfly_radio_active+0x4c>)
		if (s_active++) {
    e9c0:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    e9c2:	b140      	cbz	r0, e9d6 <mayfly_radio_active+0x1a>
		if (s_active++) {
    e9c4:	1c59      	adds	r1, r3, #1
    e9c6:	7011      	strb	r1, [r2, #0]
    e9c8:	b9d3      	cbnz	r3, ea00 <mayfly_radio_active+0x44>
		radio_active_callback(1);
    e9ca:	2001      	movs	r0, #1
}
    e9cc:	b003      	add	sp, #12
    e9ce:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_active_callback(0);
    e9d2:	f006 ba85 	b.w	14ee0 <radio_active_callback>
		LL_ASSERT(s_active);
    e9d6:	b973      	cbnz	r3, e9f6 <mayfly_radio_active+0x3a>
    e9d8:	4b0c      	ldr	r3, [pc, #48]	; (ea0c <mayfly_radio_active+0x50>)
    e9da:	9301      	str	r3, [sp, #4]
    e9dc:	9300      	str	r3, [sp, #0]
    e9de:	4a0c      	ldr	r2, [pc, #48]	; (ea10 <mayfly_radio_active+0x54>)
    e9e0:	4b0c      	ldr	r3, [pc, #48]	; (ea14 <mayfly_radio_active+0x58>)
    e9e2:	490d      	ldr	r1, [pc, #52]	; (ea18 <mayfly_radio_active+0x5c>)
    e9e4:	480d      	ldr	r0, [pc, #52]	; (ea1c <mayfly_radio_active+0x60>)
    e9e6:	f7f2 fe7b 	bl	16e0 <printk>
    e9ea:	4040      	eors	r0, r0
    e9ec:	f380 8811 	msr	BASEPRI, r0
    e9f0:	f04f 0004 	mov.w	r0, #4
    e9f4:	df02      	svc	2
		if (--s_active) {
    e9f6:	3b01      	subs	r3, #1
    e9f8:	b2db      	uxtb	r3, r3
    e9fa:	7013      	strb	r3, [r2, #0]
    e9fc:	2b00      	cmp	r3, #0
    e9fe:	d0e5      	beq.n	e9cc <mayfly_radio_active+0x10>
}
    ea00:	b003      	add	sp, #12
    ea02:	f85d fb04 	ldr.w	pc, [sp], #4
    ea06:	bf00      	nop
    ea08:	20001942 	.word	0x20001942
    ea0c:	0001868d 	.word	0x0001868d
    ea10:	00019a84 	.word	0x00019a84
    ea14:	0001b149 	.word	0x0001b149
    ea18:	00019a8b 	.word	0x00019a8b
    ea1c:	0001bb13 	.word	0x0001bb13

0000ea20 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    ea20:	2000      	movs	r0, #0
    ea22:	f7ff bfcb 	b.w	e9bc <mayfly_radio_active>
	...

0000ea28 <mayfly_radio_stop>:
{
    ea28:	b507      	push	{r0, r1, r2, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    ea2a:	b2c0      	uxtb	r0, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    ea2c:	1f03      	subs	r3, r0, #4
    ea2e:	2b01      	cmp	r3, #1
    ea30:	d90e      	bls.n	ea50 <mayfly_radio_stop+0x28>
    ea32:	4b11      	ldr	r3, [pc, #68]	; (ea78 <mayfly_radio_stop+0x50>)
    ea34:	9301      	str	r3, [sp, #4]
    ea36:	9300      	str	r3, [sp, #0]
    ea38:	4a10      	ldr	r2, [pc, #64]	; (ea7c <mayfly_radio_stop+0x54>)
    ea3a:	4b11      	ldr	r3, [pc, #68]	; (ea80 <mayfly_radio_stop+0x58>)
    ea3c:	4911      	ldr	r1, [pc, #68]	; (ea84 <mayfly_radio_stop+0x5c>)
    ea3e:	4812      	ldr	r0, [pc, #72]	; (ea88 <mayfly_radio_stop+0x60>)
    ea40:	f7f2 fe4e 	bl	16e0 <printk>
    ea44:	4040      	eors	r0, r0
    ea46:	f380 8811 	msr	BASEPRI, r0
    ea4a:	f04f 0004 	mov.w	r0, #4
    ea4e:	df02      	svc	2
	radio_used = ((_radio.state != STATE_NONE) &&
    ea50:	4a0e      	ldr	r2, [pc, #56]	; (ea8c <mayfly_radio_stop+0x64>)
    ea52:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    ea54:	b143      	cbz	r3, ea68 <mayfly_radio_stop+0x40>
	radio_used = ((_radio.state != STATE_NONE) &&
    ea56:	3b04      	subs	r3, #4
    ea58:	2b01      	cmp	r3, #1
    ea5a:	d905      	bls.n	ea68 <mayfly_radio_stop+0x40>
			_radio.state = state;
    ea5c:	7510      	strb	r0, [r2, #20]
}
    ea5e:	b003      	add	sp, #12
    ea60:	f85d eb04 	ldr.w	lr, [sp], #4
		radio_disable();
    ea64:	f007 bcaa 	b.w	163bc <radio_disable>
	if (radio_used || !radio_is_idle()) {
    ea68:	f007 fcda 	bl	16420 <radio_is_idle>
    ea6c:	2800      	cmp	r0, #0
    ea6e:	d0f6      	beq.n	ea5e <mayfly_radio_stop+0x36>
}
    ea70:	b003      	add	sp, #12
    ea72:	f85d fb04 	ldr.w	pc, [sp], #4
    ea76:	bf00      	nop
    ea78:	0001868d 	.word	0x0001868d
    ea7c:	00019a84 	.word	0x00019a84
    ea80:	0001b21b 	.word	0x0001b21b
    ea84:	00019a8b 	.word	0x00019a8b
    ea88:	0001bb3d 	.word	0x0001bb3d
    ea8c:	20000b98 	.word	0x20000b98

0000ea90 <pdu_node_tx_release>:
{
    ea90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    ea92:	4a17      	ldr	r2, [pc, #92]	; (eaf0 <pdu_node_tx_release+0x60>)
    ea94:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
	if (last == _radio.packet_tx_count) {
    ea98:	f892 4d5c 	ldrb.w	r4, [r2, #3420]	; 0xd5c
	last = _radio.packet_release_last + 1;
    ea9c:	3301      	adds	r3, #1
    ea9e:	b2db      	uxtb	r3, r3
		last = 0;
    eaa0:	429c      	cmp	r4, r3
    eaa2:	bf08      	it	eq
    eaa4:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    eaa6:	f892 4d5f 	ldrb.w	r4, [r2, #3423]	; 0xd5f
    eaaa:	429c      	cmp	r4, r3
    eaac:	d10e      	bne.n	eacc <pdu_node_tx_release+0x3c>
    eaae:	4b11      	ldr	r3, [pc, #68]	; (eaf4 <pdu_node_tx_release+0x64>)
    eab0:	9301      	str	r3, [sp, #4]
    eab2:	9300      	str	r3, [sp, #0]
    eab4:	4a10      	ldr	r2, [pc, #64]	; (eaf8 <pdu_node_tx_release+0x68>)
    eab6:	4b11      	ldr	r3, [pc, #68]	; (eafc <pdu_node_tx_release+0x6c>)
    eab8:	4911      	ldr	r1, [pc, #68]	; (eb00 <pdu_node_tx_release+0x70>)
    eaba:	4812      	ldr	r0, [pc, #72]	; (eb04 <pdu_node_tx_release+0x74>)
    eabc:	f7f2 fe10 	bl	16e0 <printk>
    eac0:	4040      	eors	r0, r0
    eac2:	f380 8811 	msr	BASEPRI, r0
    eac6:	f04f 0004 	mov.w	r0, #4
    eaca:	df02      	svc	2
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    eacc:	f892 5d60 	ldrb.w	r5, [r2, #3424]	; 0xd60
    ead0:	f8d2 4d58 	ldr.w	r4, [r2, #3416]	; 0xd58
    ead4:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    ead8:	f892 0d60 	ldrb.w	r0, [r2, #3424]	; 0xd60
    eadc:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    eae0:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    eae2:	f882 3d60 	strb.w	r3, [r2, #3424]	; 0xd60
}
    eae6:	b003      	add	sp, #12
    eae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_event_callback();
    eaec:	f006 b9fa 	b.w	14ee4 <radio_event_callback>
    eaf0:	20000b98 	.word	0x20000b98
    eaf4:	0001868d 	.word	0x0001868d
    eaf8:	00019a84 	.word	0x00019a84
    eafc:	0001b363 	.word	0x0001b363
    eb00:	00019a8b 	.word	0x00019a8b
    eb04:	0001bc8e 	.word	0x0001bc8e

0000eb08 <packet_tx_enqueue>:
{
    eb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    eb0c:	4c24      	ldr	r4, [pc, #144]	; (eba0 <packet_tx_enqueue+0x98>)
{
    eb0e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    eb10:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    eb12:	b12e      	cbz	r6, eb20 <packet_tx_enqueue+0x18>
    eb14:	f894 3d5d 	ldrb.w	r3, [r4, #3421]	; 0xd5d
    eb18:	f894 2d5e 	ldrb.w	r2, [r4, #3422]	; 0xd5e
    eb1c:	429a      	cmp	r2, r3
    eb1e:	d101      	bne.n	eb24 <packet_tx_enqueue+0x1c>
    eb20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    eb24:	f894 8d5d 	ldrb.w	r8, [r4, #3421]	; 0xd5d
    eb28:	f8d4 9d54 	ldr.w	r9, [r4, #3412]	; 0xd54
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    eb2c:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    eb30:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    eb34:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    eb38:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    eb3c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    eb3e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    eb40:	f7fb fc84 	bl	a44c <mem_get>
    eb44:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    eb46:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    eb4a:	8c1a      	ldrh	r2, [r3, #32]
    eb4c:	4282      	cmp	r2, r0
    eb4e:	d11f      	bne.n	eb90 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    eb50:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    eb54:	b942      	cbnz	r2, eb68 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    eb56:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    eb5a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    eb5e:	b91a      	cbnz	r2, eb68 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    eb60:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    eb64:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    eb68:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    eb6c:	b102      	cbz	r2, eb70 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    eb6e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    eb70:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    eb74:	f894 3d5d 	ldrb.w	r3, [r4, #3421]	; 0xd5d
		if (first == _radio.packet_tx_count) {
    eb78:	f894 2d5c 	ldrb.w	r2, [r4, #3420]	; 0xd5c
		first = _radio.packet_tx_first + 1;
    eb7c:	3301      	adds	r3, #1
    eb7e:	b2db      	uxtb	r3, r3
			first = 0;
    eb80:	429a      	cmp	r2, r3
    eb82:	bf08      	it	eq
    eb84:	2300      	moveq	r3, #0
    eb86:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    eb88:	f884 3d5d 	strb.w	r3, [r4, #3421]	; 0xd5d
    eb8c:	b2f6      	uxtb	r6, r6
    eb8e:	e7c0      	b.n	eb12 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    eb90:	792b      	ldrb	r3, [r5, #4]
    eb92:	f367 0301 	bfi	r3, r7, #0, #2
    eb96:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    eb98:	4629      	mov	r1, r5
    eb9a:	f7ff ff79 	bl	ea90 <pdu_node_tx_release>
    eb9e:	e7e9      	b.n	eb74 <packet_tx_enqueue+0x6c>
    eba0:	20000b98 	.word	0x20000b98

0000eba4 <connection_release>:
{
    eba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    eba6:	2201      	movs	r2, #1
{
    eba8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    ebaa:	4611      	mov	r1, r2
    ebac:	2000      	movs	r0, #0
    ebae:	f7fb fcbb 	bl	a528 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ebb2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    ebb6:	2100      	movs	r1, #0
    ebb8:	f242 73e2 	movw	r3, #10210	; 0x27e2
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    ebbc:	3207      	adds	r2, #7
	ticker_status =
    ebbe:	9300      	str	r3, [sp, #0]
    ebc0:	4608      	mov	r0, r1
    ebc2:	4b3e      	ldr	r3, [pc, #248]	; (ecbc <connection_release+0x118>)
    ebc4:	b2d2      	uxtb	r2, r2
    ebc6:	f7fc fb33 	bl	b230 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ebca:	f030 0102 	bics.w	r1, r0, #2
    ebce:	d00e      	beq.n	ebee <connection_release+0x4a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ebd0:	4b3b      	ldr	r3, [pc, #236]	; (ecc0 <connection_release+0x11c>)
    ebd2:	9301      	str	r3, [sp, #4]
    ebd4:	9300      	str	r3, [sp, #0]
    ebd6:	4a3b      	ldr	r2, [pc, #236]	; (ecc4 <connection_release+0x120>)
    ebd8:	4b3b      	ldr	r3, [pc, #236]	; (ecc8 <connection_release+0x124>)
    ebda:	493c      	ldr	r1, [pc, #240]	; (eccc <connection_release+0x128>)
    ebdc:	483c      	ldr	r0, [pc, #240]	; (ecd0 <connection_release+0x12c>)
    ebde:	f7f2 fd7f 	bl	16e0 <printk>
    ebe2:	4040      	eors	r0, r0
    ebe4:	f380 8811 	msr	BASEPRI, r0
    ebe8:	f04f 0004 	mov.w	r0, #4
    ebec:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    ebee:	4b39      	ldr	r3, [pc, #228]	; (ecd4 <connection_release+0x130>)
    ebf0:	7d1a      	ldrb	r2, [r3, #20]
    ebf2:	2a05      	cmp	r2, #5
    ebf4:	461d      	mov	r5, r3
    ebf6:	d11b      	bne.n	ec30 <connection_release+0x8c>
					  conn->handle))) {
    ebf8:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    ebfa:	7c18      	ldrb	r0, [r3, #16]
    ebfc:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    ebfe:	4290      	cmp	r0, r2
    ec00:	d116      	bne.n	ec30 <connection_release+0x8c>
		_radio.ticker_id_prepare = 0;
    ec02:	7419      	strb	r1, [r3, #16]
		ticker_status =
    ec04:	f242 73f3 	movw	r3, #10227	; 0x27f3
    ec08:	9300      	str	r3, [sp, #0]
    ec0a:	2201      	movs	r2, #1
    ec0c:	4b2b      	ldr	r3, [pc, #172]	; (ecbc <connection_release+0x118>)
    ec0e:	4608      	mov	r0, r1
    ec10:	f7fc fb0e 	bl	b230 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ec14:	f030 0202 	bics.w	r2, r0, #2
    ec18:	d1da      	bne.n	ebd0 <connection_release+0x2c>
		ticker_status =
    ec1a:	f242 73fa 	movw	r3, #10234	; 0x27fa
    ec1e:	9300      	str	r3, [sp, #0]
    ec20:	4611      	mov	r1, r2
    ec22:	4b26      	ldr	r3, [pc, #152]	; (ecbc <connection_release+0x118>)
    ec24:	4610      	mov	r0, r2
    ec26:	f7fc fb03 	bl	b230 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ec2a:	f030 0302 	bics.w	r3, r0, #2
    ec2e:	d1cf      	bne.n	ebd0 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    ec30:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ec34:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ec38:	4299      	cmp	r1, r3
    ec3a:	d003      	beq.n	ec44 <connection_release+0xa0>
    ec3c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ec40:	4299      	cmp	r1, r3
    ec42:	d101      	bne.n	ec48 <connection_release+0xa4>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ec44:	4e24      	ldr	r6, [pc, #144]	; (ecd8 <connection_release+0x134>)
    ec46:	e012      	b.n	ec6e <connection_release+0xca>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    ec48:	790b      	ldrb	r3, [r1, #4]
    ec4a:	f36f 0301 	bfc	r3, #0, #2
    ec4e:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ec50:	680b      	ldr	r3, [r1, #0]
    ec52:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    ec56:	8c20      	ldrh	r0, [r4, #32]
    ec58:	f7ff ff1a 	bl	ea90 <pdu_node_tx_release>
    ec5c:	e7e8      	b.n	ec30 <connection_release+0x8c>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ec5e:	6803      	ldr	r3, [r0, #0]
    ec60:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ec64:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    ec68:	4631      	mov	r1, r6
    ec6a:	f7fb fbd4 	bl	a416 <mem_release>
	while ((conn->pkt_tx_head) &&
    ec6e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    ec72:	b118      	cbz	r0, ec7c <connection_release+0xd8>
    ec74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    ec78:	4298      	cmp	r0, r3
    ec7a:	d1f0      	bne.n	ec5e <connection_release+0xba>
	conn->pkt_tx_ctrl = NULL;
    ec7c:	2300      	movs	r3, #0
    ec7e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    ec82:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    ec86:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    ec8a:	b951      	cbnz	r1, eca2 <connection_release+0xfe>
	conn->handle = 0xffff;
    ec8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ec90:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    ec92:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
    ec96:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    ec98:	bf08      	it	eq
    ec9a:	f8c5 1d70 	streq.w	r1, [r5, #3440]	; 0xd70
}
    ec9e:	b002      	add	sp, #8
    eca0:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    eca2:	790b      	ldrb	r3, [r1, #4]
    eca4:	f36f 0301 	bfc	r3, #0, #2
    eca8:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    ecaa:	680b      	ldr	r3, [r1, #0]
    ecac:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    ecb0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    ecb4:	8c20      	ldrh	r0, [r4, #32]
    ecb6:	f7ff feeb 	bl	ea90 <pdu_node_tx_release>
    ecba:	e7e4      	b.n	ec86 <connection_release+0xe2>
    ecbc:	0000e695 	.word	0x0000e695
    ecc0:	0001868d 	.word	0x0001868d
    ecc4:	00019a84 	.word	0x00019a84
    ecc8:	0001b377 	.word	0x0001b377
    eccc:	00019a8b 	.word	0x00019a8b
    ecd0:	0001b473 	.word	0x0001b473
    ecd4:	20000b98 	.word	0x20000b98
    ecd8:	200018dc 	.word	0x200018dc
    ecdc:	00000000 	.word	0x00000000

0000ece0 <sched_after_mstr_free_offset_get>:
{
    ece0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ece2:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    ece4:	aa04      	add	r2, sp, #16
{
    ece6:	461c      	mov	r4, r3
    ece8:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    ecea:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    ecee:	3127      	adds	r1, #39	; 0x27
    ecf0:	2001      	movs	r0, #1
    ecf2:	f7ff faf9 	bl	e2e8 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    ecf6:	6823      	ldr	r3, [r4, #0]
    ecf8:	b363      	cbz	r3, ed54 <sched_after_mstr_free_offset_get+0x74>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    ecfa:	9803      	ldr	r0, [sp, #12]
    ecfc:	1b83      	subs	r3, r0, r6
    ecfe:	021b      	lsls	r3, r3, #8
    ed00:	d50e      	bpl.n	ed20 <sched_after_mstr_free_offset_get+0x40>
    ed02:	4b19      	ldr	r3, [pc, #100]	; (ed68 <sched_after_mstr_free_offset_get+0x88>)
    ed04:	9301      	str	r3, [sp, #4]
    ed06:	9300      	str	r3, [sp, #0]
    ed08:	4a18      	ldr	r2, [pc, #96]	; (ed6c <sched_after_mstr_free_offset_get+0x8c>)
    ed0a:	4b19      	ldr	r3, [pc, #100]	; (ed70 <sched_after_mstr_free_offset_get+0x90>)
    ed0c:	4919      	ldr	r1, [pc, #100]	; (ed74 <sched_after_mstr_free_offset_get+0x94>)
    ed0e:	481a      	ldr	r0, [pc, #104]	; (ed78 <sched_after_mstr_free_offset_get+0x98>)
    ed10:	f7f2 fce6 	bl	16e0 <printk>
    ed14:	4040      	eors	r0, r0
    ed16:	f380 8811 	msr	BASEPRI, r0
    ed1a:	f04f 0004 	mov.w	r0, #4
    ed1e:	df02      	svc	2
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    ed20:	4631      	mov	r1, r6
    ed22:	f7fc fb57 	bl	b3d4 <ticker_ticks_diff_get>
    ed26:	4602      	mov	r2, r0
    ed28:	4814      	ldr	r0, [pc, #80]	; (ed7c <sched_after_mstr_free_offset_get+0x9c>)
    ed2a:	2307      	movs	r3, #7
    ed2c:	fba2 0100 	umull	r0, r1, r2, r0
    ed30:	fb03 1102 	mla	r1, r3, r2, r1
    ed34:	a30a      	add	r3, pc, #40	; (adr r3, ed60 <sched_after_mstr_free_offset_get+0x80>)
    ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
    ed3a:	f7f1 fa95 	bl	268 <__aeabi_uldivmod>
    ed3e:	6823      	ldr	r3, [r4, #0]
    ed40:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    ed42:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    ed44:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    ed46:	db05      	blt.n	ed54 <sched_after_mstr_free_offset_get+0x74>
		u32_t conn_interval_us = conn_interval * 1250;
    ed48:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ed4c:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    ed4e:	6823      	ldr	r3, [r4, #0]
    ed50:	4298      	cmp	r0, r3
    ed52:	d301      	bcc.n	ed58 <sched_after_mstr_free_offset_get+0x78>
}
    ed54:	b004      	add	sp, #16
    ed56:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    ed58:	1a1b      	subs	r3, r3, r0
    ed5a:	6023      	str	r3, [r4, #0]
    ed5c:	e7f7      	b.n	ed4e <sched_after_mstr_free_offset_get+0x6e>
    ed5e:	bf00      	nop
    ed60:	3b9aca00 	.word	0x3b9aca00
    ed64:	00000000 	.word	0x00000000
    ed68:	0001868d 	.word	0x0001868d
    ed6c:	00019a84 	.word	0x00019a84
    ed70:	0001b1df 	.word	0x0001b1df
    ed74:	00019a8b 	.word	0x00019a8b
    ed78:	0001bf24 	.word	0x0001bf24
    ed7c:	1afd498d 	.word	0x1afd498d

0000ed80 <mayfly_sched_win_offset_use>:
{
    ed80:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    ed82:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    ed86:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    ed88:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    ed8c:	68c1      	ldr	r1, [r0, #12]
    ed8e:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    ed90:	f7ff ffa6 	bl	ece0 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ed94:	a902      	add	r1, sp, #8
    ed96:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    ed9a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ed9e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    eda2:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    eda6:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    eda8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    edac:	f7f1 fc2c 	bl	608 <memcpy>
}
    edb0:	b002      	add	sp, #8
    edb2:	bd10      	pop	{r4, pc}

0000edb4 <mayfly_sched_after_mstr_free_offset_get>:
{
    edb4:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    edb6:	4c05      	ldr	r4, [pc, #20]	; (edcc <mayfly_sched_after_mstr_free_offset_get+0x18>)
    edb8:	4602      	mov	r2, r0
    edba:	f604 4358 	addw	r3, r4, #3160	; 0xc58
    edbe:	f8d4 1c50 	ldr.w	r1, [r4, #3152]	; 0xc50
    edc2:	f8b4 0c48 	ldrh.w	r0, [r4, #3144]	; 0xc48
}
    edc6:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    edc8:	f7ff bf8a 	b.w	ece0 <sched_after_mstr_free_offset_get>
    edcc:	20000b98 	.word	0x20000b98

0000edd0 <terminate_ind_rx_enqueue>:
{
    edd0:	b513      	push	{r0, r1, r4, lr}
    edd2:	4603      	mov	r3, r0
    edd4:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    edd6:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    edda:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
    edde:	b970      	cbnz	r0, edfe <terminate_ind_rx_enqueue+0x2e>
    ede0:	4b16      	ldr	r3, [pc, #88]	; (ee3c <terminate_ind_rx_enqueue+0x6c>)
    ede2:	9301      	str	r3, [sp, #4]
    ede4:	9300      	str	r3, [sp, #0]
    ede6:	4a16      	ldr	r2, [pc, #88]	; (ee40 <terminate_ind_rx_enqueue+0x70>)
    ede8:	4b16      	ldr	r3, [pc, #88]	; (ee44 <terminate_ind_rx_enqueue+0x74>)
    edea:	4917      	ldr	r1, [pc, #92]	; (ee48 <terminate_ind_rx_enqueue+0x78>)
    edec:	4817      	ldr	r0, [pc, #92]	; (ee4c <terminate_ind_rx_enqueue+0x7c>)
	LL_ASSERT(link);
    edee:	f7f2 fc77 	bl	16e0 <printk>
    edf2:	4040      	eors	r0, r0
    edf4:	f380 8811 	msr	BASEPRI, r0
    edf8:	f04f 0004 	mov.w	r0, #4
    edfc:	df02      	svc	2
	node_rx->hdr.handle = conn->handle;
    edfe:	8c1c      	ldrh	r4, [r3, #32]
    ee00:	f8a3 40ba 	strh.w	r4, [r3, #186]	; 0xba
	*((u8_t *)node_rx->pdu_data) = reason;
    ee04:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ee08:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    ee0a:	4a11      	ldr	r2, [pc, #68]	; (ee50 <terminate_ind_rx_enqueue+0x80>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    ee0c:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    ee10:	f892 4d60 	ldrb.w	r4, [r2, #3424]	; 0xd60
    ee14:	f883 40b4 	strb.w	r4, [r3, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    ee18:	f602 5238 	addw	r2, r2, #3384	; 0xd38
    ee1c:	f7fb fb3b 	bl	a496 <memq_enqueue>
	LL_ASSERT(link);
    ee20:	b938      	cbnz	r0, ee32 <terminate_ind_rx_enqueue+0x62>
    ee22:	4b06      	ldr	r3, [pc, #24]	; (ee3c <terminate_ind_rx_enqueue+0x6c>)
    ee24:	9301      	str	r3, [sp, #4]
    ee26:	9300      	str	r3, [sp, #0]
    ee28:	4a05      	ldr	r2, [pc, #20]	; (ee40 <terminate_ind_rx_enqueue+0x70>)
    ee2a:	4b06      	ldr	r3, [pc, #24]	; (ee44 <terminate_ind_rx_enqueue+0x74>)
    ee2c:	4906      	ldr	r1, [pc, #24]	; (ee48 <terminate_ind_rx_enqueue+0x78>)
    ee2e:	4809      	ldr	r0, [pc, #36]	; (ee54 <terminate_ind_rx_enqueue+0x84>)
    ee30:	e7dd      	b.n	edee <terminate_ind_rx_enqueue+0x1e>
}
    ee32:	b002      	add	sp, #8
    ee34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    ee38:	f006 b854 	b.w	14ee4 <radio_event_callback>
    ee3c:	0001868d 	.word	0x0001868d
    ee40:	00019a84 	.word	0x00019a84
    ee44:	0001b38a 	.word	0x0001b38a
    ee48:	00019a8b 	.word	0x00019a8b
    ee4c:	0001bfaa 	.word	0x0001bfaa
    ee50:	20000b98 	.word	0x20000b98
    ee54:	0001b44d 	.word	0x0001b44d

0000ee58 <scan_ticker_enable>:
static void scan_ticker_enable (void){
    ee58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    ee5c:	4f34      	ldr	r7, [pc, #208]	; (ef30 <scan_ticker_enable+0xd8>)
static void scan_ticker_enable (void){
    ee5e:	b08a      	sub	sp, #40	; 0x28
	ticks_anchor = ticker_ticks_now_get();
    ee60:	f7fc fab6 	bl	b3d0 <ticker_ticks_now_get>
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    ee64:	f8d7 8c40 	ldr.w	r8, [r7, #3136]	; 0xc40
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    ee68:	4b32      	ldr	r3, [pc, #200]	; (ef34 <scan_ticker_enable+0xdc>)
    ee6a:	f240 2471 	movw	r4, #625	; 0x271
    ee6e:	fb04 f408 	mul.w	r4, r4, r8
    ee72:	fba4 4503 	umull	r4, r5, r4, r3
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    ee76:	f642 63ed 	movw	r3, #12013	; 0x2eed
    ee7a:	9308      	str	r3, [sp, #32]
    ee7c:	4b2e      	ldr	r3, [pc, #184]	; (ef38 <scan_ticker_enable+0xe0>)
    ee7e:	9307      	str	r3, [sp, #28]
    ee80:	2600      	movs	r6, #0
    ee82:	4b2e      	ldr	r3, [pc, #184]	; (ef3c <scan_ticker_enable+0xe4>)
    ee84:	9606      	str	r6, [sp, #24]
    ee86:	9305      	str	r3, [sp, #20]
    ee88:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
    ee8c:	f8d7 3c44 	ldr.w	r3, [r7, #3140]	; 0xc44
    ee90:	9603      	str	r6, [sp, #12]
    ee92:	4413      	add	r3, r2
    ee94:	9304      	str	r3, [sp, #16]
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    ee96:	4620      	mov	r0, r4
    ee98:	a323      	add	r3, pc, #140	; (adr r3, ef28 <scan_ticker_enable+0xd0>)
    ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee9e:	4629      	mov	r1, r5
    eea0:	f7f1 f9e2 	bl	268 <__aeabi_uldivmod>
    eea4:	4a26      	ldr	r2, [pc, #152]	; (ef40 <scan_ticker_enable+0xe8>)
    eea6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eeaa:	2307      	movs	r3, #7
    eeac:	2100      	movs	r1, #0
    eeae:	4343      	muls	r3, r0
    eeb0:	fb02 3301 	mla	r3, r2, r1, r3
    eeb4:	fba0 0102 	umull	r0, r1, r0, r2
    eeb8:	1a20      	subs	r0, r4, r0
    eeba:	4419      	add	r1, r3
    eebc:	eb65 0101 	sbc.w	r1, r5, r1
    eec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    eec4:	2300      	movs	r3, #0
    eec6:	f7f1 f9cf 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eeca:	9002      	str	r0, [sp, #8]
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    eecc:	481d      	ldr	r0, [pc, #116]	; (ef44 <scan_ticker_enable+0xec>)
    eece:	2391      	movs	r3, #145	; 0x91
    eed0:	fba8 0100 	umull	r0, r1, r8, r0
    eed4:	fb03 1108 	mla	r1, r3, r8, r1
    eed8:	a313      	add	r3, pc, #76	; (adr r3, ef28 <scan_ticker_enable+0xd0>)
    eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
    eede:	f7f1 f9c3 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    eee2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eee6:	9001      	str	r0, [sp, #4]
    eee8:	9600      	str	r6, [sp, #0]
    eeea:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
    eeee:	2206      	movs	r2, #6
    eef0:	4631      	mov	r1, r6
    eef2:	4630      	mov	r0, r6
    eef4:	f7fc f8fe 	bl	b0f4 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    eef8:	f030 0302 	bics.w	r3, r0, #2
    eefc:	d00e      	beq.n	ef1c <scan_ticker_enable+0xc4>
    eefe:	4b12      	ldr	r3, [pc, #72]	; (ef48 <scan_ticker_enable+0xf0>)
    ef00:	9301      	str	r3, [sp, #4]
    ef02:	9300      	str	r3, [sp, #0]
    ef04:	4a11      	ldr	r2, [pc, #68]	; (ef4c <scan_ticker_enable+0xf4>)
    ef06:	4b12      	ldr	r3, [pc, #72]	; (ef50 <scan_ticker_enable+0xf8>)
    ef08:	4912      	ldr	r1, [pc, #72]	; (ef54 <scan_ticker_enable+0xfc>)
    ef0a:	4813      	ldr	r0, [pc, #76]	; (ef58 <scan_ticker_enable+0x100>)
    ef0c:	f7f2 fbe8 	bl	16e0 <printk>
    ef10:	4040      	eors	r0, r0
    ef12:	f380 8811 	msr	BASEPRI, r0
    ef16:	f04f 0004 	mov.w	r0, #4
    ef1a:	df02      	svc	2
}
    ef1c:	b00a      	add	sp, #40	; 0x28
    ef1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef22:	bf00      	nop
    ef24:	f3af 8000 	nop.w
    ef28:	1afd498d 	.word	0x1afd498d
    ef2c:	00000007 	.word	0x00000007
    ef30:	20000b98 	.word	0x20000b98
    ef34:	3b9aca00 	.word	0x3b9aca00
    ef38:	0000e695 	.word	0x0000e695
    ef3c:	0000f6e9 	.word	0x0000f6e9
    ef40:	1afd498d 	.word	0x1afd498d
    ef44:	84e72a00 	.word	0x84e72a00
    ef48:	0001868d 	.word	0x0001868d
    ef4c:	00019a84 	.word	0x00019a84
    ef50:	0001b3ec 	.word	0x0001b3ec
    ef54:	00019a8b 	.word	0x00019a8b
    ef58:	0001beea 	.word	0x0001beea

0000ef5c <aux_packet_function>:
scan_ticker_enable();	
    ef5c:	f7ff bf7c 	b.w	ee58 <scan_ticker_enable>

0000ef60 <prepare_normal_set>:
{
    ef60:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    ef62:	6804      	ldr	r4, [r0, #0]
    ef64:	2c00      	cmp	r4, #0
{
    ef66:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    ef68:	da26      	bge.n	efb8 <prepare_normal_set+0x58>
		u32_t ticks_prepare_to_start =
    ef6a:	6843      	ldr	r3, [r0, #4]
    ef6c:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    ef6e:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    ef70:	429d      	cmp	r5, r3
    ef72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    ef76:	bf34      	ite	cc
    ef78:	1ae4      	subcc	r4, r4, r3
    ef7a:	1b64      	subcs	r4, r4, r5
		ticker_status =
    ef7c:	4b0f      	ldr	r3, [pc, #60]	; (efbc <prepare_normal_set+0x5c>)
    ef7e:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    ef80:	b2a4      	uxth	r4, r4
		ticker_status =
    ef82:	2300      	movs	r3, #0
    ef84:	9304      	str	r3, [sp, #16]
    ef86:	9303      	str	r3, [sp, #12]
    ef88:	9302      	str	r3, [sp, #8]
    ef8a:	4618      	mov	r0, r3
    ef8c:	9401      	str	r4, [sp, #4]
    ef8e:	9400      	str	r4, [sp, #0]
    ef90:	f7fc f900 	bl	b194 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    ef94:	f030 0302 	bics.w	r3, r0, #2
    ef98:	d00e      	beq.n	efb8 <prepare_normal_set+0x58>
    ef9a:	4b09      	ldr	r3, [pc, #36]	; (efc0 <prepare_normal_set+0x60>)
    ef9c:	9301      	str	r3, [sp, #4]
    ef9e:	9300      	str	r3, [sp, #0]
    efa0:	4a08      	ldr	r2, [pc, #32]	; (efc4 <prepare_normal_set+0x64>)
    efa2:	4b09      	ldr	r3, [pc, #36]	; (efc8 <prepare_normal_set+0x68>)
    efa4:	4909      	ldr	r1, [pc, #36]	; (efcc <prepare_normal_set+0x6c>)
    efa6:	480a      	ldr	r0, [pc, #40]	; (efd0 <prepare_normal_set+0x70>)
    efa8:	f7f2 fb9a 	bl	16e0 <printk>
    efac:	4040      	eors	r0, r0
    efae:	f380 8811 	msr	BASEPRI, r0
    efb2:	f04f 0004 	mov.w	r0, #4
    efb6:	df02      	svc	2
}
    efb8:	b009      	add	sp, #36	; 0x24
    efba:	bd30      	pop	{r4, r5, pc}
    efbc:	0000d0cd 	.word	0x0000d0cd
    efc0:	0001868d 	.word	0x0001868d
    efc4:	00019a84 	.word	0x00019a84
    efc8:	0001b197 	.word	0x0001b197
    efcc:	00019a8b 	.word	0x00019a8b
    efd0:	0001b473 	.word	0x0001b473

0000efd4 <preempt_calc>:
{
    efd4:	b570      	push	{r4, r5, r6, lr}
    efd6:	4614      	mov	r4, r2
    efd8:	460e      	mov	r6, r1
    efda:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    efdc:	f7fc f9f8 	bl	b3d0 <ticker_ticks_now_get>
	u32_t diff =
    efe0:	4621      	mov	r1, r4
    efe2:	f7fc f9f7 	bl	b3d4 <ticker_ticks_diff_get>
	diff += 3;
    efe6:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    efe8:	2c09      	cmp	r4, #9
    efea:	d90f      	bls.n	f00c <preempt_calc+0x38>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
    efec:	2100      	movs	r1, #0
    efee:	4608      	mov	r0, r1
    eff0:	f7fe fbb0 	bl	d754 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    eff4:	4632      	mov	r2, r6
    eff6:	2100      	movs	r1, #0
    eff8:	4628      	mov	r0, r5
    effa:	f7ff ffb1 	bl	ef60 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    effe:	68ab      	ldr	r3, [r5, #8]
    f000:	441c      	add	r4, r3
		if (diff <
    f002:	2c26      	cmp	r4, #38	; 0x26
    f004:	d800      	bhi.n	f008 <preempt_calc+0x34>
			hdr->ticks_preempt_to_start = diff;
    f006:	60ac      	str	r4, [r5, #8]
		return 1;
    f008:	2001      	movs	r0, #1
}
    f00a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    f00c:	2000      	movs	r0, #0
    f00e:	bd70      	pop	{r4, r5, r6, pc}

0000f010 <mayfly_xtal_stop_calc>:
{
    f010:	b570      	push	{r4, r5, r6, lr}
    f012:	b08e      	sub	sp, #56	; 0x38
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    f014:	2302      	movs	r3, #2
    f016:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    f018:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    f01a:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f01c:	4e7e      	ldr	r6, [pc, #504]	; (f218 <mayfly_xtal_stop_calc+0x208>)
				    _radio.connection_count));
    f01e:	4d7f      	ldr	r5, [pc, #508]	; (f21c <mayfly_xtal_stop_calc+0x20c>)
	struct connection *conn_curr = NULL;
    f020:	930a      	str	r3, [sp, #40]	; 0x28
{
    f022:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    f024:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    f026:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    f02a:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f02c:	ab09      	add	r3, sp, #36	; 0x24
    f02e:	9302      	str	r3, [sp, #8]
    f030:	ab0c      	add	r3, sp, #48	; 0x30
    f032:	9300      	str	r3, [sp, #0]
    f034:	9601      	str	r6, [sp, #4]
    f036:	ab0d      	add	r3, sp, #52	; 0x34
    f038:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    f03c:	2101      	movs	r1, #1
    f03e:	2000      	movs	r0, #0
    f040:	f7fc f932 	bl	b2a8 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    f044:	2802      	cmp	r0, #2
    f046:	d014      	beq.n	f072 <mayfly_xtal_stop_calc+0x62>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    f048:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f04a:	b1b3      	cbz	r3, f07a <mayfly_xtal_stop_calc+0x6a>
    f04c:	4b74      	ldr	r3, [pc, #464]	; (f220 <mayfly_xtal_stop_calc+0x210>)
    f04e:	9301      	str	r3, [sp, #4]
    f050:	9300      	str	r3, [sp, #0]
    f052:	4a74      	ldr	r2, [pc, #464]	; (f224 <mayfly_xtal_stop_calc+0x214>)
    f054:	4b74      	ldr	r3, [pc, #464]	; (f228 <mayfly_xtal_stop_calc+0x218>)
    f056:	4975      	ldr	r1, [pc, #468]	; (f22c <mayfly_xtal_stop_calc+0x21c>)
    f058:	4875      	ldr	r0, [pc, #468]	; (f230 <mayfly_xtal_stop_calc+0x220>)
	LL_ASSERT(hdr_curr);
    f05a:	f7f2 fb41 	bl	16e0 <printk>
    f05e:	4040      	eors	r0, r0
    f060:	f380 8811 	msr	BASEPRI, r0
    f064:	f04f 0004 	mov.w	r0, #4
    f068:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    f06a:	2101      	movs	r1, #1
    f06c:	2000      	movs	r0, #0
    f06e:	f7fc f999 	bl	b3a4 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    f072:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f074:	2b02      	cmp	r3, #2
    f076:	d0f8      	beq.n	f06a <mayfly_xtal_stop_calc+0x5a>
    f078:	e7e6      	b.n	f048 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    f07a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    f07e:	2bff      	cmp	r3, #255	; 0xff
    f080:	d004      	beq.n	f08c <mayfly_xtal_stop_calc+0x7c>
    f082:	f895 2cf8 	ldrb.w	r2, [r5, #3320]	; 0xcf8
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    f086:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    f088:	4293      	cmp	r3, r2
    f08a:	dacf      	bge.n	f02c <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    f08c:	1f5a      	subs	r2, r3, #5
    f08e:	b2d2      	uxtb	r2, r2
    f090:	2af9      	cmp	r2, #249	; 0xf9
    f092:	d805      	bhi.n	f0a0 <mayfly_xtal_stop_calc+0x90>
				_radio.connection_count))) {
    f094:	4a61      	ldr	r2, [pc, #388]	; (f21c <mayfly_xtal_stop_calc+0x20c>)
    f096:	f892 2cf8 	ldrb.w	r2, [r2, #3320]	; 0xcf8
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    f09a:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    f09c:	4293      	cmp	r3, r2
    f09e:	db05      	blt.n	f0ac <mayfly_xtal_stop_calc+0x9c>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    f0a0:	2100      	movs	r1, #0
    f0a2:	2001      	movs	r0, #1
    f0a4:	f7fe fb56 	bl	d754 <mayfly_xtal_retain>
}
    f0a8:	b00e      	add	sp, #56	; 0x38
    f0aa:	bd70      	pop	{r4, r5, r6, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    f0ac:	a90a      	add	r1, sp, #40	; 0x28
    f0ae:	b2e0      	uxtb	r0, r4
    f0b0:	f7ff fbf0 	bl	e894 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    f0b4:	b938      	cbnz	r0, f0c6 <mayfly_xtal_stop_calc+0xb6>
    f0b6:	4b5a      	ldr	r3, [pc, #360]	; (f220 <mayfly_xtal_stop_calc+0x210>)
    f0b8:	9301      	str	r3, [sp, #4]
    f0ba:	9300      	str	r3, [sp, #0]
    f0bc:	4a59      	ldr	r2, [pc, #356]	; (f224 <mayfly_xtal_stop_calc+0x214>)
    f0be:	4b5a      	ldr	r3, [pc, #360]	; (f228 <mayfly_xtal_stop_calc+0x218>)
    f0c0:	495a      	ldr	r1, [pc, #360]	; (f22c <mayfly_xtal_stop_calc+0x21c>)
    f0c2:	485c      	ldr	r0, [pc, #368]	; (f234 <mayfly_xtal_stop_calc+0x224>)
    f0c4:	e7c9      	b.n	f05a <mayfly_xtal_stop_calc+0x4a>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    f0c6:	6803      	ldr	r3, [r0, #0]
    f0c8:	6844      	ldr	r4, [r0, #4]
    f0ca:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    f0cc:	bfb8      	it	lt
    f0ce:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    f0d0:	429c      	cmp	r4, r3
    f0d2:	bf38      	it	cc
    f0d4:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    f0d6:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    f0d8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    f0dc:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    f0de:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    f0e0:	f7ff fbd8 	bl	e894 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    f0e4:	4605      	mov	r5, r0
    f0e6:	b938      	cbnz	r0, f0f8 <mayfly_xtal_stop_calc+0xe8>
    f0e8:	4b4d      	ldr	r3, [pc, #308]	; (f220 <mayfly_xtal_stop_calc+0x210>)
    f0ea:	9301      	str	r3, [sp, #4]
    f0ec:	9300      	str	r3, [sp, #0]
    f0ee:	4a4d      	ldr	r2, [pc, #308]	; (f224 <mayfly_xtal_stop_calc+0x214>)
    f0f0:	4b4d      	ldr	r3, [pc, #308]	; (f228 <mayfly_xtal_stop_calc+0x218>)
    f0f2:	494e      	ldr	r1, [pc, #312]	; (f22c <mayfly_xtal_stop_calc+0x21c>)
    f0f4:	4850      	ldr	r0, [pc, #320]	; (f238 <mayfly_xtal_stop_calc+0x228>)
    f0f6:	e7b0      	b.n	f05a <mayfly_xtal_stop_calc+0x4a>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    f0f8:	6886      	ldr	r6, [r0, #8]
    f0fa:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    f0fc:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    f0fe:	429e      	cmp	r6, r3
    f100:	bf38      	it	cc
    f102:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    f104:	2a00      	cmp	r2, #0
    f106:	da05      	bge.n	f114 <mayfly_xtal_stop_calc+0x104>
		ticks_to_expire -=
    f108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    f10a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    f10e:	4433      	add	r3, r6
    f110:	1a9b      	subs	r3, r3, r2
    f112:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    f114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    f116:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    f11a:	4293      	cmp	r3, r2
    f11c:	d20a      	bcs.n	f134 <mayfly_xtal_stop_calc+0x124>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
    f11e:	2100      	movs	r1, #0
    f120:	2001      	movs	r0, #1
    f122:	f7fe fb17 	bl	d754 <mayfly_xtal_retain>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    f126:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    f12a:	2101      	movs	r1, #1
    f12c:	4628      	mov	r0, r5
    f12e:	f7ff ff17 	bl	ef60 <prepare_normal_set>
    f132:	e7b9      	b.n	f0a8 <mayfly_xtal_stop_calc+0x98>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
    f134:	2101      	movs	r1, #1
    f136:	4608      	mov	r0, r1
    f138:	f7fe fb0c 	bl	d754 <mayfly_xtal_retain>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    f13c:	682b      	ldr	r3, [r5, #0]
    f13e:	2b00      	cmp	r3, #0
    f140:	db1c      	blt.n	f17c <mayfly_xtal_stop_calc+0x16c>
    f142:	429e      	cmp	r6, r3
    f144:	d21a      	bcs.n	f17c <mayfly_xtal_stop_calc+0x16c>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    f146:	1b9b      	subs	r3, r3, r6
			ticker_status =
    f148:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    f14a:	b29b      	uxth	r3, r3
			ticker_status =
    f14c:	493b      	ldr	r1, [pc, #236]	; (f23c <mayfly_xtal_stop_calc+0x22c>)
    f14e:	9105      	str	r1, [sp, #20]
    f150:	9302      	str	r3, [sp, #8]
    f152:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    f156:	9506      	str	r5, [sp, #24]
    f158:	9004      	str	r0, [sp, #16]
    f15a:	9003      	str	r0, [sp, #12]
    f15c:	9001      	str	r0, [sp, #4]
    f15e:	9000      	str	r0, [sp, #0]
    f160:	2101      	movs	r1, #1
    f162:	f7fc f817 	bl	b194 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f166:	f030 0302 	bics.w	r3, r0, #2
    f16a:	d007      	beq.n	f17c <mayfly_xtal_stop_calc+0x16c>
    f16c:	4b2c      	ldr	r3, [pc, #176]	; (f220 <mayfly_xtal_stop_calc+0x210>)
    f16e:	9301      	str	r3, [sp, #4]
    f170:	9300      	str	r3, [sp, #0]
    f172:	4a2c      	ldr	r2, [pc, #176]	; (f224 <mayfly_xtal_stop_calc+0x214>)
    f174:	4b2c      	ldr	r3, [pc, #176]	; (f228 <mayfly_xtal_stop_calc+0x218>)
    f176:	492d      	ldr	r1, [pc, #180]	; (f22c <mayfly_xtal_stop_calc+0x21c>)
    f178:	4831      	ldr	r0, [pc, #196]	; (f240 <mayfly_xtal_stop_calc+0x230>)
    f17a:	e76e      	b.n	f05a <mayfly_xtal_stop_calc+0x4a>
		if (!conn_curr || !conn_next) {
    f17c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    f17e:	2e00      	cmp	r6, #0
    f180:	d092      	beq.n	f0a8 <mayfly_xtal_stop_calc+0x98>
    f182:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    f184:	2d00      	cmp	r5, #0
    f186:	d08f      	beq.n	f0a8 <mayfly_xtal_stop_calc+0x98>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    f188:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    f18a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    f18c:	429a      	cmp	r2, r3
    f18e:	d18b      	bne.n	f0a8 <mayfly_xtal_stop_calc+0x98>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    f190:	482c      	ldr	r0, [pc, #176]	; (f244 <mayfly_xtal_stop_calc+0x234>)
    f192:	b292      	uxth	r2, r2
    f194:	fba2 0100 	umull	r0, r1, r2, r0
    f198:	f240 1323 	movw	r3, #291	; 0x123
    f19c:	fb03 1102 	mla	r1, r3, r2, r1
    f1a0:	a31b      	add	r3, pc, #108	; (adr r3, f210 <mayfly_xtal_stop_calc+0x200>)
    f1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    f1a6:	f7f1 f85f 	bl	268 <__aeabi_uldivmod>
    f1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f1ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    f1b0:	2200      	movs	r2, #0
    f1b2:	4298      	cmp	r0, r3
    f1b4:	d318      	bcc.n	f1e8 <mayfly_xtal_stop_calc+0x1d8>
    f1b6:	b102      	cbz	r2, f1ba <mayfly_xtal_stop_calc+0x1aa>
    f1b8:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    f1ba:	f996 201d 	ldrsb.w	r2, [r6, #29]
    f1be:	2a00      	cmp	r2, #0
    f1c0:	f995 201d 	ldrsb.w	r2, [r5, #29]
    f1c4:	da13      	bge.n	f1ee <mayfly_xtal_stop_calc+0x1de>
    f1c6:	2a00      	cmp	r2, #0
    f1c8:	f6ff af6e 	blt.w	f0a8 <mayfly_xtal_stop_calc+0x98>
			     (ticks_slot_abs +
    f1cc:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    f1ce:	429c      	cmp	r4, r3
    f1d0:	f67f af6a 	bls.w	f0a8 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_curr);
    f1d4:	4630      	mov	r0, r6
    f1d6:	f7fd ffc3 	bl	d160 <conn_update_req>
				if (status == 2) {
    f1da:	2802      	cmp	r0, #2
    f1dc:	f47f af64 	bne.w	f0a8 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_next);
    f1e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    f1e2:	f7fd ffbd 	bl	d160 <conn_update_req>
    f1e6:	e75f      	b.n	f0a8 <mayfly_xtal_stop_calc+0x98>
				ticks_to_expire -= ticks_conn_interval;
    f1e8:	1a1b      	subs	r3, r3, r0
    f1ea:	2201      	movs	r2, #1
    f1ec:	e7e1      	b.n	f1b2 <mayfly_xtal_stop_calc+0x1a2>
			} else if (!conn_curr->role && conn_next->role &&
    f1ee:	2a00      	cmp	r2, #0
    f1f0:	f6bf af5a 	bge.w	f0a8 <mayfly_xtal_stop_calc+0x98>
				    (ticks_slot_abs +
    f1f4:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    f1f6:	429c      	cmp	r4, r3
    f1f8:	f67f af56 	bls.w	f0a8 <mayfly_xtal_stop_calc+0x98>
				status = conn_update_req(conn_next);
    f1fc:	4628      	mov	r0, r5
    f1fe:	f7fd ffaf 	bl	d160 <conn_update_req>
				if (status == 2) {
    f202:	2802      	cmp	r0, #2
    f204:	f47f af50 	bne.w	f0a8 <mayfly_xtal_stop_calc+0x98>
					conn_update_req(conn_curr);
    f208:	980a      	ldr	r0, [sp, #40]	; 0x28
    f20a:	e7ea      	b.n	f1e2 <mayfly_xtal_stop_calc+0x1d2>
    f20c:	f3af 8000 	nop.w
    f210:	1afd498d 	.word	0x1afd498d
    f214:	00000007 	.word	0x00000007
    f218:	0000d0bd 	.word	0x0000d0bd
    f21c:	20000b98 	.word	0x20000b98
    f220:	0001868d 	.word	0x0001868d
    f224:	00019a84 	.word	0x00019a84
    f228:	0001b1aa 	.word	0x0001b1aa
    f22c:	00019a8b 	.word	0x00019a8b
    f230:	0001bf7d 	.word	0x0001bf7d
    f234:	0001bbe7 	.word	0x0001bbe7
    f238:	0001bc11 	.word	0x0001bc11
    f23c:	0000d0c1 	.word	0x0000d0c1
    f240:	0001b473 	.word	0x0001b473
    f244:	09ce5400 	.word	0x09ce5400

0000f248 <adv_scan_configure.constprop.32>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    f248:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    f24a:	ad02      	add	r5, sp, #8
    f24c:	4b10      	ldr	r3, [pc, #64]	; (f290 <adv_scan_configure.constprop.32+0x48>)
    f24e:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    f252:	4604      	mov	r4, r0
	radio_reset();
    f254:	f006 ffce 	bl	161f4 <radio_reset>
	radio_tx_power_set(0);
    f258:	2000      	movs	r0, #0
    f25a:	f007 f813 	bl	16284 <radio_tx_power_set>
	radio_isr_set(isr);
    f25e:	480d      	ldr	r0, [pc, #52]	; (f294 <adv_scan_configure.constprop.32+0x4c>)
    f260:	f006 ff92 	bl	16188 <radio_isr_set>
	radio_phy_set(phy, flags);
    f264:	2101      	movs	r1, #1
    f266:	4620      	mov	r0, r4
    f268:	f006 ffde 	bl	16228 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    f26c:	4628      	mov	r0, r5
    f26e:	f007 f827 	bl	162c0 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    f272:	0062      	lsls	r2, r4, #1
    f274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    f278:	21ff      	movs	r1, #255	; 0xff
    f27a:	2008      	movs	r0, #8
    f27c:	f007 f838 	bl	162f0 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    f280:	4905      	ldr	r1, [pc, #20]	; (f298 <adv_scan_configure.constprop.32+0x50>)
    f282:	f240 605b 	movw	r0, #1627	; 0x65b
    f286:	f007 f8d5 	bl	16434 <radio_crc_configure>
}
    f28a:	b003      	add	sp, #12
    f28c:	bd30      	pop	{r4, r5, pc}
    f28e:	bf00      	nop
    f290:	8e89bed6 	.word	0x8e89bed6
    f294:	00012301 	.word	0x00012301
    f298:	00555555 	.word	0x00555555

0000f29c <event_scan>:
{
    f29c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    f2a0:	4b8b      	ldr	r3, [pc, #556]	; (f4d0 <event_scan+0x234>)
    f2a2:	7cd9      	ldrb	r1, [r3, #19]
{
    f2a4:	b08d      	sub	sp, #52	; 0x34
    f2a6:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    f2a8:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    f2ac:	461c      	mov	r4, r3
    f2ae:	b171      	cbz	r1, f2ce <event_scan+0x32>
    f2b0:	4b88      	ldr	r3, [pc, #544]	; (f4d4 <event_scan+0x238>)
    f2b2:	9301      	str	r3, [sp, #4]
    f2b4:	9300      	str	r3, [sp, #0]
    f2b6:	4a88      	ldr	r2, [pc, #544]	; (f4d8 <event_scan+0x23c>)
    f2b8:	4b88      	ldr	r3, [pc, #544]	; (f4dc <event_scan+0x240>)
    f2ba:	4989      	ldr	r1, [pc, #548]	; (f4e0 <event_scan+0x244>)
    f2bc:	4889      	ldr	r0, [pc, #548]	; (f4e4 <event_scan+0x248>)
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    f2be:	f7f2 fa0f 	bl	16e0 <printk>
    f2c2:	4040      	eors	r0, r0
    f2c4:	f380 8811 	msr	BASEPRI, r0
    f2c8:	f04f 0004 	mov.w	r0, #4
    f2cc:	df02      	svc	2
    f2ce:	7c1b      	ldrb	r3, [r3, #16]
    f2d0:	b2db      	uxtb	r3, r3
    f2d2:	2b06      	cmp	r3, #6
    f2d4:	d007      	beq.n	f2e6 <event_scan+0x4a>
    f2d6:	4b7f      	ldr	r3, [pc, #508]	; (f4d4 <event_scan+0x238>)
    f2d8:	9301      	str	r3, [sp, #4]
    f2da:	9300      	str	r3, [sp, #0]
    f2dc:	4a7e      	ldr	r2, [pc, #504]	; (f4d8 <event_scan+0x23c>)
    f2de:	4b7f      	ldr	r3, [pc, #508]	; (f4dc <event_scan+0x240>)
    f2e0:	497f      	ldr	r1, [pc, #508]	; (f4e0 <event_scan+0x244>)
    f2e2:	4881      	ldr	r0, [pc, #516]	; (f4e8 <event_scan+0x24c>)
    f2e4:	e7eb      	b.n	f2be <event_scan+0x22>
	_radio.role = ROLE_SCAN;
    f2e6:	2102      	movs	r1, #2
    f2e8:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    f2ea:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    f2ec:	7422      	strb	r2, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f2ee:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    f2f2:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    f2f4:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	if(aux_scan){
    f2f8:	4d7c      	ldr	r5, [pc, #496]	; (f4ec <event_scan+0x250>)
	_radio.state = STATE_RX;
    f2fa:	2101      	movs	r1, #1
	_radio.scanner.state = 0;
    f2fc:	f362 0341 	bfi	r3, r2, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f300:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    f304:	7521      	strb	r1, [r4, #20]
	_radio.scanner.state = 0;
    f306:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    f30a:	f7ff ff9d 	bl	f248 <adv_scan_configure.constprop.32>
	if(aux_scan){
    f30e:	782f      	ldrb	r7, [r5, #0]
    f310:	2f00      	cmp	r7, #0
    f312:	f000 8092 	beq.w	f43a <event_scan+0x19e>
		stop_time_ticker = k_cycle_get_32();
    f316:	f7f3 f9cd 	bl	26b4 <_timer_cycle_get_32>
    f31a:	4b75      	ldr	r3, [pc, #468]	; (f4f0 <event_scan+0x254>)
    f31c:	6018      	str	r0, [r3, #0]
		event_time_diff = (stop_time_ticker - start_time_ticker);
    f31e:	4b75      	ldr	r3, [pc, #468]	; (f4f4 <event_scan+0x258>)
    f320:	681b      	ldr	r3, [r3, #0]
    f322:	eba0 0e03 	sub.w	lr, r0, r3
    f326:	4b74      	ldr	r3, [pc, #464]	; (f4f8 <event_scan+0x25c>)
    f328:	f8c3 e000 	str.w	lr, [r3]
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    f32c:	4b73      	ldr	r3, [pc, #460]	; (f4fc <event_scan+0x260>)
    f32e:	681a      	ldr	r2, [r3, #0]
    f330:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    f334:	fb82 2307 	smull	r2, r3, r2, r7
    f338:	fba2 010e 	umull	r0, r1, r2, lr
    f33c:	fb0e 1103 	mla	r1, lr, r3, r1
    f340:	4b6f      	ldr	r3, [pc, #444]	; (f500 <event_scan+0x264>)
    f342:	681a      	ldr	r2, [r3, #0]
    f344:	17d3      	asrs	r3, r2, #31
    f346:	f7f0 ff8f 	bl	268 <__aeabi_uldivmod>
    f34a:	4b6e      	ldr	r3, [pc, #440]	; (f504 <event_scan+0x268>)
		counter++;
    f34c:	4a6e      	ldr	r2, [pc, #440]	; (f508 <event_scan+0x26c>)
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    f34e:	fbb0 f0f7 	udiv	r0, r0, r7
    f352:	2100      	movs	r1, #0
    f354:	e9c3 0100 	strd	r0, r1, [r3]
		counter++;
    f358:	7813      	ldrb	r3, [r2, #0]
    f35a:	3301      	adds	r3, #1
    f35c:	7013      	strb	r3, [r2, #0]
		if(Time_difference_ticker < _radio.ext_scanner.chan_off){
    f35e:	f604 4398 	addw	r3, r4, #3224	; 0xc98
    f362:	e9d3 8900 	ldrd	r8, r9, [r3]
    f366:	4549      	cmp	r1, r9
    f368:	bf08      	it	eq
    f36a:	4540      	cmpeq	r0, r8
    f36c:	f604 47a8 	addw	r7, r4, #3240	; 0xca8
    f370:	d206      	bcs.n	f380 <event_scan+0xe4>
			_radio.ext_scanner.chan_off_calculation -= Time_difference_ticker;
    f372:	e9d7 2300 	ldrd	r2, r3, [r7]
    f376:	1a10      	subs	r0, r2, r0
    f378:	eb63 0101 	sbc.w	r1, r3, r1
    f37c:	e9c7 0100 	strd	r0, r1, [r7]
		if( _radio.ext_scanner.chan_off_calculation < 0x7530){				//2710
    f380:	e9d7 2300 	ldrd	r2, r3, [r7]
    f384:	2100      	movs	r1, #0
    f386:	f247 502f 	movw	r0, #29999	; 0x752f
    f38a:	4299      	cmp	r1, r3
    f38c:	bf08      	it	eq
    f38e:	4290      	cmpeq	r0, r2
    f390:	d350      	bcc.n	f434 <event_scan+0x198>
			if(_radio.ext_scanner.chan_off_calculation <= 0 ){
    f392:	4313      	orrs	r3, r2
				aux_scan = 0x00;
    f394:	bf08      	it	eq
    f396:	2300      	moveq	r3, #0
			chan_set(3);
    f398:	f04f 0003 	mov.w	r0, #3
				aux_scan = 0x00;
    f39c:	bf08      	it	eq
    f39e:	702b      	strbeq	r3, [r5, #0]
			chan_set(3);
    f3a0:	f7fe fa82 	bl	d8a8 <chan_set>
			aux_scan = 0x00;
    f3a4:	2300      	movs	r3, #0
    f3a6:	702b      	strb	r3, [r5, #0]
	radio_tmr_tifs_set(RADIO_TIFS);
    f3a8:	2096      	movs	r0, #150	; 0x96
    f3aa:	f007 f8ff 	bl	165ac <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    f3ae:	2300      	movs	r3, #0
    f3b0:	4619      	mov	r1, r3
    f3b2:	461a      	mov	r2, r3
    f3b4:	4618      	mov	r0, r3
    f3b6:	f007 f867 	bl	16488 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    f3ba:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
    f3be:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
    f3c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    f3c6:	3008      	adds	r0, #8
    f3c8:	f006 ffc4 	bl	16354 <radio_pkt_rx_set>
	radio_rssi_measure();
    f3cc:	f007 f874 	bl	164b8 <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
    f3d0:	f007 f84a 	bl	16468 <radio_pkt_scratch_get>
	if (ctrl_rl_enabled()) {
    f3d4:	f006 fa42 	bl	1585c <ctrl_rl_enabled>
    f3d8:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
    f3dc:	2800      	cmp	r0, #0
    f3de:	d043      	beq.n	f468 <event_scan+0x1cc>
		struct ll_filter *filter =
    f3e0:	f3c3 1000 	ubfx	r0, r3, #4, #1
    f3e4:	f006 f866 	bl	154b4 <ctrl_filter_get>
    f3e8:	4605      	mov	r5, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    f3ea:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    f3ee:	f005 ff91 	bl	15314 <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    f3f2:	7869      	ldrb	r1, [r5, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    f3f4:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    f3f6:	1caa      	adds	r2, r5, #2
    f3f8:	7828      	ldrb	r0, [r5, #0]
    f3fa:	f007 f87f 	bl	164fc <radio_filter_configure>
		radio_ar_configure(count, irks);
    f3fe:	4639      	mov	r1, r7
    f400:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    f404:	f007 fa5e 	bl	168c4 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    f408:	68e2      	ldr	r2, [r4, #12]
    f40a:	f106 0109 	add.w	r1, r6, #9
    f40e:	2000      	movs	r0, #0
    f410:	f007 f8d8 	bl	165c4 <radio_tmr_start>
	radio_tmr_end_capture();
    f414:	f007 f994 	bl	16740 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    f418:	2106      	movs	r1, #6
    f41a:	4632      	mov	r2, r6
    f41c:	483b      	ldr	r0, [pc, #236]	; (f50c <event_scan+0x270>)
    f41e:	f7ff fdd9 	bl	efd4 <preempt_calc>
    f422:	4601      	mov	r1, r0
    f424:	b360      	cbz	r0, f480 <event_scan+0x1e4>
		_radio.state = STATE_STOP;
    f426:	2304      	movs	r3, #4
    f428:	7523      	strb	r3, [r4, #20]
		radio_disable();
    f42a:	f006 ffc7 	bl	163bc <radio_disable>
}
    f42e:	b00d      	add	sp, #52	; 0x34
    f430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    f434:	e9c7 8900 	strd	r8, r9, [r7]
    f438:	e7b6      	b.n	f3a8 <event_scan+0x10c>
		chan_set(37 + _radio.scanner.chan++);
    f43a:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    f43e:	f3c3 0081 	ubfx	r0, r3, #2, #2
    f442:	1c42      	adds	r2, r0, #1
    f444:	f362 0383 	bfi	r3, r2, #2, #2
    f448:	3025      	adds	r0, #37	; 0x25
    f44a:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
    f44e:	f7fe fa2b 	bl	d8a8 <chan_set>
		if (_radio.scanner.chan == 3) {
    f452:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    f456:	f003 020c 	and.w	r2, r3, #12
    f45a:	2a0c      	cmp	r2, #12
			_radio.scanner.chan = 0;
    f45c:	bf04      	itt	eq
    f45e:	f367 0383 	bfieq	r3, r7, #2, #2
    f462:	f884 3c2c 	strbeq.w	r3, [r4, #3116]	; 0xc2c
    f466:	e79f      	b.n	f3a8 <event_scan+0x10c>
	if (_radio.scanner.filter_policy) {
    f468:	f013 0f30 	tst.w	r3, #48	; 0x30
    f46c:	d0cc      	beq.n	f408 <event_scan+0x16c>
		struct ll_filter *wl = ctrl_filter_get(true);
    f46e:	2001      	movs	r0, #1
    f470:	f006 f820 	bl	154b4 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    f474:	1c82      	adds	r2, r0, #2
    f476:	7841      	ldrb	r1, [r0, #1]
    f478:	7800      	ldrb	r0, [r0, #0]
    f47a:	f007 f83f 	bl	164fc <radio_filter_configure>
    f47e:	e7c3      	b.n	f408 <event_scan+0x16c>
		ret = ticker_start(															//this ticker was for closing the window.we ll use it for Aux packet
    f480:	f641 537b 	movw	r3, #7547	; 0x1d7b
    f484:	9308      	str	r3, [sp, #32]
    f486:	4b22      	ldr	r3, [pc, #136]	; (f510 <event_scan+0x274>)
    f488:	9307      	str	r3, [sp, #28]
    f48a:	2204      	movs	r2, #4
    f48c:	4b21      	ldr	r3, [pc, #132]	; (f514 <event_scan+0x278>)
    f48e:	9206      	str	r2, [sp, #24]
    f490:	9305      	str	r3, [sp, #20]
    f492:	9004      	str	r0, [sp, #16]
    f494:	9003      	str	r0, [sp, #12]
    f496:	9002      	str	r0, [sp, #8]
    f498:	9001      	str	r0, [sp, #4]
    f49a:	f8d4 3c3c 	ldr.w	r3, [r4, #3132]	; 0xc3c
    f49e:	3309      	adds	r3, #9
    f4a0:	9300      	str	r3, [sp, #0]
    f4a2:	4633      	mov	r3, r6
    f4a4:	f7fb fe26 	bl	b0f4 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f4a8:	f030 0302 	bics.w	r3, r0, #2
    f4ac:	d007      	beq.n	f4be <event_scan+0x222>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f4ae:	4b09      	ldr	r3, [pc, #36]	; (f4d4 <event_scan+0x238>)
    f4b0:	9301      	str	r3, [sp, #4]
    f4b2:	9300      	str	r3, [sp, #0]
    f4b4:	4a08      	ldr	r2, [pc, #32]	; (f4d8 <event_scan+0x23c>)
    f4b6:	4b09      	ldr	r3, [pc, #36]	; (f4dc <event_scan+0x240>)
    f4b8:	4909      	ldr	r1, [pc, #36]	; (f4e0 <event_scan+0x244>)
    f4ba:	4817      	ldr	r0, [pc, #92]	; (f518 <event_scan+0x27c>)
    f4bc:	e6ff      	b.n	f2be <event_scan+0x22>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    f4be:	4619      	mov	r1, r3
    f4c0:	4618      	mov	r0, r3
    f4c2:	4a16      	ldr	r2, [pc, #88]	; (f51c <event_scan+0x280>)
    f4c4:	f7fb ff32 	bl	b32c <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f4c8:	f030 0302 	bics.w	r3, r0, #2
    f4cc:	d1ef      	bne.n	f4ae <event_scan+0x212>
    f4ce:	e7ae      	b.n	f42e <event_scan+0x192>
    f4d0:	20000b98 	.word	0x20000b98
    f4d4:	0001868d 	.word	0x0001868d
    f4d8:	00019a84 	.word	0x00019a84
    f4dc:	0001b279 	.word	0x0001b279
    f4e0:	00019a8b 	.word	0x00019a8b
    f4e4:	0001b58f 	.word	0x0001b58f
    f4e8:	0001b608 	.word	0x0001b608
    f4ec:	20001910 	.word	0x20001910
    f4f0:	200053e8 	.word	0x200053e8
    f4f4:	200053ec 	.word	0x200053ec
    f4f8:	20005410 	.word	0x20005410
    f4fc:	20008a44 	.word	0x20008a44
    f500:	20008a40 	.word	0x20008a40
    f504:	200053b8 	.word	0x200053b8
    f508:	20001914 	.word	0x20001914
    f50c:	200017b4 	.word	0x200017b4
    f510:	0000e695 	.word	0x0000e695
    f514:	0000e905 	.word	0x0000e905
    f518:	0001beea 	.word	0x0001beea
    f51c:	0000e87d 	.word	0x0000e87d

0000f520 <event_stop.constprop.33>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    f520:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    f522:	4b05      	ldr	r3, [pc, #20]	; (f538 <event_stop.constprop.33+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f524:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    f526:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f528:	4611      	mov	r1, r2
    f52a:	4610      	mov	r0, r2
    f52c:	f7fb f824 	bl	a578 <mayfly_enqueue>
	LL_ASSERT(!retval);
    f530:	b108      	cbz	r0, f536 <event_stop.constprop.33+0x16>
    f532:	f7ff f9cd 	bl	e8d0 <event_stop.part.11>
    f536:	bd08      	pop	{r3, pc}
    f538:	20008938 	.word	0x20008938

0000f53c <event_common_prepare>:
{
    f53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    f540:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    f542:	681d      	ldr	r5, [r3, #0]
{
    f544:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    f546:	2c00      	cmp	r4, #0
{
    f548:	4681      	mov	r9, r0
    f54a:	910b      	str	r1, [sp, #44]	; 0x2c
    f54c:	4690      	mov	r8, r2
    f54e:	469b      	mov	fp, r3
    f550:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    f554:	da03      	bge.n	f55e <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    f556:	9c16      	ldr	r4, [sp, #88]	; 0x58
    f558:	42ac      	cmp	r4, r5
    f55a:	bf38      	it	cc
    f55c:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    f55e:	42ac      	cmp	r4, r5
    f560:	4f56      	ldr	r7, [pc, #344]	; (f6bc <event_common_prepare+0x180>)
    f562:	d924      	bls.n	f5ae <event_common_prepare+0x72>
		ticker_status =
    f564:	f241 7348 	movw	r3, #5960	; 0x1748
    f568:	9308      	str	r3, [sp, #32]
    f56a:	4b55      	ldr	r3, [pc, #340]	; (f6c0 <event_common_prepare+0x184>)
    f56c:	9305      	str	r3, [sp, #20]
    f56e:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    f570:	1b63      	subs	r3, r4, r5
		ticker_status =
    f572:	9300      	str	r3, [sp, #0]
    f574:	9707      	str	r7, [sp, #28]
    f576:	464b      	mov	r3, r9
    f578:	9106      	str	r1, [sp, #24]
    f57a:	9104      	str	r1, [sp, #16]
    f57c:	9103      	str	r1, [sp, #12]
    f57e:	9102      	str	r1, [sp, #8]
    f580:	9101      	str	r1, [sp, #4]
    f582:	2201      	movs	r2, #1
    f584:	4608      	mov	r0, r1
    f586:	f7fb fdb5 	bl	b0f4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f58a:	f030 0302 	bics.w	r3, r0, #2
    f58e:	d034      	beq.n	f5fa <event_common_prepare+0xbe>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f590:	4b4c      	ldr	r3, [pc, #304]	; (f6c4 <event_common_prepare+0x188>)
    f592:	9301      	str	r3, [sp, #4]
    f594:	9300      	str	r3, [sp, #0]
    f596:	4a4c      	ldr	r2, [pc, #304]	; (f6c8 <event_common_prepare+0x18c>)
    f598:	4b4c      	ldr	r3, [pc, #304]	; (f6cc <event_common_prepare+0x190>)
    f59a:	494d      	ldr	r1, [pc, #308]	; (f6d0 <event_common_prepare+0x194>)
    f59c:	484d      	ldr	r0, [pc, #308]	; (f6d4 <event_common_prepare+0x198>)
		LL_ASSERT(!retval);
    f59e:	f7f2 f89f 	bl	16e0 <printk>
    f5a2:	4040      	eors	r0, r0
    f5a4:	f380 8811 	msr	BASEPRI, r0
    f5a8:	f04f 0004 	mov.w	r0, #4
    f5ac:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    f5ae:	d21d      	bcs.n	f5ec <event_common_prepare+0xb0>
		event_active(0, 0, 0, NULL);
    f5b0:	2300      	movs	r3, #0
    f5b2:	461a      	mov	r2, r3
    f5b4:	4619      	mov	r1, r3
    f5b6:	4618      	mov	r0, r3
    f5b8:	f7ff f9b4 	bl	e924 <event_active>
		ticker_status =
    f5bc:	f241 735d 	movw	r3, #5981	; 0x175d
    f5c0:	2100      	movs	r1, #0
    f5c2:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    f5c4:	1b2c      	subs	r4, r5, r4
		ticker_status =
    f5c6:	4b44      	ldr	r3, [pc, #272]	; (f6d8 <event_common_prepare+0x19c>)
    f5c8:	9305      	str	r3, [sp, #20]
    f5ca:	9707      	str	r7, [sp, #28]
    f5cc:	464b      	mov	r3, r9
    f5ce:	9106      	str	r1, [sp, #24]
    f5d0:	9104      	str	r1, [sp, #16]
    f5d2:	9103      	str	r1, [sp, #12]
    f5d4:	9102      	str	r1, [sp, #8]
    f5d6:	9101      	str	r1, [sp, #4]
    f5d8:	9400      	str	r4, [sp, #0]
    f5da:	2201      	movs	r2, #1
    f5dc:	4608      	mov	r0, r1
    f5de:	f7fb fd89 	bl	b0f4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f5e2:	f030 0302 	bics.w	r3, r0, #2
    f5e6:	d1d3      	bne.n	f590 <event_common_prepare+0x54>
    f5e8:	462c      	mov	r4, r5
    f5ea:	e00b      	b.n	f604 <event_common_prepare+0xc8>
		event_active(0, 0, 0, NULL);
    f5ec:	2300      	movs	r3, #0
    f5ee:	461a      	mov	r2, r3
    f5f0:	4619      	mov	r1, r3
    f5f2:	4618      	mov	r0, r3
    f5f4:	f7ff f996 	bl	e924 <event_active>
		event_xtal(0, 0, 0, NULL);
    f5f8:	2300      	movs	r3, #0
    f5fa:	461a      	mov	r2, r3
    f5fc:	4619      	mov	r1, r3
    f5fe:	4618      	mov	r0, r3
    f600:	f7ff f9b6 	bl	e970 <event_xtal>
	_radio.remainder_anchor = remainder;
    f604:	4e35      	ldr	r6, [pc, #212]	; (f6dc <event_common_prepare+0x1a0>)
    f606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f608:	60f3      	str	r3, [r6, #12]
	ticker_status =
    f60a:	f241 7375 	movw	r3, #6005	; 0x1775
    f60e:	9308      	str	r3, [sp, #32]
    f610:	9b19      	ldr	r3, [sp, #100]	; 0x64
    f612:	9306      	str	r3, [sp, #24]
    f614:	2200      	movs	r2, #0
    f616:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f618:	9305      	str	r3, [sp, #20]
    f61a:	9707      	str	r7, [sp, #28]
    f61c:	464b      	mov	r3, r9
    f61e:	9204      	str	r2, [sp, #16]
    f620:	9203      	str	r2, [sp, #12]
    f622:	9202      	str	r2, [sp, #8]
    f624:	9201      	str	r2, [sp, #4]
    f626:	9400      	str	r4, [sp, #0]
    f628:	4611      	mov	r1, r2
    f62a:	4610      	mov	r0, r2
    f62c:	f7fb fd62 	bl	b0f4 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f630:	f030 0302 	bics.w	r3, r0, #2
    f634:	d1ac      	bne.n	f590 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    f636:	2005      	movs	r0, #5
    f638:	f7ff ff72 	bl	f520 <event_stop.constprop.33>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    f63c:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
    f640:	429d      	cmp	r5, r3
    f642:	d023      	beq.n	f68c <event_common_prepare+0x150>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    f644:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    f648:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    f64c:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    f64e:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    f650:	bfbc      	itt	lt
    f652:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    f656:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    f65a:	f8d6 2d6c 	ldr.w	r2, [r6, #3436]	; 0xd6c
    f65e:	f8d8 1000 	ldr.w	r1, [r8]
    f662:	428a      	cmp	r2, r1
    f664:	bf38      	it	cc
    f666:	460a      	movcc	r2, r1
		ticker_status =
    f668:	f241 71a5 	movw	r1, #6053	; 0x17a5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    f66c:	b2a3      	uxth	r3, r4
    f66e:	b292      	uxth	r2, r2
		ticker_status =
    f670:	9106      	str	r1, [sp, #24]
    f672:	2100      	movs	r1, #0
    f674:	9302      	str	r3, [sp, #8]
    f676:	9201      	str	r2, [sp, #4]
    f678:	9200      	str	r2, [sp, #0]
    f67a:	9104      	str	r1, [sp, #16]
    f67c:	9103      	str	r1, [sp, #12]
    f67e:	4652      	mov	r2, sl
    f680:	4608      	mov	r0, r1
    f682:	f7fb fd87 	bl	b194 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f686:	f030 0302 	bics.w	r3, r0, #2
    f68a:	d181      	bne.n	f590 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    f68c:	20ff      	movs	r0, #255	; 0xff
    f68e:	f7ff fa3b 	bl	eb08 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    f692:	4b13      	ldr	r3, [pc, #76]	; (f6e0 <event_common_prepare+0x1a4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f694:	2201      	movs	r2, #1
    f696:	4611      	mov	r1, r2
    f698:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    f69a:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f69e:	f7fa ff6b 	bl	a578 <mayfly_enqueue>
		LL_ASSERT(!retval);
    f6a2:	b138      	cbz	r0, f6b4 <event_common_prepare+0x178>
    f6a4:	4b07      	ldr	r3, [pc, #28]	; (f6c4 <event_common_prepare+0x188>)
    f6a6:	9301      	str	r3, [sp, #4]
    f6a8:	9300      	str	r3, [sp, #0]
    f6aa:	4a07      	ldr	r2, [pc, #28]	; (f6c8 <event_common_prepare+0x18c>)
    f6ac:	4b07      	ldr	r3, [pc, #28]	; (f6cc <event_common_prepare+0x190>)
    f6ae:	4908      	ldr	r1, [pc, #32]	; (f6d0 <event_common_prepare+0x194>)
    f6b0:	480c      	ldr	r0, [pc, #48]	; (f6e4 <event_common_prepare+0x1a8>)
    f6b2:	e774      	b.n	f59e <event_common_prepare+0x62>
}
    f6b4:	b00d      	add	sp, #52	; 0x34
    f6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f6ba:	bf00      	nop
    f6bc:	0000e695 	.word	0x0000e695
    f6c0:	0000e925 	.word	0x0000e925
    f6c4:	0001868d 	.word	0x0001868d
    f6c8:	00019a84 	.word	0x00019a84
    f6cc:	0001b238 	.word	0x0001b238
    f6d0:	00019a8b 	.word	0x00019a8b
    f6d4:	0001b473 	.word	0x0001b473
    f6d8:	0000e971 	.word	0x0000e971
    f6dc:	20000b98 	.word	0x20000b98
    f6e0:	200089d8 	.word	0x200089d8
    f6e4:	0001bbbe 	.word	0x0001bbbe

0000f6e8 <event_scan_prepare>:
{
    f6e8:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f6ea:	4c25      	ldr	r4, [pc, #148]	; (f780 <event_scan_prepare+0x98>)
    f6ec:	7c23      	ldrb	r3, [r4, #16]
{
    f6ee:	b085      	sub	sp, #20
    f6f0:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    f6f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    f6f6:	b173      	cbz	r3, f716 <event_scan_prepare+0x2e>
    f6f8:	4b22      	ldr	r3, [pc, #136]	; (f784 <event_scan_prepare+0x9c>)
    f6fa:	9301      	str	r3, [sp, #4]
    f6fc:	9300      	str	r3, [sp, #0]
    f6fe:	4a22      	ldr	r2, [pc, #136]	; (f788 <event_scan_prepare+0xa0>)
    f700:	4b22      	ldr	r3, [pc, #136]	; (f78c <event_scan_prepare+0xa4>)
    f702:	4923      	ldr	r1, [pc, #140]	; (f790 <event_scan_prepare+0xa8>)
    f704:	4823      	ldr	r0, [pc, #140]	; (f794 <event_scan_prepare+0xac>)
		LL_ASSERT(!retval);
    f706:	f7f1 ffeb 	bl	16e0 <printk>
    f70a:	4040      	eors	r0, r0
    f70c:	f380 8811 	msr	BASEPRI, r0
    f710:	f04f 0004 	mov.w	r0, #4
    f714:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    f716:	2306      	movs	r3, #6
    f718:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    f71a:	9203      	str	r2, [sp, #12]
    f71c:	9301      	str	r3, [sp, #4]
    f71e:	4a1e      	ldr	r2, [pc, #120]	; (f798 <event_scan_prepare+0xb0>)
    f720:	f8d4 3c24 	ldr.w	r3, [r4, #3108]	; 0xc24
    f724:	9202      	str	r2, [sp, #8]
    f726:	9300      	str	r3, [sp, #0]
    f728:	f604 421c 	addw	r2, r4, #3100	; 0xc1c
    f72c:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
    f730:	f7ff ff04 	bl	f53c <event_common_prepare>
	if (_radio.scanner.conn) {
    f734:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
    f738:	b303      	cbz	r3, f77c <event_scan_prepare+0x94>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    f73a:	f8d4 3c1c 	ldr.w	r3, [r4, #3100]	; 0xc1c
    f73e:	2b00      	cmp	r3, #0
    f740:	da0c      	bge.n	f75c <event_scan_prepare+0x74>
			u32_t ticks_prepare_to_start =
    f742:	f8d4 1c24 	ldr.w	r1, [r4, #3108]	; 0xc24
    f746:	f8d4 2c20 	ldr.w	r2, [r4, #3104]	; 0xc20
				(_radio.scanner.hdr.ticks_xtal_to_start &
    f74a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    f74e:	4291      	cmp	r1, r2
    f750:	bf2c      	ite	cs
    f752:	ebc3 0301 	rsbcs	r3, r3, r1
    f756:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    f75a:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    f75c:	4b0f      	ldr	r3, [pc, #60]	; (f79c <event_scan_prepare+0xb4>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f75e:	2201      	movs	r2, #1
    f760:	4611      	mov	r1, r2
    f762:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    f764:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    f766:	f7fa ff07 	bl	a578 <mayfly_enqueue>
		LL_ASSERT(!retval);
    f76a:	b138      	cbz	r0, f77c <event_scan_prepare+0x94>
    f76c:	4b05      	ldr	r3, [pc, #20]	; (f784 <event_scan_prepare+0x9c>)
    f76e:	9301      	str	r3, [sp, #4]
    f770:	9300      	str	r3, [sp, #0]
    f772:	4a05      	ldr	r2, [pc, #20]	; (f788 <event_scan_prepare+0xa0>)
    f774:	4b05      	ldr	r3, [pc, #20]	; (f78c <event_scan_prepare+0xa4>)
    f776:	4906      	ldr	r1, [pc, #24]	; (f790 <event_scan_prepare+0xa8>)
    f778:	4809      	ldr	r0, [pc, #36]	; (f7a0 <event_scan_prepare+0xb8>)
    f77a:	e7c4      	b.n	f706 <event_scan_prepare+0x1e>
}
    f77c:	b005      	add	sp, #20
    f77e:	bd30      	pop	{r4, r5, pc}
    f780:	20000b98 	.word	0x20000b98
    f784:	0001868d 	.word	0x0001868d
    f788:	00019a84 	.word	0x00019a84
    f78c:	0001b266 	.word	0x0001b266
    f790:	00019a8b 	.word	0x00019a8b
    f794:	0001bcfa 	.word	0x0001bcfa
    f798:	0000f29d 	.word	0x0000f29d
    f79c:	20008958 	.word	0x20008958
    f7a0:	0001bbbe 	.word	0x0001bbbe

0000f7a4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    f7a4:	4b02      	ldr	r3, [pc, #8]	; (f7b0 <mayfly_xtal_start+0xc>)
    f7a6:	6818      	ldr	r0, [r3, #0]
    f7a8:	6843      	ldr	r3, [r0, #4]
    f7aa:	2100      	movs	r1, #0
    f7ac:	681b      	ldr	r3, [r3, #0]
    f7ae:	4718      	bx	r3
    f7b0:	20000b98 	.word	0x20000b98

0000f7b4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    f7b4:	4b02      	ldr	r3, [pc, #8]	; (f7c0 <mayfly_xtal_stop+0xc>)
    f7b6:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    f7b8:	6843      	ldr	r3, [r0, #4]
    f7ba:	2100      	movs	r1, #0
    f7bc:	685b      	ldr	r3, [r3, #4]
    f7be:	4718      	bx	r3
    f7c0:	20000b98 	.word	0x20000b98

0000f7c4 <chan_sel_2>:
{
    f7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    f7c6:	4048      	eors	r0, r1
    f7c8:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f7ca:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    f7ce:	2608      	movs	r6, #8
	o = 0;
    f7d0:	2400      	movs	r4, #0
		o |= (i & 1);
    f7d2:	f00e 0501 	and.w	r5, lr, #1
    f7d6:	3e01      	subs	r6, #1
    f7d8:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    f7dc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    f7e0:	b2ec      	uxtb	r4, r5
		i >>= 1;
    f7e2:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    f7e6:	d1f4      	bne.n	f7d2 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f7e8:	0225      	lsls	r5, r4, #8
    f7ea:	b22d      	sxth	r5, r5
    f7ec:	b2c0      	uxtb	r0, r0
    f7ee:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    f7f2:	4634      	mov	r4, r6
		o |= (i & 1);
    f7f4:	f000 0601 	and.w	r6, r0, #1
    f7f8:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    f7fc:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    f800:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    f804:	b2e4      	uxtb	r4, r4
		i >>= 1;
    f806:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    f80a:	d1f3      	bne.n	f7f4 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    f80c:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    f80e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    f812:	3f01      	subs	r7, #1
    f814:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    f816:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    f81a:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    f81c:	d1d5      	bne.n	f7ca <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    f81e:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    f820:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    f822:	fbb1 f0f4 	udiv	r0, r1, r4
    f826:	fb04 1010 	mls	r0, r4, r0, r1
    f82a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    f82c:	08c4      	lsrs	r4, r0, #3
    f82e:	f000 0507 	and.w	r5, r0, #7
    f832:	5d14      	ldrb	r4, [r2, r4]
    f834:	412c      	asrs	r4, r5
    f836:	07e4      	lsls	r4, r4, #31
    f838:	d407      	bmi.n	f84a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    f83a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    f83c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    f840:	4610      	mov	r0, r2
}
    f842:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    f846:	f7fd bc47 	b.w	d0d8 <chan_sel_remap>
}
    f84a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f84c <ctrl_tx_enqueue>:
{
    f84c:	b510      	push	{r4, lr}
	    !conn->empty &&
    f84e:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    f852:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    f856:	f014 0f80 	tst.w	r4, #128	; 0x80
    f85a:	d118      	bne.n	f88e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    f85c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    f860:	b1ab      	cbz	r3, f88e <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    f862:	0724      	lsls	r4, r4, #28
    f864:	d413      	bmi.n	f88e <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    f866:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    f86a:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    f86c:	bf04      	itt	eq
    f86e:	681c      	ldreq	r4, [r3, #0]
    f870:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    f874:	b992      	cbnz	r2, f89c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    f876:	681a      	ldr	r2, [r3, #0]
    f878:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    f87a:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    f87c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    f880:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    f884:	680b      	ldr	r3, [r1, #0]
    f886:	b90b      	cbnz	r3, f88c <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    f888:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    f88c:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    f88e:	b92a      	cbnz	r2, f89c <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    f890:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    f894:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    f896:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    f89a:	e7ef      	b.n	f87c <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    f89c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    f8a0:	681a      	ldr	r2, [r3, #0]
    f8a2:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    f8a4:	6019      	str	r1, [r3, #0]
    f8a6:	e7eb      	b.n	f880 <ctrl_tx_enqueue+0x34>

0000f8a8 <ctrl_tx_sec_enqueue>:
{
    f8a8:	b410      	push	{r4}
	if (conn->pause_tx) {
    f8aa:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    f8ae:	0724      	lsls	r4, r4, #28
{
    f8b0:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    f8b2:	d50f      	bpl.n	f8d4 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    f8b4:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    f8b8:	b931      	cbnz	r1, f8c8 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    f8ba:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    f8be:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    f8c0:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    f8c4:	bc10      	pop	{r4}
    f8c6:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    f8c8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    f8cc:	6819      	ldr	r1, [r3, #0]
    f8ce:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    f8d0:	601a      	str	r2, [r3, #0]
    f8d2:	e7f7      	b.n	f8c4 <ctrl_tx_sec_enqueue+0x1c>
}
    f8d4:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    f8d6:	f7ff bfb9 	b.w	f84c <ctrl_tx_enqueue>
	...

0000f8dc <feature_rsp_send>:
{
    f8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f8de:	4f21      	ldr	r7, [pc, #132]	; (f964 <feature_rsp_send+0x88>)
{
    f8e0:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f8e2:	f607 5044 	addw	r0, r7, #3396	; 0xd44
{
    f8e6:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f8e8:	f7fa fd7b 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
    f8ec:	4604      	mov	r4, r0
    f8ee:	b3b0      	cbz	r0, f95e <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    f8f0:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    f8f2:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    f8f4:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    f8f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    f8fc:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    f900:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    f904:	f043 0310 	orr.w	r3, r3, #16
    f908:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    f90c:	79b1      	ldrb	r1, [r6, #6]
    f90e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    f912:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    f916:	f3c1 0110 	ubfx	r1, r1, #0, #17
    f91a:	400b      	ands	r3, r1
    f91c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    f920:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    f924:	f043 0320 	orr.w	r3, r3, #32
    f928:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f92c:	7903      	ldrb	r3, [r0, #4]
    f92e:	f043 0303 	orr.w	r3, r3, #3
    f932:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    f934:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    f936:	2309      	movs	r3, #9
    f938:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    f93a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    f93c:	2100      	movs	r1, #0
    f93e:	4410      	add	r0, r2
    f940:	f7f0 fe8e 	bl	660 <memset>
		conn->llcp_features & 0xFF;
    f944:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    f948:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    f94a:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    f94c:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    f94e:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    f950:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    f952:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    f954:	4621      	mov	r1, r4
    f956:	f7ff ffa7 	bl	f8a8 <ctrl_tx_sec_enqueue>
	return 0;
    f95a:	2000      	movs	r0, #0
    f95c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    f95e:	2001      	movs	r0, #1
}
    f960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f962:	bf00      	nop
    f964:	20000b98 	.word	0x20000b98

0000f968 <start_enc_rsp_send>:
{
    f968:	b510      	push	{r4, lr}
    f96a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    f96c:	b9c9      	cbnz	r1, f9a2 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f96e:	480f      	ldr	r0, [pc, #60]	; (f9ac <start_enc_rsp_send+0x44>)
    f970:	f7fa fd37 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
    f974:	b1b8      	cbz	r0, f9a6 <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    f976:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    f978:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    f97c:	f043 0320 	orr.w	r3, r3, #32
    f980:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f984:	780b      	ldrb	r3, [r1, #0]
    f986:	f043 0303 	orr.w	r3, r3, #3
    f98a:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    f98c:	2301      	movs	r3, #1
    f98e:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    f990:	2306      	movs	r3, #6
    f992:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    f994:	b140      	cbz	r0, f9a8 <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    f996:	4601      	mov	r1, r0
    f998:	4620      	mov	r0, r4
    f99a:	f7ff ff57 	bl	f84c <ctrl_tx_enqueue>
	return 0;
    f99e:	2000      	movs	r0, #0
    f9a0:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    f9a2:	2000      	movs	r0, #0
    f9a4:	e7e8      	b.n	f978 <start_enc_rsp_send+0x10>
			return 1;
    f9a6:	2001      	movs	r0, #1
}
    f9a8:	bd10      	pop	{r4, pc}
    f9aa:	bf00      	nop
    f9ac:	200018dc 	.word	0x200018dc

0000f9b0 <reject_ext_ind_send>:
{
    f9b0:	b570      	push	{r4, r5, r6, lr}
    f9b2:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f9b4:	480b      	ldr	r0, [pc, #44]	; (f9e4 <reject_ext_ind_send+0x34>)
{
    f9b6:	460e      	mov	r6, r1
    f9b8:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    f9ba:	f7fa fd12 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
    f9be:	b178      	cbz	r0, f9e0 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f9c0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    f9c2:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    f9c4:	f043 0303 	orr.w	r3, r3, #3
    f9c8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    f9ca:	2303      	movs	r3, #3
    f9cc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    f9ce:	2311      	movs	r3, #17
    f9d0:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    f9d2:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    f9d4:	4601      	mov	r1, r0
    f9d6:	4620      	mov	r0, r4
    f9d8:	f7ff ff38 	bl	f84c <ctrl_tx_enqueue>
	return 0;
    f9dc:	2000      	movs	r0, #0
    f9de:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    f9e0:	2001      	movs	r0, #1
}
    f9e2:	bd70      	pop	{r4, r5, r6, pc}
    f9e4:	200018dc 	.word	0x200018dc

0000f9e8 <event_connection_prepare>:
{
    f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    f9ec:	4db8      	ldr	r5, [pc, #736]	; (fcd0 <event_connection_prepare+0x2e8>)
{
    f9ee:	b08f      	sub	sp, #60	; 0x3c
    f9f0:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    f9f2:	7c2b      	ldrb	r3, [r5, #16]
{
    f9f4:	910c      	str	r1, [sp, #48]	; 0x30
    f9f6:	4680      	mov	r8, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    f9f8:	b173      	cbz	r3, fa18 <event_connection_prepare+0x30>
    f9fa:	4bb6      	ldr	r3, [pc, #728]	; (fcd4 <event_connection_prepare+0x2ec>)
    f9fc:	9301      	str	r3, [sp, #4]
    f9fe:	9300      	str	r3, [sp, #0]
    fa00:	4ab5      	ldr	r2, [pc, #724]	; (fcd8 <event_connection_prepare+0x2f0>)
    fa02:	4bb6      	ldr	r3, [pc, #728]	; (fcdc <event_connection_prepare+0x2f4>)
    fa04:	49b6      	ldr	r1, [pc, #728]	; (fce0 <event_connection_prepare+0x2f8>)
    fa06:	48b7      	ldr	r0, [pc, #732]	; (fce4 <event_connection_prepare+0x2fc>)
		LL_ASSERT(!retval);
    fa08:	f7f1 fe6a 	bl	16e0 <printk>
    fa0c:	4040      	eors	r0, r0
    fa0e:	f380 8811 	msr	BASEPRI, r0
    fa12:	f04f 0004 	mov.w	r0, #4
    fa16:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    fa18:	f894 3020 	ldrb.w	r3, [r4, #32]
    fa1c:	3307      	adds	r3, #7
    fa1e:	b2db      	uxtb	r3, r3
    fa20:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    fa22:	f994 301d 	ldrsb.w	r3, [r4, #29]
    fa26:	2b00      	cmp	r3, #0
    fa28:	da09      	bge.n	fa3e <event_connection_prepare+0x56>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    fa2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    fa2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    fa2e:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    fa32:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    fa34:	6da1      	ldr	r1, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    fa36:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    fa38:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    fa3a:	bf88      	it	hi
    fa3c:	65e1      	strhi	r1, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    fa3e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    fa40:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    fa44:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    fa46:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    fa48:	b292      	uxth	r2, r2
    fa4a:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    fa4c:	4432      	add	r2, r6
    fa4e:	b296      	uxth	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    fa50:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    fa54:	429a      	cmp	r2, r3
    fa56:	f040 81ba 	bne.w	fdce <event_connection_prepare+0x3e6>
    fa5a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    fa5e:	075f      	lsls	r7, r3, #29
    fa60:	f100 84ab 	bmi.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    fa64:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    fa68:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    fa6c:	429a      	cmp	r2, r3
    fa6e:	f000 8096 	beq.w	fb9e <event_connection_prepare+0x1b6>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    fa72:	2005      	movs	r0, #5
    fa74:	f7ff fd54 	bl	f520 <event_stop.constprop.33>
	conn_upd = _radio.conn_upd;
    fa78:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
	if (conn_upd && (conn_upd != conn)) {
    fa7c:	b113      	cbz	r3, fa84 <event_connection_prepare+0x9c>
    fa7e:	429c      	cmp	r4, r3
    fa80:	f040 808d 	bne.w	fb9e <event_connection_prepare+0x1b6>
	switch (conn->llcp_conn_param.state) {
    fa84:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    fa88:	f003 0307 	and.w	r3, r3, #7
    fa8c:	2b05      	cmp	r3, #5
    fa8e:	f200 815d 	bhi.w	fd4c <event_connection_prepare+0x364>
    fa92:	e8df f013 	tbh	[pc, r3, lsl #1]
    fa96:	0006      	.short	0x0006
    fa98:	01310065 	.word	0x01310065
    fa9c:	00840084 	.word	0x00840084
    faa0:	0084      	.short	0x0084
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    faa2:	4891      	ldr	r0, [pc, #580]	; (fce8 <event_connection_prepare+0x300>)
    faa4:	f7fa fc9d 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
    faa8:	4607      	mov	r7, r0
    faaa:	2800      	cmp	r0, #0
    faac:	d077      	beq.n	fb9e <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    faae:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    fab2:	2204      	movs	r2, #4
    fab4:	f362 0302 	bfi	r3, r2, #0, #3
    fab8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fabc:	7903      	ldrb	r3, [r0, #4]
    fabe:	f043 0303 	orr.w	r3, r3, #3
    fac2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    fac4:	2318      	movs	r3, #24
    fac6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    fac8:	230f      	movs	r3, #15
    faca:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    facc:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fad0:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    fad2:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    fad4:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fad8:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    fada:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fade:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    fae0:	2300      	movs	r3, #0
    fae2:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    fae4:	74c3      	strb	r3, [r0, #19]
    fae6:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    fae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    faec:	7543      	strb	r3, [r0, #21]
    faee:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    faf0:	75c3      	strb	r3, [r0, #23]
    faf2:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    faf4:	7643      	strb	r3, [r0, #25]
    faf6:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    faf8:	76c3      	strb	r3, [r0, #27]
    fafa:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    fafc:	7743      	strb	r3, [r0, #29]
    fafe:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    fb00:	f8a0 6011 	strh.w	r6, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    fb04:	4601      	mov	r1, r0
    fb06:	4620      	mov	r0, r4
    fb08:	f7ff fea0 	bl	f84c <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    fb0c:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    fb0e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    fb12:	f8c5 4d70 	str.w	r4, [r5, #3440]	; 0xd70
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    fb16:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    fb18:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    fb1c:	f8c4 80e0 	str.w	r8, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    fb20:	da0b      	bge.n	fb3a <event_connection_prepare+0x152>
			u32_t ticks_prepare_to_start =
    fb22:	68a3      	ldr	r3, [r4, #8]
    fb24:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    fb26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    fb2a:	428b      	cmp	r3, r1
    fb2c:	bf2c      	ite	cs
    fb2e:	4443      	addcs	r3, r8
    fb30:	eb08 0301 	addcc.w	r3, r8, r1
    fb34:	1a9b      	subs	r3, r3, r2
    fb36:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    fb3a:	3713      	adds	r7, #19
		s_mfy_sched_offset.param = (void *)conn;
    fb3c:	4b6b      	ldr	r3, [pc, #428]	; (fcec <event_connection_prepare+0x304>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    fb3e:	f8c4 70dc 	str.w	r7, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fb42:	2201      	movs	r2, #1
    fb44:	4611      	mov	r1, r2
    fb46:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    fb48:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    fb4a:	f7fa fd15 	bl	a578 <mayfly_enqueue>
		LL_ASSERT(!retval);
    fb4e:	b330      	cbz	r0, fb9e <event_connection_prepare+0x1b6>
    fb50:	4b60      	ldr	r3, [pc, #384]	; (fcd4 <event_connection_prepare+0x2ec>)
    fb52:	9301      	str	r3, [sp, #4]
    fb54:	9300      	str	r3, [sp, #0]
    fb56:	4b66      	ldr	r3, [pc, #408]	; (fcf0 <event_connection_prepare+0x308>)
    fb58:	4a5f      	ldr	r2, [pc, #380]	; (fcd8 <event_connection_prepare+0x2f0>)
    fb5a:	4961      	ldr	r1, [pc, #388]	; (fce0 <event_connection_prepare+0x2f8>)
    fb5c:	4865      	ldr	r0, [pc, #404]	; (fcf4 <event_connection_prepare+0x30c>)
    fb5e:	e753      	b.n	fa08 <event_connection_prepare+0x20>
	if (conn->llcp_conn_param.status) {
    fb60:	f894 70c3 	ldrb.w	r7, [r4, #195]	; 0xc3
    fb64:	b397      	cbz	r7, fbcc <event_connection_prepare+0x1e4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fb66:	4860      	ldr	r0, [pc, #384]	; (fce8 <event_connection_prepare+0x300>)
    fb68:	f7fa fc3b 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
    fb6c:	4601      	mov	r1, r0
    fb6e:	b1b0      	cbz	r0, fb9e <event_connection_prepare+0x1b6>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    fb70:	7903      	ldrb	r3, [r0, #4]
    fb72:	f043 0303 	orr.w	r3, r3, #3
    fb76:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    fb78:	2311      	movs	r3, #17
    fb7a:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    fb7c:	2303      	movs	r3, #3
    fb7e:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    fb80:	230f      	movs	r3, #15
    fb82:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    fb84:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    fb88:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    fb8a:	4620      	mov	r0, r4
    fb8c:	f7ff fe5e 	bl	f84c <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fb90:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    fb94:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    fb98:	2300      	movs	r3, #0
    fb9a:	f8c5 3d70 	str.w	r3, [r5, #3440]	; 0xd70
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    fb9e:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    fba2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    fba6:	429a      	cmp	r2, r3
    fba8:	f000 810a 	beq.w	fdc0 <event_connection_prepare+0x3d8>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    fbac:	2005      	movs	r0, #5
    fbae:	f7ff fcb7 	bl	f520 <event_stop.constprop.33>
	switch (conn->llcp_phy.state) {
    fbb2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    fbb6:	f003 0203 	and.w	r2, r3, #3
    fbba:	2a03      	cmp	r2, #3
    fbbc:	f200 8179 	bhi.w	feb2 <event_connection_prepare+0x4ca>
    fbc0:	e8df f012 	tbh	[pc, r2, lsl #1]
    fbc4:	00fe00cc 	.word	0x00fe00cc
    fbc8:	011800fe 	.word	0x011800fe
	if (!conn->role) {
    fbcc:	f994 301d 	ldrsb.w	r3, [r4, #29]
    fbd0:	2b00      	cmp	r3, #0
    fbd2:	db3b      	blt.n	fc4c <event_connection_prepare+0x264>
		if (conn->llcp_req != conn->llcp_ack) {
    fbd4:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    fbd8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    fbdc:	428b      	cmp	r3, r1
    fbde:	d1de      	bne.n	fb9e <event_connection_prepare+0x1b6>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fbe0:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    fbe4:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fbe8:	2205      	movs	r2, #5
    fbea:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    fbee:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    fbf2:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    fbf6:	2301      	movs	r3, #1
    fbf8:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    fbfc:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    fc00:	b122      	cbz	r2, fc0c <event_connection_prepare+0x224>
				((conn->llcp_conn_param.interval /
    fc02:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    fc06:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    fc08:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    fc0c:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    fc10:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fc14:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    fc18:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fc1c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    fc20:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    fc24:	2202      	movs	r2, #2
    fc26:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    fc2a:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    fc2e:	f082 0208 	eor.w	r2, r2, #8
    fc32:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fc36:	f362 0382 	bfi	r3, r2, #2, #1
    fc3a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    fc3e:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    fc40:	2301      	movs	r3, #1
    fc42:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    fc46:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    fc4a:	e7a8      	b.n	fb9e <event_connection_prepare+0x1b6>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fc4c:	4826      	ldr	r0, [pc, #152]	; (fce8 <event_connection_prepare+0x300>)
    fc4e:	f7fa fbc8 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
    fc52:	4601      	mov	r1, r0
    fc54:	2800      	cmp	r0, #0
    fc56:	d0a2      	beq.n	fb9e <event_connection_prepare+0x1b6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    fc58:	7903      	ldrb	r3, [r0, #4]
    fc5a:	f043 0303 	orr.w	r3, r3, #3
    fc5e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    fc60:	2318      	movs	r3, #24
    fc62:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    fc64:	2310      	movs	r3, #16
    fc66:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    fc68:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fc6c:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    fc6e:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    fc70:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fc74:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    fc76:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fc7a:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    fc7c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    fc80:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    fc82:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    fc86:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    fc8a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    fc8e:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    fc92:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    fc96:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    fc9a:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    fc9e:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    fca2:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    fca6:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    fcaa:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    fcae:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    fcb2:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    fcb6:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    fcba:	4620      	mov	r0, r4
    fcbc:	f7ff fdc6 	bl	f84c <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    fcc0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    fcc4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    fcc8:	f8c5 7d70 	str.w	r7, [r5, #3440]	; 0xd70
    fccc:	e767      	b.n	fb9e <event_connection_prepare+0x1b6>
    fcce:	bf00      	nop
    fcd0:	20000b98 	.word	0x20000b98
    fcd4:	0001868d 	.word	0x0001868d
    fcd8:	00019a84 	.word	0x00019a84
    fcdc:	0001b31f 	.word	0x0001b31f
    fce0:	00019a8b 	.word	0x00019a8b
    fce4:	0001bcfa 	.word	0x0001bcfa
    fce8:	200018dc 	.word	0x200018dc
    fcec:	20008978 	.word	0x20008978
    fcf0:	0001b2bb 	.word	0x0001b2bb
    fcf4:	0001bbbe 	.word	0x0001bbbe
	if (conn->pause_tx) {
    fcf8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    fcfc:	0718      	lsls	r0, r3, #28
    fcfe:	f53f af4e 	bmi.w	fb9e <event_connection_prepare+0x1b6>
	node_rx = packet_rx_reserve_get(2);
    fd02:	2002      	movs	r0, #2
    fd04:	f7fd fa1a 	bl	d13c <packet_rx_reserve_get>
	if (!node_rx) {
    fd08:	2800      	cmp	r0, #0
    fd0a:	f43f af48 	beq.w	fb9e <event_connection_prepare+0x1b6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    fd0e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    fd12:	2203      	movs	r2, #3
    fd14:	f362 0302 	bfi	r3, r2, #0, #3
    fd18:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    fd1c:	8c23      	ldrh	r3, [r4, #32]
    fd1e:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    fd20:	2301      	movs	r3, #1
    fd22:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    fd24:	7a03      	ldrb	r3, [r0, #8]
    fd26:	4313      	orrs	r3, r2
    fd28:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    fd2a:	2318      	movs	r3, #24
    fd2c:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    fd2e:	230f      	movs	r3, #15
    fd30:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    fd32:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    fd36:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    fd38:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    fd3a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    fd3e:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    fd40:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    fd44:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    fd46:	f7fe fb9b 	bl	e480 <packet_rx_enqueue>
    fd4a:	e728      	b.n	fb9e <event_connection_prepare+0x1b6>
		LL_ASSERT(0);
    fd4c:	4bb9      	ldr	r3, [pc, #740]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
    fd4e:	9301      	str	r3, [sp, #4]
    fd50:	9300      	str	r3, [sp, #0]
    fd52:	4bb9      	ldr	r3, [pc, #740]	; (10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>)
		LL_ASSERT(0);
    fd54:	4ab9      	ldr	r2, [pc, #740]	; (1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>)
    fd56:	49ba      	ldr	r1, [pc, #744]	; (10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>)
    fd58:	48ba      	ldr	r0, [pc, #744]	; (10044 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45>)
    fd5a:	e655      	b.n	fa08 <event_connection_prepare+0x20>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fd5c:	48ba      	ldr	r0, [pc, #744]	; (10048 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49>)
    fd5e:	f7fa fb40 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
    fd62:	4601      	mov	r1, r0
    fd64:	b360      	cbz	r0, fdc0 <event_connection_prepare+0x3d8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    fd66:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    fd6a:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    fd6e:	2201      	movs	r2, #1
    fd70:	f362 0301 	bfi	r3, r2, #0, #2
    fd74:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    fd78:	b2db      	uxtb	r3, r3
    fd7a:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    fd7e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    fd82:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    fd86:	f363 07c5 	bfi	r7, r3, #3, #3
    fd8a:	f884 7039 	strb.w	r7, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    fd8e:	f894 70f7 	ldrb.w	r7, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    fd92:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    fd96:	f367 1286 	bfi	r2, r7, #6, #1
    fd9a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fd9e:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    fda0:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fda2:	f042 0203 	orr.w	r2, r2, #3
    fda6:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    fda8:	2203      	movs	r2, #3
    fdaa:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    fdac:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    fdae:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    fdb0:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    fdb2:	4620      	mov	r0, r4
    fdb4:	f7ff fd4a 	bl	f84c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    fdb8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    fdbc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    fdc0:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    fdc4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    fdc8:	429a      	cmp	r2, r3
    fdca:	f000 82f6 	beq.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    fdce:	2005      	movs	r0, #5
    fdd0:	f7ff fba6 	bl	f520 <event_stop.constprop.33>
		switch (conn->llcp_type) {
    fdd4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    fdd8:	3b01      	subs	r3, #1
    fdda:	2b07      	cmp	r3, #7
    fddc:	f200 85a7 	bhi.w	1092e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x92f>
    fde0:	e8df f013 	tbh	[pc, r3, lsl #1]
    fde4:	02c4006c 	.word	0x02c4006c
    fde8:	045e0343 	.word	0x045e0343
    fdec:	05a5048e 	.word	0x05a5048e
    fdf0:	04fa04e6 	.word	0x04fa04e6
		conn->llcp_phy.ack = conn->llcp_phy.req;
    fdf4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    fdf8:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    fdfc:	f3c3 0282 	ubfx	r2, r3, #2, #3
    fe00:	0791      	lsls	r1, r2, #30
    fe02:	d544      	bpl.n	fe8e <event_connection_prepare+0x4a6>
			conn->llcp_phy.tx = BIT(1);
    fe04:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    fe06:	f362 0384 	bfi	r3, r2, #2, #3
    fe0a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    fe0e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    fe12:	095a      	lsrs	r2, r3, #5
    fe14:	0790      	lsls	r0, r2, #30
    fe16:	d543      	bpl.n	fea0 <event_connection_prepare+0x4b8>
			conn->llcp_phy.rx = BIT(1);
    fe18:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    fe1a:	f362 1347 	bfi	r3, r2, #5, #3
    fe1e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    fe22:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    fe26:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    fe2a:	f3c2 0182 	ubfx	r1, r2, #2, #3
    fe2e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    fe32:	428b      	cmp	r3, r1
    fe34:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    fe38:	bf14      	ite	ne
    fe3a:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    fe3e:	f36f 0384 	bfceq	r3, #2, #3
    fe42:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    fe46:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    fe4a:	0952      	lsrs	r2, r2, #5
    fe4c:	f003 0307 	and.w	r3, r3, #7
    fe50:	4293      	cmp	r3, r2
    fe52:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    fe56:	bf14      	ite	ne
    fe58:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    fe5c:	f36f 1347 	bfceq	r3, #5, #3
    fe60:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    fe64:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    fe68:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    fe6c:	f043 0301 	orr.w	r3, r3, #1
    fe70:	f3c2 0240 	ubfx	r2, r2, #1, #1
    fe74:	f362 0341 	bfi	r3, r2, #1, #1
    fe78:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    fe7c:	2308      	movs	r3, #8
    fe7e:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    fe82:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    fe86:	3b01      	subs	r3, #1
    fe88:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    fe8c:	e798      	b.n	fdc0 <event_connection_prepare+0x3d8>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    fe8e:	07d7      	lsls	r7, r2, #31
    fe90:	d501      	bpl.n	fe96 <event_connection_prepare+0x4ae>
			conn->llcp_phy.tx = BIT(0);
    fe92:	2201      	movs	r2, #1
    fe94:	e7b7      	b.n	fe06 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    fe96:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    fe9a:	bf18      	it	ne
    fe9c:	2204      	movne	r2, #4
    fe9e:	e7b2      	b.n	fe06 <event_connection_prepare+0x41e>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    fea0:	07d1      	lsls	r1, r2, #31
    fea2:	d501      	bpl.n	fea8 <event_connection_prepare+0x4c0>
			conn->llcp_phy.rx = BIT(0);
    fea4:	2201      	movs	r2, #1
    fea6:	e7b8      	b.n	fe1a <event_connection_prepare+0x432>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    fea8:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    feac:	bf18      	it	ne
    feae:	2204      	movne	r2, #4
    feb0:	e7b3      	b.n	fe1a <event_connection_prepare+0x432>
		LL_ASSERT(0);
    feb2:	4b60      	ldr	r3, [pc, #384]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
    feb4:	9301      	str	r3, [sp, #4]
    feb6:	9300      	str	r3, [sp, #0]
    feb8:	4b64      	ldr	r3, [pc, #400]	; (1004c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x4d>)
    feba:	e74b      	b.n	fd54 <event_connection_prepare+0x36c>
	if (!conn_upd) {
    febc:	f8d5 3d70 	ldr.w	r3, [r5, #3440]	; 0xd70
    fec0:	b90b      	cbnz	r3, fec6 <event_connection_prepare+0x4de>
		_radio.conn_upd = conn;
    fec2:	f8c5 4d70 	str.w	r4, [r5, #3440]	; 0xd70
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    fec6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    feca:	f013 0303 	ands.w	r3, r3, #3
    fece:	d068      	beq.n	ffa2 <event_connection_prepare+0x5ba>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    fed0:	485d      	ldr	r0, [pc, #372]	; (10048 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49>)
    fed2:	f7fa fa86 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
    fed6:	4607      	mov	r7, r0
    fed8:	2800      	cmp	r0, #0
    feda:	f000 826e 	beq.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		switch (conn->llcp.conn_upd.state) {
    fede:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    fee2:	f003 0303 	and.w	r3, r3, #3
    fee6:	2b01      	cmp	r3, #1
    fee8:	d059      	beq.n	ff9e <event_connection_prepare+0x5b6>
    feea:	2b02      	cmp	r3, #2
    feec:	d152      	bne.n	ff94 <event_connection_prepare+0x5ac>
			fp_mayfly_select_or_use =
    feee:	4a58      	ldr	r2, [pc, #352]	; (10050 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x51>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    fef0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    fef4:	f36f 0301 	bfc	r3, #0, #2
    fef8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    fefc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    fefe:	3306      	adds	r3, #6
    ff00:	4433      	add	r3, r6
    ff02:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    ff04:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    ff08:	7939      	ldrb	r1, [r7, #4]
    ff0a:	f041 0103 	orr.w	r1, r1, #3
    ff0e:	7139      	strb	r1, [r7, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    ff10:	210c      	movs	r1, #12
    ff12:	7179      	strb	r1, [r7, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    ff14:	2100      	movs	r1, #0
    ff16:	71f9      	strb	r1, [r7, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    ff18:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    ff1c:	7239      	strb	r1, [r7, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    ff1e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    ff22:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ff26:	fbb1 f1f0 	udiv	r1, r1, r0
    ff2a:	f8a7 1009 	strh.w	r1, [r7, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    ff2e:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    ff32:	f8a7 100b 	strh.w	r1, [r7, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    ff36:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    ff3a:	f8a7 100d 	strh.w	r1, [r7, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    ff3e:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    ff42:	f8a7 100f 	strh.w	r1, [r7, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    ff46:	f8a7 3011 	strh.w	r3, [r7, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    ff4a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    ff4c:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    ff50:	2900      	cmp	r1, #0
    ff52:	da0b      	bge.n	ff6c <event_connection_prepare+0x584>
			u32_t ticks_prepare_to_start =
    ff54:	68a3      	ldr	r3, [r4, #8]
    ff56:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    ff58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    ff5c:	4283      	cmp	r3, r0
    ff5e:	bf2c      	ite	cs
    ff60:	4443      	addcs	r3, r8
    ff62:	eb08 0300 	addcc.w	r3, r8, r0
    ff66:	1a5b      	subs	r3, r3, r1
    ff68:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    ff6c:	f107 0309 	add.w	r3, r7, #9
    ff70:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    ff74:	4b37      	ldr	r3, [pc, #220]	; (10054 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x55>)
    ff76:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ff78:	2201      	movs	r2, #1
    ff7a:	4611      	mov	r1, r2
    ff7c:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    ff7e:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    ff80:	f7fa fafa 	bl	a578 <mayfly_enqueue>
		LL_ASSERT(!retval);
    ff84:	2800      	cmp	r0, #0
    ff86:	f000 8214 	beq.w	103b2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3b3>
    ff8a:	4b2a      	ldr	r3, [pc, #168]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
    ff8c:	9301      	str	r3, [sp, #4]
    ff8e:	9300      	str	r3, [sp, #0]
    ff90:	4b31      	ldr	r3, [pc, #196]	; (10058 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x59>)
    ff92:	e5e1      	b.n	fb58 <event_connection_prepare+0x170>
			LL_ASSERT(0);
    ff94:	4b27      	ldr	r3, [pc, #156]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
    ff96:	9301      	str	r3, [sp, #4]
    ff98:	9300      	str	r3, [sp, #0]
    ff9a:	4b30      	ldr	r3, [pc, #192]	; (1005c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5d>)
    ff9c:	e6da      	b.n	fd54 <event_connection_prepare+0x36c>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    ff9e:	4a30      	ldr	r2, [pc, #192]	; (10060 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61>)
    ffa0:	e7a6      	b.n	fef0 <event_connection_prepare+0x508>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    ffa2:	f8b4 7080 	ldrh.w	r7, [r4, #128]	; 0x80
    ffa6:	1bf7      	subs	r7, r6, r7
    ffa8:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    ffaa:	043a      	lsls	r2, r7, #16
    ffac:	f100 8205 	bmi.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		conn->llcp_ack = conn->llcp_req;
    ffb0:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    ffb4:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    ffb8:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    ffbc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    ffc0:	428a      	cmp	r2, r1
    ffc2:	d009      	beq.n	ffd8 <event_connection_prepare+0x5f0>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    ffc4:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    ffc8:	f002 0207 	and.w	r2, r2, #7
    ffcc:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    ffce:	bf04      	itt	eq
    ffd0:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    ffd4:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    ffd8:	f8d5 2d70 	ldr.w	r2, [r5, #3440]	; 0xd70
		_radio.ticker_id_prepare = 0;
    ffdc:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    ffde:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    ffe0:	bf08      	it	eq
    ffe2:	f8c5 3d70 	streq.w	r3, [r5, #3440]	; 0xd70
		_radio.ticker_id_prepare = 0;
    ffe6:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    ffe8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    ffea:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    ffee:	429a      	cmp	r2, r3
    fff0:	d114      	bne.n	1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
		     conn->conn_interval) ||
    fff2:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    fff6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    fff8:	4299      	cmp	r1, r3
    fffa:	d10f      	bne.n	1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    fffc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10000:	435a      	muls	r2, r3
   10002:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   10006:	f242 7110 	movw	r1, #10000	; 0x2710
   1000a:	fb01 2303 	mla	r3, r1, r3, r2
   1000e:	3b01      	subs	r3, #1
   10010:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   10014:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
   10016:	b29b      	uxth	r3, r3
   10018:	429a      	cmp	r2, r3
   1001a:	d036      	beq.n	1008a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8b>
			node_rx = packet_rx_reserve_get(2);
   1001c:	2002      	movs	r0, #2
   1001e:	f7fd f88d 	bl	d13c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   10022:	bb08      	cbnz	r0, 10068 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x69>
   10024:	4b03      	ldr	r3, [pc, #12]	; (10034 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35>)
   10026:	9301      	str	r3, [sp, #4]
   10028:	9300      	str	r3, [sp, #0]
   1002a:	4b0c      	ldr	r3, [pc, #48]	; (1005c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5d>)
		LL_ASSERT(node_rx);
   1002c:	4a03      	ldr	r2, [pc, #12]	; (1003c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3d>)
   1002e:	4904      	ldr	r1, [pc, #16]	; (10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>)
   10030:	480c      	ldr	r0, [pc, #48]	; (10064 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x65>)
   10032:	e4e9      	b.n	fa08 <event_connection_prepare+0x20>
   10034:	0001868d 	.word	0x0001868d
   10038:	0001b2d0 	.word	0x0001b2d0
   1003c:	00019a84 	.word	0x00019a84
   10040:	00019a8b 	.word	0x00019a8b
   10044:	000197a5 	.word	0x000197a5
   10048:	200018dc 	.word	0x200018dc
   1004c:	0001b2f5 	.word	0x0001b2f5
   10050:	0000e1d1 	.word	0x0000e1d1
   10054:	20008968 	.word	0x20008968
   10058:	0001b284 	.word	0x0001b284
   1005c:	0001b298 	.word	0x0001b298
   10060:	0000ed81 	.word	0x0000ed81
   10064:	0001baea 	.word	0x0001baea
			node_rx->hdr.handle = conn->handle;
   10068:	8c23      	ldrh	r3, [r4, #32]
   1006a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1006c:	2308      	movs	r3, #8
   1006e:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
   10070:	2300      	movs	r3, #0
   10072:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
   10074:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   10078:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
   1007a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
   1007e:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
   10080:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   10084:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
   10086:	f7fe f9fb 	bl	e480 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
   1008a:	6823      	ldr	r3, [r4, #0]
   1008c:	6866      	ldr	r6, [r4, #4]
   1008e:	2b00      	cmp	r3, #0
   10090:	da09      	bge.n	100a6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa7>
			u32_t ticks_prepare_to_start =
   10092:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   10094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   10098:	42b0      	cmp	r0, r6
   1009a:	bf2c      	ite	cs
   1009c:	4480      	addcs	r8, r0
   1009e:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
   100a0:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   100a2:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
   100a6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
   100a8:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
   100ac:	49a0      	ldr	r1, [pc, #640]	; (10330 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x331>)
		conn_interval_old = instant_latency * conn->conn_interval;
   100ae:	fb13 f307 	smulbb	r3, r3, r7
   100b2:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
   100b4:	fbb3 f2fa 	udiv	r2, r3, sl
   100b8:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
   100bc:	fb1a f009 	smulbb	r0, sl, r9
   100c0:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   100c2:	4283      	cmp	r3, r0
   100c4:	f080 80bf 	bcs.w	10246 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x247>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   100c8:	1ac0      	subs	r0, r0, r3
   100ca:	f240 1223 	movw	r2, #291	; 0x123
   100ce:	4342      	muls	r2, r0
   100d0:	17c3      	asrs	r3, r0, #31
   100d2:	fb01 2303 	mla	r3, r1, r3, r2
   100d6:	fba0 0101 	umull	r0, r1, r0, r1
   100da:	4419      	add	r1, r3
   100dc:	a392      	add	r3, pc, #584	; (adr r3, 10328 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x329>)
   100de:	e9d3 2300 	ldrd	r2, r3, [r3]
   100e2:	f7f0 f8c1 	bl	268 <__aeabi_uldivmod>
   100e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   100ea:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   100ee:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   100f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   100f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 10368 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x369>
   100f6:	1bdb      	subs	r3, r3, r7
   100f8:	444b      	add	r3, r9
   100fa:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
   100fc:	6823      	ldr	r3, [r4, #0]
   100fe:	429e      	cmp	r6, r3
   10100:	bf38      	it	cc
   10102:	461e      	movcc	r6, r3
		if (conn->role) {
   10104:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
   10108:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   1010a:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
   1010e:	2b00      	cmp	r3, #0
   10110:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   10114:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   10116:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
   1011a:	f280 80a5 	bge.w	10268 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x269>
				conn->slave.window_widening_periodic_us *
   1011e:	6d63      	ldr	r3, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   10120:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   10122:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
   10126:	f895 3d08 	ldrb.w	r3, [r5, #3336]	; 0xd08
   1012a:	4a82      	ldr	r2, [pc, #520]	; (10334 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x335>)
   1012c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   10130:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   10134:	f3c3 0382 	ubfx	r3, r3, #2, #3
   10138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
   1013c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
   10140:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
   10142:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   10144:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   10148:	4b7b      	ldr	r3, [pc, #492]	; (10338 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x339>)
				conn->llcp.conn_upd.win_size * 1250;
   1014a:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   1014e:	f205 253f 	addw	r5, r5, #575	; 0x23f
   10152:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
   10156:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
   10158:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
   1015c:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
   1015e:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
   10160:	6662      	str	r2, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   10162:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
   10164:	429f      	cmp	r7, r3
   10166:	bf94      	ite	ls
   10168:	65e7      	strls	r7, [r4, #92]	; 0x5c
   1016a:	65e3      	strhi	r3, [r4, #92]	; 0x5c
			conn->slave.window_widening_periodic_us =
   1016c:	6565      	str	r5, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
   1016e:	65a3      	str	r3, [r4, #88]	; 0x58
			conn->slave.ticks_to_offset = 0;
   10170:	6722      	str	r2, [r4, #112]	; 0x70
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   10172:	fba0 010b 	umull	r0, r1, r0, fp
   10176:	a36c      	add	r3, pc, #432	; (adr r3, 10328 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x329>)
   10178:	e9d3 2300 	ldrd	r2, r3, [r3]
   1017c:	f7f0 f874 	bl	268 <__aeabi_uldivmod>
   10180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10182:	1a1b      	subs	r3, r3, r0
   10184:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   10186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10188:	fbb3 f0f8 	udiv	r0, r3, r8
   1018c:	fb08 f000 	mul.w	r0, r8, r0
   10190:	a365      	add	r3, pc, #404	; (adr r3, 10328 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x329>)
   10192:	e9d3 2300 	ldrd	r2, r3, [r3]
   10196:	fba0 010b 	umull	r0, r1, r0, fp
   1019a:	f7f0 f865 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
   1019e:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   101a0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   101a4:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
   101a8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   101ac:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   101ae:	f242 7110 	movw	r1, #10000	; 0x2710
   101b2:	fb01 6303 	mla	r3, r1, r3, r6
   101b6:	3b01      	subs	r3, #1
   101b8:	fbb3 f3f6 	udiv	r3, r3, r6
   101bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   101be:	4b5f      	ldr	r3, [pc, #380]	; (1033c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x33d>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
   101c0:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   101c4:	4433      	add	r3, r6
   101c6:	fbb3 f3f6 	udiv	r3, r3, r6
   101ca:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   101ce:	4b5c      	ldr	r3, [pc, #368]	; (10340 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x341>)
   101d0:	4433      	add	r3, r6
   101d2:	fbb3 f6f6 	udiv	r6, r3, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   101d6:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   101d8:	b2b1      	uxth	r1, r6
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   101da:	4299      	cmp	r1, r3
   101dc:	bfc4      	itt	gt
   101de:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
   101e2:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   101e4:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   101e8:	bfc8      	it	gt
   101ea:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
   101ec:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   101f0:	bfc8      	it	gt
   101f2:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
   101f4:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
   101f8:	bf08      	it	eq
   101fa:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   101fe:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
   10202:	2000      	movs	r0, #0
   10204:	2101      	movs	r1, #1
   10206:	f006 fbdd 	bl	169c4 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   1020a:	2200      	movs	r2, #0
   1020c:	2101      	movs	r1, #1
		mayfly_was_enabled =
   1020e:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   10210:	4610      	mov	r0, r2
   10212:	f7fa f989 	bl	a528 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10216:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
   1021a:	f641 737b 	movw	r3, #8059	; 0x1f7b
   1021e:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   10220:	3207      	adds	r2, #7
		ticker_status =
   10222:	9300      	str	r3, [sp, #0]
   10224:	b2d2      	uxtb	r2, r2
   10226:	4b47      	ldr	r3, [pc, #284]	; (10344 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x345>)
   10228:	4608      	mov	r0, r1
   1022a:	f7fb f801 	bl	b230 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1022e:	f030 0802 	bics.w	r8, r0, #2
   10232:	d026      	beq.n	10282 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x283>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10234:	4b44      	ldr	r3, [pc, #272]	; (10348 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x349>)
   10236:	9301      	str	r3, [sp, #4]
   10238:	9300      	str	r3, [sp, #0]
   1023a:	4a44      	ldr	r2, [pc, #272]	; (1034c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x34d>)
   1023c:	4b44      	ldr	r3, [pc, #272]	; (10350 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x351>)
   1023e:	4945      	ldr	r1, [pc, #276]	; (10354 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x355>)
   10240:	4845      	ldr	r0, [pc, #276]	; (10358 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x359>)
   10242:	f7ff bbe1 	b.w	fa08 <event_connection_prepare+0x20>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   10246:	fb0a 3212 	mls	r2, sl, r2, r3
   1024a:	b292      	uxth	r2, r2
   1024c:	fba2 0101 	umull	r0, r1, r2, r1
   10250:	f240 1323 	movw	r3, #291	; 0x123
   10254:	fb03 1102 	mla	r1, r3, r2, r1
   10258:	a333      	add	r3, pc, #204	; (adr r3, 10328 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x329>)
   1025a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1025e:	f7f0 f803 	bl	268 <__aeabi_uldivmod>
   10262:	eba8 0300 	sub.w	r3, r8, r0
   10266:	e742      	b.n	100ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xef>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   10268:	990c      	ldr	r1, [sp, #48]	; 0x30
   1026a:	a32f      	add	r3, pc, #188	; (adr r3, 10328 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x329>)
   1026c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10270:	fba1 010b 	umull	r0, r1, r1, fp
   10274:	f7ef fff8 	bl	268 <__aeabi_uldivmod>
   10278:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   1027c:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
   1027e:	4635      	mov	r5, r6
   10280:	e790      	b.n	101a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1a5>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   10282:	fba5 ab0b 	umull	sl, fp, r5, fp
   10286:	a328      	add	r3, pc, #160	; (adr r3, 10328 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x329>)
   10288:	e9d3 2300 	ldrd	r2, r3, [r3]
   1028c:	4650      	mov	r0, sl
   1028e:	4659      	mov	r1, fp
   10290:	f7ef ffea 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   10294:	4a31      	ldr	r2, [pc, #196]	; (1035c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x35d>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   10296:	f894 6020 	ldrb.w	r6, [r4, #32]
   1029a:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   1029e:	2307      	movs	r3, #7
   102a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   102a4:	2100      	movs	r1, #0
   102a6:	4343      	muls	r3, r0
   102a8:	fb02 3301 	mla	r3, r2, r1, r3
   102ac:	fba0 0102 	umull	r0, r1, r0, r2
   102b0:	ebba 0000 	subs.w	r0, sl, r0
   102b4:	4419      	add	r1, r3
   102b6:	eb6b 0101 	sbc.w	r1, fp, r1
   102ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   102be:	2300      	movs	r3, #0
   102c0:	f7ef ffd2 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   102c4:	68e3      	ldr	r3, [r4, #12]
   102c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   102c8:	f994 e01d 	ldrsb.w	lr, [r4, #29]
   102cc:	4924      	ldr	r1, [pc, #144]	; (10360 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x361>)
		ticker_status =
   102ce:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   102d0:	441a      	add	r2, r3
   102d2:	4613      	mov	r3, r2
   102d4:	4a23      	ldr	r2, [pc, #140]	; (10364 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x365>)
		ticker_status =
   102d6:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   102d8:	ea12 022e 	ands.w	r2, r2, lr, asr #32
   102dc:	bf38      	it	cc
   102de:	460a      	movcc	r2, r1
   102e0:	3607      	adds	r6, #7
		ticker_status =
   102e2:	f641 718b 	movw	r1, #8075	; 0x1f8b
   102e6:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   102e8:	b2f6      	uxtb	r6, r6
		ticker_status =
   102ea:	4916      	ldr	r1, [pc, #88]	; (10344 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x345>)
   102ec:	9107      	str	r1, [sp, #28]
   102ee:	9205      	str	r2, [sp, #20]
   102f0:	9406      	str	r4, [sp, #24]
   102f2:	f8cd 800c 	str.w	r8, [sp, #12]
   102f6:	9501      	str	r5, [sp, #4]
   102f8:	9700      	str	r7, [sp, #0]
   102fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102fc:	4632      	mov	r2, r6
   102fe:	4641      	mov	r1, r8
   10300:	4640      	mov	r0, r8
   10302:	f7fa fef7 	bl	b0f4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10306:	f030 0002 	bics.w	r0, r0, #2
   1030a:	d193      	bne.n	10234 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x235>
		if (mayfly_was_enabled) {
   1030c:	f1b9 0f00 	cmp.w	r9, #0
   10310:	f000 8386 	beq.w	10a20 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa21>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   10314:	2201      	movs	r2, #1
   10316:	4611      	mov	r1, r2
}
   10318:	b00f      	add	sp, #60	; 0x3c
   1031a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   1031e:	f7fa b903 	b.w	a528 <mayfly_enable>
   10322:	bf00      	nop
   10324:	f3af 8000 	nop.w
   10328:	1afd498d 	.word	0x1afd498d
   1032c:	00000007 	.word	0x00000007
   10330:	09ce5400 	.word	0x09ce5400
   10334:	0001b698 	.word	0x0001b698
   10338:	000f4240 	.word	0x000f4240
   1033c:	026259ff 	.word	0x026259ff
   10340:	01c9c37f 	.word	0x01c9c37f
   10344:	0000e695 	.word	0x0000e695
   10348:	0001868d 	.word	0x0001868d
   1034c:	00019a84 	.word	0x00019a84
   10350:	0001b298 	.word	0x0001b298
   10354:	00019a8b 	.word	0x00019a8b
   10358:	0001b473 	.word	0x0001b473
   1035c:	1afd498d 	.word	0x1afd498d
   10360:	00010bd1 	.word	0x00010bd1
   10364:	00010bd5 	.word	0x00010bd5
   10368:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp.chan_map.initiate) {
   1036c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   10370:	2b00      	cmp	r3, #0
   10372:	d05e      	beq.n	10432 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x433>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10374:	48c9      	ldr	r0, [pc, #804]	; (1069c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x69d>)
   10376:	f7fa f834 	bl	a3e2 <mem_acquire>
		if (node_tx) {
   1037a:	4607      	mov	r7, r0
   1037c:	b1e8      	cbz	r0, 103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
			conn->llcp.chan_map.initiate = 0;
   1037e:	2300      	movs	r3, #0
   10380:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   10384:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   10386:	3306      	adds	r3, #6
   10388:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
   1038a:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1038e:	7903      	ldrb	r3, [r0, #4]
   10390:	f043 0303 	orr.w	r3, r3, #3
   10394:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   10396:	2308      	movs	r3, #8
   10398:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1039a:	2301      	movs	r3, #1
   1039c:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   1039e:	2205      	movs	r2, #5
   103a0:	f104 0179 	add.w	r1, r4, #121	; 0x79
   103a4:	3008      	adds	r0, #8
   103a6:	f7f0 f92f 	bl	608 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   103aa:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   103ae:	f8a7 300d 	strh.w	r3, [r7, #13]
			ctrl_tx_enqueue(conn, node_tx);
   103b2:	4639      	mov	r1, r7
   103b4:	4620      	mov	r0, r4
   103b6:	f7ff fa49 	bl	f84c <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   103ba:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   103be:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   103c2:	429a      	cmp	r2, r3
   103c4:	d01e      	beq.n	10404 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x405>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   103c6:	2005      	movs	r0, #5
   103c8:	f7ff f8aa 	bl	f520 <event_stop.constprop.33>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   103cc:	48b3      	ldr	r0, [pc, #716]	; (1069c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x69d>)
   103ce:	f7fa f808 	bl	a3e2 <mem_acquire>
		if (node_tx) {
   103d2:	4601      	mov	r1, r0
   103d4:	b1b0      	cbz	r0, 10404 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x405>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   103d6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   103da:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   103de:	7903      	ldrb	r3, [r0, #4]
   103e0:	f043 0303 	orr.w	r3, r3, #3
   103e4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   103e6:	2302      	movs	r3, #2
   103e8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   103ea:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
   103ec:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   103f0:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   103f2:	4620      	mov	r0, r4
   103f4:	f7ff fa2a 	bl	f84c <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   103f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
   103fa:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
   103fc:	bf98      	it	ls
   103fe:	3301      	addls	r3, #1
   10400:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   10404:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   10408:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1040c:	429a      	cmp	r2, r3
   1040e:	f000 82ee 	beq.w	109ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9ef>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   10412:	2005      	movs	r0, #5
   10414:	f7ff f884 	bl	f520 <event_stop.constprop.33>
	switch (conn->llcp_length.state) {
   10418:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1041c:	f003 0303 	and.w	r3, r3, #3
   10420:	2b03      	cmp	r3, #3
   10422:	f200 830f 	bhi.w	10a44 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa45>
   10426:	e8df f013 	tbh	[pc, r3, lsl #1]
   1042a:	0288      	.short	0x0288
   1042c:	02e202e2 	.word	0x02e202e2
   10430:	02fe      	.short	0x02fe
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   10432:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   10436:	1af3      	subs	r3, r6, r3
   10438:	041f      	lsls	r7, r3, #16
   1043a:	d4be      	bmi.n	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		conn->llcp_ack = conn->llcp_req;
   1043c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   10440:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   10444:	f104 0717 	add.w	r7, r4, #23
   10448:	2205      	movs	r2, #5
   1044a:	f104 0179 	add.w	r1, r4, #121	; 0x79
   1044e:	4638      	mov	r0, r7
   10450:	f7f0 f8da 	bl	608 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   10454:	2105      	movs	r1, #5
   10456:	4638      	mov	r0, r7
   10458:	f7fa f96e 	bl	a738 <util_ones_count_get>
		conn->data_chan_count =
   1045c:	7f63      	ldrb	r3, [r4, #29]
   1045e:	f360 0305 	bfi	r3, r0, #0, #6
   10462:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   10464:	2301      	movs	r3, #1
   10466:	7723      	strb	r3, [r4, #28]
   10468:	e7a7      	b.n	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
	if (conn->llcp.encryption.initiate) {
   1046a:	f894 9078 	ldrb.w	r9, [r4, #120]	; 0x78
   1046e:	f1b9 0f00 	cmp.w	r9, #0
   10472:	d1a2      	bne.n	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10474:	4889      	ldr	r0, [pc, #548]	; (1069c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x69d>)
   10476:	f7f9 ffb4 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
   1047a:	4607      	mov	r7, r0
   1047c:	2800      	cmp	r0, #0
   1047e:	d09c      	beq.n	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
	if (!conn->role) {
   10480:	f994 301d 	ldrsb.w	r3, [r4, #29]
   10484:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
   10486:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
   1048a:	db4d      	blt.n	10528 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x529>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
   1048c:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
   10490:	465b      	mov	r3, fp
   10492:	464a      	mov	r2, r9
   10494:	f104 0194 	add.w	r1, r4, #148	; 0x94
   10498:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1049c:	f005 fd32 	bl	15f04 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   104a0:	2210      	movs	r2, #16
   104a2:	4659      	mov	r1, fp
   104a4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   104a8:	f7f0 f8ae 	bl	608 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   104ac:	f504 7189 	add.w	r1, r4, #274	; 0x112
   104b0:	2208      	movs	r2, #8
   104b2:	f204 1033 	addw	r0, r4, #307	; 0x133
   104b6:	f7f0 f8a7 	bl	608 <memcpy>
		conn->ccm_rx.direction = 0;
   104ba:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
   104be:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
   104c2:	f369 0300 	bfi	r3, r9, #0, #1
   104c6:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
   104ca:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
   104ce:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
   104d2:	f043 0301 	orr.w	r3, r3, #1
   104d6:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
   104da:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
   104de:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
   104e2:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
   104e6:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
   104ea:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   104ee:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   104f2:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   104f6:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
   104fa:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   104fe:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   10502:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   10506:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
		conn->enc_rx = 1;
   1050a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   1050e:	4651      	mov	r1, sl
   10510:	4620      	mov	r0, r4
   10512:	f7ff fa29 	bl	f968 <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
   10516:	4639      	mov	r1, r7
   10518:	4620      	mov	r0, r4
   1051a:	f7ff f997 	bl	f84c <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
   1051e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   10522:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   10526:	e748      	b.n	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
	else if (!conn->pause_tx || conn->refresh) {
   10528:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1052c:	f003 0348 	and.w	r3, r3, #72	; 0x48
   10530:	2b08      	cmp	r3, #8
   10532:	f000 80a2 	beq.w	1067a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x67b>
		if (conn->llcp.encryption.error_code) {
   10536:	f894 9079 	ldrb.w	r9, [r4, #121]	; 0x79
   1053a:	f1b9 0f00 	cmp.w	r9, #0
   1053e:	d020      	beq.n	10582 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x583>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10540:	7903      	ldrb	r3, [r0, #4]
   10542:	f043 0303 	orr.w	r3, r3, #3
   10546:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   10548:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1054c:	0698      	lsls	r0, r3, #26
   1054e:	d512      	bpl.n	10576 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x577>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   10550:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   10554:	0759      	lsls	r1, r3, #29
   10556:	d50e      	bpl.n	10576 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x577>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   10558:	2311      	movs	r3, #17
   1055a:	71fb      	strb	r3, [r7, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1055c:	2303      	movs	r3, #3
   1055e:	723b      	strb	r3, [r7, #8]
		p->error_code = conn->llcp.encryption.error_code;
   10560:	f887 9009 	strb.w	r9, [r7, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   10564:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   10566:	717b      	strb	r3, [r7, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   10568:	797b      	ldrb	r3, [r7, #5]
   1056a:	3301      	adds	r3, #1
   1056c:	717b      	strb	r3, [r7, #5]
	conn->llcp.encryption.error_code = 0;
   1056e:	2300      	movs	r3, #0
   10570:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
   10574:	e7cf      	b.n	10516 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x517>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   10576:	230d      	movs	r3, #13
   10578:	71fb      	strb	r3, [r7, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   1057a:	f887 9008 	strb.w	r9, [r7, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   1057e:	2301      	movs	r3, #1
   10580:	e7f1      	b.n	10566 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x567>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10582:	4846      	ldr	r0, [pc, #280]	; (1069c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x69d>)
   10584:	f7f9 ff2d 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
   10588:	4682      	mov	sl, r0
   1058a:	2800      	cmp	r0, #0
   1058c:	f000 8305 	beq.w	10b9a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9b>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10590:	7903      	ldrb	r3, [r0, #4]
   10592:	f043 0303 	orr.w	r3, r3, #3
   10596:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   10598:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1059c:	230d      	movs	r3, #13
   1059e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   105a0:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
   105a4:	f100 0308 	add.w	r3, r0, #8
   105a8:	4619      	mov	r1, r3
   105aa:	2208      	movs	r2, #8
   105ac:	6868      	ldr	r0, [r5, #4]
   105ae:	930d      	str	r3, [sp, #52]	; 0x34
   105b0:	f7f1 ffc4 	bl	253c <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
   105b4:	f10a 0310 	add.w	r3, sl, #16
   105b8:	4619      	mov	r1, r3
   105ba:	465a      	mov	r2, fp
   105bc:	6868      	ldr	r0, [r5, #4]
   105be:	930b      	str	r3, [sp, #44]	; 0x2c
   105c0:	f7f1 ffbc 	bl	253c <entropy_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
   105c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   105c6:	2208      	movs	r2, #8
   105c8:	4619      	mov	r1, r3
   105ca:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   105ce:	f7f0 f81b 	bl	608 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   105d2:	465a      	mov	r2, fp
   105d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   105d6:	f504 708b 	add.w	r0, r4, #278	; 0x116
   105da:	f7f0 f815 	bl	608 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   105de:	4651      	mov	r1, sl
   105e0:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   105e2:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
   105e6:	f7ff f931 	bl	f84c <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   105ea:	4653      	mov	r3, sl
   105ec:	464a      	mov	r2, r9
   105ee:	f104 0194 	add.w	r1, r4, #148	; 0x94
   105f2:	f104 0084 	add.w	r0, r4, #132	; 0x84
   105f6:	f005 fc85 	bl	15f04 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
   105fa:	2210      	movs	r2, #16
   105fc:	4651      	mov	r1, sl
   105fe:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   10602:	f7f0 f801 	bl	608 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   10606:	2208      	movs	r2, #8
   10608:	f504 7189 	add.w	r1, r4, #274	; 0x112
   1060c:	f204 1033 	addw	r0, r4, #307	; 0x133
   10610:	f7ef fffa 	bl	608 <memcpy>
			conn->ccm_rx.direction = 1;
   10614:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
   10618:	f884 9109 	strb.w	r9, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
   1061c:	f043 0301 	orr.w	r3, r3, #1
   10620:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
   10624:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
   10628:	f884 910a 	strb.w	r9, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
   1062c:	f369 0300 	bfi	r3, r9, #0, #1
   10630:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   10634:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
   10638:	f884 910b 	strb.w	r9, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
   1063c:	f043 0310 	orr.w	r3, r3, #16
   10640:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10644:	793b      	ldrb	r3, [r7, #4]
			conn->ccm_rx.counter = 0;
   10646:	f884 910c 	strb.w	r9, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1064a:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
   1064e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
   10652:	f884 910e 	strb.w	r9, [r4, #270]	; 0x10e
   10656:	f884 910f 	strb.w	r9, [r4, #271]	; 0x10f
   1065a:	f884 9110 	strb.w	r9, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   1065e:	f8a4 912a 	strh.w	r9, [r4, #298]	; 0x12a
   10662:	f8a4 912c 	strh.w	r9, [r4, #300]	; 0x12c
   10666:	f8a4 912e 	strh.w	r9, [r4, #302]	; 0x12e
   1066a:	f8a4 9130 	strh.w	r9, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1066e:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   10670:	2301      	movs	r3, #1
   10672:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10674:	2305      	movs	r3, #5
   10676:	71fb      	strb	r3, [r7, #7]
   10678:	e74d      	b.n	10516 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x517>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
   1067a:	4651      	mov	r1, sl
   1067c:	f8d5 0cfc 	ldr.w	r0, [r5, #3324]	; 0xcfc
   10680:	f7ff f972 	bl	f968 <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
   10684:	f8d5 2cfc 	ldr.w	r2, [r5, #3324]	; 0xcfc
   10688:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1068c:	f369 0382 	bfi	r3, r9, #2, #1
		_radio.conn_curr->pause_tx = 0;
   10690:	f369 03c3 	bfi	r3, r9, #3, #1
   10694:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   10698:	e73d      	b.n	10516 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x517>
   1069a:	bf00      	nop
   1069c:	200018dc 	.word	0x200018dc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   106a0:	48b0      	ldr	r0, [pc, #704]	; (10964 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x965>)
   106a2:	f7f9 fe9e 	bl	a3e2 <mem_acquire>
	if (node_tx) {
   106a6:	4607      	mov	r7, r0
   106a8:	2800      	cmp	r0, #0
   106aa:	f43f ae86 	beq.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		conn->llcp_ack = conn->llcp_req;
   106ae:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   106b2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   106b6:	4bac      	ldr	r3, [pc, #688]	; (10968 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x969>)
   106b8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   106bc:	7903      	ldrb	r3, [r0, #4]
   106be:	f043 0303 	orr.w	r3, r3, #3
   106c2:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   106c4:	2309      	movs	r3, #9
   106c6:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
   106c8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   106cc:	2b00      	cmp	r3, #0
   106ce:	bfac      	ite	ge
   106d0:	2308      	movge	r3, #8
   106d2:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   106d4:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
   106d6:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
   106d8:	2100      	movs	r1, #0
   106da:	4410      	add	r0, r2
   106dc:	f7ef ffc0 	bl	660 <memset>
			conn->llcp_features & 0xFF;
   106e0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
   106e4:	723b      	strb	r3, [r7, #8]
			(conn->llcp_features >> 8) & 0xFF;
   106e6:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
   106e8:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
   106ea:	727a      	strb	r2, [r7, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
   106ec:	72bb      	strb	r3, [r7, #10]
		ctrl_tx_enqueue(conn, node_tx);
   106ee:	4639      	mov	r1, r7
		ctrl_tx_enqueue(conn, node_tx);
   106f0:	4620      	mov	r0, r4
   106f2:	f7ff f8ab 	bl	f84c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   106f6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   106fa:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   106fe:	e65c      	b.n	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
	if (conn->llcp_version.tx == 0) {
   10700:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   10704:	07da      	lsls	r2, r3, #31
   10706:	d424      	bmi.n	10752 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x753>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10708:	4896      	ldr	r0, [pc, #600]	; (10964 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x965>)
   1070a:	f7f9 fe6a 	bl	a3e2 <mem_acquire>
		if (node_tx) {
   1070e:	4601      	mov	r1, r0
   10710:	2800      	cmp	r0, #0
   10712:	f43f ae52 	beq.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
			conn->llcp_ack = conn->llcp_req;
   10716:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1071a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   1071e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   10722:	f043 0301 	orr.w	r3, r3, #1
   10726:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1072a:	7903      	ldrb	r3, [r0, #4]
   1072c:	f043 0303 	orr.w	r3, r3, #3
   10730:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   10732:	2306      	movs	r3, #6
   10734:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10736:	230c      	movs	r3, #12
   10738:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
   1073a:	2309      	movs	r3, #9
   1073c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
   1073e:	f06f 030e 	mvn.w	r3, #14
   10742:	7243      	strb	r3, [r0, #9]
   10744:	2305      	movs	r3, #5
   10746:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
   10748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1074c:	72c3      	strb	r3, [r0, #11]
   1074e:	7303      	strb	r3, [r0, #12]
   10750:	e7ce      	b.n	106f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6f1>
	} else if (conn->llcp_version.rx != 0) {
   10752:	079b      	lsls	r3, r3, #30
   10754:	d526      	bpl.n	107a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7a5>
		conn->llcp_ack = conn->llcp_req;
   10756:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1075a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
   1075e:	2002      	movs	r0, #2
   10760:	f7fc fcec 	bl	d13c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   10764:	b920      	cbnz	r0, 10770 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x771>
   10766:	4b81      	ldr	r3, [pc, #516]	; (1096c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x96d>)
   10768:	9301      	str	r3, [sp, #4]
   1076a:	9300      	str	r3, [sp, #0]
   1076c:	4b80      	ldr	r3, [pc, #512]	; (10970 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x971>)
   1076e:	e45d      	b.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
		node_rx->hdr.handle = conn->handle;
   10770:	8c23      	ldrh	r3, [r4, #32]
   10772:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10774:	2301      	movs	r3, #1
   10776:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10778:	7a03      	ldrb	r3, [r0, #8]
   1077a:	f043 0303 	orr.w	r3, r3, #3
   1077e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   10780:	2306      	movs	r3, #6
   10782:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
   10784:	230c      	movs	r3, #12
   10786:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
   10788:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   1078c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
   1078e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   10792:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
   10796:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
   1079a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
   1079e:	f7fd fe6f 	bl	e480 <packet_rx_enqueue>
   107a2:	e60a      	b.n	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		LL_ASSERT(0);
   107a4:	4b71      	ldr	r3, [pc, #452]	; (1096c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x96d>)
   107a6:	9301      	str	r3, [sp, #4]
   107a8:	9300      	str	r3, [sp, #0]
   107aa:	4b71      	ldr	r3, [pc, #452]	; (10970 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x971>)
   107ac:	f7ff bad2 	b.w	fd54 <event_connection_prepare+0x36c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   107b0:	486c      	ldr	r0, [pc, #432]	; (10964 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x965>)
   107b2:	f7f9 fe16 	bl	a3e2 <mem_acquire>
	if (node_tx) {
   107b6:	4601      	mov	r1, r0
   107b8:	2800      	cmp	r0, #0
   107ba:	f43f adfe 	beq.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		conn->llcp_ack = conn->llcp_req;
   107be:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   107c2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107c6:	7903      	ldrb	r3, [r0, #4]
   107c8:	f043 0303 	orr.w	r3, r3, #3
   107cc:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   107ce:	2301      	movs	r3, #1
   107d0:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   107d2:	2312      	movs	r3, #18
   107d4:	71c3      	strb	r3, [r0, #7]
   107d6:	e78b      	b.n	106f0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6f1>
	if (conn->llcp.phy_upd_ind.initiate) {
   107d8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   107dc:	07d7      	lsls	r7, r2, #31
   107de:	d551      	bpl.n	10884 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x885>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   107e0:	4860      	ldr	r0, [pc, #384]	; (10964 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x965>)
   107e2:	f7f9 fdfe 	bl	a3e2 <mem_acquire>
		if (node_tx) {
   107e6:	4607      	mov	r7, r0
   107e8:	2800      	cmp	r0, #0
   107ea:	f43f ade6 	beq.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
			conn->llcp.phy_upd_ind.initiate = 0;
   107ee:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   107f2:	f36f 0300 	bfc	r3, #0, #1
   107f6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   107fa:	b2db      	uxtb	r3, r3
   107fc:	f3c3 0982 	ubfx	r9, r3, #2, #3
   10800:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
   10804:	d138      	bne.n	10878 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x879>
				conn->llcp_ack = conn->llcp_req;
   10806:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1080a:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
   1080e:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
   10810:	f8a4 907a 	strh.w	r9, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   10814:	d51a      	bpl.n	1084c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x84d>
					node_rx = packet_rx_reserve_get(2);
   10816:	2002      	movs	r0, #2
   10818:	f7fc fc90 	bl	d13c <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
   1081c:	b920      	cbnz	r0, 10828 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x829>
		LL_ASSERT(node_rx);
   1081e:	4b53      	ldr	r3, [pc, #332]	; (1096c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x96d>)
   10820:	9301      	str	r3, [sp, #4]
   10822:	9300      	str	r3, [sp, #0]
   10824:	4b53      	ldr	r3, [pc, #332]	; (10974 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x975>)
   10826:	e401      	b.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
					node_rx->hdr.handle = conn->handle;
   10828:	8c23      	ldrh	r3, [r4, #32]
   1082a:	80c3      	strh	r3, [r0, #6]
					upd->status = 0;
   1082c:	f880 900b 	strb.w	r9, [r0, #11]
					node_rx->hdr.type =
   10830:	230c      	movs	r3, #12
   10832:	7103      	strb	r3, [r0, #4]
					upd->tx = conn->phy_tx;
   10834:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   10838:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1083c:	7303      	strb	r3, [r0, #12]
					upd->rx = conn->phy_rx;
   1083e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   10842:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10846:	7343      	strb	r3, [r0, #13]
					packet_rx_enqueue();
   10848:	f7fd fe1a 	bl	e480 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1084c:	793b      	ldrb	r3, [r7, #4]
   1084e:	f043 0303 	orr.w	r3, r3, #3
   10852:	713b      	strb	r3, [r7, #4]
			pdu_ctrl_tx->len =
   10854:	2305      	movs	r3, #5
   10856:	717b      	strb	r3, [r7, #5]
			pdu_ctrl_tx->llctrl.opcode =
   10858:	2318      	movs	r3, #24
   1085a:	71fb      	strb	r3, [r7, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1085c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   10860:	f3c3 0382 	ubfx	r3, r3, #2, #3
   10864:	723b      	strb	r3, [r7, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   10866:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1086a:	f3c3 1342 	ubfx	r3, r3, #5, #3
   1086e:	727b      	strb	r3, [r7, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
   10870:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   10874:	817b      	strh	r3, [r7, #10]
   10876:	e59c      	b.n	103b2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3b3>
								 conn->latency +
   10878:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1087a:	3306      	adds	r3, #6
   1087c:	4433      	add	r3, r6
				conn->llcp.phy_upd_ind.instant = event_counter +
   1087e:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
   10882:	e7e3      	b.n	1084c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x84d>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   10884:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   10888:	1af3      	subs	r3, r6, r3
   1088a:	0419      	lsls	r1, r3, #16
   1088c:	f53f ad95 	bmi.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		conn->llcp_ack = conn->llcp_req;
   10890:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   10894:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
   10898:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
   1089c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
   108a0:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   108a4:	bf18      	it	ne
   108a6:	f3c2 0782 	ubfxne	r7, r2, #2, #3
		old_tx = conn->phy_tx;
   108aa:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   108ae:	bf1c      	itt	ne
   108b0:	f367 03c5 	bfine	r3, r7, #3, #3
   108b4:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   108b8:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
   108bc:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
   108c0:	d008      	beq.n	108d4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8d5>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   108c2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   108c6:	f894 703a 	ldrb.w	r7, [r4, #58]	; 0x3a
   108ca:	095b      	lsrs	r3, r3, #5
   108cc:	f363 0702 	bfi	r7, r3, #0, #3
   108d0:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   108d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   108d8:	461f      	mov	r7, r3
   108da:	f3c3 1380 	ubfx	r3, r3, #6, #1
   108de:	f363 17c7 	bfi	r7, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   108e2:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
   108e4:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   108e8:	d40b      	bmi.n	10902 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x903>
   108ea:	b2fb      	uxtb	r3, r7
   108ec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   108f0:	4283      	cmp	r3, r0
   108f2:	d106      	bne.n	10902 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x903>
		    (conn->phy_rx == old_rx)) {
   108f4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   108f8:	f003 0307 	and.w	r3, r3, #7
   108fc:	428b      	cmp	r3, r1
   108fe:	f43f ad5c 	beq.w	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
		node_rx = packet_rx_reserve_get(2);
   10902:	2002      	movs	r0, #2
   10904:	f7fc fc1a 	bl	d13c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   10908:	2800      	cmp	r0, #0
   1090a:	d088      	beq.n	1081e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x81f>
		node_rx->hdr.handle = conn->handle;
   1090c:	8c23      	ldrh	r3, [r4, #32]
   1090e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10910:	230c      	movs	r3, #12
   10912:	7103      	strb	r3, [r0, #4]
		upd->status = 0;
   10914:	2300      	movs	r3, #0
   10916:	72c3      	strb	r3, [r0, #11]
		upd->tx = conn->phy_tx;
   10918:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1091c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   10920:	7303      	strb	r3, [r0, #12]
		upd->rx = conn->phy_rx;
   10922:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   10926:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1092a:	7343      	strb	r3, [r0, #13]
   1092c:	e737      	b.n	1079e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x79f>
			LL_ASSERT(0);
   1092e:	4b0f      	ldr	r3, [pc, #60]	; (1096c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x96d>)
   10930:	9301      	str	r3, [sp, #4]
   10932:	9300      	str	r3, [sp, #0]
   10934:	4b10      	ldr	r3, [pc, #64]	; (10978 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x979>)
   10936:	f7ff ba0d 	b.w	fd54 <event_connection_prepare+0x36c>
		free_count_rx = packet_rx_acquired_count_get() +
   1093a:	f7fc fbe9 	bl	d110 <packet_rx_acquired_count_get>
   1093e:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   10940:	f8d5 0d18 	ldr.w	r0, [r5, #3352]	; 0xd18
   10944:	f7f9 fd7c 	bl	a440 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   10948:	4438      	add	r0, r7
   1094a:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   1094c:	28ff      	cmp	r0, #255	; 0xff
   1094e:	d91d      	bls.n	1098c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x98d>
		LL_ASSERT(free_count_rx <= 0xFF);
   10950:	4b06      	ldr	r3, [pc, #24]	; (1096c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x96d>)
   10952:	9301      	str	r3, [sp, #4]
   10954:	9300      	str	r3, [sp, #0]
   10956:	4a09      	ldr	r2, [pc, #36]	; (1097c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97d>)
   10958:	4b09      	ldr	r3, [pc, #36]	; (10980 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x981>)
   1095a:	490a      	ldr	r1, [pc, #40]	; (10984 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x985>)
   1095c:	480a      	ldr	r0, [pc, #40]	; (10988 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x989>)
   1095e:	f7ff b853 	b.w	fa08 <event_connection_prepare+0x20>
   10962:	bf00      	nop
   10964:	200018dc 	.word	0x200018dc
   10968:	000149ff 	.word	0x000149ff
   1096c:	0001868d 	.word	0x0001868d
   10970:	0001b2ac 	.word	0x0001b2ac
   10974:	0001b308 	.word	0x0001b308
   10978:	0001b31f 	.word	0x0001b31f
   1097c:	00019a84 	.word	0x00019a84
   10980:	0001b2e6 	.word	0x0001b2e6
   10984:	00019a8b 	.word	0x00019a8b
   10988:	0001b4c1 	.word	0x0001b4c1
		if (_radio.packet_rx_data_count != free_count_rx) {
   1098c:	f895 3d22 	ldrb.w	r3, [r5, #3362]	; 0xd22
   10990:	4283      	cmp	r3, r0
   10992:	d12c      	bne.n	109ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9ef>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10994:	4883      	ldr	r0, [pc, #524]	; (10ba4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xba5>)
   10996:	f7f9 fd24 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
   1099a:	4601      	mov	r1, r0
   1099c:	b338      	cbz	r0, 109ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9ef>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   1099e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_time = conn->llcp_length.tx_time;
   109a2:	f8b4 00f2 	ldrh.w	r0, [r4, #242]	; 0xf2
   109a6:	8660      	strh	r0, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   109a8:	2201      	movs	r2, #1
   109aa:	f362 0301 	bfi	r3, r2, #0, #2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   109ae:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   109b2:	85a2      	strh	r2, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   109b4:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   109b8:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_time = conn->default_tx_time;
   109ba:	81c8      	strh	r0, [r1, #14]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   109bc:	f043 0303 	orr.w	r3, r3, #3
   109c0:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   109c2:	2309      	movs	r3, #9
   109c4:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   109c6:	2314      	movs	r3, #20
   109c8:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   109ca:	f06f 0304 	mvn.w	r3, #4
   109ce:	720b      	strb	r3, [r1, #8]
   109d0:	2300      	movs	r3, #0
   109d2:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   109d4:	f06f 036f 	mvn.w	r3, #111	; 0x6f
   109d8:	728b      	strb	r3, [r1, #10]
   109da:	2342      	movs	r3, #66	; 0x42
   109dc:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_octets = conn->default_tx_octets;
   109de:	818a      	strh	r2, [r1, #12]
		ctrl_tx_enqueue(conn, node_tx);
   109e0:	4620      	mov	r0, r4
   109e2:	f7fe ff33 	bl	f84c <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   109e6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   109ea:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
   109ee:	f894 3020 	ldrb.w	r3, [r4, #32]
   109f2:	f994 501d 	ldrsb.w	r5, [r4, #29]
   109f6:	486c      	ldr	r0, [pc, #432]	; (10ba8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xba9>)
   109f8:	496c      	ldr	r1, [pc, #432]	; (10bac <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbad>)
   109fa:	68a2      	ldr	r2, [r4, #8]
   109fc:	9403      	str	r4, [sp, #12]
   109fe:	3307      	adds	r3, #7
   10a00:	ea11 0125 	ands.w	r1, r1, r5, asr #32
   10a04:	bf38      	it	cc
   10a06:	4601      	movcc	r1, r0
   10a08:	b2db      	uxtb	r3, r3
   10a0a:	e88d 000c 	stmia.w	sp, {r2, r3}
   10a0e:	9102      	str	r1, [sp, #8]
   10a10:	1d23      	adds	r3, r4, #4
   10a12:	4622      	mov	r2, r4
   10a14:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a16:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
   10a18:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
   10a1a:	f7fe fd8f 	bl	f53c <event_common_prepare>
	conn->event_counter = event_counter + 1;
   10a1e:	8466      	strh	r6, [r4, #34]	; 0x22
}
   10a20:	b00f      	add	sp, #60	; 0x3c
   10a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
   10a26:	f7fc fb73 	bl	d110 <packet_rx_acquired_count_get>
   10a2a:	4607      	mov	r7, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
   10a2c:	f8d5 0d18 	ldr.w	r0, [r5, #3352]	; 0xd18
   10a30:	f7f9 fd06 	bl	a440 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   10a34:	4438      	add	r0, r7
   10a36:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   10a38:	28ff      	cmp	r0, #255	; 0xff
   10a3a:	d889      	bhi.n	10950 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x951>
		if (_radio.packet_rx_data_count != free_count_rx) {
   10a3c:	f895 3d22 	ldrb.w	r3, [r5, #3362]	; 0xd22
   10a40:	4283      	cmp	r3, r0
   10a42:	d005      	beq.n	10a50 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa51>
		LL_ASSERT(0);
   10a44:	4b5a      	ldr	r3, [pc, #360]	; (10bb0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb1>)
   10a46:	9301      	str	r3, [sp, #4]
   10a48:	9300      	str	r3, [sp, #0]
   10a4a:	4b5a      	ldr	r3, [pc, #360]	; (10bb4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb5>)
   10a4c:	f7ff b982 	b.w	fd54 <event_connection_prepare+0x36c>
		conn->llcp_length.ack = conn->llcp_length.req;
   10a50:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10a54:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
   10a58:	f8d5 3cfc 	ldr.w	r3, [r5, #3324]	; 0xcfc
		conn->procedure_expire = 0;
   10a5c:	2100      	movs	r1, #0
   10a5e:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   10a62:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   10a66:	f361 02c3 	bfi	r2, r1, #3, #1
   10a6a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   10a6e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   10a72:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   10a74:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   10a78:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   10a7a:	f8d5 0cf4 	ldr.w	r0, [r5, #3316]	; 0xcf4
   10a7e:	f7f9 fcdf 	bl	a440 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   10a82:	f8d5 3c18 	ldr.w	r3, [r5, #3096]	; 0xc18
   10a86:	b10b      	cbz	r3, 10a8c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa8d>
			free_count_conn++;
   10a88:	3001      	adds	r0, #1
   10a8a:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   10a8c:	f8d5 3c54 	ldr.w	r3, [r5, #3156]	; 0xc54
   10a90:	b10b      	cbz	r3, 10a96 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa97>
			free_count_conn++;
   10a92:	3001      	adds	r0, #1
   10a94:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10a96:	8e27      	ldrh	r7, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10a98:	f895 3cf8 	ldrb.w	r3, [r5, #3320]	; 0xcf8
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10a9c:	370e      	adds	r7, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10a9e:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10aa0:	f027 0703 	bic.w	r7, r7, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10aa4:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   10aa6:	b2bf      	uxth	r7, r7
		if (((free_count_conn + 1) == _radio.connection_count) ||
   10aa8:	d054      	beq.n	10b54 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb55>
   10aaa:	f8b5 3d20 	ldrh.w	r3, [r5, #3360]	; 0xd20
   10aae:	42bb      	cmp	r3, r7
   10ab0:	d350      	bcc.n	10b54 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb55>
		node_rx = packet_rx_reserve_get(2);
   10ab2:	2002      	movs	r0, #2
   10ab4:	f7fc fb42 	bl	d13c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
   10ab8:	2800      	cmp	r0, #0
   10aba:	d157      	bne.n	10b6c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb6d>
   10abc:	4b3c      	ldr	r3, [pc, #240]	; (10bb0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb1>)
   10abe:	9301      	str	r3, [sp, #4]
   10ac0:	9300      	str	r3, [sp, #0]
   10ac2:	4b3c      	ldr	r3, [pc, #240]	; (10bb4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb5>)
   10ac4:	f7ff bab2 	b.w	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
				if (_radio.packet_rx_acquire == 0) {
   10ac8:	b90b      	cbnz	r3, 10ace <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xacf>
						_radio.packet_rx_count - 1;
   10aca:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
					_radio.packet_rx_acquire -= 1;
   10ace:	3b01      	subs	r3, #1
   10ad0:	f885 3d2a 	strb.w	r3, [r5, #3370]	; 0xd2a
				node_rx = _radio.packet_rx[
   10ad4:	f895 2d2a 	ldrb.w	r2, [r5, #3370]	; 0xd2a
   10ad8:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
				mem_release(node_rx->hdr.onion.link,
   10adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10ae0:	4649      	mov	r1, r9
   10ae2:	6818      	ldr	r0, [r3, #0]
   10ae4:	f7f9 fc97 	bl	a416 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   10ae8:	f895 2d28 	ldrb.w	r2, [r5, #3368]	; 0xd28
   10aec:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
   10af0:	3a01      	subs	r2, #1
   10af2:	4293      	cmp	r3, r2
   10af4:	db08      	blt.n	10b08 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb09>
   10af6:	4b2e      	ldr	r3, [pc, #184]	; (10bb0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb1>)
   10af8:	9301      	str	r3, [sp, #4]
   10afa:	9300      	str	r3, [sp, #0]
   10afc:	4a2e      	ldr	r2, [pc, #184]	; (10bb8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb9>)
   10afe:	4b2d      	ldr	r3, [pc, #180]	; (10bb4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb5>)
   10b00:	492e      	ldr	r1, [pc, #184]	; (10bbc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbbd>)
   10b02:	482f      	ldr	r0, [pc, #188]	; (10bc0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbc1>)
   10b04:	f7fe bf80 	b.w	fa08 <event_connection_prepare+0x20>
				_radio.link_rx_data_quota++;
   10b08:	3301      	adds	r3, #1
   10b0a:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
			while (_radio.packet_rx_acquire !=
   10b0e:	f895 3d2a 	ldrb.w	r3, [r5, #3370]	; 0xd2a
				_radio.packet_rx_last) {
   10b12:	f895 2d29 	ldrb.w	r2, [r5, #3369]	; 0xd29
			while (_radio.packet_rx_acquire !=
   10b16:	4293      	cmp	r3, r2
   10b18:	d1d6      	bne.n	10ac8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xac9>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   10b1a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			_radio.packet_rx_data_count =
   10b1c:	f8b5 2d1e 	ldrh.w	r2, [r5, #3358]	; 0xd1e
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   10b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
				_radio.packet_rx_data_size =
   10b24:	bf3a      	itte	cc
   10b26:	f44f 7386 	movcc.w	r3, #268	; 0x10c
   10b2a:	f8a5 3d20 	strhcc.w	r3, [r5, #3360]	; 0xd20
				_radio.packet_rx_data_size =
   10b2e:	f8a5 7d20 	strhcs.w	r7, [r5, #3360]	; 0xd20
				_radio.packet_rx_data_size;
   10b32:	f8b5 1d20 	ldrh.w	r1, [r5, #3360]	; 0xd20
			_radio.packet_rx_data_count =
   10b36:	fbb2 f2f1 	udiv	r2, r2, r1
   10b3a:	b2d2      	uxtb	r2, r2
   10b3c:	f885 2d22 	strb.w	r2, [r5, #3362]	; 0xd22
			LL_ASSERT(_radio.packet_rx_data_count);
   10b40:	b95a      	cbnz	r2, 10b5a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb5b>
   10b42:	4b1b      	ldr	r3, [pc, #108]	; (10bb0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb1>)
   10b44:	9301      	str	r3, [sp, #4]
   10b46:	9300      	str	r3, [sp, #0]
   10b48:	4a1b      	ldr	r2, [pc, #108]	; (10bb8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb9>)
   10b4a:	4b1a      	ldr	r3, [pc, #104]	; (10bb4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbb5>)
   10b4c:	491b      	ldr	r1, [pc, #108]	; (10bbc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbbd>)
   10b4e:	481d      	ldr	r0, [pc, #116]	; (10bc4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbc5>)
   10b50:	f7fe bf5a 	b.w	fa08 <event_connection_prepare+0x20>
				mem_release(node_rx->hdr.onion.link,
   10b54:	f8df 9074 	ldr.w	r9, [pc, #116]	; 10bcc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbcd>
   10b58:	e7d9      	b.n	10b0e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb0f>
			mem_init(_radio.pkt_rx_data_pool,
   10b5a:	f8d5 0d14 	ldr.w	r0, [r5, #3348]	; 0xd14
   10b5e:	4b1a      	ldr	r3, [pc, #104]	; (10bc8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xbc9>)
   10b60:	f7f9 fc18 	bl	a394 <mem_init>
			packet_rx_allocate(4);
   10b64:	2004      	movs	r0, #4
   10b66:	f7fc fb61 	bl	d22c <packet_rx_allocate>
   10b6a:	e7a2      	b.n	10ab2 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xab3>
		node_rx->hdr.handle = conn->handle;
   10b6c:	8c23      	ldrh	r3, [r4, #32]
   10b6e:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10b70:	2301      	movs	r3, #1
   10b72:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10b74:	7a03      	ldrb	r3, [r0, #8]
   10b76:	f043 0303 	orr.w	r3, r3, #3
   10b7a:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
   10b7c:	2309      	movs	r3, #9
   10b7e:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10b80:	2315      	movs	r3, #21
   10b82:	72c3      	strb	r3, [r0, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   10b84:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   10b86:	8183      	strh	r3, [r0, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   10b88:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   10b8a:	8203      	strh	r3, [r0, #16]
		lr->max_rx_time = conn->max_rx_time;
   10b8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   10b8e:	81c3      	strh	r3, [r0, #14]
		lr->max_tx_time = conn->max_tx_time;
   10b90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10b92:	8243      	strh	r3, [r0, #18]
		packet_rx_enqueue();
   10b94:	f7fd fc74 	bl	e480 <packet_rx_enqueue>
   10b98:	e729      	b.n	109ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9ef>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   10b9a:	4902      	ldr	r1, [pc, #8]	; (10ba4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xba5>)
   10b9c:	4638      	mov	r0, r7
   10b9e:	f7f9 fc3a 	bl	a416 <mem_release>
   10ba2:	e40a      	b.n	103ba <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3bb>
   10ba4:	200018dc 	.word	0x200018dc
   10ba8:	00010f25 	.word	0x00010f25
   10bac:	00010c15 	.word	0x00010c15
   10bb0:	0001868d 	.word	0x0001868d
   10bb4:	0001b2e6 	.word	0x0001b2e6
   10bb8:	00019a84 	.word	0x00019a84
   10bbc:	00019a8b 	.word	0x00019a8b
   10bc0:	0001b4f8 	.word	0x0001b4f8
   10bc4:	0001b552 	.word	0x0001b552
   10bc8:	200018b0 	.word	0x200018b0
   10bcc:	200018c8 	.word	0x200018c8

00010bd0 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   10bd0:	f7fe bf0a 	b.w	f9e8 <event_connection_prepare>

00010bd4 <event_slave_prepare>:
   10bd4:	f7fe bf08 	b.w	f9e8 <event_connection_prepare>

00010bd8 <connection_configure>:
{
   10bd8:	b510      	push	{r4, lr}
   10bda:	4604      	mov	r4, r0
	radio_reset();
   10bdc:	f005 fb0a 	bl	161f4 <radio_reset>
	radio_tx_power_set(0);
   10be0:	2000      	movs	r0, #0
   10be2:	f005 fb4f 	bl	16284 <radio_tx_power_set>
	radio_isr_set(isr);
   10be6:	480a      	ldr	r0, [pc, #40]	; (10c10 <connection_configure+0x38>)
   10be8:	f005 face 	bl	16188 <radio_isr_set>
	radio_aa_set(conn->access_addr);
   10bec:	f104 0010 	add.w	r0, r4, #16
   10bf0:	f005 fb66 	bl	162c0 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
   10bf4:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
   10bf6:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   10bf8:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   10bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   10bfe:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10c00:	f240 605b 	movw	r0, #1627	; 0x65b
   10c04:	4319      	orrs	r1, r3
}
   10c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   10c0a:	f005 bc13 	b.w	16434 <radio_crc_configure>
   10c0e:	bf00      	nop
   10c10:	00012301 	.word	0x00012301

00010c14 <event_slave>:
{
   10c14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10c18:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   10c1a:	4b71      	ldr	r3, [pc, #452]	; (10de0 <event_slave+0x1cc>)
   10c1c:	7cda      	ldrb	r2, [r3, #19]
{
   10c1e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10c20:	f002 06ff 	and.w	r6, r2, #255	; 0xff
   10c24:	461d      	mov	r5, r3
   10c26:	b172      	cbz	r2, 10c46 <event_slave+0x32>
   10c28:	4b6e      	ldr	r3, [pc, #440]	; (10de4 <event_slave+0x1d0>)
   10c2a:	9301      	str	r3, [sp, #4]
   10c2c:	9300      	str	r3, [sp, #0]
   10c2e:	4a6e      	ldr	r2, [pc, #440]	; (10de8 <event_slave+0x1d4>)
   10c30:	4b6e      	ldr	r3, [pc, #440]	; (10dec <event_slave+0x1d8>)
   10c32:	496f      	ldr	r1, [pc, #444]	; (10df0 <event_slave+0x1dc>)
   10c34:	486f      	ldr	r0, [pc, #444]	; (10df4 <event_slave+0x1e0>)
	LL_ASSERT(_radio.ticker_id_prepare ==
   10c36:	f7f0 fd53 	bl	16e0 <printk>
   10c3a:	4040      	eors	r0, r0
   10c3c:	f380 8811 	msr	BASEPRI, r0
   10c40:	f04f 0004 	mov.w	r0, #4
   10c44:	df02      	svc	2
   10c46:	7c1b      	ldrb	r3, [r3, #16]
   10c48:	8c22      	ldrh	r2, [r4, #32]
   10c4a:	b2db      	uxtb	r3, r3
   10c4c:	3207      	adds	r2, #7
   10c4e:	4293      	cmp	r3, r2
   10c50:	d007      	beq.n	10c62 <event_slave+0x4e>
   10c52:	4b64      	ldr	r3, [pc, #400]	; (10de4 <event_slave+0x1d0>)
   10c54:	9301      	str	r3, [sp, #4]
   10c56:	9300      	str	r3, [sp, #0]
   10c58:	4a63      	ldr	r2, [pc, #396]	; (10de8 <event_slave+0x1d4>)
   10c5a:	4b64      	ldr	r3, [pc, #400]	; (10dec <event_slave+0x1d8>)
   10c5c:	4964      	ldr	r1, [pc, #400]	; (10df0 <event_slave+0x1dc>)
   10c5e:	4866      	ldr	r0, [pc, #408]	; (10df8 <event_slave+0x1e4>)
   10c60:	e7e9      	b.n	10c36 <event_slave+0x22>
	_radio.packet_counter = 0;
   10c62:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
   10c66:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	_radio.role = ROLE_SLAVE;
   10c6a:	2203      	movs	r2, #3
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   10c6c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_SLAVE;
   10c6e:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
   10c70:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
   10c72:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   10c74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   10c76:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_RX;
   10c7a:	2201      	movs	r2, #1
	conn->latency_event = conn->latency_prepare;
   10c7c:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
   10c7e:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
   10c80:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
   10c82:	4620      	mov	r0, r4
	_radio.state = STATE_RX;
   10c84:	752a      	strb	r2, [r5, #20]
	connection_configure(conn);
   10c86:	f7ff ffa7 	bl	10bd8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   10c8a:	2096      	movs	r0, #150	; 0x96
   10c8c:	f005 fc8e 	bl	165ac <radio_tmr_tifs_set>
				     conn->phy_flags);
   10c90:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   10c94:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10c98:	09d3      	lsrs	r3, r2, #7
   10c9a:	4631      	mov	r1, r6
   10c9c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   10ca0:	f000 0007 	and.w	r0, r0, #7
   10ca4:	f005 fbf0 	bl	16488 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   10ca8:	f895 2d29 	ldrb.w	r2, [r5, #3369]	; 0xd29
   10cac:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
   10cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
   10cb4:	4620      	mov	r0, r4
   10cb6:	3108      	adds	r1, #8
   10cb8:	f7fc fd9e 	bl	d7f8 <rx_packet_set>
	if (conn->data_chan_sel) {
   10cbc:	7f63      	ldrb	r3, [r4, #29]
   10cbe:	f013 0f40 	tst.w	r3, #64	; 0x40
   10cc2:	f104 0217 	add.w	r2, r4, #23
   10cc6:	d05a      	beq.n	10d7e <event_slave+0x16a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   10cc8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   10cca:	8be1      	ldrh	r1, [r4, #30]
   10ccc:	3801      	subs	r0, #1
   10cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10cd2:	b280      	uxth	r0, r0
   10cd4:	f7fe fd76 	bl	f7c4 <chan_sel_2>
	chan_set(data_chan_use);
   10cd8:	f7fc fde6 	bl	d8a8 <chan_set>
	conn->slave.window_widening_event_us +=
   10cdc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   10cde:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   10ce0:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
   10ce2:	2200      	movs	r2, #0
   10ce4:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   10ce6:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
   10ce8:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
   10cea:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
   10cec:	bf88      	it	hi
   10cee:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
   10cf0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   10cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
   10cf4:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
   10cf6:	4413      	add	r3, r2
   10cf8:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   10cfa:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
   10cfc:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
   10cfe:	f107 0109 	add.w	r1, r7, #9
   10d02:	4630      	mov	r0, r6
   10d04:	f005 fc5e 	bl	165c4 <radio_tmr_start>
   10d08:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
   10d0a:	f005 fce5 	bl	166d8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   10d0e:	4630      	mov	r0, r6
   10d10:	f005 fd04 	bl	1671c <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10d14:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   10d16:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10d18:	f103 0650 	add.w	r6, r3, #80	; 0x50
   10d1c:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   10d20:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10d24:	2101      	movs	r1, #1
   10d26:	f000 0007 	and.w	r0, r0, #7
   10d2a:	f005 fb2a 	bl	16382 <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   10d2e:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
   10d30:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
   10d32:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10d36:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   10d3a:	2802      	cmp	r0, #2
   10d3c:	d03f      	beq.n	10dbe <event_slave+0x1aa>
		return 40;
   10d3e:	2804      	cmp	r0, #4
   10d40:	bf0c      	ite	eq
   10d42:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   10d46:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   10d48:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
   10d4a:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   10d4c:	f005 fb1b 	bl	16386 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   10d50:	4430      	add	r0, r6
   10d52:	f005 fca3 	bl	1669c <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   10d56:	f894 1020 	ldrb.w	r1, [r4, #32]
   10d5a:	3107      	adds	r1, #7
   10d5c:	463a      	mov	r2, r7
   10d5e:	b2c9      	uxtb	r1, r1
   10d60:	4620      	mov	r0, r4
   10d62:	f7fe f937 	bl	efd4 <preempt_calc>
   10d66:	4603      	mov	r3, r0
   10d68:	b358      	cbz	r0, 10dc2 <event_slave+0x1ae>
		_radio.state = STATE_STOP;
   10d6a:	2304      	movs	r3, #4
   10d6c:	752b      	strb	r3, [r5, #20]
		radio_disable();
   10d6e:	f005 fb25 	bl	163bc <radio_disable>
	packet_tx_enqueue(2);
   10d72:	2002      	movs	r0, #2
}
   10d74:	b002      	add	sp, #8
   10d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
   10d7a:	f7fd bec5 	b.w	eb08 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10d7e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   10d80:	7fa6      	ldrb	r6, [r4, #30]
   10d82:	fb01 6606 	mla	r6, r1, r6, r6
   10d86:	7fe1      	ldrb	r1, [r4, #31]
   10d88:	2025      	movs	r0, #37	; 0x25
   10d8a:	440e      	add	r6, r1
   10d8c:	fb96 f1f0 	sdiv	r1, r6, r0
   10d90:	fb00 6611 	mls	r6, r0, r1, r6
   10d94:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10d96:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   10d98:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10d9a:	5c51      	ldrb	r1, [r2, r1]
   10d9c:	f006 0607 	and.w	r6, r6, #7
   10da0:	fa41 f606 	asr.w	r6, r1, r6
   10da4:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   10da6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10daa:	d495      	bmi.n	10cd8 <event_slave+0xc4>
		chan_index = chan_next % chan_count;
   10dac:	fbb0 f1f3 	udiv	r1, r0, r3
   10db0:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   10db4:	b2c9      	uxtb	r1, r1
   10db6:	4610      	mov	r0, r2
   10db8:	f7fc f98e 	bl	d0d8 <chan_sel_remap>
   10dbc:	e78c      	b.n	10cd8 <event_slave+0xc4>
		return 24;
   10dbe:	2318      	movs	r3, #24
   10dc0:	e7c2      	b.n	10d48 <event_slave+0x134>
		ticker_status =
   10dc2:	4a0e      	ldr	r2, [pc, #56]	; (10dfc <event_slave+0x1e8>)
   10dc4:	4601      	mov	r1, r0
   10dc6:	f7fa fab1 	bl	b32c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10dca:	f030 0302 	bics.w	r3, r0, #2
   10dce:	d0d0      	beq.n	10d72 <event_slave+0x15e>
   10dd0:	4b04      	ldr	r3, [pc, #16]	; (10de4 <event_slave+0x1d0>)
   10dd2:	9301      	str	r3, [sp, #4]
   10dd4:	9300      	str	r3, [sp, #0]
   10dd6:	4a04      	ldr	r2, [pc, #16]	; (10de8 <event_slave+0x1d4>)
   10dd8:	4b04      	ldr	r3, [pc, #16]	; (10dec <event_slave+0x1d8>)
   10dda:	4905      	ldr	r1, [pc, #20]	; (10df0 <event_slave+0x1dc>)
   10ddc:	4808      	ldr	r0, [pc, #32]	; (10e00 <event_slave+0x1ec>)
   10dde:	e72a      	b.n	10c36 <event_slave+0x22>
   10de0:	20000b98 	.word	0x20000b98
   10de4:	0001868d 	.word	0x0001868d
   10de8:	00019a84 	.word	0x00019a84
   10dec:	0001b338 	.word	0x0001b338
   10df0:	00019a8b 	.word	0x00019a8b
   10df4:	0001b58f 	.word	0x0001b58f
   10df8:	0001b647 	.word	0x0001b647
   10dfc:	0000e87d 	.word	0x0000e87d
   10e00:	0001b473 	.word	0x0001b473

00010e04 <prepare_pdu_data_tx>:
	    conn->empty ||
   10e04:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
   10e08:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
   10e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e10:	4604      	mov	r4, r0
   10e12:	460e      	mov	r6, r1
	if (/* empty packet */
   10e14:	d109      	bne.n	10e2a <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   10e16:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
   10e1a:	b131      	cbz	r1, 10e2a <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
   10e1c:	f01c 0f08 	tst.w	ip, #8
   10e20:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
   10e24:	d023      	beq.n	10e6e <prepare_pdu_data_tx+0x6a>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   10e26:	4571      	cmp	r1, lr
   10e28:	d021      	beq.n	10e6e <prepare_pdu_data_tx+0x6a>
	conn->empty = 1;
   10e2a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   10e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10e32:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   10e36:	f005 fb13 	bl	16460 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10e3a:	7803      	ldrb	r3, [r0, #0]
   10e3c:	2201      	movs	r2, #1
   10e3e:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
   10e42:	2200      	movs	r2, #0
   10e44:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
   10e46:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10e4a:	7003      	strb	r3, [r0, #0]
   10e4c:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   10e4e:	b15a      	cbz	r2, 10e68 <prepare_pdu_data_tx+0x64>
		pdu_data_tx->md = 1;
   10e50:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   10e54:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
   10e56:	7803      	ldrb	r3, [r0, #0]
   10e58:	f36f 1347 	bfc	r3, #5, #3
   10e5c:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
   10e5e:	2300      	movs	r3, #0
   10e60:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
   10e62:	6030      	str	r0, [r6, #0]
   10e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
   10e68:	f362 1304 	bfi	r3, r2, #4, #1
   10e6c:	e7f2      	b.n	10e54 <prepare_pdu_data_tx+0x50>
					conn->packet_tx_head_offset);
   10e6e:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
   10e72:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   10e76:	1d0d      	adds	r5, r1, #4
   10e78:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
   10e7a:	b913      	cbnz	r3, 10e82 <prepare_pdu_data_tx+0x7e>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   10e7c:	7843      	ldrb	r3, [r0, #1]
   10e7e:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   10e82:	b122      	cbz	r2, 10e8e <prepare_pdu_data_tx+0x8a>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   10e84:	5cab      	ldrb	r3, [r5, r2]
   10e86:	2701      	movs	r7, #1
   10e88:	f367 0301 	bfi	r3, r7, #0, #2
   10e8c:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   10e8e:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
   10e92:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
   10e96:	1abf      	subs	r7, r7, r2
   10e98:	b2ff      	uxtb	r7, r7
   10e9a:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
   10e9c:	5cab      	ldrb	r3, [r5, r2]
   10e9e:	f36f 1304 	bfc	r3, #4, #1
   10ea2:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
   10ea4:	f008 0807 	and.w	r8, r8, #7
   10ea8:	f1b8 0f02 	cmp.w	r8, #2
   10eac:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   10eae:	d029      	beq.n	10f04 <prepare_pdu_data_tx+0x100>
   10eb0:	f1b8 0f04 	cmp.w	r8, #4
   10eb4:	d029      	beq.n	10f0a <prepare_pdu_data_tx+0x106>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   10eb6:	08db      	lsrs	r3, r3, #3
   10eb8:	3b0a      	subs	r3, #10
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10eba:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
   10ebc:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
   10ec0:	bf18      	it	ne
   10ec2:	3b04      	subne	r3, #4
   10ec4:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
   10ec8:	bf18      	it	ne
   10eca:	b29b      	uxthne	r3, r3
   10ecc:	4563      	cmp	r3, ip
   10ece:	bf28      	it	cs
   10ed0:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
   10ed2:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
   10ed4:	bf81      	itttt	hi
   10ed6:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
   10ed8:	5cab      	ldrbhi	r3, [r5, r2]
   10eda:	f043 0310 	orrhi.w	r3, r3, #16
   10ede:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
   10ee0:	680b      	ldr	r3, [r1, #0]
   10ee2:	b11b      	cbz	r3, 10eec <prepare_pdu_data_tx+0xe8>
			_pdu_data_tx->md = 1;
   10ee4:	5cab      	ldrb	r3, [r5, r2]
   10ee6:	f043 0310 	orr.w	r3, r3, #16
   10eea:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
   10eec:	f1be 0f00 	cmp.w	lr, #0
   10ef0:	d1b1      	bne.n	10e56 <prepare_pdu_data_tx+0x52>
   10ef2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   10ef6:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   10ef8:	bf1c      	itt	ne
   10efa:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
   10efe:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
   10f02:	e7a8      	b.n	10e56 <prepare_pdu_data_tx+0x52>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   10f04:	089b      	lsrs	r3, r3, #2
   10f06:	3b0b      	subs	r3, #11
   10f08:	e7d7      	b.n	10eba <prepare_pdu_data_tx+0xb6>
			if (conn->phy_flags & 0x01) {
   10f0a:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
   10f0e:	ea5f 18d8 	movs.w	r8, r8, lsr #7
				max_tx_octets = ((conn->max_tx_time - 592) >>
   10f12:	bf15      	itete	ne
   10f14:	f5a3 7314 	subne.w	r3, r3, #592	; 0x250
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10f18:	f5a3 73d7 	subeq.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((conn->max_tx_time - 592) >>
   10f1c:	119b      	asrne	r3, r3, #6
				max_tx_octets = ((conn->max_tx_time - 430) >>
   10f1e:	111b      	asreq	r3, r3, #4
   10f20:	3b02      	subs	r3, #2
   10f22:	e7ca      	b.n	10eba <prepare_pdu_data_tx+0xb6>

00010f24 <event_master>:
{
   10f24:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f26:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
   10f28:	4b56      	ldr	r3, [pc, #344]	; (11084 <event_master+0x160>)
   10f2a:	7cd9      	ldrb	r1, [r3, #19]
{
   10f2c:	b085      	sub	sp, #20
   10f2e:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
   10f30:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   10f34:	461d      	mov	r5, r3
   10f36:	b171      	cbz	r1, 10f56 <event_master+0x32>
   10f38:	4b53      	ldr	r3, [pc, #332]	; (11088 <event_master+0x164>)
   10f3a:	9301      	str	r3, [sp, #4]
   10f3c:	9300      	str	r3, [sp, #0]
   10f3e:	4a53      	ldr	r2, [pc, #332]	; (1108c <event_master+0x168>)
   10f40:	4b53      	ldr	r3, [pc, #332]	; (11090 <event_master+0x16c>)
   10f42:	4954      	ldr	r1, [pc, #336]	; (11094 <event_master+0x170>)
   10f44:	4854      	ldr	r0, [pc, #336]	; (11098 <event_master+0x174>)
	LL_ASSERT(_radio.ticker_id_prepare ==
   10f46:	f7f0 fbcb 	bl	16e0 <printk>
   10f4a:	4040      	eors	r0, r0
   10f4c:	f380 8811 	msr	BASEPRI, r0
   10f50:	f04f 0004 	mov.w	r0, #4
   10f54:	df02      	svc	2
   10f56:	7c1b      	ldrb	r3, [r3, #16]
   10f58:	8c21      	ldrh	r1, [r4, #32]
   10f5a:	b2db      	uxtb	r3, r3
   10f5c:	3107      	adds	r1, #7
   10f5e:	428b      	cmp	r3, r1
   10f60:	d007      	beq.n	10f72 <event_master+0x4e>
   10f62:	4b49      	ldr	r3, [pc, #292]	; (11088 <event_master+0x164>)
   10f64:	9301      	str	r3, [sp, #4]
   10f66:	9300      	str	r3, [sp, #0]
   10f68:	4a48      	ldr	r2, [pc, #288]	; (1108c <event_master+0x168>)
   10f6a:	4b49      	ldr	r3, [pc, #292]	; (11090 <event_master+0x16c>)
   10f6c:	4949      	ldr	r1, [pc, #292]	; (11094 <event_master+0x170>)
   10f6e:	484b      	ldr	r0, [pc, #300]	; (1109c <event_master+0x178>)
   10f70:	e7e9      	b.n	10f46 <event_master+0x22>
	_radio.packet_counter = 0;
   10f72:	f885 2d00 	strb.w	r2, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
   10f76:	f885 2d01 	strb.w	r2, [r5, #3329]	; 0xd01
	_radio.role = ROLE_MASTER;
   10f7a:	2104      	movs	r1, #4
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   10f7c:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
   10f7e:	74e9      	strb	r1, [r5, #19]
	_radio.ticker_id_prepare = 0;
   10f80:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
   10f82:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
   10f84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
   10f86:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_TX;
   10f8a:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
   10f8c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   10f8e:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
   10f90:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
   10f92:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
   10f94:	f7fd fdb8 	bl	eb08 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   10f98:	a903      	add	r1, sp, #12
   10f9a:	4620      	mov	r0, r4
   10f9c:	f7ff ff32 	bl	10e04 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   10fa0:	9903      	ldr	r1, [sp, #12]
   10fa2:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   10fa6:	780b      	ldrb	r3, [r1, #0]
   10fa8:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
   10fac:	f3c2 0240 	ubfx	r2, r2, #1, #1
   10fb0:	f362 0382 	bfi	r3, r2, #2, #1
   10fb4:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
   10fb6:	4620      	mov	r0, r4
   10fb8:	f7ff fe0e 	bl	10bd8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   10fbc:	2096      	movs	r0, #150	; 0x96
   10fbe:	f005 faf5 	bl	165ac <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   10fc2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   10fc6:	f000 0007 	and.w	r0, r0, #7
   10fca:	f005 fa51 	bl	16470 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   10fce:	9903      	ldr	r1, [sp, #12]
   10fd0:	4620      	mov	r0, r4
   10fd2:	f7fc fc3d 	bl	d850 <tx_packet_set>
	if (conn->data_chan_sel) {
   10fd6:	7f63      	ldrb	r3, [r4, #29]
   10fd8:	f013 0f40 	tst.w	r3, #64	; 0x40
   10fdc:	f104 0217 	add.w	r2, r4, #23
   10fe0:	d021      	beq.n	11026 <event_master+0x102>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   10fe2:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   10fe4:	8be1      	ldrh	r1, [r4, #30]
   10fe6:	3801      	subs	r0, #1
   10fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10fec:	b280      	uxth	r0, r0
   10fee:	f7fe fbe9 	bl	f7c4 <chan_sel_2>
	chan_set(data_chan_use);
   10ff2:	f7fc fc59 	bl	d8a8 <chan_set>
		remainder_us = radio_tmr_start(1,
   10ff6:	68ea      	ldr	r2, [r5, #12]
   10ff8:	f107 0109 	add.w	r1, r7, #9
   10ffc:	2001      	movs	r0, #1
   10ffe:	f005 fae1 	bl	165c4 <radio_tmr_start>
		radio_tmr_end_capture();
   11002:	f005 fb9d 	bl	16740 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   11006:	f894 1020 	ldrb.w	r1, [r4, #32]
   1100a:	3107      	adds	r1, #7
   1100c:	463a      	mov	r2, r7
   1100e:	b2c9      	uxtb	r1, r1
   11010:	4620      	mov	r0, r4
   11012:	f7fd ffdf 	bl	efd4 <preempt_calc>
	if (0 !=
   11016:	4603      	mov	r3, r0
   11018:	b328      	cbz	r0, 11066 <event_master+0x142>
		_radio.state = STATE_STOP;
   1101a:	2304      	movs	r3, #4
   1101c:	752b      	strb	r3, [r5, #20]
		radio_disable();
   1101e:	f005 f9cd 	bl	163bc <radio_disable>
}
   11022:	b005      	add	sp, #20
   11024:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   11026:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
   11028:	7fa6      	ldrb	r6, [r4, #30]
   1102a:	fb01 6606 	mla	r6, r1, r6, r6
   1102e:	7fe1      	ldrb	r1, [r4, #31]
   11030:	2025      	movs	r0, #37	; 0x25
   11032:	440e      	add	r6, r1
   11034:	fb96 f1f0 	sdiv	r1, r6, r0
   11038:	fb00 6611 	mls	r6, r0, r1, r6
   1103c:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   1103e:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   11040:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11042:	5c51      	ldrb	r1, [r2, r1]
   11044:	f006 0607 	and.w	r6, r6, #7
   11048:	fa41 f606 	asr.w	r6, r1, r6
   1104c:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
   1104e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11052:	d4ce      	bmi.n	10ff2 <event_master+0xce>
		chan_index = chan_next % chan_count;
   11054:	fbb0 f1f3 	udiv	r1, r0, r3
   11058:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   1105c:	b2c9      	uxtb	r1, r1
   1105e:	4610      	mov	r0, r2
   11060:	f7fc f83a 	bl	d0d8 <chan_sel_remap>
   11064:	e7c5      	b.n	10ff2 <event_master+0xce>
		ticker_status =
   11066:	4a0e      	ldr	r2, [pc, #56]	; (110a0 <event_master+0x17c>)
   11068:	4601      	mov	r1, r0
   1106a:	f7fa f95f 	bl	b32c <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1106e:	f030 0302 	bics.w	r3, r0, #2
   11072:	d0d6      	beq.n	11022 <event_master+0xfe>
   11074:	4b04      	ldr	r3, [pc, #16]	; (11088 <event_master+0x164>)
   11076:	9301      	str	r3, [sp, #4]
   11078:	9300      	str	r3, [sp, #0]
   1107a:	4a04      	ldr	r2, [pc, #16]	; (1108c <event_master+0x168>)
   1107c:	4b04      	ldr	r3, [pc, #16]	; (11090 <event_master+0x16c>)
   1107e:	4905      	ldr	r1, [pc, #20]	; (11094 <event_master+0x170>)
   11080:	4808      	ldr	r0, [pc, #32]	; (110a4 <event_master+0x180>)
   11082:	e760      	b.n	10f46 <event_master+0x22>
   11084:	20000b98 	.word	0x20000b98
   11088:	0001868d 	.word	0x0001868d
   1108c:	00019a84 	.word	0x00019a84
   11090:	0001b344 	.word	0x0001b344
   11094:	00019a8b 	.word	0x00019a8b
   11098:	0001b58f 	.word	0x0001b58f
   1109c:	0001b647 	.word	0x0001b647
   110a0:	0000e87d 	.word	0x0000e87d
   110a4:	0001b473 	.word	0x0001b473

000110a8 <isr_rx_conn_pkt_ctrl>:
{
   110a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
   110ac:	7ac7      	ldrb	r7, [r0, #11]
{
   110ae:	b085      	sub	sp, #20
   110b0:	4604      	mov	r4, r0
   110b2:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
   110b4:	f100 0608 	add.w	r6, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
   110b8:	2f19      	cmp	r7, #25
   110ba:	f201 80eb 	bhi.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
   110be:	e8df f017 	tbh	[pc, r7, lsl #1]
   110c2:	001a      	.short	0x001a
   110c4:	00bd0081 	.word	0x00bd0081
   110c8:	00fa00cc 	.word	0x00fa00cc
   110cc:	01540122 	.word	0x01540122
   110d0:	01900584 	.word	0x01900584
   110d4:	01f101c3 	.word	0x01f101c3
   110d8:	024c021b 	.word	0x024c021b
   110dc:	01a602b5 	.word	0x01a602b5
   110e0:	042002cd 	.word	0x042002cd
   110e4:	055f04a3 	.word	0x055f04a3
   110e8:	06470579 	.word	0x06470579
   110ec:	07280647 	.word	0x07280647
   110f0:	082c07f5 	.word	0x082c07f5
   110f4:	08b6      	.short	0x08b6
		if (!_radio.conn_curr->role ||
   110f6:	4ecb      	ldr	r6, [pc, #812]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   110f8:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   110fc:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11100:	2b00      	cmp	r3, #0
   11102:	f281 80c7 	bge.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
   11106:	7a41      	ldrb	r1, [r0, #9]
   11108:	2000      	movs	r0, #0
   1110a:	f7fb ffb9 	bl	d080 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   1110e:	2800      	cmp	r0, #0
   11110:	f001 80c0 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   11114:	f8b4 1015 	ldrh.w	r1, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   11118:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1111a:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
   1111c:	041b      	lsls	r3, r3, #16
   1111e:	f101 80cf 	bmi.w	122c0 <isr_rx_conn_pkt_ctrl+0x1218>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11122:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   11126:	f895 2075 	ldrb.w	r2, [r5, #117]	; 0x75
   1112a:	429a      	cmp	r2, r3
   1112c:	d007      	beq.n	1113e <isr_rx_conn_pkt_ctrl+0x96>
   1112e:	4bbe      	ldr	r3, [pc, #760]	; (11428 <isr_rx_conn_pkt_ctrl+0x380>)
   11130:	9301      	str	r3, [sp, #4]
   11132:	9300      	str	r3, [sp, #0]
   11134:	4bbd      	ldr	r3, [pc, #756]	; (1142c <isr_rx_conn_pkt_ctrl+0x384>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11136:	4abe      	ldr	r2, [pc, #760]	; (11430 <isr_rx_conn_pkt_ctrl+0x388>)
   11138:	49be      	ldr	r1, [pc, #760]	; (11434 <isr_rx_conn_pkt_ctrl+0x38c>)
   1113a:	48bf      	ldr	r0, [pc, #764]	; (11438 <isr_rx_conn_pkt_ctrl+0x390>)
   1113c:	e0f7      	b.n	1132e <isr_rx_conn_pkt_ctrl+0x286>
	if (_radio.conn_upd == 0) {
   1113e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
   11142:	b90a      	cbnz	r2, 11148 <isr_rx_conn_pkt_ctrl+0xa0>
		_radio.conn_upd = conn;
   11144:	f8c6 5d70 	str.w	r5, [r6, #3440]	; 0xd70
	conn->llcp.conn_upd.win_size =
   11148:	7b22      	ldrb	r2, [r4, #12]
   1114a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
   1114e:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   11152:	f240 42e2 	movw	r2, #1250	; 0x4e2
   11156:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
   11158:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
   1115c:	7c20      	ldrb	r0, [r4, #16]
   1115e:	7be2      	ldrb	r2, [r4, #15]
   11160:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
   11164:	f8a5 207a 	strh.w	r2, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
   11168:	7ca0      	ldrb	r0, [r4, #18]
   1116a:	7c62      	ldrb	r2, [r4, #17]
   1116c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
   11170:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   11174:	7ce2      	ldrb	r2, [r4, #19]
   11176:	7d20      	ldrb	r0, [r4, #20]
	conn->llcp.conn_upd.instant =
   11178:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
		pdu_data_rx->llctrl.conn_update_ind.timeout;
   1117c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
   11180:	f8a5 207e 	strh.w	r2, [r5, #126]	; 0x7e
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11184:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   11188:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   1118c:	f36f 0282 	bfc	r2, #2, #1
	conn->llcp_ack--;
   11190:	3b01      	subs	r3, #1
	conn->llcp.conn_upd.is_internal = 0;
   11192:	f885 2078 	strb.w	r2, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   11196:	2201      	movs	r2, #1
   11198:	f885 2076 	strb.w	r2, [r5, #118]	; 0x76
	conn->llcp_ack--;
   1119c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   111a0:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   111a4:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   111a8:	4293      	cmp	r3, r2
   111aa:	d007      	beq.n	111bc <isr_rx_conn_pkt_ctrl+0x114>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   111ac:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   111b0:	f003 0307 	and.w	r3, r3, #7
   111b4:	2b04      	cmp	r3, #4
   111b6:	d101      	bne.n	111bc <isr_rx_conn_pkt_ctrl+0x114>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   111b8:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
   111bc:	2000      	movs	r0, #0
   111be:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
   111c2:	e038      	b.n	11236 <isr_rx_conn_pkt_ctrl+0x18e>
		if (!_radio.conn_curr->role ||
   111c4:	4b97      	ldr	r3, [pc, #604]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   111c6:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   111ca:	f995 301d 	ldrsb.w	r3, [r5, #29]
   111ce:	2b00      	cmp	r3, #0
   111d0:	f281 8060 	bge.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
   111d4:	7a41      	ldrb	r1, [r0, #9]
   111d6:	2001      	movs	r0, #1
   111d8:	f7fb ff52 	bl	d080 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   111dc:	2800      	cmp	r0, #0
   111de:	f001 8059 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   111e2:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   111e6:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
   111e8:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
   111ea:	041f      	lsls	r7, r3, #16
   111ec:	f101 8068 	bmi.w	122c0 <isr_rx_conn_pkt_ctrl+0x1218>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   111f0:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   111f4:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   111f8:	429a      	cmp	r2, r3
   111fa:	d004      	beq.n	11206 <isr_rx_conn_pkt_ctrl+0x15e>
   111fc:	4b8a      	ldr	r3, [pc, #552]	; (11428 <isr_rx_conn_pkt_ctrl+0x380>)
   111fe:	9301      	str	r3, [sp, #4]
   11200:	9300      	str	r3, [sp, #0]
   11202:	4b8e      	ldr	r3, [pc, #568]	; (1143c <isr_rx_conn_pkt_ctrl+0x394>)
   11204:	e797      	b.n	11136 <isr_rx_conn_pkt_ctrl+0x8e>
	memcpy(&conn->llcp.chan_map.chm[0],
   11206:	2205      	movs	r2, #5
   11208:	f104 010c 	add.w	r1, r4, #12
   1120c:	f105 0079 	add.w	r0, r5, #121	; 0x79
   11210:	f7ef f9fa 	bl	608 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
   11214:	7c63      	ldrb	r3, [r4, #17]
   11216:	7ca2      	ldrb	r2, [r4, #18]
   11218:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
   1121c:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp_type = LLCP_CHAN_MAP;
   11220:	2302      	movs	r3, #2
   11222:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
   11226:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
	conn->llcp.chan_map.initiate = 0;
   1122a:	2000      	movs	r0, #0
	conn->llcp_ack--;
   1122c:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
   1122e:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_ack--;
   11232:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
   11236:	b005      	add	sp, #20
   11238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   1123c:	7a41      	ldrb	r1, [r0, #9]
   1123e:	2002      	movs	r0, #2
   11240:	f7fb ff1e 	bl	d080 <pdu_len_cmp>
   11244:	2800      	cmp	r0, #0
   11246:	f001 8025 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		_radio.conn_curr->llcp_terminate.reason_peer =
   1124a:	4b76      	ldr	r3, [pc, #472]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   1124c:	7b22      	ldrb	r2, [r4, #12]
   1124e:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   11252:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   11256:	2000      	movs	r0, #0
	return nack;
   11258:	e7ed      	b.n	11236 <isr_rx_conn_pkt_ctrl+0x18e>
		if (!_radio.conn_curr->role ||
   1125a:	4e72      	ldr	r6, [pc, #456]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   1125c:	f8d6 8cfc 	ldr.w	r8, [r6, #3324]	; 0xcfc
   11260:	f998 301d 	ldrsb.w	r3, [r8, #29]
   11264:	2b00      	cmp	r3, #0
   11266:	f281 8015 	bge.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
   1126a:	7a41      	ldrb	r1, [r0, #9]
   1126c:	2003      	movs	r0, #3
   1126e:	f7fb ff07 	bl	d080 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   11272:	2800      	cmp	r0, #0
   11274:	f001 800e 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   11278:	2208      	movs	r2, #8
   1127a:	f104 0116 	add.w	r1, r4, #22
   1127e:	f108 0094 	add.w	r0, r8, #148	; 0x94
   11282:	f7ef f9c1 	bl	608 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   11286:	f8d6 0cfc 	ldr.w	r0, [r6, #3324]	; 0xcfc
   1128a:	2204      	movs	r2, #4
   1128c:	f104 011e 	add.w	r1, r4, #30
   11290:	f500 7089 	add.w	r0, r0, #274	; 0x112
   11294:	f7ef f9b8 	bl	608 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   11298:	f8d6 3cfc 	ldr.w	r3, [r6, #3324]	; 0xcfc
   1129c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   112a0:	f042 0204 	orr.w	r2, r2, #4
   112a4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   112a8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   112ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
   112b0:	2301      	movs	r3, #1
   112b2:	702b      	strb	r3, [r5, #0]
   112b4:	e7cf      	b.n	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		if (_radio.conn_curr->role ||
   112b6:	4d5b      	ldr	r5, [pc, #364]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   112b8:	f8d5 6cfc 	ldr.w	r6, [r5, #3324]	; 0xcfc
   112bc:	f996 301d 	ldrsb.w	r3, [r6, #29]
   112c0:	2b00      	cmp	r3, #0
   112c2:	f2c0 87e7 	blt.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
   112c6:	7a41      	ldrb	r1, [r0, #9]
   112c8:	2004      	movs	r0, #4
   112ca:	f7fb fed9 	bl	d080 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   112ce:	2800      	cmp	r0, #0
   112d0:	f000 87e0 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   112d4:	2208      	movs	r2, #8
   112d6:	f104 010c 	add.w	r1, r4, #12
   112da:	f106 009c 	add.w	r0, r6, #156	; 0x9c
   112de:	f7ef f993 	bl	608 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   112e2:	f8d5 0cfc 	ldr.w	r0, [r5, #3324]	; 0xcfc
   112e6:	2204      	movs	r2, #4
   112e8:	f104 0114 	add.w	r1, r4, #20
   112ec:	f500 708b 	add.w	r0, r0, #278	; 0x116
   112f0:	f7ef f98a 	bl	608 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   112f4:	f8d5 2cfc 	ldr.w	r2, [r5, #3324]	; 0xcfc
   112f8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   112fc:	f043 0304 	orr.w	r3, r3, #4
   11300:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   11304:	e7a7      	b.n	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
   11306:	4b47      	ldr	r3, [pc, #284]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   11308:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   1130c:	f895 6075 	ldrb.w	r6, [r5, #117]	; 0x75
   11310:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   11314:	42b3      	cmp	r3, r6
   11316:	d012      	beq.n	1133e <isr_rx_conn_pkt_ctrl+0x296>
   11318:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
   1131c:	2b03      	cmp	r3, #3
   1131e:	d00e      	beq.n	1133e <isr_rx_conn_pkt_ctrl+0x296>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   11320:	4b41      	ldr	r3, [pc, #260]	; (11428 <isr_rx_conn_pkt_ctrl+0x380>)
   11322:	9301      	str	r3, [sp, #4]
   11324:	9300      	str	r3, [sp, #0]
   11326:	4a42      	ldr	r2, [pc, #264]	; (11430 <isr_rx_conn_pkt_ctrl+0x388>)
   11328:	4b45      	ldr	r3, [pc, #276]	; (11440 <isr_rx_conn_pkt_ctrl+0x398>)
   1132a:	4942      	ldr	r1, [pc, #264]	; (11434 <isr_rx_conn_pkt_ctrl+0x38c>)
   1132c:	4845      	ldr	r0, [pc, #276]	; (11444 <isr_rx_conn_pkt_ctrl+0x39c>)
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1132e:	f7f0 f9d7 	bl	16e0 <printk>
   11332:	4040      	eors	r0, r0
   11334:	f380 8811 	msr	BASEPRI, r0
   11338:	f04f 0004 	mov.w	r0, #4
   1133c:	df02      	svc	2
		if (_radio.conn_curr->role ||
   1133e:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11342:	2b00      	cmp	r3, #0
   11344:	f2c0 87a6 	blt.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
   11348:	7a61      	ldrb	r1, [r4, #9]
   1134a:	2005      	movs	r0, #5
   1134c:	f7fb fe98 	bl	d080 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   11350:	2800      	cmp	r0, #0
   11352:	f000 879f 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		_radio.conn_curr->llcp.encryption.initiate = 0;
   11356:	2000      	movs	r0, #0
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   11358:	2303      	movs	r3, #3
		_radio.conn_curr->llcp_ack--;
   1135a:	3e01      	subs	r6, #1
		_radio.conn_curr->llcp.encryption.initiate = 0;
   1135c:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   11360:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   11364:	f885 6075 	strb.w	r6, [r5, #117]	; 0x75
		break;
   11368:	e765      	b.n	11236 <isr_rx_conn_pkt_ctrl+0x18e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   1136a:	7a41      	ldrb	r1, [r0, #9]
   1136c:	2006      	movs	r0, #6
   1136e:	f7fb fe87 	bl	d080 <pdu_len_cmp>
   11372:	2800      	cmp	r0, #0
   11374:	f000 878e 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		if (_radio.role == ROLE_SLAVE) {
   11378:	4b2a      	ldr	r3, [pc, #168]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   1137a:	7cda      	ldrb	r2, [r3, #19]
   1137c:	2a03      	cmp	r2, #3
   1137e:	4619      	mov	r1, r3
   11380:	d124      	bne.n	113cc <isr_rx_conn_pkt_ctrl+0x324>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
   11382:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   11386:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
   1138a:	f893 0074 	ldrb.w	r0, [r3, #116]	; 0x74
   1138e:	4290      	cmp	r0, r2
   11390:	d003      	beq.n	1139a <isr_rx_conn_pkt_ctrl+0x2f2>
   11392:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   11396:	2803      	cmp	r0, #3
   11398:	d1c2      	bne.n	11320 <isr_rx_conn_pkt_ctrl+0x278>
			_radio.conn_curr->llcp.encryption.initiate = 0;
   1139a:	2000      	movs	r0, #0
   1139c:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_ack--;
   113a0:	3a01      	subs	r2, #1
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   113a2:	2003      	movs	r0, #3
   113a4:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   113a8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
   113ac:	f8d1 2cfc 	ldr.w	r2, [r1, #3324]	; 0xcfc
   113b0:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   113b4:	065e      	lsls	r6, r3, #25
   113b6:	d505      	bpl.n	113c4 <isr_rx_conn_pkt_ctrl+0x31c>
			_radio.conn_curr->refresh = 0;
   113b8:	f36f 1386 	bfc	r3, #6, #1
   113bc:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   113c0:	2309      	movs	r3, #9
   113c2:	7123      	strb	r3, [r4, #4]
				*rx_enqueue = 1;
   113c4:	2301      	movs	r3, #1
   113c6:	702b      	strb	r3, [r5, #0]
				break;
   113c8:	f000 bcbe 	b.w	11d48 <isr_rx_conn_pkt_ctrl+0xca0>
			_radio.conn_curr->pause_rx = 0;
   113cc:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
   113d0:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   113d4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   113d8:	f36f 03c3 	bfc	r3, #3, #1
   113dc:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
   113e0:	e7e4      	b.n	113ac <isr_rx_conn_pkt_ctrl+0x304>
		if (!_radio.conn_curr->role ||
   113e2:	4b10      	ldr	r3, [pc, #64]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   113e4:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   113e8:	f995 301d 	ldrsb.w	r3, [r5, #29]
   113ec:	2b00      	cmp	r3, #0
   113ee:	f280 8751 	bge.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
   113f2:	7a41      	ldrb	r1, [r0, #9]
   113f4:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   113f6:	f7fb fe43 	bl	d080 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   113fa:	2800      	cmp	r0, #0
   113fc:	f000 874a 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   11400:	4631      	mov	r1, r6
   11402:	4628      	mov	r0, r5
}
   11404:	b005      	add	sp, #20
   11406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
   1140a:	f7fe ba67 	b.w	f8dc <feature_rsp_send>
		if (_radio.conn_curr->role ||
   1140e:	4b05      	ldr	r3, [pc, #20]	; (11424 <isr_rx_conn_pkt_ctrl+0x37c>)
   11410:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   11414:	f995 301d 	ldrsb.w	r3, [r5, #29]
   11418:	2b00      	cmp	r3, #0
   1141a:	f2c0 873b 	blt.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
   1141e:	7a41      	ldrb	r1, [r0, #9]
   11420:	200e      	movs	r0, #14
   11422:	e7e8      	b.n	113f6 <isr_rx_conn_pkt_ctrl+0x34e>
   11424:	20000b98 	.word	0x20000b98
   11428:	0001868d 	.word	0x0001868d
   1142c:	0001b3a3 	.word	0x0001b3a3
   11430:	00019a84 	.word	0x00019a84
   11434:	00019a8b 	.word	0x00019a8b
   11438:	0001b84f 	.word	0x0001b84f
   1143c:	0001b3af 	.word	0x0001b3af
   11440:	0001b055 	.word	0x0001b055
   11444:	0001b891 	.word	0x0001b891
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
   11448:	7a41      	ldrb	r1, [r0, #9]
   1144a:	2009      	movs	r0, #9
   1144c:	f7fb fe18 	bl	d080 <pdu_len_cmp>
   11450:	2800      	cmp	r0, #0
   11452:	f000 871f 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   11456:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
   11458:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1145a:	48b2      	ldr	r0, [pc, #712]	; (11724 <isr_rx_conn_pkt_ctrl+0x67c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1145c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   11460:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   11464:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   11468:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1146c:	f8d0 2cfc 	ldr.w	r2, [r0, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   11470:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   11474:	7ba1      	ldrb	r1, [r4, #14]
   11476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1147a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   1147e:	f3c1 0110 	ubfx	r1, r1, #0, #17
   11482:	400b      	ands	r3, r1
   11484:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   11488:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   1148c:	f043 0320 	orr.w	r3, r3, #32
   11490:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
   11494:	2301      	movs	r3, #1
   11496:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
   11498:	f8d0 3cfc 	ldr.w	r3, [r0, #3324]	; 0xcfc
		_radio.conn_curr->procedure_expire = 0;
   1149c:	2000      	movs	r0, #0
   1149e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		break;
   114a2:	e6c8      	b.n	11236 <isr_rx_conn_pkt_ctrl+0x18e>
		if (!_radio.conn_curr->role ||
   114a4:	4e9f      	ldr	r6, [pc, #636]	; (11724 <isr_rx_conn_pkt_ctrl+0x67c>)
   114a6:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   114aa:	f995 301d 	ldrsb.w	r3, [r5, #29]
   114ae:	2b00      	cmp	r3, #0
   114b0:	f280 86f0 	bge.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
   114b4:	7a41      	ldrb	r1, [r0, #9]
   114b6:	200a      	movs	r0, #10
   114b8:	f7fb fde2 	bl	d080 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   114bc:	2800      	cmp	r0, #0
   114be:	f000 86e9 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   114c2:	f606 5044 	addw	r0, r6, #3396	; 0xd44
   114c6:	f7f8 ff8c 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
   114ca:	4601      	mov	r1, r0
   114cc:	b908      	cbnz	r0, 114d2 <isr_rx_conn_pkt_ctrl+0x42a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   114ce:	2001      	movs	r0, #1
   114d0:	e6b1      	b.n	11236 <isr_rx_conn_pkt_ctrl+0x18e>
		conn->refresh = 1;
   114d2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
   114d6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
   114da:	f36f 1304 	bfc	r3, #4, #1
   114de:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   114e2:	7903      	ldrb	r3, [r0, #4]
   114e4:	f043 0303 	orr.w	r3, r3, #3
   114e8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   114ea:	2301      	movs	r3, #1
   114ec:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   114ee:	230b      	movs	r3, #11
   114f0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   114f2:	4628      	mov	r0, r5
   114f4:	f000 bce6 	b.w	11ec4 <isr_rx_conn_pkt_ctrl+0xe1c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   114f8:	7a41      	ldrb	r1, [r0, #9]
   114fa:	200b      	movs	r0, #11
   114fc:	f7fb fdc0 	bl	d080 <pdu_len_cmp>
   11500:	2800      	cmp	r0, #0
   11502:	f000 86c7 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
   11506:	4887      	ldr	r0, [pc, #540]	; (11724 <isr_rx_conn_pkt_ctrl+0x67c>)
   11508:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	} else if (!conn->role) {
   1150c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   11510:	2b00      	cmp	r3, #0
   11512:	db1b      	blt.n	1154c <isr_rx_conn_pkt_ctrl+0x4a4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11514:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   11518:	f7f8 ff63 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
   1151c:	4601      	mov	r1, r0
   1151e:	2800      	cmp	r0, #0
   11520:	d0d5      	beq.n	114ce <isr_rx_conn_pkt_ctrl+0x426>
		conn->enc_tx = 0;
   11522:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
   11526:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
   1152a:	f043 0304 	orr.w	r3, r3, #4
   1152e:	f36f 1304 	bfc	r3, #4, #1
   11532:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11536:	7903      	ldrb	r3, [r0, #4]
   11538:	f043 0303 	orr.w	r3, r3, #3
   1153c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1153e:	2301      	movs	r3, #1
   11540:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   11542:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11544:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11546:	4620      	mov	r0, r4
   11548:	f000 bcbc 	b.w	11ec4 <isr_rx_conn_pkt_ctrl+0xe1c>
		conn->enc_tx = 0;
   1154c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   11550:	f36f 1345 	bfc	r3, #5, #1
   11554:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   11558:	e67d      	b.n	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   1155a:	7a41      	ldrb	r1, [r0, #9]
   1155c:	200c      	movs	r0, #12
   1155e:	f7fb fd8f 	bl	d080 <pdu_len_cmp>
   11562:	2800      	cmp	r0, #0
   11564:	f000 8696 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
   11568:	486e      	ldr	r0, [pc, #440]	; (11724 <isr_rx_conn_pkt_ctrl+0x67c>)
   1156a:	f8d0 6cfc 	ldr.w	r6, [r0, #3324]	; 0xcfc
	if (!conn->llcp_version.tx) {
   1156e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   11572:	f013 0701 	ands.w	r7, r3, #1
   11576:	d150      	bne.n	1161a <isr_rx_conn_pkt_ctrl+0x572>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11578:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   1157c:	f7f8 ff31 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
   11580:	4601      	mov	r1, r0
   11582:	2800      	cmp	r0, #0
   11584:	d0a3      	beq.n	114ce <isr_rx_conn_pkt_ctrl+0x426>
		conn->llcp_version.tx = 1;
   11586:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   1158a:	f043 0301 	orr.w	r3, r3, #1
   1158e:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11592:	7903      	ldrb	r3, [r0, #4]
   11594:	f043 0303 	orr.w	r3, r3, #3
   11598:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   1159a:	2306      	movs	r3, #6
   1159c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1159e:	230c      	movs	r3, #12
   115a0:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
   115a2:	2309      	movs	r3, #9
   115a4:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
   115a6:	f06f 030e 	mvn.w	r3, #14
   115aa:	7243      	strb	r3, [r0, #9]
   115ac:	2305      	movs	r3, #5
   115ae:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
   115b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115b4:	72c3      	strb	r3, [r0, #11]
   115b6:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
   115b8:	4630      	mov	r0, r6
   115ba:	f7fe f975 	bl	f8a8 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
   115be:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
   115c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   115c6:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
   115ca:	f004 ff49 	bl	16460 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   115ce:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   115d0:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   115d2:	2201      	movs	r2, #1
   115d4:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
   115d8:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   115dc:	7003      	strb	r3, [r0, #0]
   115de:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
   115e0:	b1c2      	cbz	r2, 11614 <isr_rx_conn_pkt_ctrl+0x56c>
		pdu_data_tx->md = 1;
   115e2:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
   115e6:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
   115e8:	7b23      	ldrb	r3, [r4, #12]
   115ea:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
   115ee:	7ba2      	ldrb	r2, [r4, #14]
   115f0:	7b63      	ldrb	r3, [r4, #13]
   115f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   115f6:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
   115fa:	7be3      	ldrb	r3, [r4, #15]
   115fc:	7c22      	ldrb	r2, [r4, #16]
   115fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11602:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
   11606:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
   1160a:	f043 0302 	orr.w	r3, r3, #2
   1160e:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   11612:	e620      	b.n	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		pdu_data_tx->md = 0;
   11614:	f362 1304 	bfi	r3, r2, #4, #1
   11618:	e7e5      	b.n	115e6 <isr_rx_conn_pkt_ctrl+0x53e>
	} else if (!conn->llcp_version.rx) {
   1161a:	f013 0302 	ands.w	r3, r3, #2
   1161e:	f47f ae1a 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		conn->procedure_expire = 0;
   11622:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
   11626:	2301      	movs	r3, #1
   11628:	702b      	strb	r3, [r5, #0]
   1162a:	e7dd      	b.n	115e8 <isr_rx_conn_pkt_ctrl+0x540>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
   1162c:	7a41      	ldrb	r1, [r0, #9]
   1162e:	200d      	movs	r0, #13
   11630:	f7fb fd26 	bl	d080 <pdu_len_cmp>
   11634:	2800      	cmp	r0, #0
   11636:	f000 862d 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		_radio.conn_curr->pause_rx = 0;
   1163a:	4b3a      	ldr	r3, [pc, #232]	; (11724 <isr_rx_conn_pkt_ctrl+0x67c>)
   1163c:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
   11640:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   11644:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   11648:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
   1164c:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
   1164e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   11652:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
   11656:	2301      	movs	r3, #1
   11658:	702b      	strb	r3, [r5, #0]
   1165a:	e5ec      	b.n	11236 <isr_rx_conn_pkt_ctrl+0x18e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   1165c:	7a41      	ldrb	r1, [r0, #9]
   1165e:	200f      	movs	r0, #15
   11660:	f7fb fd0e 	bl	d080 <pdu_len_cmp>
   11664:	2800      	cmp	r0, #0
   11666:	f000 8615 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   1166a:	4b2e      	ldr	r3, [pc, #184]	; (11724 <isr_rx_conn_pkt_ctrl+0x67c>)
   1166c:	f8d3 1d70 	ldr.w	r1, [r3, #3440]	; 0xd70
   11670:	461a      	mov	r2, r3
   11672:	b151      	cbz	r1, 1168a <isr_rx_conn_pkt_ctrl+0x5e2>
   11674:	f8d3 0cfc 	ldr.w	r0, [r3, #3324]	; 0xcfc
   11678:	4281      	cmp	r1, r0
   1167a:	d006      	beq.n	1168a <isr_rx_conn_pkt_ctrl+0x5e2>
			nack = reject_ext_ind_send(_radio.conn_curr,
   1167c:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(_radio.conn_curr,
   1167e:	210f      	movs	r1, #15
}
   11680:	b005      	add	sp, #20
   11682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
   11686:	f7fe b993 	b.w	f9b0 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
   1168a:	f8d2 0cfc 	ldr.w	r0, [r2, #3324]	; 0xcfc
   1168e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11692:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
   11696:	2b00      	cmp	r3, #0
   11698:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   1169c:	f2c0 80a7 	blt.w	117ee <isr_rx_conn_pkt_ctrl+0x746>
			if ((conn->llcp_conn_param.req !=
   116a0:	4299      	cmp	r1, r3
   116a2:	d009      	beq.n	116b8 <isr_rx_conn_pkt_ctrl+0x610>
			    ((conn->llcp_conn_param.state ==
   116a4:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   116a8:	f013 0307 	ands.w	r3, r3, #7
   116ac:	d002      	beq.n	116b4 <isr_rx_conn_pkt_ctrl+0x60c>
			      LLCP_CPR_STATE_REQ) ||
   116ae:	3b04      	subs	r3, #4
   116b0:	2b01      	cmp	r3, #1
   116b2:	d801      	bhi.n	116b8 <isr_rx_conn_pkt_ctrl+0x610>
				nack = reject_ext_ind_send(_radio.conn_curr,
   116b4:	2223      	movs	r2, #35	; 0x23
   116b6:	e7e2      	b.n	1167e <isr_rx_conn_pkt_ctrl+0x5d6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
   116b8:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   116bc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   116c0:	4299      	cmp	r1, r3
   116c2:	d003      	beq.n	116cc <isr_rx_conn_pkt_ctrl+0x624>
   116c4:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   116c8:	2b03      	cmp	r3, #3
   116ca:	d105      	bne.n	116d8 <isr_rx_conn_pkt_ctrl+0x630>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   116cc:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
   116d0:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
   116d4:	4299      	cmp	r1, r3
   116d6:	d001      	beq.n	116dc <isr_rx_conn_pkt_ctrl+0x634>
				nack = reject_ext_ind_send(_radio.conn_curr,
   116d8:	222a      	movs	r2, #42	; 0x2a
   116da:	e7d0      	b.n	1167e <isr_rx_conn_pkt_ctrl+0x5d6>
				if ((cpr->interval_min < 6) ||
   116dc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   116e0:	4643      	mov	r3, r8
   116e2:	2b05      	cmp	r3, #5
   116e4:	d91b      	bls.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
   116e6:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
   116e8:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   116ec:	d817      	bhi.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->interval_max > 3200) ||
   116ee:	45b8      	cmp	r8, r7
   116f0:	d815      	bhi.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->latency > 499) ||
   116f2:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   116f6:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   116fa:	d210      	bcs.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->timeout < 10) ||
   116fc:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
   11700:	f1ae 060a 	sub.w	r6, lr, #10
   11704:	b2b6      	uxth	r6, r6
   11706:	f640 4976 	movw	r9, #3190	; 0xc76
   1170a:	454e      	cmp	r6, r9
   1170c:	d807      	bhi.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
				     ((cpr->latency + 1) *
   1170e:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
   11712:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   11716:	da02      	bge.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
				    (cpr->preferred_periodicity >
   11718:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
   1171a:	428f      	cmp	r7, r1
   1171c:	d204      	bcs.n	11728 <isr_rx_conn_pkt_ctrl+0x680>
				nack = reject_ext_ind_send(conn,
   1171e:	221e      	movs	r2, #30
   11720:	e7ad      	b.n	1167e <isr_rx_conn_pkt_ctrl+0x5d6>
   11722:	bf00      	nop
   11724:	20000b98 	.word	0x20000b98
				conn->llcp_conn_param.interval = cpr->interval_min;
   11728:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   1172c:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   11730:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
   11734:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
   11738:	7da6      	ldrb	r6, [r4, #22]
   1173a:	7d61      	ldrb	r1, [r4, #21]
   1173c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   11740:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   11744:	7e26      	ldrb	r6, [r4, #24]
   11746:	7de1      	ldrb	r1, [r4, #23]
   11748:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1174c:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   11750:	7ea6      	ldrb	r6, [r4, #26]
   11752:	7e61      	ldrb	r1, [r4, #25]
   11754:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11758:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   1175c:	7f26      	ldrb	r6, [r4, #28]
   1175e:	7ee1      	ldrb	r1, [r4, #27]
   11760:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11764:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   11768:	7fa6      	ldrb	r6, [r4, #30]
   1176a:	7f61      	ldrb	r1, [r4, #29]
   1176c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11770:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   11774:	7fe1      	ldrb	r1, [r4, #31]
   11776:	f894 6020 	ldrb.w	r6, [r4, #32]
   1177a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1177e:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   11782:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   11786:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   1178a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   1178e:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
   11792:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   11796:	6a41      	ldr	r1, [r0, #36]	; 0x24
   11798:	428c      	cmp	r4, r1
   1179a:	d10f      	bne.n	117bc <isr_rx_conn_pkt_ctrl+0x714>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1179c:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   1179e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   117a2:	4361      	muls	r1, r4
   117a4:	f242 7410 	movw	r4, #10000	; 0x2710
   117a8:	fb04 130e 	mla	r3, r4, lr, r1
   117ac:	3b01      	subs	r3, #1
   117ae:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
   117b2:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   117b4:	b29b      	uxth	r3, r3
   117b6:	4299      	cmp	r1, r3
   117b8:	f000 8092 	beq.w	118e0 <isr_rx_conn_pkt_ctrl+0x838>
					if (conn->pause_tx) {
   117bc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   117c0:	071c      	lsls	r4, r3, #28
   117c2:	f140 8087 	bpl.w	118d4 <isr_rx_conn_pkt_ctrl+0x82c>
						conn->llcp_conn_param.state =
   117c6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   117ca:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
   117cc:	f361 0302 	bfi	r3, r1, #0, #3
   117d0:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   117d4:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   117d8:	3b01      	subs	r3, #1
   117da:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   117de:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	; 0xd70
   117e2:	2b00      	cmp	r3, #0
   117e4:	f47f ad37 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
				_radio.conn_upd = conn;
   117e8:	f8c2 0d70 	str.w	r0, [r2, #3440]	; 0xd70
   117ec:	e533      	b.n	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   117ee:	4299      	cmp	r1, r3
   117f0:	d003      	beq.n	117fa <isr_rx_conn_pkt_ctrl+0x752>
			    _radio.conn_curr->llcp_conn_param.ack) ||
   117f2:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   117f6:	0799      	lsls	r1, r3, #30
   117f8:	d17b      	bne.n	118f2 <isr_rx_conn_pkt_ctrl+0x84a>
			if ((cpr->interval_min < 6) ||
   117fa:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   117fe:	4643      	mov	r3, r8
   11800:	2b05      	cmp	r3, #5
   11802:	d98c      	bls.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
   11804:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
   11806:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   1180a:	d888      	bhi.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->interval_max > 3200) ||
   1180c:	45b8      	cmp	r8, r7
   1180e:	d886      	bhi.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->latency > 499) ||
   11810:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   11814:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   11818:	d281      	bcs.n	1171e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1181a:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
   1181e:	f1ae 060a 	sub.w	r6, lr, #10
   11822:	b2b6      	uxth	r6, r6
   11824:	f640 4976 	movw	r9, #3190	; 0xc76
   11828:	454e      	cmp	r6, r9
   1182a:	f63f af78 	bhi.w	1171e <isr_rx_conn_pkt_ctrl+0x676>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   1182e:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   11832:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
   11836:	f6bf af72 	bge.w	1171e <isr_rx_conn_pkt_ctrl+0x676>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1183a:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
   1183c:	428f      	cmp	r7, r1
   1183e:	f4ff af6e 	bcc.w	1171e <isr_rx_conn_pkt_ctrl+0x676>
			conn->llcp_conn_param.interval = cpr->interval_min;
   11842:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   11846:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   1184a:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   1184e:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
   11852:	7da6      	ldrb	r6, [r4, #22]
   11854:	7d61      	ldrb	r1, [r4, #21]
   11856:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1185a:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   1185e:	7e26      	ldrb	r6, [r4, #24]
   11860:	7de1      	ldrb	r1, [r4, #23]
   11862:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11866:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   1186a:	7ea6      	ldrb	r6, [r4, #26]
   1186c:	7e61      	ldrb	r1, [r4, #25]
   1186e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11872:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   11876:	7f26      	ldrb	r6, [r4, #28]
   11878:	7ee1      	ldrb	r1, [r4, #27]
   1187a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1187e:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   11882:	7fa6      	ldrb	r6, [r4, #30]
   11884:	7f61      	ldrb	r1, [r4, #29]
   11886:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   1188a:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   1188e:	7fe1      	ldrb	r1, [r4, #31]
   11890:	f894 6020 	ldrb.w	r6, [r4, #32]
   11894:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
   11898:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   1189c:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
   118a0:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
   118a4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   118a8:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
   118ac:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
   118b0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   118b2:	428c      	cmp	r4, r1
   118b4:	d10e      	bne.n	118d4 <isr_rx_conn_pkt_ctrl+0x82c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   118b6:	8c84      	ldrh	r4, [r0, #36]	; 0x24
   118b8:	f240 41e2 	movw	r1, #1250	; 0x4e2
   118bc:	4361      	muls	r1, r4
   118be:	f242 7410 	movw	r4, #10000	; 0x2710
   118c2:	fb04 130e 	mla	r3, r4, lr, r1
   118c6:	3b01      	subs	r3, #1
   118c8:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
   118cc:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   118ce:	b29b      	uxth	r3, r3
   118d0:	4299      	cmp	r1, r3
   118d2:	d005      	beq.n	118e0 <isr_rx_conn_pkt_ctrl+0x838>
				*rx_enqueue = 1;
   118d4:	2301      	movs	r3, #1
   118d6:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
   118d8:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   118dc:	2103      	movs	r1, #3
   118de:	e775      	b.n	117cc <isr_rx_conn_pkt_ctrl+0x724>
				conn->llcp_conn_param.status = 0;
   118e0:	2300      	movs	r3, #0
   118e2:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   118e6:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
   118ea:	2101      	movs	r1, #1
   118ec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   118f0:	e76c      	b.n	117cc <isr_rx_conn_pkt_ctrl+0x724>
			LL_ASSERT(0);
   118f2:	4bc9      	ldr	r3, [pc, #804]	; (11c18 <isr_rx_conn_pkt_ctrl+0xb70>)
   118f4:	9301      	str	r3, [sp, #4]
   118f6:	9300      	str	r3, [sp, #0]
   118f8:	4ac8      	ldr	r2, [pc, #800]	; (11c1c <isr_rx_conn_pkt_ctrl+0xb74>)
   118fa:	4bc9      	ldr	r3, [pc, #804]	; (11c20 <isr_rx_conn_pkt_ctrl+0xb78>)
   118fc:	49c9      	ldr	r1, [pc, #804]	; (11c24 <isr_rx_conn_pkt_ctrl+0xb7c>)
   118fe:	48ca      	ldr	r0, [pc, #808]	; (11c28 <isr_rx_conn_pkt_ctrl+0xb80>)
   11900:	e515      	b.n	1132e <isr_rx_conn_pkt_ctrl+0x286>
		if (_radio.conn_curr->role ||
   11902:	4bca      	ldr	r3, [pc, #808]	; (11c2c <isr_rx_conn_pkt_ctrl+0xb84>)
   11904:	f8d3 5cfc 	ldr.w	r5, [r3, #3324]	; 0xcfc
   11908:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1190c:	2b00      	cmp	r3, #0
   1190e:	f2c0 84c1 	blt.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
   11912:	7a41      	ldrb	r1, [r0, #9]
   11914:	2010      	movs	r0, #16
   11916:	f7fb fbb3 	bl	d080 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   1191a:	2800      	cmp	r0, #0
   1191c:	f000 84ba 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		if (!_radio.conn_curr->role &&
   11920:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   11924:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   11928:	429a      	cmp	r2, r3
   1192a:	f43f ac94 	beq.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		    (_radio.conn_curr->llcp_conn_param.state ==
   1192e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
   11932:	f003 0307 	and.w	r3, r3, #7
   11936:	2b04      	cmp	r3, #4
   11938:	f47f ac8d 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
			if ((cpr->interval_min < 6) ||
   1193c:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   11940:	fa1f f28e 	uxth.w	r2, lr
   11944:	2a05      	cmp	r2, #5
   11946:	d91b      	bls.n	11980 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
   11948:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   1194a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1194e:	d817      	bhi.n	11980 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->interval_max > 3200) ||
   11950:	429a      	cmp	r2, r3
   11952:	d815      	bhi.n	11980 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->latency > 499) ||
   11954:	8a27      	ldrh	r7, [r4, #16]
   11956:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
   11958:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1195c:	d210      	bcs.n	11980 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   1195e:	8a66      	ldrh	r6, [r4, #18]
   11960:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
   11962:	f1a0 010a 	sub.w	r1, r0, #10
   11966:	b289      	uxth	r1, r1
   11968:	f640 4c76 	movw	ip, #3190	; 0xc76
   1196c:	4561      	cmp	r1, ip
   1196e:	d807      	bhi.n	11980 <isr_rx_conn_pkt_ctrl+0x8d8>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   11970:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   11974:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   11978:	da02      	bge.n	11980 <isr_rx_conn_pkt_ctrl+0x8d8>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   1197a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   1197c:	4293      	cmp	r3, r2
   1197e:	d203      	bcs.n	11988 <isr_rx_conn_pkt_ctrl+0x8e0>
				nack = reject_ext_ind_send(conn,
   11980:	221e      	movs	r2, #30
   11982:	2110      	movs	r1, #16
   11984:	4628      	mov	r0, r5
   11986:	e67b      	b.n	11680 <isr_rx_conn_pkt_ctrl+0x5d8>
			_radio.conn_curr->procedure_expire = 0;
   11988:	2000      	movs	r0, #0
   1198a:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   1198e:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   11992:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   11996:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
   1199a:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   1199e:	7da2      	ldrb	r2, [r4, #22]
   119a0:	7d63      	ldrb	r3, [r4, #21]
   119a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   119a6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   119aa:	7e22      	ldrb	r2, [r4, #24]
   119ac:	7de3      	ldrb	r3, [r4, #23]
   119ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   119b2:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   119b6:	7ea2      	ldrb	r2, [r4, #26]
   119b8:	7e63      	ldrb	r3, [r4, #25]
   119ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   119be:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   119c2:	7f22      	ldrb	r2, [r4, #28]
   119c4:	7ee3      	ldrb	r3, [r4, #27]
   119c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   119ca:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   119ce:	7fa2      	ldrb	r2, [r4, #30]
   119d0:	7f63      	ldrb	r3, [r4, #29]
   119d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   119d6:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   119da:	f894 2020 	ldrb.w	r2, [r4, #32]
   119de:	7fe3      	ldrb	r3, [r4, #31]
   119e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   119e4:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   119e8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   119ec:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   119f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   119f4:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   119f8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   119fc:	2201      	movs	r2, #1
   119fe:	f362 0302 	bfi	r3, r2, #0, #3
   11a02:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   11a06:	e416      	b.n	11236 <isr_rx_conn_pkt_ctrl+0x18e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   11a08:	7a41      	ldrb	r1, [r0, #9]
   11a0a:	2011      	movs	r0, #17
   11a0c:	f7fb fb38 	bl	d080 <pdu_len_cmp>
   11a10:	2800      	cmp	r0, #0
   11a12:	f000 843f 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   11a16:	4a85      	ldr	r2, [pc, #532]	; (11c2c <isr_rx_conn_pkt_ctrl+0xb84>)
   11a18:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
   11a1c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   11a20:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   11a24:	4281      	cmp	r1, r0
   11a26:	7b21      	ldrb	r1, [r4, #12]
   11a28:	d027      	beq.n	11a7a <isr_rx_conn_pkt_ctrl+0x9d2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   11a2a:	2916      	cmp	r1, #22
   11a2c:	f47f ac13 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		if (rej_ext_ind->error_code != 0x23) {
   11a30:	7b61      	ldrb	r1, [r4, #13]
   11a32:	2923      	cmp	r1, #35	; 0x23
   11a34:	d00e      	beq.n	11a54 <isr_rx_conn_pkt_ctrl+0x9ac>
				_radio.conn_curr->phy_tx;
   11a36:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
   11a3a:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   11a3e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   11a42:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   11a46:	f362 0002 	bfi	r0, r2, #0, #3
			_radio.conn_curr->procedure_expire = 0;
   11a4a:	2200      	movs	r2, #0
			_radio.conn_curr->phy_tx_time =
   11a4c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   11a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   11a54:	f893 20f7 	ldrb.w	r2, [r3, #247]	; 0xf7
   11a58:	0792      	lsls	r2, r2, #30
   11a5a:	f57f abfc 	bpl.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11a5e:	220c      	movs	r2, #12
		p->status = rej_ext_ind->error_code;
   11a60:	72e1      	strb	r1, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11a62:	7122      	strb	r2, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
   11a64:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   11a68:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   11a6c:	7322      	strb	r2, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   11a6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   11a72:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11a76:	7363      	strb	r3, [r4, #13]
   11a78:	e41a      	b.n	112b0 <isr_rx_conn_pkt_ctrl+0x208>
		   _radio.conn_curr->llcp_conn_param.req) {
   11a7a:	f893 70c0 	ldrb.w	r7, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   11a7e:	f893 00c1 	ldrb.w	r0, [r3, #193]	; 0xc1
   11a82:	42b8      	cmp	r0, r7
   11a84:	d048      	beq.n	11b18 <isr_rx_conn_pkt_ctrl+0xa70>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   11a86:	290f      	cmp	r1, #15
   11a88:	f47f abe5 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
   11a8c:	f993 001d 	ldrsb.w	r0, [r3, #29]
   11a90:	7b61      	ldrb	r1, [r4, #13]
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   11a92:	2800      	cmp	r0, #0
   11a94:	db0e      	blt.n	11ab4 <isr_rx_conn_pkt_ctrl+0xa0c>
   11a96:	291a      	cmp	r1, #26
   11a98:	d10c      	bne.n	11ab4 <isr_rx_conn_pkt_ctrl+0xa0c>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11a9a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   11a9e:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   11aa2:	4294      	cmp	r4, r2
   11aa4:	f000 80c8 	beq.w	11c38 <isr_rx_conn_pkt_ctrl+0xb90>
   11aa8:	4b5b      	ldr	r3, [pc, #364]	; (11c18 <isr_rx_conn_pkt_ctrl+0xb70>)
   11aaa:	9301      	str	r3, [sp, #4]
   11aac:	9300      	str	r3, [sp, #0]
   11aae:	4b60      	ldr	r3, [pc, #384]	; (11c30 <isr_rx_conn_pkt_ctrl+0xb88>)
   11ab0:	f7ff bb41 	b.w	11136 <isr_rx_conn_pkt_ctrl+0x8e>
	else if (rej_ext_ind->error_code != 0x23) {
   11ab4:	2923      	cmp	r1, #35	; 0x23
   11ab6:	d018      	beq.n	11aea <isr_rx_conn_pkt_ctrl+0xa42>
		LL_ASSERT(_radio.conn_upd == conn);
   11ab8:	f8d2 6d70 	ldr.w	r6, [r2, #3440]	; 0xd70
   11abc:	42b3      	cmp	r3, r6
   11abe:	d007      	beq.n	11ad0 <isr_rx_conn_pkt_ctrl+0xa28>
   11ac0:	4b55      	ldr	r3, [pc, #340]	; (11c18 <isr_rx_conn_pkt_ctrl+0xb70>)
   11ac2:	9301      	str	r3, [sp, #4]
   11ac4:	9300      	str	r3, [sp, #0]
   11ac6:	4b5a      	ldr	r3, [pc, #360]	; (11c30 <isr_rx_conn_pkt_ctrl+0xb88>)
			LL_ASSERT(_radio.conn_upd == conn);
   11ac8:	4a54      	ldr	r2, [pc, #336]	; (11c1c <isr_rx_conn_pkt_ctrl+0xb74>)
   11aca:	4956      	ldr	r1, [pc, #344]	; (11c24 <isr_rx_conn_pkt_ctrl+0xb7c>)
   11acc:	4859      	ldr	r0, [pc, #356]	; (11c34 <isr_rx_conn_pkt_ctrl+0xb8c>)
   11ace:	e42e      	b.n	1132e <isr_rx_conn_pkt_ctrl+0x286>
		_radio.conn_upd = NULL;
   11ad0:	2600      	movs	r6, #0
		if (conn->role) {
   11ad2:	42b0      	cmp	r0, r6
		_radio.conn_upd = NULL;
   11ad4:	f8c2 6d70 	str.w	r6, [r2, #3440]	; 0xd70
			conn->slave.ticks_to_offset =
   11ad8:	bfb8      	it	lt
   11ada:	f8d3 20e4 	ldrlt.w	r2, [r3, #228]	; 0xe4
		conn->llcp_conn_param.ack =
   11ade:	f883 70c1 	strb.w	r7, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   11ae2:	f8a3 6044 	strh.w	r6, [r3, #68]	; 0x44
			conn->slave.ticks_to_offset =
   11ae6:	bfb8      	it	lt
   11ae8:	671a      	strlt	r2, [r3, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
   11aea:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   11aee:	0717      	lsls	r7, r2, #28
   11af0:	f57f abb1 	bpl.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
	cp->status = rej_ext_ind->error_code;
   11af4:	72e1      	strb	r1, [r4, #11]
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11af6:	2208      	movs	r2, #8
	cp->latency = conn->latency;
   11af8:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11afa:	7122      	strb	r2, [r4, #4]
	cp->interval = conn->conn_interval;
   11afc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   11afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
	cp->interval = conn->conn_interval;
   11b00:	81a2      	strh	r2, [r4, #12]
	cp->timeout = conn->supervision_reload *
   11b02:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
   11b04:	237d      	movs	r3, #125	; 0x7d
   11b06:	4353      	muls	r3, r2
	cp->latency = conn->latency;
   11b08:	81e1      	strh	r1, [r4, #14]
	cp->timeout = conn->supervision_reload *
   11b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b0e:	fb93 f3f2 	sdiv	r3, r3, r2
   11b12:	8223      	strh	r3, [r4, #16]
   11b14:	f7ff bbcc 	b.w	112b0 <isr_rx_conn_pkt_ctrl+0x208>
		   _radio.conn_curr->llcp_length.req) {
   11b18:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   11b1c:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   11b20:	4290      	cmp	r0, r2
   11b22:	d01a      	beq.n	11b5a <isr_rx_conn_pkt_ctrl+0xab2>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   11b24:	2914      	cmp	r1, #20
   11b26:	f47f ab96 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		conn->llcp_length.ack = conn->llcp_length.req;
   11b2a:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->pause_tx = 0;
   11b2e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
		conn->procedure_expire = 0;
   11b32:	2000      	movs	r0, #0
		conn->pause_tx = 0;
   11b34:	f360 02c3 	bfi	r2, r0, #3, #1
   11b38:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   11b3c:	2209      	movs	r2, #9
		conn->procedure_expire = 0;
   11b3e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   11b42:	7262      	strb	r2, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11b44:	2215      	movs	r2, #21
   11b46:	72e2      	strb	r2, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   11b48:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   11b4a:	81a2      	strh	r2, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   11b4c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
   11b4e:	8222      	strh	r2, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   11b50:	8eda      	ldrh	r2, [r3, #54]	; 0x36
		lr->max_tx_time = conn->max_tx_time;
   11b52:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		lr->max_rx_time = conn->max_rx_time;
   11b54:	81e2      	strh	r2, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   11b56:	8263      	strh	r3, [r4, #18]
   11b58:	e57d      	b.n	11656 <isr_rx_conn_pkt_ctrl+0x5ae>
		switch (rej_ext_ind->reject_opcode) {
   11b5a:	2903      	cmp	r1, #3
   11b5c:	f47f ab7b 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
			_radio.conn_curr->pause_rx = 0;
   11b60:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   11b64:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   11b68:	f36f 02c3 	bfc	r2, #3, #1
			_radio.conn_curr->procedure_expire = 0;
   11b6c:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
   11b6e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   11b72:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11b76:	230d      	movs	r3, #13
   11b78:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
   11b7a:	7b63      	ldrb	r3, [r4, #13]
   11b7c:	7323      	strb	r3, [r4, #12]
   11b7e:	e56a      	b.n	11656 <isr_rx_conn_pkt_ctrl+0x5ae>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
   11b80:	7a41      	ldrb	r1, [r0, #9]
   11b82:	2012      	movs	r0, #18
   11b84:	f7fb fa7c 	bl	d080 <pdu_len_cmp>
   11b88:	2800      	cmp	r0, #0
   11b8a:	f000 8383 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		nack = ping_resp_send(_radio.conn_curr);
   11b8e:	4827      	ldr	r0, [pc, #156]	; (11c2c <isr_rx_conn_pkt_ctrl+0xb84>)
   11b90:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b94:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   11b98:	f7f8 fc23 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
   11b9c:	4601      	mov	r1, r0
   11b9e:	2800      	cmp	r0, #0
   11ba0:	f43f ac95 	beq.w	114ce <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ba4:	7903      	ldrb	r3, [r0, #4]
   11ba6:	f043 0303 	orr.w	r3, r3, #3
   11baa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   11bac:	2301      	movs	r3, #1
   11bae:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11bb0:	2313      	movs	r3, #19
   11bb2:	e4c7      	b.n	11544 <isr_rx_conn_pkt_ctrl+0x49c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
   11bb4:	7a41      	ldrb	r1, [r0, #9]
   11bb6:	2013      	movs	r0, #19
   11bb8:	f7fb fa62 	bl	d080 <pdu_len_cmp>
   11bbc:	2800      	cmp	r0, #0
   11bbe:	f000 8369 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		_radio.conn_curr->procedure_expire = 0;
   11bc2:	4b1a      	ldr	r3, [pc, #104]	; (11c2c <isr_rx_conn_pkt_ctrl+0xb84>)
   11bc4:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
   11bc8:	e468      	b.n	1149c <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   11bca:	7a41      	ldrb	r1, [r0, #9]
   11bcc:	2007      	movs	r0, #7
   11bce:	f7fb fa57 	bl	d080 <pdu_len_cmp>
   11bd2:	2800      	cmp	r0, #0
   11bd4:	f000 835e 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   11bd8:	4a14      	ldr	r2, [pc, #80]	; (11c2c <isr_rx_conn_pkt_ctrl+0xb84>)
   11bda:	f8d2 3cfc 	ldr.w	r3, [r2, #3324]	; 0xcfc
   11bde:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			   _radio.conn_curr->llcp_conn_param.req) {
   11be2:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
   11be6:	42b1      	cmp	r1, r6
   11be8:	4611      	mov	r1, r2
   11bea:	d077      	beq.n	11cdc <isr_rx_conn_pkt_ctrl+0xc34>
			conn->llcp_conn_param.disabled = 1;
   11bec:	f893 00c2 	ldrb.w	r0, [r3, #194]	; 0xc2
   11bf0:	f040 0010 	orr.w	r0, r0, #16
   11bf4:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
			if (!conn->role) {
   11bf8:	f993 001d 	ldrsb.w	r0, [r3, #29]
   11bfc:	2800      	cmp	r0, #0
   11bfe:	db47      	blt.n	11c90 <isr_rx_conn_pkt_ctrl+0xbe8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11c00:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   11c04:	f893 4075 	ldrb.w	r4, [r3, #117]	; 0x75
   11c08:	4294      	cmp	r4, r2
   11c0a:	d015      	beq.n	11c38 <isr_rx_conn_pkt_ctrl+0xb90>
   11c0c:	4b02      	ldr	r3, [pc, #8]	; (11c18 <isr_rx_conn_pkt_ctrl+0xb70>)
   11c0e:	9301      	str	r3, [sp, #4]
   11c10:	9300      	str	r3, [sp, #0]
   11c12:	4b03      	ldr	r3, [pc, #12]	; (11c20 <isr_rx_conn_pkt_ctrl+0xb78>)
   11c14:	f7ff ba8f 	b.w	11136 <isr_rx_conn_pkt_ctrl+0x8e>
   11c18:	0001868d 	.word	0x0001868d
   11c1c:	00019a84 	.word	0x00019a84
   11c20:	0001b055 	.word	0x0001b055
   11c24:	00019a8b 	.word	0x00019a8b
   11c28:	000197a5 	.word	0x000197a5
   11c2c:	20000b98 	.word	0x20000b98
   11c30:	0001b01a 	.word	0x0001b01a
   11c34:	0001b921 	.word	0x0001b921
				conn->llcp_conn_param.state =
   11c38:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   11c3c:	2105      	movs	r1, #5
   11c3e:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp.conn_upd.interval =
   11c42:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   11c46:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
   11c4a:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   11c4e:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
   11c52:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   11c56:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11c5a:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
				conn->llcp_conn_param.state =
   11c5e:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
   11c62:	2501      	movs	r5, #1
					!conn->llcp_conn_param.cmd;
   11c64:	f082 0208 	eor.w	r2, r2, #8
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11c68:	f365 0101 	bfi	r1, r5, #0, #2
					!conn->llcp_conn_param.cmd;
   11c6c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
   11c70:	2000      	movs	r0, #0
				conn->llcp.conn_upd.is_internal =
   11c72:	f362 0182 	bfi	r1, r2, #2, #1
				conn->llcp_ack--;
   11c76:	3c01      	subs	r4, #1
				conn->llcp.conn_upd.win_size = 1;
   11c78:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
   11c7c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
   11c80:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
   11c84:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
				conn->llcp_ack--;
   11c88:	f883 4075 	strb.w	r4, [r3, #117]	; 0x75
				break;
   11c8c:	f7ff bad3 	b.w	11236 <isr_rx_conn_pkt_ctrl+0x18e>
			LL_ASSERT(_radio.conn_upd == conn);
   11c90:	f8d2 2d70 	ldr.w	r2, [r2, #3440]	; 0xd70
   11c94:	4293      	cmp	r3, r2
   11c96:	d004      	beq.n	11ca2 <isr_rx_conn_pkt_ctrl+0xbfa>
   11c98:	4bcf      	ldr	r3, [pc, #828]	; (11fd8 <isr_rx_conn_pkt_ctrl+0xf30>)
   11c9a:	9301      	str	r3, [sp, #4]
   11c9c:	9300      	str	r3, [sp, #0]
   11c9e:	4bcf      	ldr	r3, [pc, #828]	; (11fdc <isr_rx_conn_pkt_ctrl+0xf34>)
   11ca0:	e712      	b.n	11ac8 <isr_rx_conn_pkt_ctrl+0xa20>
			_radio.conn_upd = NULL;
   11ca2:	2200      	movs	r2, #0
   11ca4:	f8c1 2d70 	str.w	r2, [r1, #3440]	; 0xd70
			if (!conn->llcp_conn_param.cmd) {
   11ca8:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11cac:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
   11cb0:	0716      	lsls	r6, r2, #28
   11cb2:	f57f aad0 	bpl.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11cb6:	2208      	movs	r2, #8
   11cb8:	7122      	strb	r2, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11cba:	221a      	movs	r2, #26
   11cbc:	72e2      	strb	r2, [r4, #11]
			cp->interval = conn->conn_interval;
   11cbe:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
			cp->latency = conn->latency;
   11cc0:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
			cp->timeout = conn->supervision_reload *
   11cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
			cp->interval = conn->conn_interval;
   11cc4:	81a2      	strh	r2, [r4, #12]
			cp->timeout = conn->supervision_reload *
   11cc6:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
   11cc8:	237d      	movs	r3, #125	; 0x7d
   11cca:	4353      	muls	r3, r2
			cp->latency = conn->latency;
   11ccc:	81e0      	strh	r0, [r4, #14]
			cp->timeout = conn->supervision_reload *
   11cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11cd2:	fb93 f3f2 	sdiv	r3, r3, r2
   11cd6:	8223      	strh	r3, [r4, #16]
   11cd8:	f7ff bb74 	b.w	113c4 <isr_rx_conn_pkt_ctrl+0x31c>
		} else if (_radio.conn_curr->llcp_length.req !=
   11cdc:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
   11ce0:	f893 00e9 	ldrb.w	r0, [r3, #233]	; 0xe9
   11ce4:	4290      	cmp	r0, r2
   11ce6:	d009      	beq.n	11cfc <isr_rx_conn_pkt_ctrl+0xc54>
			_radio.conn_curr->llcp_length.ack =
   11ce8:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   11cec:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   11cf0:	f36f 02c3 	bfc	r2, #3, #1
   11cf4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   11cf8:	f7ff bb64 	b.w	113c4 <isr_rx_conn_pkt_ctrl+0x31c>
		} else if (_radio.conn_curr->llcp_phy.req !=
   11cfc:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   11d00:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
   11d04:	4290      	cmp	r0, r2
   11d06:	d01b      	beq.n	11d40 <isr_rx_conn_pkt_ctrl+0xc98>
			_radio.conn_curr->llcp_phy.ack =
   11d08:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
   11d0c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
   11d10:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
				_radio.conn_curr->phy_tx;
   11d14:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   11d18:	f362 0002 	bfi	r0, r2, #0, #3
   11d1c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   11d20:	f893 00f7 	ldrb.w	r0, [r3, #247]	; 0xf7
   11d24:	0780      	lsls	r0, r0, #30
   11d26:	d50f      	bpl.n	11d48 <isr_rx_conn_pkt_ctrl+0xca0>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11d28:	200c      	movs	r0, #12
   11d2a:	7120      	strb	r0, [r4, #4]
				p->status = 0;
   11d2c:	2000      	movs	r0, #0
   11d2e:	72e0      	strb	r0, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   11d30:	7322      	strb	r2, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   11d32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   11d36:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11d3a:	7363      	strb	r3, [r4, #13]
   11d3c:	f7ff bb42 	b.w	113c4 <isr_rx_conn_pkt_ctrl+0x31c>
			switch (llctrl->unknown_rsp.type) {
   11d40:	7b23      	ldrb	r3, [r4, #12]
   11d42:	2b12      	cmp	r3, #18
   11d44:	f47f ab3e 	bne.w	113c4 <isr_rx_conn_pkt_ctrl+0x31c>
		_radio.conn_curr->procedure_expire = 0;
   11d48:	f8d1 3cfc 	ldr.w	r3, [r1, #3324]	; 0xcfc
   11d4c:	f7ff bba6 	b.w	1149c <isr_rx_conn_pkt_ctrl+0x3f4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   11d50:	7a41      	ldrb	r1, [r0, #9]
   11d52:	2014      	movs	r0, #20
   11d54:	f7fb f994 	bl	d080 <pdu_len_cmp>
   11d58:	2800      	cmp	r0, #0
   11d5a:	f000 829b 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   11d5e:	2f14      	cmp	r7, #20
   11d60:	d129      	bne.n	11db6 <isr_rx_conn_pkt_ctrl+0xd0e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d62:	489f      	ldr	r0, [pc, #636]	; (11fe0 <isr_rx_conn_pkt_ctrl+0xf38>)
   11d64:	f7f8 fb3d 	bl	a3e2 <mem_acquire>
		if (!node_tx) {
   11d68:	4606      	mov	r6, r0
   11d6a:	2800      	cmp	r0, #0
   11d6c:	f43f abaf 	beq.w	114ce <isr_rx_conn_pkt_ctrl+0x426>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11d70:	f8df 8284 	ldr.w	r8, [pc, #644]	; 11ff8 <isr_rx_conn_pkt_ctrl+0xf50>
   11d74:	f8d8 3cfc 	ldr.w	r3, [r8, #3324]	; 0xcfc
	    ((_radio.conn_curr->llcp_length.req ==
   11d78:	f893 70e8 	ldrb.w	r7, [r3, #232]	; 0xe8
	if (/* Local idle, and Peer request then complete the Peer procedure
   11d7c:	f893 c0e9 	ldrb.w	ip, [r3, #233]	; 0xe9
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11d80:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   11d82:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   11d84:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   11d86:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   11d8a:	9703      	str	r7, [sp, #12]
	if (/* Local idle, and Peer request then complete the Peer procedure
   11d8c:	45bc      	cmp	ip, r7
   11d8e:	46c3      	mov	fp, r8
   11d90:	f894 c00b 	ldrb.w	ip, [r4, #11]
   11d94:	d111      	bne.n	11dba <isr_rx_conn_pkt_ctrl+0xd12>
	      _radio.conn_curr->llcp_length.ack) &&
   11d96:	f1bc 0f14 	cmp.w	ip, #20
   11d9a:	d01a      	beq.n	11dd2 <isr_rx_conn_pkt_ctrl+0xd2a>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
   11d9c:	f1bc 0f15 	cmp.w	ip, #21
   11da0:	f000 829c 	beq.w	122dc <isr_rx_conn_pkt_ctrl+0x1234>
   11da4:	4b8c      	ldr	r3, [pc, #560]	; (11fd8 <isr_rx_conn_pkt_ctrl+0xf30>)
   11da6:	9301      	str	r3, [sp, #4]
   11da8:	9300      	str	r3, [sp, #0]
   11daa:	4a8e      	ldr	r2, [pc, #568]	; (11fe4 <isr_rx_conn_pkt_ctrl+0xf3c>)
   11dac:	4b8e      	ldr	r3, [pc, #568]	; (11fe8 <isr_rx_conn_pkt_ctrl+0xf40>)
   11dae:	498f      	ldr	r1, [pc, #572]	; (11fec <isr_rx_conn_pkt_ctrl+0xf44>)
   11db0:	488f      	ldr	r0, [pc, #572]	; (11ff0 <isr_rx_conn_pkt_ctrl+0xf48>)
   11db2:	f7ff babc 	b.w	1132e <isr_rx_conn_pkt_ctrl+0x286>
	struct radio_pdu_node_tx *node_tx = NULL;
   11db6:	2600      	movs	r6, #0
   11db8:	e7da      	b.n	11d70 <isr_rx_conn_pkt_ctrl+0xcc8>
		 LLCP_LENGTH_STATE_REQ) ||
   11dba:	f893 70ea 	ldrb.w	r7, [r3, #234]	; 0xea
   11dbe:	f007 0703 	and.w	r7, r7, #3
	      _radio.conn_curr->llcp_length.ack) &&
   11dc2:	2f01      	cmp	r7, #1
   11dc4:	d9e7      	bls.n	11d96 <isr_rx_conn_pkt_ctrl+0xcee>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   11dc6:	2f02      	cmp	r7, #2
   11dc8:	d1e8      	bne.n	11d9c <isr_rx_conn_pkt_ctrl+0xcf4>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   11dca:	f1ac 0714 	sub.w	r7, ip, #20
   11dce:	2f01      	cmp	r7, #1
   11dd0:	d8e4      	bhi.n	11d9c <isr_rx_conn_pkt_ctrl+0xcf4>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   11dd2:	89a7      	ldrh	r7, [r4, #12]
   11dd4:	2f1a      	cmp	r7, #26
   11dd6:	d938      	bls.n	11e4a <isr_rx_conn_pkt_ctrl+0xda2>
			eff_tx_octets = min(lr->max_rx_octets,
   11dd8:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
   11ddc:	4567      	cmp	r7, ip
   11dde:	bf28      	it	cs
   11de0:	4667      	movcs	r7, ip
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   11de2:	f8b4 a010 	ldrh.w	sl, [r4, #16]
   11de6:	f1ba 0f1a 	cmp.w	sl, #26
   11dea:	d930      	bls.n	11e4e <isr_rx_conn_pkt_ctrl+0xda6>
			eff_rx_octets = min(lr->max_tx_octets,
   11dec:	f1ba 0ffb 	cmp.w	sl, #251	; 0xfb
   11df0:	bf28      	it	cs
   11df2:	f04f 0afb 	movcs.w	sl, #251	; 0xfb
		if (lr->max_rx_time >=
   11df6:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   11dfa:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   11dfe:	d328      	bcc.n	11e52 <isr_rx_conn_pkt_ctrl+0xdaa>
			eff_tx_time = min(lr->max_rx_time,
   11e00:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
   11e04:	45e0      	cmp	r8, ip
   11e06:	bf28      	it	cs
   11e08:	46e0      	movcs	r8, ip
		if (lr->max_tx_time >=
   11e0a:	f8b4 9012 	ldrh.w	r9, [r4, #18]
   11e0e:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
   11e12:	d320      	bcc.n	11e56 <isr_rx_conn_pkt_ctrl+0xdae>
			eff_rx_time = min(lr->max_tx_time,
   11e14:	f244 2c90 	movw	ip, #17040	; 0x4290
   11e18:	45e1      	cmp	r9, ip
   11e1a:	bf28      	it	cs
   11e1c:	46e1      	movcs	r9, ip
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   11e1e:	4552      	cmp	r2, sl
   11e20:	d054      	beq.n	11ecc <isr_rx_conn_pkt_ctrl+0xe24>
			free_count_rx = packet_rx_acquired_count_get() +
   11e22:	f7fb f975 	bl	d110 <packet_rx_acquired_count_get>
   11e26:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
   11e28:	f8db 0d18 	ldr.w	r0, [fp, #3352]	; 0xd18
   11e2c:	f7f8 fb08 	bl	a440 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
   11e30:	4420      	add	r0, r4
   11e32:	b280      	uxth	r0, r0
			LL_ASSERT(free_count_rx <= 0xFF);
   11e34:	28ff      	cmp	r0, #255	; 0xff
   11e36:	d910      	bls.n	11e5a <isr_rx_conn_pkt_ctrl+0xdb2>
   11e38:	4b67      	ldr	r3, [pc, #412]	; (11fd8 <isr_rx_conn_pkt_ctrl+0xf30>)
   11e3a:	9301      	str	r3, [sp, #4]
   11e3c:	9300      	str	r3, [sp, #0]
   11e3e:	4a69      	ldr	r2, [pc, #420]	; (11fe4 <isr_rx_conn_pkt_ctrl+0xf3c>)
   11e40:	4b69      	ldr	r3, [pc, #420]	; (11fe8 <isr_rx_conn_pkt_ctrl+0xf40>)
   11e42:	496a      	ldr	r1, [pc, #424]	; (11fec <isr_rx_conn_pkt_ctrl+0xf44>)
   11e44:	486b      	ldr	r0, [pc, #428]	; (11ff4 <isr_rx_conn_pkt_ctrl+0xf4c>)
   11e46:	f7ff ba72 	b.w	1132e <isr_rx_conn_pkt_ctrl+0x286>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   11e4a:	460f      	mov	r7, r1
   11e4c:	e7c9      	b.n	11de2 <isr_rx_conn_pkt_ctrl+0xd3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   11e4e:	4692      	mov	sl, r2
   11e50:	e7d1      	b.n	11df6 <isr_rx_conn_pkt_ctrl+0xd4e>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   11e52:	46f0      	mov	r8, lr
   11e54:	e7d9      	b.n	11e0a <isr_rx_conn_pkt_ctrl+0xd62>
	eff_rx_time = _radio.conn_curr->max_rx_time;
   11e56:	4681      	mov	r9, r0
   11e58:	e7e1      	b.n	11e1e <isr_rx_conn_pkt_ctrl+0xd76>
			if (_radio.packet_rx_data_count == free_count_rx) {
   11e5a:	f89b 3d22 	ldrb.w	r3, [fp, #3362]	; 0xd22
   11e5e:	4283      	cmp	r3, r0
   11e60:	f040 8233 	bne.w	122ca <isr_rx_conn_pkt_ctrl+0x1222>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   11e64:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
					(_radio.conn_curr->llcp_length.req - 1);
   11e68:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   11e6c:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
   11e6e:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   11e70:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   11e74:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
   11e78:	f8a3 a0ec 	strh.w	sl, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
   11e7c:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
   11e80:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   11e84:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   11e88:	f8a3 90f0 	strh.w	r9, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   11e8c:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
   11e90:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   11e94:	2303      	movs	r3, #3
   11e96:	f88b 3014 	strb.w	r3, [fp, #20]
	if (node_tx) {
   11e9a:	2e00      	cmp	r6, #0
   11e9c:	f43f a9db 	beq.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ea0:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
   11ea2:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
   11ea6:	f8a6 a008 	strh.w	sl, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11eaa:	f043 0303 	orr.w	r3, r3, #3
   11eae:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11eb0:	2309      	movs	r3, #9
   11eb2:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11eb4:	2315      	movs	r3, #21
   11eb6:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
   11eb8:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
   11eba:	f8a6 900a 	strh.w	r9, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
   11ebe:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11ec2:	4631      	mov	r1, r6
	ctrl_tx_enqueue(conn, node_tx);
   11ec4:	f7fd fcc2 	bl	f84c <ctrl_tx_enqueue>
   11ec8:	f7ff b9c5 	b.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
			_radio.conn_curr->llcp_length.ack =
   11ecc:	f89d 200c 	ldrb.w	r2, [sp, #12]
   11ed0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   11ed4:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   11ed8:	f04f 0c00 	mov.w	ip, #0
			_radio.conn_curr->pause_tx = 0;
   11edc:	f36c 02c3 	bfi	r2, ip, #3, #1
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   11ee0:	42b9      	cmp	r1, r7
			_radio.conn_curr->procedure_expire = 0;
   11ee2:	f8a3 c044 	strh.w	ip, [r3, #68]	; 0x44
			_radio.conn_curr->pause_tx = 0;
   11ee6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
   11eea:	d103      	bne.n	11ef4 <isr_rx_conn_pkt_ctrl+0xe4c>
   11eec:	45c6      	cmp	lr, r8
   11eee:	d101      	bne.n	11ef4 <isr_rx_conn_pkt_ctrl+0xe4c>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
   11ef0:	4548      	cmp	r0, r9
   11ef2:	d0d2      	beq.n	11e9a <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   11ef4:	85df      	strh	r7, [r3, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   11ef6:	f8a3 9036 	strh.w	r9, [r3, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   11efa:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
			*rx_enqueue = 1;
   11efe:	2301      	movs	r3, #1
			lr->max_rx_octets = eff_rx_octets;
   11f00:	f8a4 a00c 	strh.w	sl, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
   11f04:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
   11f06:	f8a4 900e 	strh.w	r9, [r4, #14]
			lr->max_tx_time = eff_tx_time;
   11f0a:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
   11f0e:	702b      	strb	r3, [r5, #0]
   11f10:	e7c3      	b.n	11e9a <isr_rx_conn_pkt_ctrl+0xdf2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
   11f12:	7a41      	ldrb	r1, [r0, #9]
   11f14:	2016      	movs	r0, #22
   11f16:	f7fb f8b3 	bl	d080 <pdu_len_cmp>
   11f1a:	2800      	cmp	r0, #0
   11f1c:	f000 81ba 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		if (_radio.role == ROLE_MASTER) {
   11f20:	4835      	ldr	r0, [pc, #212]	; (11ff8 <isr_rx_conn_pkt_ctrl+0xf50>)
   11f22:	7cc3      	ldrb	r3, [r0, #19]
   11f24:	2b04      	cmp	r3, #4
   11f26:	d169      	bne.n	11ffc <isr_rx_conn_pkt_ctrl+0xf54>
			if ((_radio.conn_curr->llcp_phy.ack !=
   11f28:	f8d0 0cfc 	ldr.w	r0, [r0, #3324]	; 0xcfc
   11f2c:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   11f30:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   11f34:	428b      	cmp	r3, r1
   11f36:	d00a      	beq.n	11f4e <isr_rx_conn_pkt_ctrl+0xea6>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   11f38:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
   11f3c:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
   11f40:	3a01      	subs	r2, #1
   11f42:	2a02      	cmp	r2, #2
   11f44:	d803      	bhi.n	11f4e <isr_rx_conn_pkt_ctrl+0xea6>
				nack = reject_ext_ind_send(_radio.conn_curr,
   11f46:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
   11f48:	2116      	movs	r1, #22
   11f4a:	f7ff bb99 	b.w	11680 <isr_rx_conn_pkt_ctrl+0x5d8>
			} else if (((_radio.conn_curr->llcp_req !=
   11f4e:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
   11f52:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   11f56:	4295      	cmp	r5, r2
   11f58:	d003      	beq.n	11f62 <isr_rx_conn_pkt_ctrl+0xeba>
				     _radio.conn_curr->llcp_ack) &&
   11f5a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   11f5e:	2a03      	cmp	r2, #3
   11f60:	d105      	bne.n	11f6e <isr_rx_conn_pkt_ctrl+0xec6>
				     LLCP_ENCRYPTION)) ||
   11f62:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
   11f66:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   11f6a:	4295      	cmp	r5, r2
   11f6c:	d001      	beq.n	11f72 <isr_rx_conn_pkt_ctrl+0xeca>
				nack = reject_ext_ind_send(_radio.conn_curr,
   11f6e:	222a      	movs	r2, #42	; 0x2a
   11f70:	e7ea      	b.n	11f48 <isr_rx_conn_pkt_ctrl+0xea0>
				_radio.conn_curr->llcp_phy.state =
   11f72:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   11f76:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
   11f78:	f042 0203 	orr.w	r2, r2, #3
   11f7c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   11f80:	d116      	bne.n	11fb0 <isr_rx_conn_pkt_ctrl+0xf08>
					_radio.conn_curr->llcp_phy.ack--;
   11f82:	3b01      	subs	r3, #1
   11f84:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   11f88:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
   11f8c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
   11f90:	f36f 0341 	bfc	r3, #1, #1
   11f94:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   11f98:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   11f9c:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
   11fa0:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
   11fa4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   11fa8:	f362 1347 	bfi	r3, r2, #5, #3
   11fac:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   11fb0:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   11fb4:	7b62      	ldrb	r2, [r4, #13]
   11fb6:	f3c3 0182 	ubfx	r1, r3, #2, #3
   11fba:	400a      	ands	r2, r1
   11fbc:	f362 0384 	bfi	r3, r2, #2, #3
   11fc0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   11fc4:	7b22      	ldrb	r2, [r4, #12]
   11fc6:	b2db      	uxtb	r3, r3
   11fc8:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   11fcc:	f362 1347 	bfi	r3, r2, #5, #3
   11fd0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
   11fd4:	f7ff b93f 	b.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
   11fd8:	0001868d 	.word	0x0001868d
   11fdc:	0001b055 	.word	0x0001b055
   11fe0:	200018dc 	.word	0x200018dc
   11fe4:	00019a84 	.word	0x00019a84
   11fe8:	0001b03c 	.word	0x0001b03c
   11fec:	00019a8b 	.word	0x00019a8b
   11ff0:	0001b95a 	.word	0x0001b95a
   11ff4:	0001b4c1 	.word	0x0001b4c1
   11ff8:	20000b98 	.word	0x20000b98
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
   11ffc:	f8d0 5cfc 	ldr.w	r5, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12000:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   12004:	f7f8 f9ed 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
   12008:	4601      	mov	r1, r0
   1200a:	2800      	cmp	r0, #0
   1200c:	f43f aa5f 	beq.w	114ce <isr_rx_conn_pkt_ctrl+0x426>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   12010:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   12014:	2202      	movs	r2, #2
   12016:	f362 0301 	bfi	r3, r2, #0, #2
   1201a:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
   1201e:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   12022:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   12026:	4293      	cmp	r3, r2
   12028:	d11a      	bne.n	12060 <isr_rx_conn_pkt_ctrl+0xfb8>
		conn->llcp_phy.ack--;
   1202a:	3b01      	subs	r3, #1
   1202c:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
   12030:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
   12034:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
   12038:	f36f 0341 	bfc	r3, #1, #1
   1203c:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
   12040:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   12044:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
   12048:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
   1204c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   12050:	f362 1347 	bfi	r3, r2, #5, #3
   12054:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
   12058:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
   1205c:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
   12060:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   12064:	7b62      	ldrb	r2, [r4, #13]
   12066:	f3c3 0082 	ubfx	r0, r3, #2, #3
   1206a:	4002      	ands	r2, r0
   1206c:	f362 0384 	bfi	r3, r2, #2, #3
   12070:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
   12074:	7b22      	ldrb	r2, [r4, #12]
   12076:	b2db      	uxtb	r3, r3
   12078:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1207c:	f362 1347 	bfi	r3, r2, #5, #3
   12080:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12084:	790b      	ldrb	r3, [r1, #4]
   12086:	f043 0303 	orr.w	r3, r3, #3
   1208a:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1208c:	2303      	movs	r3, #3
   1208e:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   12090:	2317      	movs	r3, #23
   12092:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   12094:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   12098:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1209c:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   1209e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   120a2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   120a6:	724b      	strb	r3, [r1, #9]
   120a8:	f7ff ba23 	b.w	114f2 <isr_rx_conn_pkt_ctrl+0x44a>
		if (_radio.conn_curr->role ||
   120ac:	4e90      	ldr	r6, [pc, #576]	; (122f0 <isr_rx_conn_pkt_ctrl+0x1248>)
   120ae:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   120b2:	f995 301d 	ldrsb.w	r3, [r5, #29]
   120b6:	2b00      	cmp	r3, #0
   120b8:	f2c0 80ec 	blt.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
   120bc:	7a41      	ldrb	r1, [r0, #9]
   120be:	2017      	movs	r0, #23
   120c0:	f7fa ffde 	bl	d080 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   120c4:	2800      	cmp	r0, #0
   120c6:	f000 80e5 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		if ((_radio.role == ROLE_MASTER) &&
   120ca:	7cf3      	ldrb	r3, [r6, #19]
   120cc:	2b04      	cmp	r3, #4
   120ce:	f47f a8c2 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
   120d2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
   120d6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
   120da:	429a      	cmp	r2, r3
   120dc:	f43f a8bb 	beq.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		    (_radio.conn_curr->llcp_phy.state ==
   120e0:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
   120e4:	f003 0203 	and.w	r2, r3, #3
   120e8:	2a02      	cmp	r2, #2
   120ea:	f47f a8b4 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   120ee:	f043 0303 	orr.w	r3, r3, #3
   120f2:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   120f6:	7b62      	ldrb	r2, [r4, #13]
   120f8:	f3c3 0182 	ubfx	r1, r3, #2, #3
   120fc:	400a      	ands	r2, r1
   120fe:	f362 0384 	bfi	r3, r2, #2, #3
   12102:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   12106:	7b22      	ldrb	r2, [r4, #12]
   12108:	b2db      	uxtb	r3, r3
   1210a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1210e:	f362 1347 	bfi	r3, r2, #5, #3
   12112:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
   12116:	f7ff b851 	b.w	111bc <isr_rx_conn_pkt_ctrl+0x114>
		if (!_radio.conn_curr->role ||
   1211a:	4b75      	ldr	r3, [pc, #468]	; (122f0 <isr_rx_conn_pkt_ctrl+0x1248>)
   1211c:	f8d3 6cfc 	ldr.w	r6, [r3, #3324]	; 0xcfc
   12120:	f996 301d 	ldrsb.w	r3, [r6, #29]
   12124:	2b00      	cmp	r3, #0
   12126:	f280 80b5 	bge.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
   1212a:	7a41      	ldrb	r1, [r0, #9]
   1212c:	2018      	movs	r0, #24
   1212e:	f7fa ffa7 	bl	d080 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
   12132:	2800      	cmp	r0, #0
   12134:	f000 80ae 	beq.w	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   12138:	7b27      	ldrb	r7, [r4, #12]
   1213a:	7b62      	ldrb	r2, [r4, #13]
   1213c:	ea47 0002 	orr.w	r0, r7, r2
   12140:	f010 0007 	ands.w	r0, r0, #7
   12144:	d125      	bne.n	12192 <isr_rx_conn_pkt_ctrl+0x10ea>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   12146:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
   1214a:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   1214e:	4293      	cmp	r3, r2
   12150:	f43f a881 	beq.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   12154:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   12158:	f003 0303 	and.w	r3, r3, #3
   1215c:	2b02      	cmp	r3, #2
   1215e:	f47f a87a 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		if (!conn->llcp_phy.cmd) {
   12162:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   12166:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
   1216a:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
   1216c:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   12170:	f57f a871 	bpl.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12174:	230c      	movs	r3, #12
		upd->status = 0;
   12176:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12178:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
   1217a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   1217e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12182:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
   12184:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
   12188:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1218c:	7363      	strb	r3, [r4, #13]
   1218e:	f7ff ba62 	b.w	11656 <isr_rx_conn_pkt_ctrl+0x5ae>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   12192:	89e0      	ldrh	r0, [r4, #14]
   12194:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   12196:	1ac3      	subs	r3, r0, r3
   12198:	041b      	lsls	r3, r3, #16
   1219a:	f100 80a4 	bmi.w	122e6 <isr_rx_conn_pkt_ctrl+0x123e>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1219e:	f896 1074 	ldrb.w	r1, [r6, #116]	; 0x74
   121a2:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
   121a6:	428b      	cmp	r3, r1
   121a8:	d005      	beq.n	121b6 <isr_rx_conn_pkt_ctrl+0x110e>
   121aa:	4b52      	ldr	r3, [pc, #328]	; (122f4 <isr_rx_conn_pkt_ctrl+0x124c>)
   121ac:	9301      	str	r3, [sp, #4]
   121ae:	9300      	str	r3, [sp, #0]
   121b0:	4b51      	ldr	r3, [pc, #324]	; (122f8 <isr_rx_conn_pkt_ctrl+0x1250>)
   121b2:	f7fe bfc0 	b.w	11136 <isr_rx_conn_pkt_ctrl+0x8e>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   121b6:	f896 40f4 	ldrb.w	r4, [r6, #244]	; 0xf4
   121ba:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
   121be:	42a3      	cmp	r3, r4
   121c0:	d014      	beq.n	121ec <isr_rx_conn_pkt_ctrl+0x1144>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   121c2:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   121c6:	f003 0303 	and.w	r3, r3, #3
   121ca:	2b02      	cmp	r3, #2
   121cc:	d10e      	bne.n	121ec <isr_rx_conn_pkt_ctrl+0x1144>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   121ce:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   121d2:	f886 40f5 	strb.w	r4, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   121d6:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   121da:	f3c3 0340 	ubfx	r3, r3, #1, #1
   121de:	f363 0441 	bfi	r4, r3, #1, #1
		conn->procedure_expire = 0;
   121e2:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   121e4:	f886 4078 	strb.w	r4, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
   121e8:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   121ec:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
   121f0:	f8a6 007a 	strh.w	r0, [r6, #122]	; 0x7a
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   121f4:	f002 0207 	and.w	r2, r2, #7
   121f8:	f362 0384 	bfi	r3, r2, #2, #3
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   121fc:	f367 1347 	bfi	r3, r7, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0;
   12200:	f36f 0300 	bfc	r3, #0, #1
   12204:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   12208:	2008      	movs	r0, #8
	conn->llcp_ack--;
   1220a:	3901      	subs	r1, #1
	if (conn->llcp.phy_upd_ind.tx) {
   1220c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   12210:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
	conn->llcp_ack--;
   12214:	f886 1075 	strb.w	r1, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   12218:	2b00      	cmp	r3, #0
   1221a:	f43f a81c 	beq.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1221e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   12222:	f362 0302 	bfi	r3, r2, #0, #3
   12226:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
   1222a:	f7ff b814 	b.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		if (_radio.conn_curr->role ||
   1222e:	4e30      	ldr	r6, [pc, #192]	; (122f0 <isr_rx_conn_pkt_ctrl+0x1248>)
   12230:	f8d6 5cfc 	ldr.w	r5, [r6, #3324]	; 0xcfc
   12234:	f995 301d 	ldrsb.w	r3, [r5, #29]
   12238:	2b00      	cmp	r3, #0
   1223a:	db2b      	blt.n	12294 <isr_rx_conn_pkt_ctrl+0x11ec>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
   1223c:	7a41      	ldrb	r1, [r0, #9]
   1223e:	2019      	movs	r0, #25
   12240:	f7fa ff1e 	bl	d080 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
   12244:	b330      	cbz	r0, 12294 <isr_rx_conn_pkt_ctrl+0x11ec>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   12246:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
   1224a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1224e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
   12252:	7b22      	ldrb	r2, [r4, #12]
   12254:	f003 0307 	and.w	r3, r3, #7
   12258:	4213      	tst	r3, r2
   1225a:	f43e affc 	beq.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
			if (conn->llcp_req != conn->llcp_ack) {
   1225e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12262:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12266:	429a      	cmp	r2, r3
   12268:	f47e aff5 	bne.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
			memcpy(&conn->llcp.chan_map.chm[0],
   1226c:	2205      	movs	r2, #5
   1226e:	f606 5102 	addw	r1, r6, #3330	; 0xd02
   12272:	f105 0079 	add.w	r0, r5, #121	; 0x79
   12276:	f7ee f9c7 	bl	608 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   1227a:	2301      	movs	r3, #1
   1227c:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   12280:	2302      	movs	r3, #2
   12282:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   12286:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1228a:	3b01      	subs	r3, #1
   1228c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
   12290:	f7fe bfe1 	b.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
		nack = unknown_rsp_send(_radio.conn_curr,
   12294:	4816      	ldr	r0, [pc, #88]	; (122f0 <isr_rx_conn_pkt_ctrl+0x1248>)
   12296:	f8d0 4cfc 	ldr.w	r4, [r0, #3324]	; 0xcfc
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1229a:	f600 5044 	addw	r0, r0, #3396	; 0xd44
   1229e:	f7f8 f8a0 	bl	a3e2 <mem_acquire>
	if (!node_tx) {
   122a2:	4601      	mov	r1, r0
   122a4:	2800      	cmp	r0, #0
   122a6:	f43f a912 	beq.w	114ce <isr_rx_conn_pkt_ctrl+0x426>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122aa:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
   122ac:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   122ae:	f043 0303 	orr.w	r3, r3, #3
   122b2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   122b4:	2302      	movs	r3, #2
   122b6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   122b8:	2307      	movs	r3, #7
   122ba:	71c3      	strb	r3, [r0, #7]
   122bc:	f7ff b943 	b.w	11546 <isr_rx_conn_pkt_ctrl+0x49e>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   122c0:	2328      	movs	r3, #40	; 0x28
   122c2:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
   122c6:	f7fe bfc6 	b.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
	if (node_tx) {
   122ca:	2e00      	cmp	r6, #0
   122cc:	f43f a8ff 	beq.w	114ce <isr_rx_conn_pkt_ctrl+0x426>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   122d0:	490a      	ldr	r1, [pc, #40]	; (122fc <isr_rx_conn_pkt_ctrl+0x1254>)
   122d2:	4630      	mov	r0, r6
   122d4:	f7f8 f89f 	bl	a416 <mem_release>
   122d8:	f7ff b8f9 	b.w	114ce <isr_rx_conn_pkt_ctrl+0x426>
	eff_tx_time = _radio.conn_curr->max_tx_time;
   122dc:	46f0      	mov	r8, lr
	eff_rx_time = _radio.conn_curr->max_rx_time;
   122de:	4681      	mov	r9, r0
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   122e0:	460f      	mov	r7, r1
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   122e2:	4692      	mov	sl, r2
   122e4:	e5d9      	b.n	11e9a <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   122e6:	2328      	movs	r3, #40	; 0x28
   122e8:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
   122ec:	f7fe bfb3 	b.w	11256 <isr_rx_conn_pkt_ctrl+0x1ae>
   122f0:	20000b98 	.word	0x20000b98
   122f4:	0001868d 	.word	0x0001868d
   122f8:	0001b3bf 	.word	0x0001b3bf
   122fc:	200018dc 	.word	0x200018dc

00012300 <isr>:
{
   12300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12304:	b093      	sub	sp, #76	; 0x4c
	trx_done = radio_is_done();
   12306:	f004 f881 	bl	1640c <radio_is_done>
   1230a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
   1230c:	b366      	cbz	r6, 12368 <isr+0x68>
		crc_ok = radio_crc_is_valid();
   1230e:	f004 f89d 	bl	1644c <radio_crc_is_valid>
   12312:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
   12314:	f004 f91e 	bl	16554 <radio_filter_has_match>
   12318:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
   1231c:	f004 f924 	bl	16568 <radio_filter_match_get>
   12320:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_ok = radio_ar_has_match();
   12324:	f004 fb12 	bl	1694c <radio_ar_has_match>
   12328:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
   1232c:	f004 fafc 	bl	16928 <radio_ar_match_get>
   12330:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
   12334:	f004 f8d8 	bl	164e8 <radio_rssi_is_ready>
   12338:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
   1233a:	4cb5      	ldr	r4, [pc, #724]	; (12610 <isr+0x310>)
	radio_status_reset();
   1233c:	f004 f850 	bl	163e0 <radio_status_reset>
	radio_tmr_status_reset();
   12340:	f004 f924 	bl	1658c <radio_tmr_status_reset>
	radio_filter_status_reset();
   12344:	f004 f8fe 	bl	16544 <radio_filter_status_reset>
	radio_ar_status_reset();
   12348:	f004 faf4 	bl	16934 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1234c:	f004 f8c4 	bl	164d8 <radio_rssi_status_reset>
	switch (_radio.state) {
   12350:	7d23      	ldrb	r3, [r4, #20]
   12352:	2b05      	cmp	r3, #5
   12354:	f201 852f 	bhi.w	13db6 <isr+0x1ab6>
   12358:	e8df f013 	tbh	[pc, r3, lsl #1]
   1235c:	00d0007e 	.word	0x00d0007e
   12360:	0ac7000e 	.word	0x0ac7000e
   12364:	0ac70ac7 	.word	0x0ac70ac7
		devmatch_id = irkmatch_id = 0xFF;
   12368:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
   1236c:	4635      	mov	r5, r6
   1236e:	46b2      	mov	sl, r6
   12370:	46b0      	mov	r8, r6
   12372:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
   12374:	46d9      	mov	r9, fp
   12376:	e7e0      	b.n	1233a <isr+0x3a>
	_radio.state = STATE_RX;
   12378:	2301      	movs	r3, #1
   1237a:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get() + 600
   1237c:	f004 f9f8 	bl	16770 <radio_tmr_tifs_base_get>
   12380:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
   12382:	2096      	movs	r0, #150	; 0x96
   12384:	f004 f912 	bl	165ac <radio_tmr_tifs_set>
	switch (_radio.role) {
   12388:	7ce3      	ldrb	r3, [r4, #19]
   1238a:	3b01      	subs	r3, #1
   1238c:	2b03      	cmp	r3, #3
   1238e:	f200 80ad 	bhi.w	124ec <isr+0x1ec>
   12392:	e8df f003 	tbb	[pc, r3]
   12396:	3302      	.short	0x3302
   12398:	6464      	.short	0x6464
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1239a:	2300      	movs	r3, #0
   1239c:	461a      	mov	r2, r3
   1239e:	4619      	mov	r1, r3
   123a0:	4618      	mov	r0, r3
   123a2:	f004 f871 	bl	16488 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
   123a6:	f004 f85f 	bl	16468 <radio_pkt_scratch_get>
   123aa:	f003 ffd3 	bl	16354 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   123ae:	f004 f823 	bl	163f8 <radio_is_ready>
   123b2:	b138      	cbz	r0, 123c4 <isr+0xc4>
		LL_ASSERT(!radio_is_ready());
   123b4:	4b97      	ldr	r3, [pc, #604]	; (12614 <isr+0x314>)
   123b6:	9301      	str	r3, [sp, #4]
   123b8:	9300      	str	r3, [sp, #0]
   123ba:	4b97      	ldr	r3, [pc, #604]	; (12618 <isr+0x318>)
	LL_ASSERT(!radio_is_ready());
   123bc:	4a97      	ldr	r2, [pc, #604]	; (1261c <isr+0x31c>)
   123be:	4998      	ldr	r1, [pc, #608]	; (12620 <isr+0x320>)
   123c0:	4898      	ldr	r0, [pc, #608]	; (12624 <isr+0x324>)
   123c2:	e34d      	b.n	12a60 <isr+0x760>
		if (ctrl_rl_enabled()) {
   123c4:	f003 fa4a 	bl	1585c <ctrl_rl_enabled>
   123c8:	b138      	cbz	r0, 123da <isr+0xda>
			u8_t count, *irks = ctrl_irks_get(&count);
   123ca:	a810      	add	r0, sp, #64	; 0x40
   123cc:	f002 ffa2 	bl	15314 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   123d0:	4601      	mov	r1, r0
   123d2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   123d6:	f004 fa75 	bl	168c4 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   123da:	2100      	movs	r1, #0
   123dc:	4608      	mov	r0, r1
   123de:	f003 ffd2 	bl	16386 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   123e2:	f205 351b 	addw	r5, r5, #795	; 0x31b
		hcto -= radio_tx_chain_delay_get(0, 0);
   123e6:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   123e8:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   123ea:	4608      	mov	r0, r1
   123ec:	f003 ffc7 	bl	1637e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   123f0:	1a28      	subs	r0, r5, r0
   123f2:	f004 f953 	bl	1669c <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
   123f6:	f004 f9a3 	bl	16740 <radio_tmr_end_capture>
   123fa:	e02d      	b.n	12458 <isr+0x158>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   123fc:	2300      	movs	r3, #0
   123fe:	461a      	mov	r2, r3
   12400:	4619      	mov	r1, r3
   12402:	4618      	mov	r0, r3
   12404:	f004 f840 	bl	16488 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   12408:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   1240c:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		radio_pkt_rx_set(_radio.packet_rx
   12410:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   12414:	3008      	adds	r0, #8
   12416:	f003 ff9d 	bl	16354 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
   1241a:	f003 ffed 	bl	163f8 <radio_is_ready>
   1241e:	2800      	cmp	r0, #0
   12420:	d1c8      	bne.n	123b4 <isr+0xb4>
		if (ctrl_rl_enabled()) {
   12422:	f003 fa1b 	bl	1585c <ctrl_rl_enabled>
   12426:	b138      	cbz	r0, 12438 <isr+0x138>
			u8_t count, *irks = ctrl_irks_get(&count);
   12428:	a810      	add	r0, sp, #64	; 0x40
   1242a:	f002 ff73 	bl	15314 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   1242e:	4601      	mov	r1, r0
   12430:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   12434:	f004 fa46 	bl	168c4 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
   12438:	2100      	movs	r1, #0
   1243a:	4608      	mov	r0, r1
   1243c:	f003 ffa3 	bl	16386 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
   12440:	f205 351b 	addw	r5, r5, #795	; 0x31b
		hcto -= radio_tx_chain_delay_get(0, 0);
   12444:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
   12446:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
   12448:	4608      	mov	r0, r1
   1244a:	f003 ff98 	bl	1637e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   1244e:	1a28      	subs	r0, r5, r0
   12450:	f004 f924 	bl	1669c <radio_tmr_hcto_configure>
		radio_rssi_measure();
   12454:	f004 f830 	bl	164b8 <radio_rssi_measure>
}
   12458:	b013      	add	sp, #76	; 0x4c
   1245a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   1245e:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
					     _radio.conn_curr->phy_flags);
   12462:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
   12466:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   1246a:	2100      	movs	r1, #0
   1246c:	09d3      	lsrs	r3, r2, #7
   1246e:	f000 0007 	and.w	r0, r0, #7
   12472:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   12476:	f004 f807 	bl	16488 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1247a:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   1247e:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		rx_packet_set(_radio.conn_curr,	(void *)
   12482:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   12486:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
   1248a:	3108      	adds	r1, #8
   1248c:	f7fb f9b4 	bl	d7f8 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
   12490:	f003 ffb2 	bl	163f8 <radio_is_ready>
   12494:	2800      	cmp	r0, #0
   12496:	d18d      	bne.n	123b4 <isr+0xb4>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   12498:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   1249c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   124a0:	2101      	movs	r1, #1
   124a2:	f000 0007 	and.w	r0, r0, #7
   124a6:	f003 ff6e 	bl	16386 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   124aa:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   124ae:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
   124b2:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get() + 600
   124b6:	f205 25f3 	addw	r5, r5, #755	; 0x2f3
	switch (phy) {
   124ba:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
   124bc:	4405      	add	r5, r0
	switch (phy) {
   124be:	d013      	beq.n	124e8 <isr+0x1e8>
		return 40;
   124c0:	2b04      	cmp	r3, #4
   124c2:	bf0c      	ite	eq
   124c4:	f44f 70bc 	moveq.w	r0, #376	; 0x178
   124c8:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
   124ca:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
   124cc:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
   124d0:	09c1      	lsrs	r1, r0, #7
   124d2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   124d6:	f003 ff52 	bl	1637e <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
   124da:	1a28      	subs	r0, r5, r0
   124dc:	f004 f8de 	bl	1669c <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
   124e0:	2001      	movs	r0, #1
   124e2:	f7fc fb11 	bl	eb08 <packet_tx_enqueue>
   124e6:	e7b7      	b.n	12458 <isr+0x158>
		return 24;
   124e8:	2018      	movs	r0, #24
   124ea:	e7ee      	b.n	124ca <isr+0x1ca>
		LL_ASSERT(0);
   124ec:	4b49      	ldr	r3, [pc, #292]	; (12614 <isr+0x314>)
   124ee:	9301      	str	r3, [sp, #4]
   124f0:	9300      	str	r3, [sp, #0]
   124f2:	4b49      	ldr	r3, [pc, #292]	; (12618 <isr+0x318>)
		LL_ASSERT(0);
   124f4:	4a49      	ldr	r2, [pc, #292]	; (1261c <isr+0x31c>)
   124f6:	494a      	ldr	r1, [pc, #296]	; (12620 <isr+0x320>)
   124f8:	484b      	ldr	r0, [pc, #300]	; (12628 <isr+0x328>)
   124fa:	e2b1      	b.n	12a60 <isr+0x760>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   124fc:	b926      	cbnz	r6, 12508 <isr+0x208>
		_radio.state = STATE_CLOSE;
   124fe:	2303      	movs	r3, #3
   12500:	7523      	strb	r3, [r4, #20]
		radio_disable();
   12502:	f003 ff5b 	bl	163bc <radio_disable>
   12506:	e7a7      	b.n	12458 <isr+0x158>
	switch (_radio.role) {
   12508:	7ce3      	ldrb	r3, [r4, #19]
   1250a:	3b01      	subs	r3, #1
   1250c:	2b03      	cmp	r3, #3
   1250e:	f201 81e6 	bhi.w	138de <isr+0x15de>
   12512:	e8df f013 	tbh	[pc, r3, lsl #1]
   12516:	0004      	.short	0x0004
   12518:	06a302ad 	.word	0x06a302ad
   1251c:	06a3      	.short	0x06a3
		if (crc_ok) {
   1251e:	2f00      	cmp	r7, #0
   12520:	d0ed      	beq.n	124fe <isr+0x1fe>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   12522:	f1ba 0f00 	cmp.w	sl, #0
   12526:	d038      	beq.n	1259a <isr+0x29a>
   12528:	4658      	mov	r0, fp
   1252a:	f002 ff51 	bl	153d0 <ctrl_rl_irk_idx>
   1252e:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
	pdu_adv = (void *)radio_pkt_scratch_get();
   12532:	f003 ff99 	bl	16468 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   12536:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
	pdu_adv = (void *)radio_pkt_scratch_get();
   1253a:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   1253c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12540:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
   12542:	332c      	adds	r3, #44	; 0x2c
   12544:	930a      	str	r3, [sp, #40]	; 0x28
   12546:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   12548:	f000 030f 	and.w	r3, r0, #15
   1254c:	2b03      	cmp	r3, #3
   1254e:	d10a      	bne.n	12566 <isr+0x266>
   12550:	7873      	ldrb	r3, [r6, #1]
   12552:	2b0c      	cmp	r3, #12
   12554:	d107      	bne.n	12566 <isr+0x266>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   12556:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1255a:	07df      	lsls	r7, r3, #31
   1255c:	d51f      	bpl.n	1259e <isr+0x29e>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   1255e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   12562:	07d8      	lsls	r0, r3, #31
   12564:	d44a      	bmi.n	125fc <isr+0x2fc>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   12566:	7830      	ldrb	r0, [r6, #0]
   12568:	f000 030f 	and.w	r3, r0, #15
   1256c:	2b05      	cmp	r3, #5
   1256e:	d1c6      	bne.n	124fe <isr+0x1fe>
   12570:	7873      	ldrb	r3, [r6, #1]
   12572:	2b22      	cmp	r3, #34	; 0x22
   12574:	d1c3      	bne.n	124fe <isr+0x1fe>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   12576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12578:	5ce3      	ldrb	r3, [r4, r3]
   1257a:	f003 030f 	and.w	r3, r3, #15
   1257e:	2b01      	cmp	r3, #1
   12580:	f040 814f 	bne.w	12822 <isr+0x522>
					    ci->connect_ind.init_addr,
   12584:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
   12586:	aa10      	add	r2, sp, #64	; 0x40
   12588:	4639      	mov	r1, r7
   1258a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1258e:	f003 f909 	bl	157a4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   12592:	2800      	cmp	r0, #0
   12594:	d14c      	bne.n	12630 <isr+0x330>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   12596:	2000      	movs	r0, #0
   12598:	e05a      	b.n	12650 <isr+0x350>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   1259a:	20ff      	movs	r0, #255	; 0xff
   1259c:	e7c7      	b.n	1252e <isr+0x22e>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
   1259e:	aa10      	add	r2, sp, #64	; 0x40
   125a0:	1cb1      	adds	r1, r6, #2
   125a2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   125a6:	f003 f8fd 	bl	157a4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   125aa:	2800      	cmp	r0, #0
   125ac:	d0d7      	beq.n	1255e <isr+0x25e>
	return (adv->tx_addr == sr->rx_addr) &&
   125ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   125b0:	7832      	ldrb	r2, [r6, #0]
   125b2:	5ce3      	ldrb	r3, [r4, r3]
   125b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   125b8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   125bc:	d1d3      	bne.n	12566 <isr+0x266>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   125be:	2206      	movs	r2, #6
   125c0:	f106 0108 	add.w	r1, r6, #8
   125c4:	1ca8      	adds	r0, r5, #2
   125c6:	f7ee f80a 	bl	5de <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
   125ca:	2800      	cmp	r0, #0
   125cc:	d1cb      	bne.n	12566 <isr+0x266>
		_radio.state = STATE_CLOSE;
   125ce:	2303      	movs	r3, #3
   125d0:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
   125d2:	f003 ff63 	bl	1649c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
   125d6:	f894 0c14 	ldrb.w	r0, [r4, #3092]	; 0xc14
   125da:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   125de:	f600 2012 	addw	r0, r0, #2578	; 0xa12
   125e2:	4420      	add	r0, r4
   125e4:	f003 febc 	bl	16360 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   125e8:	f003 ff06 	bl	163f8 <radio_is_ready>
   125ec:	2800      	cmp	r0, #0
   125ee:	f43f af33 	beq.w	12458 <isr+0x158>
   125f2:	4b08      	ldr	r3, [pc, #32]	; (12614 <isr+0x314>)
   125f4:	9301      	str	r3, [sp, #4]
   125f6:	9300      	str	r3, [sp, #0]
   125f8:	4b0c      	ldr	r3, [pc, #48]	; (1262c <isr+0x32c>)
   125fa:	e6df      	b.n	123bc <isr+0xbc>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   125fc:	f1b8 0f00 	cmp.w	r8, #0
   12600:	d1d5      	bne.n	125ae <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   12602:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   12606:	f002 ff29 	bl	1545c <ctrl_irk_whitelisted>
   1260a:	2800      	cmp	r0, #0
   1260c:	d1cf      	bne.n	125ae <isr+0x2ae>
   1260e:	e7aa      	b.n	12566 <isr+0x266>
   12610:	20000b98 	.word	0x20000b98
   12614:	0001868d 	.word	0x0001868d
   12618:	0001afc9 	.word	0x0001afc9
   1261c:	00019a84 	.word	0x00019a84
   12620:	00019a8b 	.word	0x00019a8b
   12624:	0001b6a8 	.word	0x0001b6a8
   12628:	000197a5 	.word	0x000197a5
   1262c:	0001afdc 	.word	0x0001afdc
		       isr_adv_ci_adva_check(adv, ci) &&
   12630:	4631      	mov	r1, r6
   12632:	4628      	mov	r0, r5
   12634:	f7fb ff00 	bl	e438 <isr_adv_ci_adva_check>
					    rl_idx) &&
   12638:	2800      	cmp	r0, #0
   1263a:	d0ac      	beq.n	12596 <isr+0x296>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   1263c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (rl_idx != FILTER_IDX_NONE) {
   12640:	2bff      	cmp	r3, #255	; 0xff
   12642:	f000 80db 	beq.w	127fc <isr+0x4fc>
		return rl_idx == _radio.advertiser.rl_idx;
   12646:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1264a:	1ac1      	subs	r1, r0, r3
   1264c:	4248      	negs	r0, r1
   1264e:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   12650:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
   12654:	2800      	cmp	r0, #0
   12656:	f43f af52 	beq.w	124fe <isr+0x1fe>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   1265a:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   1265e:	b133      	cbz	r3, 1266e <isr+0x36e>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   12660:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
   12664:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   12668:	429a      	cmp	r2, r3
   1266a:	f47f af48 	bne.w	124fe <isr+0x1fe>
   1266e:	f8d4 3c18 	ldr.w	r3, [r4, #3096]	; 0xc18
   12672:	2b00      	cmp	r3, #0
   12674:	f43f af43 	beq.w	124fe <isr+0x1fe>
			node_rx = packet_rx_reserve_get(4);
   12678:	2004      	movs	r0, #4
   1267a:	f7fa fd5f 	bl	d13c <packet_rx_reserve_get>
		if (!node_rx) {
   1267e:	4607      	mov	r7, r0
   12680:	2800      	cmp	r0, #0
   12682:	f43f af3c 	beq.w	124fe <isr+0x1fe>
		_radio.state = STATE_STOP;
   12686:	f04f 0904 	mov.w	r9, #4
   1268a:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
   1268e:	f003 fe95 	bl	163bc <radio_disable>
		conn = _radio.advertiser.conn;
   12692:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12696:	f8d4 1cf0 	ldr.w	r1, [r4, #3312]	; 0xcf0
		_radio.advertiser.conn = NULL;
   1269a:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1269c:	f44f 72aa 	mov.w	r2, #340	; 0x154
   126a0:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
   126a2:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   126a6:	f7f7 fed4 	bl	a452 <mem_index_get>
		memcpy(&conn->access_addr[0],
   126aa:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   126ae:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
   126b0:	2203      	movs	r2, #3
   126b2:	f106 0112 	add.w	r1, r6, #18
   126b6:	f105 0014 	add.w	r0, r5, #20
   126ba:	f7ed ffa5 	bl	608 <memcpy>
		memcpy(&conn->data_chan_map[0],
   126be:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
   126c2:	464a      	mov	r2, r9
   126c4:	f106 010e 	add.w	r1, r6, #14
   126c8:	4650      	mov	r0, sl
   126ca:	f7ed ff9d 	bl	608 <memcpy>
		memcpy(&conn->data_chan_map[0],
   126ce:	2205      	movs	r2, #5
   126d0:	f106 011e 	add.w	r1, r6, #30
   126d4:	4640      	mov	r0, r8
   126d6:	f7ed ff97 	bl	608 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   126da:	2105      	movs	r1, #5
   126dc:	4640      	mov	r0, r8
   126de:	f7f8 f82b 	bl	a738 <util_ones_count_get>
		conn->data_chan_count =
   126e2:	7f6b      	ldrb	r3, [r5, #29]
   126e4:	f360 0305 	bfi	r3, r0, #0, #6
   126e8:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
   126ea:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   126ee:	f3c3 0304 	ubfx	r3, r3, #0, #5
   126f2:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
   126f4:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
   126f6:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
   126f8:	f240 48e2 	movw	r8, #1250	; 0x4e2
   126fc:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
   12700:	7ef2      	ldrb	r2, [r6, #27]
   12702:	7eb3      	ldrb	r3, [r6, #26]
   12704:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   12708:	4651      	mov	r1, sl
   1270a:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
   1270c:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   1270e:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   12712:	f7ed ff79 	bl	608 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   12716:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   12718:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
   1271a:	f242 7210 	movw	r2, #10000	; 0x2710
   1271e:	fb02 8303 	mla	r3, r2, r3, r8
   12722:	3b01      	subs	r3, #1
   12724:	fbb3 f3f8 	udiv	r3, r3, r8
   12728:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   1272a:	4b54      	ldr	r3, [pc, #336]	; (1287c <isr+0x57c>)
   1272c:	4443      	add	r3, r8
   1272e:	fbb3 f3f8 	udiv	r3, r3, r8
   12732:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   12736:	4b52      	ldr	r3, [pc, #328]	; (12880 <isr+0x580>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   12738:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1273a:	4443      	add	r3, r8
   1273c:	fbb3 f3f8 	udiv	r3, r3, r8
   12740:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   12742:	4282      	cmp	r2, r0
   12744:	4613      	mov	r3, r2
   12746:	bfc4      	itt	gt
   12748:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
   1274c:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1274e:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   12752:	bfc4      	itt	gt
   12754:	18d2      	addgt	r2, r2, r3
   12756:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
   12758:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1275a:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   1275e:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
   12760:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
   12762:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
   12764:	2300      	movs	r3, #0
   12766:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
   12768:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   1276a:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
   1276e:	930c      	str	r3, [sp, #48]	; 0x30
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12770:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   12774:	f3c2 12c0 	ubfx	r2, r2, #7, #1
   12778:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1277a:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1277e:	464a      	mov	r2, r9
   12780:	f107 001b 	add.w	r0, r7, #27
   12784:	f7ed ff40 	bl	608 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   12788:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1278c:	f107 030e 	add.w	r3, r7, #14
   12790:	28ff      	cmp	r0, #255	; 0xff
   12792:	930b      	str	r3, [sp, #44]	; 0x2c
   12794:	f106 0a02 	add.w	sl, r6, #2
   12798:	f107 0b14 	add.w	fp, r7, #20
   1279c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1279e:	d05f      	beq.n	12860 <isr+0x560>
			ll_rl_id_addr_get(rl_idx,
   127a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   127a2:	f107 010d 	add.w	r1, r7, #13
   127a6:	f002 ffbf 	bl	15728 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   127aa:	7b7b      	ldrb	r3, [r7, #13]
   127ac:	3302      	adds	r3, #2
   127ae:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   127b0:	464a      	mov	r2, r9
   127b2:	4651      	mov	r1, sl
   127b4:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   127b6:	f7ed ff27 	bl	608 <memcpy>
			pdu_adv->connect_ind.interval;
   127ba:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
   127bc:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
   127c0:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
   127c2:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
   127c6:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
   127c8:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
   127cc:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   127d0:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   127d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
   127d8:	8c28      	ldrh	r0, [r5, #32]
   127da:	f7fb ff41 	bl	e660 <rx_fc_lock>
		packet_rx_enqueue();
   127de:	f7fb fe4f 	bl	e480 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   127e2:	2003      	movs	r0, #3
   127e4:	f7fa fcaa 	bl	d13c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   127e8:	2800      	cmp	r0, #0
   127ea:	d155      	bne.n	12898 <isr+0x598>
   127ec:	4b25      	ldr	r3, [pc, #148]	; (12884 <isr+0x584>)
   127ee:	9301      	str	r3, [sp, #4]
   127f0:	9300      	str	r3, [sp, #0]
   127f2:	4b25      	ldr	r3, [pc, #148]	; (12888 <isr+0x588>)
			LL_ASSERT(node_rx);
   127f4:	4a25      	ldr	r2, [pc, #148]	; (1288c <isr+0x58c>)
   127f6:	4926      	ldr	r1, [pc, #152]	; (12890 <isr+0x590>)
   127f8:	4826      	ldr	r0, [pc, #152]	; (12894 <isr+0x594>)
   127fa:	e131      	b.n	12a60 <isr+0x760>
	return (adv->rx_addr == ci->tx_addr) &&
   127fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   127fe:	5ce2      	ldrb	r2, [r4, r3]
   12800:	7833      	ldrb	r3, [r6, #0]
   12802:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12806:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1280a:	f47f aec4 	bne.w	12596 <isr+0x296>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1280e:	2206      	movs	r2, #6
   12810:	4639      	mov	r1, r7
   12812:	f105 0008 	add.w	r0, r5, #8
   12816:	f7ed fee2 	bl	5de <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   1281a:	fab0 f080 	clz	r0, r0
   1281e:	0940      	lsrs	r0, r0, #5
   12820:	e716      	b.n	12650 <isr+0x350>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   12822:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   12826:	079a      	lsls	r2, r3, #30
   12828:	d50d      	bpl.n	12846 <isr+0x546>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   1282a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
   1282e:	079b      	lsls	r3, r3, #30
   12830:	f57f aeb1 	bpl.w	12596 <isr+0x296>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   12834:	f1b8 0f00 	cmp.w	r8, #0
   12838:	d10d      	bne.n	12856 <isr+0x556>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1283a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   1283e:	f002 fe0d 	bl	1545c <ctrl_irk_whitelisted>
   12842:	b940      	cbnz	r0, 12856 <isr+0x556>
   12844:	e6a7      	b.n	12596 <isr+0x296>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
   12846:	aa10      	add	r2, sp, #64	; 0x40
   12848:	1cb1      	adds	r1, r6, #2
   1284a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1284e:	f002 ffa9 	bl	157a4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   12852:	2800      	cmp	r0, #0
   12854:	d0e9      	beq.n	1282a <isr+0x52a>
	       isr_adv_ci_adva_check(adv, ci);
   12856:	4631      	mov	r1, r6
   12858:	4628      	mov	r0, r5
   1285a:	f7fb fded 	bl	e438 <isr_adv_ci_adva_check>
   1285e:	e6f7      	b.n	12650 <isr+0x350>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   12860:	4619      	mov	r1, r3
   12862:	464a      	mov	r2, r9
   12864:	4658      	mov	r0, fp
   12866:	f7ed fefb 	bl	660 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   1286a:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1286c:	980b      	ldr	r0, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   1286e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12872:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12874:	464a      	mov	r2, r9
   12876:	4651      	mov	r1, sl
   12878:	e79d      	b.n	127b6 <isr+0x4b6>
   1287a:	bf00      	nop
   1287c:	026259ff 	.word	0x026259ff
   12880:	01c9c37f 	.word	0x01c9c37f
   12884:	0001868d 	.word	0x0001868d
   12888:	0001afdc 	.word	0x0001afdc
   1288c:	00019a84 	.word	0x00019a84
   12890:	00019a8b 	.word	0x00019a8b
   12894:	0001baea 	.word	0x0001baea
			node_rx->hdr.handle = conn->handle;
   12898:	8c2b      	ldrh	r3, [r5, #32]
   1289a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   1289c:	230b      	movs	r3, #11
   1289e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
   128a0:	7833      	ldrb	r3, [r6, #0]
   128a2:	f013 0320 	ands.w	r3, r3, #32
   128a6:	d00e      	beq.n	128c6 <isr+0x5c6>
					((u16_t)conn->access_addr[1] << 8) |
   128a8:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
   128aa:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
   128ac:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
   128ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   128b2:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
   128b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   128b8:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   128ba:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   128bc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   128c0:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
   128c2:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   128c4:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   128c6:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   128c8:	f7fb fdda 	bl	e480 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
   128cc:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   128d0:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   128d4:	497e      	ldr	r1, [pc, #504]	; (12ad0 <isr+0x7d0>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
   128d6:	0952      	lsrs	r2, r2, #5
   128d8:	f362 0384 	bfi	r3, r2, #2, #3
   128dc:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   128e0:	f894 3d08 	ldrb.w	r3, [r4, #3336]	; 0xd08
			   gc_lookup_ppm[conn->slave.sca]) *
   128e4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   128e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   128ec:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   128ee:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   128f2:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   128f6:	4a77      	ldr	r2, [pc, #476]	; (12ad4 <isr+0x7d4>)
   128f8:	f203 233f 	addw	r3, r3, #575	; 0x23f
   128fc:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
   12900:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   12902:	ea4f 0358 	mov.w	r3, r8, lsr #1
   12906:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   12908:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
   1290a:	7d73      	ldrb	r3, [r6, #21]
   1290c:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
   12910:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
   12912:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   12916:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   12918:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
   1291a:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   1291c:	4638      	mov	r0, r7
   1291e:	f003 fd30 	bl	16382 <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   12922:	496d      	ldr	r1, [pc, #436]	; (12ad8 <isr+0x7d8>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
   12924:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   12926:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1292a:	a367      	add	r3, pc, #412	; (adr r3, 12ac8 <isr+0x7c8>)
   1292c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12930:	fba0 0101 	umull	r0, r1, r0, r1
   12934:	f7ed fc98 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   12938:	f8d4 3d6c 	ldr.w	r3, [r4, #3436]	; 0xd6c
   1293c:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
   1293e:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset =
   12940:	4293      	cmp	r3, r2
   12942:	bf38      	it	cc
   12944:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   12946:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset =
   1294a:	469a      	mov	sl, r3
		conn_interval_us -=
   1294c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
   1294e:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
   12950:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
   12952:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
   12954:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
   12958:	f003 ff04 	bl	16764 <radio_tmr_end_get>
   1295c:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
   1295e:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   12960:	4639      	mov	r1, r7
		conn_offset_us +=
   12962:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   12966:	4638      	mov	r0, r7
   12968:	f003 fd09 	bl	1637e <radio_tx_chain_delay_get>
   1296c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1296e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   12972:	4499      	add	r9, r3
   12974:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   12978:	eba9 030b 	sub.w	r3, r9, fp
   1297c:	930b      	str	r3, [sp, #44]	; 0x2c
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1297e:	f240 532d 	movw	r3, #1325	; 0x52d
   12982:	9300      	str	r3, [sp, #0]
   12984:	2205      	movs	r2, #5
   12986:	4b55      	ldr	r3, [pc, #340]	; (12adc <isr+0x7dc>)
   12988:	f8df b14c 	ldr.w	fp, [pc, #332]	; 12ad8 <isr+0x7d8>
   1298c:	4639      	mov	r1, r7
   1298e:	4638      	mov	r0, r7
   12990:	f7f8 fc4e 	bl	b230 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   12994:	f240 512e 	movw	r1, #1326	; 0x52e
   12998:	f7fb fe9a 	bl	e6d0 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1299c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1299e:	5ce3      	ldrb	r3, [r4, r3]
   129a0:	f003 030f 	and.w	r3, r3, #15
   129a4:	2b01      	cmp	r3, #1
   129a6:	d106      	bne.n	129b6 <isr+0x6b6>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   129a8:	9700      	str	r7, [sp, #0]
   129aa:	463b      	mov	r3, r7
   129ac:	2203      	movs	r2, #3
   129ae:	4639      	mov	r1, r7
   129b0:	4638      	mov	r0, r7
   129b2:	f7f8 fc3d 	bl	b230 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   129b6:	fba8 890b 	umull	r8, r9, r8, fp
   129ba:	a343      	add	r3, pc, #268	; (adr r3, 12ac8 <isr+0x7c8>)
   129bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   129c0:	4640      	mov	r0, r8
   129c2:	4649      	mov	r1, r9
   129c4:	f7ed fc50 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   129c8:	f895 3020 	ldrb.w	r3, [r5, #32]
   129cc:	68a4      	ldr	r4, [r4, #8]
   129ce:	9506      	str	r5, [sp, #24]
   129d0:	3307      	adds	r3, #7
   129d2:	b2db      	uxtb	r3, r3
   129d4:	930a      	str	r3, [sp, #40]	; 0x28
   129d6:	f240 5345 	movw	r3, #1349	; 0x545
   129da:	9308      	str	r3, [sp, #32]
   129dc:	4b40      	ldr	r3, [pc, #256]	; (12ae0 <isr+0x7e0>)
   129de:	9307      	str	r3, [sp, #28]
   129e0:	4b40      	ldr	r3, [pc, #256]	; (12ae4 <isr+0x7e4>)
   129e2:	9305      	str	r3, [sp, #20]
   129e4:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   129e6:	4a40      	ldr	r2, [pc, #256]	; (12ae8 <isr+0x7e8>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   129e8:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   129ea:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   129ec:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   129ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   129f2:	2307      	movs	r3, #7
   129f4:	2100      	movs	r1, #0
   129f6:	4343      	muls	r3, r0
   129f8:	fb02 3301 	mla	r3, r2, r1, r3
   129fc:	fba0 1202 	umull	r1, r2, r0, r2
   12a00:	441a      	add	r2, r3
   12a02:	4608      	mov	r0, r1
   12a04:	ebb8 0000 	subs.w	r0, r8, r0
   12a08:	4611      	mov	r1, r2
   12a0a:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a0e:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   12a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12a14:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a16:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   12a18:	f7ed fc26 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   12a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a1e:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   12a20:	a329      	add	r3, pc, #164	; (adr r3, 12ac8 <isr+0x7c8>)
   12a22:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a26:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   12a2a:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a2e:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   12a30:	f7ed fc1a 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   12a34:	eba4 040a 	sub.w	r4, r4, sl
   12a38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12a3c:	9000      	str	r0, [sp, #0]
   12a3e:	4623      	mov	r3, r4
   12a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12a42:	4629      	mov	r1, r5
   12a44:	4628      	mov	r0, r5
   12a46:	f7f8 fb55 	bl	b0f4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12a4a:	f030 0302 	bics.w	r3, r0, #2
   12a4e:	f43f ad03 	beq.w	12458 <isr+0x158>
   12a52:	4b26      	ldr	r3, [pc, #152]	; (12aec <isr+0x7ec>)
   12a54:	9301      	str	r3, [sp, #4]
   12a56:	9300      	str	r3, [sp, #0]
   12a58:	4b25      	ldr	r3, [pc, #148]	; (12af0 <isr+0x7f0>)
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12a5a:	4a26      	ldr	r2, [pc, #152]	; (12af4 <isr+0x7f4>)
   12a5c:	4926      	ldr	r1, [pc, #152]	; (12af8 <isr+0x7f8>)
   12a5e:	4827      	ldr	r0, [pc, #156]	; (12afc <isr+0x7fc>)
		LL_ASSERT(0);
   12a60:	f7ee fe3e 	bl	16e0 <printk>
   12a64:	4040      	eors	r0, r0
   12a66:	f380 8811 	msr	BASEPRI, r0
   12a6a:	f04f 0004 	mov.w	r0, #4
   12a6e:	df02      	svc	2
		rl_idx = devmatch_ok ?
   12a70:	f1b8 0f00 	cmp.w	r8, #0
   12a74:	d01c      	beq.n	12ab0 <isr+0x7b0>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   12a76:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
		rl_idx = devmatch_ok ?
   12a7a:	4649      	mov	r1, r9
   12a7c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   12a80:	f002 fc52 	bl	15328 <ctrl_rl_idx>
   12a84:	4681      	mov	r9, r0
		if (crc_ok &&
   12a86:	b147      	cbz	r7, 12a9a <isr+0x79a>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   12a88:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   12a8c:	06df      	lsls	r7, r3, #27
   12a8e:	d537      	bpl.n	12b00 <isr+0x800>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   12a90:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   12a94:	06de      	lsls	r6, r3, #27
   12a96:	f100 81a6 	bmi.w	12de6 <isr+0xae6>
			_radio.state = STATE_CLOSE;
   12a9a:	2303      	movs	r3, #3
   12a9c:	7523      	strb	r3, [r4, #20]
			radio_disable();
   12a9e:	f003 fc8d 	bl	163bc <radio_disable>
			_radio.scanner.state = 0;
   12aa2:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   12aa6:	f36f 0341 	bfc	r3, #1, #1
   12aaa:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
   12aae:	e4d3      	b.n	12458 <isr+0x158>
		rl_idx = devmatch_ok ?
   12ab0:	f1ba 0f00 	cmp.w	sl, #0
   12ab4:	d003      	beq.n	12abe <isr+0x7be>
   12ab6:	4658      	mov	r0, fp
   12ab8:	f002 fc8a 	bl	153d0 <ctrl_rl_irk_idx>
   12abc:	e7e2      	b.n	12a84 <isr+0x784>
   12abe:	f04f 09ff 	mov.w	r9, #255	; 0xff
   12ac2:	e7e0      	b.n	12a86 <isr+0x786>
   12ac4:	f3af 8000 	nop.w
   12ac8:	1afd498d 	.word	0x1afd498d
   12acc:	00000007 	.word	0x00000007
   12ad0:	0001b698 	.word	0x0001b698
   12ad4:	000f4240 	.word	0x000f4240
   12ad8:	3b9aca00 	.word	0x3b9aca00
   12adc:	0000e6d1 	.word	0x0000e6d1
   12ae0:	0000e695 	.word	0x0000e695
   12ae4:	00010bd5 	.word	0x00010bd5
   12ae8:	1afd498d 	.word	0x1afd498d
   12aec:	0001868d 	.word	0x0001868d
   12af0:	0001afdc 	.word	0x0001afdc
   12af4:	00019a84 	.word	0x00019a84
   12af8:	00019a8b 	.word	0x00019a8b
   12afc:	0001b473 	.word	0x0001b473
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   12b00:	f1b8 0f00 	cmp.w	r8, #0
   12b04:	d005      	beq.n	12b12 <isr+0x812>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   12b06:	4649      	mov	r1, r9
   12b08:	4650      	mov	r0, sl
   12b0a:	f002 fdd9 	bl	156c0 <ctrl_rl_idx_allowed>
   12b0e:	2800      	cmp	r0, #0
   12b10:	d0be      	beq.n	12a90 <isr+0x790>
	bool dir_report = false;
   12b12:	2300      	movs	r3, #0
   12b14:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   12b18:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   12b1c:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
   12b20:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
   12b24:	7a3b      	ldrb	r3, [r7, #8]
   12b26:	f003 030f 	and.w	r3, r3, #15
   12b2a:	2b07      	cmp	r3, #7
   12b2c:	f040 8082 	bne.w	12c34 <isr+0x934>
		if(h->adv_addr){
   12b30:	7afb      	ldrb	r3, [r7, #11]
   12b32:	f8df 83ac 	ldr.w	r8, [pc, #940]	; 12ee0 <isr+0xbe0>
   12b36:	07d8      	lsls	r0, r3, #31
			ptr += BDADDR_SIZE;
   12b38:	bf4c      	ite	mi
   12b3a:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
   12b3e:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
   12b42:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
   12b44:	bf48      	it	mi
   12b46:	3606      	addmi	r6, #6
		if(h->adi){
   12b48:	f013 0f08 	tst.w	r3, #8
			sid = (u8_t)adi_ptr->sid;
   12b4c:	bf1e      	ittt	ne
   12b4e:	7873      	ldrbne	r3, [r6, #1]
   12b50:	f3c3 1303 	ubfxne	r3, r3, #4, #4
   12b54:	f888 3000 	strbne.w	r3, [r8]
		if(sid == 0x04){
   12b58:	f898 3000 	ldrb.w	r3, [r8]
			ptr += sizeof(*adi_ptr);
   12b5c:	bf18      	it	ne
   12b5e:	3602      	addne	r6, #2
		if(sid == 0x04){
   12b60:	2b04      	cmp	r3, #4
   12b62:	d11d      	bne.n	12ba0 <isr+0x8a0>
			stop_time_int = k_cycle_get_32();
   12b64:	f7ef fda6 	bl	26b4 <_timer_cycle_get_32>
   12b68:	4bcf      	ldr	r3, [pc, #828]	; (12ea8 <isr+0xba8>)
   12b6a:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
   12b6c:	4bcf      	ldr	r3, [pc, #828]	; (12eac <isr+0xbac>)
   12b6e:	681b      	ldr	r3, [r3, #0]
   12b70:	eba0 0e03 	sub.w	lr, r0, r3
   12b74:	4bce      	ldr	r3, [pc, #824]	; (12eb0 <isr+0xbb0>)
   12b76:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
   12b7a:	4bce      	ldr	r3, [pc, #824]	; (12eb4 <isr+0xbb4>)
   12b7c:	681a      	ldr	r2, [r3, #0]
   12b7e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
   12b82:	fb82 230b 	smull	r2, r3, r2, fp
   12b86:	fba2 010e 	umull	r0, r1, r2, lr
   12b8a:	fb0e 1103 	mla	r1, lr, r3, r1
   12b8e:	4bca      	ldr	r3, [pc, #808]	; (12eb8 <isr+0xbb8>)
   12b90:	681a      	ldr	r2, [r3, #0]
   12b92:	17d3      	asrs	r3, r2, #31
   12b94:	f7ed fb68 	bl	268 <__aeabi_uldivmod>
   12b98:	4bc8      	ldr	r3, [pc, #800]	; (12ebc <isr+0xbbc>)
   12b9a:	fbb0 f0fb 	udiv	r0, r0, fp
   12b9e:	6018      	str	r0, [r3, #0]
		if((h->aux_ptr && !aux_scan && (sid == 0x02)) || 
   12ba0:	7afb      	ldrb	r3, [r7, #11]
   12ba2:	f013 0310 	ands.w	r3, r3, #16
   12ba6:	d006      	beq.n	12bb6 <isr+0x8b6>
   12ba8:	4ac5      	ldr	r2, [pc, #788]	; (12ec0 <isr+0xbc0>)
   12baa:	7812      	ldrb	r2, [r2, #0]
   12bac:	b91a      	cbnz	r2, 12bb6 <isr+0x8b6>
   12bae:	f898 2000 	ldrb.w	r2, [r8]
   12bb2:	2a02      	cmp	r2, #2
   12bb4:	d005      	beq.n	12bc2 <isr+0x8c2>
   12bb6:	f898 2000 	ldrb.w	r2, [r8]
   12bba:	2a04      	cmp	r2, #4
   12bbc:	d13a      	bne.n	12c34 <isr+0x934>
			((sid == 0x04) && h->aux_ptr)){
   12bbe:	2b00      	cmp	r3, #0
   12bc0:	d038      	beq.n	12c34 <isr+0x934>
			aux_scan = 0x01;
   12bc2:	4bbf      	ldr	r3, [pc, #764]	; (12ec0 <isr+0xbc0>)
   12bc4:	2201      	movs	r2, #1
   12bc6:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
   12bc8:	7833      	ldrb	r3, [r6, #0]
   12bca:	f3c3 0305 	ubfx	r3, r3, #0, #6
   12bce:	f884 3c90 	strb.w	r3, [r4, #3216]	; 0xc90
			_radio.ext_scanner.chan_off	= ap->offs;
   12bd2:	78b3      	ldrb	r3, [r6, #2]
   12bd4:	7870      	ldrb	r0, [r6, #1]
			_radio.ext_scanner.off_unit	= ap->offs_units;
   12bd6:	7832      	ldrb	r2, [r6, #0]
			_radio.ext_scanner.chan_off	= ap->offs;
   12bd8:	f003 031f 	and.w	r3, r3, #31
   12bdc:	ea40 2e03 	orr.w	lr, r0, r3, lsl #8
			_radio.ext_scanner.off_unit	= ap->offs_units;
   12be0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			_radio.ext_scanner.chan_off	= ap->offs;
   12be4:	4bb7      	ldr	r3, [pc, #732]	; (12ec4 <isr+0xbc4>)
			_radio.ext_scanner.off_unit	= ap->offs_units;
   12be6:	f884 2cb4 	strb.w	r2, [r4, #3252]	; 0xcb4
			_radio.ext_scanner.chan_off	= ap->offs;
   12bea:	fa1f f08e 	uxth.w	r0, lr
			if(_radio.ext_scanner.off_unit == 0 ){
   12bee:	f012 0fff 	tst.w	r2, #255	; 0xff
			_radio.ext_scanner.chan_off	= ap->offs;
   12bf2:	f04f 0100 	mov.w	r1, #0
   12bf6:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
   12bfa:	e9c3 0102 	strd	r0, r1, [r3, #8]
				_radio.ext_scanner.chan_off *= 30;
   12bfe:	bf0b      	itete	eq
   12c00:	221e      	moveq	r2, #30
				_radio.ext_scanner.chan_off *= 300;
   12c02:	f44f 7096 	movne.w	r0, #300	; 0x12c
				_radio.ext_scanner.chan_off *= 30;
   12c06:	fbae 0102 	umulleq	r0, r1, lr, r2
				_radio.ext_scanner.chan_off *= 300;
   12c0a:	fbae 0100 	umullne	r0, r1, lr, r0
   12c0e:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
   12c12:	e9d3 0100 	ldrd	r0, r1, [r3]
   12c16:	4bac      	ldr	r3, [pc, #688]	; (12ec8 <isr+0xbc8>)
   12c18:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
   12c1c:	f7ef fd4a 	bl	26b4 <_timer_cycle_get_32>
   12c20:	4baa      	ldr	r3, [pc, #680]	; (12ecc <isr+0xbcc>)
   12c22:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
   12c24:	f7ef fd46 	bl	26b4 <_timer_cycle_get_32>
   12c28:	4ba0      	ldr	r3, [pc, #640]	; (12eac <isr+0xbac>)
   12c2a:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
   12c2c:	f7f8 fbd0 	bl	b3d0 <ticker_ticks_now_get>
   12c30:	f8c4 0cec 	str.w	r0, [r4, #3308]	; 0xcec
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   12c34:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   12c38:	f107 0608 	add.w	r6, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   12c3c:	2b00      	cmp	r3, #0
   12c3e:	f000 80eb 	beq.w	12e18 <isr+0xb18>
   12c42:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   12c46:	b133      	cbz	r3, 12c56 <isr+0x956>
				      (_radio.fc_req == _radio.fc_ack)) &&
   12c48:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   12c4c:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   12c50:	429a      	cmp	r2, r3
   12c52:	f040 80e1 	bne.w	12e18 <isr+0xb18>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   12c56:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   12c5a:	f3c3 1000 	ubfx	r0, r3, #4, #1
   12c5e:	2800      	cmp	r0, #0
   12c60:	f000 80cc 	beq.w	12dfc <isr+0xafc>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   12c64:	7a38      	ldrb	r0, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   12c66:	f010 000f 	ands.w	r0, r0, #15
   12c6a:	f040 810d 	bne.w	12e88 <isr+0xb88>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   12c6e:	f003 fd79 	bl	16764 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   12c72:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   12c76:	f200 2816 	addw	r8, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   12c7a:	4895      	ldr	r0, [pc, #596]	; (12ed0 <isr+0xbd0>)
   12c7c:	2207      	movs	r2, #7
   12c7e:	fba3 0100 	umull	r0, r1, r3, r0
   12c82:	fb02 1103 	mla	r1, r2, r3, r1
   12c86:	a386      	add	r3, pc, #536	; (adr r3, 12ea0 <isr+0xba0>)
   12c88:	e9d3 2300 	ldrd	r2, r3, [r3]
   12c8c:	f7ed faec 	bl	268 <__aeabi_uldivmod>
   12c90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   12c94:	4580      	cmp	r8, r0
   12c96:	f080 80bf 	bcs.w	12e18 <isr+0xb18>
			node_rx = packet_rx_reserve_get(4);
   12c9a:	2004      	movs	r0, #4
   12c9c:	f7fa fa4e 	bl	d13c <packet_rx_reserve_get>
		if (node_rx == 0) {
   12ca0:	4680      	mov	r8, r0
   12ca2:	2800      	cmp	r0, #0
   12ca4:	f43f aef9 	beq.w	12a9a <isr+0x79a>
		_radio.state = STATE_STOP;
   12ca8:	2304      	movs	r3, #4
   12caa:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
   12cac:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
   12cae:	f8d4 6c54 	ldr.w	r6, [r4, #3156]	; 0xc54
		_radio.scanner.conn = NULL;
   12cb2:	f8c4 3c54 	str.w	r3, [r4, #3156]	; 0xc54
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   12cb6:	f003 fbd7 	bl	16468 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   12cba:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
   12cbc:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
   12cc0:	f043 0325 	orr.w	r3, r3, #37	; 0x25
   12cc4:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   12cc6:	7a3b      	ldrb	r3, [r7, #8]
   12cc8:	7802      	ldrb	r2, [r0, #0]
   12cca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12cce:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
   12cd2:	2322      	movs	r3, #34	; 0x22
   12cd4:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   12cd6:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   12cd8:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   12cda:	4648      	mov	r0, r9
   12cdc:	f002 fb06 	bl	152ec <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   12ce0:	f894 3c2e 	ldrb.w	r3, [r4, #3118]	; 0xc2e
		lrpa = ctrl_lrpa_get(rl_idx);
   12ce4:	4601      	mov	r1, r0
   12ce6:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   12ce8:	f013 0f01 	tst.w	r3, #1
   12cec:	f810 3b02 	ldrb.w	r3, [r0], #2
   12cf0:	f000 80f8 	beq.w	12ee4 <isr+0xbe4>
   12cf4:	2900      	cmp	r1, #0
   12cf6:	f000 80f5 	beq.w	12ee4 <isr+0xbe4>
			pdu_adv_tx->tx_addr = 1;
   12cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12cfe:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12d00:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12d02:	f7ed fc81 	bl	608 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
   12d06:	f105 0308 	add.w	r3, r5, #8
   12d0a:	4618      	mov	r0, r3
   12d0c:	2206      	movs	r2, #6
   12d0e:	f107 010a 	add.w	r1, r7, #10
   12d12:	930a      	str	r3, [sp, #40]	; 0x28
   12d14:	f7ed fc78 	bl	608 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
   12d18:	2204      	movs	r2, #4
   12d1a:	f106 0110 	add.w	r1, r6, #16
   12d1e:	f105 000e 	add.w	r0, r5, #14
   12d22:	f7ed fc71 	bl	608 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
   12d26:	2203      	movs	r2, #3
   12d28:	f106 0114 	add.w	r1, r6, #20
   12d2c:	f105 0012 	add.w	r0, r5, #18
   12d30:	f7ed fc6a 	bl	608 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
   12d34:	2301      	movs	r3, #1
   12d36:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   12d38:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
		conn_interval_us =
   12d3c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12d40:	4353      	muls	r3, r2
   12d42:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   12d44:	f003 fd0e 	bl	16764 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
   12d48:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
   12d4a:	f8d4 bc58 	ldr.w	fp, [r4, #3160]	; 0xc58
		if (!_radio.remainder_anchor ||
   12d4e:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   12d50:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
   12d54:	bfd8      	it	le
   12d56:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
   12d5a:	f1bb 0f00 	cmp.w	fp, #0
   12d5e:	f040 80cc 	bne.w	12efa <isr+0xbfa>
			pdu_adv_tx->connect_ind.win_offset = 0;
   12d62:	f885 b016 	strb.w	fp, [r5, #22]
   12d66:	f885 b017 	strb.w	fp, [r5, #23]
   12d6a:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   12d6c:	2100      	movs	r1, #0
   12d6e:	4608      	mov	r0, r1
   12d70:	f003 fafc 	bl	1636c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   12d74:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   12d76:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   12d7a:	4608      	mov	r0, r1
   12d7c:	f003 faff 	bl	1637e <radio_tx_chain_delay_get>
   12d80:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
   12d84:	f100 031e 	add.w	r3, r0, #30
   12d88:	930c      	str	r3, [sp, #48]	; 0x30
		pdu_adv_tx->connect_ind.interval =
   12d8a:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
   12d8e:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
   12d90:	f8b4 3c4a 	ldrh.w	r3, [r4, #3146]	; 0xc4a
   12d94:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
   12d96:	f8b4 3c4c 	ldrh.w	r3, [r4, #3148]	; 0xc4c
   12d9a:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
   12d9c:	f106 0117 	add.w	r1, r6, #23
   12da0:	2205      	movs	r2, #5
   12da2:	f105 001e 	add.w	r0, r5, #30
   12da6:	f7ed fc2f 	bl	608 <memcpy>
		pdu_adv_tx->connect_ind.hop =
   12daa:	7fb2      	ldrb	r2, [r6, #30]
   12dac:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   12db0:	f362 0304 	bfi	r3, r2, #0, #5
   12db4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
   12db8:	f894 2d08 	ldrb.w	r2, [r4, #3336]	; 0xd08
   12dbc:	f362 1347 	bfi	r3, r2, #5, #3
   12dc0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
   12dc4:	f003 fb6a 	bl	1649c <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   12dc8:	4628      	mov	r0, r5
   12dca:	f003 fac9 	bl	16360 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   12dce:	f003 fb13 	bl	163f8 <radio_is_ready>
   12dd2:	4683      	mov	fp, r0
   12dd4:	2800      	cmp	r0, #0
   12dd6:	f000 80a0 	beq.w	12f1a <isr+0xc1a>
		LL_ASSERT(!radio_is_ready());
   12dda:	4b3e      	ldr	r3, [pc, #248]	; (12ed4 <isr+0xbd4>)
   12ddc:	9301      	str	r3, [sp, #4]
   12dde:	9300      	str	r3, [sp, #0]
   12de0:	4b3d      	ldr	r3, [pc, #244]	; (12ed8 <isr+0xbd8>)
   12de2:	f7ff baeb 	b.w	123bc <isr+0xbc>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   12de6:	f1b8 0f00 	cmp.w	r8, #0
   12dea:	f47f ae92 	bne.w	12b12 <isr+0x812>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   12dee:	4648      	mov	r0, r9
   12df0:	f002 fb34 	bl	1545c <ctrl_irk_whitelisted>
		if (crc_ok &&
   12df4:	2800      	cmp	r0, #0
   12df6:	f43f ae50 	beq.w	12a9a <isr+0x79a>
   12dfa:	e68a      	b.n	12b12 <isr+0x812>
	if (rl_idx != FILTER_IDX_NONE) {
   12dfc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   12e00:	d031      	beq.n	12e66 <isr+0xb66>
		return (rl_idx == _radio.scanner.rl_idx);
   12e02:	f894 0c2f 	ldrb.w	r0, [r4, #3119]	; 0xc2f
   12e06:	eba0 0e09 	sub.w	lr, r0, r9
   12e0a:	f1de 0000 	rsbs	r0, lr, #0
   12e0e:	eb40 000e 	adc.w	r0, r0, lr
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   12e12:	2800      	cmp	r0, #0
   12e14:	f47f af26 	bne.w	12c64 <isr+0x964>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   12e18:	7a38      	ldrb	r0, [r7, #8]
   12e1a:	f010 000f 	ands.w	r0, r0, #15
   12e1e:	f000 816b 	beq.w	130f8 <isr+0xdf8>
   12e22:	2807      	cmp	r0, #7
   12e24:	f040 8166 	bne.w	130f4 <isr+0xdf4>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   12e28:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   12e2c:	075a      	lsls	r2, r3, #29
   12e2e:	f040 8163 	bne.w	130f8 <isr+0xdf8>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   12e32:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
   12e34:	f003 020b 	and.w	r2, r3, #11
   12e38:	2a02      	cmp	r2, #2
   12e3a:	f040 81d4 	bne.w	131e6 <isr+0xee6>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   12e3e:	7a7b      	ldrb	r3, [r7, #9]
   12e40:	2b00      	cmp	r3, #0
   12e42:	f43f ae2a 	beq.w	12a9a <isr+0x79a>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   12e46:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
   12e4a:	2b00      	cmp	r3, #0
   12e4c:	f47f ae25 	bne.w	12a9a <isr+0x79a>
		err = isr_rx_scan_report(rssi_ready,
   12e50:	f1ba 0f00 	cmp.w	sl, #0
   12e54:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12e58:	bf14      	ite	ne
   12e5a:	4649      	movne	r1, r9
   12e5c:	21ff      	moveq	r1, #255	; 0xff
   12e5e:	4628      	mov	r0, r5
   12e60:	f7fb fba6 	bl	e5b0 <isr_rx_scan_report>
   12e64:	e619      	b.n	12a9a <isr+0x79a>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   12e66:	7a3a      	ldrb	r2, [r7, #8]
   12e68:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12e6c:	f3c2 1280 	ubfx	r2, r2, #6, #1
   12e70:	4293      	cmp	r3, r2
   12e72:	d1ce      	bne.n	12e12 <isr+0xb12>
		(memcmp(&_radio.scanner.adv_addr[0],
   12e74:	2206      	movs	r2, #6
   12e76:	f107 010a 	add.w	r1, r7, #10
   12e7a:	4818      	ldr	r0, [pc, #96]	; (12edc <isr+0xbdc>)
   12e7c:	f7ed fbaf 	bl	5de <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   12e80:	fab0 f080 	clz	r0, r0
   12e84:	0940      	lsrs	r0, r0, #5
   12e86:	e7c4      	b.n	12e12 <isr+0xb12>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   12e88:	2801      	cmp	r0, #1
   12e8a:	d1ca      	bne.n	12e22 <isr+0xb22>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
   12e8c:	2300      	movs	r3, #0
   12e8e:	464a      	mov	r2, r9
   12e90:	4631      	mov	r1, r6
   12e92:	f7fb fb41 	bl	e518 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
   12e96:	2800      	cmp	r0, #0
   12e98:	d0be      	beq.n	12e18 <isr+0xb18>
   12e9a:	e6e8      	b.n	12c6e <isr+0x96e>
   12e9c:	f3af 8000 	nop.w
   12ea0:	3b9aca00 	.word	0x3b9aca00
   12ea4:	00000000 	.word	0x00000000
   12ea8:	200053c0 	.word	0x200053c0
   12eac:	20005334 	.word	0x20005334
   12eb0:	200053f4 	.word	0x200053f4
   12eb4:	20008a44 	.word	0x20008a44
   12eb8:	20008a40 	.word	0x20008a40
   12ebc:	2000541c 	.word	0x2000541c
   12ec0:	20001910 	.word	0x20001910
   12ec4:	20001830 	.word	0x20001830
   12ec8:	20001840 	.word	0x20001840
   12ecc:	200053ec 	.word	0x200053ec
   12ed0:	1afd498d 	.word	0x1afd498d
   12ed4:	0001868d 	.word	0x0001868d
   12ed8:	0001affa 	.word	0x0001affa
   12edc:	200017ce 	.word	0x200017ce
   12ee0:	200053e0 	.word	0x200053e0
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   12ee4:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12ee8:	49c7      	ldr	r1, [pc, #796]	; (13208 <isr+0xf08>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   12eea:	09d2      	lsrs	r2, r2, #7
   12eec:	f362 1386 	bfi	r3, r2, #6, #1
   12ef0:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
   12ef2:	2206      	movs	r2, #6
   12ef4:	e705      	b.n	12d02 <isr+0xa02>
				conn_space_us += conn_interval_us;
   12ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12ef8:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   12efa:	f1bb 0f00 	cmp.w	fp, #0
   12efe:	dbfa      	blt.n	12ef6 <isr+0xbf6>
   12f00:	459b      	cmp	fp, r3
   12f02:	d3f8      	bcc.n	12ef6 <isr+0xbf6>
				(conn_space_us - conn_offset_us) / 1250;
   12f04:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
   12f08:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12f0c:	fbb3 f3f2 	udiv	r3, r3, r2
   12f10:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
   12f12:	7d6b      	ldrb	r3, [r5, #21]
   12f14:	3301      	adds	r3, #1
   12f16:	756b      	strb	r3, [r5, #21]
   12f18:	e728      	b.n	12d6c <isr+0xa6c>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12f1a:	f44f 72aa 	mov.w	r2, #340	; 0x154
   12f1e:	f8d4 1cf0 	ldr.w	r1, [r4, #3312]	; 0xcf0
   12f22:	4630      	mov	r0, r6
   12f24:	f7f7 fa95 	bl	a452 <mem_index_get>
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12f28:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   12f2a:	8430      	strh	r0, [r6, #32]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12f2c:	f04f 0306 	mov.w	r3, #6
		radio_le_conn_cmplt->status = 0x00;
   12f30:	f888 b00b 	strb.w	fp, [r8, #11]
		radio_le_conn_cmplt->role = 0x00;
   12f34:	f888 b00c 	strb.w	fp, [r8, #12]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12f38:	f888 3004 	strb.w	r3, [r8, #4]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12f3c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
   12f40:	f8a8 0006 	strh.w	r0, [r8, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   12f44:	f3c3 1380 	ubfx	r3, r3, #6, #1
   12f48:	f888 301a 	strb.w	r3, [r8, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   12f4c:	2206      	movs	r2, #6
   12f4e:	f108 001b 	add.w	r0, r8, #27
   12f52:	f7ed fb59 	bl	608 <memcpy>
   12f56:	f108 0b0e 	add.w	fp, r8, #14
   12f5a:	f108 0314 	add.w	r3, r8, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   12f5e:	f1ba 0f00 	cmp.w	sl, #0
   12f62:	d034      	beq.n	12fce <isr+0xcce>
   12f64:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   12f68:	d031      	beq.n	12fce <isr+0xcce>
			ll_rl_id_addr_get(rl_idx,
   12f6a:	465a      	mov	r2, fp
   12f6c:	f108 010d 	add.w	r1, r8, #13
   12f70:	4648      	mov	r0, r9
   12f72:	930d      	str	r3, [sp, #52]	; 0x34
   12f74:	f002 fbd8 	bl	15728 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   12f78:	f898 200d 	ldrb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   12f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12f7e:	990a      	ldr	r1, [sp, #40]	; 0x28
			radio_le_conn_cmplt->peer_addr_type += 2;
   12f80:	3202      	adds	r2, #2
   12f82:	f888 200d 	strb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   12f86:	4618      	mov	r0, r3
   12f88:	2206      	movs	r2, #6
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12f8a:	f7ed fb3d 	bl	608 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   12f8e:	f8b4 3c48 	ldrh.w	r3, [r4, #3144]	; 0xc48
   12f92:	f8a8 3021 	strh.w	r3, [r8, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
   12f96:	f8b4 3c4a 	ldrh.w	r3, [r4, #3146]	; 0xc4a
   12f9a:	f8a8 3023 	strh.w	r3, [r8, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   12f9e:	f8b4 3c4c 	ldrh.w	r3, [r4, #3148]	; 0xc4c
   12fa2:	f8a8 3025 	strh.w	r3, [r8, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
   12fa6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   12faa:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   12fae:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
		rx_fc_lock(conn->handle);
   12fb2:	8c30      	ldrh	r0, [r6, #32]
   12fb4:	f7fb fb54 	bl	e660 <rx_fc_lock>
		packet_rx_enqueue();
   12fb8:	f7fb fa62 	bl	e480 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
   12fbc:	2003      	movs	r0, #3
   12fbe:	f7fa f8bd 	bl	d13c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   12fc2:	b990      	cbnz	r0, 12fea <isr+0xcea>
   12fc4:	4b91      	ldr	r3, [pc, #580]	; (1320c <isr+0xf0c>)
   12fc6:	9301      	str	r3, [sp, #4]
   12fc8:	9300      	str	r3, [sp, #0]
   12fca:	4b91      	ldr	r3, [pc, #580]	; (13210 <isr+0xf10>)
   12fcc:	e412      	b.n	127f4 <isr+0x4f4>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   12fce:	2206      	movs	r2, #6
   12fd0:	2100      	movs	r1, #0
   12fd2:	4618      	mov	r0, r3
   12fd4:	f7ed fb44 	bl	660 <memset>
				pdu_adv_tx->rx_addr;
   12fd8:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12fda:	990a      	ldr	r1, [sp, #40]	; 0x28
				pdu_adv_tx->rx_addr;
   12fdc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   12fe0:	f888 300d 	strb.w	r3, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   12fe4:	2206      	movs	r2, #6
   12fe6:	4658      	mov	r0, fp
   12fe8:	e7cf      	b.n	12f8a <isr+0xc8a>
			node_rx->hdr.handle = conn->handle;
   12fea:	8c33      	ldrh	r3, [r6, #32]
   12fec:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   12fee:	230b      	movs	r3, #11
   12ff0:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
   12ff2:	7a3b      	ldrb	r3, [r7, #8]
   12ff4:	f013 0320 	ands.w	r3, r3, #32
   12ff8:	d00e      	beq.n	13018 <isr+0xd18>
					((u16_t)conn->access_addr[1] << 8) |
   12ffa:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
   12ffc:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
   12ffe:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
   13000:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
   13004:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
   13006:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
   1300a:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1300c:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
   1300e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
   13012:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
   13014:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   13016:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
   13018:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
   1301a:	f7fb fa31 	bl	e480 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   1301e:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   13020:	f8d4 7d6c 	ldr.w	r7, [r4, #3436]	; 0xd6c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
   13024:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   13026:	f8d4 3c50 	ldr.w	r3, [r4, #3152]	; 0xc50
   1302a:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   1302c:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1302e:	f44f 63ef 	mov.w	r3, #1912	; 0x778
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   13032:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   13034:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13036:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
   1303a:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1303c:	4629      	mov	r1, r5
   1303e:	9300      	str	r3, [sp, #0]
   13040:	4628      	mov	r0, r5
   13042:	4b74      	ldr	r3, [pc, #464]	; (13214 <isr+0xf14>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   13044:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 13220 <isr+0xf20>
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
   13048:	bf38      	it	cc
   1304a:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1304c:	f7f8 f8f0 	bl	b230 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   13050:	f240 7179 	movw	r1, #1913	; 0x779
   13054:	f7fb fb70 	bl	e738 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13058:	462b      	mov	r3, r5
   1305a:	2204      	movs	r2, #4
   1305c:	4629      	mov	r1, r5
   1305e:	9500      	str	r5, [sp, #0]
   13060:	4628      	mov	r0, r5
   13062:	f7f8 f8e5 	bl	b230 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   13066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13068:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1306c:	68a3      	ldr	r3, [r4, #8]
   1306e:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
   13072:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13074:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
   13078:	f44f 63f2 	mov.w	r3, #1936	; 0x790
   1307c:	9308      	str	r3, [sp, #32]
   1307e:	4b66      	ldr	r3, [pc, #408]	; (13218 <isr+0xf18>)
   13080:	9307      	str	r3, [sp, #28]
   13082:	4b66      	ldr	r3, [pc, #408]	; (1321c <isr+0xf1c>)
   13084:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   13086:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
   13088:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1308a:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
   1308c:	4640      	mov	r0, r8
   1308e:	a35c      	add	r3, pc, #368	; (adr r3, 13200 <isr+0xf00>)
   13090:	e9d3 2300 	ldrd	r2, r3, [r3]
   13094:	4649      	mov	r1, r9
		ticker_status =
   13096:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   13098:	f7ed f8e6 	bl	268 <__aeabi_uldivmod>
   1309c:	4610      	mov	r0, r2
   1309e:	4619      	mov	r1, r3
   130a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   130a4:	2300      	movs	r3, #0
   130a6:	f7ed f8df 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   130aa:	a355      	add	r3, pc, #340	; (adr r3, 13200 <isr+0xf00>)
   130ac:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   130b0:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   130b2:	4649      	mov	r1, r9
   130b4:	4640      	mov	r0, r8
   130b6:	f7ed f8d7 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   130ba:	990c      	ldr	r1, [sp, #48]	; 0x30
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   130bc:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
   130be:	a350      	add	r3, pc, #320	; (adr r3, 13200 <isr+0xf00>)
   130c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   130c4:	fba1 010a 	umull	r0, r1, r1, sl
   130c8:	f7ed f8ce 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   130cc:	3407      	adds	r4, #7
   130ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
   130d2:	b2e4      	uxtb	r4, r4
   130d4:	9000      	str	r0, [sp, #0]
   130d6:	465b      	mov	r3, fp
   130d8:	4622      	mov	r2, r4
   130da:	4629      	mov	r1, r5
   130dc:	4628      	mov	r0, r5
   130de:	f7f8 f809 	bl	b0f4 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   130e2:	f030 0302 	bics.w	r3, r0, #2
   130e6:	f43f a9b7 	beq.w	12458 <isr+0x158>
   130ea:	4b48      	ldr	r3, [pc, #288]	; (1320c <isr+0xf0c>)
   130ec:	9301      	str	r3, [sp, #4]
   130ee:	9300      	str	r3, [sp, #0]
   130f0:	4b47      	ldr	r3, [pc, #284]	; (13210 <isr+0xf10>)
   130f2:	e4b2      	b.n	12a5a <isr+0x75a>
		   (_radio.scanner.phy)) ||
   130f4:	2806      	cmp	r0, #6
   130f6:	d169      	bne.n	131cc <isr+0xecc>
		 (_radio.scanner.type != 0) &&
   130f8:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   130fc:	071b      	lsls	r3, r3, #28
   130fe:	d562      	bpl.n	131c6 <isr+0xec6>
		 (_radio.scanner.type != 0) &&
   13100:	f8d4 2c54 	ldr.w	r2, [r4, #3156]	; 0xc54
   13104:	2a00      	cmp	r2, #0
   13106:	d15e      	bne.n	131c6 <isr+0xec6>
		err = isr_rx_scan_report(rssi_ready,
   13108:	f1ba 0f00 	cmp.w	sl, #0
   1310c:	bf14      	ite	ne
   1310e:	4649      	movne	r1, r9
   13110:	21ff      	moveq	r1, #255	; 0xff
   13112:	4628      	mov	r0, r5
   13114:	f7fb fa4c 	bl	e5b0 <isr_rx_scan_report>
		if (err) {
   13118:	2800      	cmp	r0, #0
   1311a:	f47f acbe 	bne.w	12a9a <isr+0x79a>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
   1311e:	7a3b      	ldrb	r3, [r7, #8]
   13120:	f003 030f 	and.w	r3, r3, #15
   13124:	2b07      	cmp	r3, #7
   13126:	d101      	bne.n	1312c <isr+0xe2c>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
   13128:	f003 f99e 	bl	16468 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1312c:	f003 f99c 	bl	16468 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   13130:	7803      	ldrb	r3, [r0, #0]
   13132:	2203      	movs	r2, #3
   13134:	f362 0303 	bfi	r3, r2, #0, #4
   13138:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1313a:	7a3b      	ldrb	r3, [r7, #8]
   1313c:	7802      	ldrb	r2, [r0, #0]
   1313e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13142:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
   13146:	230c      	movs	r3, #12
   13148:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
   1314a:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1314c:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
   1314e:	4648      	mov	r0, r9
   13150:	f002 f8cc 	bl	152ec <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   13154:	f894 3c2e 	ldrb.w	r3, [r4, #3118]	; 0xc2e
		lrpa = ctrl_lrpa_get(rl_idx);
   13158:	4601      	mov	r1, r0
   1315a:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
   1315c:	f013 0f01 	tst.w	r3, #1
   13160:	f810 3b02 	ldrb.w	r3, [r0], #2
   13164:	d026      	beq.n	131b4 <isr+0xeb4>
   13166:	b329      	cbz	r1, 131b4 <isr+0xeb4>
			pdu_adv_tx->tx_addr = 1;
   13168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1316c:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   1316e:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   13170:	f7ed fa4a 	bl	608 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
   13174:	2206      	movs	r2, #6
   13176:	f107 010a 	add.w	r1, r7, #10
   1317a:	f105 0008 	add.w	r0, r5, #8
   1317e:	f7ed fa43 	bl	608 <memcpy>
		_radio.scanner.state = 1;
   13182:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   13186:	f043 0302 	orr.w	r3, r3, #2
   1318a:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
		radio_tmr_tifs_set(RADIO_TIFS);
   1318e:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
   13190:	2302      	movs	r3, #2
   13192:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
   13194:	f003 fa0a 	bl	165ac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   13198:	2000      	movs	r0, #0
   1319a:	f003 f969 	bl	16470 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   1319e:	4628      	mov	r0, r5
   131a0:	f003 f8de 	bl	16360 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   131a4:	f003 facc 	bl	16740 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   131a8:	f003 f926 	bl	163f8 <radio_is_ready>
   131ac:	2800      	cmp	r0, #0
   131ae:	f43f a953 	beq.w	12458 <isr+0x158>
   131b2:	e612      	b.n	12dda <isr+0xada>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   131b4:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   131b8:	4913      	ldr	r1, [pc, #76]	; (13208 <isr+0xf08>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   131ba:	09d2      	lsrs	r2, r2, #7
   131bc:	f362 1386 	bfi	r3, r2, #6, #1
   131c0:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
   131c2:	2206      	movs	r2, #6
   131c4:	e7d4      	b.n	13170 <isr+0xe70>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   131c6:	2800      	cmp	r0, #0
   131c8:	f43f ae39 	beq.w	12e3e <isr+0xb3e>
   131cc:	2801      	cmp	r0, #1
   131ce:	f47f ae30 	bne.w	12e32 <isr+0xb32>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
   131d2:	ab10      	add	r3, sp, #64	; 0x40
   131d4:	464a      	mov	r2, r9
   131d6:	4631      	mov	r1, r6
   131d8:	2000      	movs	r0, #0
   131da:	f7fb f99d 	bl	e518 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   131de:	2800      	cmp	r0, #0
   131e0:	f47f ae2d 	bne.w	12e3e <isr+0xb3e>
   131e4:	e625      	b.n	12e32 <isr+0xb32>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   131e6:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   131ea:	2b07      	cmp	r3, #7
   131ec:	d11a      	bne.n	13224 <isr+0xf24>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   131ee:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   131f2:	0758      	lsls	r0, r3, #29
   131f4:	f47f ae23 	bne.w	12e3e <isr+0xb3e>
   131f8:	e44f      	b.n	12a9a <isr+0x79a>
   131fa:	bf00      	nop
   131fc:	f3af 8000 	nop.w
   13200:	1afd498d 	.word	0x1afd498d
   13204:	00000007 	.word	0x00000007
   13208:	200017c8 	.word	0x200017c8
   1320c:	0001868d 	.word	0x0001868d
   13210:	0001affa 	.word	0x0001affa
   13214:	0000e739 	.word	0x0000e739
   13218:	0000e695 	.word	0x0000e695
   1321c:	00010bd1 	.word	0x00010bd1
   13220:	3b9aca00 	.word	0x3b9aca00
		   (_radio.scanner.phy)) ||
   13224:	2b04      	cmp	r3, #4
   13226:	f47f ac38 	bne.w	12a9a <isr+0x79a>
		   (_radio.scanner.state != 0) &&
   1322a:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1322e:	0799      	lsls	r1, r3, #30
   13230:	f57f ac33 	bpl.w	12a9a <isr+0x79a>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   13234:	f003 f918 	bl	16468 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   13238:	7a3b      	ldrb	r3, [r7, #8]
   1323a:	7802      	ldrb	r2, [r0, #0]
   1323c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13240:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   13244:	f47f ac29 	bne.w	12a9a <isr+0x79a>
		(memcmp(&sreq->scan_req.adv_addr[0],
   13248:	2206      	movs	r2, #6
   1324a:	f107 010a 	add.w	r1, r7, #10
   1324e:	3008      	adds	r0, #8
   13250:	f7ed f9c5 	bl	5de <memcmp>
		   (_radio.scanner.state != 0) &&
   13254:	2800      	cmp	r0, #0
   13256:	f43f adf2 	beq.w	12e3e <isr+0xb3e>
   1325a:	e41e      	b.n	12a9a <isr+0x79a>
	_radio.packet_counter++;
   1325c:	f894 3d00 	ldrb.w	r3, [r4, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   13260:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
	_radio.packet_counter++;
   13264:	3301      	adds	r3, #1
   13266:	f884 3d00 	strb.w	r3, [r4, #3328]	; 0xd00
	u8_t rx_enqueue = 0;
   1326a:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1326c:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
	u8_t rx_enqueue = 0;
   13270:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
   13274:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13278:	2301      	movs	r3, #1
   1327a:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
   1327e:	2f00      	cmp	r7, #0
   13280:	f000 82ba 	beq.w	137f8 <isr+0x14f8>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   13284:	f8d4 5cfc 	ldr.w	r5, [r4, #3324]	; 0xcfc
   13288:	f898 1008 	ldrb.w	r1, [r8, #8]
   1328c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13290:	f3c1 0180 	ubfx	r1, r1, #2, #1
   13294:	f003 0201 	and.w	r2, r3, #1
   13298:	4291      	cmp	r1, r2
   1329a:	f000 8185 	beq.w	135a8 <isr+0x12a8>
		_radio.conn_curr->sn++;
   1329e:	f082 0201 	eor.w	r2, r2, #1
   132a2:	f362 0300 	bfi	r3, r2, #0, #1
   132a6:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   132aa:	7ce3      	ldrb	r3, [r4, #19]
   132ac:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
   132ae:	bf02      	ittt	eq
   132b0:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
   132b4:	f043 0301 	orreq.w	r3, r3, #1
   132b8:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
   132bc:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   132c0:	061a      	lsls	r2, r3, #24
   132c2:	f100 816c 	bmi.w	1359e <isr+0x129e>
			node_tx = _radio.conn_curr->pkt_tx_head;
   132c6:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
   132ca:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
   132ce:	1d30      	adds	r0, r6, #4
   132d0:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
   132d4:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
   132d8:	f1b9 0f00 	cmp.w	r9, #0
   132dc:	f000 8092 	beq.w	13404 <isr+0x1104>
				if (_radio.conn_curr->enc_tx) {
   132e0:	069b      	lsls	r3, r3, #26
   132e2:	d50b      	bpl.n	132fc <isr+0xffc>
					_radio.conn_curr->ccm_tx.counter++;
   132e4:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
   132e8:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
   132ec:	f11b 0201 	adds.w	r2, fp, #1
   132f0:	f14c 0300 	adc.w	r3, ip, #0
   132f4:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
   132f8:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   132fc:	5c43      	ldrb	r3, [r0, r1]
   132fe:	f003 0303 	and.w	r3, r3, #3
   13302:	2b03      	cmp	r3, #3
   13304:	d17e      	bne.n	13404 <isr+0x1104>
	switch (pdu_data_tx->llctrl.opcode) {
   13306:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1330a:	3b02      	subs	r3, #2
   1330c:	2b16      	cmp	r3, #22
   1330e:	d879      	bhi.n	13404 <isr+0x1104>
   13310:	e8df f013 	tbh	[pc, r3, lsl #1]
   13314:	005c0017 	.word	0x005c0017
   13318:	007800ae 	.word	0x007800ae
   1331c:	00780078 	.word	0x00780078
   13320:	00780078 	.word	0x00780078
   13324:	0085007a 	.word	0x0085007a
   13328:	00b50078 	.word	0x00b50078
   1332c:	00780078 	.word	0x00780078
   13330:	00780078 	.word	0x00780078
   13334:	00780078 	.word	0x00780078
   13338:	007800bf 	.word	0x007800bf
   1333c:	00de00d7 	.word	0x00de00d7
   13340:	0109      	.short	0x0109
		_radio.state = STATE_CLOSE;
   13342:	2303      	movs	r3, #3
   13344:	7523      	strb	r3, [r4, #20]
		radio_disable();
   13346:	f003 f839 	bl	163bc <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1334a:	f003 f855 	bl	163f8 <radio_is_ready>
   1334e:	b128      	cbz	r0, 1335c <isr+0x105c>
   13350:	4bc6      	ldr	r3, [pc, #792]	; (1366c <isr+0x136c>)
   13352:	9301      	str	r3, [sp, #4]
   13354:	9300      	str	r3, [sp, #0]
   13356:	4bc6      	ldr	r3, [pc, #792]	; (13670 <isr+0x1370>)
   13358:	f7ff b830 	b.w	123bc <isr+0xbc>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
   1335c:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13360:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13364:	2913      	cmp	r1, #19
   13366:	bf08      	it	eq
   13368:	2116      	moveq	r1, #22
   1336a:	f7fb fd31 	bl	edd0 <terminate_ind_rx_enqueue>
		terminate = 1;
   1336e:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   13370:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13374:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   13378:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
   1337a:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   1337e:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
   13382:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   13384:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
   13388:	d11e      	bne.n	133c8 <isr+0x10c8>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   1338a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1338e:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
   13392:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   13394:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
   13396:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1339a:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   1339e:	f040 80c9 	bne.w	13534 <isr+0x1234>
		if (node_tx) {
   133a2:	b18e      	cbz	r6, 133c8 <isr+0x10c8>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   133a4:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   133a8:	f8d3 e000 	ldr.w	lr, [r3]
   133ac:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   133b0:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
   133b2:	bf06      	itte	eq
   133b4:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   133b8:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   133bc:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
   133c0:	49ac      	ldr	r1, [pc, #688]	; (13674 <isr+0x1374>)
   133c2:	4630      	mov	r0, r6
   133c4:	f7f7 f827 	bl	a416 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
   133c8:	2600      	movs	r6, #0
   133ca:	e0bc      	b.n	13546 <isr+0x1246>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   133cc:	2208      	movs	r2, #8
   133ce:	f10a 010e 	add.w	r1, sl, #14
   133d2:	f105 0094 	add.w	r0, r5, #148	; 0x94
   133d6:	f7ed f917 	bl	608 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   133da:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   133de:	2204      	movs	r2, #4
   133e0:	f10a 0116 	add.w	r1, sl, #22
   133e4:	f500 7089 	add.w	r0, r0, #274	; 0x112
   133e8:	f7ed f90e 	bl	608 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   133ec:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   133f0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   133f4:	f042 0208 	orr.w	r2, r2, #8
   133f8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   133fc:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
   13400:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13404:	2500      	movs	r5, #0
   13406:	e7b3      	b.n	13370 <isr+0x1070>
		_radio.conn_curr->pause_tx = 1;
   13408:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   1340c:	f043 0348 	orr.w	r3, r3, #72	; 0x48
   13410:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13414:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
   13418:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
   1341c:	e7f2      	b.n	13404 <isr+0x1104>
		if (_radio.role == ROLE_MASTER) {
   1341e:	f894 a013 	ldrb.w	sl, [r4, #19]
   13422:	fa5f fa8a 	uxtb.w	sl, sl
   13426:	f1ba 0f04 	cmp.w	sl, #4
   1342a:	d121      	bne.n	13470 <isr+0x1170>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1342c:	7933      	ldrb	r3, [r6, #4]
   1342e:	f043 0303 	orr.w	r3, r3, #3
   13432:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   13434:	2317      	movs	r3, #23
   13436:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   13438:	2303      	movs	r3, #3
   1343a:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
   1343c:	2208      	movs	r2, #8
   1343e:	f105 017a 	add.w	r1, r5, #122	; 0x7a
   13442:	3004      	adds	r0, #4
   13444:	f7ed f8e0 	bl	608 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
   13448:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
   1344c:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
   1344e:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
   13452:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
   13454:	f106 0112 	add.w	r1, r6, #18
   13458:	2208      	movs	r2, #8
   1345a:	6860      	ldr	r0, [r4, #4]
   1345c:	f7ef f86e 	bl	253c <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
   13460:	f106 011a 	add.w	r1, r6, #26
   13464:	4652      	mov	r2, sl
   13466:	6860      	ldr	r0, [r4, #4]
   13468:	f7ef f868 	bl	253c <entropy_get_entropy_isr>
			*node_tx = NULL;
   1346c:	2600      	movs	r6, #0
   1346e:	e7c9      	b.n	13404 <isr+0x1104>
			_radio.conn_curr->pause_tx = 1;
   13470:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   13474:	f043 0308 	orr.w	r3, r3, #8
   13478:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   1347c:	e7c2      	b.n	13404 <isr+0x1104>
		_radio.conn_curr->pause_rx = 0;
   1347e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   13482:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   13486:	f36f 03c3 	bfc	r3, #3, #1
   1348a:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   1348e:	2300      	movs	r3, #0
   13490:	e7c2      	b.n	13418 <isr+0x1118>
		if ((_radio.conn_curr->llcp_length.req !=
   13492:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   13496:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   1349a:	429a      	cmp	r2, r3
   1349c:	d0b2      	beq.n	13404 <isr+0x1104>
		    (_radio.conn_curr->llcp_length.state ==
   1349e:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
   134a2:	f003 0203 	and.w	r2, r3, #3
   134a6:	2a01      	cmp	r2, #1
   134a8:	d1ac      	bne.n	13404 <isr+0x1104>
			_radio.conn_curr->pause_tx = 1;
   134aa:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   134ae:	f042 0208 	orr.w	r2, r2, #8
   134b2:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   134b6:	2202      	movs	r2, #2
   134b8:	f362 0301 	bfi	r3, r2, #0, #2
   134bc:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
   134c0:	e7a0      	b.n	13404 <isr+0x1104>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   134c2:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   134c6:	2202      	movs	r2, #2
   134c8:	f362 0301 	bfi	r3, r2, #0, #2
   134cc:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   134d0:	7ce3      	ldrb	r3, [r4, #19]
   134d2:	2b03      	cmp	r3, #3
   134d4:	d196      	bne.n	13404 <isr+0x1104>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   134d6:	2301      	movs	r3, #1
   134d8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   134dc:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   134e0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   134e4:	2202      	movs	r2, #2
   134e6:	2304      	movs	r3, #4
   134e8:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
   134ec:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   134f0:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
   134f4:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
   134f8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   134fc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   13500:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
   13504:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13508:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
   1350c:	f003 0307 	and.w	r3, r3, #7
   13510:	aa12      	add	r2, sp, #72	; 0x48
   13512:	4413      	add	r3, r2
   13514:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   13518:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
   1351c:	f363 0202 	bfi	r2, r3, #0, #3
   13520:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
   13524:	e76e      	b.n	13404 <isr+0x1104>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   13526:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
   1352a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1352e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   13532:	e7f3      	b.n	1351c <isr+0x121c>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   13534:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
   13538:	4293      	cmp	r3, r2
   1353a:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   1353c:	bf08      	it	eq
   1353e:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13542:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
   13546:	b37d      	cbz	r5, 135a8 <isr+0x12a8>
		connection_release(_radio.conn_curr);
   13548:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   1354c:	f7fb fb2a 	bl	eba4 <connection_release>
		_radio.conn_curr = NULL;
   13550:	2300      	movs	r3, #0
   13552:	f8c4 3cfc 	str.w	r3, [r4, #3324]	; 0xcfc
	if (!radio_tmr_aa_restore()) {
   13556:	f003 f8e7 	bl	16728 <radio_tmr_aa_restore>
   1355a:	b918      	cbnz	r0, 13564 <isr+0x1264>
		radio_tmr_aa_save(radio_tmr_aa_get());
   1355c:	f003 f8d8 	bl	16710 <radio_tmr_aa_get>
   13560:	f003 f8dc 	bl	1671c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
   13564:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13568:	2b00      	cmp	r3, #0
   1356a:	f43e af75 	beq.w	12458 <isr+0x158>
	if (tx_release) {
   1356e:	b11e      	cbz	r6, 13578 <isr+0x1278>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   13570:	4631      	mov	r1, r6
   13572:	8c18      	ldrh	r0, [r3, #32]
   13574:	f7fb fa8c 	bl	ea90 <pdu_node_tx_release>
	if (rx_enqueue) {
   13578:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   1357c:	2b00      	cmp	r3, #0
   1357e:	f43e af6b 	beq.w	12458 <isr+0x158>
		rx_fc_lock(_radio.conn_curr->handle);
   13582:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13586:	8c18      	ldrh	r0, [r3, #32]
   13588:	f7fb f86a 	bl	e660 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
   1358c:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13590:	8c1b      	ldrh	r3, [r3, #32]
   13592:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
   13596:	f7fa ff73 	bl	e480 <packet_rx_enqueue>
   1359a:	f7fe bf5d 	b.w	12458 <isr+0x158>
			_radio.conn_curr->empty = 0;
   1359e:	f36f 13c7 	bfc	r3, #7, #1
   135a2:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
   135a6:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   135a8:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   135ac:	f898 2008 	ldrb.w	r2, [r8, #8]
   135b0:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   135b4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   135b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   135bc:	429a      	cmp	r2, r3
   135be:	f040 80eb 	bne.w	13798 <isr+0x1498>
	    (packet_rx_reserve_get(3) != 0) &&
   135c2:	2003      	movs	r0, #3
   135c4:	f7f9 fdba 	bl	d13c <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   135c8:	2800      	cmp	r0, #0
   135ca:	f000 80e5 	beq.w	13798 <isr+0x1498>
	    (packet_rx_reserve_get(3) != 0) &&
   135ce:	f894 3d6a 	ldrb.w	r3, [r4, #3434]	; 0xd6a
   135d2:	b393      	cbz	r3, 1363a <isr+0x133a>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   135d4:	f8d4 3d34 	ldr.w	r3, [r4, #3380]	; 0xd34
   135d8:	f8d4 2d38 	ldr.w	r2, [r4, #3384]	; 0xd38
	    ((_radio.fc_ena == 0) ||
   135dc:	4293      	cmp	r3, r2
   135de:	d105      	bne.n	135ec <isr+0x12ec>
	      (_radio.fc_req == _radio.fc_ack)) ||
   135e0:	f894 2d68 	ldrb.w	r2, [r4, #3432]	; 0xd68
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   135e4:	f894 1d69 	ldrb.w	r1, [r4, #3433]	; 0xd69
   135e8:	4291      	cmp	r1, r2
   135ea:	d026      	beq.n	1363a <isr+0x133a>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   135ec:	f8d4 2d38 	ldr.w	r2, [r4, #3384]	; 0xd38
	      (_radio.fc_req == _radio.fc_ack)) ||
   135f0:	4293      	cmp	r3, r2
   135f2:	f000 80d1 	beq.w	13798 <isr+0x1498>
	      (_radio.fc_req != _radio.fc_ack) &&
   135f6:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   135fa:	f894 2d69 	ldrb.w	r2, [r4, #3433]	; 0xd69
   135fe:	429a      	cmp	r2, r3
   13600:	f000 80ca 	beq.w	13798 <isr+0x1498>
		(((_radio.fc_req == 0) &&
   13604:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	      (_radio.fc_req != _radio.fc_ack) &&
   13608:	b933      	cbnz	r3, 13618 <isr+0x1318>
		   _radio.conn_curr->handle)) ||
   1360a:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
		(((_radio.fc_req == 0) &&
   1360e:	f8b4 2d66 	ldrh.w	r2, [r4, #3430]	; 0xd66
   13612:	8c1b      	ldrh	r3, [r3, #32]
   13614:	429a      	cmp	r2, r3
   13616:	d010      	beq.n	1363a <isr+0x133a>
		 ((_radio.fc_req != 0) &&
   13618:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
		   _radio.conn_curr->handle)) ||
   1361c:	2b00      	cmp	r3, #0
   1361e:	f000 80bb 	beq.w	13798 <isr+0x1498>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   13622:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
		   _radio.conn_curr->handle)))))) {
   13626:	f8d4 1cfc 	ldr.w	r1, [r4, #3324]	; 0xcfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   1362a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
   1362e:	f8b3 2d60 	ldrh.w	r2, [r3, #3424]	; 0xd60
   13632:	8c0b      	ldrh	r3, [r1, #32]
   13634:	429a      	cmp	r2, r3
   13636:	f040 80af 	bne.w	13798 <isr+0x1498>
		if (pdu_data_rx->len != 0) {
   1363a:	f898 5009 	ldrb.w	r5, [r8, #9]
   1363e:	2d00      	cmp	r5, #0
   13640:	f000 80b3 	beq.w	137aa <isr+0x14aa>
			if (_radio.conn_curr->enc_rx) {
   13644:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13648:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
   1364c:	f015 0510 	ands.w	r5, r5, #16
   13650:	d01b      	beq.n	1368a <isr+0x138a>
				done = radio_ccm_is_done();
   13652:	f003 f90f 	bl	16874 <radio_ccm_is_done>
				LL_ASSERT(done);
   13656:	b9b8      	cbnz	r0, 13688 <isr+0x1388>
   13658:	4b04      	ldr	r3, [pc, #16]	; (1366c <isr+0x136c>)
   1365a:	9301      	str	r3, [sp, #4]
   1365c:	9300      	str	r3, [sp, #0]
   1365e:	4a06      	ldr	r2, [pc, #24]	; (13678 <isr+0x1378>)
   13660:	4b06      	ldr	r3, [pc, #24]	; (1367c <isr+0x137c>)
   13662:	4907      	ldr	r1, [pc, #28]	; (13680 <isr+0x1380>)
   13664:	4807      	ldr	r0, [pc, #28]	; (13684 <isr+0x1384>)
   13666:	f7ff b9fb 	b.w	12a60 <isr+0x760>
   1366a:	bf00      	nop
   1366c:	0001868d 	.word	0x0001868d
   13670:	0001b006 	.word	0x0001b006
   13674:	200018dc 	.word	0x200018dc
   13678:	00019a84 	.word	0x00019a84
   1367c:	0001b06a 	.word	0x0001b06a
   13680:	00019a8b 	.word	0x00019a8b
   13684:	0001b6e6 	.word	0x0001b6e6
				ccm_rx_increment = 1;
   13688:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
   1368a:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   1368e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   13692:	06d9      	lsls	r1, r3, #27
   13694:	d42c      	bmi.n	136f0 <isr+0x13f0>
			    (_radio.conn_curr->pause_rx &&
   13696:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   1369a:	f898 3008 	ldrb.w	r3, [r8, #8]
   1369e:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   136a2:	f012 0f04 	tst.w	r2, #4
   136a6:	d135      	bne.n	13714 <isr+0x1414>
			_radio.conn_curr->appto_expire = 0;
   136a8:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
   136aa:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
   136ae:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   136b2:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   136b6:	d004      	beq.n	136c2 <isr+0x13c2>
   136b8:	2b02      	cmp	r3, #2
   136ba:	d866      	bhi.n	1378a <isr+0x148a>
				*rx_enqueue = 1;
   136bc:	2301      	movs	r3, #1
   136be:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
			_radio.conn_curr->nesn++;
   136c2:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   136c6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   136ca:	f082 0202 	eor.w	r2, r2, #2
   136ce:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
   136d2:	2d00      	cmp	r5, #0
   136d4:	d060      	beq.n	13798 <isr+0x1498>
				_radio.conn_curr->ccm_rx.counter++;
   136d6:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
   136da:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
   136de:	f119 0001 	adds.w	r0, r9, #1
   136e2:	f14a 0100 	adc.w	r1, sl, #0
   136e6:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
   136ea:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
   136ee:	e053      	b.n	13798 <isr+0x1498>
			     !radio_ccm_mic_is_valid()) ||
   136f0:	f003 f8de 	bl	168b0 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   136f4:	2800      	cmp	r0, #0
   136f6:	d1ce      	bne.n	13696 <isr+0x1396>
				_radio.state = STATE_CLOSE;
   136f8:	2303      	movs	r3, #3
   136fa:	7523      	strb	r3, [r4, #20]
				radio_disable();
   136fc:	f002 fe5e 	bl	163bc <radio_disable>
				LL_ASSERT(!radio_is_ready());
   13700:	f002 fe7a 	bl	163f8 <radio_is_ready>
   13704:	4605      	mov	r5, r0
   13706:	b3a0      	cbz	r0, 13772 <isr+0x1472>
   13708:	4b9a      	ldr	r3, [pc, #616]	; (13974 <isr+0x1674>)
   1370a:	9301      	str	r3, [sp, #4]
   1370c:	9300      	str	r3, [sp, #0]
   1370e:	4b9a      	ldr	r3, [pc, #616]	; (13978 <isr+0x1678>)
   13710:	f7fe be54 	b.w	123bc <isr+0xbc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13714:	f003 0103 	and.w	r1, r3, #3
   13718:	2903      	cmp	r1, #3
   1371a:	d1ed      	bne.n	136f8 <isr+0x13f8>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   1371c:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
   13720:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   13724:	f1be 0f00 	cmp.w	lr, #0
   13728:	f002 0240 	and.w	r2, r2, #64	; 0x40
   1372c:	db15      	blt.n	1375a <isr+0x145a>
	       (!conn->role &&
   1372e:	b922      	cbnz	r2, 1373a <isr+0x143a>
		((!conn->refresh &&
   13730:	2902      	cmp	r1, #2
   13732:	d0b9      	beq.n	136a8 <isr+0x13a8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13734:	2911      	cmp	r1, #17
   13736:	d8df      	bhi.n	136f8 <isr+0x13f8>
   13738:	e009      	b.n	1374e <isr+0x144e>
		 (conn->refresh &&
   1373a:	1e8a      	subs	r2, r1, #2
   1373c:	b2d2      	uxtb	r2, r2
   1373e:	2a09      	cmp	r2, #9
   13740:	d8f8      	bhi.n	13734 <isr+0x1434>
   13742:	f240 2e05 	movw	lr, #517	; 0x205
   13746:	fa2e f202 	lsr.w	r2, lr, r2
   1374a:	07d2      	lsls	r2, r2, #31
   1374c:	d4ac      	bmi.n	136a8 <isr+0x13a8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1374e:	4a8b      	ldr	r2, [pc, #556]	; (1397c <isr+0x167c>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13750:	fa22 f101 	lsr.w	r1, r2, r1
   13754:	07ca      	lsls	r2, r1, #31
   13756:	d5cf      	bpl.n	136f8 <isr+0x13f8>
   13758:	e7a6      	b.n	136a8 <isr+0x13a8>
	       (conn->role &&
   1375a:	b92a      	cbnz	r2, 13768 <isr+0x1468>
		((!conn->refresh &&
   1375c:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1375e:	d0a3      	beq.n	136a8 <isr+0x13a8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   13760:	2911      	cmp	r1, #17
   13762:	d8c9      	bhi.n	136f8 <isr+0x13f8>
   13764:	4a86      	ldr	r2, [pc, #536]	; (13980 <isr+0x1680>)
   13766:	e7f3      	b.n	13750 <isr+0x1450>
		 (conn->refresh &&
   13768:	1e8a      	subs	r2, r1, #2
   1376a:	2a01      	cmp	r2, #1
   1376c:	d99c      	bls.n	136a8 <isr+0x13a8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1376e:	290b      	cmp	r1, #11
   13770:	e7f5      	b.n	1375e <isr+0x145e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   13772:	213d      	movs	r1, #61	; 0x3d
   13774:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13778:	f7fb fb2a 	bl	edd0 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   1377c:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13780:	f7fb fa10 	bl	eba4 <connection_release>
				_radio.conn_curr = NULL;
   13784:	f8c4 5cfc 	str.w	r5, [r4, #3324]	; 0xcfc
   13788:	e6e5      	b.n	13556 <isr+0x1256>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
   1378a:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
   1378e:	4640      	mov	r0, r8
   13790:	f7fd fc8a 	bl	110a8 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
   13794:	2800      	cmp	r0, #0
   13796:	d094      	beq.n	136c2 <isr+0x13c2>
		_radio.conn_curr->supervision_expire = 0;
   13798:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
		_radio.crc_expire = 0;
   1379c:	2300      	movs	r3, #0
   1379e:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
	u8_t crc_close = 0;
   137a2:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
   137a4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
   137a8:	e03d      	b.n	13826 <isr+0x1526>
		} else if ((_radio.conn_curr->enc_rx) ||
   137aa:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   137ae:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   137b2:	f013 0f14 	tst.w	r3, #20
   137b6:	d084      	beq.n	136c2 <isr+0x13c2>
					    (conn->latency + 6)) ?
   137b8:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
   137ba:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
   137be:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   137c0:	4298      	cmp	r0, r3
   137c2:	bfc4      	itt	gt
   137c4:	1f83      	subgt	r3, r0, #6
   137c6:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   137c8:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
   137cc:	bfcc      	ite	gt
   137ce:	b29b      	uxthgt	r3, r3
   137d0:	4603      	movle	r3, r0
			if (conn->appto_reload != appto_reload_new) {
   137d2:	4299      	cmp	r1, r3
				conn->appto_reload = appto_reload_new;
   137d4:	bf1e      	ittt	ne
   137d6:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
   137da:	2300      	movne	r3, #0
   137dc:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   137e0:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   137e4:	2b00      	cmp	r3, #0
   137e6:	f47f af6c 	bne.w	136c2 <isr+0x13c2>
				conn->appto_expire = conn->appto_reload;
   137ea:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
   137ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   137f2:	f8a2 004c 	strh.w	r0, [r2, #76]	; 0x4c
   137f6:	e764      	b.n	136c2 <isr+0x13c2>
		if (_radio.crc_expire == 0) {
   137f8:	f894 3d01 	ldrb.w	r3, [r4, #3329]	; 0xd01
   137fc:	b913      	cbnz	r3, 13804 <isr+0x1504>
			_radio.crc_expire = 2;
   137fe:	2302      	movs	r3, #2
   13800:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
		_radio.crc_expire--;
   13804:	f894 3d01 	ldrb.w	r3, [r4, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
   13808:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
		_radio.crc_expire--;
   1380c:	3b01      	subs	r3, #1
   1380e:	b2db      	uxtb	r3, r3
   13810:	f884 3d01 	strb.w	r3, [r4, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
   13814:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
   13818:	fab3 f583 	clz	r5, r3
   1381c:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
   1381e:	bb86      	cbnz	r6, 13882 <isr+0x1582>
			_radio.conn_curr->supervision_expire =
   13820:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   13822:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   13826:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   1382a:	a910      	add	r1, sp, #64	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   1382c:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   13830:	f7fd fae8 	bl	10e04 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13834:	7d23      	ldrb	r3, [r4, #20]
   13836:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   13838:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   1383c:	d010      	beq.n	13860 <isr+0x1560>
   1383e:	bb15      	cbnz	r5, 13886 <isr+0x1586>
   13840:	b137      	cbz	r7, 13850 <isr+0x1550>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13842:	f898 3008 	ldrb.w	r3, [r8, #8]
   13846:	06dd      	lsls	r5, r3, #27
   13848:	d402      	bmi.n	13850 <isr+0x1550>
			 (pdu_data_tx->len == 0)) ||
   1384a:	9b10      	ldr	r3, [sp, #64]	; 0x40
			((crc_ok) && (pdu_data_rx->md == 0) &&
   1384c:	785b      	ldrb	r3, [r3, #1]
   1384e:	b1d3      	cbz	r3, 13886 <isr+0x1586>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   13850:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
			 (pdu_data_tx->len == 0)) ||
   13854:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13858:	2b00      	cmp	r3, #0
   1385a:	bf0c      	ite	eq
   1385c:	2302      	moveq	r3, #2
   1385e:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
   13860:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13862:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
   13864:	d12d      	bne.n	138c2 <isr+0x15c2>
		if (_radio.role == ROLE_MASTER) {
   13866:	7ce3      	ldrb	r3, [r4, #19]
   13868:	2b04      	cmp	r3, #4
   1386a:	d10e      	bne.n	1388a <isr+0x158a>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   1386c:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13870:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13874:	f369 12c7 	bfi	r2, r9, #7, #1
   13878:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   1387c:	f002 fd9e 	bl	163bc <radio_disable>
   13880:	e669      	b.n	13556 <isr+0x1256>
	struct radio_pdu_node_tx *tx_release = NULL;
   13882:	2600      	movs	r6, #0
   13884:	e7cf      	b.n	13826 <isr+0x1526>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13886:	2303      	movs	r3, #3
   13888:	e7ea      	b.n	13860 <isr+0x1560>
			radio_switch_complete_and_disable();
   1388a:	f002 fe07 	bl	1649c <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   1388e:	9910      	ldr	r1, [sp, #64]	; 0x40
   13890:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13894:	780b      	ldrb	r3, [r1, #0]
   13896:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
   1389a:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   1389e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   138a2:	f362 0382 	bfi	r3, r2, #2, #1
   138a6:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   138a8:	f7f9 ffd2 	bl	d850 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   138ac:	f002 fda4 	bl	163f8 <radio_is_ready>
   138b0:	2800      	cmp	r0, #0
   138b2:	f43f ae50 	beq.w	13556 <isr+0x1256>
   138b6:	4b2f      	ldr	r3, [pc, #188]	; (13974 <isr+0x1674>)
   138b8:	9301      	str	r3, [sp, #4]
   138ba:	9300      	str	r3, [sp, #0]
   138bc:	4b31      	ldr	r3, [pc, #196]	; (13984 <isr+0x1684>)
   138be:	f7fe bd7d 	b.w	123bc <isr+0xbc>
		radio_tmr_tifs_set(RADIO_TIFS);
   138c2:	2096      	movs	r0, #150	; 0x96
   138c4:	f002 fe72 	bl	165ac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   138c8:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   138cc:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   138d0:	f000 0007 	and.w	r0, r0, #7
   138d4:	f002 fdcc 	bl	16470 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   138d8:	f002 ff32 	bl	16740 <radio_tmr_end_capture>
   138dc:	e7d7      	b.n	1388e <isr+0x158e>
		LL_ASSERT(0);
   138de:	4b25      	ldr	r3, [pc, #148]	; (13974 <isr+0x1674>)
   138e0:	9301      	str	r3, [sp, #4]
   138e2:	9300      	str	r3, [sp, #0]
   138e4:	4b28      	ldr	r3, [pc, #160]	; (13988 <isr+0x1688>)
   138e6:	f7fe be05 	b.w	124f4 <isr+0x1f4>
	switch (_radio.role) {
   138ea:	7ce2      	ldrb	r2, [r4, #19]
   138ec:	2a04      	cmp	r2, #4
   138ee:	f200 8250 	bhi.w	13d92 <isr+0x1a92>
   138f2:	e8df f012 	tbh	[pc, r2, lsl #1]
   138f6:	023e      	.short	0x023e
   138f8:	00a40005 	.word	0x00a40005
   138fc:	00d900d9 	.word	0x00d900d9
	if(radio_ext_adv_enable_flag ==  true){
   13900:	4a22      	ldr	r2, [pc, #136]	; (1398c <isr+0x168c>)
   13902:	7812      	ldrb	r2, [r2, #0]
   13904:	2a00      	cmp	r2, #0
   13906:	d04f      	beq.n	139a8 <isr+0x16a8>
		if((chain_flag ==1) &&
   13908:	4a21      	ldr	r2, [pc, #132]	; (13990 <isr+0x1690>)
   1390a:	7812      	ldrb	r2, [r2, #0]
   1390c:	2a01      	cmp	r2, #1
   1390e:	d10b      	bne.n	13928 <isr+0x1628>
   13910:	f894 2c8d 	ldrb.w	r2, [r4, #3213]	; 0xc8d
   13914:	f894 3c8c 	ldrb.w	r3, [r4, #3212]	; 0xc8c
   13918:	429a      	cmp	r2, r3
   1391a:	d00f      	beq.n	1393c <isr+0x163c>
			ext_adv_setup();
   1391c:	f7fa fa20 	bl	dd60 <ext_adv_setup>
			radio_tx_enable();
   13920:	f002 fd46 	bl	163b0 <radio_tx_enable>
   13924:	f7fe bd67 	b.w	123f6 <isr+0xf6>
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
   13928:	2b03      	cmp	r3, #3
   1392a:	d107      	bne.n	1393c <isr+0x163c>
   1392c:	b932      	cbnz	r2, 1393c <isr+0x163c>
			(_radio.advertiser.chan_map_current != 0)) {
   1392e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
   13932:	0758      	lsls	r0, r3, #29
   13934:	d002      	beq.n	1393c <isr+0x163c>
			adv_setup();
   13936:	f7fa f8ed 	bl	db14 <adv_setup>
   1393a:	e7f1      	b.n	13920 <isr+0x1620>
			radio_filter_disable();
   1393c:	f002 fdf8 	bl	16530 <radio_filter_disable>
	_radio.role = ROLE_NONE;
   13940:	2500      	movs	r5, #0
   13942:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
   13944:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
   13946:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
   13948:	f002 fe9c 	bl	16684 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1394c:	462a      	mov	r2, r5
   1394e:	4629      	mov	r1, r5
   13950:	4628      	mov	r0, r5
   13952:	4b10      	ldr	r3, [pc, #64]	; (13994 <isr+0x1694>)
   13954:	f7f6 fe10 	bl	a578 <mayfly_enqueue>
	LL_ASSERT(!retval);
   13958:	4605      	mov	r5, r0
   1395a:	2800      	cmp	r0, #0
   1395c:	f000 821f 	beq.w	13d9e <isr+0x1a9e>
   13960:	4b04      	ldr	r3, [pc, #16]	; (13974 <isr+0x1674>)
   13962:	9301      	str	r3, [sp, #4]
   13964:	9300      	str	r3, [sp, #0]
   13966:	4a0c      	ldr	r2, [pc, #48]	; (13998 <isr+0x1698>)
   13968:	4b0c      	ldr	r3, [pc, #48]	; (1399c <isr+0x169c>)
   1396a:	490d      	ldr	r1, [pc, #52]	; (139a0 <isr+0x16a0>)
   1396c:	480d      	ldr	r0, [pc, #52]	; (139a4 <isr+0x16a4>)
   1396e:	f7ff b877 	b.w	12a60 <isr+0x760>
   13972:	bf00      	nop
   13974:	0001868d 	.word	0x0001868d
   13978:	0001b06a 	.word	0x0001b06a
   1397c:	00022060 	.word	0x00022060
   13980:	00022040 	.word	0x00022040
   13984:	0001b07a 	.word	0x0001b07a
   13988:	0001b086 	.word	0x0001b086
   1398c:	20001941 	.word	0x20001941
   13990:	20001911 	.word	0x20001911
   13994:	20008918 	.word	0x20008918
   13998:	00019a84 	.word	0x00019a84
   1399c:	0001b16a 	.word	0x0001b16a
   139a0:	00019a8b 	.word	0x00019a8b
   139a4:	0001bbbe 	.word	0x0001bbbe
		if ((_radio.state == STATE_CLOSE) &&
   139a8:	2b03      	cmp	r3, #3
   139aa:	d103      	bne.n	139b4 <isr+0x16b4>
			(_radio.advertiser.chan_map_current != 0)) {
   139ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
   139b0:	0759      	lsls	r1, r3, #29
   139b2:	d1c0      	bne.n	13936 <isr+0x1636>
			radio_filter_disable();
   139b4:	f002 fdbc 	bl	16530 <radio_filter_disable>
			if ((_radio.state == STATE_CLOSE) &&
   139b8:	7d23      	ldrb	r3, [r4, #20]
   139ba:	2b03      	cmp	r3, #3
   139bc:	d1c0      	bne.n	13940 <isr+0x1640>
				(!_radio.advertiser.is_hdcd)) {
   139be:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
			if ((_radio.state == STATE_CLOSE) &&
   139c2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   139c6:	d1bb      	bne.n	13940 <isr+0x1640>
				entropy_get_entropy_isr(_radio.entropy, &random_delay,
   139c8:	2201      	movs	r2, #1
   139ca:	a910      	add	r1, sp, #64	; 0x40
   139cc:	6860      	ldr	r0, [r4, #4]
   139ce:	f7ee fdb5 	bl	253c <entropy_get_entropy_isr>
				random_delay %= 10;
   139d2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
						HAL_TICKER_US_TO_TICKS(random_delay *
   139d6:	4898      	ldr	r0, [pc, #608]	; (13c38 <isr+0x1938>)
				random_delay %= 10;
   139d8:	230a      	movs	r3, #10
   139da:	fbb1 f2f3 	udiv	r2, r1, r3
   139de:	fb03 1212 	mls	r2, r3, r2, r1
				random_delay += 1;
   139e2:	3201      	adds	r2, #1
   139e4:	b2d2      	uxtb	r2, r2
						HAL_TICKER_US_TO_TICKS(random_delay *
   139e6:	b2d6      	uxtb	r6, r2
   139e8:	fba6 0100 	umull	r0, r1, r6, r0
   139ec:	23e8      	movs	r3, #232	; 0xe8
				random_delay += 1;
   139ee:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
						HAL_TICKER_US_TO_TICKS(random_delay *
   139f2:	fb03 1106 	mla	r1, r3, r6, r1
   139f6:	a38e      	add	r3, pc, #568	; (adr r3, 13c30 <isr+0x1930>)
   139f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   139fc:	f7ec fc34 	bl	268 <__aeabi_uldivmod>
				ticker_status =
   13a00:	f241 1309 	movw	r3, #4361	; 0x1109
   13a04:	9306      	str	r3, [sp, #24]
   13a06:	4b8d      	ldr	r3, [pc, #564]	; (13c3c <isr+0x193c>)
   13a08:	9305      	str	r3, [sp, #20]
   13a0a:	9504      	str	r5, [sp, #16]
   13a0c:	b283      	uxth	r3, r0
   13a0e:	9503      	str	r5, [sp, #12]
   13a10:	9502      	str	r5, [sp, #8]
   13a12:	9501      	str	r5, [sp, #4]
   13a14:	9500      	str	r5, [sp, #0]
   13a16:	2205      	movs	r2, #5
   13a18:	4629      	mov	r1, r5
   13a1a:	4628      	mov	r0, r5
   13a1c:	f7f7 fbba 	bl	b194 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13a20:	f030 0302 	bics.w	r3, r0, #2
   13a24:	d08c      	beq.n	13940 <isr+0x1640>
   13a26:	7ca3      	ldrb	r3, [r4, #18]
   13a28:	2b05      	cmp	r3, #5
   13a2a:	d089      	beq.n	13940 <isr+0x1640>
   13a2c:	4b84      	ldr	r3, [pc, #528]	; (13c40 <isr+0x1940>)
   13a2e:	9301      	str	r3, [sp, #4]
   13a30:	9300      	str	r3, [sp, #0]
   13a32:	4a84      	ldr	r2, [pc, #528]	; (13c44 <isr+0x1944>)
   13a34:	4b84      	ldr	r3, [pc, #528]	; (13c48 <isr+0x1948>)
   13a36:	4985      	ldr	r1, [pc, #532]	; (13c4c <isr+0x194c>)
   13a38:	4885      	ldr	r0, [pc, #532]	; (13c50 <isr+0x1950>)
   13a3a:	f7ff b811 	b.w	12a60 <isr+0x760>
	if (_radio.state == STATE_CLOSE) {
   13a3e:	2b03      	cmp	r3, #3
   13a40:	d124      	bne.n	13a8c <isr+0x178c>
		radio_tmr_tifs_set(RADIO_TIFS);
   13a42:	2096      	movs	r0, #150	; 0x96
   13a44:	f002 fdb2 	bl	165ac <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   13a48:	2300      	movs	r3, #0
   13a4a:	4619      	mov	r1, r3
   13a4c:	461a      	mov	r2, r3
   13a4e:	4618      	mov	r0, r3
   13a50:	f002 fd1a 	bl	16488 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
   13a54:	f894 2d29 	ldrb.w	r2, [r4, #3369]	; 0xd29
   13a58:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
		radio_pkt_rx_set(_radio.packet_rx
   13a5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13a60:	3008      	adds	r0, #8
   13a62:	f002 fc77 	bl	16354 <radio_pkt_rx_set>
		radio_rssi_measure();
   13a66:	f002 fd27 	bl	164b8 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   13a6a:	f001 fef7 	bl	1585c <ctrl_rl_enabled>
   13a6e:	b138      	cbz	r0, 13a80 <isr+0x1780>
			u8_t count, *irks = ctrl_irks_get(&count);
   13a70:	a810      	add	r0, sp, #64	; 0x40
   13a72:	f001 fc4f 	bl	15314 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   13a76:	4601      	mov	r1, r0
   13a78:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   13a7c:	f002 ff22 	bl	168c4 <radio_ar_configure>
		_radio.state = STATE_RX;
   13a80:	2301      	movs	r3, #1
   13a82:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
   13a84:	f002 fc8e 	bl	163a4 <radio_rx_enable>
   13a88:	f7fe bcb5 	b.w	123f6 <isr+0xf6>
		radio_filter_disable();
   13a8c:	f002 fd50 	bl	16530 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   13a90:	7d23      	ldrb	r3, [r4, #20]
   13a92:	2b05      	cmp	r3, #5
   13a94:	f47f af54 	bne.w	13940 <isr+0x1640>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   13a98:	2300      	movs	r3, #0
   13a9a:	9300      	str	r3, [sp, #0]
   13a9c:	2204      	movs	r2, #4
   13a9e:	4619      	mov	r1, r3
   13aa0:	4618      	mov	r0, r3
   13aa2:	f7f7 fbc5 	bl	b230 <ticker_stop>
   13aa6:	e74b      	b.n	13940 <isr+0x1640>
	if (_radio.conn_curr == 0) {
   13aa8:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13aac:	2800      	cmp	r0, #0
   13aae:	f43f af47 	beq.w	13940 <isr+0x1640>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   13ab2:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   13ab6:	b181      	cbz	r1, 13ada <isr+0x17da>
   13ab8:	7ce3      	ldrb	r3, [r4, #19]
   13aba:	2b03      	cmp	r3, #3
   13abc:	d003      	beq.n	13ac6 <isr+0x17c6>
   13abe:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   13ac2:	07da      	lsls	r2, r3, #31
   13ac4:	d509      	bpl.n	13ada <isr+0x17da>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   13ac6:	f7fb f983 	bl	edd0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   13aca:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13ace:	f7fb f869 	bl	eba4 <connection_release>
			_radio.conn_curr = NULL;
   13ad2:	2300      	movs	r3, #0
   13ad4:	f8c4 3cfc 	str.w	r3, [r4, #3324]	; 0xcfc
   13ad8:	e732      	b.n	13940 <isr+0x1640>
	latency_event = _radio.conn_curr->latency_event;
   13ada:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
   13ade:	f894 7d00 	ldrb.w	r7, [r4, #3328]	; 0xd00
	elapsed_event = latency_event + 1;
   13ae2:	f10b 0601 	add.w	r6, fp, #1
   13ae6:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
   13ae8:	2f00      	cmp	r7, #0
   13aea:	f000 8084 	beq.w	13bf6 <isr+0x18f6>
		if (_radio.role == ROLE_SLAVE) {
   13aee:	7ce3      	ldrb	r3, [r4, #19]
   13af0:	2b03      	cmp	r3, #3
   13af2:	d173      	bne.n	13bdc <isr+0x18dc>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   13af4:	f002 fe18 	bl	16728 <radio_tmr_aa_restore>
   13af8:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
   13afa:	f002 fe1b 	bl	16734 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
   13afe:	f8d4 7cfc 	ldr.w	r7, [r4, #3324]	; 0xcfc
				addr_us_get(_radio.conn_curr->phy_rx);
   13b02:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
   13b06:	f003 0307 	and.w	r3, r3, #7
   13b0a:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
   13b0c:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
   13b10:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
   13b12:	d052      	beq.n	13bba <isr+0x18ba>
		return 40;
   13b14:	2b04      	cmp	r3, #4
   13b16:	bf0c      	ite	eq
   13b18:	f44f 78bc 	moveq.w	r8, #376	; 0x178
   13b1c:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   13b20:	f100 0330 	add.w	r3, r0, #48	; 0x30
   13b24:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
   13b26:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   13b28:	930a      	str	r3, [sp, #40]	; 0x28
   13b2a:	f8df a128 	ldr.w	sl, [pc, #296]	; 13c54 <isr+0x1954>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13b2e:	a340      	add	r3, pc, #256	; (adr r3, 13c30 <isr+0x1930>)
   13b30:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
   13b34:	d844      	bhi.n	13bc0 <isr+0x18c0>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13b36:	fba0 010a 	umull	r0, r1, r0, sl
   13b3a:	f7ec fb95 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13b40:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13b42:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13b46:	a33a      	add	r3, pc, #232	; (adr r3, 13c30 <isr+0x1930>)
   13b48:	e9d3 2300 	ldrd	r2, r3, [r3]
   13b4c:	fba0 010a 	umull	r0, r1, r0, sl
   13b50:	f7ec fb8a 	bl	268 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
   13b54:	2300      	movs	r3, #0
   13b56:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   13b58:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   13b5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13b5e:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
   13b62:	b3ab      	cbz	r3, 13bd0 <isr+0x18d0>
				if (pdu_data_tx->len ||
   13b64:	795b      	ldrb	r3, [r3, #5]
   13b66:	b913      	cbnz	r3, 13b6e <isr+0x186e>
   13b68:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
   13b6c:	b10b      	cbz	r3, 13b72 <isr+0x1872>
					_radio.conn_curr->latency_event = 0;
   13b6e:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
   13b70:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
   13b72:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13b76:	2200      	movs	r2, #0
   13b78:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   13b7a:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13b7e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   13b82:	b1c3      	cbz	r3, 13bb6 <isr+0x18b6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   13b84:	429e      	cmp	r6, r3
   13b86:	f080 80c4 	bcs.w	13d12 <isr+0x1a12>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   13b8a:	1b9b      	subs	r3, r3, r6
   13b8c:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
   13b8e:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
   13b90:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
   13b92:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   13b96:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   13b98:	f240 80bd 	bls.w	13d16 <isr+0x1a16>
			else if (_radio.role == ROLE_SLAVE) {
   13b9c:	7ce3      	ldrb	r3, [r4, #19]
   13b9e:	2b03      	cmp	r3, #3
   13ba0:	d109      	bne.n	13bb6 <isr+0x18b6>
				if (latency_event != 0) {
   13ba2:	f1bb 0f00 	cmp.w	fp, #0
   13ba6:	f040 80b6 	bne.w	13d16 <isr+0x1a16>
					force = _radio.conn_curr->slave.force & 0x01;
   13baa:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   13bac:	087b      	lsrs	r3, r7, #1
					if (force) {
   13bae:	f017 0701 	ands.w	r7, r7, #1
   13bb2:	d151      	bne.n	13c58 <isr+0x1958>
					_radio.conn_curr->slave.force >>= 1;
   13bb4:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
   13bb6:	2700      	movs	r7, #0
   13bb8:	e051      	b.n	13c5e <isr+0x195e>
		return 24;
   13bba:	f04f 0818 	mov.w	r8, #24
   13bbe:	e7af      	b.n	13b20 <isr+0x1820>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
   13bc0:	fba9 010a 	umull	r0, r1, r9, sl
   13bc4:	f7ec fb50 	bl	268 <__aeabi_uldivmod>
   13bc8:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
   13bca:	f108 0030 	add.w	r0, r8, #48	; 0x30
   13bce:	e7ba      	b.n	13b46 <isr+0x1846>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   13bd0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   13bd4:	07db      	lsls	r3, r3, #31
   13bd6:	d5cc      	bpl.n	13b72 <isr+0x1872>
				_radio.conn_curr->latency_event =
   13bd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   13bda:	e7c9      	b.n	13b70 <isr+0x1870>
		} else if (reason_peer) {
   13bdc:	b149      	cbz	r1, 13bf2 <isr+0x18f2>
			_radio.conn_curr->master.terminate_ack = 1;
   13bde:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   13be2:	f043 0301 	orr.w	r3, r3, #1
   13be6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   13bea:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
   13bee:	4645      	mov	r5, r8
   13bf0:	e7bf      	b.n	13b72 <isr+0x1872>
	ticks_drift_minus = 0;
   13bf2:	4688      	mov	r8, r1
   13bf4:	e7fb      	b.n	13bee <isr+0x18ee>
	else if (_radio.conn_curr->connect_expire) {
   13bf6:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   13bf8:	b185      	cbz	r5, 13c1c <isr+0x191c>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   13bfa:	42ae      	cmp	r6, r5
   13bfc:	d204      	bcs.n	13c08 <isr+0x1908>
			_radio.conn_curr->connect_expire -= elapsed_event;
   13bfe:	1bad      	subs	r5, r5, r6
   13c00:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   13c02:	463d      	mov	r5, r7
   13c04:	46a8      	mov	r8, r5
   13c06:	e7b8      	b.n	13b7a <isr+0x187a>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   13c08:	213e      	movs	r1, #62	; 0x3e
   13c0a:	f7fb f8e1 	bl	edd0 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   13c0e:	f8d4 0cfc 	ldr.w	r0, [r4, #3324]	; 0xcfc
   13c12:	f7fa ffc7 	bl	eba4 <connection_release>
			_radio.conn_curr = NULL;
   13c16:	f8c4 7cfc 	str.w	r7, [r4, #3324]	; 0xcfc
   13c1a:	e691      	b.n	13940 <isr+0x1640>
		if (!_radio.conn_curr->supervision_expire) {
   13c1c:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
   13c20:	f1b8 0f00 	cmp.w	r8, #0
   13c24:	d1ee      	bne.n	13c04 <isr+0x1904>
			_radio.conn_curr->supervision_expire =
   13c26:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   13c28:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   13c2c:	4645      	mov	r5, r8
   13c2e:	e7a4      	b.n	13b7a <isr+0x187a>
   13c30:	1afd498d 	.word	0x1afd498d
   13c34:	00000007 	.word	0x00000007
   13c38:	d4a51000 	.word	0xd4a51000
   13c3c:	0000e7a1 	.word	0x0000e7a1
   13c40:	0001868d 	.word	0x0001868d
   13c44:	00019a84 	.word	0x00019a84
   13c48:	0001b099 	.word	0x0001b099
   13c4c:	00019a8b 	.word	0x00019a8b
   13c50:	0001b70c 	.word	0x0001b70c
   13c54:	3b9aca00 	.word	0x3b9aca00
						_radio.conn_curr->slave.force |=
   13c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13c5c:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
   13c5e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   13c62:	b123      	cbz	r3, 13c6e <isr+0x196e>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   13c64:	429e      	cmp	r6, r3
   13c66:	d258      	bcs.n	13d1a <isr+0x1a1a>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   13c68:	1b9b      	subs	r3, r3, r6
   13c6a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   13c6e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
   13c72:	b123      	cbz	r3, 13c7e <isr+0x197e>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   13c74:	429e      	cmp	r6, r3
   13c76:	d252      	bcs.n	13d1e <isr+0x1a1e>
			_radio.conn_curr->apto_expire -= elapsed_event;
   13c78:	1b9b      	subs	r3, r3, r6
   13c7a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   13c7e:	f8d4 2cfc 	ldr.w	r2, [r4, #3324]	; 0xcfc
   13c82:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   13c86:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
   13c8a:	b123      	cbz	r3, 13c96 <isr+0x1996>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   13c8c:	429e      	cmp	r6, r3
   13c8e:	d25c      	bcs.n	13d4a <isr+0x1a4a>
			_radio.conn_curr->appto_expire -= elapsed_event;
   13c90:	1b9e      	subs	r6, r3, r6
   13c92:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   13c96:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13c9a:	428b      	cmp	r3, r1
   13c9c:	d006      	beq.n	13cac <isr+0x19ac>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   13c9e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   13ca2:	3b01      	subs	r3, #1
   13ca4:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
   13ca6:	bf9c      	itt	ls
   13ca8:	2300      	movls	r3, #0
   13caa:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   13cac:	b917      	cbnz	r7, 13cb4 <isr+0x19b4>
   13cae:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   13cb0:	455b      	cmp	r3, fp
   13cb2:	d05c      	beq.n	13d6e <isr+0x1a6e>
		lazy = _radio.conn_curr->latency_event + 1;
   13cb4:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   13cb6:	3301      	adds	r3, #1
   13cb8:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   13cba:	b935      	cbnz	r5, 13cca <isr+0x19ca>
   13cbc:	f1b8 0f00 	cmp.w	r8, #0
   13cc0:	d103      	bne.n	13cca <isr+0x19ca>
   13cc2:	b913      	cbnz	r3, 13cca <isr+0x19ca>
	    (lazy != 0) || (force != 0)) {
   13cc4:	2f00      	cmp	r7, #0
   13cc6:	f43f ae3b 	beq.w	13940 <isr+0x1640>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   13cca:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
   13cce:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   13cd0:	3207      	adds	r2, #7
		ticker_status =
   13cd2:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   13cd4:	b2d6      	uxtb	r6, r2
		ticker_status =
   13cd6:	4a3b      	ldr	r2, [pc, #236]	; (13dc4 <isr+0x1ac4>)
   13cd8:	9205      	str	r2, [sp, #20]
   13cda:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
   13cdc:	9606      	str	r6, [sp, #24]
		ticker_status =
   13cde:	9704      	str	r7, [sp, #16]
   13ce0:	9102      	str	r1, [sp, #8]
   13ce2:	9101      	str	r1, [sp, #4]
   13ce4:	f8cd 8000 	str.w	r8, [sp]
   13ce8:	4632      	mov	r2, r6
   13cea:	4608      	mov	r0, r1
   13cec:	f7f7 fa52 	bl	b194 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13cf0:	f030 0302 	bics.w	r3, r0, #2
   13cf4:	f43f ae24 	beq.w	13940 <isr+0x1640>
   13cf8:	7ca3      	ldrb	r3, [r4, #18]
   13cfa:	429e      	cmp	r6, r3
   13cfc:	f43f ae20 	beq.w	13940 <isr+0x1640>
   13d00:	4b31      	ldr	r3, [pc, #196]	; (13dc8 <isr+0x1ac8>)
   13d02:	9301      	str	r3, [sp, #4]
   13d04:	9300      	str	r3, [sp, #0]
   13d06:	4a31      	ldr	r2, [pc, #196]	; (13dcc <isr+0x1acc>)
   13d08:	4b31      	ldr	r3, [pc, #196]	; (13dd0 <isr+0x1ad0>)
   13d0a:	4932      	ldr	r1, [pc, #200]	; (13dd4 <isr+0x1ad4>)
   13d0c:	4832      	ldr	r0, [pc, #200]	; (13dd8 <isr+0x1ad8>)
   13d0e:	f7fe bea7 	b.w	12a60 <isr+0x760>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   13d12:	2108      	movs	r1, #8
   13d14:	e6d7      	b.n	13ac6 <isr+0x17c6>
				force = 1;
   13d16:	2701      	movs	r7, #1
   13d18:	e7a1      	b.n	13c5e <isr+0x195e>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   13d1a:	2122      	movs	r1, #34	; 0x22
   13d1c:	e6d3      	b.n	13ac6 <isr+0x17c6>
			_radio.conn_curr->apto_expire = 0;
   13d1e:	2300      	movs	r3, #0
   13d20:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
   13d24:	2002      	movs	r0, #2
   13d26:	f7f9 fa09 	bl	d13c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
   13d2a:	b928      	cbnz	r0, 13d38 <isr+0x1a38>
   13d2c:	4b26      	ldr	r3, [pc, #152]	; (13dc8 <isr+0x1ac8>)
   13d2e:	9301      	str	r3, [sp, #4]
   13d30:	9300      	str	r3, [sp, #0]
   13d32:	4b27      	ldr	r3, [pc, #156]	; (13dd0 <isr+0x1ad0>)
   13d34:	f7fe bd5e 	b.w	127f4 <isr+0x4f4>
			node_rx->hdr.handle = _radio.conn_curr->handle;
   13d38:	f8d4 3cfc 	ldr.w	r3, [r4, #3324]	; 0xcfc
   13d3c:	8c1b      	ldrh	r3, [r3, #32]
   13d3e:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
   13d40:	230a      	movs	r3, #10
   13d42:	7103      	strb	r3, [r0, #4]
			packet_rx_enqueue();
   13d44:	f7fa fb9c 	bl	e480 <packet_rx_enqueue>
   13d48:	e799      	b.n	13c7e <isr+0x197e>
			_radio.conn_curr->appto_expire = 0;
   13d4a:	2300      	movs	r3, #0
   13d4c:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   13d50:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
   13d54:	2b00      	cmp	r3, #0
   13d56:	d19e      	bne.n	13c96 <isr+0x1996>
   13d58:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13d5c:	428b      	cmp	r3, r1
   13d5e:	d19e      	bne.n	13c9e <isr+0x199e>
				_radio.conn_curr->llcp_type = LLCP_PING;
   13d60:	2307      	movs	r3, #7
   13d62:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   13d66:	1e4b      	subs	r3, r1, #1
   13d68:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   13d6c:	e793      	b.n	13c96 <isr+0x1996>
	lazy = 0;
   13d6e:	463b      	mov	r3, r7
   13d70:	e7a3      	b.n	13cba <isr+0x19ba>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   13d72:	3b04      	subs	r3, #4
   13d74:	2b01      	cmp	r3, #1
   13d76:	d908      	bls.n	13d8a <isr+0x1a8a>
   13d78:	4b13      	ldr	r3, [pc, #76]	; (13dc8 <isr+0x1ac8>)
   13d7a:	9301      	str	r3, [sp, #4]
   13d7c:	9300      	str	r3, [sp, #0]
   13d7e:	4a13      	ldr	r2, [pc, #76]	; (13dcc <isr+0x1acc>)
   13d80:	4b16      	ldr	r3, [pc, #88]	; (13ddc <isr+0x1adc>)
   13d82:	4914      	ldr	r1, [pc, #80]	; (13dd4 <isr+0x1ad4>)
   13d84:	4816      	ldr	r0, [pc, #88]	; (13de0 <isr+0x1ae0>)
   13d86:	f7fe be6b 	b.w	12a60 <isr+0x760>
		_radio.state = STATE_NONE;
   13d8a:	2300      	movs	r3, #0
   13d8c:	7523      	strb	r3, [r4, #20]
   13d8e:	f7fe bb63 	b.w	12458 <isr+0x158>
		LL_ASSERT(0);
   13d92:	4b0d      	ldr	r3, [pc, #52]	; (13dc8 <isr+0x1ac8>)
   13d94:	9301      	str	r3, [sp, #4]
   13d96:	9300      	str	r3, [sp, #0]
   13d98:	4b10      	ldr	r3, [pc, #64]	; (13ddc <isr+0x1adc>)
   13d9a:	f7fe bbab 	b.w	124f4 <isr+0x1f4>
	clock_control_off(_radio.hf_clock, NULL);
   13d9e:	6820      	ldr	r0, [r4, #0]
   13da0:	6843      	ldr	r3, [r0, #4]
   13da2:	4629      	mov	r1, r5
   13da4:	685b      	ldr	r3, [r3, #4]
   13da6:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   13da8:	2201      	movs	r2, #1
   13daa:	4611      	mov	r1, r2
   13dac:	4628      	mov	r0, r5
   13dae:	f7f6 fbbb 	bl	a528 <mayfly_enable>
   13db2:	f7fe bb51 	b.w	12458 <isr+0x158>
		LL_ASSERT(0);
   13db6:	4b04      	ldr	r3, [pc, #16]	; (13dc8 <isr+0x1ac8>)
   13db8:	9301      	str	r3, [sp, #4]
   13dba:	9300      	str	r3, [sp, #0]
   13dbc:	4b09      	ldr	r3, [pc, #36]	; (13de4 <isr+0x1ae4>)
   13dbe:	f7fe bb99 	b.w	124f4 <isr+0x1f4>
   13dc2:	bf00      	nop
   13dc4:	0000e7e9 	.word	0x0000e7e9
   13dc8:	0001868d 	.word	0x0001868d
   13dcc:	00019a84 	.word	0x00019a84
   13dd0:	0001b0a7 	.word	0x0001b0a7
   13dd4:	00019a8b 	.word	0x00019a8b
   13dd8:	0001b77a 	.word	0x0001b77a
   13ddc:	0001b0b6 	.word	0x0001b0b6
   13de0:	0001b7f0 	.word	0x0001b7f0
   13de4:	0001b0cc 	.word	0x0001b0cc

00013de8 <radio_init>:
{
   13de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
   13dec:	4e3e      	ldr	r6, [pc, #248]	; (13ee8 <radio_init+0x100>)
{
   13dee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13df0:	f89d c01c 	ldrb.w	ip, [sp, #28]
   13df4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
   13df8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
   13dfc:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
   13e00:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   13e02:	f44f 70aa 	mov.w	r0, #340	; 0x154
   13e06:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
   13e0a:	f886 1d08 	strb.w	r1, [r6, #3336]	; 0xd08
	_radio.conn_pool = mem_radio;
   13e0e:	f8c6 4cf0 	str.w	r4, [r6, #3312]	; 0xcf0
	mem_radio_end = mem_radio + mem_size;
   13e12:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
   13e14:	f10c 0401 	add.w	r4, ip, #1
   13e18:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
   13e1a:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
   13e1c:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
   13e20:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   13e24:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
	rx_count_max += 3;
   13e28:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   13e2a:	bf98      	it	ls
   13e2c:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
   13e30:	f8a6 8d1c 	strh.w	r8, [r6, #3356]	; 0xd1c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   13e34:	bf88      	it	hi
   13e36:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
   13e3a:	f886 2d3c 	strb.w	r2, [r6, #3388]	; 0xd3c
		_radio.packet_rx_data_pool_size =
   13e3e:	bf8c      	ite	hi
   13e40:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   13e44:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
   13e48:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
   13e4c:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
   13e50:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
   13e54:	bf8c      	ite	hi
   13e56:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   13e5a:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
   13e5c:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
   13e60:	f8a6 2d1e 	strh.w	r2, [r6, #3358]	; 0xd1e
	_radio.packet_tx_count = (tx_count_max + 1);
   13e64:	f886 cd5c 	strb.w	ip, [r6, #3420]	; 0xd5c
	_radio.packet_rx = (void *)mem_radio;
   13e68:	f8c6 0d24 	str.w	r0, [r6, #3364]	; 0xd24
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13e6c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
   13e70:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13e74:	f8b6 4d1e 	ldrh.w	r4, [r6, #3358]	; 0xd1e
	_radio.pkt_tx = (void *)mem_radio;
   13e78:	f8c6 0d54 	str.w	r0, [r6, #3412]	; 0xd54
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13e7c:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13e7e:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
   13e82:	f8c6 0d58 	str.w	r0, [r6, #3416]	; 0xd58
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   13e86:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13e88:	f8a6 2d20 	strh.w	r2, [r6, #3360]	; 0xd20
	_radio.pkt_rx_data_pool = mem_radio;
   13e8c:	f8c6 0d14 	str.w	r0, [r6, #3348]	; 0xd14
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13e90:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
   13e94:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   13e96:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
   13e9a:	f8c6 0d2c 	str.w	r0, [r6, #3372]	; 0xd2c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
   13e9e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13ea2:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
   13ea6:	f8c6 0d40 	str.w	r0, [r6, #3392]	; 0xd40
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13eaa:	340a      	adds	r4, #10
   13eac:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   13eb0:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   13eb2:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
   13eb4:	f8a6 4d50 	strh.w	r4, [r6, #3408]	; 0xd50
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   13eb8:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
   13ebc:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
   13ebe:	f886 3cf8 	strb.w	r3, [r6, #3320]	; 0xcf8
	_radio.packet_rx_count = (rx_count_max + 1);
   13ec2:	f886 ed28 	strb.w	lr, [r6, #3368]	; 0xd28
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13ec6:	f886 2d22 	strb.w	r2, [r6, #3362]	; 0xd22
	_radio.pkt_tx_data_pool = mem_radio;
   13eca:	f8c6 0d48 	str.w	r0, [r6, #3400]	; 0xd48
	if (retcode) {
   13ece:	d003      	beq.n	13ed8 <radio_init+0xf0>
		return (retcode + mem_size);
   13ed0:	442c      	add	r4, r5
}
   13ed2:	4620      	mov	r0, r4
   13ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
   13ed8:	2301      	movs	r3, #1
   13eda:	f886 3d6a 	strb.w	r3, [r6, #3434]	; 0xd6a
	common_init();
   13ede:	f7f9 f9f1 	bl	d2c4 <common_init>
	radio_setup();
   13ee2:	f002 f965 	bl	161b0 <radio_setup>
	return retcode;
   13ee6:	e7f4      	b.n	13ed2 <radio_init+0xea>
   13ee8:	20000b98 	.word	0x20000b98

00013eec <ll_reset>:
{
   13eec:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   13eee:	2103      	movs	r1, #3
   13ef0:	2005      	movs	r0, #5
   13ef2:	f7f9 fad1 	bl	d498 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   13ef6:	2104      	movs	r1, #4
   13ef8:	2006      	movs	r0, #6
   13efa:	f7f9 facd 	bl	d498 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   13efe:	4c22      	ldr	r4, [pc, #136]	; (13f88 <ll_reset+0x9c>)
   13f00:	2500      	movs	r5, #0
   13f02:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
   13f06:	b2ab      	uxth	r3, r5
   13f08:	429a      	cmp	r2, r3
   13f0a:	f105 0501 	add.w	r5, r5, #1
   13f0e:	d835      	bhi.n	13f7c <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
   13f10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   13f14:	f36f 13c7 	bfc	r3, #7, #1
   13f18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
   13f1c:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	_radio.advertiser.conn = NULL;
   13f20:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
   13f22:	f360 0300 	bfi	r3, r0, #0, #1
   13f26:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13f2a:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   13f2e:	f8b4 3d1e 	ldrh.w	r3, [r4, #3358]	; 0xd1e
   13f32:	fbb3 f3f2 	udiv	r3, r3, r2
   13f36:	f884 3d22 	strb.w	r3, [r4, #3362]	; 0xd22
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13f3a:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
	_radio.packet_rx_last = 0;
   13f3e:	f884 0d29 	strb.w	r0, [r4, #3369]	; 0xd29
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13f42:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
   13f44:	f884 0d5d 	strb.w	r0, [r4, #3421]	; 0xd5d
	_radio.packet_release_last = 0;
   13f48:	f884 0d60 	strb.w	r0, [r4, #3424]	; 0xd60
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   13f4c:	f884 3d3c 	strb.w	r3, [r4, #3388]	; 0xd3c
	_radio.fc_ack = _radio.fc_req;
   13f50:	f894 3d68 	ldrb.w	r3, [r4, #3432]	; 0xd68
	_radio.advertiser.conn = NULL;
   13f54:	f8c4 0c18 	str.w	r0, [r4, #3096]	; 0xc18
	_radio.scanner.conn = NULL;
   13f58:	f8c4 0c54 	str.w	r0, [r4, #3156]	; 0xc54
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   13f5c:	f8a4 2d20 	strh.w	r2, [r4, #3360]	; 0xd20
	_radio.packet_rx_acquire = 0;
   13f60:	f884 0d2a 	strb.w	r0, [r4, #3370]	; 0xd2a
	_radio.packet_tx_last = 0;
   13f64:	f884 0d5e 	strb.w	r0, [r4, #3422]	; 0xd5e
	_radio.packet_release_first = 0;
   13f68:	f884 0d5f 	strb.w	r0, [r4, #3423]	; 0xd5f
	_radio.fc_ack = _radio.fc_req;
   13f6c:	f884 3d69 	strb.w	r3, [r4, #3433]	; 0xd69
	ll_filter_reset(false);
   13f70:	f001 ff02 	bl	15d78 <ll_filter_reset>
}
   13f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
   13f78:	f7f9 b9a4 	b.w	d2c4 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   13f7c:	1da8      	adds	r0, r5, #6
   13f7e:	21ff      	movs	r1, #255	; 0xff
   13f80:	b2c0      	uxtb	r0, r0
   13f82:	f7f9 fa89 	bl	d498 <role_disable>
   13f86:	e7bc      	b.n	13f02 <ll_reset+0x16>
   13f88:	20000b98 	.word	0x20000b98

00013f8c <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   13f8c:	4b02      	ldr	r3, [pc, #8]	; (13f98 <ll_adv_is_enabled+0xc>)
   13f8e:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
   13f92:	09c0      	lsrs	r0, r0, #7
   13f94:	4770      	bx	lr
   13f96:	bf00      	nop
   13f98:	20000b98 	.word	0x20000b98

00013f9c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   13f9c:	4b05      	ldr	r3, [pc, #20]	; (13fb4 <radio_adv_filter_pol_get+0x18>)
   13f9e:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
   13fa2:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
   13fa4:	bfba      	itte	lt
   13fa6:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
   13faa:	f000 0003 	andlt.w	r0, r0, #3
   13fae:	2000      	movge	r0, #0
}
   13fb0:	4770      	bx	lr
   13fb2:	bf00      	nop
   13fb4:	20000b98 	.word	0x20000b98

00013fb8 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13fb8:	4a09      	ldr	r2, [pc, #36]	; (13fe0 <ll_scan_is_enabled+0x28>)
   13fba:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
   13fbe:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
	       (_radio.scanner.conn ? BIT(2) : 0);
   13fc2:	f8d2 2c54 	ldr.w	r2, [r2, #3156]	; 0xc54
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13fc6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
   13fca:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
   13fcc:	f003 0301 	and.w	r3, r3, #1
   13fd0:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
   13fd4:	bf14      	ite	ne
   13fd6:	2004      	movne	r0, #4
   13fd8:	2000      	moveq	r0, #0
}
   13fda:	4318      	orrs	r0, r3
   13fdc:	4770      	bx	lr
   13fde:	bf00      	nop
   13fe0:	20000b98 	.word	0x20000b98

00013fe4 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   13fe4:	4b05      	ldr	r3, [pc, #20]	; (13ffc <radio_scan_filter_pol_get+0x18>)
   13fe6:	f893 0c2c 	ldrb.w	r0, [r3, #3116]	; 0xc2c
   13fea:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
   13fee:	bf1c      	itt	ne
   13ff0:	f893 0c2d 	ldrbne.w	r0, [r3, #3117]	; 0xc2d
   13ff4:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
   13ff8:	4770      	bx	lr
   13ffa:	bf00      	nop
   13ffc:	20000b98 	.word	0x20000b98

00014000 <radio_connect_enable>:
{
   14000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
   14004:	f8df 8384 	ldr.w	r8, [pc, #900]	; 1438c <radio_connect_enable+0x38c>
{
   14008:	b087      	sub	sp, #28
	if (_radio.scanner.conn) {
   1400a:	f8d8 6c54 	ldr.w	r6, [r8, #3156]	; 0xc54
{
   1400e:	9303      	str	r3, [sp, #12]
   14010:	4683      	mov	fp, r0
   14012:	468a      	mov	sl, r1
   14014:	4691      	mov	r9, r2
   14016:	4645      	mov	r5, r8
	if (_radio.scanner.conn) {
   14018:	2e00      	cmp	r6, #0
   1401a:	f040 819c 	bne.w	14356 <radio_connect_enable+0x356>
	link = mem_acquire(&_radio.link_rx_free);
   1401e:	f508 6053 	add.w	r0, r8, #3376	; 0xd30
   14022:	f7f6 f9de 	bl	a3e2 <mem_acquire>
	if (!link) {
   14026:	4607      	mov	r7, r0
   14028:	b150      	cbz	r0, 14040 <radio_connect_enable+0x40>
	conn = mem_acquire(&_radio.conn_free);
   1402a:	f608 40f4 	addw	r0, r8, #3316	; 0xcf4
   1402e:	f7f6 f9d8 	bl	a3e2 <mem_acquire>
	if (!conn) {
   14032:	4604      	mov	r4, r0
   14034:	b930      	cbnz	r0, 14044 <radio_connect_enable+0x44>
		mem_release(link, &_radio.link_rx_free);
   14036:	f508 6153 	add.w	r1, r8, #3376	; 0xd30
   1403a:	4638      	mov	r0, r7
   1403c:	f7f6 f9eb 	bl	a416 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   14040:	2007      	movs	r0, #7
   14042:	e15c      	b.n	142fe <radio_connect_enable+0x2fe>
	_radio.scanner.adv_addr_type = adv_addr_type;
   14044:	f898 3c2d 	ldrb.w	r3, [r8, #3117]	; 0xc2d
   14048:	f36b 1386 	bfi	r3, fp, #6, #1
   1404c:	f888 3c2d 	strb.w	r3, [r8, #3117]	; 0xc2d
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   14050:	2206      	movs	r2, #6
   14052:	4651      	mov	r1, sl
   14054:	f608 4036 	addw	r0, r8, #3126	; 0xc36
   14058:	f7ec fad6 	bl	608 <memcpy>
	_radio.scanner.conn_latency = latency;
   1405c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   14060:	f8a8 3c4a 	strh.w	r3, [r8, #3146]	; 0xc4a
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   14064:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
   14066:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	_radio.scanner.conn_interval = interval;
   1406a:	f8a8 9c48 	strh.w	r9, [r8, #3144]	; 0xc48
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   1406e:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
   14070:	f8a8 3c4c 	strh.w	r3, [r8, #3148]	; 0xc4c
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   14074:	f002 f97a 	bl	1636c <radio_tx_ready_delay_get>
   14078:	49bb      	ldr	r1, [pc, #748]	; (14368 <radio_connect_enable+0x368>)
   1407a:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1407e:	a3b8      	add	r3, pc, #736	; (adr r3, 14360 <radio_connect_enable+0x360>)
   14080:	e9d3 2300 	ldrd	r2, r3, [r3]
   14084:	fba0 0101 	umull	r0, r1, r0, r1
   14088:	f7ec f8ee 	bl	268 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
   1408c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
   14090:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14094:	f8c8 0c50 	str.w	r0, [r8, #3152]	; 0xc50
	conn->handle = 0xFFFF;
   14098:	8423      	strh	r3, [r4, #32]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1409a:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 14390 <radio_connect_enable+0x390>
	conn->llcp_features = RADIO_BLE_FEAT;
   1409e:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
   140a2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   140a6:	2603      	movs	r6, #3
	consecutive_cnt = 1;
   140a8:	f04f 0901 	mov.w	r9, #1
	bt_rand(&access_addr, sizeof(u32_t));
   140ac:	2104      	movs	r1, #4
   140ae:	a805      	add	r0, sp, #20
   140b0:	f7f7 f9ce 	bl	b450 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   140b4:	f8dd c014 	ldr.w	ip, [sp, #20]
   140b8:	2000      	movs	r0, #0
   140ba:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
   140be:	231f      	movs	r3, #31
	transitions = 0;
   140c0:	4602      	mov	r2, r0
	consecutive_cnt = 1;
   140c2:	2101      	movs	r1, #1
	while (bit_idx--) {
   140c4:	3b01      	subs	r3, #1
   140c6:	b2db      	uxtb	r3, r3
   140c8:	2bff      	cmp	r3, #255	; 0xff
   140ca:	d103      	bne.n	140d4 <radio_connect_enable+0xd4>
   140cc:	b3d0      	cbz	r0, 14144 <radio_connect_enable+0x144>
   140ce:	f8cd c014 	str.w	ip, [sp, #20]
   140d2:	e037      	b.n	14144 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
   140d4:	fa2c fe03 	lsr.w	lr, ip, r3
   140d8:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
   140dc:	45d6      	cmp	lr, sl
   140de:	d11a      	bne.n	14116 <radio_connect_enable+0x116>
			consecutive_cnt++;
   140e0:	3101      	adds	r1, #1
   140e2:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
   140e4:	2906      	cmp	r1, #6
   140e6:	d807      	bhi.n	140f8 <radio_connect_enable+0xf8>
   140e8:	2b1b      	cmp	r3, #27
   140ea:	d81a      	bhi.n	14122 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
   140ec:	b122      	cbz	r2, 140f8 <radio_connect_enable+0xf8>
   140ee:	2b1b      	cmp	r3, #27
   140f0:	d017      	beq.n	14122 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
   140f2:	2a01      	cmp	r2, #1
   140f4:	d815      	bhi.n	14122 <radio_connect_enable+0x122>
   140f6:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
   140f8:	fa09 f103 	lsl.w	r1, r9, r3
			if (consecutive_bit) {
   140fc:	f1be 0f00 	cmp.w	lr, #0
   14100:	f000 8100 	beq.w	14304 <radio_connect_enable+0x304>
				access_addr &= ~BIT(bit_idx);
   14104:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
   14108:	f04f 0e00 	mov.w	lr, #0
			transitions++;
   1410c:	3201      	adds	r2, #1
   1410e:	2001      	movs	r0, #1
   14110:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   14112:	4601      	mov	r1, r0
   14114:	e005      	b.n	14122 <radio_connect_enable+0x122>
			transitions++;
   14116:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
   14118:	2b1b      	cmp	r3, #27
			transitions++;
   1411a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
   1411c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
   14120:	d9e5      	bls.n	140ee <radio_connect_enable+0xee>
		if (transitions > 24) {
   14122:	2a18      	cmp	r2, #24
   14124:	f240 80f6 	bls.w	14314 <radio_connect_enable+0x314>
   14128:	b108      	cbz	r0, 1412e <radio_connect_enable+0x12e>
   1412a:	f8cd c014 	str.w	ip, [sp, #20]
   1412e:	3301      	adds	r3, #1
   14130:	9a05      	ldr	r2, [sp, #20]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   14132:	fa09 f303 	lsl.w	r3, r9, r3
			if (consecutive_bit) {
   14136:	f1be 0f00 	cmp.w	lr, #0
   1413a:	f000 80e8 	beq.w	1430e <radio_connect_enable+0x30e>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   1413e:	425b      	negs	r3, r3
   14140:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
   14142:	9305      	str	r3, [sp, #20]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   14144:	9b05      	ldr	r3, [sp, #20]
   14146:	a806      	add	r0, sp, #24
   14148:	ea83 0308 	eor.w	r3, r3, r8
   1414c:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   14150:	2104      	movs	r1, #4
   14152:	f7f6 faf1 	bl	a738 <util_ones_count_get>
   14156:	2801      	cmp	r0, #1
   14158:	f240 80e3 	bls.w	14322 <radio_connect_enable+0x322>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1415c:	9b05      	ldr	r3, [sp, #20]
   1415e:	b29a      	uxth	r2, r3
   14160:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   14164:	f000 80d8 	beq.w	14318 <radio_connect_enable+0x318>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   14168:	2204      	movs	r2, #4
   1416a:	a905      	add	r1, sp, #20
   1416c:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
   14170:	9305      	str	r3, [sp, #20]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   14172:	f7ec fa49 	bl	608 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
   14176:	2103      	movs	r1, #3
   14178:	f104 0014 	add.w	r0, r4, #20
   1417c:	f7f7 f968 	bl	b450 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   14180:	2205      	movs	r2, #5
   14182:	497a      	ldr	r1, [pc, #488]	; (1436c <radio_connect_enable+0x36c>)
   14184:	f104 0017 	add.w	r0, r4, #23
   14188:	f7ec fa3e 	bl	608 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   1418c:	f895 2d07 	ldrb.w	r2, [r5, #3335]	; 0xd07
   14190:	7f63      	ldrb	r3, [r4, #29]
   14192:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
   14196:	f36f 1386 	bfc	r3, #6, #1
   1419a:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
   1419c:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
   1419e:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
   141a0:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
   141a2:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
   141a4:	f8b5 1d0a 	ldrh.w	r1, [r5, #3338]	; 0xd0a
	conn->conn_interval = _radio.scanner.conn_interval;
   141a8:	f8b5 ec48 	ldrh.w	lr, [r5, #3144]	; 0xc48
	conn->latency = _radio.scanner.conn_latency;
   141ac:	f8b5 0c4a 	ldrh.w	r0, [r5, #3146]	; 0xc4a
	conn->default_tx_octets = _radio.default_tx_octets;
   141b0:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   141b2:	211b      	movs	r1, #27
   141b4:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   141b6:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   141b8:	f8b5 1d0c 	ldrh.w	r1, [r5, #3340]	; 0xd0c
   141bc:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   141be:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
   141c2:	f8b5 6d0e 	ldrh.w	r6, [r5, #3342]	; 0xd0e
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   141c6:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   141c8:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   141ca:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
   141ce:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
   141d0:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
   141d4:	2601      	movs	r6, #1
   141d6:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
   141da:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
   141de:	f363 11c7 	bfi	r1, r3, #7, #1
   141e2:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   141e6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
   141ea:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
   141ee:	f366 0102 	bfi	r1, r6, #0, #3
   141f2:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   141f6:	f8b5 cd10 	ldrh.w	ip, [r5, #3344]	; 0xd10
	conn->latency_prepare = 0;
   141fa:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
   141fc:	b2c9      	uxtb	r1, r1
   141fe:	f36c 01c5 	bfi	r1, ip, #3, #3
   14202:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
   14206:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
   1420a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
   1420c:	f366 0102 	bfi	r1, r6, #0, #3
   14210:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
   14214:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
   14216:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
   14218:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
   1421c:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
   1421e:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
   14220:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
   14224:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   14228:	f363 0100 	bfi	r1, r3, #0, #1
   1422c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
   14230:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14234:	fb02 f20e 	mul.w	r2, r2, lr
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   14238:	f8b5 1c4c 	ldrh.w	r1, [r5, #3148]	; 0xc4c
	conn->supervision_expire = 0;
   1423c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   14240:	1e56      	subs	r6, r2, #1
   14242:	f242 7e10 	movw	lr, #10000	; 0x2710
   14246:	fb0e 6101 	mla	r1, lr, r1, r6
	conn->procedure_expire = 0;
   1424a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   1424e:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14252:	4b47      	ldr	r3, [pc, #284]	; (14370 <radio_connect_enable+0x370>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   14254:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14256:	4947      	ldr	r1, [pc, #284]	; (14374 <radio_connect_enable+0x374>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14258:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1425a:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1425c:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14260:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14264:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14266:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1426a:	1d81      	adds	r1, r0, #6
   1426c:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1426e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14272:	dc6a      	bgt.n	1434a <radio_connect_enable+0x34a>
	conn->llcp_version.tx = 0;
   14274:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14278:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
   1427c:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
   1427e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   14282:	f360 0341 	bfi	r3, r0, #1, #1
   14286:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
   1428a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
   1428e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
   14292:	f360 1304 	bfi	r3, r0, #4, #1
   14296:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
   1429a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
   1429e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
   142a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
   142a6:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
   142aa:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
   142ae:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
   142b2:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   142b6:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   142ba:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   142be:	f8c4 70b4 	str.w	r7, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   142c2:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   142c6:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
   142ca:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   142ce:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   142d2:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   142d6:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
   142da:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   142de:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   142e2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   142e6:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   142ea:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   142ee:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   142f2:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   142f6:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
   142fa:	f8c5 4c54 	str.w	r4, [r5, #3156]	; 0xc54
}
   142fe:	b007      	add	sp, #28
   14300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
   14304:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
   14308:	f04f 0e01 	mov.w	lr, #1
   1430c:	e6fe      	b.n	1410c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1430e:	3b01      	subs	r3, #1
   14310:	4313      	orrs	r3, r2
   14312:	e716      	b.n	14142 <radio_connect_enable+0x142>
		if (transitions > 24) {
   14314:	46f2      	mov	sl, lr
   14316:	e6d5      	b.n	140c4 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   14318:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1431a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
   1431e:	f47f af23 	bne.w	14168 <radio_connect_enable+0x168>
   14322:	3e01      	subs	r6, #1
	LL_ASSERT(retry);
   14324:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   14328:	f47f aec0 	bne.w	140ac <radio_connect_enable+0xac>
   1432c:	4b12      	ldr	r3, [pc, #72]	; (14378 <radio_connect_enable+0x378>)
   1432e:	9301      	str	r3, [sp, #4]
   14330:	9300      	str	r3, [sp, #0]
   14332:	4a12      	ldr	r2, [pc, #72]	; (1437c <radio_connect_enable+0x37c>)
   14334:	4b12      	ldr	r3, [pc, #72]	; (14380 <radio_connect_enable+0x380>)
   14336:	4913      	ldr	r1, [pc, #76]	; (14384 <radio_connect_enable+0x384>)
   14338:	4813      	ldr	r0, [pc, #76]	; (14388 <radio_connect_enable+0x388>)
   1433a:	f7ed f9d1 	bl	16e0 <printk>
   1433e:	4040      	eors	r0, r0
   14340:	f380 8811 	msr	BASEPRI, r0
   14344:	f04f 0004 	mov.w	r0, #4
   14348:	df02      	svc	2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1434a:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   1434e:	33fa      	adds	r3, #250	; 0xfa
   14350:	441a      	add	r2, r3
   14352:	b292      	uxth	r2, r2
   14354:	e78e      	b.n	14274 <radio_connect_enable+0x274>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14356:	200c      	movs	r0, #12
   14358:	e7d1      	b.n	142fe <radio_connect_enable+0x2fe>
   1435a:	bf00      	nop
   1435c:	f3af 8000 	nop.w
   14360:	1afd498d 	.word	0x1afd498d
   14364:	00000007 	.word	0x00000007
   14368:	3b9aca00 	.word	0x3b9aca00
   1436c:	2000189a 	.word	0x2000189a
   14370:	01c9c37f 	.word	0x01c9c37f
   14374:	026259ff 	.word	0x026259ff
   14378:	0001868d 	.word	0x0001868d
   1437c:	00019a84 	.word	0x00019a84
   14380:	0001b256 	.word	0x0001b256
   14384:	00019a8b 	.word	0x00019a8b
   14388:	0001bcd3 	.word	0x0001bcd3
   1438c:	20000b98 	.word	0x20000b98
   14390:	8e89bed6 	.word	0x8e89bed6

00014394 <ll_conn_update>:
{
   14394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14398:	460c      	mov	r4, r1
   1439a:	4690      	mov	r8, r2
   1439c:	461d      	mov	r5, r3
   1439e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   143a2:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
   143a6:	f7f9 f861 	bl	d46c <connection_get>
	if (!conn) {
   143aa:	b330      	cbz	r0, 143fa <ll_conn_update+0x66>
	if (!cmd) {
   143ac:	2c00      	cmp	r4, #0
   143ae:	d14a      	bne.n	14446 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
   143b0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   143b4:	06d9      	lsls	r1, r3, #27
   143b6:	d407      	bmi.n	143c8 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
   143b8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
   143bc:	069a      	lsls	r2, r3, #26
   143be:	d541      	bpl.n	14444 <ll_conn_update+0xb0>
		     (conn->llcp_features &
   143c0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
   143c4:	079b      	lsls	r3, r3, #30
   143c6:	d43d      	bmi.n	14444 <ll_conn_update+0xb0>
		} else if (conn->role) {
   143c8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   143cc:	2b00      	cmp	r3, #0
   143ce:	da17      	bge.n	14400 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   143d0:	201a      	movs	r0, #26
   143d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
   143d6:	428b      	cmp	r3, r1
   143d8:	d00f      	beq.n	143fa <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
   143da:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
   143de:	f003 0207 	and.w	r2, r3, #7
   143e2:	2a03      	cmp	r2, #3
   143e4:	d109      	bne.n	143fa <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   143e6:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   143ea:	b2db      	uxtb	r3, r3
   143ec:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
   143f0:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
   143f4:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
   143f8:	e021      	b.n	1443e <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
   143fa:	200c      	movs	r0, #12
   143fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
   14400:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   14404:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   14408:	429a      	cmp	r2, r3
   1440a:	d1f6      	bne.n	143fa <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1440c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
   14410:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
   14414:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
   14416:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   14418:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   1441c:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
   14420:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
   14422:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   14426:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
   1442a:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   1442e:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
   14432:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   14436:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
   1443a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   1443e:	2000      	movs	r0, #0
   14440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
   14444:	2401      	movs	r4, #1
		cmd--;
   14446:	3c01      	subs	r4, #1
		if (cmd) {
   14448:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1444c:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
   14450:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
   14454:	d1bf      	bne.n	143d6 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
   14456:	4299      	cmp	r1, r3
   14458:	d1cf      	bne.n	143fa <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
   1445a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
   1445e:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   14462:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   14466:	b2db      	uxtb	r3, r3
   14468:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   1446c:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
   1446e:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   14472:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   14476:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
   1447a:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   1447e:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
   14482:	e7dc      	b.n	1443e <ll_conn_update+0xaa>

00014484 <ll_chm_update>:
{
   14484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
   14488:	4c1e      	ldr	r4, [pc, #120]	; (14504 <ll_chm_update+0x80>)
   1448a:	4601      	mov	r1, r0
   1448c:	2205      	movs	r2, #5
{
   1448e:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
   14490:	f604 5002 	addw	r0, r4, #3330	; 0xd02
   14494:	f7ec f8b8 	bl	608 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   14498:	f604 5002 	addw	r0, r4, #3330	; 0xd02
   1449c:	2105      	movs	r1, #5
   1449e:	f7f6 f94b 	bl	a738 <util_ones_count_get>
	_radio.data_chan_count =
   144a2:	f884 0d07 	strb.w	r0, [r4, #3335]	; 0xd07
   144a6:	f894 4cf8 	ldrb.w	r4, [r4, #3320]	; 0xcf8
   144aa:	3c01      	subs	r4, #1
   144ac:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
   144ae:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   144b0:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
   144b4:	2cff      	cmp	r4, #255	; 0xff
   144b6:	d102      	bne.n	144be <ll_chm_update+0x3a>
	return 0;
   144b8:	2000      	movs	r0, #0
   144ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
   144be:	4620      	mov	r0, r4
   144c0:	f7f8 ffd4 	bl	d46c <connection_get>
		if (!conn || conn->role) {
   144c4:	4606      	mov	r6, r0
   144c6:	b1b8      	cbz	r0, 144f8 <ll_chm_update+0x74>
   144c8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   144cc:	2b00      	cmp	r3, #0
   144ce:	db13      	blt.n	144f8 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
   144d0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   144d4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   144d8:	429a      	cmp	r2, r3
   144da:	d110      	bne.n	144fe <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   144dc:	2205      	movs	r2, #5
   144de:	4629      	mov	r1, r5
   144e0:	3079      	adds	r0, #121	; 0x79
   144e2:	f7ec f891 	bl	608 <memcpy>
		conn->llcp_req++;
   144e6:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
   144ea:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
   144ee:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   144f0:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
   144f4:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
   144f8:	3c01      	subs	r4, #1
   144fa:	b2e4      	uxtb	r4, r4
   144fc:	e7da      	b.n	144b4 <ll_chm_update+0x30>
			return 1;
   144fe:	2001      	movs	r0, #1
}
   14500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14504:	20000b98 	.word	0x20000b98

00014508 <ll_chm_get>:
{
   14508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1450a:	460d      	mov	r5, r1
	conn = connection_get(handle);
   1450c:	f7f8 ffae 	bl	d46c <connection_get>
	if (!conn) {
   14510:	4604      	mov	r4, r0
   14512:	b160      	cbz	r0, 1452e <ll_chm_get+0x26>
		conn->chm_update = 0;
   14514:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   14516:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
   1451a:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1451c:	2205      	movs	r2, #5
   1451e:	4631      	mov	r1, r6
   14520:	4628      	mov	r0, r5
   14522:	f7ec f871 	bl	608 <memcpy>
	} while (conn->chm_update);
   14526:	7f20      	ldrb	r0, [r4, #28]
   14528:	2800      	cmp	r0, #0
   1452a:	d1f6      	bne.n	1451a <ll_chm_get+0x12>
   1452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   1452e:	2001      	movs	r0, #1
}
   14530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014532 <ll_feature_req_send>:
{
   14532:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   14534:	f7f8 ff9a 	bl	d46c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   14538:	b168      	cbz	r0, 14556 <ll_feature_req_send+0x24>
   1453a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   1453e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   14542:	4293      	cmp	r3, r2
   14544:	d107      	bne.n	14556 <ll_feature_req_send+0x24>
	conn->llcp_req++;
   14546:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   14548:	2204      	movs	r2, #4
	conn->llcp_req++;
   1454a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1454e:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   14552:	2000      	movs	r0, #0
   14554:	bd08      	pop	{r3, pc}
		return 1;
   14556:	2001      	movs	r0, #1
}
   14558:	bd08      	pop	{r3, pc}

0001455a <ll_version_ind_send>:
{
   1455a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   1455c:	f7f8 ff86 	bl	d46c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   14560:	b168      	cbz	r0, 1457e <ll_version_ind_send+0x24>
   14562:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14566:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1456a:	4293      	cmp	r3, r2
   1456c:	d107      	bne.n	1457e <ll_version_ind_send+0x24>
	conn->llcp_req++;
   1456e:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   14570:	2205      	movs	r2, #5
	conn->llcp_req++;
   14572:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   14576:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
   1457a:	2000      	movs	r0, #0
   1457c:	bd08      	pop	{r3, pc}
		return 1;
   1457e:	2001      	movs	r0, #1
}
   14580:	bd08      	pop	{r3, pc}

00014582 <ll_terminate_ind_send>:
{
   14582:	b510      	push	{r4, lr}
   14584:	460c      	mov	r4, r1
	conn = connection_get(handle);
   14586:	f7f8 ff71 	bl	d46c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   1458a:	b160      	cbz	r0, 145a6 <ll_terminate_ind_send+0x24>
   1458c:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
   14590:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
   14594:	4293      	cmp	r3, r2
   14596:	d106      	bne.n	145a6 <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
   14598:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
   1459a:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   1459e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   145a2:	2000      	movs	r0, #0
   145a4:	bd10      	pop	{r4, pc}
		return 1;
   145a6:	2001      	movs	r0, #1
}
   145a8:	bd10      	pop	{r4, pc}

000145aa <ll_tx_pwr_lvl_get>:
{
   145aa:	b510      	push	{r4, lr}
   145ac:	4614      	mov	r4, r2
	conn = connection_get(handle);
   145ae:	f7f8 ff5d 	bl	d46c <connection_get>
	if (!conn) {
   145b2:	b110      	cbz	r0, 145ba <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
   145b4:	2000      	movs	r0, #0
   145b6:	7020      	strb	r0, [r4, #0]
	return 0;
   145b8:	bd10      	pop	{r4, pc}
		return 1;
   145ba:	2001      	movs	r0, #1
}
   145bc:	bd10      	pop	{r4, pc}

000145be <ll_apto_get>:
{
   145be:	b510      	push	{r4, lr}
   145c0:	460c      	mov	r4, r1
	conn = connection_get(handle);
   145c2:	f7f8 ff53 	bl	d46c <connection_get>
	if (!conn) {
   145c6:	b160      	cbz	r0, 145e2 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   145c8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   145ca:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
   145ce:	435a      	muls	r2, r3
   145d0:	237d      	movs	r3, #125	; 0x7d
   145d2:	4353      	muls	r3, r2
	return 0;
   145d4:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   145d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   145da:	fb93 f3f2 	sdiv	r3, r3, r2
   145de:	8023      	strh	r3, [r4, #0]
	return 0;
   145e0:	bd10      	pop	{r4, pc}
		return 1;
   145e2:	2001      	movs	r0, #1
}
   145e4:	bd10      	pop	{r4, pc}

000145e6 <ll_apto_set>:
{
   145e6:	b510      	push	{r4, lr}
   145e8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   145ea:	f7f8 ff3f 	bl	d46c <connection_get>
	if (!conn) {
   145ee:	b170      	cbz	r0, 1460e <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   145f0:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   145f2:	f240 43e2 	movw	r3, #1250	; 0x4e2
   145f6:	4353      	muls	r3, r2
   145f8:	f242 7110 	movw	r1, #10000	; 0x2710
   145fc:	fb01 3404 	mla	r4, r1, r4, r3
   14600:	3c01      	subs	r4, #1
   14602:	fb94 f4f3 	sdiv	r4, r4, r3
   14606:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   1460a:	2000      	movs	r0, #0
   1460c:	bd10      	pop	{r4, pc}
		return 1;
   1460e:	2001      	movs	r0, #1
}
   14610:	bd10      	pop	{r4, pc}

00014612 <ll_length_req_send>:
{
   14612:	b570      	push	{r4, r5, r6, lr}
   14614:	460e      	mov	r6, r1
   14616:	4615      	mov	r5, r2
	conn = connection_get(handle);
   14618:	f7f8 ff28 	bl	d46c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1461c:	b1d0      	cbz	r0, 14654 <ll_length_req_send+0x42>
   1461e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14622:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   14626:	429a      	cmp	r2, r3
   14628:	d114      	bne.n	14654 <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   1462a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1462e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   14632:	4293      	cmp	r3, r2
   14634:	d10e      	bne.n	14654 <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14636:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   1463a:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
   1463e:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14640:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
   14644:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14648:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
   1464c:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
   14650:	2000      	movs	r0, #0
   14652:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   14654:	2001      	movs	r0, #1
}
   14656:	bd70      	pop	{r4, r5, r6, pc}

00014658 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   14658:	4b03      	ldr	r3, [pc, #12]	; (14668 <ll_length_default_get+0x10>)
   1465a:	f8b3 2d0a 	ldrh.w	r2, [r3, #3338]	; 0xd0a
   1465e:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   14660:	f8b3 3d0c 	ldrh.w	r3, [r3, #3340]	; 0xd0c
   14664:	800b      	strh	r3, [r1, #0]
   14666:	4770      	bx	lr
   14668:	20000b98 	.word	0x20000b98

0001466c <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   1466c:	4b03      	ldr	r3, [pc, #12]	; (1467c <ll_length_default_set+0x10>)
   1466e:	f8a3 0d0a 	strh.w	r0, [r3, #3338]	; 0xd0a
	_radio.default_tx_time = max_tx_time;
   14672:	f8a3 1d0c 	strh.w	r1, [r3, #3340]	; 0xd0c
}
   14676:	2000      	movs	r0, #0
   14678:	4770      	bx	lr
   1467a:	bf00      	nop
   1467c:	20000b98 	.word	0x20000b98

00014680 <ll_length_max_get>:
{
   14680:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   14682:	24fb      	movs	r4, #251	; 0xfb
   14684:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   14686:	f244 2090 	movw	r0, #17040	; 0x4290
   1468a:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   1468c:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1468e:	8018      	strh	r0, [r3, #0]
   14690:	bd10      	pop	{r4, pc}

00014692 <ll_phy_get>:
{
   14692:	b538      	push	{r3, r4, r5, lr}
   14694:	460d      	mov	r5, r1
   14696:	4614      	mov	r4, r2
	conn = connection_get(handle);
   14698:	f7f8 fee8 	bl	d46c <connection_get>
	if (!conn) {
   1469c:	b158      	cbz	r0, 146b6 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   1469e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   146a2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   146a6:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   146a8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   146ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
   146b0:	7023      	strb	r3, [r4, #0]
	return 0;
   146b2:	2000      	movs	r0, #0
   146b4:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   146b6:	2001      	movs	r0, #1
}
   146b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000146bc <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   146bc:	4b03      	ldr	r3, [pc, #12]	; (146cc <ll_phy_default_set+0x10>)
   146be:	f8a3 0d0e 	strh.w	r0, [r3, #3342]	; 0xd0e
	_radio.default_phy_rx = rx;
   146c2:	f8a3 1d10 	strh.w	r1, [r3, #3344]	; 0xd10
}
   146c6:	2000      	movs	r0, #0
   146c8:	4770      	bx	lr
   146ca:	bf00      	nop
   146cc:	20000b98 	.word	0x20000b98

000146d0 <ll_phy_req_send>:
{
   146d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   146d4:	4689      	mov	r9, r1
   146d6:	4690      	mov	r8, r2
   146d8:	461f      	mov	r7, r3
	conn = connection_get(handle);
   146da:	f7f8 fec7 	bl	d46c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   146de:	b320      	cbz	r0, 1472a <ll_phy_req_send+0x5a>
   146e0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   146e4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   146e8:	429a      	cmp	r2, r3
   146ea:	d11e      	bne.n	1472a <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   146ec:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   146f0:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
   146f4:	429d      	cmp	r5, r3
   146f6:	d118      	bne.n	1472a <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   146f8:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   146fc:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   14700:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
   14704:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
   14708:	f046 0102 	orr.w	r1, r6, #2
   1470c:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
   14710:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
   14712:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
   14714:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   14718:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
   1471c:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
   14720:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
   14724:	2000      	movs	r0, #0
   14726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   1472a:	2001      	movs	r0, #1
}
   1472c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00014730 <ll_rx_get>:
{
   14730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14734:	4605      	mov	r5, r0
   14736:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   14738:	4918      	ldr	r1, [pc, #96]	; (1479c <ll_rx_get+0x6c>)
   1473a:	f8d1 3d34 	ldr.w	r3, [r1, #3380]	; 0xd34
   1473e:	f8d1 2d38 	ldr.w	r2, [r1, #3384]	; 0xd38
   14742:	4293      	cmp	r3, r2
   14744:	460f      	mov	r7, r1
   14746:	d01f      	beq.n	14788 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
   14748:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   1474c:	f601 515f 	addw	r1, r1, #3423	; 0xd5f
   14750:	f898 2000 	ldrb.w	r2, [r8]
   14754:	f7f8 fe40 	bl	d3d8 <tx_cmplt_get>
		if (!cmplt) {
   14758:	4604      	mov	r4, r0
   1475a:	b9e0      	cbnz	r0, 14796 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
   1475c:	ae02      	add	r6, sp, #8
   1475e:	f897 3d5f 	ldrb.w	r3, [r7, #3423]	; 0xd5f
   14762:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
   14766:	f897 2d60 	ldrb.w	r2, [r7, #3424]	; 0xd60
   1476a:	4631      	mov	r1, r6
   1476c:	f10d 0006 	add.w	r0, sp, #6
   14770:	f7f8 fe32 	bl	d3d8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   14774:	b934      	cbnz	r4, 14784 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
   14776:	b928      	cbnz	r0, 14784 <ll_rx_get+0x54>
			*node_rx = _node_rx;
   14778:	f8c5 8000 	str.w	r8, [r5]
}
   1477c:	4620      	mov	r0, r4
   1477e:	b002      	add	sp, #8
   14780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   14784:	4604      	mov	r4, r0
   14786:	e7ee      	b.n	14766 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   14788:	f891 2d60 	ldrb.w	r2, [r1, #3424]	; 0xd60
   1478c:	f601 515f 	addw	r1, r1, #3423	; 0xd5f
   14790:	f7f8 fe22 	bl	d3d8 <tx_cmplt_get>
   14794:	4604      	mov	r4, r0
		*node_rx = NULL;
   14796:	2300      	movs	r3, #0
   14798:	602b      	str	r3, [r5, #0]
   1479a:	e7ef      	b.n	1477c <ll_rx_get+0x4c>
   1479c:	20000b98 	.word	0x20000b98

000147a0 <ll_rx_mem_release>:
{
   147a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
   147a4:	4c1c      	ldr	r4, [pc, #112]	; (14818 <ll_rx_mem_release+0x78>)
{
   147a6:	4605      	mov	r5, r0
	_node_rx = *node_rx;
   147a8:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   147aa:	f6a4 5618 	subw	r6, r4, #3352	; 0xd18
			mem_release(conn, &_radio.conn_free);
   147ae:	f1a4 0724 	sub.w	r7, r4, #36	; 0x24
	while (_node_rx) {
   147b2:	b930      	cbnz	r0, 147c2 <ll_rx_mem_release+0x22>
	*node_rx = _node_rx;
   147b4:	6028      	str	r0, [r5, #0]
	packet_rx_allocate(0xff);
   147b6:	20ff      	movs	r0, #255	; 0xff
}
   147b8:	b002      	add	sp, #8
   147ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
   147be:	f7f8 bd35 	b.w	d22c <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
   147c2:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
   147c4:	f8d0 8000 	ldr.w	r8, [r0]
   147c8:	2a0c      	cmp	r2, #12
   147ca:	d807      	bhi.n	147dc <ll_rx_mem_release+0x3c>
   147cc:	2301      	movs	r3, #1
   147ce:	4093      	lsls	r3, r2
   147d0:	f641 727e 	movw	r2, #8062	; 0x1f7e
   147d4:	4213      	tst	r3, r2
   147d6:	d110      	bne.n	147fa <ll_rx_mem_release+0x5a>
   147d8:	061b      	lsls	r3, r3, #24
   147da:	d413      	bmi.n	14804 <ll_rx_mem_release+0x64>
			LL_ASSERT(0);
   147dc:	4b0f      	ldr	r3, [pc, #60]	; (1481c <ll_rx_mem_release+0x7c>)
   147de:	9301      	str	r3, [sp, #4]
   147e0:	9300      	str	r3, [sp, #0]
   147e2:	4a0f      	ldr	r2, [pc, #60]	; (14820 <ll_rx_mem_release+0x80>)
   147e4:	4b0f      	ldr	r3, [pc, #60]	; (14824 <ll_rx_mem_release+0x84>)
   147e6:	4910      	ldr	r1, [pc, #64]	; (14828 <ll_rx_mem_release+0x88>)
   147e8:	4810      	ldr	r0, [pc, #64]	; (1482c <ll_rx_mem_release+0x8c>)
   147ea:	f7ec ff79 	bl	16e0 <printk>
   147ee:	4040      	eors	r0, r0
   147f0:	f380 8811 	msr	BASEPRI, r0
   147f4:	f04f 0004 	mov.w	r0, #4
   147f8:	df02      	svc	2
			mem_release(_node_rx_free,
   147fa:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
   147fc:	f7f5 fe0b 	bl	a416 <mem_release>
{
   14800:	4640      	mov	r0, r8
   14802:	e7d6      	b.n	147b2 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   14804:	88c2      	ldrh	r2, [r0, #6]
   14806:	f8d6 0cf0 	ldr.w	r0, [r6, #3312]	; 0xcf0
   1480a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1480e:	f7f5 fe1d 	bl	a44c <mem_get>
			mem_release(conn, &_radio.conn_free);
   14812:	4639      	mov	r1, r7
   14814:	e7f2      	b.n	147fc <ll_rx_mem_release+0x5c>
   14816:	bf00      	nop
   14818:	200018b0 	.word	0x200018b0
   1481c:	0001868d 	.word	0x0001868d
   14820:	00019a84 	.word	0x00019a84
   14824:	0001b40d 	.word	0x0001b40d
   14828:	00019a8b 	.word	0x00019a8b
   1482c:	000197a5 	.word	0x000197a5

00014830 <do_radio_rx_fc_set>:
	if (req == ack) {
   14830:	4291      	cmp	r1, r2
{
   14832:	b510      	push	{r4, lr}
   14834:	4b14      	ldr	r3, [pc, #80]	; (14888 <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
   14836:	d119      	bne.n	1486c <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   14838:	f8d3 2d38 	ldr.w	r2, [r3, #3384]	; 0xd38
   1483c:	f8d3 4d34 	ldr.w	r4, [r3, #3380]	; 0xd34
   14840:	4294      	cmp	r4, r2
   14842:	d111      	bne.n	14868 <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
   14844:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
   14846:	bf14      	ite	ne
   14848:	460a      	movne	r2, r1
   1484a:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
   1484c:	3a01      	subs	r2, #1
   1484e:	b2d2      	uxtb	r2, r2
   14850:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
   14854:	f883 2d69 	strb.w	r2, [r3, #3433]	; 0xd69
			if (req != _radio.fc_req) {
   14858:	f893 2d68 	ldrb.w	r2, [r3, #3432]	; 0xd68
			_radio.fc_handle[--ack1] = handle;
   1485c:	f8a4 0d62 	strh.w	r0, [r4, #3426]	; 0xd62
			if (req != _radio.fc_req) {
   14860:	4291      	cmp	r1, r2
   14862:	d00f      	beq.n	14884 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
   14864:	f883 1d69 	strb.w	r1, [r3, #3433]	; 0xd69
			return 1;
   14868:	2001      	movs	r0, #1
   1486a:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
   1486c:	b929      	cbnz	r1, 1487a <do_radio_rx_fc_set+0x4a>
   1486e:	f8b3 3d66 	ldrh.w	r3, [r3, #3430]	; 0xd66
				return 1;
   14872:	1a18      	subs	r0, r3, r0
   14874:	bf18      	it	ne
   14876:	2001      	movne	r0, #1
   14878:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   1487a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1487e:	f8b3 3d60 	ldrh.w	r3, [r3, #3424]	; 0xd60
   14882:	e7f6      	b.n	14872 <do_radio_rx_fc_set+0x42>
	return 0;
   14884:	2000      	movs	r0, #0
}
   14886:	bd10      	pop	{r4, pc}
   14888:	20000b98 	.word	0x20000b98

0001488c <radio_rx_fc_set>:
{
   1488c:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
   1488e:	4b14      	ldr	r3, [pc, #80]	; (148e0 <radio_rx_fc_set+0x54>)
   14890:	f893 2d6a 	ldrb.w	r2, [r3, #3434]	; 0xd6a
{
   14894:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
   14896:	b302      	cbz	r2, 148da <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
   14898:	f893 2d68 	ldrb.w	r2, [r3, #3432]	; 0xd68
   1489c:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
   1489e:	f893 2d69 	ldrb.w	r2, [r3, #3433]	; 0xd69
		if (fc) {
   148a2:	b135      	cbz	r5, 148b2 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
   148a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   148a8:	4298      	cmp	r0, r3
   148aa:	d016      	beq.n	148da <radio_rx_fc_set+0x4e>
}
   148ac:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
   148ae:	f7ff bfbf 	b.w	14830 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   148b2:	f8d3 0d34 	ldr.w	r0, [r3, #3380]	; 0xd34
   148b6:	f8d3 4d38 	ldr.w	r4, [r3, #3384]	; 0xd38
   148ba:	42a0      	cmp	r0, r4
   148bc:	d10d      	bne.n	148da <radio_rx_fc_set+0x4e>
   148be:	4291      	cmp	r1, r2
   148c0:	d00b      	beq.n	148da <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   148c2:	f8d3 4d38 	ldr.w	r4, [r3, #3384]	; 0xd38
			_radio.fc_ack = req;
   148c6:	f883 1d69 	strb.w	r1, [r3, #3433]	; 0xd69
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   148ca:	42a0      	cmp	r0, r4
   148cc:	d005      	beq.n	148da <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
   148ce:	f893 0d68 	ldrb.w	r0, [r3, #3432]	; 0xd68
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   148d2:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
   148d4:	bf08      	it	eq
   148d6:	f883 2d69 	strbeq.w	r2, [r3, #3433]	; 0xd69
}
   148da:	2000      	movs	r0, #0
   148dc:	bc30      	pop	{r4, r5}
   148de:	4770      	bx	lr
   148e0:	20000b98 	.word	0x20000b98

000148e4 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
   148e4:	4801      	ldr	r0, [pc, #4]	; (148ec <ll_tx_mem_acquire+0x8>)
   148e6:	f7f5 bd7c 	b.w	a3e2 <mem_acquire>
   148ea:	bf00      	nop
   148ec:	200018e4 	.word	0x200018e4

000148f0 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   148f0:	4901      	ldr	r1, [pc, #4]	; (148f8 <ll_tx_mem_release+0x8>)
   148f2:	f7f5 bd90 	b.w	a416 <mem_release>
   148f6:	bf00      	nop
   148f8:	200018e4 	.word	0x200018e4

000148fc <ll_tx_mem_enqueue>:

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
   148fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   148fe:	4d33      	ldr	r5, [pc, #204]	; (149cc <ll_tx_mem_enqueue+0xd0>)
   14900:	f895 4d5e 	ldrb.w	r4, [r5, #3422]	; 0xd5e
	if (last == _radio.packet_tx_count) {
   14904:	f895 3d5c 	ldrb.w	r3, [r5, #3420]	; 0xd5c
	last = _radio.packet_tx_last + 1;
   14908:	3401      	adds	r4, #1
{
   1490a:	b089      	sub	sp, #36	; 0x24
	last = _radio.packet_tx_last + 1;
   1490c:	b2e4      	uxtb	r4, r4
{
   1490e:	4607      	mov	r7, r0
   14910:	460e      	mov	r6, r1
		last = 0;
   14912:	42a3      	cmp	r3, r4
   14914:	bf08      	it	eq
   14916:	2400      	moveq	r4, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
   14918:	f7f8 fda8 	bl	d46c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   1491c:	2800      	cmp	r0, #0
   1491e:	d052      	beq.n	149c6 <ll_tx_mem_enqueue+0xca>
   14920:	f895 3d5d 	ldrb.w	r3, [r5, #3421]	; 0xd5d
   14924:	429c      	cmp	r4, r3
   14926:	d04e      	beq.n	149c6 <ll_tx_mem_enqueue+0xca>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   14928:	f8b5 3d50 	ldrh.w	r3, [r5, #3408]	; 0xd50
   1492c:	7972      	ldrb	r2, [r6, #5]
   1492e:	3b07      	subs	r3, #7
   14930:	429a      	cmp	r2, r3
   14932:	d90e      	bls.n	14952 <ll_tx_mem_enqueue+0x56>
   14934:	4b26      	ldr	r3, [pc, #152]	; (149d0 <ll_tx_mem_enqueue+0xd4>)
   14936:	9301      	str	r3, [sp, #4]
   14938:	9300      	str	r3, [sp, #0]
   1493a:	4a26      	ldr	r2, [pc, #152]	; (149d4 <ll_tx_mem_enqueue+0xd8>)
   1493c:	4b26      	ldr	r3, [pc, #152]	; (149d8 <ll_tx_mem_enqueue+0xdc>)
   1493e:	4927      	ldr	r1, [pc, #156]	; (149dc <ll_tx_mem_enqueue+0xe0>)
   14940:	4827      	ldr	r0, [pc, #156]	; (149e0 <ll_tx_mem_enqueue+0xe4>)
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14942:	f7ec fecd 	bl	16e0 <printk>
   14946:	4040      	eors	r0, r0
   14948:	f380 8811 	msr	BASEPRI, r0
   1494c:	f04f 0004 	mov.w	r0, #4
   14950:	df02      	svc	2
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   14952:	f895 2d5e 	ldrb.w	r2, [r5, #3422]	; 0xd5e
   14956:	f8d5 3d54 	ldr.w	r3, [r5, #3412]	; 0xd54
   1495a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   1495e:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
   14962:	604e      	str	r6, [r1, #4]
	_radio.packet_tx_last = last;
   14964:	f885 4d5e 	strb.w	r4, [r5, #3422]	; 0xd5e
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   14968:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1496c:	2b00      	cmp	r3, #0
   1496e:	db02      	blt.n	14976 <ll_tx_mem_enqueue+0x7a>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   14970:	2000      	movs	r0, #0
}
   14972:	b009      	add	sp, #36	; 0x24
   14974:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   14976:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   14978:	2b00      	cmp	r3, #0
   1497a:	d0f9      	beq.n	14970 <ll_tx_mem_enqueue+0x74>
   1497c:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   14980:	f012 0302 	ands.w	r3, r2, #2
   14984:	d1f4      	bne.n	14970 <ll_tx_mem_enqueue+0x74>
		conn->slave.latency_cancel = 1;
   14986:	f042 0202 	orr.w	r2, r2, #2
   1498a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1498e:	f890 2020 	ldrb.w	r2, [r0, #32]
   14992:	4914      	ldr	r1, [pc, #80]	; (149e4 <ll_tx_mem_enqueue+0xe8>)
   14994:	9105      	str	r1, [sp, #20]
   14996:	3207      	adds	r2, #7
   14998:	2101      	movs	r1, #1
   1499a:	9006      	str	r0, [sp, #24]
   1499c:	9304      	str	r3, [sp, #16]
   1499e:	9103      	str	r1, [sp, #12]
   149a0:	9302      	str	r3, [sp, #8]
   149a2:	9301      	str	r3, [sp, #4]
   149a4:	9300      	str	r3, [sp, #0]
   149a6:	4618      	mov	r0, r3
   149a8:	b2d2      	uxtb	r2, r2
   149aa:	2103      	movs	r1, #3
   149ac:	f7f6 fbf2 	bl	b194 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   149b0:	f030 0302 	bics.w	r3, r0, #2
   149b4:	d0dc      	beq.n	14970 <ll_tx_mem_enqueue+0x74>
   149b6:	4b06      	ldr	r3, [pc, #24]	; (149d0 <ll_tx_mem_enqueue+0xd4>)
   149b8:	9301      	str	r3, [sp, #4]
   149ba:	9300      	str	r3, [sp, #0]
   149bc:	4a05      	ldr	r2, [pc, #20]	; (149d4 <ll_tx_mem_enqueue+0xd8>)
   149be:	4b06      	ldr	r3, [pc, #24]	; (149d8 <ll_tx_mem_enqueue+0xdc>)
   149c0:	4906      	ldr	r1, [pc, #24]	; (149dc <ll_tx_mem_enqueue+0xe0>)
   149c2:	4809      	ldr	r0, [pc, #36]	; (149e8 <ll_tx_mem_enqueue+0xec>)
   149c4:	e7bd      	b.n	14942 <ll_tx_mem_enqueue+0x46>
		return 1;
   149c6:	2001      	movs	r0, #1
   149c8:	e7d3      	b.n	14972 <ll_tx_mem_enqueue+0x76>
   149ca:	bf00      	nop
   149cc:	20000b98 	.word	0x20000b98
   149d0:	0001868d 	.word	0x0001868d
   149d4:	00019a84 	.word	0x00019a84
   149d8:	0001b43b 	.word	0x0001b43b
   149dc:	00019a8b 	.word	0x00019a8b
   149e0:	0001ba32 	.word	0x0001ba32
   149e4:	0000e835 	.word	0x0000e835
   149e8:	0001b473 	.word	0x0001b473

000149ec <ll_enc_req_send>:
{
   149ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   149f0:	4607      	mov	r7, r0
   149f2:	4688      	mov	r8, r1
   149f4:	4616      	mov	r6, r2
   149f6:	4699      	mov	r9, r3
	conn = connection_get(handle);
   149f8:	f7f8 fd38 	bl	d46c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   149fc:	4605      	mov	r5, r0
   149fe:	b910      	cbnz	r0, 14a06 <ll_enc_req_send+0x1a>
			return 1;
   14a00:	2001      	movs	r0, #1
   14a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   14a06:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   14a0a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   14a0e:	429a      	cmp	r2, r3
   14a10:	d1f6      	bne.n	14a00 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
   14a12:	f7ff ff67 	bl	148e4 <ll_tx_mem_acquire>
	if (node_tx) {
   14a16:	4604      	mov	r4, r0
   14a18:	2800      	cmp	r0, #0
   14a1a:	d0f1      	beq.n	14a00 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   14a1c:	2210      	movs	r2, #16
   14a1e:	4649      	mov	r1, r9
   14a20:	f105 0084 	add.w	r0, r5, #132	; 0x84
   14a24:	f7eb fdf0 	bl	608 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   14a28:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   14a2c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   14a30:	d124      	bne.n	14a7c <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a32:	7923      	ldrb	r3, [r4, #4]
   14a34:	f043 0303 	orr.w	r3, r3, #3
   14a38:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   14a3a:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   14a3c:	2208      	movs	r2, #8
			pdu_data_tx->len =
   14a3e:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   14a40:	2303      	movs	r3, #3
   14a42:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   14a44:	4641      	mov	r1, r8
   14a46:	18a0      	adds	r0, r4, r2
   14a48:	f7eb fdde 	bl	608 <memcpy>
			enc_req->ediv[0] = ediv[0];
   14a4c:	7833      	ldrb	r3, [r6, #0]
   14a4e:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   14a50:	7873      	ldrb	r3, [r6, #1]
   14a52:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   14a54:	2108      	movs	r1, #8
   14a56:	f104 0012 	add.w	r0, r4, #18
   14a5a:	f7f6 fcf9 	bl	b450 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   14a5e:	2104      	movs	r1, #4
   14a60:	f104 001a 	add.w	r0, r4, #26
   14a64:	f7f6 fcf4 	bl	b450 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
   14a68:	4621      	mov	r1, r4
   14a6a:	4638      	mov	r0, r7
   14a6c:	f7ff ff46 	bl	148fc <ll_tx_mem_enqueue>
   14a70:	2601      	movs	r6, #1
   14a72:	b1d0      	cbz	r0, 14aaa <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
   14a74:	4620      	mov	r0, r4
   14a76:	f7ff ff3b 	bl	148f0 <ll_tx_mem_release>
   14a7a:	e7c1      	b.n	14a00 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   14a7c:	2b30      	cmp	r3, #48	; 0x30
   14a7e:	d1f9      	bne.n	14a74 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   14a80:	2208      	movs	r2, #8
   14a82:	4641      	mov	r1, r8
   14a84:	f105 007a 	add.w	r0, r5, #122	; 0x7a
   14a88:	f7eb fdbe 	bl	608 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   14a8c:	7833      	ldrb	r3, [r6, #0]
   14a8e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
   14a92:	7873      	ldrb	r3, [r6, #1]
   14a94:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a98:	7923      	ldrb	r3, [r4, #4]
   14a9a:	f043 0303 	orr.w	r3, r3, #3
   14a9e:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   14aa0:	2301      	movs	r3, #1
   14aa2:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
   14aa4:	230a      	movs	r3, #10
   14aa6:	71e3      	strb	r3, [r4, #7]
   14aa8:	e7de      	b.n	14a68 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
   14aaa:	2303      	movs	r3, #3
   14aac:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
   14ab0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
   14ab4:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
   14ab8:	3301      	adds	r3, #1
   14aba:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
   14abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14ac2:	0000      	movs	r0, r0
   14ac4:	0000      	movs	r0, r0
	...

00014ac8 <radio_scan_enable>:
{
   14ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
   14acc:	4c76      	ldr	r4, [pc, #472]	; (14ca8 <radio_scan_enable+0x1e0>)
   14ace:	f894 7c2c 	ldrb.w	r7, [r4, #3116]	; 0xc2c
{
   14ad2:	b08e      	sub	sp, #56	; 0x38
   14ad4:	461d      	mov	r5, r3
	if (_radio.scanner.is_enabled) {
   14ad6:	f017 0701 	ands.w	r7, r7, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14ada:	f04f 0302 	mov.w	r3, #2
{
   14ade:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   14ae0:	930b      	str	r3, [sp, #44]	; 0x2c
{
   14ae2:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
   14ae4:	d003      	beq.n	14aee <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14ae6:	200c      	movs	r0, #12
}
   14ae8:	b00e      	add	sp, #56	; 0x38
   14aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
   14aee:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
	_radio.scanner.rpa_gen = rpa_gen;
   14af2:	f894 2c2e 	ldrb.w	r2, [r4, #3118]	; 0xc2e
	_radio.scanner.type = type;
   14af6:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;				//1
   14afa:	0840      	lsrs	r0, r0, #1
   14afc:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   14b00:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   14b04:	f360 0200 	bfi	r2, r0, #0, #1
   14b08:	f884 2c2e 	strb.w	r2, [r4, #3118]	; 0xc2e
	_radio.scanner.rl_idx = rl_idx;
   14b0c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   14b10:	f884 2c2f 	strb.w	r2, [r4, #3119]	; 0xc2f
	_radio.scanner.init_addr_type = init_addr_type;
   14b14:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   14b18:	2206      	movs	r2, #6
   14b1a:	f504 6043 	add.w	r0, r4, #3120	; 0xc30
	_radio.scanner.init_addr_type = init_addr_type;
   14b1e:	f884 3c2d 	strb.w	r3, [r4, #3117]	; 0xc2d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   14b22:	4e62      	ldr	r6, [pc, #392]	; (14cac <radio_scan_enable+0x1e4>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   14b24:	f7eb fd70 	bl	608 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   14b28:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   14b2c:	f04f 0891 	mov.w	r8, #145	; 0x91
   14b30:	fba2 0106 	umull	r0, r1, r2, r6
   14b34:	fb08 1102 	mla	r1, r8, r2, r1
   14b38:	a359      	add	r3, pc, #356	; (adr r3, 14ca0 <radio_scan_enable+0x1d8>)
   14b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b3e:	f7eb fb93 	bl	268 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
   14b42:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
   14b46:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
	_radio.scanner.hdr.ticks_preempt_to_start =
   14b4a:	f8c4 7c24 	str.w	r7, [r4, #3108]	; 0xc24
	_radio.scanner.filter_policy = filter_policy;
   14b4e:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   14b52:	b2aa      	uxth	r2, r5
   14b54:	fba2 6706 	umull	r6, r7, r2, r6
		_radio.ticks_active_to_start;
   14b58:	f8d4 ad6c 	ldr.w	sl, [r4, #3436]	; 0xd6c
	_radio.scanner.filter_policy = filter_policy;
   14b5c:	f884 3c2d 	strb.w	r3, [r4, #3117]	; 0xc2d
		_radio.scanner.ticks_window +
   14b60:	f100 0909 	add.w	r9, r0, #9
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   14b64:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.hdr.ticks_xtal_to_start =
   14b68:	2327      	movs	r3, #39	; 0x27
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
   14b6a:	f8c4 0c3c 	str.w	r0, [r4, #3132]	; 0xc3c
	_radio.scanner.hdr.ticks_active_to_start =
   14b6e:	f8c4 ac20 	str.w	sl, [r4, #3104]	; 0xc20
	_radio.scanner.hdr.ticks_xtal_to_start =
   14b72:	f8c4 3c1c 	str.w	r3, [r4, #3100]	; 0xc1c
	_radio.scanner.hdr.ticks_slot =
   14b76:	f8c4 9c28 	str.w	r9, [r4, #3112]	; 0xc28
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   14b7a:	a349      	add	r3, pc, #292	; (adr r3, 14ca0 <radio_scan_enable+0x1d8>)
   14b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b80:	4630      	mov	r0, r6
   14b82:	4639      	mov	r1, r7
   14b84:	f7eb fb70 	bl	268 <__aeabi_uldivmod>
	    (ticks_interval -
   14b88:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   14b8c:	4599      	cmp	r9, r3
	_radio.scanner.interval = interval;
   14b8e:	f8c4 5c40 	str.w	r5, [r4, #3136]	; 0xc40
	ticks_slot_offset =
   14b92:	4655      	mov	r5, sl
		_radio.scanner.hdr.ticks_slot =
   14b94:	bf88      	it	hi
   14b96:	f8c4 3c28 	strhi.w	r3, [r4, #3112]	; 0xc28
	ticks_slot_offset =
   14b9a:	2d27      	cmp	r5, #39	; 0x27
   14b9c:	bf38      	it	cc
   14b9e:	2527      	movcc	r5, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
   14ba0:	4680      	mov	r8, r0
	_radio.scanner.slot_offset = ticks_slot_offset ;
   14ba2:	f8c4 5c44 	str.w	r5, [r4, #3140]	; 0xc44
	ticks_anchor = ticker_ticks_now_get();
   14ba6:	f7f6 fc13 	bl	b3d0 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
   14baa:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
	ticks_anchor = ticker_ticks_now_get();
   14bae:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
   14bb0:	2b00      	cmp	r3, #0
   14bb2:	d05e      	beq.n	14c72 <radio_scan_enable+0x1aa>
		us_offset = 0;
   14bb4:	2300      	movs	r3, #0
   14bb6:	930c      	str	r3, [sp, #48]	; 0x30
   14bb8:	483d      	ldr	r0, [pc, #244]	; (14cb0 <radio_scan_enable+0x1e8>)
   14bba:	f3bf 8f5b 	dmb	ish
   14bbe:	e850 3f00 	ldrex	r3, [r0]
   14bc2:	f023 0301 	bic.w	r3, r3, #1
   14bc6:	e840 3200 	strex	r2, r3, [r0]
   14bca:	2a00      	cmp	r2, #0
   14bcc:	d1f7      	bne.n	14bbe <radio_scan_enable+0xf6>
   14bce:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   14bd2:	4938      	ldr	r1, [pc, #224]	; (14cb4 <radio_scan_enable+0x1ec>)
   14bd4:	f840 1c04 	str.w	r1, [r0, #-4]
	k_delayed_work_init(&aux_scanning.work_d, aux_packet_function);
   14bd8:	3004      	adds	r0, #4
   14bda:	f003 f873 	bl	17cc4 <k_delayed_work_init>
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   14bde:	980c      	ldr	r0, [sp, #48]	; 0x30
   14be0:	4935      	ldr	r1, [pc, #212]	; (14cb8 <radio_scan_enable+0x1f0>)
   14be2:	a32f      	add	r3, pc, #188	; (adr r3, 14ca0 <radio_scan_enable+0x1d8>)
   14be4:	e9d3 2300 	ldrd	r2, r3, [r3]
   14be8:	fba0 0101 	umull	r0, r1, r0, r1
   14bec:	f7eb fb3c 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14bf0:	ab0b      	add	r3, sp, #44	; 0x2c
   14bf2:	9308      	str	r3, [sp, #32]
   14bf4:	4b31      	ldr	r3, [pc, #196]	; (14cbc <radio_scan_enable+0x1f4>)
   14bf6:	9307      	str	r3, [sp, #28]
   14bf8:	4b31      	ldr	r3, [pc, #196]	; (14cc0 <radio_scan_enable+0x1f8>)
   14bfa:	9305      	str	r3, [sp, #20]
   14bfc:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
   14c00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c04:	f04f 0900 	mov.w	r9, #0
   14c08:	4482      	add	sl, r0
   14c0a:	441d      	add	r5, r3
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   14c0c:	4630      	mov	r0, r6
   14c0e:	a324      	add	r3, pc, #144	; (adr r3, 14ca0 <radio_scan_enable+0x1d8>)
   14c10:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c14:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c16:	f8cd 9018 	str.w	r9, [sp, #24]
   14c1a:	9504      	str	r5, [sp, #16]
   14c1c:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
   14c20:	f7eb fb22 	bl	268 <__aeabi_uldivmod>
   14c24:	4610      	mov	r0, r2
   14c26:	4619      	mov	r1, r3
   14c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14c2c:	2300      	movs	r3, #0
   14c2e:	f7eb fb1b 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c32:	f8cd 8004 	str.w	r8, [sp, #4]
   14c36:	9002      	str	r0, [sp, #8]
   14c38:	f8cd 9000 	str.w	r9, [sp]
   14c3c:	4653      	mov	r3, sl
   14c3e:	2206      	movs	r2, #6
   14c40:	2103      	movs	r1, #3
   14c42:	4648      	mov	r0, r9
   14c44:	f7f6 fa56 	bl	b0f4 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   14c48:	2802      	cmp	r0, #2
   14c4a:	d023      	beq.n	14c94 <radio_scan_enable+0x1cc>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   14c4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   14c4e:	2d00      	cmp	r5, #0
   14c50:	f47f af49 	bne.w	14ae6 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
   14c54:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   14c58:	f043 0301 	orr.w	r3, r3, #1
   14c5c:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	if (!_radio.advertiser.is_enabled) {
   14c60:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   14c64:	2b00      	cmp	r3, #0
   14c66:	db02      	blt.n	14c6e <radio_scan_enable+0x1a6>
		ll_adv_scan_state_cb(BIT(1));
   14c68:	2002      	movs	r0, #2
   14c6a:	f000 fea7 	bl	159bc <ll_adv_scan_state_cb>
	return 0;
   14c6e:	4628      	mov	r0, r5
   14c70:	e73a      	b.n	14ae8 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   14c72:	f8d4 1c28 	ldr.w	r1, [r4, #3112]	; 0xc28
		u32_t ticks_ref = 0;
   14c76:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   14c78:	aa0d      	add	r2, sp, #52	; 0x34
   14c7a:	ab0c      	add	r3, sp, #48	; 0x30
   14c7c:	4429      	add	r1, r5
   14c7e:	2003      	movs	r0, #3
   14c80:	f7f9 fb32 	bl	e2e8 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   14c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14c86:	2b00      	cmp	r3, #0
   14c88:	d096      	beq.n	14bb8 <radio_scan_enable+0xf0>
			ticks_anchor = ticks_ref;
   14c8a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   14c8e:	e793      	b.n	14bb8 <radio_scan_enable+0xf0>
			cpu_sleep();
   14c90:	f7f8 f9f2 	bl	d078 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
   14c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14c96:	2b02      	cmp	r3, #2
   14c98:	d0fa      	beq.n	14c90 <radio_scan_enable+0x1c8>
   14c9a:	e7d7      	b.n	14c4c <radio_scan_enable+0x184>
   14c9c:	f3af 8000 	nop.w
   14ca0:	1afd498d 	.word	0x1afd498d
   14ca4:	00000007 	.word	0x00000007
   14ca8:	20000b98 	.word	0x20000b98
   14cac:	84e72a00 	.word	0x84e72a00
   14cb0:	20005378 	.word	0x20005378
   14cb4:	0000ef5d 	.word	0x0000ef5d
   14cb8:	3b9aca00 	.word	0x3b9aca00
   14cbc:	0000d0bd 	.word	0x0000d0bd
   14cc0:	0000f6e9 	.word	0x0000f6e9

00014cc4 <radio_scan_disable>:
{
   14cc4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   14cc6:	2104      	movs	r1, #4
   14cc8:	2006      	movs	r0, #6
   14cca:	f7f8 fbe5 	bl	d498 <role_disable>
	if (!status) {
   14cce:	4605      	mov	r5, r0
   14cd0:	b9e8      	cbnz	r0, 14d0e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
   14cd2:	4c10      	ldr	r4, [pc, #64]	; (14d14 <radio_scan_disable+0x50>)
   14cd4:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
   14cd8:	f360 0200 	bfi	r2, r0, #0, #1
   14cdc:	f884 2c2c 	strb.w	r2, [r4, #3116]	; 0xc2c
		if (!_radio.advertiser.is_enabled) {
   14ce0:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
   14ce4:	2a00      	cmp	r2, #0
   14ce6:	db01      	blt.n	14cec <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
   14ce8:	f000 fe68 	bl	159bc <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
   14cec:	f8d4 6c54 	ldr.w	r6, [r4, #3156]	; 0xc54
		if (conn) {
   14cf0:	b15e      	cbz	r6, 14d0a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
   14cf2:	2300      	movs	r3, #0
   14cf4:	f8c4 3c54 	str.w	r3, [r4, #3156]	; 0xc54
			mem_release(conn->llcp_terminate.
   14cf8:	4907      	ldr	r1, [pc, #28]	; (14d18 <radio_scan_disable+0x54>)
   14cfa:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   14cfe:	f7f5 fb8a 	bl	a416 <mem_release>
			mem_release(conn, &_radio.conn_free);
   14d02:	4906      	ldr	r1, [pc, #24]	; (14d1c <radio_scan_disable+0x58>)
   14d04:	4630      	mov	r0, r6
   14d06:	f7f5 fb86 	bl	a416 <mem_release>
}
   14d0a:	4628      	mov	r0, r5
   14d0c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   14d0e:	250c      	movs	r5, #12
   14d10:	e7fb      	b.n	14d0a <radio_scan_disable+0x46>
   14d12:	bf00      	nop
   14d14:	20000b98 	.word	0x20000b98
   14d18:	200018c8 	.word	0x200018c8
   14d1c:	2000188c 	.word	0x2000188c

00014d20 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
   14d20:	4b03      	ldr	r3, [pc, #12]	; (14d30 <ll_connect_disable+0x10>)
   14d22:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
   14d26:	b10b      	cbz	r3, 14d2c <ll_connect_disable+0xc>
	status = radio_scan_disable();
   14d28:	f7ff bfcc 	b.w	14cc4 <radio_scan_disable>
}
   14d2c:	200c      	movs	r0, #12
   14d2e:	4770      	bx	lr
   14d30:	20000b98 	.word	0x20000b98

00014d34 <ll_rx_dequeue>:
{
   14d34:	b530      	push	{r4, r5, lr}
   14d36:	b085      	sub	sp, #20
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   14d38:	4d47      	ldr	r5, [pc, #284]	; (14e58 <ll_rx_dequeue+0x124>)
	struct radio_pdu_node_rx *node_rx = NULL;
   14d3a:	aa04      	add	r2, sp, #16
   14d3c:	2300      	movs	r3, #0
   14d3e:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   14d42:	f8d5 0d38 	ldr.w	r0, [r5, #3384]	; 0xd38
   14d46:	f605 5134 	addw	r1, r5, #3380	; 0xd34
   14d4a:	f7f5 fbb3 	bl	a4b4 <memq_dequeue>
   14d4e:	462c      	mov	r4, r5
	LL_ASSERT(link);
   14d50:	b970      	cbnz	r0, 14d70 <ll_rx_dequeue+0x3c>
   14d52:	4b42      	ldr	r3, [pc, #264]	; (14e5c <ll_rx_dequeue+0x128>)
   14d54:	9301      	str	r3, [sp, #4]
   14d56:	9300      	str	r3, [sp, #0]
   14d58:	4a41      	ldr	r2, [pc, #260]	; (14e60 <ll_rx_dequeue+0x12c>)
   14d5a:	4b42      	ldr	r3, [pc, #264]	; (14e64 <ll_rx_dequeue+0x130>)
   14d5c:	4942      	ldr	r1, [pc, #264]	; (14e68 <ll_rx_dequeue+0x134>)
   14d5e:	4843      	ldr	r0, [pc, #268]	; (14e6c <ll_rx_dequeue+0x138>)
		LL_ASSERT(_radio.link_rx_data_quota <
   14d60:	f7ec fcbe 	bl	16e0 <printk>
   14d64:	4040      	eors	r0, r0
   14d66:	f380 8811 	msr	BASEPRI, r0
   14d6a:	f04f 0004 	mov.w	r0, #4
   14d6e:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
   14d70:	f505 6153 	add.w	r1, r5, #3376	; 0xd30
   14d74:	f7f5 fb4f 	bl	a416 <mem_release>
	switch (node_rx->hdr.type) {
   14d78:	9a03      	ldr	r2, [sp, #12]
   14d7a:	7911      	ldrb	r1, [r2, #4]
   14d7c:	290c      	cmp	r1, #12
   14d7e:	d807      	bhi.n	14d90 <ll_rx_dequeue+0x5c>
   14d80:	2301      	movs	r3, #1
   14d82:	408b      	lsls	r3, r1
   14d84:	f641 707e 	movw	r0, #8062	; 0x1f7e
   14d88:	4203      	tst	r3, r0
   14d8a:	d109      	bne.n	14da0 <ll_rx_dequeue+0x6c>
   14d8c:	0618      	lsls	r0, r3, #24
   14d8e:	d419      	bmi.n	14dc4 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
   14d90:	4b32      	ldr	r3, [pc, #200]	; (14e5c <ll_rx_dequeue+0x128>)
   14d92:	9301      	str	r3, [sp, #4]
   14d94:	9300      	str	r3, [sp, #0]
   14d96:	4a32      	ldr	r2, [pc, #200]	; (14e60 <ll_rx_dequeue+0x12c>)
   14d98:	4b32      	ldr	r3, [pc, #200]	; (14e64 <ll_rx_dequeue+0x130>)
   14d9a:	4933      	ldr	r1, [pc, #204]	; (14e68 <ll_rx_dequeue+0x134>)
   14d9c:	4834      	ldr	r0, [pc, #208]	; (14e70 <ll_rx_dequeue+0x13c>)
   14d9e:	e7df      	b.n	14d60 <ll_rx_dequeue+0x2c>
		LL_ASSERT(_radio.link_rx_data_quota <
   14da0:	f895 0d28 	ldrb.w	r0, [r5, #3368]	; 0xd28
   14da4:	f895 3d3c 	ldrb.w	r3, [r5, #3388]	; 0xd3c
   14da8:	3801      	subs	r0, #1
   14daa:	4283      	cmp	r3, r0
   14dac:	db07      	blt.n	14dbe <ll_rx_dequeue+0x8a>
   14dae:	4b2b      	ldr	r3, [pc, #172]	; (14e5c <ll_rx_dequeue+0x128>)
   14db0:	9301      	str	r3, [sp, #4]
   14db2:	9300      	str	r3, [sp, #0]
   14db4:	4a2a      	ldr	r2, [pc, #168]	; (14e60 <ll_rx_dequeue+0x12c>)
   14db6:	4b2b      	ldr	r3, [pc, #172]	; (14e64 <ll_rx_dequeue+0x130>)
   14db8:	492b      	ldr	r1, [pc, #172]	; (14e68 <ll_rx_dequeue+0x134>)
   14dba:	482e      	ldr	r0, [pc, #184]	; (14e74 <ll_rx_dequeue+0x140>)
   14dbc:	e7d0      	b.n	14d60 <ll_rx_dequeue+0x2c>
		_radio.link_rx_data_quota++;
   14dbe:	3301      	adds	r3, #1
   14dc0:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   14dc4:	2906      	cmp	r1, #6
   14dc6:	d136      	bne.n	14e36 <ll_rx_dequeue+0x102>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   14dc8:	7ad3      	ldrb	r3, [r2, #11]
   14dca:	2b3c      	cmp	r3, #60	; 0x3c
   14dcc:	d00d      	beq.n	14dea <ll_rx_dequeue+0xb6>
   14dce:	7b12      	ldrb	r2, [r2, #12]
   14dd0:	b9e2      	cbnz	r2, 14e0c <ll_rx_dequeue+0xd8>
			LL_ASSERT(_radio.scanner.is_enabled);
   14dd2:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
   14dd6:	07d9      	lsls	r1, r3, #31
   14dd8:	d42f      	bmi.n	14e3a <ll_rx_dequeue+0x106>
   14dda:	4b20      	ldr	r3, [pc, #128]	; (14e5c <ll_rx_dequeue+0x128>)
   14ddc:	9301      	str	r3, [sp, #4]
   14dde:	9300      	str	r3, [sp, #0]
   14de0:	4a1f      	ldr	r2, [pc, #124]	; (14e60 <ll_rx_dequeue+0x12c>)
   14de2:	4b20      	ldr	r3, [pc, #128]	; (14e64 <ll_rx_dequeue+0x130>)
   14de4:	4920      	ldr	r1, [pc, #128]	; (14e68 <ll_rx_dequeue+0x134>)
   14de6:	4824      	ldr	r0, [pc, #144]	; (14e78 <ll_rx_dequeue+0x144>)
   14de8:	e7ba      	b.n	14d60 <ll_rx_dequeue+0x2c>
				_radio.advertiser.conn = NULL;
   14dea:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
   14dec:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
				_radio.advertiser.conn = NULL;
   14df0:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			LL_ASSERT(_radio.advertiser.is_enabled);
   14df4:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
   14df8:	2b00      	cmp	r3, #0
   14dfa:	db09      	blt.n	14e10 <ll_rx_dequeue+0xdc>
   14dfc:	4b17      	ldr	r3, [pc, #92]	; (14e5c <ll_rx_dequeue+0x128>)
   14dfe:	9301      	str	r3, [sp, #4]
   14e00:	9300      	str	r3, [sp, #0]
   14e02:	4a17      	ldr	r2, [pc, #92]	; (14e60 <ll_rx_dequeue+0x12c>)
   14e04:	4b17      	ldr	r3, [pc, #92]	; (14e64 <ll_rx_dequeue+0x130>)
   14e06:	4918      	ldr	r1, [pc, #96]	; (14e68 <ll_rx_dequeue+0x134>)
   14e08:	481c      	ldr	r0, [pc, #112]	; (14e7c <ll_rx_dequeue+0x148>)
   14e0a:	e7a9      	b.n	14d60 <ll_rx_dequeue+0x2c>
		struct connection *conn = NULL;
   14e0c:	2500      	movs	r5, #0
   14e0e:	e7f1      	b.n	14df4 <ll_rx_dequeue+0xc0>
			_radio.advertiser.is_enabled = 0;
   14e10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   14e14:	f36f 13c7 	bfc	r3, #7, #1
   14e18:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
   14e1c:	b995      	cbnz	r5, 14e44 <ll_rx_dequeue+0x110>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   14e1e:	f894 0c2c 	ldrb.w	r0, [r4, #3116]	; 0xc2c
		     _radio.advertiser.is_enabled;
   14e22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   14e26:	f000 0001 	and.w	r0, r0, #1
   14e2a:	0040      	lsls	r0, r0, #1
		if (!bm) {
   14e2c:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
   14e30:	d101      	bne.n	14e36 <ll_rx_dequeue+0x102>
			ll_adv_scan_state_cb(0);
   14e32:	f000 fdc3 	bl	159bc <ll_adv_scan_state_cb>
}
   14e36:	b005      	add	sp, #20
   14e38:	bd30      	pop	{r4, r5, pc}
			_radio.scanner.is_enabled = 0;
   14e3a:	f362 0300 	bfi	r3, r2, #0, #1
   14e3e:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
   14e42:	e7ec      	b.n	14e1e <ll_rx_dequeue+0xea>
			mem_release(node_rx->hdr.onion.link,
   14e44:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   14e48:	490d      	ldr	r1, [pc, #52]	; (14e80 <ll_rx_dequeue+0x14c>)
   14e4a:	f7f5 fae4 	bl	a416 <mem_release>
			mem_release(conn, &_radio.conn_free);
   14e4e:	490d      	ldr	r1, [pc, #52]	; (14e84 <ll_rx_dequeue+0x150>)
   14e50:	4628      	mov	r0, r5
   14e52:	f7f5 fae0 	bl	a416 <mem_release>
   14e56:	e7e2      	b.n	14e1e <ll_rx_dequeue+0xea>
   14e58:	20000b98 	.word	0x20000b98
   14e5c:	0001868d 	.word	0x0001868d
   14e60:	00019a84 	.word	0x00019a84
   14e64:	0001b3ff 	.word	0x0001b3ff
   14e68:	00019a8b 	.word	0x00019a8b
   14e6c:	0001b44d 	.word	0x0001b44d
   14e70:	000197a5 	.word	0x000197a5
   14e74:	0001b4f8 	.word	0x0001b4f8
   14e78:	0001b9f7 	.word	0x0001b9f7
   14e7c:	0001b9b9 	.word	0x0001b9b9
   14e80:	200018c8 	.word	0x200018c8
   14e84:	2000188c 	.word	0x2000188c

00014e88 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   14e88:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   14e8a:	4c0b      	ldr	r4, [pc, #44]	; (14eb8 <rtc0_nrf5_isr+0x30>)
   14e8c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   14e90:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   14e94:	b122      	cbz	r2, 14ea0 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   14e96:	2000      	movs	r0, #0
   14e98:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
   14e9c:	f7f6 f918 	bl	b0d0 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   14ea0:	b12d      	cbz	r5, 14eae <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   14ea2:	2300      	movs	r3, #0
   14ea4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
   14ea8:	2001      	movs	r0, #1
   14eaa:	f7f6 f911 	bl	b0d0 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   14eae:	2000      	movs	r0, #0
}
   14eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
   14eb4:	f7f5 bbae 	b.w	a614 <mayfly_run>
   14eb8:	4000b000 	.word	0x4000b000

00014ebc <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
   14ebc:	2001      	movs	r0, #1
   14ebe:	f7f5 bba9 	b.w	a614 <mayfly_run>

00014ec2 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   14ec2:	4668      	mov	r0, sp
   14ec4:	f020 0107 	bic.w	r1, r0, #7
   14ec8:	468d      	mov	sp, r1
   14eca:	b501      	push	{r0, lr}
	isr_radio();
   14ecc:	f001 f954 	bl	16178 <isr_radio>
	ISR_DIRECT_PM();
   14ed0:	f7ec f8f8 	bl	10c4 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   14ed4:	f7eb fed6 	bl	c84 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   14ed8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   14edc:	4685      	mov	sp, r0
   14ede:	4770      	bx	lr

00014ee0 <radio_active_callback>:
{
   14ee0:	4770      	bx	lr
	...

00014ee4 <radio_event_callback>:
	k_sem_give(sem_recv);
   14ee4:	4b01      	ldr	r3, [pc, #4]	; (14eec <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   14ee6:	6818      	ldr	r0, [r3, #0]
   14ee8:	f002 bbc0 	b.w	1766c <_impl_k_sem_give>
   14eec:	20003970 	.word	0x20003970

00014ef0 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   14ef0:	b530      	push	{r4, r5, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
   14ef2:	4b41      	ldr	r3, [pc, #260]	; (14ff8 <ll_init+0x108>)
{
   14ef4:	b087      	sub	sp, #28
	sem_recv = sem_rx;
   14ef6:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   14ef8:	4840      	ldr	r0, [pc, #256]	; (14ffc <ll_init+0x10c>)
   14efa:	f001 ffa7 	bl	16e4c <device_get_binding>
	if (!clk_k32) {
   14efe:	b918      	cbnz	r0, 14f08 <ll_init+0x18>
		return -ENODEV;
   14f00:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
   14f04:	b007      	add	sp, #28
   14f06:	bd30      	pop	{r4, r5, pc}
	return api->on(dev, sys);
   14f08:	6843      	ldr	r3, [r0, #4]
   14f0a:	2101      	movs	r1, #1
   14f0c:	681b      	ldr	r3, [r3, #0]
   14f0e:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
   14f10:	483b      	ldr	r0, [pc, #236]	; (15000 <ll_init+0x110>)
   14f12:	f001 ff9b 	bl	16e4c <device_get_binding>
	if (!entropy) {
   14f16:	4604      	mov	r4, r0
   14f18:	2800      	cmp	r0, #0
   14f1a:	d0f1      	beq.n	14f00 <ll_init+0x10>
	cntr_init();
   14f1c:	f000 ff74 	bl	15e08 <cntr_init>
	mayfly_init();
   14f20:	f7f5 fad8 	bl	a4d4 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   14f24:	4b37      	ldr	r3, [pc, #220]	; (15004 <ll_init+0x114>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   14f26:	2203      	movs	r2, #3
   14f28:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   14f2a:	2202      	movs	r2, #2
   14f2c:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   14f2e:	2108      	movs	r1, #8
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   14f30:	4a35      	ldr	r2, [pc, #212]	; (15008 <ll_init+0x118>)
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   14f32:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   14f34:	2000      	movs	r0, #0
   14f36:	7418      	strb	r0, [r3, #16]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
   14f38:	9205      	str	r2, [sp, #20]
   14f3a:	4a34      	ldr	r2, [pc, #208]	; (1500c <ll_init+0x11c>)
   14f3c:	9204      	str	r2, [sp, #16]
   14f3e:	4a34      	ldr	r2, [pc, #208]	; (15010 <ll_init+0x120>)
   14f40:	9203      	str	r2, [sp, #12]
   14f42:	4a34      	ldr	r2, [pc, #208]	; (15014 <ll_init+0x124>)
   14f44:	9202      	str	r2, [sp, #8]
   14f46:	220d      	movs	r2, #13
   14f48:	9201      	str	r2, [sp, #4]
   14f4a:	9300      	str	r3, [sp, #0]
   14f4c:	4a32      	ldr	r2, [pc, #200]	; (15018 <ll_init+0x128>)
   14f4e:	2304      	movs	r3, #4
   14f50:	f7f6 f886 	bl	b060 <ticker_init>
	LL_ASSERT(!err);
   14f54:	b170      	cbz	r0, 14f74 <ll_init+0x84>
   14f56:	4b31      	ldr	r3, [pc, #196]	; (1501c <ll_init+0x12c>)
   14f58:	9301      	str	r3, [sp, #4]
   14f5a:	9300      	str	r3, [sp, #0]
   14f5c:	4a30      	ldr	r2, [pc, #192]	; (15020 <ll_init+0x130>)
   14f5e:	4b31      	ldr	r3, [pc, #196]	; (15024 <ll_init+0x134>)
   14f60:	4931      	ldr	r1, [pc, #196]	; (15028 <ll_init+0x138>)
   14f62:	4832      	ldr	r0, [pc, #200]	; (1502c <ll_init+0x13c>)
   14f64:	f7ec fbbc 	bl	16e0 <printk>
   14f68:	4040      	eors	r0, r0
   14f6a:	f380 8811 	msr	BASEPRI, r0
   14f6e:	f04f 0004 	mov.w	r0, #4
   14f72:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   14f74:	482e      	ldr	r0, [pc, #184]	; (15030 <ll_init+0x140>)
   14f76:	f001 ff69 	bl	16e4c <device_get_binding>
	if (!clk_m16) {
   14f7a:	2800      	cmp	r0, #0
   14f7c:	d0c0      	beq.n	14f00 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
   14f7e:	4b2d      	ldr	r3, [pc, #180]	; (15034 <ll_init+0x144>)
   14f80:	9304      	str	r3, [sp, #16]
   14f82:	23ff      	movs	r3, #255	; 0xff
   14f84:	9303      	str	r3, [sp, #12]
   14f86:	23fb      	movs	r3, #251	; 0xfb
   14f88:	9302      	str	r3, [sp, #8]
   14f8a:	f44f 55e0 	mov.w	r5, #7168	; 0x1c00
   14f8e:	230a      	movs	r3, #10
   14f90:	9301      	str	r3, [sp, #4]
   14f92:	9300      	str	r3, [sp, #0]
   14f94:	4622      	mov	r2, r4
   14f96:	9505      	str	r5, [sp, #20]
   14f98:	2301      	movs	r3, #1
   14f9a:	2107      	movs	r1, #7
   14f9c:	f7fe ff24 	bl	13de8 <radio_init>
	if (err) {
   14fa0:	4604      	mov	r4, r0
   14fa2:	b160      	cbz	r0, 14fbe <ll_init+0xce>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
   14fa4:	4b1d      	ldr	r3, [pc, #116]	; (1501c <ll_init+0x12c>)
   14fa6:	9303      	str	r3, [sp, #12]
   14fa8:	e88d 0038 	stmia.w	sp, {r3, r4, r5}
   14fac:	4a1c      	ldr	r2, [pc, #112]	; (15020 <ll_init+0x130>)
   14fae:	4b1d      	ldr	r3, [pc, #116]	; (15024 <ll_init+0x134>)
   14fb0:	491d      	ldr	r1, [pc, #116]	; (15028 <ll_init+0x138>)
   14fb2:	4821      	ldr	r0, [pc, #132]	; (15038 <ll_init+0x148>)
   14fb4:	f7ec fb94 	bl	16e0 <printk>
		return -ENOMEM;
   14fb8:	f06f 000b 	mvn.w	r0, #11
   14fbc:	e7a2      	b.n	14f04 <ll_init+0x14>
	ll_filter_reset(true);
   14fbe:	2001      	movs	r0, #1
   14fc0:	f000 feda 	bl	15d78 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   14fc4:	4622      	mov	r2, r4
   14fc6:	4621      	mov	r1, r4
   14fc8:	2001      	movs	r0, #1
   14fca:	f7ec f861 	bl	1090 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   14fce:	4622      	mov	r2, r4
   14fd0:	4621      	mov	r1, r4
   14fd2:	200b      	movs	r0, #11
   14fd4:	f7ec f85c 	bl	1090 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   14fd8:	4622      	mov	r2, r4
   14fda:	4621      	mov	r1, r4
   14fdc:	2018      	movs	r0, #24
   14fde:	f7ec f857 	bl	1090 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
   14fe2:	2001      	movs	r0, #1
   14fe4:	f7ec f822 	bl	102c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   14fe8:	200b      	movs	r0, #11
   14fea:	f7ec f81f 	bl	102c <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   14fee:	2018      	movs	r0, #24
   14ff0:	f7ec f81c 	bl	102c <_arch_irq_enable>
	return 0;
   14ff4:	4620      	mov	r0, r4
   14ff6:	e785      	b.n	14f04 <ll_init+0x14>
   14ff8:	20003970 	.word	0x20003970
   14ffc:	00018c08 	.word	0x00018c08
   15000:	00018bdc 	.word	0x00018bdc
   15004:	20003950 	.word	0x20003950
   15008:	00016b89 	.word	0x00016b89
   1500c:	00016ae5 	.word	0x00016ae5
   15010:	00016a89 	.word	0x00016a89
   15014:	200036e0 	.word	0x200036e0
   15018:	200035a0 	.word	0x200035a0
   1501c:	0001868d 	.word	0x0001868d
   15020:	00019a84 	.word	0x00019a84
   15024:	0001c168 	.word	0x0001c168
   15028:	00019a8b 	.word	0x00019a8b
   1502c:	0001c170 	.word	0x0001c170
   15030:	00018c13 	.word	0x00018c13
   15034:	200019a0 	.word	0x200019a0
   15038:	0001c196 	.word	0x0001c196

0001503c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1503c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15040:	4606      	mov	r6, r0
   15042:	4689      	mov	r9, r1
   15044:	4690      	mov	r8, r2
   15046:	461f      	mov	r7, r3
	if (ll_scan_is_enabled()) {
   15048:	f7fe ffb6 	bl	13fb8 <ll_scan_is_enabled>
   1504c:	b9a0      	cbnz	r0, 15078 <ll_scan_params_set+0x3c>
	 * 1001b - Ext. Coded active
	 */


	/* for ext adv 0010 type */
	ll_scan.type = type | 0x03;  			//for time being just to test
   1504e:	4d0c      	ldr	r5, [pc, #48]	; (15080 <ll_scan_params_set+0x44>)
   15050:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
   15052:	f8a5 9000 	strh.w	r9, [r5]
	ll_scan.type = type | 0x03;  			//for time being just to test
   15056:	f046 0603 	orr.w	r6, r6, #3
   1505a:	f366 0403 	bfi	r4, r6, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
   1505e:	4622      	mov	r2, r4
   15060:	f367 1205 	bfi	r2, r7, #4, #2
	ll_scan.filter_policy = filter_policy;
   15064:	4613      	mov	r3, r2
   15066:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
   1506a:	f8a5 8002 	strh.w	r8, [r5, #2]
	ll_scan.filter_policy = filter_policy;
   1506e:	f362 1387 	bfi	r3, r2, #6, #2
   15072:	712b      	strb	r3, [r5, #4]

	return 0;
   15074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15078:	200c      	movs	r0, #12
}
   1507a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1507e:	bf00      	nop
   15080:	20003974 	.word	0x20003974

00015084 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   15084:	b5f0      	push	{r4, r5, r6, r7, lr}
   15086:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   15088:	b920      	cbnz	r0, 15094 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1508a:	b005      	add	sp, #20
   1508c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
   15090:	f7ff be18 	b.w	14cc4 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
   15094:	f7fe ff90 	bl	13fb8 <ll_scan_is_enabled>
   15098:	4606      	mov	r6, r0
   1509a:	bb40      	cbnz	r0, 150ee <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
   1509c:	4c15      	ldr	r4, [pc, #84]	; (150f4 <ll_scan_enable+0x70>)
   1509e:	7920      	ldrb	r0, [r4, #4]
   150a0:	0980      	lsrs	r0, r0, #6
   150a2:	f000 fa6b 	bl	1557c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   150a6:	7923      	ldrb	r3, [r4, #4]
   150a8:	f013 0501 	ands.w	r5, r3, #1
   150ac:	d006      	beq.n	150bc <ll_scan_enable+0x38>
   150ae:	f013 0520 	ands.w	r5, r3, #32
   150b2:	d003      	beq.n	150bc <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
   150b4:	4630      	mov	r0, r6
   150b6:	f000 fbd9 	bl	1586c <ll_rl_rpa_update>
		rpa_gen = 1;
   150ba:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   150bc:	7926      	ldrb	r6, [r4, #4]
   150be:	f006 070f 	and.w	r7, r6, #15
   150c2:	f3c6 1600 	ubfx	r6, r6, #4, #1
   150c6:	2100      	movs	r1, #0
   150c8:	4630      	mov	r0, r6
   150ca:	f7f6 f987 	bl	b3dc <ll_addr_get>
   150ce:	22ff      	movs	r2, #255	; 0xff
   150d0:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
   150d2:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   150d4:	8823      	ldrh	r3, [r4, #0]
   150d6:	9502      	str	r5, [sp, #8]
   150d8:	0992      	lsrs	r2, r2, #6
   150da:	9201      	str	r2, [sp, #4]
   150dc:	8862      	ldrh	r2, [r4, #2]
   150de:	9200      	str	r2, [sp, #0]
   150e0:	4631      	mov	r1, r6
   150e2:	4602      	mov	r2, r0
   150e4:	4638      	mov	r0, r7
   150e6:	f7ff fcef 	bl	14ac8 <radio_scan_enable>
}
   150ea:	b005      	add	sp, #20
   150ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   150ee:	2000      	movs	r0, #0
   150f0:	e7fb      	b.n	150ea <ll_scan_enable+0x66>
   150f2:	bf00      	nop
   150f4:	20003974 	.word	0x20003974

000150f8 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   150f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150fc:	b085      	sub	sp, #20
   150fe:	461e      	mov	r6, r3
   15100:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   15104:	9303      	str	r3, [sp, #12]
   15106:	4680      	mov	r8, r0
   15108:	4689      	mov	r9, r1
   1510a:	4615      	mov	r5, r2
   1510c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1510e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
   15112:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
   15116:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
   1511a:	f7fe ff4d 	bl	13fb8 <ll_scan_is_enabled>
   1511e:	9b03      	ldr	r3, [sp, #12]
   15120:	bba0      	cbnz	r0, 1518c <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   15122:	9300      	str	r3, [sp, #0]
   15124:	4652      	mov	r2, sl
   15126:	465b      	mov	r3, fp
   15128:	4639      	mov	r1, r7
   1512a:	4630      	mov	r0, r6
   1512c:	f7fe ff68 	bl	14000 <radio_connect_enable>
				      latency, timeout);

	if (status) {
   15130:	bb68      	cbnz	r0, 1518e <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
   15132:	4628      	mov	r0, r5
   15134:	f000 fa22 	bl	1557c <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
   15138:	b1dd      	cbz	r5, 15172 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1513a:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1513c:	1ea3      	subs	r3, r4, #2
   1513e:	2b01      	cmp	r3, #1
   15140:	d822      	bhi.n	15188 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
   15142:	2000      	movs	r0, #0
   15144:	f000 fb92 	bl	1586c <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   15148:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1514c:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
   1514e:	2100      	movs	r1, #0
   15150:	4620      	mov	r0, r4
   15152:	f7f6 f943 	bl	b3dc <ll_addr_get>
   15156:	4643      	mov	r3, r8
   15158:	4602      	mov	r2, r0
   1515a:	4621      	mov	r1, r4
   1515c:	2000      	movs	r0, #0
   1515e:	9711      	str	r7, [sp, #68]	; 0x44
   15160:	9610      	str	r6, [sp, #64]	; 0x40
   15162:	950f      	str	r5, [sp, #60]	; 0x3c
   15164:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   15168:	b005      	add	sp, #20
   1516a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
   1516e:	f7ff bcab 	b.w	14ac8 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
   15172:	f000 fb73 	bl	1585c <ctrl_rl_enabled>
   15176:	2800      	cmp	r0, #0
   15178:	d0df      	beq.n	1513a <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1517a:	4639      	mov	r1, r7
   1517c:	462a      	mov	r2, r5
   1517e:	4630      	mov	r0, r6
   15180:	f000 fa12 	bl	155a8 <ll_rl_find>
   15184:	4607      	mov	r7, r0
   15186:	e7d9      	b.n	1513c <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
   15188:	2600      	movs	r6, #0
   1518a:	e7e0      	b.n	1514e <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1518c:	200c      	movs	r0, #12
}
   1518e:	b005      	add	sp, #20
   15190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015194 <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
   15194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15198:	4688      	mov	r8, r1
	int i;

	if (free) {
   1519a:	4615      	mov	r5, r2
   1519c:	b10a      	cbz	r2, 151a2 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1519e:	23ff      	movs	r3, #255	; 0xff
   151a0:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   151a2:	4e14      	ldr	r6, [pc, #80]	; (151f4 <wl_find+0x60>)
{
   151a4:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   151a6:	f000 0701 	and.w	r7, r0, #1
   151aa:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   151ae:	07da      	lsls	r2, r3, #31
   151b0:	d51d      	bpl.n	151ee <wl_find+0x5a>
   151b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   151b6:	42bb      	cmp	r3, r7
   151b8:	d113      	bne.n	151e2 <wl_find+0x4e>
   151ba:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
   151be:	2206      	movs	r2, #6
   151c0:	4641      	mov	r1, r8
   151c2:	3002      	adds	r0, #2
   151c4:	f7eb fa0b 	bl	5de <memcmp>
   151c8:	b910      	cbnz	r0, 151d0 <wl_find+0x3c>
			return i;
   151ca:	b2e0      	uxtb	r0, r4
   151cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   151d0:	b13d      	cbz	r5, 151e2 <wl_find+0x4e>
   151d2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   151d6:	07db      	lsls	r3, r3, #31
   151d8:	d403      	bmi.n	151e2 <wl_find+0x4e>
   151da:	782b      	ldrb	r3, [r5, #0]
   151dc:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   151de:	bf08      	it	eq
   151e0:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   151e2:	3401      	adds	r4, #1
   151e4:	2c08      	cmp	r4, #8
   151e6:	d1e0      	bne.n	151aa <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
   151e8:	20ff      	movs	r0, #255	; 0xff
   151ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   151ee:	2d00      	cmp	r5, #0
   151f0:	d1f3      	bne.n	151da <wl_find+0x46>
   151f2:	e7f6      	b.n	151e2 <wl_find+0x4e>
   151f4:	20003ba7 	.word	0x20003ba7

000151f8 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
   151f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	filter->enable_bitmask = 0;
   151fc:	4d12      	ldr	r5, [pc, #72]	; (15248 <filter_rl_update+0x50>)

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
   151fe:	4e13      	ldr	r6, [pc, #76]	; (1524c <filter_rl_update+0x54>)
	filter->enable_bitmask = 0;
   15200:	2400      	movs	r4, #0
   15202:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   15204:	706c      	strb	r4, [r5, #1]
		if (rl[i].taken) {
   15206:	2728      	movs	r7, #40	; 0x28
	filter->enable_bitmask |= BIT(index);
   15208:	f04f 0801 	mov.w	r8, #1
		if (rl[i].taken) {
   1520c:	fb07 f104 	mul.w	r1, r7, r4
   15210:	5c73      	ldrb	r3, [r6, r1]
   15212:	07da      	lsls	r2, r3, #31
   15214:	d512      	bpl.n	1523c <filter_rl_update+0x44>
	filter->enable_bitmask |= BIT(index);
   15216:	7828      	ldrb	r0, [r5, #0]
   15218:	fa08 f204 	lsl.w	r2, r8, r4
   1521c:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1521e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   15222:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   15224:	786a      	ldrb	r2, [r5, #1]
   15226:	40a3      	lsls	r3, r4
   15228:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1522a:	2206      	movs	r2, #6
   1522c:	3101      	adds	r1, #1
   1522e:	fb02 5004 	mla	r0, r2, r4, r5
   15232:	4431      	add	r1, r6
   15234:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   15236:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15238:	f7eb f9e6 	bl	608 <memcpy>
   1523c:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1523e:	2c08      	cmp	r4, #8
   15240:	d1e4      	bne.n	1520c <filter_rl_update+0x14>
				      rl[i].id_addr.val);
		}
	}
}
   15242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15246:	bf00      	nop
   15248:	20003b75 	.word	0x20003b75
   1524c:	20003a34 	.word	0x20003a34

00015250 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
   15250:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
   15252:	f7fe fe9b 	bl	13f8c <ll_adv_is_enabled>
   15256:	b928      	cbnz	r0, 15264 <rl_access_check.constprop.1+0x14>
   15258:	f7fe feae 	bl	13fb8 <ll_scan_is_enabled>
   1525c:	fab0 f080 	clz	r0, r0
   15260:	0940      	lsrs	r0, r0, #5
   15262:	bd08      	pop	{r3, pc}
   15264:	2000      	movs	r0, #0
}
   15266:	bd08      	pop	{r3, pc}

00015268 <filter_wl_update>:
{
   15268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1526c:	4e1b      	ldr	r6, [pc, #108]	; (152dc <filter_wl_update+0x74>)
	filter->enable_bitmask = 0;
   1526e:	4d1c      	ldr	r5, [pc, #112]	; (152e0 <filter_wl_update+0x78>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   15270:	f8df 9074 	ldr.w	r9, [pc, #116]	; 152e8 <filter_wl_update+0x80>
	filter->enable_bitmask = 0;
   15274:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   15276:	1eb7      	subs	r7, r6, #2
	filter->enable_bitmask = 0;
   15278:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
   1527a:	706c      	strb	r4, [r5, #1]
   1527c:	46b8      	mov	r8, r7
		if (!wl[i].taken) {
   1527e:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   15282:	07d9      	lsls	r1, r3, #31
   15284:	d523      	bpl.n	152ce <filter_wl_update+0x66>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   15286:	f899 3000 	ldrb.w	r3, [r9]
   1528a:	b15b      	cbz	r3, 152a4 <filter_wl_update+0x3c>
		j = wl[i].rl_idx;
   1528c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   15290:	2a07      	cmp	r2, #7
   15292:	d807      	bhi.n	152a4 <filter_wl_update+0x3c>
   15294:	2328      	movs	r3, #40	; 0x28
   15296:	4353      	muls	r3, r2
   15298:	4a12      	ldr	r2, [pc, #72]	; (152e4 <filter_wl_update+0x7c>)
   1529a:	5cd3      	ldrb	r3, [r2, r3]
   1529c:	075a      	lsls	r2, r3, #29
   1529e:	d501      	bpl.n	152a4 <filter_wl_update+0x3c>
   152a0:	06db      	lsls	r3, r3, #27
   152a2:	d514      	bpl.n	152ce <filter_wl_update+0x66>
	filter->enable_bitmask |= BIT(index);
   152a4:	2201      	movs	r2, #1
   152a6:	fa02 f104 	lsl.w	r1, r2, r4
   152aa:	782a      	ldrb	r2, [r5, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   152ac:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   152b0:	430a      	orrs	r2, r1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   152b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   152b6:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   152b8:	786a      	ldrb	r2, [r5, #1]
   152ba:	40a3      	lsls	r3, r4
   152bc:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   152be:	2206      	movs	r2, #6
   152c0:	fb02 5004 	mla	r0, r2, r4, r5
   152c4:	4631      	mov	r1, r6
   152c6:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   152c8:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   152ca:	f7eb f99d 	bl	608 <memcpy>
   152ce:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
   152d0:	2c08      	cmp	r4, #8
   152d2:	f106 0608 	add.w	r6, r6, #8
   152d6:	d1d2      	bne.n	1527e <filter_wl_update+0x16>
}
   152d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   152dc:	20003ba9 	.word	0x20003ba9
   152e0:	20003be7 	.word	0x20003be7
   152e4:	20003a34 	.word	0x20003a34
   152e8:	20003b74 	.word	0x20003b74

000152ec <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   152ec:	2807      	cmp	r0, #7
   152ee:	d80c      	bhi.n	1530a <ctrl_lrpa_get+0x1e>
   152f0:	2328      	movs	r3, #40	; 0x28
   152f2:	4358      	muls	r0, r3
   152f4:	4a06      	ldr	r2, [pc, #24]	; (15310 <ctrl_lrpa_get+0x24>)
   152f6:	5c13      	ldrb	r3, [r2, r0]
   152f8:	1811      	adds	r1, r2, r0
   152fa:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   152fe:	b128      	cbz	r0, 1530c <ctrl_lrpa_get+0x20>
   15300:	f3c3 0040 	ubfx	r0, r3, #1, #1
   15304:	b110      	cbz	r0, 1530c <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   15306:	6a48      	ldr	r0, [r1, #36]	; 0x24
   15308:	4770      	bx	lr
		return NULL;
   1530a:	2000      	movs	r0, #0
}
   1530c:	4770      	bx	lr
   1530e:	bf00      	nop
   15310:	20003a34 	.word	0x20003a34

00015314 <ctrl_irks_get>:
	*count = peer_irk_count;
   15314:	4b02      	ldr	r3, [pc, #8]	; (15320 <ctrl_irks_get+0xc>)
   15316:	781b      	ldrb	r3, [r3, #0]
   15318:	7003      	strb	r3, [r0, #0]
}
   1531a:	4802      	ldr	r0, [pc, #8]	; (15324 <ctrl_irks_get+0x10>)
   1531c:	4770      	bx	lr
   1531e:	bf00      	nop
   15320:	200039aa 	.word	0x200039aa
   15324:	200039b3 	.word	0x200039b3

00015328 <ctrl_rl_idx>:
{
   15328:	b507      	push	{r0, r1, r2, lr}
	if (whitelist) {
   1532a:	b320      	cbz	r0, 15376 <ctrl_rl_idx+0x4e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1532c:	2907      	cmp	r1, #7
   1532e:	d90e      	bls.n	1534e <ctrl_rl_idx+0x26>
		LL_ASSERT(wl[devmatch_id].taken);
   15330:	4b1d      	ldr	r3, [pc, #116]	; (153a8 <ctrl_rl_idx+0x80>)
   15332:	9301      	str	r3, [sp, #4]
   15334:	9300      	str	r3, [sp, #0]
   15336:	4a1d      	ldr	r2, [pc, #116]	; (153ac <ctrl_rl_idx+0x84>)
   15338:	4b1d      	ldr	r3, [pc, #116]	; (153b0 <ctrl_rl_idx+0x88>)
   1533a:	491e      	ldr	r1, [pc, #120]	; (153b4 <ctrl_rl_idx+0x8c>)
   1533c:	481e      	ldr	r0, [pc, #120]	; (153b8 <ctrl_rl_idx+0x90>)
   1533e:	f7ec f9cf 	bl	16e0 <printk>
   15342:	4040      	eors	r0, r0
   15344:	f380 8811 	msr	BASEPRI, r0
   15348:	f04f 0004 	mov.w	r0, #4
   1534c:	df02      	svc	2
   1534e:	4b1b      	ldr	r3, [pc, #108]	; (153bc <ctrl_rl_idx+0x94>)
   15350:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
   15354:	07d2      	lsls	r2, r2, #31
   15356:	d407      	bmi.n	15368 <ctrl_rl_idx+0x40>
   15358:	4b13      	ldr	r3, [pc, #76]	; (153a8 <ctrl_rl_idx+0x80>)
   1535a:	9301      	str	r3, [sp, #4]
   1535c:	9300      	str	r3, [sp, #0]
   1535e:	4a13      	ldr	r2, [pc, #76]	; (153ac <ctrl_rl_idx+0x84>)
   15360:	4b13      	ldr	r3, [pc, #76]	; (153b0 <ctrl_rl_idx+0x88>)
   15362:	4914      	ldr	r1, [pc, #80]	; (153b4 <ctrl_rl_idx+0x8c>)
   15364:	4816      	ldr	r0, [pc, #88]	; (153c0 <ctrl_rl_idx+0x98>)
   15366:	e7ea      	b.n	1533e <ctrl_rl_idx+0x16>
		i = wl[devmatch_id].rl_idx;
   15368:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1536c:	7849      	ldrb	r1, [r1, #1]
}
   1536e:	4608      	mov	r0, r1
   15370:	b003      	add	sp, #12
   15372:	f85d fb04 	ldr.w	pc, [sp], #4
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   15376:	2907      	cmp	r1, #7
   15378:	d907      	bls.n	1538a <ctrl_rl_idx+0x62>
   1537a:	4b0b      	ldr	r3, [pc, #44]	; (153a8 <ctrl_rl_idx+0x80>)
   1537c:	9301      	str	r3, [sp, #4]
   1537e:	9300      	str	r3, [sp, #0]
   15380:	4a0a      	ldr	r2, [pc, #40]	; (153ac <ctrl_rl_idx+0x84>)
   15382:	4b0b      	ldr	r3, [pc, #44]	; (153b0 <ctrl_rl_idx+0x88>)
   15384:	490b      	ldr	r1, [pc, #44]	; (153b4 <ctrl_rl_idx+0x8c>)
   15386:	480f      	ldr	r0, [pc, #60]	; (153c4 <ctrl_rl_idx+0x9c>)
   15388:	e7d9      	b.n	1533e <ctrl_rl_idx+0x16>
		LL_ASSERT(rl[i].taken);
   1538a:	2328      	movs	r3, #40	; 0x28
   1538c:	434b      	muls	r3, r1
   1538e:	4a0e      	ldr	r2, [pc, #56]	; (153c8 <ctrl_rl_idx+0xa0>)
   15390:	5cd3      	ldrb	r3, [r2, r3]
   15392:	07db      	lsls	r3, r3, #31
   15394:	d4eb      	bmi.n	1536e <ctrl_rl_idx+0x46>
   15396:	4b04      	ldr	r3, [pc, #16]	; (153a8 <ctrl_rl_idx+0x80>)
   15398:	9301      	str	r3, [sp, #4]
   1539a:	9300      	str	r3, [sp, #0]
   1539c:	4a03      	ldr	r2, [pc, #12]	; (153ac <ctrl_rl_idx+0x84>)
   1539e:	4b04      	ldr	r3, [pc, #16]	; (153b0 <ctrl_rl_idx+0x88>)
   153a0:	4904      	ldr	r1, [pc, #16]	; (153b4 <ctrl_rl_idx+0x8c>)
   153a2:	480a      	ldr	r0, [pc, #40]	; (153cc <ctrl_rl_idx+0xa4>)
   153a4:	e7cb      	b.n	1533e <ctrl_rl_idx+0x16>
   153a6:	bf00      	nop
   153a8:	0001868d 	.word	0x0001868d
   153ac:	00019a84 	.word	0x00019a84
   153b0:	0001c1cb 	.word	0x0001c1cb
   153b4:	00019a8b 	.word	0x00019a8b
   153b8:	0001c265 	.word	0x0001c265
   153bc:	20003ba7 	.word	0x20003ba7
   153c0:	0001c332 	.word	0x0001c332
   153c4:	0001c369 	.word	0x0001c369
   153c8:	20003a34 	.word	0x20003a34
   153cc:	0001c436 	.word	0x0001c436

000153d0 <ctrl_rl_irk_idx>:
{
   153d0:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   153d2:	4b18      	ldr	r3, [pc, #96]	; (15434 <ctrl_rl_irk_idx+0x64>)
   153d4:	781b      	ldrb	r3, [r3, #0]
   153d6:	4283      	cmp	r3, r0
   153d8:	d80e      	bhi.n	153f8 <ctrl_rl_irk_idx+0x28>
   153da:	4b17      	ldr	r3, [pc, #92]	; (15438 <ctrl_rl_irk_idx+0x68>)
   153dc:	9301      	str	r3, [sp, #4]
   153de:	9300      	str	r3, [sp, #0]
   153e0:	4a16      	ldr	r2, [pc, #88]	; (1543c <ctrl_rl_irk_idx+0x6c>)
   153e2:	4b17      	ldr	r3, [pc, #92]	; (15440 <ctrl_rl_irk_idx+0x70>)
   153e4:	4917      	ldr	r1, [pc, #92]	; (15444 <ctrl_rl_irk_idx+0x74>)
   153e6:	4818      	ldr	r0, [pc, #96]	; (15448 <ctrl_rl_irk_idx+0x78>)
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   153e8:	f7ec f97a 	bl	16e0 <printk>
   153ec:	4040      	eors	r0, r0
   153ee:	f380 8811 	msr	BASEPRI, r0
   153f2:	f04f 0004 	mov.w	r0, #4
   153f6:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   153f8:	4b14      	ldr	r3, [pc, #80]	; (1544c <ctrl_rl_irk_idx+0x7c>)
   153fa:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   153fc:	2807      	cmp	r0, #7
   153fe:	d907      	bls.n	15410 <ctrl_rl_irk_idx+0x40>
   15400:	4b0d      	ldr	r3, [pc, #52]	; (15438 <ctrl_rl_irk_idx+0x68>)
   15402:	9301      	str	r3, [sp, #4]
   15404:	9300      	str	r3, [sp, #0]
   15406:	4a0d      	ldr	r2, [pc, #52]	; (1543c <ctrl_rl_irk_idx+0x6c>)
   15408:	4b0d      	ldr	r3, [pc, #52]	; (15440 <ctrl_rl_irk_idx+0x70>)
   1540a:	490e      	ldr	r1, [pc, #56]	; (15444 <ctrl_rl_irk_idx+0x74>)
   1540c:	4810      	ldr	r0, [pc, #64]	; (15450 <ctrl_rl_irk_idx+0x80>)
   1540e:	e7eb      	b.n	153e8 <ctrl_rl_irk_idx+0x18>
	LL_ASSERT(rl[i].taken);
   15410:	2328      	movs	r3, #40	; 0x28
   15412:	4343      	muls	r3, r0
   15414:	4a0f      	ldr	r2, [pc, #60]	; (15454 <ctrl_rl_irk_idx+0x84>)
   15416:	5cd3      	ldrb	r3, [r2, r3]
   15418:	07db      	lsls	r3, r3, #31
   1541a:	d407      	bmi.n	1542c <ctrl_rl_irk_idx+0x5c>
   1541c:	4b06      	ldr	r3, [pc, #24]	; (15438 <ctrl_rl_irk_idx+0x68>)
   1541e:	9301      	str	r3, [sp, #4]
   15420:	9300      	str	r3, [sp, #0]
   15422:	4a06      	ldr	r2, [pc, #24]	; (1543c <ctrl_rl_irk_idx+0x6c>)
   15424:	4b06      	ldr	r3, [pc, #24]	; (15440 <ctrl_rl_irk_idx+0x70>)
   15426:	4907      	ldr	r1, [pc, #28]	; (15444 <ctrl_rl_irk_idx+0x74>)
   15428:	480b      	ldr	r0, [pc, #44]	; (15458 <ctrl_rl_irk_idx+0x88>)
   1542a:	e7dd      	b.n	153e8 <ctrl_rl_irk_idx+0x18>
}
   1542c:	b003      	add	sp, #12
   1542e:	f85d fb04 	ldr.w	pc, [sp], #4
   15432:	bf00      	nop
   15434:	200039aa 	.word	0x200039aa
   15438:	0001868d 	.word	0x0001868d
   1543c:	00019a84 	.word	0x00019a84
   15440:	0001c1d7 	.word	0x0001c1d7
   15444:	00019a8b 	.word	0x00019a8b
   15448:	0001c463 	.word	0x0001c463
   1544c:	200039ab 	.word	0x200039ab
   15450:	0001c4a1 	.word	0x0001c4a1
   15454:	20003a34 	.word	0x20003a34
   15458:	0001c436 	.word	0x0001c436

0001545c <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1545c:	2807      	cmp	r0, #7
{
   1545e:	b507      	push	{r0, r1, r2, lr}
	if (rl_idx >= ARRAY_SIZE(rl)) {
   15460:	d819      	bhi.n	15496 <ctrl_irk_whitelisted+0x3a>
	LL_ASSERT(rl[rl_idx].taken);
   15462:	2328      	movs	r3, #40	; 0x28
   15464:	4358      	muls	r0, r3
   15466:	4b0d      	ldr	r3, [pc, #52]	; (1549c <ctrl_irk_whitelisted+0x40>)
   15468:	5c18      	ldrb	r0, [r3, r0]
   1546a:	07c3      	lsls	r3, r0, #31
   1546c:	d40e      	bmi.n	1548c <ctrl_irk_whitelisted+0x30>
   1546e:	4b0c      	ldr	r3, [pc, #48]	; (154a0 <ctrl_irk_whitelisted+0x44>)
   15470:	9301      	str	r3, [sp, #4]
   15472:	9300      	str	r3, [sp, #0]
   15474:	4a0b      	ldr	r2, [pc, #44]	; (154a4 <ctrl_irk_whitelisted+0x48>)
   15476:	4b0c      	ldr	r3, [pc, #48]	; (154a8 <ctrl_irk_whitelisted+0x4c>)
   15478:	490c      	ldr	r1, [pc, #48]	; (154ac <ctrl_irk_whitelisted+0x50>)
   1547a:	480d      	ldr	r0, [pc, #52]	; (154b0 <ctrl_irk_whitelisted+0x54>)
   1547c:	f7ec f930 	bl	16e0 <printk>
   15480:	4040      	eors	r0, r0
   15482:	f380 8811 	msr	BASEPRI, r0
   15486:	f04f 0004 	mov.w	r0, #4
   1548a:	df02      	svc	2
	return rl[rl_idx].wl;
   1548c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   15490:	b003      	add	sp, #12
   15492:	f85d fb04 	ldr.w	pc, [sp], #4
		return false;
   15496:	2000      	movs	r0, #0
   15498:	e7fa      	b.n	15490 <ctrl_irk_whitelisted+0x34>
   1549a:	bf00      	nop
   1549c:	20003a34 	.word	0x20003a34
   154a0:	0001868d 	.word	0x0001868d
   154a4:	00019a84 	.word	0x00019a84
   154a8:	0001c1e7 	.word	0x0001c1e7
   154ac:	00019a8b 	.word	0x00019a8b
   154b0:	0001c233 	.word	0x0001c233

000154b4 <ctrl_filter_get>:
}
   154b4:	4b03      	ldr	r3, [pc, #12]	; (154c4 <ctrl_filter_get+0x10>)
   154b6:	4a04      	ldr	r2, [pc, #16]	; (154c8 <ctrl_filter_get+0x14>)
   154b8:	2800      	cmp	r0, #0
   154ba:	bf14      	ite	ne
   154bc:	4610      	movne	r0, r2
   154be:	4618      	moveq	r0, r3
   154c0:	4770      	bx	lr
   154c2:	bf00      	nop
   154c4:	20003b75 	.word	0x20003b75
   154c8:	20003be7 	.word	0x20003be7

000154cc <ll_wl_size_get>:
   154cc:	2008      	movs	r0, #8
   154ce:	4770      	bx	lr

000154d0 <ll_wl_clear>:
{
   154d0:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   154d2:	f7fe fd63 	bl	13f9c <radio_adv_filter_pol_get>
   154d6:	4604      	mov	r4, r0
   154d8:	b110      	cbz	r0, 154e0 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   154da:	240c      	movs	r4, #12
}
   154dc:	4620      	mov	r0, r4
   154de:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   154e0:	f7fe fd80 	bl	13fe4 <radio_scan_filter_pol_get>
   154e4:	07c3      	lsls	r3, r0, #31
   154e6:	d4f8      	bmi.n	154da <ll_wl_clear+0xa>
		wl[i].taken = 0;
   154e8:	4a07      	ldr	r2, [pc, #28]	; (15508 <ll_wl_clear+0x38>)
   154ea:	4623      	mov	r3, r4
   154ec:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   154f0:	f36f 0100 	bfc	r1, #0, #1
   154f4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   154f8:	3301      	adds	r3, #1
   154fa:	2b08      	cmp	r3, #8
   154fc:	d1f6      	bne.n	154ec <ll_wl_clear+0x1c>
	wl_anon = 0;
   154fe:	4b03      	ldr	r3, [pc, #12]	; (1550c <ll_wl_clear+0x3c>)
   15500:	2200      	movs	r2, #0
   15502:	701a      	strb	r2, [r3, #0]
	return 0;
   15504:	e7ea      	b.n	154dc <ll_wl_clear+0xc>
   15506:	bf00      	nop
   15508:	20003ba7 	.word	0x20003ba7
   1550c:	20005430 	.word	0x20005430

00015510 <ll_wl_remove>:
{
   15510:	b538      	push	{r3, r4, r5, lr}
   15512:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   15514:	f7fe fd42 	bl	13f9c <radio_adv_filter_pol_get>
   15518:	4604      	mov	r4, r0
   1551a:	b110      	cbz	r0, 15522 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1551c:	240c      	movs	r4, #12
}
   1551e:	4620      	mov	r0, r4
   15520:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   15522:	f7fe fd5f 	bl	13fe4 <radio_scan_filter_pol_get>
   15526:	07c3      	lsls	r3, r0, #31
   15528:	d4f8      	bmi.n	1551c <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
   1552a:	7828      	ldrb	r0, [r5, #0]
   1552c:	28ff      	cmp	r0, #255	; 0xff
   1552e:	d102      	bne.n	15536 <ll_wl_remove+0x26>
		wl_anon = 0;
   15530:	4b0f      	ldr	r3, [pc, #60]	; (15570 <ll_wl_remove+0x60>)
   15532:	701c      	strb	r4, [r3, #0]
		return 0;
   15534:	e7f3      	b.n	1551e <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   15536:	4622      	mov	r2, r4
   15538:	1c69      	adds	r1, r5, #1
   1553a:	f7ff fe2b 	bl	15194 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1553e:	2807      	cmp	r0, #7
   15540:	d813      	bhi.n	1556a <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
   15542:	4b0c      	ldr	r3, [pc, #48]	; (15574 <ll_wl_remove+0x64>)
   15544:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
   15548:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1554a:	2d07      	cmp	r5, #7
   1554c:	d806      	bhi.n	1555c <ll_wl_remove+0x4c>
			rl[j].wl = 0;
   1554e:	2228      	movs	r2, #40	; 0x28
   15550:	4909      	ldr	r1, [pc, #36]	; (15578 <ll_wl_remove+0x68>)
   15552:	436a      	muls	r2, r5
   15554:	5c8d      	ldrb	r5, [r1, r2]
   15556:	f364 1545 	bfi	r5, r4, #5, #1
   1555a:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
   1555c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   15560:	f36f 0200 	bfc	r2, #0, #1
   15564:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
   15568:	e7d9      	b.n	1551e <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1556a:	2402      	movs	r4, #2
   1556c:	e7d7      	b.n	1551e <ll_wl_remove+0xe>
   1556e:	bf00      	nop
   15570:	20005430 	.word	0x20005430
   15574:	20003ba7 	.word	0x20003ba7
   15578:	20003a34 	.word	0x20003a34

0001557c <ll_filters_scan_update>:
{
   1557c:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   1557e:	07c3      	lsls	r3, r0, #31
   15580:	d504      	bpl.n	1558c <ll_filters_scan_update+0x10>
   15582:	f7fe fd0b 	bl	13f9c <radio_adv_filter_pol_get>
   15586:	b908      	cbnz	r0, 1558c <ll_filters_scan_update+0x10>
		filter_wl_update();
   15588:	f7ff fe6e 	bl	15268 <filter_wl_update>
	if (rl_enable && !ll_adv_is_enabled()) {
   1558c:	4b05      	ldr	r3, [pc, #20]	; (155a4 <ll_filters_scan_update+0x28>)
   1558e:	781b      	ldrb	r3, [r3, #0]
   15590:	b133      	cbz	r3, 155a0 <ll_filters_scan_update+0x24>
   15592:	f7fe fcfb 	bl	13f8c <ll_adv_is_enabled>
   15596:	b918      	cbnz	r0, 155a0 <ll_filters_scan_update+0x24>
}
   15598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
   1559c:	f7ff be2c 	b.w	151f8 <filter_rl_update>
   155a0:	bd08      	pop	{r3, pc}
   155a2:	bf00      	nop
   155a4:	20003b74 	.word	0x20003b74

000155a8 <ll_rl_find>:
{
   155a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   155ac:	468a      	mov	sl, r1
	if (free) {
   155ae:	4614      	mov	r4, r2
   155b0:	b10a      	cbz	r2, 155b6 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   155b2:	23ff      	movs	r3, #255	; 0xff
   155b4:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   155b6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1560c <ll_rl_find+0x64>
{
   155ba:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   155bc:	f000 0901 	and.w	r9, r0, #1
   155c0:	2628      	movs	r6, #40	; 0x28
   155c2:	436e      	muls	r6, r5
   155c4:	b2ef      	uxtb	r7, r5
   155c6:	f818 3006 	ldrb.w	r3, [r8, r6]
   155ca:	07da      	lsls	r2, r3, #31
   155cc:	d51a      	bpl.n	15604 <ll_rl_find+0x5c>
   155ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
   155d2:	454b      	cmp	r3, r9
   155d4:	d10f      	bne.n	155f6 <ll_rl_find+0x4e>
   155d6:	1c70      	adds	r0, r6, #1
   155d8:	2206      	movs	r2, #6
   155da:	4651      	mov	r1, sl
   155dc:	4440      	add	r0, r8
   155de:	f7ea fffe 	bl	5de <memcmp>
   155e2:	b160      	cbz	r0, 155fe <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   155e4:	b13c      	cbz	r4, 155f6 <ll_rl_find+0x4e>
   155e6:	f818 3006 	ldrb.w	r3, [r8, r6]
   155ea:	07db      	lsls	r3, r3, #31
   155ec:	d403      	bmi.n	155f6 <ll_rl_find+0x4e>
   155ee:	7823      	ldrb	r3, [r4, #0]
   155f0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   155f2:	bf08      	it	eq
   155f4:	7027      	strbeq	r7, [r4, #0]
   155f6:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   155f8:	2d08      	cmp	r5, #8
   155fa:	d1e1      	bne.n	155c0 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
   155fc:	27ff      	movs	r7, #255	; 0xff
}
   155fe:	4638      	mov	r0, r7
   15600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15604:	2c00      	cmp	r4, #0
   15606:	d1f2      	bne.n	155ee <ll_rl_find+0x46>
   15608:	e7f5      	b.n	155f6 <ll_rl_find+0x4e>
   1560a:	bf00      	nop
   1560c:	20003a34 	.word	0x20003a34

00015610 <ll_wl_add>:
{
   15610:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15614:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   15616:	f7fe fcc1 	bl	13f9c <radio_adv_filter_pol_get>
   1561a:	4605      	mov	r5, r0
   1561c:	b120      	cbz	r0, 15628 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1561e:	250c      	movs	r5, #12
}
   15620:	4628      	mov	r0, r5
   15622:	b002      	add	sp, #8
   15624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   15628:	f7fe fcdc 	bl	13fe4 <radio_scan_filter_pol_get>
   1562c:	07c3      	lsls	r3, r0, #31
   1562e:	d4f6      	bmi.n	1561e <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
   15630:	7838      	ldrb	r0, [r7, #0]
   15632:	28ff      	cmp	r0, #255	; 0xff
   15634:	d103      	bne.n	1563e <ll_wl_add+0x2e>
		wl_anon = 1;
   15636:	4b1f      	ldr	r3, [pc, #124]	; (156b4 <ll_wl_add+0xa4>)
   15638:	2201      	movs	r2, #1
   1563a:	701a      	strb	r2, [r3, #0]
		return 0;
   1563c:	e7f0      	b.n	15620 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1563e:	f107 0801 	add.w	r8, r7, #1
   15642:	f10d 0207 	add.w	r2, sp, #7
   15646:	4641      	mov	r1, r8
   15648:	f7ff fda4 	bl	15194 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1564c:	2807      	cmp	r0, #7
   1564e:	d92d      	bls.n	156ac <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
   15650:	f89d 6007 	ldrb.w	r6, [sp, #7]
   15654:	2e07      	cmp	r6, #7
   15656:	d82b      	bhi.n	156b0 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
   15658:	4c17      	ldr	r4, [pc, #92]	; (156b8 <ll_wl_add+0xa8>)
   1565a:	783a      	ldrb	r2, [r7, #0]
   1565c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   15660:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   15664:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
   15668:	4641      	mov	r1, r8
   1566a:	2206      	movs	r2, #6
   1566c:	3002      	adds	r0, #2
   1566e:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   15672:	f7ea ffc9 	bl	608 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   15676:	462a      	mov	r2, r5
   15678:	4641      	mov	r1, r8
   1567a:	7838      	ldrb	r0, [r7, #0]
   1567c:	f7ff ff94 	bl	155a8 <ll_rl_find>
   15680:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
   15682:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
   15684:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
   15686:	d80e      	bhi.n	156a6 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
   15688:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1568a:	2328      	movs	r3, #40	; 0x28
   1568c:	4a0b      	ldr	r2, [pc, #44]	; (156bc <ll_wl_add+0xac>)
   1568e:	4358      	muls	r0, r3
   15690:	5c13      	ldrb	r3, [r2, r0]
   15692:	f043 0320 	orr.w	r3, r3, #32
   15696:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
   15698:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   1569c:	f043 0301 	orr.w	r3, r3, #1
   156a0:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
   156a4:	e7bc      	b.n	15620 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
   156a6:	22ff      	movs	r2, #255	; 0xff
   156a8:	705a      	strb	r2, [r3, #1]
   156aa:	e7f5      	b.n	15698 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
   156ac:	2512      	movs	r5, #18
   156ae:	e7b7      	b.n	15620 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   156b0:	2507      	movs	r5, #7
	return wl_add(addr);
   156b2:	e7b5      	b.n	15620 <ll_wl_add+0x10>
   156b4:	20005430 	.word	0x20005430
   156b8:	20003ba7 	.word	0x20003ba7
   156bc:	20003a34 	.word	0x20003a34

000156c0 <ctrl_rl_idx_allowed>:
{
   156c0:	b507      	push	{r0, r1, r2, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   156c2:	4b12      	ldr	r3, [pc, #72]	; (1570c <ctrl_rl_idx_allowed+0x4c>)
   156c4:	781b      	ldrb	r3, [r3, #0]
   156c6:	b1f3      	cbz	r3, 15706 <ctrl_rl_idx_allowed+0x46>
   156c8:	2907      	cmp	r1, #7
   156ca:	d81c      	bhi.n	15706 <ctrl_rl_idx_allowed+0x46>
   156cc:	b9d8      	cbnz	r0, 15706 <ctrl_rl_idx_allowed+0x46>
	LL_ASSERT(rl[rl_idx].taken);
   156ce:	2328      	movs	r3, #40	; 0x28
   156d0:	4359      	muls	r1, r3
   156d2:	4b0f      	ldr	r3, [pc, #60]	; (15710 <ctrl_rl_idx_allowed+0x50>)
   156d4:	5c58      	ldrb	r0, [r3, r1]
   156d6:	07c2      	lsls	r2, r0, #31
   156d8:	d40e      	bmi.n	156f8 <ctrl_rl_idx_allowed+0x38>
   156da:	4b0e      	ldr	r3, [pc, #56]	; (15714 <ctrl_rl_idx_allowed+0x54>)
   156dc:	9301      	str	r3, [sp, #4]
   156de:	9300      	str	r3, [sp, #0]
   156e0:	4a0d      	ldr	r2, [pc, #52]	; (15718 <ctrl_rl_idx_allowed+0x58>)
   156e2:	4b0e      	ldr	r3, [pc, #56]	; (1571c <ctrl_rl_idx_allowed+0x5c>)
   156e4:	490e      	ldr	r1, [pc, #56]	; (15720 <ctrl_rl_idx_allowed+0x60>)
   156e6:	480f      	ldr	r0, [pc, #60]	; (15724 <ctrl_rl_idx_allowed+0x64>)
   156e8:	f7eb fffa 	bl	16e0 <printk>
   156ec:	4040      	eors	r0, r0
   156ee:	f380 8811 	msr	BASEPRI, r0
   156f2:	f04f 0004 	mov.w	r0, #4
   156f6:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   156f8:	0743      	lsls	r3, r0, #29
   156fa:	d504      	bpl.n	15706 <ctrl_rl_idx_allowed+0x46>
   156fc:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   15700:	b003      	add	sp, #12
   15702:	f85d fb04 	ldr.w	pc, [sp], #4
		return true;
   15706:	2001      	movs	r0, #1
   15708:	e7fa      	b.n	15700 <ctrl_rl_idx_allowed+0x40>
   1570a:	bf00      	nop
   1570c:	20003b74 	.word	0x20003b74
   15710:	20003a34 	.word	0x20003a34
   15714:	0001868d 	.word	0x0001868d
   15718:	00019a84 	.word	0x00019a84
   1571c:	0001c1fc 	.word	0x0001c1fc
   15720:	00019a8b 	.word	0x00019a8b
   15724:	0001c233 	.word	0x0001c233

00015728 <ll_rl_id_addr_get>:
{
   15728:	4603      	mov	r3, r0
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1572a:	2b07      	cmp	r3, #7
{
   1572c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1572e:	4610      	mov	r0, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15730:	d90e      	bls.n	15750 <ll_rl_id_addr_get+0x28>
   15732:	4b15      	ldr	r3, [pc, #84]	; (15788 <ll_rl_id_addr_get+0x60>)
   15734:	9301      	str	r3, [sp, #4]
   15736:	9300      	str	r3, [sp, #0]
   15738:	4a14      	ldr	r2, [pc, #80]	; (1578c <ll_rl_id_addr_get+0x64>)
   1573a:	4b15      	ldr	r3, [pc, #84]	; (15790 <ll_rl_id_addr_get+0x68>)
   1573c:	4915      	ldr	r1, [pc, #84]	; (15794 <ll_rl_id_addr_get+0x6c>)
   1573e:	4816      	ldr	r0, [pc, #88]	; (15798 <ll_rl_id_addr_get+0x70>)
	LL_ASSERT(rl[rl_idx].taken);
   15740:	f7eb ffce 	bl	16e0 <printk>
   15744:	4040      	eors	r0, r0
   15746:	f380 8811 	msr	BASEPRI, r0
   1574a:	f04f 0004 	mov.w	r0, #4
   1574e:	df02      	svc	2
   15750:	2528      	movs	r5, #40	; 0x28
   15752:	4c12      	ldr	r4, [pc, #72]	; (1579c <ll_rl_id_addr_get+0x74>)
   15754:	fb05 f203 	mul.w	r2, r5, r3
   15758:	5ca2      	ldrb	r2, [r4, r2]
   1575a:	f012 0f01 	tst.w	r2, #1
   1575e:	d107      	bne.n	15770 <ll_rl_id_addr_get+0x48>
   15760:	4b09      	ldr	r3, [pc, #36]	; (15788 <ll_rl_id_addr_get+0x60>)
   15762:	9301      	str	r3, [sp, #4]
   15764:	9300      	str	r3, [sp, #0]
   15766:	4a09      	ldr	r2, [pc, #36]	; (1578c <ll_rl_id_addr_get+0x64>)
   15768:	4b09      	ldr	r3, [pc, #36]	; (15790 <ll_rl_id_addr_get+0x68>)
   1576a:	490a      	ldr	r1, [pc, #40]	; (15794 <ll_rl_id_addr_get+0x6c>)
   1576c:	480c      	ldr	r0, [pc, #48]	; (157a0 <ll_rl_id_addr_get+0x78>)
   1576e:	e7e7      	b.n	15740 <ll_rl_id_addr_get+0x18>
	*id_addr_type = rl[rl_idx].id_addr_type;
   15770:	f3c2 1280 	ubfx	r2, r2, #6, #1
   15774:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15776:	fb05 4103 	mla	r1, r5, r3, r4
   1577a:	2206      	movs	r2, #6
   1577c:	3101      	adds	r1, #1
}
   1577e:	b003      	add	sp, #12
   15780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15784:	f7ea bf40 	b.w	608 <memcpy>
   15788:	0001868d 	.word	0x0001868d
   1578c:	00019a84 	.word	0x00019a84
   15790:	0001c210 	.word	0x0001c210
   15794:	00019a8b 	.word	0x00019a8b
   15798:	0001c4c8 	.word	0x0001c4c8
   1579c:	20003a34 	.word	0x20003a34
   157a0:	0001c233 	.word	0x0001c233

000157a4 <ctrl_rl_addr_allowed>:
{
   157a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   157a8:	4b1a      	ldr	r3, [pc, #104]	; (15814 <ctrl_rl_addr_allowed+0x70>)
   157aa:	781b      	ldrb	r3, [r3, #0]
   157ac:	b37b      	cbz	r3, 1580e <ctrl_rl_addr_allowed+0x6a>
   157ae:	7813      	ldrb	r3, [r2, #0]
   157b0:	2bff      	cmp	r3, #255	; 0xff
   157b2:	d12c      	bne.n	1580e <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   157b4:	4e18      	ldr	r6, [pc, #96]	; (15818 <ctrl_rl_addr_allowed+0x74>)
   157b6:	2400      	movs	r4, #0
   157b8:	f04f 0828 	mov.w	r8, #40	; 0x28
   157bc:	46b6      	mov	lr, r6
   157be:	fb08 f304 	mul.w	r3, r8, r4
   157c2:	fa5f fc84 	uxtb.w	ip, r4
   157c6:	5cf7      	ldrb	r7, [r6, r3]
   157c8:	f017 0f01 	tst.w	r7, #1
   157cc:	eb06 0503 	add.w	r5, r6, r3
   157d0:	d01a      	beq.n	15808 <ctrl_rl_addr_allowed+0x64>
   157d2:	f3c7 1780 	ubfx	r7, r7, #6, #1
   157d6:	4287      	cmp	r7, r0
   157d8:	d116      	bne.n	15808 <ctrl_rl_addr_allowed+0x64>
   157da:	3306      	adds	r3, #6
   157dc:	1e4f      	subs	r7, r1, #1
   157de:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
   157e0:	f815 af01 	ldrb.w	sl, [r5, #1]!
   157e4:	f817 9f01 	ldrb.w	r9, [r7, #1]!
   157e8:	45ca      	cmp	sl, r9
   157ea:	d10d      	bne.n	15808 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
   157ec:	429d      	cmp	r5, r3
   157ee:	d1f7      	bne.n	157e0 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
   157f0:	2328      	movs	r3, #40	; 0x28
   157f2:	435c      	muls	r4, r3
				*rl_idx = i;
   157f4:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
   157f8:	f81e 0004 	ldrb.w	r0, [lr, r4]
   157fc:	0743      	lsls	r3, r0, #29
   157fe:	d506      	bpl.n	1580e <ctrl_rl_addr_allowed+0x6a>
   15800:	f3c0 1000 	ubfx	r0, r0, #4, #1
   15804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15808:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1580a:	2c08      	cmp	r4, #8
   1580c:	d1d7      	bne.n	157be <ctrl_rl_addr_allowed+0x1a>
   1580e:	2001      	movs	r0, #1
}
   15810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15814:	20003b74 	.word	0x20003b74
   15818:	20003a34 	.word	0x20003a34

0001581c <ctrl_rl_addr_resolve>:
{
   1581c:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1581e:	4c0d      	ldr	r4, [pc, #52]	; (15854 <ctrl_rl_addr_resolve+0x38>)
   15820:	7824      	ldrb	r4, [r4, #0]
   15822:	b1a4      	cbz	r4, 1584e <ctrl_rl_addr_resolve+0x32>
   15824:	2a07      	cmp	r2, #7
   15826:	d812      	bhi.n	1584e <ctrl_rl_addr_resolve+0x32>
   15828:	2528      	movs	r5, #40	; 0x28
   1582a:	4c0b      	ldr	r4, [pc, #44]	; (15858 <ctrl_rl_addr_resolve+0x3c>)
   1582c:	fb05 f602 	mul.w	r6, r5, r2
   15830:	5da6      	ldrb	r6, [r4, r6]
   15832:	0736      	lsls	r6, r6, #28
   15834:	d50b      	bpl.n	1584e <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   15836:	b150      	cbz	r0, 1584e <ctrl_rl_addr_resolve+0x32>
   15838:	794b      	ldrb	r3, [r1, #5]
   1583a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1583e:	2b40      	cmp	r3, #64	; 0x40
   15840:	d105      	bne.n	1584e <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   15842:	fb05 4202 	mla	r2, r5, r2, r4
   15846:	1dd0      	adds	r0, r2, #7
}
   15848:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1584a:	f7ec bff0 	b.w	282e <bt_rpa_irk_matches>
}
   1584e:	2000      	movs	r0, #0
   15850:	bc70      	pop	{r4, r5, r6}
   15852:	4770      	bx	lr
   15854:	20003b74 	.word	0x20003b74
   15858:	20003a34 	.word	0x20003a34

0001585c <ctrl_rl_enabled>:
	return rl_enable;
   1585c:	4b02      	ldr	r3, [pc, #8]	; (15868 <ctrl_rl_enabled+0xc>)
   1585e:	7818      	ldrb	r0, [r3, #0]
}
   15860:	3000      	adds	r0, #0
   15862:	bf18      	it	ne
   15864:	2001      	movne	r0, #1
   15866:	4770      	bx	lr
   15868:	20003b74 	.word	0x20003b74

0001586c <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
   1586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15870:	b089      	sub	sp, #36	; 0x24
   15872:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   15874:	f001 ff90 	bl	17798 <_impl_k_uptime_get>
   15878:	4680      	mov	r8, r0
   1587a:	4689      	mov	r9, r1
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
   1587c:	2c00      	cmp	r4, #0
   1587e:	d148      	bne.n	15912 <ll_rl_rpa_update+0xa6>
   15880:	4b3b      	ldr	r3, [pc, #236]	; (15970 <ll_rl_rpa_update+0x104>)
   15882:	e9d3 2300 	ldrd	r2, r3, [r3]
   15886:	1c5c      	adds	r4, r3, #1
   15888:	bf08      	it	eq
   1588a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1588e:	d040      	beq.n	15912 <ll_rl_rpa_update+0xa6>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   15890:	1a82      	subs	r2, r0, r2
   15892:	eb61 0303 	sbc.w	r3, r1, r3
   15896:	4937      	ldr	r1, [pc, #220]	; (15974 <ll_rl_rpa_update+0x108>)
   15898:	6808      	ldr	r0, [r1, #0]
   1589a:	2100      	movs	r1, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1589c:	4282      	cmp	r2, r0
   1589e:	418b      	sbcs	r3, r1
   158a0:	bfac      	ite	ge
   158a2:	2601      	movge	r6, #1
   158a4:	2600      	movlt	r6, #0
   158a6:	4d34      	ldr	r5, [pc, #208]	; (15978 <ll_rl_rpa_update+0x10c>)
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   158a8:	f1a5 0b07 	sub.w	fp, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
   158ac:	2400      	movs	r4, #0
   158ae:	465f      	mov	r7, fp
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   158b0:	2328      	movs	r3, #40	; 0x28
   158b2:	4363      	muls	r3, r4
   158b4:	f81b 3003 	ldrb.w	r3, [fp, r3]
   158b8:	07d8      	lsls	r0, r3, #31
   158ba:	d54d      	bpl.n	15958 <ll_rl_rpa_update+0xec>
   158bc:	b90e      	cbnz	r6, 158c2 <ll_rl_rpa_update+0x56>
   158be:	0799      	lsls	r1, r3, #30
   158c0:	d44a      	bmi.n	15958 <ll_rl_rpa_update+0xec>

			if (rl[i].pirk) {
   158c2:	2328      	movs	r3, #40	; 0x28
   158c4:	4363      	muls	r3, r4
   158c6:	5cfb      	ldrb	r3, [r7, r3]
   158c8:	075a      	lsls	r2, r3, #29
   158ca:	d524      	bpl.n	15916 <ll_rl_rpa_update+0xaa>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   158cc:	7c2a      	ldrb	r2, [r5, #16]
   158ce:	4b2b      	ldr	r3, [pc, #172]	; (1597c <ll_rl_rpa_update+0x110>)
   158d0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   158d4:	f103 0210 	add.w	r2, r3, #16
   158d8:	f10d 010f 	add.w	r1, sp, #15
		*((u8_t *)dst++) = *((u8_t *)src--);
   158dc:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   158e0:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
   158e4:	429a      	cmp	r2, r3
   158e6:	d1f9      	bne.n	158dc <ll_rl_rpa_update+0x70>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   158e8:	f105 0117 	add.w	r1, r5, #23
   158ec:	a804      	add	r0, sp, #16
   158ee:	f7ec ffb1 	bl	2854 <bt_rpa_create>
				LL_ASSERT(!err);
   158f2:	b180      	cbz	r0, 15916 <ll_rl_rpa_update+0xaa>

			if (rl[i].lirk) {
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
				LL_ASSERT(!err);
   158f4:	4b22      	ldr	r3, [pc, #136]	; (15980 <ll_rl_rpa_update+0x114>)
   158f6:	9301      	str	r3, [sp, #4]
   158f8:	9300      	str	r3, [sp, #0]
   158fa:	4a22      	ldr	r2, [pc, #136]	; (15984 <ll_rl_rpa_update+0x118>)
   158fc:	4b22      	ldr	r3, [pc, #136]	; (15988 <ll_rl_rpa_update+0x11c>)
   158fe:	4923      	ldr	r1, [pc, #140]	; (1598c <ll_rl_rpa_update+0x120>)
   15900:	4823      	ldr	r0, [pc, #140]	; (15990 <ll_rl_rpa_update+0x124>)
   15902:	f7eb feed 	bl	16e0 <printk>
   15906:	4040      	eors	r0, r0
   15908:	f380 8811 	msr	BASEPRI, r0
   1590c:	f04f 0004 	mov.w	r0, #4
   15910:	df02      	svc	2
	bool all = timeout || (rpa_last_ms == -1) ||
   15912:	2601      	movs	r6, #1
   15914:	e7c7      	b.n	158a6 <ll_rl_rpa_update+0x3a>
			if (rl[i].lirk) {
   15916:	2328      	movs	r3, #40	; 0x28
   15918:	4363      	muls	r3, r4
   1591a:	5cfb      	ldrb	r3, [r7, r3]
   1591c:	071b      	lsls	r3, r3, #28
   1591e:	d515      	bpl.n	1594c <ll_rl_rpa_update+0xe0>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   15920:	f10d 0a10 	add.w	sl, sp, #16
   15924:	4651      	mov	r1, sl
   15926:	4628      	mov	r0, r5
   15928:	f7ec ff94 	bl	2854 <bt_rpa_create>
				LL_ASSERT(!err);
   1592c:	2800      	cmp	r0, #0
   1592e:	d1e1      	bne.n	158f4 <ll_rl_rpa_update+0x88>
   15930:	4b18      	ldr	r3, [pc, #96]	; (15994 <ll_rl_rpa_update+0x128>)
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
   15932:	f8c5 a01d 	str.w	sl, [r5, #29]
   15936:	2206      	movs	r2, #6
   15938:	fb02 3304 	mla	r3, r2, r4, r3
   1593c:	4618      	mov	r0, r3
   1593e:	4651      	mov	r1, sl
   15940:	9303      	str	r3, [sp, #12]
   15942:	f7ea fe61 	bl	608 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
   15946:	9b03      	ldr	r3, [sp, #12]
   15948:	f8c5 301d 	str.w	r3, [r5, #29]
			}

			rl[i].rpas_ready = 1;
   1594c:	2328      	movs	r3, #40	; 0x28
   1594e:	4363      	muls	r3, r4
   15950:	5cfa      	ldrb	r2, [r7, r3]
   15952:	f042 0202 	orr.w	r2, r2, #2
   15956:	54fa      	strb	r2, [r7, r3]
   15958:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1595a:	2c08      	cmp	r4, #8
   1595c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   15960:	d1a6      	bne.n	158b0 <ll_rl_rpa_update+0x44>
		}
	}

	if (all) {
   15962:	b116      	cbz	r6, 1596a <ll_rl_rpa_update+0xfe>
		rpa_last_ms = now;
   15964:	4b02      	ldr	r3, [pc, #8]	; (15970 <ll_rl_rpa_update+0x104>)
   15966:	e9c3 8900 	strd	r8, r9, [r3]
		if (ll_adv_is_enabled()) {
			rpa_adv_refresh();
		}
#endif
	}
}
   1596a:	b009      	add	sp, #36	; 0x24
   1596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15970:	20005428 	.word	0x20005428
   15974:	2000545c 	.word	0x2000545c
   15978:	20003a3b 	.word	0x20003a3b
   1597c:	200039b3 	.word	0x200039b3
   15980:	0001868d 	.word	0x0001868d
   15984:	00019a84 	.word	0x00019a84
   15988:	0001c222 	.word	0x0001c222
   1598c:	00019a8b 	.word	0x00019a8b
   15990:	0001c170 	.word	0x0001c170
   15994:	2000397a 	.word	0x2000397a

00015998 <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
   15998:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1599a:	2001      	movs	r0, #1
   1599c:	f7ff ff66 	bl	1586c <ll_rl_rpa_update>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   159a0:	4b03      	ldr	r3, [pc, #12]	; (159b0 <rpa_timeout+0x18>)
   159a2:	4904      	ldr	r1, [pc, #16]	; (159b4 <rpa_timeout+0x1c>)
   159a4:	681a      	ldr	r2, [r3, #0]
   159a6:	4804      	ldr	r0, [pc, #16]	; (159b8 <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
   159a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   159ac:	f002 ba02 	b.w	17db4 <k_delayed_work_submit_to_queue>
   159b0:	2000545c 	.word	0x2000545c
   159b4:	20005434 	.word	0x20005434
   159b8:	20005470 	.word	0x20005470

000159bc <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   159bc:	4b07      	ldr	r3, [pc, #28]	; (159dc <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
   159be:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
   159c0:	b130      	cbz	r0, 159d0 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
   159c2:	b14b      	cbz	r3, 159d8 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
   159c4:	4b06      	ldr	r3, [pc, #24]	; (159e0 <ll_adv_scan_state_cb+0x24>)
   159c6:	4907      	ldr	r1, [pc, #28]	; (159e4 <ll_adv_scan_state_cb+0x28>)
   159c8:	681a      	ldr	r2, [r3, #0]
   159ca:	4807      	ldr	r0, [pc, #28]	; (159e8 <ll_adv_scan_state_cb+0x2c>)
   159cc:	f002 b9f2 	b.w	17db4 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
   159d0:	b113      	cbz	r3, 159d8 <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
   159d2:	4804      	ldr	r0, [pc, #16]	; (159e4 <ll_adv_scan_state_cb+0x28>)
   159d4:	f002 b994 	b.w	17d00 <k_delayed_work_cancel>
   159d8:	4770      	bx	lr
   159da:	bf00      	nop
   159dc:	20003b74 	.word	0x20003b74
   159e0:	2000545c 	.word	0x2000545c
   159e4:	20005434 	.word	0x20005434
   159e8:	20005470 	.word	0x20005470

000159ec <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   159ec:	2008      	movs	r0, #8
   159ee:	4770      	bx	lr

000159f0 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   159f0:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
   159f2:	f7ff fc2d 	bl	15250 <rl_access_check.constprop.1>
   159f6:	b178      	cbz	r0, 15a18 <ll_rl_clear+0x28>
		rl[i].taken = 0;
   159f8:	4908      	ldr	r1, [pc, #32]	; (15a1c <ll_rl_clear+0x2c>)
   159fa:	2300      	movs	r3, #0
   159fc:	2428      	movs	r4, #40	; 0x28
   159fe:	fb04 f203 	mul.w	r2, r4, r3
   15a02:	3301      	adds	r3, #1
   15a04:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15a06:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   15a08:	f36f 0000 	bfc	r0, #0, #1
   15a0c:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15a0e:	d1f6      	bne.n	159fe <ll_rl_clear+0xe>
	peer_irk_count = 0;
   15a10:	4b03      	ldr	r3, [pc, #12]	; (15a20 <ll_rl_clear+0x30>)
   15a12:	2000      	movs	r0, #0
   15a14:	7018      	strb	r0, [r3, #0]
   15a16:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15a18:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   15a1a:	bd10      	pop	{r4, pc}
   15a1c:	20003a34 	.word	0x20003a34
   15a20:	200039aa 	.word	0x200039aa

00015a24 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   15a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a28:	b085      	sub	sp, #20
   15a2a:	4607      	mov	r7, r0
   15a2c:	4689      	mov	r9, r1
   15a2e:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   15a30:	f7ff fc0e 	bl	15250 <rl_access_check.constprop.1>
   15a34:	2800      	cmp	r0, #0
   15a36:	f000 8086 	beq.w	15b46 <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   15a3a:	f107 0801 	add.w	r8, r7, #1
   15a3e:	f10d 020f 	add.w	r2, sp, #15
   15a42:	4641      	mov	r1, r8
   15a44:	7838      	ldrb	r0, [r7, #0]
   15a46:	f7ff fdaf 	bl	155a8 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
   15a4a:	2807      	cmp	r0, #7
   15a4c:	d97d      	bls.n	15b4a <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
   15a4e:	f89d 500f 	ldrb.w	r5, [sp, #15]
   15a52:	2d07      	cmp	r5, #7
   15a54:	d87b      	bhi.n	15b4e <ll_rl_add+0x12a>
   15a56:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   15a5a:	4c3e      	ldr	r4, [pc, #248]	; (15b54 <ll_rl_add+0x130>)
   15a5c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
   15a60:	2628      	movs	r6, #40	; 0x28
   15a62:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   15a64:	f10b 0001 	add.w	r0, fp, #1
   15a68:	2206      	movs	r2, #6
   15a6a:	4641      	mov	r1, r8
   15a6c:	4420      	add	r0, r4
   15a6e:	f7ea fdcb 	bl	608 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   15a72:	7839      	ldrb	r1, [r7, #0]
   15a74:	5da3      	ldrb	r3, [r4, r6]
   15a76:	19a2      	adds	r2, r4, r6
   15a78:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   15a7c:	4648      	mov	r0, r9
   15a7e:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   15a80:	9201      	str	r2, [sp, #4]
   15a82:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   15a84:	f7f4 fcf9 	bl	a47a <mem_nz>
   15a88:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   15a8a:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   15a8c:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   15a90:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   15a92:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   15a94:	f7f4 fcf1 	bl	a47a <mem_nz>
   15a98:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
   15a9a:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   15a9c:	f000 0001 	and.w	r0, r0, #1
   15aa0:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   15aa4:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   15aa8:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
   15aaa:	d138      	bne.n	15b1e <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
   15aac:	b158      	cbz	r0, 15ac6 <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
   15aae:	f10b 0007 	add.w	r0, fp, #7
   15ab2:	2210      	movs	r2, #16
   15ab4:	4651      	mov	r1, sl
   15ab6:	4420      	add	r0, r4
   15ab8:	f7ea fda6 	bl	608 <memcpy>
		rl[i].local_rpa = NULL;
   15abc:	2328      	movs	r3, #40	; 0x28
   15abe:	fb03 4305 	mla	r3, r3, r5, r4
   15ac2:	2200      	movs	r2, #0
   15ac4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
   15ac6:	2628      	movs	r6, #40	; 0x28
   15ac8:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   15aca:	f10b 0018 	add.w	r0, fp, #24
   15ace:	2206      	movs	r2, #6
   15ad0:	2100      	movs	r1, #0
   15ad2:	4420      	add	r0, r4
   15ad4:	f7ea fdc4 	bl	660 <memset>
	rl[i].rpas_ready = 0;
   15ad8:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
   15ada:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   15ade:	f36f 1304 	bfc	r3, #4, #1
   15ae2:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   15ae4:	2200      	movs	r2, #0
   15ae6:	4641      	mov	r1, r8
   15ae8:	7838      	ldrb	r0, [r7, #0]
   15aea:	f7ff fb53 	bl	15194 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   15aee:	2807      	cmp	r0, #7
   15af0:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
   15af2:	bf9d      	ittte	ls
   15af4:	4a18      	ldrls	r2, [pc, #96]	; (15b58 <ll_rl_add+0x134>)
		rl[i].wl = 1;
   15af6:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
   15afa:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
   15afe:	f36f 1345 	bfchi	r3, #5, #1
   15b02:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
   15b04:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
   15b08:	bf98      	it	ls
   15b0a:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
   15b0c:	435d      	muls	r5, r3

	return 0;
   15b0e:	2000      	movs	r0, #0
	rl[i].taken = 1;
   15b10:	5d63      	ldrb	r3, [r4, r5]
   15b12:	f043 0301 	orr.w	r3, r3, #1
   15b16:	5563      	strb	r3, [r4, r5]
}
   15b18:	b005      	add	sp, #20
   15b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   15b1e:	4b0f      	ldr	r3, [pc, #60]	; (15b5c <ll_rl_add+0x138>)
   15b20:	7819      	ldrb	r1, [r3, #0]
   15b22:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   15b24:	4a0e      	ldr	r2, [pc, #56]	; (15b60 <ll_rl_add+0x13c>)
   15b26:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   15b28:	1c4a      	adds	r2, r1, #1
   15b2a:	701a      	strb	r2, [r3, #0]
   15b2c:	4b0d      	ldr	r3, [pc, #52]	; (15b64 <ll_rl_add+0x140>)
   15b2e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   15b32:	f109 0210 	add.w	r2, r9, #16
   15b36:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   15b38:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   15b3c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   15b40:	454a      	cmp	r2, r9
   15b42:	d1f9      	bne.n	15b38 <ll_rl_add+0x114>
   15b44:	e7b2      	b.n	15aac <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15b46:	200c      	movs	r0, #12
   15b48:	e7e6      	b.n	15b18 <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
   15b4a:	2012      	movs	r0, #18
   15b4c:	e7e4      	b.n	15b18 <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   15b4e:	2007      	movs	r0, #7
   15b50:	e7e2      	b.n	15b18 <ll_rl_add+0xf4>
   15b52:	bf00      	nop
   15b54:	20003a34 	.word	0x20003a34
   15b58:	20003ba7 	.word	0x20003ba7
   15b5c:	200039aa 	.word	0x200039aa
   15b60:	200039ab 	.word	0x200039ab
   15b64:	200039b3 	.word	0x200039b3

00015b68 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   15b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b6c:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
   15b6e:	f7ff fb6f 	bl	15250 <rl_access_check.constprop.1>
   15b72:	2800      	cmp	r0, #0
   15b74:	d053      	beq.n	15c1e <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   15b76:	f109 0a01 	add.w	sl, r9, #1
   15b7a:	2200      	movs	r2, #0
   15b7c:	4651      	mov	r1, sl
   15b7e:	f899 0000 	ldrb.w	r0, [r9]
   15b82:	f7ff fd11 	bl	155a8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15b86:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   15b88:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   15b8a:	d84b      	bhi.n	15c24 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
   15b8c:	f04f 0b28 	mov.w	fp, #40	; 0x28
   15b90:	4c26      	ldr	r4, [pc, #152]	; (15c2c <ll_rl_remove+0xc4>)
   15b92:	fb0b f300 	mul.w	r3, fp, r0
   15b96:	18e2      	adds	r2, r4, r3
   15b98:	5ce3      	ldrb	r3, [r4, r3]
   15b9a:	075b      	lsls	r3, r3, #29
   15b9c:	d524      	bpl.n	15be8 <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15b9e:	4e24      	ldr	r6, [pc, #144]	; (15c30 <ll_rl_remove+0xc8>)
   15ba0:	7835      	ldrb	r5, [r6, #0]
   15ba2:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
   15ba4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   15ba8:	d01b      	beq.n	15be2 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15baa:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
   15bac:	42af      	cmp	r7, r5
   15bae:	d018      	beq.n	15be2 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   15bb0:	4820      	ldr	r0, [pc, #128]	; (15c34 <ll_rl_remove+0xcc>)
   15bb2:	2210      	movs	r2, #16
   15bb4:	eb00 1105 	add.w	r1, r0, r5, lsl #4
   15bb8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   15bbc:	f7ea fd24 	bl	608 <memcpy>
   15bc0:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
   15bc2:	fb0b f103 	mul.w	r1, fp, r3
   15bc6:	1862      	adds	r2, r4, r1
   15bc8:	5c61      	ldrb	r1, [r4, r1]
   15bca:	f011 0f01 	tst.w	r1, #1
   15bce:	b2d8      	uxtb	r0, r3
   15bd0:	d021      	beq.n	15c16 <ll_rl_remove+0xae>
   15bd2:	0749      	lsls	r1, r1, #29
   15bd4:	d51f      	bpl.n	15c16 <ll_rl_remove+0xae>
   15bd6:	7dd1      	ldrb	r1, [r2, #23]
   15bd8:	42a9      	cmp	r1, r5
   15bda:	d11c      	bne.n	15c16 <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
   15bdc:	4b16      	ldr	r3, [pc, #88]	; (15c38 <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
   15bde:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   15be0:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
   15be2:	7833      	ldrb	r3, [r6, #0]
   15be4:	3b01      	subs	r3, #1
   15be6:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   15be8:	2200      	movs	r2, #0
   15bea:	4651      	mov	r1, sl
   15bec:	f899 0000 	ldrb.w	r0, [r9]
   15bf0:	f7ff fad0 	bl	15194 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   15bf4:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
   15bf6:	bf9f      	itttt	ls
   15bf8:	4b10      	ldrls	r3, [pc, #64]	; (15c3c <ll_rl_remove+0xd4>)
   15bfa:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
   15bfe:	23ff      	movls	r3, #255	; 0xff
   15c00:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
   15c02:	2028      	movs	r0, #40	; 0x28
   15c04:	fb00 f008 	mul.w	r0, r0, r8
   15c08:	5c23      	ldrb	r3, [r4, r0]
   15c0a:	f36f 0300 	bfc	r3, #0, #1
   15c0e:	5423      	strb	r3, [r4, r0]
		return 0;
   15c10:	2000      	movs	r0, #0
   15c12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c16:	3301      	adds	r3, #1
				for (k = 0;
   15c18:	2b08      	cmp	r3, #8
   15c1a:	d1d2      	bne.n	15bc2 <ll_rl_remove+0x5a>
   15c1c:	e7e1      	b.n	15be2 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15c1e:	200c      	movs	r0, #12
   15c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15c24:	2002      	movs	r0, #2
}
   15c26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c2a:	bf00      	nop
   15c2c:	20003a34 	.word	0x20003a34
   15c30:	200039aa 	.word	0x200039aa
   15c34:	200039b3 	.word	0x200039b3
   15c38:	200039ab 	.word	0x200039ab
   15c3c:	20003ba7 	.word	0x20003ba7

00015c40 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   15c40:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   15c42:	795c      	ldrb	r4, [r3, #5]
   15c44:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   15c48:	2c40      	cmp	r4, #64	; 0x40
{
   15c4a:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   15c4c:	d117      	bne.n	15c7e <ll_rl_crpa_set+0x3e>

		if (id_addr) {
   15c4e:	b119      	cbz	r1, 15c58 <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   15c50:	2200      	movs	r2, #0
   15c52:	f7ff fca9 	bl	155a8 <ll_rl_find>
   15c56:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   15c58:	2a07      	cmp	r2, #7
   15c5a:	d810      	bhi.n	15c7e <ll_rl_crpa_set+0x3e>
   15c5c:	2128      	movs	r1, #40	; 0x28
   15c5e:	4c08      	ldr	r4, [pc, #32]	; (15c80 <ll_rl_crpa_set+0x40>)
   15c60:	fb01 f302 	mul.w	r3, r1, r2
   15c64:	5ce3      	ldrb	r3, [r4, r3]
   15c66:	07db      	lsls	r3, r3, #31
   15c68:	d509      	bpl.n	15c7e <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   15c6a:	2018      	movs	r0, #24
   15c6c:	fb11 0002 	smlabb	r0, r1, r2, r0
   15c70:	4420      	add	r0, r4
   15c72:	4629      	mov	r1, r5
   15c74:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
   15c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   15c7a:	f7ea bcc5 	b.w	608 <memcpy>
   15c7e:	bd70      	pop	{r4, r5, r6, pc}
   15c80:	20003a34 	.word	0x20003a34

00015c84 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   15c84:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   15c86:	2200      	movs	r2, #0
{
   15c88:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   15c8a:	1c41      	adds	r1, r0, #1
   15c8c:	7800      	ldrb	r0, [r0, #0]
   15c8e:	f7ff fc8b 	bl	155a8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   15c92:	2807      	cmp	r0, #7
   15c94:	d901      	bls.n	15c9a <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15c96:	2002      	movs	r0, #2
   15c98:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   15c9a:	2428      	movs	r4, #40	; 0x28
   15c9c:	2318      	movs	r3, #24
   15c9e:	fb14 3000 	smlabb	r0, r4, r0, r3
   15ca2:	4c07      	ldr	r4, [pc, #28]	; (15cc0 <ll_rl_crpa_get+0x3c>)
   15ca4:	4404      	add	r4, r0
   15ca6:	2106      	movs	r1, #6
   15ca8:	4620      	mov	r0, r4
   15caa:	f7f4 fbe6 	bl	a47a <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   15cae:	2800      	cmp	r0, #0
   15cb0:	d0f1      	beq.n	15c96 <ll_rl_crpa_get+0x12>
   15cb2:	2206      	movs	r2, #6
   15cb4:	4621      	mov	r1, r4
   15cb6:	4628      	mov	r0, r5
   15cb8:	f7ea fca6 	bl	608 <memcpy>
			return 0;
   15cbc:	2000      	movs	r0, #0
}
   15cbe:	bd38      	pop	{r3, r4, r5, pc}
   15cc0:	20003a34 	.word	0x20003a34

00015cc4 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   15cc4:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   15cc6:	2200      	movs	r2, #0
{
   15cc8:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   15cca:	1c41      	adds	r1, r0, #1
   15ccc:	7800      	ldrb	r0, [r0, #0]
   15cce:	f7ff fc6b 	bl	155a8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15cd2:	2807      	cmp	r0, #7
   15cd4:	d80a      	bhi.n	15cec <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
   15cd6:	4b06      	ldr	r3, [pc, #24]	; (15cf0 <ll_rl_lrpa_get+0x2c>)
   15cd8:	2228      	movs	r2, #40	; 0x28
   15cda:	fb02 3000 	mla	r0, r2, r0, r3
   15cde:	2206      	movs	r2, #6
   15ce0:	6a41      	ldr	r1, [r0, #36]	; 0x24
   15ce2:	4620      	mov	r0, r4
   15ce4:	f7ea fc90 	bl	608 <memcpy>
		return 0;
   15ce8:	2000      	movs	r0, #0
   15cea:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15cec:	2002      	movs	r0, #2
}
   15cee:	bd10      	pop	{r4, pc}
   15cf0:	20003a34 	.word	0x20003a34

00015cf4 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   15cf4:	b510      	push	{r4, lr}
   15cf6:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   15cf8:	f7ff faaa 	bl	15250 <rl_access_check.constprop.1>
   15cfc:	b140      	cbz	r0, 15d10 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
   15cfe:	b11c      	cbz	r4, 15d08 <ll_rl_enable+0x14>
   15d00:	2c01      	cmp	r4, #1
   15d02:	d001      	beq.n	15d08 <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   15d04:	2012      	movs	r0, #18
	}

	return 0;
}
   15d06:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   15d08:	4b02      	ldr	r3, [pc, #8]	; (15d14 <ll_rl_enable+0x20>)
   15d0a:	701c      	strb	r4, [r3, #0]
	return 0;
   15d0c:	2000      	movs	r0, #0
		break;
   15d0e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15d10:	200c      	movs	r0, #12
   15d12:	bd10      	pop	{r4, pc}
   15d14:	20003b74 	.word	0x20003b74

00015d18 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   15d18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15d1c:	4358      	muls	r0, r3
   15d1e:	4b01      	ldr	r3, [pc, #4]	; (15d24 <ll_rl_timeout_set+0xc>)
   15d20:	6018      	str	r0, [r3, #0]
   15d22:	4770      	bx	lr
   15d24:	2000545c 	.word	0x2000545c

00015d28 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   15d28:	b538      	push	{r3, r4, r5, lr}
   15d2a:	4605      	mov	r5, r0
   15d2c:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
   15d2e:	f7ff fa8f 	bl	15250 <rl_access_check.constprop.1>
   15d32:	b1d8      	cbz	r0, 15d6c <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   15d34:	2200      	movs	r2, #0
   15d36:	1c69      	adds	r1, r5, #1
   15d38:	7828      	ldrb	r0, [r5, #0]
   15d3a:	f7ff fc35 	bl	155a8 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15d3e:	2807      	cmp	r0, #7
   15d40:	d816      	bhi.n	15d70 <ll_priv_mode_set+0x48>
		switch (mode) {
   15d42:	b11c      	cbz	r4, 15d4c <ll_priv_mode_set+0x24>
   15d44:	2c01      	cmp	r4, #1
   15d46:	d00a      	beq.n	15d5e <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
   15d48:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
   15d4a:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   15d4c:	2328      	movs	r3, #40	; 0x28
   15d4e:	4a09      	ldr	r2, [pc, #36]	; (15d74 <ll_priv_mode_set+0x4c>)
   15d50:	4358      	muls	r0, r3
   15d52:	5c13      	ldrb	r3, [r2, r0]
   15d54:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
   15d58:	5413      	strb	r3, [r2, r0]
	return 0;
   15d5a:	2000      	movs	r0, #0
			break;
   15d5c:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   15d5e:	2328      	movs	r3, #40	; 0x28
   15d60:	4a04      	ldr	r2, [pc, #16]	; (15d74 <ll_priv_mode_set+0x4c>)
   15d62:	4358      	muls	r0, r3
   15d64:	5c13      	ldrb	r3, [r2, r0]
   15d66:	f043 0310 	orr.w	r3, r3, #16
   15d6a:	e7f5      	b.n	15d58 <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15d6c:	200c      	movs	r0, #12
   15d6e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15d70:	2002      	movs	r0, #2
   15d72:	bd38      	pop	{r3, r4, r5, pc}
   15d74:	20003a34 	.word	0x20003a34

00015d78 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
   15d78:	4a19      	ldr	r2, [pc, #100]	; (15de0 <ll_filter_reset+0x68>)
   15d7a:	2300      	movs	r3, #0
{
   15d7c:	b430      	push	{r4, r5}
	wl_anon = 0;
   15d7e:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
   15d80:	4a18      	ldr	r2, [pc, #96]	; (15de4 <ll_filter_reset+0x6c>)
   15d82:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   15d86:	f36f 0100 	bfc	r1, #0, #1
   15d8a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   15d8e:	3301      	adds	r3, #1
   15d90:	2b08      	cmp	r3, #8
   15d92:	d1f6      	bne.n	15d82 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
   15d94:	4a14      	ldr	r2, [pc, #80]	; (15de8 <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15d96:	4915      	ldr	r1, [pc, #84]	; (15dec <ll_filter_reset+0x74>)
	rl_enable = 0;
   15d98:	2300      	movs	r3, #0
   15d9a:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15d9c:	4a14      	ldr	r2, [pc, #80]	; (15df0 <ll_filter_reset+0x78>)
   15d9e:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
   15da0:	4a14      	ldr	r2, [pc, #80]	; (15df4 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
   15da2:	4915      	ldr	r1, [pc, #84]	; (15df8 <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
   15da4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   15da8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15dac:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
   15db0:	2528      	movs	r5, #40	; 0x28
   15db2:	fb05 f203 	mul.w	r2, r5, r3
   15db6:	3301      	adds	r3, #1
   15db8:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15dba:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
   15dbc:	f36f 0400 	bfc	r4, #0, #1
   15dc0:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15dc2:	d1f6      	bne.n	15db2 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
   15dc4:	4b0d      	ldr	r3, [pc, #52]	; (15dfc <ll_filter_reset+0x84>)
   15dc6:	2200      	movs	r2, #0
   15dc8:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
   15dca:	b120      	cbz	r0, 15dd6 <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
   15dcc:	490c      	ldr	r1, [pc, #48]	; (15e00 <ll_filter_reset+0x88>)
   15dce:	480d      	ldr	r0, [pc, #52]	; (15e04 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
   15dd0:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   15dd2:	f001 bf77 	b.w	17cc4 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
   15dd6:	480b      	ldr	r0, [pc, #44]	; (15e04 <ll_filter_reset+0x8c>)
}
   15dd8:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
   15dda:	f001 bf91 	b.w	17d00 <k_delayed_work_cancel>
   15dde:	bf00      	nop
   15de0:	20005430 	.word	0x20005430
   15de4:	20003ba7 	.word	0x20003ba7
   15de8:	20003b74 	.word	0x20003b74
   15dec:	000dbba0 	.word	0x000dbba0
   15df0:	2000545c 	.word	0x2000545c
   15df4:	20005428 	.word	0x20005428
   15df8:	20003a34 	.word	0x20003a34
   15dfc:	200039aa 	.word	0x200039aa
   15e00:	00015999 	.word	0x00015999
   15e04:	20005434 	.word	0x20005434

00015e08 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   15e08:	4b05      	ldr	r3, [pc, #20]	; (15e20 <cntr_init+0x18>)
   15e0a:	2200      	movs	r2, #0
   15e0c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
   15e10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   15e14:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
   15e18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   15e1c:	4770      	bx	lr
   15e1e:	bf00      	nop
   15e20:	4000b000 	.word	0x4000b000

00015e24 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
   15e24:	4a04      	ldr	r2, [pc, #16]	; (15e38 <cntr_start+0x14>)
   15e26:	7813      	ldrb	r3, [r2, #0]
   15e28:	1c59      	adds	r1, r3, #1
   15e2a:	7011      	strb	r1, [r2, #0]
   15e2c:	2001      	movs	r0, #1
   15e2e:	b913      	cbnz	r3, 15e36 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
   15e30:	4a02      	ldr	r2, [pc, #8]	; (15e3c <cntr_start+0x18>)
   15e32:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
   15e34:	4618      	mov	r0, r3
}
   15e36:	4770      	bx	lr
   15e38:	20003c19 	.word	0x20003c19
   15e3c:	4000b000 	.word	0x4000b000

00015e40 <cntr_stop>:

u32_t cntr_stop(void)
{
   15e40:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(_refcount);
   15e42:	4b0f      	ldr	r3, [pc, #60]	; (15e80 <cntr_stop+0x40>)
   15e44:	7818      	ldrb	r0, [r3, #0]
   15e46:	b970      	cbnz	r0, 15e66 <cntr_stop+0x26>
   15e48:	4b0e      	ldr	r3, [pc, #56]	; (15e84 <cntr_stop+0x44>)
   15e4a:	9301      	str	r3, [sp, #4]
   15e4c:	9300      	str	r3, [sp, #0]
   15e4e:	4a0e      	ldr	r2, [pc, #56]	; (15e88 <cntr_stop+0x48>)
   15e50:	4b0e      	ldr	r3, [pc, #56]	; (15e8c <cntr_stop+0x4c>)
   15e52:	490f      	ldr	r1, [pc, #60]	; (15e90 <cntr_stop+0x50>)
   15e54:	480f      	ldr	r0, [pc, #60]	; (15e94 <cntr_stop+0x54>)
   15e56:	f7eb fc43 	bl	16e0 <printk>
   15e5a:	4040      	eors	r0, r0
   15e5c:	f380 8811 	msr	BASEPRI, r0
   15e60:	f04f 0004 	mov.w	r0, #4
   15e64:	df02      	svc	2

	if (--_refcount) {
   15e66:	3801      	subs	r0, #1
   15e68:	b2c0      	uxtb	r0, r0
   15e6a:	7018      	strb	r0, [r3, #0]
   15e6c:	2301      	movs	r3, #1
   15e6e:	b920      	cbnz	r0, 15e7a <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
   15e70:	4a09      	ldr	r2, [pc, #36]	; (15e98 <cntr_stop+0x58>)
   15e72:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
}
   15e74:	b003      	add	sp, #12
   15e76:	f85d fb04 	ldr.w	pc, [sp], #4
		return 1;
   15e7a:	4618      	mov	r0, r3
   15e7c:	e7fa      	b.n	15e74 <cntr_stop+0x34>
   15e7e:	bf00      	nop
   15e80:	20003c19 	.word	0x20003c19
   15e84:	0001868d 	.word	0x0001868d
   15e88:	00019a84 	.word	0x00019a84
   15e8c:	0001c4f4 	.word	0x0001c4f4
   15e90:	00019a8b 	.word	0x00019a8b
   15e94:	0001c4fe 	.word	0x0001c4fe
   15e98:	4000b000 	.word	0x4000b000

00015e9c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
   15e9c:	4b01      	ldr	r3, [pc, #4]	; (15ea4 <cntr_cnt_get+0x8>)
   15e9e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
   15ea2:	4770      	bx	lr
   15ea4:	4000b000 	.word	0x4000b000

00015ea8 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
   15ea8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   15eac:	4b01      	ldr	r3, [pc, #4]	; (15eb4 <cntr_cmp_set+0xc>)
   15eae:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
   15eb2:	4770      	bx	lr
   15eb4:	4000b000 	.word	0x4000b000

00015eb8 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
   15eb8:	4b11      	ldr	r3, [pc, #68]	; (15f00 <do_ecb+0x48>)
{
   15eba:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
   15ebc:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   15ebe:	2500      	movs	r5, #0
   15ec0:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
   15ec2:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
   15ec4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   15ec8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   15ecc:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
   15ed0:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   15ed2:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   15ed6:	b934      	cbnz	r4, 15ee6 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   15ed8:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   15edc:	b91c      	cbnz	r4, 15ee6 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   15ede:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   15ee2:	2c00      	cmp	r4, #0
   15ee4:	d1f5      	bne.n	15ed2 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
   15ee6:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   15ee8:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
   15eec:	2c00      	cmp	r4, #0
   15eee:	d1e8      	bne.n	15ec2 <do_ecb+0xa>
   15ef0:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
   15ef4:	2e00      	cmp	r6, #0
   15ef6:	d0e4      	beq.n	15ec2 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
   15ef8:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   15efc:	bd70      	pop	{r4, r5, r6, pc}
   15efe:	bf00      	nop
   15f00:	4000e000 	.word	0x4000e000

00015f04 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
   15f04:	b570      	push	{r4, r5, r6, lr}
   15f06:	b08c      	sub	sp, #48	; 0x30
   15f08:	460e      	mov	r6, r1
   15f0a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   15f0c:	4601      	mov	r1, r0
   15f0e:	2210      	movs	r2, #16
   15f10:	4668      	mov	r0, sp
{
   15f12:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   15f14:	f7f4 faa2 	bl	a45c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   15f18:	2210      	movs	r2, #16
   15f1a:	eb0d 0002 	add.w	r0, sp, r2
   15f1e:	4631      	mov	r1, r6
   15f20:	f7f4 fa9c 	bl	a45c <mem_rcopy>

	do_ecb(&ecb);
   15f24:	4668      	mov	r0, sp
   15f26:	f7ff ffc7 	bl	15eb8 <do_ecb>

	if (cipher_text_le) {
   15f2a:	b125      	cbz	r5, 15f36 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   15f2c:	2210      	movs	r2, #16
   15f2e:	a908      	add	r1, sp, #32
   15f30:	4628      	mov	r0, r5
   15f32:	f7f4 fa93 	bl	a45c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   15f36:	b124      	cbz	r4, 15f42 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   15f38:	2210      	movs	r2, #16
   15f3a:	a908      	add	r1, sp, #32
   15f3c:	4620      	mov	r0, r4
   15f3e:	f7ea fb63 	bl	608 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   15f42:	b00c      	add	sp, #48	; 0x30
   15f44:	bd70      	pop	{r4, r5, r6, pc}
	...

00015f48 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
   15f48:	4b07      	ldr	r3, [pc, #28]	; (15f68 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
   15f4a:	4a08      	ldr	r2, [pc, #32]	; (15f6c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
   15f4c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
   15f50:	4907      	ldr	r1, [pc, #28]	; (15f70 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
   15f52:	4a08      	ldr	r2, [pc, #32]	; (15f74 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
   15f54:	2800      	cmp	r0, #0
   15f56:	bf14      	ite	ne
   15f58:	4610      	movne	r0, r2
   15f5a:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   15f5c:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
   15f5e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
   15f62:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   15f66:	4770      	bx	lr
   15f68:	4001f000 	.word	0x4001f000
   15f6c:	40008140 	.word	0x40008140
   15f70:	40001004 	.word	0x40001004
   15f74:	40001000 	.word	0x40001000

00015f78 <sw_switch.isra.6>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   15f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   15f7c:	4d75      	ldr	r5, [pc, #468]	; (16154 <sw_switch.isra.6+0x1dc>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   15f7e:	4c76      	ldr	r4, [pc, #472]	; (16158 <sw_switch.isra.6+0x1e0>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   15f80:	782e      	ldrb	r6, [r5, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
   15f82:	4b76      	ldr	r3, [pc, #472]	; (1615c <sw_switch.isra.6+0x1e4>)
   15f84:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   15f88:	b233      	sxth	r3, r6
   15f8a:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
   15f8e:	4688      	mov	r8, r1
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
   15f90:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   15f94:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
   15f98:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   15f9c:	f106 040b 	add.w	r4, r6, #11
   15fa0:	b2e4      	uxtb	r4, r4
   15fa2:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
   15fa4:	496e      	ldr	r1, [pc, #440]	; (16160 <sw_switch.isra.6+0x1e8>)
   15fa6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   15faa:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   15fae:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
   15fb2:	4461      	add	r1, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
   15fb4:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
   15fb8:	f106 0708 	add.w	r7, r6, #8
   15fbc:	f10e 0e04 	add.w	lr, lr, #4

	if (dir) {
   15fc0:	2800      	cmp	r0, #0
   15fc2:	f000 80aa 	beq.w	1611a <sw_switch.isra.6+0x1a2>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   15fc6:	2a02      	cmp	r2, #2
   15fc8:	f000 8087 	beq.w	160da <sw_switch.isra.6+0x162>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   15fcc:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   15fd0:	f64a 095c 	movw	r9, #43100	; 0xa85c
   15fd4:	2a04      	cmp	r2, #4
   15fd6:	bf18      	it	ne
   15fd8:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
   15fda:	f1b8 0f02 	cmp.w	r8, #2
   15fde:	d07f      	beq.n	160e0 <sw_switch.isra.6+0x168>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
   15fe0:	f242 42b8 	movw	r2, #9400	; 0x24b8
   15fe4:	f247 2074 	movw	r0, #29300	; 0x7274
   15fe8:	f1b8 0f04 	cmp.w	r8, #4
   15fec:	bf18      	it	ne
   15fee:	4610      	movne	r0, r2
   15ff0:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   15ff4:	4a5b      	ldr	r2, [pc, #364]	; (16164 <sw_switch.isra.6+0x1ec>)
   15ff6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_SOC_NRF52840)
		if (phy_curr & BIT(2)) {
   15ffa:	f018 0f04 	tst.w	r8, #4
		delay = HAL_RADIO_NS2US_ROUND(
   15ffe:	4448      	add	r0, r9
   16000:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
   16004:	fbb0 f0fa 	udiv	r0, r0, sl
		if (phy_curr & BIT(2)) {
   16008:	d06d      	beq.n	160e6 <sw_switch.isra.6+0x16e>
   1600a:	f242 44b8 	movw	r4, #9400	; 0x24b8
   1600e:	f644 4190 	movw	r1, #19600	; 0x4c90
   16012:	f1b8 0f04 	cmp.w	r8, #4
   16016:	bf18      	it	ne
   16018:	4621      	movne	r1, r4
   1601a:	009c      	lsls	r4, r3, #2
   1601c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000

			u8_t ppi_en =
			    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI;
			u8_t cc_s2 =
			    SW_SWITCH_TIMER_EVTS_COMP_S2_BASE;
			u8_t ppi_dis =
   16020:	b2fa      	uxtb	r2, r7
   16022:	f504 4710 	add.w	r7, r4, #36864	; 0x9000
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
				    sw_tifs_toggle);
			u32_t delay_s2;

			/* Calculate assuming reception on S2 coding scheme. */
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   16026:	4449      	add	r1, r9
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
   16028:	f8d7 8540 	ldr.w	r8, [r7, #1344]	; 0x540
			SW_SWITCH_TIMER->CC[cc_s2] =
   1602c:	4f4e      	ldr	r7, [pc, #312]	; (16168 <sw_switch.isra.6+0x1f0>)
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1602e:	fbb1 f1fa 	udiv	r1, r1, sl
			SW_SWITCH_TIMER->CC[cc_s2] =
   16032:	f8c7 8548 	str.w	r8, [r7, #1352]	; 0x548

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   16036:	f8d7 8548 	ldr.w	r8, [r7, #1352]	; 0x548
   1603a:	4541      	cmp	r1, r8
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1603c:	bf36      	itet	cc
   1603e:	f8d7 8548 	ldrcc.w	r8, [r7, #1352]	; 0x548
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   16042:	2101      	movcs	r1, #1
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   16044:	eba8 0101 	subcc.w	r1, r8, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   16048:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
			}

			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1604c:	4f42      	ldr	r7, [pc, #264]	; (16158 <sw_switch.isra.6+0x1e0>)
   1604e:	f8df 8124 	ldr.w	r8, [pc, #292]	; 16174 <sw_switch.isra.6+0x1fc>
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   16052:	4944      	ldr	r1, [pc, #272]	; (16164 <sw_switch.isra.6+0x1ec>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   16054:	f8c7 8590 	str.w	r8, [r7, #1424]	; 0x590
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   16058:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
   1605c:	f504 31f8 	add.w	r1, r4, #126976	; 0x1f000
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;

			/* Include PPI for S2 timing in the active group */
			NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(
				sw_tifs_toggle)] |=
   16060:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
   16064:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
   16068:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
   1606c:	00d1      	lsls	r1, r2, #3
   1606e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   16072:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis)	=
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_s2);

			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
			    ppi_dis) =
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   16076:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
   1607a:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis)	=
   1607e:	f8c1 8510 	str.w	r8, [r1, #1296]	; 0x510
			    ppi_dis) =
   16082:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
			    sw_tifs_toggle);

			/* Capture CC to cancel the timer that has assumed
			 * S8 reception, if packet will be received in S2.
			 */
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   16086:	4a39      	ldr	r2, [pc, #228]	; (1616c <sw_switch.isra.6+0x1f4>)
   16088:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1608c:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
   16090:	3270      	adds	r2, #112	; 0x70
   16092:	4462      	add	r2, ip
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   16094:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
				    sw_tifs_toggle);

			NRF_PPI->CHENSET =
   16098:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1609c:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
   160a0:	009b      	lsls	r3, r3, #2
   160a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   160a6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
   160aa:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   160ae:	4282      	cmp	r2, r0
		SW_SWITCH_TIMER->CC[cc] -= delay;
   160b0:	bf8b      	itete	hi
   160b2:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
   160b6:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
   160b8:	1a10      	subhi	r0, r2, r0
		SW_SWITCH_TIMER->CC[cc] = 1;
   160ba:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
   160be:	bf88      	it	hi
   160c0:	f8c3 0540 	strhi.w	r0, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
   160c4:	4b24      	ldr	r3, [pc, #144]	; (16158 <sw_switch.isra.6+0x1e0>)
   160c6:	f44f 6290 	mov.w	r2, #1152	; 0x480
   160ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
   160ce:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1;
   160d0:	f003 0301 	and.w	r3, r3, #1
   160d4:	702b      	strb	r3, [r5, #0]
   160d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
   160da:	f649 4940 	movw	r9, #40000	; 0x9c40
   160de:	e77c      	b.n	15fda <sw_switch.isra.6+0x62>
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   160e0:	f241 3088 	movw	r0, #5000	; 0x1388
   160e4:	e784      	b.n	15ff0 <sw_switch.isra.6+0x78>
   160e6:	009a      	lsls	r2, r3, #2
   160e8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   160ec:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   160f0:	f8d2 4800 	ldr.w	r4, [r2, #2048]	; 0x800
   160f4:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
   160f8:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
   160fc:	b2fa      	uxtb	r2, r7
   160fe:	00d2      	lsls	r2, r2, #3
   16100:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16104:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis) =
   16108:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1610c:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   16110:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis) =
   16114:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   16118:	e7c2      	b.n	160a0 <sw_switch.isra.6+0x128>
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
   1611a:	4a15      	ldr	r2, [pc, #84]	; (16170 <sw_switch.isra.6+0x1f8>)
   1611c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   16120:	b2fa      	uxtb	r2, r7
   16122:	00d2      	lsls	r2, r2, #3
   16124:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16128:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		delay = HAL_RADIO_NS2US_CEIL(
   1612c:	202c      	movs	r0, #44	; 0x2c
				ppi_dis) =
   1612e:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   16132:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
   16136:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
				ppi_dis) =
   1613a:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
   1613e:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
   16142:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
   16146:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
   1614a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
   1614e:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
   16152:	e7a5      	b.n	160a0 <sw_switch.isra.6+0x128>
   16154:	20003e3c 	.word	0x20003e3c
   16158:	4001f000 	.word	0x4001f000
   1615c:	4000110c 	.word	0x4000110c
   16160:	40009140 	.word	0x40009140
   16164:	40001000 	.word	0x40001000
   16168:	40009000 	.word	0x40009000
   1616c:	40001150 	.word	0x40001150
   16170:	40001004 	.word	0x40001004
   16174:	40009148 	.word	0x40009148

00016178 <isr_radio>:
	if (sfp_radio_isr) {
   16178:	4b02      	ldr	r3, [pc, #8]	; (16184 <isr_radio+0xc>)
   1617a:	681b      	ldr	r3, [r3, #0]
   1617c:	b103      	cbz	r3, 16180 <isr_radio+0x8>
		sfp_radio_isr();
   1617e:	4718      	bx	r3
   16180:	4770      	bx	lr
   16182:	bf00      	nop
   16184:	20003e38 	.word	0x20003e38

00016188 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
   16188:	4b06      	ldr	r3, [pc, #24]	; (161a4 <radio_isr_set+0x1c>)
   1618a:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
   1618c:	4b06      	ldr	r3, [pc, #24]	; (161a8 <radio_isr_set+0x20>)
   1618e:	2210      	movs	r2, #16
   16190:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   16194:	4b05      	ldr	r3, [pc, #20]	; (161ac <radio_isr_set+0x24>)
   16196:	2202      	movs	r2, #2
   16198:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1619c:	2001      	movs	r0, #1
   1619e:	f7ea bf45 	b.w	102c <_arch_irq_enable>
   161a2:	bf00      	nop
   161a4:	20003e38 	.word	0x20003e38
   161a8:	40001000 	.word	0x40001000
   161ac:	e000e100 	.word	0xe000e100

000161b0 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   161b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   161b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   161b8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   161ba:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   161be:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   161c2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   161c6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   161ca:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   161ce:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   161d2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   161d6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   161da:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   161de:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   161e2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   161e6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   161ea:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   161ee:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
   161f2:	4770      	bx	lr

000161f4 <radio_reset>:
{
   161f4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
   161f6:	2001      	movs	r0, #1
   161f8:	f7ea ff28 	bl	104c <_arch_irq_disable>
	NRF_RADIO->POWER =
   161fc:	4b08      	ldr	r3, [pc, #32]	; (16220 <radio_reset+0x2c>)
   161fe:	2200      	movs	r2, #0
   16200:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
   16204:	2201      	movs	r2, #1
   16206:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1620a:	4a06      	ldr	r2, [pc, #24]	; (16224 <radio_reset+0x30>)
   1620c:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
   1620e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16212:	f023 0301 	bic.w	r3, r3, #1
   16216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
   1621a:	6013      	str	r3, [r2, #0]
   1621c:	bd08      	pop	{r3, pc}
   1621e:	bf00      	nop
   16220:	40001000 	.word	0x40001000
   16224:	40001774 	.word	0x40001774

00016228 <radio_phy_set>:
	switch (phy) {
   16228:	2802      	cmp	r0, #2
   1622a:	4b14      	ldr	r3, [pc, #80]	; (1627c <radio_phy_set+0x54>)
   1622c:	d010      	beq.n	16250 <radio_phy_set+0x28>
   1622e:	2804      	cmp	r0, #4
   16230:	d014      	beq.n	1625c <radio_phy_set+0x34>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   16232:	681a      	ldr	r2, [r3, #0]
   16234:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   16238:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1623a:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1623c:	4b10      	ldr	r3, [pc, #64]	; (16280 <radio_phy_set+0x58>)
   1623e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   16242:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   16246:	f042 0201 	orr.w	r2, r2, #1
   1624a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   1624e:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
   16250:	681a      	ldr	r2, [r3, #0]
   16252:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
   16256:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   16258:	2104      	movs	r1, #4
   1625a:	e7ef      	b.n	1623c <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
   1625c:	681a      	ldr	r2, [r3, #0]
   1625e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   16262:	601a      	str	r2, [r3, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   16264:	681a      	ldr	r2, [r3, #0]
   16266:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
		if (flags & 0x01) {
   1626a:	f011 0f01 	tst.w	r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
   1626e:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
			mode = RADIO_MODE_MODE_Ble_LR500Kbit;
   16272:	bf14      	ite	ne
   16274:	2105      	movne	r1, #5
   16276:	2106      	moveq	r1, #6
		*(volatile u32_t *)0x4000173c =
   16278:	601a      	str	r2, [r3, #0]
   1627a:	e7df      	b.n	1623c <radio_phy_set+0x14>
   1627c:	4000173c 	.word	0x4000173c
   16280:	40001000 	.word	0x40001000

00016284 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
   16284:	4b01      	ldr	r3, [pc, #4]	; (1628c <radio_tx_power_set+0x8>)
   16286:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
   1628a:	4770      	bx	lr
   1628c:	40001000 	.word	0x40001000

00016290 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   16290:	4b01      	ldr	r3, [pc, #4]	; (16298 <radio_freq_chan_set+0x8>)
   16292:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   16296:	4770      	bx	lr
   16298:	40001000 	.word	0x40001000

0001629c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1629c:	4b07      	ldr	r3, [pc, #28]	; (162bc <radio_whiten_iv_set+0x20>)
   1629e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   162a2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   162a6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   162aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   162ae:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   162b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   162b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
   162ba:	4770      	bx	lr
   162bc:	40001000 	.word	0x40001000

000162c0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   162c0:	4a0a      	ldr	r2, [pc, #40]	; (162ec <radio_aa_set+0x2c>)
   162c2:	2300      	movs	r3, #0
   162c4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   162c8:	2301      	movs	r3, #1
   162ca:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   162ce:	78c3      	ldrb	r3, [r0, #3]
   162d0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   162d4:	7843      	ldrb	r3, [r0, #1]
   162d6:	7881      	ldrb	r1, [r0, #2]
   162d8:	041b      	lsls	r3, r3, #16
   162da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   162de:	7801      	ldrb	r1, [r0, #0]
   162e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   162e4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   162e8:	4770      	bx	lr
   162ea:	bf00      	nop
   162ec:	40001000 	.word	0x40001000

000162f0 <radio_pkt_configure>:
	u8_t dc = flags & 0x01; /* Adv or Data channel */
   162f0:	f002 0301 	and.w	r3, r2, #1
	switch (phy) {
   162f4:	f3c2 0242 	ubfx	r2, r2, #1, #3
   162f8:	2a02      	cmp	r2, #2
   162fa:	d023      	beq.n	16344 <radio_pkt_configure+0x54>
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
   162fc:	2a04      	cmp	r2, #4
   162fe:	bf0c      	ite	eq
   16300:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
   16304:	2200      	movne	r2, #0
	if (dc) {
   16306:	b10b      	cbz	r3, 1630c <radio_pkt_configure+0x1c>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   16308:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1630c:	f1c0 0308 	rsb	r3, r0, #8
   16310:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   16312:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   16316:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1631a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
			    RADIO_PCNF0_S1LEN_Msk) |
   1631e:	4303      	orrs	r3, r0
   16320:	4313      	orrs	r3, r2
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   16322:	4a0a      	ldr	r2, [pc, #40]	; (1634c <radio_pkt_configure+0x5c>)
   16324:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   16328:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1632c:	4b08      	ldr	r3, [pc, #32]	; (16350 <radio_pkt_configure+0x60>)
   1632e:	4003      	ands	r3, r0
   16330:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   16334:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   16338:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
   1633c:	4319      	orrs	r1, r3
   1633e:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   16342:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   16344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   16348:	e7dd      	b.n	16306 <radio_pkt_configure+0x16>
   1634a:	bf00      	nop
   1634c:	40001000 	.word	0x40001000
   16350:	fef80000 	.word	0xfef80000

00016354 <radio_pkt_rx_set>:
   16354:	4b01      	ldr	r3, [pc, #4]	; (1635c <radio_pkt_rx_set+0x8>)
   16356:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1635a:	4770      	bx	lr
   1635c:	40001000 	.word	0x40001000

00016360 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
   16360:	4b01      	ldr	r3, [pc, #4]	; (16368 <radio_pkt_tx_set+0x8>)
   16362:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   16366:	4770      	bx	lr
   16368:	40001000 	.word	0x40001000

0001636c <radio_tx_ready_delay_get>:
	switch (phy) {
   1636c:	2802      	cmp	r0, #2
   1636e:	d004      	beq.n	1637a <radio_tx_ready_delay_get+0xe>
   16370:	2804      	cmp	r0, #4
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
   16372:	bf0c      	ite	eq
   16374:	202b      	moveq	r0, #43	; 0x2b
   16376:	2029      	movne	r0, #41	; 0x29
   16378:	4770      	bx	lr
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   1637a:	2028      	movs	r0, #40	; 0x28
}
   1637c:	4770      	bx	lr

0001637e <radio_tx_chain_delay_get>:
}
   1637e:	2001      	movs	r0, #1
   16380:	4770      	bx	lr

00016382 <radio_rx_ready_delay_get>:
}
   16382:	2029      	movs	r0, #41	; 0x29
   16384:	4770      	bx	lr

00016386 <radio_rx_chain_delay_get>:
	switch (phy) {
   16386:	2802      	cmp	r0, #2
   16388:	d003      	beq.n	16392 <radio_rx_chain_delay_get+0xc>
   1638a:	2804      	cmp	r0, #4
   1638c:	d003      	beq.n	16396 <radio_rx_chain_delay_get+0x10>
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1638e:	200a      	movs	r0, #10
}
   16390:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   16392:	2005      	movs	r0, #5
   16394:	4770      	bx	lr
		if (flags & 0x01) {
   16396:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1639a:	bf14      	ite	ne
   1639c:	201e      	movne	r0, #30
   1639e:	2014      	moveq	r0, #20
   163a0:	4770      	bx	lr
	...

000163a4 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
   163a4:	4b01      	ldr	r3, [pc, #4]	; (163ac <radio_rx_enable+0x8>)
   163a6:	2201      	movs	r2, #1
   163a8:	605a      	str	r2, [r3, #4]
   163aa:	4770      	bx	lr
   163ac:	40001000 	.word	0x40001000

000163b0 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
   163b0:	4b01      	ldr	r3, [pc, #4]	; (163b8 <radio_tx_enable+0x8>)
   163b2:	2201      	movs	r2, #1
   163b4:	601a      	str	r2, [r3, #0]
   163b6:	4770      	bx	lr
   163b8:	40001000 	.word	0x40001000

000163bc <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   163bc:	4a07      	ldr	r2, [pc, #28]	; (163dc <radio_disable+0x20>)
   163be:	f44f 6390 	mov.w	r3, #1152	; 0x480
   163c2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
   163c6:	2301      	movs	r3, #1
   163c8:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
   163ca:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   163cc:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   163d0:	2100      	movs	r1, #0
   163d2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
   163d6:	6113      	str	r3, [r2, #16]
   163d8:	4770      	bx	lr
   163da:	bf00      	nop
   163dc:	4001f000 	.word	0x4001f000

000163e0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   163e0:	4b04      	ldr	r3, [pc, #16]	; (163f4 <radio_status_reset+0x14>)
   163e2:	2200      	movs	r2, #0
   163e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   163e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   163ec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   163f0:	4770      	bx	lr
   163f2:	bf00      	nop
   163f4:	40001000 	.word	0x40001000

000163f8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   163f8:	4b03      	ldr	r3, [pc, #12]	; (16408 <radio_is_ready+0x10>)
   163fa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   163fe:	3000      	adds	r0, #0
   16400:	bf18      	it	ne
   16402:	2001      	movne	r0, #1
   16404:	4770      	bx	lr
   16406:	bf00      	nop
   16408:	40001000 	.word	0x40001000

0001640c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1640c:	4b03      	ldr	r3, [pc, #12]	; (1641c <radio_is_done+0x10>)
   1640e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   16412:	3000      	adds	r0, #0
   16414:	bf18      	it	ne
   16416:	2001      	movne	r0, #1
   16418:	4770      	bx	lr
   1641a:	bf00      	nop
   1641c:	40001000 	.word	0x40001000

00016420 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   16420:	4b03      	ldr	r3, [pc, #12]	; (16430 <radio_is_idle+0x10>)
   16422:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   16426:	fab0 f080 	clz	r0, r0
   1642a:	0940      	lsrs	r0, r0, #5
   1642c:	4770      	bx	lr
   1642e:	bf00      	nop
   16430:	40001000 	.word	0x40001000

00016434 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   16434:	4b04      	ldr	r3, [pc, #16]	; (16448 <radio_crc_configure+0x14>)
   16436:	f240 1203 	movw	r2, #259	; 0x103
   1643a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1643e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   16442:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
   16446:	4770      	bx	lr
   16448:	40001000 	.word	0x40001000

0001644c <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1644c:	4b03      	ldr	r3, [pc, #12]	; (1645c <radio_crc_is_valid+0x10>)
   1644e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   16452:	3000      	adds	r0, #0
   16454:	bf18      	it	ne
   16456:	2001      	movne	r0, #1
   16458:	4770      	bx	lr
   1645a:	bf00      	nop
   1645c:	40001000 	.word	0x40001000

00016460 <radio_pkt_empty_get>:
}
   16460:	4800      	ldr	r0, [pc, #0]	; (16464 <radio_pkt_empty_get+0x4>)
   16462:	4770      	bx	lr
   16464:	20003d2c 	.word	0x20003d2c

00016468 <radio_pkt_scratch_get>:
}
   16468:	4800      	ldr	r0, [pc, #0]	; (1646c <radio_pkt_scratch_get+0x4>)
   1646a:	4770      	bx	lr
   1646c:	20003d30 	.word	0x20003d30

00016470 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16470:	4b04      	ldr	r3, [pc, #16]	; (16484 <radio_switch_complete_and_rx+0x14>)
   16472:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   16474:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16476:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1647a:	4602      	mov	r2, r0
   1647c:	4608      	mov	r0, r1
   1647e:	f7ff bd7b 	b.w	15f78 <sw_switch.isra.6>
   16482:	bf00      	nop
   16484:	40001000 	.word	0x40001000

00016488 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16488:	4b03      	ldr	r3, [pc, #12]	; (16498 <radio_switch_complete_and_tx+0x10>)
   1648a:	2103      	movs	r1, #3
   1648c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   16490:	4601      	mov	r1, r0
   16492:	2001      	movs	r0, #1
   16494:	f7ff bd70 	b.w	15f78 <sw_switch.isra.6>
   16498:	40001000 	.word	0x40001000

0001649c <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1649c:	4b05      	ldr	r3, [pc, #20]	; (164b4 <radio_switch_complete_and_disable+0x18>)
   1649e:	2203      	movs	r2, #3
   164a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
   164a4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   164a8:	f44f 6290 	mov.w	r2, #1152	; 0x480
   164ac:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   164b0:	4770      	bx	lr
   164b2:	bf00      	nop
   164b4:	40001000 	.word	0x40001000

000164b8 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   164b8:	4a03      	ldr	r2, [pc, #12]	; (164c8 <radio_rssi_measure+0x10>)
   164ba:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   164be:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   164c2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
   164c6:	4770      	bx	lr
   164c8:	40001000 	.word	0x40001000

000164cc <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   164cc:	4b01      	ldr	r3, [pc, #4]	; (164d4 <radio_rssi_get+0x8>)
   164ce:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   164d2:	4770      	bx	lr
   164d4:	40001000 	.word	0x40001000

000164d8 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   164d8:	4b02      	ldr	r3, [pc, #8]	; (164e4 <radio_rssi_status_reset+0xc>)
   164da:	2200      	movs	r2, #0
   164dc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   164e0:	4770      	bx	lr
   164e2:	bf00      	nop
   164e4:	40001000 	.word	0x40001000

000164e8 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   164e8:	4b03      	ldr	r3, [pc, #12]	; (164f8 <radio_rssi_is_ready+0x10>)
   164ea:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   164ee:	3000      	adds	r0, #0
   164f0:	bf18      	it	ne
   164f2:	2001      	movne	r0, #1
   164f4:	4770      	bx	lr
   164f6:	bf00      	nop
   164f8:	40001000 	.word	0x40001000

000164fc <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
   164fc:	b530      	push	{r4, r5, lr}
   164fe:	2400      	movs	r4, #0
   16500:	00a3      	lsls	r3, r4, #2
   16502:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
   1650a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
   1650c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
   16510:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
   16512:	8895      	ldrh	r5, [r2, #4]
   16514:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
   16518:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1651a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
   1651e:	d1ef      	bne.n	16500 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
   16520:	4b02      	ldr	r3, [pc, #8]	; (1652c <radio_filter_configure+0x30>)
   16522:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   16526:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
   1652a:	bd30      	pop	{r4, r5, pc}
   1652c:	40001000 	.word	0x40001000

00016530 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   16530:	4a03      	ldr	r2, [pc, #12]	; (16540 <radio_filter_disable+0x10>)
   16532:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   16536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1653a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
   1653e:	4770      	bx	lr
   16540:	40001000 	.word	0x40001000

00016544 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   16544:	4b02      	ldr	r3, [pc, #8]	; (16550 <radio_filter_status_reset+0xc>)
   16546:	2200      	movs	r2, #0
   16548:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   1654c:	4770      	bx	lr
   1654e:	bf00      	nop
   16550:	40001000 	.word	0x40001000

00016554 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   16554:	4b03      	ldr	r3, [pc, #12]	; (16564 <radio_filter_has_match+0x10>)
   16556:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1655a:	3000      	adds	r0, #0
   1655c:	bf18      	it	ne
   1655e:	2001      	movne	r0, #1
   16560:	4770      	bx	lr
   16562:	bf00      	nop
   16564:	40001000 	.word	0x40001000

00016568 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   16568:	4b01      	ldr	r3, [pc, #4]	; (16570 <radio_filter_match_get+0x8>)
   1656a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1656e:	4770      	bx	lr
   16570:	40001000 	.word	0x40001000

00016574 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
   16574:	4b04      	ldr	r3, [pc, #16]	; (16588 <radio_bc_configure+0x14>)
   16576:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1657a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1657e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16582:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
   16586:	4770      	bx	lr
   16588:	40001000 	.word	0x40001000

0001658c <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
   1658c:	4b05      	ldr	r3, [pc, #20]	; (165a4 <radio_tmr_status_reset+0x18>)
   1658e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   16592:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
   16596:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1659a:	4a03      	ldr	r2, [pc, #12]	; (165a8 <radio_tmr_status_reset+0x1c>)
   1659c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   165a0:	4770      	bx	lr
   165a2:	bf00      	nop
   165a4:	4000b000 	.word	0x4000b000
   165a8:	0004207f 	.word	0x0004207f

000165ac <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
   165ac:	4b03      	ldr	r3, [pc, #12]	; (165bc <radio_tmr_tifs_set+0x10>)
   165ae:	4a04      	ldr	r2, [pc, #16]	; (165c0 <radio_tmr_tifs_set+0x14>)
   165b0:	781b      	ldrb	r3, [r3, #0]
   165b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   165b6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   165ba:	4770      	bx	lr
   165bc:	20003e3c 	.word	0x20003e3c
   165c0:	40009000 	.word	0x40009000

000165c4 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
   165c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   165c8:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   165cc:	4c27      	ldr	r4, [pc, #156]	; (1666c <radio_tmr_start+0xa8>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
   165ce:	4d28      	ldr	r5, [pc, #160]	; (16670 <radio_tmr_start+0xac>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   165d0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   165d4:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
   165d6:	bf88      	it	hi
   165d8:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	EVENT_TIMER->TASKS_CLEAR = 1;
   165dc:	4b25      	ldr	r3, [pc, #148]	; (16674 <radio_tmr_start+0xb0>)
	remainder /= 1000000UL;
   165de:	4c26      	ldr	r4, [pc, #152]	; (16678 <radio_tmr_start+0xb4>)
		remainder += 30517578UL;
   165e0:	bf82      	ittt	hi
   165e2:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   165e6:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
   165ea:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
   165ee:	2601      	movs	r6, #1
	remainder /= 1000000UL;
   165f0:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->MODE = 0;
   165f4:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   165f6:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
   165f8:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
   165fc:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
   165fe:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   16602:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   16606:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
   1660a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
   1660e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
   16612:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   16616:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
   1661a:	f505 35a0 	add.w	r5, r5, #81920	; 0x14000
   1661e:	4917      	ldr	r1, [pc, #92]	; (1667c <radio_tmr_start+0xb8>)
   16620:	f8c5 1518 	str.w	r1, [r5, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
   16624:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
   16628:	f8c5 2504 	str.w	r2, [r5, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
   1662c:	f7ff fc8c 	bl	15f48 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
   16630:	4b13      	ldr	r3, [pc, #76]	; (16680 <radio_tmr_start+0xbc>)
   16632:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
   16634:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   16638:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1663c:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
   16640:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
   16642:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
   16646:	3b74      	subs	r3, #116	; 0x74
   16648:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
   1664c:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
   16650:	f8c5 354c 	str.w	r3, [r5, #1356]	; 0x54c
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   16654:	f44f 6310 	mov.w	r3, #2304	; 0x900
   16658:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1665c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
   16660:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
   16664:	4620      	mov	r0, r4
   16666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1666a:	bf00      	nop
   1666c:	7ff0bdbf 	.word	0x7ff0bdbf
   16670:	4000b000 	.word	0x4000b000
   16674:	40008000 	.word	0x40008000
   16678:	000f4240 	.word	0x000f4240
   1667c:	4000b148 	.word	0x4000b148
   16680:	40009000 	.word	0x40009000

00016684 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
   16684:	4a04      	ldr	r2, [pc, #16]	; (16698 <radio_tmr_stop+0x14>)
   16686:	2301      	movs	r3, #1
   16688:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
   1668a:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
   1668c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   16690:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
   16692:	6113      	str	r3, [r2, #16]
   16694:	4770      	bx	lr
   16696:	bf00      	nop
   16698:	40008000 	.word	0x40008000

0001669c <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
   1669c:	4b0c      	ldr	r3, [pc, #48]	; (166d0 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   1669e:	4a0d      	ldr	r2, [pc, #52]	; (166d4 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
   166a0:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   166a4:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   166a8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   166ac:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   166b0:	3240      	adds	r2, #64	; 0x40
   166b2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
   166b6:	f502 7280 	add.w	r2, r2, #256	; 0x100
   166ba:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
   166be:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
   166c2:	3a34      	subs	r2, #52	; 0x34
   166c4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
   166c8:	2218      	movs	r2, #24
   166ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   166ce:	4770      	bx	lr
   166d0:	40008000 	.word	0x40008000
   166d4:	40001104 	.word	0x40001104

000166d8 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
   166d8:	4b0b      	ldr	r3, [pc, #44]	; (16708 <radio_tmr_aa_capture+0x30>)
   166da:	4a0c      	ldr	r2, [pc, #48]	; (1670c <radio_tmr_aa_capture+0x34>)
   166dc:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
   166e0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   166e4:	3240      	adds	r2, #64	; 0x40
   166e6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
   166ea:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
   166ee:	3a3c      	subs	r2, #60	; 0x3c
   166f0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
   166f4:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   166f8:	3240      	adds	r2, #64	; 0x40
   166fa:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
   166fe:	220c      	movs	r2, #12
   16700:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   16704:	4770      	bx	lr
   16706:	bf00      	nop
   16708:	4001f000 	.word	0x4001f000
   1670c:	40001100 	.word	0x40001100

00016710 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   16710:	4b01      	ldr	r3, [pc, #4]	; (16718 <radio_tmr_aa_get+0x8>)
   16712:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   16716:	4770      	bx	lr
   16718:	40008000 	.word	0x40008000

0001671c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
   1671c:	4b01      	ldr	r3, [pc, #4]	; (16724 <radio_tmr_aa_save+0x8>)
   1671e:	6018      	str	r0, [r3, #0]
   16720:	4770      	bx	lr
   16722:	bf00      	nop
   16724:	20003e34 	.word	0x20003e34

00016728 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   16728:	4b01      	ldr	r3, [pc, #4]	; (16730 <radio_tmr_aa_restore+0x8>)
   1672a:	6818      	ldr	r0, [r3, #0]
   1672c:	4770      	bx	lr
   1672e:	bf00      	nop
   16730:	20003e34 	.word	0x20003e34

00016734 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   16734:	4b01      	ldr	r3, [pc, #4]	; (1673c <radio_tmr_ready_get+0x8>)
   16736:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1673a:	4770      	bx	lr
   1673c:	40008000 	.word	0x40008000

00016740 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
   16740:	4b06      	ldr	r3, [pc, #24]	; (1675c <radio_tmr_end_capture+0x1c>)
   16742:	4a07      	ldr	r2, [pc, #28]	; (16760 <radio_tmr_end_capture+0x20>)
   16744:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
   16748:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   1674c:	323c      	adds	r2, #60	; 0x3c
   1674e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
   16752:	2220      	movs	r2, #32
   16754:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   16758:	4770      	bx	lr
   1675a:	bf00      	nop
   1675c:	4001f000 	.word	0x4001f000
   16760:	4000110c 	.word	0x4000110c

00016764 <radio_tmr_end_get>:
   16764:	4b01      	ldr	r3, [pc, #4]	; (1676c <radio_tmr_end_get+0x8>)
   16766:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1676a:	4770      	bx	lr
   1676c:	40008000 	.word	0x40008000

00016770 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   16770:	4b01      	ldr	r3, [pc, #4]	; (16778 <radio_tmr_tifs_base_get+0x8>)
   16772:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
   16776:	4770      	bx	lr
   16778:	40008000 	.word	0x40008000

0001677c <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1677c:	4b21      	ldr	r3, [pc, #132]	; (16804 <radio_ccm_rx_pkt_set+0x88>)
{
   1677e:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   16780:	2400      	movs	r4, #0
   16782:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   16786:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   16788:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1678a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1678e:	d003      	beq.n	16798 <radio_ccm_rx_pkt_set+0x1c>
   16790:	2904      	cmp	r1, #4
   16792:	d024      	beq.n	167de <radio_ccm_rx_pkt_set+0x62>
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   16794:	491c      	ldr	r1, [pc, #112]	; (16808 <radio_ccm_rx_pkt_set+0x8c>)
   16796:	e000      	b.n	1679a <radio_ccm_rx_pkt_set+0x1e>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   16798:	491c      	ldr	r1, [pc, #112]	; (1680c <radio_ccm_rx_pkt_set+0x90>)
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
   1679a:	4b1a      	ldr	r3, [pc, #104]	; (16804 <radio_ccm_rx_pkt_set+0x88>)
   1679c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   167a0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
   167a4:	481a      	ldr	r0, [pc, #104]	; (16810 <radio_ccm_rx_pkt_set+0x94>)
   167a6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
   167aa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   167ae:	4a19      	ldr	r2, [pc, #100]	; (16814 <radio_ccm_rx_pkt_set+0x98>)
   167b0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   167b4:	2200      	movs	r2, #0
   167b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   167ba:	4917      	ldr	r1, [pc, #92]	; (16818 <radio_ccm_rx_pkt_set+0x9c>)
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   167bc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   167c0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
   167c4:	4a15      	ldr	r2, [pc, #84]	; (1681c <radio_ccm_rx_pkt_set+0xa0>)
   167c6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
   167ca:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
   167ce:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
   167d2:	2140      	movs	r1, #64	; 0x40
   167d4:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
   167d8:	2201      	movs	r2, #1
   167da:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   167dc:	bd10      	pop	{r4, pc}
		NRF_CCM->RATEOVERRIDE =
   167de:	2103      	movs	r1, #3
   167e0:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_EVT =
   167e4:	4b0d      	ldr	r3, [pc, #52]	; (1681c <radio_ccm_rx_pkt_set+0xa0>)
   167e6:	490e      	ldr	r1, [pc, #56]	; (16820 <radio_ccm_rx_pkt_set+0xa4>)
   167e8:	f8c3 1578 	str.w	r1, [r3, #1400]	; 0x578
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_TASK =
   167ec:	f501 415e 	add.w	r1, r1, #56832	; 0xde00
   167f0:	31bc      	adds	r1, #188	; 0xbc
   167f2:	f8c3 157c 	str.w	r1, [r3, #1404]	; 0x57c
		NRF_PPI->CHENSET = HAL_TRIGGER_RATEOVERRIDE_PPI_ENABLE;
   167f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   167fa:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   167fe:	4909      	ldr	r1, [pc, #36]	; (16824 <radio_ccm_rx_pkt_set+0xa8>)
		break;
   16800:	e7cb      	b.n	1679a <radio_ccm_rx_pkt_set+0x1e>
   16802:	bf00      	nop
   16804:	4000f000 	.word	0x4000f000
   16808:	01000001 	.word	0x01000001
   1680c:	01010001 	.word	0x01010001
   16810:	20003d30 	.word	0x20003d30
   16814:	20003c20 	.word	0x20003c20
   16818:	40001104 	.word	0x40001104
   1681c:	4001f000 	.word	0x4001f000
   16820:	40001150 	.word	0x40001150
   16824:	01020001 	.word	0x01020001

00016828 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   16828:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1682a:	4b0e      	ldr	r3, [pc, #56]	; (16864 <radio_ccm_tx_pkt_set+0x3c>)
   1682c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1682e:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   16830:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   16834:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   16838:	4c0b      	ldr	r4, [pc, #44]	; (16868 <radio_ccm_tx_pkt_set+0x40>)
   1683a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
   1683e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
   16842:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   16846:	4809      	ldr	r0, [pc, #36]	; (1686c <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   16848:	4909      	ldr	r1, [pc, #36]	; (16870 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
   1684a:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
   1684e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   16852:	2101      	movs	r1, #1
   16854:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   16858:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1685c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
   16860:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
   16862:	bd10      	pop	{r4, pc}
   16864:	4000f000 	.word	0x4000f000
   16868:	01010000 	.word	0x01010000
   1686c:	20003d30 	.word	0x20003d30
   16870:	20003c20 	.word	0x20003c20

00016874 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
   16874:	4b0c      	ldr	r3, [pc, #48]	; (168a8 <radio_ccm_is_done+0x34>)
   16876:	2202      	movs	r2, #2
   16878:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1687c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   16880:	b16a      	cbz	r2, 1689e <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
   16882:	2202      	movs	r2, #2
   16884:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   16888:	4a08      	ldr	r2, [pc, #32]	; (168ac <radio_ccm_is_done+0x38>)
   1688a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1688e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
   16892:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   16896:	fab0 f080 	clz	r0, r0
   1689a:	0940      	lsrs	r0, r0, #5
   1689c:	4770      	bx	lr
		__WFE();
   1689e:	bf20      	wfe
		__SEV();
   168a0:	bf40      	sev
		__WFE();
   168a2:	bf20      	wfe
   168a4:	e7ea      	b.n	1687c <radio_ccm_is_done+0x8>
   168a6:	bf00      	nop
   168a8:	4000f000 	.word	0x4000f000
   168ac:	e000e100 	.word	0xe000e100

000168b0 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   168b0:	4b03      	ldr	r3, [pc, #12]	; (168c0 <radio_ccm_mic_is_valid+0x10>)
   168b2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   168b6:	3000      	adds	r0, #0
   168b8:	bf18      	it	ne
   168ba:	2001      	movne	r0, #1
   168bc:	4770      	bx	lr
   168be:	bf00      	nop
   168c0:	4000f000 	.word	0x4000f000

000168c4 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
   168c4:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   168c6:	4c13      	ldr	r4, [pc, #76]	; (16914 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   168c8:	4d13      	ldr	r5, [pc, #76]	; (16918 <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   168ca:	2303      	movs	r3, #3
   168cc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   168d0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
   168d4:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
   168d8:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
   168dc:	3b01      	subs	r3, #1
   168de:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
   168e2:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
   168e4:	4b0d      	ldr	r3, [pc, #52]	; (1691c <radio_ar_configure+0x58>)
   168e6:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
   168ea:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
   168ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   168f0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   168f4:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
   168f8:	f7ff fe3c 	bl	16574 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   168fc:	4b08      	ldr	r3, [pc, #32]	; (16920 <radio_ar_configure+0x5c>)
   168fe:	4a09      	ldr	r2, [pc, #36]	; (16924 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   16900:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
   16904:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   16908:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
   1690a:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
   1690e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   16912:	bd38      	pop	{r3, r4, r5, pc}
   16914:	4000f000 	.word	0x4000f000
   16918:	40001000 	.word	0x40001000
   1691c:	20003c1c 	.word	0x20003c1c
   16920:	4001f000 	.word	0x4001f000
   16924:	40001128 	.word	0x40001128

00016928 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   16928:	4b01      	ldr	r3, [pc, #4]	; (16930 <radio_ar_match_get+0x8>)
   1692a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1692e:	4770      	bx	lr
   16930:	4000f000 	.word	0x4000f000

00016934 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   16934:	4a04      	ldr	r2, [pc, #16]	; (16948 <radio_ar_status_reset+0x14>)
   16936:	2300      	movs	r3, #0
   16938:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1693c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
   16940:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   16944:	4770      	bx	lr
   16946:	bf00      	nop
   16948:	40001000 	.word	0x40001000

0001694c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1694c:	4b08      	ldr	r3, [pc, #32]	; (16970 <radio_ar_has_match+0x24>)
   1694e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   16952:	b160      	cbz	r0, 1696e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   16954:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   16958:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1695c:	b138      	cbz	r0, 1696e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1695e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   16962:	b120      	cbz	r0, 1696e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   16964:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   16968:	fab0 f080 	clz	r0, r0
   1696c:	0940      	lsrs	r0, r0, #5
}
   1696e:	4770      	bx	lr
   16970:	40001000 	.word	0x40001000

00016974 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   16974:	2901      	cmp	r1, #1
{
   16976:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   16978:	d00e      	beq.n	16998 <mayfly_enable_cb+0x24>
   1697a:	4b0d      	ldr	r3, [pc, #52]	; (169b0 <mayfly_enable_cb+0x3c>)
   1697c:	9301      	str	r3, [sp, #4]
   1697e:	9300      	str	r3, [sp, #0]
   16980:	4a0c      	ldr	r2, [pc, #48]	; (169b4 <mayfly_enable_cb+0x40>)
   16982:	4b0d      	ldr	r3, [pc, #52]	; (169b8 <mayfly_enable_cb+0x44>)
   16984:	490d      	ldr	r1, [pc, #52]	; (169bc <mayfly_enable_cb+0x48>)
   16986:	480e      	ldr	r0, [pc, #56]	; (169c0 <mayfly_enable_cb+0x4c>)
   16988:	f7ea feaa 	bl	16e0 <printk>
   1698c:	4040      	eors	r0, r0
   1698e:	f380 8811 	msr	BASEPRI, r0
   16992:	f04f 0004 	mov.w	r0, #4
   16996:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
   16998:	2018      	movs	r0, #24
	if (enable) {
   1699a:	b122      	cbz	r2, 169a6 <mayfly_enable_cb+0x32>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
   1699c:	b003      	add	sp, #12
   1699e:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_enable(SWI4_IRQn);
   169a2:	f7ea bb43 	b.w	102c <_arch_irq_enable>
}
   169a6:	b003      	add	sp, #12
   169a8:	f85d eb04 	ldr.w	lr, [sp], #4
		irq_disable(SWI4_IRQn);
   169ac:	f7ea bb4e 	b.w	104c <_arch_irq_disable>
   169b0:	0001868d 	.word	0x0001868d
   169b4:	00019a84 	.word	0x00019a84
   169b8:	0001c529 	.word	0x0001c529
   169bc:	00019a8b 	.word	0x00019a8b
   169c0:	0001c558 	.word	0x0001c558

000169c4 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
   169c4:	b507      	push	{r0, r1, r2, lr}
	(void)caller_id;

	switch (callee_id) {
   169c6:	b181      	cbz	r1, 169ea <mayfly_is_enabled+0x26>
   169c8:	2901      	cmp	r1, #1
   169ca:	d014      	beq.n	169f6 <mayfly_is_enabled+0x32>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
   169cc:	4b0b      	ldr	r3, [pc, #44]	; (169fc <mayfly_is_enabled+0x38>)
   169ce:	9301      	str	r3, [sp, #4]
   169d0:	9300      	str	r3, [sp, #0]
   169d2:	4a0b      	ldr	r2, [pc, #44]	; (16a00 <mayfly_is_enabled+0x3c>)
   169d4:	4b0b      	ldr	r3, [pc, #44]	; (16a04 <mayfly_is_enabled+0x40>)
   169d6:	490c      	ldr	r1, [pc, #48]	; (16a08 <mayfly_is_enabled+0x44>)
   169d8:	480c      	ldr	r0, [pc, #48]	; (16a0c <mayfly_is_enabled+0x48>)
   169da:	f7ea fe81 	bl	16e0 <printk>
   169de:	4040      	eors	r0, r0
   169e0:	f380 8811 	msr	BASEPRI, r0
   169e4:	f04f 0004 	mov.w	r0, #4
   169e8:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
   169ea:	200b      	movs	r0, #11
		break;
	}

	return 0;
}
   169ec:	b003      	add	sp, #12
   169ee:	f85d eb04 	ldr.w	lr, [sp], #4
		return irq_is_enabled(SWI4_IRQn);
   169f2:	f7ea bb3f 	b.w	1074 <_arch_irq_is_enabled>
   169f6:	2018      	movs	r0, #24
   169f8:	e7f8      	b.n	169ec <mayfly_is_enabled+0x28>
   169fa:	bf00      	nop
   169fc:	0001868d 	.word	0x0001868d
   16a00:	00019a84 	.word	0x00019a84
   16a04:	0001c53a 	.word	0x0001c53a
   16a08:	00019a8b 	.word	0x00019a8b
   16a0c:	000197a5 	.word	0x000197a5

00016a10 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   16a10:	4288      	cmp	r0, r1
   16a12:	d00a      	beq.n	16a2a <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
   16a14:	b918      	cbnz	r0, 16a1e <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   16a16:	1e4b      	subs	r3, r1, #1
   16a18:	4258      	negs	r0, r3
   16a1a:	4158      	adcs	r0, r3
   16a1c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   16a1e:	2801      	cmp	r0, #1
   16a20:	d105      	bne.n	16a2e <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   16a22:	fab1 f081 	clz	r0, r1
   16a26:	0940      	lsrs	r0, r0, #5
   16a28:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   16a2a:	2001      	movs	r0, #1
   16a2c:	4770      	bx	lr
   16a2e:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
   16a30:	4770      	bx	lr
	...

00016a34 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
   16a34:	b507      	push	{r0, r1, r2, lr}
   16a36:	4b0e      	ldr	r3, [pc, #56]	; (16a70 <mayfly_pend+0x3c>)
	(void)caller_id;

	switch (callee_id) {
   16a38:	b181      	cbz	r1, 16a5c <mayfly_pend+0x28>
   16a3a:	2901      	cmp	r1, #1
   16a3c:	d015      	beq.n	16a6a <mayfly_pend+0x36>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
   16a3e:	4b0d      	ldr	r3, [pc, #52]	; (16a74 <mayfly_pend+0x40>)
   16a40:	9301      	str	r3, [sp, #4]
   16a42:	9300      	str	r3, [sp, #0]
   16a44:	4a0c      	ldr	r2, [pc, #48]	; (16a78 <mayfly_pend+0x44>)
   16a46:	4b0d      	ldr	r3, [pc, #52]	; (16a7c <mayfly_pend+0x48>)
   16a48:	490d      	ldr	r1, [pc, #52]	; (16a80 <mayfly_pend+0x4c>)
   16a4a:	480e      	ldr	r0, [pc, #56]	; (16a84 <mayfly_pend+0x50>)
   16a4c:	f7ea fe48 	bl	16e0 <printk>
   16a50:	4040      	eors	r0, r0
   16a52:	f380 8811 	msr	BASEPRI, r0
   16a56:	f04f 0004 	mov.w	r0, #4
   16a5a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   16a60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		break;
	}
}
   16a64:	b003      	add	sp, #12
   16a66:	f85d fb04 	ldr.w	pc, [sp], #4
   16a6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   16a6e:	e7f7      	b.n	16a60 <mayfly_pend+0x2c>
   16a70:	e000e100 	.word	0xe000e100
   16a74:	0001868d 	.word	0x0001868d
   16a78:	00019a84 	.word	0x00019a84
   16a7c:	0001c54c 	.word	0x0001c54c
   16a80:	00019a8b 	.word	0x00019a8b
   16a84:	000197a5 	.word	0x000197a5

00016a88 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   16a88:	2803      	cmp	r0, #3
{
   16a8a:	b507      	push	{r0, r1, r2, lr}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   16a8c:	d90e      	bls.n	16aac <hal_ticker_instance0_caller_id_get+0x24>
   16a8e:	4b0e      	ldr	r3, [pc, #56]	; (16ac8 <hal_ticker_instance0_caller_id_get+0x40>)
   16a90:	9301      	str	r3, [sp, #4]
   16a92:	9300      	str	r3, [sp, #0]
   16a94:	4a0d      	ldr	r2, [pc, #52]	; (16acc <hal_ticker_instance0_caller_id_get+0x44>)
   16a96:	4b0e      	ldr	r3, [pc, #56]	; (16ad0 <hal_ticker_instance0_caller_id_get+0x48>)
   16a98:	490e      	ldr	r1, [pc, #56]	; (16ad4 <hal_ticker_instance0_caller_id_get+0x4c>)
   16a9a:	480f      	ldr	r0, [pc, #60]	; (16ad8 <hal_ticker_instance0_caller_id_get+0x50>)

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   16a9c:	f7ea fe20 	bl	16e0 <printk>
   16aa0:	4040      	eors	r0, r0
   16aa2:	f380 8811 	msr	BASEPRI, r0
   16aa6:	f04f 0004 	mov.w	r0, #4
   16aaa:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   16aac:	4b0b      	ldr	r3, [pc, #44]	; (16adc <hal_ticker_instance0_caller_id_get+0x54>)
   16aae:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   16ab0:	b938      	cbnz	r0, 16ac2 <hal_ticker_instance0_caller_id_get+0x3a>
   16ab2:	4b05      	ldr	r3, [pc, #20]	; (16ac8 <hal_ticker_instance0_caller_id_get+0x40>)
   16ab4:	9301      	str	r3, [sp, #4]
   16ab6:	9300      	str	r3, [sp, #0]
   16ab8:	4a04      	ldr	r2, [pc, #16]	; (16acc <hal_ticker_instance0_caller_id_get+0x44>)
   16aba:	4b05      	ldr	r3, [pc, #20]	; (16ad0 <hal_ticker_instance0_caller_id_get+0x48>)
   16abc:	4905      	ldr	r1, [pc, #20]	; (16ad4 <hal_ticker_instance0_caller_id_get+0x4c>)
   16abe:	4808      	ldr	r0, [pc, #32]	; (16ae0 <hal_ticker_instance0_caller_id_get+0x58>)
   16ac0:	e7ec      	b.n	16a9c <hal_ticker_instance0_caller_id_get+0x14>

	return caller_id;
}
   16ac2:	b003      	add	sp, #12
   16ac4:	f85d fb04 	ldr.w	pc, [sp], #4
   16ac8:	0001868d 	.word	0x0001868d
   16acc:	00019a84 	.word	0x00019a84
   16ad0:	0001c588 	.word	0x0001c588
   16ad4:	00019a8b 	.word	0x00019a8b
   16ad8:	0001c5ca 	.word	0x0001c5ca
   16adc:	0001c5c6 	.word	0x0001c5c6
   16ae0:	0001c60b 	.word	0x0001c60b

00016ae4 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(u8_t caller_id, u8_t callee_id, u8_t chain,
				void *instance)
{
   16ae4:	b513      	push	{r0, r1, r4, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   16ae6:	3802      	subs	r0, #2
{
   16ae8:	461c      	mov	r4, r3
	switch (caller_id) {
   16aea:	2803      	cmp	r0, #3
   16aec:	d818      	bhi.n	16b20 <hal_ticker_instance0_sched+0x3c>
   16aee:	e8df f000 	tbb	[pc, r0]
   16af2:	0d02      	.short	0x0d02
   16af4:	2f13      	.short	0x2f13
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
   16af6:	2903      	cmp	r1, #3
   16af8:	d112      	bne.n	16b20 <hal_ticker_instance0_sched+0x3c>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
   16afa:	4b19      	ldr	r3, [pc, #100]	; (16b60 <hal_ticker_instance0_sched+0x7c>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   16afc:	2100      	movs	r1, #0
			m.param = instance;
   16afe:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16b00:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
   16b02:	b002      	add	sp, #8
   16b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16b08:	f7f3 bd36 	b.w	a578 <mayfly_enqueue>
		switch (callee_id) {
   16b0c:	2904      	cmp	r1, #4
   16b0e:	d107      	bne.n	16b20 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   16b10:	4b14      	ldr	r3, [pc, #80]	; (16b64 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16b12:	2101      	movs	r1, #1
			m.param = instance;
   16b14:	609c      	str	r4, [r3, #8]
   16b16:	e7f3      	b.n	16b00 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
   16b18:	2903      	cmp	r1, #3
   16b1a:	d010      	beq.n	16b3e <hal_ticker_instance0_sched+0x5a>
   16b1c:	2904      	cmp	r1, #4
   16b1e:	d013      	beq.n	16b48 <hal_ticker_instance0_sched+0x64>
		LL_ASSERT(0);
   16b20:	4b11      	ldr	r3, [pc, #68]	; (16b68 <hal_ticker_instance0_sched+0x84>)
   16b22:	9301      	str	r3, [sp, #4]
   16b24:	9300      	str	r3, [sp, #0]
   16b26:	4a11      	ldr	r2, [pc, #68]	; (16b6c <hal_ticker_instance0_sched+0x88>)
   16b28:	4b11      	ldr	r3, [pc, #68]	; (16b70 <hal_ticker_instance0_sched+0x8c>)
   16b2a:	4912      	ldr	r1, [pc, #72]	; (16b74 <hal_ticker_instance0_sched+0x90>)
   16b2c:	4812      	ldr	r0, [pc, #72]	; (16b78 <hal_ticker_instance0_sched+0x94>)
   16b2e:	f7ea fdd7 	bl	16e0 <printk>
   16b32:	4040      	eors	r0, r0
   16b34:	f380 8811 	msr	BASEPRI, r0
   16b38:	f04f 0004 	mov.w	r0, #4
   16b3c:	df02      	svc	2
			m.param = instance;
   16b3e:	4b0f      	ldr	r3, [pc, #60]	; (16b7c <hal_ticker_instance0_sched+0x98>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b40:	2100      	movs	r1, #0
			m.param = instance;
   16b42:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b44:	2001      	movs	r0, #1
   16b46:	e7dc      	b.n	16b02 <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
   16b48:	4b0d      	ldr	r3, [pc, #52]	; (16b80 <hal_ticker_instance0_sched+0x9c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16b4a:	2101      	movs	r1, #1
			m.param = instance;
   16b4c:	609c      	str	r4, [r3, #8]
   16b4e:	e7f9      	b.n	16b44 <hal_ticker_instance0_sched+0x60>
		switch (callee_id) {
   16b50:	2904      	cmp	r1, #4
   16b52:	d1e5      	bne.n	16b20 <hal_ticker_instance0_sched+0x3c>
			m.param = instance;
   16b54:	4b0b      	ldr	r3, [pc, #44]	; (16b84 <hal_ticker_instance0_sched+0xa0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16b56:	2101      	movs	r1, #1
			m.param = instance;
   16b58:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16b5a:	2003      	movs	r0, #3
   16b5c:	e7d1      	b.n	16b02 <hal_ticker_instance0_sched+0x1e>
   16b5e:	bf00      	nop
   16b60:	200089e8 	.word	0x200089e8
   16b64:	200089f8 	.word	0x200089f8
   16b68:	0001868d 	.word	0x0001868d
   16b6c:	00019a84 	.word	0x00019a84
   16b70:	0001c5ab 	.word	0x0001c5ab
   16b74:	00019a8b 	.word	0x00019a8b
   16b78:	000197a5 	.word	0x000197a5
   16b7c:	20008a08 	.word	0x20008a08
   16b80:	20008a18 	.word	0x20008a18
   16b84:	20008a28 	.word	0x20008a28

00016b88 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
   16b88:	4601      	mov	r1, r0
   16b8a:	2000      	movs	r0, #0
   16b8c:	f7ff b98c 	b.w	15ea8 <cntr_cmp_set>

00016b90 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
   16b90:	4770      	bx	lr
	...

00016b94 <net_buf_pool_get>:
}
   16b94:	4b01      	ldr	r3, [pc, #4]	; (16b9c <net_buf_pool_get+0x8>)
   16b96:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   16b9a:	4770      	bx	lr
   16b9c:	20008b34 	.word	0x20008b34

00016ba0 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16ba0:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   16ba2:	4b04      	ldr	r3, [pc, #16]	; (16bb4 <net_buf_id+0x14>)
   16ba4:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   16ba8:	69db      	ldr	r3, [r3, #28]
   16baa:	1ac0      	subs	r0, r0, r3
}
   16bac:	4b02      	ldr	r3, [pc, #8]	; (16bb8 <net_buf_id+0x18>)
	return buf - pool->__bufs;
   16bae:	10c0      	asrs	r0, r0, #3
}
   16bb0:	4358      	muls	r0, r3
   16bb2:	4770      	bx	lr
   16bb4:	20008b34 	.word	0x20008b34
   16bb8:	aaaaaaab 	.word	0xaaaaaaab

00016bbc <fixed_data_alloc>:
{
   16bbc:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16bbe:	4b09      	ldr	r3, [pc, #36]	; (16be4 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16bc0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16bc2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
   16bc6:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16bc8:	699b      	ldr	r3, [r3, #24]
   16bca:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
   16bcc:	6823      	ldr	r3, [r4, #0]
   16bce:	429a      	cmp	r2, r3
   16bd0:	bf94      	ite	ls
   16bd2:	600a      	strls	r2, [r1, #0]
   16bd4:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   16bd6:	f7ff ffe3 	bl	16ba0 <net_buf_id>
   16bda:	e894 000c 	ldmia.w	r4, {r2, r3}
}
   16bde:	fb02 3000 	mla	r0, r2, r0, r3
   16be2:	bd10      	pop	{r4, pc}
   16be4:	20008b34 	.word	0x20008b34

00016be8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
   16be8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16bec:	4605      	mov	r5, r0
   16bee:	9101      	str	r1, [sp, #4]
   16bf0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
   16bf2:	f000 fdb9 	bl	17768 <_impl_k_uptime_get_32>
   16bf6:	4607      	mov	r7, r0
	__asm__ volatile(
   16bf8:	f04f 0320 	mov.w	r3, #32
   16bfc:	f3ef 8811 	mrs	r8, BASEPRI
   16c00:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16c04:	8a6b      	ldrh	r3, [r5, #18]
   16c06:	2b00      	cmp	r3, #0
   16c08:	d03d      	beq.n	16c86 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   16c0a:	8a2a      	ldrh	r2, [r5, #16]
   16c0c:	429a      	cmp	r2, r3
   16c0e:	d92a      	bls.n	16c66 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   16c10:	2100      	movs	r1, #0
   16c12:	4628      	mov	r0, r5
   16c14:	f000 fb03 	bl	1721e <k_queue_get>
			if (buf) {
   16c18:	4604      	mov	r4, r0
   16c1a:	b320      	cbz	r0, 16c66 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   16c1c:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16c20:	9b01      	ldr	r3, [sp, #4]
   16c22:	2b00      	cmp	r3, #0
   16c24:	d03c      	beq.n	16ca0 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
   16c26:	1c73      	adds	r3, r6, #1
   16c28:	2b01      	cmp	r3, #1
   16c2a:	d906      	bls.n	16c3a <net_buf_alloc_len+0x52>
   16c2c:	f000 fd9c 	bl	17768 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
   16c30:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
   16c32:	42b0      	cmp	r0, r6
   16c34:	bf94      	ite	ls
   16c36:	1a36      	subls	r6, r6, r0
   16c38:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16c3a:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16c3c:	4f1e      	ldr	r7, [pc, #120]	; (16cb8 <net_buf_alloc_len+0xd0>)
   16c3e:	eb07 1343 	add.w	r3, r7, r3, lsl #5
   16c42:	4632      	mov	r2, r6
   16c44:	699b      	ldr	r3, [r3, #24]
   16c46:	681b      	ldr	r3, [r3, #0]
   16c48:	a901      	add	r1, sp, #4
   16c4a:	681b      	ldr	r3, [r3, #0]
   16c4c:	4620      	mov	r0, r4
   16c4e:	4798      	blx	r3
   16c50:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16c52:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16c54:	bb28      	cbnz	r0, 16ca2 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   16c56:	79a0      	ldrb	r0, [r4, #6]
   16c58:	4621      	mov	r1, r4
   16c5a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   16c5e:	f000 fabe 	bl	171de <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16c62:	462c      	mov	r4, r5
   16c64:	e018      	b.n	16c98 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
   16c66:	8a6b      	ldrh	r3, [r5, #18]
   16c68:	1e5a      	subs	r2, r3, #1
   16c6a:	826a      	strh	r2, [r5, #18]
   16c6c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   16c70:	8a2c      	ldrh	r4, [r5, #16]
   16c72:	1ae4      	subs	r4, r4, r3
   16c74:	69eb      	ldr	r3, [r5, #28]
   16c76:	2218      	movs	r2, #24
   16c78:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   16c7c:	4b0e      	ldr	r3, [pc, #56]	; (16cb8 <net_buf_alloc_len+0xd0>)
   16c7e:	1aed      	subs	r5, r5, r3
   16c80:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
   16c82:	71a5      	strb	r5, [r4, #6]
		goto success;
   16c84:	e7cc      	b.n	16c20 <net_buf_alloc_len+0x38>
   16c86:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
   16c8a:	4631      	mov	r1, r6
   16c8c:	4628      	mov	r0, r5
   16c8e:	f000 fac6 	bl	1721e <k_queue_get>
	if (!buf) {
   16c92:	4604      	mov	r4, r0
   16c94:	2800      	cmp	r0, #0
   16c96:	d1c3      	bne.n	16c20 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   16c98:	4620      	mov	r0, r4
   16c9a:	b002      	add	sp, #8
   16c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
   16ca0:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
   16ca2:	2301      	movs	r3, #1
   16ca4:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   16ca6:	2300      	movs	r3, #0
	buf->frags = NULL;
   16ca8:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
   16caa:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
   16cac:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
   16cae:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   16cb0:	6923      	ldr	r3, [r4, #16]
   16cb2:	81e2      	strh	r2, [r4, #14]
   16cb4:	60a3      	str	r3, [r4, #8]
	return buf;
   16cb6:	e7ef      	b.n	16c98 <net_buf_alloc_len+0xb0>
   16cb8:	20008b34 	.word	0x20008b34

00016cbc <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16cbc:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   16cbe:	685b      	ldr	r3, [r3, #4]
   16cc0:	460a      	mov	r2, r1
   16cc2:	6819      	ldr	r1, [r3, #0]
   16cc4:	f7ff bf90 	b.w	16be8 <net_buf_alloc_len>

00016cc8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   16cc8:	b570      	push	{r4, r5, r6, lr}
   16cca:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   16ccc:	f000 faa7 	bl	1721e <k_queue_get>
	if (!buf) {
   16cd0:	4605      	mov	r5, r0
   16cd2:	b128      	cbz	r0, 16ce0 <net_buf_get+0x18>
   16cd4:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   16cd6:	7963      	ldrb	r3, [r4, #5]
   16cd8:	f013 0301 	ands.w	r3, r3, #1
   16cdc:	d102      	bne.n	16ce4 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   16cde:	6023      	str	r3, [r4, #0]

	return buf;
}
   16ce0:	4628      	mov	r0, r5
   16ce2:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   16ce4:	2100      	movs	r1, #0
   16ce6:	4630      	mov	r0, r6
   16ce8:	f000 fa99 	bl	1721e <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   16cec:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   16cee:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   16cf0:	f023 0301 	bic.w	r3, r3, #1
   16cf4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   16cf6:	4604      	mov	r4, r0
   16cf8:	e7ed      	b.n	16cd6 <net_buf_get+0xe>

00016cfa <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   16cfa:	6883      	ldr	r3, [r0, #8]
   16cfc:	4419      	add	r1, r3
   16cfe:	6001      	str	r1, [r0, #0]
   16d00:	4770      	bx	lr

00016d02 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   16d02:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   16d04:	460a      	mov	r2, r1
   16d06:	6814      	ldr	r4, [r2, #0]
   16d08:	b914      	cbnz	r4, 16d10 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
   16d0a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   16d0c:	f000 ba6b 	b.w	171e6 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   16d10:	7953      	ldrb	r3, [r2, #5]
   16d12:	f043 0301 	orr.w	r3, r3, #1
   16d16:	7153      	strb	r3, [r2, #5]
   16d18:	4622      	mov	r2, r4
   16d1a:	e7f4      	b.n	16d06 <net_buf_put+0x4>

00016d1c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d1e:	4d15      	ldr	r5, [pc, #84]	; (16d74 <net_buf_unref+0x58>)
   16d20:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16d22:	2600      	movs	r6, #0
	while (buf) {
   16d24:	b904      	cbnz	r4, 16d28 <net_buf_unref+0xc>
   16d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
   16d28:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16d2a:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
   16d2c:	3b01      	subs	r3, #1
   16d2e:	b2db      	uxtb	r3, r3
   16d30:	7123      	strb	r3, [r4, #4]
   16d32:	2b00      	cmp	r3, #0
   16d34:	d1f7      	bne.n	16d26 <net_buf_unref+0xa>
		if (buf->__buf) {
   16d36:	6921      	ldr	r1, [r4, #16]
   16d38:	b159      	cbz	r1, 16d52 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16d3a:	7963      	ldrb	r3, [r4, #5]
   16d3c:	079b      	lsls	r3, r3, #30
   16d3e:	d407      	bmi.n	16d50 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16d40:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   16d42:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   16d46:	4620      	mov	r0, r4
   16d48:	699b      	ldr	r3, [r3, #24]
   16d4a:	681b      	ldr	r3, [r3, #0]
   16d4c:	689b      	ldr	r3, [r3, #8]
   16d4e:	4798      	blx	r3
			buf->__buf = NULL;
   16d50:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   16d52:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16d54:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   16d56:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
   16d5a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16d5c:	695b      	ldr	r3, [r3, #20]
   16d5e:	b11b      	cbz	r3, 16d68 <net_buf_unref+0x4c>
			pool->destroy(buf);
   16d60:	4620      	mov	r0, r4
   16d62:	4798      	blx	r3
{
   16d64:	463c      	mov	r4, r7
   16d66:	e7dd      	b.n	16d24 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
   16d68:	4621      	mov	r1, r4
   16d6a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
   16d6e:	f000 fa36 	bl	171de <k_queue_prepend>
   16d72:	e7f7      	b.n	16d64 <net_buf_unref+0x48>
   16d74:	20008b34 	.word	0x20008b34

00016d78 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   16d78:	7903      	ldrb	r3, [r0, #4]
   16d7a:	3301      	adds	r3, #1
   16d7c:	7103      	strb	r3, [r0, #4]
	return buf;
}
   16d7e:	4770      	bx	lr

00016d80 <net_buf_simple_add>:
	return buf->data + buf->len;
   16d80:	8883      	ldrh	r3, [r0, #4]
   16d82:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   16d84:	4419      	add	r1, r3
   16d86:	8081      	strh	r1, [r0, #4]
	return tail;
}
   16d88:	18d0      	adds	r0, r2, r3
   16d8a:	4770      	bx	lr

00016d8c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   16d8c:	b430      	push	{r4, r5}
   16d8e:	8883      	ldrh	r3, [r0, #4]
   16d90:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   16d92:	189d      	adds	r5, r3, r2
   16d94:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   16d96:	18e0      	adds	r0, r4, r3
}
   16d98:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   16d9a:	f7e9 bc35 	b.w	608 <memcpy>

00016d9e <net_buf_simple_add_u8>:
   16d9e:	8883      	ldrh	r3, [r0, #4]
   16da0:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   16da2:	b510      	push	{r4, lr}
	buf->len += len;
   16da4:	1c5c      	adds	r4, r3, #1
   16da6:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   16da8:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   16daa:	18d0      	adds	r0, r2, r3
   16dac:	bd10      	pop	{r4, pc}

00016dae <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   16dae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16db0:	ab02      	add	r3, sp, #8
   16db2:	8884      	ldrh	r4, [r0, #4]
   16db4:	f823 1d02 	strh.w	r1, [r3, #-2]!
   16db8:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   16dba:	1ca2      	adds	r2, r4, #2
   16dbc:	8082      	strh	r2, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   16dbe:	4619      	mov	r1, r3
   16dc0:	2202      	movs	r2, #2
   16dc2:	1928      	adds	r0, r5, r4
   16dc4:	f7e9 fc20 	bl	608 <memcpy>
}
   16dc8:	b003      	add	sp, #12
   16dca:	bd30      	pop	{r4, r5, pc}

00016dcc <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   16dcc:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   16dce:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   16dd0:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   16dd2:	4411      	add	r1, r2
	buf->data -= len;
   16dd4:	6003      	str	r3, [r0, #0]
	buf->len += len;
   16dd6:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   16dd8:	4618      	mov	r0, r3
   16dda:	4770      	bx	lr

00016ddc <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   16ddc:	8883      	ldrh	r3, [r0, #4]
   16dde:	1a5b      	subs	r3, r3, r1
   16de0:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   16de2:	6803      	ldr	r3, [r0, #0]
   16de4:	4419      	add	r1, r3
   16de6:	6001      	str	r1, [r0, #0]
}
   16de8:	4608      	mov	r0, r1
   16dea:	4770      	bx	lr

00016dec <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   16dec:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
   16dee:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   16df0:	2101      	movs	r1, #1
	val = buf->data[0];
   16df2:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   16df4:	f7ff fff2 	bl	16ddc <net_buf_simple_pull>

	return val;
}
   16df8:	4610      	mov	r0, r2
   16dfa:	bd08      	pop	{r3, pc}

00016dfc <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   16dfc:	b508      	push	{r3, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   16dfe:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   16e00:	2102      	movs	r1, #2
	val = UNALIGNED_GET((u16_t *)buf->data);
   16e02:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   16e04:	f7ff ffea 	bl	16ddc <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   16e08:	4610      	mov	r0, r2
   16e0a:	bd08      	pop	{r3, pc}

00016e0c <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   16e0c:	6802      	ldr	r2, [r0, #0]
   16e0e:	6880      	ldr	r0, [r0, #8]
}
   16e10:	1a10      	subs	r0, r2, r0
   16e12:	4770      	bx	lr

00016e14 <net_buf_simple_tailroom>:
	return buf->data - buf->__buf;
   16e14:	6802      	ldr	r2, [r0, #0]
   16e16:	6881      	ldr	r1, [r0, #8]

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   16e18:	88c3      	ldrh	r3, [r0, #6]
   16e1a:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
   16e1c:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   16e1e:	1a9b      	subs	r3, r3, r2
}
   16e20:	1a18      	subs	r0, r3, r0
   16e22:	4770      	bx	lr

00016e24 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   16e24:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   16e26:	4b08      	ldr	r3, [pc, #32]	; (16e48 <_sys_device_do_config_level+0x24>)
   16e28:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   16e2c:	3001      	adds	r0, #1
   16e2e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   16e32:	4620      	mov	r0, r4
   16e34:	42a8      	cmp	r0, r5
   16e36:	f104 040c 	add.w	r4, r4, #12
   16e3a:	d300      	bcc.n	16e3e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
   16e3c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
   16e3e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   16e42:	685b      	ldr	r3, [r3, #4]
   16e44:	4798      	blx	r3
   16e46:	e7f4      	b.n	16e32 <_sys_device_do_config_level+0xe>
   16e48:	0001c648 	.word	0x0001c648

00016e4c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
   16e4c:	4b10      	ldr	r3, [pc, #64]	; (16e90 <device_get_binding+0x44>)
{
   16e4e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
   16e50:	4c10      	ldr	r4, [pc, #64]	; (16e94 <device_get_binding+0x48>)
{
   16e52:	4605      	mov	r5, r0
   16e54:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
   16e56:	429c      	cmp	r4, r3
   16e58:	d104      	bne.n	16e64 <device_get_binding+0x18>
   16e5a:	4c0e      	ldr	r4, [pc, #56]	; (16e94 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
   16e5c:	42b4      	cmp	r4, r6
   16e5e:	d109      	bne.n	16e74 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
   16e60:	2400      	movs	r4, #0
   16e62:	e012      	b.n	16e8a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
   16e64:	6862      	ldr	r2, [r4, #4]
   16e66:	b11a      	cbz	r2, 16e70 <device_get_binding+0x24>
   16e68:	6822      	ldr	r2, [r4, #0]
   16e6a:	6812      	ldr	r2, [r2, #0]
   16e6c:	42aa      	cmp	r2, r5
   16e6e:	d00c      	beq.n	16e8a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
   16e70:	340c      	adds	r4, #12
   16e72:	e7f0      	b.n	16e56 <device_get_binding+0xa>
		if (!info->driver_api) {
   16e74:	6863      	ldr	r3, [r4, #4]
   16e76:	b90b      	cbnz	r3, 16e7c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
   16e78:	340c      	adds	r4, #12
   16e7a:	e7ef      	b.n	16e5c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
   16e7c:	6823      	ldr	r3, [r4, #0]
   16e7e:	4628      	mov	r0, r5
   16e80:	6819      	ldr	r1, [r3, #0]
   16e82:	f7e9 fb9f 	bl	5c4 <strcmp>
   16e86:	2800      	cmp	r0, #0
   16e88:	d1f6      	bne.n	16e78 <device_get_binding+0x2c>
}
   16e8a:	4620      	mov	r0, r4
   16e8c:	bd70      	pop	{r4, r5, r6, pc}
   16e8e:	bf00      	nop
   16e90:	20008ad8 	.word	0x20008ad8
   16e94:	20008a48 	.word	0x20008a48

00016e98 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   16e98:	1c43      	adds	r3, r0, #1
   16e9a:	d003      	beq.n	16ea4 <_sys_power_save_idle_exit+0xc>
   16e9c:	4b03      	ldr	r3, [pc, #12]	; (16eac <_sys_power_save_idle_exit+0x14>)
   16e9e:	681b      	ldr	r3, [r3, #0]
   16ea0:	4298      	cmp	r0, r3
   16ea2:	db01      	blt.n	16ea8 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   16ea4:	f7eb bbb4 	b.w	2610 <_timer_idle_exit>
   16ea8:	4770      	bx	lr
   16eaa:	bf00      	nop
   16eac:	20008a38 	.word	0x20008a38

00016eb0 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   16eb0:	4d0f      	ldr	r5, [pc, #60]	; (16ef0 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   16eb2:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
   16eb4:	4f0f      	ldr	r7, [pc, #60]	; (16ef4 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16eb6:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
   16eba:	f04f 0220 	mov.w	r2, #32
   16ebe:	f3ef 8311 	mrs	r3, BASEPRI
   16ec2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   16ec6:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16ec8:	42b3      	cmp	r3, r6
   16eca:	d00a      	beq.n	16ee2 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   16ecc:	b14b      	cbz	r3, 16ee2 <idle+0x32>
   16ece:	691c      	ldr	r4, [r3, #16]
   16ed0:	1c63      	adds	r3, r4, #1
   16ed2:	d008      	beq.n	16ee6 <idle+0x36>
   16ed4:	683b      	ldr	r3, [r7, #0]
   16ed6:	42a3      	cmp	r3, r4
   16ed8:	dd05      	ble.n	16ee6 <idle+0x36>
	_kernel.idle = ticks;
   16eda:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
   16edc:	f7ea f92e 	bl	113c <k_cpu_idle>
   16ee0:	e7eb      	b.n	16eba <idle+0xa>
   16ee2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
   16ee6:	4620      	mov	r0, r4
   16ee8:	f7eb fb7e 	bl	25e8 <_timer_idle_enter>
   16eec:	e7f5      	b.n	16eda <idle+0x2a>
   16eee:	bf00      	nop
   16ef0:	20003f38 	.word	0x20003f38
   16ef4:	20008a38 	.word	0x20008a38

00016ef8 <k_call_stacks_analyze>:
	STACK_ANALYZE("idle     ", _idle_stack);
	STACK_ANALYZE("interrupt", _interrupt_stack);
	STACK_ANALYZE("workqueue", sys_work_q_stack);
}
#else
void k_call_stacks_analyze(void) { }
   16ef8:	4770      	bx	lr
	...

00016efc <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
   16efc:	4802      	ldr	r0, [pc, #8]	; (16f08 <_bss_zero+0xc>)
   16efe:	4a03      	ldr	r2, [pc, #12]	; (16f0c <_bss_zero+0x10>)
   16f00:	2100      	movs	r1, #0
   16f02:	1a12      	subs	r2, r2, r0
   16f04:	f7e9 bbac 	b.w	660 <memset>
   16f08:	20000000 	.word	0x20000000
   16f0c:	200054e8 	.word	0x200054e8

00016f10 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
   16f10:	4802      	ldr	r0, [pc, #8]	; (16f1c <_data_copy+0xc>)
   16f12:	4a03      	ldr	r2, [pc, #12]	; (16f20 <_data_copy+0x10>)
   16f14:	4903      	ldr	r1, [pc, #12]	; (16f24 <_data_copy+0x14>)
   16f16:	1a12      	subs	r2, r2, r0
   16f18:	f7e9 bb76 	b.w	608 <memcpy>
   16f1c:	200085a8 	.word	0x200085a8
   16f20:	20008bb4 	.word	0x20008bb4
   16f24:	0001c6b0 	.word	0x0001c6b0

00016f28 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   16f28:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16f2a:	2002      	movs	r0, #2
   16f2c:	f7ff ff7a 	bl	16e24 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
   16f30:	4908      	ldr	r1, [pc, #32]	; (16f54 <bg_thread_main+0x2c>)
   16f32:	4809      	ldr	r0, [pc, #36]	; (16f58 <bg_thread_main+0x30>)
   16f34:	f7ea fbd4 	bl	16e0 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   16f38:	2003      	movs	r0, #3
   16f3a:	f7ff ff73 	bl	16e24 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
   16f3e:	f000 fe15 	bl	17b6c <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
   16f42:	f7e9 fdbf 	bl	ac4 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   16f46:	4a05      	ldr	r2, [pc, #20]	; (16f5c <bg_thread_main+0x34>)
   16f48:	7a13      	ldrb	r3, [r2, #8]
   16f4a:	f023 0301 	bic.w	r3, r3, #1
   16f4e:	7213      	strb	r3, [r2, #8]
   16f50:	bd08      	pop	{r3, pc}
   16f52:	bf00      	nop
   16f54:	0001c664 	.word	0x0001c664
   16f58:	0001c680 	.word	0x0001c680
   16f5c:	20003ed0 	.word	0x20003ed0

00016f60 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   16f60:	b580      	push	{r7, lr}
   16f62:	b086      	sub	sp, #24
   16f64:	4e32      	ldr	r6, [pc, #200]	; (17030 <_Cstart+0xd0>)
   16f66:	af06      	add	r7, sp, #24
	_IntLibInit();
   16f68:	f7e9 fea2 	bl	cb0 <_IntLibInit>
   16f6c:	2324      	movs	r3, #36	; 0x24
   16f6e:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
   16f70:	519a      	str	r2, [r3, r6]
   16f72:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   16f74:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
   16f78:	6052      	str	r2, [r2, #4]
   16f7a:	d1f8      	bne.n	16f6e <_Cstart+0xe>
	_ready_q.cache = _main_thread;
   16f7c:	4d2d      	ldr	r5, [pc, #180]	; (17034 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
   16f7e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1705c <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
   16f82:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
   16f84:	2400      	movs	r4, #0
   16f86:	f04f 0901 	mov.w	r9, #1
   16f8a:	4643      	mov	r3, r8
   16f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16f90:	4929      	ldr	r1, [pc, #164]	; (17038 <_Cstart+0xd8>)
   16f92:	f8cd 9010 	str.w	r9, [sp, #16]
   16f96:	4628      	mov	r0, r5
   16f98:	9403      	str	r4, [sp, #12]
   16f9a:	9402      	str	r4, [sp, #8]
   16f9c:	9401      	str	r4, [sp, #4]
   16f9e:	9400      	str	r4, [sp, #0]
   16fa0:	f000 fd9c 	bl	17adc <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16fa4:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   16fa6:	4628      	mov	r0, r5
   16fa8:	f023 0304 	bic.w	r3, r3, #4
   16fac:	726b      	strb	r3, [r5, #9]
   16fae:	f000 f97d 	bl	172ac <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
   16fb2:	230f      	movs	r3, #15
   16fb4:	9303      	str	r3, [sp, #12]
   16fb6:	4921      	ldr	r1, [pc, #132]	; (1703c <_Cstart+0xdc>)
   16fb8:	f8cd 9010 	str.w	r9, [sp, #16]
   16fbc:	9402      	str	r4, [sp, #8]
   16fbe:	9401      	str	r4, [sp, #4]
   16fc0:	9400      	str	r4, [sp, #0]
   16fc2:	4b1f      	ldr	r3, [pc, #124]	; (17040 <_Cstart+0xe0>)
   16fc4:	481f      	ldr	r0, [pc, #124]	; (17044 <_Cstart+0xe4>)
   16fc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16fca:	f000 fd87 	bl	17adc <_setup_new_thread>
   16fce:	4b1d      	ldr	r3, [pc, #116]	; (17044 <_Cstart+0xe4>)
   16fd0:	4a1c      	ldr	r2, [pc, #112]	; (17044 <_Cstart+0xe4>)
   16fd2:	7a5b      	ldrb	r3, [r3, #9]
   16fd4:	f023 0304 	bic.w	r3, r3, #4
   16fd8:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
   16fda:	4610      	mov	r0, r2
   16fdc:	f000 f966 	bl	172ac <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   16fe0:	4b19      	ldr	r3, [pc, #100]	; (17048 <_Cstart+0xe8>)
   16fe2:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
   16fe4:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   16fe6:	4b19      	ldr	r3, [pc, #100]	; (1704c <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16fe8:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16fec:	4b18      	ldr	r3, [pc, #96]	; (17050 <_Cstart+0xf0>)
   16fee:	22e0      	movs	r2, #224	; 0xe0
   16ff0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   16ff4:	77dc      	strb	r4, [r3, #31]
   16ff6:	761c      	strb	r4, [r3, #24]
   16ff8:	765c      	strb	r4, [r3, #25]
   16ffa:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   16ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16ffe:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   17002:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
   17004:	f7ea f80a 	bl	101c <_FaultInit>
	_CpuIdleInit();
   17008:	f7ea f892 	bl	1130 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1700c:	4620      	mov	r0, r4
   1700e:	f7ff ff09 	bl	16e24 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17012:	4648      	mov	r0, r9
   17014:	f7ff ff06 	bl	16e24 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   17018:	4b0e      	ldr	r3, [pc, #56]	; (17054 <_Cstart+0xf4>)

	_current = main_thread;
   1701a:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   1701c:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   17020:	4a0d      	ldr	r2, [pc, #52]	; (17058 <_Cstart+0xf8>)
   17022:	f383 8809 	msr	PSP, r3
   17026:	2100      	movs	r1, #0
   17028:	f381 8811 	msr	BASEPRI, r1
   1702c:	4640      	mov	r0, r8
   1702e:	4710      	bx	r2
   17030:	20003f38 	.word	0x20003f38
   17034:	20003ed0 	.word	0x20003ed0
   17038:	20007468 	.word	0x20007468
   1703c:	20007868 	.word	0x20007868
   17040:	00016eb1 	.word	0x00016eb1
   17044:	20003e68 	.word	0x20003e68
   17048:	20003f48 	.word	0x20003f48
   1704c:	200081a8 	.word	0x200081a8
   17050:	e000ed00 	.word	0xe000ed00
   17054:	20007868 	.word	0x20007868
   17058:	00017a75 	.word	0x00017a75
   1705c:	00016f29 	.word	0x00016f29

00017060 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
   17060:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
   17062:	7ac4      	ldrb	r4, [r0, #11]
   17064:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
   17066:	428c      	cmp	r4, r1
   17068:	f04f 040c 	mov.w	r4, #12
   1706c:	bfb6      	itet	lt
   1706e:	4361      	mullt	r1, r4
   17070:	fb04 0101 	mlage	r1, r4, r1, r0
   17074:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
   17076:	2420      	movs	r4, #32
   17078:	fb92 f4f4 	sdiv	r4, r2, r4
   1707c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   17080:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
   17082:	f002 001f 	and.w	r0, r2, #31
   17086:	bd10      	pop	{r4, pc}

00017088 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
   17088:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
   1708a:	ab01      	add	r3, sp, #4
   1708c:	f7ff ffe8 	bl	17060 <get_bit_ptr>

	*word |= (1<<bit);
   17090:	9a01      	ldr	r2, [sp, #4]
   17092:	2301      	movs	r3, #1
   17094:	fa03 f000 	lsl.w	r0, r3, r0
   17098:	6813      	ldr	r3, [r2, #0]
   1709a:	4303      	orrs	r3, r0
   1709c:	6013      	str	r3, [r2, #0]
}
   1709e:	b003      	add	sp, #12
   170a0:	f85d fb04 	ldr.w	pc, [sp], #4

000170a4 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
   170a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170a8:	4c30      	ldr	r4, [pc, #192]	; (1716c <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   170aa:	4e31      	ldr	r6, [pc, #196]	; (17170 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
   170ac:	270c      	movs	r7, #12
   170ae:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
   170b2:	42b5      	cmp	r5, r6
   170b4:	d302      	bcc.n	170bc <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
   170b6:	2000      	movs	r0, #0
   170b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   170bc:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   170c0:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
   170c4:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
   170c8:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
   170ca:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
   170ce:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
   170d0:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
   170d2:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
   170d4:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
   170d8:	f814 2c06 	ldrb.w	r2, [r4, #-6]
   170dc:	4291      	cmp	r1, r2
   170de:	db07      	blt.n	170f0 <init_static_pools+0x4c>
   170e0:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
   170e4:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   170e8:	4598      	cmp	r8, r3
   170ea:	db24      	blt.n	17136 <init_static_pools+0x92>
   170ec:	3418      	adds	r4, #24
   170ee:	e7de      	b.n	170ae <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
   170f0:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
   170f4:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
   170f8:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
   170fc:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
   170fe:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
   17102:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
   17106:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
   1710a:	bfc8      	it	gt
   1710c:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
   1710e:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
   17112:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
   17116:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
   1711a:	bfca      	itet	gt
   1711c:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
   17120:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
   17124:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
   17128:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
   1712c:	bfc8      	it	gt
   1712e:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
   17132:	3101      	adds	r1, #1
   17134:	e7d0      	b.n	170d8 <init_static_pools+0x34>
	return p->buf + lsz * block;
   17136:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
   1713a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
   1713e:	f854 0c10 	ldr.w	r0, [r4, #-16]
   17142:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
   17146:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
   1714a:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
   1714e:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
   17150:	689a      	ldr	r2, [r3, #8]
   17152:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
   17154:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
   17156:	4628      	mov	r0, r5
   17158:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1715a:	6099      	str	r1, [r3, #8]
   1715c:	4642      	mov	r2, r8
   1715e:	2100      	movs	r1, #0
   17160:	f7ff ff92 	bl	17088 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
   17164:	f108 0801 	add.w	r8, r8, #1
   17168:	e7bc      	b.n	170e4 <init_static_pools+0x40>
   1716a:	bf00      	nop
   1716c:	20008b1c 	.word	0x20008b1c
   17170:	20008b0c 	.word	0x20008b0c

00017174 <k_queue_init>:
	list->head = NULL;
   17174:	2300      	movs	r3, #0
   17176:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   17178:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
   1717a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   1717e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   17180:	60c3      	str	r3, [r0, #12]
   17182:	4770      	bx	lr

00017184 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
   17184:	b510      	push	{r4, lr}
   17186:	f04f 0320 	mov.w	r3, #32
   1718a:	f3ef 8411 	mrs	r4, BASEPRI
   1718e:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   17192:	b931      	cbnz	r1, 171a2 <k_queue_insert+0x1e>
	node->next = list->head;
   17194:	6803      	ldr	r3, [r0, #0]
   17196:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   17198:	6843      	ldr	r3, [r0, #4]
	list->head = node;
   1719a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   1719c:	b943      	cbnz	r3, 171b0 <k_queue_insert+0x2c>
		list->tail = node;
   1719e:	6042      	str	r2, [r0, #4]
   171a0:	e006      	b.n	171b0 <k_queue_insert+0x2c>
	} else if (!prev->next) {
   171a2:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
   171a4:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
   171a6:	b98b      	cbnz	r3, 171cc <k_queue_insert+0x48>
	if (!list->tail) {
   171a8:	6843      	ldr	r3, [r0, #4]
   171aa:	b96b      	cbnz	r3, 171c8 <k_queue_insert+0x44>
		list->tail = node;
   171ac:	6042      	str	r2, [r0, #4]
		list->head = node;
   171ae:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   171b0:	2104      	movs	r1, #4
   171b2:	3008      	adds	r0, #8
   171b4:	f001 f848 	bl	18248 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   171b8:	b150      	cbz	r0, 171d0 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
   171ba:	f000 fa23 	bl	17604 <_update_time_slice_before_swap>
	return __swap(key);
   171be:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
   171c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   171c4:	f7e9 bd80 	b.w	cc8 <__swap>
		list->tail->next = node;
   171c8:	601a      	str	r2, [r3, #0]
   171ca:	e7e8      	b.n	1719e <k_queue_insert+0x1a>
		prev->next = node;
   171cc:	600a      	str	r2, [r1, #0]
   171ce:	e7ef      	b.n	171b0 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   171d0:	f384 8811 	msr	BASEPRI, r4
   171d4:	bd10      	pop	{r4, pc}

000171d6 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
   171d6:	460a      	mov	r2, r1
   171d8:	6841      	ldr	r1, [r0, #4]
   171da:	f7ff bfd3 	b.w	17184 <k_queue_insert>

000171de <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
   171de:	460a      	mov	r2, r1
   171e0:	2100      	movs	r1, #0
   171e2:	f7ff bfcf 	b.w	17184 <k_queue_insert>

000171e6 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   171e6:	b510      	push	{r4, lr}
	__asm__ volatile(
   171e8:	f04f 0320 	mov.w	r3, #32
   171ec:	f3ef 8411 	mrs	r4, BASEPRI
   171f0:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   171f4:	6843      	ldr	r3, [r0, #4]
   171f6:	b96b      	cbnz	r3, 17214 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
   171f8:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   171fa:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   171fc:	2104      	movs	r1, #4
   171fe:	3008      	adds	r0, #8
   17200:	f001 f822 	bl	18248 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   17204:	b140      	cbz	r0, 17218 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
   17206:	f000 f9fd 	bl	17604 <_update_time_slice_before_swap>
	return __swap(key);
   1720a:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
   1720c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17210:	f7e9 bd5a 	b.w	cc8 <__swap>
		list->tail->next = (sys_snode_t *)head;
   17214:	6019      	str	r1, [r3, #0]
   17216:	e7f0      	b.n	171fa <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17218:	f384 8811 	msr	BASEPRI, r4
   1721c:	bd10      	pop	{r4, pc}

0001721e <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   1721e:	b530      	push	{r4, r5, lr}
   17220:	4604      	mov	r4, r0
   17222:	b087      	sub	sp, #28
   17224:	460d      	mov	r5, r1
	__asm__ volatile(
   17226:	f04f 0220 	mov.w	r2, #32
   1722a:	f3ef 8311 	mrs	r3, BASEPRI
   1722e:	f382 8811 	msr	BASEPRI, r2
   17232:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   17234:	b152      	cbz	r2, 1724c <k_queue_get+0x2e>
	list->head = node->next;
   17236:	6811      	ldr	r1, [r2, #0]
   17238:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   1723a:	6840      	ldr	r0, [r0, #4]
   1723c:	4282      	cmp	r2, r0
		list->tail = list->head;
   1723e:	bf08      	it	eq
   17240:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17242:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   17246:	4610      	mov	r0, r2
   17248:	b007      	add	sp, #28
   1724a:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
   1724c:	b919      	cbnz	r1, 17256 <k_queue_get+0x38>
   1724e:	f383 8811 	msr	BASEPRI, r3
			return NULL;
   17252:	2200      	movs	r2, #0
   17254:	e7f7      	b.n	17246 <k_queue_get+0x28>
   17256:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   1725a:	2104      	movs	r1, #4
   1725c:	4603      	mov	r3, r0
   1725e:	eb0d 0001 	add.w	r0, sp, r1
   17262:	f000 ff39 	bl	180d8 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
   17266:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   1726a:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
   1726c:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
   17270:	2101      	movs	r1, #1
   17272:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
   17274:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   17278:	f000 ff42 	bl	18100 <k_poll>
		if (err) {
   1727c:	2800      	cmp	r0, #0
   1727e:	d1e8      	bne.n	17252 <k_queue_get+0x34>
	__asm__ volatile(
   17280:	f04f 0320 	mov.w	r3, #32
   17284:	f3ef 8111 	mrs	r1, BASEPRI
   17288:	f383 8811 	msr	BASEPRI, r3
   1728c:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   1728e:	b12a      	cbz	r2, 1729c <k_queue_get+0x7e>
	if (list->tail == node) {
   17290:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
   17292:	6813      	ldr	r3, [r2, #0]
   17294:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
   17296:	4282      	cmp	r2, r0
		list->tail = list->head;
   17298:	bf08      	it	eq
   1729a:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1729c:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
   172a0:	2a00      	cmp	r2, #0
   172a2:	d1d0      	bne.n	17246 <k_queue_get+0x28>
   172a4:	1c6b      	adds	r3, r5, #1
   172a6:	d0de      	beq.n	17266 <k_queue_get+0x48>
   172a8:	e7d3      	b.n	17252 <k_queue_get+0x34>
	...

000172ac <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   172ac:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   172ae:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
   172b2:	4911      	ldr	r1, [pc, #68]	; (172f8 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
   172b4:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
   172b8:	1162      	asrs	r2, r4, #5
   172ba:	3206      	adds	r2, #6
   172bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   172c0:	f004 051f 	and.w	r5, r4, #31
   172c4:	2401      	movs	r4, #1
   172c6:	40ac      	lsls	r4, r5
   172c8:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   172ca:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
   172cc:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
   172ce:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
   172d0:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
   172d2:	1d1a      	adds	r2, r3, #4
   172d4:	440a      	add	r2, r1
	node->prev = list->tail;
   172d6:	440b      	add	r3, r1
	node->next = list;
   172d8:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   172da:	689a      	ldr	r2, [r3, #8]
   172dc:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   172de:	689a      	ldr	r2, [r3, #8]
   172e0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   172e2:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   172e4:	69cb      	ldr	r3, [r1, #28]
   172e6:	f990 400a 	ldrsb.w	r4, [r0, #10]
   172ea:	f993 200a 	ldrsb.w	r2, [r3, #10]
   172ee:	4294      	cmp	r4, r2
   172f0:	bfa8      	it	ge
   172f2:	4618      	movge	r0, r3
   172f4:	61c8      	str	r0, [r1, #28]
   172f6:	bd30      	pop	{r4, r5, pc}
   172f8:	20003f38 	.word	0x20003f38

000172fc <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   172fc:	7a42      	ldrb	r2, [r0, #9]
   172fe:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   17302:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17306:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   17308:	d104      	bne.n	17314 <_ready_thread+0x18>
   1730a:	6a03      	ldr	r3, [r0, #32]
   1730c:	3301      	adds	r3, #1
   1730e:	d101      	bne.n	17314 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
   17310:	f7ff bfcc 	b.w	172ac <_add_thread_to_ready_q>
   17314:	4770      	bx	lr
	...

00017318 <_add_timeout>:
{
   17318:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   1731a:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
   1731c:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1731e:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
   17320:	bb13      	cbnz	r3, 17368 <_add_timeout+0x50>
	__asm__ volatile(
   17322:	f04f 0220 	mov.w	r2, #32
   17326:	f3ef 8411 	mrs	r4, BASEPRI
   1732a:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   1732e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17332:	610a      	str	r2, [r1, #16]
	if (thread) {
   17334:	b180      	cbz	r0, 17358 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
   17336:	68ca      	ldr	r2, [r1, #12]
   17338:	b14a      	cbz	r2, 1734e <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1733a:	e890 0006 	ldmia.w	r0, {r1, r2}
   1733e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   17340:	6801      	ldr	r1, [r0, #0]
   17342:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   17344:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   17346:	61c3      	str	r3, [r0, #28]
   17348:	f022 0202 	bic.w	r2, r2, #2
   1734c:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
   1734e:	f7ff ffd5 	bl	172fc <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17352:	f384 8811 	msr	BASEPRI, r4
   17356:	bd70      	pop	{r4, r5, r6, pc}
   17358:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   1735c:	694b      	ldr	r3, [r1, #20]
   1735e:	b32b      	cbz	r3, 173ac <_add_timeout+0x94>
			timeout->func(timeout);
   17360:	4608      	mov	r0, r1
}
   17362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
   17366:	4718      	bx	r3
	return list->head == list;
   17368:	4a11      	ldr	r2, [pc, #68]	; (173b0 <_add_timeout+0x98>)
   1736a:	4610      	mov	r0, r2
   1736c:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17370:	4283      	cmp	r3, r0
   17372:	d10c      	bne.n	1738e <_add_timeout+0x76>
	node->next = list;
   17374:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   17376:	6953      	ldr	r3, [r2, #20]
   17378:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   1737a:	6953      	ldr	r3, [r2, #20]
   1737c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1737e:	6151      	str	r1, [r2, #20]
   17380:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
   17382:	1b64      	subs	r4, r4, r5
   17384:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
   17386:	6954      	ldr	r4, [r2, #20]
   17388:	42a3      	cmp	r3, r4
   1738a:	d0f3      	beq.n	17374 <_add_timeout+0x5c>
   1738c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   1738e:	2b00      	cmp	r3, #0
   17390:	d0f0      	beq.n	17374 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
   17392:	690c      	ldr	r4, [r1, #16]
   17394:	691d      	ldr	r5, [r3, #16]
   17396:	42ac      	cmp	r4, r5
   17398:	dcf3      	bgt.n	17382 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
   1739a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   1739c:	1b2c      	subs	r4, r5, r4
   1739e:	611c      	str	r4, [r3, #16]
   173a0:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   173a2:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   173a4:	685a      	ldr	r2, [r3, #4]
   173a6:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   173a8:	6059      	str	r1, [r3, #4]
   173aa:	bd70      	pop	{r4, r5, r6, pc}
   173ac:	bd70      	pop	{r4, r5, r6, pc}
   173ae:	bf00      	nop
   173b0:	20003f38 	.word	0x20003f38

000173b4 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
   173b4:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   173b8:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
   173ba:	f990 200a 	ldrsb.w	r2, [r0, #10]
   173be:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
   173c0:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
   173c2:	3214      	adds	r2, #20
   173c4:	604b      	str	r3, [r1, #4]
   173c6:	4b14      	ldr	r3, [pc, #80]	; (17418 <_remove_thread_from_ready_q+0x64>)
   173c8:	00d2      	lsls	r2, r2, #3
   173ca:	1d11      	adds	r1, r2, #4
	return list->head == list;
   173cc:	441a      	add	r2, r3
   173ce:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   173d0:	6852      	ldr	r2, [r2, #4]
   173d2:	428a      	cmp	r2, r1
   173d4:	d10f      	bne.n	173f6 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
   173d6:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
   173da:	3110      	adds	r1, #16
   173dc:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
   173de:	3206      	adds	r2, #6
   173e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   173e4:	2401      	movs	r4, #1
   173e6:	f001 011f 	and.w	r1, r1, #31
   173ea:	fa04 f101 	lsl.w	r1, r4, r1
   173ee:	6894      	ldr	r4, [r2, #8]
   173f0:	ea24 0401 	bic.w	r4, r4, r1
   173f4:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
   173f6:	69da      	ldr	r2, [r3, #28]
   173f8:	4290      	cmp	r0, r2
   173fa:	d10b      	bne.n	17414 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
   173fc:	6a19      	ldr	r1, [r3, #32]
   173fe:	fa91 f2a1 	rbit	r2, r1
   17402:	2900      	cmp	r1, #0
   17404:	fab2 f282 	clz	r2, r2
   17408:	bf08      	it	eq
   1740a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1740e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   17412:	6a52      	ldr	r2, [r2, #36]	; 0x24
   17414:	61da      	str	r2, [r3, #28]
   17416:	bd10      	pop	{r4, pc}
   17418:	20003f38 	.word	0x20003f38

0001741c <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   1741c:	b430      	push	{r4, r5}
   1741e:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   17420:	42a1      	cmp	r1, r4
   17422:	bf08      	it	eq
   17424:	2400      	moveq	r4, #0
   17426:	b314      	cbz	r4, 1746e <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   17428:	f990 500a 	ldrsb.w	r5, [r0, #10]
   1742c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   17430:	429d      	cmp	r5, r3
   17432:	da16      	bge.n	17462 <_pend_thread+0x46>
		node->prev = insert_point->prev;
   17434:	6863      	ldr	r3, [r4, #4]
   17436:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
   17438:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
   1743a:	6863      	ldr	r3, [r4, #4]
   1743c:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
   1743e:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   17440:	7a43      	ldrb	r3, [r0, #9]
   17442:	f043 0302 	orr.w	r3, r3, #2
   17446:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   17448:	1c53      	adds	r3, r2, #1
   1744a:	d017      	beq.n	1747c <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   1744c:	3209      	adds	r2, #9
   1744e:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
   17450:	bc30      	pop	{r4, r5}
   17452:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   17456:	460a      	mov	r2, r1
   17458:	3301      	adds	r3, #1
   1745a:	f100 0110 	add.w	r1, r0, #16
   1745e:	f7ff bf5b 	b.w	17318 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
   17462:	684b      	ldr	r3, [r1, #4]
   17464:	429c      	cmp	r4, r3
   17466:	d002      	beq.n	1746e <_pend_thread+0x52>
   17468:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   1746a:	2c00      	cmp	r4, #0
   1746c:	d1db      	bne.n	17426 <_pend_thread+0xa>
	node->next = list;
   1746e:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   17470:	684b      	ldr	r3, [r1, #4]
   17472:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   17474:	684b      	ldr	r3, [r1, #4]
   17476:	6018      	str	r0, [r3, #0]
	list->tail = node;
   17478:	6048      	str	r0, [r1, #4]
   1747a:	e7e1      	b.n	17440 <_pend_thread+0x24>
}
   1747c:	bc30      	pop	{r4, r5}
   1747e:	4770      	bx	lr

00017480 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   17480:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
   17482:	4c06      	ldr	r4, [pc, #24]	; (1749c <_pend_current_thread+0x1c>)
{
   17484:	460e      	mov	r6, r1
   17486:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
   17488:	68a0      	ldr	r0, [r4, #8]
   1748a:	f7ff ff93 	bl	173b4 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   1748e:	4632      	mov	r2, r6
   17490:	4629      	mov	r1, r5
   17492:	68a0      	ldr	r0, [r4, #8]
}
   17494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
   17498:	f7ff bfc0 	b.w	1741c <_pend_thread>
   1749c:	20003f38 	.word	0x20003f38

000174a0 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   174a0:	4a09      	ldr	r2, [pc, #36]	; (174c8 <__must_switch_threads+0x28>)
   174a2:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   174a4:	6892      	ldr	r2, [r2, #8]
   174a6:	2900      	cmp	r1, #0
   174a8:	fa91 f3a1 	rbit	r3, r1
   174ac:	f992 000a 	ldrsb.w	r0, [r2, #10]
   174b0:	fab3 f383 	clz	r3, r3
   174b4:	bf08      	it	eq
   174b6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   174ba:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
   174bc:	4298      	cmp	r0, r3
   174be:	bfd4      	ite	le
   174c0:	2000      	movle	r0, #0
   174c2:	2001      	movgt	r0, #1
   174c4:	4770      	bx	lr
   174c6:	bf00      	nop
   174c8:	20003f38 	.word	0x20003f38

000174cc <_reschedule_threads>:
{
   174cc:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
   174ce:	4b0a      	ldr	r3, [pc, #40]	; (174f8 <_reschedule_threads+0x2c>)
   174d0:	689b      	ldr	r3, [r3, #8]
   174d2:	895b      	ldrh	r3, [r3, #10]
   174d4:	2b7f      	cmp	r3, #127	; 0x7f
   174d6:	4604      	mov	r4, r0
   174d8:	d802      	bhi.n	174e0 <_reschedule_threads+0x14>
   174da:	f7ff ffe1 	bl	174a0 <__must_switch_threads>
   174de:	b910      	cbnz	r0, 174e6 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   174e0:	f384 8811 	msr	BASEPRI, r4
   174e4:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   174e6:	4b05      	ldr	r3, [pc, #20]	; (174fc <_reschedule_threads+0x30>)
   174e8:	2200      	movs	r2, #0
   174ea:	4620      	mov	r0, r4
}
   174ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
   174f0:	601a      	str	r2, [r3, #0]
   174f2:	f7e9 bbe9 	b.w	cc8 <__swap>
   174f6:	bf00      	nop
   174f8:	20003f38 	.word	0x20003f38
   174fc:	20005464 	.word	0x20005464

00017500 <k_sched_unlock>:
	__asm__ volatile(
   17500:	f04f 0320 	mov.w	r3, #32
   17504:	f3ef 8011 	mrs	r0, BASEPRI
   17508:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   1750c:	4b03      	ldr	r3, [pc, #12]	; (1751c <k_sched_unlock+0x1c>)
   1750e:	689a      	ldr	r2, [r3, #8]
   17510:	7ad3      	ldrb	r3, [r2, #11]
   17512:	3301      	adds	r3, #1
   17514:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   17516:	f7ff bfd9 	b.w	174cc <_reschedule_threads>
   1751a:	bf00      	nop
   1751c:	20003f38 	.word	0x20003f38

00017520 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
   17520:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   17524:	4a12      	ldr	r2, [pc, #72]	; (17570 <_move_thread_to_end_of_prio_q+0x50>)
{
   17526:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
   17528:	3314      	adds	r3, #20
   1752a:	00db      	lsls	r3, r3, #3
   1752c:	1d19      	adds	r1, r3, #4
   1752e:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   17530:	684c      	ldr	r4, [r1, #4]
   17532:	42a0      	cmp	r0, r4
   17534:	d01b      	beq.n	1756e <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
   17536:	6844      	ldr	r4, [r0, #4]
   17538:	6805      	ldr	r5, [r0, #0]
   1753a:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
   1753c:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
   1753e:	4413      	add	r3, r2
	node->next->prev = node->prev;
   17540:	606c      	str	r4, [r5, #4]
	node->next = list;
   17542:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   17544:	6899      	ldr	r1, [r3, #8]
   17546:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   17548:	6899      	ldr	r1, [r3, #8]
   1754a:	6008      	str	r0, [r1, #0]
	list->tail = node;
   1754c:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
   1754e:	69d3      	ldr	r3, [r2, #28]
   17550:	4298      	cmp	r0, r3
   17552:	d10b      	bne.n	1756c <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
   17554:	6a11      	ldr	r1, [r2, #32]
   17556:	fa91 f3a1 	rbit	r3, r1
   1755a:	2900      	cmp	r1, #0
   1755c:	fab3 f383 	clz	r3, r3
   17560:	bf08      	it	eq
   17562:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   17566:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1756c:	61d3      	str	r3, [r2, #28]
   1756e:	bd30      	pop	{r4, r5, pc}
   17570:	20003f38 	.word	0x20003f38

00017574 <_impl_k_yield>:
{
   17574:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17576:	f04f 0320 	mov.w	r3, #32
   1757a:	f3ef 8511 	mrs	r5, BASEPRI
   1757e:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   17582:	4c09      	ldr	r4, [pc, #36]	; (175a8 <_impl_k_yield+0x34>)
   17584:	68a0      	ldr	r0, [r4, #8]
   17586:	f7ff ffcb 	bl	17520 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   1758a:	68a2      	ldr	r2, [r4, #8]
   1758c:	69e3      	ldr	r3, [r4, #28]
   1758e:	429a      	cmp	r2, r3
   17590:	d102      	bne.n	17598 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17592:	f385 8811 	msr	BASEPRI, r5
   17596:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
   17598:	4b04      	ldr	r3, [pc, #16]	; (175ac <_impl_k_yield+0x38>)
   1759a:	2200      	movs	r2, #0
   1759c:	601a      	str	r2, [r3, #0]
   1759e:	4628      	mov	r0, r5
}
   175a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   175a4:	f7e9 bb90 	b.w	cc8 <__swap>
   175a8:	20003f38 	.word	0x20003f38
   175ac:	20005464 	.word	0x20005464

000175b0 <_impl_k_current_get>:
}
   175b0:	4b01      	ldr	r3, [pc, #4]	; (175b8 <_impl_k_current_get+0x8>)
   175b2:	6898      	ldr	r0, [r3, #8]
   175b4:	4770      	bx	lr
   175b6:	bf00      	nop
   175b8:	20003f38 	.word	0x20003f38

000175bc <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   175bc:	4b0d      	ldr	r3, [pc, #52]	; (175f4 <_is_thread_time_slicing+0x38>)
   175be:	681b      	ldr	r3, [r3, #0]
   175c0:	2b00      	cmp	r3, #0
   175c2:	dd14      	ble.n	175ee <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   175c4:	4b0c      	ldr	r3, [pc, #48]	; (175f8 <_is_thread_time_slicing+0x3c>)
   175c6:	681b      	ldr	r3, [r3, #0]
   175c8:	4298      	cmp	r0, r3
   175ca:	d010      	beq.n	175ee <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   175cc:	4a0b      	ldr	r2, [pc, #44]	; (175fc <_is_thread_time_slicing+0x40>)
   175ce:	f990 300a 	ldrsb.w	r3, [r0, #10]
   175d2:	6812      	ldr	r2, [r2, #0]
   175d4:	4293      	cmp	r3, r2
   175d6:	db0a      	blt.n	175ee <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
   175d8:	f103 0214 	add.w	r2, r3, #20
   175dc:	4b08      	ldr	r3, [pc, #32]	; (17600 <_is_thread_time_slicing+0x44>)
   175de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   175e2:	6858      	ldr	r0, [r3, #4]
   175e4:	689b      	ldr	r3, [r3, #8]
   175e6:	1ac0      	subs	r0, r0, r3
   175e8:	bf18      	it	ne
   175ea:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
   175ec:	4770      	bx	lr
		return 0;
   175ee:	2000      	movs	r0, #0
}
   175f0:	4770      	bx	lr
   175f2:	bf00      	nop
   175f4:	2000405c 	.word	0x2000405c
   175f8:	0001c660 	.word	0x0001c660
   175fc:	20004060 	.word	0x20004060
   17600:	20003f38 	.word	0x20003f38

00017604 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
   17604:	4b01      	ldr	r3, [pc, #4]	; (1760c <_update_time_slice_before_swap+0x8>)
   17606:	2200      	movs	r2, #0
   17608:	601a      	str	r2, [r3, #0]
   1760a:	4770      	bx	lr
   1760c:	20005464 	.word	0x20005464

00017610 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   17610:	4a10      	ldr	r2, [pc, #64]	; (17654 <_unpend_first_thread+0x44>)
   17612:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
   17614:	4603      	mov	r3, r0
   17616:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
   17618:	b16a      	cbz	r2, 17636 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1761a:	4283      	cmp	r3, r0
   1761c:	bf08      	it	eq
   1761e:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   17620:	b908      	cbnz	r0, 17626 <_unpend_first_thread+0x16>
   17622:	2000      	movs	r0, #0
   17624:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
   17626:	6a02      	ldr	r2, [r0, #32]
   17628:	3202      	adds	r2, #2
   1762a:	d107      	bne.n	1763c <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
   1762c:	685a      	ldr	r2, [r3, #4]
   1762e:	4290      	cmp	r0, r2
   17630:	d0f7      	beq.n	17622 <_unpend_first_thread+0x12>
   17632:	6800      	ldr	r0, [r0, #0]
   17634:	e7f4      	b.n	17620 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17636:	4283      	cmp	r3, r0
   17638:	d00a      	beq.n	17650 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   1763a:	b150      	cbz	r0, 17652 <_unpend_first_thread+0x42>
	node->prev->next = node->next;
   1763c:	e890 000c 	ldmia.w	r0, {r2, r3}
   17640:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   17642:	6802      	ldr	r2, [r0, #0]
   17644:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   17646:	7a43      	ldrb	r3, [r0, #9]
   17648:	f023 0302 	bic.w	r3, r3, #2
   1764c:	7243      	strb	r3, [r0, #9]
   1764e:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17650:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
   17652:	4770      	bx	lr
   17654:	20005460 	.word	0x20005460

00017658 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
   17658:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
   1765c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1765e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   17660:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   17662:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
   17664:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   17666:	6143      	str	r3, [r0, #20]
   17668:	4770      	bx	lr
	...

0001766c <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   1766c:	b570      	push	{r4, r5, r6, lr}
   1766e:	4605      	mov	r5, r0
	__asm__ volatile(
   17670:	f04f 0320 	mov.w	r3, #32
   17674:	f3ef 8611 	mrs	r6, BASEPRI
   17678:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
   1767c:	f7ff ffc8 	bl	17610 <_unpend_first_thread>
	if (!thread) {
   17680:	4604      	mov	r4, r0
   17682:	b998      	cbnz	r0, 176ac <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
   17684:	68ab      	ldr	r3, [r5, #8]
   17686:	68ea      	ldr	r2, [r5, #12]
   17688:	429a      	cmp	r2, r3
   1768a:	bf18      	it	ne
   1768c:	3301      	addne	r3, #1
   1768e:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   17690:	2102      	movs	r1, #2
   17692:	f105 0010 	add.w	r0, r5, #16
   17696:	f000 fdd7 	bl	18248 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   1769a:	2800      	cmp	r0, #0
   1769c:	d03b      	beq.n	17716 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
   1769e:	f7ff ffb1 	bl	17604 <_update_time_slice_before_swap>
	return __swap(key);
   176a2:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
   176a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   176a8:	f7e9 bb0e 	b.w	cc8 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   176ac:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
   176ae:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   176b2:	1c48      	adds	r0, r1, #1
   176b4:	d00f      	beq.n	176d6 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   176b6:	4b1b      	ldr	r3, [pc, #108]	; (17724 <_impl_k_sem_give+0xb8>)
   176b8:	695b      	ldr	r3, [r3, #20]
   176ba:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   176bc:	bf1f      	itttt	ne
   176be:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   176c0:	6913      	ldrne	r3, [r2, #16]
   176c2:	185b      	addne	r3, r3, r1
   176c4:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   176c6:	6963      	ldr	r3, [r4, #20]
   176c8:	6922      	ldr	r2, [r4, #16]
   176ca:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   176cc:	6922      	ldr	r2, [r4, #16]
   176ce:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   176d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   176d4:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   176d6:	7a63      	ldrb	r3, [r4, #9]
   176d8:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
   176dc:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   176e0:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   176e2:	d102      	bne.n	176ea <_impl_k_sem_give+0x7e>
   176e4:	6a23      	ldr	r3, [r4, #32]
   176e6:	3301      	adds	r3, #1
   176e8:	d018      	beq.n	1771c <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   176ea:	2300      	movs	r3, #0
   176ec:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   176ee:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   176f2:	2b0d      	cmp	r3, #13
   176f4:	d80f      	bhi.n	17716 <_impl_k_sem_give+0xaa>
   176f6:	b11b      	cbz	r3, 17700 <_impl_k_sem_give+0x94>
   176f8:	4b0b      	ldr	r3, [pc, #44]	; (17728 <_impl_k_sem_give+0xbc>)
   176fa:	685b      	ldr	r3, [r3, #4]
   176fc:	051b      	lsls	r3, r3, #20
   176fe:	d50a      	bpl.n	17716 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
   17700:	4b08      	ldr	r3, [pc, #32]	; (17724 <_impl_k_sem_give+0xb8>)
   17702:	689b      	ldr	r3, [r3, #8]
   17704:	895b      	ldrh	r3, [r3, #10]
   17706:	2b7f      	cmp	r3, #127	; 0x7f
   17708:	d805      	bhi.n	17716 <_impl_k_sem_give+0xaa>
   1770a:	f7ff fec9 	bl	174a0 <__must_switch_threads>
   1770e:	3000      	adds	r0, #0
   17710:	bf18      	it	ne
   17712:	2001      	movne	r0, #1
   17714:	e7c1      	b.n	1769a <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17716:	f386 8811 	msr	BASEPRI, r6
   1771a:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   1771c:	4620      	mov	r0, r4
   1771e:	f7ff fdc5 	bl	172ac <_add_thread_to_ready_q>
   17722:	e7e2      	b.n	176ea <_impl_k_sem_give+0x7e>
   17724:	20003f38 	.word	0x20003f38
   17728:	e000ed00 	.word	0xe000ed00

0001772c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   1772c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1772e:	f04f 0320 	mov.w	r3, #32
   17732:	f3ef 8411 	mrs	r4, BASEPRI
   17736:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   1773a:	6883      	ldr	r3, [r0, #8]
   1773c:	b12b      	cbz	r3, 1774a <_impl_k_sem_take+0x1e>
		sem->count--;
   1773e:	3b01      	subs	r3, #1
   17740:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17742:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   17746:	2000      	movs	r0, #0
   17748:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
   1774a:	b921      	cbnz	r1, 17756 <_impl_k_sem_take+0x2a>
   1774c:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
   17750:	f06f 000f 	mvn.w	r0, #15
   17754:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
   17756:	f7ff fe93 	bl	17480 <_pend_current_thread>
	_update_time_slice_before_swap();
   1775a:	f7ff ff53 	bl	17604 <_update_time_slice_before_swap>
	return __swap(key);
   1775e:	4620      	mov	r0, r4

	return _Swap(key);
}
   17760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17764:	f7e9 bab0 	b.w	cc8 <__swap>

00017768 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
   17768:	4b03      	ldr	r3, [pc, #12]	; (17778 <_impl_k_uptime_get_32+0x10>)
   1776a:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
   1776e:	230a      	movs	r3, #10
   17770:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
   17774:	4770      	bx	lr
   17776:	bf00      	nop
   17778:	20005468 	.word	0x20005468

0001777c <_tick_get>:
	__asm__ volatile(
   1777c:	f04f 0220 	mov.w	r2, #32
   17780:	f3ef 8311 	mrs	r3, BASEPRI
   17784:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   17788:	4a02      	ldr	r2, [pc, #8]	; (17794 <_tick_get+0x18>)
   1778a:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1778e:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
   17792:	4770      	bx	lr
   17794:	20005468 	.word	0x20005468

00017798 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
   17798:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
   1779a:	f7ff ffef 	bl	1777c <_tick_get>
   1779e:	240a      	movs	r4, #10
   177a0:	fba0 2304 	umull	r2, r3, r0, r4
   177a4:	fb04 3301 	mla	r3, r4, r1, r3
}
   177a8:	4610      	mov	r0, r2
   177aa:	4619      	mov	r1, r3
   177ac:	bd10      	pop	{r4, pc}
	...

000177b0 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   177b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177b4:	4607      	mov	r7, r0
	__asm__ volatile(
   177b6:	f04f 0320 	mov.w	r3, #32
   177ba:	f3ef 8011 	mrs	r0, BASEPRI
   177be:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   177c2:	4963      	ldr	r1, [pc, #396]	; (17950 <_nano_sys_clock_tick_announce+0x1a0>)
   177c4:	e9d1 4500 	ldrd	r4, r5, [r1]
   177c8:	19e2      	adds	r2, r4, r7
   177ca:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
   177ce:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   177d2:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   177d6:	466e      	mov	r6, sp
   177d8:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   177dc:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   177e0:	f04f 0320 	mov.w	r3, #32
   177e4:	f3ef 8011 	mrs	r0, BASEPRI
   177e8:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   177ec:	4c59      	ldr	r4, [pc, #356]	; (17954 <_nano_sys_clock_tick_announce+0x1a4>)
   177ee:	4621      	mov	r1, r4
   177f0:	4602      	mov	r2, r0
   177f2:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   177f6:	428b      	cmp	r3, r1
   177f8:	d000      	beq.n	177fc <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
   177fa:	b9fb      	cbnz	r3, 1783c <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   177fc:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
   17800:	68a0      	ldr	r0, [r4, #8]
   17802:	f7ff fedb 	bl	175bc <_is_thread_time_slicing>
   17806:	b1b0      	cbz	r0, 17836 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
   17808:	4a53      	ldr	r2, [pc, #332]	; (17958 <_nano_sys_clock_tick_announce+0x1a8>)
   1780a:	6811      	ldr	r1, [r2, #0]
   1780c:	230a      	movs	r3, #10
   1780e:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
   17812:	4b52      	ldr	r3, [pc, #328]	; (1795c <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
   17814:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   17816:	681b      	ldr	r3, [r3, #0]
   17818:	429f      	cmp	r7, r3
   1781a:	db0c      	blt.n	17836 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
   1781c:	2300      	movs	r3, #0
   1781e:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   17820:	f04f 0320 	mov.w	r3, #32
   17824:	f3ef 8511 	mrs	r5, BASEPRI
   17828:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
   1782c:	68a0      	ldr	r0, [r4, #8]
   1782e:	f7ff fe77 	bl	17520 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17832:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   17836:	b003      	add	sp, #12
   17838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
   1783c:	4d48      	ldr	r5, [pc, #288]	; (17960 <_nano_sys_clock_tick_announce+0x1b0>)
   1783e:	2101      	movs	r1, #1
   17840:	6029      	str	r1, [r5, #0]
   17842:	46ab      	mov	fp, r5
   17844:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
   17846:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
   1784a:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
   1784e:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
   17850:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
   17852:	bfaa      	itet	ge
   17854:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
   17858:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
   1785c:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
   17860:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   17862:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
   17864:	691d      	ldr	r5, [r3, #16]
   17866:	4298      	cmp	r0, r3
   17868:	bf14      	ite	ne
   1786a:	6818      	ldrne	r0, [r3, #0]
   1786c:	2000      	moveq	r0, #0
   1786e:	b9d5      	cbnz	r5, 178a6 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
   17870:	e893 0220 	ldmia.w	r3, {r5, r9}
   17874:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
   17878:	681d      	ldr	r5, [r3, #0]
   1787a:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
   1787e:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
   17880:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
   17884:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
   17886:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
   17888:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
   1788a:	f8c3 c010 	str.w	ip, [r3, #16]
   1788e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
   17892:	f04f 0320 	mov.w	r3, #32
   17896:	f3ef 8211 	mrs	r2, BASEPRI
   1789a:	f383 8811 	msr	BASEPRI, r3
	while (next) {
   1789e:	4603      	mov	r3, r0
   178a0:	2800      	cmp	r0, #0
   178a2:	d1d4      	bne.n	1784e <_nano_sys_clock_tick_announce+0x9e>
   178a4:	e001      	b.n	178aa <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
   178a6:	2900      	cmp	r1, #0
   178a8:	dcf1      	bgt.n	1788e <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   178aa:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   178ae:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   178b0:	42b0      	cmp	r0, r6
   178b2:	d103      	bne.n	178bc <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
   178b4:	2300      	movs	r3, #0
   178b6:	f8cb 3000 	str.w	r3, [fp]
   178ba:	e7a1      	b.n	17800 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   178bc:	2800      	cmp	r0, #0
   178be:	d0f9      	beq.n	178b4 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   178c0:	9b01      	ldr	r3, [sp, #4]
   178c2:	4298      	cmp	r0, r3
   178c4:	d101      	bne.n	178ca <_nano_sys_clock_tick_announce+0x11a>
   178c6:	2600      	movs	r6, #0
   178c8:	e000      	b.n	178cc <_nano_sys_clock_tick_announce+0x11c>
   178ca:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
   178cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
   178d0:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
   178d4:	e890 000c 	ldmia.w	r0, {r2, r3}
   178d8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   178da:	6802      	ldr	r2, [r0, #0]
   178dc:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
   178de:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
   178e0:	f04f 0220 	mov.w	r2, #32
   178e4:	f3ef 8a11 	mrs	sl, BASEPRI
   178e8:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   178ec:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
   178f0:	b1fb      	cbz	r3, 17932 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
   178f2:	68c2      	ldr	r2, [r0, #12]
   178f4:	b152      	cbz	r2, 1790c <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
   178f6:	6859      	ldr	r1, [r3, #4]
   178f8:	681a      	ldr	r2, [r3, #0]
   178fa:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   178fc:	681a      	ldr	r2, [r3, #0]
   178fe:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   17900:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   17902:	f8c3 901c 	str.w	r9, [r3, #28]
   17906:	f022 0202 	bic.w	r2, r2, #2
   1790a:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1790c:	7a5a      	ldrb	r2, [r3, #9]
   1790e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   17912:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17916:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   17918:	d102      	bne.n	17920 <_nano_sys_clock_tick_announce+0x170>
   1791a:	6a1a      	ldr	r2, [r3, #32]
   1791c:	3201      	adds	r2, #1
   1791e:	d013      	beq.n	17948 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17920:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   17924:	2e00      	cmp	r6, #0
   17926:	d0c5      	beq.n	178b4 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
   17928:	9b01      	ldr	r3, [sp, #4]
   1792a:	42b3      	cmp	r3, r6
   1792c:	d108      	bne.n	17940 <_nano_sys_clock_tick_announce+0x190>
   1792e:	2300      	movs	r3, #0
   17930:	e007      	b.n	17942 <_nano_sys_clock_tick_announce+0x192>
   17932:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
   17936:	6943      	ldr	r3, [r0, #20]
   17938:	2b00      	cmp	r3, #0
   1793a:	d0f3      	beq.n	17924 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
   1793c:	4798      	blx	r3
   1793e:	e7f1      	b.n	17924 <_nano_sys_clock_tick_announce+0x174>
   17940:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   17942:	4630      	mov	r0, r6
   17944:	461e      	mov	r6, r3
   17946:	e7c5      	b.n	178d4 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
   17948:	4618      	mov	r0, r3
   1794a:	f7ff fcaf 	bl	172ac <_add_thread_to_ready_q>
   1794e:	e7e7      	b.n	17920 <_nano_sys_clock_tick_announce+0x170>
   17950:	20005468 	.word	0x20005468
   17954:	20003f38 	.word	0x20003f38
   17958:	20005464 	.word	0x20005464
   1795c:	2000405c 	.word	0x2000405c
   17960:	20005460 	.word	0x20005460

00017964 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   17964:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   17966:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1796a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1796e:	4903      	ldr	r1, [pc, #12]	; (1797c <k_sys_work_q_init+0x18>)
   17970:	4803      	ldr	r0, [pc, #12]	; (17980 <k_sys_work_q_init+0x1c>)
   17972:	f000 f98d 	bl	17c90 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   17976:	2000      	movs	r0, #0
   17978:	bd08      	pop	{r3, pc}
   1797a:	bf00      	nop
   1797c:	200081a8 	.word	0x200081a8
   17980:	20005470 	.word	0x20005470

00017984 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
   17984:	7a43      	ldrb	r3, [r0, #9]
   17986:	06da      	lsls	r2, r3, #27
   17988:	d104      	bne.n	17994 <_is_thread_ready+0x10>
   1798a:	6a00      	ldr	r0, [r0, #32]
   1798c:	1c43      	adds	r3, r0, #1
   1798e:	4258      	negs	r0, r3
   17990:	4158      	adcs	r0, r3
   17992:	4770      	bx	lr
   17994:	2000      	movs	r0, #0
}
   17996:	4770      	bx	lr

00017998 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   17998:	6903      	ldr	r3, [r0, #16]
   1799a:	1c5a      	adds	r2, r3, #1
   1799c:	d011      	beq.n	179c2 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1799e:	4a0a      	ldr	r2, [pc, #40]	; (179c8 <_abort_timeout+0x30>)
   179a0:	6952      	ldr	r2, [r2, #20]
   179a2:	4290      	cmp	r0, r2
   179a4:	bf1f      	itttt	ne
   179a6:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   179a8:	690a      	ldrne	r2, [r1, #16]
   179aa:	189b      	addne	r3, r3, r2
   179ac:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
   179ae:	e890 000c 	ldmia.w	r0, {r2, r3}
   179b2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   179b4:	6802      	ldr	r2, [r0, #0]
   179b6:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   179b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   179bc:	6103      	str	r3, [r0, #16]
	return 0;
   179be:	2000      	movs	r0, #0
   179c0:	4770      	bx	lr
		return _INACTIVE;
   179c2:	4618      	mov	r0, r3
}
   179c4:	4770      	bx	lr
   179c6:	bf00      	nop
   179c8:	20003f38 	.word	0x20003f38

000179cc <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
   179cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   179ce:	f04f 0320 	mov.w	r3, #32
   179d2:	f3ef 8611 	mrs	r6, BASEPRI
   179d6:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   179da:	4a19      	ldr	r2, [pc, #100]	; (17a40 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
   179dc:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   179de:	230a      	movs	r3, #10
   179e0:	3109      	adds	r1, #9
   179e2:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   179e6:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   179e8:	6201      	str	r1, [r0, #32]
   179ea:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
   179ec:	2300      	movs	r3, #0
   179ee:	61c3      	str	r3, [r0, #28]
   179f0:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   179f4:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   179f6:	f100 0510 	add.w	r5, r0, #16
   179fa:	d108      	bne.n	17a0e <schedule_new_thread.part.13+0x42>
	node->next = list;
   179fc:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
   179fe:	6953      	ldr	r3, [r2, #20]
   17a00:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
   17a02:	6953      	ldr	r3, [r2, #20]
   17a04:	601d      	str	r5, [r3, #0]
	list->tail = node;
   17a06:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17a08:	f386 8811 	msr	BASEPRI, r6
   17a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   17a0e:	2b00      	cmp	r3, #0
   17a10:	d0f4      	beq.n	179fc <schedule_new_thread.part.13+0x30>
   17a12:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   17a16:	6a04      	ldr	r4, [r0, #32]
   17a18:	691f      	ldr	r7, [r3, #16]
   17a1a:	42bc      	cmp	r4, r7
   17a1c:	dc08      	bgt.n	17a30 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
   17a1e:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   17a20:	1b3c      	subs	r4, r7, r4
   17a22:	611c      	str	r4, [r3, #16]
   17a24:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
   17a26:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   17a28:	685a      	ldr	r2, [r3, #4]
   17a2a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   17a2c:	605d      	str	r5, [r3, #4]
   17a2e:	e7eb      	b.n	17a08 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
   17a30:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
   17a32:	4573      	cmp	r3, lr
   17a34:	6204      	str	r4, [r0, #32]
   17a36:	d0e1      	beq.n	179fc <schedule_new_thread.part.13+0x30>
   17a38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   17a3a:	2b00      	cmp	r3, #0
   17a3c:	d1eb      	bne.n	17a16 <schedule_new_thread.part.13+0x4a>
   17a3e:	e7dd      	b.n	179fc <schedule_new_thread.part.13+0x30>
   17a40:	20003f38 	.word	0x20003f38

00017a44 <k_is_in_isr>:
   17a44:	f3ef 8005 	mrs	r0, IPSR
   17a48:	280d      	cmp	r0, #13
   17a4a:	d807      	bhi.n	17a5c <k_is_in_isr+0x18>
   17a4c:	b138      	cbz	r0, 17a5e <k_is_in_isr+0x1a>
   17a4e:	4b04      	ldr	r3, [pc, #16]	; (17a60 <k_is_in_isr+0x1c>)
   17a50:	6858      	ldr	r0, [r3, #4]
   17a52:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
   17a56:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   17a5a:	4770      	bx	lr
   17a5c:	2001      	movs	r0, #1
}
   17a5e:	4770      	bx	lr
   17a60:	e000ed00 	.word	0xe000ed00

00017a64 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
   17a64:	4b02      	ldr	r3, [pc, #8]	; (17a70 <_is_thread_essential+0xc>)
   17a66:	689b      	ldr	r3, [r3, #8]
   17a68:	7a18      	ldrb	r0, [r3, #8]
}
   17a6a:	f000 0001 	and.w	r0, r0, #1
   17a6e:	4770      	bx	lr
   17a70:	20003f38 	.word	0x20003f38

00017a74 <_thread_entry>:
{
   17a74:	b508      	push	{r3, lr}
   17a76:	4604      	mov	r4, r0
   17a78:	4608      	mov	r0, r1
   17a7a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   17a7c:	461a      	mov	r2, r3
   17a7e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   17a80:	f7ff fd96 	bl	175b0 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   17a84:	f7e9 fbd0 	bl	1228 <_impl_k_thread_abort>

00017a88 <_impl_k_thread_start>:
{
   17a88:	b510      	push	{r4, lr}
   17a8a:	4601      	mov	r1, r0
	__asm__ volatile(
   17a8c:	f04f 0320 	mov.w	r3, #32
   17a90:	f3ef 8411 	mrs	r4, BASEPRI
   17a94:	f383 8811 	msr	BASEPRI, r3
   17a98:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
   17a9a:	075a      	lsls	r2, r3, #29
   17a9c:	d402      	bmi.n	17aa4 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17a9e:	f384 8811 	msr	BASEPRI, r4
   17aa2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17aa4:	f023 0304 	bic.w	r3, r3, #4
   17aa8:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
   17aaa:	f7ff ff6b 	bl	17984 <_is_thread_ready>
   17aae:	2800      	cmp	r0, #0
   17ab0:	d0f5      	beq.n	17a9e <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
   17ab2:	4608      	mov	r0, r1
   17ab4:	f7ff fbfa 	bl	172ac <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   17ab8:	4b07      	ldr	r3, [pc, #28]	; (17ad8 <_impl_k_thread_start+0x50>)
   17aba:	689b      	ldr	r3, [r3, #8]
   17abc:	895b      	ldrh	r3, [r3, #10]
   17abe:	2b7f      	cmp	r3, #127	; 0x7f
   17ac0:	d8ed      	bhi.n	17a9e <_impl_k_thread_start+0x16>
   17ac2:	f7ff fced 	bl	174a0 <__must_switch_threads>
   17ac6:	2800      	cmp	r0, #0
   17ac8:	d0e9      	beq.n	17a9e <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
   17aca:	f7ff fd9b 	bl	17604 <_update_time_slice_before_swap>
	return __swap(key);
   17ace:	4620      	mov	r0, r4
}
   17ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17ad4:	f7e9 b8f8 	b.w	cc8 <__swap>
   17ad8:	20003f38 	.word	0x20003f38

00017adc <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   17adc:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   17ade:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17ae0:	f7e9 bafe 	b.w	10e0 <_new_thread>

00017ae4 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   17ae4:	b570      	push	{r4, r5, r6, lr}
   17ae6:	b086      	sub	sp, #24
   17ae8:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17aea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   17aec:	9604      	str	r6, [sp, #16]
   17aee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   17af0:	9603      	str	r6, [sp, #12]
   17af2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   17af4:	9602      	str	r6, [sp, #8]
   17af6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
   17af8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17afa:	9601      	str	r6, [sp, #4]
   17afc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   17afe:	9600      	str	r6, [sp, #0]
   17b00:	f7e9 faee 	bl	10e0 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
   17b04:	1c6b      	adds	r3, r5, #1
   17b06:	d003      	beq.n	17b10 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
   17b08:	b92d      	cbnz	r5, 17b16 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   17b0a:	4620      	mov	r0, r4
   17b0c:	f7ff ffbc 	bl	17a88 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
   17b10:	4620      	mov	r0, r4
   17b12:	b006      	add	sp, #24
   17b14:	bd70      	pop	{r4, r5, r6, pc}
   17b16:	4629      	mov	r1, r5
   17b18:	4620      	mov	r0, r4
   17b1a:	f7ff ff57 	bl	179cc <schedule_new_thread.part.13>
   17b1e:	e7f7      	b.n	17b10 <_impl_k_thread_create+0x2c>

00017b20 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
   17b20:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   17b22:	b510      	push	{r4, lr}
   17b24:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   17b26:	b103      	cbz	r3, 17b2a <_k_thread_single_abort+0xa>
		thread->fn_abort();
   17b28:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
   17b2a:	4620      	mov	r0, r4
   17b2c:	f7ff ff2a 	bl	17984 <_is_thread_ready>
   17b30:	b138      	cbz	r0, 17b42 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
   17b32:	4620      	mov	r0, r4
   17b34:	f7ff fc3e 	bl	173b4 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   17b38:	7a63      	ldrb	r3, [r4, #9]
   17b3a:	f043 0308 	orr.w	r3, r3, #8
   17b3e:	7263      	strb	r3, [r4, #9]
   17b40:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
   17b42:	7a63      	ldrb	r3, [r4, #9]
   17b44:	079b      	lsls	r3, r3, #30
   17b46:	d508      	bpl.n	17b5a <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
   17b48:	e894 000c 	ldmia.w	r4, {r2, r3}
   17b4c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   17b4e:	6822      	ldr	r2, [r4, #0]
   17b50:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   17b52:	7a63      	ldrb	r3, [r4, #9]
   17b54:	f023 0302 	bic.w	r3, r3, #2
   17b58:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
   17b5a:	6a23      	ldr	r3, [r4, #32]
   17b5c:	3301      	adds	r3, #1
   17b5e:	d0eb      	beq.n	17b38 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
   17b60:	f104 0010 	add.w	r0, r4, #16
   17b64:	f7ff ff18 	bl	17998 <_abort_timeout>
   17b68:	e7e6      	b.n	17b38 <_k_thread_single_abort+0x18>
	...

00017b6c <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   17b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   17b6e:	4f21      	ldr	r7, [pc, #132]	; (17bf4 <_init_static_threads+0x88>)
   17b70:	4d21      	ldr	r5, [pc, #132]	; (17bf8 <_init_static_threads+0x8c>)
{
   17b72:	b087      	sub	sp, #28
   17b74:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   17b76:	42bd      	cmp	r5, r7
   17b78:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   17b7c:	d314      	bcc.n	17ba8 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
   17b7e:	4b1f      	ldr	r3, [pc, #124]	; (17bfc <_init_static_threads+0x90>)
   17b80:	689a      	ldr	r2, [r3, #8]
   17b82:	7ad3      	ldrb	r3, [r2, #11]
   17b84:	3b01      	subs	r3, #1
   17b86:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   17b88:	f04f 0320 	mov.w	r3, #32
   17b8c:	f3ef 8511 	mrs	r5, BASEPRI
   17b90:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   17b94:	4c18      	ldr	r4, [pc, #96]	; (17bf8 <_init_static_threads+0x8c>)
   17b96:	42b4      	cmp	r4, r6
   17b98:	d31f      	bcc.n	17bda <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17b9a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
   17b9e:	b007      	add	sp, #28
   17ba0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
   17ba4:	f7ff bcac 	b.w	17500 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   17ba8:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   17bac:	9304      	str	r3, [sp, #16]
   17bae:	f854 3c10 	ldr.w	r3, [r4, #-16]
   17bb2:	9303      	str	r3, [sp, #12]
   17bb4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   17bb8:	9302      	str	r3, [sp, #8]
   17bba:	f854 3c18 	ldr.w	r3, [r4, #-24]
   17bbe:	9301      	str	r3, [sp, #4]
   17bc0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   17bc4:	9300      	str	r3, [sp, #0]
   17bc6:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
   17bca:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   17bcc:	f7e9 fa88 	bl	10e0 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
   17bd0:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   17bd4:	64dd      	str	r5, [r3, #76]	; 0x4c
   17bd6:	4625      	mov	r5, r4
   17bd8:	e7cd      	b.n	17b76 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
   17bda:	6a61      	ldr	r1, [r4, #36]	; 0x24
   17bdc:	1c4b      	adds	r3, r1, #1
   17bde:	d003      	beq.n	17be8 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
   17be0:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
   17be2:	b919      	cbnz	r1, 17bec <_init_static_threads+0x80>
   17be4:	f7ff ff50 	bl	17a88 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   17be8:	342c      	adds	r4, #44	; 0x2c
   17bea:	e7d4      	b.n	17b96 <_init_static_threads+0x2a>
   17bec:	f7ff feee 	bl	179cc <schedule_new_thread.part.13>
   17bf0:	e7fa      	b.n	17be8 <_init_static_threads+0x7c>
   17bf2:	bf00      	nop
   17bf4:	20008ad8 	.word	0x20008ad8
   17bf8:	20008ad8 	.word	0x20008ad8
   17bfc:	20003f38 	.word	0x20003f38

00017c00 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   17c00:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   17c02:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
   17c04:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
   17c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
   17c0a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
   17c0c:	72c3      	strb	r3, [r0, #11]
   17c0e:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   17c10:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   17c12:	6183      	str	r3, [r0, #24]
	t->func = func;
   17c14:	6243      	str	r3, [r0, #36]	; 0x24
   17c16:	4770      	bx	lr

00017c18 <k_work_submit_to_queue>:
{
   17c18:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17c1a:	f101 0308 	add.w	r3, r1, #8
   17c1e:	f3bf 8f5b 	dmb	ish
   17c22:	e853 2f00 	ldrex	r2, [r3]
   17c26:	f042 0e01 	orr.w	lr, r2, #1
   17c2a:	e843 ec00 	strex	ip, lr, [r3]
   17c2e:	f1bc 0f00 	cmp.w	ip, #0
   17c32:	d1f6      	bne.n	17c22 <k_work_submit_to_queue+0xa>
   17c34:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   17c38:	07d3      	lsls	r3, r2, #31
   17c3a:	d403      	bmi.n	17c44 <k_work_submit_to_queue+0x2c>
}
   17c3c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   17c40:	f7ff bac9 	b.w	171d6 <k_queue_append>
   17c44:	f85d fb04 	ldr.w	pc, [sp], #4

00017c48 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   17c48:	f1a0 010c 	sub.w	r1, r0, #12
   17c4c:	6980      	ldr	r0, [r0, #24]
   17c4e:	f7ff bfe3 	b.w	17c18 <k_work_submit_to_queue>

00017c52 <work_q_main>:
{
   17c52:	b510      	push	{r4, lr}
   17c54:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
   17c56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17c5a:	4620      	mov	r0, r4
   17c5c:	f7ff fadf 	bl	1721e <k_queue_get>
		if (!work) {
   17c60:	4603      	mov	r3, r0
   17c62:	2800      	cmp	r0, #0
   17c64:	d0f7      	beq.n	17c56 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17c66:	3308      	adds	r3, #8
		handler = work->handler;
   17c68:	6842      	ldr	r2, [r0, #4]
   17c6a:	f3bf 8f5b 	dmb	ish
   17c6e:	e853 1f00 	ldrex	r1, [r3]
   17c72:	f021 0e01 	bic.w	lr, r1, #1
   17c76:	e843 ec00 	strex	ip, lr, [r3]
   17c7a:	f1bc 0f00 	cmp.w	ip, #0
   17c7e:	d1f6      	bne.n	17c6e <work_q_main+0x1c>
   17c80:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   17c84:	07cb      	lsls	r3, r1, #31
   17c86:	d500      	bpl.n	17c8a <work_q_main+0x38>
			handler(work);
   17c88:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   17c8a:	f7ff fc73 	bl	17574 <_impl_k_yield>
   17c8e:	e7e2      	b.n	17c56 <work_q_main+0x4>

00017c90 <k_work_q_start>:
{
   17c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c92:	b087      	sub	sp, #28
   17c94:	4604      	mov	r4, r0
   17c96:	461f      	mov	r7, r3
   17c98:	460d      	mov	r5, r1
   17c9a:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
   17c9c:	f7ff fa6a 	bl	17174 <k_queue_init>

   17ca0:	2000      	movs	r0, #0
   17ca2:	9005      	str	r0, [sp, #20]
   17ca4:	9004      	str	r0, [sp, #16]
   17ca6:	9002      	str	r0, [sp, #8]
   17ca8:	9001      	str	r0, [sp, #4]
   17caa:	9703      	str	r7, [sp, #12]
   17cac:	9400      	str	r4, [sp, #0]
   17cae:	4b04      	ldr	r3, [pc, #16]	; (17cc0 <k_work_q_start+0x30>)
   17cb0:	4632      	mov	r2, r6
   17cb2:	4629      	mov	r1, r5
   17cb4:	f104 0010 	add.w	r0, r4, #16
   17cb8:	f7ff ff14 	bl	17ae4 <_impl_k_thread_create>
}
   17cbc:	b007      	add	sp, #28
   17cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17cc0:	00017c53 	.word	0x00017c53

00017cc4 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   17cc4:	b500      	push	{lr}
   17cc6:	f100 0308 	add.w	r3, r0, #8
   17cca:	f3bf 8f5b 	dmb	ish
   17cce:	e853 2f00 	ldrex	r2, [r3]
   17cd2:	f022 0201 	bic.w	r2, r2, #1
   17cd6:	e843 2e00 	strex	lr, r2, [r3]
   17cda:	f1be 0f00 	cmp.w	lr, #0
   17cde:	d1f6      	bne.n	17cce <k_delayed_work_init+0xa>
   17ce0:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
   17ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ce8:	61c3      	str	r3, [r0, #28]
	t->func = func;
   17cea:	4a04      	ldr	r2, [pc, #16]	; (17cfc <k_delayed_work_init+0x38>)
	work->handler = handler;
   17cec:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
   17cee:	2300      	movs	r3, #0
   17cf0:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   17cf2:	6143      	str	r3, [r0, #20]
	t->func = func;
   17cf4:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   17cf6:	6243      	str	r3, [r0, #36]	; 0x24
   17cf8:	f85d fb04 	ldr.w	pc, [sp], #4
   17cfc:	00017c49 	.word	0x00017c49

00017d00 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   17d00:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   17d02:	f04f 0320 	mov.w	r3, #32
   17d06:	f3ef 8411 	mrs	r4, BASEPRI
   17d0a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   17d0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   17d10:	b923      	cbnz	r3, 17d1c <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17d12:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   17d16:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   17d1a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d1c:	f3bf 8f5b 	dmb	ish
   17d20:	6883      	ldr	r3, [r0, #8]
   17d22:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   17d26:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   17d28:	f100 0508 	add.w	r5, r0, #8
   17d2c:	d529      	bpl.n	17d82 <k_delayed_work_cancel+0x82>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   17d2e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   17d30:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   17d32:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   17d34:	2b00      	cmp	r3, #0
   17d36:	d0ec      	beq.n	17d12 <k_delayed_work_cancel+0x12>
		if (test == node) {
   17d38:	4298      	cmp	r0, r3
   17d3a:	d11f      	bne.n	17d7c <k_delayed_work_cancel+0x7c>
   17d3c:	6803      	ldr	r3, [r0, #0]
   17d3e:	6856      	ldr	r6, [r2, #4]
	if (!prev_node) {
   17d40:	b9b9      	cbnz	r1, 17d72 <k_delayed_work_cancel+0x72>
		if (list->tail == node) {
   17d42:	42b0      	cmp	r0, r6
		list->head = node->next;
   17d44:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   17d46:	d100      	bne.n	17d4a <k_delayed_work_cancel+0x4a>
			list->tail = list->head;
   17d48:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   17d4a:	2300      	movs	r3, #0
   17d4c:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   17d4e:	2300      	movs	r3, #0
   17d50:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17d52:	f3bf 8f5b 	dmb	ish
   17d56:	e855 2f00 	ldrex	r2, [r5]
   17d5a:	f022 0201 	bic.w	r2, r2, #1
   17d5e:	e845 2100 	strex	r1, r2, [r5]
   17d62:	2900      	cmp	r1, #0
   17d64:	d1f7      	bne.n	17d56 <k_delayed_work_cancel+0x56>
   17d66:	f3bf 8f5b 	dmb	ish
   17d6a:	f384 8811 	msr	BASEPRI, r4
	return 0;
   17d6e:	4618      	mov	r0, r3
   17d70:	bd70      	pop	{r4, r5, r6, pc}
		if (list->tail == node) {
   17d72:	42b0      	cmp	r0, r6
		prev_node->next = node->next;
   17d74:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
   17d76:	bf08      	it	eq
   17d78:	6051      	streq	r1, [r2, #4]
   17d7a:	e7e6      	b.n	17d4a <k_delayed_work_cancel+0x4a>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   17d7c:	4619      	mov	r1, r3
   17d7e:	681b      	ldr	r3, [r3, #0]
   17d80:	e7d8      	b.n	17d34 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   17d82:	69c1      	ldr	r1, [r0, #28]
   17d84:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   17d86:	f100 020c 	add.w	r2, r0, #12
   17d8a:	d0e0      	beq.n	17d4e <k_delayed_work_cancel+0x4e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   17d8c:	4b08      	ldr	r3, [pc, #32]	; (17db0 <k_delayed_work_cancel+0xb0>)
   17d8e:	695b      	ldr	r3, [r3, #20]
   17d90:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   17d92:	bf1f      	itttt	ne
   17d94:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   17d96:	6913      	ldrne	r3, [r2, #16]
   17d98:	185b      	addne	r3, r3, r1
   17d9a:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   17d9c:	6903      	ldr	r3, [r0, #16]
   17d9e:	68c2      	ldr	r2, [r0, #12]
   17da0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   17da2:	68c2      	ldr	r2, [r0, #12]
   17da4:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   17da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17daa:	61c3      	str	r3, [r0, #28]
   17dac:	e7cf      	b.n	17d4e <k_delayed_work_cancel+0x4e>
   17dae:	bf00      	nop
   17db0:	20003f38 	.word	0x20003f38

00017db4 <k_delayed_work_submit_to_queue>:
{
   17db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17db6:	4607      	mov	r7, r0
   17db8:	460c      	mov	r4, r1
   17dba:	4615      	mov	r5, r2
	__asm__ volatile(
   17dbc:	f04f 0320 	mov.w	r3, #32
   17dc0:	f3ef 8611 	mrs	r6, BASEPRI
   17dc4:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   17dc8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   17dca:	b123      	cbz	r3, 17dd6 <k_delayed_work_submit_to_queue+0x22>
   17dcc:	4283      	cmp	r3, r0
   17dce:	d00b      	beq.n	17de8 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   17dd0:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   17dd4:	e00d      	b.n	17df2 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   17dd6:	b138      	cbz	r0, 17de8 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   17dd8:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   17dda:	b96d      	cbnz	r5, 17df8 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   17ddc:	4621      	mov	r1, r4
   17dde:	4638      	mov	r0, r7
   17de0:	f7ff ff1a 	bl	17c18 <k_work_submit_to_queue>
	err = 0;
   17de4:	2000      	movs	r0, #0
   17de6:	e004      	b.n	17df2 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   17de8:	4620      	mov	r0, r4
   17dea:	f7ff ff89 	bl	17d00 <k_delayed_work_cancel>
		if (err < 0) {
   17dee:	2800      	cmp	r0, #0
   17df0:	daf2      	bge.n	17dd8 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17df2:	f386 8811 	msr	BASEPRI, r6
}
   17df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   17df8:	220a      	movs	r2, #10
   17dfa:	3509      	adds	r5, #9
   17dfc:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   17e00:	4a16      	ldr	r2, [pc, #88]	; (17e5c <k_delayed_work_submit_to_queue+0xa8>)
   17e02:	4611      	mov	r1, r2
	timeout->thread = thread;
   17e04:	2300      	movs	r3, #0
   17e06:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   17e08:	61a3      	str	r3, [r4, #24]
   17e0a:	f851 3f10 	ldr.w	r3, [r1, #16]!
		_add_timeout(NULL, &work->timeout, NULL,
   17e0e:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17e10:	428b      	cmp	r3, r1
   17e12:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   17e16:	61e5      	str	r5, [r4, #28]
   17e18:	d106      	bne.n	17e28 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   17e1a:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   17e1c:	6953      	ldr	r3, [r2, #20]
   17e1e:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   17e20:	6953      	ldr	r3, [r2, #20]
   17e22:	601f      	str	r7, [r3, #0]
	list->tail = node;
   17e24:	6157      	str	r7, [r2, #20]
   17e26:	e7dd      	b.n	17de4 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   17e28:	2b00      	cmp	r3, #0
   17e2a:	d0f6      	beq.n	17e1a <k_delayed_work_submit_to_queue+0x66>
   17e2c:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   17e30:	69e0      	ldr	r0, [r4, #28]
   17e32:	691d      	ldr	r5, [r3, #16]
   17e34:	42a8      	cmp	r0, r5
   17e36:	dc08      	bgt.n	17e4a <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   17e38:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   17e3a:	1a28      	subs	r0, r5, r0
   17e3c:	6118      	str	r0, [r3, #16]
   17e3e:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   17e40:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   17e42:	685a      	ldr	r2, [r3, #4]
   17e44:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   17e46:	605f      	str	r7, [r3, #4]
   17e48:	e7cc      	b.n	17de4 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   17e4a:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   17e4c:	4573      	cmp	r3, lr
   17e4e:	61e0      	str	r0, [r4, #28]
   17e50:	d0e3      	beq.n	17e1a <k_delayed_work_submit_to_queue+0x66>
   17e52:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   17e54:	2b00      	cmp	r3, #0
   17e56:	d1eb      	bne.n	17e30 <k_delayed_work_submit_to_queue+0x7c>
   17e58:	e7df      	b.n	17e1a <k_delayed_work_submit_to_queue+0x66>
   17e5a:	bf00      	nop
   17e5c:	20003f38 	.word	0x20003f38

00017e60 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17e60:	7a42      	ldrb	r2, [r0, #9]
   17e62:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   17e66:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17e6a:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   17e6c:	d104      	bne.n	17e78 <_ready_thread+0x18>
   17e6e:	6a03      	ldr	r3, [r0, #32]
   17e70:	3301      	adds	r3, #1
   17e72:	d101      	bne.n	17e78 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   17e74:	f7ff ba1a 	b.w	172ac <_add_thread_to_ready_q>
   17e78:	4770      	bx	lr

00017e7a <_unpend_thread>:
	node->prev->next = node->next;
   17e7a:	e890 000c 	ldmia.w	r0, {r2, r3}
   17e7e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   17e80:	6802      	ldr	r2, [r0, #0]
   17e82:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   17e84:	7a43      	ldrb	r3, [r0, #9]
   17e86:	f023 0302 	bic.w	r3, r3, #2
   17e8a:	7243      	strb	r3, [r0, #9]
   17e8c:	4770      	bx	lr
	...

00017e90 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
   17e90:	b430      	push	{r4, r5}
	timeout->thread = thread;
   17e92:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
   17e94:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   17e96:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
   17e98:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   17e9a:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   17e9c:	b972      	cbnz	r2, 17ebc <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
   17e9e:	f04f 0120 	mov.w	r1, #32
   17ea2:	f3ef 8211 	mrs	r2, BASEPRI
   17ea6:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
   17eaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17eae:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17eb0:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
   17eb4:	6943      	ldr	r3, [r0, #20]
   17eb6:	b16b      	cbz	r3, 17ed4 <_add_timeout.constprop.9+0x44>
}
   17eb8:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
   17eba:	4718      	bx	r3
	return list->head == list;
   17ebc:	4911      	ldr	r1, [pc, #68]	; (17f04 <_add_timeout.constprop.9+0x74>)
   17ebe:	4608      	mov	r0, r1
   17ec0:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17ec4:	4282      	cmp	r2, r0
   17ec6:	d10d      	bne.n	17ee4 <_add_timeout.constprop.9+0x54>
	node->next = list;
   17ec8:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   17eca:	694a      	ldr	r2, [r1, #20]
   17ecc:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   17ece:	694a      	ldr	r2, [r1, #20]
   17ed0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17ed2:	614b      	str	r3, [r1, #20]
}
   17ed4:	bc30      	pop	{r4, r5}
   17ed6:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
   17ed8:	1b64      	subs	r4, r4, r5
   17eda:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
   17edc:	694c      	ldr	r4, [r1, #20]
   17ede:	42a2      	cmp	r2, r4
   17ee0:	d0f2      	beq.n	17ec8 <_add_timeout.constprop.9+0x38>
   17ee2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   17ee4:	2a00      	cmp	r2, #0
   17ee6:	d0ef      	beq.n	17ec8 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
   17ee8:	691c      	ldr	r4, [r3, #16]
   17eea:	6915      	ldr	r5, [r2, #16]
   17eec:	42ac      	cmp	r4, r5
   17eee:	dcf3      	bgt.n	17ed8 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
   17ef0:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
   17ef2:	1b2c      	subs	r4, r5, r4
   17ef4:	6114      	str	r4, [r2, #16]
   17ef6:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
   17ef8:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
   17efa:	6851      	ldr	r1, [r2, #4]
   17efc:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
   17efe:	6053      	str	r3, [r2, #4]
   17f00:	e7e8      	b.n	17ed4 <_add_timeout.constprop.9+0x44>
   17f02:	bf00      	nop
   17f04:	20003f38 	.word	0x20003f38

00017f08 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   17f08:	6a83      	ldr	r3, [r0, #40]	; 0x28
   17f0a:	2b00      	cmp	r3, #0
{
   17f0c:	b570      	push	{r4, r5, r6, lr}
   17f0e:	4604      	mov	r4, r0
   17f10:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
   17f14:	dd0b      	ble.n	17f2e <_timer_expiration_handler+0x26>
	__asm__ volatile(
   17f16:	f04f 0320 	mov.w	r3, #32
   17f1a:	f3ef 8611 	mrs	r6, BASEPRI
   17f1e:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   17f22:	6a82      	ldr	r2, [r0, #40]	; 0x28
   17f24:	4629      	mov	r1, r5
   17f26:	f7ff ffb3 	bl	17e90 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17f2a:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   17f2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17f30:	3301      	adds	r3, #1
   17f32:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   17f34:	6a23      	ldr	r3, [r4, #32]
   17f36:	b10b      	cbz	r3, 17f3c <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
   17f38:	4620      	mov	r0, r4
   17f3a:	4798      	blx	r3
	return list->head == list;
   17f3c:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17f3e:	42ac      	cmp	r4, r5
   17f40:	d010      	beq.n	17f64 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
   17f42:	b17c      	cbz	r4, 17f64 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
   17f44:	4620      	mov	r0, r4
   17f46:	f7ff ff98 	bl	17e7a <_unpend_thread>
	__asm__ volatile(
   17f4a:	f04f 0320 	mov.w	r3, #32
   17f4e:	f3ef 8511 	mrs	r5, BASEPRI
   17f52:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   17f56:	4620      	mov	r0, r4
   17f58:	f7ff ff82 	bl	17e60 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   17f5c:	f385 8811 	msr	BASEPRI, r5
   17f60:	2300      	movs	r3, #0
   17f62:	6663      	str	r3, [r4, #100]	; 0x64
   17f64:	bd70      	pop	{r4, r5, r6, pc}

00017f66 <sys_dlist_remove>:
	node->prev->next = node->next;
   17f66:	e890 000c 	ldmia.w	r0, {r2, r3}
   17f6a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   17f6c:	6802      	ldr	r2, [r0, #0]
   17f6e:	6053      	str	r3, [r2, #4]
   17f70:	4770      	bx	lr

00017f72 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   17f72:	b570      	push	{r4, r5, r6, lr}
   17f74:	2414      	movs	r4, #20
   17f76:	4615      	mov	r5, r2
   17f78:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
   17f7c:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
   17f7e:	2900      	cmp	r1, #0
   17f80:	da00      	bge.n	17f84 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   17f82:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   17f84:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   17f86:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
   17f88:	f003 030f 	and.w	r3, r3, #15
   17f8c:	2b02      	cmp	r3, #2
   17f8e:	d003      	beq.n	17f98 <clear_event_registrations+0x26>
   17f90:	2b04      	cmp	r3, #4
   17f92:	d001      	beq.n	17f98 <clear_event_registrations+0x26>
   17f94:	2b01      	cmp	r3, #1
   17f96:	d102      	bne.n	17f9e <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
   17f98:	4620      	mov	r0, r4
   17f9a:	f7ff ffe4 	bl	17f66 <sys_dlist_remove>
   17f9e:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   17fa2:	f04f 0320 	mov.w	r3, #32
   17fa6:	f3ef 8511 	mrs	r5, BASEPRI
   17faa:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   17fae:	3901      	subs	r1, #1
   17fb0:	3c14      	subs	r4, #20
   17fb2:	e7e4      	b.n	17f7e <clear_event_registrations+0xc>

00017fb4 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   17fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
   17fb6:	2300      	movs	r3, #0
   17fb8:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   17fba:	6883      	ldr	r3, [r0, #8]
{
   17fbc:	4605      	mov	r5, r0
   17fbe:	460e      	mov	r6, r1
   17fc0:	4617      	mov	r7, r2
	if (!event->poller) {
   17fc2:	2b00      	cmp	r3, #0
   17fc4:	d049      	beq.n	1805a <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   17fc6:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
   17fc8:	7a4b      	ldrb	r3, [r1, #9]
   17fca:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   17fce:	0798      	lsls	r0, r3, #30
   17fd0:	724a      	strb	r2, [r1, #9]
   17fd2:	d542      	bpl.n	1805a <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   17fd4:	6a0b      	ldr	r3, [r1, #32]
   17fd6:	3302      	adds	r3, #2
   17fd8:	d04a      	beq.n	18070 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
   17fda:	4608      	mov	r0, r1
   17fdc:	f7ff ffc3 	bl	17f66 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17fe0:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   17fe2:	6a0c      	ldr	r4, [r1, #32]
   17fe4:	f023 0302 	bic.w	r3, r3, #2
   17fe8:	1c62      	adds	r2, r4, #1
   17fea:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
   17fec:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   17ff0:	d00c      	beq.n	1800c <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   17ff2:	4b21      	ldr	r3, [pc, #132]	; (18078 <signal_poll_event+0xc4>)
   17ff4:	695b      	ldr	r3, [r3, #20]
   17ff6:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
   17ff8:	bf1f      	itttt	ne
   17ffa:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   17ffc:	6913      	ldrne	r3, [r2, #16]
   17ffe:	191b      	addne	r3, r3, r4
   18000:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
   18002:	f7ff ffb0 	bl	17f66 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   18006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1800a:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   1800c:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   1800e:	2e00      	cmp	r6, #0
   18010:	bf0c      	ite	eq
   18012:	f06f 0303 	mvneq.w	r3, #3
   18016:	2300      	movne	r3, #0
   18018:	f010 041f 	ands.w	r4, r0, #31
   1801c:	664b      	str	r3, [r1, #100]	; 0x64
   1801e:	d11c      	bne.n	1805a <signal_poll_event+0xa6>
   18020:	6a0b      	ldr	r3, [r1, #32]
   18022:	3301      	adds	r3, #1
   18024:	d119      	bne.n	1805a <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   18026:	4608      	mov	r0, r1
   18028:	f7ff f940 	bl	172ac <_add_thread_to_ready_q>
   1802c:	f3ef 8305 	mrs	r3, IPSR
   18030:	2b0d      	cmp	r3, #13
   18032:	d81b      	bhi.n	1806c <signal_poll_event+0xb8>
   18034:	b123      	cbz	r3, 18040 <signal_poll_event+0x8c>
   18036:	4b11      	ldr	r3, [pc, #68]	; (1807c <signal_poll_event+0xc8>)
   18038:	6858      	ldr	r0, [r3, #4]
   1803a:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   1803e:	d00b      	beq.n	18058 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
   18040:	4b0d      	ldr	r3, [pc, #52]	; (18078 <signal_poll_event+0xc4>)
   18042:	689b      	ldr	r3, [r3, #8]
   18044:	895b      	ldrh	r3, [r3, #10]
   18046:	2b7f      	cmp	r3, #127	; 0x7f
   18048:	d901      	bls.n	1804e <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   1804a:	2000      	movs	r0, #0
   1804c:	e004      	b.n	18058 <signal_poll_event+0xa4>
   1804e:	f7ff fa27 	bl	174a0 <__must_switch_threads>
   18052:	3000      	adds	r0, #0
   18054:	bf18      	it	ne
   18056:	2001      	movne	r0, #1
   18058:	6038      	str	r0, [r7, #0]
	event->state |= state;
   1805a:	7b6b      	ldrb	r3, [r5, #13]
   1805c:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   18060:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   18064:	2000      	movs	r0, #0
	event->state |= state;
   18066:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   18068:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
   1806a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   1806c:	4620      	mov	r0, r4
   1806e:	e7f3      	b.n	18058 <signal_poll_event+0xa4>
		return -EAGAIN;
   18070:	f06f 000a 	mvn.w	r0, #10
   18074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18076:	bf00      	nop
   18078:	20003f38 	.word	0x20003f38
   1807c:	e000ed00 	.word	0xe000ed00

00018080 <add_event>:
	return list->head == list;
   18080:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   18082:	4298      	cmp	r0, r3
{
   18084:	b530      	push	{r4, r5, lr}
   18086:	d00a      	beq.n	1809e <add_event+0x1e>
   18088:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   1808a:	b144      	cbz	r4, 1809e <add_event+0x1e>
   1808c:	68a5      	ldr	r5, [r4, #8]
   1808e:	6812      	ldr	r2, [r2, #0]
   18090:	682d      	ldr	r5, [r5, #0]
   18092:	f992 200a 	ldrsb.w	r2, [r2, #10]
   18096:	f995 500a 	ldrsb.w	r5, [r5, #10]
   1809a:	4295      	cmp	r5, r2
   1809c:	da17      	bge.n	180ce <add_event+0x4e>
	node->next = list;
   1809e:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   180a0:	6843      	ldr	r3, [r0, #4]
   180a2:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   180a4:	6843      	ldr	r3, [r0, #4]
   180a6:	6019      	str	r1, [r3, #0]
	list->tail = node;
   180a8:	6041      	str	r1, [r0, #4]
   180aa:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
   180ac:	689d      	ldr	r5, [r3, #8]
   180ae:	682d      	ldr	r5, [r5, #0]
   180b0:	f995 500a 	ldrsb.w	r5, [r5, #10]
   180b4:	4295      	cmp	r5, r2
   180b6:	dd06      	ble.n	180c6 <add_event+0x46>
		node->prev = insert_point->prev;
   180b8:	685a      	ldr	r2, [r3, #4]
   180ba:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   180bc:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   180be:	685a      	ldr	r2, [r3, #4]
   180c0:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   180c2:	6059      	str	r1, [r3, #4]
   180c4:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   180c6:	42a3      	cmp	r3, r4
   180c8:	d003      	beq.n	180d2 <add_event+0x52>
   180ca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   180cc:	b10b      	cbz	r3, 180d2 <add_event+0x52>
   180ce:	2b00      	cmp	r3, #0
   180d0:	d1ec      	bne.n	180ac <add_event+0x2c>
	node->prev = list->tail;
   180d2:	e881 0011 	stmia.w	r1, {r0, r4}
   180d6:	e7e5      	b.n	180a4 <add_event+0x24>

000180d8 <k_poll_event_init>:
{
   180d8:	b530      	push	{r4, r5, lr}
	event->type = type;
   180da:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   180dc:	6103      	str	r3, [r0, #16]
	event->type = type;
   180de:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   180e2:	7b81      	ldrb	r1, [r0, #14]
   180e4:	f362 0100 	bfi	r1, r2, #0, #1
   180e8:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   180ea:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   180ec:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   180ee:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   180f2:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   180f6:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   180f8:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   180fa:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   180fc:	bd30      	pop	{r4, r5, pc}
	...

00018100 <k_poll>:
{
   18100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18104:	b087      	sub	sp, #28
   18106:	4680      	mov	r8, r0
   18108:	9101      	str	r1, [sp, #4]
   1810a:	4691      	mov	r9, r2
   1810c:	f04f 0320 	mov.w	r3, #32
   18110:	f3ef 8111 	mrs	r1, BASEPRI
   18114:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   18118:	4d4a      	ldr	r5, [pc, #296]	; (18244 <k_poll+0x144>)
   1811a:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
   1811c:	7a53      	ldrb	r3, [r2, #9]
   1811e:	f043 0320 	orr.w	r3, r3, #32
   18122:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18124:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
   18128:	f10d 0a18 	add.w	sl, sp, #24
   1812c:	68aa      	ldr	r2, [r5, #8]
   1812e:	f84a 2d0c 	str.w	r2, [sl, #-12]!
   18132:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
   18134:	2700      	movs	r7, #0
	int last_registered = -1, rc;
   18136:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   1813a:	9b01      	ldr	r3, [sp, #4]
   1813c:	429f      	cmp	r7, r3
   1813e:	db15      	blt.n	1816c <k_poll+0x6c>
	__asm__ volatile(
   18140:	f04f 0320 	mov.w	r3, #32
   18144:	f3ef 8711 	mrs	r7, BASEPRI
   18148:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   1814c:	68aa      	ldr	r2, [r5, #8]
   1814e:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   18150:	f013 0420 	ands.w	r4, r3, #32
   18154:	d144      	bne.n	181e0 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
   18156:	463a      	mov	r2, r7
   18158:	4631      	mov	r1, r6
   1815a:	4640      	mov	r0, r8
   1815c:	f7ff ff09 	bl	17f72 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18160:	f387 8811 	msr	BASEPRI, r7
}
   18164:	4620      	mov	r0, r4
   18166:	b007      	add	sp, #28
   18168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1816c:	f04f 0220 	mov.w	r2, #32
   18170:	f3ef 8b11 	mrs	fp, BASEPRI
   18174:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
   18178:	7b61      	ldrb	r1, [r4, #13]
   1817a:	f001 020f 	and.w	r2, r1, #15
   1817e:	2a02      	cmp	r2, #2
   18180:	d003      	beq.n	1818a <k_poll+0x8a>
   18182:	2a04      	cmp	r2, #4
   18184:	d004      	beq.n	18190 <k_poll+0x90>
   18186:	2a01      	cmp	r2, #1
   18188:	d106      	bne.n	18198 <k_poll+0x98>
		if (event->signal->signaled) {
   1818a:	6920      	ldr	r0, [r4, #16]
   1818c:	6880      	ldr	r0, [r0, #8]
   1818e:	e001      	b.n	18194 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
   18190:	6920      	ldr	r0, [r4, #16]
   18192:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
   18194:	2800      	cmp	r0, #0
   18196:	d148      	bne.n	1822a <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   18198:	f1b9 0f00 	cmp.w	r9, #0
   1819c:	d016      	beq.n	181cc <k_poll+0xcc>
   1819e:	68a9      	ldr	r1, [r5, #8]
   181a0:	7a49      	ldrb	r1, [r1, #9]
   181a2:	068b      	lsls	r3, r1, #26
   181a4:	d512      	bpl.n	181cc <k_poll+0xcc>
	switch (event->type) {
   181a6:	2a02      	cmp	r2, #2
   181a8:	d007      	beq.n	181ba <k_poll+0xba>
   181aa:	2a04      	cmp	r2, #4
   181ac:	d013      	beq.n	181d6 <k_poll+0xd6>
   181ae:	2a01      	cmp	r2, #1
   181b0:	d109      	bne.n	181c6 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
   181b2:	4652      	mov	r2, sl
   181b4:	4621      	mov	r1, r4
   181b6:	6920      	ldr	r0, [r4, #16]
   181b8:	e003      	b.n	181c2 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
   181ba:	6920      	ldr	r0, [r4, #16]
   181bc:	4652      	mov	r2, sl
   181be:	4621      	mov	r1, r4
   181c0:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   181c2:	f7ff ff5d 	bl	18080 <add_event>
	event->poller = poller;
   181c6:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
   181ca:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   181cc:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   181d0:	3701      	adds	r7, #1
   181d2:	3414      	adds	r4, #20
   181d4:	e7b1      	b.n	1813a <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
   181d6:	6920      	ldr	r0, [r4, #16]
   181d8:	4652      	mov	r2, sl
   181da:	4621      	mov	r1, r4
   181dc:	3008      	adds	r0, #8
   181de:	e7f0      	b.n	181c2 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
   181e0:	f023 0320 	bic.w	r3, r3, #32
   181e4:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   181e6:	f1b9 0f00 	cmp.w	r9, #0
   181ea:	d104      	bne.n	181f6 <k_poll+0xf6>
   181ec:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
   181f0:	f06f 040a 	mvn.w	r4, #10
   181f4:	e7b6      	b.n	18164 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   181f6:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
   181f8:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   181fa:	9004      	str	r0, [sp, #16]
   181fc:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
   181fe:	f7ff f93f 	bl	17480 <_pend_current_thread>
	_update_time_slice_before_swap();
   18202:	f7ff f9ff 	bl	17604 <_update_time_slice_before_swap>
	return __swap(key);
   18206:	4638      	mov	r0, r7
   18208:	f7e8 fd5e 	bl	cc8 <__swap>
   1820c:	4604      	mov	r4, r0
	__asm__ volatile(
   1820e:	f04f 0320 	mov.w	r3, #32
   18212:	f3ef 8511 	mrs	r5, BASEPRI
   18216:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
   1821a:	462a      	mov	r2, r5
   1821c:	4631      	mov	r1, r6
   1821e:	4640      	mov	r0, r8
   18220:	f7ff fea7 	bl	17f72 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18224:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
   18228:	e79c      	b.n	18164 <k_poll+0x64>
	event->state |= state;
   1822a:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
   1822e:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
   18232:	2300      	movs	r3, #0
   18234:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   18236:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
   18238:	68a9      	ldr	r1, [r5, #8]
   1823a:	7a4a      	ldrb	r2, [r1, #9]
   1823c:	f022 0220 	bic.w	r2, r2, #32
   18240:	724a      	strb	r2, [r1, #9]
   18242:	e7c3      	b.n	181cc <k_poll+0xcc>
   18244:	20003f38 	.word	0x20003f38

00018248 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   18248:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
   1824a:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   1824c:	42a0      	cmp	r0, r4
   1824e:	d102      	bne.n	18256 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
   18250:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
   18252:	b002      	add	sp, #8
   18254:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
   18256:	4620      	mov	r0, r4
   18258:	f7ff fe85 	bl	17f66 <sys_dlist_remove>
	if (!poll_event) {
   1825c:	2c00      	cmp	r4, #0
   1825e:	d0f7      	beq.n	18250 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
   18260:	aa01      	add	r2, sp, #4
   18262:	4620      	mov	r0, r4
   18264:	f7ff fea6 	bl	17fb4 <signal_poll_event>
	return must_reschedule;
   18268:	9801      	ldr	r0, [sp, #4]
   1826a:	e7f2      	b.n	18252 <_handle_obj_poll_events+0xa>

0001826c <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   1826c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   1826e:	f04f 0320 	mov.w	r3, #32
   18272:	f3ef 8511 	mrs	r5, BASEPRI
   18276:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1827a:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   1827c:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1827e:	42a0      	cmp	r0, r4
	signal->signaled = 1;
   18280:	f04f 0101 	mov.w	r1, #1
   18284:	6081      	str	r1, [r0, #8]
   18286:	d105      	bne.n	18294 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   18288:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
   1828c:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
   1828e:	4620      	mov	r0, r4
   18290:	b003      	add	sp, #12
   18292:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
   18294:	4620      	mov	r0, r4
   18296:	f7ff fe66 	bl	17f66 <sys_dlist_remove>
	if (!poll_event) {
   1829a:	2c00      	cmp	r4, #0
   1829c:	d0f4      	beq.n	18288 <k_poll_signal+0x1c>
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   1829e:	4620      	mov	r0, r4
   182a0:	aa01      	add	r2, sp, #4
   182a2:	f7ff fe87 	bl	17fb4 <signal_poll_event>
	if (must_reschedule) {
   182a6:	9b01      	ldr	r3, [sp, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   182a8:	4604      	mov	r4, r0
	if (must_reschedule) {
   182aa:	b12b      	cbz	r3, 182b8 <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
   182ac:	f7ff f9aa 	bl	17604 <_update_time_slice_before_swap>
	return __swap(key);
   182b0:	4628      	mov	r0, r5
   182b2:	f7e8 fd09 	bl	cc8 <__swap>
   182b6:	e7ea      	b.n	1828e <k_poll_signal+0x22>
   182b8:	f385 8811 	msr	BASEPRI, r5
   182bc:	e7e7      	b.n	1828e <k_poll_signal+0x22>

000182be <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   182be:	4770      	bx	lr
