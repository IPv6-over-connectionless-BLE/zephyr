
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	200048d0 	.word	0x200048d0

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000f61 	.word	0x00000f61
       8:	00000fb1 	.word	0x00000fb1
       c:	00000e61 	.word	0x00000e61
      10:	00000e61 	.word	0x00000e61
      14:	00000e61 	.word	0x00000e61
      18:	00000e61 	.word	0x00000e61
      1c:	00000e61 	.word	0x00000e61
      20:	00000e61 	.word	0x00000e61
      24:	00000e61 	.word	0x00000e61
      28:	00000e61 	.word	0x00000e61
      2c:	00000bf5 	.word	0x00000bf5
      30:	00000e61 	.word	0x00000e61
      34:	00000e61 	.word	0x00000e61
      38:	00000bb1 	.word	0x00000bb1
      3c:	00000e61 	.word	0x00000e61

00000040 <_irq_vector_table>:
      40:	00000f25 0000ca73 00000f25 00000f25     %...s...%...%...
      50:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      60:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      70:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      80:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      90:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      a0:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      b0:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      c0:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      d0:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      e0:	00000f25 00000f25 00000f25 00000f25     %...%...%...%...
      f0:	00000f25 00000f25                       %...%...

000000f8 <_sw_isr_table>:
      f8:	00000000 00001269 00000000 00000dd9     ....i...........
     108:	20005664 0000171f 00000000 00000dd9     dV. ............
     118:	00000000 00000dd9 00000000 00000dd9     ................
     128:	20005688 0000144d 00000000 00000dd9     .V. M...........
     138:	00000000 00000dd9 00000000 00000dd9     ................
     148:	00000000 00000dd9 00000000 0000ca39     ............9...
     158:	00000000 00000dd9 20005670 00001989     ........pV. ....
     168:	00000000 00000dd9 00000000 00000dd9     ................
     178:	00000000 00000dd9 00000000 00001ac9     ................
     188:	00000000 00000dd9 00000000 00000dd9     ................
     198:	00000000 00000dd9 00000000 00000dd9     ................
     1a8:	00000000 00000dd9 00000000 00000dd9     ................
     1b8:	00000000 0000ca6d 00000000 00000dd9     ....m...........
     1c8:	00000000 00000dd9 00000000 00000dd9     ................
     1d8:	00000000 00000dd9 00000000 00000dd9     ................
     1e8:	00000000 00000dd9 00000000 00000dd9     ................
     1f8:	00000000 00000dd9 00000000 00000dd9     ................
     208:	00000000 00000dd9 00000000 00000dd9     ................
     218:	00000000 00000dd9 00000000 00000dd9     ................
     228:	00000000 00000dd9 00000000 00000dd9     ................
     238:	00000000 00000dd9 00000000 00000dd9     ................
     248:	00000000 00000dd9 00000000 00000dd9     ................
     258:	00000000 00000dd9 00000000 00000dd9     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <__udivmoddi4+0xb4>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <__udivmoddi4+0xf2>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <__udivmoddi4+0x6c>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x166>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x166>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <__udivmoddi4+0x98>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x162>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x162>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <__udivmoddi4+0xc8>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <__udivmoddi4+0xdc>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x190>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <__udivmoddi4+0xfa>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x134>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x132>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x194>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x18a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <__udivmoddi4+0xa2>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x186>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x186>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x17e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x17e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <__udivmoddi4+0x10e>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x104>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x182>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x182>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x12e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x17a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x17a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x16e>
     542:	d012      	beq.n	56a <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x16a>
     544:	b156      	cbz	r6, 55c <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x15c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <__udivmoddi4+0x98>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <__udivmoddi4+0x6c>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x144>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x144>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x12e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x104>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_OFFLOAD_WORKQUEUE_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <__udivmoddi4+0xe6>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <__udivmoddi4+0x134>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     5a0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     5a2:	4603      	mov	r3, r0
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	b90a      	cbnz	r2, 5ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     5aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
     5ac:	4770      	bx	lr
		*d = *s;
     5ae:	f803 2b01 	strb.w	r2, [r3], #1
     5b2:	e7f7      	b.n	5a4 <strcpy+0x4>

000005b4 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5b4:	3801      	subs	r0, #1
     5b6:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5b8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5c0:	4293      	cmp	r3, r2
     5c2:	d102      	bne.n	5ca <strcmp+0x16>
     5c4:	2b00      	cmp	r3, #0
     5c6:	d1f7      	bne.n	5b8 <strcmp+0x4>
     5c8:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ca:	1a98      	subs	r0, r3, r2
     5cc:	4770      	bx	lr

000005ce <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5ce:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5d0:	b182      	cbz	r2, 5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5d2:	3a01      	subs	r2, #1
     5d4:	460c      	mov	r4, r1
     5d6:	4603      	mov	r3, r0
     5d8:	d103      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5da:	781a      	ldrb	r2, [r3, #0]
     5dc:	7820      	ldrb	r0, [r4, #0]
     5de:	1a10      	subs	r0, r2, r0
     5e0:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     5e2:	781e      	ldrb	r6, [r3, #0]
     5e4:	7825      	ldrb	r5, [r4, #0]
     5e6:	42ae      	cmp	r6, r5
     5e8:	f100 0001 	add.w	r0, r0, #1
     5ec:	f101 0101 	add.w	r1, r1, #1
     5f0:	d0ef      	beq.n	5d2 <memcmp+0x4>
     5f2:	e7f2      	b.n	5da <memcmp+0xc>
		return 0;
     5f4:	4610      	mov	r0, r2
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}

000005f8 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5f8:	ea81 0300 	eor.w	r3, r1, r0
     5fc:	f013 0f03 	tst.w	r3, #3
{
     600:	b570      	push	{r4, r5, r6, lr}
     602:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     604:	d00b      	beq.n	61e <memcpy+0x26>
     606:	3b01      	subs	r3, #1
     608:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     60a:	4291      	cmp	r1, r2
     60c:	d11b      	bne.n	646 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     60e:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     610:	2a00      	cmp	r2, #0
     612:	d0fc      	beq.n	60e <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     614:	f811 4b01 	ldrb.w	r4, [r1], #1
     618:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     61c:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     61e:	079c      	lsls	r4, r3, #30
     620:	d1f6      	bne.n	610 <memcpy+0x18>
     622:	1f1e      	subs	r6, r3, #4
     624:	460d      	mov	r5, r1
     626:	1b54      	subs	r4, r2, r5
     628:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     62a:	2c03      	cmp	r4, #3
     62c:	d806      	bhi.n	63c <memcpy+0x44>
     62e:	f022 0403 	bic.w	r4, r2, #3
     632:	4421      	add	r1, r4
     634:	4423      	add	r3, r4
     636:	f002 0203 	and.w	r2, r2, #3
     63a:	e7e4      	b.n	606 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     63c:	f855 4b04 	ldr.w	r4, [r5], #4
     640:	f846 4f04 	str.w	r4, [r6, #4]!
     644:	e7ef      	b.n	626 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     646:	f811 4b01 	ldrb.w	r4, [r1], #1
     64a:	f803 4f01 	strb.w	r4, [r3, #1]!
     64e:	e7dc      	b.n	60a <memcpy+0x12>

00000650 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     650:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     652:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     654:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     656:	079c      	lsls	r4, r3, #30
     658:	d111      	bne.n	67e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     65a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     65e:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     662:	461e      	mov	r6, r3
     664:	1b95      	subs	r5, r2, r6
     666:	441d      	add	r5, r3
     668:	2d03      	cmp	r5, #3
     66a:	d80e      	bhi.n	68a <memset+0x3a>
     66c:	f022 0403 	bic.w	r4, r2, #3
     670:	4423      	add	r3, r4
     672:	f002 0203 	and.w	r2, r2, #3
     676:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     678:	4293      	cmp	r3, r2
     67a:	d109      	bne.n	690 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     67c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     67e:	2a00      	cmp	r2, #0
     680:	d0fc      	beq.n	67c <memset+0x2c>
		*(d_byte++) = c_byte;
     682:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     686:	3a01      	subs	r2, #1
     688:	e7e5      	b.n	656 <memset+0x6>
		*(d_word++) = c_word;
     68a:	f846 4b04 	str.w	r4, [r6], #4
     68e:	e7e9      	b.n	664 <memset+0x14>
		*(d_byte++) = c_byte;
     690:	f803 1b01 	strb.w	r1, [r3], #1
     694:	e7f0      	b.n	678 <memset+0x28>

00000696 <_impl_uart_irq_tx_disable>:

static inline void _impl_uart_irq_tx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;

	if (api->irq_tx_disable) {
     696:	6843      	ldr	r3, [r0, #4]
     698:	699b      	ldr	r3, [r3, #24]
     69a:	b103      	cbz	r3, 69e <_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
     69c:	4718      	bx	r3
     69e:	4770      	bx	lr

000006a0 <_impl_uart_irq_rx_disable>:

static inline void _impl_uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;

	if (api->irq_rx_disable) {
     6a0:	6843      	ldr	r3, [r0, #4]
     6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     6a4:	b103      	cbz	r3, 6a8 <_impl_uart_irq_rx_disable+0x8>
		api->irq_rx_disable(dev);
     6a6:	4718      	bx	r3
     6a8:	4770      	bx	lr

000006aa <uart_poll_out>:
	return api->poll_out(dev, out_char);
     6aa:	6843      	ldr	r3, [r0, #4]
     6ac:	685b      	ldr	r3, [r3, #4]
     6ae:	4718      	bx	r3

000006b0 <tx_thread>:
		}
	}
}

static void tx_thread(void *p1, void *p2, void *p3)
{
     6b0:	b538      	push	{r3, r4, r5, lr}
	while (1) {
		struct net_buf *buf;
		int err;

		/* Wait until a buffer is available */
		buf = net_buf_get(&tx_queue, K_FOREVER);
     6b2:	4c08      	ldr	r4, [pc, #32]	; (6d4 <tx_thread+0x24>)
     6b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     6b8:	4620      	mov	r0, r4
     6ba:	f00e fd09 	bl	f0d0 <net_buf_get>
     6be:	4605      	mov	r5, r0
		/* Pass buffer to the stack */
		err = bt_send(buf);
     6c0:	f001 fb0a 	bl	1cd8 <bt_send>
		if (err) {
     6c4:	b110      	cbz	r0, 6cc <tx_thread+0x1c>
			SYS_LOG_ERR("Unable to send (err %d)", err);
			net_buf_unref(buf);
     6c6:	4628      	mov	r0, r5
     6c8:	f00e fd28 	bl	f11c <net_buf_unref>

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
     6cc:	f00f f91a 	bl	f904 <_impl_k_yield>
     6d0:	e7f0      	b.n	6b4 <tx_thread+0x4>
     6d2:	bf00      	nop
     6d4:	20005724 	.word	0x20005724

000006d8 <hci_uart_init>:
	}
}
#endif /* CONFIG_BT_CTLR_ASSERT_HANDLER */

static int hci_uart_init(struct device *unused)
{
     6d8:	b510      	push	{r4, lr}
	SYS_LOG_DBG("");

	hci_uart_dev = device_get_binding(CONFIG_BT_CTLR_TO_HOST_UART_DEV_NAME);
     6da:	480e      	ldr	r0, [pc, #56]	; (714 <hci_uart_init+0x3c>)
     6dc:	4c0e      	ldr	r4, [pc, #56]	; (718 <hci_uart_init+0x40>)
     6de:	f00e fd87 	bl	f1f0 <device_get_binding>
     6e2:	6020      	str	r0, [r4, #0]
	if (!hci_uart_dev) {
     6e4:	b190      	cbz	r0, 70c <hci_uart_init+0x34>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_ENABLE, uart_irq_rx_enable, struct device *, dev);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev);
     6e6:	f7ff ffdb 	bl	6a0 <_impl_uart_irq_rx_disable>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev);
     6ea:	6820      	ldr	r0, [r4, #0]
     6ec:	f7ff ffd3 	bl	696 <_impl_uart_irq_tx_disable>
	}

	uart_irq_rx_disable(hci_uart_dev);
	uart_irq_tx_disable(hci_uart_dev);

	uart_irq_callback_set(hci_uart_dev, bt_uart_isr);
     6f0:	6820      	ldr	r0, [r4, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
     6f2:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     6f4:	b11b      	cbz	r3, 6fe <hci_uart_init+0x26>
     6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     6f8:	b10b      	cbz	r3, 6fe <hci_uart_init+0x26>
		api->irq_callback_set(dev, cb);
     6fa:	4908      	ldr	r1, [pc, #32]	; (71c <hci_uart_init+0x44>)
     6fc:	4798      	blx	r3

	uart_irq_rx_enable(hci_uart_dev);
     6fe:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_enable) {
     700:	6843      	ldr	r3, [r0, #4]
     702:	6a1b      	ldr	r3, [r3, #32]
     704:	b103      	cbz	r3, 708 <hci_uart_init+0x30>
		api->irq_rx_enable(dev);
     706:	4798      	blx	r3

	return 0;
     708:	2000      	movs	r0, #0
     70a:	bd10      	pop	{r4, pc}
		return -EINVAL;
     70c:	f06f 0015 	mvn.w	r0, #21
     710:	bd10      	pop	{r4, pc}
     712:	bf00      	nop
     714:	00010702 	.word	0x00010702
     718:	20000004 	.word	0x20000004
     71c:	00000755 	.word	0x00000755

00000720 <h4_read>:
{
     720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     724:	4607      	mov	r7, r0
     726:	460e      	mov	r6, r1
     728:	4615      	mov	r5, r2
     72a:	4698      	mov	r8, r3
	int total = 0;
     72c:	2400      	movs	r4, #0
	while (len) {
     72e:	b125      	cbz	r5, 73a <h4_read+0x1a>
	if (api->fifo_read) {
     730:	687b      	ldr	r3, [r7, #4]
     732:	691b      	ldr	r3, [r3, #16]
     734:	b923      	cbnz	r3, 740 <h4_read+0x20>
			if (total < min) {
     736:	4544      	cmp	r4, r8
     738:	d3f9      	bcc.n	72e <h4_read+0xe>
}
     73a:	4620      	mov	r0, r4
     73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return api->fifo_read(dev, rx_data, size);
     740:	462a      	mov	r2, r5
     742:	4631      	mov	r1, r6
     744:	4638      	mov	r0, r7
     746:	4798      	blx	r3
		if (rx == 0) {
     748:	2800      	cmp	r0, #0
     74a:	d0f4      	beq.n	736 <h4_read+0x16>
		len -= rx;
     74c:	1a2d      	subs	r5, r5, r0
		total += rx;
     74e:	4404      	add	r4, r0
		buf += rx;
     750:	4406      	add	r6, r0
     752:	e7ec      	b.n	72e <h4_read+0xe>

00000754 <bt_uart_isr>:
{
     754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while (uart_irq_update(hci_uart_dev) &&
     758:	4d4f      	ldr	r5, [pc, #316]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
		if (!remaining) {
     75a:	4c50      	ldr	r4, [pc, #320]	; (89c <CONFIG_ISR_STACK_SIZE+0x9c>)
{
     75c:	b08a      	sub	sp, #40	; 0x28
     75e:	462f      	mov	r7, r5
	while (uart_irq_update(hci_uart_dev) &&
     760:	6828      	ldr	r0, [r5, #0]
	if (api->irq_update) {
     762:	6843      	ldr	r3, [r0, #4]
     764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     766:	b17b      	cbz	r3, 788 <bt_uart_isr+0x34>
		return api->irq_update(dev);
     768:	4798      	blx	r3
     76a:	b168      	cbz	r0, 788 <bt_uart_isr+0x34>
	       uart_irq_is_pending(hci_uart_dev)) {
     76c:	6828      	ldr	r0, [r5, #0]
	if (api->irq_is_pending)	{
     76e:	6843      	ldr	r3, [r0, #4]
     770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     772:	b14b      	cbz	r3, 788 <bt_uart_isr+0x34>
		return api->irq_is_pending(dev);
     774:	4798      	blx	r3
	while (uart_irq_update(hci_uart_dev) &&
     776:	b138      	cbz	r0, 788 <bt_uart_isr+0x34>
		if (!uart_irq_rx_ready(hci_uart_dev)) {
     778:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready) {
     77a:	6843      	ldr	r3, [r0, #4]
     77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     77e:	b933      	cbnz	r3, 78e <bt_uart_isr+0x3a>
			if (uart_irq_tx_ready(hci_uart_dev)) {
     780:	6838      	ldr	r0, [r7, #0]
	if (api->irq_tx_ready) {
     782:	6843      	ldr	r3, [r0, #4]
     784:	69db      	ldr	r3, [r3, #28]
     786:	bb83      	cbnz	r3, 7ea <bt_uart_isr+0x96>
}
     788:	b00a      	add	sp, #40	; 0x28
     78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return api->irq_rx_ready(dev);
     78e:	4798      	blx	r3
		if (!uart_irq_rx_ready(hci_uart_dev)) {
     790:	2800      	cmp	r0, #0
     792:	d0f5      	beq.n	780 <bt_uart_isr+0x2c>
		if (!remaining) {
     794:	6826      	ldr	r6, [r4, #0]
     796:	2e00      	cmp	r6, #0
     798:	d14f      	bne.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			read = h4_read(hci_uart_dev, &type, sizeof(type), 0);
     79a:	4633      	mov	r3, r6
     79c:	2201      	movs	r2, #1
     79e:	f10d 0103 	add.w	r1, sp, #3
     7a2:	6828      	ldr	r0, [r5, #0]
     7a4:	f7ff ffbc 	bl	720 <h4_read>
			if (read != sizeof(type)) {
     7a8:	2801      	cmp	r0, #1
     7aa:	d1d9      	bne.n	760 <bt_uart_isr+0xc>
			switch (type) {
     7ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
     7b0:	2b01      	cmp	r3, #1
     7b2:	d01c      	beq.n	7ee <bt_uart_isr+0x9a>
     7b4:	2b02      	cmp	r3, #2
     7b6:	d1e7      	bne.n	788 <bt_uart_isr+0x34>
	h4_read(hci_uart_dev, (void *)&hdr, sizeof(hdr), sizeof(hdr));
     7b8:	2304      	movs	r3, #4
     7ba:	eb0d 0103 	add.w	r1, sp, r3
     7be:	461a      	mov	r2, r3
     7c0:	6838      	ldr	r0, [r7, #0]
     7c2:	f7ff ffad 	bl	720 <h4_read>
	buf = net_buf_alloc(&acl_tx_pool, K_NO_WAIT);
     7c6:	2100      	movs	r1, #0
     7c8:	4835      	ldr	r0, [pc, #212]	; (8a0 <CONFIG_ISR_STACK_SIZE+0xa0>)
     7ca:	f00e fc7b 	bl	f0c4 <net_buf_alloc_fixed>
	if (buf) {
     7ce:	4606      	mov	r6, r0
     7d0:	b138      	cbz	r0, 7e2 <bt_uart_isr+0x8e>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
     7d2:	2302      	movs	r3, #2
		net_buf_add_mem(buf, &hdr, sizeof(hdr));
     7d4:	2204      	movs	r2, #4
     7d6:	7503      	strb	r3, [r0, #20]
     7d8:	eb0d 0102 	add.w	r1, sp, r2
     7dc:	3008      	adds	r0, #8
     7de:	f00e fcd1 	bl	f184 <net_buf_simple_add_mem>
	*remaining = sys_le16_to_cpu(hdr.len);
     7e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     7e6:	6023      	str	r3, [r4, #0]
     7e8:	e017      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
		return api->irq_tx_ready(dev);
     7ea:	4798      	blx	r3
     7ec:	e7cc      	b.n	788 <bt_uart_isr+0x34>
	h4_read(hci_uart_dev, (void *)&hdr, sizeof(hdr), sizeof(hdr));
     7ee:	2303      	movs	r3, #3
     7f0:	461a      	mov	r2, r3
     7f2:	a901      	add	r1, sp, #4
     7f4:	6828      	ldr	r0, [r5, #0]
     7f6:	f7ff ff93 	bl	720 <h4_read>
	*remaining = hdr.param_len;
     7fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
	buf = net_buf_alloc(&cmd_tx_pool, K_NO_WAIT);
     7fe:	4829      	ldr	r0, [pc, #164]	; (8a4 <CONFIG_ISR_STACK_SIZE+0xa4>)
	*remaining = hdr.param_len;
     800:	6023      	str	r3, [r4, #0]
	buf = net_buf_alloc(&cmd_tx_pool, K_NO_WAIT);
     802:	4631      	mov	r1, r6
     804:	f00e fc5e 	bl	f0c4 <net_buf_alloc_fixed>
	if (buf) {
     808:	4606      	mov	r6, r0
     80a:	b130      	cbz	r0, 81a <CONFIG_ISR_STACK_SIZE+0x1a>
     80c:	2300      	movs	r3, #0
     80e:	7503      	strb	r3, [r0, #20]
		net_buf_add_mem(buf, &hdr, sizeof(hdr));
     810:	2203      	movs	r2, #3
     812:	a901      	add	r1, sp, #4
     814:	3008      	adds	r0, #8
     816:	f00e fcb5 	bl	f184 <net_buf_simple_add_mem>
				buf = h4_acl_recv(&remaining);
     81a:	4b23      	ldr	r3, [pc, #140]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     81c:	601e      	str	r6, [r3, #0]
			if (buf && remaining > net_buf_tailroom(buf)) {
     81e:	4e22      	ldr	r6, [pc, #136]	; (8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     820:	6830      	ldr	r0, [r6, #0]
     822:	b150      	cbz	r0, 83a <CONFIG_ISR_STACK_SIZE+0x3a>
     824:	3008      	adds	r0, #8
     826:	f00e fcc6 	bl	f1b6 <net_buf_simple_tailroom>
     82a:	6823      	ldr	r3, [r4, #0]
     82c:	4298      	cmp	r0, r3
     82e:	d204      	bcs.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
				net_buf_unref(buf);
     830:	6830      	ldr	r0, [r6, #0]
     832:	f00e fc73 	bl	f11c <net_buf_unref>
				buf = NULL;
     836:	2300      	movs	r3, #0
     838:	6033      	str	r3, [r6, #0]
		if (!buf) {
     83a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
     83e:	f8d8 3000 	ldr.w	r3, [r8]
     842:	b97b      	cbnz	r3, 864 <CONFIG_ISR_STACK_SIZE+0x64>
			read = h4_discard(hci_uart_dev, remaining);
     844:	6838      	ldr	r0, [r7, #0]
	return uart_fifo_read(uart, buf, min(len, sizeof(buf)));
     846:	6822      	ldr	r2, [r4, #0]
	if (api->fifo_read) {
     848:	6843      	ldr	r3, [r0, #4]
     84a:	691b      	ldr	r3, [r3, #16]
     84c:	2a21      	cmp	r2, #33	; 0x21
     84e:	bf28      	it	cs
     850:	2221      	movcs	r2, #33	; 0x21
     852:	b12b      	cbz	r3, 860 <CONFIG_ISR_STACK_SIZE+0x60>
		return api->fifo_read(dev, rx_data, size);
     854:	a901      	add	r1, sp, #4
     856:	4798      	blx	r3
			remaining -= read;
     858:	6823      	ldr	r3, [r4, #0]
     85a:	1a1b      	subs	r3, r3, r0
     85c:	6023      	str	r3, [r4, #0]
			continue;
     85e:	e77f      	b.n	760 <bt_uart_isr+0xc>
	return 0;
     860:	4618      	mov	r0, r3
     862:	e7f9      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
 *
 *  @return Tail pointer for the buffer.
 */
static inline u8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
     864:	6898      	ldr	r0, [r3, #8]
     866:	8999      	ldrh	r1, [r3, #12]
		read = h4_read(hci_uart_dev, net_buf_tail(buf), remaining, 0);
     868:	6822      	ldr	r2, [r4, #0]
     86a:	4401      	add	r1, r0
     86c:	2300      	movs	r3, #0
     86e:	6838      	ldr	r0, [r7, #0]
     870:	f7ff ff56 	bl	720 <h4_read>
		buf->len += read;
     874:	f8d8 1000 	ldr.w	r1, [r8]
		remaining -= read;
     878:	6826      	ldr	r6, [r4, #0]
		buf->len += read;
     87a:	898b      	ldrh	r3, [r1, #12]
		remaining -= read;
     87c:	1a36      	subs	r6, r6, r0
		buf->len += read;
     87e:	4403      	add	r3, r0
     880:	818b      	strh	r3, [r1, #12]
		remaining -= read;
     882:	6026      	str	r6, [r4, #0]
		if (!remaining) {
     884:	2e00      	cmp	r6, #0
     886:	f47f af6b 	bne.w	760 <bt_uart_isr+0xc>
			net_buf_put(&tx_queue, buf);
     88a:	4808      	ldr	r0, [pc, #32]	; (8ac <CONFIG_ISR_STACK_SIZE+0xac>)
     88c:	f00e fc39 	bl	f102 <net_buf_put>
			buf = NULL;
     890:	f8c8 6000 	str.w	r6, [r8]
     894:	e764      	b.n	760 <bt_uart_isr+0xc>
     896:	bf00      	nop
     898:	20000004 	.word	0x20000004
     89c:	20000008 	.word	0x20000008
     8a0:	20005734 	.word	0x20005734
     8a4:	20005754 	.word	0x20005754
     8a8:	20000000 	.word	0x20000000
     8ac:	20005724 	.word	0x20005724

000008b0 <bt_ctlr_assert_handle>:
{
     8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8b2:	4605      	mov	r5, r0
     8b4:	460f      	mov	r7, r1
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     8b6:	f04f 0220 	mov.w	r2, #32
     8ba:	f3ef 8311 	mrs	r3, BASEPRI
     8be:	f382 8811 	msr	BASEPRI, r2
	uart_irq_rx_disable(hci_uart_dev);
     8c2:	4c23      	ldr	r4, [pc, #140]	; (950 <bt_ctlr_assert_handle+0xa0>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_RX_DISABLE, uart_irq_rx_disable, struct device *, dev);
     8c4:	6820      	ldr	r0, [r4, #0]
     8c6:	f7ff feeb 	bl	6a0 <_impl_uart_irq_rx_disable>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_UART_IRQ_TX_DISABLE, uart_irq_tx_disable, struct device *, dev);
     8ca:	6820      	ldr	r0, [r4, #0]
     8cc:	f7ff fee3 	bl	696 <_impl_uart_irq_tx_disable>
	if (file) {
     8d0:	2d00      	cmp	r5, #0
     8d2:	d037      	beq.n	944 <bt_ctlr_assert_handle+0x94>
     8d4:	462b      	mov	r3, r5
     8d6:	2200      	movs	r2, #0
     8d8:	1b5e      	subs	r6, r3, r5
		while (file[len] != '\0') {
     8da:	f813 1b01 	ldrb.w	r1, [r3], #1
     8de:	bb69      	cbnz	r1, 93c <bt_ctlr_assert_handle+0x8c>
		file += pos;
     8e0:	4415      	add	r5, r2
		len -= pos;
     8e2:	1ab6      	subs	r6, r6, r2
	uart_poll_out(hci_uart_dev, H4_EVT);
     8e4:	2104      	movs	r1, #4
     8e6:	6820      	ldr	r0, [r4, #0]
     8e8:	f7ff fedf 	bl	6aa <uart_poll_out>
	uart_poll_out(hci_uart_dev, 0xff);
     8ec:	21ff      	movs	r1, #255	; 0xff
     8ee:	6820      	ldr	r0, [r4, #0]
     8f0:	f7ff fedb 	bl	6aa <uart_poll_out>
	uart_poll_out(hci_uart_dev, 1 + len + 1 + 4);
     8f4:	1db1      	adds	r1, r6, #6
     8f6:	b2c9      	uxtb	r1, r1
     8f8:	6820      	ldr	r0, [r4, #0]
     8fa:	f7ff fed6 	bl	6aa <uart_poll_out>
	uart_poll_out(hci_uart_dev, 0xAA);
     8fe:	21aa      	movs	r1, #170	; 0xaa
     900:	6820      	ldr	r0, [r4, #0]
     902:	f7ff fed2 	bl	6aa <uart_poll_out>
	if (len) {
     906:	b136      	cbz	r6, 916 <bt_ctlr_assert_handle+0x66>
     908:	3d01      	subs	r5, #1
		while (*file != '\0') {
     90a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
			uart_poll_out(hci_uart_dev, *file);
     90e:	6820      	ldr	r0, [r4, #0]
		while (*file != '\0') {
     910:	b9d1      	cbnz	r1, 948 <bt_ctlr_assert_handle+0x98>
		uart_poll_out(hci_uart_dev, 0x00);
     912:	f7ff feca 	bl	6aa <uart_poll_out>
	uart_poll_out(hci_uart_dev, line >> 0 & 0xff);
     916:	b2f9      	uxtb	r1, r7
     918:	6820      	ldr	r0, [r4, #0]
     91a:	f7ff fec6 	bl	6aa <uart_poll_out>
	uart_poll_out(hci_uart_dev, line >> 8 & 0xff);
     91e:	f3c7 2107 	ubfx	r1, r7, #8, #8
     922:	6820      	ldr	r0, [r4, #0]
     924:	f7ff fec1 	bl	6aa <uart_poll_out>
	uart_poll_out(hci_uart_dev, line >> 16 & 0xff);
     928:	f3c7 4107 	ubfx	r1, r7, #16, #8
     92c:	6820      	ldr	r0, [r4, #0]
     92e:	f7ff febc 	bl	6aa <uart_poll_out>
	uart_poll_out(hci_uart_dev, line >> 24 & 0xff);
     932:	0e39      	lsrs	r1, r7, #24
     934:	6820      	ldr	r0, [r4, #0]
     936:	f7ff feb8 	bl	6aa <uart_poll_out>
     93a:	e7fe      	b.n	93a <bt_ctlr_assert_handle+0x8a>
			if (file[len] == '/') {
     93c:	292f      	cmp	r1, #47	; 0x2f
     93e:	bf08      	it	eq
     940:	1b5a      	subeq	r2, r3, r5
     942:	e7c9      	b.n	8d8 <bt_ctlr_assert_handle+0x28>
	u32_t len = 0, pos = 0;
     944:	462e      	mov	r6, r5
     946:	e7cd      	b.n	8e4 <bt_ctlr_assert_handle+0x34>
			uart_poll_out(hci_uart_dev, *file);
     948:	f7ff feaf 	bl	6aa <uart_poll_out>
     94c:	e7dd      	b.n	90a <bt_ctlr_assert_handle+0x5a>
     94e:	bf00      	nop
     950:	20000004 	.word	0x20000004

00000954 <main>:

DEVICE_INIT(hci_uart, "hci_uart", &hci_uart_init, NULL, NULL,
	    APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);

void main(void)
{
     954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	SYS_LOG_DBG("Start");

	/* Enable the raw interface, this will in turn open the HCI driver */
	bt_enable_raw(&rx_queue);
     958:	481c      	ldr	r0, [pc, #112]	; (9cc <main+0x78>)
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	while (1) {
		struct net_buf *buf;

		buf = net_buf_get(&rx_queue, K_FOREVER);
     95a:	4e1c      	ldr	r6, [pc, #112]	; (9cc <main+0x78>)
		uart_poll_out(hci_uart_dev, H4_EVT);
     95c:	4d1c      	ldr	r5, [pc, #112]	; (9d0 <main+0x7c>)
{
     95e:	b086      	sub	sp, #24
	bt_enable_raw(&rx_queue);
     960:	f001 f9c0 	bl	1ce4 <bt_enable_raw>

     964:	2300      	movs	r3, #0
     966:	f06f 0208 	mvn.w	r2, #8
     96a:	9305      	str	r3, [sp, #20]
     96c:	9304      	str	r3, [sp, #16]
     96e:	9203      	str	r2, [sp, #12]
     970:	9302      	str	r3, [sp, #8]
     972:	9301      	str	r3, [sp, #4]
     974:	9300      	str	r3, [sp, #0]
     976:	f44f 7220 	mov.w	r2, #640	; 0x280
     97a:	4b16      	ldr	r3, [pc, #88]	; (9d4 <main+0x80>)
     97c:	4916      	ldr	r1, [pc, #88]	; (9d8 <main+0x84>)
     97e:	4817      	ldr	r0, [pc, #92]	; (9dc <main+0x88>)
     980:	f00f fa78 	bl	fe74 <_impl_k_thread_create>
		buf = net_buf_get(&rx_queue, K_FOREVER);
     984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     988:	4630      	mov	r0, r6
     98a:	f00e fba1 	bl	f0d0 <net_buf_get>
	switch (bt_buf_get_type(buf)) {
     98e:	7d03      	ldrb	r3, [r0, #20]
     990:	2b01      	cmp	r3, #1
		buf = net_buf_get(&rx_queue, K_FOREVER);
     992:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
     994:	d00d      	beq.n	9b2 <main+0x5e>
     996:	2b03      	cmp	r3, #3
     998:	d108      	bne.n	9ac <main+0x58>
		uart_poll_out(hci_uart_dev, H4_ACL);
     99a:	2102      	movs	r1, #2
     99c:	6828      	ldr	r0, [r5, #0]
     99e:	f7ff fe84 	bl	6aa <uart_poll_out>
		uart_poll_out(hci_uart_dev, net_buf_pull_u8(buf));
     9a2:	f104 0708 	add.w	r7, r4, #8
	while (buf->len) {
     9a6:	89a3      	ldrh	r3, [r4, #12]
     9a8:	b92b      	cbnz	r3, 9b6 <main+0x62>
	net_buf_unref(buf);
     9aa:	4620      	mov	r0, r4
     9ac:	f00e fbb6 	bl	f11c <net_buf_unref>
     9b0:	e7e8      	b.n	984 <main+0x30>
		uart_poll_out(hci_uart_dev, H4_EVT);
     9b2:	2104      	movs	r1, #4
     9b4:	e7f2      	b.n	99c <main+0x48>
		uart_poll_out(hci_uart_dev, net_buf_pull_u8(buf));
     9b6:	4638      	mov	r0, r7
     9b8:	f8d5 8000 	ldr.w	r8, [r5]
     9bc:	f00e fbf3 	bl	f1a6 <net_buf_simple_pull_u8>
     9c0:	4601      	mov	r1, r0
     9c2:	4640      	mov	r0, r8
     9c4:	f7ff fe71 	bl	6aa <uart_poll_out>
     9c8:	e7ed      	b.n	9a6 <main+0x52>
     9ca:	bf00      	nop
     9cc:	20005714 	.word	0x20005714
     9d0:	20000004 	.word	0x20000004
     9d4:	000006b1 	.word	0x000006b1
     9d8:	20003d18 	.word	0x20003d18
     9dc:	2000000c 	.word	0x2000000c

000009e0 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     9e0:	4b05      	ldr	r3, [pc, #20]	; (9f8 <errata_103+0x18>)
     9e2:	681b      	ldr	r3, [r3, #0]
     9e4:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     9e6:	bf01      	itttt	eq
     9e8:	4b04      	ldreq	r3, [pc, #16]	; (9fc <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     9ea:	6818      	ldreq	r0, [r3, #0]
     9ec:	fab0 f080 	clzeq	r0, r0
     9f0:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     9f2:	bf18      	it	ne
     9f4:	2000      	movne	r0, #0
}
     9f6:	4770      	bx	lr
     9f8:	10000130 	.word	0x10000130
     9fc:	10000134 	.word	0x10000134

00000a00 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     a00:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     a02:	f04f 0320 	mov.w	r3, #32
     a06:	f3ef 8111 	mrs	r1, BASEPRI
     a0a:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     a0e:	f7ff ffe7 	bl	9e0 <errata_103>
     a12:	b140      	cbz	r0, a26 <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     a18:	2200      	movs	r2, #0
     a1a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     a1e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     a22:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     a26:	f7ff ffdb 	bl	9e0 <errata_103>
     a2a:	b110      	cbz	r0, a32 <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     a2c:	4b38      	ldr	r3, [pc, #224]	; (b10 <nordicsemi_nrf52_init+0x110>)
     a2e:	4a39      	ldr	r2, [pc, #228]	; (b14 <nordicsemi_nrf52_init+0x114>)
     a30:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     a32:	f7ff ffd5 	bl	9e0 <errata_103>
     a36:	b118      	cbz	r0, a40 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     a38:	4b37      	ldr	r3, [pc, #220]	; (b18 <nordicsemi_nrf52_init+0x118>)
     a3a:	22fb      	movs	r2, #251	; 0xfb
     a3c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     a40:	f7ff ffce 	bl	9e0 <errata_103>
     a44:	b148      	cbz	r0, a5a <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     a46:	4835      	ldr	r0, [pc, #212]	; (b1c <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     a48:	4b35      	ldr	r3, [pc, #212]	; (b20 <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     a4a:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     a4c:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     a4e:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     a52:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     a56:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     a58:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     a5a:	f7ff ffc1 	bl	9e0 <errata_103>
     a5e:	b118      	cbz	r0, a68 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     a60:	4b30      	ldr	r3, [pc, #192]	; (b24 <nordicsemi_nrf52_init+0x124>)
     a62:	f44f 7200 	mov.w	r2, #512	; 0x200
     a66:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     a68:	f7ff ffba 	bl	9e0 <errata_103>
     a6c:	b148      	cbz	r0, a82 <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     a72:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     a76:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     a78:	bf44      	itt	mi
     a7a:	f06f 0201 	mvnmi.w	r2, #1
     a7e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     a82:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     a86:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     a8a:	2a00      	cmp	r2, #0
     a8c:	db03      	blt.n	a96 <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     a8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     a92:	2b00      	cmp	r3, #0
     a94:	da2f      	bge.n	af6 <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     a96:	4b24      	ldr	r3, [pc, #144]	; (b28 <nordicsemi_nrf52_init+0x128>)
     a98:	2201      	movs	r2, #1
     a9a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     a9e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     aa2:	2a00      	cmp	r2, #0
     aa4:	d0fb      	beq.n	a9e <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     aa6:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     aaa:	2112      	movs	r1, #18
     aac:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     ab0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     ab4:	2a00      	cmp	r2, #0
     ab6:	d0fb      	beq.n	ab0 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     ab8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     abc:	2212      	movs	r2, #18
     abe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     ac2:	4b19      	ldr	r3, [pc, #100]	; (b28 <nordicsemi_nrf52_init+0x128>)
     ac4:	461a      	mov	r2, r3
     ac6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     aca:	2900      	cmp	r1, #0
     acc:	d0fb      	beq.n	ac6 <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     ace:	2100      	movs	r1, #0
     ad0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     ad4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     ad8:	2b00      	cmp	r3, #0
     ada:	d0fb      	beq.n	ad4 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     adc:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     ae0:	4912      	ldr	r1, [pc, #72]	; (b2c <nordicsemi_nrf52_init+0x12c>)
     ae2:	4b13      	ldr	r3, [pc, #76]	; (b30 <nordicsemi_nrf52_init+0x130>)
     ae4:	68ca      	ldr	r2, [r1, #12]
     ae6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     aea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     aec:	60cb      	str	r3, [r1, #12]
     aee:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     af2:	bf00      	nop
     af4:	e7fd      	b.n	af2 <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     af6:	4b0d      	ldr	r3, [pc, #52]	; (b2c <nordicsemi_nrf52_init+0x12c>)
     af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     afc:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     afe:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     b00:	4b0c      	ldr	r3, [pc, #48]	; (b34 <nordicsemi_nrf52_init+0x134>)
     b02:	4a0d      	ldr	r2, [pc, #52]	; (b38 <nordicsemi_nrf52_init+0x138>)
     b04:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     b06:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     b0a:	2000      	movs	r0, #0
     b0c:	bd08      	pop	{r3, pc}
     b0e:	bf00      	nop
     b10:	4000568c 	.word	0x4000568c
     b14:	00038148 	.word	0x00038148
     b18:	4000f000 	.word	0x4000f000
     b1c:	40000ee4 	.word	0x40000ee4
     b20:	10000258 	.word	0x10000258
     b24:	40029640 	.word	0x40029640
     b28:	4001e000 	.word	0x4001e000
     b2c:	e000ed00 	.word	0xe000ed00
     b30:	05fa0004 	.word	0x05fa0004
     b34:	20005454 	.word	0x20005454
     b38:	03d09000 	.word	0x03d09000

00000b3c <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     b3c:	4808      	ldr	r0, [pc, #32]	; (b60 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     b3e:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     b40:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     b42:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     b44:	d80b      	bhi.n	b5e <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     b46:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     b48:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     b4a:	d008      	beq.n	b5e <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     b4c:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     b4e:	f00e ff21 	bl	f994 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     b52:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     b56:	4903      	ldr	r1, [pc, #12]	; (b64 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     b5c:	600a      	str	r2, [r1, #0]

00000b5e <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     b5e:	4770      	bx	lr
    ldr r0, =_kernel
     b60:	20003930 	.word	0x20003930
    ldr r1, =_SCS_ICSR
     b64:	e000ed04 	.word	0xe000ed04

00000b68 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b68:	4804      	ldr	r0, [pc, #16]	; (b7c <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     b6a:	2300      	movs	r3, #0
     b6c:	2120      	movs	r1, #32
     b6e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     b70:	3301      	adds	r3, #1
     b72:	2b2e      	cmp	r3, #46	; 0x2e
     b74:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     b78:	d1f9      	bne.n	b6e <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     b7a:	4770      	bx	lr
     b7c:	e000e100 	.word	0xe000e100

00000b80 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     b80:	4a08      	ldr	r2, [pc, #32]	; (ba4 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     b82:	4909      	ldr	r1, [pc, #36]	; (ba8 <__swap+0x28>)
	_current->arch.basepri = key;
     b84:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     b86:	6809      	ldr	r1, [r1, #0]
     b88:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     b8a:	4908      	ldr	r1, [pc, #32]	; (bac <__swap+0x2c>)
	_current->arch.basepri = key;
     b8c:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     b8e:	684b      	ldr	r3, [r1, #4]
     b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     b94:	604b      	str	r3, [r1, #4]
     b96:	2300      	movs	r3, #0
     b98:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     b9c:	6893      	ldr	r3, [r2, #8]
}
     b9e:	6e58      	ldr	r0, [r3, #100]	; 0x64
     ba0:	4770      	bx	lr
     ba2:	bf00      	nop
     ba4:	20003930 	.word	0x20003930
     ba8:	00010d50 	.word	0x00010d50
     bac:	e000ed00 	.word	0xe000ed00

00000bb0 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     bb0:	490e      	ldr	r1, [pc, #56]	; (bec <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     bb2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     bb4:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     bb6:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     bb8:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     bbc:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     bc0:	4f0b      	ldr	r7, [pc, #44]	; (bf0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     bc2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     bc6:	2020      	movs	r0, #32
    msr BASEPRI, r0
     bc8:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     bcc:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     bce:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     bd0:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     bd2:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     bd4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     bd6:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     bd8:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     bdc:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     be0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     be4:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     be8:	4770      	bx	lr
     bea:	0000      	.short	0x0000
    ldr r1, =_kernel
     bec:	20003930 	.word	0x20003930
    ldr v4, =_SCS_ICSR
     bf0:	e000ed04 	.word	0xe000ed04

00000bf4 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     bf4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     bf8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     bfa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     bfe:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     c02:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     c04:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     c08:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     c0c:	d001      	beq.n	c12 <_context_switch>

    cmp r1, #2
     c0e:	2902      	cmp	r1, #2
    beq _oops
     c10:	d007      	beq.n	c22 <_oops>

00000c12 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     c12:	4040      	eors	r0, r0
    msr BASEPRI, r0
     c14:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     c18:	4904      	ldr	r1, [pc, #16]	; (c2c <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     c1e:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     c20:	4770      	bx	lr

00000c22 <_oops>:

_oops:
    push {lr}
     c22:	b500      	push	{lr}
    blx _do_kernel_oops
     c24:	f000 f93b 	bl	e9e <_do_kernel_oops>
    pop {pc}
     c28:	bd00      	pop	{pc}
     c2a:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     c2c:	e000ed04 	.word	0xe000ed04

00000c30 <_MpuFault.isra.1>:
{
	PR_EXC("***** MPU FAULT *****\n");

	_FaultThreadShow(esf);

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     c30:	4b0b      	ldr	r3, [pc, #44]	; (c60 <_MpuFault.isra.1+0x30>)
     c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c34:	06d1      	lsls	r1, r2, #27
     c36:	d412      	bmi.n	c5e <_MpuFault.isra.1+0x2e>
		PR_EXC("  Stacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c3a:	0712      	lsls	r2, r2, #28
     c3c:	d40f      	bmi.n	c5e <_MpuFault.isra.1+0x2e>
		PR_EXC("  Unstacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c40:	f012 0f02 	tst.w	r2, #2
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		STORE_xFAR(mmfar, SCB->MMFAR);

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     c46:	d007      	beq.n	c58 <_MpuFault.isra.1+0x28>
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     c48:	0611      	lsls	r1, r2, #24
     c4a:	d508      	bpl.n	c5e <_MpuFault.isra.1+0x2e>
			PR_EXC("  Address: 0x%x\n", mmfar);
			if (fromHardFault) {
     c4c:	b138      	cbz	r0, c5e <_MpuFault.isra.1+0x2e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     c54:	629a      	str	r2, [r3, #40]	; 0x28
     c56:	4770      	bx	lr
			}
		}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     c58:	07d2      	lsls	r2, r2, #31
		PR_EXC("  Instruction Access Violation\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     c5a:	bf58      	it	pl
     c5c:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
     c5e:	4770      	bx	lr
     c60:	e000ed00 	.word	0xe000ed00

00000c64 <_BusFault.isra.3>:
{
	PR_EXC("***** BUS FAULT *****\n");

	_FaultThreadShow(esf);

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     c64:	4b0d      	ldr	r3, [pc, #52]	; (c9c <_BusFault.isra.3+0x38>)
     c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c68:	04d2      	lsls	r2, r2, #19
     c6a:	d416      	bmi.n	c9a <_BusFault.isra.3+0x36>
		PR_EXC("  Stacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c6e:	0511      	lsls	r1, r2, #20
     c70:	d413      	bmi.n	c9a <_BusFault.isra.3+0x36>
		PR_EXC("  Unstacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c74:	f412 7f00 	tst.w	r2, #512	; 0x200
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);

		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     c7a:	d009      	beq.n	c90 <_BusFault.isra.3+0x2c>
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     c7c:	0412      	lsls	r2, r2, #16
     c7e:	d504      	bpl.n	c8a <_BusFault.isra.3+0x26>
			PR_EXC("  Address: 0x%x\n", bfar);
			if (fromHardFault) {
     c80:	b118      	cbz	r0, c8a <_BusFault.isra.3+0x26>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     c88:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
		/* it's possible to have both a precise and imprecise fault */
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     c8a:	4b04      	ldr	r3, [pc, #16]	; (c9c <_BusFault.isra.3+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
		PR_EXC("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     c8e:	e004      	b.n	c9a <_BusFault.isra.3+0x36>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     c90:	0551      	lsls	r1, r2, #21
     c92:	d402      	bmi.n	c9a <_BusFault.isra.3+0x36>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     c96:	05d2      	lsls	r2, r2, #23
     c98:	d5f8      	bpl.n	c8c <_BusFault.isra.3+0x28>
     c9a:	4770      	bx	lr
     c9c:	e000ed00 	.word	0xe000ed00

00000ca0 <_UsageFault.isra.5>:
	PR_EXC("***** USAGE FAULT *****\n");

	_FaultThreadShow(esf);

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     ca0:	4b06      	ldr	r3, [pc, #24]	; (cbc <_UsageFault.isra.5+0x1c>)
     ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Division by zero\n");
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  No coprocessor instructions\n");
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Illegal use of the EPSR\n");
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Attempt to execute undefined instruction\n");
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     cb0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     cb4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     cb8:	629a      	str	r2, [r3, #40]	; 0x28
     cba:	4770      	bx	lr
     cbc:	e000ed00 	.word	0xe000ed00

00000cc0 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     cc0:	4a18      	ldr	r2, [pc, #96]	; (d24 <_Fault+0x64>)
     cc2:	6853      	ldr	r3, [r2, #4]
     cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     cc8:	3b03      	subs	r3, #3
{
     cca:	b510      	push	{r4, lr}
     ccc:	4604      	mov	r4, r0
	switch (fault) {
     cce:	2b03      	cmp	r3, #3
     cd0:	d80f      	bhi.n	cf2 <_Fault+0x32>
     cd2:	e8df f003 	tbb	[pc, r3]
     cd6:	2302      	.short	0x2302
     cd8:	2025      	.short	0x2025
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     cda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     cdc:	0799      	lsls	r1, r3, #30
     cde:	d408      	bmi.n	cf2 <_Fault+0x32>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     ce0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     ce2:	005b      	lsls	r3, r3, #1
     ce4:	d505      	bpl.n	cf2 <_Fault+0x32>
		if (SCB_MMFSR) {
     ce6:	4b10      	ldr	r3, [pc, #64]	; (d28 <_Fault+0x68>)
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b143      	cbz	r3, cfe <_Fault+0x3e>
			_MpuFault(esf, 1);
     cec:	2001      	movs	r0, #1
		_MpuFault(esf, 0);
     cee:	f7ff ff9f 	bl	c30 <_MpuFault.isra.1>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     cf2:	4621      	mov	r1, r4
     cf4:	2000      	movs	r0, #0
}
     cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     cfa:	f000 b8d5 	b.w	ea8 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     cfe:	4b0b      	ldr	r3, [pc, #44]	; (d2c <_Fault+0x6c>)
     d00:	781b      	ldrb	r3, [r3, #0]
     d02:	b11b      	cbz	r3, d0c <_Fault+0x4c>
			_BusFault(esf, 1);
     d04:	2001      	movs	r0, #1
		_BusFault(esf, 0);
     d06:	f7ff ffad 	bl	c64 <_BusFault.isra.3>
     d0a:	e7f2      	b.n	cf2 <_Fault+0x32>
		} else if (SCB_UFSR) {
     d0c:	4b08      	ldr	r3, [pc, #32]	; (d30 <_Fault+0x70>)
     d0e:	881b      	ldrh	r3, [r3, #0]
     d10:	b29b      	uxth	r3, r3
     d12:	2b00      	cmp	r3, #0
     d14:	d0ed      	beq.n	cf2 <_Fault+0x32>
		_UsageFault(esf);
     d16:	f7ff ffc3 	bl	ca0 <_UsageFault.isra.5>
     d1a:	e7ea      	b.n	cf2 <_Fault+0x32>
		_MpuFault(esf, 0);
     d1c:	2000      	movs	r0, #0
     d1e:	e7e6      	b.n	cee <_Fault+0x2e>
		_BusFault(esf, 0);
     d20:	2000      	movs	r0, #0
     d22:	e7f0      	b.n	d06 <_Fault+0x46>
     d24:	e000ed00 	.word	0xe000ed00
     d28:	e000ed28 	.word	0xe000ed28
     d2c:	e000ed29 	.word	0xe000ed29
     d30:	e000ed2a 	.word	0xe000ed2a

00000d34 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     d34:	4a02      	ldr	r2, [pc, #8]	; (d40 <_FaultInit+0xc>)
     d36:	6953      	ldr	r3, [r2, #20]
     d38:	f043 0310 	orr.w	r3, r3, #16
     d3c:	6153      	str	r3, [r2, #20]
     d3e:	4770      	bx	lr
     d40:	e000ed00 	.word	0xe000ed00

00000d44 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     d44:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d46:	2b00      	cmp	r3, #0
     d48:	db08      	blt.n	d5c <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d4a:	2201      	movs	r2, #1
     d4c:	f000 001f 	and.w	r0, r0, #31
     d50:	fa02 f000 	lsl.w	r0, r2, r0
     d54:	095b      	lsrs	r3, r3, #5
     d56:	4a02      	ldr	r2, [pc, #8]	; (d60 <_arch_irq_enable+0x1c>)
     d58:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d5c:	4770      	bx	lr
     d5e:	bf00      	nop
     d60:	e000e100 	.word	0xe000e100

00000d64 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     d64:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d66:	2b00      	cmp	r3, #0
     d68:	db0d      	blt.n	d86 <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d6a:	2201      	movs	r2, #1
     d6c:	095b      	lsrs	r3, r3, #5
     d6e:	f000 001f 	and.w	r0, r0, #31
     d72:	fa02 f000 	lsl.w	r0, r2, r0
     d76:	3320      	adds	r3, #32
     d78:	4a03      	ldr	r2, [pc, #12]	; (d88 <_arch_irq_disable+0x24>)
     d7a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d82:	f3bf 8f6f 	isb	sy
     d86:	4770      	bx	lr
     d88:	e000e100 	.word	0xe000e100

00000d8c <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     d8c:	0942      	lsrs	r2, r0, #5
     d8e:	4b05      	ldr	r3, [pc, #20]	; (da4 <_arch_irq_is_enabled+0x18>)
     d90:	f000 001f 	and.w	r0, r0, #31
     d94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d98:	2301      	movs	r3, #1
     d9a:	fa03 f000 	lsl.w	r0, r3, r0
}
     d9e:	4010      	ands	r0, r2
     da0:	4770      	bx	lr
     da2:	bf00      	nop
     da4:	e000e100 	.word	0xe000e100

00000da8 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     da8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     daa:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dac:	bfa8      	it	ge
     dae:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     db2:	f101 0101 	add.w	r1, r1, #1
     db6:	ea4f 1141 	mov.w	r1, r1, lsl #5
     dba:	bfad      	iteet	ge
     dbc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dc0:	f000 000f 	andlt.w	r0, r0, #15
     dc4:	4b03      	ldrlt	r3, [pc, #12]	; (dd4 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dc6:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dc8:	bfb6      	itet	lt
     dca:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dcc:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     dd0:	5419      	strblt	r1, [r3, r0]
     dd2:	4770      	bx	lr
     dd4:	e000ed14 	.word	0xe000ed14

00000dd8 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     dd8:	f000 b842 	b.w	e60 <__bus_fault>

00000ddc <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     ddc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     dde:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     de0:	4b04      	ldr	r3, [pc, #16]	; (df4 <_arch_isr_direct_pm+0x18>)
     de2:	6998      	ldr	r0, [r3, #24]
     de4:	b118      	cbz	r0, dee <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     de6:	2200      	movs	r2, #0
     de8:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     dea:	f00e fa27 	bl	f23c <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     dee:	b662      	cpsie	i
     df0:	bd08      	pop	{r3, pc}
     df2:	bf00      	nop
     df4:	20003930 	.word	0x20003930

00000df8 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dfa:	460c      	mov	r4, r1
     dfc:	4616      	mov	r6, r2
     dfe:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     e00:	2204      	movs	r2, #4
     e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     e04:	9909      	ldr	r1, [sp, #36]	; 0x24
     e06:	4605      	mov	r5, r0
     e08:	f00f f8c2 	bl	ff90 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     e0c:	f1a6 0120 	sub.w	r1, r6, #32
     e10:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     e12:	4a0c      	ldr	r2, [pc, #48]	; (e44 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     e14:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     e16:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     e1a:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     e1c:	f022 0201 	bic.w	r2, r2, #1
     e20:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     e22:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     e24:	65ee      	str	r6, [r5, #92]	; 0x5c
     e26:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     e28:	9a06      	ldr	r2, [sp, #24]
     e2a:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     e2c:	9a07      	ldr	r2, [sp, #28]
     e2e:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     e30:	9a08      	ldr	r2, [sp, #32]
     e32:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     e34:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     e3a:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     e3c:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     e3e:	662b      	str	r3, [r5, #96]	; 0x60
     e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e42:	bf00      	nop
     e44:	0000fe05 	.word	0x0000fe05

00000e48 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     e48:	4901      	ldr	r1, [pc, #4]	; (e50 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     e4a:	2210      	movs	r2, #16
	str r2, [r1]
     e4c:	600a      	str	r2, [r1, #0]
	bx lr
     e4e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     e50:	e000ed10 	.word	0xe000ed10

00000e54 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     e54:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e56:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     e5a:	bf30      	wfi

	bx lr
     e5c:	4770      	bx	lr
     e5e:	bf00      	nop

00000e60 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     e60:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e62:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     e66:	f8df c01c 	ldr.w	ip, [pc, #28]	; e84 <__bus_fault+0x24>
	ldr ip, [ip]
     e6a:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     e6e:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     e72:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     e74:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     e78:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     e7c:	b500      	push	{lr}
	bl _Fault
     e7e:	f7ff ff1f 	bl	cc0 <_Fault>

	pop {pc}
     e82:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     e84:	e000ed04 	.word	0xe000ed04

00000e88 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
     e88:	b538      	push	{r3, r4, r5, lr}
     e8a:	4604      	mov	r4, r0
     e8c:	460d      	mov	r5, r1

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     e8e:	f00e fd57 	bl	f940 <_impl_k_current_get>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     e92:	4629      	mov	r1, r5
     e94:	4620      	mov	r0, r4
}
     e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     e9a:	f000 b805 	b.w	ea8 <_SysFatalErrorHandler>

00000e9e <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     e9e:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     ea0:	6800      	ldr	r0, [r0, #0]
     ea2:	f7ff bff1 	b.w	e88 <_NanoFatalErrorHandler>
	...

00000ea8 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     ea8:	2805      	cmp	r0, #5
{
     eaa:	b508      	push	{r3, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     eac:	d004      	beq.n	eb8 <_SysFatalErrorHandler+0x10>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     eae:	f00e ff91 	bl	fdd4 <k_is_in_isr>
     eb2:	b120      	cbz	r0, ebe <_SysFatalErrorHandler+0x16>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     eb4:	f00e ff8e 	bl	fdd4 <k_is_in_isr>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     eb8:	f7ff ffcc 	bl	e54 <k_cpu_idle>
     ebc:	e7fc      	b.n	eb8 <_SysFatalErrorHandler+0x10>
	if (k_is_in_isr() || _is_thread_essential()) {
     ebe:	f00e ff99 	bl	fdf4 <_is_thread_essential>
     ec2:	2800      	cmp	r0, #0
     ec4:	d1f6      	bne.n	eb4 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     ec6:	4b03      	ldr	r3, [pc, #12]	; (ed4 <_SysFatalErrorHandler+0x2c>)

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     ec8:	6898      	ldr	r0, [r3, #8]
	}
	CODE_UNREACHABLE;
}
     eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     ece:	f000 b803 	b.w	ed8 <_impl_k_thread_abort>
     ed2:	bf00      	nop
     ed4:	20003930 	.word	0x20003930

00000ed8 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     ed8:	b538      	push	{r3, r4, r5, lr}
     eda:	4605      	mov	r5, r0
	__asm__ volatile(
     edc:	f04f 0320 	mov.w	r3, #32
     ee0:	f3ef 8411 	mrs	r4, BASEPRI
     ee4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     ee8:	f00e ffe2 	bl	feb0 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     eec:	4b0b      	ldr	r3, [pc, #44]	; (f1c <_impl_k_thread_abort+0x44>)
     eee:	689b      	ldr	r3, [r3, #8]
     ef0:	429d      	cmp	r5, r3
     ef2:	d10d      	bne.n	f10 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     ef4:	4b0a      	ldr	r3, [pc, #40]	; (f20 <_impl_k_thread_abort+0x48>)
     ef6:	685a      	ldr	r2, [r3, #4]
     ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
     efc:	b922      	cbnz	r2, f08 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     efe:	f00e fd49 	bl	f994 <_update_time_slice_before_swap>

	return __swap(key);
     f02:	4620      	mov	r0, r4
     f04:	f7ff fe3c 	bl	b80 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f08:	685a      	ldr	r2, [r3, #4]
     f0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     f0e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     f10:	4620      	mov	r0, r4
}
     f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     f16:	f00e bca1 	b.w	f85c <_reschedule_threads>
     f1a:	bf00      	nop
     f1c:	20003930 	.word	0x20003930
     f20:	e000ed00 	.word	0xe000ed00

00000f24 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     f24:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     f26:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     f28:	4a0b      	ldr	r2, [pc, #44]	; (f58 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     f2a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     f2c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     f2e:	bf1e      	ittt	ne
	movne	r1, #0
     f30:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     f32:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     f34:	f00e f982 	blne	f23c <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     f38:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     f3a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     f3e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     f42:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     f46:	4905      	ldr	r1, [pc, #20]	; (f5c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     f48:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     f4a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     f4c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     f4e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     f52:	f7ff bdf3 	b.w	b3c <_ExcExit>
     f56:	0000      	.short	0x0000
	ldr r2, =_kernel
     f58:	20003930 	.word	0x20003930
	ldr r1, =_sw_isr_table
     f5c:	000000f8 	.word	0x000000f8

00000f60 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f60:	2020      	movs	r0, #32
    msr BASEPRI, r0
     f62:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     f66:	4805      	ldr	r0, [pc, #20]	; (f7c <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     f6c:	1840      	adds	r0, r0, r1
    msr PSP, r0
     f6e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     f72:	2002      	movs	r0, #2
    msr CONTROL, r0
     f74:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     f78:	f000 b806 	b.w	f88 <_PrepC>
    ldr r0, =_interrupt_stack
     f7c:	20004a10 	.word	0x20004a10

00000f80 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     f80:	bf30      	wfi
    b _SysNmiOnReset
     f82:	f7ff bffd 	b.w	f80 <_SysNmiOnReset>
     f86:	bf00      	nop

00000f88 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     f88:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f8a:	4b07      	ldr	r3, [pc, #28]	; (fa8 <_PrepC+0x20>)
     f8c:	4a07      	ldr	r2, [pc, #28]	; (fac <_PrepC+0x24>)
     f8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     f92:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     f94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f98:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     f9c:	f00e f97e 	bl	f29c <_bss_zero>
	_data_copy();
     fa0:	f00e f986 	bl	f2b0 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     fa4:	f00e f9a4 	bl	f2f0 <_Cstart>
     fa8:	00000000 	.word	0x00000000
     fac:	e000ed00 	.word	0xe000ed00

00000fb0 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     fb0:	b508      	push	{r3, lr}
	handler();
     fb2:	f7ff ffe5 	bl	f80 <_SysNmiOnReset>
	_ExcExit();
}
     fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     fba:	f7ff bdbf 	b.w	b3c <_ExcExit>
	...

00000fc0 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     fc0:	4b15      	ldr	r3, [pc, #84]	; (1018 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     fc2:	4916      	ldr	r1, [pc, #88]	; (101c <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     fc4:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     fc6:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     fc8:	680d      	ldr	r5, [r1, #0]
     fca:	f3c2 2207 	ubfx	r2, r2, #8, #8
     fce:	4295      	cmp	r5, r2
     fd0:	d80f      	bhi.n	ff2 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     fd2:	2200      	movs	r2, #0
     fd4:	6848      	ldr	r0, [r1, #4]
     fd6:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     fd8:	4295      	cmp	r5, r2
     fda:	f100 000c 	add.w	r0, r0, #12
     fde:	d10a      	bne.n	ff6 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
     fe0:	2205      	movs	r2, #5
     fe2:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
     fe4:	4b0e      	ldr	r3, [pc, #56]	; (1020 <arm_mpu_init+0x60>)
     fe6:	2201      	movs	r2, #1
     fe8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
     fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fee:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
     ff2:	2000      	movs	r0, #0
     ff4:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
     ff6:	f850 1c0c 	ldr.w	r1, [r0, #-12]
     ffa:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
     ffe:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1000:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1004:	f041 0110 	orr.w	r1, r1, #16
    1008:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    100a:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    100e:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1010:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1012:	611c      	str	r4, [r3, #16]
    1014:	e7e0      	b.n	fd8 <arm_mpu_init+0x18>
    1016:	bf00      	nop
    1018:	e000ed90 	.word	0xe000ed90
    101c:	20005410 	.word	0x20005410
    1020:	20000074 	.word	0x20000074

00001024 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TINYCRYPT_AES, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    1024:	4770      	bx	lr
	...

00001028 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    1028:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    102a:	4c11      	ldr	r4, [pc, #68]	; (1070 <sys_rand32_get+0x48>)
    102c:	f3bf 8f5b 	dmb	ish
    1030:	6820      	ldr	r0, [r4, #0]
    1032:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1036:	b960      	cbnz	r0, 1052 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    1038:	480e      	ldr	r0, [pc, #56]	; (1074 <sys_rand32_get+0x4c>)
    103a:	f00e f8d9 	bl	f1f0 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    103e:	f3bf 8f5b 	dmb	ish
    1042:	e854 3f00 	ldrex	r3, [r4]
    1046:	e844 0200 	strex	r2, r0, [r4]
    104a:	2a00      	cmp	r2, #0
    104c:	d1f9      	bne.n	1042 <sys_rand32_get+0x1a>
    104e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1052:	6843      	ldr	r3, [r0, #4]
    1054:	2204      	movs	r2, #4
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	eb0d 0102 	add.w	r1, sp, r2
    105c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    105e:	2800      	cmp	r0, #0
    1060:	da02      	bge.n	1068 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1062:	f000 fd9f 	bl	1ba4 <_timer_cycle_get_32>
    1066:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1068:	9801      	ldr	r0, [sp, #4]
    106a:	b002      	add	sp, #8
    106c:	bd10      	pop	{r4, pc}
    106e:	bf00      	nop
    1070:	20000078 	.word	0x20000078
    1074:	00010761 	.word	0x00010761

00001078 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1078:	b510      	push	{r4, lr}
    107a:	f04f 0320 	mov.w	r3, #32
    107e:	f3ef 8211 	mrs	r2, BASEPRI
    1082:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1086:	4c11      	ldr	r4, [pc, #68]	; (10cc <_m16src_stop+0x54>)
    1088:	7823      	ldrb	r3, [r4, #0]
    108a:	b923      	cbnz	r3, 1096 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    108c:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    1090:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1094:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    1096:	3b01      	subs	r3, #1
    1098:	b2db      	uxtb	r3, r3
    109a:	7023      	strb	r3, [r4, #0]
    109c:	b123      	cbz	r3, 10a8 <_m16src_stop+0x30>
    109e:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    10a2:	f06f 000f 	mvn.w	r0, #15
    10a6:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    10a8:	4b09      	ldr	r3, [pc, #36]	; (10d0 <_m16src_stop+0x58>)
    10aa:	7818      	ldrb	r0, [r3, #0]
    10ac:	2101      	movs	r1, #1
    10ae:	b128      	cbz	r0, 10bc <_m16src_stop+0x44>
		m16src_ref++;
    10b0:	7021      	strb	r1, [r4, #0]
    10b2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    10b6:	f06f 000a 	mvn.w	r0, #10
    10ba:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    10bc:	7019      	strb	r1, [r3, #0]
    10be:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    10c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10c6:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    10c8:	7018      	strb	r0, [r3, #0]

	return 0;
}
    10ca:	bd10      	pop	{r4, pc}
    10cc:	2000007e 	.word	0x2000007e
    10d0:	2000007d 	.word	0x2000007d

000010d4 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    10d4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    10d6:	2200      	movs	r2, #0
    10d8:	4610      	mov	r0, r2
    10da:	2101      	movs	r1, #1
    10dc:	f7ff fe64 	bl	da8 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    10e0:	2000      	movs	r0, #0
    10e2:	f7ff fe2f 	bl	d44 <_arch_irq_enable>

	return 0;
}
    10e6:	2000      	movs	r0, #0
    10e8:	bd08      	pop	{r3, pc}
	...

000010ec <_m16src_start>:
{
    10ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    10ee:	f04f 0220 	mov.w	r2, #32
    10f2:	f3ef 8311 	mrs	r3, BASEPRI
    10f6:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    10fa:	4a25      	ldr	r2, [pc, #148]	; (1190 <_m16src_start+0xa4>)
    10fc:	7810      	ldrb	r0, [r2, #0]
    10fe:	1c44      	adds	r4, r0, #1
    1100:	7014      	strb	r4, [r2, #0]
    1102:	b160      	cbz	r0, 111e <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1104:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    110c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1110:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1114:	bf14      	ite	ne
    1116:	2000      	movne	r0, #0
    1118:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    111e:	4d1d      	ldr	r5, [pc, #116]	; (1194 <_m16src_start+0xa8>)
    1120:	782f      	ldrb	r7, [r5, #0]
    1122:	b12f      	cbz	r7, 1130 <_m16src_start+0x44>
		m16src_ref--;
    1124:	7010      	strb	r0, [r2, #0]
    1126:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    112a:	f06f 000a 	mvn.w	r0, #10
    112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1130:	2601      	movs	r6, #1
    1132:	702e      	strb	r6, [r5, #0]
    1134:	f383 8811 	msr	BASEPRI, r3
    1138:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    113c:	b319      	cbz	r1, 1186 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    113e:	4638      	mov	r0, r7
    1140:	f7ff fe10 	bl	d64 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1144:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1148:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    114c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1150:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1152:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1156:	b192      	cbz	r2, 117e <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1158:	2200      	movs	r2, #0
    115a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    115e:	4a0e      	ldr	r2, [pc, #56]	; (1198 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1160:	f013 0f01 	tst.w	r3, #1
    1164:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1168:	bf08      	it	eq
    116a:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    116e:	2000      	movs	r0, #0
    1170:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1174:	f7ff fde6 	bl	d44 <_arch_irq_enable>
	m16src_grd = 0;
    1178:	2300      	movs	r3, #0
    117a:	702b      	strb	r3, [r5, #0]
    117c:	e7c4      	b.n	1108 <_m16src_start+0x1c>
			__WFE();
    117e:	bf20      	wfe
			__SEV();
    1180:	bf40      	sev
			__WFE();
    1182:	bf20      	wfe
    1184:	e7e5      	b.n	1152 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1186:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    118a:	6026      	str	r6, [r4, #0]
    118c:	e7f4      	b.n	1178 <_m16src_start+0x8c>
    118e:	bf00      	nop
    1190:	2000007e 	.word	0x2000007e
    1194:	2000007d 	.word	0x2000007d
    1198:	e000e100 	.word	0xe000e100

0000119c <_k32src_start>:
{
    119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    119e:	4606      	mov	r6, r0
    11a0:	460c      	mov	r4, r1
	__asm__ volatile(
    11a2:	f04f 0220 	mov.w	r2, #32
    11a6:	f3ef 8311 	mrs	r3, BASEPRI
    11aa:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    11ae:	4a2c      	ldr	r2, [pc, #176]	; (1260 <_k32src_start+0xc4>)
    11b0:	7815      	ldrb	r5, [r2, #0]
    11b2:	b165      	cbz	r5, 11ce <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    11b4:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    11b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    11bc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    11c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    11c4:	bf0c      	ite	eq
    11c6:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    11ca:	2000      	movne	r0, #0
    11cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    11ce:	2701      	movs	r7, #1
    11d0:	7017      	strb	r7, [r2, #0]
    11d2:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    11d6:	4628      	mov	r0, r5
    11d8:	f7ff fdc4 	bl	d64 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11e0:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    11e2:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    11e6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    11ea:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    11ee:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    11f2:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    11f4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    11f8:	b371      	cbz	r1, 1258 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    11fa:	0792      	lsls	r2, r2, #30
    11fc:	4f19      	ldr	r7, [pc, #100]	; (1264 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    11fe:	bf58      	it	pl
    1200:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1202:	f04f 0100 	mov.w	r1, #0
    1206:	f04f 0501 	mov.w	r5, #1
    120a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    120e:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1212:	bf58      	it	pl
    1214:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1218:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    121c:	f7ff fd92 	bl	d44 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1224:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1226:	2218      	movs	r2, #24
    1228:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    122c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1230:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1234:	f014 0103 	ands.w	r1, r4, #3
    1238:	d1be      	bne.n	11b8 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    123a:	2010      	movs	r0, #16
    123c:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1240:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1244:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1246:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    124a:	f7ff ff4f 	bl	10ec <_m16src_start>
		if (!err) {
    124e:	2800      	cmp	r0, #0
    1250:	d1b2      	bne.n	11b8 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1252:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1256:	e7af      	b.n	11b8 <_k32src_start+0x1c>
		__WFE();
    1258:	bf20      	wfe
		__SEV();
    125a:	bf40      	sev
		__WFE();
    125c:	bf20      	wfe
    125e:	e7c9      	b.n	11f4 <_k32src_start+0x58>
    1260:	2000007c 	.word	0x2000007c
    1264:	e000e100 	.word	0xe000e100

00001268 <_power_clock_isr>:
{
    1268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    126a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    126e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1270:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1274:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1278:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    127c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    1280:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    1284:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    1288:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    128c:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    1290:	f1be 0f00 	cmp.w	lr, #0
    1294:	d003      	beq.n	129e <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    1296:	f04f 0e00 	mov.w	lr, #0
    129a:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    129e:	b127      	cbz	r7, 12aa <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12a4:	2700      	movs	r7, #0
    12a6:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    12aa:	b13a      	cbz	r2, 12bc <_power_clock_isr+0x54>
    12ac:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    12ae:	bf41      	itttt	mi
    12b0:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    12b4:	2201      	movmi	r2, #1
    12b6:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    12ba:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    12bc:	b120      	cbz	r0, 12c8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    12be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12c2:	2200      	movs	r2, #0
    12c4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    12c8:	b149      	cbz	r1, 12de <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    12ca:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    12ce:	2100      	movs	r1, #0
    12d0:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    12d4:	4628      	mov	r0, r5
    12d6:	f7ff fecf 	bl	1078 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    12da:	2301      	movs	r3, #1
    12dc:	6163      	str	r3, [r4, #20]
	if (ctto) {
    12de:	b176      	cbz	r6, 12fe <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    12e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12e4:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12e6:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    12e8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    12ec:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    12ee:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    12f2:	f7ff fefb 	bl	10ec <_m16src_start>
		if (!err) {
    12f6:	b910      	cbnz	r0, 12fe <_power_clock_isr+0x96>
    12f8:	4b01      	ldr	r3, [pc, #4]	; (1300 <_power_clock_isr+0x98>)
    12fa:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    12fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1300:	e000e100 	.word	0xe000e100

00001304 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1304:	6803      	ldr	r3, [r0, #0]
    1306:	689b      	ldr	r3, [r3, #8]
    1308:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    130a:	6883      	ldr	r3, [r0, #8]
{
    130c:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    130e:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1310:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1312:	fa24 f300 	lsr.w	r3, r4, r0
    1316:	07db      	lsls	r3, r3, #31
    1318:	d507      	bpl.n	132a <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    131a:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1322:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1326:	428b      	cmp	r3, r1
    1328:	d004      	beq.n	1334 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    132a:	3001      	adds	r0, #1
    132c:	2808      	cmp	r0, #8
    132e:	d1f0      	bne.n	1312 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    1330:	f06f 0012 	mvn.w	r0, #18
}
    1334:	bd10      	pop	{r4, pc}

00001336 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1336:	6800      	ldr	r0, [r0, #0]
    1338:	6880      	ldr	r0, [r0, #8]
    133a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    133c:	b941      	cbnz	r1, 1350 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    133e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1342:	fa21 f202 	lsr.w	r2, r1, r2
    1346:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    134a:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    134c:	2000      	movs	r0, #0
    134e:	4770      	bx	lr
		*value = gpio->IN;
    1350:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1354:	e7f9      	b.n	134a <gpio_nrf5_read+0x14>

00001356 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1356:	6800      	ldr	r0, [r0, #0]
    1358:	6880      	ldr	r0, [r0, #8]
    135a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    135c:	b949      	cbnz	r1, 1372 <gpio_nrf5_write+0x1c>
    135e:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1360:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    1362:	b11b      	cbz	r3, 136c <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    1364:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    1368:	2000      	movs	r0, #0
    136a:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    136c:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    1370:	e7fa      	b.n	1368 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    1372:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    1376:	e7f7      	b.n	1368 <gpio_nrf5_write+0x12>

00001378 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1378:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    137a:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    137c:	b13a      	cbz	r2, 138e <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    137e:	681a      	ldr	r2, [r3, #0]
    1380:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    1382:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    1384:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    1386:	b902      	cbnz	r2, 138a <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    1388:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    138a:	2000      	movs	r0, #0
    138c:	bd10      	pop	{r4, pc}
    138e:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1390:	2800      	cmp	r0, #0
    1392:	d0fa      	beq.n	138a <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    1394:	4281      	cmp	r1, r0
    1396:	d10e      	bne.n	13b6 <gpio_nrf5_manage_callback+0x3e>
    1398:	685c      	ldr	r4, [r3, #4]
    139a:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    139c:	b932      	cbnz	r2, 13ac <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    139e:	42a1      	cmp	r1, r4
		list->head = node->next;
    13a0:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    13a2:	d100      	bne.n	13a6 <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    13a4:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    13a6:	2300      	movs	r3, #0
    13a8:	600b      	str	r3, [r1, #0]
    13aa:	e7ee      	b.n	138a <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    13ac:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    13ae:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    13b0:	bf08      	it	eq
    13b2:	605a      	streq	r2, [r3, #4]
    13b4:	e7f7      	b.n	13a6 <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    13b6:	4602      	mov	r2, r0
    13b8:	6800      	ldr	r0, [r0, #0]
    13ba:	e7e9      	b.n	1390 <gpio_nrf5_manage_callback+0x18>

000013bc <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    13bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13be:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    13c0:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    13c2:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    13c4:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    13c6:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    13c8:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    13ca:	b9a1      	cbnz	r1, 13f6 <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    13cc:	4621      	mov	r1, r4
    13ce:	f7ff ff99 	bl	1304 <gpiote_find_channel>
		if (i < 0) {
    13d2:	2800      	cmp	r0, #0
    13d4:	db11      	blt.n	13fa <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    13d6:	68ba      	ldr	r2, [r7, #8]
    13d8:	2301      	movs	r3, #1
    13da:	fa03 f404 	lsl.w	r4, r3, r4
    13de:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    13e0:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    13e4:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    13e8:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    13ea:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    13ee:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    13f2:	4628      	mov	r0, r5
    13f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    13f6:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    13fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000013fc <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    13fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13fe:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1400:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1402:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1404:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1406:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1408:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    140a:	b989      	cbnz	r1, 1430 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    140c:	4621      	mov	r1, r4
    140e:	f7ff ff79 	bl	1304 <gpiote_find_channel>
		if (i < 0) {
    1412:	2800      	cmp	r0, #0
    1414:	db0e      	blt.n	1434 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    1416:	68b2      	ldr	r2, [r6, #8]
    1418:	2301      	movs	r3, #1
    141a:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    141e:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    1422:	ea22 0404 	bic.w	r4, r2, r4
    1426:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    1428:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    142c:	4628      	mov	r0, r5
    142e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1430:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001436 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    1436:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    1438:	2200      	movs	r2, #0
    143a:	2101      	movs	r1, #1
    143c:	2006      	movs	r0, #6
    143e:	f7ff fcb3 	bl	da8 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1442:	2006      	movs	r0, #6
    1444:	f7ff fc7e 	bl	d44 <_arch_irq_enable>

	return 0;
}
    1448:	2000      	movs	r0, #0
    144a:	bd08      	pop	{r3, pc}

0000144c <gpio_nrf5_port_isr>:
{
    144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    144e:	6803      	ldr	r3, [r0, #0]
{
    1450:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1452:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1454:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1456:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1458:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    145a:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    145c:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    145e:	2701      	movs	r7, #1
    1460:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    1464:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    1468:	f1be 0f00 	cmp.w	lr, #0
    146c:	d008      	beq.n	1480 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    146e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1472:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    1476:	f3c1 2104 	ubfx	r1, r1, #8, #5
    147a:	fa07 f101 	lsl.w	r1, r7, r1
    147e:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1480:	3201      	adds	r2, #1
    1482:	2a08      	cmp	r2, #8
    1484:	d1ec      	bne.n	1460 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    1486:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1488:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    148a:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    148c:	f7ff fc6a 	bl	d64 <_arch_irq_disable>
    1490:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1492:	b924      	cbnz	r4, 149e <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1494:	2006      	movs	r0, #6
}
    1496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    149a:	f7ff bc53 	b.w	d44 <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    149e:	68a3      	ldr	r3, [r4, #8]
    14a0:	421d      	tst	r5, r3
    14a2:	d0f5      	beq.n	1490 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    14a4:	6863      	ldr	r3, [r4, #4]
    14a6:	462a      	mov	r2, r5
    14a8:	4621      	mov	r1, r4
    14aa:	4630      	mov	r0, r6
    14ac:	4798      	blx	r3
    14ae:	e7ef      	b.n	1490 <gpio_nrf5_port_isr+0x44>

000014b0 <gpio_nrf5_config>:
{
    14b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    14b4:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    14b6:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    14b8:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    14ba:	6892      	ldr	r2, [r2, #8]
{
    14bc:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    14be:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    14c0:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    14c2:	b119      	cbz	r1, 14cc <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    14c4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    14c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    14cc:	f403 7240 	and.w	r2, r3, #768	; 0x300
    14d0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    14d4:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    14d8:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    14dc:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    14e0:	d056      	beq.n	1590 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    14e2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    14e6:	bf0c      	ite	eq
    14e8:	2204      	moveq	r2, #4
    14ea:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    14ec:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    14f0:	bf08      	it	eq
    14f2:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    14f6:	f013 0f01 	tst.w	r3, #1
    14fa:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 15c4 <gpio_nrf5_config+0x114>
    14fe:	ea4f 0181 	mov.w	r1, r1, lsl #2
    1502:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    1506:	d04e      	beq.n	15a6 <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    1508:	2a0c      	cmp	r2, #12
    150a:	d143      	bne.n	1594 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    150c:	f04f 0e01 	mov.w	lr, #1
    1510:	fa0e fe04 	lsl.w	lr, lr, r4
    1514:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    1518:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    151a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    151e:	f041 0103 	orr.w	r1, r1, #3
    1522:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    1524:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    1528:	f013 0002 	ands.w	r0, r3, #2
    152c:	d047      	beq.n	15be <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    152e:	0699      	lsls	r1, r3, #26
    1530:	d5c8      	bpl.n	14c4 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1532:	065a      	lsls	r2, r3, #25
    1534:	d43e      	bmi.n	15b4 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    1536:	f013 0f04 	tst.w	r3, #4
    153a:	bf14      	ite	ne
    153c:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    1540:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1544:	68f8      	ldr	r0, [r7, #12]
    1546:	f7fe fea7 	bl	298 <__popcountsi2>
    154a:	2808      	cmp	r0, #8
    154c:	d035      	beq.n	15ba <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    154e:	4621      	mov	r1, r4
    1550:	4640      	mov	r0, r8
    1552:	f7ff fed7 	bl	1304 <gpiote_find_channel>
		if (i < 0) {
    1556:	2800      	cmp	r0, #0
    1558:	68fb      	ldr	r3, [r7, #12]
    155a:	da08      	bge.n	156e <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    155c:	43da      	mvns	r2, r3
    155e:	fa92 f0a2 	rbit	r0, r2
    1562:	2a00      	cmp	r2, #0
    1564:	fab0 f080 	clz	r0, r0
    1568:	bf08      	it	eq
    156a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    156e:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    1570:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    1572:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    1576:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    1578:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    157c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    1580:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    1582:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    1584:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    1586:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    158a:	2000      	movs	r0, #0
    158c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    1590:	220c      	movs	r2, #12
    1592:	e7ab      	b.n	14ec <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    1594:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    1596:	bf02      	ittt	eq
    1598:	f04f 0e01 	moveq.w	lr, #1
    159c:	fa0e fe04 	lsleq.w	lr, lr, r4
    15a0:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    15a4:	e7b8      	b.n	1518 <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    15a6:	4449      	add	r1, r9
    15a8:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    15ac:	430a      	orrs	r2, r1
    15ae:	ea42 020e 	orr.w	r2, r2, lr
    15b2:	e7b7      	b.n	1524 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    15b4:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    15b8:	e7c4      	b.n	1544 <gpio_nrf5_config+0x94>
			return -EIO;
    15ba:	f06f 0004 	mvn.w	r0, #4
}
    15be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    15c2:	bf00      	nop
    15c4:	0001079c 	.word	0x0001079c

000015c8 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    15c8:	6803      	ldr	r3, [r0, #0]
    15ca:	689b      	ldr	r3, [r3, #8]
    15cc:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    15ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    15d2:	b132      	cbz	r2, 15e2 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    15d4:	2000      	movs	r0, #0
    15d6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    15da:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    15de:	700b      	strb	r3, [r1, #0]

	return 0;
    15e0:	4770      	bx	lr
		return -1;
    15e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    15e6:	4770      	bx	lr

000015e8 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    15e8:	6803      	ldr	r3, [r0, #0]
    15ea:	689b      	ldr	r3, [r3, #8]
    15ec:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    15ee:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    15f2:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    15f6:	2a00      	cmp	r2, #0
    15f8:	d0fb      	beq.n	15f2 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    15fa:	2200      	movs	r2, #0
    15fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1600:	4608      	mov	r0, r1
    1602:	4770      	bx	lr

00001604 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1604:	6803      	ldr	r3, [r0, #0]
    1606:	689b      	ldr	r3, [r3, #8]
    1608:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    160a:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    160e:	b118      	cbz	r0, 1618 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1610:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1614:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1618:	f000 000f 	and.w	r0, r0, #15
    161c:	4770      	bx	lr

0000161e <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    161e:	b570      	push	{r4, r5, r6, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1620:	6803      	ldr	r3, [r0, #0]
    1622:	689b      	ldr	r3, [r3, #8]
    1624:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    1626:	2300      	movs	r3, #0
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    1628:	461e      	mov	r6, r3
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    162a:	b2d8      	uxtb	r0, r3
    162c:	1a15      	subs	r5, r2, r0
    162e:	2d00      	cmp	r5, #0
    1630:	dd03      	ble.n	163a <uart_nrf5_fifo_fill+0x1c>
    1632:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    1636:	3301      	adds	r3, #1
    1638:	b905      	cbnz	r5, 163c <uart_nrf5_fifo_fill+0x1e>
		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
	}

	return (int)num_tx;
}
    163a:	bd70      	pop	{r4, r5, r6, pc}
		uart->EVENTS_TXDRDY = 0;
    163c:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
		uart->TXD = (u8_t)tx_data[num_tx++];
    1640:	5c08      	ldrb	r0, [r1, r0]
    1642:	f8c4 051c 	str.w	r0, [r4, #1308]	; 0x51c
    1646:	e7f0      	b.n	162a <uart_nrf5_fifo_fill+0xc>

00001648 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    1648:	b570      	push	{r4, r5, r6, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    164a:	6803      	ldr	r3, [r0, #0]
    164c:	689b      	ldr	r3, [r3, #8]
    164e:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    1650:	2300      	movs	r3, #0
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    1652:	461e      	mov	r6, r3
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    1654:	b2d8      	uxtb	r0, r3
    1656:	1a15      	subs	r5, r2, r0
    1658:	2d00      	cmp	r5, #0
    165a:	dd03      	ble.n	1664 <uart_nrf5_fifo_read+0x1c>
    165c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    1660:	3301      	adds	r3, #1
    1662:	b905      	cbnz	r5, 1666 <uart_nrf5_fifo_read+0x1e>
		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
	}

	return num_rx;
}
    1664:	bd70      	pop	{r4, r5, r6, pc}
		uart->EVENTS_RXDRDY = 0;
    1666:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
		rx_data[num_rx++] = (u8_t)uart->RXD;
    166a:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    166e:	540d      	strb	r5, [r1, r0]
    1670:	e7f0      	b.n	1654 <uart_nrf5_fifo_read+0xc>

00001672 <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1672:	6803      	ldr	r3, [r0, #0]
    1674:	689b      	ldr	r3, [r3, #8]
    1676:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    1678:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1680:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    1684:	4770      	bx	lr

00001686 <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1686:	6803      	ldr	r3, [r0, #0]
    1688:	689b      	ldr	r3, [r3, #8]
    168a:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    168c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    1690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1694:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    1698:	4770      	bx	lr

0000169a <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    169a:	6803      	ldr	r3, [r0, #0]
    169c:	689b      	ldr	r3, [r3, #8]
    169e:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    16a0:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    16a4:	4770      	bx	lr

000016a6 <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    16a6:	6803      	ldr	r3, [r0, #0]
    16a8:	689b      	ldr	r3, [r3, #8]
    16aa:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    16ac:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    16b0:	f043 0304 	orr.w	r3, r3, #4
    16b4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    16b8:	4770      	bx	lr

000016ba <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    16ba:	6803      	ldr	r3, [r0, #0]
    16bc:	689b      	ldr	r3, [r3, #8]
    16be:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    16c0:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    16c4:	f043 0304 	orr.w	r3, r3, #4
    16c8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    16cc:	4770      	bx	lr

000016ce <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    16ce:	6803      	ldr	r3, [r0, #0]
    16d0:	689b      	ldr	r3, [r3, #8]
    16d2:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    16d4:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    16d8:	fab0 f080 	clz	r0, r0
    16dc:	0940      	lsrs	r0, r0, #5
    16de:	4770      	bx	lr

000016e0 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    16e0:	6803      	ldr	r3, [r0, #0]
    16e2:	689b      	ldr	r3, [r3, #8]
    16e4:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    16e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    16ea:	4770      	bx	lr

000016ec <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    16ec:	6803      	ldr	r3, [r0, #0]
    16ee:	689b      	ldr	r3, [r3, #8]
    16f0:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    16f2:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    16f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    16fa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    16fe:	4770      	bx	lr

00001700 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1700:	6803      	ldr	r3, [r0, #0]
    1702:	689b      	ldr	r3, [r3, #8]
    1704:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    1706:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    170a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    170e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    1712:	4770      	bx	lr

00001714 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    1714:	2001      	movs	r0, #1
    1716:	4770      	bx	lr

00001718 <uart_nrf5_irq_callback_set>:
/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);

	dev_data->cb = cb;
    1718:	6883      	ldr	r3, [r0, #8]
    171a:	6059      	str	r1, [r3, #4]
    171c:	4770      	bx	lr

0000171e <uart_nrf5_isr>:
void uart_nrf5_isr(void *arg)
{
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);

	if (dev_data->cb) {
    171e:	6883      	ldr	r3, [r0, #8]
    1720:	685b      	ldr	r3, [r3, #4]
    1722:	b103      	cbz	r3, 1726 <uart_nrf5_isr+0x8>
		dev_data->cb(dev);
    1724:	4718      	bx	r3
    1726:	4770      	bx	lr

00001728 <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    1728:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    172a:	2002      	movs	r0, #2
    172c:	2200      	movs	r2, #0
    172e:	2101      	movs	r1, #1
    1730:	f7ff fb3a 	bl	da8 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    1734:	2002      	movs	r0, #2
}
    1736:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF5_IRQ_UART0_IRQn);
    173a:	f7ff bb03 	b.w	d44 <_arch_irq_enable>

0000173e <uart_nrf5_irq_is_pending>:
{
    173e:	b508      	push	{r3, lr}
    1740:	4602      	mov	r2, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    1742:	f7ff ffaa 	bl	169a <uart_nrf5_irq_tx_ready>
    1746:	b930      	cbnz	r0, 1756 <uart_nrf5_irq_is_pending+0x18>
    1748:	4610      	mov	r0, r2
    174a:	f7ff ffc9 	bl	16e0 <uart_nrf5_irq_rx_ready>
    174e:	3000      	adds	r0, #0
    1750:	bf18      	it	ne
    1752:	2001      	movne	r0, #1
    1754:	bd08      	pop	{r3, pc}
    1756:	2001      	movs	r0, #1
}
    1758:	bd08      	pop	{r3, pc}

0000175a <gpio_pin_configure>:
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    175a:	6843      	ldr	r3, [r0, #4]
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
    175c:	b410      	push	{r4}
	return api->config(port, access_op, pin, flags);
    175e:	681c      	ldr	r4, [r3, #0]
    1760:	4613      	mov	r3, r2
    1762:	46a4      	mov	ip, r4
    1764:	460a      	mov	r2, r1
	return gpio_config(port, GPIO_ACCESS_BY_PIN, pin, flags);
}
    1766:	bc10      	pop	{r4}
	return api->config(port, access_op, pin, flags);
    1768:	2100      	movs	r1, #0
    176a:	4760      	bx	ip

0000176c <uart_nrf5_init>:
{
    176c:	b570      	push	{r4, r5, r6, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    176e:	6803      	ldr	r3, [r0, #0]
    1770:	689b      	ldr	r3, [r3, #8]
{
    1772:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1774:	4821      	ldr	r0, [pc, #132]	; (17fc <uart_nrf5_init+0x90>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1776:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1778:	f00d fd3a 	bl	f1f0 <device_get_binding>
	(void) gpio_pin_configure(gpio_dev,
    177c:	f240 1201 	movw	r2, #257	; 0x101
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1780:	4606      	mov	r6, r0
	(void) gpio_pin_configure(gpio_dev,
    1782:	2106      	movs	r1, #6
    1784:	f7ff ffe9 	bl	175a <gpio_pin_configure>
	(void) gpio_pin_configure(gpio_dev,
    1788:	2200      	movs	r2, #0
    178a:	2108      	movs	r1, #8
    178c:	4630      	mov	r0, r6
    178e:	f7ff ffe4 	bl	175a <gpio_pin_configure>
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1792:	2306      	movs	r3, #6
    1794:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1798:	2308      	movs	r3, #8
    179a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	(void) gpio_pin_configure(gpio_dev,
    179e:	f240 1201 	movw	r2, #257	; 0x101
    17a2:	2105      	movs	r1, #5
    17a4:	4630      	mov	r0, r6
    17a6:	f7ff ffd8 	bl	175a <gpio_pin_configure>
	(void) gpio_pin_configure(gpio_dev,
    17aa:	2200      	movs	r2, #0
    17ac:	2107      	movs	r1, #7
    17ae:	4630      	mov	r0, r6
    17b0:	f7ff ffd3 	bl	175a <gpio_pin_configure>
	uart->PSELRTS = CONFIG_UART_NRF5_GPIO_RTS_PIN;
    17b4:	2305      	movs	r3, #5
    17b6:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    17ba:	68aa      	ldr	r2, [r5, #8]
    17bc:	4910      	ldr	r1, [pc, #64]	; (1800 <uart_nrf5_init+0x94>)
	uart->PSELCTS = CONFIG_UART_NRF5_GPIO_CTS_PIN;
    17be:	2307      	movs	r3, #7
    17c0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	uart->CONFIG = (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);
    17c4:	2301      	movs	r3, #1
    17c6:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    17ca:	6011      	str	r1, [r2, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    17cc:	682a      	ldr	r2, [r5, #0]
    17ce:	6892      	ldr	r2, [r2, #8]
    17d0:	6811      	ldr	r1, [r2, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    17d2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    17d6:	f8c1 0524 	str.w	r0, [r1, #1316]	; 0x524
	uart->EVENTS_TXDRDY = 0;
    17da:	2600      	movs	r6, #0
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    17dc:	2104      	movs	r1, #4
    17de:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    17e2:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    17e6:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    17ea:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    17ec:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    17ee:	4b05      	ldr	r3, [pc, #20]	; (1804 <uart_nrf5_init+0x98>)
    17f0:	606b      	str	r3, [r5, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    17f2:	4628      	mov	r0, r5
    17f4:	6893      	ldr	r3, [r2, #8]
    17f6:	4798      	blx	r3
}
    17f8:	4630      	mov	r0, r6
    17fa:	bd70      	pop	{r4, r5, r6, pc}
    17fc:	00010804 	.word	0x00010804
    1800:	000f4240 	.word	0x000f4240
    1804:	00010818 	.word	0x00010818

00001808 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    180c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    180e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1810:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1812:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1814:	440a      	add	r2, r1
	s = &rng->rand[first];
    1816:	4406      	add	r6, r0
	if (first <= last) {
    1818:	d81f      	bhi.n	185a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    181a:	1ae4      	subs	r4, r4, r3
    181c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    181e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1820:	bf3e      	ittt	cc
    1822:	1a64      	subcc	r4, r4, r1
    1824:	b2e7      	uxtbcc	r7, r4
    1826:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1828:	4423      	add	r3, r4
		octets -= avail;
    182a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    182e:	bf28      	it	cs
    1830:	2700      	movcs	r7, #0
		first += avail;
    1832:	b2db      	uxtb	r3, r3
		octets -= avail;
    1834:	b2c9      	uxtb	r1, r1
    1836:	4434      	add	r4, r6

		while (avail--) {
    1838:	42a6      	cmp	r6, r4
    183a:	d109      	bne.n	1850 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    183c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    183e:	7843      	ldrb	r3, [r0, #1]
    1840:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1842:	bf82      	ittt	hi
    1844:	4b20      	ldrhi	r3, [pc, #128]	; (18c8 <get+0xc0>)
    1846:	2201      	movhi	r2, #1
    1848:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    184a:	4608      	mov	r0, r1
    184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1850:	f816 5b01 	ldrb.w	r5, [r6], #1
    1854:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1858:	e7ee      	b.n	1838 <get+0x30>
		avail = rng->count - first;
    185a:	7805      	ldrb	r5, [r0, #0]
    185c:	1aed      	subs	r5, r5, r3
    185e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1860:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1862:	bf3f      	itttt	cc
    1864:	1a67      	subcc	r7, r4, r1
    1866:	19ed      	addcc	r5, r5, r7
    1868:	b2ef      	uxtbcc	r7, r5
    186a:	460d      	movcc	r5, r1
			first += avail;
    186c:	bf38      	it	cc
    186e:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1870:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1874:	bf32      	itee	cc
    1876:	b2db      	uxtbcc	r3, r3
    1878:	4627      	movcs	r7, r4
			first = 0;
    187a:	2300      	movcs	r3, #0
		octets -= avail;
    187c:	b2c9      	uxtb	r1, r1
    187e:	4696      	mov	lr, r2
    1880:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1884:	4566      	cmp	r6, ip
    1886:	d119      	bne.n	18bc <get+0xb4>
    1888:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    188a:	2900      	cmp	r1, #0
    188c:	d0d6      	beq.n	183c <get+0x34>
    188e:	2c00      	cmp	r4, #0
    1890:	d0d4      	beq.n	183c <get+0x34>
			if (octets < last) {
    1892:	428c      	cmp	r4, r1
    1894:	bf8a      	itet	hi
    1896:	460b      	movhi	r3, r1
    1898:	4623      	movls	r3, r4
				remaining = last - octets;
    189a:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    189c:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    18a0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    18a4:	bf8c      	ite	hi
    18a6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    18a8:	2700      	movls	r7, #0
			octets -= last;
    18aa:	b2c9      	uxtb	r1, r1
    18ac:	18f4      	adds	r4, r6, r3
			while (last--) {
    18ae:	42a6      	cmp	r6, r4
    18b0:	d0c4      	beq.n	183c <get+0x34>
				*(--d) = *s++;
    18b2:	f816 5b01 	ldrb.w	r5, [r6], #1
    18b6:	f802 5d01 	strb.w	r5, [r2, #-1]!
    18ba:	e7f8      	b.n	18ae <get+0xa6>
			*(--d) = *s++;
    18bc:	f816 8b01 	ldrb.w	r8, [r6], #1
    18c0:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    18c4:	e7de      	b.n	1884 <get+0x7c>
    18c6:	bf00      	nop
    18c8:	4000d000 	.word	0x4000d000

000018cc <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    18cc:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    18ce:	b1d0      	cbz	r0, 1906 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    18d0:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    18d2:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    18d4:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    18d6:	1c53      	adds	r3, r2, #1
    18d8:	b2db      	uxtb	r3, r3
		last = 0;
    18da:	42ab      	cmp	r3, r5
    18dc:	bf08      	it	eq
    18de:	2300      	moveq	r3, #0
	if (last == rng->first) {
    18e0:	42a3      	cmp	r3, r4
    18e2:	d010      	beq.n	1906 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    18e4:	b161      	cbz	r1, 1900 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    18e6:	490a      	ldr	r1, [pc, #40]	; (1910 <isr+0x44>)
    18e8:	4402      	add	r2, r0
    18ea:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    18ee:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    18f0:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    18f2:	3301      	adds	r3, #1
    18f4:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    18f6:	429d      	cmp	r5, r3
    18f8:	bf08      	it	eq
    18fa:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    18fc:	42a3      	cmp	r3, r4
    18fe:	d005      	beq.n	190c <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1900:	f06f 000f 	mvn.w	r0, #15
    1904:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1906:	f06f 0036 	mvn.w	r0, #54	; 0x36
    190a:	bd30      	pop	{r4, r5, pc}
		return 0;
    190c:	2000      	movs	r0, #0
}
    190e:	bd30      	pop	{r4, r5, pc}
    1910:	4000d000 	.word	0x4000d000

00001914 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1914:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1916:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1918:	2201      	movs	r2, #1
    191a:	4611      	mov	r1, r2
    191c:	4620      	mov	r0, r4
    191e:	f00e f863 	bl	f9e8 <_impl_k_sem_init>
    1922:	f104 0018 	add.w	r0, r4, #24
    1926:	2201      	movs	r2, #1
    1928:	2100      	movs	r1, #0
    192a:	f00e f85d 	bl	f9e8 <_impl_k_sem_init>
	rng->threshold = threshold;
    192e:	2304      	movs	r3, #4
    1930:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1934:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1936:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1938:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    193c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    193e:	4b11      	ldr	r3, [pc, #68]	; (1984 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1940:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1944:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1946:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    194a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    194e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1952:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1956:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    195a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    195e:	f042 0201 	orr.w	r2, r2, #1
    1962:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1966:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1968:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    196c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    196e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1972:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1974:	462a      	mov	r2, r5
    1976:	f7ff fa17 	bl	da8 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    197a:	4630      	mov	r0, r6
    197c:	f7ff f9e2 	bl	d44 <_arch_irq_enable>

	return 0;
}
    1980:	4628      	mov	r0, r5
    1982:	bd70      	pop	{r4, r5, r6, pc}
    1984:	4000d000 	.word	0x4000d000

00001988 <isr_rand>:
{
    1988:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    198a:	4b12      	ldr	r3, [pc, #72]	; (19d4 <isr_rand+0x4c>)
    198c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1990:	b1fb      	cbz	r3, 19d2 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1992:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1994:	2101      	movs	r1, #1
    1996:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    199a:	f7ff ff97 	bl	18cc <isr>
		if (ret != -EBUSY) {
    199e:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    19a2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    19a4:	d00d      	beq.n	19c2 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    19a6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    19aa:	bf14      	ite	ne
    19ac:	2100      	movne	r1, #0
    19ae:	2101      	moveq	r1, #1
    19b0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    19b4:	f7ff ff8a 	bl	18cc <isr>
    19b8:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    19ba:	f105 0018 	add.w	r0, r5, #24
    19be:	f00e f81d 	bl	f9fc <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    19c2:	4b04      	ldr	r3, [pc, #16]	; (19d4 <isr_rand+0x4c>)
    19c4:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    19c6:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    19c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    19cc:	bf1c      	itt	ne
    19ce:	2201      	movne	r2, #1
    19d0:	605a      	strne	r2, [r3, #4]
    19d2:	bd38      	pop	{r3, r4, r5, pc}
    19d4:	4000d000 	.word	0x4000d000

000019d8 <entropy_nrf5_get_entropy>:
{
    19d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    19dc:	6885      	ldr	r5, [r0, #8]
{
    19de:	460f      	mov	r7, r1
    19e0:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    19e2:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    19e6:	b914      	cbnz	r4, 19ee <entropy_nrf5_get_entropy+0x16>
}
    19e8:	4620      	mov	r0, r4
    19ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19ee:	2cff      	cmp	r4, #255	; 0xff
    19f0:	4623      	mov	r3, r4
    19f2:	bf28      	it	cs
    19f4:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    19f6:	1ae4      	subs	r4, r4, r3
    19f8:	b2de      	uxtb	r6, r3
    19fa:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    19fc:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1a04:	4628      	mov	r0, r5
    1a06:	f00e f859 	bl	fabc <_impl_k_sem_take>
    1a0a:	4631      	mov	r1, r6
    1a0c:	463a      	mov	r2, r7
    1a0e:	4648      	mov	r0, r9
    1a10:	f7ff fefa 	bl	1808 <get>
    1a14:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1a16:	4628      	mov	r0, r5
    1a18:	f00d fff0 	bl	f9fc <_impl_k_sem_give>
			if (len8) {
    1a1c:	2e00      	cmp	r6, #0
    1a1e:	d0e2      	beq.n	19e6 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1a24:	4640      	mov	r0, r8
    1a26:	f00e f849 	bl	fabc <_impl_k_sem_take>
    1a2a:	e7e9      	b.n	1a00 <entropy_nrf5_get_entropy+0x28>

00001a2c <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    1a2c:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    1a2e:	4802      	ldr	r0, [pc, #8]	; (1a38 <entropy_get_entropy_isr+0xc>)
    1a30:	460a      	mov	r2, r1
    1a32:	4619      	mov	r1, r3
    1a34:	f7ff bee8 	b.w	1808 <get>
    1a38:	200000cc 	.word	0x200000cc

00001a3c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1a3c:	4b08      	ldr	r3, [pc, #32]	; (1a60 <rtc_compare_set+0x24>)
    1a3e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1a42:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1a46:	1ac0      	subs	r0, r0, r3
    1a48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a4c:	4b05      	ldr	r3, [pc, #20]	; (1a64 <rtc_compare_set+0x28>)
    1a4e:	3802      	subs	r0, #2
    1a50:	4298      	cmp	r0, r3
    1a52:	bf82      	ittt	hi
    1a54:	4b04      	ldrhi	r3, [pc, #16]	; (1a68 <rtc_compare_set+0x2c>)
    1a56:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1a5a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1a5e:	4770      	bx	lr
    1a60:	40011000 	.word	0x40011000
    1a64:	007ffffd 	.word	0x007ffffd
    1a68:	e000e100 	.word	0xe000e100

00001a6c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1a6c:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1a6e:	4b12      	ldr	r3, [pc, #72]	; (1ab8 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1a70:	4c12      	ldr	r4, [pc, #72]	; (1abc <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1a72:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1a76:	6822      	ldr	r2, [r4, #0]
    1a78:	1a80      	subs	r0, r0, r2
    1a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1a7e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1a82:	d911      	bls.n	1aa8 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1a84:	490e      	ldr	r1, [pc, #56]	; (1ac0 <rtc_announce_set_next+0x54>)
    1a86:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1a88:	f240 1347 	movw	r3, #327	; 0x147
    1a8c:	fbb0 f0f3 	udiv	r0, r0, r3
    1a90:	4288      	cmp	r0, r1
    1a92:	bf28      	it	cs
    1a94:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1a96:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1a9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1a9e:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1aa0:	4b08      	ldr	r3, [pc, #32]	; (1ac4 <rtc_announce_set_next+0x58>)
    1aa2:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1aa4:	f00e f84c 	bl	fb40 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1aa8:	6820      	ldr	r0, [r4, #0]
}
    1aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1aae:	f200 1047 	addw	r0, r0, #327	; 0x147
    1ab2:	f7ff bfc3 	b.w	1a3c <rtc_compare_set>
    1ab6:	bf00      	nop
    1ab8:	40011000 	.word	0x40011000
    1abc:	200000e4 	.word	0x200000e4
    1ac0:	200000e0 	.word	0x200000e0
    1ac4:	2000561c 	.word	0x2000561c

00001ac8 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1ac8:	4b02      	ldr	r3, [pc, #8]	; (1ad4 <rtc1_nrf5_isr+0xc>)
    1aca:	2200      	movs	r2, #0
    1acc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1ad0:	f7ff bfcc 	b.w	1a6c <rtc_announce_set_next>
    1ad4:	40011000 	.word	0x40011000

00001ad8 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1ad8:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1adc:	4298      	cmp	r0, r3
    1ade:	bf28      	it	cs
    1ae0:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1ae2:	4b05      	ldr	r3, [pc, #20]	; (1af8 <_timer_idle_enter+0x20>)
    1ae4:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1ae6:	4b05      	ldr	r3, [pc, #20]	; (1afc <_timer_idle_enter+0x24>)
    1ae8:	681b      	ldr	r3, [r3, #0]
    1aea:	f240 1247 	movw	r2, #327	; 0x147
    1aee:	fb02 3000 	mla	r0, r2, r0, r3
    1af2:	f7ff bfa3 	b.w	1a3c <rtc_compare_set>
    1af6:	bf00      	nop
    1af8:	200000e0 	.word	0x200000e0
    1afc:	200000e4 	.word	0x200000e4

00001b00 <_timer_idle_exit>:
{
    1b00:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1b02:	4b07      	ldr	r3, [pc, #28]	; (1b20 <_timer_idle_exit+0x20>)
    1b04:	2200      	movs	r2, #0
    1b06:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b0a:	4b06      	ldr	r3, [pc, #24]	; (1b24 <_timer_idle_exit+0x24>)
    1b0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1b10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1b14:	f7ff ffaa 	bl	1a6c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1b18:	4b03      	ldr	r3, [pc, #12]	; (1b28 <_timer_idle_exit+0x28>)
    1b1a:	2201      	movs	r2, #1
    1b1c:	601a      	str	r2, [r3, #0]
    1b1e:	bd08      	pop	{r3, pc}
    1b20:	40011000 	.word	0x40011000
    1b24:	e000e100 	.word	0xe000e100
    1b28:	200000e0 	.word	0x200000e0

00001b2c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1b2c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1b2e:	4818      	ldr	r0, [pc, #96]	; (1b90 <_sys_clock_driver_init+0x64>)
    1b30:	f00d fb5e 	bl	f1f0 <device_get_binding>
	if (!clock) {
    1b34:	b348      	cbz	r0, 1b8a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1b36:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1b38:	4d16      	ldr	r5, [pc, #88]	; (1b94 <_sys_clock_driver_init+0x68>)
    1b3a:	681b      	ldr	r3, [r3, #0]
    1b3c:	2101      	movs	r1, #1
    1b3e:	4798      	blx	r3
	rtc_past = 0;
    1b40:	4b15      	ldr	r3, [pc, #84]	; (1b98 <_sys_clock_driver_init+0x6c>)
    1b42:	2400      	movs	r4, #0
    1b44:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1b46:	4b15      	ldr	r3, [pc, #84]	; (1b9c <_sys_clock_driver_init+0x70>)
    1b48:	2601      	movs	r6, #1
    1b4a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1b4c:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1b50:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1b54:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1b5c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1b60:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1b64:	4b0e      	ldr	r3, [pc, #56]	; (1ba0 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1b66:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1b6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1b6e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1b72:	4631      	mov	r1, r6
    1b74:	4622      	mov	r2, r4
    1b76:	2011      	movs	r0, #17
    1b78:	f7ff f916 	bl	da8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1b7c:	2011      	movs	r0, #17
    1b7e:	f7ff f8e1 	bl	d44 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1b82:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1b84:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1b86:	602e      	str	r6, [r5, #0]
	return 0;
    1b88:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1b8e:	bd70      	pop	{r4, r5, r6, pc}
    1b90:	00010784 	.word	0x00010784
    1b94:	40011000 	.word	0x40011000
    1b98:	200000e4 	.word	0x200000e4
    1b9c:	200000e0 	.word	0x200000e0
    1ba0:	e000e100 	.word	0xe000e100

00001ba4 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1ba4:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1ba6:	4a0b      	ldr	r2, [pc, #44]	; (1bd4 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1ba8:	480b      	ldr	r0, [pc, #44]	; (1bd8 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1baa:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1bae:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1bb2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1bb6:	4299      	cmp	r1, r3
    1bb8:	d10a      	bne.n	1bd0 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1bba:	4a08      	ldr	r2, [pc, #32]	; (1bdc <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1bbc:	f240 1347 	movw	r3, #327	; 0x147
    1bc0:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1bc4:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1bc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1bca:	fb00 3004 	mla	r0, r0, r4, r3
    1bce:	bd30      	pop	{r4, r5, pc}
    1bd0:	4619      	mov	r1, r3
    1bd2:	e7ec      	b.n	1bae <_timer_cycle_get_32+0xa>
    1bd4:	40011000 	.word	0x40011000
    1bd8:	20003c98 	.word	0x20003c98
    1bdc:	20005620 	.word	0x20005620

00001be0 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    1be0:	b530      	push	{r4, r5, lr}
    1be2:	b085      	sub	sp, #20
    1be4:	4604      	mov	r4, r0
    1be6:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    1be8:	4668      	mov	r0, sp
    1bea:	2203      	movs	r2, #3
    1bec:	f7fe fd04 	bl	5f8 <memcpy>
	memset(res + 3, 0, 13);
    1bf0:	220d      	movs	r2, #13
    1bf2:	2100      	movs	r1, #0
    1bf4:	f10d 0003 	add.w	r0, sp, #3
    1bf8:	f7fe fd2a 	bl	650 <memset>

	err = bt_encrypt_le(irk, res, res);
    1bfc:	4620      	mov	r0, r4
    1bfe:	466a      	mov	r2, sp
    1c00:	4669      	mov	r1, sp
    1c02:	f001 f8eb 	bl	2ddc <bt_encrypt_le>
	if (err) {
    1c06:	4604      	mov	r4, r0
    1c08:	b920      	cbnz	r0, 1c14 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
    1c0a:	2203      	movs	r2, #3
    1c0c:	4669      	mov	r1, sp
    1c0e:	4628      	mov	r0, r5
    1c10:	f7fe fcf2 	bl	5f8 <memcpy>

	return 0;
}
    1c14:	4620      	mov	r0, r4
    1c16:	b005      	add	sp, #20
    1c18:	bd30      	pop	{r4, r5, pc}

00001c1a <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    1c1a:	b513      	push	{r0, r1, r4, lr}
    1c1c:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    1c1e:	aa01      	add	r2, sp, #4
    1c20:	3103      	adds	r1, #3
    1c22:	f7ff ffdd 	bl	1be0 <ah>
	if (err) {
    1c26:	b948      	cbnz	r0, 1c3c <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
    1c28:	2203      	movs	r2, #3
    1c2a:	a901      	add	r1, sp, #4
    1c2c:	4620      	mov	r0, r4
    1c2e:	f7fe fcce 	bl	5ce <memcmp>
    1c32:	fab0 f080 	clz	r0, r0
    1c36:	0940      	lsrs	r0, r0, #5
}
    1c38:	b002      	add	sp, #8
    1c3a:	bd10      	pop	{r4, pc}
		return false;
    1c3c:	2000      	movs	r0, #0
    1c3e:	e7fb      	b.n	1c38 <bt_rpa_irk_matches+0x1e>

00001c40 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    1c40:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_rand(rpa->val + 3, 3);
    1c42:	1ccd      	adds	r5, r1, #3
{
    1c44:	4606      	mov	r6, r0
    1c46:	460c      	mov	r4, r1
	err = bt_rand(rpa->val + 3, 3);
    1c48:	4628      	mov	r0, r5
    1c4a:	2103      	movs	r1, #3
    1c4c:	f001 f8aa 	bl	2da4 <bt_rand>
	if (err) {
    1c50:	b960      	cbnz	r0, 1c6c <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
    1c52:	7963      	ldrb	r3, [r4, #5]
    1c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1c5c:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
    1c5e:	4622      	mov	r2, r4
    1c60:	4629      	mov	r1, r5
    1c62:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    1c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
    1c68:	f7ff bfba 	b.w	1be0 <ah>
}
    1c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

00001c70 <bt_hci_driver_register>:

struct bt_dev_raw bt_dev;

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    1c70:	4a07      	ldr	r2, [pc, #28]	; (1c90 <bt_hci_driver_register+0x20>)
    1c72:	6813      	ldr	r3, [r2, #0]
    1c74:	b933      	cbnz	r3, 1c84 <bt_hci_driver_register+0x14>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    1c76:	6881      	ldr	r1, [r0, #8]
    1c78:	b139      	cbz	r1, 1c8a <bt_hci_driver_register+0x1a>
    1c7a:	68c1      	ldr	r1, [r0, #12]
    1c7c:	b129      	cbz	r1, 1c8a <bt_hci_driver_register+0x1a>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    1c7e:	6010      	str	r0, [r2, #0]
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    1c80:	4618      	mov	r0, r3
    1c82:	4770      	bx	lr
		return -EALREADY;
    1c84:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1c88:	4770      	bx	lr
		return -EINVAL;
    1c8a:	f06f 0015 	mvn.w	r0, #21
}
    1c8e:	4770      	bx	lr
    1c90:	20003a5c 	.word	0x20003a5c

00001c94 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    1c94:	b510      	push	{r4, lr}
    1c96:	4604      	mov	r4, r0
	struct net_buf *buf;

	buf = net_buf_alloc(&hci_rx_pool, timeout);
    1c98:	4802      	ldr	r0, [pc, #8]	; (1ca4 <bt_buf_get_rx+0x10>)
    1c9a:	f00d fa13 	bl	f0c4 <net_buf_alloc_fixed>

	if (buf) {
    1c9e:	b100      	cbz	r0, 1ca2 <bt_buf_get_rx+0xe>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1ca0:	7504      	strb	r4, [r0, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    1ca2:	bd10      	pop	{r4, pc}
    1ca4:	20005774 	.word	0x20005774

00001ca8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    1ca8:	b508      	push	{r3, lr}
	struct net_buf *buf;

	buf = net_buf_alloc(&hci_rx_pool, timeout);
    1caa:	4601      	mov	r1, r0
    1cac:	4803      	ldr	r0, [pc, #12]	; (1cbc <bt_buf_get_cmd_complete+0x14>)
    1cae:	f00d fa09 	bl	f0c4 <net_buf_alloc_fixed>
	if (buf) {
    1cb2:	b108      	cbz	r0, 1cb8 <bt_buf_get_cmd_complete+0x10>
    1cb4:	2301      	movs	r3, #1
    1cb6:	7503      	strb	r3, [r0, #20]
		bt_buf_set_type(buf, BT_BUF_EVT);
	}

	return buf;
}
    1cb8:	bd08      	pop	{r3, pc}
    1cba:	bf00      	nop
    1cbc:	20005774 	.word	0x20005774

00001cc0 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
    1cc0:	b508      	push	{r3, lr}
	BT_DBG("buf %p len %u", buf, buf->len);

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	/* Queue to RAW rx queue */
	net_buf_put(raw_rx, buf);
    1cc2:	4b03      	ldr	r3, [pc, #12]	; (1cd0 <bt_recv+0x10>)
    1cc4:	4601      	mov	r1, r0
    1cc6:	6818      	ldr	r0, [r3, #0]
    1cc8:	f00d fa1b 	bl	f102 <net_buf_put>

	return 0;
}
    1ccc:	2000      	movs	r0, #0
    1cce:	bd08      	pop	{r3, pc}
    1cd0:	200000e8 	.word	0x200000e8

00001cd4 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
	return bt_recv(buf);
    1cd4:	f7ff bff4 	b.w	1cc0 <bt_recv>

00001cd8 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    1cd8:	4b01      	ldr	r3, [pc, #4]	; (1ce0 <bt_send+0x8>)
    1cda:	681b      	ldr	r3, [r3, #0]
    1cdc:	68db      	ldr	r3, [r3, #12]
    1cde:	4718      	bx	r3
    1ce0:	20003a5c 	.word	0x20003a5c

00001ce4 <bt_enable_raw>:
}

int bt_enable_raw(struct k_fifo *rx_queue)
{
	const struct bt_hci_driver *drv = bt_dev.drv;
    1ce4:	4b04      	ldr	r3, [pc, #16]	; (1cf8 <bt_enable_raw+0x14>)
	int err;

	BT_DBG("");

	raw_rx = rx_queue;
    1ce6:	4a05      	ldr	r2, [pc, #20]	; (1cfc <bt_enable_raw+0x18>)
	const struct bt_hci_driver *drv = bt_dev.drv;
    1ce8:	681b      	ldr	r3, [r3, #0]
	raw_rx = rx_queue;
    1cea:	6010      	str	r0, [r2, #0]

	if (!bt_dev.drv) {
    1cec:	b10b      	cbz	r3, 1cf2 <bt_enable_raw+0xe>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = drv->open();
    1cee:	689b      	ldr	r3, [r3, #8]
    1cf0:	4718      	bx	r3
	}

	BT_INFO("Bluetooth enabled in RAW mode");

	return 0;
}
    1cf2:	f06f 0012 	mvn.w	r0, #18
    1cf6:	4770      	bx	lr
    1cf8:	20003a5c 	.word	0x20003a5c
    1cfc:	200000e8 	.word	0x200000e8

00001d00 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    1d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    1d02:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    1d04:	1dc3      	adds	r3, r0, #7
{
    1d06:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    1d08:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    1d0c:	1e50      	subs	r0, r2, #1
{
    1d0e:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    1d10:	b280      	uxth	r0, r0
{
    1d12:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    1d14:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    1d16:	2100      	movs	r1, #0
    1d18:	2204      	movs	r2, #4
    1d1a:	fb06 5000 	mla	r0, r6, r0, r5
    1d1e:	f7fe fc97 	bl	650 <memset>
    1d22:	3c02      	subs	r4, #2
    1d24:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    1d26:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1d2a:	42bc      	cmp	r4, r7
    1d2c:	d101      	bne.n	1d32 <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    1d2e:	b003      	add	sp, #12
    1d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    1d32:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    1d36:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    1d38:	2204      	movs	r2, #4
    1d3a:	1b80      	subs	r0, r0, r6
    1d3c:	eb0d 0102 	add.w	r1, sp, r2
    1d40:	4428      	add	r0, r5
    1d42:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    1d44:	9301      	str	r3, [sp, #4]
    1d46:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    1d48:	f7fe fc56 	bl	5f8 <memcpy>
    1d4c:	e7ed      	b.n	1d2a <mem_init+0x2a>

00001d4e <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    1d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    1d50:	6805      	ldr	r5, [r0, #0]
{
    1d52:	4606      	mov	r6, r0
	if (*mem_head) {
    1d54:	b195      	cbz	r5, 1d7c <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    1d56:	1deb      	adds	r3, r5, #7
    1d58:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    1d5c:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    1d5e:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    1d60:	4629      	mov	r1, r5
    1d62:	eb0d 0002 	add.w	r0, sp, r2
    1d66:	f7fe fc47 	bl	5f8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    1d6a:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    1d6c:	3c01      	subs	r4, #1
    1d6e:	b2a4      	uxth	r4, r4
		if (head) {
    1d70:	b11b      	cbz	r3, 1d7a <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    1d72:	1dda      	adds	r2, r3, #7
    1d74:	f022 0203 	bic.w	r2, r2, #3
    1d78:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    1d7a:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    1d7c:	4628      	mov	r0, r5
    1d7e:	b002      	add	sp, #8
    1d80:	bd70      	pop	{r4, r5, r6, pc}

00001d82 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    1d82:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    1d84:	680c      	ldr	r4, [r1, #0]
{
    1d86:	4606      	mov	r6, r0
    1d88:	460d      	mov	r5, r1
	if (*mem_head) {
    1d8a:	b11c      	cbz	r4, 1d94 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    1d8c:	1de3      	adds	r3, r4, #7
    1d8e:	f023 0303 	bic.w	r3, r3, #3
    1d92:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    1d94:	2204      	movs	r2, #4
    1d96:	4629      	mov	r1, r5
    1d98:	4630      	mov	r0, r6
    1d9a:	f7fe fc2d 	bl	5f8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    1d9e:	1df2      	adds	r2, r6, #7
    1da0:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    1da4:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    1da6:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    1da8:	602e      	str	r6, [r5, #0]
    1daa:	bd70      	pop	{r4, r5, r6, pc}

00001dac <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    1dac:	b118      	cbz	r0, 1db6 <mem_free_count_get+0xa>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    1dae:	3007      	adds	r0, #7
    1db0:	f020 0003 	bic.w	r0, r0, #3
    1db4:	8800      	ldrh	r0, [r0, #0]
					       sizeof(mem_head)));
	}

	return free_count;
}
    1db6:	4770      	bx	lr

00001db8 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    1db8:	fb02 0001 	mla	r0, r2, r1, r0
    1dbc:	4770      	bx	lr

00001dbe <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    1dbe:	1a40      	subs	r0, r0, r1
    1dc0:	b280      	uxth	r0, r0
}
    1dc2:	fbb0 f0f2 	udiv	r0, r0, r2
    1dc6:	4770      	bx	lr

00001dc8 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    1dc8:	b510      	push	{r4, lr}
	src += len;
    1dca:	4411      	add	r1, r2
    1dcc:	3801      	subs	r0, #1
	while (len--) {
    1dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1dd2:	3a01      	subs	r2, #1
    1dd4:	b292      	uxth	r2, r2
    1dd6:	429a      	cmp	r2, r3
    1dd8:	d100      	bne.n	1ddc <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    1dda:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    1ddc:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    1de0:	f800 4f01 	strb.w	r4, [r0, #1]!
    1de4:	e7f5      	b.n	1dd2 <mem_rcopy+0xa>

00001de6 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
    1de6:	4401      	add	r1, r0
	while (len--) {
    1de8:	4288      	cmp	r0, r1
    1dea:	d101      	bne.n	1df0 <mem_nz+0xa>
		if (*src++) {
			return 1;
		}
	}

	return 0;
    1dec:	2000      	movs	r0, #0
    1dee:	4770      	bx	lr
		if (*src++) {
    1df0:	f810 3b01 	ldrb.w	r3, [r0], #1
    1df4:	2b00      	cmp	r3, #0
    1df6:	d0f7      	beq.n	1de8 <mem_nz+0x2>
			return 1;
    1df8:	2001      	movs	r0, #1
}
    1dfa:	4770      	bx	lr

00001dfc <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    1dfc:	6010      	str	r0, [r2, #0]
    1dfe:	6008      	str	r0, [r1, #0]

	return link;
}
    1e00:	4770      	bx	lr

00001e02 <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    1e02:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    1e04:	6814      	ldr	r4, [r2, #0]
    1e06:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    1e08:	6814      	ldr	r4, [r2, #0]
    1e0a:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    1e0c:	6010      	str	r0, [r2, #0]

	return link;
}
    1e0e:	bd10      	pop	{r4, pc}

00001e10 <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    1e10:	4288      	cmp	r0, r1
    1e12:	d003      	beq.n	1e1c <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    1e14:	b11a      	cbz	r2, 1e1e <memq_peek+0xe>
		*mem = head->mem;
    1e16:	6843      	ldr	r3, [r0, #4]
    1e18:	6013      	str	r3, [r2, #0]
    1e1a:	4770      	bx	lr
		return NULL;
    1e1c:	2000      	movs	r0, #0
	}

	return head;
}
    1e1e:	4770      	bx	lr

00001e20 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    1e20:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    1e22:	4283      	cmp	r3, r0
    1e24:	d009      	beq.n	1e3a <memq_dequeue+0x1a>
	if (mem) {
    1e26:	b122      	cbz	r2, 1e32 <memq_dequeue+0x12>
		*mem = head->mem;
    1e28:	6858      	ldr	r0, [r3, #4]
    1e2a:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    1e2c:	681a      	ldr	r2, [r3, #0]
    1e2e:	600a      	str	r2, [r1, #0]

	return link;
    1e30:	e001      	b.n	1e36 <memq_dequeue+0x16>
	if (!link) {
    1e32:	2b00      	cmp	r3, #0
    1e34:	d1fa      	bne.n	1e2c <memq_dequeue+0xc>
}
    1e36:	4618      	mov	r0, r3
    1e38:	4770      	bx	lr
		return NULL;
    1e3a:	2300      	movs	r3, #0
    1e3c:	e7fb      	b.n	1e36 <memq_dequeue+0x16>
	...

00001e40 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    1e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    1e44:	4f11      	ldr	r7, [pc, #68]	; (1e8c <mayfly_init+0x4c>)
    1e46:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1e90 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    1e4a:	2604      	movs	r6, #4
	while (callee_id--) {
    1e4c:	3e01      	subs	r6, #1
    1e4e:	b2f6      	uxtb	r6, r6
    1e50:	2eff      	cmp	r6, #255	; 0xff
    1e52:	d019      	beq.n	1e88 <mayfly_init+0x48>
    1e54:	b233      	sxth	r3, r6
    1e56:	ea4f 0883 	mov.w	r8, r3, lsl #2
    1e5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1e5e:	011d      	lsls	r5, r3, #4
    1e60:	2404      	movs	r4, #4
    1e62:	f04f 0a0c 	mov.w	sl, #12
    1e66:	e00a      	b.n	1e7e <mayfly_init+0x3e>
    1e68:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    1e6c:	1d0a      	adds	r2, r1, #4
    1e6e:	eb04 0008 	add.w	r0, r4, r8
    1e72:	443a      	add	r2, r7
    1e74:	4439      	add	r1, r7
    1e76:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    1e7a:	f7ff ffbf 	bl	1dfc <memq_init>
		while (caller_id--) {
    1e7e:	3c01      	subs	r4, #1
    1e80:	b2e4      	uxtb	r4, r4
    1e82:	2cff      	cmp	r4, #255	; 0xff
    1e84:	d1f0      	bne.n	1e68 <mayfly_init+0x28>
    1e86:	e7e1      	b.n	1e4c <mayfly_init+0xc>
    1e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1e8c:	2000016c 	.word	0x2000016c
    1e90:	200000ec 	.word	0x200000ec

00001e94 <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    1e94:	b4f0      	push	{r4, r5, r6, r7}
    1e96:	4b12      	ldr	r3, [pc, #72]	; (1ee0 <mayfly_enable+0x4c>)
    1e98:	4605      	mov	r5, r0
    1e9a:	460f      	mov	r7, r1
    1e9c:	260c      	movs	r6, #12
    1e9e:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    1ea0:	b172      	cbz	r2, 1ec0 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    1ea2:	4361      	muls	r1, r4
    1ea4:	fb06 1400 	mla	r4, r6, r0, r1
    1ea8:	4423      	add	r3, r4
    1eaa:	7a59      	ldrb	r1, [r3, #9]
    1eac:	7a18      	ldrb	r0, [r3, #8]
    1eae:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    1eb0:	bf04      	itt	eq
    1eb2:	3101      	addeq	r1, #1
    1eb4:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    1eb6:	4628      	mov	r0, r5
    1eb8:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    1eba:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    1ebc:	f00c bfc4 	b.w	ee48 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    1ec0:	434c      	muls	r4, r1
    1ec2:	fb06 4400 	mla	r4, r6, r0, r4
    1ec6:	4423      	add	r3, r4
    1ec8:	7a9c      	ldrb	r4, [r3, #10]
    1eca:	7ada      	ldrb	r2, [r3, #11]
    1ecc:	42a2      	cmp	r2, r4
    1ece:	d104      	bne.n	1eda <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    1ed0:	3201      	adds	r2, #1
    1ed2:	729a      	strb	r2, [r3, #10]
}
    1ed4:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    1ed6:	f00c bff1 	b.w	eebc <mayfly_pend>
}
    1eda:	bcf0      	pop	{r4, r5, r6, r7}
    1edc:	4770      	bx	lr
    1ede:	bf00      	nop
    1ee0:	2000016c 	.word	0x2000016c

00001ee4 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    1ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ee6:	4605      	mov	r5, r0
    1ee8:	460e      	mov	r6, r1
    1eea:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    1eec:	b18a      	cbz	r2, 1f12 <mayfly_enqueue+0x2e>
    1eee:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    1ef0:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    1ef2:	7820      	ldrb	r0, [r4, #0]
    1ef4:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    1ef6:	f010 0703 	ands.w	r7, r0, #3
    1efa:	d029      	beq.n	1f50 <mayfly_enqueue+0x6c>
		if (chain) {
    1efc:	b303      	cbz	r3, 1f40 <mayfly_enqueue+0x5c>
			if (state != 1) {
    1efe:	2f01      	cmp	r7, #1
    1f00:	d039      	beq.n	1f76 <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    1f02:	3201      	adds	r2, #1
    1f04:	b2d2      	uxtb	r2, r2
    1f06:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    1f08:	4631      	mov	r1, r6
    1f0a:	4628      	mov	r0, r5
    1f0c:	f00c ffd6 	bl	eebc <mayfly_pend>
    1f10:	e01c      	b.n	1f4c <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    1f12:	f00c ffc1 	bl	ee98 <mayfly_prio_is_equal>
    1f16:	2800      	cmp	r0, #0
    1f18:	d0e9      	beq.n	1eee <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    1f1a:	4631      	mov	r1, r6
    1f1c:	4628      	mov	r0, r5
    1f1e:	f00c ffa7 	bl	ee70 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    1f22:	2800      	cmp	r0, #0
    1f24:	d0e3      	beq.n	1eee <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    1f26:	2330      	movs	r3, #48	; 0x30
    1f28:	220c      	movs	r2, #12
    1f2a:	4373      	muls	r3, r6
    1f2c:	fb02 3305 	mla	r3, r2, r5, r3
    1f30:	4a12      	ldr	r2, [pc, #72]	; (1f7c <mayfly_enqueue+0x98>)
    1f32:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    1f34:	7a93      	ldrb	r3, [r2, #10]
    1f36:	7ad2      	ldrb	r2, [r2, #11]
    1f38:	1a9b      	subs	r3, r3, r2
    1f3a:	bf18      	it	ne
    1f3c:	2301      	movne	r3, #1
    1f3e:	e7d7      	b.n	1ef0 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    1f40:	3202      	adds	r2, #2
    1f42:	b2d2      	uxtb	r2, r2
    1f44:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    1f46:	68e3      	ldr	r3, [r4, #12]
    1f48:	68a0      	ldr	r0, [r4, #8]
    1f4a:	4798      	blx	r3
		return 0;
    1f4c:	2000      	movs	r0, #0
    1f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    1f50:	2b00      	cmp	r3, #0
    1f52:	d0f8      	beq.n	1f46 <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    1f54:	3201      	adds	r2, #1
    1f56:	b2d2      	uxtb	r2, r2
    1f58:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    1f5a:	2304      	movs	r3, #4
    1f5c:	2230      	movs	r2, #48	; 0x30
    1f5e:	fb12 3206 	smlabb	r2, r2, r6, r3
    1f62:	230c      	movs	r3, #12
    1f64:	fb13 2305 	smlabb	r3, r3, r5, r2
    1f68:	4a04      	ldr	r2, [pc, #16]	; (1f7c <mayfly_enqueue+0x98>)
    1f6a:	6860      	ldr	r0, [r4, #4]
    1f6c:	441a      	add	r2, r3
    1f6e:	4621      	mov	r1, r4
    1f70:	f7ff ff47 	bl	1e02 <memq_enqueue>
    1f74:	e7c8      	b.n	1f08 <mayfly_enqueue+0x24>
			return 1;
    1f76:	4638      	mov	r0, r7

	return 0;
}
    1f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f7a:	bf00      	nop
    1f7c:	2000016c 	.word	0x2000016c

00001f80 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    1f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f84:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1f88:	b089      	sub	sp, #36	; 0x24
    1f8a:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    1f8c:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    1f90:	4e43      	ldr	r6, [pc, #268]	; (20a0 <mayfly_run+0x120>)
    1f92:	9304      	str	r3, [sp, #16]
{
    1f94:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    1f96:	2404      	movs	r4, #4
	u8_t disable = 0;
    1f98:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    1f9c:	3c01      	subs	r4, #1
    1f9e:	b2e4      	uxtb	r4, r4
    1fa0:	2cff      	cmp	r4, #255	; 0xff
    1fa2:	d10b      	bne.n	1fbc <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    1fa4:	9b01      	ldr	r3, [sp, #4]
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d076      	beq.n	2098 <mayfly_run+0x118>
    1faa:	f1b8 0f00 	cmp.w	r8, #0
    1fae:	d173      	bne.n	2098 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    1fb0:	4642      	mov	r2, r8
    1fb2:	4629      	mov	r1, r5
    1fb4:	4628      	mov	r0, r5
    1fb6:	f00c ff47 	bl	ee48 <mayfly_enable_cb>
    1fba:	e06d      	b.n	2098 <mayfly_run+0x118>
		struct mayfly *m = 0;
    1fbc:	f10d 0b20 	add.w	fp, sp, #32
    1fc0:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    1fc2:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    1fc4:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    1fc8:	f04f 0930 	mov.w	r9, #48	; 0x30
    1fcc:	fb07 f304 	mul.w	r3, r7, r4
    1fd0:	fb09 3005 	mla	r0, r9, r5, r3
    1fd4:	1831      	adds	r1, r6, r0
    1fd6:	465a      	mov	r2, fp
    1fd8:	6849      	ldr	r1, [r1, #4]
    1fda:	5830      	ldr	r0, [r6, r0]
    1fdc:	9302      	str	r3, [sp, #8]
    1fde:	f7ff ff17 	bl	1e10 <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    1fe2:	9b04      	ldr	r3, [sp, #16]
    1fe4:	fb17 3704 	smlabb	r7, r7, r4, r3
    1fe8:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    1fea:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    1fec:	9303      	str	r3, [sp, #12]
		while (link) {
    1fee:	f1ba 0f00 	cmp.w	sl, #0
    1ff2:	d119      	bne.n	2028 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    1ff4:	2230      	movs	r2, #48	; 0x30
    1ff6:	230c      	movs	r3, #12
    1ff8:	436a      	muls	r2, r5
    1ffa:	fb03 2204 	mla	r2, r3, r4, r2
    1ffe:	4432      	add	r2, r6
    2000:	7a91      	ldrb	r1, [r2, #10]
    2002:	7ad0      	ldrb	r0, [r2, #11]
    2004:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    2006:	bf1e      	ittt	ne
    2008:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    200a:	2201      	movne	r2, #1
    200c:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    200e:	2230      	movs	r2, #48	; 0x30
    2010:	436a      	muls	r2, r5
    2012:	fb03 2304 	mla	r3, r3, r4, r2
    2016:	4433      	add	r3, r6
    2018:	7a1a      	ldrb	r2, [r3, #8]
    201a:	7a59      	ldrb	r1, [r3, #9]
    201c:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    201e:	bf1c      	itt	ne
    2020:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    2022:	f04f 0801 	movne.w	r8, #1
    2026:	e7b9      	b.n	1f9c <mayfly_run+0x1c>
			req = m->_req;
    2028:	9b07      	ldr	r3, [sp, #28]
    202a:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    202c:	785a      	ldrb	r2, [r3, #1]
    202e:	1abf      	subs	r7, r7, r2
    2030:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    2034:	2f01      	cmp	r7, #1
    2036:	d104      	bne.n	2042 <mayfly_run+0xc2>
				m->_ack--;
    2038:	3a01      	subs	r2, #1
    203a:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    203c:	6898      	ldr	r0, [r3, #8]
    203e:	68da      	ldr	r2, [r3, #12]
    2040:	4790      	blx	r2
			req = m->_req;
    2042:	9a07      	ldr	r2, [sp, #28]
    2044:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    2046:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    2048:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    204a:	1a9a      	subs	r2, r3, r2
    204c:	f002 0203 	and.w	r2, r2, #3
    2050:	2a01      	cmp	r2, #1
    2052:	9305      	str	r3, [sp, #20]
    2054:	d00d      	beq.n	2072 <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2056:	9b02      	ldr	r3, [sp, #8]
    2058:	9903      	ldr	r1, [sp, #12]
    205a:	fb09 3005 	mla	r0, r9, r5, r3
    205e:	4430      	add	r0, r6
    2060:	2200      	movs	r2, #0
    2062:	6840      	ldr	r0, [r0, #4]
    2064:	f7ff fedc 	bl	1e20 <memq_dequeue>
				m->_link = link;
    2068:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    206a:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    206c:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    2070:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    2072:	9b02      	ldr	r3, [sp, #8]
    2074:	fb09 3305 	mla	r3, r9, r5, r3
    2078:	18f1      	adds	r1, r6, r3
    207a:	465a      	mov	r2, fp
    207c:	6849      	ldr	r1, [r1, #4]
    207e:	58f0      	ldr	r0, [r6, r3]
    2080:	f7ff fec6 	bl	1e10 <memq_peek>
			if (state == 1) {
    2084:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    2086:	4682      	mov	sl, r0
			if (state == 1) {
    2088:	d1b1      	bne.n	1fee <mayfly_run+0x6e>
				if (caller_id || link) {
    208a:	b90c      	cbnz	r4, 2090 <mayfly_run+0x110>
    208c:	2800      	cmp	r0, #0
    208e:	d0b1      	beq.n	1ff4 <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    2090:	4629      	mov	r1, r5
    2092:	4628      	mov	r0, r5
    2094:	f00c ff12 	bl	eebc <mayfly_pend>
	}
}
    2098:	b009      	add	sp, #36	; 0x24
    209a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    209e:	bf00      	nop
    20a0:	2000016c 	.word	0x2000016c

000020a4 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    20a4:	b510      	push	{r4, lr}
    20a6:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    20a8:	2000      	movs	r0, #0

	while (octets_len--) {
    20aa:	3901      	subs	r1, #1
    20ac:	b2c9      	uxtb	r1, r1
    20ae:	29ff      	cmp	r1, #255	; 0xff
    20b0:	d100      	bne.n	20b4 <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    20b2:	bd10      	pop	{r4, pc}
		bite = *octets;
    20b4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    20b8:	2b00      	cmp	r3, #0
    20ba:	d0f6      	beq.n	20aa <util_ones_count_get+0x6>
			bite &= (bite - 1);
    20bc:	1e5c      	subs	r4, r3, #1
			one_count++;
    20be:	3001      	adds	r0, #1
			bite &= (bite - 1);
    20c0:	4023      	ands	r3, r4
			one_count++;
    20c2:	b2c0      	uxtb	r0, r0
    20c4:	e7f8      	b.n	20b8 <util_ones_count_get+0x14>

000020c6 <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    20c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    20c8:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    20ca:	6805      	ldr	r5, [r0, #0]
	current = previous;
    20cc:	461a      	mov	r2, r3
	total = 0;
    20ce:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    20d0:	2aff      	cmp	r2, #255	; 0xff
    20d2:	d101      	bne.n	20d8 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    20d4:	2000      	movs	r0, #0
    20d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    20d8:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    20dc:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    20de:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    20e2:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    20e6:	d004      	beq.n	20f2 <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    20e8:	68b3      	ldr	r3, [r6, #8]
    20ea:	441c      	add	r4, r3
		current = ticker_current->next;
    20ec:	4613      	mov	r3, r2
    20ee:	463a      	mov	r2, r7
    20f0:	e7ee      	b.n	20d0 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    20f2:	4293      	cmp	r3, r2
    20f4:	d100      	bne.n	20f8 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    20f6:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    20f8:	b21b      	sxth	r3, r3
    20fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    20fe:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    2100:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    2102:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    2106:	7833      	ldrb	r3, [r6, #0]
    2108:	2bff      	cmp	r3, #255	; 0xff
    210a:	d006      	beq.n	211a <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    210c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2110:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    2114:	689a      	ldr	r2, [r3, #8]
    2116:	4402      	add	r2, r0
    2118:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    211a:	4420      	add	r0, r4
    211c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000211e <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    211e:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2120:	1a55      	subs	r5, r2, r1
    2122:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2126:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2128:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    212a:	d109      	bne.n	2140 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    212c:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2130:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    2132:	42a2      	cmp	r2, r4
    2134:	d90e      	bls.n	2154 <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    2136:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    2138:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    213a:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    213c:	6144      	str	r4, [r0, #20]
    213e:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2140:	1a8a      	subs	r2, r1, r2
    2142:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    2146:	4293      	cmp	r3, r2
    2148:	d901      	bls.n	214e <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    214a:	1a9a      	subs	r2, r3, r2
    214c:	e7f1      	b.n	2132 <ticks_to_expire_prep+0x14>
    214e:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    2150:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    2152:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    2154:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    2156:	2200      	movs	r2, #0
    2158:	e7ef      	b.n	213a <ticks_to_expire_prep+0x1c>

0000215a <ticker_job_op_cb>:
{
    215a:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    215c:	2200      	movs	r2, #0
    215e:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    2160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    2162:	6259      	str	r1, [r3, #36]	; 0x24
{
    2164:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    2166:	b10a      	cbz	r2, 216c <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    2168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    216a:	4710      	bx	r2
    216c:	4770      	bx	lr

0000216e <ticker_worker>:
{
    216e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    2172:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    2174:	2301      	movs	r3, #1
{
    2176:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    2178:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    217a:	2d00      	cmp	r5, #0
    217c:	d14c      	bne.n	2218 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    217e:	7f43      	ldrb	r3, [r0, #29]
    2180:	2bff      	cmp	r3, #255	; 0xff
    2182:	d102      	bne.n	218a <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    2184:	77c5      	strb	r5, [r0, #31]
		return;
    2186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    218a:	f00c f8dd 	bl	e348 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    218e:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    2190:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    2192:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2196:	1bc7      	subs	r7, r0, r7
    2198:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    219c:	2eff      	cmp	r6, #255	; 0xff
    219e:	d006      	beq.n	21ae <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    21a0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    21a4:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    21a8:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    21aa:	429f      	cmp	r7, r3
    21ac:	d218      	bcs.n	21e0 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    21ae:	7aa2      	ldrb	r2, [r4, #10]
    21b0:	7ae3      	ldrb	r3, [r4, #11]
    21b2:	4293      	cmp	r3, r2
    21b4:	d105      	bne.n	21c2 <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    21b6:	3301      	adds	r3, #1
    21b8:	b2db      	uxtb	r3, r3
			last = 0;
    21ba:	2b02      	cmp	r3, #2
    21bc:	bf08      	it	eq
    21be:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    21c0:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    21c2:	7ae3      	ldrb	r3, [r4, #11]
    21c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    21c8:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    21ca:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    21cc:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    21ce:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    21d0:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    21d2:	46ac      	mov	ip, r5
    21d4:	4623      	mov	r3, r4
    21d6:	2104      	movs	r1, #4
    21d8:	2003      	movs	r0, #3
}
    21da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    21de:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    21e0:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    21e2:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    21e4:	788a      	ldrb	r2, [r1, #2]
    21e6:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    21e8:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    21ec:	1a9b      	subs	r3, r3, r2
    21ee:	b2db      	uxtb	r3, r3
    21f0:	2b01      	cmp	r3, #1
    21f2:	d1d3      	bne.n	219c <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    21f4:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    21f8:	3a01      	subs	r2, #1
    21fa:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    21fc:	f1b9 0f00 	cmp.w	r9, #0
    2200:	d0cc      	beq.n	219c <ticker_worker+0x2e>
					   ticks_expired -
    2202:	6948      	ldr	r0, [r1, #20]
    2204:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    2206:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2208:	1a28      	subs	r0, r5, r0
    220a:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    220c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2210:	690b      	ldr	r3, [r1, #16]
    2212:	6a49      	ldr	r1, [r1, #36]	; 0x24
    2214:	47c8      	blx	r9
    2216:	e7c1      	b.n	219c <ticker_worker+0x2e>
    2218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000221c <ticker_job>:
{
    221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    2220:	7fc2      	ldrb	r2, [r0, #31]
{
    2222:	b093      	sub	sp, #76	; 0x4c
    2224:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    2226:	2a00      	cmp	r2, #0
    2228:	f040 83ba 	bne.w	29a0 <ticker_job+0x784>
	ticks_previous = instance->ticks_current;
    222c:	6943      	ldr	r3, [r0, #20]
    222e:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    2230:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2232:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    2234:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    2236:	7ac0      	ldrb	r0, [r0, #11]
    2238:	4298      	cmp	r0, r3
    223a:	f000 808f 	beq.w	235c <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    223e:	440b      	add	r3, r1
    2240:	b2db      	uxtb	r3, r3
			first = 0;
    2242:	2b02      	cmp	r3, #2
    2244:	bf08      	it	eq
    2246:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    2248:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    224c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    2250:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    2252:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    2256:	9b05      	ldr	r3, [sp, #20]
    2258:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    225a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    225e:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    2262:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2266:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    2268:	f8db 3000 	ldr.w	r3, [fp]
    226c:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    226e:	f8db 3004 	ldr.w	r3, [fp, #4]
    2272:	930b      	str	r3, [sp, #44]	; 0x2c
    2274:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2278:	3b01      	subs	r3, #1
    227a:	b2db      	uxtb	r3, r3
    227c:	9302      	str	r3, [sp, #8]
	pending = 0;
    227e:	2300      	movs	r3, #0
    2280:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    2282:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    2286:	9b02      	ldr	r3, [sp, #8]
    2288:	2bff      	cmp	r3, #255	; 0xff
    228a:	d16a      	bne.n	2362 <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    228c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    2290:	9a03      	ldr	r2, [sp, #12]
    2292:	1a9b      	subs	r3, r3, r2
    2294:	bf18      	it	ne
    2296:	2301      	movne	r3, #1
    2298:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    229a:	9b01      	ldr	r3, [sp, #4]
    229c:	b1e3      	cbz	r3, 22d8 <ticker_job+0xbc>
	node = &instance->node[0];
    229e:	f8db 3000 	ldr.w	r3, [fp]
    22a2:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    22a4:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    22a8:	f89b 601d 	ldrb.w	r6, [fp, #29]
    22ac:	2eff      	cmp	r6, #255	; 0xff
    22ae:	d00c      	beq.n	22ca <ticker_job+0xae>
		ticker = &node[id_expired];
    22b0:	b237      	sxth	r7, r6
    22b2:	9b04      	ldr	r3, [sp, #16]
    22b4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    22b8:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    22bc:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    22be:	4545      	cmp	r5, r8
    22c0:	f240 8136 	bls.w	2530 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    22c4:	eba5 0508 	sub.w	r5, r5, r8
    22c8:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    22ca:	9b02      	ldr	r3, [sp, #8]
    22cc:	9a01      	ldr	r2, [sp, #4]
    22ce:	9903      	ldr	r1, [sp, #12]
    22d0:	42b1      	cmp	r1, r6
    22d2:	bf18      	it	ne
    22d4:	4613      	movne	r3, r2
    22d6:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    22d8:	f8db 3000 	ldr.w	r3, [fp]
    22dc:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    22de:	f8db 3004 	ldr.w	r3, [fp, #4]
    22e2:	9310      	str	r3, [sp, #64]	; 0x40
    22e4:	f89b 3009 	ldrb.w	r3, [fp, #9]
    22e8:	3b01      	subs	r3, #1
    22ea:	b2db      	uxtb	r3, r3
    22ec:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    22ee:	9b01      	ldr	r3, [sp, #4]
    22f0:	2bff      	cmp	r3, #255	; 0xff
    22f2:	f040 8170 	bne.w	25d6 <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    22f6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    22fa:	9a03      	ldr	r2, [sp, #12]
    22fc:	4293      	cmp	r3, r2
	if (!pending) {
    22fe:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    2300:	f040 8345 	bne.w	298e <ticker_job+0x772>
	if (!pending) {
    2304:	b95b      	cbnz	r3, 231e <ticker_job+0x102>
    2306:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    230a:	f8db 3004 	ldr.w	r3, [fp, #4]
    230e:	9301      	str	r3, [sp, #4]
    2310:	3c01      	subs	r4, #1
    2312:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    2314:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    2318:	2cff      	cmp	r4, #255	; 0xff
    231a:	f040 82a0 	bne.w	285e <ticker_job+0x642>
	instance->job_guard = 0;
    231e:	2300      	movs	r3, #0
    2320:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    2324:	9b02      	ldr	r3, [sp, #8]
    2326:	b14b      	cbz	r3, 233c <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    2328:	f89b 301d 	ldrb.w	r3, [fp, #29]
    232c:	2bff      	cmp	r3, #255	; 0xff
    232e:	f040 82e9 	bne.w	2904 <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    2332:	f00b ffef 	bl	e314 <cntr_stop>
    2336:	b908      	cbnz	r0, 233c <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    2338:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    233c:	f89b 301f 	ldrb.w	r3, [fp, #31]
    2340:	2b00      	cmp	r3, #0
    2342:	f000 832d 	beq.w	29a0 <ticker_job+0x784>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    2346:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    234a:	465b      	mov	r3, fp
    234c:	2201      	movs	r2, #1
    234e:	2103      	movs	r1, #3
    2350:	2004      	movs	r0, #4
    2352:	46a4      	mov	ip, r4
}
    2354:	b013      	add	sp, #76	; 0x4c
    2356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    235a:	4760      	bx	ip
		flag_elapsed = 0;
    235c:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    235e:	4690      	mov	r8, r2
    2360:	e77f      	b.n	2262 <ticker_job+0x46>
		user = &users[count_user];
    2362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2364:	9a02      	ldr	r2, [sp, #8]
    2366:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    236e:	78f9      	ldrb	r1, [r7, #3]
    2370:	78be      	ldrb	r6, [r7, #2]
    2372:	428e      	cmp	r6, r1
    2374:	f000 80d7 	beq.w	2526 <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    2378:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    237a:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    237c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    2380:	0112      	lsls	r2, r2, #4
    2382:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    2384:	1c73      	adds	r3, r6, #1
    2386:	b2db      	uxtb	r3, r3
				middle = 0;
    2388:	4298      	cmp	r0, r3
    238a:	bf08      	it	eq
    238c:	2300      	moveq	r3, #0
			user->middle = middle;
    238e:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    2390:	9b06      	ldr	r3, [sp, #24]
    2392:	5c9a      	ldrb	r2, [r3, r2]
    2394:	2a03      	cmp	r2, #3
    2396:	d9eb      	bls.n	2370 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    2398:	2a05      	cmp	r2, #5
    239a:	d817      	bhi.n	23cc <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    239c:	7869      	ldrb	r1, [r5, #1]
    239e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    23a2:	930a      	str	r3, [sp, #40]	; 0x28
    23a4:	980a      	ldr	r0, [sp, #40]	; 0x28
    23a6:	9b04      	ldr	r3, [sp, #16]
    23a8:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    23ac:	7863      	ldrb	r3, [r4, #1]
    23ae:	78a0      	ldrb	r0, [r4, #2]
    23b0:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    23b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    23b6:	d009      	beq.n	23cc <ticker_job+0x1b0>
			    (state == 0) ||
    23b8:	2a04      	cmp	r2, #4
    23ba:	d10c      	bne.n	23d6 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    23bc:	686a      	ldr	r2, [r5, #4]
    23be:	b952      	cbnz	r2, 23d6 <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    23c0:	68aa      	ldr	r2, [r5, #8]
    23c2:	b942      	cbnz	r2, 23d6 <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    23c4:	68ea      	ldr	r2, [r5, #12]
    23c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    23ca:	d104      	bne.n	23d6 <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    23cc:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    23ce:	4628      	mov	r0, r5
    23d0:	f7ff fec3 	bl	215a <ticker_job_op_cb>
    23d4:	e7cb      	b.n	236e <ticker_job+0x152>
			if (state == 1) {
    23d6:	2b01      	cmp	r3, #1
    23d8:	f040 809b 	bne.w	2512 <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    23dc:	4658      	mov	r0, fp
    23de:	f7ff fe72 	bl	20c6 <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    23e2:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    23e4:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    23e6:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    23e8:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    23ea:	f040 8084 	bne.w	24f6 <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    23ee:	f8db 3014 	ldr.w	r3, [fp, #20]
    23f2:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    23f4:	f00b ffa8 	bl	e348 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    23f8:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    23fa:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    23fc:	1ac3      	subs	r3, r0, r3
    23fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2402:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    2404:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2406:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2408:	bf9e      	ittt	ls
    240a:	6962      	ldrls	r2, [r4, #20]
    240c:	1b92      	subls	r2, r2, r6
    240e:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    2410:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2412:	bf96      	itet	ls
    2414:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    2416:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    2418:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    241a:	b18a      	cbz	r2, 2440 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    241c:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    241e:	b179      	cbz	r1, 2440 <ticker_job+0x224>
		user_op->params.update.lazy--;
    2420:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    2424:	fa1f fe8e 	uxth.w	lr, lr
    2428:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    242c:	429a      	cmp	r2, r3
    242e:	d32b      	bcc.n	2488 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    2430:	f8df 9324 	ldr.w	r9, [pc, #804]	; 2758 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    2434:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    2438:	45e6      	cmp	lr, ip
    243a:	d847      	bhi.n	24cc <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    243c:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    2440:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2442:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    2444:	4413      	add	r3, r2
    2446:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    2448:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    244a:	6963      	ldr	r3, [r4, #20]
    244c:	4413      	add	r3, r2
    244e:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2450:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2452:	4620      	mov	r0, r4
    2454:	f7ff fe63 	bl	211e <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2458:	69a2      	ldr	r2, [r4, #24]
    245a:	892b      	ldrh	r3, [r5, #8]
    245c:	4413      	add	r3, r2
    245e:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2460:	896a      	ldrh	r2, [r5, #10]
    2462:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    2464:	bf8c      	ite	hi
    2466:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    2468:	2300      	movls	r3, #0
    246a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    246c:	7bab      	ldrb	r3, [r5, #14]
    246e:	b103      	cbz	r3, 2472 <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    2470:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    2472:	9b04      	ldr	r3, [sp, #16]
    2474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2476:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    247a:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    247c:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    2480:	3301      	adds	r3, #1
    2482:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2484:	2100      	movs	r1, #0
    2486:	e7a2      	b.n	23ce <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    2488:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    248c:	45e6      	cmp	lr, ip
    248e:	d2cf      	bcs.n	2430 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    2490:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2492:	4eaf      	ldr	r6, [pc, #700]	; (2750 <ticker_job+0x534>)
    2494:	48af      	ldr	r0, [pc, #700]	; (2754 <ticker_job+0x538>)
    2496:	198e      	adds	r6, r1, r6
    2498:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    249a:	bf81      	itttt	hi
    249c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    24a0:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    24a4:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    24a8:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    24aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
    24ac:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    24ae:	bf8c      	ite	hi
    24b0:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    24b4:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    24b8:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    24ba:	4491      	add	r9, r2
			ticker->lazy_current--;
    24bc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    24c0:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    24c2:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    24c6:	f8a4 c01e 	strh.w	ip, [r4, #30]
    24ca:	e7af      	b.n	242c <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    24cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
    24ce:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    24d0:	48a0      	ldr	r0, [pc, #640]	; (2754 <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    24d2:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    24d4:	499e      	ldr	r1, [pc, #632]	; (2750 <ticker_job+0x534>)
    24d6:	1871      	adds	r1, r6, r1
    24d8:	4281      	cmp	r1, r0
	return 0;
    24da:	bf8e      	itee	hi
    24dc:	2100      	movhi	r1, #0
		return 1;
    24de:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    24e0:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    24e2:	4411      	add	r1, r2
			ticker->lazy_current++;
    24e4:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    24e8:	bf8c      	ite	hi
    24ea:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    24ec:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    24ee:	440b      	add	r3, r1
			ticker->lazy_current++;
    24f0:	f8a4 c01e 	strh.w	ip, [r4, #30]
    24f4:	e79e      	b.n	2434 <ticker_job+0x218>
		ticker->req = ticker->ack;
    24f6:	78a3      	ldrb	r3, [r4, #2]
    24f8:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    24fa:	786b      	ldrb	r3, [r5, #1]
    24fc:	f89b 201c 	ldrb.w	r2, [fp, #28]
    2500:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2502:	bf01      	itttt	eq
    2504:	23ff      	moveq	r3, #255	; 0xff
    2506:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    250a:	2300      	moveq	r3, #0
    250c:	f8cb 3018 	streq.w	r3, [fp, #24]
    2510:	e7b8      	b.n	2484 <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    2512:	2104      	movs	r1, #4
    2514:	465b      	mov	r3, fp
    2516:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    251a:	2201      	movs	r2, #1
    251c:	4608      	mov	r0, r1
    251e:	47a0      	blx	r4
				pending = 1;
    2520:	2301      	movs	r3, #1
				user->middle = prev;
    2522:	70be      	strb	r6, [r7, #2]
				pending = 1;
    2524:	9307      	str	r3, [sp, #28]
    2526:	9b02      	ldr	r3, [sp, #8]
    2528:	3b01      	subs	r3, #1
    252a:	b2db      	uxtb	r3, r3
    252c:	9302      	str	r3, [sp, #8]
    252e:	e6aa      	b.n	2286 <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    2530:	f8db 3018 	ldr.w	r3, [fp, #24]
    2534:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2536:	bf29      	itett	cs
    2538:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    253a:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    253c:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    2540:	2300      	movcs	r3, #0
    2542:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    2546:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    2548:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    254a:	b11b      	cbz	r3, 2554 <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    254c:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    2550:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    2554:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    2556:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    2558:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    255a:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    255e:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    2562:	f8d4 e004 	ldr.w	lr, [r4, #4]
    2566:	f1be 0f00 	cmp.w	lr, #0
    256a:	d030      	beq.n	25ce <ticker_job+0x3b2>
    256c:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    256e:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 2754 <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    2572:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2574:	6a21      	ldr	r1, [r4, #32]
    2576:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2578:	4975      	ldr	r1, [pc, #468]	; (2750 <ticker_job+0x534>)
    257a:	1859      	adds	r1, r3, r1
    257c:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    257e:	bf9f      	itttt	ls
    2580:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    2584:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    2588:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    258c:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    258e:	bf92      	itee	ls
    2590:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    2592:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    2594:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    2596:	4473      	add	r3, lr
			while (count--) {
    2598:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    259c:	441a      	add	r2, r3
			while (count--) {
    259e:	d2e8      	bcs.n	2572 <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    25a0:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    25a2:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    25a4:	f8db 1014 	ldr.w	r1, [fp, #20]
    25a8:	eb03 0209 	add.w	r2, r3, r9
    25ac:	4620      	mov	r0, r4
    25ae:	f7ff fdb6 	bl	211e <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    25b2:	8ba3      	ldrh	r3, [r4, #28]
    25b4:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    25b6:	2300      	movs	r3, #0
    25b8:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    25ba:	9b04      	ldr	r3, [sp, #16]
    25bc:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    25c0:	7863      	ldrb	r3, [r4, #1]
    25c2:	3301      	adds	r3, #1
    25c4:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    25c6:	eba8 0805 	sub.w	r8, r8, r5
    25ca:	46b2      	mov	sl, r6
    25cc:	e66c      	b.n	22a8 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    25ce:	78a3      	ldrb	r3, [r4, #2]
    25d0:	7063      	strb	r3, [r4, #1]
    25d2:	4656      	mov	r6, sl
    25d4:	e7f7      	b.n	25c6 <ticker_job+0x3aa>
		user = &users[count_user];
    25d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    25d8:	9a01      	ldr	r2, [sp, #4]
    25da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    25de:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    25e0:	685b      	ldr	r3, [r3, #4]
    25e2:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    25e4:	9b04      	ldr	r3, [sp, #16]
    25e6:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    25ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    25ee:	f000 808e 	beq.w	270e <ticker_job+0x4f2>
				ticker = &node[id_insert];
    25f2:	fa0f f38a 	sxth.w	r3, sl
    25f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    25fa:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    25fc:	46d0      	mov	r8, sl
    25fe:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    2602:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    2606:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    2608:	f8db 3000 	ldr.w	r3, [fp]
    260c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    260e:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2610:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    2612:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2614:	8be3      	ldrh	r3, [r4, #30]
    2616:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    2618:	bf86      	itte	hi
    261a:	1a9b      	subhi	r3, r3, r2
    261c:	b29b      	uxthhi	r3, r3
		skip = 0;
    261e:	2300      	movls	r3, #0
    2620:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    2622:	fa0f f388 	sxth.w	r3, r8
    2626:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    262a:	00db      	lsls	r3, r3, #3
    262c:	9311      	str	r3, [sp, #68]	; 0x44
    262e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    2630:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    2634:	f8db 0018 	ldr.w	r0, [fp, #24]
    2638:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    263a:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    263e:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    2640:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    2644:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    2648:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    264a:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    264c:	2bff      	cmp	r3, #255	; 0xff
    264e:	d007      	beq.n	2660 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    2650:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    2654:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    2658:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    265a:	4281      	cmp	r1, r0
    265c:	f200 80a9 	bhi.w	27b2 <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    2660:	f8de 0018 	ldr.w	r0, [lr, #24]
    2664:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    2666:	eb01 0c00 	add.w	ip, r1, r0
    266a:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    266c:	2eff      	cmp	r6, #255	; 0xff
    266e:	f040 80ae 	bne.w	27ce <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    2672:	980d      	ldr	r0, [sp, #52]	; 0x34
    2674:	b130      	cbz	r0, 2684 <ticker_job+0x468>
    2676:	9805      	ldr	r0, [sp, #20]
    2678:	4281      	cmp	r1, r0
    267a:	f0c0 80bf 	bcc.w	27fc <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    267e:	2eff      	cmp	r6, #255	; 0xff
    2680:	f040 818a 	bne.w	2998 <ticker_job+0x77c>
		if (previous == current) {
    2684:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    2686:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    268a:	4283      	cmp	r3, r0
			node[previous].next = id;
    268c:	bf18      	it	ne
    268e:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    2692:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    2696:	bf16      	itet	ne
    2698:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    269c:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    26a0:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    26a4:	2bff      	cmp	r3, #255	; 0xff
    26a6:	d006      	beq.n	26b6 <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    26a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    26ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    26b0:	689a      	ldr	r2, [r3, #8]
    26b2:	1a51      	subs	r1, r2, r1
    26b4:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    26b6:	78a3      	ldrb	r3, [r4, #2]
    26b8:	3301      	adds	r3, #1
    26ba:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    26bc:	2100      	movs	r1, #0
			if (user_op) {
    26be:	2d00      	cmp	r5, #0
    26c0:	d093      	beq.n	25ea <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    26c2:	4628      	mov	r0, r5
    26c4:	f7ff fd49 	bl	215a <ticker_job_op_cb>
    26c8:	e78f      	b.n	25ea <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    26ca:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    26ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    26d0:	011b      	lsls	r3, r3, #4
    26d2:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    26d4:	f109 0201 	add.w	r2, r9, #1
    26d8:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    26dc:	9a04      	ldr	r2, [sp, #16]
    26de:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    26e0:	454a      	cmp	r2, r9
    26e2:	bf08      	it	eq
    26e4:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    26e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    26ea:	5cd3      	ldrb	r3, [r2, r3]
    26ec:	2b03      	cmp	r3, #3
    26ee:	d10e      	bne.n	270e <ticker_job+0x4f2>
				id_insert = user_op->id;
    26f0:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    26f4:	9b08      	ldr	r3, [sp, #32]
    26f6:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    26fa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    26fe:	7862      	ldrb	r2, [r4, #1]
    2700:	78a3      	ldrb	r3, [r4, #2]
    2702:	429a      	cmp	r2, r3
    2704:	d009      	beq.n	271a <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    2706:	2101      	movs	r1, #1
    2708:	4628      	mov	r0, r5
    270a:	f7ff fd26 	bl	215a <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    270e:	9b04      	ldr	r3, [sp, #16]
    2710:	789b      	ldrb	r3, [r3, #2]
    2712:	454b      	cmp	r3, r9
    2714:	d1d9      	bne.n	26ca <ticker_job+0x4ae>
    2716:	9b01      	ldr	r3, [sp, #4]
    2718:	e5e6      	b.n	22e8 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    271a:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    271c:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    2720:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    2722:	692b      	ldr	r3, [r5, #16]
    2724:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    2726:	8aab      	ldrh	r3, [r5, #20]
    2728:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    272a:	69ab      	ldr	r3, [r5, #24]
    272c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    272e:	69eb      	ldr	r3, [r5, #28]
    2730:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    2732:	6a2b      	ldr	r3, [r5, #32]
    2734:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    2736:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    2738:	68ab      	ldr	r3, [r5, #8]
    273a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    273c:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    273e:	686a      	ldr	r2, [r5, #4]
    2740:	4620      	mov	r0, r4
    2742:	f7ff fcec 	bl	211e <ticks_to_expire_prep>
	ticker->force = 1;
    2746:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    2748:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    274a:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    274c:	70e3      	strb	r3, [r4, #3]
    274e:	e75b      	b.n	2608 <ticker_job+0x3ec>
    2750:	ff172b5a 	.word	0xff172b5a
    2754:	7f172b59 	.word	0x7f172b59
    2758:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    275c:	6860      	ldr	r0, [r4, #4]
    275e:	2800      	cmp	r0, #0
    2760:	d07b      	beq.n	285a <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    2762:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2764:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    2766:	4b90      	ldr	r3, [pc, #576]	; (29a8 <ticker_job+0x78c>)
	ticker->remainder_current += ticker->remainder_periodic;
    2768:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    276a:	4990      	ldr	r1, [pc, #576]	; (29ac <ticker_job+0x790>)
    276c:	18d3      	adds	r3, r2, r3
    276e:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    2770:	bf9c      	itt	ls
    2772:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    2776:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    277a:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    277c:	bf8b      	itete	hi
    277e:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    2780:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    2784:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    2786:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2788:	4403      	add	r3, r0
		return 1;
    278a:	bf98      	it	ls
    278c:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    278e:	4413      	add	r3, r2
			ticker->lazy_current++;
    2790:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2792:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    2794:	3201      	adds	r2, #1
    2796:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    2798:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    279a:	4293      	cmp	r3, r2
    279c:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    27a0:	bf89      	itett	hi
    27a2:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    27a4:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    27a6:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    27a8:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    27aa:	bf9c      	itt	ls
    27ac:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    27ae:	60a1      	strls	r1, [r4, #8]
    27b0:	e73d      	b.n	262e <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    27b2:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    27b4:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    27b6:	b946      	cbnz	r6, 27ca <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    27b8:	9f05      	ldr	r7, [sp, #20]
    27ba:	42b8      	cmp	r0, r7
    27bc:	d200      	bcs.n	27c0 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    27be:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    27c0:	9309      	str	r3, [sp, #36]	; 0x24
    27c2:	9605      	str	r6, [sp, #20]
    27c4:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    27c8:	e740      	b.n	264c <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    27ca:	9306      	str	r3, [sp, #24]
    27cc:	e7f8      	b.n	27c0 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    27ce:	b230      	sxth	r0, r6
    27d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    27d4:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    27d8:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    27da:	68bf      	ldr	r7, [r7, #8]
    27dc:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    27de:	4567      	cmp	r7, ip
    27e0:	d20a      	bcs.n	27f8 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    27e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    27e4:	69bf      	ldr	r7, [r7, #24]
    27e6:	2f00      	cmp	r7, #0
    27e8:	f47f af43 	bne.w	2672 <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    27ec:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    27ee:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    27f2:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    27f6:	e739      	b.n	266c <ticker_job+0x450>
			return TICKER_NULL;
    27f8:	26ff      	movs	r6, #255	; 0xff
    27fa:	e73a      	b.n	2672 <ticker_job+0x456>
	while (id_insert !=
    27fc:	9b06      	ldr	r3, [sp, #24]
    27fe:	4598      	cmp	r8, r3
    2800:	f43f af59 	beq.w	26b6 <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    2804:	9b06      	ldr	r3, [sp, #24]
    2806:	2bff      	cmp	r3, #255	; 0xff
    2808:	d0a8      	beq.n	275c <ticker_job+0x540>
    280a:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    280c:	b233      	sxth	r3, r6
    280e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2812:	9305      	str	r3, [sp, #20]
    2814:	9a05      	ldr	r2, [sp, #20]
    2816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2818:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    281c:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    281e:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    2820:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    2822:	bf88      	it	hi
    2824:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    2826:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    2828:	bf8c      	ite	hi
    282a:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    282c:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    282e:	2a00      	cmp	r2, #0
    2830:	d094      	beq.n	275c <ticker_job+0x540>
    2832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2834:	4293      	cmp	r3, r2
    2836:	d891      	bhi.n	275c <ticker_job+0x540>
			    skip_collide <= skip &&
    2838:	78fa      	ldrb	r2, [r7, #3]
    283a:	78e3      	ldrb	r3, [r4, #3]
    283c:	429a      	cmp	r2, r3
    283e:	d28d      	bcs.n	275c <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    2840:	4631      	mov	r1, r6
    2842:	4658      	mov	r0, fp
    2844:	f7ff fc3f 	bl	20c6 <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    2848:	78bb      	ldrb	r3, [r7, #2]
    284a:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    284c:	9a05      	ldr	r2, [sp, #20]
    284e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    2850:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    2852:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    2856:	46b2      	mov	sl, r6
    2858:	e6e9      	b.n	262e <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    285a:	2101      	movs	r1, #1
    285c:	e72f      	b.n	26be <ticker_job+0x4a2>
		user = &users[count_user];
    285e:	9b01      	ldr	r3, [sp, #4]
    2860:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    2864:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    2866:	786b      	ldrb	r3, [r5, #1]
    2868:	78ea      	ldrb	r2, [r5, #3]
    286a:	429a      	cmp	r2, r3
    286c:	d102      	bne.n	2874 <ticker_job+0x658>
    286e:	3c01      	subs	r4, #1
    2870:	b2e4      	uxtb	r4, r4
    2872:	e551      	b.n	2318 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    2874:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2878:	011b      	lsls	r3, r3, #4
    287a:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    287c:	5cf3      	ldrb	r3, [r6, r3]
    287e:	2b01      	cmp	r3, #1
    2880:	d025      	beq.n	28ce <ticker_job+0x6b2>
    2882:	2b02      	cmp	r3, #2
    2884:	d12a      	bne.n	28dc <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    2886:	f8d2 c004 	ldr.w	ip, [r2, #4]
    288a:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    288c:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    2890:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    2894:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    2898:	28ff      	cmp	r0, #255	; 0xff
    289a:	d004      	beq.n	28a6 <ticker_job+0x68a>
    289c:	6819      	ldr	r1, [r3, #0]
    289e:	f8db 7014 	ldr.w	r7, [fp, #20]
    28a2:	42b9      	cmp	r1, r7
    28a4:	d023      	beq.n	28ee <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    28a6:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    28aa:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    28ae:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    28b0:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    28b2:	29ff      	cmp	r1, #255	; 0xff
    28b4:	d007      	beq.n	28c6 <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    28b6:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    28ba:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    28be:	6987      	ldr	r7, [r0, #24]
    28c0:	6880      	ldr	r0, [r0, #8]
    28c2:	b1df      	cbz	r7, 28fc <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    28c4:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    28c6:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    28ca:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    28ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    28d0:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    28d4:	b113      	cbz	r3, 28dc <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    28d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    28d8:	2000      	movs	r0, #0
    28da:	4798      	blx	r3
			first = user->first + 1;
    28dc:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    28de:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    28e0:	3301      	adds	r3, #1
    28e2:	b2db      	uxtb	r3, r3
				first = 0;
    28e4:	429a      	cmp	r2, r3
    28e6:	bf08      	it	eq
    28e8:	2300      	moveq	r3, #0
			user->first = first;
    28ea:	706b      	strb	r3, [r5, #1]
    28ec:	e7bb      	b.n	2866 <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    28ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    28f2:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    28f6:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    28fa:	e7da      	b.n	28b2 <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    28fc:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    28fe:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    2902:	e7d6      	b.n	28b2 <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    2904:	9b03      	ldr	r3, [sp, #12]
    2906:	2bff      	cmp	r3, #255	; 0xff
    2908:	d107      	bne.n	291a <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    290a:	f00b fd1d 	bl	e348 <cntr_cnt_get>
    290e:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    2910:	f00b fcf2 	bl	e2f8 <cntr_start>
    2914:	b908      	cbnz	r0, 291a <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    2916:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    291a:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    291e:	f8db 2000 	ldr.w	r2, [fp]
		LL_ASSERT(i);
    2922:	4e23      	ldr	r6, [pc, #140]	; (29b0 <ticker_job+0x794>)
	ticker = &instance->node[instance->ticker_id_head];
    2924:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    2928:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	i = 10;
    292c:	270a      	movs	r7, #10
	ticks_to_expire = ticker->ticks_to_expire;
    292e:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    2930:	f00b fd0a 	bl	e348 <cntr_cnt_get>
		cc = instance->ticks_current;
    2934:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2938:	1b03      	subs	r3, r0, r4
    293a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    293e:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    2940:	42ab      	cmp	r3, r5
    2942:	bf2c      	ite	cs
    2944:	18e4      	addcs	r4, r4, r3
    2946:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    2948:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    294c:	4680      	mov	r8, r0
		instance->trigger_set_cb(cc);
    294e:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    2952:	4620      	mov	r0, r4
    2954:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    2956:	f00b fcf7 	bl	e348 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    295a:	eba0 0008 	sub.w	r0, r0, r8
    295e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2962:	eba4 0408 	sub.w	r4, r4, r8
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    2966:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2968:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    296c:	42a0      	cmp	r0, r4
		i--;
    296e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    2972:	f67f ace3 	bls.w	233c <ticker_job+0x120>
		LL_ASSERT(i);
    2976:	2f00      	cmp	r7, #0
    2978:	d1da      	bne.n	2930 <ticker_job+0x714>
    297a:	f240 4105 	movw	r1, #1029	; 0x405
    297e:	4630      	mov	r0, r6
    2980:	f7fd ff96 	bl	8b0 <bt_ctlr_assert_handle>
    2984:	e7d4      	b.n	2930 <ticker_job+0x714>
	instance->job_guard = 0;
    2986:	2300      	movs	r3, #0
    2988:	f88b 301e 	strb.w	r3, [fp, #30]
    298c:	e4cc      	b.n	2328 <ticker_job+0x10c>
	if (!pending) {
    298e:	2b00      	cmp	r3, #0
    2990:	d1f9      	bne.n	2986 <ticker_job+0x76a>
		flag_compare_update = 1;
    2992:	2301      	movs	r3, #1
    2994:	9302      	str	r3, [sp, #8]
    2996:	e4b6      	b.n	2306 <ticker_job+0xea>
	while (id_insert !=
    2998:	45b0      	cmp	r8, r6
    299a:	f47f af37 	bne.w	280c <ticker_job+0x5f0>
    299e:	e68a      	b.n	26b6 <ticker_job+0x49a>
}
    29a0:	b013      	add	sp, #76	; 0x4c
    29a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29a6:	bf00      	nop
    29a8:	ff172b5a 	.word	0xff172b5a
    29ac:	7f172b59 	.word	0x7f172b59
    29b0:	0001087c 	.word	0x0001087c

000029b4 <ticker_init>:
{
    29b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    29b6:	4d1a      	ldr	r5, [pc, #104]	; (2a20 <ticker_init+0x6c>)
{
    29b8:	9f05      	ldr	r7, [sp, #20]
    29ba:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    29be:	262c      	movs	r6, #44	; 0x2c
    29c0:	4346      	muls	r6, r0
    29c2:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    29c6:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    29c8:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    29cc:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    29ce:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    29d2:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    29d6:	3b01      	subs	r3, #1
    29d8:	b2db      	uxtb	r3, r3
    29da:	2bff      	cmp	r3, #255	; 0xff
    29dc:	d111      	bne.n	2a02 <ticker_init+0x4e>
	if (count_op) {
    29de:	b9ec      	cbnz	r4, 2a1c <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    29e0:	222c      	movs	r2, #44	; 0x2c
    29e2:	fb02 5200 	mla	r2, r2, r0, r5
    29e6:	9908      	ldr	r1, [sp, #32]
    29e8:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    29ea:	9909      	ldr	r1, [sp, #36]	; 0x24
    29ec:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    29ee:	990a      	ldr	r1, [sp, #40]	; 0x28
    29f0:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    29f2:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    29f4:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    29f6:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    29f8:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    29fa:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    29fc:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    29fe:	4620      	mov	r0, r4
    2a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    2a02:	b21a      	sxth	r2, r3
    2a04:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    2a08:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    2a0a:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    2a0e:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    2a12:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    2a14:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    2a18:	b2e4      	uxtb	r4, r4
    2a1a:	e7dc      	b.n	29d6 <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    2a1c:	2001      	movs	r0, #1
}
    2a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a20:	2000022c 	.word	0x2000022c

00002a24 <ticker_trigger>:
	instance = &_instance[instance_index];
    2a24:	4a07      	ldr	r2, [pc, #28]	; (2a44 <ticker_trigger+0x20>)
    2a26:	212c      	movs	r1, #44	; 0x2c
    2a28:	fb00 2301 	mla	r3, r0, r1, r2
{
    2a2c:	b410      	push	{r4}
	if (instance->sched_cb) {
    2a2e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    2a30:	b12c      	cbz	r4, 2a3e <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    2a32:	46a4      	mov	ip, r4
    2a34:	2201      	movs	r2, #1
    2a36:	2103      	movs	r1, #3
    2a38:	2002      	movs	r0, #2
}
    2a3a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    2a3c:	4760      	bx	ip
}
    2a3e:	bc10      	pop	{r4}
    2a40:	4770      	bx	lr
    2a42:	bf00      	nop
    2a44:	2000022c 	.word	0x2000022c

00002a48 <ticker_start>:
{
    2a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    2a4c:	4f25      	ldr	r7, [pc, #148]	; (2ae4 <ticker_start+0x9c>)
    2a4e:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    2a52:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    2a54:	fb08 7000 	mla	r0, r8, r0, r7
    2a58:	fa0f fc81 	sxth.w	ip, r1
    2a5c:	f8d0 e004 	ldr.w	lr, [r0, #4]
    2a60:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    2a64:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    2a68:	78f4      	ldrb	r4, [r6, #3]
    2a6a:	1c65      	adds	r5, r4, #1
    2a6c:	b2ed      	uxtb	r5, r5
		last = 0;
    2a6e:	45ae      	cmp	lr, r5
    2a70:	bf98      	it	ls
    2a72:	2500      	movls	r5, #0
	if (last == user->first) {
    2a74:	f896 e001 	ldrb.w	lr, [r6, #1]
    2a78:	45ae      	cmp	lr, r5
    2a7a:	d02f      	beq.n	2adc <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    2a7c:	f8d6 c004 	ldr.w	ip, [r6, #4]
    2a80:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2a84:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    2a88:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    2a8c:	f04f 0a03 	mov.w	sl, #3
    2a90:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    2a94:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    2a96:	9b08      	ldr	r3, [sp, #32]
    2a98:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    2a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a9c:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    2a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2aa0:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    2aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2aa4:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    2aa6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    2aaa:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    2aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2aae:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    2ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2ab2:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    2ab4:	2302      	movs	r3, #2
    2ab6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    2ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2aba:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    2abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    2abe:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    2ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    2ac2:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    2ac4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    2ac6:	6a03      	ldr	r3, [r0, #32]
    2ac8:	4608      	mov	r0, r1
    2aca:	4798      	blx	r3
    2acc:	fb09 7308 	mla	r3, r9, r8, r7
    2ad0:	2200      	movs	r2, #0
    2ad2:	2104      	movs	r1, #4
    2ad4:	47a8      	blx	r5
	return user_op->status;
    2ad6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    2adc:	2001      	movs	r0, #1
}
    2ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ae2:	bf00      	nop
    2ae4:	2000022c 	.word	0x2000022c

00002ae8 <ticker_update>:
{
    2ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    2aec:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2b80 <ticker_update+0x98>
    2af0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    2af4:	fb0a 8e00 	mla	lr, sl, r0, r8
    2af8:	b20f      	sxth	r7, r1
    2afa:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    2afe:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    2b00:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    2b04:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    2b08:	78c4      	ldrb	r4, [r0, #3]
    2b0a:	1c66      	adds	r6, r4, #1
    2b0c:	b2f6      	uxtb	r6, r6
		last = 0;
    2b0e:	42b5      	cmp	r5, r6
    2b10:	bf98      	it	ls
    2b12:	2600      	movls	r6, #0
	if (last == user->first) {
    2b14:	7845      	ldrb	r5, [r0, #1]
    2b16:	42b5      	cmp	r5, r6
    2b18:	d02f      	beq.n	2b7a <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    2b1a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    2b1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2b22:	0125      	lsls	r5, r4, #4
    2b24:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    2b28:	2704      	movs	r7, #4
    2b2a:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    2b2e:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    2b30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    2b34:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    2b36:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    2b3a:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    2b3c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    2b40:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    2b42:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    2b46:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    2b48:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    2b4c:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    2b4e:	2302      	movs	r3, #2
    2b50:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    2b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2b54:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    2b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    2b58:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    2b5a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    2b5c:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    2b5e:	f8de 3020 	ldr.w	r3, [lr, #32]
    2b62:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    2b66:	4608      	mov	r0, r1
    2b68:	4798      	blx	r3
    2b6a:	fb09 830a 	mla	r3, r9, sl, r8
    2b6e:	2200      	movs	r2, #0
    2b70:	4639      	mov	r1, r7
    2b72:	47a8      	blx	r5
	return user_op->status;
    2b74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    2b7a:	2001      	movs	r0, #1
}
    2b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b80:	2000022c 	.word	0x2000022c

00002b84 <ticker_stop>:
{
    2b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    2b88:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2bf8 <ticker_stop+0x74>
    2b8c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    2b90:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    2b94:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    2b96:	f8de 0004 	ldr.w	r0, [lr, #4]
    2b9a:	b20e      	sxth	r6, r1
    2b9c:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    2ba0:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    2ba4:	78fc      	ldrb	r4, [r7, #3]
    2ba6:	1c65      	adds	r5, r4, #1
    2ba8:	b2ed      	uxtb	r5, r5
		last = 0;
    2baa:	42a8      	cmp	r0, r5
    2bac:	bf98      	it	ls
    2bae:	2500      	movls	r5, #0
	if (last == user->first) {
    2bb0:	7878      	ldrb	r0, [r7, #1]
    2bb2:	42a8      	cmp	r0, r5
    2bb4:	d01d      	beq.n	2bf2 <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    2bb6:	6878      	ldr	r0, [r7, #4]
    2bb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2bbc:	0124      	lsls	r4, r4, #4
    2bbe:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    2bc0:	f04f 0c05 	mov.w	ip, #5
    2bc4:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    2bc8:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    2bca:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    2bcc:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    2bce:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    2bd0:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    2bd2:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    2bd4:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    2bd6:	f8de 3020 	ldr.w	r3, [lr, #32]
    2bda:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    2bde:	4608      	mov	r0, r1
    2be0:	4798      	blx	r3
    2be2:	fb08 930a 	mla	r3, r8, sl, r9
    2be6:	2200      	movs	r2, #0
    2be8:	2104      	movs	r1, #4
    2bea:	47a0      	blx	r4
	return user_op->status;
    2bec:	6a70      	ldr	r0, [r6, #36]	; 0x24
    2bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    2bf2:	2001      	movs	r0, #1
}
    2bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bf8:	2000022c 	.word	0x2000022c

00002bfc <ticker_next_slot_get>:
{
    2bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    2c00:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2c7c <ticker_next_slot_get+0x80>
    2c04:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    2c08:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    2c0a:	fb0a 8000 	mla	r0, sl, r0, r8
    2c0e:	fa0f fe81 	sxth.w	lr, r1
    2c12:	6845      	ldr	r5, [r0, #4]
    2c14:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    2c18:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    2c1c:	78fc      	ldrb	r4, [r7, #3]
    2c1e:	1c66      	adds	r6, r4, #1
    2c20:	b2f6      	uxtb	r6, r6
		last = 0;
    2c22:	42b5      	cmp	r5, r6
    2c24:	bf98      	it	ls
    2c26:	2600      	movls	r6, #0
	if (last == user->first) {
    2c28:	787d      	ldrb	r5, [r7, #1]
    2c2a:	42b5      	cmp	r5, r6
    2c2c:	d023      	beq.n	2c76 <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    2c2e:	f8d7 c004 	ldr.w	ip, [r7, #4]
    2c32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2c36:	0125      	lsls	r5, r4, #4
    2c38:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    2c3c:	f04f 0e02 	mov.w	lr, #2
    2c40:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    2c44:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    2c46:	9b08      	ldr	r3, [sp, #32]
    2c48:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    2c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c4c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    2c4e:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    2c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    2c52:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    2c54:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    2c56:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    2c5a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    2c5c:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    2c5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    2c60:	6a03      	ldr	r3, [r0, #32]
    2c62:	4608      	mov	r0, r1
    2c64:	4798      	blx	r3
    2c66:	fb09 830a 	mla	r3, r9, sl, r8
    2c6a:	2200      	movs	r2, #0
    2c6c:	2104      	movs	r1, #4
    2c6e:	47a8      	blx	r5
	return user_op->status;
    2c70:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    2c76:	2001      	movs	r0, #1
}
    2c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c7c:	2000022c 	.word	0x2000022c

00002c80 <ticker_job_idle_get>:
{
    2c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    2c84:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2cf4 <ticker_job_idle_get+0x74>
    2c88:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    2c8c:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    2c90:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    2c92:	f8de 0004 	ldr.w	r0, [lr, #4]
    2c96:	b20e      	sxth	r6, r1
    2c98:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    2c9c:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    2ca0:	78fc      	ldrb	r4, [r7, #3]
    2ca2:	1c65      	adds	r5, r4, #1
    2ca4:	b2ed      	uxtb	r5, r5
		last = 0;
    2ca6:	42a8      	cmp	r0, r5
    2ca8:	bf98      	it	ls
    2caa:	2500      	movls	r5, #0
	if (last == user->first) {
    2cac:	7878      	ldrb	r0, [r7, #1]
    2cae:	42a8      	cmp	r0, r5
    2cb0:	d01d      	beq.n	2cee <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    2cb2:	6878      	ldr	r0, [r7, #4]
    2cb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2cb8:	0124      	lsls	r4, r4, #4
    2cba:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    2cbc:	f04f 0c01 	mov.w	ip, #1
    2cc0:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    2cc4:	20ff      	movs	r0, #255	; 0xff
    2cc6:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    2cc8:	2002      	movs	r0, #2
    2cca:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    2ccc:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    2cce:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    2cd0:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    2cd2:	f8de 3020 	ldr.w	r3, [lr, #32]
    2cd6:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    2cda:	4608      	mov	r0, r1
    2cdc:	4798      	blx	r3
    2cde:	fb08 930a 	mla	r3, r8, sl, r9
    2ce2:	2200      	movs	r2, #0
    2ce4:	2104      	movs	r1, #4
    2ce6:	47a0      	blx	r4
	return user_op->status;
    2ce8:	6a70      	ldr	r0, [r6, #36]	; 0x24
    2cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    2cee:	2001      	movs	r0, #1
}
    2cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cf4:	2000022c 	.word	0x2000022c

00002cf8 <ticker_job_sched>:
{
    2cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    2cfc:	4c08      	ldr	r4, [pc, #32]	; (2d20 <ticker_job_sched+0x28>)
    2cfe:	252c      	movs	r5, #44	; 0x2c
    2d00:	fb05 4300 	mla	r3, r5, r0, r4
{
    2d04:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    2d06:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    2d08:	6a1b      	ldr	r3, [r3, #32]
    2d0a:	4608      	mov	r0, r1
    2d0c:	4798      	blx	r3
    2d0e:	fb06 4305 	mla	r3, r6, r5, r4
    2d12:	46bc      	mov	ip, r7
    2d14:	2200      	movs	r2, #0
    2d16:	2104      	movs	r1, #4
}
    2d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    2d1c:	4760      	bx	ip
    2d1e:	bf00      	nop
    2d20:	2000022c 	.word	0x2000022c

00002d24 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    2d24:	f00b bb10 	b.w	e348 <cntr_cnt_get>

00002d28 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2d28:	1a40      	subs	r0, r0, r1
}
    2d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d2e:	4770      	bx	lr

00002d30 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    2d30:	b508      	push	{r3, lr}
    2d32:	4603      	mov	r3, r0
	if (addr_type > 1) {
    2d34:	2b01      	cmp	r3, #1
{
    2d36:	4608      	mov	r0, r1
	if (addr_type > 1) {
    2d38:	d80e      	bhi.n	2d58 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    2d3a:	b133      	cbz	r3, 2d4a <ll_addr_get+0x1a>
		if (bdaddr) {
    2d3c:	b119      	cbz	r1, 2d46 <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    2d3e:	2206      	movs	r2, #6
    2d40:	4906      	ldr	r1, [pc, #24]	; (2d5c <ll_addr_get+0x2c>)
    2d42:	f7fd fc59 	bl	5f8 <memcpy>
		}

		return rnd_addr;
    2d46:	4805      	ldr	r0, [pc, #20]	; (2d5c <ll_addr_get+0x2c>)
    2d48:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    2d4a:	b119      	cbz	r1, 2d54 <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    2d4c:	2206      	movs	r2, #6
    2d4e:	4904      	ldr	r1, [pc, #16]	; (2d60 <ll_addr_get+0x30>)
    2d50:	f7fd fc52 	bl	5f8 <memcpy>
	}

	return pub_addr;
    2d54:	4802      	ldr	r0, [pc, #8]	; (2d60 <ll_addr_get+0x30>)
}
    2d56:	bd08      	pop	{r3, pc}
		return NULL;
    2d58:	2000      	movs	r0, #0
    2d5a:	bd08      	pop	{r3, pc}
    2d5c:	2000028a 	.word	0x2000028a
    2d60:	20000284 	.word	0x20000284

00002d64 <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    2d64:	b570      	push	{r4, r5, r6, lr}
    2d66:	4606      	mov	r6, r0
    2d68:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    2d6a:	f008 fc3f 	bl	b5ec <ll_adv_is_enabled>
    2d6e:	4604      	mov	r4, r0
    2d70:	b110      	cbz	r0, 2d78 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    2d72:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    2d74:	4620      	mov	r0, r4
    2d76:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    2d78:	f008 fc4e 	bl	b618 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    2d7c:	f010 0f06 	tst.w	r0, #6
    2d80:	d1f7      	bne.n	2d72 <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    2d82:	2206      	movs	r2, #6
    2d84:	4629      	mov	r1, r5
	if (addr_type) {
    2d86:	b11e      	cbz	r6, 2d90 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    2d88:	4802      	ldr	r0, [pc, #8]	; (2d94 <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    2d8a:	f7fd fc35 	bl	5f8 <memcpy>
    2d8e:	e7f1      	b.n	2d74 <ll_addr_set+0x10>
    2d90:	4801      	ldr	r0, [pc, #4]	; (2d98 <ll_addr_set+0x34>)
    2d92:	e7fa      	b.n	2d8a <ll_addr_set+0x26>
    2d94:	2000028a 	.word	0x2000028a
    2d98:	20000284 	.word	0x20000284

00002d9c <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    2d9c:	2300      	movs	r3, #0
    2d9e:	7003      	strb	r3, [r0, #0]
	*max = 0;
    2da0:	700b      	strb	r3, [r1, #0]
    2da2:	4770      	bx	lr

00002da4 <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    2da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2da6:	4607      	mov	r7, r0
    2da8:	460e      	mov	r6, r1
	while (len) {
    2daa:	460c      	mov	r4, r1
    2dac:	1b35      	subs	r5, r6, r4
    2dae:	443d      	add	r5, r7
    2db0:	b18c      	cbz	r4, 2dd6 <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    2db2:	f7fe f939 	bl	1028 <sys_rand32_get>

		if (len >= sizeof(v)) {
    2db6:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    2db8:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    2dba:	d907      	bls.n	2dcc <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    2dbc:	2204      	movs	r2, #4
    2dbe:	eb0d 0102 	add.w	r1, sp, r2
    2dc2:	4628      	mov	r0, r5
    2dc4:	f7fd fc18 	bl	5f8 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    2dc8:	3c04      	subs	r4, #4
    2dca:	e7ef      	b.n	2dac <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    2dcc:	4622      	mov	r2, r4
    2dce:	a901      	add	r1, sp, #4
    2dd0:	4628      	mov	r0, r5
    2dd2:	f7fd fc11 	bl	5f8 <memcpy>
			break;
		}
	}

	return 0;
}
    2dd6:	2000      	movs	r0, #0
    2dd8:	b003      	add	sp, #12
    2dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002ddc <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
    2ddc:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    2dde:	2300      	movs	r3, #0
    2de0:	f00b fae6 	bl	e3b0 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    2de4:	2000      	movs	r0, #0
    2de6:	bd08      	pop	{r3, pc}

00002de8 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    2de8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    2dea:	4802      	ldr	r0, [pc, #8]	; (2df4 <_hci_driver_init+0xc>)
    2dec:	f7fe ff40 	bl	1c70 <bt_hci_driver_register>

	return 0;
}
    2df0:	2000      	movs	r0, #0
    2df2:	bd08      	pop	{r3, pc}
    2df4:	000108bc 	.word	0x000108bc

00002df8 <hci_driver_send>:
{
    2df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!buf->len) {
    2dfa:	8983      	ldrh	r3, [r0, #12]
{
    2dfc:	4605      	mov	r5, r0
	if (!buf->len) {
    2dfe:	b1d3      	cbz	r3, 2e36 <hci_driver_send+0x3e>
	switch (type) {
    2e00:	7d03      	ldrb	r3, [r0, #20]
    2e02:	b18b      	cbz	r3, 2e28 <hci_driver_send+0x30>
    2e04:	2b02      	cmp	r3, #2
    2e06:	d116      	bne.n	2e36 <hci_driver_send+0x3e>
	err = hci_acl_handle(buf, &evt);
    2e08:	a901      	add	r1, sp, #4
    2e0a:	f001 fb35 	bl	4478 <hci_acl_handle>
    2e0e:	4604      	mov	r4, r0
	if (evt) {
    2e10:	9801      	ldr	r0, [sp, #4]
    2e12:	b108      	cbz	r0, 2e18 <hci_driver_send+0x20>
		bt_recv_prio(evt);
    2e14:	f7fe ff5e 	bl	1cd4 <bt_recv_prio>
	if (!err) {
    2e18:	b91c      	cbnz	r4, 2e22 <hci_driver_send+0x2a>
		net_buf_unref(buf);
    2e1a:	4628      	mov	r0, r5
    2e1c:	f00c f97e 	bl	f11c <net_buf_unref>
    2e20:	2400      	movs	r4, #0
}
    2e22:	4620      	mov	r0, r4
    2e24:	b003      	add	sp, #12
    2e26:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf);
    2e28:	f000 fd2a 	bl	3880 <hci_cmd_handle>
	if (evt) {
    2e2c:	2800      	cmp	r0, #0
    2e2e:	d0f4      	beq.n	2e1a <hci_driver_send+0x22>
		bt_recv_prio(evt);
    2e30:	f7fe ff50 	bl	1cd4 <bt_recv_prio>
    2e34:	e7f1      	b.n	2e1a <hci_driver_send+0x22>
		return -EINVAL;
    2e36:	f06f 0415 	mvn.w	r4, #21
    2e3a:	e7f2      	b.n	2e22 <hci_driver_send+0x2a>

00002e3c <encode_node>:
{
    2e3c:	b513      	push	{r0, r1, r4, lr}
    2e3e:	9001      	str	r0, [sp, #4]
	switch (class) {
    2e40:	1e08      	subs	r0, r1, #0
    2e42:	db03      	blt.n	2e4c <encode_node+0x10>
    2e44:	2802      	cmp	r0, #2
    2e46:	dd07      	ble.n	2e58 <encode_node+0x1c>
    2e48:	2803      	cmp	r0, #3
    2e4a:	d022      	beq.n	2e92 <encode_node+0x56>
		LL_ASSERT(0);
    2e4c:	218a      	movs	r1, #138	; 0x8a
    2e4e:	4816      	ldr	r0, [pc, #88]	; (2ea8 <encode_node+0x6c>)
    2e50:	f7fd fd2e 	bl	8b0 <bt_ctlr_assert_handle>
	struct net_buf *buf = NULL;
    2e54:	2400      	movs	r4, #0
		break;
    2e56:	e00d      	b.n	2e74 <encode_node+0x38>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    2e58:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    2e5a:	bf0e      	itee	eq
    2e5c:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    2e5e:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    2e62:	2001      	movne	r0, #1
    2e64:	f7fe ff16 	bl	1c94 <bt_buf_get_rx>
    2e68:	4604      	mov	r4, r0
		if (buf) {
    2e6a:	b118      	cbz	r0, 2e74 <encode_node+0x38>
			hci_evt_encode(node_rx, buf);
    2e6c:	4601      	mov	r1, r0
    2e6e:	9801      	ldr	r0, [sp, #4]
    2e70:	f001 fbb8 	bl	45e4 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    2e74:	9b01      	ldr	r3, [sp, #4]
    2e76:	2100      	movs	r1, #0
    2e78:	88d8      	ldrh	r0, [r3, #6]
    2e7a:	f009 f851 	bl	bf20 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    2e7e:	a802      	add	r0, sp, #8
    2e80:	2200      	movs	r2, #0
    2e82:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    2e86:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    2e88:	f008 ffe6 	bl	be58 <ll_rx_mem_release>
}
    2e8c:	4620      	mov	r0, r4
    2e8e:	b002      	add	sp, #8
    2e90:	bd10      	pop	{r4, pc}
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    2e92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2e96:	f7fe fefd 	bl	1c94 <bt_buf_get_rx>
    2e9a:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    2e9c:	4601      	mov	r1, r0
    2e9e:	9801      	ldr	r0, [sp, #4]
    2ea0:	f001 fb48 	bl	4534 <hci_acl_encode>
		break;
    2ea4:	e7e6      	b.n	2e74 <encode_node+0x38>
    2ea6:	bf00      	nop
    2ea8:	000108cc 	.word	0x000108cc

00002eac <prio_recv_thread>:
{
    2eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2eae:	4d14      	ldr	r5, [pc, #80]	; (2f00 <prio_recv_thread+0x54>)
			k_fifo_put(&recv_fifo, node_rx);
    2eb0:	4e14      	ldr	r6, [pc, #80]	; (2f04 <prio_recv_thread+0x58>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    2eb2:	f10d 0102 	add.w	r1, sp, #2
    2eb6:	a801      	add	r0, sp, #4
    2eb8:	f008 ff96 	bl	bde8 <ll_rx_get>
    2ebc:	4604      	mov	r4, r0
    2ebe:	b940      	cbnz	r0, 2ed2 <prio_recv_thread+0x26>
		if (node_rx) {
    2ec0:	9b01      	ldr	r3, [sp, #4]
    2ec2:	b1bb      	cbz	r3, 2ef4 <prio_recv_thread+0x48>
			ll_rx_dequeue();
    2ec4:	f009 fd2e 	bl	c924 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    2ec8:	9901      	ldr	r1, [sp, #4]
    2eca:	4630      	mov	r0, r6
    2ecc:	f00c fb4b 	bl	f566 <k_queue_append>
    2ed0:	e7ef      	b.n	2eb2 <prio_recv_thread+0x6>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    2ed2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2ed6:	2001      	movs	r0, #1
    2ed8:	f7fe fedc 	bl	1c94 <bt_buf_get_rx>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    2edc:	4622      	mov	r2, r4
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    2ede:	4607      	mov	r7, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    2ee0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    2ee4:	f001 fd92 	bl	4a0c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    2ee8:	4638      	mov	r0, r7
    2eea:	f7fe fef3 	bl	1cd4 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    2eee:	f00c fd09 	bl	f904 <_impl_k_yield>
    2ef2:	e7de      	b.n	2eb2 <prio_recv_thread+0x6>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    2ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2ef8:	4628      	mov	r0, r5
    2efa:	f00c fddf 	bl	fabc <_impl_k_sem_take>
    2efe:	e7d8      	b.n	2eb2 <prio_recv_thread+0x6>
    2f00:	200056ec 	.word	0x200056ec
    2f04:	20005704 	.word	0x20005704

00002f08 <sys_slist_get.constprop.5>:
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
    2f08:	4b04      	ldr	r3, [pc, #16]	; (2f1c <sys_slist_get.constprop.5+0x14>)
    2f0a:	6818      	ldr	r0, [r3, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    2f0c:	b128      	cbz	r0, 2f1a <sys_slist_get.constprop.5+0x12>
	if (list->tail == node) {
    2f0e:	6859      	ldr	r1, [r3, #4]
	list->head = node->next;
    2f10:	6802      	ldr	r2, [r0, #0]
    2f12:	601a      	str	r2, [r3, #0]
	if (list->tail == node) {
    2f14:	4288      	cmp	r0, r1
		list->tail = list->head;
    2f16:	bf08      	it	eq
    2f18:	605a      	streq	r2, [r3, #4]
}
    2f1a:	4770      	bx	lr
    2f1c:	20000294 	.word	0x20000294

00002f20 <recv_thread>:
{
    2f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		err = k_poll(events, 2, K_FOREVER);
    2f24:	4e6a      	ldr	r6, [pc, #424]	; (30d0 <recv_thread+0x1b0>)
    2f26:	4637      	mov	r7, r6
    2f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f2c:	2102      	movs	r1, #2
    2f2e:	4630      	mov	r0, r6
    2f30:	f00d faae 	bl	10490 <k_poll>
		LL_ASSERT(err == 0);
    2f34:	b120      	cbz	r0, 2f40 <recv_thread+0x20>
    2f36:	f44f 7198 	mov.w	r1, #304	; 0x130
    2f3a:	4866      	ldr	r0, [pc, #408]	; (30d4 <recv_thread+0x1b4>)
    2f3c:	f7fd fcb8 	bl	8b0 <bt_ctlr_assert_handle>
		if (events[0].state == K_POLL_STATE_SIGNALED) {
    2f40:	7b73      	ldrb	r3, [r6, #13]
    2f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2f46:	2b10      	cmp	r3, #16
    2f48:	d105      	bne.n	2f56 <recv_thread+0x36>
			events[0].signal->signaled = 0;
    2f4a:	6932      	ldr	r2, [r6, #16]
    2f4c:	2300      	movs	r3, #0
    2f4e:	6093      	str	r3, [r2, #8]
		struct radio_pdu_node_rx *node_rx = NULL;
    2f50:	f04f 0900 	mov.w	r9, #0
    2f54:	e00a      	b.n	2f6c <recv_thread+0x4c>
		} else if (events[1].state ==
    2f56:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    2f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2f5e:	2b40      	cmp	r3, #64	; 0x40
    2f60:	d1f6      	bne.n	2f50 <recv_thread+0x30>
			node_rx = k_fifo_get(events[1].fifo, 0);
    2f62:	2100      	movs	r1, #0
    2f64:	6a70      	ldr	r0, [r6, #36]	; 0x24
    2f66:	f00c fb22 	bl	f5ae <k_queue_get>
    2f6a:	4681      	mov	r9, r0
		events[0].state = K_POLL_STATE_NOT_READY;
    2f6c:	7b7a      	ldrb	r2, [r7, #13]
    2f6e:	f36f 1207 	bfc	r2, #4, #4
    2f72:	737a      	strb	r2, [r7, #13]
		events[1].state = K_POLL_STATE_NOT_READY;
    2f74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
    2f78:	f36f 1207 	bfc	r2, #4, #4
    2f7c:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	s32_t hbuf_total = hci_hbuf_total;
    2f80:	4a55      	ldr	r2, [pc, #340]	; (30d8 <recv_thread+0x1b8>)
    2f82:	6815      	ldr	r5, [r2, #0]
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2f84:	4a55      	ldr	r2, [pc, #340]	; (30dc <recv_thread+0x1bc>)
    2f86:	f3bf 8f5b 	dmb	ish
    2f8a:	e852 1f00 	ldrex	r1, [r2]
    2f8e:	f021 0301 	bic.w	r3, r1, #1
    2f92:	e842 3000 	strex	r0, r3, [r2]
    2f96:	2800      	cmp	r0, #0
    2f98:	d1f7      	bne.n	2f8a <recv_thread+0x6a>
    2f9a:	f3bf 8f5b 	dmb	ish
	if (reset) {
    2f9e:	07ca      	lsls	r2, r1, #31
	list->head = NULL;
    2fa0:	bf48      	it	mi
    2fa2:	4a4f      	ldrmi	r2, [pc, #316]	; (30e0 <recv_thread+0x1c0>)
    2fa4:	4c4f      	ldr	r4, [pc, #316]	; (30e4 <recv_thread+0x1c4>)
    2fa6:	bf42      	ittt	mi
    2fa8:	2100      	movmi	r1, #0
    2faa:	6011      	strmi	r1, [r2, #0]
	list->tail = NULL;
    2fac:	6051      	strmi	r1, [r2, #4]
	if (hbuf_total <= 0) {
    2fae:	2d00      	cmp	r5, #0
    2fb0:	dc06      	bgt.n	2fc0 <recv_thread+0xa0>
		hbuf_count = -1;
    2fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fb6:	6022      	str	r2, [r4, #0]
		if (node_rx && !buf) {
    2fb8:	f1b9 0f00 	cmp.w	r9, #0
    2fbc:	d121      	bne.n	3002 <recv_thread+0xe2>
    2fbe:	e06d      	b.n	309c <recv_thread+0x17c>
	hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    2fc0:	f8df b128 	ldr.w	fp, [pc, #296]	; 30ec <recv_thread+0x1cc>
    2fc4:	f8df a128 	ldr.w	sl, [pc, #296]	; 30f0 <recv_thread+0x1d0>
    2fc8:	f8db 2000 	ldr.w	r2, [fp]
    2fcc:	4b44      	ldr	r3, [pc, #272]	; (30e0 <recv_thread+0x1c0>)
    2fce:	f8da 1000 	ldr.w	r1, [sl]
    2fd2:	681b      	ldr	r3, [r3, #0]
    2fd4:	9301      	str	r3, [sp, #4]
    2fd6:	1aaa      	subs	r2, r5, r2
    2fd8:	440a      	add	r2, r1
    2fda:	6022      	str	r2, [r4, #0]
	if (!node) {
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d0eb      	beq.n	2fb8 <recv_thread+0x98>
	class = hci_get_class(node_rx);
    2fe0:	4618      	mov	r0, r3
    2fe2:	f001 fd27 	bl	4a34 <hci_get_class>
    2fe6:	4680      	mov	r8, r0
	if (n) {
    2fe8:	f1b9 0f00 	cmp.w	r9, #0
    2fec:	d018      	beq.n	3020 <recv_thread+0x100>
		if (class == HCI_CLASS_EVT_CONNECTION ||
    2fee:	2802      	cmp	r0, #2
    2ff0:	d003      	beq.n	2ffa <recv_thread+0xda>
    2ff2:	2803      	cmp	r0, #3
    2ff4:	d105      	bne.n	3002 <recv_thread+0xe2>
		    (class == HCI_CLASS_ACL_DATA && hbuf_count)) {
    2ff6:	6822      	ldr	r2, [r4, #0]
    2ff8:	b11a      	cbz	r2, 3002 <recv_thread+0xe2>
			k_poll_signal(&hbuf_signal, 0x0);
    2ffa:	2100      	movs	r1, #0
    2ffc:	483a      	ldr	r0, [pc, #232]	; (30e8 <recv_thread+0x1c8>)
    2ffe:	f00d fafd 	bl	105fc <k_poll_signal>
	s8_t class = hci_get_class(node_rx);
    3002:	4648      	mov	r0, r9
    3004:	f001 fd16 	bl	4a34 <hci_get_class>
	if (hbuf_count != -1) {
    3008:	6821      	ldr	r1, [r4, #0]
    300a:	1c4b      	adds	r3, r1, #1
	s8_t class = hci_get_class(node_rx);
    300c:	4605      	mov	r5, r0
	if (hbuf_count != -1) {
    300e:	d04c      	beq.n	30aa <recv_thread+0x18a>
    3010:	4a33      	ldr	r2, [pc, #204]	; (30e0 <recv_thread+0x1c0>)
    3012:	6810      	ldr	r0, [r2, #0]
		switch (class) {
    3014:	2d03      	cmp	r5, #3
    3016:	d853      	bhi.n	30c0 <recv_thread+0x1a0>
    3018:	e8df f005 	tbb	[pc, r5]
    301c:	43344747 	.word	0x43344747
	switch (class) {
    3020:	2802      	cmp	r0, #2
    3022:	d008      	beq.n	3036 <recv_thread+0x116>
    3024:	2803      	cmp	r0, #3
    3026:	d004      	beq.n	3032 <recv_thread+0x112>
		LL_ASSERT(0);
    3028:	21fc      	movs	r1, #252	; 0xfc
    302a:	482a      	ldr	r0, [pc, #168]	; (30d4 <recv_thread+0x1b4>)
    302c:	f7fd fc40 	bl	8b0 <bt_ctlr_assert_handle>
    3030:	e003      	b.n	303a <recv_thread+0x11a>
		if (hbuf_count) {
    3032:	6823      	ldr	r3, [r4, #0]
    3034:	b393      	cbz	r3, 309c <recv_thread+0x17c>
			(void) sys_slist_get(&hbuf_pend);
    3036:	f7ff ff67 	bl	2f08 <sys_slist_get.constprop.5>
		buf = encode_node(node_rx, class);
    303a:	4641      	mov	r1, r8
    303c:	9801      	ldr	r0, [sp, #4]
    303e:	f7ff fefd 	bl	2e3c <encode_node>
		hbuf_count = hbuf_total - (hci_hbuf_sent - hci_hbuf_acked);
    3042:	f8db 3000 	ldr.w	r3, [fp]
    3046:	1aed      	subs	r5, r5, r3
    3048:	f8da 3000 	ldr.w	r3, [sl]
    304c:	441d      	add	r5, r3
    304e:	4b24      	ldr	r3, [pc, #144]	; (30e0 <recv_thread+0x1c0>)
    3050:	6025      	str	r5, [r4, #0]
		buf = encode_node(node_rx, class);
    3052:	4681      	mov	r9, r0
    3054:	6818      	ldr	r0, [r3, #0]
		if (node) {
    3056:	b158      	cbz	r0, 3070 <recv_thread+0x150>
			class = hci_get_class(node_rx);
    3058:	f001 fcec 	bl	4a34 <hci_get_class>
			if (class == HCI_CLASS_EVT_CONNECTION ||
    305c:	2802      	cmp	r0, #2
    305e:	d003      	beq.n	3068 <recv_thread+0x148>
    3060:	2803      	cmp	r0, #3
    3062:	d105      	bne.n	3070 <recv_thread+0x150>
			    (class == HCI_CLASS_ACL_DATA && hbuf_count)) {
    3064:	6823      	ldr	r3, [r4, #0]
    3066:	b11b      	cbz	r3, 3070 <recv_thread+0x150>
				k_poll_signal(&hbuf_signal, 0x0);
    3068:	2100      	movs	r1, #0
    306a:	481f      	ldr	r0, [pc, #124]	; (30e8 <recv_thread+0x1c8>)
    306c:	f00d fac6 	bl	105fc <k_poll_signal>
		if (buf) {
    3070:	f1b9 0f00 	cmp.w	r9, #0
    3074:	d012      	beq.n	309c <recv_thread+0x17c>
			if (buf->len) {
    3076:	f8b9 300c 	ldrh.w	r3, [r9, #12]
				bt_recv(buf);
    307a:	4648      	mov	r0, r9
			if (buf->len) {
    307c:	b32b      	cbz	r3, 30ca <recv_thread+0x1aa>
				bt_recv(buf);
    307e:	f7fe fe1f 	bl	1cc0 <bt_recv>
    3082:	e00b      	b.n	309c <recv_thread+0x17c>
			hbuf_count = 1;
    3084:	2101      	movs	r1, #1
    3086:	6021      	str	r1, [r4, #0]
			if (pend || !hbuf_count) {
    3088:	b178      	cbz	r0, 30aa <recv_thread+0x18a>
	node->next = NULL;
    308a:	2100      	movs	r1, #0
    308c:	f8c9 1000 	str.w	r1, [r9]
	if (!list->tail) {
    3090:	6851      	ldr	r1, [r2, #4]
    3092:	b981      	cbnz	r1, 30b6 <recv_thread+0x196>
		list->tail = node;
    3094:	f8c2 9004 	str.w	r9, [r2, #4]
		list->head = node;
    3098:	f8c2 9000 	str.w	r9, [r2]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    309c:	f00c fc32 	bl	f904 <_impl_k_yield>
    30a0:	e742      	b.n	2f28 <recv_thread+0x8>
    30a2:	2800      	cmp	r0, #0
    30a4:	d1f1      	bne.n	308a <recv_thread+0x16a>
    30a6:	2900      	cmp	r1, #0
    30a8:	d0ef      	beq.n	308a <recv_thread+0x16a>
	buf = encode_node(node_rx, class);
    30aa:	4648      	mov	r0, r9
    30ac:	4629      	mov	r1, r5
    30ae:	f7ff fec5 	bl	2e3c <encode_node>
    30b2:	4681      	mov	r9, r0
    30b4:	e7dc      	b.n	3070 <recv_thread+0x150>
		list->tail->next = node;
    30b6:	f8c1 9000 	str.w	r9, [r1]
		list->tail = node;
    30ba:	f8c2 9004 	str.w	r9, [r2, #4]
    30be:	e7ed      	b.n	309c <recv_thread+0x17c>
			LL_ASSERT(0);
    30c0:	21b3      	movs	r1, #179	; 0xb3
    30c2:	4804      	ldr	r0, [pc, #16]	; (30d4 <recv_thread+0x1b4>)
    30c4:	f7fd fbf4 	bl	8b0 <bt_ctlr_assert_handle>
    30c8:	e7ef      	b.n	30aa <recv_thread+0x18a>
				net_buf_unref(buf);
    30ca:	f00c f827 	bl	f11c <net_buf_unref>
    30ce:	e7e5      	b.n	309c <recv_thread+0x17c>
    30d0:	20005460 	.word	0x20005460
    30d4:	000108cc 	.word	0x000108cc
    30d8:	20003b50 	.word	0x20003b50
    30dc:	20003b58 	.word	0x20003b58
    30e0:	20000294 	.word	0x20000294
    30e4:	20000290 	.word	0x20000290
    30e8:	20005488 	.word	0x20005488
    30ec:	20003b54 	.word	0x20003b54
    30f0:	20003b5c 	.word	0x20003b5c

000030f4 <hci_driver_open>:
{
    30f4:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    30f6:	4815      	ldr	r0, [pc, #84]	; (314c <hci_driver_open+0x58>)
{
    30f8:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    30fa:	f009 fcd1 	bl	caa0 <ll_init>
	if (err) {
    30fe:	4604      	mov	r4, r0
    3100:	bb00      	cbnz	r0, 3144 <hci_driver_open+0x50>
	hci_init(&hbuf_signal);
    3102:	4813      	ldr	r0, [pc, #76]	; (3150 <hci_driver_open+0x5c>)
    3104:	f001 fcae 	bl	4a64 <hci_init>

    3108:	f06f 0309 	mvn.w	r3, #9
    310c:	9303      	str	r3, [sp, #12]
    310e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3112:	4b10      	ldr	r3, [pc, #64]	; (3154 <hci_driver_open+0x60>)
    3114:	4910      	ldr	r1, [pc, #64]	; (3158 <hci_driver_open+0x64>)
    3116:	9405      	str	r4, [sp, #20]
    3118:	9404      	str	r4, [sp, #16]
    311a:	9402      	str	r4, [sp, #8]
    311c:	9401      	str	r4, [sp, #4]
    311e:	9400      	str	r4, [sp, #0]
    3120:	480e      	ldr	r0, [pc, #56]	; (315c <hci_driver_open+0x68>)
    3122:	f00c fea7 	bl	fe74 <_impl_k_thread_create>
    3126:	f06f 0307 	mvn.w	r3, #7
    312a:	9303      	str	r3, [sp, #12]
    312c:	9405      	str	r4, [sp, #20]
    312e:	9404      	str	r4, [sp, #16]
    3130:	9402      	str	r4, [sp, #8]
    3132:	9401      	str	r4, [sp, #4]
    3134:	9400      	str	r4, [sp, #0]
    3136:	4b0a      	ldr	r3, [pc, #40]	; (3160 <hci_driver_open+0x6c>)
    3138:	490a      	ldr	r1, [pc, #40]	; (3164 <hci_driver_open+0x70>)
    313a:	480b      	ldr	r0, [pc, #44]	; (3168 <hci_driver_open+0x74>)
    313c:	f44f 7200 	mov.w	r2, #512	; 0x200
    3140:	f00c fe98 	bl	fe74 <_impl_k_thread_create>
}
    3144:	4620      	mov	r0, r4
    3146:	b006      	add	sp, #24
    3148:	bd10      	pop	{r4, pc}
    314a:	bf00      	nop
    314c:	200056ec 	.word	0x200056ec
    3150:	20005488 	.word	0x20005488
    3154:	00002ead 	.word	0x00002ead
    3158:	20004310 	.word	0x20004310
    315c:	20003ac8 	.word	0x20003ac8
    3160:	00002f21 	.word	0x00002f21
    3164:	200044d0 	.word	0x200044d0
    3168:	20003a60 	.word	0x20003a60

0000316c <sys_put_le32>:
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    316c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    3170:	7008      	strb	r0, [r1, #0]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    3172:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    3174:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    3176:	0a00      	lsrs	r0, r0, #8
    3178:	704b      	strb	r3, [r1, #1]
    317a:	70c8      	strb	r0, [r1, #3]
    317c:	4770      	bx	lr

0000317e <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    317e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    3180:	3008      	adds	r0, #8
{
    3182:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    3184:	2102      	movs	r1, #2
{
    3186:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    3188:	f00b fff6 	bl	f178 <net_buf_simple_add>
	hdr->evt = evt;
    318c:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    318e:	7044      	strb	r4, [r0, #1]
    3190:	bd38      	pop	{r3, r4, r5, pc}
	...

00003194 <cmd_status>:
	return net_buf_add(*buf, plen);
}

#if defined(CONFIG_BT_CONN)
static struct net_buf *cmd_status(u8_t status)
{
    3194:	b538      	push	{r3, r4, r5, lr}
    3196:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *cs;
	struct net_buf *buf;

	buf = bt_buf_get_cmd_complete(K_FOREVER);
    3198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    319c:	f7fe fd84 	bl	1ca8 <bt_buf_get_cmd_complete>
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    31a0:	2204      	movs	r2, #4
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    31a2:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    31a4:	210f      	movs	r1, #15
    31a6:	f7ff ffea 	bl	317e <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    31aa:	2104      	movs	r1, #4
    31ac:	f104 0008 	add.w	r0, r4, #8
    31b0:	f00b ffe2 	bl	f178 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    31b4:	2301      	movs	r3, #1
    31b6:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    31b8:	4b02      	ldr	r3, [pc, #8]	; (31c4 <cmd_status+0x30>)
	cs->status = status;
    31ba:	7005      	strb	r5, [r0, #0]
	cs->opcode = sys_cpu_to_le16(_opcode);
    31bc:	881b      	ldrh	r3, [r3, #0]
    31be:	8043      	strh	r3, [r0, #2]

	return buf;
}
    31c0:	4620      	mov	r0, r4
    31c2:	bd38      	pop	{r3, r4, r5, pc}
    31c4:	2000029c 	.word	0x2000029c

000031c8 <meta_evt>:
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    31c8:	b570      	push	{r4, r5, r6, lr}
    31ca:	4604      	mov	r4, r0
    31cc:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    31ce:	3201      	adds	r2, #1
{
    31d0:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    31d2:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    31d4:	b2d2      	uxtb	r2, r2
    31d6:	213e      	movs	r1, #62	; 0x3e
    31d8:	f7ff ffd1 	bl	317e <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    31dc:	2101      	movs	r1, #1
    31de:	4620      	mov	r0, r4
    31e0:	f00b ffca 	bl	f178 <net_buf_simple_add>
	me->subevent = subevt;
    31e4:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    31e6:	4629      	mov	r1, r5
    31e8:	4620      	mov	r0, r4
}
    31ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    31ee:	f00b bfc3 	b.w	f178 <net_buf_simple_add>
	...

000031f4 <cmd_complete>:
{
    31f4:	b538      	push	{r3, r4, r5, lr}
    31f6:	4604      	mov	r4, r0
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    31f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    31fc:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    31fe:	f7fe fd53 	bl	1ca8 <bt_buf_get_cmd_complete>
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3202:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3204:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3206:	b2d2      	uxtb	r2, r2
    3208:	210e      	movs	r1, #14
    320a:	f7ff ffb8 	bl	317e <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    320e:	6820      	ldr	r0, [r4, #0]
    3210:	2103      	movs	r1, #3
    3212:	3008      	adds	r0, #8
    3214:	f00b ffb0 	bl	f178 <net_buf_simple_add>
	cc->ncmd = 1;
    3218:	2301      	movs	r3, #1
    321a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    321c:	4b05      	ldr	r3, [pc, #20]	; (3234 <cmd_complete+0x40>)
    321e:	881b      	ldrh	r3, [r3, #0]
    3220:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    3224:	6820      	ldr	r0, [r4, #0]
    3226:	4629      	mov	r1, r5
    3228:	3008      	adds	r0, #8
}
    322a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    322e:	f00b bfa3 	b.w	f178 <net_buf_simple_add>
    3232:	bf00      	nop
    3234:	2000029c 	.word	0x2000029c

00003238 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    3238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    323c:	b085      	sub	sp, #20
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    323e:	2301      	movs	r3, #1
    3240:	f88d 3009 	strb.w	r3, [sp, #9]
    3244:	2303      	movs	r3, #3
    3246:	f88d 300a 	strb.w	r3, [sp, #10]
    324a:	23ff      	movs	r3, #255	; 0xff
    324c:	f88d 300b 	strb.w	r3, [sp, #11]
    3250:	f88d 300d 	strb.w	r3, [sp, #13]
    3254:	2302      	movs	r3, #2
    3256:	f88d 300e 	strb.w	r3, [sp, #14]
	u8_t direct;
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */
	s8_t *prssi;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    325a:	7843      	ldrb	r3, [r0, #1]
{
    325c:	4688      	mov	r8, r1
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    325e:	4443      	add	r3, r8
{
    3260:	4604      	mov	r4, r0
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3262:	f893 a00b 	ldrb.w	sl, [r3, #11]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
	/* Update current RPA */
	if (adv->tx_addr) {
    3266:	7803      	ldrb	r3, [r0, #0]
{
    3268:	4693      	mov	fp, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    326a:	2100      	movs	r1, #0
    326c:	2204      	movs	r2, #4
	if (adv->tx_addr) {
    326e:	0658      	lsls	r0, r3, #25
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3270:	f88d 1008 	strb.w	r1, [sp, #8]
    3274:	f88d 200c 	strb.w	r2, [sp, #12]
	if (adv->tx_addr) {
    3278:	d504      	bpl.n	3284 <le_advertising_report+0x4c>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    327a:	1ca3      	adds	r3, r4, #2
    327c:	4652      	mov	r2, sl
    327e:	4608      	mov	r0, r1
    3280:	f00a ff48 	bl	e114 <ll_rl_crpa_set>
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3284:	4b75      	ldr	r3, [pc, #468]	; (345c <le_advertising_report+0x224>)
    3286:	e9d3 2300 	ldrd	r2, r3, [r3]
    328a:	2200      	movs	r2, #0
    328c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    3290:	4313      	orrs	r3, r2
    3292:	f000 809f 	beq.w	33d4 <le_advertising_report+0x19c>
		return;
	}

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3296:	7863      	ldrb	r3, [r4, #1]
    3298:	4443      	add	r3, r8
    329a:	7b1d      	ldrb	r5, [r3, #12]
    329c:	4b70      	ldr	r3, [pc, #448]	; (3460 <le_advertising_report+0x228>)
		   offsetof(struct pdu_adv, payload) + adv->len + 2];

	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    329e:	e9d3 2300 	ldrd	r2, r3, [r3]
    32a2:	2d00      	cmp	r5, #0
    32a4:	d138      	bne.n	3318 <le_advertising_report+0xe0>
    32a6:	f002 0202 	and.w	r2, r2, #2
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    32aa:	2300      	movs	r3, #0
    32ac:	4313      	orrs	r3, r2
    32ae:	f000 8091 	beq.w	33d4 <le_advertising_report+0x19c>
	if (dup_count >= 0) {
    32b2:	4f6c      	ldr	r7, [pc, #432]	; (3464 <le_advertising_report+0x22c>)
    32b4:	683b      	ldr	r3, [r7, #0]
    32b6:	2b00      	cmp	r3, #0
    32b8:	db50      	blt.n	335c <le_advertising_report+0x124>
    32ba:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 3474 <le_advertising_report+0x23c>
    32be:	2600      	movs	r6, #0
    32c0:	1ca3      	adds	r3, r4, #2
		for (i = 0; i < dup_count; i++) {
    32c2:	683a      	ldr	r2, [r7, #0]
    32c4:	4296      	cmp	r6, r2
    32c6:	db2a      	blt.n	331e <le_advertising_report+0xe6>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    32c8:	4e67      	ldr	r6, [pc, #412]	; (3468 <le_advertising_report+0x230>)
    32ca:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 346c <le_advertising_report+0x234>
    32ce:	6830      	ldr	r0, [r6, #0]
    32d0:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    32d4:	4619      	mov	r1, r3
    32d6:	2206      	movs	r2, #6
    32d8:	3002      	adds	r0, #2
    32da:	f7fd f98d 	bl	5f8 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    32de:	6832      	ldr	r2, [r6, #0]
    32e0:	7823      	ldrb	r3, [r4, #0]
    32e2:	eb09 01c2 	add.w	r1, r9, r2, lsl #3
    32e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    32ea:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    32ec:	7823      	ldrb	r3, [r4, #0]
    32ee:	f003 010f 	and.w	r1, r3, #15
    32f2:	2301      	movs	r3, #1
    32f4:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    32f6:	6839      	ldr	r1, [r7, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    32f8:	f809 3032 	strb.w	r3, [r9, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    32fc:	290f      	cmp	r1, #15
			dup_count++;
    32fe:	bfd5      	itete	le
    3300:	3101      	addle	r1, #1
			dup_curr++;
    3302:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    3304:	6031      	strle	r1, [r6, #0]
			dup_curr++;
    3306:	6032      	strgt	r2, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3308:	6832      	ldr	r2, [r6, #0]
			dup_count++;
    330a:	bfd8      	it	le
    330c:	6039      	strle	r1, [r7, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    330e:	2a10      	cmp	r2, #16
    3310:	d124      	bne.n	335c <le_advertising_report+0x124>
			dup_curr = 0;
    3312:	2200      	movs	r2, #0
    3314:	6032      	str	r2, [r6, #0]
    3316:	e021      	b.n	335c <le_advertising_report+0x124>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    3318:	f002 020b 	and.w	r2, r2, #11
    331c:	e7c5      	b.n	32aa <le_advertising_report+0x72>
			if (!memcmp(&adv->adv_ind.addr[0],
    331e:	4618      	mov	r0, r3
    3320:	2206      	movs	r2, #6
    3322:	4649      	mov	r1, r9
    3324:	9301      	str	r3, [sp, #4]
    3326:	f7fd f952 	bl	5ce <memcmp>
    332a:	9b01      	ldr	r3, [sp, #4]
    332c:	b9f0      	cbnz	r0, 336c <le_advertising_report+0x134>
			    adv->tx_addr == dup_filter[i].addr.type) {
    332e:	7821      	ldrb	r1, [r4, #0]
    3330:	f819 0c01 	ldrb.w	r0, [r9, #-1]
    3334:	460a      	mov	r2, r1
    3336:	f3c1 1180 	ubfx	r1, r1, #6, #1
				    sizeof(bt_addr_t)) &&
    333a:	4281      	cmp	r1, r0
    333c:	d116      	bne.n	336c <le_advertising_report+0x134>
				if (dup_filter[i].mask & BIT(adv->type)) {
    333e:	484b      	ldr	r0, [pc, #300]	; (346c <le_advertising_report+0x234>)
    3340:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
    3344:	f002 020f 	and.w	r2, r2, #15
    3348:	fa23 f102 	lsr.w	r1, r3, r2
    334c:	07c9      	lsls	r1, r1, #31
    334e:	d441      	bmi.n	33d4 <le_advertising_report+0x19c>
				dup_filter[i].mask |= BIT(adv->type);
    3350:	2101      	movs	r1, #1
    3352:	fa01 f202 	lsl.w	r2, r1, r2
    3356:	4313      	orrs	r3, r2
    3358:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    335c:	7823      	ldrb	r3, [r4, #0]
    335e:	7862      	ldrb	r2, [r4, #1]
    3360:	f003 030f 	and.w	r3, r3, #15
    3364:	2b01      	cmp	r3, #1
    3366:	d105      	bne.n	3374 <le_advertising_report+0x13c>
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    3368:	2600      	movs	r6, #0
    336a:	e005      	b.n	3378 <le_advertising_report+0x140>
		for (i = 0; i < dup_count; i++) {
    336c:	3601      	adds	r6, #1
    336e:	f109 0908 	add.w	r9, r9, #8
    3372:	e7a6      	b.n	32c2 <le_advertising_report+0x8a>
		data_len = (adv->len - BDADDR_SIZE);
    3374:	1f96      	subs	r6, r2, #6
    3376:	b2f6      	uxtb	r6, r6
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3378:	4442      	add	r2, r8
    337a:	f104 0908 	add.w	r9, r4, #8
    337e:	7a97      	ldrb	r7, [r2, #10]
    3380:	427f      	negs	r7, r7
    3382:	b27f      	sxtb	r7, r7
		  offsetof(struct pdu_adv, payload) + adv->len];

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	if (direct) {
    3384:	b39d      	cbz	r5, 33ee <le_advertising_report+0x1b6>
		struct bt_hci_evt_le_direct_adv_report *drp;
		struct bt_hci_evt_le_direct_adv_info *dir_info;

		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    3386:	2b01      	cmp	r3, #1
    3388:	d004      	beq.n	3394 <le_advertising_report+0x15c>
    338a:	f640 01d4 	movw	r1, #2260	; 0x8d4
    338e:	4838      	ldr	r0, [pc, #224]	; (3470 <le_advertising_report+0x238>)
    3390:	f7fd fa8e 	bl	8b0 <bt_ctlr_assert_handle>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    3394:	2211      	movs	r2, #17
    3396:	210b      	movs	r1, #11
    3398:	4658      	mov	r0, fp
    339a:	f7ff ff15 	bl	31c8 <meta_evt>
			       sizeof(*drp) + sizeof(*dir_info));

		drp->num_reports = 1;
    339e:	2301      	movs	r3, #1
    33a0:	7003      	strb	r3, [r0, #0]
		dir_info = (void *)(((u8_t *)drp) + sizeof(*drp));

		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    33a2:	7043      	strb	r3, [r0, #1]
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    33a4:	4605      	mov	r5, r0

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (rl_idx < ll_rl_size_get()) {
    33a6:	f00a fd8b 	bl	dec0 <ll_rl_size_get>
    33aa:	4582      	cmp	sl, r0
    33ac:	f105 0003 	add.w	r0, r5, #3
    33b0:	d213      	bcs.n	33da <le_advertising_report+0x1a2>
			/* Store identity address */
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    33b2:	4602      	mov	r2, r0
    33b4:	1ca9      	adds	r1, r5, #2
    33b6:	4650      	mov	r0, sl
    33b8:	f00a fb8e 	bl	dad8 <ll_rl_id_addr_get>
					  &dir_info->addr.a.val[0]);
			/* Mark it as identity address from RPA (0x02, 0x03) */
			dir_info->addr.type += 2;
    33bc:	78ab      	ldrb	r3, [r5, #2]
    33be:	3302      	adds	r3, #2
    33c0:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
			       &adv->direct_ind.adv_addr[0],
			       sizeof(bt_addr_t));
		}

		dir_info->dir_addr.type = 0x1;
    33c2:	2301      	movs	r3, #1
    33c4:	726b      	strb	r3, [r5, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    33c6:	2206      	movs	r2, #6
    33c8:	4649      	mov	r1, r9
    33ca:	f105 000a 	add.w	r0, r5, #10
    33ce:	f7fd f913 	bl	5f8 <memcpy>
		       &adv->direct_ind.tgt_addr[0], sizeof(bt_addr_t));

		dir_info->rssi = rssi;
    33d2:	742f      	strb	r7, [r5, #16]
	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
}
    33d4:	b005      	add	sp, #20
    33d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dir_info->addr.type = adv->tx_addr;
    33da:	4621      	mov	r1, r4
			memcpy(&dir_info->addr.a.val[0],
    33dc:	2206      	movs	r2, #6
			dir_info->addr.type = adv->tx_addr;
    33de:	f811 3b02 	ldrb.w	r3, [r1], #2
    33e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    33e6:	70ab      	strb	r3, [r5, #2]
			memcpy(&dir_info->addr.a.val[0],
    33e8:	f7fd f906 	bl	5f8 <memcpy>
    33ec:	e7e9      	b.n	33c2 <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    33ee:	f106 020b 	add.w	r2, r6, #11
    33f2:	b2d2      	uxtb	r2, r2
    33f4:	2102      	movs	r1, #2
    33f6:	4658      	mov	r0, fp
    33f8:	f7ff fee6 	bl	31c8 <meta_evt>
	sep->num_reports = 1;
    33fc:	2301      	movs	r3, #1
    33fe:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    3400:	7823      	ldrb	r3, [r4, #0]
    3402:	aa04      	add	r2, sp, #16
    3404:	f003 030f 	and.w	r3, r3, #15
    3408:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    340a:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    340c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    3410:	7043      	strb	r3, [r0, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3412:	7863      	ldrb	r3, [r4, #1]
    3414:	4498      	add	r8, r3
    3416:	f898 800b 	ldrb.w	r8, [r8, #11]
	if (rl_idx < ll_rl_size_get()) {
    341a:	f00a fd51 	bl	dec0 <ll_rl_size_get>
    341e:	4580      	cmp	r8, r0
    3420:	f105 0003 	add.w	r0, r5, #3
    3424:	d210      	bcs.n	3448 <le_advertising_report+0x210>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    3426:	4602      	mov	r2, r0
    3428:	1ca9      	adds	r1, r5, #2
    342a:	4640      	mov	r0, r8
    342c:	f00a fb54 	bl	dad8 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    3430:	78ab      	ldrb	r3, [r5, #2]
    3432:	3302      	adds	r3, #2
    3434:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
    3436:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3438:	350a      	adds	r5, #10
    343a:	4632      	mov	r2, r6
    343c:	4649      	mov	r1, r9
    343e:	4628      	mov	r0, r5
    3440:	f7fd f8da 	bl	5f8 <memcpy>
	*prssi = rssi;
    3444:	55af      	strb	r7, [r5, r6]
    3446:	e7c5      	b.n	33d4 <le_advertising_report+0x19c>
		adv_info->addr.type = adv->tx_addr;
    3448:	4621      	mov	r1, r4
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    344a:	2206      	movs	r2, #6
		adv_info->addr.type = adv->tx_addr;
    344c:	f811 3b02 	ldrb.w	r3, [r1], #2
    3450:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3454:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3456:	f7fd f8cf 	bl	5f8 <memcpy>
    345a:	e7ec      	b.n	3436 <le_advertising_report+0x1fe>
    345c:	20005498 	.word	0x20005498
    3460:	200054a0 	.word	0x200054a0
    3464:	200002a4 	.word	0x200002a4
    3468:	200002a8 	.word	0x200002a8
    346c:	200002ac 	.word	0x200002ac
    3470:	0001096b 	.word	0x0001096b
    3474:	200002ae 	.word	0x200002ae

00003478 <encrypt_change>:
static void encrypt_change(u8_t err, u16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    3478:	4b0e      	ldr	r3, [pc, #56]	; (34b4 <encrypt_change+0x3c>)
{
    347a:	b570      	push	{r4, r5, r6, lr}
    347c:	4615      	mov	r5, r2
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    347e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3482:	2300      	movs	r3, #0
    3484:	f002 0280 	and.w	r2, r2, #128	; 0x80
    3488:	4313      	orrs	r3, r2
{
    348a:	4604      	mov	r4, r0
    348c:	460e      	mov	r6, r1
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    348e:	d010      	beq.n	34b2 <encrypt_change+0x3a>
		return;
	}

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    3490:	2204      	movs	r2, #4
    3492:	2108      	movs	r1, #8
    3494:	4628      	mov	r0, r5
    3496:	f7ff fe72 	bl	317e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    349a:	2104      	movs	r1, #4
    349c:	f105 0008 	add.w	r0, r5, #8
    34a0:	f00b fe6a 	bl	f178 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    34a4:	fab4 f384 	clz	r3, r4
    34a8:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    34aa:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    34ac:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    34b0:	70c3      	strb	r3, [r0, #3]
    34b2:	bd70      	pop	{r4, r5, r6, pc}
    34b4:	20005498 	.word	0x20005498

000034b8 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    34b8:	b570      	push	{r4, r5, r6, lr}
    34ba:	4604      	mov	r4, r0
    34bc:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    34be:	4b13      	ldr	r3, [pc, #76]	; (350c <le_remote_feat_complete+0x54>)
{
    34c0:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    34c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    34c6:	2200      	movs	r2, #0
    34c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    34cc:	4313      	orrs	r3, r2
{
    34ce:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    34d0:	d01b      	beq.n	350a <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    34d2:	4b0f      	ldr	r3, [pc, #60]	; (3510 <le_remote_feat_complete+0x58>)
    34d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    34d8:	2300      	movs	r3, #0
    34da:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    34de:	4313      	orrs	r3, r2
    34e0:	d013      	beq.n	350a <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    34e2:	220b      	movs	r2, #11
    34e4:	2104      	movs	r1, #4
    34e6:	f7ff fe6f 	bl	31c8 <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    34ea:	2208      	movs	r2, #8
	sep->status = status;
    34ec:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    34ee:	f8a0 6001 	strh.w	r6, [r0, #1]
    34f2:	3003      	adds	r0, #3
	if (!status) {
    34f4:	b924      	cbnz	r4, 3500 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    34f6:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    34f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    34fc:	f7fd b87c 	b.w	5f8 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3500:	2100      	movs	r1, #0
}
    3502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3506:	f7fd b8a3 	b.w	650 <memset>
    350a:	bd70      	pop	{r4, r5, r6, pc}
    350c:	20005498 	.word	0x20005498
    3510:	200054a0 	.word	0x200054a0

00003514 <le_set_adv_param.isra.40>:
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    3514:	b5f0      	push	{r4, r5, r6, r7, lr}
    3516:	b08b      	sub	sp, #44	; 0x2c
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    3518:	2400      	movs	r4, #0
    351a:	7a03      	ldrb	r3, [r0, #8]
    351c:	f8b0 2003 	ldrh.w	r2, [r0, #3]
    3520:	7806      	ldrb	r6, [r0, #0]
static void le_set_adv_param(struct net_buf *buf, struct net_buf **evt)
    3522:	460d      	mov	r5, r1
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    3524:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    3528:	9409      	str	r4, [sp, #36]	; 0x24
    352a:	7d47      	ldrb	r7, [r0, #21]
    352c:	9708      	str	r7, [sp, #32]
    352e:	7d07      	ldrb	r7, [r0, #20]
    3530:	9707      	str	r7, [sp, #28]
    3532:	7cc7      	ldrb	r7, [r0, #19]
    3534:	9706      	str	r7, [sp, #24]
    3536:	7c87      	ldrb	r7, [r0, #18]
    3538:	9705      	str	r7, [sp, #20]
    353a:	9404      	str	r4, [sp, #16]
    353c:	7c04      	ldrb	r4, [r0, #16]
    353e:	9403      	str	r4, [sp, #12]
    3540:	79c4      	ldrb	r4, [r0, #7]
    3542:	9402      	str	r4, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    3544:	f100 040a 	add.w	r4, r0, #10
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    3548:	9401      	str	r4, [sp, #4]
    354a:	7a40      	ldrb	r0, [r0, #9]
    354c:	9000      	str	r0, [sp, #0]
    354e:	4630      	mov	r0, r6
    3550:	f009 fb32 	bl	cbb8 <ll_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3554:	2102      	movs	r1, #2
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    3556:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3558:	4628      	mov	r0, r5
    355a:	f7ff fe4b 	bl	31f4 <cmd_complete>
	status = ll_adv_params_set(cmd->handle, cmd->props, min_interval,
    355e:	7004      	strb	r4, [r0, #0]
}
    3560:	b00b      	add	sp, #44	; 0x2c
    3562:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003564 <le_set_adv_enable.isra.43>:
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    3564:	b538      	push	{r3, r4, r5, lr}
	status = ll_adv_enable(cmd->enable);
    3566:	7800      	ldrb	r0, [r0, #0]
static void le_set_adv_enable(struct net_buf *buf, struct net_buf **evt)
    3568:	460d      	mov	r5, r1
	status = ll_adv_enable(cmd->enable);
    356a:	f009 fda3 	bl	d0b4 <ll_adv_enable>
	ccst = cmd_complete(evt, sizeof(*ccst));
    356e:	2101      	movs	r1, #1
	status = ll_adv_enable(cmd->enable);
    3570:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3572:	4628      	mov	r0, r5
    3574:	f7ff fe3e 	bl	31f4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3578:	2c00      	cmp	r4, #0
    357a:	bf0c      	ite	eq
    357c:	2300      	moveq	r3, #0
    357e:	230c      	movne	r3, #12
    3580:	7003      	strb	r3, [r0, #0]
    3582:	bd38      	pop	{r3, r4, r5, pc}

00003584 <le_conn_complete.part.47>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    3584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3588:	4605      	mov	r5, r0
    358a:	4618      	mov	r0, r3
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    358c:	4b46      	ldr	r3, [pc, #280]	; (36a8 <le_conn_complete.part.47+0x124>)
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    358e:	4616      	mov	r6, r2
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    3590:	e9d3 2300 	ldrd	r2, r3, [r3]
    3594:	f240 2801 	movw	r8, #513	; 0x201
    3598:	f04f 0900 	mov.w	r9, #0
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    359c:	f402 7a00 	and.w	sl, r2, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    35a0:	ea03 0309 	and.w	r3, r3, r9
    35a4:	ea02 0208 	and.w	r2, r2, r8
    35a8:	4313      	orrs	r3, r2
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
    35aa:	460c      	mov	r4, r1
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    35ac:	f04f 0b00 	mov.w	fp, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    35b0:	d077      	beq.n	36a2 <le_conn_complete.part.47+0x11e>
	if (!status) {
    35b2:	2d00      	cmp	r5, #0
    35b4:	d150      	bne.n	3658 <le_conn_complete.part.47+0xd4>
		conn_count++;
    35b6:	4a3d      	ldr	r2, [pc, #244]	; (36ac <le_conn_complete.part.47+0x128>)
    35b8:	6813      	ldr	r3, [r2, #0]
    35ba:	3301      	adds	r3, #1
    35bc:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    35be:	ea5a 030b 	orrs.w	r3, sl, fp
    35c2:	f101 0803 	add.w	r8, r1, #3
    35c6:	d151      	bne.n	366c <le_conn_complete.part.47+0xe8>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    35c8:	2212      	movs	r2, #18
    35ca:	2101      	movs	r1, #1
    35cc:	f7ff fdfc 	bl	31c8 <meta_evt>
	lecc->status = 0x00;
    35d0:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    35d2:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = radio_cc->role;
    35d6:	7863      	ldrb	r3, [r4, #1]
    35d8:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    35da:	78a3      	ldrb	r3, [r4, #2]
    35dc:	7103      	strb	r3, [r0, #4]
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    35de:	4607      	mov	r7, r0
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    35e0:	2206      	movs	r2, #6
    35e2:	4641      	mov	r1, r8
    35e4:	3005      	adds	r0, #5
    35e6:	f7fd f807 	bl	5f8 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    35ea:	8ae3      	ldrh	r3, [r4, #22]
    35ec:	f8a7 300b 	strh.w	r3, [r7, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    35f0:	8b23      	ldrh	r3, [r4, #24]
    35f2:	f8a7 300d 	strh.w	r3, [r7, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    35f6:	8b63      	ldrh	r3, [r4, #26]
    35f8:	f8a7 300f 	strh.w	r3, [r7, #15]
	lecc->clock_accuracy = radio_cc->mca;
    35fc:	7f23      	ldrb	r3, [r4, #28]
    35fe:	747b      	strb	r3, [r7, #17]
    3600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    3604:	221e      	movs	r2, #30
    3606:	210a      	movs	r1, #10
    3608:	f7ff fdde 	bl	31c8 <meta_evt>
			memset(leecc, 0x00, sizeof(*leecc));
    360c:	221e      	movs	r2, #30
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    360e:	4604      	mov	r4, r0
		memset(lecc, 0x00, sizeof(*lecc));
    3610:	2100      	movs	r1, #0
    3612:	f7fd f81d 	bl	650 <memset>
		lecc->status = status;
    3616:	7025      	strb	r5, [r4, #0]
    3618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((radio_cc->own_addr_type) &&
    361c:	7d63      	ldrb	r3, [r4, #21]
    361e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3622:	2b40      	cmp	r3, #64	; 0x40
    3624:	d138      	bne.n	3698 <le_conn_complete.part.47+0x114>
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    3626:	2206      	movs	r2, #6
    3628:	f104 0110 	add.w	r1, r4, #16
    362c:	f7fc ffe4 	bl	5f8 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    3630:	2206      	movs	r2, #6
    3632:	f104 0109 	add.w	r1, r4, #9
    3636:	f107 0011 	add.w	r0, r7, #17
    363a:	f7fc ffdd 	bl	5f8 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    363e:	8ae3      	ldrh	r3, [r4, #22]
    3640:	f8a7 3017 	strh.w	r3, [r7, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    3644:	8b23      	ldrh	r3, [r4, #24]
    3646:	f8a7 3019 	strh.w	r3, [r7, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    364a:	8b63      	ldrh	r3, [r4, #26]
    364c:	f8a7 301b 	strh.w	r3, [r7, #27]
		leecc->clock_accuracy = radio_cc->mca;
    3650:	7f23      	ldrb	r3, [r4, #28]
    3652:	777b      	strb	r3, [r7, #29]
    3654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    3658:	ea5a 030b 	orrs.w	r3, sl, fp
    365c:	d1d2      	bne.n	3604 <le_conn_complete.part.47+0x80>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    365e:	2212      	movs	r2, #18
    3660:	2101      	movs	r1, #1
    3662:	f7ff fdb1 	bl	31c8 <meta_evt>
		memset(lecc, 0x00, sizeof(*lecc));
    3666:	2212      	movs	r2, #18
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    3668:	4604      	mov	r4, r0
    366a:	e7d1      	b.n	3610 <le_conn_complete.part.47+0x8c>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    366c:	221e      	movs	r2, #30
    366e:	210a      	movs	r1, #10
    3670:	f7ff fdaa 	bl	31c8 <meta_evt>
		leecc->status = 0x00;
    3674:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    3676:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = radio_cc->role;
    367a:	7863      	ldrb	r3, [r4, #1]
    367c:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    367e:	78a3      	ldrb	r3, [r4, #2]
    3680:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    3682:	4607      	mov	r7, r0
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    3684:	2206      	movs	r2, #6
    3686:	4641      	mov	r1, r8
    3688:	3005      	adds	r0, #5
    368a:	f7fc ffb5 	bl	5f8 <memcpy>
		if ((radio_cc->own_addr_type) &&
    368e:	7be3      	ldrb	r3, [r4, #15]
    3690:	f107 000b 	add.w	r0, r7, #11
    3694:	2b00      	cmp	r3, #0
    3696:	d1c1      	bne.n	361c <le_conn_complete.part.47+0x98>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    3698:	2206      	movs	r2, #6
    369a:	2100      	movs	r1, #0
    369c:	f7fc ffd8 	bl	650 <memset>
    36a0:	e7c6      	b.n	3630 <le_conn_complete.part.47+0xac>
    36a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    36a6:	bf00      	nop
    36a8:	200054a0 	.word	0x200054a0
    36ac:	200002a0 	.word	0x200002a0

000036b0 <bt_addr_le_to_str.isra.81>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    36b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    36b2:	2803      	cmp	r0, #3
    36b4:	d807      	bhi.n	36c6 <bt_addr_le_to_str.isra.81+0x16>
    36b6:	e8df f000 	tbb	[pc, r0]
    36ba:	0a02      	.short	0x0a02
    36bc:	0e0c      	.short	0x0e0c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    36be:	4907      	ldr	r1, [pc, #28]	; (36dc <bt_addr_le_to_str.isra.81+0x2c>)
		break;
	case BT_ADDR_LE_PUBLIC_ID:
		strcpy(type, "public id");
		break;
	case BT_ADDR_LE_RANDOM_ID:
		strcpy(type, "random id");
    36c0:	a801      	add	r0, sp, #4
    36c2:	f7fc ff6d 	bl	5a0 <strcpy>
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    36c6:	2000      	movs	r0, #0
    36c8:	b005      	add	sp, #20
    36ca:	f85d fb04 	ldr.w	pc, [sp], #4
		strcpy(type, "random");
    36ce:	4904      	ldr	r1, [pc, #16]	; (36e0 <bt_addr_le_to_str.isra.81+0x30>)
    36d0:	e7f6      	b.n	36c0 <bt_addr_le_to_str.isra.81+0x10>
		strcpy(type, "public id");
    36d2:	4904      	ldr	r1, [pc, #16]	; (36e4 <bt_addr_le_to_str.isra.81+0x34>)
    36d4:	e7f4      	b.n	36c0 <bt_addr_le_to_str.isra.81+0x10>
		strcpy(type, "random id");
    36d6:	4904      	ldr	r1, [pc, #16]	; (36e8 <bt_addr_le_to_str.isra.81+0x38>)
    36d8:	e7f2      	b.n	36c0 <bt_addr_le_to_str.isra.81+0x10>
    36da:	bf00      	nop
    36dc:	00010921 	.word	0x00010921
    36e0:	00010928 	.word	0x00010928
    36e4:	0001092f 	.word	0x0001092f
    36e8:	00010939 	.word	0x00010939

000036ec <le_adv_ext_report.isra.83>:
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    36ec:	7803      	ldrb	r3, [r0, #0]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    36ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    36f2:	4616      	mov	r6, r2
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    36f4:	f003 020f 	and.w	r2, r3, #15
    36f8:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    36fa:	4604      	mov	r4, r0
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    36fc:	d15b      	bne.n	37b6 <le_adv_ext_report.isra.83+0xca>
		  offsetof(struct pdu_adv, payload) + adv->len];
    36fe:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3700:	2a00      	cmp	r2, #0
    3702:	d058      	beq.n	37b6 <le_adv_ext_report.isra.83+0xca>
		if (!p->ext_hdr_len) {
    3704:	7880      	ldrb	r0, [r0, #2]
    3706:	0680      	lsls	r0, r0, #26
    3708:	d052      	beq.n	37b0 <le_adv_ext_report.isra.83+0xc4>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    370a:	4411      	add	r1, r2
		if (h->adv_addr) {
    370c:	78e2      	ldrb	r2, [r4, #3]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    370e:	7a8f      	ldrb	r7, [r1, #10]
		if (h->adv_addr) {
    3710:	07d1      	lsls	r1, r2, #31
		ptr = (u8_t *)h + sizeof(*h);
    3712:	f104 0504 	add.w	r5, r4, #4
		if (h->adv_addr) {
    3716:	d50f      	bpl.n	3738 <le_adv_ext_report.isra.83+0x4c>
			addr.type = adv->tx_addr;
    3718:	f3c3 1380 	ubfx	r3, r3, #6, #1
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    371c:	4629      	mov	r1, r5
    371e:	2206      	movs	r2, #6
    3720:	f10d 0001 	add.w	r0, sp, #1
			addr.type = adv->tx_addr;
    3724:	f88d 3000 	strb.w	r3, [sp]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    3728:	f7fc ff66 	bl	5f8 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    372c:	f89d 0000 	ldrb.w	r0, [sp]
			ptr += BDADDR_SIZE;
    3730:	f104 050a 	add.w	r5, r4, #10
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    3734:	f7ff ffbc 	bl	36b0 <bt_addr_le_to_str.isra.81>
		if(h->tgt_addr){
    3738:	78e3      	ldrb	r3, [r4, #3]
    373a:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    373c:	bf48      	it	mi
    373e:	3506      	addmi	r5, #6
		if(h->adi){
    3740:	0718      	lsls	r0, r3, #28
			ptr += sizeof(*adi_ptr);
    3742:	bf48      	it	mi
    3744:	3502      	addmi	r5, #2
		if(h->aux_ptr){
    3746:	06d9      	lsls	r1, r3, #27
			ptr += sizeof(*ap);
    3748:	bf48      	it	mi
    374a:	3503      	addmi	r5, #3
		if (h->tx_pwr) {
    374c:	065a      	lsls	r2, r3, #25
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    374e:	78a2      	ldrb	r2, [r4, #2]
    3750:	f3c2 0305 	ubfx	r3, r2, #0, #6
    3754:	7862      	ldrb	r2, [r4, #1]
    3756:	eba2 0203 	sub.w	r2, r2, r3
    375a:	b2d2      	uxtb	r2, r2
    375c:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    3760:	f102 0218 	add.w	r2, r2, #24
    3764:	4630      	mov	r0, r6
    3766:	b2d2      	uxtb	r2, r2
    3768:	f04f 010d 	mov.w	r1, #13
			ptr++;
    376c:	bf48      	it	mi
    376e:	3501      	addmi	r5, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    3770:	f7ff fd2a 	bl	31c8 <meta_evt>
		sep->num_reports = 1;
    3774:	2301      	movs	r3, #1
    3776:	7003      	strb	r3, [r0, #0]
		if(h->adv_addr){
    3778:	78e3      	ldrb	r3, [r4, #3]
    377a:	07db      	lsls	r3, r3, #31
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    377c:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    3780:	4606      	mov	r6, r0
		if(h->adv_addr){
    3782:	d508      	bpl.n	3796 <le_adv_ext_report.isra.83+0xaa>
			adv_info->addr.type = addr.type;
    3784:	f89d 3000 	ldrb.w	r3, [sp]
    3788:	7083      	strb	r3, [r0, #2]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    378a:	2206      	movs	r2, #6
    378c:	f10d 0101 	add.w	r1, sp, #1
    3790:	3003      	adds	r0, #3
    3792:	f7fc ff31 	bl	5f8 <memcpy>
		adv_info->evt_type = 0x07;
    3796:	2307      	movs	r3, #7
    3798:	7073      	strb	r3, [r6, #1]
		adv_info->length = data_len;
    379a:	f886 8017 	strb.w	r8, [r6, #23]
		memcpy(&adv_info->data[0], ptr, data_len);
    379e:	3618      	adds	r6, #24
    37a0:	4642      	mov	r2, r8
    37a2:	4629      	mov	r1, r5
    37a4:	4630      	mov	r0, r6
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    37a6:	427f      	negs	r7, r7
		memcpy(&adv_info->data[0], ptr, data_len);
    37a8:	f7fc ff26 	bl	5f8 <memcpy>
		*prssi = rssi;
    37ac:	f806 7008 	strb.w	r7, [r6, r8]
}
    37b0:	b002      	add	sp, #8
    37b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		le_advertising_report(pdu_data, b, buf);
    37b6:	4632      	mov	r2, r6
    37b8:	4620      	mov	r0, r4
    37ba:	f7ff fd3d 	bl	3238 <le_advertising_report>
    37be:	e7f7      	b.n	37b0 <le_adv_ext_report.isra.83+0xc4>

000037c0 <reset>:
{
    37c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dup_count = -1;
    37c2:	4b22      	ldr	r3, [pc, #136]	; (384c <reset+0x8c>)
    37c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    37c8:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    37ca:	4b21      	ldr	r3, [pc, #132]	; (3850 <reset+0x90>)
    37cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    37d0:	f641 77ff 	movw	r7, #8191	; 0x1fff
    37d4:	e9c3 6700 	strd	r6, r7, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    37d8:	4b1e      	ldr	r3, [pc, #120]	; (3854 <reset+0x94>)
    37da:	2600      	movs	r6, #0
    37dc:	2700      	movs	r7, #0
    37de:	e9c3 6700 	strd	r6, r7, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    37e2:	4b1d      	ldr	r3, [pc, #116]	; (3858 <reset+0x98>)
    37e4:	261f      	movs	r6, #31
    37e6:	2700      	movs	r7, #0
{
    37e8:	460c      	mov	r4, r1
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    37ea:	e9c3 6700 	strd	r6, r7, [r3]
	if (buf) {
    37ee:	4605      	mov	r5, r0
    37f0:	b138      	cbz	r0, 3802 <reset+0x42>
		ll_reset();
    37f2:	f007 fe9f 	bl	b534 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    37f6:	2101      	movs	r1, #1
    37f8:	4620      	mov	r0, r4
    37fa:	f7ff fcfb 	bl	31f4 <cmd_complete>
		ccst->status = 0x00;
    37fe:	2300      	movs	r3, #0
    3800:	7003      	strb	r3, [r0, #0]
	hci_hbuf_total = 0;
    3802:	4b16      	ldr	r3, [pc, #88]	; (385c <reset+0x9c>)
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    3804:	4816      	ldr	r0, [pc, #88]	; (3860 <reset+0xa0>)
	hci_hbuf_total = 0;
    3806:	2400      	movs	r4, #0
    3808:	601c      	str	r4, [r3, #0]
	hci_hbuf_sent = 0;
    380a:	4b16      	ldr	r3, [pc, #88]	; (3864 <reset+0xa4>)
    380c:	601c      	str	r4, [r3, #0]
	hci_hbuf_acked = 0;
    380e:	4b16      	ldr	r3, [pc, #88]	; (3868 <reset+0xa8>)
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    3810:	2220      	movs	r2, #32
    3812:	4621      	mov	r1, r4
	hci_hbuf_acked = 0;
    3814:	601c      	str	r4, [r3, #0]
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    3816:	f7fc ff1b 	bl	650 <memset>
	conn_count = 0;
    381a:	4b14      	ldr	r3, [pc, #80]	; (386c <reset+0xac>)
    381c:	601c      	str	r4, [r3, #0]
	if (buf) {
    381e:	b19d      	cbz	r5, 3848 <reset+0x88>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3820:	f3bf 8f5b 	dmb	ish
    3824:	4b12      	ldr	r3, [pc, #72]	; (3870 <reset+0xb0>)
    3826:	e853 2f00 	ldrex	r2, [r3]
    382a:	f042 0201 	orr.w	r2, r2, #1
    382e:	e843 2100 	strex	r1, r2, [r3]
    3832:	2900      	cmp	r1, #0
    3834:	d1f7      	bne.n	3826 <reset+0x66>
    3836:	f3bf 8f5b 	dmb	ish
		k_poll_signal(hbuf_signal, 0x0);
    383a:	4b0e      	ldr	r3, [pc, #56]	; (3874 <reset+0xb4>)
    383c:	4621      	mov	r1, r4
    383e:	6818      	ldr	r0, [r3, #0]
}
    3840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		k_poll_signal(hbuf_signal, 0x0);
    3844:	f00c beda 	b.w	105fc <k_poll_signal>
    3848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    384a:	bf00      	nop
    384c:	200002a4 	.word	0x200002a4
    3850:	20005498 	.word	0x20005498
    3854:	20000330 	.word	0x20000330
    3858:	200054a0 	.word	0x200054a0
    385c:	20003b50 	.word	0x20003b50
    3860:	20003b30 	.word	0x20003b30
    3864:	20003b54 	.word	0x20003b54
    3868:	20003b5c 	.word	0x20003b5c
    386c:	200002a0 	.word	0x200002a0
    3870:	20003b58 	.word	0x20003b58
    3874:	20000338 	.word	0x20000338

00003878 <sys_get_le64>:
 *  @param src Location of the little-endian 64-bit integer to get.
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
    3878:	4603      	mov	r3, r0
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
    387a:	6800      	ldr	r0, [r0, #0]
    387c:	6859      	ldr	r1, [r3, #4]
    387e:	4770      	bx	lr

00003880 <hci_cmd_handle>:
{
    3880:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    3882:	8981      	ldrh	r1, [r0, #12]
{
    3884:	b093      	sub	sp, #76	; 0x4c
	struct net_buf *evt = NULL;
    3886:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    3888:	2902      	cmp	r1, #2
{
    388a:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    388c:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    388e:	d802      	bhi.n	3896 <hci_cmd_handle+0x16>
		return NULL;
    3890:	2000      	movs	r0, #0
}
    3892:	b013      	add	sp, #76	; 0x4c
    3894:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    3896:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    3898:	4eb2      	ldr	r6, [pc, #712]	; (3b64 <hci_cmd_handle+0x2e4>)
    389a:	781a      	ldrb	r2, [r3, #0]
    389c:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    389e:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    38a0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    38a4:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    38a6:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    38a8:	d8f2      	bhi.n	3890 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    38aa:	2103      	movs	r1, #3
    38ac:	f104 0008 	add.w	r0, r4, #8
    38b0:	f00b fc71 	bl	f196 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    38b4:	8833      	ldrh	r3, [r6, #0]
    38b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    38ba:	0a9b      	lsrs	r3, r3, #10
    38bc:	2b04      	cmp	r3, #4
    38be:	f000 8122 	beq.w	3b06 <hci_cmd_handle+0x286>
    38c2:	d809      	bhi.n	38d8 <hci_cmd_handle+0x58>
    38c4:	2b01      	cmp	r3, #1
    38c6:	d027      	beq.n	3918 <hci_cmd_handle+0x98>
    38c8:	2b03      	cmp	r3, #3
    38ca:	d03c      	beq.n	3946 <hci_cmd_handle+0xc6>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    38cc:	2101      	movs	r1, #1
    38ce:	a807      	add	r0, sp, #28
    38d0:	f7ff fc90 	bl	31f4 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    38d4:	2301      	movs	r3, #1
    38d6:	e05d      	b.n	3994 <hci_cmd_handle+0x114>
	switch (BT_OGF(_opcode)) {
    38d8:	2b08      	cmp	r3, #8
    38da:	f000 81ca 	beq.w	3c72 <hci_cmd_handle+0x3f2>
    38de:	2b3f      	cmp	r3, #63	; 0x3f
    38e0:	d1f4      	bne.n	38cc <hci_cmd_handle+0x4c>
	switch (ocf) {
    38e2:	3a01      	subs	r2, #1
    38e4:	2a09      	cmp	r2, #9
    38e6:	d8f1      	bhi.n	38cc <hci_cmd_handle+0x4c>
    38e8:	a301      	add	r3, pc, #4	; (adr r3, 38f0 <hci_cmd_handle+0x70>)
    38ea:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    38ee:	bf00      	nop
    38f0:	0000428f 	.word	0x0000428f
    38f4:	000042bf 	.word	0x000042bf
    38f8:	000042e9 	.word	0x000042e9
    38fc:	000038cd 	.word	0x000038cd
    3900:	000038cd 	.word	0x000038cd
    3904:	0000432f 	.word	0x0000432f
    3908:	000038cd 	.word	0x000038cd
    390c:	00004301 	.word	0x00004301
    3910:	0000433b 	.word	0x0000433b
    3914:	000043a9 	.word	0x000043a9
	switch (ocf) {
    3918:	2a06      	cmp	r2, #6
    391a:	d006      	beq.n	392a <hci_cmd_handle+0xaa>
    391c:	2a1d      	cmp	r2, #29
    391e:	d1d5      	bne.n	38cc <hci_cmd_handle+0x4c>
	handle = sys_le16_to_cpu(cmd->handle);
    3920:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    3922:	8818      	ldrh	r0, [r3, #0]
    3924:	f008 f974 	bl	bc10 <ll_version_ind_send>
    3928:	e004      	b.n	3934 <hci_cmd_handle+0xb4>
    392a:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    392c:	7899      	ldrb	r1, [r3, #2]
    392e:	8818      	ldrh	r0, [r3, #0]
    3930:	f008 f982 	bl	bc38 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    3934:	2800      	cmp	r0, #0
    3936:	bf14      	ite	ne
    3938:	200c      	movne	r0, #12
    393a:	2000      	moveq	r0, #0
    393c:	f7ff fc2a 	bl	3194 <cmd_status>
    3940:	9007      	str	r0, [sp, #28]
	return evt;
    3942:	9807      	ldr	r0, [sp, #28]
    3944:	e7a5      	b.n	3892 <hci_cmd_handle+0x12>
	switch (ocf) {
    3946:	2a33      	cmp	r2, #51	; 0x33
    3948:	f000 808a 	beq.w	3a60 <hci_cmd_handle+0x1e0>
    394c:	d824      	bhi.n	3998 <hci_cmd_handle+0x118>
    394e:	2a03      	cmp	r2, #3
    3950:	d046      	beq.n	39e0 <hci_cmd_handle+0x160>
    3952:	d80d      	bhi.n	3970 <hci_cmd_handle+0xf0>
    3954:	2a01      	cmp	r2, #1
    3956:	d1b9      	bne.n	38cc <hci_cmd_handle+0x4c>
	event_mask = sys_get_le64(cmd->events);
    3958:	68a0      	ldr	r0, [r4, #8]
    395a:	f7ff ff8d 	bl	3878 <sys_get_le64>
    395e:	4b82      	ldr	r3, [pc, #520]	; (3b68 <hci_cmd_handle+0x2e8>)
	le_event_mask = sys_get_le64(cmd->events);
    3960:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3964:	2101      	movs	r1, #1
    3966:	a807      	add	r0, sp, #28
    3968:	f7ff fc44 	bl	31f4 <cmd_complete>
	ccst->status = 0x00;
    396c:	2300      	movs	r3, #0
    396e:	e011      	b.n	3994 <hci_cmd_handle+0x114>
	switch (ocf) {
    3970:	2a2d      	cmp	r2, #45	; 0x2d
    3972:	d046      	beq.n	3a02 <hci_cmd_handle+0x182>
    3974:	2a31      	cmp	r2, #49	; 0x31
    3976:	d1a9      	bne.n	38cc <hci_cmd_handle+0x4c>
	u8_t flow_enable = cmd->flow_enable;
    3978:	68a3      	ldr	r3, [r4, #8]
	if (!hci_hbuf_total || conn_count) {
    397a:	4c7c      	ldr	r4, [pc, #496]	; (3b6c <hci_cmd_handle+0x2ec>)
	u8_t flow_enable = cmd->flow_enable;
    397c:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    397e:	2101      	movs	r1, #1
    3980:	a807      	add	r0, sp, #28
    3982:	f7ff fc37 	bl	31f4 <cmd_complete>
	if (!hci_hbuf_total || conn_count) {
    3986:	6823      	ldr	r3, [r4, #0]
    3988:	b11b      	cbz	r3, 3992 <hci_cmd_handle+0x112>
    398a:	4a79      	ldr	r2, [pc, #484]	; (3b70 <hci_cmd_handle+0x2f0>)
    398c:	6812      	ldr	r2, [r2, #0]
    398e:	2a00      	cmp	r2, #0
    3990:	d04d      	beq.n	3a2e <hci_cmd_handle+0x1ae>
		ccst->status = BT_HCI_ERR_CMD_DISALLOWED;
    3992:	230c      	movs	r3, #12
    3994:	7003      	strb	r3, [r0, #0]
    3996:	e7d4      	b.n	3942 <hci_cmd_handle+0xc2>
	switch (ocf) {
    3998:	2a63      	cmp	r2, #99	; 0x63
    399a:	d026      	beq.n	39ea <hci_cmd_handle+0x16a>
    399c:	d80a      	bhi.n	39b4 <hci_cmd_handle+0x134>
    399e:	2a35      	cmp	r2, #53	; 0x35
    39a0:	d194      	bne.n	38cc <hci_cmd_handle+0x4c>
	if (hci_hbuf_total <= 0) {
    39a2:	4b72      	ldr	r3, [pc, #456]	; (3b6c <hci_cmd_handle+0x2ec>)
    39a4:	681b      	ldr	r3, [r3, #0]
    39a6:	2b00      	cmp	r3, #0
    39a8:	dc6b      	bgt.n	3a82 <hci_cmd_handle+0x202>
		ccst = cmd_complete(evt, sizeof(*ccst));
    39aa:	2101      	movs	r1, #1
    39ac:	a807      	add	r0, sp, #28
    39ae:	f7ff fc21 	bl	31f4 <cmd_complete>
    39b2:	e7ee      	b.n	3992 <hci_cmd_handle+0x112>
	switch (ocf) {
    39b4:	2a7b      	cmp	r2, #123	; 0x7b
    39b6:	f000 808f 	beq.w	3ad8 <hci_cmd_handle+0x258>
    39ba:	2a7c      	cmp	r2, #124	; 0x7c
    39bc:	d186      	bne.n	38cc <hci_cmd_handle+0x4c>
    39be:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    39c0:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    39c2:	8859      	ldrh	r1, [r3, #2]
    39c4:	b2a0      	uxth	r0, r4
    39c6:	f008 f969 	bl	bc9c <ll_apto_set>
	status = ll_length_req_send(handle, tx_octets, tx_time);
    39ca:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    39cc:	2103      	movs	r1, #3
    39ce:	a807      	add	r0, sp, #28
    39d0:	f7ff fc10 	bl	31f4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    39d4:	2d00      	cmp	r5, #0
    39d6:	bf14      	ite	ne
    39d8:	230c      	movne	r3, #12
    39da:	2300      	moveq	r3, #0
    39dc:	7003      	strb	r3, [r0, #0]
    39de:	e32e      	b.n	403e <hci_cmd_handle+0x7be>
		reset(cmd, evt);
    39e0:	a907      	add	r1, sp, #28
    39e2:	4620      	mov	r0, r4
    39e4:	f7ff feec 	bl	37c0 <reset>
    39e8:	e7ab      	b.n	3942 <hci_cmd_handle+0xc2>
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    39ea:	68a0      	ldr	r0, [r4, #8]
    39ec:	f7ff ff44 	bl	3878 <sys_get_le64>
    39f0:	4b60      	ldr	r3, [pc, #384]	; (3b74 <hci_cmd_handle+0x2f4>)
    39f2:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    39f6:	2101      	movs	r1, #1
    39f8:	a807      	add	r0, sp, #28
    39fa:	f7ff fbfb 	bl	31f4 <cmd_complete>
	ccst->status = 0x00;
    39fe:	7005      	strb	r5, [r0, #0]
    3a00:	e79f      	b.n	3942 <hci_cmd_handle+0xc2>
    3a02:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    3a04:	2104      	movs	r1, #4
    3a06:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    3a08:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    3a0a:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    3a0c:	f7ff fbf2 	bl	31f4 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    3a10:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    3a12:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    3a14:	1cc2      	adds	r2, r0, #3
    3a16:	4639      	mov	r1, r7
    3a18:	4630      	mov	r0, r6
    3a1a:	f008 f921 	bl	bc60 <ll_tx_pwr_lvl_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    3a1e:	2800      	cmp	r0, #0
    3a20:	bf14      	ite	ne
    3a22:	2302      	movne	r3, #2
    3a24:	2300      	moveq	r3, #0
    3a26:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    3a28:	f8a4 5001 	strh.w	r5, [r4, #1]
    3a2c:	e789      	b.n	3942 <hci_cmd_handle+0xc2>
		ccst->status = 0x00;
    3a2e:	7002      	strb	r2, [r0, #0]
	switch (flow_enable) {
    3a30:	b11d      	cbz	r5, 3a3a <hci_cmd_handle+0x1ba>
    3a32:	2d01      	cmp	r5, #1
    3a34:	d010      	beq.n	3a58 <hci_cmd_handle+0x1d8>
		ccst->status = BT_HCI_ERR_INVALID_PARAM;
    3a36:	2312      	movs	r3, #18
    3a38:	e7ac      	b.n	3994 <hci_cmd_handle+0x114>
		if (hci_hbuf_total < 0) {
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	db81      	blt.n	3942 <hci_cmd_handle+0xc2>
	hci_hbuf_sent = 0;
    3a3e:	4b4e      	ldr	r3, [pc, #312]	; (3b78 <hci_cmd_handle+0x2f8>)
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    3a40:	484e      	ldr	r0, [pc, #312]	; (3b7c <hci_cmd_handle+0x2fc>)
	hci_hbuf_sent = 0;
    3a42:	2100      	movs	r1, #0
    3a44:	6019      	str	r1, [r3, #0]
	hci_hbuf_acked = 0;
    3a46:	4b4e      	ldr	r3, [pc, #312]	; (3b80 <hci_cmd_handle+0x300>)
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    3a48:	2220      	movs	r2, #32
	hci_hbuf_acked = 0;
    3a4a:	6019      	str	r1, [r3, #0]
	memset(hci_hbuf_pend, 0, sizeof(hci_hbuf_pend));
    3a4c:	f7fc fe00 	bl	650 <memset>
	hci_hbuf_total = -hci_hbuf_total;
    3a50:	6823      	ldr	r3, [r4, #0]
    3a52:	425b      	negs	r3, r3
    3a54:	6023      	str	r3, [r4, #0]
    3a56:	e774      	b.n	3942 <hci_cmd_handle+0xc2>
		if (hci_hbuf_total > 0) {
    3a58:	2b00      	cmp	r3, #0
    3a5a:	f73f af72 	bgt.w	3942 <hci_cmd_handle+0xc2>
    3a5e:	e7ee      	b.n	3a3e <hci_cmd_handle+0x1be>
    3a60:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3a62:	2101      	movs	r1, #1
    3a64:	a807      	add	r0, sp, #28
	u16_t acl_pkts = sys_le16_to_cpu(cmd->acl_pkts);
    3a66:	f8b3 4003 	ldrh.w	r4, [r3, #3]
	u16_t acl_mtu = sys_le16_to_cpu(cmd->acl_mtu);
    3a6a:	881d      	ldrh	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3a6c:	f7ff fbc2 	bl	31f4 <cmd_complete>
	if (hci_hbuf_total) {
    3a70:	4b3e      	ldr	r3, [pc, #248]	; (3b6c <hci_cmd_handle+0x2ec>)
    3a72:	681a      	ldr	r2, [r3, #0]
    3a74:	2a00      	cmp	r2, #0
    3a76:	d18c      	bne.n	3992 <hci_cmd_handle+0x112>
	if (acl_mtu < RADIO_LL_LENGTH_OCTETS_RX_MAX) {
    3a78:	2d1a      	cmp	r5, #26
    3a7a:	d9dc      	bls.n	3a36 <hci_cmd_handle+0x1b6>
	hci_hbuf_total = -acl_pkts;
    3a7c:	4264      	negs	r4, r4
    3a7e:	601c      	str	r4, [r3, #0]
    3a80:	e75f      	b.n	3942 <hci_cmd_handle+0xc2>
	} else if (!conn_count) {
    3a82:	4b3b      	ldr	r3, [pc, #236]	; (3b70 <hci_cmd_handle+0x2f0>)
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	b1e3      	cbz	r3, 3ac2 <hci_cmd_handle+0x242>
    3a88:	68a5      	ldr	r5, [r4, #8]
		    (c > hci_hbuf_pend[h])) {
    3a8a:	4e3c      	ldr	r6, [pc, #240]	; (3b7c <hci_cmd_handle+0x2fc>)
	for (i = 0; i < cmd->num_handles; i++) {
    3a8c:	782f      	ldrb	r7, [r5, #0]
    3a8e:	2300      	movs	r3, #0
    3a90:	4619      	mov	r1, r3
    3a92:	42bb      	cmp	r3, r7
    3a94:	db09      	blt.n	3aaa <hci_cmd_handle+0x22a>
	hci_hbuf_acked += count;
    3a96:	4a3a      	ldr	r2, [pc, #232]	; (3b80 <hci_cmd_handle+0x300>)
    3a98:	6813      	ldr	r3, [r2, #0]
    3a9a:	440b      	add	r3, r1
    3a9c:	6013      	str	r3, [r2, #0]
	k_poll_signal(hbuf_signal, 0x0);
    3a9e:	4b39      	ldr	r3, [pc, #228]	; (3b84 <hci_cmd_handle+0x304>)
    3aa0:	2100      	movs	r1, #0
    3aa2:	6818      	ldr	r0, [r3, #0]
    3aa4:	f00c fdaa 	bl	105fc <k_poll_signal>
    3aa8:	e74b      	b.n	3942 <hci_cmd_handle+0xc2>
    3aaa:	eb05 0283 	add.w	r2, r5, r3, lsl #2
		u16_t h = sys_le16_to_cpu(cmd->h[i].handle);
    3aae:	f8b2 4001 	ldrh.w	r4, [r2, #1]
		u16_t c = sys_le16_to_cpu(cmd->h[i].count);
    3ab2:	f8b2 0003 	ldrh.w	r0, [r2, #3]
		if ((h >= ARRAY_SIZE(hci_hbuf_pend)) ||
    3ab6:	2c0f      	cmp	r4, #15
    3ab8:	d803      	bhi.n	3ac2 <hci_cmd_handle+0x242>
		    (c > hci_hbuf_pend[h])) {
    3aba:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
		if ((h >= ARRAY_SIZE(hci_hbuf_pend)) ||
    3abe:	4290      	cmp	r0, r2
    3ac0:	d904      	bls.n	3acc <hci_cmd_handle+0x24c>
		ccst = cmd_complete(evt, sizeof(*ccst));
    3ac2:	2101      	movs	r1, #1
    3ac4:	a807      	add	r0, sp, #28
    3ac6:	f7ff fb95 	bl	31f4 <cmd_complete>
    3aca:	e7b4      	b.n	3a36 <hci_cmd_handle+0x1b6>
		hci_hbuf_pend[h] -= c;
    3acc:	1a12      	subs	r2, r2, r0
    3ace:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
		count += c;
    3ad2:	4401      	add	r1, r0
	for (i = 0; i < cmd->num_handles; i++) {
    3ad4:	3301      	adds	r3, #1
    3ad6:	e7dc      	b.n	3a92 <hci_cmd_handle+0x212>
	handle = sys_le16_to_cpu(cmd->handle);
    3ad8:	68a3      	ldr	r3, [r4, #8]
    3ada:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    3adc:	a908      	add	r1, sp, #32
    3ade:	b2a0      	uxth	r0, r4
    3ae0:	f008 f8c8 	bl	bc74 <ll_apto_get>
	rp = cmd_complete(evt, sizeof(*rp));
    3ae4:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    3ae6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    3ae8:	a807      	add	r0, sp, #28
    3aea:	f7ff fb83 	bl	31f4 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3aee:	2d00      	cmp	r5, #0
    3af0:	bf14      	ite	ne
    3af2:	230c      	movne	r3, #12
    3af4:	2300      	moveq	r3, #0
    3af6:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    3af8:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    3afc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    3b00:	f8a0 3003 	strh.w	r3, [r0, #3]
    3b04:	e71d      	b.n	3942 <hci_cmd_handle+0xc2>
	switch (ocf) {
    3b06:	3a01      	subs	r2, #1
    3b08:	2a08      	cmp	r2, #8
    3b0a:	f63f aedf 	bhi.w	38cc <hci_cmd_handle+0x4c>
    3b0e:	a301      	add	r3, pc, #4	; (adr r3, 3b14 <hci_cmd_handle+0x294>)
    3b10:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3b14:	00003b39 	.word	0x00003b39
    3b18:	00003b89 	.word	0x00003b89
    3b1c:	00003c3f 	.word	0x00003c3f
    3b20:	000038cd 	.word	0x000038cd
    3b24:	000038cd 	.word	0x000038cd
    3b28:	000038cd 	.word	0x000038cd
    3b2c:	000038cd 	.word	0x000038cd
    3b30:	000038cd 	.word	0x000038cd
    3b34:	00003c5b 	.word	0x00003c5b
	rp = cmd_complete(evt, sizeof(*rp));
    3b38:	2109      	movs	r1, #9
    3b3a:	a807      	add	r0, sp, #28
    3b3c:	f7ff fb5a 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3b40:	2300      	movs	r3, #0
    3b42:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    3b44:	7083      	strb	r3, [r0, #2]
    3b46:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    3b48:	f06f 030e 	mvn.w	r3, #14
    3b4c:	7143      	strb	r3, [r0, #5]
    3b4e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    3b50:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    3b52:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    3b58:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    3b5a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3b5c:	71c3      	strb	r3, [r0, #7]
    3b5e:	7203      	strb	r3, [r0, #8]
    3b60:	e6ef      	b.n	3942 <hci_cmd_handle+0xc2>
    3b62:	bf00      	nop
    3b64:	2000029c 	.word	0x2000029c
    3b68:	20005498 	.word	0x20005498
    3b6c:	20003b50 	.word	0x20003b50
    3b70:	200002a0 	.word	0x200002a0
    3b74:	20000330 	.word	0x20000330
    3b78:	20003b54 	.word	0x20003b54
    3b7c:	20003b30 	.word	0x20003b30
    3b80:	20003b5c 	.word	0x20003b5c
    3b84:	20000338 	.word	0x20000338
	rp = cmd_complete(evt, sizeof(*rp));
    3b88:	2141      	movs	r1, #65	; 0x41
    3b8a:	a807      	add	r0, sp, #28
    3b8c:	f7ff fb32 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3b90:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3b92:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3b94:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3b96:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3b9a:	f7fc fd59 	bl	650 <memset>
	rp->commands[2] |= BIT(7);
    3b9e:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[38] |= BIT(7);
    3ba0:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    3ba4:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    3ba6:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[2] |= BIT(7);
    3baa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3bae:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    3bb0:	79a3      	ldrb	r3, [r4, #6]
    3bb2:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3bb6:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(5) | BIT(6) | BIT(7);
    3bb8:	7ae3      	ldrb	r3, [r4, #11]
    3bba:	f063 031b 	orn	r3, r3, #27
    3bbe:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3bc0:	7be3      	ldrb	r3, [r4, #15]
    3bc2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    3bc6:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    3bc8:	7c23      	ldrb	r3, [r4, #16]
    3bca:	f043 0302 	orr.w	r3, r3, #2
    3bce:	7423      	strb	r3, [r4, #16]
	rp->commands[38] |= BIT(7);
    3bd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
	rp->commands[22] |= BIT(2);
    3bd4:	7de3      	ldrb	r3, [r4, #23]
	rp->commands[38] |= BIT(7);
    3bd6:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	rp->commands[0] |= BIT(5);
    3bda:	7862      	ldrb	r2, [r4, #1]
	rp->commands[22] |= BIT(2);
    3bdc:	f043 0304 	orr.w	r3, r3, #4
    3be0:	75e3      	strb	r3, [r4, #23]
	rp->commands[0] |= BIT(5);
    3be2:	f042 0220 	orr.w	r2, r2, #32
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3be6:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[0] |= BIT(5);
    3be8:	7062      	strb	r2, [r4, #1]
	rp->commands[33] |= BIT(4) | BIT(5);
    3bea:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3bee:	f063 0308 	orn	r3, r3, #8
    3bf2:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(6) | BIT(7);
    3bf4:	f062 020f 	orn	r2, r2, #15
	rp->commands[37] |= BIT(5);
    3bf8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[33] |= BIT(6) | BIT(7);
    3bfc:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    3c00:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[37] |= BIT(6);
    3c04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    3c08:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[32] |= BIT(4) | BIT(5);
    3c0c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[26] |= BIT(4) | BIT(5);
    3c10:	23ff      	movs	r3, #255	; 0xff
	rp->commands[28] |= BIT(4) | BIT(5) | BIT(6);
    3c12:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    3c16:	f062 0206 	orn	r2, r2, #6
	rp->commands[26] |= BIT(4) | BIT(5);
    3c1a:	76e3      	strb	r3, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    3c1c:	7723      	strb	r3, [r4, #28]
	rp->commands[32] |= BIT(4) | BIT(5);
    3c1e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[28] |= BIT(4) | BIT(5) | BIT(6);
    3c22:	7761      	strb	r1, [r4, #29]
	rp->commands[36] |= BIT(0);
    3c24:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    3c28:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    3c2c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    3c30:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    3c34:	f043 0304 	orr.w	r3, r3, #4
    3c38:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    3c3c:	e681      	b.n	3942 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    3c3e:	2109      	movs	r1, #9
    3c40:	a807      	add	r0, sp, #28
    3c42:	f7ff fad7 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3c46:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3c48:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c4a:	2208      	movs	r2, #8
	rp->status = 0x00;
    3c4c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c50:	f7fc fcfe 	bl	650 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    3c54:	2360      	movs	r3, #96	; 0x60
    3c56:	7163      	strb	r3, [r4, #5]
    3c58:	e673      	b.n	3942 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    3c5a:	2107      	movs	r1, #7
    3c5c:	a807      	add	r0, sp, #28
    3c5e:	f7ff fac9 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3c62:	4601      	mov	r1, r0
    3c64:	2300      	movs	r3, #0
    3c66:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    3c6a:	4618      	mov	r0, r3
    3c6c:	f7ff f860 	bl	2d30 <ll_addr_get>
    3c70:	e667      	b.n	3942 <hci_cmd_handle+0xc2>
	switch (ocf) {
    3c72:	3a01      	subs	r2, #1
    3c74:	2a4d      	cmp	r2, #77	; 0x4d
    3c76:	f63f ae29 	bhi.w	38cc <hci_cmd_handle+0x4c>
    3c7a:	a301      	add	r3, pc, #4	; (adr r3, 3c80 <hci_cmd_handle+0x400>)
    3c7c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3c80:	00003db9 	.word	0x00003db9
    3c84:	00003dc3 	.word	0x00003dc3
    3c88:	00003ddb 	.word	0x00003ddb
    3c8c:	000038cd 	.word	0x000038cd
    3c90:	00003dff 	.word	0x00003dff
    3c94:	00003ea5 	.word	0x00003ea5
    3c98:	00004397 	.word	0x00004397
    3c9c:	00003eaf 	.word	0x00003eaf
    3ca0:	00003ebb 	.word	0x00003ebb
    3ca4:	00003ec7 	.word	0x00003ec7
    3ca8:	00003ed1 	.word	0x00003ed1
    3cac:	00003efd 	.word	0x00003efd
    3cb0:	00003f1d 	.word	0x00003f1d
    3cb4:	00003f47 	.word	0x00003f47
    3cb8:	00003e0b 	.word	0x00003e0b
    3cbc:	00003e21 	.word	0x00003e21
    3cc0:	00003e33 	.word	0x00003e33
    3cc4:	00003e3b 	.word	0x00003e3b
    3cc8:	00004001 	.word	0x00004001
    3ccc:	00003fa7 	.word	0x00003fa7
    3cd0:	00003fdd 	.word	0x00003fdd
    3cd4:	00003ff7 	.word	0x00003ff7
    3cd8:	00003e43 	.word	0x00003e43
    3cdc:	00003e69 	.word	0x00003e69
    3ce0:	00003faf 	.word	0x00003faf
    3ce4:	00003fc3 	.word	0x00003fc3
    3ce8:	00003fd3 	.word	0x00003fd3
    3cec:	00003e7f 	.word	0x00003e7f
    3cf0:	00004245 	.word	0x00004245
    3cf4:	00004253 	.word	0x00004253
    3cf8:	00004263 	.word	0x00004263
    3cfc:	0000401b 	.word	0x0000401b
    3d00:	00004045 	.word	0x00004045
    3d04:	00004053 	.word	0x00004053
    3d08:	00004063 	.word	0x00004063
    3d0c:	0000407b 	.word	0x0000407b
    3d10:	000038cd 	.word	0x000038cd
    3d14:	000038cd 	.word	0x000038cd
    3d18:	0000418b 	.word	0x0000418b
    3d1c:	00004199 	.word	0x00004199
    3d20:	000041a1 	.word	0x000041a1
    3d24:	000041b1 	.word	0x000041b1
    3d28:	000041c3 	.word	0x000041c3
    3d2c:	000041e1 	.word	0x000041e1
    3d30:	000041ff 	.word	0x000041ff
    3d34:	00004215 	.word	0x00004215
    3d38:	00004097 	.word	0x00004097
    3d3c:	000040c1 	.word	0x000040c1
    3d40:	00004117 	.word	0x00004117
    3d44:	00004135 	.word	0x00004135
    3d48:	00004281 	.word	0x00004281
    3d4c:	00004289 	.word	0x00004289
    3d50:	000038cd 	.word	0x000038cd
    3d54:	00003ea5 	.word	0x00003ea5
    3d58:	00003eaf 	.word	0x00003eaf
    3d5c:	00003ebb 	.word	0x00003ebb
    3d60:	00003ec7 	.word	0x00003ec7
    3d64:	000038cd 	.word	0x000038cd
    3d68:	000038cd 	.word	0x000038cd
    3d6c:	000038cd 	.word	0x000038cd
    3d70:	000038cd 	.word	0x000038cd
    3d74:	000038cd 	.word	0x000038cd
    3d78:	000038cd 	.word	0x000038cd
    3d7c:	000038cd 	.word	0x000038cd
    3d80:	000038cd 	.word	0x000038cd
    3d84:	000038cd 	.word	0x000038cd
    3d88:	000038cd 	.word	0x000038cd
    3d8c:	000038cd 	.word	0x000038cd
    3d90:	000038cd 	.word	0x000038cd
    3d94:	000038cd 	.word	0x000038cd
    3d98:	000038cd 	.word	0x000038cd
    3d9c:	000038cd 	.word	0x000038cd
    3da0:	000038cd 	.word	0x000038cd
    3da4:	000038cd 	.word	0x000038cd
    3da8:	0000422b 	.word	0x0000422b
    3dac:	000038cd 	.word	0x000038cd
    3db0:	000038cd 	.word	0x000038cd
    3db4:	00004221 	.word	0x00004221
	le_event_mask = sys_get_le64(cmd->events);
    3db8:	68a0      	ldr	r0, [r4, #8]
    3dba:	f7ff fd5d 	bl	3878 <sys_get_le64>
    3dbe:	4bbc      	ldr	r3, [pc, #752]	; (40b0 <hci_cmd_handle+0x830>)
    3dc0:	e5ce      	b.n	3960 <hci_cmd_handle+0xe0>
	rp = cmd_complete(evt, sizeof(*rp));
    3dc2:	2104      	movs	r1, #4
    3dc4:	a807      	add	r0, sp, #28
    3dc6:	f7ff fa15 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3dca:	2300      	movs	r3, #0
    3dcc:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3dce:	221b      	movs	r2, #27
    3dd0:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3dd2:	2307      	movs	r3, #7
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3dd4:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3dd6:	70c3      	strb	r3, [r0, #3]
    3dd8:	e5b3      	b.n	3942 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    3dda:	2109      	movs	r1, #9
    3ddc:	a807      	add	r0, sp, #28
    3dde:	f7ff fa09 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3de2:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3de4:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3de6:	2208      	movs	r2, #8
	rp->status = 0x00;
    3de8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3dec:	f7fc fc30 	bl	650 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    3df0:	23ff      	movs	r3, #255	; 0xff
    3df2:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    3df4:	2349      	movs	r3, #73	; 0x49
    3df6:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    3df8:	2301      	movs	r3, #1
    3dfa:	70e3      	strb	r3, [r4, #3]
    3dfc:	e5a1      	b.n	3942 <hci_cmd_handle+0xc2>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    3dfe:	68a1      	ldr	r1, [r4, #8]
    3e00:	2001      	movs	r0, #1
    3e02:	f7fe ffaf 	bl	2d64 <ll_addr_set>
	status = ll_test_tx(cmd->tx_ch, cmd->test_data_len, cmd->pkt_payload,
    3e06:	4604      	mov	r4, r0
    3e08:	e0c5      	b.n	3f96 <hci_cmd_handle+0x716>
	rp = cmd_complete(evt, sizeof(*rp));
    3e0a:	2102      	movs	r1, #2
    3e0c:	a807      	add	r0, sp, #28
    3e0e:	f7ff f9f1 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3e12:	2300      	movs	r3, #0
    3e14:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3e16:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    3e18:	f009 fd2a 	bl	d870 <ll_wl_size_get>
    3e1c:	7060      	strb	r0, [r4, #1]
    3e1e:	e590      	b.n	3942 <hci_cmd_handle+0xc2>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3e20:	2101      	movs	r1, #1
    3e22:	a807      	add	r0, sp, #28
    3e24:	f7ff f9e6 	bl	31f4 <cmd_complete>
    3e28:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    3e2a:	f009 fd23 	bl	d874 <ll_wl_clear>
	ccst->status = ll_rl_enable(enable);
    3e2e:	7020      	strb	r0, [r4, #0]
    3e30:	e587      	b.n	3942 <hci_cmd_handle+0xc2>
	status = ll_wl_add(&cmd->addr);
    3e32:	68a0      	ldr	r0, [r4, #8]
    3e34:	f009 fdd4 	bl	d9e0 <ll_wl_add>
    3e38:	e7e5      	b.n	3e06 <hci_cmd_handle+0x586>
	status = ll_wl_remove(&cmd->addr);
    3e3a:	68a0      	ldr	r0, [r4, #8]
    3e3c:	f009 fd3a 	bl	d8b4 <ll_wl_remove>
    3e40:	e7e1      	b.n	3e06 <hci_cmd_handle+0x586>
    3e42:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    3e44:	2300      	movs	r3, #0
    3e46:	aa08      	add	r2, sp, #32
    3e48:	f100 0110 	add.w	r1, r0, #16
    3e4c:	f00a fab0 	bl	e3b0 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    3e50:	2111      	movs	r1, #17
    3e52:	a807      	add	r0, sp, #28
    3e54:	f7ff f9ce 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3e58:	2300      	movs	r3, #0
    3e5a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    3e5e:	2210      	movs	r2, #16
    3e60:	a908      	add	r1, sp, #32
	memcpy(rp->info, build_info, sizeof(build_info));
    3e62:	f7fc fbc9 	bl	5f8 <memcpy>
    3e66:	e56c      	b.n	3942 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    3e68:	2109      	movs	r1, #9
    3e6a:	a807      	add	r0, sp, #28
    3e6c:	f7ff f9c2 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3e70:	2300      	movs	r3, #0
    3e72:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    3e76:	2108      	movs	r1, #8
    3e78:	f7fe ff94 	bl	2da4 <bt_rand>
    3e7c:	e561      	b.n	3942 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    3e7e:	2109      	movs	r1, #9
    3e80:	a807      	add	r0, sp, #28
    3e82:	f7ff f9b7 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    3e86:	4601      	mov	r1, r0
    3e88:	2300      	movs	r3, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3e8a:	4602      	mov	r2, r0
	rp->status = 0x00;
    3e8c:	f801 3b01 	strb.w	r3, [r1], #1
	sys_put_le32(val, dst);
    3e90:	f46f 0040 	mvn.w	r0, #12582912	; 0xc00000
    3e94:	f7ff f96a 	bl	316c <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    3e98:	f240 30ff 	movw	r0, #1023	; 0x3ff
    3e9c:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3e9e:	f7ff f965 	bl	316c <sys_put_le32>
    3ea2:	e54e      	b.n	3942 <hci_cmd_handle+0xc2>
		le_set_adv_param(cmd, evt);
    3ea4:	a907      	add	r1, sp, #28
    3ea6:	68a0      	ldr	r0, [r4, #8]
    3ea8:	f7ff fb34 	bl	3514 <le_set_adv_param.isra.40>
    3eac:	e549      	b.n	3942 <hci_cmd_handle+0xc2>
    3eae:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    3eb0:	1c59      	adds	r1, r3, #1
    3eb2:	7818      	ldrb	r0, [r3, #0]
    3eb4:	f009 f850 	bl	cf58 <ll_adv_data_set>
    3eb8:	e554      	b.n	3964 <hci_cmd_handle+0xe4>
    3eba:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    3ebc:	1c59      	adds	r1, r3, #1
    3ebe:	7818      	ldrb	r0, [r3, #0]
    3ec0:	f009 f8b6 	bl	d030 <ll_scan_data_set>
    3ec4:	e54e      	b.n	3964 <hci_cmd_handle+0xe4>
		le_set_adv_enable(cmd, evt);
    3ec6:	a907      	add	r1, sp, #28
    3ec8:	68a0      	ldr	r0, [r4, #8]
    3eca:	f7ff fb4b 	bl	3564 <le_set_adv_enable.isra.43>
    3ece:	e538      	b.n	3942 <hci_cmd_handle+0xc2>
    3ed0:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    3ed2:	7963      	ldrb	r3, [r4, #5]
    3ed4:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    3ed8:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    3edc:	7820      	ldrb	r0, [r4, #0]
    3ede:	79a4      	ldrb	r4, [r4, #6]
    3ee0:	9400      	str	r4, [sp, #0]
    3ee2:	f009 f963 	bl	d1ac <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    3ee6:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3ee8:	2101      	movs	r1, #1
    3eea:	a807      	add	r0, sp, #28
    3eec:	f7ff f982 	bl	31f4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3ef0:	2c00      	cmp	r4, #0
    3ef2:	bf18      	it	ne
    3ef4:	230c      	movne	r3, #12
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    3ef6:	bf08      	it	eq
    3ef8:	2300      	moveq	r3, #0
    3efa:	e54b      	b.n	3994 <hci_cmd_handle+0x114>
    3efc:	68a2      	ldr	r2, [r4, #8]
    3efe:	4b6d      	ldr	r3, [pc, #436]	; (40b4 <hci_cmd_handle+0x834>)
	if (cmd->enable && cmd->filter_dup) {
    3f00:	7810      	ldrb	r0, [r2, #0]
    3f02:	b140      	cbz	r0, 3f16 <hci_cmd_handle+0x696>
    3f04:	7852      	ldrb	r2, [r2, #1]
    3f06:	b132      	cbz	r2, 3f16 <hci_cmd_handle+0x696>
		dup_count = 0;
    3f08:	2200      	movs	r2, #0
    3f0a:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    3f0c:	4b6a      	ldr	r3, [pc, #424]	; (40b8 <hci_cmd_handle+0x838>)
		dup_count = -1;
    3f0e:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    3f10:	f009 f970 	bl	d1f4 <ll_scan_enable>
    3f14:	e7e7      	b.n	3ee6 <hci_cmd_handle+0x666>
		dup_count = -1;
    3f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3f1a:	e7f8      	b.n	3f0e <hci_cmd_handle+0x68e>
    3f1c:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
    3f1e:	f8b4 5013 	ldrh.w	r5, [r4, #19]
    3f22:	7963      	ldrb	r3, [r4, #5]
    3f24:	7922      	ldrb	r2, [r4, #4]
    3f26:	8861      	ldrh	r1, [r4, #2]
    3f28:	8820      	ldrh	r0, [r4, #0]
    3f2a:	9504      	str	r5, [sp, #16]
    3f2c:	f8b4 5011 	ldrh.w	r5, [r4, #17]
    3f30:	9503      	str	r5, [sp, #12]
    3f32:	f8b4 500f 	ldrh.w	r5, [r4, #15]
    3f36:	9502      	str	r5, [sp, #8]
    3f38:	7b25      	ldrb	r5, [r4, #12]
    3f3a:	9501      	str	r5, [sp, #4]
    3f3c:	3406      	adds	r4, #6
    3f3e:	9400      	str	r4, [sp, #0]
    3f40:	f009 f992 	bl	d268 <ll_create_connection>
    3f44:	e4f6      	b.n	3934 <hci_cmd_handle+0xb4>
	status = ll_connect_disable();
    3f46:	f008 fce3 	bl	c910 <ll_connect_disable>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    3f4a:	4606      	mov	r6, r0
    3f4c:	bb48      	cbnz	r0, 3fa2 <hci_cmd_handle+0x722>
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3f4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f52:	2001      	movs	r0, #1
    3f54:	f7fd fe9e 	bl	1c94 <bt_buf_get_rx>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f58:	4a58      	ldr	r2, [pc, #352]	; (40bc <hci_cmd_handle+0x83c>)
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3f5a:	9007      	str	r0, [sp, #28]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f5c:	e9d2 4500 	ldrd	r4, r5, [r2]
    3f60:	2400      	movs	r4, #0
    3f62:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    3f66:	ea54 0205 	orrs.w	r2, r4, r5
		*evt = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3f6a:	4603      	mov	r3, r0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f6c:	d004      	beq.n	3f78 <hci_cmd_handle+0x6f8>
    3f6e:	4632      	mov	r2, r6
    3f70:	4631      	mov	r1, r6
    3f72:	2002      	movs	r0, #2
    3f74:	f7ff fb06 	bl	3584 <le_conn_complete.part.47>
		if ((*evt)->len) {
    3f78:	9807      	ldr	r0, [sp, #28]
    3f7a:	8984      	ldrh	r4, [r0, #12]
    3f7c:	b14c      	cbz	r4, 3f92 <hci_cmd_handle+0x712>
			ccst = cmd_complete(&cc, sizeof(*ccst));
    3f7e:	2101      	movs	r1, #1
    3f80:	a808      	add	r0, sp, #32
    3f82:	f7ff f937 	bl	31f4 <cmd_complete>
			ccst->status = cmd_status;
    3f86:	2300      	movs	r3, #0
    3f88:	7003      	strb	r3, [r0, #0]
			bt_recv_prio(cc);
    3f8a:	9808      	ldr	r0, [sp, #32]
    3f8c:	f7fd fea2 	bl	1cd4 <bt_recv_prio>
    3f90:	e4d7      	b.n	3942 <hci_cmd_handle+0xc2>
			net_buf_unref(*evt);
    3f92:	f00b f8c3 	bl	f11c <net_buf_unref>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3f96:	2101      	movs	r1, #1
    3f98:	a807      	add	r0, sp, #28
    3f9a:	f7ff f92b 	bl	31f4 <cmd_complete>
	ccst->status = status;
    3f9e:	7004      	strb	r4, [r0, #0]
    3fa0:	e4cf      	b.n	3942 <hci_cmd_handle+0xc2>
	cmd_status = status ? BT_HCI_ERR_CMD_DISALLOWED : 0x00;
    3fa2:	240c      	movs	r4, #12
    3fa4:	e7f7      	b.n	3f96 <hci_cmd_handle+0x716>
	status = ll_chm_update(&cmd->ch_map[0]);
    3fa6:	68a0      	ldr	r0, [r4, #8]
    3fa8:	f007 fd84 	bl	bab4 <ll_chm_update>
    3fac:	e79b      	b.n	3ee6 <hci_cmd_handle+0x666>
    3fae:	68a0      	ldr	r0, [r4, #8]
	status = ll_enc_req_send(handle,
    3fb0:	f100 030c 	add.w	r3, r0, #12
    3fb4:	f100 020a 	add.w	r2, r0, #10
    3fb8:	1c81      	adds	r1, r0, #2
    3fba:	8800      	ldrh	r0, [r0, #0]
    3fbc:	f008 f84e 	bl	c05c <ll_enc_req_send>
    3fc0:	e4b8      	b.n	3934 <hci_cmd_handle+0xb4>
	handle = sys_le16_to_cpu(cmd->handle);
    3fc2:	68a2      	ldr	r2, [r4, #8]
    3fc4:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    3fc8:	2100      	movs	r1, #0
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    3fca:	b2a0      	uxth	r0, r4
    3fcc:	f007 fdc9 	bl	bb62 <ll_start_enc_req_send>
    3fd0:	e4fb      	b.n	39ca <hci_cmd_handle+0x14a>
	handle = sys_le16_to_cpu(cmd->handle);
    3fd2:	68a3      	ldr	r3, [r4, #8]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    3fd4:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(cmd->handle);
    3fd6:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    3fd8:	2106      	movs	r1, #6
    3fda:	e7f6      	b.n	3fca <hci_cmd_handle+0x74a>
	handle = sys_le16_to_cpu(cmd->handle);
    3fdc:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    3fde:	2108      	movs	r1, #8
    3fe0:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    3fe2:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3fe4:	f7ff f906 	bl	31f4 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    3fe8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    3fea:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    3fec:	1cc1      	adds	r1, r0, #3
    3fee:	4630      	mov	r0, r6
    3ff0:	f007 fda2 	bl	bb38 <ll_chm_get>
    3ff4:	e513      	b.n	3a1e <hci_cmd_handle+0x19e>
	handle = sys_le16_to_cpu(cmd->handle);
    3ff6:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    3ff8:	8818      	ldrh	r0, [r3, #0]
    3ffa:	f007 fdf5 	bl	bbe8 <ll_feature_req_send>
    3ffe:	e499      	b.n	3934 <hci_cmd_handle+0xb4>
    4000:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    4002:	8911      	ldrh	r1, [r2, #8]
    4004:	8893      	ldrh	r3, [r2, #4]
    4006:	8810      	ldrh	r0, [r2, #0]
    4008:	9101      	str	r1, [sp, #4]
    400a:	88d2      	ldrh	r2, [r2, #6]
    400c:	9200      	str	r2, [sp, #0]
    400e:	2200      	movs	r2, #0
    4010:	4611      	mov	r1, r2
    4012:	f007 fcd7 	bl	b9c4 <ll_conn_update>
	*evt = cmd_status(status);
    4016:	b2c0      	uxtb	r0, r0
    4018:	e490      	b.n	393c <hci_cmd_handle+0xbc>
    401a:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    401c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    401e:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    4020:	8893      	ldrh	r3, [r2, #4]
    4022:	9101      	str	r1, [sp, #4]
    4024:	88d2      	ldrh	r2, [r2, #6]
    4026:	9200      	str	r2, [sp, #0]
    4028:	2200      	movs	r2, #0
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    402a:	2102      	movs	r1, #2
    402c:	b2a0      	uxth	r0, r4
    402e:	f007 fcc9 	bl	b9c4 <ll_conn_update>
	rp = cmd_complete(evt, sizeof(*rp));
    4032:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    4034:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    4036:	a807      	add	r0, sp, #28
    4038:	f7ff f8dc 	bl	31f4 <cmd_complete>
	rp->status = status;
    403c:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    403e:	f8a0 4001 	strh.w	r4, [r0, #1]
    4042:	e47e      	b.n	3942 <hci_cmd_handle+0xc2>
    4044:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    4046:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    4048:	789a      	ldrb	r2, [r3, #2]
    404a:	2300      	movs	r3, #0
    404c:	9301      	str	r3, [sp, #4]
    404e:	9300      	str	r3, [sp, #0]
    4050:	e7eb      	b.n	402a <hci_cmd_handle+0x7aa>
    4052:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    4054:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    4056:	889a      	ldrh	r2, [r3, #4]
    4058:	8859      	ldrh	r1, [r3, #2]
    405a:	b2a0      	uxth	r0, r4
    405c:	f007 fe34 	bl	bcc8 <ll_length_req_send>
    4060:	e4b3      	b.n	39ca <hci_cmd_handle+0x14a>
	rp = cmd_complete(evt, sizeof(*rp));
    4062:	2105      	movs	r1, #5
    4064:	a807      	add	r0, sp, #28
    4066:	f7ff f8c5 	bl	31f4 <cmd_complete>
    406a:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    406c:	1cc1      	adds	r1, r0, #3
    406e:	3001      	adds	r0, #1
    4070:	f007 fe4e 	bl	bd10 <ll_length_default_get>
	rp->status = 0x00;
    4074:	2300      	movs	r3, #0
    4076:	7023      	strb	r3, [r4, #0]
    4078:	e463      	b.n	3942 <hci_cmd_handle+0xc2>
    407a:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    407c:	8859      	ldrh	r1, [r3, #2]
    407e:	8818      	ldrh	r0, [r3, #0]
    4080:	f007 fe50 	bl	bd24 <ll_length_default_set>
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    4084:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    4086:	2101      	movs	r1, #1
    4088:	a807      	add	r0, sp, #28
    408a:	f7ff f8b3 	bl	31f4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    408e:	2c00      	cmp	r4, #0
    4090:	bf18      	it	ne
    4092:	231e      	movne	r3, #30
    4094:	e72f      	b.n	3ef6 <hci_cmd_handle+0x676>
	rp = cmd_complete(evt, sizeof(*rp));
    4096:	2109      	movs	r1, #9
    4098:	a807      	add	r0, sp, #28
    409a:	f7ff f8ab 	bl	31f4 <cmd_complete>
    409e:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    40a0:	1dc3      	adds	r3, r0, #7
    40a2:	1d42      	adds	r2, r0, #5
    40a4:	1cc1      	adds	r1, r0, #3
    40a6:	3001      	adds	r0, #1
    40a8:	f007 fe46 	bl	bd38 <ll_length_max_get>
    40ac:	e7e2      	b.n	4074 <hci_cmd_handle+0x7f4>
    40ae:	bf00      	nop
    40b0:	200054a0 	.word	0x200054a0
    40b4:	200002a4 	.word	0x200002a4
    40b8:	200002a8 	.word	0x200002a8
    40bc:	20005498 	.word	0x20005498
	handle = sys_le16_to_cpu(cmd->handle);
    40c0:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    40c2:	2105      	movs	r1, #5
    40c4:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    40c6:	881d      	ldrh	r5, [r3, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    40c8:	f7ff f894 	bl	31f4 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    40cc:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    40ce:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    40d0:	1d02      	adds	r2, r0, #4
    40d2:	1cc1      	adds	r1, r0, #3
    40d4:	4630      	mov	r0, r6
    40d6:	f007 fe38 	bl	bd4a <ll_phy_get>
	return __builtin_ffs(op);
    40da:	78e2      	ldrb	r2, [r4, #3]
	rp->handle = sys_cpu_to_le16(handle);
    40dc:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    40e0:	2800      	cmp	r0, #0
    40e2:	bf14      	ite	ne
    40e4:	230c      	movne	r3, #12
    40e6:	2300      	moveq	r3, #0
    40e8:	7023      	strb	r3, [r4, #0]
    40ea:	2a00      	cmp	r2, #0
    40ec:	fa92 f3a2 	rbit	r3, r2
    40f0:	fab3 f383 	clz	r3, r3
    40f4:	7922      	ldrb	r2, [r4, #4]
    40f6:	bf08      	it	eq
    40f8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    40fc:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    40fe:	70e3      	strb	r3, [r4, #3]
    4100:	2a00      	cmp	r2, #0
    4102:	fa92 f3a2 	rbit	r3, r2
    4106:	fab3 f383 	clz	r3, r3
    410a:	bf08      	it	eq
    410c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    4110:	3301      	adds	r3, #1
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    4112:	7123      	strb	r3, [r4, #4]
    4114:	e415      	b.n	3942 <hci_cmd_handle+0xc2>
    4116:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    4118:	781a      	ldrb	r2, [r3, #0]
    411a:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    411c:	bf44      	itt	mi
    411e:	2107      	movmi	r1, #7
    4120:	7059      	strbmi	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    4122:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    4124:	bf44      	itt	mi
    4126:	2207      	movmi	r2, #7
    4128:	709a      	strbmi	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    412a:	7899      	ldrb	r1, [r3, #2]
    412c:	7858      	ldrb	r0, [r3, #1]
    412e:	f007 fe21 	bl	bd74 <ll_phy_default_set>
    4132:	e7a7      	b.n	4084 <hci_cmd_handle+0x804>
    4134:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    4136:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(cmd->handle);
    4138:	8818      	ldrh	r0, [r3, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    413a:	f8b3 4005 	ldrh.w	r4, [r3, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    413e:	07d7      	lsls	r7, r2, #31
		cmd->tx_phys = mask_phys;
    4140:	bf44      	itt	mi
    4142:	2107      	movmi	r1, #7
    4144:	70d9      	strbmi	r1, [r3, #3]
	if (!(cmd->tx_phys & 0x07) ||
    4146:	78d9      	ldrb	r1, [r3, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    4148:	0796      	lsls	r6, r2, #30
		cmd->rx_phys = mask_phys;
    414a:	bf44      	itt	mi
    414c:	2207      	movmi	r2, #7
    414e:	711a      	strbmi	r2, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    4150:	074d      	lsls	r5, r1, #29
    4152:	f43f acb6 	beq.w	3ac2 <hci_cmd_handle+0x242>
	    !(cmd->rx_phys & 0x07)) {
    4156:	791b      	ldrb	r3, [r3, #4]
	if (!(cmd->tx_phys & 0x07) ||
    4158:	075a      	lsls	r2, r3, #29
    415a:	f43f acb2 	beq.w	3ac2 <hci_cmd_handle+0x242>
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    415e:	ea41 0203 	orr.w	r2, r1, r3
    4162:	f012 0ff8 	tst.w	r2, #248	; 0xf8
    4166:	d005      	beq.n	4174 <hci_cmd_handle+0x8f4>
		ccst = cmd_complete(evt, sizeof(*ccst));
    4168:	2101      	movs	r1, #1
    416a:	a807      	add	r0, sp, #28
    416c:	f7ff f842 	bl	31f4 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    4170:	2311      	movs	r3, #17
    4172:	e40f      	b.n	3994 <hci_cmd_handle+0x114>
	if (phy_opts & 0x03) {
    4174:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1;
    4178:	bf1c      	itt	ne
    417a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    417e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    4182:	f007 fe01 	bl	bd88 <ll_phy_req_send>
    4186:	f7ff bbd5 	b.w	3934 <hci_cmd_handle+0xb4>
    418a:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    418c:	f100 0217 	add.w	r2, r0, #23
    4190:	1dc1      	adds	r1, r0, #7
    4192:	f009 feb1 	bl	def8 <ll_rl_add>
    4196:	e636      	b.n	3e06 <hci_cmd_handle+0x586>
	status = ll_rl_remove(&cmd->peer_id_addr);
    4198:	68a0      	ldr	r0, [r4, #8]
    419a:	f009 ff4f 	bl	e03c <ll_rl_remove>
    419e:	e632      	b.n	3e06 <hci_cmd_handle+0x586>
	ccst = cmd_complete(evt, sizeof(*ccst));
    41a0:	2101      	movs	r1, #1
    41a2:	a807      	add	r0, sp, #28
    41a4:	f7ff f826 	bl	31f4 <cmd_complete>
    41a8:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    41aa:	f009 fe8b 	bl	dec4 <ll_rl_clear>
    41ae:	e63e      	b.n	3e2e <hci_cmd_handle+0x5ae>
	rp = cmd_complete(evt, sizeof(*rp));
    41b0:	2102      	movs	r1, #2
    41b2:	a807      	add	r0, sp, #28
    41b4:	f7ff f81e 	bl	31f4 <cmd_complete>
    41b8:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    41ba:	f009 fe81 	bl	dec0 <ll_rl_size_get>
    41be:	7060      	strb	r0, [r4, #1]
    41c0:	e758      	b.n	4074 <hci_cmd_handle+0x7f4>
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    41c2:	2207      	movs	r2, #7
    41c4:	68a1      	ldr	r1, [r4, #8]
    41c6:	a808      	add	r0, sp, #32
    41c8:	f7fc fa16 	bl	5f8 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    41cc:	2107      	movs	r1, #7
    41ce:	a807      	add	r0, sp, #28
    41d0:	f7ff f810 	bl	31f4 <cmd_complete>
    41d4:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    41d6:	1c41      	adds	r1, r0, #1
    41d8:	a808      	add	r0, sp, #32
    41da:	f009 ffbd 	bl	e158 <ll_rl_crpa_get>
    41de:	e626      	b.n	3e2e <hci_cmd_handle+0x5ae>
    41e0:	2207      	movs	r2, #7
    41e2:	68a1      	ldr	r1, [r4, #8]
    41e4:	a808      	add	r0, sp, #32
    41e6:	f7fc fa07 	bl	5f8 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    41ea:	2107      	movs	r1, #7
    41ec:	a807      	add	r0, sp, #28
    41ee:	f7ff f801 	bl	31f4 <cmd_complete>
    41f2:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    41f4:	1c41      	adds	r1, r0, #1
    41f6:	a808      	add	r0, sp, #32
    41f8:	f009 ffce 	bl	e198 <ll_rl_lrpa_get>
    41fc:	e617      	b.n	3e2e <hci_cmd_handle+0x5ae>
	u8_t enable = cmd->enable;
    41fe:	68a3      	ldr	r3, [r4, #8]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4200:	2101      	movs	r1, #1
    4202:	a807      	add	r0, sp, #28
	u8_t enable = cmd->enable;
    4204:	781d      	ldrb	r5, [r3, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4206:	f7fe fff5 	bl	31f4 <cmd_complete>
    420a:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    420c:	4628      	mov	r0, r5
    420e:	f009 ffdb 	bl	e1c8 <ll_rl_enable>
    4212:	e60c      	b.n	3e2e <hci_cmd_handle+0x5ae>
	u16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    4214:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    4216:	8818      	ldrh	r0, [r3, #0]
    4218:	f009 ffe8 	bl	e1ec <ll_rl_timeout_set>
    421c:	f7ff bba2 	b.w	3964 <hci_cmd_handle+0xe4>
    4220:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    4222:	79c1      	ldrb	r1, [r0, #7]
    4224:	f009 ffea 	bl	e1fc <ll_priv_mode_set>
    4228:	e5ed      	b.n	3e06 <hci_cmd_handle+0x586>
	rp = cmd_complete(evt, sizeof(*rp));
    422a:	2103      	movs	r1, #3
    422c:	a807      	add	r0, sp, #28
    422e:	f7fe ffe1 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    4232:	4601      	mov	r1, r0
    4234:	2300      	movs	r3, #0
    4236:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    423a:	3001      	adds	r0, #1
    423c:	f7fe fdae 	bl	2d9c <ll_tx_pwr_get>
    4240:	f7ff bb7f 	b.w	3942 <hci_cmd_handle+0xc2>
	status = ll_test_rx(cmd->rx_ch, 0x01, 0);
    4244:	68a3      	ldr	r3, [r4, #8]
    4246:	2200      	movs	r2, #0
    4248:	2101      	movs	r1, #1
	status = ll_test_rx(cmd->rx_ch, cmd->phy, cmd->mod_index);
    424a:	7818      	ldrb	r0, [r3, #0]
    424c:	f009 f96a 	bl	d524 <ll_test_rx>
    4250:	e5d9      	b.n	3e06 <hci_cmd_handle+0x586>
    4252:	68a0      	ldr	r0, [r4, #8]
	status = ll_test_tx(cmd->tx_ch, cmd->test_data_len, cmd->pkt_payload,
    4254:	2301      	movs	r3, #1
	status = ll_test_tx(cmd->tx_ch, cmd->test_data_len, cmd->pkt_payload,
    4256:	7882      	ldrb	r2, [r0, #2]
    4258:	7841      	ldrb	r1, [r0, #1]
    425a:	7800      	ldrb	r0, [r0, #0]
    425c:	f009 f8fe 	bl	d45c <ll_test_tx>
    4260:	e5d1      	b.n	3e06 <hci_cmd_handle+0x586>
	ll_test_end(&rx_pkt_count);
    4262:	a808      	add	r0, sp, #32
    4264:	f009 f986 	bl	d574 <ll_test_end>
	rp = cmd_complete(evt, sizeof(*rp));
    4268:	2103      	movs	r1, #3
    426a:	a807      	add	r0, sp, #28
    426c:	f7fe ffc2 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    4270:	2300      	movs	r3, #0
    4272:	7003      	strb	r3, [r0, #0]
	rp->rx_pkt_count = sys_cpu_to_le16(rx_pkt_count);
    4274:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4278:	f8a0 3001 	strh.w	r3, [r0, #1]
    427c:	f7ff bb61 	b.w	3942 <hci_cmd_handle+0xc2>
    4280:	68a3      	ldr	r3, [r4, #8]
	status = ll_test_rx(cmd->rx_ch, cmd->phy, cmd->mod_index);
    4282:	789a      	ldrb	r2, [r3, #2]
    4284:	7859      	ldrb	r1, [r3, #1]
    4286:	e7e0      	b.n	424a <hci_cmd_handle+0x9ca>
    4288:	68a0      	ldr	r0, [r4, #8]
	status = ll_test_tx(cmd->tx_ch, cmd->test_data_len, cmd->pkt_payload,
    428a:	78c3      	ldrb	r3, [r0, #3]
    428c:	e7e3      	b.n	4256 <hci_cmd_handle+0x9d6>
	rp = cmd_complete(evt, sizeof(*rp));
    428e:	210d      	movs	r1, #13
    4290:	a807      	add	r0, sp, #28
    4292:	f7fe ffaf 	bl	31f4 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4296:	2202      	movs	r2, #2
    4298:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    429a:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    429c:	2201      	movs	r2, #1
    429e:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    42a0:	220b      	movs	r2, #11
	rp->status = 0x00;
    42a2:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    42a4:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    42a6:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    42a8:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    42aa:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    42ac:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    42ae:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    42b0:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    42b2:	7242      	strb	r2, [r0, #9]
    42b4:	7283      	strb	r3, [r0, #10]
    42b6:	72c3      	strb	r3, [r0, #11]
    42b8:	7303      	strb	r3, [r0, #12]
    42ba:	f7ff bb42 	b.w	3942 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    42be:	2141      	movs	r1, #65	; 0x41
    42c0:	a807      	add	r0, sp, #28
    42c2:	f7fe ff97 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    42c6:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    42c8:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    42ca:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    42cc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    42d0:	f7fc f9be 	bl	650 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    42d4:	7863      	ldrb	r3, [r4, #1]
    42d6:	f063 0358 	orn	r3, r3, #88	; 0x58
    42da:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    42dc:	78a3      	ldrb	r3, [r4, #2]
    42de:	f043 0303 	orr.w	r3, r3, #3
    42e2:	70a3      	strb	r3, [r4, #2]
    42e4:	f7ff bb2d 	b.w	3942 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    42e8:	2109      	movs	r1, #9
    42ea:	a807      	add	r0, sp, #28
    42ec:	f7fe ff82 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    42f0:	2100      	movs	r1, #0
    42f2:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    42f6:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    42f8:	f7fc f9aa 	bl	650 <memset>
    42fc:	f7ff bb21 	b.w	3942 <hci_cmd_handle+0xc2>
	const char build_info[] = HCI_VS_BUILD_INFO;
    4300:	4b5c      	ldr	r3, [pc, #368]	; (4474 <hci_cmd_handle+0xbf4>)
    4302:	aa08      	add	r2, sp, #32
    4304:	f103 0628 	add.w	r6, r3, #40	; 0x28
    4308:	4615      	mov	r5, r2
    430a:	6818      	ldr	r0, [r3, #0]
    430c:	6859      	ldr	r1, [r3, #4]
    430e:	4614      	mov	r4, r2
    4310:	c403      	stmia	r4!, {r0, r1}
    4312:	3308      	adds	r3, #8
    4314:	42b3      	cmp	r3, r6
    4316:	4622      	mov	r2, r4
    4318:	d1f7      	bne.n	430a <hci_cmd_handle+0xa8a>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    431a:	2129      	movs	r1, #41	; 0x29
    431c:	a807      	add	r0, sp, #28
    431e:	f7fe ff69 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    4322:	2300      	movs	r3, #0
    4324:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    4328:	2228      	movs	r2, #40	; 0x28
    432a:	4629      	mov	r1, r5
    432c:	e599      	b.n	3e62 <hci_cmd_handle+0x5e2>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    432e:	68a1      	ldr	r1, [r4, #8]
    4330:	2000      	movs	r0, #0
    4332:	f7fe fd17 	bl	2d64 <ll_addr_set>
    4336:	f7ff bb15 	b.w	3964 <hci_cmd_handle+0xe4>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    433a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    433e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    4342:	3201      	adds	r2, #1
    4344:	d106      	bne.n	4354 <hci_cmd_handle+0xad4>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    4346:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    434a:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    434e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    4350:	4293      	cmp	r3, r2
    4352:	d020      	beq.n	4396 <hci_cmd_handle+0xb16>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    4354:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4358:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    435c:	07db      	lsls	r3, r3, #31
    435e:	d51a      	bpl.n	4396 <hci_cmd_handle+0xb16>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    4360:	2118      	movs	r1, #24
    4362:	a807      	add	r0, sp, #28
    4364:	f7fe ff46 	bl	31f4 <cmd_complete>
		rp->status = 0x00;
    4368:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    436a:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    436c:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    436e:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    4370:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    4372:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    4376:	1ca1      	adds	r1, r4, #2
    4378:	f7fe fef8 	bl	316c <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    437c:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    4380:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    4382:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    4386:	f063 033f 	orn	r3, r3, #63	; 0x3f
    438a:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    438c:	2210      	movs	r2, #16
    438e:	4631      	mov	r1, r6
    4390:	f104 0008 	add.w	r0, r4, #8
    4394:	e7b0      	b.n	42f8 <hci_cmd_handle+0xa78>
	rp = cmd_complete(evt, sizeof(*rp));
    4396:	2102      	movs	r1, #2
    4398:	a807      	add	r0, sp, #28
    439a:	f7fe ff2b 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    439e:	2300      	movs	r3, #0
    43a0:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    43a2:	7043      	strb	r3, [r0, #1]
    43a4:	f7ff bacd 	b.w	3942 <hci_cmd_handle+0xc2>
	rp = cmd_complete(evt, sizeof(*rp));
    43a8:	2121      	movs	r1, #33	; 0x21
    43aa:	a807      	add	r0, sp, #28
    43ac:	f7fe ff22 	bl	31f4 <cmd_complete>
	rp->status = 0x00;
    43b0:	4603      	mov	r3, r0
    43b2:	2200      	movs	r2, #0
    43b4:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    43b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    43bc:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    43be:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    43c2:	3101      	adds	r1, #1
    43c4:	d04b      	beq.n	445e <hci_cmd_handle+0xbde>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    43c6:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    43ca:	3101      	adds	r1, #1
    43cc:	d047      	beq.n	445e <hci_cmd_handle+0xbde>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    43ce:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    43d2:	3101      	adds	r1, #1
    43d4:	d043      	beq.n	445e <hci_cmd_handle+0xbde>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    43d6:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    43da:	3101      	adds	r1, #1
    43dc:	d03f      	beq.n	445e <hci_cmd_handle+0xbde>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    43de:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    43e2:	4619      	mov	r1, r3
    43e4:	f7fe fec2 	bl	316c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    43e8:	1d61      	adds	r1, r4, #5
    43ea:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    43ee:	f7fe febd 	bl	316c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    43f2:	f104 0109 	add.w	r1, r4, #9
    43f6:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    43fa:	f7fe feb7 	bl	316c <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    43fe:	f104 010d 	add.w	r1, r4, #13
    4402:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    4406:	f7fe feb1 	bl	316c <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    440e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    4412:	3301      	adds	r3, #1
    4414:	f104 0311 	add.w	r3, r4, #17
    4418:	d027      	beq.n	446a <hci_cmd_handle+0xbea>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    441a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    441e:	3101      	adds	r1, #1
    4420:	d023      	beq.n	446a <hci_cmd_handle+0xbea>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    4422:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    4426:	3101      	adds	r1, #1
    4428:	d01f      	beq.n	446a <hci_cmd_handle+0xbea>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    442a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    442e:	3101      	adds	r1, #1
    4430:	d01b      	beq.n	446a <hci_cmd_handle+0xbea>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    4432:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    4436:	4619      	mov	r1, r3
    4438:	f7fe fe98 	bl	316c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    443c:	f104 0115 	add.w	r1, r4, #21
    4440:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    4444:	f7fe fe92 	bl	316c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    4448:	f104 0119 	add.w	r1, r4, #25
    444c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    4450:	f7fe fe8c 	bl	316c <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    4454:	f104 011d 	add.w	r1, r4, #29
    4458:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    445c:	e51f      	b.n	3e9e <hci_cmd_handle+0x61e>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    445e:	2210      	movs	r2, #16
    4460:	2100      	movs	r1, #0
    4462:	4618      	mov	r0, r3
    4464:	f7fc f8f4 	bl	650 <memset>
    4468:	e7cf      	b.n	440a <hci_cmd_handle+0xb8a>
		memset(rp->er, 0x00, sizeof(rp->er));
    446a:	2210      	movs	r2, #16
    446c:	2100      	movs	r1, #0
    446e:	4618      	mov	r0, r3
    4470:	e742      	b.n	42f8 <hci_cmd_handle+0xa78>
    4472:	bf00      	nop
    4474:	00010943 	.word	0x00010943

00004478 <hci_acl_handle>:
{
    4478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    447c:	2300      	movs	r3, #0
    447e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    4480:	8983      	ldrh	r3, [r0, #12]
    4482:	2b03      	cmp	r3, #3
{
    4484:	4606      	mov	r6, r0
    4486:	4688      	mov	r8, r1
	if (buf->len < sizeof(*acl)) {
    4488:	d803      	bhi.n	4492 <hci_acl_handle+0x1a>
		return -EINVAL;
    448a:	f06f 0015 	mvn.w	r0, #21
    448e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	acl = (void *)buf->data;
    4492:	f850 3f08 	ldr.w	r3, [r0, #8]!
	net_buf_pull(buf, sizeof(*acl));
    4496:	2104      	movs	r1, #4
	len = sys_le16_to_cpu(acl->len);
    4498:	885f      	ldrh	r7, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    449a:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    449c:	f00a fe7b 	bl	f196 <net_buf_simple_pull>
	if (buf->len < len) {
    44a0:	89b3      	ldrh	r3, [r6, #12]
    44a2:	42bb      	cmp	r3, r7
    44a4:	d3f1      	bcc.n	448a <hci_acl_handle+0x12>
	node_tx = ll_tx_mem_acquire();
    44a6:	f007 fd67 	bl	bf78 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    44aa:	ea4f 3915 	mov.w	r9, r5, lsr #12
	if (!node_tx) {
    44ae:	4604      	mov	r4, r0
	handle = bt_acl_handle(handle);
    44b0:	f3c5 050b 	ubfx	r5, r5, #0, #12
	if (!node_tx) {
    44b4:	b9f0      	cbnz	r0, 44f4 <hci_acl_handle+0x7c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    44b6:	4b1e      	ldr	r3, [pc, #120]	; (4530 <hci_acl_handle+0xb8>)
    44b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    44bc:	2300      	movs	r3, #0
    44be:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    44c2:	4313      	orrs	r3, r2
    44c4:	d012      	beq.n	44ec <hci_acl_handle+0x74>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    44c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    44ca:	2001      	movs	r0, #1
    44cc:	f7fd fbe2 	bl	1c94 <bt_buf_get_rx>
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    44d0:	2201      	movs	r2, #1
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    44d2:	f8c8 0000 	str.w	r0, [r8]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    44d6:	211a      	movs	r1, #26
    44d8:	f7fe fe51 	bl	317e <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    44dc:	f8d8 0000 	ldr.w	r0, [r8]
    44e0:	2101      	movs	r1, #1
    44e2:	3008      	adds	r0, #8
    44e4:	f00a fe48 	bl	f178 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    44e8:	2301      	movs	r3, #1
    44ea:	7003      	strb	r3, [r0, #0]
		return -ENOBUFS;
    44ec:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    44f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    44f4:	7903      	ldrb	r3, [r0, #4]
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    44f6:	f1b9 0f00 	cmp.w	r9, #0
    44fa:	d002      	beq.n	4502 <hci_acl_handle+0x8a>
    44fc:	f1b9 0f02 	cmp.w	r9, #2
    4500:	d113      	bne.n	452a <hci_acl_handle+0xb2>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    4502:	2202      	movs	r2, #2
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    4504:	f362 0301 	bfi	r3, r2, #0, #2
    4508:	7123      	strb	r3, [r4, #4]
	pdu_data->len = len;
    450a:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    450c:	68b1      	ldr	r1, [r6, #8]
    450e:	463a      	mov	r2, r7
    4510:	1de0      	adds	r0, r4, #7
    4512:	f7fc f871 	bl	5f8 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    4516:	4621      	mov	r1, r4
    4518:	4628      	mov	r0, r5
    451a:	f007 fd39 	bl	bf90 <ll_tx_mem_enqueue>
    451e:	2800      	cmp	r0, #0
    4520:	d0e6      	beq.n	44f0 <hci_acl_handle+0x78>
		ll_tx_mem_release(node_tx);
    4522:	4620      	mov	r0, r4
    4524:	f007 fd2e 	bl	bf84 <ll_tx_mem_release>
    4528:	e7af      	b.n	448a <hci_acl_handle+0x12>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    452a:	2201      	movs	r2, #1
    452c:	e7ea      	b.n	4504 <hci_acl_handle+0x8c>
    452e:	bf00      	nop
    4530:	20005498 	.word	0x20005498

00004534 <hci_acl_encode>:
	u8_t *data;

	pdu_data = (void *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    4534:	7a03      	ldrb	r3, [r0, #8]
    4536:	f003 0303 	and.w	r3, r3, #3
    453a:	3b01      	subs	r3, #1
    453c:	2b01      	cmp	r3, #1
{
    453e:	b570      	push	{r4, r5, r6, lr}
    4540:	4604      	mov	r4, r0
	switch (pdu_data->ll_id) {
    4542:	d83c      	bhi.n	45be <hci_acl_encode+0x8a>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    4544:	f101 0608 	add.w	r6, r1, #8
	handle = node_rx->hdr.handle;
    4548:	88c5      	ldrh	r5, [r0, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    454a:	2104      	movs	r1, #4
    454c:	4630      	mov	r0, r6
    454e:	f00a fe13 	bl	f178 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    4552:	7a23      	ldrb	r3, [r4, #8]
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
    4554:	7a61      	ldrb	r1, [r4, #9]
    4556:	8041      	strh	r1, [r0, #2]
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    4558:	f003 0303 	and.w	r3, r3, #3
    455c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    455e:	bf0c      	ite	eq
    4560:	f445 5300 	orreq.w	r3, r5, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    4564:	f445 5380 	orrne.w	r3, r5, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    4568:	8003      	strh	r3, [r0, #0]
		data = (void *)net_buf_add(buf, pdu_data->len);
    456a:	4630      	mov	r0, r6
    456c:	f00a fe04 	bl	f178 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    4570:	7a62      	ldrb	r2, [r4, #9]
    4572:	f104 010b 	add.w	r1, r4, #11
    4576:	f7fc f83f 	bl	5f8 <memcpy>
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
		if (hci_hbuf_total > 0) {
    457a:	4b15      	ldr	r3, [pc, #84]	; (45d0 <hci_acl_encode+0x9c>)
    457c:	681a      	ldr	r2, [r3, #0]
    457e:	2a00      	cmp	r2, #0
    4580:	dd24      	ble.n	45cc <hci_acl_encode+0x98>
			LL_ASSERT((hci_hbuf_sent - hci_hbuf_acked) <
    4582:	4c14      	ldr	r4, [pc, #80]	; (45d4 <hci_acl_encode+0xa0>)
    4584:	4914      	ldr	r1, [pc, #80]	; (45d8 <hci_acl_encode+0xa4>)
    4586:	6823      	ldr	r3, [r4, #0]
    4588:	6809      	ldr	r1, [r1, #0]
    458a:	1a5b      	subs	r3, r3, r1
    458c:	4293      	cmp	r3, r2
    458e:	d304      	bcc.n	459a <hci_acl_encode+0x66>
    4590:	f640 31e9 	movw	r1, #3049	; 0xbe9
    4594:	4811      	ldr	r0, [pc, #68]	; (45dc <hci_acl_encode+0xa8>)
    4596:	f7fc f98b 	bl	8b0 <bt_ctlr_assert_handle>
				  hci_hbuf_total);
			hci_hbuf_sent++;
    459a:	6823      	ldr	r3, [r4, #0]
			/* Note: This requires linear handle values starting
			 * from 0
			 */
			LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    459c:	2d0f      	cmp	r5, #15
			hci_hbuf_sent++;
    459e:	f103 0301 	add.w	r3, r3, #1
    45a2:	6023      	str	r3, [r4, #0]
			LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    45a4:	d904      	bls.n	45b0 <hci_acl_encode+0x7c>
    45a6:	f640 31ee 	movw	r1, #3054	; 0xbee
    45aa:	480c      	ldr	r0, [pc, #48]	; (45dc <hci_acl_encode+0xa8>)
    45ac:	f7fc f980 	bl	8b0 <bt_ctlr_assert_handle>
			hci_hbuf_pend[handle]++;
    45b0:	4a0b      	ldr	r2, [pc, #44]	; (45e0 <hci_acl_encode+0xac>)
    45b2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    45b6:	3301      	adds	r3, #1
    45b8:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    45bc:	bd70      	pop	{r4, r5, r6, pc}
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    45be:	f640 31f5 	movw	r1, #3061	; 0xbf5
    45c2:	4806      	ldr	r0, [pc, #24]	; (45dc <hci_acl_encode+0xa8>)
		break;
	}

}
    45c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LL_ASSERT(0);
    45c8:	f7fc b972 	b.w	8b0 <bt_ctlr_assert_handle>
    45cc:	bd70      	pop	{r4, r5, r6, pc}
    45ce:	bf00      	nop
    45d0:	20003b50 	.word	0x20003b50
    45d4:	20003b54 	.word	0x20003b54
    45d8:	20003b5c 	.word	0x20003b5c
    45dc:	0001096b 	.word	0x0001096b
    45e0:	20003b30 	.word	0x20003b30

000045e4 <hci_evt_encode>:
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    45e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45e6:	4604      	mov	r4, r0
    45e8:	b085      	sub	sp, #20
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    45ea:	7923      	ldrb	r3, [r4, #4]
	handle = node_rx->hdr.handle;
    45ec:	88e6      	ldrh	r6, [r4, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    45ee:	2b01      	cmp	r3, #1
{
    45f0:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    45f2:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    45f6:	f000 813c 	beq.w	4872 <hci_evt_encode+0x28e>
	switch (node_rx->hdr.type) {
    45fa:	3b02      	subs	r3, #2
    45fc:	2b0a      	cmp	r3, #10
    45fe:	f200 8132 	bhi.w	4866 <hci_evt_encode+0x282>
    4602:	e8df f013 	tbh	[pc, r3, lsl #1]
    4606:	000b      	.short	0x000b
    4608:	00110011 	.word	0x00110011
    460c:	00490016 	.word	0x00490016
    4610:	00910063 	.word	0x00910063
    4614:	00ce00b6 	.word	0x00ce00b6
    4618:	00fe00e3 	.word	0x00fe00e3
		le_advertising_report(pdu_data, b, buf);
    461c:	460a      	mov	r2, r1
    461e:	4621      	mov	r1, r4
    4620:	f7fe fe0a 	bl	3238 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    4624:	b005      	add	sp, #20
    4626:	bdf0      	pop	{r4, r5, r6, r7, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    4628:	460a      	mov	r2, r1
    462a:	4621      	mov	r1, r4
    462c:	f7ff f85e 	bl	36ec <le_adv_ext_report.isra.83>
    4630:	e7f8      	b.n	4624 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4632:	4bb1      	ldr	r3, [pc, #708]	; (48f8 <hci_evt_encode+0x314>)
    4634:	e9d3 2300 	ldrd	r2, r3, [r3]
    4638:	2200      	movs	r2, #0
    463a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    463e:	4313      	orrs	r3, r2
    4640:	f104 060a 	add.w	r6, r4, #10
    4644:	d007      	beq.n	4656 <hci_evt_encode+0x72>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    4646:	4bad      	ldr	r3, [pc, #692]	; (48fc <hci_evt_encode+0x318>)
    4648:	e9d3 2300 	ldrd	r2, r3, [r3]
    464c:	2300      	movs	r3, #0
    464e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4652:	4313      	orrs	r3, r2
    4654:	d10f      	bne.n	4676 <hci_evt_encode+0x92>
		addr.type = adv->tx_addr;
    4656:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    4658:	2206      	movs	r2, #6
		addr.type = adv->tx_addr;
    465a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    465e:	4631      	mov	r1, r6
    4660:	f10d 0009 	add.w	r0, sp, #9
		addr.type = adv->tx_addr;
    4664:	f88d 3008 	strb.w	r3, [sp, #8]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    4668:	f7fb ffc6 	bl	5f8 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    466c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4670:	f7ff f81e 	bl	36b0 <bt_addr_le_to_str.isra.81>
    4674:	e7d6      	b.n	4624 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    4676:	2208      	movs	r2, #8
    4678:	2113      	movs	r1, #19
    467a:	4628      	mov	r0, r5
    467c:	f7fe fda4 	bl	31c8 <meta_evt>
	sep->handle = 0;
    4680:	2300      	movs	r3, #0
    4682:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    4684:	7a23      	ldrb	r3, [r4, #8]
    4686:	f3c3 1380 	ubfx	r3, r3, #6, #1
    468a:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    468c:	2206      	movs	r2, #6
    468e:	4631      	mov	r1, r6
    4690:	3002      	adds	r0, #2
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    4692:	f7fb ffb1 	bl	5f8 <memcpy>
    4696:	e7c5      	b.n	4624 <hci_evt_encode+0x40>
			le_conn_complete(cc->status, cc, handle, buf);
    4698:	7ae7      	ldrb	r7, [r4, #11]
	if (!status) {
    469a:	b93f      	cbnz	r7, 46ac <hci_evt_encode+0xc8>
		ll_rl_crpa_set(radio_cc->peer_addr_type,
    469c:	f104 0314 	add.w	r3, r4, #20
    46a0:	22ff      	movs	r2, #255	; 0xff
    46a2:	f104 010e 	add.w	r1, r4, #14
    46a6:	7b60      	ldrb	r0, [r4, #13]
    46a8:	f009 fd34 	bl	e114 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    46ac:	4b92      	ldr	r3, [pc, #584]	; (48f8 <hci_evt_encode+0x314>)
    46ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    46b2:	2200      	movs	r2, #0
    46b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    46b8:	4313      	orrs	r3, r2
    46ba:	d0b3      	beq.n	4624 <hci_evt_encode+0x40>
    46bc:	462b      	mov	r3, r5
    46be:	4632      	mov	r2, r6
    46c0:	f104 010b 	add.w	r1, r4, #11
    46c4:	4638      	mov	r0, r7
    46c6:	f7fe ff5d 	bl	3584 <le_conn_complete.part.47>
    46ca:	e7ab      	b.n	4624 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    46cc:	4b8a      	ldr	r3, [pc, #552]	; (48f8 <hci_evt_encode+0x314>)
    46ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    46d2:	2300      	movs	r3, #0
    46d4:	f002 0210 	and.w	r2, r2, #16
    46d8:	4313      	orrs	r3, r2
    46da:	d0a3      	beq.n	4624 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    46dc:	2204      	movs	r2, #4
    46de:	2105      	movs	r1, #5
    46e0:	4628      	mov	r0, r5
    46e2:	f7fe fd4c 	bl	317e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    46e6:	2104      	movs	r1, #4
    46e8:	f105 0008 	add.w	r0, r5, #8
    46ec:	f00a fd44 	bl	f178 <net_buf_simple_add>
	ep->status = 0x00;
    46f0:	2300      	movs	r3, #0
    46f2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    46f4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    46f8:	7a23      	ldrb	r3, [r4, #8]
    46fa:	70c3      	strb	r3, [r0, #3]
	LL_ASSERT(handle < ARRAY_SIZE(hci_hbuf_pend));
    46fc:	2e0f      	cmp	r6, #15
    46fe:	d904      	bls.n	470a <hci_evt_encode+0x126>
    4700:	f44f 6123 	mov.w	r1, #2608	; 0xa30
    4704:	487e      	ldr	r0, [pc, #504]	; (4900 <hci_evt_encode+0x31c>)
    4706:	f7fc f8d3 	bl	8b0 <bt_ctlr_assert_handle>
	hci_hbuf_acked += hci_hbuf_pend[handle];
    470a:	4a7e      	ldr	r2, [pc, #504]	; (4904 <hci_evt_encode+0x320>)
    470c:	497e      	ldr	r1, [pc, #504]	; (4908 <hci_evt_encode+0x324>)
    470e:	f832 3016 	ldrh.w	r3, [r2, r6, lsl #1]
    4712:	6808      	ldr	r0, [r1, #0]
    4714:	4403      	add	r3, r0
    4716:	600b      	str	r3, [r1, #0]
	hci_hbuf_pend[handle] = 0;
    4718:	2300      	movs	r3, #0
    471a:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	conn_count--;
    471e:	4a7b      	ldr	r2, [pc, #492]	; (490c <hci_evt_encode+0x328>)
    4720:	6813      	ldr	r3, [r2, #0]
    4722:	3b01      	subs	r3, #1
    4724:	6013      	str	r3, [r2, #0]
    4726:	e77d      	b.n	4624 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4728:	4b73      	ldr	r3, [pc, #460]	; (48f8 <hci_evt_encode+0x314>)
    472a:	e9d3 2300 	ldrd	r2, r3, [r3]
    472e:	2200      	movs	r2, #0
    4730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4734:	4313      	orrs	r3, r2
    4736:	f43f af75 	beq.w	4624 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    473a:	4b70      	ldr	r3, [pc, #448]	; (48fc <hci_evt_encode+0x318>)
    473c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4740:	2300      	movs	r3, #0
    4742:	f002 0204 	and.w	r2, r2, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4746:	4313      	orrs	r3, r2
    4748:	f43f af6c 	beq.w	4624 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    474c:	2209      	movs	r2, #9
    474e:	2103      	movs	r1, #3
    4750:	4628      	mov	r0, r5
    4752:	f7fe fd39 	bl	31c8 <meta_evt>
	sep->status = radio_cu->status;
    4756:	7ae3      	ldrb	r3, [r4, #11]
    4758:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    475a:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
    475c:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    4760:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    4764:	89e3      	ldrh	r3, [r4, #14]
    4766:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    476a:	8a23      	ldrh	r3, [r4, #16]
    476c:	f8a0 3007 	strh.w	r3, [r0, #7]
    4770:	e758      	b.n	4624 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    4772:	4b61      	ldr	r3, [pc, #388]	; (48f8 <hci_evt_encode+0x314>)
    4774:	e9d3 2300 	ldrd	r2, r3, [r3]
    4778:	2200      	movs	r2, #0
    477a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    477e:	4313      	orrs	r3, r2
    4780:	f43f af50 	beq.w	4624 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    4784:	2203      	movs	r2, #3
    4786:	2130      	movs	r1, #48	; 0x30
    4788:	4628      	mov	r0, r5
    478a:	f7fe fcf8 	bl	317e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    478e:	2103      	movs	r1, #3
    4790:	f105 0008 	add.w	r0, r5, #8
    4794:	f00a fcf0 	bl	f178 <net_buf_simple_add>
	ep->status = 0x00;
    4798:	2300      	movs	r3, #0
    479a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    479c:	f8a0 6001 	strh.w	r6, [r0, #1]
    47a0:	e740      	b.n	4624 <hci_evt_encode+0x40>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    47a2:	4b5b      	ldr	r3, [pc, #364]	; (4910 <hci_evt_encode+0x32c>)
    47a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    47a8:	2300      	movs	r3, #0
    47aa:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    47ae:	4313      	orrs	r3, r2
    47b0:	f43f af38 	beq.w	4624 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    47b4:	2202      	movs	r2, #2
    47b6:	2157      	movs	r1, #87	; 0x57
    47b8:	4628      	mov	r0, r5
    47ba:	f7fe fce0 	bl	317e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    47be:	2102      	movs	r1, #2
    47c0:	f105 0008 	add.w	r0, r5, #8
    47c4:	f00a fcd8 	bl	f178 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    47c8:	8006      	strh	r6, [r0, #0]
    47ca:	e72b      	b.n	4624 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    47cc:	4b4a      	ldr	r3, [pc, #296]	; (48f8 <hci_evt_encode+0x314>)
    47ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    47d2:	2200      	movs	r2, #0
    47d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    47d8:	4313      	orrs	r3, r2
    47da:	f43f af23 	beq.w	4624 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    47de:	4b47      	ldr	r3, [pc, #284]	; (48fc <hci_evt_encode+0x318>)
    47e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    47e4:	2300      	movs	r3, #0
    47e6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    47ea:	4313      	orrs	r3, r2
    47ec:	f43f af1a 	beq.w	4624 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    47f0:	2203      	movs	r2, #3
    47f2:	2114      	movs	r1, #20
    47f4:	4628      	mov	r0, r5
    47f6:	f7fe fce7 	bl	31c8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    47fa:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    47fc:	7ae3      	ldrb	r3, [r4, #11]
    47fe:	7083      	strb	r3, [r0, #2]
    4800:	e710      	b.n	4624 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4802:	4b3d      	ldr	r3, [pc, #244]	; (48f8 <hci_evt_encode+0x314>)
    4804:	e9d3 2300 	ldrd	r2, r3, [r3]
    4808:	2200      	movs	r2, #0
    480a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    480e:	4313      	orrs	r3, r2
    4810:	f43f af08 	beq.w	4624 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    4814:	4b39      	ldr	r3, [pc, #228]	; (48fc <hci_evt_encode+0x318>)
    4816:	e9d3 2300 	ldrd	r2, r3, [r3]
    481a:	2300      	movs	r3, #0
    481c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4820:	4313      	orrs	r3, r2
    4822:	f43f aeff 	beq.w	4624 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    4826:	2205      	movs	r2, #5
    4828:	210c      	movs	r1, #12
    482a:	4628      	mov	r0, r5
    482c:	f7fe fccc 	bl	31c8 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    4830:	7ae3      	ldrb	r3, [r4, #11]
    4832:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4834:	f8a0 6001 	strh.w	r6, [r0, #1]
    4838:	7b22      	ldrb	r2, [r4, #12]
    483a:	2a00      	cmp	r2, #0
    483c:	fa92 f3a2 	rbit	r3, r2
    4840:	fab3 f383 	clz	r3, r3
    4844:	bf08      	it	eq
    4846:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    484a:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    484c:	70c3      	strb	r3, [r0, #3]
    484e:	7b62      	ldrb	r2, [r4, #13]
    4850:	fa92 f3a2 	rbit	r3, r2
    4854:	2a00      	cmp	r2, #0
    4856:	fab3 f383 	clz	r3, r3
    485a:	bf08      	it	eq
    485c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    4860:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    4862:	7103      	strb	r3, [r0, #4]
    4864:	e6de      	b.n	4624 <hci_evt_encode+0x40>
		LL_ASSERT(0);
    4866:	f640 3103 	movw	r1, #2819	; 0xb03
		LL_ASSERT(0);
    486a:	4825      	ldr	r0, [pc, #148]	; (4900 <hci_evt_encode+0x31c>)
    486c:	f7fc f820 	bl	8b0 <bt_ctlr_assert_handle>
}
    4870:	e6d8      	b.n	4624 <hci_evt_encode+0x40>
	switch (pdu_data->llctrl.opcode) {
    4872:	7ae3      	ldrb	r3, [r4, #11]
    4874:	3b03      	subs	r3, #3
    4876:	2b12      	cmp	r3, #18
    4878:	f200 80c0 	bhi.w	49fc <hci_evt_encode+0x418>
    487c:	e8df f003 	tbb	[pc, r3]
    4880:	2fbebe0a 	.word	0x2fbebe0a
    4884:	be35beb5 	.word	0xbe35beb5
    4888:	be694abe 	.word	0xbe694abe
    488c:	bebebe6d 	.word	0xbebebe6d
    4890:	95be      	.short	0x95be
    4892:	95          	.byte	0x95
    4893:	00          	.byte	0x00
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4894:	4b18      	ldr	r3, [pc, #96]	; (48f8 <hci_evt_encode+0x314>)
    4896:	e9d3 2300 	ldrd	r2, r3, [r3]
    489a:	2200      	movs	r2, #0
    489c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    48a0:	4313      	orrs	r3, r2
    48a2:	f43f aebf 	beq.w	4624 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    48a6:	4b15      	ldr	r3, [pc, #84]	; (48fc <hci_evt_encode+0x318>)
    48a8:	e9d3 2300 	ldrd	r2, r3, [r3]
    48ac:	2300      	movs	r3, #0
    48ae:	f002 0210 	and.w	r2, r2, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    48b2:	4313      	orrs	r3, r2
    48b4:	f43f aeb6 	beq.w	4624 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    48b8:	220c      	movs	r2, #12
    48ba:	2105      	movs	r1, #5
    48bc:	4628      	mov	r0, r5
    48be:	f7fe fc83 	bl	31c8 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    48c2:	2208      	movs	r2, #8
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    48c4:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    48c6:	f104 010c 	add.w	r1, r4, #12
	sep->handle = sys_cpu_to_le16(handle);
    48ca:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(u64_t));
    48ce:	f7fb fe93 	bl	5f8 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(u16_t));
    48d2:	2202      	movs	r2, #2
    48d4:	f104 0114 	add.w	r1, r4, #20
    48d8:	f105 000a 	add.w	r0, r5, #10
    48dc:	e6d9      	b.n	4692 <hci_evt_encode+0xae>
		encrypt_change(0x00, handle, buf);
    48de:	460a      	mov	r2, r1
    48e0:	2000      	movs	r0, #0
    48e2:	4631      	mov	r1, r6
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    48e4:	f7fe fdc8 	bl	3478 <encrypt_change>
    48e8:	e69c      	b.n	4624 <hci_evt_encode+0x40>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    48ea:	460b      	mov	r3, r1
    48ec:	4632      	mov	r2, r6
    48ee:	4601      	mov	r1, r0
    48f0:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    48f2:	f7fe fde1 	bl	34b8 <le_remote_feat_complete>
    48f6:	e695      	b.n	4624 <hci_evt_encode+0x40>
    48f8:	20005498 	.word	0x20005498
    48fc:	200054a0 	.word	0x200054a0
    4900:	0001096b 	.word	0x0001096b
    4904:	20003b30 	.word	0x20003b30
    4908:	20003b5c 	.word	0x20003b5c
    490c:	200002a0 	.word	0x200002a0
    4910:	20000330 	.word	0x20000330
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    4914:	4b3b      	ldr	r3, [pc, #236]	; (4a04 <hci_evt_encode+0x420>)
    4916:	e9d3 2300 	ldrd	r2, r3, [r3]
    491a:	2300      	movs	r3, #0
    491c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    4920:	4313      	orrs	r3, r2
    4922:	f43f ae7f 	beq.w	4624 <hci_evt_encode+0x40>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    4926:	2208      	movs	r2, #8
    4928:	210c      	movs	r1, #12
    492a:	4628      	mov	r0, r5
    492c:	f7fe fc27 	bl	317e <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    4930:	2108      	movs	r1, #8
    4932:	1868      	adds	r0, r5, r1
    4934:	f00a fc20 	bl	f178 <net_buf_simple_add>
	ep->status = 0x00;
    4938:	2300      	movs	r3, #0
    493a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    493c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    4940:	7b23      	ldrb	r3, [r4, #12]
    4942:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    4944:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    4948:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    494a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    494e:	80c3      	strh	r3, [r0, #6]
    4950:	e668      	b.n	4624 <hci_evt_encode+0x40>
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    4952:	460a      	mov	r2, r1
    4954:	7b20      	ldrb	r0, [r4, #12]
    4956:	4631      	mov	r1, r6
    4958:	e7c4      	b.n	48e4 <hci_evt_encode+0x300>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    495a:	4b2a      	ldr	r3, [pc, #168]	; (4a04 <hci_evt_encode+0x420>)
    495c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4960:	2200      	movs	r2, #0
    4962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4966:	4313      	orrs	r3, r2
    4968:	d007      	beq.n	497a <hci_evt_encode+0x396>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    496a:	4b27      	ldr	r3, [pc, #156]	; (4a08 <hci_evt_encode+0x424>)
    496c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4970:	2300      	movs	r3, #0
    4972:	f002 0220 	and.w	r2, r2, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4976:	4313      	orrs	r3, r2
    4978:	d108      	bne.n	498c <hci_evt_encode+0x3a8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    497a:	2300      	movs	r3, #0
    497c:	9301      	str	r3, [sp, #4]
    497e:	9300      	str	r3, [sp, #0]
    4980:	221a      	movs	r2, #26
    4982:	2102      	movs	r1, #2
    4984:	4630      	mov	r0, r6
    4986:	f007 f81d 	bl	b9c4 <ll_conn_update>
    498a:	e64b      	b.n	4624 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    498c:	220a      	movs	r2, #10
    498e:	2106      	movs	r1, #6
    4990:	4628      	mov	r0, r5
    4992:	f7fe fc19 	bl	31c8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    4996:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    4998:	89a3      	ldrh	r3, [r4, #12]
    499a:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    499c:	89e3      	ldrh	r3, [r4, #14]
    499e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    49a0:	8a23      	ldrh	r3, [r4, #16]
    49a2:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    49a4:	8a63      	ldrh	r3, [r4, #18]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    49a6:	8103      	strh	r3, [r0, #8]
    49a8:	e63c      	b.n	4624 <hci_evt_encode+0x40>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    49aa:	4b16      	ldr	r3, [pc, #88]	; (4a04 <hci_evt_encode+0x420>)
    49ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    49b0:	2200      	movs	r2, #0
    49b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    49b6:	4313      	orrs	r3, r2
    49b8:	f43f ae34 	beq.w	4624 <hci_evt_encode+0x40>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    49bc:	4b12      	ldr	r3, [pc, #72]	; (4a08 <hci_evt_encode+0x424>)
    49be:	e9d3 2300 	ldrd	r2, r3, [r3]
    49c2:	2300      	movs	r3, #0
    49c4:	f002 0240 	and.w	r2, r2, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    49c8:	4313      	orrs	r3, r2
    49ca:	f43f ae2b 	beq.w	4624 <hci_evt_encode+0x40>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    49ce:	220a      	movs	r2, #10
    49d0:	2107      	movs	r1, #7
    49d2:	4628      	mov	r0, r5
    49d4:	f7fe fbf8 	bl	31c8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    49d8:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    49da:	8a23      	ldrh	r3, [r4, #16]
    49dc:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    49de:	8a63      	ldrh	r3, [r4, #18]
    49e0:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    49e2:	89a3      	ldrh	r3, [r4, #12]
    49e4:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    49e6:	89e3      	ldrh	r3, [r4, #14]
    49e8:	e7dd      	b.n	49a6 <hci_evt_encode+0x3c2>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    49ea:	7b23      	ldrb	r3, [r4, #12]
    49ec:	2b0e      	cmp	r3, #14
    49ee:	f47f ae19 	bne.w	4624 <hci_evt_encode+0x40>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    49f2:	460b      	mov	r3, r1
    49f4:	4632      	mov	r2, r6
    49f6:	2100      	movs	r1, #0
    49f8:	201a      	movs	r0, #26
    49fa:	e77a      	b.n	48f2 <hci_evt_encode+0x30e>
		LL_ASSERT(0);
    49fc:	f640 31c8 	movw	r1, #3016	; 0xbc8
    4a00:	e733      	b.n	486a <hci_evt_encode+0x286>
    4a02:	bf00      	nop
    4a04:	20005498 	.word	0x20005498
    4a08:	200054a0 	.word	0x200054a0

00004a0c <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, u16_t handle, u8_t num)
{
    4a0c:	b570      	push	{r4, r5, r6, lr}
    4a0e:	4606      	mov	r6, r0
    4a10:	460d      	mov	r5, r1
    4a12:	4614      	mov	r4, r2
	u8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    4a14:	2113      	movs	r1, #19
    4a16:	2205      	movs	r2, #5
    4a18:	f7fe fbb1 	bl	317e <evt_create>

	ep = net_buf_add(buf, len);
    4a1c:	2105      	movs	r1, #5
    4a1e:	f106 0008 	add.w	r0, r6, #8
    4a22:	f00a fba9 	bl	f178 <net_buf_simple_add>
	ep->num_handles = num_handles;
    4a26:	2301      	movs	r3, #1
    4a28:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    4a2a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    4a2e:	f8a0 4003 	strh.w	r4, [r0, #3]
    4a32:	bd70      	pop	{r4, r5, r6, pc}

00004a34 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4a34:	7903      	ldrb	r3, [r0, #4]
    4a36:	2b01      	cmp	r3, #1
    4a38:	d006      	beq.n	4a48 <hci_get_class+0x14>
    4a3a:	3b02      	subs	r3, #2
    4a3c:	b2db      	uxtb	r3, r3
    4a3e:	2b0a      	cmp	r3, #10
    4a40:	d80a      	bhi.n	4a58 <hci_get_class+0x24>
    4a42:	4a07      	ldr	r2, [pc, #28]	; (4a60 <hci_get_class+0x2c>)
    4a44:	56d0      	ldrsb	r0, [r2, r3]
    4a46:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    4a48:	7a03      	ldrb	r3, [r0, #8]
    4a4a:	f003 0303 	and.w	r3, r3, #3
    4a4e:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    4a50:	bf0c      	ite	eq
    4a52:	2002      	moveq	r0, #2
    4a54:	2003      	movne	r0, #3
    4a56:	4770      	bx	lr
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
    4a5c:	4770      	bx	lr
    4a5e:	bf00      	nop
    4a60:	00010916 	.word	0x00010916

00004a64 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
    4a64:	4b02      	ldr	r3, [pc, #8]	; (4a70 <hci_init+0xc>)
#endif
	reset(NULL, NULL);
    4a66:	2100      	movs	r1, #0
	hbuf_signal = signal_host_buf;
    4a68:	6018      	str	r0, [r3, #0]
	reset(NULL, NULL);
    4a6a:	4608      	mov	r0, r1
    4a6c:	f7fe bea8 	b.w	37c0 <reset>
    4a70:	20000338 	.word	0x20000338

00004a74 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    4a74:	bf20      	wfe
	__SEV();
    4a76:	bf40      	sev
	__WFE();
    4a78:	bf20      	wfe
    4a7a:	4770      	bx	lr

00004a7c <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    4a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    4a7e:	4b0d      	ldr	r3, [pc, #52]	; (4ab4 <pdu_len_cmp+0x38>)
{
    4a80:	b089      	sub	sp, #36	; 0x24
    4a82:	4605      	mov	r5, r0
    4a84:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    4a86:	aa01      	add	r2, sp, #4
    4a88:	f103 0718 	add.w	r7, r3, #24
    4a8c:	6818      	ldr	r0, [r3, #0]
    4a8e:	6859      	ldr	r1, [r3, #4]
    4a90:	4614      	mov	r4, r2
    4a92:	c403      	stmia	r4!, {r0, r1}
    4a94:	3308      	adds	r3, #8
    4a96:	42bb      	cmp	r3, r7
    4a98:	4622      	mov	r2, r4
    4a9a:	d1f7      	bne.n	4a8c <pdu_len_cmp+0x10>
    4a9c:	881b      	ldrh	r3, [r3, #0]
    4a9e:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    4aa0:	ab08      	add	r3, sp, #32
    4aa2:	441d      	add	r5, r3
    4aa4:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    4aa8:	1b83      	subs	r3, r0, r6
    4aaa:	4258      	negs	r0, r3
    4aac:	4158      	adcs	r0, r3
    4aae:	b009      	add	sp, #36	; 0x24
    4ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ab2:	bf00      	nop
    4ab4:	000106e8 	.word	0x000106e8

00004ab8 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    4ab8:	6008      	str	r0, [r1, #0]
    4aba:	4770      	bx	lr

00004abc <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4abc:	b918      	cbnz	r0, 4ac6 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    4abe:	680b      	ldr	r3, [r1, #0]
    4ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4ac4:	600b      	str	r3, [r1, #0]
    4ac6:	4770      	bx	lr

00004ac8 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    4ac8:	b918      	cbnz	r0, 4ad2 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    4aca:	680b      	ldr	r3, [r1, #0]
    4acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    4ad0:	600b      	str	r3, [r1, #0]
    4ad2:	4770      	bx	lr

00004ad4 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    4ad4:	b570      	push	{r4, r5, r6, lr}
    4ad6:	1d03      	adds	r3, r0, #4
    4ad8:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    4ada:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    4adc:	429d      	cmp	r5, r3
    4ade:	d101      	bne.n	4ae4 <chan_sel_remap+0x10>
    4ae0:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    4ae2:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    4ae4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    4ae8:	2200      	movs	r2, #0
    4aea:	18a0      	adds	r0, r4, r2
    4aec:	2a08      	cmp	r2, #8
    4aee:	b2c0      	uxtb	r0, r0
    4af0:	d101      	bne.n	4af6 <chan_sel_remap+0x22>
    4af2:	4604      	mov	r4, r0
    4af4:	e7f2      	b.n	4adc <chan_sel_remap+0x8>
			if (bite & 0x01) {
    4af6:	f016 0f01 	tst.w	r6, #1
    4afa:	d003      	beq.n	4b04 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    4afc:	2900      	cmp	r1, #0
    4afe:	d0f0      	beq.n	4ae2 <chan_sel_remap+0xe>
				chan_index--;
    4b00:	3901      	subs	r1, #1
    4b02:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    4b04:	0876      	lsrs	r6, r6, #1
    4b06:	3201      	adds	r2, #1
    4b08:	e7ef      	b.n	4aea <chan_sel_remap+0x16>
	...

00004b0c <packet_rx_acquired_count_get>:
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    4b0c:	4b09      	ldr	r3, [pc, #36]	; (4b34 <packet_rx_acquired_count_get+0x28>)
    4b0e:	f893 074a 	ldrb.w	r0, [r3, #1866]	; 0x74a
	    _radio.packet_rx_last) {
    4b12:	f893 2749 	ldrb.w	r2, [r3, #1865]	; 0x749
	if (_radio.packet_rx_acquire >=
    4b16:	4290      	cmp	r0, r2
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    4b18:	bf3b      	ittet	cc
    4b1a:	f893 2749 	ldrbcc.w	r2, [r3, #1865]	; 0x749
    4b1e:	f893 3748 	ldrbcc.w	r3, [r3, #1864]	; 0x748
			_radio.packet_rx_last);
    4b22:	f893 3749 	ldrbcs.w	r3, [r3, #1865]	; 0x749
			_radio.packet_rx_last +
    4b26:	18c0      	addcc	r0, r0, r3
		return (_radio.packet_rx_acquire -
    4b28:	bf2c      	ite	cs
    4b2a:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last +
    4b2c:	1a80      	subcc	r0, r0, r2
    4b2e:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_acquire);
	}
}
    4b30:	4770      	bx	lr
    4b32:	bf00      	nop
    4b34:	20000340 	.word	0x20000340

00004b38 <packet_rx_reserve_get>:

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    4b38:	b508      	push	{r3, lr}
    4b3a:	4601      	mov	r1, r0
	if (count > packet_rx_acquired_count_get()) {
    4b3c:	f7ff ffe6 	bl	4b0c <packet_rx_acquired_count_get>
    4b40:	4288      	cmp	r0, r1
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    4b42:	bf21      	itttt	cs
    4b44:	4b04      	ldrcs	r3, [pc, #16]	; (4b58 <packet_rx_reserve_get+0x20>)
    4b46:	f893 2749 	ldrbcs.w	r2, [r3, #1865]	; 0x749
    4b4a:	f8d3 3744 	ldrcs.w	r3, [r3, #1860]	; 0x744
    4b4e:	f853 0022 	ldrcs.w	r0, [r3, r2, lsl #2]
		return 0;
    4b52:	bf38      	it	cc
    4b54:	2000      	movcc	r0, #0
}
    4b56:	bd08      	pop	{r3, pc}
    4b58:	20000340 	.word	0x20000340

00004b5c <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    4b5c:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    4b5e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    4b62:	f890 4075 	ldrb.w	r4, [r0, #117]	; 0x75
    4b66:	429c      	cmp	r4, r3
    4b68:	d15a      	bne.n	4c20 <conn_update_req+0xc4>
		return 1;
	}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
    4b6a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    4b6e:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    4b72:	428b      	cmp	r3, r1
    4b74:	d154      	bne.n	4c20 <conn_update_req+0xc4>
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    4b76:	f990 301d 	ldrsb.w	r3, [r0, #29]
    4b7a:	2b00      	cmp	r3, #0
    4b7c:	db25      	blt.n	4bca <conn_update_req+0x6e>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    4b7e:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4b80:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    4b82:	f8a0 107c 	strh.w	r1, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    4b86:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4b88:	f8a0 207a 	strh.w	r2, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4b8c:	4351      	muls	r1, r2
					      conn->supervision_reload *
    4b8e:	227d      	movs	r2, #125	; 0x7d
    4b90:	434a      	muls	r2, r1
					      125 / 1000;
    4b92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4b96:	fb92 f2f1 	sdiv	r2, r2, r1
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4b9a:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4b9e:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
		conn->llcp.conn_upd.win_size = 1;
    4ba2:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4ba4:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    4ba8:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    4baa:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    4bac:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    4bb0:	3c01      	subs	r4, #1
		conn->llcp.conn_upd.win_size = 1;
    4bb2:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    4bb6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		conn->llcp.conn_upd.is_internal = 1;
    4bba:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    4bbe:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
		conn->llcp_ack--;
    4bc2:	f880 4075 	strb.w	r4, [r0, #117]	; 0x75
						125 / 1000;
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
		conn->llcp_conn_param.cmd = 0;
		conn->llcp_conn_param.ack--;

		return 0;
    4bc6:	4618      	mov	r0, r3
    4bc8:	bd30      	pop	{r4, r5, pc}
	} else if (!conn->llcp_conn_param.disabled &&
    4bca:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    4bce:	06dc      	lsls	r4, r3, #27
    4bd0:	d428      	bmi.n	4c24 <conn_update_req+0xc8>
		   (!conn->common.fex_valid ||
    4bd2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	} else if (!conn->llcp_conn_param.disabled &&
    4bd6:	069a      	lsls	r2, r3, #26
    4bd8:	d503      	bpl.n	4be2 <conn_update_req+0x86>
		    (conn->llcp_features &
    4bda:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		   (!conn->common.fex_valid ||
    4bde:	079b      	lsls	r3, r3, #30
    4be0:	d520      	bpl.n	4c24 <conn_update_req+0xc8>
		conn->llcp_conn_param.latency = conn->latency;
    4be2:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp_conn_param.interval = conn->conn_interval;
    4be4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp_conn_param.latency = conn->latency;
    4be6:	f8a0 40c6 	strh.w	r4, [r0, #198]	; 0xc6
						conn->supervision_reload *
    4bea:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
		conn->llcp_conn_param.interval = conn->conn_interval;
    4bec:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    4bf0:	4354      	muls	r4, r2
						conn->supervision_reload *
    4bf2:	227d      	movs	r2, #125	; 0x7d
    4bf4:	4362      	muls	r2, r4
						125 / 1000;
    4bf6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    4bfa:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp_conn_param.timeout = conn->conn_interval *
    4bfe:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
    4c02:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.status = 0;
    4c06:	2300      	movs	r3, #0
		conn->llcp_conn_param.cmd = 0;
    4c08:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
    4c0c:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_conn_param.ack--;
    4c10:	3901      	subs	r1, #1
		conn->llcp_conn_param.status = 0;
    4c12:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.cmd = 0;
    4c16:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
    4c1a:	f880 10c1 	strb.w	r1, [r0, #193]	; 0xc1
    4c1e:	e7d2      	b.n	4bc6 <conn_update_req+0x6a>
		return 1;
    4c20:	2001      	movs	r0, #1
    4c22:	bd30      	pop	{r4, r5, pc}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    4c24:	2002      	movs	r0, #2
}
    4c26:	bd30      	pop	{r4, r5, pc}

00004c28 <ticker_op_latency_cancelled>:
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
    4c28:	b510      	push	{r4, lr}
    4c2a:	460c      	mov	r4, r1
	struct connection *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    4c2c:	b120      	cbz	r0, 4c38 <ticker_op_latency_cancelled+0x10>
    4c2e:	f243 117c 	movw	r1, #12668	; 0x317c
    4c32:	4805      	ldr	r0, [pc, #20]	; (4c48 <ticker_op_latency_cancelled+0x20>)
    4c34:	f7fb fe3c 	bl	8b0 <bt_ctlr_assert_handle>

	conn->slave.latency_cancel = 0;
    4c38:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    4c3c:	f36f 0341 	bfc	r3, #1, #1
    4c40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    4c44:	bd10      	pop	{r4, pc}
    4c46:	bf00      	nop
    4c48:	000109b4 	.word	0x000109b4

00004c4c <packet_rx_allocate>:
{
    4c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    4c50:	4d22      	ldr	r5, [pc, #136]	; (4cdc <packet_rx_allocate+0x90>)
	acquire = _radio.packet_rx_acquire + 1;
    4c52:	f895 474a 	ldrb.w	r4, [r5, #1866]	; 0x74a
    4c56:	f895 975c 	ldrb.w	r9, [r5, #1884]	; 0x75c
	if (acquire == _radio.packet_rx_count) {
    4c5a:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
	acquire = _radio.packet_rx_acquire + 1;
    4c5e:	3401      	adds	r4, #1
    4c60:	4581      	cmp	r9, r0
    4c62:	b2e4      	uxtb	r4, r4
    4c64:	bf28      	it	cs
    4c66:	4681      	movcs	r9, r0
		link = mem_acquire(&_radio.link_rx_free);
    4c68:	f505 67ea 	add.w	r7, r5, #1872	; 0x750
		acquire = 0;
    4c6c:	42a3      	cmp	r3, r4
    4c6e:	bf08      	it	eq
    4c70:	2400      	moveq	r4, #0
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4c72:	f505 68e7 	add.w	r8, r5, #1848	; 0x738
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    4c76:	f1b9 0f00 	cmp.w	r9, #0
    4c7a:	d003      	beq.n	4c84 <packet_rx_allocate+0x38>
    4c7c:	f895 3749 	ldrb.w	r3, [r5, #1865]	; 0x749
    4c80:	429c      	cmp	r4, r3
    4c82:	d101      	bne.n	4c88 <packet_rx_allocate+0x3c>
    4c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    4c88:	4638      	mov	r0, r7
    4c8a:	f7fd f860 	bl	1d4e <mem_acquire>
		if (!link) {
    4c8e:	4606      	mov	r6, r0
    4c90:	2800      	cmp	r0, #0
    4c92:	d0f7      	beq.n	4c84 <packet_rx_allocate+0x38>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    4c94:	4640      	mov	r0, r8
    4c96:	f7fd f85a 	bl	1d4e <mem_acquire>
		if (!node_rx) {
    4c9a:	b928      	cbnz	r0, 4ca8 <packet_rx_allocate+0x5c>
			mem_release(link, &_radio.link_rx_free);
    4c9c:	4630      	mov	r0, r6
    4c9e:	4910      	ldr	r1, [pc, #64]	; (4ce0 <packet_rx_allocate+0x94>)
}
    4ca0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    4ca4:	f7fd b86d 	b.w	1d82 <mem_release>
		node_rx->hdr.onion.link = link;
    4ca8:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    4caa:	f895 274a 	ldrb.w	r2, [r5, #1866]	; 0x74a
    4cae:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
    4cb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    4cb6:	f885 474a 	strb.w	r4, [r5, #1866]	; 0x74a
		if (acquire == _radio.packet_rx_count) {
    4cba:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
		acquire = _radio.packet_rx_acquire + 1;
    4cbe:	3401      	adds	r4, #1
    4cc0:	b2e4      	uxtb	r4, r4
			acquire = 0;
    4cc2:	42a3      	cmp	r3, r4
    4cc4:	bf08      	it	eq
    4cc6:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    4cc8:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    4ccc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    4cd0:	3b01      	subs	r3, #1
    4cd2:	f885 375c 	strb.w	r3, [r5, #1884]	; 0x75c
    4cd6:	fa5f f989 	uxtb.w	r9, r9
    4cda:	e7cc      	b.n	4c76 <packet_rx_allocate+0x2a>
    4cdc:	20000340 	.word	0x20000340
    4ce0:	20000a90 	.word	0x20000a90

00004ce4 <common_init>:
{
    4ce4:	b538      	push	{r3, r4, r5, lr}
	if (_radio.connection_count) {
    4ce6:	4c35      	ldr	r4, [pc, #212]	; (4dbc <common_init+0xd8>)
    4ce8:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    4cec:	2a00      	cmp	r2, #0
    4cee:	d061      	beq.n	4db4 <common_init+0xd0>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4cf0:	f204 7314 	addw	r3, r4, #1812	; 0x714
    4cf4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4cf8:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    4cfc:	f7fd f800 	bl	1d00 <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    4d00:	4b2f      	ldr	r3, [pc, #188]	; (4dc0 <common_init+0xdc>)
    4d02:	f894 2742 	ldrb.w	r2, [r4, #1858]	; 0x742
    4d06:	f8b4 1740 	ldrh.w	r1, [r4, #1856]	; 0x740
    4d0a:	f8d4 0734 	ldr.w	r0, [r4, #1844]	; 0x734
    4d0e:	f7fc fff7 	bl	1d00 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    4d12:	f894 1748 	ldrb.w	r1, [r4, #1864]	; 0x748
    4d16:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    4d1a:	4b2a      	ldr	r3, [pc, #168]	; (4dc4 <common_init+0xe0>)
    4d1c:	f8d4 074c 	ldr.w	r0, [r4, #1868]	; 0x74c
    4d20:	440a      	add	r2, r1
    4d22:	2108      	movs	r1, #8
    4d24:	f7fc ffec 	bl	1d00 <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4d28:	4b27      	ldr	r3, [pc, #156]	; (4dc8 <common_init+0xe4>)
    4d2a:	f8d4 0760 	ldr.w	r0, [r4, #1888]	; 0x760
    4d2e:	2202      	movs	r2, #2
    4d30:	2124      	movs	r1, #36	; 0x24
    4d32:	f7fc ffe5 	bl	1d00 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4d36:	f894 277c 	ldrb.w	r2, [r4, #1916]	; 0x77c
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4d3a:	4b24      	ldr	r3, [pc, #144]	; (4dcc <common_init+0xe8>)
    4d3c:	f8b4 1770 	ldrh.w	r1, [r4, #1904]	; 0x770
    4d40:	f8d4 0768 	ldr.w	r0, [r4, #1896]	; 0x768
    4d44:	3a01      	subs	r2, #1
    4d46:	b292      	uxth	r2, r2
    4d48:	f7fc ffda 	bl	1d00 <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    4d4c:	481d      	ldr	r0, [pc, #116]	; (4dc4 <common_init+0xe0>)
    4d4e:	f7fc fffe 	bl	1d4e <mem_acquire>
	LL_ASSERT(link);
    4d52:	4605      	mov	r5, r0
    4d54:	b920      	cbnz	r0, 4d60 <common_init+0x7c>
    4d56:	f240 21a9 	movw	r1, #681	; 0x2a9
    4d5a:	481d      	ldr	r0, [pc, #116]	; (4dd0 <common_init+0xec>)
    4d5c:	f7fb fda8 	bl	8b0 <bt_ctlr_assert_handle>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4d60:	4a1c      	ldr	r2, [pc, #112]	; (4dd4 <common_init+0xf0>)
    4d62:	4628      	mov	r0, r5
    4d64:	1f11      	subs	r1, r2, #4
    4d66:	f7fd f849 	bl	1dfc <memq_init>
	_radio.advertiser.chan_map = 0x07;
    4d6a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    4d6e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    4d72:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[4] = 0x1F;
    4d76:	231f      	movs	r3, #31
    4d78:	f884 3726 	strb.w	r3, [r4, #1830]	; 0x726
	_radio.data_chan_count = 37;
    4d7c:	2325      	movs	r3, #37	; 0x25
    4d7e:	f884 3727 	strb.w	r3, [r4, #1831]	; 0x727
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4d82:	231b      	movs	r3, #27
    4d84:	f8a4 372a 	strh.w	r3, [r4, #1834]	; 0x72a
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4d88:	f44f 73a4 	mov.w	r3, #328	; 0x148
	_radio.data_chan_map[0] = 0xFF;
    4d8c:	20ff      	movs	r0, #255	; 0xff
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4d8e:	f8a4 372c 	strh.w	r3, [r4, #1836]	; 0x72c
	_radio.default_phy_tx |= BIT(2);
    4d92:	2307      	movs	r3, #7
	_radio.data_chan_map[0] = 0xFF;
    4d94:	f884 0722 	strb.w	r0, [r4, #1826]	; 0x722
	_radio.data_chan_map[1] = 0xFF;
    4d98:	f884 0723 	strb.w	r0, [r4, #1827]	; 0x723
	_radio.data_chan_map[2] = 0xFF;
    4d9c:	f884 0724 	strb.w	r0, [r4, #1828]	; 0x724
	_radio.data_chan_map[3] = 0xFF;
    4da0:	f884 0725 	strb.w	r0, [r4, #1829]	; 0x725
	_radio.default_phy_tx |= BIT(2);
    4da4:	f8a4 372e 	strh.w	r3, [r4, #1838]	; 0x72e
	_radio.default_phy_rx |= BIT(2);
    4da8:	f8a4 3730 	strh.w	r3, [r4, #1840]	; 0x730
}
    4dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	packet_rx_allocate(0xFF);
    4db0:	f7ff bf4c 	b.w	4c4c <packet_rx_allocate>
		_radio.conn_free = NULL;
    4db4:	f8c4 2714 	str.w	r2, [r4, #1812]	; 0x714
    4db8:	e7a2      	b.n	4d00 <common_init+0x1c>
    4dba:	bf00      	nop
    4dbc:	20000340 	.word	0x20000340
    4dc0:	20000a78 	.word	0x20000a78
    4dc4:	20000a90 	.word	0x20000a90
    4dc8:	20000aa4 	.word	0x20000aa4
    4dcc:	20000aac 	.word	0x20000aac
    4dd0:	000109b4 	.word	0x000109b4
    4dd4:	20000a98 	.word	0x20000a98

00004dd8 <tx_cmplt_get>:
{
    4dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_first = *first;
    4ddc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    4dde:	4294      	cmp	r4, r2
{
    4de0:	4681      	mov	r9, r0
    4de2:	460f      	mov	r7, r1
    4de4:	4690      	mov	r8, r2
	if (_first == last) {
    4de6:	d03d      	beq.n	4e64 <tx_cmplt_get+0x8c>
	*handle = _radio.pkt_release[_first].handle;
    4de8:	4e1f      	ldr	r6, [pc, #124]	; (4e68 <tx_cmplt_get+0x90>)
    4dea:	f8d6 3778 	ldr.w	r3, [r6, #1912]	; 0x778
    4dee:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    4df2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    4df4:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)2;
    4df6:	f04f 0b02 	mov.w	fp, #2
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    4dfa:	f206 7a6c 	addw	sl, r6, #1900	; 0x76c
		if (*handle != _radio.pkt_release[_first].handle) {
    4dfe:	b222      	sxth	r2, r4
    4e00:	f8d6 0778 	ldr.w	r0, [r6, #1912]	; 0x778
    4e04:	f8b9 e000 	ldrh.w	lr, [r9]
    4e08:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    4e0c:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    4e10:	4596      	cmp	lr, r2
    4e12:	d120      	bne.n	4e56 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    4e14:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    4e16:	2801      	cmp	r0, #1
    4e18:	f020 0303 	bic.w	r3, r0, #3
    4e1c:	d90a      	bls.n	4e34 <tx_cmplt_get+0x5c>
    4e1e:	b1f3      	cbz	r3, 4e5e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4e20:	1d02      	adds	r2, r0, #4
    4e22:	d01c      	beq.n	4e5e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4e24:	7942      	ldrb	r2, [r0, #5]
    4e26:	b1d2      	cbz	r2, 4e5e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    4e28:	7902      	ldrb	r2, [r0, #4]
    4e2a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4e2e:	3a01      	subs	r2, #1
    4e30:	2a01      	cmp	r2, #1
    4e32:	d814      	bhi.n	4e5e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    4e34:	2201      	movs	r2, #1
			cmplt++;
    4e36:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    4e38:	604a      	str	r2, [r1, #4]
			cmplt++;
    4e3a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    4e3c:	b113      	cbz	r3, 4e44 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    4e3e:	4651      	mov	r1, sl
    4e40:	f7fc ff9f 	bl	1d82 <mem_release>
		_first = _first + 1;
    4e44:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    4e46:	f896 277c 	ldrb.w	r2, [r6, #1916]	; 0x77c
		_first = _first + 1;
    4e4a:	b2e4      	uxtb	r4, r4
			_first = 0;
    4e4c:	42a2      	cmp	r2, r4
    4e4e:	bf08      	it	eq
    4e50:	2400      	moveq	r4, #0
	} while (_first != last);
    4e52:	4544      	cmp	r4, r8
    4e54:	d1d3      	bne.n	4dfe <tx_cmplt_get+0x26>
	*first = _first;
    4e56:	703c      	strb	r4, [r7, #0]
}
    4e58:	4628      	mov	r0, r5
    4e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    4e5e:	f8c1 b004 	str.w	fp, [r1, #4]
    4e62:	e7eb      	b.n	4e3c <tx_cmplt_get+0x64>
		return 0;
    4e64:	2500      	movs	r5, #0
    4e66:	e7f7      	b.n	4e58 <tx_cmplt_get+0x80>
    4e68:	20000340 	.word	0x20000340

00004e6c <connection_get>:
{
    4e6c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    4e6e:	4b09      	ldr	r3, [pc, #36]	; (4e94 <connection_get+0x28>)
    4e70:	f893 2718 	ldrb.w	r2, [r3, #1816]	; 0x718
    4e74:	4282      	cmp	r2, r0
{
    4e76:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    4e78:	d90a      	bls.n	4e90 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    4e7a:	4602      	mov	r2, r0
    4e7c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4e80:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    4e84:	f7fc ff98 	bl	1db8 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    4e88:	b110      	cbz	r0, 4e90 <connection_get+0x24>
    4e8a:	8c03      	ldrh	r3, [r0, #32]
    4e8c:	42a3      	cmp	r3, r4
    4e8e:	d000      	beq.n	4e92 <connection_get+0x26>
	return 0;
    4e90:	2000      	movs	r0, #0
}
    4e92:	bd10      	pop	{r4, pc}
    4e94:	20000340 	.word	0x20000340

00004e98 <role_disable>:
{
    4e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e9c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4e9e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    4ea0:	2805      	cmp	r0, #5
{
    4ea2:	4605      	mov	r5, r0
    4ea4:	4688      	mov	r8, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4ea6:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    4ea8:	d00e      	beq.n	4ec8 <role_disable+0x30>
    4eaa:	2806      	cmp	r0, #6
    4eac:	f000 80a0 	beq.w	4ff0 <role_disable+0x158>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4eb0:	f240 80a4 	bls.w	4ffc <role_disable+0x164>
			conn_handle = ticker_id_primary -
    4eb4:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    4eb6:	b280      	uxth	r0, r0
    4eb8:	f7ff ffd8 	bl	4e6c <connection_get>
			if (!conn) {
    4ebc:	2800      	cmp	r0, #0
    4ebe:	f000 8127 	beq.w	5110 <role_disable+0x278>
			ticks_active_to_start =
    4ec2:	e890 00c0 	ldmia.w	r0, {r6, r7}
    4ec6:	e00f      	b.n	4ee8 <role_disable+0x50>
		ticks_xtal_to_start =
    4ec8:	4b92      	ldr	r3, [pc, #584]	; (5114 <role_disable+0x27c>)
    4eca:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    4ecc:	69df      	ldr	r7, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4ece:	ab02      	add	r3, sp, #8
    4ed0:	9300      	str	r3, [sp, #0]
    4ed2:	460a      	mov	r2, r1
    4ed4:	4b90      	ldr	r3, [pc, #576]	; (5118 <role_disable+0x280>)
    4ed6:	2103      	movs	r1, #3
    4ed8:	2000      	movs	r0, #0
    4eda:	f7fd fe53 	bl	2b84 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4ede:	2802      	cmp	r0, #2
    4ee0:	d079      	beq.n	4fd6 <role_disable+0x13e>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4ee2:	9b02      	ldr	r3, [sp, #8]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d17a      	bne.n	4fde <role_disable+0x146>
	LL_ASSERT(!_radio.ticker_id_stop);
    4ee8:	4c8a      	ldr	r4, [pc, #552]	; (5114 <role_disable+0x27c>)
    4eea:	7ca3      	ldrb	r3, [r4, #18]
    4eec:	b123      	cbz	r3, 4ef8 <role_disable+0x60>
    4eee:	f642 21f8 	movw	r1, #11000	; 0x2af8
    4ef2:	488a      	ldr	r0, [pc, #552]	; (511c <role_disable+0x284>)
    4ef4:	f7fb fcdc 	bl	8b0 <bt_ctlr_assert_handle>
	ret_cb = TICKER_STATUS_BUSY;
    4ef8:	ab06      	add	r3, sp, #24
    4efa:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    4efc:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    4efe:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4f02:	2103      	movs	r1, #3
    4f04:	9300      	str	r3, [sp, #0]
    4f06:	462a      	mov	r2, r5
    4f08:	4b83      	ldr	r3, [pc, #524]	; (5118 <role_disable+0x280>)
    4f0a:	2000      	movs	r0, #0
    4f0c:	f7fd fe3a 	bl	2b84 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4f10:	2802      	cmp	r0, #2
    4f12:	d07b      	beq.n	500c <role_disable+0x174>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    4f14:	9b02      	ldr	r3, [sp, #8]
    4f16:	2b00      	cmp	r3, #0
    4f18:	f040 80ee 	bne.w	50f8 <role_disable+0x260>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    4f1c:	7c23      	ldrb	r3, [r4, #16]
    4f1e:	429d      	cmp	r5, r3
    4f20:	d003      	beq.n	4f2a <role_disable+0x92>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    4f22:	7c63      	ldrb	r3, [r4, #17]
    4f24:	429d      	cmp	r5, r3
    4f26:	f040 80e3 	bne.w	50f0 <role_disable+0x258>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4f2a:	ab06      	add	r3, sp, #24
    4f2c:	2202      	movs	r2, #2
    4f2e:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4f32:	2200      	movs	r2, #0
    4f34:	9300      	str	r3, [sp, #0]
    4f36:	2103      	movs	r1, #3
    4f38:	4b77      	ldr	r3, [pc, #476]	; (5118 <role_disable+0x280>)
    4f3a:	4610      	mov	r0, r2
    4f3c:	f7fd fe22 	bl	2b84 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4f40:	2802      	cmp	r0, #2
    4f42:	d10c      	bne.n	4f5e <role_disable+0xc6>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4f44:	2201      	movs	r2, #1
    4f46:	4611      	mov	r1, r2
    4f48:	2003      	movs	r0, #3
    4f4a:	f7fc ffa3 	bl	1e94 <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    4f4e:	9b03      	ldr	r3, [sp, #12]
    4f50:	2b02      	cmp	r3, #2
    4f52:	d104      	bne.n	4f5e <role_disable+0xc6>
    4f54:	f642 213c 	movw	r1, #10812	; 0x2a3c
    4f58:	4870      	ldr	r0, [pc, #448]	; (511c <role_disable+0x284>)
    4f5a:	f7fb fca9 	bl	8b0 <bt_ctlr_assert_handle>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4f5e:	9b03      	ldr	r3, [sp, #12]
    4f60:	2b00      	cmp	r3, #0
    4f62:	f040 8089 	bne.w	5078 <role_disable+0x1e0>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4f66:	2302      	movs	r3, #2
    4f68:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    4f6a:	7c23      	ldrb	r3, [r4, #16]
    4f6c:	b923      	cbnz	r3, 4f78 <role_disable+0xe0>
    4f6e:	f642 2146 	movw	r1, #10822	; 0x2a46
    4f72:	486a      	ldr	r0, [pc, #424]	; (511c <role_disable+0x284>)
    4f74:	f7fb fc9c 	bl	8b0 <bt_ctlr_assert_handle>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4f78:	ab04      	add	r3, sp, #16
		_radio.ticker_id_prepare = 0;
    4f7a:	2000      	movs	r0, #0
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4f7c:	9300      	str	r3, [sp, #0]
    4f7e:	2201      	movs	r2, #1
    4f80:	4b65      	ldr	r3, [pc, #404]	; (5118 <role_disable+0x280>)
		_radio.ticker_id_prepare = 0;
    4f82:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4f84:	2103      	movs	r1, #3
    4f86:	f7fd fdfd 	bl	2b84 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4f8a:	2802      	cmp	r0, #2
    4f8c:	d10c      	bne.n	4fa8 <role_disable+0x110>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4f8e:	2201      	movs	r2, #1
    4f90:	4611      	mov	r1, r2
    4f92:	2003      	movs	r0, #3
    4f94:	f7fc ff7e 	bl	1e94 <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    4f98:	9b04      	ldr	r3, [sp, #16]
    4f9a:	2b02      	cmp	r3, #2
    4f9c:	d104      	bne.n	4fa8 <role_disable+0x110>
    4f9e:	f642 2155 	movw	r1, #10837	; 0x2a55
    4fa2:	485e      	ldr	r0, [pc, #376]	; (511c <role_disable+0x284>)
    4fa4:	f7fb fc84 	bl	8b0 <bt_ctlr_assert_handle>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4fa8:	9a04      	ldr	r2, [sp, #16]
    4faa:	2a00      	cmp	r2, #0
    4fac:	d147      	bne.n	503e <role_disable+0x1a6>
			ticks_xtal_to_start &= ~XON_BITMASK;
    4fae:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    4fb2:	42b7      	cmp	r7, r6
    4fb4:	d939      	bls.n	502a <role_disable+0x192>
				ret = mayfly_enqueue(
    4fb6:	4b5a      	ldr	r3, [pc, #360]	; (5120 <role_disable+0x288>)
    4fb8:	4611      	mov	r1, r2
    4fba:	2003      	movs	r0, #3
    4fbc:	f7fc ff92 	bl	1ee4 <mayfly_enqueue>
				LL_ASSERT(!ret);
    4fc0:	2800      	cmp	r0, #0
    4fc2:	f000 8095 	beq.w	50f0 <role_disable+0x258>
    4fc6:	f642 2169 	movw	r1, #10857	; 0x2a69
		LL_ASSERT(0);
    4fca:	4854      	ldr	r0, [pc, #336]	; (511c <role_disable+0x284>)
    4fcc:	f7fb fc70 	bl	8b0 <bt_ctlr_assert_handle>
    4fd0:	e08e      	b.n	50f0 <role_disable+0x258>
				cpu_sleep();
    4fd2:	f7ff fd4f 	bl	4a74 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4fd6:	9b02      	ldr	r3, [sp, #8]
    4fd8:	2b02      	cmp	r3, #2
    4fda:	d0fa      	beq.n	4fd2 <role_disable+0x13a>
    4fdc:	e781      	b.n	4ee2 <role_disable+0x4a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4fde:	9b02      	ldr	r3, [sp, #8]
    4fe0:	2b01      	cmp	r3, #1
    4fe2:	d081      	beq.n	4ee8 <role_disable+0x50>
    4fe4:	f642 21d9 	movw	r1, #10969	; 0x2ad9
    4fe8:	484c      	ldr	r0, [pc, #304]	; (511c <role_disable+0x284>)
    4fea:	f7fb fc61 	bl	8b0 <bt_ctlr_assert_handle>
    4fee:	e77b      	b.n	4ee8 <role_disable+0x50>
		ticks_xtal_to_start =
    4ff0:	4b48      	ldr	r3, [pc, #288]	; (5114 <role_disable+0x27c>)
    4ff2:	f8d3 663c 	ldr.w	r6, [r3, #1596]	; 0x63c
		ticks_active_to_start =
    4ff6:	f8d3 7640 	ldr.w	r7, [r3, #1600]	; 0x640
		break;
    4ffa:	e775      	b.n	4ee8 <role_disable+0x50>
			LL_ASSERT(0);
    4ffc:	f642 21f3 	movw	r1, #10995	; 0x2af3
    5000:	4846      	ldr	r0, [pc, #280]	; (511c <role_disable+0x284>)
	u32_t ticks_xtal_to_start = 0;
    5002:	2600      	movs	r6, #0
			LL_ASSERT(0);
    5004:	f7fb fc54 	bl	8b0 <bt_ctlr_assert_handle>
	u32_t ticks_active_to_start = 0;
    5008:	4637      	mov	r7, r6
    500a:	e76d      	b.n	4ee8 <role_disable+0x50>
		if (_radio.ticker_id_event == ticker_id_primary) {
    500c:	7c63      	ldrb	r3, [r4, #17]
    500e:	429d      	cmp	r5, r3
    5010:	d104      	bne.n	501c <role_disable+0x184>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    5012:	2201      	movs	r2, #1
    5014:	4611      	mov	r1, r2
    5016:	2003      	movs	r0, #3
    5018:	f7fc ff3c 	bl	1e94 <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    501c:	9b02      	ldr	r3, [sp, #8]
    501e:	2b02      	cmp	r3, #2
    5020:	f47f af78 	bne.w	4f14 <role_disable+0x7c>
			cpu_sleep();
    5024:	f7ff fd26 	bl	4a74 <cpu_sleep>
    5028:	e7f8      	b.n	501c <role_disable+0x184>
				ret = mayfly_enqueue(
    502a:	4b3e      	ldr	r3, [pc, #248]	; (5124 <role_disable+0x28c>)
    502c:	4611      	mov	r1, r2
    502e:	2003      	movs	r0, #3
    5030:	f7fc ff58 	bl	1ee4 <mayfly_enqueue>
				LL_ASSERT(!ret);
    5034:	2800      	cmp	r0, #0
    5036:	d05b      	beq.n	50f0 <role_disable+0x258>
    5038:	f642 2170 	movw	r1, #10864	; 0x2a70
    503c:	e7c5      	b.n	4fca <role_disable+0x132>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    503e:	9b04      	ldr	r3, [sp, #16]
    5040:	2b01      	cmp	r3, #1
    5042:	d116      	bne.n	5072 <role_disable+0x1da>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    5044:	2200      	movs	r2, #0
    5046:	4b36      	ldr	r3, [pc, #216]	; (5120 <role_disable+0x288>)
    5048:	4611      	mov	r1, r2
    504a:	2003      	movs	r0, #3
    504c:	f7fc ff4a 	bl	1ee4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5050:	b120      	cbz	r0, 505c <role_disable+0x1c4>
    5052:	f642 2179 	movw	r1, #10873	; 0x2a79
    5056:	4831      	ldr	r0, [pc, #196]	; (511c <role_disable+0x284>)
    5058:	f7fb fc2a 	bl	8b0 <bt_ctlr_assert_handle>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    505c:	2200      	movs	r2, #0
    505e:	4b31      	ldr	r3, [pc, #196]	; (5124 <role_disable+0x28c>)
    5060:	4611      	mov	r1, r2
    5062:	2003      	movs	r0, #3
    5064:	f7fc ff3e 	bl	1ee4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    5068:	2800      	cmp	r0, #0
    506a:	d041      	beq.n	50f0 <role_disable+0x258>
    506c:	f642 217f 	movw	r1, #10879	; 0x2a7f
    5070:	e7ab      	b.n	4fca <role_disable+0x132>
			LL_ASSERT(0);
    5072:	f642 2181 	movw	r1, #10881	; 0x2a81
    5076:	e7a8      	b.n	4fca <role_disable+0x132>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    5078:	9d03      	ldr	r5, [sp, #12]
    507a:	2d01      	cmp	r5, #1
    507c:	d145      	bne.n	510a <role_disable+0x272>
		if (ticker_id_stop != TICKER_NULL) {
    507e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    5082:	d023      	beq.n	50cc <role_disable+0x234>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    5084:	ab06      	add	r3, sp, #24
    5086:	2202      	movs	r2, #2
    5088:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    508c:	2103      	movs	r1, #3
    508e:	9300      	str	r3, [sp, #0]
    5090:	4642      	mov	r2, r8
    5092:	4b21      	ldr	r3, [pc, #132]	; (5118 <role_disable+0x280>)
    5094:	2000      	movs	r0, #0
    5096:	f7fd fd75 	bl	2b84 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    509a:	2802      	cmp	r0, #2
    509c:	d10c      	bne.n	50b8 <role_disable+0x220>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    509e:	462a      	mov	r2, r5
    50a0:	4629      	mov	r1, r5
    50a2:	2003      	movs	r0, #3
    50a4:	f7fc fef6 	bl	1e94 <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    50a8:	9b05      	ldr	r3, [sp, #20]
    50aa:	2b02      	cmp	r3, #2
    50ac:	d104      	bne.n	50b8 <role_disable+0x220>
    50ae:	f642 219a 	movw	r1, #10906	; 0x2a9a
    50b2:	481a      	ldr	r0, [pc, #104]	; (511c <role_disable+0x284>)
    50b4:	f7fb fbfc 	bl	8b0 <bt_ctlr_assert_handle>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    50b8:	9b05      	ldr	r3, [sp, #20]
    50ba:	b13b      	cbz	r3, 50cc <role_disable+0x234>
    50bc:	9b05      	ldr	r3, [sp, #20]
    50be:	2b01      	cmp	r3, #1
    50c0:	d004      	beq.n	50cc <role_disable+0x234>
    50c2:	f642 219e 	movw	r1, #10910	; 0x2a9e
    50c6:	4815      	ldr	r0, [pc, #84]	; (511c <role_disable+0x284>)
    50c8:	f7fb fbf2 	bl	8b0 <bt_ctlr_assert_handle>
		if (_radio.role != ROLE_NONE) {
    50cc:	7ce3      	ldrb	r3, [r4, #19]
    50ce:	b17b      	cbz	r3, 50f0 <role_disable+0x258>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    50d0:	4b15      	ldr	r3, [pc, #84]	; (5128 <role_disable+0x290>)
    50d2:	2204      	movs	r2, #4
    50d4:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    50d6:	2200      	movs	r2, #0
    50d8:	4611      	mov	r1, r2
    50da:	2003      	movs	r0, #3
    50dc:	f7fc ff02 	bl	1ee4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    50e0:	b120      	cbz	r0, 50ec <role_disable+0x254>
    50e2:	f642 21ae 	movw	r1, #10926	; 0x2aae
    50e6:	480d      	ldr	r0, [pc, #52]	; (511c <role_disable+0x284>)
    50e8:	f7fb fbe2 	bl	8b0 <bt_ctlr_assert_handle>
			while (_radio.role != ROLE_NONE) {
    50ec:	7ce3      	ldrb	r3, [r4, #19]
    50ee:	b94b      	cbnz	r3, 5104 <role_disable+0x26c>
	if (!_radio.ticker_id_stop) {
    50f0:	7ca3      	ldrb	r3, [r4, #18]
    50f2:	b90b      	cbnz	r3, 50f8 <role_disable+0x260>
		ret_cb = TICKER_STATUS_FAILURE;
    50f4:	2301      	movs	r3, #1
    50f6:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    50f8:	2300      	movs	r3, #0
    50fa:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    50fc:	9802      	ldr	r0, [sp, #8]
}
    50fe:	b006      	add	sp, #24
    5100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    5104:	f7ff fcb6 	bl	4a74 <cpu_sleep>
    5108:	e7f0      	b.n	50ec <role_disable+0x254>
		LL_ASSERT(0);
    510a:	f642 21b6 	movw	r1, #10934	; 0x2ab6
    510e:	e75c      	b.n	4fca <role_disable+0x132>
				return 1;
    5110:	2001      	movs	r0, #1
    5112:	e7f4      	b.n	50fe <role_disable+0x266>
    5114:	20000340 	.word	0x20000340
    5118:	00004ab9 	.word	0x00004ab9
    511c:	000109b4 	.word	0x000109b4
    5120:	200054e8 	.word	0x200054e8
    5124:	200055a8 	.word	0x200055a8
    5128:	20005518 	.word	0x20005518

0000512c <mayfly_radio_stop>:
{
    512c:	b510      	push	{r4, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
    512e:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    5130:	1f23      	subs	r3, r4, #4
    5132:	2b01      	cmp	r3, #1
    5134:	d904      	bls.n	5140 <mayfly_radio_stop+0x14>
    5136:	f241 6191 	movw	r1, #5777	; 0x1691
    513a:	4809      	ldr	r0, [pc, #36]	; (5160 <mayfly_radio_stop+0x34>)
    513c:	f7fb fbb8 	bl	8b0 <bt_ctlr_assert_handle>
	radio_used = ((_radio.state != STATE_NONE) &&
    5140:	4a08      	ldr	r2, [pc, #32]	; (5164 <mayfly_radio_stop+0x38>)
    5142:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    5144:	b13b      	cbz	r3, 5156 <mayfly_radio_stop+0x2a>
	radio_used = ((_radio.state != STATE_NONE) &&
    5146:	3b04      	subs	r3, #4
    5148:	2b01      	cmp	r3, #1
    514a:	d904      	bls.n	5156 <mayfly_radio_stop+0x2a>
			_radio.state = state;
    514c:	7514      	strb	r4, [r2, #20]
}
    514e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
    5152:	f009 bb89 	b.w	e868 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    5156:	f009 fbb9 	bl	e8cc <radio_is_idle>
    515a:	2800      	cmp	r0, #0
    515c:	d0f7      	beq.n	514e <mayfly_radio_stop+0x22>
}
    515e:	bd10      	pop	{r4, pc}
    5160:	000109b4 	.word	0x000109b4
    5164:	20000340 	.word	0x20000340

00005168 <rx_packet_set>:
{
    5168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	phy = conn->phy_rx;
    516a:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
	max_rx_octets = conn->max_rx_octets;
    516e:	8e05      	ldrh	r5, [r0, #48]	; 0x30
{
    5170:	4606      	mov	r6, r0
	phy = conn->phy_rx;
    5172:	f004 0407 	and.w	r4, r4, #7
{
    5176:	460f      	mov	r7, r1
	radio_phy_set(phy, 0);
    5178:	4620      	mov	r0, r4
    517a:	2100      	movs	r1, #0
    517c:	f009 faaa 	bl	e6d4 <radio_phy_set>
	if (conn->enc_rx) {
    5180:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    5184:	f013 0f10 	tst.w	r3, #16
    5188:	ea4f 0244 	mov.w	r2, r4, lsl #1
    518c:	d010      	beq.n	51b0 <rx_packet_set+0x48>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    518e:	1d29      	adds	r1, r5, #4
    5190:	f042 0201 	orr.w	r2, r2, #1
    5194:	b2c9      	uxtb	r1, r1
    5196:	2008      	movs	r0, #8
    5198:	f009 fb00 	bl	e79c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    519c:	463a      	mov	r2, r7
    519e:	4621      	mov	r1, r4
    51a0:	f106 00f9 	add.w	r0, r6, #249	; 0xf9
    51a4:	f009 fd54 	bl	ec50 <radio_ccm_rx_pkt_set>
}
    51a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(pdu_data_rx);
    51ac:	f009 bb28 	b.w	e800 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    51b0:	2008      	movs	r0, #8
    51b2:	f042 0201 	orr.w	r2, r2, #1
    51b6:	b2e9      	uxtb	r1, r5
    51b8:	f009 faf0 	bl	e79c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    51bc:	4638      	mov	r0, r7
    51be:	e7f3      	b.n	51a8 <rx_packet_set+0x40>

000051c0 <pdu_node_tx_release>:
{
    51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	last = _radio.packet_release_last + 1;
    51c2:	4c13      	ldr	r4, [pc, #76]	; (5210 <pdu_node_tx_release+0x50>)
    51c4:	f894 5780 	ldrb.w	r5, [r4, #1920]	; 0x780
	if (last == _radio.packet_tx_count) {
    51c8:	f894 377c 	ldrb.w	r3, [r4, #1916]	; 0x77c
	last = _radio.packet_release_last + 1;
    51cc:	3501      	adds	r5, #1
    51ce:	b2ed      	uxtb	r5, r5
		last = 0;
    51d0:	42ab      	cmp	r3, r5
    51d2:	bf08      	it	eq
    51d4:	2500      	moveq	r5, #0
	LL_ASSERT(last != _radio.packet_release_first);
    51d6:	f894 377f 	ldrb.w	r3, [r4, #1919]	; 0x77f
    51da:	42ab      	cmp	r3, r5
{
    51dc:	4607      	mov	r7, r0
    51de:	460e      	mov	r6, r1
	LL_ASSERT(last != _radio.packet_release_first);
    51e0:	d104      	bne.n	51ec <pdu_node_tx_release+0x2c>
    51e2:	f242 711d 	movw	r1, #10013	; 0x271d
    51e6:	480b      	ldr	r0, [pc, #44]	; (5214 <pdu_node_tx_release+0x54>)
    51e8:	f7fb fb62 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    51ec:	f894 2780 	ldrb.w	r2, [r4, #1920]	; 0x780
    51f0:	f8d4 3778 	ldr.w	r3, [r4, #1912]	; 0x778
    51f4:	f823 7032 	strh.w	r7, [r3, r2, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    51f8:	f894 2780 	ldrb.w	r2, [r4, #1920]	; 0x780
    51fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5200:	605e      	str	r6, [r3, #4]
	_radio.packet_release_last = last;
    5202:	f884 5780 	strb.w	r5, [r4, #1920]	; 0x780
}
    5206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	radio_event_callback();
    520a:	f007 bc43 	b.w	ca94 <radio_event_callback>
    520e:	bf00      	nop
    5210:	20000340 	.word	0x20000340
    5214:	000109b4 	.word	0x000109b4

00005218 <packet_tx_enqueue>:
{
    5218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    521c:	4c24      	ldr	r4, [pc, #144]	; (52b0 <packet_tx_enqueue+0x98>)
{
    521e:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    5220:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5222:	b12e      	cbz	r6, 5230 <packet_tx_enqueue+0x18>
    5224:	f894 377d 	ldrb.w	r3, [r4, #1917]	; 0x77d
    5228:	f894 277e 	ldrb.w	r2, [r4, #1918]	; 0x77e
    522c:	429a      	cmp	r2, r3
    522e:	d101      	bne.n	5234 <packet_tx_enqueue+0x1c>
    5230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    5234:	f894 877d 	ldrb.w	r8, [r4, #1917]	; 0x77d
    5238:	f8d4 9774 	ldr.w	r9, [r4, #1908]	; 0x774
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    523c:	f8d4 0710 	ldr.w	r0, [r4, #1808]	; 0x710
    5240:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    5244:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5248:	f44f 71aa 	mov.w	r1, #340	; 0x154
		node_tx_new = pdu_data_q_tx->node_tx;
    524c:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    524e:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5250:	f7fc fdb2 	bl	1db8 <mem_get>
    5254:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    5256:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    525a:	8c1a      	ldrh	r2, [r3, #32]
    525c:	4282      	cmp	r2, r0
    525e:	d11f      	bne.n	52a0 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    5260:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    5264:	b942      	cbnz	r2, 5278 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    5266:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
				conn->pkt_tx_data = node_tx_new;
    526a:	f8c3 5148 	str.w	r5, [r3, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
    526e:	b91a      	cbnz	r2, 5278 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    5270:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
    5274:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
			if (conn->pkt_tx_last) {
    5278:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
    527c:	b102      	cbz	r2, 5280 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    527e:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    5280:	f8c3 514c 	str.w	r5, [r3, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
    5284:	f894 377d 	ldrb.w	r3, [r4, #1917]	; 0x77d
		if (first == _radio.packet_tx_count) {
    5288:	f894 277c 	ldrb.w	r2, [r4, #1916]	; 0x77c
		first = _radio.packet_tx_first + 1;
    528c:	3301      	adds	r3, #1
    528e:	b2db      	uxtb	r3, r3
			first = 0;
    5290:	429a      	cmp	r2, r3
    5292:	bf08      	it	eq
    5294:	2300      	moveq	r3, #0
    5296:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    5298:	f884 377d 	strb.w	r3, [r4, #1917]	; 0x77d
    529c:	b2f6      	uxtb	r6, r6
    529e:	e7c0      	b.n	5222 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    52a0:	792b      	ldrb	r3, [r5, #4]
    52a2:	f367 0301 	bfi	r3, r7, #0, #2
    52a6:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    52a8:	4629      	mov	r1, r5
    52aa:	f7ff ff89 	bl	51c0 <pdu_node_tx_release>
    52ae:	e7e9      	b.n	5284 <packet_tx_enqueue+0x6c>
    52b0:	20000340 	.word	0x20000340

000052b4 <connection_release>:
{
    52b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    52b6:	2201      	movs	r2, #1
{
    52b8:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    52ba:	4611      	mov	r1, r2
    52bc:	2000      	movs	r0, #0
    52be:	f7fc fde9 	bl	1e94 <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    52c2:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    52c6:	f242 733a 	movw	r3, #10042	; 0x273a
    52ca:	2100      	movs	r1, #0
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    52cc:	3207      	adds	r2, #7
	ticker_status =
    52ce:	9300      	str	r3, [sp, #0]
    52d0:	b2d2      	uxtb	r2, r2
    52d2:	4b3f      	ldr	r3, [pc, #252]	; (53d0 <connection_release+0x11c>)
    52d4:	4608      	mov	r0, r1
    52d6:	f7fd fc55 	bl	2b84 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    52da:	f030 0302 	bics.w	r3, r0, #2
    52de:	d004      	beq.n	52ea <connection_release+0x36>
    52e0:	f242 713c 	movw	r1, #10044	; 0x273c
    52e4:	483b      	ldr	r0, [pc, #236]	; (53d4 <connection_release+0x120>)
    52e6:	f7fb fae3 	bl	8b0 <bt_ctlr_assert_handle>
	if ((_radio.state == STATE_ABORT) &&
    52ea:	4d3b      	ldr	r5, [pc, #236]	; (53d8 <connection_release+0x124>)
    52ec:	7d2b      	ldrb	r3, [r5, #20]
    52ee:	2b05      	cmp	r3, #5
    52f0:	d127      	bne.n	5342 <connection_release+0x8e>
					  conn->handle))) {
    52f2:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    52f4:	7c2a      	ldrb	r2, [r5, #16]
    52f6:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
    52f8:	429a      	cmp	r2, r3
    52fa:	d122      	bne.n	5342 <connection_release+0x8e>
		_radio.ticker_id_prepare = 0;
    52fc:	2100      	movs	r1, #0
		ticker_status =
    52fe:	f242 734b 	movw	r3, #10059	; 0x274b
    5302:	9300      	str	r3, [sp, #0]
    5304:	2201      	movs	r2, #1
    5306:	4b32      	ldr	r3, [pc, #200]	; (53d0 <connection_release+0x11c>)
		_radio.ticker_id_prepare = 0;
    5308:	7429      	strb	r1, [r5, #16]
		ticker_status =
    530a:	4608      	mov	r0, r1
    530c:	f7fd fc3a 	bl	2b84 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5310:	f030 0302 	bics.w	r3, r0, #2
    5314:	d004      	beq.n	5320 <connection_release+0x6c>
    5316:	f242 714d 	movw	r1, #10061	; 0x274d
    531a:	482e      	ldr	r0, [pc, #184]	; (53d4 <connection_release+0x120>)
    531c:	f7fb fac8 	bl	8b0 <bt_ctlr_assert_handle>
		ticker_status =
    5320:	2200      	movs	r2, #0
    5322:	f242 7352 	movw	r3, #10066	; 0x2752
    5326:	9300      	str	r3, [sp, #0]
    5328:	4611      	mov	r1, r2
    532a:	4b29      	ldr	r3, [pc, #164]	; (53d0 <connection_release+0x11c>)
    532c:	4610      	mov	r0, r2
    532e:	f7fd fc29 	bl	2b84 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5332:	f030 0302 	bics.w	r3, r0, #2
    5336:	d004      	beq.n	5342 <connection_release+0x8e>
    5338:	f242 7154 	movw	r1, #10068	; 0x2754
    533c:	4825      	ldr	r0, [pc, #148]	; (53d4 <connection_release+0x120>)
    533e:	f7fb fab7 	bl	8b0 <bt_ctlr_assert_handle>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    5342:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    5346:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    534a:	4299      	cmp	r1, r3
    534c:	d003      	beq.n	5356 <connection_release+0xa2>
    534e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    5352:	4299      	cmp	r1, r3
    5354:	d101      	bne.n	535a <connection_release+0xa6>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5356:	4e21      	ldr	r6, [pc, #132]	; (53dc <connection_release+0x128>)
    5358:	e012      	b.n	5380 <connection_release+0xcc>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    535a:	790b      	ldrb	r3, [r1, #4]
    535c:	f36f 0301 	bfc	r3, #0, #2
    5360:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5362:	680b      	ldr	r3, [r1, #0]
    5364:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
    5368:	8c20      	ldrh	r0, [r4, #32]
    536a:	f7ff ff29 	bl	51c0 <pdu_node_tx_release>
    536e:	e7e8      	b.n	5342 <connection_release+0x8e>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5370:	6803      	ldr	r3, [r0, #0]
    5372:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    5376:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    537a:	4631      	mov	r1, r6
    537c:	f7fc fd01 	bl	1d82 <mem_release>
	while ((conn->pkt_tx_head) &&
    5380:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    5384:	b118      	cbz	r0, 538e <connection_release+0xda>
    5386:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    538a:	4298      	cmp	r0, r3
    538c:	d1f0      	bne.n	5370 <connection_release+0xbc>
	conn->pkt_tx_ctrl = NULL;
    538e:	2300      	movs	r3, #0
    5390:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    5394:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
    5398:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    539c:	b951      	cbnz	r1, 53b4 <connection_release+0x100>
	conn->handle = 0xffff;
    539e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    53a2:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    53a4:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
    53a8:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    53aa:	bf08      	it	eq
    53ac:	f8c5 1790 	streq.w	r1, [r5, #1936]	; 0x790
}
    53b0:	b002      	add	sp, #8
    53b2:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    53b4:	790b      	ldrb	r3, [r1, #4]
    53b6:	f36f 0301 	bfc	r3, #0, #2
    53ba:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    53bc:	680b      	ldr	r3, [r1, #0]
    53be:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
    53c2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
    53c6:	8c20      	ldrh	r0, [r4, #32]
    53c8:	f7ff fefa 	bl	51c0 <pdu_node_tx_release>
    53cc:	e7e4      	b.n	5398 <connection_release+0xe4>
    53ce:	bf00      	nop
    53d0:	00006151 	.word	0x00006151
    53d4:	000109b4 	.word	0x000109b4
    53d8:	20000340 	.word	0x20000340
    53dc:	20000aa4 	.word	0x20000aa4

000053e0 <tx_packet_set>:
{
    53e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53e2:	460f      	mov	r7, r1
	phy = conn->phy_tx;
    53e4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
	max_tx_octets = conn->max_tx_octets;
    53e8:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
    53ea:	f3c1 04c2 	ubfx	r4, r1, #3, #3
{
    53ee:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
    53f0:	09c9      	lsrs	r1, r1, #7
    53f2:	4620      	mov	r0, r4
    53f4:	f009 f96e 	bl	e6d4 <radio_phy_set>
	if (conn->enc_tx) {
    53f8:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    53fc:	f013 0f20 	tst.w	r3, #32
    5400:	ea4f 0244 	mov.w	r2, r4, lsl #1
    5404:	d00f      	beq.n	5426 <tx_packet_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    5406:	1d29      	adds	r1, r5, #4
    5408:	b2c9      	uxtb	r1, r1
    540a:	2008      	movs	r0, #8
    540c:	f042 0201 	orr.w	r2, r2, #1
    5410:	f009 f9c4 	bl	e79c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    5414:	4639      	mov	r1, r7
    5416:	f506 708d 	add.w	r0, r6, #282	; 0x11a
    541a:	f009 fc6f 	bl	ecfc <radio_ccm_tx_pkt_set>
}
    541e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
    5422:	f009 b9f3 	b.w	e80c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    5426:	2008      	movs	r0, #8
    5428:	f042 0201 	orr.w	r2, r2, #1
    542c:	b2e9      	uxtb	r1, r5
    542e:	f009 f9b5 	bl	e79c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    5432:	4638      	mov	r0, r7
    5434:	e7f3      	b.n	541e <tx_packet_set+0x3e>
	...

00005438 <chan_set>:
{
    5438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    543c:	4e88      	ldr	r6, [pc, #544]	; (5660 <chan_set+0x228>)
    543e:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5442:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    5446:	4433      	add	r3, r6
{
    5448:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    544a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    544e:	f003 030f 	and.w	r3, r3, #15
    5452:	2b07      	cmp	r3, #7
    5454:	f040 80f3 	bne.w	563e <chan_set+0x206>
		switch (chan) {
    5458:	2826      	cmp	r0, #38	; 0x26
    545a:	f8df 824c 	ldr.w	r8, [pc, #588]	; 56a8 <chan_set+0x270>
    545e:	d02e      	beq.n	54be <chan_set+0x86>
    5460:	2827      	cmp	r0, #39	; 0x27
    5462:	f8df 9248 	ldr.w	r9, [pc, #584]	; 56ac <chan_set+0x274>
    5466:	d034      	beq.n	54d2 <chan_set+0x9a>
    5468:	2825      	cmp	r0, #37	; 0x25
    546a:	d162      	bne.n	5532 <chan_set+0xfa>
			stop_time_37 = k_cycle_get_32();
    546c:	f7fc fb9a 	bl	1ba4 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    5470:	4e7c      	ldr	r6, [pc, #496]	; (5664 <chan_set+0x22c>)
			stop_time_37 = k_cycle_get_32();
    5472:	4b7d      	ldr	r3, [pc, #500]	; (5668 <chan_set+0x230>)
			cycles_spent_37 = stop_time_37 - start_time37;
    5474:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    5476:	6018      	str	r0, [r3, #0]
			cycles_spent_37 = stop_time_37 - start_time37;
    5478:	4b7c      	ldr	r3, [pc, #496]	; (566c <chan_set+0x234>)
    547a:	1bc7      	subs	r7, r0, r7
    547c:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    547e:	4b7c      	ldr	r3, [pc, #496]	; (5670 <chan_set+0x238>)
    5480:	681a      	ldr	r2, [r3, #0]
    5482:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    5486:	fb82 2305 	smull	r2, r3, r2, r5
    548a:	fba2 0107 	umull	r0, r1, r2, r7
    548e:	f8d9 2000 	ldr.w	r2, [r9]
    5492:	fb07 1103 	mla	r1, r7, r3, r1
    5496:	17d3      	asrs	r3, r2, #31
    5498:	f7fa fee6 	bl	268 <__aeabi_uldivmod>
    549c:	4b75      	ldr	r3, [pc, #468]	; (5674 <chan_set+0x23c>)
    549e:	fbb0 f0f5 	udiv	r0, r0, r5
    54a2:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    54a4:	f7fc fb7e 	bl	1ba4 <_timer_cycle_get_32>
    54a8:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    54ac:	f7fc fb7a 	bl	1ba4 <_timer_cycle_get_32>
			pckt_send++;
    54b0:	4a71      	ldr	r2, [pc, #452]	; (5678 <chan_set+0x240>)
			start_time37= k_cycle_get_32();
    54b2:	6030      	str	r0, [r6, #0]
			pckt_send++;
    54b4:	7813      	ldrb	r3, [r2, #0]
    54b6:	3301      	adds	r3, #1
    54b8:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    54ba:	2002      	movs	r0, #2
    54bc:	e0ad      	b.n	561a <chan_set+0x1e2>
			start_time = k_cycle_get_32();
    54be:	f7fc fb71 	bl	1ba4 <_timer_cycle_get_32>
			pckt_send++;
    54c2:	4a6d      	ldr	r2, [pc, #436]	; (5678 <chan_set+0x240>)
			start_time = k_cycle_get_32();
    54c4:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    54c8:	7813      	ldrb	r3, [r2, #0]
    54ca:	3301      	adds	r3, #1
    54cc:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    54ce:	201a      	movs	r0, #26
    54d0:	e0a3      	b.n	561a <chan_set+0x1e2>
			stop_time_39 = k_cycle_get_32();
    54d2:	f7fc fb67 	bl	1ba4 <_timer_cycle_get_32>
    54d6:	4b69      	ldr	r3, [pc, #420]	; (567c <chan_set+0x244>)
    54d8:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    54da:	f8d8 3000 	ldr.w	r3, [r8]
    54de:	eba0 0e03 	sub.w	lr, r0, r3
    54e2:	4b63      	ldr	r3, [pc, #396]	; (5670 <chan_set+0x238>)
    54e4:	681a      	ldr	r2, [r3, #0]
    54e6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    54ea:	fb82 2307 	smull	r2, r3, r2, r7
    54ee:	fbae 0102 	umull	r0, r1, lr, r2
    54f2:	f8d9 2000 	ldr.w	r2, [r9]
    54f6:	fb0e 1103 	mla	r1, lr, r3, r1
    54fa:	17d3      	asrs	r3, r2, #31
    54fc:	f7fa feb4 	bl	268 <__aeabi_uldivmod>
    5500:	4b5f      	ldr	r3, [pc, #380]	; (5680 <chan_set+0x248>)
    5502:	fbb0 f0f7 	udiv	r0, r0, r7
    5506:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    5508:	4b5b      	ldr	r3, [pc, #364]	; (5678 <chan_set+0x240>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    550a:	2500      	movs	r5, #0
			pckt_send = 0;
    550c:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    550e:	f7fc fb49 	bl	1ba4 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    5512:	f896 3689 	ldrb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5516:	f896 2688 	ldrb.w	r2, [r6, #1672]	; 0x688
			start_time = k_cycle_get_32();
    551a:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    551e:	3301      	adds	r3, #1
    5520:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5522:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    5524:	f886 3689 	strb.w	r3, [r6, #1673]	; 0x689
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    5528:	d201      	bcs.n	552e <chan_set+0xf6>
			_radio.ext_advertiser.current_slot= 0;
    552a:	f886 5689 	strb.w	r5, [r6, #1673]	; 0x689
			radio_freq_chan_set(80);
    552e:	2050      	movs	r0, #80	; 0x50
    5530:	e073      	b.n	561a <chan_set+0x1e2>
			stop_time_aux1 = k_cycle_get_32();
    5532:	f7fc fb37 	bl	1ba4 <_timer_cycle_get_32>
    5536:	4b53      	ldr	r3, [pc, #332]	; (5684 <chan_set+0x24c>)
    5538:	6018      	str	r0, [r3, #0]
    553a:	4b4d      	ldr	r3, [pc, #308]	; (5670 <chan_set+0x238>)
    553c:	681b      	ldr	r3, [r3, #0]
    553e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    5542:	fb83 ab05 	smull	sl, fp, r3, r5
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5546:	f8d9 3000 	ldr.w	r3, [r9]
    554a:	4619      	mov	r1, r3
    554c:	17da      	asrs	r2, r3, #31
    554e:	f8d8 3000 	ldr.w	r3, [r8]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    5552:	f8df 815c 	ldr.w	r8, [pc, #348]	; 56b0 <chan_set+0x278>
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    5556:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    5558:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    555a:	e9cd 1200 	strd	r1, r2, [sp]
    555e:	fba3 010a 	umull	r0, r1, r3, sl
    5562:	fb03 110b 	mla	r1, r3, fp, r1
    5566:	e9dd 2300 	ldrd	r2, r3, [sp]
    556a:	f7fa fe7d 	bl	268 <__aeabi_uldivmod>
    556e:	4b46      	ldr	r3, [pc, #280]	; (5688 <chan_set+0x250>)
    5570:	fbb0 f0f5 	udiv	r0, r0, r5
    5574:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    5576:	4b3b      	ldr	r3, [pc, #236]	; (5664 <chan_set+0x22c>)
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	1afb      	subs	r3, r7, r3
    557c:	fba3 010a 	umull	r0, r1, r3, sl
    5580:	fb03 110b 	mla	r1, r3, fp, r1
    5584:	e9dd 2300 	ldrd	r2, r3, [sp]
    5588:	f7fa fe6e 	bl	268 <__aeabi_uldivmod>
    558c:	4b3f      	ldr	r3, [pc, #252]	; (568c <chan_set+0x254>)
    558e:	fbb0 f0f5 	udiv	r0, r0, r5
    5592:	6018      	str	r0, [r3, #0]
			us_spent_5 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time_5)/1000;
    5594:	f8d8 3000 	ldr.w	r3, [r8]
    5598:	1aff      	subs	r7, r7, r3
    559a:	fba7 010a 	umull	r0, r1, r7, sl
    559e:	e9dd 2300 	ldrd	r2, r3, [sp]
    55a2:	fb07 110b 	mla	r1, r7, fp, r1
    55a6:	f7fa fe5f 	bl	268 <__aeabi_uldivmod>
    55aa:	4b39      	ldr	r3, [pc, #228]	; (5690 <chan_set+0x258>)
    55ac:	fbb0 f0f5 	udiv	r0, r0, r5
    55b0:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    55b2:	f7fc faf7 	bl	1ba4 <_timer_cycle_get_32>
    55b6:	4b37      	ldr	r3, [pc, #220]	; (5694 <chan_set+0x25c>)
			last_dynamic_cal = final_dynamic_cal;
    55b8:	4f37      	ldr	r7, [pc, #220]	; (5698 <chan_set+0x260>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    55ba:	2100      	movs	r1, #0
    55bc:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    55c0:	4b36      	ldr	r3, [pc, #216]	; (569c <chan_set+0x264>)
    55c2:	f8d7 b000 	ldr.w	fp, [r7]
    55c6:	687a      	ldr	r2, [r7, #4]
    55c8:	f8c3 b000 	str.w	fp, [r3]
    55cc:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    55ce:	4b34      	ldr	r3, [pc, #208]	; (56a0 <chan_set+0x268>)
    55d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    55d4:	1a82      	subs	r2, r0, r2
    55d6:	eb61 0303 	sbc.w	r3, r1, r3
    55da:	4925      	ldr	r1, [pc, #148]	; (5670 <chan_set+0x238>)
    55dc:	6808      	ldr	r0, [r1, #0]
    55de:	fb80 0105 	smull	r0, r1, r0, r5
    55e2:	4351      	muls	r1, r2
    55e4:	fb00 1303 	mla	r3, r0, r3, r1
    55e8:	fba2 0100 	umull	r0, r1, r2, r0
    55ec:	f8d9 2000 	ldr.w	r2, [r9]
    55f0:	4419      	add	r1, r3
    55f2:	17d3      	asrs	r3, r2, #31
    55f4:	f7fa fe38 	bl	268 <__aeabi_uldivmod>
    55f8:	2300      	movs	r3, #0
    55fa:	fbb0 f0f5 	udiv	r0, r0, r5
    55fe:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    5600:	eba0 000b 	sub.w	r0, r0, fp
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    5604:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    5606:	f8c6 06a8 	str.w	r0, [r6, #1704]	; 0x6a8
			start_time_5 = k_cycle_get_32();
    560a:	f7fc facb 	bl	1ba4 <_timer_cycle_get_32>
			if (chan < 11) {
    560e:	2c0a      	cmp	r4, #10
			start_time_5 = k_cycle_get_32();
    5610:	f8c8 0000 	str.w	r0, [r8]
			if (chan < 11) {
    5614:	d809      	bhi.n	562a <chan_set+0x1f2>
				radio_freq_chan_set(4 + (2 * chan));
    5616:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    5618:	0040      	lsls	r0, r0, #1
			radio_freq_chan_set(80);
    561a:	f009 f88f 	bl	e73c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    561e:	4620      	mov	r0, r4
}
    5620:	b003      	add	sp, #12
    5622:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_whiten_iv_set(chan);
    5626:	f009 b88f 	b.w	e748 <radio_whiten_iv_set>
			} else if (chan < 40) {
    562a:	2c27      	cmp	r4, #39	; 0x27
    562c:	d801      	bhi.n	5632 <chan_set+0x1fa>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    562e:	1ce0      	adds	r0, r4, #3
    5630:	e7f2      	b.n	5618 <chan_set+0x1e0>
				LL_ASSERT(0);
    5632:	f641 0144 	movw	r1, #6212	; 0x1844
				LL_ASSERT(0);
    5636:	481b      	ldr	r0, [pc, #108]	; (56a4 <chan_set+0x26c>)
    5638:	f7fb f93a 	bl	8b0 <bt_ctlr_assert_handle>
    563c:	e7ef      	b.n	561e <chan_set+0x1e6>
		switch (chan) {
    563e:	2826      	cmp	r0, #38	; 0x26
    5640:	f43f af45 	beq.w	54ce <chan_set+0x96>
    5644:	2827      	cmp	r0, #39	; 0x27
    5646:	f43f af72 	beq.w	552e <chan_set+0xf6>
    564a:	2825      	cmp	r0, #37	; 0x25
    564c:	f43f af35 	beq.w	54ba <chan_set+0x82>
			if (chan < 11) {
    5650:	280a      	cmp	r0, #10
    5652:	d9e0      	bls.n	5616 <chan_set+0x1de>
			} else if (chan < 40) {
    5654:	2827      	cmp	r0, #39	; 0x27
    5656:	d9ea      	bls.n	562e <chan_set+0x1f6>
				LL_ASSERT(0);
    5658:	f641 015f 	movw	r1, #6239	; 0x185f
    565c:	e7eb      	b.n	5636 <chan_set+0x1fe>
    565e:	bf00      	nop
    5660:	20000340 	.word	0x20000340
    5664:	20003b78 	.word	0x20003b78
    5668:	20003be4 	.word	0x20003be4
    566c:	20003c34 	.word	0x20003c34
    5670:	20005624 	.word	0x20005624
    5674:	20003c50 	.word	0x20003c50
    5678:	20000b20 	.word	0x20000b20
    567c:	20003be8 	.word	0x20003be8
    5680:	20003c38 	.word	0x20003c38
    5684:	20003c44 	.word	0x20003c44
    5688:	20003c10 	.word	0x20003c10
    568c:	20003b64 	.word	0x20003b64
    5690:	20003c48 	.word	0x20003c48
    5694:	20003c08 	.word	0x20003c08
    5698:	20000ae0 	.word	0x20000ae0
    569c:	20000ae8 	.word	0x20000ae8
    56a0:	20003b70 	.word	0x20003b70
    56a4:	000109b4 	.word	0x000109b4
    56a8:	20003c00 	.word	0x20003c00
    56ac:	20005620 	.word	0x20005620
    56b0:	20003c24 	.word	0x20003c24

000056b4 <adv_setup>:
{
    56b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.advertiser.adv_data.first !=
    56b8:	4c8d      	ldr	r4, [pc, #564]	; (58f0 <adv_setup+0x23c>)
    56ba:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
    56be:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    56c2:	429a      	cmp	r2, r3
    56c4:	f000 80dc 	beq.w	5880 <adv_setup+0x1cc>
		first = _radio.advertiser.adv_data.first + 1;
    56c8:	3301      	adds	r3, #1
    56ca:	b2db      	uxtb	r3, r3
			first = 0;
    56cc:	2b02      	cmp	r3, #2
    56ce:	bf08      	it	eq
    56d0:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    56d2:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    56d6:	f04f 0a01 	mov.w	sl, #1
	if (_radio.advertiser.scan_data.first != _radio.
    56da:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
    56de:	f894 2637 	ldrb.w	r2, [r4, #1591]	; 0x637
    56e2:	429a      	cmp	r2, r3
    56e4:	d008      	beq.n	56f8 <adv_setup+0x44>
		first = _radio.advertiser.scan_data.first + 1;
    56e6:	3301      	adds	r3, #1
    56e8:	b2db      	uxtb	r3, r3
			first = 0;
    56ea:	2b02      	cmp	r3, #2
    56ec:	bf08      	it	eq
    56ee:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    56f0:	f884 3636 	strb.w	r3, [r4, #1590]	; 0x636
		upd = 1;
    56f4:	f04f 0a01 	mov.w	sl, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    56f8:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    56fc:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    5700:	372c      	adds	r7, #44	; 0x2c
    5702:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5706:	5de3      	ldrb	r3, [r4, r7]
    5708:	f003 030f 	and.w	r3, r3, #15
    570c:	2b07      	cmp	r3, #7
    570e:	d161      	bne.n	57d4 <adv_setup+0x120>
			if(h->adv_addr){
    5710:	f899 3003 	ldrb.w	r3, [r9, #3]
    5714:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    5716:	bf4c      	ite	mi
    5718:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    571c:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    5720:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    5722:	bf48      	it	mi
    5724:	3506      	addmi	r5, #6
			if(h->adi){
    5726:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    5728:	bf48      	it	mi
    572a:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    572c:	06da      	lsls	r2, r3, #27
    572e:	d54b      	bpl.n	57c8 <adv_setup+0x114>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    5730:	f8d4 26a4 	ldr.w	r2, [r4, #1700]	; 0x6a4
    5734:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5738:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    573c:	4413      	add	r3, r2
    573e:	f894 2689 	ldrb.w	r2, [r4, #1673]	; 0x689
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5742:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    5746:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5748:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    574a:	f8c4 268c 	str.w	r2, [r4, #1676]	; 0x68c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    574e:	f040 80a7 	bne.w	58a0 <adv_setup+0x1ec>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    5752:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5756:	f003 0307 	and.w	r3, r3, #7
    575a:	2b07      	cmp	r3, #7
    575c:	f040 8093 	bne.w	5886 <adv_setup+0x1d2>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    5760:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    5764:	1a82      	subs	r2, r0, r2
    5766:	4610      	mov	r0, r2
    5768:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    576a:	f8c4 269c 	str.w	r2, [r4, #1692]	; 0x69c
				if(offset > 245700){
    576e:	4a61      	ldr	r2, [pc, #388]	; (58f4 <adv_setup+0x240>)
    5770:	78ae      	ldrb	r6, [r5, #2]
    5772:	f895 8000 	ldrb.w	r8, [r5]
    5776:	2300      	movs	r3, #0
    5778:	428b      	cmp	r3, r1
    577a:	bf08      	it	eq
    577c:	4282      	cmpeq	r2, r0
    577e:	f080 80a0 	bcs.w	58c2 <adv_setup+0x20e>
					ap->offs = offset/1200;
    5782:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
    5786:	2300      	movs	r3, #0
    5788:	f7fa fd6e 	bl	268 <__aeabi_uldivmod>
    578c:	f026 061f 	bic.w	r6, r6, #31
    5790:	7068      	strb	r0, [r5, #1]
    5792:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5796:	4330      	orrs	r0, r6
    5798:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    579a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    579e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    57a2:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    57a6:	07db      	lsls	r3, r3, #31
    57a8:	d508      	bpl.n	57bc <adv_setup+0x108>
					_radio.ext_advertiser.aux_pckt_chan++;
    57aa:	f894 36a0 	ldrb.w	r3, [r4, #1696]	; 0x6a0
    57ae:	3301      	adds	r3, #1
    57b0:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    57b2:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    57b4:	bf08      	it	eq
    57b6:	2300      	moveq	r3, #0
    57b8:	f884 36a0 	strb.w	r3, [r4, #1696]	; 0x6a0
				ap->chan_idx = _radio.ext_advertiser.aux_pckt_chan;	
    57bc:	782b      	ldrb	r3, [r5, #0]
    57be:	f894 26a0 	ldrb.w	r2, [r4, #1696]	; 0x6a0
    57c2:	f362 0305 	bfi	r3, r2, #0, #6
    57c6:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;
    57c8:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    57cc:	f36f 0300 	bfc	r3, #0, #1
    57d0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (upd) {
    57d4:	f1ba 0f00 	cmp.w	sl, #0
    57d8:	d00b      	beq.n	57f2 <adv_setup+0x13e>
		struct pdu_adv *scan_pdu = (void *)
    57da:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
    57de:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    57e2:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    57e4:	2206      	movs	r2, #6
    57e6:	f109 0102 	add.w	r1, r9, #2
    57ea:	f200 4036 	addw	r0, r0, #1078	; 0x436
    57ee:	f7fa ff03 	bl	5f8 <memcpy>
		radio_pkt_tx_set(pdu);
    57f2:	4648      	mov	r0, r9
    57f4:	f009 f80a 	bl	e80c <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    57f8:	5de3      	ldrb	r3, [r4, r7]
    57fa:	f003 030f 	and.w	r3, r3, #15
    57fe:	2b02      	cmp	r3, #2
    5800:	d06d      	beq.n	58de <adv_setup+0x22a>
    5802:	2b07      	cmp	r3, #7
    5804:	d06b      	beq.n	58de <adv_setup+0x22a>
			_radio.state = STATE_TX;
    5806:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    5808:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    580a:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    580c:	f009 f924 	bl	ea58 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    5810:	2000      	movs	r0, #0
    5812:	f009 f883 	bl	e91c <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    5816:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    581a:	f3c3 0202 	ubfx	r2, r3, #0, #3
    581e:	b2d3      	uxtb	r3, r2
    5820:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    5822:	2000      	movs	r0, #0
    5824:	07ce      	lsls	r6, r1, #31
    5826:	f100 0501 	add.w	r5, r0, #1
    582a:	d55d      	bpl.n	58e8 <adv_setup+0x234>
			(_radio.advertiser.chan_map_current - 1);
    582c:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    582e:	4013      	ands	r3, r2
    5830:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    5834:	4d30      	ldr	r5, [pc, #192]	; (58f8 <adv_setup+0x244>)
			_radio.advertiser.chan_map_current &=
    5836:	f363 0202 	bfi	r2, r3, #0, #3
    583a:	4b30      	ldr	r3, [pc, #192]	; (58fc <adv_setup+0x248>)
    583c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    5840:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    5844:	bf08      	it	eq
    5846:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    5848:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    584a:	bf0c      	ite	eq
    584c:	3201      	addeq	r2, #1
*/			chan_case = 0 ;
    584e:	2200      	movne	r2, #0
    5850:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    5852:	f894 368a 	ldrb.w	r3, [r4, #1674]	; 0x68a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    5856:	f894 2688 	ldrb.w	r2, [r4, #1672]	; 0x688
		_radio.ext_advertiser.event++;
    585a:	3301      	adds	r3, #1
    585c:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    585e:	429a      	cmp	r2, r3
		count++;
    5860:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    5864:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
		count++;
    5868:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    586a:	bf38      	it	cc
    586c:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    586e:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    5870:	bf38      	it	cc
    5872:	f884 368a 	strbcc.w	r3, [r4, #1674]	; 0x68a
		chan_set(37 + chan);
    5876:	3025      	adds	r0, #37	; 0x25
}
    5878:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		chan_set(37 + chan);
    587c:	f7ff bddc 	b.w	5438 <chan_set>
	u8_t upd = 0;
    5880:	f04f 0a00 	mov.w	sl, #0
    5884:	e729      	b.n	56da <adv_setup+0x26>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    5886:	2b06      	cmp	r3, #6
    5888:	d104      	bne.n	5894 <adv_setup+0x1e0>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    588a:	f8d4 0694 	ldr.w	r0, [r4, #1684]	; 0x694
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    588e:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    5890:	2100      	movs	r1, #0
    5892:	e76c      	b.n	576e <adv_setup+0xba>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    5894:	2b04      	cmp	r3, #4
    5896:	f47f af6a 	bne.w	576e <adv_setup+0xba>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    589a:	f8d4 0698 	ldr.w	r0, [r4, #1688]	; 0x698
    589e:	e7f6      	b.n	588e <adv_setup+0x1da>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    58a0:	f894 668a 	ldrb.w	r6, [r4, #1674]	; 0x68a
    58a4:	4373      	muls	r3, r6
    58a6:	f8c4 368c 	str.w	r3, [r4, #1676]	; 0x68c
					if(_radio.ext_advertiser.event == 0){
    58aa:	b926      	cbnz	r6, 58b6 <adv_setup+0x202>
						start_dynamic_cal = k_cycle_get_32(); 
    58ac:	f7fc f97a 	bl	1ba4 <_timer_cycle_get_32>
    58b0:	4b13      	ldr	r3, [pc, #76]	; (5900 <adv_setup+0x24c>)
    58b2:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    58b6:	f8d4 0690 	ldr.w	r0, [r4, #1680]	; 0x690
    58ba:	f8d4 368c 	ldr.w	r3, [r4, #1676]	; 0x68c
    58be:	1ac0      	subs	r0, r0, r3
    58c0:	e7e6      	b.n	5890 <adv_setup+0x1dc>
					ap->offs = offset /30;
    58c2:	221e      	movs	r2, #30
    58c4:	2300      	movs	r3, #0
    58c6:	f7fa fccf 	bl	268 <__aeabi_uldivmod>
    58ca:	f026 061f 	bic.w	r6, r6, #31
    58ce:	7068      	strb	r0, [r5, #1]
    58d0:	f3c0 2004 	ubfx	r0, r0, #8, #5
    58d4:	4306      	orrs	r6, r0
    58d6:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    58d8:	f36f 18c7 	bfc	r8, #7, #1
    58dc:	e75f      	b.n	579e <adv_setup+0xea>
			_radio.state = STATE_CLOSE;
    58de:	2303      	movs	r3, #3
    58e0:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    58e2:	f009 f831 	bl	e948 <radio_switch_complete_and_disable>
    58e6:	e796      	b.n	5816 <adv_setup+0x162>
			bitmap >>= 1;
    58e8:	0849      	lsrs	r1, r1, #1
    58ea:	4628      	mov	r0, r5
    58ec:	e79a      	b.n	5824 <adv_setup+0x170>
    58ee:	bf00      	nop
    58f0:	20000340 	.word	0x20000340
    58f4:	0003bfc4 	.word	0x0003bfc4
    58f8:	20000ada 	.word	0x20000ada
    58fc:	20000ad9 	.word	0x20000ad9
    5900:	20003b70 	.word	0x20003b70
    5904:	00000000 	.word	0x00000000

00005908 <sched_free_win_offset_calc>:
{
    5908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    590c:	b08f      	sub	sp, #60	; 0x3c
    590e:	4692      	mov	sl, r2
    5910:	9304      	str	r3, [sp, #16]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5912:	6803      	ldr	r3, [r0, #0]
{
    5914:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5916:	2b00      	cmp	r3, #0
{
    5918:	4680      	mov	r8, r0
    591a:	6842      	ldr	r2, [r0, #4]
	if (conn_curr->hdr.ticks_xtal_to_start & XON_BITMASK) {
    591c:	f280 80b6 	bge.w	5a8c <sched_free_win_offset_calc+0x184>
		u32_t ticks_prepare_to_start =
    5920:	6881      	ldr	r1, [r0, #8]
		ticks_slot_abs = conn_curr->hdr.ticks_xtal_to_start &
    5922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		ticks_prepare_reduced = ticks_slot_abs - ticks_prepare_to_start;
    5926:	4291      	cmp	r1, r2
    5928:	bf2c      	ite	cs
    592a:	1a5a      	subcs	r2, r3, r1
    592c:	1a9a      	subcc	r2, r3, r2
	u32_t ticks_prepare_reduced = 0;
    592e:	9205      	str	r2, [sp, #20]
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    5930:	f8d8 200c 	ldr.w	r2, [r8, #12]
    5934:	323d      	adds	r2, #61	; 0x3d
		ticks_anchor_prev = offset_index = _win_offset = 0;
    5936:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    5938:	27ff      	movs	r7, #255	; 0xff
	ticks_slot_abs += conn_curr->hdr.ticks_slot +
    593a:	18d3      	adds	r3, r2, r3
    593c:	9307      	str	r3, [sp, #28]
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    593e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
		ticks_anchor_prev = offset_index = _win_offset = 0;
    5942:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    5946:	940c      	str	r4, [sp, #48]	; 0x30
    5948:	940b      	str	r4, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    594a:	9706      	str	r7, [sp, #24]
		ticks_anchor_prev = offset_index = _win_offset = 0;
    594c:	46a1      	mov	r9, r4
	ticks_slot_abs_prev = 0;
    594e:	46a3      	mov	fp, r4
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    5950:	4625      	mov	r5, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5952:	2302      	movs	r3, #2
    5954:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5956:	ab0d      	add	r3, sp, #52	; 0x34
    5958:	9302      	str	r3, [sp, #8]
    595a:	4b7b      	ldr	r3, [pc, #492]	; (5b48 <sched_free_win_offset_calc+0x240>)
    595c:	9301      	str	r3, [sp, #4]
    595e:	ab0b      	add	r3, sp, #44	; 0x2c
    5960:	9300      	str	r3, [sp, #0]
    5962:	f10d 0229 	add.w	r2, sp, #41	; 0x29
    5966:	ab0c      	add	r3, sp, #48	; 0x30
    5968:	2101      	movs	r1, #1
    596a:	2000      	movs	r0, #0
    596c:	f7fd f946 	bl	2bfc <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    5970:	2802      	cmp	r0, #2
    5972:	f000 8094 	beq.w	5a9e <sched_free_win_offset_calc+0x196>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    5976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5978:	b123      	cbz	r3, 5984 <sched_free_win_offset_calc+0x7c>
    597a:	f241 518b 	movw	r1, #5515	; 0x158b
    597e:	4873      	ldr	r0, [pc, #460]	; (5b4c <sched_free_win_offset_calc+0x244>)
    5980:	f7fa ff96 	bl	8b0 <bt_ctlr_assert_handle>
		if (ticker_id == 0xff) {
    5984:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    5988:	2bff      	cmp	r3, #255	; 0xff
    598a:	d064      	beq.n	5a56 <sched_free_win_offset_calc+0x14e>
		if ((ticker_id_prev != 0xff) &&
    598c:	2fff      	cmp	r7, #255	; 0xff
    598e:	d007      	beq.n	59a0 <sched_free_win_offset_calc+0x98>
    5990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5992:	4599      	cmp	r9, r3
    5994:	d004      	beq.n	59a0 <sched_free_win_offset_calc+0x98>
			LL_ASSERT(0);
    5996:	f241 5194 	movw	r1, #5524	; 0x1594
    599a:	486c      	ldr	r0, [pc, #432]	; (5b4c <sched_free_win_offset_calc+0x244>)
    599c:	f7fa ff88 	bl	8b0 <bt_ctlr_assert_handle>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    59a0:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    59a4:	2a05      	cmp	r2, #5
    59a6:	d951      	bls.n	5a4c <sched_free_win_offset_calc+0x144>
				  _radio.connection_count)) {
    59a8:	4869      	ldr	r0, [pc, #420]	; (5b50 <sched_free_win_offset_calc+0x248>)
    59aa:	f890 3718 	ldrb.w	r3, [r0, #1816]	; 0x718
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    59ae:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
    59b0:	429a      	cmp	r2, r3
    59b2:	da4b      	bge.n	5a4c <sched_free_win_offset_calc+0x144>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    59b4:	2a06      	cmp	r2, #6
    59b6:	f000 809f 	beq.w	5af8 <sched_free_win_offset_calc+0x1f0>
		if (ticker_id_other != 0xFF) {
    59ba:	9b06      	ldr	r3, [sp, #24]
    59bc:	2bff      	cmp	r3, #255	; 0xff
    59be:	d14a      	bne.n	5a56 <sched_free_win_offset_calc+0x14e>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    59c0:	3a07      	subs	r2, #7
    59c2:	b292      	uxth	r2, r2
    59c4:	f44f 71aa 	mov.w	r1, #340	; 0x154
    59c8:	f8d0 0710 	ldr.w	r0, [r0, #1808]	; 0x710
    59cc:	f7fc f9f4 	bl	1db8 <mem_get>
		if ((conn != conn_curr) && (is_select || !conn->role)) {
    59d0:	4580      	cmp	r8, r0
    59d2:	d03b      	beq.n	5a4c <sched_free_win_offset_calc+0x144>
    59d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59d6:	b91b      	cbnz	r3, 59e0 <sched_free_win_offset_calc+0xd8>
    59d8:	f990 301d 	ldrsb.w	r3, [r0, #29]
    59dc:	2b00      	cmp	r3, #0
    59de:	db35      	blt.n	5a4c <sched_free_win_offset_calc+0x144>
			u32_t ticks_to_expire_normal =
    59e0:	9b05      	ldr	r3, [sp, #20]
    59e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    59e4:	6841      	ldr	r1, [r0, #4]
    59e6:	441e      	add	r6, r3
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    59e8:	6803      	ldr	r3, [r0, #0]
    59ea:	2b00      	cmp	r3, #0
    59ec:	da5b      	bge.n	5aa6 <sched_free_win_offset_calc+0x19e>
				u32_t ticks_prepare_to_start =
    59ee:	6882      	ldr	r2, [r0, #8]
				ticks_slot_abs_curr =
    59f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    59f4:	428a      	cmp	r2, r1
    59f6:	bf2c      	ite	cs
    59f8:	18b6      	addcs	r6, r6, r2
    59fa:	1876      	addcc	r6, r6, r1
				ticks_to_expire_normal -=
    59fc:	1af6      	subs	r6, r6, r3
			ticks_slot_abs_curr +=
    59fe:	68c2      	ldr	r2, [r0, #12]
    5a00:	f102 093d 	add.w	r9, r2, #61	; 0x3d
    5a04:	444b      	add	r3, r9
    5a06:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    5a08:	f8da 3000 	ldr.w	r3, [sl]
    5a0c:	429e      	cmp	r6, r3
    5a0e:	d916      	bls.n	5a3e <sched_free_win_offset_calc+0x136>
    5a10:	429d      	cmp	r5, r3
    5a12:	bf38      	it	cc
    5a14:	461d      	movcc	r5, r3
					(ticks_slot_abs_prev +
    5a16:	9b07      	ldr	r3, [sp, #28]
    5a18:	eb0b 0703 	add.w	r7, fp, r3
				while ((offset_index < *offset_max) &&
    5a1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5a1e:	781b      	ldrb	r3, [r3, #0]
    5a20:	42a3      	cmp	r3, r4
    5a22:	d905      	bls.n	5a30 <sched_free_win_offset_calc+0x128>
				       (ticker_ticks_diff_get(
    5a24:	4629      	mov	r1, r5
    5a26:	4630      	mov	r0, r6
    5a28:	f7fd f97e 	bl	2d28 <ticker_ticks_diff_get>
				while ((offset_index < *offset_max) &&
    5a2c:	42b8      	cmp	r0, r7
    5a2e:	d23e      	bcs.n	5aae <sched_free_win_offset_calc+0x1a6>
				if (_win_offset >= conn_interval) {
    5a30:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    5a34:	9a04      	ldr	r2, [sp, #16]
				*ticks_to_offset_next = ticks_to_expire_prev;
    5a36:	f8ca 5000 	str.w	r5, [sl]
				if (_win_offset >= conn_interval) {
    5a3a:	4293      	cmp	r3, r2
    5a3c:	d20b      	bcs.n	5a56 <sched_free_win_offset_calc+0x14e>
			ticks_anchor_prev = ticks_anchor;
    5a3e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			ticker_id_prev = ticker_id;
    5a42:	f89d 7029 	ldrb.w	r7, [sp, #41]	; 0x29
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    5a46:	f8dd b020 	ldr.w	fp, [sp, #32]
			ticker_id_prev = ticker_id;
    5a4a:	4635      	mov	r5, r6
	} while (offset_index < *offset_max);
    5a4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5a4e:	781b      	ldrb	r3, [r3, #0]
    5a50:	42a3      	cmp	r3, r4
    5a52:	f63f af7e 	bhi.w	5952 <sched_free_win_offset_calc+0x4a>
	if (ticker_id == 0xFF) {
    5a56:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    5a5a:	2bff      	cmp	r3, #255	; 0xff
    5a5c:	d111      	bne.n	5a82 <sched_free_win_offset_calc+0x17a>
    5a5e:	f8da 3000 	ldr.w	r3, [sl]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    5a62:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 5b54 <sched_free_win_offset_calc+0x24c>
    5a66:	a736      	add	r7, pc, #216	; (adr r7, 5b40 <sched_free_win_offset_calc+0x238>)
    5a68:	e9d7 6700 	ldrd	r6, r7, [r7]
    5a6c:	429d      	cmp	r5, r3
    5a6e:	bf38      	it	cc
    5a70:	461d      	movcc	r5, r3
    5a72:	f04f 0907 	mov.w	r9, #7
		while (offset_index < *offset_max) {
    5a76:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5a78:	781b      	ldrb	r3, [r3, #0]
    5a7a:	42a3      	cmp	r3, r4
    5a7c:	d83e      	bhi.n	5afc <sched_free_win_offset_calc+0x1f4>
		*ticks_to_offset_next = ticks_to_expire_prev;
    5a7e:	f8ca 5000 	str.w	r5, [sl]
	*offset_max = offset_index;
    5a82:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5a84:	701c      	strb	r4, [r3, #0]
}
    5a86:	b00f      	add	sp, #60	; 0x3c
    5a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u32_t ticks_prepare_to_start =
    5a8c:	4293      	cmp	r3, r2
    5a8e:	bf38      	it	cc
    5a90:	4613      	movcc	r3, r2
	u32_t ticks_prepare_reduced = 0;
    5a92:	2200      	movs	r2, #0
    5a94:	e74b      	b.n	592e <sched_free_win_offset_calc+0x26>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5a96:	2101      	movs	r1, #1
    5a98:	2000      	movs	r0, #0
    5a9a:	f7fd f92d 	bl	2cf8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5a9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5aa0:	2b02      	cmp	r3, #2
    5aa2:	d0f8      	beq.n	5a96 <sched_free_win_offset_calc+0x18e>
    5aa4:	e767      	b.n	5976 <sched_free_win_offset_calc+0x6e>
				u32_t ticks_prepare_to_start =
    5aa6:	428b      	cmp	r3, r1
    5aa8:	bf38      	it	cc
    5aaa:	460b      	movcc	r3, r1
    5aac:	e7a7      	b.n	59fe <sched_free_win_offset_calc+0xf6>
					_win_offset = HAL_TICKER_TICKS_TO_US(
    5aae:	4a29      	ldr	r2, [pc, #164]	; (5b54 <sched_free_win_offset_calc+0x24c>)
    5ab0:	eb05 030b 	add.w	r3, r5, fp
    5ab4:	fba3 0102 	umull	r0, r1, r3, r2
    5ab8:	2207      	movs	r2, #7
    5aba:	fb02 1103 	mla	r1, r2, r3, r1
    5abe:	a320      	add	r3, pc, #128	; (adr r3, 5b40 <sched_free_win_offset_calc+0x238>)
    5ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
    5ac4:	f7fa fbd0 	bl	268 <__aeabi_uldivmod>
						ticks_slot_abs_prev) / 1250;
    5ac8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    5acc:	fbb0 f0f3 	udiv	r0, r0, r3
					if (_win_offset >= conn_interval) {
    5ad0:	9b04      	ldr	r3, [sp, #16]
					_win_offset = HAL_TICKER_TICKS_TO_US(
    5ad2:	b280      	uxth	r0, r0
					if (_win_offset >= conn_interval) {
    5ad4:	4298      	cmp	r0, r3
					_win_offset = HAL_TICKER_TICKS_TO_US(
    5ad6:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
					if (_win_offset >= conn_interval) {
    5ada:	d20b      	bcs.n	5af4 <sched_free_win_offset_calc+0x1ec>
					memcpy(win_offset +
    5adc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5ade:	2202      	movs	r2, #2
    5ae0:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    5ae4:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
					offset_index++;
    5ae8:	3401      	adds	r4, #1
					memcpy(win_offset +
    5aea:	f7fa fd85 	bl	5f8 <memcpy>
					offset_index++;
    5aee:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
    5af0:	3528      	adds	r5, #40	; 0x28
    5af2:	e793      	b.n	5a1c <sched_free_win_offset_calc+0x114>
						ticks_to_expire_prev = 0;
    5af4:	2500      	movs	r5, #0
    5af6:	e79b      	b.n	5a30 <sched_free_win_offset_calc+0x128>
    5af8:	9206      	str	r2, [sp, #24]
    5afa:	e7a7      	b.n	5a4c <sched_free_win_offset_calc+0x144>
			_win_offset = HAL_TICKER_TICKS_TO_US(
    5afc:	eb05 030b 	add.w	r3, r5, fp
    5b00:	fba3 0108 	umull	r0, r1, r3, r8
    5b04:	fb09 1103 	mla	r1, r9, r3, r1
    5b08:	4632      	mov	r2, r6
    5b0a:	463b      	mov	r3, r7
    5b0c:	f7fa fbac 	bl	268 <__aeabi_uldivmod>
					ticks_slot_abs_prev) / 1250;
    5b10:	f240 43e2 	movw	r3, #1250	; 0x4e2
    5b14:	fbb0 f0f3 	udiv	r0, r0, r3
			if (_win_offset >= conn_interval) {
    5b18:	9b04      	ldr	r3, [sp, #16]
			_win_offset = HAL_TICKER_TICKS_TO_US(
    5b1a:	b280      	uxth	r0, r0
			if (_win_offset >= conn_interval) {
    5b1c:	4283      	cmp	r3, r0
			_win_offset = HAL_TICKER_TICKS_TO_US(
    5b1e:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
			if (_win_offset >= conn_interval) {
    5b22:	d90b      	bls.n	5b3c <sched_free_win_offset_calc+0x234>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    5b24:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5b26:	2202      	movs	r2, #2
    5b28:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    5b2c:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
			offset_index++;
    5b30:	3401      	adds	r4, #1
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
    5b32:	f7fa fd61 	bl	5f8 <memcpy>
			offset_index++;
    5b36:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(1250);
    5b38:	3528      	adds	r5, #40	; 0x28
    5b3a:	e79c      	b.n	5a76 <sched_free_win_offset_calc+0x16e>
				ticks_to_expire_prev = 0;
    5b3c:	2500      	movs	r5, #0
    5b3e:	e79e      	b.n	5a7e <sched_free_win_offset_calc+0x176>
    5b40:	3b9aca00 	.word	0x3b9aca00
    5b44:	00000000 	.word	0x00000000
    5b48:	00004ab9 	.word	0x00004ab9
    5b4c:	000109b4 	.word	0x000109b4
    5b50:	20000340 	.word	0x20000340
    5b54:	1afd498d 	.word	0x1afd498d

00005b58 <mayfly_sched_free_win_offset_calc>:
{
    5b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	u32_t ticks_to_offset_default = 0;
    5b5a:	2300      	movs	r3, #0
    5b5c:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
    5b5e:	2306      	movs	r3, #6
    5b60:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
    5b64:	f990 301d 	ldrsb.w	r3, [r0, #29]
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    5b68:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	if (conn->role) {
    5b6c:	2b00      	cmp	r3, #0
		conn->llcp_conn_param.ticks_to_offset_next =
    5b6e:	bfbe      	ittt	lt
    5b70:	4602      	movlt	r2, r0
    5b72:	6f03      	ldrlt	r3, [r0, #112]	; 0x70
    5b74:	f842 3fe4 	strlt.w	r3, [r2, #228]!
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    5b78:	9101      	str	r1, [sp, #4]
    5b7a:	f10d 010b 	add.w	r1, sp, #11
    5b7e:	9100      	str	r1, [sp, #0]
	ticks_to_offset_next = &ticks_to_offset_default;
    5b80:	bfa8      	it	ge
    5b82:	aa03      	addge	r2, sp, #12
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    5b84:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
    5b88:	2100      	movs	r1, #0
    5b8a:	f7ff febd 	bl	5908 <sched_free_win_offset_calc>
}
    5b8e:	b005      	add	sp, #20
    5b90:	f85d fb04 	ldr.w	pc, [sp], #4
    5b94:	0000      	movs	r0, r0
	...

00005b98 <mayfly_sched_win_offset_select>:
{
    5b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    5b9c:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
{
    5ba0:	b089      	sub	sp, #36	; 0x24
    5ba2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    5ba4:	4840      	ldr	r0, [pc, #256]	; (5ca8 <mayfly_sched_win_offset_select+0x110>)
	u8_t offset_m_max = OFFSET_M_MAX;
    5ba6:	2306      	movs	r3, #6
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    5ba8:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    5baa:	fba2 0100 	umull	r0, r1, r2, r0
	u8_t offset_m_max = OFFSET_M_MAX;
    5bae:	f88d 300d 	strb.w	r3, [sp, #13]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    5bb2:	f240 1323 	movw	r3, #291	; 0x123
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    5bb6:	2500      	movs	r5, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    5bb8:	fb03 1102 	mla	r1, r3, r2, r1
    5bbc:	a338      	add	r3, pc, #224	; (adr r3, 5ca0 <mayfly_sched_win_offset_select+0x108>)
    5bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
    5bc2:	9505      	str	r5, [sp, #20]
    5bc4:	6075      	str	r5, [r6, #4]
    5bc6:	60b5      	str	r5, [r6, #8]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    5bc8:	f7fa fb4e 	bl	268 <__aeabi_uldivmod>
    5bcc:	aa08      	add	r2, sp, #32
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    5bce:	f10d 010d 	add.w	r1, sp, #13
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    5bd2:	f842 0d10 	str.w	r0, [r2, #-16]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    5bd6:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    5bda:	9100      	str	r1, [sp, #0]
    5bdc:	9601      	str	r6, [sp, #4]
    5bde:	2101      	movs	r1, #1
    5be0:	4620      	mov	r0, r4
    5be2:	f7ff fe91 	bl	5908 <sched_free_win_offset_calc>
    5be6:	f104 07ce 	add.w	r7, r4, #206	; 0xce
    5bea:	f104 08da 	add.w	r8, r4, #218	; 0xda
			if (win_offset_s != 0xffff) {
    5bee:	f64f 79ff 	movw	r9, #65535	; 0xffff
		memcpy((u8_t *)&win_offset_s,
    5bf2:	2202      	movs	r2, #2
    5bf4:	4639      	mov	r1, r7
    5bf6:	f10d 000e 	add.w	r0, sp, #14
    5bfa:	f7fa fcfd 	bl	5f8 <memcpy>
		while (offset_index_m < offset_m_max) {
    5bfe:	f89d 000d 	ldrb.w	r0, [sp, #13]
			if (win_offset_s != 0xffff) {
    5c02:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		while (offset_index_m < offset_m_max) {
    5c06:	2300      	movs	r3, #0
    5c08:	b2d9      	uxtb	r1, r3
    5c0a:	4288      	cmp	r0, r1
    5c0c:	d811      	bhi.n	5c32 <mayfly_sched_win_offset_select+0x9a>
    5c0e:	3702      	adds	r7, #2
	while (offset_index_s < OFFSET_S_MAX) {
    5c10:	4547      	cmp	r7, r8
    5c12:	d1ee      	bne.n	5bf2 <mayfly_sched_win_offset_select+0x5a>
	} else if (!has_offset_s) {
    5c14:	b9b5      	cbnz	r5, 5c44 <mayfly_sched_win_offset_select+0xac>
			win_offset_m[0] * 1250;
    5c16:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    5c1a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    5c1e:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    5c20:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    5c24:	2202      	movs	r2, #2
    5c26:	4631      	mov	r1, r6
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    5c28:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    5c2c:	f7fa fce4 	bl	5f8 <memcpy>
    5c30:	e027      	b.n	5c82 <mayfly_sched_win_offset_select+0xea>
			if (win_offset_s != 0xffff) {
    5c32:	454a      	cmp	r2, r9
    5c34:	d004      	beq.n	5c40 <mayfly_sched_win_offset_select+0xa8>
				if (win_offset_s ==
    5c36:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
    5c3a:	4291      	cmp	r1, r2
    5c3c:	d024      	beq.n	5c88 <mayfly_sched_win_offset_select+0xf0>
				has_offset_s = 1;
    5c3e:	2501      	movs	r5, #1
    5c40:	3301      	adds	r3, #1
    5c42:	e7e1      	b.n	5c08 <mayfly_sched_win_offset_select+0x70>
		conn->llcp_ack = conn->llcp_req;
    5c44:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    5c48:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    5c4c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    5c50:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    5c54:	4b15      	ldr	r3, [pc, #84]	; (5cac <mayfly_sched_win_offset_select+0x114>)
    5c56:	2200      	movs	r2, #0
    5c58:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
    5c5c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5c60:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    5c64:	f042 0203 	orr.w	r2, r2, #3
    5c68:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    5c6c:	2203      	movs	r2, #3
    5c6e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->llctrl.opcode =
    5c72:	2211      	movs	r2, #17
    5c74:	f803 2c02 	strb.w	r2, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    5c78:	220f      	movs	r2, #15
    5c7a:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    5c7e:	2220      	movs	r2, #32
    5c80:	701a      	strb	r2, [r3, #0]
}
    5c82:	b009      	add	sp, #36	; 0x24
    5c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			win_offset_s * 1250;
    5c88:	f240 43e2 	movw	r3, #1250	; 0x4e2
    5c8c:	4353      	muls	r3, r2
		conn->llcp.conn_upd.win_offset_us =
    5c8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
    5c92:	2202      	movs	r2, #2
    5c94:	f10d 010e 	add.w	r1, sp, #14
    5c98:	e7c6      	b.n	5c28 <mayfly_sched_win_offset_select+0x90>
    5c9a:	bf00      	nop
    5c9c:	f3af 8000 	nop.w
    5ca0:	1afd498d 	.word	0x1afd498d
    5ca4:	00000007 	.word	0x00000007
    5ca8:	09ce5400 	.word	0x09ce5400
    5cac:	20000340 	.word	0x20000340

00005cb0 <sched_after_mstr_free_slot_get>:
{
    5cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5cb4:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5cb6:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    5cb8:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    5cba:	f8df 9118 	ldr.w	r9, [pc, #280]	; 5dd4 <sched_after_mstr_free_slot_get+0x124>
	ticker_id = ticker_id_prev = 0xff;
    5cbe:	f88d 501f 	strb.w	r5, [sp, #31]
{
    5cc2:	4680      	mov	r8, r0
    5cc4:	4693      	mov	fp, r2
    5cc6:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    5cc8:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5ccc:	601c      	str	r4, [r3, #0]
    5cce:	9408      	str	r4, [sp, #32]
    5cd0:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    5cd2:	2302      	movs	r3, #2
    5cd4:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    5cd6:	ab09      	add	r3, sp, #36	; 0x24
    5cd8:	9302      	str	r3, [sp, #8]
    5cda:	4b3b      	ldr	r3, [pc, #236]	; (5dc8 <sched_after_mstr_free_slot_get+0x118>)
    5cdc:	9301      	str	r3, [sp, #4]
    5cde:	ab08      	add	r3, sp, #32
    5ce0:	9300      	str	r3, [sp, #0]
    5ce2:	f10d 021f 	add.w	r2, sp, #31
    5ce6:	465b      	mov	r3, fp
    5ce8:	4641      	mov	r1, r8
    5cea:	2000      	movs	r0, #0
    5cec:	f7fc ff86 	bl	2bfc <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    5cf0:	2802      	cmp	r0, #2
    5cf2:	d03c      	beq.n	5d6e <sched_after_mstr_free_slot_get+0xbe>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    5cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5cf6:	b123      	cbz	r3, 5d02 <sched_after_mstr_free_slot_get+0x52>
    5cf8:	f241 41c8 	movw	r1, #5320	; 0x14c8
    5cfc:	4833      	ldr	r0, [pc, #204]	; (5dcc <sched_after_mstr_free_slot_get+0x11c>)
    5cfe:	f7fa fdd7 	bl	8b0 <bt_ctlr_assert_handle>
		if (ticker_id == 0xff) {
    5d02:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5d06:	2aff      	cmp	r2, #255	; 0xff
    5d08:	d056      	beq.n	5db8 <sched_after_mstr_free_slot_get+0x108>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5d0a:	2a06      	cmp	r2, #6
    5d0c:	d9e1      	bls.n	5cd2 <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    5d0e:	f899 3718 	ldrb.w	r3, [r9, #1816]	; 0x718
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    5d12:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    5d14:	429a      	cmp	r2, r3
    5d16:	dadc      	bge.n	5cd2 <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5d18:	3a07      	subs	r2, #7
    5d1a:	b292      	uxth	r2, r2
    5d1c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    5d20:	f8d9 0710 	ldr.w	r0, [r9, #1808]	; 0x710
    5d24:	f7fc f848 	bl	1db8 <mem_get>
		if (conn && !conn->role) {
    5d28:	2800      	cmp	r0, #0
    5d2a:	d0d2      	beq.n	5cd2 <sched_after_mstr_free_slot_get+0x22>
    5d2c:	f990 301d 	ldrsb.w	r3, [r0, #29]
    5d30:	2b00      	cmp	r3, #0
    5d32:	dbce      	blt.n	5cd2 <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5d34:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    5d36:	9a08      	ldr	r2, [sp, #32]
    5d38:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	da1a      	bge.n	5d76 <sched_after_mstr_free_slot_get+0xc6>
    5d40:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    5d42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5d46:	4571      	cmp	r1, lr
    5d48:	bf2c      	ite	cs
    5d4a:	1852      	addcs	r2, r2, r1
    5d4c:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    5d4e:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    5d50:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    5d52:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    5d54:	f101 0104 	add.w	r1, r1, #4
    5d58:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    5d5a:	d110      	bne.n	5d7e <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
    5d5c:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    5d60:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    5d62:	4616      	mov	r6, r2
    5d64:	e7b5      	b.n	5cd2 <sched_after_mstr_free_slot_get+0x22>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5d66:	4641      	mov	r1, r8
    5d68:	2000      	movs	r0, #0
    5d6a:	f7fc ffc5 	bl	2cf8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    5d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d70:	2b02      	cmp	r3, #2
    5d72:	d0f8      	beq.n	5d66 <sched_after_mstr_free_slot_get+0xb6>
    5d74:	e7be      	b.n	5cf4 <sched_after_mstr_free_slot_get+0x44>
				u32_t ticks_prepare_to_start =
    5d76:	4573      	cmp	r3, lr
    5d78:	bf38      	it	cc
    5d7a:	4673      	movcc	r3, lr
    5d7c:	e7e8      	b.n	5d50 <sched_after_mstr_free_slot_get+0xa0>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    5d7e:	4631      	mov	r1, r6
    5d80:	4610      	mov	r0, r2
    5d82:	9305      	str	r3, [sp, #20]
    5d84:	9204      	str	r2, [sp, #16]
    5d86:	f7fc ffcf 	bl	2d28 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    5d8a:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    5d8e:	4288      	cmp	r0, r1
    5d90:	9a04      	ldr	r2, [sp, #16]
    5d92:	9b05      	ldr	r3, [sp, #20]
    5d94:	d9e2      	bls.n	5d5c <sched_after_mstr_free_slot_get+0xac>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5d96:	480e      	ldr	r0, [pc, #56]	; (5dd0 <sched_after_mstr_free_slot_get+0x120>)
    5d98:	4434      	add	r4, r6
    5d9a:	fba4 0100 	umull	r0, r1, r4, r0
    5d9e:	2307      	movs	r3, #7
    5da0:	fb03 1104 	mla	r1, r3, r4, r1
    5da4:	a306      	add	r3, pc, #24	; (adr r3, 5dc0 <sched_after_mstr_free_slot_get+0x110>)
    5da6:	e9d3 2300 	ldrd	r2, r3, [r3]
    5daa:	f7fa fa5d 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    5dae:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5db0:	6038      	str	r0, [r7, #0]
}
    5db2:	b00b      	add	sp, #44	; 0x2c
    5db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    5db8:	2dff      	cmp	r5, #255	; 0xff
    5dba:	d1ec      	bne.n	5d96 <sched_after_mstr_free_slot_get+0xe6>
    5dbc:	e7f9      	b.n	5db2 <sched_after_mstr_free_slot_get+0x102>
    5dbe:	bf00      	nop
    5dc0:	3b9aca00 	.word	0x3b9aca00
    5dc4:	00000000 	.word	0x00000000
    5dc8:	00004ab9 	.word	0x00004ab9
    5dcc:	000109b4 	.word	0x000109b4
    5dd0:	1afd498d 	.word	0x1afd498d
    5dd4:	20000340 	.word	0x20000340

00005dd8 <sched_after_mstr_free_offset_get>:
{
    5dd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5dda:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    5ddc:	aa02      	add	r2, sp, #8
{
    5dde:	461c      	mov	r4, r3
    5de0:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    5de2:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    5de6:	3127      	adds	r1, #39	; 0x27
    5de8:	2001      	movs	r0, #1
    5dea:	f7ff ff61 	bl	5cb0 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    5dee:	6823      	ldr	r3, [r4, #0]
    5df0:	b31b      	cbz	r3, 5e3a <sched_after_mstr_free_offset_get+0x62>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    5df2:	9b01      	ldr	r3, [sp, #4]
    5df4:	1b9b      	subs	r3, r3, r6
    5df6:	021b      	lsls	r3, r3, #8
    5df8:	d504      	bpl.n	5e04 <sched_after_mstr_free_offset_get+0x2c>
    5dfa:	f44f 51a9 	mov.w	r1, #5408	; 0x1520
    5dfe:	4814      	ldr	r0, [pc, #80]	; (5e50 <sched_after_mstr_free_offset_get+0x78>)
    5e00:	f7fa fd56 	bl	8b0 <bt_ctlr_assert_handle>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    5e04:	4631      	mov	r1, r6
    5e06:	9801      	ldr	r0, [sp, #4]
    5e08:	f7fc ff8e 	bl	2d28 <ticker_ticks_diff_get>
    5e0c:	4602      	mov	r2, r0
    5e0e:	4811      	ldr	r0, [pc, #68]	; (5e54 <sched_after_mstr_free_offset_get+0x7c>)
    5e10:	2307      	movs	r3, #7
    5e12:	fba2 0100 	umull	r0, r1, r2, r0
    5e16:	fb03 1102 	mla	r1, r3, r2, r1
    5e1a:	a30b      	add	r3, pc, #44	; (adr r3, 5e48 <sched_after_mstr_free_offset_get+0x70>)
    5e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e20:	f7fa fa22 	bl	268 <__aeabi_uldivmod>
    5e24:	6823      	ldr	r3, [r4, #0]
    5e26:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    5e28:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    5e2a:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    5e2c:	db05      	blt.n	5e3a <sched_after_mstr_free_offset_get+0x62>
		u32_t conn_interval_us = conn_interval * 1250;
    5e2e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    5e32:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    5e34:	6823      	ldr	r3, [r4, #0]
    5e36:	4298      	cmp	r0, r3
    5e38:	d301      	bcc.n	5e3e <sched_after_mstr_free_offset_get+0x66>
}
    5e3a:	b002      	add	sp, #8
    5e3c:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    5e3e:	1a1b      	subs	r3, r3, r0
    5e40:	6023      	str	r3, [r4, #0]
    5e42:	e7f7      	b.n	5e34 <sched_after_mstr_free_offset_get+0x5c>
    5e44:	f3af 8000 	nop.w
    5e48:	3b9aca00 	.word	0x3b9aca00
    5e4c:	00000000 	.word	0x00000000
    5e50:	000109b4 	.word	0x000109b4
    5e54:	1afd498d 	.word	0x1afd498d

00005e58 <mayfly_sched_win_offset_use>:
{
    5e58:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5e5a:	f100 0384 	add.w	r3, r0, #132	; 0x84
{
    5e5e:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5e60:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    5e64:	68c1      	ldr	r1, [r0, #12]
    5e66:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    5e68:	f7ff ffb6 	bl	5dd8 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5e6c:	a902      	add	r1, sp, #8
    5e6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5e72:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5e76:	f240 42e2 	movw	r2, #1250	; 0x4e2
    5e7a:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5e7e:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5e80:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5e84:	f7fa fbb8 	bl	5f8 <memcpy>
}
    5e88:	b002      	add	sp, #8
    5e8a:	bd10      	pop	{r4, pc}

00005e8c <mayfly_sched_after_mstr_free_offset_get>:
{
    5e8c:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    5e8e:	4c05      	ldr	r4, [pc, #20]	; (5ea4 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    5e90:	4602      	mov	r2, r0
    5e92:	f504 63cf 	add.w	r3, r4, #1656	; 0x678
    5e96:	f8d4 1670 	ldr.w	r1, [r4, #1648]	; 0x670
    5e9a:	f8b4 0668 	ldrh.w	r0, [r4, #1640]	; 0x668
}
    5e9e:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    5ea0:	f7ff bf9a 	b.w	5dd8 <sched_after_mstr_free_offset_get>
    5ea4:	20000340 	.word	0x20000340

00005ea8 <isr_adv_ci_adva_check>:
{
    5ea8:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    5eaa:	7804      	ldrb	r4, [r0, #0]
    5eac:	780a      	ldrb	r2, [r1, #0]
    5eae:	f3c4 1380 	ubfx	r3, r4, #6, #1
    5eb2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    5eb6:	d119      	bne.n	5eec <isr_adv_ci_adva_check+0x44>
    5eb8:	f004 040f 	and.w	r4, r4, #15
    5ebc:	2c01      	cmp	r4, #1
    5ebe:	f101 0608 	add.w	r6, r1, #8
    5ec2:	f100 0502 	add.w	r5, r0, #2
    5ec6:	d008      	beq.n	5eda <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    5ec8:	2206      	movs	r2, #6
    5eca:	4631      	mov	r1, r6
    5ecc:	4628      	mov	r0, r5
    5ece:	f7fa fb7e 	bl	5ce <memcmp>
			 BDADDR_SIZE)) ||
    5ed2:	fab0 f080 	clz	r0, r0
    5ed6:	0940      	lsrs	r0, r0, #5
    5ed8:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    5eda:	2206      	movs	r2, #6
    5edc:	4631      	mov	r1, r6
    5ede:	4628      	mov	r0, r5
    5ee0:	f7fa fb75 	bl	5ce <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    5ee4:	2800      	cmp	r0, #0
    5ee6:	d1ef      	bne.n	5ec8 <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    5ee8:	4620      	mov	r0, r4
    5eea:	bd70      	pop	{r4, r5, r6, pc}
    5eec:	2000      	movs	r0, #0
}
    5eee:	bd70      	pop	{r4, r5, r6, pc}

00005ef0 <packet_rx_enqueue>:
{
    5ef0:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    5ef2:	4c17      	ldr	r4, [pc, #92]	; (5f50 <packet_rx_enqueue+0x60>)
    5ef4:	f894 3749 	ldrb.w	r3, [r4, #1865]	; 0x749
    5ef8:	f894 274a 	ldrb.w	r2, [r4, #1866]	; 0x74a
    5efc:	429a      	cmp	r2, r3
    5efe:	d104      	bne.n	5f0a <packet_rx_enqueue+0x1a>
    5f00:	f242 6165 	movw	r1, #9829	; 0x2665
    5f04:	4813      	ldr	r0, [pc, #76]	; (5f54 <packet_rx_enqueue+0x64>)
    5f06:	f7fa fcd3 	bl	8b0 <bt_ctlr_assert_handle>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    5f0a:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
    5f0e:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
    5f12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5f16:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
	link = node_rx->hdr.onion.link;
    5f1a:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5f1c:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    5f1e:	f894 3749 	ldrb.w	r3, [r4, #1865]	; 0x749
	if (last == _radio.packet_rx_count) {
    5f22:	f894 2748 	ldrb.w	r2, [r4, #1864]	; 0x748
	last = _radio.packet_rx_last + 1;
    5f26:	3301      	adds	r3, #1
    5f28:	b2db      	uxtb	r3, r3
		last = 0;
    5f2a:	429a      	cmp	r2, r3
    5f2c:	bf08      	it	eq
    5f2e:	2300      	moveq	r3, #0
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    5f30:	4a09      	ldr	r2, [pc, #36]	; (5f58 <packet_rx_enqueue+0x68>)
	_radio.packet_rx_last = last;
    5f32:	f884 3749 	strb.w	r3, [r4, #1865]	; 0x749
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    5f36:	f7fb ff64 	bl	1e02 <memq_enqueue>
	LL_ASSERT(link);
    5f3a:	b920      	cbnz	r0, 5f46 <packet_rx_enqueue+0x56>
    5f3c:	f242 6179 	movw	r1, #9849	; 0x2679
    5f40:	4804      	ldr	r0, [pc, #16]	; (5f54 <packet_rx_enqueue+0x64>)
    5f42:	f7fa fcb5 	bl	8b0 <bt_ctlr_assert_handle>
}
    5f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    5f4a:	f006 bda3 	b.w	ca94 <radio_event_callback>
    5f4e:	bf00      	nop
    5f50:	20000340 	.word	0x20000340
    5f54:	000109b4 	.word	0x000109b4
    5f58:	20000a98 	.word	0x20000a98

00005f5c <mayfly_adv_stop>:
{
    5f5c:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    5f5e:	2001      	movs	r0, #1
    5f60:	f7fe fdea 	bl	4b38 <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    5f64:	4604      	mov	r4, r0
    5f66:	b920      	cbnz	r0, 5f72 <mayfly_adv_stop+0x16>
    5f68:	f641 3109 	movw	r1, #6921	; 0x1b09
    5f6c:	4809      	ldr	r0, [pc, #36]	; (5f94 <mayfly_adv_stop+0x38>)
    5f6e:	f7fa fc9f 	bl	8b0 <bt_ctlr_assert_handle>
	node_rx->hdr.handle = 0xffff;
    5f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5f76:	80e3      	strh	r3, [r4, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    5f78:	2306      	movs	r3, #6
    5f7a:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    5f7c:	f104 000b 	add.w	r0, r4, #11
    5f80:	221d      	movs	r2, #29
    5f82:	2100      	movs	r1, #0
    5f84:	f7fa fb64 	bl	650 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    5f88:	233c      	movs	r3, #60	; 0x3c
    5f8a:	72e3      	strb	r3, [r4, #11]
}
    5f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    5f90:	f7ff bfae 	b.w	5ef0 <packet_rx_enqueue>
    5f94:	000109b4 	.word	0x000109b4

00005f98 <terminate_ind_rx_enqueue>:
{
    5f98:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(node_rx->hdr.onion.link);
    5f9a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
{
    5f9e:	4604      	mov	r4, r0
    5fa0:	460e      	mov	r6, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    5fa2:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
	LL_ASSERT(node_rx->hdr.onion.link);
    5fa6:	b923      	cbnz	r3, 5fb2 <terminate_ind_rx_enqueue+0x1a>
    5fa8:	f242 7198 	movw	r1, #10136	; 0x2798
    5fac:	4810      	ldr	r0, [pc, #64]	; (5ff0 <terminate_ind_rx_enqueue+0x58>)
    5fae:	f7fa fc7f 	bl	8b0 <bt_ctlr_assert_handle>
	node_rx->hdr.handle = conn->handle;
    5fb2:	8c23      	ldrh	r3, [r4, #32]
    5fb4:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5fb8:	4a0e      	ldr	r2, [pc, #56]	; (5ff4 <terminate_ind_rx_enqueue+0x5c>)
	*((u8_t *)node_rx->pdu_data) = reason;
    5fba:	f884 60bc 	strb.w	r6, [r4, #188]	; 0xbc
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    5fbe:	2307      	movs	r3, #7
    5fc0:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5fc4:	f892 3780 	ldrb.w	r3, [r2, #1920]	; 0x780
	link = node_rx->hdr.onion.link;
    5fc8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5fcc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    5fd0:	f502 62eb 	add.w	r2, r2, #1880	; 0x758
    5fd4:	4629      	mov	r1, r5
    5fd6:	f7fb ff14 	bl	1e02 <memq_enqueue>
	LL_ASSERT(link);
    5fda:	b920      	cbnz	r0, 5fe6 <terminate_ind_rx_enqueue+0x4e>
    5fdc:	f242 71a8 	movw	r1, #10152	; 0x27a8
    5fe0:	4803      	ldr	r0, [pc, #12]	; (5ff0 <terminate_ind_rx_enqueue+0x58>)
    5fe2:	f7fa fc65 	bl	8b0 <bt_ctlr_assert_handle>
}
    5fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_event_callback();
    5fea:	f006 bd53 	b.w	ca94 <radio_event_callback>
    5fee:	bf00      	nop
    5ff0:	000109b4 	.word	0x000109b4
    5ff4:	20000340 	.word	0x20000340

00005ff8 <isr_scan_tgta_check>:
{
    5ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ffc:	4682      	mov	sl, r0
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    5ffe:	7808      	ldrb	r0, [r1, #0]
				 pdu->direct_ind.tgt_addr, rl_idx)) {
    6000:	f101 0808 	add.w	r8, r1, #8
{
    6004:	460d      	mov	r5, r1
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    6006:	09c0      	lsrs	r0, r0, #7
    6008:	4641      	mov	r1, r8
{
    600a:	4691      	mov	r9, r2
    600c:	461e      	mov	r6, r3
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
    600e:	f007 fdc9 	bl	dba4 <ctrl_rl_addr_resolve>
    6012:	4604      	mov	r4, r0
    6014:	b9d8      	cbnz	r0, 604e <isr_scan_tgta_check+0x56>
    6016:	4f1c      	ldr	r7, [pc, #112]	; (6088 <isr_scan_tgta_check+0x90>)
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    6018:	f1ba 0f00 	cmp.w	sl, #0
    601c:	d10e      	bne.n	603c <isr_scan_tgta_check+0x44>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    601e:	782b      	ldrb	r3, [r5, #0]
    6020:	f897 264d 	ldrb.w	r2, [r7, #1613]	; 0x64d
			BDADDR_SIZE) == 0))) ||
    6024:	09db      	lsrs	r3, r3, #7
    6026:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    602a:	d113      	bne.n	6054 <isr_scan_tgta_check+0x5c>
		(memcmp(&_radio.scanner.init_addr[0],
    602c:	2206      	movs	r2, #6
    602e:	4641      	mov	r1, r8
    6030:	4816      	ldr	r0, [pc, #88]	; (608c <isr_scan_tgta_check+0x94>)
    6032:	f7fa facc 	bl	5ce <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    6036:	b968      	cbnz	r0, 6054 <isr_scan_tgta_check+0x5c>
			BDADDR_SIZE) == 0))) ||
    6038:	2001      	movs	r0, #1
    603a:	e012      	b.n	6062 <isr_scan_tgta_check+0x6a>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
    603c:	f897 364e 	ldrb.w	r3, [r7, #1614]	; 0x64e
    6040:	07db      	lsls	r3, r3, #31
    6042:	d5ec      	bpl.n	601e <isr_scan_tgta_check+0x26>
    6044:	4648      	mov	r0, r9
    6046:	f007 fb75 	bl	d734 <ctrl_lrpa_get>
    604a:	2800      	cmp	r0, #0
    604c:	d0e7      	beq.n	601e <isr_scan_tgta_check+0x26>
}
    604e:	4620      	mov	r0, r4
    6050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6054:	f897 064d 	ldrb.w	r0, [r7, #1613]	; 0x64d
    6058:	f3c0 1001 	ubfx	r0, r0, #4, #2
    605c:	f010 0002 	ands.w	r0, r0, #2
    6060:	d101      	bne.n	6066 <isr_scan_tgta_check+0x6e>
			BDADDR_SIZE) == 0))) ||
    6062:	4604      	mov	r4, r0
    6064:	e7f3      	b.n	604e <isr_scan_tgta_check+0x56>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    6066:	f995 3000 	ldrsb.w	r3, [r5]
    606a:	2b00      	cmp	r3, #0
    606c:	da09      	bge.n	6082 <isr_scan_tgta_check+0x8a>
	    (pdu->rx_addr != 0) &&
    606e:	7b6b      	ldrb	r3, [r5, #13]
    6070:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6074:	2b40      	cmp	r3, #64	; 0x40
    6076:	d104      	bne.n	6082 <isr_scan_tgta_check+0x8a>
		if (dir_report) {
    6078:	2e00      	cmp	r6, #0
    607a:	d0dd      	beq.n	6038 <isr_scan_tgta_check+0x40>
			*dir_report = true;
    607c:	2001      	movs	r0, #1
    607e:	7030      	strb	r0, [r6, #0]
    6080:	e7ef      	b.n	6062 <isr_scan_tgta_check+0x6a>
			BDADDR_SIZE) == 0))) ||
    6082:	2000      	movs	r0, #0
    6084:	e7ed      	b.n	6062 <isr_scan_tgta_check+0x6a>
    6086:	bf00      	nop
    6088:	20000340 	.word	0x20000340
    608c:	20000990 	.word	0x20000990

00006090 <isr_rx_scan_report>:
{
    6090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6094:	4681      	mov	r9, r0
	node_rx = packet_rx_reserve_get(3);
    6096:	2003      	movs	r0, #3
{
    6098:	460f      	mov	r7, r1
    609a:	4616      	mov	r6, r2
	node_rx = packet_rx_reserve_get(3);
    609c:	f7fe fd4c 	bl	4b38 <packet_rx_reserve_get>
	if (node_rx == 0) {
    60a0:	4604      	mov	r4, r0
    60a2:	b3a0      	cbz	r0, 610e <isr_rx_scan_report+0x7e>
	node_rx->hdr.handle = 0xffff;
    60a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    60a8:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    60aa:	4b1a      	ldr	r3, [pc, #104]	; (6114 <isr_rx_scan_report+0x84>)
    60ac:	f893 364d 	ldrb.w	r3, [r3, #1613]	; 0x64d
    60b0:	075a      	lsls	r2, r3, #29
    60b2:	d028      	beq.n	6106 <isr_rx_scan_report+0x76>
		switch (_radio.scanner.phy) {
    60b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    60b8:	b2da      	uxtb	r2, r3
    60ba:	2a01      	cmp	r2, #1
    60bc:	d020      	beq.n	6100 <isr_rx_scan_report+0x70>
    60be:	2a04      	cmp	r2, #4
    60c0:	d01f      	beq.n	6102 <isr_rx_scan_report+0x72>
			LL_ASSERT(0);
    60c2:	f240 515f 	movw	r1, #1375	; 0x55f
    60c6:	4814      	ldr	r0, [pc, #80]	; (6118 <isr_rx_scan_report+0x88>)
    60c8:	f7fa fbf2 	bl	8b0 <bt_ctlr_assert_handle>
			     pdu_adv_rx->len] =
    60cc:	f894 8009 	ldrb.w	r8, [r4, #9]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    60d0:	f104 0508 	add.w	r5, r4, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    60d4:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
    60d8:	f1b9 0f00 	cmp.w	r9, #0
    60dc:	d015      	beq.n	610a <isr_rx_scan_report+0x7a>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    60de:	f008 fc4b 	bl	e978 <radio_rssi_get>
			     pdu_adv_rx->len] =
    60e2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    60e6:	f805 0008 	strb.w	r0, [r5, r8]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    60ea:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 1] = rl_idx;
    60ec:	442b      	add	r3, r5
    60ee:	70df      	strb	r7, [r3, #3]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    60f0:	7a63      	ldrb	r3, [r4, #9]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
    60f2:	441d      	add	r5, r3
    60f4:	712e      	strb	r6, [r5, #4]
	packet_rx_enqueue();
    60f6:	f7ff fefb 	bl	5ef0 <packet_rx_enqueue>
	return 0;
    60fa:	2000      	movs	r0, #0
    60fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    6100:	2303      	movs	r3, #3
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    6102:	7123      	strb	r3, [r4, #4]
    6104:	e7e2      	b.n	60cc <isr_rx_scan_report+0x3c>
    6106:	2302      	movs	r3, #2
    6108:	e7fb      	b.n	6102 <isr_rx_scan_report+0x72>
			     pdu_adv_rx->len] =
    610a:	207f      	movs	r0, #127	; 0x7f
    610c:	e7eb      	b.n	60e6 <isr_rx_scan_report+0x56>
		return 1;
    610e:	2001      	movs	r0, #1
}
    6110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6114:	20000340 	.word	0x20000340
    6118:	000109b4 	.word	0x000109b4

0000611c <rx_fc_lock>:
	if (_radio.fc_req == _radio.fc_ack) {
    611c:	4a0b      	ldr	r2, [pc, #44]	; (614c <rx_fc_lock+0x30>)
    611e:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    6122:	f892 1789 	ldrb.w	r1, [r2, #1929]	; 0x789
    6126:	4299      	cmp	r1, r3
    6128:	d10e      	bne.n	6148 <rx_fc_lock+0x2c>
		_radio.fc_handle[_radio.fc_req] = handle;
    612a:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    612e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    6132:	f8a3 0782 	strh.w	r0, [r3, #1922]	; 0x782
		req = _radio.fc_req + 1;
    6136:	f892 3788 	ldrb.w	r3, [r2, #1928]	; 0x788
    613a:	3301      	adds	r3, #1
    613c:	b2db      	uxtb	r3, r3
			req = 0;
    613e:	2b03      	cmp	r3, #3
    6140:	bf08      	it	eq
    6142:	2300      	moveq	r3, #0
		_radio.fc_req = req;
    6144:	f882 3788 	strb.w	r3, [r2, #1928]	; 0x788
    6148:	4770      	bx	lr
    614a:	bf00      	nop
    614c:	20000340 	.word	0x20000340

00006150 <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    6150:	b120      	cbz	r0, 615c <ticker_success_assert+0xc>
    6152:	f241 21b4 	movw	r1, #4788	; 0x12b4
    6156:	4802      	ldr	r0, [pc, #8]	; (6160 <ticker_success_assert+0x10>)
    6158:	f7fa bbaa 	b.w	8b0 <bt_ctlr_assert_handle>
    615c:	4770      	bx	lr
    615e:	bf00      	nop
    6160:	000109b4 	.word	0x000109b4

00006164 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    6164:	2801      	cmp	r0, #1
    6166:	4b0a      	ldr	r3, [pc, #40]	; (6190 <ticker_stop_adv_assert+0x2c>)
    6168:	d10a      	bne.n	6180 <ticker_stop_adv_assert+0x1c>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    616a:	7c9a      	ldrb	r2, [r3, #18]
    616c:	2a05      	cmp	r2, #5
    616e:	d102      	bne.n	6176 <ticker_stop_adv_assert+0x12>
			_radio.ticker_id_stop = 0;
    6170:	2200      	movs	r2, #0
    6172:	749a      	strb	r2, [r3, #18]
    6174:	4770      	bx	lr
			LL_ASSERT(0);
    6176:	f241 21c5 	movw	r1, #4805	; 0x12c5
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    617a:	4806      	ldr	r0, [pc, #24]	; (6194 <ticker_stop_adv_assert+0x30>)
    617c:	f7fa bb98 	b.w	8b0 <bt_ctlr_assert_handle>
    6180:	7c1b      	ldrb	r3, [r3, #16]
    6182:	2b05      	cmp	r3, #5
    6184:	d102      	bne.n	618c <ticker_stop_adv_assert+0x28>
    6186:	f241 21cc 	movw	r1, #4812	; 0x12cc
    618a:	e7f6      	b.n	617a <ticker_stop_adv_assert+0x16>
    618c:	4770      	bx	lr
    618e:	bf00      	nop
    6190:	20000340 	.word	0x20000340
    6194:	000109b4 	.word	0x000109b4

00006198 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    6198:	2801      	cmp	r0, #1
    619a:	4b0a      	ldr	r3, [pc, #40]	; (61c4 <ticker_stop_scan_assert+0x2c>)
    619c:	d10a      	bne.n	61b4 <ticker_stop_scan_assert+0x1c>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    619e:	7c9a      	ldrb	r2, [r3, #18]
    61a0:	2a06      	cmp	r2, #6
    61a2:	d102      	bne.n	61aa <ticker_stop_scan_assert+0x12>
			_radio.ticker_id_stop = 0;
    61a4:	2200      	movs	r2, #0
    61a6:	749a      	strb	r2, [r3, #18]
    61a8:	4770      	bx	lr
			LL_ASSERT(0);
    61aa:	f241 21de 	movw	r1, #4830	; 0x12de
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    61ae:	4806      	ldr	r0, [pc, #24]	; (61c8 <ticker_stop_scan_assert+0x30>)
    61b0:	f7fa bb7e 	b.w	8b0 <bt_ctlr_assert_handle>
    61b4:	7c1b      	ldrb	r3, [r3, #16]
    61b6:	2b06      	cmp	r3, #6
    61b8:	d102      	bne.n	61c0 <ticker_stop_scan_assert+0x28>
    61ba:	f241 21e5 	movw	r1, #4837	; 0x12e5
    61be:	e7f6      	b.n	61ae <ticker_stop_scan_assert+0x16>
    61c0:	4770      	bx	lr
    61c2:	bf00      	nop
    61c4:	20000340 	.word	0x20000340
    61c8:	000109b4 	.word	0x000109b4

000061cc <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    61cc:	b140      	cbz	r0, 61e0 <ticker_update_adv_assert+0x14>
    61ce:	4b05      	ldr	r3, [pc, #20]	; (61e4 <ticker_update_adv_assert+0x18>)
    61d0:	7c9b      	ldrb	r3, [r3, #18]
    61d2:	2b05      	cmp	r3, #5
    61d4:	d004      	beq.n	61e0 <ticker_update_adv_assert+0x14>
    61d6:	f241 21ee 	movw	r1, #4846	; 0x12ee
    61da:	4803      	ldr	r0, [pc, #12]	; (61e8 <ticker_update_adv_assert+0x1c>)
    61dc:	f7fa bb68 	b.w	8b0 <bt_ctlr_assert_handle>
    61e0:	4770      	bx	lr
    61e2:	bf00      	nop
    61e4:	20000340 	.word	0x20000340
    61e8:	000109b4 	.word	0x000109b4

000061ec <ticker_update_slave_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    61ec:	b148      	cbz	r0, 6202 <ticker_update_slave_assert+0x16>
    61ee:	4b05      	ldr	r3, [pc, #20]	; (6204 <ticker_update_slave_assert+0x18>)
    61f0:	7c9b      	ldrb	r3, [r3, #18]
    61f2:	b2c9      	uxtb	r1, r1
    61f4:	4299      	cmp	r1, r3
    61f6:	d004      	beq.n	6202 <ticker_update_slave_assert+0x16>
    61f8:	f241 21f6 	movw	r1, #4854	; 0x12f6
    61fc:	4802      	ldr	r0, [pc, #8]	; (6208 <ticker_update_slave_assert+0x1c>)
    61fe:	f7fa bb57 	b.w	8b0 <bt_ctlr_assert_handle>
    6202:	4770      	bx	lr
    6204:	20000340 	.word	0x20000340
    6208:	000109b4 	.word	0x000109b4

0000620c <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    620c:	4b04      	ldr	r3, [pc, #16]	; (6220 <ticker_job_disable+0x14>)
    620e:	7d1b      	ldrb	r3, [r3, #20]
    6210:	b123      	cbz	r3, 621c <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6212:	2101      	movs	r1, #1
    6214:	2200      	movs	r2, #0
    6216:	4608      	mov	r0, r1
    6218:	f7fb be3c 	b.w	1e94 <mayfly_enable>
    621c:	4770      	bx	lr
    621e:	bf00      	nop
    6220:	20000340 	.word	0x20000340

00006224 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    6224:	2806      	cmp	r0, #6
{
    6226:	b510      	push	{r4, lr}
    6228:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    622a:	d90a      	bls.n	6242 <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    622c:	4b09      	ldr	r3, [pc, #36]	; (6254 <hdr_conn_get+0x30>)
    622e:	1fc2      	subs	r2, r0, #7
    6230:	b292      	uxth	r2, r2
    6232:	f44f 71aa 	mov.w	r1, #340	; 0x154
    6236:	f8d3 0710 	ldr.w	r0, [r3, #1808]	; 0x710
    623a:	f7fb fdbd 	bl	1db8 <mem_get>
    623e:	6020      	str	r0, [r4, #0]
    6240:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    6242:	2805      	cmp	r0, #5
    6244:	d004      	beq.n	6250 <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    6246:	2806      	cmp	r0, #6
	return NULL;
    6248:	4803      	ldr	r0, [pc, #12]	; (6258 <hdr_conn_get+0x34>)
    624a:	bf18      	it	ne
    624c:	2000      	movne	r0, #0
    624e:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    6250:	4802      	ldr	r0, [pc, #8]	; (625c <hdr_conn_get+0x38>)
}
    6252:	bd10      	pop	{r4, pc}
    6254:	20000340 	.word	0x20000340
    6258:	2000097c 	.word	0x2000097c
    625c:	20000358 	.word	0x20000358

00006260 <mayfly_xtal_retain.part.13>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    6260:	b538      	push	{r3, r4, r5, lr}
			s_xtal_retained = 0;
    6262:	4b0f      	ldr	r3, [pc, #60]	; (62a0 <mayfly_xtal_retain.part.13+0x40>)
    6264:	2400      	movs	r4, #0
    6266:	701c      	strb	r4, [r3, #0]
			switch (caller_id) {
    6268:	4605      	mov	r5, r0
    626a:	b1b0      	cbz	r0, 629a <mayfly_xtal_retain.part.13+0x3a>
    626c:	2801      	cmp	r0, #1
    626e:	d10d      	bne.n	628c <mayfly_xtal_retain.part.13+0x2c>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    6270:	4b0c      	ldr	r3, [pc, #48]	; (62a4 <mayfly_xtal_retain.part.13+0x44>)
			retval = mayfly_enqueue(caller_id,
    6272:	2200      	movs	r2, #0
    6274:	4611      	mov	r1, r2
    6276:	4628      	mov	r0, r5
    6278:	f7fb fe34 	bl	1ee4 <mayfly_enqueue>
			LL_ASSERT(!retval);
    627c:	b178      	cbz	r0, 629e <mayfly_xtal_retain.part.13+0x3e>
    627e:	f241 319a 	movw	r1, #5018	; 0x139a
    6282:	4809      	ldr	r0, [pc, #36]	; (62a8 <mayfly_xtal_retain.part.13+0x48>)
}
    6284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LL_ASSERT(!retval);
    6288:	f7fa bb12 	b.w	8b0 <bt_ctlr_assert_handle>
				LL_ASSERT(0);
    628c:	f241 3193 	movw	r1, #5011	; 0x1393
    6290:	4805      	ldr	r0, [pc, #20]	; (62a8 <mayfly_xtal_retain.part.13+0x48>)
    6292:	f7fa fb0d 	bl	8b0 <bt_ctlr_assert_handle>
			struct mayfly *p_mfy_xtal_stop = NULL;
    6296:	4623      	mov	r3, r4
    6298:	e7eb      	b.n	6272 <mayfly_xtal_retain.part.13+0x12>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    629a:	4b04      	ldr	r3, [pc, #16]	; (62ac <mayfly_xtal_retain.part.13+0x4c>)
    629c:	e7e9      	b.n	6272 <mayfly_xtal_retain.part.13+0x12>
    629e:	bd38      	pop	{r3, r4, r5, pc}
    62a0:	20000b84 	.word	0x20000b84
    62a4:	20005588 	.word	0x20005588
    62a8:	000109b4 	.word	0x000109b4
    62ac:	20005578 	.word	0x20005578

000062b0 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    62b0:	2200      	movs	r2, #0
{
    62b2:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    62b4:	4611      	mov	r1, r2
    62b6:	4b06      	ldr	r3, [pc, #24]	; (62d0 <event_active+0x20>)
    62b8:	4610      	mov	r0, r2
    62ba:	f7fb fe13 	bl	1ee4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    62be:	b130      	cbz	r0, 62ce <event_active+0x1e>
    62c0:	f241 3122 	movw	r1, #4898	; 0x1322
    62c4:	4803      	ldr	r0, [pc, #12]	; (62d4 <event_active+0x24>)
}
    62c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LL_ASSERT(!retval);
    62ca:	f7fa baf1 	b.w	8b0 <bt_ctlr_assert_handle>
    62ce:	bd08      	pop	{r3, pc}
    62d0:	200054b8 	.word	0x200054b8
    62d4:	000109b4 	.word	0x000109b4

000062d8 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    62d8:	2200      	movs	r2, #0
{
    62da:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    62dc:	4611      	mov	r1, r2
    62de:	4b06      	ldr	r3, [pc, #24]	; (62f8 <event_xtal+0x20>)
    62e0:	4610      	mov	r0, r2
    62e2:	f7fb fdff 	bl	1ee4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    62e6:	b130      	cbz	r0, 62f6 <event_xtal+0x1e>
    62e8:	f241 3159 	movw	r1, #4953	; 0x1359
    62ec:	4803      	ldr	r0, [pc, #12]	; (62fc <event_xtal+0x24>)
}
    62ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LL_ASSERT(!retval);
    62f2:	f7fa badd 	b.w	8b0 <bt_ctlr_assert_handle>
    62f6:	bd08      	pop	{r3, pc}
    62f8:	20005558 	.word	0x20005558
    62fc:	000109b4 	.word	0x000109b4

00006300 <mayfly_radio_active.part.16>:
static void mayfly_radio_active(void *params)
    6300:	b510      	push	{r4, lr}
		LL_ASSERT(s_active);
    6302:	4c09      	ldr	r4, [pc, #36]	; (6328 <mayfly_radio_active.part.16+0x28>)
    6304:	7823      	ldrb	r3, [r4, #0]
    6306:	b923      	cbnz	r3, 6312 <mayfly_radio_active.part.16+0x12>
    6308:	f241 3106 	movw	r1, #4870	; 0x1306
    630c:	4807      	ldr	r0, [pc, #28]	; (632c <mayfly_radio_active.part.16+0x2c>)
    630e:	f7fa facf 	bl	8b0 <bt_ctlr_assert_handle>
		if (--s_active) {
    6312:	7820      	ldrb	r0, [r4, #0]
    6314:	3801      	subs	r0, #1
    6316:	b2c0      	uxtb	r0, r0
    6318:	7020      	strb	r0, [r4, #0]
    631a:	b918      	cbnz	r0, 6324 <mayfly_radio_active.part.16+0x24>
}
    631c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_active_callback(0);
    6320:	f006 bbb6 	b.w	ca90 <radio_active_callback>
    6324:	bd10      	pop	{r4, pc}
    6326:	bf00      	nop
    6328:	20000b21 	.word	0x20000b21
    632c:	000109b4 	.word	0x000109b4

00006330 <mayfly_radio_active>:
	if ((u32_t)params) {
    6330:	b138      	cbz	r0, 6342 <mayfly_radio_active+0x12>
		if (s_active++) {
    6332:	4a05      	ldr	r2, [pc, #20]	; (6348 <mayfly_radio_active+0x18>)
    6334:	7813      	ldrb	r3, [r2, #0]
    6336:	1c59      	adds	r1, r3, #1
    6338:	7011      	strb	r1, [r2, #0]
    633a:	b923      	cbnz	r3, 6346 <mayfly_radio_active+0x16>
		radio_active_callback(1);
    633c:	2001      	movs	r0, #1
    633e:	f006 bba7 	b.w	ca90 <radio_active_callback>
    6342:	f7ff bfdd 	b.w	6300 <mayfly_radio_active.part.16>
    6346:	4770      	bx	lr
    6348:	20000b21 	.word	0x20000b21

0000634c <mayfly_radio_inactive>:
{
    634c:	f7ff bfd8 	b.w	6300 <mayfly_radio_active.part.16>

00006350 <ticker_stop_adv_stop>:
{
    6350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6352:	4c54      	ldr	r4, [pc, #336]	; (64a4 <ticker_stop_adv_stop+0x154>)
	if (status != TICKER_STATUS_SUCCESS) {
    6354:	b148      	cbz	r0, 636a <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    6356:	7ca3      	ldrb	r3, [r4, #18]
    6358:	2b05      	cmp	r3, #5
    635a:	d004      	beq.n	6366 <ticker_stop_adv_stop+0x16>
    635c:	f641 31a2 	movw	r1, #7074	; 0x1ba2
	LL_ASSERT(!retval);
    6360:	4851      	ldr	r0, [pc, #324]	; (64a8 <ticker_stop_adv_stop+0x158>)
    6362:	f7fa faa5 	bl	8b0 <bt_ctlr_assert_handle>
}
    6366:	b004      	add	sp, #16
    6368:	bd10      	pop	{r4, pc}
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    636a:	7c23      	ldrb	r3, [r4, #16]
    636c:	2b05      	cmp	r3, #5
    636e:	d002      	beq.n	6376 <ticker_stop_adv_stop+0x26>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    6370:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    6372:	2b05      	cmp	r3, #5
    6374:	d17a      	bne.n	646c <ticker_stop_adv_stop+0x11c>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    6376:	ab04      	add	r3, sp, #16
    6378:	2202      	movs	r2, #2
    637a:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    637e:	2200      	movs	r2, #0
    6380:	9300      	str	r3, [sp, #0]
    6382:	2101      	movs	r1, #1
    6384:	4b49      	ldr	r3, [pc, #292]	; (64ac <ticker_stop_adv_stop+0x15c>)
    6386:	4610      	mov	r0, r2
    6388:	f7fc fbfc 	bl	2b84 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    638c:	2802      	cmp	r0, #2
    638e:	d014      	beq.n	63ba <ticker_stop_adv_stop+0x6a>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    6390:	9b02      	ldr	r3, [sp, #8]
    6392:	b1fb      	cbz	r3, 63d4 <ticker_stop_adv_stop+0x84>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    6394:	9802      	ldr	r0, [sp, #8]
    6396:	2801      	cmp	r0, #1
    6398:	f040 8081 	bne.w	649e <ticker_stop_adv_stop+0x14e>
		if (_radio.role != ROLE_NONE) {
    639c:	7ce3      	ldrb	r3, [r4, #19]
    639e:	2b00      	cmp	r3, #0
    63a0:	d064      	beq.n	646c <ticker_stop_adv_stop+0x11c>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    63a2:	4b43      	ldr	r3, [pc, #268]	; (64b0 <ticker_stop_adv_stop+0x160>)
    63a4:	2204      	movs	r2, #4
    63a6:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    63a8:	2200      	movs	r2, #0
    63aa:	4611      	mov	r1, r2
    63ac:	f7fb fd9a 	bl	1ee4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    63b0:	2800      	cmp	r0, #0
    63b2:	d05b      	beq.n	646c <ticker_stop_adv_stop+0x11c>
    63b4:	f641 318b 	movw	r1, #7051	; 0x1b8b
    63b8:	e055      	b.n	6466 <ticker_stop_adv_stop+0x116>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    63ba:	2201      	movs	r2, #1
    63bc:	4611      	mov	r1, r2
    63be:	4610      	mov	r0, r2
    63c0:	f7fb fd68 	bl	1e94 <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    63c4:	9b02      	ldr	r3, [sp, #8]
    63c6:	2b02      	cmp	r3, #2
    63c8:	d1e2      	bne.n	6390 <ticker_stop_adv_stop+0x40>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    63ca:	2101      	movs	r1, #1
    63cc:	2000      	movs	r0, #0
    63ce:	f7fc fc93 	bl	2cf8 <ticker_job_sched>
    63d2:	e7f7      	b.n	63c4 <ticker_stop_adv_stop+0x74>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    63d4:	2302      	movs	r3, #2
    63d6:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    63d8:	7c23      	ldrb	r3, [r4, #16]
    63da:	b923      	cbnz	r3, 63e6 <ticker_stop_adv_stop+0x96>
    63dc:	f641 3137 	movw	r1, #6967	; 0x1b37
    63e0:	4831      	ldr	r0, [pc, #196]	; (64a8 <ticker_stop_adv_stop+0x158>)
    63e2:	f7fa fa65 	bl	8b0 <bt_ctlr_assert_handle>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    63e6:	ab03      	add	r3, sp, #12
    63e8:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    63ea:	2000      	movs	r0, #0
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    63ec:	9300      	str	r3, [sp, #0]
    63ee:	4611      	mov	r1, r2
    63f0:	4b2e      	ldr	r3, [pc, #184]	; (64ac <ticker_stop_adv_stop+0x15c>)
		_radio.ticker_id_prepare = 0;
    63f2:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    63f4:	f7fc fbc6 	bl	2b84 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    63f8:	2802      	cmp	r0, #2
    63fa:	d019      	beq.n	6430 <ticker_stop_adv_stop+0xe0>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    63fc:	9a03      	ldr	r2, [sp, #12]
    63fe:	b322      	cbz	r2, 644a <ticker_stop_adv_stop+0xfa>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    6400:	9803      	ldr	r0, [sp, #12]
    6402:	2801      	cmp	r0, #1
    6404:	d148      	bne.n	6498 <ticker_stop_adv_stop+0x148>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    6406:	2200      	movs	r2, #0
    6408:	4b2a      	ldr	r3, [pc, #168]	; (64b4 <ticker_stop_adv_stop+0x164>)
    640a:	4611      	mov	r1, r2
    640c:	f7fb fd6a 	bl	1ee4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    6410:	b120      	cbz	r0, 641c <ticker_stop_adv_stop+0xcc>
    6412:	f641 3171 	movw	r1, #7025	; 0x1b71
    6416:	4824      	ldr	r0, [pc, #144]	; (64a8 <ticker_stop_adv_stop+0x158>)
    6418:	f7fa fa4a 	bl	8b0 <bt_ctlr_assert_handle>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    641c:	2200      	movs	r2, #0
    641e:	4b26      	ldr	r3, [pc, #152]	; (64b8 <ticker_stop_adv_stop+0x168>)
    6420:	4611      	mov	r1, r2
    6422:	2001      	movs	r0, #1
    6424:	f7fb fd5e 	bl	1ee4 <mayfly_enqueue>
			LL_ASSERT(!ret);
    6428:	b300      	cbz	r0, 646c <ticker_stop_adv_stop+0x11c>
    642a:	f641 3177 	movw	r1, #7031	; 0x1b77
    642e:	e01a      	b.n	6466 <ticker_stop_adv_stop+0x116>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    6430:	2201      	movs	r2, #1
    6432:	4611      	mov	r1, r2
    6434:	4610      	mov	r0, r2
    6436:	f7fb fd2d 	bl	1e94 <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    643a:	9b03      	ldr	r3, [sp, #12]
    643c:	2b02      	cmp	r3, #2
    643e:	d1dd      	bne.n	63fc <ticker_stop_adv_stop+0xac>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    6440:	2101      	movs	r1, #1
    6442:	2000      	movs	r0, #0
    6444:	f7fc fc58 	bl	2cf8 <ticker_job_sched>
    6448:	e7f7      	b.n	643a <ticker_stop_adv_stop+0xea>
			u32_t ticks_xtal_to_start =
    644a:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    644c:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    644e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    6452:	428b      	cmp	r3, r1
    6454:	d216      	bcs.n	6484 <ticker_stop_adv_stop+0x134>
				ret = mayfly_enqueue(
    6456:	4b17      	ldr	r3, [pc, #92]	; (64b4 <ticker_stop_adv_stop+0x164>)
    6458:	4611      	mov	r1, r2
    645a:	2001      	movs	r0, #1
    645c:	f7fb fd42 	bl	1ee4 <mayfly_enqueue>
				LL_ASSERT(!ret);
    6460:	b120      	cbz	r0, 646c <ticker_stop_adv_stop+0x11c>
    6462:	f641 3161 	movw	r1, #7009	; 0x1b61
		LL_ASSERT(0);
    6466:	4810      	ldr	r0, [pc, #64]	; (64a8 <ticker_stop_adv_stop+0x158>)
    6468:	f7fa fa22 	bl	8b0 <bt_ctlr_assert_handle>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    646c:	2200      	movs	r2, #0
    646e:	4b13      	ldr	r3, [pc, #76]	; (64bc <ticker_stop_adv_stop+0x16c>)
    6470:	4611      	mov	r1, r2
    6472:	2001      	movs	r0, #1
    6474:	f7fb fd36 	bl	1ee4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6478:	2800      	cmp	r0, #0
    647a:	f43f af74 	beq.w	6366 <ticker_stop_adv_stop+0x16>
    647e:	f641 31b1 	movw	r1, #7089	; 0x1bb1
    6482:	e76d      	b.n	6360 <ticker_stop_adv_stop+0x10>
				ret = mayfly_enqueue(
    6484:	4b0c      	ldr	r3, [pc, #48]	; (64b8 <ticker_stop_adv_stop+0x168>)
    6486:	4611      	mov	r1, r2
    6488:	2001      	movs	r0, #1
    648a:	f7fb fd2b 	bl	1ee4 <mayfly_enqueue>
				LL_ASSERT(!ret);
    648e:	2800      	cmp	r0, #0
    6490:	d0ec      	beq.n	646c <ticker_stop_adv_stop+0x11c>
    6492:	f641 3168 	movw	r1, #7016	; 0x1b68
    6496:	e7e6      	b.n	6466 <ticker_stop_adv_stop+0x116>
			LL_ASSERT(0);
    6498:	f641 3179 	movw	r1, #7033	; 0x1b79
    649c:	e7e3      	b.n	6466 <ticker_stop_adv_stop+0x116>
		LL_ASSERT(0);
    649e:	f641 3193 	movw	r1, #7059	; 0x1b93
    64a2:	e7e0      	b.n	6466 <ticker_stop_adv_stop+0x116>
    64a4:	20000340 	.word	0x20000340
    64a8:	000109b4 	.word	0x000109b4
    64ac:	00004ab9 	.word	0x00004ab9
    64b0:	20005508 	.word	0x20005508
    64b4:	200054d8 	.word	0x200054d8
    64b8:	20005598 	.word	0x20005598
    64bc:	200054a8 	.word	0x200054a8

000064c0 <scan_ticker_enable>:
static void scan_ticker_enable (void){
    64c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    64c4:	4f30      	ldr	r7, [pc, #192]	; (6588 <scan_ticker_enable+0xc8>)
static void scan_ticker_enable (void){
    64c6:	b08a      	sub	sp, #40	; 0x28
	ticks_anchor = ticker_ticks_now_get();
    64c8:	f7fc fc2c 	bl	2d24 <ticker_ticks_now_get>
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    64cc:	f8d7 8660 	ldr.w	r8, [r7, #1632]	; 0x660
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    64d0:	4b2e      	ldr	r3, [pc, #184]	; (658c <scan_ticker_enable+0xcc>)
    64d2:	f240 2471 	movw	r4, #625	; 0x271
    64d6:	fb04 f408 	mul.w	r4, r4, r8
    64da:	fba4 4503 	umull	r4, r5, r4, r3
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    64de:	f642 5355 	movw	r3, #11605	; 0x2d55
    64e2:	9308      	str	r3, [sp, #32]
    64e4:	4b2a      	ldr	r3, [pc, #168]	; (6590 <scan_ticker_enable+0xd0>)
    64e6:	9307      	str	r3, [sp, #28]
    64e8:	2600      	movs	r6, #0
    64ea:	4b2a      	ldr	r3, [pc, #168]	; (6594 <scan_ticker_enable+0xd4>)
    64ec:	9606      	str	r6, [sp, #24]
    64ee:	9305      	str	r3, [sp, #20]
    64f0:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
    64f4:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
    64f8:	9603      	str	r6, [sp, #12]
    64fa:	4413      	add	r3, r2
    64fc:	9304      	str	r3, [sp, #16]
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    64fe:	4620      	mov	r0, r4
    6500:	a31f      	add	r3, pc, #124	; (adr r3, 6580 <scan_ticker_enable+0xc0>)
    6502:	e9d3 2300 	ldrd	r2, r3, [r3]
    6506:	4629      	mov	r1, r5
    6508:	f7f9 feae 	bl	268 <__aeabi_uldivmod>
    650c:	4a22      	ldr	r2, [pc, #136]	; (6598 <scan_ticker_enable+0xd8>)
    650e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6512:	2307      	movs	r3, #7
    6514:	2100      	movs	r1, #0
    6516:	4343      	muls	r3, r0
    6518:	fb02 3301 	mla	r3, r2, r1, r3
    651c:	fba0 0102 	umull	r0, r1, r0, r2
    6520:	1a20      	subs	r0, r4, r0
    6522:	4419      	add	r1, r3
    6524:	eb65 0101 	sbc.w	r1, r5, r1
    6528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    652c:	2300      	movs	r3, #0
    652e:	f7f9 fe9b 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6532:	9002      	str	r0, [sp, #8]
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    6534:	4819      	ldr	r0, [pc, #100]	; (659c <scan_ticker_enable+0xdc>)
    6536:	2391      	movs	r3, #145	; 0x91
    6538:	fba8 0100 	umull	r0, r1, r8, r0
    653c:	fb03 1108 	mla	r1, r3, r8, r1
    6540:	a30f      	add	r3, pc, #60	; (adr r3, 6580 <scan_ticker_enable+0xc0>)
    6542:	e9d3 2300 	ldrd	r2, r3, [r3]
    6546:	f7f9 fe8f 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    654a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    654e:	9001      	str	r0, [sp, #4]
    6550:	9600      	str	r6, [sp, #0]
    6552:	f8d7 370c 	ldr.w	r3, [r7, #1804]	; 0x70c
    6556:	2206      	movs	r2, #6
    6558:	4631      	mov	r1, r6
    655a:	4630      	mov	r0, r6
    655c:	f7fc fa74 	bl	2a48 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6560:	f030 0302 	bics.w	r3, r0, #2
    6564:	d007      	beq.n	6576 <scan_ticker_enable+0xb6>
    6566:	480e      	ldr	r0, [pc, #56]	; (65a0 <scan_ticker_enable+0xe0>)
    6568:	f642 5158 	movw	r1, #11608	; 0x2d58
}
    656c:	b00a      	add	sp, #40	; 0x28
    656e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6572:	f7fa b99d 	b.w	8b0 <bt_ctlr_assert_handle>
}
    6576:	b00a      	add	sp, #40	; 0x28
    6578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    657c:	f3af 8000 	nop.w
    6580:	1afd498d 	.word	0x1afd498d
    6584:	00000007 	.word	0x00000007
    6588:	20000340 	.word	0x20000340
    658c:	3b9aca00 	.word	0x3b9aca00
    6590:	00006151 	.word	0x00006151
    6594:	0000687d 	.word	0x0000687d
    6598:	1afd498d 	.word	0x1afd498d
    659c:	84e72a00 	.word	0x84e72a00
    65a0:	000109b4 	.word	0x000109b4

000065a4 <aux_packet_function>:
scan_ticker_enable();	
    65a4:	f7ff bf8c 	b.w	64c0 <scan_ticker_enable>

000065a8 <prepare_normal_set>:
{
    65a8:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    65aa:	6804      	ldr	r4, [r0, #0]
    65ac:	2c00      	cmp	r4, #0
{
    65ae:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    65b0:	da1f      	bge.n	65f2 <prepare_normal_set+0x4a>
		u32_t ticks_prepare_to_start =
    65b2:	6843      	ldr	r3, [r0, #4]
    65b4:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    65b6:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    65b8:	429d      	cmp	r5, r3
    65ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    65be:	bf34      	ite	cc
    65c0:	1ae4      	subcc	r4, r4, r3
    65c2:	1b64      	subcs	r4, r4, r5
		ticker_status =
    65c4:	4b0c      	ldr	r3, [pc, #48]	; (65f8 <prepare_normal_set+0x50>)
    65c6:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    65c8:	b2a4      	uxth	r4, r4
		ticker_status =
    65ca:	2300      	movs	r3, #0
    65cc:	9304      	str	r3, [sp, #16]
    65ce:	9303      	str	r3, [sp, #12]
    65d0:	9302      	str	r3, [sp, #8]
    65d2:	4618      	mov	r0, r3
    65d4:	9401      	str	r4, [sp, #4]
    65d6:	9400      	str	r4, [sp, #0]
    65d8:	f7fc fa86 	bl	2ae8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    65dc:	f030 0302 	bics.w	r3, r0, #2
    65e0:	d007      	beq.n	65f2 <prepare_normal_set+0x4a>
    65e2:	4806      	ldr	r0, [pc, #24]	; (65fc <prepare_normal_set+0x54>)
    65e4:	f241 31cd 	movw	r1, #5069	; 0x13cd
}
    65e8:	b009      	add	sp, #36	; 0x24
    65ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    65ee:	f7fa b95f 	b.w	8b0 <bt_ctlr_assert_handle>
}
    65f2:	b009      	add	sp, #36	; 0x24
    65f4:	bd30      	pop	{r4, r5, pc}
    65f6:	bf00      	nop
    65f8:	00004ac9 	.word	0x00004ac9
    65fc:	000109b4 	.word	0x000109b4

00006600 <adv_scan_configure.constprop.25>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    6600:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    6602:	ad02      	add	r5, sp, #8
    6604:	4b10      	ldr	r3, [pc, #64]	; (6648 <adv_scan_configure.constprop.25+0x48>)
    6606:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    660a:	4604      	mov	r4, r0
	radio_reset();
    660c:	f008 f848 	bl	e6a0 <radio_reset>
	radio_tx_power_set(0);
    6610:	2000      	movs	r0, #0
    6612:	f008 f88d 	bl	e730 <radio_tx_power_set>
	radio_isr_set(isr);
    6616:	480d      	ldr	r0, [pc, #52]	; (664c <adv_scan_configure.constprop.25+0x4c>)
    6618:	f008 f80c 	bl	e634 <radio_isr_set>
	radio_phy_set(phy, flags);
    661c:	2101      	movs	r1, #1
    661e:	4620      	mov	r0, r4
    6620:	f008 f858 	bl	e6d4 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    6624:	4628      	mov	r0, r5
    6626:	f008 f8a1 	bl	e76c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    662a:	0062      	lsls	r2, r4, #1
    662c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    6630:	21ff      	movs	r1, #255	; 0xff
    6632:	2008      	movs	r0, #8
    6634:	f008 f8b2 	bl	e79c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6638:	4905      	ldr	r1, [pc, #20]	; (6650 <adv_scan_configure.constprop.25+0x50>)
    663a:	f240 605b 	movw	r0, #1627	; 0x65b
    663e:	f008 f94f 	bl	e8e0 <radio_crc_configure>
}
    6642:	b003      	add	sp, #12
    6644:	bd30      	pop	{r4, r5, pc}
    6646:	bf00      	nop
    6648:	8e89bed6 	.word	0x8e89bed6
    664c:	00009b59 	.word	0x00009b59
    6650:	00555555 	.word	0x00555555

00006654 <event_stop.constprop.26>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    6654:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    6656:	4b08      	ldr	r3, [pc, #32]	; (6678 <event_stop.constprop.26+0x24>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6658:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    665a:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    665c:	4611      	mov	r1, r2
    665e:	4610      	mov	r0, r2
    6660:	f7fb fc40 	bl	1ee4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    6664:	b130      	cbz	r0, 6674 <event_stop.constprop.26+0x20>
    6666:	f241 61b5 	movw	r1, #5813	; 0x16b5
    666a:	4804      	ldr	r0, [pc, #16]	; (667c <event_stop.constprop.26+0x28>)
}
    666c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LL_ASSERT(!retval);
    6670:	f7fa b91e 	b.w	8b0 <bt_ctlr_assert_handle>
    6674:	bd08      	pop	{r3, pc}
    6676:	bf00      	nop
    6678:	200054f8 	.word	0x200054f8
    667c:	000109b4 	.word	0x000109b4

00006680 <event_common_prepare>:
{
    6680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6684:	4690      	mov	r8, r2
    6686:	b08f      	sub	sp, #60	; 0x3c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    6688:	f8d8 4000 	ldr.w	r4, [r8]
{
    668c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    668e:	920c      	str	r2, [sp, #48]	; 0x30
    6690:	469b      	mov	fp, r3
    6692:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    6694:	910b      	str	r1, [sp, #44]	; 0x2c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    6696:	2c00      	cmp	r4, #0
{
    6698:	4681      	mov	r9, r0
    669a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    669c:	f89d a064 	ldrb.w	sl, [sp, #100]	; 0x64
    66a0:	920d      	str	r2, [sp, #52]	; 0x34
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    66a2:	f8db 5000 	ldr.w	r5, [fp]
	if (_ticks_xtal_to_start & XON_BITMASK) {
    66a6:	da03      	bge.n	66b0 <event_common_prepare+0x30>
		_ticks_xtal_to_start =
    66a8:	42ab      	cmp	r3, r5
    66aa:	bf38      	it	cc
    66ac:	462b      	movcc	r3, r5
    66ae:	461c      	mov	r4, r3
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    66b0:	42ac      	cmp	r4, r5
    66b2:	4f5a      	ldr	r7, [pc, #360]	; (681c <event_common_prepare+0x19c>)
    66b4:	f240 8083 	bls.w	67be <event_common_prepare+0x13e>
		ticker_status =
    66b8:	f241 63e4 	movw	r3, #5860	; 0x16e4
    66bc:	9308      	str	r3, [sp, #32]
    66be:	4b58      	ldr	r3, [pc, #352]	; (6820 <event_common_prepare+0x1a0>)
    66c0:	9305      	str	r3, [sp, #20]
    66c2:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    66c4:	1b63      	subs	r3, r4, r5
		ticker_status =
    66c6:	9300      	str	r3, [sp, #0]
    66c8:	9707      	str	r7, [sp, #28]
    66ca:	464b      	mov	r3, r9
    66cc:	9106      	str	r1, [sp, #24]
    66ce:	9104      	str	r1, [sp, #16]
    66d0:	9103      	str	r1, [sp, #12]
    66d2:	9102      	str	r1, [sp, #8]
    66d4:	9101      	str	r1, [sp, #4]
    66d6:	2201      	movs	r2, #1
    66d8:	4608      	mov	r0, r1
    66da:	f7fc f9b5 	bl	2a48 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    66de:	f030 0302 	bics.w	r3, r0, #2
    66e2:	d004      	beq.n	66ee <event_common_prepare+0x6e>
    66e4:	f241 61e6 	movw	r1, #5862	; 0x16e6
    66e8:	484e      	ldr	r0, [pc, #312]	; (6824 <event_common_prepare+0x1a4>)
    66ea:	f7fa f8e1 	bl	8b0 <bt_ctlr_assert_handle>
		event_xtal(0, 0, 0, NULL);
    66ee:	2300      	movs	r3, #0
    66f0:	461a      	mov	r2, r3
    66f2:	4619      	mov	r1, r3
    66f4:	4618      	mov	r0, r3
    66f6:	f7ff fdef 	bl	62d8 <event_xtal>
	_radio.remainder_anchor = remainder;
    66fa:	4e4b      	ldr	r6, [pc, #300]	; (6828 <event_common_prepare+0x1a8>)
    66fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    66fe:	60f3      	str	r3, [r6, #12]
	ticker_status =
    6700:	f241 7311 	movw	r3, #5905	; 0x1711
    6704:	9308      	str	r3, [sp, #32]
    6706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6708:	9306      	str	r3, [sp, #24]
    670a:	2200      	movs	r2, #0
    670c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    670e:	9305      	str	r3, [sp, #20]
    6710:	9707      	str	r7, [sp, #28]
    6712:	464b      	mov	r3, r9
    6714:	9204      	str	r2, [sp, #16]
    6716:	9203      	str	r2, [sp, #12]
    6718:	9202      	str	r2, [sp, #8]
    671a:	9201      	str	r2, [sp, #4]
    671c:	9400      	str	r4, [sp, #0]
    671e:	4611      	mov	r1, r2
    6720:	4610      	mov	r0, r2
    6722:	f7fc f991 	bl	2a48 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6726:	f030 0302 	bics.w	r3, r0, #2
    672a:	d004      	beq.n	6736 <event_common_prepare+0xb6>
    672c:	f241 7113 	movw	r1, #5907	; 0x1713
    6730:	483c      	ldr	r0, [pc, #240]	; (6824 <event_common_prepare+0x1a4>)
    6732:	f7fa f8bd 	bl	8b0 <bt_ctlr_assert_handle>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    6736:	2005      	movs	r0, #5
    6738:	f7ff ff8c 	bl	6654 <event_stop.constprop.26>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    673c:	f8d6 378c 	ldr.w	r3, [r6, #1932]	; 0x78c
    6740:	429d      	cmp	r5, r3
    6742:	d028      	beq.n	6796 <event_common_prepare+0x116>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    6744:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    6748:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    674c:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    674e:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    6750:	bfbc      	itt	lt
    6752:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    6756:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    675a:	f8d6 278c 	ldr.w	r2, [r6, #1932]	; 0x78c
    675e:	f8d8 1000 	ldr.w	r1, [r8]
    6762:	428a      	cmp	r2, r1
    6764:	bf38      	it	cc
    6766:	460a      	movcc	r2, r1
		ticker_status =
    6768:	f241 7141 	movw	r1, #5953	; 0x1741
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    676c:	b2a3      	uxth	r3, r4
    676e:	b292      	uxth	r2, r2
		ticker_status =
    6770:	9106      	str	r1, [sp, #24]
    6772:	2100      	movs	r1, #0
    6774:	9302      	str	r3, [sp, #8]
    6776:	9201      	str	r2, [sp, #4]
    6778:	9200      	str	r2, [sp, #0]
    677a:	9104      	str	r1, [sp, #16]
    677c:	9103      	str	r1, [sp, #12]
    677e:	4652      	mov	r2, sl
    6780:	4608      	mov	r0, r1
    6782:	f7fc f9b1 	bl	2ae8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6786:	f030 0302 	bics.w	r3, r0, #2
    678a:	d004      	beq.n	6796 <event_common_prepare+0x116>
    678c:	f241 7143 	movw	r1, #5955	; 0x1743
    6790:	4824      	ldr	r0, [pc, #144]	; (6824 <event_common_prepare+0x1a4>)
    6792:	f7fa f88d 	bl	8b0 <bt_ctlr_assert_handle>
	packet_tx_enqueue(0xFF);
    6796:	20ff      	movs	r0, #255	; 0xff
    6798:	f7fe fd3e 	bl	5218 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    679c:	4b23      	ldr	r3, [pc, #140]	; (682c <event_common_prepare+0x1ac>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    679e:	2201      	movs	r2, #1
    67a0:	4611      	mov	r1, r2
    67a2:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    67a4:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    67a8:	f7fb fb9c 	bl	1ee4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    67ac:	b390      	cbz	r0, 6814 <event_common_prepare+0x194>
    67ae:	481d      	ldr	r0, [pc, #116]	; (6824 <event_common_prepare+0x1a4>)
    67b0:	f241 7156 	movw	r1, #5974	; 0x1756
}
    67b4:	b00f      	add	sp, #60	; 0x3c
    67b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LL_ASSERT(!retval);
    67ba:	f7fa b879 	b.w	8b0 <bt_ctlr_assert_handle>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    67be:	d222      	bcs.n	6806 <event_common_prepare+0x186>
		event_active(0, 0, 0, NULL);
    67c0:	2300      	movs	r3, #0
    67c2:	461a      	mov	r2, r3
    67c4:	4619      	mov	r1, r3
    67c6:	4618      	mov	r0, r3
    67c8:	f7ff fd72 	bl	62b0 <event_active>
		ticker_status =
    67cc:	f241 63f9 	movw	r3, #5881	; 0x16f9
    67d0:	2100      	movs	r1, #0
    67d2:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    67d4:	1b2c      	subs	r4, r5, r4
		ticker_status =
    67d6:	4b16      	ldr	r3, [pc, #88]	; (6830 <event_common_prepare+0x1b0>)
    67d8:	9305      	str	r3, [sp, #20]
    67da:	9707      	str	r7, [sp, #28]
    67dc:	464b      	mov	r3, r9
    67de:	9106      	str	r1, [sp, #24]
    67e0:	9104      	str	r1, [sp, #16]
    67e2:	9103      	str	r1, [sp, #12]
    67e4:	9102      	str	r1, [sp, #8]
    67e6:	9101      	str	r1, [sp, #4]
    67e8:	9400      	str	r4, [sp, #0]
    67ea:	2201      	movs	r2, #1
    67ec:	4608      	mov	r0, r1
    67ee:	f7fc f92b 	bl	2a48 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    67f2:	f030 0302 	bics.w	r3, r0, #2
    67f6:	d004      	beq.n	6802 <event_common_prepare+0x182>
    67f8:	f241 61fb 	movw	r1, #5883	; 0x16fb
    67fc:	4809      	ldr	r0, [pc, #36]	; (6824 <event_common_prepare+0x1a4>)
    67fe:	f7fa f857 	bl	8b0 <bt_ctlr_assert_handle>
    6802:	462c      	mov	r4, r5
    6804:	e779      	b.n	66fa <event_common_prepare+0x7a>
		event_active(0, 0, 0, NULL);
    6806:	2300      	movs	r3, #0
    6808:	461a      	mov	r2, r3
    680a:	4619      	mov	r1, r3
    680c:	4618      	mov	r0, r3
    680e:	f7ff fd4f 	bl	62b0 <event_active>
    6812:	e76c      	b.n	66ee <event_common_prepare+0x6e>
}
    6814:	b00f      	add	sp, #60	; 0x3c
    6816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    681a:	bf00      	nop
    681c:	00006151 	.word	0x00006151
    6820:	000062b1 	.word	0x000062b1
    6824:	000109b4 	.word	0x000109b4
    6828:	20000340 	.word	0x20000340
    682c:	200055b8 	.word	0x200055b8
    6830:	000062d9 	.word	0x000062d9

00006834 <radio_event_adv_prepare>:
{
    6834:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6836:	4c0d      	ldr	r4, [pc, #52]	; (686c <radio_event_adv_prepare+0x38>)
    6838:	7c23      	ldrb	r3, [r4, #16]
{
    683a:	4605      	mov	r5, r0
    683c:	460e      	mov	r6, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    683e:	b123      	cbz	r3, 684a <radio_event_adv_prepare+0x16>
    6840:	f641 01e1 	movw	r1, #6369	; 0x18e1
    6844:	480a      	ldr	r0, [pc, #40]	; (6870 <radio_event_adv_prepare+0x3c>)
    6846:	f7fa f833 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    684a:	2305      	movs	r3, #5
    684c:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    684e:	9301      	str	r3, [sp, #4]
    6850:	6a23      	ldr	r3, [r4, #32]
    6852:	9300      	str	r3, [sp, #0]
    6854:	2200      	movs	r2, #0
    6856:	4b07      	ldr	r3, [pc, #28]	; (6874 <radio_event_adv_prepare+0x40>)
    6858:	9203      	str	r2, [sp, #12]
    685a:	4a07      	ldr	r2, [pc, #28]	; (6878 <radio_event_adv_prepare+0x44>)
    685c:	9202      	str	r2, [sp, #8]
    685e:	4631      	mov	r1, r6
    6860:	1f1a      	subs	r2, r3, #4
    6862:	4628      	mov	r0, r5
    6864:	f7ff ff0c 	bl	6680 <event_common_prepare>
}
    6868:	b004      	add	sp, #16
    686a:	bd70      	pop	{r4, r5, r6, pc}
    686c:	20000340 	.word	0x20000340
    6870:	000109b4 	.word	0x000109b4
    6874:	2000035c 	.word	0x2000035c
    6878:	00006a89 	.word	0x00006a89

0000687c <event_scan_prepare>:
{
    687c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    687e:	4c20      	ldr	r4, [pc, #128]	; (6900 <event_scan_prepare+0x84>)
    6880:	7c23      	ldrb	r3, [r4, #16]
{
    6882:	4605      	mov	r5, r0
    6884:	460e      	mov	r6, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    6886:	b123      	cbz	r3, 6892 <event_scan_prepare+0x16>
    6888:	f641 31d4 	movw	r1, #7124	; 0x1bd4
    688c:	481d      	ldr	r0, [pc, #116]	; (6904 <event_scan_prepare+0x88>)
    688e:	f7fa f80f 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    6892:	2306      	movs	r3, #6
    6894:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    6896:	9301      	str	r3, [sp, #4]
    6898:	f8d4 3644 	ldr.w	r3, [r4, #1604]	; 0x644
    689c:	9300      	str	r3, [sp, #0]
    689e:	2200      	movs	r2, #0
    68a0:	4b19      	ldr	r3, [pc, #100]	; (6908 <event_scan_prepare+0x8c>)
    68a2:	9203      	str	r2, [sp, #12]
    68a4:	4a19      	ldr	r2, [pc, #100]	; (690c <event_scan_prepare+0x90>)
    68a6:	9202      	str	r2, [sp, #8]
    68a8:	4631      	mov	r1, r6
    68aa:	1f1a      	subs	r2, r3, #4
    68ac:	4628      	mov	r0, r5
    68ae:	f7ff fee7 	bl	6680 <event_common_prepare>
	if (_radio.scanner.conn) {
    68b2:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
    68b6:	b303      	cbz	r3, 68fa <event_scan_prepare+0x7e>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    68b8:	f8d4 363c 	ldr.w	r3, [r4, #1596]	; 0x63c
    68bc:	2b00      	cmp	r3, #0
    68be:	da0c      	bge.n	68da <event_scan_prepare+0x5e>
			u32_t ticks_prepare_to_start =
    68c0:	f8d4 1644 	ldr.w	r1, [r4, #1604]	; 0x644
    68c4:	f8d4 2640 	ldr.w	r2, [r4, #1600]	; 0x640
				(_radio.scanner.hdr.ticks_xtal_to_start &
    68c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    68cc:	4291      	cmp	r1, r2
    68ce:	bf2c      	ite	cs
    68d0:	ebc3 0301 	rsbcs	r3, r3, r1
    68d4:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    68d8:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    68da:	4b0d      	ldr	r3, [pc, #52]	; (6910 <event_scan_prepare+0x94>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    68dc:	2201      	movs	r2, #1
    68de:	4611      	mov	r1, r2
    68e0:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    68e2:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    68e4:	f7fb fafe 	bl	1ee4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    68e8:	b138      	cbz	r0, 68fa <event_scan_prepare+0x7e>
    68ea:	4806      	ldr	r0, [pc, #24]	; (6904 <event_scan_prepare+0x88>)
    68ec:	f641 4103 	movw	r1, #7171	; 0x1c03
}
    68f0:	b004      	add	sp, #16
    68f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LL_ASSERT(!retval);
    68f6:	f7f9 bfdb 	b.w	8b0 <bt_ctlr_assert_handle>
}
    68fa:	b004      	add	sp, #16
    68fc:	bd70      	pop	{r4, r5, r6, pc}
    68fe:	bf00      	nop
    6900:	20000340 	.word	0x20000340
    6904:	000109b4 	.word	0x000109b4
    6908:	20000980 	.word	0x20000980
    690c:	00006b61 	.word	0x00006b61
    6910:	20005528 	.word	0x20005528

00006914 <radio_event_ext_adv_prepare>:
{
    6914:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    6916:	4c0d      	ldr	r4, [pc, #52]	; (694c <radio_event_ext_adv_prepare+0x38>)
    6918:	7c23      	ldrb	r3, [r4, #16]
{
    691a:	4605      	mov	r5, r0
    691c:	460e      	mov	r6, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    691e:	b123      	cbz	r3, 692a <radio_event_ext_adv_prepare+0x16>
    6920:	f641 01f8 	movw	r1, #6392	; 0x18f8
    6924:	480a      	ldr	r0, [pc, #40]	; (6950 <radio_event_ext_adv_prepare+0x3c>)
    6926:	f7f9 ffc3 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_EXT_ADV;
    692a:	2308      	movs	r3, #8
    692c:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    692e:	9301      	str	r3, [sp, #4]
    6930:	6a23      	ldr	r3, [r4, #32]
    6932:	9300      	str	r3, [sp, #0]
    6934:	2200      	movs	r2, #0
    6936:	4b07      	ldr	r3, [pc, #28]	; (6954 <radio_event_ext_adv_prepare+0x40>)
    6938:	9203      	str	r2, [sp, #12]
    693a:	4a07      	ldr	r2, [pc, #28]	; (6958 <radio_event_ext_adv_prepare+0x44>)
    693c:	9202      	str	r2, [sp, #8]
    693e:	4631      	mov	r1, r6
    6940:	1f1a      	subs	r2, r3, #4
    6942:	4628      	mov	r0, r5
    6944:	f7ff fe9c 	bl	6680 <event_common_prepare>
}
    6948:	b004      	add	sp, #16
    694a:	bd70      	pop	{r4, r5, r6, pc}
    694c:	20000340 	.word	0x20000340
    6950:	000109b4 	.word	0x000109b4
    6954:	2000035c 	.word	0x2000035c
    6958:	00006df1 	.word	0x00006df1

0000695c <event_adv_stop>:
{
    695c:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    695e:	2005      	movs	r0, #5
    6960:	f7ff fe78 	bl	6654 <event_stop.constprop.26>
	ticker_status =
    6964:	f641 33c7 	movw	r3, #7111	; 0x1bc7
    6968:	2100      	movs	r1, #0
    696a:	9300      	str	r3, [sp, #0]
    696c:	2205      	movs	r2, #5
    696e:	4b09      	ldr	r3, [pc, #36]	; (6994 <event_adv_stop+0x38>)
    6970:	4608      	mov	r0, r1
    6972:	f7fc f907 	bl	2b84 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6976:	f030 0302 	bics.w	r3, r0, #2
    697a:	d007      	beq.n	698c <event_adv_stop+0x30>
    697c:	4806      	ldr	r0, [pc, #24]	; (6998 <event_adv_stop+0x3c>)
    697e:	f641 31c9 	movw	r1, #7113	; 0x1bc9
}
    6982:	b003      	add	sp, #12
    6984:	f85d eb04 	ldr.w	lr, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6988:	f7f9 bf92 	b.w	8b0 <bt_ctlr_assert_handle>
}
    698c:	b003      	add	sp, #12
    698e:	f85d fb04 	ldr.w	pc, [sp], #4
    6992:	bf00      	nop
    6994:	00006351 	.word	0x00006351
    6998:	000109b4 	.word	0x000109b4

0000699c <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    699c:	4b02      	ldr	r3, [pc, #8]	; (69a8 <mayfly_xtal_start+0xc>)
    699e:	6818      	ldr	r0, [r3, #0]
    69a0:	6843      	ldr	r3, [r0, #4]
    69a2:	2100      	movs	r1, #0
    69a4:	681b      	ldr	r3, [r3, #0]
    69a6:	4718      	bx	r3
    69a8:	20000340 	.word	0x20000340

000069ac <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    69ac:	4b02      	ldr	r3, [pc, #8]	; (69b8 <mayfly_xtal_stop+0xc>)
    69ae:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    69b0:	6843      	ldr	r3, [r0, #4]
    69b2:	2100      	movs	r1, #0
    69b4:	685b      	ldr	r3, [r3, #4]
    69b6:	4718      	bx	r3
    69b8:	20000340 	.word	0x20000340

000069bc <chan_sel_2>:
{
    69bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    69be:	4048      	eors	r0, r1
    69c0:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    69c2:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    69c6:	2608      	movs	r6, #8
	o = 0;
    69c8:	2400      	movs	r4, #0
		o |= (i & 1);
    69ca:	f00e 0501 	and.w	r5, lr, #1
    69ce:	3e01      	subs	r6, #1
    69d0:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    69d4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    69d8:	b2ec      	uxtb	r4, r5
		i >>= 1;
    69da:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    69de:	d1f4      	bne.n	69ca <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    69e0:	0225      	lsls	r5, r4, #8
    69e2:	b22d      	sxth	r5, r5
    69e4:	b2c0      	uxtb	r0, r0
    69e6:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    69ea:	4634      	mov	r4, r6
		o |= (i & 1);
    69ec:	f000 0601 	and.w	r6, r0, #1
    69f0:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    69f4:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    69f8:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    69fc:	b2e4      	uxtb	r4, r4
		i >>= 1;
    69fe:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    6a02:	d1f3      	bne.n	69ec <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6a04:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6a06:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    6a0a:	3f01      	subs	r7, #1
    6a0c:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    6a0e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6a12:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    6a14:	d1d5      	bne.n	69c2 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    6a16:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    6a18:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    6a1a:	fbb1 f0f4 	udiv	r0, r1, r4
    6a1e:	fb04 1010 	mls	r0, r4, r0, r1
    6a22:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6a24:	08c4      	lsrs	r4, r0, #3
    6a26:	f000 0507 	and.w	r5, r0, #7
    6a2a:	5d14      	ldrb	r4, [r2, r4]
    6a2c:	412c      	asrs	r4, r5
    6a2e:	07e4      	lsls	r4, r4, #31
    6a30:	d407      	bmi.n	6a42 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    6a32:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    6a34:	f3c1 4107 	ubfx	r1, r1, #16, #8
    6a38:	4610      	mov	r0, r2
}
    6a3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    6a3e:	f7fe b849 	b.w	4ad4 <chan_sel_remap>
}
    6a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a44 <preempt_calc>:
{
    6a44:	b570      	push	{r4, r5, r6, lr}
    6a46:	4614      	mov	r4, r2
    6a48:	460e      	mov	r6, r1
    6a4a:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    6a4c:	f7fc f96a 	bl	2d24 <ticker_ticks_now_get>
	u32_t diff =
    6a50:	4621      	mov	r1, r4
    6a52:	f7fc f969 	bl	2d28 <ticker_ticks_diff_get>
	diff += 3;
    6a56:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6a58:	2c09      	cmp	r4, #9
    6a5a:	d911      	bls.n	6a80 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    6a5c:	4b09      	ldr	r3, [pc, #36]	; (6a84 <preempt_calc+0x40>)
    6a5e:	781b      	ldrb	r3, [r3, #0]
    6a60:	b113      	cbz	r3, 6a68 <preempt_calc+0x24>
    6a62:	2000      	movs	r0, #0
    6a64:	f7ff fbfc 	bl	6260 <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6a68:	4632      	mov	r2, r6
    6a6a:	2100      	movs	r1, #0
    6a6c:	4628      	mov	r0, r5
    6a6e:	f7ff fd9b 	bl	65a8 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    6a72:	68ab      	ldr	r3, [r5, #8]
    6a74:	441c      	add	r4, r3
		if (diff <
    6a76:	2c26      	cmp	r4, #38	; 0x26
    6a78:	d800      	bhi.n	6a7c <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    6a7a:	60ac      	str	r4, [r5, #8]
		return 1;
    6a7c:	2001      	movs	r0, #1
}
    6a7e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    6a80:	2000      	movs	r0, #0
    6a82:	bd70      	pop	{r4, r5, r6, pc}
    6a84:	20000b84 	.word	0x20000b84

00006a88 <event_adv>:
{
    6a88:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6a8a:	4c31      	ldr	r4, [pc, #196]	; (6b50 <event_adv+0xc8>)
    6a8c:	7ce3      	ldrb	r3, [r4, #19]
{
    6a8e:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6a90:	b123      	cbz	r3, 6a9c <event_adv+0x14>
    6a92:	f641 214d 	movw	r1, #6733	; 0x1a4d
    6a96:	482f      	ldr	r0, [pc, #188]	; (6b54 <event_adv+0xcc>)
    6a98:	f7f9 ff0a 	bl	8b0 <bt_ctlr_assert_handle>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    6a9c:	7c23      	ldrb	r3, [r4, #16]
    6a9e:	2b05      	cmp	r3, #5
    6aa0:	d004      	beq.n	6aac <event_adv+0x24>
    6aa2:	f641 214e 	movw	r1, #6734	; 0x1a4e
    6aa6:	482b      	ldr	r0, [pc, #172]	; (6b54 <event_adv+0xcc>)
    6aa8:	f7f9 ff02 	bl	8b0 <bt_ctlr_assert_handle>
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6aac:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.ticks_anchor = ticks_at_expire;
    6ab0:	60a5      	str	r5, [r4, #8]
	_radio.ticker_id_prepare = 0;
    6ab2:	2300      	movs	r3, #0
	_radio.role = ROLE_ADV;
    6ab4:	2601      	movs	r6, #1
    6ab6:	74e6      	strb	r6, [r4, #19]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6ab8:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.ticker_id_prepare = 0;
    6abc:	7423      	strb	r3, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    6abe:	2305      	movs	r3, #5
    6ac0:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    6ac2:	f7ff fd9d 	bl	6600 <adv_scan_configure.constprop.25>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    6ac6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6aca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    6ace:	f3c3 1302 	ubfx	r3, r3, #4, #3
    6ad2:	f363 0202 	bfi	r2, r3, #0, #3
    6ad6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    6ada:	f7fe fdeb 	bl	56b4 <adv_setup>
	if (ctrl_rl_enabled()) {
    6ade:	f007 f881 	bl	dbe4 <ctrl_rl_enabled>
    6ae2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6ae6:	b1f8      	cbz	r0, 6b28 <event_adv+0xa0>
		struct ll_filter *filter =
    6ae8:	f013 0003 	ands.w	r0, r3, #3
    6aec:	bf18      	it	ne
    6aee:	4630      	movne	r0, r6
		struct ll_filter *wl = ctrl_filter_get(true);
    6af0:	f006 feb2 	bl	d858 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6af4:	1c82      	adds	r2, r0, #2
    6af6:	7841      	ldrb	r1, [r0, #1]
    6af8:	7800      	ldrb	r0, [r0, #0]
    6afa:	f007 ff55 	bl	e9a8 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6afe:	68e2      	ldr	r2, [r4, #12]
    6b00:	f105 0109 	add.w	r1, r5, #9
    6b04:	2001      	movs	r0, #1
    6b06:	f007 ffb3 	bl	ea70 <radio_tmr_start>
	radio_tmr_end_capture();
    6b0a:	f008 f877 	bl	ebfc <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6b0e:	462a      	mov	r2, r5
    6b10:	2105      	movs	r1, #5
    6b12:	4811      	ldr	r0, [pc, #68]	; (6b58 <event_adv+0xd0>)
    6b14:	f7ff ff96 	bl	6a44 <preempt_calc>
    6b18:	4603      	mov	r3, r0
    6b1a:	b148      	cbz	r0, 6b30 <event_adv+0xa8>
		_radio.state = STATE_STOP;
    6b1c:	2304      	movs	r3, #4
    6b1e:	7523      	strb	r3, [r4, #20]
}
    6b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    6b24:	f007 bea0 	b.w	e868 <radio_disable>
	if (_radio.advertiser.filter_policy) {
    6b28:	079b      	lsls	r3, r3, #30
    6b2a:	d0e8      	beq.n	6afe <event_adv+0x76>
		struct ll_filter *wl = ctrl_filter_get(true);
    6b2c:	4630      	mov	r0, r6
    6b2e:	e7df      	b.n	6af0 <event_adv+0x68>
		ticker_status =
    6b30:	4a0a      	ldr	r2, [pc, #40]	; (6b5c <event_adv+0xd4>)
    6b32:	4601      	mov	r1, r0
    6b34:	f7fc f8a4 	bl	2c80 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6b38:	f030 0302 	bics.w	r3, r0, #2
    6b3c:	d006      	beq.n	6b4c <event_adv+0xc4>
    6b3e:	f641 219d 	movw	r1, #6813	; 0x1a9d
    6b42:	4804      	ldr	r0, [pc, #16]	; (6b54 <event_adv+0xcc>)
}
    6b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6b48:	f7f9 beb2 	b.w	8b0 <bt_ctlr_assert_handle>
    6b4c:	bd70      	pop	{r4, r5, r6, pc}
    6b4e:	bf00      	nop
    6b50:	20000340 	.word	0x20000340
    6b54:	000109b4 	.word	0x000109b4
    6b58:	20000358 	.word	0x20000358
    6b5c:	0000620d 	.word	0x0000620d

00006b60 <event_scan>:
{
    6b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6b64:	4c92      	ldr	r4, [pc, #584]	; (6db0 <event_scan+0x250>)
    6b66:	7ce3      	ldrb	r3, [r4, #19]
{
    6b68:	b08c      	sub	sp, #48	; 0x30
    6b6a:	4605      	mov	r5, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6b6c:	b123      	cbz	r3, 6b78 <event_scan+0x18>
    6b6e:	f641 4122 	movw	r1, #7202	; 0x1c22
    6b72:	4890      	ldr	r0, [pc, #576]	; (6db4 <event_scan+0x254>)
    6b74:	f7f9 fe9c 	bl	8b0 <bt_ctlr_assert_handle>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    6b78:	7c23      	ldrb	r3, [r4, #16]
    6b7a:	2b06      	cmp	r3, #6
    6b7c:	d004      	beq.n	6b88 <event_scan+0x28>
    6b7e:	f641 4123 	movw	r1, #7203	; 0x1c23
    6b82:	488c      	ldr	r0, [pc, #560]	; (6db4 <event_scan+0x254>)
    6b84:	f7f9 fe94 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.role = ROLE_SCAN;
    6b88:	2302      	movs	r3, #2
    6b8a:	74e3      	strb	r3, [r4, #19]
	_radio.state = STATE_RX;
    6b8c:	2301      	movs	r3, #1
	_radio.ticker_id_prepare = 0;
    6b8e:	2200      	movs	r2, #0
	_radio.state = STATE_RX;
    6b90:	7523      	strb	r3, [r4, #20]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    6b92:	2306      	movs	r3, #6
	_radio.ticker_id_prepare = 0;
    6b94:	7422      	strb	r2, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6b96:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    6b9a:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    6b9c:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.ticks_anchor = ticks_at_expire;
    6ba0:	60a5      	str	r5, [r4, #8]
	_radio.scanner.state = 0;
    6ba2:	f362 0341 	bfi	r3, r2, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6ba6:	f000 0007 	and.w	r0, r0, #7
	_radio.scanner.state = 0;
    6baa:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    6bae:	f7ff fd27 	bl	6600 <adv_scan_configure.constprop.25>
	if(aux_scan){
    6bb2:	4b81      	ldr	r3, [pc, #516]	; (6db8 <event_scan+0x258>)
    6bb4:	781e      	ldrb	r6, [r3, #0]
    6bb6:	4698      	mov	r8, r3
    6bb8:	2e00      	cmp	r6, #0
    6bba:	f000 80ab 	beq.w	6d14 <event_scan+0x1b4>
		stop_time_ticker = k_cycle_get_32();
    6bbe:	f7fa fff1 	bl	1ba4 <_timer_cycle_get_32>
    6bc2:	4b7e      	ldr	r3, [pc, #504]	; (6dbc <event_scan+0x25c>)
    6bc4:	6018      	str	r0, [r3, #0]
		event_time_diff = (stop_time_ticker - start_time_ticker);
    6bc6:	4b7e      	ldr	r3, [pc, #504]	; (6dc0 <event_scan+0x260>)
    6bc8:	681f      	ldr	r7, [r3, #0]
    6bca:	4b7e      	ldr	r3, [pc, #504]	; (6dc4 <event_scan+0x264>)
    6bcc:	1bc7      	subs	r7, r0, r7
    6bce:	601f      	str	r7, [r3, #0]
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    6bd0:	4b7d      	ldr	r3, [pc, #500]	; (6dc8 <event_scan+0x268>)
    6bd2:	681a      	ldr	r2, [r3, #0]
    6bd4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    6bd8:	fb82 2306 	smull	r2, r3, r2, r6
    6bdc:	fba2 0107 	umull	r0, r1, r2, r7
    6be0:	fb07 1103 	mla	r1, r7, r3, r1
    6be4:	4b79      	ldr	r3, [pc, #484]	; (6dcc <event_scan+0x26c>)
    6be6:	681a      	ldr	r2, [r3, #0]
    6be8:	17d3      	asrs	r3, r2, #31
    6bea:	f7f9 fb3d 	bl	268 <__aeabi_uldivmod>
    6bee:	4b78      	ldr	r3, [pc, #480]	; (6dd0 <event_scan+0x270>)
		counter++;
    6bf0:	4a78      	ldr	r2, [pc, #480]	; (6dd4 <event_scan+0x274>)
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    6bf2:	fbb0 f0f6 	udiv	r0, r0, r6
    6bf6:	2100      	movs	r1, #0
    6bf8:	e9c3 0100 	strd	r0, r1, [r3]
		counter++;
    6bfc:	7813      	ldrb	r3, [r2, #0]
    6bfe:	3301      	adds	r3, #1
    6c00:	7013      	strb	r3, [r2, #0]
		if(Time_difference_ticker < _radio.ext_scanner.chan_off){
    6c02:	4b75      	ldr	r3, [pc, #468]	; (6dd8 <event_scan+0x278>)
    6c04:	e9d3 6700 	ldrd	r6, r7, [r3]
    6c08:	42b9      	cmp	r1, r7
    6c0a:	bf08      	it	eq
    6c0c:	42b0      	cmpeq	r0, r6
    6c0e:	f103 0e10 	add.w	lr, r3, #16
    6c12:	d206      	bcs.n	6c22 <event_scan+0xc2>
			_radio.ext_scanner.chan_off_calculation -= Time_difference_ticker;
    6c14:	e9de 2300 	ldrd	r2, r3, [lr]
    6c18:	1a10      	subs	r0, r2, r0
    6c1a:	eb63 0101 	sbc.w	r1, r3, r1
    6c1e:	e9ce 0100 	strd	r0, r1, [lr]
		if( _radio.ext_scanner.chan_off_calculation < 0x2710){
    6c22:	e9de 2300 	ldrd	r2, r3, [lr]
    6c26:	2100      	movs	r1, #0
    6c28:	f242 700f 	movw	r0, #9999	; 0x270f
    6c2c:	4299      	cmp	r1, r3
    6c2e:	bf08      	it	eq
    6c30:	4290      	cmpeq	r0, r2
    6c32:	d36c      	bcc.n	6d0e <event_scan+0x1ae>
			if( _radio.ext_scanner.chan_off_calculation <(int)1000){
    6c34:	2b00      	cmp	r3, #0
    6c36:	bf08      	it	eq
    6c38:	f5b2 7f7a 	cmpeq.w	r2, #1000	; 0x3e8
    6c3c:	d21a      	bcs.n	6c74 <event_scan+0x114>
					ticker_status =
    6c3e:	f641 434e 	movw	r3, #7246	; 0x1c4e
    6c42:	2100      	movs	r1, #0
    6c44:	9306      	str	r3, [sp, #24]
    6c46:	4b65      	ldr	r3, [pc, #404]	; (6ddc <event_scan+0x27c>)
    6c48:	9305      	str	r3, [sp, #20]
    6c4a:	9104      	str	r1, [sp, #16]
    6c4c:	2320      	movs	r3, #32
    6c4e:	9103      	str	r1, [sp, #12]
    6c50:	9102      	str	r1, [sp, #8]
    6c52:	9101      	str	r1, [sp, #4]
    6c54:	9100      	str	r1, [sp, #0]
    6c56:	2206      	movs	r2, #6
    6c58:	4608      	mov	r0, r1
    6c5a:	f7fb ff45 	bl	2ae8 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6c5e:	f030 0302 	bics.w	r3, r0, #2
    6c62:	d007      	beq.n	6c74 <event_scan+0x114>
    6c64:	7ca3      	ldrb	r3, [r4, #18]
    6c66:	2b06      	cmp	r3, #6
    6c68:	d004      	beq.n	6c74 <event_scan+0x114>
    6c6a:	f641 4152 	movw	r1, #7250	; 0x1c52
    6c6e:	4851      	ldr	r0, [pc, #324]	; (6db4 <event_scan+0x254>)
    6c70:	f7f9 fe1e 	bl	8b0 <bt_ctlr_assert_handle>
			chan_set(_radio.ext_scanner.chan_index);
    6c74:	f894 06b0 	ldrb.w	r0, [r4, #1712]	; 0x6b0
    6c78:	f7fe fbde 	bl	5438 <chan_set>
			aux_scan = 0x00;
    6c7c:	2300      	movs	r3, #0
    6c7e:	f888 3000 	strb.w	r3, [r8]
	radio_tmr_tifs_set(RADIO_TIFS);
    6c82:	2096      	movs	r0, #150	; 0x96
    6c84:	f007 fee8 	bl	ea58 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6c88:	2300      	movs	r3, #0
    6c8a:	4619      	mov	r1, r3
    6c8c:	461a      	mov	r2, r3
    6c8e:	4618      	mov	r0, r3
    6c90:	f007 fe50 	bl	e934 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6c94:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
    6c98:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
    6c9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6ca0:	3008      	adds	r0, #8
    6ca2:	f007 fdad 	bl	e800 <radio_pkt_rx_set>
	radio_rssi_measure();
    6ca6:	f007 fe5d 	bl	e964 <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
    6caa:	f007 fe33 	bl	e914 <radio_pkt_scratch_get>
	if (ctrl_rl_enabled()) {
    6cae:	f006 ff99 	bl	dbe4 <ctrl_rl_enabled>
    6cb2:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    6cb6:	2800      	cmp	r0, #0
    6cb8:	d043      	beq.n	6d42 <event_scan+0x1e2>
		struct ll_filter *filter =
    6cba:	f3c3 1000 	ubfx	r0, r3, #4, #1
    6cbe:	f006 fdcb 	bl	d858 <ctrl_filter_get>
    6cc2:	4606      	mov	r6, r0
		u8_t count, *irks = ctrl_irks_get(&count);
    6cc4:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
    6cc8:	f006 fd48 	bl	d75c <ctrl_irks_get>
		radio_filter_configure(filter->enable_bitmask,
    6ccc:	7871      	ldrb	r1, [r6, #1]
		u8_t count, *irks = ctrl_irks_get(&count);
    6cce:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    6cd0:	1cb2      	adds	r2, r6, #2
    6cd2:	7830      	ldrb	r0, [r6, #0]
    6cd4:	f007 fe68 	bl	e9a8 <radio_filter_configure>
		radio_ar_configure(count, irks);
    6cd8:	4639      	mov	r1, r7
    6cda:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    6cde:	f008 f85b 	bl	ed98 <radio_ar_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6ce2:	68e2      	ldr	r2, [r4, #12]
    6ce4:	f105 0109 	add.w	r1, r5, #9
    6ce8:	2000      	movs	r0, #0
    6cea:	f007 fec1 	bl	ea70 <radio_tmr_start>
	radio_tmr_end_capture();
    6cee:	f007 ff85 	bl	ebfc <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    6cf2:	2106      	movs	r1, #6
    6cf4:	462a      	mov	r2, r5
    6cf6:	483a      	ldr	r0, [pc, #232]	; (6de0 <event_scan+0x280>)
    6cf8:	f7ff fea4 	bl	6a44 <preempt_calc>
    6cfc:	4601      	mov	r1, r0
    6cfe:	b360      	cbz	r0, 6d5a <event_scan+0x1fa>
		_radio.state = STATE_STOP;
    6d00:	2304      	movs	r3, #4
    6d02:	7523      	strb	r3, [r4, #20]
		radio_disable();
    6d04:	f007 fdb0 	bl	e868 <radio_disable>
}
    6d08:	b00c      	add	sp, #48	; 0x30
    6d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    6d0e:	e9ce 6700 	strd	r6, r7, [lr]
    6d12:	e7b6      	b.n	6c82 <event_scan+0x122>
		chan_set(37 + _radio.scanner.chan++);
    6d14:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    6d18:	f3c3 0081 	ubfx	r0, r3, #2, #2
    6d1c:	1c42      	adds	r2, r0, #1
    6d1e:	f362 0383 	bfi	r3, r2, #2, #2
    6d22:	3025      	adds	r0, #37	; 0x25
    6d24:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    6d28:	f7fe fb86 	bl	5438 <chan_set>
		if (_radio.scanner.chan == 3) {
    6d2c:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    6d30:	f003 020c 	and.w	r2, r3, #12
    6d34:	2a0c      	cmp	r2, #12
			_radio.scanner.chan = 0;
    6d36:	bf04      	itt	eq
    6d38:	f366 0383 	bfieq	r3, r6, #2, #2
    6d3c:	f884 364c 	strbeq.w	r3, [r4, #1612]	; 0x64c
    6d40:	e79f      	b.n	6c82 <event_scan+0x122>
	if (_radio.scanner.filter_policy) {
    6d42:	f013 0f30 	tst.w	r3, #48	; 0x30
    6d46:	d0cc      	beq.n	6ce2 <event_scan+0x182>
		struct ll_filter *wl = ctrl_filter_get(true);
    6d48:	2001      	movs	r0, #1
    6d4a:	f006 fd85 	bl	d858 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6d4e:	1c82      	adds	r2, r0, #2
    6d50:	7841      	ldrb	r1, [r0, #1]
    6d52:	7800      	ldrb	r0, [r0, #0]
    6d54:	f007 fe28 	bl	e9a8 <radio_filter_configure>
    6d58:	e7c3      	b.n	6ce2 <event_scan+0x182>
		ret = ticker_start(															//this ticker was for closing the window.we ll use it for Aux packet
    6d5a:	f641 43c5 	movw	r3, #7365	; 0x1cc5
    6d5e:	9308      	str	r3, [sp, #32]
    6d60:	4b20      	ldr	r3, [pc, #128]	; (6de4 <event_scan+0x284>)
    6d62:	9307      	str	r3, [sp, #28]
    6d64:	4b20      	ldr	r3, [pc, #128]	; (6de8 <event_scan+0x288>)
    6d66:	9305      	str	r3, [sp, #20]
    6d68:	f8d4 365c 	ldr.w	r3, [r4, #1628]	; 0x65c
    6d6c:	9004      	str	r0, [sp, #16]
    6d6e:	2204      	movs	r2, #4
    6d70:	3309      	adds	r3, #9
    6d72:	9300      	str	r3, [sp, #0]
    6d74:	9206      	str	r2, [sp, #24]
    6d76:	462b      	mov	r3, r5
    6d78:	9003      	str	r0, [sp, #12]
    6d7a:	9002      	str	r0, [sp, #8]
    6d7c:	9001      	str	r0, [sp, #4]
    6d7e:	f7fb fe63 	bl	2a48 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6d82:	f030 0302 	bics.w	r3, r0, #2
    6d86:	d004      	beq.n	6d92 <event_scan+0x232>
    6d88:	f641 41c8 	movw	r1, #7368	; 0x1cc8
    6d8c:	4809      	ldr	r0, [pc, #36]	; (6db4 <event_scan+0x254>)
    6d8e:	f7f9 fd8f 	bl	8b0 <bt_ctlr_assert_handle>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    6d92:	2300      	movs	r3, #0
    6d94:	4619      	mov	r1, r3
    6d96:	4618      	mov	r0, r3
    6d98:	4a14      	ldr	r2, [pc, #80]	; (6dec <event_scan+0x28c>)
    6d9a:	f7fb ff71 	bl	2c80 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6d9e:	f030 0302 	bics.w	r3, r0, #2
    6da2:	d0b1      	beq.n	6d08 <event_scan+0x1a8>
    6da4:	f641 41d2 	movw	r1, #7378	; 0x1cd2
    6da8:	4802      	ldr	r0, [pc, #8]	; (6db4 <event_scan+0x254>)
    6daa:	f7f9 fd81 	bl	8b0 <bt_ctlr_assert_handle>
}
    6dae:	e7ab      	b.n	6d08 <event_scan+0x1a8>
    6db0:	20000340 	.word	0x20000340
    6db4:	000109b4 	.word	0x000109b4
    6db8:	20000ad8 	.word	0x20000ad8
    6dbc:	20003c1c 	.word	0x20003c1c
    6dc0:	20003c20 	.word	0x20003c20
    6dc4:	20003c40 	.word	0x20003c40
    6dc8:	20005624 	.word	0x20005624
    6dcc:	20005620 	.word	0x20005620
    6dd0:	20003bf0 	.word	0x20003bf0
    6dd4:	20000adb 	.word	0x20000adb
    6dd8:	200009f8 	.word	0x200009f8
    6ddc:	000061cd 	.word	0x000061cd
    6de0:	2000097c 	.word	0x2000097c
    6de4:	00006151 	.word	0x00006151
    6de8:	00008295 	.word	0x00008295
    6dec:	0000620d 	.word	0x0000620d

00006df0 <event_ext_adv>:
{
    6df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    6df2:	4c57      	ldr	r4, [pc, #348]	; (6f50 <event_ext_adv+0x160>)
    6df4:	7ce3      	ldrb	r3, [r4, #19]
{
    6df6:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6df8:	b123      	cbz	r3, 6e04 <event_ext_adv+0x14>
    6dfa:	f641 21b1 	movw	r1, #6833	; 0x1ab1
    6dfe:	4855      	ldr	r0, [pc, #340]	; (6f54 <event_ext_adv+0x164>)
    6e00:	f7f9 fd56 	bl	8b0 <bt_ctlr_assert_handle>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_EXT_ADV);
    6e04:	7c23      	ldrb	r3, [r4, #16]
    6e06:	2b08      	cmp	r3, #8
    6e08:	d004      	beq.n	6e14 <event_ext_adv+0x24>
    6e0a:	f641 21b2 	movw	r1, #6834	; 0x1ab2
    6e0e:	4851      	ldr	r0, [pc, #324]	; (6f54 <event_ext_adv+0x164>)
    6e10:	f7f9 fd4e 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.ticker_id_event = RADIO_TICKER_ID_EXT_ADV;
    6e14:	2308      	movs	r3, #8
	_radio.role = ROLE_ADV;
    6e16:	2101      	movs	r1, #1
	_radio.ticker_id_prepare = 0;
    6e18:	2200      	movs	r2, #0
	_radio.role = ROLE_ADV;
    6e1a:	74e1      	strb	r1, [r4, #19]
	if (_radio.advertiser.adv_data.first !=
    6e1c:	f894 022f 	ldrb.w	r0, [r4, #559]	; 0x22f
	_radio.ticker_id_prepare = 0;
    6e20:	7422      	strb	r2, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_EXT_ADV;
    6e22:	7463      	strb	r3, [r4, #17]
	if (_radio.advertiser.adv_data.first !=
    6e24:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
	_radio.ticks_anchor = ticks_at_expire;
    6e28:	60a6      	str	r6, [r4, #8]
	if (_radio.advertiser.adv_data.first !=
    6e2a:	4298      	cmp	r0, r3
    6e2c:	d007      	beq.n	6e3e <event_ext_adv+0x4e>
		first = _radio.advertiser.adv_data.first + 1;
    6e2e:	440b      	add	r3, r1
    6e30:	b2db      	uxtb	r3, r3
			first = 0;
    6e32:	2b02      	cmp	r3, #2
    6e34:	bf08      	it	eq
    6e36:	4613      	moveq	r3, r2
		_radio.advertiser.adv_data.first = first;
    6e38:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
		upd = 1;
    6e3c:	460a      	mov	r2, r1
	if (_radio.advertiser.scan_data.first != _radio.
    6e3e:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
    6e42:	f894 1637 	ldrb.w	r1, [r4, #1591]	; 0x637
    6e46:	4299      	cmp	r1, r3
    6e48:	d007      	beq.n	6e5a <event_ext_adv+0x6a>
		first = _radio.advertiser.scan_data.first + 1;
    6e4a:	3301      	adds	r3, #1
    6e4c:	b2db      	uxtb	r3, r3
			first = 0;
    6e4e:	2b02      	cmp	r3, #2
    6e50:	bf08      	it	eq
    6e52:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    6e54:	f884 3636 	strb.w	r3, [r4, #1590]	; 0x636
		upd = 1;
    6e58:	2201      	movs	r2, #1
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6e5a:	f894 5433 	ldrb.w	r5, [r4, #1075]	; 0x433
	pdu = (void *)_radio.advertiser.adv_data.data
    6e5e:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
	aux_pdu = (void *)_radio.advertiser.aux_adv_data.data
    6e62:	eb05 2505 	add.w	r5, r5, r5, lsl #8
    6e66:	f505 750c 	add.w	r5, r5, #560	; 0x230
    6e6a:	4425      	add	r5, r4
	pdu = (void *)_radio.advertiser.adv_data.data
    6e6c:	eb07 2707 	add.w	r7, r7, r7, lsl #8
		*(h+6)+=1;
    6e70:	7a6b      	ldrb	r3, [r5, #9]
	pdu = (void *)_radio.advertiser.adv_data.data
    6e72:	372c      	adds	r7, #44	; 0x2c
		*(h+6)+=1;
    6e74:	3301      	adds	r3, #1
	pdu = (void *)_radio.advertiser.adv_data.data
    6e76:	19e1      	adds	r1, r4, r7
		*(h+6)+=1;
    6e78:	726b      	strb	r3, [r5, #9]
	if (upd) {
    6e7a:	b152      	cbz	r2, 6e92 <event_ext_adv+0xa2>
		struct pdu_adv *scan_pdu = (void *)
    6e7c:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
    6e80:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    6e84:	4420      	add	r0, r4
		memcpy(&scan_pdu->scan_rsp.addr[0],
    6e86:	2206      	movs	r2, #6
    6e88:	3102      	adds	r1, #2
    6e8a:	f200 4036 	addw	r0, r0, #1078	; 0x436
    6e8e:	f7f9 fbb3 	bl	5f8 <memcpy>
			radio_pkt_tx_set(aux_pdu);
    6e92:	4628      	mov	r0, r5
    6e94:	f007 fcba 	bl	e80c <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    6e98:	5de3      	ldrb	r3, [r4, r7]
    6e9a:	f003 030f 	and.w	r3, r3, #15
    6e9e:	2b02      	cmp	r3, #2
    6ea0:	d037      	beq.n	6f12 <event_ext_adv+0x122>
    6ea2:	2b07      	cmp	r3, #7
    6ea4:	d035      	beq.n	6f12 <event_ext_adv+0x122>
				_radio.state = STATE_TX;
    6ea6:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    6ea8:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    6eaa:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    6eac:	f007 fdd4 	bl	ea58 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    6eb0:	2000      	movs	r0, #0
    6eb2:	f007 fd33 	bl	e91c <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;
    6eb6:	2300      	movs	r3, #0
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
    6eb8:	f894 06a0 	ldrb.w	r0, [r4, #1696]	; 0x6a0
			_radio.ext_advertiser.current_slot = 0;
    6ebc:	f884 3689 	strb.w	r3, [r4, #1673]	; 0x689
			_radio.ext_advertiser.event = 0;
    6ec0:	f884 368a 	strb.w	r3, [r4, #1674]	; 0x68a
				chan_set(_radio.ext_advertiser.aux_pckt_chan);
    6ec4:	f7fe fab8 	bl	5438 <chan_set>
	if (ctrl_rl_enabled()) {
    6ec8:	f006 fe8c 	bl	dbe4 <ctrl_rl_enabled>
    6ecc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    6ed0:	b350      	cbz	r0, 6f28 <event_ext_adv+0x138>
		struct ll_filter *filter =
    6ed2:	f013 0003 	ands.w	r0, r3, #3
    6ed6:	bf18      	it	ne
    6ed8:	2001      	movne	r0, #1
		struct ll_filter *wl = ctrl_filter_get(true);
    6eda:	f006 fcbd 	bl	d858 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    6ede:	1c82      	adds	r2, r0, #2
    6ee0:	7841      	ldrb	r1, [r0, #1]
    6ee2:	7800      	ldrb	r0, [r0, #0]
    6ee4:	f007 fd60 	bl	e9a8 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    6ee8:	68e2      	ldr	r2, [r4, #12]
    6eea:	f106 0109 	add.w	r1, r6, #9
    6eee:	2001      	movs	r0, #1
    6ef0:	f007 fdbe 	bl	ea70 <radio_tmr_start>
	radio_tmr_end_capture();
    6ef4:	f007 fe82 	bl	ebfc <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    6ef8:	4632      	mov	r2, r6
    6efa:	2105      	movs	r1, #5
    6efc:	4816      	ldr	r0, [pc, #88]	; (6f58 <event_ext_adv+0x168>)
    6efe:	f7ff fda1 	bl	6a44 <preempt_calc>
    6f02:	4603      	mov	r3, r0
    6f04:	b1a0      	cbz	r0, 6f30 <event_ext_adv+0x140>
		_radio.state = STATE_STOP;
    6f06:	2304      	movs	r3, #4
    6f08:	7523      	strb	r3, [r4, #20]
}
    6f0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_disable();
    6f0e:	f007 bcab 	b.w	e868 <radio_disable>
				_radio.state = STATE_CLOSE;
    6f12:	2303      	movs	r3, #3
    6f14:	7523      	strb	r3, [r4, #20]
				_radio.advertiser.ext_adv = 1;
    6f16:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6f1a:	f043 0301 	orr.w	r3, r3, #1
    6f1e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
				radio_switch_complete_and_disable();
    6f22:	f007 fd11 	bl	e948 <radio_switch_complete_and_disable>
    6f26:	e7c6      	b.n	6eb6 <event_ext_adv+0xc6>
	if (_radio.advertiser.filter_policy) {
    6f28:	079b      	lsls	r3, r3, #30
    6f2a:	d0dd      	beq.n	6ee8 <event_ext_adv+0xf8>
		struct ll_filter *wl = ctrl_filter_get(true);
    6f2c:	2001      	movs	r0, #1
    6f2e:	e7d4      	b.n	6eda <event_ext_adv+0xea>
		ticker_status =
    6f30:	4a0a      	ldr	r2, [pc, #40]	; (6f5c <event_ext_adv+0x16c>)
    6f32:	4601      	mov	r1, r0
    6f34:	f7fb fea4 	bl	2c80 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6f38:	f030 0302 	bics.w	r3, r0, #2
    6f3c:	d006      	beq.n	6f4c <event_ext_adv+0x15c>
    6f3e:	f641 21f9 	movw	r1, #6905	; 0x1af9
    6f42:	4804      	ldr	r0, [pc, #16]	; (6f54 <event_ext_adv+0x164>)
}
    6f44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6f48:	f7f9 bcb2 	b.w	8b0 <bt_ctlr_assert_handle>
    6f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f4e:	bf00      	nop
    6f50:	20000340 	.word	0x20000340
    6f54:	000109b4 	.word	0x000109b4
    6f58:	20000358 	.word	0x20000358
    6f5c:	0000620d 	.word	0x0000620d

00006f60 <ctrl_tx_enqueue>:
{
    6f60:	b510      	push	{r4, lr}
	    !conn->empty &&
    6f62:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    6f66:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
	if (
    6f6a:	f014 0f80 	tst.w	r4, #128	; 0x80
    6f6e:	d118      	bne.n	6fa2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    6f70:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    !conn->empty &&
    6f74:	b1ab      	cbz	r3, 6fa2 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    6f76:	0724      	lsls	r4, r4, #28
    6f78:	d413      	bmi.n	6fa2 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    6f7a:	f8d0 4148 	ldr.w	r4, [r0, #328]	; 0x148
    6f7e:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    6f80:	bf04      	itt	eq
    6f82:	681c      	ldreq	r4, [r3, #0]
    6f84:	f8c0 4148 	streq.w	r4, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl) {
    6f88:	b992      	cbnz	r2, 6fb0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    6f8a:	681a      	ldr	r2, [r3, #0]
    6f8c:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    6f8e:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    6f90:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
	conn->pkt_tx_ctrl_last = node_tx;
    6f94:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
	if (node_tx->next == 0) {
    6f98:	680b      	ldr	r3, [r1, #0]
    6f9a:	b90b      	cbnz	r3, 6fa0 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    6f9c:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    6fa0:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    6fa2:	b92a      	cbnz	r2, 6fb0 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    6fa4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    6fa8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    6faa:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    6fae:	e7ef      	b.n	6f90 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    6fb0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    6fb4:	681a      	ldr	r2, [r3, #0]
    6fb6:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    6fb8:	6019      	str	r1, [r3, #0]
    6fba:	e7eb      	b.n	6f94 <ctrl_tx_enqueue+0x34>

00006fbc <ctrl_tx_sec_enqueue>:
{
    6fbc:	b410      	push	{r4}
	if (conn->pause_tx) {
    6fbe:	f890 40f8 	ldrb.w	r4, [r0, #248]	; 0xf8
    6fc2:	0724      	lsls	r4, r4, #28
{
    6fc4:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    6fc6:	d50f      	bpl.n	6fe8 <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    6fc8:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
    6fcc:	b931      	cbnz	r1, 6fdc <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    6fce:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
    6fd2:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    6fd4:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
}
    6fd8:	bc10      	pop	{r4}
    6fda:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    6fdc:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
    6fe0:	6819      	ldr	r1, [r3, #0]
    6fe2:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    6fe4:	601a      	str	r2, [r3, #0]
    6fe6:	e7f7      	b.n	6fd8 <ctrl_tx_sec_enqueue+0x1c>
}
    6fe8:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    6fea:	f7ff bfb9 	b.w	6f60 <ctrl_tx_enqueue>
	...

00006ff0 <feature_rsp_send>:
{
    6ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6ff2:	4f21      	ldr	r7, [pc, #132]	; (7078 <feature_rsp_send+0x88>)
{
    6ff4:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6ff6:	f207 7064 	addw	r0, r7, #1892	; 0x764
{
    6ffa:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6ffc:	f7fa fea7 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    7000:	4604      	mov	r4, r0
    7002:	b3b0      	cbz	r0, 7072 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7004:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    7006:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7008:	f8d7 271c 	ldr.w	r2, [r7, #1820]	; 0x71c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    700c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    7010:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    7014:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    7018:	f043 0310 	orr.w	r3, r3, #16
    701c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    7020:	79b1      	ldrb	r1, [r6, #6]
    7022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    7026:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    702a:	f3c1 0110 	ubfx	r1, r1, #0, #17
    702e:	400b      	ands	r3, r1
    7030:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	_radio.conn_curr->common.fex_valid = 1;
    7034:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    7038:	f043 0320 	orr.w	r3, r3, #32
    703c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7040:	7903      	ldrb	r3, [r0, #4]
    7042:	f043 0303 	orr.w	r3, r3, #3
    7046:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7048:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    704a:	2309      	movs	r3, #9
    704c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    704e:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    7050:	2100      	movs	r1, #0
    7052:	4410      	add	r0, r2
    7054:	f7f9 fafc 	bl	650 <memset>
		conn->llcp_features & 0xFF;
    7058:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    705c:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    705e:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    7060:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    7062:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7064:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7066:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    7068:	4621      	mov	r1, r4
    706a:	f7ff ffa7 	bl	6fbc <ctrl_tx_sec_enqueue>
	return 0;
    706e:	2000      	movs	r0, #0
    7070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    7072:	2001      	movs	r0, #1
}
    7074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7076:	bf00      	nop
    7078:	20000340 	.word	0x20000340

0000707c <start_enc_rsp_send>:
{
    707c:	b510      	push	{r4, lr}
    707e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
    7080:	b9c9      	cbnz	r1, 70b6 <start_enc_rsp_send+0x3a>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7082:	480f      	ldr	r0, [pc, #60]	; (70c0 <start_enc_rsp_send+0x44>)
    7084:	f7fa fe63 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    7088:	b1b8      	cbz	r0, 70ba <start_enc_rsp_send+0x3e>
		pdu_ctrl_tx = (void *)node_tx->pdu_data;
    708a:	1d01      	adds	r1, r0, #4
	conn->enc_tx = 1;
    708c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    7090:	f043 0320 	orr.w	r3, r3, #32
    7094:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7098:	780b      	ldrb	r3, [r1, #0]
    709a:	f043 0303 	orr.w	r3, r3, #3
    709e:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    70a0:	2301      	movs	r3, #1
    70a2:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
    70a4:	2306      	movs	r3, #6
    70a6:	70cb      	strb	r3, [r1, #3]
	if (node_tx) {
    70a8:	b140      	cbz	r0, 70bc <start_enc_rsp_send+0x40>
		ctrl_tx_enqueue(conn, node_tx);
    70aa:	4601      	mov	r1, r0
    70ac:	4620      	mov	r0, r4
    70ae:	f7ff ff57 	bl	6f60 <ctrl_tx_enqueue>
	return 0;
    70b2:	2000      	movs	r0, #0
    70b4:	bd10      	pop	{r4, pc}
	struct radio_pdu_node_tx *node_tx = NULL;
    70b6:	2000      	movs	r0, #0
    70b8:	e7e8      	b.n	708c <start_enc_rsp_send+0x10>
			return 1;
    70ba:	2001      	movs	r0, #1
}
    70bc:	bd10      	pop	{r4, pc}
    70be:	bf00      	nop
    70c0:	20000aa4 	.word	0x20000aa4

000070c4 <reject_ext_ind_send>:
{
    70c4:	b570      	push	{r4, r5, r6, lr}
    70c6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    70c8:	480b      	ldr	r0, [pc, #44]	; (70f8 <reject_ext_ind_send+0x34>)
{
    70ca:	460e      	mov	r6, r1
    70cc:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    70ce:	f7fa fe3e 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    70d2:	b178      	cbz	r0, 70f4 <reject_ext_ind_send+0x30>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    70d4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    70d6:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    70d8:	f043 0303 	orr.w	r3, r3, #3
    70dc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    70de:	2303      	movs	r3, #3
    70e0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    70e2:	2311      	movs	r3, #17
    70e4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
    70e6:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
    70e8:	4601      	mov	r1, r0
    70ea:	4620      	mov	r0, r4
    70ec:	f7ff ff38 	bl	6f60 <ctrl_tx_enqueue>
	return 0;
    70f0:	2000      	movs	r0, #0
    70f2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    70f4:	2001      	movs	r0, #1
}
    70f6:	bd70      	pop	{r4, r5, r6, pc}
    70f8:	20000aa4 	.word	0x20000aa4
    70fc:	00000000 	.word	0x00000000

00007100 <event_connection_prepare>:
{
    7100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    7104:	4dc9      	ldr	r5, [pc, #804]	; (742c <event_connection_prepare+0x32c>)
{
    7106:	b08f      	sub	sp, #60	; 0x3c
    7108:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    710a:	7c2b      	ldrb	r3, [r5, #16]
{
    710c:	910c      	str	r1, [sp, #48]	; 0x30
    710e:	4681      	mov	r9, r0
    7110:	4617      	mov	r7, r2
	LL_ASSERT(!_radio.ticker_id_prepare);
    7112:	b123      	cbz	r3, 711e <event_connection_prepare+0x1e>
    7114:	f242 3128 	movw	r1, #9000	; 0x2328
    7118:	48c5      	ldr	r0, [pc, #788]	; (7430 <event_connection_prepare+0x330>)
    711a:	f7f9 fbc9 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    711e:	f894 3020 	ldrb.w	r3, [r4, #32]
    7122:	3307      	adds	r3, #7
    7124:	b2db      	uxtb	r3, r3
    7126:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    7128:	f994 301d 	ldrsb.w	r3, [r4, #29]
    712c:	2b00      	cmp	r3, #0
    712e:	da09      	bge.n	7144 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    7130:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn->slave.window_widening_prepare_us +=
    7132:	6de2      	ldr	r2, [r4, #92]	; 0x5c
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    7134:	fb07 3303 	mla	r3, r7, r3, r3
		conn->slave.window_widening_prepare_us +=
    7138:	4413      	add	r3, r2
		    conn->slave.window_widening_max_us) {
    713a:	6da2      	ldr	r2, [r4, #88]	; 0x58
		conn->slave.window_widening_prepare_us +=
    713c:	65e3      	str	r3, [r4, #92]	; 0x5c
		if (conn->slave.window_widening_prepare_us >
    713e:	4293      	cmp	r3, r2
			conn->slave.window_widening_prepare_us =
    7140:	bf88      	it	hi
    7142:	65e2      	strhi	r2, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    7144:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    7146:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
	conn->latency_prepare += lazy;
    714a:	4417      	add	r7, r2
	event_counter = conn->event_counter + conn->latency_prepare;
    714c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    714e:	b2bf      	uxth	r7, r7
    7150:	8527      	strh	r7, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    7152:	4417      	add	r7, r2
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    7154:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    7158:	429a      	cmp	r2, r3
	event_counter = conn->event_counter + conn->latency_prepare;
    715a:	b2bf      	uxth	r7, r7
	if ((conn->llcp_ack == conn->llcp_req) && !conn->pause_rx) {
    715c:	f040 81a7 	bne.w	74ae <event_connection_prepare+0x3ae>
    7160:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    7164:	075e      	lsls	r6, r3, #29
    7166:	f100 828a 	bmi.w	767e <event_connection_prepare+0x57e>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
    716a:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    716e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    7172:	429a      	cmp	r2, r3
    7174:	f000 8094 	beq.w	72a0 <event_connection_prepare+0x1a0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    7178:	2005      	movs	r0, #5
    717a:	f7ff fa6b 	bl	6654 <event_stop.constprop.26>
	conn_upd = _radio.conn_upd;
    717e:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
	if (conn_upd && (conn_upd != conn)) {
    7182:	b113      	cbz	r3, 718a <event_connection_prepare+0x8a>
    7184:	429c      	cmp	r4, r3
    7186:	f040 808b 	bne.w	72a0 <event_connection_prepare+0x1a0>
	switch (conn->llcp_conn_param.state) {
    718a:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    718e:	f003 0307 	and.w	r3, r3, #7
    7192:	2b05      	cmp	r3, #5
    7194:	f200 8146 	bhi.w	7424 <event_connection_prepare+0x324>
    7198:	e8df f013 	tbh	[pc, r3, lsl #1]
    719c:	00630006 	.word	0x00630006
    71a0:	0082011a 	.word	0x0082011a
    71a4:	00820082 	.word	0x00820082
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    71a8:	48a2      	ldr	r0, [pc, #648]	; (7434 <event_connection_prepare+0x334>)
    71aa:	f7fa fdd0 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    71ae:	4606      	mov	r6, r0
    71b0:	2800      	cmp	r0, #0
    71b2:	d075      	beq.n	72a0 <event_connection_prepare+0x1a0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    71b4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    71b8:	2204      	movs	r2, #4
    71ba:	f362 0302 	bfi	r3, r2, #0, #3
    71be:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    71c2:	7903      	ldrb	r3, [r0, #4]
    71c4:	f043 0303 	orr.w	r3, r3, #3
    71c8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    71ca:	2318      	movs	r3, #24
    71cc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    71ce:	230f      	movs	r3, #15
    71d0:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
    71d2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    71d6:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
    71d8:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
    71da:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    71de:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
    71e0:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    71e4:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
    71e6:	2300      	movs	r3, #0
    71e8:	7403      	strb	r3, [r0, #16]
	p->offset0 = 0x0000;
    71ea:	74c3      	strb	r3, [r0, #19]
    71ec:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
    71ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    71f2:	7543      	strb	r3, [r0, #21]
    71f4:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
    71f6:	75c3      	strb	r3, [r0, #23]
    71f8:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
    71fa:	7643      	strb	r3, [r0, #25]
    71fc:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
    71fe:	76c3      	strb	r3, [r0, #27]
    7200:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
    7202:	7743      	strb	r3, [r0, #29]
    7204:	7783      	strb	r3, [r0, #30]
	p->reference_conn_event_count = event_counter;
    7206:	f8a0 7011 	strh.w	r7, [r0, #17]
	ctrl_tx_enqueue(conn, node_tx);
    720a:	4601      	mov	r1, r0
    720c:	4620      	mov	r0, r4
    720e:	f7ff fea7 	bl	6f60 <ctrl_tx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7212:	6822      	ldr	r2, [r4, #0]
	conn->procedure_expire = conn->procedure_reload;
    7214:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	_radio.conn_upd = conn;
    7218:	f8c5 4790 	str.w	r4, [r5, #1936]	; 0x790
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    721c:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
    721e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
    7222:	f8c4 90e0 	str.w	r9, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7226:	da0b      	bge.n	7240 <event_connection_prepare+0x140>
			u32_t ticks_prepare_to_start =
    7228:	68a3      	ldr	r3, [r4, #8]
    722a:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    722c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
    7230:	428b      	cmp	r3, r1
    7232:	bf2c      	ite	cs
    7234:	444b      	addcs	r3, r9
    7236:	eb09 0301 	addcc.w	r3, r9, r1
    723a:	1a9b      	subs	r3, r3, r2
    723c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    7240:	3613      	adds	r6, #19
		s_mfy_sched_offset.param = (void *)conn;
    7242:	4b7d      	ldr	r3, [pc, #500]	; (7438 <event_connection_prepare+0x338>)
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
    7244:	f8c4 60dc 	str.w	r6, [r4, #220]	; 0xdc
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7248:	2201      	movs	r2, #1
    724a:	4611      	mov	r1, r2
    724c:	2000      	movs	r0, #0
		s_mfy_sched_offset.param = (void *)conn;
    724e:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7250:	f7fa fe48 	bl	1ee4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    7254:	b320      	cbz	r0, 72a0 <event_connection_prepare+0x1a0>
    7256:	f242 0192 	movw	r1, #8338	; 0x2092
		LL_ASSERT(0);
    725a:	4875      	ldr	r0, [pc, #468]	; (7430 <event_connection_prepare+0x330>)
    725c:	f7f9 fb28 	bl	8b0 <bt_ctlr_assert_handle>
    7260:	e01e      	b.n	72a0 <event_connection_prepare+0x1a0>
	if (conn->llcp_conn_param.status) {
    7262:	f894 60c3 	ldrb.w	r6, [r4, #195]	; 0xc3
    7266:	b396      	cbz	r6, 72ce <event_connection_prepare+0x1ce>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7268:	4872      	ldr	r0, [pc, #456]	; (7434 <event_connection_prepare+0x334>)
    726a:	f7fa fd70 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    726e:	4601      	mov	r1, r0
    7270:	b1b0      	cbz	r0, 72a0 <event_connection_prepare+0x1a0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    7272:	7903      	ldrb	r3, [r0, #4]
    7274:	f043 0303 	orr.w	r3, r3, #3
    7278:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    727a:	2311      	movs	r3, #17
    727c:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    727e:	2303      	movs	r3, #3
    7280:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    7282:	230f      	movs	r3, #15
    7284:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
    7286:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    728a:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
    728c:	4620      	mov	r0, r4
    728e:	f7ff fe67 	bl	6f60 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    7292:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    7296:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
    729a:	2300      	movs	r3, #0
    729c:	f8c5 3790 	str.w	r3, [r5, #1936]	; 0x790
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    72a0:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
    72a4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
    72a8:	429a      	cmp	r2, r3
    72aa:	f000 80f9 	beq.w	74a0 <event_connection_prepare+0x3a0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
    72ae:	2005      	movs	r0, #5
    72b0:	f7ff f9d0 	bl	6654 <event_stop.constprop.26>
	switch (conn->llcp_phy.state) {
    72b4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    72b8:	f003 0203 	and.w	r2, r3, #3
    72bc:	2a03      	cmp	r2, #3
    72be:	f200 8168 	bhi.w	7592 <event_connection_prepare+0x492>
    72c2:	e8df f012 	tbh	[pc, r2, lsl #1]
    72c6:	00bb      	.short	0x00bb
    72c8:	00ed00ed 	.word	0x00ed00ed
    72cc:	0107      	.short	0x0107
	if (!conn->role) {
    72ce:	f994 301d 	ldrsb.w	r3, [r4, #29]
    72d2:	2b00      	cmp	r3, #0
    72d4:	db3b      	blt.n	734e <event_connection_prepare+0x24e>
		if (conn->llcp_req != conn->llcp_ack) {
    72d6:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    72da:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    72de:	428b      	cmp	r3, r1
    72e0:	d1de      	bne.n	72a0 <event_connection_prepare+0x1a0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    72e2:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_offset_us = 0;
    72e6:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    72ea:	2205      	movs	r2, #5
    72ec:	f362 0302 	bfi	r3, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
    72f0:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    72f4:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
    72f8:	2301      	movs	r3, #1
    72fa:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
				((conn->llcp_conn_param.interval /
    72fe:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
		if (conn->llcp_conn_param.preferred_periodicity) {
    7302:	b122      	cbz	r2, 730e <event_connection_prepare+0x20e>
				((conn->llcp_conn_param.interval /
    7304:	fb93 f3f2 	sdiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
    7308:	3301      	adds	r3, #1
			conn->llcp.conn_upd.interval =
    730a:	fb13 f302 	smulbb	r3, r3, r2
			conn->llcp.conn_upd.interval =
    730e:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
    7312:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    7316:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
    731a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    731e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
    7322:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    7326:	2202      	movs	r2, #2
    7328:	f362 0301 	bfi	r3, r2, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
    732c:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
    7330:	f082 0208 	eor.w	r2, r2, #8
    7334:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    7338:	f362 0382 	bfi	r3, r2, #2, #1
    733c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_ack--;
    7340:	3901      	subs	r1, #1
		conn->llcp_type = LLCP_CONN_UPD;
    7342:	2301      	movs	r3, #1
    7344:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    7348:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
    734c:	e7a8      	b.n	72a0 <event_connection_prepare+0x1a0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    734e:	4839      	ldr	r0, [pc, #228]	; (7434 <event_connection_prepare+0x334>)
    7350:	f7fa fcfd 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    7354:	4601      	mov	r1, r0
    7356:	2800      	cmp	r0, #0
    7358:	d0a2      	beq.n	72a0 <event_connection_prepare+0x1a0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    735a:	7903      	ldrb	r3, [r0, #4]
    735c:	f043 0303 	orr.w	r3, r3, #3
    7360:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    7362:	2318      	movs	r3, #24
    7364:	7143      	strb	r3, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    7366:	2310      	movs	r3, #16
    7368:	71c3      	strb	r3, [r0, #7]
	rsp->interval_min = conn->llcp_conn_param.interval;
    736a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    736e:	8103      	strh	r3, [r0, #8]
	rsp->interval_max = conn->llcp_conn_param.interval;
    7370:	8143      	strh	r3, [r0, #10]
	rsp->latency = conn->llcp_conn_param.latency;
    7372:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    7376:	8183      	strh	r3, [r0, #12]
	rsp->timeout = conn->llcp_conn_param.timeout;
    7378:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    737c:	81c3      	strh	r3, [r0, #14]
	rsp->preferred_periodicity =
    737e:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
    7382:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
    7384:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
    7388:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset0 = conn->llcp_conn_param.offset0;
    738c:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    7390:	f8a0 3013 	strh.w	r3, [r0, #19]
	rsp->offset1 = conn->llcp_conn_param.offset1;
    7394:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
    7398:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset2 = conn->llcp_conn_param.offset2;
    739c:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
    73a0:	f8a0 3017 	strh.w	r3, [r0, #23]
	rsp->offset3 = conn->llcp_conn_param.offset3;
    73a4:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
    73a8:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset4 = conn->llcp_conn_param.offset4;
    73ac:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
    73b0:	f8a0 301b 	strh.w	r3, [r0, #27]
	rsp->offset5 = conn->llcp_conn_param.offset5;
    73b4:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
    73b8:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
    73bc:	4620      	mov	r0, r4
    73be:	f7ff fdcf 	bl	6f60 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    73c2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    73c6:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
    73ca:	f8c5 6790 	str.w	r6, [r5, #1936]	; 0x790
    73ce:	e767      	b.n	72a0 <event_connection_prepare+0x1a0>
	if (conn->pause_tx) {
    73d0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    73d4:	0718      	lsls	r0, r3, #28
    73d6:	f53f af63 	bmi.w	72a0 <event_connection_prepare+0x1a0>
	node_rx = packet_rx_reserve_get(2);
    73da:	2002      	movs	r0, #2
    73dc:	f7fd fbac 	bl	4b38 <packet_rx_reserve_get>
	if (!node_rx) {
    73e0:	2800      	cmp	r0, #0
    73e2:	f43f af5d 	beq.w	72a0 <event_connection_prepare+0x1a0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    73e6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    73ea:	2203      	movs	r2, #3
    73ec:	f362 0302 	bfi	r3, r2, #0, #3
    73f0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
    73f4:	8c23      	ldrh	r3, [r4, #32]
    73f6:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    73f8:	2301      	movs	r3, #1
    73fa:	7103      	strb	r3, [r0, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    73fc:	7a03      	ldrb	r3, [r0, #8]
    73fe:	4313      	orrs	r3, r2
    7400:	7203      	strb	r3, [r0, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    7402:	2318      	movs	r3, #24
    7404:	7243      	strb	r3, [r0, #9]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    7406:	230f      	movs	r3, #15
    7408:	72c3      	strb	r3, [r0, #11]
	p->interval_min = conn->llcp_conn_param.interval;
    740a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
    740e:	8183      	strh	r3, [r0, #12]
	p->interval_max = conn->llcp_conn_param.interval;
    7410:	81c3      	strh	r3, [r0, #14]
	p->latency = conn->llcp_conn_param.latency;
    7412:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
    7416:	8203      	strh	r3, [r0, #16]
	p->timeout = conn->llcp_conn_param.timeout;
    7418:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
    741c:	8243      	strh	r3, [r0, #18]
	packet_rx_enqueue();
    741e:	f7fe fd67 	bl	5ef0 <packet_rx_enqueue>
    7422:	e73d      	b.n	72a0 <event_connection_prepare+0x1a0>
		LL_ASSERT(0);
    7424:	f242 114b 	movw	r1, #8523	; 0x214b
    7428:	e717      	b.n	725a <event_connection_prepare+0x15a>
    742a:	bf00      	nop
    742c:	20000340 	.word	0x20000340
    7430:	000109b4 	.word	0x000109b4
    7434:	20000aa4 	.word	0x20000aa4
    7438:	20005548 	.word	0x20005548
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    743c:	48b2      	ldr	r0, [pc, #712]	; (7708 <event_connection_prepare+0x608>)
    743e:	f7fa fc86 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    7442:	4601      	mov	r1, r0
    7444:	b360      	cbz	r0, 74a0 <event_connection_prepare+0x3a0>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    7446:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_rx = conn->llcp_phy.rx;
    744a:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    744e:	2201      	movs	r2, #1
    7450:	f362 0301 	bfi	r3, r2, #0, #2
    7454:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
    7458:	b2db      	uxtb	r3, r3
    745a:	f3c3 0082 	ubfx	r0, r3, #2, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    745e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->phy_pref_tx = conn->llcp_phy.tx;
    7462:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
		conn->phy_pref_rx = conn->llcp_phy.rx;
    7466:	f363 06c5 	bfi	r6, r3, #3, #3
    746a:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
    746e:	f894 60f7 	ldrb.w	r6, [r4, #247]	; 0xf7
		conn->phy_pref_tx = conn->llcp_phy.tx;
    7472:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    7476:	f366 1286 	bfi	r2, r6, #6, #1
    747a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    747e:	790a      	ldrb	r2, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
    7480:	7208      	strb	r0, [r1, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7482:	f042 0203 	orr.w	r2, r2, #3
    7486:	710a      	strb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    7488:	2203      	movs	r2, #3
    748a:	714a      	strb	r2, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    748c:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
    748e:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    7490:	71ca      	strb	r2, [r1, #7]
		ctrl_tx_enqueue(conn, node_tx);
    7492:	4620      	mov	r0, r4
    7494:	f7ff fd64 	bl	6f60 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    7498:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    749c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_ack != conn->llcp_req) {
    74a0:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
    74a4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    74a8:	429a      	cmp	r2, r3
    74aa:	f000 80e8 	beq.w	767e <event_connection_prepare+0x57e>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    74ae:	2005      	movs	r0, #5
    74b0:	f7ff f8d0 	bl	6654 <event_stop.constprop.26>
		switch (conn->llcp_type) {
    74b4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
    74b8:	3b01      	subs	r3, #1
    74ba:	2b07      	cmp	r3, #7
    74bc:	f200 85ad 	bhi.w	801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
    74c0:	e8df f013 	tbh	[pc, r3, lsl #1]
    74c4:	02d8006d 	.word	0x02d8006d
    74c8:	04510337 	.word	0x04510337
    74cc:	05ab0481 	.word	0x05ab0481
    74d0:	04f404da 	.word	0x04f404da
		conn->llcp_phy.ack = conn->llcp_phy.req;
    74d4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
    74d8:	f884 20f5 	strb.w	r2, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
    74dc:	f3c3 0282 	ubfx	r2, r3, #2, #3
    74e0:	0791      	lsls	r1, r2, #30
    74e2:	d544      	bpl.n	756e <event_connection_prepare+0x46e>
			conn->llcp_phy.tx = BIT(1);
    74e4:	2202      	movs	r2, #2
			conn->llcp_phy.tx = 0;
    74e6:	f362 0384 	bfi	r3, r2, #2, #3
    74ea:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
    74ee:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    74f2:	095a      	lsrs	r2, r3, #5
    74f4:	0790      	lsls	r0, r2, #30
    74f6:	d543      	bpl.n	7580 <event_connection_prepare+0x480>
			conn->llcp_phy.rx = BIT(1);
    74f8:	2202      	movs	r2, #2
			conn->llcp_phy.rx = 0;
    74fa:	f362 1347 	bfi	r3, r2, #5, #3
    74fe:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
    7502:	f894 20f6 	ldrb.w	r2, [r4, #246]	; 0xf6
    7506:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    750a:	f3c2 0182 	ubfx	r1, r2, #2, #3
    750e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    7512:	428b      	cmp	r3, r1
    7514:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
    7518:	bf14      	ite	ne
    751a:	f361 0384 	bfine	r3, r1, #2, #3
			conn->llcp.phy_upd_ind.tx = 0;
    751e:	f36f 0384 	bfceq	r3, #2, #3
    7522:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
    7526:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    752a:	0952      	lsrs	r2, r2, #5
    752c:	f003 0307 	and.w	r3, r3, #7
    7530:	4293      	cmp	r3, r2
    7532:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
    7536:	bf14      	ite	ne
    7538:	f362 1347 	bfine	r3, r2, #5, #3
			conn->llcp.phy_upd_ind.rx = 0;
    753c:	f36f 1347 	bfceq	r3, #5, #3
    7540:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
    7544:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    7548:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
    754c:	f043 0301 	orr.w	r3, r3, #1
    7550:	f3c2 0240 	ubfx	r2, r2, #1, #1
    7554:	f362 0341 	bfi	r3, r2, #1, #1
    7558:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
    755c:	2308      	movs	r3, #8
    755e:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
    7562:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    7566:	3b01      	subs	r3, #1
    7568:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    756c:	e798      	b.n	74a0 <event_connection_prepare+0x3a0>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    756e:	07d6      	lsls	r6, r2, #31
    7570:	d501      	bpl.n	7576 <event_connection_prepare+0x476>
			conn->llcp_phy.tx = BIT(0);
    7572:	2201      	movs	r2, #1
    7574:	e7b7      	b.n	74e6 <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    7576:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = BIT(2);
    757a:	bf18      	it	ne
    757c:	2204      	movne	r2, #4
    757e:	e7b2      	b.n	74e6 <event_connection_prepare+0x3e6>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    7580:	07d1      	lsls	r1, r2, #31
    7582:	d501      	bpl.n	7588 <event_connection_prepare+0x488>
			conn->llcp_phy.rx = BIT(0);
    7584:	2201      	movs	r2, #1
    7586:	e7b8      	b.n	74fa <event_connection_prepare+0x3fa>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    7588:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    758c:	bf18      	it	ne
    758e:	2204      	movne	r2, #4
    7590:	e7b3      	b.n	74fa <event_connection_prepare+0x3fa>
		LL_ASSERT(0);
    7592:	f242 21ad 	movw	r1, #8877	; 0x22ad
    7596:	485d      	ldr	r0, [pc, #372]	; (770c <event_connection_prepare+0x60c>)
    7598:	f7f9 f98a 	bl	8b0 <bt_ctlr_assert_handle>
    759c:	e780      	b.n	74a0 <event_connection_prepare+0x3a0>
	if (!conn_upd) {
    759e:	f8d5 3790 	ldr.w	r3, [r5, #1936]	; 0x790
    75a2:	b90b      	cbnz	r3, 75a8 <event_connection_prepare+0x4a8>
		_radio.conn_upd = conn;
    75a4:	f8c5 4790 	str.w	r4, [r5, #1936]	; 0x790
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    75a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    75ac:	f013 0303 	ands.w	r3, r3, #3
    75b0:	f000 80b4 	beq.w	771c <event_connection_prepare+0x61c>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    75b4:	4854      	ldr	r0, [pc, #336]	; (7708 <event_connection_prepare+0x608>)
    75b6:	f7fa fbca 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    75ba:	4606      	mov	r6, r0
    75bc:	2800      	cmp	r0, #0
    75be:	d05e      	beq.n	767e <event_connection_prepare+0x57e>
		switch (conn->llcp.conn_upd.state) {
    75c0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    75c4:	f003 0303 	and.w	r3, r3, #3
    75c8:	2b01      	cmp	r3, #1
    75ca:	f000 809b 	beq.w	7704 <event_connection_prepare+0x604>
    75ce:	2b02      	cmp	r3, #2
    75d0:	f040 8091 	bne.w	76f6 <event_connection_prepare+0x5f6>
			fp_mayfly_select_or_use =
    75d4:	4a4e      	ldr	r2, [pc, #312]	; (7710 <event_connection_prepare+0x610>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    75d6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    75da:	f36f 0301 	bfc	r3, #0, #2
    75de:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
    75e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    75e4:	3306      	adds	r3, #6
    75e6:	443b      	add	r3, r7
    75e8:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    75ea:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    75ee:	7931      	ldrb	r1, [r6, #4]
    75f0:	f041 0103 	orr.w	r1, r1, #3
    75f4:	7131      	strb	r1, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    75f6:	210c      	movs	r1, #12
    75f8:	7171      	strb	r1, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    75fa:	2100      	movs	r1, #0
    75fc:	71f1      	strb	r1, [r6, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    75fe:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
    7602:	7231      	strb	r1, [r6, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    7604:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    7608:	f240 40e2 	movw	r0, #1250	; 0x4e2
    760c:	fbb1 f1f0 	udiv	r1, r1, r0
    7610:	f8a6 1009 	strh.w	r1, [r6, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    7614:	f8b4 107a 	ldrh.w	r1, [r4, #122]	; 0x7a
    7618:	f8a6 100b 	strh.w	r1, [r6, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    761c:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    7620:	f8a6 100d 	strh.w	r1, [r6, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    7624:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    7628:	f8a6 100f 	strh.w	r1, [r6, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    762c:	f8a6 3011 	strh.w	r3, [r6, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7630:	6821      	ldr	r1, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    7632:	f8c4 9090 	str.w	r9, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    7636:	2900      	cmp	r1, #0
    7638:	da0b      	bge.n	7652 <event_connection_prepare+0x552>
			u32_t ticks_prepare_to_start =
    763a:	68a3      	ldr	r3, [r4, #8]
    763c:	6860      	ldr	r0, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    763e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    7642:	4283      	cmp	r3, r0
    7644:	bf2c      	ite	cs
    7646:	444b      	addcs	r3, r9
    7648:	eb09 0300 	addcc.w	r3, r9, r0
    764c:	1a5b      	subs	r3, r3, r1
    764e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    7652:	f106 0309 	add.w	r3, r6, #9
    7656:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    765a:	4b2e      	ldr	r3, [pc, #184]	; (7714 <event_connection_prepare+0x614>)
    765c:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    765e:	2201      	movs	r2, #1
    7660:	4611      	mov	r1, r2
    7662:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    7664:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    7666:	f7fa fc3d 	bl	1ee4 <mayfly_enqueue>
		LL_ASSERT(!retval);
    766a:	b120      	cbz	r0, 7676 <event_connection_prepare+0x576>
    766c:	f641 51d0 	movw	r1, #7632	; 0x1dd0
    7670:	4826      	ldr	r0, [pc, #152]	; (770c <event_connection_prepare+0x60c>)
    7672:	f7f9 f91d 	bl	8b0 <bt_ctlr_assert_handle>
			ctrl_tx_enqueue(conn, node_tx);
    7676:	4631      	mov	r1, r6
    7678:	4620      	mov	r0, r4
    767a:	f7ff fc71 	bl	6f60 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    767e:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    7682:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    7686:	429a      	cmp	r2, r3
    7688:	d01e      	beq.n	76c8 <event_connection_prepare+0x5c8>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    768a:	2005      	movs	r0, #5
    768c:	f7fe ffe2 	bl	6654 <event_stop.constprop.26>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7690:	481d      	ldr	r0, [pc, #116]	; (7708 <event_connection_prepare+0x608>)
    7692:	f7fa fb5c 	bl	1d4e <mem_acquire>
		if (node_tx) {
    7696:	4601      	mov	r1, r0
    7698:	b1b0      	cbz	r0, 76c8 <event_connection_prepare+0x5c8>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    769a:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    769e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    76a2:	7903      	ldrb	r3, [r0, #4]
    76a4:	f043 0303 	orr.w	r3, r3, #3
    76a8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    76aa:	2302      	movs	r3, #2
    76ac:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    76ae:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    76b0:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    76b4:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    76b6:	4620      	mov	r0, r4
    76b8:	f7ff fc52 	bl	6f60 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    76bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			if (conn->procedure_expire <= 1) {
    76be:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    76c0:	bf98      	it	ls
    76c2:	3301      	addls	r3, #1
    76c4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    76c8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    76cc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    76d0:	429a      	cmp	r2, r3
    76d2:	f000 84e5 	beq.w	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    76d6:	2005      	movs	r0, #5
    76d8:	f7fe ffbc 	bl	6654 <event_stop.constprop.26>
	switch (conn->llcp_length.state) {
    76dc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
    76e0:	f003 0303 	and.w	r3, r3, #3
    76e4:	2b03      	cmp	r3, #3
    76e6:	f200 85bd 	bhi.w	8264 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x264>
    76ea:	e8df f013 	tbh	[pc, r3, lsl #1]
    76ee:	0499      	.short	0x0499
    76f0:	04d904d9 	.word	0x04d904d9
    76f4:	04f5      	.short	0x04f5
			LL_ASSERT(0);
    76f6:	f641 6108 	movw	r1, #7688	; 0x1e08
    76fa:	4804      	ldr	r0, [pc, #16]	; (770c <event_connection_prepare+0x60c>)
    76fc:	f7f9 f8d8 	bl	8b0 <bt_ctlr_assert_handle>
		void (*fp_mayfly_select_or_use)(void *) = NULL;
    7700:	2200      	movs	r2, #0
    7702:	e768      	b.n	75d6 <event_connection_prepare+0x4d6>
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    7704:	4a04      	ldr	r2, [pc, #16]	; (7718 <event_connection_prepare+0x618>)
    7706:	e766      	b.n	75d6 <event_connection_prepare+0x4d6>
    7708:	20000aa4 	.word	0x20000aa4
    770c:	000109b4 	.word	0x000109b4
    7710:	00005b99 	.word	0x00005b99
    7714:	20005538 	.word	0x20005538
    7718:	00005e59 	.word	0x00005e59
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    771c:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
    7720:	eba7 0808 	sub.w	r8, r7, r8
    7724:	fa1f f888 	uxth.w	r8, r8
	} else if (instant_latency <= 0x7FFF) {
    7728:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    772c:	d1a7      	bne.n	767e <event_connection_prepare+0x57e>
		conn->llcp_ack = conn->llcp_req;
    772e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    7732:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    7736:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    773a:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
    773e:	428a      	cmp	r2, r1
    7740:	d009      	beq.n	7756 <event_connection_prepare+0x656>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    7742:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    7746:	f002 0207 	and.w	r2, r2, #7
    774a:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    774c:	bf04      	itt	eq
    774e:	f884 10c1 	strbeq.w	r1, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
    7752:	f8a4 3044 	strheq.w	r3, [r4, #68]	; 0x44
		if (_radio.conn_upd == conn) {
    7756:	f8d5 2790 	ldr.w	r2, [r5, #1936]	; 0x790
		_radio.ticker_id_prepare = 0;
    775a:	2300      	movs	r3, #0
		if (_radio.conn_upd == conn) {
    775c:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    775e:	bf08      	it	eq
    7760:	f8c5 3790 	streq.w	r3, [r5, #1936]	; 0x790
		_radio.ticker_id_prepare = 0;
    7764:	742b      	strb	r3, [r5, #16]
		if ((conn->llcp.conn_upd.interval !=
    7766:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    7768:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    776c:	429a      	cmp	r2, r3
    776e:	d114      	bne.n	779a <event_connection_prepare+0x69a>
		     conn->conn_interval) ||
    7770:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
    7774:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7776:	4299      	cmp	r1, r3
    7778:	d10f      	bne.n	779a <event_connection_prepare+0x69a>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    777a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    777e:	435a      	muls	r2, r3
    7780:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    7784:	f242 7110 	movw	r1, #10000	; 0x2710
    7788:	fb01 2303 	mla	r3, r1, r3, r2
    778c:	3b01      	subs	r3, #1
    778e:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    7792:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    7794:	b29b      	uxth	r3, r3
    7796:	429a      	cmp	r2, r3
    7798:	d01a      	beq.n	77d0 <event_connection_prepare+0x6d0>
			node_rx = packet_rx_reserve_get(2);
    779a:	2002      	movs	r0, #2
    779c:	f7fd f9cc 	bl	4b38 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    77a0:	4606      	mov	r6, r0
    77a2:	b920      	cbnz	r0, 77ae <event_connection_prepare+0x6ae>
    77a4:	f641 6144 	movw	r1, #7748	; 0x1e44
    77a8:	48c7      	ldr	r0, [pc, #796]	; (7ac8 <event_connection_prepare+0x9c8>)
    77aa:	f7f9 f881 	bl	8b0 <bt_ctlr_assert_handle>
			node_rx->hdr.handle = conn->handle;
    77ae:	8c23      	ldrh	r3, [r4, #32]
    77b0:	80f3      	strh	r3, [r6, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    77b2:	2308      	movs	r3, #8
    77b4:	7133      	strb	r3, [r6, #4]
			radio_le_conn_update_cmplt->status =
    77b6:	2300      	movs	r3, #0
    77b8:	72f3      	strb	r3, [r6, #11]
			radio_le_conn_update_cmplt->interval =
    77ba:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    77be:	81b3      	strh	r3, [r6, #12]
			radio_le_conn_update_cmplt->latency =
    77c0:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    77c4:	81f3      	strh	r3, [r6, #14]
			radio_le_conn_update_cmplt->timeout =
    77c6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    77ca:	8233      	strh	r3, [r6, #16]
			packet_rx_enqueue();
    77cc:	f7fe fb90 	bl	5ef0 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    77d0:	6823      	ldr	r3, [r4, #0]
    77d2:	6867      	ldr	r7, [r4, #4]
    77d4:	2b00      	cmp	r3, #0
    77d6:	da0a      	bge.n	77ee <event_connection_prepare+0x6ee>
			u32_t ticks_prepare_to_start =
    77d8:	68a6      	ldr	r6, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    77da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    77de:	42be      	cmp	r6, r7
    77e0:	bf2c      	ite	cs
    77e2:	444e      	addcs	r6, r9
    77e4:	eb09 0607 	addcc.w	r6, r9, r7
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    77e8:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    77ea:	eba6 0903 	sub.w	r9, r6, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    77ee:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    77f0:	f8b4 b07a 	ldrh.w	fp, [r4, #122]	; 0x7a
    77f4:	49b5      	ldr	r1, [pc, #724]	; (7acc <event_connection_prepare+0x9cc>)
		conn_interval_old = instant_latency * conn->conn_interval;
    77f6:	fb13 f308 	smulbb	r3, r3, r8
    77fa:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    77fc:	fbb3 f2fb 	udiv	r2, r3, fp
    7800:	fa1f fa82 	uxth.w	sl, r2
		conn_interval_new = latency *
    7804:	fb1b f00a 	smulbb	r0, fp, sl
    7808:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    780a:	4283      	cmp	r3, r0
    780c:	f080 8112 	bcs.w	7a34 <event_connection_prepare+0x934>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    7810:	1ac0      	subs	r0, r0, r3
    7812:	f240 1223 	movw	r2, #291	; 0x123
    7816:	4342      	muls	r2, r0
    7818:	17c3      	asrs	r3, r0, #31
    781a:	fb01 2303 	mla	r3, r1, r3, r2
    781e:	fba0 0101 	umull	r0, r1, r0, r1
    7822:	4419      	add	r1, r3
    7824:	a3a6      	add	r3, pc, #664	; (adr r3, 7ac0 <event_connection_prepare+0x9c0>)
    7826:	e9d3 2300 	ldrd	r2, r3, [r3]
    782a:	f7f8 fd1d 	bl	268 <__aeabi_uldivmod>
    782e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7832:	eb00 0609 	add.w	r6, r0, r9
		conn->latency_prepare -= (instant_latency - latency);
    7836:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7838:	eba3 0308 	sub.w	r3, r3, r8
    783c:	4453      	add	r3, sl
    783e:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    7840:	6823      	ldr	r3, [r4, #0]
    7842:	429f      	cmp	r7, r3
    7844:	bf38      	it	cc
    7846:	461f      	movcc	r7, r3
		if (conn->role) {
    7848:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    784c:	970c      	str	r7, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    784e:	f240 49e2 	movw	r9, #1250	; 0x4e2
		if (conn->role) {
    7852:	2b00      	cmp	r3, #0
    7854:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    7858:	930b      	str	r3, [sp, #44]	; 0x2c
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    785a:	fb09 f70b 	mul.w	r7, r9, fp
		if (conn->role) {
    785e:	f280 80fa 	bge.w	7a56 <event_connection_prepare+0x956>
			conn->slave.window_widening_prepare_us -=
    7862:	6de2      	ldr	r2, [r4, #92]	; 0x5c
				conn->slave.window_widening_periodic_us *
    7864:	6d63      	ldr	r3, [r4, #84]	; 0x54
				(((gc_lookup_ppm[_radio.sca] +
    7866:	499a      	ldr	r1, [pc, #616]	; (7ad0 <event_connection_prepare+0x9d0>)
			conn->slave.window_widening_prepare_us -=
    7868:	fb03 2318 	mls	r3, r3, r8, r2
				(((gc_lookup_ppm[_radio.sca] +
    786c:	f895 2728 	ldrb.w	r2, [r5, #1832]	; 0x728
    7870:	f831 8012 	ldrh.w	r8, [r1, r2, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    7874:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
    7878:	f3c2 0282 	ubfx	r2, r2, #2, #3
    787c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    7880:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
				(((gc_lookup_ppm[_radio.sca] +
    7884:	4490      	add	r8, r2
				conn->llcp.conn_upd.win_size * 1250;
    7886:	fb09 f101 	mul.w	r1, r9, r1
				   gc_lookup_ppm[conn->slave.sca]) *
    788a:	fb07 f808 	mul.w	r8, r7, r8
			conn->slave.window_size_prepare_us =
    788e:	6661      	str	r1, [r4, #100]	; 0x64
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7890:	f508 2874 	add.w	r8, r8, #999424	; 0xf4000
			conn->slave.ticks_to_offset = 0;
    7894:	2100      	movs	r1, #0
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    7896:	4a8f      	ldr	r2, [pc, #572]	; (7ad4 <event_connection_prepare+0x9d4>)
			conn->slave.ticks_to_offset = 0;
    7898:	6721      	str	r1, [r4, #112]	; 0x70
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    789a:	f208 283f 	addw	r8, r8, #575	; 0x23f
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    789e:	498e      	ldr	r1, [pc, #568]	; (7ad8 <event_connection_prepare+0x9d8>)
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    78a0:	fbb8 f8f2 	udiv	r8, r8, r2
				(conn_interval_us >> 1) - RADIO_TIFS;
    78a4:	087a      	lsrs	r2, r7, #1
				conn->slave.window_widening_periodic_us *
    78a6:	fb08 f00a 	mul.w	r0, r8, sl
				(conn_interval_us >> 1) - RADIO_TIFS;
    78aa:	3a96      	subs	r2, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    78ac:	4403      	add	r3, r0
			conn->slave.window_widening_periodic_us =
    78ae:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
			conn->slave.window_widening_max_us =
    78b2:	65a2      	str	r2, [r4, #88]	; 0x58
			conn->slave.window_widening_prepare_us +=
    78b4:	4293      	cmp	r3, r2
    78b6:	bf94      	ite	ls
    78b8:	65e3      	strls	r3, [r4, #92]	; 0x5c
    78ba:	65e2      	strhi	r2, [r4, #92]	; 0x5c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    78bc:	fba0 0101 	umull	r0, r1, r0, r1
    78c0:	a37f      	add	r3, pc, #508	; (adr r3, 7ac0 <event_connection_prepare+0x9c0>)
    78c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    78c6:	f7f8 fccf 	bl	268 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    78ca:	4983      	ldr	r1, [pc, #524]	; (7ad8 <event_connection_prepare+0x9d8>)
    78cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    78ce:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    78d0:	fbb3 f0f9 	udiv	r0, r3, r9
    78d4:	fb09 f000 	mul.w	r0, r9, r0
    78d8:	a379      	add	r3, pc, #484	; (adr r3, 7ac0 <event_connection_prepare+0x9c0>)
    78da:	e9d3 2300 	ldrd	r2, r3, [r3]
    78de:	fba0 0101 	umull	r0, r1, r0, r1
    78e2:	f7f8 fcc1 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    78e6:	eba7 0808 	sub.w	r8, r7, r8
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    78ea:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    78ee:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
		conn->latency = conn->llcp.conn_upd.latency;
    78f2:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    78f6:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    78f8:	f242 7110 	movw	r1, #10000	; 0x2710
    78fc:	fb01 7303 	mla	r3, r1, r3, r7
    7900:	3b01      	subs	r3, #1
    7902:	fbb3 f3f7 	udiv	r3, r3, r7
    7906:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    7908:	4b74      	ldr	r3, [pc, #464]	; (7adc <event_connection_prepare+0x9dc>)
		conn->conn_interval = conn->llcp.conn_upd.interval;
    790a:	f8a4 b024 	strh.w	fp, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    790e:	443b      	add	r3, r7
    7910:	fbb3 f3f7 	udiv	r3, r3, r7
    7914:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    7918:	4b71      	ldr	r3, [pc, #452]	; (7ae0 <event_connection_prepare+0x9e0>)
    791a:	443b      	add	r3, r7
    791c:	fbb3 f7f7 	udiv	r7, r3, r7
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    7920:	1d93      	adds	r3, r2, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    7922:	b2b9      	uxth	r1, r7
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    7924:	4299      	cmp	r1, r3
    7926:	bfc4      	itt	gt
    7928:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    792c:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    792e:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    7932:	bfc8      	it	gt
    7934:	18c9      	addgt	r1, r1, r3
		if (!conn->llcp.conn_upd.is_internal) {
    7936:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    793a:	bfc8      	it	gt
    793c:	b289      	uxthgt	r1, r1
		if (!conn->llcp.conn_upd.is_internal) {
    793e:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    7942:	bf08      	it	eq
    7944:	f8a4 3040 	strheq.w	r3, [r4, #64]	; 0x40
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    7948:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
		mayfly_was_enabled =
    794c:	2000      	movs	r0, #0
    794e:	2101      	movs	r1, #1
    7950:	f007 fa8e 	bl	ee70 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7954:	2200      	movs	r2, #0
    7956:	2101      	movs	r1, #1
		mayfly_was_enabled =
    7958:	4682      	mov	sl, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    795a:	4610      	mov	r0, r2
    795c:	f7fa fa9a 	bl	1e94 <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7960:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    7964:	f641 63d3 	movw	r3, #7891	; 0x1ed3
    7968:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    796a:	3207      	adds	r2, #7
		ticker_status =
    796c:	9300      	str	r3, [sp, #0]
    796e:	b2d2      	uxtb	r2, r2
    7970:	4b5c      	ldr	r3, [pc, #368]	; (7ae4 <event_connection_prepare+0x9e4>)
    7972:	4608      	mov	r0, r1
    7974:	f7fb f906 	bl	2b84 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7978:	f030 0302 	bics.w	r3, r0, #2
    797c:	d004      	beq.n	7988 <event_connection_prepare+0x888>
    797e:	f641 61d5 	movw	r1, #7893	; 0x1ed5
    7982:	4851      	ldr	r0, [pc, #324]	; (7ac8 <event_connection_prepare+0x9c8>)
    7984:	f7f8 ff94 	bl	8b0 <bt_ctlr_assert_handle>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    7988:	4b53      	ldr	r3, [pc, #332]	; (7ad8 <event_connection_prepare+0x9d8>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    798a:	f894 7020 	ldrb.w	r7, [r4, #32]
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    798e:	fba8 8903 	umull	r8, r9, r8, r3
    7992:	4640      	mov	r0, r8
    7994:	a34a      	add	r3, pc, #296	; (adr r3, 7ac0 <event_connection_prepare+0x9c0>)
    7996:	e9d3 2300 	ldrd	r2, r3, [r3]
    799a:	4649      	mov	r1, r9
    799c:	f7f8 fc64 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    79a0:	4a51      	ldr	r2, [pc, #324]	; (7ae8 <event_connection_prepare+0x9e8>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79a2:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    79a6:	2307      	movs	r3, #7
    79a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    79ac:	2100      	movs	r1, #0
    79ae:	4343      	muls	r3, r0
    79b0:	fb02 3301 	mla	r3, r2, r1, r3
    79b4:	fba0 0102 	umull	r0, r1, r0, r2
    79b8:	ebb8 0000 	subs.w	r0, r8, r0
    79bc:	4419      	add	r1, r3
    79be:	eb69 0101 	sbc.w	r1, r9, r1
    79c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    79c6:	2300      	movs	r3, #0
    79c8:	f7f8 fc4e 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79cc:	68e3      	ldr	r3, [r4, #12]
    79ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    79d0:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    79d4:	4945      	ldr	r1, [pc, #276]	; (7aec <event_connection_prepare+0x9ec>)
		ticker_status =
    79d6:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79d8:	441a      	add	r2, r3
    79da:	4613      	mov	r3, r2
    79dc:	4a44      	ldr	r2, [pc, #272]	; (7af0 <event_connection_prepare+0x9f0>)
		ticker_status =
    79de:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79e0:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    79e4:	bf38      	it	cc
    79e6:	460a      	movcc	r2, r1
		ticker_status =
    79e8:	f641 61e3 	movw	r1, #7907	; 0x1ee3
    79ec:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79ee:	3707      	adds	r7, #7
		ticker_status =
    79f0:	493c      	ldr	r1, [pc, #240]	; (7ae4 <event_connection_prepare+0x9e4>)
    79f2:	9107      	str	r1, [sp, #28]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    79f4:	b2ff      	uxtb	r7, r7
		ticker_status =
    79f6:	2100      	movs	r1, #0
    79f8:	9205      	str	r2, [sp, #20]
    79fa:	4633      	mov	r3, r6
    79fc:	9406      	str	r4, [sp, #24]
    79fe:	9103      	str	r1, [sp, #12]
    7a00:	e88d 0820 	stmia.w	sp, {r5, fp}
    7a04:	463a      	mov	r2, r7
    7a06:	4608      	mov	r0, r1
    7a08:	f7fb f81e 	bl	2a48 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7a0c:	f030 0302 	bics.w	r3, r0, #2
    7a10:	d004      	beq.n	7a1c <event_connection_prepare+0x91c>
    7a12:	f641 61e5 	movw	r1, #7909	; 0x1ee5
    7a16:	482c      	ldr	r0, [pc, #176]	; (7ac8 <event_connection_prepare+0x9c8>)
    7a18:	f7f8 ff4a 	bl	8b0 <bt_ctlr_assert_handle>
		if (mayfly_was_enabled) {
    7a1c:	f1ba 0f00 	cmp.w	sl, #0
    7a20:	f000 8357 	beq.w	80d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd2>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7a24:	2201      	movs	r2, #1
    7a26:	4611      	mov	r1, r2
    7a28:	2000      	movs	r0, #0
}
    7a2a:	b00f      	add	sp, #60	; 0x3c
    7a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    7a30:	f7fa ba30 	b.w	1e94 <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    7a34:	fb0b 3212 	mls	r2, fp, r2, r3
    7a38:	b292      	uxth	r2, r2
    7a3a:	fba2 0101 	umull	r0, r1, r2, r1
    7a3e:	f240 1323 	movw	r3, #291	; 0x123
    7a42:	fb03 1102 	mla	r1, r3, r2, r1
    7a46:	a31e      	add	r3, pc, #120	; (adr r3, 7ac0 <event_connection_prepare+0x9c0>)
    7a48:	e9d3 2300 	ldrd	r2, r3, [r3]
    7a4c:	f7f8 fc0c 	bl	268 <__aeabi_uldivmod>
    7a50:	eba9 0600 	sub.w	r6, r9, r0
    7a54:	e6ef      	b.n	7836 <event_connection_prepare+0x736>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    7a56:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7a58:	4608      	mov	r0, r1
    7a5a:	491f      	ldr	r1, [pc, #124]	; (7ad8 <event_connection_prepare+0x9d8>)
    7a5c:	a318      	add	r3, pc, #96	; (adr r3, 7ac0 <event_connection_prepare+0x9c0>)
    7a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7a62:	fba0 0101 	umull	r0, r1, r0, r1
    7a66:	f7f8 fbff 	bl	268 <__aeabi_uldivmod>
    7a6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    7a6e:	1c45      	adds	r5, r0, #1
		periodic_us = conn_interval_us;
    7a70:	46b8      	mov	r8, r7
    7a72:	e73c      	b.n	78ee <event_connection_prepare+0x7ee>
	if (conn->llcp.chan_map.initiate) {
    7a74:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d03d      	beq.n	7af8 <event_connection_prepare+0x9f8>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7a7c:	481d      	ldr	r0, [pc, #116]	; (7af4 <event_connection_prepare+0x9f4>)
    7a7e:	f7fa f966 	bl	1d4e <mem_acquire>
		if (node_tx) {
    7a82:	4606      	mov	r6, r0
    7a84:	2800      	cmp	r0, #0
    7a86:	f43f adfa 	beq.w	767e <event_connection_prepare+0x57e>
			conn->llcp.chan_map.initiate = 0;
    7a8a:	2300      	movs	r3, #0
    7a8c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
    7a90:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7a92:	3306      	adds	r3, #6
    7a94:	443b      	add	r3, r7
			conn->llcp.chan_map.instant =
    7a96:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7a9a:	7903      	ldrb	r3, [r0, #4]
    7a9c:	f043 0303 	orr.w	r3, r3, #3
    7aa0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7aa2:	2308      	movs	r3, #8
    7aa4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7aa6:	2301      	movs	r3, #1
    7aa8:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    7aaa:	2205      	movs	r2, #5
    7aac:	f104 0179 	add.w	r1, r4, #121	; 0x79
    7ab0:	3008      	adds	r0, #8
    7ab2:	f7f8 fda1 	bl	5f8 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    7ab6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    7aba:	f8a6 300d 	strh.w	r3, [r6, #13]
    7abe:	e5da      	b.n	7676 <event_connection_prepare+0x576>
    7ac0:	1afd498d 	.word	0x1afd498d
    7ac4:	00000007 	.word	0x00000007
    7ac8:	000109b4 	.word	0x000109b4
    7acc:	09ce5400 	.word	0x09ce5400
    7ad0:	000109a4 	.word	0x000109a4
    7ad4:	000f4240 	.word	0x000f4240
    7ad8:	3b9aca00 	.word	0x3b9aca00
    7adc:	026259ff 	.word	0x026259ff
    7ae0:	01c9c37f 	.word	0x01c9c37f
    7ae4:	00006151 	.word	0x00006151
    7ae8:	1afd498d 	.word	0x1afd498d
    7aec:	0000828d 	.word	0x0000828d
    7af0:	00008291 	.word	0x00008291
    7af4:	20000aa4 	.word	0x20000aa4
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    7af8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    7afc:	1afb      	subs	r3, r7, r3
    7afe:	041e      	lsls	r6, r3, #16
    7b00:	f53f adbd 	bmi.w	767e <event_connection_prepare+0x57e>
		conn->llcp_ack = conn->llcp_req;
    7b04:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    7b08:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
    7b0c:	f104 0617 	add.w	r6, r4, #23
    7b10:	2205      	movs	r2, #5
    7b12:	f104 0179 	add.w	r1, r4, #121	; 0x79
    7b16:	4630      	mov	r0, r6
    7b18:	f7f8 fd6e 	bl	5f8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7b1c:	2105      	movs	r1, #5
    7b1e:	4630      	mov	r0, r6
    7b20:	f7fa fac0 	bl	20a4 <util_ones_count_get>
		conn->data_chan_count =
    7b24:	7f63      	ldrb	r3, [r4, #29]
    7b26:	f360 0305 	bfi	r3, r0, #0, #6
    7b2a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    7b2c:	2301      	movs	r3, #1
    7b2e:	7723      	strb	r3, [r4, #28]
    7b30:	e5a5      	b.n	767e <event_connection_prepare+0x57e>
	if (conn->llcp.encryption.initiate) {
    7b32:	f894 8078 	ldrb.w	r8, [r4, #120]	; 0x78
    7b36:	f1b8 0f00 	cmp.w	r8, #0
    7b3a:	f47f ada0 	bne.w	767e <event_connection_prepare+0x57e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7b3e:	48d8      	ldr	r0, [pc, #864]	; (7ea0 <event_connection_prepare+0xda0>)
    7b40:	f7fa f905 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    7b44:	4606      	mov	r6, r0
    7b46:	2800      	cmp	r0, #0
    7b48:	f43f ad99 	beq.w	767e <event_connection_prepare+0x57e>
	if (!conn->role) {
    7b4c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7b50:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)node_tx->pdu_data;
    7b52:	f100 0a04 	add.w	sl, r0, #4
	if (!conn->role) {
    7b56:	db4d      	blt.n	7bf4 <event_connection_prepare+0xaf4>
		ecb_encrypt(&conn->llcp.encryption.ltk[0],
    7b58:	f104 0bf9 	add.w	fp, r4, #249	; 0xf9
    7b5c:	465b      	mov	r3, fp
    7b5e:	4642      	mov	r2, r8
    7b60:	f104 0194 	add.w	r1, r4, #148	; 0x94
    7b64:	f104 0084 	add.w	r0, r4, #132	; 0x84
    7b68:	f006 fc22 	bl	e3b0 <ecb_encrypt>
		memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    7b6c:	2210      	movs	r2, #16
    7b6e:	4659      	mov	r1, fp
    7b70:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    7b74:	f7f8 fd40 	bl	5f8 <memcpy>
		memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    7b78:	f504 7189 	add.w	r1, r4, #274	; 0x112
    7b7c:	2208      	movs	r2, #8
    7b7e:	f204 1033 	addw	r0, r4, #307	; 0x133
    7b82:	f7f8 fd39 	bl	5f8 <memcpy>
		conn->ccm_rx.direction = 0;
    7b86:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->ccm_rx.counter = 0;
    7b8a:	f884 8109 	strb.w	r8, [r4, #265]	; 0x109
		conn->ccm_rx.direction = 0;
    7b8e:	f368 0300 	bfi	r3, r8, #0, #1
    7b92:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->ccm_tx.direction = 1;
    7b96:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
		conn->ccm_rx.counter = 0;
    7b9a:	f884 810a 	strb.w	r8, [r4, #266]	; 0x10a
		conn->ccm_tx.direction = 1;
    7b9e:	f043 0301 	orr.w	r3, r3, #1
    7ba2:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		conn->enc_rx = 1;
    7ba6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->ccm_rx.counter = 0;
    7baa:	f884 810b 	strb.w	r8, [r4, #267]	; 0x10b
		conn->enc_rx = 1;
    7bae:	f043 0310 	orr.w	r3, r3, #16
		conn->ccm_rx.counter = 0;
    7bb2:	f884 810c 	strb.w	r8, [r4, #268]	; 0x10c
    7bb6:	f884 810d 	strb.w	r8, [r4, #269]	; 0x10d
    7bba:	f884 810e 	strb.w	r8, [r4, #270]	; 0x10e
    7bbe:	f884 810f 	strb.w	r8, [r4, #271]	; 0x10f
    7bc2:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
		conn->ccm_tx.counter = 0;
    7bc6:	f8a4 812a 	strh.w	r8, [r4, #298]	; 0x12a
    7bca:	f8a4 812c 	strh.w	r8, [r4, #300]	; 0x12c
    7bce:	f8a4 812e 	strh.w	r8, [r4, #302]	; 0x12e
    7bd2:	f8a4 8130 	strh.w	r8, [r4, #304]	; 0x130
		conn->enc_rx = 1;
    7bd6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    7bda:	4651      	mov	r1, sl
    7bdc:	4620      	mov	r0, r4
    7bde:	f7ff fa4d 	bl	707c <start_enc_rsp_send>
	ctrl_tx_enqueue(conn, node_tx);
    7be2:	4631      	mov	r1, r6
    7be4:	4620      	mov	r0, r4
    7be6:	f7ff f9bb 	bl	6f60 <ctrl_tx_enqueue>
	conn->llcp_ack = conn->llcp_req;
    7bea:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    7bee:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    7bf2:	e544      	b.n	767e <event_connection_prepare+0x57e>
	else if (!conn->pause_tx || conn->refresh) {
    7bf4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    7bf8:	f003 0348 	and.w	r3, r3, #72	; 0x48
    7bfc:	2b08      	cmp	r3, #8
    7bfe:	f000 80a2 	beq.w	7d46 <event_connection_prepare+0xc46>
		if (conn->llcp.encryption.error_code) {
    7c02:	f894 8079 	ldrb.w	r8, [r4, #121]	; 0x79
    7c06:	f1b8 0f00 	cmp.w	r8, #0
    7c0a:	d020      	beq.n	7c4e <event_connection_prepare+0xb4e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    7c0c:	7903      	ldrb	r3, [r0, #4]
    7c0e:	f043 0303 	orr.w	r3, r3, #3
    7c12:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    7c14:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    7c18:	0698      	lsls	r0, r3, #26
    7c1a:	d512      	bpl.n	7c42 <event_connection_prepare+0xb42>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
    7c1c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
    7c20:	0759      	lsls	r1, r3, #29
    7c22:	d50e      	bpl.n	7c42 <event_connection_prepare+0xb42>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    7c24:	2311      	movs	r3, #17
    7c26:	71f3      	strb	r3, [r6, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    7c28:	2303      	movs	r3, #3
    7c2a:	7233      	strb	r3, [r6, #8]
		p->error_code = conn->llcp.encryption.error_code;
    7c2c:	f886 8009 	strb.w	r8, [r6, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
    7c30:	2302      	movs	r3, #2
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    7c32:	7173      	strb	r3, [r6, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    7c34:	7973      	ldrb	r3, [r6, #5]
    7c36:	3301      	adds	r3, #1
    7c38:	7173      	strb	r3, [r6, #5]
	conn->llcp.encryption.error_code = 0;
    7c3a:	2300      	movs	r3, #0
    7c3c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    7c40:	e7cf      	b.n	7be2 <event_connection_prepare+0xae2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    7c42:	230d      	movs	r3, #13
    7c44:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    7c46:	f886 8008 	strb.w	r8, [r6, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
    7c4a:	2301      	movs	r3, #1
    7c4c:	e7f1      	b.n	7c32 <event_connection_prepare+0xb32>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7c4e:	4894      	ldr	r0, [pc, #592]	; (7ea0 <event_connection_prepare+0xda0>)
    7c50:	f7fa f87d 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    7c54:	4682      	mov	sl, r0
    7c56:	2800      	cmp	r0, #0
    7c58:	f000 830a 	beq.w	8270 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x270>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7c5c:	7903      	ldrb	r3, [r0, #4]
    7c5e:	f043 0303 	orr.w	r3, r3, #3
    7c62:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    7c64:	f04f 0b04 	mov.w	fp, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    7c68:	230d      	movs	r3, #13
    7c6a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    7c6c:	f880 b007 	strb.w	fp, [r0, #7]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.skds,
    7c70:	f100 0308 	add.w	r3, r0, #8
    7c74:	4619      	mov	r1, r3
    7c76:	2208      	movs	r2, #8
    7c78:	6868      	ldr	r0, [r5, #4]
    7c7a:	930d      	str	r3, [sp, #52]	; 0x34
    7c7c:	f7f9 fed6 	bl	1a2c <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_rsp.ivs,
    7c80:	f10a 0310 	add.w	r3, sl, #16
    7c84:	4619      	mov	r1, r3
    7c86:	465a      	mov	r2, fp
    7c88:	6868      	ldr	r0, [r5, #4]
    7c8a:	930b      	str	r3, [sp, #44]	; 0x2c
    7c8c:	f7f9 fece 	bl	1a2c <entropy_get_entropy_isr>
	memcpy(&conn->llcp.encryption.skd[8],
    7c90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c92:	2208      	movs	r2, #8
    7c94:	4619      	mov	r1, r3
    7c96:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    7c9a:	f7f8 fcad 	bl	5f8 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
    7c9e:	465a      	mov	r2, fp
    7ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    7ca2:	f504 708b 	add.w	r0, r4, #278	; 0x116
    7ca6:	f7f8 fca7 	bl	5f8 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
    7caa:	4651      	mov	r1, sl
    7cac:	4620      	mov	r0, r4
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    7cae:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
	ctrl_tx_enqueue(conn, node_tx);
    7cb2:	f7ff f955 	bl	6f60 <ctrl_tx_enqueue>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    7cb6:	4653      	mov	r3, sl
    7cb8:	4642      	mov	r2, r8
    7cba:	f104 0194 	add.w	r1, r4, #148	; 0x94
    7cbe:	f104 0084 	add.w	r0, r4, #132	; 0x84
    7cc2:	f006 fb75 	bl	e3b0 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0],
    7cc6:	2210      	movs	r2, #16
    7cc8:	4651      	mov	r1, sl
    7cca:	f504 708d 	add.w	r0, r4, #282	; 0x11a
    7cce:	f7f8 fc93 	bl	5f8 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    7cd2:	2208      	movs	r2, #8
    7cd4:	f504 7189 	add.w	r1, r4, #274	; 0x112
    7cd8:	f204 1033 	addw	r0, r4, #307	; 0x133
    7cdc:	f7f8 fc8c 	bl	5f8 <memcpy>
			conn->ccm_rx.direction = 1;
    7ce0:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
			conn->ccm_rx.counter = 0;
    7ce4:	f884 8109 	strb.w	r8, [r4, #265]	; 0x109
			conn->ccm_rx.direction = 1;
    7ce8:	f043 0301 	orr.w	r3, r3, #1
    7cec:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 0;
    7cf0:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->ccm_rx.counter = 0;
    7cf4:	f884 810a 	strb.w	r8, [r4, #266]	; 0x10a
			conn->ccm_tx.direction = 0;
    7cf8:	f368 0300 	bfi	r3, r8, #0, #1
    7cfc:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
    7d00:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->ccm_rx.counter = 0;
    7d04:	f884 810b 	strb.w	r8, [r4, #267]	; 0x10b
			conn->enc_rx = 1;
    7d08:	f043 0310 	orr.w	r3, r3, #16
    7d0c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d10:	7933      	ldrb	r3, [r6, #4]
			conn->ccm_rx.counter = 0;
    7d12:	f884 810c 	strb.w	r8, [r4, #268]	; 0x10c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d16:	f043 0303 	orr.w	r3, r3, #3
			conn->ccm_rx.counter = 0;
    7d1a:	f884 810d 	strb.w	r8, [r4, #269]	; 0x10d
    7d1e:	f884 810e 	strb.w	r8, [r4, #270]	; 0x10e
    7d22:	f884 810f 	strb.w	r8, [r4, #271]	; 0x10f
    7d26:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
    7d2a:	f8a4 812a 	strh.w	r8, [r4, #298]	; 0x12a
    7d2e:	f8a4 812c 	strh.w	r8, [r4, #300]	; 0x12c
    7d32:	f8a4 812e 	strh.w	r8, [r4, #302]	; 0x12e
    7d36:	f8a4 8130 	strh.w	r8, [r4, #304]	; 0x130
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d3a:	7133      	strb	r3, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    7d3c:	2301      	movs	r3, #1
    7d3e:	7173      	strb	r3, [r6, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7d40:	2305      	movs	r3, #5
    7d42:	71f3      	strb	r3, [r6, #7]
    7d44:	e74d      	b.n	7be2 <event_connection_prepare+0xae2>
		start_enc_rsp_send(_radio.conn_curr, pdu_ctrl_tx);
    7d46:	4651      	mov	r1, sl
    7d48:	f8d5 071c 	ldr.w	r0, [r5, #1820]	; 0x71c
    7d4c:	f7ff f996 	bl	707c <start_enc_rsp_send>
		_radio.conn_curr->pause_rx = 0;
    7d50:	f8d5 271c 	ldr.w	r2, [r5, #1820]	; 0x71c
    7d54:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    7d58:	f368 0382 	bfi	r3, r8, #2, #1
		_radio.conn_curr->pause_tx = 0;
    7d5c:	f368 03c3 	bfi	r3, r8, #3, #1
    7d60:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    7d64:	e73d      	b.n	7be2 <event_connection_prepare+0xae2>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7d66:	484e      	ldr	r0, [pc, #312]	; (7ea0 <event_connection_prepare+0xda0>)
    7d68:	f7f9 fff1 	bl	1d4e <mem_acquire>
	if (node_tx) {
    7d6c:	4606      	mov	r6, r0
    7d6e:	2800      	cmp	r0, #0
    7d70:	f43f ac85 	beq.w	767e <event_connection_prepare+0x57e>
		conn->llcp_ack = conn->llcp_req;
    7d74:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    7d78:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
    7d7c:	4b49      	ldr	r3, [pc, #292]	; (7ea4 <event_connection_prepare+0xda4>)
    7d7e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7d82:	7903      	ldrb	r3, [r0, #4]
    7d84:	f043 0303 	orr.w	r3, r3, #3
    7d88:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7d8a:	2309      	movs	r3, #9
    7d8c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    7d8e:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7d92:	2b00      	cmp	r3, #0
    7d94:	bfac      	ite	ge
    7d96:	2308      	movge	r3, #8
    7d98:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7d9a:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    7d9c:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    7d9e:	2100      	movs	r1, #0
    7da0:	4410      	add	r0, r2
    7da2:	f7f8 fc55 	bl	650 <memset>
			conn->llcp_features & 0xFF;
    7da6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    7daa:	7233      	strb	r3, [r6, #8]
			(conn->llcp_features >> 8) & 0xFF;
    7dac:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    7dae:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    7db0:	7272      	strb	r2, [r6, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    7db2:	72b3      	strb	r3, [r6, #10]
		ctrl_tx_enqueue(conn, node_tx);
    7db4:	4631      	mov	r1, r6
		ctrl_tx_enqueue(conn, node_tx);
    7db6:	4620      	mov	r0, r4
    7db8:	f7ff f8d2 	bl	6f60 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    7dbc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7dc0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    7dc4:	e45b      	b.n	767e <event_connection_prepare+0x57e>
	if (conn->llcp_version.tx == 0) {
    7dc6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    7dca:	07da      	lsls	r2, r3, #31
    7dcc:	d424      	bmi.n	7e18 <event_connection_prepare+0xd18>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7dce:	4834      	ldr	r0, [pc, #208]	; (7ea0 <event_connection_prepare+0xda0>)
    7dd0:	f7f9 ffbd 	bl	1d4e <mem_acquire>
		if (node_tx) {
    7dd4:	4601      	mov	r1, r0
    7dd6:	2800      	cmp	r0, #0
    7dd8:	f43f ac51 	beq.w	767e <event_connection_prepare+0x57e>
			conn->llcp_ack = conn->llcp_req;
    7ddc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    7de0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
    7de4:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    7de8:	f043 0301 	orr.w	r3, r3, #1
    7dec:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7df0:	7903      	ldrb	r3, [r0, #4]
    7df2:	f043 0303 	orr.w	r3, r3, #3
    7df6:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    7df8:	2306      	movs	r3, #6
    7dfa:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7dfc:	230c      	movs	r3, #12
    7dfe:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    7e00:	2309      	movs	r3, #9
    7e02:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    7e04:	f06f 030e 	mvn.w	r3, #14
    7e08:	7243      	strb	r3, [r0, #9]
    7e0a:	2305      	movs	r3, #5
    7e0c:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    7e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e12:	72c3      	strb	r3, [r0, #11]
    7e14:	7303      	strb	r3, [r0, #12]
    7e16:	e7ce      	b.n	7db6 <event_connection_prepare+0xcb6>
	} else if (conn->llcp_version.rx != 0) {
    7e18:	079b      	lsls	r3, r3, #30
    7e1a:	d527      	bpl.n	7e6c <event_connection_prepare+0xd6c>
		conn->llcp_ack = conn->llcp_req;
    7e1c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    7e20:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		node_rx = packet_rx_reserve_get(2);
    7e24:	2002      	movs	r0, #2
    7e26:	f7fc fe87 	bl	4b38 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7e2a:	4606      	mov	r6, r0
    7e2c:	b920      	cbnz	r0, 7e38 <event_connection_prepare+0xd38>
    7e2e:	f242 0128 	movw	r1, #8232	; 0x2028
    7e32:	481d      	ldr	r0, [pc, #116]	; (7ea8 <event_connection_prepare+0xda8>)
    7e34:	f7f8 fd3c 	bl	8b0 <bt_ctlr_assert_handle>
		node_rx->hdr.handle = conn->handle;
    7e38:	8c23      	ldrh	r3, [r4, #32]
    7e3a:	80f3      	strh	r3, [r6, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7e3c:	2301      	movs	r3, #1
    7e3e:	7133      	strb	r3, [r6, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    7e40:	7a33      	ldrb	r3, [r6, #8]
    7e42:	f043 0303 	orr.w	r3, r3, #3
    7e46:	7233      	strb	r3, [r6, #8]
		pdu_ctrl_rx->len =
    7e48:	2306      	movs	r3, #6
    7e4a:	7273      	strb	r3, [r6, #9]
		pdu_ctrl_rx->llctrl.opcode =
    7e4c:	230c      	movs	r3, #12
    7e4e:	72f3      	strb	r3, [r6, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    7e50:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
    7e54:	7333      	strb	r3, [r6, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    7e56:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    7e5a:	f8a6 300d 	strh.w	r3, [r6, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    7e5e:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    7e62:	f8a6 300f 	strh.w	r3, [r6, #15]
		packet_rx_enqueue();
    7e66:	f7fe f843 	bl	5ef0 <packet_rx_enqueue>
    7e6a:	e408      	b.n	767e <event_connection_prepare+0x57e>
		LL_ASSERT(0);
    7e6c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
			LL_ASSERT(0);
    7e70:	480d      	ldr	r0, [pc, #52]	; (7ea8 <event_connection_prepare+0xda8>)
    7e72:	f7f8 fd1d 	bl	8b0 <bt_ctlr_assert_handle>
			break;
    7e76:	e402      	b.n	767e <event_connection_prepare+0x57e>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7e78:	4809      	ldr	r0, [pc, #36]	; (7ea0 <event_connection_prepare+0xda0>)
    7e7a:	f7f9 ff68 	bl	1d4e <mem_acquire>
	if (node_tx) {
    7e7e:	4601      	mov	r1, r0
    7e80:	2800      	cmp	r0, #0
    7e82:	f43f abfc 	beq.w	767e <event_connection_prepare+0x57e>
		conn->llcp_ack = conn->llcp_req;
    7e86:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    7e8a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7e8e:	7903      	ldrb	r3, [r0, #4]
    7e90:	f043 0303 	orr.w	r3, r3, #3
    7e94:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    7e96:	2301      	movs	r3, #1
    7e98:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    7e9a:	2312      	movs	r3, #18
    7e9c:	71c3      	strb	r3, [r0, #7]
    7e9e:	e78a      	b.n	7db6 <event_connection_prepare+0xcb6>
    7ea0:	20000aa4 	.word	0x20000aa4
    7ea4:	000149ff 	.word	0x000149ff
    7ea8:	000109b4 	.word	0x000109b4
	if (conn->llcp.phy_upd_ind.initiate) {
    7eac:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
    7eb0:	07d6      	lsls	r6, r2, #31
    7eb2:	d558      	bpl.n	7f66 <event_connection_prepare+0xe66>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7eb4:	48be      	ldr	r0, [pc, #760]	; (81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>)
    7eb6:	f7f9 ff4a 	bl	1d4e <mem_acquire>
		if (node_tx) {
    7eba:	4606      	mov	r6, r0
    7ebc:	2800      	cmp	r0, #0
    7ebe:	f43f abde 	beq.w	767e <event_connection_prepare+0x57e>
			conn->llcp.phy_upd_ind.initiate = 0;
    7ec2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    7ec6:	f36f 0300 	bfc	r3, #0, #1
    7eca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
    7ece:	b2db      	uxtb	r3, r3
    7ed0:	f3c3 0282 	ubfx	r2, r3, #2, #3
    7ed4:	ea52 1253 	orrs.w	r2, r2, r3, lsr #5
    7ed8:	d13f      	bne.n	7f5a <event_connection_prepare+0xe5a>
				conn->llcp_ack = conn->llcp_req;
    7eda:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    7ede:	f884 1075 	strb.w	r1, [r4, #117]	; 0x75
				if (conn->llcp.phy_upd_ind.cmd) {
    7ee2:	0798      	lsls	r0, r3, #30
				conn->llcp.phy_upd_ind.instant = 0;
    7ee4:	f8a4 207a 	strh.w	r2, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
    7ee8:	d520      	bpl.n	7f2c <event_connection_prepare+0xe2c>
					node_rx = packet_rx_reserve_get(2);
    7eea:	2002      	movs	r0, #2
    7eec:	f7fc fe24 	bl	4b38 <packet_rx_reserve_get>
					LL_ASSERT(node_rx);
    7ef0:	4680      	mov	r8, r0
    7ef2:	b920      	cbnz	r0, 7efe <event_connection_prepare+0xdfe>
    7ef4:	f242 21d2 	movw	r1, #8914	; 0x22d2
    7ef8:	48ae      	ldr	r0, [pc, #696]	; (81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>)
    7efa:	f7f8 fcd9 	bl	8b0 <bt_ctlr_assert_handle>
					node_rx->hdr.handle = conn->handle;
    7efe:	8c23      	ldrh	r3, [r4, #32]
    7f00:	f8a8 3006 	strh.w	r3, [r8, #6]
					node_rx->hdr.type =
    7f04:	230c      	movs	r3, #12
    7f06:	f888 3004 	strb.w	r3, [r8, #4]
					upd->status = 0;
    7f0a:	2300      	movs	r3, #0
    7f0c:	f888 300b 	strb.w	r3, [r8, #11]
					upd->tx = conn->phy_tx;
    7f10:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7f14:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    7f18:	f888 300c 	strb.w	r3, [r8, #12]
					upd->rx = conn->phy_rx;
    7f1c:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    7f20:	f3c3 0302 	ubfx	r3, r3, #0, #3
    7f24:	f888 300d 	strb.w	r3, [r8, #13]
					packet_rx_enqueue();
    7f28:	f7fd ffe2 	bl	5ef0 <packet_rx_enqueue>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7f2c:	7933      	ldrb	r3, [r6, #4]
    7f2e:	f043 0303 	orr.w	r3, r3, #3
    7f32:	7133      	strb	r3, [r6, #4]
			pdu_ctrl_tx->len =
    7f34:	2305      	movs	r3, #5
    7f36:	7173      	strb	r3, [r6, #5]
			pdu_ctrl_tx->llctrl.opcode =
    7f38:	2318      	movs	r3, #24
    7f3a:	71f3      	strb	r3, [r6, #7]
			ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    7f3c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    7f40:	f3c3 0382 	ubfx	r3, r3, #2, #3
    7f44:	7233      	strb	r3, [r6, #8]
			ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    7f46:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    7f4a:	f3c3 1342 	ubfx	r3, r3, #5, #3
    7f4e:	7273      	strb	r3, [r6, #9]
			ind->instant = conn->llcp.phy_upd_ind.instant;
    7f50:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    7f54:	8173      	strh	r3, [r6, #10]
    7f56:	f7ff bb8e 	b.w	7676 <event_connection_prepare+0x576>
								 conn->latency +
    7f5a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7f5c:	3306      	adds	r3, #6
    7f5e:	443b      	add	r3, r7
				conn->llcp.phy_upd_ind.instant = event_counter +
    7f60:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
    7f64:	e7e2      	b.n	7f2c <event_connection_prepare+0xe2c>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
    7f66:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    7f6a:	1afb      	subs	r3, r7, r3
    7f6c:	0419      	lsls	r1, r3, #16
    7f6e:	f53f ab86 	bmi.w	767e <event_connection_prepare+0x57e>
		conn->llcp_ack = conn->llcp_req;
    7f72:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
    7f76:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (conn->llcp.phy_upd_ind.tx) {
    7f7a:	f012 0f1c 	tst.w	r2, #28
		old_tx = conn->phy_tx;
    7f7e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		old_rx = conn->phy_rx;
    7f82:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    7f86:	bf18      	it	ne
    7f88:	f3c2 0682 	ubfxne	r6, r2, #2, #3
		old_tx = conn->phy_tx;
    7f8c:	f3c3 00c2 	ubfx	r0, r3, #3, #3
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
    7f90:	bf1c      	itt	ne
    7f92:	f366 03c5 	bfine	r3, r6, #3, #3
    7f96:	f884 3038 	strbne.w	r3, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
    7f9a:	f012 0fe0 	tst.w	r2, #224	; 0xe0
		old_rx = conn->phy_rx;
    7f9e:	f001 0107 	and.w	r1, r1, #7
		if (conn->llcp.phy_upd_ind.rx) {
    7fa2:	d008      	beq.n	7fb6 <event_connection_prepare+0xeb6>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
    7fa4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    7fa8:	f894 603a 	ldrb.w	r6, [r4, #58]	; 0x3a
    7fac:	095b      	lsrs	r3, r3, #5
    7fae:	f363 0602 	bfi	r6, r3, #0, #3
    7fb2:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
    7fb6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7fba:	461e      	mov	r6, r3
    7fbc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7fc0:	f363 16c7 	bfi	r6, r3, #7, #1
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    7fc4:	0793      	lsls	r3, r2, #30
		conn->phy_flags = conn->phy_pref_flags;
    7fc6:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    7fca:	d40b      	bmi.n	7fe4 <event_connection_prepare+0xee4>
    7fcc:	b2f3      	uxtb	r3, r6
    7fce:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    7fd2:	4283      	cmp	r3, r0
    7fd4:	d106      	bne.n	7fe4 <event_connection_prepare+0xee4>
		    (conn->phy_rx == old_rx)) {
    7fd6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
    7fda:	f003 0307 	and.w	r3, r3, #7
    7fde:	428b      	cmp	r3, r1
    7fe0:	f43f ab4d 	beq.w	767e <event_connection_prepare+0x57e>
		node_rx = packet_rx_reserve_get(2);
    7fe4:	2002      	movs	r0, #2
    7fe6:	f7fc fda7 	bl	4b38 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7fea:	4606      	mov	r6, r0
    7fec:	b920      	cbnz	r0, 7ff8 <event_connection_prepare+0xef8>
    7fee:	f242 3112 	movw	r1, #8978	; 0x2312
    7ff2:	4870      	ldr	r0, [pc, #448]	; (81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>)
    7ff4:	f7f8 fc5c 	bl	8b0 <bt_ctlr_assert_handle>
		node_rx->hdr.handle = conn->handle;
    7ff8:	8c23      	ldrh	r3, [r4, #32]
    7ffa:	80f3      	strh	r3, [r6, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    7ffc:	230c      	movs	r3, #12
    7ffe:	7133      	strb	r3, [r6, #4]
		upd->status = 0;
    8000:	2300      	movs	r3, #0
    8002:	72f3      	strb	r3, [r6, #11]
		upd->tx = conn->phy_tx;
    8004:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    8008:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    800c:	7333      	strb	r3, [r6, #12]
		upd->rx = conn->phy_rx;
    800e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    8012:	f3c3 0302 	ubfx	r3, r3, #0, #3
    8016:	7373      	strb	r3, [r6, #13]
    8018:	e725      	b.n	7e66 <event_connection_prepare+0xd66>
			LL_ASSERT(0);
    801a:	f242 318e 	movw	r1, #9102	; 0x238e
    801e:	e727      	b.n	7e70 <event_connection_prepare+0xd70>
		free_count_rx = packet_rx_acquired_count_get() +
    8020:	f7fc fd74 	bl	4b0c <packet_rx_acquired_count_get>
    8024:	4606      	mov	r6, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    8026:	f8d5 0738 	ldr.w	r0, [r5, #1848]	; 0x738
    802a:	f7f9 febf 	bl	1dac <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    802e:	4406      	add	r6, r0
    8030:	b2b6      	uxth	r6, r6
		LL_ASSERT(free_count_rx <= 0xFF);
    8032:	2eff      	cmp	r6, #255	; 0xff
    8034:	d904      	bls.n	8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>
    8036:	f242 117b 	movw	r1, #8571	; 0x217b
    803a:	485e      	ldr	r0, [pc, #376]	; (81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>)
    803c:	f7f8 fc38 	bl	8b0 <bt_ctlr_assert_handle>
		if (_radio.packet_rx_data_count != free_count_rx) {
    8040:	f895 3742 	ldrb.w	r3, [r5, #1858]	; 0x742
    8044:	42b3      	cmp	r3, r6
    8046:	d12b      	bne.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8048:	4859      	ldr	r0, [pc, #356]	; (81b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0>)
    804a:	f7f9 fe80 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    804e:	4601      	mov	r1, r0
    8050:	b330      	cbz	r0, 80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    8052:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    8056:	f8b4 00ee 	ldrh.w	r0, [r4, #238]	; 0xee
    805a:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    805c:	2201      	movs	r2, #1
    805e:	f362 0301 	bfi	r3, r2, #0, #2
		conn->default_tx_time = conn->llcp_length.tx_time;
    8062:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    8066:	8662      	strh	r2, [r4, #50]	; 0x32
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    8068:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    806c:	790b      	ldrb	r3, [r1, #4]
		lr->max_tx_octets = conn->default_tx_octets;
    806e:	8188      	strh	r0, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8070:	f043 0303 	orr.w	r3, r3, #3
    8074:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len =
    8076:	2309      	movs	r3, #9
    8078:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    807a:	2314      	movs	r3, #20
    807c:	71cb      	strb	r3, [r1, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    807e:	231b      	movs	r3, #27
    8080:	720b      	strb	r3, [r1, #8]
    8082:	2300      	movs	r3, #0
    8084:	724b      	strb	r3, [r1, #9]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
    8086:	f06f 036f 	mvn.w	r3, #111	; 0x6f
    808a:	728b      	strb	r3, [r1, #10]
    808c:	230a      	movs	r3, #10
    808e:	72cb      	strb	r3, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
    8090:	81ca      	strh	r2, [r1, #14]
		ctrl_tx_enqueue(conn, node_tx);
    8092:	4620      	mov	r0, r4
    8094:	f7fe ff64 	bl	6f60 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    8098:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    809c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	event_common_prepare(ticks_at_expire, remainder,
    80a0:	f894 3020 	ldrb.w	r3, [r4, #32]
    80a4:	f994 501d 	ldrsb.w	r5, [r4, #29]
    80a8:	4843      	ldr	r0, [pc, #268]	; (81b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b8>)
    80aa:	4944      	ldr	r1, [pc, #272]	; (81bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc>)
    80ac:	68a2      	ldr	r2, [r4, #8]
    80ae:	9403      	str	r4, [sp, #12]
    80b0:	3307      	adds	r3, #7
    80b2:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    80b6:	bf38      	it	cc
    80b8:	4601      	movcc	r1, r0
    80ba:	b2db      	uxtb	r3, r3
    80bc:	e88d 000c 	stmia.w	sp, {r2, r3}
    80c0:	9102      	str	r1, [sp, #8]
    80c2:	1d23      	adds	r3, r4, #4
    80c4:	4622      	mov	r2, r4
    80c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    80c8:	4648      	mov	r0, r9
	conn->event_counter = event_counter + 1;
    80ca:	3701      	adds	r7, #1
	event_common_prepare(ticks_at_expire, remainder,
    80cc:	f7fe fad8 	bl	6680 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    80d0:	8467      	strh	r7, [r4, #34]	; 0x22
}
    80d2:	b00f      	add	sp, #60	; 0x3c
    80d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free_count_rx = packet_rx_acquired_count_get() +
    80d8:	f7fc fd18 	bl	4b0c <packet_rx_acquired_count_get>
    80dc:	4606      	mov	r6, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    80de:	f8d5 0738 	ldr.w	r0, [r5, #1848]	; 0x738
    80e2:	f7f9 fe63 	bl	1dac <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
    80e6:	4406      	add	r6, r0
    80e8:	b2b6      	uxth	r6, r6
		LL_ASSERT(free_count_rx <= 0xFF);
    80ea:	2eff      	cmp	r6, #255	; 0xff
    80ec:	d904      	bls.n	80f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf8>
    80ee:	f242 11bc 	movw	r1, #8636	; 0x21bc
    80f2:	4830      	ldr	r0, [pc, #192]	; (81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>)
    80f4:	f7f8 fbdc 	bl	8b0 <bt_ctlr_assert_handle>
		if (_radio.packet_rx_data_count != free_count_rx) {
    80f8:	f895 3742 	ldrb.w	r3, [r5, #1858]	; 0x742
    80fc:	42b3      	cmp	r3, r6
    80fe:	d004      	beq.n	810a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10a>
			LL_ASSERT(0);
    8100:	f242 11c2 	movw	r1, #8642	; 0x21c2
    8104:	482b      	ldr	r0, [pc, #172]	; (81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>)
    8106:	f7f8 fbd3 	bl	8b0 <bt_ctlr_assert_handle>
		conn->llcp_length.ack = conn->llcp_length.req;
    810a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    810e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		_radio.conn_curr->pause_tx = 0;
    8112:	f8d5 371c 	ldr.w	r3, [r5, #1820]	; 0x71c
		conn->procedure_expire = 0;
    8116:	2100      	movs	r1, #0
    8118:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
    811c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    8120:	f361 02c3 	bfi	r2, r1, #3, #1
    8124:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    8128:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    812c:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
    812e:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
    8132:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
    8134:	f8d5 0714 	ldr.w	r0, [r5, #1812]	; 0x714
    8138:	f7f9 fe38 	bl	1dac <mem_free_count_get>
		if (_radio.advertiser.conn) {
    813c:	f8d5 3638 	ldr.w	r3, [r5, #1592]	; 0x638
    8140:	b10b      	cbz	r3, 8146 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x146>
			free_count_conn++;
    8142:	3001      	adds	r0, #1
    8144:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
    8146:	f8d5 3674 	ldr.w	r3, [r5, #1652]	; 0x674
    814a:	b10b      	cbz	r3, 8150 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150>
			free_count_conn++;
    814c:	3001      	adds	r0, #1
    814e:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    8150:	8e26      	ldrh	r6, [r4, #48]	; 0x30
		if (((free_count_conn + 1) == _radio.connection_count) ||
    8152:	f895 3718 	ldrb.w	r3, [r5, #1816]	; 0x718
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    8156:	360e      	adds	r6, #14
		if (((free_count_conn + 1) == _radio.connection_count) ||
    8158:	3001      	adds	r0, #1
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    815a:	f026 0603 	bic.w	r6, r6, #3
		if (((free_count_conn + 1) == _radio.connection_count) ||
    815e:	4298      	cmp	r0, r3
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    8160:	b2b6      	uxth	r6, r6
		if (((free_count_conn + 1) == _radio.connection_count) ||
    8162:	d07a      	beq.n	825a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x25a>
    8164:	f8b5 3740 	ldrh.w	r3, [r5, #1856]	; 0x740
    8168:	42b3      	cmp	r3, r6
    816a:	d376      	bcc.n	825a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x25a>
		node_rx = packet_rx_reserve_get(2);
    816c:	2002      	movs	r0, #2
    816e:	f7fc fce3 	bl	4b38 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    8172:	4605      	mov	r5, r0
    8174:	b920      	cbnz	r0, 8180 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180>
    8176:	f242 2125 	movw	r1, #8741	; 0x2225
    817a:	480e      	ldr	r0, [pc, #56]	; (81b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b4>)
    817c:	f7f8 fb98 	bl	8b0 <bt_ctlr_assert_handle>
		node_rx->hdr.handle = conn->handle;
    8180:	8c23      	ldrh	r3, [r4, #32]
    8182:	80eb      	strh	r3, [r5, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    8184:	2301      	movs	r3, #1
    8186:	712b      	strb	r3, [r5, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    8188:	7a2b      	ldrb	r3, [r5, #8]
    818a:	f043 0303 	orr.w	r3, r3, #3
    818e:	722b      	strb	r3, [r5, #8]
		pdu_ctrl_rx->len =
    8190:	2309      	movs	r3, #9
    8192:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    8194:	2315      	movs	r3, #21
    8196:	72eb      	strb	r3, [r5, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    8198:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    819a:	81ab      	strh	r3, [r5, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    819c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    819e:	822b      	strh	r3, [r5, #16]
		lr->max_rx_time = conn->max_rx_time;
    81a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    81a2:	81eb      	strh	r3, [r5, #14]
		lr->max_tx_time = conn->max_tx_time;
    81a4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    81a6:	826b      	strh	r3, [r5, #18]
		packet_rx_enqueue();
    81a8:	f7fd fea2 	bl	5ef0 <packet_rx_enqueue>
    81ac:	e778      	b.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
    81ae:	bf00      	nop
    81b0:	20000aa4 	.word	0x20000aa4
    81b4:	000109b4 	.word	0x000109b4
    81b8:	000087f5 	.word	0x000087f5
    81bc:	000082fd 	.word	0x000082fd
				if (_radio.packet_rx_acquire == 0) {
    81c0:	b90b      	cbnz	r3, 81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
						_radio.packet_rx_count - 1;
    81c2:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
					_radio.packet_rx_acquire -= 1;
    81c6:	3b01      	subs	r3, #1
    81c8:	f885 374a 	strb.w	r3, [r5, #1866]	; 0x74a
				node_rx = _radio.packet_rx[
    81cc:	f895 274a 	ldrb.w	r2, [r5, #1866]	; 0x74a
    81d0:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
				mem_release(node_rx->hdr.onion.link,
    81d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81d8:	4641      	mov	r1, r8
    81da:	6818      	ldr	r0, [r3, #0]
    81dc:	f7f9 fdd1 	bl	1d82 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
    81e0:	f895 3748 	ldrb.w	r3, [r5, #1864]	; 0x748
    81e4:	f895 275c 	ldrb.w	r2, [r5, #1884]	; 0x75c
    81e8:	3b01      	subs	r3, #1
    81ea:	429a      	cmp	r2, r3
    81ec:	db04      	blt.n	81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>
    81ee:	f242 11fe 	movw	r1, #8702	; 0x21fe
    81f2:	4650      	mov	r0, sl
    81f4:	f7f8 fb5c 	bl	8b0 <bt_ctlr_assert_handle>
				_radio.link_rx_data_quota++;
    81f8:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    81fc:	3301      	adds	r3, #1
    81fe:	f885 375c 	strb.w	r3, [r5, #1884]	; 0x75c
			while (_radio.packet_rx_acquire !=
    8202:	f895 374a 	ldrb.w	r3, [r5, #1866]	; 0x74a
				_radio.packet_rx_last) {
    8206:	f895 2749 	ldrb.w	r2, [r5, #1865]	; 0x749
			while (_radio.packet_rx_acquire !=
    820a:	4293      	cmp	r3, r2
    820c:	d1d8      	bne.n	81c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c0>
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
    820e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    8210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
				_radio.packet_rx_data_size =
    8214:	bf3a      	itte	cc
    8216:	f44f 7386 	movcc.w	r3, #268	; 0x10c
    821a:	f8a5 3740 	strhcc.w	r3, [r5, #1856]	; 0x740
				_radio.packet_rx_data_size =
    821e:	f8a5 6740 	strhcs.w	r6, [r5, #1856]	; 0x740
			_radio.packet_rx_data_count =
    8222:	f8b5 373e 	ldrh.w	r3, [r5, #1854]	; 0x73e
    8226:	f8b5 2740 	ldrh.w	r2, [r5, #1856]	; 0x740
    822a:	fbb3 f3f2 	udiv	r3, r3, r2
    822e:	b2db      	uxtb	r3, r3
    8230:	f885 3742 	strb.w	r3, [r5, #1858]	; 0x742
			LL_ASSERT(_radio.packet_rx_data_count);
    8234:	b923      	cbnz	r3, 8240 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x240>
    8236:	f242 2115 	movw	r1, #8725	; 0x2215
    823a:	4810      	ldr	r0, [pc, #64]	; (827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>)
    823c:	f7f8 fb38 	bl	8b0 <bt_ctlr_assert_handle>
			mem_init(_radio.pkt_rx_data_pool,
    8240:	f8d5 0734 	ldr.w	r0, [r5, #1844]	; 0x734
    8244:	4b0e      	ldr	r3, [pc, #56]	; (8280 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x280>)
    8246:	f895 2742 	ldrb.w	r2, [r5, #1858]	; 0x742
    824a:	f8b5 1740 	ldrh.w	r1, [r5, #1856]	; 0x740
    824e:	f7f9 fd57 	bl	1d00 <mem_init>
			packet_rx_allocate(4);
    8252:	2004      	movs	r0, #4
    8254:	f7fc fcfa 	bl	4c4c <packet_rx_allocate>
    8258:	e788      	b.n	816c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16c>
				mem_release(node_rx->hdr.onion.link,
    825a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8288 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x288>
				LL_ASSERT(_radio.link_rx_data_quota <
    825e:	f8df a01c 	ldr.w	sl, [pc, #28]	; 827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>
    8262:	e7ce      	b.n	8202 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x202>
		LL_ASSERT(0);
    8264:	f242 2147 	movw	r1, #8775	; 0x2247
    8268:	4804      	ldr	r0, [pc, #16]	; (827c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x27c>)
    826a:	f7f8 fb21 	bl	8b0 <bt_ctlr_assert_handle>
    826e:	e717      	b.n	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
				mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    8270:	4904      	ldr	r1, [pc, #16]	; (8284 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x284>)
    8272:	4630      	mov	r0, r6
    8274:	f7f9 fd85 	bl	1d82 <mem_release>
    8278:	f7ff ba01 	b.w	767e <event_connection_prepare+0x57e>
    827c:	000109b4 	.word	0x000109b4
    8280:	20000a78 	.word	0x20000a78
    8284:	20000aa4 	.word	0x20000aa4
    8288:	20000a90 	.word	0x20000a90

0000828c <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    828c:	f7fe bf38 	b.w	7100 <event_connection_prepare>

00008290 <event_slave_prepare>:
    8290:	f7fe bf36 	b.w	7100 <event_connection_prepare>

00008294 <event_stop>:
	s_mfy_radio_stop.param = context;
    8294:	4a08      	ldr	r2, [pc, #32]	; (82b8 <event_stop+0x24>)
{
    8296:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    8298:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    829a:	4613      	mov	r3, r2
    829c:	2200      	movs	r2, #0
    829e:	4611      	mov	r1, r2
    82a0:	4610      	mov	r0, r2
    82a2:	f7f9 fe1f 	bl	1ee4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    82a6:	b130      	cbz	r0, 82b6 <event_stop+0x22>
    82a8:	f241 61b5 	movw	r1, #5813	; 0x16b5
    82ac:	4803      	ldr	r0, [pc, #12]	; (82bc <event_stop+0x28>)
}
    82ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LL_ASSERT(!retval);
    82b2:	f7f8 bafd 	b.w	8b0 <bt_ctlr_assert_handle>
    82b6:	bd08      	pop	{r3, pc}
    82b8:	200054f8 	.word	0x200054f8
    82bc:	000109b4 	.word	0x000109b4

000082c0 <connection_configure>:
{
    82c0:	b510      	push	{r4, lr}
    82c2:	4604      	mov	r4, r0
	radio_reset();
    82c4:	f006 f9ec 	bl	e6a0 <radio_reset>
	radio_tx_power_set(0);
    82c8:	2000      	movs	r0, #0
    82ca:	f006 fa31 	bl	e730 <radio_tx_power_set>
	radio_isr_set(isr);
    82ce:	480a      	ldr	r0, [pc, #40]	; (82f8 <connection_configure+0x38>)
    82d0:	f006 f9b0 	bl	e634 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    82d4:	f104 0010 	add.w	r0, r4, #16
    82d8:	f006 fa48 	bl	e76c <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    82dc:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    82de:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    82e0:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    82e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    82e6:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    82e8:	f240 605b 	movw	r0, #1627	; 0x65b
    82ec:	4319      	orrs	r1, r3
}
    82ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    82f2:	f006 baf5 	b.w	e8e0 <radio_crc_configure>
    82f6:	bf00      	nop
    82f8:	00009b59 	.word	0x00009b59

000082fc <event_slave>:
{
    82fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    8300:	4d69      	ldr	r5, [pc, #420]	; (84a8 <event_slave+0x1ac>)
{
    8302:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    8304:	7ceb      	ldrb	r3, [r5, #19]
{
    8306:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    8308:	b123      	cbz	r3, 8314 <event_slave+0x18>
    830a:	f242 31f9 	movw	r1, #9209	; 0x23f9
    830e:	4867      	ldr	r0, [pc, #412]	; (84ac <event_slave+0x1b0>)
    8310:	f7f8 face 	bl	8b0 <bt_ctlr_assert_handle>
	LL_ASSERT(_radio.ticker_id_prepare ==
    8314:	8c23      	ldrh	r3, [r4, #32]
    8316:	7c2a      	ldrb	r2, [r5, #16]
    8318:	3307      	adds	r3, #7
    831a:	429a      	cmp	r2, r3
    831c:	d004      	beq.n	8328 <event_slave+0x2c>
    831e:	f242 31fc 	movw	r1, #9212	; 0x23fc
    8322:	4862      	ldr	r0, [pc, #392]	; (84ac <event_slave+0x1b0>)
    8324:	f7f8 fac4 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.role = ROLE_SLAVE;
    8328:	2303      	movs	r3, #3
    832a:	74eb      	strb	r3, [r5, #19]
	_radio.state = STATE_RX;
    832c:	2301      	movs	r3, #1
    832e:	752b      	strb	r3, [r5, #20]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    8330:	f894 3020 	ldrb.w	r3, [r4, #32]
	_radio.conn_curr = conn;
    8334:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
	_radio.ticker_id_prepare = 0;
    8338:	2600      	movs	r6, #0
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    833a:	3307      	adds	r3, #7
	_radio.packet_counter = 0;
    833c:	f885 6720 	strb.w	r6, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
    8340:	f885 6721 	strb.w	r6, [r5, #1825]	; 0x721
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    8344:	b2db      	uxtb	r3, r3
	_radio.ticker_id_prepare = 0;
    8346:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    8348:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    834a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    834c:	8563      	strh	r3, [r4, #42]	; 0x2a
	connection_configure(conn);
    834e:	4620      	mov	r0, r4
	conn->latency_prepare = 0;
    8350:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.ticks_anchor = ticks_at_expire;
    8352:	60af      	str	r7, [r5, #8]
	connection_configure(conn);
    8354:	f7ff ffb4 	bl	82c0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    8358:	2096      	movs	r0, #150	; 0x96
    835a:	f006 fb7d 	bl	ea58 <radio_tmr_tifs_set>
				     conn->phy_flags);
    835e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
    8362:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    8366:	09d3      	lsrs	r3, r2, #7
    8368:	4631      	mov	r1, r6
    836a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    836e:	f000 0007 	and.w	r0, r0, #7
    8372:	f006 fadf 	bl	e934 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    8376:	f895 2749 	ldrb.w	r2, [r5, #1865]	; 0x749
    837a:	f8d5 3744 	ldr.w	r3, [r5, #1860]	; 0x744
    837e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    8382:	4620      	mov	r0, r4
    8384:	3108      	adds	r1, #8
    8386:	f7fc feef 	bl	5168 <rx_packet_set>
	if (conn->data_chan_sel) {
    838a:	7f63      	ldrb	r3, [r4, #29]
    838c:	f013 0f40 	tst.w	r3, #64	; 0x40
    8390:	f104 0217 	add.w	r2, r4, #23
    8394:	d059      	beq.n	844a <event_slave+0x14e>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    8396:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    8398:	8be1      	ldrh	r1, [r4, #30]
    839a:	3801      	subs	r0, #1
    839c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    83a0:	b280      	uxth	r0, r0
    83a2:	f7fe fb0b 	bl	69bc <chan_sel_2>
	chan_set(data_chan_use);
    83a6:	f7fd f847 	bl	5438 <chan_set>
	conn->slave.window_widening_event_us +=
    83aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
    83ac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    83ae:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    83b0:	2200      	movs	r2, #0
    83b2:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
    83b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
	conn->slave.window_widening_event_us +=
    83b6:	6623      	str	r3, [r4, #96]	; 0x60
	if (conn->slave.window_widening_event_us >
    83b8:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    83ba:	bf88      	it	hi
    83bc:	6622      	strhi	r2, [r4, #96]	; 0x60
	conn->slave.window_size_event_us +=
    83be:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    83c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_prepare_us = 0;
    83c2:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    83c4:	4413      	add	r3, r2
    83c6:	66a3      	str	r3, [r4, #104]	; 0x68
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    83c8:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    83ca:	6666      	str	r6, [r4, #100]	; 0x64
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    83cc:	f107 0109 	add.w	r1, r7, #9
    83d0:	4630      	mov	r0, r6
    83d2:	f006 fb4d 	bl	ea70 <radio_tmr_start>
    83d6:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    83d8:	f006 fbdc 	bl	eb94 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    83dc:	4630      	mov	r0, r6
    83de:	f006 fbfb 	bl	ebd8 <radio_tmr_aa_save>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    83e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
    83e4:	6e20      	ldr	r0, [r4, #96]	; 0x60
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    83e6:	f103 0650 	add.w	r6, r3, #80	; 0x50
    83ea:	eb06 0640 	add.w	r6, r6, r0, lsl #1
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    83ee:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    83f2:	2101      	movs	r1, #1
    83f4:	f000 0007 	and.w	r0, r0, #7
    83f8:	f006 fa19 	bl	e82e <radio_rx_ready_delay_get>
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
    83fc:	4446      	add	r6, r8
	hcto += radio_rx_ready_delay_get(conn->phy_rx, 1);
    83fe:	4406      	add	r6, r0
	hcto += addr_us_get(conn->phy_rx);
    8400:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    8404:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
    8408:	2802      	cmp	r0, #2
    840a:	d03e      	beq.n	848a <event_slave+0x18e>
		return 40;
    840c:	2804      	cmp	r0, #4
    840e:	bf0c      	ite	eq
    8410:	f44f 73bc 	moveq.w	r3, #376	; 0x178
    8414:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    8416:	2101      	movs	r1, #1
	hcto += addr_us_get(conn->phy_rx);
    8418:	441e      	add	r6, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
    841a:	f006 fa0a 	bl	e832 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    841e:	4430      	add	r0, r6
    8420:	f006 fb9a 	bl	eb58 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    8424:	f894 1020 	ldrb.w	r1, [r4, #32]
    8428:	3107      	adds	r1, #7
    842a:	463a      	mov	r2, r7
    842c:	b2c9      	uxtb	r1, r1
    842e:	4620      	mov	r0, r4
    8430:	f7fe fb08 	bl	6a44 <preempt_calc>
    8434:	4603      	mov	r3, r0
    8436:	b350      	cbz	r0, 848e <event_slave+0x192>
		_radio.state = STATE_STOP;
    8438:	2304      	movs	r3, #4
    843a:	752b      	strb	r3, [r5, #20]
		radio_disable();
    843c:	f006 fa14 	bl	e868 <radio_disable>
	packet_tx_enqueue(2);
    8440:	2002      	movs	r0, #2
}
    8442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_tx_enqueue(2);
    8446:	f7fc bee7 	b.w	5218 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    844a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    844c:	7fa6      	ldrb	r6, [r4, #30]
    844e:	fb01 6606 	mla	r6, r1, r6, r6
    8452:	7fe1      	ldrb	r1, [r4, #31]
    8454:	2025      	movs	r0, #37	; 0x25
    8456:	440e      	add	r6, r1
    8458:	fb96 f1f0 	sdiv	r1, r6, r0
    845c:	fb00 6611 	mls	r6, r0, r1, r6
    8460:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8462:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    8464:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8466:	5c51      	ldrb	r1, [r2, r1]
    8468:	f006 0607 	and.w	r6, r6, #7
    846c:	fa41 f606 	asr.w	r6, r1, r6
    8470:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    8472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8476:	d496      	bmi.n	83a6 <event_slave+0xaa>
		chan_index = chan_next % chan_count;
    8478:	fbb0 f1f3 	udiv	r1, r0, r3
    847c:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    8480:	b2c9      	uxtb	r1, r1
    8482:	4610      	mov	r0, r2
    8484:	f7fc fb26 	bl	4ad4 <chan_sel_remap>
    8488:	e78d      	b.n	83a6 <event_slave+0xaa>
		return 24;
    848a:	2318      	movs	r3, #24
    848c:	e7c3      	b.n	8416 <event_slave+0x11a>
		ticker_status =
    848e:	4a08      	ldr	r2, [pc, #32]	; (84b0 <event_slave+0x1b4>)
    8490:	4601      	mov	r1, r0
    8492:	f7fa fbf5 	bl	2c80 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8496:	f030 0302 	bics.w	r3, r0, #2
    849a:	d0d1      	beq.n	8440 <event_slave+0x144>
    849c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    84a0:	4802      	ldr	r0, [pc, #8]	; (84ac <event_slave+0x1b0>)
    84a2:	f7f8 fa05 	bl	8b0 <bt_ctlr_assert_handle>
    84a6:	e7cb      	b.n	8440 <event_slave+0x144>
    84a8:	20000340 	.word	0x20000340
    84ac:	000109b4 	.word	0x000109b4
    84b0:	0000620d 	.word	0x0000620d

000084b4 <prepare_pdu_data_tx>:
	    conn->empty ||
    84b4:	f890 c0f8 	ldrb.w	ip, [r0, #248]	; 0xf8
	if (/* empty packet */
    84b8:	f01c 0f80 	tst.w	ip, #128	; 0x80
{
    84bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84c0:	4604      	mov	r4, r0
    84c2:	460e      	mov	r6, r1
	if (/* empty packet */
    84c4:	d109      	bne.n	84da <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
    84c6:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
	    conn->empty ||
    84ca:	b131      	cbz	r1, 84da <prepare_pdu_data_tx+0x26>
	    !conn->pkt_tx_head ||
    84cc:	f01c 0f08 	tst.w	ip, #8
    84d0:	f8d0 e140 	ldr.w	lr, [r0, #320]	; 0x140
    84d4:	d023      	beq.n	851e <prepare_pdu_data_tx+0x6a>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    84d6:	4571      	cmp	r1, lr
    84d8:	d021      	beq.n	851e <prepare_pdu_data_tx+0x6a>
	conn->empty = 1;
    84da:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    84de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    84e2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    84e6:	f006 fa11 	bl	e90c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    84ea:	7803      	ldrb	r3, [r0, #0]
    84ec:	2201      	movs	r2, #1
    84ee:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    84f2:	2200      	movs	r2, #0
    84f4:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    84f6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    84fa:	7003      	strb	r3, [r0, #0]
    84fc:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    84fe:	b15a      	cbz	r2, 8518 <prepare_pdu_data_tx+0x64>
		pdu_data_tx->md = 1;
    8500:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    8504:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    8506:	7803      	ldrb	r3, [r0, #0]
    8508:	f36f 1347 	bfc	r3, #5, #3
    850c:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    850e:	2300      	movs	r3, #0
    8510:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    8512:	6030      	str	r0, [r6, #0]
    8514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data_tx->md = 0;
    8518:	f362 1304 	bfi	r3, r2, #4, #1
    851c:	e7f2      	b.n	8504 <prepare_pdu_data_tx+0x50>
					conn->packet_tx_head_offset);
    851e:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
		if (!conn->packet_tx_head_len) {
    8522:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    8526:	1d0d      	adds	r5, r1, #4
    8528:	18a8      	adds	r0, r5, r2
		if (!conn->packet_tx_head_len) {
    852a:	b913      	cbnz	r3, 8532 <prepare_pdu_data_tx+0x7e>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    852c:	7843      	ldrb	r3, [r0, #1]
    852e:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
    8532:	b122      	cbz	r2, 853e <prepare_pdu_data_tx+0x8a>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8534:	5cab      	ldrb	r3, [r5, r2]
    8536:	2701      	movs	r7, #1
    8538:	f367 0301 	bfi	r3, r7, #0, #2
    853c:	54ab      	strb	r3, [r5, r2]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    853e:	f894 7150 	ldrb.w	r7, [r4, #336]	; 0x150
		switch (conn->phy_tx_time) {
    8542:	f894 8039 	ldrb.w	r8, [r4, #57]	; 0x39
		_pdu_data_tx->len = conn->packet_tx_head_len -
    8546:	1abf      	subs	r7, r7, r2
    8548:	b2ff      	uxtb	r7, r7
    854a:	7047      	strb	r7, [r0, #1]
		_pdu_data_tx->md = 0;
    854c:	5cab      	ldrb	r3, [r5, r2]
    854e:	f36f 1304 	bfc	r3, #4, #1
    8552:	54ab      	strb	r3, [r5, r2]
		switch (conn->phy_tx_time) {
    8554:	f008 0807 	and.w	r8, r8, #7
    8558:	f1b8 0f02 	cmp.w	r8, #2
    855c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    855e:	d029      	beq.n	85b4 <prepare_pdu_data_tx+0x100>
    8560:	f1b8 0f04 	cmp.w	r8, #4
    8564:	d029      	beq.n	85ba <prepare_pdu_data_tx+0x106>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
    8566:	08db      	lsrs	r3, r3, #3
    8568:	3b0a      	subs	r3, #10
				max_tx_octets = ((conn->max_tx_time - 430) >>
    856a:	b29b      	uxth	r3, r3
		if (conn->enc_tx) {
    856c:	f01c 0f20 	tst.w	ip, #32
			max_tx_octets -= 4;
    8570:	bf18      	it	ne
    8572:	3b04      	subne	r3, #4
    8574:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
    8578:	bf18      	it	ne
    857a:	b29b      	uxthne	r3, r3
    857c:	4563      	cmp	r3, ip
    857e:	bf28      	it	cs
    8580:	4663      	movcs	r3, ip
		if (_pdu_data_tx->len > max_tx_octets) {
    8582:	429f      	cmp	r7, r3
			_pdu_data_tx->len = max_tx_octets;
    8584:	bf81      	itttt	hi
    8586:	7043      	strbhi	r3, [r0, #1]
			_pdu_data_tx->md = 1;
    8588:	5cab      	ldrbhi	r3, [r5, r2]
    858a:	f043 0310 	orrhi.w	r3, r3, #16
    858e:	54ab      	strbhi	r3, [r5, r2]
		if (conn->pkt_tx_head->next) {
    8590:	680b      	ldr	r3, [r1, #0]
    8592:	b11b      	cbz	r3, 859c <prepare_pdu_data_tx+0xe8>
			_pdu_data_tx->md = 1;
    8594:	5cab      	ldrb	r3, [r5, r2]
    8596:	f043 0310 	orr.w	r3, r3, #16
    859a:	54ab      	strb	r3, [r5, r2]
		if (!conn->pkt_tx_ctrl &&
    859c:	f1be 0f00 	cmp.w	lr, #0
    85a0:	d1b1      	bne.n	8506 <prepare_pdu_data_tx+0x52>
    85a2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    85a6:	4299      	cmp	r1, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    85a8:	bf1c      	itt	ne
    85aa:	f8c4 1144 	strne.w	r1, [r4, #324]	; 0x144
    85ae:	f8c4 1140 	strne.w	r1, [r4, #320]	; 0x140
    85b2:	e7a8      	b.n	8506 <prepare_pdu_data_tx+0x52>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
    85b4:	089b      	lsrs	r3, r3, #2
    85b6:	3b0b      	subs	r3, #11
    85b8:	e7d7      	b.n	856a <prepare_pdu_data_tx+0xb6>
			if (conn->phy_flags & 0x01) {
    85ba:	f894 8038 	ldrb.w	r8, [r4, #56]	; 0x38
    85be:	ea5f 18d8 	movs.w	r8, r8, lsr #7
				max_tx_octets = ((conn->max_tx_time - 592) >>
    85c2:	bf15      	itete	ne
    85c4:	f5a3 7314 	subne.w	r3, r3, #592	; 0x250
				max_tx_octets = ((conn->max_tx_time - 430) >>
    85c8:	f5a3 73d7 	subeq.w	r3, r3, #430	; 0x1ae
				max_tx_octets = ((conn->max_tx_time - 592) >>
    85cc:	119b      	asrne	r3, r3, #6
				max_tx_octets = ((conn->max_tx_time - 430) >>
    85ce:	111b      	asreq	r3, r3, #4
    85d0:	3b02      	subs	r3, #2
    85d2:	e7ca      	b.n	856a <prepare_pdu_data_tx+0xb6>
    85d4:	0000      	movs	r0, r0
	...

000085d8 <mayfly_xtal_stop_calc>:
{
    85d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    85da:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    85dc:	2302      	movs	r3, #2
    85de:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    85e0:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    85e2:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    85e4:	4e7c      	ldr	r6, [pc, #496]	; (87d8 <mayfly_xtal_stop_calc+0x200>)
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    85e6:	4f7d      	ldr	r7, [pc, #500]	; (87dc <mayfly_xtal_stop_calc+0x204>)
				    _radio.connection_count));
    85e8:	4d7d      	ldr	r5, [pc, #500]	; (87e0 <mayfly_xtal_stop_calc+0x208>)
	struct connection *conn_curr = NULL;
    85ea:	930a      	str	r3, [sp, #40]	; 0x28
{
    85ec:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    85ee:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    85f0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    85f4:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    85f6:	ab09      	add	r3, sp, #36	; 0x24
    85f8:	9302      	str	r3, [sp, #8]
    85fa:	ab0c      	add	r3, sp, #48	; 0x30
    85fc:	9300      	str	r3, [sp, #0]
    85fe:	9601      	str	r6, [sp, #4]
    8600:	ab0d      	add	r3, sp, #52	; 0x34
    8602:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    8606:	2101      	movs	r1, #1
    8608:	2000      	movs	r0, #0
    860a:	f7fa faf7 	bl	2bfc <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    860e:	2802      	cmp	r0, #2
    8610:	d025      	beq.n	865e <mayfly_xtal_stop_calc+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    8612:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8614:	b123      	cbz	r3, 8620 <mayfly_xtal_stop_calc+0x48>
    8616:	f241 4123 	movw	r1, #5155	; 0x1423
    861a:	4638      	mov	r0, r7
    861c:	f7f8 f948 	bl	8b0 <bt_ctlr_assert_handle>
	} while (ticker_id_next != TICKER_NULL &&
    8620:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    8624:	2bff      	cmp	r3, #255	; 0xff
    8626:	d004      	beq.n	8632 <mayfly_xtal_stop_calc+0x5a>
    8628:	f895 2718 	ldrb.w	r2, [r5, #1816]	; 0x718
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    862c:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    862e:	4293      	cmp	r3, r2
    8630:	dae1      	bge.n	85f6 <mayfly_xtal_stop_calc+0x1e>
	if ((ticker_id_next == TICKER_NULL) ||
    8632:	1f5a      	subs	r2, r3, #5
    8634:	b2d2      	uxtb	r2, r2
    8636:	2af9      	cmp	r2, #249	; 0xf9
    8638:	4f6a      	ldr	r7, [pc, #424]	; (87e4 <mayfly_xtal_stop_calc+0x20c>)
    863a:	d805      	bhi.n	8648 <mayfly_xtal_stop_calc+0x70>
				_radio.connection_count))) {
    863c:	4a68      	ldr	r2, [pc, #416]	; (87e0 <mayfly_xtal_stop_calc+0x208>)
    863e:	f892 2718 	ldrb.w	r2, [r2, #1816]	; 0x718
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8642:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    8644:	4293      	cmp	r3, r2
    8646:	db0e      	blt.n	8666 <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
    8648:	783b      	ldrb	r3, [r7, #0]
    864a:	b113      	cbz	r3, 8652 <mayfly_xtal_stop_calc+0x7a>
    864c:	2001      	movs	r0, #1
    864e:	f7fd fe07 	bl	6260 <mayfly_xtal_retain.part.13>
}
    8652:	b00f      	add	sp, #60	; 0x3c
    8654:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    8656:	2101      	movs	r1, #1
    8658:	2000      	movs	r0, #0
    865a:	f7fa fb4d 	bl	2cf8 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8660:	2b02      	cmp	r3, #2
    8662:	d0f8      	beq.n	8656 <mayfly_xtal_stop_calc+0x7e>
    8664:	e7d5      	b.n	8612 <mayfly_xtal_stop_calc+0x3a>
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    8666:	a90a      	add	r1, sp, #40	; 0x28
    8668:	b2e0      	uxtb	r0, r4
    866a:	f7fd fddb 	bl	6224 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    866e:	4605      	mov	r5, r0
    8670:	b920      	cbnz	r0, 867c <mayfly_xtal_stop_calc+0xa4>
    8672:	f241 4133 	movw	r1, #5171	; 0x1433
    8676:	4859      	ldr	r0, [pc, #356]	; (87dc <mayfly_xtal_stop_calc+0x204>)
    8678:	f7f8 f91a 	bl	8b0 <bt_ctlr_assert_handle>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    867c:	682b      	ldr	r3, [r5, #0]
    867e:	686c      	ldr	r4, [r5, #4]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8680:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    8684:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    8686:	bfb8      	it	lt
    8688:	68ab      	ldrlt	r3, [r5, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    868a:	429c      	cmp	r4, r3
    868c:	bf38      	it	cc
    868e:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    8690:	68eb      	ldr	r3, [r5, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8692:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    8694:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8696:	f7fd fdc5 	bl	6224 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    869a:	4605      	mov	r5, r0
    869c:	b920      	cbnz	r0, 86a8 <mayfly_xtal_stop_calc+0xd0>
    869e:	f241 4145 	movw	r1, #5189	; 0x1445
    86a2:	484e      	ldr	r0, [pc, #312]	; (87dc <mayfly_xtal_stop_calc+0x204>)
    86a4:	f7f8 f904 	bl	8b0 <bt_ctlr_assert_handle>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    86a8:	68ae      	ldr	r6, [r5, #8]
    86aa:	686b      	ldr	r3, [r5, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    86ac:	682a      	ldr	r2, [r5, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    86ae:	429e      	cmp	r6, r3
    86b0:	bf38      	it	cc
    86b2:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    86b4:	2a00      	cmp	r2, #0
    86b6:	da05      	bge.n	86c4 <mayfly_xtal_stop_calc+0xec>
		ticks_to_expire -=
    86b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    86ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    86be:	4433      	add	r3, r6
    86c0:	1a9b      	subs	r3, r3, r2
    86c2:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    86c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    86c6:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    86ca:	4293      	cmp	r3, r2
    86cc:	d20b      	bcs.n	86e6 <mayfly_xtal_stop_calc+0x10e>
		if (s_xtal_retained) {
    86ce:	783b      	ldrb	r3, [r7, #0]
    86d0:	b113      	cbz	r3, 86d8 <mayfly_xtal_stop_calc+0x100>
    86d2:	2001      	movs	r0, #1
    86d4:	f7fd fdc4 	bl	6260 <mayfly_xtal_retain.part.13>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    86d8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    86dc:	2101      	movs	r1, #1
    86de:	4628      	mov	r0, r5
    86e0:	f7fd ff62 	bl	65a8 <prepare_normal_set>
    86e4:	e7b5      	b.n	8652 <mayfly_xtal_stop_calc+0x7a>
		if (!s_xtal_retained) {
    86e6:	783a      	ldrb	r2, [r7, #0]
    86e8:	b95a      	cbnz	r2, 8702 <mayfly_xtal_stop_calc+0x12a>
			s_xtal_retained = 1;
    86ea:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    86ec:	4b3e      	ldr	r3, [pc, #248]	; (87e8 <mayfly_xtal_stop_calc+0x210>)
			s_xtal_retained = 1;
    86ee:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    86f0:	4611      	mov	r1, r2
    86f2:	f7f9 fbf7 	bl	1ee4 <mayfly_enqueue>
			LL_ASSERT(!retval);
    86f6:	b120      	cbz	r0, 8702 <mayfly_xtal_stop_calc+0x12a>
    86f8:	f241 317b 	movw	r1, #4987	; 0x137b
    86fc:	4837      	ldr	r0, [pc, #220]	; (87dc <mayfly_xtal_stop_calc+0x204>)
    86fe:	f7f8 f8d7 	bl	8b0 <bt_ctlr_assert_handle>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    8702:	682b      	ldr	r3, [r5, #0]
    8704:	2b00      	cmp	r3, #0
    8706:	db19      	blt.n	873c <mayfly_xtal_stop_calc+0x164>
    8708:	429e      	cmp	r6, r3
    870a:	d217      	bcs.n	873c <mayfly_xtal_stop_calc+0x164>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    870c:	1b9b      	subs	r3, r3, r6
			ticker_status =
    870e:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    8710:	b29b      	uxth	r3, r3
			ticker_status =
    8712:	4936      	ldr	r1, [pc, #216]	; (87ec <mayfly_xtal_stop_calc+0x214>)
    8714:	9105      	str	r1, [sp, #20]
    8716:	9302      	str	r3, [sp, #8]
    8718:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    871c:	9506      	str	r5, [sp, #24]
    871e:	9004      	str	r0, [sp, #16]
    8720:	9003      	str	r0, [sp, #12]
    8722:	9001      	str	r0, [sp, #4]
    8724:	9000      	str	r0, [sp, #0]
    8726:	2101      	movs	r1, #1
    8728:	f7fa f9de 	bl	2ae8 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    872c:	f030 0302 	bics.w	r3, r0, #2
    8730:	d004      	beq.n	873c <mayfly_xtal_stop_calc+0x164>
    8732:	f241 4172 	movw	r1, #5234	; 0x1472
    8736:	4829      	ldr	r0, [pc, #164]	; (87dc <mayfly_xtal_stop_calc+0x204>)
    8738:	f7f8 f8ba 	bl	8b0 <bt_ctlr_assert_handle>
		if (!conn_curr || !conn_next) {
    873c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    873e:	2e00      	cmp	r6, #0
    8740:	d087      	beq.n	8652 <mayfly_xtal_stop_calc+0x7a>
    8742:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8744:	2d00      	cmp	r5, #0
    8746:	d084      	beq.n	8652 <mayfly_xtal_stop_calc+0x7a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    8748:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    874a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    874c:	429a      	cmp	r2, r3
    874e:	d180      	bne.n	8652 <mayfly_xtal_stop_calc+0x7a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    8750:	4827      	ldr	r0, [pc, #156]	; (87f0 <mayfly_xtal_stop_calc+0x218>)
    8752:	b292      	uxth	r2, r2
    8754:	fba2 0100 	umull	r0, r1, r2, r0
    8758:	f240 1323 	movw	r3, #291	; 0x123
    875c:	fb03 1102 	mla	r1, r3, r2, r1
    8760:	a31b      	add	r3, pc, #108	; (adr r3, 87d0 <mayfly_xtal_stop_calc+0x1f8>)
    8762:	e9d3 2300 	ldrd	r2, r3, [r3]
    8766:	f7f7 fd7f 	bl	268 <__aeabi_uldivmod>
    876a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    876c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    8770:	2200      	movs	r2, #0
    8772:	4298      	cmp	r0, r3
    8774:	d318      	bcc.n	87a8 <mayfly_xtal_stop_calc+0x1d0>
    8776:	b102      	cbz	r2, 877a <mayfly_xtal_stop_calc+0x1a2>
    8778:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    877a:	f996 201d 	ldrsb.w	r2, [r6, #29]
    877e:	2a00      	cmp	r2, #0
    8780:	f995 201d 	ldrsb.w	r2, [r5, #29]
    8784:	da13      	bge.n	87ae <mayfly_xtal_stop_calc+0x1d6>
    8786:	2a00      	cmp	r2, #0
    8788:	f6ff af63 	blt.w	8652 <mayfly_xtal_stop_calc+0x7a>
			     (ticks_slot_abs +
    878c:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    878e:	429c      	cmp	r4, r3
    8790:	f67f af5f 	bls.w	8652 <mayfly_xtal_stop_calc+0x7a>
				status = conn_update_req(conn_curr);
    8794:	4630      	mov	r0, r6
    8796:	f7fc f9e1 	bl	4b5c <conn_update_req>
				if (status == 2) {
    879a:	2802      	cmp	r0, #2
    879c:	f47f af59 	bne.w	8652 <mayfly_xtal_stop_calc+0x7a>
					conn_update_req(conn_next);
    87a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    87a2:	f7fc f9db 	bl	4b5c <conn_update_req>
    87a6:	e754      	b.n	8652 <mayfly_xtal_stop_calc+0x7a>
				ticks_to_expire -= ticks_conn_interval;
    87a8:	1a1b      	subs	r3, r3, r0
    87aa:	2201      	movs	r2, #1
    87ac:	e7e1      	b.n	8772 <mayfly_xtal_stop_calc+0x19a>
			} else if (!conn_curr->role && conn_next->role &&
    87ae:	2a00      	cmp	r2, #0
    87b0:	f6bf af4f 	bge.w	8652 <mayfly_xtal_stop_calc+0x7a>
				    (ticks_slot_abs +
    87b4:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    87b6:	429c      	cmp	r4, r3
    87b8:	f67f af4b 	bls.w	8652 <mayfly_xtal_stop_calc+0x7a>
				status = conn_update_req(conn_next);
    87bc:	4628      	mov	r0, r5
    87be:	f7fc f9cd 	bl	4b5c <conn_update_req>
				if (status == 2) {
    87c2:	2802      	cmp	r0, #2
    87c4:	f47f af45 	bne.w	8652 <mayfly_xtal_stop_calc+0x7a>
					conn_update_req(conn_curr);
    87c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    87ca:	e7ea      	b.n	87a2 <mayfly_xtal_stop_calc+0x1ca>
    87cc:	f3af 8000 	nop.w
    87d0:	1afd498d 	.word	0x1afd498d
    87d4:	00000007 	.word	0x00000007
    87d8:	00004ab9 	.word	0x00004ab9
    87dc:	000109b4 	.word	0x000109b4
    87e0:	20000340 	.word	0x20000340
    87e4:	20000b84 	.word	0x20000b84
    87e8:	20005568 	.word	0x20005568
    87ec:	00004abd 	.word	0x00004abd
    87f0:	09ce5400 	.word	0x09ce5400

000087f4 <event_master>:
{
    87f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    87f6:	4d4f      	ldr	r5, [pc, #316]	; (8934 <event_master+0x140>)
{
    87f8:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    87fa:	7ceb      	ldrb	r3, [r5, #19]
{
    87fc:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    87fe:	b123      	cbz	r3, 880a <event_master+0x16>
    8800:	f242 41a1 	movw	r1, #9377	; 0x24a1
    8804:	484c      	ldr	r0, [pc, #304]	; (8938 <event_master+0x144>)
    8806:	f7f8 f853 	bl	8b0 <bt_ctlr_assert_handle>
	LL_ASSERT(_radio.ticker_id_prepare ==
    880a:	8c23      	ldrh	r3, [r4, #32]
    880c:	7c2a      	ldrb	r2, [r5, #16]
    880e:	3307      	adds	r3, #7
    8810:	429a      	cmp	r2, r3
    8812:	d004      	beq.n	881e <event_master+0x2a>
    8814:	f242 41a4 	movw	r1, #9380	; 0x24a4
    8818:	4847      	ldr	r0, [pc, #284]	; (8938 <event_master+0x144>)
    881a:	f7f8 f849 	bl	8b0 <bt_ctlr_assert_handle>
	_radio.role = ROLE_MASTER;
    881e:	2304      	movs	r3, #4
    8820:	74eb      	strb	r3, [r5, #19]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    8822:	f894 3020 	ldrb.w	r3, [r4, #32]
	_radio.conn_curr = conn;
    8826:	f8c5 471c 	str.w	r4, [r5, #1820]	; 0x71c
	_radio.ticker_id_prepare = 0;
    882a:	2200      	movs	r2, #0
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    882c:	3307      	adds	r3, #7
	_radio.packet_counter = 0;
    882e:	f885 2720 	strb.w	r2, [r5, #1824]	; 0x720
	_radio.crc_expire = 0;
    8832:	f885 2721 	strb.w	r2, [r5, #1825]	; 0x721
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    8836:	b2db      	uxtb	r3, r3
	_radio.ticker_id_prepare = 0;
    8838:	742a      	strb	r2, [r5, #16]
	_radio.ticker_id_event =
    883a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    883c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    883e:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.state = STATE_TX;
    8840:	2002      	movs	r0, #2
	conn->latency_prepare = 0;
    8842:	8522      	strh	r2, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    8844:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    8846:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    8848:	f7fc fce6 	bl	5218 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    884c:	a901      	add	r1, sp, #4
    884e:	4620      	mov	r0, r4
    8850:	f7ff fe30 	bl	84b4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    8854:	9901      	ldr	r1, [sp, #4]
    8856:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
    885a:	780b      	ldrb	r3, [r1, #0]
    885c:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    8860:	f3c2 0240 	ubfx	r2, r2, #1, #1
    8864:	f362 0382 	bfi	r3, r2, #2, #1
    8868:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    886a:	4620      	mov	r0, r4
    886c:	f7ff fd28 	bl	82c0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    8870:	2096      	movs	r0, #150	; 0x96
    8872:	f006 f8f1 	bl	ea58 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
    8876:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
    887a:	f000 0007 	and.w	r0, r0, #7
    887e:	f006 f84d 	bl	e91c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    8882:	9901      	ldr	r1, [sp, #4]
    8884:	4620      	mov	r0, r4
    8886:	f7fc fdab 	bl	53e0 <tx_packet_set>
	if (conn->data_chan_sel) {
    888a:	7f63      	ldrb	r3, [r4, #29]
    888c:	f013 0f40 	tst.w	r3, #64	; 0x40
    8890:	f104 0217 	add.w	r2, r4, #23
    8894:	d021      	beq.n	88da <event_master+0xe6>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    8896:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    8898:	8be1      	ldrh	r1, [r4, #30]
    889a:	3801      	subs	r0, #1
    889c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    88a0:	b280      	uxth	r0, r0
    88a2:	f7fe f88b 	bl	69bc <chan_sel_2>
	chan_set(data_chan_use);
    88a6:	f7fc fdc7 	bl	5438 <chan_set>
		remainder_us = radio_tmr_start(1,
    88aa:	68ea      	ldr	r2, [r5, #12]
    88ac:	f107 0109 	add.w	r1, r7, #9
    88b0:	2001      	movs	r0, #1
    88b2:	f006 f8dd 	bl	ea70 <radio_tmr_start>
		radio_tmr_end_capture();
    88b6:	f006 f9a1 	bl	ebfc <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    88ba:	f894 1020 	ldrb.w	r1, [r4, #32]
    88be:	3107      	adds	r1, #7
    88c0:	463a      	mov	r2, r7
    88c2:	b2c9      	uxtb	r1, r1
    88c4:	4620      	mov	r0, r4
    88c6:	f7fe f8bd 	bl	6a44 <preempt_calc>
	if (0 !=
    88ca:	4603      	mov	r3, r0
    88cc:	b328      	cbz	r0, 891a <event_master+0x126>
		_radio.state = STATE_STOP;
    88ce:	2304      	movs	r3, #4
    88d0:	752b      	strb	r3, [r5, #20]
		radio_disable();
    88d2:	f005 ffc9 	bl	e868 <radio_disable>
}
    88d6:	b003      	add	sp, #12
    88d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    88da:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    88dc:	7fa6      	ldrb	r6, [r4, #30]
    88de:	fb01 6606 	mla	r6, r1, r6, r6
    88e2:	7fe1      	ldrb	r1, [r4, #31]
    88e4:	2025      	movs	r0, #37	; 0x25
    88e6:	440e      	add	r6, r1
    88e8:	fb96 f1f0 	sdiv	r1, r6, r0
    88ec:	fb00 6611 	mls	r6, r0, r1, r6
    88f0:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    88f2:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    88f4:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    88f6:	5c51      	ldrb	r1, [r2, r1]
    88f8:	f006 0607 	and.w	r6, r6, #7
    88fc:	fa41 f606 	asr.w	r6, r1, r6
    8900:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    8902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8906:	d4ce      	bmi.n	88a6 <event_master+0xb2>
		chan_index = chan_next % chan_count;
    8908:	fbb0 f1f3 	udiv	r1, r0, r3
    890c:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    8910:	b2c9      	uxtb	r1, r1
    8912:	4610      	mov	r0, r2
    8914:	f7fc f8de 	bl	4ad4 <chan_sel_remap>
    8918:	e7c5      	b.n	88a6 <event_master+0xb2>
		ticker_status =
    891a:	4a08      	ldr	r2, [pc, #32]	; (893c <event_master+0x148>)
    891c:	4601      	mov	r1, r0
    891e:	f7fa f9af 	bl	2c80 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8922:	f030 0302 	bics.w	r3, r0, #2
    8926:	d0d6      	beq.n	88d6 <event_master+0xe2>
    8928:	f242 5151 	movw	r1, #9553	; 0x2551
    892c:	4802      	ldr	r0, [pc, #8]	; (8938 <event_master+0x144>)
    892e:	f7f7 ffbf 	bl	8b0 <bt_ctlr_assert_handle>
}
    8932:	e7d0      	b.n	88d6 <event_master+0xe2>
    8934:	20000340 	.word	0x20000340
    8938:	000109b4 	.word	0x000109b4
    893c:	0000620d 	.word	0x0000620d

00008940 <isr_rx_conn_pkt_ctrl>:
{
    8940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (pdu_data_rx->llctrl.opcode) {
    8944:	7ac6      	ldrb	r6, [r0, #11]
{
    8946:	b085      	sub	sp, #20
    8948:	4604      	mov	r4, r0
    894a:	460d      	mov	r5, r1
	pdu_data_rx = (void *)node_rx->pdu_data;
    894c:	f100 0708 	add.w	r7, r0, #8
	switch (pdu_data_rx->llctrl.opcode) {
    8950:	2e19      	cmp	r6, #25
    8952:	f201 80cd 	bhi.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
    8956:	e8df f016 	tbh	[pc, r6, lsl #1]
    895a:	001a      	.short	0x001a
    895c:	00c8008c 	.word	0x00c8008c
    8960:	010500d7 	.word	0x010500d7
    8964:	0152012d 	.word	0x0152012d
    8968:	019505ab 	.word	0x019505ab
    896c:	01e901bb 	.word	0x01e901bb
    8970:	02440212 	.word	0x02440212
    8974:	01ab02ad 	.word	0x01ab02ad
    8978:	041602c5 	.word	0x041602c5
    897c:	05820499 	.word	0x05820499
    8980:	062f059c 	.word	0x062f059c
    8984:	0706062f 	.word	0x0706062f
    8988:	080207c8 	.word	0x080207c8
    898c:	0898      	.short	0x0898
		if (!_radio.conn_curr->role ||
    898e:	4ece      	ldr	r6, [pc, #824]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8990:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
    8994:	f995 301d 	ldrsb.w	r3, [r5, #29]
    8998:	2b00      	cmp	r3, #0
    899a:	f281 80a9 	bge.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    899e:	7a41      	ldrb	r1, [r0, #9]
    89a0:	2000      	movs	r0, #0
    89a2:	f7fc f86b 	bl	4a7c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    89a6:	2800      	cmp	r0, #0
    89a8:	f001 80a2 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    89ac:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    89ae:	f8b4 3015 	ldrh.w	r3, [r4, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    89b2:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    89b4:	041a      	lsls	r2, r3, #16
    89b6:	f101 80b2 	bmi.w	9b1e <isr_rx_conn_pkt_ctrl+0x11de>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    89ba:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    89be:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    89c2:	429a      	cmp	r2, r3
    89c4:	d004      	beq.n	89d0 <isr_rx_conn_pkt_ctrl+0x90>
    89c6:	f242 71b5 	movw	r1, #10165	; 0x27b5
    89ca:	48c0      	ldr	r0, [pc, #768]	; (8ccc <isr_rx_conn_pkt_ctrl+0x38c>)
    89cc:	f7f7 ff70 	bl	8b0 <bt_ctlr_assert_handle>
	if (_radio.conn_upd == 0) {
    89d0:	f8d6 3790 	ldr.w	r3, [r6, #1936]	; 0x790
    89d4:	b953      	cbnz	r3, 89ec <isr_rx_conn_pkt_ctrl+0xac>
		LL_ASSERT(conn->role);
    89d6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    89da:	2b00      	cmp	r3, #0
    89dc:	db04      	blt.n	89e8 <isr_rx_conn_pkt_ctrl+0xa8>
    89de:	f242 71bb 	movw	r1, #10171	; 0x27bb
    89e2:	48ba      	ldr	r0, [pc, #744]	; (8ccc <isr_rx_conn_pkt_ctrl+0x38c>)
    89e4:	f7f7 ff64 	bl	8b0 <bt_ctlr_assert_handle>
		_radio.conn_upd = conn;
    89e8:	f8c6 5790 	str.w	r5, [r6, #1936]	; 0x790
	conn->llcp.conn_upd.win_size =
    89ec:	7b23      	ldrb	r3, [r4, #12]
    89ee:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    89f2:	f8b4 200d 	ldrh.w	r2, [r4, #13]
    89f6:	f240 43e2 	movw	r3, #1250	; 0x4e2
    89fa:	4353      	muls	r3, r2
	conn->llcp.conn_upd.win_offset_us =
    89fc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		pdu_data_rx->llctrl.conn_update_ind.interval;
    8a00:	7c22      	ldrb	r2, [r4, #16]
    8a02:	7be3      	ldrb	r3, [r4, #15]
    8a04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.conn_upd.interval =
    8a08:	f8a5 307a 	strh.w	r3, [r5, #122]	; 0x7a
		pdu_data_rx->llctrl.conn_update_ind.latency;
    8a0c:	7ca2      	ldrb	r2, [r4, #18]
    8a0e:	7c63      	ldrb	r3, [r4, #17]
    8a10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.conn_upd.latency =
    8a14:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    8a18:	7d22      	ldrb	r2, [r4, #20]
    8a1a:	7ce3      	ldrb	r3, [r4, #19]
    8a1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.conn_upd.timeout =
    8a20:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
		pdu_data_rx->llctrl.conn_update_ind.instant;
    8a24:	7da2      	ldrb	r2, [r4, #22]
    8a26:	7d63      	ldrb	r3, [r4, #21]
    8a28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.conn_upd.instant =
    8a2c:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    8a30:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    8a34:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
	conn->llcp.conn_upd.is_internal = 0;
    8a38:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    8a3c:	f36f 0382 	bfc	r3, #2, #1
    8a40:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
    8a44:	2301      	movs	r3, #1
    8a46:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
	conn->llcp_ack--;
    8a4a:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    8a4e:	3b01      	subs	r3, #1
    8a50:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    8a54:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    8a58:	4293      	cmp	r3, r2
    8a5a:	d007      	beq.n	8a6c <isr_rx_conn_pkt_ctrl+0x12c>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
    8a5c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    8a60:	f003 0307 	and.w	r3, r3, #7
    8a64:	2b04      	cmp	r3, #4
    8a66:	d101      	bne.n	8a6c <isr_rx_conn_pkt_ctrl+0x12c>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    8a68:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
			_radio.conn_curr->procedure_expire = 0;
    8a6c:	f8d6 371c 	ldr.w	r3, [r6, #1820]	; 0x71c
    8a70:	e158      	b.n	8d24 <isr_rx_conn_pkt_ctrl+0x3e4>
		if (!_radio.conn_curr->role ||
    8a72:	4b95      	ldr	r3, [pc, #596]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8a74:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
    8a78:	f995 301d 	ldrsb.w	r3, [r5, #29]
    8a7c:	2b00      	cmp	r3, #0
    8a7e:	f281 8037 	bge.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    8a82:	7a41      	ldrb	r1, [r0, #9]
    8a84:	2001      	movs	r0, #1
    8a86:	f7fb fff9 	bl	4a7c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    8a8a:	2800      	cmp	r0, #0
    8a8c:	f001 8030 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    8a90:	f8b4 3011 	ldrh.w	r3, [r4, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    8a94:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
    8a96:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    8a98:	041b      	lsls	r3, r3, #16
    8a9a:	f101 8040 	bmi.w	9b1e <isr_rx_conn_pkt_ctrl+0x11de>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    8a9e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    8aa2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    8aa6:	429a      	cmp	r2, r3
    8aa8:	d004      	beq.n	8ab4 <isr_rx_conn_pkt_ctrl+0x174>
    8aaa:	f642 011c 	movw	r1, #10268	; 0x281c
    8aae:	4887      	ldr	r0, [pc, #540]	; (8ccc <isr_rx_conn_pkt_ctrl+0x38c>)
    8ab0:	f7f7 fefe 	bl	8b0 <bt_ctlr_assert_handle>
	memcpy(&conn->llcp.chan_map.chm[0],
    8ab4:	2205      	movs	r2, #5
    8ab6:	f104 010c 	add.w	r1, r4, #12
    8aba:	f105 0079 	add.w	r0, r5, #121	; 0x79
    8abe:	f7f7 fd9b 	bl	5f8 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    8ac2:	7c63      	ldrb	r3, [r4, #17]
    8ac4:	7ca2      	ldrb	r2, [r4, #18]
	conn->llcp.chan_map.initiate = 0;
    8ac6:	2000      	movs	r0, #0
		pdu_data_rx->llctrl.chan_map_ind.instant;
    8ac8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    8acc:	f8a5 307e 	strh.w	r3, [r5, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
    8ad0:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
    8ad4:	2302      	movs	r3, #2
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    8ad6:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
    8ada:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    8ade:	3b01      	subs	r3, #1
    8ae0:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
}
    8ae4:	b005      	add	sp, #20
    8ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    8aea:	7a41      	ldrb	r1, [r0, #9]
    8aec:	2002      	movs	r0, #2
    8aee:	f7fb ffc5 	bl	4a7c <pdu_len_cmp>
    8af2:	2800      	cmp	r0, #0
    8af4:	f000 87fc 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		_radio.conn_curr->llcp_terminate.reason_peer =
    8af8:	4b73      	ldr	r3, [pc, #460]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8afa:	7b22      	ldrb	r2, [r4, #12]
    8afc:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
    8b00:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
    8b04:	2000      	movs	r0, #0
	return nack;
    8b06:	e7ed      	b.n	8ae4 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!_radio.conn_curr->role ||
    8b08:	4e6f      	ldr	r6, [pc, #444]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8b0a:	f8d6 771c 	ldr.w	r7, [r6, #1820]	; 0x71c
    8b0e:	f997 301d 	ldrsb.w	r3, [r7, #29]
    8b12:	2b00      	cmp	r3, #0
    8b14:	f280 87ec 	bge.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_REQ,
    8b18:	7a41      	ldrb	r1, [r0, #9]
    8b1a:	2003      	movs	r0, #3
    8b1c:	f7fb ffae 	bl	4a7c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    8b20:	2800      	cmp	r0, #0
    8b22:	f000 87e5 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    8b26:	2208      	movs	r2, #8
    8b28:	f104 0116 	add.w	r1, r4, #22
    8b2c:	f107 0094 	add.w	r0, r7, #148	; 0x94
    8b30:	f7f7 fd62 	bl	5f8 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    8b34:	f8d6 071c 	ldr.w	r0, [r6, #1820]	; 0x71c
    8b38:	2204      	movs	r2, #4
    8b3a:	f104 011e 	add.w	r1, r4, #30
    8b3e:	f500 7089 	add.w	r0, r0, #274	; 0x112
    8b42:	f7f7 fd59 	bl	5f8 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    8b46:	f8d6 371c 	ldr.w	r3, [r6, #1820]	; 0x71c
    8b4a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    8b4e:	f042 0204 	orr.w	r2, r2, #4
    8b52:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    8b56:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    8b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	*rx_enqueue = 1;
    8b5e:	2301      	movs	r3, #1
    8b60:	702b      	strb	r3, [r5, #0]
    8b62:	e7cf      	b.n	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		if (_radio.conn_curr->role ||
    8b64:	4d58      	ldr	r5, [pc, #352]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8b66:	f8d5 671c 	ldr.w	r6, [r5, #1820]	; 0x71c
    8b6a:	f996 301d 	ldrsb.w	r3, [r6, #29]
    8b6e:	2b00      	cmp	r3, #0
    8b70:	f2c0 87be 	blt.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_ENC_RSP,
    8b74:	7a41      	ldrb	r1, [r0, #9]
    8b76:	2004      	movs	r0, #4
    8b78:	f7fb ff80 	bl	4a7c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    8b7c:	2800      	cmp	r0, #0
    8b7e:	f000 87b7 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    8b82:	2208      	movs	r2, #8
    8b84:	f104 010c 	add.w	r1, r4, #12
    8b88:	f106 009c 	add.w	r0, r6, #156	; 0x9c
    8b8c:	f7f7 fd34 	bl	5f8 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    8b90:	f8d5 071c 	ldr.w	r0, [r5, #1820]	; 0x71c
    8b94:	2204      	movs	r2, #4
    8b96:	f104 0114 	add.w	r1, r4, #20
    8b9a:	f500 708b 	add.w	r0, r0, #278	; 0x116
    8b9e:	f7f7 fd2b 	bl	5f8 <memcpy>
		_radio.conn_curr->pause_rx = 1;
    8ba2:	f8d5 271c 	ldr.w	r2, [r5, #1820]	; 0x71c
    8ba6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    8baa:	f043 0304 	orr.w	r3, r3, #4
    8bae:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    8bb2:	e7a7      	b.n	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		LL_ASSERT((_radio.conn_curr->llcp_req ==
    8bb4:	4d44      	ldr	r5, [pc, #272]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8bb6:	f8d5 271c 	ldr.w	r2, [r5, #1820]	; 0x71c
    8bba:	f892 0074 	ldrb.w	r0, [r2, #116]	; 0x74
    8bbe:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
    8bc2:	4288      	cmp	r0, r1
    8bc4:	d008      	beq.n	8bd8 <isr_rx_conn_pkt_ctrl+0x298>
    8bc6:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
    8bca:	2b03      	cmp	r3, #3
    8bcc:	d004      	beq.n	8bd8 <isr_rx_conn_pkt_ctrl+0x298>
    8bce:	f640 3119 	movw	r1, #2841	; 0xb19
    8bd2:	483e      	ldr	r0, [pc, #248]	; (8ccc <isr_rx_conn_pkt_ctrl+0x38c>)
    8bd4:	f7f7 fe6c 	bl	8b0 <bt_ctlr_assert_handle>
		if (_radio.conn_curr->role ||
    8bd8:	f8d5 571c 	ldr.w	r5, [r5, #1820]	; 0x71c
    8bdc:	f995 301d 	ldrsb.w	r3, [r5, #29]
    8be0:	2b00      	cmp	r3, #0
    8be2:	f2c0 8785 	blt.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_REQ,
    8be6:	7a61      	ldrb	r1, [r4, #9]
    8be8:	2005      	movs	r0, #5
    8bea:	f7fb ff47 	bl	4a7c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    8bee:	2800      	cmp	r0, #0
    8bf0:	f000 877e 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		_radio.conn_curr->llcp.encryption.initiate = 0;
    8bf4:	2000      	movs	r0, #0
    8bf6:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    8bfa:	2303      	movs	r3, #3
    8bfc:	e76b      	b.n	8ad6 <isr_rx_conn_pkt_ctrl+0x196>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
    8bfe:	7a41      	ldrb	r1, [r0, #9]
    8c00:	2006      	movs	r0, #6
    8c02:	f7fb ff3b 	bl	4a7c <pdu_len_cmp>
    8c06:	2800      	cmp	r0, #0
    8c08:	f000 8772 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		if (_radio.role == ROLE_SLAVE) {
    8c0c:	4e2e      	ldr	r6, [pc, #184]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8c0e:	7cf3      	ldrb	r3, [r6, #19]
    8c10:	2b03      	cmp	r3, #3
    8c12:	d12c      	bne.n	8c6e <isr_rx_conn_pkt_ctrl+0x32e>
			LL_ASSERT((_radio.conn_curr->llcp_req ==
    8c14:	f8d6 371c 	ldr.w	r3, [r6, #1820]	; 0x71c
    8c18:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
    8c1c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    8c20:	4291      	cmp	r1, r2
    8c22:	d008      	beq.n	8c36 <isr_rx_conn_pkt_ctrl+0x2f6>
    8c24:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
    8c28:	2b03      	cmp	r3, #3
    8c2a:	d004      	beq.n	8c36 <isr_rx_conn_pkt_ctrl+0x2f6>
    8c2c:	f640 3132 	movw	r1, #2866	; 0xb32
    8c30:	4826      	ldr	r0, [pc, #152]	; (8ccc <isr_rx_conn_pkt_ctrl+0x38c>)
    8c32:	f7f7 fe3d 	bl	8b0 <bt_ctlr_assert_handle>
			_radio.conn_curr->llcp.encryption.initiate = 0;
    8c36:	f8d6 371c 	ldr.w	r3, [r6, #1820]	; 0x71c
    8c3a:	2200      	movs	r2, #0
    8c3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    8c40:	2203      	movs	r2, #3
    8c42:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
    8c46:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
    8c4a:	3a01      	subs	r2, #1
    8c4c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		if (_radio.conn_curr->refresh) {
    8c50:	f8d6 271c 	ldr.w	r2, [r6, #1820]	; 0x71c
    8c54:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    8c58:	065f      	lsls	r7, r3, #25
			_radio.conn_curr->refresh = 0;
    8c5a:	bf41      	itttt	mi
    8c5c:	f36f 1386 	bfcmi	r3, #6, #1
    8c60:	f882 30f8 	strbmi.w	r3, [r2, #248]	; 0xf8
			node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    8c64:	2309      	movmi	r3, #9
    8c66:	7123      	strbmi	r3, [r4, #4]
		*rx_enqueue = 1;
    8c68:	2301      	movs	r3, #1
    8c6a:	702b      	strb	r3, [r5, #0]
    8c6c:	e6fe      	b.n	8a6c <isr_rx_conn_pkt_ctrl+0x12c>
			_radio.conn_curr->pause_rx = 0;
    8c6e:	f8d6 271c 	ldr.w	r2, [r6, #1820]	; 0x71c
    8c72:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    8c76:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8c7a:	f36f 03c3 	bfc	r3, #3, #1
    8c7e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
    8c82:	e7e5      	b.n	8c50 <isr_rx_conn_pkt_ctrl+0x310>
		if (!_radio.conn_curr->role ||
    8c84:	4b10      	ldr	r3, [pc, #64]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8c86:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
    8c8a:	f995 301d 	ldrsb.w	r3, [r5, #29]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	f280 872e 	bge.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    8c94:	7a41      	ldrb	r1, [r0, #9]
    8c96:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    8c98:	f7fb fef0 	bl	4a7c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    8c9c:	2800      	cmp	r0, #0
    8c9e:	f000 8727 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    8ca2:	4639      	mov	r1, r7
    8ca4:	4628      	mov	r0, r5
}
    8ca6:	b005      	add	sp, #20
    8ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    8cac:	f7fe b9a0 	b.w	6ff0 <feature_rsp_send>
		if (_radio.conn_curr->role ||
    8cb0:	4b05      	ldr	r3, [pc, #20]	; (8cc8 <isr_rx_conn_pkt_ctrl+0x388>)
    8cb2:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
    8cb6:	f995 301d 	ldrsb.w	r3, [r5, #29]
    8cba:	2b00      	cmp	r3, #0
    8cbc:	f2c0 8718 	blt.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    8cc0:	7a41      	ldrb	r1, [r0, #9]
    8cc2:	200e      	movs	r0, #14
    8cc4:	e7e8      	b.n	8c98 <isr_rx_conn_pkt_ctrl+0x358>
    8cc6:	bf00      	nop
    8cc8:	20000340 	.word	0x20000340
    8ccc:	000109b4 	.word	0x000109b4
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    8cd0:	7a41      	ldrb	r1, [r0, #9]
    8cd2:	2009      	movs	r0, #9
    8cd4:	f7fb fed2 	bl	4a7c <pdu_len_cmp>
    8cd8:	2800      	cmp	r0, #0
    8cda:	f000 8709 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    8cde:	7b23      	ldrb	r3, [r4, #12]
	       (features[1] << 8) | (features[2] << 16);
    8ce0:	7b61      	ldrb	r1, [r4, #13]
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    8ce2:	48b2      	ldr	r0, [pc, #712]	; (8fac <isr_rx_conn_pkt_ctrl+0x66c>)
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    8ce4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    8ce8:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    8cec:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    8cf0:	f043 0310 	orr.w	r3, r3, #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    8cf4:	f8d0 271c 	ldr.w	r2, [r0, #1820]	; 0x71c
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    8cf8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    8cfc:	7ba1      	ldrb	r1, [r4, #14]
    8cfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    8d02:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    8d06:	f3c1 0110 	ubfx	r1, r1, #0, #17
    8d0a:	400b      	ands	r3, r1
    8d0c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
    8d10:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
    8d14:	f043 0320 	orr.w	r3, r3, #32
    8d18:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
		*rx_enqueue = 1;
    8d1c:	2301      	movs	r3, #1
    8d1e:	702b      	strb	r3, [r5, #0]
		_radio.conn_curr->procedure_expire = 0;
    8d20:	f8d0 371c 	ldr.w	r3, [r0, #1820]	; 0x71c
			_radio.conn_curr->procedure_expire = 0;
    8d24:	2000      	movs	r0, #0
    8d26:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
    8d2a:	e6db      	b.n	8ae4 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!_radio.conn_curr->role ||
    8d2c:	4e9f      	ldr	r6, [pc, #636]	; (8fac <isr_rx_conn_pkt_ctrl+0x66c>)
    8d2e:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
    8d32:	f995 301d 	ldrsb.w	r3, [r5, #29]
    8d36:	2b00      	cmp	r3, #0
    8d38:	f280 86da 	bge.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ,
    8d3c:	7a41      	ldrb	r1, [r0, #9]
    8d3e:	200a      	movs	r0, #10
    8d40:	f7fb fe9c 	bl	4a7c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    8d44:	2800      	cmp	r0, #0
    8d46:	f000 86d3 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8d4a:	f206 7064 	addw	r0, r6, #1892	; 0x764
    8d4e:	f7f8 fffe 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    8d52:	4601      	mov	r1, r0
    8d54:	b908      	cbnz	r0, 8d5a <isr_rx_conn_pkt_ctrl+0x41a>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    8d56:	2001      	movs	r0, #1
    8d58:	e6c4      	b.n	8ae4 <isr_rx_conn_pkt_ctrl+0x1a4>
		conn->refresh = 1;
    8d5a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
	conn->enc_rx = 0;
    8d5e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    8d62:	f36f 1304 	bfc	r3, #4, #1
    8d66:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8d6a:	7903      	ldrb	r3, [r0, #4]
    8d6c:	f043 0303 	orr.w	r3, r3, #3
    8d70:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    8d72:	2301      	movs	r3, #1
    8d74:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    8d76:	230b      	movs	r3, #11
    8d78:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    8d7a:	4628      	mov	r0, r5
    8d7c:	e027      	b.n	8dce <isr_rx_conn_pkt_ctrl+0x48e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
    8d7e:	7a41      	ldrb	r1, [r0, #9]
    8d80:	200b      	movs	r0, #11
    8d82:	f7fb fe7b 	bl	4a7c <pdu_len_cmp>
    8d86:	2800      	cmp	r0, #0
    8d88:	f000 86b2 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		nack = pause_enc_rsp_send(_radio.conn_curr, 0);
    8d8c:	4887      	ldr	r0, [pc, #540]	; (8fac <isr_rx_conn_pkt_ctrl+0x66c>)
    8d8e:	f8d0 471c 	ldr.w	r4, [r0, #1820]	; 0x71c
	} else if (!conn->role) {
    8d92:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8d96:	2b00      	cmp	r3, #0
    8d98:	db1c      	blt.n	8dd4 <isr_rx_conn_pkt_ctrl+0x494>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8d9a:	f200 7064 	addw	r0, r0, #1892	; 0x764
    8d9e:	f7f8 ffd6 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    8da2:	4601      	mov	r1, r0
    8da4:	2800      	cmp	r0, #0
    8da6:	d0d6      	beq.n	8d56 <isr_rx_conn_pkt_ctrl+0x416>
		conn->enc_tx = 0;
    8da8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->pause_rx = 1;
    8dac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
	conn->enc_rx = 0;
    8db0:	f043 0304 	orr.w	r3, r3, #4
    8db4:	f36f 1304 	bfc	r3, #4, #1
    8db8:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8dbc:	7903      	ldrb	r3, [r0, #4]
    8dbe:	f043 0303 	orr.w	r3, r3, #3
    8dc2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
    8dc4:	2301      	movs	r3, #1
    8dc6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
    8dc8:	230b      	movs	r3, #11
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    8dca:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_enqueue(conn, node_tx);
    8dcc:	4620      	mov	r0, r4
	ctrl_tx_enqueue(conn, node_tx);
    8dce:	f7fe f8c7 	bl	6f60 <ctrl_tx_enqueue>
    8dd2:	e697      	b.n	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		conn->enc_tx = 0;
    8dd4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
    8dd8:	f36f 1345 	bfc	r3, #5, #1
    8ddc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
    8de0:	e690      	b.n	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    8de2:	7a41      	ldrb	r1, [r0, #9]
    8de4:	200c      	movs	r0, #12
    8de6:	f7fb fe49 	bl	4a7c <pdu_len_cmp>
    8dea:	2800      	cmp	r0, #0
    8dec:	f000 8680 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		nack = version_ind_send(_radio.conn_curr, pdu_data_rx,
    8df0:	486e      	ldr	r0, [pc, #440]	; (8fac <isr_rx_conn_pkt_ctrl+0x66c>)
    8df2:	f8d0 671c 	ldr.w	r6, [r0, #1820]	; 0x71c
	if (!conn->llcp_version.tx) {
    8df6:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    8dfa:	f013 0701 	ands.w	r7, r3, #1
    8dfe:	d150      	bne.n	8ea2 <isr_rx_conn_pkt_ctrl+0x562>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8e00:	f200 7064 	addw	r0, r0, #1892	; 0x764
    8e04:	f7f8 ffa3 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    8e08:	4601      	mov	r1, r0
    8e0a:	2800      	cmp	r0, #0
    8e0c:	d0a3      	beq.n	8d56 <isr_rx_conn_pkt_ctrl+0x416>
		conn->llcp_version.tx = 1;
    8e0e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    8e12:	f043 0301 	orr.w	r3, r3, #1
    8e16:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8e1a:	7903      	ldrb	r3, [r0, #4]
    8e1c:	f043 0303 	orr.w	r3, r3, #3
    8e20:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    8e22:	2306      	movs	r3, #6
    8e24:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    8e26:	230c      	movs	r3, #12
    8e28:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    8e2a:	2309      	movs	r3, #9
    8e2c:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    8e2e:	f06f 030e 	mvn.w	r3, #14
    8e32:	7243      	strb	r3, [r0, #9]
    8e34:	2305      	movs	r3, #5
    8e36:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    8e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8e3c:	72c3      	strb	r3, [r0, #11]
    8e3e:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    8e40:	4630      	mov	r0, r6
    8e42:	f7fe f8bb 	bl	6fbc <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    8e46:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    8e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8e4e:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    8e52:	f005 fd5b 	bl	e90c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8e56:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    8e58:	7047      	strb	r7, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8e5a:	2201      	movs	r2, #1
    8e5c:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    8e60:	f8d6 213c 	ldr.w	r2, [r6, #316]	; 0x13c
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8e64:	7003      	strb	r3, [r0, #0]
    8e66:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    8e68:	b1c2      	cbz	r2, 8e9c <isr_rx_conn_pkt_ctrl+0x55c>
		pdu_data_tx->md = 1;
    8e6a:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    8e6e:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    8e70:	7b23      	ldrb	r3, [r4, #12]
    8e72:	f886 30a9 	strb.w	r3, [r6, #169]	; 0xa9
	conn->llcp_version.company_id = v->company_id;
    8e76:	7ba2      	ldrb	r2, [r4, #14]
    8e78:	7b63      	ldrb	r3, [r4, #13]
    8e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8e7e:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
	conn->llcp_version.sub_version_number = v->sub_version_number;
    8e82:	7be3      	ldrb	r3, [r4, #15]
    8e84:	7c22      	ldrb	r2, [r4, #16]
    8e86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8e8a:	f8a6 30ac 	strh.w	r3, [r6, #172]	; 0xac
	conn->llcp_version.rx = 1;
    8e8e:	f896 30a8 	ldrb.w	r3, [r6, #168]	; 0xa8
    8e92:	f043 0302 	orr.w	r3, r3, #2
    8e96:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
    8e9a:	e633      	b.n	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		pdu_data_tx->md = 0;
    8e9c:	f362 1304 	bfi	r3, r2, #4, #1
    8ea0:	e7e5      	b.n	8e6e <isr_rx_conn_pkt_ctrl+0x52e>
	} else if (!conn->llcp_version.rx) {
    8ea2:	f013 0302 	ands.w	r3, r3, #2
    8ea6:	f47f ae2d 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		conn->procedure_expire = 0;
    8eaa:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		*rx_enqueue = 1;
    8eae:	2301      	movs	r3, #1
    8eb0:	702b      	strb	r3, [r5, #0]
    8eb2:	e7dd      	b.n	8e70 <isr_rx_conn_pkt_ctrl+0x530>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND,
    8eb4:	7a41      	ldrb	r1, [r0, #9]
    8eb6:	200d      	movs	r0, #13
    8eb8:	f7fb fde0 	bl	4a7c <pdu_len_cmp>
    8ebc:	2800      	cmp	r0, #0
    8ebe:	f000 8617 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		_radio.conn_curr->pause_rx = 0;
    8ec2:	4b3a      	ldr	r3, [pc, #232]	; (8fac <isr_rx_conn_pkt_ctrl+0x66c>)
    8ec4:	f8d3 271c 	ldr.w	r2, [r3, #1820]	; 0x71c
    8ec8:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    8ecc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8ed0:	f36f 03c3 	bfc	r3, #3, #1
		_radio.conn_curr->procedure_expire = 0;
    8ed4:	2000      	movs	r0, #0
		_radio.conn_curr->pause_tx = 0;
    8ed6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    8eda:	f8a2 0044 	strh.w	r0, [r2, #68]	; 0x44
		*rx_enqueue = 1;
    8ede:	2301      	movs	r3, #1
    8ee0:	702b      	strb	r3, [r5, #0]
    8ee2:	e5ff      	b.n	8ae4 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
    8ee4:	7a41      	ldrb	r1, [r0, #9]
    8ee6:	200f      	movs	r0, #15
    8ee8:	f7fb fdc8 	bl	4a7c <pdu_len_cmp>
    8eec:	2800      	cmp	r0, #0
    8eee:	f000 85ff 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
    8ef2:	4b2e      	ldr	r3, [pc, #184]	; (8fac <isr_rx_conn_pkt_ctrl+0x66c>)
    8ef4:	f8d3 1790 	ldr.w	r1, [r3, #1936]	; 0x790
    8ef8:	461a      	mov	r2, r3
    8efa:	b151      	cbz	r1, 8f12 <isr_rx_conn_pkt_ctrl+0x5d2>
    8efc:	f8d3 071c 	ldr.w	r0, [r3, #1820]	; 0x71c
    8f00:	4281      	cmp	r1, r0
    8f02:	d006      	beq.n	8f12 <isr_rx_conn_pkt_ctrl+0x5d2>
			nack = reject_ext_ind_send(_radio.conn_curr,
    8f04:	2220      	movs	r2, #32
				nack = reject_ext_ind_send(conn,
    8f06:	210f      	movs	r1, #15
}
    8f08:	b005      	add	sp, #20
    8f0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(_radio.conn_curr,
    8f0e:	f7fe b8d9 	b.w	70c4 <reject_ext_ind_send>
		if (!_radio.conn_curr->role) {
    8f12:	f8d2 071c 	ldr.w	r0, [r2, #1820]	; 0x71c
    8f16:	f990 301d 	ldrsb.w	r3, [r0, #29]
    8f1a:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    8f1e:	2b00      	cmp	r3, #0
    8f20:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    8f24:	f2c0 80a7 	blt.w	9076 <isr_rx_conn_pkt_ctrl+0x736>
			if ((conn->llcp_conn_param.req !=
    8f28:	4299      	cmp	r1, r3
    8f2a:	d009      	beq.n	8f40 <isr_rx_conn_pkt_ctrl+0x600>
			    ((conn->llcp_conn_param.state ==
    8f2c:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
    8f30:	f013 0307 	ands.w	r3, r3, #7
    8f34:	d002      	beq.n	8f3c <isr_rx_conn_pkt_ctrl+0x5fc>
			      LLCP_CPR_STATE_REQ) ||
    8f36:	3b04      	subs	r3, #4
    8f38:	2b01      	cmp	r3, #1
    8f3a:	d801      	bhi.n	8f40 <isr_rx_conn_pkt_ctrl+0x600>
				nack = reject_ext_ind_send(_radio.conn_curr,
    8f3c:	2223      	movs	r2, #35	; 0x23
    8f3e:	e7e2      	b.n	8f06 <isr_rx_conn_pkt_ctrl+0x5c6>
			} else if (((conn->llcp_req != conn->llcp_ack) &&
    8f40:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    8f44:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    8f48:	4299      	cmp	r1, r3
    8f4a:	d003      	beq.n	8f54 <isr_rx_conn_pkt_ctrl+0x614>
    8f4c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
    8f50:	2b03      	cmp	r3, #3
    8f52:	d105      	bne.n	8f60 <isr_rx_conn_pkt_ctrl+0x620>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
    8f54:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
    8f58:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
    8f5c:	4299      	cmp	r1, r3
    8f5e:	d001      	beq.n	8f64 <isr_rx_conn_pkt_ctrl+0x624>
				nack = reject_ext_ind_send(_radio.conn_curr,
    8f60:	222a      	movs	r2, #42	; 0x2a
    8f62:	e7d0      	b.n	8f06 <isr_rx_conn_pkt_ctrl+0x5c6>
				if ((cpr->interval_min < 6) ||
    8f64:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    8f68:	4643      	mov	r3, r8
    8f6a:	2b05      	cmp	r3, #5
    8f6c:	d91b      	bls.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
				    (cpr->interval_max > 3200) ||
    8f6e:	89e7      	ldrh	r7, [r4, #14]
				if ((cpr->interval_min < 6) ||
    8f70:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    8f74:	d817      	bhi.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
				    (cpr->interval_max > 3200) ||
    8f76:	45b8      	cmp	r8, r7
    8f78:	d815      	bhi.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
				    (cpr->latency > 499) ||
    8f7a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
    8f7e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    8f82:	d210      	bcs.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
				    (cpr->timeout < 10) ||
    8f84:	f8b4 e012 	ldrh.w	lr, [r4, #18]
				    (cpr->latency > 499) ||
    8f88:	f1ae 060a 	sub.w	r6, lr, #10
    8f8c:	b2b6      	uxth	r6, r6
    8f8e:	f640 4976 	movw	r9, #3190	; 0xc76
    8f92:	454e      	cmp	r6, r9
    8f94:	d807      	bhi.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
				     ((cpr->latency + 1) *
    8f96:	fb0c 7107 	mla	r1, ip, r7, r7
				    (cpr->timeout > 3200) ||
    8f9a:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    8f9e:	da02      	bge.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
				    (cpr->preferred_periodicity >
    8fa0:	7d21      	ldrb	r1, [r4, #20]
				      cpr->interval_max)) ||
    8fa2:	428f      	cmp	r7, r1
    8fa4:	d204      	bcs.n	8fb0 <isr_rx_conn_pkt_ctrl+0x670>
				nack = reject_ext_ind_send(conn,
    8fa6:	221e      	movs	r2, #30
    8fa8:	e7ad      	b.n	8f06 <isr_rx_conn_pkt_ctrl+0x5c6>
    8faa:	bf00      	nop
    8fac:	20000340 	.word	0x20000340
				conn->llcp_conn_param.interval = cpr->interval_min;
    8fb0:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
    8fb4:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
    8fb8:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
				conn->llcp_conn_param.preferred_periodicity =
    8fbc:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
					cpr->reference_conn_event_count;
    8fc0:	7da6      	ldrb	r6, [r4, #22]
    8fc2:	7d61      	ldrb	r1, [r4, #21]
    8fc4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
    8fc8:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
    8fcc:	7e26      	ldrb	r6, [r4, #24]
    8fce:	7de1      	ldrb	r1, [r4, #23]
    8fd0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    8fd4:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
    8fd8:	7ea6      	ldrb	r6, [r4, #26]
    8fda:	7e61      	ldrb	r1, [r4, #25]
    8fdc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    8fe0:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
    8fe4:	7f26      	ldrb	r6, [r4, #28]
    8fe6:	7ee1      	ldrb	r1, [r4, #27]
    8fe8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    8fec:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
    8ff0:	7fa6      	ldrb	r6, [r4, #30]
    8ff2:	7f61      	ldrb	r1, [r4, #29]
    8ff4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    8ff8:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
    8ffc:	7fe1      	ldrb	r1, [r4, #31]
    8ffe:	f894 6020 	ldrb.w	r6, [r4, #32]
    9002:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    9006:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
    900a:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    900e:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    9012:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    9016:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
				if ((conn->llcp_conn_param.interval !=
    901a:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    901e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    9020:	428c      	cmp	r4, r1
    9022:	d10f      	bne.n	9044 <isr_rx_conn_pkt_ctrl+0x704>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    9024:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    9026:	f240 41e2 	movw	r1, #1250	; 0x4e2
    902a:	4361      	muls	r1, r4
    902c:	f242 7410 	movw	r4, #10000	; 0x2710
    9030:	fb04 130e 	mla	r3, r4, lr, r1
    9034:	3b01      	subs	r3, #1
    9036:	fb93 f3f1 	sdiv	r3, r3, r1
				     conn->latency) ||
    903a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    903c:	b29b      	uxth	r3, r3
    903e:	4299      	cmp	r1, r3
    9040:	f000 8092 	beq.w	9168 <isr_rx_conn_pkt_ctrl+0x828>
					if (conn->pause_tx) {
    9044:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
    9048:	071c      	lsls	r4, r3, #28
    904a:	f140 8087 	bpl.w	915c <isr_rx_conn_pkt_ctrl+0x81c>
						conn->llcp_conn_param.state =
    904e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9052:	2102      	movs	r1, #2
				conn->llcp_conn_param.state =
    9054:	f361 0302 	bfi	r3, r1, #0, #3
    9058:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
    905c:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    9060:	3b01      	subs	r3, #1
    9062:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
    9066:	f8d2 3790 	ldr.w	r3, [r2, #1936]	; 0x790
    906a:	2b00      	cmp	r3, #0
    906c:	f47f ad4a 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
				_radio.conn_upd = conn;
    9070:	f8c2 0790 	str.w	r0, [r2, #1936]	; 0x790
    9074:	e546      	b.n	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
    9076:	4299      	cmp	r1, r3
    9078:	d003      	beq.n	9082 <isr_rx_conn_pkt_ctrl+0x742>
			    _radio.conn_curr->llcp_conn_param.ack) ||
    907a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    907e:	0799      	lsls	r1, r3, #30
    9080:	d17b      	bne.n	917a <isr_rx_conn_pkt_ctrl+0x83a>
			if ((cpr->interval_min < 6) ||
    9082:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    9086:	4643      	mov	r3, r8
    9088:	2b05      	cmp	r3, #5
    908a:	d98c      	bls.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
			    (cpr->interval_max > 3200) ||
    908c:	89e7      	ldrh	r7, [r4, #14]
			if ((cpr->interval_min < 6) ||
    908e:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
    9092:	d888      	bhi.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
			    (cpr->interval_max > 3200) ||
    9094:	45b8      	cmp	r8, r7
    9096:	d886      	bhi.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
			    (cpr->latency > 499) ||
    9098:	f8b4 c010 	ldrh.w	ip, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
    909c:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
    90a0:	d281      	bcs.n	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    90a2:	f8b4 e012 	ldrh.w	lr, [r4, #18]
			    (cpr->latency > 499) ||
    90a6:	f1ae 060a 	sub.w	r6, lr, #10
    90aa:	b2b6      	uxth	r6, r6
    90ac:	f640 4976 	movw	r9, #3190	; 0xc76
    90b0:	454e      	cmp	r6, r9
    90b2:	f63f af78 	bhi.w	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    90b6:	fb0c 7107 	mla	r1, ip, r7, r7
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    90ba:	ebb1 0f8e 	cmp.w	r1, lr, lsl #2
    90be:	f6bf af72 	bge.w	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    90c2:	7d21      	ldrb	r1, [r4, #20]
						    cpr->interval_max)) ||
    90c4:	428f      	cmp	r7, r1
    90c6:	f4ff af6e 	bcc.w	8fa6 <isr_rx_conn_pkt_ctrl+0x666>
			conn->llcp_conn_param.interval = cpr->interval_min;
    90ca:	f8a0 80c4 	strh.w	r8, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    90ce:	f8a0 c0c6 	strh.w	ip, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    90d2:	f8a0 e0c8 	strh.w	lr, [r0, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    90d6:	f880 10ca 	strb.w	r1, [r0, #202]	; 0xca
				cpr->reference_conn_event_count;
    90da:	7da6      	ldrb	r6, [r4, #22]
    90dc:	7d61      	ldrb	r1, [r4, #21]
    90de:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    90e2:	f8a0 10cc 	strh.w	r1, [r0, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    90e6:	7e26      	ldrb	r6, [r4, #24]
    90e8:	7de1      	ldrb	r1, [r4, #23]
    90ea:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    90ee:	f8a0 10ce 	strh.w	r1, [r0, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    90f2:	7ea6      	ldrb	r6, [r4, #26]
    90f4:	7e61      	ldrb	r1, [r4, #25]
    90f6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    90fa:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    90fe:	7f26      	ldrb	r6, [r4, #28]
    9100:	7ee1      	ldrb	r1, [r4, #27]
    9102:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    9106:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    910a:	7fa6      	ldrb	r6, [r4, #30]
    910c:	7f61      	ldrb	r1, [r4, #29]
    910e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    9112:	f8a0 10d4 	strh.w	r1, [r0, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    9116:	7fe1      	ldrb	r1, [r4, #31]
    9118:	f894 6020 	ldrb.w	r6, [r4, #32]
    911c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
    9120:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    9124:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    9128:	f894 4022 	ldrb.w	r4, [r4, #34]	; 0x22
    912c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    9130:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
			if ((conn->llcp_conn_param.interval !=
    9134:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
    9138:	6a41      	ldr	r1, [r0, #36]	; 0x24
    913a:	428c      	cmp	r4, r1
    913c:	d10e      	bne.n	915c <isr_rx_conn_pkt_ctrl+0x81c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
    913e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    9140:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9144:	4361      	muls	r1, r4
    9146:	f242 7410 	movw	r4, #10000	; 0x2710
    914a:	fb04 130e 	mla	r3, r4, lr, r1
    914e:	3b01      	subs	r3, #1
    9150:	fb93 f3f1 	sdiv	r3, r3, r1
			    (conn->llcp_conn_param.latency != conn->latency) ||
    9154:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
    9156:	b29b      	uxth	r3, r3
    9158:	4299      	cmp	r1, r3
    915a:	d005      	beq.n	9168 <isr_rx_conn_pkt_ctrl+0x828>
				*rx_enqueue = 1;
    915c:	2301      	movs	r3, #1
    915e:	702b      	strb	r3, [r5, #0]
				conn->llcp_conn_param.state =
    9160:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    9164:	2103      	movs	r1, #3
    9166:	e775      	b.n	9054 <isr_rx_conn_pkt_ctrl+0x714>
				conn->llcp_conn_param.status = 0;
    9168:	2300      	movs	r3, #0
    916a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
    916e:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
				conn->llcp_conn_param.state =
    9172:	2101      	movs	r1, #1
    9174:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    9178:	e76c      	b.n	9054 <isr_rx_conn_pkt_ctrl+0x714>
			LL_ASSERT(0);
    917a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    917e:	48ca      	ldr	r0, [pc, #808]	; (94a8 <isr_rx_conn_pkt_ctrl+0xb68>)
    9180:	f7f7 fb96 	bl	8b0 <bt_ctlr_assert_handle>
    9184:	e4be      	b.n	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		if (_radio.conn_curr->role ||
    9186:	4bc9      	ldr	r3, [pc, #804]	; (94ac <isr_rx_conn_pkt_ctrl+0xb6c>)
    9188:	f8d3 571c 	ldr.w	r5, [r3, #1820]	; 0x71c
    918c:	f995 301d 	ldrsb.w	r3, [r5, #29]
    9190:	2b00      	cmp	r3, #0
    9192:	f2c0 84ad 	blt.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP,
    9196:	7a41      	ldrb	r1, [r0, #9]
    9198:	2010      	movs	r0, #16
    919a:	f7fb fc6f 	bl	4a7c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    919e:	2800      	cmp	r0, #0
    91a0:	f000 84a6 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		if (!_radio.conn_curr->role &&
    91a4:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    91a8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    91ac:	429a      	cmp	r2, r3
    91ae:	f43f aca9 	beq.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		    (_radio.conn_curr->llcp_conn_param.state ==
    91b2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
		     _radio.conn_curr->llcp_conn_param.ack) &&
    91b6:	f003 0307 	and.w	r3, r3, #7
    91ba:	2b04      	cmp	r3, #4
    91bc:	f47f aca2 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
			if ((cpr->interval_min < 6) ||
    91c0:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
    91c4:	fa1f f28e 	uxth.w	r2, lr
    91c8:	2a05      	cmp	r2, #5
    91ca:	d91b      	bls.n	9204 <isr_rx_conn_pkt_ctrl+0x8c4>
			    (cpr->interval_max > 3200) ||
    91cc:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
    91ce:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    91d2:	d817      	bhi.n	9204 <isr_rx_conn_pkt_ctrl+0x8c4>
			    (cpr->interval_max > 3200) ||
    91d4:	429a      	cmp	r2, r3
    91d6:	d815      	bhi.n	9204 <isr_rx_conn_pkt_ctrl+0x8c4>
			    (cpr->latency > 499) ||
    91d8:	8a27      	ldrh	r7, [r4, #16]
    91da:	b2ba      	uxth	r2, r7
			    (cpr->interval_min > cpr->interval_max) ||
    91dc:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    91e0:	d210      	bcs.n	9204 <isr_rx_conn_pkt_ctrl+0x8c4>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    91e2:	8a66      	ldrh	r6, [r4, #18]
    91e4:	b2b0      	uxth	r0, r6
			    (cpr->latency > 499) ||
    91e6:	f1a0 010a 	sub.w	r1, r0, #10
    91ea:	b289      	uxth	r1, r1
    91ec:	f640 4c76 	movw	ip, #3190	; 0xc76
    91f0:	4561      	cmp	r1, ip
    91f2:	d807      	bhi.n	9204 <isr_rx_conn_pkt_ctrl+0x8c4>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
    91f4:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
    91f8:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
    91fc:	da02      	bge.n	9204 <isr_rx_conn_pkt_ctrl+0x8c4>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
    91fe:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
    9200:	4293      	cmp	r3, r2
    9202:	d203      	bcs.n	920c <isr_rx_conn_pkt_ctrl+0x8cc>
				nack = reject_ext_ind_send(conn,
    9204:	221e      	movs	r2, #30
    9206:	2110      	movs	r1, #16
    9208:	4628      	mov	r0, r5
    920a:	e67d      	b.n	8f08 <isr_rx_conn_pkt_ctrl+0x5c8>
			_radio.conn_curr->procedure_expire = 0;
    920c:	2000      	movs	r0, #0
    920e:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
    9212:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
    9216:	f8a5 70c6 	strh.w	r7, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
    921a:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
			conn->llcp_conn_param.preferred_periodicity =
    921e:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
    9222:	7da2      	ldrb	r2, [r4, #22]
    9224:	7d63      	ldrb	r3, [r4, #21]
    9226:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
    922a:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
    922e:	7e22      	ldrb	r2, [r4, #24]
    9230:	7de3      	ldrb	r3, [r4, #23]
    9232:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9236:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
    923a:	7ea2      	ldrb	r2, [r4, #26]
    923c:	7e63      	ldrb	r3, [r4, #25]
    923e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9242:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
    9246:	7f22      	ldrb	r2, [r4, #28]
    9248:	7ee3      	ldrb	r3, [r4, #27]
    924a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    924e:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
    9252:	7fa2      	ldrb	r2, [r4, #30]
    9254:	7f63      	ldrb	r3, [r4, #29]
    9256:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    925a:	f8a5 30d4 	strh.w	r3, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
    925e:	f894 2020 	ldrb.w	r2, [r4, #32]
    9262:	7fe3      	ldrb	r3, [r4, #31]
    9264:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9268:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
    926c:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    9270:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    9274:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9278:	f8a5 30d8 	strh.w	r3, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
    927c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    9280:	2201      	movs	r2, #1
    9282:	f362 0302 	bfi	r3, r2, #0, #3
    9286:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
    928a:	e42b      	b.n	8ae4 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    928c:	7a41      	ldrb	r1, [r0, #9]
    928e:	2011      	movs	r0, #17
    9290:	f7fb fbf4 	bl	4a7c <pdu_len_cmp>
    9294:	2800      	cmp	r0, #0
    9296:	f000 842b 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
	} else if (_radio.conn_curr->llcp_phy.ack !=
    929a:	4f84      	ldr	r7, [pc, #528]	; (94ac <isr_rx_conn_pkt_ctrl+0xb6c>)
    929c:	f8d7 671c 	ldr.w	r6, [r7, #1820]	; 0x71c
    92a0:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
    92a4:	f896 10f4 	ldrb.w	r1, [r6, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
    92a8:	428b      	cmp	r3, r1
    92aa:	7b23      	ldrb	r3, [r4, #12]
    92ac:	d027      	beq.n	92fe <isr_rx_conn_pkt_ctrl+0x9be>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
    92ae:	2b16      	cmp	r3, #22
    92b0:	f47f ac28 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		if (rej_ext_ind->error_code != 0x23) {
    92b4:	7b62      	ldrb	r2, [r4, #13]
    92b6:	2a23      	cmp	r2, #35	; 0x23
    92b8:	d00e      	beq.n	92d8 <isr_rx_conn_pkt_ctrl+0x998>
				_radio.conn_curr->phy_tx;
    92ba:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			_radio.conn_curr->llcp_phy.ack =
    92be:	f886 10f5 	strb.w	r1, [r6, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
    92c2:	f896 1039 	ldrb.w	r1, [r6, #57]	; 0x39
    92c6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    92ca:	f363 0102 	bfi	r1, r3, #0, #3
			_radio.conn_curr->procedure_expire = 0;
    92ce:	2300      	movs	r3, #0
			_radio.conn_curr->phy_tx_time =
    92d0:	f886 1039 	strb.w	r1, [r6, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
    92d4:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
    92d8:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
    92dc:	079b      	lsls	r3, r3, #30
    92de:	f57f ac11 	bpl.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    92e2:	230c      	movs	r3, #12
		p->status = rej_ext_ind->error_code;
    92e4:	72e2      	strb	r2, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    92e6:	7123      	strb	r3, [r4, #4]
		p->tx = _radio.conn_curr->phy_tx;
    92e8:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    92ec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    92f0:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
    92f2:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    92f6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    92fa:	7363      	strb	r3, [r4, #13]
    92fc:	e42f      	b.n	8b5e <isr_rx_conn_pkt_ctrl+0x21e>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
    92fe:	f896 10c1 	ldrb.w	r1, [r6, #193]	; 0xc1
    9302:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
    9306:	4291      	cmp	r1, r2
    9308:	d075      	beq.n	93f6 <isr_rx_conn_pkt_ctrl+0xab6>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
    930a:	2b0f      	cmp	r3, #15
    930c:	f47f abfa 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
    9310:	f996 301d 	ldrsb.w	r3, [r6, #29]
    9314:	2b00      	cmp	r3, #0
    9316:	7b63      	ldrb	r3, [r4, #13]
    9318:	db3a      	blt.n	9390 <isr_rx_conn_pkt_ctrl+0xa50>
    931a:	2b1a      	cmp	r3, #26
    931c:	d138      	bne.n	9390 <isr_rx_conn_pkt_ctrl+0xa50>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    931e:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
    9322:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    9326:	429a      	cmp	r2, r3
    9328:	d004      	beq.n	9334 <isr_rx_conn_pkt_ctrl+0x9f4>
    932a:	f640 01cf 	movw	r1, #2255	; 0x8cf
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    932e:	485e      	ldr	r0, [pc, #376]	; (94a8 <isr_rx_conn_pkt_ctrl+0xb68>)
    9330:	f7f7 fabe 	bl	8b0 <bt_ctlr_assert_handle>
				conn->llcp_conn_param.state =
    9334:	f896 30c2 	ldrb.w	r3, [r6, #194]	; 0xc2
    9338:	2205      	movs	r2, #5
    933a:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp.conn_upd.interval =
    933e:	f8b6 20c4 	ldrh.w	r2, [r6, #196]	; 0xc4
    9342:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
				conn->llcp.conn_upd.latency =
    9346:	f8b6 20c6 	ldrh.w	r2, [r6, #198]	; 0xc6
    934a:	f8a6 207c 	strh.w	r2, [r6, #124]	; 0x7c
				conn->llcp.conn_upd.timeout =
    934e:	f8b6 20c8 	ldrh.w	r2, [r6, #200]	; 0xc8
    9352:	f8a6 207e 	strh.w	r2, [r6, #126]	; 0x7e
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9356:	f896 2078 	ldrb.w	r2, [r6, #120]	; 0x78
				conn->llcp_conn_param.state =
    935a:	f886 30c2 	strb.w	r3, [r6, #194]	; 0xc2
				conn->llcp.conn_upd.win_size = 1;
    935e:	2101      	movs	r1, #1
					!conn->llcp_conn_param.cmd;
    9360:	f083 0308 	eor.w	r3, r3, #8
    9364:	f3c3 03c0 	ubfx	r3, r3, #3, #1
				conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    9368:	f361 0201 	bfi	r2, r1, #0, #2
				conn->llcp.conn_upd.is_internal =
    936c:	f363 0282 	bfi	r2, r3, #2, #1
				conn->llcp_ack--;
    9370:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
				conn->llcp.conn_upd.win_size = 1;
    9374:	f886 1088 	strb.w	r1, [r6, #136]	; 0x88
				conn->llcp.conn_upd.win_offset_us = 0;
    9378:	2000      	movs	r0, #0
				conn->llcp_ack--;
    937a:	3b01      	subs	r3, #1
				conn->llcp.conn_upd.win_offset_us = 0;
    937c:	f8c6 0084 	str.w	r0, [r6, #132]	; 0x84
				conn->llcp.conn_upd.is_internal =
    9380:	f886 2078 	strb.w	r2, [r6, #120]	; 0x78
				conn->llcp_type = LLCP_CONN_UPD;
    9384:	f886 1076 	strb.w	r1, [r6, #118]	; 0x76
				conn->llcp_ack--;
    9388:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
				break;
    938c:	f7ff bbaa 	b.w	8ae4 <isr_rx_conn_pkt_ctrl+0x1a4>
	else if (rej_ext_ind->error_code != 0x23) {
    9390:	2b23      	cmp	r3, #35	; 0x23
    9392:	d018      	beq.n	93c6 <isr_rx_conn_pkt_ctrl+0xa86>
		LL_ASSERT(_radio.conn_upd == conn);
    9394:	f8d7 3790 	ldr.w	r3, [r7, #1936]	; 0x790
    9398:	429e      	cmp	r6, r3
    939a:	d004      	beq.n	93a6 <isr_rx_conn_pkt_ctrl+0xa66>
    939c:	f640 01e6 	movw	r1, #2278	; 0x8e6
    93a0:	4841      	ldr	r0, [pc, #260]	; (94a8 <isr_rx_conn_pkt_ctrl+0xb68>)
    93a2:	f7f7 fa85 	bl	8b0 <bt_ctlr_assert_handle>
		_radio.conn_upd = NULL;
    93a6:	2300      	movs	r3, #0
    93a8:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
		conn->procedure_expire = 0;
    93ac:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		if (conn->role) {
    93b0:	f996 301d 	ldrsb.w	r3, [r6, #29]
		conn->llcp_conn_param.ack =
    93b4:	f896 20c0 	ldrb.w	r2, [r6, #192]	; 0xc0
    93b8:	f886 20c1 	strb.w	r2, [r6, #193]	; 0xc1
		if (conn->role) {
    93bc:	2b00      	cmp	r3, #0
			conn->slave.ticks_to_offset =
    93be:	bfbc      	itt	lt
    93c0:	f8d6 30e4 	ldrlt.w	r3, [r6, #228]	; 0xe4
    93c4:	6733      	strlt	r3, [r6, #112]	; 0x70
	if (!conn->llcp_conn_param.cmd) {
    93c6:	f896 30c2 	ldrb.w	r3, [r6, #194]	; 0xc2
    93ca:	071f      	lsls	r7, r3, #28
    93cc:	f57f ab9a 	bpl.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
	node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    93d0:	2308      	movs	r3, #8
    93d2:	7123      	strb	r3, [r4, #4]
	cp->status = rej_ext_ind->error_code;
    93d4:	7b63      	ldrb	r3, [r4, #13]
    93d6:	72e3      	strb	r3, [r4, #11]
	cp->latency = conn->latency;
    93d8:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
	cp->interval = conn->conn_interval;
    93da:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	cp->latency = conn->latency;
    93dc:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
    93de:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
	cp->interval = conn->conn_interval;
    93e0:	81a3      	strh	r3, [r4, #12]
	cp->timeout = conn->supervision_reload *
    93e2:	435a      	muls	r2, r3
		      conn->conn_interval * 125 / 1000;
    93e4:	237d      	movs	r3, #125	; 0x7d
    93e6:	4353      	muls	r3, r2
	cp->timeout = conn->supervision_reload *
    93e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    93ec:	fb93 f3f2 	sdiv	r3, r3, r2
    93f0:	8223      	strh	r3, [r4, #16]
    93f2:	f7ff bbb4 	b.w	8b5e <isr_rx_conn_pkt_ctrl+0x21e>
		   _radio.conn_curr->llcp_length.req) {
    93f6:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
    93fa:	f896 10e9 	ldrb.w	r1, [r6, #233]	; 0xe9
    93fe:	4291      	cmp	r1, r2
    9400:	d01a      	beq.n	9438 <isr_rx_conn_pkt_ctrl+0xaf8>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    9402:	2b14      	cmp	r3, #20
    9404:	f47f ab7e 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		conn->pause_tx = 0;
    9408:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
		conn->llcp_length.ack = conn->llcp_length.req;
    940c:	f886 20e9 	strb.w	r2, [r6, #233]	; 0xe9
		conn->procedure_expire = 0;
    9410:	2000      	movs	r0, #0
		conn->pause_tx = 0;
    9412:	f360 03c3 	bfi	r3, r0, #3, #1
    9416:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    941a:	2309      	movs	r3, #9
		conn->procedure_expire = 0;
    941c:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
    9420:	7263      	strb	r3, [r4, #9]
		pdu_data_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    9422:	2315      	movs	r3, #21
    9424:	72e3      	strb	r3, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
    9426:	8e33      	ldrh	r3, [r6, #48]	; 0x30
    9428:	81a3      	strh	r3, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
    942a:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    942c:	8223      	strh	r3, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
    942e:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
    9430:	81e3      	strh	r3, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
    9432:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
    9434:	8263      	strh	r3, [r4, #18]
    9436:	e552      	b.n	8ede <isr_rx_conn_pkt_ctrl+0x59e>
		switch (rej_ext_ind->reject_opcode) {
    9438:	2b03      	cmp	r3, #3
    943a:	f47f ab63 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
			_radio.conn_curr->pause_rx = 0;
    943e:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
    9442:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    9446:	f36f 03c3 	bfc	r3, #3, #1
			_radio.conn_curr->procedure_expire = 0;
    944a:	2000      	movs	r0, #0
			_radio.conn_curr->pause_tx = 0;
    944c:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
    9450:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
			pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    9454:	230d      	movs	r3, #13
    9456:	72e3      	strb	r3, [r4, #11]
			pdu_rx->llctrl.reject_ind.error_code =
    9458:	7b63      	ldrb	r3, [r4, #13]
    945a:	7323      	strb	r3, [r4, #12]
    945c:	e53f      	b.n	8ede <isr_rx_conn_pkt_ctrl+0x59e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ,
    945e:	7a41      	ldrb	r1, [r0, #9]
    9460:	2012      	movs	r0, #18
    9462:	f7fb fb0b 	bl	4a7c <pdu_len_cmp>
    9466:	2800      	cmp	r0, #0
    9468:	f000 8342 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		nack = ping_resp_send(_radio.conn_curr);
    946c:	480f      	ldr	r0, [pc, #60]	; (94ac <isr_rx_conn_pkt_ctrl+0xb6c>)
    946e:	f8d0 471c 	ldr.w	r4, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9472:	f200 7064 	addw	r0, r0, #1892	; 0x764
    9476:	f7f8 fc6a 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    947a:	4601      	mov	r1, r0
    947c:	2800      	cmp	r0, #0
    947e:	f43f ac6a 	beq.w	8d56 <isr_rx_conn_pkt_ctrl+0x416>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9482:	7903      	ldrb	r3, [r0, #4]
    9484:	f043 0303 	orr.w	r3, r3, #3
    9488:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
    948a:	2301      	movs	r3, #1
    948c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    948e:	2313      	movs	r3, #19
    9490:	e49b      	b.n	8dca <isr_rx_conn_pkt_ctrl+0x48a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP,
    9492:	7a41      	ldrb	r1, [r0, #9]
    9494:	2013      	movs	r0, #19
    9496:	f7fb faf1 	bl	4a7c <pdu_len_cmp>
    949a:	2800      	cmp	r0, #0
    949c:	f000 8328 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		_radio.conn_curr->procedure_expire = 0;
    94a0:	4b02      	ldr	r3, [pc, #8]	; (94ac <isr_rx_conn_pkt_ctrl+0xb6c>)
    94a2:	f8d3 371c 	ldr.w	r3, [r3, #1820]	; 0x71c
    94a6:	e43d      	b.n	8d24 <isr_rx_conn_pkt_ctrl+0x3e4>
    94a8:	000109b4 	.word	0x000109b4
    94ac:	20000340 	.word	0x20000340
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    94b0:	7a41      	ldrb	r1, [r0, #9]
    94b2:	2007      	movs	r0, #7
    94b4:	f7fb fae2 	bl	4a7c <pdu_len_cmp>
    94b8:	2800      	cmp	r0, #0
    94ba:	f000 8319 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		} else if (_radio.conn_curr->llcp_conn_param.ack !=
    94be:	4fc2      	ldr	r7, [pc, #776]	; (97c8 <isr_rx_conn_pkt_ctrl+0xe88>)
    94c0:	f8d7 671c 	ldr.w	r6, [r7, #1820]	; 0x71c
    94c4:	f896 20c1 	ldrb.w	r2, [r6, #193]	; 0xc1
    94c8:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
    94cc:	429a      	cmp	r2, r3
    94ce:	d03c      	beq.n	954a <isr_rx_conn_pkt_ctrl+0xc0a>
			conn->llcp_conn_param.disabled = 1;
    94d0:	f896 30c2 	ldrb.w	r3, [r6, #194]	; 0xc2
    94d4:	f043 0310 	orr.w	r3, r3, #16
    94d8:	f886 30c2 	strb.w	r3, [r6, #194]	; 0xc2
			if (!conn->role) {
    94dc:	f996 301d 	ldrsb.w	r3, [r6, #29]
    94e0:	2b00      	cmp	r3, #0
    94e2:	db09      	blt.n	94f8 <isr_rx_conn_pkt_ctrl+0xbb8>
				LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    94e4:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
    94e8:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    94ec:	429a      	cmp	r2, r3
    94ee:	f43f af21 	beq.w	9334 <isr_rx_conn_pkt_ctrl+0x9f4>
    94f2:	f640 41ec 	movw	r1, #3308	; 0xcec
    94f6:	e71a      	b.n	932e <isr_rx_conn_pkt_ctrl+0x9ee>
			LL_ASSERT(_radio.conn_upd == conn);
    94f8:	f8d7 3790 	ldr.w	r3, [r7, #1936]	; 0x790
    94fc:	429e      	cmp	r6, r3
    94fe:	d004      	beq.n	950a <isr_rx_conn_pkt_ctrl+0xbca>
    9500:	f640 5103 	movw	r1, #3331	; 0xd03
    9504:	48b1      	ldr	r0, [pc, #708]	; (97cc <isr_rx_conn_pkt_ctrl+0xe8c>)
    9506:	f7f7 f9d3 	bl	8b0 <bt_ctlr_assert_handle>
			_radio.conn_upd = NULL;
    950a:	2300      	movs	r3, #0
    950c:	f8c7 3790 	str.w	r3, [r7, #1936]	; 0x790
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    9510:	f896 30c0 	ldrb.w	r3, [r6, #192]	; 0xc0
    9514:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
			if (!conn->llcp_conn_param.cmd) {
    9518:	f896 30c2 	ldrb.w	r3, [r6, #194]	; 0xc2
    951c:	0718      	lsls	r0, r3, #28
    951e:	f57f aaf1 	bpl.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    9522:	2308      	movs	r3, #8
    9524:	7123      	strb	r3, [r4, #4]
			cp->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    9526:	231a      	movs	r3, #26
    9528:	72e3      	strb	r3, [r4, #11]
			cp->latency = conn->latency;
    952a:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			cp->interval = conn->conn_interval;
    952c:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
			cp->latency = conn->latency;
    952e:	81e2      	strh	r2, [r4, #14]
			cp->timeout = conn->supervision_reload *
    9530:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
			cp->interval = conn->conn_interval;
    9532:	81a3      	strh	r3, [r4, #12]
			cp->timeout = conn->supervision_reload *
    9534:	435a      	muls	r2, r3
				      conn->conn_interval * 125 / 1000;
    9536:	237d      	movs	r3, #125	; 0x7d
    9538:	4353      	muls	r3, r2
			cp->timeout = conn->supervision_reload *
    953a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    953e:	fb93 f3f2 	sdiv	r3, r3, r2
    9542:	8223      	strh	r3, [r4, #16]
				*rx_enqueue = 1;
    9544:	2301      	movs	r3, #1
    9546:	702b      	strb	r3, [r5, #0]
				break;
    9548:	e032      	b.n	95b0 <isr_rx_conn_pkt_ctrl+0xc70>
		} else if (_radio.conn_curr->llcp_length.req !=
    954a:	f896 30e8 	ldrb.w	r3, [r6, #232]	; 0xe8
    954e:	f896 20e9 	ldrb.w	r2, [r6, #233]	; 0xe9
    9552:	429a      	cmp	r2, r3
    9554:	d008      	beq.n	9568 <isr_rx_conn_pkt_ctrl+0xc28>
			_radio.conn_curr->llcp_length.ack =
    9556:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
    955a:	f896 30f8 	ldrb.w	r3, [r6, #248]	; 0xf8
    955e:	f36f 03c3 	bfc	r3, #3, #1
    9562:	f886 30f8 	strb.w	r3, [r6, #248]	; 0xf8
    9566:	e7ed      	b.n	9544 <isr_rx_conn_pkt_ctrl+0xc04>
		} else if (_radio.conn_curr->llcp_phy.req !=
    9568:	f896 30f4 	ldrb.w	r3, [r6, #244]	; 0xf4
    956c:	f896 20f5 	ldrb.w	r2, [r6, #245]	; 0xf5
    9570:	429a      	cmp	r2, r3
    9572:	d01a      	beq.n	95aa <isr_rx_conn_pkt_ctrl+0xc6a>
			_radio.conn_curr->llcp_phy.ack =
    9574:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
				_radio.conn_curr->phy_tx;
    9578:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
			_radio.conn_curr->phy_tx_time =
    957c:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
				_radio.conn_curr->phy_tx;
    9580:	f3c3 03c2 	ubfx	r3, r3, #3, #3
			_radio.conn_curr->phy_tx_time =
    9584:	f363 0202 	bfi	r2, r3, #0, #3
    9588:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
    958c:	f896 20f7 	ldrb.w	r2, [r6, #247]	; 0xf7
    9590:	0791      	lsls	r1, r2, #30
    9592:	d50d      	bpl.n	95b0 <isr_rx_conn_pkt_ctrl+0xc70>
				node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    9594:	220c      	movs	r2, #12
    9596:	7122      	strb	r2, [r4, #4]
				p->status = 0;
    9598:	2200      	movs	r2, #0
    959a:	72e2      	strb	r2, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
    959c:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
    959e:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    95a2:	f3c3 0302 	ubfx	r3, r3, #0, #3
    95a6:	7363      	strb	r3, [r4, #13]
    95a8:	e7cc      	b.n	9544 <isr_rx_conn_pkt_ctrl+0xc04>
			switch (llctrl->unknown_rsp.type) {
    95aa:	7b23      	ldrb	r3, [r4, #12]
    95ac:	2b12      	cmp	r3, #18
    95ae:	d1c9      	bne.n	9544 <isr_rx_conn_pkt_ctrl+0xc04>
		_radio.conn_curr->procedure_expire = 0;
    95b0:	f8d7 371c 	ldr.w	r3, [r7, #1820]	; 0x71c
    95b4:	f7ff bbb6 	b.w	8d24 <isr_rx_conn_pkt_ctrl+0x3e4>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
    95b8:	7a41      	ldrb	r1, [r0, #9]
    95ba:	2014      	movs	r0, #20
    95bc:	f7fb fa5e 	bl	4a7c <pdu_len_cmp>
    95c0:	2800      	cmp	r0, #0
    95c2:	f000 8295 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
	if (pdu_data_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
    95c6:	2e14      	cmp	r6, #20
    95c8:	d12b      	bne.n	9622 <isr_rx_conn_pkt_ctrl+0xce2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    95ca:	4881      	ldr	r0, [pc, #516]	; (97d0 <isr_rx_conn_pkt_ctrl+0xe90>)
    95cc:	f7f8 fbbf 	bl	1d4e <mem_acquire>
		if (!node_tx) {
    95d0:	4606      	mov	r6, r0
    95d2:	2800      	cmp	r0, #0
    95d4:	f43f abbf 	beq.w	8d56 <isr_rx_conn_pkt_ctrl+0x416>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    95d8:	487b      	ldr	r0, [pc, #492]	; (97c8 <isr_rx_conn_pkt_ctrl+0xe88>)
    95da:	f8d0 171c 	ldr.w	r1, [r0, #1820]	; 0x71c
	if (/* Local idle, and Peer request then complete the Peer procedure
    95de:	f891 70e9 	ldrb.w	r7, [r1, #233]	; 0xe9
	    ((_radio.conn_curr->llcp_length.req ==
    95e2:	f891 e0e8 	ldrb.w	lr, [r1, #232]	; 0xe8
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    95e6:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
    95e8:	9300      	str	r3, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
    95ea:	4577      	cmp	r7, lr
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    95ec:	8dcb      	ldrh	r3, [r1, #46]	; 0x2e
    95ee:	9301      	str	r3, [sp, #4]
	eff_tx_time = _radio.conn_curr->max_tx_time;
    95f0:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
	eff_rx_time = _radio.conn_curr->max_rx_time;
    95f2:	8ecb      	ldrh	r3, [r1, #54]	; 0x36
    95f4:	7ae7      	ldrb	r7, [r4, #11]
    95f6:	4682      	mov	sl, r0
	if (/* Local idle, and Peer request then complete the Peer procedure
    95f8:	d115      	bne.n	9626 <isr_rx_conn_pkt_ctrl+0xce6>
	      _radio.conn_curr->llcp_length.ack) &&
    95fa:	2f14      	cmp	r7, #20
    95fc:	d01f      	beq.n	963e <isr_rx_conn_pkt_ctrl+0xcfe>
		LL_ASSERT(pdu_data_rx->llctrl.opcode ==
    95fe:	2f15      	cmp	r7, #21
    9600:	f000 829b 	beq.w	9b3a <isr_rx_conn_pkt_ctrl+0x11fa>
    9604:	f640 215f 	movw	r1, #2655	; 0xa5f
    9608:	4870      	ldr	r0, [pc, #448]	; (97cc <isr_rx_conn_pkt_ctrl+0xe8c>)
    960a:	9203      	str	r2, [sp, #12]
    960c:	9302      	str	r3, [sp, #8]
    960e:	f7f7 f94f 	bl	8b0 <bt_ctlr_assert_handle>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    9612:	9a03      	ldr	r2, [sp, #12]
	eff_rx_time = _radio.conn_curr->max_rx_time;
    9614:	9b02      	ldr	r3, [sp, #8]
	eff_tx_time = _radio.conn_curr->max_tx_time;
    9616:	4690      	mov	r8, r2
	eff_rx_time = _radio.conn_curr->max_rx_time;
    9618:	4699      	mov	r9, r3
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    961a:	9f01      	ldr	r7, [sp, #4]
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    961c:	f8dd b000 	ldr.w	fp, [sp]
    9620:	e062      	b.n	96e8 <isr_rx_conn_pkt_ctrl+0xda8>
	struct radio_pdu_node_tx *node_tx = NULL;
    9622:	2600      	movs	r6, #0
    9624:	e7d8      	b.n	95d8 <isr_rx_conn_pkt_ctrl+0xc98>
		 LLCP_LENGTH_STATE_REQ) ||
    9626:	f891 00ea 	ldrb.w	r0, [r1, #234]	; 0xea
    962a:	f000 0003 	and.w	r0, r0, #3
	      _radio.conn_curr->llcp_length.ack) &&
    962e:	2801      	cmp	r0, #1
    9630:	d9e3      	bls.n	95fa <isr_rx_conn_pkt_ctrl+0xcba>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
    9632:	2802      	cmp	r0, #2
    9634:	d1e3      	bne.n	95fe <isr_rx_conn_pkt_ctrl+0xcbe>
		LLCP_LENGTH_STATE_RSP_WAIT) &&
    9636:	f1a7 0014 	sub.w	r0, r7, #20
    963a:	2801      	cmp	r0, #1
    963c:	d8df      	bhi.n	95fe <isr_rx_conn_pkt_ctrl+0xcbe>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    963e:	89a0      	ldrh	r0, [r4, #12]
    9640:	281a      	cmp	r0, #26
    9642:	d968      	bls.n	9716 <isr_rx_conn_pkt_ctrl+0xdd6>
			eff_tx_octets = min(lr->max_rx_octets,
    9644:	8d8f      	ldrh	r7, [r1, #44]	; 0x2c
    9646:	4287      	cmp	r7, r0
    9648:	bf28      	it	cs
    964a:	4607      	movcs	r7, r0
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
    964c:	8a20      	ldrh	r0, [r4, #16]
			eff_rx_octets = min(lr->max_tx_octets,
    964e:	281b      	cmp	r0, #27
    9650:	9800      	ldr	r0, [sp, #0]
    9652:	bf38      	it	cc
    9654:	4683      	movcc	fp, r0
		if (lr->max_rx_time >=
    9656:	89e0      	ldrh	r0, [r4, #14]
			eff_rx_octets = min(lr->max_tx_octets,
    9658:	bf28      	it	cs
    965a:	f04f 0b1b 	movcs.w	fp, #27
		if (lr->max_rx_time >=
    965e:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
    9662:	d35a      	bcc.n	971a <isr_rx_conn_pkt_ctrl+0xdda>
			eff_tx_time = min(lr->max_rx_time,
    9664:	f8b1 8032 	ldrh.w	r8, [r1, #50]	; 0x32
    9668:	4580      	cmp	r8, r0
    966a:	bf28      	it	cs
    966c:	4680      	movcs	r8, r0
		if (lr->max_tx_time >=
    966e:	f8b4 9012 	ldrh.w	r9, [r4, #18]
    9672:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
    9676:	d352      	bcc.n	971e <isr_rx_conn_pkt_ctrl+0xdde>
			eff_rx_time = min(lr->max_tx_time,
    9678:	f5b9 6f29 	cmp.w	r9, #2704	; 0xa90
    967c:	bf28      	it	cs
    967e:	f44f 6929 	movcs.w	r9, #2704	; 0xa90
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    9682:	9800      	ldr	r0, [sp, #0]
    9684:	4558      	cmp	r0, fp
    9686:	d04c      	beq.n	9722 <isr_rx_conn_pkt_ctrl+0xde2>
			free_count_rx = packet_rx_acquired_count_get() +
    9688:	f7fb fa40 	bl	4b0c <packet_rx_acquired_count_get>
    968c:	4604      	mov	r4, r0
				mem_free_count_get(_radio.pkt_rx_data_free);
    968e:	f8da 0738 	ldr.w	r0, [sl, #1848]	; 0x738
    9692:	f7f8 fb8b 	bl	1dac <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get() +
    9696:	4404      	add	r4, r0
    9698:	b2a4      	uxth	r4, r4
			LL_ASSERT(free_count_rx <= 0xFF);
    969a:	2cff      	cmp	r4, #255	; 0xff
    969c:	d904      	bls.n	96a8 <isr_rx_conn_pkt_ctrl+0xd68>
    969e:	f640 210b 	movw	r1, #2571	; 0xa0b
    96a2:	484a      	ldr	r0, [pc, #296]	; (97cc <isr_rx_conn_pkt_ctrl+0xe8c>)
    96a4:	f7f7 f904 	bl	8b0 <bt_ctlr_assert_handle>
			if (_radio.packet_rx_data_count == free_count_rx) {
    96a8:	f89a 3742 	ldrb.w	r3, [sl, #1858]	; 0x742
    96ac:	42a3      	cmp	r3, r4
    96ae:	f040 823b 	bne.w	9b28 <isr_rx_conn_pkt_ctrl+0x11e8>
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    96b2:	f8da 371c 	ldr.w	r3, [sl, #1820]	; 0x71c
					(_radio.conn_curr->llcp_length.req - 1);
    96b6:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    96ba:	85df      	strh	r7, [r3, #46]	; 0x2e
					(_radio.conn_curr->llcp_length.req - 1);
    96bc:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
    96be:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
    96c2:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
				_radio.conn_curr->llcp_length.rx_octets =
    96c6:	f8a3 b0ec 	strh.w	fp, [r3, #236]	; 0xec
				_radio.conn_curr->llcp_length.state =
    96ca:	f042 0203 	orr.w	r2, r2, #3
				_radio.conn_curr->llcp_length.tx_octets =
    96ce:	f8a3 70ee 	strh.w	r7, [r3, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
    96d2:	f8a3 8034 	strh.w	r8, [r3, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
    96d6:	f8a3 90f0 	strh.w	r9, [r3, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
    96da:	f8a3 80f2 	strh.w	r8, [r3, #242]	; 0xf2
				_radio.conn_curr->llcp_length.state =
    96de:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
				_radio.state = STATE_CLOSE;
    96e2:	2303      	movs	r3, #3
    96e4:	f88a 3014 	strb.w	r3, [sl, #20]
	if (node_tx) {
    96e8:	2e00      	cmp	r6, #0
    96ea:	f43f aa0b 	beq.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    96ee:	7933      	ldrb	r3, [r6, #4]
			length_resp_send(_radio.conn_curr, node_tx,
    96f0:	f8da 071c 	ldr.w	r0, [sl, #1820]	; 0x71c
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_octets = eff_rx_octets;
    96f4:	f8a6 b008 	strh.w	fp, [r6, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    96f8:	f043 0303 	orr.w	r3, r3, #3
    96fc:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    96fe:	2309      	movs	r3, #9
    9700:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    9702:	2315      	movs	r3, #21
    9704:	71f3      	strb	r3, [r6, #7]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_octets = eff_tx_octets;
    9706:	81b7      	strh	r7, [r6, #12]
	pdu_ctrl_tx->llctrl.length_rsp.max_rx_time = eff_rx_time;
    9708:	f8a6 900a 	strh.w	r9, [r6, #10]
	pdu_ctrl_tx->llctrl.length_rsp.max_tx_time = eff_tx_time;
    970c:	f8a6 800e 	strh.w	r8, [r6, #14]
	ctrl_tx_enqueue(conn, node_tx);
    9710:	4631      	mov	r1, r6
    9712:	f7ff bb5c 	b.w	8dce <isr_rx_conn_pkt_ctrl+0x48e>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    9716:	9f01      	ldr	r7, [sp, #4]
    9718:	e798      	b.n	964c <isr_rx_conn_pkt_ctrl+0xd0c>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    971a:	4690      	mov	r8, r2
    971c:	e7a7      	b.n	966e <isr_rx_conn_pkt_ctrl+0xd2e>
	eff_rx_time = _radio.conn_curr->max_rx_time;
    971e:	4699      	mov	r9, r3
    9720:	e7af      	b.n	9682 <isr_rx_conn_pkt_ctrl+0xd42>
			_radio.conn_curr->pause_tx = 0;
    9722:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
			_radio.conn_curr->llcp_length.ack =
    9726:	f881 e0e9 	strb.w	lr, [r1, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
    972a:	f04f 0e00 	mov.w	lr, #0
			_radio.conn_curr->pause_tx = 0;
    972e:	f36e 00c3 	bfi	r0, lr, #3, #1
    9732:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    9736:	9801      	ldr	r0, [sp, #4]
			_radio.conn_curr->procedure_expire = 0;
    9738:	f8a1 e044 	strh.w	lr, [r1, #68]	; 0x44
			if (eff_tx_octets == _radio.conn_curr->max_tx_octets &&
    973c:	42b8      	cmp	r0, r7
    973e:	d103      	bne.n	9748 <isr_rx_conn_pkt_ctrl+0xe08>
    9740:	4542      	cmp	r2, r8
    9742:	d101      	bne.n	9748 <isr_rx_conn_pkt_ctrl+0xe08>
			    eff_tx_time == _radio.conn_curr->max_tx_time &&
    9744:	454b      	cmp	r3, r9
    9746:	d0cf      	beq.n	96e8 <isr_rx_conn_pkt_ctrl+0xda8>
			*rx_enqueue = 1;
    9748:	2301      	movs	r3, #1
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    974a:	85cf      	strh	r7, [r1, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
    974c:	f8a1 9036 	strh.w	r9, [r1, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
    9750:	f8a1 8034 	strh.w	r8, [r1, #52]	; 0x34
			lr->max_rx_octets = eff_rx_octets;
    9754:	f8a4 b00c 	strh.w	fp, [r4, #12]
			lr->max_tx_octets = eff_tx_octets;
    9758:	8227      	strh	r7, [r4, #16]
			lr->max_rx_time = eff_rx_time;
    975a:	f8a4 900e 	strh.w	r9, [r4, #14]
			lr->max_tx_time = eff_tx_time;
    975e:	f8a4 8012 	strh.w	r8, [r4, #18]
			*rx_enqueue = 1;
    9762:	702b      	strb	r3, [r5, #0]
    9764:	e7c0      	b.n	96e8 <isr_rx_conn_pkt_ctrl+0xda8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ,
    9766:	7a41      	ldrb	r1, [r0, #9]
    9768:	2016      	movs	r0, #22
    976a:	f7fb f987 	bl	4a7c <pdu_len_cmp>
    976e:	2800      	cmp	r0, #0
    9770:	f000 81be 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		if (_radio.role == ROLE_MASTER) {
    9774:	4814      	ldr	r0, [pc, #80]	; (97c8 <isr_rx_conn_pkt_ctrl+0xe88>)
    9776:	7cc3      	ldrb	r3, [r0, #19]
    9778:	2b04      	cmp	r3, #4
    977a:	d15e      	bne.n	983a <isr_rx_conn_pkt_ctrl+0xefa>
			if ((_radio.conn_curr->llcp_phy.ack !=
    977c:	f8d0 071c 	ldr.w	r0, [r0, #1820]	; 0x71c
    9780:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
    9784:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
    9788:	428b      	cmp	r3, r1
    978a:	d00a      	beq.n	97a2 <isr_rx_conn_pkt_ctrl+0xe62>
			      LLCP_PHY_STATE_RSP_WAIT) ||
    978c:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
    9790:	f002 0203 	and.w	r2, r2, #3
			     _radio.conn_curr->llcp_phy.req) &&
    9794:	3a01      	subs	r2, #1
    9796:	2a02      	cmp	r2, #2
    9798:	d803      	bhi.n	97a2 <isr_rx_conn_pkt_ctrl+0xe62>
				nack = reject_ext_ind_send(_radio.conn_curr,
    979a:	2223      	movs	r2, #35	; 0x23
				nack = reject_ext_ind_send(_radio.conn_curr,
    979c:	2116      	movs	r1, #22
    979e:	f7ff bbb3 	b.w	8f08 <isr_rx_conn_pkt_ctrl+0x5c8>
			} else if (((_radio.conn_curr->llcp_req !=
    97a2:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    97a6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    97aa:	4295      	cmp	r5, r2
    97ac:	d003      	beq.n	97b6 <isr_rx_conn_pkt_ctrl+0xe76>
				     _radio.conn_curr->llcp_ack) &&
    97ae:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    97b2:	2a03      	cmp	r2, #3
    97b4:	d105      	bne.n	97c2 <isr_rx_conn_pkt_ctrl+0xe82>
				     LLCP_ENCRYPTION)) ||
    97b6:	f890 50c0 	ldrb.w	r5, [r0, #192]	; 0xc0
    97ba:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
    97be:	4295      	cmp	r5, r2
    97c0:	d008      	beq.n	97d4 <isr_rx_conn_pkt_ctrl+0xe94>
				nack = reject_ext_ind_send(_radio.conn_curr,
    97c2:	222a      	movs	r2, #42	; 0x2a
    97c4:	e7ea      	b.n	979c <isr_rx_conn_pkt_ctrl+0xe5c>
    97c6:	bf00      	nop
    97c8:	20000340 	.word	0x20000340
    97cc:	000109b4 	.word	0x000109b4
    97d0:	20000aa4 	.word	0x20000aa4
				_radio.conn_curr->llcp_phy.state =
    97d4:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    97d8:	428b      	cmp	r3, r1
				_radio.conn_curr->llcp_phy.state =
    97da:	f042 0203 	orr.w	r2, r2, #3
    97de:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
    97e2:	d116      	bne.n	9812 <isr_rx_conn_pkt_ctrl+0xed2>
					_radio.conn_curr->llcp_phy.ack--;
    97e4:	3b01      	subs	r3, #1
    97e6:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
    97ea:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
						_radio.conn_curr->phy_pref_tx;
    97ee:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
					_radio.conn_curr->llcp_phy.cmd = 0;
    97f2:	f36f 0341 	bfc	r3, #1, #1
    97f6:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
    97fa:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    97fe:	f362 0384 	bfi	r3, r2, #2, #3
						_radio.conn_curr->phy_pref_rx;
    9802:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
					_radio.conn_curr->llcp_phy.rx =
    9806:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    980a:	f362 1347 	bfi	r3, r2, #5, #3
    980e:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    9812:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
    9816:	7b62      	ldrb	r2, [r4, #13]
    9818:	f3c3 0182 	ubfx	r1, r3, #2, #3
    981c:	400a      	ands	r2, r1
    981e:	f362 0384 	bfi	r3, r2, #2, #3
    9822:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    9826:	7b22      	ldrb	r2, [r4, #12]
    9828:	b2db      	uxtb	r3, r3
    982a:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    982e:	f362 1347 	bfi	r3, r2, #5, #3
    9832:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
    9836:	f7ff b965 	b.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
			nack = phy_rsp_send(_radio.conn_curr, pdu_data_rx);
    983a:	f8d0 571c 	ldr.w	r5, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    983e:	f200 7064 	addw	r0, r0, #1892	; 0x764
    9842:	f7f8 fa84 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    9846:	4601      	mov	r1, r0
    9848:	2800      	cmp	r0, #0
    984a:	f43f aa84 	beq.w	8d56 <isr_rx_conn_pkt_ctrl+0x416>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    984e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    9852:	2202      	movs	r2, #2
    9854:	f362 0301 	bfi	r3, r2, #0, #2
    9858:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	if (conn->llcp_phy.ack ==
    985c:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    9860:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    9864:	4293      	cmp	r3, r2
    9866:	d11a      	bne.n	989e <isr_rx_conn_pkt_ctrl+0xf5e>
		conn->llcp_phy.ack--;
    9868:	3b01      	subs	r3, #1
    986a:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
		conn->llcp_phy.cmd = 0;
    986e:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
			conn->phy_pref_tx;
    9872:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
		conn->llcp_phy.cmd = 0;
    9876:	f36f 0341 	bfc	r3, #1, #1
    987a:	f885 30f7 	strb.w	r3, [r5, #247]	; 0xf7
		conn->llcp_phy.tx =
    987e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    9882:	f362 0384 	bfi	r3, r2, #2, #3
			conn->phy_pref_rx;
    9886:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn->llcp_phy.rx =
    988a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    988e:	f362 1347 	bfi	r3, r2, #5, #3
    9892:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		conn->procedure_expire =
    9896:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    989a:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
	conn->llcp_phy.tx &= p->rx_phys;
    989e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    98a2:	7b62      	ldrb	r2, [r4, #13]
    98a4:	f3c3 0082 	ubfx	r0, r3, #2, #3
    98a8:	4002      	ands	r2, r0
    98aa:	f362 0384 	bfi	r3, r2, #2, #3
    98ae:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	conn->llcp_phy.rx &= p->tx_phys;
    98b2:	7b22      	ldrb	r2, [r4, #12]
    98b4:	b2db      	uxtb	r3, r3
    98b6:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    98ba:	f362 1347 	bfi	r3, r2, #5, #3
    98be:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    98c2:	790b      	ldrb	r3, [r1, #4]
    98c4:	f043 0303 	orr.w	r3, r3, #3
    98c8:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
    98ca:	2303      	movs	r3, #3
    98cc:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
    98ce:	2317      	movs	r3, #23
    98d0:	71cb      	strb	r3, [r1, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
    98d2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    98d6:	f3c3 0302 	ubfx	r3, r3, #0, #3
    98da:	720b      	strb	r3, [r1, #8]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
    98dc:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
    98e0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    98e4:	724b      	strb	r3, [r1, #9]
    98e6:	f7ff ba48 	b.w	8d7a <isr_rx_conn_pkt_ctrl+0x43a>
		if (_radio.conn_curr->role ||
    98ea:	4e97      	ldr	r6, [pc, #604]	; (9b48 <isr_rx_conn_pkt_ctrl+0x1208>)
    98ec:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
    98f0:	f995 301d 	ldrsb.w	r3, [r5, #29]
    98f4:	2b00      	cmp	r3, #0
    98f6:	f2c0 80fb 	blt.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_RSP,
    98fa:	7a41      	ldrb	r1, [r0, #9]
    98fc:	2017      	movs	r0, #23
    98fe:	f7fb f8bd 	bl	4a7c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    9902:	2800      	cmp	r0, #0
    9904:	f000 80f4 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		if ((_radio.role == ROLE_MASTER) &&
    9908:	7cf3      	ldrb	r3, [r6, #19]
    990a:	2b04      	cmp	r3, #4
    990c:	f47f a8fa 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
    9910:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
    9914:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    9918:	429a      	cmp	r2, r3
    991a:	f43f a8f3 	beq.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		    (_radio.conn_curr->llcp_phy.state ==
    991e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
		     _radio.conn_curr->llcp_phy.req) &&
    9922:	f003 0203 	and.w	r2, r3, #3
    9926:	2a02      	cmp	r2, #2
    9928:	f47f a8ec 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
    992c:	f043 0303 	orr.w	r3, r3, #3
    9930:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
    9934:	7b62      	ldrb	r2, [r4, #13]
    9936:	f3c3 0182 	ubfx	r1, r3, #2, #3
    993a:	400a      	ands	r2, r1
    993c:	f362 0384 	bfi	r3, r2, #2, #3
    9940:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    9944:	7b22      	ldrb	r2, [r4, #12]
    9946:	b2db      	uxtb	r3, r3
    9948:	ea02 1253 	and.w	r2, r2, r3, lsr #5
    994c:	f362 1347 	bfi	r3, r2, #5, #3
			_radio.conn_curr->procedure_expire = 0;
    9950:	2000      	movs	r0, #0
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
    9952:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
    9956:	f8a5 0044 	strh.w	r0, [r5, #68]	; 0x44
    995a:	f7ff b8c3 	b.w	8ae4 <isr_rx_conn_pkt_ctrl+0x1a4>
		if (!_radio.conn_curr->role ||
    995e:	4b7a      	ldr	r3, [pc, #488]	; (9b48 <isr_rx_conn_pkt_ctrl+0x1208>)
    9960:	f8d3 671c 	ldr.w	r6, [r3, #1820]	; 0x71c
    9964:	f996 301d 	ldrsb.w	r3, [r6, #29]
    9968:	2b00      	cmp	r3, #0
    996a:	f280 80c1 	bge.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND,
    996e:	7a41      	ldrb	r1, [r0, #9]
    9970:	2018      	movs	r0, #24
    9972:	f7fb f883 	bl	4a7c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    9976:	2800      	cmp	r0, #0
    9978:	f000 80ba 	beq.w	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
    997c:	7b20      	ldrb	r0, [r4, #12]
    997e:	7b63      	ldrb	r3, [r4, #13]
    9980:	4318      	orrs	r0, r3
    9982:	f010 0007 	ands.w	r0, r0, #7
    9986:	d125      	bne.n	99d4 <isr_rx_conn_pkt_ctrl+0x1094>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    9988:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    998c:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    9990:	4293      	cmp	r3, r2
    9992:	f43f a8b7 	beq.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
    9996:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
    999a:	f003 0303 	and.w	r3, r3, #3
    999e:	2b02      	cmp	r3, #2
    99a0:	f47f a8b0 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		if (!conn->llcp_phy.cmd) {
    99a4:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    99a8:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		if (!conn->llcp_phy.cmd) {
    99ac:	079a      	lsls	r2, r3, #30
		conn->procedure_expire = 0;
    99ae:	f8a6 0044 	strh.w	r0, [r6, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
    99b2:	f57f a8a7 	bpl.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    99b6:	230c      	movs	r3, #12
		upd->status = 0;
    99b8:	72e0      	strb	r0, [r4, #11]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    99ba:	7123      	strb	r3, [r4, #4]
		upd->tx = conn->phy_tx;
    99bc:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
    99c0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    99c4:	7323      	strb	r3, [r4, #12]
		upd->rx = conn->phy_rx;
    99c6:	f896 303a 	ldrb.w	r3, [r6, #58]	; 0x3a
    99ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
    99ce:	7363      	strb	r3, [r4, #13]
    99d0:	f7ff ba85 	b.w	8ede <isr_rx_conn_pkt_ctrl+0x59e>
	if (((ind->instant - conn->event_counter) & 0xffff) > 0x7fff) {
    99d4:	89e3      	ldrh	r3, [r4, #14]
    99d6:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    99d8:	1a9b      	subs	r3, r3, r2
    99da:	041b      	lsls	r3, r3, #16
    99dc:	f100 80af 	bmi.w	9b3e <isr_rx_conn_pkt_ctrl+0x11fe>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    99e0:	f896 2074 	ldrb.w	r2, [r6, #116]	; 0x74
    99e4:	f896 3075 	ldrb.w	r3, [r6, #117]	; 0x75
    99e8:	429a      	cmp	r2, r3
    99ea:	d004      	beq.n	99f6 <isr_rx_conn_pkt_ctrl+0x10b6>
    99ec:	f642 015c 	movw	r1, #10332	; 0x285c
    99f0:	4856      	ldr	r0, [pc, #344]	; (9b4c <isr_rx_conn_pkt_ctrl+0x120c>)
    99f2:	f7f6 ff5d 	bl	8b0 <bt_ctlr_assert_handle>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    99f6:	f896 20f4 	ldrb.w	r2, [r6, #244]	; 0xf4
    99fa:	f896 30f5 	ldrb.w	r3, [r6, #245]	; 0xf5
    99fe:	4293      	cmp	r3, r2
    9a00:	d014      	beq.n	9a2c <isr_rx_conn_pkt_ctrl+0x10ec>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
    9a02:	f896 30f6 	ldrb.w	r3, [r6, #246]	; 0xf6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
    9a06:	f003 0303 	and.w	r3, r3, #3
    9a0a:	2b02      	cmp	r3, #2
    9a0c:	d10e      	bne.n	9a2c <isr_rx_conn_pkt_ctrl+0x10ec>
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    9a0e:	f896 30f7 	ldrb.w	r3, [r6, #247]	; 0xf7
		conn->llcp_phy.ack = conn->llcp_phy.req;
    9a12:	f886 20f5 	strb.w	r2, [r6, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    9a16:	f896 2078 	ldrb.w	r2, [r6, #120]	; 0x78
    9a1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    9a1e:	f363 0241 	bfi	r2, r3, #1, #1
		conn->procedure_expire = 0;
    9a22:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    9a24:	f886 2078 	strb.w	r2, [r6, #120]	; 0x78
		conn->procedure_expire = 0;
    9a28:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
    9a2c:	7b61      	ldrb	r1, [r4, #13]
    9a2e:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
    9a32:	f001 0107 	and.w	r1, r1, #7
    9a36:	f361 0384 	bfi	r3, r1, #2, #3
    9a3a:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
    9a3e:	7b22      	ldrb	r2, [r4, #12]
    9a40:	f362 1347 	bfi	r3, r2, #5, #3
    9a44:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = ind->instant;
    9a48:	7be2      	ldrb	r2, [r4, #15]
    9a4a:	7ba3      	ldrb	r3, [r4, #14]
    9a4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    9a50:	f8a6 307a 	strh.w	r3, [r6, #122]	; 0x7a
	conn->llcp_type = LLCP_PHY_UPD;
    9a54:	2208      	movs	r2, #8
	conn->llcp.phy_upd_ind.initiate = 0;
    9a56:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
    9a5a:	f886 2076 	strb.w	r2, [r6, #118]	; 0x76
	conn->llcp_ack--;
    9a5e:	f896 2075 	ldrb.w	r2, [r6, #117]	; 0x75
	conn->llcp.phy_upd_ind.initiate = 0;
    9a62:	f36f 0300 	bfc	r3, #0, #1
    9a66:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
	conn->llcp_ack--;
    9a6a:	3a01      	subs	r2, #1
	if (conn->llcp.phy_upd_ind.tx) {
    9a6c:	f003 031c 	and.w	r3, r3, #28
	conn->llcp_ack--;
    9a70:	f886 2075 	strb.w	r2, [r6, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
    9a74:	2b00      	cmp	r3, #0
    9a76:	f43f a845 	beq.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
    9a7a:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    9a7e:	f361 0302 	bfi	r3, r1, #0, #3
    9a82:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
    9a86:	f7ff b83d 	b.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		if (_radio.conn_curr->role ||
    9a8a:	4e2f      	ldr	r6, [pc, #188]	; (9b48 <isr_rx_conn_pkt_ctrl+0x1208>)
    9a8c:	f8d6 571c 	ldr.w	r5, [r6, #1820]	; 0x71c
    9a90:	f995 301d 	ldrsb.w	r3, [r5, #29]
    9a94:	2b00      	cmp	r3, #0
    9a96:	db2b      	blt.n	9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    9a98:	7a41      	ldrb	r1, [r0, #9]
    9a9a:	2019      	movs	r0, #25
    9a9c:	f7fa ffee 	bl	4a7c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    9aa0:	b330      	cbz	r0, 9af0 <isr_rx_conn_pkt_ctrl+0x11b0>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
    9aa2:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    9aa6:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    9aaa:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
    9aae:	7b22      	ldrb	r2, [r4, #12]
    9ab0:	f003 0307 	and.w	r3, r3, #7
    9ab4:	4213      	tst	r3, r2
    9ab6:	f43f a825 	beq.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
			if (conn->llcp_req != conn->llcp_ack) {
    9aba:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
    9abe:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    9ac2:	429a      	cmp	r2, r3
    9ac4:	f47f a81e 	bne.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
			memcpy(&conn->llcp.chan_map.chm[0],
    9ac8:	2205      	movs	r2, #5
    9aca:	f206 7122 	addw	r1, r6, #1826	; 0x722
    9ace:	f105 0079 	add.w	r0, r5, #121	; 0x79
    9ad2:	f7f6 fd91 	bl	5f8 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    9ad6:	2301      	movs	r3, #1
    9ad8:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
    9adc:	2302      	movs	r3, #2
    9ade:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
    9ae2:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
    9ae6:	3b01      	subs	r3, #1
    9ae8:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
    9aec:	f7ff b80a 	b.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
		nack = unknown_rsp_send(_radio.conn_curr,
    9af0:	4815      	ldr	r0, [pc, #84]	; (9b48 <isr_rx_conn_pkt_ctrl+0x1208>)
    9af2:	7ae4      	ldrb	r4, [r4, #11]
    9af4:	f8d0 571c 	ldr.w	r5, [r0, #1820]	; 0x71c
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9af8:	f200 7064 	addw	r0, r0, #1892	; 0x764
    9afc:	f7f8 f927 	bl	1d4e <mem_acquire>
	if (!node_tx) {
    9b00:	4601      	mov	r1, r0
    9b02:	2800      	cmp	r0, #0
    9b04:	f43f a927 	beq.w	8d56 <isr_rx_conn_pkt_ctrl+0x416>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9b08:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    9b0a:	7204      	strb	r4, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9b0c:	f043 0303 	orr.w	r3, r3, #3
    9b10:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    9b12:	2302      	movs	r3, #2
    9b14:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    9b16:	2307      	movs	r3, #7
    9b18:	71c3      	strb	r3, [r0, #7]
    9b1a:	f7ff b92e 	b.w	8d7a <isr_rx_conn_pkt_ctrl+0x43a>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    9b1e:	2328      	movs	r3, #40	; 0x28
    9b20:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
    9b24:	f7fe bfee 	b.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
	if (node_tx) {
    9b28:	2e00      	cmp	r6, #0
    9b2a:	f43f a914 	beq.w	8d56 <isr_rx_conn_pkt_ctrl+0x416>
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    9b2e:	4908      	ldr	r1, [pc, #32]	; (9b50 <isr_rx_conn_pkt_ctrl+0x1210>)
    9b30:	4630      	mov	r0, r6
    9b32:	f7f8 f926 	bl	1d82 <mem_release>
    9b36:	f7ff b90e 	b.w	8d56 <isr_rx_conn_pkt_ctrl+0x416>
	eff_tx_time = _radio.conn_curr->max_tx_time;
    9b3a:	4690      	mov	r8, r2
    9b3c:	e56c      	b.n	9618 <isr_rx_conn_pkt_ctrl+0xcd8>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    9b3e:	2328      	movs	r3, #40	; 0x28
    9b40:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
    9b44:	f7fe bfde 	b.w	8b04 <isr_rx_conn_pkt_ctrl+0x1c4>
    9b48:	20000340 	.word	0x20000340
    9b4c:	000109b4 	.word	0x000109b4
    9b50:	20000aa4 	.word	0x20000aa4
    9b54:	00000000 	.word	0x00000000

00009b58 <isr>:
{
    9b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b5c:	b095      	sub	sp, #84	; 0x54
	trx_done = radio_is_done();
    9b5e:	f004 feab 	bl	e8b8 <radio_is_done>
    9b62:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    9b64:	b366      	cbz	r6, 9bc0 <isr+0x68>
		crc_ok = radio_crc_is_valid();
    9b66:	f004 fec7 	bl	e8f8 <radio_crc_is_valid>
    9b6a:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    9b6c:	f004 ff48 	bl	ea00 <radio_filter_has_match>
    9b70:	fa5f f880 	uxtb.w	r8, r0
		devmatch_id = radio_filter_match_get();
    9b74:	f004 ff4e 	bl	ea14 <radio_filter_match_get>
    9b78:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_ok = radio_ar_has_match();
    9b7c:	f005 f950 	bl	ee20 <radio_ar_has_match>
    9b80:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_id = radio_ar_match_get();
    9b84:	f005 f93a 	bl	edfc <radio_ar_match_get>
    9b88:	fa5f fb80 	uxtb.w	fp, r0
		rssi_ready = radio_rssi_is_ready();
    9b8c:	f004 ff02 	bl	e994 <radio_rssi_is_ready>
    9b90:	b2c5      	uxtb	r5, r0
	switch (_radio.state) {
    9b92:	4cb4      	ldr	r4, [pc, #720]	; (9e64 <isr+0x30c>)
	radio_status_reset();
    9b94:	f004 fe7a 	bl	e88c <radio_status_reset>
	radio_tmr_status_reset();
    9b98:	f004 ff4e 	bl	ea38 <radio_tmr_status_reset>
	radio_filter_status_reset();
    9b9c:	f004 ff28 	bl	e9f0 <radio_filter_status_reset>
	radio_ar_status_reset();
    9ba0:	f005 f932 	bl	ee08 <radio_ar_status_reset>
	radio_rssi_status_reset();
    9ba4:	f004 feee 	bl	e984 <radio_rssi_status_reset>
	switch (_radio.state) {
    9ba8:	7d23      	ldrb	r3, [r4, #20]
    9baa:	2b05      	cmp	r3, #5
    9bac:	f201 842a 	bhi.w	b404 <isr+0x18ac>
    9bb0:	e8df f013 	tbh	[pc, r3, lsl #1]
    9bb4:	00d0007d 	.word	0x00d0007d
    9bb8:	0a57000e 	.word	0x0a57000e
    9bbc:	0a570a57 	.word	0x0a570a57
		devmatch_id = irkmatch_id = 0xFF;
    9bc0:	f04f 0bff 	mov.w	fp, #255	; 0xff
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    9bc4:	4635      	mov	r5, r6
    9bc6:	46b2      	mov	sl, r6
    9bc8:	46b0      	mov	r8, r6
    9bca:	4637      	mov	r7, r6
		devmatch_id = irkmatch_id = 0xFF;
    9bcc:	46d9      	mov	r9, fp
    9bce:	e7e0      	b.n	9b92 <isr+0x3a>
	_radio.state = STATE_RX;
    9bd0:	2301      	movs	r3, #1
    9bd2:	7523      	strb	r3, [r4, #20]
	hcto = radio_tmr_tifs_base_get()
    9bd4:	f005 f82a 	bl	ec2c <radio_tmr_tifs_base_get>
    9bd8:	4605      	mov	r5, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    9bda:	2096      	movs	r0, #150	; 0x96
    9bdc:	f004 ff3c 	bl	ea58 <radio_tmr_tifs_set>
	switch (_radio.role) {
    9be0:	7ce3      	ldrb	r3, [r4, #19]
    9be2:	3b01      	subs	r3, #1
    9be4:	2b03      	cmp	r3, #3
    9be6:	f200 80af 	bhi.w	9d48 <isr+0x1f0>
    9bea:	e8df f003 	tbb	[pc, r3]
    9bee:	2f02      	.short	0x2f02
    9bf0:	6363      	.short	0x6363
		radio_switch_complete_and_tx(0, 0, 0, 0);
    9bf2:	2300      	movs	r3, #0
    9bf4:	461a      	mov	r2, r3
    9bf6:	4619      	mov	r1, r3
    9bf8:	4618      	mov	r0, r3
    9bfa:	f004 fe9b 	bl	e934 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    9bfe:	f004 fe89 	bl	e914 <radio_pkt_scratch_get>
    9c02:	f004 fdfd 	bl	e800 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    9c06:	f004 fe4d 	bl	e8a4 <radio_is_ready>
    9c0a:	b120      	cbz	r0, 9c16 <isr+0xbe>
    9c0c:	f240 3127 	movw	r1, #807	; 0x327
    9c10:	4895      	ldr	r0, [pc, #596]	; (9e68 <isr+0x310>)
    9c12:	f7f6 fe4d 	bl	8b0 <bt_ctlr_assert_handle>
		if (ctrl_rl_enabled()) {
    9c16:	f003 ffe5 	bl	dbe4 <ctrl_rl_enabled>
    9c1a:	b138      	cbz	r0, 9c2c <isr+0xd4>
			u8_t count, *irks = ctrl_irks_get(&count);
    9c1c:	a812      	add	r0, sp, #72	; 0x48
    9c1e:	f003 fd9d 	bl	d75c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    9c22:	4601      	mov	r1, r0
    9c24:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    9c28:	f005 f8b6 	bl	ed98 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    9c2c:	2100      	movs	r1, #0
    9c2e:	4608      	mov	r0, r1
    9c30:	f004 fdff 	bl	e832 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    9c34:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    9c36:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    9c38:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    9c3a:	4608      	mov	r0, r1
    9c3c:	f004 fdf5 	bl	e82a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    9c40:	1a28      	subs	r0, r5, r0
    9c42:	f004 ff89 	bl	eb58 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    9c46:	f004 ffd9 	bl	ebfc <radio_tmr_end_capture>
    9c4a:	e030      	b.n	9cae <isr+0x156>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    9c4c:	2300      	movs	r3, #0
    9c4e:	461a      	mov	r2, r3
    9c50:	4619      	mov	r1, r3
    9c52:	4618      	mov	r0, r3
    9c54:	f004 fe6e 	bl	e934 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    9c58:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
    9c5c:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		radio_pkt_rx_set(_radio.packet_rx
    9c60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9c64:	3008      	adds	r0, #8
    9c66:	f004 fdcb 	bl	e800 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    9c6a:	f004 fe1b 	bl	e8a4 <radio_is_ready>
    9c6e:	b120      	cbz	r0, 9c7a <isr+0x122>
    9c70:	f240 314e 	movw	r1, #846	; 0x34e
    9c74:	487c      	ldr	r0, [pc, #496]	; (9e68 <isr+0x310>)
    9c76:	f7f6 fe1b 	bl	8b0 <bt_ctlr_assert_handle>
		if (ctrl_rl_enabled()) {
    9c7a:	f003 ffb3 	bl	dbe4 <ctrl_rl_enabled>
    9c7e:	b138      	cbz	r0, 9c90 <isr+0x138>
			u8_t count, *irks = ctrl_irks_get(&count);
    9c80:	a812      	add	r0, sp, #72	; 0x48
    9c82:	f003 fd6b 	bl	d75c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    9c86:	4601      	mov	r1, r0
    9c88:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    9c8c:	f005 f884 	bl	ed98 <radio_ar_configure>
		hcto += radio_rx_chain_delay_get(0, 0);
    9c90:	2100      	movs	r1, #0
    9c92:	4608      	mov	r0, r1
    9c94:	f004 fdcd 	bl	e832 <radio_rx_chain_delay_get>
		hcto += addr_us_get(0);
    9c98:	35c3      	adds	r5, #195	; 0xc3
		hcto -= radio_tx_chain_delay_get(0, 0);
    9c9a:	2100      	movs	r1, #0
		hcto += addr_us_get(0);
    9c9c:	4405      	add	r5, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    9c9e:	4608      	mov	r0, r1
    9ca0:	f004 fdc3 	bl	e82a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    9ca4:	1a28      	subs	r0, r5, r0
    9ca6:	f004 ff57 	bl	eb58 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    9caa:	f004 fe5b 	bl	e964 <radio_rssi_measure>
}
    9cae:	b015      	add	sp, #84	; 0x54
    9cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    9cb4:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
					     _radio.conn_curr->phy_flags);
    9cb8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    9cbc:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    9cc0:	2100      	movs	r1, #0
    9cc2:	09d3      	lsrs	r3, r2, #7
    9cc4:	f000 0007 	and.w	r0, r0, #7
    9cc8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    9ccc:	f004 fe32 	bl	e934 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    9cd0:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
    9cd4:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		rx_packet_set(_radio.conn_curr,	(void *)
    9cd8:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    9cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    9ce0:	3108      	adds	r1, #8
    9ce2:	f7fb fa41 	bl	5168 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    9ce6:	f004 fddd 	bl	e8a4 <radio_is_ready>
    9cea:	b120      	cbz	r0, 9cf6 <isr+0x19e>
    9cec:	f240 317f 	movw	r1, #895	; 0x37f
    9cf0:	485d      	ldr	r0, [pc, #372]	; (9e68 <isr+0x310>)
    9cf2:	f7f6 fddd 	bl	8b0 <bt_ctlr_assert_handle>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    9cf6:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    9cfa:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    9cfe:	2101      	movs	r1, #1
    9d00:	f000 0007 	and.w	r0, r0, #7
    9d04:	f004 fd95 	bl	e832 <radio_rx_chain_delay_get>
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    9d08:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
    9d0c:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
	switch (phy) {
    9d10:	f003 0307 	and.w	r3, r3, #7
	hcto = radio_tmr_tifs_base_get()
    9d14:	359b      	adds	r5, #155	; 0x9b
	switch (phy) {
    9d16:	2b02      	cmp	r3, #2
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    9d18:	4405      	add	r5, r0
	switch (phy) {
    9d1a:	d013      	beq.n	9d44 <isr+0x1ec>
		return 40;
    9d1c:	2b04      	cmp	r3, #4
    9d1e:	bf0c      	ite	eq
    9d20:	f44f 70bc 	moveq.w	r0, #376	; 0x178
    9d24:	2028      	movne	r0, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    9d26:	4405      	add	r5, r0
						 _radio.conn_curr->phy_flags);
    9d28:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    9d2c:	09c1      	lsrs	r1, r0, #7
    9d2e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    9d32:	f004 fd7a 	bl	e82a <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    9d36:	1a28      	subs	r0, r5, r0
    9d38:	f004 ff0e 	bl	eb58 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    9d3c:	2001      	movs	r0, #1
    9d3e:	f7fb fa6b 	bl	5218 <packet_tx_enqueue>
    9d42:	e7b4      	b.n	9cae <isr+0x156>
		return 24;
    9d44:	2018      	movs	r0, #24
    9d46:	e7ee      	b.n	9d26 <isr+0x1ce>
		LL_ASSERT(0);
    9d48:	f240 31af 	movw	r1, #943	; 0x3af
		LL_ASSERT(0);
    9d4c:	4846      	ldr	r0, [pc, #280]	; (9e68 <isr+0x310>)
    9d4e:	f7f6 fdaf 	bl	8b0 <bt_ctlr_assert_handle>
}
    9d52:	e7ac      	b.n	9cae <isr+0x156>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    9d54:	b926      	cbnz	r6, 9d60 <isr+0x208>
		_radio.state = STATE_CLOSE;
    9d56:	2303      	movs	r3, #3
    9d58:	7523      	strb	r3, [r4, #20]
		radio_disable();
    9d5a:	f004 fd85 	bl	e868 <radio_disable>
    9d5e:	e7a6      	b.n	9cae <isr+0x156>
	switch (_radio.role) {
    9d60:	7ce3      	ldrb	r3, [r4, #19]
    9d62:	3b01      	subs	r3, #1
    9d64:	2b03      	cmp	r3, #3
    9d66:	f201 8178 	bhi.w	b05a <isr+0x1502>
    9d6a:	e8df f013 	tbh	[pc, r3, lsl #1]
    9d6e:	0004      	.short	0x0004
    9d70:	064d029d 	.word	0x064d029d
    9d74:	064d      	.short	0x064d
		if (crc_ok) {
    9d76:	2f00      	cmp	r7, #0
    9d78:	d0ed      	beq.n	9d56 <isr+0x1fe>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    9d7a:	f1ba 0f00 	cmp.w	sl, #0
    9d7e:	d038      	beq.n	9df2 <isr+0x29a>
    9d80:	4658      	mov	r0, fp
    9d82:	f003 fd23 	bl	d7cc <ctrl_rl_irk_idx>
    9d86:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
	pdu_adv = (void *)radio_pkt_scratch_get();
    9d8a:	f004 fdc3 	bl	e914 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9d8e:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
	pdu_adv = (void *)radio_pkt_scratch_get();
    9d92:	4606      	mov	r6, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9d94:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    9d98:	7800      	ldrb	r0, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    9d9a:	332c      	adds	r3, #44	; 0x2c
    9d9c:	930b      	str	r3, [sp, #44]	; 0x2c
    9d9e:	18e5      	adds	r5, r4, r3
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    9da0:	f000 030f 	and.w	r3, r0, #15
    9da4:	2b03      	cmp	r3, #3
    9da6:	d10a      	bne.n	9dbe <isr+0x266>
    9da8:	7873      	ldrb	r3, [r6, #1]
    9daa:	2b0c      	cmp	r3, #12
    9dac:	d107      	bne.n	9dbe <isr+0x266>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    9dae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    9db2:	07df      	lsls	r7, r3, #31
    9db4:	d51f      	bpl.n	9df6 <isr+0x29e>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    9db6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
    9dba:	07d8      	lsls	r0, r3, #31
    9dbc:	d448      	bmi.n	9e50 <isr+0x2f8>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    9dbe:	7830      	ldrb	r0, [r6, #0]
    9dc0:	f000 030f 	and.w	r3, r0, #15
    9dc4:	2b05      	cmp	r3, #5
    9dc6:	d1c6      	bne.n	9d56 <isr+0x1fe>
    9dc8:	7873      	ldrb	r3, [r6, #1]
    9dca:	2b22      	cmp	r3, #34	; 0x22
    9dcc:	d1c3      	bne.n	9d56 <isr+0x1fe>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dd0:	5ce3      	ldrb	r3, [r4, r3]
    9dd2:	f003 030f 	and.w	r3, r3, #15
    9dd6:	2b01      	cmp	r3, #1
    9dd8:	f040 821f 	bne.w	a21a <isr+0x6c2>
					    ci->connect_ind.init_addr,
    9ddc:	1cb7      	adds	r7, r6, #2
		return ctrl_rl_addr_allowed(ci->tx_addr,
    9dde:	aa12      	add	r2, sp, #72	; 0x48
    9de0:	4639      	mov	r1, r7
    9de2:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9de6:	f003 fea1 	bl	db2c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
    9dea:	2800      	cmp	r0, #0
    9dec:	d13e      	bne.n	9e6c <isr+0x314>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    9dee:	2000      	movs	r0, #0
    9df0:	e04c      	b.n	9e8c <isr+0x334>
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
    9df2:	20ff      	movs	r0, #255	; 0xff
    9df4:	e7c7      	b.n	9d86 <isr+0x22e>
		 ctrl_rl_addr_allowed(sr->tx_addr, sr->scan_req.scan_addr,
    9df6:	aa12      	add	r2, sp, #72	; 0x48
    9df8:	1cb1      	adds	r1, r6, #2
    9dfa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9dfe:	f003 fe95 	bl	db2c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
    9e02:	2800      	cmp	r0, #0
    9e04:	d0d7      	beq.n	9db6 <isr+0x25e>
	return (adv->tx_addr == sr->rx_addr) &&
    9e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9e08:	7832      	ldrb	r2, [r6, #0]
    9e0a:	5ce3      	ldrb	r3, [r4, r3]
    9e0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    9e10:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    9e14:	d1d3      	bne.n	9dbe <isr+0x266>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    9e16:	2206      	movs	r2, #6
    9e18:	f106 0108 	add.w	r1, r6, #8
    9e1c:	1ca8      	adds	r0, r5, #2
    9e1e:	f7f6 fbd6 	bl	5ce <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    9e22:	2800      	cmp	r0, #0
    9e24:	d1cb      	bne.n	9dbe <isr+0x266>
		_radio.state = STATE_CLOSE;
    9e26:	2303      	movs	r3, #3
    9e28:	7523      	strb	r3, [r4, #20]
		radio_switch_complete_and_disable();
    9e2a:	f004 fd8d 	bl	e948 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    9e2e:	f894 0636 	ldrb.w	r0, [r4, #1590]	; 0x636
    9e32:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    9e36:	f200 4034 	addw	r0, r0, #1076	; 0x434
    9e3a:	4420      	add	r0, r4
    9e3c:	f004 fce6 	bl	e80c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    9e40:	f004 fd30 	bl	e8a4 <radio_is_ready>
    9e44:	2800      	cmp	r0, #0
    9e46:	f43f af32 	beq.w	9cae <isr+0x156>
    9e4a:	f240 4155 	movw	r1, #1109	; 0x455
    9e4e:	e77d      	b.n	9d4c <isr+0x1f4>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
    9e50:	f1b8 0f00 	cmp.w	r8, #0
    9e54:	d1d7      	bne.n	9e06 <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    9e56:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    9e5a:	f003 fce1 	bl	d820 <ctrl_irk_whitelisted>
    9e5e:	2800      	cmp	r0, #0
    9e60:	d1d1      	bne.n	9e06 <isr+0x2ae>
    9e62:	e7ac      	b.n	9dbe <isr+0x266>
    9e64:	20000340 	.word	0x20000340
    9e68:	000109b4 	.word	0x000109b4
		       isr_adv_ci_adva_check(adv, ci) &&
    9e6c:	4631      	mov	r1, r6
    9e6e:	4628      	mov	r0, r5
    9e70:	f7fc f81a 	bl	5ea8 <isr_adv_ci_adva_check>
					    rl_idx) &&
    9e74:	2800      	cmp	r0, #0
    9e76:	d0ba      	beq.n	9dee <isr+0x296>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
    9e78:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
    9e7c:	2bff      	cmp	r3, #255	; 0xff
    9e7e:	f000 81b9 	beq.w	a1f4 <isr+0x69c>
		return rl_idx == _radio.advertiser.rl_idx;
    9e82:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    9e86:	1ac1      	subs	r1, r0, r3
    9e88:	4248      	negs	r0, r1
    9e8a:	4148      	adcs	r0, r1
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    9e8c:	f000 0001 	and.w	r0, r0, #1
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    9e90:	2800      	cmp	r0, #0
    9e92:	f43f af60 	beq.w	9d56 <isr+0x1fe>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    9e96:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
    9e9a:	b133      	cbz	r3, 9eaa <isr+0x352>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    9e9c:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
    9ea0:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
    9ea4:	429a      	cmp	r2, r3
    9ea6:	f47f af56 	bne.w	9d56 <isr+0x1fe>
    9eaa:	f8d4 3638 	ldr.w	r3, [r4, #1592]	; 0x638
    9eae:	2b00      	cmp	r3, #0
    9eb0:	f43f af51 	beq.w	9d56 <isr+0x1fe>
			node_rx = packet_rx_reserve_get(4);
    9eb4:	2004      	movs	r0, #4
    9eb6:	f7fa fe3f 	bl	4b38 <packet_rx_reserve_get>
		if (!node_rx) {
    9eba:	4607      	mov	r7, r0
    9ebc:	2800      	cmp	r0, #0
    9ebe:	f43f af4a 	beq.w	9d56 <isr+0x1fe>
		_radio.state = STATE_STOP;
    9ec2:	f04f 0904 	mov.w	r9, #4
    9ec6:	f884 9014 	strb.w	r9, [r4, #20]
		radio_disable();
    9eca:	f004 fccd 	bl	e868 <radio_disable>
		conn = _radio.advertiser.conn;
    9ece:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    9ed2:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
		_radio.advertiser.conn = NULL;
    9ed6:	2300      	movs	r3, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    9ed8:	f44f 72aa 	mov.w	r2, #340	; 0x154
    9edc:	4628      	mov	r0, r5
		_radio.advertiser.conn = NULL;
    9ede:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    9ee2:	f7f7 ff6c 	bl	1dbe <mem_index_get>
		memcpy(&conn->access_addr[0],
    9ee6:	f105 0a10 	add.w	sl, r5, #16
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    9eea:	8428      	strh	r0, [r5, #32]
		memcpy(&conn->crc_init[0],
    9eec:	2203      	movs	r2, #3
    9eee:	f106 0112 	add.w	r1, r6, #18
    9ef2:	f105 0014 	add.w	r0, r5, #20
    9ef6:	f7f6 fb7f 	bl	5f8 <memcpy>
		memcpy(&conn->data_chan_map[0],
    9efa:	f105 0817 	add.w	r8, r5, #23
		memcpy(&conn->access_addr[0],
    9efe:	464a      	mov	r2, r9
    9f00:	f106 010e 	add.w	r1, r6, #14
    9f04:	4650      	mov	r0, sl
    9f06:	f7f6 fb77 	bl	5f8 <memcpy>
		memcpy(&conn->data_chan_map[0],
    9f0a:	2205      	movs	r2, #5
    9f0c:	f106 011e 	add.w	r1, r6, #30
    9f10:	4640      	mov	r0, r8
    9f12:	f7f6 fb71 	bl	5f8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    9f16:	2105      	movs	r1, #5
    9f18:	4640      	mov	r0, r8
    9f1a:	f7f8 f8c3 	bl	20a4 <util_ones_count_get>
		conn->data_chan_count =
    9f1e:	7f6b      	ldrb	r3, [r5, #29]
    9f20:	f360 0305 	bfi	r3, r0, #0, #6
    9f24:	776b      	strb	r3, [r5, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    9f26:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    9f2a:	f3c3 0304 	ubfx	r3, r3, #0, #5
    9f2e:	77ab      	strb	r3, [r5, #30]
			pdu_adv->connect_ind.interval;
    9f30:	8b33      	ldrh	r3, [r6, #24]
		conn->conn_interval =
    9f32:	84ab      	strh	r3, [r5, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    9f34:	f240 48e2 	movw	r8, #1250	; 0x4e2
    9f38:	fb08 f803 	mul.w	r8, r8, r3
		conn->latency = pdu_adv->connect_ind.latency;
    9f3c:	7ef2      	ldrb	r2, [r6, #27]
    9f3e:	7eb3      	ldrb	r3, [r6, #26]
    9f40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    9f44:	4651      	mov	r1, sl
    9f46:	464a      	mov	r2, r9
		conn->latency = pdu_adv->connect_ind.latency;
    9f48:	84eb      	strh	r3, [r5, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    9f4a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    9f4e:	f7f6 fb53 	bl	5f8 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    9f52:	8bb3      	ldrh	r3, [r6, #28]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    9f54:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    9f56:	f242 7210 	movw	r2, #10000	; 0x2710
    9f5a:	fb02 8303 	mla	r3, r2, r3, r8
    9f5e:	3b01      	subs	r3, #1
    9f60:	fbb3 f3f8 	udiv	r3, r3, r8
    9f64:	87eb      	strh	r3, [r5, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    9f66:	4bc6      	ldr	r3, [pc, #792]	; (a280 <isr+0x728>)
    9f68:	4443      	add	r3, r8
    9f6a:	fbb3 f3f8 	udiv	r3, r3, r8
    9f6e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    9f72:	4bc4      	ldr	r3, [pc, #784]	; (a284 <isr+0x72c>)
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    9f74:	1d88      	adds	r0, r1, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    9f76:	4443      	add	r3, r8
    9f78:	fbb3 f3f8 	udiv	r3, r3, r8
    9f7c:	b29a      	uxth	r2, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    9f7e:	4282      	cmp	r2, r0
    9f80:	4613      	mov	r3, r2
    9f82:	bfc4      	itt	gt
    9f84:	f5c1 437f 	rsbgt	r3, r1, #65280	; 0xff00
    9f88:	33fa      	addgt	r3, #250	; 0xfa
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    9f8a:	f8a5 204a 	strh.w	r2, [r5, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    9f8e:	bfc4      	itt	gt
    9f90:	18d2      	addgt	r2, r2, r3
    9f92:	b292      	uxthgt	r2, r2
		node_rx->hdr.handle = conn->handle;
    9f94:	8c2b      	ldrh	r3, [r5, #32]
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    9f96:	f8a5 2046 	strh.w	r2, [r5, #70]	; 0x46
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    9f9a:	4631      	mov	r1, r6
		node_rx->hdr.handle = conn->handle;
    9f9c:	80fb      	strh	r3, [r7, #6]
		radio_le_conn_cmplt->role = 0x01;
    9f9e:	2201      	movs	r2, #1
		radio_le_conn_cmplt->status = 0x00;
    9fa0:	2300      	movs	r3, #0
    9fa2:	72fb      	strb	r3, [r7, #11]
		radio_le_conn_cmplt->role = 0x01;
    9fa4:	733a      	strb	r2, [r7, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    9fa6:	f811 2b08 	ldrb.w	r2, [r1], #8
		radio_le_conn_cmplt->status = 0x00;
    9faa:	930d      	str	r3, [sp, #52]	; 0x34
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    9fac:	f04f 0906 	mov.w	r9, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    9fb0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    9fb4:	76ba      	strb	r2, [r7, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    9fb6:	f887 9004 	strb.w	r9, [r7, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    9fba:	464a      	mov	r2, r9
    9fbc:	f107 001b 	add.w	r0, r7, #27
    9fc0:	f7f6 fb1a 	bl	5f8 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
    9fc4:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    9fc8:	f107 030e 	add.w	r3, r7, #14
    9fcc:	28ff      	cmp	r0, #255	; 0xff
    9fce:	930c      	str	r3, [sp, #48]	; 0x30
    9fd0:	f106 0a02 	add.w	sl, r6, #2
    9fd4:	f107 0b14 	add.w	fp, r7, #20
    9fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9fda:	f000 813d 	beq.w	a258 <isr+0x700>
			ll_rl_id_addr_get(rl_idx,
    9fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9fe0:	f107 010d 	add.w	r1, r7, #13
    9fe4:	f003 fd78 	bl	dad8 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    9fe8:	7b7b      	ldrb	r3, [r7, #13]
    9fea:	3302      	adds	r3, #2
    9fec:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    9fee:	464a      	mov	r2, r9
    9ff0:	4651      	mov	r1, sl
    9ff2:	4658      	mov	r0, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    9ff4:	f7f6 fb00 	bl	5f8 <memcpy>
			pdu_adv->connect_ind.interval;
    9ff8:	8b33      	ldrh	r3, [r6, #24]
		radio_le_conn_cmplt->interval =
    9ffa:	f8a7 3021 	strh.w	r3, [r7, #33]	; 0x21
			pdu_adv->connect_ind.latency;
    9ffe:	8b73      	ldrh	r3, [r6, #26]
		radio_le_conn_cmplt->latency =
    a000:	f8a7 3023 	strh.w	r3, [r7, #35]	; 0x23
			pdu_adv->connect_ind.timeout;
    a004:	8bb3      	ldrh	r3, [r6, #28]
		radio_le_conn_cmplt->timeout =
    a006:	f8a7 3025 	strh.w	r3, [r7, #37]	; 0x25
			pdu_adv->connect_ind.sca;
    a00a:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
    a00e:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    a012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		rx_fc_lock(conn->handle);
    a016:	8c28      	ldrh	r0, [r5, #32]
    a018:	f7fc f880 	bl	611c <rx_fc_lock>
		packet_rx_enqueue();
    a01c:	f7fb ff68 	bl	5ef0 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    a020:	2003      	movs	r0, #3
    a022:	f7fa fd89 	bl	4b38 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    a026:	4607      	mov	r7, r0
    a028:	b920      	cbnz	r0, a034 <isr+0x4dc>
    a02a:	f240 41da 	movw	r1, #1242	; 0x4da
    a02e:	4896      	ldr	r0, [pc, #600]	; (a288 <isr+0x730>)
    a030:	f7f6 fc3e 	bl	8b0 <bt_ctlr_assert_handle>
			node_rx->hdr.handle = conn->handle;
    a034:	8c2b      	ldrh	r3, [r5, #32]
    a036:	80fb      	strh	r3, [r7, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    a038:	230b      	movs	r3, #11
    a03a:	713b      	strb	r3, [r7, #4]
			if (pdu_adv->chan_sel) {
    a03c:	7833      	ldrb	r3, [r6, #0]
    a03e:	f013 0320 	ands.w	r3, r3, #32
    a042:	d00e      	beq.n	a062 <isr+0x50a>
					((u16_t)conn->access_addr[1] << 8) |
    a044:	7c6a      	ldrb	r2, [r5, #17]
					conn->access_addr[0];
    a046:	7c2b      	ldrb	r3, [r5, #16]
					((u16_t)conn->access_addr[3] << 8) |
    a048:	7ce9      	ldrb	r1, [r5, #19]
				u16_t aa_ls =
    a04a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    a04e:	7caa      	ldrb	r2, [r5, #18]
				u16_t aa_ms =
    a050:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    a054:	7f69      	ldrb	r1, [r5, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    a056:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    a058:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    a05c:	83eb      	strh	r3, [r5, #30]
				conn->data_chan_sel = 1;
    a05e:	7769      	strb	r1, [r5, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    a060:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    a062:	72fb      	strb	r3, [r7, #11]
			packet_rx_enqueue();
    a064:	f7fb ff44 	bl	5ef0 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    a068:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
    a06c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    a070:	4986      	ldr	r1, [pc, #536]	; (a28c <isr+0x734>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    a072:	0952      	lsrs	r2, r2, #5
    a074:	f362 0384 	bfi	r3, r2, #2, #3
    a078:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
    a07c:	f894 3728 	ldrb.w	r3, [r4, #1832]	; 0x728
			   gc_lookup_ppm[conn->slave.sca]) *
    a080:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    a084:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    a088:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    a08a:	fb08 f303 	mul.w	r3, r8, r3
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    a08e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    a092:	4a7f      	ldr	r2, [pc, #508]	; (a290 <isr+0x738>)
    a094:	f203 233f 	addw	r3, r3, #575	; 0x23f
    a098:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    a09c:	656b      	str	r3, [r5, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
    a09e:	ea4f 0358 	mov.w	r3, r8, lsr #1
    a0a2:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    a0a4:	65ab      	str	r3, [r5, #88]	; 0x58
			pdu_adv->connect_ind.win_size * 1250;
    a0a6:	7d73      	ldrb	r3, [r6, #21]
    a0a8:	f240 49e2 	movw	r9, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    a0ac:	2700      	movs	r7, #0
			pdu_adv->connect_ind.win_size * 1250;
    a0ae:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
    a0b2:	66ab      	str	r3, [r5, #104]	; 0x68
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    a0b4:	4639      	mov	r1, r7
		conn->slave.window_size_prepare_us = 0;
    a0b6:	666f      	str	r7, [r5, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    a0b8:	4638      	mov	r0, r7
    a0ba:	f004 fbb8 	bl	e82e <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    a0be:	4975      	ldr	r1, [pc, #468]	; (a294 <isr+0x73c>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    a0c0:	4683      	mov	fp, r0
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    a0c2:	f200 4052 	addw	r0, r0, #1106	; 0x452
    a0c6:	a36c      	add	r3, pc, #432	; (adr r3, a278 <isr+0x720>)
    a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a0cc:	fba0 0101 	umull	r0, r1, r0, r1
    a0d0:	f7f6 f8ca 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    a0d4:	f8d4 378c 	ldr.w	r3, [r4, #1932]	; 0x78c
    a0d8:	606b      	str	r3, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    a0da:	2227      	movs	r2, #39	; 0x27
		ticks_slot_offset =
    a0dc:	4293      	cmp	r3, r2
    a0de:	bf38      	it	cc
    a0e0:	4613      	movcc	r3, r2
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    a0e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_slot_offset =
    a0e6:	469a      	mov	sl, r3
		conn_interval_us -=
    a0e8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		conn->hdr.ticks_xtal_to_start =
    a0ea:	602a      	str	r2, [r5, #0]
		conn->hdr.ticks_slot =
    a0ec:	60e8      	str	r0, [r5, #12]
		conn->hdr.ticks_preempt_to_start =
    a0ee:	60af      	str	r7, [r5, #8]
		conn_interval_us -=
    a0f0:	eba8 0803 	sub.w	r8, r8, r3
		conn_offset_us = radio_tmr_end_get();
    a0f4:	f004 fd94 	bl	ec20 <radio_tmr_end_get>
    a0f8:	900c      	str	r0, [sp, #48]	; 0x30
			((u64_t)pdu_adv->connect_ind.win_offset +
    a0fa:	8af0      	ldrh	r0, [r6, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    a0fc:	4639      	mov	r1, r7
		conn_offset_us +=
    a0fe:	fb00 9909 	mla	r9, r0, r9, r9
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    a102:	4638      	mov	r0, r7
    a104:	f004 fb91 	bl	e82a <radio_tx_chain_delay_get>
    a108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a10a:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    a10e:	4499      	add	r9, r3
    a110:	eba9 0900 	sub.w	r9, r9, r0
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    a114:	eba9 030b 	sub.w	r3, r9, fp
    a118:	930c      	str	r3, [sp, #48]	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a11a:	f240 5323 	movw	r3, #1315	; 0x523
    a11e:	9300      	str	r3, [sp, #0]
    a120:	2205      	movs	r2, #5
    a122:	4b5d      	ldr	r3, [pc, #372]	; (a298 <isr+0x740>)
    a124:	f8df b16c 	ldr.w	fp, [pc, #364]	; a294 <isr+0x73c>
    a128:	4639      	mov	r1, r7
    a12a:	4638      	mov	r0, r7
    a12c:	f7f8 fd2a 	bl	2b84 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    a130:	f240 5124 	movw	r1, #1316	; 0x524
    a134:	f7fc f816 	bl	6164 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    a138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a13a:	5ce3      	ldrb	r3, [r4, r3]
    a13c:	f003 030f 	and.w	r3, r3, #15
    a140:	2b01      	cmp	r3, #1
    a142:	d106      	bne.n	a152 <isr+0x5fa>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a144:	9700      	str	r7, [sp, #0]
    a146:	463b      	mov	r3, r7
    a148:	2203      	movs	r2, #3
    a14a:	4639      	mov	r1, r7
    a14c:	4638      	mov	r0, r7
    a14e:	f7f8 fd19 	bl	2b84 <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    a152:	fba8 890b 	umull	r8, r9, r8, fp
    a156:	a348      	add	r3, pc, #288	; (adr r3, a278 <isr+0x720>)
    a158:	e9d3 2300 	ldrd	r2, r3, [r3]
    a15c:	4640      	mov	r0, r8
    a15e:	4649      	mov	r1, r9
    a160:	f7f6 f882 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a164:	f895 3020 	ldrb.w	r3, [r5, #32]
    a168:	68a4      	ldr	r4, [r4, #8]
    a16a:	9506      	str	r5, [sp, #24]
    a16c:	3307      	adds	r3, #7
    a16e:	b2db      	uxtb	r3, r3
    a170:	930b      	str	r3, [sp, #44]	; 0x2c
    a172:	f240 533b 	movw	r3, #1339	; 0x53b
    a176:	9308      	str	r3, [sp, #32]
    a178:	4b48      	ldr	r3, [pc, #288]	; (a29c <isr+0x744>)
    a17a:	9307      	str	r3, [sp, #28]
    a17c:	4b48      	ldr	r3, [pc, #288]	; (a2a0 <isr+0x748>)
    a17e:	9305      	str	r3, [sp, #20]
    a180:	68eb      	ldr	r3, [r5, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    a182:	4a48      	ldr	r2, [pc, #288]	; (a2a4 <isr+0x74c>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a184:	4453      	add	r3, sl
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    a186:	4606      	mov	r6, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a188:	9304      	str	r3, [sp, #16]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    a18a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a18e:	2307      	movs	r3, #7
    a190:	2100      	movs	r1, #0
    a192:	4343      	muls	r3, r0
    a194:	fb02 3301 	mla	r3, r2, r1, r3
    a198:	fba0 1202 	umull	r1, r2, r0, r2
    a19c:	441a      	add	r2, r3
    a19e:	4608      	mov	r0, r1
    a1a0:	ebb8 0000 	subs.w	r0, r8, r0
    a1a4:	4611      	mov	r1, r2
    a1a6:	eb69 0101 	sbc.w	r1, r9, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1aa:	2500      	movs	r5, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    a1ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a1b0:	2300      	movs	r3, #0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1b2:	9503      	str	r5, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    a1b4:	f7f6 f858 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    a1b8:	990c      	ldr	r1, [sp, #48]	; 0x30
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1ba:	9002      	str	r0, [sp, #8]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    a1bc:	a32e      	add	r3, pc, #184	; (adr r3, a278 <isr+0x720>)
    a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1c2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    a1c6:	fba1 010b 	umull	r0, r1, r1, fp
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1ca:	9601      	str	r6, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    a1cc:	f7f6 f84c 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a1d0:	eba4 040a 	sub.w	r4, r4, sl
    a1d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a1d8:	9000      	str	r0, [sp, #0]
    a1da:	4623      	mov	r3, r4
    a1dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a1de:	4629      	mov	r1, r5
    a1e0:	4628      	mov	r0, r5
    a1e2:	f7f8 fc31 	bl	2a48 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a1e6:	f030 0302 	bics.w	r3, r0, #2
    a1ea:	f43f ad60 	beq.w	9cae <isr+0x156>
    a1ee:	f240 513d 	movw	r1, #1341	; 0x53d
    a1f2:	e5ab      	b.n	9d4c <isr+0x1f4>
	return (adv->rx_addr == ci->tx_addr) &&
    a1f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a1f6:	5ce2      	ldrb	r2, [r4, r3]
    a1f8:	7833      	ldrb	r3, [r6, #0]
    a1fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a1fe:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a202:	f47f adf4 	bne.w	9dee <isr+0x296>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    a206:	2206      	movs	r2, #6
    a208:	4639      	mov	r1, r7
    a20a:	f105 0008 	add.w	r0, r5, #8
    a20e:	f7f6 f9de 	bl	5ce <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    a212:	fab0 f080 	clz	r0, r0
    a216:	0940      	lsrs	r0, r0, #5
    a218:	e638      	b.n	9e8c <isr+0x334>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    a21a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    a21e:	079a      	lsls	r2, r3, #30
    a220:	d50d      	bpl.n	a23e <isr+0x6e6>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    a222:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
				      rl_idx)) ||
    a226:	079b      	lsls	r3, r3, #30
    a228:	f57f ade1 	bpl.w	9dee <isr+0x296>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
    a22c:	f1b8 0f00 	cmp.w	r8, #0
    a230:	d10d      	bne.n	a24e <isr+0x6f6>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
    a232:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    a236:	f003 faf3 	bl	d820 <ctrl_irk_whitelisted>
    a23a:	b940      	cbnz	r0, a24e <isr+0x6f6>
    a23c:	e5d7      	b.n	9dee <isr+0x296>
		 ctrl_rl_addr_allowed(ci->tx_addr, ci->connect_ind.init_addr,
    a23e:	aa12      	add	r2, sp, #72	; 0x48
    a240:	1cb1      	adds	r1, r6, #2
    a242:	f3c0 1080 	ubfx	r0, r0, #6, #1
    a246:	f003 fc71 	bl	db2c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
    a24a:	2800      	cmp	r0, #0
    a24c:	d0e9      	beq.n	a222 <isr+0x6ca>
	       isr_adv_ci_adva_check(adv, ci);
    a24e:	4631      	mov	r1, r6
    a250:	4628      	mov	r0, r5
    a252:	f7fb fe29 	bl	5ea8 <isr_adv_ci_adva_check>
    a256:	e619      	b.n	9e8c <isr+0x334>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    a258:	4619      	mov	r1, r3
    a25a:	464a      	mov	r2, r9
    a25c:	4658      	mov	r0, fp
    a25e:	f7f6 f9f7 	bl	650 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    a262:	7833      	ldrb	r3, [r6, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a264:	980c      	ldr	r0, [sp, #48]	; 0x30
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    a266:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a26a:	737b      	strb	r3, [r7, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a26c:	464a      	mov	r2, r9
    a26e:	4651      	mov	r1, sl
    a270:	e6c0      	b.n	9ff4 <isr+0x49c>
    a272:	bf00      	nop
    a274:	f3af 8000 	nop.w
    a278:	1afd498d 	.word	0x1afd498d
    a27c:	00000007 	.word	0x00000007
    a280:	026259ff 	.word	0x026259ff
    a284:	01c9c37f 	.word	0x01c9c37f
    a288:	000109b4 	.word	0x000109b4
    a28c:	000109a4 	.word	0x000109a4
    a290:	000f4240 	.word	0x000f4240
    a294:	3b9aca00 	.word	0x3b9aca00
    a298:	00006165 	.word	0x00006165
    a29c:	00006151 	.word	0x00006151
    a2a0:	00008291 	.word	0x00008291
    a2a4:	1afd498d 	.word	0x1afd498d
		rl_idx = devmatch_ok ?
    a2a8:	f1b8 0f00 	cmp.w	r8, #0
    a2ac:	d01c      	beq.n	a2e8 <isr+0x790>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    a2ae:	f894 064d 	ldrb.w	r0, [r4, #1613]	; 0x64d
		rl_idx = devmatch_ok ?
    a2b2:	4649      	mov	r1, r9
    a2b4:	f3c0 1000 	ubfx	r0, r0, #4, #1
    a2b8:	f003 fa5a 	bl	d770 <ctrl_rl_idx>
    a2bc:	4681      	mov	r9, r0
		if (crc_ok &&
    a2be:	b147      	cbz	r7, a2d2 <isr+0x77a>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    a2c0:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    a2c4:	06df      	lsls	r7, r3, #27
    a2c6:	d519      	bpl.n	a2fc <isr+0x7a4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    a2c8:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    a2cc:	06de      	lsls	r6, r3, #27
    a2ce:	f100 826f 	bmi.w	a7b0 <isr+0xc58>
			_radio.state = STATE_CLOSE;
    a2d2:	2303      	movs	r3, #3
    a2d4:	7523      	strb	r3, [r4, #20]
			radio_disable();
    a2d6:	f004 fac7 	bl	e868 <radio_disable>
			_radio.scanner.state = 0;
    a2da:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    a2de:	f36f 0341 	bfc	r3, #1, #1
    a2e2:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    a2e6:	e4e2      	b.n	9cae <isr+0x156>
		rl_idx = devmatch_ok ?
    a2e8:	f1ba 0f00 	cmp.w	sl, #0
    a2ec:	d003      	beq.n	a2f6 <isr+0x79e>
    a2ee:	4658      	mov	r0, fp
    a2f0:	f003 fa6c 	bl	d7cc <ctrl_rl_irk_idx>
    a2f4:	e7e2      	b.n	a2bc <isr+0x764>
    a2f6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    a2fa:	e7e0      	b.n	a2be <isr+0x766>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    a2fc:	f1b8 0f00 	cmp.w	r8, #0
    a300:	d005      	beq.n	a30e <isr+0x7b6>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    a302:	4649      	mov	r1, r9
    a304:	4650      	mov	r0, sl
    a306:	f003 fbc3 	bl	da90 <ctrl_rl_idx_allowed>
    a30a:	2800      	cmp	r0, #0
    a30c:	d0dc      	beq.n	a2c8 <isr+0x770>
	bool dir_report = false;
    a30e:	2300      	movs	r3, #0
    a310:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    a314:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
    a318:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
    a31c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
		if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    a320:	7a3b      	ldrb	r3, [r7, #8]
    a322:	f003 030f 	and.w	r3, r3, #15
    a326:	2b07      	cmp	r3, #7
    a328:	d16c      	bne.n	a404 <isr+0x8ac>
		if(h->adv_addr){
    a32a:	7afb      	ldrb	r3, [r7, #11]
    a32c:	07d8      	lsls	r0, r3, #31
			ptr += BDADDR_SIZE;
    a32e:	bf4c      	ite	mi
    a330:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    a334:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
    a338:	079a      	lsls	r2, r3, #30
			ptr += BDADDR_SIZE;
    a33a:	bf48      	it	mi
    a33c:	3606      	addmi	r6, #6
		if(h->adi){
    a33e:	071b      	lsls	r3, r3, #28
		if(pdu_adv_rx->len == 0x12){
    a340:	7a7b      	ldrb	r3, [r7, #9]
			ptr += sizeof(*adi_ptr);
    a342:	bf48      	it	mi
    a344:	3602      	addmi	r6, #2
		if(pdu_adv_rx->len == 0x12){
    a346:	2b12      	cmp	r3, #18
    a348:	d11d      	bne.n	a386 <isr+0x82e>
			stop_time_int = k_cycle_get_32();
    a34a:	f7f7 fc2b 	bl	1ba4 <_timer_cycle_get_32>
    a34e:	4bca      	ldr	r3, [pc, #808]	; (a678 <isr+0xb20>)
    a350:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
    a352:	4bca      	ldr	r3, [pc, #808]	; (a67c <isr+0xb24>)
    a354:	681b      	ldr	r3, [r3, #0]
    a356:	eba0 0e03 	sub.w	lr, r0, r3
    a35a:	4bc9      	ldr	r3, [pc, #804]	; (a680 <isr+0xb28>)
    a35c:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
    a360:	4bc8      	ldr	r3, [pc, #800]	; (a684 <isr+0xb2c>)
    a362:	681a      	ldr	r2, [r3, #0]
    a364:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    a368:	fb82 2308 	smull	r2, r3, r2, r8
    a36c:	fba2 010e 	umull	r0, r1, r2, lr
    a370:	fb0e 1103 	mla	r1, lr, r3, r1
    a374:	4bc4      	ldr	r3, [pc, #784]	; (a688 <isr+0xb30>)
    a376:	681a      	ldr	r2, [r3, #0]
    a378:	17d3      	asrs	r3, r2, #31
    a37a:	f7f5 ff75 	bl	268 <__aeabi_uldivmod>
    a37e:	4bc3      	ldr	r3, [pc, #780]	; (a68c <isr+0xb34>)
    a380:	fbb0 f0f8 	udiv	r0, r0, r8
    a384:	6018      	str	r0, [r3, #0]
		if(h->aux_ptr && !aux_scan ){
    a386:	7afb      	ldrb	r3, [r7, #11]
    a388:	06d8      	lsls	r0, r3, #27
    a38a:	d53b      	bpl.n	a404 <isr+0x8ac>
    a38c:	4bc0      	ldr	r3, [pc, #768]	; (a690 <isr+0xb38>)
    a38e:	781a      	ldrb	r2, [r3, #0]
    a390:	2a00      	cmp	r2, #0
    a392:	d137      	bne.n	a404 <isr+0x8ac>
			aux_scan = 0x01;
    a394:	2201      	movs	r2, #1
    a396:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
    a398:	7833      	ldrb	r3, [r6, #0]
    a39a:	f3c3 0305 	ubfx	r3, r3, #0, #6
    a39e:	f884 36b0 	strb.w	r3, [r4, #1712]	; 0x6b0
			_radio.ext_scanner.chan_off	= ap->offs;
    a3a2:	78b3      	ldrb	r3, [r6, #2]
    a3a4:	7870      	ldrb	r0, [r6, #1]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    a3a6:	7832      	ldrb	r2, [r6, #0]
			_radio.ext_scanner.chan_off	= ap->offs;
    a3a8:	f003 031f 	and.w	r3, r3, #31
    a3ac:	ea40 2e03 	orr.w	lr, r0, r3, lsl #8
			_radio.ext_scanner.off_unit	= ap->offs_units;
    a3b0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
			_radio.ext_scanner.chan_off	= ap->offs;
    a3b4:	4bb7      	ldr	r3, [pc, #732]	; (a694 <isr+0xb3c>)
			_radio.ext_scanner.off_unit	= ap->offs_units;
    a3b6:	f884 26d4 	strb.w	r2, [r4, #1748]	; 0x6d4
			_radio.ext_scanner.chan_off	= ap->offs;
    a3ba:	fa1f f08e 	uxth.w	r0, lr
			if(_radio.ext_scanner.off_unit == 0 ){
    a3be:	f012 0fff 	tst.w	r2, #255	; 0xff
			_radio.ext_scanner.chan_off	= ap->offs;
    a3c2:	f04f 0100 	mov.w	r1, #0
    a3c6:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
    a3ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
				_radio.ext_scanner.chan_off *= 30;
    a3ce:	bf0b      	itete	eq
    a3d0:	221e      	moveq	r2, #30
				_radio.ext_scanner.chan_off *= 1200;//300;
    a3d2:	f44f 6096 	movne.w	r0, #1200	; 0x4b0
				_radio.ext_scanner.chan_off *= 30;
    a3d6:	fbae 0102 	umulleq	r0, r1, lr, r2
				_radio.ext_scanner.chan_off *= 1200;//300;
    a3da:	fbae 0100 	umullne	r0, r1, lr, r0
    a3de:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    a3e2:	e9d3 0100 	ldrd	r0, r1, [r3]
    a3e6:	4bac      	ldr	r3, [pc, #688]	; (a698 <isr+0xb40>)
    a3e8:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
    a3ec:	f7f7 fbda 	bl	1ba4 <_timer_cycle_get_32>
    a3f0:	4baa      	ldr	r3, [pc, #680]	; (a69c <isr+0xb44>)
    a3f2:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
    a3f4:	f7f7 fbd6 	bl	1ba4 <_timer_cycle_get_32>
    a3f8:	4ba0      	ldr	r3, [pc, #640]	; (a67c <isr+0xb24>)
    a3fa:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
    a3fc:	f7f8 fc92 	bl	2d24 <ticker_ticks_now_get>
    a400:	f8c4 070c 	str.w	r0, [r4, #1804]	; 0x70c
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    a404:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    a408:	f107 0608 	add.w	r6, r7, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    a40c:	2b00      	cmp	r3, #0
    a40e:	f000 81e6 	beq.w	a7de <isr+0xc86>
    a412:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
    a416:	b133      	cbz	r3, a426 <isr+0x8ce>
				      (_radio.fc_req == _radio.fc_ack)) &&
    a418:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    a41c:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
    a420:	429a      	cmp	r2, r3
    a422:	f040 81dc 	bne.w	a7de <isr+0xc86>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    a426:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    a42a:	f3c3 1000 	ubfx	r0, r3, #4, #1
    a42e:	2800      	cmp	r0, #0
    a430:	f000 81c9 	beq.w	a7c6 <isr+0xc6e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    a434:	7a38      	ldrb	r0, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    a436:	f010 000f 	ands.w	r0, r0, #15
    a43a:	f040 824c 	bne.w	a8d6 <isr+0xd7e>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    a43e:	f004 fbef 	bl	ec20 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    a442:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    a446:	f200 2816 	addw	r8, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    a44a:	4895      	ldr	r0, [pc, #596]	; (a6a0 <isr+0xb48>)
    a44c:	2207      	movs	r2, #7
    a44e:	fba3 0100 	umull	r0, r1, r3, r0
    a452:	fb02 1103 	mla	r1, r2, r3, r1
    a456:	a386      	add	r3, pc, #536	; (adr r3, a670 <isr+0xb18>)
    a458:	e9d3 2300 	ldrd	r2, r3, [r3]
    a45c:	f7f5 ff04 	bl	268 <__aeabi_uldivmod>
    a460:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    a464:	4580      	cmp	r8, r0
    a466:	f080 81ba 	bcs.w	a7de <isr+0xc86>
			node_rx = packet_rx_reserve_get(4);
    a46a:	2004      	movs	r0, #4
    a46c:	f7fa fb64 	bl	4b38 <packet_rx_reserve_get>
		if (node_rx == 0) {
    a470:	4680      	mov	r8, r0
    a472:	2800      	cmp	r0, #0
    a474:	f43f af2d 	beq.w	a2d2 <isr+0x77a>
		_radio.state = STATE_STOP;
    a478:	2304      	movs	r3, #4
    a47a:	7523      	strb	r3, [r4, #20]
		_radio.scanner.conn = NULL;
    a47c:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    a47e:	f8d4 6674 	ldr.w	r6, [r4, #1652]	; 0x674
		_radio.scanner.conn = NULL;
    a482:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    a486:	f004 fa45 	bl	e914 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    a48a:	7803      	ldrb	r3, [r0, #0]
			pdu_adv_tx->chan_sel = 1;
    a48c:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    a490:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    a494:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    a496:	7a3b      	ldrb	r3, [r7, #8]
    a498:	7802      	ldrb	r2, [r0, #0]
    a49a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a49e:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    a4a2:	2322      	movs	r3, #34	; 0x22
    a4a4:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    a4a6:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    a4a8:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    a4aa:	4648      	mov	r0, r9
    a4ac:	f003 f942 	bl	d734 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    a4b0:	f894 364e 	ldrb.w	r3, [r4, #1614]	; 0x64e
		lrpa = ctrl_lrpa_get(rl_idx);
    a4b4:	4601      	mov	r1, r0
    a4b6:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    a4b8:	f013 0f01 	tst.w	r3, #1
    a4bc:	f810 3b02 	ldrb.w	r3, [r0], #2
    a4c0:	f000 8214 	beq.w	a8ec <isr+0xd94>
    a4c4:	2900      	cmp	r1, #0
    a4c6:	f000 8211 	beq.w	a8ec <isr+0xd94>
			pdu_adv_tx->tx_addr = 1;
    a4ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a4ce:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    a4d0:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    a4d2:	f7f6 f891 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    a4d6:	f105 0308 	add.w	r3, r5, #8
    a4da:	4618      	mov	r0, r3
    a4dc:	2206      	movs	r2, #6
    a4de:	f107 010a 	add.w	r1, r7, #10
    a4e2:	930b      	str	r3, [sp, #44]	; 0x2c
    a4e4:	f7f6 f888 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    a4e8:	2204      	movs	r2, #4
    a4ea:	f106 0110 	add.w	r1, r6, #16
    a4ee:	f105 000e 	add.w	r0, r5, #14
    a4f2:	f7f6 f881 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    a4f6:	2203      	movs	r2, #3
    a4f8:	f106 0114 	add.w	r1, r6, #20
    a4fc:	f105 0012 	add.w	r0, r5, #18
    a500:	f7f6 f87a 	bl	5f8 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    a504:	2301      	movs	r3, #1
    a506:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    a508:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
		conn_interval_us =
    a50c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    a510:	4353      	muls	r3, r2
    a512:	930c      	str	r3, [sp, #48]	; 0x30
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    a514:	f004 fb84 	bl	ec20 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    a518:	68e2      	ldr	r2, [r4, #12]
		if (_radio.scanner.win_offset_us == 0) {
    a51a:	f8d4 b678 	ldr.w	fp, [r4, #1656]	; 0x678
		if (!_radio.remainder_anchor ||
    a51e:	2a00      	cmp	r2, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    a520:	f500 63db 	add.w	r3, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    a524:	bfd8      	it	le
    a526:	f200 63ba 	addwle	r3, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    a52a:	f1bb 0f00 	cmp.w	fp, #0
    a52e:	f040 81e8 	bne.w	a902 <isr+0xdaa>
			pdu_adv_tx->connect_ind.win_offset = 0;
    a532:	f885 b016 	strb.w	fp, [r5, #22]
    a536:	f885 b017 	strb.w	fp, [r5, #23]
    a53a:	469b      	mov	fp, r3
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    a53c:	2100      	movs	r1, #0
    a53e:	4608      	mov	r0, r1
    a540:	f004 f96a 	bl	e818 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    a544:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    a546:	ebab 0b00 	sub.w	fp, fp, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    a54a:	4608      	mov	r0, r1
    a54c:	f004 f96d 	bl	e82a <radio_tx_chain_delay_get>
    a550:	ebab 0000 	sub.w	r0, fp, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    a554:	f100 031e 	add.w	r3, r0, #30
    a558:	930e      	str	r3, [sp, #56]	; 0x38
		pdu_adv_tx->connect_ind.interval =
    a55a:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
    a55e:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    a560:	f8b4 366a 	ldrh.w	r3, [r4, #1642]	; 0x66a
    a564:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    a566:	f8b4 366c 	ldrh.w	r3, [r4, #1644]	; 0x66c
    a56a:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    a56c:	f106 0117 	add.w	r1, r6, #23
    a570:	2205      	movs	r2, #5
    a572:	f105 001e 	add.w	r0, r5, #30
    a576:	f7f6 f83f 	bl	5f8 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    a57a:	7fb2      	ldrb	r2, [r6, #30]
    a57c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    a580:	f362 0304 	bfi	r3, r2, #0, #5
    a584:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    a588:	f894 2728 	ldrb.w	r2, [r4, #1832]	; 0x728
    a58c:	f362 1347 	bfi	r3, r2, #5, #3
    a590:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    a594:	f004 f9d8 	bl	e948 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    a598:	4628      	mov	r0, r5
    a59a:	f004 f937 	bl	e80c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    a59e:	f004 f981 	bl	e8a4 <radio_is_ready>
    a5a2:	b120      	cbz	r0, a5ae <isr+0xa56>
    a5a4:	f240 61fe 	movw	r1, #1790	; 0x6fe
    a5a8:	483e      	ldr	r0, [pc, #248]	; (a6a4 <isr+0xb4c>)
    a5aa:	f7f6 f981 	bl	8b0 <bt_ctlr_assert_handle>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    a5ae:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a5b2:	f8d4 1710 	ldr.w	r1, [r4, #1808]	; 0x710
    a5b6:	4630      	mov	r0, r6
    a5b8:	f7f7 fc01 	bl	1dbe <mem_index_get>
		radio_le_conn_cmplt->status = 0x00;
    a5bc:	2300      	movs	r3, #0
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    a5be:	4629      	mov	r1, r5
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    a5c0:	8430      	strh	r0, [r6, #32]
		radio_le_conn_cmplt->status = 0x00;
    a5c2:	f888 300b 	strb.w	r3, [r8, #11]
		radio_le_conn_cmplt->role = 0x00;
    a5c6:	f888 300c 	strb.w	r3, [r8, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    a5ca:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.handle = conn->handle;
    a5ce:	f8a8 0006 	strh.w	r0, [r8, #6]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    a5d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    a5d6:	f04f 0b06 	mov.w	fp, #6
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    a5da:	f888 301a 	strb.w	r3, [r8, #26]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    a5de:	f888 b004 	strb.w	fp, [r8, #4]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    a5e2:	465a      	mov	r2, fp
    a5e4:	f108 001b 	add.w	r0, r8, #27
    a5e8:	f7f6 f806 	bl	5f8 <memcpy>
    a5ec:	f108 030e 	add.w	r3, r8, #14
    a5f0:	930d      	str	r3, [sp, #52]	; 0x34
    a5f2:	f108 0314 	add.w	r3, r8, #20
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
    a5f6:	f1ba 0f00 	cmp.w	sl, #0
    a5fa:	f000 8192 	beq.w	a922 <isr+0xdca>
    a5fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a602:	f000 818e 	beq.w	a922 <isr+0xdca>
			ll_rl_id_addr_get(rl_idx,
    a606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a608:	930f      	str	r3, [sp, #60]	; 0x3c
    a60a:	f108 010d 	add.w	r1, r8, #13
    a60e:	4648      	mov	r0, r9
    a610:	f003 fa62 	bl	dad8 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
    a614:	f898 200d 	ldrb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    a618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a61a:	990b      	ldr	r1, [sp, #44]	; 0x2c
			radio_le_conn_cmplt->peer_addr_type += 2;
    a61c:	3202      	adds	r2, #2
    a61e:	f888 200d 	strb.w	r2, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
    a622:	4618      	mov	r0, r3
    a624:	465a      	mov	r2, fp
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a626:	f7f5 ffe7 	bl	5f8 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    a62a:	f8b4 3668 	ldrh.w	r3, [r4, #1640]	; 0x668
    a62e:	f8a8 3021 	strh.w	r3, [r8, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    a632:	f8b4 366a 	ldrh.w	r3, [r4, #1642]	; 0x66a
    a636:	f8a8 3023 	strh.w	r3, [r8, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    a63a:	f8b4 366c 	ldrh.w	r3, [r4, #1644]	; 0x66c
    a63e:	f8a8 3025 	strh.w	r3, [r8, #37]	; 0x25
			pdu_adv_tx->connect_ind.sca;
    a642:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    a646:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    a64a:	f888 3027 	strb.w	r3, [r8, #39]	; 0x27
		rx_fc_lock(conn->handle);
    a64e:	8c30      	ldrh	r0, [r6, #32]
    a650:	f7fb fd64 	bl	611c <rx_fc_lock>
		packet_rx_enqueue();
    a654:	f7fb fc4c 	bl	5ef0 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    a658:	2003      	movs	r0, #3
    a65a:	f7fa fa6d 	bl	4b38 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    a65e:	4605      	mov	r5, r0
    a660:	bb10      	cbnz	r0, a6a8 <isr+0xb50>
    a662:	f240 7144 	movw	r1, #1860	; 0x744
    a666:	480f      	ldr	r0, [pc, #60]	; (a6a4 <isr+0xb4c>)
    a668:	f7f6 f922 	bl	8b0 <bt_ctlr_assert_handle>
    a66c:	e01c      	b.n	a6a8 <isr+0xb50>
    a66e:	bf00      	nop
    a670:	3b9aca00 	.word	0x3b9aca00
    a674:	00000000 	.word	0x00000000
    a678:	20003bf8 	.word	0x20003bf8
    a67c:	20003b68 	.word	0x20003b68
    a680:	20003c28 	.word	0x20003c28
    a684:	20005624 	.word	0x20005624
    a688:	20005620 	.word	0x20005620
    a68c:	20003c4c 	.word	0x20003c4c
    a690:	20000ad8 	.word	0x20000ad8
    a694:	200009f8 	.word	0x200009f8
    a698:	20000a08 	.word	0x20000a08
    a69c:	20003c20 	.word	0x20003c20
    a6a0:	1afd498d 	.word	0x1afd498d
    a6a4:	000109b4 	.word	0x000109b4
			node_rx->hdr.handle = conn->handle;
    a6a8:	8c33      	ldrh	r3, [r6, #32]
    a6aa:	80eb      	strh	r3, [r5, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    a6ac:	230b      	movs	r3, #11
    a6ae:	712b      	strb	r3, [r5, #4]
			if (pdu_adv_rx->chan_sel) {
    a6b0:	7a3b      	ldrb	r3, [r7, #8]
    a6b2:	f013 0320 	ands.w	r3, r3, #32
    a6b6:	d00e      	beq.n	a6d6 <isr+0xb7e>
					((u16_t)conn->access_addr[1] << 8) |
    a6b8:	7c72      	ldrb	r2, [r6, #17]
					conn->access_addr[0];
    a6ba:	7c33      	ldrb	r3, [r6, #16]
					((u16_t)conn->access_addr[3] << 8) |
    a6bc:	7cf1      	ldrb	r1, [r6, #19]
				u16_t aa_ls =
    a6be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    a6c2:	7cb2      	ldrb	r2, [r6, #18]
				u16_t aa_ms =
    a6c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    a6c8:	7f71      	ldrb	r1, [r6, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    a6ca:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    a6cc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    a6d0:	83f3      	strh	r3, [r6, #30]
				conn->data_chan_sel = 1;
    a6d2:	7771      	strb	r1, [r6, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    a6d4:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    a6d6:	72eb      	strb	r3, [r5, #11]
			packet_rx_enqueue();
    a6d8:	f7fb fc0a 	bl	5ef0 <packet_rx_enqueue>
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    a6dc:	2327      	movs	r3, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    a6de:	f8d4 778c 	ldr.w	r7, [r4, #1932]	; 0x78c
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    a6e2:	6033      	str	r3, [r6, #0]
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    a6e4:	f8d4 3670 	ldr.w	r3, [r4, #1648]	; 0x670
    a6e8:	60f3      	str	r3, [r6, #12]
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    a6ea:	2500      	movs	r5, #0
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a6ec:	f44f 63ee 	mov.w	r3, #1904	; 0x770
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    a6f0:	2f27      	cmp	r7, #39	; 0x27
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    a6f2:	6077      	str	r7, [r6, #4]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a6f4:	f04f 0206 	mov.w	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    a6f8:	60b5      	str	r5, [r6, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a6fa:	4629      	mov	r1, r5
    a6fc:	9300      	str	r3, [sp, #0]
    a6fe:	4628      	mov	r0, r5
    a700:	4bbb      	ldr	r3, [pc, #748]	; (a9f0 <isr+0xe98>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    a702:	f8df a300 	ldr.w	sl, [pc, #768]	; aa04 <isr+0xeac>
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    a706:	bf38      	it	cc
    a708:	2727      	movcc	r7, #39	; 0x27
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a70a:	f7f8 fa3b 	bl	2b84 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    a70e:	f240 7171 	movw	r1, #1905	; 0x771
    a712:	f7fb fd41 	bl	6198 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    a716:	462b      	mov	r3, r5
    a718:	2204      	movs	r2, #4
    a71a:	4629      	mov	r1, r5
    a71c:	9500      	str	r5, [sp, #0]
    a71e:	4628      	mov	r0, r5
    a720:	f7f8 fa30 	bl	2b84 <ticker_stop>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    a724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a726:	fba3 890a 	umull	r8, r9, r3, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a72a:	68a3      	ldr	r3, [r4, #8]
    a72c:	f896 4020 	ldrb.w	r4, [r6, #32]
		ticker_status =
    a730:	9606      	str	r6, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a732:	eba3 0b07 	sub.w	fp, r3, r7
		ticker_status =
    a736:	f44f 63f1 	mov.w	r3, #1928	; 0x788
    a73a:	9308      	str	r3, [sp, #32]
    a73c:	4bad      	ldr	r3, [pc, #692]	; (a9f4 <isr+0xe9c>)
    a73e:	9307      	str	r3, [sp, #28]
    a740:	4bad      	ldr	r3, [pc, #692]	; (a9f8 <isr+0xea0>)
    a742:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a744:	68f3      	ldr	r3, [r6, #12]
		ticker_status =
    a746:	9503      	str	r5, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a748:	441f      	add	r7, r3
				     HAL_TICKER_REMAINDER(conn_interval_us),
    a74a:	4640      	mov	r0, r8
    a74c:	a3a6      	add	r3, pc, #664	; (adr r3, a9e8 <isr+0xe90>)
    a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a752:	4649      	mov	r1, r9
		ticker_status =
    a754:	9704      	str	r7, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    a756:	f7f5 fd87 	bl	268 <__aeabi_uldivmod>
    a75a:	4610      	mov	r0, r2
    a75c:	4619      	mov	r1, r3
    a75e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a762:	2300      	movs	r3, #0
    a764:	f7f5 fd80 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    a768:	a39f      	add	r3, pc, #636	; (adr r3, a9e8 <isr+0xe90>)
    a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a76e:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    a770:	4649      	mov	r1, r9
    a772:	4640      	mov	r0, r8
    a774:	f7f5 fd78 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    a778:	990e      	ldr	r1, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    a77a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    a77c:	a39a      	add	r3, pc, #616	; (adr r3, a9e8 <isr+0xe90>)
    a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a782:	fba1 010a 	umull	r0, r1, r1, sl
    a786:	f7f5 fd6f 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a78a:	3407      	adds	r4, #7
    a78c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    a790:	b2e4      	uxtb	r4, r4
    a792:	9000      	str	r0, [sp, #0]
    a794:	465b      	mov	r3, fp
    a796:	4622      	mov	r2, r4
    a798:	4629      	mov	r1, r5
    a79a:	4628      	mov	r0, r5
    a79c:	f7f8 f954 	bl	2a48 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    a7a0:	f030 0302 	bics.w	r3, r0, #2
    a7a4:	f43f aa83 	beq.w	9cae <isr+0x156>
    a7a8:	f240 718a 	movw	r1, #1930	; 0x78a
    a7ac:	f7ff bace 	b.w	9d4c <isr+0x1f4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    a7b0:	f1b8 0f00 	cmp.w	r8, #0
    a7b4:	f47f adab 	bne.w	a30e <isr+0x7b6>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    a7b8:	4648      	mov	r0, r9
    a7ba:	f003 f831 	bl	d820 <ctrl_irk_whitelisted>
		if (crc_ok &&
    a7be:	2800      	cmp	r0, #0
    a7c0:	f43f ad87 	beq.w	a2d2 <isr+0x77a>
    a7c4:	e5a3      	b.n	a30e <isr+0x7b6>
	if (rl_idx != FILTER_IDX_NONE) {
    a7c6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    a7ca:	d073      	beq.n	a8b4 <isr+0xd5c>
		return (rl_idx == _radio.scanner.rl_idx);
    a7cc:	f894 064f 	ldrb.w	r0, [r4, #1615]	; 0x64f
    a7d0:	eba0 0209 	sub.w	r2, r0, r9
    a7d4:	4250      	negs	r0, r2
    a7d6:	4150      	adcs	r0, r2
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    a7d8:	2800      	cmp	r0, #0
    a7da:	f47f ae2b 	bne.w	a434 <isr+0x8dc>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    a7de:	7a38      	ldrb	r0, [r7, #8]
    a7e0:	f010 000f 	ands.w	r0, r0, #15
    a7e4:	d002      	beq.n	a7ec <isr+0xc94>
    a7e6:	2806      	cmp	r0, #6
    a7e8:	f040 80c7 	bne.w	a97a <isr+0xe22>
		 (_radio.scanner.type != 0) &&
    a7ec:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    a7f0:	071b      	lsls	r3, r3, #28
    a7f2:	f140 80ad 	bpl.w	a950 <isr+0xdf8>
		 (_radio.scanner.type != 0) &&
    a7f6:	f8d4 2674 	ldr.w	r2, [r4, #1652]	; 0x674
    a7fa:	2a00      	cmp	r2, #0
    a7fc:	f040 80a8 	bne.w	a950 <isr+0xdf8>
		err = isr_rx_scan_report(rssi_ready,
    a800:	f1ba 0f00 	cmp.w	sl, #0
    a804:	bf14      	ite	ne
    a806:	4649      	movne	r1, r9
    a808:	21ff      	moveq	r1, #255	; 0xff
    a80a:	4628      	mov	r0, r5
    a80c:	f7fb fc40 	bl	6090 <isr_rx_scan_report>
		if (err) {
    a810:	2800      	cmp	r0, #0
    a812:	f47f ad5e 	bne.w	a2d2 <isr+0x77a>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    a816:	7a3b      	ldrb	r3, [r7, #8]
    a818:	f003 030f 	and.w	r3, r3, #15
    a81c:	2b07      	cmp	r3, #7
    a81e:	d101      	bne.n	a824 <isr+0xccc>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    a820:	f004 f878 	bl	e914 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    a824:	f004 f876 	bl	e914 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    a828:	7803      	ldrb	r3, [r0, #0]
    a82a:	2203      	movs	r2, #3
    a82c:	f362 0303 	bfi	r3, r2, #0, #4
    a830:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    a832:	7a3b      	ldrb	r3, [r7, #8]
    a834:	7802      	ldrb	r2, [r0, #0]
    a836:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a83a:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    a83e:	230c      	movs	r3, #12
    a840:	7043      	strb	r3, [r0, #1]
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    a842:	4605      	mov	r5, r0
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    a844:	7002      	strb	r2, [r0, #0]
		lrpa = ctrl_lrpa_get(rl_idx);
    a846:	4648      	mov	r0, r9
    a848:	f002 ff74 	bl	d734 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
    a84c:	f894 364e 	ldrb.w	r3, [r4, #1614]	; 0x64e
		lrpa = ctrl_lrpa_get(rl_idx);
    a850:	4601      	mov	r1, r0
    a852:	4628      	mov	r0, r5
		if (_radio.scanner.rpa_gen && lrpa) {
    a854:	f013 0f01 	tst.w	r3, #1
    a858:	f810 3b02 	ldrb.w	r3, [r0], #2
    a85c:	d06f      	beq.n	a93e <isr+0xde6>
    a85e:	2900      	cmp	r1, #0
    a860:	d06d      	beq.n	a93e <isr+0xde6>
			pdu_adv_tx->tx_addr = 1;
    a862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a866:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    a868:	2206      	movs	r2, #6
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    a86a:	f7f5 fec5 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    a86e:	2206      	movs	r2, #6
    a870:	f107 010a 	add.w	r1, r7, #10
    a874:	f105 0008 	add.w	r0, r5, #8
    a878:	f7f5 febe 	bl	5f8 <memcpy>
		_radio.scanner.state = 1;
    a87c:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    a880:	f043 0302 	orr.w	r3, r3, #2
    a884:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
		radio_tmr_tifs_set(RADIO_TIFS);
    a888:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    a88a:	2302      	movs	r3, #2
    a88c:	7523      	strb	r3, [r4, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    a88e:	f004 f8e3 	bl	ea58 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    a892:	2000      	movs	r0, #0
    a894:	f004 f842 	bl	e91c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    a898:	4628      	mov	r0, r5
    a89a:	f003 ffb7 	bl	e80c <radio_pkt_tx_set>
		radio_tmr_end_capture();
    a89e:	f004 f9ad 	bl	ebfc <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
    a8a2:	f003 ffff 	bl	e8a4 <radio_is_ready>
    a8a6:	2800      	cmp	r0, #0
    a8a8:	f43f aa01 	beq.w	9cae <isr+0x156>
    a8ac:	f240 71d1 	movw	r1, #2001	; 0x7d1
    a8b0:	f7ff ba4c 	b.w	9d4c <isr+0x1f4>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    a8b4:	7a3a      	ldrb	r2, [r7, #8]
    a8b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a8ba:	f3c2 1280 	ubfx	r2, r2, #6, #1
    a8be:	4293      	cmp	r3, r2
    a8c0:	d18a      	bne.n	a7d8 <isr+0xc80>
		(memcmp(&_radio.scanner.adv_addr[0],
    a8c2:	2206      	movs	r2, #6
    a8c4:	f107 010a 	add.w	r1, r7, #10
    a8c8:	484c      	ldr	r0, [pc, #304]	; (a9fc <isr+0xea4>)
    a8ca:	f7f5 fe80 	bl	5ce <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    a8ce:	fab0 f080 	clz	r0, r0
    a8d2:	0940      	lsrs	r0, r0, #5
    a8d4:	e780      	b.n	a7d8 <isr+0xc80>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    a8d6:	2801      	cmp	r0, #1
    a8d8:	d185      	bne.n	a7e6 <isr+0xc8e>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    a8da:	2300      	movs	r3, #0
    a8dc:	464a      	mov	r2, r9
    a8de:	4631      	mov	r1, r6
    a8e0:	f7fb fb8a 	bl	5ff8 <isr_scan_tgta_check>
				      (_radio.fc_req == _radio.fc_ack)) &&
    a8e4:	2800      	cmp	r0, #0
    a8e6:	f43f af7a 	beq.w	a7de <isr+0xc86>
    a8ea:	e5a8      	b.n	a43e <isr+0x8e6>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a8ec:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    a8f0:	4943      	ldr	r1, [pc, #268]	; (aa00 <isr+0xea8>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a8f2:	09d2      	lsrs	r2, r2, #7
    a8f4:	f362 1386 	bfi	r3, r2, #6, #1
    a8f8:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    a8fa:	2206      	movs	r2, #6
    a8fc:	e5e9      	b.n	a4d2 <isr+0x97a>
				conn_space_us += conn_interval_us;
    a8fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a900:	4493      	add	fp, r2
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    a902:	f1bb 0f00 	cmp.w	fp, #0
    a906:	dbfa      	blt.n	a8fe <isr+0xda6>
    a908:	459b      	cmp	fp, r3
    a90a:	d3f8      	bcc.n	a8fe <isr+0xda6>
				(conn_space_us - conn_offset_us) / 1250;
    a90c:	ebab 0303 	sub.w	r3, fp, r3
			pdu_adv_tx->connect_ind.win_offset =
    a910:	f240 42e2 	movw	r2, #1250	; 0x4e2
    a914:	fbb3 f3f2 	udiv	r3, r3, r2
    a918:	82eb      	strh	r3, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    a91a:	7d6b      	ldrb	r3, [r5, #21]
    a91c:	3301      	adds	r3, #1
    a91e:	756b      	strb	r3, [r5, #21]
    a920:	e60c      	b.n	a53c <isr+0x9e4>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
    a922:	2206      	movs	r2, #6
    a924:	2100      	movs	r1, #0
    a926:	4618      	mov	r0, r3
    a928:	f7f5 fe92 	bl	650 <memset>
				pdu_adv_tx->rx_addr;
    a92c:	782b      	ldrb	r3, [r5, #0]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a92e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a930:	980d      	ldr	r0, [sp, #52]	; 0x34
				pdu_adv_tx->rx_addr;
    a932:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
    a936:	f888 300d 	strb.w	r3, [r8, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    a93a:	2206      	movs	r2, #6
    a93c:	e673      	b.n	a626 <isr+0xace>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a93e:	f894 264d 	ldrb.w	r2, [r4, #1613]	; 0x64d
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    a942:	492f      	ldr	r1, [pc, #188]	; (aa00 <isr+0xea8>)
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    a944:	09d2      	lsrs	r2, r2, #7
    a946:	f362 1386 	bfi	r3, r2, #6, #1
    a94a:	702b      	strb	r3, [r5, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    a94c:	2206      	movs	r2, #6
    a94e:	e78c      	b.n	a86a <isr+0xd12>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    a950:	b998      	cbnz	r0, a97a <isr+0xe22>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    a952:	7a7b      	ldrb	r3, [r7, #9]
    a954:	2b00      	cmp	r3, #0
    a956:	f43f acbc 	beq.w	a2d2 <isr+0x77a>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    a95a:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
    a95e:	2b00      	cmp	r3, #0
    a960:	f47f acb7 	bne.w	a2d2 <isr+0x77a>
		err = isr_rx_scan_report(rssi_ready,
    a964:	f1ba 0f00 	cmp.w	sl, #0
    a968:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    a96c:	bf14      	ite	ne
    a96e:	4649      	movne	r1, r9
    a970:	21ff      	moveq	r1, #255	; 0xff
    a972:	4628      	mov	r0, r5
    a974:	f7fb fb8c 	bl	6090 <isr_rx_scan_report>
    a978:	e4ab      	b.n	a2d2 <isr+0x77a>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    a97a:	2801      	cmp	r0, #1
    a97c:	d00d      	beq.n	a99a <isr+0xe42>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    a97e:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    a980:	f003 020b 	and.w	r2, r3, #11
    a984:	2a02      	cmp	r2, #2
    a986:	d0e4      	beq.n	a952 <isr+0xdfa>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    a988:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    a98c:	2b07      	cmp	r3, #7
    a98e:	d10d      	bne.n	a9ac <isr+0xe54>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    a990:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    a994:	0758      	lsls	r0, r3, #29
    a996:	d1dc      	bne.n	a952 <isr+0xdfa>
    a998:	e49b      	b.n	a2d2 <isr+0x77a>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    a99a:	ab12      	add	r3, sp, #72	; 0x48
    a99c:	464a      	mov	r2, r9
    a99e:	4631      	mov	r1, r6
    a9a0:	2000      	movs	r0, #0
    a9a2:	f7fb fb29 	bl	5ff8 <isr_scan_tgta_check>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    a9a6:	2800      	cmp	r0, #0
    a9a8:	d1d3      	bne.n	a952 <isr+0xdfa>
    a9aa:	e7e8      	b.n	a97e <isr+0xe26>
		   (_radio.scanner.phy)) ||
    a9ac:	2b04      	cmp	r3, #4
    a9ae:	f47f ac90 	bne.w	a2d2 <isr+0x77a>
		   (_radio.scanner.state != 0) &&
    a9b2:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    a9b6:	0799      	lsls	r1, r3, #30
    a9b8:	f57f ac8b 	bpl.w	a2d2 <isr+0x77a>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    a9bc:	f003 ffaa 	bl	e914 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    a9c0:	7a3b      	ldrb	r3, [r7, #8]
    a9c2:	7802      	ldrb	r2, [r0, #0]
    a9c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    a9c8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    a9cc:	f47f ac81 	bne.w	a2d2 <isr+0x77a>
		(memcmp(&sreq->scan_req.adv_addr[0],
    a9d0:	2206      	movs	r2, #6
    a9d2:	f107 010a 	add.w	r1, r7, #10
    a9d6:	3008      	adds	r0, #8
    a9d8:	f7f5 fdf9 	bl	5ce <memcmp>
		   (_radio.scanner.state != 0) &&
    a9dc:	2800      	cmp	r0, #0
    a9de:	d0b8      	beq.n	a952 <isr+0xdfa>
    a9e0:	e477      	b.n	a2d2 <isr+0x77a>
    a9e2:	bf00      	nop
    a9e4:	f3af 8000 	nop.w
    a9e8:	1afd498d 	.word	0x1afd498d
    a9ec:	00000007 	.word	0x00000007
    a9f0:	00006199 	.word	0x00006199
    a9f4:	00006151 	.word	0x00006151
    a9f8:	0000828d 	.word	0x0000828d
    a9fc:	20000996 	.word	0x20000996
    aa00:	20000990 	.word	0x20000990
    aa04:	3b9aca00 	.word	0x3b9aca00
	_radio.packet_counter++;
    aa08:	f894 3720 	ldrb.w	r3, [r4, #1824]	; 0x720
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    aa0c:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
	_radio.packet_counter++;
    aa10:	3301      	adds	r3, #1
    aa12:	f884 3720 	strb.w	r3, [r4, #1824]	; 0x720
	u8_t rx_enqueue = 0;
    aa16:	2600      	movs	r6, #0
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    aa18:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
	u8_t rx_enqueue = 0;
    aa1c:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    aa20:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    aa24:	2301      	movs	r3, #1
    aa26:	f888 3004 	strb.w	r3, [r8, #4]
	if (crc_ok) {
    aa2a:	2f00      	cmp	r7, #0
    aa2c:	f000 82a2 	beq.w	af74 <isr+0x141c>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    aa30:	f8d4 571c 	ldr.w	r5, [r4, #1820]	; 0x71c
    aa34:	f898 1008 	ldrb.w	r1, [r8, #8]
    aa38:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    aa3c:	f3c1 0180 	ubfx	r1, r1, #2, #1
    aa40:	f003 0201 	and.w	r2, r3, #1
    aa44:	4291      	cmp	r1, r2
    aa46:	f000 8188 	beq.w	ad5a <isr+0x1202>
		_radio.conn_curr->sn++;
    aa4a:	f082 0201 	eor.w	r2, r2, #1
    aa4e:	f362 0300 	bfi	r3, r2, #0, #1
    aa52:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
    aa56:	7ce3      	ldrb	r3, [r4, #19]
    aa58:	2b03      	cmp	r3, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    aa5a:	bf02      	ittt	eq
    aa5c:	f895 3050 	ldrbeq.w	r3, [r5, #80]	; 0x50
    aa60:	f043 0301 	orreq.w	r3, r3, #1
    aa64:	f885 3050 	strbeq.w	r3, [r5, #80]	; 0x50
		if (_radio.conn_curr->empty == 0) {
    aa68:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    aa6c:	061a      	lsls	r2, r3, #24
    aa6e:	f100 816f 	bmi.w	ad50 <isr+0x11f8>
			node_tx = _radio.conn_curr->pkt_tx_head;
    aa72:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
				_radio.conn_curr->packet_tx_head_offset);
    aa76:	f895 1151 	ldrb.w	r1, [r5, #337]	; 0x151
			pdu_data_tx = (void *)(node_tx->pdu_data +
    aa7a:	1d30      	adds	r0, r6, #4
    aa7c:	eb00 0a01 	add.w	sl, r0, r1
			pdu_data_tx_len = pdu_data_tx->len;
    aa80:	f89a 9001 	ldrb.w	r9, [sl, #1]
			if (pdu_data_tx_len != 0) {
    aa84:	f1b9 0f00 	cmp.w	r9, #0
    aa88:	f000 8091 	beq.w	abae <isr+0x1056>
				if (_radio.conn_curr->enc_tx) {
    aa8c:	069b      	lsls	r3, r3, #26
    aa8e:	d50b      	bpl.n	aaa8 <isr+0xf50>
					_radio.conn_curr->ccm_tx.counter++;
    aa90:	f8d5 b12a 	ldr.w	fp, [r5, #298]	; 0x12a
    aa94:	f8d5 c12e 	ldr.w	ip, [r5, #302]	; 0x12e
    aa98:	f11b 0201 	adds.w	r2, fp, #1
    aa9c:	f14c 0300 	adc.w	r3, ip, #0
    aaa0:	f8c5 212a 	str.w	r2, [r5, #298]	; 0x12a
    aaa4:	f8c5 312e 	str.w	r3, [r5, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    aaa8:	5c43      	ldrb	r3, [r0, r1]
    aaaa:	f003 0303 	and.w	r3, r3, #3
    aaae:	2b03      	cmp	r3, #3
    aab0:	d17d      	bne.n	abae <isr+0x1056>
	switch (pdu_data_tx->llctrl.opcode) {
    aab2:	f89a 3003 	ldrb.w	r3, [sl, #3]
    aab6:	3b02      	subs	r3, #2
    aab8:	2b16      	cmp	r3, #22
    aaba:	d878      	bhi.n	abae <isr+0x1056>
    aabc:	e8df f013 	tbh	[pc, r3, lsl #1]
    aac0:	005b0017 	.word	0x005b0017
    aac4:	007700ad 	.word	0x007700ad
    aac8:	00770077 	.word	0x00770077
    aacc:	00770077 	.word	0x00770077
    aad0:	00840079 	.word	0x00840079
    aad4:	00b40077 	.word	0x00b40077
    aad8:	00770077 	.word	0x00770077
    aadc:	00770077 	.word	0x00770077
    aae0:	00770077 	.word	0x00770077
    aae4:	007700be 	.word	0x007700be
    aae8:	00dd00d6 	.word	0x00dd00d6
    aaec:	0108      	.short	0x0108
		_radio.state = STATE_CLOSE;
    aaee:	2303      	movs	r3, #3
    aaf0:	7523      	strb	r3, [r4, #20]
		radio_disable();
    aaf2:	f003 feb9 	bl	e868 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    aaf6:	f003 fed5 	bl	e8a4 <radio_is_ready>
    aafa:	b120      	cbz	r0, ab06 <isr+0xfae>
    aafc:	f640 0117 	movw	r1, #2071	; 0x817
    ab00:	4891      	ldr	r0, [pc, #580]	; (ad48 <isr+0x11f0>)
    ab02:	f7f5 fed5 	bl	8b0 <bt_ctlr_assert_handle>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    ab06:	f89a 1004 	ldrb.w	r1, [sl, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    ab0a:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    ab0e:	2913      	cmp	r1, #19
    ab10:	bf08      	it	eq
    ab12:	2116      	moveq	r1, #22
    ab14:	f7fb fa40 	bl	5f98 <terminate_ind_rx_enqueue>
		terminate = 1;
    ab18:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ab1a:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    ab1e:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
    ab22:	4499      	add	r9, r3
			if (_radio.conn_curr->packet_tx_head_offset ==
    ab24:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ab28:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    ab2c:	454b      	cmp	r3, r9
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    ab2e:	f880 9151 	strb.w	r9, [r0, #337]	; 0x151
			if (_radio.conn_curr->packet_tx_head_offset ==
    ab32:	d11e      	bne.n	ab72 <isr+0x101a>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    ab34:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    ab38:	f8d0 1140 	ldr.w	r1, [r0, #320]	; 0x140
	conn->packet_tx_head_len = 0;
    ab3c:	2200      	movs	r2, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    ab3e:	428b      	cmp	r3, r1
	conn->packet_tx_head_len = 0;
    ab40:	f880 2150 	strb.w	r2, [r0, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    ab44:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    ab48:	f040 80c9 	bne.w	acde <isr+0x1186>
		if (node_tx) {
    ab4c:	b18e      	cbz	r6, ab72 <isr+0x101a>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    ab4e:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    ab52:	f8d3 e000 	ldr.w	lr, [r3]
    ab56:	f8c0 e13c 	str.w	lr, [r0, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    ab5a:	428b      	cmp	r3, r1
				conn->pkt_tx_ctrl = NULL;
    ab5c:	bf06      	itte	eq
    ab5e:	f8c0 2140 	streq.w	r2, [r0, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
    ab62:	f8c0 2144 	streq.w	r2, [r0, #324]	; 0x144
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    ab66:	f8c0 e140 	strne.w	lr, [r0, #320]	; 0x140
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    ab6a:	4978      	ldr	r1, [pc, #480]	; (ad4c <isr+0x11f4>)
    ab6c:	4630      	mov	r0, r6
    ab6e:	f7f7 f908 	bl	1d82 <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    ab72:	2600      	movs	r6, #0
    ab74:	e0bc      	b.n	acf0 <isr+0x1198>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    ab76:	2208      	movs	r2, #8
    ab78:	f10a 010e 	add.w	r1, sl, #14
    ab7c:	f105 0094 	add.w	r0, r5, #148	; 0x94
    ab80:	f7f5 fd3a 	bl	5f8 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    ab84:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    ab88:	2204      	movs	r2, #4
    ab8a:	f10a 0116 	add.w	r1, sl, #22
    ab8e:	f500 7089 	add.w	r0, r0, #274	; 0x112
    ab92:	f7f5 fd31 	bl	5f8 <memcpy>
		_radio.conn_curr->pause_tx = 1;
    ab96:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    ab9a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ab9e:	f042 0208 	orr.w	r2, r2, #8
    aba2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    aba6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
    abaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
    abae:	2500      	movs	r5, #0
    abb0:	e7b3      	b.n	ab1a <isr+0xfc2>
		_radio.conn_curr->pause_tx = 1;
    abb2:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
    abb6:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    abba:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
    abbe:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
		_radio.conn_curr->procedure_expire = 0;
    abc2:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    abc6:	e7f2      	b.n	abae <isr+0x1056>
		if (_radio.role == ROLE_MASTER) {
    abc8:	f894 a013 	ldrb.w	sl, [r4, #19]
    abcc:	fa5f fa8a 	uxtb.w	sl, sl
    abd0:	f1ba 0f04 	cmp.w	sl, #4
    abd4:	d121      	bne.n	ac1a <isr+0x10c2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    abd6:	7933      	ldrb	r3, [r6, #4]
    abd8:	f043 0303 	orr.w	r3, r3, #3
    abdc:	7133      	strb	r3, [r6, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
    abde:	2317      	movs	r3, #23
    abe0:	7173      	strb	r3, [r6, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    abe2:	2303      	movs	r3, #3
    abe4:	71f3      	strb	r3, [r6, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0],
    abe6:	2208      	movs	r2, #8
    abe8:	f105 017a 	add.w	r1, r5, #122	; 0x7a
    abec:	3004      	adds	r0, #4
    abee:	f7f5 fd03 	bl	5f8 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] =
    abf2:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
    abf6:	7433      	strb	r3, [r6, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] =
    abf8:	f895 3083 	ldrb.w	r3, [r5, #131]	; 0x83
    abfc:	7473      	strb	r3, [r6, #17]
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.skdm,
    abfe:	f106 0112 	add.w	r1, r6, #18
    ac02:	2208      	movs	r2, #8
    ac04:	6860      	ldr	r0, [r4, #4]
    ac06:	f7f6 ff11 	bl	1a2c <entropy_get_entropy_isr>
	entropy_get_entropy_isr(_radio.entropy, pdu_ctrl_tx->llctrl.enc_req.ivm,
    ac0a:	f106 011a 	add.w	r1, r6, #26
    ac0e:	4652      	mov	r2, sl
    ac10:	6860      	ldr	r0, [r4, #4]
    ac12:	f7f6 ff0b 	bl	1a2c <entropy_get_entropy_isr>
			*node_tx = NULL;
    ac16:	2600      	movs	r6, #0
    ac18:	e7c9      	b.n	abae <isr+0x1056>
			_radio.conn_curr->pause_tx = 1;
    ac1a:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    ac1e:	f043 0308 	orr.w	r3, r3, #8
    ac22:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    ac26:	e7c2      	b.n	abae <isr+0x1056>
		_radio.conn_curr->pause_rx = 0;
    ac28:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
    ac2c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ac30:	f36f 03c3 	bfc	r3, #3, #1
    ac34:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
    ac38:	2300      	movs	r3, #0
    ac3a:	e7c2      	b.n	abc2 <isr+0x106a>
		if ((_radio.conn_curr->llcp_length.req !=
    ac3c:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    ac40:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    ac44:	429a      	cmp	r2, r3
    ac46:	d0b2      	beq.n	abae <isr+0x1056>
		    (_radio.conn_curr->llcp_length.state ==
    ac48:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
		     _radio.conn_curr->llcp_length.ack) &&
    ac4c:	f003 0203 	and.w	r2, r3, #3
    ac50:	2a01      	cmp	r2, #1
    ac52:	d1ac      	bne.n	abae <isr+0x1056>
			_radio.conn_curr->pause_tx = 1;
    ac54:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
    ac58:	f042 0208 	orr.w	r2, r2, #8
    ac5c:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
    ac60:	2202      	movs	r2, #2
    ac62:	f362 0301 	bfi	r3, r2, #0, #2
    ac66:	f885 30ea 	strb.w	r3, [r5, #234]	; 0xea
    ac6a:	e7a0      	b.n	abae <isr+0x1056>
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
    ac6c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
    ac70:	2202      	movs	r2, #2
    ac72:	f362 0301 	bfi	r3, r2, #0, #2
    ac76:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
    ac7a:	7ce3      	ldrb	r3, [r4, #19]
    ac7c:	2b03      	cmp	r3, #3
    ac7e:	d196      	bne.n	abae <isr+0x1056>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
    ac80:	2301      	movs	r3, #1
    ac82:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    ac86:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
    ac8a:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    ac8e:	2202      	movs	r2, #2
    ac90:	2304      	movs	r3, #4
    ac92:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
    ac96:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    ac9a:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    ac9e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    aca2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
    aca6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    acaa:	f895 20f6 	ldrb.w	r2, [r5, #246]	; 0xf6
    acae:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    acb2:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
	conn->phy_tx_time = phy_tx_time[phys];
    acb6:	f003 0307 	and.w	r3, r3, #7
    acba:	aa14      	add	r2, sp, #80	; 0x50
    acbc:	4413      	add	r3, r2
    acbe:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    acc2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
		_radio.conn_curr->phy_tx_time =
    acc6:	f363 0202 	bfi	r2, r3, #0, #3
    acca:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
    acce:	e76e      	b.n	abae <isr+0x1056>
			_radio.conn_curr->llcp.phy_upd_ind.tx;
    acd0:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
		_radio.conn_curr->phy_tx_time =
    acd4:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    acd8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    acdc:	e7f3      	b.n	acc6 <isr+0x116e>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    acde:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    ace2:	4293      	cmp	r3, r2
    ace4:	681b      	ldr	r3, [r3, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    ace6:	bf08      	it	eq
    ace8:	f8c0 3148 	streq.w	r3, [r0, #328]	; 0x148
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    acec:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
	if (terminate) {
    acf0:	b39d      	cbz	r5, ad5a <isr+0x1202>
				connection_release(_radio.conn_curr);
    acf2:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    acf6:	f7fa fadd 	bl	52b4 <connection_release>
				_radio.conn_curr = NULL;
    acfa:	2300      	movs	r3, #0
    acfc:	f8c4 371c 	str.w	r3, [r4, #1820]	; 0x71c
	if (!radio_tmr_aa_restore()) {
    ad00:	f003 ff70 	bl	ebe4 <radio_tmr_aa_restore>
    ad04:	b918      	cbnz	r0, ad0e <isr+0x11b6>
		radio_tmr_aa_save(radio_tmr_aa_get());
    ad06:	f003 ff61 	bl	ebcc <radio_tmr_aa_get>
    ad0a:	f003 ff65 	bl	ebd8 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    ad0e:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    ad12:	2b00      	cmp	r3, #0
    ad14:	f43e afcb 	beq.w	9cae <isr+0x156>
	if (tx_release) {
    ad18:	b11e      	cbz	r6, ad22 <isr+0x11ca>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    ad1a:	4631      	mov	r1, r6
    ad1c:	8c18      	ldrh	r0, [r3, #32]
    ad1e:	f7fa fa4f 	bl	51c0 <pdu_node_tx_release>
	if (rx_enqueue) {
    ad22:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    ad26:	2b00      	cmp	r3, #0
    ad28:	f43e afc1 	beq.w	9cae <isr+0x156>
		rx_fc_lock(_radio.conn_curr->handle);
    ad2c:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    ad30:	8c18      	ldrh	r0, [r3, #32]
    ad32:	f7fb f9f3 	bl	611c <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    ad36:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    ad3a:	8c1b      	ldrh	r3, [r3, #32]
    ad3c:	f8a8 3006 	strh.w	r3, [r8, #6]
		packet_rx_enqueue();
    ad40:	f7fb f8d6 	bl	5ef0 <packet_rx_enqueue>
    ad44:	f7fe bfb3 	b.w	9cae <isr+0x156>
    ad48:	000109b4 	.word	0x000109b4
    ad4c:	20000aa4 	.word	0x20000aa4
			_radio.conn_curr->empty = 0;
    ad50:	f36f 13c7 	bfc	r3, #7, #1
    ad54:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
    ad58:	2600      	movs	r6, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    ad5a:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    ad5e:	f898 2008 	ldrb.w	r2, [r8, #8]
    ad62:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    ad66:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    ad6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ad6e:	429a      	cmp	r2, r3
    ad70:	f040 80d0 	bne.w	af14 <isr+0x13bc>
	    (packet_rx_reserve_get(3) != 0) &&
    ad74:	2003      	movs	r0, #3
    ad76:	f7f9 fedf 	bl	4b38 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    ad7a:	2800      	cmp	r0, #0
    ad7c:	f000 80ca 	beq.w	af14 <isr+0x13bc>
	    (packet_rx_reserve_get(3) != 0) &&
    ad80:	f894 378a 	ldrb.w	r3, [r4, #1930]	; 0x78a
    ad84:	b393      	cbz	r3, adec <isr+0x1294>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    ad86:	f8d4 3754 	ldr.w	r3, [r4, #1876]	; 0x754
    ad8a:	f8d4 2758 	ldr.w	r2, [r4, #1880]	; 0x758
	    ((_radio.fc_ena == 0) ||
    ad8e:	4293      	cmp	r3, r2
    ad90:	d105      	bne.n	ad9e <isr+0x1246>
	      (_radio.fc_req == _radio.fc_ack)) ||
    ad92:	f894 2788 	ldrb.w	r2, [r4, #1928]	; 0x788
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    ad96:	f894 1789 	ldrb.w	r1, [r4, #1929]	; 0x789
    ad9a:	4291      	cmp	r1, r2
    ad9c:	d026      	beq.n	adec <isr+0x1294>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    ad9e:	f8d4 2758 	ldr.w	r2, [r4, #1880]	; 0x758
	      (_radio.fc_req == _radio.fc_ack)) ||
    ada2:	4293      	cmp	r3, r2
    ada4:	f000 80b6 	beq.w	af14 <isr+0x13bc>
	      (_radio.fc_req != _radio.fc_ack) &&
    ada8:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    adac:	f894 2789 	ldrb.w	r2, [r4, #1929]	; 0x789
    adb0:	429a      	cmp	r2, r3
    adb2:	f000 80af 	beq.w	af14 <isr+0x13bc>
		(((_radio.fc_req == 0) &&
    adb6:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	      (_radio.fc_req != _radio.fc_ack) &&
    adba:	b933      	cbnz	r3, adca <isr+0x1272>
		   _radio.conn_curr->handle)) ||
    adbc:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
		(((_radio.fc_req == 0) &&
    adc0:	f8b4 2786 	ldrh.w	r2, [r4, #1926]	; 0x786
    adc4:	8c1b      	ldrh	r3, [r3, #32]
    adc6:	429a      	cmp	r2, r3
    adc8:	d010      	beq.n	adec <isr+0x1294>
		 ((_radio.fc_req != 0) &&
    adca:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
		   _radio.conn_curr->handle)) ||
    adce:	2b00      	cmp	r3, #0
    add0:	f000 80a0 	beq.w	af14 <isr+0x13bc>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    add4:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
		   _radio.conn_curr->handle)))))) {
    add8:	f8d4 171c 	ldr.w	r1, [r4, #1820]	; 0x71c
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    addc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    ade0:	f8b3 2780 	ldrh.w	r2, [r3, #1920]	; 0x780
    ade4:	8c0b      	ldrh	r3, [r1, #32]
    ade6:	429a      	cmp	r2, r3
    ade8:	f040 8094 	bne.w	af14 <isr+0x13bc>
		if (pdu_data_rx->len != 0) {
    adec:	f898 5009 	ldrb.w	r5, [r8, #9]
    adf0:	2d00      	cmp	r5, #0
    adf2:	f000 8098 	beq.w	af26 <isr+0x13ce>
			if (_radio.conn_curr->enc_rx) {
    adf6:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    adfa:	f893 50f8 	ldrb.w	r5, [r3, #248]	; 0xf8
    adfe:	f015 0510 	ands.w	r5, r5, #16
    ae02:	d008      	beq.n	ae16 <isr+0x12be>
				done = radio_ccm_is_done();
    ae04:	f003 ffa0 	bl	ed48 <radio_ccm_is_done>
				LL_ASSERT(done);
    ae08:	b920      	cbnz	r0, ae14 <isr+0x12bc>
    ae0a:	f640 6191 	movw	r1, #3729	; 0xe91
    ae0e:	48b0      	ldr	r0, [pc, #704]	; (b0d0 <isr+0x1578>)
    ae10:	f7f5 fd4e 	bl	8b0 <bt_ctlr_assert_handle>
				ccm_rx_increment = 1;
    ae14:	2501      	movs	r5, #1
			if ((_radio.conn_curr->enc_rx &&
    ae16:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    ae1a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
    ae1e:	06d9      	lsls	r1, r3, #27
    ae20:	d42c      	bmi.n	ae7c <isr+0x1324>
			    (_radio.conn_curr->pause_rx &&
    ae22:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    ae26:	f898 3008 	ldrb.w	r3, [r8, #8]
    ae2a:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
    ae2e:	f012 0f04 	tst.w	r2, #4
    ae32:	d139      	bne.n	aea8 <isr+0x1350>
			_radio.conn_curr->appto_expire = 0;
    ae34:	2200      	movs	r2, #0
			switch (pdu_data_rx->ll_id) {
    ae36:	f013 0303 	ands.w	r3, r3, #3
			_radio.conn_curr->appto_expire = 0;
    ae3a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
    ae3e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
    ae42:	d004      	beq.n	ae4e <isr+0x12f6>
    ae44:	2b02      	cmp	r3, #2
    ae46:	d85e      	bhi.n	af06 <isr+0x13ae>
				*rx_enqueue = 1;
    ae48:	2301      	movs	r3, #1
    ae4a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
			_radio.conn_curr->nesn++;
    ae4e:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    ae52:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    ae56:	f082 0202 	eor.w	r2, r2, #2
    ae5a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			if (ccm_rx_increment) {
    ae5e:	2d00      	cmp	r5, #0
    ae60:	d058      	beq.n	af14 <isr+0x13bc>
				_radio.conn_curr->ccm_rx.counter++;
    ae62:	f8d3 9109 	ldr.w	r9, [r3, #265]	; 0x109
    ae66:	f8d3 a10d 	ldr.w	sl, [r3, #269]	; 0x10d
    ae6a:	f119 0001 	adds.w	r0, r9, #1
    ae6e:	f14a 0100 	adc.w	r1, sl, #0
    ae72:	f8c3 0109 	str.w	r0, [r3, #265]	; 0x109
    ae76:	f8c3 110d 	str.w	r1, [r3, #269]	; 0x10d
    ae7a:	e04b      	b.n	af14 <isr+0x13bc>
			     !radio_ccm_mic_is_valid()) ||
    ae7c:	f003 ff82 	bl	ed84 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    ae80:	2800      	cmp	r0, #0
    ae82:	d1ce      	bne.n	ae22 <isr+0x12ca>
				_radio.state = STATE_CLOSE;
    ae84:	2303      	movs	r3, #3
    ae86:	7523      	strb	r3, [r4, #20]
				radio_disable();
    ae88:	f003 fcee 	bl	e868 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    ae8c:	f003 fd0a 	bl	e8a4 <radio_is_ready>
    ae90:	b120      	cbz	r0, ae9c <isr+0x1344>
    ae92:	f640 61a1 	movw	r1, #3745	; 0xea1
    ae96:	488e      	ldr	r0, [pc, #568]	; (b0d0 <isr+0x1578>)
    ae98:	f7f5 fd0a 	bl	8b0 <bt_ctlr_assert_handle>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    ae9c:	213d      	movs	r1, #61	; 0x3d
    ae9e:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    aea2:	f7fb f879 	bl	5f98 <terminate_ind_rx_enqueue>
    aea6:	e724      	b.n	acf2 <isr+0x119a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    aea8:	f003 0103 	and.w	r1, r3, #3
    aeac:	2903      	cmp	r1, #3
    aeae:	d1e9      	bne.n	ae84 <isr+0x132c>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    aeb0:	f990 e01d 	ldrsb.w	lr, [r0, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    aeb4:	f898 100b 	ldrb.w	r1, [r8, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    aeb8:	f1be 0f00 	cmp.w	lr, #0
    aebc:	f002 0240 	and.w	r2, r2, #64	; 0x40
    aec0:	db15      	blt.n	aeee <isr+0x1396>
	       (!conn->role &&
    aec2:	b922      	cbnz	r2, aece <isr+0x1376>
		((!conn->refresh &&
    aec4:	2902      	cmp	r1, #2
    aec6:	d0b5      	beq.n	ae34 <isr+0x12dc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    aec8:	2911      	cmp	r1, #17
    aeca:	d8db      	bhi.n	ae84 <isr+0x132c>
    aecc:	e009      	b.n	aee2 <isr+0x138a>
		 (conn->refresh &&
    aece:	1e8a      	subs	r2, r1, #2
    aed0:	b2d2      	uxtb	r2, r2
    aed2:	2a09      	cmp	r2, #9
    aed4:	d8f8      	bhi.n	aec8 <isr+0x1370>
    aed6:	f240 2e05 	movw	lr, #517	; 0x205
    aeda:	fa2e f202 	lsr.w	r2, lr, r2
    aede:	07d2      	lsls	r2, r2, #31
    aee0:	d4a8      	bmi.n	ae34 <isr+0x12dc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    aee2:	4a7c      	ldr	r2, [pc, #496]	; (b0d4 <isr+0x157c>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    aee4:	fa22 f101 	lsr.w	r1, r2, r1
    aee8:	07ca      	lsls	r2, r1, #31
    aeea:	d5cb      	bpl.n	ae84 <isr+0x132c>
    aeec:	e7a2      	b.n	ae34 <isr+0x12dc>
	       (conn->role &&
    aeee:	b92a      	cbnz	r2, aefc <isr+0x13a4>
		((!conn->refresh &&
    aef0:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    aef2:	d09f      	beq.n	ae34 <isr+0x12dc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    aef4:	2911      	cmp	r1, #17
    aef6:	d8c5      	bhi.n	ae84 <isr+0x132c>
    aef8:	4a77      	ldr	r2, [pc, #476]	; (b0d8 <isr+0x1580>)
    aefa:	e7f3      	b.n	aee4 <isr+0x138c>
		 (conn->refresh &&
    aefc:	1e8a      	subs	r2, r1, #2
    aefe:	2a01      	cmp	r2, #1
    af00:	d998      	bls.n	ae34 <isr+0x12dc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    af02:	290b      	cmp	r1, #11
    af04:	e7f5      	b.n	aef2 <isr+0x139a>
				nack = isr_rx_conn_pkt_ctrl(node_rx,
    af06:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    af0a:	4640      	mov	r0, r8
    af0c:	f7fd fd18 	bl	8940 <isr_rx_conn_pkt_ctrl>
		if (!nack) {
    af10:	2800      	cmp	r0, #0
    af12:	d09c      	beq.n	ae4e <isr+0x12f6>
		_radio.conn_curr->supervision_expire = 0;
    af14:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
		_radio.crc_expire = 0;
    af18:	2300      	movs	r3, #0
    af1a:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
	u8_t crc_close = 0;
    af1e:	461d      	mov	r5, r3
		_radio.conn_curr->supervision_expire = 0;
    af20:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    af24:	e03d      	b.n	afa2 <isr+0x144a>
		} else if ((_radio.conn_curr->enc_rx) ||
    af26:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
    af2a:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
    af2e:	f013 0f14 	tst.w	r3, #20
    af32:	d08c      	beq.n	ae4e <isr+0x12f6>
					    (conn->latency + 6)) ?
    af34:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
			appto_reload_new = (conn->apto_reload >
    af36:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
					    (conn->latency + 6)) ?
    af3a:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
    af3c:	4298      	cmp	r0, r3
    af3e:	bfc4      	itt	gt
    af40:	1f83      	subgt	r3, r0, #6
    af42:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
    af44:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
			appto_reload_new = (conn->apto_reload >
    af48:	bfcc      	ite	gt
    af4a:	b29b      	uxthgt	r3, r3
    af4c:	4603      	movle	r3, r0
			if (conn->appto_reload != appto_reload_new) {
    af4e:	4299      	cmp	r1, r3
				conn->appto_reload = appto_reload_new;
    af50:	bf1e      	ittt	ne
    af52:	f8a2 3046 	strhne.w	r3, [r2, #70]	; 0x46
				conn->apto_expire = 0;
    af56:	2300      	movne	r3, #0
    af58:	f8a2 304c 	strhne.w	r3, [r2, #76]	; 0x4c
			if (conn->apto_expire == 0) {
    af5c:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    af60:	2b00      	cmp	r3, #0
    af62:	f47f af74 	bne.w	ae4e <isr+0x12f6>
				conn->appto_expire = conn->appto_reload;
    af66:	f8b2 3046 	ldrh.w	r3, [r2, #70]	; 0x46
    af6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
    af6e:	f8a2 004c 	strh.w	r0, [r2, #76]	; 0x4c
    af72:	e76c      	b.n	ae4e <isr+0x12f6>
		if (_radio.crc_expire == 0) {
    af74:	f894 3721 	ldrb.w	r3, [r4, #1825]	; 0x721
    af78:	b913      	cbnz	r3, af80 <isr+0x1428>
			_radio.crc_expire = 2;
    af7a:	2302      	movs	r3, #2
    af7c:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
		_radio.crc_expire--;
    af80:	f894 3721 	ldrb.w	r3, [r4, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
    af84:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
		_radio.crc_expire--;
    af88:	3b01      	subs	r3, #1
    af8a:	b2db      	uxtb	r3, r3
    af8c:	f884 3721 	strb.w	r3, [r4, #1825]	; 0x721
		if (!_radio.conn_curr->supervision_expire) {
    af90:	f8b2 6040 	ldrh.w	r6, [r2, #64]	; 0x40
		crc_close = (_radio.crc_expire == 0);
    af94:	fab3 f583 	clz	r5, r3
    af98:	096d      	lsrs	r5, r5, #5
		if (!_radio.conn_curr->supervision_expire) {
    af9a:	bb86      	cbnz	r6, affe <isr+0x14a6>
			_radio.conn_curr->supervision_expire =
    af9c:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    af9e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    afa2:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    afa6:	a912      	add	r1, sp, #72	; 0x48
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    afa8:	f890 90f8 	ldrb.w	r9, [r0, #248]	; 0xf8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    afac:	f7fd fa82 	bl	84b4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    afb0:	7d23      	ldrb	r3, [r4, #20]
    afb2:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    afb4:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    afb8:	d010      	beq.n	afdc <isr+0x1484>
    afba:	bb15      	cbnz	r5, b002 <isr+0x14aa>
    afbc:	b137      	cbz	r7, afcc <isr+0x1474>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    afbe:	f898 3008 	ldrb.w	r3, [r8, #8]
    afc2:	06d8      	lsls	r0, r3, #27
    afc4:	d402      	bmi.n	afcc <isr+0x1474>
			 (pdu_data_tx->len == 0)) ||
    afc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
			((crc_ok) && (pdu_data_rx->md == 0) &&
    afc8:	785b      	ldrb	r3, [r3, #1]
    afca:	b1d3      	cbz	r3, b002 <isr+0x14aa>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    afcc:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
			 (pdu_data_tx->len == 0)) ||
    afd0:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    afd4:	2b00      	cmp	r3, #0
    afd6:	bf0c      	ite	eq
    afd8:	2302      	moveq	r3, #2
    afda:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    afdc:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    afde:	7523      	strb	r3, [r4, #20]
	if (_radio.state == STATE_CLOSE) {
    afe0:	d12d      	bne.n	b03e <isr+0x14e6>
		if (_radio.role == ROLE_MASTER) {
    afe2:	7ce3      	ldrb	r3, [r4, #19]
    afe4:	2b04      	cmp	r3, #4
    afe6:	d10e      	bne.n	b006 <isr+0x14ae>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    afe8:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    afec:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
    aff0:	f369 12c7 	bfi	r2, r9, #7, #1
    aff4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
    aff8:	f003 fc36 	bl	e868 <radio_disable>
    affc:	e680      	b.n	ad00 <isr+0x11a8>
	struct radio_pdu_node_tx *tx_release = NULL;
    affe:	2600      	movs	r6, #0
    b000:	e7cf      	b.n	afa2 <isr+0x144a>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    b002:	2303      	movs	r3, #3
    b004:	e7ea      	b.n	afdc <isr+0x1484>
			radio_switch_complete_and_disable();
    b006:	f003 fc9f 	bl	e948 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    b00a:	9912      	ldr	r1, [sp, #72]	; 0x48
    b00c:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    b010:	780b      	ldrb	r3, [r1, #0]
    b012:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
    b016:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    b01a:	f3c2 0240 	ubfx	r2, r2, #1, #1
    b01e:	f362 0382 	bfi	r3, r2, #2, #1
    b022:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    b024:	f7fa f9dc 	bl	53e0 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    b028:	f003 fc3c 	bl	e8a4 <radio_is_ready>
    b02c:	2800      	cmp	r0, #0
    b02e:	f43f ae67 	beq.w	ad00 <isr+0x11a8>
    b032:	f640 7189 	movw	r1, #3977	; 0xf89
    b036:	4826      	ldr	r0, [pc, #152]	; (b0d0 <isr+0x1578>)
    b038:	f7f5 fc3a 	bl	8b0 <bt_ctlr_assert_handle>
    b03c:	e660      	b.n	ad00 <isr+0x11a8>
		radio_tmr_tifs_set(RADIO_TIFS);
    b03e:	2096      	movs	r0, #150	; 0x96
    b040:	f003 fd0a 	bl	ea58 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
    b044:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    b048:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    b04c:	f000 0007 	and.w	r0, r0, #7
    b050:	f003 fc64 	bl	e91c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    b054:	f003 fdd2 	bl	ebfc <radio_tmr_end_capture>
    b058:	e7d7      	b.n	b00a <isr+0x14b2>
		LL_ASSERT(0);
    b05a:	f241 0150 	movw	r1, #4176	; 0x1050
    b05e:	f7fe be75 	b.w	9d4c <isr+0x1f4>
	switch (_radio.role) {
    b062:	7ce2      	ldrb	r2, [r4, #19]
    b064:	2a04      	cmp	r2, #4
    b066:	f200 81ca 	bhi.w	b3fe <isr+0x18a6>
    b06a:	e8df f012 	tbh	[pc, r2, lsl #1]
    b06e:	01bc      	.short	0x01bc
    b070:	00390005 	.word	0x00390005
    b074:	006d006d 	.word	0x006d006d
	if ((_radio.state == STATE_CLOSE) &&
    b078:	2b03      	cmp	r3, #3
    b07a:	d109      	bne.n	b090 <isr+0x1538>
	    (_radio.advertiser.chan_map_current != 0)) {
    b07c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	if ((_radio.state == STATE_CLOSE) &&
    b080:	0759      	lsls	r1, r3, #29
    b082:	d005      	beq.n	b090 <isr+0x1538>
		adv_setup();
    b084:	f7fa fb16 	bl	56b4 <adv_setup>
		radio_tx_enable();
    b088:	f003 fbe8 	bl	e85c <radio_tx_enable>
    b08c:	f7fe bddb 	b.w	9c46 <isr+0xee>
		radio_filter_disable();
    b090:	f003 fca4 	bl	e9dc <radio_filter_disable>
	_radio.role = ROLE_NONE;
    b094:	2500      	movs	r5, #0
    b096:	74e5      	strb	r5, [r4, #19]
	_radio.state = STATE_NONE;
    b098:	7525      	strb	r5, [r4, #20]
	_radio.ticker_id_event = 0;
    b09a:	7465      	strb	r5, [r4, #17]
	radio_tmr_stop();
    b09c:	f003 fd50 	bl	eb40 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    b0a0:	4b0e      	ldr	r3, [pc, #56]	; (b0dc <isr+0x1584>)
    b0a2:	462a      	mov	r2, r5
    b0a4:	4629      	mov	r1, r5
    b0a6:	4628      	mov	r0, r5
    b0a8:	f7f6 ff1c 	bl	1ee4 <mayfly_enqueue>
	LL_ASSERT(!retval);
    b0ac:	b120      	cbz	r0, b0b8 <isr+0x1560>
    b0ae:	f241 313e 	movw	r1, #4926	; 0x133e
    b0b2:	4807      	ldr	r0, [pc, #28]	; (b0d0 <isr+0x1578>)
    b0b4:	f7f5 fbfc 	bl	8b0 <bt_ctlr_assert_handle>
	clock_control_off(_radio.hf_clock, NULL);
    b0b8:	6820      	ldr	r0, [r4, #0]
    b0ba:	6843      	ldr	r3, [r0, #4]
    b0bc:	2100      	movs	r1, #0
    b0be:	685b      	ldr	r3, [r3, #4]
    b0c0:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    b0c2:	2201      	movs	r2, #1
    b0c4:	4611      	mov	r1, r2
    b0c6:	2000      	movs	r0, #0
    b0c8:	f7f6 fee4 	bl	1e94 <mayfly_enable>
    b0cc:	f7fe bdef 	b.w	9cae <isr+0x156>
    b0d0:	000109b4 	.word	0x000109b4
    b0d4:	00022060 	.word	0x00022060
    b0d8:	00022040 	.word	0x00022040
    b0dc:	200054c8 	.word	0x200054c8
	if (_radio.state == STATE_CLOSE) {
    b0e0:	2b03      	cmp	r3, #3
    b0e2:	d124      	bne.n	b12e <isr+0x15d6>
		radio_tmr_tifs_set(RADIO_TIFS);
    b0e4:	2096      	movs	r0, #150	; 0x96
    b0e6:	f003 fcb7 	bl	ea58 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    b0ea:	2300      	movs	r3, #0
    b0ec:	4619      	mov	r1, r3
    b0ee:	461a      	mov	r2, r3
    b0f0:	4618      	mov	r0, r3
    b0f2:	f003 fc1f 	bl	e934 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    b0f6:	f894 2749 	ldrb.w	r2, [r4, #1865]	; 0x749
    b0fa:	f8d4 3744 	ldr.w	r3, [r4, #1860]	; 0x744
		radio_pkt_rx_set(_radio.packet_rx
    b0fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b102:	3008      	adds	r0, #8
    b104:	f003 fb7c 	bl	e800 <radio_pkt_rx_set>
		radio_rssi_measure();
    b108:	f003 fc2c 	bl	e964 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    b10c:	f002 fd6a 	bl	dbe4 <ctrl_rl_enabled>
    b110:	b138      	cbz	r0, b122 <isr+0x15ca>
			u8_t count, *irks = ctrl_irks_get(&count);
    b112:	a812      	add	r0, sp, #72	; 0x48
    b114:	f002 fb22 	bl	d75c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    b118:	4601      	mov	r1, r0
    b11a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    b11e:	f003 fe3b 	bl	ed98 <radio_ar_configure>
		_radio.state = STATE_RX;
    b122:	2301      	movs	r3, #1
    b124:	7523      	strb	r3, [r4, #20]
		radio_rx_enable();
    b126:	f003 fb93 	bl	e850 <radio_rx_enable>
    b12a:	f7fe bd8c 	b.w	9c46 <isr+0xee>
		radio_filter_disable();
    b12e:	f003 fc55 	bl	e9dc <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    b132:	7d23      	ldrb	r3, [r4, #20]
    b134:	2b05      	cmp	r3, #5
    b136:	d1ad      	bne.n	b094 <isr+0x153c>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    b138:	2300      	movs	r3, #0
    b13a:	9300      	str	r3, [sp, #0]
    b13c:	2204      	movs	r2, #4
    b13e:	4619      	mov	r1, r3
    b140:	4618      	mov	r0, r3
    b142:	f7f7 fd1f 	bl	2b84 <ticker_stop>
    b146:	e7a5      	b.n	b094 <isr+0x153c>
	if (_radio.conn_curr == 0) {
    b148:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    b14c:	2800      	cmp	r0, #0
    b14e:	d0a1      	beq.n	b094 <isr+0x153c>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    b150:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    b154:	b181      	cbz	r1, b178 <isr+0x1620>
    b156:	7ce3      	ldrb	r3, [r4, #19]
    b158:	2b03      	cmp	r3, #3
    b15a:	d003      	beq.n	b164 <isr+0x160c>
    b15c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    b160:	07da      	lsls	r2, r3, #31
    b162:	d509      	bpl.n	b178 <isr+0x1620>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    b164:	f7fa ff18 	bl	5f98 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    b168:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    b16c:	f7fa f8a2 	bl	52b4 <connection_release>
			_radio.conn_curr = NULL;
    b170:	2300      	movs	r3, #0
    b172:	f8c4 371c 	str.w	r3, [r4, #1820]	; 0x71c
    b176:	e78d      	b.n	b094 <isr+0x153c>
	latency_event = _radio.conn_curr->latency_event;
    b178:	f8b0 b02a 	ldrh.w	fp, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    b17c:	f894 7720 	ldrb.w	r7, [r4, #1824]	; 0x720
	elapsed_event = latency_event + 1;
    b180:	f10b 0601 	add.w	r6, fp, #1
    b184:	b2b6      	uxth	r6, r6
	if (_radio.packet_counter &&
    b186:	2f00      	cmp	r7, #0
    b188:	f000 8084 	beq.w	b294 <isr+0x173c>
		if (_radio.role == ROLE_SLAVE) {
    b18c:	7ce3      	ldrb	r3, [r4, #19]
    b18e:	2b03      	cmp	r3, #3
    b190:	d173      	bne.n	b27a <isr+0x1722>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    b192:	f003 fd27 	bl	ebe4 <radio_tmr_aa_restore>
    b196:	4681      	mov	r9, r0
						     radio_tmr_ready_get();
    b198:	f003 fd2a 	bl	ebf0 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    b19c:	f8d4 771c 	ldr.w	r7, [r4, #1820]	; 0x71c
				addr_us_get(_radio.conn_curr->phy_rx);
    b1a0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	switch (phy) {
    b1a4:	f003 0307 	and.w	r3, r3, #7
    b1a8:	2b02      	cmp	r3, #2
			start_to_address_actual_us = radio_tmr_aa_restore() -
    b1aa:	eba9 0900 	sub.w	r9, r9, r0
			window_widening_event_us =
    b1ae:	6e38      	ldr	r0, [r7, #96]	; 0x60
	switch (phy) {
    b1b0:	d052      	beq.n	b258 <isr+0x1700>
		return 40;
    b1b2:	2b04      	cmp	r3, #4
    b1b4:	bf0c      	ite	eq
    b1b6:	f44f 78bc 	moveq.w	r8, #376	; 0x178
    b1ba:	f04f 0828 	movne.w	r8, #40	; 0x28
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    b1be:	f100 0330 	add.w	r3, r0, #48	; 0x30
    b1c2:	4443      	add	r3, r8
			if (start_to_address_actual_us <=
    b1c4:	4599      	cmp	r9, r3
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    b1c6:	930b      	str	r3, [sp, #44]	; 0x2c
    b1c8:	f8df a254 	ldr.w	sl, [pc, #596]	; b420 <isr+0x18c8>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    b1cc:	a392      	add	r3, pc, #584	; (adr r3, b418 <isr+0x18c0>)
    b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    b1d2:	d844      	bhi.n	b25e <isr+0x1706>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    b1d4:	fba0 010a 	umull	r0, r1, r0, sl
    b1d8:	f7f5 f846 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    b1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    b1de:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    b1e0:	eba3 0009 	sub.w	r0, r3, r9
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    b1e4:	a38c      	add	r3, pc, #560	; (adr r3, b418 <isr+0x18c0>)
    b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    b1ea:	fba0 010a 	umull	r0, r1, r0, sl
    b1ee:	f7f5 f83b 	bl	268 <__aeabi_uldivmod>
			_radio.conn_curr->slave.window_widening_event_us = 0;
    b1f2:	2300      	movs	r3, #0
    b1f4:	663b      	str	r3, [r7, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    b1f6:	66bb      	str	r3, [r7, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    b1f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    b1fc:	fa1f f880 	uxth.w	r8, r0
			if (_radio.conn_curr->pkt_tx_head) {
    b200:	b3ab      	cbz	r3, b26e <isr+0x1716>
				if (pdu_data_tx->len ||
    b202:	795b      	ldrb	r3, [r3, #5]
    b204:	b913      	cbnz	r3, b20c <isr+0x16b4>
    b206:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
    b20a:	b10b      	cbz	r3, b210 <isr+0x16b8>
					_radio.conn_curr->latency_event = 0;
    b20c:	2300      	movs	r3, #0
				_radio.conn_curr->latency_event =
    b20e:	857b      	strh	r3, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    b210:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    b214:	2200      	movs	r2, #0
    b216:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    b218:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    b21c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    b220:	b1c3      	cbz	r3, b254 <isr+0x16fc>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    b222:	429e      	cmp	r6, r3
    b224:	f080 80ad 	bcs.w	b382 <isr+0x182a>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    b228:	1b9b      	subs	r3, r3, r6
    b22a:	b29b      	uxth	r3, r3
			_radio.conn_curr->latency_event = 0;
    b22c:	2200      	movs	r2, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    b22e:	2b06      	cmp	r3, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    b230:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    b234:	8542      	strh	r2, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    b236:	f240 80a6 	bls.w	b386 <isr+0x182e>
			else if (_radio.role == ROLE_SLAVE) {
    b23a:	7ce3      	ldrb	r3, [r4, #19]
    b23c:	2b03      	cmp	r3, #3
    b23e:	d109      	bne.n	b254 <isr+0x16fc>
				if (latency_event != 0) {
    b240:	f1bb 0f00 	cmp.w	fp, #0
    b244:	f040 809f 	bne.w	b386 <isr+0x182e>
					force = _radio.conn_curr->slave.force & 0x01;
    b248:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    b24a:	087b      	lsrs	r3, r7, #1
					if (force) {
    b24c:	f017 0701 	ands.w	r7, r7, #1
    b250:	d13d      	bne.n	b2ce <isr+0x1776>
					_radio.conn_curr->slave.force >>= 1;
    b252:	66c3      	str	r3, [r0, #108]	; 0x6c
	force = 0;
    b254:	2700      	movs	r7, #0
    b256:	e03d      	b.n	b2d4 <isr+0x177c>
		return 24;
    b258:	f04f 0818 	mov.w	r8, #24
    b25c:	e7af      	b.n	b1be <isr+0x1666>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    b25e:	fba9 010a 	umull	r0, r1, r9, sl
    b262:	f7f5 f801 	bl	268 <__aeabi_uldivmod>
    b266:	b285      	uxth	r5, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    b268:	f108 0030 	add.w	r0, r8, #48	; 0x30
    b26c:	e7ba      	b.n	b1e4 <isr+0x168c>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    b26e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    b272:	07db      	lsls	r3, r3, #31
    b274:	d5cc      	bpl.n	b210 <isr+0x16b8>
				_radio.conn_curr->latency_event =
    b276:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    b278:	e7c9      	b.n	b20e <isr+0x16b6>
		} else if (reason_peer) {
    b27a:	b149      	cbz	r1, b290 <isr+0x1738>
			_radio.conn_curr->master.terminate_ack = 1;
    b27c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    b280:	f043 0301 	orr.w	r3, r3, #1
    b284:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    b288:	f04f 0800 	mov.w	r8, #0
	ticks_drift_plus = 0;
    b28c:	4645      	mov	r5, r8
    b28e:	e7bf      	b.n	b210 <isr+0x16b8>
	ticks_drift_minus = 0;
    b290:	4688      	mov	r8, r1
    b292:	e7fb      	b.n	b28c <isr+0x1734>
	else if (_radio.conn_curr->connect_expire) {
    b294:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    b296:	b185      	cbz	r5, b2ba <isr+0x1762>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    b298:	42ae      	cmp	r6, r5
    b29a:	d204      	bcs.n	b2a6 <isr+0x174e>
			_radio.conn_curr->connect_expire -= elapsed_event;
    b29c:	1bad      	subs	r5, r5, r6
    b29e:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    b2a0:	463d      	mov	r5, r7
    b2a2:	46a8      	mov	r8, r5
    b2a4:	e7b8      	b.n	b218 <isr+0x16c0>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    b2a6:	213e      	movs	r1, #62	; 0x3e
    b2a8:	f7fa fe76 	bl	5f98 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    b2ac:	f8d4 071c 	ldr.w	r0, [r4, #1820]	; 0x71c
    b2b0:	f7fa f800 	bl	52b4 <connection_release>
			_radio.conn_curr = NULL;
    b2b4:	f8c4 771c 	str.w	r7, [r4, #1820]	; 0x71c
    b2b8:	e6ec      	b.n	b094 <isr+0x153c>
		if (!_radio.conn_curr->supervision_expire) {
    b2ba:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
    b2be:	f1b8 0f00 	cmp.w	r8, #0
    b2c2:	d1ee      	bne.n	b2a2 <isr+0x174a>
			_radio.conn_curr->supervision_expire =
    b2c4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
    b2c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    b2ca:	4645      	mov	r5, r8
    b2cc:	e7a4      	b.n	b218 <isr+0x16c0>
						_radio.conn_curr->slave.force |=
    b2ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b2d2:	66c3      	str	r3, [r0, #108]	; 0x6c
	if (_radio.conn_curr->procedure_expire != 0) {
    b2d4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    b2d8:	b123      	cbz	r3, b2e4 <isr+0x178c>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    b2da:	429e      	cmp	r6, r3
    b2dc:	d255      	bcs.n	b38a <isr+0x1832>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    b2de:	1b9b      	subs	r3, r3, r6
    b2e0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    b2e4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    b2e8:	b123      	cbz	r3, b2f4 <isr+0x179c>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    b2ea:	429e      	cmp	r6, r3
    b2ec:	d24f      	bcs.n	b38e <isr+0x1836>
			_radio.conn_curr->apto_expire -= elapsed_event;
    b2ee:	1b9b      	subs	r3, r3, r6
    b2f0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    b2f4:	f8d4 271c 	ldr.w	r2, [r4, #1820]	; 0x71c
    b2f8:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    b2fc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    b300:	b123      	cbz	r3, b30c <isr+0x17b4>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    b302:	429e      	cmp	r6, r3
    b304:	d25b      	bcs.n	b3be <isr+0x1866>
			_radio.conn_curr->appto_expire -= elapsed_event;
    b306:	1b9e      	subs	r6, r3, r6
    b308:	f8a2 6048 	strh.w	r6, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    b30c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    b310:	428b      	cmp	r3, r1
    b312:	d006      	beq.n	b322 <isr+0x17ca>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    b314:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    b318:	3b01      	subs	r3, #1
    b31a:	2b01      	cmp	r3, #1
		_radio.conn_curr->latency_event = 0;
    b31c:	bf9c      	itt	ls
    b31e:	2300      	movls	r3, #0
    b320:	8553      	strhls	r3, [r2, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    b322:	b917      	cbnz	r7, b32a <isr+0x17d2>
    b324:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    b326:	455b      	cmp	r3, fp
    b328:	d05b      	beq.n	b3e2 <isr+0x188a>
		lazy = _radio.conn_curr->latency_event + 1;
    b32a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    b32c:	3301      	adds	r3, #1
    b32e:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    b330:	b935      	cbnz	r5, b340 <isr+0x17e8>
    b332:	f1b8 0f00 	cmp.w	r8, #0
    b336:	d103      	bne.n	b340 <isr+0x17e8>
    b338:	b913      	cbnz	r3, b340 <isr+0x17e8>
	    (lazy != 0) || (force != 0)) {
    b33a:	2f00      	cmp	r7, #0
    b33c:	f43f aeaa 	beq.w	b094 <isr+0x153c>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    b340:	f892 2020 	ldrb.w	r2, [r2, #32]
		ticker_status =
    b344:	9303      	str	r3, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    b346:	3207      	adds	r2, #7
		ticker_status =
    b348:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    b34a:	b2d6      	uxtb	r6, r2
		ticker_status =
    b34c:	4a30      	ldr	r2, [pc, #192]	; (b410 <isr+0x18b8>)
    b34e:	9205      	str	r2, [sp, #20]
    b350:	462b      	mov	r3, r5
				      (void *)(u32_t)ticker_id);
    b352:	9606      	str	r6, [sp, #24]
		ticker_status =
    b354:	9704      	str	r7, [sp, #16]
    b356:	9102      	str	r1, [sp, #8]
    b358:	9101      	str	r1, [sp, #4]
    b35a:	f8cd 8000 	str.w	r8, [sp]
    b35e:	4632      	mov	r2, r6
    b360:	4608      	mov	r0, r1
    b362:	f7f7 fbc1 	bl	2ae8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b366:	f030 0302 	bics.w	r3, r0, #2
    b36a:	f43f ae93 	beq.w	b094 <isr+0x153c>
    b36e:	7ca3      	ldrb	r3, [r4, #18]
    b370:	429e      	cmp	r6, r3
    b372:	f43f ae8f 	beq.w	b094 <isr+0x153c>
    b376:	f241 2115 	movw	r1, #4629	; 0x1215
		LL_ASSERT(0);
    b37a:	4826      	ldr	r0, [pc, #152]	; (b414 <isr+0x18bc>)
    b37c:	f7f5 fa98 	bl	8b0 <bt_ctlr_assert_handle>
    b380:	e688      	b.n	b094 <isr+0x153c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    b382:	2108      	movs	r1, #8
    b384:	e6ee      	b.n	b164 <isr+0x160c>
				force = 1;
    b386:	2701      	movs	r7, #1
    b388:	e7a4      	b.n	b2d4 <isr+0x177c>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    b38a:	2122      	movs	r1, #34	; 0x22
    b38c:	e6ea      	b.n	b164 <isr+0x160c>
			_radio.conn_curr->apto_expire = 0;
    b38e:	2300      	movs	r3, #0
    b390:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
			node_rx = packet_rx_reserve_get(2);
    b394:	2002      	movs	r0, #2
    b396:	f7f9 fbcf 	bl	4b38 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    b39a:	4681      	mov	r9, r0
    b39c:	b920      	cbnz	r0, b3a8 <isr+0x1850>
    b39e:	f241 11bd 	movw	r1, #4541	; 0x11bd
    b3a2:	481c      	ldr	r0, [pc, #112]	; (b414 <isr+0x18bc>)
    b3a4:	f7f5 fa84 	bl	8b0 <bt_ctlr_assert_handle>
			node_rx->hdr.handle = _radio.conn_curr->handle;
    b3a8:	f8d4 371c 	ldr.w	r3, [r4, #1820]	; 0x71c
    b3ac:	8c1b      	ldrh	r3, [r3, #32]
    b3ae:	f8a9 3006 	strh.w	r3, [r9, #6]
			node_rx->hdr.type = NODE_RX_TYPE_APTO;
    b3b2:	230a      	movs	r3, #10
    b3b4:	f889 3004 	strb.w	r3, [r9, #4]
			packet_rx_enqueue();
    b3b8:	f7fa fd9a 	bl	5ef0 <packet_rx_enqueue>
    b3bc:	e79a      	b.n	b2f4 <isr+0x179c>
			_radio.conn_curr->appto_expire = 0;
    b3be:	2300      	movs	r3, #0
    b3c0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    b3c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
    b3c8:	2b00      	cmp	r3, #0
    b3ca:	d19f      	bne.n	b30c <isr+0x17b4>
    b3cc:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    b3d0:	428b      	cmp	r3, r1
    b3d2:	d19f      	bne.n	b314 <isr+0x17bc>
				_radio.conn_curr->llcp_type = LLCP_PING;
    b3d4:	2307      	movs	r3, #7
    b3d6:	f882 3076 	strb.w	r3, [r2, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    b3da:	1e4b      	subs	r3, r1, #1
    b3dc:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    b3e0:	e794      	b.n	b30c <isr+0x17b4>
	lazy = 0;
    b3e2:	463b      	mov	r3, r7
    b3e4:	e7a4      	b.n	b330 <isr+0x17d8>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    b3e6:	3b04      	subs	r3, #4
    b3e8:	2b01      	cmp	r3, #1
    b3ea:	d904      	bls.n	b3f6 <isr+0x189e>
    b3ec:	f241 2134 	movw	r1, #4660	; 0x1234
    b3f0:	4808      	ldr	r0, [pc, #32]	; (b414 <isr+0x18bc>)
    b3f2:	f7f5 fa5d 	bl	8b0 <bt_ctlr_assert_handle>
		_radio.state = STATE_NONE;
    b3f6:	2300      	movs	r3, #0
    b3f8:	7523      	strb	r3, [r4, #20]
    b3fa:	f7fe bc58 	b.w	9cae <isr+0x156>
		LL_ASSERT(0);
    b3fe:	f241 213b 	movw	r1, #4667	; 0x123b
    b402:	e7ba      	b.n	b37a <isr+0x1822>
		LL_ASSERT(0);
    b404:	f241 2197 	movw	r1, #4759	; 0x1297
    b408:	f7fe bca0 	b.w	9d4c <isr+0x1f4>
    b40c:	f3af 8000 	nop.w
    b410:	000061ed 	.word	0x000061ed
    b414:	000109b4 	.word	0x000109b4
    b418:	1afd498d 	.word	0x1afd498d
    b41c:	00000007 	.word	0x00000007
    b420:	3b9aca00 	.word	0x3b9aca00

0000b424 <radio_init>:
{
    b424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    b428:	4e3e      	ldr	r6, [pc, #248]	; (b524 <radio_init+0x100>)
{
    b42a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b42c:	f89d c01c 	ldrb.w	ip, [sp, #28]
    b430:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    b434:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    b438:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    b43c:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    b43e:	f44f 70aa 	mov.w	r0, #340	; 0x154
    b442:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    b446:	f886 1728 	strb.w	r1, [r6, #1832]	; 0x728
	_radio.conn_pool = mem_radio;
    b44a:	f8c6 4710 	str.w	r4, [r6, #1808]	; 0x710
	mem_radio_end = mem_radio + mem_size;
    b44e:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    b450:	f10c 0401 	add.w	r4, ip, #1
    b454:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    b456:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    b458:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    b45c:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    b460:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
	rx_count_max += 3;
    b464:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    b466:	bf98      	it	ls
    b468:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    b46c:	f8a6 873c 	strh.w	r8, [r6, #1852]	; 0x73c
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    b470:	bf88      	it	hi
    b472:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    b476:	f886 275c 	strb.w	r2, [r6, #1884]	; 0x75c
		_radio.packet_rx_data_pool_size =
    b47a:	bf8c      	ite	hi
    b47c:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    b480:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    b484:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    b488:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    b48c:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    b490:	bf8c      	ite	hi
    b492:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    b496:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    b498:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    b49c:	f8a6 273e 	strh.w	r2, [r6, #1854]	; 0x73e
	_radio.packet_tx_count = (tx_count_max + 1);
    b4a0:	f886 c77c 	strb.w	ip, [r6, #1916]	; 0x77c
	_radio.packet_rx = (void *)mem_radio;
    b4a4:	f8c6 0744 	str.w	r0, [r6, #1860]	; 0x744
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    b4a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    b4ac:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    b4b0:	f8b6 473e 	ldrh.w	r4, [r6, #1854]	; 0x73e
	_radio.pkt_tx = (void *)mem_radio;
    b4b4:	f8c6 0774 	str.w	r0, [r6, #1908]	; 0x774
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    b4b8:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    b4ba:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    b4be:	f8c6 0778 	str.w	r0, [r6, #1912]	; 0x778
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    b4c2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    b4c4:	f8a6 2740 	strh.w	r2, [r6, #1856]	; 0x740
	_radio.pkt_rx_data_pool = mem_radio;
    b4c8:	f8c6 0734 	str.w	r0, [r6, #1844]	; 0x734
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    b4cc:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    b4d0:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    b4d2:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    b4d6:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    b4da:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    b4de:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    b4e2:	f8c6 0760 	str.w	r0, [r6, #1888]	; 0x760
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    b4e6:	340a      	adds	r4, #10
    b4e8:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    b4ec:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    b4ee:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    b4f0:	f8a6 4770 	strh.w	r4, [r6, #1904]	; 0x770
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    b4f4:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    b4f8:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    b4fa:	f886 3718 	strb.w	r3, [r6, #1816]	; 0x718
	_radio.packet_rx_count = (rx_count_max + 1);
    b4fe:	f886 e748 	strb.w	lr, [r6, #1864]	; 0x748
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    b502:	f886 2742 	strb.w	r2, [r6, #1858]	; 0x742
	_radio.pkt_tx_data_pool = mem_radio;
    b506:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	if (retcode) {
    b50a:	d003      	beq.n	b514 <radio_init+0xf0>
		return (retcode + mem_size);
    b50c:	442c      	add	r4, r5
}
    b50e:	4620      	mov	r0, r4
    b510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    b514:	2301      	movs	r3, #1
    b516:	f886 378a 	strb.w	r3, [r6, #1930]	; 0x78a
	common_init();
    b51a:	f7f9 fbe3 	bl	4ce4 <common_init>
	radio_setup();
    b51e:	f003 f89d 	bl	e65c <radio_setup>
	return retcode;
    b522:	e7f4      	b.n	b50e <radio_init+0xea>
    b524:	20000340 	.word	0x20000340

0000b528 <radio_hf_clock_get>:
}
    b528:	4b01      	ldr	r3, [pc, #4]	; (b530 <radio_hf_clock_get+0x8>)
    b52a:	6818      	ldr	r0, [r3, #0]
    b52c:	4770      	bx	lr
    b52e:	bf00      	nop
    b530:	20000340 	.word	0x20000340

0000b534 <ll_reset>:
{
    b534:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    b536:	2103      	movs	r1, #3
    b538:	2005      	movs	r0, #5
    b53a:	f7f9 fcad 	bl	4e98 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    b53e:	2104      	movs	r1, #4
    b540:	2006      	movs	r0, #6
    b542:	f7f9 fca9 	bl	4e98 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    b546:	4c22      	ldr	r4, [pc, #136]	; (b5d0 <ll_reset+0x9c>)
    b548:	2500      	movs	r5, #0
    b54a:	f894 2718 	ldrb.w	r2, [r4, #1816]	; 0x718
    b54e:	b2ab      	uxth	r3, r5
    b550:	429a      	cmp	r2, r3
    b552:	f105 0501 	add.w	r5, r5, #1
    b556:	d835      	bhi.n	b5c4 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    b558:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    b55c:	f36f 13c7 	bfc	r3, #7, #1
    b560:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    b564:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
	_radio.advertiser.conn = NULL;
    b568:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    b56a:	f360 0300 	bfi	r3, r0, #0, #1
    b56e:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    b572:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    b576:	f8b4 373e 	ldrh.w	r3, [r4, #1854]	; 0x73e
    b57a:	fbb3 f3f2 	udiv	r3, r3, r2
    b57e:	f884 3742 	strb.w	r3, [r4, #1858]	; 0x742
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    b582:	f894 3748 	ldrb.w	r3, [r4, #1864]	; 0x748
	_radio.packet_rx_last = 0;
    b586:	f884 0749 	strb.w	r0, [r4, #1865]	; 0x749
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    b58a:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    b58c:	f884 077d 	strb.w	r0, [r4, #1917]	; 0x77d
	_radio.packet_release_last = 0;
    b590:	f884 0780 	strb.w	r0, [r4, #1920]	; 0x780
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    b594:	f884 375c 	strb.w	r3, [r4, #1884]	; 0x75c
	_radio.fc_ack = _radio.fc_req;
    b598:	f894 3788 	ldrb.w	r3, [r4, #1928]	; 0x788
	_radio.advertiser.conn = NULL;
    b59c:	f8c4 0638 	str.w	r0, [r4, #1592]	; 0x638
	_radio.scanner.conn = NULL;
    b5a0:	f8c4 0674 	str.w	r0, [r4, #1652]	; 0x674
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    b5a4:	f8a4 2740 	strh.w	r2, [r4, #1856]	; 0x740
	_radio.packet_rx_acquire = 0;
    b5a8:	f884 074a 	strb.w	r0, [r4, #1866]	; 0x74a
	_radio.packet_tx_last = 0;
    b5ac:	f884 077e 	strb.w	r0, [r4, #1918]	; 0x77e
	_radio.packet_release_first = 0;
    b5b0:	f884 077f 	strb.w	r0, [r4, #1919]	; 0x77f
	_radio.fc_ack = _radio.fc_req;
    b5b4:	f884 3789 	strb.w	r3, [r4, #1929]	; 0x789
	ll_filter_reset(false);
    b5b8:	f002 fe48 	bl	e24c <ll_filter_reset>
}
    b5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    b5c0:	f7f9 bb90 	b.w	4ce4 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    b5c4:	1da8      	adds	r0, r5, #6
    b5c6:	21ff      	movs	r1, #255	; 0xff
    b5c8:	b2c0      	uxtb	r0, r0
    b5ca:	f7f9 fc65 	bl	4e98 <role_disable>
    b5ce:	e7bc      	b.n	b54a <ll_reset+0x16>
    b5d0:	20000340 	.word	0x20000340

0000b5d4 <radio_adv_data_get>:
}
    b5d4:	4800      	ldr	r0, [pc, #0]	; (b5d8 <radio_adv_data_get+0x4>)
    b5d6:	4770      	bx	lr
    b5d8:	2000036c 	.word	0x2000036c

0000b5dc <radio_aux_adv_data_get>:
}
    b5dc:	4800      	ldr	r0, [pc, #0]	; (b5e0 <radio_aux_adv_data_get+0x4>)
    b5de:	4770      	bx	lr
    b5e0:	20000570 	.word	0x20000570

0000b5e4 <radio_scan_data_get>:
}
    b5e4:	4800      	ldr	r0, [pc, #0]	; (b5e8 <radio_scan_data_get+0x4>)
    b5e6:	4770      	bx	lr
    b5e8:	20000774 	.word	0x20000774

0000b5ec <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    b5ec:	4b02      	ldr	r3, [pc, #8]	; (b5f8 <ll_adv_is_enabled+0xc>)
    b5ee:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    b5f2:	09c0      	lsrs	r0, r0, #7
    b5f4:	4770      	bx	lr
    b5f6:	bf00      	nop
    b5f8:	20000340 	.word	0x20000340

0000b5fc <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    b5fc:	4b05      	ldr	r3, [pc, #20]	; (b614 <radio_adv_filter_pol_get+0x18>)
    b5fe:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    b602:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    b604:	bfba      	itte	lt
    b606:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    b60a:	f000 0003 	andlt.w	r0, r0, #3
    b60e:	2000      	movge	r0, #0
}
    b610:	4770      	bx	lr
    b612:	bf00      	nop
    b614:	20000340 	.word	0x20000340

0000b618 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    b618:	4a09      	ldr	r2, [pc, #36]	; (b640 <ll_scan_is_enabled+0x28>)
    b61a:	f892 364c 	ldrb.w	r3, [r2, #1612]	; 0x64c
    b61e:	f892 064d 	ldrb.w	r0, [r2, #1613]	; 0x64d
	       (_radio.scanner.conn ? BIT(2) : 0);
    b622:	f8d2 2674 	ldr.w	r2, [r2, #1652]	; 0x674
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    b626:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    b62a:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    b62c:	f003 0301 	and.w	r3, r3, #1
    b630:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    b634:	bf14      	ite	ne
    b636:	2004      	movne	r0, #4
    b638:	2000      	moveq	r0, #0
}
    b63a:	4318      	orrs	r0, r3
    b63c:	4770      	bx	lr
    b63e:	bf00      	nop
    b640:	20000340 	.word	0x20000340

0000b644 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    b644:	4b05      	ldr	r3, [pc, #20]	; (b65c <radio_scan_filter_pol_get+0x18>)
    b646:	f893 064c 	ldrb.w	r0, [r3, #1612]	; 0x64c
    b64a:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    b64e:	bf1c      	itt	ne
    b650:	f893 064d 	ldrbne.w	r0, [r3, #1613]	; 0x64d
    b654:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    b658:	4770      	bx	lr
    b65a:	bf00      	nop
    b65c:	20000340 	.word	0x20000340

0000b660 <radio_connect_enable>:
{
    b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_radio.scanner.conn) {
    b664:	4fd0      	ldr	r7, [pc, #832]	; (b9a8 <radio_connect_enable+0x348>)
{
    b666:	b085      	sub	sp, #20
	if (_radio.scanner.conn) {
    b668:	f8d7 6674 	ldr.w	r6, [r7, #1652]	; 0x674
{
    b66c:	9301      	str	r3, [sp, #4]
    b66e:	4683      	mov	fp, r0
    b670:	468a      	mov	sl, r1
    b672:	4691      	mov	r9, r2
    b674:	463d      	mov	r5, r7
	if (_radio.scanner.conn) {
    b676:	2e00      	cmp	r6, #0
    b678:	f040 8190 	bne.w	b99c <radio_connect_enable+0x33c>
	link = mem_acquire(&_radio.link_rx_free);
    b67c:	f507 60ea 	add.w	r0, r7, #1872	; 0x750
    b680:	f7f6 fb65 	bl	1d4e <mem_acquire>
	if (!link) {
    b684:	4680      	mov	r8, r0
    b686:	b150      	cbz	r0, b69e <radio_connect_enable+0x3e>
	conn = mem_acquire(&_radio.conn_free);
    b688:	f207 7014 	addw	r0, r7, #1812	; 0x714
    b68c:	f7f6 fb5f 	bl	1d4e <mem_acquire>
	if (!conn) {
    b690:	4604      	mov	r4, r0
    b692:	b930      	cbnz	r0, b6a2 <radio_connect_enable+0x42>
		mem_release(link, &_radio.link_rx_free);
    b694:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
    b698:	4640      	mov	r0, r8
    b69a:	f7f6 fb72 	bl	1d82 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    b69e:	2007      	movs	r0, #7
    b6a0:	e15b      	b.n	b95a <radio_connect_enable+0x2fa>
	_radio.scanner.adv_addr_type = adv_addr_type;
    b6a2:	f897 364d 	ldrb.w	r3, [r7, #1613]	; 0x64d
    b6a6:	f36b 1386 	bfi	r3, fp, #6, #1
    b6aa:	f887 364d 	strb.w	r3, [r7, #1613]	; 0x64d
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
    b6ae:	2206      	movs	r2, #6
    b6b0:	4651      	mov	r1, sl
    b6b2:	f207 6056 	addw	r0, r7, #1622	; 0x656
    b6b6:	f7f4 ff9f 	bl	5f8 <memcpy>
	_radio.scanner.conn_latency = latency;
    b6ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b6be:	f8a7 366a 	strh.w	r3, [r7, #1642]	; 0x66a
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    b6c2:	4631      	mov	r1, r6
	_radio.scanner.conn_timeout = timeout;
    b6c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	_radio.scanner.conn_interval = interval;
    b6c8:	f8a7 9668 	strh.w	r9, [r7, #1640]	; 0x668
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    b6cc:	4630      	mov	r0, r6
	_radio.scanner.conn_timeout = timeout;
    b6ce:	f8a7 366c 	strh.w	r3, [r7, #1644]	; 0x66c
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    b6d2:	f003 f8a1 	bl	e818 <radio_tx_ready_delay_get>
    b6d6:	49b5      	ldr	r1, [pc, #724]	; (b9ac <radio_connect_enable+0x34c>)
	adv_aa_check = access_addr ^ 0x8e89bed6;
    b6d8:	f8df 92e4 	ldr.w	r9, [pc, #740]	; b9c0 <radio_connect_enable+0x360>
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    b6dc:	f200 4052 	addw	r0, r0, #1106	; 0x452
    b6e0:	a3af      	add	r3, pc, #700	; (adr r3, b9a0 <radio_connect_enable+0x340>)
    b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    b6e6:	fba0 0101 	umull	r0, r1, r0, r1
    b6ea:	f7f4 fdbd 	bl	268 <__aeabi_uldivmod>
	conn->handle = 0xFFFF;
    b6ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
	_radio.scanner.ticks_conn_slot = HAL_TICKER_US_TO_TICKS(
    b6f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b6f6:	f8c7 0670 	str.w	r0, [r7, #1648]	; 0x670
	conn->handle = 0xFFFF;
    b6fa:	8423      	strh	r3, [r4, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
    b6fc:	f503 4394 	add.w	r3, r3, #18944	; 0x4a00
    b700:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	retry = 3;
    b704:	2603      	movs	r6, #3
	consecutive_cnt = 1;
    b706:	2701      	movs	r7, #1
	bt_rand(&access_addr, sizeof(u32_t));
    b708:	2104      	movs	r1, #4
    b70a:	a803      	add	r0, sp, #12
    b70c:	f7f7 fb4a 	bl	2da4 <bt_rand>
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    b710:	f8dd c00c 	ldr.w	ip, [sp, #12]
	retry--;
    b714:	3e01      	subs	r6, #1
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    b716:	2000      	movs	r0, #0
	retry--;
    b718:	b2f6      	uxtb	r6, r6
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    b71a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
	bit_idx = 31;
    b71e:	231f      	movs	r3, #31
	transitions = 0;
    b720:	4602      	mov	r2, r0
	consecutive_cnt = 1;
    b722:	2101      	movs	r1, #1
	while (bit_idx--) {
    b724:	3b01      	subs	r3, #1
    b726:	b2db      	uxtb	r3, r3
    b728:	2bff      	cmp	r3, #255	; 0xff
    b72a:	d103      	bne.n	b734 <radio_connect_enable+0xd4>
    b72c:	b3d0      	cbz	r0, b7a4 <radio_connect_enable+0x144>
    b72e:	f8cd c00c 	str.w	ip, [sp, #12]
    b732:	e037      	b.n	b7a4 <radio_connect_enable+0x144>
		bit = (access_addr >> bit_idx) & 0x01;
    b734:	fa2c fe03 	lsr.w	lr, ip, r3
    b738:	f00e 0e01 	and.w	lr, lr, #1
		if (bit == consecutive_bit) {
    b73c:	45d6      	cmp	lr, sl
    b73e:	d11a      	bne.n	b776 <radio_connect_enable+0x116>
			consecutive_cnt++;
    b740:	3101      	adds	r1, #1
    b742:	b2c9      	uxtb	r1, r1
		if ((consecutive_cnt > 6) ||
    b744:	2906      	cmp	r1, #6
    b746:	d807      	bhi.n	b758 <radio_connect_enable+0xf8>
    b748:	2b1b      	cmp	r3, #27
    b74a:	d81a      	bhi.n	b782 <radio_connect_enable+0x122>
		    ((bit_idx < 28) && (transitions < 1)) ||
    b74c:	b122      	cbz	r2, b758 <radio_connect_enable+0xf8>
    b74e:	2b1b      	cmp	r3, #27
    b750:	d017      	beq.n	b782 <radio_connect_enable+0x122>
		    ((bit_idx < 27) && (transitions < 2))) {
    b752:	2a01      	cmp	r2, #1
    b754:	d815      	bhi.n	b782 <radio_connect_enable+0x122>
    b756:	2201      	movs	r2, #1
				access_addr &= ~BIT(bit_idx);
    b758:	fa07 f103 	lsl.w	r1, r7, r3
			if (consecutive_bit) {
    b75c:	f1be 0f00 	cmp.w	lr, #0
    b760:	f000 80fe 	beq.w	b960 <radio_connect_enable+0x300>
				access_addr &= ~BIT(bit_idx);
    b764:	ea2c 0c01 	bic.w	ip, ip, r1
				consecutive_bit = 0;
    b768:	f04f 0e00 	mov.w	lr, #0
			transitions++;
    b76c:	3201      	adds	r2, #1
    b76e:	2001      	movs	r0, #1
    b770:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    b772:	4601      	mov	r1, r0
    b774:	e005      	b.n	b782 <radio_connect_enable+0x122>
			transitions++;
    b776:	3201      	adds	r2, #1
		if ((consecutive_cnt > 6) ||
    b778:	2b1b      	cmp	r3, #27
			transitions++;
    b77a:	b2d2      	uxtb	r2, r2
			consecutive_cnt = 1;
    b77c:	f04f 0101 	mov.w	r1, #1
		if ((consecutive_cnt > 6) ||
    b780:	d9e5      	bls.n	b74e <radio_connect_enable+0xee>
		if (transitions > 24) {
    b782:	2a18      	cmp	r2, #24
    b784:	f240 80f4 	bls.w	b970 <radio_connect_enable+0x310>
    b788:	b108      	cbz	r0, b78e <radio_connect_enable+0x12e>
    b78a:	f8cd c00c 	str.w	ip, [sp, #12]
    b78e:	3301      	adds	r3, #1
    b790:	9a03      	ldr	r2, [sp, #12]
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    b792:	fa07 f303 	lsl.w	r3, r7, r3
			if (consecutive_bit) {
    b796:	f1be 0f00 	cmp.w	lr, #0
    b79a:	f000 80e6 	beq.w	b96a <radio_connect_enable+0x30a>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
    b79e:	425b      	negs	r3, r3
    b7a0:	4013      	ands	r3, r2
				access_addr |= (BIT(bit_idx + 1) - 1);
    b7a2:	9303      	str	r3, [sp, #12]
	adv_aa_check = access_addr ^ 0x8e89bed6;
    b7a4:	9b03      	ldr	r3, [sp, #12]
    b7a6:	a804      	add	r0, sp, #16
    b7a8:	ea83 0309 	eor.w	r3, r3, r9
    b7ac:	f840 3d08 	str.w	r3, [r0, #-8]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
    b7b0:	2104      	movs	r1, #4
    b7b2:	f7f6 fc77 	bl	20a4 <util_ones_count_get>
    b7b6:	2801      	cmp	r0, #1
    b7b8:	f240 80e1 	bls.w	b97e <radio_connect_enable+0x31e>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    b7bc:	9b03      	ldr	r3, [sp, #12]
    b7be:	b29a      	uxth	r2, r3
    b7c0:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
    b7c4:	f000 80d6 	beq.w	b974 <radio_connect_enable+0x314>
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    b7c8:	2204      	movs	r2, #4
    b7ca:	a903      	add	r1, sp, #12
    b7cc:	f104 0010 	add.w	r0, r4, #16
	access_addr = access_addr_get();
    b7d0:	9303      	str	r3, [sp, #12]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    b7d2:	f7f4 ff11 	bl	5f8 <memcpy>
	bt_rand(&conn->crc_init[0], 3);
    b7d6:	2103      	movs	r1, #3
    b7d8:	f104 0014 	add.w	r0, r4, #20
    b7dc:	f7f7 fae2 	bl	2da4 <bt_rand>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
    b7e0:	2205      	movs	r2, #5
    b7e2:	4973      	ldr	r1, [pc, #460]	; (b9b0 <radio_connect_enable+0x350>)
    b7e4:	f104 0017 	add.w	r0, r4, #23
    b7e8:	f7f4 ff06 	bl	5f8 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
    b7ec:	f895 2727 	ldrb.w	r2, [r5, #1831]	; 0x727
    b7f0:	7f63      	ldrb	r3, [r4, #29]
    b7f2:	f362 0305 	bfi	r3, r2, #0, #6
	conn->data_chan_sel = 0;
    b7f6:	f36f 1386 	bfc	r3, #6, #1
    b7fa:	7763      	strb	r3, [r4, #29]
	conn->data_chan_hop = 6;
    b7fc:	2206      	movs	r2, #6
	conn->data_chan_use = 0;
    b7fe:	2300      	movs	r3, #0
	conn->data_chan_hop = 6;
    b800:	77a2      	strb	r2, [r4, #30]
	conn->data_chan_use = 0;
    b802:	77e3      	strb	r3, [r4, #31]
	conn->default_tx_octets = _radio.default_tx_octets;
    b804:	f8b5 172a 	ldrh.w	r1, [r5, #1834]	; 0x72a
	conn->conn_interval = _radio.scanner.conn_interval;
    b808:	f8b5 7668 	ldrh.w	r7, [r5, #1640]	; 0x668
	conn->latency = _radio.scanner.conn_latency;
    b80c:	f8b5 066a 	ldrh.w	r0, [r5, #1642]	; 0x66a
	conn->default_tx_octets = _radio.default_tx_octets;
    b810:	85a1      	strh	r1, [r4, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    b812:	211b      	movs	r1, #27
    b814:	85e1      	strh	r1, [r4, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    b816:	8621      	strh	r1, [r4, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
    b818:	f8b5 172c 	ldrh.w	r1, [r5, #1836]	; 0x72c
    b81c:	8661      	strh	r1, [r4, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    b81e:	f44f 71a4 	mov.w	r1, #328	; 0x148
	conn->phy_pref_tx = _radio.default_phy_tx;
    b822:	f8b5 672e 	ldrh.w	r6, [r5, #1838]	; 0x72e
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    b826:	86a1      	strh	r1, [r4, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
    b828:	86e1      	strh	r1, [r4, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
    b82a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
	conn->event_counter = 0;
    b82e:	8463      	strh	r3, [r4, #34]	; 0x22
	conn->phy_pref_tx = _radio.default_phy_tx;
    b830:	f366 0102 	bfi	r1, r6, #0, #3
	conn->phy_tx = BIT(0);
    b834:	2601      	movs	r6, #1
    b836:	f366 01c5 	bfi	r1, r6, #3, #3
	conn->phy_flags = 0;
    b83a:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    b83e:	f363 11c7 	bfi	r1, r3, #7, #1
    b842:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
    b846:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
	conn->conn_interval = _radio.scanner.conn_interval;
    b84a:	84a7      	strh	r7, [r4, #36]	; 0x24
	conn->phy_tx_time = BIT(0);
    b84c:	f366 0102 	bfi	r1, r6, #0, #3
    b850:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
    b854:	f8b5 e730 	ldrh.w	lr, [r5, #1840]	; 0x730
	conn->latency_prepare = 0;
    b858:	8523      	strh	r3, [r4, #40]	; 0x28
	conn->phy_pref_rx = _radio.default_phy_rx;
    b85a:	b2c9      	uxtb	r1, r1
    b85c:	f36e 01c5 	bfi	r1, lr, #3, #3
    b860:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
	conn->phy_rx = BIT(0);
    b864:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
	conn->latency_event = 0;
    b868:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->phy_rx = BIT(0);
    b86a:	f366 0102 	bfi	r1, r6, #0, #3
    b86e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
	conn->role = 0;
    b872:	7f61      	ldrb	r1, [r4, #29]
	conn->connect_expire = 6;
    b874:	87a2      	strh	r2, [r4, #60]	; 0x3c
	conn->role = 0;
    b876:	f363 11c7 	bfi	r1, r3, #7, #1
	conn->latency = _radio.scanner.conn_latency;
    b87a:	84e0      	strh	r0, [r4, #38]	; 0x26
	conn->role = 0;
    b87c:	7761      	strb	r1, [r4, #29]
	conn->common.fex_valid = 0;
    b87e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
	conn->master.terminate_ack = 0;
    b882:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    b886:	f363 0100 	bfi	r1, r3, #0, #1
    b88a:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
	conn_interval_us =
    b88e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    b892:	437a      	muls	r2, r7
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    b894:	f8b5 166c 	ldrh.w	r1, [r5, #1644]	; 0x66c
	conn->supervision_expire = 0;
    b898:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    b89c:	1e56      	subs	r6, r2, #1
    b89e:	f242 7710 	movw	r7, #10000	; 0x2710
    b8a2:	fb07 6101 	mla	r1, r7, r1, r6
	conn->procedure_expire = 0;
    b8a6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    b8aa:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    b8ae:	4b41      	ldr	r3, [pc, #260]	; (b9b4 <radio_connect_enable+0x354>)
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
    b8b0:	87e1      	strh	r1, [r4, #62]	; 0x3e
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    b8b2:	4941      	ldr	r1, [pc, #260]	; (b9b8 <radio_connect_enable+0x358>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    b8b4:	4413      	add	r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    b8b6:	4411      	add	r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    b8b8:	fbb3 f3f2 	udiv	r3, r3, r2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    b8bc:	fbb1 f1f2 	udiv	r1, r1, r2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    b8c0:	b29a      	uxth	r2, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    b8c2:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    b8c6:	1d81      	adds	r1, r0, #6
    b8c8:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    b8ca:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    b8ce:	dc5f      	bgt.n	b990 <radio_connect_enable+0x330>
	conn->llcp_version.tx = 0;
    b8d0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    b8d4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
	conn->apto_expire = 0;
    b8d8:	2000      	movs	r0, #0
	conn->llcp_version.rx = 0;
    b8da:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    b8de:	f360 0341 	bfi	r3, r0, #1, #1
    b8e2:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	conn->llcp_conn_param.disabled = 0;
    b8e6:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
	conn->apto_expire = 0;
    b8ea:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
	conn->llcp_conn_param.disabled = 0;
    b8ee:	f360 1304 	bfi	r3, r0, #4, #1
    b8f2:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	conn->sn = 0;
    b8f6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
	conn->appto_expire = 0;
    b8fa:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	conn->empty = 0;
    b8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b902:	f360 13c7 	bfi	r3, r0, #7, #1
	conn->llcp_req = 0;
    b906:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
	conn->llcp_ack = 0;
    b90a:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
	conn->llcp_terminate.req = 0;
    b90e:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
    b912:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
    b916:	f884 00b3 	strb.w	r0, [r4, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    b91a:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
    b91e:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
    b922:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
	conn->llcp_length.req = 0;
    b926:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
	conn->llcp_length.ack = 0;
    b92a:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
	conn->llcp_phy.req = 0;
    b92e:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
    b932:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
	conn->empty = 0;
    b936:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
    b93a:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
    b93e:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
    b942:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
	conn->pkt_tx_data = NULL;
    b946:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
	conn->pkt_tx_last = NULL;
    b94a:	f8c4 014c 	str.w	r0, [r4, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
    b94e:	f884 0150 	strb.w	r0, [r4, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
    b952:	f884 0151 	strb.w	r0, [r4, #337]	; 0x151
	_radio.scanner.conn = conn;
    b956:	f8c5 4674 	str.w	r4, [r5, #1652]	; 0x674
}
    b95a:	b005      	add	sp, #20
    b95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				access_addr |= BIT(bit_idx);
    b960:	ea41 0c0c 	orr.w	ip, r1, ip
				consecutive_bit = 1;
    b964:	f04f 0e01 	mov.w	lr, #1
    b968:	e700      	b.n	b76c <radio_connect_enable+0x10c>
				access_addr |= (BIT(bit_idx + 1) - 1);
    b96a:	3b01      	subs	r3, #1
    b96c:	4313      	orrs	r3, r2
    b96e:	e718      	b.n	b7a2 <radio_connect_enable+0x142>
		if (transitions > 24) {
    b970:	46f2      	mov	sl, lr
    b972:	e6d7      	b.n	b724 <radio_connect_enable+0xc4>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
    b974:	b2da      	uxtb	r2, r3
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
    b976:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
    b97a:	f47f af25 	bne.w	b7c8 <radio_connect_enable+0x168>
	LL_ASSERT(retry);
    b97e:	2e00      	cmp	r6, #0
    b980:	f47f aec2 	bne.w	b708 <radio_connect_enable+0xa8>
    b984:	f641 017f 	movw	r1, #6271	; 0x187f
    b988:	480c      	ldr	r0, [pc, #48]	; (b9bc <radio_connect_enable+0x35c>)
    b98a:	f7f4 ff91 	bl	8b0 <bt_ctlr_assert_handle>
    b98e:	e6bb      	b.n	b708 <radio_connect_enable+0xa8>
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
    b990:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    b994:	33fa      	adds	r3, #250	; 0xfa
    b996:	441a      	add	r2, r3
    b998:	b292      	uxth	r2, r2
    b99a:	e799      	b.n	b8d0 <radio_connect_enable+0x270>
		return BT_HCI_ERR_CMD_DISALLOWED;
    b99c:	200c      	movs	r0, #12
    b99e:	e7dc      	b.n	b95a <radio_connect_enable+0x2fa>
    b9a0:	1afd498d 	.word	0x1afd498d
    b9a4:	00000007 	.word	0x00000007
    b9a8:	20000340 	.word	0x20000340
    b9ac:	3b9aca00 	.word	0x3b9aca00
    b9b0:	20000a62 	.word	0x20000a62
    b9b4:	01c9c37f 	.word	0x01c9c37f
    b9b8:	026259ff 	.word	0x026259ff
    b9bc:	000109b4 	.word	0x000109b4
    b9c0:	8e89bed6 	.word	0x8e89bed6

0000b9c4 <ll_conn_update>:
{
    b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9c8:	460c      	mov	r4, r1
    b9ca:	4690      	mov	r8, r2
    b9cc:	461d      	mov	r5, r3
    b9ce:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    b9d2:	f8bd 701c 	ldrh.w	r7, [sp, #28]
	conn = connection_get(handle);
    b9d6:	f7f9 fa49 	bl	4e6c <connection_get>
	if (!conn) {
    b9da:	b330      	cbz	r0, ba2a <ll_conn_update+0x66>
	if (!cmd) {
    b9dc:	2c00      	cmp	r4, #0
    b9de:	d14a      	bne.n	ba76 <ll_conn_update+0xb2>
		if (!conn->llcp_conn_param.disabled &&
    b9e0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
    b9e4:	06d9      	lsls	r1, r3, #27
    b9e6:	d407      	bmi.n	b9f8 <ll_conn_update+0x34>
		    (!conn->common.fex_valid ||
    b9e8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
		if (!conn->llcp_conn_param.disabled &&
    b9ec:	069a      	lsls	r2, r3, #26
    b9ee:	d541      	bpl.n	ba74 <ll_conn_update+0xb0>
		     (conn->llcp_features &
    b9f0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
		    (!conn->common.fex_valid ||
    b9f4:	079b      	lsls	r3, r3, #30
    b9f6:	d43d      	bmi.n	ba74 <ll_conn_update+0xb0>
		} else if (conn->role) {
    b9f8:	f990 301d 	ldrsb.w	r3, [r0, #29]
    b9fc:	2b00      	cmp	r3, #0
    b9fe:	da17      	bge.n	ba30 <ll_conn_update+0x6c>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
    ba00:	201a      	movs	r0, #26
    ba02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((conn->llcp_conn_param.req ==
    ba06:	428b      	cmp	r3, r1
    ba08:	d00f      	beq.n	ba2a <ll_conn_update+0x66>
			    (conn->llcp_conn_param.state !=
    ba0a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			     conn->llcp_conn_param.ack) ||
    ba0e:	f003 0207 	and.w	r2, r3, #7
    ba12:	2a03      	cmp	r2, #3
    ba14:	d109      	bne.n	ba2a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    ba16:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    ba1a:	b2db      	uxtb	r3, r3
    ba1c:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.status = status;
    ba20:	f880 80c3 	strb.w	r8, [r0, #195]	; 0xc3
			conn->llcp_conn_param.cmd = 1;
    ba24:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
    ba28:	e021      	b.n	ba6e <ll_conn_update+0xaa>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ba2a:	200c      	movs	r0, #12
    ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->llcp_req != conn->llcp_ack) {
    ba30:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    ba34:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    ba38:	429a      	cmp	r2, r3
    ba3a:	d1f6      	bne.n	ba2a <ll_conn_update+0x66>
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    ba3c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
		conn->llcp.conn_upd.interval = interval;
    ba40:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.win_size = 1;
    ba44:	2401      	movs	r4, #1
		conn->llcp.conn_upd.win_offset_us = 0;
    ba46:	2100      	movs	r1, #0
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    ba48:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
    ba4c:	f361 0382 	bfi	r3, r1, #2, #1
		conn->llcp_req++;
    ba50:	4422      	add	r2, r4
		conn->llcp.conn_upd.win_size = 1;
    ba52:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
    ba56:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
		conn->llcp.conn_upd.latency = latency;
    ba5a:	f8a0 607c 	strh.w	r6, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
    ba5e:	f8a0 707e 	strh.w	r7, [r0, #126]	; 0x7e
		conn->llcp.conn_upd.is_internal = 0;
    ba62:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
    ba66:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_req++;
    ba6a:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
    ba6e:	2000      	movs	r0, #0
    ba70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			cmd++;
    ba74:	2401      	movs	r4, #1
		cmd--;
    ba76:	3c01      	subs	r4, #1
		if (cmd) {
    ba78:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ba7c:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    ba80:	f890 10c1 	ldrb.w	r1, [r0, #193]	; 0xc1
    ba84:	d1bf      	bne.n	ba06 <ll_conn_update+0x42>
			if (conn->llcp_conn_param.req !=
    ba86:	4299      	cmp	r1, r3
    ba88:	d1cf      	bne.n	ba2a <ll_conn_update+0x66>
			conn->llcp_conn_param.state = cmd;
    ba8a:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.status = 0;
    ba8e:	f880 40c3 	strb.w	r4, [r0, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
    ba92:	f364 0302 	bfi	r3, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
    ba96:	b2db      	uxtb	r3, r3
    ba98:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
    ba9c:	3101      	adds	r1, #1
			conn->llcp_conn_param.interval = interval;
    ba9e:	f8a0 50c4 	strh.w	r5, [r0, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
    baa2:	f8a0 60c6 	strh.w	r6, [r0, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
    baa6:	f8a0 70c8 	strh.w	r7, [r0, #200]	; 0xc8
			conn->llcp_conn_param.cmd = 1;
    baaa:	f880 30c2 	strb.w	r3, [r0, #194]	; 0xc2
			conn->llcp_conn_param.req++;
    baae:	f880 10c0 	strb.w	r1, [r0, #192]	; 0xc0
    bab2:	e7dc      	b.n	ba6e <ll_conn_update+0xaa>

0000bab4 <ll_chm_update>:
{
    bab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&_radio.data_chan_map[0], chm,
    bab8:	4c1e      	ldr	r4, [pc, #120]	; (bb34 <ll_chm_update+0x80>)
    baba:	4601      	mov	r1, r0
    babc:	2205      	movs	r2, #5
{
    babe:	4605      	mov	r5, r0
	memcpy(&_radio.data_chan_map[0], chm,
    bac0:	f204 7022 	addw	r0, r4, #1826	; 0x722
    bac4:	f7f4 fd98 	bl	5f8 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
    bac8:	f204 7022 	addw	r0, r4, #1826	; 0x722
    bacc:	2105      	movs	r1, #5
    bace:	f7f6 fae9 	bl	20a4 <util_ones_count_get>
	_radio.data_chan_count =
    bad2:	f884 0727 	strb.w	r0, [r4, #1831]	; 0x727
    bad6:	f894 4718 	ldrb.w	r4, [r4, #1816]	; 0x718
    bada:	3c01      	subs	r4, #1
    badc:	b2e4      	uxtb	r4, r4
		conn->llcp.chan_map.initiate = 1;
    bade:	2701      	movs	r7, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    bae0:	f04f 0802 	mov.w	r8, #2
	while (instance--) {
    bae4:	2cff      	cmp	r4, #255	; 0xff
    bae6:	d102      	bne.n	baee <ll_chm_update+0x3a>
	return 0;
    bae8:	2000      	movs	r0, #0
    baea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn = connection_get(instance);
    baee:	4620      	mov	r0, r4
    baf0:	f7f9 f9bc 	bl	4e6c <connection_get>
		if (!conn || conn->role) {
    baf4:	4606      	mov	r6, r0
    baf6:	b1b8      	cbz	r0, bb28 <ll_chm_update+0x74>
    baf8:	f990 301d 	ldrsb.w	r3, [r0, #29]
    bafc:	2b00      	cmp	r3, #0
    bafe:	db13      	blt.n	bb28 <ll_chm_update+0x74>
		if (conn->llcp_req != conn->llcp_ack) {
    bb00:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    bb04:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    bb08:	429a      	cmp	r2, r3
    bb0a:	d110      	bne.n	bb2e <ll_chm_update+0x7a>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
    bb0c:	2205      	movs	r2, #5
    bb0e:	4629      	mov	r1, r5
    bb10:	3079      	adds	r0, #121	; 0x79
    bb12:	f7f4 fd71 	bl	5f8 <memcpy>
		conn->llcp_req++;
    bb16:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
		conn->llcp.chan_map.initiate = 1;
    bb1a:	f886 7078 	strb.w	r7, [r6, #120]	; 0x78
		conn->llcp_req++;
    bb1e:	3301      	adds	r3, #1
		conn->llcp_type = LLCP_CHAN_MAP;
    bb20:	f886 8076 	strb.w	r8, [r6, #118]	; 0x76
		conn->llcp_req++;
    bb24:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
    bb28:	3c01      	subs	r4, #1
    bb2a:	b2e4      	uxtb	r4, r4
    bb2c:	e7da      	b.n	bae4 <ll_chm_update+0x30>
			return 1;
    bb2e:	2001      	movs	r0, #1
}
    bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb34:	20000340 	.word	0x20000340

0000bb38 <ll_chm_get>:
{
    bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb3a:	460d      	mov	r5, r1
	conn = connection_get(handle);
    bb3c:	f7f9 f996 	bl	4e6c <connection_get>
	if (!conn) {
    bb40:	4604      	mov	r4, r0
    bb42:	b160      	cbz	r0, bb5e <ll_chm_get+0x26>
		conn->chm_update = 0;
    bb44:	2700      	movs	r7, #0
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    bb46:	f100 0617 	add.w	r6, r0, #23
		conn->chm_update = 0;
    bb4a:	7727      	strb	r7, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
    bb4c:	2205      	movs	r2, #5
    bb4e:	4631      	mov	r1, r6
    bb50:	4628      	mov	r0, r5
    bb52:	f7f4 fd51 	bl	5f8 <memcpy>
	} while (conn->chm_update);
    bb56:	7f20      	ldrb	r0, [r4, #28]
    bb58:	2800      	cmp	r0, #0
    bb5a:	d1f6      	bne.n	bb4a <ll_chm_get+0x12>
    bb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    bb5e:	2001      	movs	r0, #1
}
    bb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bb62 <ll_start_enc_req_send>:
{
    bb62:	b570      	push	{r4, r5, r6, lr}
    bb64:	460d      	mov	r5, r1
    bb66:	4616      	mov	r6, r2
	conn = connection_get(handle);
    bb68:	f7f9 f980 	bl	4e6c <connection_get>
	if (!conn) {
    bb6c:	4604      	mov	r4, r0
    bb6e:	b908      	cbnz	r0, bb74 <ll_start_enc_req_send+0x12>
		return 1;
    bb70:	2001      	movs	r0, #1
    bb72:	bd70      	pop	{r4, r5, r6, pc}
	if (error_code) {
    bb74:	b315      	cbz	r5, bbbc <ll_start_enc_req_send+0x5a>
		if (conn->refresh == 0) {
    bb76:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
    bb7a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
    bb7e:	d110      	bne.n	bba2 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
    bb80:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    bb84:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bb88:	4293      	cmp	r3, r2
    bb8a:	d1f1      	bne.n	bb70 <ll_start_enc_req_send+0xe>
			conn->llcp_req++;
    bb8c:	3301      	adds	r3, #1
			conn->llcp_type = LLCP_ENCRYPTION;
    bb8e:	2203      	movs	r2, #3
			conn->llcp.encryption.error_code = error_code;
    bb90:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			conn->llcp.encryption.initiate = 0;
    bb94:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
			conn->llcp_req++;
    bb98:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
			conn->llcp_type = LLCP_ENCRYPTION;
    bb9c:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
    bba0:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
    bba2:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    bba6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    bbaa:	4293      	cmp	r3, r2
    bbac:	d1e0      	bne.n	bb70 <ll_start_enc_req_send+0xe>
			conn->llcp_terminate.req++;
    bbae:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
    bbb0:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
			conn->llcp_terminate.req++;
    bbb4:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	return 0;
    bbb8:	2000      	movs	r0, #0
    bbba:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    bbbc:	2210      	movs	r2, #16
    bbbe:	4631      	mov	r1, r6
    bbc0:	3084      	adds	r0, #132	; 0x84
    bbc2:	f7f4 fd19 	bl	5f8 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
    bbc6:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
    bbca:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    bbce:	4293      	cmp	r3, r2
    bbd0:	d1ce      	bne.n	bb70 <ll_start_enc_req_send+0xe>
		conn->llcp_type = LLCP_ENCRYPTION;
    bbd2:	2203      	movs	r2, #3
		conn->llcp_req++;
    bbd4:	3301      	adds	r3, #1
		conn->llcp.encryption.error_code = 0;
    bbd6:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
		conn->llcp.encryption.initiate = 0;
    bbda:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
    bbde:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
    bbe2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    bbe6:	e7e7      	b.n	bbb8 <ll_start_enc_req_send+0x56>

0000bbe8 <ll_feature_req_send>:
{
    bbe8:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    bbea:	f7f9 f93f 	bl	4e6c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    bbee:	b168      	cbz	r0, bc0c <ll_feature_req_send+0x24>
    bbf0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    bbf4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    bbf8:	4293      	cmp	r3, r2
    bbfa:	d107      	bne.n	bc0c <ll_feature_req_send+0x24>
	conn->llcp_req++;
    bbfc:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    bbfe:	2204      	movs	r2, #4
	conn->llcp_req++;
    bc00:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    bc04:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    bc08:	2000      	movs	r0, #0
    bc0a:	bd08      	pop	{r3, pc}
		return 1;
    bc0c:	2001      	movs	r0, #1
}
    bc0e:	bd08      	pop	{r3, pc}

0000bc10 <ll_version_ind_send>:
{
    bc10:	b508      	push	{r3, lr}
	conn = connection_get(handle);
    bc12:	f7f9 f92b 	bl	4e6c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    bc16:	b168      	cbz	r0, bc34 <ll_version_ind_send+0x24>
    bc18:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    bc1c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    bc20:	4293      	cmp	r3, r2
    bc22:	d107      	bne.n	bc34 <ll_version_ind_send+0x24>
	conn->llcp_req++;
    bc24:	3301      	adds	r3, #1
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    bc26:	2205      	movs	r2, #5
	conn->llcp_req++;
    bc28:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    bc2c:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
	return 0;
    bc30:	2000      	movs	r0, #0
    bc32:	bd08      	pop	{r3, pc}
		return 1;
    bc34:	2001      	movs	r0, #1
}
    bc36:	bd08      	pop	{r3, pc}

0000bc38 <ll_terminate_ind_send>:
{
    bc38:	b510      	push	{r4, lr}
    bc3a:	460c      	mov	r4, r1
	conn = connection_get(handle);
    bc3c:	f7f9 f916 	bl	4e6c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    bc40:	b160      	cbz	r0, bc5c <ll_terminate_ind_send+0x24>
    bc42:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
    bc46:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
    bc4a:	4293      	cmp	r3, r2
    bc4c:	d106      	bne.n	bc5c <ll_terminate_ind_send+0x24>
	conn->llcp_terminate.req++;
    bc4e:	3301      	adds	r3, #1
	conn->llcp_terminate.reason_own = reason;
    bc50:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
    bc54:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
    bc58:	2000      	movs	r0, #0
    bc5a:	bd10      	pop	{r4, pc}
		return 1;
    bc5c:	2001      	movs	r0, #1
}
    bc5e:	bd10      	pop	{r4, pc}

0000bc60 <ll_tx_pwr_lvl_get>:
{
    bc60:	b510      	push	{r4, lr}
    bc62:	4614      	mov	r4, r2
	conn = connection_get(handle);
    bc64:	f7f9 f902 	bl	4e6c <connection_get>
	if (!conn) {
    bc68:	b110      	cbz	r0, bc70 <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    bc6a:	2000      	movs	r0, #0
    bc6c:	7020      	strb	r0, [r4, #0]
	return 0;
    bc6e:	bd10      	pop	{r4, pc}
		return 1;
    bc70:	2001      	movs	r0, #1
}
    bc72:	bd10      	pop	{r4, pc}

0000bc74 <ll_apto_get>:
{
    bc74:	b510      	push	{r4, lr}
    bc76:	460c      	mov	r4, r1
	conn = connection_get(handle);
    bc78:	f7f9 f8f8 	bl	4e6c <connection_get>
	if (!conn) {
    bc7c:	b160      	cbz	r0, bc98 <ll_apto_get+0x24>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    bc7e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
    bc80:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    bc84:	435a      	muls	r2, r3
    bc86:	237d      	movs	r3, #125	; 0x7d
    bc88:	4353      	muls	r3, r2
	return 0;
    bc8a:	2000      	movs	r0, #0
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
    bc8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bc90:	fb93 f3f2 	sdiv	r3, r3, r2
    bc94:	8023      	strh	r3, [r4, #0]
	return 0;
    bc96:	bd10      	pop	{r4, pc}
		return 1;
    bc98:	2001      	movs	r0, #1
}
    bc9a:	bd10      	pop	{r4, pc}

0000bc9c <ll_apto_set>:
{
    bc9c:	b510      	push	{r4, lr}
    bc9e:	460c      	mov	r4, r1
	conn = connection_get(handle);
    bca0:	f7f9 f8e4 	bl	4e6c <connection_get>
	if (!conn) {
    bca4:	b170      	cbz	r0, bcc4 <ll_apto_set+0x28>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
    bca6:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    bca8:	f240 43e2 	movw	r3, #1250	; 0x4e2
    bcac:	4353      	muls	r3, r2
    bcae:	f242 7110 	movw	r1, #10000	; 0x2710
    bcb2:	fb01 3404 	mla	r4, r1, r4, r3
    bcb6:	3c01      	subs	r4, #1
    bcb8:	fb94 f4f3 	sdiv	r4, r4, r3
    bcbc:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
    bcc0:	2000      	movs	r0, #0
    bcc2:	bd10      	pop	{r4, pc}
		return 1;
    bcc4:	2001      	movs	r0, #1
}
    bcc6:	bd10      	pop	{r4, pc}

0000bcc8 <ll_length_req_send>:
{
    bcc8:	b570      	push	{r4, r5, r6, lr}
    bcca:	460e      	mov	r6, r1
    bccc:	4615      	mov	r5, r2
	conn = connection_get(handle);
    bcce:	f7f9 f8cd 	bl	4e6c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    bcd2:	b1d0      	cbz	r0, bd0a <ll_length_req_send+0x42>
    bcd4:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    bcd8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    bcdc:	429a      	cmp	r2, r3
    bcde:	d114      	bne.n	bd0a <ll_length_req_send+0x42>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
    bce0:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    bce4:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    bce8:	4293      	cmp	r3, r2
    bcea:	d10e      	bne.n	bd0a <ll_length_req_send+0x42>
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    bcec:	f890 40ea 	ldrb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
    bcf0:	f8a0 60ee 	strh.w	r6, [r0, #238]	; 0xee
	conn->llcp_length.req++;
    bcf4:	3301      	adds	r3, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    bcf6:	f36f 0401 	bfc	r4, #0, #2
	conn->llcp_length.req++;
    bcfa:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    bcfe:	f880 40ea 	strb.w	r4, [r0, #234]	; 0xea
	conn->llcp_length.tx_time = tx_time;
    bd02:	f8a0 50f2 	strh.w	r5, [r0, #242]	; 0xf2
	return 0;
    bd06:	2000      	movs	r0, #0
    bd08:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    bd0a:	2001      	movs	r0, #1
}
    bd0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000bd10 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
    bd10:	4b03      	ldr	r3, [pc, #12]	; (bd20 <ll_length_default_get+0x10>)
    bd12:	f8b3 272a 	ldrh.w	r2, [r3, #1834]	; 0x72a
    bd16:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    bd18:	f8b3 372c 	ldrh.w	r3, [r3, #1836]	; 0x72c
    bd1c:	800b      	strh	r3, [r1, #0]
    bd1e:	4770      	bx	lr
    bd20:	20000340 	.word	0x20000340

0000bd24 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
    bd24:	4b03      	ldr	r3, [pc, #12]	; (bd34 <ll_length_default_set+0x10>)
    bd26:	f8a3 072a 	strh.w	r0, [r3, #1834]	; 0x72a
	_radio.default_tx_time = max_tx_time;
    bd2a:	f8a3 172c 	strh.w	r1, [r3, #1836]	; 0x72c
}
    bd2e:	2000      	movs	r0, #0
    bd30:	4770      	bx	lr
    bd32:	bf00      	nop
    bd34:	20000340 	.word	0x20000340

0000bd38 <ll_length_max_get>:
{
    bd38:	b510      	push	{r4, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    bd3a:	241b      	movs	r4, #27
    bd3c:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    bd3e:	f44f 6029 	mov.w	r0, #2704	; 0xa90
    bd42:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    bd44:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
    bd46:	8018      	strh	r0, [r3, #0]
    bd48:	bd10      	pop	{r4, pc}

0000bd4a <ll_phy_get>:
{
    bd4a:	b538      	push	{r3, r4, r5, lr}
    bd4c:	460d      	mov	r5, r1
    bd4e:	4614      	mov	r4, r2
	conn = connection_get(handle);
    bd50:	f7f9 f88c 	bl	4e6c <connection_get>
	if (!conn) {
    bd54:	b158      	cbz	r0, bd6e <ll_phy_get+0x24>
	*tx = conn->phy_tx;
    bd56:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    bd5a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    bd5e:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
    bd60:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    bd64:	f3c3 0302 	ubfx	r3, r3, #0, #3
    bd68:	7023      	strb	r3, [r4, #0]
	return 0;
    bd6a:	2000      	movs	r0, #0
    bd6c:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
    bd6e:	2001      	movs	r0, #1
}
    bd70:	bd38      	pop	{r3, r4, r5, pc}
	...

0000bd74 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
    bd74:	4b03      	ldr	r3, [pc, #12]	; (bd84 <ll_phy_default_set+0x10>)
    bd76:	f8a3 072e 	strh.w	r0, [r3, #1838]	; 0x72e
	_radio.default_phy_rx = rx;
    bd7a:	f8a3 1730 	strh.w	r1, [r3, #1840]	; 0x730
}
    bd7e:	2000      	movs	r0, #0
    bd80:	4770      	bx	lr
    bd82:	bf00      	nop
    bd84:	20000340 	.word	0x20000340

0000bd88 <ll_phy_req_send>:
{
    bd88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bd8c:	4689      	mov	r9, r1
    bd8e:	4690      	mov	r8, r2
    bd90:	461f      	mov	r7, r3
	conn = connection_get(handle);
    bd92:	f7f9 f86b 	bl	4e6c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    bd96:	b320      	cbz	r0, bde2 <ll_phy_req_send+0x5a>
    bd98:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    bd9c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    bda0:	429a      	cmp	r2, r3
    bda2:	d11e      	bne.n	bde2 <ll_phy_req_send+0x5a>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
    bda4:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    bda8:	f890 50f5 	ldrb.w	r5, [r0, #245]	; 0xf5
    bdac:	429d      	cmp	r5, r3
    bdae:	d118      	bne.n	bde2 <ll_phy_req_send+0x5a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
    bdb0:	f890 40f6 	ldrb.w	r4, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
    bdb4:	f890 60f7 	ldrb.w	r6, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
    bdb8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
    bdbc:	f369 0484 	bfi	r4, r9, #2, #3
	conn->llcp_phy.flags = flags;
    bdc0:	f046 0102 	orr.w	r1, r6, #2
    bdc4:	f368 0100 	bfi	r1, r8, #0, #1
	conn->llcp_phy.rx = rx;
    bdc8:	4622      	mov	r2, r4
	conn->llcp_phy.req++;
    bdca:	3501      	adds	r5, #1
	conn->llcp_phy.flags = flags;
    bdcc:	f880 10f7 	strb.w	r1, [r0, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
    bdd0:	f367 1247 	bfi	r2, r7, #5, #3
	conn->llcp_phy.req++;
    bdd4:	f880 50f4 	strb.w	r5, [r0, #244]	; 0xf4
	conn->llcp_phy.rx = rx;
    bdd8:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	return 0;
    bddc:	2000      	movs	r0, #0
    bdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
    bde2:	2001      	movs	r0, #1
}
    bde4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000bde8 <ll_rx_get>:
{
    bde8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bdec:	4605      	mov	r5, r0
    bdee:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    bdf0:	4918      	ldr	r1, [pc, #96]	; (be54 <ll_rx_get+0x6c>)
    bdf2:	f8d1 3754 	ldr.w	r3, [r1, #1876]	; 0x754
    bdf6:	f8d1 2758 	ldr.w	r2, [r1, #1880]	; 0x758
    bdfa:	4293      	cmp	r3, r2
    bdfc:	460f      	mov	r7, r1
    bdfe:	d01f      	beq.n	be40 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    be00:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    be04:	f201 717f 	addw	r1, r1, #1919	; 0x77f
    be08:	f898 2000 	ldrb.w	r2, [r8]
    be0c:	f7f8 ffe4 	bl	4dd8 <tx_cmplt_get>
		if (!cmplt) {
    be10:	4604      	mov	r4, r0
    be12:	b9e0      	cbnz	r0, be4e <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    be14:	ae02      	add	r6, sp, #8
    be16:	f897 377f 	ldrb.w	r3, [r7, #1919]	; 0x77f
    be1a:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    be1e:	f897 2780 	ldrb.w	r2, [r7, #1920]	; 0x780
    be22:	4631      	mov	r1, r6
    be24:	f10d 0006 	add.w	r0, sp, #6
    be28:	f7f8 ffd6 	bl	4dd8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    be2c:	b934      	cbnz	r4, be3c <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    be2e:	b928      	cbnz	r0, be3c <ll_rx_get+0x54>
			*node_rx = _node_rx;
    be30:	f8c5 8000 	str.w	r8, [r5]
}
    be34:	4620      	mov	r0, r4
    be36:	b002      	add	sp, #8
    be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    be3c:	4604      	mov	r4, r0
    be3e:	e7ee      	b.n	be1e <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    be40:	f891 2780 	ldrb.w	r2, [r1, #1920]	; 0x780
    be44:	f201 717f 	addw	r1, r1, #1919	; 0x77f
    be48:	f7f8 ffc6 	bl	4dd8 <tx_cmplt_get>
    be4c:	4604      	mov	r4, r0
		*node_rx = NULL;
    be4e:	2300      	movs	r3, #0
    be50:	602b      	str	r3, [r5, #0]
    be52:	e7ef      	b.n	be34 <ll_rx_get+0x4c>
    be54:	20000340 	.word	0x20000340

0000be58 <ll_rx_mem_release>:
{
    be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    be5c:	4d16      	ldr	r5, [pc, #88]	; (beb8 <ll_rx_mem_release+0x60>)
			LL_ASSERT(0);
    be5e:	4e17      	ldr	r6, [pc, #92]	; (bebc <ll_rx_mem_release+0x64>)
{
    be60:	4604      	mov	r4, r0
	_node_rx = *node_rx;
    be62:	6800      	ldr	r0, [r0, #0]
			mem_release(conn, &_radio.conn_free);
    be64:	f205 7714 	addw	r7, r5, #1812	; 0x714
	while (_node_rx) {
    be68:	b928      	cbnz	r0, be76 <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    be6a:	6020      	str	r0, [r4, #0]
	packet_rx_allocate(0xff);
    be6c:	20ff      	movs	r0, #255	; 0xff
}
    be6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    be72:	f7f8 beeb 	b.w	4c4c <packet_rx_allocate>
		switch (_node_rx_free->hdr.type) {
    be76:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    be78:	f8d0 8000 	ldr.w	r8, [r0]
    be7c:	2a0c      	cmp	r2, #12
    be7e:	d815      	bhi.n	beac <ll_rx_mem_release+0x54>
    be80:	2301      	movs	r3, #1
    be82:	4093      	lsls	r3, r2
    be84:	f641 727e 	movw	r2, #8062	; 0x1f7e
    be88:	4213      	tst	r3, r2
    be8a:	d10a      	bne.n	bea2 <ll_rx_mem_release+0x4a>
    be8c:	061b      	lsls	r3, r3, #24
    be8e:	d50d      	bpl.n	beac <ll_rx_mem_release+0x54>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    be90:	88c2      	ldrh	r2, [r0, #6]
    be92:	f8d5 0710 	ldr.w	r0, [r5, #1808]	; 0x710
    be96:	f44f 71aa 	mov.w	r1, #340	; 0x154
    be9a:	f7f5 ff8d 	bl	1db8 <mem_get>
			mem_release(conn, &_radio.conn_free);
    be9e:	4639      	mov	r1, r7
    bea0:	e000      	b.n	bea4 <ll_rx_mem_release+0x4c>
			mem_release(_node_rx_free,
    bea2:	4907      	ldr	r1, [pc, #28]	; (bec0 <ll_rx_mem_release+0x68>)
			mem_release(conn, &_radio.conn_free);
    bea4:	f7f5 ff6d 	bl	1d82 <mem_release>
{
    bea8:	4640      	mov	r0, r8
    beaa:	e7dd      	b.n	be68 <ll_rx_mem_release+0x10>
			LL_ASSERT(0);
    beac:	f243 1110 	movw	r1, #12560	; 0x3110
    beb0:	4630      	mov	r0, r6
    beb2:	f7f4 fcfd 	bl	8b0 <bt_ctlr_assert_handle>
			break;
    beb6:	e7f7      	b.n	bea8 <ll_rx_mem_release+0x50>
    beb8:	20000340 	.word	0x20000340
    bebc:	000109b4 	.word	0x000109b4
    bec0:	20000a78 	.word	0x20000a78

0000bec4 <do_radio_rx_fc_set>:
	if (req == ack) {
    bec4:	4291      	cmp	r1, r2
{
    bec6:	b510      	push	{r4, lr}
    bec8:	4b14      	ldr	r3, [pc, #80]	; (bf1c <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    beca:	d119      	bne.n	bf00 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    becc:	f8d3 2758 	ldr.w	r2, [r3, #1880]	; 0x758
    bed0:	f8d3 4754 	ldr.w	r4, [r3, #1876]	; 0x754
    bed4:	4294      	cmp	r4, r2
    bed6:	d111      	bne.n	befc <do_radio_rx_fc_set+0x38>
			if (ack1 == 0) {
    bed8:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    beda:	bf14      	ite	ne
    bedc:	460a      	movne	r2, r1
    bede:	2203      	moveq	r2, #3
			_radio.fc_handle[--ack1] = handle;
    bee0:	3a01      	subs	r2, #1
    bee2:	b2d2      	uxtb	r2, r2
    bee4:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    bee8:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
			if (req != _radio.fc_req) {
    beec:	f893 2788 	ldrb.w	r2, [r3, #1928]	; 0x788
			_radio.fc_handle[--ack1] = handle;
    bef0:	f8a4 0782 	strh.w	r0, [r4, #1922]	; 0x782
			if (req != _radio.fc_req) {
    bef4:	4291      	cmp	r1, r2
    bef6:	d00f      	beq.n	bf18 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    bef8:	f883 1789 	strb.w	r1, [r3, #1929]	; 0x789
			return 1;
    befc:	2001      	movs	r0, #1
    befe:	bd10      	pop	{r4, pc}
	} else if (((req == 0) &&
    bf00:	b929      	cbnz	r1, bf0e <do_radio_rx_fc_set+0x4a>
    bf02:	f8b3 3786 	ldrh.w	r3, [r3, #1926]	; 0x786
				return 1;
    bf06:	1a18      	subs	r0, r3, r0
    bf08:	bf18      	it	ne
    bf0a:	2001      	movne	r0, #1
    bf0c:	bd10      	pop	{r4, pc}
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    bf0e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    bf12:	f8b3 3780 	ldrh.w	r3, [r3, #1920]	; 0x780
    bf16:	e7f6      	b.n	bf06 <do_radio_rx_fc_set+0x42>
	return 0;
    bf18:	2000      	movs	r0, #0
}
    bf1a:	bd10      	pop	{r4, pc}
    bf1c:	20000340 	.word	0x20000340

0000bf20 <radio_rx_fc_set>:
{
    bf20:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    bf22:	4b14      	ldr	r3, [pc, #80]	; (bf74 <radio_rx_fc_set+0x54>)
    bf24:	f893 278a 	ldrb.w	r2, [r3, #1930]	; 0x78a
{
    bf28:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    bf2a:	b302      	cbz	r2, bf6e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    bf2c:	f893 2788 	ldrb.w	r2, [r3, #1928]	; 0x788
    bf30:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    bf32:	f893 2789 	ldrb.w	r2, [r3, #1929]	; 0x789
		if (fc) {
    bf36:	b135      	cbz	r5, bf46 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    bf38:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bf3c:	4298      	cmp	r0, r3
    bf3e:	d016      	beq.n	bf6e <radio_rx_fc_set+0x4e>
}
    bf40:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    bf42:	f7ff bfbf 	b.w	bec4 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    bf46:	f8d3 0754 	ldr.w	r0, [r3, #1876]	; 0x754
    bf4a:	f8d3 4758 	ldr.w	r4, [r3, #1880]	; 0x758
    bf4e:	42a0      	cmp	r0, r4
    bf50:	d10d      	bne.n	bf6e <radio_rx_fc_set+0x4e>
    bf52:	4291      	cmp	r1, r2
    bf54:	d00b      	beq.n	bf6e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    bf56:	f8d3 4758 	ldr.w	r4, [r3, #1880]	; 0x758
			_radio.fc_ack = req;
    bf5a:	f883 1789 	strb.w	r1, [r3, #1929]	; 0x789
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    bf5e:	42a0      	cmp	r0, r4
    bf60:	d005      	beq.n	bf6e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    bf62:	f893 0788 	ldrb.w	r0, [r3, #1928]	; 0x788
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    bf66:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    bf68:	bf08      	it	eq
    bf6a:	f883 2789 	strbeq.w	r2, [r3, #1929]	; 0x789
}
    bf6e:	2000      	movs	r0, #0
    bf70:	bc30      	pop	{r4, r5}
    bf72:	4770      	bx	lr
    bf74:	20000340 	.word	0x20000340

0000bf78 <ll_tx_mem_acquire>:
	return mem_acquire(&_radio.pkt_tx_data_free);
    bf78:	4801      	ldr	r0, [pc, #4]	; (bf80 <ll_tx_mem_acquire+0x8>)
    bf7a:	f7f5 bee8 	b.w	1d4e <mem_acquire>
    bf7e:	bf00      	nop
    bf80:	20000aac 	.word	0x20000aac

0000bf84 <ll_tx_mem_release>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    bf84:	4901      	ldr	r1, [pc, #4]	; (bf8c <ll_tx_mem_release+0x8>)
    bf86:	f7f5 befc 	b.w	1d82 <mem_release>
    bf8a:	bf00      	nop
    bf8c:	20000aac 	.word	0x20000aac

0000bf90 <ll_tx_mem_enqueue>:
}

u32_t ll_tx_mem_enqueue(u16_t handle, void *node_tx)
{
    bf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    bf94:	4c2e      	ldr	r4, [pc, #184]	; (c050 <ll_tx_mem_enqueue+0xc0>)
    bf96:	f894 577e 	ldrb.w	r5, [r4, #1918]	; 0x77e
	if (last == _radio.packet_tx_count) {
    bf9a:	f894 377c 	ldrb.w	r3, [r4, #1916]	; 0x77c
	last = _radio.packet_tx_last + 1;
    bf9e:	3501      	adds	r5, #1
{
    bfa0:	b088      	sub	sp, #32
	last = _radio.packet_tx_last + 1;
    bfa2:	b2ed      	uxtb	r5, r5
{
    bfa4:	4680      	mov	r8, r0
    bfa6:	460f      	mov	r7, r1
		last = 0;
    bfa8:	42ab      	cmp	r3, r5
    bfaa:	bf08      	it	eq
    bfac:	2500      	moveq	r5, #0
	}

	pdu_data = (void *)((struct radio_pdu_node_tx *)node_tx)->pdu_data;
	conn = connection_get(handle);
    bfae:	f7f8 ff5d 	bl	4e6c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
    bfb2:	4606      	mov	r6, r0
    bfb4:	2800      	cmp	r0, #0
    bfb6:	d048      	beq.n	c04a <ll_tx_mem_enqueue+0xba>
    bfb8:	f894 377d 	ldrb.w	r3, [r4, #1917]	; 0x77d
    bfbc:	429d      	cmp	r5, r3
    bfbe:	d044      	beq.n	c04a <ll_tx_mem_enqueue+0xba>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
    bfc0:	f8b4 3770 	ldrh.w	r3, [r4, #1904]	; 0x770
    bfc4:	797a      	ldrb	r2, [r7, #5]
    bfc6:	3b07      	subs	r3, #7
    bfc8:	429a      	cmp	r2, r3
    bfca:	d904      	bls.n	bfd6 <ll_tx_mem_enqueue+0x46>
    bfcc:	f243 1195 	movw	r1, #12693	; 0x3195
    bfd0:	4820      	ldr	r0, [pc, #128]	; (c054 <ll_tx_mem_enqueue+0xc4>)
    bfd2:	f7f4 fc6d 	bl	8b0 <bt_ctlr_assert_handle>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, lldata)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
    bfd6:	f894 277e 	ldrb.w	r2, [r4, #1918]	; 0x77e
    bfda:	f8d4 3774 	ldr.w	r3, [r4, #1908]	; 0x774
    bfde:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    bfe2:	f823 8032 	strh.w	r8, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].node_tx = node_tx;
    bfe6:	604f      	str	r7, [r1, #4]
	_radio.packet_tx_last = last;
    bfe8:	f884 577e 	strb.w	r5, [r4, #1918]	; 0x77e

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    bfec:	f996 301d 	ldrsb.w	r3, [r6, #29]
    bff0:	2b00      	cmp	r3, #0
    bff2:	db03      	blt.n	bffc <ll_tx_mem_enqueue+0x6c>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
    bff4:	2000      	movs	r0, #0
}
    bff6:	b008      	add	sp, #32
    bff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
    bffc:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    bffe:	2b00      	cmp	r3, #0
    c000:	d0f8      	beq.n	bff4 <ll_tx_mem_enqueue+0x64>
    c002:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
    c006:	f013 0402 	ands.w	r4, r3, #2
    c00a:	d1f3      	bne.n	bff4 <ll_tx_mem_enqueue+0x64>
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c00c:	f896 2020 	ldrb.w	r2, [r6, #32]
		conn->slave.latency_cancel = 1;
    c010:	f043 0302 	orr.w	r3, r3, #2
    c014:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    c018:	4b0f      	ldr	r3, [pc, #60]	; (c058 <ll_tx_mem_enqueue+0xc8>)
    c01a:	9305      	str	r3, [sp, #20]
    c01c:	3207      	adds	r2, #7
    c01e:	2301      	movs	r3, #1
    c020:	9303      	str	r3, [sp, #12]
    c022:	9606      	str	r6, [sp, #24]
    c024:	4623      	mov	r3, r4
    c026:	9404      	str	r4, [sp, #16]
    c028:	9402      	str	r4, [sp, #8]
    c02a:	9401      	str	r4, [sp, #4]
    c02c:	9400      	str	r4, [sp, #0]
    c02e:	b2d2      	uxtb	r2, r2
    c030:	2103      	movs	r1, #3
    c032:	4620      	mov	r0, r4
    c034:	f7f6 fd58 	bl	2ae8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    c038:	f030 0302 	bics.w	r3, r0, #2
    c03c:	d0da      	beq.n	bff4 <ll_tx_mem_enqueue+0x64>
    c03e:	f243 11a8 	movw	r1, #12712	; 0x31a8
    c042:	4804      	ldr	r0, [pc, #16]	; (c054 <ll_tx_mem_enqueue+0xc4>)
    c044:	f7f4 fc34 	bl	8b0 <bt_ctlr_assert_handle>
    c048:	e7d4      	b.n	bff4 <ll_tx_mem_enqueue+0x64>
		return 1;
    c04a:	2001      	movs	r0, #1
    c04c:	e7d3      	b.n	bff6 <ll_tx_mem_enqueue+0x66>
    c04e:	bf00      	nop
    c050:	20000340 	.word	0x20000340
    c054:	000109b4 	.word	0x000109b4
    c058:	00004c29 	.word	0x00004c29

0000c05c <ll_enc_req_send>:
{
    c05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c060:	4607      	mov	r7, r0
    c062:	4688      	mov	r8, r1
    c064:	4616      	mov	r6, r2
    c066:	4699      	mov	r9, r3
	conn = connection_get(handle);
    c068:	f7f8 ff00 	bl	4e6c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    c06c:	4605      	mov	r5, r0
    c06e:	b910      	cbnz	r0, c076 <ll_enc_req_send+0x1a>
			return 1;
    c070:	2001      	movs	r0, #1
    c072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    c076:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    c07a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
    c07e:	429a      	cmp	r2, r3
    c080:	d1f6      	bne.n	c070 <ll_enc_req_send+0x14>
	node_tx = ll_tx_mem_acquire();
    c082:	f7ff ff79 	bl	bf78 <ll_tx_mem_acquire>
	if (node_tx) {
    c086:	4604      	mov	r4, r0
    c088:	2800      	cmp	r0, #0
    c08a:	d0f1      	beq.n	c070 <ll_enc_req_send+0x14>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    c08c:	2210      	movs	r2, #16
    c08e:	4649      	mov	r1, r9
    c090:	f105 0084 	add.w	r0, r5, #132	; 0x84
    c094:	f7f4 fab0 	bl	5f8 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
    c098:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
    c09c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    c0a0:	d124      	bne.n	c0ec <ll_enc_req_send+0x90>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    c0a2:	7923      	ldrb	r3, [r4, #4]
    c0a4:	f043 0303 	orr.w	r3, r3, #3
    c0a8:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
    c0aa:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    c0ac:	2208      	movs	r2, #8
			pdu_data_tx->len =
    c0ae:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
    c0b0:	2303      	movs	r3, #3
    c0b2:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
    c0b4:	4641      	mov	r1, r8
    c0b6:	18a0      	adds	r0, r4, r2
    c0b8:	f7f4 fa9e 	bl	5f8 <memcpy>
			enc_req->ediv[0] = ediv[0];
    c0bc:	7833      	ldrb	r3, [r6, #0]
    c0be:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
    c0c0:	7873      	ldrb	r3, [r6, #1]
    c0c2:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
    c0c4:	2108      	movs	r1, #8
    c0c6:	f104 0012 	add.w	r0, r4, #18
    c0ca:	f7f6 fe6b 	bl	2da4 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
    c0ce:	2104      	movs	r1, #4
    c0d0:	f104 001a 	add.w	r0, r4, #26
    c0d4:	f7f6 fe66 	bl	2da4 <bt_rand>
		if (ll_tx_mem_enqueue(handle, node_tx)) {
    c0d8:	4621      	mov	r1, r4
    c0da:	4638      	mov	r0, r7
    c0dc:	f7ff ff58 	bl	bf90 <ll_tx_mem_enqueue>
    c0e0:	2601      	movs	r6, #1
    c0e2:	b1d0      	cbz	r0, c11a <ll_enc_req_send+0xbe>
			ll_tx_mem_release(node_tx);
    c0e4:	4620      	mov	r0, r4
    c0e6:	f7ff ff4d 	bl	bf84 <ll_tx_mem_release>
    c0ea:	e7c1      	b.n	c070 <ll_enc_req_send+0x14>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
    c0ec:	2b30      	cmp	r3, #48	; 0x30
    c0ee:	d1f9      	bne.n	c0e4 <ll_enc_req_send+0x88>
			memcpy(&conn->llcp.encryption.rand[0], rand,
    c0f0:	2208      	movs	r2, #8
    c0f2:	4641      	mov	r1, r8
    c0f4:	f105 007a 	add.w	r0, r5, #122	; 0x7a
    c0f8:	f7f4 fa7e 	bl	5f8 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
    c0fc:	7833      	ldrb	r3, [r6, #0]
    c0fe:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			conn->llcp.encryption.ediv[1] = ediv[1];
    c102:	7873      	ldrb	r3, [r6, #1]
    c104:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    c108:	7923      	ldrb	r3, [r4, #4]
    c10a:	f043 0303 	orr.w	r3, r3, #3
    c10e:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    c110:	2301      	movs	r3, #1
    c112:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->llctrl.opcode =
    c114:	230a      	movs	r3, #10
    c116:	71e3      	strb	r3, [r4, #7]
    c118:	e7de      	b.n	c0d8 <ll_enc_req_send+0x7c>
		conn->llcp_type = LLCP_ENCRYPTION;
    c11a:	2303      	movs	r3, #3
    c11c:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		conn->llcp_req++;
    c120:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
		conn->llcp.encryption.initiate = 1;
    c124:	f885 6078 	strb.w	r6, [r5, #120]	; 0x78
		conn->llcp_req++;
    c128:	3301      	adds	r3, #1
    c12a:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
}
    c12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c132:	0000      	movs	r0, r0
    c134:	0000      	movs	r0, r0
	...

0000c138 <radio_adv_enable>:
{
    c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c13c:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
    c13e:	f8df 9514 	ldr.w	r9, [pc, #1300]	; c654 <radio_adv_enable+0x51c>
{
    c142:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c144:	2302      	movs	r3, #2
    c146:	9311      	str	r3, [sp, #68]	; 0x44
	if (_radio.advertiser.is_enabled) {
    c148:	f999 3028 	ldrsb.w	r3, [r9, #40]	; 0x28
{
    c14c:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
    c150:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	if (_radio.advertiser.is_enabled) {
    c154:	2b00      	cmp	r3, #0
{
    c156:	4683      	mov	fp, r0
    c158:	468a      	mov	sl, r1
    c15a:	464e      	mov	r6, r9
	if (_radio.advertiser.is_enabled) {
    c15c:	da01      	bge.n	c162 <radio_adv_enable+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    c15e:	200c      	movs	r0, #12
    c160:	e25c      	b.n	c61c <radio_adv_enable+0x4e4>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    c162:	f899 722f 	ldrb.w	r7, [r9, #559]	; 0x22f
    c166:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    c16a:	372c      	adds	r7, #44	; 0x2c
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    c16c:	f819 3007 	ldrb.w	r3, [r9, r7]
    c170:	f003 030f 	and.w	r3, r3, #15
    c174:	2b01      	cmp	r3, #1
    c176:	f200 8149 	bhi.w	c40c <radio_adv_enable+0x2d4>
		if (_radio.advertiser.conn) {
    c17a:	f8d9 5638 	ldr.w	r5, [r9, #1592]	; 0x638
    c17e:	2d00      	cmp	r5, #0
    c180:	d1ed      	bne.n	c15e <radio_adv_enable+0x26>
		link = mem_acquire(&_radio.link_rx_free);
    c182:	f509 60ea 	add.w	r0, r9, #1872	; 0x750
    c186:	f7f5 fde2 	bl	1d4e <mem_acquire>
		if (!link) {
    c18a:	900e      	str	r0, [sp, #56]	; 0x38
    c18c:	b158      	cbz	r0, c1a6 <radio_adv_enable+0x6e>
		conn = mem_acquire(&_radio.conn_free);
    c18e:	f209 7014 	addw	r0, r9, #1812	; 0x714
    c192:	f7f5 fddc 	bl	1d4e <mem_acquire>
		if (!conn) {
    c196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c198:	4604      	mov	r4, r0
    c19a:	b930      	cbnz	r0, c1aa <radio_adv_enable+0x72>
			mem_release(link, &_radio.link_rx_free);
    c19c:	f509 61ea 	add.w	r1, r9, #1872	; 0x750
    c1a0:	4618      	mov	r0, r3
    c1a2:	f7f5 fdee 	bl	1d82 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    c1a6:	2007      	movs	r0, #7
    c1a8:	e238      	b.n	c61c <radio_adv_enable+0x4e4>
		conn->handle = 0xFFFF;
    c1aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1ae:	8401      	strh	r1, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    c1b0:	f501 4194 	add.w	r1, r1, #18944	; 0x4a00
    c1b4:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
    c1b8:	7f41      	ldrb	r1, [r0, #29]
		conn->data_chan_use = 0;
    c1ba:	77c5      	strb	r5, [r0, #31]
		conn->data_chan_sel = 0;
    c1bc:	f365 1186 	bfi	r1, r5, #6, #1
    c1c0:	7741      	strb	r1, [r0, #29]
		conn->default_tx_octets = _radio.default_tx_octets;
    c1c2:	f8b9 172a 	ldrh.w	r1, [r9, #1834]	; 0x72a
    c1c6:	8581      	strh	r1, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    c1c8:	211b      	movs	r1, #27
    c1ca:	85c1      	strh	r1, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    c1cc:	8601      	strh	r1, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
    c1ce:	f8b9 172c 	ldrh.w	r1, [r9, #1836]	; 0x72c
    c1d2:	8641      	strh	r1, [r0, #50]	; 0x32
		conn->max_tx_time =
    c1d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    c1d8:	8681      	strh	r1, [r0, #52]	; 0x34
		conn->max_rx_time =
    c1da:	86c1      	strh	r1, [r0, #54]	; 0x36
		conn->event_counter = 0;
    c1dc:	8445      	strh	r5, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
    c1de:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->latency_event = 0;
    c1e0:	8545      	strh	r5, [r0, #42]	; 0x2a
		conn->phy_pref_tx = _radio.default_phy_tx;
    c1e2:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
    c1e6:	f8b9 072e 	ldrh.w	r0, [r9, #1838]	; 0x72e
    c1ea:	f360 0102 	bfi	r1, r0, #0, #3
		conn->phy_tx = BIT(0);
    c1ee:	2001      	movs	r0, #1
    c1f0:	f360 01c5 	bfi	r1, r0, #3, #3
		conn->phy_pref_flags = 0;
    c1f4:	f365 1186 	bfi	r1, r5, #6, #1
		conn->phy_flags = 0;
    c1f8:	f365 11c7 	bfi	r1, r5, #7, #1
    c1fc:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
    c200:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
    c204:	f360 0102 	bfi	r1, r0, #0, #3
    c208:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
    c20c:	f8b9 e730 	ldrh.w	lr, [r9, #1840]	; 0x730
		conn->slave.window_widening_prepare_us = 0;
    c210:	65e5      	str	r5, [r4, #92]	; 0x5c
		conn->phy_pref_rx = _radio.default_phy_rx;
    c212:	b2c9      	uxtb	r1, r1
    c214:	f36e 01c5 	bfi	r1, lr, #3, #3
    c218:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
		conn->phy_rx = BIT(0);
    c21c:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
		conn->slave.window_widening_event_us = 0;
    c220:	6625      	str	r5, [r4, #96]	; 0x60
		conn->phy_rx = BIT(0);
    c222:	f360 0102 	bfi	r1, r0, #0, #3
    c226:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
		conn->role = 1;
    c22a:	7f61      	ldrb	r1, [r4, #29]
    c22c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    c230:	7761      	strb	r1, [r4, #29]
		conn->connect_expire = 6;
    c232:	2106      	movs	r1, #6
    c234:	87a1      	strh	r1, [r4, #60]	; 0x3c
		conn->common.fex_valid = 0;
    c236:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    c23a:	f365 1145 	bfi	r1, r5, #5, #1
		conn->slave.latency_enabled = 0;
    c23e:	f365 0100 	bfi	r1, r5, #0, #1
		conn->slave.latency_cancel = 0;
    c242:	f365 0141 	bfi	r1, r5, #1, #1
    c246:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
		conn->slave.ticks_to_offset = 0;
    c24a:	6725      	str	r5, [r4, #112]	; 0x70
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    c24c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		conn->llcp_conn_param.disabled = 0;
    c250:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
		conn->llcp_version.tx = 0;
    c254:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
		conn->supervision_expire = 0;
    c258:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
		conn->llcp_conn_param.disabled = 0;
    c25c:	f365 1304 	bfi	r3, r5, #4, #1
    c260:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
		conn->sn = 0;
    c264:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
		conn->procedure_expire = 0;
    c268:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
		conn->sn = 0;
    c26c:	f365 0300 	bfi	r3, r5, #0, #1
		conn->nesn = 0;
    c270:	f365 0341 	bfi	r3, r5, #1, #1
		conn->pause_rx = 0;
    c274:	f365 0382 	bfi	r3, r5, #2, #1
		conn->pause_tx = 0;
    c278:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->enc_rx = 0;
    c27c:	f365 1304 	bfi	r3, r5, #4, #1
		conn->enc_tx = 0;
    c280:	f365 1345 	bfi	r3, r5, #5, #1
		conn->llcp_version.tx = 0;
    c284:	f365 0100 	bfi	r1, r5, #0, #1
		conn->refresh = 0;
    c288:	f365 1386 	bfi	r3, r5, #6, #1
		conn->llcp_version.rx = 0;
    c28c:	f365 0141 	bfi	r1, r5, #1, #1
		conn->empty = 0;
    c290:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->apto_expire = 0;
    c294:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
		conn->appto_expire = 0;
    c298:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
		conn->llcp_req = 0;
    c29c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
		conn->llcp_ack = 0;
    c2a0:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
		conn->llcp_version.rx = 0;
    c2a4:	f884 10a8 	strb.w	r1, [r4, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
    c2a8:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
    c2ac:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
    c2b0:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
		conn->llcp_conn_param.req = 0;
    c2b4:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
    c2b8:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
		conn->llcp_length.req = 0;
    c2bc:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_length.ack = 0;
    c2c0:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
		conn->llcp_phy.req = 0;
    c2c4:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
    c2c8:	f884 50f5 	strb.w	r5, [r4, #245]	; 0xf5
		conn->empty = 0;
    c2cc:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
    c2d0:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
    c2d4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
    c2d8:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
		conn->pkt_tx_data = NULL;
    c2dc:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
		conn->pkt_tx_last = NULL;
    c2e0:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
    c2e4:	f884 5150 	strb.w	r5, [r4, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
    c2e8:	f884 5151 	strb.w	r5, [r4, #337]	; 0x151
		_radio.advertiser.conn = conn;
    c2ec:	f8c9 4638 	str.w	r4, [r9, #1592]	; 0x638
	_radio.advertiser.chan_map = chan_map;							//chan_map
    c2f0:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    c2f2:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
    c2f6:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    c2fa:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
    c2fe:	f361 1306 	bfi	r3, r1, #4, #3
    c302:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    c306:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c308:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
    c30c:	f362 0301 	bfi	r3, r2, #0, #2
    c310:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
	_radio.advertiser.rl_idx = rl_idx;								//rl_idx
    c314:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
    c318:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
	_radio.advertiser.hdr.ticks_active_to_start =
    c31c:	f8d6 378c 	ldr.w	r3, [r6, #1932]	; 0x78c
    c320:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    c322:	2327      	movs	r3, #39	; 0x27
    c324:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    c326:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    c328:	2300      	movs	r3, #0
    c32a:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    c32c:	f7f5 feba 	bl	20a4 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    c330:	f819 5007 	ldrb.w	r5, [r9, r7]
    c334:	f005 050f 	and.w	r5, r5, #15
    c338:	2d01      	cmp	r5, #1
    c33a:	d169      	bne.n	c410 <radio_adv_enable+0x2d8>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    c33c:	f44f 7327 	mov.w	r3, #668	; 0x29c
    c340:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    c342:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    c346:	4fba      	ldr	r7, [pc, #744]	; (c630 <radio_adv_enable+0x4f8>)
    c348:	a3b7      	add	r3, pc, #732	; (adr r3, c628 <radio_adv_enable+0x4f0>)
    c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c34e:	fba0 0107 	umull	r0, r1, r0, r7
    c352:	f7f3 ff89 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    c356:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    c358:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    c35a:	69b0      	ldr	r0, [r6, #24]
    c35c:	4283      	cmp	r3, r0
    c35e:	bf38      	it	cc
    c360:	4603      	movcc	r3, r0
    c362:	930b      	str	r3, [sp, #44]	; 0x2c
    c364:	46b9      	mov	r9, r7
	_radio.advertiser.is_hdcd = !interval &&
    c366:	f1ba 0f00 	cmp.w	sl, #0
    c36a:	d15e      	bne.n	c42a <radio_adv_enable+0x2f2>
    c36c:	1e6a      	subs	r2, r5, #1
    c36e:	4253      	negs	r3, r2
    c370:	4153      	adcs	r3, r2
    c372:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
    c376:	f363 1586 	bfi	r5, r3, #6, #1
    c37a:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    c37e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
    c382:	d05a      	beq.n	c43a <radio_adv_enable+0x302>
		u32_t ticks_now = ticker_ticks_now_get();
    c384:	f7f6 fcce 	bl	2d24 <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c388:	6a73      	ldr	r3, [r6, #36]	; 0x24
    c38a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c38c:	4ea9      	ldr	r6, [pc, #676]	; (c634 <radio_adv_enable+0x4fc>)
    c38e:	9607      	str	r6, [sp, #28]
    c390:	441a      	add	r2, r3
    c392:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
    c394:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c396:	4aa8      	ldr	r2, [pc, #672]	; (c638 <radio_adv_enable+0x500>)
    c398:	9205      	str	r2, [sp, #20]
    c39a:	2000      	movs	r0, #0
    c39c:	ad11      	add	r5, sp, #68	; 0x44
    c39e:	9304      	str	r3, [sp, #16]
    c3a0:	e88d 0009 	stmia.w	sp, {r0, r3}
    c3a4:	9508      	str	r5, [sp, #32]
    c3a6:	9006      	str	r0, [sp, #24]
    c3a8:	9003      	str	r0, [sp, #12]
    c3aa:	9002      	str	r0, [sp, #8]
    c3ac:	463b      	mov	r3, r7
    c3ae:	2205      	movs	r2, #5
    c3b0:	2103      	movs	r1, #3
    c3b2:	f7f6 fb49 	bl	2a48 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    c3b6:	2802      	cmp	r0, #2
    c3b8:	d03b      	beq.n	c432 <radio_adv_enable+0x2fa>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    c3ba:	9811      	ldr	r0, [sp, #68]	; 0x44
    c3bc:	b9c8      	cbnz	r0, c3f2 <radio_adv_enable+0x2ba>
		ret_cb = TICKER_STATUS_BUSY;
    c3be:	2302      	movs	r3, #2
    c3c0:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
    c3c2:	4b9e      	ldr	r3, [pc, #632]	; (c63c <radio_adv_enable+0x504>)
    c3c4:	9305      	str	r3, [sp, #20]
    c3c6:	2203      	movs	r2, #3
    c3c8:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    c3cc:	9300      	str	r3, [sp, #0]
    c3ce:	9508      	str	r5, [sp, #32]
    c3d0:	9607      	str	r6, [sp, #28]
    c3d2:	9006      	str	r0, [sp, #24]
    c3d4:	9004      	str	r0, [sp, #16]
    c3d6:	9003      	str	r0, [sp, #12]
    c3d8:	9002      	str	r0, [sp, #8]
    c3da:	9001      	str	r0, [sp, #4]
    c3dc:	463b      	mov	r3, r7
    c3de:	4611      	mov	r1, r2
		ret=	
    c3e0:	f7f6 fb32 	bl	2a48 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    c3e4:	2802      	cmp	r0, #2
    c3e6:	f000 8105 	beq.w	c5f4 <radio_adv_enable+0x4bc>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    c3ea:	9811      	ldr	r0, [sp, #68]	; 0x44
    c3ec:	2800      	cmp	r0, #0
    c3ee:	f000 8105 	beq.w	c5fc <radio_adv_enable+0x4c4>
	if (conn) {
    c3f2:	2c00      	cmp	r4, #0
    c3f4:	f43f aeb3 	beq.w	c15e <radio_adv_enable+0x26>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    c3f8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    c3fc:	4990      	ldr	r1, [pc, #576]	; (c640 <radio_adv_enable+0x508>)
    c3fe:	f7f5 fcc0 	bl	1d82 <mem_release>
		mem_release(conn, &_radio.conn_free);
    c402:	4990      	ldr	r1, [pc, #576]	; (c644 <radio_adv_enable+0x50c>)
    c404:	4620      	mov	r0, r4
    c406:	f7f5 fcbc 	bl	1d82 <mem_release>
    c40a:	e6a8      	b.n	c15e <radio_adv_enable+0x26>
		conn = NULL;
    c40c:	2400      	movs	r4, #0
    c40e:	e76f      	b.n	c2f0 <radio_adv_enable+0x1b8>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    c410:	2d02      	cmp	r5, #2
    c412:	d103      	bne.n	c41c <radio_adv_enable+0x2e4>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    c414:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    c418:	4358      	muls	r0, r3
    c41a:	e794      	b.n	c346 <radio_adv_enable+0x20e>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    c41c:	2d07      	cmp	r5, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2120) * chan_cnt) ;  // 265byte =2120us
    c41e:	bf0c      	ite	eq
    c420:	f640 1374 	movweq	r3, #2420	; 0x974
			   152 + 376) * chan_cnt;
    c424:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    c428:	e7f6      	b.n	c418 <radio_adv_enable+0x2e0>
    c42a:	2300      	movs	r3, #0
    c42c:	e7a1      	b.n	c372 <radio_adv_enable+0x23a>
				cpu_sleep();
    c42e:	f7f8 fb21 	bl	4a74 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    c432:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c434:	2b02      	cmp	r3, #2
    c436:	d0fa      	beq.n	c42e <radio_adv_enable+0x2f6>
    c438:	e7bf      	b.n	c3ba <radio_adv_enable+0x282>
		u32_t ticks_now = ticker_ticks_now_get();
    c43a:	f7f6 fc73 	bl	2d24 <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
    c43e:	fa1f f28a 	uxth.w	r2, sl
    c442:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
    c444:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
    c446:	f240 2071 	movw	r0, #625	; 0x271
    c44a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    c44e:	fbaa 0100 	umull	r0, r1, sl, r0
    c452:	4a7d      	ldr	r2, [pc, #500]	; (c648 <radio_adv_enable+0x510>)
		_radio.ext_advertiser.max_skip = skip;
    c454:	f886 8688 	strb.w	r8, [r6, #1672]	; 0x688
		if(((u64_t)interval * 625) <= 100000){
    c458:	2300      	movs	r3, #0
    c45a:	428b      	cmp	r3, r1
    c45c:	bf08      	it	eq
    c45e:	4282      	cmpeq	r2, r0
    c460:	d30b      	bcc.n	c47a <radio_adv_enable+0x342>
		int calculation = max_skip / 5;
    c462:	2305      	movs	r3, #5
    c464:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
    c468:	2b04      	cmp	r3, #4
    c46a:	f240 80a5 	bls.w	c5b8 <radio_adv_enable+0x480>
				ticker_offset = 30 * (max_skip-5);
    c46e:	f1a8 0505 	sub.w	r5, r8, #5
				ticker_offset = 30 * (max_skip-1);
    c472:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
				ticker_offset = 30 * max_skip;
    c476:	006d      	lsls	r5, r5, #1
    c478:	b2ad      	uxth	r5, r5
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
    c47a:	f240 2371 	movw	r3, #625	; 0x271
    c47e:	fb03 f708 	mul.w	r7, r3, r8
    c482:	f242 7210 	movw	r2, #10000	; 0x2710
    c486:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    c48a:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 10000; //(10005 * offset) ;
    c48e:	f8c6 767c 	str.w	r7, [r6, #1660]	; 0x67c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    c492:	f8c6 3680 	str.w	r3, [r6, #1664]	; 0x680
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
    c496:	4a6c      	ldr	r2, [pc, #432]	; (c648 <radio_adv_enable+0x510>)
    c498:	2300      	movs	r3, #0
    c49a:	f7f3 fee5 	bl	268 <__aeabi_uldivmod>
    c49e:	23b7      	movs	r3, #183	; 0xb7
    c4a0:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
    c4a2:	f896 322e 	ldrb.w	r3, [r6, #558]	; 0x22e
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
    c4a6:	f8c6 06a4 	str.w	r0, [r6, #1700]	; 0x6a4
		size = pdu->len + 2;
    c4aa:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    c4ae:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
    c4b0:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
    c4b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
    c4b8:	f8c6 7690 	str.w	r7, [r6, #1680]	; 0x690
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
    c4bc:	00db      	lsls	r3, r3, #3
    c4be:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
    c4c0:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
    c4c4:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    c4c6:	3332      	adds	r3, #50	; 0x32
    c4c8:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
    c4cc:	4b59      	ldr	r3, [pc, #356]	; (c634 <radio_adv_enable+0x4fc>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
    c4ce:	f8c6 2694 	str.w	r2, [r6, #1684]	; 0x694
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    c4d2:	f8c6 7698 	str.w	r7, [r6, #1688]	; 0x698
		ret =
    c4d6:	f04f 0b00 	mov.w	fp, #0
    c4da:	9307      	str	r3, [sp, #28]
    c4dc:	af11      	add	r7, sp, #68	; 0x44
    c4de:	4b56      	ldr	r3, [pc, #344]	; (c638 <radio_adv_enable+0x500>)
    c4e0:	9708      	str	r7, [sp, #32]
    c4e2:	f8cd b018 	str.w	fp, [sp, #24]
    c4e6:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c4e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    c4ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    c4ec:	4857      	ldr	r0, [pc, #348]	; (c64c <radio_adv_enable+0x514>)
		ret =
    c4ee:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c4f2:	4413      	add	r3, r2
		ret =
    c4f4:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    c4f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c4f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
    c4fa:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    c4fe:	fba3 0100 	umull	r0, r1, r3, r0
    c502:	2391      	movs	r3, #145	; 0x91
    c504:	fb03 1102 	mla	r1, r3, r2, r1
    c508:	a347      	add	r3, pc, #284	; (adr r3, c628 <radio_adv_enable+0x4f0>)
    c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c50e:	f7f3 feab 	bl	268 <__aeabi_uldivmod>
		ret =
    c512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    c514:	9001      	str	r0, [sp, #4]
		ret =
    c516:	f8cd b000 	str.w	fp, [sp]
    c51a:	2205      	movs	r2, #5
    c51c:	2103      	movs	r1, #3
    c51e:	4658      	mov	r0, fp
    c520:	f7f6 fa92 	bl	2a48 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    c524:	2802      	cmp	r0, #2
    c526:	4b43      	ldr	r3, [pc, #268]	; (c634 <radio_adv_enable+0x4fc>)
    c528:	d05e      	beq.n	c5e8 <radio_adv_enable+0x4b0>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    c52a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    c52c:	2e00      	cmp	r6, #0
    c52e:	f47f af60 	bne.w	c3f2 <radio_adv_enable+0x2ba>
		ret=	
    c532:	9307      	str	r3, [sp, #28]
    c534:	4b46      	ldr	r3, [pc, #280]	; (c650 <radio_adv_enable+0x518>)
    c536:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    c538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
    c53a:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
    c53c:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    c53e:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
    c542:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    c544:	fba0 0109 	umull	r0, r1, r0, r9
    c548:	a337      	add	r3, pc, #220	; (adr r3, c628 <radio_adv_enable+0x4f0>)
    c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
    c54e:	f108 0801 	add.w	r8, r8, #1
		ret=	
    c552:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    c554:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    c558:	f7f3 fe86 	bl	268 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    c55c:	fba8 ab0a 	umull	sl, fp, r8, sl
    c560:	f240 2171 	movw	r1, #625	; 0x271
    c564:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    c568:	1b52      	subs	r2, r2, r5
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c56a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    c56e:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    c572:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
    c576:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    c578:	fba2 0109 	umull	r0, r1, r2, r9
    c57c:	fb09 1103 	mla	r1, r9, r3, r1
    c580:	a329      	add	r3, pc, #164	; (adr r3, c628 <radio_adv_enable+0x4f0>)
    c582:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
    c586:	9603      	str	r6, [sp, #12]
    c588:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    c58a:	f7f3 fe6d 	bl	268 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    c58e:	4b31      	ldr	r3, [pc, #196]	; (c654 <radio_adv_enable+0x51c>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c590:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    c594:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    c596:	f8d3 067c 	ldr.w	r0, [r3, #1660]	; 0x67c
    c59a:	a323      	add	r3, pc, #140	; (adr r3, c628 <radio_adv_enable+0x4f0>)
    c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c5a0:	fba0 0109 	umull	r0, r1, r0, r9
    c5a4:	f7f3 fe60 	bl	268 <__aeabi_uldivmod>
		ret=	
    c5a8:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c5aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    c5ae:	9000      	str	r0, [sp, #0]
    c5b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c5b2:	4611      	mov	r1, r2
    c5b4:	4630      	mov	r0, r6
    c5b6:	e713      	b.n	c3e0 <radio_adv_enable+0x2a8>
			}else if(calculation >= 4){
    c5b8:	d102      	bne.n	c5c0 <radio_adv_enable+0x488>
				ticker_offset = 30 * (max_skip-4);
    c5ba:	f1a8 0504 	sub.w	r5, r8, #4
    c5be:	e758      	b.n	c472 <radio_adv_enable+0x33a>
			}else if(calculation >=3){
    c5c0:	2b03      	cmp	r3, #3
    c5c2:	d102      	bne.n	c5ca <radio_adv_enable+0x492>
				ticker_offset = 30 * (max_skip-3);
    c5c4:	f1a8 0503 	sub.w	r5, r8, #3
    c5c8:	e753      	b.n	c472 <radio_adv_enable+0x33a>
			}else if(calculation >= 2){
    c5ca:	2b02      	cmp	r3, #2
    c5cc:	d102      	bne.n	c5d4 <radio_adv_enable+0x49c>
				ticker_offset = 30 * (max_skip-2);
    c5ce:	f1a8 0502 	sub.w	r5, r8, #2
    c5d2:	e74e      	b.n	c472 <radio_adv_enable+0x33a>
			}else if(calculation >= 1){
    c5d4:	2b01      	cmp	r3, #1
    c5d6:	d102      	bne.n	c5de <radio_adv_enable+0x4a6>
				ticker_offset = 30 * (max_skip-1);
    c5d8:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
    c5dc:	e749      	b.n	c472 <radio_adv_enable+0x33a>
				ticker_offset = 30 * max_skip;
    c5de:	ebc8 1508 	rsb	r5, r8, r8, lsl #4
    c5e2:	e748      	b.n	c476 <radio_adv_enable+0x33e>
				cpu_sleep();
    c5e4:	f7f8 fa46 	bl	4a74 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    c5e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c5ea:	2a02      	cmp	r2, #2
    c5ec:	d0fa      	beq.n	c5e4 <radio_adv_enable+0x4ac>
    c5ee:	e79c      	b.n	c52a <radio_adv_enable+0x3f2>
			cpu_sleep();
    c5f0:	f7f8 fa40 	bl	4a74 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    c5f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c5f6:	2b02      	cmp	r3, #2
    c5f8:	d0fa      	beq.n	c5f0 <radio_adv_enable+0x4b8>
    c5fa:	e6f6      	b.n	c3ea <radio_adv_enable+0x2b2>
		_radio.advertiser.is_enabled = 1;
    c5fc:	4b15      	ldr	r3, [pc, #84]	; (c654 <radio_adv_enable+0x51c>)
    c5fe:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    c602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    c60a:	f893 364c 	ldrb.w	r3, [r3, #1612]	; 0x64c
    c60e:	f013 0401 	ands.w	r4, r3, #1
    c612:	d103      	bne.n	c61c <radio_adv_enable+0x4e4>
			ll_adv_scan_state_cb(BIT(0));
    c614:	2001      	movs	r0, #1
    c616:	f001 fc3b 	bl	de90 <ll_adv_scan_state_cb>
		return 0;
    c61a:	4620      	mov	r0, r4
}
    c61c:	b013      	add	sp, #76	; 0x4c
    c61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c622:	bf00      	nop
    c624:	f3af 8000 	nop.w
    c628:	1afd498d 	.word	0x1afd498d
    c62c:	00000007 	.word	0x00000007
    c630:	3b9aca00 	.word	0x3b9aca00
    c634:	00004ab9 	.word	0x00004ab9
    c638:	00006835 	.word	0x00006835
    c63c:	0000695d 	.word	0x0000695d
    c640:	20000a90 	.word	0x20000a90
    c644:	20000a54 	.word	0x20000a54
    c648:	000186a0 	.word	0x000186a0
    c64c:	84e72a00 	.word	0x84e72a00
    c650:	00006915 	.word	0x00006915
    c654:	20000340 	.word	0x20000340

0000c658 <radio_adv_disable>:
{
    c658:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    c65a:	2103      	movs	r1, #3
    c65c:	2005      	movs	r0, #5
    c65e:	f7f8 fc1b 	bl	4e98 <role_disable>
	if (!status) {
    c662:	4605      	mov	r5, r0
    c664:	b9e8      	cbnz	r0, c6a2 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    c666:	4c10      	ldr	r4, [pc, #64]	; (c6a8 <radio_adv_disable+0x50>)
    c668:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    c66c:	f360 12c7 	bfi	r2, r0, #7, #1
    c670:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    c674:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
    c678:	07d3      	lsls	r3, r2, #31
    c67a:	d401      	bmi.n	c680 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    c67c:	f001 fc08 	bl	de90 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    c680:	f8d4 6638 	ldr.w	r6, [r4, #1592]	; 0x638
		if (conn) {
    c684:	b15e      	cbz	r6, c69e <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    c686:	2300      	movs	r3, #0
    c688:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    c68c:	4907      	ldr	r1, [pc, #28]	; (c6ac <radio_adv_disable+0x54>)
    c68e:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    c692:	f7f5 fb76 	bl	1d82 <mem_release>
			mem_release(conn, &_radio.conn_free);
    c696:	4906      	ldr	r1, [pc, #24]	; (c6b0 <radio_adv_disable+0x58>)
    c698:	4630      	mov	r0, r6
    c69a:	f7f5 fb72 	bl	1d82 <mem_release>
}
    c69e:	4628      	mov	r0, r5
    c6a0:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    c6a2:	250c      	movs	r5, #12
    c6a4:	e7fb      	b.n	c69e <radio_adv_disable+0x46>
    c6a6:	bf00      	nop
    c6a8:	20000340 	.word	0x20000340
    c6ac:	20000a90 	.word	0x20000a90
    c6b0:	20000a54 	.word	0x20000a54
    c6b4:	00000000 	.word	0x00000000

0000c6b8 <radio_scan_enable>:
{
    c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
    c6bc:	4c76      	ldr	r4, [pc, #472]	; (c898 <radio_scan_enable+0x1e0>)
    c6be:	f894 764c 	ldrb.w	r7, [r4, #1612]	; 0x64c
{
    c6c2:	b08e      	sub	sp, #56	; 0x38
    c6c4:	461d      	mov	r5, r3
	if (_radio.scanner.is_enabled) {
    c6c6:	f017 0701 	ands.w	r7, r7, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c6ca:	f04f 0302 	mov.w	r3, #2
{
    c6ce:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    c6d0:	930b      	str	r3, [sp, #44]	; 0x2c
{
    c6d2:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    c6d4:	d003      	beq.n	c6de <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
    c6d6:	200c      	movs	r0, #12
}
    c6d8:	b00e      	add	sp, #56	; 0x38
    c6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    c6de:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.rpa_gen = rpa_gen;
    c6e2:	f894 264e 	ldrb.w	r2, [r4, #1614]	; 0x64e
	_radio.scanner.type = type;
    c6e6:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;				//1
    c6ea:	0840      	lsrs	r0, r0, #1
    c6ec:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
    c6f0:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    c6f4:	f360 0200 	bfi	r2, r0, #0, #1
    c6f8:	f884 264e 	strb.w	r2, [r4, #1614]	; 0x64e
	_radio.scanner.rl_idx = rl_idx;
    c6fc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
    c700:	f884 264f 	strb.w	r2, [r4, #1615]	; 0x64f
	_radio.scanner.init_addr_type = init_addr_type;
    c704:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    c708:	2206      	movs	r2, #6
    c70a:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
	_radio.scanner.init_addr_type = init_addr_type;
    c70e:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    c712:	4e62      	ldr	r6, [pc, #392]	; (c89c <radio_scan_enable+0x1e4>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    c714:	f7f3 ff70 	bl	5f8 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    c718:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    c71c:	f04f 0891 	mov.w	r8, #145	; 0x91
    c720:	fba2 0106 	umull	r0, r1, r2, r6
    c724:	fb08 1102 	mla	r1, r8, r2, r1
    c728:	a359      	add	r3, pc, #356	; (adr r3, c890 <radio_scan_enable+0x1d8>)
    c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c72e:	f7f3 fd9b 	bl	268 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    c732:	f894 364d 	ldrb.w	r3, [r4, #1613]	; 0x64d
    c736:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
	_radio.scanner.hdr.ticks_preempt_to_start =
    c73a:	f8c4 7644 	str.w	r7, [r4, #1604]	; 0x644
	_radio.scanner.filter_policy = filter_policy;
    c73e:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    c742:	b2aa      	uxth	r2, r5
    c744:	fba2 6706 	umull	r6, r7, r2, r6
		_radio.ticks_active_to_start;
    c748:	f8d4 a78c 	ldr.w	sl, [r4, #1932]	; 0x78c
	_radio.scanner.filter_policy = filter_policy;
    c74c:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
		_radio.scanner.ticks_window +
    c750:	f100 0909 	add.w	r9, r0, #9
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    c754:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.hdr.ticks_xtal_to_start =
    c758:	2327      	movs	r3, #39	; 0x27
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    c75a:	f8c4 065c 	str.w	r0, [r4, #1628]	; 0x65c
	_radio.scanner.hdr.ticks_active_to_start =
    c75e:	f8c4 a640 	str.w	sl, [r4, #1600]	; 0x640
	_radio.scanner.hdr.ticks_xtal_to_start =
    c762:	f8c4 363c 	str.w	r3, [r4, #1596]	; 0x63c
	_radio.scanner.hdr.ticks_slot =
    c766:	f8c4 9648 	str.w	r9, [r4, #1608]	; 0x648
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    c76a:	a349      	add	r3, pc, #292	; (adr r3, c890 <radio_scan_enable+0x1d8>)
    c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c770:	4630      	mov	r0, r6
    c772:	4639      	mov	r1, r7
    c774:	f7f3 fd78 	bl	268 <__aeabi_uldivmod>
	    (ticks_interval -
    c778:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
    c77c:	4599      	cmp	r9, r3
	_radio.scanner.interval = interval;
    c77e:	f8c4 5660 	str.w	r5, [r4, #1632]	; 0x660
	ticks_slot_offset =
    c782:	4655      	mov	r5, sl
		_radio.scanner.hdr.ticks_slot =
    c784:	bf88      	it	hi
    c786:	f8c4 3648 	strhi.w	r3, [r4, #1608]	; 0x648
	ticks_slot_offset =
    c78a:	2d27      	cmp	r5, #39	; 0x27
    c78c:	bf38      	it	cc
    c78e:	2527      	movcc	r5, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    c790:	4680      	mov	r8, r0
	_radio.scanner.slot_offset = ticks_slot_offset ;
    c792:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
	ticks_anchor = ticker_ticks_now_get();
    c796:	f7f6 fac5 	bl	2d24 <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
    c79a:	f8d4 3674 	ldr.w	r3, [r4, #1652]	; 0x674
	ticks_anchor = ticker_ticks_now_get();
    c79e:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d05e      	beq.n	c862 <radio_scan_enable+0x1aa>
		us_offset = 0;
    c7a4:	2300      	movs	r3, #0
    c7a6:	930c      	str	r3, [sp, #48]	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c7a8:	483d      	ldr	r0, [pc, #244]	; (c8a0 <radio_scan_enable+0x1e8>)
    c7aa:	f3bf 8f5b 	dmb	ish
    c7ae:	e850 3f00 	ldrex	r3, [r0]
    c7b2:	f023 0301 	bic.w	r3, r3, #1
    c7b6:	e840 3200 	strex	r2, r3, [r0]
    c7ba:	2a00      	cmp	r2, #0
    c7bc:	d1f7      	bne.n	c7ae <radio_scan_enable+0xf6>
    c7be:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
	work->handler = handler;
    c7c2:	4938      	ldr	r1, [pc, #224]	; (c8a4 <radio_scan_enable+0x1ec>)
    c7c4:	f840 1c04 	str.w	r1, [r0, #-4]
	k_delayed_work_init(&aux_scanning.work_d, aux_packet_function);
    c7c8:	3004      	adds	r0, #4
    c7ca:	f003 fc43 	bl	10054 <k_delayed_work_init>
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    c7ce:	980c      	ldr	r0, [sp, #48]	; 0x30
    c7d0:	4935      	ldr	r1, [pc, #212]	; (c8a8 <radio_scan_enable+0x1f0>)
    c7d2:	a32f      	add	r3, pc, #188	; (adr r3, c890 <radio_scan_enable+0x1d8>)
    c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    c7d8:	fba0 0101 	umull	r0, r1, r0, r1
    c7dc:	f7f3 fd44 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c7e0:	ab0b      	add	r3, sp, #44	; 0x2c
    c7e2:	9308      	str	r3, [sp, #32]
    c7e4:	4b31      	ldr	r3, [pc, #196]	; (c8ac <radio_scan_enable+0x1f4>)
    c7e6:	9307      	str	r3, [sp, #28]
    c7e8:	4b31      	ldr	r3, [pc, #196]	; (c8b0 <radio_scan_enable+0x1f8>)
    c7ea:	9305      	str	r3, [sp, #20]
    c7ec:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    c7f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c7f4:	f04f 0900 	mov.w	r9, #0
    c7f8:	4482      	add	sl, r0
    c7fa:	441d      	add	r5, r3
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    c7fc:	4630      	mov	r0, r6
    c7fe:	a324      	add	r3, pc, #144	; (adr r3, c890 <radio_scan_enable+0x1d8>)
    c800:	e9d3 2300 	ldrd	r2, r3, [r3]
    c804:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c806:	f8cd 9018 	str.w	r9, [sp, #24]
    c80a:	9504      	str	r5, [sp, #16]
    c80c:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    c810:	f7f3 fd2a 	bl	268 <__aeabi_uldivmod>
    c814:	4610      	mov	r0, r2
    c816:	4619      	mov	r1, r3
    c818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c81c:	2300      	movs	r3, #0
    c81e:	f7f3 fd23 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    c822:	f8cd 8004 	str.w	r8, [sp, #4]
    c826:	9002      	str	r0, [sp, #8]
    c828:	f8cd 9000 	str.w	r9, [sp]
    c82c:	4653      	mov	r3, sl
    c82e:	2206      	movs	r2, #6
    c830:	2103      	movs	r1, #3
    c832:	4648      	mov	r0, r9
    c834:	f7f6 f908 	bl	2a48 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    c838:	2802      	cmp	r0, #2
    c83a:	d023      	beq.n	c884 <radio_scan_enable+0x1cc>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    c83c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c83e:	2d00      	cmp	r5, #0
    c840:	f47f af49 	bne.w	c6d6 <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
    c844:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    c848:	f043 0301 	orr.w	r3, r3, #1
    c84c:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
	if (!_radio.advertiser.is_enabled) {
    c850:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    c854:	2b00      	cmp	r3, #0
    c856:	db02      	blt.n	c85e <radio_scan_enable+0x1a6>
		ll_adv_scan_state_cb(BIT(1));
    c858:	2002      	movs	r0, #2
    c85a:	f001 fb19 	bl	de90 <ll_adv_scan_state_cb>
	return 0;
    c85e:	4628      	mov	r0, r5
    c860:	e73a      	b.n	c6d8 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    c862:	f8d4 1648 	ldr.w	r1, [r4, #1608]	; 0x648
		u32_t ticks_ref = 0;
    c866:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    c868:	aa0d      	add	r2, sp, #52	; 0x34
    c86a:	ab0c      	add	r3, sp, #48	; 0x30
    c86c:	4429      	add	r1, r5
    c86e:	2003      	movs	r0, #3
    c870:	f7f9 fa1e 	bl	5cb0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
    c874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c876:	2b00      	cmp	r3, #0
    c878:	d096      	beq.n	c7a8 <radio_scan_enable+0xf0>
			ticks_anchor = ticks_ref;
    c87a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    c87e:	e793      	b.n	c7a8 <radio_scan_enable+0xf0>
			cpu_sleep();
    c880:	f7f8 f8f8 	bl	4a74 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    c884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c886:	2b02      	cmp	r3, #2
    c888:	d0fa      	beq.n	c880 <radio_scan_enable+0x1c8>
    c88a:	e7d7      	b.n	c83c <radio_scan_enable+0x184>
    c88c:	f3af 8000 	nop.w
    c890:	1afd498d 	.word	0x1afd498d
    c894:	00000007 	.word	0x00000007
    c898:	20000340 	.word	0x20000340
    c89c:	84e72a00 	.word	0x84e72a00
    c8a0:	20003bb0 	.word	0x20003bb0
    c8a4:	000065a5 	.word	0x000065a5
    c8a8:	3b9aca00 	.word	0x3b9aca00
    c8ac:	00004ab9 	.word	0x00004ab9
    c8b0:	0000687d 	.word	0x0000687d

0000c8b4 <radio_scan_disable>:
{
    c8b4:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
    c8b6:	2104      	movs	r1, #4
    c8b8:	2006      	movs	r0, #6
    c8ba:	f7f8 faed 	bl	4e98 <role_disable>
	if (!status) {
    c8be:	4605      	mov	r5, r0
    c8c0:	b9e8      	cbnz	r0, c8fe <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
    c8c2:	4c10      	ldr	r4, [pc, #64]	; (c904 <radio_scan_disable+0x50>)
    c8c4:	f894 264c 	ldrb.w	r2, [r4, #1612]	; 0x64c
    c8c8:	f360 0200 	bfi	r2, r0, #0, #1
    c8cc:	f884 264c 	strb.w	r2, [r4, #1612]	; 0x64c
		if (!_radio.advertiser.is_enabled) {
    c8d0:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
    c8d4:	2a00      	cmp	r2, #0
    c8d6:	db01      	blt.n	c8dc <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
    c8d8:	f001 fada 	bl	de90 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
    c8dc:	f8d4 6674 	ldr.w	r6, [r4, #1652]	; 0x674
		if (conn) {
    c8e0:	b15e      	cbz	r6, c8fa <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
    c8e2:	2300      	movs	r3, #0
    c8e4:	f8c4 3674 	str.w	r3, [r4, #1652]	; 0x674
			mem_release(conn->llcp_terminate.
    c8e8:	4907      	ldr	r1, [pc, #28]	; (c908 <radio_scan_disable+0x54>)
    c8ea:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
    c8ee:	f7f5 fa48 	bl	1d82 <mem_release>
			mem_release(conn, &_radio.conn_free);
    c8f2:	4906      	ldr	r1, [pc, #24]	; (c90c <radio_scan_disable+0x58>)
    c8f4:	4630      	mov	r0, r6
    c8f6:	f7f5 fa44 	bl	1d82 <mem_release>
}
    c8fa:	4628      	mov	r0, r5
    c8fc:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    c8fe:	250c      	movs	r5, #12
    c900:	e7fb      	b.n	c8fa <radio_scan_disable+0x46>
    c902:	bf00      	nop
    c904:	20000340 	.word	0x20000340
    c908:	20000a90 	.word	0x20000a90
    c90c:	20000a54 	.word	0x20000a54

0000c910 <ll_connect_disable>:
	if (_radio.scanner.conn == 0) {
    c910:	4b03      	ldr	r3, [pc, #12]	; (c920 <ll_connect_disable+0x10>)
    c912:	f8d3 3674 	ldr.w	r3, [r3, #1652]	; 0x674
    c916:	b10b      	cbz	r3, c91c <ll_connect_disable+0xc>
	status = radio_scan_disable();
    c918:	f7ff bfcc 	b.w	c8b4 <radio_scan_disable>
}
    c91c:	200c      	movs	r0, #12
    c91e:	4770      	bx	lr
    c920:	20000340 	.word	0x20000340

0000c924 <ll_rx_dequeue>:
{
    c924:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    c926:	4c40      	ldr	r4, [pc, #256]	; (ca28 <ll_rx_dequeue+0x104>)
	struct radio_pdu_node_rx *node_rx = NULL;
    c928:	aa02      	add	r2, sp, #8
    c92a:	2300      	movs	r3, #0
    c92c:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    c930:	f8d4 0758 	ldr.w	r0, [r4, #1880]	; 0x758
    c934:	f204 7154 	addw	r1, r4, #1876	; 0x754
    c938:	f7f5 fa72 	bl	1e20 <memq_dequeue>
	LL_ASSERT(link);
    c93c:	4605      	mov	r5, r0
    c93e:	b920      	cbnz	r0, c94a <ll_rx_dequeue+0x26>
    c940:	f243 016e 	movw	r1, #12398	; 0x306e
    c944:	4839      	ldr	r0, [pc, #228]	; (ca2c <ll_rx_dequeue+0x108>)
    c946:	f7f3 ffb3 	bl	8b0 <bt_ctlr_assert_handle>
	mem_release(link, &_radio.link_rx_free);
    c94a:	4939      	ldr	r1, [pc, #228]	; (ca30 <ll_rx_dequeue+0x10c>)
    c94c:	4628      	mov	r0, r5
    c94e:	f7f5 fa18 	bl	1d82 <mem_release>
	switch (node_rx->hdr.type) {
    c952:	9b01      	ldr	r3, [sp, #4]
    c954:	791a      	ldrb	r2, [r3, #4]
    c956:	2a0c      	cmp	r2, #12
    c958:	d807      	bhi.n	c96a <ll_rx_dequeue+0x46>
    c95a:	2301      	movs	r3, #1
    c95c:	4093      	lsls	r3, r2
    c95e:	f641 727e 	movw	r2, #8062	; 0x1f7e
    c962:	4213      	tst	r3, r2
    c964:	d107      	bne.n	c976 <ll_rx_dequeue+0x52>
    c966:	061a      	lsls	r2, r3, #24
    c968:	d416      	bmi.n	c998 <ll_rx_dequeue+0x74>
		LL_ASSERT(0);
    c96a:	f243 01a5 	movw	r1, #12453	; 0x30a5
    c96e:	482f      	ldr	r0, [pc, #188]	; (ca2c <ll_rx_dequeue+0x108>)
    c970:	f7f3 ff9e 	bl	8b0 <bt_ctlr_assert_handle>
		break;
    c974:	e010      	b.n	c998 <ll_rx_dequeue+0x74>
		LL_ASSERT(_radio.link_rx_data_quota <
    c976:	f894 3748 	ldrb.w	r3, [r4, #1864]	; 0x748
    c97a:	f894 275c 	ldrb.w	r2, [r4, #1884]	; 0x75c
    c97e:	3b01      	subs	r3, #1
    c980:	429a      	cmp	r2, r3
    c982:	db04      	blt.n	c98e <ll_rx_dequeue+0x6a>
    c984:	f243 019b 	movw	r1, #12443	; 0x309b
    c988:	4828      	ldr	r0, [pc, #160]	; (ca2c <ll_rx_dequeue+0x108>)
    c98a:	f7f3 ff91 	bl	8b0 <bt_ctlr_assert_handle>
		_radio.link_rx_data_quota++;
    c98e:	f894 375c 	ldrb.w	r3, [r4, #1884]	; 0x75c
    c992:	3301      	adds	r3, #1
    c994:	f884 375c 	strb.w	r3, [r4, #1884]	; 0x75c
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    c998:	9b01      	ldr	r3, [sp, #4]
    c99a:	791a      	ldrb	r2, [r3, #4]
    c99c:	2a06      	cmp	r2, #6
    c99e:	d135      	bne.n	ca0c <ll_rx_dequeue+0xe8>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    c9a0:	7ada      	ldrb	r2, [r3, #11]
    c9a2:	2a3c      	cmp	r2, #60	; 0x3c
    c9a4:	d011      	beq.n	c9ca <ll_rx_dequeue+0xa6>
    c9a6:	7b1b      	ldrb	r3, [r3, #12]
    c9a8:	bb93      	cbnz	r3, ca10 <ll_rx_dequeue+0xec>
			LL_ASSERT(_radio.scanner.is_enabled);
    c9aa:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    c9ae:	07db      	lsls	r3, r3, #31
    c9b0:	d404      	bmi.n	c9bc <ll_rx_dequeue+0x98>
    c9b2:	f243 01bb 	movw	r1, #12475	; 0x30bb
    c9b6:	481d      	ldr	r0, [pc, #116]	; (ca2c <ll_rx_dequeue+0x108>)
    c9b8:	f7f3 ff7a 	bl	8b0 <bt_ctlr_assert_handle>
			_radio.scanner.is_enabled = 0;
    c9bc:	f894 364c 	ldrb.w	r3, [r4, #1612]	; 0x64c
    c9c0:	f36f 0300 	bfc	r3, #0, #1
    c9c4:	f884 364c 	strb.w	r3, [r4, #1612]	; 0x64c
    c9c8:	e014      	b.n	c9f4 <ll_rx_dequeue+0xd0>
				_radio.advertiser.conn = NULL;
    c9ca:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    c9cc:	f8d4 5638 	ldr.w	r5, [r4, #1592]	; 0x638
				_radio.advertiser.conn = NULL;
    c9d0:	f8c4 3638 	str.w	r3, [r4, #1592]	; 0x638
			LL_ASSERT(_radio.advertiser.is_enabled);
    c9d4:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    c9d8:	2b00      	cmp	r3, #0
    c9da:	db04      	blt.n	c9e6 <ll_rx_dequeue+0xc2>
    c9dc:	f243 01b8 	movw	r1, #12472	; 0x30b8
    c9e0:	4812      	ldr	r0, [pc, #72]	; (ca2c <ll_rx_dequeue+0x108>)
    c9e2:	f7f3 ff65 	bl	8b0 <bt_ctlr_assert_handle>
			_radio.advertiser.is_enabled = 0;
    c9e6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    c9ea:	f36f 13c7 	bfc	r3, #7, #1
    c9ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    c9f2:	b97d      	cbnz	r5, ca14 <ll_rx_dequeue+0xf0>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    c9f4:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
		     _radio.advertiser.is_enabled;
    c9f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    c9fc:	f000 0001 	and.w	r0, r0, #1
    ca00:	0040      	lsls	r0, r0, #1
		if (!bm) {
    ca02:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    ca06:	d101      	bne.n	ca0c <ll_rx_dequeue+0xe8>
			ll_adv_scan_state_cb(0);
    ca08:	f001 fa42 	bl	de90 <ll_adv_scan_state_cb>
}
    ca0c:	b003      	add	sp, #12
    ca0e:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    ca10:	2500      	movs	r5, #0
    ca12:	e7df      	b.n	c9d4 <ll_rx_dequeue+0xb0>
			mem_release(node_rx->hdr.onion.link,
    ca14:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
    ca18:	4905      	ldr	r1, [pc, #20]	; (ca30 <ll_rx_dequeue+0x10c>)
    ca1a:	f7f5 f9b2 	bl	1d82 <mem_release>
			mem_release(conn, &_radio.conn_free);
    ca1e:	4905      	ldr	r1, [pc, #20]	; (ca34 <ll_rx_dequeue+0x110>)
    ca20:	4628      	mov	r0, r5
    ca22:	f7f5 f9ae 	bl	1d82 <mem_release>
    ca26:	e7e5      	b.n	c9f4 <ll_rx_dequeue+0xd0>
    ca28:	20000340 	.word	0x20000340
    ca2c:	000109b4 	.word	0x000109b4
    ca30:	20000a90 	.word	0x20000a90
    ca34:	20000a54 	.word	0x20000a54

0000ca38 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    ca38:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    ca3a:	4c0b      	ldr	r4, [pc, #44]	; (ca68 <rtc0_nrf5_isr+0x30>)
    ca3c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    ca40:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    ca44:	b122      	cbz	r2, ca50 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    ca46:	2000      	movs	r0, #0
    ca48:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    ca4c:	f7f5 ffea 	bl	2a24 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    ca50:	b12d      	cbz	r5, ca5e <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    ca52:	2300      	movs	r3, #0
    ca54:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    ca58:	2001      	movs	r0, #1
    ca5a:	f7f5 ffe3 	bl	2a24 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    ca5e:	2000      	movs	r0, #0
}
    ca60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    ca64:	f7f5 ba8c 	b.w	1f80 <mayfly_run>
    ca68:	4000b000 	.word	0x4000b000

0000ca6c <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    ca6c:	2001      	movs	r0, #1
    ca6e:	f7f5 ba87 	b.w	1f80 <mayfly_run>

0000ca72 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    ca72:	4668      	mov	r0, sp
    ca74:	f020 0107 	bic.w	r1, r0, #7
    ca78:	468d      	mov	sp, r1
    ca7a:	b501      	push	{r0, lr}
	isr_radio();
    ca7c:	f001 fdd2 	bl	e624 <isr_radio>
	ISR_DIRECT_PM();
    ca80:	f7f4 f9ac 	bl	ddc <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    ca84:	f7f4 f85a 	bl	b3c <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    ca88:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    ca8c:	4685      	mov	sp, r0
    ca8e:	4770      	bx	lr

0000ca90 <radio_active_callback>:
{
    ca90:	4770      	bx	lr
	...

0000ca94 <radio_event_callback>:
	k_sem_give(sem_recv);
    ca94:	4b01      	ldr	r3, [pc, #4]	; (ca9c <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    ca96:	6818      	ldr	r0, [r3, #0]
    ca98:	f002 bfb0 	b.w	f9fc <_impl_k_sem_give>
    ca9c:	2000334c 	.word	0x2000334c

0000caa0 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    caa0:	b510      	push	{r4, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    caa2:	4b37      	ldr	r3, [pc, #220]	; (cb80 <ll_init+0xe0>)
{
    caa4:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    caa6:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    caa8:	4836      	ldr	r0, [pc, #216]	; (cb84 <ll_init+0xe4>)
    caaa:	f002 fba1 	bl	f1f0 <device_get_binding>
	if (!clk_k32) {
    caae:	b918      	cbnz	r0, cab8 <ll_init+0x18>
		return -ENODEV;
    cab0:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    cab4:	b006      	add	sp, #24
    cab6:	bd10      	pop	{r4, pc}
	return api->on(dev, sys);
    cab8:	6843      	ldr	r3, [r0, #4]
    caba:	2101      	movs	r1, #1
    cabc:	681b      	ldr	r3, [r3, #0]
    cabe:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    cac0:	4831      	ldr	r0, [pc, #196]	; (cb88 <ll_init+0xe8>)
    cac2:	f002 fb95 	bl	f1f0 <device_get_binding>
	if (!entropy) {
    cac6:	4604      	mov	r4, r0
    cac8:	2800      	cmp	r0, #0
    caca:	d0f1      	beq.n	cab0 <ll_init+0x10>
	cntr_init();
    cacc:	f001 fc06 	bl	e2dc <cntr_init>
	mayfly_init();
    cad0:	f7f5 f9b6 	bl	1e40 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    cad4:	4b2d      	ldr	r3, [pc, #180]	; (cb8c <ll_init+0xec>)
    cad6:	2208      	movs	r2, #8
    cad8:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    cada:	2203      	movs	r2, #3
    cadc:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    cade:	2202      	movs	r2, #2
    cae0:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    cae2:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    cae4:	4a2a      	ldr	r2, [pc, #168]	; (cb90 <ll_init+0xf0>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    cae6:	7418      	strb	r0, [r3, #16]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    cae8:	9205      	str	r2, [sp, #20]
    caea:	4a2a      	ldr	r2, [pc, #168]	; (cb94 <ll_init+0xf4>)
    caec:	9204      	str	r2, [sp, #16]
    caee:	4a2a      	ldr	r2, [pc, #168]	; (cb98 <ll_init+0xf8>)
    caf0:	9203      	str	r2, [sp, #12]
    caf2:	4a2a      	ldr	r2, [pc, #168]	; (cb9c <ll_init+0xfc>)
    caf4:	9202      	str	r2, [sp, #8]
    caf6:	220d      	movs	r2, #13
    caf8:	9201      	str	r2, [sp, #4]
    cafa:	9300      	str	r3, [sp, #0]
    cafc:	4a28      	ldr	r2, [pc, #160]	; (cba0 <ll_init+0x100>)
    cafe:	2304      	movs	r3, #4
    cb00:	2117      	movs	r1, #23
    cb02:	f7f5 ff57 	bl	29b4 <ticker_init>
	LL_ASSERT(!err);
    cb06:	b118      	cbz	r0, cb10 <ll_init+0x70>
    cb08:	21a0      	movs	r1, #160	; 0xa0
    cb0a:	4826      	ldr	r0, [pc, #152]	; (cba4 <ll_init+0x104>)
    cb0c:	f7f3 fed0 	bl	8b0 <bt_ctlr_assert_handle>
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    cb10:	4825      	ldr	r0, [pc, #148]	; (cba8 <ll_init+0x108>)
    cb12:	f002 fb6d 	bl	f1f0 <device_get_binding>
	if (!clk_m16) {
    cb16:	2800      	cmp	r0, #0
    cb18:	d0ca      	beq.n	cab0 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    cb1a:	f242 139c 	movw	r3, #8604	; 0x219c
    cb1e:	9305      	str	r3, [sp, #20]
    cb20:	4b22      	ldr	r3, [pc, #136]	; (cbac <ll_init+0x10c>)
    cb22:	9304      	str	r3, [sp, #16]
    cb24:	231b      	movs	r3, #27
    cb26:	9303      	str	r3, [sp, #12]
    cb28:	9302      	str	r3, [sp, #8]
    cb2a:	2107      	movs	r1, #7
    cb2c:	2306      	movs	r3, #6
    cb2e:	9300      	str	r3, [sp, #0]
    cb30:	4622      	mov	r2, r4
    cb32:	9101      	str	r1, [sp, #4]
    cb34:	2310      	movs	r3, #16
    cb36:	f7fe fc75 	bl	b424 <radio_init>
	if (err) {
    cb3a:	4604      	mov	r4, r0
    cb3c:	b9e0      	cbnz	r0, cb78 <ll_init+0xd8>
	ll_filter_reset(true);
    cb3e:	2001      	movs	r0, #1
    cb40:	f001 fb84 	bl	e24c <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    cb44:	4622      	mov	r2, r4
    cb46:	4621      	mov	r1, r4
    cb48:	2001      	movs	r0, #1
    cb4a:	f7f4 f92d 	bl	da8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    cb4e:	4622      	mov	r2, r4
    cb50:	4621      	mov	r1, r4
    cb52:	200b      	movs	r0, #11
    cb54:	f7f4 f928 	bl	da8 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    cb58:	4622      	mov	r2, r4
    cb5a:	4621      	mov	r1, r4
    cb5c:	2018      	movs	r0, #24
    cb5e:	f7f4 f923 	bl	da8 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    cb62:	2001      	movs	r0, #1
    cb64:	f7f4 f8ee 	bl	d44 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    cb68:	200b      	movs	r0, #11
    cb6a:	f7f4 f8eb 	bl	d44 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    cb6e:	2018      	movs	r0, #24
    cb70:	f7f4 f8e8 	bl	d44 <_arch_irq_enable>
	return 0;
    cb74:	4620      	mov	r0, r4
    cb76:	e79d      	b.n	cab4 <ll_init+0x14>
		return -ENOMEM;
    cb78:	f06f 000b 	mvn.w	r0, #11
    cb7c:	e79a      	b.n	cab4 <ll_init+0x14>
    cb7e:	bf00      	nop
    cb80:	2000334c 	.word	0x2000334c
    cb84:	00010784 	.word	0x00010784
    cb88:	00010761 	.word	0x00010761
    cb8c:	2000332c 	.word	0x2000332c
    cb90:	0000ef9d 	.word	0x0000ef9d
    cb94:	0000ef11 	.word	0x0000ef11
    cb98:	0000eee5 	.word	0x0000eee5
    cb9c:	200030bc 	.word	0x200030bc
    cba0:	20002d24 	.word	0x20002d24
    cba4:	000109ef 	.word	0x000109ef
    cba8:	0001078f 	.word	0x0001078f
    cbac:	20000b88 	.word	0x20000b88

0000cbb0 <ll_adv_set_get>:


struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
    cbb0:	4800      	ldr	r0, [pc, #0]	; (cbb4 <ll_adv_set_get+0x4>)
    cbb2:	4770      	bx	lr
    cbb4:	20003352 	.word	0x20003352

0000cbb8 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbbc:	b08b      	sub	sp, #44	; 0x2c
    cbbe:	469b      	mov	fp, r3
    cbc0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    cbc4:	9303      	str	r3, [sp, #12]
    cbc6:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    cbca:	9304      	str	r3, [sp, #16]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    cbcc:	2300      	movs	r3, #0
    cbce:	f88d 3020 	strb.w	r3, [sp, #32]
    cbd2:	2306      	movs	r3, #6
    cbd4:	2601      	movs	r6, #1
    cbd6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    cbda:	2502      	movs	r5, #2
    cbdc:	2307      	movs	r3, #7
{
    cbde:	4689      	mov	r9, r1
    cbe0:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    cbe2:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
    cbe6:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
    cbea:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    cbee:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	struct radio_adv_data *radio_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
    cbf2:	f7fe fcfb 	bl	b5ec <ll_adv_is_enabled>
    cbf6:	4682      	mov	sl, r0
    cbf8:	2800      	cmp	r0, #0
    cbfa:	f040 81a3 	bne.w	cf44 <ll_adv_params_set+0x38c>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
    cbfe:	4b5e      	ldr	r3, [pc, #376]	; (cd78 <ll_adv_params_set+0x1c0>)
    cc00:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
    cc04:	731a      	strb	r2, [r3, #12]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
    cc06:	7a1a      	ldrb	r2, [r3, #8]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
    cc08:	f019 0f10 	tst.w	r9, #16
	ll_adv.phy_p = BIT(0);
    cc0c:	f366 0202 	bfi	r2, r6, #0, #3
    cc10:	721a      	strb	r2, [r3, #8]
		if (evt_prop & BIT(4)) {
    cc12:	f000 809f 	beq.w	cd54 <ll_adv_params_set+0x19c>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    cc16:	2203      	movs	r2, #3
    cc18:	f88d 201c 	strb.w	r2, [sp, #28]

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    cc1c:	f019 0f08 	tst.w	r9, #8
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    cc20:	f04f 0204 	mov.w	r2, #4
    cc24:	f88d 201d 	strb.w	r2, [sp, #29]
    cc28:	f88d 501e 	strb.w	r5, [sp, #30]
    cc2c:	f88d 001f 	strb.w	r0, [sp, #31]
			if (evt_prop & BIT(3)) {
    cc30:	d108      	bne.n	cc44 <ll_adv_params_set+0x8c>
			adv_type = leg_adv_type[evt_prop & 0x03];
    cc32:	a90a      	add	r1, sp, #40	; 0x28
    cc34:	f009 0203 	and.w	r2, r9, #3
    cc38:	440a      	add	r2, r1
    cc3a:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
    cc3e:	42b1      	cmp	r1, r6
    cc40:	f040 8098 	bne.w	cd74 <ll_adv_params_set+0x1bc>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
    cc44:	2200      	movs	r2, #0
    cc46:	815a      	strh	r2, [r3, #10]
    cc48:	2101      	movs	r1, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
    cc4a:	781a      	ldrb	r2, [r3, #0]
    cc4c:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
    cc50:	9105      	str	r1, [sp, #20]
    cc52:	f360 0202 	bfi	r2, r0, #0, #3
	ll_adv.filter_policy = filter_policy;
    cc56:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
    cc5a:	f360 02c4 	bfi	r2, r0, #3, #2
    cc5e:	701a      	strb	r2, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
    cc60:	f7fe fcb8 	bl	b5d4 <radio_adv_data_get>
    cc64:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();
    cc66:	f7fe fcb9 	bl	b5dc <radio_aux_adv_data_get>

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
    cc6a:	9905      	ldr	r1, [sp, #20]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    cc6c:	f896 5203 	ldrb.w	r5, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    cc70:	f890 7203 	ldrb.w	r7, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    cc74:	aa0a      	add	r2, sp, #40	; 0x28
    cc76:	4411      	add	r1, r2
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    cc78:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    cc7c:	f811 2c08 	ldrb.w	r2, [r1, #-8]
    cc80:	5d71      	ldrb	r1, [r6, r5]
    cc82:	f002 020f 	and.w	r2, r2, #15
    cc86:	f362 0103 	bfi	r1, r2, #0, #4
    cc8a:	5571      	strb	r1, [r6, r5]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    cc8c:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	radio_aux_adv_data = radio_aux_adv_data_get();
    cc90:	4603      	mov	r3, r0
	aux_pdu->type = pdu->type;
    cc92:	5dc1      	ldrb	r1, [r0, r7]
    cc94:	f362 0103 	bfi	r1, r2, #0, #4
    cc98:	55c1      	strb	r1, [r0, r7]
	
	pdu->rfu = 0;
    cc9a:	5d72      	ldrb	r2, [r6, r5]
    cc9c:	f36f 1204 	bfc	r2, #4, #1
    cca0:	5572      	strb	r2, [r6, r5]
	aux_pdu->rfu = pdu->rfu;
    cca2:	5dc2      	ldrb	r2, [r0, r7]
    cca4:	f36f 1204 	bfc	r2, #4, #1
    cca8:	55c2      	strb	r2, [r0, r7]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    ccaa:	5d72      	ldrb	r2, [r6, r5]
    ccac:	f002 010f 	and.w	r1, r2, #15
    ccb0:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    ccb2:	bf95      	itete	ls
    ccb4:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
	} else {
		pdu->chan_sel = 0;
    ccb8:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    ccbc:	5572      	strbls	r2, [r6, r5]
		pdu->chan_sel = 0;
    ccbe:	5572      	strbhi	r2, [r6, r5]
		aux_pdu->chan_sel = pdu->chan_sel;
    ccc0:	bf95      	itete	ls
    ccc2:	5dc2      	ldrbls	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
    ccc4:	5dc2      	ldrbhi	r2, [r0, r7]
		aux_pdu->chan_sel = pdu->chan_sel;
    ccc6:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
    ccca:	f36f 1245 	bfchi	r2, #5, #1
    ccce:	55c2      	strb	r2, [r0, r7]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    ccd0:	eb00 0807 	add.w	r8, r0, r7
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_adv.own_addr_type = own_addr_type;
    ccd4:	4828      	ldr	r0, [pc, #160]	; (cd78 <ll_adv_params_set+0x1c0>)
    ccd6:	7802      	ldrb	r2, [r0, #0]
    ccd8:	f36b 1246 	bfi	r2, fp, #5, #2
    ccdc:	7002      	strb	r2, [r0, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    ccde:	b2d2      	uxtb	r2, r2
    cce0:	0651      	lsls	r1, r2, #25
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    cce2:	eb06 0405 	add.w	r4, r6, r5
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    cce6:	d50a      	bpl.n	ccfe <ll_adv_params_set+0x146>
    cce8:	9305      	str	r3, [sp, #20]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
    ccea:	9b03      	ldr	r3, [sp, #12]
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
    ccec:	9915      	ldr	r1, [sp, #84]	; 0x54
		ll_adv.id_addr_type = direct_addr_type;
    ccee:	f363 12c7 	bfi	r2, r3, #7, #1
    ccf2:	f800 2b02 	strb.w	r2, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
    ccf6:	2206      	movs	r2, #6
    ccf8:	f7f3 fc7e 	bl	5f8 <memcpy>
    ccfc:	9b05      	ldr	r3, [sp, #20]
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
    ccfe:	5d72      	ldrb	r2, [r6, r5]
    cd00:	f00b 0b01 	and.w	fp, fp, #1
    cd04:	f36b 1286 	bfi	r2, fp, #6, #1
    cd08:	5572      	strb	r2, [r6, r5]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
    cd0a:	5dda      	ldrb	r2, [r3, r7]
    cd0c:	f36f 1286 	bfc	r2, #6, #1
    cd10:	55da      	strb	r2, [r3, r7]
	pdu->rx_addr = 0;  							
    cd12:	5d72      	ldrb	r2, [r6, r5]
    cd14:	f36f 12c7 	bfc	r2, #7, #1
    cd18:	5572      	strb	r2, [r6, r5]
	aux_pdu->rx_addr = pdu->rx_addr;
    cd1a:	5dda      	ldrb	r2, [r3, r7]
    cd1c:	f36f 12c7 	bfc	r2, #7, #1
    cd20:	55da      	strb	r2, [r3, r7]
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
    cd22:	f019 0204 	ands.w	r2, r9, #4
		pdu->rx_addr = 0;//direct_addr_type;
    cd26:	bf1e      	ittt	ne
    cd28:	5d73      	ldrbne	r3, [r6, r5]
    cd2a:	f36f 13c7 	bfcne	r3, #7, #1
    cd2e:	5573      	strbne	r3, [r6, r5]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    cd30:	5d73      	ldrb	r3, [r6, r5]
    cd32:	f003 010f 	and.w	r1, r3, #15
    cd36:	2901      	cmp	r1, #1
    cd38:	d120      	bne.n	cd7c <ll_adv_params_set+0x1c4>
		pdu->rx_addr = direct_addr_type;
    cd3a:	9a03      	ldr	r2, [sp, #12]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    cd3c:	9915      	ldr	r1, [sp, #84]	; 0x54
		pdu->rx_addr = direct_addr_type;
    cd3e:	f362 13c7 	bfi	r3, r2, #7, #1
    cd42:	5573      	strb	r3, [r6, r5]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    cd44:	2206      	movs	r2, #6
    cd46:	f104 0008 	add.w	r0, r4, #8
    cd4a:	f7f3 fc55 	bl	5f8 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    cd4e:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    cd50:	7063      	strb	r3, [r4, #1]
    cd52:	e0d2      	b.n	cefa <ll_adv_params_set+0x342>
			if (((evt_prop & 0x03) == 0x03) ||
    cd54:	f009 0203 	and.w	r2, r9, #3
    cd58:	2a03      	cmp	r2, #3
    cd5a:	f000 80f6 	beq.w	cf4a <ll_adv_params_set+0x392>
    cd5e:	f009 020c 	and.w	r2, r9, #12
    cd62:	2a0c      	cmp	r2, #12
    cd64:	f000 80f1 	beq.w	cf4a <ll_adv_params_set+0x392>
			ll_adv.phy_p = phy_p;
    cd68:	7a1a      	ldrb	r2, [r3, #8]
    cd6a:	9904      	ldr	r1, [sp, #16]
    cd6c:	f361 0202 	bfi	r2, r1, #0, #3
    cd70:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    cd72:	2105      	movs	r1, #5
		ll_adv.interval = interval;
    cd74:	815c      	strh	r4, [r3, #10]
    cd76:	e768      	b.n	cc4a <ll_adv_params_set+0x92>
    cd78:	20003352 	.word	0x20003352
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    cd7c:	2907      	cmp	r1, #7
    cd7e:	f040 80dc 	bne.w	cf3a <ll_adv_params_set+0x382>
		p->ext_hdr_len = 0;
    cd82:	78a3      	ldrb	r3, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
    cd84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cd88:	f36f 1387 	bfc	r3, #6, #2
    cd8c:	70a3      	strb	r3, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
    cd8e:	f898 3002 	ldrb.w	r3, [r8, #2]
		aux_p->adv_mode = p->adv_mode;
    cd92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cd96:	f36f 1387 	bfc	r3, #6, #2
    cd9a:	f888 3002 	strb.w	r3, [r8, #2]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    cd9e:	f019 0f20 	tst.w	r9, #32
		*(u8_t *)h = 0;
    cda2:	f04f 0300 	mov.w	r3, #0
    cda6:	70e3      	strb	r3, [r4, #3]
		p = (void *)&pdu->adv_ext_ind;
    cda8:	f104 0002 	add.w	r0, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    cdac:	f104 0504 	add.w	r5, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
    cdb0:	f108 0102 	add.w	r1, r8, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    cdb4:	f108 0604 	add.w	r6, r8, #4
		*(u8_t *)aux_h = 0;
    cdb8:	f888 3003 	strb.w	r3, [r8, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    cdbc:	d007      	beq.n	cdce <ll_adv_params_set+0x216>
    cdbe:	78a3      	ldrb	r3, [r4, #2]
    cdc0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    cdc4:	d103      	bne.n	cdce <ll_adv_params_set+0x216>
    cdc6:	9b04      	ldr	r3, [sp, #16]
    cdc8:	2b04      	cmp	r3, #4
    cdca:	f040 80b0 	bne.w	cf2e <ll_adv_params_set+0x376>
			h->adv_addr = 1;
    cdce:	78e3      	ldrb	r3, [r4, #3]
    cdd0:	f043 0301 	orr.w	r3, r3, #1
    cdd4:	70e3      	strb	r3, [r4, #3]
			ptr += BDADDR_SIZE;
    cdd6:	f104 030a 	add.w	r3, r4, #10
		if(evt_prop & BIT(2)){
    cdda:	b122      	cbz	r2, cde6 <ll_adv_params_set+0x22e>
			h->tgt_addr = 1;
    cddc:	78e2      	ldrb	r2, [r4, #3]
    cdde:	f042 0202 	orr.w	r2, r2, #2
    cde2:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    cde4:	3306      	adds	r3, #6
		if(evt_prop & BIT(6)){
    cde6:	f019 0f40 	tst.w	r9, #64	; 0x40
    cdea:	f000 80a2 	beq.w	cf32 <ll_adv_params_set+0x37a>
			h->adi = 1;
    cdee:	78e2      	ldrb	r2, [r4, #3]
			adi_ptr = ptr;
    cdf0:	9301      	str	r3, [sp, #4]
			h->adi = 1;
    cdf2:	f042 0208 	orr.w	r2, r2, #8
    cdf6:	70e2      	strb	r2, [r4, #3]
			aux_h->adi = h->adi;
    cdf8:	f898 2003 	ldrb.w	r2, [r8, #3]
			aux_adi_ptr = aux_ptr;
    cdfc:	9602      	str	r6, [sp, #8]
			aux_h->adi = h->adi;
    cdfe:	f042 0208 	orr.w	r2, r2, #8
    ce02:	f888 2003 	strb.w	r2, [r8, #3]
			h->aux_ptr = 1;
    ce06:	78e2      	ldrb	r2, [r4, #3]
			h->tx_pwr = 1;
    ce08:	f042 0250 	orr.w	r2, r2, #80	; 0x50
    ce0c:	70e2      	strb	r2, [r4, #3]
			aux_h->tx_pwr = h->tx_pwr;
    ce0e:	f898 2003 	ldrb.w	r2, [r8, #3]
			ptr += sizeof(*adi_ptr);
    ce12:	1c9f      	adds	r7, r3, #2
			aux_h->tx_pwr = h->tx_pwr;
    ce14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ce18:	f888 2003 	strb.w	r2, [r8, #3]
			ptr += sizeof(*adi_ptr);
    ce1c:	9700      	str	r7, [sp, #0]
			aux_ptr ++;
    ce1e:	f108 0207 	add.w	r2, r8, #7
			ptr ++;
    ce22:	3306      	adds	r3, #6
		len = ptr - (u8_t *)p;
    ce24:	1a1b      	subs	r3, r3, r0
    ce26:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    ce28:	2b02      	cmp	r3, #2
			p->ext_hdr_len = (len -
    ce2a:	bf8c      	ite	hi
    ce2c:	78a0      	ldrbhi	r0, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    ce2e:	2301      	movls	r3, #1
    ce30:	7063      	strb	r3, [r4, #1]
			p->ext_hdr_len = (len -
    ce32:	bf88      	it	hi
    ce34:	f103 37ff 	addhi.w	r7, r3, #4294967295	; 0xffffffff
		aux_len = aux_ptr - (u8_t *)aux_p;
    ce38:	eba2 0301 	sub.w	r3, r2, r1
			p->ext_hdr_len = (len -
    ce3c:	bf88      	it	hi
    ce3e:	f367 0005 	bfihi	r0, r7, #0, #6
		aux_len = aux_ptr - (u8_t *)aux_p;
    ce42:	b2db      	uxtb	r3, r3
			p->ext_hdr_len = (len -
    ce44:	bf88      	it	hi
    ce46:	70a0      	strbhi	r0, [r4, #2]
    ce48:	4a41      	ldr	r2, [pc, #260]	; (cf50 <ll_adv_params_set+0x398>)
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
    ce4a:	2b02      	cmp	r3, #2
			aux_p->ext_hdr_len = (aux_len -
    ce4c:	bf82      	ittt	hi
    ce4e:	f898 1002 	ldrbhi.w	r1, [r8, #2]
			aux_pdu->len = aux_len;
    ce52:	f888 3001 	strbhi.w	r3, [r8, #1]
			aux_p->ext_hdr_len = (aux_len -
    ce56:	f103 30ff 	addhi.w	r0, r3, #4294967295	; 0xffffffff
			aux_ptr_len = aux_len;
    ce5a:	7013      	strb	r3, [r2, #0]
		if(h->adv_addr){
    ce5c:	78e3      	ldrb	r3, [r4, #3]
			aux_p->ext_hdr_len = (aux_len -
    ce5e:	bf8b      	itete	hi
    ce60:	f360 0105 	bfihi	r1, r0, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    ce64:	2101      	movls	r1, #1
			aux_p->ext_hdr_len = (aux_len -
    ce66:	f888 1002 	strbhi.w	r1, [r8, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    ce6a:	f888 1001 	strbls.w	r1, [r8, #1]
		if(h->adv_addr){
    ce6e:	07da      	lsls	r2, r3, #31
			ptr += BDADDR_SIZE;
    ce70:	bf48      	it	mi
    ce72:	f104 050a 	addmi.w	r5, r4, #10
		if(h->tgt_addr){
    ce76:	079f      	lsls	r7, r3, #30
    ce78:	d505      	bpl.n	ce86 <ll_adv_params_set+0x2ce>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
    ce7a:	4628      	mov	r0, r5
    ce7c:	2206      	movs	r2, #6
    ce7e:	9915      	ldr	r1, [sp, #84]	; 0x54
    ce80:	f7f3 fbba 	bl	5f8 <memcpy>
			ptr += BDADDR_SIZE;
    ce84:	3506      	adds	r5, #6
		if(h->adi){
    ce86:	78e2      	ldrb	r2, [r4, #3]
    ce88:	0710      	lsls	r0, r2, #28
    ce8a:	d517      	bpl.n	cebc <ll_adv_params_set+0x304>
			adi_ptr->did = 0x00;
    ce8c:	9b01      	ldr	r3, [sp, #4]
    ce8e:	2100      	movs	r1, #0
    ce90:	7019      	strb	r1, [r3, #0]
    ce92:	785b      	ldrb	r3, [r3, #1]
			adi_ptr->sid = 0x03;//sid & 0x0f;
    ce94:	2003      	movs	r0, #3
    ce96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ce9a:	f360 1307 	bfi	r3, r0, #4, #4
    ce9e:	9801      	ldr	r0, [sp, #4]
    cea0:	7043      	strb	r3, [r0, #1]
			aux_adi_ptr->did = adi_ptr->did;
    cea2:	9b02      	ldr	r3, [sp, #8]
    cea4:	7019      	strb	r1, [r3, #0]
    cea6:	785b      	ldrb	r3, [r3, #1]
			aux_adi_ptr->sid = 0x02;//adi_ptr->sid;
    cea8:	2102      	movs	r1, #2
    ceaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ceae:	f361 1307 	bfi	r3, r1, #4, #4
    ceb2:	9902      	ldr	r1, [sp, #8]
			ptr += sizeof(*adi_ptr);
    ceb4:	3502      	adds	r5, #2
			aux_adi_ptr->sid = 0x02;//adi_ptr->sid;
    ceb6:	704b      	strb	r3, [r1, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
    ceb8:	f108 0606 	add.w	r6, r8, #6
		if(h->aux_ptr){
    cebc:	06d1      	lsls	r1, r2, #27
    cebe:	d50d      	bpl.n	cedc <ll_adv_params_set+0x324>
			ap->offs_units = 0;
    cec0:	9900      	ldr	r1, [sp, #0]
    cec2:	2303      	movs	r3, #3
    cec4:	700b      	strb	r3, [r1, #0]
			ap->offs = 00;
    cec6:	9b00      	ldr	r3, [sp, #0]
    cec8:	2100      	movs	r1, #0
    ceca:	7059      	strb	r1, [r3, #1]
    cecc:	789b      	ldrb	r3, [r3, #2]
			ap->phy = 0;
    cece:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    ced2:	f361 1347 	bfi	r3, r1, #5, #3
    ced6:	9900      	ldr	r1, [sp, #0]
			ptr += sizeof(*ap);
    ced8:	3503      	adds	r5, #3
			ap->phy = 0;
    ceda:	708b      	strb	r3, [r1, #2]
		if (h->tx_pwr) {
    cedc:	0653      	lsls	r3, r2, #25
    cede:	d50a      	bpl.n	cef6 <ll_adv_params_set+0x33e>
			if (tx_pwr) {
    cee0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    cee2:	b343      	cbz	r3, cf36 <ll_adv_params_set+0x37e>
				if (*tx_pwr != 0x7F) {
    cee4:	781b      	ldrb	r3, [r3, #0]
    cee6:	2b7f      	cmp	r3, #127	; 0x7f
    cee8:	d102      	bne.n	cef0 <ll_adv_params_set+0x338>
					*tx_pwr = _tx_pwr;
    ceea:	9a18      	ldr	r2, [sp, #96]	; 0x60
    ceec:	2300      	movs	r3, #0
    ceee:	7013      	strb	r3, [r2, #0]
			*ptr = _tx_pwr;
    cef0:	702b      	strb	r3, [r5, #0]
			*aux_ptr = _tx_pwr;
    cef2:	f806 3b01 	strb.w	r3, [r6], #1
		set_data_ptr = aux_ptr; 
    cef6:	4b17      	ldr	r3, [pc, #92]	; (cf54 <ll_adv_params_set+0x39c>)
    cef8:	601e      	str	r6, [r3, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    cefa:	f7fe fb73 	bl	b5e4 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    cefe:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    cf02:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    cf06:	2404      	movs	r4, #4
    cf08:	5c83      	ldrb	r3, [r0, r2]
    cf0a:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    cf0e:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    cf12:	f36b 1386 	bfi	r3, fp, #6, #1
	pdu->rx_addr = 0;
    cf16:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    cf1a:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    cf1c:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    cf1e:	784b      	ldrb	r3, [r1, #1]
    cf20:	b90b      	cbnz	r3, cf26 <ll_adv_params_set+0x36e>
		pdu->len = BDADDR_SIZE;
    cf22:	2306      	movs	r3, #6
    cf24:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    cf26:	4650      	mov	r0, sl
    cf28:	b00b      	add	sp, #44	; 0x2c
    cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
    cf2e:	462b      	mov	r3, r5
    cf30:	e753      	b.n	cdda <ll_adv_params_set+0x222>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    cf32:	4632      	mov	r2, r6
    cf34:	e776      	b.n	ce24 <ll_adv_params_set+0x26c>
			_tx_pwr = 0;
    cf36:	9b18      	ldr	r3, [sp, #96]	; 0x60
    cf38:	e7da      	b.n	cef0 <ll_adv_params_set+0x338>
	} else if (pdu->len == 0) {
    cf3a:	7863      	ldrb	r3, [r4, #1]
    cf3c:	2b00      	cmp	r3, #0
    cf3e:	d1dc      	bne.n	cefa <ll_adv_params_set+0x342>
		pdu->len = BDADDR_SIZE;
    cf40:	2306      	movs	r3, #6
    cf42:	e705      	b.n	cd50 <ll_adv_params_set+0x198>
		return BT_HCI_ERR_CMD_DISALLOWED;
    cf44:	f04f 0a0c 	mov.w	sl, #12
    cf48:	e7ed      	b.n	cf26 <ll_adv_params_set+0x36e>
				return 0x12; /* invalid HCI cmd param */
    cf4a:	f04f 0a12 	mov.w	sl, #18
    cf4e:	e7ea      	b.n	cf26 <ll_adv_params_set+0x36e>
    cf50:	20003350 	.word	0x20003350
    cf54:	20003360 	.word	0x20003360

0000cf58 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    cf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf5c:	4688      	mov	r8, r1
    cf5e:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    cf60:	f7fe fb38 	bl	b5d4 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    cf64:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
    cf68:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
    cf6c:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    cf6e:	f810 e002 	ldrb.w	lr, [r0, r2]
    cf72:	f00e 030f 	and.w	r3, lr, #15
    cf76:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    cf78:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    cf7c:	d115      	bne.n	cfaa <ll_adv_data_set+0x52>
	
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();
    cf7e:	f7fe fb2d 	bl	b5dc <radio_aux_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    cf82:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203

		memcpy(set_data_ptr, data, len);
    cf86:	4b28      	ldr	r3, [pc, #160]	; (d028 <ll_adv_data_set+0xd0>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    cf88:	eb05 2505 	add.w	r5, r5, r5, lsl #8
    cf8c:	4405      	add	r5, r0
		memcpy(set_data_ptr, data, len);
    cf8e:	4632      	mov	r2, r6
    cf90:	6818      	ldr	r0, [r3, #0]
    cf92:	4641      	mov	r1, r8
    cf94:	f7f3 fb30 	bl	5f8 <memcpy>
		aux_pdu->len = aux_ptr_len + len;
    cf98:	4b24      	ldr	r3, [pc, #144]	; (d02c <ll_adv_data_set+0xd4>)
    cf9a:	781b      	ldrb	r3, [r3, #0]
    cf9c:	441e      	add	r6, r3
		radio_adv_data->last = last;
    cf9e:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
    cfa0:	706e      	strb	r6, [r5, #1]
		radio_adv_data->last = last;
    cfa2:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
    cfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    cfaa:	2b01      	cmp	r3, #1
    cfac:	d039      	beq.n	d022 <ll_adv_data_set+0xca>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    cfae:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    cfb2:	42ab      	cmp	r3, r5
    cfb4:	d104      	bne.n	cfc0 <ll_adv_data_set+0x68>
			last = radio_adv_data->last + 1;
    cfb6:	3501      	adds	r5, #1
    cfb8:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    cfba:	2d02      	cmp	r5, #2
    cfbc:	bf08      	it	eq
    cfbe:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    cfc0:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    cfc4:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
    cfc6:	5ce0      	ldrb	r0, [r4, r3]
    cfc8:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    cfcc:	f36f 1004 	bfc	r0, #4, #1
    cfd0:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    cfd2:	5ca0      	ldrb	r0, [r4, r2]
    cfd4:	f814 e003 	ldrb.w	lr, [r4, r3]
    cfd8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    cfdc:	f360 1e45 	bfi	lr, r0, #5, #1
    cfe0:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    cfe4:	5ca0      	ldrb	r0, [r4, r2]
    cfe6:	fa5f fe8e 	uxtb.w	lr, lr
    cfea:	f3c0 1080 	ubfx	r0, r0, #6, #1
    cfee:	f360 1e86 	bfi	lr, r0, #6, #1
    cff2:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
    cff6:	5ca2      	ldrb	r2, [r4, r2]
    cff8:	fa5f f08e 	uxtb.w	r0, lr
    cffc:	09d2      	lsrs	r2, r2, #7
    cffe:	f362 10c7 	bfi	r0, r2, #7, #1
    d002:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    d004:	2206      	movs	r2, #6
    d006:	3102      	adds	r1, #2
    d008:	1cb8      	adds	r0, r7, #2
    d00a:	f7f3 faf5 	bl	5f8 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    d00e:	4632      	mov	r2, r6
    d010:	4641      	mov	r1, r8
    d012:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
    d016:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    d018:	f7f3 faee 	bl	5f8 <memcpy>
		pdu->len = BDADDR_SIZE + len;
    d01c:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    d01e:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    d022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d026:	bf00      	nop
    d028:	20003360 	.word	0x20003360
    d02c:	20003350 	.word	0x20003350

0000d030 <ll_scan_data_set>:
	
//#endif	/* CONFIG_BT_CTLR_ADV_EXT */
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    d030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d034:	4606      	mov	r6, r0
    d036:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    d038:	f7fe fad4 	bl	b5e4 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    d03c:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
    d040:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
    d044:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    d046:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    d048:	d131      	bne.n	d0ae <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
    d04a:	1c5d      	adds	r5, r3, #1
    d04c:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    d04e:	2d02      	cmp	r5, #2
			last = 0;
    d050:	bf08      	it	eq
    d052:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    d054:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    d058:	f04f 0e04 	mov.w	lr, #4
    d05c:	5ca0      	ldrb	r0, [r4, r2]
    d05e:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    d062:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    d066:	f36f 1045 	bfc	r0, #5, #1
    d06a:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    d06c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    d070:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
    d072:	5ce0      	ldrb	r0, [r4, r3]
    d074:	5ca3      	ldrb	r3, [r4, r2]
    d076:	f3c0 1080 	ubfx	r0, r0, #6, #1
    d07a:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    d07e:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
    d082:	f36f 13c7 	bfc	r3, #7, #1
    d086:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
    d088:	1db3      	adds	r3, r6, #6
    d08a:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    d08e:	2206      	movs	r2, #6
    d090:	3102      	adds	r1, #2
    d092:	f108 0002 	add.w	r0, r8, #2
    d096:	f7f3 faaf 	bl	5f8 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    d09a:	4632      	mov	r2, r6
    d09c:	4639      	mov	r1, r7
    d09e:	f108 0008 	add.w	r0, r8, #8
    d0a2:	f7f3 faa9 	bl	5f8 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    d0a6:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    d0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0ae:	461d      	mov	r5, r3
    d0b0:	e7d0      	b.n	d054 <ll_scan_data_set+0x24>
	...

0000d0b4 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
    d0b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	//struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
    d0b8:	b920      	cbnz	r0, d0c4 <ll_adv_enable+0x10>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
    d0ba:	b002      	add	sp, #8
    d0bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return radio_adv_disable();
    d0c0:	f7ff baca 	b.w	c658 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    d0c4:	f7fe fa92 	bl	b5ec <ll_adv_is_enabled>
    d0c8:	4681      	mov	r9, r0
    d0ca:	2800      	cmp	r0, #0
    d0cc:	d153      	bne.n	d176 <ll_adv_enable+0xc2>
	radio_adv_data = radio_adv_data_get();
    d0ce:	f7fe fa81 	bl	b5d4 <radio_adv_data_get>
    d0d2:	4607      	mov	r7, r0
	radio_scan_data = radio_scan_data_get();
    d0d4:	f7fe fa86 	bl	b5e4 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    d0d8:	f897 4203 	ldrb.w	r4, [r7, #515]	; 0x203
    d0dc:	4d32      	ldr	r5, [pc, #200]	; (d1a8 <ll_adv_enable+0xf4>)
    d0de:	eb04 2404 	add.w	r4, r4, r4, lsl #8
    d0e2:	eb07 0804 	add.w	r8, r7, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    d0e6:	5d3b      	ldrb	r3, [r7, r4]
    d0e8:	f003 020f 	and.w	r2, r3, #15
    d0ec:	2a07      	cmp	r2, #7
    d0ee:	d110      	bne.n	d112 <ll_adv_enable+0x5e>
		if (h->adv_addr) {
    d0f0:	f898 2003 	ldrb.w	r2, [r8, #3]
    d0f4:	07d2      	lsls	r2, r2, #31
    d0f6:	d50a      	bpl.n	d10e <ll_adv_enable+0x5a>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    d0f8:	4649      	mov	r1, r9
    d0fa:	f3c3 1080 	ubfx	r0, r3, #6, #1
    d0fe:	f7f5 fe17 	bl	2d30 <ll_addr_get>
    d102:	2206      	movs	r2, #6
    d104:	4601      	mov	r1, r0
    d106:	f108 0004 	add.w	r0, r8, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    d10a:	f7f3 fa75 	bl	5f8 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
    d10e:	24ff      	movs	r4, #255	; 0xff
    d110:	e020      	b.n	d154 <ll_adv_enable+0xa0>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    d112:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
    d116:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    d11a:	18c6      	adds	r6, r0, r3
		ll_filters_adv_update(ll_adv.filter_policy);
    d11c:	7828      	ldrb	r0, [r5, #0]
    d11e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
    d122:	f000 fbfd 	bl	d920 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    d126:	7828      	ldrb	r0, [r5, #0]
    d128:	f010 0a40 	ands.w	sl, r0, #64	; 0x40
    d12c:	d025      	beq.n	d17a <ll_adv_enable+0xc6>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
    d12e:	464a      	mov	r2, r9
    d130:	1ca9      	adds	r1, r5, #2
    d132:	09c0      	lsrs	r0, r0, #7
    d134:	f000 fc20 	bl	d978 <ll_rl_find>
			if (rl_idx != FILTER_IDX_NONE) {
    d138:	28ff      	cmp	r0, #255	; 0xff
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
    d13a:	4604      	mov	r4, r0
			if (rl_idx != FILTER_IDX_NONE) {
    d13c:	d002      	beq.n	d144 <ll_adv_enable+0x90>
				ll_rl_rpa_update(false);
    d13e:	4648      	mov	r0, r9
    d140:	f000 fdb4 	bl	dcac <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
    d144:	4641      	mov	r1, r8
    d146:	4620      	mov	r0, r4
    d148:	f000 fd54 	bl	dbf4 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
    d14c:	4631      	mov	r1, r6
    d14e:	4620      	mov	r0, r4
    d150:	f000 fd50 	bl	dbf4 <ll_rl_pdu_adv_update>
				  ll_adv.chan_map, ll_adv.filter_policy,
    d154:	782a      	ldrb	r2, [r5, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
    d156:	7a28      	ldrb	r0, [r5, #8]
    d158:	7b2b      	ldrb	r3, [r5, #12]
    d15a:	9301      	str	r3, [sp, #4]
    d15c:	8969      	ldrh	r1, [r5, #10]
    d15e:	9400      	str	r4, [sp, #0]
    d160:	f3c2 03c1 	ubfx	r3, r2, #3, #2
    d164:	f000 0007 	and.w	r0, r0, #7
    d168:	f002 0207 	and.w	r2, r2, #7
    d16c:	f7fe ffe4 	bl	c138 <radio_adv_enable>
}
    d170:	b002      	add	sp, #8
    d172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
    d176:	2000      	movs	r0, #0
    d178:	e7fa      	b.n	d170 <ll_adv_enable+0xbc>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    d17a:	5d38      	ldrb	r0, [r7, r4]
    d17c:	4651      	mov	r1, sl
    d17e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    d182:	f7f5 fdd5 	bl	2d30 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    d186:	2206      	movs	r2, #6
    d188:	4601      	mov	r1, r0
    d18a:	f108 0002 	add.w	r0, r8, #2
    d18e:	f7f3 fa33 	bl	5f8 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    d192:	5d38      	ldrb	r0, [r7, r4]
    d194:	4651      	mov	r1, sl
    d196:	f3c0 1080 	ubfx	r0, r0, #6, #1
    d19a:	f7f5 fdc9 	bl	2d30 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
    d19e:	2206      	movs	r2, #6
    d1a0:	4601      	mov	r1, r0
    d1a2:	1cb0      	adds	r0, r6, #2
    d1a4:	e7b1      	b.n	d10a <ll_adv_enable+0x56>
    d1a6:	bf00      	nop
    d1a8:	20003352 	.word	0x20003352

0000d1ac <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
    d1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d1b0:	4606      	mov	r6, r0
    d1b2:	4689      	mov	r9, r1
    d1b4:	4690      	mov	r8, r2
    d1b6:	461f      	mov	r7, r3
	if (ll_scan_is_enabled()) {
    d1b8:	f7fe fa2e 	bl	b618 <ll_scan_is_enabled>
    d1bc:	b9a0      	cbnz	r0, d1e8 <ll_scan_params_set+0x3c>
	 * 1001b - Ext. Coded active
	 */


	/* for ext adv 0010 type */
	ll_scan.type = type | 0x02;  			//for time being just to test
    d1be:	4d0c      	ldr	r5, [pc, #48]	; (d1f0 <ll_scan_params_set+0x44>)
    d1c0:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
    d1c2:	f8a5 9000 	strh.w	r9, [r5]
	ll_scan.type = type | 0x02;  			//for time being just to test
    d1c6:	f046 0602 	orr.w	r6, r6, #2
    d1ca:	f366 0403 	bfi	r4, r6, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
    d1ce:	4622      	mov	r2, r4
    d1d0:	f367 1205 	bfi	r2, r7, #4, #2
	ll_scan.filter_policy = filter_policy;
    d1d4:	4613      	mov	r3, r2
    d1d6:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
    d1da:	f8a5 8002 	strh.w	r8, [r5, #2]
	ll_scan.filter_policy = filter_policy;
    d1de:	f362 1387 	bfi	r3, r2, #6, #2
    d1e2:	712b      	strb	r3, [r5, #4]

	return 0;
    d1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    d1e8:	200c      	movs	r0, #12
}
    d1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d1ee:	bf00      	nop
    d1f0:	20003364 	.word	0x20003364

0000d1f4 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
    d1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1f6:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
    d1f8:	b920      	cbnz	r0, d204 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
    d1fa:	b005      	add	sp, #20
    d1fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
    d200:	f7ff bb58 	b.w	c8b4 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
    d204:	f7fe fa08 	bl	b618 <ll_scan_is_enabled>
    d208:	4606      	mov	r6, r0
    d20a:	bb40      	cbnz	r0, d25e <ll_scan_enable+0x6a>
	ll_filters_scan_update(ll_scan.filter_policy);
    d20c:	4c15      	ldr	r4, [pc, #84]	; (d264 <ll_scan_enable+0x70>)
    d20e:	7920      	ldrb	r0, [r4, #4]
    d210:	0980      	lsrs	r0, r0, #6
    d212:	f000 fb9b 	bl	d94c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
    d216:	7923      	ldrb	r3, [r4, #4]
    d218:	f013 0501 	ands.w	r5, r3, #1
    d21c:	d006      	beq.n	d22c <ll_scan_enable+0x38>
    d21e:	f013 0520 	ands.w	r5, r3, #32
    d222:	d003      	beq.n	d22c <ll_scan_enable+0x38>
		ll_rl_rpa_update(false);
    d224:	4630      	mov	r0, r6
    d226:	f000 fd41 	bl	dcac <ll_rl_rpa_update>
		rpa_gen = 1;
    d22a:	2501      	movs	r5, #1
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    d22c:	7926      	ldrb	r6, [r4, #4]
    d22e:	f006 070f 	and.w	r7, r6, #15
    d232:	f3c6 1600 	ubfx	r6, r6, #4, #1
    d236:	2100      	movs	r1, #0
    d238:	4630      	mov	r0, r6
    d23a:	f7f5 fd79 	bl	2d30 <ll_addr_get>
    d23e:	22ff      	movs	r2, #255	; 0xff
    d240:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
    d242:	7922      	ldrb	r2, [r4, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    d244:	8823      	ldrh	r3, [r4, #0]
    d246:	9502      	str	r5, [sp, #8]
    d248:	0992      	lsrs	r2, r2, #6
    d24a:	9201      	str	r2, [sp, #4]
    d24c:	8862      	ldrh	r2, [r4, #2]
    d24e:	9200      	str	r2, [sp, #0]
    d250:	4631      	mov	r1, r6
    d252:	4602      	mov	r2, r0
    d254:	4638      	mov	r0, r7
    d256:	f7ff fa2f 	bl	c6b8 <radio_scan_enable>
}
    d25a:	b005      	add	sp, #20
    d25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    d25e:	2000      	movs	r0, #0
    d260:	e7fb      	b.n	d25a <ll_scan_enable+0x66>
    d262:	bf00      	nop
    d264:	20003364 	.word	0x20003364

0000d268 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
    d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d26c:	b085      	sub	sp, #20
    d26e:	461e      	mov	r6, r3
    d270:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
    d274:	9303      	str	r3, [sp, #12]
    d276:	4680      	mov	r8, r0
    d278:	4689      	mov	r9, r1
    d27a:	4615      	mov	r5, r2
    d27c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    d27e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
    d282:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
    d286:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (ll_scan_is_enabled()) {
    d28a:	f7fe f9c5 	bl	b618 <ll_scan_is_enabled>
    d28e:	9b03      	ldr	r3, [sp, #12]
    d290:	bba0      	cbnz	r0, d2fc <ll_create_connection+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
    d292:	9300      	str	r3, [sp, #0]
    d294:	4652      	mov	r2, sl
    d296:	465b      	mov	r3, fp
    d298:	4639      	mov	r1, r7
    d29a:	4630      	mov	r0, r6
    d29c:	f7fe f9e0 	bl	b660 <radio_connect_enable>
				      latency, timeout);

	if (status) {
    d2a0:	bb68      	cbnz	r0, d2fe <ll_create_connection+0x96>
		return status;
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ll_filters_scan_update(filter_policy);
    d2a2:	4628      	mov	r0, r5
    d2a4:	f000 fb52 	bl	d94c <ll_filters_scan_update>

	if (!filter_policy && ctrl_rl_enabled()) {
    d2a8:	b1dd      	cbz	r5, d2e2 <ll_create_connection+0x7a>
	u8_t  rl_idx = FILTER_IDX_NONE;
    d2aa:	27ff      	movs	r7, #255	; 0xff
		/* Look up the resolving list */
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    d2ac:	1ea3      	subs	r3, r4, #2
    d2ae:	2b01      	cmp	r3, #1
    d2b0:	d822      	bhi.n	d2f8 <ll_create_connection+0x90>
	    own_addr_type == BT_ADDR_LE_RANDOM_ID) {

		/* Generate RPAs if required */
		ll_rl_rpa_update(false);
    d2b2:	2000      	movs	r0, #0
    d2b4:	f000 fcfa 	bl	dcac <ll_rl_rpa_update>
		own_addr_type &= 0x1;
    d2b8:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
    d2bc:	2601      	movs	r6, #1
	}
#endif
	return radio_scan_enable(0, own_addr_type,
    d2be:	2100      	movs	r1, #0
    d2c0:	4620      	mov	r0, r4
    d2c2:	f7f5 fd35 	bl	2d30 <ll_addr_get>
    d2c6:	4643      	mov	r3, r8
    d2c8:	4602      	mov	r2, r0
    d2ca:	4621      	mov	r1, r4
    d2cc:	2000      	movs	r0, #0
    d2ce:	9711      	str	r7, [sp, #68]	; 0x44
    d2d0:	9610      	str	r6, [sp, #64]	; 0x40
    d2d2:	950f      	str	r5, [sp, #60]	; 0x3c
    d2d4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
    d2d8:	b005      	add	sp, #20
    d2da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return radio_scan_enable(0, own_addr_type,
    d2de:	f7ff b9eb 	b.w	c6b8 <radio_scan_enable>
	if (!filter_policy && ctrl_rl_enabled()) {
    d2e2:	f000 fc7f 	bl	dbe4 <ctrl_rl_enabled>
    d2e6:	2800      	cmp	r0, #0
    d2e8:	d0df      	beq.n	d2aa <ll_create_connection+0x42>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
    d2ea:	4639      	mov	r1, r7
    d2ec:	462a      	mov	r2, r5
    d2ee:	4630      	mov	r0, r6
    d2f0:	f000 fb42 	bl	d978 <ll_rl_find>
    d2f4:	4607      	mov	r7, r0
    d2f6:	e7d9      	b.n	d2ac <ll_create_connection+0x44>
	u8_t  rpa_gen = 0;
    d2f8:	2600      	movs	r6, #0
    d2fa:	e7e0      	b.n	d2be <ll_create_connection+0x56>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d2fc:	200c      	movs	r0, #12
}
    d2fe:	b005      	add	sp, #20
    d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d304 <isr_tx>:

static u8_t tx_req;
static u8_t volatile tx_ack;

static void isr_tx(void)
{
    d304:	b570      	push	{r4, r5, r6, lr}
	u32_t l, i, s, t;

	/* Clear radio status and events */
	radio_status_reset();
    d306:	f001 fac1 	bl	e88c <radio_status_reset>
	radio_tmr_status_reset();
    d30a:	f001 fb95 	bl	ea38 <radio_tmr_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */

	/* Exit if radio disabled */
	if (((tx_req - tx_ack) & 0x01) == 0) {
    d30e:	4b1b      	ldr	r3, [pc, #108]	; (d37c <isr_tx+0x78>)
    d310:	4a1b      	ldr	r2, [pc, #108]	; (d380 <isr_tx+0x7c>)
    d312:	7819      	ldrb	r1, [r3, #0]
    d314:	7813      	ldrb	r3, [r2, #0]
    d316:	1acb      	subs	r3, r1, r3
    d318:	07db      	lsls	r3, r3, #31
    d31a:	d401      	bmi.n	d320 <isr_tx+0x1c>
		tx_ack = tx_req;
    d31c:	7011      	strb	r1, [r2, #0]

		return;
    d31e:	bd70      	pop	{r4, r5, r6, pc}
	}

	/* LE Test Packet Interval */
	l = radio_tmr_end_get() - radio_tmr_ready_get();
    d320:	f001 fc7e 	bl	ec20 <radio_tmr_end_get>
    d324:	4606      	mov	r6, r0
    d326:	f001 fc63 	bl	ebf0 <radio_tmr_ready_get>
    d32a:	1a36      	subs	r6, r6, r0
	i = ((l + 249 + 624) / 625) * 625;
	t = radio_tmr_end_get() - l + i;
    d32c:	f001 fc78 	bl	ec20 <radio_tmr_end_get>
	t -= radio_tx_ready_delay_get(test_phy, test_phy_flags);
    d330:	4b14      	ldr	r3, [pc, #80]	; (d384 <isr_tx+0x80>)
    d332:	7819      	ldrb	r1, [r3, #0]
    d334:	4b14      	ldr	r3, [pc, #80]	; (d388 <isr_tx+0x84>)
	t = radio_tmr_end_get() - l + i;
    d336:	4605      	mov	r5, r0
	t -= radio_tx_ready_delay_get(test_phy, test_phy_flags);
    d338:	7818      	ldrb	r0, [r3, #0]
    d33a:	f001 fa6d 	bl	e818 <radio_tx_ready_delay_get>
    d33e:	1a28      	subs	r0, r5, r0
	i = ((l + 249 + 624) / 625) * 625;
    d340:	f240 2171 	movw	r1, #625	; 0x271
	t -= radio_tx_ready_delay_get(test_phy, test_phy_flags);
    d344:	1b80      	subs	r0, r0, r6
	i = ((l + 249 + 624) / 625) * 625;
    d346:	f206 3469 	addw	r4, r6, #873	; 0x369
    d34a:	fbb4 f4f1 	udiv	r4, r4, r1
	t -= radio_tx_ready_delay_get(test_phy, test_phy_flags);
    d34e:	fb01 0404 	mla	r4, r1, r4, r0

	/* Set timer capture in the future. */
	radio_tmr_sample();
    d352:	f001 fc71 	bl	ec38 <radio_tmr_sample>
	s = radio_tmr_sample_get();
    d356:	f001 fc75 	bl	ec44 <radio_tmr_sample_get>
	while (t < s) {
    d35a:	42a0      	cmp	r0, r4
    d35c:	d80b      	bhi.n	d376 <isr_tx+0x72>
		t += 625;
	}

	/* Setup next Tx */
	radio_switch_complete_and_disable();
    d35e:	f001 faf3 	bl	e948 <radio_switch_complete_and_disable>
	radio_tmr_start_us(1, t);
    d362:	4621      	mov	r1, r4
    d364:	2001      	movs	r0, #1
    d366:	f001 fbe3 	bl	eb30 <radio_tmr_start_us>
	radio_tmr_aa_capture();
    d36a:	f001 fc13 	bl	eb94 <radio_tmr_aa_capture>
	radio_gpio_pa_setup();
	radio_gpio_pa_lna_enable(t + radio_tx_ready_delay_get(test_phy,
							      test_phy_flags) -
				 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
}
    d36e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_tmr_end_capture();
    d372:	f001 bc43 	b.w	ebfc <radio_tmr_end_capture>
		t += 625;
    d376:	f204 2471 	addw	r4, r4, #625	; 0x271
    d37a:	e7ee      	b.n	d35a <isr_tx+0x56>
    d37c:	20003371 	.word	0x20003371
    d380:	20003370 	.word	0x20003370
    d384:	2000336f 	.word	0x2000336f
    d388:	2000336e 	.word	0x2000336e

0000d38c <isr_rx>:

static void isr_rx(void)
{
    d38c:	b538      	push	{r3, r4, r5, lr}
	u8_t crc_ok = 0;
	u8_t trx_done;

	/* Read radio status and events */
	trx_done = radio_is_done();
    d38e:	f001 fa93 	bl	e8b8 <radio_is_done>
    d392:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    d394:	b18c      	cbz	r4, d3ba <isr_rx+0x2e>
		crc_ok = radio_crc_is_valid();
    d396:	f001 faaf 	bl	e8f8 <radio_crc_is_valid>
    d39a:	b2c5      	uxtb	r5, r0
	}

	/* Clear radio status and events */
	radio_status_reset();
    d39c:	f001 fa76 	bl	e88c <radio_status_reset>
	radio_tmr_status_reset();
    d3a0:	f001 fb4a 	bl	ea38 <radio_tmr_status_reset>

	/* Exit if radio disabled */
	if (!trx_done) {
    d3a4:	b144      	cbz	r4, d3b8 <isr_rx+0x2c>
		return;
	}

	/* Setup next Rx */
	radio_switch_complete_and_rx(test_phy);
    d3a6:	4b06      	ldr	r3, [pc, #24]	; (d3c0 <isr_rx+0x34>)
    d3a8:	7818      	ldrb	r0, [r3, #0]
    d3aa:	f001 fab7 	bl	e91c <radio_switch_complete_and_rx>

	/* Count Rx-ed packets */
	if (crc_ok) {
    d3ae:	b11d      	cbz	r5, d3b8 <isr_rx+0x2c>
		test_num_rx++;
    d3b0:	4a04      	ldr	r2, [pc, #16]	; (d3c4 <isr_rx+0x38>)
    d3b2:	8813      	ldrh	r3, [r2, #0]
    d3b4:	3301      	adds	r3, #1
    d3b6:	8013      	strh	r3, [r2, #0]
    d3b8:	bd38      	pop	{r3, r4, r5, pc}
	u8_t crc_ok = 0;
    d3ba:	4625      	mov	r5, r4
    d3bc:	e7ee      	b.n	d39c <isr_rx+0x10>
    d3be:	bf00      	nop
    d3c0:	2000336e 	.word	0x2000336e
    d3c4:	2000336c 	.word	0x2000336c

0000d3c8 <init.part.1>:
	}
}

static u32_t init(u8_t chan, u8_t phy, void (*isr)(void))
    d3c8:	b570      	push	{r4, r5, r6, lr}
    d3ca:	4615      	mov	r5, r2
    d3cc:	460c      	mov	r4, r1
    d3ce:	4606      	mov	r6, r0
	if (started) {
		return 1;
	}

	/* start coarse timer */
	cntr_start();
    d3d0:	f000 ff92 	bl	e2f8 <cntr_start>

	/* Setup resources required by Radio */
	hf_clock = radio_hf_clock_get();
    d3d4:	f7fe f8a8 	bl	b528 <radio_hf_clock_get>
    d3d8:	6843      	ldr	r3, [r0, #4]
    d3da:	2101      	movs	r1, #1
    d3dc:	681b      	ldr	r3, [r3, #0]
    d3de:	4798      	blx	r3
	clock_control_on(hf_clock, (void *)1); /* start clock, blocking. */

	/* Reset Radio h/w */
	radio_reset();
    d3e0:	f001 f95e 	bl	e6a0 <radio_reset>
	radio_isr_set(isr);
    d3e4:	4628      	mov	r0, r5
    d3e6:	f001 f925 	bl	e634 <radio_isr_set>
    d3ea:	4d18      	ldr	r5, [pc, #96]	; (d44c <init.part.1+0x84>)
    d3ec:	4b18      	ldr	r3, [pc, #96]	; (d450 <init.part.1+0x88>)

	/* Store value needed in Tx/Rx ISR */
	if (phy < 0x04) {
    d3ee:	2c03      	cmp	r4, #3
		test_phy = BIT(phy - 1);
		test_phy_flags = 1;
	} else {
		test_phy = BIT(2);
    d3f0:	bf8d      	iteet	hi
    d3f2:	2204      	movhi	r2, #4
		test_phy = BIT(phy - 1);
    d3f4:	2201      	movls	r2, #1
    d3f6:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
		test_phy = BIT(2);
    d3fa:	702a      	strbhi	r2, [r5, #0]
		test_phy = BIT(phy - 1);
    d3fc:	bf94      	ite	ls
    d3fe:	fa02 f404 	lslls.w	r4, r2, r4
		test_phy_flags = 0;
    d402:	2200      	movhi	r2, #0
    d404:	701a      	strb	r2, [r3, #0]
		test_phy = BIT(phy - 1);
    d406:	bf98      	it	ls
    d408:	702c      	strbls	r4, [r5, #0]
	}

	/* Setup Radio in Tx/Rx */
	/* NOTE: No whitening in test mode. */
	radio_phy_set(test_phy, test_phy_flags);
    d40a:	7819      	ldrb	r1, [r3, #0]
    d40c:	7828      	ldrb	r0, [r5, #0]
    d40e:	f001 f961 	bl	e6d4 <radio_phy_set>
	radio_tmr_tifs_set(150);
    d412:	2096      	movs	r0, #150	; 0x96
    d414:	f001 fb20 	bl	ea58 <radio_tmr_tifs_set>
	radio_tx_power_set(0);
    d418:	2000      	movs	r0, #0
    d41a:	f001 f989 	bl	e730 <radio_tx_power_set>
	radio_freq_chan_set((chan << 1) + 2);
    d41e:	0070      	lsls	r0, r6, #1
    d420:	3002      	adds	r0, #2
    d422:	f001 f98b 	bl	e73c <radio_freq_chan_set>
	radio_aa_set((u8_t *)&test_sync_word);
    d426:	480b      	ldr	r0, [pc, #44]	; (d454 <init.part.1+0x8c>)
    d428:	f001 f9a0 	bl	e76c <radio_aa_set>
	radio_crc_configure(0x65b, 0x555555);
    d42c:	490a      	ldr	r1, [pc, #40]	; (d458 <init.part.1+0x90>)
    d42e:	f240 605b 	movw	r0, #1627	; 0x65b
    d432:	f001 fa55 	bl	e8e0 <radio_crc_configure>
	radio_pkt_configure(8, 255, (test_phy << 1));
    d436:	782a      	ldrb	r2, [r5, #0]
    d438:	0052      	lsls	r2, r2, #1
    d43a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    d43e:	21ff      	movs	r1, #255	; 0xff
    d440:	2008      	movs	r0, #8
    d442:	f001 f9ab 	bl	e79c <radio_pkt_configure>

	return 0;
}
    d446:	2000      	movs	r0, #0
    d448:	bd70      	pop	{r4, r5, r6, pc}
    d44a:	bf00      	nop
    d44c:	2000336e 	.word	0x2000336e
    d450:	2000336f 	.word	0x2000336f
    d454:	00010c28 	.word	0x00010c28
    d458:	00555555 	.word	0x00555555

0000d45c <ll_test_tx>:
	u32_t start_us;
	u8_t *payload;
	u8_t *pdu;
	u32_t err;

	if ((type > 0x07) || !phy || (phy > 0x04)) {
    d45c:	2a07      	cmp	r2, #7
{
    d45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d462:	460c      	mov	r4, r1
    d464:	4690      	mov	r8, r2
	if ((type > 0x07) || !phy || (phy > 0x04)) {
    d466:	d851      	bhi.n	d50c <ll_test_tx+0xb0>
    d468:	1e5a      	subs	r2, r3, #1
    d46a:	2a03      	cmp	r2, #3
    d46c:	d84e      	bhi.n	d50c <ll_test_tx+0xb0>
	if (started) {
    d46e:	4e28      	ldr	r6, [pc, #160]	; (d510 <ll_test_tx+0xb4>)
    d470:	7832      	ldrb	r2, [r6, #0]
    d472:	2a00      	cmp	r2, #0
    d474:	d14a      	bne.n	d50c <ll_test_tx+0xb0>
    d476:	4a27      	ldr	r2, [pc, #156]	; (d514 <ll_test_tx+0xb8>)
    d478:	4619      	mov	r1, r3
    d47a:	f7ff ffa5 	bl	d3c8 <init.part.1>
		return 1;
	}

	err = init(chan, phy, isr_tx);
	if (err) {
    d47e:	4605      	mov	r5, r0
    d480:	bb50      	cbnz	r0, d4d8 <ll_test_tx+0x7c>
		return err;
	}

	tx_req++;
    d482:	4a25      	ldr	r2, [pc, #148]	; (d518 <ll_test_tx+0xbc>)
    d484:	7813      	ldrb	r3, [r2, #0]
    d486:	3301      	adds	r3, #1
    d488:	7013      	strb	r3, [r2, #0]

	pdu = radio_pkt_scratch_get();
    d48a:	f001 fa43 	bl	e914 <radio_pkt_scratch_get>
	payload = &pdu[2];

	switch (type) {
    d48e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
	pdu = radio_pkt_scratch_get();
    d492:	4607      	mov	r7, r0
	payload = &pdu[2];
    d494:	3002      	adds	r0, #2
	switch (type) {
    d496:	2b06      	cmp	r3, #6
    d498:	d805      	bhi.n	d4a6 <ll_test_tx+0x4a>
    d49a:	e8df f003 	tbb	[pc, r3]
    d49e:	2520      	.short	0x2520
    d4a0:	312e2b28 	.word	0x312e2b28
    d4a4:	34          	.byte	0x34
    d4a5:	00          	.byte	0x00
	case 0x00:
		memcpy(payload, prbs9, len);
    d4a6:	491d      	ldr	r1, [pc, #116]	; (d51c <ll_test_tx+0xc0>)
    d4a8:	4622      	mov	r2, r4
	case 0x02:
		memset(payload, 0x55, len);
		break;

	case 0x03:
		memcpy(payload, prbs15, len);
    d4aa:	f7f3 f8a5 	bl	5f8 <memcpy>
	}

	pdu[0] = type;
	pdu[1] = len;

	radio_pkt_tx_set(pdu);
    d4ae:	4638      	mov	r0, r7
	pdu[0] = type;
    d4b0:	f887 8000 	strb.w	r8, [r7]
	pdu[1] = len;
    d4b4:	707c      	strb	r4, [r7, #1]
	radio_pkt_tx_set(pdu);
    d4b6:	f001 f9a9 	bl	e80c <radio_pkt_tx_set>
	radio_switch_complete_and_disable();
    d4ba:	f001 fa45 	bl	e948 <radio_switch_complete_and_disable>
	start_us = radio_tmr_start(1, cntr_cnt_get() + CNTR_MIN_DELTA, 0);
    d4be:	f000 ff43 	bl	e348 <cntr_cnt_get>
    d4c2:	2200      	movs	r2, #0
    d4c4:	1cc1      	adds	r1, r0, #3
    d4c6:	2001      	movs	r0, #1
    d4c8:	f001 fad2 	bl	ea70 <radio_tmr_start>
	radio_tmr_aa_capture();
    d4cc:	f001 fb62 	bl	eb94 <radio_tmr_aa_capture>
	radio_tmr_end_capture();
    d4d0:	f001 fb94 	bl	ebfc <radio_tmr_end_capture>
				 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#else /* !CONFIG_BT_CTLR_GPIO_PA_PIN */
	ARG_UNUSED(start_us);
#endif /* !CONFIG_BT_CTLR_GPIO_PA_PIN */

	started = true;
    d4d4:	2301      	movs	r3, #1
    d4d6:	7033      	strb	r3, [r6, #0]

	return 0;
}
    d4d8:	4628      	mov	r0, r5
    d4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(payload, 0x0f, len);
    d4de:	4622      	mov	r2, r4
    d4e0:	210f      	movs	r1, #15
		memset(payload, 0xaa, len);
    d4e2:	f7f3 f8b5 	bl	650 <memset>
		break;
    d4e6:	e7e2      	b.n	d4ae <ll_test_tx+0x52>
		memset(payload, 0x55, len);
    d4e8:	4622      	mov	r2, r4
    d4ea:	2155      	movs	r1, #85	; 0x55
    d4ec:	e7f9      	b.n	d4e2 <ll_test_tx+0x86>
		memcpy(payload, prbs15, len);
    d4ee:	4622      	mov	r2, r4
    d4f0:	490b      	ldr	r1, [pc, #44]	; (d520 <ll_test_tx+0xc4>)
    d4f2:	e7da      	b.n	d4aa <ll_test_tx+0x4e>
		memset(payload, 0xff, len);
    d4f4:	4622      	mov	r2, r4
    d4f6:	21ff      	movs	r1, #255	; 0xff
    d4f8:	e7f3      	b.n	d4e2 <ll_test_tx+0x86>
		memset(payload, 0x00, len);
    d4fa:	4622      	mov	r2, r4
    d4fc:	2100      	movs	r1, #0
    d4fe:	e7f0      	b.n	d4e2 <ll_test_tx+0x86>
		memset(payload, 0xf0, len);
    d500:	4622      	mov	r2, r4
    d502:	21f0      	movs	r1, #240	; 0xf0
    d504:	e7ed      	b.n	d4e2 <ll_test_tx+0x86>
		memset(payload, 0xaa, len);
    d506:	4622      	mov	r2, r4
    d508:	21aa      	movs	r1, #170	; 0xaa
    d50a:	e7ea      	b.n	d4e2 <ll_test_tx+0x86>
		return 1;
    d50c:	2501      	movs	r5, #1
    d50e:	e7e3      	b.n	d4d8 <ll_test_tx+0x7c>
    d510:	2000336a 	.word	0x2000336a
    d514:	0000d305 	.word	0x0000d305
    d518:	20003371 	.word	0x20003371
    d51c:	00010b27 	.word	0x00010b27
    d520:	00010a28 	.word	0x00010a28

0000d524 <ll_test_rx>:

u32_t ll_test_rx(u8_t chan, u8_t phy, u8_t mod_idx)
{
    d524:	b538      	push	{r3, r4, r5, lr}
	u32_t err;

	if (!phy || (phy > 0x03)) {
    d526:	1e4b      	subs	r3, r1, #1
    d528:	2b02      	cmp	r3, #2
    d52a:	d81a      	bhi.n	d562 <ll_test_rx+0x3e>
	if (started) {
    d52c:	4d0e      	ldr	r5, [pc, #56]	; (d568 <ll_test_rx+0x44>)
    d52e:	782b      	ldrb	r3, [r5, #0]
    d530:	b9bb      	cbnz	r3, d562 <ll_test_rx+0x3e>
    d532:	4a0e      	ldr	r2, [pc, #56]	; (d56c <ll_test_rx+0x48>)
    d534:	f7ff ff48 	bl	d3c8 <init.part.1>
		return 1;
	}

	err = init(chan, phy, isr_rx);
	if (err) {
    d538:	4604      	mov	r4, r0
    d53a:	b980      	cbnz	r0, d55e <ll_test_rx+0x3a>
		return err;
	}

	radio_pkt_rx_set(radio_pkt_scratch_get());
    d53c:	f001 f9ea 	bl	e914 <radio_pkt_scratch_get>
    d540:	f001 f95e 	bl	e800 <radio_pkt_rx_set>
	radio_switch_complete_and_rx(test_phy);
    d544:	4b0a      	ldr	r3, [pc, #40]	; (d570 <ll_test_rx+0x4c>)
    d546:	7818      	ldrb	r0, [r3, #0]
    d548:	f001 f9e8 	bl	e91c <radio_switch_complete_and_rx>
	radio_tmr_start(0, cntr_cnt_get() + CNTR_MIN_DELTA, 0);
    d54c:	f000 fefc 	bl	e348 <cntr_cnt_get>
    d550:	4622      	mov	r2, r4
    d552:	1cc1      	adds	r1, r0, #3
    d554:	4620      	mov	r0, r4
    d556:	f001 fa8b 	bl	ea70 <radio_tmr_start>

#if defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_lna_on();
#endif /* !CONFIG_BT_CTLR_GPIO_LNA_PIN */

	started = true;
    d55a:	2301      	movs	r3, #1
    d55c:	702b      	strb	r3, [r5, #0]

	return 0;
}
    d55e:	4620      	mov	r0, r4
    d560:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
    d562:	2401      	movs	r4, #1
    d564:	e7fb      	b.n	d55e <ll_test_rx+0x3a>
    d566:	bf00      	nop
    d568:	2000336a 	.word	0x2000336a
    d56c:	0000d38d 	.word	0x0000d38d
    d570:	2000336e 	.word	0x2000336e

0000d574 <ll_test_end>:

u32_t ll_test_end(u16_t *num_rx)
{
    d574:	b510      	push	{r4, lr}
	struct device *hf_clock;
	u8_t ack;

	if (!started) {
    d576:	4c15      	ldr	r4, [pc, #84]	; (d5cc <ll_test_end+0x58>)
    d578:	7823      	ldrb	r3, [r4, #0]
    d57a:	b323      	cbz	r3, d5c6 <ll_test_end+0x52>
		return 1;
	}

	/* Return packets Rx-ed/Completed */
	*num_rx = test_num_rx;
    d57c:	4b14      	ldr	r3, [pc, #80]	; (d5d0 <ll_test_end+0x5c>)
	test_num_rx = 0;

	/* Disable Radio, if in Rx test */
	ack = tx_ack;
	if (tx_req == ack) {
    d57e:	4915      	ldr	r1, [pc, #84]	; (d5d4 <ll_test_end+0x60>)
	*num_rx = test_num_rx;
    d580:	881a      	ldrh	r2, [r3, #0]
    d582:	8002      	strh	r2, [r0, #0]
	test_num_rx = 0;
    d584:	2200      	movs	r2, #0
    d586:	801a      	strh	r2, [r3, #0]
	ack = tx_ack;
    d588:	4a13      	ldr	r2, [pc, #76]	; (d5d8 <ll_test_end+0x64>)
	if (tx_req == ack) {
    d58a:	7808      	ldrb	r0, [r1, #0]
	ack = tx_ack;
    d58c:	7813      	ldrb	r3, [r2, #0]
    d58e:	b2db      	uxtb	r3, r3
	if (tx_req == ack) {
    d590:	4298      	cmp	r0, r3
    d592:	d10e      	bne.n	d5b2 <ll_test_end+0x3e>
		radio_disable();
    d594:	f001 f968 	bl	e868 <radio_disable>
			cpu_sleep();
		}
	}

	/* Stop packet timer */
	radio_tmr_stop();
    d598:	f001 fad2 	bl	eb40 <radio_tmr_stop>

	/* Release resources acquired for Radio */
	hf_clock = radio_hf_clock_get();
    d59c:	f7fd ffc4 	bl	b528 <radio_hf_clock_get>
	return api->off(dev, sys);
    d5a0:	6843      	ldr	r3, [r0, #4]
    d5a2:	2100      	movs	r1, #0
    d5a4:	685b      	ldr	r3, [r3, #4]
    d5a6:	4798      	blx	r3
	clock_control_off(hf_clock, NULL);

	/* Stop coarse timer */
	cntr_stop();
    d5a8:	f000 feb4 	bl	e314 <cntr_stop>

#if defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_lna_off();
#endif /* !CONFIG_BT_CTLR_GPIO_LNA_PIN */

	started = false;
    d5ac:	2000      	movs	r0, #0
    d5ae:	7020      	strb	r0, [r4, #0]

	return 0;
    d5b0:	bd10      	pop	{r4, pc}
		tx_req = ack + 2;
    d5b2:	3302      	adds	r3, #2
    d5b4:	b2db      	uxtb	r3, r3
    d5b6:	700b      	strb	r3, [r1, #0]
		while (tx_req != tx_ack) {
    d5b8:	7811      	ldrb	r1, [r2, #0]
    d5ba:	428b      	cmp	r3, r1
    d5bc:	d0ec      	beq.n	d598 <ll_test_end+0x24>
	__WFE();
    d5be:	bf20      	wfe
	__SEV();
    d5c0:	bf40      	sev
	__WFE();
    d5c2:	bf20      	wfe
    d5c4:	e7f8      	b.n	d5b8 <ll_test_end+0x44>
		return 1;
    d5c6:	2001      	movs	r0, #1
}
    d5c8:	bd10      	pop	{r4, pc}
    d5ca:	bf00      	nop
    d5cc:	2000336a 	.word	0x2000336a
    d5d0:	2000336c 	.word	0x2000336c
    d5d4:	20003371 	.word	0x20003371
    d5d8:	20003370 	.word	0x20003370

0000d5dc <wl_find>:
		wl[i].taken = 0;
	}
}

static u8_t wl_find(u8_t addr_type, u8_t *addr, u8_t *free)
{
    d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5e0:	4688      	mov	r8, r1
	int i;

	if (free) {
    d5e2:	4615      	mov	r5, r2
    d5e4:	b10a      	cbz	r2, d5ea <wl_find+0xe>
		*free = FILTER_IDX_NONE;
    d5e6:	23ff      	movs	r3, #255	; 0xff
    d5e8:	7013      	strb	r3, [r2, #0]
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    d5ea:	4e14      	ldr	r6, [pc, #80]	; (d63c <wl_find+0x60>)
{
    d5ec:	2400      	movs	r4, #0
		if (LIST_MATCH(wl, i, addr_type, addr)) {
    d5ee:	f000 0701 	and.w	r7, r0, #1
    d5f2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    d5f6:	07da      	lsls	r2, r3, #31
    d5f8:	d51d      	bpl.n	d636 <wl_find+0x5a>
    d5fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
    d5fe:	42bb      	cmp	r3, r7
    d600:	d113      	bne.n	d62a <wl_find+0x4e>
    d602:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
    d606:	2206      	movs	r2, #6
    d608:	4641      	mov	r1, r8
    d60a:	3002      	adds	r0, #2
    d60c:	f7f2 ffdf 	bl	5ce <memcmp>
    d610:	b910      	cbnz	r0, d618 <wl_find+0x3c>
			return i;
    d612:	b2e0      	uxtb	r0, r4
    d614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    d618:	b13d      	cbz	r5, d62a <wl_find+0x4e>
    d61a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
    d61e:	07db      	lsls	r3, r3, #31
    d620:	d403      	bmi.n	d62a <wl_find+0x4e>
    d622:	782b      	ldrb	r3, [r5, #0]
    d624:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    d626:	bf08      	it	eq
    d628:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
    d62a:	3401      	adds	r4, #1
    d62c:	2c08      	cmp	r4, #8
    d62e:	d1e0      	bne.n	d5f2 <wl_find+0x16>
		}
	}

	return FILTER_IDX_NONE;
    d630:	20ff      	movs	r0, #255	; 0xff
    d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
    d636:	2d00      	cmp	r5, #0
    d638:	d1f3      	bne.n	d622 <wl_find+0x46>
    d63a:	e7f6      	b.n	d62a <wl_find+0x4e>
    d63c:	2000359f 	.word	0x2000359f

0000d640 <filter_rl_update>:
		}
	}
}

static void filter_rl_update(void)
{
    d640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	filter->enable_bitmask = 0;
    d644:	4d12      	ldr	r5, [pc, #72]	; (d690 <filter_rl_update+0x50>)

	/* No whitelist: populate filter from rl peers */
	filter_clear(&rl_filter);

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if (rl[i].taken) {
    d646:	4e13      	ldr	r6, [pc, #76]	; (d694 <filter_rl_update+0x54>)
	filter->enable_bitmask = 0;
    d648:	2400      	movs	r4, #0
    d64a:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
    d64c:	706c      	strb	r4, [r5, #1]
		if (rl[i].taken) {
    d64e:	2728      	movs	r7, #40	; 0x28
	filter->enable_bitmask |= BIT(index);
    d650:	f04f 0801 	mov.w	r8, #1
		if (rl[i].taken) {
    d654:	fb07 f104 	mul.w	r1, r7, r4
    d658:	5c73      	ldrb	r3, [r6, r1]
    d65a:	07da      	lsls	r2, r3, #31
    d65c:	d512      	bpl.n	d684 <filter_rl_update+0x44>
	filter->enable_bitmask |= BIT(index);
    d65e:	7828      	ldrb	r0, [r5, #0]
    d660:	fa08 f204 	lsl.w	r2, r8, r4
    d664:	4302      	orrs	r2, r0
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    d666:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
    d66a:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d66c:	786a      	ldrb	r2, [r5, #1]
    d66e:	40a3      	lsls	r3, r4
    d670:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d672:	2206      	movs	r2, #6
    d674:	3101      	adds	r1, #1
    d676:	fb02 5004 	mla	r0, r2, r4, r5
    d67a:	4431      	add	r1, r6
    d67c:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d67e:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d680:	f7f2 ffba 	bl	5f8 <memcpy>
    d684:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    d686:	2c08      	cmp	r4, #8
    d688:	d1e4      	bne.n	d654 <filter_rl_update+0x14>
				      rl[i].id_addr.val);
		}
	}
}
    d68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d68e:	bf00      	nop
    d690:	2000356d 	.word	0x2000356d
    d694:	2000342c 	.word	0x2000342c

0000d698 <rl_access_check.constprop.1>:
	}

	peer_irk_count = 0;
}

static int rl_access_check(bool check_ar)
    d698:	b508      	push	{r3, lr}
		if (!rl_enable) {
			return -1;
		}
	}

	return (ll_adv_is_enabled() || ll_scan_is_enabled()) ? 0 : 1;
    d69a:	f7fd ffa7 	bl	b5ec <ll_adv_is_enabled>
    d69e:	b928      	cbnz	r0, d6ac <rl_access_check.constprop.1+0x14>
    d6a0:	f7fd ffba 	bl	b618 <ll_scan_is_enabled>
    d6a4:	fab0 f080 	clz	r0, r0
    d6a8:	0940      	lsrs	r0, r0, #5
    d6aa:	bd08      	pop	{r3, pc}
    d6ac:	2000      	movs	r0, #0
}
    d6ae:	bd08      	pop	{r3, pc}

0000d6b0 <filter_wl_update>:
{
    d6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d6b4:	4e1b      	ldr	r6, [pc, #108]	; (d724 <filter_wl_update+0x74>)
	filter->enable_bitmask = 0;
    d6b6:	4d1c      	ldr	r5, [pc, #112]	; (d728 <filter_wl_update+0x78>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    d6b8:	f8df 9074 	ldr.w	r9, [pc, #116]	; d730 <filter_wl_update+0x80>
	filter->enable_bitmask = 0;
    d6bc:	2400      	movs	r4, #0
		if (!wl[i].taken) {
    d6be:	1eb7      	subs	r7, r6, #2
	filter->enable_bitmask = 0;
    d6c0:	702c      	strb	r4, [r5, #0]
	filter->addr_type_bitmask = 0;
    d6c2:	706c      	strb	r4, [r5, #1]
    d6c4:	46b8      	mov	r8, r7
		if (!wl[i].taken) {
    d6c6:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
    d6ca:	07d9      	lsls	r1, r3, #31
    d6cc:	d523      	bpl.n	d716 <filter_wl_update+0x66>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    d6ce:	f899 3000 	ldrb.w	r3, [r9]
    d6d2:	b15b      	cbz	r3, d6ec <filter_wl_update+0x3c>
		j = wl[i].rl_idx;
    d6d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    d6d8:	2a07      	cmp	r2, #7
    d6da:	d807      	bhi.n	d6ec <filter_wl_update+0x3c>
    d6dc:	2328      	movs	r3, #40	; 0x28
    d6de:	4353      	muls	r3, r2
    d6e0:	4a12      	ldr	r2, [pc, #72]	; (d72c <filter_wl_update+0x7c>)
    d6e2:	5cd3      	ldrb	r3, [r2, r3]
    d6e4:	075a      	lsls	r2, r3, #29
    d6e6:	d501      	bpl.n	d6ec <filter_wl_update+0x3c>
    d6e8:	06db      	lsls	r3, r3, #27
    d6ea:	d514      	bpl.n	d716 <filter_wl_update+0x66>
	filter->enable_bitmask |= BIT(index);
    d6ec:	2201      	movs	r2, #1
    d6ee:	fa02 f104 	lsl.w	r1, r2, r4
    d6f2:	782a      	ldrb	r2, [r5, #0]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    d6f4:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
    d6f8:	430a      	orrs	r2, r1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
    d6fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
    d6fe:	702a      	strb	r2, [r5, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d700:	786a      	ldrb	r2, [r5, #1]
    d702:	40a3      	lsls	r3, r4
    d704:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d706:	2206      	movs	r2, #6
    d708:	fb02 5004 	mla	r0, r2, r4, r5
    d70c:	4631      	mov	r1, r6
    d70e:	3002      	adds	r0, #2
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    d710:	706b      	strb	r3, [r5, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    d712:	f7f2 ff71 	bl	5f8 <memcpy>
    d716:	3401      	adds	r4, #1
	for (i = 0; i < WL_SIZE; i++) {
    d718:	2c08      	cmp	r4, #8
    d71a:	f106 0608 	add.w	r6, r6, #8
    d71e:	d1d2      	bne.n	d6c6 <filter_wl_update+0x16>
}
    d720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d724:	200035a1 	.word	0x200035a1
    d728:	200035df 	.word	0x200035df
    d72c:	2000342c 	.word	0x2000342c
    d730:	2000356c 	.word	0x2000356c

0000d734 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
    d734:	2807      	cmp	r0, #7
    d736:	d80c      	bhi.n	d752 <ctrl_lrpa_get+0x1e>
    d738:	2328      	movs	r3, #40	; 0x28
    d73a:	4358      	muls	r0, r3
    d73c:	4a06      	ldr	r2, [pc, #24]	; (d758 <ctrl_lrpa_get+0x24>)
    d73e:	5c13      	ldrb	r3, [r2, r0]
    d740:	1811      	adds	r1, r2, r0
    d742:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    d746:	b128      	cbz	r0, d754 <ctrl_lrpa_get+0x20>
    d748:	f3c3 0040 	ubfx	r0, r3, #1, #1
    d74c:	b110      	cbz	r0, d754 <ctrl_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
    d74e:	6a48      	ldr	r0, [r1, #36]	; 0x24
    d750:	4770      	bx	lr
		return NULL;
    d752:	2000      	movs	r0, #0
}
    d754:	4770      	bx	lr
    d756:	bf00      	nop
    d758:	2000342c 	.word	0x2000342c

0000d75c <ctrl_irks_get>:
	*count = peer_irk_count;
    d75c:	4b02      	ldr	r3, [pc, #8]	; (d768 <ctrl_irks_get+0xc>)
    d75e:	781b      	ldrb	r3, [r3, #0]
    d760:	7003      	strb	r3, [r0, #0]
}
    d762:	4802      	ldr	r0, [pc, #8]	; (d76c <ctrl_irks_get+0x10>)
    d764:	4770      	bx	lr
    d766:	bf00      	nop
    d768:	200033a2 	.word	0x200033a2
    d76c:	200033ab 	.word	0x200033ab

0000d770 <ctrl_rl_idx>:
{
    d770:	b538      	push	{r3, r4, r5, lr}
    d772:	460c      	mov	r4, r1
	if (whitelist) {
    d774:	b198      	cbz	r0, d79e <ctrl_rl_idx+0x2e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
    d776:	2907      	cmp	r1, #7
    d778:	d903      	bls.n	d782 <ctrl_rl_idx+0x12>
    d77a:	21f2      	movs	r1, #242	; 0xf2
    d77c:	4810      	ldr	r0, [pc, #64]	; (d7c0 <ctrl_rl_idx+0x50>)
    d77e:	f7f3 f897 	bl	8b0 <bt_ctlr_assert_handle>
		LL_ASSERT(wl[devmatch_id].taken);
    d782:	4d10      	ldr	r5, [pc, #64]	; (d7c4 <ctrl_rl_idx+0x54>)
    d784:	f815 2034 	ldrb.w	r2, [r5, r4, lsl #3]
    d788:	07d2      	lsls	r2, r2, #31
    d78a:	d403      	bmi.n	d794 <ctrl_rl_idx+0x24>
    d78c:	21f3      	movs	r1, #243	; 0xf3
    d78e:	480c      	ldr	r0, [pc, #48]	; (d7c0 <ctrl_rl_idx+0x50>)
    d790:	f7f3 f88e 	bl	8b0 <bt_ctlr_assert_handle>
		i = wl[devmatch_id].rl_idx;
    d794:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    d798:	7864      	ldrb	r4, [r4, #1]
}
    d79a:	4620      	mov	r0, r4
    d79c:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    d79e:	2907      	cmp	r1, #7
    d7a0:	d903      	bls.n	d7aa <ctrl_rl_idx+0x3a>
    d7a2:	21f6      	movs	r1, #246	; 0xf6
    d7a4:	4806      	ldr	r0, [pc, #24]	; (d7c0 <ctrl_rl_idx+0x50>)
    d7a6:	f7f3 f883 	bl	8b0 <bt_ctlr_assert_handle>
		LL_ASSERT(rl[i].taken);
    d7aa:	2328      	movs	r3, #40	; 0x28
    d7ac:	4363      	muls	r3, r4
    d7ae:	4a06      	ldr	r2, [pc, #24]	; (d7c8 <ctrl_rl_idx+0x58>)
    d7b0:	5cd3      	ldrb	r3, [r2, r3]
    d7b2:	07db      	lsls	r3, r3, #31
    d7b4:	d4f1      	bmi.n	d79a <ctrl_rl_idx+0x2a>
    d7b6:	21f8      	movs	r1, #248	; 0xf8
    d7b8:	4801      	ldr	r0, [pc, #4]	; (d7c0 <ctrl_rl_idx+0x50>)
    d7ba:	f7f3 f879 	bl	8b0 <bt_ctlr_assert_handle>
    d7be:	e7ec      	b.n	d79a <ctrl_rl_idx+0x2a>
    d7c0:	00010c2c 	.word	0x00010c2c
    d7c4:	2000359f 	.word	0x2000359f
    d7c8:	2000342c 	.word	0x2000342c

0000d7cc <ctrl_rl_irk_idx>:
{
    d7cc:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
    d7ce:	4b10      	ldr	r3, [pc, #64]	; (d810 <ctrl_rl_irk_idx+0x44>)
    d7d0:	781b      	ldrb	r3, [r3, #0]
    d7d2:	4283      	cmp	r3, r0
{
    d7d4:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
    d7d6:	d804      	bhi.n	d7e2 <ctrl_rl_irk_idx+0x16>
    d7d8:	f44f 7181 	mov.w	r1, #258	; 0x102
    d7dc:	480d      	ldr	r0, [pc, #52]	; (d814 <ctrl_rl_irk_idx+0x48>)
    d7de:	f7f3 f867 	bl	8b0 <bt_ctlr_assert_handle>
	i = peer_irk_rl_ids[irkmatch_id];
    d7e2:	4b0d      	ldr	r3, [pc, #52]	; (d818 <ctrl_rl_irk_idx+0x4c>)
    d7e4:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    d7e6:	2c07      	cmp	r4, #7
    d7e8:	d904      	bls.n	d7f4 <ctrl_rl_irk_idx+0x28>
    d7ea:	f44f 7182 	mov.w	r1, #260	; 0x104
    d7ee:	4809      	ldr	r0, [pc, #36]	; (d814 <ctrl_rl_irk_idx+0x48>)
    d7f0:	f7f3 f85e 	bl	8b0 <bt_ctlr_assert_handle>
	LL_ASSERT(rl[i].taken);
    d7f4:	2328      	movs	r3, #40	; 0x28
    d7f6:	4363      	muls	r3, r4
    d7f8:	4a08      	ldr	r2, [pc, #32]	; (d81c <ctrl_rl_irk_idx+0x50>)
    d7fa:	5cd3      	ldrb	r3, [r2, r3]
    d7fc:	07db      	lsls	r3, r3, #31
    d7fe:	d404      	bmi.n	d80a <ctrl_rl_irk_idx+0x3e>
    d800:	f240 1105 	movw	r1, #261	; 0x105
    d804:	4803      	ldr	r0, [pc, #12]	; (d814 <ctrl_rl_irk_idx+0x48>)
    d806:	f7f3 f853 	bl	8b0 <bt_ctlr_assert_handle>
}
    d80a:	4620      	mov	r0, r4
    d80c:	bd10      	pop	{r4, pc}
    d80e:	bf00      	nop
    d810:	200033a2 	.word	0x200033a2
    d814:	00010c2c 	.word	0x00010c2c
    d818:	200033a3 	.word	0x200033a3
    d81c:	2000342c 	.word	0x2000342c

0000d820 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
    d820:	2807      	cmp	r0, #7
{
    d822:	b538      	push	{r3, r4, r5, lr}
    d824:	4605      	mov	r5, r0
	if (rl_idx >= ARRAY_SIZE(rl)) {
    d826:	d810      	bhi.n	d84a <ctrl_irk_whitelisted+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
    d828:	2228      	movs	r2, #40	; 0x28
    d82a:	4c09      	ldr	r4, [pc, #36]	; (d850 <ctrl_irk_whitelisted+0x30>)
    d82c:	4342      	muls	r2, r0
    d82e:	5ca2      	ldrb	r2, [r4, r2]
    d830:	07d3      	lsls	r3, r2, #31
    d832:	d404      	bmi.n	d83e <ctrl_irk_whitelisted+0x1e>
    d834:	f44f 7188 	mov.w	r1, #272	; 0x110
    d838:	4806      	ldr	r0, [pc, #24]	; (d854 <ctrl_irk_whitelisted+0x34>)
    d83a:	f7f3 f839 	bl	8b0 <bt_ctlr_assert_handle>
	return rl[rl_idx].wl;
    d83e:	2028      	movs	r0, #40	; 0x28
    d840:	4368      	muls	r0, r5
    d842:	5c20      	ldrb	r0, [r4, r0]
    d844:	f3c0 1040 	ubfx	r0, r0, #5, #1
    d848:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    d84a:	2000      	movs	r0, #0
}
    d84c:	bd38      	pop	{r3, r4, r5, pc}
    d84e:	bf00      	nop
    d850:	2000342c 	.word	0x2000342c
    d854:	00010c2c 	.word	0x00010c2c

0000d858 <ctrl_filter_get>:
}
    d858:	4b03      	ldr	r3, [pc, #12]	; (d868 <ctrl_filter_get+0x10>)
    d85a:	4a04      	ldr	r2, [pc, #16]	; (d86c <ctrl_filter_get+0x14>)
    d85c:	2800      	cmp	r0, #0
    d85e:	bf14      	ite	ne
    d860:	4610      	movne	r0, r2
    d862:	4618      	moveq	r0, r3
    d864:	4770      	bx	lr
    d866:	bf00      	nop
    d868:	2000356d 	.word	0x2000356d
    d86c:	200035df 	.word	0x200035df

0000d870 <ll_wl_size_get>:
    d870:	2008      	movs	r0, #8
    d872:	4770      	bx	lr

0000d874 <ll_wl_clear>:
{
    d874:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d876:	f7fd fec1 	bl	b5fc <radio_adv_filter_pol_get>
    d87a:	4604      	mov	r4, r0
    d87c:	b110      	cbz	r0, d884 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d87e:	240c      	movs	r4, #12
}
    d880:	4620      	mov	r0, r4
    d882:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d884:	f7fd fede 	bl	b644 <radio_scan_filter_pol_get>
    d888:	07c3      	lsls	r3, r0, #31
    d88a:	d4f8      	bmi.n	d87e <ll_wl_clear+0xa>
		wl[i].taken = 0;
    d88c:	4a07      	ldr	r2, [pc, #28]	; (d8ac <ll_wl_clear+0x38>)
    d88e:	4623      	mov	r3, r4
    d890:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    d894:	f36f 0100 	bfc	r1, #0, #1
    d898:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    d89c:	3301      	adds	r3, #1
    d89e:	2b08      	cmp	r3, #8
    d8a0:	d1f6      	bne.n	d890 <ll_wl_clear+0x1c>
	wl_anon = 0;
    d8a2:	4b03      	ldr	r3, [pc, #12]	; (d8b0 <ll_wl_clear+0x3c>)
    d8a4:	2200      	movs	r2, #0
    d8a6:	701a      	strb	r2, [r3, #0]
	return 0;
    d8a8:	e7ea      	b.n	d880 <ll_wl_clear+0xc>
    d8aa:	bf00      	nop
    d8ac:	2000359f 	.word	0x2000359f
    d8b0:	20003c60 	.word	0x20003c60

0000d8b4 <ll_wl_remove>:
{
    d8b4:	b538      	push	{r3, r4, r5, lr}
    d8b6:	4605      	mov	r5, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d8b8:	f7fd fea0 	bl	b5fc <radio_adv_filter_pol_get>
    d8bc:	4604      	mov	r4, r0
    d8be:	b110      	cbz	r0, d8c6 <ll_wl_remove+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d8c0:	240c      	movs	r4, #12
}
    d8c2:	4620      	mov	r0, r4
    d8c4:	bd38      	pop	{r3, r4, r5, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d8c6:	f7fd febd 	bl	b644 <radio_scan_filter_pol_get>
    d8ca:	07c3      	lsls	r3, r0, #31
    d8cc:	d4f8      	bmi.n	d8c0 <ll_wl_remove+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    d8ce:	7828      	ldrb	r0, [r5, #0]
    d8d0:	28ff      	cmp	r0, #255	; 0xff
    d8d2:	d102      	bne.n	d8da <ll_wl_remove+0x26>
		wl_anon = 0;
    d8d4:	4b0f      	ldr	r3, [pc, #60]	; (d914 <ll_wl_remove+0x60>)
    d8d6:	701c      	strb	r4, [r3, #0]
		return 0;
    d8d8:	e7f3      	b.n	d8c2 <ll_wl_remove+0xe>
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
    d8da:	4622      	mov	r2, r4
    d8dc:	1c69      	adds	r1, r5, #1
    d8de:	f7ff fe7d 	bl	d5dc <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    d8e2:	2807      	cmp	r0, #7
    d8e4:	d813      	bhi.n	d90e <ll_wl_remove+0x5a>
		u8_t j = wl[i].rl_idx;
    d8e6:	4b0c      	ldr	r3, [pc, #48]	; (d918 <ll_wl_remove+0x64>)
    d8e8:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    d8ec:	7855      	ldrb	r5, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
    d8ee:	2d07      	cmp	r5, #7
    d8f0:	d806      	bhi.n	d900 <ll_wl_remove+0x4c>
			rl[j].wl = 0;
    d8f2:	2228      	movs	r2, #40	; 0x28
    d8f4:	4909      	ldr	r1, [pc, #36]	; (d91c <ll_wl_remove+0x68>)
    d8f6:	436a      	muls	r2, r5
    d8f8:	5c8d      	ldrb	r5, [r1, r2]
    d8fa:	f364 1545 	bfi	r5, r4, #5, #1
    d8fe:	548d      	strb	r5, [r1, r2]
		wl[i].taken = 0;
    d900:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
    d904:	f36f 0200 	bfc	r2, #0, #1
    d908:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
    d90c:	e7d9      	b.n	d8c2 <ll_wl_remove+0xe>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    d90e:	2402      	movs	r4, #2
    d910:	e7d7      	b.n	d8c2 <ll_wl_remove+0xe>
    d912:	bf00      	nop
    d914:	20003c60 	.word	0x20003c60
    d918:	2000359f 	.word	0x2000359f
    d91c:	2000342c 	.word	0x2000342c

0000d920 <ll_filters_adv_update>:
{
    d920:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
    d922:	b128      	cbz	r0, d930 <ll_filters_adv_update+0x10>
    d924:	f7fd fe8e 	bl	b644 <radio_scan_filter_pol_get>
    d928:	07c3      	lsls	r3, r0, #31
    d92a:	d401      	bmi.n	d930 <ll_filters_adv_update+0x10>
		filter_wl_update();
    d92c:	f7ff fec0 	bl	d6b0 <filter_wl_update>
	if (rl_enable && !ll_scan_is_enabled()) {
    d930:	4b05      	ldr	r3, [pc, #20]	; (d948 <ll_filters_adv_update+0x28>)
    d932:	781b      	ldrb	r3, [r3, #0]
    d934:	b133      	cbz	r3, d944 <ll_filters_adv_update+0x24>
    d936:	f7fd fe6f 	bl	b618 <ll_scan_is_enabled>
    d93a:	b918      	cbnz	r0, d944 <ll_filters_adv_update+0x24>
}
    d93c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
    d940:	f7ff be7e 	b.w	d640 <filter_rl_update>
    d944:	bd08      	pop	{r3, pc}
    d946:	bf00      	nop
    d948:	2000356c 	.word	0x2000356c

0000d94c <ll_filters_scan_update>:
{
    d94c:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
    d94e:	07c3      	lsls	r3, r0, #31
    d950:	d504      	bpl.n	d95c <ll_filters_scan_update+0x10>
    d952:	f7fd fe53 	bl	b5fc <radio_adv_filter_pol_get>
    d956:	b908      	cbnz	r0, d95c <ll_filters_scan_update+0x10>
		filter_wl_update();
    d958:	f7ff feaa 	bl	d6b0 <filter_wl_update>
	if (rl_enable && !ll_adv_is_enabled()) {
    d95c:	4b05      	ldr	r3, [pc, #20]	; (d974 <ll_filters_scan_update+0x28>)
    d95e:	781b      	ldrb	r3, [r3, #0]
    d960:	b133      	cbz	r3, d970 <ll_filters_scan_update+0x24>
    d962:	f7fd fe43 	bl	b5ec <ll_adv_is_enabled>
    d966:	b918      	cbnz	r0, d970 <ll_filters_scan_update+0x24>
}
    d968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		filter_rl_update();
    d96c:	f7ff be68 	b.w	d640 <filter_rl_update>
    d970:	bd08      	pop	{r3, pc}
    d972:	bf00      	nop
    d974:	2000356c 	.word	0x2000356c

0000d978 <ll_rl_find>:
{
    d978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d97c:	468a      	mov	sl, r1
	if (free) {
    d97e:	4614      	mov	r4, r2
    d980:	b10a      	cbz	r2, d986 <ll_rl_find+0xe>
		*free = FILTER_IDX_NONE;
    d982:	23ff      	movs	r3, #255	; 0xff
    d984:	7013      	strb	r3, [r2, #0]
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    d986:	f8df 8054 	ldr.w	r8, [pc, #84]	; d9dc <ll_rl_find+0x64>
{
    d98a:	2500      	movs	r5, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    d98c:	f000 0901 	and.w	r9, r0, #1
    d990:	2628      	movs	r6, #40	; 0x28
    d992:	436e      	muls	r6, r5
    d994:	b2ef      	uxtb	r7, r5
    d996:	f818 3006 	ldrb.w	r3, [r8, r6]
    d99a:	07da      	lsls	r2, r3, #31
    d99c:	d51a      	bpl.n	d9d4 <ll_rl_find+0x5c>
    d99e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    d9a2:	454b      	cmp	r3, r9
    d9a4:	d10f      	bne.n	d9c6 <ll_rl_find+0x4e>
    d9a6:	1c70      	adds	r0, r6, #1
    d9a8:	2206      	movs	r2, #6
    d9aa:	4651      	mov	r1, sl
    d9ac:	4440      	add	r0, r8
    d9ae:	f7f2 fe0e 	bl	5ce <memcmp>
    d9b2:	b160      	cbz	r0, d9ce <ll_rl_find+0x56>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    d9b4:	b13c      	cbz	r4, d9c6 <ll_rl_find+0x4e>
    d9b6:	f818 3006 	ldrb.w	r3, [r8, r6]
    d9ba:	07db      	lsls	r3, r3, #31
    d9bc:	d403      	bmi.n	d9c6 <ll_rl_find+0x4e>
    d9be:	7823      	ldrb	r3, [r4, #0]
    d9c0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
    d9c2:	bf08      	it	eq
    d9c4:	7027      	strbeq	r7, [r4, #0]
    d9c6:	3501      	adds	r5, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    d9c8:	2d08      	cmp	r5, #8
    d9ca:	d1e1      	bne.n	d990 <ll_rl_find+0x18>
	return FILTER_IDX_NONE;
    d9cc:	27ff      	movs	r7, #255	; 0xff
}
    d9ce:	4638      	mov	r0, r7
    d9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
    d9d4:	2c00      	cmp	r4, #0
    d9d6:	d1f2      	bne.n	d9be <ll_rl_find+0x46>
    d9d8:	e7f5      	b.n	d9c6 <ll_rl_find+0x4e>
    d9da:	bf00      	nop
    d9dc:	2000342c 	.word	0x2000342c

0000d9e0 <ll_wl_add>:
{
    d9e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d9e4:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d9e6:	f7fd fe09 	bl	b5fc <radio_adv_filter_pol_get>
    d9ea:	4605      	mov	r5, r0
    d9ec:	b120      	cbz	r0, d9f8 <ll_wl_add+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
    d9ee:	250c      	movs	r5, #12
}
    d9f0:	4628      	mov	r0, r5
    d9f2:	b002      	add	sp, #8
    d9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    d9f8:	f7fd fe24 	bl	b644 <radio_scan_filter_pol_get>
    d9fc:	07c3      	lsls	r3, r0, #31
    d9fe:	d4f6      	bmi.n	d9ee <ll_wl_add+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    da00:	7838      	ldrb	r0, [r7, #0]
    da02:	28ff      	cmp	r0, #255	; 0xff
    da04:	d103      	bne.n	da0e <ll_wl_add+0x2e>
		wl_anon = 1;
    da06:	4b1f      	ldr	r3, [pc, #124]	; (da84 <ll_wl_add+0xa4>)
    da08:	2201      	movs	r2, #1
    da0a:	701a      	strb	r2, [r3, #0]
		return 0;
    da0c:	e7f0      	b.n	d9f0 <ll_wl_add+0x10>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
    da0e:	f107 0801 	add.w	r8, r7, #1
    da12:	f10d 0207 	add.w	r2, sp, #7
    da16:	4641      	mov	r1, r8
    da18:	f7ff fde0 	bl	d5dc <wl_find>
	if (i < ARRAY_SIZE(wl)) {
    da1c:	2807      	cmp	r0, #7
    da1e:	d92d      	bls.n	da7c <ll_wl_add+0x9c>
	} else if (j >= ARRAY_SIZE(wl)) {
    da20:	f89d 6007 	ldrb.w	r6, [sp, #7]
    da24:	2e07      	cmp	r6, #7
    da26:	d82b      	bhi.n	da80 <ll_wl_add+0xa0>
	wl[i].id_addr_type = id_addr->type & 0x1;
    da28:	4c17      	ldr	r4, [pc, #92]	; (da88 <ll_wl_add+0xa8>)
    da2a:	783a      	ldrb	r2, [r7, #0]
    da2c:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
    da30:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
    da34:	f362 0341 	bfi	r3, r2, #1, #1
	memcpy(dst, src, sizeof(*dst));
    da38:	4641      	mov	r1, r8
    da3a:	2206      	movs	r2, #6
    da3c:	3002      	adds	r0, #2
    da3e:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    da42:	f7f2 fdd9 	bl	5f8 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    da46:	462a      	mov	r2, r5
    da48:	4641      	mov	r1, r8
    da4a:	7838      	ldrb	r0, [r7, #0]
    da4c:	f7ff ff94 	bl	d978 <ll_rl_find>
    da50:	00f3      	lsls	r3, r6, #3
	if (j < ARRAY_SIZE(rl)) {
    da52:	2807      	cmp	r0, #7
		wl[i].rl_idx = j;
    da54:	4423      	add	r3, r4
	if (j < ARRAY_SIZE(rl)) {
    da56:	d80e      	bhi.n	da76 <ll_wl_add+0x96>
		wl[i].rl_idx = j;
    da58:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
    da5a:	2328      	movs	r3, #40	; 0x28
    da5c:	4a0b      	ldr	r2, [pc, #44]	; (da8c <ll_wl_add+0xac>)
    da5e:	4358      	muls	r0, r3
    da60:	5c13      	ldrb	r3, [r2, r0]
    da62:	f043 0320 	orr.w	r3, r3, #32
    da66:	5413      	strb	r3, [r2, r0]
	wl[i].taken = 1;
    da68:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
    da6c:	f043 0301 	orr.w	r3, r3, #1
    da70:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    da74:	e7bc      	b.n	d9f0 <ll_wl_add+0x10>
		wl[i].rl_idx = FILTER_IDX_NONE;
    da76:	22ff      	movs	r2, #255	; 0xff
    da78:	705a      	strb	r2, [r3, #1]
    da7a:	e7f5      	b.n	da68 <ll_wl_add+0x88>
		return BT_HCI_ERR_INVALID_PARAM;
    da7c:	2512      	movs	r5, #18
    da7e:	e7b7      	b.n	d9f0 <ll_wl_add+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    da80:	2507      	movs	r5, #7
	return wl_add(addr);
    da82:	e7b5      	b.n	d9f0 <ll_wl_add+0x10>
    da84:	20003c60 	.word	0x20003c60
    da88:	2000359f 	.word	0x2000359f
    da8c:	2000342c 	.word	0x2000342c

0000da90 <ctrl_rl_idx_allowed>:
{
    da90:	b538      	push	{r3, r4, r5, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    da92:	4b0e      	ldr	r3, [pc, #56]	; (dacc <ctrl_rl_idx_allowed+0x3c>)
    da94:	781b      	ldrb	r3, [r3, #0]
{
    da96:	460d      	mov	r5, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    da98:	b1ab      	cbz	r3, dac6 <ctrl_rl_idx_allowed+0x36>
    da9a:	2907      	cmp	r1, #7
    da9c:	d813      	bhi.n	dac6 <ctrl_rl_idx_allowed+0x36>
    da9e:	b990      	cbnz	r0, dac6 <ctrl_rl_idx_allowed+0x36>
	LL_ASSERT(rl[rl_idx].taken);
    daa0:	2228      	movs	r2, #40	; 0x28
    daa2:	4c0b      	ldr	r4, [pc, #44]	; (dad0 <ctrl_rl_idx_allowed+0x40>)
    daa4:	434a      	muls	r2, r1
    daa6:	5ca2      	ldrb	r2, [r4, r2]
    daa8:	07d2      	lsls	r2, r2, #31
    daaa:	d404      	bmi.n	dab6 <ctrl_rl_idx_allowed+0x26>
    daac:	f44f 71df 	mov.w	r1, #446	; 0x1be
    dab0:	4808      	ldr	r0, [pc, #32]	; (dad4 <ctrl_rl_idx_allowed+0x44>)
    dab2:	f7f2 fefd 	bl	8b0 <bt_ctlr_assert_handle>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    dab6:	2128      	movs	r1, #40	; 0x28
    dab8:	4369      	muls	r1, r5
    daba:	5c60      	ldrb	r0, [r4, r1]
    dabc:	0743      	lsls	r3, r0, #29
    dabe:	d502      	bpl.n	dac6 <ctrl_rl_idx_allowed+0x36>
    dac0:	f3c0 1000 	ubfx	r0, r0, #4, #1
    dac4:	bd38      	pop	{r3, r4, r5, pc}
		return true;
    dac6:	2001      	movs	r0, #1
}
    dac8:	bd38      	pop	{r3, r4, r5, pc}
    daca:	bf00      	nop
    dacc:	2000356c 	.word	0x2000356c
    dad0:	2000342c 	.word	0x2000342c
    dad4:	00010c2c 	.word	0x00010c2c

0000dad8 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    dad8:	2807      	cmp	r0, #7
{
    dada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dadc:	4604      	mov	r4, r0
    dade:	460f      	mov	r7, r1
    dae0:	4616      	mov	r6, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    dae2:	d904      	bls.n	daee <ll_rl_id_addr_get+0x16>
    dae4:	f240 11c5 	movw	r1, #453	; 0x1c5
    dae8:	480e      	ldr	r0, [pc, #56]	; (db24 <ll_rl_id_addr_get+0x4c>)
    daea:	f7f2 fee1 	bl	8b0 <bt_ctlr_assert_handle>
	LL_ASSERT(rl[rl_idx].taken);
    daee:	2328      	movs	r3, #40	; 0x28
    daf0:	4d0d      	ldr	r5, [pc, #52]	; (db28 <ll_rl_id_addr_get+0x50>)
    daf2:	4363      	muls	r3, r4
    daf4:	5ceb      	ldrb	r3, [r5, r3]
    daf6:	07db      	lsls	r3, r3, #31
    daf8:	d404      	bmi.n	db04 <ll_rl_id_addr_get+0x2c>
    dafa:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
    dafe:	4809      	ldr	r0, [pc, #36]	; (db24 <ll_rl_id_addr_get+0x4c>)
    db00:	f7f2 fed6 	bl	8b0 <bt_ctlr_assert_handle>
	*id_addr_type = rl[rl_idx].id_addr_type;
    db04:	2128      	movs	r1, #40	; 0x28
    db06:	fb01 f304 	mul.w	r3, r1, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    db0a:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
    db0e:	5ceb      	ldrb	r3, [r5, r3]
    db10:	f3c3 1380 	ubfx	r3, r3, #6, #1
    db14:	703b      	strb	r3, [r7, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    db16:	4630      	mov	r0, r6
    db18:	2206      	movs	r2, #6
    db1a:	3101      	adds	r1, #1
}
    db1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
    db20:	f7f2 bd6a 	b.w	5f8 <memcpy>
    db24:	00010c2c 	.word	0x00010c2c
    db28:	2000342c 	.word	0x2000342c

0000db2c <ctrl_rl_addr_allowed>:
{
    db2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
    db30:	4b1a      	ldr	r3, [pc, #104]	; (db9c <ctrl_rl_addr_allowed+0x70>)
    db32:	781b      	ldrb	r3, [r3, #0]
    db34:	b37b      	cbz	r3, db96 <ctrl_rl_addr_allowed+0x6a>
    db36:	7813      	ldrb	r3, [r2, #0]
    db38:	2bff      	cmp	r3, #255	; 0xff
    db3a:	d12c      	bne.n	db96 <ctrl_rl_addr_allowed+0x6a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    db3c:	4e18      	ldr	r6, [pc, #96]	; (dba0 <ctrl_rl_addr_allowed+0x74>)
    db3e:	2400      	movs	r4, #0
    db40:	f04f 0828 	mov.w	r8, #40	; 0x28
    db44:	46b6      	mov	lr, r6
    db46:	fb08 f304 	mul.w	r3, r8, r4
    db4a:	fa5f fc84 	uxtb.w	ip, r4
    db4e:	5cf7      	ldrb	r7, [r6, r3]
    db50:	f017 0f01 	tst.w	r7, #1
    db54:	eb06 0503 	add.w	r5, r6, r3
    db58:	d01a      	beq.n	db90 <ctrl_rl_addr_allowed+0x64>
    db5a:	f3c7 1780 	ubfx	r7, r7, #6, #1
    db5e:	4287      	cmp	r7, r0
    db60:	d116      	bne.n	db90 <ctrl_rl_addr_allowed+0x64>
    db62:	3306      	adds	r3, #6
    db64:	1e4f      	subs	r7, r1, #1
    db66:	4433      	add	r3, r6
				if (addr[j] != id_addr[j]) {
    db68:	f815 af01 	ldrb.w	sl, [r5, #1]!
    db6c:	f817 9f01 	ldrb.w	r9, [r7, #1]!
    db70:	45ca      	cmp	sl, r9
    db72:	d10d      	bne.n	db90 <ctrl_rl_addr_allowed+0x64>
			for (j = 0; j < BDADDR_SIZE; j++) {
    db74:	429d      	cmp	r5, r3
    db76:	d1f7      	bne.n	db68 <ctrl_rl_addr_allowed+0x3c>
				return !rl[i].pirk || rl[i].dev;
    db78:	2328      	movs	r3, #40	; 0x28
    db7a:	435c      	muls	r4, r3
				*rl_idx = i;
    db7c:	f882 c000 	strb.w	ip, [r2]
				return !rl[i].pirk || rl[i].dev;
    db80:	f81e 0004 	ldrb.w	r0, [lr, r4]
    db84:	0743      	lsls	r3, r0, #29
    db86:	d506      	bpl.n	db96 <ctrl_rl_addr_allowed+0x6a>
    db88:	f3c0 1000 	ubfx	r0, r0, #4, #1
    db8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db90:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    db92:	2c08      	cmp	r4, #8
    db94:	d1d7      	bne.n	db46 <ctrl_rl_addr_allowed+0x1a>
    db96:	2001      	movs	r0, #1
}
    db98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db9c:	2000356c 	.word	0x2000356c
    dba0:	2000342c 	.word	0x2000342c

0000dba4 <ctrl_rl_addr_resolve>:
{
    dba4:	b470      	push	{r4, r5, r6}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
    dba6:	4c0d      	ldr	r4, [pc, #52]	; (dbdc <ctrl_rl_addr_resolve+0x38>)
    dba8:	7824      	ldrb	r4, [r4, #0]
    dbaa:	b1a4      	cbz	r4, dbd6 <ctrl_rl_addr_resolve+0x32>
    dbac:	2a07      	cmp	r2, #7
    dbae:	d812      	bhi.n	dbd6 <ctrl_rl_addr_resolve+0x32>
    dbb0:	2528      	movs	r5, #40	; 0x28
    dbb2:	4c0b      	ldr	r4, [pc, #44]	; (dbe0 <ctrl_rl_addr_resolve+0x3c>)
    dbb4:	fb05 f602 	mul.w	r6, r5, r2
    dbb8:	5da6      	ldrb	r6, [r4, r6]
    dbba:	0736      	lsls	r6, r6, #28
    dbbc:	d50b      	bpl.n	dbd6 <ctrl_rl_addr_resolve+0x32>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
    dbbe:	b150      	cbz	r0, dbd6 <ctrl_rl_addr_resolve+0x32>
    dbc0:	794b      	ldrb	r3, [r1, #5]
    dbc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    dbc6:	2b40      	cmp	r3, #64	; 0x40
    dbc8:	d105      	bne.n	dbd6 <ctrl_rl_addr_resolve+0x32>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    dbca:	fb05 4202 	mla	r2, r5, r2, r4
    dbce:	1dd0      	adds	r0, r2, #7
}
    dbd0:	bc70      	pop	{r4, r5, r6}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    dbd2:	f7f4 b822 	b.w	1c1a <bt_rpa_irk_matches>
}
    dbd6:	2000      	movs	r0, #0
    dbd8:	bc70      	pop	{r4, r5, r6}
    dbda:	4770      	bx	lr
    dbdc:	2000356c 	.word	0x2000356c
    dbe0:	2000342c 	.word	0x2000342c

0000dbe4 <ctrl_rl_enabled>:
	return rl_enable;
    dbe4:	4b02      	ldr	r3, [pc, #8]	; (dbf0 <ctrl_rl_enabled+0xc>)
    dbe6:	7818      	ldrb	r0, [r3, #0]
}
    dbe8:	3000      	adds	r0, #0
    dbea:	bf18      	it	ne
    dbec:	2001      	movne	r0, #1
    dbee:	4770      	bx	lr
    dbf0:	2000356c 	.word	0x2000356c

0000dbf4 <ll_rl_pdu_adv_update>:
{
    dbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbf8:	4605      	mov	r5, r0
    dbfa:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
    dbfc:	f101 0802 	add.w	r8, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
    dc00:	f7fe ffd6 	bl	cbb0 <ll_adv_set_get>
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
    dc04:	2d07      	cmp	r5, #7
	struct ll_adv_set *ll_adv = ll_adv_set_get();
    dc06:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
    dc08:	d833      	bhi.n	dc72 <ll_rl_pdu_adv_update+0x7e>
    dc0a:	2228      	movs	r2, #40	; 0x28
    dc0c:	4f25      	ldr	r7, [pc, #148]	; (dca4 <ll_rl_pdu_adv_update+0xb0>)
    dc0e:	436a      	muls	r2, r5
    dc10:	5cba      	ldrb	r2, [r7, r2]
    dc12:	0711      	lsls	r1, r2, #28
    dc14:	d52d      	bpl.n	dc72 <ll_rl_pdu_adv_update+0x7e>
		LL_ASSERT(rl[idx].rpas_ready);
    dc16:	0793      	lsls	r3, r2, #30
    dc18:	d404      	bmi.n	dc24 <ll_rl_pdu_adv_update+0x30>
    dc1a:	f240 2109 	movw	r1, #521	; 0x209
    dc1e:	4822      	ldr	r0, [pc, #136]	; (dca8 <ll_rl_pdu_adv_update+0xb4>)
    dc20:	f7f2 fe46 	bl	8b0 <bt_ctlr_assert_handle>
		pdu->tx_addr = 1;
    dc24:	7823      	ldrb	r3, [r4, #0]
    dc26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dc2a:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
    dc2c:	2328      	movs	r3, #40	; 0x28
    dc2e:	fb03 7305 	mla	r3, r3, r5, r7
    dc32:	2206      	movs	r2, #6
    dc34:	6a59      	ldr	r1, [r3, #36]	; 0x24
    dc36:	4640      	mov	r0, r8
    dc38:	f7f2 fcde 	bl	5f8 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    dc3c:	7823      	ldrb	r3, [r4, #0]
    dc3e:	f003 020f 	and.w	r2, r3, #15
    dc42:	2a01      	cmp	r2, #1
    dc44:	d12c      	bne.n	dca0 <ll_rl_pdu_adv_update+0xac>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
    dc46:	2d07      	cmp	r5, #7
    dc48:	f104 0008 	add.w	r0, r4, #8
    dc4c:	d81e      	bhi.n	dc8c <ll_rl_pdu_adv_update+0x98>
    dc4e:	2228      	movs	r2, #40	; 0x28
    dc50:	4914      	ldr	r1, [pc, #80]	; (dca4 <ll_rl_pdu_adv_update+0xb0>)
    dc52:	fb02 f705 	mul.w	r7, r2, r5
    dc56:	5dcf      	ldrb	r7, [r1, r7]
    dc58:	077f      	lsls	r7, r7, #29
    dc5a:	d517      	bpl.n	dc8c <ll_rl_pdu_adv_update+0x98>
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
    dc5c:	fb02 1105 	mla	r1, r2, r5, r1
			pdu->rx_addr = 1;
    dc60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    dc64:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
    dc66:	2206      	movs	r2, #6
    dc68:	311e      	adds	r1, #30
}
    dc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
    dc6e:	f7f2 bcc3 	b.w	5f8 <memcpy>
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
    dc72:	7830      	ldrb	r0, [r6, #0]
    dc74:	7823      	ldrb	r3, [r4, #0]
    dc76:	f3c0 1041 	ubfx	r0, r0, #5, #2
    dc7a:	f360 1386 	bfi	r3, r0, #6, #1
    dc7e:	7023      	strb	r3, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
    dc80:	4641      	mov	r1, r8
    dc82:	f000 0001 	and.w	r0, r0, #1
    dc86:	f7f5 f853 	bl	2d30 <ll_addr_get>
    dc8a:	e7d7      	b.n	dc3c <ll_rl_pdu_adv_update+0x48>
			pdu->rx_addr = ll_adv->id_addr_type;
    dc8c:	4631      	mov	r1, r6
    dc8e:	7822      	ldrb	r2, [r4, #0]
    dc90:	f811 3b02 	ldrb.w	r3, [r1], #2
    dc94:	09db      	lsrs	r3, r3, #7
    dc96:	f363 12c7 	bfi	r2, r3, #7, #1
    dc9a:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
    dc9c:	2206      	movs	r2, #6
    dc9e:	e7e4      	b.n	dc6a <ll_rl_pdu_adv_update+0x76>
    dca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dca4:	2000342c 	.word	0x2000342c
    dca8:	00010c2c 	.word	0x00010c2c

0000dcac <ll_rl_rpa_update>:

void ll_rl_rpa_update(bool timeout)
{
    dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcb0:	b087      	sub	sp, #28
    dcb2:	4680      	mov	r8, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
    dcb4:	f001 ff38 	bl	fb28 <_impl_k_uptime_get>
    dcb8:	e9cd 0100 	strd	r0, r1, [sp]
	u8_t i;
	int err;
	s64_t now = k_uptime_get();
	bool all = timeout || (rpa_last_ms == -1) ||
    dcbc:	f1b8 0f00 	cmp.w	r8, #0
    dcc0:	f040 80c5 	bne.w	de4e <ll_rl_rpa_update+0x1a2>
    dcc4:	4b63      	ldr	r3, [pc, #396]	; (de54 <ll_rl_rpa_update+0x1a8>)
    dcc6:	e9d3 0100 	ldrd	r0, r1, [r3]
    dcca:	1c4c      	adds	r4, r1, #1
    dccc:	bf08      	it	eq
    dcce:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    dcd2:	f000 80bc 	beq.w	de4e <ll_rl_rpa_update+0x1a2>
		   (now - rpa_last_ms >= rpa_timeout_ms);
    dcd6:	e9dd 3400 	ldrd	r3, r4, [sp]
    dcda:	1a1b      	subs	r3, r3, r0
    dcdc:	4618      	mov	r0, r3
    dcde:	4b5e      	ldr	r3, [pc, #376]	; (de58 <ll_rl_rpa_update+0x1ac>)
    dce0:	681a      	ldr	r2, [r3, #0]
    dce2:	eb64 0401 	sbc.w	r4, r4, r1
    dce6:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
    dce8:	4290      	cmp	r0, r2
    dcea:	eb74 0303 	sbcs.w	r3, r4, r3
    dcee:	bfac      	ite	ge
    dcf0:	2601      	movge	r6, #1
    dcf2:	2600      	movlt	r6, #0
    dcf4:	4d59      	ldr	r5, [pc, #356]	; (de5c <ll_rl_rpa_update+0x1b0>)
    dcf6:	f8df a170 	ldr.w	sl, [pc, #368]	; de68 <ll_rl_rpa_update+0x1bc>
	BT_DBG("");

	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    dcfa:	f1a5 0907 	sub.w	r9, r5, #7
	bool all = timeout || (rpa_last_ms == -1) ||
    dcfe:	2400      	movs	r4, #0
    dd00:	464f      	mov	r7, r9
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    dd02:	2328      	movs	r3, #40	; 0x28
    dd04:	4363      	muls	r3, r4
    dd06:	f819 3003 	ldrb.w	r3, [r9, r3]
    dd0a:	07da      	lsls	r2, r3, #31
    dd0c:	d541      	bpl.n	dd92 <ll_rl_rpa_update+0xe6>
    dd0e:	b90e      	cbnz	r6, dd14 <ll_rl_rpa_update+0x68>
    dd10:	0798      	lsls	r0, r3, #30
    dd12:	d43e      	bmi.n	dd92 <ll_rl_rpa_update+0xe6>

			if (rl[i].pirk) {
    dd14:	2328      	movs	r3, #40	; 0x28
    dd16:	4363      	muls	r3, r4
    dd18:	5cfb      	ldrb	r3, [r7, r3]
    dd1a:	0759      	lsls	r1, r3, #29
    dd1c:	d518      	bpl.n	dd50 <ll_rl_rpa_update+0xa4>
				u8_t irk[16];

				/* TODO: move this swap to the driver level */
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
    dd1e:	7c2a      	ldrb	r2, [r5, #16]
    dd20:	4b4f      	ldr	r3, [pc, #316]	; (de60 <ll_rl_rpa_update+0x1b4>)
    dd22:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    dd26:	f103 0210 	add.w	r2, r3, #16
    dd2a:	f10d 0107 	add.w	r1, sp, #7
		 "Source and destination buffers must not overlap");

	src += length - 1;

	for (; length > 0; length--) {
		*((u8_t *)dst++) = *((u8_t *)src--);
    dd2e:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    dd32:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; length > 0; length--) {
    dd36:	4293      	cmp	r3, r2
    dd38:	d1f9      	bne.n	dd2e <ll_rl_rpa_update+0x82>
						16);
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
    dd3a:	f105 0117 	add.w	r1, r5, #23
    dd3e:	a802      	add	r0, sp, #8
    dd40:	f7f3 ff7e 	bl	1c40 <bt_rpa_create>
				LL_ASSERT(!err);
    dd44:	b120      	cbz	r0, dd50 <ll_rl_rpa_update+0xa4>
    dd46:	f240 217b 	movw	r1, #635	; 0x27b
    dd4a:	4846      	ldr	r0, [pc, #280]	; (de64 <ll_rl_rpa_update+0x1b8>)
    dd4c:	f7f2 fdb0 	bl	8b0 <bt_ctlr_assert_handle>
			}

			if (rl[i].lirk) {
    dd50:	2328      	movs	r3, #40	; 0x28
    dd52:	4363      	muls	r3, r4
    dd54:	5cfb      	ldrb	r3, [r7, r3]
    dd56:	071a      	lsls	r2, r3, #28
    dd58:	d515      	bpl.n	dd86 <ll_rl_rpa_update+0xda>
				bt_addr_t rpa;

				err = bt_rpa_create(rl[i].local_irk, &rpa);
    dd5a:	a902      	add	r1, sp, #8
    dd5c:	4628      	mov	r0, r5
    dd5e:	f7f3 ff6f 	bl	1c40 <bt_rpa_create>
				LL_ASSERT(!err);
    dd62:	b120      	cbz	r0, dd6e <ll_rl_rpa_update+0xc2>
    dd64:	f240 2182 	movw	r1, #642	; 0x282
    dd68:	483e      	ldr	r0, [pc, #248]	; (de64 <ll_rl_rpa_update+0x1b8>)
    dd6a:	f7f2 fda1 	bl	8b0 <bt_ctlr_assert_handle>
    dd6e:	2206      	movs	r2, #6
				/* pointer read/write assumed to be atomic
				 * so that if ISR fires the local_rpa pointer
				 * will always point to a valid full RPA
				 */
				rl[i].local_rpa = &rpa;
    dd70:	ab02      	add	r3, sp, #8
    dd72:	fb02 ab04 	mla	fp, r2, r4, sl
    dd76:	f8c5 301d 	str.w	r3, [r5, #29]
    dd7a:	4619      	mov	r1, r3
    dd7c:	4658      	mov	r0, fp
    dd7e:	f7f2 fc3b 	bl	5f8 <memcpy>
				bt_addr_copy(&local_rpas[i], &rpa);
				rl[i].local_rpa = &local_rpas[i];
    dd82:	f8c5 b01d 	str.w	fp, [r5, #29]
			}

			rl[i].rpas_ready = 1;
    dd86:	2328      	movs	r3, #40	; 0x28
    dd88:	4363      	muls	r3, r4
    dd8a:	5cfa      	ldrb	r2, [r7, r3]
    dd8c:	f042 0202 	orr.w	r2, r2, #2
    dd90:	54fa      	strb	r2, [r7, r3]
    dd92:	3401      	adds	r4, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    dd94:	2c08      	cmp	r4, #8
    dd96:	f105 0528 	add.w	r5, r5, #40	; 0x28
    dd9a:	d1b2      	bne.n	dd02 <ll_rl_rpa_update+0x56>
		}
	}

	if (all) {
    dd9c:	b126      	cbz	r6, dda8 <ll_rl_rpa_update+0xfc>
		rpa_last_ms = now;
    dd9e:	e9dd 1200 	ldrd	r1, r2, [sp]
    dda2:	4b2c      	ldr	r3, [pc, #176]	; (de54 <ll_rl_rpa_update+0x1a8>)
    dda4:	e9c3 1200 	strd	r1, r2, [r3]
	}

	if (timeout) {
    dda8:	f1b8 0f00 	cmp.w	r8, #0
    ddac:	d04c      	beq.n	de48 <ll_rl_rpa_update+0x19c>
#if defined(CONFIG_BT_BROADCASTER)
		if (ll_adv_is_enabled()) {
    ddae:	f7fd fc1d 	bl	b5ec <ll_adv_is_enabled>
    ddb2:	2800      	cmp	r0, #0
    ddb4:	d048      	beq.n	de48 <ll_rl_rpa_update+0x19c>
	ll_adv = ll_adv_set_get();
    ddb6:	f7fe fefb 	bl	cbb0 <ll_adv_set_get>
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    ddba:	7803      	ldrb	r3, [r0, #0]
    ddbc:	065b      	lsls	r3, r3, #25
	ll_adv = ll_adv_set_get();
    ddbe:	4680      	mov	r8, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
    ddc0:	d542      	bpl.n	de48 <ll_rl_rpa_update+0x19c>
	radio_adv_data = radio_adv_data_get();
    ddc2:	f7fd fc07 	bl	b5d4 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ddc6:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
	if (radio_adv_data->first == radio_adv_data->last) {
    ddca:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ddce:	eb04 2104 	add.w	r1, r4, r4, lsl #8
	if (radio_adv_data->first == radio_adv_data->last) {
    ddd2:	42a3      	cmp	r3, r4
	radio_adv_data = radio_adv_data_get();
    ddd4:	4605      	mov	r5, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ddd6:	eb00 0701 	add.w	r7, r0, r1
	if (radio_adv_data->first == radio_adv_data->last) {
    ddda:	d104      	bne.n	dde6 <ll_rl_rpa_update+0x13a>
		last = radio_adv_data->last + 1;
    dddc:	3401      	adds	r4, #1
    ddde:	b2e4      	uxtb	r4, r4
			last = 0;
    dde0:	2c02      	cmp	r4, #2
    dde2:	bf08      	it	eq
    dde4:	2400      	moveq	r4, #0
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    dde6:	eb04 2304 	add.w	r3, r4, r4, lsl #8
	pdu->type = prev->type;
    ddea:	5c68      	ldrb	r0, [r5, r1]
    ddec:	5cea      	ldrb	r2, [r5, r3]
    ddee:	f360 0203 	bfi	r2, r0, #0, #4
	pdu->rfu = 0;
    ddf2:	f36f 1204 	bfc	r2, #4, #1
    ddf6:	54ea      	strb	r2, [r5, r3]
		pdu->chan_sel = prev->chan_sel;
    ddf8:	5c6a      	ldrb	r2, [r5, r1]
    ddfa:	5ce9      	ldrb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
    ddfc:	f898 0000 	ldrb.w	r0, [r8]
		pdu->chan_sel = prev->chan_sel;
    de00:	f3c2 1240 	ubfx	r2, r2, #5, #1
    de04:	f362 1145 	bfi	r1, r2, #5, #1
    de08:	54e9      	strb	r1, [r5, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
    de0a:	2200      	movs	r2, #0
    de0c:	f108 0102 	add.w	r1, r8, #2
    de10:	09c0      	lsrs	r0, r0, #7
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    de12:	18ee      	adds	r6, r5, r3
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
    de14:	f7ff fdb0 	bl	d978 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
    de18:	2807      	cmp	r0, #7
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
    de1a:	4680      	mov	r8, r0
	LL_ASSERT(idx < ARRAY_SIZE(rl));
    de1c:	d904      	bls.n	de28 <ll_rl_rpa_update+0x17c>
    de1e:	f240 2147 	movw	r1, #583	; 0x247
    de22:	4810      	ldr	r0, [pc, #64]	; (de64 <ll_rl_rpa_update+0x1b8>)
    de24:	f7f2 fd44 	bl	8b0 <bt_ctlr_assert_handle>
	ll_rl_pdu_adv_update(idx, pdu);
    de28:	4631      	mov	r1, r6
    de2a:	4640      	mov	r0, r8
    de2c:	f7ff fee2 	bl	dbf4 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
    de30:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
    de32:	f107 0108 	add.w	r1, r7, #8
    de36:	3a06      	subs	r2, #6
    de38:	f106 0008 	add.w	r0, r6, #8
    de3c:	f7f2 fbdc 	bl	5f8 <memcpy>
	pdu->len = prev->len;
    de40:	787b      	ldrb	r3, [r7, #1]
    de42:	7073      	strb	r3, [r6, #1]
	radio_adv_data->last = last;
    de44:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
			rpa_adv_refresh();
		}
#endif
	}
}
    de48:	b007      	add	sp, #28
    de4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool all = timeout || (rpa_last_ms == -1) ||
    de4e:	2601      	movs	r6, #1
    de50:	e750      	b.n	dcf4 <ll_rl_rpa_update+0x48>
    de52:	bf00      	nop
    de54:	20003c58 	.word	0x20003c58
    de58:	20003c8c 	.word	0x20003c8c
    de5c:	20003433 	.word	0x20003433
    de60:	200033ab 	.word	0x200033ab
    de64:	00010c2c 	.word	0x00010c2c
    de68:	20003372 	.word	0x20003372

0000de6c <rpa_timeout>:

static void rpa_timeout(struct k_work *work)
{
    de6c:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
    de6e:	2001      	movs	r0, #1
    de70:	f7ff ff1c 	bl	dcac <ll_rl_rpa_update>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    de74:	4b03      	ldr	r3, [pc, #12]	; (de84 <rpa_timeout+0x18>)
    de76:	4904      	ldr	r1, [pc, #16]	; (de88 <rpa_timeout+0x1c>)
    de78:	681a      	ldr	r2, [r3, #0]
    de7a:	4804      	ldr	r0, [pc, #16]	; (de8c <rpa_timeout+0x20>)
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
}
    de7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    de80:	f002 b960 	b.w	10144 <k_delayed_work_submit_to_queue>
    de84:	20003c8c 	.word	0x20003c8c
    de88:	20003c64 	.word	0x20003c64
    de8c:	20003ca0 	.word	0x20003ca0

0000de90 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
    de90:	4b07      	ldr	r3, [pc, #28]	; (deb0 <ll_adv_scan_state_cb+0x20>)
	if (!rl_enable) {
    de92:	781b      	ldrb	r3, [r3, #0]
	if (bm) {
    de94:	b130      	cbz	r0, dea4 <ll_adv_scan_state_cb+0x14>
	if (!rl_enable) {
    de96:	b14b      	cbz	r3, deac <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_submit(&rpa_work, rpa_timeout_ms);
    de98:	4b06      	ldr	r3, [pc, #24]	; (deb4 <ll_adv_scan_state_cb+0x24>)
    de9a:	4907      	ldr	r1, [pc, #28]	; (deb8 <ll_adv_scan_state_cb+0x28>)
    de9c:	681a      	ldr	r2, [r3, #0]
    de9e:	4807      	ldr	r0, [pc, #28]	; (debc <ll_adv_scan_state_cb+0x2c>)
    dea0:	f002 b950 	b.w	10144 <k_delayed_work_submit_to_queue>
	if (!rl_enable) {
    dea4:	b113      	cbz	r3, deac <ll_adv_scan_state_cb+0x1c>
	k_delayed_work_cancel(&rpa_work);
    dea6:	4804      	ldr	r0, [pc, #16]	; (deb8 <ll_adv_scan_state_cb+0x28>)
    dea8:	f002 b8f2 	b.w	10090 <k_delayed_work_cancel>
    deac:	4770      	bx	lr
    deae:	bf00      	nop
    deb0:	2000356c 	.word	0x2000356c
    deb4:	20003c8c 	.word	0x20003c8c
    deb8:	20003c64 	.word	0x20003c64
    debc:	20003ca0 	.word	0x20003ca0

0000dec0 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
    dec0:	2008      	movs	r0, #8
    dec2:	4770      	bx	lr

0000dec4 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
    dec4:	b510      	push	{r4, lr}
	if (!rl_access_check(false)) {
    dec6:	f7ff fbe7 	bl	d698 <rl_access_check.constprop.1>
    deca:	b178      	cbz	r0, deec <ll_rl_clear+0x28>
		rl[i].taken = 0;
    decc:	4908      	ldr	r1, [pc, #32]	; (def0 <ll_rl_clear+0x2c>)
    dece:	2300      	movs	r3, #0
    ded0:	2428      	movs	r4, #40	; 0x28
    ded2:	fb04 f203 	mul.w	r2, r4, r3
    ded6:	3301      	adds	r3, #1
    ded8:	5c88      	ldrb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    deda:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
    dedc:	f36f 0000 	bfc	r0, #0, #1
    dee0:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    dee2:	d1f6      	bne.n	ded2 <ll_rl_clear+0xe>
	peer_irk_count = 0;
    dee4:	4b03      	ldr	r3, [pc, #12]	; (def4 <ll_rl_clear+0x30>)
    dee6:	2000      	movs	r0, #0
    dee8:	7018      	strb	r0, [r3, #0]
    deea:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    deec:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
    deee:	bd10      	pop	{r4, pc}
    def0:	2000342c 	.word	0x2000342c
    def4:	200033a2 	.word	0x200033a2

0000def8 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
    def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    defc:	b085      	sub	sp, #20
    defe:	4607      	mov	r7, r0
    df00:	4689      	mov	r9, r1
    df02:	4692      	mov	sl, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
    df04:	f7ff fbc8 	bl	d698 <rl_access_check.constprop.1>
    df08:	2800      	cmp	r0, #0
    df0a:	f000 8086 	beq.w	e01a <ll_rl_add+0x122>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
    df0e:	f107 0801 	add.w	r8, r7, #1
    df12:	f10d 020f 	add.w	r2, sp, #15
    df16:	4641      	mov	r1, r8
    df18:	7838      	ldrb	r0, [r7, #0]
    df1a:	f7ff fd2d 	bl	d978 <ll_rl_find>

	/* Duplicate check */
	if (i < ARRAY_SIZE(rl)) {
    df1e:	2807      	cmp	r0, #7
    df20:	d97d      	bls.n	e01e <ll_rl_add+0x126>
		return BT_HCI_ERR_INVALID_PARAM;
	} else if (j >= ARRAY_SIZE(rl)) {
    df22:	f89d 500f 	ldrb.w	r5, [sp, #15]
    df26:	2d07      	cmp	r5, #7
    df28:	d87b      	bhi.n	e022 <ll_rl_add+0x12a>
    df2a:	eb05 0b85 	add.w	fp, r5, r5, lsl #2
	}

	/* Device not found but empty slot found */
	i = j;

	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    df2e:	4c3e      	ldr	r4, [pc, #248]	; (e028 <ll_rl_add+0x130>)
    df30:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
	rl[i].id_addr_type = id_addr->type & 0x1;
    df34:	2628      	movs	r6, #40	; 0x28
    df36:	436e      	muls	r6, r5
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    df38:	f10b 0001 	add.w	r0, fp, #1
    df3c:	2206      	movs	r2, #6
    df3e:	4641      	mov	r1, r8
    df40:	4420      	add	r0, r4
    df42:	f7f2 fb59 	bl	5f8 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
    df46:	7839      	ldrb	r1, [r7, #0]
    df48:	5da3      	ldrb	r3, [r4, r6]
    df4a:	19a2      	adds	r2, r4, r6
    df4c:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    df50:	4648      	mov	r0, r9
    df52:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
    df54:	9201      	str	r2, [sp, #4]
    df56:	55a3      	strb	r3, [r4, r6]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    df58:	f7f3 ff45 	bl	1de6 <mem_nz>
    df5c:	5da3      	ldrb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    df5e:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    df60:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    df64:	4650      	mov	r0, sl
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
    df66:	55a3      	strb	r3, [r4, r6]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    df68:	f7f3 ff3d 	bl	1de6 <mem_nz>
    df6c:	5da3      	ldrb	r3, [r4, r6]
	if (rl[i].pirk) {
    df6e:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    df70:	f000 0001 	and.w	r0, r0, #1
    df74:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
    df78:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
    df7c:	55a3      	strb	r3, [r4, r6]
	if (rl[i].pirk) {
    df7e:	d138      	bne.n	dff2 <ll_rl_add+0xfa>
		rl[i].pirk_idx = peer_irk_count;
		peer_irk_rl_ids[peer_irk_count] = i;
		/* AAR requires big-endian IRKs */
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
	}
	if (rl[i].lirk) {
    df80:	b158      	cbz	r0, df9a <ll_rl_add+0xa2>
		memcpy(rl[i].local_irk, lirk, 16);
    df82:	f10b 0007 	add.w	r0, fp, #7
    df86:	2210      	movs	r2, #16
    df88:	4651      	mov	r1, sl
    df8a:	4420      	add	r0, r4
    df8c:	f7f2 fb34 	bl	5f8 <memcpy>
		rl[i].local_rpa = NULL;
    df90:	2328      	movs	r3, #40	; 0x28
    df92:	fb03 4305 	mla	r3, r3, r5, r4
    df96:	2200      	movs	r2, #0
    df98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
	rl[i].rpas_ready = 0;
    df9a:	2628      	movs	r6, #40	; 0x28
    df9c:	436e      	muls	r6, r5
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
    df9e:	f10b 0018 	add.w	r0, fp, #24
    dfa2:	2206      	movs	r2, #6
    dfa4:	2100      	movs	r1, #0
    dfa6:	4420      	add	r0, r4
    dfa8:	f7f2 fb52 	bl	650 <memset>
	rl[i].rpas_ready = 0;
    dfac:	5da3      	ldrb	r3, [r4, r6]
	/* Default to Network Privacy */
	rl[i].dev = 0;
    dfae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    dfb2:	f36f 1304 	bfc	r3, #4, #1
    dfb6:	55a3      	strb	r3, [r4, r6]
	/* Add reference to  a whitelist entry */
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
    dfb8:	2200      	movs	r2, #0
    dfba:	4641      	mov	r1, r8
    dfbc:	7838      	ldrb	r0, [r7, #0]
    dfbe:	f7ff fb0d 	bl	d5dc <wl_find>
	if (j < ARRAY_SIZE(wl)) {
    dfc2:	2807      	cmp	r0, #7
    dfc4:	5da3      	ldrb	r3, [r4, r6]
		wl[j].rl_idx = i;
    dfc6:	bf9d      	ittte	ls
    dfc8:	4a18      	ldrls	r2, [pc, #96]	; (e02c <ll_rl_add+0x134>)
		rl[i].wl = 1;
    dfca:	f043 0320 	orrls.w	r3, r3, #32
		wl[j].rl_idx = i;
    dfce:	eb02 00c0 	addls.w	r0, r2, r0, lsl #3
	} else {
		rl[i].wl = 0;
    dfd2:	f36f 1345 	bfchi	r3, #5, #1
    dfd6:	55a3      	strb	r3, [r4, r6]
	}
	rl[i].taken = 1;
    dfd8:	f04f 0328 	mov.w	r3, #40	; 0x28
		wl[j].rl_idx = i;
    dfdc:	bf98      	it	ls
    dfde:	7045      	strbls	r5, [r0, #1]
	rl[i].taken = 1;
    dfe0:	435d      	muls	r5, r3

	return 0;
    dfe2:	2000      	movs	r0, #0
	rl[i].taken = 1;
    dfe4:	5d63      	ldrb	r3, [r4, r5]
    dfe6:	f043 0301 	orr.w	r3, r3, #1
    dfea:	5563      	strb	r3, [r4, r5]
}
    dfec:	b005      	add	sp, #20
    dfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
    dff2:	4b0f      	ldr	r3, [pc, #60]	; (e030 <ll_rl_add+0x138>)
    dff4:	7819      	ldrb	r1, [r3, #0]
    dff6:	75d1      	strb	r1, [r2, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
    dff8:	4a0e      	ldr	r2, [pc, #56]	; (e034 <ll_rl_add+0x13c>)
    dffa:	5455      	strb	r5, [r2, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
    dffc:	1c4a      	adds	r2, r1, #1
    dffe:	701a      	strb	r2, [r3, #0]
    e000:	4b0d      	ldr	r3, [pc, #52]	; (e038 <ll_rl_add+0x140>)
    e002:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    e006:	f109 0210 	add.w	r2, r9, #16
    e00a:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    e00c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
    e010:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
    e014:	454a      	cmp	r2, r9
    e016:	d1f9      	bne.n	e00c <ll_rl_add+0x114>
    e018:	e7b2      	b.n	df80 <ll_rl_add+0x88>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e01a:	200c      	movs	r0, #12
    e01c:	e7e6      	b.n	dfec <ll_rl_add+0xf4>
		return BT_HCI_ERR_INVALID_PARAM;
    e01e:	2012      	movs	r0, #18
    e020:	e7e4      	b.n	dfec <ll_rl_add+0xf4>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    e022:	2007      	movs	r0, #7
    e024:	e7e2      	b.n	dfec <ll_rl_add+0xf4>
    e026:	bf00      	nop
    e028:	2000342c 	.word	0x2000342c
    e02c:	2000359f 	.word	0x2000359f
    e030:	200033a2 	.word	0x200033a2
    e034:	200033a3 	.word	0x200033a3
    e038:	200033ab 	.word	0x200033ab

0000e03c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
    e03c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e040:	4681      	mov	r9, r0
	u8_t i;

	if (!rl_access_check(false)) {
    e042:	f7ff fb29 	bl	d698 <rl_access_check.constprop.1>
    e046:	2800      	cmp	r0, #0
    e048:	d053      	beq.n	e0f2 <ll_rl_remove+0xb6>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    e04a:	f109 0a01 	add.w	sl, r9, #1
    e04e:	2200      	movs	r2, #0
    e050:	4651      	mov	r1, sl
    e052:	f899 0000 	ldrb.w	r0, [r9]
    e056:	f7ff fc8f 	bl	d978 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    e05a:	2807      	cmp	r0, #7
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    e05c:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
    e05e:	d84b      	bhi.n	e0f8 <ll_rl_remove+0xbc>
		u8_t j, k;

		if (rl[i].pirk) {
    e060:	f04f 0b28 	mov.w	fp, #40	; 0x28
    e064:	4c26      	ldr	r4, [pc, #152]	; (e100 <ll_rl_remove+0xc4>)
    e066:	fb0b f300 	mul.w	r3, fp, r0
    e06a:	18e2      	adds	r2, r4, r3
    e06c:	5ce3      	ldrb	r3, [r4, r3]
    e06e:	075b      	lsls	r3, r3, #29
    e070:	d524      	bpl.n	e0bc <ll_rl_remove+0x80>
			/* Swap with last item */
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    e072:	4e24      	ldr	r6, [pc, #144]	; (e104 <ll_rl_remove+0xc8>)
    e074:	7835      	ldrb	r5, [r6, #0]
    e076:	3d01      	subs	r5, #1

			if (pj && pi != pj) {
    e078:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    e07c:	d01b      	beq.n	e0b6 <ll_rl_remove+0x7a>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    e07e:	7dd7      	ldrb	r7, [r2, #23]
			if (pj && pi != pj) {
    e080:	42af      	cmp	r7, r5
    e082:	d018      	beq.n	e0b6 <ll_rl_remove+0x7a>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
    e084:	4820      	ldr	r0, [pc, #128]	; (e108 <ll_rl_remove+0xcc>)
    e086:	2210      	movs	r2, #16
    e088:	eb00 1105 	add.w	r1, r0, r5, lsl #4
    e08c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
    e090:	f7f2 fab2 	bl	5f8 <memcpy>
    e094:	2300      	movs	r3, #0
				for (k = 0;
				     k < CONFIG_BT_CTLR_RL_SIZE;
				     k++) {

					if (rl[k].taken && rl[k].pirk &&
    e096:	fb0b f103 	mul.w	r1, fp, r3
    e09a:	1862      	adds	r2, r4, r1
    e09c:	5c61      	ldrb	r1, [r4, r1]
    e09e:	f011 0f01 	tst.w	r1, #1
    e0a2:	b2d8      	uxtb	r0, r3
    e0a4:	d021      	beq.n	e0ea <ll_rl_remove+0xae>
    e0a6:	0749      	lsls	r1, r1, #29
    e0a8:	d51f      	bpl.n	e0ea <ll_rl_remove+0xae>
    e0aa:	7dd1      	ldrb	r1, [r2, #23]
    e0ac:	42a9      	cmp	r1, r5
    e0ae:	d11c      	bne.n	e0ea <ll_rl_remove+0xae>
					    rl[k].pirk_idx == pj) {
						rl[k].pirk_idx = pi;
						peer_irk_rl_ids[pi] = k;
    e0b0:	4b16      	ldr	r3, [pc, #88]	; (e10c <ll_rl_remove+0xd0>)
						rl[k].pirk_idx = pi;
    e0b2:	75d7      	strb	r7, [r2, #23]
						peer_irk_rl_ids[pi] = k;
    e0b4:	55d8      	strb	r0, [r3, r7]
						break;
					}
				}
			}
			peer_irk_count--;
    e0b6:	7833      	ldrb	r3, [r6, #0]
    e0b8:	3b01      	subs	r3, #1
    e0ba:	7033      	strb	r3, [r6, #0]
		}

		/* Check if referenced by a whitelist entry */
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
    e0bc:	2200      	movs	r2, #0
    e0be:	4651      	mov	r1, sl
    e0c0:	f899 0000 	ldrb.w	r0, [r9]
    e0c4:	f7ff fa8a 	bl	d5dc <wl_find>
		if (j < ARRAY_SIZE(wl)) {
    e0c8:	2807      	cmp	r0, #7
			wl[j].rl_idx = FILTER_IDX_NONE;
    e0ca:	bf9f      	itttt	ls
    e0cc:	4b10      	ldrls	r3, [pc, #64]	; (e110 <ll_rl_remove+0xd4>)
    e0ce:	eb03 00c0 	addls.w	r0, r3, r0, lsl #3
    e0d2:	23ff      	movls	r3, #255	; 0xff
    e0d4:	7043      	strbls	r3, [r0, #1]
		}
		rl[i].taken = 0;
    e0d6:	2028      	movs	r0, #40	; 0x28
    e0d8:	fb00 f008 	mul.w	r0, r0, r8
    e0dc:	5c23      	ldrb	r3, [r4, r0]
    e0de:	f36f 0300 	bfc	r3, #0, #1
    e0e2:	5423      	strb	r3, [r4, r0]
		return 0;
    e0e4:	2000      	movs	r0, #0
    e0e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0ea:	3301      	adds	r3, #1
				for (k = 0;
    e0ec:	2b08      	cmp	r3, #8
    e0ee:	d1d2      	bne.n	e096 <ll_rl_remove+0x5a>
    e0f0:	e7e1      	b.n	e0b6 <ll_rl_remove+0x7a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e0f2:	200c      	movs	r0, #12
    e0f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e0f8:	2002      	movs	r0, #2
}
    e0fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0fe:	bf00      	nop
    e100:	2000342c 	.word	0x2000342c
    e104:	200033a2 	.word	0x200033a2
    e108:	200033ab 	.word	0x200033ab
    e10c:	200033a3 	.word	0x200033a3
    e110:	2000359f 	.word	0x2000359f

0000e114 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
    e114:	b570      	push	{r4, r5, r6, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
    e116:	795c      	ldrb	r4, [r3, #5]
    e118:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
    e11c:	2c40      	cmp	r4, #64	; 0x40
{
    e11e:	461d      	mov	r5, r3
	if ((crpa[5] & 0xc0) == 0x40) {
    e120:	d117      	bne.n	e152 <ll_rl_crpa_set+0x3e>

		if (id_addr) {
    e122:	b119      	cbz	r1, e12c <ll_rl_crpa_set+0x18>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
    e124:	2200      	movs	r2, #0
    e126:	f7ff fc27 	bl	d978 <ll_rl_find>
    e12a:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
    e12c:	2a07      	cmp	r2, #7
    e12e:	d810      	bhi.n	e152 <ll_rl_crpa_set+0x3e>
    e130:	2128      	movs	r1, #40	; 0x28
    e132:	4c08      	ldr	r4, [pc, #32]	; (e154 <ll_rl_crpa_set+0x40>)
    e134:	fb01 f302 	mul.w	r3, r1, r2
    e138:	5ce3      	ldrb	r3, [r4, r3]
    e13a:	07db      	lsls	r3, r3, #31
    e13c:	d509      	bpl.n	e152 <ll_rl_crpa_set+0x3e>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    e13e:	2018      	movs	r0, #24
    e140:	fb11 0002 	smlabb	r0, r1, r2, r0
    e144:	4420      	add	r0, r4
    e146:	4629      	mov	r1, r5
    e148:	2206      	movs	r2, #6
				       sizeof(bt_addr_t));
		}
	}
}
    e14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
    e14e:	f7f2 ba53 	b.w	5f8 <memcpy>
    e152:	bd70      	pop	{r4, r5, r6, pc}
    e154:	2000342c 	.word	0x2000342c

0000e158 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
    e158:	b538      	push	{r3, r4, r5, lr}
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    e15a:	2200      	movs	r2, #0
{
    e15c:	460d      	mov	r5, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    e15e:	1c41      	adds	r1, r0, #1
    e160:	7800      	ldrb	r0, [r0, #0]
    e162:	f7ff fc09 	bl	d978 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
    e166:	2807      	cmp	r0, #7
    e168:	d901      	bls.n	e16e <ll_rl_crpa_get+0x16>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e16a:	2002      	movs	r0, #2
    e16c:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
    e16e:	2428      	movs	r4, #40	; 0x28
    e170:	2318      	movs	r3, #24
    e172:	fb14 3000 	smlabb	r0, r4, r0, r3
    e176:	4c07      	ldr	r4, [pc, #28]	; (e194 <ll_rl_crpa_get+0x3c>)
    e178:	4404      	add	r4, r0
    e17a:	2106      	movs	r1, #6
    e17c:	4620      	mov	r0, r4
    e17e:	f7f3 fe32 	bl	1de6 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
    e182:	2800      	cmp	r0, #0
    e184:	d0f1      	beq.n	e16a <ll_rl_crpa_get+0x12>
    e186:	2206      	movs	r2, #6
    e188:	4621      	mov	r1, r4
    e18a:	4628      	mov	r0, r5
    e18c:	f7f2 fa34 	bl	5f8 <memcpy>
			return 0;
    e190:	2000      	movs	r0, #0
}
    e192:	bd38      	pop	{r3, r4, r5, pc}
    e194:	2000342c 	.word	0x2000342c

0000e198 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
    e198:	b510      	push	{r4, lr}
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    e19a:	2200      	movs	r2, #0
{
    e19c:	460c      	mov	r4, r1
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    e19e:	1c41      	adds	r1, r0, #1
    e1a0:	7800      	ldrb	r0, [r0, #0]
    e1a2:	f7ff fbe9 	bl	d978 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    e1a6:	2807      	cmp	r0, #7
    e1a8:	d80a      	bhi.n	e1c0 <ll_rl_lrpa_get+0x28>
		bt_addr_copy(lrpa, rl[i].local_rpa);
    e1aa:	4b06      	ldr	r3, [pc, #24]	; (e1c4 <ll_rl_lrpa_get+0x2c>)
    e1ac:	2228      	movs	r2, #40	; 0x28
    e1ae:	fb02 3000 	mla	r0, r2, r0, r3
    e1b2:	2206      	movs	r2, #6
    e1b4:	6a41      	ldr	r1, [r0, #36]	; 0x24
    e1b6:	4620      	mov	r0, r4
    e1b8:	f7f2 fa1e 	bl	5f8 <memcpy>
		return 0;
    e1bc:	2000      	movs	r0, #0
    e1be:	bd10      	pop	{r4, pc}
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e1c0:	2002      	movs	r0, #2
}
    e1c2:	bd10      	pop	{r4, pc}
    e1c4:	2000342c 	.word	0x2000342c

0000e1c8 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
    e1c8:	b510      	push	{r4, lr}
    e1ca:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
    e1cc:	f7ff fa64 	bl	d698 <rl_access_check.constprop.1>
    e1d0:	b140      	cbz	r0, e1e4 <ll_rl_enable+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	switch (enable) {
    e1d2:	b11c      	cbz	r4, e1dc <ll_rl_enable+0x14>
    e1d4:	2c01      	cmp	r4, #1
    e1d6:	d001      	beq.n	e1dc <ll_rl_enable+0x14>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
    e1d8:	2012      	movs	r0, #18
	}

	return 0;
}
    e1da:	bd10      	pop	{r4, pc}
		rl_enable = 1;
    e1dc:	4b02      	ldr	r3, [pc, #8]	; (e1e8 <ll_rl_enable+0x20>)
    e1de:	701c      	strb	r4, [r3, #0]
	return 0;
    e1e0:	2000      	movs	r0, #0
		break;
    e1e2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    e1e4:	200c      	movs	r0, #12
    e1e6:	bd10      	pop	{r4, pc}
    e1e8:	2000356c 	.word	0x2000356c

0000e1ec <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
    e1ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    e1f0:	4358      	muls	r0, r3
    e1f2:	4b01      	ldr	r3, [pc, #4]	; (e1f8 <ll_rl_timeout_set+0xc>)
    e1f4:	6018      	str	r0, [r3, #0]
    e1f6:	4770      	bx	lr
    e1f8:	20003c8c 	.word	0x20003c8c

0000e1fc <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
    e1fc:	b538      	push	{r3, r4, r5, lr}
    e1fe:	4605      	mov	r5, r0
    e200:	460c      	mov	r4, r1
	u8_t i;

	if (!rl_access_check(false)) {
    e202:	f7ff fa49 	bl	d698 <rl_access_check.constprop.1>
    e206:	b1d8      	cbz	r0, e240 <ll_priv_mode_set+0x44>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
    e208:	2200      	movs	r2, #0
    e20a:	1c69      	adds	r1, r5, #1
    e20c:	7828      	ldrb	r0, [r5, #0]
    e20e:	f7ff fbb3 	bl	d978 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    e212:	2807      	cmp	r0, #7
    e214:	d816      	bhi.n	e244 <ll_priv_mode_set+0x48>
		switch (mode) {
    e216:	b11c      	cbz	r4, e220 <ll_priv_mode_set+0x24>
    e218:	2c01      	cmp	r4, #1
    e21a:	d00a      	beq.n	e232 <ll_priv_mode_set+0x36>
			break;
		case BT_HCI_LE_PRIVACY_MODE_DEVICE:
			rl[i].dev = 1;
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
    e21c:	2012      	movs	r0, #18
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
	}

	return 0;
}
    e21e:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
    e220:	2328      	movs	r3, #40	; 0x28
    e222:	4a09      	ldr	r2, [pc, #36]	; (e248 <ll_priv_mode_set+0x4c>)
    e224:	4358      	muls	r0, r3
    e226:	5c13      	ldrb	r3, [r2, r0]
    e228:	f364 1304 	bfi	r3, r4, #4, #1
			rl[i].dev = 1;
    e22c:	5413      	strb	r3, [r2, r0]
	return 0;
    e22e:	2000      	movs	r0, #0
			break;
    e230:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
    e232:	2328      	movs	r3, #40	; 0x28
    e234:	4a04      	ldr	r2, [pc, #16]	; (e248 <ll_priv_mode_set+0x4c>)
    e236:	4358      	muls	r0, r3
    e238:	5c13      	ldrb	r3, [r2, r0]
    e23a:	f043 0310 	orr.w	r3, r3, #16
    e23e:	e7f5      	b.n	e22c <ll_priv_mode_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
    e240:	200c      	movs	r0, #12
    e242:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    e244:	2002      	movs	r0, #2
    e246:	bd38      	pop	{r3, r4, r5, pc}
    e248:	2000342c 	.word	0x2000342c

0000e24c <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    e24c:	4a19      	ldr	r2, [pc, #100]	; (e2b4 <ll_filter_reset+0x68>)
    e24e:	2300      	movs	r3, #0
{
    e250:	b430      	push	{r4, r5}
	wl_anon = 0;
    e252:	7013      	strb	r3, [r2, #0]
		wl[i].taken = 0;
    e254:	4a18      	ldr	r2, [pc, #96]	; (e2b8 <ll_filter_reset+0x6c>)
    e256:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    e25a:	f36f 0100 	bfc	r1, #0, #1
    e25e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
    e262:	3301      	adds	r3, #1
    e264:	2b08      	cmp	r3, #8
    e266:	d1f6      	bne.n	e256 <ll_filter_reset+0xa>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();

	rl_enable = 0;
    e268:	4a14      	ldr	r2, [pc, #80]	; (e2bc <ll_filter_reset+0x70>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    e26a:	4915      	ldr	r1, [pc, #84]	; (e2c0 <ll_filter_reset+0x74>)
	rl_enable = 0;
    e26c:	2300      	movs	r3, #0
    e26e:	7013      	strb	r3, [r2, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    e270:	4a14      	ldr	r2, [pc, #80]	; (e2c4 <ll_filter_reset+0x78>)
    e272:	6011      	str	r1, [r2, #0]
	rpa_last_ms = -1;
    e274:	4a14      	ldr	r2, [pc, #80]	; (e2c8 <ll_filter_reset+0x7c>)
		rl[i].taken = 0;
    e276:	4915      	ldr	r1, [pc, #84]	; (e2cc <ll_filter_reset+0x80>)
	rpa_last_ms = -1;
    e278:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e27c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    e280:	e9c2 4500 	strd	r4, r5, [r2]
		rl[i].taken = 0;
    e284:	2528      	movs	r5, #40	; 0x28
    e286:	fb05 f203 	mul.w	r2, r5, r3
    e28a:	3301      	adds	r3, #1
    e28c:	5c8c      	ldrb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    e28e:	2b08      	cmp	r3, #8
		rl[i].taken = 0;
    e290:	f36f 0400 	bfc	r4, #0, #1
    e294:	548c      	strb	r4, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    e296:	d1f6      	bne.n	e286 <ll_filter_reset+0x3a>
	peer_irk_count = 0;
    e298:	4b0d      	ldr	r3, [pc, #52]	; (e2d0 <ll_filter_reset+0x84>)
    e29a:	2200      	movs	r2, #0
    e29c:	701a      	strb	r2, [r3, #0]
	rl_clear();
	if (init) {
    e29e:	b120      	cbz	r0, e2aa <ll_filter_reset+0x5e>
		k_delayed_work_init(&rpa_work, rpa_timeout);
    e2a0:	490c      	ldr	r1, [pc, #48]	; (e2d4 <ll_filter_reset+0x88>)
    e2a2:	480d      	ldr	r0, [pc, #52]	; (e2d8 <ll_filter_reset+0x8c>)
	}
#else
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */

}
    e2a4:	bc30      	pop	{r4, r5}
		k_delayed_work_init(&rpa_work, rpa_timeout);
    e2a6:	f001 bed5 	b.w	10054 <k_delayed_work_init>
		k_delayed_work_cancel(&rpa_work);
    e2aa:	480b      	ldr	r0, [pc, #44]	; (e2d8 <ll_filter_reset+0x8c>)
}
    e2ac:	bc30      	pop	{r4, r5}
		k_delayed_work_cancel(&rpa_work);
    e2ae:	f001 beef 	b.w	10090 <k_delayed_work_cancel>
    e2b2:	bf00      	nop
    e2b4:	20003c60 	.word	0x20003c60
    e2b8:	2000359f 	.word	0x2000359f
    e2bc:	2000356c 	.word	0x2000356c
    e2c0:	000dbba0 	.word	0x000dbba0
    e2c4:	20003c8c 	.word	0x20003c8c
    e2c8:	20003c58 	.word	0x20003c58
    e2cc:	2000342c 	.word	0x2000342c
    e2d0:	200033a2 	.word	0x200033a2
    e2d4:	0000de6d 	.word	0x0000de6d
    e2d8:	20003c64 	.word	0x20003c64

0000e2dc <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    e2dc:	4b05      	ldr	r3, [pc, #20]	; (e2f4 <cntr_init+0x18>)
    e2de:	2200      	movs	r2, #0
    e2e0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    e2e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    e2e8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    e2ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e2f0:	4770      	bx	lr
    e2f2:	bf00      	nop
    e2f4:	4000b000 	.word	0x4000b000

0000e2f8 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    e2f8:	4a04      	ldr	r2, [pc, #16]	; (e30c <cntr_start+0x14>)
    e2fa:	7813      	ldrb	r3, [r2, #0]
    e2fc:	1c59      	adds	r1, r3, #1
    e2fe:	7011      	strb	r1, [r2, #0]
    e300:	2001      	movs	r0, #1
    e302:	b913      	cbnz	r3, e30a <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    e304:	4a02      	ldr	r2, [pc, #8]	; (e310 <cntr_start+0x18>)
    e306:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    e308:	4618      	mov	r0, r3
}
    e30a:	4770      	bx	lr
    e30c:	20003611 	.word	0x20003611
    e310:	4000b000 	.word	0x4000b000

0000e314 <cntr_stop>:

u32_t cntr_stop(void)
{
    e314:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
    e316:	4c09      	ldr	r4, [pc, #36]	; (e33c <cntr_stop+0x28>)
    e318:	7823      	ldrb	r3, [r4, #0]
    e31a:	b91b      	cbnz	r3, e324 <cntr_stop+0x10>
    e31c:	2130      	movs	r1, #48	; 0x30
    e31e:	4808      	ldr	r0, [pc, #32]	; (e340 <cntr_stop+0x2c>)
    e320:	f7f2 fac6 	bl	8b0 <bt_ctlr_assert_handle>

	if (--_refcount) {
    e324:	7820      	ldrb	r0, [r4, #0]
    e326:	3801      	subs	r0, #1
    e328:	b2c0      	uxtb	r0, r0
    e32a:	7020      	strb	r0, [r4, #0]
    e32c:	2301      	movs	r3, #1
    e32e:	b910      	cbnz	r0, e336 <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    e330:	4a04      	ldr	r2, [pc, #16]	; (e344 <cntr_stop+0x30>)
    e332:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    e334:	bd10      	pop	{r4, pc}
		return 1;
    e336:	4618      	mov	r0, r3
}
    e338:	bd10      	pop	{r4, pc}
    e33a:	bf00      	nop
    e33c:	20003611 	.word	0x20003611
    e340:	00010c6c 	.word	0x00010c6c
    e344:	4000b000 	.word	0x4000b000

0000e348 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    e348:	4b01      	ldr	r3, [pc, #4]	; (e350 <cntr_cnt_get+0x8>)
    e34a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    e34e:	4770      	bx	lr
    e350:	4000b000 	.word	0x4000b000

0000e354 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    e354:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    e358:	4b01      	ldr	r3, [pc, #4]	; (e360 <cntr_cmp_set+0xc>)
    e35a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    e35e:	4770      	bx	lr
    e360:	4000b000 	.word	0x4000b000

0000e364 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    e364:	4b11      	ldr	r3, [pc, #68]	; (e3ac <do_ecb+0x48>)
{
    e366:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    e368:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    e36a:	2500      	movs	r5, #0
    e36c:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    e36e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    e370:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    e374:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    e378:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    e37c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    e37e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    e382:	b934      	cbnz	r4, e392 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    e384:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    e388:	b91c      	cbnz	r4, e392 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    e38a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    e38e:	2c00      	cmp	r4, #0
    e390:	d1f5      	bne.n	e37e <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    e392:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    e394:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    e398:	2c00      	cmp	r4, #0
    e39a:	d1e8      	bne.n	e36e <do_ecb+0xa>
    e39c:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    e3a0:	2e00      	cmp	r6, #0
    e3a2:	d0e4      	beq.n	e36e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    e3a4:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    e3a8:	bd70      	pop	{r4, r5, r6, pc}
    e3aa:	bf00      	nop
    e3ac:	4000e000 	.word	0x4000e000

0000e3b0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    e3b0:	b570      	push	{r4, r5, r6, lr}
    e3b2:	b08c      	sub	sp, #48	; 0x30
    e3b4:	460e      	mov	r6, r1
    e3b6:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    e3b8:	4601      	mov	r1, r0
    e3ba:	2210      	movs	r2, #16
    e3bc:	4668      	mov	r0, sp
{
    e3be:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    e3c0:	f7f3 fd02 	bl	1dc8 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    e3c4:	2210      	movs	r2, #16
    e3c6:	eb0d 0002 	add.w	r0, sp, r2
    e3ca:	4631      	mov	r1, r6
    e3cc:	f7f3 fcfc 	bl	1dc8 <mem_rcopy>

	do_ecb(&ecb);
    e3d0:	4668      	mov	r0, sp
    e3d2:	f7ff ffc7 	bl	e364 <do_ecb>

	if (cipher_text_le) {
    e3d6:	b125      	cbz	r5, e3e2 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    e3d8:	2210      	movs	r2, #16
    e3da:	a908      	add	r1, sp, #32
    e3dc:	4628      	mov	r0, r5
    e3de:	f7f3 fcf3 	bl	1dc8 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    e3e2:	b124      	cbz	r4, e3ee <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    e3e4:	2210      	movs	r2, #16
    e3e6:	a908      	add	r1, sp, #32
    e3e8:	4620      	mov	r0, r4
    e3ea:	f7f2 f905 	bl	5f8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    e3ee:	b00c      	add	sp, #48	; 0x30
    e3f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e3f4 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    e3f4:	4b07      	ldr	r3, [pc, #28]	; (e414 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    e3f6:	4a08      	ldr	r2, [pc, #32]	; (e418 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    e3f8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    e3fc:	4907      	ldr	r1, [pc, #28]	; (e41c <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    e3fe:	4a08      	ldr	r2, [pc, #32]	; (e420 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    e400:	2800      	cmp	r0, #0
    e402:	bf14      	ite	ne
    e404:	4610      	movne	r0, r2
    e406:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    e408:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    e40a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    e40e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    e412:	4770      	bx	lr
    e414:	4001f000 	.word	0x4001f000
    e418:	40008140 	.word	0x40008140
    e41c:	40001004 	.word	0x40001004
    e420:	40001000 	.word	0x40001000

0000e424 <sw_switch.isra.6>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    e424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    e428:	4d75      	ldr	r5, [pc, #468]	; (e600 <sw_switch.isra.6+0x1dc>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    e42a:	4c76      	ldr	r4, [pc, #472]	; (e604 <sw_switch.isra.6+0x1e0>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    e42c:	782e      	ldrb	r6, [r5, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    e42e:	4b76      	ldr	r3, [pc, #472]	; (e608 <sw_switch.isra.6+0x1e4>)
    e430:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    e434:	b233      	sxth	r3, r6
    e436:	ea4f 0ec3 	mov.w	lr, r3, lsl #3
static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    e43a:	4688      	mov	r8, r1
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    e43c:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
    e440:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    e444:	f8c4 1564 	str.w	r1, [r4, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    e448:	f106 040b 	add.w	r4, r6, #11
    e44c:	b2e4      	uxtb	r4, r4
    e44e:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    e450:	496e      	ldr	r1, [pc, #440]	; (e60c <sw_switch.isra.6+0x1e8>)
    e452:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    e456:	ea4f 0c83 	mov.w	ip, r3, lsl #2
    e45a:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    e45e:	4461      	add	r1, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    e460:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
    e464:	f106 0708 	add.w	r7, r6, #8
    e468:	f10e 0e04 	add.w	lr, lr, #4

	if (dir) {
    e46c:	2800      	cmp	r0, #0
    e46e:	f000 80aa 	beq.w	e5c6 <sw_switch.isra.6+0x1a2>
	}
}

static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
    e472:	2a02      	cmp	r2, #2
    e474:	f000 8087 	beq.w	e586 <sw_switch.isra.6+0x162>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    e478:	f649 70c4 	movw	r0, #40900	; 0x9fc4
    e47c:	f64a 095c 	movw	r9, #43100	; 0xa85c
    e480:	2a04      	cmp	r2, #4
    e482:	bf18      	it	ne
    e484:	4681      	movne	r9, r0
	}
}

static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
    e486:	f1b8 0f02 	cmp.w	r8, #2
    e48a:	d07f      	beq.n	e58c <sw_switch.isra.6+0x168>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    e48c:	f242 42b8 	movw	r2, #9400	; 0x24b8
    e490:	f247 2074 	movw	r0, #29300	; 0x7274
    e494:	f1b8 0f04 	cmp.w	r8, #4
    e498:	bf18      	it	ne
    e49a:	4610      	movne	r0, r2
    e49c:	f509 79fa 	add.w	r9, r9, #500	; 0x1f4
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    e4a0:	4a5b      	ldr	r2, [pc, #364]	; (e610 <sw_switch.isra.6+0x1ec>)
    e4a2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_SOC_NRF52840)
		if (phy_curr & BIT(2)) {
    e4a6:	f018 0f04 	tst.w	r8, #4
		delay = HAL_RADIO_NS2US_ROUND(
    e4aa:	4448      	add	r0, r9
    e4ac:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    e4b0:	fbb0 f0fa 	udiv	r0, r0, sl
		if (phy_curr & BIT(2)) {
    e4b4:	d06d      	beq.n	e592 <sw_switch.isra.6+0x16e>
    e4b6:	f242 44b8 	movw	r4, #9400	; 0x24b8
    e4ba:	f644 4190 	movw	r1, #19600	; 0x4c90
    e4be:	f1b8 0f04 	cmp.w	r8, #4
    e4c2:	bf18      	it	ne
    e4c4:	4621      	movne	r1, r4
    e4c6:	009c      	lsls	r4, r3, #2
    e4c8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000

			u8_t ppi_en =
			    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI;
			u8_t cc_s2 =
			    SW_SWITCH_TIMER_EVTS_COMP_S2_BASE;
			u8_t ppi_dis =
    e4cc:	b2fa      	uxtb	r2, r7
    e4ce:	f504 4710 	add.w	r7, r4, #36864	; 0x9000
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
				    sw_tifs_toggle);
			u32_t delay_s2;

			/* Calculate assuming reception on S2 coding scheme. */
			delay_s2 = HAL_RADIO_NS2US_ROUND(
    e4d2:	4449      	add	r1, r9
				hal_radio_tx_ready_delay_ns_get(
					phy_next, flags_next) +
				hal_radio_rx_chain_delay_ns_get(phy_curr, 0));

			SW_SWITCH_TIMER->CC[cc_s2] =
				SW_SWITCH_TIMER->CC[cc];
    e4d4:	f8d7 8540 	ldr.w	r8, [r7, #1344]	; 0x540
			SW_SWITCH_TIMER->CC[cc_s2] =
    e4d8:	4f4e      	ldr	r7, [pc, #312]	; (e614 <sw_switch.isra.6+0x1f0>)
			delay_s2 = HAL_RADIO_NS2US_ROUND(
    e4da:	fbb1 f1fa 	udiv	r1, r1, sl
			SW_SWITCH_TIMER->CC[cc_s2] =
    e4de:	f8c7 8548 	str.w	r8, [r7, #1352]	; 0x548

			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
    e4e2:	f8d7 8548 	ldr.w	r8, [r7, #1352]	; 0x548
    e4e6:	4541      	cmp	r1, r8
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
    e4e8:	bf36      	itet	cc
    e4ea:	f8d7 8548 	ldrcc.w	r8, [r7, #1352]	; 0x548
			} else {
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
    e4ee:	2101      	movcs	r1, #1
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
    e4f0:	eba8 0101 	subcc.w	r1, r8, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
    e4f4:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
			}

			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
    e4f8:	4f42      	ldr	r7, [pc, #264]	; (e604 <sw_switch.isra.6+0x1e0>)
    e4fa:	f8df 8124 	ldr.w	r8, [pc, #292]	; e620 <sw_switch.isra.6+0x1fc>
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
    e4fe:	4944      	ldr	r1, [pc, #272]	; (e610 <sw_switch.isra.6+0x1ec>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
    e500:	f8c7 8590 	str.w	r8, [r7, #1424]	; 0x590
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
    e504:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
    e508:	f504 31f8 	add.w	r1, r4, #126976	; 0x1f000
				HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;

			/* Include PPI for S2 timing in the active group */
			NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(
				sw_tifs_toggle)] |=
    e50c:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
    e510:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
    e514:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
    e518:	00d1      	lsls	r1, r2, #3
    e51a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    e51e:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis)	=
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_s2);

			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
			    ppi_dis) =
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
    e522:	f10e 4280 	add.w	r2, lr, #1073741824	; 0x40000000
    e526:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis)	=
    e52a:	f8c1 8510 	str.w	r8, [r1, #1296]	; 0x510
			    ppi_dis) =
    e52e:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
			    sw_tifs_toggle);

			/* Capture CC to cancel the timer that has assumed
			 * S8 reception, if packet will be received in S2.
			 */
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
    e532:	4a39      	ldr	r2, [pc, #228]	; (e618 <sw_switch.isra.6+0x1f4>)
    e534:	f8c7 2598 	str.w	r2, [r7, #1432]	; 0x598
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_EVT;
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
				HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
    e538:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
    e53c:	3270      	adds	r2, #112	; 0x70
    e53e:	4462      	add	r2, ip
			HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
    e540:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
				    sw_tifs_toggle);

			NRF_PPI->CHENSET =
    e544:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    e548:	f8c7 2504 	str.w	r2, [r7, #1284]	; 0x504
    e54c:	009b      	lsls	r3, r3, #2
    e54e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e552:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    e556:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    e55a:	4282      	cmp	r2, r0
		SW_SWITCH_TIMER->CC[cc] -= delay;
    e55c:	bf8b      	itete	hi
    e55e:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    e562:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    e564:	1a10      	subhi	r0, r2, r0
		SW_SWITCH_TIMER->CC[cc] = 1;
    e566:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    e56a:	bf88      	it	hi
    e56c:	f8c3 0540 	strhi.w	r0, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    e570:	4b24      	ldr	r3, [pc, #144]	; (e604 <sw_switch.isra.6+0x1e0>)
    e572:	f44f 6290 	mov.w	r2, #1152	; 0x480
    e576:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    e57a:	1c73      	adds	r3, r6, #1
	sw_tifs_toggle &= 1;
    e57c:	f003 0301 	and.w	r3, r3, #1
    e580:	702b      	strb	r3, [r5, #0]
    e582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_NS;
    e586:	f649 4940 	movw	r9, #40000	; 0x9c40
    e58a:	e77c      	b.n	e486 <sw_switch.isra.6+0x62>
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
    e58c:	f241 3088 	movw	r0, #5000	; 0x1388
    e590:	e784      	b.n	e49c <sw_switch.isra.6+0x78>
    e592:	009a      	lsls	r2, r3, #2
    e594:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e598:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
    e59c:	f8d2 4800 	ldr.w	r4, [r2, #2048]	; 0x800
    e5a0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    e5a4:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
    e5a8:	b2fa      	uxtb	r2, r7
    e5aa:	00d2      	lsls	r2, r2, #3
    e5ac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e5b0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
			    ppi_dis) =
    e5b4:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
			    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
    e5b8:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
    e5bc:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
			    ppi_dis) =
    e5c0:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    e5c4:	e7c2      	b.n	e54c <sw_switch.isra.6+0x128>
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    e5c6:	4a15      	ldr	r2, [pc, #84]	; (e61c <sw_switch.isra.6+0x1f8>)
    e5c8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    e5cc:	b2fa      	uxtb	r2, r7
    e5ce:	00d2      	lsls	r2, r2, #3
    e5d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    e5d4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		delay = HAL_RADIO_NS2US_CEIL(
    e5d8:	202c      	movs	r0, #44	; 0x2c
				ppi_dis) =
    e5da:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
    e5de:	f10e 4180 	add.w	r1, lr, #1073741824	; 0x40000000
    e5e2:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
				ppi_dis) =
    e5e6:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    e5ea:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
    e5ee:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
				sw_tifs_toggle)] &=
    e5f2:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
    e5f6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
    e5fa:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
    e5fe:	e7a5      	b.n	e54c <sw_switch.isra.6+0x128>
    e600:	20003834 	.word	0x20003834
    e604:	4001f000 	.word	0x4001f000
    e608:	4000110c 	.word	0x4000110c
    e60c:	40009140 	.word	0x40009140
    e610:	40001000 	.word	0x40001000
    e614:	40009000 	.word	0x40009000
    e618:	40001150 	.word	0x40001150
    e61c:	40001004 	.word	0x40001004
    e620:	40009148 	.word	0x40009148

0000e624 <isr_radio>:
	if (sfp_radio_isr) {
    e624:	4b02      	ldr	r3, [pc, #8]	; (e630 <isr_radio+0xc>)
    e626:	681b      	ldr	r3, [r3, #0]
    e628:	b103      	cbz	r3, e62c <isr_radio+0x8>
		sfp_radio_isr();
    e62a:	4718      	bx	r3
    e62c:	4770      	bx	lr
    e62e:	bf00      	nop
    e630:	20003830 	.word	0x20003830

0000e634 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    e634:	4b06      	ldr	r3, [pc, #24]	; (e650 <radio_isr_set+0x1c>)
    e636:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    e638:	4b06      	ldr	r3, [pc, #24]	; (e654 <radio_isr_set+0x20>)
    e63a:	2210      	movs	r2, #16
    e63c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e640:	4b05      	ldr	r3, [pc, #20]	; (e658 <radio_isr_set+0x24>)
    e642:	2202      	movs	r2, #2
    e644:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    e648:	2001      	movs	r0, #1
    e64a:	f7f2 bb7b 	b.w	d44 <_arch_irq_enable>
    e64e:	bf00      	nop
    e650:	20003830 	.word	0x20003830
    e654:	40001000 	.word	0x40001000
    e658:	e000e100 	.word	0xe000e100

0000e65c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    e65c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    e664:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    e666:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    e66a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    e66e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    e672:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    e676:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    e67a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    e67e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    e682:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    e686:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    e68a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    e68e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    e692:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    e696:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    e69a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    e69e:	4770      	bx	lr

0000e6a0 <radio_reset>:
{
    e6a0:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    e6a2:	2001      	movs	r0, #1
    e6a4:	f7f2 fb5e 	bl	d64 <_arch_irq_disable>
	NRF_RADIO->POWER =
    e6a8:	4b08      	ldr	r3, [pc, #32]	; (e6cc <radio_reset+0x2c>)
    e6aa:	2200      	movs	r2, #0
    e6ac:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    e6b0:	2201      	movs	r2, #1
    e6b2:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    e6b6:	4a06      	ldr	r2, [pc, #24]	; (e6d0 <radio_reset+0x30>)
    e6b8:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    e6ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e6be:	f023 0301 	bic.w	r3, r3, #1
    e6c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    e6c6:	6013      	str	r3, [r2, #0]
    e6c8:	bd08      	pop	{r3, pc}
    e6ca:	bf00      	nop
    e6cc:	40001000 	.word	0x40001000
    e6d0:	40001774 	.word	0x40001774

0000e6d4 <radio_phy_set>:
	switch (phy) {
    e6d4:	2802      	cmp	r0, #2
    e6d6:	4b14      	ldr	r3, [pc, #80]	; (e728 <radio_phy_set+0x54>)
    e6d8:	d010      	beq.n	e6fc <radio_phy_set+0x28>
    e6da:	2804      	cmp	r0, #4
    e6dc:	d014      	beq.n	e708 <radio_phy_set+0x34>
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
    e6de:	681a      	ldr	r2, [r3, #0]
    e6e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    e6e4:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    e6e6:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    e6e8:	4b10      	ldr	r3, [pc, #64]	; (e72c <radio_phy_set+0x58>)
    e6ea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    e6ee:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    e6f2:	f042 0201 	orr.w	r2, r2, #1
    e6f6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    e6fa:	4770      	bx	lr
		*(volatile u32_t *)0x4000173c &= ~0x80000000;
    e6fc:	681a      	ldr	r2, [r3, #0]
    e6fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    e702:	601a      	str	r2, [r3, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    e704:	2104      	movs	r1, #4
    e706:	e7ef      	b.n	e6e8 <radio_phy_set+0x14>
		*(volatile u32_t *)0x4000173c |= 0x80000000;
    e708:	681a      	ldr	r2, [r3, #0]
    e70a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    e70e:	601a      	str	r2, [r3, #0]
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
    e710:	681a      	ldr	r2, [r3, #0]
    e712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
		if (flags & 0x01) {
    e716:	f011 0f01 	tst.w	r1, #1
				((*(volatile u32_t *)0x4000173c) & 0xFFFFFF00) |
    e71a:	f042 025c 	orr.w	r2, r2, #92	; 0x5c
			mode = RADIO_MODE_MODE_Ble_LR500Kbit;
    e71e:	bf14      	ite	ne
    e720:	2105      	movne	r1, #5
    e722:	2106      	moveq	r1, #6
		*(volatile u32_t *)0x4000173c =
    e724:	601a      	str	r2, [r3, #0]
    e726:	e7df      	b.n	e6e8 <radio_phy_set+0x14>
    e728:	4000173c 	.word	0x4000173c
    e72c:	40001000 	.word	0x40001000

0000e730 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    e730:	4b01      	ldr	r3, [pc, #4]	; (e738 <radio_tx_power_set+0x8>)
    e732:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    e736:	4770      	bx	lr
    e738:	40001000 	.word	0x40001000

0000e73c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    e73c:	4b01      	ldr	r3, [pc, #4]	; (e744 <radio_freq_chan_set+0x8>)
    e73e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    e742:	4770      	bx	lr
    e744:	40001000 	.word	0x40001000

0000e748 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    e748:	4b07      	ldr	r3, [pc, #28]	; (e768 <radio_whiten_iv_set+0x20>)
    e74a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    e74e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    e752:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    e756:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    e75a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    e75e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    e762:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    e766:	4770      	bx	lr
    e768:	40001000 	.word	0x40001000

0000e76c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    e76c:	4a0a      	ldr	r2, [pc, #40]	; (e798 <radio_aa_set+0x2c>)
    e76e:	2300      	movs	r3, #0
    e770:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    e774:	2301      	movs	r3, #1
    e776:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    e77a:	78c3      	ldrb	r3, [r0, #3]
    e77c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    e780:	7843      	ldrb	r3, [r0, #1]
    e782:	7881      	ldrb	r1, [r0, #2]
    e784:	041b      	lsls	r3, r3, #16
    e786:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    e78a:	7801      	ldrb	r1, [r0, #0]
    e78c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    e790:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    e794:	4770      	bx	lr
    e796:	bf00      	nop
    e798:	40001000 	.word	0x40001000

0000e79c <radio_pkt_configure>:
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    e79c:	f002 0301 	and.w	r3, r2, #1
	switch (phy) {
    e7a0:	f3c2 0242 	ubfx	r2, r2, #1, #3
    e7a4:	2a02      	cmp	r2, #2
    e7a6:	d023      	beq.n	e7f0 <radio_pkt_configure+0x54>
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    e7a8:	2a04      	cmp	r2, #4
    e7aa:	bf0c      	ite	eq
    e7ac:	f04f 42c7 	moveq.w	r2, #1669332992	; 0x63800000
    e7b0:	2200      	movne	r2, #0
	if (dc) {
    e7b2:	b10b      	cbz	r3, e7b8 <radio_pkt_configure+0x1c>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    e7b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    e7b8:	f1c0 0308 	rsb	r3, r0, #8
    e7bc:	041b      	lsls	r3, r3, #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    e7be:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    e7c2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    e7c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
			    RADIO_PCNF0_S1LEN_Msk) |
    e7ca:	4303      	orrs	r3, r0
    e7cc:	4313      	orrs	r3, r2
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    e7ce:	4a0a      	ldr	r2, [pc, #40]	; (e7f8 <radio_pkt_configure+0x5c>)
    e7d0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    e7d4:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    e7d8:	4b08      	ldr	r3, [pc, #32]	; (e7fc <radio_pkt_configure+0x60>)
    e7da:	4003      	ands	r3, r0
    e7dc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    e7e0:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    e7e4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    e7e8:	4319      	orrs	r1, r3
    e7ea:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    e7ee:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    e7f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    e7f4:	e7dd      	b.n	e7b2 <radio_pkt_configure+0x16>
    e7f6:	bf00      	nop
    e7f8:	40001000 	.word	0x40001000
    e7fc:	fef80000 	.word	0xfef80000

0000e800 <radio_pkt_rx_set>:
    e800:	4b01      	ldr	r3, [pc, #4]	; (e808 <radio_pkt_rx_set+0x8>)
    e802:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    e806:	4770      	bx	lr
    e808:	40001000 	.word	0x40001000

0000e80c <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    e80c:	4b01      	ldr	r3, [pc, #4]	; (e814 <radio_pkt_tx_set+0x8>)
    e80e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    e812:	4770      	bx	lr
    e814:	40001000 	.word	0x40001000

0000e818 <radio_tx_ready_delay_get>:
	switch (phy) {
    e818:	2802      	cmp	r0, #2
    e81a:	d004      	beq.n	e826 <radio_tx_ready_delay_get+0xe>
    e81c:	2804      	cmp	r0, #4
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
    e81e:	bf0c      	ite	eq
    e820:	202b      	moveq	r0, #43	; 0x2b
    e822:	2029      	movne	r0, #41	; 0x29
    e824:	4770      	bx	lr
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
    e826:	2028      	movs	r0, #40	; 0x28
}
    e828:	4770      	bx	lr

0000e82a <radio_tx_chain_delay_get>:
}
    e82a:	2001      	movs	r0, #1
    e82c:	4770      	bx	lr

0000e82e <radio_rx_ready_delay_get>:
}
    e82e:	2029      	movs	r0, #41	; 0x29
    e830:	4770      	bx	lr

0000e832 <radio_rx_chain_delay_get>:
	switch (phy) {
    e832:	2802      	cmp	r0, #2
    e834:	d003      	beq.n	e83e <radio_rx_chain_delay_get+0xc>
    e836:	2804      	cmp	r0, #4
    e838:	d003      	beq.n	e842 <radio_rx_chain_delay_get+0x10>
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
    e83a:	200a      	movs	r0, #10
}
    e83c:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
    e83e:	2005      	movs	r0, #5
    e840:	4770      	bx	lr
		if (flags & 0x01) {
    e842:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
    e846:	bf14      	ite	ne
    e848:	201e      	movne	r0, #30
    e84a:	2014      	moveq	r0, #20
    e84c:	4770      	bx	lr
	...

0000e850 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    e850:	4b01      	ldr	r3, [pc, #4]	; (e858 <radio_rx_enable+0x8>)
    e852:	2201      	movs	r2, #1
    e854:	605a      	str	r2, [r3, #4]
    e856:	4770      	bx	lr
    e858:	40001000 	.word	0x40001000

0000e85c <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    e85c:	4b01      	ldr	r3, [pc, #4]	; (e864 <radio_tx_enable+0x8>)
    e85e:	2201      	movs	r2, #1
    e860:	601a      	str	r2, [r3, #0]
    e862:	4770      	bx	lr
    e864:	40001000 	.word	0x40001000

0000e868 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    e868:	4a07      	ldr	r2, [pc, #28]	; (e888 <radio_disable+0x20>)
    e86a:	f44f 6390 	mov.w	r3, #1152	; 0x480
    e86e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    e872:	2301      	movs	r3, #1
    e874:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    e876:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    e878:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    e87c:	2100      	movs	r1, #0
    e87e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    e882:	6113      	str	r3, [r2, #16]
    e884:	4770      	bx	lr
    e886:	bf00      	nop
    e888:	4001f000 	.word	0x4001f000

0000e88c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    e88c:	4b04      	ldr	r3, [pc, #16]	; (e8a0 <radio_status_reset+0x14>)
    e88e:	2200      	movs	r2, #0
    e890:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    e894:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    e898:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    e89c:	4770      	bx	lr
    e89e:	bf00      	nop
    e8a0:	40001000 	.word	0x40001000

0000e8a4 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    e8a4:	4b03      	ldr	r3, [pc, #12]	; (e8b4 <radio_is_ready+0x10>)
    e8a6:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    e8aa:	3000      	adds	r0, #0
    e8ac:	bf18      	it	ne
    e8ae:	2001      	movne	r0, #1
    e8b0:	4770      	bx	lr
    e8b2:	bf00      	nop
    e8b4:	40001000 	.word	0x40001000

0000e8b8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    e8b8:	4b03      	ldr	r3, [pc, #12]	; (e8c8 <radio_is_done+0x10>)
    e8ba:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    e8be:	3000      	adds	r0, #0
    e8c0:	bf18      	it	ne
    e8c2:	2001      	movne	r0, #1
    e8c4:	4770      	bx	lr
    e8c6:	bf00      	nop
    e8c8:	40001000 	.word	0x40001000

0000e8cc <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    e8cc:	4b03      	ldr	r3, [pc, #12]	; (e8dc <radio_is_idle+0x10>)
    e8ce:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    e8d2:	fab0 f080 	clz	r0, r0
    e8d6:	0940      	lsrs	r0, r0, #5
    e8d8:	4770      	bx	lr
    e8da:	bf00      	nop
    e8dc:	40001000 	.word	0x40001000

0000e8e0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    e8e0:	4b04      	ldr	r3, [pc, #16]	; (e8f4 <radio_crc_configure+0x14>)
    e8e2:	f240 1203 	movw	r2, #259	; 0x103
    e8e6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    e8ea:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    e8ee:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    e8f2:	4770      	bx	lr
    e8f4:	40001000 	.word	0x40001000

0000e8f8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    e8f8:	4b03      	ldr	r3, [pc, #12]	; (e908 <radio_crc_is_valid+0x10>)
    e8fa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    e8fe:	3000      	adds	r0, #0
    e900:	bf18      	it	ne
    e902:	2001      	movne	r0, #1
    e904:	4770      	bx	lr
    e906:	bf00      	nop
    e908:	40001000 	.word	0x40001000

0000e90c <radio_pkt_empty_get>:
}
    e90c:	4800      	ldr	r0, [pc, #0]	; (e910 <radio_pkt_empty_get+0x4>)
    e90e:	4770      	bx	lr
    e910:	20003724 	.word	0x20003724

0000e914 <radio_pkt_scratch_get>:
}
    e914:	4800      	ldr	r0, [pc, #0]	; (e918 <radio_pkt_scratch_get+0x4>)
    e916:	4770      	bx	lr
    e918:	20003728 	.word	0x20003728

0000e91c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    e91c:	4b04      	ldr	r3, [pc, #16]	; (e930 <radio_switch_complete_and_rx+0x14>)
    e91e:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    e920:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    e922:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    e926:	4602      	mov	r2, r0
    e928:	4608      	mov	r0, r1
    e92a:	f7ff bd7b 	b.w	e424 <sw_switch.isra.6>
    e92e:	bf00      	nop
    e930:	40001000 	.word	0x40001000

0000e934 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    e934:	4b03      	ldr	r3, [pc, #12]	; (e944 <radio_switch_complete_and_tx+0x10>)
    e936:	2103      	movs	r1, #3
    e938:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    e93c:	4601      	mov	r1, r0
    e93e:	2001      	movs	r0, #1
    e940:	f7ff bd70 	b.w	e424 <sw_switch.isra.6>
    e944:	40001000 	.word	0x40001000

0000e948 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    e948:	4b05      	ldr	r3, [pc, #20]	; (e960 <radio_switch_complete_and_disable+0x18>)
    e94a:	2203      	movs	r2, #3
    e94c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    e950:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    e954:	f44f 6290 	mov.w	r2, #1152	; 0x480
    e958:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    e95c:	4770      	bx	lr
    e95e:	bf00      	nop
    e960:	40001000 	.word	0x40001000

0000e964 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    e964:	4a03      	ldr	r2, [pc, #12]	; (e974 <radio_rssi_measure+0x10>)
    e966:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    e96a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    e96e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    e972:	4770      	bx	lr
    e974:	40001000 	.word	0x40001000

0000e978 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    e978:	4b01      	ldr	r3, [pc, #4]	; (e980 <radio_rssi_get+0x8>)
    e97a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    e97e:	4770      	bx	lr
    e980:	40001000 	.word	0x40001000

0000e984 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    e984:	4b02      	ldr	r3, [pc, #8]	; (e990 <radio_rssi_status_reset+0xc>)
    e986:	2200      	movs	r2, #0
    e988:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    e98c:	4770      	bx	lr
    e98e:	bf00      	nop
    e990:	40001000 	.word	0x40001000

0000e994 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    e994:	4b03      	ldr	r3, [pc, #12]	; (e9a4 <radio_rssi_is_ready+0x10>)
    e996:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    e99a:	3000      	adds	r0, #0
    e99c:	bf18      	it	ne
    e99e:	2001      	movne	r0, #1
    e9a0:	4770      	bx	lr
    e9a2:	bf00      	nop
    e9a4:	40001000 	.word	0x40001000

0000e9a8 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    e9a8:	b530      	push	{r4, r5, lr}
    e9aa:	2400      	movs	r4, #0
    e9ac:	00a3      	lsls	r3, r4, #2
    e9ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e9b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    e9b6:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    e9b8:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    e9bc:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    e9be:	8895      	ldrh	r5, [r2, #4]
    e9c0:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    e9c4:	2c08      	cmp	r4, #8
		bdaddr += 6;
    e9c6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    e9ca:	d1ef      	bne.n	e9ac <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    e9cc:	4b02      	ldr	r3, [pc, #8]	; (e9d8 <radio_filter_configure+0x30>)
    e9ce:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    e9d2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    e9d6:	bd30      	pop	{r4, r5, pc}
    e9d8:	40001000 	.word	0x40001000

0000e9dc <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    e9dc:	4a03      	ldr	r2, [pc, #12]	; (e9ec <radio_filter_disable+0x10>)
    e9de:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    e9e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    e9e6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    e9ea:	4770      	bx	lr
    e9ec:	40001000 	.word	0x40001000

0000e9f0 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    e9f0:	4b02      	ldr	r3, [pc, #8]	; (e9fc <radio_filter_status_reset+0xc>)
    e9f2:	2200      	movs	r2, #0
    e9f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    e9f8:	4770      	bx	lr
    e9fa:	bf00      	nop
    e9fc:	40001000 	.word	0x40001000

0000ea00 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    ea00:	4b03      	ldr	r3, [pc, #12]	; (ea10 <radio_filter_has_match+0x10>)
    ea02:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    ea06:	3000      	adds	r0, #0
    ea08:	bf18      	it	ne
    ea0a:	2001      	movne	r0, #1
    ea0c:	4770      	bx	lr
    ea0e:	bf00      	nop
    ea10:	40001000 	.word	0x40001000

0000ea14 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    ea14:	4b01      	ldr	r3, [pc, #4]	; (ea1c <radio_filter_match_get+0x8>)
    ea16:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    ea1a:	4770      	bx	lr
    ea1c:	40001000 	.word	0x40001000

0000ea20 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    ea20:	4b04      	ldr	r3, [pc, #16]	; (ea34 <radio_bc_configure+0x14>)
    ea22:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    ea26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ea2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ea2e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ea32:	4770      	bx	lr
    ea34:	40001000 	.word	0x40001000

0000ea38 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    ea38:	4b05      	ldr	r3, [pc, #20]	; (ea50 <radio_tmr_status_reset+0x18>)
    ea3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    ea3e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    ea42:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    ea46:	4a03      	ldr	r2, [pc, #12]	; (ea54 <radio_tmr_status_reset+0x1c>)
    ea48:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ea4c:	4770      	bx	lr
    ea4e:	bf00      	nop
    ea50:	4000b000 	.word	0x4000b000
    ea54:	0004207f 	.word	0x0004207f

0000ea58 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    ea58:	4b03      	ldr	r3, [pc, #12]	; (ea68 <radio_tmr_tifs_set+0x10>)
    ea5a:	4a04      	ldr	r2, [pc, #16]	; (ea6c <radio_tmr_tifs_set+0x14>)
    ea5c:	781b      	ldrb	r3, [r3, #0]
    ea5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    ea62:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    ea66:	4770      	bx	lr
    ea68:	20003834 	.word	0x20003834
    ea6c:	40009000 	.word	0x40009000

0000ea70 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    ea74:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    ea78:	4c27      	ldr	r4, [pc, #156]	; (eb18 <radio_tmr_start+0xa8>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    ea7a:	4d28      	ldr	r5, [pc, #160]	; (eb1c <radio_tmr_start+0xac>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    ea7c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    ea80:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    ea82:	bf88      	it	hi
    ea84:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	EVENT_TIMER->TASKS_CLEAR = 1;
    ea88:	4b25      	ldr	r3, [pc, #148]	; (eb20 <radio_tmr_start+0xb0>)
	remainder /= 1000000UL;
    ea8a:	4c26      	ldr	r4, [pc, #152]	; (eb24 <radio_tmr_start+0xb4>)
		remainder += 30517578UL;
    ea8c:	bf82      	ittt	hi
    ea8e:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    ea92:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    ea96:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    ea9a:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    ea9c:	fbb2 f4f4 	udiv	r4, r2, r4
	EVENT_TIMER->MODE = 0;
    eaa0:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    eaa2:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    eaa4:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    eaa8:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    eaaa:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    eaae:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    eab2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    eab6:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    eaba:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    eabe:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    eac2:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    eac6:	f505 35a0 	add.w	r5, r5, #81920	; 0x14000
    eaca:	4917      	ldr	r1, [pc, #92]	; (eb28 <radio_tmr_start+0xb8>)
    eacc:	f8c5 1518 	str.w	r1, [r5, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    ead0:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    ead4:	f8c5 2504 	str.w	r2, [r5, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    ead8:	f7ff fc8c 	bl	e3f4 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    eadc:	4b13      	ldr	r3, [pc, #76]	; (eb2c <radio_tmr_start+0xbc>)
    eade:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    eae0:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    eae4:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    eae8:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    eaec:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    eaee:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    eaf2:	3b74      	subs	r3, #116	; 0x74
    eaf4:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    eaf8:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    eafc:	f8c5 354c 	str.w	r3, [r5, #1356]	; 0x54c
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    eb00:	f44f 6310 	mov.w	r3, #2304	; 0x900
    eb04:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    eb08:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    eb0c:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    eb10:	4620      	mov	r0, r4
    eb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb16:	bf00      	nop
    eb18:	7ff0bdbf 	.word	0x7ff0bdbf
    eb1c:	4000b000 	.word	0x4000b000
    eb20:	40008000 	.word	0x40008000
    eb24:	000f4240 	.word	0x000f4240
    eb28:	4000b148 	.word	0x4000b148
    eb2c:	40009000 	.word	0x40009000

0000eb30 <radio_tmr_start_us>:

void radio_tmr_start_us(u8_t trx, u32_t us)
{
	EVENT_TIMER->CC[0] = us;
    eb30:	4b02      	ldr	r3, [pc, #8]	; (eb3c <radio_tmr_start_us+0xc>)
    eb32:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    eb36:	f7ff bc5d 	b.w	e3f4 <hal_radio_enable_on_tick_ppi_config_and_enable>
    eb3a:	bf00      	nop
    eb3c:	40008000 	.word	0x40008000

0000eb40 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    eb40:	4a04      	ldr	r2, [pc, #16]	; (eb54 <radio_tmr_stop+0x14>)
    eb42:	2301      	movs	r3, #1
    eb44:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    eb46:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    eb48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    eb4c:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    eb4e:	6113      	str	r3, [r2, #16]
    eb50:	4770      	bx	lr
    eb52:	bf00      	nop
    eb54:	40008000 	.word	0x40008000

0000eb58 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    eb58:	4b0c      	ldr	r3, [pc, #48]	; (eb8c <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    eb5a:	4a0d      	ldr	r2, [pc, #52]	; (eb90 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    eb5c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    eb60:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    eb64:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    eb68:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    eb6c:	3240      	adds	r2, #64	; 0x40
    eb6e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    eb72:	f502 7280 	add.w	r2, r2, #256	; 0x100
    eb76:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    eb7a:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    eb7e:	3a34      	subs	r2, #52	; 0x34
    eb80:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    eb84:	2218      	movs	r2, #24
    eb86:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    eb8a:	4770      	bx	lr
    eb8c:	40008000 	.word	0x40008000
    eb90:	40001104 	.word	0x40001104

0000eb94 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    eb94:	4b0b      	ldr	r3, [pc, #44]	; (ebc4 <radio_tmr_aa_capture+0x30>)
    eb96:	4a0c      	ldr	r2, [pc, #48]	; (ebc8 <radio_tmr_aa_capture+0x34>)
    eb98:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    eb9c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    eba0:	3240      	adds	r2, #64	; 0x40
    eba2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    eba6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    ebaa:	3a3c      	subs	r2, #60	; 0x3c
    ebac:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    ebb0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ebb4:	3240      	adds	r2, #64	; 0x40
    ebb6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    ebba:	220c      	movs	r2, #12
    ebbc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ebc0:	4770      	bx	lr
    ebc2:	bf00      	nop
    ebc4:	4001f000 	.word	0x4001f000
    ebc8:	40001100 	.word	0x40001100

0000ebcc <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    ebcc:	4b01      	ldr	r3, [pc, #4]	; (ebd4 <radio_tmr_aa_get+0x8>)
    ebce:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    ebd2:	4770      	bx	lr
    ebd4:	40008000 	.word	0x40008000

0000ebd8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    ebd8:	4b01      	ldr	r3, [pc, #4]	; (ebe0 <radio_tmr_aa_save+0x8>)
    ebda:	6018      	str	r0, [r3, #0]
    ebdc:	4770      	bx	lr
    ebde:	bf00      	nop
    ebe0:	2000382c 	.word	0x2000382c

0000ebe4 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    ebe4:	4b01      	ldr	r3, [pc, #4]	; (ebec <radio_tmr_aa_restore+0x8>)
    ebe6:	6818      	ldr	r0, [r3, #0]
    ebe8:	4770      	bx	lr
    ebea:	bf00      	nop
    ebec:	2000382c 	.word	0x2000382c

0000ebf0 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    ebf0:	4b01      	ldr	r3, [pc, #4]	; (ebf8 <radio_tmr_ready_get+0x8>)
    ebf2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    ebf6:	4770      	bx	lr
    ebf8:	40008000 	.word	0x40008000

0000ebfc <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    ebfc:	4b06      	ldr	r3, [pc, #24]	; (ec18 <radio_tmr_end_capture+0x1c>)
    ebfe:	4a07      	ldr	r2, [pc, #28]	; (ec1c <radio_tmr_end_capture+0x20>)
    ec00:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    ec04:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ec08:	323c      	adds	r2, #60	; 0x3c
    ec0a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    ec0e:	2220      	movs	r2, #32
    ec10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ec14:	4770      	bx	lr
    ec16:	bf00      	nop
    ec18:	4001f000 	.word	0x4001f000
    ec1c:	4000110c 	.word	0x4000110c

0000ec20 <radio_tmr_end_get>:
    ec20:	4b01      	ldr	r3, [pc, #4]	; (ec28 <radio_tmr_end_get+0x8>)
    ec22:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    ec26:	4770      	bx	lr
    ec28:	40008000 	.word	0x40008000

0000ec2c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    ec2c:	4b01      	ldr	r3, [pc, #4]	; (ec34 <radio_tmr_tifs_base_get+0x8>)
    ec2e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    ec32:	4770      	bx	lr
    ec34:	40008000 	.word	0x40008000

0000ec38 <radio_tmr_sample>:

	tmr_sample_val = EVENT_TIMER->CC[HAL_EVENT_TIMER_SAMPLE_CC_OFFSET];
	EVENT_TIMER->CC[HAL_EVENT_TIMER_SAMPLE_CC_OFFSET] = cc;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	EVENT_TIMER->TASKS_CAPTURE[HAL_EVENT_TIMER_SAMPLE_CC_OFFSET] = 1;
    ec38:	4b01      	ldr	r3, [pc, #4]	; (ec40 <radio_tmr_sample+0x8>)
    ec3a:	2201      	movs	r2, #1
    ec3c:	64da      	str	r2, [r3, #76]	; 0x4c
    ec3e:	4770      	bx	lr
    ec40:	40008000 	.word	0x40008000

0000ec44 <radio_tmr_sample_get>:
u32_t radio_tmr_sample_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return tmr_sample_val;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[HAL_EVENT_TIMER_SAMPLE_CC_OFFSET];
    ec44:	4b01      	ldr	r3, [pc, #4]	; (ec4c <radio_tmr_sample_get+0x8>)
    ec46:	f8d3 054c 	ldr.w	r0, [r3, #1356]	; 0x54c
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
    ec4a:	4770      	bx	lr
    ec4c:	40008000 	.word	0x40008000

0000ec50 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ec50:	4b21      	ldr	r3, [pc, #132]	; (ecd8 <radio_ccm_rx_pkt_set+0x88>)
{
    ec52:	b510      	push	{r4, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ec54:	2400      	movs	r4, #0
    ec56:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ec5a:	2402      	movs	r4, #2
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    ec5c:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ec5e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
    ec62:	d003      	beq.n	ec6c <radio_ccm_rx_pkt_set+0x1c>
    ec64:	2904      	cmp	r1, #4
    ec66:	d024      	beq.n	ecb2 <radio_ccm_rx_pkt_set+0x62>
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    ec68:	491c      	ldr	r1, [pc, #112]	; (ecdc <radio_ccm_rx_pkt_set+0x8c>)
    ec6a:	e000      	b.n	ec6e <radio_ccm_rx_pkt_set+0x1e>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    ec6c:	491c      	ldr	r1, [pc, #112]	; (ece0 <radio_ccm_rx_pkt_set+0x90>)
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    ec6e:	4b1a      	ldr	r3, [pc, #104]	; (ecd8 <radio_ccm_rx_pkt_set+0x88>)
    ec70:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    ec74:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    ec78:	481a      	ldr	r0, [pc, #104]	; (ece4 <radio_ccm_rx_pkt_set+0x94>)
    ec7a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    ec7e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ec82:	4a19      	ldr	r2, [pc, #100]	; (ece8 <radio_ccm_rx_pkt_set+0x98>)
    ec84:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    ec88:	2200      	movs	r2, #0
    ec8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    ec8e:	4917      	ldr	r1, [pc, #92]	; (ecec <radio_ccm_rx_pkt_set+0x9c>)
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    ec90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    ec94:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    ec98:	4a15      	ldr	r2, [pc, #84]	; (ecf0 <radio_ccm_rx_pkt_set+0xa0>)
    ec9a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    ec9e:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    eca2:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    eca6:	2140      	movs	r1, #64	; 0x40
    eca8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    ecac:	2201      	movs	r2, #1
    ecae:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    ecb0:	bd10      	pop	{r4, pc}
		NRF_CCM->RATEOVERRIDE =
    ecb2:	2103      	movs	r1, #3
    ecb4:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_EVT =
    ecb8:	4b0d      	ldr	r3, [pc, #52]	; (ecf0 <radio_ccm_rx_pkt_set+0xa0>)
    ecba:	490e      	ldr	r1, [pc, #56]	; (ecf4 <radio_ccm_rx_pkt_set+0xa4>)
    ecbc:	f8c3 1578 	str.w	r1, [r3, #1400]	; 0x578
		HAL_TRIGGER_RATEOVERRIDE_PPI_REGISTER_TASK =
    ecc0:	f501 415e 	add.w	r1, r1, #56832	; 0xde00
    ecc4:	31bc      	adds	r1, #188	; 0xbc
    ecc6:	f8c3 157c 	str.w	r1, [r3, #1404]	; 0x57c
		NRF_PPI->CHENSET = HAL_TRIGGER_RATEOVERRIDE_PPI_ENABLE;
    ecca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    ecce:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		mode |= (CCM_MODE_DATARATE_125Kbps <<
    ecd2:	4909      	ldr	r1, [pc, #36]	; (ecf8 <radio_ccm_rx_pkt_set+0xa8>)
		break;
    ecd4:	e7cb      	b.n	ec6e <radio_ccm_rx_pkt_set+0x1e>
    ecd6:	bf00      	nop
    ecd8:	4000f000 	.word	0x4000f000
    ecdc:	01000001 	.word	0x01000001
    ece0:	01010001 	.word	0x01010001
    ece4:	20003728 	.word	0x20003728
    ece8:	20003618 	.word	0x20003618
    ecec:	40001104 	.word	0x40001104
    ecf0:	4001f000 	.word	0x4001f000
    ecf4:	40001150 	.word	0x40001150
    ecf8:	01020001 	.word	0x01020001

0000ecfc <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    ecfc:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ecfe:	4b0e      	ldr	r3, [pc, #56]	; (ed38 <radio_ccm_tx_pkt_set+0x3c>)
    ed00:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ed02:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ed04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ed08:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    ed0c:	4c0b      	ldr	r4, [pc, #44]	; (ed3c <radio_ccm_tx_pkt_set+0x40>)
    ed0e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    ed12:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    ed16:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    ed1a:	4809      	ldr	r0, [pc, #36]	; (ed40 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ed1c:	4909      	ldr	r1, [pc, #36]	; (ed44 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    ed1e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ed22:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    ed26:	2101      	movs	r1, #1
    ed28:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    ed2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    ed30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    ed34:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    ed36:	bd10      	pop	{r4, pc}
    ed38:	4000f000 	.word	0x4000f000
    ed3c:	01010000 	.word	0x01010000
    ed40:	20003728 	.word	0x20003728
    ed44:	20003618 	.word	0x20003618

0000ed48 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    ed48:	4b0c      	ldr	r3, [pc, #48]	; (ed7c <radio_ccm_is_done+0x34>)
    ed4a:	2202      	movs	r2, #2
    ed4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    ed50:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    ed54:	b16a      	cbz	r2, ed72 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    ed56:	2202      	movs	r2, #2
    ed58:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    ed5c:	4a08      	ldr	r2, [pc, #32]	; (ed80 <radio_ccm_is_done+0x38>)
    ed5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ed62:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    ed66:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    ed6a:	fab0 f080 	clz	r0, r0
    ed6e:	0940      	lsrs	r0, r0, #5
    ed70:	4770      	bx	lr
		__WFE();
    ed72:	bf20      	wfe
		__SEV();
    ed74:	bf40      	sev
		__WFE();
    ed76:	bf20      	wfe
    ed78:	e7ea      	b.n	ed50 <radio_ccm_is_done+0x8>
    ed7a:	bf00      	nop
    ed7c:	4000f000 	.word	0x4000f000
    ed80:	e000e100 	.word	0xe000e100

0000ed84 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    ed84:	4b03      	ldr	r3, [pc, #12]	; (ed94 <radio_ccm_mic_is_valid+0x10>)
    ed86:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ed8a:	3000      	adds	r0, #0
    ed8c:	bf18      	it	ne
    ed8e:	2001      	movne	r0, #1
    ed90:	4770      	bx	lr
    ed92:	bf00      	nop
    ed94:	4000f000 	.word	0x4000f000

0000ed98 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    ed98:	b538      	push	{r3, r4, r5, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    ed9a:	4c13      	ldr	r4, [pc, #76]	; (ede8 <radio_ar_configure+0x50>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (u32_t)irk;
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    ed9c:	4d13      	ldr	r5, [pc, #76]	; (edec <radio_ar_configure+0x54>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    ed9e:	2303      	movs	r3, #3
    eda0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
    eda4:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    eda8:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    edac:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    edb0:	3b01      	subs	r3, #1
    edb2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];

	NRF_AAR->EVENTS_END = 0;
    edb6:	2100      	movs	r1, #0
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    edb8:	4b0d      	ldr	r3, [pc, #52]	; (edf0 <radio_ar_configure+0x58>)
    edba:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	NRF_AAR->EVENTS_RESOLVED = 0;
	NRF_AAR->EVENTS_NOTRESOLVED = 0;

	radio_bc_configure(64);
    edbe:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->EVENTS_END = 0;
    edc0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    edc4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    edc8:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
	radio_bc_configure(64);
    edcc:	f7ff fe28 	bl	ea20 <radio_bc_configure>
	radio_bc_status_reset();

	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
    edd0:	4b08      	ldr	r3, [pc, #32]	; (edf4 <radio_ar_configure+0x5c>)
    edd2:	4a09      	ldr	r2, [pc, #36]	; (edf8 <radio_ar_configure+0x60>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
    edd4:	f8c5 1128 	str.w	r1, [r5, #296]	; 0x128
	HAL_TRIGGER_AAR_PPI_REGISTER_EVT = HAL_TRIGGER_AAR_PPI_EVT;
    edd8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
    eddc:	2240      	movs	r2, #64	; 0x40
	HAL_TRIGGER_AAR_PPI_REGISTER_TASK = HAL_TRIGGER_AAR_PPI_TASK;
    edde:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_AAR_PPI_ENABLE;
    ede2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ede6:	bd38      	pop	{r3, r4, r5, pc}
    ede8:	4000f000 	.word	0x4000f000
    edec:	40001000 	.word	0x40001000
    edf0:	20003614 	.word	0x20003614
    edf4:	4001f000 	.word	0x4001f000
    edf8:	40001128 	.word	0x40001128

0000edfc <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    edfc:	4b01      	ldr	r3, [pc, #4]	; (ee04 <radio_ar_match_get+0x8>)
    edfe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ee02:	4770      	bx	lr
    ee04:	4000f000 	.word	0x4000f000

0000ee08 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    ee08:	4a04      	ldr	r2, [pc, #16]	; (ee1c <radio_ar_status_reset+0x14>)
    ee0a:	2300      	movs	r3, #0
    ee0c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    ee10:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    ee14:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    ee18:	4770      	bx	lr
    ee1a:	bf00      	nop
    ee1c:	40001000 	.word	0x40001000

0000ee20 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    ee20:	4b08      	ldr	r3, [pc, #32]	; (ee44 <radio_ar_has_match+0x24>)
    ee22:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    ee26:	b160      	cbz	r0, ee42 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    ee28:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    ee2c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    ee30:	b138      	cbz	r0, ee42 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    ee32:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    ee36:	b120      	cbz	r0, ee42 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    ee38:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    ee3c:	fab0 f080 	clz	r0, r0
    ee40:	0940      	lsrs	r0, r0, #5
}
    ee42:	4770      	bx	lr
    ee44:	40001000 	.word	0x40001000

0000ee48 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    ee48:	2901      	cmp	r1, #1
{
    ee4a:	b510      	push	{r4, lr}
    ee4c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    ee4e:	d003      	beq.n	ee58 <mayfly_enable_cb+0x10>
    ee50:	211c      	movs	r1, #28
    ee52:	4806      	ldr	r0, [pc, #24]	; (ee6c <mayfly_enable_cb+0x24>)
    ee54:	f7f1 fd2c 	bl	8b0 <bt_ctlr_assert_handle>

	if (enable) {
		irq_enable(SWI4_IRQn);
    ee58:	2018      	movs	r0, #24
	if (enable) {
    ee5a:	b11c      	cbz	r4, ee64 <mayfly_enable_cb+0x1c>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    ee5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(SWI4_IRQn);
    ee60:	f7f1 bf70 	b.w	d44 <_arch_irq_enable>
}
    ee64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(SWI4_IRQn);
    ee68:	f7f1 bf7c 	b.w	d64 <_arch_irq_disable>
    ee6c:	00010caa 	.word	0x00010caa

0000ee70 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
    ee70:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
    ee72:	b139      	cbz	r1, ee84 <mayfly_is_enabled+0x14>
    ee74:	2901      	cmp	r1, #1
    ee76:	d00a      	beq.n	ee8e <mayfly_is_enabled+0x1e>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    ee78:	2131      	movs	r1, #49	; 0x31
    ee7a:	4806      	ldr	r0, [pc, #24]	; (ee94 <mayfly_is_enabled+0x24>)
    ee7c:	f7f1 fd18 	bl	8b0 <bt_ctlr_assert_handle>
		break;
	}

	return 0;
}
    ee80:	2000      	movs	r0, #0
    ee82:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
    ee84:	200b      	movs	r0, #11
}
    ee86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return irq_is_enabled(SWI4_IRQn);
    ee8a:	f7f1 bf7f 	b.w	d8c <_arch_irq_is_enabled>
    ee8e:	2018      	movs	r0, #24
    ee90:	e7f9      	b.n	ee86 <mayfly_is_enabled+0x16>
    ee92:	bf00      	nop
    ee94:	00010caa 	.word	0x00010caa

0000ee98 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    ee98:	4288      	cmp	r0, r1
    ee9a:	d00a      	beq.n	eeb2 <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    ee9c:	b918      	cbnz	r0, eea6 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    ee9e:	1e4b      	subs	r3, r1, #1
    eea0:	4258      	negs	r0, r3
    eea2:	4158      	adcs	r0, r3
    eea4:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    eea6:	2801      	cmp	r0, #1
    eea8:	d105      	bne.n	eeb6 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    eeaa:	fab1 f081 	clz	r0, r1
    eeae:	0940      	lsrs	r0, r0, #5
    eeb0:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    eeb2:	2001      	movs	r0, #1
    eeb4:	4770      	bx	lr
    eeb6:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    eeb8:	4770      	bx	lr
	...

0000eebc <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    eebc:	b129      	cbz	r1, eeca <mayfly_pend+0xe>
    eebe:	2901      	cmp	r1, #1
    eec0:	d009      	beq.n	eed6 <mayfly_pend+0x1a>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    eec2:	2154      	movs	r1, #84	; 0x54
    eec4:	4805      	ldr	r0, [pc, #20]	; (eedc <mayfly_pend+0x20>)
    eec6:	f7f1 bcf3 	b.w	8b0 <bt_ctlr_assert_handle>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    eeca:	f44f 6200 	mov.w	r2, #2048	; 0x800
    eece:	4b04      	ldr	r3, [pc, #16]	; (eee0 <mayfly_pend+0x24>)
    eed0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    eed4:	4770      	bx	lr
    eed6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    eeda:	e7f8      	b.n	eece <mayfly_pend+0x12>
    eedc:	00010caa 	.word	0x00010caa
    eee0:	e000e100 	.word	0xe000e100

0000eee4 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    eee4:	2803      	cmp	r0, #3
{
    eee6:	b510      	push	{r4, lr}
    eee8:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
    eeea:	d903      	bls.n	eef4 <hal_ticker_instance0_caller_id_get+0x10>
    eeec:	2129      	movs	r1, #41	; 0x29
    eeee:	4806      	ldr	r0, [pc, #24]	; (ef08 <hal_ticker_instance0_caller_id_get+0x24>)
    eef0:	f7f1 fcde 	bl	8b0 <bt_ctlr_assert_handle>

	caller_id = caller_id_lut[user_id];
    eef4:	4b05      	ldr	r3, [pc, #20]	; (ef0c <hal_ticker_instance0_caller_id_get+0x28>)
    eef6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    eef8:	b91c      	cbnz	r4, ef02 <hal_ticker_instance0_caller_id_get+0x1e>
    eefa:	212c      	movs	r1, #44	; 0x2c
    eefc:	4802      	ldr	r0, [pc, #8]	; (ef08 <hal_ticker_instance0_caller_id_get+0x24>)
    eefe:	f7f1 fcd7 	bl	8b0 <bt_ctlr_assert_handle>

	return caller_id;
}
    ef02:	4620      	mov	r0, r4
    ef04:	bd10      	pop	{r4, pc}
    ef06:	bf00      	nop
    ef08:	00010cee 	.word	0x00010cee
    ef0c:	00010cea 	.word	0x00010cea

0000ef10 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    ef10:	3802      	subs	r0, #2
{
    ef12:	b410      	push	{r4}
    ef14:	461c      	mov	r4, r3
	switch (caller_id) {
    ef16:	2803      	cmp	r0, #3
    ef18:	d831      	bhi.n	ef7e <hal_ticker_instance0_sched+0x6e>
    ef1a:	e8df f000 	tbb	[pc, r0]
    ef1e:	1002      	.short	0x1002
    ef20:	2718      	.short	0x2718
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    ef22:	2903      	cmp	r1, #3
    ef24:	d106      	bne.n	ef34 <hal_ticker_instance0_sched+0x24>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    ef26:	4b17      	ldr	r3, [pc, #92]	; (ef84 <hal_ticker_instance0_sched+0x74>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    ef28:	2100      	movs	r1, #0
			m.param = instance;
    ef2a:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    ef2c:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    ef2e:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    ef30:	f7f2 bfd8 	b.w	1ee4 <mayfly_enqueue>
			LL_ASSERT(0);
    ef34:	214b      	movs	r1, #75	; 0x4b
		LL_ASSERT(0);
    ef36:	4814      	ldr	r0, [pc, #80]	; (ef88 <hal_ticker_instance0_sched+0x78>)
}
    ef38:	bc10      	pop	{r4}
		LL_ASSERT(0);
    ef3a:	f7f1 bcb9 	b.w	8b0 <bt_ctlr_assert_handle>
		switch (callee_id) {
    ef3e:	2904      	cmp	r1, #4
    ef40:	d103      	bne.n	ef4a <hal_ticker_instance0_sched+0x3a>
			m.param = instance;
    ef42:	4b12      	ldr	r3, [pc, #72]	; (ef8c <hal_ticker_instance0_sched+0x7c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    ef44:	2101      	movs	r1, #1
			m.param = instance;
    ef46:	609c      	str	r4, [r3, #8]
    ef48:	e7f0      	b.n	ef2c <hal_ticker_instance0_sched+0x1c>
			LL_ASSERT(0);
    ef4a:	2162      	movs	r1, #98	; 0x62
    ef4c:	e7f3      	b.n	ef36 <hal_ticker_instance0_sched+0x26>
		switch (callee_id) {
    ef4e:	2903      	cmp	r1, #3
    ef50:	d003      	beq.n	ef5a <hal_ticker_instance0_sched+0x4a>
    ef52:	2904      	cmp	r1, #4
    ef54:	d006      	beq.n	ef64 <hal_ticker_instance0_sched+0x54>
			LL_ASSERT(0);
    ef56:	2188      	movs	r1, #136	; 0x88
    ef58:	e7ed      	b.n	ef36 <hal_ticker_instance0_sched+0x26>
			m.param = instance;
    ef5a:	4b0d      	ldr	r3, [pc, #52]	; (ef90 <hal_ticker_instance0_sched+0x80>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    ef5c:	2100      	movs	r1, #0
			m.param = instance;
    ef5e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    ef60:	2001      	movs	r0, #1
    ef62:	e7e4      	b.n	ef2e <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    ef64:	4b0b      	ldr	r3, [pc, #44]	; (ef94 <hal_ticker_instance0_sched+0x84>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    ef66:	2101      	movs	r1, #1
			m.param = instance;
    ef68:	609c      	str	r4, [r3, #8]
    ef6a:	e7f9      	b.n	ef60 <hal_ticker_instance0_sched+0x50>
		switch (callee_id) {
    ef6c:	2904      	cmp	r1, #4
    ef6e:	d104      	bne.n	ef7a <hal_ticker_instance0_sched+0x6a>
			m.param = instance;
    ef70:	4b09      	ldr	r3, [pc, #36]	; (ef98 <hal_ticker_instance0_sched+0x88>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    ef72:	2101      	movs	r1, #1
			m.param = instance;
    ef74:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    ef76:	2003      	movs	r0, #3
    ef78:	e7d9      	b.n	ef2e <hal_ticker_instance0_sched+0x1e>
			LL_ASSERT(0);
    ef7a:	21a0      	movs	r1, #160	; 0xa0
    ef7c:	e7db      	b.n	ef36 <hal_ticker_instance0_sched+0x26>
		LL_ASSERT(0);
    ef7e:	21a6      	movs	r1, #166	; 0xa6
    ef80:	e7d9      	b.n	ef36 <hal_ticker_instance0_sched+0x26>
    ef82:	bf00      	nop
    ef84:	200055c8 	.word	0x200055c8
    ef88:	00010cee 	.word	0x00010cee
    ef8c:	200055d8 	.word	0x200055d8
    ef90:	200055e8 	.word	0x200055e8
    ef94:	200055f8 	.word	0x200055f8
    ef98:	20005608 	.word	0x20005608

0000ef9c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    ef9c:	4601      	mov	r1, r0
    ef9e:	2000      	movs	r0, #0
    efa0:	f7ff b9d8 	b.w	e354 <cntr_cmp_set>

0000efa4 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    efa4:	4770      	bx	lr
	...

0000efa8 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    efa8:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    efaa:	4b04      	ldr	r3, [pc, #16]	; (efbc <net_buf_id+0x14>)
    efac:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    efb0:	69db      	ldr	r3, [r3, #28]
    efb2:	1ac0      	subs	r0, r0, r3
}
    efb4:	4b02      	ldr	r3, [pc, #8]	; (efc0 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    efb6:	10c0      	asrs	r0, r0, #3
}
    efb8:	4358      	muls	r0, r3
    efba:	4770      	bx	lr
    efbc:	20005734 	.word	0x20005734
    efc0:	aaaaaaab 	.word	0xaaaaaaab

0000efc4 <fixed_data_alloc>:
{
    efc4:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    efc6:	4b09      	ldr	r3, [pc, #36]	; (efec <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    efc8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    efca:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    efce:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    efd0:	699b      	ldr	r3, [r3, #24]
    efd2:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    efd4:	6823      	ldr	r3, [r4, #0]
    efd6:	429a      	cmp	r2, r3
    efd8:	bf94      	ite	ls
    efda:	600a      	strls	r2, [r1, #0]
    efdc:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    efde:	f7ff ffe3 	bl	efa8 <net_buf_id>
    efe2:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    efe6:	fb02 3000 	mla	r0, r2, r0, r3
    efea:	bd10      	pop	{r4, pc}
    efec:	20005734 	.word	0x20005734

0000eff0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    eff0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    eff4:	4605      	mov	r5, r0
    eff6:	9101      	str	r1, [sp, #4]
    eff8:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    effa:	f000 fd7d 	bl	faf8 <_impl_k_uptime_get_32>
    effe:	4607      	mov	r7, r0
	__asm__ volatile(
    f000:	f04f 0320 	mov.w	r3, #32
    f004:	f3ef 8811 	mrs	r8, BASEPRI
    f008:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    f00c:	8a6b      	ldrh	r3, [r5, #18]
    f00e:	2b00      	cmp	r3, #0
    f010:	d03d      	beq.n	f08e <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    f012:	8a2a      	ldrh	r2, [r5, #16]
    f014:	429a      	cmp	r2, r3
    f016:	d92a      	bls.n	f06e <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    f018:	2100      	movs	r1, #0
    f01a:	4628      	mov	r0, r5
    f01c:	f000 fac7 	bl	f5ae <k_queue_get>
			if (buf) {
    f020:	4604      	mov	r4, r0
    f022:	b320      	cbz	r0, f06e <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    f024:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    f028:	9b01      	ldr	r3, [sp, #4]
    f02a:	2b00      	cmp	r3, #0
    f02c:	d03c      	beq.n	f0a8 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    f02e:	1c73      	adds	r3, r6, #1
    f030:	2b01      	cmp	r3, #1
    f032:	d906      	bls.n	f042 <net_buf_alloc_len+0x52>
    f034:	f000 fd60 	bl	faf8 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    f038:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    f03a:	42b0      	cmp	r0, r6
    f03c:	bf94      	ite	ls
    f03e:	1a36      	subls	r6, r6, r0
    f040:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    f042:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    f044:	4f1e      	ldr	r7, [pc, #120]	; (f0c0 <net_buf_alloc_len+0xd0>)
    f046:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    f04a:	4632      	mov	r2, r6
    f04c:	699b      	ldr	r3, [r3, #24]
    f04e:	681b      	ldr	r3, [r3, #0]
    f050:	a901      	add	r1, sp, #4
    f052:	681b      	ldr	r3, [r3, #0]
    f054:	4620      	mov	r0, r4
    f056:	4798      	blx	r3
    f058:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    f05a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    f05c:	bb28      	cbnz	r0, f0aa <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    f05e:	79a0      	ldrb	r0, [r4, #6]
    f060:	4621      	mov	r1, r4
    f062:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    f066:	f000 fa82 	bl	f56e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    f06a:	462c      	mov	r4, r5
    f06c:	e018      	b.n	f0a0 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    f06e:	8a6b      	ldrh	r3, [r5, #18]
    f070:	1e5a      	subs	r2, r3, #1
    f072:	826a      	strh	r2, [r5, #18]
    f074:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    f078:	8a2c      	ldrh	r4, [r5, #16]
    f07a:	1ae4      	subs	r4, r4, r3
    f07c:	69eb      	ldr	r3, [r5, #28]
    f07e:	2218      	movs	r2, #24
    f080:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    f084:	4b0e      	ldr	r3, [pc, #56]	; (f0c0 <net_buf_alloc_len+0xd0>)
    f086:	1aed      	subs	r5, r5, r3
    f088:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    f08a:	71a5      	strb	r5, [r4, #6]
		goto success;
    f08c:	e7cc      	b.n	f028 <net_buf_alloc_len+0x38>
    f08e:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    f092:	4631      	mov	r1, r6
    f094:	4628      	mov	r0, r5
    f096:	f000 fa8a 	bl	f5ae <k_queue_get>
	if (!buf) {
    f09a:	4604      	mov	r4, r0
    f09c:	2800      	cmp	r0, #0
    f09e:	d1c3      	bne.n	f028 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    f0a0:	4620      	mov	r0, r4
    f0a2:	b002      	add	sp, #8
    f0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    f0a8:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    f0aa:	2301      	movs	r3, #1
    f0ac:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    f0ae:	2300      	movs	r3, #0
	buf->frags = NULL;
    f0b0:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    f0b2:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    f0b4:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    f0b6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    f0b8:	6923      	ldr	r3, [r4, #16]
    f0ba:	81e2      	strh	r2, [r4, #14]
    f0bc:	60a3      	str	r3, [r4, #8]
	return buf;
    f0be:	e7ef      	b.n	f0a0 <net_buf_alloc_len+0xb0>
    f0c0:	20005734 	.word	0x20005734

0000f0c4 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    f0c4:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    f0c6:	685b      	ldr	r3, [r3, #4]
    f0c8:	460a      	mov	r2, r1
    f0ca:	6819      	ldr	r1, [r3, #0]
    f0cc:	f7ff bf90 	b.w	eff0 <net_buf_alloc_len>

0000f0d0 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    f0d0:	b570      	push	{r4, r5, r6, lr}
    f0d2:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    f0d4:	f000 fa6b 	bl	f5ae <k_queue_get>
	if (!buf) {
    f0d8:	4605      	mov	r5, r0
    f0da:	b128      	cbz	r0, f0e8 <net_buf_get+0x18>
    f0dc:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    f0de:	7963      	ldrb	r3, [r4, #5]
    f0e0:	f013 0301 	ands.w	r3, r3, #1
    f0e4:	d102      	bne.n	f0ec <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    f0e6:	6023      	str	r3, [r4, #0]

	return buf;
}
    f0e8:	4628      	mov	r0, r5
    f0ea:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    f0ec:	2100      	movs	r1, #0
    f0ee:	4630      	mov	r0, r6
    f0f0:	f000 fa5d 	bl	f5ae <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    f0f4:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    f0f6:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    f0f8:	f023 0301 	bic.w	r3, r3, #1
    f0fc:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    f0fe:	4604      	mov	r4, r0
    f100:	e7ed      	b.n	f0de <net_buf_get+0xe>

0000f102 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    f102:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    f104:	460a      	mov	r2, r1
    f106:	6814      	ldr	r4, [r2, #0]
    f108:	b914      	cbnz	r4, f110 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    f10a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    f10c:	f000 ba33 	b.w	f576 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    f110:	7953      	ldrb	r3, [r2, #5]
    f112:	f043 0301 	orr.w	r3, r3, #1
    f116:	7153      	strb	r3, [r2, #5]
    f118:	4622      	mov	r2, r4
    f11a:	e7f4      	b.n	f106 <net_buf_put+0x4>

0000f11c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    f11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f11e:	4d15      	ldr	r5, [pc, #84]	; (f174 <net_buf_unref+0x58>)
    f120:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    f122:	2600      	movs	r6, #0
	while (buf) {
    f124:	b904      	cbnz	r4, f128 <net_buf_unref+0xc>
    f126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    f128:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    f12a:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    f12c:	3b01      	subs	r3, #1
    f12e:	b2db      	uxtb	r3, r3
    f130:	7123      	strb	r3, [r4, #4]
    f132:	2b00      	cmp	r3, #0
    f134:	d1f7      	bne.n	f126 <net_buf_unref+0xa>
		if (buf->__buf) {
    f136:	6921      	ldr	r1, [r4, #16]
    f138:	b159      	cbz	r1, f152 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    f13a:	7963      	ldrb	r3, [r4, #5]
    f13c:	079b      	lsls	r3, r3, #30
    f13e:	d407      	bmi.n	f150 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    f140:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    f142:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    f146:	4620      	mov	r0, r4
    f148:	699b      	ldr	r3, [r3, #24]
    f14a:	681b      	ldr	r3, [r3, #0]
    f14c:	689b      	ldr	r3, [r3, #8]
    f14e:	4798      	blx	r3
			buf->__buf = NULL;
    f150:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    f152:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    f154:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    f156:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    f15a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    f15c:	695b      	ldr	r3, [r3, #20]
    f15e:	b11b      	cbz	r3, f168 <net_buf_unref+0x4c>
			pool->destroy(buf);
    f160:	4620      	mov	r0, r4
    f162:	4798      	blx	r3
{
    f164:	463c      	mov	r4, r7
    f166:	e7dd      	b.n	f124 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    f168:	4621      	mov	r1, r4
    f16a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    f16e:	f000 f9fe 	bl	f56e <k_queue_prepend>
    f172:	e7f7      	b.n	f164 <net_buf_unref+0x48>
    f174:	20005734 	.word	0x20005734

0000f178 <net_buf_simple_add>:
	return buf->data + buf->len;
    f178:	8883      	ldrh	r3, [r0, #4]
    f17a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    f17c:	4419      	add	r1, r3
    f17e:	8081      	strh	r1, [r0, #4]
	return tail;
}
    f180:	18d0      	adds	r0, r2, r3
    f182:	4770      	bx	lr

0000f184 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    f184:	b430      	push	{r4, r5}
    f186:	8883      	ldrh	r3, [r0, #4]
    f188:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    f18a:	189d      	adds	r5, r3, r2
    f18c:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    f18e:	18e0      	adds	r0, r4, r3
}
    f190:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    f192:	f7f1 ba31 	b.w	5f8 <memcpy>

0000f196 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    f196:	8883      	ldrh	r3, [r0, #4]
    f198:	1a5b      	subs	r3, r3, r1
    f19a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    f19c:	6803      	ldr	r3, [r0, #0]
    f19e:	4419      	add	r1, r3
    f1a0:	6001      	str	r1, [r0, #0]
}
    f1a2:	4608      	mov	r0, r1
    f1a4:	4770      	bx	lr

0000f1a6 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    f1a6:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    f1a8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    f1aa:	2101      	movs	r1, #1
	val = buf->data[0];
    f1ac:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    f1ae:	f7ff fff2 	bl	f196 <net_buf_simple_pull>

	return val;
}
    f1b2:	4610      	mov	r0, r2
    f1b4:	bd08      	pop	{r3, pc}

0000f1b6 <net_buf_simple_tailroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    f1b6:	6802      	ldr	r2, [r0, #0]
    f1b8:	6881      	ldr	r1, [r0, #8]
}

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
    f1ba:	88c3      	ldrh	r3, [r0, #6]
    f1bc:	8880      	ldrh	r0, [r0, #4]
	return buf->data - buf->__buf;
    f1be:	1a52      	subs	r2, r2, r1
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
    f1c0:	1a9b      	subs	r3, r3, r2
}
    f1c2:	1a18      	subs	r0, r3, r0
    f1c4:	4770      	bx	lr
	...

0000f1c8 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    f1c8:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    f1ca:	4b08      	ldr	r3, [pc, #32]	; (f1ec <_sys_device_do_config_level+0x24>)
    f1cc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    f1d0:	3001      	adds	r0, #1
    f1d2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    f1d6:	4620      	mov	r0, r4
    f1d8:	42a8      	cmp	r0, r5
    f1da:	f104 040c 	add.w	r4, r4, #12
    f1de:	d300      	bcc.n	f1e2 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    f1e0:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    f1e2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    f1e6:	685b      	ldr	r3, [r3, #4]
    f1e8:	4798      	blx	r3
    f1ea:	e7f4      	b.n	f1d6 <_sys_device_do_config_level+0xe>
    f1ec:	00010d3c 	.word	0x00010d3c

0000f1f0 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    f1f0:	4b10      	ldr	r3, [pc, #64]	; (f234 <device_get_binding+0x44>)
{
    f1f2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    f1f4:	4c10      	ldr	r4, [pc, #64]	; (f238 <device_get_binding+0x48>)
{
    f1f6:	4605      	mov	r5, r0
    f1f8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    f1fa:	429c      	cmp	r4, r3
    f1fc:	d104      	bne.n	f208 <device_get_binding+0x18>
    f1fe:	4c0e      	ldr	r4, [pc, #56]	; (f238 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    f200:	42b4      	cmp	r4, r6
    f202:	d109      	bne.n	f218 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    f204:	2400      	movs	r4, #0
    f206:	e012      	b.n	f22e <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    f208:	6862      	ldr	r2, [r4, #4]
    f20a:	b11a      	cbz	r2, f214 <device_get_binding+0x24>
    f20c:	6822      	ldr	r2, [r4, #0]
    f20e:	6812      	ldr	r2, [r2, #0]
    f210:	42aa      	cmp	r2, r5
    f212:	d00c      	beq.n	f22e <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    f214:	340c      	adds	r4, #12
    f216:	e7f0      	b.n	f1fa <device_get_binding+0xa>
		if (!info->driver_api) {
    f218:	6863      	ldr	r3, [r4, #4]
    f21a:	b90b      	cbnz	r3, f220 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    f21c:	340c      	adds	r4, #12
    f21e:	e7ef      	b.n	f200 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    f220:	6823      	ldr	r3, [r4, #0]
    f222:	4628      	mov	r0, r5
    f224:	6819      	ldr	r1, [r3, #0]
    f226:	f7f1 f9c5 	bl	5b4 <strcmp>
    f22a:	2800      	cmp	r0, #0
    f22c:	d1f6      	bne.n	f21c <device_get_binding+0x2c>
}
    f22e:	4620      	mov	r0, r4
    f230:	bd70      	pop	{r4, r5, r6, pc}
    f232:	bf00      	nop
    f234:	200056b8 	.word	0x200056b8
    f238:	20005628 	.word	0x20005628

0000f23c <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    f23c:	1c43      	adds	r3, r0, #1
    f23e:	d003      	beq.n	f248 <_sys_power_save_idle_exit+0xc>
    f240:	4b03      	ldr	r3, [pc, #12]	; (f250 <_sys_power_save_idle_exit+0x14>)
    f242:	681b      	ldr	r3, [r3, #0]
    f244:	4298      	cmp	r0, r3
    f246:	db01      	blt.n	f24c <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    f248:	f7f2 bc5a 	b.w	1b00 <_timer_idle_exit>
    f24c:	4770      	bx	lr
    f24e:	bf00      	nop
    f250:	20005618 	.word	0x20005618

0000f254 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    f254:	4d0f      	ldr	r5, [pc, #60]	; (f294 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    f256:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    f258:	4f0f      	ldr	r7, [pc, #60]	; (f298 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f25a:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    f25e:	f04f 0220 	mov.w	r2, #32
    f262:	f3ef 8311 	mrs	r3, BASEPRI
    f266:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    f26a:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f26c:	42b3      	cmp	r3, r6
    f26e:	d00a      	beq.n	f286 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    f270:	b14b      	cbz	r3, f286 <idle+0x32>
    f272:	691c      	ldr	r4, [r3, #16]
    f274:	1c63      	adds	r3, r4, #1
    f276:	d008      	beq.n	f28a <idle+0x36>
    f278:	683b      	ldr	r3, [r7, #0]
    f27a:	42a3      	cmp	r3, r4
    f27c:	dd05      	ble.n	f28a <idle+0x36>
	_kernel.idle = ticks;
    f27e:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    f280:	f7f1 fde8 	bl	e54 <k_cpu_idle>
    f284:	e7eb      	b.n	f25e <idle+0xa>
    f286:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    f28a:	4620      	mov	r0, r4
    f28c:	f7f2 fc24 	bl	1ad8 <_timer_idle_enter>
    f290:	e7f5      	b.n	f27e <idle+0x2a>
    f292:	bf00      	nop
    f294:	20003930 	.word	0x20003930
    f298:	20005618 	.word	0x20005618

0000f29c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    f29c:	4802      	ldr	r0, [pc, #8]	; (f2a8 <_bss_zero+0xc>)
    f29e:	4a03      	ldr	r2, [pc, #12]	; (f2ac <_bss_zero+0x10>)
    f2a0:	2100      	movs	r1, #0
    f2a2:	1a12      	subs	r2, r2, r0
    f2a4:	f7f1 b9d4 	b.w	650 <memset>
    f2a8:	20000000 	.word	0x20000000
    f2ac:	20003d18 	.word	0x20003d18

0000f2b0 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    f2b0:	4802      	ldr	r0, [pc, #8]	; (f2bc <_data_copy+0xc>)
    f2b2:	4a03      	ldr	r2, [pc, #12]	; (f2c0 <_data_copy+0x10>)
    f2b4:	4903      	ldr	r1, [pc, #12]	; (f2c4 <_data_copy+0x14>)
    f2b6:	1a12      	subs	r2, r2, r0
    f2b8:	f7f1 b99e 	b.w	5f8 <memcpy>
    f2bc:	20005410 	.word	0x20005410
    f2c0:	20005794 	.word	0x20005794
    f2c4:	00010d58 	.word	0x00010d58

0000f2c8 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    f2c8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    f2ca:	2002      	movs	r0, #2
    f2cc:	f7ff ff7c 	bl	f1c8 <_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    f2d0:	2003      	movs	r0, #3
    f2d2:	f7ff ff79 	bl	f1c8 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    f2d6:	f000 fe11 	bl	fefc <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    f2da:	f7f1 fb3b 	bl	954 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    f2de:	4a03      	ldr	r2, [pc, #12]	; (f2ec <bg_thread_main+0x24>)
    f2e0:	7a13      	ldrb	r3, [r2, #8]
    f2e2:	f023 0301 	bic.w	r3, r3, #1
    f2e6:	7213      	strb	r3, [r2, #8]
    f2e8:	bd08      	pop	{r3, pc}
    f2ea:	bf00      	nop
    f2ec:	200038c8 	.word	0x200038c8

0000f2f0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    f2f0:	b580      	push	{r7, lr}
    f2f2:	b086      	sub	sp, #24
    f2f4:	4e32      	ldr	r6, [pc, #200]	; (f3c0 <_Cstart+0xd0>)
    f2f6:	af06      	add	r7, sp, #24
	_IntLibInit();
    f2f8:	f7f1 fc36 	bl	b68 <_IntLibInit>
    f2fc:	2324      	movs	r3, #36	; 0x24
    f2fe:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    f300:	519a      	str	r2, [r3, r6]
    f302:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    f304:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    f308:	6052      	str	r2, [r2, #4]
    f30a:	d1f8      	bne.n	f2fe <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    f30c:	4d2d      	ldr	r5, [pc, #180]	; (f3c4 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    f30e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; f3ec <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    f312:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    f314:	2400      	movs	r4, #0
    f316:	f04f 0901 	mov.w	r9, #1
    f31a:	4643      	mov	r3, r8
    f31c:	f44f 7200 	mov.w	r2, #512	; 0x200
    f320:	4929      	ldr	r1, [pc, #164]	; (f3c8 <_Cstart+0xd8>)
    f322:	f8cd 9010 	str.w	r9, [sp, #16]
    f326:	4628      	mov	r0, r5
    f328:	9403      	str	r4, [sp, #12]
    f32a:	9402      	str	r4, [sp, #8]
    f32c:	9401      	str	r4, [sp, #4]
    f32e:	9400      	str	r4, [sp, #0]
    f330:	f000 fd9c 	bl	fe6c <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f334:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    f336:	4628      	mov	r0, r5
    f338:	f023 0304 	bic.w	r3, r3, #4
    f33c:	726b      	strb	r3, [r5, #9]
    f33e:	f000 f97d 	bl	f63c <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    f342:	230f      	movs	r3, #15
    f344:	9303      	str	r3, [sp, #12]
    f346:	4921      	ldr	r1, [pc, #132]	; (f3cc <_Cstart+0xdc>)
    f348:	f8cd 9010 	str.w	r9, [sp, #16]
    f34c:	9402      	str	r4, [sp, #8]
    f34e:	9401      	str	r4, [sp, #4]
    f350:	9400      	str	r4, [sp, #0]
    f352:	4b1f      	ldr	r3, [pc, #124]	; (f3d0 <_Cstart+0xe0>)
    f354:	481f      	ldr	r0, [pc, #124]	; (f3d4 <_Cstart+0xe4>)
    f356:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f35a:	f000 fd87 	bl	fe6c <_setup_new_thread>
    f35e:	4b1d      	ldr	r3, [pc, #116]	; (f3d4 <_Cstart+0xe4>)
    f360:	4a1c      	ldr	r2, [pc, #112]	; (f3d4 <_Cstart+0xe4>)
    f362:	7a5b      	ldrb	r3, [r3, #9]
    f364:	f023 0304 	bic.w	r3, r3, #4
    f368:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    f36a:	4610      	mov	r0, r2
    f36c:	f000 f966 	bl	f63c <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    f370:	4b19      	ldr	r3, [pc, #100]	; (f3d8 <_Cstart+0xe8>)
    f372:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    f374:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    f376:	4b19      	ldr	r3, [pc, #100]	; (f3dc <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    f378:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f37c:	4b18      	ldr	r3, [pc, #96]	; (f3e0 <_Cstart+0xf0>)
    f37e:	22e0      	movs	r2, #224	; 0xe0
    f380:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    f384:	77dc      	strb	r4, [r3, #31]
    f386:	761c      	strb	r4, [r3, #24]
    f388:	765c      	strb	r4, [r3, #25]
    f38a:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    f38c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f38e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    f392:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    f394:	f7f1 fcce 	bl	d34 <_FaultInit>
	_CpuIdleInit();
    f398:	f7f1 fd56 	bl	e48 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    f39c:	4620      	mov	r0, r4
    f39e:	f7ff ff13 	bl	f1c8 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    f3a2:	4648      	mov	r0, r9
    f3a4:	f7ff ff10 	bl	f1c8 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    f3a8:	4b0e      	ldr	r3, [pc, #56]	; (f3e4 <_Cstart+0xf4>)

	_current = main_thread;
    f3aa:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    f3ac:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    f3b0:	4a0d      	ldr	r2, [pc, #52]	; (f3e8 <_Cstart+0xf8>)
    f3b2:	f383 8809 	msr	PSP, r3
    f3b6:	2100      	movs	r1, #0
    f3b8:	f381 8811 	msr	BASEPRI, r1
    f3bc:	4640      	mov	r0, r8
    f3be:	4710      	bx	r2
    f3c0:	20003930 	.word	0x20003930
    f3c4:	200038c8 	.word	0x200038c8
    f3c8:	200046d0 	.word	0x200046d0
    f3cc:	200048d0 	.word	0x200048d0
    f3d0:	0000f255 	.word	0x0000f255
    f3d4:	20003860 	.word	0x20003860
    f3d8:	20003940 	.word	0x20003940
    f3dc:	20005210 	.word	0x20005210
    f3e0:	e000ed00 	.word	0xe000ed00
    f3e4:	200048d0 	.word	0x200048d0
    f3e8:	0000fe05 	.word	0x0000fe05
    f3ec:	0000f2c9 	.word	0x0000f2c9

0000f3f0 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    f3f0:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    f3f2:	7ac4      	ldrb	r4, [r0, #11]
    f3f4:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    f3f6:	428c      	cmp	r4, r1
    f3f8:	f04f 040c 	mov.w	r4, #12
    f3fc:	bfb6      	itet	lt
    f3fe:	4361      	mullt	r1, r4
    f400:	fb04 0101 	mlage	r1, r4, r1, r0
    f404:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    f406:	2420      	movs	r4, #32
    f408:	fb92 f4f4 	sdiv	r4, r2, r4
    f40c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    f410:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    f412:	f002 001f 	and.w	r0, r2, #31
    f416:	bd10      	pop	{r4, pc}

0000f418 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    f418:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    f41a:	ab01      	add	r3, sp, #4
    f41c:	f7ff ffe8 	bl	f3f0 <get_bit_ptr>

	*word |= (1<<bit);
    f420:	9a01      	ldr	r2, [sp, #4]
    f422:	2301      	movs	r3, #1
    f424:	fa03 f000 	lsl.w	r0, r3, r0
    f428:	6813      	ldr	r3, [r2, #0]
    f42a:	4303      	orrs	r3, r0
    f42c:	6013      	str	r3, [r2, #0]
}
    f42e:	b003      	add	sp, #12
    f430:	f85d fb04 	ldr.w	pc, [sp], #4

0000f434 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    f434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f438:	4c30      	ldr	r4, [pc, #192]	; (f4fc <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    f43a:	4e31      	ldr	r6, [pc, #196]	; (f500 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    f43c:	270c      	movs	r7, #12
    f43e:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    f442:	42b5      	cmp	r5, r6
    f444:	d302      	bcc.n	f44c <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    f446:	2000      	movs	r0, #0
    f448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    f44c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    f450:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    f454:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    f458:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    f45a:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    f45e:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    f460:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    f462:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    f464:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    f468:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    f46c:	4291      	cmp	r1, r2
    f46e:	db07      	blt.n	f480 <init_static_pools+0x4c>
    f470:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    f474:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    f478:	4598      	cmp	r8, r3
    f47a:	db24      	blt.n	f4c6 <init_static_pools+0x92>
    f47c:	3418      	adds	r4, #24
    f47e:	e7de      	b.n	f43e <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    f480:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    f484:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    f488:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    f48c:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    f48e:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    f492:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    f496:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    f49a:	bfc8      	it	gt
    f49c:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    f49e:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    f4a2:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    f4a6:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    f4aa:	bfca      	itet	gt
    f4ac:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    f4b0:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    f4b4:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    f4b8:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    f4bc:	bfc8      	it	gt
    f4be:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    f4c2:	3101      	adds	r1, #1
    f4c4:	e7d0      	b.n	f468 <init_static_pools+0x34>
	return p->buf + lsz * block;
    f4c6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    f4ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    f4ce:	f854 0c10 	ldr.w	r0, [r4, #-16]
    f4d2:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    f4d6:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    f4da:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    f4de:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    f4e0:	689a      	ldr	r2, [r3, #8]
    f4e2:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    f4e4:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    f4e6:	4628      	mov	r0, r5
    f4e8:	6011      	str	r1, [r2, #0]
	list->tail = node;
    f4ea:	6099      	str	r1, [r3, #8]
    f4ec:	4642      	mov	r2, r8
    f4ee:	2100      	movs	r1, #0
    f4f0:	f7ff ff92 	bl	f418 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    f4f4:	f108 0801 	add.w	r8, r8, #1
    f4f8:	e7bc      	b.n	f474 <init_static_pools+0x40>
    f4fa:	bf00      	nop
    f4fc:	200056fc 	.word	0x200056fc
    f500:	200056ec 	.word	0x200056ec

0000f504 <k_queue_init>:
	list->head = NULL;
    f504:	2300      	movs	r3, #0
    f506:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    f508:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    f50a:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    f50e:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    f510:	60c3      	str	r3, [r0, #12]
    f512:	4770      	bx	lr

0000f514 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    f514:	b510      	push	{r4, lr}
    f516:	f04f 0320 	mov.w	r3, #32
    f51a:	f3ef 8411 	mrs	r4, BASEPRI
    f51e:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    f522:	b931      	cbnz	r1, f532 <k_queue_insert+0x1e>
	node->next = list->head;
    f524:	6803      	ldr	r3, [r0, #0]
    f526:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    f528:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    f52a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    f52c:	b943      	cbnz	r3, f540 <k_queue_insert+0x2c>
		list->tail = node;
    f52e:	6042      	str	r2, [r0, #4]
    f530:	e006      	b.n	f540 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    f532:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    f534:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    f536:	b98b      	cbnz	r3, f55c <k_queue_insert+0x48>
	if (!list->tail) {
    f538:	6843      	ldr	r3, [r0, #4]
    f53a:	b96b      	cbnz	r3, f558 <k_queue_insert+0x44>
		list->tail = node;
    f53c:	6042      	str	r2, [r0, #4]
		list->head = node;
    f53e:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    f540:	2104      	movs	r1, #4
    f542:	3008      	adds	r0, #8
    f544:	f001 f848 	bl	105d8 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    f548:	b150      	cbz	r0, f560 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    f54a:	f000 fa23 	bl	f994 <_update_time_slice_before_swap>
	return __swap(key);
    f54e:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    f550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f554:	f7f1 bb14 	b.w	b80 <__swap>
		list->tail->next = node;
    f558:	601a      	str	r2, [r3, #0]
    f55a:	e7e8      	b.n	f52e <k_queue_insert+0x1a>
		prev->next = node;
    f55c:	600a      	str	r2, [r1, #0]
    f55e:	e7ef      	b.n	f540 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    f560:	f384 8811 	msr	BASEPRI, r4
    f564:	bd10      	pop	{r4, pc}

0000f566 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    f566:	460a      	mov	r2, r1
    f568:	6841      	ldr	r1, [r0, #4]
    f56a:	f7ff bfd3 	b.w	f514 <k_queue_insert>

0000f56e <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    f56e:	460a      	mov	r2, r1
    f570:	2100      	movs	r1, #0
    f572:	f7ff bfcf 	b.w	f514 <k_queue_insert>

0000f576 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    f576:	b510      	push	{r4, lr}
	__asm__ volatile(
    f578:	f04f 0320 	mov.w	r3, #32
    f57c:	f3ef 8411 	mrs	r4, BASEPRI
    f580:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    f584:	6843      	ldr	r3, [r0, #4]
    f586:	b96b      	cbnz	r3, f5a4 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    f588:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    f58a:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    f58c:	2104      	movs	r1, #4
    f58e:	3008      	adds	r0, #8
    f590:	f001 f822 	bl	105d8 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    f594:	b140      	cbz	r0, f5a8 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    f596:	f000 f9fd 	bl	f994 <_update_time_slice_before_swap>
	return __swap(key);
    f59a:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    f59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5a0:	f7f1 baee 	b.w	b80 <__swap>
		list->tail->next = (sys_snode_t *)head;
    f5a4:	6019      	str	r1, [r3, #0]
    f5a6:	e7f0      	b.n	f58a <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    f5a8:	f384 8811 	msr	BASEPRI, r4
    f5ac:	bd10      	pop	{r4, pc}

0000f5ae <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    f5ae:	b530      	push	{r4, r5, lr}
    f5b0:	4604      	mov	r4, r0
    f5b2:	b087      	sub	sp, #28
    f5b4:	460d      	mov	r5, r1
	__asm__ volatile(
    f5b6:	f04f 0220 	mov.w	r2, #32
    f5ba:	f3ef 8311 	mrs	r3, BASEPRI
    f5be:	f382 8811 	msr	BASEPRI, r2
    f5c2:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    f5c4:	b152      	cbz	r2, f5dc <k_queue_get+0x2e>
	list->head = node->next;
    f5c6:	6811      	ldr	r1, [r2, #0]
    f5c8:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    f5ca:	6840      	ldr	r0, [r0, #4]
    f5cc:	4282      	cmp	r2, r0
		list->tail = list->head;
    f5ce:	bf08      	it	eq
    f5d0:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    f5d2:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    f5d6:	4610      	mov	r0, r2
    f5d8:	b007      	add	sp, #28
    f5da:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    f5dc:	b919      	cbnz	r1, f5e6 <k_queue_get+0x38>
    f5de:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    f5e2:	2200      	movs	r2, #0
    f5e4:	e7f7      	b.n	f5d6 <k_queue_get+0x28>
    f5e6:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    f5ea:	2104      	movs	r1, #4
    f5ec:	4603      	mov	r3, r0
    f5ee:	eb0d 0001 	add.w	r0, sp, r1
    f5f2:	f000 ff39 	bl	10468 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    f5f6:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    f5fa:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    f5fc:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    f600:	2101      	movs	r1, #1
    f602:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    f604:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    f608:	f000 ff42 	bl	10490 <k_poll>
		if (err) {
    f60c:	2800      	cmp	r0, #0
    f60e:	d1e8      	bne.n	f5e2 <k_queue_get+0x34>
	__asm__ volatile(
    f610:	f04f 0320 	mov.w	r3, #32
    f614:	f3ef 8111 	mrs	r1, BASEPRI
    f618:	f383 8811 	msr	BASEPRI, r3
    f61c:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    f61e:	b12a      	cbz	r2, f62c <k_queue_get+0x7e>
	if (list->tail == node) {
    f620:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    f622:	6813      	ldr	r3, [r2, #0]
    f624:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    f626:	4282      	cmp	r2, r0
		list->tail = list->head;
    f628:	bf08      	it	eq
    f62a:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    f62c:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    f630:	2a00      	cmp	r2, #0
    f632:	d1d0      	bne.n	f5d6 <k_queue_get+0x28>
    f634:	1c6b      	adds	r3, r5, #1
    f636:	d0de      	beq.n	f5f6 <k_queue_get+0x48>
    f638:	e7d3      	b.n	f5e2 <k_queue_get+0x34>
	...

0000f63c <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    f63c:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    f63e:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    f642:	4911      	ldr	r1, [pc, #68]	; (f688 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    f644:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    f648:	1162      	asrs	r2, r4, #5
    f64a:	3206      	adds	r2, #6
    f64c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    f650:	f004 051f 	and.w	r5, r4, #31
    f654:	2401      	movs	r4, #1
    f656:	40ac      	lsls	r4, r5
    f658:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    f65a:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    f65c:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    f65e:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    f660:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    f662:	1d1a      	adds	r2, r3, #4
    f664:	440a      	add	r2, r1
	node->prev = list->tail;
    f666:	440b      	add	r3, r1
	node->next = list;
    f668:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    f66a:	689a      	ldr	r2, [r3, #8]
    f66c:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    f66e:	689a      	ldr	r2, [r3, #8]
    f670:	6010      	str	r0, [r2, #0]
	list->tail = node;
    f672:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    f674:	69cb      	ldr	r3, [r1, #28]
    f676:	f990 400a 	ldrsb.w	r4, [r0, #10]
    f67a:	f993 200a 	ldrsb.w	r2, [r3, #10]
    f67e:	4294      	cmp	r4, r2
    f680:	bfa8      	it	ge
    f682:	4618      	movge	r0, r3
    f684:	61c8      	str	r0, [r1, #28]
    f686:	bd30      	pop	{r4, r5, pc}
    f688:	20003930 	.word	0x20003930

0000f68c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f68c:	7a42      	ldrb	r2, [r0, #9]
    f68e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    f692:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f696:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    f698:	d104      	bne.n	f6a4 <_ready_thread+0x18>
    f69a:	6a03      	ldr	r3, [r0, #32]
    f69c:	3301      	adds	r3, #1
    f69e:	d101      	bne.n	f6a4 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    f6a0:	f7ff bfcc 	b.w	f63c <_add_thread_to_ready_q>
    f6a4:	4770      	bx	lr
	...

0000f6a8 <_add_timeout>:
{
    f6a8:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    f6aa:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    f6ac:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    f6ae:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    f6b0:	bb13      	cbnz	r3, f6f8 <_add_timeout+0x50>
	__asm__ volatile(
    f6b2:	f04f 0220 	mov.w	r2, #32
    f6b6:	f3ef 8411 	mrs	r4, BASEPRI
    f6ba:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    f6be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f6c2:	610a      	str	r2, [r1, #16]
	if (thread) {
    f6c4:	b180      	cbz	r0, f6e8 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    f6c6:	68ca      	ldr	r2, [r1, #12]
    f6c8:	b14a      	cbz	r2, f6de <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    f6ca:	e890 0006 	ldmia.w	r0, {r1, r2}
    f6ce:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    f6d0:	6801      	ldr	r1, [r0, #0]
    f6d2:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    f6d4:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    f6d6:	61c3      	str	r3, [r0, #28]
    f6d8:	f022 0202 	bic.w	r2, r2, #2
    f6dc:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    f6de:	f7ff ffd5 	bl	f68c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    f6e2:	f384 8811 	msr	BASEPRI, r4
    f6e6:	bd70      	pop	{r4, r5, r6, pc}
    f6e8:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    f6ec:	694b      	ldr	r3, [r1, #20]
    f6ee:	b32b      	cbz	r3, f73c <_add_timeout+0x94>
			timeout->func(timeout);
    f6f0:	4608      	mov	r0, r1
}
    f6f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    f6f6:	4718      	bx	r3
	return list->head == list;
    f6f8:	4a11      	ldr	r2, [pc, #68]	; (f740 <_add_timeout+0x98>)
    f6fa:	4610      	mov	r0, r2
    f6fc:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f700:	4283      	cmp	r3, r0
    f702:	d10c      	bne.n	f71e <_add_timeout+0x76>
	node->next = list;
    f704:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    f706:	6953      	ldr	r3, [r2, #20]
    f708:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    f70a:	6953      	ldr	r3, [r2, #20]
    f70c:	6019      	str	r1, [r3, #0]
	list->tail = node;
    f70e:	6151      	str	r1, [r2, #20]
    f710:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    f712:	1b64      	subs	r4, r4, r5
    f714:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    f716:	6954      	ldr	r4, [r2, #20]
    f718:	42a3      	cmp	r3, r4
    f71a:	d0f3      	beq.n	f704 <_add_timeout+0x5c>
    f71c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    f71e:	2b00      	cmp	r3, #0
    f720:	d0f0      	beq.n	f704 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    f722:	690c      	ldr	r4, [r1, #16]
    f724:	691d      	ldr	r5, [r3, #16]
    f726:	42ac      	cmp	r4, r5
    f728:	dcf3      	bgt.n	f712 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    f72a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    f72c:	1b2c      	subs	r4, r5, r4
    f72e:	611c      	str	r4, [r3, #16]
    f730:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    f732:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    f734:	685a      	ldr	r2, [r3, #4]
    f736:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    f738:	6059      	str	r1, [r3, #4]
    f73a:	bd70      	pop	{r4, r5, r6, pc}
    f73c:	bd70      	pop	{r4, r5, r6, pc}
    f73e:	bf00      	nop
    f740:	20003930 	.word	0x20003930

0000f744 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    f744:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    f748:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    f74a:	f990 200a 	ldrsb.w	r2, [r0, #10]
    f74e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    f750:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    f752:	3214      	adds	r2, #20
    f754:	604b      	str	r3, [r1, #4]
    f756:	4b14      	ldr	r3, [pc, #80]	; (f7a8 <_remove_thread_from_ready_q+0x64>)
    f758:	00d2      	lsls	r2, r2, #3
    f75a:	1d11      	adds	r1, r2, #4
	return list->head == list;
    f75c:	441a      	add	r2, r3
    f75e:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    f760:	6852      	ldr	r2, [r2, #4]
    f762:	428a      	cmp	r2, r1
    f764:	d10f      	bne.n	f786 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    f766:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    f76a:	3110      	adds	r1, #16
    f76c:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    f76e:	3206      	adds	r2, #6
    f770:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    f774:	2401      	movs	r4, #1
    f776:	f001 011f 	and.w	r1, r1, #31
    f77a:	fa04 f101 	lsl.w	r1, r4, r1
    f77e:	6894      	ldr	r4, [r2, #8]
    f780:	ea24 0401 	bic.w	r4, r4, r1
    f784:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    f786:	69da      	ldr	r2, [r3, #28]
    f788:	4290      	cmp	r0, r2
    f78a:	d10b      	bne.n	f7a4 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    f78c:	6a19      	ldr	r1, [r3, #32]
    f78e:	fa91 f2a1 	rbit	r2, r1
    f792:	2900      	cmp	r1, #0
    f794:	fab2 f282 	clz	r2, r2
    f798:	bf08      	it	eq
    f79a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    f79e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f7a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
    f7a4:	61da      	str	r2, [r3, #28]
    f7a6:	bd10      	pop	{r4, pc}
    f7a8:	20003930 	.word	0x20003930

0000f7ac <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    f7ac:	b430      	push	{r4, r5}
    f7ae:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    f7b0:	42a1      	cmp	r1, r4
    f7b2:	bf08      	it	eq
    f7b4:	2400      	moveq	r4, #0
    f7b6:	b314      	cbz	r4, f7fe <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    f7b8:	f990 500a 	ldrsb.w	r5, [r0, #10]
    f7bc:	f994 300a 	ldrsb.w	r3, [r4, #10]
    f7c0:	429d      	cmp	r5, r3
    f7c2:	da16      	bge.n	f7f2 <_pend_thread+0x46>
		node->prev = insert_point->prev;
    f7c4:	6863      	ldr	r3, [r4, #4]
    f7c6:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    f7c8:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    f7ca:	6863      	ldr	r3, [r4, #4]
    f7cc:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    f7ce:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    f7d0:	7a43      	ldrb	r3, [r0, #9]
    f7d2:	f043 0302 	orr.w	r3, r3, #2
    f7d6:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    f7d8:	1c53      	adds	r3, r2, #1
    f7da:	d017      	beq.n	f80c <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    f7dc:	3209      	adds	r2, #9
    f7de:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    f7e0:	bc30      	pop	{r4, r5}
    f7e2:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    f7e6:	460a      	mov	r2, r1
    f7e8:	3301      	adds	r3, #1
    f7ea:	f100 0110 	add.w	r1, r0, #16
    f7ee:	f7ff bf5b 	b.w	f6a8 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    f7f2:	684b      	ldr	r3, [r1, #4]
    f7f4:	429c      	cmp	r4, r3
    f7f6:	d002      	beq.n	f7fe <_pend_thread+0x52>
    f7f8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    f7fa:	2c00      	cmp	r4, #0
    f7fc:	d1db      	bne.n	f7b6 <_pend_thread+0xa>
	node->next = list;
    f7fe:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    f800:	684b      	ldr	r3, [r1, #4]
    f802:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    f804:	684b      	ldr	r3, [r1, #4]
    f806:	6018      	str	r0, [r3, #0]
	list->tail = node;
    f808:	6048      	str	r0, [r1, #4]
    f80a:	e7e1      	b.n	f7d0 <_pend_thread+0x24>
}
    f80c:	bc30      	pop	{r4, r5}
    f80e:	4770      	bx	lr

0000f810 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    f810:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    f812:	4c06      	ldr	r4, [pc, #24]	; (f82c <_pend_current_thread+0x1c>)
{
    f814:	460e      	mov	r6, r1
    f816:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    f818:	68a0      	ldr	r0, [r4, #8]
    f81a:	f7ff ff93 	bl	f744 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    f81e:	4632      	mov	r2, r6
    f820:	4629      	mov	r1, r5
    f822:	68a0      	ldr	r0, [r4, #8]
}
    f824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    f828:	f7ff bfc0 	b.w	f7ac <_pend_thread>
    f82c:	20003930 	.word	0x20003930

0000f830 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    f830:	4a09      	ldr	r2, [pc, #36]	; (f858 <__must_switch_threads+0x28>)
    f832:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    f834:	6892      	ldr	r2, [r2, #8]
    f836:	2900      	cmp	r1, #0
    f838:	fa91 f3a1 	rbit	r3, r1
    f83c:	f992 000a 	ldrsb.w	r0, [r2, #10]
    f840:	fab3 f383 	clz	r3, r3
    f844:	bf08      	it	eq
    f846:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    f84a:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    f84c:	4298      	cmp	r0, r3
    f84e:	bfd4      	ite	le
    f850:	2000      	movle	r0, #0
    f852:	2001      	movgt	r0, #1
    f854:	4770      	bx	lr
    f856:	bf00      	nop
    f858:	20003930 	.word	0x20003930

0000f85c <_reschedule_threads>:
{
    f85c:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    f85e:	4b0a      	ldr	r3, [pc, #40]	; (f888 <_reschedule_threads+0x2c>)
    f860:	689b      	ldr	r3, [r3, #8]
    f862:	895b      	ldrh	r3, [r3, #10]
    f864:	2b7f      	cmp	r3, #127	; 0x7f
    f866:	4604      	mov	r4, r0
    f868:	d802      	bhi.n	f870 <_reschedule_threads+0x14>
    f86a:	f7ff ffe1 	bl	f830 <__must_switch_threads>
    f86e:	b910      	cbnz	r0, f876 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    f870:	f384 8811 	msr	BASEPRI, r4
    f874:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    f876:	4b05      	ldr	r3, [pc, #20]	; (f88c <_reschedule_threads+0x30>)
    f878:	2200      	movs	r2, #0
    f87a:	4620      	mov	r0, r4
}
    f87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    f880:	601a      	str	r2, [r3, #0]
    f882:	f7f1 b97d 	b.w	b80 <__swap>
    f886:	bf00      	nop
    f888:	20003930 	.word	0x20003930
    f88c:	20003c94 	.word	0x20003c94

0000f890 <k_sched_unlock>:
	__asm__ volatile(
    f890:	f04f 0320 	mov.w	r3, #32
    f894:	f3ef 8011 	mrs	r0, BASEPRI
    f898:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    f89c:	4b03      	ldr	r3, [pc, #12]	; (f8ac <k_sched_unlock+0x1c>)
    f89e:	689a      	ldr	r2, [r3, #8]
    f8a0:	7ad3      	ldrb	r3, [r2, #11]
    f8a2:	3301      	adds	r3, #1
    f8a4:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    f8a6:	f7ff bfd9 	b.w	f85c <_reschedule_threads>
    f8aa:	bf00      	nop
    f8ac:	20003930 	.word	0x20003930

0000f8b0 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    f8b0:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    f8b4:	4a12      	ldr	r2, [pc, #72]	; (f900 <_move_thread_to_end_of_prio_q+0x50>)
{
    f8b6:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    f8b8:	3314      	adds	r3, #20
    f8ba:	00db      	lsls	r3, r3, #3
    f8bc:	1d19      	adds	r1, r3, #4
    f8be:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    f8c0:	684c      	ldr	r4, [r1, #4]
    f8c2:	42a0      	cmp	r0, r4
    f8c4:	d01b      	beq.n	f8fe <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    f8c6:	6844      	ldr	r4, [r0, #4]
    f8c8:	6805      	ldr	r5, [r0, #0]
    f8ca:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    f8cc:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    f8ce:	4413      	add	r3, r2
	node->next->prev = node->prev;
    f8d0:	606c      	str	r4, [r5, #4]
	node->next = list;
    f8d2:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    f8d4:	6899      	ldr	r1, [r3, #8]
    f8d6:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    f8d8:	6899      	ldr	r1, [r3, #8]
    f8da:	6008      	str	r0, [r1, #0]
	list->tail = node;
    f8dc:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    f8de:	69d3      	ldr	r3, [r2, #28]
    f8e0:	4298      	cmp	r0, r3
    f8e2:	d10b      	bne.n	f8fc <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    f8e4:	6a11      	ldr	r1, [r2, #32]
    f8e6:	fa91 f3a1 	rbit	r3, r1
    f8ea:	2900      	cmp	r1, #0
    f8ec:	fab3 f383 	clz	r3, r3
    f8f0:	bf08      	it	eq
    f8f2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    f8f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    f8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f8fc:	61d3      	str	r3, [r2, #28]
    f8fe:	bd30      	pop	{r4, r5, pc}
    f900:	20003930 	.word	0x20003930

0000f904 <_impl_k_yield>:
{
    f904:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f906:	f04f 0320 	mov.w	r3, #32
    f90a:	f3ef 8511 	mrs	r5, BASEPRI
    f90e:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    f912:	4c09      	ldr	r4, [pc, #36]	; (f938 <_impl_k_yield+0x34>)
    f914:	68a0      	ldr	r0, [r4, #8]
    f916:	f7ff ffcb 	bl	f8b0 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    f91a:	68a2      	ldr	r2, [r4, #8]
    f91c:	69e3      	ldr	r3, [r4, #28]
    f91e:	429a      	cmp	r2, r3
    f920:	d102      	bne.n	f928 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    f922:	f385 8811 	msr	BASEPRI, r5
    f926:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    f928:	4b04      	ldr	r3, [pc, #16]	; (f93c <_impl_k_yield+0x38>)
    f92a:	2200      	movs	r2, #0
    f92c:	601a      	str	r2, [r3, #0]
    f92e:	4628      	mov	r0, r5
}
    f930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f934:	f7f1 b924 	b.w	b80 <__swap>
    f938:	20003930 	.word	0x20003930
    f93c:	20003c94 	.word	0x20003c94

0000f940 <_impl_k_current_get>:
}
    f940:	4b01      	ldr	r3, [pc, #4]	; (f948 <_impl_k_current_get+0x8>)
    f942:	6898      	ldr	r0, [r3, #8]
    f944:	4770      	bx	lr
    f946:	bf00      	nop
    f948:	20003930 	.word	0x20003930

0000f94c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    f94c:	4b0d      	ldr	r3, [pc, #52]	; (f984 <_is_thread_time_slicing+0x38>)
    f94e:	681b      	ldr	r3, [r3, #0]
    f950:	2b00      	cmp	r3, #0
    f952:	dd14      	ble.n	f97e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    f954:	4b0c      	ldr	r3, [pc, #48]	; (f988 <_is_thread_time_slicing+0x3c>)
    f956:	681b      	ldr	r3, [r3, #0]
    f958:	4298      	cmp	r0, r3
    f95a:	d010      	beq.n	f97e <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    f95c:	4a0b      	ldr	r2, [pc, #44]	; (f98c <_is_thread_time_slicing+0x40>)
    f95e:	f990 300a 	ldrsb.w	r3, [r0, #10]
    f962:	6812      	ldr	r2, [r2, #0]
    f964:	4293      	cmp	r3, r2
    f966:	db0a      	blt.n	f97e <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    f968:	f103 0214 	add.w	r2, r3, #20
    f96c:	4b08      	ldr	r3, [pc, #32]	; (f990 <_is_thread_time_slicing+0x44>)
    f96e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    f972:	6858      	ldr	r0, [r3, #4]
    f974:	689b      	ldr	r3, [r3, #8]
    f976:	1ac0      	subs	r0, r0, r3
    f978:	bf18      	it	ne
    f97a:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    f97c:	4770      	bx	lr
		return 0;
    f97e:	2000      	movs	r0, #0
}
    f980:	4770      	bx	lr
    f982:	bf00      	nop
    f984:	20003a54 	.word	0x20003a54
    f988:	00010d54 	.word	0x00010d54
    f98c:	20003a58 	.word	0x20003a58
    f990:	20003930 	.word	0x20003930

0000f994 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    f994:	4b01      	ldr	r3, [pc, #4]	; (f99c <_update_time_slice_before_swap+0x8>)
    f996:	2200      	movs	r2, #0
    f998:	601a      	str	r2, [r3, #0]
    f99a:	4770      	bx	lr
    f99c:	20003c94 	.word	0x20003c94

0000f9a0 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    f9a0:	4a10      	ldr	r2, [pc, #64]	; (f9e4 <_unpend_first_thread+0x44>)
    f9a2:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    f9a4:	4603      	mov	r3, r0
    f9a6:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    f9a8:	b16a      	cbz	r2, f9c6 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f9aa:	4283      	cmp	r3, r0
    f9ac:	bf08      	it	eq
    f9ae:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    f9b0:	b908      	cbnz	r0, f9b6 <_unpend_first_thread+0x16>
    f9b2:	2000      	movs	r0, #0
    f9b4:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    f9b6:	6a02      	ldr	r2, [r0, #32]
    f9b8:	3202      	adds	r2, #2
    f9ba:	d107      	bne.n	f9cc <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    f9bc:	685a      	ldr	r2, [r3, #4]
    f9be:	4290      	cmp	r0, r2
    f9c0:	d0f7      	beq.n	f9b2 <_unpend_first_thread+0x12>
    f9c2:	6800      	ldr	r0, [r0, #0]
    f9c4:	e7f4      	b.n	f9b0 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f9c6:	4283      	cmp	r3, r0
    f9c8:	d00a      	beq.n	f9e0 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    f9ca:	b150      	cbz	r0, f9e2 <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    f9cc:	e890 000c 	ldmia.w	r0, {r2, r3}
    f9d0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    f9d2:	6802      	ldr	r2, [r0, #0]
    f9d4:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    f9d6:	7a43      	ldrb	r3, [r0, #9]
    f9d8:	f023 0302 	bic.w	r3, r3, #2
    f9dc:	7243      	strb	r3, [r0, #9]
    f9de:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f9e0:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    f9e2:	4770      	bx	lr
    f9e4:	20003c90 	.word	0x20003c90

0000f9e8 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    f9e8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    f9ec:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    f9ee:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    f9f0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    f9f2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    f9f4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    f9f6:	6143      	str	r3, [r0, #20]
    f9f8:	4770      	bx	lr
	...

0000f9fc <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    f9fc:	b570      	push	{r4, r5, r6, lr}
    f9fe:	4605      	mov	r5, r0
	__asm__ volatile(
    fa00:	f04f 0320 	mov.w	r3, #32
    fa04:	f3ef 8611 	mrs	r6, BASEPRI
    fa08:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    fa0c:	f7ff ffc8 	bl	f9a0 <_unpend_first_thread>
	if (!thread) {
    fa10:	4604      	mov	r4, r0
    fa12:	b998      	cbnz	r0, fa3c <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    fa14:	68ab      	ldr	r3, [r5, #8]
    fa16:	68ea      	ldr	r2, [r5, #12]
    fa18:	429a      	cmp	r2, r3
    fa1a:	bf18      	it	ne
    fa1c:	3301      	addne	r3, #1
    fa1e:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    fa20:	2102      	movs	r1, #2
    fa22:	f105 0010 	add.w	r0, r5, #16
    fa26:	f000 fdd7 	bl	105d8 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    fa2a:	2800      	cmp	r0, #0
    fa2c:	d03b      	beq.n	faa6 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    fa2e:	f7ff ffb1 	bl	f994 <_update_time_slice_before_swap>
	return __swap(key);
    fa32:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    fa34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fa38:	f7f1 b8a2 	b.w	b80 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    fa3c:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    fa3e:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    fa42:	1c48      	adds	r0, r1, #1
    fa44:	d00f      	beq.n	fa66 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    fa46:	4b1b      	ldr	r3, [pc, #108]	; (fab4 <_impl_k_sem_give+0xb8>)
    fa48:	695b      	ldr	r3, [r3, #20]
    fa4a:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    fa4c:	bf1f      	itttt	ne
    fa4e:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    fa50:	6913      	ldrne	r3, [r2, #16]
    fa52:	185b      	addne	r3, r3, r1
    fa54:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    fa56:	6963      	ldr	r3, [r4, #20]
    fa58:	6922      	ldr	r2, [r4, #16]
    fa5a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    fa5c:	6922      	ldr	r2, [r4, #16]
    fa5e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    fa60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fa64:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fa66:	7a63      	ldrb	r3, [r4, #9]
    fa68:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    fa6c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fa70:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    fa72:	d102      	bne.n	fa7a <_impl_k_sem_give+0x7e>
    fa74:	6a23      	ldr	r3, [r4, #32]
    fa76:	3301      	adds	r3, #1
    fa78:	d018      	beq.n	faac <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    fa7a:	2300      	movs	r3, #0
    fa7c:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fa7e:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    fa82:	2b0d      	cmp	r3, #13
    fa84:	d80f      	bhi.n	faa6 <_impl_k_sem_give+0xaa>
    fa86:	b11b      	cbz	r3, fa90 <_impl_k_sem_give+0x94>
    fa88:	4b0b      	ldr	r3, [pc, #44]	; (fab8 <_impl_k_sem_give+0xbc>)
    fa8a:	685b      	ldr	r3, [r3, #4]
    fa8c:	051b      	lsls	r3, r3, #20
    fa8e:	d50a      	bpl.n	faa6 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    fa90:	4b08      	ldr	r3, [pc, #32]	; (fab4 <_impl_k_sem_give+0xb8>)
    fa92:	689b      	ldr	r3, [r3, #8]
    fa94:	895b      	ldrh	r3, [r3, #10]
    fa96:	2b7f      	cmp	r3, #127	; 0x7f
    fa98:	d805      	bhi.n	faa6 <_impl_k_sem_give+0xaa>
    fa9a:	f7ff fec9 	bl	f830 <__must_switch_threads>
    fa9e:	3000      	adds	r0, #0
    faa0:	bf18      	it	ne
    faa2:	2001      	movne	r0, #1
    faa4:	e7c1      	b.n	fa2a <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    faa6:	f386 8811 	msr	BASEPRI, r6
    faaa:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    faac:	4620      	mov	r0, r4
    faae:	f7ff fdc5 	bl	f63c <_add_thread_to_ready_q>
    fab2:	e7e2      	b.n	fa7a <_impl_k_sem_give+0x7e>
    fab4:	20003930 	.word	0x20003930
    fab8:	e000ed00 	.word	0xe000ed00

0000fabc <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    fabc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    fabe:	f04f 0320 	mov.w	r3, #32
    fac2:	f3ef 8411 	mrs	r4, BASEPRI
    fac6:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    faca:	6883      	ldr	r3, [r0, #8]
    facc:	b12b      	cbz	r3, fada <_impl_k_sem_take+0x1e>
		sem->count--;
    face:	3b01      	subs	r3, #1
    fad0:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fad2:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    fad6:	2000      	movs	r0, #0
    fad8:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    fada:	b921      	cbnz	r1, fae6 <_impl_k_sem_take+0x2a>
    fadc:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    fae0:	f06f 000f 	mvn.w	r0, #15
    fae4:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    fae6:	f7ff fe93 	bl	f810 <_pend_current_thread>
	_update_time_slice_before_swap();
    faea:	f7ff ff53 	bl	f994 <_update_time_slice_before_swap>
	return __swap(key);
    faee:	4620      	mov	r0, r4

	return _Swap(key);
}
    faf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    faf4:	f7f1 b844 	b.w	b80 <__swap>

0000faf8 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    faf8:	4b03      	ldr	r3, [pc, #12]	; (fb08 <_impl_k_uptime_get_32+0x10>)
    fafa:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    fafe:	230a      	movs	r3, #10
    fb00:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    fb04:	4770      	bx	lr
    fb06:	bf00      	nop
    fb08:	20003c98 	.word	0x20003c98

0000fb0c <_tick_get>:
	__asm__ volatile(
    fb0c:	f04f 0220 	mov.w	r2, #32
    fb10:	f3ef 8311 	mrs	r3, BASEPRI
    fb14:	f382 8811 	msr	BASEPRI, r2
	unsigned int imask = irq_lock();

#ifdef CONFIG_TICKLESS_KERNEL
	tmp_sys_clock_tick_count = _get_elapsed_clock_time();
#else
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    fb18:	4a02      	ldr	r2, [pc, #8]	; (fb24 <_tick_get+0x18>)
    fb1a:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fb1e:	f383 8811 	msr	BASEPRI, r3
#endif
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    fb22:	4770      	bx	lr
    fb24:	20003c98 	.word	0x20003c98

0000fb28 <_impl_k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, s64_t);

s64_t _impl_k_uptime_get(void)
{
    fb28:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get());
    fb2a:	f7ff ffef 	bl	fb0c <_tick_get>
    fb2e:	240a      	movs	r4, #10
    fb30:	fba0 2304 	umull	r2, r3, r0, r4
    fb34:	fb04 3301 	mla	r3, r4, r1, r3
}
    fb38:	4610      	mov	r0, r2
    fb3a:	4619      	mov	r1, r3
    fb3c:	bd10      	pop	{r4, pc}
	...

0000fb40 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    fb40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb44:	4607      	mov	r7, r0
	__asm__ volatile(
    fb46:	f04f 0320 	mov.w	r3, #32
    fb4a:	f3ef 8011 	mrs	r0, BASEPRI
    fb4e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    fb52:	4963      	ldr	r1, [pc, #396]	; (fce0 <_nano_sys_clock_tick_announce+0x1a0>)
    fb54:	e9d1 4500 	ldrd	r4, r5, [r1]
    fb58:	19e2      	adds	r2, r4, r7
    fb5a:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    fb5e:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fb62:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    fb66:	466e      	mov	r6, sp
    fb68:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    fb6c:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    fb70:	f04f 0320 	mov.w	r3, #32
    fb74:	f3ef 8011 	mrs	r0, BASEPRI
    fb78:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    fb7c:	4c59      	ldr	r4, [pc, #356]	; (fce4 <_nano_sys_clock_tick_announce+0x1a4>)
    fb7e:	4621      	mov	r1, r4
    fb80:	4602      	mov	r2, r0
    fb82:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fb86:	428b      	cmp	r3, r1
    fb88:	d000      	beq.n	fb8c <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    fb8a:	b9fb      	cbnz	r3, fbcc <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fb8c:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    fb90:	68a0      	ldr	r0, [r4, #8]
    fb92:	f7ff fedb 	bl	f94c <_is_thread_time_slicing>
    fb96:	b1b0      	cbz	r0, fbc6 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    fb98:	4a53      	ldr	r2, [pc, #332]	; (fce8 <_nano_sys_clock_tick_announce+0x1a8>)
    fb9a:	6811      	ldr	r1, [r2, #0]
    fb9c:	230a      	movs	r3, #10
    fb9e:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    fba2:	4b52      	ldr	r3, [pc, #328]	; (fcec <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    fba4:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    fba6:	681b      	ldr	r3, [r3, #0]
    fba8:	429f      	cmp	r7, r3
    fbaa:	db0c      	blt.n	fbc6 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    fbac:	2300      	movs	r3, #0
    fbae:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    fbb0:	f04f 0320 	mov.w	r3, #32
    fbb4:	f3ef 8511 	mrs	r5, BASEPRI
    fbb8:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    fbbc:	68a0      	ldr	r0, [r4, #8]
    fbbe:	f7ff fe77 	bl	f8b0 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fbc2:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    fbc6:	b003      	add	sp, #12
    fbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    fbcc:	4d48      	ldr	r5, [pc, #288]	; (fcf0 <_nano_sys_clock_tick_announce+0x1b0>)
    fbce:	2101      	movs	r1, #1
    fbd0:	6029      	str	r1, [r5, #0]
    fbd2:	46ab      	mov	fp, r5
    fbd4:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    fbd6:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    fbda:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    fbde:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    fbe0:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    fbe2:	bfaa      	itet	ge
    fbe4:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    fbe8:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    fbec:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    fbf0:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    fbf2:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    fbf4:	691d      	ldr	r5, [r3, #16]
    fbf6:	4298      	cmp	r0, r3
    fbf8:	bf14      	ite	ne
    fbfa:	6818      	ldrne	r0, [r3, #0]
    fbfc:	2000      	moveq	r0, #0
    fbfe:	b9d5      	cbnz	r5, fc36 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    fc00:	e893 0220 	ldmia.w	r3, {r5, r9}
    fc04:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    fc08:	681d      	ldr	r5, [r3, #0]
    fc0a:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    fc0e:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    fc10:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    fc14:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    fc16:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    fc18:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    fc1a:	f8c3 c010 	str.w	ip, [r3, #16]
    fc1e:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    fc22:	f04f 0320 	mov.w	r3, #32
    fc26:	f3ef 8211 	mrs	r2, BASEPRI
    fc2a:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    fc2e:	4603      	mov	r3, r0
    fc30:	2800      	cmp	r0, #0
    fc32:	d1d4      	bne.n	fbde <_nano_sys_clock_tick_announce+0x9e>
    fc34:	e001      	b.n	fc3a <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    fc36:	2900      	cmp	r1, #0
    fc38:	dcf1      	bgt.n	fc1e <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fc3a:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    fc3e:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fc40:	42b0      	cmp	r0, r6
    fc42:	d103      	bne.n	fc4c <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    fc44:	2300      	movs	r3, #0
    fc46:	f8cb 3000 	str.w	r3, [fp]
    fc4a:	e7a1      	b.n	fb90 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    fc4c:	2800      	cmp	r0, #0
    fc4e:	d0f9      	beq.n	fc44 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    fc50:	9b01      	ldr	r3, [sp, #4]
    fc52:	4298      	cmp	r0, r3
    fc54:	d101      	bne.n	fc5a <_nano_sys_clock_tick_announce+0x11a>
    fc56:	2600      	movs	r6, #0
    fc58:	e000      	b.n	fc5c <_nano_sys_clock_tick_announce+0x11c>
    fc5a:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    fc5c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    fc60:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    fc64:	e890 000c 	ldmia.w	r0, {r2, r3}
    fc68:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    fc6a:	6802      	ldr	r2, [r0, #0]
    fc6c:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    fc6e:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    fc70:	f04f 0220 	mov.w	r2, #32
    fc74:	f3ef 8a11 	mrs	sl, BASEPRI
    fc78:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    fc7c:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    fc80:	b1fb      	cbz	r3, fcc2 <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    fc82:	68c2      	ldr	r2, [r0, #12]
    fc84:	b152      	cbz	r2, fc9c <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    fc86:	6859      	ldr	r1, [r3, #4]
    fc88:	681a      	ldr	r2, [r3, #0]
    fc8a:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    fc8c:	681a      	ldr	r2, [r3, #0]
    fc8e:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    fc90:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    fc92:	f8c3 901c 	str.w	r9, [r3, #28]
    fc96:	f022 0202 	bic.w	r2, r2, #2
    fc9a:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fc9c:	7a5a      	ldrb	r2, [r3, #9]
    fc9e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    fca2:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fca6:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    fca8:	d102      	bne.n	fcb0 <_nano_sys_clock_tick_announce+0x170>
    fcaa:	6a1a      	ldr	r2, [r3, #32]
    fcac:	3201      	adds	r2, #1
    fcae:	d013      	beq.n	fcd8 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fcb0:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    fcb4:	2e00      	cmp	r6, #0
    fcb6:	d0c5      	beq.n	fc44 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    fcb8:	9b01      	ldr	r3, [sp, #4]
    fcba:	42b3      	cmp	r3, r6
    fcbc:	d108      	bne.n	fcd0 <_nano_sys_clock_tick_announce+0x190>
    fcbe:	2300      	movs	r3, #0
    fcc0:	e007      	b.n	fcd2 <_nano_sys_clock_tick_announce+0x192>
    fcc2:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    fcc6:	6943      	ldr	r3, [r0, #20]
    fcc8:	2b00      	cmp	r3, #0
    fcca:	d0f3      	beq.n	fcb4 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    fccc:	4798      	blx	r3
    fcce:	e7f1      	b.n	fcb4 <_nano_sys_clock_tick_announce+0x174>
    fcd0:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    fcd2:	4630      	mov	r0, r6
    fcd4:	461e      	mov	r6, r3
    fcd6:	e7c5      	b.n	fc64 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    fcd8:	4618      	mov	r0, r3
    fcda:	f7ff fcaf 	bl	f63c <_add_thread_to_ready_q>
    fcde:	e7e7      	b.n	fcb0 <_nano_sys_clock_tick_announce+0x170>
    fce0:	20003c98 	.word	0x20003c98
    fce4:	20003930 	.word	0x20003930
    fce8:	20003c94 	.word	0x20003c94
    fcec:	20003a54 	.word	0x20003a54
    fcf0:	20003c90 	.word	0x20003c90

0000fcf4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    fcf4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    fcf6:	f44f 7200 	mov.w	r2, #512	; 0x200
    fcfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fcfe:	4903      	ldr	r1, [pc, #12]	; (fd0c <k_sys_work_q_init+0x18>)
    fd00:	4803      	ldr	r0, [pc, #12]	; (fd10 <k_sys_work_q_init+0x1c>)
    fd02:	f000 f98d 	bl	10020 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    fd06:	2000      	movs	r0, #0
    fd08:	bd08      	pop	{r3, pc}
    fd0a:	bf00      	nop
    fd0c:	20005210 	.word	0x20005210
    fd10:	20003ca0 	.word	0x20003ca0

0000fd14 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    fd14:	7a43      	ldrb	r3, [r0, #9]
    fd16:	06da      	lsls	r2, r3, #27
    fd18:	d104      	bne.n	fd24 <_is_thread_ready+0x10>
    fd1a:	6a00      	ldr	r0, [r0, #32]
    fd1c:	1c43      	adds	r3, r0, #1
    fd1e:	4258      	negs	r0, r3
    fd20:	4158      	adcs	r0, r3
    fd22:	4770      	bx	lr
    fd24:	2000      	movs	r0, #0
}
    fd26:	4770      	bx	lr

0000fd28 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    fd28:	6903      	ldr	r3, [r0, #16]
    fd2a:	1c5a      	adds	r2, r3, #1
    fd2c:	d011      	beq.n	fd52 <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    fd2e:	4a0a      	ldr	r2, [pc, #40]	; (fd58 <_abort_timeout+0x30>)
    fd30:	6952      	ldr	r2, [r2, #20]
    fd32:	4290      	cmp	r0, r2
    fd34:	bf1f      	itttt	ne
    fd36:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    fd38:	690a      	ldrne	r2, [r1, #16]
    fd3a:	189b      	addne	r3, r3, r2
    fd3c:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    fd3e:	e890 000c 	ldmia.w	r0, {r2, r3}
    fd42:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    fd44:	6802      	ldr	r2, [r0, #0]
    fd46:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    fd48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fd4c:	6103      	str	r3, [r0, #16]
	return 0;
    fd4e:	2000      	movs	r0, #0
    fd50:	4770      	bx	lr
		return _INACTIVE;
    fd52:	4618      	mov	r0, r3
}
    fd54:	4770      	bx	lr
    fd56:	bf00      	nop
    fd58:	20003930 	.word	0x20003930

0000fd5c <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    fd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    fd5e:	f04f 0320 	mov.w	r3, #32
    fd62:	f3ef 8611 	mrs	r6, BASEPRI
    fd66:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    fd6a:	4a19      	ldr	r2, [pc, #100]	; (fdd0 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    fd6c:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    fd6e:	230a      	movs	r3, #10
    fd70:	3109      	adds	r1, #9
    fd72:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    fd76:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    fd78:	6201      	str	r1, [r0, #32]
    fd7a:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    fd7c:	2300      	movs	r3, #0
    fd7e:	61c3      	str	r3, [r0, #28]
    fd80:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fd84:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    fd86:	f100 0510 	add.w	r5, r0, #16
    fd8a:	d108      	bne.n	fd9e <schedule_new_thread.part.13+0x42>
	node->next = list;
    fd8c:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    fd8e:	6953      	ldr	r3, [r2, #20]
    fd90:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    fd92:	6953      	ldr	r3, [r2, #20]
    fd94:	601d      	str	r5, [r3, #0]
	list->tail = node;
    fd96:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fd98:	f386 8811 	msr	BASEPRI, r6
    fd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    fd9e:	2b00      	cmp	r3, #0
    fda0:	d0f4      	beq.n	fd8c <schedule_new_thread.part.13+0x30>
    fda2:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    fda6:	6a04      	ldr	r4, [r0, #32]
    fda8:	691f      	ldr	r7, [r3, #16]
    fdaa:	42bc      	cmp	r4, r7
    fdac:	dc08      	bgt.n	fdc0 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    fdae:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    fdb0:	1b3c      	subs	r4, r7, r4
    fdb2:	611c      	str	r4, [r3, #16]
    fdb4:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    fdb6:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    fdb8:	685a      	ldr	r2, [r3, #4]
    fdba:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    fdbc:	605d      	str	r5, [r3, #4]
    fdbe:	e7eb      	b.n	fd98 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    fdc0:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    fdc2:	4573      	cmp	r3, lr
    fdc4:	6204      	str	r4, [r0, #32]
    fdc6:	d0e1      	beq.n	fd8c <schedule_new_thread.part.13+0x30>
    fdc8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    fdca:	2b00      	cmp	r3, #0
    fdcc:	d1eb      	bne.n	fda6 <schedule_new_thread.part.13+0x4a>
    fdce:	e7dd      	b.n	fd8c <schedule_new_thread.part.13+0x30>
    fdd0:	20003930 	.word	0x20003930

0000fdd4 <k_is_in_isr>:
    fdd4:	f3ef 8005 	mrs	r0, IPSR
    fdd8:	280d      	cmp	r0, #13
    fdda:	d807      	bhi.n	fdec <k_is_in_isr+0x18>
    fddc:	b138      	cbz	r0, fdee <k_is_in_isr+0x1a>
    fdde:	4b04      	ldr	r3, [pc, #16]	; (fdf0 <k_is_in_isr+0x1c>)
    fde0:	6858      	ldr	r0, [r3, #4]
    fde2:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    fde6:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    fdea:	4770      	bx	lr
    fdec:	2001      	movs	r0, #1
}
    fdee:	4770      	bx	lr
    fdf0:	e000ed00 	.word	0xe000ed00

0000fdf4 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    fdf4:	4b02      	ldr	r3, [pc, #8]	; (fe00 <_is_thread_essential+0xc>)
    fdf6:	689b      	ldr	r3, [r3, #8]
    fdf8:	7a18      	ldrb	r0, [r3, #8]
}
    fdfa:	f000 0001 	and.w	r0, r0, #1
    fdfe:	4770      	bx	lr
    fe00:	20003930 	.word	0x20003930

0000fe04 <_thread_entry>:
{
    fe04:	b508      	push	{r3, lr}
    fe06:	4604      	mov	r4, r0
    fe08:	4608      	mov	r0, r1
    fe0a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    fe0c:	461a      	mov	r2, r3
    fe0e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    fe10:	f7ff fd96 	bl	f940 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    fe14:	f7f1 f860 	bl	ed8 <_impl_k_thread_abort>

0000fe18 <_impl_k_thread_start>:
{
    fe18:	b510      	push	{r4, lr}
    fe1a:	4601      	mov	r1, r0
	__asm__ volatile(
    fe1c:	f04f 0320 	mov.w	r3, #32
    fe20:	f3ef 8411 	mrs	r4, BASEPRI
    fe24:	f383 8811 	msr	BASEPRI, r3
    fe28:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    fe2a:	075a      	lsls	r2, r3, #29
    fe2c:	d402      	bmi.n	fe34 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    fe2e:	f384 8811 	msr	BASEPRI, r4
    fe32:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    fe34:	f023 0304 	bic.w	r3, r3, #4
    fe38:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    fe3a:	f7ff ff6b 	bl	fd14 <_is_thread_ready>
    fe3e:	2800      	cmp	r0, #0
    fe40:	d0f5      	beq.n	fe2e <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    fe42:	4608      	mov	r0, r1
    fe44:	f7ff fbfa 	bl	f63c <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    fe48:	4b07      	ldr	r3, [pc, #28]	; (fe68 <_impl_k_thread_start+0x50>)
    fe4a:	689b      	ldr	r3, [r3, #8]
    fe4c:	895b      	ldrh	r3, [r3, #10]
    fe4e:	2b7f      	cmp	r3, #127	; 0x7f
    fe50:	d8ed      	bhi.n	fe2e <_impl_k_thread_start+0x16>
    fe52:	f7ff fced 	bl	f830 <__must_switch_threads>
    fe56:	2800      	cmp	r0, #0
    fe58:	d0e9      	beq.n	fe2e <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    fe5a:	f7ff fd9b 	bl	f994 <_update_time_slice_before_swap>
	return __swap(key);
    fe5e:	4620      	mov	r0, r4
}
    fe60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe64:	f7f0 be8c 	b.w	b80 <__swap>
    fe68:	20003930 	.word	0x20003930

0000fe6c <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    fe6c:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    fe6e:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fe70:	f7f0 bfc2 	b.w	df8 <_new_thread>

0000fe74 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    fe74:	b570      	push	{r4, r5, r6, lr}
    fe76:	b086      	sub	sp, #24
    fe78:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fe7a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    fe7c:	9604      	str	r6, [sp, #16]
    fe7e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    fe80:	9603      	str	r6, [sp, #12]
    fe82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    fe84:	9602      	str	r6, [sp, #8]
    fe86:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    fe88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    fe8a:	9601      	str	r6, [sp, #4]
    fe8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    fe8e:	9600      	str	r6, [sp, #0]
    fe90:	f7f0 ffb2 	bl	df8 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    fe94:	1c6b      	adds	r3, r5, #1
    fe96:	d003      	beq.n	fea0 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    fe98:	b92d      	cbnz	r5, fea6 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    fe9a:	4620      	mov	r0, r4
    fe9c:	f7ff ffbc 	bl	fe18 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    fea0:	4620      	mov	r0, r4
    fea2:	b006      	add	sp, #24
    fea4:	bd70      	pop	{r4, r5, r6, pc}
    fea6:	4629      	mov	r1, r5
    fea8:	4620      	mov	r0, r4
    feaa:	f7ff ff57 	bl	fd5c <schedule_new_thread.part.13>
    feae:	e7f7      	b.n	fea0 <_impl_k_thread_create+0x2c>

0000feb0 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    feb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    feb2:	b510      	push	{r4, lr}
    feb4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    feb6:	b103      	cbz	r3, feba <_k_thread_single_abort+0xa>
		thread->fn_abort();
    feb8:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    feba:	4620      	mov	r0, r4
    febc:	f7ff ff2a 	bl	fd14 <_is_thread_ready>
    fec0:	b138      	cbz	r0, fed2 <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    fec2:	4620      	mov	r0, r4
    fec4:	f7ff fc3e 	bl	f744 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    fec8:	7a63      	ldrb	r3, [r4, #9]
    feca:	f043 0308 	orr.w	r3, r3, #8
    fece:	7263      	strb	r3, [r4, #9]
    fed0:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    fed2:	7a63      	ldrb	r3, [r4, #9]
    fed4:	079b      	lsls	r3, r3, #30
    fed6:	d508      	bpl.n	feea <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    fed8:	e894 000c 	ldmia.w	r4, {r2, r3}
    fedc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    fede:	6822      	ldr	r2, [r4, #0]
    fee0:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    fee2:	7a63      	ldrb	r3, [r4, #9]
    fee4:	f023 0302 	bic.w	r3, r3, #2
    fee8:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    feea:	6a23      	ldr	r3, [r4, #32]
    feec:	3301      	adds	r3, #1
    feee:	d0eb      	beq.n	fec8 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    fef0:	f104 0010 	add.w	r0, r4, #16
    fef4:	f7ff ff18 	bl	fd28 <_abort_timeout>
    fef8:	e7e6      	b.n	fec8 <_k_thread_single_abort+0x18>
	...

0000fefc <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    fefc:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    fefe:	4f21      	ldr	r7, [pc, #132]	; (ff84 <_init_static_threads+0x88>)
    ff00:	4d21      	ldr	r5, [pc, #132]	; (ff88 <_init_static_threads+0x8c>)
{
    ff02:	b087      	sub	sp, #28
    ff04:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    ff06:	42bd      	cmp	r5, r7
    ff08:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    ff0c:	d314      	bcc.n	ff38 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    ff0e:	4b1f      	ldr	r3, [pc, #124]	; (ff8c <_init_static_threads+0x90>)
    ff10:	689a      	ldr	r2, [r3, #8]
    ff12:	7ad3      	ldrb	r3, [r2, #11]
    ff14:	3b01      	subs	r3, #1
    ff16:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    ff18:	f04f 0320 	mov.w	r3, #32
    ff1c:	f3ef 8511 	mrs	r5, BASEPRI
    ff20:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    ff24:	4c18      	ldr	r4, [pc, #96]	; (ff88 <_init_static_threads+0x8c>)
    ff26:	42b4      	cmp	r4, r6
    ff28:	d31f      	bcc.n	ff6a <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ff2a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    ff2e:	b007      	add	sp, #28
    ff30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    ff34:	f7ff bcac 	b.w	f890 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    ff38:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    ff3c:	9304      	str	r3, [sp, #16]
    ff3e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    ff42:	9303      	str	r3, [sp, #12]
    ff44:	f854 3c14 	ldr.w	r3, [r4, #-20]
    ff48:	9302      	str	r3, [sp, #8]
    ff4a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    ff4e:	9301      	str	r3, [sp, #4]
    ff50:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    ff54:	9300      	str	r3, [sp, #0]
    ff56:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    ff5a:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    ff5c:	f7f0 ff4c 	bl	df8 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    ff60:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    ff64:	64dd      	str	r5, [r3, #76]	; 0x4c
    ff66:	4625      	mov	r5, r4
    ff68:	e7cd      	b.n	ff06 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    ff6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ff6c:	1c4b      	adds	r3, r1, #1
    ff6e:	d003      	beq.n	ff78 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    ff70:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    ff72:	b919      	cbnz	r1, ff7c <_init_static_threads+0x80>
    ff74:	f7ff ff50 	bl	fe18 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    ff78:	342c      	adds	r4, #44	; 0x2c
    ff7a:	e7d4      	b.n	ff26 <_init_static_threads+0x2a>
    ff7c:	f7ff feee 	bl	fd5c <schedule_new_thread.part.13>
    ff80:	e7fa      	b.n	ff78 <_init_static_threads+0x7c>
    ff82:	bf00      	nop
    ff84:	200056b8 	.word	0x200056b8
    ff88:	200056b8 	.word	0x200056b8
    ff8c:	20003930 	.word	0x20003930

0000ff90 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    ff90:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    ff92:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    ff94:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    ff96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    ff9a:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    ff9c:	72c3      	strb	r3, [r0, #11]
    ff9e:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    ffa0:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    ffa2:	6183      	str	r3, [r0, #24]
	t->func = func;
    ffa4:	6243      	str	r3, [r0, #36]	; 0x24
    ffa6:	4770      	bx	lr

0000ffa8 <k_work_submit_to_queue>:
{
    ffa8:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ffaa:	f101 0308 	add.w	r3, r1, #8
    ffae:	f3bf 8f5b 	dmb	ish
    ffb2:	e853 2f00 	ldrex	r2, [r3]
    ffb6:	f042 0e01 	orr.w	lr, r2, #1
    ffba:	e843 ec00 	strex	ip, lr, [r3]
    ffbe:	f1bc 0f00 	cmp.w	ip, #0
    ffc2:	d1f6      	bne.n	ffb2 <k_work_submit_to_queue+0xa>
    ffc4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ffc8:	07d3      	lsls	r3, r2, #31
    ffca:	d403      	bmi.n	ffd4 <k_work_submit_to_queue+0x2c>
}
    ffcc:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    ffd0:	f7ff bac9 	b.w	f566 <k_queue_append>
    ffd4:	f85d fb04 	ldr.w	pc, [sp], #4

0000ffd8 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
    ffd8:	f1a0 010c 	sub.w	r1, r0, #12
    ffdc:	6980      	ldr	r0, [r0, #24]
    ffde:	f7ff bfe3 	b.w	ffa8 <k_work_submit_to_queue>

0000ffe2 <work_q_main>:
{
    ffe2:	b510      	push	{r4, lr}
    ffe4:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
    ffe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ffea:	4620      	mov	r0, r4
    ffec:	f7ff fadf 	bl	f5ae <k_queue_get>
		if (!work) {
    fff0:	4603      	mov	r3, r0
    fff2:	2800      	cmp	r0, #0
    fff4:	d0f7      	beq.n	ffe6 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    fff6:	3308      	adds	r3, #8
		handler = work->handler;
    fff8:	6842      	ldr	r2, [r0, #4]
    fffa:	f3bf 8f5b 	dmb	ish
    fffe:	e853 1f00 	ldrex	r1, [r3]
   10002:	f021 0e01 	bic.w	lr, r1, #1
   10006:	e843 ec00 	strex	ip, lr, [r3]
   1000a:	f1bc 0f00 	cmp.w	ip, #0
   1000e:	d1f6      	bne.n	fffe <work_q_main+0x1c>
   10010:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
   10014:	07cb      	lsls	r3, r1, #31
   10016:	d500      	bpl.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
			handler(work);
   10018:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1001a:	f7ff fc73 	bl	f904 <_impl_k_yield>
   1001e:	e7e2      	b.n	ffe6 <work_q_main+0x4>

00010020 <k_work_q_start>:
{
   10020:	b5f0      	push	{r4, r5, r6, r7, lr}
   10022:	b087      	sub	sp, #28
   10024:	4604      	mov	r4, r0
   10026:	461f      	mov	r7, r3
   10028:	460d      	mov	r5, r1
   1002a:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
   1002c:	f7ff fa6a 	bl	f504 <k_queue_init>

   10030:	2000      	movs	r0, #0
   10032:	9005      	str	r0, [sp, #20]
   10034:	9004      	str	r0, [sp, #16]
   10036:	9002      	str	r0, [sp, #8]
   10038:	9001      	str	r0, [sp, #4]
   1003a:	9703      	str	r7, [sp, #12]
   1003c:	9400      	str	r4, [sp, #0]
   1003e:	4b04      	ldr	r3, [pc, #16]	; (10050 <k_work_q_start+0x30>)
   10040:	4632      	mov	r2, r6
   10042:	4629      	mov	r1, r5
   10044:	f104 0010 	add.w	r0, r4, #16
   10048:	f7ff ff14 	bl	fe74 <_impl_k_thread_create>
}
   1004c:	b007      	add	sp, #28
   1004e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10050:	0000ffe3 	.word	0x0000ffe3

00010054 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   10054:	b500      	push	{lr}
   10056:	f100 0308 	add.w	r3, r0, #8
   1005a:	f3bf 8f5b 	dmb	ish
   1005e:	e853 2f00 	ldrex	r2, [r3]
   10062:	f022 0201 	bic.w	r2, r2, #1
   10066:	e843 2e00 	strex	lr, r2, [r3]
   1006a:	f1be 0f00 	cmp.w	lr, #0
   1006e:	d1f6      	bne.n	1005e <k_delayed_work_init+0xa>
   10070:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
   10074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10078:	61c3      	str	r3, [r0, #28]
	t->func = func;
   1007a:	4a04      	ldr	r2, [pc, #16]	; (1008c <k_delayed_work_init+0x38>)
	work->handler = handler;
   1007c:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
   1007e:	2300      	movs	r3, #0
   10080:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   10082:	6143      	str	r3, [r0, #20]
	t->func = func;
   10084:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   10086:	6243      	str	r3, [r0, #36]	; 0x24
   10088:	f85d fb04 	ldr.w	pc, [sp], #4
   1008c:	0000ffd9 	.word	0x0000ffd9

00010090 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   10090:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   10092:	f04f 0320 	mov.w	r3, #32
   10096:	f3ef 8411 	mrs	r4, BASEPRI
   1009a:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   1009e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   100a0:	b923      	cbnz	r3, 100ac <k_delayed_work_cancel+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   100a2:	f384 8811 	msr	BASEPRI, r4

	if (k_work_pending(&work->work)) {
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
			irq_unlock(key);
			return -EINVAL;
   100a6:	f06f 0015 	mvn.w	r0, #21

	atomic_clear_bit(work->work.flags, K_WORK_STATE_PENDING);
	irq_unlock(key);

	return 0;
}
   100aa:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   100ac:	f3bf 8f5b 	dmb	ish
   100b0:	6883      	ldr	r3, [r0, #8]
   100b2:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   100b6:	07da      	lsls	r2, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   100b8:	f100 0508 	add.w	r5, r0, #8
   100bc:	d529      	bpl.n	10112 <k_delayed_work_cancel+0x82>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   100be:	6a42      	ldr	r2, [r0, #36]	; 0x24
   100c0:	6813      	ldr	r3, [r2, #0]
	sys_snode_t *prev = NULL;
   100c2:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   100c4:	2b00      	cmp	r3, #0
   100c6:	d0ec      	beq.n	100a2 <k_delayed_work_cancel+0x12>
		if (test == node) {
   100c8:	4298      	cmp	r0, r3
   100ca:	d11f      	bne.n	1010c <k_delayed_work_cancel+0x7c>
   100cc:	6803      	ldr	r3, [r0, #0]
   100ce:	6856      	ldr	r6, [r2, #4]
	if (!prev_node) {
   100d0:	b9b9      	cbnz	r1, 10102 <k_delayed_work_cancel+0x72>
		if (list->tail == node) {
   100d2:	42b0      	cmp	r0, r6
		list->head = node->next;
   100d4:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   100d6:	d100      	bne.n	100da <k_delayed_work_cancel+0x4a>
			list->tail = list->head;
   100d8:	6053      	str	r3, [r2, #4]
	node->next = NULL;
   100da:	2300      	movs	r3, #0
   100dc:	6003      	str	r3, [r0, #0]
	work->work_q = NULL;
   100de:	2300      	movs	r3, #0
   100e0:	6243      	str	r3, [r0, #36]	; 0x24
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   100e2:	f3bf 8f5b 	dmb	ish
   100e6:	e855 2f00 	ldrex	r2, [r5]
   100ea:	f022 0201 	bic.w	r2, r2, #1
   100ee:	e845 2100 	strex	r1, r2, [r5]
   100f2:	2900      	cmp	r1, #0
   100f4:	d1f7      	bne.n	100e6 <k_delayed_work_cancel+0x56>
   100f6:	f3bf 8f5b 	dmb	ish
   100fa:	f384 8811 	msr	BASEPRI, r4
	return 0;
   100fe:	4618      	mov	r0, r3
   10100:	bd70      	pop	{r4, r5, r6, pc}
		if (list->tail == node) {
   10102:	42b0      	cmp	r0, r6
		prev_node->next = node->next;
   10104:	600b      	str	r3, [r1, #0]
			list->tail = prev_node;
   10106:	bf08      	it	eq
   10108:	6051      	streq	r1, [r2, #4]
   1010a:	e7e6      	b.n	100da <k_delayed_work_cancel+0x4a>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1010c:	4619      	mov	r1, r3
   1010e:	681b      	ldr	r3, [r3, #0]
   10110:	e7d8      	b.n	100c4 <k_delayed_work_cancel+0x34>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   10112:	69c1      	ldr	r1, [r0, #28]
   10114:	1c4b      	adds	r3, r1, #1
		_abort_timeout(&work->timeout);
   10116:	f100 020c 	add.w	r2, r0, #12
   1011a:	d0e0      	beq.n	100de <k_delayed_work_cancel+0x4e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   1011c:	4b08      	ldr	r3, [pc, #32]	; (10140 <k_delayed_work_cancel+0xb0>)
   1011e:	695b      	ldr	r3, [r3, #20]
   10120:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
   10122:	bf1f      	itttt	ne
   10124:	68c2      	ldrne	r2, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   10126:	6913      	ldrne	r3, [r2, #16]
   10128:	185b      	addne	r3, r3, r1
   1012a:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
   1012c:	6903      	ldr	r3, [r0, #16]
   1012e:	68c2      	ldr	r2, [r0, #12]
   10130:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   10132:	68c2      	ldr	r2, [r0, #12]
   10134:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   10136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1013a:	61c3      	str	r3, [r0, #28]
   1013c:	e7cf      	b.n	100de <k_delayed_work_cancel+0x4e>
   1013e:	bf00      	nop
   10140:	20003930 	.word	0x20003930

00010144 <k_delayed_work_submit_to_queue>:
{
   10144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10146:	4607      	mov	r7, r0
   10148:	460c      	mov	r4, r1
   1014a:	4615      	mov	r5, r2
	__asm__ volatile(
   1014c:	f04f 0320 	mov.w	r3, #32
   10150:	f3ef 8611 	mrs	r6, BASEPRI
   10154:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   10158:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1015a:	b123      	cbz	r3, 10166 <k_delayed_work_submit_to_queue+0x22>
   1015c:	4283      	cmp	r3, r0
   1015e:	d00b      	beq.n	10178 <k_delayed_work_submit_to_queue+0x34>
		err = -EADDRINUSE;
   10160:	f06f 002f 	mvn.w	r0, #47	; 0x2f
   10164:	e00d      	b.n	10182 <k_delayed_work_submit_to_queue+0x3e>
	if (work->work_q == work_q) {
   10166:	b138      	cbz	r0, 10178 <k_delayed_work_submit_to_queue+0x34>
	work->work_q = work_q;
   10168:	6267      	str	r7, [r4, #36]	; 0x24
	if (!delay) {
   1016a:	b96d      	cbnz	r5, 10188 <k_delayed_work_submit_to_queue+0x44>
		k_work_submit_to_queue(work_q, &work->work);
   1016c:	4621      	mov	r1, r4
   1016e:	4638      	mov	r0, r7
   10170:	f7ff ff1a 	bl	ffa8 <k_work_submit_to_queue>
	err = 0;
   10174:	2000      	movs	r0, #0
   10176:	e004      	b.n	10182 <k_delayed_work_submit_to_queue+0x3e>
		err = k_delayed_work_cancel(work);
   10178:	4620      	mov	r0, r4
   1017a:	f7ff ff89 	bl	10090 <k_delayed_work_cancel>
		if (err < 0) {
   1017e:	2800      	cmp	r0, #0
   10180:	daf2      	bge.n	10168 <k_delayed_work_submit_to_queue+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   10182:	f386 8811 	msr	BASEPRI, r6
}
   10186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   10188:	220a      	movs	r2, #10
   1018a:	3509      	adds	r5, #9
   1018c:	fbb5 f5f2 	udiv	r5, r5, r2
	return list->head == list;
   10190:	4a16      	ldr	r2, [pc, #88]	; (101ec <k_delayed_work_submit_to_queue+0xa8>)
   10192:	4611      	mov	r1, r2
	timeout->thread = thread;
   10194:	2300      	movs	r3, #0
   10196:	6163      	str	r3, [r4, #20]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   10198:	61a3      	str	r3, [r4, #24]
   1019a:	f851 3f10 	ldr.w	r3, [r1, #16]!
		_add_timeout(NULL, &work->timeout, NULL,
   1019e:	3501      	adds	r5, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
   101a0:	428b      	cmp	r3, r1
   101a2:	f104 070c 	add.w	r7, r4, #12
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   101a6:	61e5      	str	r5, [r4, #28]
   101a8:	d106      	bne.n	101b8 <k_delayed_work_submit_to_queue+0x74>
	node->next = list;
   101aa:	60e1      	str	r1, [r4, #12]
	node->prev = list->tail;
   101ac:	6953      	ldr	r3, [r2, #20]
   101ae:	6123      	str	r3, [r4, #16]
	list->tail->next = node;
   101b0:	6953      	ldr	r3, [r2, #20]
   101b2:	601f      	str	r7, [r3, #0]
	list->tail = node;
   101b4:	6157      	str	r7, [r2, #20]
   101b6:	e7dd      	b.n	10174 <k_delayed_work_submit_to_queue+0x30>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   101b8:	2b00      	cmp	r3, #0
   101ba:	d0f6      	beq.n	101aa <k_delayed_work_submit_to_queue+0x66>
   101bc:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
   101c0:	69e0      	ldr	r0, [r4, #28]
   101c2:	691d      	ldr	r5, [r3, #16]
   101c4:	42a8      	cmp	r0, r5
   101c6:	dc08      	bgt.n	101da <k_delayed_work_submit_to_queue+0x96>
		node->prev = insert_point->prev;
   101c8:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
   101ca:	1a28      	subs	r0, r5, r0
   101cc:	6118      	str	r0, [r3, #16]
   101ce:	6122      	str	r2, [r4, #16]
		node->next = insert_point;
   101d0:	60e3      	str	r3, [r4, #12]
		insert_point->prev->next = node;
   101d2:	685a      	ldr	r2, [r3, #4]
   101d4:	6017      	str	r7, [r2, #0]
		insert_point->prev = node;
   101d6:	605f      	str	r7, [r3, #4]
   101d8:	e7cc      	b.n	10174 <k_delayed_work_submit_to_queue+0x30>
		*delta -= in_q->delta_ticks_from_prev;
   101da:	1b40      	subs	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   101dc:	4573      	cmp	r3, lr
   101de:	61e0      	str	r0, [r4, #28]
   101e0:	d0e3      	beq.n	101aa <k_delayed_work_submit_to_queue+0x66>
   101e2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   101e4:	2b00      	cmp	r3, #0
   101e6:	d1eb      	bne.n	101c0 <k_delayed_work_submit_to_queue+0x7c>
   101e8:	e7df      	b.n	101aa <k_delayed_work_submit_to_queue+0x66>
   101ea:	bf00      	nop
   101ec:	20003930 	.word	0x20003930

000101f0 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
   101f0:	7a42      	ldrb	r2, [r0, #9]
   101f2:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
   101f6:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
   101fa:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   101fc:	d104      	bne.n	10208 <_ready_thread+0x18>
   101fe:	6a03      	ldr	r3, [r0, #32]
   10200:	3301      	adds	r3, #1
   10202:	d101      	bne.n	10208 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
   10204:	f7ff ba1a 	b.w	f63c <_add_thread_to_ready_q>
   10208:	4770      	bx	lr

0001020a <_unpend_thread>:
	node->prev->next = node->next;
   1020a:	e890 000c 	ldmia.w	r0, {r2, r3}
   1020e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   10210:	6802      	ldr	r2, [r0, #0]
   10212:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   10214:	7a43      	ldrb	r3, [r0, #9]
   10216:	f023 0302 	bic.w	r3, r3, #2
   1021a:	7243      	strb	r3, [r0, #9]
   1021c:	4770      	bx	lr
	...

00010220 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
   10220:	b430      	push	{r4, r5}
	timeout->thread = thread;
   10222:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
   10224:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   10226:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
   10228:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   1022a:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   1022c:	b972      	cbnz	r2, 1024c <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
   1022e:	f04f 0120 	mov.w	r1, #32
   10232:	f3ef 8211 	mrs	r2, BASEPRI
   10236:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
   1023a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1023e:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   10240:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
   10244:	6943      	ldr	r3, [r0, #20]
   10246:	b16b      	cbz	r3, 10264 <_add_timeout.constprop.9+0x44>
}
   10248:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
   1024a:	4718      	bx	r3
	return list->head == list;
   1024c:	4911      	ldr	r1, [pc, #68]	; (10294 <_add_timeout.constprop.9+0x74>)
   1024e:	4608      	mov	r0, r1
   10250:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10254:	4282      	cmp	r2, r0
   10256:	d10d      	bne.n	10274 <_add_timeout.constprop.9+0x54>
	node->next = list;
   10258:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
   1025a:	694a      	ldr	r2, [r1, #20]
   1025c:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   1025e:	694a      	ldr	r2, [r1, #20]
   10260:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10262:	614b      	str	r3, [r1, #20]
}
   10264:	bc30      	pop	{r4, r5}
   10266:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
   10268:	1b64      	subs	r4, r4, r5
   1026a:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
   1026c:	694c      	ldr	r4, [r1, #20]
   1026e:	42a2      	cmp	r2, r4
   10270:	d0f2      	beq.n	10258 <_add_timeout.constprop.9+0x38>
   10272:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   10274:	2a00      	cmp	r2, #0
   10276:	d0ef      	beq.n	10258 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
   10278:	691c      	ldr	r4, [r3, #16]
   1027a:	6915      	ldr	r5, [r2, #16]
   1027c:	42ac      	cmp	r4, r5
   1027e:	dcf3      	bgt.n	10268 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
   10280:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
   10282:	1b2c      	subs	r4, r5, r4
   10284:	6114      	str	r4, [r2, #16]
   10286:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
   10288:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
   1028a:	6851      	ldr	r1, [r2, #4]
   1028c:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
   1028e:	6053      	str	r3, [r2, #4]
   10290:	e7e8      	b.n	10264 <_add_timeout.constprop.9+0x44>
   10292:	bf00      	nop
   10294:	20003930 	.word	0x20003930

00010298 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   10298:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1029a:	2b00      	cmp	r3, #0
{
   1029c:	b570      	push	{r4, r5, r6, lr}
   1029e:	4604      	mov	r4, r0
   102a0:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
   102a4:	dd0b      	ble.n	102be <_timer_expiration_handler+0x26>
	__asm__ volatile(
   102a6:	f04f 0320 	mov.w	r3, #32
   102aa:	f3ef 8611 	mrs	r6, BASEPRI
   102ae:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   102b2:	6a82      	ldr	r2, [r0, #40]	; 0x28
   102b4:	4629      	mov	r1, r5
   102b6:	f7ff ffb3 	bl	10220 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   102ba:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   102be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   102c0:	3301      	adds	r3, #1
   102c2:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   102c4:	6a23      	ldr	r3, [r4, #32]
   102c6:	b10b      	cbz	r3, 102cc <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
   102c8:	4620      	mov	r0, r4
   102ca:	4798      	blx	r3
	return list->head == list;
   102cc:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   102ce:	42ac      	cmp	r4, r5
   102d0:	d010      	beq.n	102f4 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
   102d2:	b17c      	cbz	r4, 102f4 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
   102d4:	4620      	mov	r0, r4
   102d6:	f7ff ff98 	bl	1020a <_unpend_thread>
	__asm__ volatile(
   102da:	f04f 0320 	mov.w	r3, #32
   102de:	f3ef 8511 	mrs	r5, BASEPRI
   102e2:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
   102e6:	4620      	mov	r0, r4
   102e8:	f7ff ff82 	bl	101f0 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   102ec:	f385 8811 	msr	BASEPRI, r5
   102f0:	2300      	movs	r3, #0
   102f2:	6663      	str	r3, [r4, #100]	; 0x64
   102f4:	bd70      	pop	{r4, r5, r6, pc}

000102f6 <sys_dlist_remove>:
	node->prev->next = node->next;
   102f6:	e890 000c 	ldmia.w	r0, {r2, r3}
   102fa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   102fc:	6802      	ldr	r2, [r0, #0]
   102fe:	6053      	str	r3, [r2, #4]
   10300:	4770      	bx	lr

00010302 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
   10302:	b570      	push	{r4, r5, r6, lr}
   10304:	2414      	movs	r4, #20
   10306:	4615      	mov	r5, r2
   10308:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
   1030c:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
   1030e:	2900      	cmp	r1, #0
   10310:	da00      	bge.n	10314 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
   10312:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   10314:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
   10316:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
   10318:	f003 030f 	and.w	r3, r3, #15
   1031c:	2b02      	cmp	r3, #2
   1031e:	d003      	beq.n	10328 <clear_event_registrations+0x26>
   10320:	2b04      	cmp	r3, #4
   10322:	d001      	beq.n	10328 <clear_event_registrations+0x26>
   10324:	2b01      	cmp	r3, #1
   10326:	d102      	bne.n	1032e <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
   10328:	4620      	mov	r0, r4
   1032a:	f7ff ffe4 	bl	102f6 <sys_dlist_remove>
   1032e:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   10332:	f04f 0320 	mov.w	r3, #32
   10336:	f3ef 8511 	mrs	r5, BASEPRI
   1033a:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   1033e:	3901      	subs	r1, #1
   10340:	3c14      	subs	r4, #20
   10342:	e7e4      	b.n	1030e <clear_event_registrations+0xc>

00010344 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   10344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
   10346:	2300      	movs	r3, #0
   10348:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   1034a:	6883      	ldr	r3, [r0, #8]
{
   1034c:	4605      	mov	r5, r0
   1034e:	460e      	mov	r6, r1
   10350:	4617      	mov	r7, r2
	if (!event->poller) {
   10352:	2b00      	cmp	r3, #0
   10354:	d049      	beq.n	103ea <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   10356:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
   10358:	7a4b      	ldrb	r3, [r1, #9]
   1035a:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   1035e:	0798      	lsls	r0, r3, #30
   10360:	724a      	strb	r2, [r1, #9]
   10362:	d542      	bpl.n	103ea <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   10364:	6a0b      	ldr	r3, [r1, #32]
   10366:	3302      	adds	r3, #2
   10368:	d04a      	beq.n	10400 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
   1036a:	4608      	mov	r0, r1
   1036c:	f7ff ffc3 	bl	102f6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10370:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   10372:	6a0c      	ldr	r4, [r1, #32]
   10374:	f023 0302 	bic.w	r3, r3, #2
   10378:	1c62      	adds	r2, r4, #1
   1037a:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
   1037c:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   10380:	d00c      	beq.n	1039c <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   10382:	4b21      	ldr	r3, [pc, #132]	; (10408 <signal_poll_event+0xc4>)
   10384:	695b      	ldr	r3, [r3, #20]
   10386:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
   10388:	bf1f      	itttt	ne
   1038a:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   1038c:	6913      	ldrne	r3, [r2, #16]
   1038e:	191b      	addne	r3, r3, r4
   10390:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
   10392:	f7ff ffb0 	bl	102f6 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
   10396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1039a:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   1039c:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   1039e:	2e00      	cmp	r6, #0
   103a0:	bf0c      	ite	eq
   103a2:	f06f 0303 	mvneq.w	r3, #3
   103a6:	2300      	movne	r3, #0
   103a8:	f010 041f 	ands.w	r4, r0, #31
   103ac:	664b      	str	r3, [r1, #100]	; 0x64
   103ae:	d11c      	bne.n	103ea <signal_poll_event+0xa6>
   103b0:	6a0b      	ldr	r3, [r1, #32]
   103b2:	3301      	adds	r3, #1
   103b4:	d119      	bne.n	103ea <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
   103b6:	4608      	mov	r0, r1
   103b8:	f7ff f940 	bl	f63c <_add_thread_to_ready_q>
   103bc:	f3ef 8305 	mrs	r3, IPSR
   103c0:	2b0d      	cmp	r3, #13
   103c2:	d81b      	bhi.n	103fc <signal_poll_event+0xb8>
   103c4:	b123      	cbz	r3, 103d0 <signal_poll_event+0x8c>
   103c6:	4b11      	ldr	r3, [pc, #68]	; (1040c <signal_poll_event+0xc8>)
   103c8:	6858      	ldr	r0, [r3, #4]
   103ca:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
   103ce:	d00b      	beq.n	103e8 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
   103d0:	4b0d      	ldr	r3, [pc, #52]	; (10408 <signal_poll_event+0xc4>)
   103d2:	689b      	ldr	r3, [r3, #8]
   103d4:	895b      	ldrh	r3, [r3, #10]
   103d6:	2b7f      	cmp	r3, #127	; 0x7f
   103d8:	d901      	bls.n	103de <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   103da:	2000      	movs	r0, #0
   103dc:	e004      	b.n	103e8 <signal_poll_event+0xa4>
   103de:	f7ff fa27 	bl	f830 <__must_switch_threads>
   103e2:	3000      	adds	r0, #0
   103e4:	bf18      	it	ne
   103e6:	2001      	movne	r0, #1
   103e8:	6038      	str	r0, [r7, #0]
	event->state |= state;
   103ea:	7b6b      	ldrb	r3, [r5, #13]
   103ec:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
   103f0:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
   103f4:	2000      	movs	r0, #0
	event->state |= state;
   103f6:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
   103f8:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
   103fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   103fc:	4620      	mov	r0, r4
   103fe:	e7f3      	b.n	103e8 <signal_poll_event+0xa4>
		return -EAGAIN;
   10400:	f06f 000a 	mvn.w	r0, #10
   10404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10406:	bf00      	nop
   10408:	20003930 	.word	0x20003930
   1040c:	e000ed00 	.word	0xe000ed00

00010410 <add_event>:
	return list->head == list;
   10410:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   10412:	4298      	cmp	r0, r3
{
   10414:	b530      	push	{r4, r5, lr}
   10416:	d00a      	beq.n	1042e <add_event+0x1e>
   10418:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   1041a:	b144      	cbz	r4, 1042e <add_event+0x1e>
   1041c:	68a5      	ldr	r5, [r4, #8]
   1041e:	6812      	ldr	r2, [r2, #0]
   10420:	682d      	ldr	r5, [r5, #0]
   10422:	f992 200a 	ldrsb.w	r2, [r2, #10]
   10426:	f995 500a 	ldrsb.w	r5, [r5, #10]
   1042a:	4295      	cmp	r5, r2
   1042c:	da17      	bge.n	1045e <add_event+0x4e>
	node->next = list;
   1042e:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
   10430:	6843      	ldr	r3, [r0, #4]
   10432:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
   10434:	6843      	ldr	r3, [r0, #4]
   10436:	6019      	str	r1, [r3, #0]
	list->tail = node;
   10438:	6041      	str	r1, [r0, #4]
   1043a:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
   1043c:	689d      	ldr	r5, [r3, #8]
   1043e:	682d      	ldr	r5, [r5, #0]
   10440:	f995 500a 	ldrsb.w	r5, [r5, #10]
   10444:	4295      	cmp	r5, r2
   10446:	dd06      	ble.n	10456 <add_event+0x46>
		node->prev = insert_point->prev;
   10448:	685a      	ldr	r2, [r3, #4]
   1044a:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
   1044c:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
   1044e:	685a      	ldr	r2, [r3, #4]
   10450:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
   10452:	6059      	str	r1, [r3, #4]
   10454:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   10456:	42a3      	cmp	r3, r4
   10458:	d003      	beq.n	10462 <add_event+0x52>
   1045a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1045c:	b10b      	cbz	r3, 10462 <add_event+0x52>
   1045e:	2b00      	cmp	r3, #0
   10460:	d1ec      	bne.n	1043c <add_event+0x2c>
	node->prev = list->tail;
   10462:	e881 0011 	stmia.w	r1, {r0, r4}
   10466:	e7e5      	b.n	10434 <add_event+0x24>

00010468 <k_poll_event_init>:
{
   10468:	b530      	push	{r4, r5, lr}
	event->type = type;
   1046a:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
   1046c:	6103      	str	r3, [r0, #16]
	event->type = type;
   1046e:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
   10472:	7b81      	ldrb	r1, [r0, #14]
   10474:	f362 0100 	bfi	r1, r2, #0, #1
   10478:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   1047a:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
   1047c:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
   1047e:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
   10482:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
   10486:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   10488:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
   1048a:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   1048c:	bd30      	pop	{r4, r5, pc}
	...

00010490 <k_poll>:
{
   10490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10494:	b087      	sub	sp, #28
   10496:	4680      	mov	r8, r0
   10498:	9101      	str	r1, [sp, #4]
   1049a:	4691      	mov	r9, r2
   1049c:	f04f 0320 	mov.w	r3, #32
   104a0:	f3ef 8111 	mrs	r1, BASEPRI
   104a4:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   104a8:	4d4a      	ldr	r5, [pc, #296]	; (105d4 <k_poll+0x144>)
   104aa:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
   104ac:	7a53      	ldrb	r3, [r2, #9]
   104ae:	f043 0320 	orr.w	r3, r3, #32
   104b2:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   104b4:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
   104b8:	f10d 0a18 	add.w	sl, sp, #24
   104bc:	68aa      	ldr	r2, [r5, #8]
   104be:	f84a 2d0c 	str.w	r2, [sl, #-12]!
   104c2:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
   104c4:	2700      	movs	r7, #0
	int last_registered = -1, rc;
   104c6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	429f      	cmp	r7, r3
   104ce:	db15      	blt.n	104fc <k_poll+0x6c>
	__asm__ volatile(
   104d0:	f04f 0320 	mov.w	r3, #32
   104d4:	f3ef 8711 	mrs	r7, BASEPRI
   104d8:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   104dc:	68aa      	ldr	r2, [r5, #8]
   104de:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   104e0:	f013 0420 	ands.w	r4, r3, #32
   104e4:	d144      	bne.n	10570 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
   104e6:	463a      	mov	r2, r7
   104e8:	4631      	mov	r1, r6
   104ea:	4640      	mov	r0, r8
   104ec:	f7ff ff09 	bl	10302 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   104f0:	f387 8811 	msr	BASEPRI, r7
}
   104f4:	4620      	mov	r0, r4
   104f6:	b007      	add	sp, #28
   104f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   104fc:	f04f 0220 	mov.w	r2, #32
   10500:	f3ef 8b11 	mrs	fp, BASEPRI
   10504:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
   10508:	7b61      	ldrb	r1, [r4, #13]
   1050a:	f001 020f 	and.w	r2, r1, #15
   1050e:	2a02      	cmp	r2, #2
   10510:	d003      	beq.n	1051a <k_poll+0x8a>
   10512:	2a04      	cmp	r2, #4
   10514:	d004      	beq.n	10520 <k_poll+0x90>
   10516:	2a01      	cmp	r2, #1
   10518:	d106      	bne.n	10528 <k_poll+0x98>
		if (event->signal->signaled) {
   1051a:	6920      	ldr	r0, [r4, #16]
   1051c:	6880      	ldr	r0, [r0, #8]
   1051e:	e001      	b.n	10524 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
   10520:	6920      	ldr	r0, [r4, #16]
   10522:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
   10524:	2800      	cmp	r0, #0
   10526:	d148      	bne.n	105ba <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   10528:	f1b9 0f00 	cmp.w	r9, #0
   1052c:	d016      	beq.n	1055c <k_poll+0xcc>
   1052e:	68a9      	ldr	r1, [r5, #8]
   10530:	7a49      	ldrb	r1, [r1, #9]
   10532:	068b      	lsls	r3, r1, #26
   10534:	d512      	bpl.n	1055c <k_poll+0xcc>
	switch (event->type) {
   10536:	2a02      	cmp	r2, #2
   10538:	d007      	beq.n	1054a <k_poll+0xba>
   1053a:	2a04      	cmp	r2, #4
   1053c:	d013      	beq.n	10566 <k_poll+0xd6>
   1053e:	2a01      	cmp	r2, #1
   10540:	d109      	bne.n	10556 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
   10542:	4652      	mov	r2, sl
   10544:	4621      	mov	r1, r4
   10546:	6920      	ldr	r0, [r4, #16]
   10548:	e003      	b.n	10552 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
   1054a:	6920      	ldr	r0, [r4, #16]
   1054c:	4652      	mov	r2, sl
   1054e:	4621      	mov	r1, r4
   10550:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   10552:	f7ff ff5d 	bl	10410 <add_event>
	event->poller = poller;
   10556:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
   1055a:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1055c:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
   10560:	3701      	adds	r7, #1
   10562:	3414      	adds	r4, #20
   10564:	e7b1      	b.n	104ca <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
   10566:	6920      	ldr	r0, [r4, #16]
   10568:	4652      	mov	r2, sl
   1056a:	4621      	mov	r1, r4
   1056c:	3008      	adds	r0, #8
   1056e:	e7f0      	b.n	10552 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
   10570:	f023 0320 	bic.w	r3, r3, #32
   10574:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   10576:	f1b9 0f00 	cmp.w	r9, #0
   1057a:	d104      	bne.n	10586 <k_poll+0xf6>
   1057c:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
   10580:	f06f 040a 	mvn.w	r4, #10
   10584:	e7b6      	b.n	104f4 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   10586:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
   10588:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   1058a:	9004      	str	r0, [sp, #16]
   1058c:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
   1058e:	f7ff f93f 	bl	f810 <_pend_current_thread>
	_update_time_slice_before_swap();
   10592:	f7ff f9ff 	bl	f994 <_update_time_slice_before_swap>
	return __swap(key);
   10596:	4638      	mov	r0, r7
   10598:	f7f0 faf2 	bl	b80 <__swap>
   1059c:	4604      	mov	r4, r0
	__asm__ volatile(
   1059e:	f04f 0320 	mov.w	r3, #32
   105a2:	f3ef 8511 	mrs	r5, BASEPRI
   105a6:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
   105aa:	462a      	mov	r2, r5
   105ac:	4631      	mov	r1, r6
   105ae:	4640      	mov	r0, r8
   105b0:	f7ff fea7 	bl	10302 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   105b4:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
   105b8:	e79c      	b.n	104f4 <k_poll+0x64>
	event->state |= state;
   105ba:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
   105be:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
   105c2:	2300      	movs	r3, #0
   105c4:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   105c6:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
   105c8:	68a9      	ldr	r1, [r5, #8]
   105ca:	7a4a      	ldrb	r2, [r1, #9]
   105cc:	f022 0220 	bic.w	r2, r2, #32
   105d0:	724a      	strb	r2, [r1, #9]
   105d2:	e7c3      	b.n	1055c <k_poll+0xcc>
   105d4:	20003930 	.word	0x20003930

000105d8 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
   105d8:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
   105da:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   105dc:	42a0      	cmp	r0, r4
   105de:	d102      	bne.n	105e6 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
   105e0:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
   105e2:	b002      	add	sp, #8
   105e4:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
   105e6:	4620      	mov	r0, r4
   105e8:	f7ff fe85 	bl	102f6 <sys_dlist_remove>
	if (!poll_event) {
   105ec:	2c00      	cmp	r4, #0
   105ee:	d0f7      	beq.n	105e0 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
   105f0:	aa01      	add	r2, sp, #4
   105f2:	4620      	mov	r0, r4
   105f4:	f7ff fea6 	bl	10344 <signal_poll_event>
	return must_reschedule;
   105f8:	9801      	ldr	r0, [sp, #4]
   105fa:	e7f2      	b.n	105e2 <_handle_obj_poll_events+0xa>

000105fc <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   105fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   105fe:	f04f 0320 	mov.w	r3, #32
   10602:	f3ef 8511 	mrs	r5, BASEPRI
   10606:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
   1060a:	6804      	ldr	r4, [r0, #0]
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   1060c:	60c1      	str	r1, [r0, #12]
	if (sys_dlist_is_empty(list)) {
   1060e:	42a0      	cmp	r0, r4
	signal->signaled = 1;
   10610:	f04f 0101 	mov.w	r1, #1
   10614:	6081      	str	r1, [r0, #8]
   10616:	d105      	bne.n	10624 <k_poll_signal+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   10618:	f385 8811 	msr	BASEPRI, r5

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
		irq_unlock(key);
		return 0;
   1061c:	2400      	movs	r4, #0
	} else {
		irq_unlock(key);
	}

	return rc;
}
   1061e:	4620      	mov	r0, r4
   10620:	b003      	add	sp, #12
   10622:	bd30      	pop	{r4, r5, pc}
	sys_dlist_remove(node);
   10624:	4620      	mov	r0, r4
   10626:	f7ff fe66 	bl	102f6 <sys_dlist_remove>
	if (!poll_event) {
   1062a:	2c00      	cmp	r4, #0
   1062c:	d0f4      	beq.n	10618 <k_poll_signal+0x1c>
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   1062e:	4620      	mov	r0, r4
   10630:	aa01      	add	r2, sp, #4
   10632:	f7ff fe87 	bl	10344 <signal_poll_event>
	if (must_reschedule) {
   10636:	9b01      	ldr	r3, [sp, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   10638:	4604      	mov	r4, r0
	if (must_reschedule) {
   1063a:	b12b      	cbz	r3, 10648 <k_poll_signal+0x4c>
	_update_time_slice_before_swap();
   1063c:	f7ff f9aa 	bl	f994 <_update_time_slice_before_swap>
	return __swap(key);
   10640:	4628      	mov	r0, r5
   10642:	f7f0 fa9d 	bl	b80 <__swap>
   10646:	e7ea      	b.n	1061e <k_poll_signal+0x22>
   10648:	f385 8811 	msr	BASEPRI, r5
   1064c:	e7e7      	b.n	1061e <k_poll_signal+0x22>

0001064e <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   1064e:	4770      	bx	lr
