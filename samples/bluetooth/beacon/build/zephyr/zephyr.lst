
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20004e60 	.word	0x20004e60

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000c75 	.word	0x00000c75
       8:	00000cc5 	.word	0x00000cc5
       c:	00000b75 	.word	0x00000b75
      10:	00000b75 	.word	0x00000b75
      14:	00000b75 	.word	0x00000b75
      18:	00000b75 	.word	0x00000b75
      1c:	00000b75 	.word	0x00000b75
      20:	00000b75 	.word	0x00000b75
      24:	00000b75 	.word	0x00000b75
      28:	00000b75 	.word	0x00000b75
      2c:	00000909 	.word	0x00000909
      30:	00000b75 	.word	0x00000b75
      34:	00000b75 	.word	0x00000b75
      38:	000008c5 	.word	0x000008c5
      3c:	00000b75 	.word	0x00000b75

00000040 <_irq_vector_table>:
      40:	00000c39 00008b1f 00000c39 00000c39     9.......9...9...
      50:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      60:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      70:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      80:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      90:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      a0:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      b0:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      c0:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      d0:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      e0:	00000c39 00000c39 00000c39 00000c39     9...9...9...9...
      f0:	00000c39 00000c39                       9...9...

000000f8 <_sw_isr_table>:
      f8:	00000000 00000f7d 00000000 00000aed     ....}...........
     108:	00000000 00000aed 00000000 00000aed     ................
     118:	00000000 00000aed 00000000 00000aed     ................
     128:	00000000 00000aed 00000000 00000aed     ................
     138:	00000000 00000aed 00000000 00000aed     ................
     148:	00000000 00000aed 00000000 00008ae5     ................
     158:	00000000 00000aed 20006070 00001199     ........p`. ....
     168:	00000000 00000aed 00000000 00000aed     ................
     178:	00000000 00000aed 00000000 000012d9     ................
     188:	00000000 00000aed 00000000 00000aed     ................
     198:	00000000 00000aed 00000000 00000aed     ................
     1a8:	00000000 00000aed 00000000 00000aed     ................
     1b8:	00000000 00008b19 00000000 00000aed     ................
     1c8:	00000000 00000aed 00000000 00000aed     ................
     1d8:	00000000 00000aed 00000000 00000aed     ................
     1e8:	00000000 00000aed 00000000 00000aed     ................
     1f8:	00000000 00000aed 00000000 00000aed     ................
     208:	00000000 00000aed 00000000 00000aed     ................
     218:	00000000 00000aed 00000000 00000aed     ................
     228:	00000000 00000aed 00000000 00000aed     ................
     238:	00000000 00000aed 00000000 00000aed     ................
     248:	00000000 00000aed 00000000 00000aed     ................
     258:	00000000 00000aed 00000000 00000aed     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b97a 	b.w	574 <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f806 	bl	298 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__udivmoddi4>:
     298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     29c:	468c      	mov	ip, r1
     29e:	460d      	mov	r5, r1
     2a0:	4604      	mov	r4, r0
     2a2:	9e08      	ldr	r6, [sp, #32]
     2a4:	2b00      	cmp	r3, #0
     2a6:	d151      	bne.n	34c <__udivmoddi4+0xb4>
     2a8:	428a      	cmp	r2, r1
     2aa:	4617      	mov	r7, r2
     2ac:	d96d      	bls.n	38a <__udivmoddi4+0xf2>
     2ae:	fab2 fe82 	clz	lr, r2
     2b2:	f1be 0f00 	cmp.w	lr, #0
     2b6:	d00b      	beq.n	2d0 <__udivmoddi4+0x38>
     2b8:	f1ce 0c20 	rsb	ip, lr, #32
     2bc:	fa01 f50e 	lsl.w	r5, r1, lr
     2c0:	fa20 fc0c 	lsr.w	ip, r0, ip
     2c4:	fa02 f70e 	lsl.w	r7, r2, lr
     2c8:	ea4c 0c05 	orr.w	ip, ip, r5
     2cc:	fa00 f40e 	lsl.w	r4, r0, lr
     2d0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2d4:	0c25      	lsrs	r5, r4, #16
     2d6:	fbbc f8fa 	udiv	r8, ip, sl
     2da:	fa1f f987 	uxth.w	r9, r7
     2de:	fb0a cc18 	mls	ip, sl, r8, ip
     2e2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2e6:	fb08 f309 	mul.w	r3, r8, r9
     2ea:	42ab      	cmp	r3, r5
     2ec:	d90a      	bls.n	304 <__udivmoddi4+0x6c>
     2ee:	19ed      	adds	r5, r5, r7
     2f0:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     2f4:	f080 8123 	bcs.w	53e <CONFIG_BT_RX_STACK_SIZE+0x13e>
     2f8:	42ab      	cmp	r3, r5
     2fa:	f240 8120 	bls.w	53e <CONFIG_BT_RX_STACK_SIZE+0x13e>
     2fe:	f1a8 0802 	sub.w	r8, r8, #2
     302:	443d      	add	r5, r7
     304:	1aed      	subs	r5, r5, r3
     306:	b2a4      	uxth	r4, r4
     308:	fbb5 f0fa 	udiv	r0, r5, sl
     30c:	fb0a 5510 	mls	r5, sl, r0, r5
     310:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     314:	fb00 f909 	mul.w	r9, r0, r9
     318:	45a1      	cmp	r9, r4
     31a:	d909      	bls.n	330 <__udivmoddi4+0x98>
     31c:	19e4      	adds	r4, r4, r7
     31e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     322:	f080 810a 	bcs.w	53a <CONFIG_BT_RX_STACK_SIZE+0x13a>
     326:	45a1      	cmp	r9, r4
     328:	f240 8107 	bls.w	53a <CONFIG_BT_RX_STACK_SIZE+0x13a>
     32c:	3802      	subs	r0, #2
     32e:	443c      	add	r4, r7
     330:	eba4 0409 	sub.w	r4, r4, r9
     334:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     338:	2100      	movs	r1, #0
     33a:	2e00      	cmp	r6, #0
     33c:	d061      	beq.n	402 <CONFIG_BT_RX_STACK_SIZE+0x2>
     33e:	fa24 f40e 	lsr.w	r4, r4, lr
     342:	2300      	movs	r3, #0
     344:	6034      	str	r4, [r6, #0]
     346:	6073      	str	r3, [r6, #4]
     348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     34c:	428b      	cmp	r3, r1
     34e:	d907      	bls.n	360 <__udivmoddi4+0xc8>
     350:	2e00      	cmp	r6, #0
     352:	d054      	beq.n	3fe <__udivmoddi4+0x166>
     354:	2100      	movs	r1, #0
     356:	e886 0021 	stmia.w	r6, {r0, r5}
     35a:	4608      	mov	r0, r1
     35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     360:	fab3 f183 	clz	r1, r3
     364:	2900      	cmp	r1, #0
     366:	f040 808e 	bne.w	486 <CONFIG_BT_RX_STACK_SIZE+0x86>
     36a:	42ab      	cmp	r3, r5
     36c:	d302      	bcc.n	374 <__udivmoddi4+0xdc>
     36e:	4282      	cmp	r2, r0
     370:	f200 80fa 	bhi.w	568 <CONFIG_BT_RX_STACK_SIZE+0x168>
     374:	1a84      	subs	r4, r0, r2
     376:	eb65 0503 	sbc.w	r5, r5, r3
     37a:	2001      	movs	r0, #1
     37c:	46ac      	mov	ip, r5
     37e:	2e00      	cmp	r6, #0
     380:	d03f      	beq.n	402 <CONFIG_BT_RX_STACK_SIZE+0x2>
     382:	e886 1010 	stmia.w	r6, {r4, ip}
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	b912      	cbnz	r2, 392 <__udivmoddi4+0xfa>
     38c:	2701      	movs	r7, #1
     38e:	fbb7 f7f2 	udiv	r7, r7, r2
     392:	fab7 fe87 	clz	lr, r7
     396:	f1be 0f00 	cmp.w	lr, #0
     39a:	d134      	bne.n	406 <CONFIG_BT_RX_STACK_SIZE+0x6>
     39c:	1beb      	subs	r3, r5, r7
     39e:	0c3a      	lsrs	r2, r7, #16
     3a0:	fa1f fc87 	uxth.w	ip, r7
     3a4:	2101      	movs	r1, #1
     3a6:	fbb3 f8f2 	udiv	r8, r3, r2
     3aa:	0c25      	lsrs	r5, r4, #16
     3ac:	fb02 3318 	mls	r3, r2, r8, r3
     3b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3b4:	fb0c f308 	mul.w	r3, ip, r8
     3b8:	42ab      	cmp	r3, r5
     3ba:	d907      	bls.n	3cc <__udivmoddi4+0x134>
     3bc:	19ed      	adds	r5, r5, r7
     3be:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3c2:	d202      	bcs.n	3ca <__udivmoddi4+0x132>
     3c4:	42ab      	cmp	r3, r5
     3c6:	f200 80d1 	bhi.w	56c <CONFIG_BT_RX_STACK_SIZE+0x16c>
     3ca:	4680      	mov	r8, r0
     3cc:	1aed      	subs	r5, r5, r3
     3ce:	b2a3      	uxth	r3, r4
     3d0:	fbb5 f0f2 	udiv	r0, r5, r2
     3d4:	fb02 5510 	mls	r5, r2, r0, r5
     3d8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     3dc:	fb0c fc00 	mul.w	ip, ip, r0
     3e0:	45a4      	cmp	ip, r4
     3e2:	d907      	bls.n	3f4 <__udivmoddi4+0x15c>
     3e4:	19e4      	adds	r4, r4, r7
     3e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <__udivmoddi4+0x15a>
     3ec:	45a4      	cmp	ip, r4
     3ee:	f200 80b8 	bhi.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     3f2:	4618      	mov	r0, r3
     3f4:	eba4 040c 	sub.w	r4, r4, ip
     3f8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     3fc:	e79d      	b.n	33a <__udivmoddi4+0xa2>
     3fe:	4631      	mov	r1, r6
     400:	4630      	mov	r0, r6
     402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     406:	f1ce 0420 	rsb	r4, lr, #32
     40a:	fa05 f30e 	lsl.w	r3, r5, lr
     40e:	fa07 f70e 	lsl.w	r7, r7, lr
     412:	fa20 f804 	lsr.w	r8, r0, r4
     416:	0c3a      	lsrs	r2, r7, #16
     418:	fa25 f404 	lsr.w	r4, r5, r4
     41c:	ea48 0803 	orr.w	r8, r8, r3
     420:	fbb4 f1f2 	udiv	r1, r4, r2
     424:	ea4f 4518 	mov.w	r5, r8, lsr #16
     428:	fb02 4411 	mls	r4, r2, r1, r4
     42c:	fa1f fc87 	uxth.w	ip, r7
     430:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     434:	fb01 f30c 	mul.w	r3, r1, ip
     438:	42ab      	cmp	r3, r5
     43a:	fa00 f40e 	lsl.w	r4, r0, lr
     43e:	d909      	bls.n	454 <CONFIG_BT_RX_STACK_SIZE+0x54>
     440:	19ed      	adds	r5, r5, r7
     442:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     446:	f080 808a 	bcs.w	55e <CONFIG_BT_RX_STACK_SIZE+0x15e>
     44a:	42ab      	cmp	r3, r5
     44c:	f240 8087 	bls.w	55e <CONFIG_BT_RX_STACK_SIZE+0x15e>
     450:	3902      	subs	r1, #2
     452:	443d      	add	r5, r7
     454:	1aeb      	subs	r3, r5, r3
     456:	fa1f f588 	uxth.w	r5, r8
     45a:	fbb3 f0f2 	udiv	r0, r3, r2
     45e:	fb02 3310 	mls	r3, r2, r0, r3
     462:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     466:	fb00 f30c 	mul.w	r3, r0, ip
     46a:	42ab      	cmp	r3, r5
     46c:	d907      	bls.n	47e <CONFIG_BT_RX_STACK_SIZE+0x7e>
     46e:	19ed      	adds	r5, r5, r7
     470:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     474:	d26f      	bcs.n	556 <CONFIG_BT_RX_STACK_SIZE+0x156>
     476:	42ab      	cmp	r3, r5
     478:	d96d      	bls.n	556 <CONFIG_BT_RX_STACK_SIZE+0x156>
     47a:	3802      	subs	r0, #2
     47c:	443d      	add	r5, r7
     47e:	1aeb      	subs	r3, r5, r3
     480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     484:	e78f      	b.n	3a6 <__udivmoddi4+0x10e>
     486:	f1c1 0720 	rsb	r7, r1, #32
     48a:	fa22 f807 	lsr.w	r8, r2, r7
     48e:	408b      	lsls	r3, r1
     490:	fa05 f401 	lsl.w	r4, r5, r1
     494:	ea48 0303 	orr.w	r3, r8, r3
     498:	fa20 fe07 	lsr.w	lr, r0, r7
     49c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4a0:	40fd      	lsrs	r5, r7
     4a2:	ea4e 0e04 	orr.w	lr, lr, r4
     4a6:	fbb5 f9fc 	udiv	r9, r5, ip
     4aa:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4ae:	fb0c 5519 	mls	r5, ip, r9, r5
     4b2:	fa1f f883 	uxth.w	r8, r3
     4b6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4ba:	fb09 f408 	mul.w	r4, r9, r8
     4be:	42ac      	cmp	r4, r5
     4c0:	fa02 f201 	lsl.w	r2, r2, r1
     4c4:	fa00 fa01 	lsl.w	sl, r0, r1
     4c8:	d908      	bls.n	4dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
     4ca:	18ed      	adds	r5, r5, r3
     4cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4d0:	d243      	bcs.n	55a <CONFIG_BT_RX_STACK_SIZE+0x15a>
     4d2:	42ac      	cmp	r4, r5
     4d4:	d941      	bls.n	55a <CONFIG_BT_RX_STACK_SIZE+0x15a>
     4d6:	f1a9 0902 	sub.w	r9, r9, #2
     4da:	441d      	add	r5, r3
     4dc:	1b2d      	subs	r5, r5, r4
     4de:	fa1f fe8e 	uxth.w	lr, lr
     4e2:	fbb5 f0fc 	udiv	r0, r5, ip
     4e6:	fb0c 5510 	mls	r5, ip, r0, r5
     4ea:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     4ee:	fb00 f808 	mul.w	r8, r0, r8
     4f2:	45a0      	cmp	r8, r4
     4f4:	d907      	bls.n	506 <CONFIG_BT_RX_STACK_SIZE+0x106>
     4f6:	18e4      	adds	r4, r4, r3
     4f8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     4fc:	d229      	bcs.n	552 <CONFIG_BT_RX_STACK_SIZE+0x152>
     4fe:	45a0      	cmp	r8, r4
     500:	d927      	bls.n	552 <CONFIG_BT_RX_STACK_SIZE+0x152>
     502:	3802      	subs	r0, #2
     504:	441c      	add	r4, r3
     506:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     50a:	eba4 0408 	sub.w	r4, r4, r8
     50e:	fba0 8902 	umull	r8, r9, r0, r2
     512:	454c      	cmp	r4, r9
     514:	46c6      	mov	lr, r8
     516:	464d      	mov	r5, r9
     518:	d315      	bcc.n	546 <CONFIG_BT_RX_STACK_SIZE+0x146>
     51a:	d012      	beq.n	542 <CONFIG_BT_RX_STACK_SIZE+0x142>
     51c:	b156      	cbz	r6, 534 <CONFIG_BT_RX_STACK_SIZE+0x134>
     51e:	ebba 030e 	subs.w	r3, sl, lr
     522:	eb64 0405 	sbc.w	r4, r4, r5
     526:	fa04 f707 	lsl.w	r7, r4, r7
     52a:	40cb      	lsrs	r3, r1
     52c:	431f      	orrs	r7, r3
     52e:	40cc      	lsrs	r4, r1
     530:	6037      	str	r7, [r6, #0]
     532:	6074      	str	r4, [r6, #4]
     534:	2100      	movs	r1, #0
     536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     53a:	4618      	mov	r0, r3
     53c:	e6f8      	b.n	330 <__udivmoddi4+0x98>
     53e:	4690      	mov	r8, r2
     540:	e6e0      	b.n	304 <__udivmoddi4+0x6c>
     542:	45c2      	cmp	sl, r8
     544:	d2ea      	bcs.n	51c <CONFIG_BT_RX_STACK_SIZE+0x11c>
     546:	ebb8 0e02 	subs.w	lr, r8, r2
     54a:	eb69 0503 	sbc.w	r5, r9, r3
     54e:	3801      	subs	r0, #1
     550:	e7e4      	b.n	51c <CONFIG_BT_RX_STACK_SIZE+0x11c>
     552:	4628      	mov	r0, r5
     554:	e7d7      	b.n	506 <CONFIG_BT_RX_STACK_SIZE+0x106>
     556:	4640      	mov	r0, r8
     558:	e791      	b.n	47e <CONFIG_BT_RX_STACK_SIZE+0x7e>
     55a:	4681      	mov	r9, r0
     55c:	e7be      	b.n	4dc <CONFIG_BT_RX_STACK_SIZE+0xdc>
     55e:	4601      	mov	r1, r0
     560:	e778      	b.n	454 <CONFIG_BT_RX_STACK_SIZE+0x54>
     562:	3802      	subs	r0, #2
     564:	443c      	add	r4, r7
     566:	e745      	b.n	3f4 <__udivmoddi4+0x15c>
     568:	4608      	mov	r0, r1
     56a:	e708      	b.n	37e <__udivmoddi4+0xe6>
     56c:	f1a8 0802 	sub.w	r8, r8, #2
     570:	443d      	add	r5, r7
     572:	e72b      	b.n	3cc <__udivmoddi4+0x134>

00000574 <__aeabi_idiv0>:
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     578:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     57a:	4603      	mov	r3, r0
     57c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     580:	b90a      	cbnz	r2, 586 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     582:	701a      	strb	r2, [r3, #0]

	return dest;
}
     584:	4770      	bx	lr
		*d = *s;
     586:	f803 2b01 	strb.w	r2, [r3], #1
     58a:	e7f7      	b.n	57c <strcpy+0x4>

0000058c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     58c:	3801      	subs	r0, #1
     58e:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     590:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     594:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     598:	4293      	cmp	r3, r2
     59a:	d102      	bne.n	5a2 <strcmp+0x16>
     59c:	2b00      	cmp	r3, #0
     59e:	d1f7      	bne.n	590 <strcmp+0x4>
     5a0:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5a2:	1a98      	subs	r0, r3, r2
     5a4:	4770      	bx	lr

000005a6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5a6:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5a8:	b182      	cbz	r2, 5cc <memcmp+0x26>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5aa:	3a01      	subs	r2, #1
     5ac:	460c      	mov	r4, r1
     5ae:	4603      	mov	r3, r0
     5b0:	d103      	bne.n	5ba <memcmp+0x14>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5b2:	781a      	ldrb	r2, [r3, #0]
     5b4:	7820      	ldrb	r0, [r4, #0]
     5b6:	1a10      	subs	r0, r2, r0
     5b8:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     5ba:	781e      	ldrb	r6, [r3, #0]
     5bc:	7825      	ldrb	r5, [r4, #0]
     5be:	42ae      	cmp	r6, r5
     5c0:	f100 0001 	add.w	r0, r0, #1
     5c4:	f101 0101 	add.w	r1, r1, #1
     5c8:	d0ef      	beq.n	5aa <memcmp+0x4>
     5ca:	e7f2      	b.n	5b2 <memcmp+0xc>
		return 0;
     5cc:	4610      	mov	r0, r2
}
     5ce:	bd70      	pop	{r4, r5, r6, pc}

000005d0 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5d0:	ea81 0300 	eor.w	r3, r1, r0
     5d4:	f013 0f03 	tst.w	r3, #3
{
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5dc:	d00b      	beq.n	5f6 <CONFIG_BT_CTLR_COMPANY_ID+0x5>
     5de:	3b01      	subs	r3, #1
     5e0:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     5e2:	4291      	cmp	r1, r2
     5e4:	d11b      	bne.n	61e <CONFIG_BT_CTLR_COMPANY_ID+0x2d>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     5e6:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     5e8:	2a00      	cmp	r2, #0
     5ea:	d0fc      	beq.n	5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
			*(d_byte++) = *(s_byte++);
     5ec:	f811 4b01 	ldrb.w	r4, [r1], #1
     5f0:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     5f4:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     5f6:	079c      	lsls	r4, r3, #30
     5f8:	d1f6      	bne.n	5e8 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xc>
     5fa:	1f1e      	subs	r6, r3, #4
     5fc:	460d      	mov	r5, r1
     5fe:	1b54      	subs	r4, r2, r5
     600:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     602:	2c03      	cmp	r4, #3
     604:	d806      	bhi.n	614 <CONFIG_BT_CTLR_COMPANY_ID+0x23>
     606:	f022 0403 	bic.w	r4, r2, #3
     60a:	4421      	add	r1, r4
     60c:	4423      	add	r3, r4
     60e:	f002 0203 	and.w	r2, r2, #3
     612:	e7e4      	b.n	5de <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x2>
			*(d_word++) = *(s_word++);
     614:	f855 4b04 	ldr.w	r4, [r5], #4
     618:	f846 4f04 	str.w	r4, [r6, #4]!
     61c:	e7ef      	b.n	5fe <CONFIG_BT_CTLR_COMPANY_ID+0xd>
		*(d_byte++) = *(s_byte++);
     61e:	f811 4b01 	ldrb.w	r4, [r1], #1
     622:	f803 4f01 	strb.w	r4, [r3, #1]!
     626:	e7dc      	b.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>

00000628 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     628:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     62a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     62c:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     62e:	079c      	lsls	r4, r3, #30
     630:	d111      	bne.n	656 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     632:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     636:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     63a:	461e      	mov	r6, r3
     63c:	1b95      	subs	r5, r2, r6
     63e:	441d      	add	r5, r3
     640:	2d03      	cmp	r5, #3
     642:	d80e      	bhi.n	662 <memset+0x3a>
     644:	f022 0403 	bic.w	r4, r2, #3
     648:	4423      	add	r3, r4
     64a:	f002 0203 	and.w	r2, r2, #3
     64e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     650:	4293      	cmp	r3, r2
     652:	d109      	bne.n	668 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     654:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     656:	2a00      	cmp	r2, #0
     658:	d0fc      	beq.n	654 <memset+0x2c>
		*(d_byte++) = c_byte;
     65a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     65e:	3a01      	subs	r2, #1
     660:	e7e5      	b.n	62e <memset+0x6>
		*(d_word++) = c_word;
     662:	f846 4b04 	str.w	r4, [r6], #4
     666:	e7e9      	b.n	63c <memset+0x14>
		*(d_byte++) = c_byte;
     668:	f803 1b01 	strb.w	r1, [r3], #1
     66c:	e7f0      	b.n	650 <memset+0x28>
	...

00000670 <bt_ext_ready.part.0>:
	}

	printk("Beacon started\n");
}

static void bt_ext_ready(int err)
     670:	b500      	push	{lr}
     672:	b089      	sub	sp, #36	; 0x24
	printk("Bluetooth initialized\n");
	int x;
	x = sizeof(mfg_data);
	printk("Bluetooth size: %d\n", x);
	/* Start advertising */
	err = bt_le_ext_adv_start(BT_LE_ADV_NCONN, ad, ARRAY_SIZE(ad), &mfg_data , sizeof(mfg_data),
     674:	2300      	movs	r3, #0
     676:	9305      	str	r3, [sp, #20]
     678:	9306      	str	r3, [sp, #24]
     67a:	9307      	str	r3, [sp, #28]
     67c:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
     680:	f8ad 3016 	strh.w	r3, [sp, #22]
     684:	f643 6390 	movw	r3, #16016	; 0x3e90
     688:	f8ad 3018 	strh.w	r3, [sp, #24]
     68c:	4b07      	ldr	r3, [pc, #28]	; (6ac <bt_ext_ready.part.0+0x3c>)
     68e:	9301      	str	r3, [sp, #4]
     690:	2201      	movs	r2, #1
     692:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     696:	9300      	str	r3, [sp, #0]
     698:	9202      	str	r2, [sp, #8]
     69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <bt_ext_ready.part.0+0x40>)
     69c:	4905      	ldr	r1, [pc, #20]	; (6b4 <bt_ext_ready.part.0+0x44>)
     69e:	a805      	add	r0, sp, #20
     6a0:	f001 fd38 	bl	2114 <bt_le_ext_adv_start>
		printk("Advertising failed to start (err %d)\n", err);
		return;
	}

	printk("Beacon started\n");
}
     6a4:	b009      	add	sp, #36	; 0x24
     6a6:	f85d fb04 	ldr.w	pc, [sp], #4
     6aa:	bf00      	nop
     6ac:	0000b738 	.word	0x0000b738
     6b0:	20005ba0 	.word	0x20005ba0
     6b4:	0000b730 	.word	0x0000b730

000006b8 <bt_ext_ready>:
	if (err) {
     6b8:	b908      	cbnz	r0, 6be <bt_ext_ready+0x6>
     6ba:	f7ff bfd9 	b.w	670 <bt_ext_ready.part.0>
     6be:	4770      	bx	lr

000006c0 <main>:

void main(void)
{
     6c0:	b510      	push	{r4, lr}

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     6c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     6c6:	f00a fa61 	bl	ab8c <_impl_k_sleep>
	int count = 100;
	k_sleep(1000);
	printk("Starting Beacon Demo\n");

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ext_ready);
     6ca:	4808      	ldr	r0, [pc, #32]	; (6ec <main+0x2c>)
     6cc:	4c08      	ldr	r4, [pc, #32]	; (6f0 <main+0x30>)
     6ce:	f001 fc47 	bl	1f60 <bt_enable>
     6d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     6d6:	f00a fa59 	bl	ab8c <_impl_k_sleep>


	while(1){
	
		k_sleep(2000);
		bt_le_adv_stop();
     6da:	f001 fddd 	bl	2298 <bt_le_adv_stop>
     6de:	4620      	mov	r0, r4
     6e0:	f00a fa54 	bl	ab8c <_impl_k_sleep>
     6e4:	f7ff ffc4 	bl	670 <bt_ext_ready.part.0>
     6e8:	e7f3      	b.n	6d2 <main+0x12>
     6ea:	bf00      	nop
     6ec:	000006b9 	.word	0x000006b9
     6f0:	000493e0 	.word	0x000493e0

000006f4 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     6f4:	4b05      	ldr	r3, [pc, #20]	; (70c <errata_103+0x18>)
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     6fa:	bf01      	itttt	eq
     6fc:	4b04      	ldreq	r3, [pc, #16]	; (710 <errata_103+0x1c>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     6fe:	6818      	ldreq	r0, [r3, #0]
     700:	fab0 f080 	clzeq	r0, r0
     704:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     706:	bf18      	it	ne
     708:	2000      	movne	r0, #0
}
     70a:	4770      	bx	lr
     70c:	10000130 	.word	0x10000130
     710:	10000134 	.word	0x10000134

00000714 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     714:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     716:	f04f 0320 	mov.w	r3, #32
     71a:	f3ef 8111 	mrs	r1, BASEPRI
     71e:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     722:	f7ff ffe7 	bl	6f4 <errata_103>
     726:	b140      	cbz	r0, 73a <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     728:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     72c:	2200      	movs	r2, #0
     72e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     732:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     736:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     73a:	f7ff ffdb 	bl	6f4 <errata_103>
     73e:	b110      	cbz	r0, 746 <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     740:	4b38      	ldr	r3, [pc, #224]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     742:	4a39      	ldr	r2, [pc, #228]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     744:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     746:	f7ff ffd5 	bl	6f4 <errata_103>
     74a:	b118      	cbz	r0, 754 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     74c:	4b37      	ldr	r3, [pc, #220]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
     74e:	22fb      	movs	r2, #251	; 0xfb
     750:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     754:	f7ff ffce 	bl	6f4 <errata_103>
     758:	b148      	cbz	r0, 76e <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     75a:	4835      	ldr	r0, [pc, #212]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     75c:	4b35      	ldr	r3, [pc, #212]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     75e:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     760:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     762:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     766:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     76a:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     76c:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     76e:	f7ff ffc1 	bl	6f4 <errata_103>
     772:	b118      	cbz	r0, 77c <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     774:	4b30      	ldr	r3, [pc, #192]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     776:	f44f 7200 	mov.w	r2, #512	; 0x200
     77a:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     77c:	f7ff ffba 	bl	6f4 <errata_103>
     780:	b148      	cbz	r0, 796 <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     786:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     78a:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     78c:	bf44      	itt	mi
     78e:	f06f 0201 	mvnmi.w	r2, #1
     792:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     796:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     79a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     79e:	2a00      	cmp	r2, #0
     7a0:	db03      	blt.n	7aa <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     7a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     7a6:	2b00      	cmp	r3, #0
     7a8:	da2f      	bge.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     7aa:	4b24      	ldr	r3, [pc, #144]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     7ac:	2201      	movs	r2, #1
     7ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7b2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7b6:	2a00      	cmp	r2, #0
     7b8:	d0fb      	beq.n	7b2 <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     7ba:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     7be:	2112      	movs	r1, #18
     7c0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7c4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     7c8:	2a00      	cmp	r2, #0
     7ca:	d0fb      	beq.n	7c4 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     7cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     7d0:	2212      	movs	r2, #18
     7d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7d6:	4b19      	ldr	r3, [pc, #100]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     7d8:	461a      	mov	r2, r3
     7da:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     7de:	2900      	cmp	r1, #0
     7e0:	d0fb      	beq.n	7da <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     7e2:	2100      	movs	r1, #0
     7e4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     7e8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     7ec:	2b00      	cmp	r3, #0
     7ee:	d0fb      	beq.n	7e8 <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     7f0:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     7f4:	4912      	ldr	r1, [pc, #72]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     7f6:	4b13      	ldr	r3, [pc, #76]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     7f8:	68ca      	ldr	r2, [r1, #12]
     7fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     7fe:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     800:	60cb      	str	r3, [r1, #12]
     802:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     806:	bf00      	nop
     808:	e7fd      	b.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     80a:	4b0d      	ldr	r3, [pc, #52]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     80c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     810:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     812:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     814:	4b0c      	ldr	r3, [pc, #48]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     816:	4a0d      	ldr	r2, [pc, #52]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     818:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     81a:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     81e:	2000      	movs	r0, #0
     820:	bd08      	pop	{r3, pc}
     822:	bf00      	nop
     824:	4000568c 	.word	0x4000568c
     828:	00038148 	.word	0x00038148
     82c:	4000f000 	.word	0x4000f000
     830:	40000ee4 	.word	0x40000ee4
     834:	10000258 	.word	0x10000258
     838:	40029640 	.word	0x40029640
     83c:	4001e000 	.word	0x4001e000
     840:	e000ed00 	.word	0xe000ed00
     844:	05fa0004 	.word	0x05fa0004
     848:	20005dd8 	.word	0x20005dd8
     84c:	03d09000 	.word	0x03d09000

00000850 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     850:	4808      	ldr	r0, [pc, #32]	; (874 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     852:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     854:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     856:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     858:	d80b      	bhi.n	872 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     85a:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     85c:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     85e:	d008      	beq.n	872 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     860:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     862:	f00a f9e5 	bl	ac30 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     866:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     86a:	4903      	ldr	r1, [pc, #12]	; (878 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     870:	600a      	str	r2, [r1, #0]

00000872 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     872:	4770      	bx	lr
    ldr r0, =_kernel
     874:	20002894 	.word	0x20002894
    ldr r1, =_SCS_ICSR
     878:	e000ed04 	.word	0xe000ed04

0000087c <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     87c:	4804      	ldr	r0, [pc, #16]	; (890 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     87e:	2300      	movs	r3, #0
     880:	2120      	movs	r1, #32
     882:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     884:	3301      	adds	r3, #1
     886:	2b2e      	cmp	r3, #46	; 0x2e
     888:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     88c:	d1f9      	bne.n	882 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     88e:	4770      	bx	lr
     890:	e000e100 	.word	0xe000e100

00000894 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     894:	4a08      	ldr	r2, [pc, #32]	; (8b8 <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     896:	4909      	ldr	r1, [pc, #36]	; (8bc <__swap+0x28>)
	_current->arch.basepri = key;
     898:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     89a:	6809      	ldr	r1, [r1, #0]
     89c:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     89e:	4908      	ldr	r1, [pc, #32]	; (8c0 <__swap+0x2c>)
	_current->arch.basepri = key;
     8a0:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     8a2:	684b      	ldr	r3, [r1, #4]
     8a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     8a8:	604b      	str	r3, [r1, #4]
     8aa:	2300      	movs	r3, #0
     8ac:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     8b0:	6893      	ldr	r3, [r2, #8]
}
     8b2:	6e58      	ldr	r0, [r3, #100]	; 0x64
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop
     8b8:	20002894 	.word	0x20002894
     8bc:	0000b880 	.word	0x0000b880
     8c0:	e000ed00 	.word	0xe000ed00

000008c4 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     8c4:	490e      	ldr	r1, [pc, #56]	; (900 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     8c6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     8c8:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     8ca:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     8cc:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     8d0:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     8d4:	4f0b      	ldr	r7, [pc, #44]	; (904 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     8d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     8da:	2020      	movs	r0, #32
    msr BASEPRI, r0
     8dc:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     8e0:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     8e2:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     8e4:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     8e6:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     8e8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     8ea:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     8ec:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     8f0:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     8f4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     8f8:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     8fc:	4770      	bx	lr
     8fe:	0000      	.short	0x0000
    ldr r1, =_kernel
     900:	20002894 	.word	0x20002894
    ldr v4, =_SCS_ICSR
     904:	e000ed04 	.word	0xe000ed04

00000908 <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     908:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     90c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     90e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     912:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     916:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     918:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     91c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     920:	d001      	beq.n	926 <_context_switch>

    cmp r1, #2
     922:	2902      	cmp	r1, #2
    beq _oops
     924:	d007      	beq.n	936 <_oops>

00000926 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     926:	4040      	eors	r0, r0
    msr BASEPRI, r0
     928:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     92c:	4904      	ldr	r1, [pc, #16]	; (940 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     932:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     934:	4770      	bx	lr

00000936 <_oops>:

_oops:
    push {lr}
     936:	b500      	push	{lr}
    blx _do_kernel_oops
     938:	f000 f93b 	bl	bb2 <_do_kernel_oops>
    pop {pc}
     93c:	bd00      	pop	{pc}
     93e:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     940:	e000ed04 	.word	0xe000ed04

00000944 <_MpuFault.isra.1>:
{
	PR_EXC("***** MPU FAULT *****\n");

	_FaultThreadShow(esf);

	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     944:	4b0b      	ldr	r3, [pc, #44]	; (974 <_MpuFault.isra.1+0x30>)
     946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     948:	06d1      	lsls	r1, r2, #27
     94a:	d412      	bmi.n	972 <_MpuFault.isra.1+0x2e>
		PR_EXC("  Stacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     94c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     94e:	0712      	lsls	r2, r2, #28
     950:	d40f      	bmi.n	972 <_MpuFault.isra.1+0x2e>
		PR_EXC("  Unstacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     954:	f012 0f02 	tst.w	r2, #2
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		STORE_xFAR(mmfar, SCB->MMFAR);

		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     95a:	d007      	beq.n	96c <_MpuFault.isra.1+0x28>
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     95c:	0611      	lsls	r1, r2, #24
     95e:	d508      	bpl.n	972 <_MpuFault.isra.1+0x2e>
			PR_EXC("  Address: 0x%x\n", mmfar);
			if (fromHardFault) {
     960:	b138      	cbz	r0, 972 <_MpuFault.isra.1+0x2e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     962:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
     968:	629a      	str	r2, [r3, #40]	; 0x28
     96a:	4770      	bx	lr
			}
		}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     96c:	07d2      	lsls	r2, r2, #31
		PR_EXC("  Instruction Access Violation\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     96e:	bf58      	it	pl
     970:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
     972:	4770      	bx	lr
     974:	e000ed00 	.word	0xe000ed00

00000978 <_BusFault.isra.3>:
{
	PR_EXC("***** BUS FAULT *****\n");

	_FaultThreadShow(esf);

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     978:	4b0d      	ldr	r3, [pc, #52]	; (9b0 <_BusFault.isra.3+0x38>)
     97a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     97c:	04d2      	lsls	r2, r2, #19
     97e:	d416      	bmi.n	9ae <_BusFault.isra.3+0x36>
		PR_EXC("  Stacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     982:	0511      	lsls	r1, r2, #20
     984:	d413      	bmi.n	9ae <_BusFault.isra.3+0x36>
		PR_EXC("  Unstacking error\n");
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     988:	f412 7f00 	tst.w	r2, #512	; 0x200
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);

		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     98c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     98e:	d009      	beq.n	9a4 <_BusFault.isra.3+0x2c>
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     990:	0412      	lsls	r2, r2, #16
     992:	d504      	bpl.n	99e <_BusFault.isra.3+0x26>
			PR_EXC("  Address: 0x%x\n", bfar);
			if (fromHardFault) {
     994:	b118      	cbz	r0, 99e <_BusFault.isra.3+0x26>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     996:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
     99c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
		/* it's possible to have both a precise and imprecise fault */
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     99e:	4b04      	ldr	r3, [pc, #16]	; (9b0 <_BusFault.isra.3+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
		PR_EXC("  Instruction bus error\n");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9a2:	e004      	b.n	9ae <_BusFault.isra.3+0x36>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     9a4:	0551      	lsls	r1, r2, #21
     9a6:	d402      	bmi.n	9ae <_BusFault.isra.3+0x36>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     9a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     9aa:	05d2      	lsls	r2, r2, #23
     9ac:	d5f8      	bpl.n	9a0 <_BusFault.isra.3+0x28>
     9ae:	4770      	bx	lr
     9b0:	e000ed00 	.word	0xe000ed00

000009b4 <_UsageFault.isra.5>:
	PR_EXC("***** USAGE FAULT *****\n");

	_FaultThreadShow(esf);

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     9b4:	4b06      	ldr	r3, [pc, #24]	; (9d0 <_UsageFault.isra.5+0x1c>)
     9b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Division by zero\n");
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     9b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     9ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  No coprocessor instructions\n");
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     9bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     9be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Illegal use of the EPSR\n");
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     9c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_EXC("  Attempt to execute undefined instruction\n");
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     9c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     9c4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
     9c8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
     9cc:	629a      	str	r2, [r3, #40]	; 0x28
     9ce:	4770      	bx	lr
     9d0:	e000ed00 	.word	0xe000ed00

000009d4 <_Fault>:
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     9d4:	4a18      	ldr	r2, [pc, #96]	; (a38 <_Fault+0x64>)
     9d6:	6853      	ldr	r3, [r2, #4]
     9d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     9dc:	3b03      	subs	r3, #3
{
     9de:	b510      	push	{r4, lr}
     9e0:	4604      	mov	r4, r0
	switch (fault) {
     9e2:	2b03      	cmp	r3, #3
     9e4:	d80f      	bhi.n	a06 <_Fault+0x32>
     9e6:	e8df f003 	tbb	[pc, r3]
     9ea:	2302      	.short	0x2302
     9ec:	2025      	.short	0x2025
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     9ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     9f0:	0799      	lsls	r1, r3, #30
     9f2:	d408      	bmi.n	a06 <_Fault+0x32>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     9f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     9f6:	005b      	lsls	r3, r3, #1
     9f8:	d505      	bpl.n	a06 <_Fault+0x32>
		if (SCB_MMFSR) {
     9fa:	4b10      	ldr	r3, [pc, #64]	; (a3c <_Fault+0x68>)
     9fc:	781b      	ldrb	r3, [r3, #0]
     9fe:	b143      	cbz	r3, a12 <_Fault+0x3e>
			_MpuFault(esf, 1);
     a00:	2001      	movs	r0, #1
		_MpuFault(esf, 0);
     a02:	f7ff ff9f 	bl	944 <_MpuFault.isra.1>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     a06:	4621      	mov	r1, r4
     a08:	2000      	movs	r0, #0
}
     a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     a0e:	f000 b8d5 	b.w	bbc <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     a12:	4b0b      	ldr	r3, [pc, #44]	; (a40 <_Fault+0x6c>)
     a14:	781b      	ldrb	r3, [r3, #0]
     a16:	b11b      	cbz	r3, a20 <_Fault+0x4c>
			_BusFault(esf, 1);
     a18:	2001      	movs	r0, #1
		_BusFault(esf, 0);
     a1a:	f7ff ffad 	bl	978 <_BusFault.isra.3>
     a1e:	e7f2      	b.n	a06 <_Fault+0x32>
		} else if (SCB_UFSR) {
     a20:	4b08      	ldr	r3, [pc, #32]	; (a44 <_Fault+0x70>)
     a22:	881b      	ldrh	r3, [r3, #0]
     a24:	b29b      	uxth	r3, r3
     a26:	2b00      	cmp	r3, #0
     a28:	d0ed      	beq.n	a06 <_Fault+0x32>
		_UsageFault(esf);
     a2a:	f7ff ffc3 	bl	9b4 <_UsageFault.isra.5>
     a2e:	e7ea      	b.n	a06 <_Fault+0x32>
		_MpuFault(esf, 0);
     a30:	2000      	movs	r0, #0
     a32:	e7e6      	b.n	a02 <_Fault+0x2e>
		_BusFault(esf, 0);
     a34:	2000      	movs	r0, #0
     a36:	e7f0      	b.n	a1a <_Fault+0x46>
     a38:	e000ed00 	.word	0xe000ed00
     a3c:	e000ed28 	.word	0xe000ed28
     a40:	e000ed29 	.word	0xe000ed29
     a44:	e000ed2a 	.word	0xe000ed2a

00000a48 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     a48:	4a02      	ldr	r2, [pc, #8]	; (a54 <_FaultInit+0xc>)
     a4a:	6953      	ldr	r3, [r2, #20]
     a4c:	f043 0310 	orr.w	r3, r3, #16
     a50:	6153      	str	r3, [r2, #20]
     a52:	4770      	bx	lr
     a54:	e000ed00 	.word	0xe000ed00

00000a58 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     a58:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a5a:	2b00      	cmp	r3, #0
     a5c:	db08      	blt.n	a70 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a5e:	2201      	movs	r2, #1
     a60:	f000 001f 	and.w	r0, r0, #31
     a64:	fa02 f000 	lsl.w	r0, r2, r0
     a68:	095b      	lsrs	r3, r3, #5
     a6a:	4a02      	ldr	r2, [pc, #8]	; (a74 <_arch_irq_enable+0x1c>)
     a6c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     a70:	4770      	bx	lr
     a72:	bf00      	nop
     a74:	e000e100 	.word	0xe000e100

00000a78 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     a78:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     a7a:	2b00      	cmp	r3, #0
     a7c:	db0d      	blt.n	a9a <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a7e:	2201      	movs	r2, #1
     a80:	095b      	lsrs	r3, r3, #5
     a82:	f000 001f 	and.w	r0, r0, #31
     a86:	fa02 f000 	lsl.w	r0, r2, r0
     a8a:	3320      	adds	r3, #32
     a8c:	4a03      	ldr	r2, [pc, #12]	; (a9c <_arch_irq_disable+0x24>)
     a8e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     a92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a96:	f3bf 8f6f 	isb	sy
     a9a:	4770      	bx	lr
     a9c:	e000e100 	.word	0xe000e100

00000aa0 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     aa0:	0942      	lsrs	r2, r0, #5
     aa2:	4b05      	ldr	r3, [pc, #20]	; (ab8 <_arch_irq_is_enabled+0x18>)
     aa4:	f000 001f 	and.w	r0, r0, #31
     aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     aac:	2301      	movs	r3, #1
     aae:	fa03 f000 	lsl.w	r0, r3, r0
}
     ab2:	4010      	ands	r0, r2
     ab4:	4770      	bx	lr
     ab6:	bf00      	nop
     ab8:	e000e100 	.word	0xe000e100

00000abc <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     abc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     abe:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ac0:	bfa8      	it	ge
     ac2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     ac6:	f101 0101 	add.w	r1, r1, #1
     aca:	ea4f 1141 	mov.w	r1, r1, lsl #5
     ace:	bfad      	iteet	ge
     ad0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ad4:	f000 000f 	andlt.w	r0, r0, #15
     ad8:	4b03      	ldrlt	r3, [pc, #12]	; (ae8 <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ada:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     adc:	bfb6      	itet	lt
     ade:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ae0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ae4:	5419      	strblt	r1, [r3, r0]
     ae6:	4770      	bx	lr
     ae8:	e000ed14 	.word	0xe000ed14

00000aec <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     aec:	f000 b842 	b.w	b74 <__bus_fault>

00000af0 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     af0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     af2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     af4:	4b04      	ldr	r3, [pc, #16]	; (b08 <_arch_isr_direct_pm+0x18>)
     af6:	6998      	ldr	r0, [r3, #24]
     af8:	b118      	cbz	r0, b02 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     afa:	2200      	movs	r2, #0
     afc:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     afe:	f009 fcc3 	bl	a488 <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     b02:	b662      	cpsie	i
     b04:	bd08      	pop	{r3, pc}
     b06:	bf00      	nop
     b08:	20002894 	.word	0x20002894

00000b0c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b0e:	460c      	mov	r4, r1
     b10:	4616      	mov	r6, r2
     b12:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     b14:	2204      	movs	r2, #4
     b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b18:	9909      	ldr	r1, [sp, #36]	; 0x24
     b1a:	4605      	mov	r5, r0
     b1c:	f00a fb6c 	bl	b1f8 <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     b20:	f1a6 0120 	sub.w	r1, r6, #32
     b24:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     b26:	4a0c      	ldr	r2, [pc, #48]	; (b58 <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     b28:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     b2a:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     b2e:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     b30:	f022 0201 	bic.w	r2, r2, #1
     b34:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     b36:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     b38:	65ee      	str	r6, [r5, #92]	; 0x5c
     b3a:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     b3c:	9a06      	ldr	r2, [sp, #24]
     b3e:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     b40:	9a07      	ldr	r2, [sp, #28]
     b42:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     b44:	9a08      	ldr	r2, [sp, #32]
     b46:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     b48:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b4e:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     b50:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     b52:	662b      	str	r3, [r5, #96]	; 0x60
     b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b56:	bf00      	nop
     b58:	0000b06d 	.word	0x0000b06d

00000b5c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     b5c:	4901      	ldr	r1, [pc, #4]	; (b64 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     b5e:	2210      	movs	r2, #16
	str r2, [r1]
     b60:	600a      	str	r2, [r1, #0]
	bx lr
     b62:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     b64:	e000ed10 	.word	0xe000ed10

00000b68 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     b68:	4040      	eors	r0, r0
	msr BASEPRI, r0
     b6a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     b6e:	bf30      	wfi

	bx lr
     b70:	4770      	bx	lr
     b72:	bf00      	nop

00000b74 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     b74:	4040      	eors	r0, r0
	msr BASEPRI, r0
     b76:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     b7a:	f8df c01c 	ldr.w	ip, [pc, #28]	; b98 <__bus_fault+0x24>
	ldr ip, [ip]
     b7e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     b82:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     b86:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     b88:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     b8c:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     b90:	b500      	push	{lr}
	bl _Fault
     b92:	f7ff ff1f 	bl	9d4 <_Fault>

	pop {pc}
     b96:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     b98:	e000ed04 	.word	0xe000ed04

00000b9c <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
     b9c:	b538      	push	{r3, r4, r5, lr}
     b9e:	4604      	mov	r4, r0
     ba0:	460d      	mov	r5, r1

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     ba2:	f00a f81b 	bl	abdc <_impl_k_current_get>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     ba6:	4629      	mov	r1, r5
     ba8:	4620      	mov	r0, r4
}
     baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     bae:	f000 b805 	b.w	bbc <_SysFatalErrorHandler>

00000bb2 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     bb2:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     bb4:	6800      	ldr	r0, [r0, #0]
     bb6:	f7ff bff1 	b.w	b9c <_NanoFatalErrorHandler>
	...

00000bbc <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     bbc:	2805      	cmp	r0, #5
{
     bbe:	b508      	push	{r3, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     bc0:	d004      	beq.n	bcc <_SysFatalErrorHandler+0x10>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     bc2:	f00a fa3b 	bl	b03c <k_is_in_isr>
     bc6:	b120      	cbz	r0, bd2 <_SysFatalErrorHandler+0x16>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     bc8:	f00a fa38 	bl	b03c <k_is_in_isr>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     bcc:	f7ff ffcc 	bl	b68 <k_cpu_idle>
     bd0:	e7fc      	b.n	bcc <_SysFatalErrorHandler+0x10>
	if (k_is_in_isr() || _is_thread_essential()) {
     bd2:	f00a fa43 	bl	b05c <_is_thread_essential>
     bd6:	2800      	cmp	r0, #0
     bd8:	d1f6      	bne.n	bc8 <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     bda:	4b03      	ldr	r3, [pc, #12]	; (be8 <_SysFatalErrorHandler+0x2c>)

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     bdc:	6898      	ldr	r0, [r3, #8]
	}
	CODE_UNREACHABLE;
}
     bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     be2:	f000 b803 	b.w	bec <_impl_k_thread_abort>
     be6:	bf00      	nop
     be8:	20002894 	.word	0x20002894

00000bec <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     bec:	b538      	push	{r3, r4, r5, lr}
     bee:	4605      	mov	r5, r0
	__asm__ volatile(
     bf0:	f04f 0320 	mov.w	r3, #32
     bf4:	f3ef 8411 	mrs	r4, BASEPRI
     bf8:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     bfc:	f00a fa8c 	bl	b118 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     c00:	4b0b      	ldr	r3, [pc, #44]	; (c30 <_impl_k_thread_abort+0x44>)
     c02:	689b      	ldr	r3, [r3, #8]
     c04:	429d      	cmp	r5, r3
     c06:	d10d      	bne.n	c24 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <_impl_k_thread_abort+0x48>)
     c0a:	685a      	ldr	r2, [r3, #4]
     c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
     c10:	b922      	cbnz	r2, c1c <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     c12:	f00a f80d 	bl	ac30 <_update_time_slice_before_swap>

	return __swap(key);
     c16:	4620      	mov	r0, r4
     c18:	f7ff fe3c 	bl	894 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     c1c:	685a      	ldr	r2, [r3, #4]
     c1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     c22:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     c24:	4620      	mov	r0, r4
}
     c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     c2a:	f009 bf3d 	b.w	aaa8 <_reschedule_threads>
     c2e:	bf00      	nop
     c30:	20002894 	.word	0x20002894
     c34:	e000ed00 	.word	0xe000ed00

00000c38 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     c38:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     c3a:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     c3c:	4a0b      	ldr	r2, [pc, #44]	; (c6c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     c3e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     c40:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     c42:	bf1e      	ittt	ne
	movne	r1, #0
     c44:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     c46:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     c48:	f009 fc1e 	blne	a488 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     c4c:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     c4e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     c52:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     c56:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     c5a:	4905      	ldr	r1, [pc, #20]	; (c70 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     c5c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     c5e:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     c60:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     c62:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     c66:	f7ff bdf3 	b.w	850 <_ExcExit>
     c6a:	0000      	.short	0x0000
	ldr r2, =_kernel
     c6c:	20002894 	.word	0x20002894
	ldr r1, =_sw_isr_table
     c70:	000000f8 	.word	0x000000f8

00000c74 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     c74:	2020      	movs	r0, #32
    msr BASEPRI, r0
     c76:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     c7a:	4805      	ldr	r0, [pc, #20]	; (c90 <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     c80:	1840      	adds	r0, r0, r1
    msr PSP, r0
     c82:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     c86:	2002      	movs	r0, #2
    msr CONTROL, r0
     c88:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     c8c:	f000 b806 	b.w	c9c <_PrepC>
    ldr r0, =_interrupt_stack
     c90:	20004fa0 	.word	0x20004fa0

00000c94 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     c94:	bf30      	wfi
    b _SysNmiOnReset
     c96:	f7ff bffd 	b.w	c94 <_SysNmiOnReset>
     c9a:	bf00      	nop

00000c9c <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     c9c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     c9e:	4b07      	ldr	r3, [pc, #28]	; (cbc <_PrepC+0x20>)
     ca0:	4a07      	ldr	r2, [pc, #28]	; (cc0 <_PrepC+0x24>)
     ca2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     ca6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     ca8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     cac:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     cb0:	f009 fc1a 	bl	a4e8 <_bss_zero>
	_data_copy();
     cb4:	f009 fc22 	bl	a4fc <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     cb8:	f009 fc40 	bl	a53c <_Cstart>
     cbc:	00000000 	.word	0x00000000
     cc0:	e000ed00 	.word	0xe000ed00

00000cc4 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     cc4:	b508      	push	{r3, lr}
	handler();
     cc6:	f7ff ffe5 	bl	c94 <_SysNmiOnReset>
	_ExcExit();
}
     cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     cce:	f7ff bdbf 	b.w	850 <_ExcExit>
	...

00000cd4 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     cd4:	4b15      	ldr	r3, [pc, #84]	; (d2c <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     cd6:	4916      	ldr	r1, [pc, #88]	; (d30 <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     cd8:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     cda:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     cdc:	680d      	ldr	r5, [r1, #0]
     cde:	f3c2 2207 	ubfx	r2, r2, #8, #8
     ce2:	4295      	cmp	r5, r2
     ce4:	d80f      	bhi.n	d06 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     ce6:	2200      	movs	r2, #0
     ce8:	6848      	ldr	r0, [r1, #4]
     cea:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     cec:	4295      	cmp	r5, r2
     cee:	f100 000c 	add.w	r0, r0, #12
     cf2:	d10a      	bne.n	d0a <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
     cf4:	2205      	movs	r2, #5
     cf6:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
     cf8:	4b0e      	ldr	r3, [pc, #56]	; (d34 <arm_mpu_init+0x60>)
     cfa:	2201      	movs	r2, #1
     cfc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
     cfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d02:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
     d06:	2000      	movs	r0, #0
     d08:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
     d0a:	f850 1c0c 	ldr.w	r1, [r0, #-12]
     d0e:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
     d12:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     d14:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
     d18:	f041 0110 	orr.w	r1, r1, #16
     d1c:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     d1e:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
     d22:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     d24:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
     d26:	611c      	str	r4, [r3, #16]
     d28:	e7e0      	b.n	cec <arm_mpu_init+0x18>
     d2a:	bf00      	nop
     d2c:	e000ed90 	.word	0xe000ed90
     d30:	20005d94 	.word	0x20005d94
     d34:	20000000 	.word	0x20000000

00000d38 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_SEGGER_RTT, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
     d38:	4770      	bx	lr
	...

00000d3c <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
     d3c:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     d3e:	4c11      	ldr	r4, [pc, #68]	; (d84 <sys_rand32_get+0x48>)
     d40:	f3bf 8f5b 	dmb	ish
     d44:	6820      	ldr	r0, [r4, #0]
     d46:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
     d4a:	b960      	cbnz	r0, d66 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
     d4c:	480e      	ldr	r0, [pc, #56]	; (d88 <sys_rand32_get+0x4c>)
     d4e:	f009 fb75 	bl	a43c <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     d52:	f3bf 8f5b 	dmb	ish
     d56:	e854 3f00 	ldrex	r3, [r4]
     d5a:	e844 0200 	strex	r2, r0, [r4]
     d5e:	2a00      	cmp	r2, #0
     d60:	d1f9      	bne.n	d56 <sys_rand32_get+0x1a>
     d62:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
     d66:	6843      	ldr	r3, [r0, #4]
     d68:	2204      	movs	r2, #4
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	eb0d 0102 	add.w	r1, sp, r2
     d70:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
     d72:	2800      	cmp	r0, #0
     d74:	da02      	bge.n	d7c <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
     d76:	f000 fb1d 	bl	13b4 <_timer_cycle_get_32>
     d7a:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
     d7c:	9801      	ldr	r0, [sp, #4]
     d7e:	b002      	add	sp, #8
     d80:	bd10      	pop	{r4, pc}
     d82:	bf00      	nop
     d84:	20000004 	.word	0x20000004
     d88:	0000b778 	.word	0x0000b778

00000d8c <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
     d8c:	b510      	push	{r4, lr}
     d8e:	f04f 0320 	mov.w	r3, #32
     d92:	f3ef 8211 	mrs	r2, BASEPRI
     d96:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
     d9a:	4c11      	ldr	r4, [pc, #68]	; (de0 <_m16src_stop+0x54>)
     d9c:	7823      	ldrb	r3, [r4, #0]
     d9e:	b923      	cbnz	r3, daa <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     da0:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
     da4:	f06f 0044 	mvn.w	r0, #68	; 0x44
     da8:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
     daa:	3b01      	subs	r3, #1
     dac:	b2db      	uxtb	r3, r3
     dae:	7023      	strb	r3, [r4, #0]
     db0:	b123      	cbz	r3, dbc <_m16src_stop+0x30>
     db2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
     db6:	f06f 000f 	mvn.w	r0, #15
     dba:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
     dbc:	4b09      	ldr	r3, [pc, #36]	; (de4 <_m16src_stop+0x58>)
     dbe:	7818      	ldrb	r0, [r3, #0]
     dc0:	2101      	movs	r1, #1
     dc2:	b128      	cbz	r0, dd0 <_m16src_stop+0x44>
		m16src_ref++;
     dc4:	7021      	strb	r1, [r4, #0]
     dc6:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
     dca:	f06f 000a 	mvn.w	r0, #10
     dce:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
     dd0:	7019      	strb	r1, [r3, #0]
     dd2:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
     dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     dda:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
     ddc:	7018      	strb	r0, [r3, #0]

	return 0;
}
     dde:	bd10      	pop	{r4, pc}
     de0:	2000000a 	.word	0x2000000a
     de4:	20000009 	.word	0x20000009

00000de8 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
     de8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
     dea:	2200      	movs	r2, #0
     dec:	4610      	mov	r0, r2
     dee:	2101      	movs	r1, #1
     df0:	f7ff fe64 	bl	abc <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
     df4:	2000      	movs	r0, #0
     df6:	f7ff fe2f 	bl	a58 <_arch_irq_enable>

	return 0;
}
     dfa:	2000      	movs	r0, #0
     dfc:	bd08      	pop	{r3, pc}
	...

00000e00 <_m16src_start>:
{
     e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
     e02:	f04f 0220 	mov.w	r2, #32
     e06:	f3ef 8311 	mrs	r3, BASEPRI
     e0a:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
     e0e:	4a25      	ldr	r2, [pc, #148]	; (ea4 <_m16src_start+0xa4>)
     e10:	7810      	ldrb	r0, [r2, #0]
     e12:	1c44      	adds	r4, r0, #1
     e14:	7014      	strb	r4, [r2, #0]
     e16:	b160      	cbz	r0, e32 <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     e18:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
     e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     e20:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
     e24:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     e28:	bf14      	ite	ne
     e2a:	2000      	movne	r0, #0
     e2c:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
     e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
     e32:	4d1d      	ldr	r5, [pc, #116]	; (ea8 <_m16src_start+0xa8>)
     e34:	782f      	ldrb	r7, [r5, #0]
     e36:	b12f      	cbz	r7, e44 <_m16src_start+0x44>
		m16src_ref--;
     e38:	7010      	strb	r0, [r2, #0]
     e3a:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
     e3e:	f06f 000a 	mvn.w	r0, #10
     e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
     e44:	2601      	movs	r6, #1
     e46:	702e      	strb	r6, [r5, #0]
     e48:	f383 8811 	msr	BASEPRI, r3
     e4c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
     e50:	b319      	cbz	r1, e9a <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
     e52:	4638      	mov	r0, r7
     e54:	f7ff fe10 	bl	a78 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     e58:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
     e5c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     e60:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     e64:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
     e66:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
     e6a:	b192      	cbz	r2, e92 <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     e6c:	2200      	movs	r2, #0
     e6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e72:	4a0e      	ldr	r2, [pc, #56]	; (eac <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
     e74:	f013 0f01 	tst.w	r3, #1
     e78:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
     e7c:	bf08      	it	eq
     e7e:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
     e82:	2000      	movs	r0, #0
     e84:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
     e88:	f7ff fde6 	bl	a58 <_arch_irq_enable>
	m16src_grd = 0;
     e8c:	2300      	movs	r3, #0
     e8e:	702b      	strb	r3, [r5, #0]
     e90:	e7c4      	b.n	e1c <_m16src_start+0x1c>
			__WFE();
     e92:	bf20      	wfe
			__SEV();
     e94:	bf40      	sev
			__WFE();
     e96:	bf20      	wfe
     e98:	e7e5      	b.n	e66 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     e9a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     e9e:	6026      	str	r6, [r4, #0]
     ea0:	e7f4      	b.n	e8c <_m16src_start+0x8c>
     ea2:	bf00      	nop
     ea4:	2000000a 	.word	0x2000000a
     ea8:	20000009 	.word	0x20000009
     eac:	e000e100 	.word	0xe000e100

00000eb0 <_k32src_start>:
{
     eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eb2:	4606      	mov	r6, r0
     eb4:	460c      	mov	r4, r1
	__asm__ volatile(
     eb6:	f04f 0220 	mov.w	r2, #32
     eba:	f3ef 8311 	mrs	r3, BASEPRI
     ebe:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
     ec2:	4a2c      	ldr	r2, [pc, #176]	; (f74 <_k32src_start+0xc4>)
     ec4:	7815      	ldrb	r5, [r2, #0]
     ec6:	b165      	cbz	r5, ee2 <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     ec8:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
     ecc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     ed0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
     ed4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
     ed8:	bf0c      	ite	eq
     eda:	f06f 0043 	mvneq.w	r0, #67	; 0x43
     ede:	2000      	movne	r0, #0
     ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
     ee2:	2701      	movs	r7, #1
     ee4:	7017      	strb	r7, [r2, #0]
     ee6:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
     eea:	4628      	mov	r0, r5
     eec:	f7ff fdc4 	bl	a78 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
     ef4:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     ef6:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
     efa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
     efe:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
     f02:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
     f06:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
     f08:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
     f0c:	b371      	cbz	r1, f6c <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
     f0e:	0792      	lsls	r2, r2, #30
     f10:	4f19      	ldr	r7, [pc, #100]	; (f78 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
     f12:	bf58      	it	pl
     f14:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     f16:	f04f 0100 	mov.w	r1, #0
     f1a:	f04f 0501 	mov.w	r5, #1
     f1e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
     f22:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
     f26:	bf58      	it	pl
     f28:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
     f2c:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
     f30:	f7ff fd92 	bl	a58 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
     f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
     f38:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
     f3a:	2218      	movs	r2, #24
     f3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
     f40:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
     f44:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
     f48:	f014 0103 	ands.w	r1, r4, #3
     f4c:	d1be      	bne.n	ecc <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
     f4e:	2010      	movs	r0, #16
     f50:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
     f54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
     f58:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     f5a:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
     f5e:	f7ff ff4f 	bl	e00 <_m16src_start>
		if (!err) {
     f62:	2800      	cmp	r0, #0
     f64:	d1b2      	bne.n	ecc <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f66:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
     f6a:	e7af      	b.n	ecc <_k32src_start+0x1c>
		__WFE();
     f6c:	bf20      	wfe
		__SEV();
     f6e:	bf40      	sev
		__WFE();
     f70:	bf20      	wfe
     f72:	e7c9      	b.n	f08 <_k32src_start+0x58>
     f74:	20000008 	.word	0x20000008
     f78:	e000e100 	.word	0xe000e100

00000f7c <_power_clock_isr>:
{
     f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
     f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
     f82:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
     f84:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
     f88:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
     f8c:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
     f90:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
     f94:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
     f98:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
     f9c:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
     fa0:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
     fa4:	f1be 0f00 	cmp.w	lr, #0
     fa8:	d003      	beq.n	fb2 <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
     faa:	f04f 0e00 	mov.w	lr, #0
     fae:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
     fb2:	b127      	cbz	r7, fbe <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     fb8:	2700      	movs	r7, #0
     fba:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
     fbe:	b13a      	cbz	r2, fd0 <_power_clock_isr+0x54>
     fc0:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
     fc2:	bf41      	itttt	mi
     fc4:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
     fc8:	2201      	movmi	r2, #1
     fca:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
     fce:	611a      	strmi	r2, [r3, #16]
	if (lf) {
     fd0:	b120      	cbz	r0, fdc <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     fd6:	2200      	movs	r2, #0
     fd8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
     fdc:	b149      	cbz	r1, ff2 <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
     fde:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     fe2:	2100      	movs	r1, #0
     fe4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
     fe8:	4628      	mov	r0, r5
     fea:	f7ff fecf 	bl	d8c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
     fee:	2301      	movs	r3, #1
     ff0:	6163      	str	r3, [r4, #20]
	if (ctto) {
     ff2:	b176      	cbz	r6, 1012 <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
     ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     ff8:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     ffa:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
     ffc:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    1000:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1002:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1006:	f7ff fefb 	bl	e00 <_m16src_start>
		if (!err) {
    100a:	b910      	cbnz	r0, 1012 <_power_clock_isr+0x96>
    100c:	4b01      	ldr	r3, [pc, #4]	; (1014 <_power_clock_isr+0x98>)
    100e:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    1012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1014:	e000e100 	.word	0xe000e100

00001018 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    101c:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    101e:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1020:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1022:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1024:	440a      	add	r2, r1
	s = &rng->rand[first];
    1026:	4406      	add	r6, r0
	if (first <= last) {
    1028:	d81f      	bhi.n	106a <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    102a:	1ae4      	subs	r4, r4, r3
    102c:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    102e:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1030:	bf3e      	ittt	cc
    1032:	1a64      	subcc	r4, r4, r1
    1034:	b2e7      	uxtbcc	r7, r4
    1036:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1038:	4423      	add	r3, r4
		octets -= avail;
    103a:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    103e:	bf28      	it	cs
    1040:	2700      	movcs	r7, #0
		first += avail;
    1042:	b2db      	uxtb	r3, r3
		octets -= avail;
    1044:	b2c9      	uxtb	r1, r1
    1046:	4434      	add	r4, r6

		while (avail--) {
    1048:	42a6      	cmp	r6, r4
    104a:	d109      	bne.n	1060 <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    104c:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    104e:	7843      	ldrb	r3, [r0, #1]
    1050:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1052:	bf82      	ittt	hi
    1054:	4b20      	ldrhi	r3, [pc, #128]	; (10d8 <get+0xc0>)
    1056:	2201      	movhi	r2, #1
    1058:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    105a:	4608      	mov	r0, r1
    105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1060:	f816 5b01 	ldrb.w	r5, [r6], #1
    1064:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1068:	e7ee      	b.n	1048 <get+0x30>
		avail = rng->count - first;
    106a:	7805      	ldrb	r5, [r0, #0]
    106c:	1aed      	subs	r5, r5, r3
    106e:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1070:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1072:	bf3f      	itttt	cc
    1074:	1a67      	subcc	r7, r4, r1
    1076:	19ed      	addcc	r5, r5, r7
    1078:	b2ef      	uxtbcc	r7, r5
    107a:	460d      	movcc	r5, r1
			first += avail;
    107c:	bf38      	it	cc
    107e:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1080:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1084:	bf32      	itee	cc
    1086:	b2db      	uxtbcc	r3, r3
    1088:	4627      	movcs	r7, r4
			first = 0;
    108a:	2300      	movcs	r3, #0
		octets -= avail;
    108c:	b2c9      	uxtb	r1, r1
    108e:	4696      	mov	lr, r2
    1090:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1094:	4566      	cmp	r6, ip
    1096:	d119      	bne.n	10cc <get+0xb4>
    1098:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    109a:	2900      	cmp	r1, #0
    109c:	d0d6      	beq.n	104c <get+0x34>
    109e:	2c00      	cmp	r4, #0
    10a0:	d0d4      	beq.n	104c <get+0x34>
			if (octets < last) {
    10a2:	428c      	cmp	r4, r1
    10a4:	bf8a      	itet	hi
    10a6:	460b      	movhi	r3, r1
    10a8:	4623      	movls	r3, r4
				remaining = last - octets;
    10aa:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    10ac:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    10b0:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    10b4:	bf8c      	ite	hi
    10b6:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    10b8:	2700      	movls	r7, #0
			octets -= last;
    10ba:	b2c9      	uxtb	r1, r1
    10bc:	18f4      	adds	r4, r6, r3
			while (last--) {
    10be:	42a6      	cmp	r6, r4
    10c0:	d0c4      	beq.n	104c <get+0x34>
				*(--d) = *s++;
    10c2:	f816 5b01 	ldrb.w	r5, [r6], #1
    10c6:	f802 5d01 	strb.w	r5, [r2, #-1]!
    10ca:	e7f8      	b.n	10be <get+0xa6>
			*(--d) = *s++;
    10cc:	f816 8b01 	ldrb.w	r8, [r6], #1
    10d0:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    10d4:	e7de      	b.n	1094 <get+0x7c>
    10d6:	bf00      	nop
    10d8:	4000d000 	.word	0x4000d000

000010dc <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    10dc:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    10de:	b1d0      	cbz	r0, 1116 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    10e0:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    10e2:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    10e4:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    10e6:	1c53      	adds	r3, r2, #1
    10e8:	b2db      	uxtb	r3, r3
		last = 0;
    10ea:	42ab      	cmp	r3, r5
    10ec:	bf08      	it	eq
    10ee:	2300      	moveq	r3, #0
	if (last == rng->first) {
    10f0:	42a3      	cmp	r3, r4
    10f2:	d010      	beq.n	1116 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    10f4:	b161      	cbz	r1, 1110 <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    10f6:	490a      	ldr	r1, [pc, #40]	; (1120 <isr+0x44>)
    10f8:	4402      	add	r2, r0
    10fa:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    10fe:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1100:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1102:	3301      	adds	r3, #1
    1104:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1106:	429d      	cmp	r5, r3
    1108:	bf08      	it	eq
    110a:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    110c:	42a3      	cmp	r3, r4
    110e:	d005      	beq.n	111c <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1110:	f06f 000f 	mvn.w	r0, #15
    1114:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1116:	f06f 0036 	mvn.w	r0, #54	; 0x36
    111a:	bd30      	pop	{r4, r5, pc}
		return 0;
    111c:	2000      	movs	r0, #0
}
    111e:	bd30      	pop	{r4, r5, pc}
    1120:	4000d000 	.word	0x4000d000

00001124 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1124:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1126:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1128:	2201      	movs	r2, #1
    112a:	4611      	mov	r1, r2
    112c:	4620      	mov	r0, r4
    112e:	f009 fda9 	bl	ac84 <_impl_k_sem_init>
    1132:	f104 0018 	add.w	r0, r4, #24
    1136:	2201      	movs	r2, #1
    1138:	2100      	movs	r1, #0
    113a:	f009 fda3 	bl	ac84 <_impl_k_sem_init>
	rng->threshold = threshold;
    113e:	2304      	movs	r3, #4
    1140:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1144:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1146:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1148:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    114c:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    114e:	4b11      	ldr	r3, [pc, #68]	; (1194 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1150:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1154:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1156:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    115a:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    115e:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1162:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1166:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    116a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    116e:	f042 0201 	orr.w	r2, r2, #1
    1172:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1176:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1178:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    117c:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    117e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1182:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1184:	462a      	mov	r2, r5
    1186:	f7ff fc99 	bl	abc <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    118a:	4630      	mov	r0, r6
    118c:	f7ff fc64 	bl	a58 <_arch_irq_enable>

	return 0;
}
    1190:	4628      	mov	r0, r5
    1192:	bd70      	pop	{r4, r5, r6, pc}
    1194:	4000d000 	.word	0x4000d000

00001198 <isr_rand>:
{
    1198:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    119a:	4b12      	ldr	r3, [pc, #72]	; (11e4 <isr_rand+0x4c>)
    119c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    11a0:	b1fb      	cbz	r3, 11e2 <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    11a2:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    11a4:	2101      	movs	r1, #1
    11a6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    11aa:	f7ff ff97 	bl	10dc <isr>
		if (ret != -EBUSY) {
    11ae:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    11b2:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    11b4:	d00d      	beq.n	11d2 <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    11b6:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    11ba:	bf14      	ite	ne
    11bc:	2100      	movne	r1, #0
    11be:	2101      	moveq	r1, #1
    11c0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    11c4:	f7ff ff8a 	bl	10dc <isr>
    11c8:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    11ca:	f105 0018 	add.w	r0, r5, #24
    11ce:	f009 fd63 	bl	ac98 <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    11d2:	4b04      	ldr	r3, [pc, #16]	; (11e4 <isr_rand+0x4c>)
    11d4:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    11d6:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    11d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    11dc:	bf1c      	itt	ne
    11de:	2201      	movne	r2, #1
    11e0:	605a      	strne	r2, [r3, #4]
    11e2:	bd38      	pop	{r3, r4, r5, pc}
    11e4:	4000d000 	.word	0x4000d000

000011e8 <entropy_nrf5_get_entropy>:
{
    11e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    11ec:	6885      	ldr	r5, [r0, #8]
{
    11ee:	460f      	mov	r7, r1
    11f0:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    11f2:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    11f6:	b914      	cbnz	r4, 11fe <entropy_nrf5_get_entropy+0x16>
}
    11f8:	4620      	mov	r0, r4
    11fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    11fe:	2cff      	cmp	r4, #255	; 0xff
    1200:	4623      	mov	r3, r4
    1202:	bf28      	it	cs
    1204:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1206:	1ae4      	subs	r4, r4, r3
    1208:	b2de      	uxtb	r6, r3
    120a:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    120c:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1214:	4628      	mov	r0, r5
    1216:	f009 fd9f 	bl	ad58 <_impl_k_sem_take>
    121a:	4631      	mov	r1, r6
    121c:	463a      	mov	r2, r7
    121e:	4648      	mov	r0, r9
    1220:	f7ff fefa 	bl	1018 <get>
    1224:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1226:	4628      	mov	r0, r5
    1228:	f009 fd36 	bl	ac98 <_impl_k_sem_give>
			if (len8) {
    122c:	2e00      	cmp	r6, #0
    122e:	d0e2      	beq.n	11f6 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1234:	4640      	mov	r0, r8
    1236:	f009 fd8f 	bl	ad58 <_impl_k_sem_take>
    123a:	e7e9      	b.n	1210 <entropy_nrf5_get_entropy+0x28>

0000123c <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    123c:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    123e:	4802      	ldr	r0, [pc, #8]	; (1248 <entropy_get_entropy_isr+0xc>)
    1240:	460a      	mov	r2, r1
    1242:	4619      	mov	r1, r3
    1244:	f7ff bee8 	b.w	1018 <get>
    1248:	20000048 	.word	0x20000048

0000124c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    124c:	4b08      	ldr	r3, [pc, #32]	; (1270 <rtc_compare_set+0x24>)
    124e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1252:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1256:	1ac0      	subs	r0, r0, r3
    1258:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    125c:	4b05      	ldr	r3, [pc, #20]	; (1274 <rtc_compare_set+0x28>)
    125e:	3802      	subs	r0, #2
    1260:	4298      	cmp	r0, r3
    1262:	bf82      	ittt	hi
    1264:	4b04      	ldrhi	r3, [pc, #16]	; (1278 <rtc_compare_set+0x2c>)
    1266:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    126a:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    126e:	4770      	bx	lr
    1270:	40011000 	.word	0x40011000
    1274:	007ffffd 	.word	0x007ffffd
    1278:	e000e100 	.word	0xe000e100

0000127c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    127c:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    127e:	4b12      	ldr	r3, [pc, #72]	; (12c8 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1280:	4c12      	ldr	r4, [pc, #72]	; (12cc <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1282:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1286:	6822      	ldr	r2, [r4, #0]
    1288:	1a80      	subs	r0, r0, r2
    128a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    128e:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1292:	d911      	bls.n	12b8 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1294:	490e      	ldr	r1, [pc, #56]	; (12d0 <rtc_announce_set_next+0x54>)
    1296:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1298:	f240 1347 	movw	r3, #327	; 0x147
    129c:	fbb0 f0f3 	udiv	r0, r0, r3
    12a0:	4288      	cmp	r0, r1
    12a2:	bf28      	it	cs
    12a4:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    12a6:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    12aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    12ae:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    12b0:	4b08      	ldr	r3, [pc, #32]	; (12d4 <rtc_announce_set_next+0x58>)
    12b2:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    12b4:	f009 fd78 	bl	ada8 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    12b8:	6820      	ldr	r0, [r4, #0]
}
    12ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    12be:	f200 1047 	addw	r0, r0, #327	; 0x147
    12c2:	f7ff bfc3 	b.w	124c <rtc_compare_set>
    12c6:	bf00      	nop
    12c8:	40011000 	.word	0x40011000
    12cc:	20000060 	.word	0x20000060
    12d0:	2000005c 	.word	0x2000005c
    12d4:	20006028 	.word	0x20006028

000012d8 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    12d8:	4b02      	ldr	r3, [pc, #8]	; (12e4 <rtc1_nrf5_isr+0xc>)
    12da:	2200      	movs	r2, #0
    12dc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    12e0:	f7ff bfcc 	b.w	127c <rtc_announce_set_next>
    12e4:	40011000 	.word	0x40011000

000012e8 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    12e8:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    12ec:	4298      	cmp	r0, r3
    12ee:	bf28      	it	cs
    12f0:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    12f2:	4b05      	ldr	r3, [pc, #20]	; (1308 <_timer_idle_enter+0x20>)
    12f4:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    12f6:	4b05      	ldr	r3, [pc, #20]	; (130c <_timer_idle_enter+0x24>)
    12f8:	681b      	ldr	r3, [r3, #0]
    12fa:	f240 1247 	movw	r2, #327	; 0x147
    12fe:	fb02 3000 	mla	r0, r2, r0, r3
    1302:	f7ff bfa3 	b.w	124c <rtc_compare_set>
    1306:	bf00      	nop
    1308:	2000005c 	.word	0x2000005c
    130c:	20000060 	.word	0x20000060

00001310 <_timer_idle_exit>:
{
    1310:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1312:	4b07      	ldr	r3, [pc, #28]	; (1330 <_timer_idle_exit+0x20>)
    1314:	2200      	movs	r2, #0
    1316:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    131a:	4b06      	ldr	r3, [pc, #24]	; (1334 <_timer_idle_exit+0x24>)
    131c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1320:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1324:	f7ff ffaa 	bl	127c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1328:	4b03      	ldr	r3, [pc, #12]	; (1338 <_timer_idle_exit+0x28>)
    132a:	2201      	movs	r2, #1
    132c:	601a      	str	r2, [r3, #0]
    132e:	bd08      	pop	{r3, pc}
    1330:	40011000 	.word	0x40011000
    1334:	e000e100 	.word	0xe000e100
    1338:	2000005c 	.word	0x2000005c

0000133c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    133c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    133e:	4818      	ldr	r0, [pc, #96]	; (13a0 <_sys_clock_driver_init+0x64>)
    1340:	f009 f87c 	bl	a43c <device_get_binding>
	if (!clock) {
    1344:	b348      	cbz	r0, 139a <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1346:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1348:	4d16      	ldr	r5, [pc, #88]	; (13a4 <_sys_clock_driver_init+0x68>)
    134a:	681b      	ldr	r3, [r3, #0]
    134c:	2101      	movs	r1, #1
    134e:	4798      	blx	r3
	rtc_past = 0;
    1350:	4b15      	ldr	r3, [pc, #84]	; (13a8 <_sys_clock_driver_init+0x6c>)
    1352:	2400      	movs	r4, #0
    1354:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1356:	4b15      	ldr	r3, [pc, #84]	; (13ac <_sys_clock_driver_init+0x70>)
    1358:	2601      	movs	r6, #1
    135a:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    135c:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1360:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1364:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    136c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1370:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1374:	4b0e      	ldr	r3, [pc, #56]	; (13b0 <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1376:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    137a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    137e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1382:	4631      	mov	r1, r6
    1384:	4622      	mov	r2, r4
    1386:	2011      	movs	r0, #17
    1388:	f7ff fb98 	bl	abc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    138c:	2011      	movs	r0, #17
    138e:	f7ff fb63 	bl	a58 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1392:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1394:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1396:	602e      	str	r6, [r5, #0]
	return 0;
    1398:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    139a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    139e:	bd70      	pop	{r4, r5, r6, pc}
    13a0:	0000b79c 	.word	0x0000b79c
    13a4:	40011000 	.word	0x40011000
    13a8:	20000060 	.word	0x20000060
    13ac:	2000005c 	.word	0x2000005c
    13b0:	e000e100 	.word	0xe000e100

000013b4 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    13b4:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    13b6:	4a0b      	ldr	r2, [pc, #44]	; (13e4 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    13b8:	480b      	ldr	r0, [pc, #44]	; (13e8 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    13ba:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    13be:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    13c2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    13c6:	4299      	cmp	r1, r3
    13c8:	d10a      	bne.n	13e0 <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    13ca:	4a08      	ldr	r2, [pc, #32]	; (13ec <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    13cc:	f240 1347 	movw	r3, #327	; 0x147
    13d0:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    13d4:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    13d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    13da:	fb00 3004 	mla	r0, r0, r4, r3
    13de:	bd30      	pop	{r4, r5, pc}
    13e0:	4619      	mov	r1, r3
    13e2:	e7ec      	b.n	13be <_timer_cycle_get_32+0xa>
    13e4:	40011000 	.word	0x40011000
    13e8:	20003fa8 	.word	0x20003fa8
    13ec:	2000602c 	.word	0x2000602c

000013f0 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    13f0:	7803      	ldrb	r3, [r0, #0]
    13f2:	8842      	ldrh	r2, [r0, #2]
    13f4:	f013 0301 	ands.w	r3, r3, #1
    13f8:	d105      	bne.n	1406 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    13fa:	4909      	ldr	r1, [pc, #36]	; (1420 <valid_adv_param+0x30>)
    13fc:	7b89      	ldrb	r1, [r1, #14]
    13fe:	2908      	cmp	r1, #8
    1400:	d801      	bhi.n	1406 <valid_adv_param+0x16>
    1402:	2a9f      	cmp	r2, #159	; 0x9f
    1404:	d90a      	bls.n	141c <valid_adv_param+0x2c>
		    param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    1406:	8880      	ldrh	r0, [r0, #4]
    1408:	4282      	cmp	r2, r0
    140a:	d807      	bhi.n	141c <valid_adv_param+0x2c>
    140c:	2a1f      	cmp	r2, #31
    140e:	d905      	bls.n	141c <valid_adv_param+0x2c>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    1410:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    1414:	bf8c      	ite	hi
    1416:	2000      	movhi	r0, #0
    1418:	2001      	movls	r0, #1
    141a:	4770      	bx	lr
			return false;
    141c:	2000      	movs	r0, #0
		return false;
	}

	return true;
}
    141e:	4770      	bx	lr
    1420:	20005de0 	.word	0x20005de0

00001424 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1424:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1426:	f3bf 8f5b 	dmb	ish
    142a:	e850 3f00 	ldrex	r3, [r0]
    142e:	ea43 0201 	orr.w	r2, r3, r1
    1432:	e840 2e00 	strex	lr, r2, [r0]
    1436:	f1be 0f00 	cmp.w	lr, #0
    143a:	d1f6      	bne.n	142a <atomic_or+0x6>
    143c:	f3bf 8f5b 	dmb	ish
    1440:	4618      	mov	r0, r3
    1442:	f85d fb04 	ldr.w	pc, [sp], #4

00001446 <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1446:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1448:	f3bf 8f5b 	dmb	ish
    144c:	e850 3f00 	ldrex	r3, [r0]
    1450:	ea03 0201 	and.w	r2, r3, r1
    1454:	e840 2e00 	strex	lr, r2, [r0]
    1458:	f1be 0f00 	cmp.w	lr, #0
    145c:	d1f6      	bne.n	144c <atomic_and+0x6>
    145e:	f3bf 8f5b 	dmb	ish
    1462:	4618      	mov	r0, r3
    1464:	f85d fb04 	ldr.w	pc, [sp], #4

00001468 <hci_cmd_done.isra.9>:
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1468:	b570      	push	{r4, r5, r6, lr}
    146a:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    146c:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    146e:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1470:	f008 feae 	bl	a1d0 <net_buf_pool_get>
    1474:	4b0e      	ldr	r3, [pc, #56]	; (14b0 <hci_cmd_done.isra.9+0x48>)
    1476:	4283      	cmp	r3, r0
    1478:	d119      	bne.n	14ae <hci_cmd_done.isra.9+0x46>
	if (cmd(buf)->opcode != opcode) {
    147a:	4628      	mov	r0, r5
    147c:	f008 feae 	bl	a1dc <net_buf_id>
	if (cmd(buf)->sync) {
    1480:	4628      	mov	r0, r5
    1482:	f008 feab 	bl	a1dc <net_buf_id>
    1486:	4c0b      	ldr	r4, [pc, #44]	; (14b4 <hci_cmd_done.isra.9+0x4c>)
    1488:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    148c:	6843      	ldr	r3, [r0, #4]
    148e:	b173      	cbz	r3, 14ae <hci_cmd_done.isra.9+0x46>
		cmd(buf)->status = status;
    1490:	4628      	mov	r0, r5
    1492:	f008 fea3 	bl	a1dc <net_buf_id>
    1496:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    149a:	4628      	mov	r0, r5
    149c:	f008 fe9e 	bl	a1dc <net_buf_id>
    14a0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
    14a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    14a8:	6840      	ldr	r0, [r0, #4]
    14aa:	f009 bbf5 	b.w	ac98 <_impl_k_sem_give>
    14ae:	bd70      	pop	{r4, r5, r6, pc}
    14b0:	200060fc 	.word	0x200060fc
    14b4:	20000068 	.word	0x20000068

000014b8 <atomic_test_bit.constprop.25>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    14b8:	4b07      	ldr	r3, [pc, #28]	; (14d8 <atomic_test_bit.constprop.25+0x20>)
    14ba:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    14be:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    14c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    14c4:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    14c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    14ca:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    14ce:	fa43 f000 	asr.w	r0, r3, r0
}
    14d2:	f000 0001 	and.w	r0, r0, #1
    14d6:	4770      	bx	lr
    14d8:	20005de0 	.word	0x20005de0

000014dc <bt_hci_cmd_create>:
{
    14dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    14e0:	4680      	mov	r8, r0
    14e2:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    14e4:	4813      	ldr	r0, [pc, #76]	; (1534 <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    14e6:	4d14      	ldr	r5, [pc, #80]	; (1538 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    14e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    14ec:	f008 ff04 	bl	a2f8 <net_buf_alloc_fixed>
    14f0:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    14f2:	f100 0608 	add.w	r6, r0, #8
    14f6:	2100      	movs	r1, #0
    14f8:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    14fa:	2700      	movs	r7, #0
    14fc:	f008 ff1b 	bl	a336 <net_buf_simple_reserve>
    1500:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1502:	4620      	mov	r0, r4
    1504:	f008 fe6a 	bl	a1dc <net_buf_id>
    1508:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    150c:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1510:	4620      	mov	r0, r4
    1512:	f008 fe63 	bl	a1dc <net_buf_id>
    1516:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    151a:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    151c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    151e:	4630      	mov	r0, r6
    1520:	f008 ff4c 	bl	a3bc <net_buf_simple_add>
	hdr->param_len = param_len;
    1524:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1528:	f8a0 8000 	strh.w	r8, [r0]
}
    152c:	4620      	mov	r0, r4
    152e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1532:	bf00      	nop
    1534:	200060fc 	.word	0x200060fc
    1538:	20000068 	.word	0x20000068

0000153c <bt_hci_cmd_send_sync>:
{
    153c:	b570      	push	{r4, r5, r6, lr}
    153e:	4615      	mov	r5, r2
    1540:	b086      	sub	sp, #24
	if (!buf) {
    1542:	460c      	mov	r4, r1
    1544:	b919      	cbnz	r1, 154e <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1546:	f7ff ffc9 	bl	14dc <bt_hci_cmd_create>
		if (!buf) {
    154a:	4604      	mov	r4, r0
    154c:	b368      	cbz	r0, 15aa <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    154e:	2201      	movs	r2, #1
    1550:	2100      	movs	r1, #0
    1552:	4668      	mov	r0, sp
    1554:	f009 fb96 	bl	ac84 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1558:	4620      	mov	r0, r4
    155a:	f008 fe3f 	bl	a1dc <net_buf_id>
    155e:	4e14      	ldr	r6, [pc, #80]	; (15b0 <bt_hci_cmd_send_sync+0x74>)
    1560:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1564:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1568:	4620      	mov	r0, r4
    156a:	f008 ff23 	bl	a3b4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    156e:	4621      	mov	r1, r4
    1570:	4810      	ldr	r0, [pc, #64]	; (15b4 <bt_hci_cmd_send_sync+0x78>)
    1572:	f008 fee4 	bl	a33e <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1576:	f242 7110 	movw	r1, #10000	; 0x2710
    157a:	4668      	mov	r0, sp
    157c:	f009 fbec 	bl	ad58 <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1580:	4620      	mov	r0, r4
    1582:	f008 fe2b 	bl	a1dc <net_buf_id>
    1586:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    158a:	b130      	cbz	r0, 159a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    158c:	4620      	mov	r0, r4
    158e:	f008 fee3 	bl	a358 <net_buf_unref>
		err = -EIO;
    1592:	f06f 0004 	mvn.w	r0, #4
}
    1596:	b006      	add	sp, #24
    1598:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    159a:	b10d      	cbz	r5, 15a0 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    159c:	602c      	str	r4, [r5, #0]
    159e:	e7fa      	b.n	1596 <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    15a0:	4620      	mov	r0, r4
    15a2:	f008 fed9 	bl	a358 <net_buf_unref>
		err = 0;
    15a6:	4628      	mov	r0, r5
    15a8:	e7f5      	b.n	1596 <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    15aa:	f06f 0036 	mvn.w	r0, #54	; 0x36
    15ae:	e7f2      	b.n	1596 <bt_hci_cmd_send_sync+0x5a>
    15b0:	20000068 	.word	0x20000068
    15b4:	20005e94 	.word	0x20005e94

000015b8 <set_random_address>:
{
    15b8:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    15ba:	4d15      	ldr	r5, [pc, #84]	; (1610 <set_random_address+0x58>)
    15bc:	2206      	movs	r2, #6
    15be:	f105 0108 	add.w	r1, r5, #8
    15c2:	4606      	mov	r6, r0
    15c4:	f7fe ffef 	bl	5a6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    15c8:	4604      	mov	r4, r0
    15ca:	b1d8      	cbz	r0, 1604 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    15cc:	2106      	movs	r1, #6
    15ce:	f242 0005 	movw	r0, #8197	; 0x2005
    15d2:	f7ff ff83 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    15d6:	4604      	mov	r4, r0
    15d8:	b1b0      	cbz	r0, 1608 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    15da:	2206      	movs	r2, #6
    15dc:	4631      	mov	r1, r6
    15de:	3008      	adds	r0, #8
    15e0:	f008 fef2 	bl	a3c8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    15e4:	4621      	mov	r1, r4
    15e6:	2200      	movs	r2, #0
    15e8:	f242 0005 	movw	r0, #8197	; 0x2005
    15ec:	f7ff ffa6 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    15f0:	4604      	mov	r4, r0
    15f2:	b938      	cbnz	r0, 1604 <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    15f4:	2206      	movs	r2, #6
    15f6:	4631      	mov	r1, r6
    15f8:	f105 0008 	add.w	r0, r5, #8
    15fc:	f7fe ffe8 	bl	5d0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1600:	2301      	movs	r3, #1
    1602:	71eb      	strb	r3, [r5, #7]
}
    1604:	4620      	mov	r0, r4
    1606:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    1608:	f06f 0436 	mvn.w	r4, #54	; 0x36
    160c:	e7fa      	b.n	1604 <set_random_address+0x4c>
    160e:	bf00      	nop
    1610:	20005de0 	.word	0x20005de0

00001614 <le_set_private_addr>:
{
    1614:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    1616:	2106      	movs	r1, #6
    1618:	4668      	mov	r0, sp
    161a:	f001 fedf 	bl	33dc <bt_rand>
	if (err) {
    161e:	b940      	cbnz	r0, 1632 <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    1620:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    1624:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    1626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    162a:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    162e:	f7ff ffc3 	bl	15b8 <set_random_address>
}
    1632:	b003      	add	sp, #12
    1634:	f85d fb04 	ldr.w	pc, [sp], #4

00001638 <set_le_scan_enable>:
{
    1638:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    163a:	2102      	movs	r1, #2
{
    163c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    163e:	f242 000c 	movw	r0, #8204	; 0x200c
    1642:	f7ff ff4b 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    1646:	4604      	mov	r4, r0
    1648:	b320      	cbz	r0, 1694 <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    164a:	2102      	movs	r1, #2
    164c:	3008      	adds	r0, #8
    164e:	f008 feb5 	bl	a3bc <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1652:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    1654:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1656:	d114      	bne.n	1682 <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    1658:	200a      	movs	r0, #10
    165a:	f7ff ff2d 	bl	14b8 <atomic_test_bit.constprop.25>
    165e:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    1660:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    1662:	2200      	movs	r2, #0
    1664:	4621      	mov	r1, r4
    1666:	f242 000c 	movw	r0, #8204	; 0x200c
    166a:	f7ff ff67 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    166e:	4604      	mov	r4, r0
    1670:	b928      	cbnz	r0, 167e <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    1672:	2d01      	cmp	r5, #1
    1674:	d108      	bne.n	1688 <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1676:	2180      	movs	r1, #128	; 0x80
    1678:	4808      	ldr	r0, [pc, #32]	; (169c <set_le_scan_enable+0x64>)
    167a:	f7ff fed3 	bl	1424 <atomic_or>
}
    167e:	4620      	mov	r0, r4
    1680:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1682:	2300      	movs	r3, #0
    1684:	7043      	strb	r3, [r0, #1]
    1686:	e7eb      	b.n	1660 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1688:	f06f 0180 	mvn.w	r1, #128	; 0x80
    168c:	4803      	ldr	r0, [pc, #12]	; (169c <set_le_scan_enable+0x64>)
    168e:	f7ff feda 	bl	1446 <atomic_and>
    1692:	e7f4      	b.n	167e <set_le_scan_enable+0x46>
		return -ENOBUFS;
    1694:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1698:	e7f1      	b.n	167e <set_le_scan_enable+0x46>
    169a:	bf00      	nop
    169c:	20005e50 	.word	0x20005e50

000016a0 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    16a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    16a4:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    16a6:	2120      	movs	r1, #32
{
    16a8:	4607      	mov	r7, r0
    16aa:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    16ac:	f7ff ff16 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    16b0:	4606      	mov	r6, r0
    16b2:	2800      	cmp	r0, #0
    16b4:	d03c      	beq.n	1730 <set_ad+0x90>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    16b6:	2120      	movs	r1, #32
    16b8:	3008      	adds	r0, #8
    16ba:	f008 fe7f 	bl	a3bc <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    16be:	2220      	movs	r2, #32
    16c0:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    16c2:	4605      	mov	r5, r0
	memset(set_data, 0, sizeof(*set_data));
    16c4:	f7fe ffb0 	bl	628 <memset>

	for (i = 0; i < ad_len; i++) {
    16c8:	f04f 0900 	mov.w	r9, #0
    16cc:	45c1      	cmp	r9, r8
    16ce:	d106      	bne.n	16de <set_ad+0x3e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    16d0:	4631      	mov	r1, r6
    16d2:	4638      	mov	r0, r7
    16d4:	2200      	movs	r2, #0
}
    16d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    16da:	f7ff bf2f 	b.w	153c <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 31) {
    16de:	7862      	ldrb	r2, [r4, #1]
    16e0:	782b      	ldrb	r3, [r5, #0]
    16e2:	18d1      	adds	r1, r2, r3
    16e4:	3102      	adds	r1, #2
    16e6:	291f      	cmp	r1, #31
    16e8:	f104 0408 	add.w	r4, r4, #8
    16ec:	dd06      	ble.n	16fc <set_ad+0x5c>
			net_buf_unref(buf);
    16ee:	4630      	mov	r0, r6
    16f0:	f008 fe32 	bl	a358 <net_buf_unref>
			return -EINVAL;
    16f4:	f06f 0015 	mvn.w	r0, #21
    16f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    16fc:	18e9      	adds	r1, r5, r3
    16fe:	1c50      	adds	r0, r2, #1
    1700:	7048      	strb	r0, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    1702:	1c98      	adds	r0, r3, #2
    1704:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1706:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    1708:	7028      	strb	r0, [r5, #0]
    170a:	fa55 f383 	uxtab	r3, r5, r3
    170e:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    1712:	7059      	strb	r1, [r3, #1]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    1714:	3001      	adds	r0, #1
    1716:	f854 1c04 	ldr.w	r1, [r4, #-4]
    171a:	4428      	add	r0, r5
    171c:	f7fe ff58 	bl	5d0 <memcpy>
		set_data->len += ad[i].data_len;
    1720:	782b      	ldrb	r3, [r5, #0]
    1722:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    1726:	4413      	add	r3, r2
    1728:	702b      	strb	r3, [r5, #0]
	for (i = 0; i < ad_len; i++) {
    172a:	f109 0901 	add.w	r9, r9, #1
    172e:	e7cd      	b.n	16cc <set_ad+0x2c>
		return -ENOBUFS;
    1730:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    1734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00001738 <bt_le_scan_update>:
{
    1738:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    173a:	2008      	movs	r0, #8
    173c:	f7ff febc 	bl	14b8 <atomic_test_bit.constprop.25>
    1740:	4601      	mov	r1, r0
    1742:	b940      	cbnz	r0, 1756 <bt_le_scan_update+0x1e>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1744:	2007      	movs	r0, #7
    1746:	f7ff feb7 	bl	14b8 <atomic_test_bit.constprop.25>
    174a:	b120      	cbz	r0, 1756 <bt_le_scan_update+0x1e>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    174c:	4608      	mov	r0, r1
}
    174e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    1752:	f7ff bf71 	b.w	1638 <set_le_scan_enable>
}
    1756:	2000      	movs	r0, #0
    1758:	bd08      	pop	{r3, pc}

0000175a <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
    175a:	2301      	movs	r3, #1
{
    175c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    175e:	2106      	movs	r1, #6
{
    1760:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    1762:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    1766:	f001 fe39 	bl	33dc <bt_rand>
	if (err) {
    176a:	b918      	cbnz	r0, 1774 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
    176c:	79a3      	ldrb	r3, [r4, #6]
    176e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    1772:	71a3      	strb	r3, [r4, #6]
}
    1774:	bd10      	pop	{r4, pc}
	...

00001778 <hci_init>:
{
    1778:	b5f0      	push	{r4, r5, r6, r7, lr}
    177a:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    177c:	aa04      	add	r2, sp, #16
    177e:	2100      	movs	r1, #0
    1780:	f640 4003 	movw	r0, #3075	; 0xc03
    1784:	f7ff feda 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    1788:	4604      	mov	r4, r0
    178a:	2800      	cmp	r0, #0
    178c:	f040 8149 	bne.w	1a22 <hci_init+0x2aa>
	u8_t status = buf->data[0];
    1790:	9b04      	ldr	r3, [sp, #16]
    1792:	689b      	ldr	r3, [r3, #8]
	if (status) {
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	b96b      	cbnz	r3, 17b4 <hci_init+0x3c>
	scan_dev_found_cb = NULL;
    1798:	4ab6      	ldr	r2, [pc, #728]	; (1a74 <hci_init+0x2fc>)
    179a:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    179c:	4bb6      	ldr	r3, [pc, #728]	; (1a78 <hci_init+0x300>)
    179e:	f3bf 8f5b 	dmb	ish
    17a2:	2201      	movs	r2, #1
    17a4:	e853 1f00 	ldrex	r1, [r3]
    17a8:	e843 2000 	strex	r0, r2, [r3]
    17ac:	2800      	cmp	r0, #0
    17ae:	d1f9      	bne.n	17a4 <hci_init+0x2c>
    17b0:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    17b4:	9804      	ldr	r0, [sp, #16]
    17b6:	f008 fdcf 	bl	a358 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    17ba:	aa04      	add	r2, sp, #16
    17bc:	2100      	movs	r1, #0
    17be:	f241 0003 	movw	r0, #4099	; 0x1003
    17c2:	f7ff febb 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    17c6:	4604      	mov	r4, r0
    17c8:	2800      	cmp	r0, #0
    17ca:	f040 812a 	bne.w	1a22 <hci_init+0x2aa>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    17ce:	9b04      	ldr	r3, [sp, #16]
    17d0:	4daa      	ldr	r5, [pc, #680]	; (1a7c <hci_init+0x304>)
    17d2:	6899      	ldr	r1, [r3, #8]
    17d4:	2208      	movs	r2, #8
    17d6:	3101      	adds	r1, #1
    17d8:	f105 0016 	add.w	r0, r5, #22
    17dc:	f7fe fef8 	bl	5d0 <memcpy>
	net_buf_unref(rsp);
    17e0:	9804      	ldr	r0, [sp, #16]
    17e2:	f008 fdb9 	bl	a358 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    17e6:	4621      	mov	r1, r4
    17e8:	aa04      	add	r2, sp, #16
    17ea:	f241 0001 	movw	r0, #4097	; 0x1001
    17ee:	f7ff fea5 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    17f2:	4604      	mov	r4, r0
    17f4:	2800      	cmp	r0, #0
    17f6:	f040 8114 	bne.w	1a22 <hci_init+0x2aa>
	read_local_ver_complete(rsp);
    17fa:	9804      	ldr	r0, [sp, #16]
    17fc:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    17fe:	785a      	ldrb	r2, [r3, #1]
    1800:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1802:	78d9      	ldrb	r1, [r3, #3]
    1804:	789a      	ldrb	r2, [r3, #2]
    1806:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    180a:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    180c:	791a      	ldrb	r2, [r3, #4]
    180e:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    1810:	7a19      	ldrb	r1, [r3, #8]
    1812:	79da      	ldrb	r2, [r3, #7]
    1814:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1818:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    181a:	795a      	ldrb	r2, [r3, #5]
    181c:	799b      	ldrb	r3, [r3, #6]
    181e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    1822:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    1824:	f008 fd98 	bl	a358 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    1828:	4621      	mov	r1, r4
    182a:	aa04      	add	r2, sp, #16
    182c:	f241 0009 	movw	r0, #4105	; 0x1009
    1830:	f7ff fe84 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    1834:	4604      	mov	r4, r0
    1836:	2800      	cmp	r0, #0
    1838:	f040 80f3 	bne.w	1a22 <hci_init+0x2aa>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    183c:	9b04      	ldr	r3, [sp, #16]
    183e:	6899      	ldr	r1, [r3, #8]
    1840:	2206      	movs	r2, #6
    1842:	3101      	adds	r1, #1
    1844:	1c68      	adds	r0, r5, #1
    1846:	f7fe fec3 	bl	5d0 <memcpy>
	net_buf_unref(rsp);
    184a:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    184c:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    184e:	f008 fd83 	bl	a358 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    1852:	4621      	mov	r1, r4
    1854:	aa04      	add	r2, sp, #16
    1856:	f241 0002 	movw	r0, #4098	; 0x1002
    185a:	f7ff fe6f 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    185e:	4604      	mov	r4, r0
    1860:	2800      	cmp	r0, #0
    1862:	f040 80de 	bne.w	1a22 <hci_init+0x2aa>
	memcpy(bt_dev.supported_commands, rp->commands,
    1866:	9b04      	ldr	r3, [sp, #16]
    1868:	6899      	ldr	r1, [r3, #8]
    186a:	2240      	movs	r2, #64	; 0x40
    186c:	3101      	adds	r1, #1
    186e:	f105 001e 	add.w	r0, r5, #30
    1872:	f7fe fead 	bl	5d0 <memcpy>
	net_buf_unref(rsp);
    1876:	9804      	ldr	r0, [sp, #16]
    1878:	f008 fd6e 	bl	a358 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    187c:	7eab      	ldrb	r3, [r5, #26]
    187e:	0658      	lsls	r0, r3, #25
    1880:	f140 813f 	bpl.w	1b02 <hci_init+0x38a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    1884:	4621      	mov	r1, r4
    1886:	aa04      	add	r2, sp, #16
    1888:	f242 0003 	movw	r0, #8195	; 0x2003
    188c:	f7ff fe56 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    1890:	4604      	mov	r4, r0
    1892:	2800      	cmp	r0, #0
    1894:	f040 80c5 	bne.w	1a22 <hci_init+0x2aa>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    1898:	9b04      	ldr	r3, [sp, #16]
    189a:	6899      	ldr	r1, [r3, #8]
    189c:	2208      	movs	r2, #8
    189e:	3101      	adds	r1, #1
    18a0:	f105 0078 	add.w	r0, r5, #120	; 0x78
    18a4:	f7fe fe94 	bl	5d0 <memcpy>
	net_buf_unref(rsp);
    18a8:	9804      	ldr	r0, [sp, #16]
    18aa:	f008 fd55 	bl	a358 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    18ae:	7eab      	ldrb	r3, [r5, #26]
    18b0:	0699      	lsls	r1, r3, #26
    18b2:	f140 809b 	bpl.w	19ec <hci_init+0x274>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    18b6:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    18ba:	071a      	lsls	r2, r3, #28
    18bc:	f100 80b4 	bmi.w	1a28 <hci_init+0x2b0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    18c0:	2108      	movs	r1, #8
    18c2:	f242 0001 	movw	r0, #8193	; 0x2001
    18c6:	f7ff fe09 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    18ca:	4604      	mov	r4, r0
    18cc:	2800      	cmp	r0, #0
    18ce:	f000 8094 	beq.w	19fa <hci_init+0x282>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    18d2:	2108      	movs	r1, #8
    18d4:	4408      	add	r0, r1
    18d6:	f008 fd71 	bl	a3bc <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    18da:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    18de:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    18e2:	2b06      	cmp	r3, #6
    18e4:	bf14      	ite	ne
    18e6:	2302      	movne	r3, #2
    18e8:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    18ec:	2200      	movs	r2, #0
    18ee:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    18f0:	0a1b      	lsrs	r3, r3, #8
    18f2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    18f4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    18f6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    18f8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    18fa:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    18fc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    18fe:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    1900:	4621      	mov	r1, r4
    1902:	f242 0001 	movw	r0, #8193	; 0x2001
    1906:	f7ff fe19 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    190a:	4604      	mov	r4, r0
    190c:	2800      	cmp	r0, #0
    190e:	f040 8088 	bne.w	1a22 <hci_init+0x2aa>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1912:	2108      	movs	r1, #8
    1914:	f640 4001 	movw	r0, #3073	; 0xc01
    1918:	f7ff fde0 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    191c:	4606      	mov	r6, r0
    191e:	2800      	cmp	r0, #0
    1920:	d06b      	beq.n	19fa <hci_init+0x282>
	ev = net_buf_add(buf, sizeof(*ev));
    1922:	2108      	movs	r1, #8
    1924:	4408      	add	r0, r1
    1926:	f008 fd49 	bl	a3bc <net_buf_simple_add>
    192a:	2380      	movs	r3, #128	; 0x80
    192c:	7043      	strb	r3, [r0, #1]
    192e:	2702      	movs	r7, #2
    1930:	2320      	movs	r3, #32
	dst[0] = val;
    1932:	7004      	strb	r4, [r0, #0]
    1934:	7084      	strb	r4, [r0, #2]
    1936:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    1938:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    193a:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    193c:	70c7      	strb	r7, [r0, #3]
    193e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    1940:	4622      	mov	r2, r4
    1942:	4631      	mov	r1, r6
    1944:	f640 4001 	movw	r0, #3073	; 0xc01
    1948:	f7ff fdf8 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    194c:	4604      	mov	r4, r0
    194e:	2800      	cmp	r0, #0
    1950:	d167      	bne.n	1a22 <hci_init+0x2aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1952:	4601      	mov	r1, r0
    1954:	aa04      	add	r2, sp, #16
    1956:	f64f 4001 	movw	r0, #64513	; 0xfc01
    195a:	f7ff fdef 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    195e:	bb20      	cbnz	r0, 19aa <hci_init+0x232>
	net_buf_unref(rsp);
    1960:	9804      	ldr	r0, [sp, #16]
    1962:	f008 fcf9 	bl	a358 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    1966:	aa04      	add	r2, sp, #16
    1968:	4621      	mov	r1, r4
    196a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    196e:	f7ff fde5 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    1972:	b9d0      	cbnz	r0, 19aa <hci_init+0x232>
	rp.cmds = (void *)rsp->data;
    1974:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    1976:	4842      	ldr	r0, [pc, #264]	; (1a80 <hci_init+0x308>)
    1978:	6899      	ldr	r1, [r3, #8]
    197a:	463a      	mov	r2, r7
    197c:	3101      	adds	r1, #1
    197e:	f7fe fe27 	bl	5d0 <memcpy>
	net_buf_unref(rsp);
    1982:	9804      	ldr	r0, [sp, #16]
    1984:	f008 fce8 	bl	a358 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    1988:	aa04      	add	r2, sp, #16
    198a:	4621      	mov	r1, r4
    198c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    1990:	f7ff fdd4 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    1994:	b948      	cbnz	r0, 19aa <hci_init+0x232>
	rp.feat = (void *)rsp->data;
    1996:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    1998:	483a      	ldr	r0, [pc, #232]	; (1a84 <hci_init+0x30c>)
    199a:	6899      	ldr	r1, [r3, #8]
    199c:	2201      	movs	r2, #1
    199e:	4411      	add	r1, r2
    19a0:	f7fe fe16 	bl	5d0 <memcpy>
	net_buf_unref(rsp);
    19a4:	9804      	ldr	r0, [sp, #16]
    19a6:	f008 fcd7 	bl	a358 <net_buf_unref>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    19aa:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    19ac:	2207      	movs	r2, #7
    19ae:	a902      	add	r1, sp, #8
    19b0:	4832      	ldr	r0, [pc, #200]	; (1a7c <hci_init+0x304>)
    19b2:	9302      	str	r3, [sp, #8]
    19b4:	f8cd 300b 	str.w	r3, [sp, #11]
    19b8:	f7fe fdf5 	bl	5a6 <memcmp>
    19bc:	2800      	cmp	r0, #0
    19be:	d148      	bne.n	1a52 <hci_init+0x2da>
	if (bt_storage) {
    19c0:	4e31      	ldr	r6, [pc, #196]	; (1a88 <hci_init+0x310>)
    19c2:	6833      	ldr	r3, [r6, #0]
    19c4:	2b00      	cmp	r3, #0
    19c6:	d163      	bne.n	1a90 <hci_init+0x318>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    19c8:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    19cc:	07db      	lsls	r3, r3, #31
    19ce:	d47a      	bmi.n	1ac6 <hci_init+0x34e>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    19d0:	482a      	ldr	r0, [pc, #168]	; (1a7c <hci_init+0x304>)
    19d2:	f7ff fec2 	bl	175a <bt_addr_le_create_static>
	if (err) {
    19d6:	4604      	mov	r4, r0
    19d8:	bb18      	cbnz	r0, 1a22 <hci_init+0x2aa>
	if (bt_storage) {
    19da:	6833      	ldr	r3, [r6, #0]
    19dc:	2b00      	cmp	r3, #0
    19de:	d05f      	beq.n	1aa0 <hci_init+0x328>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    19e0:	685e      	ldr	r6, [r3, #4]
    19e2:	4a26      	ldr	r2, [pc, #152]	; (1a7c <hci_init+0x304>)
    19e4:	2307      	movs	r3, #7
    19e6:	4601      	mov	r1, r0
    19e8:	47b0      	blx	r6
    19ea:	e059      	b.n	1aa0 <hci_init+0x328>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    19ec:	2102      	movs	r1, #2
    19ee:	f640 406d 	movw	r0, #3181	; 0xc6d
    19f2:	f7ff fd73 	bl	14dc <bt_hci_cmd_create>
		if (!buf) {
    19f6:	4606      	mov	r6, r0
    19f8:	b910      	cbnz	r0, 1a00 <hci_init+0x288>
		return -ENOBUFS;
    19fa:	f06f 0436 	mvn.w	r4, #54	; 0x36
    19fe:	e010      	b.n	1a22 <hci_init+0x2aa>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    1a00:	2102      	movs	r1, #2
    1a02:	3008      	adds	r0, #8
    1a04:	f008 fcda 	bl	a3bc <net_buf_simple_add>
		cp_le->le = 0x01;
    1a08:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    1a0a:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    1a0c:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    1a0e:	4622      	mov	r2, r4
    1a10:	4631      	mov	r1, r6
    1a12:	f640 406d 	movw	r0, #3181	; 0xc6d
    1a16:	f7ff fd91 	bl	153c <bt_hci_cmd_send_sync>
		if (err) {
    1a1a:	4604      	mov	r4, r0
    1a1c:	2800      	cmp	r0, #0
    1a1e:	f43f af4a 	beq.w	18b6 <hci_init+0x13e>
}
    1a22:	4620      	mov	r0, r4
    1a24:	b007      	add	sp, #28
    1a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1a28:	aa04      	add	r2, sp, #16
    1a2a:	2100      	movs	r1, #0
    1a2c:	f242 001c 	movw	r0, #8220	; 0x201c
    1a30:	f7ff fd84 	bl	153c <bt_hci_cmd_send_sync>
		if (err) {
    1a34:	4604      	mov	r4, r0
    1a36:	2800      	cmp	r0, #0
    1a38:	d1f3      	bne.n	1a22 <hci_init+0x2aa>
		le_read_supp_states_complete(rsp);
    1a3a:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1a3c:	6883      	ldr	r3, [r0, #8]
    1a3e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    1a42:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    1a44:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    1a48:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    1a4c:	f008 fc84 	bl	a358 <net_buf_unref>
    1a50:	e736      	b.n	18c0 <hci_init+0x148>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    1a52:	4b0e      	ldr	r3, [pc, #56]	; (1a8c <hci_init+0x314>)
    1a54:	6818      	ldr	r0, [r3, #0]
    1a56:	889a      	ldrh	r2, [r3, #4]
    1a58:	9004      	str	r0, [sp, #16]
    1a5a:	799b      	ldrb	r3, [r3, #6]
    1a5c:	f8ad 2014 	strh.w	r2, [sp, #20]
    1a60:	a904      	add	r1, sp, #16
    1a62:	2207      	movs	r2, #7
    1a64:	4805      	ldr	r0, [pc, #20]	; (1a7c <hci_init+0x304>)
    1a66:	f88d 3016 	strb.w	r3, [sp, #22]
    1a6a:	f7fe fd9c 	bl	5a6 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    1a6e:	2800      	cmp	r0, #0
    1a70:	d0a6      	beq.n	19c0 <hci_init+0x248>
    1a72:	e7d6      	b.n	1a22 <hci_init+0x2aa>
    1a74:	200000c8 	.word	0x200000c8
    1a78:	20005e50 	.word	0x20005e50
    1a7c:	20005de0 	.word	0x20005de0
    1a80:	20005e3f 	.word	0x20005e3f
    1a84:	20005e3e 	.word	0x20005e3e
    1a88:	20002ed8 	.word	0x20002ed8
    1a8c:	0000b708 	.word	0x0000b708
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    1a90:	2100      	movs	r1, #0
    1a92:	681c      	ldr	r4, [r3, #0]
    1a94:	4a1c      	ldr	r2, [pc, #112]	; (1b08 <hci_init+0x390>)
    1a96:	2307      	movs	r3, #7
    1a98:	4608      	mov	r0, r1
    1a9a:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    1a9c:	2807      	cmp	r0, #7
    1a9e:	d193      	bne.n	19c8 <hci_init+0x250>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    1aa0:	782b      	ldrb	r3, [r5, #0]
    1aa2:	2b01      	cmp	r3, #1
    1aa4:	d12a      	bne.n	1afc <hci_init+0x384>
    1aa6:	79ab      	ldrb	r3, [r5, #6]
    1aa8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    1aac:	2bc0      	cmp	r3, #192	; 0xc0
    1aae:	d125      	bne.n	1afc <hci_init+0x384>
	err = set_random_address(&bt_dev.id_addr.a);
    1ab0:	4816      	ldr	r0, [pc, #88]	; (1b0c <hci_init+0x394>)
    1ab2:	f7ff fd81 	bl	15b8 <set_random_address>
	if (err) {
    1ab6:	4604      	mov	r4, r0
    1ab8:	2800      	cmp	r0, #0
    1aba:	d1b2      	bne.n	1a22 <hci_init+0x2aa>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1abc:	2104      	movs	r1, #4
    1abe:	4814      	ldr	r0, [pc, #80]	; (1b10 <hci_init+0x398>)
    1ac0:	f7ff fcb0 	bl	1424 <atomic_or>
    1ac4:	e7ad      	b.n	1a22 <hci_init+0x2aa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    1ac6:	aa01      	add	r2, sp, #4
    1ac8:	2100      	movs	r1, #0
    1aca:	f64f 4009 	movw	r0, #64521	; 0xfc09
    1ace:	f7ff fd35 	bl	153c <bt_hci_cmd_send_sync>
		if (err) {
    1ad2:	2800      	cmp	r0, #0
    1ad4:	f47f af7c 	bne.w	19d0 <hci_init+0x258>
		rp = (void *)rsp->data;
    1ad8:	9801      	ldr	r0, [sp, #4]
    1ada:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    1adc:	784b      	ldrb	r3, [r1, #1]
    1ade:	b153      	cbz	r3, 1af6 <hci_init+0x37e>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    1ae0:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    1ae2:	2206      	movs	r2, #6
    1ae4:	3102      	adds	r1, #2
    1ae6:	4809      	ldr	r0, [pc, #36]	; (1b0c <hci_init+0x394>)
    1ae8:	702b      	strb	r3, [r5, #0]
    1aea:	f7fe fd71 	bl	5d0 <memcpy>
			net_buf_unref(rsp);
    1aee:	9801      	ldr	r0, [sp, #4]
    1af0:	f008 fc32 	bl	a358 <net_buf_unref>
    1af4:	e7d4      	b.n	1aa0 <hci_init+0x328>
		net_buf_unref(rsp);
    1af6:	f008 fc2f 	bl	a358 <net_buf_unref>
    1afa:	e769      	b.n	19d0 <hci_init+0x258>
		return -EINVAL;
    1afc:	f06f 0415 	mvn.w	r4, #21
    1b00:	e78f      	b.n	1a22 <hci_init+0x2aa>
		return -ENODEV;
    1b02:	f06f 0412 	mvn.w	r4, #18
    1b06:	e78c      	b.n	1a22 <hci_init+0x2aa>
    1b08:	20005de0 	.word	0x20005de0
    1b0c:	20005de1 	.word	0x20005de1
    1b10:	20005e50 	.word	0x20005e50

00001b14 <init_work>:
{
    1b14:	b510      	push	{r4, lr}
	err = hci_init();
    1b16:	f7ff fe2f 	bl	1778 <hci_init>
	if (err) {
    1b1a:	4604      	mov	r4, r0
    1b1c:	b930      	cbnz	r0, 1b2c <init_work+0x18>
    1b1e:	2102      	movs	r1, #2
    1b20:	4806      	ldr	r0, [pc, #24]	; (1b3c <init_work+0x28>)
    1b22:	f7ff fc7f 	bl	1424 <atomic_or>
	bt_le_scan_update(false);
    1b26:	4620      	mov	r0, r4
    1b28:	f7ff fe06 	bl	1738 <bt_le_scan_update>
	if (ready_cb) {
    1b2c:	4b04      	ldr	r3, [pc, #16]	; (1b40 <init_work+0x2c>)
    1b2e:	681b      	ldr	r3, [r3, #0]
    1b30:	b11b      	cbz	r3, 1b3a <init_work+0x26>
		ready_cb(err);
    1b32:	4620      	mov	r0, r4
}
    1b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    1b38:	4718      	bx	r3
    1b3a:	bd10      	pop	{r4, pc}
    1b3c:	20005e50 	.word	0x20005e50
    1b40:	200000c4 	.word	0x200000c4

00001b44 <bt_send>:
	return bt_dev.drv->send(buf);
    1b44:	4b02      	ldr	r3, [pc, #8]	; (1b50 <bt_send+0xc>)
    1b46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    1b4a:	68db      	ldr	r3, [r3, #12]
    1b4c:	4718      	bx	r3
    1b4e:	bf00      	nop
    1b50:	20005de0 	.word	0x20005de0

00001b54 <hci_tx_thread>:
{
    1b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    1b58:	4c26      	ldr	r4, [pc, #152]	; (1bf4 <hci_tx_thread+0xa0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    1b5a:	4e27      	ldr	r6, [pc, #156]	; (1bf8 <hci_tx_thread+0xa4>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    1b5c:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
		events[0].state = K_POLL_STATE_NOT_READY;
    1b60:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    1b62:	4825      	ldr	r0, [pc, #148]	; (1bf8 <hci_tx_thread+0xa4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    1b64:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(events, ev_count, K_FOREVER);
    1b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1b6c:	2101      	movs	r1, #1
		events[0].state = K_POLL_STATE_NOT_READY;
    1b6e:	7373      	strb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    1b70:	f009 fcd8 	bl	b524 <k_poll>
		BT_ASSERT(err == 0);
    1b74:	bbc0      	cbnz	r0, 1be8 <hci_tx_thread+0x94>
		switch (ev->state) {
    1b76:	7b73      	ldrb	r3, [r6, #13]
    1b78:	091b      	lsrs	r3, r3, #4
    1b7a:	2b04      	cmp	r3, #4
    1b7c:	d12c      	bne.n	1bd8 <hci_tx_thread+0x84>
			if (ev->tag == BT_EVENT_CMD_TX) {
    1b7e:	7b37      	ldrb	r7, [r6, #12]
    1b80:	bb57      	cbnz	r7, 1bd8 <hci_tx_thread+0x84>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    1b82:	4639      	mov	r1, r7
    1b84:	4640      	mov	r0, r8
    1b86:	f008 fbbd 	bl	a304 <net_buf_get>
	BT_ASSERT(buf);
    1b8a:	4605      	mov	r5, r0
    1b8c:	b360      	cbz	r0, 1be8 <hci_tx_thread+0x94>
    1b8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1b92:	481a      	ldr	r0, [pc, #104]	; (1bfc <hci_tx_thread+0xa8>)
    1b94:	f009 f8e0 	bl	ad58 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    1b98:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    1b9c:	b9f8      	cbnz	r0, 1bde <hci_tx_thread+0x8a>
	bt_dev.sent_cmd = net_buf_ref(buf);
    1b9e:	4628      	mov	r0, r5
    1ba0:	f008 fc08 	bl	a3b4 <net_buf_ref>
    1ba4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	err = bt_send(buf);
    1ba8:	4628      	mov	r0, r5
    1baa:	f7ff ffcb 	bl	1b44 <bt_send>
	if (err) {
    1bae:	b198      	cbz	r0, 1bd8 <hci_tx_thread+0x84>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1bb0:	4812      	ldr	r0, [pc, #72]	; (1bfc <hci_tx_thread+0xa8>)
    1bb2:	f009 f871 	bl	ac98 <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    1bb6:	4628      	mov	r0, r5
    1bb8:	f008 fb10 	bl	a1dc <net_buf_id>
    1bbc:	2100      	movs	r1, #0
    1bbe:	201f      	movs	r0, #31
    1bc0:	f7ff fc52 	bl	1468 <hci_cmd_done.isra.9>
		net_buf_unref(bt_dev.sent_cmd);
    1bc4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    1bc8:	f008 fbc6 	bl	a358 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    1bcc:	2300      	movs	r3, #0
		net_buf_unref(buf);
    1bce:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    1bd0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    1bd4:	f008 fbc0 	bl	a358 <net_buf_unref>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    1bd8:	f008 ffba 	bl	ab50 <_impl_k_yield>
    1bdc:	e7c0      	b.n	1b60 <hci_tx_thread+0xc>
		net_buf_unref(bt_dev.sent_cmd);
    1bde:	f008 fbbb 	bl	a358 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    1be2:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    1be6:	e7da      	b.n	1b9e <hci_tx_thread+0x4a>
	BT_ASSERT(buf);
    1be8:	4040      	eors	r0, r0
    1bea:	f380 8811 	msr	BASEPRI, r0
    1bee:	f04f 0004 	mov.w	r0, #4
    1bf2:	df02      	svc	2
    1bf4:	20005de0 	.word	0x20005de0
    1bf8:	20005ea8 	.word	0x20005ea8
    1bfc:	20005e68 	.word	0x20005e68

00001c00 <bt_recv>:
{
    1c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    1c04:	7d06      	ldrb	r6, [r0, #20]
    1c06:	2e01      	cmp	r6, #1
{
    1c08:	b087      	sub	sp, #28
    1c0a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    1c0c:	f040 8105 	bne.w	1e1a <bt_recv+0x21a>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    1c10:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    1c12:	783b      	ldrb	r3, [r7, #0]
    1c14:	3b0e      	subs	r3, #14
    1c16:	2b01      	cmp	r3, #1
    1c18:	f200 8104 	bhi.w	1e24 <bt_recv+0x224>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    1c1c:	4040      	eors	r0, r0
    1c1e:	f380 8811 	msr	BASEPRI, r0
    1c22:	f04f 0004 	mov.w	r0, #4
    1c26:	df02      	svc	2
    1c28:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1c2a:	4896      	ldr	r0, [pc, #600]	; (1e84 <bt_recv+0x284>)
    1c2c:	f06f 0110 	mvn.w	r1, #16
    1c30:	f7ff fc09 	bl	1446 <atomic_and>
	if (!evt->status) {
    1c34:	7833      	ldrb	r3, [r6, #0]
    1c36:	b943      	cbnz	r3, 1c4a <bt_recv+0x4a>
		memcpy(pub_key, evt->key, 64);
    1c38:	1c71      	adds	r1, r6, #1
    1c3a:	2240      	movs	r2, #64	; 0x40
    1c3c:	4892      	ldr	r0, [pc, #584]	; (1e88 <bt_recv+0x288>)
    1c3e:	f7fe fcc7 	bl	5d0 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1c42:	2108      	movs	r1, #8
    1c44:	488f      	ldr	r0, [pc, #572]	; (1e84 <bt_recv+0x284>)
    1c46:	f7ff fbed 	bl	1424 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    1c4a:	4b90      	ldr	r3, [pc, #576]	; (1e8c <bt_recv+0x28c>)
    1c4c:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    1c4e:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    1c50:	b935      	cbnz	r5, 1c60 <bt_recv+0x60>
	net_buf_unref(buf);
    1c52:	4620      	mov	r0, r4
    1c54:	f008 fb80 	bl	a358 <net_buf_unref>
		return 0;
    1c58:	2000      	movs	r0, #0
}
    1c5a:	b007      	add	sp, #28
    1c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    1c60:	7832      	ldrb	r2, [r6, #0]
    1c62:	682b      	ldr	r3, [r5, #0]
    1c64:	2a00      	cmp	r2, #0
    1c66:	bf0c      	ite	eq
    1c68:	4638      	moveq	r0, r7
    1c6a:	2000      	movne	r0, #0
    1c6c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    1c6e:	686d      	ldr	r5, [r5, #4]
    1c70:	e7ee      	b.n	1c50 <bt_recv+0x50>
	if (dh_key_cb) {
    1c72:	4d87      	ldr	r5, [pc, #540]	; (1e90 <bt_recv+0x290>)
    1c74:	68a0      	ldr	r0, [r4, #8]
    1c76:	682a      	ldr	r2, [r5, #0]
    1c78:	2a00      	cmp	r2, #0
    1c7a:	d0ea      	beq.n	1c52 <bt_recv+0x52>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    1c7c:	7803      	ldrb	r3, [r0, #0]
    1c7e:	b923      	cbnz	r3, 1c8a <bt_recv+0x8a>
    1c80:	3001      	adds	r0, #1
    1c82:	4790      	blx	r2
		dh_key_cb = NULL;
    1c84:	2300      	movs	r3, #0
    1c86:	602b      	str	r3, [r5, #0]
    1c88:	e7e3      	b.n	1c52 <bt_recv+0x52>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    1c8a:	2000      	movs	r0, #0
    1c8c:	e7f9      	b.n	1c82 <bt_recv+0x82>
	u8_t num_reports = net_buf_pull_u8(buf);
    1c8e:	4628      	mov	r0, r5
    1c90:	f008 fbb3 	bl	a3fa <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    1c94:	f8df a210 	ldr.w	sl, [pc, #528]	; 1ea8 <bt_recv+0x2a8>
	u8_t num_reports = net_buf_pull_u8(buf);
    1c98:	9003      	str	r0, [sp, #12]
	while (num_reports--) {
    1c9a:	9b03      	ldr	r3, [sp, #12]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d0d8      	beq.n	1c52 <bt_recv+0x52>
		info = (void *)buf->data;
    1ca0:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    1ca2:	2109      	movs	r1, #9
    1ca4:	4628      	mov	r0, r5
    1ca6:	f008 fba0 	bl	a3ea <net_buf_simple_pull>
		rssi = info->data[info->length];
    1caa:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    1cac:	4631      	mov	r1, r6
		rssi = info->data[info->length];
    1cae:	4433      	add	r3, r6
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1cb0:	2207      	movs	r2, #7
    1cb2:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    1cb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    1cba:	3b02      	subs	r3, #2
    1cbc:	2b01      	cmp	r3, #1
    1cbe:	a804      	add	r0, sp, #16
    1cc0:	d82c      	bhi.n	1d1c <bt_recv+0x11c>
    1cc2:	f7fe fc85 	bl	5d0 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    1cc6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1cca:	3b02      	subs	r3, #2
    1ccc:	f88d 3010 	strb.w	r3, [sp, #16]
		if (scan_dev_found_cb) {
    1cd0:	f8da 3000 	ldr.w	r3, [sl]
    1cd4:	b1b3      	cbz	r3, 1d04 <bt_recv+0x104>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    1cd6:	4628      	mov	r0, r5
    1cd8:	f008 fb97 	bl	a40a <net_buf_simple_headroom>
			buf->len = info->length;
    1cdc:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    1cde:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    1ce2:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    1ce4:	7832      	ldrb	r2, [r6, #0]
    1ce6:	9400      	str	r4, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    1ce8:	4681      	mov	r9, r0
    1cea:	462b      	mov	r3, r5
    1cec:	fa4f f18b 	sxtb.w	r1, fp
    1cf0:	a804      	add	r0, sp, #16
    1cf2:	f8da 7000 	ldr.w	r7, [sl]
    1cf6:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    1cf8:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    1cfa:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    1cfe:	fa13 f389 	uxtah	r3, r3, r9
    1d02:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    1d04:	7a31      	ldrb	r1, [r6, #8]
    1d06:	4628      	mov	r0, r5
    1d08:	3101      	adds	r1, #1
    1d0a:	f008 fb6e 	bl	a3ea <net_buf_simple_pull>
    1d0e:	9b03      	ldr	r3, [sp, #12]
    1d10:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1d14:	fa5f f388 	uxtb.w	r3, r8
    1d18:	9303      	str	r3, [sp, #12]
    1d1a:	e7be      	b.n	1c9a <bt_recv+0x9a>
    1d1c:	f7fe fc58 	bl	5d0 <memcpy>
    1d20:	e7d6      	b.n	1cd0 <bt_recv+0xd0>
	num_reports = net_buf_pull_u8(buf);
    1d22:	4628      	mov	r0, r5
    1d24:	f008 fb69 	bl	a3fa <net_buf_simple_pull_u8>
    1d28:	4b5a      	ldr	r3, [pc, #360]	; (1e94 <bt_recv+0x294>)
		if (scan_dev_found_cb) {
    1d2a:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1ea8 <bt_recv+0x2a8>
				pointer_index = 0;
    1d2e:	4e5a      	ldr	r6, [pc, #360]	; (1e98 <bt_recv+0x298>)
				memset(copied_data, 0, 1500);
    1d30:	f8df a170 	ldr.w	sl, [pc, #368]	; 1ea4 <bt_recv+0x2a4>
	num_reports = net_buf_pull_u8(buf);
    1d34:	7018      	strb	r0, [r3, #0]
    1d36:	469b      	mov	fp, r3
	while (num_reports--) {
    1d38:	f89b 3000 	ldrb.w	r3, [fp]
    1d3c:	1e5a      	subs	r2, r3, #1
    1d3e:	f88b 2000 	strb.w	r2, [fp]
    1d42:	2b00      	cmp	r3, #0
    1d44:	d085      	beq.n	1c52 <bt_recv+0x52>
		info = (void *)buf->data;
    1d46:	68a7      	ldr	r7, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    1d48:	2118      	movs	r1, #24
    1d4a:	4628      	mov	r0, r5
    1d4c:	f008 fb4d 	bl	a3ea <net_buf_simple_pull>
		net_buf_pull(buf, 2);   // remove 0x81 0xFF 
    1d50:	2102      	movs	r1, #2
    1d52:	4628      	mov	r0, r5
    1d54:	f008 fb49 	bl	a3ea <net_buf_simple_pull>
		rssi = info->data[info->length - 2];
    1d58:	7dfb      	ldrb	r3, [r7, #23]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    1d5a:	4639      	mov	r1, r7
		rssi = info->data[info->length - 2];
    1d5c:	443b      	add	r3, r7
    1d5e:	2207      	movs	r2, #7
    1d60:	f893 8016 	ldrb.w	r8, [r3, #22]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    1d64:	f811 3f02 	ldrb.w	r3, [r1, #2]!
    1d68:	3b02      	subs	r3, #2
    1d6a:	2b01      	cmp	r3, #1
    1d6c:	a804      	add	r0, sp, #16
    1d6e:	d81f      	bhi.n	1db0 <bt_recv+0x1b0>
    1d70:	f7fe fc2e 	bl	5d0 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    1d74:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1d78:	3b02      	subs	r3, #2
    1d7a:	f88d 3010 	strb.w	r3, [sp, #16]
		if (scan_dev_found_cb) {
    1d7e:	f8d9 3000 	ldr.w	r3, [r9]
		buf->len = info->length;
    1d82:	7dfa      	ldrb	r2, [r7, #23]
    1d84:	81a2      	strh	r2, [r4, #12]
		if (scan_dev_found_cb) {
    1d86:	2b00      	cmp	r3, #0
    1d88:	d0d6      	beq.n	1d38 <bt_recv+0x138>
			if(info->frag == 0x01){  //First fragment - more packets to come;
    1d8a:	787b      	ldrb	r3, [r7, #1]
    1d8c:	2b01      	cmp	r3, #1
    1d8e:	d112      	bne.n	1db6 <bt_recv+0x1b6>
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    1d90:	8830      	ldrh	r0, [r6, #0]
    1d92:	68a1      	ldr	r1, [r4, #8]
    1d94:	4450      	add	r0, sl
    1d96:	f7fe fc1b 	bl	5d0 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    1d9a:	89a2      	ldrh	r2, [r4, #12]
    1d9c:	68a1      	ldr	r1, [r4, #8]
    1d9e:	483f      	ldr	r0, [pc, #252]	; (1e9c <bt_recv+0x29c>)
    1da0:	f7fe fc16 	bl	5d0 <memcpy>
				pointer_index += (buf->b.len - 2);
    1da4:	8833      	ldrh	r3, [r6, #0]
    1da6:	89a2      	ldrh	r2, [r4, #12]
    1da8:	3b02      	subs	r3, #2
    1daa:	4413      	add	r3, r2
    1dac:	8033      	strh	r3, [r6, #0]
    1dae:	e7c3      	b.n	1d38 <bt_recv+0x138>
    1db0:	f7fe fc0e 	bl	5d0 <memcpy>
    1db4:	e7e3      	b.n	1d7e <bt_recv+0x17e>
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    1db6:	2b02      	cmp	r3, #2
		rssi = info->data[info->length - 2];
    1db8:	fa4f f888 	sxtb.w	r8, r8
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    1dbc:	d123      	bne.n	1e06 <bt_recv+0x206>
				memcpy(&copied_data[pointer_index], buf->b.data , buf->b.len);
    1dbe:	8830      	ldrh	r0, [r6, #0]
    1dc0:	68a1      	ldr	r1, [r4, #8]
    1dc2:	4450      	add	r0, sl
    1dc4:	f7fe fc04 	bl	5d0 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    1dc8:	89a2      	ldrh	r2, [r4, #12]
    1dca:	68a1      	ldr	r1, [r4, #8]
    1dcc:	4833      	ldr	r0, [pc, #204]	; (1e9c <bt_recv+0x29c>)
    1dce:	f7fe fbff 	bl	5d0 <memcpy>
				pointer_index += (buf->b.len - 2);
    1dd2:	8832      	ldrh	r2, [r6, #0]
    1dd4:	89a3      	ldrh	r3, [r4, #12]
				buffer_size1 = (buf->b.len - 2);
    1dd6:	4932      	ldr	r1, [pc, #200]	; (1ea0 <bt_recv+0x2a0>)
				pointer_index += (buf->b.len - 2);
    1dd8:	3a02      	subs	r2, #2
    1dda:	441a      	add	r2, r3
				buffer_size1 = (buf->b.len - 2);
    1ddc:	3b02      	subs	r3, #2
				pointer_index += (buf->b.len - 2);
    1dde:	b292      	uxth	r2, r2
				buffer_size1 = (buf->b.len - 2);
    1de0:	800b      	strh	r3, [r1, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    1de2:	4628      	mov	r0, r5
    1de4:	492f      	ldr	r1, [pc, #188]	; (1ea4 <bt_recv+0x2a4>)
				pointer_index += (buf->b.len - 2);
    1de6:	8032      	strh	r2, [r6, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    1de8:	f008 faee 	bl	a3c8 <net_buf_simple_add_mem>
				net_buf_pull(buf, info->length);
    1dec:	7df9      	ldrb	r1, [r7, #23]
    1dee:	4628      	mov	r0, r5
    1df0:	f008 fafb 	bl	a3ea <net_buf_simple_pull>
				scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    1df4:	783a      	ldrb	r2, [r7, #0]
    1df6:	9400      	str	r4, [sp, #0]
    1df8:	f8d9 7000 	ldr.w	r7, [r9]
    1dfc:	462b      	mov	r3, r5
    1dfe:	4641      	mov	r1, r8
    1e00:	a804      	add	r0, sp, #16
    1e02:	47b8      	blx	r7
    1e04:	e798      	b.n	1d38 <bt_recv+0x138>
			else if(info->frag == 0x03){        // packet received on primary adv channel
    1e06:	2b03      	cmp	r3, #3
    1e08:	d196      	bne.n	1d38 <bt_recv+0x138>
				pointer_index = 0;
    1e0a:	2100      	movs	r1, #0
				memset(copied_data, 0, 1500);
    1e0c:	f240 52dc 	movw	r2, #1500	; 0x5dc
    1e10:	4650      	mov	r0, sl
				pointer_index = 0;
    1e12:	8031      	strh	r1, [r6, #0]
				memset(copied_data, 0, 1500);
    1e14:	f7fe fc08 	bl	628 <memset>
    1e18:	e7ec      	b.n	1df4 <bt_recv+0x1f4>
		net_buf_unref(buf);
    1e1a:	f008 fa9d 	bl	a358 <net_buf_unref>
		return -EINVAL;
    1e1e:	f06f 0015 	mvn.w	r0, #21
    1e22:	e71a      	b.n	1c5a <bt_recv+0x5a>
	net_buf_pull(buf, sizeof(*hdr));
    1e24:	f100 0508 	add.w	r5, r0, #8
    1e28:	2102      	movs	r1, #2
    1e2a:	4628      	mov	r0, r5
    1e2c:	f008 fadd 	bl	a3ea <net_buf_simple_pull>
	switch (hdr->evt) {
    1e30:	783b      	ldrb	r3, [r7, #0]
    1e32:	2b3e      	cmp	r3, #62	; 0x3e
    1e34:	f47f af0d 	bne.w	1c52 <bt_recv+0x52>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    1e38:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    1e3a:	4631      	mov	r1, r6
    1e3c:	4628      	mov	r0, r5
    1e3e:	f008 fad4 	bl	a3ea <net_buf_simple_pull>
	switch (evt->subevent) {
    1e42:	783b      	ldrb	r3, [r7, #0]
    1e44:	3b02      	subs	r3, #2
    1e46:	2b0b      	cmp	r3, #11
    1e48:	f63f af03 	bhi.w	1c52 <bt_recv+0x52>
    1e4c:	a201      	add	r2, pc, #4	; (adr r2, 1e54 <bt_recv+0x254>)
    1e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1e52:	bf00      	nop
    1e54:	00001c8f 	.word	0x00001c8f
    1e58:	00001c53 	.word	0x00001c53
    1e5c:	00001c53 	.word	0x00001c53
    1e60:	00001c53 	.word	0x00001c53
    1e64:	00001c53 	.word	0x00001c53
    1e68:	00001c53 	.word	0x00001c53
    1e6c:	00001c29 	.word	0x00001c29
    1e70:	00001c73 	.word	0x00001c73
    1e74:	00001c53 	.word	0x00001c53
    1e78:	00001c53 	.word	0x00001c53
    1e7c:	00001c53 	.word	0x00001c53
    1e80:	00001d23 	.word	0x00001d23
    1e84:	20005e50 	.word	0x20005e50
    1e88:	2000007e 	.word	0x2000007e
    1e8c:	200000c0 	.word	0x200000c0
    1e90:	20000078 	.word	0x20000078
    1e94:	20002ed6 	.word	0x20002ed6
    1e98:	2000007c 	.word	0x2000007c
    1e9c:	20002edc 	.word	0x20002edc
    1ea0:	20000064 	.word	0x20000064
    1ea4:	20002ff8 	.word	0x20002ff8
    1ea8:	200000c8 	.word	0x200000c8

00001eac <bt_recv_prio>:
{
    1eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    1eae:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    1eb0:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    1eb2:	2b01      	cmp	r3, #1
{
    1eb4:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    1eb6:	d005      	beq.n	1ec4 <bt_recv_prio+0x18>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    1eb8:	4040      	eors	r0, r0
    1eba:	f380 8811 	msr	BASEPRI, r0
    1ebe:	f04f 0004 	mov.w	r0, #4
    1ec2:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    1ec4:	8983      	ldrh	r3, [r0, #12]
    1ec6:	2b01      	cmp	r3, #1
    1ec8:	d9f6      	bls.n	1eb8 <bt_recv_prio+0xc>
    1eca:	7833      	ldrb	r3, [r6, #0]
    1ecc:	3b0e      	subs	r3, #14
    1ece:	2b01      	cmp	r3, #1
    1ed0:	d8f2      	bhi.n	1eb8 <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    1ed2:	f100 0508 	add.w	r5, r0, #8
    1ed6:	2102      	movs	r1, #2
    1ed8:	4628      	mov	r0, r5
    1eda:	f008 fa86 	bl	a3ea <net_buf_simple_pull>
	switch (hdr->evt) {
    1ede:	7833      	ldrb	r3, [r6, #0]
    1ee0:	2b0e      	cmp	r3, #14
    1ee2:	d005      	beq.n	1ef0 <bt_recv_prio+0x44>
    1ee4:	2b0f      	cmp	r3, #15
    1ee6:	d017      	beq.n	1f18 <bt_recv_prio+0x6c>
		net_buf_unref(buf);
    1ee8:	4620      	mov	r0, r4
    1eea:	f008 fa35 	bl	a358 <net_buf_unref>
    1eee:	e7e3      	b.n	1eb8 <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    1ef0:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    1ef2:	2103      	movs	r1, #3
    1ef4:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    1ef6:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    1ef8:	f008 fa77 	bl	a3ea <net_buf_simple_pull>
	status = buf->data[0];
    1efc:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    1efe:	4621      	mov	r1, r4
    1f00:	7818      	ldrb	r0, [r3, #0]
    1f02:	f7ff fab1 	bl	1468 <hci_cmd_done.isra.9>
	if (ncmd) {
    1f06:	b116      	cbz	r6, 1f0e <bt_recv_prio+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1f08:	480a      	ldr	r0, [pc, #40]	; (1f34 <bt_recv_prio+0x88>)
    1f0a:	f008 fec5 	bl	ac98 <_impl_k_sem_give>
	net_buf_unref(buf);
    1f0e:	4620      	mov	r0, r4
    1f10:	f008 fa22 	bl	a358 <net_buf_unref>
}
    1f14:	2000      	movs	r0, #0
    1f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    1f18:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    1f1a:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    1f1c:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    1f1e:	4628      	mov	r0, r5
    1f20:	f008 fa63 	bl	a3ea <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    1f24:	4621      	mov	r1, r4
    1f26:	7830      	ldrb	r0, [r6, #0]
    1f28:	f7ff fa9e 	bl	1468 <hci_cmd_done.isra.9>
	if (ncmd) {
    1f2c:	2f00      	cmp	r7, #0
    1f2e:	d0ee      	beq.n	1f0e <bt_recv_prio+0x62>
    1f30:	e7ea      	b.n	1f08 <bt_recv_prio+0x5c>
    1f32:	bf00      	nop
    1f34:	20005e68 	.word	0x20005e68

00001f38 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    1f38:	4a08      	ldr	r2, [pc, #32]	; (1f5c <bt_hci_driver_register+0x24>)
    1f3a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    1f3e:	b93b      	cbnz	r3, 1f50 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    1f40:	6881      	ldr	r1, [r0, #8]
    1f42:	b141      	cbz	r1, 1f56 <bt_hci_driver_register+0x1e>
    1f44:	68c1      	ldr	r1, [r0, #12]
    1f46:	b131      	cbz	r1, 1f56 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    1f48:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	return 0;
    1f4c:	4618      	mov	r0, r3
    1f4e:	4770      	bx	lr
		return -EALREADY;
    1f50:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1f54:	4770      	bx	lr
		return -EINVAL;
    1f56:	f06f 0015 	mvn.w	r0, #21
}
    1f5a:	4770      	bx	lr
    1f5c:	20005de0 	.word	0x20005de0

00001f60 <bt_enable>:
{
    1f60:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    1f62:	4d24      	ldr	r5, [pc, #144]	; (1ff4 <bt_enable+0x94>)
    1f64:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
{
    1f68:	b086      	sub	sp, #24
    1f6a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d03b      	beq.n	1fe8 <bt_enable+0x88>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1f70:	2101      	movs	r1, #1
    1f72:	f105 0070 	add.w	r0, r5, #112	; 0x70
    1f76:	f7ff fa55 	bl	1424 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    1f7a:	f010 0001 	ands.w	r0, r0, #1
    1f7e:	d136      	bne.n	1fee <bt_enable+0x8e>
	ready_cb = cb;
    1f80:	4b1d      	ldr	r3, [pc, #116]	; (1ff8 <bt_enable+0x98>)

    1f82:	491e      	ldr	r1, [pc, #120]	; (1ffc <bt_enable+0x9c>)
    1f84:	601e      	str	r6, [r3, #0]
    1f86:	f06f 0308 	mvn.w	r3, #8
    1f8a:	9005      	str	r0, [sp, #20]
    1f8c:	9004      	str	r0, [sp, #16]
    1f8e:	9303      	str	r3, [sp, #12]
    1f90:	9002      	str	r0, [sp, #8]
    1f92:	9001      	str	r0, [sp, #4]
    1f94:	9000      	str	r0, [sp, #0]
    1f96:	4b1a      	ldr	r3, [pc, #104]	; (2000 <bt_enable+0xa0>)
    1f98:	481a      	ldr	r0, [pc, #104]	; (2004 <bt_enable+0xa4>)
    1f9a:	f44f 7220 	mov.w	r2, #640	; 0x280
    1f9e:	f009 f89d 	bl	b0dc <_impl_k_thread_create>
	err = bt_dev.drv->open();
    1fa2:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    1fa6:	689b      	ldr	r3, [r3, #8]
    1fa8:	4798      	blx	r3
	if (err) {
    1faa:	4604      	mov	r4, r0
    1fac:	b960      	cbnz	r0, 1fc8 <bt_enable+0x68>
	if (!cb) {
    1fae:	b976      	cbnz	r6, 1fce <bt_enable+0x6e>
	err = hci_init();
    1fb0:	f7ff fbe2 	bl	1778 <hci_init>
	if (err) {
    1fb4:	4604      	mov	r4, r0
    1fb6:	b938      	cbnz	r0, 1fc8 <bt_enable+0x68>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    1fb8:	2102      	movs	r1, #2
    1fba:	f105 0070 	add.w	r0, r5, #112	; 0x70
    1fbe:	f7ff fa31 	bl	1424 <atomic_or>
	bt_le_scan_update(false);
    1fc2:	4620      	mov	r0, r4
    1fc4:	f7ff fbb8 	bl	1738 <bt_le_scan_update>
}
    1fc8:	4620      	mov	r0, r4
    1fca:	b006      	add	sp, #24
    1fcc:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    1fce:	2101      	movs	r1, #1
    1fd0:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    1fd4:	f7ff fa26 	bl	1424 <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    1fd8:	07c3      	lsls	r3, r0, #31
    1fda:	d4f5      	bmi.n	1fc8 <bt_enable+0x68>
		k_queue_append(&work_q->queue, work);
    1fdc:	f105 0164 	add.w	r1, r5, #100	; 0x64
    1fe0:	4809      	ldr	r0, [pc, #36]	; (2008 <bt_enable+0xa8>)
    1fe2:	f008 fbe6 	bl	a7b2 <k_queue_append>
    1fe6:	e7ef      	b.n	1fc8 <bt_enable+0x68>
		return -ENODEV;
    1fe8:	f06f 0412 	mvn.w	r4, #18
    1fec:	e7ec      	b.n	1fc8 <bt_enable+0x68>
		return -EALREADY;
    1fee:	f06f 0444 	mvn.w	r4, #68	; 0x44
    1ff2:	e7e9      	b.n	1fc8 <bt_enable+0x68>
    1ff4:	20005de0 	.word	0x20005de0
    1ff8:	200000c4 	.word	0x200000c4
    1ffc:	20004028 	.word	0x20004028
    2000:	00001b55 	.word	0x00001b55
    2004:	200000cc 	.word	0x200000cc
    2008:	20003fb0 	.word	0x20003fb0

0000200c <set_ext_ad>:

//#if defined(CONFIG_EXT_ADV)
int set_ext_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len, u8_t operation)
{
    200c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2010:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_ext_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    2012:	21ff      	movs	r1, #255	; 0xff
{
    2014:	4607      	mov	r7, r0
    2016:	4690      	mov	r8, r2
    2018:	469a      	mov	sl, r3
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    201a:	f7ff fa5f 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    201e:	4681      	mov	r9, r0
    2020:	2800      	cmp	r0, #0
    2022:	d03d      	beq.n	20a0 <set_ext_ad+0x94>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    2024:	21ff      	movs	r1, #255	; 0xff
    2026:	3008      	adds	r0, #8
    2028:	f008 f9c8 	bl	a3bc <net_buf_simple_add>
    202c:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    202e:	22ff      	movs	r2, #255	; 0xff
    2030:	2100      	movs	r1, #0
	set_data->len = 0;
    2032:	2600      	movs	r6, #0
	memset(set_data, 0, sizeof(*set_data));
    2034:	f7fe faf8 	bl	628 <memset>
	set_data->len = 0;
    2038:	70e6      	strb	r6, [r4, #3]
	set_data->op = operation;
    203a:	f884 a001 	strb.w	sl, [r4, #1]
	for (i = 0; i < ad_len; i++) {
    203e:	4546      	cmp	r6, r8
    2040:	d106      	bne.n	2050 <set_ext_ad+0x44>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    2042:	4649      	mov	r1, r9
    2044:	4638      	mov	r0, r7
    2046:	2200      	movs	r2, #0
}
    2048:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    204c:	f7ff ba76 	b.w	153c <bt_hci_cmd_send_sync>
		if (set_data->len + ad[i].data_len + 2 > 255) {
    2050:	786a      	ldrb	r2, [r5, #1]
    2052:	78e3      	ldrb	r3, [r4, #3]
    2054:	18d1      	adds	r1, r2, r3
    2056:	3102      	adds	r1, #2
    2058:	29ff      	cmp	r1, #255	; 0xff
    205a:	f105 0508 	add.w	r5, r5, #8
    205e:	dd06      	ble.n	206e <set_ext_ad+0x62>
			net_buf_unref(buf);
    2060:	4648      	mov	r0, r9
    2062:	f008 f979 	bl	a358 <net_buf_unref>
			return -EINVAL;
    2066:	f06f 0015 	mvn.w	r0, #21
    206a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    206e:	18e1      	adds	r1, r4, r3
    2070:	1c50      	adds	r0, r2, #1
    2072:	7108      	strb	r0, [r1, #4]
		set_data->data[set_data->len++] = ad[i].type;
    2074:	1c98      	adds	r0, r3, #2
    2076:	b2c0      	uxtb	r0, r0
		set_data->data[set_data->len++] = ad[i].data_len + 1;
    2078:	3301      	adds	r3, #1
		set_data->data[set_data->len++] = ad[i].type;
    207a:	70e0      	strb	r0, [r4, #3]
    207c:	fa54 f383 	uxtab	r3, r4, r3
    2080:	f815 1c08 	ldrb.w	r1, [r5, #-8]
    2084:	7119      	strb	r1, [r3, #4]
		memcpy(&set_data->data[set_data->len], ad[i].data,
    2086:	3004      	adds	r0, #4
    2088:	f855 1c04 	ldr.w	r1, [r5, #-4]
    208c:	4420      	add	r0, r4
    208e:	f7fe fa9f 	bl	5d0 <memcpy>
		set_data->len += ad[i].data_len;
    2092:	78e3      	ldrb	r3, [r4, #3]
    2094:	f815 2c07 	ldrb.w	r2, [r5, #-7]
    2098:	4413      	add	r3, r2
    209a:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < ad_len; i++) {
    209c:	3601      	adds	r6, #1
    209e:	e7ce      	b.n	203e <set_ext_ad+0x32>
		return -ENOBUFS;
    20a0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    20a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000020a8 <ext_set_data>:

int ext_set_data(u16_t data_lenght,u8_t *data){
    20a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	u8_t fragment_count;
	fragment_count = data_lenght/246;
	int err = 0;
	int i =0;
	int ptr = 0;
    20ac:	2700      	movs	r7, #0
	fragment_count = data_lenght/246;
    20ae:	24f6      	movs	r4, #246	; 0xf6
int ext_set_data(u16_t data_lenght,u8_t *data){
    20b0:	4680      	mov	r8, r0
	fragment_count = data_lenght/246;
    20b2:	fbb0 f4f4 	udiv	r4, r0, r4
int ext_set_data(u16_t data_lenght,u8_t *data){
    20b6:	4689      	mov	r9, r1
	fragment_count = data_lenght/246;
    20b8:	b2e4      	uxtb	r4, r4
	int i =0;
    20ba:	463d      	mov	r5, r7
			operation = 2;	//last fragment
		}else{
			operation = 0; //middle packets
		}

		struct bt_data chain_ad[] = {
    20bc:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while(i <= fragment_count){
    20c0:	42a5      	cmp	r5, r4
    20c2:	dd03      	ble.n	20cc <ext_set_data+0x24>

		ptr = ptr + packet_size;
		data_lenght = data_lenght - packet_size;
		i++;		
	}
	return 0;
    20c4:	2000      	movs	r0, #0
}
    20c6:	b002      	add	sp, #8
    20c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20cc:	4646      	mov	r6, r8
    20ce:	2ef6      	cmp	r6, #246	; 0xf6
    20d0:	bf28      	it	cs
    20d2:	26f6      	movcs	r6, #246	; 0xf6
		if((i == 0)&& (fragment_count == 0)){
    20d4:	b9cd      	cbnz	r5, 210a <ext_set_data+0x62>
			operation = 3;  //complete data
    20d6:	2c00      	cmp	r4, #0
    20d8:	bf14      	ite	ne
    20da:	2301      	movne	r3, #1
    20dc:	2303      	moveq	r3, #3
			BT_DATA(BT_DATA_MANUFACTURER_DATA, &data[ptr], packet_size),
    20de:	eb09 0207 	add.w	r2, r9, r7
		struct bt_data chain_ad[] = {
    20e2:	9201      	str	r2, [sp, #4]
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, chain_ad, 1, operation);
    20e4:	4669      	mov	r1, sp
    20e6:	2201      	movs	r2, #1
    20e8:	f242 0037 	movw	r0, #8247	; 0x2037
		struct bt_data chain_ad[] = {
    20ec:	f88d a000 	strb.w	sl, [sp]
    20f0:	f88d 6001 	strb.w	r6, [sp, #1]
		err = set_ext_ad(BT_HCI_OP_LE_SET_EXT_ADV_DATA, chain_ad, 1, operation);
    20f4:	f7ff ff8a 	bl	200c <set_ext_ad>
		if (err) {
    20f8:	2800      	cmp	r0, #0
    20fa:	d1e4      	bne.n	20c6 <ext_set_data+0x1e>
		ptr = ptr + packet_size;
    20fc:	4437      	add	r7, r6
		data_lenght = data_lenght - packet_size;
    20fe:	eba8 0606 	sub.w	r6, r8, r6
    2102:	fa1f f886 	uxth.w	r8, r6
		i++;		
    2106:	3501      	adds	r5, #1
    2108:	e7da      	b.n	20c0 <ext_set_data+0x18>
			operation = 2;	//last fragment
    210a:	42a5      	cmp	r5, r4
    210c:	bf0c      	ite	eq
    210e:	2302      	moveq	r3, #2
    2110:	2300      	movne	r3, #0
    2112:	e7e4      	b.n	20de <ext_set_data+0x36>

00002114 <bt_le_ext_adv_start>:

int bt_le_ext_adv_start(const struct bt_le_adv_param *param,
			const struct bt_data *ad, size_t ad_len,
			u8_t *data, u16_t data_lenght,
		    const struct bt_data *sd, size_t sd_len)
{
    2114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2118:	b088      	sub	sp, #32
    211a:	4605      	mov	r5, r0
    211c:	4698      	mov	r8, r3
    211e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	struct bt_hci_cp_le_set_ext_adv_param set_param;
	struct net_buf *buf;
	int err;
	

	if (!valid_adv_param(param)) {
    2120:	f7ff f966 	bl	13f0 <valid_adv_param>
    2124:	b928      	cbnz	r0, 2132 <bt_le_ext_adv_start+0x1e>
		return -EINVAL;
    2126:	f06f 0415 	mvn.w	r4, #21
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    212a:	4620      	mov	r0, r4
    212c:	b008      	add	sp, #32
    212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2132:	2005      	movs	r0, #5
    2134:	f7ff f9c0 	bl	14b8 <atomic_test_bit.constprop.25>
    2138:	4604      	mov	r4, r0
    213a:	2800      	cmp	r0, #0
    213c:	f040 80a1 	bne.w	2282 <bt_le_ext_adv_start+0x16e>
	memset(&set_param, 0, sizeof(set_param));
    2140:	4601      	mov	r1, r0
    2142:	2217      	movs	r2, #23
    2144:	a802      	add	r0, sp, #8
    2146:	f7fe fa6f 	bl	628 <memset>
	set_param.prim_min_interval = sys_cpu_to_le16(param->interval_min);
    214a:	886b      	ldrh	r3, [r5, #2]
    214c:	f8ad 300b 	strh.w	r3, [sp, #11]
	set_param.prim_max_interval = sys_cpu_to_le16(param->interval_max);
    2150:	88ab      	ldrh	r3, [r5, #4]
    2152:	f8ad 300d 	strh.w	r3, [sp, #13]
	set_param.prim_channel_map  =   0x01; //0x07;
    2156:	2301      	movs	r3, #1
    2158:	f88d 300f 	strb.w	r3, [sp, #15]
	set_param.prim_adv_phy  	= 0x01;
    215c:	f88d 301a 	strb.w	r3, [sp, #26]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    2160:	4b49      	ldr	r3, [pc, #292]	; (2288 <bt_le_ext_adv_start+0x174>)
	set_param.handle			= 0x00;
    2162:	f88d 4008 	strb.w	r4, [sp, #8]
	u8_t direct_address[]		= {0x06,0x05,0x04,0x03,0x02,0x01};			//write address in reverse order
    2166:	6818      	ldr	r0, [r3, #0]
    2168:	9000      	str	r0, [sp, #0]
    216a:	889b      	ldrh	r3, [r3, #4]
    216c:	f8ad 3004 	strh.w	r3, [sp, #4]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    2170:	4669      	mov	r1, sp
	set_param.sid 				= 0x02;
    2172:	2702      	movs	r7, #2
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    2174:	2206      	movs	r2, #6
    2176:	f10d 0012 	add.w	r0, sp, #18
	set_param.sid 				= 0x02;
    217a:	f88d 701d 	strb.w	r7, [sp, #29]
	set_param.sec_adv_phy		= 0x00;  
    217e:	f88d 401c 	strb.w	r4, [sp, #28]
	set_param.sec_adv_max_skip  = 0;                                   //0x01
    2182:	f88d 401b 	strb.w	r4, [sp, #27]
	memcpy(&set_param.direct_addr.a.val, direct_address, sizeof(direct_address));
    2186:	f7fe fa23 	bl	5d0 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    218a:	782b      	ldrb	r3, [r5, #0]
    218c:	07d9      	lsls	r1, r3, #31
    218e:	d51a      	bpl.n	21c6 <bt_le_ext_adv_start+0xb2>
			if (atomic_test_bit(bt_dev.flags,
    2190:	4638      	mov	r0, r7
    2192:	f7ff f991 	bl	14b8 <atomic_test_bit.constprop.25>
    2196:	b110      	cbz	r0, 219e <bt_le_ext_adv_start+0x8a>
				set_random_address(&bt_dev.id_addr.a);
    2198:	483c      	ldr	r0, [pc, #240]	; (228c <bt_le_ext_adv_start+0x178>)
    219a:	f7ff fa0d 	bl	15b8 <set_random_address>
			set_param.own_addr_type = bt_dev.id_addr.type;
    219e:	4b3c      	ldr	r3, [pc, #240]	; (2290 <bt_le_ext_adv_start+0x17c>)
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	f88d 3010 	strb.w	r3, [sp, #16]
		set_param.props = BT_HCI_LE_ADV_PROP_CONN | BT_HCI_LE_ADV_PROP_SCAN;				// BT_LE_ADV_IND;
    21a6:	2303      	movs	r3, #3
    21a8:	f88d 3009 	strb.w	r3, [sp, #9]
    21ac:	2300      	movs	r3, #0
    21ae:	f88d 300a 	strb.w	r3, [sp, #10]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, sizeof(set_param));
    21b2:	2117      	movs	r1, #23
    21b4:	f242 0036 	movw	r0, #8246	; 0x2036
    21b8:	f7ff f990 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    21bc:	4604      	mov	r4, r0
    21be:	b9c8      	cbnz	r0, 21f4 <bt_le_ext_adv_start+0xe0>
		return -ENOBUFS;
    21c0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    21c4:	e7b1      	b.n	212a <bt_le_ext_adv_start+0x16>
		if (param->own_addr) {
    21c6:	68a8      	ldr	r0, [r5, #8]
    21c8:	b188      	cbz	r0, 21ee <bt_le_ext_adv_start+0xda>
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    21ca:	7943      	ldrb	r3, [r0, #5]
    21cc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    21d0:	d1a9      	bne.n	2126 <bt_le_ext_adv_start+0x12>
			err = set_random_address(param->own_addr);
    21d2:	f7ff f9f1 	bl	15b8 <set_random_address>
			err = le_set_private_addr();
    21d6:	4604      	mov	r4, r0
		if (err) {
    21d8:	2800      	cmp	r0, #0
    21da:	d1a6      	bne.n	212a <bt_le_ext_adv_start+0x16>
		set_param.own_addr_type = BT_ADDR_LE_RANDOM;									//own_addr_type
    21dc:	2301      	movs	r3, #1
    21de:	f88d 3010 	strb.w	r3, [sp, #16]
			set_param.props =  BT_HCI_LE_ADV_PROP_TX_POWER  ; //|BT_HCI_LE_ADV_PROP_DIRECT |BT_HCI_LE_ADV_PROP_SCAN |;		//BT_LE_ADV_SCAN_IND and trx pwr
    21e2:	2340      	movs	r3, #64	; 0x40
    21e4:	f88d 3009 	strb.w	r3, [sp, #9]
    21e8:	f88d 000a 	strb.w	r0, [sp, #10]
    21ec:	e7e1      	b.n	21b2 <bt_le_ext_adv_start+0x9e>
			err = le_set_private_addr();
    21ee:	f7ff fa11 	bl	1614 <le_set_private_addr>
    21f2:	e7f0      	b.n	21d6 <bt_le_ext_adv_start+0xc2>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    21f4:	2217      	movs	r2, #23
    21f6:	a902      	add	r1, sp, #8
    21f8:	3008      	adds	r0, #8
    21fa:	f008 f8e5 	bl	a3c8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_PARAM, buf, NULL);
    21fe:	4621      	mov	r1, r4
    2200:	2200      	movs	r2, #0
    2202:	f242 0036 	movw	r0, #8246	; 0x2036
    2206:	f7ff f999 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    220a:	4604      	mov	r4, r0
    220c:	2800      	cmp	r0, #0
    220e:	d18c      	bne.n	212a <bt_le_ext_adv_start+0x16>
	err = ext_set_data(data_lenght, data);
    2210:	4641      	mov	r1, r8
    2212:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
    2216:	f7ff ff47 	bl	20a8 <ext_set_data>
	if (err) {
    221a:	4604      	mov	r4, r0
    221c:	2800      	cmp	r0, #0
    221e:	d184      	bne.n	212a <bt_le_ext_adv_start+0x16>
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2220:	bb2e      	cbnz	r6, 226e <bt_le_ext_adv_start+0x15a>
    2222:	782b      	ldrb	r3, [r5, #0]
    2224:	07da      	lsls	r2, r3, #31
    2226:	d422      	bmi.n	226e <bt_le_ext_adv_start+0x15a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, 1);
    2228:	2101      	movs	r1, #1
    222a:	f242 0039 	movw	r0, #8249	; 0x2039
    222e:	f7ff f955 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    2232:	4604      	mov	r4, r0
    2234:	2800      	cmp	r0, #0
    2236:	d0c3      	beq.n	21c0 <bt_le_ext_adv_start+0xac>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    2238:	2101      	movs	r1, #1
    223a:	3008      	adds	r0, #8
    223c:	f008 f8cd 	bl	a3da <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_ADV_ENABLE, buf, NULL);
    2240:	4621      	mov	r1, r4
    2242:	2200      	movs	r2, #0
    2244:	f242 0039 	movw	r0, #8249	; 0x2039
    2248:	f7ff f978 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    224c:	4604      	mov	r4, r0
    224e:	2800      	cmp	r0, #0
    2250:	f47f af6b 	bne.w	212a <bt_le_ext_adv_start+0x16>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2254:	2120      	movs	r1, #32
    2256:	480f      	ldr	r0, [pc, #60]	; (2294 <bt_le_ext_adv_start+0x180>)
    2258:	f7ff f8e4 	bl	1424 <atomic_or>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    225c:	782b      	ldrb	r3, [r5, #0]
    225e:	079b      	lsls	r3, r3, #30
    2260:	f53f af63 	bmi.w	212a <bt_le_ext_adv_start+0x16>
    2264:	2140      	movs	r1, #64	; 0x40
    2266:	480b      	ldr	r0, [pc, #44]	; (2294 <bt_le_ext_adv_start+0x180>)
    2268:	f7ff f8dc 	bl	1424 <atomic_or>
    226c:	e75d      	b.n	212a <bt_le_ext_adv_start+0x16>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    226e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2270:	4631      	mov	r1, r6
    2272:	f242 0009 	movw	r0, #8201	; 0x2009
    2276:	f7ff fa13 	bl	16a0 <set_ad>
		if (err) {
    227a:	4604      	mov	r4, r0
    227c:	2800      	cmp	r0, #0
    227e:	d0d3      	beq.n	2228 <bt_le_ext_adv_start+0x114>
    2280:	e753      	b.n	212a <bt_le_ext_adv_start+0x16>
		return -EALREADY;
    2282:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2286:	e750      	b.n	212a <bt_le_ext_adv_start+0x16>
    2288:	0000b70f 	.word	0x0000b70f
    228c:	20005de1 	.word	0x20005de1
    2290:	20005de0 	.word	0x20005de0
    2294:	20005e50 	.word	0x20005e50

00002298 <bt_le_adv_stop>:

	return 0;
}

int bt_le_adv_stop(void)
{
    2298:	b510      	push	{r4, lr}
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    229a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    229e:	4819      	ldr	r0, [pc, #100]	; (2304 <bt_le_adv_stop+0x6c>)
    22a0:	f7ff f8d1 	bl	1446 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    22a4:	2005      	movs	r0, #5
    22a6:	f7ff f907 	bl	14b8 <atomic_test_bit.constprop.25>
    22aa:	b910      	cbnz	r0, 22b2 <bt_le_adv_stop+0x1a>
		return 0;
    22ac:	2400      	movs	r4, #0
			le_set_private_addr();
		}
	}

	return 0;
}
    22ae:	4620      	mov	r0, r4
    22b0:	bd10      	pop	{r4, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    22b2:	2101      	movs	r1, #1
    22b4:	f242 000a 	movw	r0, #8202	; 0x200a
    22b8:	f7ff f910 	bl	14dc <bt_hci_cmd_create>
	if (!buf) {
    22bc:	4604      	mov	r4, r0
    22be:	b1f0      	cbz	r0, 22fe <bt_le_adv_stop+0x66>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    22c0:	2100      	movs	r1, #0
    22c2:	3008      	adds	r0, #8
    22c4:	f008 f889 	bl	a3da <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    22c8:	4621      	mov	r1, r4
    22ca:	2200      	movs	r2, #0
    22cc:	f242 000a 	movw	r0, #8202	; 0x200a
    22d0:	f7ff f934 	bl	153c <bt_hci_cmd_send_sync>
	if (err) {
    22d4:	4604      	mov	r4, r0
    22d6:	2800      	cmp	r0, #0
    22d8:	d1e9      	bne.n	22ae <bt_le_adv_stop+0x16>
    22da:	f06f 0120 	mvn.w	r1, #32
    22de:	4809      	ldr	r0, [pc, #36]	; (2304 <bt_le_adv_stop+0x6c>)
    22e0:	f7ff f8b1 	bl	1446 <atomic_and>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    22e4:	2007      	movs	r0, #7
    22e6:	f7ff f8e7 	bl	14b8 <atomic_test_bit.constprop.25>
    22ea:	2800      	cmp	r0, #0
    22ec:	d0de      	beq.n	22ac <bt_le_adv_stop+0x14>
		    atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    22ee:	2009      	movs	r0, #9
    22f0:	f7ff f8e2 	bl	14b8 <atomic_test_bit.constprop.25>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    22f4:	2800      	cmp	r0, #0
    22f6:	d0d9      	beq.n	22ac <bt_le_adv_stop+0x14>
			le_set_private_addr();
    22f8:	f7ff f98c 	bl	1614 <le_set_private_addr>
    22fc:	e7d7      	b.n	22ae <bt_le_adv_stop+0x16>
		return -ENOBUFS;
    22fe:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2302:	e7d4      	b.n	22ae <bt_le_adv_stop+0x16>
    2304:	20005e50 	.word	0x20005e50

00002308 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2308:	b538      	push	{r3, r4, r5, lr}
    230a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    230c:	4805      	ldr	r0, [pc, #20]	; (2324 <bt_buf_get_rx+0x1c>)
    230e:	f007 fff3 	bl	a2f8 <net_buf_alloc_fixed>
#endif

	if (buf) {
    2312:	4604      	mov	r4, r0
    2314:	b120      	cbz	r0, 2320 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2316:	2100      	movs	r1, #0
    2318:	3008      	adds	r0, #8
    231a:	f008 f80c 	bl	a336 <net_buf_simple_reserve>
    231e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2320:	4620      	mov	r0, r4
    2322:	bd38      	pop	{r3, r4, r5, pc}
    2324:	2000611c 	.word	0x2000611c

00002328 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2328:	b510      	push	{r4, lr}
    232a:	4601      	mov	r1, r0
	__asm__ volatile(
    232c:	f04f 0320 	mov.w	r3, #32
    2330:	f3ef 8011 	mrs	r0, BASEPRI
    2334:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    2338:	4a0b      	ldr	r2, [pc, #44]	; (2368 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    233a:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    233c:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    2340:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2344:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    2348:	b924      	cbnz	r4, 2354 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    234a:	2001      	movs	r0, #1
}
    234c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2350:	f7ff bfda 	b.w	2308 <bt_buf_get_rx>
    2354:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2356:	f104 0008 	add.w	r0, r4, #8
    235a:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    235c:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    235e:	4619      	mov	r1, r3
    2360:	f007 ffe9 	bl	a336 <net_buf_simple_reserve>
}
    2364:	4620      	mov	r0, r4
    2366:	bd10      	pop	{r4, pc}
    2368:	20005de0 	.word	0x20005de0

0000236c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    236c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    236e:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2370:	1dc3      	adds	r3, r0, #7
{
    2372:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2374:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2378:	1e50      	subs	r0, r2, #1
{
    237a:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    237c:	b280      	uxth	r0, r0
{
    237e:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2380:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2382:	2100      	movs	r1, #0
    2384:	2204      	movs	r2, #4
    2386:	fb06 5000 	mla	r0, r6, r0, r5
    238a:	f7fe f94d 	bl	628 <memset>
    238e:	3c02      	subs	r4, #2
    2390:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    2392:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2396:	42bc      	cmp	r4, r7
    2398:	d101      	bne.n	239e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    239a:	b003      	add	sp, #12
    239c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    239e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    23a2:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    23a4:	2204      	movs	r2, #4
    23a6:	1b80      	subs	r0, r0, r6
    23a8:	eb0d 0102 	add.w	r1, sp, r2
    23ac:	4428      	add	r0, r5
    23ae:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    23b0:	9301      	str	r3, [sp, #4]
    23b2:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    23b4:	f7fe f90c 	bl	5d0 <memcpy>
    23b8:	e7ed      	b.n	2396 <mem_init+0x2a>

000023ba <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    23ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    23bc:	6805      	ldr	r5, [r0, #0]
{
    23be:	4606      	mov	r6, r0
	if (*mem_head) {
    23c0:	b195      	cbz	r5, 23e8 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    23c2:	1deb      	adds	r3, r5, #7
    23c4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    23c8:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    23ca:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    23cc:	4629      	mov	r1, r5
    23ce:	eb0d 0002 	add.w	r0, sp, r2
    23d2:	f7fe f8fd 	bl	5d0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    23d6:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    23d8:	3c01      	subs	r4, #1
    23da:	b2a4      	uxth	r4, r4
		if (head) {
    23dc:	b11b      	cbz	r3, 23e6 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    23de:	1dda      	adds	r2, r3, #7
    23e0:	f022 0203 	bic.w	r2, r2, #3
    23e4:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    23e6:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    23e8:	4628      	mov	r0, r5
    23ea:	b002      	add	sp, #8
    23ec:	bd70      	pop	{r4, r5, r6, pc}

000023ee <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    23ee:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    23f0:	680c      	ldr	r4, [r1, #0]
{
    23f2:	4606      	mov	r6, r0
    23f4:	460d      	mov	r5, r1
	if (*mem_head) {
    23f6:	b11c      	cbz	r4, 2400 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    23f8:	1de3      	adds	r3, r4, #7
    23fa:	f023 0303 	bic.w	r3, r3, #3
    23fe:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2400:	2204      	movs	r2, #4
    2402:	4629      	mov	r1, r5
    2404:	4630      	mov	r0, r6
    2406:	f7fe f8e3 	bl	5d0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    240a:	1df2      	adds	r2, r6, #7
    240c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    2410:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2412:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    2414:	602e      	str	r6, [r5, #0]
    2416:	bd70      	pop	{r4, r5, r6, pc}

00002418 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    2418:	fb02 0001 	mla	r0, r2, r1, r0
    241c:	4770      	bx	lr

0000241e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    241e:	1a40      	subs	r0, r0, r1
    2420:	b280      	uxth	r0, r0
}
    2422:	fbb0 f0f2 	udiv	r0, r0, r2
    2426:	4770      	bx	lr

00002428 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    2428:	b510      	push	{r4, lr}
	src += len;
    242a:	4411      	add	r1, r2
    242c:	3801      	subs	r0, #1
	while (len--) {
    242e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2432:	3a01      	subs	r2, #1
    2434:	b292      	uxth	r2, r2
    2436:	429a      	cmp	r2, r3
    2438:	d100      	bne.n	243c <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    243a:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    243c:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    2440:	f800 4f01 	strb.w	r4, [r0, #1]!
    2444:	e7f5      	b.n	2432 <mem_rcopy+0xa>

00002446 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    2446:	6010      	str	r0, [r2, #0]
    2448:	6008      	str	r0, [r1, #0]

	return link;
}
    244a:	4770      	bx	lr

0000244c <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    244c:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    244e:	6814      	ldr	r4, [r2, #0]
    2450:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    2452:	6814      	ldr	r4, [r2, #0]
    2454:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    2456:	6010      	str	r0, [r2, #0]

	return link;
}
    2458:	bd10      	pop	{r4, pc}

0000245a <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    245a:	4288      	cmp	r0, r1
    245c:	d003      	beq.n	2466 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    245e:	b11a      	cbz	r2, 2468 <memq_peek+0xe>
		*mem = head->mem;
    2460:	6843      	ldr	r3, [r0, #4]
    2462:	6013      	str	r3, [r2, #0]
    2464:	4770      	bx	lr
		return NULL;
    2466:	2000      	movs	r0, #0
	}

	return head;
}
    2468:	4770      	bx	lr

0000246a <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    246a:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    246c:	4283      	cmp	r3, r0
    246e:	d009      	beq.n	2484 <memq_dequeue+0x1a>
	if (mem) {
    2470:	b122      	cbz	r2, 247c <memq_dequeue+0x12>
		*mem = head->mem;
    2472:	6858      	ldr	r0, [r3, #4]
    2474:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    2476:	681a      	ldr	r2, [r3, #0]
    2478:	600a      	str	r2, [r1, #0]

	return link;
    247a:	e001      	b.n	2480 <memq_dequeue+0x16>
	if (!link) {
    247c:	2b00      	cmp	r3, #0
    247e:	d1fa      	bne.n	2476 <memq_dequeue+0xc>
}
    2480:	4618      	mov	r0, r3
    2482:	4770      	bx	lr
		return NULL;
    2484:	2300      	movs	r3, #0
    2486:	e7fb      	b.n	2480 <memq_dequeue+0x16>

00002488 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    2488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    248c:	4f11      	ldr	r7, [pc, #68]	; (24d4 <mayfly_init+0x4c>)
    248e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 24d8 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    2492:	2604      	movs	r6, #4
	while (callee_id--) {
    2494:	3e01      	subs	r6, #1
    2496:	b2f6      	uxtb	r6, r6
    2498:	2eff      	cmp	r6, #255	; 0xff
    249a:	d019      	beq.n	24d0 <mayfly_init+0x48>
    249c:	b233      	sxth	r3, r6
    249e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    24a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    24a6:	011d      	lsls	r5, r3, #4
    24a8:	2404      	movs	r4, #4
    24aa:	f04f 0a0c 	mov.w	sl, #12
    24ae:	e00a      	b.n	24c6 <mayfly_init+0x3e>
    24b0:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    24b4:	1d0a      	adds	r2, r1, #4
    24b6:	eb04 0008 	add.w	r0, r4, r8
    24ba:	443a      	add	r2, r7
    24bc:	4439      	add	r1, r7
    24be:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    24c2:	f7ff ffc0 	bl	2446 <memq_init>
		while (caller_id--) {
    24c6:	3c01      	subs	r4, #1
    24c8:	b2e4      	uxtb	r4, r4
    24ca:	2cff      	cmp	r4, #255	; 0xff
    24cc:	d1f0      	bne.n	24b0 <mayfly_init+0x28>
    24ce:	e7e1      	b.n	2494 <mayfly_init+0xc>
    24d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    24d4:	200001b4 	.word	0x200001b4
    24d8:	20000134 	.word	0x20000134

000024dc <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    24dc:	b4f0      	push	{r4, r5, r6, r7}
    24de:	4b12      	ldr	r3, [pc, #72]	; (2528 <mayfly_enable+0x4c>)
    24e0:	4605      	mov	r5, r0
    24e2:	460f      	mov	r7, r1
    24e4:	260c      	movs	r6, #12
    24e6:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    24e8:	b172      	cbz	r2, 2508 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    24ea:	4361      	muls	r1, r4
    24ec:	fb06 1400 	mla	r4, r6, r0, r1
    24f0:	4423      	add	r3, r4
    24f2:	7a59      	ldrb	r1, [r3, #9]
    24f4:	7a18      	ldrb	r0, [r3, #8]
    24f6:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    24f8:	bf04      	itt	eq
    24fa:	3101      	addeq	r1, #1
    24fc:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    24fe:	4628      	mov	r0, r5
    2500:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    2502:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    2504:	f007 bdd0 	b.w	a0a8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    2508:	434c      	muls	r4, r1
    250a:	fb06 4400 	mla	r4, r6, r0, r4
    250e:	4423      	add	r3, r4
    2510:	7a9c      	ldrb	r4, [r3, #10]
    2512:	7ada      	ldrb	r2, [r3, #11]
    2514:	42a2      	cmp	r2, r4
    2516:	d104      	bne.n	2522 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    2518:	3201      	adds	r2, #1
    251a:	729a      	strb	r2, [r3, #10]
}
    251c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    251e:	f007 bdf1 	b.w	a104 <mayfly_pend>
}
    2522:	bcf0      	pop	{r4, r5, r6, r7}
    2524:	4770      	bx	lr
    2526:	bf00      	nop
    2528:	200001b4 	.word	0x200001b4

0000252c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    252e:	4605      	mov	r5, r0
    2530:	460e      	mov	r6, r1
    2532:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2534:	b18a      	cbz	r2, 255a <mayfly_enqueue+0x2e>
    2536:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    2538:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    253a:	7820      	ldrb	r0, [r4, #0]
    253c:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    253e:	f010 0703 	ands.w	r7, r0, #3
    2542:	d029      	beq.n	2598 <mayfly_enqueue+0x6c>
		if (chain) {
    2544:	b303      	cbz	r3, 2588 <mayfly_enqueue+0x5c>
			if (state != 1) {
    2546:	2f01      	cmp	r7, #1
    2548:	d039      	beq.n	25be <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    254a:	3201      	adds	r2, #1
    254c:	b2d2      	uxtb	r2, r2
    254e:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    2550:	4631      	mov	r1, r6
    2552:	4628      	mov	r0, r5
    2554:	f007 fdd6 	bl	a104 <mayfly_pend>
    2558:	e01c      	b.n	2594 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    255a:	f007 fdc1 	bl	a0e0 <mayfly_prio_is_equal>
    255e:	2800      	cmp	r0, #0
    2560:	d0e9      	beq.n	2536 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    2562:	4631      	mov	r1, r6
    2564:	4628      	mov	r0, r5
    2566:	f007 fdad 	bl	a0c4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    256a:	2800      	cmp	r0, #0
    256c:	d0e3      	beq.n	2536 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    256e:	2330      	movs	r3, #48	; 0x30
    2570:	220c      	movs	r2, #12
    2572:	4373      	muls	r3, r6
    2574:	fb02 3305 	mla	r3, r2, r5, r3
    2578:	4a12      	ldr	r2, [pc, #72]	; (25c4 <mayfly_enqueue+0x98>)
    257a:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    257c:	7a93      	ldrb	r3, [r2, #10]
    257e:	7ad2      	ldrb	r2, [r2, #11]
    2580:	1a9b      	subs	r3, r3, r2
    2582:	bf18      	it	ne
    2584:	2301      	movne	r3, #1
    2586:	e7d7      	b.n	2538 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    2588:	3202      	adds	r2, #2
    258a:	b2d2      	uxtb	r2, r2
    258c:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    258e:	68e3      	ldr	r3, [r4, #12]
    2590:	68a0      	ldr	r0, [r4, #8]
    2592:	4798      	blx	r3
		return 0;
    2594:	2000      	movs	r0, #0
    2596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    2598:	2b00      	cmp	r3, #0
    259a:	d0f8      	beq.n	258e <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    259c:	3201      	adds	r2, #1
    259e:	b2d2      	uxtb	r2, r2
    25a0:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    25a2:	2304      	movs	r3, #4
    25a4:	2230      	movs	r2, #48	; 0x30
    25a6:	fb12 3206 	smlabb	r2, r2, r6, r3
    25aa:	230c      	movs	r3, #12
    25ac:	fb13 2305 	smlabb	r3, r3, r5, r2
    25b0:	4a04      	ldr	r2, [pc, #16]	; (25c4 <mayfly_enqueue+0x98>)
    25b2:	6860      	ldr	r0, [r4, #4]
    25b4:	441a      	add	r2, r3
    25b6:	4621      	mov	r1, r4
    25b8:	f7ff ff48 	bl	244c <memq_enqueue>
    25bc:	e7c8      	b.n	2550 <mayfly_enqueue+0x24>
			return 1;
    25be:	4638      	mov	r0, r7

	return 0;
}
    25c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25c2:	bf00      	nop
    25c4:	200001b4 	.word	0x200001b4

000025c8 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    25c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25cc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    25d0:	b089      	sub	sp, #36	; 0x24
    25d2:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    25d4:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    25d8:	4e43      	ldr	r6, [pc, #268]	; (26e8 <mayfly_run+0x120>)
    25da:	9304      	str	r3, [sp, #16]
{
    25dc:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    25de:	2404      	movs	r4, #4
	u8_t disable = 0;
    25e0:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    25e4:	3c01      	subs	r4, #1
    25e6:	b2e4      	uxtb	r4, r4
    25e8:	2cff      	cmp	r4, #255	; 0xff
    25ea:	d10b      	bne.n	2604 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    25ec:	9b01      	ldr	r3, [sp, #4]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d076      	beq.n	26e0 <mayfly_run+0x118>
    25f2:	f1b8 0f00 	cmp.w	r8, #0
    25f6:	d173      	bne.n	26e0 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    25f8:	4642      	mov	r2, r8
    25fa:	4629      	mov	r1, r5
    25fc:	4628      	mov	r0, r5
    25fe:	f007 fd53 	bl	a0a8 <mayfly_enable_cb>
    2602:	e06d      	b.n	26e0 <mayfly_run+0x118>
		struct mayfly *m = 0;
    2604:	f10d 0b20 	add.w	fp, sp, #32
    2608:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    260a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    260c:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    2610:	f04f 0930 	mov.w	r9, #48	; 0x30
    2614:	fb07 f304 	mul.w	r3, r7, r4
    2618:	fb09 3005 	mla	r0, r9, r5, r3
    261c:	1831      	adds	r1, r6, r0
    261e:	465a      	mov	r2, fp
    2620:	6849      	ldr	r1, [r1, #4]
    2622:	5830      	ldr	r0, [r6, r0]
    2624:	9302      	str	r3, [sp, #8]
    2626:	f7ff ff18 	bl	245a <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    262a:	9b04      	ldr	r3, [sp, #16]
    262c:	fb17 3704 	smlabb	r7, r7, r4, r3
    2630:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    2632:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    2634:	9303      	str	r3, [sp, #12]
		while (link) {
    2636:	f1ba 0f00 	cmp.w	sl, #0
    263a:	d119      	bne.n	2670 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    263c:	2230      	movs	r2, #48	; 0x30
    263e:	230c      	movs	r3, #12
    2640:	436a      	muls	r2, r5
    2642:	fb03 2204 	mla	r2, r3, r4, r2
    2646:	4432      	add	r2, r6
    2648:	7a91      	ldrb	r1, [r2, #10]
    264a:	7ad0      	ldrb	r0, [r2, #11]
    264c:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    264e:	bf1e      	ittt	ne
    2650:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    2652:	2201      	movne	r2, #1
    2654:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    2656:	2230      	movs	r2, #48	; 0x30
    2658:	436a      	muls	r2, r5
    265a:	fb03 2304 	mla	r3, r3, r4, r2
    265e:	4433      	add	r3, r6
    2660:	7a1a      	ldrb	r2, [r3, #8]
    2662:	7a59      	ldrb	r1, [r3, #9]
    2664:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    2666:	bf1c      	itt	ne
    2668:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    266a:	f04f 0801 	movne.w	r8, #1
    266e:	e7b9      	b.n	25e4 <mayfly_run+0x1c>
			req = m->_req;
    2670:	9b07      	ldr	r3, [sp, #28]
    2672:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    2674:	785a      	ldrb	r2, [r3, #1]
    2676:	1abf      	subs	r7, r7, r2
    2678:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    267c:	2f01      	cmp	r7, #1
    267e:	d104      	bne.n	268a <mayfly_run+0xc2>
				m->_ack--;
    2680:	3a01      	subs	r2, #1
    2682:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    2684:	6898      	ldr	r0, [r3, #8]
    2686:	68da      	ldr	r2, [r3, #12]
    2688:	4790      	blx	r2
			req = m->_req;
    268a:	9a07      	ldr	r2, [sp, #28]
    268c:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    268e:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    2690:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    2692:	1a9a      	subs	r2, r3, r2
    2694:	f002 0203 	and.w	r2, r2, #3
    2698:	2a01      	cmp	r2, #1
    269a:	9305      	str	r3, [sp, #20]
    269c:	d00d      	beq.n	26ba <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    269e:	9b02      	ldr	r3, [sp, #8]
    26a0:	9903      	ldr	r1, [sp, #12]
    26a2:	fb09 3005 	mla	r0, r9, r5, r3
    26a6:	4430      	add	r0, r6
    26a8:	2200      	movs	r2, #0
    26aa:	6840      	ldr	r0, [r0, #4]
    26ac:	f7ff fedd 	bl	246a <memq_dequeue>
				m->_link = link;
    26b0:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    26b2:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    26b4:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    26b8:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    26ba:	9b02      	ldr	r3, [sp, #8]
    26bc:	fb09 3305 	mla	r3, r9, r5, r3
    26c0:	18f1      	adds	r1, r6, r3
    26c2:	465a      	mov	r2, fp
    26c4:	6849      	ldr	r1, [r1, #4]
    26c6:	58f0      	ldr	r0, [r6, r3]
    26c8:	f7ff fec7 	bl	245a <memq_peek>
			if (state == 1) {
    26cc:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    26ce:	4682      	mov	sl, r0
			if (state == 1) {
    26d0:	d1b1      	bne.n	2636 <mayfly_run+0x6e>
				if (caller_id || link) {
    26d2:	b90c      	cbnz	r4, 26d8 <mayfly_run+0x110>
    26d4:	2800      	cmp	r0, #0
    26d6:	d0b1      	beq.n	263c <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    26d8:	4629      	mov	r1, r5
    26da:	4628      	mov	r0, r5
    26dc:	f007 fd12 	bl	a104 <mayfly_pend>
	}
}
    26e0:	b009      	add	sp, #36	; 0x24
    26e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26e6:	bf00      	nop
    26e8:	200001b4 	.word	0x200001b4

000026ec <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    26ec:	b510      	push	{r4, lr}
    26ee:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    26f0:	2000      	movs	r0, #0

	while (octets_len--) {
    26f2:	3901      	subs	r1, #1
    26f4:	b2c9      	uxtb	r1, r1
    26f6:	29ff      	cmp	r1, #255	; 0xff
    26f8:	d100      	bne.n	26fc <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    26fa:	bd10      	pop	{r4, pc}
		bite = *octets;
    26fc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    2700:	2b00      	cmp	r3, #0
    2702:	d0f6      	beq.n	26f2 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    2704:	1e5c      	subs	r4, r3, #1
			one_count++;
    2706:	3001      	adds	r0, #1
			bite &= (bite - 1);
    2708:	4023      	ands	r3, r4
			one_count++;
    270a:	b2c0      	uxtb	r0, r0
    270c:	e7f8      	b.n	2700 <util_ones_count_get+0x14>

0000270e <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    270e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    2710:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    2712:	6805      	ldr	r5, [r0, #0]
	current = previous;
    2714:	461a      	mov	r2, r3
	total = 0;
    2716:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    2718:	2aff      	cmp	r2, #255	; 0xff
    271a:	d101      	bne.n	2720 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    271c:	2000      	movs	r0, #0
    271e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2720:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    2724:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    2726:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    272a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    272e:	d004      	beq.n	273a <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    2730:	68b3      	ldr	r3, [r6, #8]
    2732:	441c      	add	r4, r3
		current = ticker_current->next;
    2734:	4613      	mov	r3, r2
    2736:	463a      	mov	r2, r7
    2738:	e7ee      	b.n	2718 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    273a:	4293      	cmp	r3, r2
    273c:	d100      	bne.n	2740 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    273e:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    2740:	b21b      	sxth	r3, r3
    2742:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2746:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    2748:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    274a:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    274e:	7833      	ldrb	r3, [r6, #0]
    2750:	2bff      	cmp	r3, #255	; 0xff
    2752:	d006      	beq.n	2762 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    2754:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2758:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    275c:	689a      	ldr	r2, [r3, #8]
    275e:	4402      	add	r2, r0
    2760:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    2762:	4420      	add	r0, r4
    2764:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002766 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    2766:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2768:	1a55      	subs	r5, r2, r1
    276a:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    276e:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2770:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2772:	d109      	bne.n	2788 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2774:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2778:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    277a:	42a2      	cmp	r2, r4
    277c:	d90e      	bls.n	279c <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    277e:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    2780:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    2782:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2784:	6144      	str	r4, [r0, #20]
    2786:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2788:	1a8a      	subs	r2, r1, r2
    278a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    278e:	4293      	cmp	r3, r2
    2790:	d901      	bls.n	2796 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    2792:	1a9a      	subs	r2, r3, r2
    2794:	e7f1      	b.n	277a <ticks_to_expire_prep+0x14>
    2796:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    2798:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    279a:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    279c:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    279e:	2200      	movs	r2, #0
    27a0:	e7ef      	b.n	2782 <ticks_to_expire_prep+0x1c>

000027a2 <ticker_job_op_cb>:
{
    27a2:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    27a4:	2200      	movs	r2, #0
    27a6:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    27a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    27aa:	6259      	str	r1, [r3, #36]	; 0x24
{
    27ac:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    27ae:	b10a      	cbz	r2, 27b4 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    27b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    27b2:	4710      	bx	r2
    27b4:	4770      	bx	lr

000027b6 <ticker_worker>:
{
    27b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    27ba:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    27bc:	2301      	movs	r3, #1
{
    27be:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    27c0:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    27c2:	2d00      	cmp	r5, #0
    27c4:	d14c      	bne.n	2860 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    27c6:	7f43      	ldrb	r3, [r0, #29]
    27c8:	2bff      	cmp	r3, #255	; 0xff
    27ca:	d102      	bne.n	27d2 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    27cc:	77c5      	strb	r5, [r0, #31]
		return;
    27ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    27d2:	f007 f811 	bl	97f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    27d6:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    27d8:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    27da:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    27de:	1bc7      	subs	r7, r0, r7
    27e0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    27e4:	2eff      	cmp	r6, #255	; 0xff
    27e6:	d006      	beq.n	27f6 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    27e8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    27ec:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    27f0:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    27f2:	429f      	cmp	r7, r3
    27f4:	d218      	bcs.n	2828 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    27f6:	7aa2      	ldrb	r2, [r4, #10]
    27f8:	7ae3      	ldrb	r3, [r4, #11]
    27fa:	4293      	cmp	r3, r2
    27fc:	d105      	bne.n	280a <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    27fe:	3301      	adds	r3, #1
    2800:	b2db      	uxtb	r3, r3
			last = 0;
    2802:	2b02      	cmp	r3, #2
    2804:	bf08      	it	eq
    2806:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    2808:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    280a:	7ae3      	ldrb	r3, [r4, #11]
    280c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2810:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    2812:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    2814:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2816:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    2818:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    281a:	46ac      	mov	ip, r5
    281c:	4623      	mov	r3, r4
    281e:	2104      	movs	r1, #4
    2820:	2003      	movs	r0, #3
}
    2822:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    2826:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    2828:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    282a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    282c:	788a      	ldrb	r2, [r1, #2]
    282e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    2830:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    2834:	1a9b      	subs	r3, r3, r2
    2836:	b2db      	uxtb	r3, r3
    2838:	2b01      	cmp	r3, #1
    283a:	d1d3      	bne.n	27e4 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    283c:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    2840:	3a01      	subs	r2, #1
    2842:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    2844:	f1b9 0f00 	cmp.w	r9, #0
    2848:	d0cc      	beq.n	27e4 <ticker_worker+0x2e>
					   ticks_expired -
    284a:	6948      	ldr	r0, [r1, #20]
    284c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    284e:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    2850:	1a28      	subs	r0, r5, r0
    2852:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    2854:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2858:	690b      	ldr	r3, [r1, #16]
    285a:	6a49      	ldr	r1, [r1, #36]	; 0x24
    285c:	47c8      	blx	r9
    285e:	e7c1      	b.n	27e4 <ticker_worker+0x2e>
    2860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002864 <ticker_job>:
{
    2864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    2868:	7fc2      	ldrb	r2, [r0, #31]
{
    286a:	b093      	sub	sp, #76	; 0x4c
    286c:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    286e:	2a00      	cmp	r2, #0
    2870:	f040 83b5 	bne.w	2fde <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    2874:	6943      	ldr	r3, [r0, #20]
    2876:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    2878:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    287a:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    287c:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    287e:	7ac0      	ldrb	r0, [r0, #11]
    2880:	4298      	cmp	r0, r3
    2882:	f000 808f 	beq.w	29a4 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    2886:	440b      	add	r3, r1
    2888:	b2db      	uxtb	r3, r3
			first = 0;
    288a:	2b02      	cmp	r3, #2
    288c:	bf08      	it	eq
    288e:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    2890:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    2894:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    2898:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    289a:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    289e:	9b05      	ldr	r3, [sp, #20]
    28a0:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    28a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    28a6:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    28aa:	f89b 301d 	ldrb.w	r3, [fp, #29]
    28ae:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    28b0:	f8db 3000 	ldr.w	r3, [fp]
    28b4:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    28b6:	f8db 3004 	ldr.w	r3, [fp, #4]
    28ba:	930b      	str	r3, [sp, #44]	; 0x2c
    28bc:	f89b 3009 	ldrb.w	r3, [fp, #9]
    28c0:	3b01      	subs	r3, #1
    28c2:	b2db      	uxtb	r3, r3
    28c4:	9302      	str	r3, [sp, #8]
	pending = 0;
    28c6:	2300      	movs	r3, #0
    28c8:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    28ca:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    28ce:	9b02      	ldr	r3, [sp, #8]
    28d0:	2bff      	cmp	r3, #255	; 0xff
    28d2:	d16a      	bne.n	29aa <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    28d4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    28d8:	9a03      	ldr	r2, [sp, #12]
    28da:	1a9b      	subs	r3, r3, r2
    28dc:	bf18      	it	ne
    28de:	2301      	movne	r3, #1
    28e0:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    28e2:	9b01      	ldr	r3, [sp, #4]
    28e4:	b1e3      	cbz	r3, 2920 <ticker_job+0xbc>
	node = &instance->node[0];
    28e6:	f8db 3000 	ldr.w	r3, [fp]
    28ea:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    28ec:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    28f0:	f89b 601d 	ldrb.w	r6, [fp, #29]
    28f4:	2eff      	cmp	r6, #255	; 0xff
    28f6:	d00c      	beq.n	2912 <ticker_job+0xae>
		ticker = &node[id_expired];
    28f8:	b237      	sxth	r7, r6
    28fa:	9b04      	ldr	r3, [sp, #16]
    28fc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    2900:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    2904:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    2906:	4545      	cmp	r5, r8
    2908:	f240 8136 	bls.w	2b78 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    290c:	eba5 0508 	sub.w	r5, r5, r8
    2910:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    2912:	9b02      	ldr	r3, [sp, #8]
    2914:	9a01      	ldr	r2, [sp, #4]
    2916:	9903      	ldr	r1, [sp, #12]
    2918:	42b1      	cmp	r1, r6
    291a:	bf18      	it	ne
    291c:	4613      	movne	r3, r2
    291e:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    2920:	f8db 3000 	ldr.w	r3, [fp]
    2924:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    2926:	f8db 3004 	ldr.w	r3, [fp, #4]
    292a:	9310      	str	r3, [sp, #64]	; 0x40
    292c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    2930:	3b01      	subs	r3, #1
    2932:	b2db      	uxtb	r3, r3
    2934:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    2936:	9b01      	ldr	r3, [sp, #4]
    2938:	2bff      	cmp	r3, #255	; 0xff
    293a:	f040 8170 	bne.w	2c1e <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    293e:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2942:	9a03      	ldr	r2, [sp, #12]
    2944:	4293      	cmp	r3, r2
	if (!pending) {
    2946:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    2948:	f040 8340 	bne.w	2fcc <ticker_job+0x768>
	if (!pending) {
    294c:	b95b      	cbnz	r3, 2966 <ticker_job+0x102>
    294e:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    2952:	f8db 3004 	ldr.w	r3, [fp, #4]
    2956:	9301      	str	r3, [sp, #4]
    2958:	3c01      	subs	r4, #1
    295a:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    295c:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    2960:	2cff      	cmp	r4, #255	; 0xff
    2962:	f040 82a0 	bne.w	2ea6 <ticker_job+0x642>
	instance->job_guard = 0;
    2966:	2300      	movs	r3, #0
    2968:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    296c:	9b02      	ldr	r3, [sp, #8]
    296e:	b14b      	cbz	r3, 2984 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    2970:	f89b 301d 	ldrb.w	r3, [fp, #29]
    2974:	2bff      	cmp	r3, #255	; 0xff
    2976:	f040 82e9 	bne.w	2f4c <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    297a:	f006 ff25 	bl	97c8 <cntr_stop>
    297e:	b908      	cbnz	r0, 2984 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    2980:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    2984:	f89b 301f 	ldrb.w	r3, [fp, #31]
    2988:	2b00      	cmp	r3, #0
    298a:	f000 8328 	beq.w	2fde <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    298e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2992:	465b      	mov	r3, fp
    2994:	2201      	movs	r2, #1
    2996:	2103      	movs	r1, #3
    2998:	2004      	movs	r0, #4
    299a:	46a4      	mov	ip, r4
}
    299c:	b013      	add	sp, #76	; 0x4c
    299e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    29a2:	4760      	bx	ip
		flag_elapsed = 0;
    29a4:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    29a6:	4690      	mov	r8, r2
    29a8:	e77f      	b.n	28aa <ticker_job+0x46>
		user = &users[count_user];
    29aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29ac:	9a02      	ldr	r2, [sp, #8]
    29ae:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    29b6:	78f9      	ldrb	r1, [r7, #3]
    29b8:	78be      	ldrb	r6, [r7, #2]
    29ba:	428e      	cmp	r6, r1
    29bc:	f000 80d7 	beq.w	2b6e <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    29c0:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    29c2:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    29c4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    29c8:	0112      	lsls	r2, r2, #4
    29ca:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    29cc:	1c73      	adds	r3, r6, #1
    29ce:	b2db      	uxtb	r3, r3
				middle = 0;
    29d0:	4298      	cmp	r0, r3
    29d2:	bf08      	it	eq
    29d4:	2300      	moveq	r3, #0
			user->middle = middle;
    29d6:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    29d8:	9b06      	ldr	r3, [sp, #24]
    29da:	5c9a      	ldrb	r2, [r3, r2]
    29dc:	2a03      	cmp	r2, #3
    29de:	d9eb      	bls.n	29b8 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    29e0:	2a05      	cmp	r2, #5
    29e2:	d817      	bhi.n	2a14 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    29e4:	7869      	ldrb	r1, [r5, #1]
    29e6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    29ea:	930a      	str	r3, [sp, #40]	; 0x28
    29ec:	980a      	ldr	r0, [sp, #40]	; 0x28
    29ee:	9b04      	ldr	r3, [sp, #16]
    29f0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    29f4:	7863      	ldrb	r3, [r4, #1]
    29f6:	78a0      	ldrb	r0, [r4, #2]
    29f8:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    29fa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    29fe:	d009      	beq.n	2a14 <ticker_job+0x1b0>
			    (state == 0) ||
    2a00:	2a04      	cmp	r2, #4
    2a02:	d10c      	bne.n	2a1e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    2a04:	686a      	ldr	r2, [r5, #4]
    2a06:	b952      	cbnz	r2, 2a1e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    2a08:	68aa      	ldr	r2, [r5, #8]
    2a0a:	b942      	cbnz	r2, 2a1e <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    2a0c:	68ea      	ldr	r2, [r5, #12]
    2a0e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    2a12:	d104      	bne.n	2a1e <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    2a14:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2a16:	4628      	mov	r0, r5
    2a18:	f7ff fec3 	bl	27a2 <ticker_job_op_cb>
    2a1c:	e7cb      	b.n	29b6 <ticker_job+0x152>
			if (state == 1) {
    2a1e:	2b01      	cmp	r3, #1
    2a20:	f040 809b 	bne.w	2b5a <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2a24:	4658      	mov	r0, fp
    2a26:	f7ff fe72 	bl	270e <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2a2a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2a2c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2a2e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    2a30:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    2a32:	f040 8084 	bne.w	2b3e <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    2a36:	f8db 3014 	ldr.w	r3, [fp, #20]
    2a3a:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2a3c:	f006 fedc 	bl	97f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a40:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    2a42:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a44:	1ac3      	subs	r3, r0, r3
    2a46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    2a4a:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    2a4c:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2a4e:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2a50:	bf9e      	ittt	ls
    2a52:	6962      	ldrls	r2, [r4, #20]
    2a54:	1b92      	subls	r2, r2, r6
    2a56:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    2a58:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    2a5a:	bf96      	itet	ls
    2a5c:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    2a5e:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    2a60:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    2a62:	b18a      	cbz	r2, 2a88 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    2a64:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    2a66:	b179      	cbz	r1, 2a88 <ticker_job+0x224>
		user_op->params.update.lazy--;
    2a68:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    2a6c:	fa1f fe8e 	uxth.w	lr, lr
    2a70:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2a74:	429a      	cmp	r2, r3
    2a76:	d32b      	bcc.n	2ad0 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    2a78:	f8df 9324 	ldr.w	r9, [pc, #804]	; 2da0 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    2a7c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    2a80:	45e6      	cmp	lr, ip
    2a82:	d847      	bhi.n	2b14 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    2a84:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    2a88:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2a8a:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    2a8c:	4413      	add	r3, r2
    2a8e:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    2a90:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    2a92:	6963      	ldr	r3, [r4, #20]
    2a94:	4413      	add	r3, r2
    2a96:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    2a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2a9a:	4620      	mov	r0, r4
    2a9c:	f7ff fe63 	bl	2766 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    2aa0:	69a2      	ldr	r2, [r4, #24]
    2aa2:	892b      	ldrh	r3, [r5, #8]
    2aa4:	4413      	add	r3, r2
    2aa6:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    2aa8:	896a      	ldrh	r2, [r5, #10]
    2aaa:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    2aac:	bf8c      	ite	hi
    2aae:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    2ab0:	2300      	movls	r3, #0
    2ab2:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    2ab4:	7bab      	ldrb	r3, [r5, #14]
    2ab6:	b103      	cbz	r3, 2aba <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    2ab8:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    2aba:	9b04      	ldr	r3, [sp, #16]
    2abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2abe:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    2ac2:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    2ac4:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    2ac8:	3301      	adds	r3, #1
    2aca:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    2acc:	2100      	movs	r1, #0
    2ace:	e7a2      	b.n	2a16 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    2ad0:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    2ad4:	45e6      	cmp	lr, ip
    2ad6:	d2cf      	bcs.n	2a78 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    2ad8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2ada:	4eaf      	ldr	r6, [pc, #700]	; (2d98 <ticker_job+0x534>)
    2adc:	48af      	ldr	r0, [pc, #700]	; (2d9c <ticker_job+0x538>)
    2ade:	198e      	adds	r6, r1, r6
    2ae0:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    2ae2:	bf81      	itttt	hi
    2ae4:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    2ae8:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    2aec:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    2af0:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    2af2:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2af4:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    2af6:	bf8c      	ite	hi
    2af8:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    2afc:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    2b00:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    2b02:	4491      	add	r9, r2
			ticker->lazy_current--;
    2b04:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    2b08:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    2b0a:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    2b0e:	f8a4 c01e 	strh.w	ip, [r4, #30]
    2b12:	e7af      	b.n	2a74 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    2b14:	6a66      	ldr	r6, [r4, #36]	; 0x24
    2b16:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    2b18:	48a0      	ldr	r0, [pc, #640]	; (2d9c <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    2b1a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2b1c:	499e      	ldr	r1, [pc, #632]	; (2d98 <ticker_job+0x534>)
    2b1e:	1871      	adds	r1, r6, r1
    2b20:	4281      	cmp	r1, r0
	return 0;
    2b22:	bf8e      	itee	hi
    2b24:	2100      	movhi	r1, #0
		return 1;
    2b26:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    2b28:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    2b2a:	4411      	add	r1, r2
			ticker->lazy_current++;
    2b2c:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    2b30:	bf8c      	ite	hi
    2b32:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    2b34:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    2b36:	440b      	add	r3, r1
			ticker->lazy_current++;
    2b38:	f8a4 c01e 	strh.w	ip, [r4, #30]
    2b3c:	e79e      	b.n	2a7c <ticker_job+0x218>
		ticker->req = ticker->ack;
    2b3e:	78a3      	ldrb	r3, [r4, #2]
    2b40:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    2b42:	786b      	ldrb	r3, [r5, #1]
    2b44:	f89b 201c 	ldrb.w	r2, [fp, #28]
    2b48:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2b4a:	bf01      	itttt	eq
    2b4c:	23ff      	moveq	r3, #255	; 0xff
    2b4e:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    2b52:	2300      	moveq	r3, #0
    2b54:	f8cb 3018 	streq.w	r3, [fp, #24]
    2b58:	e7b8      	b.n	2acc <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    2b5a:	2104      	movs	r1, #4
    2b5c:	465b      	mov	r3, fp
    2b5e:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    2b62:	2201      	movs	r2, #1
    2b64:	4608      	mov	r0, r1
    2b66:	47a0      	blx	r4
				pending = 1;
    2b68:	2301      	movs	r3, #1
				user->middle = prev;
    2b6a:	70be      	strb	r6, [r7, #2]
				pending = 1;
    2b6c:	9307      	str	r3, [sp, #28]
    2b6e:	9b02      	ldr	r3, [sp, #8]
    2b70:	3b01      	subs	r3, #1
    2b72:	b2db      	uxtb	r3, r3
    2b74:	9302      	str	r3, [sp, #8]
    2b76:	e6aa      	b.n	28ce <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    2b78:	f8db 3018 	ldr.w	r3, [fp, #24]
    2b7c:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    2b7e:	bf29      	itett	cs
    2b80:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    2b82:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    2b84:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    2b88:	2300      	movcs	r3, #0
    2b8a:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    2b8e:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    2b90:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    2b92:	b11b      	cbz	r3, 2b9c <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    2b94:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    2b98:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    2b9c:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    2b9e:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    2ba0:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    2ba2:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    2ba6:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    2baa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    2bae:	f1be 0f00 	cmp.w	lr, #0
    2bb2:	d030      	beq.n	2c16 <ticker_job+0x3b2>
    2bb4:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    2bb6:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 2d9c <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    2bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2bbc:	6a21      	ldr	r1, [r4, #32]
    2bbe:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2bc0:	4975      	ldr	r1, [pc, #468]	; (2d98 <ticker_job+0x534>)
    2bc2:	1859      	adds	r1, r3, r1
    2bc4:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    2bc6:	bf9f      	itttt	ls
    2bc8:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    2bcc:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    2bd0:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    2bd4:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    2bd6:	bf92      	itee	ls
    2bd8:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    2bda:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    2bdc:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    2bde:	4473      	add	r3, lr
			while (count--) {
    2be0:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    2be4:	441a      	add	r2, r3
			while (count--) {
    2be6:	d2e8      	bcs.n	2bba <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2be8:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    2bea:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    2bec:	f8db 1014 	ldr.w	r1, [fp, #20]
    2bf0:	eb03 0209 	add.w	r2, r3, r9
    2bf4:	4620      	mov	r0, r4
    2bf6:	f7ff fdb6 	bl	2766 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    2bfa:	8ba3      	ldrh	r3, [r4, #28]
    2bfc:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    2bfe:	2300      	movs	r3, #0
    2c00:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    2c02:	9b04      	ldr	r3, [sp, #16]
    2c04:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    2c08:	7863      	ldrb	r3, [r4, #1]
    2c0a:	3301      	adds	r3, #1
    2c0c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    2c0e:	eba8 0805 	sub.w	r8, r8, r5
    2c12:	46b2      	mov	sl, r6
    2c14:	e66c      	b.n	28f0 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    2c16:	78a3      	ldrb	r3, [r4, #2]
    2c18:	7063      	strb	r3, [r4, #1]
    2c1a:	4656      	mov	r6, sl
    2c1c:	e7f7      	b.n	2c0e <ticker_job+0x3aa>
		user = &users[count_user];
    2c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2c20:	9a01      	ldr	r2, [sp, #4]
    2c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2c26:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    2c28:	685b      	ldr	r3, [r3, #4]
    2c2a:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    2c2c:	9b04      	ldr	r3, [sp, #16]
    2c2e:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    2c32:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    2c36:	f000 808e 	beq.w	2d56 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    2c3a:	fa0f f38a 	sxth.w	r3, sl
    2c3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c42:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    2c44:	46d0      	mov	r8, sl
    2c46:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    2c4a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    2c4e:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    2c50:	f8db 3000 	ldr.w	r3, [fp]
    2c54:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    2c56:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2c58:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    2c5a:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    2c5c:	8be3      	ldrh	r3, [r4, #30]
    2c5e:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    2c60:	bf86      	itte	hi
    2c62:	1a9b      	subhi	r3, r3, r2
    2c64:	b29b      	uxthhi	r3, r3
		skip = 0;
    2c66:	2300      	movls	r3, #0
    2c68:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    2c6a:	fa0f f388 	sxth.w	r3, r8
    2c6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c72:	00db      	lsls	r3, r3, #3
    2c74:	9311      	str	r3, [sp, #68]	; 0x44
    2c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    2c78:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    2c7c:	f8db 0018 	ldr.w	r0, [fp, #24]
    2c80:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    2c82:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    2c86:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    2c88:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    2c8c:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    2c90:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    2c92:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    2c94:	2bff      	cmp	r3, #255	; 0xff
    2c96:	d007      	beq.n	2ca8 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    2c98:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    2c9c:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    2ca0:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    2ca2:	4281      	cmp	r1, r0
    2ca4:	f200 80a9 	bhi.w	2dfa <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    2ca8:	f8de 0018 	ldr.w	r0, [lr, #24]
    2cac:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    2cae:	eb01 0c00 	add.w	ip, r1, r0
    2cb2:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    2cb4:	2eff      	cmp	r6, #255	; 0xff
    2cb6:	f040 80ae 	bne.w	2e16 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    2cba:	980d      	ldr	r0, [sp, #52]	; 0x34
    2cbc:	b130      	cbz	r0, 2ccc <ticker_job+0x468>
    2cbe:	9805      	ldr	r0, [sp, #20]
    2cc0:	4281      	cmp	r1, r0
    2cc2:	f0c0 80bf 	bcc.w	2e44 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    2cc6:	2eff      	cmp	r6, #255	; 0xff
    2cc8:	f040 8185 	bne.w	2fd6 <ticker_job+0x772>
		if (previous == current) {
    2ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    2cce:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    2cd2:	4283      	cmp	r3, r0
			node[previous].next = id;
    2cd4:	bf18      	it	ne
    2cd6:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    2cda:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    2cde:	bf16      	itet	ne
    2ce0:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    2ce4:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    2ce8:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    2cec:	2bff      	cmp	r3, #255	; 0xff
    2cee:	d006      	beq.n	2cfe <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    2cf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2cf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2cf8:	689a      	ldr	r2, [r3, #8]
    2cfa:	1a51      	subs	r1, r2, r1
    2cfc:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    2cfe:	78a3      	ldrb	r3, [r4, #2]
    2d00:	3301      	adds	r3, #1
    2d02:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    2d04:	2100      	movs	r1, #0
			if (user_op) {
    2d06:	2d00      	cmp	r5, #0
    2d08:	d093      	beq.n	2c32 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    2d0a:	4628      	mov	r0, r5
    2d0c:	f7ff fd49 	bl	27a2 <ticker_job_op_cb>
    2d10:	e78f      	b.n	2c32 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    2d12:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    2d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d18:	011b      	lsls	r3, r3, #4
    2d1a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    2d1c:	f109 0201 	add.w	r2, r9, #1
    2d20:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    2d24:	9a04      	ldr	r2, [sp, #16]
    2d26:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    2d28:	454a      	cmp	r2, r9
    2d2a:	bf08      	it	eq
    2d2c:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    2d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d32:	5cd3      	ldrb	r3, [r2, r3]
    2d34:	2b03      	cmp	r3, #3
    2d36:	d10e      	bne.n	2d56 <ticker_job+0x4f2>
				id_insert = user_op->id;
    2d38:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    2d3c:	9b08      	ldr	r3, [sp, #32]
    2d3e:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    2d42:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    2d46:	7862      	ldrb	r2, [r4, #1]
    2d48:	78a3      	ldrb	r3, [r4, #2]
    2d4a:	429a      	cmp	r2, r3
    2d4c:	d009      	beq.n	2d62 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    2d4e:	2101      	movs	r1, #1
    2d50:	4628      	mov	r0, r5
    2d52:	f7ff fd26 	bl	27a2 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    2d56:	9b04      	ldr	r3, [sp, #16]
    2d58:	789b      	ldrb	r3, [r3, #2]
    2d5a:	454b      	cmp	r3, r9
    2d5c:	d1d9      	bne.n	2d12 <ticker_job+0x4ae>
    2d5e:	9b01      	ldr	r3, [sp, #4]
    2d60:	e5e6      	b.n	2930 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    2d62:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    2d64:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    2d68:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    2d6a:	692b      	ldr	r3, [r5, #16]
    2d6c:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    2d6e:	8aab      	ldrh	r3, [r5, #20]
    2d70:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    2d72:	69ab      	ldr	r3, [r5, #24]
    2d74:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    2d76:	69eb      	ldr	r3, [r5, #28]
    2d78:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    2d7a:	6a2b      	ldr	r3, [r5, #32]
    2d7c:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    2d7e:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    2d80:	68ab      	ldr	r3, [r5, #8]
    2d82:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    2d84:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    2d86:	686a      	ldr	r2, [r5, #4]
    2d88:	4620      	mov	r0, r4
    2d8a:	f7ff fcec 	bl	2766 <ticks_to_expire_prep>
	ticker->force = 1;
    2d8e:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    2d90:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    2d92:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    2d94:	70e3      	strb	r3, [r4, #3]
    2d96:	e75b      	b.n	2c50 <ticker_job+0x3ec>
    2d98:	ff172b5a 	.word	0xff172b5a
    2d9c:	7f172b59 	.word	0x7f172b59
    2da0:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    2da4:	6860      	ldr	r0, [r4, #4]
    2da6:	2800      	cmp	r0, #0
    2da8:	d07b      	beq.n	2ea2 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    2daa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2dac:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    2dae:	4b8d      	ldr	r3, [pc, #564]	; (2fe4 <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    2db0:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    2db2:	498d      	ldr	r1, [pc, #564]	; (2fe8 <ticker_job+0x784>)
    2db4:	18d3      	adds	r3, r2, r3
    2db6:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    2db8:	bf9c      	itt	ls
    2dba:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    2dbe:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2dc2:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    2dc4:	bf8b      	itete	hi
    2dc6:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    2dc8:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    2dcc:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    2dce:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2dd0:	4403      	add	r3, r0
		return 1;
    2dd2:	bf98      	it	ls
    2dd4:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2dd6:	4413      	add	r3, r2
			ticker->lazy_current++;
    2dd8:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    2dda:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    2ddc:	3201      	adds	r2, #1
    2dde:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    2de0:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    2de2:	4293      	cmp	r3, r2
    2de4:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    2de8:	bf89      	itett	hi
    2dea:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    2dec:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    2dee:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    2df0:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    2df2:	bf9c      	itt	ls
    2df4:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    2df6:	60a1      	strls	r1, [r4, #8]
    2df8:	e73d      	b.n	2c76 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    2dfa:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    2dfc:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    2dfe:	b946      	cbnz	r6, 2e12 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    2e00:	9f05      	ldr	r7, [sp, #20]
    2e02:	42b8      	cmp	r0, r7
    2e04:	d200      	bcs.n	2e08 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    2e06:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    2e08:	9309      	str	r3, [sp, #36]	; 0x24
    2e0a:	9605      	str	r6, [sp, #20]
    2e0c:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    2e10:	e740      	b.n	2c94 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    2e12:	9306      	str	r3, [sp, #24]
    2e14:	e7f8      	b.n	2e08 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    2e16:	b230      	sxth	r0, r6
    2e18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2e1c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    2e20:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    2e22:	68bf      	ldr	r7, [r7, #8]
    2e24:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    2e26:	4567      	cmp	r7, ip
    2e28:	d20a      	bcs.n	2e40 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    2e2a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    2e2c:	69bf      	ldr	r7, [r7, #24]
    2e2e:	2f00      	cmp	r7, #0
    2e30:	f47f af43 	bne.w	2cba <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    2e34:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    2e36:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    2e3a:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    2e3e:	e739      	b.n	2cb4 <ticker_job+0x450>
			return TICKER_NULL;
    2e40:	26ff      	movs	r6, #255	; 0xff
    2e42:	e73a      	b.n	2cba <ticker_job+0x456>
	while (id_insert !=
    2e44:	9b06      	ldr	r3, [sp, #24]
    2e46:	4598      	cmp	r8, r3
    2e48:	f43f af59 	beq.w	2cfe <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    2e4c:	9b06      	ldr	r3, [sp, #24]
    2e4e:	2bff      	cmp	r3, #255	; 0xff
    2e50:	d0a8      	beq.n	2da4 <ticker_job+0x540>
    2e52:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    2e54:	b233      	sxth	r3, r6
    2e56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e5a:	9305      	str	r3, [sp, #20]
    2e5c:	9a05      	ldr	r2, [sp, #20]
    2e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2e60:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    2e64:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    2e66:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    2e68:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    2e6a:	bf88      	it	hi
    2e6c:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    2e6e:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    2e70:	bf8c      	ite	hi
    2e72:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    2e74:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    2e76:	2a00      	cmp	r2, #0
    2e78:	d094      	beq.n	2da4 <ticker_job+0x540>
    2e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2e7c:	4293      	cmp	r3, r2
    2e7e:	d891      	bhi.n	2da4 <ticker_job+0x540>
			    skip_collide <= skip &&
    2e80:	78fa      	ldrb	r2, [r7, #3]
    2e82:	78e3      	ldrb	r3, [r4, #3]
    2e84:	429a      	cmp	r2, r3
    2e86:	d28d      	bcs.n	2da4 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    2e88:	4631      	mov	r1, r6
    2e8a:	4658      	mov	r0, fp
    2e8c:	f7ff fc3f 	bl	270e <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    2e90:	78bb      	ldrb	r3, [r7, #2]
    2e92:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    2e94:	9a05      	ldr	r2, [sp, #20]
    2e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    2e98:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    2e9a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    2e9e:	46b2      	mov	sl, r6
    2ea0:	e6e9      	b.n	2c76 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    2ea2:	2101      	movs	r1, #1
    2ea4:	e72f      	b.n	2d06 <ticker_job+0x4a2>
		user = &users[count_user];
    2ea6:	9b01      	ldr	r3, [sp, #4]
    2ea8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    2eac:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    2eae:	786b      	ldrb	r3, [r5, #1]
    2eb0:	78ea      	ldrb	r2, [r5, #3]
    2eb2:	429a      	cmp	r2, r3
    2eb4:	d102      	bne.n	2ebc <ticker_job+0x658>
    2eb6:	3c01      	subs	r4, #1
    2eb8:	b2e4      	uxtb	r4, r4
    2eba:	e551      	b.n	2960 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    2ebc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2ec0:	011b      	lsls	r3, r3, #4
    2ec2:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    2ec4:	5cf3      	ldrb	r3, [r6, r3]
    2ec6:	2b01      	cmp	r3, #1
    2ec8:	d025      	beq.n	2f16 <ticker_job+0x6b2>
    2eca:	2b02      	cmp	r3, #2
    2ecc:	d12a      	bne.n	2f24 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    2ece:	f8d2 c004 	ldr.w	ip, [r2, #4]
    2ed2:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    2ed4:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    2ed8:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    2edc:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    2ee0:	28ff      	cmp	r0, #255	; 0xff
    2ee2:	d004      	beq.n	2eee <ticker_job+0x68a>
    2ee4:	6819      	ldr	r1, [r3, #0]
    2ee6:	f8db 7014 	ldr.w	r7, [fp, #20]
    2eea:	42b9      	cmp	r1, r7
    2eec:	d023      	beq.n	2f36 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    2eee:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    2ef2:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    2ef6:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    2ef8:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    2efa:	29ff      	cmp	r1, #255	; 0xff
    2efc:	d007      	beq.n	2f0e <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    2efe:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    2f02:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    2f06:	6987      	ldr	r7, [r0, #24]
    2f08:	6880      	ldr	r0, [r0, #8]
    2f0a:	b1df      	cbz	r7, 2f44 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    2f0c:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    2f0e:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    2f12:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    2f16:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    2f18:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    2f1c:	b113      	cbz	r3, 2f24 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    2f1e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2f20:	2000      	movs	r0, #0
    2f22:	4798      	blx	r3
			first = user->first + 1;
    2f24:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    2f26:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    2f28:	3301      	adds	r3, #1
    2f2a:	b2db      	uxtb	r3, r3
				first = 0;
    2f2c:	429a      	cmp	r2, r3
    2f2e:	bf08      	it	eq
    2f30:	2300      	moveq	r3, #0
			user->first = first;
    2f32:	706b      	strb	r3, [r5, #1]
    2f34:	e7bb      	b.n	2eae <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    2f36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    2f3a:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    2f3e:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    2f42:	e7da      	b.n	2efa <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    2f44:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    2f46:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    2f4a:	e7d6      	b.n	2efa <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    2f4c:	9b03      	ldr	r3, [sp, #12]
    2f4e:	2bff      	cmp	r3, #255	; 0xff
    2f50:	d107      	bne.n	2f62 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    2f52:	f006 fc51 	bl	97f8 <cntr_cnt_get>
    2f56:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    2f58:	f006 fc28 	bl	97ac <cntr_start>
    2f5c:	b908      	cbnz	r0, 2f62 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    2f5e:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    2f62:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    2f66:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    2f6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    2f6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    2f72:	260a      	movs	r6, #10
    2f74:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    2f76:	f006 fc3f 	bl	97f8 <cntr_cnt_get>
		cc = instance->ticks_current;
    2f7a:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2f7e:	1b03      	subs	r3, r0, r4
    2f80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    2f84:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    2f86:	42ab      	cmp	r3, r5
    2f88:	bf2c      	ite	cs
    2f8a:	18e4      	addcs	r4, r4, r3
    2f8c:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    2f8e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    2f92:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    2f94:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    2f98:	4620      	mov	r0, r4
    2f9a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    2f9c:	f006 fc2c 	bl	97f8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2fa0:	1bc0      	subs	r0, r0, r7
    2fa2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fa6:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    2fa8:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2faa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    2fae:	42a0      	cmp	r0, r4
    2fb0:	f67f ace8 	bls.w	2984 <ticker_job+0x120>
		LL_ASSERT(i);
    2fb4:	3e01      	subs	r6, #1
    2fb6:	d1de      	bne.n	2f76 <ticker_job+0x712>
    2fb8:	4040      	eors	r0, r0
    2fba:	f380 8811 	msr	BASEPRI, r0
    2fbe:	f04f 0004 	mov.w	r0, #4
    2fc2:	df02      	svc	2
	instance->job_guard = 0;
    2fc4:	2300      	movs	r3, #0
    2fc6:	f88b 301e 	strb.w	r3, [fp, #30]
    2fca:	e4d1      	b.n	2970 <ticker_job+0x10c>
	if (!pending) {
    2fcc:	2b00      	cmp	r3, #0
    2fce:	d1f9      	bne.n	2fc4 <ticker_job+0x760>
		flag_compare_update = 1;
    2fd0:	2301      	movs	r3, #1
    2fd2:	9302      	str	r3, [sp, #8]
    2fd4:	e4bb      	b.n	294e <ticker_job+0xea>
	while (id_insert !=
    2fd6:	45b0      	cmp	r8, r6
    2fd8:	f47f af3c 	bne.w	2e54 <ticker_job+0x5f0>
    2fdc:	e68f      	b.n	2cfe <ticker_job+0x49a>
}
    2fde:	b013      	add	sp, #76	; 0x4c
    2fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fe4:	ff172b5a 	.word	0xff172b5a
    2fe8:	7f172b59 	.word	0x7f172b59

00002fec <ticker_init>:
{
    2fec:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    2fee:	4d1a      	ldr	r5, [pc, #104]	; (3058 <ticker_init+0x6c>)
{
    2ff0:	9f05      	ldr	r7, [sp, #20]
    2ff2:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    2ff6:	262c      	movs	r6, #44	; 0x2c
    2ff8:	4346      	muls	r6, r0
    2ffa:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    2ffe:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    3000:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    3004:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    3006:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    300a:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    300e:	3b01      	subs	r3, #1
    3010:	b2db      	uxtb	r3, r3
    3012:	2bff      	cmp	r3, #255	; 0xff
    3014:	d111      	bne.n	303a <ticker_init+0x4e>
	if (count_op) {
    3016:	b9ec      	cbnz	r4, 3054 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    3018:	222c      	movs	r2, #44	; 0x2c
    301a:	fb02 5200 	mla	r2, r2, r0, r5
    301e:	9908      	ldr	r1, [sp, #32]
    3020:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    3022:	9909      	ldr	r1, [sp, #36]	; 0x24
    3024:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    3026:	990a      	ldr	r1, [sp, #40]	; 0x28
    3028:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    302a:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    302c:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    302e:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    3030:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    3032:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    3034:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    3036:	4620      	mov	r0, r4
    3038:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    303a:	b21a      	sxth	r2, r3
    303c:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    3040:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    3042:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    3046:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    304a:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    304c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    3050:	b2e4      	uxtb	r4, r4
    3052:	e7dc      	b.n	300e <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    3054:	2001      	movs	r0, #1
}
    3056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3058:	20000274 	.word	0x20000274

0000305c <ticker_trigger>:
	instance = &_instance[instance_index];
    305c:	4a07      	ldr	r2, [pc, #28]	; (307c <ticker_trigger+0x20>)
    305e:	212c      	movs	r1, #44	; 0x2c
    3060:	fb00 2301 	mla	r3, r0, r1, r2
{
    3064:	b410      	push	{r4}
	if (instance->sched_cb) {
    3066:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    3068:	b12c      	cbz	r4, 3076 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    306a:	46a4      	mov	ip, r4
    306c:	2201      	movs	r2, #1
    306e:	2103      	movs	r1, #3
    3070:	2002      	movs	r0, #2
}
    3072:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    3074:	4760      	bx	ip
}
    3076:	bc10      	pop	{r4}
    3078:	4770      	bx	lr
    307a:	bf00      	nop
    307c:	20000274 	.word	0x20000274

00003080 <ticker_start>:
{
    3080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3084:	4f25      	ldr	r7, [pc, #148]	; (311c <ticker_start+0x9c>)
    3086:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    308a:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    308c:	fb08 7000 	mla	r0, r8, r0, r7
    3090:	fa0f fc81 	sxth.w	ip, r1
    3094:	f8d0 e004 	ldr.w	lr, [r0, #4]
    3098:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    309c:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    30a0:	78f4      	ldrb	r4, [r6, #3]
    30a2:	1c65      	adds	r5, r4, #1
    30a4:	b2ed      	uxtb	r5, r5
		last = 0;
    30a6:	45ae      	cmp	lr, r5
    30a8:	bf98      	it	ls
    30aa:	2500      	movls	r5, #0
	if (last == user->first) {
    30ac:	f896 e001 	ldrb.w	lr, [r6, #1]
    30b0:	45ae      	cmp	lr, r5
    30b2:	d02f      	beq.n	3114 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    30b4:	f8d6 c004 	ldr.w	ip, [r6, #4]
    30b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    30bc:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    30c0:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    30c4:	f04f 0a03 	mov.w	sl, #3
    30c8:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    30cc:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    30ce:	9b08      	ldr	r3, [sp, #32]
    30d0:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    30d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30d4:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    30d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    30d8:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    30da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    30dc:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    30de:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    30e2:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    30e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    30e6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    30e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    30ea:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    30ec:	2302      	movs	r3, #2
    30ee:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    30f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    30f2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    30f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    30f6:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    30f8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    30fa:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    30fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    30fe:	6a03      	ldr	r3, [r0, #32]
    3100:	4608      	mov	r0, r1
    3102:	4798      	blx	r3
    3104:	fb09 7308 	mla	r3, r9, r8, r7
    3108:	2200      	movs	r2, #0
    310a:	2104      	movs	r1, #4
    310c:	47a8      	blx	r5
	return user_op->status;
    310e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3114:	2001      	movs	r0, #1
}
    3116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    311a:	bf00      	nop
    311c:	20000274 	.word	0x20000274

00003120 <ticker_update>:
{
    3120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3124:	f8df 8090 	ldr.w	r8, [pc, #144]	; 31b8 <ticker_update+0x98>
    3128:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    312c:	fb0a 8e00 	mla	lr, sl, r0, r8
    3130:	b20f      	sxth	r7, r1
    3132:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    3136:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3138:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    313c:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    3140:	78c4      	ldrb	r4, [r0, #3]
    3142:	1c66      	adds	r6, r4, #1
    3144:	b2f6      	uxtb	r6, r6
		last = 0;
    3146:	42b5      	cmp	r5, r6
    3148:	bf98      	it	ls
    314a:	2600      	movls	r6, #0
	if (last == user->first) {
    314c:	7845      	ldrb	r5, [r0, #1]
    314e:	42b5      	cmp	r5, r6
    3150:	d02f      	beq.n	31b2 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    3152:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3156:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    315a:	0125      	lsls	r5, r4, #4
    315c:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    3160:	2704      	movs	r7, #4
    3162:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    3166:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    3168:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    316c:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    316e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    3172:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    3174:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    3178:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    317a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    317e:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    3180:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    3184:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    3186:	2302      	movs	r3, #2
    3188:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    318a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    318c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    318e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    3190:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3192:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3194:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3196:	f8de 3020 	ldr.w	r3, [lr, #32]
    319a:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    319e:	4608      	mov	r0, r1
    31a0:	4798      	blx	r3
    31a2:	fb09 830a 	mla	r3, r9, sl, r8
    31a6:	2200      	movs	r2, #0
    31a8:	4639      	mov	r1, r7
    31aa:	47a8      	blx	r5
	return user_op->status;
    31ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    31ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    31b2:	2001      	movs	r0, #1
}
    31b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    31b8:	20000274 	.word	0x20000274

000031bc <ticker_stop>:
{
    31bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    31c0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3230 <ticker_stop+0x74>
    31c4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    31c8:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    31cc:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    31ce:	f8de 0004 	ldr.w	r0, [lr, #4]
    31d2:	b20e      	sxth	r6, r1
    31d4:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    31d8:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    31dc:	78fc      	ldrb	r4, [r7, #3]
    31de:	1c65      	adds	r5, r4, #1
    31e0:	b2ed      	uxtb	r5, r5
		last = 0;
    31e2:	42a8      	cmp	r0, r5
    31e4:	bf98      	it	ls
    31e6:	2500      	movls	r5, #0
	if (last == user->first) {
    31e8:	7878      	ldrb	r0, [r7, #1]
    31ea:	42a8      	cmp	r0, r5
    31ec:	d01d      	beq.n	322a <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    31ee:	6878      	ldr	r0, [r7, #4]
    31f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    31f4:	0124      	lsls	r4, r4, #4
    31f6:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    31f8:	f04f 0c05 	mov.w	ip, #5
    31fc:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    3200:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    3202:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    3204:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    3206:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3208:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    320a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    320c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    320e:	f8de 3020 	ldr.w	r3, [lr, #32]
    3212:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3216:	4608      	mov	r0, r1
    3218:	4798      	blx	r3
    321a:	fb08 930a 	mla	r3, r8, sl, r9
    321e:	2200      	movs	r2, #0
    3220:	2104      	movs	r1, #4
    3222:	47a0      	blx	r4
	return user_op->status;
    3224:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    322a:	2001      	movs	r0, #1
}
    322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3230:	20000274 	.word	0x20000274

00003234 <ticker_next_slot_get>:
{
    3234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3238:	f8df 8078 	ldr.w	r8, [pc, #120]	; 32b4 <ticker_next_slot_get+0x80>
    323c:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    3240:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3242:	fb0a 8000 	mla	r0, sl, r0, r8
    3246:	fa0f fe81 	sxth.w	lr, r1
    324a:	6845      	ldr	r5, [r0, #4]
    324c:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    3250:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    3254:	78fc      	ldrb	r4, [r7, #3]
    3256:	1c66      	adds	r6, r4, #1
    3258:	b2f6      	uxtb	r6, r6
		last = 0;
    325a:	42b5      	cmp	r5, r6
    325c:	bf98      	it	ls
    325e:	2600      	movls	r6, #0
	if (last == user->first) {
    3260:	787d      	ldrb	r5, [r7, #1]
    3262:	42b5      	cmp	r5, r6
    3264:	d023      	beq.n	32ae <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    3266:	f8d7 c004 	ldr.w	ip, [r7, #4]
    326a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    326e:	0125      	lsls	r5, r4, #4
    3270:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    3274:	f04f 0e02 	mov.w	lr, #2
    3278:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    327c:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    327e:	9b08      	ldr	r3, [sp, #32]
    3280:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    3282:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3284:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    3286:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    3288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    328a:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    328c:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    328e:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3292:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3294:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3296:	6a45      	ldr	r5, [r0, #36]	; 0x24
    3298:	6a03      	ldr	r3, [r0, #32]
    329a:	4608      	mov	r0, r1
    329c:	4798      	blx	r3
    329e:	fb09 830a 	mla	r3, r9, sl, r8
    32a2:	2200      	movs	r2, #0
    32a4:	2104      	movs	r1, #4
    32a6:	47a8      	blx	r5
	return user_op->status;
    32a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    32aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    32ae:	2001      	movs	r0, #1
}
    32b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32b4:	20000274 	.word	0x20000274

000032b8 <ticker_job_idle_get>:
{
    32b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    32bc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 332c <ticker_job_idle_get+0x74>
    32c0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    32c4:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    32c8:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    32ca:	f8de 0004 	ldr.w	r0, [lr, #4]
    32ce:	b20e      	sxth	r6, r1
    32d0:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    32d4:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    32d8:	78fc      	ldrb	r4, [r7, #3]
    32da:	1c65      	adds	r5, r4, #1
    32dc:	b2ed      	uxtb	r5, r5
		last = 0;
    32de:	42a8      	cmp	r0, r5
    32e0:	bf98      	it	ls
    32e2:	2500      	movls	r5, #0
	if (last == user->first) {
    32e4:	7878      	ldrb	r0, [r7, #1]
    32e6:	42a8      	cmp	r0, r5
    32e8:	d01d      	beq.n	3326 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    32ea:	6878      	ldr	r0, [r7, #4]
    32ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    32f0:	0124      	lsls	r4, r4, #4
    32f2:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    32f4:	f04f 0c01 	mov.w	ip, #1
    32f8:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    32fc:	20ff      	movs	r0, #255	; 0xff
    32fe:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3300:	2002      	movs	r0, #2
    3302:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3304:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    3306:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3308:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    330a:	f8de 3020 	ldr.w	r3, [lr, #32]
    330e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3312:	4608      	mov	r0, r1
    3314:	4798      	blx	r3
    3316:	fb08 930a 	mla	r3, r8, sl, r9
    331a:	2200      	movs	r2, #0
    331c:	2104      	movs	r1, #4
    331e:	47a0      	blx	r4
	return user_op->status;
    3320:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3326:	2001      	movs	r0, #1
}
    3328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    332c:	20000274 	.word	0x20000274

00003330 <ticker_job_sched>:
{
    3330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3334:	4c08      	ldr	r4, [pc, #32]	; (3358 <ticker_job_sched+0x28>)
    3336:	252c      	movs	r5, #44	; 0x2c
    3338:	fb05 4300 	mla	r3, r5, r0, r4
{
    333c:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    333e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    3340:	6a1b      	ldr	r3, [r3, #32]
    3342:	4608      	mov	r0, r1
    3344:	4798      	blx	r3
    3346:	fb06 4305 	mla	r3, r6, r5, r4
    334a:	46bc      	mov	ip, r7
    334c:	2200      	movs	r2, #0
    334e:	2104      	movs	r1, #4
}
    3350:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3354:	4760      	bx	ip
    3356:	bf00      	nop
    3358:	20000274 	.word	0x20000274

0000335c <ticker_ticks_now_get>:
	return cntr_cnt_get();
    335c:	f006 ba4c 	b.w	97f8 <cntr_cnt_get>

00003360 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3360:	1a40      	subs	r0, r0, r1
}
    3362:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3366:	4770      	bx	lr

00003368 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    3368:	b508      	push	{r3, lr}
    336a:	4603      	mov	r3, r0
	if (addr_type > 1) {
    336c:	2b01      	cmp	r3, #1
{
    336e:	4608      	mov	r0, r1
	if (addr_type > 1) {
    3370:	d80e      	bhi.n	3390 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    3372:	b133      	cbz	r3, 3382 <ll_addr_get+0x1a>
		if (bdaddr) {
    3374:	b119      	cbz	r1, 337e <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    3376:	2206      	movs	r2, #6
    3378:	4906      	ldr	r1, [pc, #24]	; (3394 <ll_addr_get+0x2c>)
    337a:	f7fd f929 	bl	5d0 <memcpy>
		}

		return rnd_addr;
    337e:	4805      	ldr	r0, [pc, #20]	; (3394 <ll_addr_get+0x2c>)
    3380:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    3382:	b119      	cbz	r1, 338c <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    3384:	2206      	movs	r2, #6
    3386:	4904      	ldr	r1, [pc, #16]	; (3398 <ll_addr_get+0x30>)
    3388:	f7fd f922 	bl	5d0 <memcpy>
	}

	return pub_addr;
    338c:	4802      	ldr	r0, [pc, #8]	; (3398 <ll_addr_get+0x30>)
}
    338e:	bd08      	pop	{r3, pc}
		return NULL;
    3390:	2000      	movs	r0, #0
    3392:	bd08      	pop	{r3, pc}
    3394:	200002d2 	.word	0x200002d2
    3398:	200002cc 	.word	0x200002cc

0000339c <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    339c:	b570      	push	{r4, r5, r6, lr}
    339e:	4606      	mov	r6, r0
    33a0:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    33a2:	f004 fe21 	bl	7fe8 <ll_adv_is_enabled>
    33a6:	4604      	mov	r4, r0
    33a8:	b110      	cbz	r0, 33b0 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    33aa:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    33ac:	4620      	mov	r0, r4
    33ae:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    33b0:	f004 fe30 	bl	8014 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    33b4:	f010 0f06 	tst.w	r0, #6
    33b8:	d1f7      	bne.n	33aa <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    33ba:	2206      	movs	r2, #6
    33bc:	4629      	mov	r1, r5
	if (addr_type) {
    33be:	b11e      	cbz	r6, 33c8 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    33c0:	4802      	ldr	r0, [pc, #8]	; (33cc <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    33c2:	f7fd f905 	bl	5d0 <memcpy>
    33c6:	e7f1      	b.n	33ac <ll_addr_set+0x10>
    33c8:	4801      	ldr	r0, [pc, #4]	; (33d0 <ll_addr_set+0x34>)
    33ca:	e7fa      	b.n	33c2 <ll_addr_set+0x26>
    33cc:	200002d2 	.word	0x200002d2
    33d0:	200002cc 	.word	0x200002cc

000033d4 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    33d4:	2300      	movs	r3, #0
    33d6:	7003      	strb	r3, [r0, #0]
	*max = 0;
    33d8:	700b      	strb	r3, [r1, #0]
    33da:	4770      	bx	lr

000033dc <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    33dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    33de:	4607      	mov	r7, r0
    33e0:	460e      	mov	r6, r1
	while (len) {
    33e2:	460c      	mov	r4, r1
    33e4:	1b35      	subs	r5, r6, r4
    33e6:	443d      	add	r5, r7
    33e8:	b18c      	cbz	r4, 340e <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    33ea:	f7fd fca7 	bl	d3c <sys_rand32_get>

		if (len >= sizeof(v)) {
    33ee:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    33f0:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    33f2:	d907      	bls.n	3404 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    33f4:	2204      	movs	r2, #4
    33f6:	eb0d 0102 	add.w	r1, sp, r2
    33fa:	4628      	mov	r0, r5
    33fc:	f7fd f8e8 	bl	5d0 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    3400:	3c04      	subs	r4, #4
    3402:	e7ef      	b.n	33e4 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    3404:	4622      	mov	r2, r4
    3406:	a901      	add	r1, sp, #4
    3408:	4628      	mov	r0, r5
    340a:	f7fd f8e1 	bl	5d0 <memcpy>
			break;
		}
	}

	return 0;
}
    340e:	2000      	movs	r0, #0
    3410:	b003      	add	sp, #12
    3412:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003414 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    3414:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    3416:	4802      	ldr	r0, [pc, #8]	; (3420 <_hci_driver_init+0xc>)
    3418:	f7fe fd8e 	bl	1f38 <bt_hci_driver_register>

	return 0;
}
    341c:	2000      	movs	r0, #0
    341e:	bd08      	pop	{r3, pc}
    3420:	0000b7e4 	.word	0x0000b7e4

00003424 <hci_driver_send>:
{
    3424:	b510      	push	{r4, lr}
	if (!buf->len) {
    3426:	8983      	ldrh	r3, [r0, #12]
{
    3428:	4604      	mov	r4, r0
	if (!buf->len) {
    342a:	b15b      	cbz	r3, 3444 <hci_driver_send+0x20>
	switch (type) {
    342c:	7d03      	ldrb	r3, [r0, #20]
    342e:	b94b      	cbnz	r3, 3444 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    3430:	f000 fa42 	bl	38b8 <hci_cmd_handle>
	if (evt) {
    3434:	b108      	cbz	r0, 343a <hci_driver_send+0x16>
		bt_recv_prio(evt);
    3436:	f7fe fd39 	bl	1eac <bt_recv_prio>
		net_buf_unref(buf);
    343a:	4620      	mov	r0, r4
    343c:	f006 ff8c 	bl	a358 <net_buf_unref>
	return err;
    3440:	2000      	movs	r0, #0
    3442:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3444:	f06f 0015 	mvn.w	r0, #21
}
    3448:	bd10      	pop	{r4, pc}
	...

0000344c <recv_thread>:
{
    344c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    344e:	4d1c      	ldr	r5, [pc, #112]	; (34c0 <recv_thread+0x74>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3450:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3452:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3456:	4628      	mov	r0, r5
    3458:	f007 f9cf 	bl	a7fa <k_queue_get>
		if (node_rx && !buf) {
    345c:	4604      	mov	r4, r0
    345e:	b318      	cbz	r0, 34a8 <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    3460:	f000 fdde 	bl	4020 <hci_get_class>
	switch (class) {
    3464:	2802      	cmp	r0, #2
    3466:	9401      	str	r4, [sp, #4]
    3468:	d821      	bhi.n	34ae <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    346a:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    346c:	bf0e      	itee	eq
    346e:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3470:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    3474:	2001      	movne	r0, #1
    3476:	f7fe ff47 	bl	2308 <bt_buf_get_rx>
    347a:	4604      	mov	r4, r0
		if (buf) {
    347c:	b118      	cbz	r0, 3486 <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    347e:	4601      	mov	r1, r0
    3480:	9801      	ldr	r0, [sp, #4]
    3482:	f000 fd41 	bl	3f08 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3486:	9b01      	ldr	r3, [sp, #4]
    3488:	2100      	movs	r1, #0
    348a:	88d8      	ldrh	r0, [r3, #6]
    348c:	f004 fe88 	bl	81a0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    3490:	a802      	add	r0, sp, #8
    3492:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    3496:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    3498:	f004 fe22 	bl	80e0 <ll_rx_mem_release>
		if (buf) {
    349c:	b124      	cbz	r4, 34a8 <recv_thread+0x5c>
			if (buf->len) {
    349e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    34a0:	4620      	mov	r0, r4
			if (buf->len) {
    34a2:	b153      	cbz	r3, 34ba <recv_thread+0x6e>
				bt_recv(buf);
    34a4:	f7fe fbac 	bl	1c00 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    34a8:	f007 fb52 	bl	ab50 <_impl_k_yield>
    34ac:	e7d1      	b.n	3452 <recv_thread+0x6>
		LL_ASSERT(0);
    34ae:	4040      	eors	r0, r0
    34b0:	f380 8811 	msr	BASEPRI, r0
    34b4:	f04f 0004 	mov.w	r0, #4
    34b8:	df02      	svc	2
				net_buf_unref(buf);
    34ba:	f006 ff4d 	bl	a358 <net_buf_unref>
    34be:	e7f3      	b.n	34a8 <recv_thread+0x5c>
    34c0:	200060ec 	.word	0x200060ec

000034c4 <prio_recv_thread>:
{
    34c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    34c6:	4c0c      	ldr	r4, [pc, #48]	; (34f8 <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    34c8:	4d0c      	ldr	r5, [pc, #48]	; (34fc <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    34ca:	f10d 0102 	add.w	r1, sp, #2
    34ce:	a801      	add	r0, sp, #4
    34d0:	f004 fdce 	bl	8070 <ll_rx_get>
    34d4:	2800      	cmp	r0, #0
    34d6:	d1f8      	bne.n	34ca <prio_recv_thread+0x6>
		if (node_rx) {
    34d8:	9b01      	ldr	r3, [sp, #4]
    34da:	b133      	cbz	r3, 34ea <prio_recv_thread+0x26>
			ll_rx_dequeue();
    34dc:	f005 fa92 	bl	8a04 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    34e0:	9901      	ldr	r1, [sp, #4]
    34e2:	4628      	mov	r0, r5
    34e4:	f007 f965 	bl	a7b2 <k_queue_append>
    34e8:	e7ef      	b.n	34ca <prio_recv_thread+0x6>
    34ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    34ee:	4620      	mov	r0, r4
    34f0:	f007 fc32 	bl	ad58 <_impl_k_sem_take>
    34f4:	e7e9      	b.n	34ca <prio_recv_thread+0x6>
    34f6:	bf00      	nop
    34f8:	200060d4 	.word	0x200060d4
    34fc:	200060ec 	.word	0x200060ec

00003500 <hci_driver_open>:
{
    3500:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    3502:	4814      	ldr	r0, [pc, #80]	; (3554 <hci_driver_open+0x54>)
{
    3504:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    3506:	f005 fb21 	bl	8b4c <ll_init>
	if (err) {
    350a:	4604      	mov	r4, r0
    350c:	b9f8      	cbnz	r0, 354e <hci_driver_open+0x4e>
	hci_init(NULL);
    350e:	f000 fda7 	bl	4060 <hci_init>

    3512:	f06f 0309 	mvn.w	r3, #9
    3516:	9303      	str	r3, [sp, #12]
    3518:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    351c:	4b0e      	ldr	r3, [pc, #56]	; (3558 <hci_driver_open+0x58>)
    351e:	490f      	ldr	r1, [pc, #60]	; (355c <hci_driver_open+0x5c>)
    3520:	9405      	str	r4, [sp, #20]
    3522:	9404      	str	r4, [sp, #16]
    3524:	9402      	str	r4, [sp, #8]
    3526:	9401      	str	r4, [sp, #4]
    3528:	9400      	str	r4, [sp, #0]
    352a:	480d      	ldr	r0, [pc, #52]	; (3560 <hci_driver_open+0x60>)
    352c:	f007 fdd6 	bl	b0dc <_impl_k_thread_create>
    3530:	f06f 0307 	mvn.w	r3, #7
    3534:	9303      	str	r3, [sp, #12]
    3536:	9405      	str	r4, [sp, #20]
    3538:	9404      	str	r4, [sp, #16]
    353a:	9402      	str	r4, [sp, #8]
    353c:	9401      	str	r4, [sp, #4]
    353e:	9400      	str	r4, [sp, #0]
    3540:	4b08      	ldr	r3, [pc, #32]	; (3564 <hci_driver_open+0x64>)
    3542:	4909      	ldr	r1, [pc, #36]	; (3568 <hci_driver_open+0x68>)
    3544:	4809      	ldr	r0, [pc, #36]	; (356c <hci_driver_open+0x6c>)
    3546:	f44f 6280 	mov.w	r2, #1024	; 0x400
    354a:	f007 fdc7 	bl	b0dc <_impl_k_thread_create>
}
    354e:	4620      	mov	r0, r4
    3550:	b006      	add	sp, #24
    3552:	bd10      	pop	{r4, pc}
    3554:	200060d4 	.word	0x200060d4
    3558:	000034c5 	.word	0x000034c5
    355c:	200044a0 	.word	0x200044a0
    3560:	2000363c 	.word	0x2000363c
    3564:	0000344d 	.word	0x0000344d
    3568:	20004660 	.word	0x20004660
    356c:	200035d4 	.word	0x200035d4

00003570 <sys_put_le32>:
	dst[1] = val >> 8;
    3570:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    3574:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    3576:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    3578:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    357a:	0a00      	lsrs	r0, r0, #8
    357c:	704b      	strb	r3, [r1, #1]
    357e:	70c8      	strb	r0, [r1, #3]
    3580:	4770      	bx	lr

00003582 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    3582:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    3584:	3008      	adds	r0, #8
{
    3586:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    3588:	2102      	movs	r1, #2
{
    358a:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    358c:	f006 ff16 	bl	a3bc <net_buf_simple_add>
	hdr->evt = evt;
    3590:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    3592:	7044      	strb	r4, [r0, #1]
    3594:	bd38      	pop	{r3, r4, r5, pc}
	...

00003598 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    3598:	b538      	push	{r3, r4, r5, lr}
    359a:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    359c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    35a0:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    35a2:	f7fe fec1 	bl	2328 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    35a6:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    35a8:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    35aa:	b2d2      	uxtb	r2, r2
    35ac:	210e      	movs	r1, #14
    35ae:	f7ff ffe8 	bl	3582 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    35b2:	6820      	ldr	r0, [r4, #0]
    35b4:	2103      	movs	r1, #3
    35b6:	3008      	adds	r0, #8
    35b8:	f006 ff00 	bl	a3bc <net_buf_simple_add>
	cc->ncmd = 1;
    35bc:	2301      	movs	r3, #1
    35be:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    35c0:	4b05      	ldr	r3, [pc, #20]	; (35d8 <cmd_complete+0x40>)
    35c2:	881b      	ldrh	r3, [r3, #0]
    35c4:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    35c8:	6820      	ldr	r0, [r4, #0]
    35ca:	4629      	mov	r1, r5
    35cc:	3008      	adds	r0, #8
}
    35ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    35d2:	f006 bef3 	b.w	a3bc <net_buf_simple_add>
    35d6:	bf00      	nop
    35d8:	200002d8 	.word	0x200002d8

000035dc <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    35dc:	b570      	push	{r4, r5, r6, lr}
    35de:	4604      	mov	r4, r0
    35e0:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    35e2:	3201      	adds	r2, #1
{
    35e4:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    35e6:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    35e8:	b2d2      	uxtb	r2, r2
    35ea:	213e      	movs	r1, #62	; 0x3e
    35ec:	f7ff ffc9 	bl	3582 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    35f0:	2101      	movs	r1, #1
    35f2:	4620      	mov	r0, r4
    35f4:	f006 fee2 	bl	a3bc <net_buf_simple_add>
	me->subevent = subevt;
    35f8:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    35fa:	4629      	mov	r1, r5
    35fc:	4620      	mov	r0, r4
}
    35fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    3602:	f006 bedb 	b.w	a3bc <net_buf_simple_add>
	...

00003608 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    3608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    360a:	2301      	movs	r3, #1
    360c:	f88d 3001 	strb.w	r3, [sp, #1]
    3610:	2303      	movs	r3, #3
    3612:	f88d 3002 	strb.w	r3, [sp, #2]
    3616:	23ff      	movs	r3, #255	; 0xff
    3618:	f88d 3003 	strb.w	r3, [sp, #3]
    361c:	f88d 3005 	strb.w	r3, [sp, #5]
    3620:	2302      	movs	r3, #2
    3622:	f88d 3006 	strb.w	r3, [sp, #6]
	if (adv->tx_addr) {
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3626:	4b25      	ldr	r3, [pc, #148]	; (36bc <le_advertising_report+0xb4>)
{
    3628:	4607      	mov	r7, r0
    362a:	4610      	mov	r0, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    362c:	2204      	movs	r2, #4
    362e:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3632:	e9d3 2300 	ldrd	r2, r3, [r3]
    3636:	2200      	movs	r2, #0
    3638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    363c:	2400      	movs	r4, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    363e:	4313      	orrs	r3, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3640:	f88d 4000 	strb.w	r4, [sp]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3644:	d038      	beq.n	36b8 <le_advertising_report+0xb0>
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
		return;
	}
#else
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    3646:	4b1e      	ldr	r3, [pc, #120]	; (36c0 <le_advertising_report+0xb8>)
    3648:	e9d3 2300 	ldrd	r2, r3, [r3]
    364c:	2300      	movs	r3, #0
    364e:	f002 0202 	and.w	r2, r2, #2
    3652:	4313      	orrs	r3, r2
    3654:	d030      	beq.n	36b8 <le_advertising_report+0xb0>
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    3656:	783b      	ldrb	r3, [r7, #0]
    3658:	f003 030f 	and.w	r3, r3, #15
    365c:	2b01      	cmp	r3, #1
    365e:	787b      	ldrb	r3, [r7, #1]
		data_len = (adv->len - BDADDR_SIZE);
    3660:	bf1c      	itt	ne
    3662:	1f9c      	subne	r4, r3, #6
    3664:	b2e4      	uxtbne	r4, r4
	} else {
		data_len = 0;
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3666:	4419      	add	r1, r3
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*prssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3668:	f104 020b 	add.w	r2, r4, #11
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    366c:	7a8e      	ldrb	r6, [r1, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    366e:	b2d2      	uxtb	r2, r2
    3670:	2102      	movs	r1, #2
    3672:	f7ff ffb3 	bl	35dc <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    3676:	2301      	movs	r3, #1
    3678:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    367a:	783b      	ldrb	r3, [r7, #0]
    367c:	aa02      	add	r2, sp, #8
    367e:	f003 030f 	and.w	r3, r3, #15
    3682:	4413      	add	r3, r2
	} else {
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */

		adv_info->addr.type = adv->tx_addr;
    3684:	4639      	mov	r1, r7
	adv_info->evt_type = c_adv_type[adv->type];
    3686:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    368a:	7043      	strb	r3, [r0, #1]
		adv_info->addr.type = adv->tx_addr;
    368c:	f811 3b02 	ldrb.w	r3, [r1], #2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3690:	4605      	mov	r5, r0
		adv_info->addr.type = adv->tx_addr;
    3692:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3696:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3698:	2206      	movs	r2, #6
    369a:	3003      	adds	r0, #3
    369c:	f7fc ff98 	bl	5d0 <memcpy>
		       sizeof(bt_addr_t));
	}

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    36a0:	350a      	adds	r5, #10
	adv_info->length = data_len;
    36a2:	f805 4c01 	strb.w	r4, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    36a6:	4276      	negs	r6, r6
    36a8:	b276      	sxtb	r6, r6
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    36aa:	4622      	mov	r2, r4
    36ac:	f107 0108 	add.w	r1, r7, #8
    36b0:	4628      	mov	r0, r5
    36b2:	f7fc ff8d 	bl	5d0 <memcpy>
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
    36b6:	552e      	strb	r6, [r5, r4]
}
    36b8:	b003      	add	sp, #12
    36ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36bc:	20005ec0 	.word	0x20005ec0
    36c0:	20005ec8 	.word	0x20005ec8

000036c4 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    36c4:	b570      	push	{r4, r5, r6, lr}
    36c6:	4604      	mov	r4, r0
    36c8:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    36ca:	4b13      	ldr	r3, [pc, #76]	; (3718 <le_remote_feat_complete+0x54>)
{
    36cc:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    36ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    36d2:	2200      	movs	r2, #0
    36d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    36d8:	4313      	orrs	r3, r2
{
    36da:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    36dc:	d01b      	beq.n	3716 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    36de:	4b0f      	ldr	r3, [pc, #60]	; (371c <le_remote_feat_complete+0x58>)
    36e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    36e4:	2300      	movs	r3, #0
    36e6:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    36ea:	4313      	orrs	r3, r2
    36ec:	d013      	beq.n	3716 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    36ee:	220b      	movs	r2, #11
    36f0:	2104      	movs	r1, #4
    36f2:	f7ff ff73 	bl	35dc <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    36f6:	2208      	movs	r2, #8
	sep->status = status;
    36f8:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    36fa:	f8a0 6001 	strh.w	r6, [r0, #1]
    36fe:	3003      	adds	r0, #3
	if (!status) {
    3700:	b924      	cbnz	r4, 370c <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    3702:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    3704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    3708:	f7fc bf62 	b.w	5d0 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    370c:	2100      	movs	r1, #0
}
    370e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    3712:	f7fc bf89 	b.w	628 <memset>
    3716:	bd70      	pop	{r4, r5, r6, pc}
    3718:	20005ec0 	.word	0x20005ec0
    371c:	20005ec8 	.word	0x20005ec8

00003720 <bt_addr_le_to_str.isra.41>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    3720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    3722:	2803      	cmp	r0, #3
    3724:	d807      	bhi.n	3736 <bt_addr_le_to_str.isra.41+0x16>
    3726:	e8df f000 	tbb	[pc, r0]
    372a:	0a02      	.short	0x0a02
    372c:	0e0c      	.short	0x0e0c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    372e:	4907      	ldr	r1, [pc, #28]	; (374c <bt_addr_le_to_str.isra.41+0x2c>)
		break;
	case BT_ADDR_LE_PUBLIC_ID:
		strcpy(type, "public id");
		break;
	case BT_ADDR_LE_RANDOM_ID:
		strcpy(type, "random id");
    3730:	a801      	add	r0, sp, #4
    3732:	f7fc ff21 	bl	578 <strcpy>
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    3736:	2000      	movs	r0, #0
    3738:	b005      	add	sp, #20
    373a:	f85d fb04 	ldr.w	pc, [sp], #4
		strcpy(type, "random");
    373e:	4904      	ldr	r1, [pc, #16]	; (3750 <bt_addr_le_to_str.isra.41+0x30>)
    3740:	e7f6      	b.n	3730 <bt_addr_le_to_str.isra.41+0x10>
		strcpy(type, "public id");
    3742:	4904      	ldr	r1, [pc, #16]	; (3754 <bt_addr_le_to_str.isra.41+0x34>)
    3744:	e7f4      	b.n	3730 <bt_addr_le_to_str.isra.41+0x10>
		strcpy(type, "random id");
    3746:	4904      	ldr	r1, [pc, #16]	; (3758 <bt_addr_le_to_str.isra.41+0x38>)
    3748:	e7f2      	b.n	3730 <bt_addr_le_to_str.isra.41+0x10>
    374a:	bf00      	nop
    374c:	0000b7ff 	.word	0x0000b7ff
    3750:	0000b806 	.word	0x0000b806
    3754:	0000b80d 	.word	0x0000b80d
    3758:	0000b817 	.word	0x0000b817

0000375c <le_adv_ext_report.isra.43>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3760:	7803      	ldrb	r3, [r0, #0]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    3762:	4615      	mov	r5, r2
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3764:	f003 020f 	and.w	r2, r3, #15
    3768:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    376a:	b085      	sub	sp, #20
    376c:	4606      	mov	r6, r0
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    376e:	f040 808d 	bne.w	388c <le_adv_ext_report.isra.43+0x130>
		  offsetof(struct pdu_adv, payload) + adv->len];
    3772:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    3774:	2a00      	cmp	r2, #0
    3776:	f000 8089 	beq.w	388c <le_adv_ext_report.isra.43+0x130>
		if (!p->ext_hdr_len) {
    377a:	7880      	ldrb	r0, [r0, #2]
    377c:	0680      	lsls	r0, r0, #26
    377e:	d075      	beq.n	386c <le_adv_ext_report.isra.43+0x110>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3780:	4411      	add	r1, r2
		ptr = (u8_t *)h + sizeof(*h);
    3782:	1d34      	adds	r4, r6, #4
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3784:	7a8a      	ldrb	r2, [r1, #10]
    3786:	9200      	str	r2, [sp, #0]
		if (h->adv_addr) {
    3788:	78f2      	ldrb	r2, [r6, #3]
    378a:	07d7      	lsls	r7, r2, #31
    378c:	d50f      	bpl.n	37ae <le_adv_ext_report.isra.43+0x52>
			addr.type = adv->tx_addr;
    378e:	f3c3 1380 	ubfx	r3, r3, #6, #1
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    3792:	4621      	mov	r1, r4
    3794:	2206      	movs	r2, #6
    3796:	f10d 0009 	add.w	r0, sp, #9
			addr.type = adv->tx_addr;
    379a:	f88d 3008 	strb.w	r3, [sp, #8]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    379e:	f7fc ff17 	bl	5d0 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    37a2:	f89d 0008 	ldrb.w	r0, [sp, #8]
			ptr += BDADDR_SIZE;
    37a6:	f106 040a 	add.w	r4, r6, #10
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    37aa:	f7ff ffb9 	bl	3720 <bt_addr_le_to_str.isra.41>
		if(h->tgt_addr){
    37ae:	78f2      	ldrb	r2, [r6, #3]
    37b0:	0790      	lsls	r0, r2, #30
			ptr += BDADDR_SIZE;
    37b2:	bf48      	it	mi
    37b4:	3406      	addmi	r4, #6
		if(h->adi){
    37b6:	f012 0908 	ands.w	r9, r2, #8
    37ba:	d05e      	beq.n	387a <le_adv_ext_report.isra.43+0x11e>
			sid_for_info = adi_ptr->sid;
    37bc:	7867      	ldrb	r7, [r4, #1]
    37be:	ea4f 1a17 	mov.w	sl, r7, lsr #4
			if(adi_ptr->sid == 0x04){
    37c2:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    37c6:	2f40      	cmp	r7, #64	; 0x40
    37c8:	d053      	beq.n	3872 <le_adv_ext_report.isra.43+0x116>
			}else if(adi_ptr->sid == 0x02){
    37ca:	f1a7 0120 	sub.w	r1, r7, #32
    37ce:	424f      	negs	r7, r1
    37d0:	414f      	adcs	r7, r1
	bool aux_adi_present = false;
    37d2:	f04f 0900 	mov.w	r9, #0
			ptr += sizeof(*adi_ptr);
    37d6:	46a3      	mov	fp, r4
    37d8:	3402      	adds	r4, #2
		if(h->aux_ptr){
    37da:	f012 0310 	ands.w	r3, r2, #16
			aux_ptr_present = true;
    37de:	bf1c      	itt	ne
    37e0:	2301      	movne	r3, #1
			ptr += sizeof(*ap);
    37e2:	3403      	addne	r4, #3
		if (h->tx_pwr) {
    37e4:	0652      	lsls	r2, r2, #25
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    37e6:	78b2      	ldrb	r2, [r6, #2]
    37e8:	9301      	str	r3, [sp, #4]
    37ea:	f3c2 0105 	ubfx	r1, r2, #0, #6
    37ee:	7872      	ldrb	r2, [r6, #1]
    37f0:	eba2 0201 	sub.w	r2, r2, r1
    37f4:	b2d2      	uxtb	r2, r2
    37f6:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    37fa:	f102 0218 	add.w	r2, r2, #24
    37fe:	b2d2      	uxtb	r2, r2
    3800:	4628      	mov	r0, r5
    3802:	f04f 010d 	mov.w	r1, #13
			ptr++;
    3806:	bf48      	it	mi
    3808:	3401      	addmi	r4, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    380a:	f7ff fee7 	bl	35dc <meta_evt>
		sep->num_reports = 1;
    380e:	2201      	movs	r2, #1
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    3810:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    3814:	4605      	mov	r5, r0
		sep->num_reports = 1;
    3816:	7002      	strb	r2, [r0, #0]
		if( aux_adi_present && aux_ptr_present){ //aux packet
    3818:	9b01      	ldr	r3, [sp, #4]
    381a:	f1b9 0f00 	cmp.w	r9, #0
    381e:	d03f      	beq.n	38a0 <le_adv_ext_report.isra.43+0x144>
    3820:	b3cb      	cbz	r3, 3896 <le_adv_ext_report.isra.43+0x13a>
			adv_info->frag = 0x01;	//First fragment - more packets to come;
    3822:	7082      	strb	r2, [r0, #2]
		if(h->adv_addr){
    3824:	78f3      	ldrb	r3, [r6, #3]
    3826:	07db      	lsls	r3, r3, #31
    3828:	d508      	bpl.n	383c <le_adv_ext_report.isra.43+0xe0>
			adv_info->addr.type = addr.type;
    382a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    382e:	70eb      	strb	r3, [r5, #3]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    3830:	2206      	movs	r2, #6
    3832:	f10d 0109 	add.w	r1, sp, #9
    3836:	1d28      	adds	r0, r5, #4
    3838:	f7fc feca 	bl	5d0 <memcpy>
		adv_info->evt_type = 0x07;
    383c:	2307      	movs	r3, #7
    383e:	706b      	strb	r3, [r5, #1]
		adv_info->sid = sid_for_info;
    3840:	f885 a00c 	strb.w	sl, [r5, #12]
		if(adi_ptr->sid == 0x04){
    3844:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adv_info->length = data_len;
    3848:	f885 8018 	strb.w	r8, [r5, #24]
		if(adi_ptr->sid == 0x04){
    384c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3850:	f105 0619 	add.w	r6, r5, #25
    3854:	2b40      	cmp	r3, #64	; 0x40
			memcpy(&adv_info->data[0], ptr, data_len);
    3856:	4642      	mov	r2, r8
    3858:	4621      	mov	r1, r4
    385a:	4630      	mov	r0, r6
		if(adi_ptr->sid == 0x04){
    385c:	d10f      	bne.n	387e <le_adv_ext_report.isra.43+0x122>
			memcpy(&adv_info->data[0], ptr, data_len);
    385e:	f7fc feb7 	bl	5d0 <memcpy>
			memcpy(copy_data, ptr, data_len);
    3862:	4642      	mov	r2, r8
    3864:	4621      	mov	r1, r4
    3866:	4811      	ldr	r0, [pc, #68]	; (38ac <le_adv_ext_report.isra.43+0x150>)
    3868:	f7fc feb2 	bl	5d0 <memcpy>
}
    386c:	b005      	add	sp, #20
    386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aux_adi_present = true;				// chain pdu's
    3872:	f04f 0901 	mov.w	r9, #1
	bool adi_present = false;		// to identify aux packet and fragment it
    3876:	2700      	movs	r7, #0
    3878:	e7ad      	b.n	37d6 <le_adv_ext_report.isra.43+0x7a>
    387a:	464f      	mov	r7, r9
    387c:	e7ad      	b.n	37da <le_adv_ext_report.isra.43+0x7e>
			memcpy(&adv_info->data[0], ptr, data_len);
    387e:	f7fc fea7 	bl	5d0 <memcpy>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3882:	9b00      	ldr	r3, [sp, #0]
    3884:	425b      	negs	r3, r3
			*prssi = rssi;
    3886:	f806 3008 	strb.w	r3, [r6, r8]
    388a:	e7ef      	b.n	386c <le_adv_ext_report.isra.43+0x110>
		le_advertising_report(pdu_data, b, buf);
    388c:	462a      	mov	r2, r5
    388e:	4630      	mov	r0, r6
    3890:	f7ff feba 	bl	3608 <le_advertising_report>
    3894:	e7ea      	b.n	386c <le_adv_ext_report.isra.43+0x110>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    3896:	2f00      	cmp	r7, #0
    3898:	d1c4      	bne.n	3824 <le_adv_ext_report.isra.43+0xc8>
			adv_info->frag = 0x02; //last paacket of the data or complete packet
    389a:	2302      	movs	r3, #2
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    389c:	70ab      	strb	r3, [r5, #2]
    389e:	e7c1      	b.n	3824 <le_adv_ext_report.isra.43+0xc8>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    38a0:	2f00      	cmp	r7, #0
    38a2:	d0bf      	beq.n	3824 <le_adv_ext_report.isra.43+0xc8>
		}else if(adi_present && aux_ptr_present){
    38a4:	2b00      	cmp	r3, #0
    38a6:	d0bd      	beq.n	3824 <le_adv_ext_report.isra.43+0xc8>
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    38a8:	2303      	movs	r3, #3
    38aa:	e7f7      	b.n	389c <le_adv_ext_report.isra.43+0x140>
    38ac:	200036a4 	.word	0x200036a4

000038b0 <sys_get_le64>:
{
    38b0:	4603      	mov	r3, r0
}
    38b2:	6800      	ldr	r0, [r0, #0]
    38b4:	6859      	ldr	r1, [r3, #4]
    38b6:	4770      	bx	lr

000038b8 <hci_cmd_handle>:
{
    38b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    38ba:	8981      	ldrh	r1, [r0, #12]
{
    38bc:	b097      	sub	sp, #92	; 0x5c
	struct net_buf *evt = NULL;
    38be:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    38c0:	2902      	cmp	r1, #2
{
    38c2:	4604      	mov	r4, r0
	struct net_buf *evt = NULL;
    38c4:	950b      	str	r5, [sp, #44]	; 0x2c
	if (cmd->len < sizeof(*chdr)) {
    38c6:	d802      	bhi.n	38ce <hci_cmd_handle+0x16>
		return NULL;
    38c8:	2000      	movs	r0, #0
}
    38ca:	b017      	add	sp, #92	; 0x5c
    38cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    38ce:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    38d0:	4ec5      	ldr	r6, [pc, #788]	; (3be8 <hci_cmd_handle+0x330>)
    38d2:	781a      	ldrb	r2, [r3, #0]
    38d4:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    38d6:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    38d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    38dc:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    38de:	8032      	strh	r2, [r6, #0]
	if (cmd->len < chdr->param_len) {
    38e0:	d8f2      	bhi.n	38c8 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    38e2:	2103      	movs	r1, #3
    38e4:	f104 0008 	add.w	r0, r4, #8
    38e8:	f006 fd7f 	bl	a3ea <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    38ec:	8833      	ldrh	r3, [r6, #0]
    38ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    38f2:	0a9b      	lsrs	r3, r3, #10
    38f4:	2b04      	cmp	r3, #4
    38f6:	d063      	beq.n	39c0 <hci_cmd_handle+0x108>
    38f8:	d807      	bhi.n	390a <hci_cmd_handle+0x52>
    38fa:	2b03      	cmp	r3, #3
    38fc:	d024      	beq.n	3948 <hci_cmd_handle+0x90>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    38fe:	2101      	movs	r1, #1
    3900:	a80b      	add	r0, sp, #44	; 0x2c
    3902:	f7ff fe49 	bl	3598 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3906:	2301      	movs	r3, #1
    3908:	e208      	b.n	3d1c <hci_cmd_handle+0x464>
	switch (BT_OGF(_opcode)) {
    390a:	2b08      	cmp	r3, #8
    390c:	f000 80e5 	beq.w	3ada <hci_cmd_handle+0x222>
    3910:	2b3f      	cmp	r3, #63	; 0x3f
    3912:	d1f4      	bne.n	38fe <hci_cmd_handle+0x46>
	switch (ocf) {
    3914:	3a01      	subs	r2, #1
    3916:	2a09      	cmp	r2, #9
    3918:	d8f1      	bhi.n	38fe <hci_cmd_handle+0x46>
    391a:	a301      	add	r3, pc, #4	; (adr r3, 3920 <hci_cmd_handle+0x68>)
    391c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    3920:	00003d2b 	.word	0x00003d2b
    3924:	00003d59 	.word	0x00003d59
    3928:	00003d81 	.word	0x00003d81
    392c:	000038ff 	.word	0x000038ff
    3930:	000038ff 	.word	0x000038ff
    3934:	00003dc5 	.word	0x00003dc5
    3938:	000038ff 	.word	0x000038ff
    393c:	00003d97 	.word	0x00003d97
    3940:	00003dcf 	.word	0x00003dcf
    3944:	00003e3b 	.word	0x00003e3b
	switch (ocf) {
    3948:	2a03      	cmp	r2, #3
    394a:	d014      	beq.n	3976 <hci_cmd_handle+0xbe>
    394c:	d808      	bhi.n	3960 <hci_cmd_handle+0xa8>
    394e:	2a01      	cmp	r2, #1
    3950:	d1d5      	bne.n	38fe <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    3952:	68a0      	ldr	r0, [r4, #8]
    3954:	f7ff ffac 	bl	38b0 <sys_get_le64>
    3958:	4ba4      	ldr	r3, [pc, #656]	; (3bec <hci_cmd_handle+0x334>)
    395a:	e9c3 0100 	strd	r0, r1, [r3]
    395e:	e003      	b.n	3968 <hci_cmd_handle+0xb0>
	switch (ocf) {
    3960:	2a2d      	cmp	r2, #45	; 0x2d
    3962:	d017      	beq.n	3994 <hci_cmd_handle+0xdc>
    3964:	2a63      	cmp	r2, #99	; 0x63
    3966:	d1ca      	bne.n	38fe <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3968:	2101      	movs	r1, #1
    396a:	a80b      	add	r0, sp, #44	; 0x2c
    396c:	f7ff fe14 	bl	3598 <cmd_complete>
	ccst->status = 0x00;
    3970:	7005      	strb	r5, [r0, #0]
	return evt;
    3972:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3974:	e7a9      	b.n	38ca <hci_cmd_handle+0x12>
	event_mask = DEFAULT_EVENT_MASK;
    3976:	4b9d      	ldr	r3, [pc, #628]	; (3bec <hci_cmd_handle+0x334>)
    3978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    397c:	f641 71ff 	movw	r1, #8191	; 0x1fff
    3980:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    3984:	4b9a      	ldr	r3, [pc, #616]	; (3bf0 <hci_cmd_handle+0x338>)
    3986:	201f      	movs	r0, #31
    3988:	2100      	movs	r1, #0
    398a:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    398e:	f004 facb 	bl	7f28 <ll_reset>
    3992:	e7e9      	b.n	3968 <hci_cmd_handle+0xb0>
    3994:	68a3      	ldr	r3, [r4, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    3996:	2104      	movs	r1, #4
    3998:	a80b      	add	r0, sp, #44	; 0x2c
	handle = sys_le16_to_cpu(cmd->handle);
    399a:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    399c:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    399e:	f7ff fdfb 	bl	3598 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    39a2:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    39a4:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    39a6:	1cc2      	adds	r2, r0, #3
    39a8:	4639      	mov	r1, r7
    39aa:	4630      	mov	r0, r6
    39ac:	f004 fb56 	bl	805c <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    39b0:	2800      	cmp	r0, #0
    39b2:	bf0c      	ite	eq
    39b4:	2300      	moveq	r3, #0
    39b6:	2302      	movne	r3, #2
    39b8:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    39ba:	f8a4 5001 	strh.w	r5, [r4, #1]
    39be:	e7d8      	b.n	3972 <hci_cmd_handle+0xba>
	switch (ocf) {
    39c0:	3a01      	subs	r2, #1
    39c2:	2a08      	cmp	r2, #8
    39c4:	d89b      	bhi.n	38fe <hci_cmd_handle+0x46>
    39c6:	a301      	add	r3, pc, #4	; (adr r3, 39cc <hci_cmd_handle+0x114>)
    39c8:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    39cc:	000039f1 	.word	0x000039f1
    39d0:	00003a1b 	.word	0x00003a1b
    39d4:	00003aa7 	.word	0x00003aa7
    39d8:	000038ff 	.word	0x000038ff
    39dc:	000038ff 	.word	0x000038ff
    39e0:	000038ff 	.word	0x000038ff
    39e4:	000038ff 	.word	0x000038ff
    39e8:	000038ff 	.word	0x000038ff
    39ec:	00003ac3 	.word	0x00003ac3
	rp = cmd_complete(evt, sizeof(*rp));
    39f0:	2109      	movs	r1, #9
    39f2:	a80b      	add	r0, sp, #44	; 0x2c
    39f4:	f7ff fdd0 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    39f8:	2300      	movs	r3, #0
    39fa:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    39fc:	7083      	strb	r3, [r0, #2]
    39fe:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    3a00:	f06f 030e 	mvn.w	r3, #14
    3a04:	7143      	strb	r3, [r0, #5]
    3a06:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    3a08:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    3a0a:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    3a10:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    3a12:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    3a14:	71c3      	strb	r3, [r0, #7]
    3a16:	7203      	strb	r3, [r0, #8]
    3a18:	e7ab      	b.n	3972 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3a1a:	2141      	movs	r1, #65	; 0x41
    3a1c:	a80b      	add	r0, sp, #44	; 0x2c
    3a1e:	f7ff fdbb 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3a22:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3a24:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3a26:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3a28:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3a2c:	f7fc fdfc 	bl	628 <memset>
	rp->commands[2] |= BIT(7);
    3a30:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    3a32:	7f20      	ldrb	r0, [r4, #28]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    3a34:	7ea1      	ldrb	r1, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
    3a36:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    3a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a3c:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    3a3e:	79a3      	ldrb	r3, [r4, #6]
    3a40:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3a44:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    3a46:	7ae3      	ldrb	r3, [r4, #11]
    3a48:	f043 0304 	orr.w	r3, r3, #4
    3a4c:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    3a4e:	7be3      	ldrb	r3, [r4, #15]
    3a50:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    3a54:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    3a56:	7c23      	ldrb	r3, [r4, #16]
    3a58:	f043 0302 	orr.w	r3, r3, #2
    3a5c:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    3a5e:	7de3      	ldrb	r3, [r4, #23]
    3a60:	f043 0304 	orr.w	r3, r3, #4
    3a64:	75e3      	strb	r3, [r4, #23]
	rp->commands[36] |= BIT(1);
    3a66:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	rp->commands[36] |= BIT(2) | BIT(3) | BIT(5) | BIT(7) | BIT(6) ;
    3a6a:	f063 0311 	orn	r3, r3, #17
    3a6e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	rp->commands[37] |= BIT(5);
    3a72:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[27] |= BIT(6) | BIT(7);
    3a76:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[37] |= BIT(5);
    3a7a:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[27] |= BIT(6) | BIT(7);
    3a7e:	7720      	strb	r0, [r4, #28]
	rp->commands[37] |= BIT(5);
    3a80:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(3);
    3a84:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[38] |= BIT(7);
    3a86:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    3a8a:	f040 0008 	orr.w	r0, r0, #8
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3a8e:	f061 0108 	orn	r1, r1, #8
	rp->commands[26] |= BIT(0) | BIT(1);
    3a92:	f062 023c 	orn	r2, r2, #60	; 0x3c
	rp->commands[38] |= BIT(7);
    3a96:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    3a9a:	7760      	strb	r0, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    3a9c:	76a1      	strb	r1, [r4, #26]
	rp->commands[26] |= BIT(0) | BIT(1);
    3a9e:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    3aa0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    3aa4:	e765      	b.n	3972 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3aa6:	2109      	movs	r1, #9
    3aa8:	a80b      	add	r0, sp, #44	; 0x2c
    3aaa:	f7ff fd75 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3aae:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3ab0:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3ab2:	2208      	movs	r2, #8
	rp->status = 0x00;
    3ab4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3ab8:	f7fc fdb6 	bl	628 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    3abc:	2360      	movs	r3, #96	; 0x60
    3abe:	7163      	strb	r3, [r4, #5]
    3ac0:	e757      	b.n	3972 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3ac2:	2107      	movs	r1, #7
    3ac4:	a80b      	add	r0, sp, #44	; 0x2c
    3ac6:	f7ff fd67 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3aca:	4601      	mov	r1, r0
    3acc:	2300      	movs	r3, #0
    3ace:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    3ad2:	4618      	mov	r0, r3
    3ad4:	f7ff fc48 	bl	3368 <ll_addr_get>
    3ad8:	e74b      	b.n	3972 <hci_cmd_handle+0xba>
	switch (ocf) {
    3ada:	2a10      	cmp	r2, #16
    3adc:	f000 80a9 	beq.w	3c32 <hci_cmd_handle+0x37a>
    3ae0:	d847      	bhi.n	3b72 <hci_cmd_handle+0x2ba>
    3ae2:	2a06      	cmp	r2, #6
    3ae4:	f000 80d9 	beq.w	3c9a <hci_cmd_handle+0x3e2>
    3ae8:	d822      	bhi.n	3b30 <hci_cmd_handle+0x278>
    3aea:	2a02      	cmp	r2, #2
    3aec:	f000 8082 	beq.w	3bf4 <hci_cmd_handle+0x33c>
    3af0:	d80e      	bhi.n	3b10 <hci_cmd_handle+0x258>
    3af2:	2a01      	cmp	r2, #1
    3af4:	f47f af03 	bne.w	38fe <hci_cmd_handle+0x46>
	le_event_mask = sys_get_le64(cmd->events);
    3af8:	68a0      	ldr	r0, [r4, #8]
    3afa:	f7ff fed9 	bl	38b0 <sys_get_le64>
    3afe:	4b3c      	ldr	r3, [pc, #240]	; (3bf0 <hci_cmd_handle+0x338>)
    3b00:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    3b04:	2101      	movs	r1, #1
    3b06:	a80b      	add	r0, sp, #44	; 0x2c
    3b08:	f7ff fd46 	bl	3598 <cmd_complete>
	ccst->status = 0x00;
    3b0c:	2300      	movs	r3, #0
    3b0e:	e105      	b.n	3d1c <hci_cmd_handle+0x464>
	switch (ocf) {
    3b10:	2a03      	cmp	r2, #3
    3b12:	d07c      	beq.n	3c0e <hci_cmd_handle+0x356>
    3b14:	2a05      	cmp	r2, #5
    3b16:	f47f aef2 	bne.w	38fe <hci_cmd_handle+0x46>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    3b1a:	68a1      	ldr	r1, [r4, #8]
    3b1c:	2001      	movs	r0, #1
    3b1e:	f7ff fc3d 	bl	339c <ll_addr_set>
	status = ll_wl_add(&cmd->addr);
    3b22:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3b24:	2101      	movs	r1, #1
	ccst = cmd_complete(evt, sizeof(*ccst));
    3b26:	a80b      	add	r0, sp, #44	; 0x2c
    3b28:	f7ff fd36 	bl	3598 <cmd_complete>
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    3b2c:	7004      	strb	r4, [r0, #0]
    3b2e:	e720      	b.n	3972 <hci_cmd_handle+0xba>
	switch (ocf) {
    3b30:	2a09      	cmp	r2, #9
    3b32:	f000 80e0 	beq.w	3cf6 <hci_cmd_handle+0x43e>
    3b36:	d80b      	bhi.n	3b50 <hci_cmd_handle+0x298>
    3b38:	2a07      	cmp	r2, #7
    3b3a:	f000 8176 	beq.w	3e2a <hci_cmd_handle+0x572>
    3b3e:	2a08      	cmp	r2, #8
    3b40:	f47f aedd 	bne.w	38fe <hci_cmd_handle+0x46>
    3b44:	68a3      	ldr	r3, [r4, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    3b46:	1c59      	adds	r1, r3, #1
    3b48:	7818      	ldrb	r0, [r3, #0]
    3b4a:	f005 fae5 	bl	9118 <ll_adv_data_set>
    3b4e:	e7d9      	b.n	3b04 <hci_cmd_handle+0x24c>
	switch (ocf) {
    3b50:	2a0a      	cmp	r2, #10
    3b52:	f000 80d6 	beq.w	3d02 <hci_cmd_handle+0x44a>
    3b56:	2a0f      	cmp	r2, #15
    3b58:	f47f aed1 	bne.w	38fe <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3b5c:	2102      	movs	r1, #2
    3b5e:	a80b      	add	r0, sp, #44	; 0x2c
    3b60:	f7ff fd1a 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3b64:	2300      	movs	r3, #0
    3b66:	7003      	strb	r3, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    3b68:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    3b6a:	f005 fd6f 	bl	964c <ll_wl_size_get>
    3b6e:	7060      	strb	r0, [r4, #1]
    3b70:	e6ff      	b.n	3972 <hci_cmd_handle+0xba>
	switch (ocf) {
    3b72:	2a1c      	cmp	r2, #28
    3b74:	f000 8081 	beq.w	3c7a <hci_cmd_handle+0x3c2>
    3b78:	d812      	bhi.n	3ba0 <hci_cmd_handle+0x2e8>
    3b7a:	2a12      	cmp	r2, #18
    3b7c:	d066      	beq.n	3c4c <hci_cmd_handle+0x394>
    3b7e:	d361      	bcc.n	3c44 <hci_cmd_handle+0x38c>
    3b80:	2a17      	cmp	r2, #23
    3b82:	d067      	beq.n	3c54 <hci_cmd_handle+0x39c>
    3b84:	2a18      	cmp	r2, #24
    3b86:	f47f aeba 	bne.w	38fe <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3b8a:	2109      	movs	r1, #9
    3b8c:	a80b      	add	r0, sp, #44	; 0x2c
    3b8e:	f7ff fd03 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3b92:	2300      	movs	r3, #0
    3b94:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    3b98:	2108      	movs	r1, #8
    3b9a:	f7ff fc1f 	bl	33dc <bt_rand>
    3b9e:	e6e8      	b.n	3972 <hci_cmd_handle+0xba>
	switch (ocf) {
    3ba0:	2a38      	cmp	r2, #56	; 0x38
    3ba2:	f000 80a8 	beq.w	3cf6 <hci_cmd_handle+0x43e>
    3ba6:	d80d      	bhi.n	3bc4 <hci_cmd_handle+0x30c>
    3ba8:	2a36      	cmp	r2, #54	; 0x36
    3baa:	f000 8084 	beq.w	3cb6 <hci_cmd_handle+0x3fe>
    3bae:	2a37      	cmp	r2, #55	; 0x37
    3bb0:	f47f aea5 	bne.w	38fe <hci_cmd_handle+0x46>
    3bb4:	68a0      	ldr	r0, [r4, #8]
	ll_ext_adv_data_set(cmd->len, &cmd->data[0], cmd->op, cmd->frag_pref);
    3bb6:	7883      	ldrb	r3, [r0, #2]
    3bb8:	7842      	ldrb	r2, [r0, #1]
    3bba:	1d01      	adds	r1, r0, #4
    3bbc:	78c0      	ldrb	r0, [r0, #3]
    3bbe:	f005 fb1b 	bl	91f8 <ll_ext_adv_data_set>
    3bc2:	e79f      	b.n	3b04 <hci_cmd_handle+0x24c>
	switch (ocf) {
    3bc4:	2a39      	cmp	r2, #57	; 0x39
    3bc6:	f000 80ab 	beq.w	3d20 <hci_cmd_handle+0x468>
    3bca:	2a4b      	cmp	r2, #75	; 0x4b
    3bcc:	f47f ae97 	bne.w	38fe <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    3bd0:	2103      	movs	r1, #3
    3bd2:	a80b      	add	r0, sp, #44	; 0x2c
    3bd4:	f7ff fce0 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3bd8:	4601      	mov	r1, r0
    3bda:	2300      	movs	r3, #0
    3bdc:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    3be0:	3001      	adds	r0, #1
    3be2:	f7ff fbf7 	bl	33d4 <ll_tx_pwr_get>
    3be6:	e6c4      	b.n	3972 <hci_cmd_handle+0xba>
    3be8:	200002d8 	.word	0x200002d8
    3bec:	20005ec0 	.word	0x20005ec0
    3bf0:	20005ec8 	.word	0x20005ec8
	rp = cmd_complete(evt, sizeof(*rp));
    3bf4:	2104      	movs	r1, #4
    3bf6:	a80b      	add	r0, sp, #44	; 0x2c
    3bf8:	f7ff fcce 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3bfc:	2300      	movs	r3, #0
    3bfe:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3c00:	f06f 0204 	mvn.w	r2, #4
    3c04:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3c06:	230a      	movs	r3, #10
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    3c08:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    3c0a:	70c3      	strb	r3, [r0, #3]
    3c0c:	e6b1      	b.n	3972 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3c0e:	2109      	movs	r1, #9
    3c10:	a80b      	add	r0, sp, #44	; 0x2c
    3c12:	f7ff fcc1 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3c16:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3c18:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c1a:	2208      	movs	r2, #8
	rp->status = 0x00;
    3c1c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3c20:	f7fc fd02 	bl	628 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    3c24:	230c      	movs	r3, #12
    3c26:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    3c28:	2340      	movs	r3, #64	; 0x40
    3c2a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    3c2c:	2301      	movs	r3, #1
    3c2e:	70e3      	strb	r3, [r4, #3]
    3c30:	e69f      	b.n	3972 <hci_cmd_handle+0xba>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3c32:	2101      	movs	r1, #1
    3c34:	a80b      	add	r0, sp, #44	; 0x2c
    3c36:	f7ff fcaf 	bl	3598 <cmd_complete>
    3c3a:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    3c3c:	f005 fd08 	bl	9650 <ll_wl_clear>
    3c40:	7020      	strb	r0, [r4, #0]
    3c42:	e696      	b.n	3972 <hci_cmd_handle+0xba>
	status = ll_wl_add(&cmd->addr);
    3c44:	68a0      	ldr	r0, [r4, #8]
    3c46:	f005 fd19 	bl	967c <ll_wl_add>
    3c4a:	e76a      	b.n	3b22 <hci_cmd_handle+0x26a>
	status = ll_wl_remove(&cmd->addr);
    3c4c:	68a0      	ldr	r0, [r4, #8]
    3c4e:	f005 fd4d 	bl	96ec <ll_wl_remove>
    3c52:	e766      	b.n	3b22 <hci_cmd_handle+0x26a>
    3c54:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    3c56:	2300      	movs	r3, #0
    3c58:	aa0c      	add	r2, sp, #48	; 0x30
    3c5a:	f100 0110 	add.w	r1, r0, #16
    3c5e:	f005 fdff 	bl	9860 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    3c62:	2111      	movs	r1, #17
    3c64:	a80b      	add	r0, sp, #44	; 0x2c
    3c66:	f7ff fc97 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3c6a:	2300      	movs	r3, #0
    3c6c:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    3c70:	2210      	movs	r2, #16
    3c72:	a90c      	add	r1, sp, #48	; 0x30
	memcpy(rp->info, build_info, sizeof(build_info));
    3c74:	f7fc fcac 	bl	5d0 <memcpy>
    3c78:	e67b      	b.n	3972 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3c7a:	2109      	movs	r1, #9
    3c7c:	a80b      	add	r0, sp, #44	; 0x2c
    3c7e:	f7ff fc8b 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3c82:	4601      	mov	r1, r0
	rp = cmd_complete(evt, sizeof(*rp));
    3c84:	4602      	mov	r2, r0
	rp->status = 0x00;
    3c86:	f801 5b01 	strb.w	r5, [r1], #1
	sys_put_le32(val, dst);
    3c8a:	2003      	movs	r0, #3
    3c8c:	f7ff fc70 	bl	3570 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    3c90:	4628      	mov	r0, r5
    3c92:	1d51      	adds	r1, r2, #5
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3c94:	f7ff fc6c 	bl	3570 <sys_put_le32>
    3c98:	e66b      	b.n	3972 <hci_cmd_handle+0xba>
    3c9a:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    3c9c:	7ba5      	ldrb	r5, [r4, #14]
    3c9e:	79a3      	ldrb	r3, [r4, #6]
    3ca0:	7962      	ldrb	r2, [r4, #5]
    3ca2:	7921      	ldrb	r1, [r4, #4]
    3ca4:	8820      	ldrh	r0, [r4, #0]
    3ca6:	9502      	str	r5, [sp, #8]
    3ca8:	7b65      	ldrb	r5, [r4, #13]
    3caa:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    3cac:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    3cae:	9400      	str	r4, [sp, #0]
    3cb0:	f004 ffd6 	bl	8c60 <ll_adv_params_set>
    3cb4:	e735      	b.n	3b22 <hci_cmd_handle+0x26a>
    3cb6:	68a4      	ldr	r4, [r4, #8]
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    3cb8:	2500      	movs	r5, #0
    3cba:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    3cbe:	7a23      	ldrb	r3, [r4, #8]
    3cc0:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    3cc4:	7820      	ldrb	r0, [r4, #0]
    3cc6:	9509      	str	r5, [sp, #36]	; 0x24
    3cc8:	7d66      	ldrb	r6, [r4, #21]
    3cca:	9608      	str	r6, [sp, #32]
    3ccc:	7d26      	ldrb	r6, [r4, #20]
    3cce:	9607      	str	r6, [sp, #28]
    3cd0:	7ce6      	ldrb	r6, [r4, #19]
    3cd2:	9606      	str	r6, [sp, #24]
    3cd4:	7ca6      	ldrb	r6, [r4, #18]
    3cd6:	9605      	str	r6, [sp, #20]
    3cd8:	9504      	str	r5, [sp, #16]
    3cda:	7c25      	ldrb	r5, [r4, #16]
    3cdc:	9503      	str	r5, [sp, #12]
    3cde:	79e5      	ldrb	r5, [r4, #7]
    3ce0:	9502      	str	r5, [sp, #8]
				   &cmd->direct_addr.a.val[0], cmd->prim_channel_map,
    3ce2:	f104 050a 	add.w	r5, r4, #10
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    3ce6:	9501      	str	r5, [sp, #4]
    3ce8:	7a64      	ldrb	r4, [r4, #9]
    3cea:	9400      	str	r4, [sp, #0]
    3cec:	f005 f838 	bl	8d60 <ll_ext_adv_params_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    3cf0:	2102      	movs	r1, #2
	status = ll_ext_adv_params_set(cmd->handle, cmd->props, min_interval,
    3cf2:	4604      	mov	r4, r0
    3cf4:	e717      	b.n	3b26 <hci_cmd_handle+0x26e>
    3cf6:	68a3      	ldr	r3, [r4, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    3cf8:	1c59      	adds	r1, r3, #1
    3cfa:	7818      	ldrb	r0, [r3, #0]
    3cfc:	f005 fbb2 	bl	9464 <ll_scan_data_set>
    3d00:	e700      	b.n	3b04 <hci_cmd_handle+0x24c>
	status = ll_adv_enable(cmd->enable);
    3d02:	68a3      	ldr	r3, [r4, #8]
    3d04:	7818      	ldrb	r0, [r3, #0]
    3d06:	f005 fbef 	bl	94e8 <ll_adv_enable>
	status = ll_ext_adv_enable(cmd->enable);
    3d0a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    3d0c:	2101      	movs	r1, #1
    3d0e:	a80b      	add	r0, sp, #44	; 0x2c
    3d10:	f7ff fc42 	bl	3598 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    3d14:	2c00      	cmp	r4, #0
    3d16:	bf0c      	ite	eq
    3d18:	2300      	moveq	r3, #0
    3d1a:	230c      	movne	r3, #12
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    3d1c:	7003      	strb	r3, [r0, #0]
    3d1e:	e628      	b.n	3972 <hci_cmd_handle+0xba>
	status = ll_ext_adv_enable(cmd->enable);
    3d20:	68a3      	ldr	r3, [r4, #8]
    3d22:	7818      	ldrb	r0, [r3, #0]
    3d24:	f005 fc24 	bl	9570 <ll_ext_adv_enable>
    3d28:	e7ef      	b.n	3d0a <hci_cmd_handle+0x452>
	rp = cmd_complete(evt, sizeof(*rp));
    3d2a:	210d      	movs	r1, #13
    3d2c:	a80b      	add	r0, sp, #44	; 0x2c
    3d2e:	f7ff fc33 	bl	3598 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3d32:	2202      	movs	r2, #2
    3d34:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3d36:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    3d38:	2201      	movs	r2, #1
    3d3a:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3d3c:	220b      	movs	r2, #11
	rp->status = 0x00;
    3d3e:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3d40:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3d42:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    3d44:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    3d46:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    3d48:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    3d4a:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    3d4c:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    3d4e:	7242      	strb	r2, [r0, #9]
    3d50:	7283      	strb	r3, [r0, #10]
    3d52:	72c3      	strb	r3, [r0, #11]
    3d54:	7303      	strb	r3, [r0, #12]
    3d56:	e60c      	b.n	3972 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3d58:	2141      	movs	r1, #65	; 0x41
    3d5a:	a80b      	add	r0, sp, #44	; 0x2c
    3d5c:	f7ff fc1c 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3d60:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    3d62:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3d64:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    3d66:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    3d6a:	f7fc fc5d 	bl	628 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    3d6e:	7863      	ldrb	r3, [r4, #1]
    3d70:	f063 0358 	orn	r3, r3, #88	; 0x58
    3d74:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    3d76:	78a3      	ldrb	r3, [r4, #2]
    3d78:	f043 0303 	orr.w	r3, r3, #3
    3d7c:	70a3      	strb	r3, [r4, #2]
    3d7e:	e5f8      	b.n	3972 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3d80:	2109      	movs	r1, #9
    3d82:	a80b      	add	r0, sp, #44	; 0x2c
    3d84:	f7ff fc08 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3d88:	2100      	movs	r1, #0
    3d8a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    3d8e:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    3d90:	f7fc fc4a 	bl	628 <memset>
    3d94:	e5ed      	b.n	3972 <hci_cmd_handle+0xba>
	const char build_info[] = HCI_VS_BUILD_INFO;
    3d96:	4b5b      	ldr	r3, [pc, #364]	; (3f04 <hci_cmd_handle+0x64c>)
    3d98:	aa0c      	add	r2, sp, #48	; 0x30
    3d9a:	f103 0628 	add.w	r6, r3, #40	; 0x28
    3d9e:	4615      	mov	r5, r2
    3da0:	6818      	ldr	r0, [r3, #0]
    3da2:	6859      	ldr	r1, [r3, #4]
    3da4:	4614      	mov	r4, r2
    3da6:	c403      	stmia	r4!, {r0, r1}
    3da8:	3308      	adds	r3, #8
    3daa:	42b3      	cmp	r3, r6
    3dac:	4622      	mov	r2, r4
    3dae:	d1f7      	bne.n	3da0 <hci_cmd_handle+0x4e8>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    3db0:	2129      	movs	r1, #41	; 0x29
    3db2:	a80b      	add	r0, sp, #44	; 0x2c
    3db4:	f7ff fbf0 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3db8:	2300      	movs	r3, #0
    3dba:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    3dbe:	2228      	movs	r2, #40	; 0x28
    3dc0:	4629      	mov	r1, r5
    3dc2:	e757      	b.n	3c74 <hci_cmd_handle+0x3bc>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    3dc4:	68a1      	ldr	r1, [r4, #8]
    3dc6:	2000      	movs	r0, #0
    3dc8:	f7ff fae8 	bl	339c <ll_addr_set>
    3dcc:	e69a      	b.n	3b04 <hci_cmd_handle+0x24c>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3dce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3dd2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    3dd6:	3201      	adds	r2, #1
    3dd8:	d106      	bne.n	3de8 <hci_cmd_handle+0x530>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3dda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3de2:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    3de4:	4293      	cmp	r3, r2
    3de6:	d020      	beq.n	3e2a <hci_cmd_handle+0x572>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    3de8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3dec:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    3df0:	07db      	lsls	r3, r3, #31
    3df2:	d51a      	bpl.n	3e2a <hci_cmd_handle+0x572>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3df4:	2118      	movs	r1, #24
    3df6:	a80b      	add	r0, sp, #44	; 0x2c
    3df8:	f7ff fbce 	bl	3598 <cmd_complete>
		rp->status = 0x00;
    3dfc:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    3dfe:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    3e00:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    3e02:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    3e04:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    3e06:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    3e0a:	1ca1      	adds	r1, r4, #2
    3e0c:	f7ff fbb0 	bl	3570 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    3e10:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    3e14:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    3e16:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    3e1a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    3e1e:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    3e20:	2210      	movs	r2, #16
    3e22:	4631      	mov	r1, r6
    3e24:	f104 0008 	add.w	r0, r4, #8
    3e28:	e7b2      	b.n	3d90 <hci_cmd_handle+0x4d8>
	rp = cmd_complete(evt, sizeof(*rp));
    3e2a:	2102      	movs	r1, #2
    3e2c:	a80b      	add	r0, sp, #44	; 0x2c
    3e2e:	f7ff fbb3 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3e32:	2300      	movs	r3, #0
    3e34:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    3e36:	7043      	strb	r3, [r0, #1]
    3e38:	e59b      	b.n	3972 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    3e3a:	2121      	movs	r1, #33	; 0x21
    3e3c:	a80b      	add	r0, sp, #44	; 0x2c
    3e3e:	f7ff fbab 	bl	3598 <cmd_complete>
	rp->status = 0x00;
    3e42:	4603      	mov	r3, r0
    3e44:	2200      	movs	r2, #0
    3e46:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    3e4e:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e50:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    3e54:	3101      	adds	r1, #1
    3e56:	d04b      	beq.n	3ef0 <hci_cmd_handle+0x638>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3e58:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    3e5c:	3101      	adds	r1, #1
    3e5e:	d047      	beq.n	3ef0 <hci_cmd_handle+0x638>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3e60:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    3e64:	3101      	adds	r1, #1
    3e66:	d043      	beq.n	3ef0 <hci_cmd_handle+0x638>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    3e68:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    3e6c:	3101      	adds	r1, #1
    3e6e:	d03f      	beq.n	3ef0 <hci_cmd_handle+0x638>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    3e70:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    3e74:	4619      	mov	r1, r3
    3e76:	f7ff fb7b 	bl	3570 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    3e7a:	1d61      	adds	r1, r4, #5
    3e7c:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    3e80:	f7ff fb76 	bl	3570 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    3e84:	f104 0109 	add.w	r1, r4, #9
    3e88:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3e8c:	f7ff fb70 	bl	3570 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    3e90:	f104 010d 	add.w	r1, r4, #13
    3e94:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    3e98:	f7ff fb6a 	bl	3570 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    3e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3ea0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    3ea4:	3301      	adds	r3, #1
    3ea6:	f104 0311 	add.w	r3, r4, #17
    3eaa:	d027      	beq.n	3efc <hci_cmd_handle+0x644>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    3eac:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    3eb0:	3101      	adds	r1, #1
    3eb2:	d023      	beq.n	3efc <hci_cmd_handle+0x644>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    3eb4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    3eb8:	3101      	adds	r1, #1
    3eba:	d01f      	beq.n	3efc <hci_cmd_handle+0x644>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    3ebc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    3ec0:	3101      	adds	r1, #1
    3ec2:	d01b      	beq.n	3efc <hci_cmd_handle+0x644>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    3ec4:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    3ec8:	4619      	mov	r1, r3
    3eca:	f7ff fb51 	bl	3570 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    3ece:	f104 0115 	add.w	r1, r4, #21
    3ed2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    3ed6:	f7ff fb4b 	bl	3570 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    3eda:	f104 0119 	add.w	r1, r4, #25
    3ede:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    3ee2:	f7ff fb45 	bl	3570 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    3ee6:	f104 011d 	add.w	r1, r4, #29
    3eea:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    3eee:	e6d1      	b.n	3c94 <hci_cmd_handle+0x3dc>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    3ef0:	2210      	movs	r2, #16
    3ef2:	2100      	movs	r1, #0
    3ef4:	4618      	mov	r0, r3
    3ef6:	f7fc fb97 	bl	628 <memset>
    3efa:	e7cf      	b.n	3e9c <hci_cmd_handle+0x5e4>
		memset(rp->er, 0x00, sizeof(rp->er));
    3efc:	2210      	movs	r2, #16
    3efe:	2100      	movs	r1, #0
    3f00:	4618      	mov	r0, r3
    3f02:	e745      	b.n	3d90 <hci_cmd_handle+0x4d8>
    3f04:	0000b821 	.word	0x0000b821

00003f08 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    3f08:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3f0a:	4604      	mov	r4, r0
    3f0c:	460d      	mov	r5, r1
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3f0e:	7923      	ldrb	r3, [r4, #4]
    3f10:	2b01      	cmp	r3, #1
	pdu_data = (void *)node_rx->pdu_data;
    3f12:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    3f16:	d044      	beq.n	3fa2 <hci_evt_encode+0x9a>
	switch (node_rx->hdr.type) {
    3f18:	3b02      	subs	r3, #2
    3f1a:	2b03      	cmp	r3, #3
    3f1c:	d875      	bhi.n	400a <hci_evt_encode+0x102>
    3f1e:	e8df f003 	tbb	[pc, r3]
    3f22:	0802      	.short	0x0802
    3f24:	0d08      	.short	0x0d08
		le_advertising_report(pdu_data, b, buf);
    3f26:	460a      	mov	r2, r1
    3f28:	4621      	mov	r1, r4
    3f2a:	f7ff fb6d 	bl	3608 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    3f2e:	b002      	add	sp, #8
    3f30:	bd70      	pop	{r4, r5, r6, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    3f32:	460a      	mov	r2, r1
    3f34:	4621      	mov	r1, r4
    3f36:	f7ff fc11 	bl	375c <le_adv_ext_report.isra.43>
    3f3a:	e7f8      	b.n	3f2e <hci_evt_encode+0x26>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f3c:	4b36      	ldr	r3, [pc, #216]	; (4018 <hci_evt_encode+0x110>)
    3f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f42:	2200      	movs	r2, #0
    3f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    3f48:	4313      	orrs	r3, r2
    3f4a:	f104 060a 	add.w	r6, r4, #10
    3f4e:	d007      	beq.n	3f60 <hci_evt_encode+0x58>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    3f50:	4b32      	ldr	r3, [pc, #200]	; (401c <hci_evt_encode+0x114>)
    3f52:	e9d3 2300 	ldrd	r2, r3, [r3]
    3f56:	2300      	movs	r3, #0
    3f58:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f5c:	4313      	orrs	r3, r2
    3f5e:	d10f      	bne.n	3f80 <hci_evt_encode+0x78>
		addr.type = adv->tx_addr;
    3f60:	7a23      	ldrb	r3, [r4, #8]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    3f62:	2206      	movs	r2, #6
		addr.type = adv->tx_addr;
    3f64:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    3f68:	4631      	mov	r1, r6
    3f6a:	f10d 0001 	add.w	r0, sp, #1
		addr.type = adv->tx_addr;
    3f6e:	f88d 3000 	strb.w	r3, [sp]
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    3f72:	f7fc fb2d 	bl	5d0 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    3f76:	f89d 0000 	ldrb.w	r0, [sp]
    3f7a:	f7ff fbd1 	bl	3720 <bt_addr_le_to_str.isra.41>
    3f7e:	e7d6      	b.n	3f2e <hci_evt_encode+0x26>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    3f80:	2208      	movs	r2, #8
    3f82:	2113      	movs	r1, #19
    3f84:	4628      	mov	r0, r5
    3f86:	f7ff fb29 	bl	35dc <meta_evt>
	sep->handle = 0;
    3f8a:	2300      	movs	r3, #0
    3f8c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    3f8e:	7a23      	ldrb	r3, [r4, #8]
    3f90:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3f94:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    3f96:	2206      	movs	r2, #6
    3f98:	4631      	mov	r1, r6
    3f9a:	3002      	adds	r0, #2
    3f9c:	f7fc fb18 	bl	5d0 <memcpy>
    3fa0:	e7c5      	b.n	3f2e <hci_evt_encode+0x26>
	switch (pdu_data->llctrl.opcode) {
    3fa2:	7ae1      	ldrb	r1, [r4, #11]
    3fa4:	88e6      	ldrh	r6, [r4, #6]
    3fa6:	2909      	cmp	r1, #9
    3fa8:	d00b      	beq.n	3fc2 <hci_evt_encode+0xba>
    3faa:	290c      	cmp	r1, #12
    3fac:	d010      	beq.n	3fd0 <hci_evt_encode+0xc8>
    3fae:	2907      	cmp	r1, #7
    3fb0:	d12b      	bne.n	400a <hci_evt_encode+0x102>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    3fb2:	7b23      	ldrb	r3, [r4, #12]
    3fb4:	2b0e      	cmp	r3, #14
    3fb6:	d1ba      	bne.n	3f2e <hci_evt_encode+0x26>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    3fb8:	462b      	mov	r3, r5
    3fba:	4632      	mov	r2, r6
    3fbc:	2100      	movs	r1, #0
    3fbe:	201a      	movs	r0, #26
    3fc0:	e003      	b.n	3fca <hci_evt_encode+0xc2>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    3fc2:	4601      	mov	r1, r0
    3fc4:	462b      	mov	r3, r5
    3fc6:	4632      	mov	r2, r6
    3fc8:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    3fca:	f7ff fb7b 	bl	36c4 <le_remote_feat_complete>
    3fce:	e7ae      	b.n	3f2e <hci_evt_encode+0x26>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    3fd0:	4b11      	ldr	r3, [pc, #68]	; (4018 <hci_evt_encode+0x110>)
    3fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fd6:	2300      	movs	r3, #0
    3fd8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    3fdc:	4313      	orrs	r3, r2
    3fde:	d0a6      	beq.n	3f2e <hci_evt_encode+0x26>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    3fe0:	2208      	movs	r2, #8
    3fe2:	4628      	mov	r0, r5
    3fe4:	f7ff facd 	bl	3582 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    3fe8:	2108      	movs	r1, #8
    3fea:	1868      	adds	r0, r5, r1
    3fec:	f006 f9e6 	bl	a3bc <net_buf_simple_add>
	ep->status = 0x00;
    3ff0:	2300      	movs	r3, #0
    3ff2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    3ff4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    3ff8:	7b23      	ldrb	r3, [r4, #12]
    3ffa:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    3ffc:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    4000:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    4002:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    4006:	80c3      	strh	r3, [r0, #6]
    4008:	e791      	b.n	3f2e <hci_evt_encode+0x26>
		LL_ASSERT(0);
    400a:	4040      	eors	r0, r0
    400c:	f380 8811 	msr	BASEPRI, r0
    4010:	f04f 0004 	mov.w	r0, #4
    4014:	df02      	svc	2
    4016:	bf00      	nop
    4018:	20005ec0 	.word	0x20005ec0
    401c:	20005ec8 	.word	0x20005ec8

00004020 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4020:	7903      	ldrb	r3, [r0, #4]
    4022:	2b01      	cmp	r3, #1
    4024:	d00f      	beq.n	4046 <hci_get_class+0x26>
    4026:	2b0a      	cmp	r3, #10
    4028:	d815      	bhi.n	4056 <hci_get_class+0x36>
    402a:	2001      	movs	r0, #1
    402c:	fa00 f303 	lsl.w	r3, r0, r3
    4030:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    4034:	d112      	bne.n	405c <hci_get_class+0x3c>
    4036:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    403a:	d110      	bne.n	405e <hci_get_class+0x3e>
    403c:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    4040:	f343 1080 	sbfx	r0, r3, #6, #1
    4044:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    4046:	7a03      	ldrb	r3, [r0, #8]
    4048:	f003 0303 	and.w	r3, r3, #3
    404c:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    404e:	bf0c      	ite	eq
    4050:	2002      	moveq	r0, #2
    4052:	2003      	movne	r0, #3
    4054:	4770      	bx	lr
			return -1;
    4056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    405a:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    405c:	2002      	movs	r0, #2
	}
}
    405e:	4770      	bx	lr

00004060 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
    4060:	4b06      	ldr	r3, [pc, #24]	; (407c <hci_init+0x1c>)
    4062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4066:	f641 71ff 	movw	r1, #8191	; 0x1fff
    406a:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    406e:	4b04      	ldr	r3, [pc, #16]	; (4080 <hci_init+0x20>)
    4070:	201f      	movs	r0, #31
    4072:	2100      	movs	r1, #0
    4074:	e9c3 0100 	strd	r0, r1, [r3]
    4078:	4770      	bx	lr
    407a:	bf00      	nop
    407c:	20005ec0 	.word	0x20005ec0
    4080:	20005ec8 	.word	0x20005ec8

00004084 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    4084:	bf20      	wfe
	__SEV();
    4086:	bf40      	sev
	__WFE();
    4088:	bf20      	wfe
    408a:	4770      	bx	lr

0000408c <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    408c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    408e:	4b0d      	ldr	r3, [pc, #52]	; (40c4 <pdu_len_cmp+0x38>)
{
    4090:	b089      	sub	sp, #36	; 0x24
    4092:	4605      	mov	r5, r0
    4094:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    4096:	aa01      	add	r2, sp, #4
    4098:	f103 0718 	add.w	r7, r3, #24
    409c:	6818      	ldr	r0, [r3, #0]
    409e:	6859      	ldr	r1, [r3, #4]
    40a0:	4614      	mov	r4, r2
    40a2:	c403      	stmia	r4!, {r0, r1}
    40a4:	3308      	adds	r3, #8
    40a6:	42bb      	cmp	r3, r7
    40a8:	4622      	mov	r2, r4
    40aa:	d1f7      	bne.n	409c <pdu_len_cmp+0x10>
    40ac:	881b      	ldrh	r3, [r3, #0]
    40ae:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    40b0:	ab08      	add	r3, sp, #32
    40b2:	441d      	add	r5, r3
    40b4:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    40b8:	1b83      	subs	r3, r0, r6
    40ba:	4258      	negs	r0, r3
    40bc:	4158      	adcs	r0, r3
    40be:	b009      	add	sp, #36	; 0x24
    40c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40c2:	bf00      	nop
    40c4:	0000b715 	.word	0x0000b715

000040c8 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    40c8:	6008      	str	r0, [r1, #0]
    40ca:	4770      	bx	lr

000040cc <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    40cc:	b918      	cbnz	r0, 40d6 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    40ce:	680b      	ldr	r3, [r1, #0]
    40d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    40d4:	600b      	str	r3, [r1, #0]
    40d6:	4770      	bx	lr

000040d8 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    40d8:	b918      	cbnz	r0, 40e2 <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    40da:	680b      	ldr	r3, [r1, #0]
    40dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    40e0:	600b      	str	r3, [r1, #0]
    40e2:	4770      	bx	lr

000040e4 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    40e4:	b570      	push	{r4, r5, r6, lr}
    40e6:	1d03      	adds	r3, r0, #4
    40e8:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    40ea:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    40ec:	429d      	cmp	r5, r3
    40ee:	d101      	bne.n	40f4 <chan_sel_remap+0x10>
    40f0:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    40f2:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    40f4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    40f8:	2200      	movs	r2, #0
    40fa:	18a0      	adds	r0, r4, r2
    40fc:	2a08      	cmp	r2, #8
    40fe:	b2c0      	uxtb	r0, r0
    4100:	d101      	bne.n	4106 <chan_sel_remap+0x22>
    4102:	4604      	mov	r4, r0
    4104:	e7f2      	b.n	40ec <chan_sel_remap+0x8>
			if (bite & 0x01) {
    4106:	f016 0f01 	tst.w	r6, #1
    410a:	d003      	beq.n	4114 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    410c:	2900      	cmp	r1, #0
    410e:	d0f0      	beq.n	40f2 <chan_sel_remap+0xe>
				chan_index--;
    4110:	3901      	subs	r1, #1
    4112:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    4114:	0876      	lsrs	r6, r6, #1
    4116:	3201      	adds	r2, #1
    4118:	e7ef      	b.n	40fa <chan_sel_remap+0x16>
	...

0000411c <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    411c:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    411e:	4a0c      	ldr	r2, [pc, #48]	; (4150 <packet_rx_reserve_get+0x34>)
    4120:	f892 3d22 	ldrb.w	r3, [r2, #3362]	; 0xd22
	    _radio.packet_rx_last) {
    4124:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
	if (_radio.packet_rx_acquire >=
    4128:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    412a:	bf38      	it	cc
    412c:	f892 4d20 	ldrbcc.w	r4, [r2, #3360]	; 0xd20
			_radio.packet_rx_last);
    4130:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
			_radio.packet_rx_last +
    4134:	bf38      	it	cc
    4136:	191b      	addcc	r3, r3, r4
    4138:	1a5b      	subs	r3, r3, r1
    413a:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    413c:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    413e:	bf9d      	ittte	ls
    4140:	f892 1d21 	ldrbls.w	r1, [r2, #3361]	; 0xd21
    4144:	f8d2 3d1c 	ldrls.w	r3, [r2, #3356]	; 0xd1c
    4148:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    414c:	2000      	movhi	r0, #0
}
    414e:	bd10      	pop	{r4, pc}
    4150:	200002e0 	.word	0x200002e0

00004154 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    4154:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    4156:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    415a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    415e:	4299      	cmp	r1, r3
    4160:	d128      	bne.n	41b4 <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    4162:	f990 301d 	ldrsb.w	r3, [r0, #29]
    4166:	2b00      	cmp	r3, #0
    4168:	db26      	blt.n	41b8 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    416a:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    416c:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    416e:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    4172:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4174:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4178:	4354      	muls	r4, r2
					      conn->supervision_reload *
    417a:	227d      	movs	r2, #125	; 0x7d
    417c:	4362      	muls	r2, r4
					      125 / 1000;
    417e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    4182:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4186:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    418a:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    418e:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4190:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    4194:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    4196:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    4198:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    419c:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    419e:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    41a2:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    41a4:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    41a8:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    41ac:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    41b0:	4618      	mov	r0, r3
    41b2:	bd30      	pop	{r4, r5, pc}
		return 1;
    41b4:	2001      	movs	r0, #1
    41b6:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    41b8:	2002      	movs	r0, #2
}
    41ba:	bd30      	pop	{r4, r5, pc}

000041bc <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    41bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    41c0:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    41c2:	4294      	cmp	r4, r2
{
    41c4:	4681      	mov	r9, r0
    41c6:	460f      	mov	r7, r1
    41c8:	4690      	mov	r8, r2
	if (_first == last) {
    41ca:	d03d      	beq.n	4248 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    41cc:	4e1f      	ldr	r6, [pc, #124]	; (424c <tx_cmplt_get+0x90>)
    41ce:	f8d6 3d50 	ldr.w	r3, [r6, #3408]	; 0xd50
    41d2:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    41d6:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    41d8:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    41da:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    41de:	f606 5a44 	addw	sl, r6, #3396	; 0xd44
		if (*handle != _radio.pkt_release[_first].handle) {
    41e2:	b222      	sxth	r2, r4
    41e4:	f8d6 0d50 	ldr.w	r0, [r6, #3408]	; 0xd50
    41e8:	f8b9 e000 	ldrh.w	lr, [r9]
    41ec:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    41f0:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    41f4:	4596      	cmp	lr, r2
    41f6:	d120      	bne.n	423a <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    41f8:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    41fa:	2801      	cmp	r0, #1
    41fc:	f020 0303 	bic.w	r3, r0, #3
    4200:	d90a      	bls.n	4218 <tx_cmplt_get+0x5c>
    4202:	b1f3      	cbz	r3, 4242 <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4204:	1d02      	adds	r2, r0, #4
    4206:	d01c      	beq.n	4242 <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4208:	7942      	ldrb	r2, [r0, #5]
    420a:	b1d2      	cbz	r2, 4242 <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    420c:	7902      	ldrb	r2, [r0, #4]
    420e:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4212:	3a01      	subs	r2, #1
    4214:	2a01      	cmp	r2, #1
    4216:	d814      	bhi.n	4242 <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    4218:	2201      	movs	r2, #1
			cmplt++;
    421a:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    421c:	604a      	str	r2, [r1, #4]
			cmplt++;
    421e:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    4220:	b113      	cbz	r3, 4228 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    4222:	4651      	mov	r1, sl
    4224:	f7fe f8e3 	bl	23ee <mem_release>
		}

		_first = _first + 1;
    4228:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    422a:	f896 2d54 	ldrb.w	r2, [r6, #3412]	; 0xd54
		_first = _first + 1;
    422e:	b2e4      	uxtb	r4, r4
			_first = 0;
    4230:	42a2      	cmp	r2, r4
    4232:	bf08      	it	eq
    4234:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    4236:	4544      	cmp	r4, r8
    4238:	d1d3      	bne.n	41e2 <tx_cmplt_get+0x26>

	*first = _first;
    423a:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    423c:	4628      	mov	r0, r5
    423e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    4242:	f8c1 b004 	str.w	fp, [r1, #4]
    4246:	e7eb      	b.n	4220 <tx_cmplt_get+0x64>
		return 0;
    4248:	2500      	movs	r5, #0
    424a:	e7f7      	b.n	423c <tx_cmplt_get+0x80>
    424c:	200002e0 	.word	0x200002e0

00004250 <connection_get>:
{
    4250:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    4252:	4b09      	ldr	r3, [pc, #36]	; (4278 <connection_get+0x28>)
    4254:	f893 2cf8 	ldrb.w	r2, [r3, #3320]	; 0xcf8
    4258:	4282      	cmp	r2, r0
{
    425a:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    425c:	d90a      	bls.n	4274 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    425e:	4602      	mov	r2, r0
    4260:	f44f 7182 	mov.w	r1, #260	; 0x104
    4264:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    4268:	f7fe f8d6 	bl	2418 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    426c:	b110      	cbz	r0, 4274 <connection_get+0x24>
    426e:	8c03      	ldrh	r3, [r0, #32]
    4270:	42a3      	cmp	r3, r4
    4272:	d000      	beq.n	4276 <connection_get+0x26>
	return 0;
    4274:	2000      	movs	r0, #0
}
    4276:	bd10      	pop	{r4, pc}
    4278:	200002e0 	.word	0x200002e0

0000427c <role_disable>:
{
    427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4280:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4282:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    4284:	2805      	cmp	r0, #5
{
    4286:	4605      	mov	r5, r0
    4288:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    428a:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    428c:	d00e      	beq.n	42ac <role_disable+0x30>
    428e:	2806      	cmp	r0, #6
    4290:	f000 808e 	beq.w	43b0 <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4294:	f240 8086 	bls.w	43a4 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    4298:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    429a:	b280      	uxth	r0, r0
    429c:	f7ff ffd8 	bl	4250 <connection_get>
			if (!conn) {
    42a0:	2800      	cmp	r0, #0
    42a2:	f000 80d9 	beq.w	4458 <role_disable+0x1dc>
			ticks_active_to_start =
    42a6:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    42aa:	e010      	b.n	42ce <role_disable+0x52>
		ticks_xtal_to_start =
    42ac:	4b6b      	ldr	r3, [pc, #428]	; (445c <role_disable+0x1e0>)
    42ae:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    42b0:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    42b4:	ab02      	add	r3, sp, #8
    42b6:	9300      	str	r3, [sp, #0]
    42b8:	460a      	mov	r2, r1
    42ba:	4b69      	ldr	r3, [pc, #420]	; (4460 <role_disable+0x1e4>)
    42bc:	2103      	movs	r1, #3
    42be:	2000      	movs	r0, #0
    42c0:	f7fe ff7c 	bl	31bc <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    42c4:	2802      	cmp	r0, #2
    42c6:	d066      	beq.n	4396 <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    42c8:	9b02      	ldr	r3, [sp, #8]
    42ca:	2b00      	cmp	r3, #0
    42cc:	d167      	bne.n	439e <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    42ce:	4c63      	ldr	r4, [pc, #396]	; (445c <role_disable+0x1e0>)
    42d0:	7ca3      	ldrb	r3, [r4, #18]
    42d2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    42d6:	2b00      	cmp	r3, #0
    42d8:	d164      	bne.n	43a4 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    42da:	ab06      	add	r3, sp, #24
    42dc:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    42de:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    42e0:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    42e4:	2103      	movs	r1, #3
    42e6:	9300      	str	r3, [sp, #0]
    42e8:	462a      	mov	r2, r5
    42ea:	4b5d      	ldr	r3, [pc, #372]	; (4460 <role_disable+0x1e4>)
    42ec:	f7fe ff66 	bl	31bc <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    42f0:	2802      	cmp	r0, #2
    42f2:	d063      	beq.n	43bc <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    42f4:	9b02      	ldr	r3, [sp, #8]
    42f6:	2b00      	cmp	r3, #0
    42f8:	d145      	bne.n	4386 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    42fa:	7c23      	ldrb	r3, [r4, #16]
    42fc:	429d      	cmp	r5, r3
    42fe:	d002      	beq.n	4306 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    4300:	7c63      	ldrb	r3, [r4, #17]
    4302:	429d      	cmp	r5, r3
    4304:	d13b      	bne.n	437e <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4306:	ab06      	add	r3, sp, #24
    4308:	2202      	movs	r2, #2
    430a:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    430e:	2200      	movs	r2, #0
    4310:	9300      	str	r3, [sp, #0]
    4312:	2103      	movs	r1, #3
    4314:	4b52      	ldr	r3, [pc, #328]	; (4460 <role_disable+0x1e4>)
    4316:	4610      	mov	r0, r2
    4318:	f7fe ff50 	bl	31bc <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    431c:	2802      	cmp	r0, #2
    431e:	d107      	bne.n	4330 <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4320:	2201      	movs	r2, #1
    4322:	4611      	mov	r1, r2
    4324:	2003      	movs	r0, #3
    4326:	f7fe f8d9 	bl	24dc <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    432a:	9b03      	ldr	r3, [sp, #12]
    432c:	2b02      	cmp	r3, #2
    432e:	d039      	beq.n	43a4 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4330:	9803      	ldr	r0, [sp, #12]
    4332:	2800      	cmp	r0, #0
    4334:	d15e      	bne.n	43f4 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4336:	2302      	movs	r3, #2
    4338:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    433a:	7c23      	ldrb	r3, [r4, #16]
    433c:	2b00      	cmp	r3, #0
    433e:	d031      	beq.n	43a4 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4340:	ab04      	add	r3, sp, #16
    4342:	9300      	str	r3, [sp, #0]
    4344:	2201      	movs	r2, #1
    4346:	4b46      	ldr	r3, [pc, #280]	; (4460 <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    4348:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    434a:	2103      	movs	r1, #3
    434c:	f7fe ff36 	bl	31bc <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4350:	2802      	cmp	r0, #2
    4352:	d107      	bne.n	4364 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4354:	2201      	movs	r2, #1
    4356:	4611      	mov	r1, r2
    4358:	2003      	movs	r0, #3
    435a:	f7fe f8bf 	bl	24dc <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    435e:	9b04      	ldr	r3, [sp, #16]
    4360:	2b02      	cmp	r3, #2
    4362:	d01f      	beq.n	43a4 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4364:	9a04      	ldr	r2, [sp, #16]
    4366:	2a00      	cmp	r2, #0
    4368:	d136      	bne.n	43d8 <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    436a:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    436e:	45b0      	cmp	r8, r6
    4370:	d93e      	bls.n	43f0 <role_disable+0x174>
				ret = mayfly_enqueue(
    4372:	4b3c      	ldr	r3, [pc, #240]	; (4464 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4374:	4611      	mov	r1, r2
    4376:	2003      	movs	r0, #3
    4378:	f7fe f8d8 	bl	252c <mayfly_enqueue>
			LL_ASSERT(!ret);
    437c:	b990      	cbnz	r0, 43a4 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    437e:	7ca3      	ldrb	r3, [r4, #18]
    4380:	b90b      	cbnz	r3, 4386 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    4382:	2301      	movs	r3, #1
    4384:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    4386:	2300      	movs	r3, #0
    4388:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    438a:	9802      	ldr	r0, [sp, #8]
}
    438c:	b006      	add	sp, #24
    438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    4392:	f7ff fe77 	bl	4084 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4396:	9b02      	ldr	r3, [sp, #8]
    4398:	2b02      	cmp	r3, #2
    439a:	d0fa      	beq.n	4392 <role_disable+0x116>
    439c:	e794      	b.n	42c8 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    439e:	9b02      	ldr	r3, [sp, #8]
    43a0:	2b01      	cmp	r3, #1
    43a2:	d094      	beq.n	42ce <role_disable+0x52>
		LL_ASSERT(0);
    43a4:	4040      	eors	r0, r0
    43a6:	f380 8811 	msr	BASEPRI, r0
    43aa:	f04f 0004 	mov.w	r0, #4
    43ae:	df02      	svc	2
		ticks_xtal_to_start =
    43b0:	4b2a      	ldr	r3, [pc, #168]	; (445c <role_disable+0x1e0>)
    43b2:	f8d3 6c1c 	ldr.w	r6, [r3, #3100]	; 0xc1c
		ticks_active_to_start =
    43b6:	f8d3 8c20 	ldr.w	r8, [r3, #3104]	; 0xc20
		break;
    43ba:	e788      	b.n	42ce <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    43bc:	7c63      	ldrb	r3, [r4, #17]
    43be:	429d      	cmp	r5, r3
    43c0:	d104      	bne.n	43cc <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    43c2:	2201      	movs	r2, #1
    43c4:	4611      	mov	r1, r2
    43c6:	2003      	movs	r0, #3
    43c8:	f7fe f888 	bl	24dc <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    43cc:	9b02      	ldr	r3, [sp, #8]
    43ce:	2b02      	cmp	r3, #2
    43d0:	d190      	bne.n	42f4 <role_disable+0x78>
			cpu_sleep();
    43d2:	f7ff fe57 	bl	4084 <cpu_sleep>
    43d6:	e7f9      	b.n	43cc <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    43d8:	9b04      	ldr	r3, [sp, #16]
    43da:	2b01      	cmp	r3, #1
    43dc:	d1e2      	bne.n	43a4 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    43de:	2200      	movs	r2, #0
    43e0:	4611      	mov	r1, r2
    43e2:	4b20      	ldr	r3, [pc, #128]	; (4464 <role_disable+0x1e8>)
    43e4:	2003      	movs	r0, #3
    43e6:	f7fe f8a1 	bl	252c <mayfly_enqueue>
			LL_ASSERT(!ret);
    43ea:	4602      	mov	r2, r0
    43ec:	2800      	cmp	r0, #0
    43ee:	d1d9      	bne.n	43a4 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    43f0:	4b1d      	ldr	r3, [pc, #116]	; (4468 <role_disable+0x1ec>)
    43f2:	e7bf      	b.n	4374 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    43f4:	9d03      	ldr	r5, [sp, #12]
    43f6:	2d01      	cmp	r5, #1
    43f8:	d1d4      	bne.n	43a4 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    43fa:	2fff      	cmp	r7, #255	; 0xff
    43fc:	d019      	beq.n	4432 <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    43fe:	ab06      	add	r3, sp, #24
    4400:	2202      	movs	r2, #2
    4402:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4406:	2103      	movs	r1, #3
    4408:	9300      	str	r3, [sp, #0]
    440a:	463a      	mov	r2, r7
    440c:	4b14      	ldr	r3, [pc, #80]	; (4460 <role_disable+0x1e4>)
    440e:	2000      	movs	r0, #0
    4410:	f7fe fed4 	bl	31bc <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    4414:	2802      	cmp	r0, #2
    4416:	d107      	bne.n	4428 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4418:	462a      	mov	r2, r5
    441a:	4629      	mov	r1, r5
    441c:	2003      	movs	r0, #3
    441e:	f7fe f85d 	bl	24dc <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    4422:	9b05      	ldr	r3, [sp, #20]
    4424:	2b02      	cmp	r3, #2
    4426:	d0bd      	beq.n	43a4 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    4428:	9b05      	ldr	r3, [sp, #20]
    442a:	b113      	cbz	r3, 4432 <role_disable+0x1b6>
    442c:	9b05      	ldr	r3, [sp, #20]
    442e:	2b01      	cmp	r3, #1
    4430:	d1b8      	bne.n	43a4 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    4432:	7ce3      	ldrb	r3, [r4, #19]
    4434:	2b00      	cmp	r3, #0
    4436:	d0a2      	beq.n	437e <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4438:	4b0c      	ldr	r3, [pc, #48]	; (446c <role_disable+0x1f0>)
    443a:	2204      	movs	r2, #4
    443c:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    443e:	2200      	movs	r2, #0
    4440:	4611      	mov	r1, r2
    4442:	2003      	movs	r0, #3
    4444:	f7fe f872 	bl	252c <mayfly_enqueue>
			LL_ASSERT(!ret);
    4448:	2800      	cmp	r0, #0
    444a:	d1ab      	bne.n	43a4 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    444c:	7ce3      	ldrb	r3, [r4, #19]
    444e:	2b00      	cmp	r3, #0
    4450:	d095      	beq.n	437e <role_disable+0x102>
				cpu_sleep();
    4452:	f7ff fe17 	bl	4084 <cpu_sleep>
    4456:	e7f9      	b.n	444c <role_disable+0x1d0>
				return 1;
    4458:	2001      	movs	r0, #1
    445a:	e797      	b.n	438c <role_disable+0x110>
    445c:	200002e0 	.word	0x200002e0
    4460:	000040c9 	.word	0x000040c9
    4464:	20005f10 	.word	0x20005f10
    4468:	20005fb0 	.word	0x20005fb0
    446c:	20005f40 	.word	0x20005f40

00004470 <chan_set>:
{
    4470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    4474:	4e7d      	ldr	r6, [pc, #500]	; (466c <chan_set+0x1fc>)
    4476:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    447a:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    447e:	4433      	add	r3, r6
{
    4480:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4482:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    4486:	f003 030f 	and.w	r3, r3, #15
    448a:	2b07      	cmp	r3, #7
    448c:	f040 80e0 	bne.w	4650 <chan_set+0x1e0>
		switch (chan) {
    4490:	2826      	cmp	r0, #38	; 0x26
    4492:	f8df 8214 	ldr.w	r8, [pc, #532]	; 46a8 <chan_set+0x238>
    4496:	d030      	beq.n	44fa <chan_set+0x8a>
    4498:	2827      	cmp	r0, #39	; 0x27
    449a:	f8df a210 	ldr.w	sl, [pc, #528]	; 46ac <chan_set+0x23c>
    449e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 46b0 <chan_set+0x240>
    44a2:	d034      	beq.n	450e <chan_set+0x9e>
    44a4:	2825      	cmp	r0, #37	; 0x25
    44a6:	d162      	bne.n	456e <chan_set+0xfe>
			stop_time_37 = k_cycle_get_32();
    44a8:	f7fc ff84 	bl	13b4 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    44ac:	4e70      	ldr	r6, [pc, #448]	; (4670 <chan_set+0x200>)
			stop_time_37 = k_cycle_get_32();
    44ae:	4b71      	ldr	r3, [pc, #452]	; (4674 <chan_set+0x204>)
			cycles_spent_37 = stop_time_37 - start_time37;
    44b0:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    44b2:	6018      	str	r0, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    44b4:	f8da 2000 	ldr.w	r2, [sl]
			cycles_spent_37 = stop_time_37 - start_time37;
    44b8:	4b6f      	ldr	r3, [pc, #444]	; (4678 <chan_set+0x208>)
    44ba:	1bc7      	subs	r7, r0, r7
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    44bc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time37;
    44c0:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    44c2:	fb82 2305 	smull	r2, r3, r2, r5
    44c6:	fba2 0107 	umull	r0, r1, r2, r7
    44ca:	f8d9 2000 	ldr.w	r2, [r9]
    44ce:	fb07 1103 	mla	r1, r7, r3, r1
    44d2:	17d3      	asrs	r3, r2, #31
    44d4:	f7fb fec8 	bl	268 <__aeabi_uldivmod>
    44d8:	4b68      	ldr	r3, [pc, #416]	; (467c <chan_set+0x20c>)
    44da:	fbb0 f0f5 	udiv	r0, r0, r5
    44de:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    44e0:	f7fc ff68 	bl	13b4 <_timer_cycle_get_32>
    44e4:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    44e8:	f7fc ff64 	bl	13b4 <_timer_cycle_get_32>
			pckt_send++;
    44ec:	4a64      	ldr	r2, [pc, #400]	; (4680 <chan_set+0x210>)
			start_time37= k_cycle_get_32();
    44ee:	6030      	str	r0, [r6, #0]
			pckt_send++;
    44f0:	7813      	ldrb	r3, [r2, #0]
    44f2:	3301      	adds	r3, #1
    44f4:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    44f6:	2002      	movs	r0, #2
    44f8:	e09e      	b.n	4638 <chan_set+0x1c8>
			start_time = k_cycle_get_32();
    44fa:	f7fc ff5b 	bl	13b4 <_timer_cycle_get_32>
			pckt_send++;
    44fe:	4a60      	ldr	r2, [pc, #384]	; (4680 <chan_set+0x210>)
			start_time = k_cycle_get_32();
    4500:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    4504:	7813      	ldrb	r3, [r2, #0]
    4506:	3301      	adds	r3, #1
    4508:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    450a:	201a      	movs	r0, #26
    450c:	e094      	b.n	4638 <chan_set+0x1c8>
			stop_time_39 = k_cycle_get_32();
    450e:	f7fc ff51 	bl	13b4 <_timer_cycle_get_32>
    4512:	4b5c      	ldr	r3, [pc, #368]	; (4684 <chan_set+0x214>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4514:	f8da 2000 	ldr.w	r2, [sl]
			stop_time_39 = k_cycle_get_32();
    4518:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    451a:	f8d8 3000 	ldr.w	r3, [r8]
    451e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    4522:	eba0 0e03 	sub.w	lr, r0, r3
    4526:	fb82 2307 	smull	r2, r3, r2, r7
    452a:	fbae 0102 	umull	r0, r1, lr, r2
    452e:	f8d9 2000 	ldr.w	r2, [r9]
    4532:	fb0e 1103 	mla	r1, lr, r3, r1
    4536:	17d3      	asrs	r3, r2, #31
    4538:	f7fb fe96 	bl	268 <__aeabi_uldivmod>
    453c:	4b52      	ldr	r3, [pc, #328]	; (4688 <chan_set+0x218>)
    453e:	fbb0 f0f7 	udiv	r0, r0, r7
    4542:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    4544:	4b4e      	ldr	r3, [pc, #312]	; (4680 <chan_set+0x210>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4546:	2500      	movs	r5, #0
			pckt_send = 0;
    4548:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    454a:	f7fc ff33 	bl	13b4 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    454e:	f896 3c69 	ldrb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4552:	f896 2c68 	ldrb.w	r2, [r6, #3176]	; 0xc68
			start_time = k_cycle_get_32();
    4556:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    455a:	3301      	adds	r3, #1
    455c:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    455e:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    4560:	f886 3c69 	strb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4564:	d201      	bcs.n	456a <chan_set+0xfa>
			_radio.ext_advertiser.current_slot= 0;
    4566:	f886 5c69 	strb.w	r5, [r6, #3177]	; 0xc69
			radio_freq_chan_set(80);
    456a:	2050      	movs	r0, #80	; 0x50
    456c:	e064      	b.n	4638 <chan_set+0x1c8>
			stop_time_aux1 = k_cycle_get_32();
    456e:	f7fc ff21 	bl	13b4 <_timer_cycle_get_32>
    4572:	4b46      	ldr	r3, [pc, #280]	; (468c <chan_set+0x21c>)
    4574:	6018      	str	r0, [r3, #0]
    4576:	f8da 3000 	ldr.w	r3, [sl]
    457a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    457e:	fb83 2305 	smull	r2, r3, r3, r5
    4582:	e9cd 2300 	strd	r2, r3, [sp]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    4586:	f8d9 3000 	ldr.w	r3, [r9]
    458a:	4619      	mov	r1, r3
    458c:	17da      	asrs	r2, r3, #31
    458e:	f8d8 3000 	ldr.w	r3, [r8]
    4592:	e9cd 1202 	strd	r1, r2, [sp, #8]
    4596:	9a00      	ldr	r2, [sp, #0]
    4598:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    459a:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    459c:	fba3 0102 	umull	r0, r1, r3, r2
    45a0:	9a01      	ldr	r2, [sp, #4]
    45a2:	fb03 1102 	mla	r1, r3, r2, r1
    45a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    45aa:	f7fb fe5d 	bl	268 <__aeabi_uldivmod>
    45ae:	4b38      	ldr	r3, [pc, #224]	; (4690 <chan_set+0x220>)
    45b0:	fbb0 f0f5 	udiv	r0, r0, r5
    45b4:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    45b6:	4b2e      	ldr	r3, [pc, #184]	; (4670 <chan_set+0x200>)
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	1aff      	subs	r7, r7, r3
    45bc:	9b00      	ldr	r3, [sp, #0]
    45be:	fba7 0103 	umull	r0, r1, r7, r3
    45c2:	9b01      	ldr	r3, [sp, #4]
    45c4:	fb07 1103 	mla	r1, r7, r3, r1
    45c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    45cc:	f7fb fe4c 	bl	268 <__aeabi_uldivmod>
    45d0:	4b30      	ldr	r3, [pc, #192]	; (4694 <chan_set+0x224>)
    45d2:	fbb0 f0f5 	udiv	r0, r0, r5
    45d6:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    45d8:	f7fc feec 	bl	13b4 <_timer_cycle_get_32>
    45dc:	4b2e      	ldr	r3, [pc, #184]	; (4698 <chan_set+0x228>)
			last_dynamic_cal = final_dynamic_cal;
    45de:	4f2f      	ldr	r7, [pc, #188]	; (469c <chan_set+0x22c>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    45e0:	2100      	movs	r1, #0
    45e2:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    45e6:	4b2e      	ldr	r3, [pc, #184]	; (46a0 <chan_set+0x230>)
    45e8:	f8d7 8000 	ldr.w	r8, [r7]
    45ec:	687a      	ldr	r2, [r7, #4]
    45ee:	f8c3 8000 	str.w	r8, [r3]
    45f2:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    45f4:	4b2b      	ldr	r3, [pc, #172]	; (46a4 <chan_set+0x234>)
    45f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    45fa:	1a82      	subs	r2, r0, r2
    45fc:	f8da 0000 	ldr.w	r0, [sl]
    4600:	eb61 0303 	sbc.w	r3, r1, r3
    4604:	fb80 0105 	smull	r0, r1, r0, r5
    4608:	4351      	muls	r1, r2
    460a:	fb00 1303 	mla	r3, r0, r3, r1
    460e:	fba2 0100 	umull	r0, r1, r2, r0
    4612:	f8d9 2000 	ldr.w	r2, [r9]
    4616:	4419      	add	r1, r3
    4618:	17d3      	asrs	r3, r2, #31
    461a:	f7fb fe25 	bl	268 <__aeabi_uldivmod>
    461e:	2300      	movs	r3, #0
    4620:	fbb0 f0f5 	udiv	r0, r0, r5
    4624:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    4626:	eba0 0008 	sub.w	r0, r0, r8
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    462a:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    462c:	f8c6 0c88 	str.w	r0, [r6, #3208]	; 0xc88
			if (chan < 11) {
    4630:	2c0a      	cmp	r4, #10
    4632:	d809      	bhi.n	4648 <chan_set+0x1d8>
				radio_freq_chan_set(4 + (2 * chan));
    4634:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    4636:	0040      	lsls	r0, r0, #1
    4638:	f005 fa1e 	bl	9a78 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    463c:	4620      	mov	r0, r4
}
    463e:	b004      	add	sp, #16
    4640:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_whiten_iv_set(chan);
    4644:	f005 ba1e 	b.w	9a84 <radio_whiten_iv_set>
			} else if (chan < 40) {
    4648:	2c27      	cmp	r4, #39	; 0x27
    464a:	d809      	bhi.n	4660 <chan_set+0x1f0>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    464c:	1ce0      	adds	r0, r4, #3
    464e:	e7f2      	b.n	4636 <chan_set+0x1c6>
		switch (chan) {
    4650:	2826      	cmp	r0, #38	; 0x26
    4652:	f43f af5a 	beq.w	450a <chan_set+0x9a>
    4656:	2827      	cmp	r0, #39	; 0x27
    4658:	d087      	beq.n	456a <chan_set+0xfa>
    465a:	2825      	cmp	r0, #37	; 0x25
    465c:	d1e8      	bne.n	4630 <chan_set+0x1c0>
    465e:	e74a      	b.n	44f6 <chan_set+0x86>
				LL_ASSERT(0);
    4660:	4040      	eors	r0, r0
    4662:	f380 8811 	msr	BASEPRI, r0
    4666:	f04f 0004 	mov.w	r0, #4
    466a:	df02      	svc	2
    466c:	200002e0 	.word	0x200002e0
    4670:	20003c9c 	.word	0x20003c9c
    4674:	20003d04 	.word	0x20003d04
    4678:	20003d58 	.word	0x20003d58
    467c:	20003d78 	.word	0x20003d78
    4680:	20001098 	.word	0x20001098
    4684:	20003d08 	.word	0x20003d08
    4688:	20003d60 	.word	0x20003d60
    468c:	20003d6c 	.word	0x20003d6c
    4690:	20003d34 	.word	0x20003d34
    4694:	20003c88 	.word	0x20003c88
    4698:	20003d28 	.word	0x20003d28
    469c:	20001058 	.word	0x20001058
    46a0:	20001060 	.word	0x20001060
    46a4:	20003c90 	.word	0x20003c90
    46a8:	20003d20 	.word	0x20003d20
    46ac:	20006030 	.word	0x20006030
    46b0:	2000602c 	.word	0x2000602c

000046b4 <adv_setup>:
{
    46b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (_radio.advertiser.adv_data.first !=
    46b8:	4c80      	ldr	r4, [pc, #512]	; (48bc <adv_setup+0x208>)
    46ba:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    46be:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    46c2:	429a      	cmp	r2, r3
    46c4:	d006      	beq.n	46d4 <adv_setup+0x20>
		first = _radio.advertiser.adv_data.first + 1;
    46c6:	3301      	adds	r3, #1
    46c8:	b2db      	uxtb	r3, r3
			first = 0;
    46ca:	2b02      	cmp	r3, #2
    46cc:	bf08      	it	eq
    46ce:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    46d0:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    46d4:	f894 3c13 	ldrb.w	r3, [r4, #3091]	; 0xc13
    46d8:	f894 2c14 	ldrb.w	r2, [r4, #3092]	; 0xc14
    46dc:	429a      	cmp	r2, r3
    46de:	d006      	beq.n	46ee <adv_setup+0x3a>
		first = _radio.advertiser.scan_data.first + 1;
    46e0:	3301      	adds	r3, #1
    46e2:	b2db      	uxtb	r3, r3
			first = 0;
    46e4:	2b02      	cmp	r3, #2
    46e6:	bf08      	it	eq
    46e8:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    46ea:	f884 3c13 	strb.w	r3, [r4, #3091]	; 0xc13
	pdu = (void *)_radio.advertiser.adv_data.data
    46ee:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
    46f2:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    46f6:	372b      	adds	r7, #43	; 0x2b
    46f8:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    46fc:	5de3      	ldrb	r3, [r4, r7]
    46fe:	f003 030f 	and.w	r3, r3, #15
    4702:	2b07      	cmp	r3, #7
    4704:	d15f      	bne.n	47c6 <adv_setup+0x112>
			if(h->adv_addr){
    4706:	f899 3003 	ldrb.w	r3, [r9, #3]
    470a:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    470c:	bf4c      	ite	mi
    470e:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    4712:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    4716:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    4718:	bf48      	it	mi
    471a:	3506      	addmi	r5, #6
			if(h->adi){
    471c:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    471e:	bf48      	it	mi
    4720:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    4722:	06da      	lsls	r2, r3, #27
    4724:	d549      	bpl.n	47ba <adv_setup+0x106>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4726:	f8d4 2c84 	ldr.w	r2, [r4, #3204]	; 0xc84
    472a:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    472e:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4732:	4413      	add	r3, r2
    4734:	f894 2c69 	ldrb.w	r2, [r4, #3177]	; 0xc69
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4738:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    473c:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    473e:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    4740:	f8c4 2c6c 	str.w	r2, [r4, #3180]	; 0xc6c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    4744:	f040 8093 	bne.w	486e <adv_setup+0x1ba>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    4748:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    474c:	f003 0307 	and.w	r3, r3, #7
    4750:	2b07      	cmp	r3, #7
    4752:	d17f      	bne.n	4854 <adv_setup+0x1a0>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    4754:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    4758:	1a82      	subs	r2, r0, r2
    475a:	4610      	mov	r0, r2
    475c:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    475e:	f8c4 2c7c 	str.w	r2, [r4, #3196]	; 0xc7c
				if(offset > 245700){
    4762:	4a57      	ldr	r2, [pc, #348]	; (48c0 <adv_setup+0x20c>)
    4764:	78ae      	ldrb	r6, [r5, #2]
    4766:	f895 8000 	ldrb.w	r8, [r5]
    476a:	2300      	movs	r3, #0
    476c:	428b      	cmp	r3, r1
    476e:	bf08      	it	eq
    4770:	4282      	cmpeq	r2, r0
    4772:	f080 808d 	bcs.w	4890 <adv_setup+0x1dc>
					ap->offs = offset/300;
    4776:	f44f 7296 	mov.w	r2, #300	; 0x12c
    477a:	2300      	movs	r3, #0
    477c:	f7fb fd74 	bl	268 <__aeabi_uldivmod>
    4780:	f026 061f 	bic.w	r6, r6, #31
    4784:	7068      	strb	r0, [r5, #1]
    4786:	f3c0 2004 	ubfx	r0, r0, #8, #5
    478a:	4330      	orrs	r0, r6
    478c:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    478e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    4792:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    4796:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    479a:	07db      	lsls	r3, r3, #31
    479c:	d508      	bpl.n	47b0 <adv_setup+0xfc>
					_radio.ext_advertiser.aux_pckt_chan++;
    479e:	f894 3c80 	ldrb.w	r3, [r4, #3200]	; 0xc80
    47a2:	3301      	adds	r3, #1
    47a4:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    47a6:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    47a8:	bf08      	it	eq
    47aa:	2300      	moveq	r3, #0
    47ac:	f884 3c80 	strb.w	r3, [r4, #3200]	; 0xc80
				ap->chan_idx = 0x03;
    47b0:	782b      	ldrb	r3, [r5, #0]
    47b2:	2203      	movs	r2, #3
    47b4:	f362 0305 	bfi	r3, r2, #0, #6
    47b8:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;   //in order to change the aux packet channel index
    47ba:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    47be:	f36f 0300 	bfc	r3, #0, #1
    47c2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		radio_pkt_tx_set(pdu);
    47c6:	4648      	mov	r0, r9
    47c8:	f005 f9ba 	bl	9b40 <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    47cc:	5de3      	ldrb	r3, [r4, r7]
    47ce:	f003 030f 	and.w	r3, r3, #15
    47d2:	2b02      	cmp	r3, #2
    47d4:	d06a      	beq.n	48ac <adv_setup+0x1f8>
    47d6:	2b07      	cmp	r3, #7
    47d8:	d068      	beq.n	48ac <adv_setup+0x1f8>
			_radio.state = STATE_TX;
    47da:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    47dc:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    47de:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    47e0:	f005 fab8 	bl	9d54 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    47e4:	2000      	movs	r0, #0
    47e6:	f005 fa25 	bl	9c34 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    47ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    47ee:	f3c3 0202 	ubfx	r2, r3, #0, #3
    47f2:	b2d3      	uxtb	r3, r2
    47f4:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    47f6:	2000      	movs	r0, #0
    47f8:	07ce      	lsls	r6, r1, #31
    47fa:	f100 0501 	add.w	r5, r0, #1
    47fe:	d55a      	bpl.n	48b6 <adv_setup+0x202>
			(_radio.advertiser.chan_map_current - 1);
    4800:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    4802:	4013      	ands	r3, r2
    4804:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    4808:	4d2e      	ldr	r5, [pc, #184]	; (48c4 <adv_setup+0x210>)
			_radio.advertiser.chan_map_current &=
    480a:	f363 0202 	bfi	r2, r3, #0, #3
    480e:	4b2e      	ldr	r3, [pc, #184]	; (48c8 <adv_setup+0x214>)
    4810:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    4814:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    4818:	bf08      	it	eq
    481a:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    481c:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    481e:	bf0c      	ite	eq
    4820:	3201      	addeq	r2, #1
			chan_case = 0 ;
    4822:	2200      	movne	r2, #0
    4824:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    4826:	f894 3c6a 	ldrb.w	r3, [r4, #3178]	; 0xc6a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    482a:	f894 2c68 	ldrb.w	r2, [r4, #3176]	; 0xc68
		_radio.ext_advertiser.event++;
    482e:	3301      	adds	r3, #1
    4830:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    4832:	429a      	cmp	r2, r3
		count++;
    4834:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    4838:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
		count++;
    483c:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    483e:	bf38      	it	cc
    4840:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    4842:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    4844:	bf38      	it	cc
    4846:	f884 3c6a 	strbcc.w	r3, [r4, #3178]	; 0xc6a
		chan_set(37 + chan);
    484a:	3025      	adds	r0, #37	; 0x25
}
    484c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		chan_set(37 + chan);
    4850:	f7ff be0e 	b.w	4470 <chan_set>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    4854:	2b06      	cmp	r3, #6
    4856:	d104      	bne.n	4862 <adv_setup+0x1ae>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    4858:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	; 0xc74
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    485c:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    485e:	2100      	movs	r1, #0
    4860:	e77f      	b.n	4762 <adv_setup+0xae>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    4862:	2b04      	cmp	r3, #4
    4864:	f47f af7d 	bne.w	4762 <adv_setup+0xae>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    4868:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	; 0xc78
    486c:	e7f6      	b.n	485c <adv_setup+0x1a8>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    486e:	f894 6c6a 	ldrb.w	r6, [r4, #3178]	; 0xc6a
    4872:	4373      	muls	r3, r6
    4874:	f8c4 3c6c 	str.w	r3, [r4, #3180]	; 0xc6c
					if(_radio.ext_advertiser.event == 0){
    4878:	b926      	cbnz	r6, 4884 <adv_setup+0x1d0>
						start_dynamic_cal = k_cycle_get_32(); 
    487a:	f7fc fd9b 	bl	13b4 <_timer_cycle_get_32>
    487e:	4b13      	ldr	r3, [pc, #76]	; (48cc <adv_setup+0x218>)
    4880:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    4884:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    4888:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	; 0xc6c
    488c:	1ac0      	subs	r0, r0, r3
    488e:	e7e6      	b.n	485e <adv_setup+0x1aa>
					ap->offs = offset /30;
    4890:	221e      	movs	r2, #30
    4892:	2300      	movs	r3, #0
    4894:	f7fb fce8 	bl	268 <__aeabi_uldivmod>
    4898:	f026 061f 	bic.w	r6, r6, #31
    489c:	7068      	strb	r0, [r5, #1]
    489e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    48a2:	4306      	orrs	r6, r0
    48a4:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    48a6:	f36f 18c7 	bfc	r8, #7, #1
    48aa:	e772      	b.n	4792 <adv_setup+0xde>
			_radio.state = STATE_CLOSE;
    48ac:	2303      	movs	r3, #3
    48ae:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    48b0:	f005 f9d6 	bl	9c60 <radio_switch_complete_and_disable>
    48b4:	e799      	b.n	47ea <adv_setup+0x136>
			bitmap >>= 1;
    48b6:	0849      	lsrs	r1, r1, #1
    48b8:	4628      	mov	r0, r5
    48ba:	e79d      	b.n	47f8 <adv_setup+0x144>
    48bc:	200002e0 	.word	0x200002e0
    48c0:	0003bfc4 	.word	0x0003bfc4
    48c4:	20001053 	.word	0x20001053
    48c8:	20001052 	.word	0x20001052
    48cc:	20003c90 	.word	0x20003c90

000048d0 <ext_adv_setup>:
{
    48d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.advertiser.adv_data.first !=
    48d2:	4c59      	ldr	r4, [pc, #356]	; (4a38 <ext_adv_setup+0x168>)
    48d4:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    48d8:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    48dc:	429a      	cmp	r2, r3
    48de:	d006      	beq.n	48ee <ext_adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    48e0:	3301      	adds	r3, #1
    48e2:	b2db      	uxtb	r3, r3
			first = 0;
    48e4:	2b02      	cmp	r3, #2
    48e6:	bf08      	it	eq
    48e8:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    48ea:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    48ee:	f894 3c13 	ldrb.w	r3, [r4, #3091]	; 0xc13
    48f2:	f894 2c14 	ldrb.w	r2, [r4, #3092]	; 0xc14
    48f6:	429a      	cmp	r2, r3
    48f8:	d006      	beq.n	4908 <ext_adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    48fa:	3301      	adds	r3, #1
    48fc:	b2db      	uxtb	r3, r3
			first = 0;
    48fe:	2b02      	cmp	r3, #2
    4900:	bf08      	it	eq
    4902:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    4904:	f884 3c13 	strb.w	r3, [r4, #3091]	; 0xc13
	pdu = (void *)_radio.advertiser.adv_data.data
    4908:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    490c:	f894 5432 	ldrb.w	r5, [r4, #1074]	; 0x432
	switch(_radio.ext_advertiser.aux_chain_count_current){
    4910:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
	pdu = (void *)_radio.advertiser.adv_data.data
    4914:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    4918:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    491c:	372b      	adds	r7, #43	; 0x2b
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    491e:	f205 252f 	addw	r5, r5, #559	; 0x22f
	pdu = (void *)_radio.advertiser.adv_data.data
    4922:	19e6      	adds	r6, r4, r7
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    4924:	4425      	add	r5, r4
	switch(_radio.ext_advertiser.aux_chain_count_current){
    4926:	2b05      	cmp	r3, #5
    4928:	d80a      	bhi.n	4940 <ext_adv_setup+0x70>
    492a:	e8df f003 	tbb	[pc, r3]
    492e:	4503      	.short	0x4503
    4930:	675f574f 	.word	0x675f574f
			memcpy(aux_pdu, copy_pdu, 257);
    4934:	f240 1201 	movw	r2, #257	; 0x101
    4938:	4940      	ldr	r1, [pc, #256]	; (4a3c <ext_adv_setup+0x16c>)
    493a:	4628      	mov	r0, r5
    493c:	f7fb fe48 	bl	5d0 <memcpy>
		if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4940:	5de3      	ldrb	r3, [r4, r7]
    4942:	f003 030f 	and.w	r3, r3, #15
    4946:	2b07      	cmp	r3, #7
    4948:	d11a      	bne.n	4980 <ext_adv_setup+0xb0>
			if(h->adv_addr){
    494a:	78f2      	ldrb	r2, [r6, #3]
    494c:	07d3      	lsls	r3, r2, #31
				ptr += BDADDR_SIZE;
    494e:	bf4c      	ite	mi
    4950:	f106 030a 	addmi.w	r3, r6, #10
		ptr = (u8_t *)h + sizeof(*h);
    4954:	1d33      	addpl	r3, r6, #4
			if(h->tgt_addr){
    4956:	0790      	lsls	r0, r2, #30
				ptr += BDADDR_SIZE;
    4958:	bf48      	it	mi
    495a:	3306      	addmi	r3, #6
			if(h->adi){
    495c:	0711      	lsls	r1, r2, #28
				ptr += sizeof(*adi_ptr);
    495e:	bf48      	it	mi
    4960:	3302      	addmi	r3, #2
			if(h->aux_ptr){
    4962:	06d2      	lsls	r2, r2, #27
    4964:	d50c      	bpl.n	4980 <ext_adv_setup+0xb0>
					ap->offs = offset /30;
    4966:	2206      	movs	r2, #6
    4968:	705a      	strb	r2, [r3, #1]
    496a:	789a      	ldrb	r2, [r3, #2]
    496c:	f022 021f 	bic.w	r2, r2, #31
    4970:	709a      	strb	r2, [r3, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    4972:	781a      	ldrb	r2, [r3, #0]
				ap->chan_idx = 0x03;
    4974:	2103      	movs	r1, #3
    4976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    497a:	f361 0205 	bfi	r2, r1, #0, #6
    497e:	701a      	strb	r2, [r3, #0]
			radio_pkt_tx_set(aux_pdu);
    4980:	4628      	mov	r0, r5
    4982:	f005 f8dd 	bl	9b40 <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    4986:	5de3      	ldrb	r3, [r4, r7]
    4988:	f003 030f 	and.w	r3, r3, #15
    498c:	2b02      	cmp	r3, #2
    498e:	d03d      	beq.n	4a0c <ext_adv_setup+0x13c>
    4990:	2b07      	cmp	r3, #7
    4992:	d03b      	beq.n	4a0c <ext_adv_setup+0x13c>
				_radio.state = STATE_TX;
    4994:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    4996:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    4998:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    499a:	f005 f9db 	bl	9d54 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    499e:	2000      	movs	r0, #0
    49a0:	f005 f948 	bl	9c34 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;			// for packets which are transmittedon primaty channels
    49a4:	2300      	movs	r3, #0
    49a6:	f884 3c69 	strb.w	r3, [r4, #3177]	; 0xc69
			_radio.ext_advertiser.event = 0;				// skip number of events before transmitting aux
    49aa:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
			chan_set(03);
    49ae:	2003      	movs	r0, #3
}
    49b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			chan_set(03);
    49b4:	f7ff bd5c 	b.w	4470 <chan_set>
			memcpy(aux_pdu, copy_pdu, 257);
    49b8:	f240 1201 	movw	r2, #257	; 0x101
    49bc:	4920      	ldr	r1, [pc, #128]	; (4a40 <ext_adv_setup+0x170>)
    49be:	4628      	mov	r0, r5
    49c0:	f7fb fe06 	bl	5d0 <memcpy>
			chan_set(1);
    49c4:	2001      	movs	r0, #1
			chan_set(5);
    49c6:	f7ff fd53 	bl	4470 <chan_set>
			break;
    49ca:	e7b9      	b.n	4940 <ext_adv_setup+0x70>
			memcpy(aux_pdu, copy_pdu, 257);
    49cc:	f240 1201 	movw	r2, #257	; 0x101
    49d0:	491c      	ldr	r1, [pc, #112]	; (4a44 <ext_adv_setup+0x174>)
    49d2:	4628      	mov	r0, r5
    49d4:	f7fb fdfc 	bl	5d0 <memcpy>
			chan_set(2);
    49d8:	2002      	movs	r0, #2
    49da:	e7f4      	b.n	49c6 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    49dc:	f240 1201 	movw	r2, #257	; 0x101
    49e0:	4919      	ldr	r1, [pc, #100]	; (4a48 <ext_adv_setup+0x178>)
    49e2:	4628      	mov	r0, r5
    49e4:	f7fb fdf4 	bl	5d0 <memcpy>
			chan_set(3);
    49e8:	2003      	movs	r0, #3
    49ea:	e7ec      	b.n	49c6 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    49ec:	f240 1201 	movw	r2, #257	; 0x101
    49f0:	4916      	ldr	r1, [pc, #88]	; (4a4c <ext_adv_setup+0x17c>)
    49f2:	4628      	mov	r0, r5
    49f4:	f7fb fdec 	bl	5d0 <memcpy>
			chan_set(4);
    49f8:	2004      	movs	r0, #4
    49fa:	e7e4      	b.n	49c6 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    49fc:	f240 1201 	movw	r2, #257	; 0x101
    4a00:	4913      	ldr	r1, [pc, #76]	; (4a50 <ext_adv_setup+0x180>)
    4a02:	4628      	mov	r0, r5
    4a04:	f7fb fde4 	bl	5d0 <memcpy>
			chan_set(5);
    4a08:	2005      	movs	r0, #5
    4a0a:	e7dc      	b.n	49c6 <ext_adv_setup+0xf6>
				chain_flag = 1;
    4a0c:	4a11      	ldr	r2, [pc, #68]	; (4a54 <ext_adv_setup+0x184>)
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    4a0e:	f894 1c8c 	ldrb.w	r1, [r4, #3212]	; 0xc8c
				chain_flag = 1;
    4a12:	2301      	movs	r3, #1
    4a14:	7013      	strb	r3, [r2, #0]
				_radio.ext_advertiser.aux_chain_count_current++;
    4a16:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
    4a1a:	3301      	adds	r3, #1
    4a1c:	b2db      	uxtb	r3, r3
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    4a1e:	4299      	cmp	r1, r3
				_radio.ext_advertiser.aux_chain_count_current++;
    4a20:	f884 3c8d 	strb.w	r3, [r4, #3213]	; 0xc8d
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    4a24:	d1b6      	bne.n	4994 <ext_adv_setup+0xc4>
					_radio.advertiser.ext_adv = 1;
    4a26:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    4a2a:	f043 0301 	orr.w	r3, r3, #1
    4a2e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					chain_flag = 0;
    4a32:	2300      	movs	r3, #0
    4a34:	7013      	strb	r3, [r2, #0]
    4a36:	e7ad      	b.n	4994 <ext_adv_setup+0xc4>
    4a38:	200002e0 	.word	0x200002e0
    4a3c:	20000713 	.word	0x20000713
    4a40:	20000814 	.word	0x20000814
    4a44:	20000915 	.word	0x20000915
    4a48:	20000a16 	.word	0x20000a16
    4a4c:	20000b17 	.word	0x20000b17
    4a50:	20000c18 	.word	0x20000c18
    4a54:	20001051 	.word	0x20001051

00004a58 <sched_after_mstr_free_slot_get>:
{
    4a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a5c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    4a5e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    4a60:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    4a62:	f8df 9114 	ldr.w	r9, [pc, #276]	; 4b78 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    4a66:	f88d 501f 	strb.w	r5, [sp, #31]
{
    4a6a:	4680      	mov	r8, r0
    4a6c:	4693      	mov	fp, r2
    4a6e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    4a70:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    4a74:	601c      	str	r4, [r3, #0]
    4a76:	9408      	str	r4, [sp, #32]
    4a78:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4a7a:	2302      	movs	r3, #2
    4a7c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    4a7e:	ab09      	add	r3, sp, #36	; 0x24
    4a80:	9302      	str	r3, [sp, #8]
    4a82:	4b3b      	ldr	r3, [pc, #236]	; (4b70 <sched_after_mstr_free_slot_get+0x118>)
    4a84:	9301      	str	r3, [sp, #4]
    4a86:	ab08      	add	r3, sp, #32
    4a88:	9300      	str	r3, [sp, #0]
    4a8a:	f10d 021f 	add.w	r2, sp, #31
    4a8e:	465b      	mov	r3, fp
    4a90:	4641      	mov	r1, r8
    4a92:	2000      	movs	r0, #0
    4a94:	f7fe fbce 	bl	3234 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    4a98:	2802      	cmp	r0, #2
    4a9a:	d00b      	beq.n	4ab4 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    4a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a9e:	b16b      	cbz	r3, 4abc <sched_after_mstr_free_slot_get+0x64>
    4aa0:	4040      	eors	r0, r0
    4aa2:	f380 8811 	msr	BASEPRI, r0
    4aa6:	f04f 0004 	mov.w	r0, #4
    4aaa:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4aac:	4641      	mov	r1, r8
    4aae:	2000      	movs	r0, #0
    4ab0:	f7fe fc3e 	bl	3330 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ab6:	2b02      	cmp	r3, #2
    4ab8:	d0f8      	beq.n	4aac <sched_after_mstr_free_slot_get+0x54>
    4aba:	e7ef      	b.n	4a9c <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    4abc:	f89d 201f 	ldrb.w	r2, [sp, #31]
    4ac0:	2aff      	cmp	r2, #255	; 0xff
    4ac2:	d04e      	beq.n	4b62 <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    4ac4:	2a06      	cmp	r2, #6
    4ac6:	d9d8      	bls.n	4a7a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    4ac8:	f899 3cf8 	ldrb.w	r3, [r9, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    4acc:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    4ace:	429a      	cmp	r2, r3
    4ad0:	dad3      	bge.n	4a7a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4ad2:	3a07      	subs	r2, #7
    4ad4:	b292      	uxth	r2, r2
    4ad6:	f44f 7182 	mov.w	r1, #260	; 0x104
    4ada:	f8d9 0cf0 	ldr.w	r0, [r9, #3312]	; 0xcf0
    4ade:	f7fd fc9b 	bl	2418 <mem_get>
		if (conn && !conn->role) {
    4ae2:	2800      	cmp	r0, #0
    4ae4:	d0c9      	beq.n	4a7a <sched_after_mstr_free_slot_get+0x22>
    4ae6:	f990 301d 	ldrsb.w	r3, [r0, #29]
    4aea:	2b00      	cmp	r3, #0
    4aec:	dbc5      	blt.n	4a7a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    4aee:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    4af0:	9a08      	ldr	r2, [sp, #32]
    4af2:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    4af6:	2b00      	cmp	r3, #0
    4af8:	da12      	bge.n	4b20 <sched_after_mstr_free_slot_get+0xc8>
    4afa:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    4afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    4b00:	4571      	cmp	r1, lr
    4b02:	bf2c      	ite	cs
    4b04:	1852      	addcs	r2, r2, r1
    4b06:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    4b08:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    4b0a:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    4b0c:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    4b0e:	f101 0104 	add.w	r1, r1, #4
    4b12:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    4b14:	d108      	bne.n	4b28 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    4b16:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    4b1a:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    4b1c:	4616      	mov	r6, r2
    4b1e:	e7ac      	b.n	4a7a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    4b20:	4573      	cmp	r3, lr
    4b22:	bf38      	it	cc
    4b24:	4673      	movcc	r3, lr
    4b26:	e7f0      	b.n	4b0a <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    4b28:	4631      	mov	r1, r6
    4b2a:	4610      	mov	r0, r2
    4b2c:	9305      	str	r3, [sp, #20]
    4b2e:	9204      	str	r2, [sp, #16]
    4b30:	f7fe fc16 	bl	3360 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    4b34:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    4b38:	4288      	cmp	r0, r1
    4b3a:	9a04      	ldr	r2, [sp, #16]
    4b3c:	9b05      	ldr	r3, [sp, #20]
    4b3e:	d9ea      	bls.n	4b16 <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    4b40:	480c      	ldr	r0, [pc, #48]	; (4b74 <sched_after_mstr_free_slot_get+0x11c>)
    4b42:	4434      	add	r4, r6
    4b44:	fba4 0100 	umull	r0, r1, r4, r0
    4b48:	2307      	movs	r3, #7
    4b4a:	fb03 1104 	mla	r1, r3, r4, r1
    4b4e:	a306      	add	r3, pc, #24	; (adr r3, 4b68 <sched_after_mstr_free_slot_get+0x110>)
    4b50:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b54:	f7fb fb88 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    4b58:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    4b5a:	6038      	str	r0, [r7, #0]
}
    4b5c:	b00b      	add	sp, #44	; 0x2c
    4b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    4b62:	2dff      	cmp	r5, #255	; 0xff
    4b64:	d1ec      	bne.n	4b40 <sched_after_mstr_free_slot_get+0xe8>
    4b66:	e7f9      	b.n	4b5c <sched_after_mstr_free_slot_get+0x104>
    4b68:	3b9aca00 	.word	0x3b9aca00
    4b6c:	00000000 	.word	0x00000000
    4b70:	000040c9 	.word	0x000040c9
    4b74:	1afd498d 	.word	0x1afd498d
    4b78:	200002e0 	.word	0x200002e0

00004b7c <isr_adv_ci_adva_check>:
{
    4b7c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    4b7e:	7804      	ldrb	r4, [r0, #0]
    4b80:	780a      	ldrb	r2, [r1, #0]
    4b82:	f3c4 1380 	ubfx	r3, r4, #6, #1
    4b86:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    4b8a:	d119      	bne.n	4bc0 <isr_adv_ci_adva_check+0x44>
    4b8c:	f004 040f 	and.w	r4, r4, #15
    4b90:	2c01      	cmp	r4, #1
    4b92:	f101 0608 	add.w	r6, r1, #8
    4b96:	f100 0502 	add.w	r5, r0, #2
    4b9a:	d008      	beq.n	4bae <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    4b9c:	2206      	movs	r2, #6
    4b9e:	4631      	mov	r1, r6
    4ba0:	4628      	mov	r0, r5
    4ba2:	f7fb fd00 	bl	5a6 <memcmp>
			 BDADDR_SIZE)) ||
    4ba6:	fab0 f080 	clz	r0, r0
    4baa:	0940      	lsrs	r0, r0, #5
    4bac:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    4bae:	2206      	movs	r2, #6
    4bb0:	4631      	mov	r1, r6
    4bb2:	4628      	mov	r0, r5
    4bb4:	f7fb fcf7 	bl	5a6 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    4bb8:	2800      	cmp	r0, #0
    4bba:	d1ef      	bne.n	4b9c <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    4bbc:	4620      	mov	r0, r4
    4bbe:	bd70      	pop	{r4, r5, r6, pc}
    4bc0:	2000      	movs	r0, #0
}
    4bc2:	bd70      	pop	{r4, r5, r6, pc}

00004bc4 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    4bc4:	4a0b      	ldr	r2, [pc, #44]	; (4bf4 <rx_fc_lock+0x30>)
    4bc6:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    4bca:	f892 1d61 	ldrb.w	r1, [r2, #3425]	; 0xd61
    4bce:	4299      	cmp	r1, r3
    4bd0:	d10e      	bne.n	4bf0 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    4bd2:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    4bd6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    4bda:	f8a3 0d5a 	strh.w	r0, [r3, #3418]	; 0xd5a
		req = _radio.fc_req + 1;
    4bde:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    4be2:	3301      	adds	r3, #1
    4be4:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    4be6:	2b03      	cmp	r3, #3
    4be8:	bf08      	it	eq
    4bea:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    4bec:	f882 3d60 	strb.w	r3, [r2, #3424]	; 0xd60
    4bf0:	4770      	bx	lr
    4bf2:	bf00      	nop
    4bf4:	200002e0 	.word	0x200002e0

00004bf8 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    4bf8:	4b04      	ldr	r3, [pc, #16]	; (4c0c <ticker_job_disable+0x14>)
    4bfa:	7d1b      	ldrb	r3, [r3, #20]
    4bfc:	b123      	cbz	r3, 4c08 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4bfe:	2101      	movs	r1, #1
    4c00:	2200      	movs	r2, #0
    4c02:	4608      	mov	r0, r1
    4c04:	f7fd bc6a 	b.w	24dc <mayfly_enable>
    4c08:	4770      	bx	lr
    4c0a:	bf00      	nop
    4c0c:	200002e0 	.word	0x200002e0

00004c10 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4c10:	2806      	cmp	r0, #6
{
    4c12:	b510      	push	{r4, lr}
    4c14:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4c16:	d90a      	bls.n	4c2e <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4c18:	4b09      	ldr	r3, [pc, #36]	; (4c40 <hdr_conn_get+0x30>)
    4c1a:	1fc2      	subs	r2, r0, #7
    4c1c:	b292      	uxth	r2, r2
    4c1e:	f44f 7182 	mov.w	r1, #260	; 0x104
    4c22:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    4c26:	f7fd fbf7 	bl	2418 <mem_get>
    4c2a:	6020      	str	r0, [r4, #0]
    4c2c:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    4c2e:	2805      	cmp	r0, #5
    4c30:	d004      	beq.n	4c3c <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    4c32:	2806      	cmp	r0, #6
	return NULL;
    4c34:	4803      	ldr	r0, [pc, #12]	; (4c44 <hdr_conn_get+0x34>)
    4c36:	bf18      	it	ne
    4c38:	2000      	movne	r0, #0
    4c3a:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    4c3c:	4802      	ldr	r0, [pc, #8]	; (4c48 <hdr_conn_get+0x38>)
}
    4c3e:	bd10      	pop	{r4, pc}
    4c40:	200002e0 	.word	0x200002e0
    4c44:	20000efc 	.word	0x20000efc
    4c48:	200002f8 	.word	0x200002f8

00004c4c <mayfly_xtal_retain.part.16>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    4c4c:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    4c4e:	4b0a      	ldr	r3, [pc, #40]	; (4c78 <mayfly_xtal_retain.part.16+0x2c>)
    4c50:	2200      	movs	r2, #0
    4c52:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    4c54:	b168      	cbz	r0, 4c72 <mayfly_xtal_retain.part.16+0x26>
    4c56:	2801      	cmp	r0, #1
    4c58:	d105      	bne.n	4c66 <mayfly_xtal_retain.part.16+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    4c5a:	4b08      	ldr	r3, [pc, #32]	; (4c7c <mayfly_xtal_retain.part.16+0x30>)
			retval = mayfly_enqueue(caller_id,
    4c5c:	2200      	movs	r2, #0
    4c5e:	4611      	mov	r1, r2
    4c60:	f7fd fc64 	bl	252c <mayfly_enqueue>
			LL_ASSERT(!retval);
    4c64:	b138      	cbz	r0, 4c76 <mayfly_xtal_retain.part.16+0x2a>
    4c66:	4040      	eors	r0, r0
    4c68:	f380 8811 	msr	BASEPRI, r0
    4c6c:	f04f 0004 	mov.w	r0, #4
    4c70:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    4c72:	4b03      	ldr	r3, [pc, #12]	; (4c80 <mayfly_xtal_retain.part.16+0x34>)
    4c74:	e7f2      	b.n	4c5c <mayfly_xtal_retain.part.16+0x10>
    4c76:	bd08      	pop	{r3, pc}
    4c78:	200010ec 	.word	0x200010ec
    4c7c:	20005f90 	.word	0x20005f90
    4c80:	20005f80 	.word	0x20005f80

00004c84 <rx_packet_set>:
{
    4c84:	b538      	push	{r3, r4, r5, lr}
    4c86:	4605      	mov	r5, r0
    4c88:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    4c8a:	2100      	movs	r1, #0
    4c8c:	4608      	mov	r0, r1
    4c8e:	f004 fedd 	bl	9a4c <radio_phy_set>
	if (conn->enc_rx) {
    4c92:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    4c96:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    4c98:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    4c9c:	d50d      	bpl.n	4cba <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    4c9e:	211f      	movs	r1, #31
    4ca0:	2008      	movs	r0, #8
    4ca2:	f004 ff19 	bl	9ad8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    4ca6:	4622      	mov	r2, r4
    4ca8:	2100      	movs	r1, #0
    4caa:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    4cae:	f005 f94b 	bl	9f48 <radio_ccm_rx_pkt_set>
}
    4cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    4cb6:	f004 bf3d 	b.w	9b34 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    4cba:	2008      	movs	r0, #8
    4cbc:	211b      	movs	r1, #27
    4cbe:	f004 ff0b 	bl	9ad8 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    4cc2:	4620      	mov	r0, r4
    4cc4:	e7f5      	b.n	4cb2 <rx_packet_set+0x2e>

00004cc6 <tx_packet_set>:
{
    4cc6:	b538      	push	{r3, r4, r5, lr}
    4cc8:	4605      	mov	r5, r0
    4cca:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    4ccc:	2100      	movs	r1, #0
    4cce:	4608      	mov	r0, r1
    4cd0:	f004 febc 	bl	9a4c <radio_phy_set>
	if (conn->enc_tx) {
    4cd4:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    4cd8:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    4cda:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    4cde:	d50c      	bpl.n	4cfa <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    4ce0:	211f      	movs	r1, #31
    4ce2:	2008      	movs	r0, #8
    4ce4:	f004 fef8 	bl	9ad8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    4ce8:	4621      	mov	r1, r4
    4cea:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    4cee:	f005 f967 	bl	9fc0 <radio_ccm_tx_pkt_set>
}
    4cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    4cf6:	f004 bf23 	b.w	9b40 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    4cfa:	2008      	movs	r0, #8
    4cfc:	211b      	movs	r1, #27
    4cfe:	f004 feeb 	bl	9ad8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    4d02:	4620      	mov	r0, r4
    4d04:	e7f5      	b.n	4cf2 <tx_packet_set+0x2c>
	...

00004d08 <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    4d08:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4d0a:	4c16      	ldr	r4, [pc, #88]	; (4d64 <isr_scan_tgta_check.isra.30+0x5c>)
    4d0c:	7803      	ldrb	r3, [r0, #0]
    4d0e:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			BDADDR_SIZE) == 0))) ||
    4d12:	09db      	lsrs	r3, r3, #7
    4d14:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    4d18:	4605      	mov	r5, r0
    4d1a:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    4d1c:	d007      	beq.n	4d2e <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    4d1e:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
    4d22:	f3c0 1001 	ubfx	r0, r0, #4, #2
    4d26:	f010 0002 	ands.w	r0, r0, #2
    4d2a:	d10b      	bne.n	4d44 <isr_scan_tgta_check.isra.30+0x3c>
    4d2c:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    4d2e:	f100 0108 	add.w	r1, r0, #8
    4d32:	2206      	movs	r2, #6
    4d34:	f604 402e 	addw	r0, r4, #3118	; 0xc2e
    4d38:	f7fb fc35 	bl	5a6 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    4d3c:	2800      	cmp	r0, #0
    4d3e:	d1ee      	bne.n	4d1e <isr_scan_tgta_check.isra.30+0x16>
			BDADDR_SIZE) == 0))) ||
    4d40:	2001      	movs	r0, #1
    4d42:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    4d44:	f995 3000 	ldrsb.w	r3, [r5]
    4d48:	2b00      	cmp	r3, #0
    4d4a:	da09      	bge.n	4d60 <isr_scan_tgta_check.isra.30+0x58>
	    (pdu->rx_addr != 0) &&
    4d4c:	7b6b      	ldrb	r3, [r5, #13]
    4d4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4d52:	2b40      	cmp	r3, #64	; 0x40
    4d54:	d104      	bne.n	4d60 <isr_scan_tgta_check.isra.30+0x58>
		if (dir_report) {
    4d56:	2e00      	cmp	r6, #0
    4d58:	d0f2      	beq.n	4d40 <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    4d5a:	2001      	movs	r0, #1
    4d5c:	7030      	strb	r0, [r6, #0]
    4d5e:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    4d60:	2000      	movs	r0, #0
}
    4d62:	bd70      	pop	{r4, r5, r6, pc}
    4d64:	200002e0 	.word	0x200002e0

00004d68 <event_active.part.17>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    4d68:	4040      	eors	r0, r0
    4d6a:	f380 8811 	msr	BASEPRI, r0
    4d6e:	f04f 0004 	mov.w	r0, #4
    4d72:	df02      	svc	2

00004d74 <prepare_normal_set>:
{
    4d74:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    4d76:	6804      	ldr	r4, [r0, #0]
    4d78:	2c00      	cmp	r4, #0
{
    4d7a:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    4d7c:	da19      	bge.n	4db2 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    4d7e:	6843      	ldr	r3, [r0, #4]
    4d80:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    4d82:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    4d84:	429d      	cmp	r5, r3
    4d86:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    4d8a:	bf34      	ite	cc
    4d8c:	1ae4      	subcc	r4, r4, r3
    4d8e:	1b64      	subcs	r4, r4, r5
		ticker_status =
    4d90:	4b09      	ldr	r3, [pc, #36]	; (4db8 <prepare_normal_set+0x44>)
    4d92:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    4d94:	b2a4      	uxth	r4, r4
		ticker_status =
    4d96:	2300      	movs	r3, #0
    4d98:	9304      	str	r3, [sp, #16]
    4d9a:	9303      	str	r3, [sp, #12]
    4d9c:	9302      	str	r3, [sp, #8]
    4d9e:	4618      	mov	r0, r3
    4da0:	9401      	str	r4, [sp, #4]
    4da2:	9400      	str	r4, [sp, #0]
    4da4:	f7fe f9bc 	bl	3120 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    4da8:	f030 0302 	bics.w	r3, r0, #2
    4dac:	d001      	beq.n	4db2 <prepare_normal_set+0x3e>
    4dae:	f7ff ffdb 	bl	4d68 <event_active.part.17>
}
    4db2:	b009      	add	sp, #36	; 0x24
    4db4:	bd30      	pop	{r4, r5, pc}
    4db6:	bf00      	nop
    4db8:	000040d9 	.word	0x000040d9

00004dbc <terminate_ind_rx_enqueue>:
{
    4dbc:	b510      	push	{r4, lr}
    4dbe:	4603      	mov	r3, r0
    4dc0:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    4dc2:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    4dc6:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    4dca:	b908      	cbnz	r0, 4dd0 <terminate_ind_rx_enqueue+0x14>
    4dcc:	f7ff ffcc 	bl	4d68 <event_active.part.17>
	node_rx->hdr.handle = conn->handle;
    4dd0:	8c1c      	ldrh	r4, [r3, #32]
    4dd2:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    4dd6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    4dda:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4ddc:	4a0a      	ldr	r2, [pc, #40]	; (4e08 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    4dde:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4de2:	f892 4d58 	ldrb.w	r4, [r2, #3416]	; 0xd58
    4de6:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4dea:	f502 6253 	add.w	r2, r2, #3376	; 0xd30
    4dee:	f7fd fb2d 	bl	244c <memq_enqueue>
	LL_ASSERT(link);
    4df2:	b928      	cbnz	r0, 4e00 <terminate_ind_rx_enqueue+0x44>
    4df4:	4040      	eors	r0, r0
    4df6:	f380 8811 	msr	BASEPRI, r0
    4dfa:	f04f 0004 	mov.w	r0, #4
    4dfe:	df02      	svc	2
}
    4e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    4e04:	f003 be9c 	b.w	8b40 <radio_event_callback>
    4e08:	200002e0 	.word	0x200002e0

00004e0c <packet_rx_enqueue>:
{
    4e0c:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    4e0e:	4a16      	ldr	r2, [pc, #88]	; (4e68 <packet_rx_enqueue+0x5c>)
    4e10:	f892 3d21 	ldrb.w	r3, [r2, #3361]	; 0xd21
    4e14:	f892 1d22 	ldrb.w	r1, [r2, #3362]	; 0xd22
    4e18:	4299      	cmp	r1, r3
    4e1a:	d101      	bne.n	4e20 <packet_rx_enqueue+0x14>
    4e1c:	f7ff ffa4 	bl	4d68 <event_active.part.17>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    4e20:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
    4e24:	f8d2 3d1c 	ldr.w	r3, [r2, #3356]	; 0xd1c
    4e28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4e2c:	f892 3d58 	ldrb.w	r3, [r2, #3416]	; 0xd58
	link = node_rx->hdr.onion.link;
    4e30:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    4e32:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    4e34:	f892 3d21 	ldrb.w	r3, [r2, #3361]	; 0xd21
	if (last == _radio.packet_rx_count) {
    4e38:	f892 4d20 	ldrb.w	r4, [r2, #3360]	; 0xd20
	last = _radio.packet_rx_last + 1;
    4e3c:	3301      	adds	r3, #1
    4e3e:	b2db      	uxtb	r3, r3
		last = 0;
    4e40:	429c      	cmp	r4, r3
    4e42:	bf08      	it	eq
    4e44:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    4e46:	f882 3d21 	strb.w	r3, [r2, #3361]	; 0xd21
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    4e4a:	f502 6253 	add.w	r2, r2, #3376	; 0xd30
    4e4e:	f7fd fafd 	bl	244c <memq_enqueue>
	LL_ASSERT(link);
    4e52:	b928      	cbnz	r0, 4e60 <packet_rx_enqueue+0x54>
    4e54:	4040      	eors	r0, r0
    4e56:	f380 8811 	msr	BASEPRI, r0
    4e5a:	f04f 0004 	mov.w	r0, #4
    4e5e:	df02      	svc	2
}
    4e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    4e64:	f003 be6c 	b.w	8b40 <radio_event_callback>
    4e68:	200002e0 	.word	0x200002e0

00004e6c <mayfly_adv_stop>:
{
    4e6c:	b510      	push	{r4, lr}
	node_rx = packet_rx_reserve_get(1);
    4e6e:	2001      	movs	r0, #1
    4e70:	f7ff f954 	bl	411c <packet_rx_reserve_get>
	LL_ASSERT(node_rx);
    4e74:	4604      	mov	r4, r0
    4e76:	b908      	cbnz	r0, 4e7c <mayfly_adv_stop+0x10>
    4e78:	f7ff ff76 	bl	4d68 <event_active.part.17>
	node_rx->hdr.handle = 0xffff;
    4e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4e80:	80c3      	strh	r3, [r0, #6]
	node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    4e82:	2306      	movs	r3, #6
    4e84:	7103      	strb	r3, [r0, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    4e86:	2210      	movs	r2, #16
    4e88:	2100      	movs	r1, #0
    4e8a:	300b      	adds	r0, #11
    4e8c:	f7fb fbcc 	bl	628 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    4e90:	233c      	movs	r3, #60	; 0x3c
    4e92:	72e3      	strb	r3, [r4, #11]
}
    4e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_enqueue();
    4e98:	f7ff bfb8 	b.w	4e0c <packet_rx_enqueue>

00004e9c <ticker_stop_adv_stop>:
{
    4e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4e9e:	4c3e      	ldr	r4, [pc, #248]	; (4f98 <ticker_stop_adv_stop+0xfc>)
	if (status != TICKER_STATUS_SUCCESS) {
    4ea0:	b120      	cbz	r0, 4eac <ticker_stop_adv_stop+0x10>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
    4ea2:	7ca3      	ldrb	r3, [r4, #18]
    4ea4:	2b05      	cmp	r3, #5
    4ea6:	d075      	beq.n	4f94 <ticker_stop_adv_stop+0xf8>
    4ea8:	f7ff ff5e 	bl	4d68 <event_active.part.17>
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    4eac:	7c23      	ldrb	r3, [r4, #16]
    4eae:	2b05      	cmp	r3, #5
    4eb0:	d002      	beq.n	4eb8 <ticker_stop_adv_stop+0x1c>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
    4eb2:	7c63      	ldrb	r3, [r4, #17]
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
    4eb4:	2b05      	cmp	r3, #5
    4eb6:	d165      	bne.n	4f84 <ticker_stop_adv_stop+0xe8>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4eb8:	ab04      	add	r3, sp, #16
    4eba:	2202      	movs	r2, #2
    4ebc:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4ec0:	2200      	movs	r2, #0
    4ec2:	9300      	str	r3, [sp, #0]
    4ec4:	2101      	movs	r1, #1
    4ec6:	4b35      	ldr	r3, [pc, #212]	; (4f9c <ticker_stop_adv_stop+0x100>)
    4ec8:	4610      	mov	r0, r2
    4eca:	f7fe f977 	bl	31bc <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4ece:	2802      	cmp	r0, #2
    4ed0:	d00d      	beq.n	4eee <ticker_stop_adv_stop+0x52>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4ed2:	9802      	ldr	r0, [sp, #8]
    4ed4:	b1c0      	cbz	r0, 4f08 <ticker_stop_adv_stop+0x6c>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4ed6:	9802      	ldr	r0, [sp, #8]
    4ed8:	2801      	cmp	r0, #1
    4eda:	d119      	bne.n	4f10 <ticker_stop_adv_stop+0x74>
		if (_radio.role != ROLE_NONE) {
    4edc:	7ce3      	ldrb	r3, [r4, #19]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d050      	beq.n	4f84 <ticker_stop_adv_stop+0xe8>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4ee2:	4b2f      	ldr	r3, [pc, #188]	; (4fa0 <ticker_stop_adv_stop+0x104>)
    4ee4:	2204      	movs	r2, #4
    4ee6:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4ee8:	2200      	movs	r2, #0
    4eea:	4611      	mov	r1, r2
    4eec:	e046      	b.n	4f7c <ticker_stop_adv_stop+0xe0>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4eee:	2201      	movs	r2, #1
    4ef0:	4611      	mov	r1, r2
    4ef2:	4610      	mov	r0, r2
    4ef4:	f7fd faf2 	bl	24dc <mayfly_enable>
		while (ret_cb_evt == TICKER_STATUS_BUSY) {
    4ef8:	9b02      	ldr	r3, [sp, #8]
    4efa:	2b02      	cmp	r3, #2
    4efc:	d1e9      	bne.n	4ed2 <ticker_stop_adv_stop+0x36>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4efe:	2101      	movs	r1, #1
    4f00:	2000      	movs	r0, #0
    4f02:	f7fe fa15 	bl	3330 <ticker_job_sched>
    4f06:	e7f7      	b.n	4ef8 <ticker_stop_adv_stop+0x5c>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4f08:	2302      	movs	r3, #2
    4f0a:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
    4f0c:	7c23      	ldrb	r3, [r4, #16]
    4f0e:	b92b      	cbnz	r3, 4f1c <ticker_stop_adv_stop+0x80>
	LL_ASSERT(!retval);
    4f10:	4040      	eors	r0, r0
    4f12:	f380 8811 	msr	BASEPRI, r0
    4f16:	f04f 0004 	mov.w	r0, #4
    4f1a:	df02      	svc	2
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4f1c:	ab03      	add	r3, sp, #12
    4f1e:	2201      	movs	r2, #1
		_radio.ticker_id_prepare = 0;
    4f20:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4f22:	4611      	mov	r1, r2
    4f24:	9300      	str	r3, [sp, #0]
    4f26:	4b1d      	ldr	r3, [pc, #116]	; (4f9c <ticker_stop_adv_stop+0x100>)
    4f28:	f7fe f948 	bl	31bc <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4f2c:	2802      	cmp	r0, #2
    4f2e:	d00f      	beq.n	4f50 <ticker_stop_adv_stop+0xb4>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4f30:	9a03      	ldr	r2, [sp, #12]
    4f32:	b1d2      	cbz	r2, 4f6a <ticker_stop_adv_stop+0xce>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    4f34:	9c03      	ldr	r4, [sp, #12]
    4f36:	2c01      	cmp	r4, #1
    4f38:	d1ea      	bne.n	4f10 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4f3a:	2200      	movs	r2, #0
    4f3c:	4611      	mov	r1, r2
    4f3e:	4b19      	ldr	r3, [pc, #100]	; (4fa4 <ticker_stop_adv_stop+0x108>)
    4f40:	4620      	mov	r0, r4
    4f42:	f7fd faf3 	bl	252c <mayfly_enqueue>
			LL_ASSERT(!ret);
    4f46:	4602      	mov	r2, r0
    4f48:	2800      	cmp	r0, #0
    4f4a:	d1e1      	bne.n	4f10 <ticker_stop_adv_stop+0x74>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4f4c:	4b16      	ldr	r3, [pc, #88]	; (4fa8 <ticker_stop_adv_stop+0x10c>)
    4f4e:	e013      	b.n	4f78 <ticker_stop_adv_stop+0xdc>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4f50:	2201      	movs	r2, #1
    4f52:	4611      	mov	r1, r2
    4f54:	4610      	mov	r0, r2
    4f56:	f7fd fac1 	bl	24dc <mayfly_enable>
			while (ret_cb_m0 == TICKER_STATUS_BUSY) {
    4f5a:	9b03      	ldr	r3, [sp, #12]
    4f5c:	2b02      	cmp	r3, #2
    4f5e:	d1e7      	bne.n	4f30 <ticker_stop_adv_stop+0x94>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    4f60:	2101      	movs	r1, #1
    4f62:	2000      	movs	r0, #0
    4f64:	f7fe f9e4 	bl	3330 <ticker_job_sched>
    4f68:	e7f7      	b.n	4f5a <ticker_stop_adv_stop+0xbe>
			u32_t ticks_xtal_to_start =
    4f6a:	69a3      	ldr	r3, [r4, #24]
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4f6c:	69e1      	ldr	r1, [r4, #28]
			ticks_xtal_to_start &= ~XON_BITMASK;
    4f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
    4f72:	428b      	cmp	r3, r1
    4f74:	d2ea      	bcs.n	4f4c <ticker_stop_adv_stop+0xb0>
				ret = mayfly_enqueue(
    4f76:	4b0b      	ldr	r3, [pc, #44]	; (4fa4 <ticker_stop_adv_stop+0x108>)
    4f78:	4611      	mov	r1, r2
    4f7a:	2001      	movs	r0, #1
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4f7c:	f7fd fad6 	bl	252c <mayfly_enqueue>
			LL_ASSERT(!ret);
    4f80:	2800      	cmp	r0, #0
    4f82:	d1c5      	bne.n	4f10 <ticker_stop_adv_stop+0x74>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4f84:	2200      	movs	r2, #0
    4f86:	4b09      	ldr	r3, [pc, #36]	; (4fac <ticker_stop_adv_stop+0x110>)
    4f88:	4611      	mov	r1, r2
    4f8a:	2001      	movs	r0, #1
    4f8c:	f7fd face 	bl	252c <mayfly_enqueue>
	LL_ASSERT(!retval);
    4f90:	2800      	cmp	r0, #0
    4f92:	d1bd      	bne.n	4f10 <ticker_stop_adv_stop+0x74>
}
    4f94:	b004      	add	sp, #16
    4f96:	bd10      	pop	{r4, pc}
    4f98:	200002e0 	.word	0x200002e0
    4f9c:	000040c9 	.word	0x000040c9
    4fa0:	20005f30 	.word	0x20005f30
    4fa4:	20005f00 	.word	0x20005f00
    4fa8:	20005fa0 	.word	0x20005fa0
    4fac:	20005ed0 	.word	0x20005ed0

00004fb0 <sched_after_mstr_free_offset_get>:
{
    4fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4fb2:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    4fb4:	aa02      	add	r2, sp, #8
{
    4fb6:	461c      	mov	r4, r3
    4fb8:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    4fba:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    4fbe:	3127      	adds	r1, #39	; 0x27
    4fc0:	2001      	movs	r0, #1
    4fc2:	f7ff fd49 	bl	4a58 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    4fc6:	6823      	ldr	r3, [r4, #0]
    4fc8:	b1fb      	cbz	r3, 500a <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    4fca:	9801      	ldr	r0, [sp, #4]
    4fcc:	1b83      	subs	r3, r0, r6
    4fce:	021b      	lsls	r3, r3, #8
    4fd0:	d501      	bpl.n	4fd6 <sched_after_mstr_free_offset_get+0x26>
    4fd2:	f7ff fec9 	bl	4d68 <event_active.part.17>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    4fd6:	4631      	mov	r1, r6
    4fd8:	f7fe f9c2 	bl	3360 <ticker_ticks_diff_get>
    4fdc:	4602      	mov	r2, r0
    4fde:	4810      	ldr	r0, [pc, #64]	; (5020 <sched_after_mstr_free_offset_get+0x70>)
    4fe0:	2307      	movs	r3, #7
    4fe2:	fba2 0100 	umull	r0, r1, r2, r0
    4fe6:	fb03 1102 	mla	r1, r3, r2, r1
    4fea:	a30b      	add	r3, pc, #44	; (adr r3, 5018 <sched_after_mstr_free_offset_get+0x68>)
    4fec:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ff0:	f7fb f93a 	bl	268 <__aeabi_uldivmod>
    4ff4:	6823      	ldr	r3, [r4, #0]
    4ff6:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    4ff8:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    4ffa:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    4ffc:	db05      	blt.n	500a <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    4ffe:	f240 40e2 	movw	r0, #1250	; 0x4e2
    5002:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    5004:	6823      	ldr	r3, [r4, #0]
    5006:	4298      	cmp	r0, r3
    5008:	d301      	bcc.n	500e <sched_after_mstr_free_offset_get+0x5e>
}
    500a:	b002      	add	sp, #8
    500c:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    500e:	1a1b      	subs	r3, r3, r0
    5010:	6023      	str	r3, [r4, #0]
    5012:	e7f7      	b.n	5004 <sched_after_mstr_free_offset_get+0x54>
    5014:	f3af 8000 	nop.w
    5018:	3b9aca00 	.word	0x3b9aca00
    501c:	00000000 	.word	0x00000000
    5020:	1afd498d 	.word	0x1afd498d

00005024 <mayfly_sched_win_offset_use>:
{
    5024:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    5026:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    502a:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    502c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    502e:	68c1      	ldr	r1, [r0, #12]
    5030:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    5032:	f7ff ffbd 	bl	4fb0 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5036:	a902      	add	r1, sp, #8
    5038:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    503a:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    503c:	f240 42e2 	movw	r2, #1250	; 0x4e2
    5040:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    5044:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5046:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    504a:	f7fb fac1 	bl	5d0 <memcpy>
}
    504e:	b002      	add	sp, #8
    5050:	bd10      	pop	{r4, pc}
	...

00005054 <pdu_node_tx_release>:
{
    5054:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    5056:	4a10      	ldr	r2, [pc, #64]	; (5098 <pdu_node_tx_release+0x44>)
    5058:	f892 3d58 	ldrb.w	r3, [r2, #3416]	; 0xd58
	if (last == _radio.packet_tx_count) {
    505c:	f892 4d54 	ldrb.w	r4, [r2, #3412]	; 0xd54
	last = _radio.packet_release_last + 1;
    5060:	3301      	adds	r3, #1
    5062:	b2db      	uxtb	r3, r3
		last = 0;
    5064:	429c      	cmp	r4, r3
    5066:	bf08      	it	eq
    5068:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    506a:	f892 4d57 	ldrb.w	r4, [r2, #3415]	; 0xd57
    506e:	429c      	cmp	r4, r3
    5070:	d101      	bne.n	5076 <pdu_node_tx_release+0x22>
    5072:	f7ff fe79 	bl	4d68 <event_active.part.17>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    5076:	f892 5d58 	ldrb.w	r5, [r2, #3416]	; 0xd58
    507a:	f8d2 4d50 	ldr.w	r4, [r2, #3408]	; 0xd50
    507e:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    5082:	f892 0d58 	ldrb.w	r0, [r2, #3416]	; 0xd58
    5086:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    508a:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    508c:	f882 3d58 	strb.w	r3, [r2, #3416]	; 0xd58
}
    5090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    5094:	f003 bd54 	b.w	8b40 <radio_event_callback>
    5098:	200002e0 	.word	0x200002e0

0000509c <packet_tx_enqueue>:
{
    509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    50a0:	4c24      	ldr	r4, [pc, #144]	; (5134 <packet_tx_enqueue+0x98>)
{
    50a2:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    50a4:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    50a6:	b12e      	cbz	r6, 50b4 <packet_tx_enqueue+0x18>
    50a8:	f894 3d55 	ldrb.w	r3, [r4, #3413]	; 0xd55
    50ac:	f894 2d56 	ldrb.w	r2, [r4, #3414]	; 0xd56
    50b0:	429a      	cmp	r2, r3
    50b2:	d101      	bne.n	50b8 <packet_tx_enqueue+0x1c>
    50b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    50b8:	f894 8d55 	ldrb.w	r8, [r4, #3413]	; 0xd55
    50bc:	f8d4 9d4c 	ldr.w	r9, [r4, #3404]	; 0xd4c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    50c0:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    50c4:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    50c8:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    50cc:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    50d0:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    50d2:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    50d4:	f7fd f9a0 	bl	2418 <mem_get>
    50d8:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    50da:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    50de:	8c1a      	ldrh	r2, [r3, #32]
    50e0:	4282      	cmp	r2, r0
    50e2:	d11f      	bne.n	5124 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    50e4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    50e8:	b942      	cbnz	r2, 50fc <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    50ea:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    50ee:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    50f2:	b91a      	cbnz	r2, 50fc <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    50f4:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    50f8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    50fc:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    5100:	b102      	cbz	r2, 5104 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    5102:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    5104:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    5108:	f894 3d55 	ldrb.w	r3, [r4, #3413]	; 0xd55
		if (first == _radio.packet_tx_count) {
    510c:	f894 2d54 	ldrb.w	r2, [r4, #3412]	; 0xd54
		first = _radio.packet_tx_first + 1;
    5110:	3301      	adds	r3, #1
    5112:	b2db      	uxtb	r3, r3
			first = 0;
    5114:	429a      	cmp	r2, r3
    5116:	bf08      	it	eq
    5118:	2300      	moveq	r3, #0
    511a:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    511c:	f884 3d55 	strb.w	r3, [r4, #3413]	; 0xd55
    5120:	b2f6      	uxtb	r6, r6
    5122:	e7c0      	b.n	50a6 <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5124:	792b      	ldrb	r3, [r5, #4]
    5126:	f367 0301 	bfi	r3, r7, #0, #2
    512a:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    512c:	4629      	mov	r1, r5
    512e:	f7ff ff91 	bl	5054 <pdu_node_tx_release>
    5132:	e7e9      	b.n	5108 <packet_tx_enqueue+0x6c>
    5134:	200002e0 	.word	0x200002e0

00005138 <connection_release>:
{
    5138:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    513a:	2201      	movs	r2, #1
{
    513c:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    513e:	4611      	mov	r1, r2
    5140:	2000      	movs	r0, #0
    5142:	f7fd f9cb 	bl	24dc <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5146:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    514a:	2100      	movs	r1, #0
    514c:	f242 73e2 	movw	r3, #10210	; 0x27e2
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5150:	3207      	adds	r2, #7
	ticker_status =
    5152:	9300      	str	r3, [sp, #0]
    5154:	4608      	mov	r0, r1
    5156:	4b3a      	ldr	r3, [pc, #232]	; (5240 <connection_release+0x108>)
    5158:	b2d2      	uxtb	r2, r2
    515a:	f7fe f82f 	bl	31bc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    515e:	f030 0102 	bics.w	r1, r0, #2
    5162:	d005      	beq.n	5170 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5164:	4040      	eors	r0, r0
    5166:	f380 8811 	msr	BASEPRI, r0
    516a:	f04f 0004 	mov.w	r0, #4
    516e:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    5170:	4b34      	ldr	r3, [pc, #208]	; (5244 <connection_release+0x10c>)
    5172:	7d1a      	ldrb	r2, [r3, #20]
    5174:	2a05      	cmp	r2, #5
    5176:	461d      	mov	r5, r3
    5178:	d11b      	bne.n	51b2 <connection_release+0x7a>
					  conn->handle))) {
    517a:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    517c:	7c18      	ldrb	r0, [r3, #16]
    517e:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    5180:	4290      	cmp	r0, r2
    5182:	d116      	bne.n	51b2 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    5184:	7419      	strb	r1, [r3, #16]
		ticker_status =
    5186:	f242 73f3 	movw	r3, #10227	; 0x27f3
    518a:	9300      	str	r3, [sp, #0]
    518c:	2201      	movs	r2, #1
    518e:	4b2c      	ldr	r3, [pc, #176]	; (5240 <connection_release+0x108>)
    5190:	4608      	mov	r0, r1
    5192:	f7fe f813 	bl	31bc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5196:	f030 0202 	bics.w	r2, r0, #2
    519a:	d1e3      	bne.n	5164 <connection_release+0x2c>
		ticker_status =
    519c:	f242 73fa 	movw	r3, #10234	; 0x27fa
    51a0:	9300      	str	r3, [sp, #0]
    51a2:	4611      	mov	r1, r2
    51a4:	4b26      	ldr	r3, [pc, #152]	; (5240 <connection_release+0x108>)
    51a6:	4610      	mov	r0, r2
    51a8:	f7fe f808 	bl	31bc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    51ac:	f030 0302 	bics.w	r3, r0, #2
    51b0:	d1d8      	bne.n	5164 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    51b2:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    51b6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    51ba:	4299      	cmp	r1, r3
    51bc:	d003      	beq.n	51c6 <connection_release+0x8e>
    51be:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    51c2:	4299      	cmp	r1, r3
    51c4:	d101      	bne.n	51ca <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    51c6:	4e20      	ldr	r6, [pc, #128]	; (5248 <connection_release+0x110>)
    51c8:	e012      	b.n	51f0 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    51ca:	790b      	ldrb	r3, [r1, #4]
    51cc:	f36f 0301 	bfc	r3, #0, #2
    51d0:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    51d2:	680b      	ldr	r3, [r1, #0]
    51d4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    51d8:	8c20      	ldrh	r0, [r4, #32]
    51da:	f7ff ff3b 	bl	5054 <pdu_node_tx_release>
    51de:	e7e8      	b.n	51b2 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    51e0:	6803      	ldr	r3, [r0, #0]
    51e2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    51e6:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    51ea:	4631      	mov	r1, r6
    51ec:	f7fd f8ff 	bl	23ee <mem_release>
	while ((conn->pkt_tx_head) &&
    51f0:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    51f4:	b118      	cbz	r0, 51fe <connection_release+0xc6>
    51f6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    51fa:	4298      	cmp	r0, r3
    51fc:	d1f0      	bne.n	51e0 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    51fe:	2300      	movs	r3, #0
    5200:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    5204:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    5208:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    520c:	b951      	cbnz	r1, 5224 <connection_release+0xec>
	conn->handle = 0xffff;
    520e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5212:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    5214:	f8d5 3d68 	ldr.w	r3, [r5, #3432]	; 0xd68
    5218:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    521a:	bf08      	it	eq
    521c:	f8c5 1d68 	streq.w	r1, [r5, #3432]	; 0xd68
}
    5220:	b002      	add	sp, #8
    5222:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5224:	790b      	ldrb	r3, [r1, #4]
    5226:	f36f 0301 	bfc	r3, #0, #2
    522a:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    522c:	680b      	ldr	r3, [r1, #0]
    522e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    5232:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    5236:	8c20      	ldrh	r0, [r4, #32]
    5238:	f7ff ff0c 	bl	5054 <pdu_node_tx_release>
    523c:	e7e4      	b.n	5208 <connection_release+0xd0>
    523e:	bf00      	nop
    5240:	00005381 	.word	0x00005381
    5244:	200002e0 	.word	0x200002e0
    5248:	2000101c 	.word	0x2000101c

0000524c <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    524c:	b2c0      	uxtb	r0, r0
{
    524e:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    5250:	1f03      	subs	r3, r0, #4
    5252:	2b01      	cmp	r3, #1
    5254:	d901      	bls.n	525a <mayfly_radio_stop+0xe>
    5256:	f7ff fd87 	bl	4d68 <event_active.part.17>
	radio_used = ((_radio.state != STATE_NONE) &&
    525a:	4a08      	ldr	r2, [pc, #32]	; (527c <mayfly_radio_stop+0x30>)
    525c:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    525e:	b13b      	cbz	r3, 5270 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    5260:	3b04      	subs	r3, #4
    5262:	2b01      	cmp	r3, #1
    5264:	d904      	bls.n	5270 <mayfly_radio_stop+0x24>
			_radio.state = state;
    5266:	7510      	strb	r0, [r2, #20]
}
    5268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    526c:	f004 bc88 	b.w	9b80 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    5270:	f004 fcb8 	bl	9be4 <radio_is_idle>
    5274:	2800      	cmp	r0, #0
    5276:	d0f7      	beq.n	5268 <mayfly_radio_stop+0x1c>
}
    5278:	bd08      	pop	{r3, pc}
    527a:	bf00      	nop
    527c:	200002e0 	.word	0x200002e0

00005280 <mayfly_radio_active>:
{
    5280:	b508      	push	{r3, lr}
    5282:	4a0a      	ldr	r2, [pc, #40]	; (52ac <mayfly_radio_active+0x2c>)
		if (s_active++) {
    5284:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    5286:	b138      	cbz	r0, 5298 <mayfly_radio_active+0x18>
		if (s_active++) {
    5288:	1c59      	adds	r1, r3, #1
    528a:	7011      	strb	r1, [r2, #0]
    528c:	b963      	cbnz	r3, 52a8 <mayfly_radio_active+0x28>
		radio_active_callback(1);
    528e:	2001      	movs	r0, #1
}
    5290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    5294:	f003 bc52 	b.w	8b3c <radio_active_callback>
		LL_ASSERT(s_active);
    5298:	b90b      	cbnz	r3, 529e <mayfly_radio_active+0x1e>
    529a:	f7ff fd65 	bl	4d68 <event_active.part.17>
		if (--s_active) {
    529e:	3b01      	subs	r3, #1
    52a0:	b2db      	uxtb	r3, r3
    52a2:	7013      	strb	r3, [r2, #0]
    52a4:	2b00      	cmp	r3, #0
    52a6:	d0f3      	beq.n	5290 <mayfly_radio_active+0x10>
    52a8:	bd08      	pop	{r3, pc}
    52aa:	bf00      	nop
    52ac:	2000109a 	.word	0x2000109a

000052b0 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    52b0:	2000      	movs	r0, #0
    52b2:	f7ff bfe5 	b.w	5280 <mayfly_radio_active>
	...

000052b8 <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    52b8:	2200      	movs	r2, #0
{
    52ba:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    52bc:	4611      	mov	r1, r2
    52be:	4b04      	ldr	r3, [pc, #16]	; (52d0 <event_xtal+0x18>)
    52c0:	4610      	mov	r0, r2
    52c2:	f7fd f933 	bl	252c <mayfly_enqueue>
	LL_ASSERT(!retval);
    52c6:	b108      	cbz	r0, 52cc <event_xtal+0x14>
    52c8:	f7ff fd4e 	bl	4d68 <event_active.part.17>
    52cc:	bd08      	pop	{r3, pc}
    52ce:	bf00      	nop
    52d0:	20005f60 	.word	0x20005f60

000052d4 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    52d4:	2200      	movs	r2, #0
{
    52d6:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    52d8:	4611      	mov	r1, r2
    52da:	4b04      	ldr	r3, [pc, #16]	; (52ec <event_active+0x18>)
    52dc:	4610      	mov	r0, r2
    52de:	f7fd f925 	bl	252c <mayfly_enqueue>
	LL_ASSERT(!retval);
    52e2:	b108      	cbz	r0, 52e8 <event_active+0x14>
    52e4:	f7ff fd40 	bl	4d68 <event_active.part.17>
    52e8:	bd08      	pop	{r3, pc}
    52ea:	bf00      	nop
    52ec:	20005ee0 	.word	0x20005ee0

000052f0 <ticker_update_slave_assert>:
{
    52f0:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    52f2:	b130      	cbz	r0, 5302 <ticker_update_slave_assert+0x12>
    52f4:	4b03      	ldr	r3, [pc, #12]	; (5304 <ticker_update_slave_assert+0x14>)
    52f6:	7c9b      	ldrb	r3, [r3, #18]
    52f8:	b2c9      	uxtb	r1, r1
    52fa:	4299      	cmp	r1, r3
    52fc:	d001      	beq.n	5302 <ticker_update_slave_assert+0x12>
    52fe:	f7ff fd33 	bl	4d68 <event_active.part.17>
    5302:	bd08      	pop	{r3, pc}
    5304:	200002e0 	.word	0x200002e0

00005308 <ticker_update_adv_assert>:
{
    5308:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    530a:	b128      	cbz	r0, 5318 <ticker_update_adv_assert+0x10>
    530c:	4b03      	ldr	r3, [pc, #12]	; (531c <ticker_update_adv_assert+0x14>)
    530e:	7c9b      	ldrb	r3, [r3, #18]
    5310:	2b05      	cmp	r3, #5
    5312:	d001      	beq.n	5318 <ticker_update_adv_assert+0x10>
    5314:	f7ff fd28 	bl	4d68 <event_active.part.17>
    5318:	bd08      	pop	{r3, pc}
    531a:	bf00      	nop
    531c:	200002e0 	.word	0x200002e0

00005320 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5320:	2801      	cmp	r0, #1
{
    5322:	b508      	push	{r3, lr}
    5324:	4b09      	ldr	r3, [pc, #36]	; (534c <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    5326:	d107      	bne.n	5338 <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    5328:	7c9a      	ldrb	r2, [r3, #18]
    532a:	2a06      	cmp	r2, #6
    532c:	d102      	bne.n	5334 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    532e:	2200      	movs	r2, #0
    5330:	749a      	strb	r2, [r3, #18]
    5332:	bd08      	pop	{r3, pc}
    5334:	f7ff fd18 	bl	4d68 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    5338:	7c1b      	ldrb	r3, [r3, #16]
    533a:	2b06      	cmp	r3, #6
    533c:	d105      	bne.n	534a <ticker_stop_scan_assert+0x2a>
    533e:	4040      	eors	r0, r0
    5340:	f380 8811 	msr	BASEPRI, r0
    5344:	f04f 0004 	mov.w	r0, #4
    5348:	df02      	svc	2
    534a:	bd08      	pop	{r3, pc}
    534c:	200002e0 	.word	0x200002e0

00005350 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5350:	2801      	cmp	r0, #1
{
    5352:	b508      	push	{r3, lr}
    5354:	4b09      	ldr	r3, [pc, #36]	; (537c <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    5356:	d107      	bne.n	5368 <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    5358:	7c9a      	ldrb	r2, [r3, #18]
    535a:	2a05      	cmp	r2, #5
    535c:	d102      	bne.n	5364 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    535e:	2200      	movs	r2, #0
    5360:	749a      	strb	r2, [r3, #18]
    5362:	bd08      	pop	{r3, pc}
    5364:	f7ff fd00 	bl	4d68 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    5368:	7c1b      	ldrb	r3, [r3, #16]
    536a:	2b05      	cmp	r3, #5
    536c:	d105      	bne.n	537a <ticker_stop_adv_assert+0x2a>
    536e:	4040      	eors	r0, r0
    5370:	f380 8811 	msr	BASEPRI, r0
    5374:	f04f 0004 	mov.w	r0, #4
    5378:	df02      	svc	2
    537a:	bd08      	pop	{r3, pc}
    537c:	200002e0 	.word	0x200002e0

00005380 <ticker_success_assert>:
{
    5380:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5382:	b108      	cbz	r0, 5388 <ticker_success_assert+0x8>
    5384:	f7ff fcf0 	bl	4d68 <event_active.part.17>
    5388:	bd08      	pop	{r3, pc}

0000538a <isr.part.46>:
		LL_ASSERT(0);
    538a:	4040      	eors	r0, r0
    538c:	f380 8811 	msr	BASEPRI, r0
    5390:	f04f 0004 	mov.w	r0, #4
    5394:	df02      	svc	2
	...

00005398 <isr_rx_scan_report.isra.38>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    5398:	b570      	push	{r4, r5, r6, lr}
    539a:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    539c:	2003      	movs	r0, #3
    539e:	f7fe febd 	bl	411c <packet_rx_reserve_get>
	if (node_rx == 0) {
    53a2:	b320      	cbz	r0, 53ee <isr_rx_scan_report.isra.38+0x56>
	node_rx->hdr.handle = 0xffff;
    53a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    53a8:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    53aa:	4b12      	ldr	r3, [pc, #72]	; (53f4 <isr_rx_scan_report.isra.38+0x5c>)
    53ac:	f893 3c2d 	ldrb.w	r3, [r3, #3117]	; 0xc2d
    53b0:	075a      	lsls	r2, r3, #29
    53b2:	d018      	beq.n	53e6 <isr_rx_scan_report.isra.38+0x4e>
		switch (_radio.scanner.phy) {
    53b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
    53b8:	b2da      	uxtb	r2, r3
    53ba:	2a01      	cmp	r2, #1
    53bc:	d003      	beq.n	53c6 <isr_rx_scan_report.isra.38+0x2e>
    53be:	2a04      	cmp	r2, #4
    53c0:	d002      	beq.n	53c8 <isr_rx_scan_report.isra.38+0x30>
    53c2:	f7ff ffe2 	bl	538a <isr.part.46>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    53c6:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    53c8:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    53ca:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    53cc:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    53d0:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    53d2:	b156      	cbz	r6, 53ea <isr_rx_scan_report.isra.38+0x52>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    53d4:	f004 fc5c 	bl	9c90 <radio_rssi_get>
			     pdu_adv_rx->len] =
    53d8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    53dc:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    53de:	f7ff fd15 	bl	4e0c <packet_rx_enqueue>
	return 0;
    53e2:	2000      	movs	r0, #0
    53e4:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    53e6:	2302      	movs	r3, #2
    53e8:	e7ee      	b.n	53c8 <isr_rx_scan_report.isra.38+0x30>
			     pdu_adv_rx->len] =
    53ea:	207f      	movs	r0, #127	; 0x7f
    53ec:	e7f6      	b.n	53dc <isr_rx_scan_report.isra.38+0x44>
		return 1;
    53ee:	2001      	movs	r0, #1
}
    53f0:	bd70      	pop	{r4, r5, r6, pc}
    53f2:	bf00      	nop
    53f4:	200002e0 	.word	0x200002e0

000053f8 <adv_scan_configure.constprop.49>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    53f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    53fa:	ad02      	add	r5, sp, #8
    53fc:	4b10      	ldr	r3, [pc, #64]	; (5440 <adv_scan_configure.constprop.49+0x48>)
    53fe:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    5402:	4604      	mov	r4, r0
	radio_reset();
    5404:	f004 fb08 	bl	9a18 <radio_reset>
	radio_tx_power_set(0);
    5408:	2000      	movs	r0, #0
    540a:	f004 fb2f 	bl	9a6c <radio_tx_power_set>
	radio_isr_set(isr);
    540e:	480d      	ldr	r0, [pc, #52]	; (5444 <adv_scan_configure.constprop.49+0x4c>)
    5410:	f004 facc 	bl	99ac <radio_isr_set>
	radio_phy_set(phy, flags);
    5414:	2101      	movs	r1, #1
    5416:	4620      	mov	r0, r4
    5418:	f004 fb18 	bl	9a4c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    541c:	4628      	mov	r0, r5
    541e:	f004 fb43 	bl	9aa8 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    5422:	0062      	lsls	r2, r4, #1
    5424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    5428:	21ff      	movs	r1, #255	; 0xff
    542a:	2008      	movs	r0, #8
    542c:	f004 fb54 	bl	9ad8 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5430:	4905      	ldr	r1, [pc, #20]	; (5448 <adv_scan_configure.constprop.49+0x50>)
    5432:	f240 605b 	movw	r0, #1627	; 0x65b
    5436:	f004 fbdf 	bl	9bf8 <radio_crc_configure>
}
    543a:	b003      	add	sp, #12
    543c:	bd30      	pop	{r4, r5, pc}
    543e:	bf00      	nop
    5440:	8e89bed6 	.word	0x8e89bed6
    5444:	00006431 	.word	0x00006431
    5448:	00555555 	.word	0x00555555

0000544c <event_stop.constprop.50>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    544c:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    544e:	4b05      	ldr	r3, [pc, #20]	; (5464 <event_stop.constprop.50+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5450:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    5452:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5454:	4611      	mov	r1, r2
    5456:	4610      	mov	r0, r2
    5458:	f7fd f868 	bl	252c <mayfly_enqueue>
	LL_ASSERT(!retval);
    545c:	b108      	cbz	r0, 5462 <event_stop.constprop.50+0x16>
    545e:	f7ff fc83 	bl	4d68 <event_active.part.17>
    5462:	bd08      	pop	{r3, pc}
    5464:	20005f20 	.word	0x20005f20

00005468 <event_common_prepare>:
{
    5468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    546c:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    546e:	681d      	ldr	r5, [r3, #0]
{
    5470:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5472:	2c00      	cmp	r4, #0
{
    5474:	4681      	mov	r9, r0
    5476:	910b      	str	r1, [sp, #44]	; 0x2c
    5478:	4690      	mov	r8, r2
    547a:	469b      	mov	fp, r3
    547c:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5480:	da03      	bge.n	548a <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    5482:	9c16      	ldr	r4, [sp, #88]	; 0x58
    5484:	42ac      	cmp	r4, r5
    5486:	bf38      	it	cc
    5488:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    548a:	42ac      	cmp	r4, r5
    548c:	4f4e      	ldr	r7, [pc, #312]	; (55c8 <event_common_prepare+0x160>)
    548e:	d91b      	bls.n	54c8 <event_common_prepare+0x60>
		ticker_status =
    5490:	f241 7348 	movw	r3, #5960	; 0x1748
    5494:	9308      	str	r3, [sp, #32]
    5496:	4b4d      	ldr	r3, [pc, #308]	; (55cc <event_common_prepare+0x164>)
    5498:	9305      	str	r3, [sp, #20]
    549a:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    549c:	1b63      	subs	r3, r4, r5
		ticker_status =
    549e:	9300      	str	r3, [sp, #0]
    54a0:	9707      	str	r7, [sp, #28]
    54a2:	464b      	mov	r3, r9
    54a4:	9106      	str	r1, [sp, #24]
    54a6:	9104      	str	r1, [sp, #16]
    54a8:	9103      	str	r1, [sp, #12]
    54aa:	9102      	str	r1, [sp, #8]
    54ac:	9101      	str	r1, [sp, #4]
    54ae:	2201      	movs	r2, #1
    54b0:	4608      	mov	r0, r1
    54b2:	f7fd fde5 	bl	3080 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    54b6:	f030 0302 	bics.w	r3, r0, #2
    54ba:	d02b      	beq.n	5514 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    54bc:	4040      	eors	r0, r0
    54be:	f380 8811 	msr	BASEPRI, r0
    54c2:	f04f 0004 	mov.w	r0, #4
    54c6:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    54c8:	d21d      	bcs.n	5506 <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    54ca:	2300      	movs	r3, #0
    54cc:	461a      	mov	r2, r3
    54ce:	4619      	mov	r1, r3
    54d0:	4618      	mov	r0, r3
    54d2:	f7ff feff 	bl	52d4 <event_active>
		ticker_status =
    54d6:	f241 735d 	movw	r3, #5981	; 0x175d
    54da:	2100      	movs	r1, #0
    54dc:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    54de:	1b2c      	subs	r4, r5, r4
		ticker_status =
    54e0:	4b3b      	ldr	r3, [pc, #236]	; (55d0 <event_common_prepare+0x168>)
    54e2:	9305      	str	r3, [sp, #20]
    54e4:	9707      	str	r7, [sp, #28]
    54e6:	464b      	mov	r3, r9
    54e8:	9106      	str	r1, [sp, #24]
    54ea:	9104      	str	r1, [sp, #16]
    54ec:	9103      	str	r1, [sp, #12]
    54ee:	9102      	str	r1, [sp, #8]
    54f0:	9101      	str	r1, [sp, #4]
    54f2:	9400      	str	r4, [sp, #0]
    54f4:	2201      	movs	r2, #1
    54f6:	4608      	mov	r0, r1
    54f8:	f7fd fdc2 	bl	3080 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    54fc:	f030 0302 	bics.w	r3, r0, #2
    5500:	d1dc      	bne.n	54bc <event_common_prepare+0x54>
    5502:	462c      	mov	r4, r5
    5504:	e00b      	b.n	551e <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    5506:	2300      	movs	r3, #0
    5508:	461a      	mov	r2, r3
    550a:	4619      	mov	r1, r3
    550c:	4618      	mov	r0, r3
    550e:	f7ff fee1 	bl	52d4 <event_active>
		event_xtal(0, 0, 0, NULL);
    5512:	2300      	movs	r3, #0
    5514:	461a      	mov	r2, r3
    5516:	4619      	mov	r1, r3
    5518:	4618      	mov	r0, r3
    551a:	f7ff fecd 	bl	52b8 <event_xtal>
	_radio.remainder_anchor = remainder;
    551e:	4e2d      	ldr	r6, [pc, #180]	; (55d4 <event_common_prepare+0x16c>)
    5520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5522:	60f3      	str	r3, [r6, #12]
	ticker_status =
    5524:	f241 7375 	movw	r3, #6005	; 0x1775
    5528:	9308      	str	r3, [sp, #32]
    552a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    552c:	9306      	str	r3, [sp, #24]
    552e:	2200      	movs	r2, #0
    5530:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5532:	9305      	str	r3, [sp, #20]
    5534:	9707      	str	r7, [sp, #28]
    5536:	464b      	mov	r3, r9
    5538:	9204      	str	r2, [sp, #16]
    553a:	9203      	str	r2, [sp, #12]
    553c:	9202      	str	r2, [sp, #8]
    553e:	9201      	str	r2, [sp, #4]
    5540:	9400      	str	r4, [sp, #0]
    5542:	4611      	mov	r1, r2
    5544:	4610      	mov	r0, r2
    5546:	f7fd fd9b 	bl	3080 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    554a:	f030 0302 	bics.w	r3, r0, #2
    554e:	d1b5      	bne.n	54bc <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5550:	2005      	movs	r0, #5
    5552:	f7ff ff7b 	bl	544c <event_stop.constprop.50>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    5556:	f8d6 3d64 	ldr.w	r3, [r6, #3428]	; 0xd64
    555a:	429d      	cmp	r5, r3
    555c:	d023      	beq.n	55a6 <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    555e:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5562:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    5566:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5568:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    556a:	bfbc      	itt	lt
    556c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    5570:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    5574:	f8d6 2d64 	ldr.w	r2, [r6, #3428]	; 0xd64
    5578:	f8d8 1000 	ldr.w	r1, [r8]
    557c:	428a      	cmp	r2, r1
    557e:	bf38      	it	cc
    5580:	460a      	movcc	r2, r1
		ticker_status =
    5582:	f241 71a5 	movw	r1, #6053	; 0x17a5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5586:	b2a3      	uxth	r3, r4
    5588:	b292      	uxth	r2, r2
		ticker_status =
    558a:	9106      	str	r1, [sp, #24]
    558c:	2100      	movs	r1, #0
    558e:	9302      	str	r3, [sp, #8]
    5590:	9201      	str	r2, [sp, #4]
    5592:	9200      	str	r2, [sp, #0]
    5594:	9104      	str	r1, [sp, #16]
    5596:	9103      	str	r1, [sp, #12]
    5598:	4652      	mov	r2, sl
    559a:	4608      	mov	r0, r1
    559c:	f7fd fdc0 	bl	3120 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    55a0:	f030 0302 	bics.w	r3, r0, #2
    55a4:	d18a      	bne.n	54bc <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    55a6:	20ff      	movs	r0, #255	; 0xff
    55a8:	f7ff fd78 	bl	509c <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    55ac:	4b0a      	ldr	r3, [pc, #40]	; (55d8 <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    55ae:	2201      	movs	r2, #1
    55b0:	4611      	mov	r1, r2
    55b2:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    55b4:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    55b8:	f7fc ffb8 	bl	252c <mayfly_enqueue>
		LL_ASSERT(!retval);
    55bc:	2800      	cmp	r0, #0
    55be:	f47f af7d 	bne.w	54bc <event_common_prepare+0x54>
}
    55c2:	b00d      	add	sp, #52	; 0x34
    55c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55c8:	00005381 	.word	0x00005381
    55cc:	000052d5 	.word	0x000052d5
    55d0:	000052b9 	.word	0x000052b9
    55d4:	200002e0 	.word	0x200002e0
    55d8:	20005fc0 	.word	0x20005fc0

000055dc <radio_event_adv_prepare>:
{
    55dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    55de:	4a0b      	ldr	r2, [pc, #44]	; (560c <radio_event_adv_prepare+0x30>)
    55e0:	7c13      	ldrb	r3, [r2, #16]
    55e2:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    55e6:	b10b      	cbz	r3, 55ec <radio_event_adv_prepare+0x10>
    55e8:	f7ff fbbe 	bl	4d68 <event_active.part.17>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    55ec:	2305      	movs	r3, #5
    55ee:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    55f0:	9403      	str	r4, [sp, #12]
    55f2:	4c07      	ldr	r4, [pc, #28]	; (5610 <radio_event_adv_prepare+0x34>)
    55f4:	9402      	str	r4, [sp, #8]
    55f6:	9301      	str	r3, [sp, #4]
    55f8:	6a13      	ldr	r3, [r2, #32]
    55fa:	9300      	str	r3, [sp, #0]
    55fc:	f102 031c 	add.w	r3, r2, #28
    5600:	3218      	adds	r2, #24
    5602:	f7ff ff31 	bl	5468 <event_common_prepare>
}
    5606:	b004      	add	sp, #16
    5608:	bd10      	pop	{r4, pc}
    560a:	bf00      	nop
    560c:	200002e0 	.word	0x200002e0
    5610:	000058d1 	.word	0x000058d1

00005614 <radio_event_ext_adv_prepare>:
{
    5614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5616:	4a0b      	ldr	r2, [pc, #44]	; (5644 <radio_event_ext_adv_prepare+0x30>)
    5618:	7c13      	ldrb	r3, [r2, #16]
    561a:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    561e:	b10b      	cbz	r3, 5624 <radio_event_ext_adv_prepare+0x10>
    5620:	f7ff fba2 	bl	4d68 <event_active.part.17>
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    5624:	2305      	movs	r3, #5
    5626:	7413      	strb	r3, [r2, #16]
	event_common_prepare(ticks_at_expire, remainder,
    5628:	9403      	str	r4, [sp, #12]
    562a:	4c07      	ldr	r4, [pc, #28]	; (5648 <radio_event_ext_adv_prepare+0x34>)
    562c:	9402      	str	r4, [sp, #8]
    562e:	9301      	str	r3, [sp, #4]
    5630:	6a13      	ldr	r3, [r2, #32]
    5632:	9300      	str	r3, [sp, #0]
    5634:	f102 031c 	add.w	r3, r2, #28
    5638:	3218      	adds	r2, #24
    563a:	f7ff ff15 	bl	5468 <event_common_prepare>
}
    563e:	b004      	add	sp, #16
    5640:	bd10      	pop	{r4, pc}
    5642:	bf00      	nop
    5644:	200002e0 	.word	0x200002e0
    5648:	00005981 	.word	0x00005981

0000564c <event_adv_stop>:
{
    564c:	b507      	push	{r0, r1, r2, lr}
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    564e:	2005      	movs	r0, #5
    5650:	f7ff fefc 	bl	544c <event_stop.constprop.50>
	ticker_status =
    5654:	f641 438b 	movw	r3, #7307	; 0x1c8b
    5658:	2100      	movs	r1, #0
    565a:	9300      	str	r3, [sp, #0]
    565c:	2205      	movs	r2, #5
    565e:	4b06      	ldr	r3, [pc, #24]	; (5678 <event_adv_stop+0x2c>)
    5660:	4608      	mov	r0, r1
    5662:	f7fd fdab 	bl	31bc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5666:	f030 0302 	bics.w	r3, r0, #2
    566a:	d001      	beq.n	5670 <event_adv_stop+0x24>
    566c:	f7ff fb7c 	bl	4d68 <event_active.part.17>
}
    5670:	b003      	add	sp, #12
    5672:	f85d fb04 	ldr.w	pc, [sp], #4
    5676:	bf00      	nop
    5678:	00004e9d 	.word	0x00004e9d

0000567c <packet_rx_allocate.constprop.51>:
static void packet_rx_allocate(u8_t max)
    567c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    5680:	4d21      	ldr	r5, [pc, #132]	; (5708 <packet_rx_allocate.constprop.51+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    5682:	f895 4d22 	ldrb.w	r4, [r5, #3362]	; 0xd22
	if (acquire == _radio.packet_rx_count) {
    5686:	f895 3d20 	ldrb.w	r3, [r5, #3360]	; 0xd20
	if (max > _radio.link_rx_data_quota) {
    568a:	f895 9d34 	ldrb.w	r9, [r5, #3380]	; 0xd34
	acquire = _radio.packet_rx_acquire + 1;
    568e:	3401      	adds	r4, #1
    5690:	b2e4      	uxtb	r4, r4
		acquire = 0;
    5692:	42a3      	cmp	r3, r4
    5694:	bf08      	it	eq
    5696:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    5698:	f605 5728 	addw	r7, r5, #3368	; 0xd28
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    569c:	f505 6851 	add.w	r8, r5, #3344	; 0xd10
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    56a0:	f1b9 0f00 	cmp.w	r9, #0
    56a4:	d003      	beq.n	56ae <packet_rx_allocate.constprop.51+0x32>
    56a6:	f895 3d21 	ldrb.w	r3, [r5, #3361]	; 0xd21
    56aa:	429c      	cmp	r4, r3
    56ac:	d101      	bne.n	56b2 <packet_rx_allocate.constprop.51+0x36>
    56ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    56b2:	4638      	mov	r0, r7
    56b4:	f7fc fe81 	bl	23ba <mem_acquire>
		if (!link) {
    56b8:	4606      	mov	r6, r0
    56ba:	2800      	cmp	r0, #0
    56bc:	d0f7      	beq.n	56ae <packet_rx_allocate.constprop.51+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    56be:	4640      	mov	r0, r8
    56c0:	f7fc fe7b 	bl	23ba <mem_acquire>
		if (!node_rx) {
    56c4:	b928      	cbnz	r0, 56d2 <packet_rx_allocate.constprop.51+0x56>
			mem_release(link, &_radio.link_rx_free);
    56c6:	4630      	mov	r0, r6
    56c8:	4910      	ldr	r1, [pc, #64]	; (570c <packet_rx_allocate.constprop.51+0x90>)
}
    56ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    56ce:	f7fc be8e 	b.w	23ee <mem_release>
		node_rx->hdr.onion.link = link;
    56d2:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    56d4:	f895 2d22 	ldrb.w	r2, [r5, #3362]	; 0xd22
    56d8:	f8d5 3d1c 	ldr.w	r3, [r5, #3356]	; 0xd1c
    56dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    56e0:	f885 4d22 	strb.w	r4, [r5, #3362]	; 0xd22
		if (acquire == _radio.packet_rx_count) {
    56e4:	f895 3d20 	ldrb.w	r3, [r5, #3360]	; 0xd20
		acquire = _radio.packet_rx_acquire + 1;
    56e8:	3401      	adds	r4, #1
    56ea:	b2e4      	uxtb	r4, r4
			acquire = 0;
    56ec:	42a3      	cmp	r3, r4
    56ee:	bf08      	it	eq
    56f0:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    56f2:	f895 3d34 	ldrb.w	r3, [r5, #3380]	; 0xd34
    56f6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    56fa:	3b01      	subs	r3, #1
    56fc:	f885 3d34 	strb.w	r3, [r5, #3380]	; 0xd34
    5700:	fa5f f989 	uxtb.w	r9, r9
    5704:	e7cc      	b.n	56a0 <packet_rx_allocate.constprop.51+0x24>
    5706:	bf00      	nop
    5708:	200002e0 	.word	0x200002e0
    570c:	20001008 	.word	0x20001008

00005710 <common_init>:
{
    5710:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    5712:	4c2e      	ldr	r4, [pc, #184]	; (57cc <common_init+0xbc>)
    5714:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    5718:	2a00      	cmp	r2, #0
    571a:	d037      	beq.n	578c <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    571c:	f604 43f4 	addw	r3, r4, #3316	; 0xcf4
    5720:	f44f 7182 	mov.w	r1, #260	; 0x104
    5724:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    5728:	f7fc fe20 	bl	236c <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    572c:	4b28      	ldr	r3, [pc, #160]	; (57d0 <common_init+0xc0>)
    572e:	f894 2d1a 	ldrb.w	r2, [r4, #3354]	; 0xd1a
    5732:	f8b4 1d18 	ldrh.w	r1, [r4, #3352]	; 0xd18
    5736:	f8d4 0d0c 	ldr.w	r0, [r4, #3340]	; 0xd0c
    573a:	f7fc fe17 	bl	236c <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    573e:	f894 1d20 	ldrb.w	r1, [r4, #3360]	; 0xd20
    5742:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    5746:	4b23      	ldr	r3, [pc, #140]	; (57d4 <common_init+0xc4>)
    5748:	f8d4 0d24 	ldr.w	r0, [r4, #3364]	; 0xd24
    574c:	440a      	add	r2, r1
    574e:	2108      	movs	r1, #8
    5750:	f7fc fe0c 	bl	236c <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    5754:	4b20      	ldr	r3, [pc, #128]	; (57d8 <common_init+0xc8>)
    5756:	f8d4 0d38 	ldr.w	r0, [r4, #3384]	; 0xd38
    575a:	2202      	movs	r2, #2
    575c:	2124      	movs	r1, #36	; 0x24
    575e:	f7fc fe05 	bl	236c <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    5762:	f894 2d54 	ldrb.w	r2, [r4, #3412]	; 0xd54
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    5766:	f8d4 0d40 	ldr.w	r0, [r4, #3392]	; 0xd40
    576a:	4b1c      	ldr	r3, [pc, #112]	; (57dc <common_init+0xcc>)
    576c:	f8b4 1d48 	ldrh.w	r1, [r4, #3400]	; 0xd48
    5770:	3a01      	subs	r2, #1
    5772:	b292      	uxth	r2, r2
    5774:	f7fc fdfa 	bl	236c <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    5778:	4816      	ldr	r0, [pc, #88]	; (57d4 <common_init+0xc4>)
    577a:	f7fc fe1e 	bl	23ba <mem_acquire>
	LL_ASSERT(link);
    577e:	b940      	cbnz	r0, 5792 <common_init+0x82>
    5780:	4040      	eors	r0, r0
    5782:	f380 8811 	msr	BASEPRI, r0
    5786:	f04f 0004 	mov.w	r0, #4
    578a:	df02      	svc	2
		_radio.conn_free = NULL;
    578c:	f8c4 2cf4 	str.w	r2, [r4, #3316]	; 0xcf4
    5790:	e7cc      	b.n	572c <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    5792:	4a13      	ldr	r2, [pc, #76]	; (57e0 <common_init+0xd0>)
    5794:	1f11      	subs	r1, r2, #4
    5796:	f7fc fe56 	bl	2446 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    579a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    579e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    57a2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    57a6:	23ff      	movs	r3, #255	; 0xff
    57a8:	f884 3d02 	strb.w	r3, [r4, #3330]	; 0xd02
	_radio.data_chan_map[1] = 0xFF;
    57ac:	f884 3d03 	strb.w	r3, [r4, #3331]	; 0xd03
	_radio.data_chan_map[2] = 0xFF;
    57b0:	f884 3d04 	strb.w	r3, [r4, #3332]	; 0xd04
	_radio.data_chan_map[3] = 0xFF;
    57b4:	f884 3d05 	strb.w	r3, [r4, #3333]	; 0xd05
	_radio.data_chan_map[4] = 0x1F;
    57b8:	231f      	movs	r3, #31
    57ba:	f884 3d06 	strb.w	r3, [r4, #3334]	; 0xd06
	_radio.data_chan_count = 37;
    57be:	2325      	movs	r3, #37	; 0x25
    57c0:	f884 3d07 	strb.w	r3, [r4, #3335]	; 0xd07
}
    57c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    57c8:	f7ff bf58 	b.w	567c <packet_rx_allocate.constprop.51>
    57cc:	200002e0 	.word	0x200002e0
    57d0:	20000ff0 	.word	0x20000ff0
    57d4:	20001008 	.word	0x20001008
    57d8:	2000101c 	.word	0x2000101c
    57dc:	20001024 	.word	0x20001024
    57e0:	20001010 	.word	0x20001010

000057e4 <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    57e4:	4b02      	ldr	r3, [pc, #8]	; (57f0 <mayfly_xtal_start+0xc>)
    57e6:	6818      	ldr	r0, [r3, #0]
    57e8:	6843      	ldr	r3, [r0, #4]
    57ea:	2100      	movs	r1, #0
    57ec:	681b      	ldr	r3, [r3, #0]
    57ee:	4718      	bx	r3
    57f0:	200002e0 	.word	0x200002e0

000057f4 <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    57f4:	4b02      	ldr	r3, [pc, #8]	; (5800 <mayfly_xtal_stop+0xc>)
    57f6:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    57f8:	6843      	ldr	r3, [r0, #4]
    57fa:	2100      	movs	r1, #0
    57fc:	685b      	ldr	r3, [r3, #4]
    57fe:	4718      	bx	r3
    5800:	200002e0 	.word	0x200002e0

00005804 <chan_sel_2>:
{
    5804:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    5806:	4048      	eors	r0, r1
    5808:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    580a:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    580e:	2608      	movs	r6, #8
	o = 0;
    5810:	2400      	movs	r4, #0
		o |= (i & 1);
    5812:	f00e 0501 	and.w	r5, lr, #1
    5816:	3e01      	subs	r6, #1
    5818:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    581c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    5820:	b2ec      	uxtb	r4, r5
		i >>= 1;
    5822:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    5826:	d1f4      	bne.n	5812 <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    5828:	0225      	lsls	r5, r4, #8
    582a:	b22d      	sxth	r5, r5
    582c:	b2c0      	uxtb	r0, r0
    582e:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    5832:	4634      	mov	r4, r6
		o |= (i & 1);
    5834:	f000 0601 	and.w	r6, r0, #1
    5838:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    583c:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    5840:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    5844:	b2e4      	uxtb	r4, r4
		i >>= 1;
    5846:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    584a:	d1f3      	bne.n	5834 <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    584c:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    584e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    5852:	3f01      	subs	r7, #1
    5854:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    5856:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    585a:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    585c:	d1d5      	bne.n	580a <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    585e:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    5860:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    5862:	fbb1 f0f4 	udiv	r0, r1, r4
    5866:	fb04 1010 	mls	r0, r4, r0, r1
    586a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    586c:	08c4      	lsrs	r4, r0, #3
    586e:	f000 0507 	and.w	r5, r0, #7
    5872:	5d14      	ldrb	r4, [r2, r4]
    5874:	412c      	asrs	r4, r5
    5876:	07e4      	lsls	r4, r4, #31
    5878:	d407      	bmi.n	588a <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    587a:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    587c:	f3c1 4107 	ubfx	r1, r1, #16, #8
    5880:	4610      	mov	r0, r2
}
    5882:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    5886:	f7fe bc2d 	b.w	40e4 <chan_sel_remap>
}
    588a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000588c <preempt_calc>:
{
    588c:	b570      	push	{r4, r5, r6, lr}
    588e:	4614      	mov	r4, r2
    5890:	460e      	mov	r6, r1
    5892:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    5894:	f7fd fd62 	bl	335c <ticker_ticks_now_get>
	u32_t diff =
    5898:	4621      	mov	r1, r4
    589a:	f7fd fd61 	bl	3360 <ticker_ticks_diff_get>
	diff += 3;
    589e:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    58a0:	2c09      	cmp	r4, #9
    58a2:	d911      	bls.n	58c8 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    58a4:	4b09      	ldr	r3, [pc, #36]	; (58cc <preempt_calc+0x40>)
    58a6:	781b      	ldrb	r3, [r3, #0]
    58a8:	b113      	cbz	r3, 58b0 <preempt_calc+0x24>
    58aa:	2000      	movs	r0, #0
    58ac:	f7ff f9ce 	bl	4c4c <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    58b0:	4632      	mov	r2, r6
    58b2:	2100      	movs	r1, #0
    58b4:	4628      	mov	r0, r5
    58b6:	f7ff fa5d 	bl	4d74 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    58ba:	68ab      	ldr	r3, [r5, #8]
    58bc:	441c      	add	r4, r3
		if (diff <
    58be:	2c26      	cmp	r4, #38	; 0x26
    58c0:	d800      	bhi.n	58c4 <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    58c2:	60ac      	str	r4, [r5, #8]
		return 1;
    58c4:	2001      	movs	r0, #1
}
    58c6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    58c8:	2000      	movs	r0, #0
    58ca:	bd70      	pop	{r4, r5, r6, pc}
    58cc:	200010ec 	.word	0x200010ec

000058d0 <event_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    58d0:	4b28      	ldr	r3, [pc, #160]	; (5974 <event_adv+0xa4>)
    58d2:	7cda      	ldrb	r2, [r3, #19]
{
    58d4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    58d6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
{
    58da:	4605      	mov	r5, r0
    58dc:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    58de:	b12a      	cbz	r2, 58ec <event_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    58e0:	4040      	eors	r0, r0
    58e2:	f380 8811 	msr	BASEPRI, r0
    58e6:	f04f 0004 	mov.w	r0, #4
    58ea:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    58ec:	7c1b      	ldrb	r3, [r3, #16]
    58ee:	b2db      	uxtb	r3, r3
    58f0:	2b05      	cmp	r3, #5
    58f2:	d1f5      	bne.n	58e0 <event_adv+0x10>
	_radio.ticks_anchor = ticks_at_expire;
    58f4:	60a0      	str	r0, [r4, #8]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    58f6:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	_radio.role = ROLE_ADV;
    58fa:	2601      	movs	r6, #1
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    58fc:	f3c0 0042 	ubfx	r0, r0, #1, #3
	_radio.role = ROLE_ADV;
    5900:	74e6      	strb	r6, [r4, #19]
	_radio.ticker_id_prepare = 0;
    5902:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    5904:	7463      	strb	r3, [r4, #17]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
    5906:	f7ff fd77 	bl	53f8 <adv_scan_configure.constprop.49>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
    590a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    590e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    5912:	f3c3 1302 	ubfx	r3, r3, #4, #3
    5916:	f363 0202 	bfi	r2, r3, #0, #3
    591a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	adv_setup();
    591e:	f7fe fec9 	bl	46b4 <adv_setup>
	if (_radio.advertiser.filter_policy) {
    5922:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    5926:	079b      	lsls	r3, r3, #30
    5928:	d007      	beq.n	593a <event_adv+0x6a>
		struct ll_filter *wl = ctrl_filter_get(true);
    592a:	4630      	mov	r0, r6
    592c:	f003 fe82 	bl	9634 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    5930:	1c82      	adds	r2, r0, #2
    5932:	7841      	ldrb	r1, [r0, #1]
    5934:	7800      	ldrb	r0, [r0, #0]
    5936:	f004 f9c3 	bl	9cc0 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    593a:	68e2      	ldr	r2, [r4, #12]
    593c:	f105 0109 	add.w	r1, r5, #9
    5940:	2001      	movs	r0, #1
    5942:	f004 fa13 	bl	9d6c <radio_tmr_start>
	radio_tmr_end_capture();
    5946:	f004 fae1 	bl	9f0c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    594a:	462a      	mov	r2, r5
    594c:	2105      	movs	r1, #5
    594e:	480a      	ldr	r0, [pc, #40]	; (5978 <event_adv+0xa8>)
    5950:	f7ff ff9c 	bl	588c <preempt_calc>
    5954:	4603      	mov	r3, r0
    5956:	b128      	cbz	r0, 5964 <event_adv+0x94>
		_radio.state = STATE_STOP;
    5958:	2304      	movs	r3, #4
    595a:	7523      	strb	r3, [r4, #20]
}
    595c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    5960:	f004 b90e 	b.w	9b80 <radio_disable>
		ticker_status =
    5964:	4a05      	ldr	r2, [pc, #20]	; (597c <event_adv+0xac>)
    5966:	4601      	mov	r1, r0
    5968:	f7fd fca6 	bl	32b8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    596c:	f030 0302 	bics.w	r3, r0, #2
    5970:	d1b6      	bne.n	58e0 <event_adv+0x10>
    5972:	bd70      	pop	{r4, r5, r6, pc}
    5974:	200002e0 	.word	0x200002e0
    5978:	200002f8 	.word	0x200002f8
    597c:	00004bf9 	.word	0x00004bf9

00005980 <event_ext_adv>:
	LL_ASSERT(_radio.role == ROLE_NONE);
    5980:	4b21      	ldr	r3, [pc, #132]	; (5a08 <event_ext_adv+0x88>)
    5982:	7cd9      	ldrb	r1, [r3, #19]
{
    5984:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    5986:	f001 02ff 	and.w	r2, r1, #255	; 0xff
{
    598a:	4605      	mov	r5, r0
    598c:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    598e:	b129      	cbz	r1, 599c <event_ext_adv+0x1c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5990:	4040      	eors	r0, r0
    5992:	f380 8811 	msr	BASEPRI, r0
    5996:	f04f 0004 	mov.w	r0, #4
    599a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    599c:	7c1b      	ldrb	r3, [r3, #16]
    599e:	b2db      	uxtb	r3, r3
    59a0:	2b05      	cmp	r3, #5
    59a2:	d1f5      	bne.n	5990 <event_ext_adv+0x10>
	_radio.role = ROLE_ADV;
    59a4:	2601      	movs	r6, #1
    59a6:	74e6      	strb	r6, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    59a8:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    59aa:	7422      	strb	r2, [r4, #16]
	_radio.ext_advertiser.aux_chain_count_current = 0;
    59ac:	f884 2c8d 	strb.w	r2, [r4, #3213]	; 0xc8d
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    59b0:	7463      	strb	r3, [r4, #17]
	ext_adv_setup();
    59b2:	f7fe ff8d 	bl	48d0 <ext_adv_setup>
	if (_radio.advertiser.filter_policy) {
    59b6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    59ba:	079b      	lsls	r3, r3, #30
    59bc:	d007      	beq.n	59ce <event_ext_adv+0x4e>
		struct ll_filter *wl = ctrl_filter_get(true);
    59be:	4630      	mov	r0, r6
    59c0:	f003 fe38 	bl	9634 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    59c4:	1c82      	adds	r2, r0, #2
    59c6:	7841      	ldrb	r1, [r0, #1]
    59c8:	7800      	ldrb	r0, [r0, #0]
    59ca:	f004 f979 	bl	9cc0 <radio_filter_configure>
	remainder_us = radio_tmr_start(1, ticks_at_expire +
    59ce:	68e2      	ldr	r2, [r4, #12]
    59d0:	f105 0109 	add.w	r1, r5, #9
    59d4:	2001      	movs	r0, #1
    59d6:	f004 f9c9 	bl	9d6c <radio_tmr_start>
	radio_tmr_end_capture();
    59da:	f004 fa97 	bl	9f0c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    59de:	462a      	mov	r2, r5
    59e0:	2105      	movs	r1, #5
    59e2:	480a      	ldr	r0, [pc, #40]	; (5a0c <event_ext_adv+0x8c>)
    59e4:	f7ff ff52 	bl	588c <preempt_calc>
    59e8:	4603      	mov	r3, r0
    59ea:	b128      	cbz	r0, 59f8 <event_ext_adv+0x78>
		_radio.state = STATE_STOP;
    59ec:	2304      	movs	r3, #4
    59ee:	7523      	strb	r3, [r4, #20]
}
    59f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		radio_disable();
    59f4:	f004 b8c4 	b.w	9b80 <radio_disable>
		ticker_status =
    59f8:	4a05      	ldr	r2, [pc, #20]	; (5a10 <event_ext_adv+0x90>)
    59fa:	4601      	mov	r1, r0
    59fc:	f7fd fc5c 	bl	32b8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5a00:	f030 0302 	bics.w	r3, r0, #2
    5a04:	d1c4      	bne.n	5990 <event_ext_adv+0x10>
    5a06:	bd70      	pop	{r4, r5, r6, pc}
    5a08:	200002e0 	.word	0x200002e0
    5a0c:	200002f8 	.word	0x200002f8
    5a10:	00004bf9 	.word	0x00004bf9

00005a14 <ctrl_tx_enqueue>:
{
    5a14:	b510      	push	{r4, lr}
	    !conn->empty &&
    5a16:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    5a1a:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    5a1e:	f014 0f80 	tst.w	r4, #128	; 0x80
    5a22:	d118      	bne.n	5a56 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    5a24:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    5a28:	b1ab      	cbz	r3, 5a56 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    5a2a:	0724      	lsls	r4, r4, #28
    5a2c:	d413      	bmi.n	5a56 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    5a2e:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    5a32:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    5a34:	bf04      	itt	eq
    5a36:	681c      	ldreq	r4, [r3, #0]
    5a38:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    5a3c:	b992      	cbnz	r2, 5a64 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    5a3e:	681a      	ldr	r2, [r3, #0]
    5a40:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    5a42:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    5a44:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    5a48:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    5a4c:	680b      	ldr	r3, [r1, #0]
    5a4e:	b90b      	cbnz	r3, 5a54 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    5a50:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    5a54:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    5a56:	b92a      	cbnz	r2, 5a64 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    5a58:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    5a5c:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    5a5e:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    5a62:	e7ef      	b.n	5a44 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    5a64:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    5a68:	681a      	ldr	r2, [r3, #0]
    5a6a:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    5a6c:	6019      	str	r1, [r3, #0]
    5a6e:	e7eb      	b.n	5a48 <ctrl_tx_enqueue+0x34>

00005a70 <ctrl_tx_sec_enqueue>:
{
    5a70:	b410      	push	{r4}
	if (conn->pause_tx) {
    5a72:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    5a76:	0724      	lsls	r4, r4, #28
{
    5a78:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    5a7a:	d50f      	bpl.n	5a9c <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    5a7c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    5a80:	b931      	cbnz	r1, 5a90 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    5a82:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    5a86:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    5a88:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    5a8c:	bc10      	pop	{r4}
    5a8e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    5a90:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    5a94:	6819      	ldr	r1, [r3, #0]
    5a96:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    5a98:	601a      	str	r2, [r3, #0]
    5a9a:	e7f7      	b.n	5a8c <ctrl_tx_sec_enqueue+0x1c>
}
    5a9c:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    5a9e:	f7ff bfb9 	b.w	5a14 <ctrl_tx_enqueue>
	...

00005aa4 <feature_rsp_send>:
{
    5aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5aa6:	4f21      	ldr	r7, [pc, #132]	; (5b2c <feature_rsp_send+0x88>)
{
    5aa8:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5aaa:	f607 503c 	addw	r0, r7, #3388	; 0xd3c
{
    5aae:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5ab0:	f7fc fc83 	bl	23ba <mem_acquire>
	if (!node_tx) {
    5ab4:	4604      	mov	r4, r0
    5ab6:	b3b0      	cbz	r0, 5b26 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    5ab8:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    5aba:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    5abc:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    5ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    5ac4:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    5ac8:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    5acc:	f043 0310 	orr.w	r3, r3, #16
    5ad0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    5ad4:	79b1      	ldrb	r1, [r6, #6]
    5ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    5ada:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    5ade:	f3c1 0110 	ubfx	r1, r1, #0, #17
    5ae2:	400b      	ands	r3, r1
    5ae4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    5ae8:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    5aec:	f043 0320 	orr.w	r3, r3, #32
    5af0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5af4:	7903      	ldrb	r3, [r0, #4]
    5af6:	f043 0303 	orr.w	r3, r3, #3
    5afa:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    5afc:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    5afe:	2309      	movs	r3, #9
    5b00:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    5b02:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    5b04:	2100      	movs	r1, #0
    5b06:	4410      	add	r0, r2
    5b08:	f7fa fd8e 	bl	628 <memset>
		conn->llcp_features & 0xFF;
    5b0c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    5b10:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    5b12:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    5b14:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    5b16:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    5b18:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    5b1a:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    5b1c:	4621      	mov	r1, r4
    5b1e:	f7ff ffa7 	bl	5a70 <ctrl_tx_sec_enqueue>
	return 0;
    5b22:	2000      	movs	r0, #0
    5b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    5b26:	2001      	movs	r0, #1
}
    5b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b2a:	bf00      	nop
    5b2c:	200002e0 	.word	0x200002e0

00005b30 <event_connection_prepare>:
{
    5b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5b34:	4d6f      	ldr	r5, [pc, #444]	; (5cf4 <event_connection_prepare+0x1c4>)
{
    5b36:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    5b38:	7c2b      	ldrb	r3, [r5, #16]
{
    5b3a:	b08f      	sub	sp, #60	; 0x3c
    5b3c:	4680      	mov	r8, r0
    5b3e:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    5b40:	b12b      	cbz	r3, 5b4e <event_connection_prepare+0x1e>
			LL_ASSERT(0);
    5b42:	4040      	eors	r0, r0
    5b44:	f380 8811 	msr	BASEPRI, r0
    5b48:	f04f 0004 	mov.w	r0, #4
    5b4c:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    5b4e:	f894 3020 	ldrb.w	r3, [r4, #32]
    5b52:	3307      	adds	r3, #7
    5b54:	b2db      	uxtb	r3, r3
    5b56:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    5b58:	f994 301d 	ldrsb.w	r3, [r4, #29]
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	da09      	bge.n	5b74 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    5b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    5b62:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    5b64:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    5b68:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    5b6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    5b6c:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    5b6e:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    5b70:	bf88      	it	hi
    5b72:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    5b74:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    5b76:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    5b7a:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    5b7c:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    5b7e:	b292      	uxth	r2, r2
    5b80:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    5b82:	4432      	add	r2, r6
    5b84:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    5b86:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    5b8a:	429a      	cmp	r2, r3
    5b8c:	d071      	beq.n	5c72 <event_connection_prepare+0x142>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    5b8e:	2005      	movs	r0, #5
    5b90:	f7ff fc5c 	bl	544c <event_stop.constprop.50>
		switch (conn->llcp_type) {
    5b94:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    5b98:	3b01      	subs	r3, #1
    5b9a:	2b03      	cmp	r3, #3
    5b9c:	d8d1      	bhi.n	5b42 <event_connection_prepare+0x12>
    5b9e:	e8df f013 	tbh	[pc, r3, lsl #1]
    5ba2:	0004      	.short	0x0004
    5ba4:	02680226 	.word	0x02680226
    5ba8:	02b1      	.short	0x02b1
	if (!conn_upd) {
    5baa:	f8d5 3d68 	ldr.w	r3, [r5, #3432]	; 0xd68
    5bae:	b90b      	cbnz	r3, 5bb4 <event_connection_prepare+0x84>
		_radio.conn_upd = conn;
    5bb0:	f8c5 4d68 	str.w	r4, [r5, #3432]	; 0xd68
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    5bb4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    5bb8:	f013 0303 	ands.w	r3, r3, #3
    5bbc:	f000 80a6 	beq.w	5d0c <event_connection_prepare+0x1dc>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5bc0:	484d      	ldr	r0, [pc, #308]	; (5cf8 <event_connection_prepare+0x1c8>)
    5bc2:	f7fc fbfa 	bl	23ba <mem_acquire>
		if (!node_tx) {
    5bc6:	4605      	mov	r5, r0
    5bc8:	2800      	cmp	r0, #0
    5bca:	d052      	beq.n	5c72 <event_connection_prepare+0x142>
		switch (conn->llcp.conn_upd.state) {
    5bcc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    5bd0:	f003 0203 	and.w	r2, r3, #3
    5bd4:	2a01      	cmp	r2, #1
    5bd6:	d1b4      	bne.n	5b42 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    5bd8:	f36f 0301 	bfc	r3, #0, #2
    5bdc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    5be0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    5be2:	3306      	adds	r3, #6
    5be4:	4433      	add	r3, r6
    5be6:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    5be8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5bec:	7902      	ldrb	r2, [r0, #4]
    5bee:	f042 0203 	orr.w	r2, r2, #3
    5bf2:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    5bf4:	220c      	movs	r2, #12
    5bf6:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    5bf8:	2200      	movs	r2, #0
    5bfa:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    5bfc:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    5c00:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    5c02:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    5c04:	f240 41e2 	movw	r1, #1250	; 0x4e2
    5c08:	fbb2 f2f1 	udiv	r2, r2, r1
    5c0c:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    5c10:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    5c14:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    5c18:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    5c1c:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    5c20:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    5c24:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    5c28:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5c2c:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    5c2e:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5c32:	2a00      	cmp	r2, #0
    5c34:	da0a      	bge.n	5c4c <event_connection_prepare+0x11c>
			u32_t ticks_prepare_to_start =
    5c36:	68a3      	ldr	r3, [r4, #8]
    5c38:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    5c3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    5c3e:	428b      	cmp	r3, r1
    5c40:	bf2c      	ite	cs
    5c42:	4443      	addcs	r3, r8
    5c44:	eb08 0301 	addcc.w	r3, r8, r1
    5c48:	1a9b      	subs	r3, r3, r2
    5c4a:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    5c4c:	f105 0309 	add.w	r3, r5, #9
    5c50:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    5c52:	4b2a      	ldr	r3, [pc, #168]	; (5cfc <event_connection_prepare+0x1cc>)
    5c54:	4a2a      	ldr	r2, [pc, #168]	; (5d00 <event_connection_prepare+0x1d0>)
    5c56:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5c58:	2201      	movs	r2, #1
    5c5a:	4611      	mov	r1, r2
    5c5c:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    5c5e:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5c60:	f7fc fc64 	bl	252c <mayfly_enqueue>
		LL_ASSERT(!retval);
    5c64:	2800      	cmp	r0, #0
    5c66:	f47f af6c 	bne.w	5b42 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    5c6a:	4629      	mov	r1, r5
    5c6c:	4620      	mov	r0, r4
    5c6e:	f7ff fed1 	bl	5a14 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    5c72:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    5c76:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    5c7a:	429a      	cmp	r2, r3
    5c7c:	d01d      	beq.n	5cba <event_connection_prepare+0x18a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    5c7e:	2005      	movs	r0, #5
    5c80:	f7ff fbe4 	bl	544c <event_stop.constprop.50>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5c84:	481c      	ldr	r0, [pc, #112]	; (5cf8 <event_connection_prepare+0x1c8>)
    5c86:	f7fc fb98 	bl	23ba <mem_acquire>
		if (node_tx) {
    5c8a:	4601      	mov	r1, r0
    5c8c:	b1a8      	cbz	r0, 5cba <event_connection_prepare+0x18a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    5c8e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    5c92:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5c96:	7903      	ldrb	r3, [r0, #4]
    5c98:	f043 0303 	orr.w	r3, r3, #3
    5c9c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    5c9e:	2302      	movs	r3, #2
    5ca0:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    5ca2:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    5ca4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    5ca8:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    5caa:	4620      	mov	r0, r4
    5cac:	f7ff feb2 	bl	5a14 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    5cb0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    5cb2:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    5cb4:	bf98      	it	ls
    5cb6:	3301      	addls	r3, #1
    5cb8:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    5cba:	f894 3020 	ldrb.w	r3, [r4, #32]
    5cbe:	f994 501d 	ldrsb.w	r5, [r4, #29]
    5cc2:	4810      	ldr	r0, [pc, #64]	; (5d04 <event_connection_prepare+0x1d4>)
    5cc4:	4910      	ldr	r1, [pc, #64]	; (5d08 <event_connection_prepare+0x1d8>)
    5cc6:	68a2      	ldr	r2, [r4, #8]
    5cc8:	9403      	str	r4, [sp, #12]
    5cca:	3307      	adds	r3, #7
    5ccc:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    5cd0:	bf38      	it	cc
    5cd2:	4601      	movcc	r1, r0
    5cd4:	b2db      	uxtb	r3, r3
    5cd6:	e88d 000c 	stmia.w	sp, {r2, r3}
    5cda:	9102      	str	r1, [sp, #8]
    5cdc:	1d23      	adds	r3, r4, #4
    5cde:	4622      	mov	r2, r4
    5ce0:	4649      	mov	r1, r9
    5ce2:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    5ce4:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    5ce6:	f7ff fbbf 	bl	5468 <event_common_prepare>
	conn->event_counter = event_counter + 1;
    5cea:	8466      	strh	r6, [r4, #34]	; 0x22
}
    5cec:	b00f      	add	sp, #60	; 0x3c
    5cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cf2:	bf00      	nop
    5cf4:	200002e0 	.word	0x200002e0
    5cf8:	2000101c 	.word	0x2000101c
    5cfc:	20005f50 	.word	0x20005f50
    5d00:	00005025 	.word	0x00005025
    5d04:	00007cf1 	.word	0x00007cf1
    5d08:	000061ed 	.word	0x000061ed
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    5d0c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    5d10:	1bf7      	subs	r7, r6, r7
    5d12:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    5d14:	0438      	lsls	r0, r7, #16
    5d16:	d4ac      	bmi.n	5c72 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    5d18:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    5d1c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    5d20:	f8d5 2d68 	ldr.w	r2, [r5, #3432]	; 0xd68
		_radio.ticker_id_prepare = 0;
    5d24:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    5d26:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    5d28:	bf08      	it	eq
    5d2a:	f8c5 3d68 	streq.w	r3, [r5, #3432]	; 0xd68
		if ((conn->llcp.conn_upd.interval !=
    5d2e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    5d32:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    5d34:	429a      	cmp	r2, r3
    5d36:	d114      	bne.n	5d62 <event_connection_prepare+0x232>
		     conn->conn_interval) ||
    5d38:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    5d3c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    5d3e:	4299      	cmp	r1, r3
    5d40:	d10f      	bne.n	5d62 <event_connection_prepare+0x232>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    5d42:	f240 43e2 	movw	r3, #1250	; 0x4e2
    5d46:	435a      	muls	r2, r3
    5d48:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    5d4c:	f242 7110 	movw	r1, #10000	; 0x2710
    5d50:	fb01 2303 	mla	r3, r1, r3, r2
    5d54:	3b01      	subs	r3, #1
    5d56:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    5d5a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    5d5c:	b29b      	uxth	r3, r3
    5d5e:	429a      	cmp	r2, r3
    5d60:	d016      	beq.n	5d90 <event_connection_prepare+0x260>
			node_rx = packet_rx_reserve_get(2);
    5d62:	2002      	movs	r0, #2
    5d64:	f7fe f9da 	bl	411c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    5d68:	2800      	cmp	r0, #0
    5d6a:	f43f aeea 	beq.w	5b42 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    5d6e:	8c23      	ldrh	r3, [r4, #32]
    5d70:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    5d72:	2308      	movs	r3, #8
    5d74:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    5d76:	2300      	movs	r3, #0
    5d78:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    5d7a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    5d7e:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    5d80:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    5d84:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    5d86:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    5d8a:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    5d8c:	f7ff f83e 	bl	4e0c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5d90:	6823      	ldr	r3, [r4, #0]
    5d92:	6866      	ldr	r6, [r4, #4]
    5d94:	2b00      	cmp	r3, #0
    5d96:	da09      	bge.n	5dac <event_connection_prepare+0x27c>
			u32_t ticks_prepare_to_start =
    5d98:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    5d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5d9e:	42b0      	cmp	r0, r6
    5da0:	bf2c      	ite	cs
    5da2:	4480      	addcs	r8, r0
    5da4:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    5da6:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    5da8:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    5dac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    5dae:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    5db2:	49c9      	ldr	r1, [pc, #804]	; (60d8 <event_connection_prepare+0x5a8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    5db4:	fb13 f307 	smulbb	r3, r3, r7
    5db8:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    5dba:	fbb3 f2fa 	udiv	r2, r3, sl
    5dbe:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    5dc2:	fb1a f009 	smulbb	r0, sl, r9
    5dc6:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    5dc8:	4283      	cmp	r3, r0
    5dca:	f080 80f2 	bcs.w	5fb2 <event_connection_prepare+0x482>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    5dce:	1ac0      	subs	r0, r0, r3
    5dd0:	f240 1223 	movw	r2, #291	; 0x123
    5dd4:	4342      	muls	r2, r0
    5dd6:	17c3      	asrs	r3, r0, #31
    5dd8:	fb01 2303 	mla	r3, r1, r3, r2
    5ddc:	fba0 0101 	umull	r0, r1, r0, r1
    5de0:	4419      	add	r1, r3
    5de2:	a3bb      	add	r3, pc, #748	; (adr r3, 60d0 <event_connection_prepare+0x5a0>)
    5de4:	e9d3 2300 	ldrd	r2, r3, [r3]
    5de8:	f7fa fa3e 	bl	268 <__aeabi_uldivmod>
    5dec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5df0:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5df4:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    5df6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    5df8:	f8df b304 	ldr.w	fp, [pc, #772]	; 6100 <event_connection_prepare+0x5d0>
    5dfc:	1bdb      	subs	r3, r3, r7
    5dfe:	444b      	add	r3, r9
    5e00:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    5e02:	6823      	ldr	r3, [r4, #0]
    5e04:	429e      	cmp	r6, r3
    5e06:	bf38      	it	cc
    5e08:	461e      	movcc	r6, r3
		if (conn->role) {
    5e0a:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    5e0e:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    5e10:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    5e14:	2b00      	cmp	r3, #0
    5e16:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    5e18:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    5e1a:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    5e1e:	f280 80d9 	bge.w	5fd4 <event_connection_prepare+0x4a4>
				conn->slave.window_widening_periodic_us *
    5e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    5e24:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5e26:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    5e2a:	f895 3d08 	ldrb.w	r3, [r5, #3336]	; 0xd08
    5e2e:	4aab      	ldr	r2, [pc, #684]	; (60dc <event_connection_prepare+0x5ac>)
    5e30:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    5e34:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    5e38:	f3c3 0382 	ubfx	r3, r3, #2, #3
    5e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    5e40:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    5e44:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    5e46:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5e48:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    5e4c:	4ba4      	ldr	r3, [pc, #656]	; (60e0 <event_connection_prepare+0x5b0>)
				conn->llcp.conn_upd.win_size * 1250;
    5e4e:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    5e52:	f205 253f 	addw	r5, r5, #575	; 0x23f
    5e56:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    5e5a:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    5e5c:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    5e60:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    5e62:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    5e64:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    5e66:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    5e68:	429f      	cmp	r7, r3
    5e6a:	bf94      	ite	ls
    5e6c:	6467      	strls	r7, [r4, #68]	; 0x44
    5e6e:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    5e70:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    5e72:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    5e74:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5e76:	fba0 010b 	umull	r0, r1, r0, fp
    5e7a:	a395      	add	r3, pc, #596	; (adr r3, 60d0 <event_connection_prepare+0x5a0>)
    5e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e80:	f7fa f9f2 	bl	268 <__aeabi_uldivmod>
    5e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5e86:	1a1b      	subs	r3, r3, r0
    5e88:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5e8c:	fbb3 f0f8 	udiv	r0, r3, r8
    5e90:	fb08 f000 	mul.w	r0, r8, r0
    5e94:	a38e      	add	r3, pc, #568	; (adr r3, 60d0 <event_connection_prepare+0x5a0>)
    5e96:	e9d3 2300 	ldrd	r2, r3, [r3]
    5e9a:	fba0 010b 	umull	r0, r1, r0, fp
    5e9e:	f7fa f9e3 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    5ea2:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5ea4:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    5ea8:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    5eac:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5eae:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    5eb2:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    5eb6:	f242 7210 	movw	r2, #10000	; 0x2710
    5eba:	fb02 6303 	mla	r3, r2, r3, r6
    5ebe:	3b01      	subs	r3, #1
    5ec0:	fbb3 f3f6 	udiv	r3, r3, r6
    5ec4:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5ec6:	4b87      	ldr	r3, [pc, #540]	; (60e4 <event_connection_prepare+0x5b4>)
    5ec8:	4433      	add	r3, r6
    5eca:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    5ece:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    5ed2:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    5ed4:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    5ed8:	bf08      	it	eq
    5eda:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    5edc:	2101      	movs	r1, #1
    5ede:	2000      	movs	r0, #0
    5ee0:	f004 f8f0 	bl	a0c4 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5ee4:	2200      	movs	r2, #0
    5ee6:	2101      	movs	r1, #1
		mayfly_was_enabled =
    5ee8:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5eea:	4610      	mov	r0, r2
    5eec:	f7fc faf6 	bl	24dc <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ef0:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    5ef4:	f641 737b 	movw	r3, #8059	; 0x1f7b
    5ef8:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5efa:	3207      	adds	r2, #7
		ticker_status =
    5efc:	9300      	str	r3, [sp, #0]
    5efe:	b2d2      	uxtb	r2, r2
    5f00:	4b79      	ldr	r3, [pc, #484]	; (60e8 <event_connection_prepare+0x5b8>)
    5f02:	4608      	mov	r0, r1
    5f04:	f7fd f95a 	bl	31bc <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5f08:	f030 0802 	bics.w	r8, r0, #2
    5f0c:	f47f ae19 	bne.w	5b42 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    5f10:	fba5 ab0b 	umull	sl, fp, r5, fp
    5f14:	a36e      	add	r3, pc, #440	; (adr r3, 60d0 <event_connection_prepare+0x5a0>)
    5f16:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f1a:	4650      	mov	r0, sl
    5f1c:	4659      	mov	r1, fp
    5f1e:	f7fa f9a3 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    5f22:	4a72      	ldr	r2, [pc, #456]	; (60ec <event_connection_prepare+0x5bc>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f24:	f894 6020 	ldrb.w	r6, [r4, #32]
    5f28:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    5f2c:	2307      	movs	r3, #7
    5f2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5f32:	2100      	movs	r1, #0
    5f34:	4343      	muls	r3, r0
    5f36:	fb02 3301 	mla	r3, r2, r1, r3
    5f3a:	fba0 0102 	umull	r0, r1, r0, r2
    5f3e:	ebba 0000 	subs.w	r0, sl, r0
    5f42:	4419      	add	r1, r3
    5f44:	eb6b 0101 	sbc.w	r1, fp, r1
    5f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f4c:	2300      	movs	r3, #0
    5f4e:	f7fa f98b 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f52:	68e3      	ldr	r3, [r4, #12]
    5f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5f56:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    5f5a:	4965      	ldr	r1, [pc, #404]	; (60f0 <event_connection_prepare+0x5c0>)
		ticker_status =
    5f5c:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f5e:	441a      	add	r2, r3
    5f60:	4613      	mov	r3, r2
    5f62:	4a64      	ldr	r2, [pc, #400]	; (60f4 <event_connection_prepare+0x5c4>)
		ticker_status =
    5f64:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f66:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    5f6a:	bf38      	it	cc
    5f6c:	460a      	movcc	r2, r1
    5f6e:	3607      	adds	r6, #7
		ticker_status =
    5f70:	f641 718b 	movw	r1, #8075	; 0x1f8b
    5f74:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5f76:	b2f6      	uxtb	r6, r6
		ticker_status =
    5f78:	495b      	ldr	r1, [pc, #364]	; (60e8 <event_connection_prepare+0x5b8>)
    5f7a:	9107      	str	r1, [sp, #28]
    5f7c:	9205      	str	r2, [sp, #20]
    5f7e:	9406      	str	r4, [sp, #24]
    5f80:	f8cd 800c 	str.w	r8, [sp, #12]
    5f84:	9501      	str	r5, [sp, #4]
    5f86:	9700      	str	r7, [sp, #0]
    5f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5f8a:	4632      	mov	r2, r6
    5f8c:	4641      	mov	r1, r8
    5f8e:	4640      	mov	r0, r8
    5f90:	f7fd f876 	bl	3080 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5f94:	f030 0002 	bics.w	r0, r0, #2
    5f98:	f47f add3 	bne.w	5b42 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    5f9c:	f1b9 0f00 	cmp.w	r9, #0
    5fa0:	f43f aea4 	beq.w	5cec <event_connection_prepare+0x1bc>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5fa4:	2201      	movs	r2, #1
    5fa6:	4611      	mov	r1, r2
}
    5fa8:	b00f      	add	sp, #60	; 0x3c
    5faa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    5fae:	f7fc ba95 	b.w	24dc <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    5fb2:	fb0a 3212 	mls	r2, sl, r2, r3
    5fb6:	b292      	uxth	r2, r2
    5fb8:	fba2 0101 	umull	r0, r1, r2, r1
    5fbc:	f240 1323 	movw	r3, #291	; 0x123
    5fc0:	fb03 1102 	mla	r1, r3, r2, r1
    5fc4:	a342      	add	r3, pc, #264	; (adr r3, 60d0 <event_connection_prepare+0x5a0>)
    5fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
    5fca:	f7fa f94d 	bl	268 <__aeabi_uldivmod>
    5fce:	eba8 0300 	sub.w	r3, r8, r0
    5fd2:	e70f      	b.n	5df4 <event_connection_prepare+0x2c4>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    5fd4:	990c      	ldr	r1, [sp, #48]	; 0x30
    5fd6:	a33e      	add	r3, pc, #248	; (adr r3, 60d0 <event_connection_prepare+0x5a0>)
    5fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    5fdc:	fba1 010b 	umull	r0, r1, r1, fp
    5fe0:	f7fa f942 	bl	268 <__aeabi_uldivmod>
    5fe4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    5fe8:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    5fea:	4635      	mov	r5, r6
    5fec:	e75c      	b.n	5ea8 <event_connection_prepare+0x378>
	if (conn->llcp.chan_map.initiate) {
    5fee:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    5ff2:	b30b      	cbz	r3, 6038 <event_connection_prepare+0x508>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    5ff4:	4840      	ldr	r0, [pc, #256]	; (60f8 <event_connection_prepare+0x5c8>)
    5ff6:	f7fc f9e0 	bl	23ba <mem_acquire>
		if (node_tx) {
    5ffa:	4605      	mov	r5, r0
    5ffc:	2800      	cmp	r0, #0
    5ffe:	f43f ae38 	beq.w	5c72 <event_connection_prepare+0x142>
			conn->llcp.chan_map.initiate = 0;
    6002:	2300      	movs	r3, #0
    6004:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    6008:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    600a:	3306      	adds	r3, #6
    600c:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    600e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6012:	7903      	ldrb	r3, [r0, #4]
    6014:	f043 0303 	orr.w	r3, r3, #3
    6018:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    601a:	2308      	movs	r3, #8
    601c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    601e:	2301      	movs	r3, #1
    6020:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    6022:	2205      	movs	r2, #5
    6024:	f104 0161 	add.w	r1, r4, #97	; 0x61
    6028:	3008      	adds	r0, #8
    602a:	f7fa fad1 	bl	5d0 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    602e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    6032:	f8a5 300d 	strh.w	r3, [r5, #13]
    6036:	e618      	b.n	5c6a <event_connection_prepare+0x13a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    6038:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    603c:	1af3      	subs	r3, r6, r3
    603e:	0419      	lsls	r1, r3, #16
    6040:	f53f ae17 	bmi.w	5c72 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    6044:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6048:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    604c:	f104 0517 	add.w	r5, r4, #23
    6050:	2205      	movs	r2, #5
    6052:	f104 0161 	add.w	r1, r4, #97	; 0x61
    6056:	4628      	mov	r0, r5
    6058:	f7fa faba 	bl	5d0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    605c:	2105      	movs	r1, #5
    605e:	4628      	mov	r0, r5
    6060:	f7fc fb44 	bl	26ec <util_ones_count_get>
		conn->data_chan_count =
    6064:	7f63      	ldrb	r3, [r4, #29]
    6066:	f360 0305 	bfi	r3, r0, #0, #6
    606a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    606c:	2301      	movs	r3, #1
    606e:	7723      	strb	r3, [r4, #28]
    6070:	e5ff      	b.n	5c72 <event_connection_prepare+0x142>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6072:	4821      	ldr	r0, [pc, #132]	; (60f8 <event_connection_prepare+0x5c8>)
    6074:	f7fc f9a1 	bl	23ba <mem_acquire>
	if (node_tx) {
    6078:	4605      	mov	r5, r0
    607a:	2800      	cmp	r0, #0
    607c:	f43f adf9 	beq.w	5c72 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    6080:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6084:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    6088:	4b1c      	ldr	r3, [pc, #112]	; (60fc <event_connection_prepare+0x5cc>)
    608a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    608e:	7903      	ldrb	r3, [r0, #4]
    6090:	f043 0303 	orr.w	r3, r3, #3
    6094:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    6096:	2309      	movs	r3, #9
    6098:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    609a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    609e:	2b00      	cmp	r3, #0
    60a0:	bfac      	ite	ge
    60a2:	2308      	movge	r3, #8
    60a4:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    60a6:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    60a8:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    60aa:	2100      	movs	r1, #0
    60ac:	4410      	add	r0, r2
    60ae:	f7fa fabb 	bl	628 <memset>
			conn->llcp_features & 0xFF;
    60b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    60b6:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    60b8:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    60ba:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    60bc:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    60be:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    60c0:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    60c2:	4620      	mov	r0, r4
    60c4:	f7ff fca6 	bl	5a14 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    60c8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    60ca:	86a3      	strh	r3, [r4, #52]	; 0x34
    60cc:	e5d1      	b.n	5c72 <event_connection_prepare+0x142>
    60ce:	bf00      	nop
    60d0:	1afd498d 	.word	0x1afd498d
    60d4:	00000007 	.word	0x00000007
    60d8:	09ce5400 	.word	0x09ce5400
    60dc:	0000b84a 	.word	0x0000b84a
    60e0:	000f4240 	.word	0x000f4240
    60e4:	026259ff 	.word	0x026259ff
    60e8:	00005381 	.word	0x00005381
    60ec:	1afd498d 	.word	0x1afd498d
    60f0:	000061a9 	.word	0x000061a9
    60f4:	000061ad 	.word	0x000061ad
    60f8:	2000101c 	.word	0x2000101c
    60fc:	0001400c 	.word	0x0001400c
    6100:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp_version.tx == 0) {
    6104:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6108:	07da      	lsls	r2, r3, #31
    610a:	d424      	bmi.n	6156 <event_connection_prepare+0x626>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    610c:	4825      	ldr	r0, [pc, #148]	; (61a4 <event_connection_prepare+0x674>)
    610e:	f7fc f954 	bl	23ba <mem_acquire>
		if (node_tx) {
    6112:	4601      	mov	r1, r0
    6114:	2800      	cmp	r0, #0
    6116:	f43f adac 	beq.w	5c72 <event_connection_prepare+0x142>
			conn->llcp_ack = conn->llcp_req;
    611a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    611e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    6122:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6126:	f043 0301 	orr.w	r3, r3, #1
    612a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    612e:	7903      	ldrb	r3, [r0, #4]
    6130:	f043 0303 	orr.w	r3, r3, #3
    6134:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    6136:	2306      	movs	r3, #6
    6138:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    613a:	230c      	movs	r3, #12
    613c:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    613e:	2309      	movs	r3, #9
    6140:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    6142:	f06f 030e 	mvn.w	r3, #14
    6146:	7243      	strb	r3, [r0, #9]
    6148:	2305      	movs	r3, #5
    614a:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    614c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6150:	72c3      	strb	r3, [r0, #11]
    6152:	7303      	strb	r3, [r0, #12]
    6154:	e7b5      	b.n	60c2 <event_connection_prepare+0x592>
	} else if (conn->llcp_version.rx != 0) {
    6156:	079b      	lsls	r3, r3, #30
    6158:	f57f acf3 	bpl.w	5b42 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    615c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6160:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    6164:	2002      	movs	r0, #2
    6166:	f7fd ffd9 	bl	411c <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    616a:	2800      	cmp	r0, #0
    616c:	f43f ace9 	beq.w	5b42 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    6170:	8c23      	ldrh	r3, [r4, #32]
    6172:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6174:	2301      	movs	r3, #1
    6176:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    6178:	7a03      	ldrb	r3, [r0, #8]
    617a:	f043 0303 	orr.w	r3, r3, #3
    617e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    6180:	2306      	movs	r3, #6
    6182:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    6184:	230c      	movs	r3, #12
    6186:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    6188:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    618c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    618e:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    6192:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    6196:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    619a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    619e:	f7fe fe35 	bl	4e0c <packet_rx_enqueue>
    61a2:	e566      	b.n	5c72 <event_connection_prepare+0x142>
    61a4:	2000101c 	.word	0x2000101c

000061a8 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    61a8:	f7ff bcc2 	b.w	5b30 <event_connection_prepare>

000061ac <event_slave_prepare>:
    61ac:	f7ff bcc0 	b.w	5b30 <event_connection_prepare>

000061b0 <connection_configure>:
{
    61b0:	b510      	push	{r4, lr}
    61b2:	4604      	mov	r4, r0
	radio_reset();
    61b4:	f003 fc30 	bl	9a18 <radio_reset>
	radio_tx_power_set(0);
    61b8:	2000      	movs	r0, #0
    61ba:	f003 fc57 	bl	9a6c <radio_tx_power_set>
	radio_isr_set(isr);
    61be:	480a      	ldr	r0, [pc, #40]	; (61e8 <connection_configure+0x38>)
    61c0:	f003 fbf4 	bl	99ac <radio_isr_set>
	radio_aa_set(conn->access_addr);
    61c4:	f104 0010 	add.w	r0, r4, #16
    61c8:	f003 fc6e 	bl	9aa8 <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    61cc:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    61ce:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    61d0:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    61d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    61d6:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    61d8:	f240 605b 	movw	r0, #1627	; 0x65b
    61dc:	4319      	orrs	r1, r3
}
    61de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    61e2:	f003 bd09 	b.w	9bf8 <radio_crc_configure>
    61e6:	bf00      	nop
    61e8:	00006431 	.word	0x00006431

000061ec <event_slave>:
{
    61ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    61f0:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    61f2:	4b5a      	ldr	r3, [pc, #360]	; (635c <event_slave+0x170>)
    61f4:	7cda      	ldrb	r2, [r3, #19]
{
    61f6:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    61f8:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    61fc:	461d      	mov	r5, r3
    61fe:	b12a      	cbz	r2, 620c <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6200:	4040      	eors	r0, r0
    6202:	f380 8811 	msr	BASEPRI, r0
    6206:	f04f 0004 	mov.w	r0, #4
    620a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    620c:	7c1a      	ldrb	r2, [r3, #16]
    620e:	8c23      	ldrh	r3, [r4, #32]
    6210:	b2d2      	uxtb	r2, r2
    6212:	3307      	adds	r3, #7
    6214:	429a      	cmp	r2, r3
    6216:	d1f3      	bne.n	6200 <event_slave+0x14>
	_radio.role = ROLE_SLAVE;
    6218:	2303      	movs	r3, #3
    621a:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    621c:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
    6220:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	_radio.state = STATE_RX;
    6224:	2301      	movs	r3, #1
    6226:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    6228:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    622a:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    622e:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    6230:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    6232:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    6234:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    6236:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    6238:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    623a:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    623c:	f7ff ffb8 	bl	61b0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    6240:	2096      	movs	r0, #150	; 0x96
    6242:	f003 fd87 	bl	9d54 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6246:	4633      	mov	r3, r6
    6248:	4632      	mov	r2, r6
    624a:	4631      	mov	r1, r6
    624c:	4630      	mov	r0, r6
    624e:	f003 fcfd 	bl	9c4c <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6252:	f895 2d21 	ldrb.w	r2, [r5, #3361]	; 0xd21
    6256:	f8d5 3d1c 	ldr.w	r3, [r5, #3356]	; 0xd1c
    625a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    625e:	4620      	mov	r0, r4
    6260:	3108      	adds	r1, #8
    6262:	f7fe fd0f 	bl	4c84 <rx_packet_set>
	if (conn->data_chan_sel) {
    6266:	7f63      	ldrb	r3, [r4, #29]
    6268:	f013 0f40 	tst.w	r3, #64	; 0x40
    626c:	f104 0217 	add.w	r2, r4, #23
    6270:	d04a      	beq.n	6308 <event_slave+0x11c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    6272:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    6274:	8be1      	ldrh	r1, [r4, #30]
    6276:	3801      	subs	r0, #1
    6278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    627c:	b280      	uxth	r0, r0
    627e:	f7ff fac1 	bl	5804 <chan_sel_2>
	chan_set(data_chan_use);
    6282:	f7fe f8f5 	bl	4470 <chan_set>
	conn->slave.window_widening_event_us +=
    6286:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6288:	6c62      	ldr	r2, [r4, #68]	; 0x44
    628a:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    628c:	2200      	movs	r2, #0
    628e:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    6290:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    6292:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    6294:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    6296:	bf88      	it	hi
    6298:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    629a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    629c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    629e:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    62a0:	4413      	add	r3, r2
    62a2:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    62a4:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    62a6:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    62a8:	f107 0109 	add.w	r1, r7, #9
    62ac:	4630      	mov	r0, r6
    62ae:	f003 fd5d 	bl	9d6c <radio_tmr_start>
    62b2:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    62b4:	f003 fdf6 	bl	9ea4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    62b8:	4630      	mov	r0, r6
    62ba:	f003 fe15 	bl	9ee8 <radio_tmr_aa_save>
    62be:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    62c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    62c2:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    62c4:	4631      	mov	r1, r6
    62c6:	4630      	mov	r0, r6
    62c8:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    62cc:	f003 fc45 	bl	9b5a <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    62d0:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    62d2:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    62d4:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    62d6:	4630      	mov	r0, r6
    62d8:	f003 fc41 	bl	9b5e <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    62dc:	4440      	add	r0, r8
    62de:	f003 fdc3 	bl	9e68 <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    62e2:	f894 1020 	ldrb.w	r1, [r4, #32]
    62e6:	3107      	adds	r1, #7
    62e8:	463a      	mov	r2, r7
    62ea:	b2c9      	uxtb	r1, r1
    62ec:	4620      	mov	r0, r4
    62ee:	f7ff facd 	bl	588c <preempt_calc>
    62f2:	4603      	mov	r3, r0
    62f4:	b340      	cbz	r0, 6348 <event_slave+0x15c>
		_radio.state = STATE_STOP;
    62f6:	2304      	movs	r3, #4
    62f8:	752b      	strb	r3, [r5, #20]
		radio_disable();
    62fa:	f003 fc41 	bl	9b80 <radio_disable>
	packet_tx_enqueue(2);
    62fe:	2002      	movs	r0, #2
}
    6300:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    6304:	f7fe beca 	b.w	509c <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    6308:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    630a:	7fa6      	ldrb	r6, [r4, #30]
    630c:	fb01 6606 	mla	r6, r1, r6, r6
    6310:	7fe1      	ldrb	r1, [r4, #31]
    6312:	2025      	movs	r0, #37	; 0x25
    6314:	440e      	add	r6, r1
    6316:	fb96 f1f0 	sdiv	r1, r6, r0
    631a:	fb00 6611 	mls	r6, r0, r1, r6
    631e:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6320:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    6322:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6324:	5c51      	ldrb	r1, [r2, r1]
    6326:	f006 0607 	and.w	r6, r6, #7
    632a:	fa41 f606 	asr.w	r6, r1, r6
    632e:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    6330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6334:	d4a5      	bmi.n	6282 <event_slave+0x96>
		chan_index = chan_next % chan_count;
    6336:	fbb0 f1f3 	udiv	r1, r0, r3
    633a:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    633e:	b2c9      	uxtb	r1, r1
    6340:	4610      	mov	r0, r2
    6342:	f7fd fecf 	bl	40e4 <chan_sel_remap>
    6346:	e79c      	b.n	6282 <event_slave+0x96>
		ticker_status =
    6348:	4a05      	ldr	r2, [pc, #20]	; (6360 <event_slave+0x174>)
    634a:	4601      	mov	r1, r0
    634c:	f7fc ffb4 	bl	32b8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6350:	f030 0302 	bics.w	r3, r0, #2
    6354:	f47f af54 	bne.w	6200 <event_slave+0x14>
    6358:	e7d1      	b.n	62fe <event_slave+0x112>
    635a:	bf00      	nop
    635c:	200002e0 	.word	0x200002e0
    6360:	00004bf9 	.word	0x00004bf9

00006364 <prepare_pdu_data_tx>:
{
    6364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    6366:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    636a:	061a      	lsls	r2, r3, #24
{
    636c:	4604      	mov	r4, r0
    636e:	460f      	mov	r7, r1
	if (/* empty packet */
    6370:	d409      	bmi.n	6386 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    6372:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    6376:	b135      	cbz	r5, 6386 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    6378:	f013 0f08 	tst.w	r3, #8
    637c:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    6380:	d022      	beq.n	63c8 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    6382:	4575      	cmp	r5, lr
    6384:	d020      	beq.n	63c8 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    6386:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    638e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    6392:	f003 fc47 	bl	9c24 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6396:	7803      	ldrb	r3, [r0, #0]
    6398:	2201      	movs	r2, #1
    639a:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    639e:	2200      	movs	r2, #0
    63a0:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    63a2:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    63a6:	7003      	strb	r3, [r0, #0]
    63a8:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    63aa:	b152      	cbz	r2, 63c2 <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    63ac:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    63b0:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    63b2:	7803      	ldrb	r3, [r0, #0]
    63b4:	f36f 1347 	bfc	r3, #5, #3
    63b8:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    63ba:	2300      	movs	r3, #0
    63bc:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    63be:	6038      	str	r0, [r7, #0]
    63c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    63c2:	f362 1304 	bfi	r3, r2, #4, #1
    63c6:	e7f3      	b.n	63b0 <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    63c8:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    63cc:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    63d0:	1d2a      	adds	r2, r5, #4
    63d2:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    63d4:	b911      	cbnz	r1, 63dc <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    63d6:	7841      	ldrb	r1, [r0, #1]
    63d8:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    63dc:	b123      	cbz	r3, 63e8 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    63de:	5cd1      	ldrb	r1, [r2, r3]
    63e0:	2601      	movs	r6, #1
    63e2:	f366 0101 	bfi	r1, r6, #0, #2
    63e6:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    63e8:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    63ec:	1af6      	subs	r6, r6, r3
    63ee:	b2f6      	uxtb	r6, r6
    63f0:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    63f2:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    63f4:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    63f6:	f36f 1104 	bfc	r1, #4, #1
    63fa:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    63fc:	d905      	bls.n	640a <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    63fe:	211b      	movs	r1, #27
    6400:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    6402:	5cd1      	ldrb	r1, [r2, r3]
    6404:	f041 0110 	orr.w	r1, r1, #16
    6408:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    640a:	6829      	ldr	r1, [r5, #0]
    640c:	b119      	cbz	r1, 6416 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    640e:	5cd1      	ldrb	r1, [r2, r3]
    6410:	f041 0110 	orr.w	r1, r1, #16
    6414:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    6416:	f1be 0f00 	cmp.w	lr, #0
    641a:	d1ca      	bne.n	63b2 <prepare_pdu_data_tx+0x4e>
    641c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6420:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    6422:	bf1c      	itt	ne
    6424:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    6428:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    642c:	e7c1      	b.n	63b2 <prepare_pdu_data_tx+0x4e>
	...

00006430 <isr>:
{
    6430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6434:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    6436:	f003 fbcb 	bl	9bd0 <radio_is_done>
    643a:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    643c:	b336      	cbz	r6, 648c <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    643e:	f003 fbe7 	bl	9c10 <radio_crc_is_valid>
    6442:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    6444:	f003 fc68 	bl	9d18 <radio_filter_has_match>
    6448:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    644a:	f003 fc6f 	bl	9d2c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    644e:	f003 fe17 	bl	a080 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    6452:	f003 fe03 	bl	a05c <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    6456:	f003 fc29 	bl	9cac <radio_rssi_is_ready>
    645a:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    645c:	f003 fba2 	bl	9ba4 <radio_status_reset>
	radio_tmr_status_reset();
    6460:	f003 fc6a 	bl	9d38 <radio_tmr_status_reset>
	radio_filter_status_reset();
    6464:	f003 fc50 	bl	9d08 <radio_filter_status_reset>
	radio_ar_status_reset();
    6468:	f003 fdfe 	bl	a068 <radio_ar_status_reset>
	radio_rssi_status_reset();
    646c:	f003 fc16 	bl	9c9c <radio_rssi_status_reset>
	switch (_radio.state) {
    6470:	4a6e      	ldr	r2, [pc, #440]	; (662c <isr+0x1fc>)
    6472:	7d13      	ldrb	r3, [r2, #20]
    6474:	4693      	mov	fp, r2
    6476:	2b05      	cmp	r3, #5
    6478:	f201 8331 	bhi.w	7ade <isr+0x16ae>
    647c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6480:	00890061 	.word	0x00890061
    6484:	0969000a 	.word	0x0969000a
    6488:	09690969 	.word	0x09690969
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    648c:	4635      	mov	r5, r6
    648e:	4634      	mov	r4, r6
    6490:	4637      	mov	r7, r6
    6492:	e7e3      	b.n	645c <isr+0x2c>
	_radio.state = STATE_RX;
    6494:	2301      	movs	r3, #1
    6496:	f88b 3014 	strb.w	r3, [fp, #20]
	hcto = radio_tmr_tifs_base_get() + 600
    649a:	f003 fd4f 	bl	9f3c <radio_tmr_tifs_base_get>
    649e:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    64a0:	2096      	movs	r0, #150	; 0x96
    64a2:	f003 fc57 	bl	9d54 <radio_tmr_tifs_set>
	switch (_radio.role) {
    64a6:	f89b 3013 	ldrb.w	r3, [fp, #19]
    64aa:	3b01      	subs	r3, #1
    64ac:	f204 341b 	addw	r4, r4, #795	; 0x31b
    64b0:	2b03      	cmp	r3, #3
    64b2:	d811      	bhi.n	64d8 <isr+0xa8>
    64b4:	e8df f003 	tbb	[pc, r3]
    64b8:	48482402 	.word	0x48482402
		radio_switch_complete_and_tx(0, 0, 0, 0);
    64bc:	2300      	movs	r3, #0
    64be:	461a      	mov	r2, r3
    64c0:	4619      	mov	r1, r3
    64c2:	4618      	mov	r0, r3
    64c4:	f003 fbc2 	bl	9c4c <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    64c8:	f003 fbb0 	bl	9c2c <radio_pkt_scratch_get>
    64cc:	f003 fb32 	bl	9b34 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    64d0:	f003 fb74 	bl	9bbc <radio_is_ready>
    64d4:	4605      	mov	r5, r0
    64d6:	b128      	cbz	r0, 64e4 <isr+0xb4>
	LL_ASSERT(!retval);
    64d8:	4040      	eors	r0, r0
    64da:	f380 8811 	msr	BASEPRI, r0
    64de:	f04f 0004 	mov.w	r0, #4
    64e2:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    64e4:	4601      	mov	r1, r0
    64e6:	f003 fb3a 	bl	9b5e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    64ea:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    64ec:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    64ee:	4628      	mov	r0, r5
    64f0:	f003 fb31 	bl	9b56 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    64f4:	1a20      	subs	r0, r4, r0
    64f6:	f003 fcb7 	bl	9e68 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    64fa:	f003 fd07 	bl	9f0c <radio_tmr_end_capture>
    64fe:	e020      	b.n	6542 <isr+0x112>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6500:	2300      	movs	r3, #0
    6502:	4619      	mov	r1, r3
    6504:	461a      	mov	r2, r3
    6506:	4618      	mov	r0, r3
    6508:	f003 fba0 	bl	9c4c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    650c:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    6510:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
		radio_pkt_rx_set(_radio.packet_rx
    6514:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6518:	3008      	adds	r0, #8
    651a:	f003 fb0b 	bl	9b34 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    651e:	f003 fb4d 	bl	9bbc <radio_is_ready>
    6522:	4605      	mov	r5, r0
    6524:	2800      	cmp	r0, #0
    6526:	d1d7      	bne.n	64d8 <isr+0xa8>
		hcto += radio_rx_chain_delay_get(0, 0);
    6528:	4601      	mov	r1, r0
    652a:	f003 fb18 	bl	9b5e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    652e:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6530:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6532:	4628      	mov	r0, r5
    6534:	f003 fb0f 	bl	9b56 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6538:	1a20      	subs	r0, r4, r0
    653a:	f003 fc95 	bl	9e68 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    653e:	f003 fb9d 	bl	9c7c <radio_rssi_measure>
}
    6542:	b00f      	add	sp, #60	; 0x3c
    6544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6548:	2300      	movs	r3, #0
    654a:	461a      	mov	r2, r3
    654c:	4619      	mov	r1, r3
    654e:	4618      	mov	r0, r3
    6550:	f003 fb7c 	bl	9c4c <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6554:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    6558:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
		rx_packet_set(_radio.conn_curr,	(void *)
    655c:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    6564:	3108      	adds	r1, #8
    6566:	f7fe fb8d 	bl	4c84 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    656a:	f003 fb27 	bl	9bbc <radio_is_ready>
    656e:	4605      	mov	r5, r0
    6570:	2800      	cmp	r0, #0
    6572:	d1b1      	bne.n	64d8 <isr+0xa8>
		hcto += radio_rx_chain_delay_get(0, 0);
    6574:	4601      	mov	r1, r0
    6576:	f003 faf2 	bl	9b5e <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    657a:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    657c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    657e:	4628      	mov	r0, r5
    6580:	f003 fae9 	bl	9b56 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6584:	1a20      	subs	r0, r4, r0
    6586:	f003 fc6f 	bl	9e68 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    658a:	2001      	movs	r0, #1
    658c:	f7fe fd86 	bl	509c <packet_tx_enqueue>
    6590:	e7d7      	b.n	6542 <isr+0x112>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    6592:	b92e      	cbnz	r6, 65a0 <isr+0x170>
		_radio.state = STATE_CLOSE;
    6594:	2303      	movs	r3, #3
    6596:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    659a:	f003 faf1 	bl	9b80 <radio_disable>
    659e:	e7d0      	b.n	6542 <isr+0x112>
	switch (_radio.role) {
    65a0:	f89b 3013 	ldrb.w	r3, [fp, #19]
    65a4:	3b01      	subs	r3, #1
    65a6:	2b03      	cmp	r3, #3
    65a8:	d896      	bhi.n	64d8 <isr+0xa8>
    65aa:	e8df f013 	tbh	[pc, r3, lsl #1]
    65ae:	0004      	.short	0x0004
    65b0:	05120209 	.word	0x05120209
    65b4:	0512      	.short	0x0512
		if (crc_ok) {
    65b6:	2f00      	cmp	r7, #0
    65b8:	d0ec      	beq.n	6594 <isr+0x164>
	pdu_adv = (void *)radio_pkt_scratch_get();
    65ba:	f003 fb37 	bl	9c2c <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    65be:	f89b 922d 	ldrb.w	r9, [fp, #557]	; 0x22d
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    65c2:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    65c4:	eb09 2909 	add.w	r9, r9, r9, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    65c8:	f002 030f 	and.w	r3, r2, #15
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    65cc:	f109 092b 	add.w	r9, r9, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    65d0:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    65d2:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    65d4:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    65d8:	d12a      	bne.n	6630 <isr+0x200>
    65da:	7843      	ldrb	r3, [r0, #1]
    65dc:	2b0c      	cmp	r3, #12
    65de:	d127      	bne.n	6630 <isr+0x200>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    65e0:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    65e4:	07d9      	lsls	r1, r3, #31
    65e6:	d500      	bpl.n	65ea <isr+0x1ba>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    65e8:	b314      	cbz	r4, 6630 <isr+0x200>
	return (adv->tx_addr == sr->rx_addr) &&
    65ea:	f81b 3009 	ldrb.w	r3, [fp, r9]
    65ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
    65f2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    65f6:	d11b      	bne.n	6630 <isr+0x200>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    65f8:	2206      	movs	r2, #6
    65fa:	f107 0108 	add.w	r1, r7, #8
    65fe:	1ca8      	adds	r0, r5, #2
    6600:	f7f9 ffd1 	bl	5a6 <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    6604:	b9a0      	cbnz	r0, 6630 <isr+0x200>
		_radio.state = STATE_CLOSE;
    6606:	2303      	movs	r3, #3
    6608:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_switch_complete_and_disable();
    660c:	f003 fb28 	bl	9c60 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    6610:	f89b 0c13 	ldrb.w	r0, [fp, #3091]	; 0xc13
    6614:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    6618:	f600 2011 	addw	r0, r0, #2577	; 0xa11
    661c:	4458      	add	r0, fp
    661e:	f003 fa8f 	bl	9b40 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    6622:	f003 facb 	bl	9bbc <radio_is_ready>
    6626:	2800      	cmp	r0, #0
    6628:	d08b      	beq.n	6542 <isr+0x112>
    662a:	e755      	b.n	64d8 <isr+0xa8>
    662c:	200002e0 	.word	0x200002e0
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    6630:	783b      	ldrb	r3, [r7, #0]
    6632:	f003 030f 	and.w	r3, r3, #15
    6636:	2b05      	cmp	r3, #5
    6638:	d1ac      	bne.n	6594 <isr+0x164>
    663a:	787b      	ldrb	r3, [r7, #1]
    663c:	2b22      	cmp	r3, #34	; 0x22
    663e:	d1a9      	bne.n	6594 <isr+0x164>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    6640:	f81b 3009 	ldrb.w	r3, [fp, r9]
    6644:	f003 030f 	and.w	r3, r3, #15
    6648:	2b01      	cmp	r3, #1
    664a:	f040 8192 	bne.w	6972 <isr+0x542>
		       isr_adv_ci_adva_check(adv, ci) &&
    664e:	4639      	mov	r1, r7
    6650:	4628      	mov	r0, r5
    6652:	f7fe fa93 	bl	4b7c <isr_adv_ci_adva_check>
    6656:	b188      	cbz	r0, 667c <isr+0x24c>
	return (adv->rx_addr == ci->tx_addr) &&
    6658:	783b      	ldrb	r3, [r7, #0]
    665a:	f81b 2009 	ldrb.w	r2, [fp, r9]
    665e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6662:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6666:	f040 8182 	bne.w	696e <isr+0x53e>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    666a:	2206      	movs	r2, #6
    666c:	1cb9      	adds	r1, r7, #2
    666e:	f105 0008 	add.w	r0, r5, #8
    6672:	f7f9 ff98 	bl	5a6 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    6676:	fab0 f080 	clz	r0, r0
    667a:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    667c:	2800      	cmp	r0, #0
    667e:	d089      	beq.n	6594 <isr+0x164>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    6680:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    6684:	b12b      	cbz	r3, 6692 <isr+0x262>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    6686:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
    668a:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    668e:	429a      	cmp	r2, r3
    6690:	d180      	bne.n	6594 <isr+0x164>
    6692:	f8db 3c18 	ldr.w	r3, [fp, #3096]	; 0xc18
    6696:	2b00      	cmp	r3, #0
    6698:	f43f af7c 	beq.w	6594 <isr+0x164>
			node_rx = packet_rx_reserve_get(4);
    669c:	2004      	movs	r0, #4
    669e:	f7fd fd3d 	bl	411c <packet_rx_reserve_get>
		if (!node_rx) {
    66a2:	4605      	mov	r5, r0
    66a4:	2800      	cmp	r0, #0
    66a6:	f43f af75 	beq.w	6594 <isr+0x164>
		_radio.state = STATE_STOP;
    66aa:	f04f 0a04 	mov.w	sl, #4
    66ae:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    66b2:	f003 fa65 	bl	9b80 <radio_disable>
		conn = _radio.advertiser.conn;
    66b6:	f8db 4c18 	ldr.w	r4, [fp, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    66ba:	f8db 1cf0 	ldr.w	r1, [fp, #3312]	; 0xcf0
		_radio.advertiser.conn = NULL;
    66be:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    66c2:	f44f 7282 	mov.w	r2, #260	; 0x104
    66c6:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    66c8:	f8cb 8c18 	str.w	r8, [fp, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    66cc:	f7fb fea7 	bl	241e <mem_index_get>
		memcpy(&conn->crc_init[0],
    66d0:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    66d2:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    66d4:	f107 0112 	add.w	r1, r7, #18
    66d8:	f104 0014 	add.w	r0, r4, #20
    66dc:	f7f9 ff78 	bl	5d0 <memcpy>
		memcpy(&conn->access_addr[0],
    66e0:	f104 0310 	add.w	r3, r4, #16
    66e4:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    66e6:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    66ea:	4652      	mov	r2, sl
    66ec:	f107 010e 	add.w	r1, r7, #14
    66f0:	930a      	str	r3, [sp, #40]	; 0x28
    66f2:	f7f9 ff6d 	bl	5d0 <memcpy>
		memcpy(&conn->data_chan_map[0],
    66f6:	2205      	movs	r2, #5
    66f8:	f107 011e 	add.w	r1, r7, #30
    66fc:	4630      	mov	r0, r6
    66fe:	f7f9 ff67 	bl	5d0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    6702:	2105      	movs	r1, #5
    6704:	4630      	mov	r0, r6
    6706:	f7fb fff1 	bl	26ec <util_ones_count_get>
		conn->data_chan_count =
    670a:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    670c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    670e:	f360 0205 	bfi	r2, r0, #0, #6
    6712:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    6714:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    6718:	f3c2 0204 	ubfx	r2, r2, #0, #5
    671c:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    671e:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    6720:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    6722:	f240 46e2 	movw	r6, #1250	; 0x4e2
    6726:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    6728:	7ef9      	ldrb	r1, [r7, #27]
    672a:	7eba      	ldrb	r2, [r7, #26]
    672c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6730:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    6732:	4619      	mov	r1, r3
    6734:	4652      	mov	r2, sl
    6736:	f104 0054 	add.w	r0, r4, #84	; 0x54
    673a:	f7f9 ff49 	bl	5d0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    673e:	8bbb      	ldrh	r3, [r7, #28]
    6740:	f242 7210 	movw	r2, #10000	; 0x2710
    6744:	fb02 6303 	mla	r3, r2, r3, r6
    6748:	3b01      	subs	r3, #1
    674a:	fbb3 f3f6 	udiv	r3, r3, r6
    674e:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6750:	4b93      	ldr	r3, [pc, #588]	; (69a0 <isr+0x570>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6752:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    6754:	4433      	add	r3, r6
    6756:	fbb3 f3f6 	udiv	r3, r3, r6
    675a:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    675c:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    675e:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    6762:	f04f 0801 	mov.w	r8, #1
    6766:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    676a:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    676c:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6770:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6772:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6776:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    6778:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    677a:	f105 000e 	add.w	r0, r5, #14
    677e:	f7f9 ff27 	bl	5d0 <memcpy>
			pdu_adv->connect_ind.interval;
    6782:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    6784:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    6786:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    6788:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    678a:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    678c:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    678e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    6792:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    6796:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    6798:	8c20      	ldrh	r0, [r4, #32]
    679a:	f7fe fa13 	bl	4bc4 <rx_fc_lock>
		packet_rx_enqueue();
    679e:	f7fe fb35 	bl	4e0c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    67a2:	2003      	movs	r0, #3
    67a4:	f7fd fcba 	bl	411c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    67a8:	2800      	cmp	r0, #0
    67aa:	f43f ae95 	beq.w	64d8 <isr+0xa8>
			node_rx->hdr.handle = conn->handle;
    67ae:	8c23      	ldrh	r3, [r4, #32]
    67b0:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    67b2:	230a      	movs	r3, #10
    67b4:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    67b6:	783b      	ldrb	r3, [r7, #0]
    67b8:	f013 0320 	ands.w	r3, r3, #32
    67bc:	f000 80e7 	beq.w	698e <isr+0x55e>
					((u16_t)conn->access_addr[1] << 8) |
    67c0:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    67c2:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    67c4:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    67c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    67ca:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    67cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    67d0:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    67d2:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    67d4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    67d8:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    67da:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    67dc:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    67e0:	f7fe fb14 	bl	4e0c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    67e4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    67e8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    67ec:	496d      	ldr	r1, [pc, #436]	; (69a4 <isr+0x574>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    67ee:	0952      	lsrs	r2, r2, #5
    67f0:	f362 0384 	bfi	r3, r2, #2, #3
    67f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    67f8:	f89b 3d08 	ldrb.w	r3, [fp, #3336]	; 0xd08
			   gc_lookup_ppm[conn->slave.sca]) *
    67fc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    6800:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6804:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    6806:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    6808:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    680c:	4a66      	ldr	r2, [pc, #408]	; (69a8 <isr+0x578>)
    680e:	f203 233f 	addw	r3, r3, #575	; 0x23f
    6812:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    6816:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    6818:	0873      	lsrs	r3, r6, #1
    681a:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    681c:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    681e:	7d7b      	ldrb	r3, [r7, #21]
    6820:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    6824:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    6828:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    682c:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    682e:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    6830:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    6834:	4640      	mov	r0, r8
    6836:	f003 f990 	bl	9b5a <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    683a:	495c      	ldr	r1, [pc, #368]	; (69ac <isr+0x57c>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    683c:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    683e:	f200 4052 	addw	r0, r0, #1106	; 0x452
    6842:	a355      	add	r3, pc, #340	; (adr r3, 6998 <isr+0x568>)
    6844:	e9d3 2300 	ldrd	r2, r3, [r3]
    6848:	fba0 0101 	umull	r0, r1, r0, r1
    684c:	f7f9 fd0c 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6850:	f8db 5d64 	ldr.w	r5, [fp, #3428]	; 0xd64
    6854:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    6856:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    6858:	429d      	cmp	r5, r3
    685a:	bf38      	it	cc
    685c:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    685e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    6862:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    6864:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    6866:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    6868:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    686c:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    686e:	f003 fb5f 	bl	9f30 <radio_tmr_end_get>
    6872:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    6874:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    6876:	4641      	mov	r1, r8
		conn_offset_us +=
    6878:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    687c:	4640      	mov	r0, r8
    687e:	f003 f96a 	bl	9b56 <radio_tx_chain_delay_get>
    6882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6884:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    6888:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    688a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    688c:	ebaa 0a00 	sub.w	sl, sl, r0
    6890:	ebaa 0303 	sub.w	r3, sl, r3
    6894:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6896:	f240 532d 	movw	r3, #1325	; 0x52d
    689a:	9300      	str	r3, [sp, #0]
    689c:	2205      	movs	r2, #5
    689e:	4b44      	ldr	r3, [pc, #272]	; (69b0 <isr+0x580>)
    68a0:	f8df a108 	ldr.w	sl, [pc, #264]	; 69ac <isr+0x57c>
    68a4:	4641      	mov	r1, r8
    68a6:	4640      	mov	r0, r8
    68a8:	f7fc fc88 	bl	31bc <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    68ac:	f240 512e 	movw	r1, #1326	; 0x52e
    68b0:	f7fe fd4e 	bl	5350 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    68b4:	f81b 3009 	ldrb.w	r3, [fp, r9]
    68b8:	f003 030f 	and.w	r3, r3, #15
    68bc:	2b01      	cmp	r3, #1
    68be:	d107      	bne.n	68d0 <isr+0x4a0>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    68c0:	f8cd 8000 	str.w	r8, [sp]
    68c4:	4643      	mov	r3, r8
    68c6:	2203      	movs	r2, #3
    68c8:	4641      	mov	r1, r8
    68ca:	4640      	mov	r0, r8
    68cc:	f7fc fc76 	bl	31bc <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    68d0:	fba6 670a 	umull	r6, r7, r6, sl
    68d4:	a330      	add	r3, pc, #192	; (adr r3, 6998 <isr+0x568>)
    68d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    68da:	4630      	mov	r0, r6
    68dc:	4639      	mov	r1, r7
    68de:	f7f9 fcc3 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    68e2:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    68e6:	4a33      	ldr	r2, [pc, #204]	; (69b4 <isr+0x584>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    68e8:	eba3 0b05 	sub.w	fp, r3, r5
    68ec:	f894 3020 	ldrb.w	r3, [r4, #32]
    68f0:	9406      	str	r4, [sp, #24]
    68f2:	3307      	adds	r3, #7
    68f4:	b2db      	uxtb	r3, r3
    68f6:	930b      	str	r3, [sp, #44]	; 0x2c
    68f8:	f240 5345 	movw	r3, #1349	; 0x545
    68fc:	9308      	str	r3, [sp, #32]
    68fe:	4b2e      	ldr	r3, [pc, #184]	; (69b8 <isr+0x588>)
    6900:	9307      	str	r3, [sp, #28]
    6902:	4b2e      	ldr	r3, [pc, #184]	; (69bc <isr+0x58c>)
    6904:	9305      	str	r3, [sp, #20]
    6906:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6908:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    690a:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    690c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6910:	2307      	movs	r3, #7
    6912:	2100      	movs	r1, #0
    6914:	4343      	muls	r3, r0
    6916:	fb02 3301 	mla	r3, r2, r1, r3
    691a:	fba0 0102 	umull	r0, r1, r0, r2
    691e:	1a30      	subs	r0, r6, r0
    6920:	4419      	add	r1, r3
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6922:	f04f 0400 	mov.w	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    6926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    692a:	f04f 0300 	mov.w	r3, #0
    692e:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6932:	9504      	str	r5, [sp, #16]
    6934:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    6936:	f7f9 fc97 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    693a:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    693c:	9002      	str	r0, [sp, #8]
    693e:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    6942:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    6944:	fba1 010a 	umull	r0, r1, r1, sl
    6948:	a313      	add	r3, pc, #76	; (adr r3, 6998 <isr+0x568>)
    694a:	e9d3 2300 	ldrd	r2, r3, [r3]
    694e:	f7f9 fc8b 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6952:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6954:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6958:	9000      	str	r0, [sp, #0]
    695a:	465b      	mov	r3, fp
    695c:	4621      	mov	r1, r4
		ticker_status =
    695e:	4608      	mov	r0, r1
    6960:	f7fc fb8e 	bl	3080 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6964:	f030 0302 	bics.w	r3, r0, #2
    6968:	f47f adb6 	bne.w	64d8 <isr+0xa8>
    696c:	e5e9      	b.n	6542 <isr+0x112>
	return (adv->rx_addr == ci->tx_addr) &&
    696e:	2000      	movs	r0, #0
    6970:	e684      	b.n	667c <isr+0x24c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    6972:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    6976:	079b      	lsls	r3, r3, #30
    6978:	d500      	bpl.n	697c <isr+0x54c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    697a:	b134      	cbz	r4, 698a <isr+0x55a>
	       isr_adv_ci_adva_check(adv, ci);
    697c:	4639      	mov	r1, r7
    697e:	4628      	mov	r0, r5
    6980:	f7fe f8fc 	bl	4b7c <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    6984:	f000 0001 	and.w	r0, r0, #1
    6988:	e678      	b.n	667c <isr+0x24c>
    698a:	4620      	mov	r0, r4
    698c:	e7fa      	b.n	6984 <isr+0x554>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    698e:	72c3      	strb	r3, [r0, #11]
    6990:	e726      	b.n	67e0 <isr+0x3b0>
    6992:	bf00      	nop
    6994:	f3af 8000 	nop.w
    6998:	1afd498d 	.word	0x1afd498d
    699c:	00000007 	.word	0x00000007
    69a0:	026259ff 	.word	0x026259ff
    69a4:	0000b84a 	.word	0x0000b84a
    69a8:	000f4240 	.word	0x000f4240
    69ac:	3b9aca00 	.word	0x3b9aca00
    69b0:	00005351 	.word	0x00005351
    69b4:	1afd498d 	.word	0x1afd498d
    69b8:	00005381 	.word	0x00005381
    69bc:	000061ad 	.word	0x000061ad
		if (crc_ok &&
    69c0:	2f00      	cmp	r7, #0
    69c2:	f000 8255 	beq.w	6e70 <isr+0xa40>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    69c6:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
    69ca:	06df      	lsls	r7, r3, #27
    69cc:	d502      	bpl.n	69d4 <isr+0x5a4>
		if (crc_ok &&
    69ce:	2c00      	cmp	r4, #0
    69d0:	f000 824e 	beq.w	6e70 <isr+0xa40>
	bool dir_report = false;
    69d4:	2300      	movs	r3, #0
    69d6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    69da:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    69de:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    69e2:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    69e6:	7a3b      	ldrb	r3, [r7, #8]
    69e8:	f003 030f 	and.w	r3, r3, #15
    69ec:	2b07      	cmp	r3, #7
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    69ee:	f107 0408 	add.w	r4, r7, #8
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    69f2:	d17e      	bne.n	6af2 <isr+0x6c2>
		if(h->adv_addr){
    69f4:	7afb      	ldrb	r3, [r7, #11]
    69f6:	f8df 83b4 	ldr.w	r8, [pc, #948]	; 6dac <isr+0x97c>
    69fa:	07de      	lsls	r6, r3, #31
			ptr += BDADDR_SIZE;
    69fc:	bf4c      	ite	mi
    69fe:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    6a02:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
    6a06:	0798      	lsls	r0, r3, #30
			ptr += BDADDR_SIZE;
    6a08:	bf48      	it	mi
    6a0a:	3606      	addmi	r6, #6
		if(h->adi){
    6a0c:	f013 0f08 	tst.w	r3, #8
			sid = (u8_t)adi_ptr->sid;
    6a10:	bf1e      	ittt	ne
    6a12:	7873      	ldrbne	r3, [r6, #1]
    6a14:	f3c3 1303 	ubfxne	r3, r3, #4, #4
    6a18:	f888 3000 	strbne.w	r3, [r8]
		if(sid == 0x04){
    6a1c:	f898 3000 	ldrb.w	r3, [r8]
			ptr += sizeof(*adi_ptr);
    6a20:	bf18      	it	ne
    6a22:	3602      	addne	r6, #2
		if(sid == 0x04){
    6a24:	2b04      	cmp	r3, #4
    6a26:	d11d      	bne.n	6a64 <isr+0x634>
			stop_time_int = k_cycle_get_32();
    6a28:	f7fa fcc4 	bl	13b4 <_timer_cycle_get_32>
    6a2c:	4bd2      	ldr	r3, [pc, #840]	; (6d78 <isr+0x948>)
    6a2e:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
    6a30:	4bd2      	ldr	r3, [pc, #840]	; (6d7c <isr+0x94c>)
    6a32:	681b      	ldr	r3, [r3, #0]
    6a34:	eba0 0e03 	sub.w	lr, r0, r3
    6a38:	4bd1      	ldr	r3, [pc, #836]	; (6d80 <isr+0x950>)
    6a3a:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
    6a3e:	4bd1      	ldr	r3, [pc, #836]	; (6d84 <isr+0x954>)
    6a40:	681a      	ldr	r2, [r3, #0]
    6a42:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    6a46:	fb82 2309 	smull	r2, r3, r2, r9
    6a4a:	fba2 010e 	umull	r0, r1, r2, lr
    6a4e:	fb0e 1103 	mla	r1, lr, r3, r1
    6a52:	4bcd      	ldr	r3, [pc, #820]	; (6d88 <isr+0x958>)
    6a54:	681a      	ldr	r2, [r3, #0]
    6a56:	17d3      	asrs	r3, r2, #31
    6a58:	f7f9 fc06 	bl	268 <__aeabi_uldivmod>
    6a5c:	4bcb      	ldr	r3, [pc, #812]	; (6d8c <isr+0x95c>)
    6a5e:	fbb0 f0f9 	udiv	r0, r0, r9
    6a62:	6018      	str	r0, [r3, #0]
		if((h->aux_ptr && !aux_scan && (sid == 0x02)) || 
    6a64:	7afb      	ldrb	r3, [r7, #11]
    6a66:	f013 0310 	ands.w	r3, r3, #16
    6a6a:	d006      	beq.n	6a7a <isr+0x64a>
    6a6c:	4ac8      	ldr	r2, [pc, #800]	; (6d90 <isr+0x960>)
    6a6e:	7812      	ldrb	r2, [r2, #0]
    6a70:	b91a      	cbnz	r2, 6a7a <isr+0x64a>
    6a72:	f898 2000 	ldrb.w	r2, [r8]
    6a76:	2a02      	cmp	r2, #2
    6a78:	d005      	beq.n	6a86 <isr+0x656>
    6a7a:	f898 2000 	ldrb.w	r2, [r8]
    6a7e:	2a04      	cmp	r2, #4
    6a80:	d137      	bne.n	6af2 <isr+0x6c2>
			((sid == 0x04) && h->aux_ptr)){
    6a82:	2b00      	cmp	r3, #0
    6a84:	d035      	beq.n	6af2 <isr+0x6c2>
			aux_scan = 0x01;
    6a86:	4bc2      	ldr	r3, [pc, #776]	; (6d90 <isr+0x960>)
    6a88:	2201      	movs	r2, #1
    6a8a:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
    6a8c:	7833      	ldrb	r3, [r6, #0]
    6a8e:	f3c3 0305 	ubfx	r3, r3, #0, #6
    6a92:	f88b 3c90 	strb.w	r3, [fp, #3216]	; 0xc90
			_radio.ext_scanner.chan_off	= ap->offs;
    6a96:	78b3      	ldrb	r3, [r6, #2]
    6a98:	7872      	ldrb	r2, [r6, #1]
    6a9a:	f003 031f 	and.w	r3, r3, #31
    6a9e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    6aa2:	4bbc      	ldr	r3, [pc, #752]	; (6d94 <isr+0x964>)
    6aa4:	b290      	uxth	r0, r2
    6aa6:	2100      	movs	r1, #0
    6aa8:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
    6aac:	e9c3 0102 	strd	r0, r1, [r3, #8]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    6ab0:	7831      	ldrb	r1, [r6, #0]
    6ab2:	f3c1 11c0 	ubfx	r1, r1, #7, #1
			if(_radio.ext_scanner.off_unit == 0 ){
    6ab6:	f011 0fff 	tst.w	r1, #255	; 0xff
			_radio.ext_scanner.off_unit	= ap->offs_units;
    6aba:	f88b 1cb4 	strb.w	r1, [fp, #3252]	; 0xcb4
    6abe:	4619      	mov	r1, r3
				_radio.ext_scanner.chan_off *= 30;
    6ac0:	bf0c      	ite	eq
    6ac2:	231e      	moveq	r3, #30
				_radio.ext_scanner.chan_off *= 300;
    6ac4:	f44f 7396 	movne.w	r3, #300	; 0x12c
    6ac8:	fba2 2303 	umull	r2, r3, r2, r3
    6acc:	e9c1 2300 	strd	r2, r3, [r1]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    6ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
    6ad4:	4bb0      	ldr	r3, [pc, #704]	; (6d98 <isr+0x968>)
    6ad6:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
    6ada:	f7fa fc6b 	bl	13b4 <_timer_cycle_get_32>
    6ade:	4baf      	ldr	r3, [pc, #700]	; (6d9c <isr+0x96c>)
    6ae0:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
    6ae2:	f7fa fc67 	bl	13b4 <_timer_cycle_get_32>
    6ae6:	4ba5      	ldr	r3, [pc, #660]	; (6d7c <isr+0x94c>)
    6ae8:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
    6aea:	f7fc fc37 	bl	335c <ticker_ticks_now_get>
    6aee:	f8cb 0cec 	str.w	r0, [fp, #3308]	; 0xcec
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    6af2:	f8db 3c54 	ldr.w	r3, [fp, #3156]	; 0xc54
    6af6:	2b00      	cmp	r3, #0
    6af8:	f000 81a6 	beq.w	6e48 <isr+0xa18>
    6afc:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    6b00:	b133      	cbz	r3, 6b10 <isr+0x6e0>
				      (_radio.fc_req == _radio.fc_ack)) &&
    6b02:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    6b06:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    6b0a:	429a      	cmp	r2, r3
    6b0c:	f040 819c 	bne.w	6e48 <isr+0xa18>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    6b10:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    6b14:	06d9      	lsls	r1, r3, #27
    6b16:	f140 8187 	bpl.w	6e28 <isr+0x9f8>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    6b1a:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    6b1c:	f013 030f 	ands.w	r3, r3, #15
    6b20:	f040 81b3 	bne.w	6e8a <isr+0xa5a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    6b24:	f003 fa04 	bl	9f30 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    6b28:	f8db 3c28 	ldr.w	r3, [fp, #3112]	; 0xc28
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    6b2c:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    6b30:	489b      	ldr	r0, [pc, #620]	; (6da0 <isr+0x970>)
    6b32:	2207      	movs	r2, #7
    6b34:	fba3 0100 	umull	r0, r1, r3, r0
    6b38:	fb02 1103 	mla	r1, r2, r3, r1
    6b3c:	a38c      	add	r3, pc, #560	; (adr r3, 6d70 <isr+0x940>)
    6b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6b42:	f7f9 fb91 	bl	268 <__aeabi_uldivmod>
    6b46:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    6b4a:	4286      	cmp	r6, r0
    6b4c:	f080 817c 	bcs.w	6e48 <isr+0xa18>
			node_rx = packet_rx_reserve_get(4);
    6b50:	2004      	movs	r0, #4
    6b52:	f7fd fae3 	bl	411c <packet_rx_reserve_get>
		if (node_rx == 0) {
    6b56:	4682      	mov	sl, r0
    6b58:	2800      	cmp	r0, #0
    6b5a:	f000 8189 	beq.w	6e70 <isr+0xa40>
		_radio.state = STATE_STOP;
    6b5e:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    6b60:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    6b62:	f8db 4c54 	ldr.w	r4, [fp, #3156]	; 0xc54
		_radio.state = STATE_STOP;
    6b66:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    6b6a:	f8cb 3c54 	str.w	r3, [fp, #3156]	; 0xc54
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6b6e:	f003 f85d 	bl	9c2c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    6b72:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    6b74:	498b      	ldr	r1, [pc, #556]	; (6da4 <isr+0x974>)
			pdu_adv_tx->chan_sel = 1;
    6b76:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    6b7a:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    6b7e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    6b80:	7a3a      	ldrb	r2, [r7, #8]
    6b82:	b2db      	uxtb	r3, r3
    6b84:	f3c2 1280 	ubfx	r2, r2, #6, #1
    6b88:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    6b8c:	2222      	movs	r2, #34	; 0x22
    6b8e:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6b90:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    6b94:	09d2      	lsrs	r2, r2, #7
    6b96:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6b9a:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    6b9c:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6b9e:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    6ba2:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    6ba6:	f7f9 fd13 	bl	5d0 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    6baa:	2206      	movs	r2, #6
    6bac:	f107 010a 	add.w	r1, r7, #10
    6bb0:	4648      	mov	r0, r9
    6bb2:	f7f9 fd0d 	bl	5d0 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    6bb6:	4632      	mov	r2, r6
    6bb8:	f104 0110 	add.w	r1, r4, #16
    6bbc:	f105 000e 	add.w	r0, r5, #14
    6bc0:	f7f9 fd06 	bl	5d0 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    6bc4:	2203      	movs	r2, #3
    6bc6:	f104 0114 	add.w	r1, r4, #20
    6bca:	f105 0012 	add.w	r0, r5, #18
    6bce:	f7f9 fcff 	bl	5d0 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    6bd2:	2301      	movs	r3, #1
    6bd4:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    6bd6:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
		conn_interval_us =
    6bda:	f240 46e2 	movw	r6, #1250	; 0x4e2
    6bde:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    6be0:	f003 f9a6 	bl	9f30 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    6be4:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    6be8:	f8db 8c58 	ldr.w	r8, [fp, #3160]	; 0xc58
		if (!_radio.remainder_anchor ||
    6bec:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    6bee:	bfcc      	ite	gt
    6bf0:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    6bf4:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    6bf8:	f1b8 0f00 	cmp.w	r8, #0
    6bfc:	f040 814f 	bne.w	6e9e <isr+0xa6e>
			pdu_adv_tx->connect_ind.win_offset = 0;
    6c00:	f885 8016 	strb.w	r8, [r5, #22]
    6c04:	f885 8017 	strb.w	r8, [r5, #23]
    6c08:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    6c0a:	2100      	movs	r1, #0
    6c0c:	4608      	mov	r0, r1
    6c0e:	f002 ff9d 	bl	9b4c <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    6c12:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    6c14:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    6c18:	4608      	mov	r0, r1
    6c1a:	f002 ff9c 	bl	9b56 <radio_tx_chain_delay_get>
    6c1e:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    6c22:	f100 031e 	add.w	r3, r0, #30
    6c26:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    6c28:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
    6c2c:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    6c2e:	f8bb 3c4a 	ldrh.w	r3, [fp, #3146]	; 0xc4a
    6c32:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    6c34:	f8bb 3c4c 	ldrh.w	r3, [fp, #3148]	; 0xc4c
    6c38:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    6c3a:	f104 0117 	add.w	r1, r4, #23
    6c3e:	2205      	movs	r2, #5
    6c40:	f105 001e 	add.w	r0, r5, #30
    6c44:	f7f9 fcc4 	bl	5d0 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    6c48:	7fa2      	ldrb	r2, [r4, #30]
    6c4a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    6c4e:	f362 0304 	bfi	r3, r2, #0, #5
    6c52:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    6c56:	f89b 2d08 	ldrb.w	r2, [fp, #3336]	; 0xd08
    6c5a:	f362 1347 	bfi	r3, r2, #5, #3
    6c5e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    6c62:	f002 fffd 	bl	9c60 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    6c66:	4628      	mov	r0, r5
    6c68:	f002 ff6a 	bl	9b40 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    6c6c:	f002 ffa6 	bl	9bbc <radio_is_ready>
    6c70:	4680      	mov	r8, r0
    6c72:	2800      	cmp	r0, #0
    6c74:	f47f ac30 	bne.w	64d8 <isr+0xa8>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    6c78:	f44f 7282 	mov.w	r2, #260	; 0x104
    6c7c:	f8db 1cf0 	ldr.w	r1, [fp, #3312]	; 0xcf0
    6c80:	4620      	mov	r0, r4
    6c82:	f7fb fbcc 	bl	241e <mem_index_get>
    6c86:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    6c88:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    6c8c:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    6c90:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    6c92:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6c96:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    6c98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    6c9c:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6ca0:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    6ca2:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    6ca6:	f10a 000e 	add.w	r0, sl, #14
    6caa:	f7f9 fc91 	bl	5d0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    6cae:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
    6cb2:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    6cb6:	f8bb 3c4a 	ldrh.w	r3, [fp, #3146]	; 0xc4a
    6cba:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    6cbe:	f8bb 3c4c 	ldrh.w	r3, [fp, #3148]	; 0xc4c
    6cc2:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    6cc6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    6cca:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    6cce:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    6cd2:	8c20      	ldrh	r0, [r4, #32]
    6cd4:	f7fd ff76 	bl	4bc4 <rx_fc_lock>
		packet_rx_enqueue();
    6cd8:	f7fe f898 	bl	4e0c <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    6cdc:	2003      	movs	r0, #3
    6cde:	f7fd fa1d 	bl	411c <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    6ce2:	2800      	cmp	r0, #0
    6ce4:	f43f abf8 	beq.w	64d8 <isr+0xa8>
			node_rx->hdr.handle = conn->handle;
    6ce8:	8c23      	ldrh	r3, [r4, #32]
    6cea:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    6cec:	230a      	movs	r3, #10
    6cee:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    6cf0:	7a3b      	ldrb	r3, [r7, #8]
    6cf2:	f013 0320 	ands.w	r3, r3, #32
    6cf6:	d00e      	beq.n	6d16 <isr+0x8e6>
					((u16_t)conn->access_addr[1] << 8) |
    6cf8:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    6cfa:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    6cfc:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    6cfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    6d02:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    6d04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    6d08:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    6d0a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    6d0c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    6d10:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    6d12:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    6d14:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    6d16:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    6d18:	f7fe f878 	bl	4e0c <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    6d1c:	f8db 3d64 	ldr.w	r3, [fp, #3428]	; 0xd64
    6d20:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    6d22:	2b27      	cmp	r3, #39	; 0x27
    6d24:	bf38      	it	cc
    6d26:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    6d28:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    6d2a:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    6d2c:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    6d2e:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    6d30:	f8db 2c50 	ldr.w	r2, [fp, #3152]	; 0xc50
    6d34:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6d36:	f44f 63ef 	mov.w	r3, #1912	; 0x778
    6d3a:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    6d3c:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6d3e:	4629      	mov	r1, r5
    6d40:	9300      	str	r3, [sp, #0]
    6d42:	4628      	mov	r0, r5
    6d44:	4b18      	ldr	r3, [pc, #96]	; (6da8 <isr+0x978>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6d46:	f8df a068 	ldr.w	sl, [pc, #104]	; 6db0 <isr+0x980>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6d4a:	f7fc fa37 	bl	31bc <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    6d4e:	f240 7179 	movw	r1, #1913	; 0x779
    6d52:	f7fe fae5 	bl	5320 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6d56:	462b      	mov	r3, r5
    6d58:	2204      	movs	r2, #4
    6d5a:	4629      	mov	r1, r5
    6d5c:	9500      	str	r5, [sp, #0]
    6d5e:	4628      	mov	r0, r5
    6d60:	f7fc fa2c 	bl	31bc <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6d64:	f8db 3008 	ldr.w	r3, [fp, #8]
    6d68:	f894 9020 	ldrb.w	r9, [r4, #32]
    6d6c:	e022      	b.n	6db4 <isr+0x984>
    6d6e:	bf00      	nop
    6d70:	3b9aca00 	.word	0x3b9aca00
    6d74:	00000000 	.word	0x00000000
    6d78:	20003d18 	.word	0x20003d18
    6d7c:	20003c8c 	.word	0x20003c8c
    6d80:	20003d4c 	.word	0x20003d4c
    6d84:	20006030 	.word	0x20006030
    6d88:	2000602c 	.word	0x2000602c
    6d8c:	20003d74 	.word	0x20003d74
    6d90:	20001050 	.word	0x20001050
    6d94:	20000f78 	.word	0x20000f78
    6d98:	20000f88 	.word	0x20000f88
    6d9c:	20003d44 	.word	0x20003d44
    6da0:	1afd498d 	.word	0x1afd498d
    6da4:	20000f0e 	.word	0x20000f0e
    6da8:	00005321 	.word	0x00005321
    6dac:	20003d38 	.word	0x20003d38
    6db0:	3b9aca00 	.word	0x3b9aca00
		ticker_status =
    6db4:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6db6:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    6dba:	f44f 63f2 	mov.w	r3, #1936	; 0x790
    6dbe:	9308      	str	r3, [sp, #32]
    6dc0:	4ba5      	ldr	r3, [pc, #660]	; (7058 <isr+0xc28>)
    6dc2:	9307      	str	r3, [sp, #28]
    6dc4:	4ba5      	ldr	r3, [pc, #660]	; (705c <isr+0xc2c>)
    6dc6:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6dc8:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    6dca:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6dcc:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6dd0:	4443      	add	r3, r8
		ticker_status =
    6dd2:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    6dd4:	4630      	mov	r0, r6
    6dd6:	a39e      	add	r3, pc, #632	; (adr r3, 7050 <isr+0xc20>)
    6dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
    6ddc:	4639      	mov	r1, r7
    6dde:	f7f9 fa43 	bl	268 <__aeabi_uldivmod>
    6de2:	4610      	mov	r0, r2
    6de4:	4619      	mov	r1, r3
    6de6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6dea:	2300      	movs	r3, #0
    6dec:	f7f9 fa3c 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6df0:	a397      	add	r3, pc, #604	; (adr r3, 7050 <isr+0xc20>)
    6df2:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6df6:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6df8:	4639      	mov	r1, r7
    6dfa:	4630      	mov	r0, r6
    6dfc:	f7f9 fa34 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    6e00:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    6e02:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    6e04:	a392      	add	r3, pc, #584	; (adr r3, 7050 <isr+0xc20>)
    6e06:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e0a:	fba1 010a 	umull	r0, r1, r1, sl
    6e0e:	f7f9 fa2b 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6e12:	f109 0907 	add.w	r9, r9, #7
		ticker_status =
    6e16:	fa5f f989 	uxtb.w	r9, r9
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6e1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    6e1e:	9000      	str	r0, [sp, #0]
    6e20:	465b      	mov	r3, fp
    6e22:	464a      	mov	r2, r9
    6e24:	4629      	mov	r1, r5
    6e26:	e59a      	b.n	695e <isr+0x52e>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    6e28:	7a3a      	ldrb	r2, [r7, #8]
    6e2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6e2e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    6e32:	4293      	cmp	r3, r2
    6e34:	d108      	bne.n	6e48 <isr+0xa18>
		(memcmp(&_radio.scanner.adv_addr[0],
    6e36:	2206      	movs	r2, #6
    6e38:	f107 010a 	add.w	r1, r7, #10
    6e3c:	4888      	ldr	r0, [pc, #544]	; (7060 <isr+0xc30>)
    6e3e:	f7f9 fbb2 	bl	5a6 <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    6e42:	2800      	cmp	r0, #0
    6e44:	f43f ae69 	beq.w	6b1a <isr+0x6ea>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    6e48:	7a3b      	ldrb	r3, [r7, #8]
    6e4a:	f013 030f 	ands.w	r3, r3, #15
    6e4e:	d038      	beq.n	6ec2 <isr+0xa92>
    6e50:	2b07      	cmp	r3, #7
    6e52:	d134      	bne.n	6ebe <isr+0xa8e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    6e54:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    6e58:	0752      	lsls	r2, r2, #29
    6e5a:	d132      	bne.n	6ec2 <isr+0xa92>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    6e5c:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    6e5e:	f003 020b 	and.w	r2, r3, #11
    6e62:	2a02      	cmp	r2, #2
    6e64:	f040 8086 	bne.w	6f74 <isr+0xb44>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    6e68:	7a7b      	ldrb	r3, [r7, #9]
    6e6a:	2b00      	cmp	r3, #0
    6e6c:	f040 80a8 	bne.w	6fc0 <isr+0xb90>
			_radio.state = STATE_CLOSE;
    6e70:	2303      	movs	r3, #3
    6e72:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    6e76:	f002 fe83 	bl	9b80 <radio_disable>
			_radio.scanner.state = 0;
    6e7a:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
    6e7e:	f36f 0341 	bfc	r3, #1, #1
    6e82:	f88b 3c2c 	strb.w	r3, [fp, #3116]	; 0xc2c
    6e86:	f7ff bb5c 	b.w	6542 <isr+0x112>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    6e8a:	2b01      	cmp	r3, #1
    6e8c:	d1e0      	bne.n	6e50 <isr+0xa20>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    6e8e:	2100      	movs	r1, #0
    6e90:	4620      	mov	r0, r4
    6e92:	f7fd ff39 	bl	4d08 <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    6e96:	2800      	cmp	r0, #0
    6e98:	d0d6      	beq.n	6e48 <isr+0xa18>
    6e9a:	e643      	b.n	6b24 <isr+0x6f4>
				conn_space_us += conn_interval_us;
    6e9c:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    6e9e:	f1b8 0f00 	cmp.w	r8, #0
    6ea2:	dbfb      	blt.n	6e9c <isr+0xa6c>
    6ea4:	4580      	cmp	r8, r0
    6ea6:	d3f9      	bcc.n	6e9c <isr+0xa6c>
			pdu_adv_tx->connect_ind.win_offset =
    6ea8:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    6eac:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    6eb0:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    6eb4:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    6eb6:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    6eb8:	3301      	adds	r3, #1
    6eba:	756b      	strb	r3, [r5, #21]
    6ebc:	e6a5      	b.n	6c0a <isr+0x7da>
		   (_radio.scanner.phy)) ||
    6ebe:	2b06      	cmp	r3, #6
    6ec0:	d14d      	bne.n	6f5e <isr+0xb2e>
		 (_radio.scanner.type != 0) &&
    6ec2:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    6ec6:	0716      	lsls	r6, r2, #28
    6ec8:	d547      	bpl.n	6f5a <isr+0xb2a>
		 (_radio.scanner.type != 0) &&
    6eca:	f8db 2c54 	ldr.w	r2, [fp, #3156]	; 0xc54
    6ece:	2a00      	cmp	r2, #0
    6ed0:	d143      	bne.n	6f5a <isr+0xb2a>
		err = isr_rx_scan_report(rssi_ready,
    6ed2:	4628      	mov	r0, r5
    6ed4:	f7fe fa60 	bl	5398 <isr_rx_scan_report.isra.38>
		if (err) {
    6ed8:	2800      	cmp	r0, #0
    6eda:	d1c9      	bne.n	6e70 <isr+0xa40>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    6edc:	7a3b      	ldrb	r3, [r7, #8]
    6ede:	f003 030f 	and.w	r3, r3, #15
    6ee2:	2b07      	cmp	r3, #7
    6ee4:	d101      	bne.n	6eea <isr+0xaba>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6ee6:	f002 fea1 	bl	9c2c <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6eea:	f002 fe9f 	bl	9c2c <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    6eee:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6ef0:	495c      	ldr	r1, [pc, #368]	; (7064 <isr+0xc34>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    6ef2:	2203      	movs	r2, #3
    6ef4:	f362 0303 	bfi	r3, r2, #0, #4
    6ef8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    6efa:	7a3a      	ldrb	r2, [r7, #8]
    6efc:	b2db      	uxtb	r3, r3
    6efe:	f3c2 1280 	ubfx	r2, r2, #6, #1
    6f02:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    6f06:	220c      	movs	r2, #12
    6f08:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6f0a:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    6f0e:	09d2      	lsrs	r2, r2, #7
    6f10:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    6f14:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6f16:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    6f18:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    6f1c:	f7f9 fb58 	bl	5d0 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    6f20:	2206      	movs	r2, #6
    6f22:	f107 010a 	add.w	r1, r7, #10
    6f26:	f104 0008 	add.w	r0, r4, #8
    6f2a:	f7f9 fb51 	bl	5d0 <memcpy>
		_radio.scanner.state = 1;
    6f2e:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
    6f32:	f043 0302 	orr.w	r3, r3, #2
    6f36:	f88b 3c2c 	strb.w	r3, [fp, #3116]	; 0xc2c
		radio_tmr_tifs_set(RADIO_TIFS);
    6f3a:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    6f3c:	2302      	movs	r3, #2
    6f3e:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    6f42:	f002 ff07 	bl	9d54 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    6f46:	2000      	movs	r0, #0
    6f48:	f002 fe74 	bl	9c34 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    6f4c:	4620      	mov	r0, r4
    6f4e:	f002 fdf7 	bl	9b40 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    6f52:	f002 ffdb 	bl	9f0c <radio_tmr_end_capture>
    6f56:	f7ff bb64 	b.w	6622 <isr+0x1f2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d084      	beq.n	6e68 <isr+0xa38>
    6f5e:	2b01      	cmp	r3, #1
    6f60:	f47f af7c 	bne.w	6e5c <isr+0xa2c>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    6f64:	a90d      	add	r1, sp, #52	; 0x34
    6f66:	4620      	mov	r0, r4
    6f68:	f7fd fece 	bl	4d08 <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    6f6c:	2800      	cmp	r0, #0
    6f6e:	f47f af7b 	bne.w	6e68 <isr+0xa38>
    6f72:	e773      	b.n	6e5c <isr+0xa2c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    6f74:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    6f78:	2b07      	cmp	r3, #7
    6f7a:	d105      	bne.n	6f88 <isr+0xb58>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    6f7c:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
    6f80:	075c      	lsls	r4, r3, #29
    6f82:	f47f af71 	bne.w	6e68 <isr+0xa38>
    6f86:	e773      	b.n	6e70 <isr+0xa40>
		   (_radio.scanner.phy)) ||
    6f88:	2b04      	cmp	r3, #4
    6f8a:	f47f af71 	bne.w	6e70 <isr+0xa40>
		   (_radio.scanner.state != 0) &&
    6f8e:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    6f92:	0798      	lsls	r0, r3, #30
    6f94:	f57f af6c 	bpl.w	6e70 <isr+0xa40>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    6f98:	f002 fe48 	bl	9c2c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    6f9c:	7a3b      	ldrb	r3, [r7, #8]
    6f9e:	7802      	ldrb	r2, [r0, #0]
    6fa0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6fa4:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6fa8:	f47f af62 	bne.w	6e70 <isr+0xa40>
		(memcmp(&sreq->scan_req.adv_addr[0],
    6fac:	2206      	movs	r2, #6
    6fae:	f107 010a 	add.w	r1, r7, #10
    6fb2:	3008      	adds	r0, #8
    6fb4:	f7f9 faf7 	bl	5a6 <memcmp>
		   (_radio.scanner.state != 0) &&
    6fb8:	2800      	cmp	r0, #0
    6fba:	f43f af55 	beq.w	6e68 <isr+0xa38>
    6fbe:	e757      	b.n	6e70 <isr+0xa40>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    6fc0:	f8db 3c54 	ldr.w	r3, [fp, #3156]	; 0xc54
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	f47f af53 	bne.w	6e70 <isr+0xa40>
		err = isr_rx_scan_report(rssi_ready,
    6fca:	4628      	mov	r0, r5
    6fcc:	f7fe f9e4 	bl	5398 <isr_rx_scan_report.isra.38>
    6fd0:	e74e      	b.n	6e70 <isr+0xa40>
	_radio.packet_counter++;
    6fd2:	f89b 3d00 	ldrb.w	r3, [fp, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6fd6:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
	_radio.packet_counter++;
    6fda:	3301      	adds	r3, #1
    6fdc:	f88b 3d00 	strb.w	r3, [fp, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    6fe0:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    6fe4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6fe8:	2301      	movs	r3, #1
    6fea:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    6fec:	2f00      	cmp	r7, #0
    6fee:	f000 8374 	beq.w	76da <isr+0x12aa>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    6ff2:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    6ff6:	7a30      	ldrb	r0, [r6, #8]
    6ff8:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    6ffc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7000:	f002 0101 	and.w	r1, r2, #1
    7004:	4288      	cmp	r0, r1
    7006:	f000 80bd 	beq.w	7184 <isr+0xd54>
		_radio.conn_curr->sn++;
    700a:	f081 0101 	eor.w	r1, r1, #1
    700e:	f361 0200 	bfi	r2, r1, #0, #1
    7012:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    7016:	f89b 2013 	ldrb.w	r2, [fp, #19]
    701a:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    701c:	bf02      	ittt	eq
    701e:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    7022:	f042 0201 	orreq.w	r2, r2, #1
    7026:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    702a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    702e:	0611      	lsls	r1, r2, #24
    7030:	f100 80a4 	bmi.w	717c <isr+0xd4c>
			node_tx = _radio.conn_curr->pkt_tx_head;
    7034:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    7038:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    703c:	f108 0c04 	add.w	ip, r8, #4
    7040:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    7044:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    7046:	b97c      	cbnz	r4, 7068 <isr+0xc38>
	u8_t terminate = 0;
    7048:	2500      	movs	r5, #0
    704a:	e035      	b.n	70b8 <isr+0xc88>
    704c:	f3af 8000 	nop.w
    7050:	1afd498d 	.word	0x1afd498d
    7054:	00000007 	.word	0x00000007
    7058:	00005381 	.word	0x00005381
    705c:	000061a9 	.word	0x000061a9
    7060:	20000f14 	.word	0x20000f14
    7064:	20000f0e 	.word	0x20000f0e
				if (_radio.conn_curr->enc_tx) {
    7068:	0692      	lsls	r2, r2, #26
    706a:	d50a      	bpl.n	7082 <isr+0xc52>
					_radio.conn_curr->ccm_tx.counter++;
    706c:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    7070:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    7074:	3001      	adds	r0, #1
    7076:	f141 0100 	adc.w	r1, r1, #0
    707a:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    707e:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    7082:	f81c 300e 	ldrb.w	r3, [ip, lr]
    7086:	f003 0303 	and.w	r3, r3, #3
    708a:	2b03      	cmp	r3, #3
    708c:	d1dc      	bne.n	7048 <isr+0xc18>
	switch (pdu_data_tx->llctrl.opcode) {
    708e:	78ea      	ldrb	r2, [r5, #3]
    7090:	2a02      	cmp	r2, #2
    7092:	d1d9      	bne.n	7048 <isr+0xc18>
		_radio.state = STATE_CLOSE;
    7094:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    7098:	f002 fd72 	bl	9b80 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    709c:	f002 fd8e 	bl	9bbc <radio_is_ready>
    70a0:	2800      	cmp	r0, #0
    70a2:	f47f aa19 	bne.w	64d8 <isr+0xa8>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    70a6:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    70a8:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    70ac:	2913      	cmp	r1, #19
    70ae:	bf08      	it	eq
    70b0:	2116      	moveq	r1, #22
    70b2:	f7fd fe83 	bl	4dbc <terminate_ind_rx_enqueue>
		terminate = 1;
    70b6:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    70b8:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    70bc:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    70c0:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    70c4:	4422      	add	r2, r4
    70c6:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    70c8:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    70ca:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    70ce:	d11e      	bne.n	710e <isr+0xcde>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    70d0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    70d4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    70d8:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    70da:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    70dc:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    70e0:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    70e4:	d116      	bne.n	7114 <isr+0xce4>
		if (node_tx) {
    70e6:	f1b8 0f00 	cmp.w	r8, #0
    70ea:	d010      	beq.n	710e <isr+0xcde>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    70ec:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    70f0:	6814      	ldr	r4, [r2, #0]
    70f2:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    70f6:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    70f8:	bf06      	itte	eq
    70fa:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    70fe:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    7102:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    7106:	49a9      	ldr	r1, [pc, #676]	; (73ac <isr+0xf7c>)
    7108:	4640      	mov	r0, r8
    710a:	f7fb f970 	bl	23ee <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    710e:	f04f 0800 	mov.w	r8, #0
    7112:	e008      	b.n	7126 <isr+0xcf6>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    7114:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    7118:	428a      	cmp	r2, r1
    711a:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    711c:	bf08      	it	eq
    711e:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    7122:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    7126:	b37d      	cbz	r5, 7188 <isr+0xd58>
		connection_release(_radio.conn_curr);
    7128:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    712c:	f7fe f804 	bl	5138 <connection_release>
		_radio.conn_curr = NULL;
    7130:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    7132:	f8cb 5cfc 	str.w	r5, [fp, #3324]	; 0xcfc
	if (!radio_tmr_aa_restore()) {
    7136:	f002 fedd 	bl	9ef4 <radio_tmr_aa_restore>
    713a:	b918      	cbnz	r0, 7144 <isr+0xd14>
		radio_tmr_aa_save(radio_tmr_aa_get());
    713c:	f002 fece 	bl	9edc <radio_tmr_aa_get>
    7140:	f002 fed2 	bl	9ee8 <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    7144:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7148:	2b00      	cmp	r3, #0
    714a:	f43f a9fa 	beq.w	6542 <isr+0x112>
	if (tx_release) {
    714e:	f1b8 0f00 	cmp.w	r8, #0
    7152:	d003      	beq.n	715c <isr+0xd2c>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    7154:	4641      	mov	r1, r8
    7156:	8c18      	ldrh	r0, [r3, #32]
    7158:	f7fd ff7c 	bl	5054 <pdu_node_tx_release>
	if (rx_enqueue) {
    715c:	2d00      	cmp	r5, #0
    715e:	f43f a9f0 	beq.w	6542 <isr+0x112>
		rx_fc_lock(_radio.conn_curr->handle);
    7162:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7166:	8c18      	ldrh	r0, [r3, #32]
    7168:	f7fd fd2c 	bl	4bc4 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    716c:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7170:	8c1b      	ldrh	r3, [r3, #32]
    7172:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    7174:	f7fd fe4a 	bl	4e0c <packet_rx_enqueue>
    7178:	f7ff b9e3 	b.w	6542 <isr+0x112>
			_radio.conn_curr->empty = 0;
    717c:	f36f 12c7 	bfc	r2, #7, #1
    7180:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    7184:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    7188:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    718c:	7a32      	ldrb	r2, [r6, #8]
    718e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    7192:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    7196:	f3c3 0340 	ubfx	r3, r3, #1, #1
    719a:	429a      	cmp	r2, r3
    719c:	d03c      	beq.n	7218 <isr+0xde8>
	u8_t rx_enqueue = 0;
    719e:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    71a0:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		_radio.crc_expire = 0;
    71a4:	2400      	movs	r4, #0
    71a6:	f88b 4d01 	strb.w	r4, [fp, #3329]	; 0xd01
		_radio.conn_curr->supervision_expire = 0;
    71aa:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    71ac:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    71b0:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    71b2:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    71b6:	f7ff f8d5 	bl	6364 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    71ba:	f89b 3014 	ldrb.w	r3, [fp, #20]
    71be:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    71c0:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    71c4:	d013      	beq.n	71ee <isr+0xdbe>
    71c6:	2c00      	cmp	r4, #0
    71c8:	f040 82a0 	bne.w	770c <isr+0x12dc>
    71cc:	b13f      	cbz	r7, 71de <isr+0xdae>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    71ce:	7a33      	ldrb	r3, [r6, #8]
    71d0:	06df      	lsls	r7, r3, #27
    71d2:	d404      	bmi.n	71de <isr+0xdae>
			 (pdu_data_tx->len == 0)) ||
    71d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    71d6:	785b      	ldrb	r3, [r3, #1]
    71d8:	2b00      	cmp	r3, #0
    71da:	f000 8297 	beq.w	770c <isr+0x12dc>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    71de:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
			 (pdu_data_tx->len == 0)) ||
    71e2:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    71e6:	2b00      	cmp	r3, #0
    71e8:	bf0c      	ite	eq
    71ea:	2302      	moveq	r3, #2
    71ec:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    71ee:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    71f0:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    71f4:	f040 82a4 	bne.w	7740 <isr+0x1310>
		if (_radio.role == ROLE_MASTER) {
    71f8:	f89b 3013 	ldrb.w	r3, [fp, #19]
    71fc:	2b04      	cmp	r3, #4
    71fe:	f040 8287 	bne.w	7710 <isr+0x12e0>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    7202:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7206:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    720a:	f369 12c7 	bfi	r2, r9, #7, #1
    720e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    7212:	f002 fcb5 	bl	9b80 <radio_disable>
    7216:	e78e      	b.n	7136 <isr+0xd06>
	    (packet_rx_reserve_get(3) != 0) &&
    7218:	2003      	movs	r0, #3
    721a:	f7fc ff7f 	bl	411c <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    721e:	2800      	cmp	r0, #0
    7220:	d0bd      	beq.n	719e <isr+0xd6e>
	    (packet_rx_reserve_get(3) != 0) &&
    7222:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    7226:	b373      	cbz	r3, 7286 <isr+0xe56>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7228:	f8db 3d2c 	ldr.w	r3, [fp, #3372]	; 0xd2c
    722c:	f8db 2d30 	ldr.w	r2, [fp, #3376]	; 0xd30
	    ((_radio.fc_ena == 0) ||
    7230:	4293      	cmp	r3, r2
    7232:	d105      	bne.n	7240 <isr+0xe10>
	      (_radio.fc_req == _radio.fc_ack)) ||
    7234:	f89b 2d60 	ldrb.w	r2, [fp, #3424]	; 0xd60
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7238:	f89b 1d61 	ldrb.w	r1, [fp, #3425]	; 0xd61
    723c:	4291      	cmp	r1, r2
    723e:	d022      	beq.n	7286 <isr+0xe56>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7240:	f8db 2d30 	ldr.w	r2, [fp, #3376]	; 0xd30
	      (_radio.fc_req == _radio.fc_ack)) ||
    7244:	4293      	cmp	r3, r2
    7246:	d0aa      	beq.n	719e <isr+0xd6e>
	      (_radio.fc_req != _radio.fc_ack) &&
    7248:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    724c:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    7250:	429a      	cmp	r2, r3
    7252:	d0a4      	beq.n	719e <isr+0xd6e>
		(((_radio.fc_req == 0) &&
    7254:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	      (_radio.fc_req != _radio.fc_ack) &&
    7258:	b933      	cbnz	r3, 7268 <isr+0xe38>
		   _radio.conn_curr->handle)) ||
    725a:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		(((_radio.fc_req == 0) &&
    725e:	f8bb 2d5e 	ldrh.w	r2, [fp, #3422]	; 0xd5e
    7262:	8c1b      	ldrh	r3, [r3, #32]
    7264:	429a      	cmp	r2, r3
    7266:	d00e      	beq.n	7286 <isr+0xe56>
		 ((_radio.fc_req != 0) &&
    7268:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
		   _radio.conn_curr->handle)) ||
    726c:	2b00      	cmp	r3, #0
    726e:	d096      	beq.n	719e <isr+0xd6e>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    7270:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
		   _radio.conn_curr->handle)))))) {
    7274:	f8db 1cfc 	ldr.w	r1, [fp, #3324]	; 0xcfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    7278:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    727c:	f8b3 2d58 	ldrh.w	r2, [r3, #3416]	; 0xd58
    7280:	8c0b      	ldrh	r3, [r1, #32]
    7282:	429a      	cmp	r2, r3
    7284:	d18b      	bne.n	719e <isr+0xd6e>
		if (pdu_data_rx->len != 0) {
    7286:	f896 9009 	ldrb.w	r9, [r6, #9]
    728a:	f1b9 0f00 	cmp.w	r9, #0
    728e:	f000 81e1 	beq.w	7654 <isr+0x1224>
			if (_radio.conn_curr->enc_rx) {
    7292:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7296:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    729a:	f019 0910 	ands.w	r9, r9, #16
    729e:	d006      	beq.n	72ae <isr+0xe7e>
				done = radio_ccm_is_done();
    72a0:	f002 feb4 	bl	a00c <radio_ccm_is_done>
				LL_ASSERT(done);
    72a4:	2800      	cmp	r0, #0
    72a6:	f43f a917 	beq.w	64d8 <isr+0xa8>
				ccm_rx_increment = 1;
    72aa:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    72ae:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    72b2:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    72b6:	06dc      	lsls	r4, r3, #27
    72b8:	d40f      	bmi.n	72da <isr+0xeaa>
			    (_radio.conn_curr->pause_rx &&
    72ba:	f8db 4cfc 	ldr.w	r4, [fp, #3324]	; 0xcfc
    72be:	7a33      	ldrb	r3, [r6, #8]
    72c0:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    72c4:	f012 0f04 	tst.w	r2, #4
    72c8:	d120      	bne.n	730c <isr+0xedc>
			switch (pdu_data_rx->ll_id) {
    72ca:	f013 0303 	ands.w	r3, r3, #3
    72ce:	f000 81c1 	beq.w	7654 <isr+0x1224>
    72d2:	2b02      	cmp	r3, #2
    72d4:	d847      	bhi.n	7366 <isr+0xf36>
				*rx_enqueue = 1;
    72d6:	2501      	movs	r5, #1
    72d8:	e0ba      	b.n	7450 <isr+0x1020>
			     !radio_ccm_mic_is_valid()) ||
    72da:	f002 feb5 	bl	a048 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    72de:	2800      	cmp	r0, #0
    72e0:	d1eb      	bne.n	72ba <isr+0xe8a>
				_radio.state = STATE_CLOSE;
    72e2:	2303      	movs	r3, #3
    72e4:	f88b 3014 	strb.w	r3, [fp, #20]
				radio_disable();
    72e8:	f002 fc4a 	bl	9b80 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    72ec:	f002 fc66 	bl	9bbc <radio_is_ready>
    72f0:	4605      	mov	r5, r0
    72f2:	2800      	cmp	r0, #0
    72f4:	f47f a8f0 	bne.w	64d8 <isr+0xa8>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    72f8:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    72fc:	213d      	movs	r1, #61	; 0x3d
    72fe:	f7fd fd5d 	bl	4dbc <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    7302:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7306:	f7fd ff17 	bl	5138 <connection_release>
    730a:	e712      	b.n	7132 <isr+0xd02>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    730c:	f003 0103 	and.w	r1, r3, #3
    7310:	2903      	cmp	r1, #3
    7312:	d1e6      	bne.n	72e2 <isr+0xeb2>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    7314:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    7318:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    731a:	2800      	cmp	r0, #0
    731c:	f002 0240 	and.w	r2, r2, #64	; 0x40
    7320:	db15      	blt.n	734e <isr+0xf1e>
	       (!conn->role &&
    7322:	b922      	cbnz	r2, 732e <isr+0xefe>
		((!conn->refresh &&
    7324:	2902      	cmp	r1, #2
    7326:	d0d0      	beq.n	72ca <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7328:	2911      	cmp	r1, #17
    732a:	d8da      	bhi.n	72e2 <isr+0xeb2>
    732c:	e009      	b.n	7342 <isr+0xf12>
		 (conn->refresh &&
    732e:	1e8a      	subs	r2, r1, #2
    7330:	b2d2      	uxtb	r2, r2
    7332:	2a09      	cmp	r2, #9
    7334:	d8f8      	bhi.n	7328 <isr+0xef8>
    7336:	f240 2005 	movw	r0, #517	; 0x205
    733a:	fa20 f202 	lsr.w	r2, r0, r2
    733e:	07d0      	lsls	r0, r2, #31
    7340:	d4c3      	bmi.n	72ca <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7342:	4a1b      	ldr	r2, [pc, #108]	; (73b0 <isr+0xf80>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7344:	fa22 f101 	lsr.w	r1, r2, r1
    7348:	07c9      	lsls	r1, r1, #31
    734a:	d5ca      	bpl.n	72e2 <isr+0xeb2>
    734c:	e7bd      	b.n	72ca <isr+0xe9a>
	       (conn->role &&
    734e:	b92a      	cbnz	r2, 735c <isr+0xf2c>
		((!conn->refresh &&
    7350:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    7352:	d0ba      	beq.n	72ca <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7354:	2911      	cmp	r1, #17
    7356:	d8c4      	bhi.n	72e2 <isr+0xeb2>
    7358:	4a16      	ldr	r2, [pc, #88]	; (73b4 <isr+0xf84>)
    735a:	e7f3      	b.n	7344 <isr+0xf14>
		 (conn->refresh &&
    735c:	1e8a      	subs	r2, r1, #2
    735e:	2a01      	cmp	r2, #1
    7360:	d9b3      	bls.n	72ca <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    7362:	290b      	cmp	r1, #11
    7364:	e7f5      	b.n	7352 <isr+0xf22>
	switch (pdu_data_rx->llctrl.opcode) {
    7366:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    7368:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    736c:	2d19      	cmp	r5, #25
    736e:	f200 8179 	bhi.w	7664 <isr+0x1234>
    7372:	e8df f015 	tbh	[pc, r5, lsl #1]
    7376:	0021      	.short	0x0021
    7378:	00b80085 	.word	0x00b80085
    737c:	01770177 	.word	0x01770177
    7380:	01770177 	.word	0x01770177
    7384:	00c30171 	.word	0x00c30171
    7388:	017700e0 	.word	0x017700e0
    738c:	01060177 	.word	0x01060177
    7390:	00d80177 	.word	0x00d80177
    7394:	01770177 	.word	0x01770177
    7398:	0177016a 	.word	0x0177016a
    739c:	01770177 	.word	0x01770177
    73a0:	01770177 	.word	0x01770177
    73a4:	01770177 	.word	0x01770177
    73a8:	018b      	.short	0x018b
    73aa:	bf00      	nop
    73ac:	2000101c 	.word	0x2000101c
    73b0:	00022060 	.word	0x00022060
    73b4:	00022040 	.word	0x00022040
		if (!_radio.conn_curr->role ||
    73b8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    73bc:	2b00      	cmp	r3, #0
    73be:	f280 8151 	bge.w	7664 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    73c2:	7a71      	ldrb	r1, [r6, #9]
    73c4:	2000      	movs	r0, #0
    73c6:	f7fc fe61 	bl	408c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    73ca:	2800      	cmp	r0, #0
    73cc:	f000 814a 	beq.w	7664 <isr+0x1234>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    73d0:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    73d4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    73d6:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    73d8:	041a      	lsls	r2, r3, #16
    73da:	f100 8382 	bmi.w	7ae2 <isr+0x16b2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    73de:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    73e2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    73e6:	429a      	cmp	r2, r3
    73e8:	f47f a876 	bne.w	64d8 <isr+0xa8>
	if (_radio.conn_upd == 0) {
    73ec:	f8db 2d68 	ldr.w	r2, [fp, #3432]	; 0xd68
    73f0:	b90a      	cbnz	r2, 73f6 <isr+0xfc6>
		_radio.conn_upd = conn;
    73f2:	f8cb 4d68 	str.w	r4, [fp, #3432]	; 0xd68
	conn->llcp.conn_upd.win_size =
    73f6:	7b32      	ldrb	r2, [r6, #12]
    73f8:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    73fc:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    7400:	f240 42e2 	movw	r2, #1250	; 0x4e2
    7404:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    7406:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    7408:	7c30      	ldrb	r0, [r6, #16]
    740a:	7bf2      	ldrb	r2, [r6, #15]
    740c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    7410:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    7414:	7cb0      	ldrb	r0, [r6, #18]
    7416:	7c72      	ldrb	r2, [r6, #17]
    7418:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    741c:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    7420:	7cf2      	ldrb	r2, [r6, #19]
    7422:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    7424:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    7428:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    742c:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7430:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    7434:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    7438:	f36f 0282 	bfc	r2, #2, #1
    743c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    7440:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    7442:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    7444:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    7446:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    744a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    744e:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    7450:	f8db 1cfc 	ldr.w	r1, [fp, #3324]	; 0xcfc
    7454:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    7458:	f083 0302 	eor.w	r3, r3, #2
    745c:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    7460:	f1b9 0f00 	cmp.w	r9, #0
    7464:	f43f ae9c 	beq.w	71a0 <isr+0xd70>
				_radio.conn_curr->ccm_rx.counter++;
    7468:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    746c:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    7470:	3201      	adds	r2, #1
    7472:	f143 0300 	adc.w	r3, r3, #0
    7476:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    747a:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    747e:	e68f      	b.n	71a0 <isr+0xd70>
		if (!_radio.conn_curr->role ||
    7480:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7484:	2b00      	cmp	r3, #0
    7486:	f280 80ed 	bge.w	7664 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    748a:	7a71      	ldrb	r1, [r6, #9]
    748c:	2001      	movs	r0, #1
    748e:	f7fc fdfd 	bl	408c <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    7492:	2800      	cmp	r0, #0
    7494:	f000 80e6 	beq.w	7664 <isr+0x1234>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    7498:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    749c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    749e:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    74a0:	041b      	lsls	r3, r3, #16
    74a2:	f100 831e 	bmi.w	7ae2 <isr+0x16b2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    74a6:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    74aa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    74ae:	429a      	cmp	r2, r3
    74b0:	f47f a812 	bne.w	64d8 <isr+0xa8>
	memcpy(&conn->llcp.chan_map.chm[0],
    74b4:	2205      	movs	r2, #5
    74b6:	f106 010c 	add.w	r1, r6, #12
    74ba:	f104 0061 	add.w	r0, r4, #97	; 0x61
    74be:	f7f9 f887 	bl	5d0 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    74c2:	7c73      	ldrb	r3, [r6, #17]
    74c4:	7cb2      	ldrb	r2, [r6, #18]
    74c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    74ca:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    74ce:	2302      	movs	r3, #2
    74d0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    74d4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    74d8:	2500      	movs	r5, #0
	conn->llcp_ack--;
    74da:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    74dc:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    74e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    74e4:	e7b4      	b.n	7450 <isr+0x1020>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    74e6:	7a71      	ldrb	r1, [r6, #9]
    74e8:	2002      	movs	r0, #2
    74ea:	f7fc fdcf 	bl	408c <pdu_len_cmp>
    74ee:	2800      	cmp	r0, #0
    74f0:	f000 80b8 	beq.w	7664 <isr+0x1234>
		_radio.conn_curr->llcp_terminate.reason_peer =
    74f4:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    74f6:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    74fa:	e0ab      	b.n	7654 <isr+0x1224>
		if (!_radio.conn_curr->role ||
    74fc:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7500:	2b00      	cmp	r3, #0
    7502:	f280 80af 	bge.w	7664 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    7506:	7a71      	ldrb	r1, [r6, #9]
    7508:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    750a:	f7fc fdbf 	bl	408c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    750e:	2800      	cmp	r0, #0
    7510:	f000 80a8 	beq.w	7664 <isr+0x1234>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    7514:	4651      	mov	r1, sl
    7516:	4620      	mov	r0, r4
    7518:	f7fe fac4 	bl	5aa4 <feature_rsp_send>
    751c:	4605      	mov	r5, r0
		if (!nack) {
    751e:	2800      	cmp	r0, #0
    7520:	f47f ae3d 	bne.w	719e <isr+0xd6e>
    7524:	e794      	b.n	7450 <isr+0x1020>
		if (_radio.conn_curr->role ||
    7526:	f994 301d 	ldrsb.w	r3, [r4, #29]
    752a:	2b00      	cmp	r3, #0
    752c:	f2c0 809a 	blt.w	7664 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    7530:	7a71      	ldrb	r1, [r6, #9]
    7532:	200e      	movs	r0, #14
    7534:	e7e9      	b.n	750a <isr+0x10da>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    7536:	7a71      	ldrb	r1, [r6, #9]
    7538:	2009      	movs	r0, #9
    753a:	f7fc fda7 	bl	408c <pdu_len_cmp>
    753e:	2800      	cmp	r0, #0
    7540:	f000 8090 	beq.w	7664 <isr+0x1234>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7544:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    7546:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    754c:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    7550:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    7554:	f043 0310 	orr.w	r3, r3, #16
    7558:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    755c:	7bb2      	ldrb	r2, [r6, #14]
    755e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    7562:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    7566:	f3c2 0210 	ubfx	r2, r2, #0, #17
    756a:	4013      	ands	r3, r2
    756c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    7570:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7574:	f043 0320 	orr.w	r3, r3, #32
    7578:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    757c:	2300      	movs	r3, #0
    757e:	86a3      	strh	r3, [r4, #52]	; 0x34
    7580:	e6a9      	b.n	72d6 <isr+0xea6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    7582:	7a71      	ldrb	r1, [r6, #9]
    7584:	200c      	movs	r0, #12
    7586:	f7fc fd81 	bl	408c <pdu_len_cmp>
    758a:	2800      	cmp	r0, #0
    758c:	d06a      	beq.n	7664 <isr+0x1234>
	if (!conn->llcp_version.tx) {
    758e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7592:	f013 0501 	ands.w	r5, r3, #1
    7596:	d152      	bne.n	763e <isr+0x120e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7598:	48b9      	ldr	r0, [pc, #740]	; (7880 <isr+0x1450>)
    759a:	f7fa ff0e 	bl	23ba <mem_acquire>
		if (!node_tx) {
    759e:	4601      	mov	r1, r0
    75a0:	2800      	cmp	r0, #0
    75a2:	f43f adfc 	beq.w	719e <isr+0xd6e>
		conn->llcp_version.tx = 1;
    75a6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    75aa:	f043 0301 	orr.w	r3, r3, #1
    75ae:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    75b2:	7903      	ldrb	r3, [r0, #4]
    75b4:	f043 0303 	orr.w	r3, r3, #3
    75b8:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    75ba:	2306      	movs	r3, #6
    75bc:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    75be:	230c      	movs	r3, #12
    75c0:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    75c2:	2309      	movs	r3, #9
    75c4:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    75c6:	f06f 030e 	mvn.w	r3, #14
    75ca:	7243      	strb	r3, [r0, #9]
    75cc:	2305      	movs	r3, #5
    75ce:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    75d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75d4:	72c3      	strb	r3, [r0, #11]
    75d6:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    75d8:	4620      	mov	r0, r4
    75da:	f7fe fa49 	bl	5a70 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    75de:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    75e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    75e6:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    75ea:	f002 fb1b 	bl	9c24 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    75ee:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    75f0:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    75f2:	2201      	movs	r2, #1
    75f4:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    75f8:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    75fc:	7003      	strb	r3, [r0, #0]
    75fe:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    7600:	b1c2      	cbz	r2, 7634 <isr+0x1204>
		pdu_data_tx->md = 1;
    7602:	f043 0310 	orr.w	r3, r3, #16
    7606:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    7608:	7b33      	ldrb	r3, [r6, #12]
    760a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    760e:	7bb2      	ldrb	r2, [r6, #14]
    7610:	7b73      	ldrb	r3, [r6, #13]
    7612:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7616:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    761a:	7bf3      	ldrb	r3, [r6, #15]
    761c:	7c32      	ldrb	r2, [r6, #16]
    761e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7622:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    7626:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    762a:	f043 0302 	orr.w	r3, r3, #2
    762e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    7632:	e70d      	b.n	7450 <isr+0x1020>
		pdu_data_tx->md = 0;
    7634:	f362 1304 	bfi	r3, r2, #4, #1
    7638:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    763a:	4615      	mov	r5, r2
    763c:	e7e4      	b.n	7608 <isr+0x11d8>
	} else if (!conn->llcp_version.rx) {
    763e:	f013 0302 	ands.w	r3, r3, #2
    7642:	d107      	bne.n	7654 <isr+0x1224>
		conn->procedure_expire = 0;
    7644:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    7646:	2501      	movs	r5, #1
    7648:	e7de      	b.n	7608 <isr+0x11d8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    764a:	7a71      	ldrb	r1, [r6, #9]
    764c:	2011      	movs	r0, #17
    764e:	f7fc fd1d 	bl	408c <pdu_len_cmp>
    7652:	b138      	cbz	r0, 7664 <isr+0x1234>
	u8_t rx_enqueue = 0;
    7654:	2500      	movs	r5, #0
    7656:	e6fb      	b.n	7450 <isr+0x1020>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    7658:	7a71      	ldrb	r1, [r6, #9]
    765a:	2007      	movs	r0, #7
    765c:	f7fc fd16 	bl	408c <pdu_len_cmp>
    7660:	2800      	cmp	r0, #0
    7662:	d18b      	bne.n	757c <isr+0x114c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7664:	4886      	ldr	r0, [pc, #536]	; (7880 <isr+0x1450>)
    7666:	f7fa fea8 	bl	23ba <mem_acquire>
	if (!node_tx) {
    766a:	4601      	mov	r1, r0
    766c:	2800      	cmp	r0, #0
    766e:	f43f ad96 	beq.w	719e <isr+0xd6e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7672:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    7674:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7676:	f043 0303 	orr.w	r3, r3, #3
    767a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    767c:	2302      	movs	r3, #2
    767e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    7680:	2307      	movs	r3, #7
    7682:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    7684:	4620      	mov	r0, r4
    7686:	f7fe f9c5 	bl	5a14 <ctrl_tx_enqueue>
    768a:	e7e3      	b.n	7654 <isr+0x1224>
		if (_radio.conn_curr->role ||
    768c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7690:	2b00      	cmp	r3, #0
    7692:	dbe7      	blt.n	7664 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    7694:	7a71      	ldrb	r1, [r6, #9]
    7696:	2019      	movs	r0, #25
    7698:	f7fc fcf8 	bl	408c <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    769c:	2800      	cmp	r0, #0
    769e:	d0e1      	beq.n	7664 <isr+0x1234>
			if (!(p->phys & 0x01)) {
    76a0:	7b35      	ldrb	r5, [r6, #12]
    76a2:	f015 0501 	ands.w	r5, r5, #1
    76a6:	f43f aed3 	beq.w	7450 <isr+0x1020>
			if (conn->llcp_req != conn->llcp_ack) {
    76aa:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    76ae:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    76b2:	429a      	cmp	r2, r3
    76b4:	d1ce      	bne.n	7654 <isr+0x1224>
			memcpy(&conn->llcp.chan_map.chm[0],
    76b6:	2205      	movs	r2, #5
    76b8:	4972      	ldr	r1, [pc, #456]	; (7884 <isr+0x1454>)
    76ba:	f104 0061 	add.w	r0, r4, #97	; 0x61
    76be:	f7f8 ff87 	bl	5d0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    76c2:	2301      	movs	r3, #1
    76c4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    76c8:	2302      	movs	r3, #2
    76ca:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    76ce:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    76d2:	3b01      	subs	r3, #1
    76d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    76d8:	e7bc      	b.n	7654 <isr+0x1224>
		if (_radio.crc_expire == 0) {
    76da:	f89b 3d01 	ldrb.w	r3, [fp, #3329]	; 0xd01
    76de:	b913      	cbnz	r3, 76e6 <isr+0x12b6>
			_radio.crc_expire = 2;
    76e0:	2302      	movs	r3, #2
    76e2:	f88b 3d01 	strb.w	r3, [fp, #3329]	; 0xd01
		_radio.crc_expire--;
    76e6:	f89b 4d01 	ldrb.w	r4, [fp, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
    76ea:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		_radio.crc_expire--;
    76ee:	3c01      	subs	r4, #1
    76f0:	b2e4      	uxtb	r4, r4
    76f2:	f88b 4d01 	strb.w	r4, [fp, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
    76f6:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    76f8:	fab4 f484 	clz	r4, r4
    76fc:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    76fe:	b91d      	cbnz	r5, 7708 <isr+0x12d8>
			_radio.conn_curr->supervision_expire =
    7700:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    7702:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    7704:	46a8      	mov	r8, r5
    7706:	e551      	b.n	71ac <isr+0xd7c>
	u8_t rx_enqueue = 0;
    7708:	2500      	movs	r5, #0
    770a:	e7fb      	b.n	7704 <isr+0x12d4>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    770c:	2303      	movs	r3, #3
    770e:	e56e      	b.n	71ee <isr+0xdbe>
			radio_switch_complete_and_disable();
    7710:	f002 faa6 	bl	9c60 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    7714:	990d      	ldr	r1, [sp, #52]	; 0x34
    7716:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    771a:	780b      	ldrb	r3, [r1, #0]
    771c:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    7720:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    7724:	f3c2 0240 	ubfx	r2, r2, #1, #1
    7728:	f362 0382 	bfi	r3, r2, #2, #1
    772c:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    772e:	f7fd faca 	bl	4cc6 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    7732:	f002 fa43 	bl	9bbc <radio_is_ready>
    7736:	2800      	cmp	r0, #0
    7738:	f43f acfd 	beq.w	7136 <isr+0xd06>
    773c:	f7fe becc 	b.w	64d8 <isr+0xa8>
		radio_tmr_tifs_set(RADIO_TIFS);
    7740:	2096      	movs	r0, #150	; 0x96
    7742:	f002 fb07 	bl	9d54 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    7746:	2000      	movs	r0, #0
    7748:	f002 fa74 	bl	9c34 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    774c:	f002 fbde 	bl	9f0c <radio_tmr_end_capture>
    7750:	e7e0      	b.n	7714 <isr+0x12e4>
	switch (_radio.role) {
    7752:	f89b 2013 	ldrb.w	r2, [fp, #19]
    7756:	2a04      	cmp	r2, #4
    7758:	f63e aebe 	bhi.w	64d8 <isr+0xa8>
    775c:	e8df f012 	tbh	[pc, r2, lsl #1]
    7760:	000501b6 	.word	0x000501b6
    7764:	00ca009e 	.word	0x00ca009e
    7768:	00ca      	.short	0x00ca
	if(radio_ext_adv_enable_flag ==  true){
    776a:	4a47      	ldr	r2, [pc, #284]	; (7888 <isr+0x1458>)
    776c:	7812      	ldrb	r2, [r2, #0]
    776e:	2a00      	cmp	r2, #0
    7770:	d03b      	beq.n	77ea <isr+0x13ba>
		if((chain_flag ==1) &&
    7772:	4a46      	ldr	r2, [pc, #280]	; (788c <isr+0x145c>)
    7774:	7812      	ldrb	r2, [r2, #0]
    7776:	2a01      	cmp	r2, #1
    7778:	d10b      	bne.n	7792 <isr+0x1362>
    777a:	f89b 2c8d 	ldrb.w	r2, [fp, #3213]	; 0xc8d
    777e:	f89b 3c8c 	ldrb.w	r3, [fp, #3212]	; 0xc8c
    7782:	429a      	cmp	r2, r3
    7784:	d00f      	beq.n	77a6 <isr+0x1376>
			ext_adv_setup();
    7786:	f7fd f8a3 	bl	48d0 <ext_adv_setup>
			radio_tx_enable();
    778a:	f002 f9f3 	bl	9b74 <radio_tx_enable>
    778e:	f7fe beb4 	b.w	64fa <isr+0xca>
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
    7792:	2b03      	cmp	r3, #3
    7794:	d107      	bne.n	77a6 <isr+0x1376>
    7796:	b932      	cbnz	r2, 77a6 <isr+0x1376>
			(_radio.advertiser.chan_map_current != 0)) {
    7798:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
    779c:	075e      	lsls	r6, r3, #29
    779e:	d002      	beq.n	77a6 <isr+0x1376>
			adv_setup();
    77a0:	f7fc ff88 	bl	46b4 <adv_setup>
    77a4:	e7f1      	b.n	778a <isr+0x135a>
			radio_filter_disable();
    77a6:	f002 faa5 	bl	9cf4 <radio_filter_disable>
	_radio.role = ROLE_NONE;
    77aa:	2400      	movs	r4, #0
    77ac:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    77b0:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    77b4:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    77b8:	f002 fb4a 	bl	9e50 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    77bc:	4622      	mov	r2, r4
    77be:	4621      	mov	r1, r4
    77c0:	4620      	mov	r0, r4
    77c2:	4b33      	ldr	r3, [pc, #204]	; (7890 <isr+0x1460>)
    77c4:	f7fa feb2 	bl	252c <mayfly_enqueue>
	LL_ASSERT(!retval);
    77c8:	4604      	mov	r4, r0
    77ca:	2800      	cmp	r0, #0
    77cc:	f47e ae84 	bne.w	64d8 <isr+0xa8>
	clock_control_off(_radio.hf_clock, NULL);
    77d0:	f8db 0000 	ldr.w	r0, [fp]
    77d4:	6843      	ldr	r3, [r0, #4]
    77d6:	4621      	mov	r1, r4
    77d8:	685b      	ldr	r3, [r3, #4]
    77da:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    77dc:	2201      	movs	r2, #1
    77de:	4611      	mov	r1, r2
    77e0:	4620      	mov	r0, r4
    77e2:	f7fa fe7b 	bl	24dc <mayfly_enable>
    77e6:	f7fe beac 	b.w	6542 <isr+0x112>
		if ((_radio.state == STATE_CLOSE) &&
    77ea:	2b03      	cmp	r3, #3
    77ec:	d103      	bne.n	77f6 <isr+0x13c6>
			(_radio.advertiser.chan_map_current != 0)) {
    77ee:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    77f2:	075d      	lsls	r5, r3, #29
    77f4:	d1d4      	bne.n	77a0 <isr+0x1370>
			radio_filter_disable();
    77f6:	f002 fa7d 	bl	9cf4 <radio_filter_disable>
			if ((_radio.state == STATE_CLOSE) &&
    77fa:	f89b 3014 	ldrb.w	r3, [fp, #20]
    77fe:	2b03      	cmp	r3, #3
    7800:	d1d3      	bne.n	77aa <isr+0x137a>
				(!_radio.advertiser.is_hdcd)) {
    7802:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
			if ((_radio.state == STATE_CLOSE) &&
    7806:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    780a:	d1ce      	bne.n	77aa <isr+0x137a>
				entropy_get_entropy_isr(_radio.entropy, &random_delay,
    780c:	2201      	movs	r2, #1
    780e:	a90d      	add	r1, sp, #52	; 0x34
    7810:	f8db 0004 	ldr.w	r0, [fp, #4]
    7814:	f7f9 fd12 	bl	123c <entropy_get_entropy_isr>
				random_delay %= 10;
    7818:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
						HAL_TICKER_US_TO_TICKS(random_delay *
    781c:	481d      	ldr	r0, [pc, #116]	; (7894 <isr+0x1464>)
				random_delay %= 10;
    781e:	230a      	movs	r3, #10
    7820:	fbb1 f2f3 	udiv	r2, r1, r3
    7824:	fb03 1212 	mls	r2, r3, r2, r1
				random_delay += 1;
    7828:	3201      	adds	r2, #1
    782a:	b2d2      	uxtb	r2, r2
    782c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
						HAL_TICKER_US_TO_TICKS(random_delay *
    7830:	b2d2      	uxtb	r2, r2
    7832:	fba2 0100 	umull	r0, r1, r2, r0
    7836:	23e8      	movs	r3, #232	; 0xe8
    7838:	fb03 1102 	mla	r1, r3, r2, r1
    783c:	a30e      	add	r3, pc, #56	; (adr r3, 7878 <isr+0x1448>)
    783e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7842:	f7f8 fd11 	bl	268 <__aeabi_uldivmod>
				ticker_status =
    7846:	f241 1309 	movw	r3, #4361	; 0x1109
    784a:	9306      	str	r3, [sp, #24]
    784c:	4b12      	ldr	r3, [pc, #72]	; (7898 <isr+0x1468>)
    784e:	9305      	str	r3, [sp, #20]
    7850:	9404      	str	r4, [sp, #16]
    7852:	b283      	uxth	r3, r0
    7854:	9403      	str	r4, [sp, #12]
    7856:	9402      	str	r4, [sp, #8]
    7858:	9401      	str	r4, [sp, #4]
    785a:	9400      	str	r4, [sp, #0]
    785c:	2205      	movs	r2, #5
    785e:	4621      	mov	r1, r4
    7860:	4620      	mov	r0, r4
    7862:	f7fb fc5d 	bl	3120 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7866:	f030 0302 	bics.w	r3, r0, #2
    786a:	d09e      	beq.n	77aa <isr+0x137a>
    786c:	f89b 3012 	ldrb.w	r3, [fp, #18]
    7870:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7872:	d09a      	beq.n	77aa <isr+0x137a>
    7874:	f7fe be30 	b.w	64d8 <isr+0xa8>
    7878:	1afd498d 	.word	0x1afd498d
    787c:	00000007 	.word	0x00000007
    7880:	2000101c 	.word	0x2000101c
    7884:	20000fe2 	.word	0x20000fe2
    7888:	20001099 	.word	0x20001099
    788c:	20001051 	.word	0x20001051
    7890:	20005ef0 	.word	0x20005ef0
    7894:	d4a51000 	.word	0xd4a51000
    7898:	00005309 	.word	0x00005309
	if (_radio.state == STATE_CLOSE) {
    789c:	2b03      	cmp	r3, #3
    789e:	d11a      	bne.n	78d6 <isr+0x14a6>
		radio_tmr_tifs_set(RADIO_TIFS);
    78a0:	2096      	movs	r0, #150	; 0x96
    78a2:	f002 fa57 	bl	9d54 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    78a6:	2300      	movs	r3, #0
    78a8:	4619      	mov	r1, r3
    78aa:	461a      	mov	r2, r3
    78ac:	4618      	mov	r0, r3
    78ae:	f002 f9cd 	bl	9c4c <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    78b2:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    78b6:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
		radio_pkt_rx_set(_radio.packet_rx
    78ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    78be:	3008      	adds	r0, #8
    78c0:	f002 f938 	bl	9b34 <radio_pkt_rx_set>
		radio_rssi_measure();
    78c4:	f002 f9da 	bl	9c7c <radio_rssi_measure>
		_radio.state = STATE_RX;
    78c8:	2301      	movs	r3, #1
    78ca:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    78ce:	f002 f94b 	bl	9b68 <radio_rx_enable>
    78d2:	f7fe be12 	b.w	64fa <isr+0xca>
		radio_filter_disable();
    78d6:	f002 fa0d 	bl	9cf4 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    78da:	f89b 3014 	ldrb.w	r3, [fp, #20]
    78de:	2b05      	cmp	r3, #5
    78e0:	f47f af63 	bne.w	77aa <isr+0x137a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    78e4:	2300      	movs	r3, #0
    78e6:	9300      	str	r3, [sp, #0]
    78e8:	2204      	movs	r2, #4
    78ea:	4619      	mov	r1, r3
    78ec:	4618      	mov	r0, r3
    78ee:	f7fb fc65 	bl	31bc <ticker_stop>
    78f2:	e75a      	b.n	77aa <isr+0x137a>
	if (_radio.conn_curr == 0) {
    78f4:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    78f8:	2800      	cmp	r0, #0
    78fa:	f43f af56 	beq.w	77aa <isr+0x137a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    78fe:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    7902:	b189      	cbz	r1, 7928 <isr+0x14f8>
    7904:	f89b 3013 	ldrb.w	r3, [fp, #19]
    7908:	2b03      	cmp	r3, #3
    790a:	d003      	beq.n	7914 <isr+0x14e4>
    790c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    7910:	07dc      	lsls	r4, r3, #31
    7912:	d509      	bpl.n	7928 <isr+0x14f8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    7914:	f7fd fa52 	bl	4dbc <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    7918:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    791c:	f7fd fc0c 	bl	5138 <connection_release>
			_radio.conn_curr = NULL;
    7920:	2300      	movs	r3, #0
    7922:	f8cb 3cfc 	str.w	r3, [fp, #3324]	; 0xcfc
    7926:	e740      	b.n	77aa <isr+0x137a>
	latency_event = _radio.conn_curr->latency_event;
    7928:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    792a:	f89b 7d00 	ldrb.w	r7, [fp, #3328]	; 0xd00
	elapsed_event = latency_event + 1;
    792e:	1c75      	adds	r5, r6, #1
    7930:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    7932:	2f00      	cmp	r7, #0
    7934:	d06b      	beq.n	7a0e <isr+0x15de>
		if (_radio.role == ROLE_SLAVE) {
    7936:	f89b 3013 	ldrb.w	r3, [fp, #19]
    793a:	2b03      	cmp	r3, #3
    793c:	d15b      	bne.n	79f6 <isr+0x15c6>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    793e:	f002 fad9 	bl	9ef4 <radio_tmr_aa_restore>
    7942:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    7944:	f002 fadc 	bl	9f00 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    7948:	f8db 7cfc 	ldr.w	r7, [fp, #3324]	; 0xcfc
    794c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 7af4 <isr+0x16c4>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    7950:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    7954:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    7956:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    795a:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    795c:	a363      	add	r3, pc, #396	; (adr r3, 7aec <isr+0x16bc>)
    795e:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    7962:	d83b      	bhi.n	79dc <isr+0x15ac>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    7964:	fba0 0109 	umull	r0, r1, r0, r9
    7968:	f7f8 fc7e 	bl	268 <__aeabi_uldivmod>
    796c:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    796e:	ebaa 0008 	sub.w	r0, sl, r8
    7972:	a35e      	add	r3, pc, #376	; (adr r3, 7aec <isr+0x16bc>)
    7974:	e9d3 2300 	ldrd	r2, r3, [r3]
    7978:	fba0 0109 	umull	r0, r1, r0, r9
    797c:	f7f8 fc74 	bl	268 <__aeabi_uldivmod>
    7980:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    7982:	2200      	movs	r2, #0
    7984:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    7986:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    7988:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    798c:	b36a      	cbz	r2, 79ea <isr+0x15ba>
				if (pdu_data_tx->len ||
    798e:	7952      	ldrb	r2, [r2, #5]
    7990:	b912      	cbnz	r2, 7998 <isr+0x1568>
    7992:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    7996:	b10a      	cbz	r2, 799c <isr+0x156c>
					_radio.conn_curr->latency_event = 0;
    7998:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    799a:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    799c:	f8db 2cfc 	ldr.w	r2, [fp, #3324]	; 0xcfc
    79a0:	2100      	movs	r1, #0
    79a2:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    79a4:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    79a8:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    79aa:	b1aa      	cbz	r2, 79d8 <isr+0x15a8>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    79ac:	4295      	cmp	r5, r2
    79ae:	f080 8085 	bcs.w	7abc <isr+0x168c>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    79b2:	1b52      	subs	r2, r2, r5
    79b4:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    79b6:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    79b8:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    79ba:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    79bc:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    79be:	d97f      	bls.n	7ac0 <isr+0x1690>
			else if (_radio.role == ROLE_SLAVE) {
    79c0:	f89b 2013 	ldrb.w	r2, [fp, #19]
    79c4:	2a03      	cmp	r2, #3
    79c6:	d107      	bne.n	79d8 <isr+0x15a8>
				if (latency_event != 0) {
    79c8:	2e00      	cmp	r6, #0
    79ca:	d179      	bne.n	7ac0 <isr+0x1690>
					force = _radio.conn_curr->slave.force & 0x01;
    79cc:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    79ce:	087a      	lsrs	r2, r7, #1
					if (force) {
    79d0:	f017 0701 	ands.w	r7, r7, #1
    79d4:	d135      	bne.n	7a42 <isr+0x1612>
					_radio.conn_curr->slave.force >>= 1;
    79d6:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    79d8:	2700      	movs	r7, #0
    79da:	e035      	b.n	7a48 <isr+0x1618>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    79dc:	fba8 0109 	umull	r0, r1, r8, r9
    79e0:	f7f8 fc42 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    79e4:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    79e6:	b284      	uxth	r4, r0
    79e8:	e7cb      	b.n	7982 <isr+0x1552>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    79ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    79ee:	07d2      	lsls	r2, r2, #31
    79f0:	d5d4      	bpl.n	799c <isr+0x156c>
				_radio.conn_curr->latency_event =
    79f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    79f4:	e7d1      	b.n	799a <isr+0x156a>
		} else if (reason_peer) {
    79f6:	b141      	cbz	r1, 7a0a <isr+0x15da>
			_radio.conn_curr->master.terminate_ack = 1;
    79f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    79fc:	f043 0301 	orr.w	r3, r3, #1
    7a00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    7a04:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    7a06:	461c      	mov	r4, r3
    7a08:	e7c8      	b.n	799c <isr+0x156c>
	ticks_drift_minus = 0;
    7a0a:	460b      	mov	r3, r1
    7a0c:	e7fb      	b.n	7a06 <isr+0x15d6>
	else if (_radio.conn_curr->connect_expire) {
    7a0e:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    7a10:	b184      	cbz	r4, 7a34 <isr+0x1604>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    7a12:	42a5      	cmp	r5, r4
    7a14:	d204      	bcs.n	7a20 <isr+0x15f0>
			_radio.conn_curr->connect_expire -= elapsed_event;
    7a16:	1b64      	subs	r4, r4, r5
    7a18:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    7a1a:	463c      	mov	r4, r7
    7a1c:	4623      	mov	r3, r4
    7a1e:	e7c1      	b.n	79a4 <isr+0x1574>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    7a20:	213e      	movs	r1, #62	; 0x3e
    7a22:	f7fd f9cb 	bl	4dbc <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    7a26:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7a2a:	f7fd fb85 	bl	5138 <connection_release>
			_radio.conn_curr = NULL;
    7a2e:	f8cb 7cfc 	str.w	r7, [fp, #3324]	; 0xcfc
    7a32:	e6ba      	b.n	77aa <isr+0x137a>
		if (!_radio.conn_curr->supervision_expire) {
    7a34:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    7a36:	2b00      	cmp	r3, #0
    7a38:	d1f0      	bne.n	7a1c <isr+0x15ec>
			_radio.conn_curr->supervision_expire =
    7a3a:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    7a3c:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    7a3e:	461c      	mov	r4, r3
    7a40:	e7b0      	b.n	79a4 <isr+0x1574>
						_radio.conn_curr->slave.force |=
    7a42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    7a46:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    7a48:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    7a4a:	b11a      	cbz	r2, 7a54 <isr+0x1624>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    7a4c:	4295      	cmp	r5, r2
    7a4e:	d239      	bcs.n	7ac4 <isr+0x1694>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    7a50:	1b55      	subs	r5, r2, r5
    7a52:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    7a54:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    7a58:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    7a5c:	4291      	cmp	r1, r2
    7a5e:	d006      	beq.n	7a6e <isr+0x163e>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    7a60:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    7a64:	3a01      	subs	r2, #1
    7a66:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    7a68:	bf9c      	itt	ls
    7a6a:	2200      	movls	r2, #0
    7a6c:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    7a6e:	b917      	cbnz	r7, 7a76 <isr+0x1646>
    7a70:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    7a72:	42b2      	cmp	r2, r6
    7a74:	d028      	beq.n	7ac8 <isr+0x1698>
		lazy = _radio.conn_curr->latency_event + 1;
    7a76:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    7a78:	3101      	adds	r1, #1
    7a7a:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    7a7c:	b924      	cbnz	r4, 7a88 <isr+0x1658>
    7a7e:	b91b      	cbnz	r3, 7a88 <isr+0x1658>
    7a80:	b911      	cbnz	r1, 7a88 <isr+0x1658>
	    (lazy != 0) || (force != 0)) {
    7a82:	2f00      	cmp	r7, #0
    7a84:	f43f ae91 	beq.w	77aa <isr+0x137a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    7a88:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    7a8c:	4a16      	ldr	r2, [pc, #88]	; (7ae8 <isr+0x16b8>)
    7a8e:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    7a90:	3507      	adds	r5, #7
		ticker_status =
    7a92:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    7a94:	b2ed      	uxtb	r5, r5
		ticker_status =
    7a96:	9205      	str	r2, [sp, #20]
    7a98:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    7a9a:	9506      	str	r5, [sp, #24]
		ticker_status =
    7a9c:	4623      	mov	r3, r4
    7a9e:	9704      	str	r7, [sp, #16]
    7aa0:	9102      	str	r1, [sp, #8]
    7aa2:	9101      	str	r1, [sp, #4]
    7aa4:	462a      	mov	r2, r5
    7aa6:	4608      	mov	r0, r1
    7aa8:	f7fb fb3a 	bl	3120 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7aac:	f030 0302 	bics.w	r3, r0, #2
    7ab0:	f43f ae7b 	beq.w	77aa <isr+0x137a>
    7ab4:	f89b 3012 	ldrb.w	r3, [fp, #18]
    7ab8:	429d      	cmp	r5, r3
    7aba:	e6da      	b.n	7872 <isr+0x1442>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    7abc:	2108      	movs	r1, #8
    7abe:	e729      	b.n	7914 <isr+0x14e4>
				force = 1;
    7ac0:	2701      	movs	r7, #1
    7ac2:	e7c1      	b.n	7a48 <isr+0x1618>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    7ac4:	2122      	movs	r1, #34	; 0x22
    7ac6:	e725      	b.n	7914 <isr+0x14e4>
	lazy = 0;
    7ac8:	4639      	mov	r1, r7
    7aca:	e7d7      	b.n	7a7c <isr+0x164c>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    7acc:	3b04      	subs	r3, #4
    7ace:	2b01      	cmp	r3, #1
    7ad0:	f63e ad02 	bhi.w	64d8 <isr+0xa8>
		_radio.state = STATE_NONE;
    7ad4:	2300      	movs	r3, #0
    7ad6:	f88b 3014 	strb.w	r3, [fp, #20]
    7ada:	f7fe bd32 	b.w	6542 <isr+0x112>
    7ade:	f7fd fc54 	bl	538a <isr.part.46>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    7ae2:	2328      	movs	r3, #40	; 0x28
    7ae4:	e507      	b.n	74f6 <isr+0x10c6>
    7ae6:	bf00      	nop
    7ae8:	000052f1 	.word	0x000052f1
    7aec:	1afd498d 	.word	0x1afd498d
    7af0:	00000007 	.word	0x00000007
    7af4:	3b9aca00 	.word	0x3b9aca00

00007af8 <mayfly_xtal_stop_calc>:
{
    7af8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7afa:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    7afc:	2302      	movs	r3, #2
    7afe:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    7b00:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    7b02:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b04:	4e74      	ldr	r6, [pc, #464]	; (7cd8 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    7b06:	4d75      	ldr	r5, [pc, #468]	; (7cdc <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
    7b08:	930a      	str	r3, [sp, #40]	; 0x28
{
    7b0a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    7b0c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    7b0e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    7b12:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b14:	ab09      	add	r3, sp, #36	; 0x24
    7b16:	9302      	str	r3, [sp, #8]
    7b18:	ab0c      	add	r3, sp, #48	; 0x30
    7b1a:	9300      	str	r3, [sp, #0]
    7b1c:	9601      	str	r6, [sp, #4]
    7b1e:	ab0d      	add	r3, sp, #52	; 0x34
    7b20:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    7b24:	2101      	movs	r1, #1
    7b26:	2000      	movs	r0, #0
    7b28:	f7fb fb84 	bl	3234 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    7b2c:	2802      	cmp	r0, #2
    7b2e:	d00b      	beq.n	7b48 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    7b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b32:	b16b      	cbz	r3, 7b50 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7b34:	4040      	eors	r0, r0
    7b36:	f380 8811 	msr	BASEPRI, r0
    7b3a:	f04f 0004 	mov.w	r0, #4
    7b3e:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    7b40:	2101      	movs	r1, #1
    7b42:	2000      	movs	r0, #0
    7b44:	f7fb fbf4 	bl	3330 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    7b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7b4a:	2b02      	cmp	r3, #2
    7b4c:	d0f8      	beq.n	7b40 <mayfly_xtal_stop_calc+0x48>
    7b4e:	e7ef      	b.n	7b30 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    7b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    7b54:	2bff      	cmp	r3, #255	; 0xff
    7b56:	d004      	beq.n	7b62 <mayfly_xtal_stop_calc+0x6a>
    7b58:	f895 2cf8 	ldrb.w	r2, [r5, #3320]	; 0xcf8
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    7b5c:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    7b5e:	4293      	cmp	r3, r2
    7b60:	dad8      	bge.n	7b14 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    7b62:	1f5a      	subs	r2, r3, #5
    7b64:	b2d2      	uxtb	r2, r2
    7b66:	2af9      	cmp	r2, #249	; 0xf9
    7b68:	4f5d      	ldr	r7, [pc, #372]	; (7ce0 <mayfly_xtal_stop_calc+0x1e8>)
    7b6a:	d805      	bhi.n	7b78 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
    7b6c:	4a5b      	ldr	r2, [pc, #364]	; (7cdc <mayfly_xtal_stop_calc+0x1e4>)
    7b6e:	f892 2cf8 	ldrb.w	r2, [r2, #3320]	; 0xcf8
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    7b72:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    7b74:	4293      	cmp	r3, r2
    7b76:	db06      	blt.n	7b86 <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
    7b78:	783b      	ldrb	r3, [r7, #0]
    7b7a:	b113      	cbz	r3, 7b82 <mayfly_xtal_stop_calc+0x8a>
    7b7c:	2001      	movs	r0, #1
    7b7e:	f7fd f865 	bl	4c4c <mayfly_xtal_retain.part.16>
}
    7b82:	b00f      	add	sp, #60	; 0x3c
    7b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    7b86:	a90a      	add	r1, sp, #40	; 0x28
    7b88:	b2e0      	uxtb	r0, r4
    7b8a:	f7fd f841 	bl	4c10 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    7b8e:	2800      	cmp	r0, #0
    7b90:	d0d0      	beq.n	7b34 <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    7b92:	6803      	ldr	r3, [r0, #0]
    7b94:	6844      	ldr	r4, [r0, #4]
    7b96:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    7b98:	bfb8      	it	lt
    7b9a:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    7b9c:	429c      	cmp	r4, r3
    7b9e:	bf38      	it	cc
    7ba0:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    7ba2:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7ba4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    7ba8:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    7baa:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    7bac:	f7fd f830 	bl	4c10 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    7bb0:	4605      	mov	r5, r0
    7bb2:	2800      	cmp	r0, #0
    7bb4:	d0be      	beq.n	7b34 <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7bb6:	6886      	ldr	r6, [r0, #8]
    7bb8:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    7bba:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    7bbc:	429e      	cmp	r6, r3
    7bbe:	bf38      	it	cc
    7bc0:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    7bc2:	2a00      	cmp	r2, #0
    7bc4:	da05      	bge.n	7bd2 <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
    7bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    7bc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    7bcc:	4433      	add	r3, r6
    7bce:	1a9b      	subs	r3, r3, r2
    7bd0:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    7bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    7bd4:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    7bd8:	4293      	cmp	r3, r2
    7bda:	d20b      	bcs.n	7bf4 <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
    7bdc:	783b      	ldrb	r3, [r7, #0]
    7bde:	b113      	cbz	r3, 7be6 <mayfly_xtal_stop_calc+0xee>
    7be0:	2001      	movs	r0, #1
    7be2:	f7fd f833 	bl	4c4c <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    7be6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    7bea:	2101      	movs	r1, #1
    7bec:	4628      	mov	r0, r5
    7bee:	f7fd f8c1 	bl	4d74 <prepare_normal_set>
    7bf2:	e7c6      	b.n	7b82 <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
    7bf4:	783a      	ldrb	r2, [r7, #0]
    7bf6:	b93a      	cbnz	r2, 7c08 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
    7bf8:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    7bfa:	4b3a      	ldr	r3, [pc, #232]	; (7ce4 <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    7bfc:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    7bfe:	4611      	mov	r1, r2
    7c00:	f7fa fc94 	bl	252c <mayfly_enqueue>
			LL_ASSERT(!retval);
    7c04:	2800      	cmp	r0, #0
    7c06:	d195      	bne.n	7b34 <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    7c08:	682b      	ldr	r3, [r5, #0]
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	db15      	blt.n	7c3a <mayfly_xtal_stop_calc+0x142>
    7c0e:	429e      	cmp	r6, r3
    7c10:	d213      	bcs.n	7c3a <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    7c12:	1b9b      	subs	r3, r3, r6
			ticker_status =
    7c14:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    7c16:	b29b      	uxth	r3, r3
			ticker_status =
    7c18:	4933      	ldr	r1, [pc, #204]	; (7ce8 <mayfly_xtal_stop_calc+0x1f0>)
    7c1a:	9105      	str	r1, [sp, #20]
    7c1c:	9302      	str	r3, [sp, #8]
    7c1e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    7c22:	9506      	str	r5, [sp, #24]
    7c24:	9004      	str	r0, [sp, #16]
    7c26:	9003      	str	r0, [sp, #12]
    7c28:	9001      	str	r0, [sp, #4]
    7c2a:	9000      	str	r0, [sp, #0]
    7c2c:	2101      	movs	r1, #1
    7c2e:	f7fb fa77 	bl	3120 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7c32:	f030 0302 	bics.w	r3, r0, #2
    7c36:	f47f af7d 	bne.w	7b34 <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
    7c3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    7c3c:	2e00      	cmp	r6, #0
    7c3e:	d0a0      	beq.n	7b82 <mayfly_xtal_stop_calc+0x8a>
    7c40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    7c42:	2d00      	cmp	r5, #0
    7c44:	d09d      	beq.n	7b82 <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    7c46:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    7c48:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    7c4a:	429a      	cmp	r2, r3
    7c4c:	d199      	bne.n	7b82 <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    7c4e:	4827      	ldr	r0, [pc, #156]	; (7cec <mayfly_xtal_stop_calc+0x1f4>)
    7c50:	b292      	uxth	r2, r2
    7c52:	fba2 0100 	umull	r0, r1, r2, r0
    7c56:	f240 1323 	movw	r3, #291	; 0x123
    7c5a:	fb03 1102 	mla	r1, r3, r2, r1
    7c5e:	a31c      	add	r3, pc, #112	; (adr r3, 7cd0 <mayfly_xtal_stop_calc+0x1d8>)
    7c60:	e9d3 2300 	ldrd	r2, r3, [r3]
    7c64:	f7f8 fb00 	bl	268 <__aeabi_uldivmod>
    7c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7c6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    7c6e:	2200      	movs	r2, #0
    7c70:	4298      	cmp	r0, r3
    7c72:	d318      	bcc.n	7ca6 <mayfly_xtal_stop_calc+0x1ae>
    7c74:	b102      	cbz	r2, 7c78 <mayfly_xtal_stop_calc+0x180>
    7c76:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    7c78:	f996 201d 	ldrsb.w	r2, [r6, #29]
    7c7c:	2a00      	cmp	r2, #0
    7c7e:	f995 201d 	ldrsb.w	r2, [r5, #29]
    7c82:	da13      	bge.n	7cac <mayfly_xtal_stop_calc+0x1b4>
    7c84:	2a00      	cmp	r2, #0
    7c86:	f6ff af7c 	blt.w	7b82 <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
    7c8a:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    7c8c:	429c      	cmp	r4, r3
    7c8e:	f67f af78 	bls.w	7b82 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
    7c92:	4630      	mov	r0, r6
    7c94:	f7fc fa5e 	bl	4154 <conn_update_req>
				if (status == 2) {
    7c98:	2802      	cmp	r0, #2
    7c9a:	f47f af72 	bne.w	7b82 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
    7c9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    7ca0:	f7fc fa58 	bl	4154 <conn_update_req>
    7ca4:	e76d      	b.n	7b82 <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
    7ca6:	1a1b      	subs	r3, r3, r0
    7ca8:	2201      	movs	r2, #1
    7caa:	e7e1      	b.n	7c70 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
    7cac:	2a00      	cmp	r2, #0
    7cae:	f6bf af68 	bge.w	7b82 <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
    7cb2:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    7cb4:	429c      	cmp	r4, r3
    7cb6:	f67f af64 	bls.w	7b82 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
    7cba:	4628      	mov	r0, r5
    7cbc:	f7fc fa4a 	bl	4154 <conn_update_req>
				if (status == 2) {
    7cc0:	2802      	cmp	r0, #2
    7cc2:	f47f af5e 	bne.w	7b82 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
    7cc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    7cc8:	e7ea      	b.n	7ca0 <mayfly_xtal_stop_calc+0x1a8>
    7cca:	bf00      	nop
    7ccc:	f3af 8000 	nop.w
    7cd0:	1afd498d 	.word	0x1afd498d
    7cd4:	00000007 	.word	0x00000007
    7cd8:	000040c9 	.word	0x000040c9
    7cdc:	200002e0 	.word	0x200002e0
    7ce0:	200010ec 	.word	0x200010ec
    7ce4:	20005f70 	.word	0x20005f70
    7ce8:	000040cd 	.word	0x000040cd
    7cec:	09ce5400 	.word	0x09ce5400

00007cf0 <event_master>:
{
    7cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7cf2:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    7cf4:	4b49      	ldr	r3, [pc, #292]	; (7e1c <event_master+0x12c>)
    7cf6:	7cda      	ldrb	r2, [r3, #19]
{
    7cf8:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    7cfa:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    7cfe:	461d      	mov	r5, r3
    7d00:	b12a      	cbz	r2, 7d0e <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7d02:	4040      	eors	r0, r0
    7d04:	f380 8811 	msr	BASEPRI, r0
    7d08:	f04f 0004 	mov.w	r0, #4
    7d0c:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    7d0e:	7c1b      	ldrb	r3, [r3, #16]
    7d10:	8c22      	ldrh	r2, [r4, #32]
    7d12:	b2db      	uxtb	r3, r3
    7d14:	3207      	adds	r2, #7
    7d16:	4293      	cmp	r3, r2
    7d18:	d1f3      	bne.n	7d02 <event_master+0x12>
	_radio.role = ROLE_MASTER;
    7d1a:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    7d1c:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
    7d20:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    7d24:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    7d26:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    7d28:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    7d2a:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    7d2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    7d2e:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_TX;
    7d32:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    7d34:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    7d36:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    7d38:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    7d3a:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    7d3c:	f7fd f9ae 	bl	509c <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    7d40:	a901      	add	r1, sp, #4
    7d42:	4620      	mov	r0, r4
    7d44:	f7fe fb0e 	bl	6364 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    7d48:	9901      	ldr	r1, [sp, #4]
    7d4a:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    7d4e:	780b      	ldrb	r3, [r1, #0]
    7d50:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    7d54:	f3c2 0240 	ubfx	r2, r2, #1, #1
    7d58:	f362 0382 	bfi	r3, r2, #2, #1
    7d5c:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    7d5e:	4620      	mov	r0, r4
    7d60:	f7fe fa26 	bl	61b0 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    7d64:	2096      	movs	r0, #150	; 0x96
    7d66:	f001 fff5 	bl	9d54 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    7d6a:	4630      	mov	r0, r6
    7d6c:	f001 ff62 	bl	9c34 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    7d70:	9901      	ldr	r1, [sp, #4]
    7d72:	4620      	mov	r0, r4
    7d74:	f7fc ffa7 	bl	4cc6 <tx_packet_set>
	if (conn->data_chan_sel) {
    7d78:	7f63      	ldrb	r3, [r4, #29]
    7d7a:	f013 0f40 	tst.w	r3, #64	; 0x40
    7d7e:	f104 0217 	add.w	r2, r4, #23
    7d82:	d021      	beq.n	7dc8 <event_master+0xd8>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    7d84:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    7d86:	8be1      	ldrh	r1, [r4, #30]
    7d88:	3801      	subs	r0, #1
    7d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7d8e:	b280      	uxth	r0, r0
    7d90:	f7fd fd38 	bl	5804 <chan_sel_2>
	chan_set(data_chan_use);
    7d94:	f7fc fb6c 	bl	4470 <chan_set>
		remainder_us = radio_tmr_start(1,
    7d98:	68ea      	ldr	r2, [r5, #12]
    7d9a:	f107 0109 	add.w	r1, r7, #9
    7d9e:	2001      	movs	r0, #1
    7da0:	f001 ffe4 	bl	9d6c <radio_tmr_start>
		radio_tmr_end_capture();
    7da4:	f002 f8b2 	bl	9f0c <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    7da8:	f894 1020 	ldrb.w	r1, [r4, #32]
    7dac:	3107      	adds	r1, #7
    7dae:	463a      	mov	r2, r7
    7db0:	b2c9      	uxtb	r1, r1
    7db2:	4620      	mov	r0, r4
    7db4:	f7fd fd6a 	bl	588c <preempt_calc>
	if (0 !=
    7db8:	4603      	mov	r3, r0
    7dba:	b328      	cbz	r0, 7e08 <event_master+0x118>
		_radio.state = STATE_STOP;
    7dbc:	2304      	movs	r3, #4
    7dbe:	752b      	strb	r3, [r5, #20]
		radio_disable();
    7dc0:	f001 fede 	bl	9b80 <radio_disable>
}
    7dc4:	b003      	add	sp, #12
    7dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    7dc8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    7dca:	7fa6      	ldrb	r6, [r4, #30]
    7dcc:	fb01 6606 	mla	r6, r1, r6, r6
    7dd0:	7fe1      	ldrb	r1, [r4, #31]
    7dd2:	2025      	movs	r0, #37	; 0x25
    7dd4:	440e      	add	r6, r1
    7dd6:	fb96 f1f0 	sdiv	r1, r6, r0
    7dda:	fb00 6611 	mls	r6, r0, r1, r6
    7dde:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7de0:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    7de2:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7de4:	5c51      	ldrb	r1, [r2, r1]
    7de6:	f006 0607 	and.w	r6, r6, #7
    7dea:	fa41 f606 	asr.w	r6, r1, r6
    7dee:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    7df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    7df4:	d4ce      	bmi.n	7d94 <event_master+0xa4>
		chan_index = chan_next % chan_count;
    7df6:	fbb0 f1f3 	udiv	r1, r0, r3
    7dfa:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    7dfe:	b2c9      	uxtb	r1, r1
    7e00:	4610      	mov	r0, r2
    7e02:	f7fc f96f 	bl	40e4 <chan_sel_remap>
    7e06:	e7c5      	b.n	7d94 <event_master+0xa4>
		ticker_status =
    7e08:	4a05      	ldr	r2, [pc, #20]	; (7e20 <event_master+0x130>)
    7e0a:	4601      	mov	r1, r0
    7e0c:	f7fb fa54 	bl	32b8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7e10:	f030 0302 	bics.w	r3, r0, #2
    7e14:	f47f af75 	bne.w	7d02 <event_master+0x12>
    7e18:	e7d4      	b.n	7dc4 <event_master+0xd4>
    7e1a:	bf00      	nop
    7e1c:	200002e0 	.word	0x200002e0
    7e20:	00004bf9 	.word	0x00004bf9

00007e24 <radio_init>:
{
    7e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    7e28:	4e3e      	ldr	r6, [pc, #248]	; (7f24 <radio_init+0x100>)
{
    7e2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7e2c:	f89d c01c 	ldrb.w	ip, [sp, #28]
    7e30:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    7e34:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    7e38:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    7e3c:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    7e3e:	f44f 7082 	mov.w	r0, #260	; 0x104
    7e42:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    7e46:	f886 1d08 	strb.w	r1, [r6, #3336]	; 0xd08
	_radio.conn_pool = mem_radio;
    7e4a:	f8c6 4cf0 	str.w	r4, [r6, #3312]	; 0xcf0
	mem_radio_end = mem_radio + mem_size;
    7e4e:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    7e50:	f10c 0401 	add.w	r4, ip, #1
    7e54:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    7e56:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    7e58:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    7e5c:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    7e60:	f5b4 7f81 	cmp.w	r4, #258	; 0x102
	rx_count_max += 3;
    7e64:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    7e66:	bf98      	it	ls
    7e68:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    7e6c:	f8a6 8d14 	strh.w	r8, [r6, #3348]	; 0xd14
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    7e70:	bf88      	it	hi
    7e72:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    7e76:	f886 2d34 	strb.w	r2, [r6, #3380]	; 0xd34
		_radio.packet_rx_data_pool_size =
    7e7a:	bf8c      	ite	hi
    7e7c:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    7e80:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    7e84:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    7e88:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    7e8c:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    7e90:	bf8c      	ite	hi
    7e92:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    7e96:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    7e98:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    7e9c:	f8a6 2d16 	strh.w	r2, [r6, #3350]	; 0xd16
	_radio.packet_tx_count = (tx_count_max + 1);
    7ea0:	f886 cd54 	strb.w	ip, [r6, #3412]	; 0xd54
	_radio.packet_rx = (void *)mem_radio;
    7ea4:	f8c6 0d1c 	str.w	r0, [r6, #3356]	; 0xd1c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7ea8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    7eac:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7eb0:	f8b6 4d16 	ldrh.w	r4, [r6, #3350]	; 0xd16
	_radio.pkt_tx = (void *)mem_radio;
    7eb4:	f8c6 0d4c 	str.w	r0, [r6, #3404]	; 0xd4c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7eb8:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7eba:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    7ebe:	f8c6 0d50 	str.w	r0, [r6, #3408]	; 0xd50
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    7ec2:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7ec4:	f8a6 2d18 	strh.w	r2, [r6, #3352]	; 0xd18
	_radio.pkt_rx_data_pool = mem_radio;
    7ec8:	f8c6 0d0c 	str.w	r0, [r6, #3340]	; 0xd0c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7ecc:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    7ed0:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    7ed2:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    7ed6:	f8c6 0d24 	str.w	r0, [r6, #3364]	; 0xd24
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    7eda:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    7ede:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    7ee2:	f8c6 0d38 	str.w	r0, [r6, #3384]	; 0xd38
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    7ee6:	340a      	adds	r4, #10
    7ee8:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    7eec:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    7eee:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    7ef0:	f8a6 4d48 	strh.w	r4, [r6, #3400]	; 0xd48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    7ef4:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    7ef8:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    7efa:	f886 3cf8 	strb.w	r3, [r6, #3320]	; 0xcf8
	_radio.packet_rx_count = (rx_count_max + 1);
    7efe:	f886 ed20 	strb.w	lr, [r6, #3360]	; 0xd20
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7f02:	f886 2d1a 	strb.w	r2, [r6, #3354]	; 0xd1a
	_radio.pkt_tx_data_pool = mem_radio;
    7f06:	f8c6 0d40 	str.w	r0, [r6, #3392]	; 0xd40
	if (retcode) {
    7f0a:	d003      	beq.n	7f14 <radio_init+0xf0>
		return (retcode + mem_size);
    7f0c:	442c      	add	r4, r5
}
    7f0e:	4620      	mov	r0, r4
    7f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    7f14:	2301      	movs	r3, #1
    7f16:	f886 3d62 	strb.w	r3, [r6, #3426]	; 0xd62
	common_init();
    7f1a:	f7fd fbf9 	bl	5710 <common_init>
	radio_setup();
    7f1e:	f001 fd59 	bl	99d4 <radio_setup>
	return retcode;
    7f22:	e7f4      	b.n	7f0e <radio_init+0xea>
    7f24:	200002e0 	.word	0x200002e0

00007f28 <ll_reset>:
{
    7f28:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    7f2a:	2103      	movs	r1, #3
    7f2c:	2005      	movs	r0, #5
    7f2e:	f7fc f9a5 	bl	427c <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    7f32:	2104      	movs	r1, #4
    7f34:	2006      	movs	r0, #6
    7f36:	f7fc f9a1 	bl	427c <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    7f3a:	4c22      	ldr	r4, [pc, #136]	; (7fc4 <ll_reset+0x9c>)
    7f3c:	2500      	movs	r5, #0
    7f3e:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    7f42:	b2ab      	uxth	r3, r5
    7f44:	429a      	cmp	r2, r3
    7f46:	f105 0501 	add.w	r5, r5, #1
    7f4a:	d835      	bhi.n	7fb8 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    7f4c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    7f50:	f36f 13c7 	bfc	r3, #7, #1
    7f54:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    7f58:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	_radio.advertiser.conn = NULL;
    7f5c:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    7f5e:	f360 0300 	bfi	r3, r0, #0, #1
    7f62:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7f66:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    7f6a:	f8b4 3d16 	ldrh.w	r3, [r4, #3350]	; 0xd16
    7f6e:	fbb3 f3f2 	udiv	r3, r3, r2
    7f72:	f884 3d1a 	strb.w	r3, [r4, #3354]	; 0xd1a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    7f76:	f894 3d20 	ldrb.w	r3, [r4, #3360]	; 0xd20
	_radio.packet_rx_last = 0;
    7f7a:	f884 0d21 	strb.w	r0, [r4, #3361]	; 0xd21
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    7f7e:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    7f80:	f884 0d55 	strb.w	r0, [r4, #3413]	; 0xd55
	_radio.packet_release_last = 0;
    7f84:	f884 0d58 	strb.w	r0, [r4, #3416]	; 0xd58
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    7f88:	f884 3d34 	strb.w	r3, [r4, #3380]	; 0xd34
	_radio.fc_ack = _radio.fc_req;
    7f8c:	f894 3d60 	ldrb.w	r3, [r4, #3424]	; 0xd60
	_radio.advertiser.conn = NULL;
    7f90:	f8c4 0c18 	str.w	r0, [r4, #3096]	; 0xc18
	_radio.scanner.conn = NULL;
    7f94:	f8c4 0c54 	str.w	r0, [r4, #3156]	; 0xc54
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    7f98:	f8a4 2d18 	strh.w	r2, [r4, #3352]	; 0xd18
	_radio.packet_rx_acquire = 0;
    7f9c:	f884 0d22 	strb.w	r0, [r4, #3362]	; 0xd22
	_radio.packet_tx_last = 0;
    7fa0:	f884 0d56 	strb.w	r0, [r4, #3414]	; 0xd56
	_radio.packet_release_first = 0;
    7fa4:	f884 0d57 	strb.w	r0, [r4, #3415]	; 0xd57
	_radio.fc_ack = _radio.fc_req;
    7fa8:	f884 3d61 	strb.w	r3, [r4, #3425]	; 0xd61
	ll_filter_reset(false);
    7fac:	f001 fbe4 	bl	9778 <ll_filter_reset>
}
    7fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    7fb4:	f7fd bbac 	b.w	5710 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    7fb8:	1da8      	adds	r0, r5, #6
    7fba:	21ff      	movs	r1, #255	; 0xff
    7fbc:	b2c0      	uxtb	r0, r0
    7fbe:	f7fc f95d 	bl	427c <role_disable>
    7fc2:	e7bc      	b.n	7f3e <ll_reset+0x16>
    7fc4:	200002e0 	.word	0x200002e0

00007fc8 <radio_adv_data_get>:
}
    7fc8:	4800      	ldr	r0, [pc, #0]	; (7fcc <radio_adv_data_get+0x4>)
    7fca:	4770      	bx	lr
    7fcc:	2000030b 	.word	0x2000030b

00007fd0 <radio_aux_adv_data_get>:
}
    7fd0:	4800      	ldr	r0, [pc, #0]	; (7fd4 <radio_aux_adv_data_get+0x4>)
    7fd2:	4770      	bx	lr
    7fd4:	2000050f 	.word	0x2000050f

00007fd8 <radio_chain_adv_data_get>:
}
    7fd8:	4800      	ldr	r0, [pc, #0]	; (7fdc <radio_chain_adv_data_get+0x4>)
    7fda:	4770      	bx	lr
    7fdc:	20000713 	.word	0x20000713

00007fe0 <radio_scan_data_get>:
}
    7fe0:	4800      	ldr	r0, [pc, #0]	; (7fe4 <radio_scan_data_get+0x4>)
    7fe2:	4770      	bx	lr
    7fe4:	20000cf1 	.word	0x20000cf1

00007fe8 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    7fe8:	4b02      	ldr	r3, [pc, #8]	; (7ff4 <ll_adv_is_enabled+0xc>)
    7fea:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    7fee:	09c0      	lsrs	r0, r0, #7
    7ff0:	4770      	bx	lr
    7ff2:	bf00      	nop
    7ff4:	200002e0 	.word	0x200002e0

00007ff8 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    7ff8:	4b05      	ldr	r3, [pc, #20]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
    7ffa:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    7ffe:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    8000:	bfba      	itte	lt
    8002:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    8006:	f000 0003 	andlt.w	r0, r0, #3
    800a:	2000      	movge	r0, #0
}
    800c:	4770      	bx	lr
    800e:	bf00      	nop
    8010:	200002e0 	.word	0x200002e0

00008014 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8014:	4a09      	ldr	r2, [pc, #36]	; (803c <ll_scan_is_enabled+0x28>)
    8016:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
    801a:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
	       (_radio.scanner.conn ? BIT(2) : 0);
    801e:	f8d2 2c54 	ldr.w	r2, [r2, #3156]	; 0xc54
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8022:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    8026:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8028:	f003 0301 	and.w	r3, r3, #1
    802c:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    8030:	bf14      	ite	ne
    8032:	2004      	movne	r0, #4
    8034:	2000      	moveq	r0, #0
}
    8036:	4318      	orrs	r0, r3
    8038:	4770      	bx	lr
    803a:	bf00      	nop
    803c:	200002e0 	.word	0x200002e0

00008040 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    8040:	4b05      	ldr	r3, [pc, #20]	; (8058 <radio_scan_filter_pol_get+0x18>)
    8042:	f893 0c2c 	ldrb.w	r0, [r3, #3116]	; 0xc2c
    8046:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    804a:	bf1c      	itt	ne
    804c:	f893 0c2d 	ldrbne.w	r0, [r3, #3117]	; 0xc2d
    8050:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    8054:	4770      	bx	lr
    8056:	bf00      	nop
    8058:	200002e0 	.word	0x200002e0

0000805c <ll_tx_pwr_lvl_get>:
{
    805c:	b510      	push	{r4, lr}
    805e:	4614      	mov	r4, r2
	conn = connection_get(handle);
    8060:	f7fc f8f6 	bl	4250 <connection_get>
	if (!conn) {
    8064:	b110      	cbz	r0, 806c <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    8066:	2000      	movs	r0, #0
    8068:	7020      	strb	r0, [r4, #0]
	return 0;
    806a:	bd10      	pop	{r4, pc}
		return 1;
    806c:	2001      	movs	r0, #1
}
    806e:	bd10      	pop	{r4, pc}

00008070 <ll_rx_get>:
{
    8070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8074:	4605      	mov	r5, r0
    8076:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    8078:	4918      	ldr	r1, [pc, #96]	; (80dc <ll_rx_get+0x6c>)
    807a:	f8d1 3d2c 	ldr.w	r3, [r1, #3372]	; 0xd2c
    807e:	f8d1 2d30 	ldr.w	r2, [r1, #3376]	; 0xd30
    8082:	4293      	cmp	r3, r2
    8084:	460f      	mov	r7, r1
    8086:	d01f      	beq.n	80c8 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    8088:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    808c:	f601 5157 	addw	r1, r1, #3415	; 0xd57
    8090:	f898 2000 	ldrb.w	r2, [r8]
    8094:	f7fc f892 	bl	41bc <tx_cmplt_get>
		if (!cmplt) {
    8098:	4604      	mov	r4, r0
    809a:	b9e0      	cbnz	r0, 80d6 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    809c:	ae02      	add	r6, sp, #8
    809e:	f897 3d57 	ldrb.w	r3, [r7, #3415]	; 0xd57
    80a2:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    80a6:	f897 2d58 	ldrb.w	r2, [r7, #3416]	; 0xd58
    80aa:	4631      	mov	r1, r6
    80ac:	f10d 0006 	add.w	r0, sp, #6
    80b0:	f7fc f884 	bl	41bc <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    80b4:	b934      	cbnz	r4, 80c4 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    80b6:	b928      	cbnz	r0, 80c4 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    80b8:	f8c5 8000 	str.w	r8, [r5]
}
    80bc:	4620      	mov	r0, r4
    80be:	b002      	add	sp, #8
    80c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    80c4:	4604      	mov	r4, r0
    80c6:	e7ee      	b.n	80a6 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    80c8:	f891 2d58 	ldrb.w	r2, [r1, #3416]	; 0xd58
    80cc:	f601 5157 	addw	r1, r1, #3415	; 0xd57
    80d0:	f7fc f874 	bl	41bc <tx_cmplt_get>
    80d4:	4604      	mov	r4, r0
		*node_rx = NULL;
    80d6:	2300      	movs	r3, #0
    80d8:	602b      	str	r3, [r5, #0]
    80da:	e7ef      	b.n	80bc <ll_rx_get+0x4c>
    80dc:	200002e0 	.word	0x200002e0

000080e0 <ll_rx_mem_release>:
{
    80e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    80e4:	4c16      	ldr	r4, [pc, #88]	; (8140 <ll_rx_mem_release+0x60>)
{
    80e6:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    80e8:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    80ea:	f5a4 6651 	sub.w	r6, r4, #3344	; 0xd10
			mem_release(conn, &_radio.conn_free);
    80ee:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    80f2:	b920      	cbnz	r0, 80fe <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    80f4:	6028      	str	r0, [r5, #0]
}
    80f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    80fa:	f7fd babf 	b.w	567c <packet_rx_allocate.constprop.51>
		switch (_node_rx_free->hdr.type) {
    80fe:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    8100:	f8d0 8000 	ldr.w	r8, [r0]
    8104:	2a0a      	cmp	r2, #10
    8106:	d807      	bhi.n	8118 <ll_rx_mem_release+0x38>
    8108:	2301      	movs	r3, #1
    810a:	4093      	lsls	r3, r2
    810c:	f240 727e 	movw	r2, #1918	; 0x77e
    8110:	4213      	tst	r3, r2
    8112:	d107      	bne.n	8124 <ll_rx_mem_release+0x44>
    8114:	061b      	lsls	r3, r3, #24
    8116:	d40a      	bmi.n	812e <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
    8118:	4040      	eors	r0, r0
    811a:	f380 8811 	msr	BASEPRI, r0
    811e:	f04f 0004 	mov.w	r0, #4
    8122:	df02      	svc	2
			mem_release(_node_rx_free,
    8124:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    8126:	f7fa f962 	bl	23ee <mem_release>
{
    812a:	4640      	mov	r0, r8
    812c:	e7e1      	b.n	80f2 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    812e:	88c2      	ldrh	r2, [r0, #6]
    8130:	f8d6 0cf0 	ldr.w	r0, [r6, #3312]	; 0xcf0
    8134:	f44f 7182 	mov.w	r1, #260	; 0x104
    8138:	f7fa f96e 	bl	2418 <mem_get>
			mem_release(conn, &_radio.conn_free);
    813c:	4639      	mov	r1, r7
    813e:	e7f2      	b.n	8126 <ll_rx_mem_release+0x46>
    8140:	20000ff0 	.word	0x20000ff0

00008144 <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    8144:	4291      	cmp	r1, r2
{
    8146:	b510      	push	{r4, lr}
    8148:	4b14      	ldr	r3, [pc, #80]	; (819c <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    814a:	d119      	bne.n	8180 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    814c:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
    8150:	f8d3 4d2c 	ldr.w	r4, [r3, #3372]	; 0xd2c
    8154:	4294      	cmp	r4, r2
    8156:	d111      	bne.n	817c <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    8158:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    815a:	bf14      	ite	ne
    815c:	460a      	movne	r2, r1
    815e:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    8160:	3a01      	subs	r2, #1
    8162:	b2d2      	uxtb	r2, r2
    8164:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    8168:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    816c:	f893 2d60 	ldrb.w	r2, [r3, #3424]	; 0xd60
			_radio.fc_handle[--ack1] = handle;
    8170:	f8a4 0d5a 	strh.w	r0, [r4, #3418]	; 0xd5a
			if (req != _radio.fc_req) {
    8174:	4291      	cmp	r1, r2
    8176:	d00f      	beq.n	8198 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    8178:	f883 1d61 	strb.w	r1, [r3, #3425]	; 0xd61

				return 1;
			}
		} else {
			return 1;
    817c:	2001      	movs	r0, #1
    817e:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    8180:	b929      	cbnz	r1, 818e <do_radio_rx_fc_set+0x4a>
    8182:	f8b3 3d5e 	ldrh.w	r3, [r3, #3422]	; 0xd5e
				return 1;
    8186:	1a18      	subs	r0, r3, r0
    8188:	bf18      	it	ne
    818a:	2001      	movne	r0, #1
    818c:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    818e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8192:	f8b3 3d58 	ldrh.w	r3, [r3, #3416]	; 0xd58
    8196:	e7f6      	b.n	8186 <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    8198:	2000      	movs	r0, #0
}
    819a:	bd10      	pop	{r4, pc}
    819c:	200002e0 	.word	0x200002e0

000081a0 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    81a0:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    81a2:	4b14      	ldr	r3, [pc, #80]	; (81f4 <radio_rx_fc_set+0x54>)
    81a4:	f893 2d62 	ldrb.w	r2, [r3, #3426]	; 0xd62
{
    81a8:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    81aa:	b302      	cbz	r2, 81ee <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    81ac:	f893 2d60 	ldrb.w	r2, [r3, #3424]	; 0xd60
    81b0:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    81b2:	f893 2d61 	ldrb.w	r2, [r3, #3425]	; 0xd61

		if (fc) {
    81b6:	b135      	cbz	r5, 81c6 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    81b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    81bc:	4298      	cmp	r0, r3
    81be:	d016      	beq.n	81ee <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    81c0:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    81c2:	f7ff bfbf 	b.w	8144 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    81c6:	f8d3 0d2c 	ldr.w	r0, [r3, #3372]	; 0xd2c
    81ca:	f8d3 4d30 	ldr.w	r4, [r3, #3376]	; 0xd30
    81ce:	42a0      	cmp	r0, r4
    81d0:	d10d      	bne.n	81ee <radio_rx_fc_set+0x4e>
    81d2:	4291      	cmp	r1, r2
    81d4:	d00b      	beq.n	81ee <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    81d6:	f8d3 4d30 	ldr.w	r4, [r3, #3376]	; 0xd30
			_radio.fc_ack = req;
    81da:	f883 1d61 	strb.w	r1, [r3, #3425]	; 0xd61
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    81de:	42a0      	cmp	r0, r4
    81e0:	d005      	beq.n	81ee <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    81e2:	f893 0d60 	ldrb.w	r0, [r3, #3424]	; 0xd60
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    81e6:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    81e8:	bf08      	it	eq
    81ea:	f883 2d61 	strbeq.w	r2, [r3, #3425]	; 0xd61
}
    81ee:	2000      	movs	r0, #0
    81f0:	bc30      	pop	{r4, r5}
    81f2:	4770      	bx	lr
    81f4:	200002e0 	.word	0x200002e0

000081f8 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    81f8:	4770      	bx	lr
    81fa:	0000      	movs	r0, r0
    81fc:	0000      	movs	r0, r0
	...

00008200 <radio_adv_enable>:
{
    8200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8204:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8206:	2302      	movs	r3, #2
	if (_radio.advertiser.is_enabled) {
    8208:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 84ec <radio_adv_enable+0x2ec>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    820c:	930d      	str	r3, [sp, #52]	; 0x34
	radio_ext_adv_enable_flag = false;
    820e:	4bb0      	ldr	r3, [pc, #704]	; (84d0 <radio_adv_enable+0x2d0>)
{
    8210:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	radio_ext_adv_enable_flag = false;
    8214:	2400      	movs	r4, #0
    8216:	701c      	strb	r4, [r3, #0]
	if (_radio.advertiser.is_enabled) {
    8218:	f99a 3028 	ldrsb.w	r3, [sl, #40]	; 0x28
    821c:	42a3      	cmp	r3, r4
{
    821e:	4680      	mov	r8, r0
    8220:	4691      	mov	r9, r2
    8222:	4655      	mov	r5, sl
	if (_radio.advertiser.is_enabled) {
    8224:	da01      	bge.n	822a <radio_adv_enable+0x2a>
	return BT_HCI_ERR_CMD_DISALLOWED;
    8226:	200c      	movs	r0, #12
    8228:	e14b      	b.n	84c2 <radio_adv_enable+0x2c2>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    822a:	f89a 722e 	ldrb.w	r7, [sl, #558]	; 0x22e
    822e:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    8232:	372b      	adds	r7, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    8234:	f81a 3007 	ldrb.w	r3, [sl, r7]
    8238:	f003 030f 	and.w	r3, r3, #15
    823c:	2b01      	cmp	r3, #1
    823e:	d86f      	bhi.n	8320 <radio_adv_enable+0x120>
		if (_radio.advertiser.conn) {
    8240:	f8da 6c18 	ldr.w	r6, [sl, #3096]	; 0xc18
    8244:	2e00      	cmp	r6, #0
    8246:	d1ee      	bne.n	8226 <radio_adv_enable+0x26>
		link = mem_acquire(&_radio.link_rx_free);
    8248:	f60a 5028 	addw	r0, sl, #3368	; 0xd28
    824c:	f7fa f8b5 	bl	23ba <mem_acquire>
		if (!link) {
    8250:	4683      	mov	fp, r0
    8252:	b150      	cbz	r0, 826a <radio_adv_enable+0x6a>
		conn = mem_acquire(&_radio.conn_free);
    8254:	f60a 40f4 	addw	r0, sl, #3316	; 0xcf4
    8258:	f7fa f8af 	bl	23ba <mem_acquire>
		if (!conn) {
    825c:	4604      	mov	r4, r0
    825e:	b930      	cbnz	r0, 826e <radio_adv_enable+0x6e>
			mem_release(link, &_radio.link_rx_free);
    8260:	f60a 5128 	addw	r1, sl, #3368	; 0xd28
    8264:	4658      	mov	r0, fp
    8266:	f7fa f8c2 	bl	23ee <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    826a:	2007      	movs	r0, #7
    826c:	e129      	b.n	84c2 <radio_adv_enable+0x2c2>
		conn->handle = 0xFFFF;
    826e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8272:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    8274:	4b97      	ldr	r3, [pc, #604]	; (84d4 <radio_adv_enable+0x2d4>)
    8276:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    827a:	7f43      	ldrb	r3, [r0, #29]
		conn->data_chan_use = 0;
    827c:	77c6      	strb	r6, [r0, #31]
		conn->data_chan_sel = 0;
    827e:	f366 1386 	bfi	r3, r6, #6, #1
		conn->role = 1;
    8282:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8286:	7743      	strb	r3, [r0, #29]
		conn->connect_expire = 6;
    8288:	2306      	movs	r3, #6
    828a:	8583      	strh	r3, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    828c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
		conn->event_counter = 0;
    8290:	8446      	strh	r6, [r0, #34]	; 0x22
		conn->common.fex_valid = 0;
    8292:	f366 1345 	bfi	r3, r6, #5, #1
		conn->slave.latency_enabled = 0;
    8296:	f366 0300 	bfi	r3, r6, #0, #1
		conn->slave.latency_cancel = 0;
    829a:	f366 0341 	bfi	r3, r6, #1, #1
    829e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
		conn->llcp_version.tx = 0;
    82a2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
		conn->latency_prepare = 0;
    82a6:	8506      	strh	r6, [r0, #40]	; 0x28
		conn->llcp_version.tx = 0;
    82a8:	f366 0300 	bfi	r3, r6, #0, #1
		conn->llcp_version.rx = 0;
    82ac:	f366 0341 	bfi	r3, r6, #1, #1
    82b0:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
		conn->sn = 0;
    82b4:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->latency_event = 0;
    82b8:	8546      	strh	r6, [r0, #42]	; 0x2a
		conn->sn = 0;
    82ba:	f366 0300 	bfi	r3, r6, #0, #1
		conn->nesn = 0;
    82be:	f366 0341 	bfi	r3, r6, #1, #1
		conn->pause_rx = 0;
    82c2:	f366 0382 	bfi	r3, r6, #2, #1
		conn->pause_tx = 0;
    82c6:	f366 03c3 	bfi	r3, r6, #3, #1
		conn->enc_rx = 0;
    82ca:	f366 1304 	bfi	r3, r6, #4, #1
		conn->enc_tx = 0;
    82ce:	f366 1345 	bfi	r3, r6, #5, #1
		conn->refresh = 0;
    82d2:	f366 1386 	bfi	r3, r6, #6, #1
		conn->empty = 0;
    82d6:	f366 13c7 	bfi	r3, r6, #7, #1
		conn->slave.window_widening_prepare_us = 0;
    82da:	6446      	str	r6, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    82dc:	6486      	str	r6, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    82de:	6586      	str	r6, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    82e0:	8606      	strh	r6, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    82e2:	8686      	strh	r6, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    82e4:	f880 605c 	strb.w	r6, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    82e8:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d
		conn->llcp_terminate.req = 0;
    82ec:	f880 6098 	strb.w	r6, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    82f0:	f880 6099 	strb.w	r6, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    82f4:	f880 609b 	strb.w	r6, [r0, #155]	; 0x9b
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    82f8:	f8c0 b09c 	str.w	fp, [r0, #156]	; 0x9c
		conn->empty = 0;
    82fc:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    8300:	f8c0 60ec 	str.w	r6, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    8304:	f8c0 60f0 	str.w	r6, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    8308:	f8c0 60f4 	str.w	r6, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    830c:	f8c0 60f8 	str.w	r6, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    8310:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    8314:	f880 6100 	strb.w	r6, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    8318:	f880 6101 	strb.w	r6, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    831c:	f8ca 0c18 	str.w	r0, [sl, #3096]	; 0xc18
	_radio.advertiser.chan_map = chan_map;
    8320:	a80e      	add	r0, sp, #56	; 0x38
    8322:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
    8326:	f810 2d09 	ldrb.w	r2, [r0, #-9]!
    832a:	f362 1306 	bfi	r3, r2, #4, #3
    832e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	_radio.advertiser.filter_policy = filter_policy;
    8332:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    8336:	f369 0301 	bfi	r3, r9, #0, #2
    833a:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
    833e:	f8d5 3d64 	ldr.w	r3, [r5, #3428]	; 0xd64
    8342:	61eb      	str	r3, [r5, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    8344:	2327      	movs	r3, #39	; 0x27
    8346:	61ab      	str	r3, [r5, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    8348:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    834a:	2300      	movs	r3, #0
    834c:	622b      	str	r3, [r5, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    834e:	f7fa f9cd 	bl	26ec <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    8352:	f81a 6007 	ldrb.w	r6, [sl, r7]
    8356:	f006 060f 	and.w	r6, r6, #15
    835a:	2e01      	cmp	r6, #1
    835c:	d169      	bne.n	8432 <radio_adv_enable+0x232>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    835e:	f44f 7327 	mov.w	r3, #668	; 0x29c
    8362:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    8364:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    8368:	495b      	ldr	r1, [pc, #364]	; (84d8 <radio_adv_enable+0x2d8>)
    836a:	a357      	add	r3, pc, #348	; (adr r3, 84c8 <radio_adv_enable+0x2c8>)
    836c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8370:	fba0 0101 	umull	r0, r1, r0, r1
    8374:	f7f7 ff78 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    8378:	69ef      	ldr	r7, [r5, #28]
    837a:	69ab      	ldr	r3, [r5, #24]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    837c:	6268      	str	r0, [r5, #36]	; 0x24
	ticks_slot_offset =
    837e:	429f      	cmp	r7, r3
    8380:	bf38      	it	cc
    8382:	461f      	movcc	r7, r3
	_radio.advertiser.is_hdcd = !interval &&
    8384:	f1b8 0f00 	cmp.w	r8, #0
    8388:	d15b      	bne.n	8442 <radio_adv_enable+0x242>
    838a:	1e72      	subs	r2, r6, #1
    838c:	4253      	negs	r3, r2
    838e:	4153      	adcs	r3, r2
    8390:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
    8394:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84f0 <radio_adv_enable+0x2f0>
    8398:	f8df b158 	ldr.w	fp, [pc, #344]	; 84f4 <radio_adv_enable+0x2f4>
    839c:	f363 1686 	bfi	r6, r3, #6, #1
    83a0:	f885 6028 	strb.w	r6, [r5, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    83a4:	f016 0640 	ands.w	r6, r6, #64	; 0x40
    83a8:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
    83ac:	d051      	beq.n	8452 <radio_adv_enable+0x252>
		u32_t ticks_now = ticker_ticks_now_get();
    83ae:	f7fa ffd5 	bl	335c <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    83b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    83b4:	f8cd a020 	str.w	sl, [sp, #32]
    83b8:	441f      	add	r7, r3
		u32_t ticks_now = ticker_ticks_now_get();
    83ba:	4606      	mov	r6, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    83bc:	2000      	movs	r0, #0
    83be:	f8cd 901c 	str.w	r9, [sp, #28]
    83c2:	9006      	str	r0, [sp, #24]
    83c4:	f8cd b014 	str.w	fp, [sp, #20]
    83c8:	9704      	str	r7, [sp, #16]
    83ca:	9003      	str	r0, [sp, #12]
    83cc:	9002      	str	r0, [sp, #8]
    83ce:	e88d 0081 	stmia.w	sp, {r0, r7}
    83d2:	4633      	mov	r3, r6
    83d4:	2205      	movs	r2, #5
    83d6:	2103      	movs	r1, #3
    83d8:	f7fa fe52 	bl	3080 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    83dc:	2802      	cmp	r0, #2
    83de:	d034      	beq.n	844a <radio_adv_enable+0x24a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    83e0:	980d      	ldr	r0, [sp, #52]	; 0x34
    83e2:	b9c8      	cbnz	r0, 8418 <radio_adv_enable+0x218>
		ret_cb = TICKER_STATUS_BUSY;
    83e4:	2302      	movs	r3, #2
    83e6:	930d      	str	r3, [sp, #52]	; 0x34
		ret =
    83e8:	4b3c      	ldr	r3, [pc, #240]	; (84dc <radio_adv_enable+0x2dc>)
    83ea:	9305      	str	r3, [sp, #20]
    83ec:	2203      	movs	r2, #3
    83ee:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    83f2:	9300      	str	r3, [sp, #0]
    83f4:	f8cd a020 	str.w	sl, [sp, #32]
    83f8:	f8cd 901c 	str.w	r9, [sp, #28]
    83fc:	9006      	str	r0, [sp, #24]
    83fe:	9004      	str	r0, [sp, #16]
    8400:	9003      	str	r0, [sp, #12]
    8402:	9002      	str	r0, [sp, #8]
    8404:	9001      	str	r0, [sp, #4]
    8406:	4633      	mov	r3, r6
    8408:	4611      	mov	r1, r2
		ret =
    840a:	f7fa fe39 	bl	3080 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    840e:	2802      	cmp	r0, #2
    8410:	d044      	beq.n	849c <radio_adv_enable+0x29c>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    8412:	980d      	ldr	r0, [sp, #52]	; 0x34
    8414:	2800      	cmp	r0, #0
    8416:	d045      	beq.n	84a4 <radio_adv_enable+0x2a4>
	if (conn) {
    8418:	2c00      	cmp	r4, #0
    841a:	f43f af04 	beq.w	8226 <radio_adv_enable+0x26>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    841e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8422:	492f      	ldr	r1, [pc, #188]	; (84e0 <radio_adv_enable+0x2e0>)
    8424:	f7f9 ffe3 	bl	23ee <mem_release>
		mem_release(conn, &_radio.conn_free);
    8428:	492e      	ldr	r1, [pc, #184]	; (84e4 <radio_adv_enable+0x2e4>)
    842a:	4620      	mov	r0, r4
    842c:	f7f9 ffdf 	bl	23ee <mem_release>
    8430:	e6f9      	b.n	8226 <radio_adv_enable+0x26>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    8432:	2e02      	cmp	r6, #2
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    8434:	bf0c      	ite	eq
    8436:	f44f 7329 	moveq.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    843a:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    843e:	4358      	muls	r0, r3
    8440:	e792      	b.n	8368 <radio_adv_enable+0x168>
    8442:	2300      	movs	r3, #0
    8444:	e7a4      	b.n	8390 <radio_adv_enable+0x190>
				cpu_sleep();
    8446:	f7fb fe1d 	bl	4084 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    844c:	2b02      	cmp	r3, #2
    844e:	d0fa      	beq.n	8446 <radio_adv_enable+0x246>
    8450:	e7c6      	b.n	83e0 <radio_adv_enable+0x1e0>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8452:	f7fa ff83 	bl	335c <ticker_ticks_now_get>
		ret =
    8456:	f8cd a020 	str.w	sl, [sp, #32]
    845a:	f8cd 901c 	str.w	r9, [sp, #28]
    845e:	9606      	str	r6, [sp, #24]
    8460:	f8cd b014 	str.w	fp, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8464:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    8466:	900a      	str	r0, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8468:	481f      	ldr	r0, [pc, #124]	; (84e8 <radio_adv_enable+0x2e8>)
		ret =
    846a:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    846c:	fa1f f888 	uxth.w	r8, r8
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8470:	441f      	add	r7, r3
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8472:	fba8 0100 	umull	r0, r1, r8, r0
    8476:	2391      	movs	r3, #145	; 0x91
    8478:	fb03 1108 	mla	r1, r3, r8, r1
    847c:	a312      	add	r3, pc, #72	; (adr r3, 84c8 <radio_adv_enable+0x2c8>)
    847e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret =
    8482:	9704      	str	r7, [sp, #16]
    8484:	9602      	str	r6, [sp, #8]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    8486:	f7f7 feef 	bl	268 <__aeabi_uldivmod>
		ret =
    848a:	9600      	str	r6, [sp, #0]
				     HAL_TICKER_US_TO_TICKS((u64_t)interval *
    848c:	9001      	str	r0, [sp, #4]
		ret =
    848e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8490:	2205      	movs	r2, #5
    8492:	2103      	movs	r1, #3
    8494:	4630      	mov	r0, r6
    8496:	e7b8      	b.n	840a <radio_adv_enable+0x20a>
			cpu_sleep();
    8498:	f7fb fdf4 	bl	4084 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    849c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    849e:	2b02      	cmp	r3, #2
    84a0:	d0fa      	beq.n	8498 <radio_adv_enable+0x298>
    84a2:	e7b6      	b.n	8412 <radio_adv_enable+0x212>
		_radio.advertiser.is_enabled = 1;
    84a4:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    84a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    84ac:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    84b0:	f895 3c2c 	ldrb.w	r3, [r5, #3116]	; 0xc2c
    84b4:	f013 0401 	ands.w	r4, r3, #1
    84b8:	d103      	bne.n	84c2 <radio_adv_enable+0x2c2>
			ll_adv_scan_state_cb(BIT(0));
    84ba:	2001      	movs	r0, #1
    84bc:	f7ff fe9c 	bl	81f8 <ll_adv_scan_state_cb>
		return 0;
    84c0:	4620      	mov	r0, r4
}
    84c2:	b00f      	add	sp, #60	; 0x3c
    84c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84c8:	1afd498d 	.word	0x1afd498d
    84cc:	00000007 	.word	0x00000007
    84d0:	20001099 	.word	0x20001099
    84d4:	0001400c 	.word	0x0001400c
    84d8:	3b9aca00 	.word	0x3b9aca00
    84dc:	0000564d 	.word	0x0000564d
    84e0:	20001008 	.word	0x20001008
    84e4:	20000fd4 	.word	0x20000fd4
    84e8:	84e72a00 	.word	0x84e72a00
    84ec:	200002e0 	.word	0x200002e0
    84f0:	000040c9 	.word	0x000040c9
    84f4:	000055dd 	.word	0x000055dd

000084f8 <radio_ext_adv_enable>:
{
    84f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84fc:	b093      	sub	sp, #76	; 0x4c
	if (_radio.advertiser.is_enabled) {
    84fe:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8798 <radio_ext_adv_enable+0x2a0>
{
    8502:	930b      	str	r3, [sp, #44]	; 0x2c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8504:	2302      	movs	r3, #2
    8506:	9311      	str	r3, [sp, #68]	; 0x44
	radio_ext_adv_enable_flag = true;
    8508:	4b9b      	ldr	r3, [pc, #620]	; (8778 <radio_ext_adv_enable+0x280>)
{
    850a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
	radio_ext_adv_enable_flag = true;
    850e:	2201      	movs	r2, #1
    8510:	701a      	strb	r2, [r3, #0]
	if (_radio.advertiser.is_enabled) {
    8512:	f999 3028 	ldrsb.w	r3, [r9, #40]	; 0x28
{
    8516:	f89d 8074 	ldrb.w	r8, [sp, #116]	; 0x74
	if (_radio.advertiser.is_enabled) {
    851a:	2b00      	cmp	r3, #0
{
    851c:	4683      	mov	fp, r0
    851e:	468a      	mov	sl, r1
    8520:	464e      	mov	r6, r9
	if (_radio.advertiser.is_enabled) {
    8522:	da01      	bge.n	8528 <radio_ext_adv_enable+0x30>
	return BT_HCI_ERR_CMD_DISALLOWED;
    8524:	200c      	movs	r0, #12
    8526:	e22a      	b.n	897e <radio_ext_adv_enable+0x486>
	pdu_adv = (void *)&_radio.advertiser.adv_data.data
    8528:	f899 722e 	ldrb.w	r7, [r9, #558]	; 0x22e
    852c:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    8530:	372b      	adds	r7, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    8532:	f819 3007 	ldrb.w	r3, [r9, r7]
    8536:	f003 030f 	and.w	r3, r3, #15
    853a:	2b01      	cmp	r3, #1
    853c:	f200 80ff 	bhi.w	873e <radio_ext_adv_enable+0x246>
		if (_radio.advertiser.conn) {
    8540:	f8d9 4c18 	ldr.w	r4, [r9, #3096]	; 0xc18
    8544:	2c00      	cmp	r4, #0
    8546:	d1ed      	bne.n	8524 <radio_ext_adv_enable+0x2c>
		link = mem_acquire(&_radio.link_rx_free);
    8548:	f609 5028 	addw	r0, r9, #3368	; 0xd28
    854c:	f7f9 ff35 	bl	23ba <mem_acquire>
		if (!link) {
    8550:	900e      	str	r0, [sp, #56]	; 0x38
    8552:	b158      	cbz	r0, 856c <radio_ext_adv_enable+0x74>
		conn = mem_acquire(&_radio.conn_free);
    8554:	f609 40f4 	addw	r0, r9, #3316	; 0xcf4
    8558:	f7f9 ff2f 	bl	23ba <mem_acquire>
		if (!conn) {
    855c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    855e:	4605      	mov	r5, r0
    8560:	b930      	cbnz	r0, 8570 <radio_ext_adv_enable+0x78>
			mem_release(link, &_radio.link_rx_free);
    8562:	f609 5128 	addw	r1, r9, #3368	; 0xd28
    8566:	4618      	mov	r0, r3
    8568:	f7f9 ff41 	bl	23ee <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    856c:	2007      	movs	r0, #7
    856e:	e206      	b.n	897e <radio_ext_adv_enable+0x486>
		conn->handle = 0xFFFF;
    8570:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8574:	8401      	strh	r1, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
    8576:	4981      	ldr	r1, [pc, #516]	; (877c <radio_ext_adv_enable+0x284>)
    8578:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
		conn->data_chan_sel = 0;
    857c:	7f41      	ldrb	r1, [r0, #29]
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    857e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
		conn->data_chan_sel = 0;
    8582:	f364 1186 	bfi	r1, r4, #6, #1
		conn->role = 1;
    8586:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn->sn = 0;
    858a:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
		conn->role = 1;
    858e:	7741      	strb	r1, [r0, #29]
		conn->connect_expire = 6;
    8590:	2106      	movs	r1, #6
    8592:	8581      	strh	r1, [r0, #44]	; 0x2c
		conn->common.fex_valid = 0;
    8594:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
		conn->data_chan_use = 0;
    8598:	77c4      	strb	r4, [r0, #31]
		conn->sn = 0;
    859a:	f364 0300 	bfi	r3, r4, #0, #1
		conn->common.fex_valid = 0;
    859e:	f364 1145 	bfi	r1, r4, #5, #1
		conn->nesn = 0;
    85a2:	f364 0341 	bfi	r3, r4, #1, #1
		conn->slave.latency_enabled = 0;
    85a6:	f364 0100 	bfi	r1, r4, #0, #1
		conn->pause_rx = 0;
    85aa:	f364 0382 	bfi	r3, r4, #2, #1
		conn->slave.latency_cancel = 0;
    85ae:	f364 0141 	bfi	r1, r4, #1, #1
		conn->pause_tx = 0;
    85b2:	f364 03c3 	bfi	r3, r4, #3, #1
		conn->slave.latency_cancel = 0;
    85b6:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
		conn->enc_rx = 0;
    85ba:	f364 1304 	bfi	r3, r4, #4, #1
		conn->llcp_version.tx = 0;
    85be:	f890 1090 	ldrb.w	r1, [r0, #144]	; 0x90
		conn->event_counter = 0;
    85c2:	8444      	strh	r4, [r0, #34]	; 0x22
		conn->enc_tx = 0;
    85c4:	f364 1345 	bfi	r3, r4, #5, #1
		conn->llcp_version.tx = 0;
    85c8:	f364 0100 	bfi	r1, r4, #0, #1
		conn->refresh = 0;
    85cc:	f364 1386 	bfi	r3, r4, #6, #1
		conn->llcp_version.rx = 0;
    85d0:	f364 0141 	bfi	r1, r4, #1, #1
		conn->empty = 0;
    85d4:	f364 13c7 	bfi	r3, r4, #7, #1
		conn->latency_prepare = 0;
    85d8:	8504      	strh	r4, [r0, #40]	; 0x28
		conn->latency_event = 0;
    85da:	8544      	strh	r4, [r0, #42]	; 0x2a
		conn->slave.window_widening_prepare_us = 0;
    85dc:	6444      	str	r4, [r0, #68]	; 0x44
		conn->slave.window_widening_event_us = 0;
    85de:	6484      	str	r4, [r0, #72]	; 0x48
		conn->slave.ticks_to_offset = 0;
    85e0:	6584      	str	r4, [r0, #88]	; 0x58
		conn->supervision_expire = 0;
    85e2:	8604      	strh	r4, [r0, #48]	; 0x30
		conn->procedure_expire = 0;
    85e4:	8684      	strh	r4, [r0, #52]	; 0x34
		conn->llcp_req = 0;
    85e6:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
		conn->llcp_ack = 0;
    85ea:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
		conn->llcp_version.rx = 0;
    85ee:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
		conn->llcp_terminate.req = 0;
    85f2:	f880 4098 	strb.w	r4, [r0, #152]	; 0x98
		conn->llcp_terminate.ack = 0;
    85f6:	f880 4099 	strb.w	r4, [r0, #153]	; 0x99
		conn->llcp_terminate.reason_peer = 0;
    85fa:	f880 409b 	strb.w	r4, [r0, #155]	; 0x9b
		conn->empty = 0;
    85fe:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
		conn->pkt_tx_head = NULL;
    8602:	f8c0 40ec 	str.w	r4, [r0, #236]	; 0xec
		conn->pkt_tx_ctrl = NULL;
    8606:	f8c0 40f0 	str.w	r4, [r0, #240]	; 0xf0
		conn->pkt_tx_ctrl_last = NULL;
    860a:	f8c0 40f4 	str.w	r4, [r0, #244]	; 0xf4
		conn->pkt_tx_data = NULL;
    860e:	f8c0 40f8 	str.w	r4, [r0, #248]	; 0xf8
		conn->pkt_tx_last = NULL;
    8612:	f8c0 40fc 	str.w	r4, [r0, #252]	; 0xfc
		conn->packet_tx_head_len = 0;
    8616:	f880 4100 	strb.w	r4, [r0, #256]	; 0x100
		conn->packet_tx_head_offset = 0;
    861a:	f880 4101 	strb.w	r4, [r0, #257]	; 0x101
		_radio.advertiser.conn = conn;
    861e:	f8c9 0c18 	str.w	r0, [r9, #3096]	; 0xc18
	_radio.advertiser.chan_map = chan_map;							//chan_map
    8622:	a812      	add	r0, sp, #72	; 0x48
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    8624:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
	_radio.advertiser.chan_map = chan_map;							//chan_map
    8628:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
	_radio.advertiser.phy_p = phy_p; 								//set phy_p
    862c:	f36b 0343 	bfi	r3, fp, #1, #3
	_radio.advertiser.chan_map = chan_map;							//chan_map
    8630:	f361 1306 	bfi	r3, r1, #4, #3
    8634:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
    8638:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    863c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	_radio.ext_advertiser.aux_chain_count = aux_chain_count;		
    863e:	f886 3c8c 	strb.w	r3, [r6, #3212]	; 0xc8c
	_radio.advertiser.filter_policy = filter_policy;				//filter plicy
    8642:	f896 302a 	ldrb.w	r3, [r6, #42]	; 0x2a
    8646:	f362 0301 	bfi	r3, r2, #0, #2
    864a:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
	_radio.advertiser.hdr.ticks_active_to_start =
    864e:	f8d6 3d64 	ldr.w	r3, [r6, #3428]	; 0xd64
    8652:	61f3      	str	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_xtal_to_start =
    8654:	2327      	movs	r3, #39	; 0x27
    8656:	61b3      	str	r3, [r6, #24]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    8658:	2101      	movs	r1, #1
	_radio.advertiser.hdr.ticks_preempt_to_start =
    865a:	2300      	movs	r3, #0
    865c:	6233      	str	r3, [r6, #32]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    865e:	f7fa f845 	bl	26ec <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    8662:	f819 4007 	ldrb.w	r4, [r9, r7]
    8666:	f004 040f 	and.w	r4, r4, #15
    866a:	2c01      	cmp	r4, #1
    866c:	d169      	bne.n	8742 <radio_ext_adv_enable+0x24a>
		slot_us = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
    866e:	f44f 7327 	mov.w	r3, #668	; 0x29c
    8672:	4358      	muls	r0, r3
			   chan_cnt) - 40 + 352;
    8674:	f500 709c 	add.w	r0, r0, #312	; 0x138
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    8678:	4f41      	ldr	r7, [pc, #260]	; (8780 <radio_ext_adv_enable+0x288>)
    867a:	a33d      	add	r3, pc, #244	; (adr r3, 8770 <radio_ext_adv_enable+0x278>)
    867c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8680:	fba0 0107 	umull	r0, r1, r0, r7
    8684:	f7f7 fdf0 	bl	268 <__aeabi_uldivmod>
	ticks_slot_offset =
    8688:	69f3      	ldr	r3, [r6, #28]
	_radio.advertiser.hdr.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    868a:	6270      	str	r0, [r6, #36]	; 0x24
	ticks_slot_offset =
    868c:	69b0      	ldr	r0, [r6, #24]
    868e:	4283      	cmp	r3, r0
    8690:	bf38      	it	cc
    8692:	4603      	movcc	r3, r0
    8694:	930b      	str	r3, [sp, #44]	; 0x2c
    8696:	46b9      	mov	r9, r7
	_radio.advertiser.is_hdcd = !interval &&
    8698:	f1ba 0f00 	cmp.w	sl, #0
    869c:	d15e      	bne.n	875c <radio_ext_adv_enable+0x264>
    869e:	1e62      	subs	r2, r4, #1
    86a0:	4253      	negs	r3, r2
    86a2:	4153      	adcs	r3, r2
    86a4:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
    86a8:	f363 1486 	bfi	r4, r3, #6, #1
    86ac:	f886 4028 	strb.w	r4, [r6, #40]	; 0x28
	if (_radio.advertiser.is_hdcd) {
    86b0:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    86b4:	d072      	beq.n	879c <radio_ext_adv_enable+0x2a4>
		u32_t ticks_now = ticker_ticks_now_get();
    86b6:	f7fa fe51 	bl	335c <ticker_ticks_now_get>
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
    86bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    86be:	4e31      	ldr	r6, [pc, #196]	; (8784 <radio_ext_adv_enable+0x28c>)
    86c0:	9607      	str	r6, [sp, #28]
    86c2:	441a      	add	r2, r3
    86c4:	4613      	mov	r3, r2
		u32_t ticks_now = ticker_ticks_now_get();
    86c6:	4607      	mov	r7, r0
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    86c8:	4a2f      	ldr	r2, [pc, #188]	; (8788 <radio_ext_adv_enable+0x290>)
    86ca:	9205      	str	r2, [sp, #20]
    86cc:	2000      	movs	r0, #0
    86ce:	ac11      	add	r4, sp, #68	; 0x44
    86d0:	9304      	str	r3, [sp, #16]
    86d2:	e88d 0009 	stmia.w	sp, {r0, r3}
    86d6:	9408      	str	r4, [sp, #32]
    86d8:	9006      	str	r0, [sp, #24]
    86da:	9003      	str	r0, [sp, #12]
    86dc:	9002      	str	r0, [sp, #8]
    86de:	463b      	mov	r3, r7
    86e0:	2205      	movs	r2, #5
    86e2:	2103      	movs	r1, #3
    86e4:	f7fa fccc 	bl	3080 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    86e8:	2802      	cmp	r0, #2
    86ea:	d03b      	beq.n	8764 <radio_ext_adv_enable+0x26c>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    86ec:	9811      	ldr	r0, [sp, #68]	; 0x44
    86ee:	b9c8      	cbnz	r0, 8724 <radio_ext_adv_enable+0x22c>
		ret_cb = TICKER_STATUS_BUSY;
    86f0:	2302      	movs	r3, #2
    86f2:	9311      	str	r3, [sp, #68]	; 0x44
		ret =
    86f4:	4b25      	ldr	r3, [pc, #148]	; (878c <radio_ext_adv_enable+0x294>)
    86f6:	9305      	str	r3, [sp, #20]
    86f8:	2203      	movs	r2, #3
    86fa:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    86fe:	9300      	str	r3, [sp, #0]
    8700:	9408      	str	r4, [sp, #32]
    8702:	9607      	str	r6, [sp, #28]
    8704:	9006      	str	r0, [sp, #24]
    8706:	9004      	str	r0, [sp, #16]
    8708:	9003      	str	r0, [sp, #12]
    870a:	9002      	str	r0, [sp, #8]
    870c:	9001      	str	r0, [sp, #4]
    870e:	463b      	mov	r3, r7
    8710:	4611      	mov	r1, r2
		ret=	
    8712:	f7fa fcb5 	bl	3080 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    8716:	2802      	cmp	r0, #2
    8718:	f000 811d 	beq.w	8956 <radio_ext_adv_enable+0x45e>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
    871c:	9811      	ldr	r0, [sp, #68]	; 0x44
    871e:	2800      	cmp	r0, #0
    8720:	f000 811d 	beq.w	895e <radio_ext_adv_enable+0x466>
	if (conn) {
    8724:	2d00      	cmp	r5, #0
    8726:	f43f aefd 	beq.w	8524 <radio_ext_adv_enable+0x2c>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    872a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    872e:	4918      	ldr	r1, [pc, #96]	; (8790 <radio_ext_adv_enable+0x298>)
    8730:	f7f9 fe5d 	bl	23ee <mem_release>
		mem_release(conn, &_radio.conn_free);
    8734:	4917      	ldr	r1, [pc, #92]	; (8794 <radio_ext_adv_enable+0x29c>)
    8736:	4628      	mov	r0, r5
    8738:	f7f9 fe59 	bl	23ee <mem_release>
    873c:	e6f2      	b.n	8524 <radio_ext_adv_enable+0x2c>
		conn = NULL;
    873e:	2500      	movs	r5, #0
    8740:	e76f      	b.n	8622 <radio_ext_adv_enable+0x12a>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    8742:	2c02      	cmp	r4, #2
    8744:	d103      	bne.n	874e <radio_ext_adv_enable+0x256>
		slot_us = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
    8746:	f44f 7329 	mov.w	r3, #676	; 0x2a4
			   152 + 376) * chan_cnt;
    874a:	4358      	muls	r0, r3
    874c:	e794      	b.n	8678 <radio_ext_adv_enable+0x180>
	else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    874e:	2c07      	cmp	r4, #7
		slot_us = ((RADIO_TICKER_START_PART_US + 2500) * chan_cnt) ;  // 265byte =2120us
    8750:	bf0c      	ite	eq
    8752:	f44f 632f 	moveq.w	r3, #2800	; 0xaf0
			   152 + 376) * chan_cnt;
    8756:	f240 53fc 	movwne	r3, #1532	; 0x5fc
    875a:	e7f6      	b.n	874a <radio_ext_adv_enable+0x252>
    875c:	2300      	movs	r3, #0
    875e:	e7a1      	b.n	86a4 <radio_ext_adv_enable+0x1ac>
				cpu_sleep();
    8760:	f7fb fc90 	bl	4084 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    8764:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8766:	2b02      	cmp	r3, #2
    8768:	d0fa      	beq.n	8760 <radio_ext_adv_enable+0x268>
    876a:	e7bf      	b.n	86ec <radio_ext_adv_enable+0x1f4>
    876c:	f3af 8000 	nop.w
    8770:	1afd498d 	.word	0x1afd498d
    8774:	00000007 	.word	0x00000007
    8778:	20001099 	.word	0x20001099
    877c:	0001400c 	.word	0x0001400c
    8780:	3b9aca00 	.word	0x3b9aca00
    8784:	000040c9 	.word	0x000040c9
    8788:	000055dd 	.word	0x000055dd
    878c:	0000564d 	.word	0x0000564d
    8790:	20001008 	.word	0x20001008
    8794:	20000fd4 	.word	0x20000fd4
    8798:	200002e0 	.word	0x200002e0
		u32_t ticks_now = ticker_ticks_now_get();
    879c:	f7fa fdde 	bl	335c <ticker_ticks_now_get>
		if(((u64_t)interval * 625) <= 100000){
    87a0:	fa1f f28a 	uxth.w	r2, sl
    87a4:	2300      	movs	r3, #0
		u32_t ticks_now = ticker_ticks_now_get();
    87a6:	900e      	str	r0, [sp, #56]	; 0x38
		if(((u64_t)interval * 625) <= 100000){
    87a8:	f240 2071 	movw	r0, #625	; 0x271
    87ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    87b0:	fbaa 0100 	umull	r0, r1, sl, r0
    87b4:	4a76      	ldr	r2, [pc, #472]	; (8990 <radio_ext_adv_enable+0x498>)
		_radio.ext_advertiser.max_skip = skip;
    87b6:	f886 8c68 	strb.w	r8, [r6, #3176]	; 0xc68
		if(((u64_t)interval * 625) <= 100000){
    87ba:	2300      	movs	r3, #0
    87bc:	428b      	cmp	r3, r1
    87be:	bf08      	it	eq
    87c0:	4282      	cmpeq	r2, r0
    87c2:	d30b      	bcc.n	87dc <radio_ext_adv_enable+0x2e4>
		int calculation = max_skip / 5;
    87c4:	2305      	movs	r3, #5
    87c6:	fbb8 f3f3 	udiv	r3, r8, r3
			if(calculation >= 5){
    87ca:	2b04      	cmp	r3, #4
    87cc:	f240 80a5 	bls.w	891a <radio_ext_adv_enable+0x422>
				ticker_offset = 30 * (max_skip-5);
    87d0:	f1a8 0405 	sub.w	r4, r8, #5
				ticker_offset = 30 * (max_skip-1);
    87d4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
				ticker_offset = 30 * max_skip;
    87d8:	0064      	lsls	r4, r4, #1
    87da:	b2a4      	uxth	r4, r4
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
    87dc:	f240 2371 	movw	r3, #625	; 0x271
    87e0:	fb03 f708 	mul.w	r7, r3, r8
    87e4:	f247 5230 	movw	r2, #30000	; 0x7530
    87e8:	fb0a 2707 	mla	r7, sl, r7, r2
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    87ec:	fb03 f30a 	mul.w	r3, r3, sl
		_radio.ext_advertiser.aux_pckt_time = ((((u64_t)interval * 625 ) ) * skip) + 30000; //(10005 * offset) ;
    87f0:	f8c6 7c5c 	str.w	r7, [r6, #3164]	; 0xc5c
		_radio.ext_advertiser.prim_interval = (u64_t)interval * 625;
    87f4:	f8c6 3c60 	str.w	r3, [r6, #3168]	; 0xc60
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
    87f8:	4a65      	ldr	r2, [pc, #404]	; (8990 <radio_ext_adv_enable+0x498>)
    87fa:	2300      	movs	r3, #0
    87fc:	f7f7 fd34 	bl	268 <__aeabi_uldivmod>
    8800:	23b7      	movs	r3, #183	; 0xb7
    8802:	4358      	muls	r0, r3
		pdu = (void *)_radio.advertiser.adv_data.data
    8804:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
		_radio.ext_advertiser.ticker_offset = 183 * (((u64_t)interval * 625 )/100000);
    8808:	f8c6 0c84 	str.w	r0, [r6, #3204]	; 0xc84
		size = pdu->len + 2;
    880c:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    8810:	4433      	add	r3, r6
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
    8812:	fb00 7708 	mla	r7, r0, r8, r7
		size = pdu->len + 2;
    8816:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		_radio.ext_advertiser.chan_37 = (_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) );
    881a:	f8c6 7c70 	str.w	r7, [r6, #3184]	; 0xc70
		final_pckt_size = (size + 1 + 4 + 3)*8 ; 
    881e:	00db      	lsls	r3, r3, #3
    8820:	3350      	adds	r3, #80	; 0x50
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
    8822:	f1a7 0232 	sub.w	r2, r7, #50	; 0x32
    8826:	1ad2      	subs	r2, r2, r3
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    8828:	3332      	adds	r3, #50	; 0x32
    882a:	eba7 0743 	sub.w	r7, r7, r3, lsl #1
		ret =
    882e:	4b59      	ldr	r3, [pc, #356]	; (8994 <radio_ext_adv_enable+0x49c>)
		_radio.ext_advertiser.chan_38 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip ) ) -((final_pckt_size + 50)));
    8830:	f8c6 2c74 	str.w	r2, [r6, #3188]	; 0xc74
		_radio.ext_advertiser.chan_39 = ((_radio.ext_advertiser.aux_pckt_time +(_radio.ext_advertiser.ticker_offset *max_skip )) -(((final_pckt_size + 50)* 2))) ;
    8834:	f8c6 7c78 	str.w	r7, [r6, #3192]	; 0xc78
		ret =
    8838:	f04f 0b00 	mov.w	fp, #0
    883c:	9307      	str	r3, [sp, #28]
    883e:	af11      	add	r7, sp, #68	; 0x44
    8840:	4b55      	ldr	r3, [pc, #340]	; (8998 <radio_ext_adv_enable+0x4a0>)
    8842:	9708      	str	r7, [sp, #32]
    8844:	f8cd b018 	str.w	fp, [sp, #24]
    8848:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    884a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    884c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    884e:	4853      	ldr	r0, [pc, #332]	; (899c <radio_ext_adv_enable+0x4a4>)
		ret =
    8850:	f8cd b00c 	str.w	fp, [sp, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8854:	4413      	add	r3, r2
		ret =
    8856:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    8858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    885a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		ret =
    885c:	f8cd b008 	str.w	fp, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    8860:	fba3 0100 	umull	r0, r1, r3, r0
    8864:	2391      	movs	r3, #145	; 0x91
    8866:	fb03 1102 	mla	r1, r3, r2, r1
    886a:	a347      	add	r3, pc, #284	; (adr r3, 8988 <radio_ext_adv_enable+0x490>)
    886c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8870:	f7f7 fcfa 	bl	268 <__aeabi_uldivmod>
		ret =
    8874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				     HAL_TICKER_US_TO_TICKS(((u64_t)interval *				//ticks periodic
    8876:	9001      	str	r0, [sp, #4]
		ret =
    8878:	f8cd b000 	str.w	fp, [sp]
    887c:	2205      	movs	r2, #5
    887e:	2103      	movs	r1, #3
    8880:	4658      	mov	r0, fp
    8882:	f7fa fbfd 	bl	3080 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
    8886:	2802      	cmp	r0, #2
    8888:	4b42      	ldr	r3, [pc, #264]	; (8994 <radio_ext_adv_enable+0x49c>)
    888a:	d05e      	beq.n	894a <radio_ext_adv_enable+0x452>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
    888c:	9e11      	ldr	r6, [sp, #68]	; 0x44
    888e:	2e00      	cmp	r6, #0
    8890:	f47f af48 	bne.w	8724 <radio_ext_adv_enable+0x22c>
		ret=	
    8894:	9307      	str	r3, [sp, #28]
    8896:	4b42      	ldr	r3, [pc, #264]	; (89a0 <radio_ext_adv_enable+0x4a8>)
    8898:	9305      	str	r3, [sp, #20]
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    889a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		ret=	
    889c:	9708      	str	r7, [sp, #32]
		ret_cb = TICKER_STATUS_BUSY;
    889e:	2202      	movs	r2, #2
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    88a0:	f503 70bc 	add.w	r0, r3, #376	; 0x178
		ret_cb = TICKER_STATUS_BUSY;
    88a4:	9211      	str	r2, [sp, #68]	; 0x44
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    88a6:	fba0 0109 	umull	r0, r1, r0, r9
    88aa:	a337      	add	r3, pc, #220	; (adr r3, 8988 <radio_ext_adv_enable+0x490>)
    88ac:	e9d3 2300 	ldrd	r2, r3, [r3]
		u8_t offset = skip + 1;
    88b0:	f108 0801 	add.w	r8, r8, #1
		ret=	
    88b4:	9606      	str	r6, [sp, #24]
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    88b6:	fa5f f888 	uxtb.w	r8, r8
				    HAL_TICKER_US_TO_TICKS(	ticks_slot_offset +			
    88ba:	f7f7 fcd5 	bl	268 <__aeabi_uldivmod>
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    88be:	fba8 ab0a 	umull	sl, fp, r8, sl
    88c2:	f240 2171 	movw	r1, #625	; 0x271
    88c6:	fbaa 2301 	umull	r2, r3, sl, r1
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    88ca:	1b12      	subs	r2, r2, r4
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    88cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		u64_t aux_pckt_interval = (((u64_t)interval * 625) * offset);
    88d0:	fb01 330b 	mla	r3, r1, fp, r3
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    88d4:	f163 0300 	sbc.w	r3, r3, #0
		ret=	
    88d8:	9004      	str	r0, [sp, #16]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    88da:	fba2 0109 	umull	r0, r1, r2, r9
    88de:	fb09 1103 	mla	r1, r9, r3, r1
    88e2:	a329      	add	r3, pc, #164	; (adr r3, 8988 <radio_ext_adv_enable+0x490>)
    88e4:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret=	
    88e8:	9603      	str	r6, [sp, #12]
    88ea:	9602      	str	r6, [sp, #8]
				    HAL_TICKER_US_TO_TICKS( aux_pckt_interval - ticker_offset ),			
    88ec:	f7f7 fcbc 	bl	268 <__aeabi_uldivmod>
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    88f0:	4b2c      	ldr	r3, [pc, #176]	; (89a4 <radio_ext_adv_enable+0x4ac>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    88f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    88f6:	9001      	str	r0, [sp, #4]
					HAL_TICKER_US_TO_TICKS(	_radio.ext_advertiser.aux_pckt_time  ),			//ticks periodic
    88f8:	f8d3 0c5c 	ldr.w	r0, [r3, #3164]	; 0xc5c
    88fc:	a322      	add	r3, pc, #136	; (adr r3, 8988 <radio_ext_adv_enable+0x490>)
    88fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    8902:	fba0 0109 	umull	r0, r1, r0, r9
    8906:	f7f7 fcaf 	bl	268 <__aeabi_uldivmod>
		ret=	
    890a:	2203      	movs	r2, #3
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    890c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ret=	
    8910:	9000      	str	r0, [sp, #0]
    8912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8914:	4611      	mov	r1, r2
    8916:	4630      	mov	r0, r6
    8918:	e6fb      	b.n	8712 <radio_ext_adv_enable+0x21a>
			}else if(calculation >= 4){
    891a:	d102      	bne.n	8922 <radio_ext_adv_enable+0x42a>
				ticker_offset = 30 * (max_skip-4);
    891c:	f1a8 0404 	sub.w	r4, r8, #4
    8920:	e758      	b.n	87d4 <radio_ext_adv_enable+0x2dc>
			}else if(calculation >=3){
    8922:	2b03      	cmp	r3, #3
    8924:	d102      	bne.n	892c <radio_ext_adv_enable+0x434>
				ticker_offset = 30 * (max_skip-3);
    8926:	f1a8 0403 	sub.w	r4, r8, #3
    892a:	e753      	b.n	87d4 <radio_ext_adv_enable+0x2dc>
			}else if(calculation >= 2){
    892c:	2b02      	cmp	r3, #2
    892e:	d102      	bne.n	8936 <radio_ext_adv_enable+0x43e>
				ticker_offset = 30 * (max_skip-2);
    8930:	f1a8 0402 	sub.w	r4, r8, #2
    8934:	e74e      	b.n	87d4 <radio_ext_adv_enable+0x2dc>
			}else if(calculation >= 1){
    8936:	2b01      	cmp	r3, #1
    8938:	d102      	bne.n	8940 <radio_ext_adv_enable+0x448>
				ticker_offset = 30 * (max_skip-1);
    893a:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
    893e:	e749      	b.n	87d4 <radio_ext_adv_enable+0x2dc>
				ticker_offset = 30 * max_skip;
    8940:	ebc8 1408 	rsb	r4, r8, r8, lsl #4
    8944:	e748      	b.n	87d8 <radio_ext_adv_enable+0x2e0>
				cpu_sleep();
    8946:	f7fb fb9d 	bl	4084 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    894a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    894c:	2a02      	cmp	r2, #2
    894e:	d0fa      	beq.n	8946 <radio_ext_adv_enable+0x44e>
    8950:	e79c      	b.n	888c <radio_ext_adv_enable+0x394>
			cpu_sleep();
    8952:	f7fb fb97 	bl	4084 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    8956:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8958:	2b02      	cmp	r3, #2
    895a:	d0fa      	beq.n	8952 <radio_ext_adv_enable+0x45a>
    895c:	e6de      	b.n	871c <radio_ext_adv_enable+0x224>
		_radio.advertiser.is_enabled = 1;
    895e:	4b11      	ldr	r3, [pc, #68]	; (89a4 <radio_ext_adv_enable+0x4ac>)
    8960:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    8964:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    8968:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    896c:	f893 3c2c 	ldrb.w	r3, [r3, #3116]	; 0xc2c
    8970:	f013 0401 	ands.w	r4, r3, #1
    8974:	d103      	bne.n	897e <radio_ext_adv_enable+0x486>
			ll_adv_scan_state_cb(BIT(0));
    8976:	2001      	movs	r0, #1
    8978:	f7ff fc3e 	bl	81f8 <ll_adv_scan_state_cb>
		return 0;
    897c:	4620      	mov	r0, r4
}
    897e:	b013      	add	sp, #76	; 0x4c
    8980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8984:	f3af 8000 	nop.w
    8988:	1afd498d 	.word	0x1afd498d
    898c:	00000007 	.word	0x00000007
    8990:	000186a0 	.word	0x000186a0
    8994:	000040c9 	.word	0x000040c9
    8998:	000055dd 	.word	0x000055dd
    899c:	84e72a00 	.word	0x84e72a00
    89a0:	00005615 	.word	0x00005615
    89a4:	200002e0 	.word	0x200002e0

000089a8 <radio_adv_disable>:
{
    89a8:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
    89aa:	2103      	movs	r1, #3
    89ac:	2005      	movs	r0, #5
    89ae:	f7fb fc65 	bl	427c <role_disable>
	if (!status) {
    89b2:	4605      	mov	r5, r0
    89b4:	b9e8      	cbnz	r0, 89f2 <radio_adv_disable+0x4a>
		_radio.advertiser.is_enabled = 0;
    89b6:	4c10      	ldr	r4, [pc, #64]	; (89f8 <radio_adv_disable+0x50>)
    89b8:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    89bc:	f360 12c7 	bfi	r2, r0, #7, #1
    89c0:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if (!_radio.scanner.is_enabled) {
    89c4:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
    89c8:	07d3      	lsls	r3, r2, #31
    89ca:	d401      	bmi.n	89d0 <radio_adv_disable+0x28>
			ll_adv_scan_state_cb(0);
    89cc:	f7ff fc14 	bl	81f8 <ll_adv_scan_state_cb>
		conn = _radio.advertiser.conn;
    89d0:	f8d4 6c18 	ldr.w	r6, [r4, #3096]	; 0xc18
		if (conn) {
    89d4:	b15e      	cbz	r6, 89ee <radio_adv_disable+0x46>
			_radio.advertiser.conn = NULL;
    89d6:	2300      	movs	r3, #0
    89d8:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    89dc:	4907      	ldr	r1, [pc, #28]	; (89fc <radio_adv_disable+0x54>)
    89de:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    89e2:	f7f9 fd04 	bl	23ee <mem_release>
			mem_release(conn, &_radio.conn_free);
    89e6:	4906      	ldr	r1, [pc, #24]	; (8a00 <radio_adv_disable+0x58>)
    89e8:	4630      	mov	r0, r6
    89ea:	f7f9 fd00 	bl	23ee <mem_release>
}
    89ee:	4628      	mov	r0, r5
    89f0:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    89f2:	250c      	movs	r5, #12
    89f4:	e7fb      	b.n	89ee <radio_adv_disable+0x46>
    89f6:	bf00      	nop
    89f8:	200002e0 	.word	0x200002e0
    89fc:	20001008 	.word	0x20001008
    8a00:	20000fd4 	.word	0x20000fd4

00008a04 <ll_rx_dequeue>:
{
    8a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    8a06:	4d34      	ldr	r5, [pc, #208]	; (8ad8 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    8a08:	aa02      	add	r2, sp, #8
    8a0a:	2300      	movs	r3, #0
    8a0c:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    8a10:	f8d5 0d30 	ldr.w	r0, [r5, #3376]	; 0xd30
    8a14:	f605 512c 	addw	r1, r5, #3372	; 0xd2c
    8a18:	f7f9 fd27 	bl	246a <memq_dequeue>
    8a1c:	462c      	mov	r4, r5
	LL_ASSERT(link);
    8a1e:	b928      	cbnz	r0, 8a2c <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    8a20:	4040      	eors	r0, r0
    8a22:	f380 8811 	msr	BASEPRI, r0
    8a26:	f04f 0004 	mov.w	r0, #4
    8a2a:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    8a2c:	f605 5128 	addw	r1, r5, #3368	; 0xd28
    8a30:	f7f9 fcdd 	bl	23ee <mem_release>
	switch (node_rx->hdr.type) {
    8a34:	9a01      	ldr	r2, [sp, #4]
    8a36:	7911      	ldrb	r1, [r2, #4]
    8a38:	290a      	cmp	r1, #10
    8a3a:	d8f1      	bhi.n	8a20 <ll_rx_dequeue+0x1c>
    8a3c:	2301      	movs	r3, #1
    8a3e:	408b      	lsls	r3, r1
    8a40:	f240 707e 	movw	r0, #1918	; 0x77e
    8a44:	4203      	tst	r3, r0
    8a46:	d111      	bne.n	8a6c <ll_rx_dequeue+0x68>
    8a48:	0618      	lsls	r0, r3, #24
    8a4a:	d5e9      	bpl.n	8a20 <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    8a4c:	2906      	cmp	r1, #6
    8a4e:	d134      	bne.n	8aba <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    8a50:	7ad3      	ldrb	r3, [r2, #11]
    8a52:	2b3c      	cmp	r3, #60	; 0x3c
    8a54:	d015      	beq.n	8a82 <ll_rx_dequeue+0x7e>
    8a56:	7b12      	ldrb	r2, [r2, #12]
    8a58:	bb8a      	cbnz	r2, 8abe <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    8a5a:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    8a5e:	07d9      	lsls	r1, r3, #31
    8a60:	d5de      	bpl.n	8a20 <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    8a62:	f362 0300 	bfi	r3, r2, #0, #1
    8a66:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
    8a6a:	e01a      	b.n	8aa2 <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    8a6c:	f895 0d20 	ldrb.w	r0, [r5, #3360]	; 0xd20
    8a70:	f895 3d34 	ldrb.w	r3, [r5, #3380]	; 0xd34
    8a74:	3801      	subs	r0, #1
    8a76:	4283      	cmp	r3, r0
    8a78:	dad2      	bge.n	8a20 <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    8a7a:	3301      	adds	r3, #1
    8a7c:	f885 3d34 	strb.w	r3, [r5, #3380]	; 0xd34
		break;
    8a80:	e7e4      	b.n	8a4c <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    8a82:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    8a84:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
				_radio.advertiser.conn = NULL;
    8a88:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			LL_ASSERT(_radio.advertiser.is_enabled);
    8a8c:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    8a90:	2b00      	cmp	r3, #0
    8a92:	dac5      	bge.n	8a20 <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    8a94:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    8a98:	f36f 13c7 	bfc	r3, #7, #1
    8a9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    8aa0:	b97d      	cbnz	r5, 8ac2 <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    8aa2:	f894 0c2c 	ldrb.w	r0, [r4, #3116]	; 0xc2c
		     _radio.advertiser.is_enabled;
    8aa6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    8aaa:	f000 0001 	and.w	r0, r0, #1
    8aae:	0040      	lsls	r0, r0, #1
		if (!bm) {
    8ab0:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    8ab4:	d101      	bne.n	8aba <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
    8ab6:	f7ff fb9f 	bl	81f8 <ll_adv_scan_state_cb>
}
    8aba:	b003      	add	sp, #12
    8abc:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    8abe:	2500      	movs	r5, #0
    8ac0:	e7e4      	b.n	8a8c <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    8ac2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    8ac6:	4905      	ldr	r1, [pc, #20]	; (8adc <ll_rx_dequeue+0xd8>)
    8ac8:	f7f9 fc91 	bl	23ee <mem_release>
			mem_release(conn, &_radio.conn_free);
    8acc:	4904      	ldr	r1, [pc, #16]	; (8ae0 <ll_rx_dequeue+0xdc>)
    8ace:	4628      	mov	r0, r5
    8ad0:	f7f9 fc8d 	bl	23ee <mem_release>
    8ad4:	e7e5      	b.n	8aa2 <ll_rx_dequeue+0x9e>
    8ad6:	bf00      	nop
    8ad8:	200002e0 	.word	0x200002e0
    8adc:	20001008 	.word	0x20001008
    8ae0:	20000fd4 	.word	0x20000fd4

00008ae4 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    8ae4:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    8ae6:	4c0b      	ldr	r4, [pc, #44]	; (8b14 <rtc0_nrf5_isr+0x30>)
    8ae8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    8aec:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    8af0:	b122      	cbz	r2, 8afc <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    8af2:	2000      	movs	r0, #0
    8af4:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    8af8:	f7fa fab0 	bl	305c <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    8afc:	b12d      	cbz	r5, 8b0a <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    8afe:	2300      	movs	r3, #0
    8b00:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    8b04:	2001      	movs	r0, #1
    8b06:	f7fa faa9 	bl	305c <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    8b0a:	2000      	movs	r0, #0
}
    8b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    8b10:	f7f9 bd5a 	b.w	25c8 <mayfly_run>
    8b14:	4000b000 	.word	0x4000b000

00008b18 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    8b18:	2001      	movs	r0, #1
    8b1a:	f7f9 bd55 	b.w	25c8 <mayfly_run>

00008b1e <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8b1e:	4668      	mov	r0, sp
    8b20:	f020 0107 	bic.w	r1, r0, #7
    8b24:	468d      	mov	sp, r1
    8b26:	b501      	push	{r0, lr}
	isr_radio();
    8b28:	f000 ff38 	bl	999c <isr_radio>
	ISR_DIRECT_PM();
    8b2c:	f7f7 ffe0 	bl	af0 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    8b30:	f7f7 fe8e 	bl	850 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8b34:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    8b38:	4685      	mov	sp, r0
    8b3a:	4770      	bx	lr

00008b3c <radio_active_callback>:
{
    8b3c:	4770      	bx	lr
	...

00008b40 <radio_event_callback>:
	k_sem_give(sem_recv);
    8b40:	4b01      	ldr	r3, [pc, #4]	; (8b48 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8b42:	6818      	ldr	r0, [r3, #0]
    8b44:	f002 b8a8 	b.w	ac98 <_impl_k_sem_give>
    8b48:	20002538 	.word	0x20002538

00008b4c <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    8b4c:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    8b4e:	4b39      	ldr	r3, [pc, #228]	; (8c34 <ll_init+0xe8>)
{
    8b50:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    8b52:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    8b54:	4838      	ldr	r0, [pc, #224]	; (8c38 <ll_init+0xec>)
    8b56:	f001 fc71 	bl	a43c <device_get_binding>
	if (!clk_k32) {
    8b5a:	b918      	cbnz	r0, 8b64 <ll_init+0x18>
		return -ENODEV;
    8b5c:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    8b60:	b006      	add	sp, #24
    8b62:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
    8b64:	6843      	ldr	r3, [r0, #4]
    8b66:	2101      	movs	r1, #1
    8b68:	681b      	ldr	r3, [r3, #0]
    8b6a:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    8b6c:	4833      	ldr	r0, [pc, #204]	; (8c3c <ll_init+0xf0>)
    8b6e:	f001 fc65 	bl	a43c <device_get_binding>
	if (!entropy) {
    8b72:	4604      	mov	r4, r0
    8b74:	2800      	cmp	r0, #0
    8b76:	d0f1      	beq.n	8b5c <ll_init+0x10>
	cntr_init();
    8b78:	f000 fe0a 	bl	9790 <cntr_init>
	mayfly_init();
    8b7c:	f7f9 fc84 	bl	2488 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    8b80:	4b2f      	ldr	r3, [pc, #188]	; (8c40 <ll_init+0xf4>)
    8b82:	2208      	movs	r2, #8
    8b84:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    8b86:	2203      	movs	r2, #3
    8b88:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    8b8a:	2202      	movs	r2, #2
    8b8c:	761a      	strb	r2, [r3, #24]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    8b8e:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b90:	4a2c      	ldr	r2, [pc, #176]	; (8c44 <ll_init+0xf8>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    8b92:	7418      	strb	r0, [r3, #16]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    8b94:	9205      	str	r2, [sp, #20]
    8b96:	4a2c      	ldr	r2, [pc, #176]	; (8c48 <ll_init+0xfc>)
    8b98:	9204      	str	r2, [sp, #16]
    8b9a:	4a2c      	ldr	r2, [pc, #176]	; (8c4c <ll_init+0x100>)
    8b9c:	9203      	str	r2, [sp, #12]
    8b9e:	4a2c      	ldr	r2, [pc, #176]	; (8c50 <ll_init+0x104>)
    8ba0:	9202      	str	r2, [sp, #8]
    8ba2:	220d      	movs	r2, #13
    8ba4:	9201      	str	r2, [sp, #4]
    8ba6:	9300      	str	r3, [sp, #0]
    8ba8:	4a2a      	ldr	r2, [pc, #168]	; (8c54 <ll_init+0x108>)
    8baa:	2304      	movs	r3, #4
    8bac:	2107      	movs	r1, #7
    8bae:	f7fa fa1d 	bl	2fec <ticker_init>
	LL_ASSERT(!err);
    8bb2:	4606      	mov	r6, r0
    8bb4:	b128      	cbz	r0, 8bc2 <ll_init+0x76>
    8bb6:	4040      	eors	r0, r0
    8bb8:	f380 8811 	msr	BASEPRI, r0
    8bbc:	f04f 0004 	mov.w	r0, #4
    8bc0:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    8bc2:	4825      	ldr	r0, [pc, #148]	; (8c58 <ll_init+0x10c>)
    8bc4:	f001 fc3a 	bl	a43c <device_get_binding>
	if (!clk_m16) {
    8bc8:	2800      	cmp	r0, #0
    8bca:	d0c7      	beq.n	8b5c <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    8bcc:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
    8bd0:	9305      	str	r3, [sp, #20]
    8bd2:	4b22      	ldr	r3, [pc, #136]	; (8c5c <ll_init+0x110>)
    8bd4:	9304      	str	r3, [sp, #16]
    8bd6:	23fb      	movs	r3, #251	; 0xfb
    8bd8:	9303      	str	r3, [sp, #12]
    8bda:	231b      	movs	r3, #27
    8bdc:	9302      	str	r3, [sp, #8]
    8bde:	2501      	movs	r5, #1
    8be0:	230a      	movs	r3, #10
    8be2:	9301      	str	r3, [sp, #4]
    8be4:	4622      	mov	r2, r4
    8be6:	9500      	str	r5, [sp, #0]
    8be8:	4633      	mov	r3, r6
    8bea:	2107      	movs	r1, #7
    8bec:	f7ff f91a 	bl	7e24 <radio_init>
	if (err) {
    8bf0:	4604      	mov	r4, r0
    8bf2:	b9e0      	cbnz	r0, 8c2e <ll_init+0xe2>
	ll_filter_reset(true);
    8bf4:	4628      	mov	r0, r5
    8bf6:	f000 fdbf 	bl	9778 <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    8bfa:	4622      	mov	r2, r4
    8bfc:	4621      	mov	r1, r4
    8bfe:	4628      	mov	r0, r5
    8c00:	f7f7 ff5c 	bl	abc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    8c04:	4622      	mov	r2, r4
    8c06:	4621      	mov	r1, r4
    8c08:	200b      	movs	r0, #11
    8c0a:	f7f7 ff57 	bl	abc <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    8c0e:	4622      	mov	r2, r4
    8c10:	4621      	mov	r1, r4
    8c12:	2018      	movs	r0, #24
    8c14:	f7f7 ff52 	bl	abc <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    8c18:	4628      	mov	r0, r5
    8c1a:	f7f7 ff1d 	bl	a58 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    8c1e:	200b      	movs	r0, #11
    8c20:	f7f7 ff1a 	bl	a58 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    8c24:	2018      	movs	r0, #24
    8c26:	f7f7 ff17 	bl	a58 <_arch_irq_enable>
	return 0;
    8c2a:	4620      	mov	r0, r4
    8c2c:	e798      	b.n	8b60 <ll_init+0x14>
		return -ENOMEM;
    8c2e:	f06f 000b 	mvn.w	r0, #11
    8c32:	e795      	b.n	8b60 <ll_init+0x14>
    8c34:	20002538 	.word	0x20002538
    8c38:	0000b79c 	.word	0x0000b79c
    8c3c:	0000b778 	.word	0x0000b778
    8c40:	20002518 	.word	0x20002518
    8c44:	0000a1c5 	.word	0x0000a1c5
    8c48:	0000a14d 	.word	0x0000a14d
    8c4c:	0000a12d 	.word	0x0000a12d
    8c50:	200022a8 	.word	0x200022a8
    8c54:	20002190 	.word	0x20002190
    8c58:	0000b7a7 	.word	0x0000b7a7
    8c5c:	200010f0 	.word	0x200010f0

00008c60 <ll_adv_params_set>:

u32_t ll_adv_params_set(u16_t interval, u8_t adv_type,
			u8_t own_addr_type, u8_t direct_addr_type,
			u8_t const *const direct_addr, u8_t chan_map,
			u8_t filter_policy)
{
    8c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8c64:	4615      	mov	r5, r2
    8c66:	461e      	mov	r6, r3
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8c68:	2206      	movs	r2, #6
    8c6a:	2300      	movs	r3, #0
    8c6c:	f88d 3000 	strb.w	r3, [sp]
    8c70:	f88d 2002 	strb.w	r2, [sp, #2]
    8c74:	2301      	movs	r3, #1
    8c76:	2202      	movs	r2, #2
{
    8c78:	4607      	mov	r7, r0
    8c7a:	4688      	mov	r8, r1
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8c7c:	f88d 3001 	strb.w	r3, [sp, #1]
    8c80:	f88d 2003 	strb.w	r2, [sp, #3]
    8c84:	f88d 3004 	strb.w	r3, [sp, #4]
				     PDU_ADV_TYPE_DIRECT_IND};

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (ll_adv_is_enabled()) {
    8c88:	f7ff f9ae 	bl	7fe8 <ll_adv_is_enabled>
    8c8c:	4604      	mov	r4, r0
    8c8e:	2800      	cmp	r0, #0
    8c90:	d162      	bne.n	8d58 <ll_adv_params_set+0xf8>
    8c92:	4a32      	ldr	r2, [pc, #200]	; (8d5c <ll_adv_params_set+0xfc>)
	if (adv_type != 0x01) {
		ll_adv.interval = interval;
	} else {
		ll_adv.interval = 0;
	}
	ll_adv.chan_map = chan_map;
    8c94:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    8c98:	7813      	ldrb	r3, [r2, #0]
    8c9a:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
    8c9e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
	if (adv_type != 0x01) {
    8ca2:	f1b8 0f01 	cmp.w	r8, #1
	ll_adv.filter_policy = filter_policy;
    8ca6:	f361 03c4 	bfi	r3, r1, #3, #2
		ll_adv.interval = interval;
    8caa:	bf14      	ite	ne
    8cac:	8057      	strhne	r7, [r2, #2]
		ll_adv.interval = 0;
    8cae:	8050      	strheq	r0, [r2, #2]
	ll_adv.filter_policy = filter_policy;
    8cb0:	7013      	strb	r3, [r2, #0]

	/* update the "current" primary adv data */
	radio_adv_data = radio_adv_data_get();
    8cb2:	f7ff f989 	bl	7fc8 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8cb6:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    8cba:	ab02      	add	r3, sp, #8
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8cbc:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    8cc0:	4498      	add	r8, r3
    8cc2:	5c83      	ldrb	r3, [r0, r2]
    8cc4:	f818 1c08 	ldrb.w	r1, [r8, #-8]
    8cc8:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->rfu = 0;
    8ccc:	f36f 1304 	bfc	r3, #4, #1
    8cd0:	5483      	strb	r3, [r0, r2]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    8cd2:	b2db      	uxtb	r3, r3
    8cd4:	f003 010f 	and.w	r1, r3, #15
    8cd8:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
	     (pdu->type == PDU_ADV_TYPE_DIRECT_IND))) {
		pdu->chan_sel = 1;
    8cda:	bf94      	ite	ls
    8cdc:	f043 0320 	orrls.w	r3, r3, #32
	} else {
		pdu->chan_sel = 0;
    8ce0:	f36f 1345 	bfchi	r3, #5, #1
    8ce4:	5483      	strb	r3, [r0, r2]
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr = own_addr_type & 0x1;
    8ce6:	5c83      	ldrb	r3, [r0, r2]
    8ce8:	f005 0501 	and.w	r5, r5, #1
    8cec:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rx_addr = 0;
    8cf0:	f36f 13c7 	bfc	r3, #7, #1
    8cf4:	5483      	strb	r3, [r0, r2]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8cf6:	b2db      	uxtb	r3, r3
    8cf8:	f003 010f 	and.w	r1, r3, #15
    8cfc:	2901      	cmp	r1, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8cfe:	eb00 0702 	add.w	r7, r0, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8d02:	d124      	bne.n	8d4e <ll_adv_params_set+0xee>
		pdu->rx_addr = direct_addr_type;
    8d04:	f366 13c7 	bfi	r3, r6, #7, #1
    8d08:	5483      	strb	r3, [r0, r2]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    8d0a:	9908      	ldr	r1, [sp, #32]
    8d0c:	2206      	movs	r2, #6
    8d0e:	f107 0008 	add.w	r0, r7, #8
    8d12:	f7f7 fc5d 	bl	5d0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    8d16:	230c      	movs	r3, #12

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    8d18:	707b      	strb	r3, [r7, #1]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    8d1a:	f7ff f961 	bl	7fe0 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8d1e:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    8d22:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    8d26:	2604      	movs	r6, #4
    8d28:	5c83      	ldrb	r3, [r0, r2]
    8d2a:	f366 0303 	bfi	r3, r6, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    8d2e:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    8d32:	f365 1386 	bfi	r3, r5, #6, #1
	pdu->rx_addr = 0;
    8d36:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8d3a:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    8d3c:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    8d3e:	784b      	ldrb	r3, [r1, #1]
    8d40:	b90b      	cbnz	r3, 8d46 <ll_adv_params_set+0xe6>
		pdu->len = BDADDR_SIZE;
    8d42:	2306      	movs	r3, #6
    8d44:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    8d46:	4620      	mov	r0, r4
    8d48:	b002      	add	sp, #8
    8d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (pdu->len == 0) {
    8d4e:	787b      	ldrb	r3, [r7, #1]
    8d50:	2b00      	cmp	r3, #0
    8d52:	d1e2      	bne.n	8d1a <ll_adv_params_set+0xba>
		pdu->len = BDADDR_SIZE;
    8d54:	2306      	movs	r3, #6
    8d56:	e7df      	b.n	8d18 <ll_adv_params_set+0xb8>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8d58:	240c      	movs	r4, #12
    8d5a:	e7f4      	b.n	8d46 <ll_adv_params_set+0xe6>
    8d5c:	2000253e 	.word	0x2000253e

00008d60 <ll_ext_adv_params_set>:
u32_t ll_ext_adv_params_set(u8_t Adv_handle, u16_t evt_prop, u16_t interval,
			u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
    8d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d64:	b089      	sub	sp, #36	; 0x24
    8d66:	4699      	mov	r9, r3
    8d68:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
    8d6c:	9301      	str	r3, [sp, #4]
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8d6e:	2300      	movs	r3, #0
    8d70:	f88d 3018 	strb.w	r3, [sp, #24]
    8d74:	2306      	movs	r3, #6
    8d76:	2501      	movs	r5, #1
    8d78:	f88d 301a 	strb.w	r3, [sp, #26]
    8d7c:	2602      	movs	r6, #2
    8d7e:	2307      	movs	r3, #7
{
    8d80:	9102      	str	r1, [sp, #8]
    8d82:	4614      	mov	r4, r2
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    8d84:	f88d 5019 	strb.w	r5, [sp, #25]
    8d88:	f88d 601b 	strb.w	r6, [sp, #27]
    8d8c:	f88d 501c 	strb.w	r5, [sp, #28]
    8d90:	f88d 301d 	strb.w	r3, [sp, #29]
//	struct radio_ext_adv_data *radio_aux_adv_data;
	struct radio_adv_data *radio_aux_adv_data;
	struct pdu_adv *pdu;
	struct pdu_adv *aux_pdu;
	
	if (ll_adv_is_enabled()) {
    8d94:	f7ff f928 	bl	7fe8 <ll_adv_is_enabled>
    8d98:	9902      	ldr	r1, [sp, #8]
    8d9a:	4607      	mov	r7, r0
    8d9c:	2800      	cmp	r0, #0
    8d9e:	f040 81b3 	bne.w	9108 <ll_ext_adv_params_set+0x3a8>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* TODO: check and fail (0x12, invalid HCI cmd param) if invalid
	 * evt_prop bits.
	 */
	ll_adv.max_skip = skip;
    8da2:	4b5c      	ldr	r3, [pc, #368]	; (8f14 <ll_ext_adv_params_set+0x1b4>)
    8da4:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    8da8:	711a      	strb	r2, [r3, #4]
	
	u8_t adv_type;
	ll_adv.phy_p = BIT(0);
    8daa:	781a      	ldrb	r2, [r3, #0]
    8dac:	f365 1247 	bfi	r2, r5, #5, #3
    8db0:	701a      	strb	r2, [r3, #0]
		adv_type = 0x05;
	}			
	/* extended */
	//if (adv_type > 0x04) {
		/* legacy */
		if (evt_prop & BIT(4)) {
    8db2:	06ca      	lsls	r2, r1, #27
    8db4:	f140 809b 	bpl.w	8eee <ll_ext_adv_params_set+0x18e>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    8db8:	2203      	movs	r2, #3
    8dba:	f88d 2014 	strb.w	r2, [sp, #20]
    8dbe:	f88d 0017 	strb.w	r0, [sp, #23]
    8dc2:	2204      	movs	r2, #4

			adv_type = leg_adv_type[evt_prop & 0x03];

			/* high duty cycle directed */
			if (evt_prop & BIT(3)) {
    8dc4:	0708      	lsls	r0, r1, #28
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
    8dc6:	f88d 2015 	strb.w	r2, [sp, #21]
    8dca:	f88d 6016 	strb.w	r6, [sp, #22]
			if (evt_prop & BIT(3)) {
    8dce:	d408      	bmi.n	8de2 <ll_ext_adv_params_set+0x82>
			adv_type = leg_adv_type[evt_prop & 0x03];
    8dd0:	f001 0203 	and.w	r2, r1, #3
    8dd4:	a808      	add	r0, sp, #32
    8dd6:	4402      	add	r2, r0
    8dd8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	/* Set interval for Undirected or Low Duty Cycle Directed Advertising */
	if (adv_type == 0x01) {
    8ddc:	42aa      	cmp	r2, r5
    8dde:	f040 8096 	bne.w	8f0e <ll_ext_adv_params_set+0x1ae>
		ll_adv.interval = 0;  				//interval = 0 for ADV_DIRECT_IND
    8de2:	2200      	movs	r2, #0
    8de4:	805a      	strh	r2, [r3, #2]
    8de6:	2201      	movs	r2, #1
	} else {
		ll_adv.interval = interval;
	}
	ll_adv.chan_map = chan_map;  			
    8de8:	7818      	ldrb	r0, [r3, #0]
    8dea:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
    8dee:	9103      	str	r1, [sp, #12]
    8df0:	f364 0002 	bfi	r0, r4, #0, #3
	ll_adv.filter_policy = filter_policy;
    8df4:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
    8df8:	9202      	str	r2, [sp, #8]
    8dfa:	f364 00c4 	bfi	r0, r4, #3, #2
    8dfe:	7018      	strb	r0, [r3, #0]
	
	/* update the "current" primary adv data and Aux packet */
	radio_adv_data = radio_adv_data_get();
    8e00:	f7ff f8e2 	bl	7fc8 <radio_adv_data_get>
    8e04:	4606      	mov	r6, r0
	radio_aux_adv_data = radio_aux_adv_data_get();							// testing
    8e06:	f7ff f8e3 	bl	7fd0 <radio_aux_adv_data_get>
//	radio_aux_adv_data = radio_chain_adv_data_get();

	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];

	pdu->type = pdu_adv_type[adv_type];
    8e0a:	9a02      	ldr	r2, [sp, #8]
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8e0c:	f896 3203 	ldrb.w	r3, [r6, #515]	; 0x203
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    8e10:	f890 e203 	ldrb.w	lr, [r0, #515]	; 0x203
	pdu->type = pdu_adv_type[adv_type];
    8e14:	a908      	add	r1, sp, #32
    8e16:	440a      	add	r2, r1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8e18:	eb03 2303 	add.w	r3, r3, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
    8e1c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
    8e20:	f816 c003 	ldrb.w	ip, [r6, r3]
	aux_pdu->type = pdu->type;
	
	pdu->rfu = 0;
	aux_pdu->rfu = pdu->rfu;

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    8e24:	9903      	ldr	r1, [sp, #12]
	pdu->type = pdu_adv_type[adv_type];
    8e26:	f002 020f 	and.w	r2, r2, #15
    8e2a:	f362 0c03 	bfi	ip, r2, #0, #4
    8e2e:	f806 c003 	strb.w	ip, [r6, r3]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    8e32:	eb0e 2e0e 	add.w	lr, lr, lr, lsl #8
	    ll_adv.own_addr_type == BT_ADDR_LE_RANDOM_ID) {
		ll_adv.id_addr_type = direct_addr_type;
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	pdu->tx_addr =  own_addr_type & 0x1;
    8e36:	f009 0901 	and.w	r9, r9, #1
	aux_pdu->type = pdu->type;
    8e3a:	f810 c00e 	ldrb.w	ip, [r0, lr]
    8e3e:	f362 0c03 	bfi	ip, r2, #0, #4
    8e42:	f800 c00e 	strb.w	ip, [r0, lr]
	pdu->rfu = 0;
    8e46:	5cf2      	ldrb	r2, [r6, r3]
    8e48:	f36f 1204 	bfc	r2, #4, #1
    8e4c:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rfu = pdu->rfu;
    8e4e:	f810 200e 	ldrb.w	r2, [r0, lr]
    8e52:	f36f 1204 	bfc	r2, #4, #1
    8e56:	f800 200e 	strb.w	r2, [r0, lr]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) && 
    8e5a:	5cf2      	ldrb	r2, [r6, r3]
    8e5c:	f002 0c0f 	and.w	ip, r2, #15
    8e60:	f1bc 0f01 	cmp.w	ip, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    8e64:	bf95      	itete	ls
    8e66:	f042 0220 	orrls.w	r2, r2, #32
		pdu->chan_sel = 0;
    8e6a:	f36f 1245 	bfchi	r2, #5, #1
		pdu->chan_sel = 1;           // could be same for ext adv  LE Channel Selection Algorithm #2 feature 
    8e6e:	54f2      	strbls	r2, [r6, r3]
		pdu->chan_sel = 0;
    8e70:	54f2      	strbhi	r2, [r6, r3]
		aux_pdu->chan_sel = pdu->chan_sel;
    8e72:	bf95      	itete	ls
    8e74:	f810 200e 	ldrbls.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    8e78:	f810 200e 	ldrbhi.w	r2, [r0, lr]
		aux_pdu->chan_sel = pdu->chan_sel;
    8e7c:	f042 0220 	orrls.w	r2, r2, #32
		aux_pdu->chan_sel = pdu->chan_sel;
    8e80:	f36f 1245 	bfchi	r2, #5, #1
    8e84:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->tx_addr =  own_addr_type & 0x1;
    8e88:	5cf2      	ldrb	r2, [r6, r3]
    8e8a:	f369 1286 	bfi	r2, r9, #6, #1
    8e8e:	54f2      	strb	r2, [r6, r3]
	aux_pdu->tx_addr = 0;						//not sending transmitting address in aux packet
    8e90:	f810 200e 	ldrb.w	r2, [r0, lr]
    8e94:	f36f 1286 	bfc	r2, #6, #1
    8e98:	f800 200e 	strb.w	r2, [r0, lr]
	pdu->rx_addr = 0;  							
    8e9c:	5cf2      	ldrb	r2, [r6, r3]
    8e9e:	f36f 12c7 	bfc	r2, #7, #1
    8ea2:	54f2      	strb	r2, [r6, r3]
	aux_pdu->rx_addr = pdu->rx_addr;
    8ea4:	f810 200e 	ldrb.w	r2, [r0, lr]
    8ea8:	f36f 12c7 	bfc	r2, #7, #1
    8eac:	f800 200e 	strb.w	r2, [r0, lr]
	aux_pdu = (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0];
    8eb0:	eb00 050e 	add.w	r5, r0, lr
	if(evt_prop & BIT(2)){							// for directed ADV wuth public address
    8eb4:	f011 0004 	ands.w	r0, r1, #4
		pdu->rx_addr = 0;//direct_addr_type;
    8eb8:	bf1e      	ittt	ne
    8eba:	5cf2      	ldrbne	r2, [r6, r3]
    8ebc:	f36f 12c7 	bfcne	r2, #7, #1
    8ec0:	54f2      	strbne	r2, [r6, r3]
	}

	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8ec2:	5cf2      	ldrb	r2, [r6, r3]
    8ec4:	f002 0e0f 	and.w	lr, r2, #15
    8ec8:	f1be 0f01 	cmp.w	lr, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    8ecc:	eb06 0403 	add.w	r4, r6, r3
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    8ed0:	d122      	bne.n	8f18 <ll_ext_adv_params_set+0x1b8>
		pdu->rx_addr = direct_addr_type;
    8ed2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    8ed6:	f361 12c7 	bfi	r2, r1, #7, #1
    8eda:	54f2      	strb	r2, [r6, r3]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    8edc:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8ede:	2206      	movs	r2, #6
    8ee0:	f104 0008 	add.w	r0, r4, #8
    8ee4:	f7f7 fb74 	bl	5d0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    8ee8:	230c      	movs	r3, #12
		/* NOTE: AdvA, filled at enable and RPA timeout */
		
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	} else if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
    8eea:	7063      	strb	r3, [r4, #1]
    8eec:	e0e7      	b.n	90be <ll_ext_adv_params_set+0x35e>
			if (((evt_prop & 0x03) == 0x03) ||
    8eee:	f001 0203 	and.w	r2, r1, #3
    8ef2:	2a03      	cmp	r2, #3
    8ef4:	f000 810a 	beq.w	910c <ll_ext_adv_params_set+0x3ac>
    8ef8:	f001 020c 	and.w	r2, r1, #12
    8efc:	2a0c      	cmp	r2, #12
    8efe:	f000 8105 	beq.w	910c <ll_ext_adv_params_set+0x3ac>
			ll_adv.phy_p = phy_p;
    8f02:	781a      	ldrb	r2, [r3, #0]
    8f04:	9801      	ldr	r0, [sp, #4]
    8f06:	f360 1247 	bfi	r2, r0, #5, #3
    8f0a:	701a      	strb	r2, [r3, #0]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
    8f0c:	2205      	movs	r2, #5
		ll_adv.interval = interval;
    8f0e:	805c      	strh	r4, [r3, #2]
    8f10:	e76a      	b.n	8de8 <ll_ext_adv_params_set+0x88>
    8f12:	bf00      	nop
    8f14:	2000253e 	.word	0x2000253e
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    8f18:	f1be 0f07 	cmp.w	lr, #7
    8f1c:	f040 80ef 	bne.w	90fe <ll_ext_adv_params_set+0x39e>
		p->ext_hdr_len = 0;
    8f20:	78a2      	ldrb	r2, [r4, #2]
		p->adv_mode = 0x00;//evt_prop & 0x03;
    8f22:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    8f26:	f36f 1287 	bfc	r2, #6, #2
    8f2a:	70a2      	strb	r2, [r4, #2]
		aux_p->ext_hdr_len = p->ext_hdr_len;
    8f2c:	78aa      	ldrb	r2, [r5, #2]
		aux_p->adv_mode = p->adv_mode;
    8f2e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    8f32:	f36f 1287 	bfc	r2, #6, #2
    8f36:	70aa      	strb	r2, [r5, #2]
		*(u8_t *)h = 0;
    8f38:	2200      	movs	r2, #0
    8f3a:	70e2      	strb	r2, [r4, #3]
		*(u8_t *)aux_h = 0;
    8f3c:	70ea      	strb	r2, [r5, #3]
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    8f3e:	068a      	lsls	r2, r1, #26
		p = (void *)&pdu->adv_ext_ind;
    8f40:	f104 0c02 	add.w	ip, r4, #2
		ptr = (u8_t *)h + sizeof(*h);
    8f44:	f104 0604 	add.w	r6, r4, #4
		aux_p = (void *)&aux_pdu->adv_ext_ind;
    8f48:	f105 0e02 	add.w	lr, r5, #2
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    8f4c:	f105 0304 	add.w	r3, r5, #4
		if (!((evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2)))) {
    8f50:	d507      	bpl.n	8f62 <ll_ext_adv_params_set+0x202>
    8f52:	78a2      	ldrb	r2, [r4, #2]
    8f54:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    8f58:	d103      	bne.n	8f62 <ll_ext_adv_params_set+0x202>
    8f5a:	9a01      	ldr	r2, [sp, #4]
    8f5c:	2a04      	cmp	r2, #4
    8f5e:	f040 80c8 	bne.w	90f2 <ll_ext_adv_params_set+0x392>
			h->adv_addr = 1;
    8f62:	78e2      	ldrb	r2, [r4, #3]
    8f64:	f042 0201 	orr.w	r2, r2, #1
    8f68:	70e2      	strb	r2, [r4, #3]
			ptr += BDADDR_SIZE;
    8f6a:	f104 020a 	add.w	r2, r4, #10
		if(evt_prop & BIT(2)){
    8f6e:	b120      	cbz	r0, 8f7a <ll_ext_adv_params_set+0x21a>
			h->tgt_addr = 1;
    8f70:	78e0      	ldrb	r0, [r4, #3]
    8f72:	f040 0002 	orr.w	r0, r0, #2
    8f76:	70e0      	strb	r0, [r4, #3]
			ptr += BDADDR_SIZE;
    8f78:	3206      	adds	r2, #6
		if(evt_prop & BIT(6)){
    8f7a:	0648      	lsls	r0, r1, #25
    8f7c:	f140 80bb 	bpl.w	90f6 <ll_ext_adv_params_set+0x396>
			h->adi = 1;
    8f80:	78e1      	ldrb	r1, [r4, #3]
			aux_adi_ptr = aux_ptr;
    8f82:	9300      	str	r3, [sp, #0]
			h->adi = 1;
    8f84:	f041 0108 	orr.w	r1, r1, #8
    8f88:	70e1      	strb	r1, [r4, #3]
			aux_h->adi = h->adi;
    8f8a:	78e9      	ldrb	r1, [r5, #3]
    8f8c:	f041 0108 	orr.w	r1, r1, #8
    8f90:	70e9      	strb	r1, [r5, #3]
			h->aux_ptr = 1;
    8f92:	78e1      	ldrb	r1, [r4, #3]
    8f94:	f041 0110 	orr.w	r1, r1, #16
    8f98:	70e1      	strb	r1, [r4, #3]
			aux_h->aux_ptr = h->aux_ptr;
    8f9a:	78e9      	ldrb	r1, [r5, #3]
    8f9c:	f041 0110 	orr.w	r1, r1, #16
    8fa0:	70e9      	strb	r1, [r5, #3]
			h->tx_pwr = 1;
    8fa2:	78e0      	ldrb	r0, [r4, #3]
			ptr += sizeof(*adi_ptr);
    8fa4:	f102 0802 	add.w	r8, r2, #2
			h->tx_pwr = 1;
    8fa8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
			adi_ptr = ptr;
    8fac:	4693      	mov	fp, r2
			aux_ptr+= sizeof(*aux_ap);
    8fae:	f105 0109 	add.w	r1, r5, #9
			h->tx_pwr = 1;
    8fb2:	70e0      	strb	r0, [r4, #3]
			ptr += sizeof(*adi_ptr);
    8fb4:	46c2      	mov	sl, r8
			ptr ++;
    8fb6:	3206      	adds	r2, #6
		len = ptr - (u8_t *)p;
    8fb8:	eba2 020c 	sub.w	r2, r2, ip
    8fbc:	b2d2      	uxtb	r2, r2
		if (len > (offsetof(struct pdu_adv_com_ext_adv,
    8fbe:	2a02      	cmp	r2, #2
			p->ext_hdr_len = (len -
    8fc0:	bf88      	it	hi
    8fc2:	78a0      	ldrbhi	r0, [r4, #2]
		aux_len = aux_ptr - (u8_t *)aux_p;
    8fc4:	eba1 0e0e 	sub.w	lr, r1, lr
			p->ext_hdr_len = (len -
    8fc8:	bf84      	itt	hi
    8fca:	f102 3cff 	addhi.w	ip, r2, #4294967295	; 0xffffffff
    8fce:	f36c 0005 	bfihi	r0, ip, #0, #6
		aux_len = aux_ptr - (u8_t *)aux_p;
    8fd2:	fa5f fe8e 	uxtb.w	lr, lr
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    8fd6:	bf94      	ite	ls
    8fd8:	2201      	movls	r2, #1
			p->ext_hdr_len = (len -
    8fda:	70a0      	strbhi	r0, [r4, #2]
			pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    8fdc:	7062      	strb	r2, [r4, #1]
		if (aux_len > (offsetof(struct pdu_adv_com_ext_adv,
    8fde:	f1be 0f02 	cmp.w	lr, #2
    8fe2:	4a4b      	ldr	r2, [pc, #300]	; (9110 <ll_ext_adv_params_set+0x3b0>)
			aux_p->ext_hdr_len = (aux_len -
    8fe4:	bf88      	it	hi
    8fe6:	78a9      	ldrbhi	r1, [r5, #2]
			aux_ptr_len = aux_len;
    8fe8:	f882 e000 	strb.w	lr, [r2]
			aux_p->ext_hdr_len = (aux_len -
    8fec:	bf88      	it	hi
    8fee:	f10e 30ff 	addhi.w	r0, lr, #4294967295	; 0xffffffff
		if(h->adv_addr){
    8ff2:	78e2      	ldrb	r2, [r4, #3]
			aux_pdu->len = aux_len;
    8ff4:	bf85      	ittet	hi
    8ff6:	f885 e001 	strbhi.w	lr, [r5, #1]
			aux_p->ext_hdr_len = (aux_len -
    8ffa:	f360 0105 	bfihi	r1, r0, #0, #6
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    8ffe:	2101      	movls	r1, #1
			aux_p->ext_hdr_len = (aux_len -
    9000:	70a9      	strbhi	r1, [r5, #2]
			aux_pdu->len = offsetof(struct pdu_adv_com_ext_adv,
    9002:	bf98      	it	ls
    9004:	7069      	strbls	r1, [r5, #1]
		if(h->adv_addr){
    9006:	07d1      	lsls	r1, r2, #31
			ptr += BDADDR_SIZE;
    9008:	bf48      	it	mi
    900a:	f104 060a 	addmi.w	r6, r4, #10
		if(h->tgt_addr){
    900e:	0792      	lsls	r2, r2, #30
    9010:	d507      	bpl.n	9022 <ll_ext_adv_params_set+0x2c2>
			memcpy(ptr, direct_addr, BDADDR_SIZE);
    9012:	4630      	mov	r0, r6
    9014:	2206      	movs	r2, #6
    9016:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9018:	9301      	str	r3, [sp, #4]
    901a:	f7f7 fad9 	bl	5d0 <memcpy>
			ptr += BDADDR_SIZE;
    901e:	9b01      	ldr	r3, [sp, #4]
    9020:	3606      	adds	r6, #6
		if(h->adi){
    9022:	78e0      	ldrb	r0, [r4, #3]
    9024:	0704      	lsls	r4, r0, #28
    9026:	d517      	bpl.n	9058 <ll_ext_adv_params_set+0x2f8>
			adi_ptr->did = 0x00;
    9028:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adi_ptr->sid = 0x02;//sid & 0x0f;
    902c:	2102      	movs	r1, #2
    902e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9032:	f361 1307 	bfi	r3, r1, #4, #4
    9036:	f88b 3001 	strb.w	r3, [fp, #1]
			adi_ptr->did = 0x00;
    903a:	2200      	movs	r2, #0
			aux_adi_ptr->did = adi_ptr->did;
    903c:	9b00      	ldr	r3, [sp, #0]
			adi_ptr->did = 0x00;
    903e:	f88b 2000 	strb.w	r2, [fp]
			aux_adi_ptr->did = adi_ptr->did;
    9042:	701a      	strb	r2, [r3, #0]
    9044:	785b      	ldrb	r3, [r3, #1]
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
    9046:	2204      	movs	r2, #4
    9048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    904c:	f362 1307 	bfi	r3, r2, #4, #4
    9050:	9a00      	ldr	r2, [sp, #0]
			ptr += sizeof(*adi_ptr);
    9052:	440e      	add	r6, r1
			aux_adi_ptr->sid = 0x04;//adi_ptr->sid;
    9054:	7053      	strb	r3, [r2, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
    9056:	1dab      	adds	r3, r5, #6
		if(h->aux_ptr){
    9058:	06c1      	lsls	r1, r0, #27
    905a:	d523      	bpl.n	90a4 <ll_ext_adv_params_set+0x344>
			ap->offs = 00;
    905c:	f89a 1002 	ldrb.w	r1, [sl, #2]
    9060:	2200      	movs	r2, #0
			ap->phy = 0;
    9062:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
			ap->chan_idx = 0x03;
    9066:	2403      	movs	r4, #3
			ap->phy = 0;
    9068:	f362 1147 	bfi	r1, r2, #5, #3
			ap->offs_units = 0;
    906c:	f88a 4000 	strb.w	r4, [sl]
			ap->offs = 00;
    9070:	f88a 2001 	strb.w	r2, [sl, #1]
			ap->phy = 0;
    9074:	f88a 1002 	strb.w	r1, [sl, #2]
			aux_ap->chan_idx = 0x03;
    9078:	f898 1000 	ldrb.w	r1, [r8]
			aux_ap->offs = 00;
    907c:	f888 2001 	strb.w	r2, [r8, #1]
			aux_ap->chan_idx = 0x03;
    9080:	f364 0105 	bfi	r1, r4, #0, #6
			aux_ap->offs_units = 0;
    9084:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    9088:	f362 11c7 	bfi	r1, r2, #7, #1
    908c:	f888 1000 	strb.w	r1, [r8]
			aux_ap->offs = 00;
    9090:	f898 1002 	ldrb.w	r1, [r8, #2]
			aux_ap->phy = 0;
    9094:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    9098:	f362 1147 	bfi	r1, r2, #5, #3
			ptr += sizeof(*ap);
    909c:	4426      	add	r6, r4
			aux_ap->phy = 0;
    909e:	f888 1002 	strb.w	r1, [r8, #2]
			aux_ptr += sizeof(*ap);
    90a2:	4423      	add	r3, r4
		if (h->tx_pwr) {
    90a4:	0642      	lsls	r2, r0, #25
    90a6:	d508      	bpl.n	90ba <ll_ext_adv_params_set+0x35a>
			if (tx_pwr) {
    90a8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    90aa:	b332      	cbz	r2, 90fa <ll_ext_adv_params_set+0x39a>
				if (*tx_pwr != 0x7F) {
    90ac:	7812      	ldrb	r2, [r2, #0]
    90ae:	2a7f      	cmp	r2, #127	; 0x7f
    90b0:	d102      	bne.n	90b8 <ll_ext_adv_params_set+0x358>
					*tx_pwr = _tx_pwr;
    90b2:	9916      	ldr	r1, [sp, #88]	; 0x58
    90b4:	2200      	movs	r2, #0
    90b6:	700a      	strb	r2, [r1, #0]
			*ptr = _tx_pwr;
    90b8:	7032      	strb	r2, [r6, #0]
		set_data_ptr = aux_ptr; 
    90ba:	4a16      	ldr	r2, [pc, #88]	; (9114 <ll_ext_adv_params_set+0x3b4>)
    90bc:	6013      	str	r3, [r2, #0]
	}

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    90be:	f7fe ff8f 	bl	7fe0 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    90c2:	f890 2203 	ldrb.w	r2, [r0, #515]	; 0x203
    90c6:	eb02 2202 	add.w	r2, r2, r2, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    90ca:	2404      	movs	r4, #4
    90cc:	5c83      	ldrb	r3, [r0, r2]
    90ce:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
	pdu->tx_addr = own_addr_type & 0x1;
    90d2:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
    90d6:	f369 1386 	bfi	r3, r9, #6, #1
	pdu->rx_addr = 0;
    90da:	f36f 13c7 	bfc	r3, #7, #1
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    90de:	1881      	adds	r1, r0, r2
	pdu->rx_addr = 0;
    90e0:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    90e2:	784b      	ldrb	r3, [r1, #1]
    90e4:	b90b      	cbnz	r3, 90ea <ll_ext_adv_params_set+0x38a>
		pdu->len = BDADDR_SIZE;
    90e6:	2306      	movs	r3, #6
    90e8:	704b      	strb	r3, [r1, #1]
	}

	return 0;
}
    90ea:	4638      	mov	r0, r7
    90ec:	b009      	add	sp, #36	; 0x24
    90ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ptr = (u8_t *)h + sizeof(*h);
    90f2:	4632      	mov	r2, r6
    90f4:	e73b      	b.n	8f6e <ll_ext_adv_params_set+0x20e>
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    90f6:	4619      	mov	r1, r3
    90f8:	e75e      	b.n	8fb8 <ll_ext_adv_params_set+0x258>
			_tx_pwr = 0;
    90fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
    90fc:	e7dc      	b.n	90b8 <ll_ext_adv_params_set+0x358>
	} else if (pdu->len == 0) {
    90fe:	7863      	ldrb	r3, [r4, #1]
    9100:	2b00      	cmp	r3, #0
    9102:	d1dc      	bne.n	90be <ll_ext_adv_params_set+0x35e>
		pdu->len = BDADDR_SIZE;
    9104:	2306      	movs	r3, #6
    9106:	e6f0      	b.n	8eea <ll_ext_adv_params_set+0x18a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9108:	270c      	movs	r7, #12
    910a:	e7ee      	b.n	90ea <ll_ext_adv_params_set+0x38a>
				return 0x12; /* invalid HCI cmd param */
    910c:	2712      	movs	r7, #18
    910e:	e7ec      	b.n	90ea <ll_ext_adv_params_set+0x38a>
    9110:	2000253c 	.word	0x2000253c
    9114:	20002544 	.word	0x20002544

00009118 <ll_adv_data_set>:


void ll_adv_data_set(u8_t len, u8_t const *const data)
{
    9118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    911c:	4688      	mov	r8, r1
    911e:	4606      	mov	r6, r0
	struct pdu_adv *pdu;
	u8_t last;


	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
    9120:	f7fe ff52 	bl	7fc8 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9124:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
    9128:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	radio_adv_data = radio_adv_data_get();
    912c:	4604      	mov	r4, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    912e:	f810 e002 	ldrb.w	lr, [r0, r2]
    9132:	f00e 030f 	and.w	r3, lr, #15
    9136:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9138:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    913c:	d118      	bne.n	9170 <ll_adv_data_set+0x58>
	//	struct radio_ext_adv_data *radio_aux_adv_data;
		struct radio_adv_data *radio_aux_adv_data;
		struct pdu_adv *aux_pdu;
		u8_t last;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
    913e:	f7fe ff47 	bl	7fd0 <radio_aux_adv_data_get>
	//	radio_aux_adv_data = radio_chain_adv_data_get();
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    9142:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
	
		memcpy(set_data_ptr, data, len);
    9146:	4b29      	ldr	r3, [pc, #164]	; (91ec <ll_adv_data_set+0xd4>)
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    9148:	eb05 2505 	add.w	r5, r5, r5, lsl #8
		memcpy(set_data_ptr, data, len);
    914c:	4632      	mov	r2, r6
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    914e:	4405      	add	r5, r0
		memcpy(set_data_ptr, data, len);
    9150:	4641      	mov	r1, r8
    9152:	6818      	ldr	r0, [r3, #0]
    9154:	f7f7 fa3c 	bl	5d0 <memcpy>
		aux_pdu->len = aux_ptr_len + len;
    9158:	4b25      	ldr	r3, [pc, #148]	; (91f0 <ll_adv_data_set+0xd8>)
    915a:	781b      	ldrb	r3, [r3, #0]
    915c:	441e      	add	r6, r3
		radio_adv_data->last = last;
    915e:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
    9160:	706e      	strb	r6, [r5, #1]
		radio_adv_data->last = last;
    9162:	f884 3203 	strb.w	r3, [r4, #515]	; 0x203
		ll_adv.aux_chain_count = 1; 	// fragment count which should come from host
    9166:	4b23      	ldr	r3, [pc, #140]	; (91f4 <ll_adv_data_set+0xdc>)
    9168:	2201      	movs	r2, #1
    916a:	715a      	strb	r2, [r3, #5]
    916c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    9170:	2b01      	cmp	r3, #1
    9172:	d039      	beq.n	91e8 <ll_adv_data_set+0xd0>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    9174:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    9178:	42ab      	cmp	r3, r5
    917a:	d104      	bne.n	9186 <ll_adv_data_set+0x6e>
			last = radio_adv_data->last + 1;
    917c:	3501      	adds	r5, #1
    917e:	b2ed      	uxtb	r5, r5
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    9180:	2d02      	cmp	r5, #2
    9182:	bf08      	it	eq
    9184:	2500      	moveq	r5, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    9186:	eb05 2305 	add.w	r3, r5, r5, lsl #8
    918a:	18e7      	adds	r7, r4, r3
		pdu->type = prev->type;
    918c:	5ce0      	ldrb	r0, [r4, r3]
    918e:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    9192:	f36f 1004 	bfc	r0, #4, #1
    9196:	54e0      	strb	r0, [r4, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    9198:	5ca0      	ldrb	r0, [r4, r2]
    919a:	f814 e003 	ldrb.w	lr, [r4, r3]
    919e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    91a2:	f360 1e45 	bfi	lr, r0, #5, #1
    91a6:	f804 e003 	strb.w	lr, [r4, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    91aa:	5ca0      	ldrb	r0, [r4, r2]
    91ac:	fa5f fe8e 	uxtb.w	lr, lr
    91b0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    91b4:	f360 1e86 	bfi	lr, r0, #6, #1
    91b8:	f804 e003 	strb.w	lr, [r4, r3]
		pdu->rx_addr = prev->rx_addr;
    91bc:	5ca2      	ldrb	r2, [r4, r2]
    91be:	fa5f f08e 	uxtb.w	r0, lr
    91c2:	09d2      	lsrs	r2, r2, #7
    91c4:	f362 10c7 	bfi	r0, r2, #7, #1
    91c8:	54e0      	strb	r0, [r4, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    91ca:	2206      	movs	r2, #6
    91cc:	3102      	adds	r1, #2
    91ce:	1cb8      	adds	r0, r7, #2
    91d0:	f7f7 f9fe 	bl	5d0 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    91d4:	4632      	mov	r2, r6
    91d6:	4641      	mov	r1, r8
    91d8:	f107 0008 	add.w	r0, r7, #8
		pdu->len = BDADDR_SIZE + len;
    91dc:	3606      	adds	r6, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    91de:	f7f7 f9f7 	bl	5d0 <memcpy>
		pdu->len = BDADDR_SIZE + len;
    91e2:	707e      	strb	r6, [r7, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    91e4:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    91e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91ec:	20002544 	.word	0x20002544
    91f0:	2000253c 	.word	0x2000253c
    91f4:	2000253e 	.word	0x2000253e

000091f8 <ll_ext_adv_data_set>:
#endif


u8_t temp_buffer[270];
void ll_ext_adv_data_set(u8_t len, u8_t const *const data, u8_t operation, u8_t frag_pref)
{
    91f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    91fc:	4689      	mov	r9, r1
    91fe:	4617      	mov	r7, r2
    9200:	4680      	mov	r8, r0
	struct pdu_adv *pdu;
	u8_t last;


	
	radio_adv_data = radio_adv_data_get();
    9202:	f7fe fee1 	bl	7fc8 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    9206:	f890 4203 	ldrb.w	r4, [r0, #515]	; 0x203
    920a:	eb04 2204 	add.w	r2, r4, r4, lsl #8
	radio_adv_data = radio_adv_data_get();
    920e:	4605      	mov	r5, r0
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    9210:	f810 e002 	ldrb.w	lr, [r0, r2]
    9214:	f00e 030f 	and.w	r3, lr, #15
    9218:	2b07      	cmp	r3, #7
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    921a:	eb00 0102 	add.w	r1, r0, r2
	if(prev->type == PDU_ADV_TYPE_EXT_IND){
    921e:	f040 80db 	bne.w	93d8 <ll_ext_adv_data_set+0x1e0>
		struct pdu_adv *aux_pdu;
		struct pdu_adv *copy_pdu;
		u8_t last;
		u8_t length;

		radio_aux_adv_data = radio_aux_adv_data_get();					//testing
    9222:	f7fe fed5 	bl	7fd0 <radio_aux_adv_data_get>
    9226:	4604      	mov	r4, r0
		radio_chain_adv_data = radio_chain_adv_data_get();
    9228:	f7fe fed6 	bl	7fd8 <radio_chain_adv_data_get>
		aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 			//cofused about data[radio_aux_adv_data->last][0] name
    922c:	f894 3203 	ldrb.w	r3, [r4, #515]	; 0x203
    9230:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    9234:	441c      	add	r4, r3

		memcpy(set_data_ptr, data, len);
    9236:	4b86      	ldr	r3, [pc, #536]	; (9450 <ll_ext_adv_data_set+0x258>)
    9238:	4649      	mov	r1, r9
    923a:	4642      	mov	r2, r8
		radio_chain_adv_data = radio_chain_adv_data_get();
    923c:	4606      	mov	r6, r0
		memcpy(set_data_ptr, data, len);
    923e:	6818      	ldr	r0, [r3, #0]
    9240:	f7f7 f9c6 	bl	5d0 <memcpy>
		length = len;
		aux_pdu->len = aux_ptr_len + len;
    9244:	4b83      	ldr	r3, [pc, #524]	; (9454 <ll_ext_adv_data_set+0x25c>)
    9246:	781a      	ldrb	r2, [r3, #0]
    9248:	4442      	add	r2, r8
		radio_adv_data->last = last;
    924a:	2300      	movs	r3, #0
		aux_pdu->len = aux_ptr_len + len;
    924c:	b2d2      	uxtb	r2, r2
    924e:	7062      	strb	r2, [r4, #1]
		radio_adv_data->last = last;
    9250:	f885 3203 	strb.w	r3, [r5, #515]	; 0x203
			memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
			pointer_offset = 257;
			ll_adv.aux_chain_count = 1;
		}
*/		
		if(aux_h->adv_addr){
    9254:	78e3      	ldrb	r3, [r4, #3]
    9256:	07d9      	lsls	r1, r3, #31
			aux_ptr += BDADDR_SIZE;
    9258:	bf4c      	ite	mi
    925a:	f104 000a 	addmi.w	r0, r4, #10
		aux_ptr = (u8_t *)aux_h + sizeof(*aux_h);
    925e:	1d20      	addpl	r0, r4, #4
		}
		if(aux_h->tgt_addr){
    9260:	079d      	lsls	r5, r3, #30
			aux_ptr += BDADDR_SIZE;
    9262:	bf48      	it	mi
    9264:	3006      	addmi	r0, #6
		}
		if(aux_h->adi){
    9266:	0719      	lsls	r1, r3, #28
    9268:	d509      	bpl.n	927e <ll_ext_adv_data_set+0x86>
			aux_adi_ptr = aux_ptr;
			aux_adi_ptr->did = 0x00;
    926a:	2100      	movs	r1, #0
    926c:	7001      	strb	r1, [r0, #0]
    926e:	7841      	ldrb	r1, [r0, #1]
			aux_adi_ptr->sid = 0x04;//sid & 0x0f;
    9270:	2504      	movs	r5, #4
    9272:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    9276:	f365 1107 	bfi	r1, r5, #4, #4
    927a:	7041      	strb	r1, [r0, #1]
			aux_ptr += sizeof(*aux_adi_ptr);
    927c:	3002      	adds	r0, #2
		}

		switch (operation){
    927e:	2f03      	cmp	r7, #3
    9280:	f200 80e3 	bhi.w	944a <ll_ext_adv_data_set+0x252>
    9284:	e8df f007 	tbb	[pc, r7]
    9288:	805d022e 	.word	0x805d022e
			case 1:  //First fragment 
					
				if(!aux_h->aux_ptr){
    928c:	f013 0310 	ands.w	r3, r3, #16
    9290:	d11a      	bne.n	92c8 <ll_ext_adv_data_set+0xd0>
					aux_ap = aux_ptr;
					aux_ap->chan_idx = 0x03;
    9292:	7801      	ldrb	r1, [r0, #0]
					aux_ap->ca = 0;	
					aux_ap->offs_units = 0;
					aux_ap->offs = 00;
    9294:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
    9296:	2503      	movs	r5, #3
    9298:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
    929c:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    92a0:	f363 11c7 	bfi	r1, r3, #7, #1
    92a4:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
    92a6:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
    92a8:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    92ac:	f363 1147 	bfi	r1, r3, #5, #3

					aux_h->aux_ptr = 1;
    92b0:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
    92b2:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
    92b4:	f043 0310 	orr.w	r3, r3, #16
    92b8:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
    92ba:	78a3      	ldrb	r3, [r4, #2]
    92bc:	f3c3 0105 	ubfx	r1, r3, #0, #6
    92c0:	4429      	add	r1, r5
    92c2:	f361 0305 	bfi	r3, r1, #0, #6
    92c6:	70a3      	strb	r3, [r4, #2]
				//	memset(aux_ptr, 0 , 3);
				}

				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[0];
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
    92c8:	3202      	adds	r2, #2
    92ca:	4621      	mov	r1, r4
    92cc:	4630      	mov	r0, r6
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
					aux_pdu->len = aux_pdu->len - 3;
				}

				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
    92ce:	f7f7 f97f 	bl	5d0 <memcpy>
				pointer_offset = 257;
    92d2:	4b61      	ldr	r3, [pc, #388]	; (9458 <ll_ext_adv_data_set+0x260>)
    92d4:	f240 1201 	movw	r2, #257	; 0x101
    92d8:	801a      	strh	r2, [r3, #0]
				ll_adv.aux_chain_count = 1;
    92da:	4b60      	ldr	r3, [pc, #384]	; (945c <ll_ext_adv_data_set+0x264>)
    92dc:	2201      	movs	r2, #1
    92de:	715a      	strb	r2, [r3, #5]
				break;
    92e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if(!aux_h->aux_ptr){
    92e4:	f013 0310 	ands.w	r3, r3, #16
    92e8:	d11a      	bne.n	9320 <ll_ext_adv_data_set+0x128>
					aux_ap->chan_idx = 0x03;
    92ea:	7801      	ldrb	r1, [r0, #0]
					aux_ap->offs = 00;
    92ec:	7043      	strb	r3, [r0, #1]
					aux_ap->chan_idx = 0x03;
    92ee:	2503      	movs	r5, #3
    92f0:	f365 0105 	bfi	r1, r5, #0, #6
					aux_ap->offs_units = 0;
    92f4:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    92f8:	f363 11c7 	bfi	r1, r3, #7, #1
    92fc:	7001      	strb	r1, [r0, #0]
					aux_ap->offs = 00;
    92fe:	7881      	ldrb	r1, [r0, #2]
					aux_ap->phy = 0;
    9300:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    9304:	f363 1147 	bfi	r1, r3, #5, #3
					aux_h->aux_ptr = 1;
    9308:	78e3      	ldrb	r3, [r4, #3]
					aux_ap->phy = 0;
    930a:	7081      	strb	r1, [r0, #2]
					aux_h->aux_ptr = 1;
    930c:	f043 0310 	orr.w	r3, r3, #16
    9310:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len + 3;
    9312:	78a3      	ldrb	r3, [r4, #2]
    9314:	f3c3 0105 	ubfx	r1, r3, #0, #6
    9318:	4429      	add	r1, r5
    931a:	f361 0305 	bfi	r3, r1, #0, #6
    931e:	70a3      	strb	r3, [r4, #2]
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
    9320:	4d4d      	ldr	r5, [pc, #308]	; (9458 <ll_ext_adv_data_set+0x260>)
    9322:	8828      	ldrh	r0, [r5, #0]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
    9324:	3202      	adds	r2, #2
    9326:	4621      	mov	r1, r4
    9328:	4430      	add	r0, r6
    932a:	f7f7 f951 	bl	5d0 <memcpy>
				pointer_offset += 257;
    932e:	882b      	ldrh	r3, [r5, #0]
    9330:	f203 1301 	addw	r3, r3, #257	; 0x101
				ll_adv.aux_chain_count++;
    9334:	4a49      	ldr	r2, [pc, #292]	; (945c <ll_ext_adv_data_set+0x264>)
				pointer_offset = 257;
    9336:	802b      	strh	r3, [r5, #0]
				ll_adv.aux_chain_count++;
    9338:	7953      	ldrb	r3, [r2, #5]
    933a:	3301      	adds	r3, #1
    933c:	7153      	strb	r3, [r2, #5]
				break;
    933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
    9342:	4d45      	ldr	r5, [pc, #276]	; (9458 <ll_ext_adv_data_set+0x260>)
    9344:	8829      	ldrh	r1, [r5, #0]
				if(aux_h->aux_ptr){
    9346:	06db      	lsls	r3, r3, #27
				copy_pdu =  (struct pdu_adv *)&radio_chain_adv_data->data[pointer_offset];
    9348:	440e      	add	r6, r1
				if(aux_h->aux_ptr){
    934a:	d514      	bpl.n	9376 <ll_ext_adv_data_set+0x17e>
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
    934c:	78a3      	ldrb	r3, [r4, #2]
    934e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
    9352:	1ad2      	subs	r2, r2, r3
    9354:	1cc1      	adds	r1, r0, #3
    9356:	f7f7 f93b 	bl	5d0 <memcpy>
					aux_h->aux_ptr = 0;
    935a:	78e3      	ldrb	r3, [r4, #3]
    935c:	f36f 1304 	bfc	r3, #4, #1
    9360:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
    9362:	78a3      	ldrb	r3, [r4, #2]
    9364:	f3c3 0205 	ubfx	r2, r3, #0, #6
    9368:	3a03      	subs	r2, #3
    936a:	f362 0305 	bfi	r3, r2, #0, #6
    936e:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
    9370:	7863      	ldrb	r3, [r4, #1]
    9372:	3b03      	subs	r3, #3
    9374:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); 
    9376:	7862      	ldrb	r2, [r4, #1]
    9378:	4621      	mov	r1, r4
    937a:	3202      	adds	r2, #2
    937c:	4630      	mov	r0, r6
    937e:	f7f7 f927 	bl	5d0 <memcpy>
				pointer_offset = 257;
    9382:	f240 1301 	movw	r3, #257	; 0x101
    9386:	e7d5      	b.n	9334 <ll_ext_adv_data_set+0x13c>
				if(aux_h->aux_ptr){
    9388:	f013 0f10 	tst.w	r3, #16
    938c:	78a3      	ldrb	r3, [r4, #2]
					int length_d = (aux_pdu->len - aux_p->ext_hdr_len);
    938e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9392:	f100 0103 	add.w	r1, r0, #3
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
    9396:	eba2 0203 	sub.w	r2, r2, r3
				if(aux_h->aux_ptr){
    939a:	d01a      	beq.n	93d2 <ll_ext_adv_data_set+0x1da>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
    939c:	f7f7 f918 	bl	5d0 <memcpy>
					aux_h->aux_ptr = 0;
    93a0:	78e3      	ldrb	r3, [r4, #3]
    93a2:	f36f 1304 	bfc	r3, #4, #1
    93a6:	70e3      	strb	r3, [r4, #3]
					aux_p->ext_hdr_len = aux_p->ext_hdr_len - 3;
    93a8:	78a3      	ldrb	r3, [r4, #2]
    93aa:	f3c3 0205 	ubfx	r2, r3, #0, #6
    93ae:	3a03      	subs	r2, #3
    93b0:	f362 0305 	bfi	r3, r2, #0, #6
    93b4:	70a3      	strb	r3, [r4, #2]
					aux_pdu->len = aux_pdu->len - 3;
    93b6:	7863      	ldrb	r3, [r4, #1]
    93b8:	3b03      	subs	r3, #3
    93ba:	7063      	strb	r3, [r4, #1]
				memcpy(copy_pdu, aux_pdu, aux_pdu->len + 2); // 2 is for the header of the PDU
    93bc:	7862      	ldrb	r2, [r4, #1]
    93be:	4621      	mov	r1, r4
    93c0:	3202      	adds	r2, #2
    93c2:	4630      	mov	r0, r6
    93c4:	f7f7 f904 	bl	5d0 <memcpy>
				memcpy(temp_buffer, aux_pdu, aux_pdu->len + 2);
    93c8:	7862      	ldrb	r2, [r4, #1]
    93ca:	4825      	ldr	r0, [pc, #148]	; (9460 <ll_ext_adv_data_set+0x268>)
    93cc:	3202      	adds	r2, #2
    93ce:	4621      	mov	r1, r4
    93d0:	e77d      	b.n	92ce <ll_ext_adv_data_set+0xd6>
					memcpy(aux_ptr , (aux_ptr+3) ,length_d);
    93d2:	f7f7 f8fd 	bl	5d0 <memcpy>
    93d6:	e7ee      	b.n	93b6 <ll_ext_adv_data_set+0x1be>
		}

	}else{
		if ((prev->type == PDU_ADV_TYPE_DIRECT_IND)) {
    93d8:	2b01      	cmp	r3, #1
    93da:	d036      	beq.n	944a <ll_ext_adv_data_set+0x252>
		
		return;
		}

		/* use the last index in double buffer, */
		if (radio_adv_data->first == radio_adv_data->last) {
    93dc:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
    93e0:	42a3      	cmp	r3, r4
    93e2:	d104      	bne.n	93ee <ll_ext_adv_data_set+0x1f6>
			last = radio_adv_data->last + 1;
    93e4:	3401      	adds	r4, #1
    93e6:	b2e4      	uxtb	r4, r4
			if (last == DOUBLE_BUFFER_SIZE) {
				last = 0;
    93e8:	2c02      	cmp	r4, #2
    93ea:	bf08      	it	eq
    93ec:	2400      	moveq	r4, #0
		} else {
			last = radio_adv_data->last;
		}

		/* update adv pdu fields. */
		pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    93ee:	eb04 2304 	add.w	r3, r4, r4, lsl #8
    93f2:	18ee      	adds	r6, r5, r3
		pdu->type = prev->type;
    93f4:	5ce8      	ldrb	r0, [r5, r3]
    93f6:	f36e 0003 	bfi	r0, lr, #0, #4
		pdu->rfu = 0;
    93fa:	f36f 1004 	bfc	r0, #4, #1
    93fe:	54e8      	strb	r0, [r5, r3]

		if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
			pdu->chan_sel = prev->chan_sel;
    9400:	5ca8      	ldrb	r0, [r5, r2]
    9402:	5cef      	ldrb	r7, [r5, r3]
    9404:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9408:	f360 1745 	bfi	r7, r0, #5, #1
    940c:	54ef      	strb	r7, [r5, r3]
		} else {
			pdu->chan_sel = 0;
		}

		pdu->tx_addr = prev->tx_addr;
    940e:	5ca8      	ldrb	r0, [r5, r2]
    9410:	b2ff      	uxtb	r7, r7
    9412:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9416:	f360 1786 	bfi	r7, r0, #6, #1
    941a:	54ef      	strb	r7, [r5, r3]
		pdu->rx_addr = prev->rx_addr;
    941c:	5caa      	ldrb	r2, [r5, r2]
    941e:	b2f8      	uxtb	r0, r7
    9420:	09d2      	lsrs	r2, r2, #7
    9422:	f362 10c7 	bfi	r0, r2, #7, #1
    9426:	54e8      	strb	r0, [r5, r3]
		
		
		memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    9428:	2206      	movs	r2, #6
    942a:	3102      	adds	r1, #2
    942c:	1cb0      	adds	r0, r6, #2
    942e:	f7f7 f8cf 	bl	5d0 <memcpy>
		memcpy(&pdu->adv_ind.data[0], data, len);
    9432:	4642      	mov	r2, r8
    9434:	4649      	mov	r1, r9
    9436:	f106 0008 	add.w	r0, r6, #8
		pdu->len = BDADDR_SIZE + len;
    943a:	f108 0806 	add.w	r8, r8, #6
		memcpy(&pdu->adv_ind.data[0], data, len);
    943e:	f7f7 f8c7 	bl	5d0 <memcpy>
		pdu->len = BDADDR_SIZE + len;
    9442:	f886 8001 	strb.w	r8, [r6, #1]
		
		/* commit the update so controller picks it. */
		radio_adv_data->last = last;
    9446:	f885 4203 	strb.w	r4, [r5, #515]	; 0x203
    944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    944e:	bf00      	nop
    9450:	20002544 	.word	0x20002544
    9454:	2000253c 	.word	0x2000253c
    9458:	20005fd0 	.word	0x20005fd0
    945c:	2000253e 	.word	0x2000253e
    9460:	20003e8d 	.word	0x20003e8d

00009464 <ll_scan_data_set>:
}



void ll_scan_data_set(u8_t len, u8_t const *const data)
{
    9464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9468:	4606      	mov	r6, r0
    946a:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    946c:	f7fe fdb8 	bl	7fe0 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    9470:	f890 3203 	ldrb.w	r3, [r0, #515]	; 0x203
    9474:	f890 2202 	ldrb.w	r2, [r0, #514]	; 0x202
    9478:	429a      	cmp	r2, r3
	radio_scan_data = radio_scan_data_get();
    947a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    947c:	d131      	bne.n	94e2 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
    947e:	1c5d      	adds	r5, r3, #1
    9480:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
    9482:	2d02      	cmp	r5, #2
			last = 0;
    9484:	bf08      	it	eq
    9486:	2500      	moveq	r5, #0
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    9488:	eb05 2205 	add.w	r2, r5, r5, lsl #8
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    948c:	f04f 0e04 	mov.w	lr, #4
    9490:	5ca0      	ldrb	r0, [r4, r2]
    9492:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
    9496:	f000 00ef 	and.w	r0, r0, #239	; 0xef
    949a:	f36f 1045 	bfc	r0, #5, #1
    949e:	54a0      	strb	r0, [r4, r2]
	prev = (struct pdu_adv *)
    94a0:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    94a4:	18e1      	adds	r1, r4, r3
	pdu->tx_addr = prev->tx_addr;
    94a6:	5ce0      	ldrb	r0, [r4, r3]
    94a8:	5ca3      	ldrb	r3, [r4, r2]
    94aa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    94ae:	f360 1386 	bfi	r3, r0, #6, #1
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    94b2:	eb04 0802 	add.w	r8, r4, r2
	pdu->rx_addr = 0;
    94b6:	f36f 13c7 	bfc	r3, #7, #1
    94ba:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
    94bc:	1db3      	adds	r3, r6, #6
    94be:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    94c2:	2206      	movs	r2, #6
    94c4:	3102      	adds	r1, #2
    94c6:	f108 0002 	add.w	r0, r8, #2
    94ca:	f7f7 f881 	bl	5d0 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    94ce:	4632      	mov	r2, r6
    94d0:	4639      	mov	r1, r7
    94d2:	f108 0008 	add.w	r0, r8, #8
    94d6:	f7f7 f87b 	bl	5d0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    94da:	f884 5203 	strb.w	r5, [r4, #515]	; 0x203
    94de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94e2:	461d      	mov	r5, r3
    94e4:	e7d0      	b.n	9488 <ll_scan_data_set+0x24>
	...

000094e8 <ll_adv_enable>:
}


u32_t ll_adv_enable(u8_t enable)
{
    94e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
    94ec:	b918      	cbnz	r0, 94f6 <ll_adv_enable+0xe>
	}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);

	return status;
}
    94ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return radio_adv_disable();
    94f2:	f7ff ba59 	b.w	89a8 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    94f6:	f7fe fd77 	bl	7fe8 <ll_adv_is_enabled>
    94fa:	4607      	mov	r7, r0
    94fc:	bb90      	cbnz	r0, 9564 <ll_adv_enable+0x7c>
	radio_adv_data = radio_adv_data_get();
    94fe:	f7fe fd63 	bl	7fc8 <radio_adv_data_get>
    9502:	4606      	mov	r6, r0
	radio_scan_data = radio_scan_data_get();
    9504:	f7fe fd6c 	bl	7fe0 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9508:	f896 4203 	ldrb.w	r4, [r6, #515]	; 0x203
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    950c:	f890 5203 	ldrb.w	r5, [r0, #515]	; 0x203
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9510:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    9514:	eb05 2505 	add.w	r5, r5, r5, lsl #8
    9518:	4405      	add	r5, r0
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    951a:	5d30      	ldrb	r0, [r6, r4]
    951c:	4639      	mov	r1, r7
    951e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9522:	f7f9 ff21 	bl	3368 <ll_addr_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9526:	eb06 0804 	add.w	r8, r6, r4
			memcpy(&pdu_adv->adv_ind.addr[0],
    952a:	2206      	movs	r2, #6
    952c:	4601      	mov	r1, r0
    952e:	f108 0002 	add.w	r0, r8, #2
    9532:	f7f7 f84d 	bl	5d0 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    9536:	5d30      	ldrb	r0, [r6, r4]
    9538:	4639      	mov	r1, r7
    953a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    953e:	f7f9 ff13 	bl	3368 <ll_addr_get>
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9542:	2206      	movs	r2, #6
    9544:	4601      	mov	r1, r0
    9546:	1ca8      	adds	r0, r5, #2
    9548:	f7f7 f842 	bl	5d0 <memcpy>
				  ll_adv.filter_policy, rl_idx);
    954c:	4807      	ldr	r0, [pc, #28]	; (956c <ll_adv_enable+0x84>)
    954e:	7801      	ldrb	r1, [r0, #0]
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
    9550:	8840      	ldrh	r0, [r0, #2]
    9552:	f3c1 02c1 	ubfx	r2, r1, #3, #2
    9556:	23ff      	movs	r3, #255	; 0xff
    9558:	f001 0107 	and.w	r1, r1, #7
}
    955c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
    9560:	f7fe be4e 	b.w	8200 <radio_adv_enable>
}
    9564:	2000      	movs	r0, #0
    9566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    956a:	bf00      	nop
    956c:	2000253e 	.word	0x2000253e

00009570 <ll_ext_adv_enable>:



u32_t ll_ext_adv_enable(u8_t enable)
{
    9570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9574:	b085      	sub	sp, #20
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
//	struct pdu_adv *aux_pdu_adv;
	u32_t status;

	if (!enable) {
    9576:	b920      	cbnz	r0, 9582 <ll_ext_adv_enable+0x12>
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
				  ll_adv.chan_map, ll_adv.filter_policy,
				  rl_idx, ll_adv.max_skip, ll_adv.aux_chain_count);

	return status;
}
    9578:	b005      	add	sp, #20
    957a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		return radio_adv_disable();
    957e:	f7ff ba13 	b.w	89a8 <radio_adv_disable>
	} else if (ll_adv_is_enabled()) {
    9582:	f7fe fd31 	bl	7fe8 <ll_adv_is_enabled>
    9586:	4607      	mov	r7, r0
    9588:	2800      	cmp	r0, #0
    958a:	d14e      	bne.n	962a <ll_ext_adv_enable+0xba>
	radio_adv_data = radio_adv_data_get();
    958c:	f7fe fd1c 	bl	7fc8 <radio_adv_data_get>
    9590:	4680      	mov	r8, r0
	radio_scan_data = radio_scan_data_get();
    9592:	f7fe fd25 	bl	7fe0 <radio_scan_data_get>
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    9596:	f898 4203 	ldrb.w	r4, [r8, #515]	; 0x203
    959a:	eb04 2404 	add.w	r4, r4, r4, lsl #8
	radio_scan_data = radio_scan_data_get();
    959e:	4605      	mov	r5, r0
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    95a0:	f818 0004 	ldrb.w	r0, [r8, r4]
    95a4:	f000 030f 	and.w	r3, r0, #15
    95a8:	2b07      	cmp	r3, #7
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    95aa:	eb08 0904 	add.w	r9, r8, r4
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
    95ae:	d121      	bne.n	95f4 <ll_ext_adv_enable+0x84>
		if (h->adv_addr) {
    95b0:	f899 3003 	ldrb.w	r3, [r9, #3]
    95b4:	07db      	lsls	r3, r3, #31
    95b6:	d50a      	bpl.n	95ce <ll_ext_adv_enable+0x5e>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
    95b8:	4639      	mov	r1, r7
    95ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
    95be:	f7f9 fed3 	bl	3368 <ll_addr_get>
    95c2:	2206      	movs	r2, #6
    95c4:	4601      	mov	r1, r0
    95c6:	f109 0004 	add.w	r0, r9, #4
			memcpy(&pdu_scan->scan_rsp.addr[0],
    95ca:	f7f7 f801 	bl	5d0 <memcpy>
				  ll_adv.chan_map, ll_adv.filter_policy,
    95ce:	4b18      	ldr	r3, [pc, #96]	; (9630 <ll_ext_adv_enable+0xc0>)
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
    95d0:	795a      	ldrb	r2, [r3, #5]
				  ll_adv.chan_map, ll_adv.filter_policy,
    95d2:	7818      	ldrb	r0, [r3, #0]
	status = radio_ext_adv_enable(ll_adv.phy_p, ll_adv.interval,
    95d4:	8859      	ldrh	r1, [r3, #2]
    95d6:	9202      	str	r2, [sp, #8]
    95d8:	791b      	ldrb	r3, [r3, #4]
    95da:	9301      	str	r3, [sp, #4]
    95dc:	23ff      	movs	r3, #255	; 0xff
    95de:	9300      	str	r3, [sp, #0]
    95e0:	f000 0207 	and.w	r2, r0, #7
    95e4:	f3c0 03c1 	ubfx	r3, r0, #3, #2
    95e8:	0940      	lsrs	r0, r0, #5
    95ea:	f7fe ff85 	bl	84f8 <radio_ext_adv_enable>
}
    95ee:	b005      	add	sp, #20
    95f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    95f4:	4639      	mov	r1, r7
    95f6:	f3c0 1080 	ubfx	r0, r0, #6, #1
			[radio_scan_data->last][0];
    95fa:	f895 6203 	ldrb.w	r6, [r5, #515]	; 0x203
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    95fe:	f7f9 feb3 	bl	3368 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0],
    9602:	2206      	movs	r2, #6
    9604:	4601      	mov	r1, r0
    9606:	f109 0002 	add.w	r0, r9, #2
    960a:	f7f6 ffe1 	bl	5d0 <memcpy>
			       ll_addr_get(pdu_adv->tx_addr, NULL),
    960e:	f818 0004 	ldrb.w	r0, [r8, r4]
    9612:	4639      	mov	r1, r7
    9614:	f3c0 1080 	ubfx	r0, r0, #6, #1
    9618:	f7f9 fea6 	bl	3368 <ll_addr_get>
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    961c:	eb06 2606 	add.w	r6, r6, r6, lsl #8
    9620:	4435      	add	r5, r6
			memcpy(&pdu_scan->scan_rsp.addr[0],
    9622:	4601      	mov	r1, r0
    9624:	2206      	movs	r2, #6
    9626:	1ca8      	adds	r0, r5, #2
    9628:	e7cf      	b.n	95ca <ll_ext_adv_enable+0x5a>
		return 0;
    962a:	2000      	movs	r0, #0
    962c:	e7df      	b.n	95ee <ll_ext_adv_enable+0x7e>
    962e:	bf00      	nop
    9630:	2000253e 	.word	0x2000253e

00009634 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    9634:	b928      	cbnz	r0, 9642 <ctrl_filter_get+0xe>
    9636:	4040      	eors	r0, r0
    9638:	f380 8811 	msr	BASEPRI, r0
    963c:	f04f 0004 	mov.w	r0, #4
    9640:	df02      	svc	2
	return &wl_filter;
#endif
}
    9642:	4801      	ldr	r0, [pc, #4]	; (9648 <ctrl_filter_get+0x14>)
    9644:	4770      	bx	lr
    9646:	bf00      	nop
    9648:	20002548 	.word	0x20002548

0000964c <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    964c:	2008      	movs	r0, #8
    964e:	4770      	bx	lr

00009650 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    9650:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9652:	f7fe fcd1 	bl	7ff8 <radio_adv_filter_pol_get>
    9656:	4604      	mov	r4, r0
    9658:	b110      	cbz	r0, 9660 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    965a:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    965c:	4620      	mov	r0, r4
    965e:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9660:	f7fe fcee 	bl	8040 <radio_scan_filter_pol_get>
    9664:	07c3      	lsls	r3, r0, #31
    9666:	d4f8      	bmi.n	965a <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    9668:	4b02      	ldr	r3, [pc, #8]	; (9674 <ll_wl_clear+0x24>)
    966a:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    966c:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    966e:	4b02      	ldr	r3, [pc, #8]	; (9678 <ll_wl_clear+0x28>)
    9670:	701c      	strb	r4, [r3, #0]
	return 0;
    9672:	e7f3      	b.n	965c <ll_wl_clear+0xc>
    9674:	20002548 	.word	0x20002548
    9678:	20003f9b 	.word	0x20003f9b

0000967c <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    967c:	b570      	push	{r4, r5, r6, lr}
    967e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9680:	f7fe fcba 	bl	7ff8 <radio_adv_filter_pol_get>
    9684:	4605      	mov	r5, r0
    9686:	b110      	cbz	r0, 968e <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    9688:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    968a:	4628      	mov	r0, r5
    968c:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    968e:	f7fe fcd7 	bl	8040 <radio_scan_filter_pol_get>
    9692:	07c3      	lsls	r3, r0, #31
    9694:	d4f8      	bmi.n	9688 <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    9696:	7823      	ldrb	r3, [r4, #0]
    9698:	2bff      	cmp	r3, #255	; 0xff
    969a:	d103      	bne.n	96a4 <ll_wl_add+0x28>
		wl_anon = 1;
    969c:	4b11      	ldr	r3, [pc, #68]	; (96e4 <ll_wl_add+0x68>)
    969e:	2201      	movs	r2, #1
    96a0:	701a      	strb	r2, [r3, #0]
		return 0;
    96a2:	e7f2      	b.n	968a <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    96a4:	4910      	ldr	r1, [pc, #64]	; (96e8 <ll_wl_add+0x6c>)
    96a6:	780a      	ldrb	r2, [r1, #0]
    96a8:	2aff      	cmp	r2, #255	; 0xff
    96aa:	d018      	beq.n	96de <ll_wl_add+0x62>
    96ac:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    96ae:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    96b2:	07f6      	lsls	r6, r6, #31
    96b4:	d411      	bmi.n	96da <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    96b6:	2601      	movs	r6, #1
    96b8:	4086      	lsls	r6, r0
    96ba:	4332      	orrs	r2, r6
    96bc:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    96be:	f003 0301 	and.w	r3, r3, #1
    96c2:	784a      	ldrb	r2, [r1, #1]
    96c4:	4083      	lsls	r3, r0
    96c6:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    96c8:	2206      	movs	r2, #6
    96ca:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    96ce:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    96d0:	3002      	adds	r0, #2
    96d2:	1c61      	adds	r1, r4, #1
    96d4:	f7f6 ff7c 	bl	5d0 <memcpy>
    96d8:	e7d7      	b.n	968a <ll_wl_add+0xe>
	     index++) {
    96da:	3001      	adds	r0, #1
    96dc:	e7e7      	b.n	96ae <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    96de:	2507      	movs	r5, #7
    96e0:	e7d3      	b.n	968a <ll_wl_add+0xe>
    96e2:	bf00      	nop
    96e4:	20003f9b 	.word	0x20003f9b
    96e8:	20002548 	.word	0x20002548

000096ec <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    96ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96f0:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    96f2:	f7fe fc81 	bl	7ff8 <radio_adv_filter_pol_get>
    96f6:	4606      	mov	r6, r0
    96f8:	b118      	cbz	r0, 9702 <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    96fa:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    96fc:	4630      	mov	r0, r6
    96fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9702:	f7fe fc9d 	bl	8040 <radio_scan_filter_pol_get>
    9706:	07c1      	lsls	r1, r0, #31
    9708:	d4f7      	bmi.n	96fa <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    970a:	f897 8000 	ldrb.w	r8, [r7]
    970e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    9712:	d102      	bne.n	971a <ll_wl_remove+0x2e>
		wl_anon = 0;
    9714:	4b16      	ldr	r3, [pc, #88]	; (9770 <ll_wl_remove+0x84>)
    9716:	701e      	strb	r6, [r3, #0]
		return 0;
    9718:	e7f0      	b.n	96fc <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    971a:	4c16      	ldr	r4, [pc, #88]	; (9774 <ll_wl_remove+0x88>)
    971c:	7823      	ldrb	r3, [r4, #0]
    971e:	b133      	cbz	r3, 972e <ll_wl_remove+0x42>
    9720:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    9722:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    9724:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    9728:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    972c:	d201      	bcs.n	9732 <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    972e:	2612      	movs	r6, #18
    9730:	e7e4      	b.n	96fc <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    9732:	7823      	ldrb	r3, [r4, #0]
    9734:	40eb      	lsrs	r3, r5
    9736:	07da      	lsls	r2, r3, #31
    9738:	d5f6      	bpl.n	9728 <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    973a:	7863      	ldrb	r3, [r4, #1]
    973c:	412b      	asrs	r3, r5
    973e:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    9742:	07db      	lsls	r3, r3, #31
    9744:	d4f0      	bmi.n	9728 <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    9746:	fb09 4005 	mla	r0, r9, r5, r4
    974a:	2206      	movs	r2, #6
    974c:	4639      	mov	r1, r7
    974e:	3002      	adds	r0, #2
    9750:	f7f6 ff29 	bl	5a6 <memcmp>
		     (addr_type & 0x01)) &&
    9754:	2800      	cmp	r0, #0
    9756:	d1e7      	bne.n	9728 <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    9758:	2301      	movs	r3, #1
    975a:	40ab      	lsls	r3, r5
    975c:	7822      	ldrb	r2, [r4, #0]
    975e:	43db      	mvns	r3, r3
    9760:	b2db      	uxtb	r3, r3
    9762:	401a      	ands	r2, r3
    9764:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    9766:	7862      	ldrb	r2, [r4, #1]
    9768:	4013      	ands	r3, r2
    976a:	7063      	strb	r3, [r4, #1]
    976c:	e7c6      	b.n	96fc <ll_wl_remove+0x10>
    976e:	bf00      	nop
    9770:	20003f9b 	.word	0x20003f9b
    9774:	20002548 	.word	0x20002548

00009778 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    9778:	4a03      	ldr	r2, [pc, #12]	; (9788 <ll_filter_reset+0x10>)
    977a:	2300      	movs	r3, #0
    977c:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    977e:	4a03      	ldr	r2, [pc, #12]	; (978c <ll_filter_reset+0x14>)
    9780:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    9782:	7053      	strb	r3, [r2, #1]
    9784:	4770      	bx	lr
    9786:	bf00      	nop
    9788:	20003f9b 	.word	0x20003f9b
    978c:	20002548 	.word	0x20002548

00009790 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    9790:	4b05      	ldr	r3, [pc, #20]	; (97a8 <cntr_init+0x18>)
    9792:	2200      	movs	r2, #0
    9794:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    9798:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    979c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    97a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    97a4:	4770      	bx	lr
    97a6:	bf00      	nop
    97a8:	4000b000 	.word	0x4000b000

000097ac <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    97ac:	4a04      	ldr	r2, [pc, #16]	; (97c0 <cntr_start+0x14>)
    97ae:	7813      	ldrb	r3, [r2, #0]
    97b0:	1c59      	adds	r1, r3, #1
    97b2:	7011      	strb	r1, [r2, #0]
    97b4:	2001      	movs	r0, #1
    97b6:	b913      	cbnz	r3, 97be <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    97b8:	4a02      	ldr	r2, [pc, #8]	; (97c4 <cntr_start+0x18>)
    97ba:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    97bc:	4618      	mov	r0, r3
}
    97be:	4770      	bx	lr
    97c0:	2000257a 	.word	0x2000257a
    97c4:	4000b000 	.word	0x4000b000

000097c8 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    97c8:	4b09      	ldr	r3, [pc, #36]	; (97f0 <cntr_stop+0x28>)
    97ca:	7818      	ldrb	r0, [r3, #0]
    97cc:	b928      	cbnz	r0, 97da <cntr_stop+0x12>
    97ce:	4040      	eors	r0, r0
    97d0:	f380 8811 	msr	BASEPRI, r0
    97d4:	f04f 0004 	mov.w	r0, #4
    97d8:	df02      	svc	2

	if (--_refcount) {
    97da:	3801      	subs	r0, #1
    97dc:	b2c0      	uxtb	r0, r0
    97de:	7018      	strb	r0, [r3, #0]
    97e0:	2301      	movs	r3, #1
    97e2:	b910      	cbnz	r0, 97ea <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    97e4:	4a03      	ldr	r2, [pc, #12]	; (97f4 <cntr_stop+0x2c>)
    97e6:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    97e8:	4770      	bx	lr
		return 1;
    97ea:	4618      	mov	r0, r3
}
    97ec:	4770      	bx	lr
    97ee:	bf00      	nop
    97f0:	2000257a 	.word	0x2000257a
    97f4:	4000b000 	.word	0x4000b000

000097f8 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    97f8:	4b01      	ldr	r3, [pc, #4]	; (9800 <cntr_cnt_get+0x8>)
    97fa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    97fe:	4770      	bx	lr
    9800:	4000b000 	.word	0x4000b000

00009804 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    9804:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    9808:	4b01      	ldr	r3, [pc, #4]	; (9810 <cntr_cmp_set+0xc>)
    980a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    980e:	4770      	bx	lr
    9810:	4000b000 	.word	0x4000b000

00009814 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    9814:	4b11      	ldr	r3, [pc, #68]	; (985c <do_ecb+0x48>)
{
    9816:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    9818:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    981a:	2500      	movs	r5, #0
    981c:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    981e:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    9820:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    9824:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    9828:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    982c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    982e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    9832:	b934      	cbnz	r4, 9842 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    9834:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    9838:	b91c      	cbnz	r4, 9842 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    983a:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    983e:	2c00      	cmp	r4, #0
    9840:	d1f5      	bne.n	982e <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    9842:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    9844:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    9848:	2c00      	cmp	r4, #0
    984a:	d1e8      	bne.n	981e <do_ecb+0xa>
    984c:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    9850:	2e00      	cmp	r6, #0
    9852:	d0e4      	beq.n	981e <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    9854:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    9858:	bd70      	pop	{r4, r5, r6, pc}
    985a:	bf00      	nop
    985c:	4000e000 	.word	0x4000e000

00009860 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    9860:	b570      	push	{r4, r5, r6, lr}
    9862:	b08c      	sub	sp, #48	; 0x30
    9864:	460e      	mov	r6, r1
    9866:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    9868:	4601      	mov	r1, r0
    986a:	2210      	movs	r2, #16
    986c:	4668      	mov	r0, sp
{
    986e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    9870:	f7f8 fdda 	bl	2428 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    9874:	2210      	movs	r2, #16
    9876:	eb0d 0002 	add.w	r0, sp, r2
    987a:	4631      	mov	r1, r6
    987c:	f7f8 fdd4 	bl	2428 <mem_rcopy>

	do_ecb(&ecb);
    9880:	4668      	mov	r0, sp
    9882:	f7ff ffc7 	bl	9814 <do_ecb>

	if (cipher_text_le) {
    9886:	b125      	cbz	r5, 9892 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    9888:	2210      	movs	r2, #16
    988a:	a908      	add	r1, sp, #32
    988c:	4628      	mov	r0, r5
    988e:	f7f8 fdcb 	bl	2428 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    9892:	b124      	cbz	r4, 989e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    9894:	2210      	movs	r2, #16
    9896:	a908      	add	r1, sp, #32
    9898:	4620      	mov	r0, r4
    989a:	f7f6 fe99 	bl	5d0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    989e:	b00c      	add	sp, #48	; 0x30
    98a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000098a4 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    98a4:	4b07      	ldr	r3, [pc, #28]	; (98c4 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    98a6:	4a08      	ldr	r2, [pc, #32]	; (98c8 <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    98a8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    98ac:	4907      	ldr	r1, [pc, #28]	; (98cc <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    98ae:	4a08      	ldr	r2, [pc, #32]	; (98d0 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    98b0:	2800      	cmp	r0, #0
    98b2:	bf14      	ite	ne
    98b4:	4610      	movne	r0, r2
    98b6:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    98b8:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    98ba:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    98be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    98c2:	4770      	bx	lr
    98c4:	4001f000 	.word	0x4001f000
    98c8:	40008140 	.word	0x40008140
    98cc:	40001004 	.word	0x40001004
    98d0:	40001000 	.word	0x40001000

000098d4 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    98d4:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    98d6:	4e2c      	ldr	r6, [pc, #176]	; (9988 <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    98d8:	4f2c      	ldr	r7, [pc, #176]	; (998c <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    98da:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    98dc:	4b2c      	ldr	r3, [pc, #176]	; (9990 <sw_switch.isra.9+0xbc>)
    98de:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    98e2:	b22b      	sxth	r3, r5
    98e4:	00dc      	lsls	r4, r3, #3
    98e6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    98ea:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    98ee:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    98f2:	f105 040b 	add.w	r4, r5, #11
    98f6:	b2e4      	uxtb	r4, r4
    98f8:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    98fa:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    98fe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    9902:	3fc0      	subs	r7, #192	; 0xc0
    9904:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    9908:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    990c:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    9910:	2800      	cmp	r0, #0
    9912:	d034      	beq.n	997e <sw_switch.isra.9+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    9914:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    9918:	f649 4040 	movw	r0, #40000	; 0x9c40
    991c:	2a02      	cmp	r2, #2
    991e:	bf0c      	ite	eq
    9920:	4602      	moveq	r2, r0
    9922:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    9924:	f242 47b8 	movw	r7, #9400	; 0x24b8
    9928:	f241 3088 	movw	r0, #5000	; 0x1388
    992c:	2902      	cmp	r1, #2
    992e:	bf18      	it	ne
    9930:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    9932:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    9936:	4401      	add	r1, r0
    9938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    993c:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    9940:	4a14      	ldr	r2, [pc, #80]	; (9994 <sw_switch.isra.9+0xc0>)
    9942:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    9946:	009b      	lsls	r3, r3, #2
    9948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    994c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    9950:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    9954:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    9956:	bf8b      	itete	hi
    9958:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    995c:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    995e:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    9960:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    9964:	bf88      	it	hi
    9966:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    996a:	4b08      	ldr	r3, [pc, #32]	; (998c <sw_switch.isra.9+0xb8>)
    996c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    9970:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    9974:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    9976:	f003 0301 	and.w	r3, r3, #1
    997a:	7033      	strb	r3, [r6, #0]
    997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    997e:	4a06      	ldr	r2, [pc, #24]	; (9998 <sw_switch.isra.9+0xc4>)
    9980:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    9984:	212c      	movs	r1, #44	; 0x2c
    9986:	e7de      	b.n	9946 <sw_switch.isra.9+0x72>
    9988:	20002798 	.word	0x20002798
    998c:	4001f000 	.word	0x4001f000
    9990:	4000110c 	.word	0x4000110c
    9994:	40001000 	.word	0x40001000
    9998:	40001004 	.word	0x40001004

0000999c <isr_radio>:
	if (sfp_radio_isr) {
    999c:	4b02      	ldr	r3, [pc, #8]	; (99a8 <isr_radio+0xc>)
    999e:	681b      	ldr	r3, [r3, #0]
    99a0:	b103      	cbz	r3, 99a4 <isr_radio+0x8>
		sfp_radio_isr();
    99a2:	4718      	bx	r3
    99a4:	4770      	bx	lr
    99a6:	bf00      	nop
    99a8:	20002794 	.word	0x20002794

000099ac <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    99ac:	4b06      	ldr	r3, [pc, #24]	; (99c8 <radio_isr_set+0x1c>)
    99ae:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    99b0:	4b06      	ldr	r3, [pc, #24]	; (99cc <radio_isr_set+0x20>)
    99b2:	2210      	movs	r2, #16
    99b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    99b8:	4b05      	ldr	r3, [pc, #20]	; (99d0 <radio_isr_set+0x24>)
    99ba:	2202      	movs	r2, #2
    99bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    99c0:	2001      	movs	r0, #1
    99c2:	f7f7 b849 	b.w	a58 <_arch_irq_enable>
    99c6:	bf00      	nop
    99c8:	20002794 	.word	0x20002794
    99cc:	40001000 	.word	0x40001000
    99d0:	e000e100 	.word	0xe000e100

000099d4 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    99d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    99d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    99dc:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    99de:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    99e2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    99e6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    99ea:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    99ee:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    99f2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    99f6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    99fa:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    99fe:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    9a02:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    9a06:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    9a0a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    9a0e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    9a12:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    9a16:	4770      	bx	lr

00009a18 <radio_reset>:
{
    9a18:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    9a1a:	2001      	movs	r0, #1
    9a1c:	f7f7 f82c 	bl	a78 <_arch_irq_disable>
	NRF_RADIO->POWER =
    9a20:	4b08      	ldr	r3, [pc, #32]	; (9a44 <radio_reset+0x2c>)
    9a22:	2200      	movs	r2, #0
    9a24:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    9a28:	2201      	movs	r2, #1
    9a2a:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    9a2e:	4a06      	ldr	r2, [pc, #24]	; (9a48 <radio_reset+0x30>)
    9a30:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    9a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    9a36:	f023 0301 	bic.w	r3, r3, #1
    9a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    9a3e:	6013      	str	r3, [r2, #0]
    9a40:	bd08      	pop	{r3, pc}
    9a42:	bf00      	nop
    9a44:	40001000 	.word	0x40001000
    9a48:	40001774 	.word	0x40001774

00009a4c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    9a4c:	4b06      	ldr	r3, [pc, #24]	; (9a68 <radio_phy_set+0x1c>)
	switch (phy) {
    9a4e:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    9a50:	bf0c      	ite	eq
    9a52:	2204      	moveq	r2, #4
    9a54:	2203      	movne	r2, #3
    9a56:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    9a5a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    9a5e:	f042 0201 	orr.w	r2, r2, #1
    9a62:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    9a66:	4770      	bx	lr
    9a68:	40001000 	.word	0x40001000

00009a6c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    9a6c:	4b01      	ldr	r3, [pc, #4]	; (9a74 <radio_tx_power_set+0x8>)
    9a6e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    9a72:	4770      	bx	lr
    9a74:	40001000 	.word	0x40001000

00009a78 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    9a78:	4b01      	ldr	r3, [pc, #4]	; (9a80 <radio_freq_chan_set+0x8>)
    9a7a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    9a7e:	4770      	bx	lr
    9a80:	40001000 	.word	0x40001000

00009a84 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    9a84:	4b07      	ldr	r3, [pc, #28]	; (9aa4 <radio_whiten_iv_set+0x20>)
    9a86:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    9a8a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    9a8e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    9a92:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    9a96:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    9a9a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    9a9e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    9aa2:	4770      	bx	lr
    9aa4:	40001000 	.word	0x40001000

00009aa8 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    9aa8:	4a0a      	ldr	r2, [pc, #40]	; (9ad4 <radio_aa_set+0x2c>)
    9aaa:	2300      	movs	r3, #0
    9aac:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    9ab0:	2301      	movs	r3, #1
    9ab2:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    9ab6:	78c3      	ldrb	r3, [r0, #3]
    9ab8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    9abc:	7843      	ldrb	r3, [r0, #1]
    9abe:	7881      	ldrb	r1, [r0, #2]
    9ac0:	041b      	lsls	r3, r3, #16
    9ac2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    9ac6:	7801      	ldrb	r1, [r0, #0]
    9ac8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9acc:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    9ad0:	4770      	bx	lr
    9ad2:	bf00      	nop
    9ad4:	40001000 	.word	0x40001000

00009ad8 <radio_pkt_configure>:
	switch (phy) {
    9ad8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    9adc:	2b02      	cmp	r3, #2
{
    9ade:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    9ae0:	bf0c      	ite	eq
    9ae2:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    9ae6:	2400      	movne	r4, #0
	if (dc) {
    9ae8:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    9aea:	f1c0 0308 	rsb	r3, r0, #8
    9aee:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    9af2:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    9af6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    9afa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    9afe:	4a0b      	ldr	r2, [pc, #44]	; (9b2c <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    9b00:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    9b04:	bf48      	it	mi
    9b06:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    9b0a:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    9b0c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    9b10:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    9b14:	4b06      	ldr	r3, [pc, #24]	; (9b30 <radio_pkt_configure+0x58>)
    9b16:	4003      	ands	r3, r0
    9b18:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    9b1c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    9b20:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    9b24:	4319      	orrs	r1, r3
    9b26:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    9b2a:	bd10      	pop	{r4, pc}
    9b2c:	40001000 	.word	0x40001000
    9b30:	fef80000 	.word	0xfef80000

00009b34 <radio_pkt_rx_set>:
    9b34:	4b01      	ldr	r3, [pc, #4]	; (9b3c <radio_pkt_rx_set+0x8>)
    9b36:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    9b3a:	4770      	bx	lr
    9b3c:	40001000 	.word	0x40001000

00009b40 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    9b40:	4b01      	ldr	r3, [pc, #4]	; (9b48 <radio_pkt_tx_set+0x8>)
    9b42:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    9b46:	4770      	bx	lr
    9b48:	40001000 	.word	0x40001000

00009b4c <radio_tx_ready_delay_get>:
	switch (phy) {
    9b4c:	2802      	cmp	r0, #2
}
    9b4e:	bf0c      	ite	eq
    9b50:	2028      	moveq	r0, #40	; 0x28
    9b52:	2029      	movne	r0, #41	; 0x29
    9b54:	4770      	bx	lr

00009b56 <radio_tx_chain_delay_get>:
}
    9b56:	2001      	movs	r0, #1
    9b58:	4770      	bx	lr

00009b5a <radio_rx_ready_delay_get>:
}
    9b5a:	2029      	movs	r0, #41	; 0x29
    9b5c:	4770      	bx	lr

00009b5e <radio_rx_chain_delay_get>:
	switch (phy) {
    9b5e:	2802      	cmp	r0, #2
}
    9b60:	bf0c      	ite	eq
    9b62:	2005      	moveq	r0, #5
    9b64:	200a      	movne	r0, #10
    9b66:	4770      	bx	lr

00009b68 <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    9b68:	4b01      	ldr	r3, [pc, #4]	; (9b70 <radio_rx_enable+0x8>)
    9b6a:	2201      	movs	r2, #1
    9b6c:	605a      	str	r2, [r3, #4]
    9b6e:	4770      	bx	lr
    9b70:	40001000 	.word	0x40001000

00009b74 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    9b74:	4b01      	ldr	r3, [pc, #4]	; (9b7c <radio_tx_enable+0x8>)
    9b76:	2201      	movs	r2, #1
    9b78:	601a      	str	r2, [r3, #0]
    9b7a:	4770      	bx	lr
    9b7c:	40001000 	.word	0x40001000

00009b80 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    9b80:	4a07      	ldr	r2, [pc, #28]	; (9ba0 <radio_disable+0x20>)
    9b82:	f44f 6390 	mov.w	r3, #1152	; 0x480
    9b86:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    9b8a:	2301      	movs	r3, #1
    9b8c:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    9b8e:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    9b90:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    9b94:	2100      	movs	r1, #0
    9b96:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    9b9a:	6113      	str	r3, [r2, #16]
    9b9c:	4770      	bx	lr
    9b9e:	bf00      	nop
    9ba0:	4001f000 	.word	0x4001f000

00009ba4 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    9ba4:	4b04      	ldr	r3, [pc, #16]	; (9bb8 <radio_status_reset+0x14>)
    9ba6:	2200      	movs	r2, #0
    9ba8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    9bac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    9bb0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    9bb4:	4770      	bx	lr
    9bb6:	bf00      	nop
    9bb8:	40001000 	.word	0x40001000

00009bbc <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    9bbc:	4b03      	ldr	r3, [pc, #12]	; (9bcc <radio_is_ready+0x10>)
    9bbe:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    9bc2:	3000      	adds	r0, #0
    9bc4:	bf18      	it	ne
    9bc6:	2001      	movne	r0, #1
    9bc8:	4770      	bx	lr
    9bca:	bf00      	nop
    9bcc:	40001000 	.word	0x40001000

00009bd0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    9bd0:	4b03      	ldr	r3, [pc, #12]	; (9be0 <radio_is_done+0x10>)
    9bd2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    9bd6:	3000      	adds	r0, #0
    9bd8:	bf18      	it	ne
    9bda:	2001      	movne	r0, #1
    9bdc:	4770      	bx	lr
    9bde:	bf00      	nop
    9be0:	40001000 	.word	0x40001000

00009be4 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    9be4:	4b03      	ldr	r3, [pc, #12]	; (9bf4 <radio_is_idle+0x10>)
    9be6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    9bea:	fab0 f080 	clz	r0, r0
    9bee:	0940      	lsrs	r0, r0, #5
    9bf0:	4770      	bx	lr
    9bf2:	bf00      	nop
    9bf4:	40001000 	.word	0x40001000

00009bf8 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    9bf8:	4b04      	ldr	r3, [pc, #16]	; (9c0c <radio_crc_configure+0x14>)
    9bfa:	f240 1203 	movw	r2, #259	; 0x103
    9bfe:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    9c02:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    9c06:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    9c0a:	4770      	bx	lr
    9c0c:	40001000 	.word	0x40001000

00009c10 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    9c10:	4b03      	ldr	r3, [pc, #12]	; (9c20 <radio_crc_is_valid+0x10>)
    9c12:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    9c16:	3000      	adds	r0, #0
    9c18:	bf18      	it	ne
    9c1a:	2001      	movne	r0, #1
    9c1c:	4770      	bx	lr
    9c1e:	bf00      	nop
    9c20:	40001000 	.word	0x40001000

00009c24 <radio_pkt_empty_get>:
}
    9c24:	4800      	ldr	r0, [pc, #0]	; (9c28 <radio_pkt_empty_get+0x4>)
    9c26:	4770      	bx	lr
    9c28:	20002688 	.word	0x20002688

00009c2c <radio_pkt_scratch_get>:
}
    9c2c:	4800      	ldr	r0, [pc, #0]	; (9c30 <radio_pkt_scratch_get+0x4>)
    9c2e:	4770      	bx	lr
    9c30:	2000268c 	.word	0x2000268c

00009c34 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    9c34:	4b04      	ldr	r3, [pc, #16]	; (9c48 <radio_switch_complete_and_rx+0x14>)
    9c36:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    9c38:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    9c3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    9c3e:	4602      	mov	r2, r0
    9c40:	4608      	mov	r0, r1
    9c42:	f7ff be47 	b.w	98d4 <sw_switch.isra.9>
    9c46:	bf00      	nop
    9c48:	40001000 	.word	0x40001000

00009c4c <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    9c4c:	4b03      	ldr	r3, [pc, #12]	; (9c5c <radio_switch_complete_and_tx+0x10>)
    9c4e:	2103      	movs	r1, #3
    9c50:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    9c54:	4601      	mov	r1, r0
    9c56:	2001      	movs	r0, #1
    9c58:	f7ff be3c 	b.w	98d4 <sw_switch.isra.9>
    9c5c:	40001000 	.word	0x40001000

00009c60 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    9c60:	4b05      	ldr	r3, [pc, #20]	; (9c78 <radio_switch_complete_and_disable+0x18>)
    9c62:	2203      	movs	r2, #3
    9c64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    9c68:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    9c6c:	f44f 6290 	mov.w	r2, #1152	; 0x480
    9c70:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    9c74:	4770      	bx	lr
    9c76:	bf00      	nop
    9c78:	40001000 	.word	0x40001000

00009c7c <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    9c7c:	4a03      	ldr	r2, [pc, #12]	; (9c8c <radio_rssi_measure+0x10>)
    9c7e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    9c82:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    9c86:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    9c8a:	4770      	bx	lr
    9c8c:	40001000 	.word	0x40001000

00009c90 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    9c90:	4b01      	ldr	r3, [pc, #4]	; (9c98 <radio_rssi_get+0x8>)
    9c92:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    9c96:	4770      	bx	lr
    9c98:	40001000 	.word	0x40001000

00009c9c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    9c9c:	4b02      	ldr	r3, [pc, #8]	; (9ca8 <radio_rssi_status_reset+0xc>)
    9c9e:	2200      	movs	r2, #0
    9ca0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    9ca4:	4770      	bx	lr
    9ca6:	bf00      	nop
    9ca8:	40001000 	.word	0x40001000

00009cac <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    9cac:	4b03      	ldr	r3, [pc, #12]	; (9cbc <radio_rssi_is_ready+0x10>)
    9cae:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    9cb2:	3000      	adds	r0, #0
    9cb4:	bf18      	it	ne
    9cb6:	2001      	movne	r0, #1
    9cb8:	4770      	bx	lr
    9cba:	bf00      	nop
    9cbc:	40001000 	.word	0x40001000

00009cc0 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    9cc0:	b530      	push	{r4, r5, lr}
    9cc2:	2400      	movs	r4, #0
    9cc4:	00a3      	lsls	r3, r4, #2
    9cc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    9cce:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    9cd0:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    9cd4:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    9cd6:	8895      	ldrh	r5, [r2, #4]
    9cd8:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    9cdc:	2c08      	cmp	r4, #8
		bdaddr += 6;
    9cde:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    9ce2:	d1ef      	bne.n	9cc4 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    9ce4:	4b02      	ldr	r3, [pc, #8]	; (9cf0 <radio_filter_configure+0x30>)
    9ce6:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    9cea:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    9cee:	bd30      	pop	{r4, r5, pc}
    9cf0:	40001000 	.word	0x40001000

00009cf4 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    9cf4:	4a03      	ldr	r2, [pc, #12]	; (9d04 <radio_filter_disable+0x10>)
    9cf6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    9cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9cfe:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    9d02:	4770      	bx	lr
    9d04:	40001000 	.word	0x40001000

00009d08 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    9d08:	4b02      	ldr	r3, [pc, #8]	; (9d14 <radio_filter_status_reset+0xc>)
    9d0a:	2200      	movs	r2, #0
    9d0c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    9d10:	4770      	bx	lr
    9d12:	bf00      	nop
    9d14:	40001000 	.word	0x40001000

00009d18 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    9d18:	4b03      	ldr	r3, [pc, #12]	; (9d28 <radio_filter_has_match+0x10>)
    9d1a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    9d1e:	3000      	adds	r0, #0
    9d20:	bf18      	it	ne
    9d22:	2001      	movne	r0, #1
    9d24:	4770      	bx	lr
    9d26:	bf00      	nop
    9d28:	40001000 	.word	0x40001000

00009d2c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    9d2c:	4b01      	ldr	r3, [pc, #4]	; (9d34 <radio_filter_match_get+0x8>)
    9d2e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    9d32:	4770      	bx	lr
    9d34:	40001000 	.word	0x40001000

00009d38 <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    9d38:	4b05      	ldr	r3, [pc, #20]	; (9d50 <radio_tmr_status_reset+0x18>)
    9d3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    9d3e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    9d42:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    9d46:	227f      	movs	r2, #127	; 0x7f
    9d48:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    9d4c:	4770      	bx	lr
    9d4e:	bf00      	nop
    9d50:	4000b000 	.word	0x4000b000

00009d54 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    9d54:	4b03      	ldr	r3, [pc, #12]	; (9d64 <radio_tmr_tifs_set+0x10>)
    9d56:	4a04      	ldr	r2, [pc, #16]	; (9d68 <radio_tmr_tifs_set+0x14>)
    9d58:	781b      	ldrb	r3, [r3, #0]
    9d5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    9d5e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    9d62:	4770      	bx	lr
    9d64:	20002798 	.word	0x20002798
    9d68:	40009000 	.word	0x40009000

00009d6c <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    9d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    9d70:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    9d74:	4c30      	ldr	r4, [pc, #192]	; (9e38 <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    9d76:	4d31      	ldr	r5, [pc, #196]	; (9e3c <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    9d78:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    9d7c:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    9d7e:	bf88      	it	hi
    9d80:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    9d84:	4b2e      	ldr	r3, [pc, #184]	; (9e40 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    9d86:	4c2f      	ldr	r4, [pc, #188]	; (9e44 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    9d88:	bf82      	ittt	hi
    9d8a:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    9d8e:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    9d92:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    9d96:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    9d98:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    9d9c:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    9d9e:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    9da0:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    9da4:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    9da6:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    9daa:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    9dae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    9db2:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    9db6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    9dba:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    9dbe:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    9dc2:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    9dc6:	4920      	ldr	r1, [pc, #128]	; (9e48 <radio_tmr_start+0xdc>)
    9dc8:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    9dcc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    9dd0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    9dd4:	f7ff fd66 	bl	98a4 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    9dd8:	4b1c      	ldr	r3, [pc, #112]	; (9e4c <radio_tmr_start+0xe0>)
    9dda:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    9ddc:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    9de0:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    9de4:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    9de8:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    9dea:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    9dee:	3b74      	subs	r3, #116	; 0x74
    9df0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    9df4:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    9df8:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    9dfc:	f503 739a 	add.w	r3, r3, #308	; 0x134
    9e00:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    9e04:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    9e08:	33c4      	adds	r3, #196	; 0xc4
    9e0a:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    9e0e:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    9e12:	3bc0      	subs	r3, #192	; 0xc0
    9e14:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    9e18:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    9e1c:	33c8      	adds	r3, #200	; 0xc8
    9e1e:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    9e22:	f44f 6310 	mov.w	r3, #2304	; 0x900
    9e26:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    9e2a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    9e2e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    9e32:	4628      	mov	r0, r5
    9e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e38:	7ff0bdbf 	.word	0x7ff0bdbf
    9e3c:	000f4240 	.word	0x000f4240
    9e40:	40008000 	.word	0x40008000
    9e44:	4000b000 	.word	0x4000b000
    9e48:	4000b148 	.word	0x4000b148
    9e4c:	40009000 	.word	0x40009000

00009e50 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    9e50:	4a04      	ldr	r2, [pc, #16]	; (9e64 <radio_tmr_stop+0x14>)
    9e52:	2301      	movs	r3, #1
    9e54:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    9e56:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    9e58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    9e5c:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    9e5e:	6113      	str	r3, [r2, #16]
    9e60:	4770      	bx	lr
    9e62:	bf00      	nop
    9e64:	40008000 	.word	0x40008000

00009e68 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    9e68:	4b0c      	ldr	r3, [pc, #48]	; (9e9c <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    9e6a:	4a0d      	ldr	r2, [pc, #52]	; (9ea0 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    9e6c:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    9e70:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    9e74:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    9e78:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9e7c:	3240      	adds	r2, #64	; 0x40
    9e7e:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    9e82:	f502 7280 	add.w	r2, r2, #256	; 0x100
    9e86:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    9e8a:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    9e8e:	3a34      	subs	r2, #52	; 0x34
    9e90:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    9e94:	2218      	movs	r2, #24
    9e96:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9e9a:	4770      	bx	lr
    9e9c:	40008000 	.word	0x40008000
    9ea0:	40001104 	.word	0x40001104

00009ea4 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    9ea4:	4b0b      	ldr	r3, [pc, #44]	; (9ed4 <radio_tmr_aa_capture+0x30>)
    9ea6:	4a0c      	ldr	r2, [pc, #48]	; (9ed8 <radio_tmr_aa_capture+0x34>)
    9ea8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    9eac:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9eb0:	3240      	adds	r2, #64	; 0x40
    9eb2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    9eb6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    9eba:	3a3c      	subs	r2, #60	; 0x3c
    9ebc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    9ec0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9ec4:	3240      	adds	r2, #64	; 0x40
    9ec6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    9eca:	220c      	movs	r2, #12
    9ecc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9ed0:	4770      	bx	lr
    9ed2:	bf00      	nop
    9ed4:	4001f000 	.word	0x4001f000
    9ed8:	40001100 	.word	0x40001100

00009edc <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    9edc:	4b01      	ldr	r3, [pc, #4]	; (9ee4 <radio_tmr_aa_get+0x8>)
    9ede:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    9ee2:	4770      	bx	lr
    9ee4:	40008000 	.word	0x40008000

00009ee8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    9ee8:	4b01      	ldr	r3, [pc, #4]	; (9ef0 <radio_tmr_aa_save+0x8>)
    9eea:	6018      	str	r0, [r3, #0]
    9eec:	4770      	bx	lr
    9eee:	bf00      	nop
    9ef0:	20002790 	.word	0x20002790

00009ef4 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    9ef4:	4b01      	ldr	r3, [pc, #4]	; (9efc <radio_tmr_aa_restore+0x8>)
    9ef6:	6818      	ldr	r0, [r3, #0]
    9ef8:	4770      	bx	lr
    9efa:	bf00      	nop
    9efc:	20002790 	.word	0x20002790

00009f00 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    9f00:	4b01      	ldr	r3, [pc, #4]	; (9f08 <radio_tmr_ready_get+0x8>)
    9f02:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    9f06:	4770      	bx	lr
    9f08:	40008000 	.word	0x40008000

00009f0c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    9f0c:	4b06      	ldr	r3, [pc, #24]	; (9f28 <radio_tmr_end_capture+0x1c>)
    9f0e:	4a07      	ldr	r2, [pc, #28]	; (9f2c <radio_tmr_end_capture+0x20>)
    9f10:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    9f14:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9f18:	323c      	adds	r2, #60	; 0x3c
    9f1a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    9f1e:	2220      	movs	r2, #32
    9f20:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9f24:	4770      	bx	lr
    9f26:	bf00      	nop
    9f28:	4001f000 	.word	0x4001f000
    9f2c:	4000110c 	.word	0x4000110c

00009f30 <radio_tmr_end_get>:
    9f30:	4b01      	ldr	r3, [pc, #4]	; (9f38 <radio_tmr_end_get+0x8>)
    9f32:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    9f36:	4770      	bx	lr
    9f38:	40008000 	.word	0x40008000

00009f3c <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    9f3c:	4b01      	ldr	r3, [pc, #4]	; (9f44 <radio_tmr_tifs_base_get+0x8>)
    9f3e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    9f42:	4770      	bx	lr
    9f44:	40008000 	.word	0x40008000

00009f48 <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9f48:	4b16      	ldr	r3, [pc, #88]	; (9fa4 <radio_ccm_rx_pkt_set+0x5c>)
{
    9f4a:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9f4c:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9f4e:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9f50:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    9f54:	4e14      	ldr	r6, [pc, #80]	; (9fa8 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9f56:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    9f5a:	4d14      	ldr	r5, [pc, #80]	; (9fac <radio_ccm_rx_pkt_set+0x64>)
    9f5c:	2902      	cmp	r1, #2
    9f5e:	bf0c      	ite	eq
    9f60:	4629      	moveq	r1, r5
    9f62:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    9f64:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9f68:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    9f6c:	4810      	ldr	r0, [pc, #64]	; (9fb0 <radio_ccm_rx_pkt_set+0x68>)
    9f6e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    9f72:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9f76:	4a0f      	ldr	r2, [pc, #60]	; (9fb4 <radio_ccm_rx_pkt_set+0x6c>)
    9f78:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    9f7c:	490e      	ldr	r1, [pc, #56]	; (9fb8 <radio_ccm_rx_pkt_set+0x70>)
    9f7e:	4a0f      	ldr	r2, [pc, #60]	; (9fbc <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    9f80:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    9f84:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    9f88:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    9f8c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    9f90:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    9f94:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    9f98:	2140      	movs	r1, #64	; 0x40
    9f9a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    9f9e:	2201      	movs	r2, #1
    9fa0:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    9fa2:	bd70      	pop	{r4, r5, r6, pc}
    9fa4:	4000f000 	.word	0x4000f000
    9fa8:	01000001 	.word	0x01000001
    9fac:	01010001 	.word	0x01010001
    9fb0:	2000268c 	.word	0x2000268c
    9fb4:	2000257c 	.word	0x2000257c
    9fb8:	40001104 	.word	0x40001104
    9fbc:	4001f000 	.word	0x4001f000

00009fc0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    9fc0:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9fc2:	4b0e      	ldr	r3, [pc, #56]	; (9ffc <radio_ccm_tx_pkt_set+0x3c>)
    9fc4:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9fc6:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9fc8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9fcc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    9fd0:	4c0b      	ldr	r4, [pc, #44]	; (a000 <radio_ccm_tx_pkt_set+0x40>)
    9fd2:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9fd6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    9fda:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    9fde:	4809      	ldr	r0, [pc, #36]	; (a004 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9fe0:	4909      	ldr	r1, [pc, #36]	; (a008 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    9fe2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9fe6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    9fea:	2101      	movs	r1, #1
    9fec:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    9ff0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    9ff4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    9ff8:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    9ffa:	bd10      	pop	{r4, pc}
    9ffc:	4000f000 	.word	0x4000f000
    a000:	01010000 	.word	0x01010000
    a004:	2000268c 	.word	0x2000268c
    a008:	2000257c 	.word	0x2000257c

0000a00c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    a00c:	4b0c      	ldr	r3, [pc, #48]	; (a040 <radio_ccm_is_done+0x34>)
    a00e:	2202      	movs	r2, #2
    a010:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    a014:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    a018:	b16a      	cbz	r2, a036 <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    a01a:	2202      	movs	r2, #2
    a01c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    a020:	4a08      	ldr	r2, [pc, #32]	; (a044 <radio_ccm_is_done+0x38>)
    a022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a026:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    a02a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    a02e:	fab0 f080 	clz	r0, r0
    a032:	0940      	lsrs	r0, r0, #5
    a034:	4770      	bx	lr
		__WFE();
    a036:	bf20      	wfe
		__SEV();
    a038:	bf40      	sev
		__WFE();
    a03a:	bf20      	wfe
    a03c:	e7ea      	b.n	a014 <radio_ccm_is_done+0x8>
    a03e:	bf00      	nop
    a040:	4000f000 	.word	0x4000f000
    a044:	e000e100 	.word	0xe000e100

0000a048 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    a048:	4b03      	ldr	r3, [pc, #12]	; (a058 <radio_ccm_mic_is_valid+0x10>)
    a04a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a04e:	3000      	adds	r0, #0
    a050:	bf18      	it	ne
    a052:	2001      	movne	r0, #1
    a054:	4770      	bx	lr
    a056:	bf00      	nop
    a058:	4000f000 	.word	0x4000f000

0000a05c <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    a05c:	4b01      	ldr	r3, [pc, #4]	; (a064 <radio_ar_match_get+0x8>)
    a05e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    a062:	4770      	bx	lr
    a064:	4000f000 	.word	0x4000f000

0000a068 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    a068:	4a04      	ldr	r2, [pc, #16]	; (a07c <radio_ar_status_reset+0x14>)
    a06a:	2300      	movs	r3, #0
    a06c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    a070:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    a074:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a078:	4770      	bx	lr
    a07a:	bf00      	nop
    a07c:	40001000 	.word	0x40001000

0000a080 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    a080:	4b08      	ldr	r3, [pc, #32]	; (a0a4 <radio_ar_has_match+0x24>)
    a082:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    a086:	b160      	cbz	r0, a0a2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    a088:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    a08c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    a090:	b138      	cbz	r0, a0a2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    a092:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    a096:	b120      	cbz	r0, a0a2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    a098:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    a09c:	fab0 f080 	clz	r0, r0
    a0a0:	0940      	lsrs	r0, r0, #5
}
    a0a2:	4770      	bx	lr
    a0a4:	40001000 	.word	0x40001000

0000a0a8 <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    a0a8:	2901      	cmp	r1, #1
    a0aa:	d005      	beq.n	a0b8 <mayfly_enable_cb+0x10>
    a0ac:	4040      	eors	r0, r0
    a0ae:	f380 8811 	msr	BASEPRI, r0
    a0b2:	f04f 0004 	mov.w	r0, #4
    a0b6:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    a0b8:	2018      	movs	r0, #24
	if (enable) {
    a0ba:	b10a      	cbz	r2, a0c0 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    a0bc:	f7f6 bccc 	b.w	a58 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
    a0c0:	f7f6 bcda 	b.w	a78 <_arch_irq_disable>

0000a0c4 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    a0c4:	b139      	cbz	r1, a0d6 <mayfly_is_enabled+0x12>
    a0c6:	2901      	cmp	r1, #1
    a0c8:	d008      	beq.n	a0dc <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    a0ca:	4040      	eors	r0, r0
    a0cc:	f380 8811 	msr	BASEPRI, r0
    a0d0:	f04f 0004 	mov.w	r0, #4
    a0d4:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    a0d6:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    a0d8:	f7f6 bce2 	b.w	aa0 <_arch_irq_is_enabled>
    a0dc:	2018      	movs	r0, #24
    a0de:	e7fb      	b.n	a0d8 <mayfly_is_enabled+0x14>

0000a0e0 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a0e0:	4288      	cmp	r0, r1
    a0e2:	d00a      	beq.n	a0fa <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    a0e4:	b918      	cbnz	r0, a0ee <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    a0e6:	1e4b      	subs	r3, r1, #1
    a0e8:	4258      	negs	r0, r3
    a0ea:	4158      	adcs	r0, r3
    a0ec:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a0ee:	2801      	cmp	r0, #1
    a0f0:	d105      	bne.n	a0fe <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    a0f2:	fab1 f081 	clz	r0, r1
    a0f6:	0940      	lsrs	r0, r0, #5
    a0f8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    a0fa:	2001      	movs	r0, #1
    a0fc:	4770      	bx	lr
    a0fe:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    a100:	4770      	bx	lr
	...

0000a104 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    a104:	4b08      	ldr	r3, [pc, #32]	; (a128 <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    a106:	b139      	cbz	r1, a118 <mayfly_pend+0x14>
    a108:	2901      	cmp	r1, #1
    a10a:	d00a      	beq.n	a122 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    a10c:	4040      	eors	r0, r0
    a10e:	f380 8811 	msr	BASEPRI, r0
    a112:	f04f 0004 	mov.w	r0, #4
    a116:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a118:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a11c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    a120:	4770      	bx	lr
    a122:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a126:	e7f9      	b.n	a11c <mayfly_pend+0x18>
    a128:	e000e100 	.word	0xe000e100

0000a12c <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    a12c:	2803      	cmp	r0, #3
    a12e:	d905      	bls.n	a13c <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    a130:	4040      	eors	r0, r0
    a132:	f380 8811 	msr	BASEPRI, r0
    a136:	f04f 0004 	mov.w	r0, #4
    a13a:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    a13c:	4b02      	ldr	r3, [pc, #8]	; (a148 <hal_ticker_instance0_caller_id_get+0x1c>)
    a13e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    a140:	2800      	cmp	r0, #0
    a142:	d0f5      	beq.n	a130 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    a144:	4770      	bx	lr
    a146:	bf00      	nop
    a148:	0000b85a 	.word	0x0000b85a

0000a14c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    a14c:	3802      	subs	r0, #2
{
    a14e:	b410      	push	{r4}
    a150:	461c      	mov	r4, r3
	switch (caller_id) {
    a152:	2803      	cmp	r0, #3
    a154:	d816      	bhi.n	a184 <hal_ticker_instance0_sched+0x38>
    a156:	e8df f000 	tbb	[pc, r0]
    a15a:	0b02      	.short	0x0b02
    a15c:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    a15e:	2903      	cmp	r1, #3
    a160:	d110      	bne.n	a184 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    a162:	4b13      	ldr	r3, [pc, #76]	; (a1b0 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    a164:	2100      	movs	r1, #0
			m.param = instance;
    a166:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    a168:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    a16a:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a16c:	f7f8 b9de 	b.w	252c <mayfly_enqueue>
		switch (callee_id) {
    a170:	2904      	cmp	r1, #4
    a172:	d107      	bne.n	a184 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    a174:	4b0f      	ldr	r3, [pc, #60]	; (a1b4 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    a176:	2101      	movs	r1, #1
			m.param = instance;
    a178:	609c      	str	r4, [r3, #8]
    a17a:	e7f5      	b.n	a168 <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    a17c:	2903      	cmp	r1, #3
    a17e:	d007      	beq.n	a190 <hal_ticker_instance0_sched+0x44>
    a180:	2904      	cmp	r1, #4
    a182:	d00a      	beq.n	a19a <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    a184:	4040      	eors	r0, r0
    a186:	f380 8811 	msr	BASEPRI, r0
    a18a:	f04f 0004 	mov.w	r0, #4
    a18e:	df02      	svc	2
			m.param = instance;
    a190:	4b09      	ldr	r3, [pc, #36]	; (a1b8 <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a192:	2100      	movs	r1, #0
			m.param = instance;
    a194:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a196:	2001      	movs	r0, #1
    a198:	e7e7      	b.n	a16a <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    a19a:	4b08      	ldr	r3, [pc, #32]	; (a1bc <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    a19c:	2101      	movs	r1, #1
			m.param = instance;
    a19e:	609c      	str	r4, [r3, #8]
    a1a0:	e7f9      	b.n	a196 <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    a1a2:	2904      	cmp	r1, #4
    a1a4:	d1ee      	bne.n	a184 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    a1a6:	4b06      	ldr	r3, [pc, #24]	; (a1c0 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a1a8:	2101      	movs	r1, #1
			m.param = instance;
    a1aa:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    a1ac:	2003      	movs	r0, #3
    a1ae:	e7dc      	b.n	a16a <hal_ticker_instance0_sched+0x1e>
    a1b0:	20005fd4 	.word	0x20005fd4
    a1b4:	20005fe4 	.word	0x20005fe4
    a1b8:	20005ff4 	.word	0x20005ff4
    a1bc:	20006004 	.word	0x20006004
    a1c0:	20006014 	.word	0x20006014

0000a1c4 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    a1c4:	4601      	mov	r1, r0
    a1c6:	2000      	movs	r0, #0
    a1c8:	f7ff bb1c 	b.w	9804 <cntr_cmp_set>

0000a1cc <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    a1cc:	4770      	bx	lr
	...

0000a1d0 <net_buf_pool_get>:
}
    a1d0:	4b01      	ldr	r3, [pc, #4]	; (a1d8 <net_buf_pool_get+0x8>)
    a1d2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    a1d6:	4770      	bx	lr
    a1d8:	200060fc 	.word	0x200060fc

0000a1dc <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a1dc:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    a1de:	4b04      	ldr	r3, [pc, #16]	; (a1f0 <net_buf_id+0x14>)
    a1e0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    a1e4:	69db      	ldr	r3, [r3, #28]
    a1e6:	1ac0      	subs	r0, r0, r3
}
    a1e8:	4b02      	ldr	r3, [pc, #8]	; (a1f4 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    a1ea:	10c0      	asrs	r0, r0, #3
}
    a1ec:	4358      	muls	r0, r3
    a1ee:	4770      	bx	lr
    a1f0:	200060fc 	.word	0x200060fc
    a1f4:	aaaaaaab 	.word	0xaaaaaaab

0000a1f8 <fixed_data_alloc>:
{
    a1f8:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a1fa:	4b09      	ldr	r3, [pc, #36]	; (a220 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a1fc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a1fe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    a202:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a204:	699b      	ldr	r3, [r3, #24]
    a206:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    a208:	6823      	ldr	r3, [r4, #0]
    a20a:	429a      	cmp	r2, r3
    a20c:	bf94      	ite	ls
    a20e:	600a      	strls	r2, [r1, #0]
    a210:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    a212:	f7ff ffe3 	bl	a1dc <net_buf_id>
    a216:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    a21a:	fb02 3000 	mla	r0, r2, r0, r3
    a21e:	bd10      	pop	{r4, pc}
    a220:	200060fc 	.word	0x200060fc

0000a224 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    a224:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    a228:	4605      	mov	r5, r0
    a22a:	9101      	str	r1, [sp, #4]
    a22c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    a22e:	f000 fdb1 	bl	ad94 <_impl_k_uptime_get_32>
    a232:	4607      	mov	r7, r0
	__asm__ volatile(
    a234:	f04f 0320 	mov.w	r3, #32
    a238:	f3ef 8811 	mrs	r8, BASEPRI
    a23c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    a240:	8a6b      	ldrh	r3, [r5, #18]
    a242:	2b00      	cmp	r3, #0
    a244:	d03d      	beq.n	a2c2 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    a246:	8a2a      	ldrh	r2, [r5, #16]
    a248:	429a      	cmp	r2, r3
    a24a:	d92a      	bls.n	a2a2 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    a24c:	2100      	movs	r1, #0
    a24e:	4628      	mov	r0, r5
    a250:	f000 fad3 	bl	a7fa <k_queue_get>
			if (buf) {
    a254:	4604      	mov	r4, r0
    a256:	b320      	cbz	r0, a2a2 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a258:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    a25c:	9b01      	ldr	r3, [sp, #4]
    a25e:	2b00      	cmp	r3, #0
    a260:	d03c      	beq.n	a2dc <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    a262:	1c73      	adds	r3, r6, #1
    a264:	2b01      	cmp	r3, #1
    a266:	d906      	bls.n	a276 <net_buf_alloc_len+0x52>
    a268:	f000 fd94 	bl	ad94 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    a26c:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    a26e:	42b0      	cmp	r0, r6
    a270:	bf94      	ite	ls
    a272:	1a36      	subls	r6, r6, r0
    a274:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a276:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    a278:	4f1e      	ldr	r7, [pc, #120]	; (a2f4 <net_buf_alloc_len+0xd0>)
    a27a:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    a27e:	4632      	mov	r2, r6
    a280:	699b      	ldr	r3, [r3, #24]
    a282:	681b      	ldr	r3, [r3, #0]
    a284:	a901      	add	r1, sp, #4
    a286:	681b      	ldr	r3, [r3, #0]
    a288:	4620      	mov	r0, r4
    a28a:	4798      	blx	r3
    a28c:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    a28e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    a290:	bb28      	cbnz	r0, a2de <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    a292:	79a0      	ldrb	r0, [r4, #6]
    a294:	4621      	mov	r1, r4
    a296:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    a29a:	f000 fa8e 	bl	a7ba <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    a29e:	462c      	mov	r4, r5
    a2a0:	e018      	b.n	a2d4 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    a2a2:	8a6b      	ldrh	r3, [r5, #18]
    a2a4:	1e5a      	subs	r2, r3, #1
    a2a6:	826a      	strh	r2, [r5, #18]
    a2a8:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    a2ac:	8a2c      	ldrh	r4, [r5, #16]
    a2ae:	1ae4      	subs	r4, r4, r3
    a2b0:	69eb      	ldr	r3, [r5, #28]
    a2b2:	2218      	movs	r2, #24
    a2b4:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    a2b8:	4b0e      	ldr	r3, [pc, #56]	; (a2f4 <net_buf_alloc_len+0xd0>)
    a2ba:	1aed      	subs	r5, r5, r3
    a2bc:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    a2be:	71a5      	strb	r5, [r4, #6]
		goto success;
    a2c0:	e7cc      	b.n	a25c <net_buf_alloc_len+0x38>
    a2c2:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    a2c6:	4631      	mov	r1, r6
    a2c8:	4628      	mov	r0, r5
    a2ca:	f000 fa96 	bl	a7fa <k_queue_get>
	if (!buf) {
    a2ce:	4604      	mov	r4, r0
    a2d0:	2800      	cmp	r0, #0
    a2d2:	d1c3      	bne.n	a25c <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    a2d4:	4620      	mov	r0, r4
    a2d6:	b002      	add	sp, #8
    a2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    a2dc:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    a2de:	2301      	movs	r3, #1
    a2e0:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    a2e2:	2300      	movs	r3, #0
	buf->frags = NULL;
    a2e4:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    a2e6:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    a2e8:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    a2ea:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    a2ec:	6923      	ldr	r3, [r4, #16]
    a2ee:	81e2      	strh	r2, [r4, #14]
    a2f0:	60a3      	str	r3, [r4, #8]
	return buf;
    a2f2:	e7ef      	b.n	a2d4 <net_buf_alloc_len+0xb0>
    a2f4:	200060fc 	.word	0x200060fc

0000a2f8 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    a2f8:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    a2fa:	685b      	ldr	r3, [r3, #4]
    a2fc:	460a      	mov	r2, r1
    a2fe:	6819      	ldr	r1, [r3, #0]
    a300:	f7ff bf90 	b.w	a224 <net_buf_alloc_len>

0000a304 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    a304:	b570      	push	{r4, r5, r6, lr}
    a306:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    a308:	f000 fa77 	bl	a7fa <k_queue_get>
	if (!buf) {
    a30c:	4605      	mov	r5, r0
    a30e:	b128      	cbz	r0, a31c <net_buf_get+0x18>
    a310:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    a312:	7963      	ldrb	r3, [r4, #5]
    a314:	f013 0301 	ands.w	r3, r3, #1
    a318:	d102      	bne.n	a320 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    a31a:	6023      	str	r3, [r4, #0]

	return buf;
}
    a31c:	4628      	mov	r0, r5
    a31e:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    a320:	2100      	movs	r1, #0
    a322:	4630      	mov	r0, r6
    a324:	f000 fa69 	bl	a7fa <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    a328:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    a32a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    a32c:	f023 0301 	bic.w	r3, r3, #1
    a330:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    a332:	4604      	mov	r4, r0
    a334:	e7ed      	b.n	a312 <net_buf_get+0xe>

0000a336 <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    a336:	6883      	ldr	r3, [r0, #8]
    a338:	4419      	add	r1, r3
    a33a:	6001      	str	r1, [r0, #0]
    a33c:	4770      	bx	lr

0000a33e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    a33e:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    a340:	460a      	mov	r2, r1
    a342:	6814      	ldr	r4, [r2, #0]
    a344:	b914      	cbnz	r4, a34c <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    a346:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    a348:	f000 ba3b 	b.w	a7c2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    a34c:	7953      	ldrb	r3, [r2, #5]
    a34e:	f043 0301 	orr.w	r3, r3, #1
    a352:	7153      	strb	r3, [r2, #5]
    a354:	4622      	mov	r2, r4
    a356:	e7f4      	b.n	a342 <net_buf_put+0x4>

0000a358 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a35a:	4d15      	ldr	r5, [pc, #84]	; (a3b0 <net_buf_unref+0x58>)
    a35c:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    a35e:	2600      	movs	r6, #0
	while (buf) {
    a360:	b904      	cbnz	r4, a364 <net_buf_unref+0xc>
    a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    a364:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    a366:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    a368:	3b01      	subs	r3, #1
    a36a:	b2db      	uxtb	r3, r3
    a36c:	7123      	strb	r3, [r4, #4]
    a36e:	2b00      	cmp	r3, #0
    a370:	d1f7      	bne.n	a362 <net_buf_unref+0xa>
		if (buf->__buf) {
    a372:	6921      	ldr	r1, [r4, #16]
    a374:	b159      	cbz	r1, a38e <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    a376:	7963      	ldrb	r3, [r4, #5]
    a378:	079b      	lsls	r3, r3, #30
    a37a:	d407      	bmi.n	a38c <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    a37c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    a37e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    a382:	4620      	mov	r0, r4
    a384:	699b      	ldr	r3, [r3, #24]
    a386:	681b      	ldr	r3, [r3, #0]
    a388:	689b      	ldr	r3, [r3, #8]
    a38a:	4798      	blx	r3
			buf->__buf = NULL;
    a38c:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    a38e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    a390:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    a392:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    a396:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    a398:	695b      	ldr	r3, [r3, #20]
    a39a:	b11b      	cbz	r3, a3a4 <net_buf_unref+0x4c>
			pool->destroy(buf);
    a39c:	4620      	mov	r0, r4
    a39e:	4798      	blx	r3
{
    a3a0:	463c      	mov	r4, r7
    a3a2:	e7dd      	b.n	a360 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    a3a4:	4621      	mov	r1, r4
    a3a6:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a3aa:	f000 fa06 	bl	a7ba <k_queue_prepend>
    a3ae:	e7f7      	b.n	a3a0 <net_buf_unref+0x48>
    a3b0:	200060fc 	.word	0x200060fc

0000a3b4 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    a3b4:	7903      	ldrb	r3, [r0, #4]
    a3b6:	3301      	adds	r3, #1
    a3b8:	7103      	strb	r3, [r0, #4]
	return buf;
}
    a3ba:	4770      	bx	lr

0000a3bc <net_buf_simple_add>:
	return buf->data + buf->len;
    a3bc:	8883      	ldrh	r3, [r0, #4]
    a3be:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    a3c0:	4419      	add	r1, r3
    a3c2:	8081      	strh	r1, [r0, #4]
	return tail;
}
    a3c4:	18d0      	adds	r0, r2, r3
    a3c6:	4770      	bx	lr

0000a3c8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    a3c8:	b430      	push	{r4, r5}
    a3ca:	8883      	ldrh	r3, [r0, #4]
    a3cc:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    a3ce:	189d      	adds	r5, r3, r2
    a3d0:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    a3d2:	18e0      	adds	r0, r4, r3
}
    a3d4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    a3d6:	f7f6 b8fb 	b.w	5d0 <memcpy>

0000a3da <net_buf_simple_add_u8>:
    a3da:	8883      	ldrh	r3, [r0, #4]
    a3dc:	6802      	ldr	r2, [r0, #0]

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
    a3de:	b510      	push	{r4, lr}
	buf->len += len;
    a3e0:	1c5c      	adds	r4, r3, #1
    a3e2:	8084      	strh	r4, [r0, #4]
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    a3e4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
    a3e6:	18d0      	adds	r0, r2, r3
    a3e8:	bd10      	pop	{r4, pc}

0000a3ea <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    a3ea:	8883      	ldrh	r3, [r0, #4]
    a3ec:	1a5b      	subs	r3, r3, r1
    a3ee:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    a3f0:	6803      	ldr	r3, [r0, #0]
    a3f2:	4419      	add	r1, r3
    a3f4:	6001      	str	r1, [r0, #0]
}
    a3f6:	4608      	mov	r0, r1
    a3f8:	4770      	bx	lr

0000a3fa <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    a3fa:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    a3fc:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    a3fe:	2101      	movs	r1, #1
	val = buf->data[0];
    a400:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    a402:	f7ff fff2 	bl	a3ea <net_buf_simple_pull>

	return val;
}
    a406:	4610      	mov	r0, r2
    a408:	bd08      	pop	{r3, pc}

0000a40a <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    a40a:	6802      	ldr	r2, [r0, #0]
    a40c:	6880      	ldr	r0, [r0, #8]
}
    a40e:	1a10      	subs	r0, r2, r0
    a410:	4770      	bx	lr
	...

0000a414 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    a414:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    a416:	4b08      	ldr	r3, [pc, #32]	; (a438 <_sys_device_do_config_level+0x24>)
    a418:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a41c:	3001      	adds	r0, #1
    a41e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    a422:	4620      	mov	r0, r4
    a424:	42a8      	cmp	r0, r5
    a426:	f104 040c 	add.w	r4, r4, #12
    a42a:	d300      	bcc.n	a42e <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    a42c:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    a42e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    a432:	685b      	ldr	r3, [r3, #4]
    a434:	4798      	blx	r3
    a436:	e7f4      	b.n	a422 <_sys_device_do_config_level+0xe>
    a438:	0000b86c 	.word	0x0000b86c

0000a43c <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    a43c:	4b10      	ldr	r3, [pc, #64]	; (a480 <device_get_binding+0x44>)
{
    a43e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    a440:	4c10      	ldr	r4, [pc, #64]	; (a484 <device_get_binding+0x48>)
{
    a442:	4605      	mov	r5, r0
    a444:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    a446:	429c      	cmp	r4, r3
    a448:	d104      	bne.n	a454 <device_get_binding+0x18>
    a44a:	4c0e      	ldr	r4, [pc, #56]	; (a484 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    a44c:	42b4      	cmp	r4, r6
    a44e:	d109      	bne.n	a464 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    a450:	2400      	movs	r4, #0
    a452:	e012      	b.n	a47a <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    a454:	6862      	ldr	r2, [r4, #4]
    a456:	b11a      	cbz	r2, a460 <device_get_binding+0x24>
    a458:	6822      	ldr	r2, [r4, #0]
    a45a:	6812      	ldr	r2, [r2, #0]
    a45c:	42aa      	cmp	r2, r5
    a45e:	d00c      	beq.n	a47a <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    a460:	340c      	adds	r4, #12
    a462:	e7f0      	b.n	a446 <device_get_binding+0xa>
		if (!info->driver_api) {
    a464:	6863      	ldr	r3, [r4, #4]
    a466:	b90b      	cbnz	r3, a46c <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    a468:	340c      	adds	r4, #12
    a46a:	e7ef      	b.n	a44c <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    a46c:	6823      	ldr	r3, [r4, #0]
    a46e:	4628      	mov	r0, r5
    a470:	6819      	ldr	r1, [r3, #0]
    a472:	f7f6 f88b 	bl	58c <strcmp>
    a476:	2800      	cmp	r0, #0
    a478:	d1f6      	bne.n	a468 <device_get_binding+0x2c>
}
    a47a:	4620      	mov	r0, r4
    a47c:	bd70      	pop	{r4, r5, r6, pc}
    a47e:	bf00      	nop
    a480:	200060a0 	.word	0x200060a0
    a484:	20006034 	.word	0x20006034

0000a488 <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    a488:	1c43      	adds	r3, r0, #1
    a48a:	d003      	beq.n	a494 <_sys_power_save_idle_exit+0xc>
    a48c:	4b03      	ldr	r3, [pc, #12]	; (a49c <_sys_power_save_idle_exit+0x14>)
    a48e:	681b      	ldr	r3, [r3, #0]
    a490:	4298      	cmp	r0, r3
    a492:	db01      	blt.n	a498 <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    a494:	f7f6 bf3c 	b.w	1310 <_timer_idle_exit>
    a498:	4770      	bx	lr
    a49a:	bf00      	nop
    a49c:	20006024 	.word	0x20006024

0000a4a0 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a4a0:	4d0f      	ldr	r5, [pc, #60]	; (a4e0 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    a4a2:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    a4a4:	4f0f      	ldr	r7, [pc, #60]	; (a4e4 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a4a6:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    a4aa:	f04f 0220 	mov.w	r2, #32
    a4ae:	f3ef 8311 	mrs	r3, BASEPRI
    a4b2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    a4b6:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a4b8:	42b3      	cmp	r3, r6
    a4ba:	d00a      	beq.n	a4d2 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    a4bc:	b14b      	cbz	r3, a4d2 <idle+0x32>
    a4be:	691c      	ldr	r4, [r3, #16]
    a4c0:	1c63      	adds	r3, r4, #1
    a4c2:	d008      	beq.n	a4d6 <idle+0x36>
    a4c4:	683b      	ldr	r3, [r7, #0]
    a4c6:	42a3      	cmp	r3, r4
    a4c8:	dd05      	ble.n	a4d6 <idle+0x36>
	_kernel.idle = ticks;
    a4ca:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    a4cc:	f7f6 fb4c 	bl	b68 <k_cpu_idle>
    a4d0:	e7eb      	b.n	a4aa <idle+0xa>
    a4d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    a4d6:	4620      	mov	r0, r4
    a4d8:	f7f6 ff06 	bl	12e8 <_timer_idle_enter>
    a4dc:	e7f5      	b.n	a4ca <idle+0x2a>
    a4de:	bf00      	nop
    a4e0:	20002894 	.word	0x20002894
    a4e4:	20006024 	.word	0x20006024

0000a4e8 <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    a4e8:	4802      	ldr	r0, [pc, #8]	; (a4f4 <_bss_zero+0xc>)
    a4ea:	4a03      	ldr	r2, [pc, #12]	; (a4f8 <_bss_zero+0x10>)
    a4ec:	2100      	movs	r1, #0
    a4ee:	1a12      	subs	r2, r2, r0
    a4f0:	f7f6 b89a 	b.w	628 <memset>
    a4f4:	20000000 	.word	0x20000000
    a4f8:	20004028 	.word	0x20004028

0000a4fc <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    a4fc:	4802      	ldr	r0, [pc, #8]	; (a508 <_data_copy+0xc>)
    a4fe:	4a03      	ldr	r2, [pc, #12]	; (a50c <_data_copy+0x10>)
    a500:	4903      	ldr	r1, [pc, #12]	; (a510 <_data_copy+0x14>)
    a502:	1a12      	subs	r2, r2, r0
    a504:	f7f6 b864 	b.w	5d0 <memcpy>
    a508:	20005ba0 	.word	0x20005ba0
    a50c:	2000613c 	.word	0x2000613c
    a510:	0000b888 	.word	0x0000b888

0000a514 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    a514:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a516:	2002      	movs	r0, #2
    a518:	f7ff ff7c 	bl	a414 <_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    a51c:	2003      	movs	r0, #3
    a51e:	f7ff ff79 	bl	a414 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    a522:	f000 fe1f 	bl	b164 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    a526:	f7f6 f8cb 	bl	6c0 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    a52a:	4a03      	ldr	r2, [pc, #12]	; (a538 <bg_thread_main+0x24>)
    a52c:	7a13      	ldrb	r3, [r2, #8]
    a52e:	f023 0301 	bic.w	r3, r3, #1
    a532:	7213      	strb	r3, [r2, #8]
    a534:	bd08      	pop	{r3, pc}
    a536:	bf00      	nop
    a538:	2000282c 	.word	0x2000282c

0000a53c <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    a53c:	b580      	push	{r7, lr}
    a53e:	b086      	sub	sp, #24
    a540:	4e32      	ldr	r6, [pc, #200]	; (a60c <_Cstart+0xd0>)
    a542:	af06      	add	r7, sp, #24
	_IntLibInit();
    a544:	f7f6 f99a 	bl	87c <_IntLibInit>
    a548:	2324      	movs	r3, #36	; 0x24
    a54a:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    a54c:	519a      	str	r2, [r3, r6]
    a54e:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    a550:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    a554:	6052      	str	r2, [r2, #4]
    a556:	d1f8      	bne.n	a54a <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    a558:	4d2d      	ldr	r5, [pc, #180]	; (a610 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    a55a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; a638 <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    a55e:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    a560:	2400      	movs	r4, #0
    a562:	f04f 0901 	mov.w	r9, #1
    a566:	4643      	mov	r3, r8
    a568:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a56c:	4929      	ldr	r1, [pc, #164]	; (a614 <_Cstart+0xd8>)
    a56e:	f8cd 9010 	str.w	r9, [sp, #16]
    a572:	4628      	mov	r0, r5
    a574:	9403      	str	r4, [sp, #12]
    a576:	9402      	str	r4, [sp, #8]
    a578:	9401      	str	r4, [sp, #4]
    a57a:	9400      	str	r4, [sp, #0]
    a57c:	f000 fdaa 	bl	b0d4 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a580:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    a582:	4628      	mov	r0, r5
    a584:	f023 0304 	bic.w	r3, r3, #4
    a588:	726b      	strb	r3, [r5, #9]
    a58a:	f000 f97d 	bl	a888 <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    a58e:	230f      	movs	r3, #15
    a590:	9303      	str	r3, [sp, #12]
    a592:	4921      	ldr	r1, [pc, #132]	; (a618 <_Cstart+0xdc>)
    a594:	f8cd 9010 	str.w	r9, [sp, #16]
    a598:	9402      	str	r4, [sp, #8]
    a59a:	9401      	str	r4, [sp, #4]
    a59c:	9400      	str	r4, [sp, #0]
    a59e:	4b1f      	ldr	r3, [pc, #124]	; (a61c <_Cstart+0xe0>)
    a5a0:	481f      	ldr	r0, [pc, #124]	; (a620 <_Cstart+0xe4>)
    a5a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a5a6:	f000 fd95 	bl	b0d4 <_setup_new_thread>
    a5aa:	4b1d      	ldr	r3, [pc, #116]	; (a620 <_Cstart+0xe4>)
    a5ac:	4a1c      	ldr	r2, [pc, #112]	; (a620 <_Cstart+0xe4>)
    a5ae:	7a5b      	ldrb	r3, [r3, #9]
    a5b0:	f023 0304 	bic.w	r3, r3, #4
    a5b4:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    a5b6:	4610      	mov	r0, r2
    a5b8:	f000 f966 	bl	a888 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    a5bc:	4b19      	ldr	r3, [pc, #100]	; (a624 <_Cstart+0xe8>)
    a5be:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    a5c0:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    a5c2:	4b19      	ldr	r3, [pc, #100]	; (a628 <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a5c4:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a5c8:	4b18      	ldr	r3, [pc, #96]	; (a62c <_Cstart+0xf0>)
    a5ca:	22e0      	movs	r2, #224	; 0xe0
    a5cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    a5d0:	77dc      	strb	r4, [r3, #31]
    a5d2:	761c      	strb	r4, [r3, #24]
    a5d4:	765c      	strb	r4, [r3, #25]
    a5d6:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a5d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a5da:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    a5de:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    a5e0:	f7f6 fa32 	bl	a48 <_FaultInit>
	_CpuIdleInit();
    a5e4:	f7f6 faba 	bl	b5c <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a5e8:	4620      	mov	r0, r4
    a5ea:	f7ff ff13 	bl	a414 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a5ee:	4648      	mov	r0, r9
    a5f0:	f7ff ff10 	bl	a414 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    a5f4:	4b0e      	ldr	r3, [pc, #56]	; (a630 <_Cstart+0xf4>)

	_current = main_thread;
    a5f6:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    a5f8:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    a5fc:	4a0d      	ldr	r2, [pc, #52]	; (a634 <_Cstart+0xf8>)
    a5fe:	f383 8809 	msr	PSP, r3
    a602:	2100      	movs	r1, #0
    a604:	f381 8811 	msr	BASEPRI, r1
    a608:	4640      	mov	r0, r8
    a60a:	4710      	bx	r2
    a60c:	20002894 	.word	0x20002894
    a610:	2000282c 	.word	0x2000282c
    a614:	20004a60 	.word	0x20004a60
    a618:	20004e60 	.word	0x20004e60
    a61c:	0000a4a1 	.word	0x0000a4a1
    a620:	200027c4 	.word	0x200027c4
    a624:	200028a4 	.word	0x200028a4
    a628:	200057a0 	.word	0x200057a0
    a62c:	e000ed00 	.word	0xe000ed00
    a630:	20004e60 	.word	0x20004e60
    a634:	0000b06d 	.word	0x0000b06d
    a638:	0000a515 	.word	0x0000a515

0000a63c <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    a63c:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    a63e:	7ac4      	ldrb	r4, [r0, #11]
    a640:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    a642:	428c      	cmp	r4, r1
    a644:	f04f 040c 	mov.w	r4, #12
    a648:	bfb6      	itet	lt
    a64a:	4361      	mullt	r1, r4
    a64c:	fb04 0101 	mlage	r1, r4, r1, r0
    a650:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    a652:	2420      	movs	r4, #32
    a654:	fb92 f4f4 	sdiv	r4, r2, r4
    a658:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    a65c:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    a65e:	f002 001f 	and.w	r0, r2, #31
    a662:	bd10      	pop	{r4, pc}

0000a664 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    a664:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    a666:	ab01      	add	r3, sp, #4
    a668:	f7ff ffe8 	bl	a63c <get_bit_ptr>

	*word |= (1<<bit);
    a66c:	9a01      	ldr	r2, [sp, #4]
    a66e:	2301      	movs	r3, #1
    a670:	fa03 f000 	lsl.w	r0, r3, r0
    a674:	6813      	ldr	r3, [r2, #0]
    a676:	4303      	orrs	r3, r0
    a678:	6013      	str	r3, [r2, #0]
}
    a67a:	b003      	add	sp, #12
    a67c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a680 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    a680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a684:	4c30      	ldr	r4, [pc, #192]	; (a748 <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    a686:	4e31      	ldr	r6, [pc, #196]	; (a74c <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    a688:	270c      	movs	r7, #12
    a68a:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    a68e:	42b5      	cmp	r5, r6
    a690:	d302      	bcc.n	a698 <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    a692:	2000      	movs	r0, #0
    a694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    a698:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    a69c:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    a6a0:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    a6a4:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    a6a6:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    a6aa:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    a6ac:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    a6ae:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    a6b0:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    a6b4:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    a6b8:	4291      	cmp	r1, r2
    a6ba:	db07      	blt.n	a6cc <init_static_pools+0x4c>
    a6bc:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    a6c0:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    a6c4:	4598      	cmp	r8, r3
    a6c6:	db24      	blt.n	a712 <init_static_pools+0x92>
    a6c8:	3418      	adds	r4, #24
    a6ca:	e7de      	b.n	a68a <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    a6cc:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    a6d0:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    a6d4:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    a6d8:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    a6da:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    a6de:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    a6e2:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    a6e6:	bfc8      	it	gt
    a6e8:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    a6ea:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    a6ee:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    a6f2:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    a6f6:	bfca      	itet	gt
    a6f8:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    a6fc:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    a700:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    a704:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    a708:	bfc8      	it	gt
    a70a:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    a70e:	3101      	adds	r1, #1
    a710:	e7d0      	b.n	a6b4 <init_static_pools+0x34>
	return p->buf + lsz * block;
    a712:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    a716:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    a71a:	f854 0c10 	ldr.w	r0, [r4, #-16]
    a71e:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    a722:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    a726:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    a72a:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    a72c:	689a      	ldr	r2, [r3, #8]
    a72e:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    a730:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    a732:	4628      	mov	r0, r5
    a734:	6011      	str	r1, [r2, #0]
	list->tail = node;
    a736:	6099      	str	r1, [r3, #8]
    a738:	4642      	mov	r2, r8
    a73a:	2100      	movs	r1, #0
    a73c:	f7ff ff92 	bl	a664 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    a740:	f108 0801 	add.w	r8, r8, #1
    a744:	e7bc      	b.n	a6c0 <init_static_pools+0x40>
    a746:	bf00      	nop
    a748:	200060e4 	.word	0x200060e4
    a74c:	200060d4 	.word	0x200060d4

0000a750 <k_queue_init>:
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    a750:	2300      	movs	r3, #0
    a752:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    a754:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    a756:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    a75a:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    a75c:	60c3      	str	r3, [r0, #12]
    a75e:	4770      	bx	lr

0000a760 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    a760:	b510      	push	{r4, lr}
    a762:	f04f 0320 	mov.w	r3, #32
    a766:	f3ef 8411 	mrs	r4, BASEPRI
    a76a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void sys_slist_insert(sys_slist_t *list,
				    sys_snode_t *prev,
				    sys_snode_t *node)
{
	if (!prev) {
    a76e:	b931      	cbnz	r1, a77e <k_queue_insert+0x1e>
	node->next = list->head;
    a770:	6803      	ldr	r3, [r0, #0]
    a772:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    a774:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    a776:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    a778:	b943      	cbnz	r3, a78c <k_queue_insert+0x2c>
		list->tail = node;
    a77a:	6042      	str	r2, [r0, #4]
    a77c:	e006      	b.n	a78c <k_queue_insert+0x2c>
		sys_slist_prepend(list, node);
	} else if (!prev->next) {
    a77e:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    a780:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    a782:	b98b      	cbnz	r3, a7a8 <k_queue_insert+0x48>
	if (!list->tail) {
    a784:	6843      	ldr	r3, [r0, #4]
    a786:	b96b      	cbnz	r3, a7a4 <k_queue_insert+0x44>
		list->tail = node;
    a788:	6042      	str	r2, [r0, #4]
		list->head = node;
    a78a:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    a78c:	2104      	movs	r1, #4
    a78e:	3008      	adds	r0, #8
    a790:	f000 ff6c 	bl	b66c <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    a794:	b150      	cbz	r0, a7ac <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    a796:	f000 fa4b 	bl	ac30 <_update_time_slice_before_swap>
	return __swap(key);
    a79a:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    a79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7a0:	f7f6 b878 	b.w	894 <__swap>
		list->tail->next = node;
    a7a4:	601a      	str	r2, [r3, #0]
    a7a6:	e7e8      	b.n	a77a <k_queue_insert+0x1a>
		sys_slist_append(list, node);
	} else {
		node->next = prev->next;
		prev->next = node;
    a7a8:	600a      	str	r2, [r1, #0]
    a7aa:	e7ef      	b.n	a78c <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a7ac:	f384 8811 	msr	BASEPRI, r4
    a7b0:	bd10      	pop	{r4, pc}

0000a7b2 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    a7b2:	460a      	mov	r2, r1
    a7b4:	6841      	ldr	r1, [r0, #4]
    a7b6:	f7ff bfd3 	b.w	a760 <k_queue_insert>

0000a7ba <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    a7ba:	460a      	mov	r2, r1
    a7bc:	2100      	movs	r1, #0
    a7be:	f7ff bfcf 	b.w	a760 <k_queue_insert>

0000a7c2 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    a7c2:	b510      	push	{r4, lr}
	__asm__ volatile(
    a7c4:	f04f 0320 	mov.w	r3, #32
    a7c8:	f3ef 8411 	mrs	r4, BASEPRI
    a7cc:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    a7d0:	6843      	ldr	r3, [r0, #4]
    a7d2:	b96b      	cbnz	r3, a7f0 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    a7d4:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    a7d6:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    a7d8:	2104      	movs	r1, #4
    a7da:	3008      	adds	r0, #8
    a7dc:	f000 ff46 	bl	b66c <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    a7e0:	b140      	cbz	r0, a7f4 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    a7e2:	f000 fa25 	bl	ac30 <_update_time_slice_before_swap>
	return __swap(key);
    a7e6:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    a7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7ec:	f7f6 b852 	b.w	894 <__swap>
		list->tail->next = (sys_snode_t *)head;
    a7f0:	6019      	str	r1, [r3, #0]
    a7f2:	e7f0      	b.n	a7d6 <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a7f4:	f384 8811 	msr	BASEPRI, r4
    a7f8:	bd10      	pop	{r4, pc}

0000a7fa <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    a7fa:	b530      	push	{r4, r5, lr}
    a7fc:	4604      	mov	r4, r0
    a7fe:	b087      	sub	sp, #28
    a800:	460d      	mov	r5, r1
	__asm__ volatile(
    a802:	f04f 0220 	mov.w	r2, #32
    a806:	f3ef 8311 	mrs	r3, BASEPRI
    a80a:	f382 8811 	msr	BASEPRI, r2
    a80e:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    a810:	b152      	cbz	r2, a828 <k_queue_get+0x2e>
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    a812:	6811      	ldr	r1, [r2, #0]
    a814:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    a816:	6840      	ldr	r0, [r0, #4]
    a818:	4282      	cmp	r2, r0
		list->tail = list->head;
    a81a:	bf08      	it	eq
    a81c:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a81e:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    a822:	4610      	mov	r0, r2
    a824:	b007      	add	sp, #28
    a826:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    a828:	b919      	cbnz	r1, a832 <k_queue_get+0x38>
    a82a:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    a82e:	2200      	movs	r2, #0
    a830:	e7f7      	b.n	a822 <k_queue_get+0x28>
    a832:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    a836:	2104      	movs	r1, #4
    a838:	4603      	mov	r3, r0
    a83a:	eb0d 0001 	add.w	r0, sp, r1
    a83e:	f000 fe5d 	bl	b4fc <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    a842:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    a846:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    a848:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    a84c:	2101      	movs	r1, #1
    a84e:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    a850:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    a854:	f000 fe66 	bl	b524 <k_poll>
		if (err) {
    a858:	2800      	cmp	r0, #0
    a85a:	d1e8      	bne.n	a82e <k_queue_get+0x34>
	__asm__ volatile(
    a85c:	f04f 0320 	mov.w	r3, #32
    a860:	f3ef 8111 	mrs	r1, BASEPRI
    a864:	f383 8811 	msr	BASEPRI, r3
    a868:	6822      	ldr	r2, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list)
{
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    a86a:	b12a      	cbz	r2, a878 <k_queue_get+0x7e>
	if (list->tail == node) {
    a86c:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    a86e:	6813      	ldr	r3, [r2, #0]
    a870:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    a872:	4282      	cmp	r2, r0
		list->tail = list->head;
    a874:	bf08      	it	eq
    a876:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a878:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    a87c:	2a00      	cmp	r2, #0
    a87e:	d1d0      	bne.n	a822 <k_queue_get+0x28>
    a880:	1c6b      	adds	r3, r5, #1
    a882:	d0de      	beq.n	a842 <k_queue_get+0x48>
    a884:	e7d3      	b.n	a82e <k_queue_get+0x34>
	...

0000a888 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    a888:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    a88a:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    a88e:	4911      	ldr	r1, [pc, #68]	; (a8d4 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    a890:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    a894:	1162      	asrs	r2, r4, #5
    a896:	3206      	adds	r2, #6
    a898:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    a89c:	f004 051f 	and.w	r5, r4, #31
    a8a0:	2401      	movs	r4, #1
    a8a2:	40ac      	lsls	r4, r5
    a8a4:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a8a6:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    a8a8:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    a8aa:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    a8ac:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a8ae:	1d1a      	adds	r2, r3, #4
    a8b0:	440a      	add	r2, r1
	node->prev = list->tail;
    a8b2:	440b      	add	r3, r1
	node->next = list;
    a8b4:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    a8b6:	689a      	ldr	r2, [r3, #8]
    a8b8:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    a8ba:	689a      	ldr	r2, [r3, #8]
    a8bc:	6010      	str	r0, [r2, #0]
	list->tail = node;
    a8be:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    a8c0:	69cb      	ldr	r3, [r1, #28]
    a8c2:	f990 400a 	ldrsb.w	r4, [r0, #10]
    a8c6:	f993 200a 	ldrsb.w	r2, [r3, #10]
    a8ca:	4294      	cmp	r4, r2
    a8cc:	bfa8      	it	ge
    a8ce:	4618      	movge	r0, r3
    a8d0:	61c8      	str	r0, [r1, #28]
    a8d2:	bd30      	pop	{r4, r5, pc}
    a8d4:	20002894 	.word	0x20002894

0000a8d8 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a8d8:	7a42      	ldrb	r2, [r0, #9]
    a8da:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a8de:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a8e2:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a8e4:	d104      	bne.n	a8f0 <_ready_thread+0x18>
    a8e6:	6a03      	ldr	r3, [r0, #32]
    a8e8:	3301      	adds	r3, #1
    a8ea:	d101      	bne.n	a8f0 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    a8ec:	f7ff bfcc 	b.w	a888 <_add_thread_to_ready_q>
    a8f0:	4770      	bx	lr
	...

0000a8f4 <_add_timeout>:
{
    a8f4:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a8f6:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    a8f8:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a8fa:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    a8fc:	bb13      	cbnz	r3, a944 <_add_timeout+0x50>
	__asm__ volatile(
    a8fe:	f04f 0220 	mov.w	r2, #32
    a902:	f3ef 8411 	mrs	r4, BASEPRI
    a906:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    a90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a90e:	610a      	str	r2, [r1, #16]
	if (thread) {
    a910:	b180      	cbz	r0, a934 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    a912:	68ca      	ldr	r2, [r1, #12]
    a914:	b14a      	cbz	r2, a92a <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    a916:	e890 0006 	ldmia.w	r0, {r1, r2}
    a91a:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a91c:	6801      	ldr	r1, [r0, #0]
    a91e:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a920:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    a922:	61c3      	str	r3, [r0, #28]
    a924:	f022 0202 	bic.w	r2, r2, #2
    a928:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    a92a:	f7ff ffd5 	bl	a8d8 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a92e:	f384 8811 	msr	BASEPRI, r4
    a932:	bd70      	pop	{r4, r5, r6, pc}
    a934:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    a938:	694b      	ldr	r3, [r1, #20]
    a93a:	b32b      	cbz	r3, a988 <_add_timeout+0x94>
			timeout->func(timeout);
    a93c:	4608      	mov	r0, r1
}
    a93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    a942:	4718      	bx	r3
	return list->head == list;
    a944:	4a11      	ldr	r2, [pc, #68]	; (a98c <_add_timeout+0x98>)
    a946:	4610      	mov	r0, r2
    a948:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a94c:	4283      	cmp	r3, r0
    a94e:	d10c      	bne.n	a96a <_add_timeout+0x76>
	node->next = list;
    a950:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    a952:	6953      	ldr	r3, [r2, #20]
    a954:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    a956:	6953      	ldr	r3, [r2, #20]
    a958:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a95a:	6151      	str	r1, [r2, #20]
    a95c:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    a95e:	1b64      	subs	r4, r4, r5
    a960:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    a962:	6954      	ldr	r4, [r2, #20]
    a964:	42a3      	cmp	r3, r4
    a966:	d0f3      	beq.n	a950 <_add_timeout+0x5c>
    a968:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a96a:	2b00      	cmp	r3, #0
    a96c:	d0f0      	beq.n	a950 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    a96e:	690c      	ldr	r4, [r1, #16]
    a970:	691d      	ldr	r5, [r3, #16]
    a972:	42ac      	cmp	r4, r5
    a974:	dcf3      	bgt.n	a95e <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    a976:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a978:	1b2c      	subs	r4, r5, r4
    a97a:	611c      	str	r4, [r3, #16]
    a97c:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    a97e:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    a980:	685a      	ldr	r2, [r3, #4]
    a982:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    a984:	6059      	str	r1, [r3, #4]
    a986:	bd70      	pop	{r4, r5, r6, pc}
    a988:	bd70      	pop	{r4, r5, r6, pc}
    a98a:	bf00      	nop
    a98c:	20002894 	.word	0x20002894

0000a990 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    a990:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    a994:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    a996:	f990 200a 	ldrsb.w	r2, [r0, #10]
    a99a:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    a99c:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a99e:	3214      	adds	r2, #20
    a9a0:	604b      	str	r3, [r1, #4]
    a9a2:	4b14      	ldr	r3, [pc, #80]	; (a9f4 <_remove_thread_from_ready_q+0x64>)
    a9a4:	00d2      	lsls	r2, r2, #3
    a9a6:	1d11      	adds	r1, r2, #4
	return list->head == list;
    a9a8:	441a      	add	r2, r3
    a9aa:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    a9ac:	6852      	ldr	r2, [r2, #4]
    a9ae:	428a      	cmp	r2, r1
    a9b0:	d10f      	bne.n	a9d2 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    a9b2:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    a9b6:	3110      	adds	r1, #16
    a9b8:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    a9ba:	3206      	adds	r2, #6
    a9bc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    a9c0:	2401      	movs	r4, #1
    a9c2:	f001 011f 	and.w	r1, r1, #31
    a9c6:	fa04 f101 	lsl.w	r1, r4, r1
    a9ca:	6894      	ldr	r4, [r2, #8]
    a9cc:	ea24 0401 	bic.w	r4, r4, r1
    a9d0:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    a9d2:	69da      	ldr	r2, [r3, #28]
    a9d4:	4290      	cmp	r0, r2
    a9d6:	d10b      	bne.n	a9f0 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    a9d8:	6a19      	ldr	r1, [r3, #32]
    a9da:	fa91 f2a1 	rbit	r2, r1
    a9de:	2900      	cmp	r1, #0
    a9e0:	fab2 f282 	clz	r2, r2
    a9e4:	bf08      	it	eq
    a9e6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    a9ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    a9ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
    a9f0:	61da      	str	r2, [r3, #28]
    a9f2:	bd10      	pop	{r4, pc}
    a9f4:	20002894 	.word	0x20002894

0000a9f8 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    a9f8:	b430      	push	{r4, r5}
    a9fa:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    a9fc:	42a1      	cmp	r1, r4
    a9fe:	bf08      	it	eq
    aa00:	2400      	moveq	r4, #0
    aa02:	b314      	cbz	r4, aa4a <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    aa04:	f990 500a 	ldrsb.w	r5, [r0, #10]
    aa08:	f994 300a 	ldrsb.w	r3, [r4, #10]
    aa0c:	429d      	cmp	r5, r3
    aa0e:	da16      	bge.n	aa3e <_pend_thread+0x46>
		node->prev = insert_point->prev;
    aa10:	6863      	ldr	r3, [r4, #4]
    aa12:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    aa14:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    aa16:	6863      	ldr	r3, [r4, #4]
    aa18:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    aa1a:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    aa1c:	7a43      	ldrb	r3, [r0, #9]
    aa1e:	f043 0302 	orr.w	r3, r3, #2
    aa22:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    aa24:	1c53      	adds	r3, r2, #1
    aa26:	d017      	beq.n	aa58 <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    aa28:	3209      	adds	r2, #9
    aa2a:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    aa2c:	bc30      	pop	{r4, r5}
    aa2e:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    aa32:	460a      	mov	r2, r1
    aa34:	3301      	adds	r3, #1
    aa36:	f100 0110 	add.w	r1, r0, #16
    aa3a:	f7ff bf5b 	b.w	a8f4 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    aa3e:	684b      	ldr	r3, [r1, #4]
    aa40:	429c      	cmp	r4, r3
    aa42:	d002      	beq.n	aa4a <_pend_thread+0x52>
    aa44:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    aa46:	2c00      	cmp	r4, #0
    aa48:	d1db      	bne.n	aa02 <_pend_thread+0xa>
	node->next = list;
    aa4a:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    aa4c:	684b      	ldr	r3, [r1, #4]
    aa4e:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    aa50:	684b      	ldr	r3, [r1, #4]
    aa52:	6018      	str	r0, [r3, #0]
	list->tail = node;
    aa54:	6048      	str	r0, [r1, #4]
    aa56:	e7e1      	b.n	aa1c <_pend_thread+0x24>
}
    aa58:	bc30      	pop	{r4, r5}
    aa5a:	4770      	bx	lr

0000aa5c <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    aa5c:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    aa5e:	4c06      	ldr	r4, [pc, #24]	; (aa78 <_pend_current_thread+0x1c>)
{
    aa60:	460e      	mov	r6, r1
    aa62:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    aa64:	68a0      	ldr	r0, [r4, #8]
    aa66:	f7ff ff93 	bl	a990 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    aa6a:	4632      	mov	r2, r6
    aa6c:	4629      	mov	r1, r5
    aa6e:	68a0      	ldr	r0, [r4, #8]
}
    aa70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    aa74:	f7ff bfc0 	b.w	a9f8 <_pend_thread>
    aa78:	20002894 	.word	0x20002894

0000aa7c <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    aa7c:	4a09      	ldr	r2, [pc, #36]	; (aaa4 <__must_switch_threads+0x28>)
    aa7e:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    aa80:	6892      	ldr	r2, [r2, #8]
    aa82:	2900      	cmp	r1, #0
    aa84:	fa91 f3a1 	rbit	r3, r1
    aa88:	f992 000a 	ldrsb.w	r0, [r2, #10]
    aa8c:	fab3 f383 	clz	r3, r3
    aa90:	bf08      	it	eq
    aa92:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    aa96:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    aa98:	4298      	cmp	r0, r3
    aa9a:	bfd4      	ite	le
    aa9c:	2000      	movle	r0, #0
    aa9e:	2001      	movgt	r0, #1
    aaa0:	4770      	bx	lr
    aaa2:	bf00      	nop
    aaa4:	20002894 	.word	0x20002894

0000aaa8 <_reschedule_threads>:
{
    aaa8:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    aaaa:	4b0a      	ldr	r3, [pc, #40]	; (aad4 <_reschedule_threads+0x2c>)
    aaac:	689b      	ldr	r3, [r3, #8]
    aaae:	895b      	ldrh	r3, [r3, #10]
    aab0:	2b7f      	cmp	r3, #127	; 0x7f
    aab2:	4604      	mov	r4, r0
    aab4:	d802      	bhi.n	aabc <_reschedule_threads+0x14>
    aab6:	f7ff ffe1 	bl	aa7c <__must_switch_threads>
    aaba:	b910      	cbnz	r0, aac2 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aabc:	f384 8811 	msr	BASEPRI, r4
    aac0:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    aac2:	4b05      	ldr	r3, [pc, #20]	; (aad8 <_reschedule_threads+0x30>)
    aac4:	2200      	movs	r2, #0
    aac6:	4620      	mov	r0, r4
}
    aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    aacc:	601a      	str	r2, [r3, #0]
    aace:	f7f5 bee1 	b.w	894 <__swap>
    aad2:	bf00      	nop
    aad4:	20002894 	.word	0x20002894
    aad8:	20003fa4 	.word	0x20003fa4

0000aadc <k_sched_unlock>:
	__asm__ volatile(
    aadc:	f04f 0320 	mov.w	r3, #32
    aae0:	f3ef 8011 	mrs	r0, BASEPRI
    aae4:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    aae8:	4b03      	ldr	r3, [pc, #12]	; (aaf8 <k_sched_unlock+0x1c>)
    aaea:	689a      	ldr	r2, [r3, #8]
    aaec:	7ad3      	ldrb	r3, [r2, #11]
    aaee:	3301      	adds	r3, #1
    aaf0:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    aaf2:	f7ff bfd9 	b.w	aaa8 <_reschedule_threads>
    aaf6:	bf00      	nop
    aaf8:	20002894 	.word	0x20002894

0000aafc <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    aafc:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    ab00:	4a12      	ldr	r2, [pc, #72]	; (ab4c <_move_thread_to_end_of_prio_q+0x50>)
{
    ab02:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    ab04:	3314      	adds	r3, #20
    ab06:	00db      	lsls	r3, r3, #3
    ab08:	1d19      	adds	r1, r3, #4
    ab0a:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    ab0c:	684c      	ldr	r4, [r1, #4]
    ab0e:	42a0      	cmp	r0, r4
    ab10:	d01b      	beq.n	ab4a <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    ab12:	6844      	ldr	r4, [r0, #4]
    ab14:	6805      	ldr	r5, [r0, #0]
    ab16:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    ab18:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    ab1a:	4413      	add	r3, r2
	node->next->prev = node->prev;
    ab1c:	606c      	str	r4, [r5, #4]
	node->next = list;
    ab1e:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    ab20:	6899      	ldr	r1, [r3, #8]
    ab22:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    ab24:	6899      	ldr	r1, [r3, #8]
    ab26:	6008      	str	r0, [r1, #0]
	list->tail = node;
    ab28:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    ab2a:	69d3      	ldr	r3, [r2, #28]
    ab2c:	4298      	cmp	r0, r3
    ab2e:	d10b      	bne.n	ab48 <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    ab30:	6a11      	ldr	r1, [r2, #32]
    ab32:	fa91 f3a1 	rbit	r3, r1
    ab36:	2900      	cmp	r1, #0
    ab38:	fab3 f383 	clz	r3, r3
    ab3c:	bf08      	it	eq
    ab3e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    ab42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ab46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ab48:	61d3      	str	r3, [r2, #28]
    ab4a:	bd30      	pop	{r4, r5, pc}
    ab4c:	20002894 	.word	0x20002894

0000ab50 <_impl_k_yield>:
{
    ab50:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ab52:	f04f 0320 	mov.w	r3, #32
    ab56:	f3ef 8511 	mrs	r5, BASEPRI
    ab5a:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    ab5e:	4c09      	ldr	r4, [pc, #36]	; (ab84 <_impl_k_yield+0x34>)
    ab60:	68a0      	ldr	r0, [r4, #8]
    ab62:	f7ff ffcb 	bl	aafc <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    ab66:	68a2      	ldr	r2, [r4, #8]
    ab68:	69e3      	ldr	r3, [r4, #28]
    ab6a:	429a      	cmp	r2, r3
    ab6c:	d102      	bne.n	ab74 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ab6e:	f385 8811 	msr	BASEPRI, r5
    ab72:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    ab74:	4b04      	ldr	r3, [pc, #16]	; (ab88 <_impl_k_yield+0x38>)
    ab76:	2200      	movs	r2, #0
    ab78:	601a      	str	r2, [r3, #0]
    ab7a:	4628      	mov	r0, r5
}
    ab7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ab80:	f7f5 be88 	b.w	894 <__swap>
    ab84:	20002894 	.word	0x20002894
    ab88:	20003fa4 	.word	0x20003fa4

0000ab8c <_impl_k_sleep>:
{
    ab8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (duration == 0) {
    ab8e:	b918      	cbnz	r0, ab98 <_impl_k_sleep+0xc>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ab90:	f7ff ffde 	bl	ab50 <_impl_k_yield>
}
    ab94:	b003      	add	sp, #12
    ab96:	bd30      	pop	{r4, r5, pc}
    ab98:	230a      	movs	r3, #10
    ab9a:	3009      	adds	r0, #9
    ab9c:	fbb0 f0f3 	udiv	r0, r0, r3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
    aba0:	3001      	adds	r0, #1
    aba2:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
    aba4:	f04f 0320 	mov.w	r3, #32
    aba8:	f3ef 8511 	mrs	r5, BASEPRI
    abac:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
    abb0:	4c08      	ldr	r4, [pc, #32]	; (abd4 <_impl_k_sleep+0x48>)
    abb2:	68a0      	ldr	r0, [r4, #8]
    abb4:	f7ff feec 	bl	a990 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    abb8:	68a0      	ldr	r0, [r4, #8]
    abba:	9b01      	ldr	r3, [sp, #4]
    abbc:	f100 0110 	add.w	r1, r0, #16
    abc0:	2200      	movs	r2, #0
    abc2:	f7ff fe97 	bl	a8f4 <_add_timeout>
	_time_slice_elapsed = 0;
    abc6:	4b04      	ldr	r3, [pc, #16]	; (abd8 <_impl_k_sleep+0x4c>)
    abc8:	2200      	movs	r2, #0
    abca:	4628      	mov	r0, r5
    abcc:	601a      	str	r2, [r3, #0]
    abce:	f7f5 fe61 	bl	894 <__swap>
    abd2:	e7df      	b.n	ab94 <_impl_k_sleep+0x8>
    abd4:	20002894 	.word	0x20002894
    abd8:	20003fa4 	.word	0x20003fa4

0000abdc <_impl_k_current_get>:
}
    abdc:	4b01      	ldr	r3, [pc, #4]	; (abe4 <_impl_k_current_get+0x8>)
    abde:	6898      	ldr	r0, [r3, #8]
    abe0:	4770      	bx	lr
    abe2:	bf00      	nop
    abe4:	20002894 	.word	0x20002894

0000abe8 <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    abe8:	4b0d      	ldr	r3, [pc, #52]	; (ac20 <_is_thread_time_slicing+0x38>)
    abea:	681b      	ldr	r3, [r3, #0]
    abec:	2b00      	cmp	r3, #0
    abee:	dd14      	ble.n	ac1a <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    abf0:	4b0c      	ldr	r3, [pc, #48]	; (ac24 <_is_thread_time_slicing+0x3c>)
    abf2:	681b      	ldr	r3, [r3, #0]
    abf4:	4298      	cmp	r0, r3
    abf6:	d010      	beq.n	ac1a <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    abf8:	4a0b      	ldr	r2, [pc, #44]	; (ac28 <_is_thread_time_slicing+0x40>)
    abfa:	f990 300a 	ldrsb.w	r3, [r0, #10]
    abfe:	6812      	ldr	r2, [r2, #0]
    ac00:	4293      	cmp	r3, r2
    ac02:	db0a      	blt.n	ac1a <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    ac04:	f103 0214 	add.w	r2, r3, #20
    ac08:	4b08      	ldr	r3, [pc, #32]	; (ac2c <_is_thread_time_slicing+0x44>)
    ac0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ac0e:	6858      	ldr	r0, [r3, #4]
    ac10:	689b      	ldr	r3, [r3, #8]
    ac12:	1ac0      	subs	r0, r0, r3
    ac14:	bf18      	it	ne
    ac16:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    ac18:	4770      	bx	lr
		return 0;
    ac1a:	2000      	movs	r0, #0
}
    ac1c:	4770      	bx	lr
    ac1e:	bf00      	nop
    ac20:	200029b8 	.word	0x200029b8
    ac24:	0000b884 	.word	0x0000b884
    ac28:	200029bc 	.word	0x200029bc
    ac2c:	20002894 	.word	0x20002894

0000ac30 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    ac30:	4b01      	ldr	r3, [pc, #4]	; (ac38 <_update_time_slice_before_swap+0x8>)
    ac32:	2200      	movs	r2, #0
    ac34:	601a      	str	r2, [r3, #0]
    ac36:	4770      	bx	lr
    ac38:	20003fa4 	.word	0x20003fa4

0000ac3c <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    ac3c:	4a10      	ldr	r2, [pc, #64]	; (ac80 <_unpend_first_thread+0x44>)
    ac3e:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    ac40:	4603      	mov	r3, r0
    ac42:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    ac44:	b16a      	cbz	r2, ac62 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac46:	4283      	cmp	r3, r0
    ac48:	bf08      	it	eq
    ac4a:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    ac4c:	b908      	cbnz	r0, ac52 <_unpend_first_thread+0x16>
    ac4e:	2000      	movs	r0, #0
    ac50:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    ac52:	6a02      	ldr	r2, [r0, #32]
    ac54:	3202      	adds	r2, #2
    ac56:	d107      	bne.n	ac68 <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    ac58:	685a      	ldr	r2, [r3, #4]
    ac5a:	4290      	cmp	r0, r2
    ac5c:	d0f7      	beq.n	ac4e <_unpend_first_thread+0x12>
    ac5e:	6800      	ldr	r0, [r0, #0]
    ac60:	e7f4      	b.n	ac4c <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac62:	4283      	cmp	r3, r0
    ac64:	d00a      	beq.n	ac7c <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    ac66:	b150      	cbz	r0, ac7e <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    ac68:	e890 000c 	ldmia.w	r0, {r2, r3}
    ac6c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ac6e:	6802      	ldr	r2, [r0, #0]
    ac70:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    ac72:	7a43      	ldrb	r3, [r0, #9]
    ac74:	f023 0302 	bic.w	r3, r3, #2
    ac78:	7243      	strb	r3, [r0, #9]
    ac7a:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac7c:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    ac7e:	4770      	bx	lr
    ac80:	20003fa0 	.word	0x20003fa0

0000ac84 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    ac84:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    ac88:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    ac8a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    ac8c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    ac8e:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    ac90:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    ac92:	6143      	str	r3, [r0, #20]
    ac94:	4770      	bx	lr
	...

0000ac98 <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    ac98:	b570      	push	{r4, r5, r6, lr}
    ac9a:	4605      	mov	r5, r0
    ac9c:	f04f 0320 	mov.w	r3, #32
    aca0:	f3ef 8611 	mrs	r6, BASEPRI
    aca4:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    aca8:	f7ff ffc8 	bl	ac3c <_unpend_first_thread>
	if (!thread) {
    acac:	4604      	mov	r4, r0
    acae:	b998      	cbnz	r0, acd8 <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    acb0:	68ab      	ldr	r3, [r5, #8]
    acb2:	68ea      	ldr	r2, [r5, #12]
    acb4:	429a      	cmp	r2, r3
    acb6:	bf18      	it	ne
    acb8:	3301      	addne	r3, #1
    acba:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    acbc:	2102      	movs	r1, #2
    acbe:	f105 0010 	add.w	r0, r5, #16
    acc2:	f000 fcd3 	bl	b66c <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    acc6:	2800      	cmp	r0, #0
    acc8:	d03b      	beq.n	ad42 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    acca:	f7ff ffb1 	bl	ac30 <_update_time_slice_before_swap>
	return __swap(key);
    acce:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    acd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    acd4:	f7f5 bdde 	b.w	894 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    acd8:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    acda:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    acde:	1c48      	adds	r0, r1, #1
    ace0:	d00f      	beq.n	ad02 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    ace2:	4b1b      	ldr	r3, [pc, #108]	; (ad50 <_impl_k_sem_give+0xb8>)
    ace4:	695b      	ldr	r3, [r3, #20]
    ace6:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    ace8:	bf1f      	itttt	ne
    acea:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    acec:	6913      	ldrne	r3, [r2, #16]
    acee:	185b      	addne	r3, r3, r1
    acf0:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    acf2:	6963      	ldr	r3, [r4, #20]
    acf4:	6922      	ldr	r2, [r4, #16]
    acf6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    acf8:	6922      	ldr	r2, [r4, #16]
    acfa:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    acfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ad00:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ad02:	7a63      	ldrb	r3, [r4, #9]
    ad04:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    ad08:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ad0c:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    ad0e:	d102      	bne.n	ad16 <_impl_k_sem_give+0x7e>
    ad10:	6a23      	ldr	r3, [r4, #32]
    ad12:	3301      	adds	r3, #1
    ad14:	d018      	beq.n	ad48 <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ad16:	2300      	movs	r3, #0
    ad18:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ad1a:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    ad1e:	2b0d      	cmp	r3, #13
    ad20:	d80f      	bhi.n	ad42 <_impl_k_sem_give+0xaa>
    ad22:	b11b      	cbz	r3, ad2c <_impl_k_sem_give+0x94>
    ad24:	4b0b      	ldr	r3, [pc, #44]	; (ad54 <_impl_k_sem_give+0xbc>)
    ad26:	685b      	ldr	r3, [r3, #4]
    ad28:	051b      	lsls	r3, r3, #20
    ad2a:	d50a      	bpl.n	ad42 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    ad2c:	4b08      	ldr	r3, [pc, #32]	; (ad50 <_impl_k_sem_give+0xb8>)
    ad2e:	689b      	ldr	r3, [r3, #8]
    ad30:	895b      	ldrh	r3, [r3, #10]
    ad32:	2b7f      	cmp	r3, #127	; 0x7f
    ad34:	d805      	bhi.n	ad42 <_impl_k_sem_give+0xaa>
    ad36:	f7ff fea1 	bl	aa7c <__must_switch_threads>
    ad3a:	3000      	adds	r0, #0
    ad3c:	bf18      	it	ne
    ad3e:	2001      	movne	r0, #1
    ad40:	e7c1      	b.n	acc6 <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ad42:	f386 8811 	msr	BASEPRI, r6
    ad46:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    ad48:	4620      	mov	r0, r4
    ad4a:	f7ff fd9d 	bl	a888 <_add_thread_to_ready_q>
    ad4e:	e7e2      	b.n	ad16 <_impl_k_sem_give+0x7e>
    ad50:	20002894 	.word	0x20002894
    ad54:	e000ed00 	.word	0xe000ed00

0000ad58 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    ad58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    ad5a:	f04f 0320 	mov.w	r3, #32
    ad5e:	f3ef 8411 	mrs	r4, BASEPRI
    ad62:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    ad66:	6883      	ldr	r3, [r0, #8]
    ad68:	b12b      	cbz	r3, ad76 <_impl_k_sem_take+0x1e>
		sem->count--;
    ad6a:	3b01      	subs	r3, #1
    ad6c:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ad6e:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    ad72:	2000      	movs	r0, #0
    ad74:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    ad76:	b921      	cbnz	r1, ad82 <_impl_k_sem_take+0x2a>
    ad78:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    ad7c:	f06f 000f 	mvn.w	r0, #15
    ad80:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    ad82:	f7ff fe6b 	bl	aa5c <_pend_current_thread>
	_update_time_slice_before_swap();
    ad86:	f7ff ff53 	bl	ac30 <_update_time_slice_before_swap>
	return __swap(key);
    ad8a:	4620      	mov	r0, r4

	return _Swap(key);
}
    ad8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ad90:	f7f5 bd80 	b.w	894 <__swap>

0000ad94 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    ad94:	4b03      	ldr	r3, [pc, #12]	; (ada4 <_impl_k_uptime_get_32+0x10>)
    ad96:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    ad9a:	230a      	movs	r3, #10
    ad9c:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    ada0:	4770      	bx	lr
    ada2:	bf00      	nop
    ada4:	20003fa8 	.word	0x20003fa8

0000ada8 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    ada8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    adac:	4607      	mov	r7, r0
	__asm__ volatile(
    adae:	f04f 0320 	mov.w	r3, #32
    adb2:	f3ef 8011 	mrs	r0, BASEPRI
    adb6:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    adba:	4963      	ldr	r1, [pc, #396]	; (af48 <_nano_sys_clock_tick_announce+0x1a0>)
    adbc:	e9d1 4500 	ldrd	r4, r5, [r1]
    adc0:	19e2      	adds	r2, r4, r7
    adc2:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    adc6:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    adca:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    adce:	466e      	mov	r6, sp
    add0:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    add4:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    add8:	f04f 0320 	mov.w	r3, #32
    addc:	f3ef 8011 	mrs	r0, BASEPRI
    ade0:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    ade4:	4c59      	ldr	r4, [pc, #356]	; (af4c <_nano_sys_clock_tick_announce+0x1a4>)
    ade6:	4621      	mov	r1, r4
    ade8:	4602      	mov	r2, r0
    adea:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    adee:	428b      	cmp	r3, r1
    adf0:	d000      	beq.n	adf4 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    adf2:	b9fb      	cbnz	r3, ae34 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    adf4:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    adf8:	68a0      	ldr	r0, [r4, #8]
    adfa:	f7ff fef5 	bl	abe8 <_is_thread_time_slicing>
    adfe:	b1b0      	cbz	r0, ae2e <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    ae00:	4a53      	ldr	r2, [pc, #332]	; (af50 <_nano_sys_clock_tick_announce+0x1a8>)
    ae02:	6811      	ldr	r1, [r2, #0]
    ae04:	230a      	movs	r3, #10
    ae06:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    ae0a:	4b52      	ldr	r3, [pc, #328]	; (af54 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    ae0c:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    ae0e:	681b      	ldr	r3, [r3, #0]
    ae10:	429f      	cmp	r7, r3
    ae12:	db0c      	blt.n	ae2e <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    ae14:	2300      	movs	r3, #0
    ae16:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    ae18:	f04f 0320 	mov.w	r3, #32
    ae1c:	f3ef 8511 	mrs	r5, BASEPRI
    ae20:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    ae24:	68a0      	ldr	r0, [r4, #8]
    ae26:	f7ff fe69 	bl	aafc <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ae2a:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    ae2e:	b003      	add	sp, #12
    ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    ae34:	4d48      	ldr	r5, [pc, #288]	; (af58 <_nano_sys_clock_tick_announce+0x1b0>)
    ae36:	2101      	movs	r1, #1
    ae38:	6029      	str	r1, [r5, #0]
    ae3a:	46ab      	mov	fp, r5
    ae3c:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    ae3e:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    ae42:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    ae46:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    ae48:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    ae4a:	bfaa      	itet	ge
    ae4c:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    ae50:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    ae54:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    ae58:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    ae5a:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    ae5c:	691d      	ldr	r5, [r3, #16]
    ae5e:	4298      	cmp	r0, r3
    ae60:	bf14      	ite	ne
    ae62:	6818      	ldrne	r0, [r3, #0]
    ae64:	2000      	moveq	r0, #0
    ae66:	b9d5      	cbnz	r5, ae9e <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    ae68:	e893 0220 	ldmia.w	r3, {r5, r9}
    ae6c:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    ae70:	681d      	ldr	r5, [r3, #0]
    ae72:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    ae76:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    ae78:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    ae7c:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    ae7e:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    ae80:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    ae82:	f8c3 c010 	str.w	ip, [r3, #16]
    ae86:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    ae8a:	f04f 0320 	mov.w	r3, #32
    ae8e:	f3ef 8211 	mrs	r2, BASEPRI
    ae92:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    ae96:	4603      	mov	r3, r0
    ae98:	2800      	cmp	r0, #0
    ae9a:	d1d4      	bne.n	ae46 <_nano_sys_clock_tick_announce+0x9e>
    ae9c:	e001      	b.n	aea2 <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    ae9e:	2900      	cmp	r1, #0
    aea0:	dcf1      	bgt.n	ae86 <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aea2:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    aea6:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aea8:	42b0      	cmp	r0, r6
    aeaa:	d103      	bne.n	aeb4 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    aeac:	2300      	movs	r3, #0
    aeae:	f8cb 3000 	str.w	r3, [fp]
    aeb2:	e7a1      	b.n	adf8 <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    aeb4:	2800      	cmp	r0, #0
    aeb6:	d0f9      	beq.n	aeac <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    aeb8:	9b01      	ldr	r3, [sp, #4]
    aeba:	4298      	cmp	r0, r3
    aebc:	d101      	bne.n	aec2 <_nano_sys_clock_tick_announce+0x11a>
    aebe:	2600      	movs	r6, #0
    aec0:	e000      	b.n	aec4 <_nano_sys_clock_tick_announce+0x11c>
    aec2:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    aec4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    aec8:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    aecc:	e890 000c 	ldmia.w	r0, {r2, r3}
    aed0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    aed2:	6802      	ldr	r2, [r0, #0]
    aed4:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    aed6:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    aed8:	f04f 0220 	mov.w	r2, #32
    aedc:	f3ef 8a11 	mrs	sl, BASEPRI
    aee0:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    aee4:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    aee8:	b1fb      	cbz	r3, af2a <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    aeea:	68c2      	ldr	r2, [r0, #12]
    aeec:	b152      	cbz	r2, af04 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    aeee:	6859      	ldr	r1, [r3, #4]
    aef0:	681a      	ldr	r2, [r3, #0]
    aef2:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    aef4:	681a      	ldr	r2, [r3, #0]
    aef6:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    aef8:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    aefa:	f8c3 901c 	str.w	r9, [r3, #28]
    aefe:	f022 0202 	bic.w	r2, r2, #2
    af02:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    af04:	7a5a      	ldrb	r2, [r3, #9]
    af06:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    af0a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    af0e:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    af10:	d102      	bne.n	af18 <_nano_sys_clock_tick_announce+0x170>
    af12:	6a1a      	ldr	r2, [r3, #32]
    af14:	3201      	adds	r2, #1
    af16:	d013      	beq.n	af40 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    af18:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    af1c:	2e00      	cmp	r6, #0
    af1e:	d0c5      	beq.n	aeac <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    af20:	9b01      	ldr	r3, [sp, #4]
    af22:	42b3      	cmp	r3, r6
    af24:	d108      	bne.n	af38 <_nano_sys_clock_tick_announce+0x190>
    af26:	2300      	movs	r3, #0
    af28:	e007      	b.n	af3a <_nano_sys_clock_tick_announce+0x192>
    af2a:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    af2e:	6943      	ldr	r3, [r0, #20]
    af30:	2b00      	cmp	r3, #0
    af32:	d0f3      	beq.n	af1c <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    af34:	4798      	blx	r3
    af36:	e7f1      	b.n	af1c <_nano_sys_clock_tick_announce+0x174>
    af38:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    af3a:	4630      	mov	r0, r6
    af3c:	461e      	mov	r6, r3
    af3e:	e7c5      	b.n	aecc <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    af40:	4618      	mov	r0, r3
    af42:	f7ff fca1 	bl	a888 <_add_thread_to_ready_q>
    af46:	e7e7      	b.n	af18 <_nano_sys_clock_tick_announce+0x170>
    af48:	20003fa8 	.word	0x20003fa8
    af4c:	20002894 	.word	0x20002894
    af50:	20003fa4 	.word	0x20003fa4
    af54:	200029b8 	.word	0x200029b8
    af58:	20003fa0 	.word	0x20003fa0

0000af5c <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    af5c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    af5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    af62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    af66:	4903      	ldr	r1, [pc, #12]	; (af74 <k_sys_work_q_init+0x18>)
    af68:	4803      	ldr	r0, [pc, #12]	; (af78 <k_sys_work_q_init+0x1c>)
    af6a:	f000 f971 	bl	b250 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    af6e:	2000      	movs	r0, #0
    af70:	bd08      	pop	{r3, pc}
    af72:	bf00      	nop
    af74:	200057a0 	.word	0x200057a0
    af78:	20003fb0 	.word	0x20003fb0

0000af7c <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    af7c:	7a43      	ldrb	r3, [r0, #9]
    af7e:	06da      	lsls	r2, r3, #27
    af80:	d104      	bne.n	af8c <_is_thread_ready+0x10>
    af82:	6a00      	ldr	r0, [r0, #32]
    af84:	1c43      	adds	r3, r0, #1
    af86:	4258      	negs	r0, r3
    af88:	4158      	adcs	r0, r3
    af8a:	4770      	bx	lr
    af8c:	2000      	movs	r0, #0
}
    af8e:	4770      	bx	lr

0000af90 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    af90:	6903      	ldr	r3, [r0, #16]
    af92:	1c5a      	adds	r2, r3, #1
    af94:	d011      	beq.n	afba <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    af96:	4a0a      	ldr	r2, [pc, #40]	; (afc0 <_abort_timeout+0x30>)
    af98:	6952      	ldr	r2, [r2, #20]
    af9a:	4290      	cmp	r0, r2
    af9c:	bf1f      	itttt	ne
    af9e:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    afa0:	690a      	ldrne	r2, [r1, #16]
    afa2:	189b      	addne	r3, r3, r2
    afa4:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    afa6:	e890 000c 	ldmia.w	r0, {r2, r3}
    afaa:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    afac:	6802      	ldr	r2, [r0, #0]
    afae:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    afb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    afb4:	6103      	str	r3, [r0, #16]
	return 0;
    afb6:	2000      	movs	r0, #0
    afb8:	4770      	bx	lr
		return _INACTIVE;
    afba:	4618      	mov	r0, r3
}
    afbc:	4770      	bx	lr
    afbe:	bf00      	nop
    afc0:	20002894 	.word	0x20002894

0000afc4 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    afc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    afc6:	f04f 0320 	mov.w	r3, #32
    afca:	f3ef 8611 	mrs	r6, BASEPRI
    afce:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    afd2:	4a19      	ldr	r2, [pc, #100]	; (b038 <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    afd4:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    afd6:	230a      	movs	r3, #10
    afd8:	3109      	adds	r1, #9
    afda:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    afde:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    afe0:	6201      	str	r1, [r0, #32]
    afe2:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    afe4:	2300      	movs	r3, #0
    afe6:	61c3      	str	r3, [r0, #28]
    afe8:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    afec:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    afee:	f100 0510 	add.w	r5, r0, #16
    aff2:	d108      	bne.n	b006 <schedule_new_thread.part.13+0x42>
	node->next = list;
    aff4:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    aff6:	6953      	ldr	r3, [r2, #20]
    aff8:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    affa:	6953      	ldr	r3, [r2, #20]
    affc:	601d      	str	r5, [r3, #0]
	list->tail = node;
    affe:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b000:	f386 8811 	msr	BASEPRI, r6
    b004:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b006:	2b00      	cmp	r3, #0
    b008:	d0f4      	beq.n	aff4 <schedule_new_thread.part.13+0x30>
    b00a:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    b00e:	6a04      	ldr	r4, [r0, #32]
    b010:	691f      	ldr	r7, [r3, #16]
    b012:	42bc      	cmp	r4, r7
    b014:	dc08      	bgt.n	b028 <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    b016:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    b018:	1b3c      	subs	r4, r7, r4
    b01a:	611c      	str	r4, [r3, #16]
    b01c:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    b01e:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    b020:	685a      	ldr	r2, [r3, #4]
    b022:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    b024:	605d      	str	r5, [r3, #4]
    b026:	e7eb      	b.n	b000 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    b028:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    b02a:	4573      	cmp	r3, lr
    b02c:	6204      	str	r4, [r0, #32]
    b02e:	d0e1      	beq.n	aff4 <schedule_new_thread.part.13+0x30>
    b030:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b032:	2b00      	cmp	r3, #0
    b034:	d1eb      	bne.n	b00e <schedule_new_thread.part.13+0x4a>
    b036:	e7dd      	b.n	aff4 <schedule_new_thread.part.13+0x30>
    b038:	20002894 	.word	0x20002894

0000b03c <k_is_in_isr>:
    b03c:	f3ef 8005 	mrs	r0, IPSR
    b040:	280d      	cmp	r0, #13
    b042:	d807      	bhi.n	b054 <k_is_in_isr+0x18>
    b044:	b138      	cbz	r0, b056 <k_is_in_isr+0x1a>
    b046:	4b04      	ldr	r3, [pc, #16]	; (b058 <k_is_in_isr+0x1c>)
    b048:	6858      	ldr	r0, [r3, #4]
    b04a:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    b04e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    b052:	4770      	bx	lr
    b054:	2001      	movs	r0, #1
}
    b056:	4770      	bx	lr
    b058:	e000ed00 	.word	0xe000ed00

0000b05c <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    b05c:	4b02      	ldr	r3, [pc, #8]	; (b068 <_is_thread_essential+0xc>)
    b05e:	689b      	ldr	r3, [r3, #8]
    b060:	7a18      	ldrb	r0, [r3, #8]
}
    b062:	f000 0001 	and.w	r0, r0, #1
    b066:	4770      	bx	lr
    b068:	20002894 	.word	0x20002894

0000b06c <_thread_entry>:
{
    b06c:	b508      	push	{r3, lr}
    b06e:	4604      	mov	r4, r0
    b070:	4608      	mov	r0, r1
    b072:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    b074:	461a      	mov	r2, r3
    b076:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    b078:	f7ff fdb0 	bl	abdc <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    b07c:	f7f5 fdb6 	bl	bec <_impl_k_thread_abort>

0000b080 <_impl_k_thread_start>:
{
    b080:	b510      	push	{r4, lr}
    b082:	4601      	mov	r1, r0
	__asm__ volatile(
    b084:	f04f 0320 	mov.w	r3, #32
    b088:	f3ef 8411 	mrs	r4, BASEPRI
    b08c:	f383 8811 	msr	BASEPRI, r3
    b090:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    b092:	075a      	lsls	r2, r3, #29
    b094:	d402      	bmi.n	b09c <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b096:	f384 8811 	msr	BASEPRI, r4
    b09a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b09c:	f023 0304 	bic.w	r3, r3, #4
    b0a0:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    b0a2:	f7ff ff6b 	bl	af7c <_is_thread_ready>
    b0a6:	2800      	cmp	r0, #0
    b0a8:	d0f5      	beq.n	b096 <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    b0aa:	4608      	mov	r0, r1
    b0ac:	f7ff fbec 	bl	a888 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    b0b0:	4b07      	ldr	r3, [pc, #28]	; (b0d0 <_impl_k_thread_start+0x50>)
    b0b2:	689b      	ldr	r3, [r3, #8]
    b0b4:	895b      	ldrh	r3, [r3, #10]
    b0b6:	2b7f      	cmp	r3, #127	; 0x7f
    b0b8:	d8ed      	bhi.n	b096 <_impl_k_thread_start+0x16>
    b0ba:	f7ff fcdf 	bl	aa7c <__must_switch_threads>
    b0be:	2800      	cmp	r0, #0
    b0c0:	d0e9      	beq.n	b096 <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    b0c2:	f7ff fdb5 	bl	ac30 <_update_time_slice_before_swap>
	return __swap(key);
    b0c6:	4620      	mov	r0, r4
}
    b0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0cc:	f7f5 bbe2 	b.w	894 <__swap>
    b0d0:	20002894 	.word	0x20002894

0000b0d4 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    b0d4:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    b0d6:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b0d8:	f7f5 bd18 	b.w	b0c <_new_thread>

0000b0dc <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    b0dc:	b570      	push	{r4, r5, r6, lr}
    b0de:	b086      	sub	sp, #24
    b0e0:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b0e2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    b0e4:	9604      	str	r6, [sp, #16]
    b0e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b0e8:	9603      	str	r6, [sp, #12]
    b0ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b0ec:	9602      	str	r6, [sp, #8]
    b0ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    b0f0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b0f2:	9601      	str	r6, [sp, #4]
    b0f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    b0f6:	9600      	str	r6, [sp, #0]
    b0f8:	f7f5 fd08 	bl	b0c <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    b0fc:	1c6b      	adds	r3, r5, #1
    b0fe:	d003      	beq.n	b108 <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    b100:	b92d      	cbnz	r5, b10e <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    b102:	4620      	mov	r0, r4
    b104:	f7ff ffbc 	bl	b080 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    b108:	4620      	mov	r0, r4
    b10a:	b006      	add	sp, #24
    b10c:	bd70      	pop	{r4, r5, r6, pc}
    b10e:	4629      	mov	r1, r5
    b110:	4620      	mov	r0, r4
    b112:	f7ff ff57 	bl	afc4 <schedule_new_thread.part.13>
    b116:	e7f7      	b.n	b108 <_impl_k_thread_create+0x2c>

0000b118 <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    b118:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    b11a:	b510      	push	{r4, lr}
    b11c:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    b11e:	b103      	cbz	r3, b122 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    b120:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    b122:	4620      	mov	r0, r4
    b124:	f7ff ff2a 	bl	af7c <_is_thread_ready>
    b128:	b138      	cbz	r0, b13a <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    b12a:	4620      	mov	r0, r4
    b12c:	f7ff fc30 	bl	a990 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    b130:	7a63      	ldrb	r3, [r4, #9]
    b132:	f043 0308 	orr.w	r3, r3, #8
    b136:	7263      	strb	r3, [r4, #9]
    b138:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    b13a:	7a63      	ldrb	r3, [r4, #9]
    b13c:	079b      	lsls	r3, r3, #30
    b13e:	d508      	bpl.n	b152 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    b140:	e894 000c 	ldmia.w	r4, {r2, r3}
    b144:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b146:	6822      	ldr	r2, [r4, #0]
    b148:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b14a:	7a63      	ldrb	r3, [r4, #9]
    b14c:	f023 0302 	bic.w	r3, r3, #2
    b150:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    b152:	6a23      	ldr	r3, [r4, #32]
    b154:	3301      	adds	r3, #1
    b156:	d0eb      	beq.n	b130 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    b158:	f104 0010 	add.w	r0, r4, #16
    b15c:	f7ff ff18 	bl	af90 <_abort_timeout>
    b160:	e7e6      	b.n	b130 <_k_thread_single_abort+0x18>
	...

0000b164 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    b164:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    b166:	4f21      	ldr	r7, [pc, #132]	; (b1ec <_init_static_threads+0x88>)
    b168:	4d21      	ldr	r5, [pc, #132]	; (b1f0 <_init_static_threads+0x8c>)
{
    b16a:	b087      	sub	sp, #28
    b16c:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    b16e:	42bd      	cmp	r5, r7
    b170:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    b174:	d314      	bcc.n	b1a0 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    b176:	4b1f      	ldr	r3, [pc, #124]	; (b1f4 <_init_static_threads+0x90>)
    b178:	689a      	ldr	r2, [r3, #8]
    b17a:	7ad3      	ldrb	r3, [r2, #11]
    b17c:	3b01      	subs	r3, #1
    b17e:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    b180:	f04f 0320 	mov.w	r3, #32
    b184:	f3ef 8511 	mrs	r5, BASEPRI
    b188:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    b18c:	4c18      	ldr	r4, [pc, #96]	; (b1f0 <_init_static_threads+0x8c>)
    b18e:	42b4      	cmp	r4, r6
    b190:	d31f      	bcc.n	b1d2 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b192:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    b196:	b007      	add	sp, #28
    b198:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    b19c:	f7ff bc9e 	b.w	aadc <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b1a0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b1a4:	9304      	str	r3, [sp, #16]
    b1a6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b1aa:	9303      	str	r3, [sp, #12]
    b1ac:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b1b0:	9302      	str	r3, [sp, #8]
    b1b2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b1b6:	9301      	str	r3, [sp, #4]
    b1b8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b1bc:	9300      	str	r3, [sp, #0]
    b1be:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    b1c2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    b1c4:	f7f5 fca2 	bl	b0c <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b1c8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    b1cc:	64dd      	str	r5, [r3, #76]	; 0x4c
    b1ce:	4625      	mov	r5, r4
    b1d0:	e7cd      	b.n	b16e <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    b1d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b1d4:	1c4b      	adds	r3, r1, #1
    b1d6:	d003      	beq.n	b1e0 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    b1d8:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    b1da:	b919      	cbnz	r1, b1e4 <_init_static_threads+0x80>
    b1dc:	f7ff ff50 	bl	b080 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b1e0:	342c      	adds	r4, #44	; 0x2c
    b1e2:	e7d4      	b.n	b18e <_init_static_threads+0x2a>
    b1e4:	f7ff feee 	bl	afc4 <schedule_new_thread.part.13>
    b1e8:	e7fa      	b.n	b1e0 <_init_static_threads+0x7c>
    b1ea:	bf00      	nop
    b1ec:	200060a0 	.word	0x200060a0
    b1f0:	200060a0 	.word	0x200060a0
    b1f4:	20002894 	.word	0x20002894

0000b1f8 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    b1f8:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    b1fa:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    b1fc:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    b1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    b202:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    b204:	72c3      	strb	r3, [r0, #11]
    b206:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    b208:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    b20a:	6183      	str	r3, [r0, #24]
	t->func = func;
    b20c:	6243      	str	r3, [r0, #36]	; 0x24
    b20e:	4770      	bx	lr

0000b210 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    b210:	b510      	push	{r4, lr}
    b212:	4604      	mov	r4, r0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
    b214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b218:	4620      	mov	r0, r4
    b21a:	f7ff faee 	bl	a7fa <k_queue_get>
		if (!work) {
    b21e:	4603      	mov	r3, r0
    b220:	2800      	cmp	r0, #0
    b222:	d0f7      	beq.n	b214 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b224:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
    b226:	6842      	ldr	r2, [r0, #4]
    b228:	f3bf 8f5b 	dmb	ish
    b22c:	e853 1f00 	ldrex	r1, [r3]
    b230:	f021 0e01 	bic.w	lr, r1, #1
    b234:	e843 ec00 	strex	ip, lr, [r3]
    b238:	f1bc 0f00 	cmp.w	ip, #0
    b23c:	d1f6      	bne.n	b22c <work_q_main+0x1c>
    b23e:	f3bf 8f5b 	dmb	ish

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    b242:	07cb      	lsls	r3, r1, #31
    b244:	d500      	bpl.n	b248 <work_q_main+0x38>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    b246:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    b248:	f7ff fc82 	bl	ab50 <_impl_k_yield>
    b24c:	e7e2      	b.n	b214 <work_q_main+0x4>
	...

0000b250 <k_work_q_start>:
	}
}

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
    b250:	b5f0      	push	{r4, r5, r6, r7, lr}
    b252:	b087      	sub	sp, #28
    b254:	4604      	mov	r4, r0
    b256:	461f      	mov	r7, r3
    b258:	460d      	mov	r5, r1
    b25a:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    b25c:	f7ff fa78 	bl	a750 <k_queue_init>

    b260:	2000      	movs	r0, #0
    b262:	9005      	str	r0, [sp, #20]
    b264:	9004      	str	r0, [sp, #16]
    b266:	9002      	str	r0, [sp, #8]
    b268:	9001      	str	r0, [sp, #4]
    b26a:	9703      	str	r7, [sp, #12]
    b26c:	9400      	str	r4, [sp, #0]
    b26e:	4b04      	ldr	r3, [pc, #16]	; (b280 <k_work_q_start+0x30>)
    b270:	4632      	mov	r2, r6
    b272:	4629      	mov	r1, r5
    b274:	f104 0010 	add.w	r0, r4, #16
    b278:	f7ff ff30 	bl	b0dc <_impl_k_thread_create>
	k_thread_create(&work_q->thread, stack, stack_size, work_q_main,
			work_q, 0, 0, prio, 0, 0);
	_k_object_init(work_q);
}
    b27c:	b007      	add	sp, #28
    b27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b280:	0000b211 	.word	0x0000b211

0000b284 <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b284:	7a42      	ldrb	r2, [r0, #9]
    b286:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    b28a:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b28e:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    b290:	d104      	bne.n	b29c <_ready_thread+0x18>
    b292:	6a03      	ldr	r3, [r0, #32]
    b294:	3301      	adds	r3, #1
    b296:	d101      	bne.n	b29c <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
    b298:	f7ff baf6 	b.w	a888 <_add_thread_to_ready_q>
    b29c:	4770      	bx	lr

0000b29e <_unpend_thread>:
	node->prev->next = node->next;
    b29e:	e890 000c 	ldmia.w	r0, {r2, r3}
    b2a2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b2a4:	6802      	ldr	r2, [r0, #0]
    b2a6:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    b2a8:	7a43      	ldrb	r3, [r0, #9]
    b2aa:	f023 0302 	bic.w	r3, r3, #2
    b2ae:	7243      	strb	r3, [r0, #9]
    b2b0:	4770      	bx	lr
	...

0000b2b4 <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
    b2b4:	b430      	push	{r4, r5}
	timeout->thread = thread;
    b2b6:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
    b2b8:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    b2ba:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    b2bc:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    b2be:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    b2c0:	b972      	cbnz	r2, b2e0 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
    b2c2:	f04f 0120 	mov.w	r1, #32
    b2c6:	f3ef 8211 	mrs	r2, BASEPRI
    b2ca:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
    b2ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b2d2:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b2d4:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
    b2d8:	6943      	ldr	r3, [r0, #20]
    b2da:	b16b      	cbz	r3, b2f8 <_add_timeout.constprop.9+0x44>
}
    b2dc:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
    b2de:	4718      	bx	r3
	return list->head == list;
    b2e0:	4911      	ldr	r1, [pc, #68]	; (b328 <_add_timeout.constprop.9+0x74>)
    b2e2:	4608      	mov	r0, r1
    b2e4:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b2e8:	4282      	cmp	r2, r0
    b2ea:	d10d      	bne.n	b308 <_add_timeout.constprop.9+0x54>
	node->next = list;
    b2ec:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    b2ee:	694a      	ldr	r2, [r1, #20]
    b2f0:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    b2f2:	694a      	ldr	r2, [r1, #20]
    b2f4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b2f6:	614b      	str	r3, [r1, #20]
}
    b2f8:	bc30      	pop	{r4, r5}
    b2fa:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
    b2fc:	1b64      	subs	r4, r4, r5
    b2fe:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
    b300:	694c      	ldr	r4, [r1, #20]
    b302:	42a2      	cmp	r2, r4
    b304:	d0f2      	beq.n	b2ec <_add_timeout.constprop.9+0x38>
    b306:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    b308:	2a00      	cmp	r2, #0
    b30a:	d0ef      	beq.n	b2ec <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
    b30c:	691c      	ldr	r4, [r3, #16]
    b30e:	6915      	ldr	r5, [r2, #16]
    b310:	42ac      	cmp	r4, r5
    b312:	dcf3      	bgt.n	b2fc <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
    b314:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
    b316:	1b2c      	subs	r4, r5, r4
    b318:	6114      	str	r4, [r2, #16]
    b31a:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
    b31c:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
    b31e:	6851      	ldr	r1, [r2, #4]
    b320:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
    b322:	6053      	str	r3, [r2, #4]
    b324:	e7e8      	b.n	b2f8 <_add_timeout.constprop.9+0x44>
    b326:	bf00      	nop
    b328:	20002894 	.word	0x20002894

0000b32c <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    b32c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    b32e:	2b00      	cmp	r3, #0
{
    b330:	b570      	push	{r4, r5, r6, lr}
    b332:	4604      	mov	r4, r0
    b334:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
    b338:	dd0b      	ble.n	b352 <_timer_expiration_handler+0x26>
	__asm__ volatile(
    b33a:	f04f 0320 	mov.w	r3, #32
    b33e:	f3ef 8611 	mrs	r6, BASEPRI
    b342:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    b346:	6a82      	ldr	r2, [r0, #40]	; 0x28
    b348:	4629      	mov	r1, r5
    b34a:	f7ff ffb3 	bl	b2b4 <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b34e:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    b352:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b354:	3301      	adds	r3, #1
    b356:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    b358:	6a23      	ldr	r3, [r4, #32]
    b35a:	b10b      	cbz	r3, b360 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
    b35c:	4620      	mov	r0, r4
    b35e:	4798      	blx	r3
	return list->head == list;
    b360:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b362:	42ac      	cmp	r4, r5
    b364:	d010      	beq.n	b388 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    b366:	b17c      	cbz	r4, b388 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    b368:	4620      	mov	r0, r4
    b36a:	f7ff ff98 	bl	b29e <_unpend_thread>
	__asm__ volatile(
    b36e:	f04f 0320 	mov.w	r3, #32
    b372:	f3ef 8511 	mrs	r5, BASEPRI
    b376:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    b37a:	4620      	mov	r0, r4
    b37c:	f7ff ff82 	bl	b284 <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b380:	f385 8811 	msr	BASEPRI, r5
    b384:	2300      	movs	r3, #0
    b386:	6663      	str	r3, [r4, #100]	; 0x64
    b388:	bd70      	pop	{r4, r5, r6, pc}

0000b38a <sys_dlist_remove>:
	node->prev->next = node->next;
    b38a:	e890 000c 	ldmia.w	r0, {r2, r3}
    b38e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    b390:	6802      	ldr	r2, [r0, #0]
    b392:	6053      	str	r3, [r2, #4]
    b394:	4770      	bx	lr

0000b396 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    b396:	b570      	push	{r4, r5, r6, lr}
    b398:	2414      	movs	r4, #20
    b39a:	4615      	mov	r5, r2
    b39c:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    b3a0:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    b3a2:	2900      	cmp	r1, #0
    b3a4:	da00      	bge.n	b3a8 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    b3a6:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    b3a8:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    b3aa:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    b3ac:	f003 030f 	and.w	r3, r3, #15
    b3b0:	2b02      	cmp	r3, #2
    b3b2:	d003      	beq.n	b3bc <clear_event_registrations+0x26>
    b3b4:	2b04      	cmp	r3, #4
    b3b6:	d001      	beq.n	b3bc <clear_event_registrations+0x26>
    b3b8:	2b01      	cmp	r3, #1
    b3ba:	d102      	bne.n	b3c2 <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
    b3bc:	4620      	mov	r0, r4
    b3be:	f7ff ffe4 	bl	b38a <sys_dlist_remove>
    b3c2:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    b3c6:	f04f 0320 	mov.w	r3, #32
    b3ca:	f3ef 8511 	mrs	r5, BASEPRI
    b3ce:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    b3d2:	3901      	subs	r1, #1
    b3d4:	3c14      	subs	r4, #20
    b3d6:	e7e4      	b.n	b3a2 <clear_event_registrations+0xc>

0000b3d8 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    b3da:	2300      	movs	r3, #0
    b3dc:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    b3de:	6883      	ldr	r3, [r0, #8]
{
    b3e0:	4605      	mov	r5, r0
    b3e2:	460e      	mov	r6, r1
    b3e4:	4617      	mov	r7, r2
	if (!event->poller) {
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	d049      	beq.n	b47e <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    b3ea:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    b3ec:	7a4b      	ldrb	r3, [r1, #9]
    b3ee:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    b3f2:	0798      	lsls	r0, r3, #30
    b3f4:	724a      	strb	r2, [r1, #9]
    b3f6:	d542      	bpl.n	b47e <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    b3f8:	6a0b      	ldr	r3, [r1, #32]
    b3fa:	3302      	adds	r3, #2
    b3fc:	d04a      	beq.n	b494 <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
    b3fe:	4608      	mov	r0, r1
    b400:	f7ff ffc3 	bl	b38a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b404:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b406:	6a0c      	ldr	r4, [r1, #32]
    b408:	f023 0302 	bic.w	r3, r3, #2
    b40c:	1c62      	adds	r2, r4, #1
    b40e:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    b410:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    b414:	d00c      	beq.n	b430 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    b416:	4b21      	ldr	r3, [pc, #132]	; (b49c <signal_poll_event+0xc4>)
    b418:	695b      	ldr	r3, [r3, #20]
    b41a:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    b41c:	bf1f      	itttt	ne
    b41e:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    b420:	6913      	ldrne	r3, [r2, #16]
    b422:	191b      	addne	r3, r3, r4
    b424:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    b426:	f7ff ffb0 	bl	b38a <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    b42a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b42e:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    b430:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    b432:	2e00      	cmp	r6, #0
    b434:	bf0c      	ite	eq
    b436:	f06f 0303 	mvneq.w	r3, #3
    b43a:	2300      	movne	r3, #0
    b43c:	f010 041f 	ands.w	r4, r0, #31
    b440:	664b      	str	r3, [r1, #100]	; 0x64
    b442:	d11c      	bne.n	b47e <signal_poll_event+0xa6>
    b444:	6a0b      	ldr	r3, [r1, #32]
    b446:	3301      	adds	r3, #1
    b448:	d119      	bne.n	b47e <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    b44a:	4608      	mov	r0, r1
    b44c:	f7ff fa1c 	bl	a888 <_add_thread_to_ready_q>
    b450:	f3ef 8305 	mrs	r3, IPSR
    b454:	2b0d      	cmp	r3, #13
    b456:	d81b      	bhi.n	b490 <signal_poll_event+0xb8>
    b458:	b123      	cbz	r3, b464 <signal_poll_event+0x8c>
    b45a:	4b11      	ldr	r3, [pc, #68]	; (b4a0 <signal_poll_event+0xc8>)
    b45c:	6858      	ldr	r0, [r3, #4]
    b45e:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    b462:	d00b      	beq.n	b47c <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
    b464:	4b0d      	ldr	r3, [pc, #52]	; (b49c <signal_poll_event+0xc4>)
    b466:	689b      	ldr	r3, [r3, #8]
    b468:	895b      	ldrh	r3, [r3, #10]
    b46a:	2b7f      	cmp	r3, #127	; 0x7f
    b46c:	d901      	bls.n	b472 <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    b46e:	2000      	movs	r0, #0
    b470:	e004      	b.n	b47c <signal_poll_event+0xa4>
    b472:	f7ff fb03 	bl	aa7c <__must_switch_threads>
    b476:	3000      	adds	r0, #0
    b478:	bf18      	it	ne
    b47a:	2001      	movne	r0, #1
    b47c:	6038      	str	r0, [r7, #0]
	event->state |= state;
    b47e:	7b6b      	ldrb	r3, [r5, #13]
    b480:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    b484:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    b488:	2000      	movs	r0, #0
	event->state |= state;
    b48a:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    b48c:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
    b48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    b490:	4620      	mov	r0, r4
    b492:	e7f3      	b.n	b47c <signal_poll_event+0xa4>
		return -EAGAIN;
    b494:	f06f 000a 	mvn.w	r0, #10
    b498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b49a:	bf00      	nop
    b49c:	20002894 	.word	0x20002894
    b4a0:	e000ed00 	.word	0xe000ed00

0000b4a4 <add_event>:
	return list->head == list;
    b4a4:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    b4a6:	4298      	cmp	r0, r3
{
    b4a8:	b530      	push	{r4, r5, lr}
    b4aa:	d00a      	beq.n	b4c2 <add_event+0x1e>
    b4ac:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    b4ae:	b144      	cbz	r4, b4c2 <add_event+0x1e>
    b4b0:	68a5      	ldr	r5, [r4, #8]
    b4b2:	6812      	ldr	r2, [r2, #0]
    b4b4:	682d      	ldr	r5, [r5, #0]
    b4b6:	f992 200a 	ldrsb.w	r2, [r2, #10]
    b4ba:	f995 500a 	ldrsb.w	r5, [r5, #10]
    b4be:	4295      	cmp	r5, r2
    b4c0:	da17      	bge.n	b4f2 <add_event+0x4e>
	node->next = list;
    b4c2:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    b4c4:	6843      	ldr	r3, [r0, #4]
    b4c6:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    b4c8:	6843      	ldr	r3, [r0, #4]
    b4ca:	6019      	str	r1, [r3, #0]
	list->tail = node;
    b4cc:	6041      	str	r1, [r0, #4]
    b4ce:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
    b4d0:	689d      	ldr	r5, [r3, #8]
    b4d2:	682d      	ldr	r5, [r5, #0]
    b4d4:	f995 500a 	ldrsb.w	r5, [r5, #10]
    b4d8:	4295      	cmp	r5, r2
    b4da:	dd06      	ble.n	b4ea <add_event+0x46>
		node->prev = insert_point->prev;
    b4dc:	685a      	ldr	r2, [r3, #4]
    b4de:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    b4e0:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    b4e2:	685a      	ldr	r2, [r3, #4]
    b4e4:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    b4e6:	6059      	str	r1, [r3, #4]
    b4e8:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    b4ea:	42a3      	cmp	r3, r4
    b4ec:	d003      	beq.n	b4f6 <add_event+0x52>
    b4ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    b4f0:	b10b      	cbz	r3, b4f6 <add_event+0x52>
    b4f2:	2b00      	cmp	r3, #0
    b4f4:	d1ec      	bne.n	b4d0 <add_event+0x2c>
	node->prev = list->tail;
    b4f6:	e881 0011 	stmia.w	r1, {r0, r4}
    b4fa:	e7e5      	b.n	b4c8 <add_event+0x24>

0000b4fc <k_poll_event_init>:
{
    b4fc:	b530      	push	{r4, r5, lr}
	event->type = type;
    b4fe:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    b500:	6103      	str	r3, [r0, #16]
	event->type = type;
    b502:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    b506:	7b81      	ldrb	r1, [r0, #14]
    b508:	f362 0100 	bfi	r1, r2, #0, #1
    b50c:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    b50e:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    b510:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    b512:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    b516:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    b51a:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    b51c:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    b51e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    b520:	bd30      	pop	{r4, r5, pc}
	...

0000b524 <k_poll>:
{
    b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b528:	b087      	sub	sp, #28
    b52a:	4680      	mov	r8, r0
    b52c:	9101      	str	r1, [sp, #4]
    b52e:	4691      	mov	r9, r2
    b530:	f04f 0320 	mov.w	r3, #32
    b534:	f3ef 8111 	mrs	r1, BASEPRI
    b538:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    b53c:	4d4a      	ldr	r5, [pc, #296]	; (b668 <k_poll+0x144>)
    b53e:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    b540:	7a53      	ldrb	r3, [r2, #9]
    b542:	f043 0320 	orr.w	r3, r3, #32
    b546:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b548:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    b54c:	f10d 0a18 	add.w	sl, sp, #24
    b550:	68aa      	ldr	r2, [r5, #8]
    b552:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    b556:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    b558:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    b55a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    b55e:	9b01      	ldr	r3, [sp, #4]
    b560:	429f      	cmp	r7, r3
    b562:	db15      	blt.n	b590 <k_poll+0x6c>
	__asm__ volatile(
    b564:	f04f 0320 	mov.w	r3, #32
    b568:	f3ef 8711 	mrs	r7, BASEPRI
    b56c:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    b570:	68aa      	ldr	r2, [r5, #8]
    b572:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    b574:	f013 0420 	ands.w	r4, r3, #32
    b578:	d144      	bne.n	b604 <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
    b57a:	463a      	mov	r2, r7
    b57c:	4631      	mov	r1, r6
    b57e:	4640      	mov	r0, r8
    b580:	f7ff ff09 	bl	b396 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b584:	f387 8811 	msr	BASEPRI, r7
}
    b588:	4620      	mov	r0, r4
    b58a:	b007      	add	sp, #28
    b58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    b590:	f04f 0220 	mov.w	r2, #32
    b594:	f3ef 8b11 	mrs	fp, BASEPRI
    b598:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    b59c:	7b61      	ldrb	r1, [r4, #13]
    b59e:	f001 020f 	and.w	r2, r1, #15
    b5a2:	2a02      	cmp	r2, #2
    b5a4:	d003      	beq.n	b5ae <k_poll+0x8a>
    b5a6:	2a04      	cmp	r2, #4
    b5a8:	d004      	beq.n	b5b4 <k_poll+0x90>
    b5aa:	2a01      	cmp	r2, #1
    b5ac:	d106      	bne.n	b5bc <k_poll+0x98>
		if (event->signal->signaled) {
    b5ae:	6920      	ldr	r0, [r4, #16]
    b5b0:	6880      	ldr	r0, [r0, #8]
    b5b2:	e001      	b.n	b5b8 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    b5b4:	6920      	ldr	r0, [r4, #16]
    b5b6:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    b5b8:	2800      	cmp	r0, #0
    b5ba:	d148      	bne.n	b64e <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    b5bc:	f1b9 0f00 	cmp.w	r9, #0
    b5c0:	d016      	beq.n	b5f0 <k_poll+0xcc>
    b5c2:	68a9      	ldr	r1, [r5, #8]
    b5c4:	7a49      	ldrb	r1, [r1, #9]
    b5c6:	068b      	lsls	r3, r1, #26
    b5c8:	d512      	bpl.n	b5f0 <k_poll+0xcc>
	switch (event->type) {
    b5ca:	2a02      	cmp	r2, #2
    b5cc:	d007      	beq.n	b5de <k_poll+0xba>
    b5ce:	2a04      	cmp	r2, #4
    b5d0:	d013      	beq.n	b5fa <k_poll+0xd6>
    b5d2:	2a01      	cmp	r2, #1
    b5d4:	d109      	bne.n	b5ea <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
    b5d6:	4652      	mov	r2, sl
    b5d8:	4621      	mov	r1, r4
    b5da:	6920      	ldr	r0, [r4, #16]
    b5dc:	e003      	b.n	b5e6 <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
    b5de:	6920      	ldr	r0, [r4, #16]
    b5e0:	4652      	mov	r2, sl
    b5e2:	4621      	mov	r1, r4
    b5e4:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    b5e6:	f7ff ff5d 	bl	b4a4 <add_event>
	event->poller = poller;
    b5ea:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    b5ee:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b5f0:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    b5f4:	3701      	adds	r7, #1
    b5f6:	3414      	adds	r4, #20
    b5f8:	e7b1      	b.n	b55e <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
    b5fa:	6920      	ldr	r0, [r4, #16]
    b5fc:	4652      	mov	r2, sl
    b5fe:	4621      	mov	r1, r4
    b600:	3008      	adds	r0, #8
    b602:	e7f0      	b.n	b5e6 <k_poll+0xc2>
	thread->base.thread_state &= ~states;
    b604:	f023 0320 	bic.w	r3, r3, #32
    b608:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    b60a:	f1b9 0f00 	cmp.w	r9, #0
    b60e:	d104      	bne.n	b61a <k_poll+0xf6>
    b610:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    b614:	f06f 040a 	mvn.w	r4, #10
    b618:	e7b6      	b.n	b588 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    b61a:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    b61c:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    b61e:	9004      	str	r0, [sp, #16]
    b620:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
    b622:	f7ff fa1b 	bl	aa5c <_pend_current_thread>
	_update_time_slice_before_swap();
    b626:	f7ff fb03 	bl	ac30 <_update_time_slice_before_swap>
	return __swap(key);
    b62a:	4638      	mov	r0, r7
    b62c:	f7f5 f932 	bl	894 <__swap>
    b630:	4604      	mov	r4, r0
	__asm__ volatile(
    b632:	f04f 0320 	mov.w	r3, #32
    b636:	f3ef 8511 	mrs	r5, BASEPRI
    b63a:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    b63e:	462a      	mov	r2, r5
    b640:	4631      	mov	r1, r6
    b642:	4640      	mov	r0, r8
    b644:	f7ff fea7 	bl	b396 <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b648:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    b64c:	e79c      	b.n	b588 <k_poll+0x64>
	event->state |= state;
    b64e:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    b652:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
    b656:	2300      	movs	r3, #0
    b658:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    b65a:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    b65c:	68a9      	ldr	r1, [r5, #8]
    b65e:	7a4a      	ldrb	r2, [r1, #9]
    b660:	f022 0220 	bic.w	r2, r2, #32
    b664:	724a      	strb	r2, [r1, #9]
    b666:	e7c3      	b.n	b5f0 <k_poll+0xcc>
    b668:	20002894 	.word	0x20002894

0000b66c <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    b66c:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    b66e:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    b670:	42a0      	cmp	r0, r4
    b672:	d102      	bne.n	b67a <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    b674:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    b676:	b002      	add	sp, #8
    b678:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    b67a:	4620      	mov	r0, r4
    b67c:	f7ff fe85 	bl	b38a <sys_dlist_remove>
	if (!poll_event) {
    b680:	2c00      	cmp	r4, #0
    b682:	d0f7      	beq.n	b674 <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    b684:	aa01      	add	r2, sp, #4
    b686:	4620      	mov	r0, r4
    b688:	f7ff fea6 	bl	b3d8 <signal_poll_event>
	return must_reschedule;
    b68c:	9801      	ldr	r0, [sp, #4]
    b68e:	e7f2      	b.n	b676 <_handle_obj_poll_events+0xa>

0000b690 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    b690:	4770      	bx	lr
