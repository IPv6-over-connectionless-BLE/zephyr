
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:
};
#endif

/* Linker needs this */
GEN_ABS_SYM_BEGIN(isr_tables_syms)
GEN_ABSOLUTE_SYM(__ISR_LIST_SIZEOF, sizeof(struct _isr_list));
       0:	20005250 	.word	0x20005250

#ifdef CONFIG_ERRNO
int *__errno(void)
{
	return &_current->errno_var;
}
       4:	00000f71 	.word	0x00000f71
       8:	00000fc1 	.word	0x00000fc1
       c:	00000e09 	.word	0x00000e09
      10:	00000e09 	.word	0x00000e09
      14:	00000e09 	.word	0x00000e09
      18:	00000e09 	.word	0x00000e09
      1c:	00000e09 	.word	0x00000e09
      20:	00000e09 	.word	0x00000e09
      24:	00000e09 	.word	0x00000e09
      28:	00000e09 	.word	0x00000e09
      2c:	000009fd 	.word	0x000009fd
      30:	00000e09 	.word	0x00000e09
      34:	00000e09 	.word	0x00000e09
      38:	000009b9 	.word	0x000009b9
      3c:	00000e09 	.word	0x00000e09

00000040 <_irq_vector_table>:
      40:	00000f35 00008ecb 00000f35 00000f35     5.......5...5...
      50:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      60:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      70:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      80:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      90:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      a0:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      b0:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      c0:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      d0:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      e0:	00000f35 00000f35 00000f35 00000f35     5...5...5...5...
      f0:	00000f35 00000f35                       5...5...

000000f8 <_sw_isr_table>:
      f8:	00000000 00001689 00000000 00000d81     ................
     108:	00000000 00000d81 00000000 00000d81     ................
     118:	00000000 00000d81 00000000 00000d81     ................
     128:	2000626c 0000186d 00000000 00000d81     lb. m...........
     138:	00000000 00000d81 00000000 00000d81     ................
     148:	00000000 00000d81 00000000 00008e91     ................
     158:	00000000 00000d81 20006248 00001c35     ........Hb. 5...
     168:	00000000 00000d81 00000000 00000d81     ................
     178:	00000000 00000d81 00000000 00001d75     ............u...
     188:	00000000 00000d81 00000000 00000d81     ................
     198:	00000000 00000d81 00000000 00000d81     ................
     1a8:	00000000 00000d81 00000000 00000d81     ................
     1b8:	00000000 00008ec5 00000000 00000d81     ................
     1c8:	00000000 00000d81 00000000 00000d81     ................
     1d8:	00000000 00000d81 00000000 00000d81     ................
     1e8:	00000000 00000d81 00000000 00000d81     ................
     1f8:	00000000 00000d81 00000000 00000d81     ................
     208:	00000000 00000d81 00000000 00000d81     ................
     218:	00000000 00000d81 00000000 00000d81     ................
     228:	00000000 00000d81 00000000 00000d81     ................
     238:	00000000 00000d81 00000000 00000d81     ................
     248:	00000000 00000d81 00000000 00000d81     ................
     258:	00000000 00000d81 00000000 00000d81     ................

00000268 <__aeabi_uldivmod>:
     268:	b953      	cbnz	r3, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26a:	b94a      	cbnz	r2, 280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     26c:	2900      	cmp	r1, #0
     26e:	bf08      	it	eq
     270:	2800      	cmpeq	r0, #0
     272:	bf1c      	itt	ne
     274:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     278:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     27c:	f000 b98e 	b.w	59c <__aeabi_idiv0>
     280:	f1ad 0c08 	sub.w	ip, sp, #8
     284:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     288:	f000 f81a 	bl	2c0 <__udivmoddi4>
     28c:	f8dd e004 	ldr.w	lr, [sp, #4]
     290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     294:	b004      	add	sp, #16
     296:	4770      	bx	lr

00000298 <__popcountsi2>:
     298:	0843      	lsrs	r3, r0, #1
     29a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     29e:	1ac0      	subs	r0, r0, r3
     2a0:	0883      	lsrs	r3, r0, #2
     2a2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     2a6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     2aa:	4418      	add	r0, r3
     2ac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     2b0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     2b4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     2b8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     2bc:	0e00      	lsrs	r0, r0, #24
     2be:	4770      	bx	lr

000002c0 <__udivmoddi4>:
     2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     2c4:	468c      	mov	ip, r1
     2c6:	460d      	mov	r5, r1
     2c8:	4604      	mov	r4, r0
     2ca:	9e08      	ldr	r6, [sp, #32]
     2cc:	2b00      	cmp	r3, #0
     2ce:	d151      	bne.n	374 <CONFIG_BT_RX_BUF_LEN+0x54>
     2d0:	428a      	cmp	r2, r1
     2d2:	4617      	mov	r7, r2
     2d4:	d96d      	bls.n	3b2 <CONFIG_BT_RX_BUF_LEN+0x92>
     2d6:	fab2 fe82 	clz	lr, r2
     2da:	f1be 0f00 	cmp.w	lr, #0
     2de:	d00b      	beq.n	2f8 <__udivmoddi4+0x38>
     2e0:	f1ce 0c20 	rsb	ip, lr, #32
     2e4:	fa01 f50e 	lsl.w	r5, r1, lr
     2e8:	fa20 fc0c 	lsr.w	ip, r0, ip
     2ec:	fa02 f70e 	lsl.w	r7, r2, lr
     2f0:	ea4c 0c05 	orr.w	ip, ip, r5
     2f4:	fa00 f40e 	lsl.w	r4, r0, lr
     2f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     2fc:	0c25      	lsrs	r5, r4, #16
     2fe:	fbbc f8fa 	udiv	r8, ip, sl
     302:	fa1f f987 	uxth.w	r9, r7
     306:	fb0a cc18 	mls	ip, sl, r8, ip
     30a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     30e:	fb08 f309 	mul.w	r3, r8, r9
     312:	42ab      	cmp	r3, r5
     314:	d90a      	bls.n	32c <CONFIG_BT_RX_BUF_LEN+0xc>
     316:	19ed      	adds	r5, r5, r7
     318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     31c:	f080 8123 	bcs.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     320:	42ab      	cmp	r3, r5
     322:	f240 8120 	bls.w	566 <CONFIG_BT_RX_STACK_SIZE+0x166>
     326:	f1a8 0802 	sub.w	r8, r8, #2
     32a:	443d      	add	r5, r7
     32c:	1aed      	subs	r5, r5, r3
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fa 	udiv	r0, r5, sl
     334:	fb0a 5510 	mls	r5, sl, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f909 	mul.w	r9, r0, r9
     340:	45a1      	cmp	r9, r4
     342:	d909      	bls.n	358 <CONFIG_BT_RX_BUF_LEN+0x38>
     344:	19e4      	adds	r4, r4, r7
     346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     34a:	f080 810a 	bcs.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     34e:	45a1      	cmp	r9, r4
     350:	f240 8107 	bls.w	562 <CONFIG_BT_RX_STACK_SIZE+0x162>
     354:	3802      	subs	r0, #2
     356:	443c      	add	r4, r7
     358:	eba4 0409 	sub.w	r4, r4, r9
     35c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     360:	2100      	movs	r1, #0
     362:	2e00      	cmp	r6, #0
     364:	d061      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     366:	fa24 f40e 	lsr.w	r4, r4, lr
     36a:	2300      	movs	r3, #0
     36c:	6034      	str	r4, [r6, #0]
     36e:	6073      	str	r3, [r6, #4]
     370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     374:	428b      	cmp	r3, r1
     376:	d907      	bls.n	388 <CONFIG_BT_RX_BUF_LEN+0x68>
     378:	2e00      	cmp	r6, #0
     37a:	d054      	beq.n	426 <CONFIG_BT_RX_STACK_SIZE+0x26>
     37c:	2100      	movs	r1, #0
     37e:	e886 0021 	stmia.w	r6, {r0, r5}
     382:	4608      	mov	r0, r1
     384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     388:	fab3 f183 	clz	r1, r3
     38c:	2900      	cmp	r1, #0
     38e:	f040 808e 	bne.w	4ae <CONFIG_BT_RX_STACK_SIZE+0xae>
     392:	42ab      	cmp	r3, r5
     394:	d302      	bcc.n	39c <CONFIG_BT_RX_BUF_LEN+0x7c>
     396:	4282      	cmp	r2, r0
     398:	f200 80fa 	bhi.w	590 <CONFIG_BT_RX_STACK_SIZE+0x190>
     39c:	1a84      	subs	r4, r0, r2
     39e:	eb65 0503 	sbc.w	r5, r5, r3
     3a2:	2001      	movs	r0, #1
     3a4:	46ac      	mov	ip, r5
     3a6:	2e00      	cmp	r6, #0
     3a8:	d03f      	beq.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     3aa:	e886 1010 	stmia.w	r6, {r4, ip}
     3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b2:	b912      	cbnz	r2, 3ba <CONFIG_BT_RX_BUF_LEN+0x9a>
     3b4:	2701      	movs	r7, #1
     3b6:	fbb7 f7f2 	udiv	r7, r7, r2
     3ba:	fab7 fe87 	clz	lr, r7
     3be:	f1be 0f00 	cmp.w	lr, #0
     3c2:	d134      	bne.n	42e <CONFIG_BT_RX_STACK_SIZE+0x2e>
     3c4:	1beb      	subs	r3, r5, r7
     3c6:	0c3a      	lsrs	r2, r7, #16
     3c8:	fa1f fc87 	uxth.w	ip, r7
     3cc:	2101      	movs	r1, #1
     3ce:	fbb3 f8f2 	udiv	r8, r3, r2
     3d2:	0c25      	lsrs	r5, r4, #16
     3d4:	fb02 3318 	mls	r3, r2, r8, r3
     3d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3dc:	fb0c f308 	mul.w	r3, ip, r8
     3e0:	42ab      	cmp	r3, r5
     3e2:	d907      	bls.n	3f4 <CONFIG_BT_RX_BUF_LEN+0xd4>
     3e4:	19ed      	adds	r5, r5, r7
     3e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3ea:	d202      	bcs.n	3f2 <CONFIG_BT_RX_BUF_LEN+0xd2>
     3ec:	42ab      	cmp	r3, r5
     3ee:	f200 80d1 	bhi.w	594 <CONFIG_BT_RX_STACK_SIZE+0x194>
     3f2:	4680      	mov	r8, r0
     3f4:	1aed      	subs	r5, r5, r3
     3f6:	b2a3      	uxth	r3, r4
     3f8:	fbb5 f0f2 	udiv	r0, r5, r2
     3fc:	fb02 5510 	mls	r5, r2, r0, r5
     400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     404:	fb0c fc00 	mul.w	ip, ip, r0
     408:	45a4      	cmp	ip, r4
     40a:	d907      	bls.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     40c:	19e4      	adds	r4, r4, r7
     40e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     412:	d202      	bcs.n	41a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     414:	45a4      	cmp	ip, r4
     416:	f200 80b8 	bhi.w	58a <CONFIG_BT_RX_STACK_SIZE+0x18a>
     41a:	4618      	mov	r0, r3
     41c:	eba4 040c 	sub.w	r4, r4, ip
     420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     424:	e79d      	b.n	362 <CONFIG_BT_RX_BUF_LEN+0x42>
     426:	4631      	mov	r1, r6
     428:	4630      	mov	r0, r6
     42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     42e:	f1ce 0420 	rsb	r4, lr, #32
     432:	fa05 f30e 	lsl.w	r3, r5, lr
     436:	fa07 f70e 	lsl.w	r7, r7, lr
     43a:	fa20 f804 	lsr.w	r8, r0, r4
     43e:	0c3a      	lsrs	r2, r7, #16
     440:	fa25 f404 	lsr.w	r4, r5, r4
     444:	ea48 0803 	orr.w	r8, r8, r3
     448:	fbb4 f1f2 	udiv	r1, r4, r2
     44c:	ea4f 4518 	mov.w	r5, r8, lsr #16
     450:	fb02 4411 	mls	r4, r2, r1, r4
     454:	fa1f fc87 	uxth.w	ip, r7
     458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     45c:	fb01 f30c 	mul.w	r3, r1, ip
     460:	42ab      	cmp	r3, r5
     462:	fa00 f40e 	lsl.w	r4, r0, lr
     466:	d909      	bls.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     468:	19ed      	adds	r5, r5, r7
     46a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     46e:	f080 808a 	bcs.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     472:	42ab      	cmp	r3, r5
     474:	f240 8087 	bls.w	586 <CONFIG_BT_RX_STACK_SIZE+0x186>
     478:	3902      	subs	r1, #2
     47a:	443d      	add	r5, r7
     47c:	1aeb      	subs	r3, r5, r3
     47e:	fa1f f588 	uxth.w	r5, r8
     482:	fbb3 f0f2 	udiv	r0, r3, r2
     486:	fb02 3310 	mls	r3, r2, r0, r3
     48a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     48e:	fb00 f30c 	mul.w	r3, r0, ip
     492:	42ab      	cmp	r3, r5
     494:	d907      	bls.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     496:	19ed      	adds	r5, r5, r7
     498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     49c:	d26f      	bcs.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     49e:	42ab      	cmp	r3, r5
     4a0:	d96d      	bls.n	57e <CONFIG_BT_RX_STACK_SIZE+0x17e>
     4a2:	3802      	subs	r0, #2
     4a4:	443d      	add	r5, r7
     4a6:	1aeb      	subs	r3, r5, r3
     4a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     4ac:	e78f      	b.n	3ce <CONFIG_BT_RX_BUF_LEN+0xae>
     4ae:	f1c1 0720 	rsb	r7, r1, #32
     4b2:	fa22 f807 	lsr.w	r8, r2, r7
     4b6:	408b      	lsls	r3, r1
     4b8:	fa05 f401 	lsl.w	r4, r5, r1
     4bc:	ea48 0303 	orr.w	r3, r8, r3
     4c0:	fa20 fe07 	lsr.w	lr, r0, r7
     4c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     4c8:	40fd      	lsrs	r5, r7
     4ca:	ea4e 0e04 	orr.w	lr, lr, r4
     4ce:	fbb5 f9fc 	udiv	r9, r5, ip
     4d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
     4d6:	fb0c 5519 	mls	r5, ip, r9, r5
     4da:	fa1f f883 	uxth.w	r8, r3
     4de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     4e2:	fb09 f408 	mul.w	r4, r9, r8
     4e6:	42ac      	cmp	r4, r5
     4e8:	fa02 f201 	lsl.w	r2, r2, r1
     4ec:	fa00 fa01 	lsl.w	sl, r0, r1
     4f0:	d908      	bls.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     4f2:	18ed      	adds	r5, r5, r3
     4f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     4f8:	d243      	bcs.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fa:	42ac      	cmp	r4, r5
     4fc:	d941      	bls.n	582 <CONFIG_BT_RX_STACK_SIZE+0x182>
     4fe:	f1a9 0902 	sub.w	r9, r9, #2
     502:	441d      	add	r5, r3
     504:	1b2d      	subs	r5, r5, r4
     506:	fa1f fe8e 	uxth.w	lr, lr
     50a:	fbb5 f0fc 	udiv	r0, r5, ip
     50e:	fb0c 5510 	mls	r5, ip, r0, r5
     512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     516:	fb00 f808 	mul.w	r8, r0, r8
     51a:	45a0      	cmp	r8, r4
     51c:	d907      	bls.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     51e:	18e4      	adds	r4, r4, r3
     520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     524:	d229      	bcs.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     526:	45a0      	cmp	r8, r4
     528:	d927      	bls.n	57a <CONFIG_BT_RX_STACK_SIZE+0x17a>
     52a:	3802      	subs	r0, #2
     52c:	441c      	add	r4, r3
     52e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     532:	eba4 0408 	sub.w	r4, r4, r8
     536:	fba0 8902 	umull	r8, r9, r0, r2
     53a:	454c      	cmp	r4, r9
     53c:	46c6      	mov	lr, r8
     53e:	464d      	mov	r5, r9
     540:	d315      	bcc.n	56e <CONFIG_BT_RX_STACK_SIZE+0x16e>
     542:	d012      	beq.n	56a <CONFIG_BT_RX_STACK_SIZE+0x16a>
     544:	b156      	cbz	r6, 55c <CONFIG_BT_RX_STACK_SIZE+0x15c>
     546:	ebba 030e 	subs.w	r3, sl, lr
     54a:	eb64 0405 	sbc.w	r4, r4, r5
     54e:	fa04 f707 	lsl.w	r7, r4, r7
     552:	40cb      	lsrs	r3, r1
     554:	431f      	orrs	r7, r3
     556:	40cc      	lsrs	r4, r1
     558:	6037      	str	r7, [r6, #0]
     55a:	6074      	str	r4, [r6, #4]
     55c:	2100      	movs	r1, #0
     55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     562:	4618      	mov	r0, r3
     564:	e6f8      	b.n	358 <CONFIG_BT_RX_BUF_LEN+0x38>
     566:	4690      	mov	r8, r2
     568:	e6e0      	b.n	32c <CONFIG_BT_RX_BUF_LEN+0xc>
     56a:	45c2      	cmp	sl, r8
     56c:	d2ea      	bcs.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     56e:	ebb8 0e02 	subs.w	lr, r8, r2
     572:	eb69 0503 	sbc.w	r5, r9, r3
     576:	3801      	subs	r0, #1
     578:	e7e4      	b.n	544 <CONFIG_BT_RX_STACK_SIZE+0x144>
     57a:	4628      	mov	r0, r5
     57c:	e7d7      	b.n	52e <CONFIG_BT_RX_STACK_SIZE+0x12e>
     57e:	4640      	mov	r0, r8
     580:	e791      	b.n	4a6 <CONFIG_BT_RX_STACK_SIZE+0xa6>
     582:	4681      	mov	r9, r0
     584:	e7be      	b.n	504 <CONFIG_BT_RX_STACK_SIZE+0x104>
     586:	4601      	mov	r1, r0
     588:	e778      	b.n	47c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     58a:	3802      	subs	r0, #2
     58c:	443c      	add	r4, r7
     58e:	e745      	b.n	41c <CONFIG_BT_RX_STACK_SIZE+0x1c>
     590:	4608      	mov	r0, r1
     592:	e708      	b.n	3a6 <CONFIG_BT_RX_BUF_LEN+0x86>
     594:	f1a8 0802 	sub.w	r8, r8, #2
     598:	443d      	add	r5, r7
     59a:	e72b      	b.n	3f4 <CONFIG_BT_RX_BUF_LEN+0xd4>

0000059c <__aeabi_idiv0>:
     59c:	4770      	bx	lr
     59e:	bf00      	nop

000005a0 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
     5a0:	3901      	subs	r1, #1
	char *dest = d;

	while (*s != '\0') {
     5a2:	4603      	mov	r3, r0
     5a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5a8:	b90a      	cbnz	r2, 5ae <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
     5aa:	701a      	strb	r2, [r3, #0]

	return dest;
}
     5ac:	4770      	bx	lr
		*d = *s;
     5ae:	f803 2b01 	strb.w	r2, [r3], #1
     5b2:	e7f7      	b.n	5a4 <strcpy+0x4>

000005b4 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     5b4:	3801      	subs	r0, #1
     5b6:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     5b8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     5bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     5c0:	4293      	cmp	r3, r2
     5c2:	d102      	bne.n	5ca <strcmp+0x16>
     5c4:	2b00      	cmp	r3, #0
     5c6:	d1f7      	bne.n	5b8 <strcmp+0x4>
     5c8:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     5ca:	1a98      	subs	r0, r3, r2
     5cc:	4770      	bx	lr

000005ce <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     5ce:	b570      	push	{r4, r5, r6, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     5d0:	b182      	cbz	r2, 5f4 <CONFIG_BT_CTLR_COMPANY_ID+0x3>
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     5d2:	3a01      	subs	r2, #1
     5d4:	460c      	mov	r4, r1
     5d6:	4603      	mov	r3, r0
     5d8:	d103      	bne.n	5e2 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x6>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     5da:	781a      	ldrb	r2, [r3, #0]
     5dc:	7820      	ldrb	r0, [r4, #0]
     5de:	1a10      	subs	r0, r2, r0
     5e0:	bd70      	pop	{r4, r5, r6, pc}
	while ((--n > 0) && (*c1 == *c2)) {
     5e2:	781e      	ldrb	r6, [r3, #0]
     5e4:	7825      	ldrb	r5, [r4, #0]
     5e6:	42ae      	cmp	r6, r5
     5e8:	f100 0001 	add.w	r0, r0, #1
     5ec:	f101 0101 	add.w	r1, r1, #1
     5f0:	d0ef      	beq.n	5d2 <memcmp+0x4>
     5f2:	e7f2      	b.n	5da <memcmp+0xc>
		return 0;
     5f4:	4610      	mov	r0, r2
}
     5f6:	bd70      	pop	{r4, r5, r6, pc}

000005f8 <memcpy>:
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     5f8:	ea81 0300 	eor.w	r3, r1, r0
     5fc:	f013 0f03 	tst.w	r3, #3
{
     600:	b570      	push	{r4, r5, r6, lr}
     602:	4603      	mov	r3, r0
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     604:	d00b      	beq.n	61e <memcpy+0x26>
     606:	3b01      	subs	r3, #1
     608:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     60a:	4291      	cmp	r1, r2
     60c:	d11b      	bne.n	646 <memcpy+0x4e>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
     60e:	bd70      	pop	{r4, r5, r6, pc}
			if (n == 0) {
     610:	2a00      	cmp	r2, #0
     612:	d0fc      	beq.n	60e <memcpy+0x16>
			*(d_byte++) = *(s_byte++);
     614:	f811 4b01 	ldrb.w	r4, [r1], #1
     618:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     61c:	3a01      	subs	r2, #1
		while (((unsigned int)d_byte) & 0x3) {
     61e:	079c      	lsls	r4, r3, #30
     620:	d1f6      	bne.n	610 <memcpy+0x18>
     622:	1f1e      	subs	r6, r3, #4
     624:	460d      	mov	r5, r1
     626:	1b54      	subs	r4, r2, r5
     628:	440c      	add	r4, r1
		while (n >= sizeof(unsigned int)) {
     62a:	2c03      	cmp	r4, #3
     62c:	d806      	bhi.n	63c <memcpy+0x44>
     62e:	f022 0403 	bic.w	r4, r2, #3
     632:	4421      	add	r1, r4
     634:	4423      	add	r3, r4
     636:	f002 0203 	and.w	r2, r2, #3
     63a:	e7e4      	b.n	606 <memcpy+0xe>
			*(d_word++) = *(s_word++);
     63c:	f855 4b04 	ldr.w	r4, [r5], #4
     640:	f846 4f04 	str.w	r4, [r6, #4]!
     644:	e7ef      	b.n	626 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
     646:	f811 4b01 	ldrb.w	r4, [r1], #1
     64a:	f803 4f01 	strb.w	r4, [r3, #1]!
     64e:	e7dc      	b.n	60a <memcpy+0x12>

00000650 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     650:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     652:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
     654:	4603      	mov	r3, r0

	while (((unsigned int)d_byte) & 0x3) {
     656:	079c      	lsls	r4, r3, #30
     658:	d111      	bne.n	67e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     65a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     65e:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     662:	461e      	mov	r6, r3
     664:	1b95      	subs	r5, r2, r6
     666:	441d      	add	r5, r3
     668:	2d03      	cmp	r5, #3
     66a:	d80e      	bhi.n	68a <memset+0x3a>
     66c:	f022 0403 	bic.w	r4, r2, #3
     670:	4423      	add	r3, r4
     672:	f002 0203 	and.w	r2, r2, #3
     676:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     678:	4293      	cmp	r3, r2
     67a:	d109      	bne.n	690 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
     67c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
     67e:	2a00      	cmp	r2, #0
     680:	d0fc      	beq.n	67c <memset+0x2c>
		*(d_byte++) = c_byte;
     682:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     686:	3a01      	subs	r2, #1
     688:	e7e5      	b.n	656 <memset+0x6>
		*(d_word++) = c_word;
     68a:	f846 4b04 	str.w	r4, [r6], #4
     68e:	e7e9      	b.n	664 <memset+0x14>
		*(d_byte++) = c_byte;
     690:	f803 1b01 	strb.w	r1, [r3], #1
     694:	e7f0      	b.n	678 <memset+0x28>
	...

00000698 <scan_cb>:


int received_count = 0;
static void scan_cb(const bt_addr_le_t *addr, s8_t rssi, u8_t adv_type,
		    struct net_buf_simple *buf, struct net_buf *buffer)
{	
     698:	b570      	push	{r4, r5, r6, lr}
	int n = 0;
	u8_t data[11];
	
	char addr_str[BT_ADDR_LE_STR_LEN];

	if(adv_type == 0x07 ){										//only for extended advertising packets....
     69a:	2a07      	cmp	r2, #7
{	
     69c:	b090      	sub	sp, #64	; 0x40
     69e:	4605      	mov	r5, r0
     6a0:	461e      	mov	r6, r3
	if(adv_type == 0x07 ){										//only for extended advertising packets....
     6a2:	d12a      	bne.n	6fa <scan_cb+0x62>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
     6a4:	7803      	ldrb	r3, [r0, #0]
     6a6:	ac06      	add	r4, sp, #24
     6a8:	2b03      	cmp	r3, #3
     6aa:	d82e      	bhi.n	70a <scan_cb+0x72>
     6ac:	e8df f003 	tbb	[pc, r3]
     6b0:	2b292702 	.word	0x2b292702
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
     6b4:	4926      	ldr	r1, [pc, #152]	; (750 <scan_cb+0xb8>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
     6b6:	4620      	mov	r0, r4
     6b8:	f7ff ff72 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
     6bc:	79ab      	ldrb	r3, [r5, #6]
     6be:	9405      	str	r4, [sp, #20]
     6c0:	786a      	ldrb	r2, [r5, #1]
     6c2:	9204      	str	r2, [sp, #16]
     6c4:	78aa      	ldrb	r2, [r5, #2]
     6c6:	9203      	str	r2, [sp, #12]
     6c8:	78ea      	ldrb	r2, [r5, #3]
     6ca:	9202      	str	r2, [sp, #8]
     6cc:	792a      	ldrb	r2, [r5, #4]
     6ce:	9201      	str	r2, [sp, #4]
     6d0:	796a      	ldrb	r2, [r5, #5]
     6d2:	9200      	str	r2, [sp, #0]
     6d4:	211b      	movs	r1, #27
     6d6:	4a1f      	ldr	r2, [pc, #124]	; (754 <scan_cb+0xbc>)
     6d8:	a809      	add	r0, sp, #36	; 0x24
     6da:	f000 fe6f 	bl	13bc <snprintk>
	//	printk(" \n scan report adv_type : %d \n", adv_type);
		bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
	//	printk("Device found: %s (RSSI %d)\n", addr_str, rssi);
		printk("len : %d \n", buf->len);
     6de:	88b1      	ldrh	r1, [r6, #4]
     6e0:	481d      	ldr	r0, [pc, #116]	; (758 <scan_cb+0xc0>)
     6e2:	f000 fe5d 	bl	13a0 <printk>

		if(buf->len > 0){
     6e6:	88b3      	ldrh	r3, [r6, #4]
     6e8:	b9ab      	cbnz	r3, 716 <scan_cb+0x7e>
			}		

		}
	
//	printk("\n");
	printk("\n");
     6ea:	481c      	ldr	r0, [pc, #112]	; (75c <scan_cb+0xc4>)
     6ec:	f000 fe58 	bl	13a0 <printk>
	printk("count: %d \n", received_count);
     6f0:	4b1b      	ldr	r3, [pc, #108]	; (760 <scan_cb+0xc8>)
     6f2:	481c      	ldr	r0, [pc, #112]	; (764 <scan_cb+0xcc>)
     6f4:	6819      	ldr	r1, [r3, #0]
     6f6:	f000 fe53 	bl	13a0 <printk>
	}
}
     6fa:	b010      	add	sp, #64	; 0x40
     6fc:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
     6fe:	491a      	ldr	r1, [pc, #104]	; (768 <scan_cb+0xd0>)
     700:	e7d9      	b.n	6b6 <scan_cb+0x1e>
		strcpy(type, "public id");
     702:	491a      	ldr	r1, [pc, #104]	; (76c <scan_cb+0xd4>)
     704:	e7d7      	b.n	6b6 <scan_cb+0x1e>
		strcpy(type, "random id");
     706:	491a      	ldr	r1, [pc, #104]	; (770 <scan_cb+0xd8>)
     708:	e7d5      	b.n	6b6 <scan_cb+0x1e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
     70a:	4a1a      	ldr	r2, [pc, #104]	; (774 <scan_cb+0xdc>)
     70c:	210a      	movs	r1, #10
     70e:	4620      	mov	r0, r4
     710:	f000 fe54 	bl	13bc <snprintk>
     714:	e7d2      	b.n	6bc <scan_cb+0x24>
			if(buf->len > 60){
     716:	2b3c      	cmp	r3, #60	; 0x3c
				received_count++;
     718:	bf81      	itttt	hi
     71a:	4a11      	ldrhi	r2, [pc, #68]	; (760 <scan_cb+0xc8>)
     71c:	6813      	ldrhi	r3, [r2, #0]
     71e:	3301      	addhi	r3, #1
     720:	6013      	strhi	r3, [r2, #0]
{	
     722:	2300      	movs	r3, #0
				data[i] = *(buf->data ++);
     724:	6832      	ldr	r2, [r6, #0]
     726:	1c51      	adds	r1, r2, #1
     728:	6031      	str	r1, [r6, #0]
     72a:	7812      	ldrb	r2, [r2, #0]
     72c:	54e2      	strb	r2, [r4, r3]
			for( int i=0 ; i<= 10; i++){
     72e:	3301      	adds	r3, #1
     730:	2b0b      	cmp	r3, #11
     732:	d1f7      	bne.n	724 <scan_cb+0x8c>
			printk("Here is the message: \n");
     734:	4810      	ldr	r0, [pc, #64]	; (778 <scan_cb+0xe0>)
				printk("0x%02X ", data[i]);		
     736:	4e11      	ldr	r6, [pc, #68]	; (77c <scan_cb+0xe4>)
			printk("Here is the message: \n");
     738:	f000 fe32 	bl	13a0 <printk>
			for (int i = 0; i < n; i++)
     73c:	2500      	movs	r5, #0
				printk("0x%02X ", data[i]);		
     73e:	5d61      	ldrb	r1, [r4, r5]
     740:	4630      	mov	r0, r6
			for (int i = 0; i < n; i++)
     742:	3501      	adds	r5, #1
				printk("0x%02X ", data[i]);		
     744:	f000 fe2c 	bl	13a0 <printk>
			for (int i = 0; i < n; i++)
     748:	2d0a      	cmp	r5, #10
     74a:	d1f8      	bne.n	73e <scan_cb+0xa6>
     74c:	e7cd      	b.n	6ea <scan_cb+0x52>
     74e:	bf00      	nop
     750:	0000b274 	.word	0x0000b274
     754:	0000b29d 	.word	0x0000b29d
     758:	0000b2c0 	.word	0x0000b2c0
     75c:	0000b2ec 	.word	0x0000b2ec
     760:	20000000 	.word	0x20000000
     764:	0000b2cb 	.word	0x0000b2cb
     768:	0000b27b 	.word	0x0000b27b
     76c:	0000b282 	.word	0x0000b282
     770:	0000b28c 	.word	0x0000b28c
     774:	0000b296 	.word	0x0000b296
     778:	0000b2d7 	.word	0x0000b2d7
     77c:	0000b2ee 	.word	0x0000b2ee

00000780 <main>:


void main(void)
{
     780:	b507      	push	{r0, r1, r2, lr}
	struct bt_le_scan_param scan_param = {
     782:	4b12      	ldr	r3, [pc, #72]	; (7cc <main+0x4c>)
     784:	6818      	ldr	r0, [r3, #0]
     786:	9000      	str	r0, [sp, #0]
     788:	889b      	ldrh	r3, [r3, #4]
		.interval   = 0x0030,
		.window     = 0x0030,
	};
	int err;

	printk("Starting Scanner Demo\n");
     78a:	4811      	ldr	r0, [pc, #68]	; (7d0 <main+0x50>)
	struct bt_le_scan_param scan_param = {
     78c:	f8ad 3004 	strh.w	r3, [sp, #4]
	printk("Starting Scanner Demo\n");
     790:	f000 fe06 	bl	13a0 <printk>

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
     794:	2000      	movs	r0, #0
     796:	f002 f8ff 	bl	2998 <bt_enable>
	if (err) {
     79a:	4601      	mov	r1, r0
     79c:	b110      	cbz	r0, 7a4 <main+0x24>
		printk("Bluetooth init failed (err %d)\n", err);
     79e:	480d      	ldr	r0, [pc, #52]	; (7d4 <main+0x54>)
     7a0:	f000 fdfe 	bl	13a0 <printk>
	//	return;
	}

	printk("Bluetooth initialized\n");
     7a4:	480c      	ldr	r0, [pc, #48]	; (7d8 <main+0x58>)
     7a6:	f000 fdfb 	bl	13a0 <printk>

	err = bt_le_scan_start(&scan_param, scan_cb);
     7aa:	490c      	ldr	r1, [pc, #48]	; (7dc <main+0x5c>)
     7ac:	4668      	mov	r0, sp
     7ae:	f002 f949 	bl	2a44 <bt_le_scan_start>
	if (err) {
     7b2:	4601      	mov	r1, r0
     7b4:	b128      	cbz	r0, 7c2 <main+0x42>
		printk("Starting scanning failed (err %d)\n", err);
     7b6:	480a      	ldr	r0, [pc, #40]	; (7e0 <main+0x60>)
     7b8:	f000 fdf2 	bl	13a0 <printk>
		return;
	}
	printk("scanning started\n");
}
     7bc:	b003      	add	sp, #12
     7be:	f85d fb04 	ldr.w	pc, [sp], #4
	printk("scanning started\n");
     7c2:	4808      	ldr	r0, [pc, #32]	; (7e4 <main+0x64>)
     7c4:	f000 fdec 	bl	13a0 <printk>
     7c8:	e7f8      	b.n	7bc <main+0x3c>
     7ca:	bf00      	nop
     7cc:	0000b1c4 	.word	0x0000b1c4
     7d0:	0000b1f1 	.word	0x0000b1f1
     7d4:	0000b208 	.word	0x0000b208
     7d8:	0000b228 	.word	0x0000b228
     7dc:	00000699 	.word	0x00000699
     7e0:	0000b23f 	.word	0x0000b23f
     7e4:	0000b262 	.word	0x0000b262

000007e8 <errata_103>:
	return false;
}

static bool errata_136_nrf52840(void)
{
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     7e8:	4b05      	ldr	r3, [pc, #20]	; (800 <CONFIG_ISR_STACK_SIZE>)
     7ea:	681b      	ldr	r3, [r3, #0]
     7ec:	2b08      	cmp	r3, #8
	    (*(u32_t *)0x10000134ul == 0x0ul)) {
     7ee:	bf01      	itttt	eq
     7f0:	4b04      	ldreq	r3, [pc, #16]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
	if ((*(u32_t *)0x10000130ul == 0x8ul) &&
     7f2:	6818      	ldreq	r0, [r3, #0]
     7f4:	fab0 f080 	clzeq	r0, r0
     7f8:	0940      	lsreq	r0, r0, #5
		return true;
	}

	return false;
     7fa:	bf18      	it	ne
     7fc:	2000      	movne	r0, #0
}
     7fe:	4770      	bx	lr
     800:	10000130 	.word	0x10000130
     804:	10000134 	.word	0x10000134

00000808 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
     808:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     80a:	f04f 0320 	mov.w	r3, #32
     80e:	f3ef 8111 	mrs	r1, BASEPRI
     812:	f383 8811 	msr	BASEPRI, r3
	if (errata_36()) {
     816:	f7ff ffe7 	bl	7e8 <errata_103>
     81a:	b140      	cbz	r0, 82e <nordicsemi_nrf52_init+0x26>
		NRF_CLOCK->EVENTS_DONE = 0;
     81c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     820:	2200      	movs	r2, #0
     822:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
     826:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		NRF_CLOCK->CTIV = 0;
     82a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	if (errata_98()) {
     82e:	f7ff ffdb 	bl	7e8 <errata_103>
     832:	b110      	cbz	r0, 83a <nordicsemi_nrf52_init+0x32>
		*(volatile u32_t *)0x4000568Cul = 0x00038148ul;
     834:	4b38      	ldr	r3, [pc, #224]	; (918 <nordicsemi_nrf52_init+0x110>)
     836:	4a39      	ldr	r2, [pc, #228]	; (91c <nordicsemi_nrf52_init+0x114>)
     838:	601a      	str	r2, [r3, #0]
	if (errata_103()) {
     83a:	f7ff ffd5 	bl	7e8 <errata_103>
     83e:	b118      	cbz	r0, 848 <nordicsemi_nrf52_init+0x40>
		NRF_CCM->MAXPACKETSIZE = 0xFBul;
     840:	4b37      	ldr	r3, [pc, #220]	; (920 <nordicsemi_nrf52_init+0x118>)
     842:	22fb      	movs	r2, #251	; 0xfb
     844:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	if (errata_115()) {
     848:	f7ff ffce 	bl	7e8 <errata_103>
     84c:	b148      	cbz	r0, 862 <nordicsemi_nrf52_init+0x5a>
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     84e:	4835      	ldr	r0, [pc, #212]	; (924 <nordicsemi_nrf52_init+0x11c>)
			(*(u32_t *)0x10000258 & 0x0000000F);
     850:	4b35      	ldr	r3, [pc, #212]	; (928 <nordicsemi_nrf52_init+0x120>)
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     852:	6802      	ldr	r2, [r0, #0]
			(*(u32_t *)0x10000258 & 0x0000000F);
     854:	681b      	ldr	r3, [r3, #0]
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     856:	f022 020f 	bic.w	r2, r2, #15
			(*(u32_t *)0x10000258 & 0x0000000F);
     85a:	f003 030f 	and.w	r3, r3, #15
			(*(volatile u32_t *) 0x40000EE4 & 0xFFFFFFF0) |
     85e:	4313      	orrs	r3, r2
		*(volatile u32_t *)0x40000EE4 =
     860:	6003      	str	r3, [r0, #0]
	if (errata_120()) {
     862:	f7ff ffc1 	bl	7e8 <errata_103>
     866:	b118      	cbz	r0, 870 <nordicsemi_nrf52_init+0x68>
		*(volatile u32_t *)0x40029640ul = 0x200ul;
     868:	4b30      	ldr	r3, [pc, #192]	; (92c <nordicsemi_nrf52_init+0x124>)
     86a:	f44f 7200 	mov.w	r2, #512	; 0x200
     86e:	601a      	str	r2, [r3, #0]
	if (errata_136_nrf52840()) {
     870:	f7ff ffba 	bl	7e8 <errata_103>
     874:	b148      	cbz	r0, 88a <nordicsemi_nrf52_init+0x82>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
     876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     87a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     87e:	07d2      	lsls	r2, r2, #31
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
     880:	bf44      	itt	mi
     882:	f06f 0201 	mvnmi.w	r2, #1
     886:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
     88a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     88e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
     892:	2a00      	cmp	r2, #0
     894:	db03      	blt.n	89e <nordicsemi_nrf52_init+0x96>
	    ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) !=
     896:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
     89a:	2b00      	cmp	r3, #0
     89c:	da2f      	bge.n	8fe <nordicsemi_nrf52_init+0xf6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     89e:	4b24      	ldr	r3, [pc, #144]	; (930 <nordicsemi_nrf52_init+0x128>)
     8a0:	2201      	movs	r2, #1
     8a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8a6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     8aa:	2a00      	cmp	r2, #0
     8ac:	d0fb      	beq.n	8a6 <nordicsemi_nrf52_init+0x9e>
		NRF_UICR->PSELRESET[0] = 18;
     8ae:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     8b2:	2112      	movs	r1, #18
     8b4:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     8bc:	2a00      	cmp	r2, #0
     8be:	d0fb      	beq.n	8b8 <nordicsemi_nrf52_init+0xb0>
		NRF_UICR->PSELRESET[1] = 18;
     8c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     8c4:	2212      	movs	r2, #18
     8c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8ca:	4b19      	ldr	r3, [pc, #100]	; (930 <nordicsemi_nrf52_init+0x128>)
     8cc:	461a      	mov	r2, r3
     8ce:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     8d2:	2900      	cmp	r1, #0
     8d4:	d0fb      	beq.n	8ce <nordicsemi_nrf52_init+0xc6>
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     8d6:	2100      	movs	r1, #0
     8d8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
     8dc:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     8e0:	2b00      	cmp	r3, #0
     8e2:	d0fb      	beq.n	8dc <nordicsemi_nrf52_init+0xd4>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     8e4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     8e8:	4912      	ldr	r1, [pc, #72]	; (934 <nordicsemi_nrf52_init+0x12c>)
     8ea:	4b13      	ldr	r3, [pc, #76]	; (938 <nordicsemi_nrf52_init+0x130>)
     8ec:	68ca      	ldr	r2, [r1, #12]
     8ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
     8f2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     8f4:	60cb      	str	r3, [r1, #12]
     8f6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     8fa:	bf00      	nop
     8fc:	e7fd      	b.n	8fa <nordicsemi_nrf52_init+0xf2>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
     8fe:	4b0d      	ldr	r3, [pc, #52]	; (934 <nordicsemi_nrf52_init+0x12c>)
     900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     904:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
     906:	62da      	str	r2, [r3, #44]	; 0x2c
	SystemCoreClock = __SYSTEM_CLOCK_64M;
     908:	4b0c      	ldr	r3, [pc, #48]	; (93c <nordicsemi_nrf52_init+0x134>)
     90a:	4a0d      	ldr	r2, [pc, #52]	; (940 <nordicsemi_nrf52_init+0x138>)
     90c:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     90e:	f381 8811 	msr	BASEPRI, r1
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     912:	2000      	movs	r0, #0
     914:	bd08      	pop	{r3, pc}
     916:	bf00      	nop
     918:	4000568c 	.word	0x4000568c
     91c:	00038148 	.word	0x00038148
     920:	4000f000 	.word	0x4000f000
     924:	40000ee4 	.word	0x40000ee4
     928:	10000258 	.word	0x10000258
     92c:	40029640 	.word	0x40029640
     930:	4001e000 	.word	0x4001e000
     934:	e000ed00 	.word	0xe000ed00
     938:	05fa0004 	.word	0x05fa0004
     93c:	20005fd4 	.word	0x20005fd4
     940:	03d09000 	.word	0x03d09000

00000944 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
     944:	4808      	ldr	r0, [pc, #32]	; (968 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
     946:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
     948:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
     94a:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
     94c:	d80b      	bhi.n	966 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
     94e:	69c0      	ldr	r0, [r0, #28]
    cmp r0, r1
     950:	4288      	cmp	r0, r1
    beq _EXIT_EXC
     952:	d008      	beq.n	966 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
     954:	b500      	push	{lr}
    bl _update_time_slice_before_swap
     956:	f009 fe7d 	bl	a654 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
     95a:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
     95e:	4903      	ldr	r1, [pc, #12]	; (96c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
     960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
     964:	600a      	str	r2, [r1, #0]

00000966 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
     966:	4770      	bx	lr
    ldr r0, =_kernel
     968:	20002084 	.word	0x20002084
    ldr r1, =_SCS_ICSR
     96c:	e000ed04 	.word	0xe000ed04

00000970 <_IntLibInit>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     970:	4804      	ldr	r0, [pc, #16]	; (984 <_IntLibInit+0x14>)
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
     972:	2300      	movs	r3, #0
     974:	2120      	movs	r1, #32
     976:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
     978:	3301      	adds	r3, #1
     97a:	2b2e      	cmp	r3, #46	; 0x2e
     97c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
     980:	d1f9      	bne.n	976 <_IntLibInit+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
     982:	4770      	bx	lr
     984:	e000e100 	.word	0xe000e100

00000988 <__swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
     988:	4a08      	ldr	r2, [pc, #32]	; (9ac <__swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
     98a:	4909      	ldr	r1, [pc, #36]	; (9b0 <__swap+0x28>)
	_current->arch.basepri = key;
     98c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
     98e:	6809      	ldr	r1, [r1, #0]
     990:	6659      	str	r1, [r3, #100]	; 0x64

	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     992:	4908      	ldr	r1, [pc, #32]	; (9b4 <__swap+0x2c>)
	_current->arch.basepri = key;
     994:	6618      	str	r0, [r3, #96]	; 0x60
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     996:	684b      	ldr	r3, [r1, #4]
     998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     99c:	604b      	str	r3, [r1, #4]
     99e:	2300      	movs	r3, #0
     9a0:	f383 8811 	msr	BASEPRI, r3

	/* clear mask or enable all irqs to take a pendsv */
	irq_unlock(0);

	return _current->arch.swap_return_value;
     9a4:	6893      	ldr	r3, [r2, #8]
}
     9a6:	6e58      	ldr	r0, [r3, #100]	; 0x64
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	20002084 	.word	0x20002084
     9b0:	0000b8bc 	.word	0x0000b8bc
     9b4:	e000ed00 	.word	0xe000ed00

000009b8 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     9b8:	490e      	ldr	r1, [pc, #56]	; (9f4 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
     9ba:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     9bc:	2028      	movs	r0, #40	; 0x28
    add r0, r2
     9be:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
     9c0:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     9c4:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
     9c8:	4f0b      	ldr	r7, [pc, #44]	; (9f8 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     9ca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     9ce:	2020      	movs	r0, #32
    msr BASEPRI, r0
     9d0:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
     9d4:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     9d6:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
     9d8:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
     9da:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
     9dc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     9de:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     9e0:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_user_context
    pop {r2, lr}
#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     9e4:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
     9e8:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    msr PSP, ip
     9ec:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
     9f0:	4770      	bx	lr
     9f2:	0000      	.short	0x0000
    ldr r1, =_kernel
     9f4:	20002084 	.word	0x20002084
    ldr v4, =_SCS_ICSR
     9f8:	e000ed04 	.word	0xe000ed04

000009fc <__svc>:
 *
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)
    tst lr, #0x4    /* did we come from thread mode ? */
     9fc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     a00:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     a02:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     a06:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     a0a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
     a0c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 2: kernel panic or oops (software generated fatal exception)
    * 3: System call
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
     a10:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    tst r2, #0x1
    bne _oops

    cmp r1, #0
#endif
    beq _context_switch
     a14:	d001      	beq.n	a1a <_context_switch>

    cmp r1, #2
     a16:	2902      	cmp	r1, #2
    beq _oops
     a18:	d007      	beq.n	a2a <_oops>

00000a1a <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
     a1a:	4040      	eors	r0, r0
    msr BASEPRI, r0
     a1c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
     a20:	4904      	ldr	r1, [pc, #16]	; (a34 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
     a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
     a26:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
     a28:	4770      	bx	lr

00000a2a <_oops>:

_oops:
    push {lr}
     a2a:	b500      	push	{lr}
    blx _do_kernel_oops
     a2c:	f000 fa2c 	bl	e88 <_do_kernel_oops>
    pop {pc}
     a30:	bd00      	pop	{pc}
     a32:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
     a34:	e000ed04 	.word	0xe000ed04

00000a38 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
     a38:	b510      	push	{r4, lr}
     a3a:	4604      	mov	r4, r0

K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_WAKEUP, k_wakeup, k_tid_t, thread);

K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
     a3c:	f009 fde0 	bl	a600 <_impl_k_current_get>
{
	PR_EXC("  Executing thread ID (thread): %p\n"
     a40:	6822      	ldr	r2, [r4, #0]
     a42:	4601      	mov	r1, r0
	       "  Faulting instruction address:  0x%x\n",
	       k_current_get(), esf->pc);
}
     a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PR_EXC("  Executing thread ID (thread): %p\n"
     a48:	4801      	ldr	r0, [pc, #4]	; (a50 <_FaultThreadShow.isra.2+0x18>)
     a4a:	f000 bca9 	b.w	13a0 <printk>
     a4e:	bf00      	nop
     a50:	0000b45b 	.word	0x0000b45b

00000a54 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
     a54:	b510      	push	{r4, lr}
     a56:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
     a58:	481a      	ldr	r0, [pc, #104]	; (ac4 <_UsageFault+0x70>)
     a5a:	f000 fca1 	bl	13a0 <printk>

	_FaultThreadShow(esf);
     a5e:	f104 0018 	add.w	r0, r4, #24

	/* bits are sticky: they stack and must be reset */
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     a62:	4c19      	ldr	r4, [pc, #100]	; (ac8 <_UsageFault+0x74>)
	_FaultThreadShow(esf);
     a64:	f7ff ffe8 	bl	a38 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) {
     a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a6a:	019a      	lsls	r2, r3, #6
     a6c:	d502      	bpl.n	a74 <_UsageFault+0x20>
		PR_EXC("  Division by zero\n");
     a6e:	4817      	ldr	r0, [pc, #92]	; (acc <_UsageFault+0x78>)
     a70:	f000 fc96 	bl	13a0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) {
     a74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a76:	01db      	lsls	r3, r3, #7
     a78:	d502      	bpl.n	a80 <_UsageFault+0x2c>
		PR_EXC("  Unaligned memory access\n");
     a7a:	4815      	ldr	r0, [pc, #84]	; (ad0 <_UsageFault+0x7c>)
     a7c:	f000 fc90 	bl	13a0 <printk>
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if (SCB->CFSR & SCB_CFSR_STKOF_Msk) {
		PR_EXC("  Stack overflow\n");
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if (SCB->CFSR & SCB_CFSR_NOCP_Msk) {
     a80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a82:	0318      	lsls	r0, r3, #12
     a84:	d502      	bpl.n	a8c <_UsageFault+0x38>
		PR_EXC("  No coprocessor instructions\n");
     a86:	4813      	ldr	r0, [pc, #76]	; (ad4 <_UsageFault+0x80>)
     a88:	f000 fc8a 	bl	13a0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVPC_Msk) {
     a8c:	4c0e      	ldr	r4, [pc, #56]	; (ac8 <_UsageFault+0x74>)
     a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a90:	0359      	lsls	r1, r3, #13
     a92:	d502      	bpl.n	a9a <_UsageFault+0x46>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
     a94:	4810      	ldr	r0, [pc, #64]	; (ad8 <_UsageFault+0x84>)
     a96:	f000 fc83 	bl	13a0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_INVSTATE_Msk) {
     a9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     a9c:	039a      	lsls	r2, r3, #14
     a9e:	d502      	bpl.n	aa6 <_UsageFault+0x52>
		PR_EXC("  Illegal use of the EPSR\n");
     aa0:	480e      	ldr	r0, [pc, #56]	; (adc <_UsageFault+0x88>)
     aa2:	f000 fc7d 	bl	13a0 <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
     aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     aa8:	03db      	lsls	r3, r3, #15
     aaa:	d502      	bpl.n	ab2 <_UsageFault+0x5e>
		PR_EXC("  Attempt to execute undefined instruction\n");
     aac:	480c      	ldr	r0, [pc, #48]	; (ae0 <_UsageFault+0x8c>)
     aae:	f000 fc77 	bl	13a0 <printk>
	}

	/* clear USFR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
     ab2:	4a05      	ldr	r2, [pc, #20]	; (ac8 <_UsageFault+0x74>)
     ab4:	6a93      	ldr	r3, [r2, #40]	; 0x28
     ab6:	ea6f 4303 	mvn.w	r3, r3, lsl #16
     aba:	ea6f 4313 	mvn.w	r3, r3, lsr #16
     abe:	6293      	str	r3, [r2, #40]	; 0x28
     ac0:	bd10      	pop	{r4, pc}
     ac2:	bf00      	nop
     ac4:	0000b55c 	.word	0x0000b55c
     ac8:	e000ed00 	.word	0xe000ed00
     acc:	0000b575 	.word	0x0000b575
     ad0:	0000b589 	.word	0x0000b589
     ad4:	0000b5a4 	.word	0x0000b5a4
     ad8:	0000b5c3 	.word	0x0000b5c3
     adc:	0000b5e9 	.word	0x0000b5e9
     ae0:	0000b604 	.word	0x0000b604

00000ae4 <_MpuFault>:
{
     ae4:	b538      	push	{r3, r4, r5, lr}
     ae6:	4604      	mov	r4, r0
	PR_EXC("***** MPU FAULT *****\n");
     ae8:	4819      	ldr	r0, [pc, #100]	; (b50 <_MpuFault+0x6c>)
{
     aea:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
     aec:	f000 fc58 	bl	13a0 <printk>
	_FaultThreadShow(esf);
     af0:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     af4:	4c17      	ldr	r4, [pc, #92]	; (b54 <_MpuFault+0x70>)
	_FaultThreadShow(esf);
     af6:	f7ff ff9f 	bl	a38 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
     afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     afc:	06d9      	lsls	r1, r3, #27
     afe:	d504      	bpl.n	b0a <_MpuFault+0x26>
		PR_EXC("  Stacking error\n");
     b00:	4815      	ldr	r0, [pc, #84]	; (b58 <_MpuFault+0x74>)
}
     b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     b06:	f000 bc4b 	b.w	13a0 <printk>
	} else if (SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) {
     b0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b0c:	071a      	lsls	r2, r3, #28
     b0e:	d501      	bpl.n	b14 <_MpuFault+0x30>
		PR_EXC("  Unstacking error\n");
     b10:	4812      	ldr	r0, [pc, #72]	; (b5c <_MpuFault+0x78>)
     b12:	e7f6      	b.n	b02 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) {
     b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b16:	079b      	lsls	r3, r3, #30
     b18:	d50f      	bpl.n	b3a <_MpuFault+0x56>
		PR_EXC("  Data Access Violation\n");
     b1a:	4811      	ldr	r0, [pc, #68]	; (b60 <_MpuFault+0x7c>)
     b1c:	f000 fc40 	bl	13a0 <printk>
		STORE_xFAR(mmfar, SCB->MMFAR);
     b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
		if (SCB->CFSR & SCB_CFSR_MMARVALID_Msk) {
     b22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b24:	0618      	lsls	r0, r3, #24
     b26:	d512      	bpl.n	b4e <_MpuFault+0x6a>
			PR_EXC("  Address: 0x%x\n", mmfar);
     b28:	480e      	ldr	r0, [pc, #56]	; (b64 <_MpuFault+0x80>)
     b2a:	f000 fc39 	bl	13a0 <printk>
			if (fromHardFault) {
     b2e:	b175      	cbz	r5, b4e <_MpuFault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
     b30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
     b36:	62a3      	str	r3, [r4, #40]	; 0x28
     b38:	bd38      	pop	{r3, r4, r5, pc}
	} else if (SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) {
     b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b3c:	07da      	lsls	r2, r3, #31
     b3e:	d501      	bpl.n	b44 <_MpuFault+0x60>
		PR_EXC("  Instruction Access Violation\n");
     b40:	4809      	ldr	r0, [pc, #36]	; (b68 <_MpuFault+0x84>)
     b42:	e7de      	b.n	b02 <_MpuFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_MLSPERR_Msk) {
     b44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b46:	069b      	lsls	r3, r3, #26
     b48:	d501      	bpl.n	b4e <_MpuFault+0x6a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     b4a:	4808      	ldr	r0, [pc, #32]	; (b6c <_MpuFault+0x88>)
     b4c:	e7d9      	b.n	b02 <_MpuFault+0x1e>
     b4e:	bd38      	pop	{r3, r4, r5, pc}
     b50:	0000b4a5 	.word	0x0000b4a5
     b54:	e000ed00 	.word	0xe000ed00
     b58:	0000b4bc 	.word	0x0000b4bc
     b5c:	0000b4ce 	.word	0x0000b4ce
     b60:	0000b4e2 	.word	0x0000b4e2
     b64:	0000b4fb 	.word	0x0000b4fb
     b68:	0000b50c 	.word	0x0000b50c
     b6c:	0000b52c 	.word	0x0000b52c

00000b70 <_BusFault>:
{
     b70:	b538      	push	{r3, r4, r5, lr}
     b72:	4604      	mov	r4, r0
	PR_EXC("***** BUS FAULT *****\n");
     b74:	481d      	ldr	r0, [pc, #116]	; (bec <_BusFault+0x7c>)
{
     b76:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
     b78:	f000 fc12 	bl	13a0 <printk>
	_FaultThreadShow(esf);
     b7c:	f104 0018 	add.w	r0, r4, #24
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     b80:	4c1b      	ldr	r4, [pc, #108]	; (bf0 <_BusFault+0x80>)
	_FaultThreadShow(esf);
     b82:	f7ff ff59 	bl	a38 <_FaultThreadShow.isra.2>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
     b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b88:	04d8      	lsls	r0, r3, #19
     b8a:	d504      	bpl.n	b96 <_BusFault+0x26>
		PR_EXC("  Stacking error\n");
     b8c:	4819      	ldr	r0, [pc, #100]	; (bf4 <_BusFault+0x84>)
}
     b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PR_EXC("  Floating-point lazy state preservation error\n");
     b92:	f000 bc05 	b.w	13a0 <printk>
	} else if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
     b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     b98:	0519      	lsls	r1, r3, #20
     b9a:	d501      	bpl.n	ba0 <_BusFault+0x30>
		PR_EXC("  Unstacking error\n");
     b9c:	4816      	ldr	r0, [pc, #88]	; (bf8 <_BusFault+0x88>)
     b9e:	e7f6      	b.n	b8e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
     ba0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     ba2:	059a      	lsls	r2, r3, #22
     ba4:	d514      	bpl.n	bd0 <_BusFault+0x60>
		PR_EXC("  Precise data bus error\n");
     ba6:	4815      	ldr	r0, [pc, #84]	; (bfc <_BusFault+0x8c>)
     ba8:	f000 fbfa 	bl	13a0 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
     bac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		if (SCB->CFSR & SCB_CFSR_BFARVALID_Msk) {
     bae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bb0:	041b      	lsls	r3, r3, #16
     bb2:	d507      	bpl.n	bc4 <_BusFault+0x54>
			PR_EXC("  Address: 0x%x\n", bfar);
     bb4:	4812      	ldr	r0, [pc, #72]	; (c00 <_BusFault+0x90>)
     bb6:	f000 fbf3 	bl	13a0 <printk>
			if (fromHardFault) {
     bba:	b11d      	cbz	r5, bc4 <_BusFault+0x54>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
     bbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
     bc2:	62a3      	str	r3, [r4, #40]	; 0x28
		if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     bc4:	4b0a      	ldr	r3, [pc, #40]	; (bf0 <_BusFault+0x80>)
     bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bc8:	0558      	lsls	r0, r3, #21
     bca:	d50e      	bpl.n	bea <_BusFault+0x7a>
			PR_EXC("  Imprecise data bus error\n");
     bcc:	480d      	ldr	r0, [pc, #52]	; (c04 <_BusFault+0x94>)
     bce:	e7de      	b.n	b8e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
     bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bd2:	0559      	lsls	r1, r3, #21
     bd4:	d4fa      	bmi.n	bcc <_BusFault+0x5c>
	} else if (SCB->CFSR & SCB_CFSR_IBUSERR_Msk) {
     bd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bd8:	05da      	lsls	r2, r3, #23
     bda:	d501      	bpl.n	be0 <_BusFault+0x70>
		PR_EXC("  Instruction bus error\n");
     bdc:	480a      	ldr	r0, [pc, #40]	; (c08 <_BusFault+0x98>)
     bde:	e7d6      	b.n	b8e <_BusFault+0x1e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
     be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     be2:	049b      	lsls	r3, r3, #18
     be4:	d501      	bpl.n	bea <_BusFault+0x7a>
		PR_EXC("  Floating-point lazy state preservation error\n");
     be6:	4809      	ldr	r0, [pc, #36]	; (c0c <_BusFault+0x9c>)
     be8:	e7d1      	b.n	b8e <_BusFault+0x1e>
     bea:	bd38      	pop	{r3, r4, r5, pc}
     bec:	0000b322 	.word	0x0000b322
     bf0:	e000ed00 	.word	0xe000ed00
     bf4:	0000b4bc 	.word	0x0000b4bc
     bf8:	0000b4ce 	.word	0x0000b4ce
     bfc:	0000b339 	.word	0x0000b339
     c00:	0000b4fb 	.word	0x0000b4fb
     c04:	0000b353 	.word	0x0000b353
     c08:	0000b36f 	.word	0x0000b36f
     c0c:	0000b52c 	.word	0x0000b52c

00000c10 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
     c10:	b538      	push	{r3, r4, r5, lr}
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
     c12:	4d27      	ldr	r5, [pc, #156]	; (cb0 <_Fault+0xa0>)
     c14:	686b      	ldr	r3, [r5, #4]
     c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
	switch (fault) {
     c1a:	1eda      	subs	r2, r3, #3
{
     c1c:	4604      	mov	r4, r0
	switch (fault) {
     c1e:	2a09      	cmp	r2, #9
     c20:	d83a      	bhi.n	c98 <_Fault+0x88>
     c22:	e8df f002 	tbb	[pc, r2]
     c26:	3305      	.short	0x3305
     c28:	39392f35 	.word	0x39392f35
     c2c:	37393939 	.word	0x37393939
	PR_EXC("***** HARD FAULT *****\n");
     c30:	4820      	ldr	r0, [pc, #128]	; (cb4 <_Fault+0xa4>)
     c32:	f000 fbb5 	bl	13a0 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
     c36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c38:	079a      	lsls	r2, r3, #30
     c3a:	d503      	bpl.n	c44 <_Fault+0x34>
		PR_EXC("  Bus fault on vector table read\n");
     c3c:	481e      	ldr	r0, [pc, #120]	; (cb8 <_Fault+0xa8>)
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     c3e:	f000 fbaf 	bl	13a0 <printk>
     c42:	e00c      	b.n	c5e <_Fault+0x4e>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
     c44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c46:	005b      	lsls	r3, r3, #1
     c48:	d509      	bpl.n	c5e <_Fault+0x4e>
		PR_EXC("  Fault escalation (see below)\n");
     c4a:	481c      	ldr	r0, [pc, #112]	; (cbc <_Fault+0xac>)
     c4c:	f000 fba8 	bl	13a0 <printk>
		if (SCB_MMFSR) {
     c50:	4b1b      	ldr	r3, [pc, #108]	; (cc0 <_Fault+0xb0>)
     c52:	781b      	ldrb	r3, [r3, #0]
     c54:	b14b      	cbz	r3, c6a <_Fault+0x5a>
			_MpuFault(esf, 1);
     c56:	2101      	movs	r1, #1
		_MpuFault(esf, 0);
     c58:	4620      	mov	r0, r4
     c5a:	f7ff ff43 	bl	ae4 <_MpuFault>

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     c5e:	4621      	mov	r1, r4
     c60:	2000      	movs	r0, #0
}
     c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
     c66:	f000 b913 	b.w	e90 <_SysFatalErrorHandler>
		} else if (SCB_BFSR) {
     c6a:	4b16      	ldr	r3, [pc, #88]	; (cc4 <_Fault+0xb4>)
     c6c:	781b      	ldrb	r3, [r3, #0]
     c6e:	b123      	cbz	r3, c7a <_Fault+0x6a>
			_BusFault(esf, 1);
     c70:	2101      	movs	r1, #1
		_BusFault(esf, 0);
     c72:	4620      	mov	r0, r4
     c74:	f7ff ff7c 	bl	b70 <_BusFault>
     c78:	e7f1      	b.n	c5e <_Fault+0x4e>
		} else if (SCB_UFSR) {
     c7a:	4b13      	ldr	r3, [pc, #76]	; (cc8 <_Fault+0xb8>)
     c7c:	881b      	ldrh	r3, [r3, #0]
     c7e:	b29b      	uxth	r3, r3
     c80:	2b00      	cmp	r3, #0
     c82:	d0ec      	beq.n	c5e <_Fault+0x4e>
		_UsageFault(esf);
     c84:	4620      	mov	r0, r4
     c86:	f7ff fee5 	bl	a54 <_UsageFault>
     c8a:	e7e8      	b.n	c5e <_Fault+0x4e>
		_MpuFault(esf, 0);
     c8c:	2100      	movs	r1, #0
     c8e:	e7e3      	b.n	c58 <_Fault+0x48>
		_BusFault(esf, 0);
     c90:	2100      	movs	r1, #0
     c92:	e7ee      	b.n	c72 <_Fault+0x62>
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
     c94:	480d      	ldr	r0, [pc, #52]	; (ccc <_Fault+0xbc>)
     c96:	e7d2      	b.n	c3e <_Fault+0x2e>
	PR_EXC("***** %s %d) *****\n",
     c98:	480d      	ldr	r0, [pc, #52]	; (cd0 <_Fault+0xc0>)
     c9a:	490e      	ldr	r1, [pc, #56]	; (cd4 <_Fault+0xc4>)
     c9c:	f1a3 0210 	sub.w	r2, r3, #16
     ca0:	2b0f      	cmp	r3, #15
     ca2:	bfd8      	it	le
     ca4:	4601      	movle	r1, r0
     ca6:	480c      	ldr	r0, [pc, #48]	; (cd8 <_Fault+0xc8>)
     ca8:	f000 fb7a 	bl	13a0 <printk>
     cac:	e7d7      	b.n	c5e <_Fault+0x4e>
     cae:	bf00      	nop
     cb0:	e000ed00 	.word	0xe000ed00
     cb4:	0000b3b6 	.word	0x0000b3b6
     cb8:	0000b3ce 	.word	0x0000b3ce
     cbc:	0000b3f0 	.word	0x0000b3f0
     cc0:	e000ed28 	.word	0xe000ed28
     cc4:	e000ed29 	.word	0xe000ed29
     cc8:	e000ed2a 	.word	0xe000ed2a
     ccc:	0000b410 	.word	0x0000b410
     cd0:	0000b388 	.word	0x0000b388
     cd4:	0000b39d 	.word	0x0000b39d
     cd8:	0000b447 	.word	0x0000b447

00000cdc <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
     cdc:	4a02      	ldr	r2, [pc, #8]	; (ce8 <_FaultInit+0xc>)
     cde:	6953      	ldr	r3, [r2, #20]
     ce0:	f043 0310 	orr.w	r3, r3, #16
     ce4:	6153      	str	r3, [r2, #20]
     ce6:	4770      	bx	lr
     ce8:	e000ed00 	.word	0xe000ed00

00000cec <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
     cec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     cee:	2b00      	cmp	r3, #0
     cf0:	db08      	blt.n	d04 <_arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cf2:	2201      	movs	r2, #1
     cf4:	f000 001f 	and.w	r0, r0, #31
     cf8:	fa02 f000 	lsl.w	r0, r2, r0
     cfc:	095b      	lsrs	r3, r3, #5
     cfe:	4a02      	ldr	r2, [pc, #8]	; (d08 <_arch_irq_enable+0x1c>)
     d00:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	e000e100 	.word	0xe000e100

00000d0c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
     d0c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d0e:	2b00      	cmp	r3, #0
     d10:	db0d      	blt.n	d2e <_arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d12:	2201      	movs	r2, #1
     d14:	095b      	lsrs	r3, r3, #5
     d16:	f000 001f 	and.w	r0, r0, #31
     d1a:	fa02 f000 	lsl.w	r0, r2, r0
     d1e:	3320      	adds	r3, #32
     d20:	4a03      	ldr	r2, [pc, #12]	; (d30 <_arch_irq_disable+0x24>)
     d22:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
     d26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d2a:	f3bf 8f6f 	isb	sy
     d2e:	4770      	bx	lr
     d30:	e000e100 	.word	0xe000e100

00000d34 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
     d34:	0942      	lsrs	r2, r0, #5
     d36:	4b05      	ldr	r3, [pc, #20]	; (d4c <_arch_irq_is_enabled+0x18>)
     d38:	f000 001f 	and.w	r0, r0, #31
     d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d40:	2301      	movs	r3, #1
     d42:	fa03 f000 	lsl.w	r0, r3, r0
}
     d46:	4010      	ands	r0, r2
     d48:	4770      	bx	lr
     d4a:	bf00      	nop
     d4c:	e000e100 	.word	0xe000e100

00000d50 <_irq_priority_set>:
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
     d50:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d52:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d54:	bfa8      	it	ge
     d56:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
     d5a:	f101 0101 	add.w	r1, r1, #1
     d5e:	ea4f 1141 	mov.w	r1, r1, lsl #5
     d62:	bfad      	iteet	ge
     d64:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d68:	f000 000f 	andlt.w	r0, r0, #15
     d6c:	4b03      	ldrlt	r3, [pc, #12]	; (d7c <_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d6e:	b2c9      	uxtbge	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d70:	bfb6      	itet	lt
     d72:	b2c9      	uxtblt	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d74:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     d78:	5419      	strblt	r1, [r3, r0]
     d7a:	4770      	bx	lr
     d7c:	e000ed14 	.word	0xe000ed14

00000d80 <_irq_spurious>:
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
     d80:	f000 b842 	b.w	e08 <__bus_fault>

00000d84 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
     d84:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
     d86:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
     d88:	4b04      	ldr	r3, [pc, #16]	; (d9c <_arch_isr_direct_pm+0x18>)
     d8a:	6998      	ldr	r0, [r3, #24]
     d8c:	b118      	cbz	r0, d96 <_arch_isr_direct_pm+0x12>
		s32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
     d8e:	2200      	movs	r2, #0
     d90:	619a      	str	r2, [r3, #24]
		_sys_power_save_idle_exit(idle_val);
     d92:	f009 f8ab 	bl	9eec <_sys_power_save_idle_exit>
	}

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
     d96:	b662      	cpsie	i
     d98:	bd08      	pop	{r3, pc}
     d9a:	bf00      	nop
     d9c:	20002084 	.word	0x20002084

00000da0 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
     da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     da2:	460c      	mov	r4, r1
     da4:	4616      	mov	r6, r2
     da6:	461f      	mov	r7, r3
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
     da8:	2204      	movs	r2, #4
     daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     dac:	9909      	ldr	r1, [sp, #36]	; 0x24
     dae:	4605      	mov	r5, r0
     db0:	f009 ff34 	bl	ac1c <_init_thread_base>

	_new_thread_init(thread, pStackMem, stackEnd - pStackMem, priority,
			 options);

	/* carve the thread entry struct from the "base" of the stack */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     db4:	f1a6 0120 	sub.w	r1, r6, #32
     db8:	4421      	add	r1, r4
#else
	pInitCtx->pc = (u32_t)_thread_entry;
#endif

	/* force ARM mode by clearing LSB of address */
	pInitCtx->pc &= 0xfffffffe;
     dba:	4a0c      	ldr	r2, [pc, #48]	; (dec <_new_thread+0x4c>)
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
     dbc:	65ac      	str	r4, [r5, #88]	; 0x58
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
     dbe:	f021 0107 	bic.w	r1, r1, #7
	thread->init_data = NULL;
     dc2:	2300      	movs	r3, #0
	pInitCtx->pc &= 0xfffffffe;
     dc4:	f022 0201 	bic.w	r2, r2, #1
     dc8:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
     dca:	652b      	str	r3, [r5, #80]	; 0x50
	thread->stack_info.size = (u32_t)stackSize;
     dcc:	65ee      	str	r6, [r5, #92]	; 0x5c
     dce:	618a      	str	r2, [r1, #24]

	pInitCtx->a1 = (u32_t)pEntry;
	pInitCtx->a2 = (u32_t)parameter1;
     dd0:	9a06      	ldr	r2, [sp, #24]
     dd2:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
     dd4:	9a07      	ldr	r2, [sp, #28]
     dd6:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
     dd8:	9a08      	ldr	r2, [sp, #32]
     dda:	60ca      	str	r2, [r1, #12]
	pInitCtx->a1 = (u32_t)pEntry;
     ddc:	600f      	str	r7, [r1, #0]
	pInitCtx->xpsr =
     dde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     de2:	61ca      	str	r2, [r1, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
     de4:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
     de6:	662b      	str	r3, [r5, #96]	; 0x60
     de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dea:	bf00      	nop
     dec:	0000aa91 	.word	0x0000aa91

00000df0 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
     df0:	4901      	ldr	r1, [pc, #4]	; (df8 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
     df2:	2210      	movs	r2, #16
	str r2, [r1]
     df4:	600a      	str	r2, [r1, #0]
	bx lr
     df6:	4770      	bx	lr
	ldr r1, =_SCB_SCR
     df8:	e000ed10 	.word	0xe000ed10

00000dfc <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
     dfc:	4040      	eors	r0, r0
	msr BASEPRI, r0
     dfe:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
     e02:	bf30      	wfi

	bx lr
     e04:	4770      	bx	lr
     e06:	bf00      	nop

00000e08 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* force unlock interrupts */
	eors.n r0, r0
     e08:	4040      	eors	r0, r0
	msr BASEPRI, r0
     e0a:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
     e0e:	f8df c01c 	ldr.w	ip, [pc, #28]	; e2c <__bus_fault+0x24>
	ldr ip, [ip]
     e12:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
     e16:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
     e1a:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
     e1c:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
     e20:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	push {lr}
     e24:	b500      	push	{lr}
	bl _Fault
     e26:	f7ff fef3 	bl	c10 <_Fault>

	pop {pc}
     e2a:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
     e2c:	e000ed04 	.word	0xe000ed04

00000e30 <_NanoFatalErrorHandler>:
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
     e30:	2804      	cmp	r0, #4
{
     e32:	b538      	push	{r3, r4, r5, lr}
     e34:	4604      	mov	r4, r0
     e36:	460d      	mov	r5, r1
	switch (reason) {
     e38:	d013      	beq.n	e62 <_NanoFatalErrorHandler+0x32>
     e3a:	2805      	cmp	r0, #5
     e3c:	d013      	beq.n	e66 <_NanoFatalErrorHandler+0x36>
     e3e:	2803      	cmp	r0, #3
     e40:	d113      	bne.n	e6a <_NanoFatalErrorHandler+0x3a>
		printk("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		printk("**** Kernel Allocation Failure! ****\n");
     e42:	480c      	ldr	r0, [pc, #48]	; (e74 <_NanoFatalErrorHandler+0x44>)
		break;

	case _NANO_ERR_KERNEL_OOPS:
		printk("***** Kernel OOPS! *****\n");
     e44:	f000 faac 	bl	13a0 <printk>
     e48:	f009 fbda 	bl	a600 <_impl_k_current_get>

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
		break;
	}
	printk("Current thread ID = %p\n"
     e4c:	69aa      	ldr	r2, [r5, #24]
     e4e:	4601      	mov	r1, r0
     e50:	4809      	ldr	r0, [pc, #36]	; (e78 <_NanoFatalErrorHandler+0x48>)
     e52:	f000 faa5 	bl	13a0 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
     e56:	4629      	mov	r1, r5
     e58:	4620      	mov	r0, r4
}
     e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_SysFatalErrorHandler(reason, pEsf);
     e5e:	f000 b817 	b.w	e90 <_SysFatalErrorHandler>
		printk("***** Kernel OOPS! *****\n");
     e62:	4806      	ldr	r0, [pc, #24]	; (e7c <_NanoFatalErrorHandler+0x4c>)
     e64:	e7ee      	b.n	e44 <_NanoFatalErrorHandler+0x14>
		printk("***** Kernel Panic! *****\n");
     e66:	4806      	ldr	r0, [pc, #24]	; (e80 <_NanoFatalErrorHandler+0x50>)
     e68:	e7ec      	b.n	e44 <_NanoFatalErrorHandler+0x14>
		printk("**** Unknown Fatal Error %d! ****\n", reason);
     e6a:	4601      	mov	r1, r0
     e6c:	4805      	ldr	r0, [pc, #20]	; (e84 <_NanoFatalErrorHandler+0x54>)
     e6e:	f000 fa97 	bl	13a0 <printk>
		break;
     e72:	e7e9      	b.n	e48 <_NanoFatalErrorHandler+0x18>
     e74:	0000b630 	.word	0x0000b630
     e78:	0000b6ae 	.word	0x0000b6ae
     e7c:	0000b656 	.word	0x0000b656
     e80:	0000b670 	.word	0x0000b670
     e84:	0000b68b 	.word	0x0000b68b

00000e88 <_do_kernel_oops>:

void _do_kernel_oops(const NANO_ESF *esf)
{
     e88:	4601      	mov	r1, r0
	_NanoFatalErrorHandler(esf->r0, esf);
     e8a:	6800      	ldr	r0, [r0, #0]
     e8c:	f7ff bfd0 	b.w	e30 <_NanoFatalErrorHandler>

00000e90 <_SysFatalErrorHandler>:
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     e90:	2805      	cmp	r0, #5
{
     e92:	b510      	push	{r4, lr}
	if (reason == _NANO_ERR_KERNEL_PANIC) {
     e94:	d00c      	beq.n	eb0 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
     e96:	f009 fde3 	bl	aa60 <k_is_in_isr>
     e9a:	b160      	cbz	r0, eb6 <_SysFatalErrorHandler+0x26>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
     e9c:	f009 fde0 	bl	aa60 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
     ea0:	4b0c      	ldr	r3, [pc, #48]	; (ed4 <_SysFatalErrorHandler+0x44>)
     ea2:	490d      	ldr	r1, [pc, #52]	; (ed8 <_SysFatalErrorHandler+0x48>)
     ea4:	2800      	cmp	r0, #0
     ea6:	bf08      	it	eq
     ea8:	4619      	moveq	r1, r3
     eaa:	480c      	ldr	r0, [pc, #48]	; (edc <_SysFatalErrorHandler+0x4c>)
     eac:	f000 fa78 	bl	13a0 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
     eb0:	f7ff ffa4 	bl	dfc <k_cpu_idle>
     eb4:	e7fc      	b.n	eb0 <_SysFatalErrorHandler+0x20>
	if (k_is_in_isr() || _is_thread_essential()) {
     eb6:	f009 fde3 	bl	aa80 <_is_thread_essential>
     eba:	2800      	cmp	r0, #0
     ebc:	d1ee      	bne.n	e9c <_SysFatalErrorHandler+0xc>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
     ebe:	4c08      	ldr	r4, [pc, #32]	; (ee0 <_SysFatalErrorHandler+0x50>)
     ec0:	4808      	ldr	r0, [pc, #32]	; (ee4 <_SysFatalErrorHandler+0x54>)
     ec2:	68a1      	ldr	r1, [r4, #8]
     ec4:	f000 fa6c 	bl	13a0 <printk>

K_SYSCALL_DECLARE1(K_SYSCALL_K_THREAD_CANCEL, k_thread_cancel, int, k_tid_t, thread);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
     ec8:	68a0      	ldr	r0, [r4, #8]
	}
	CODE_UNREACHABLE;
}
     eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ece:	f000 b80b 	b.w	ee8 <_impl_k_thread_abort>
     ed2:	bf00      	nop
     ed4:	0000b6ee 	.word	0x0000b6ee
     ed8:	0000b6ea 	.word	0x0000b6ea
     edc:	0000b6ff 	.word	0x0000b6ff
     ee0:	20002084 	.word	0x20002084
     ee4:	0000b71f 	.word	0x0000b71f

00000ee8 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
     ee8:	b538      	push	{r3, r4, r5, lr}
     eea:	4605      	mov	r5, r0
	__asm__ volatile(
     eec:	f04f 0320 	mov.w	r3, #32
     ef0:	f3ef 8411 	mrs	r4, BASEPRI
     ef4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
     ef8:	f009 fe20 	bl	ab3c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
     efc:	4b0b      	ldr	r3, [pc, #44]	; (f2c <_impl_k_thread_abort+0x44>)
     efe:	689b      	ldr	r3, [r3, #8]
     f00:	429d      	cmp	r5, r3
     f02:	d10d      	bne.n	f20 <_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
     f04:	4b0a      	ldr	r3, [pc, #40]	; (f30 <_impl_k_thread_abort+0x48>)
     f06:	685a      	ldr	r2, [r3, #4]
     f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
     f0c:	b922      	cbnz	r2, f18 <_impl_k_thread_abort+0x30>
extern unsigned int __swap(unsigned int key);

static inline unsigned int _Swap(unsigned int key)
{
	_check_stack_sentinel();
	_update_time_slice_before_swap();
     f0e:	f009 fba1 	bl	a654 <_update_time_slice_before_swap>

	return __swap(key);
     f12:	4620      	mov	r0, r4
     f14:	f7ff fd38 	bl	988 <__swap>
			_Swap(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f18:	685a      	ldr	r2, [r3, #4]
     f1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     f1e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
     f20:	4620      	mov	r0, r4
}
     f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_reschedule_threads(key);
     f26:	f009 baf9 	b.w	a51c <_reschedule_threads>
     f2a:	bf00      	nop
     f2c:	20002084 	.word	0x20002084
     f30:	e000ed00 	.word	0xe000ed00

00000f34 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
     f34:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
     f36:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
     f38:	4a0b      	ldr	r2, [pc, #44]	; (f68 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
     f3a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
     f3c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
     f3e:	bf1e      	ittt	ne
	movne	r1, #0
     f40:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
     f42:	6191      	strne	r1, [r2, #24]
		blxne	_sys_power_save_idle_exit
     f44:	f008 ffd2 	blne	9eec <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
     f48:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
     f4a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
     f4e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
     f52:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
     f56:	4905      	ldr	r1, [pc, #20]	; (f6c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
     f58:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
     f5a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
     f5c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {lr}
     f5e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* exception return is done in _IntExit() */
	b _IntExit
     f62:	f7ff bcef 	b.w	944 <_ExcExit>
     f66:	0000      	.short	0x0000
	ldr r2, =_kernel
     f68:	20002084 	.word	0x20002084
	ldr r1, =_sw_isr_table
     f6c:	000000f8 	.word	0x000000f8

00000f70 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f70:	2020      	movs	r0, #32
    msr BASEPRI, r0
     f72:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialisation.
     */
    ldr r0, =_interrupt_stack
     f76:	4805      	ldr	r0, [pc, #20]	; (f8c <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
     f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
     f7c:	1840      	adds	r0, r0, r1
    msr PSP, r0
     f7e:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
     f82:	2002      	movs	r0, #2
    msr CONTROL, r0
     f84:	f380 8814 	msr	CONTROL, r0

    b _PrepC
     f88:	f000 b806 	b.w	f98 <_PrepC>
    ldr r0, =_interrupt_stack
     f8c:	20005390 	.word	0x20005390

00000f90 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
     f90:	bf30      	wfi
    b _SysNmiOnReset
     f92:	f7ff bffd 	b.w	f90 <_SysNmiOnReset>
     f96:	bf00      	nop

00000f98 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
     f98:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f9a:	4b07      	ldr	r3, [pc, #28]	; (fb8 <_PrepC+0x20>)
     f9c:	4a07      	ldr	r2, [pc, #28]	; (fbc <_PrepC+0x24>)
     f9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     fa2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
     fa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fa8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
     fac:	f008 ffce 	bl	9f4c <_bss_zero>
	_data_copy();
     fb0:	f008 ffd6 	bl	9f60 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
     fb4:	f008 fffc 	bl	9fb0 <_Cstart>
     fb8:	00000000 	.word	0x00000000
     fbc:	e000ed00 	.word	0xe000ed00

00000fc0 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
     fc0:	b508      	push	{r3, lr}
	handler();
     fc2:	f7ff ffe5 	bl	f90 <_SysNmiOnReset>
	_ExcExit();
}
     fc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	_ExcExit();
     fca:	f7ff bcbb 	b.w	944 <_ExcExit>
	...

00000fd0 <arm_mpu_init>:
	}
}

static inline u8_t _get_num_regions(void)
{
	u32_t type = ARM_MPU_DEV->type;
     fd0:	4b15      	ldr	r3, [pc, #84]	; (1028 <arm_mpu_init+0x58>)
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
     fd2:	4916      	ldr	r1, [pc, #88]	; (102c <arm_mpu_init+0x5c>)
	u32_t type = ARM_MPU_DEV->type;
     fd4:	681a      	ldr	r2, [r3, #0]
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
     fd6:	b530      	push	{r4, r5, lr}
	if (mpu_config.num_regions > _get_num_regions()) {
     fd8:	680d      	ldr	r5, [r1, #0]
     fda:	f3c2 2207 	ubfx	r2, r2, #8, #8
     fde:	4295      	cmp	r5, r2
     fe0:	d80f      	bhi.n	1002 <arm_mpu_init+0x32>
	ARM_MPU_DEV->ctrl = 0;
     fe2:	2200      	movs	r2, #0
     fe4:	6848      	ldr	r0, [r1, #4]
     fe6:	605a      	str	r2, [r3, #4]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
     fe8:	4295      	cmp	r5, r2
     fea:	f100 000c 	add.w	r0, r0, #12
     fee:	d10a      	bne.n	1006 <arm_mpu_init+0x36>
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
     ff0:	2205      	movs	r2, #5
     ff2:	605a      	str	r2, [r3, #4]
	arm_mpu_enabled = 1;
     ff4:	4b0e      	ldr	r3, [pc, #56]	; (1030 <arm_mpu_init+0x60>)
     ff6:	2201      	movs	r2, #1
     ff8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
     ffa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ffe:	f3bf 8f6f 	isb	sy
	ARG_UNUSED(arg);

	_arm_mpu_config();

	return 0;
}
    1002:	2000      	movs	r0, #0
    1004:	bd30      	pop	{r4, r5, pc}
		_region_init(r_index,
    1006:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    100a:	f850 4c04 	ldr.w	r4, [r0, #-4]
	ARM_MPU_DEV->rnr = index;
    100e:	609a      	str	r2, [r3, #8]
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    1010:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
    1014:	f041 0110 	orr.w	r1, r1, #16
    1018:	4311      	orrs	r1, r2
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    101a:	f044 0401 	orr.w	r4, r4, #1
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
    101e:	60d9      	str	r1, [r3, #12]
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
    1020:	3201      	adds	r2, #1
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
    1022:	611c      	str	r4, [r3, #16]
    1024:	e7e0      	b.n	fe8 <arm_mpu_init+0x18>
    1026:	bf00      	nop
    1028:	e000ed90 	.word	0xe000ed90
    102c:	20005f90 	.word	0x20005f90
    1030:	20000004 	.word	0x20000004

00001034 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    1034:	2000      	movs	r0, #0
    1036:	4770      	bx	lr

00001038 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1038:	680b      	ldr	r3, [r1, #0]
    103a:	3301      	adds	r3, #1
    103c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    103e:	4b01      	ldr	r3, [pc, #4]	; (1044 <char_out+0xc>)
    1040:	681b      	ldr	r3, [r3, #0]
    1042:	4718      	bx	r3
    1044:	20005fd8 	.word	0x20005fd8

00001048 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    1048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    104c:	b085      	sub	sp, #20
    104e:	469b      	mov	fp, r3
    1050:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1052:	f8df a090 	ldr.w	sl, [pc, #144]	; 10e4 <_printk_dec_ulong+0x9c>
    1056:	2c01      	cmp	r4, #1
    1058:	bfb8      	it	lt
    105a:	2401      	movlt	r4, #1
    105c:	2b01      	cmp	r3, #1
    105e:	bf0c      	ite	eq
    1060:	2330      	moveq	r3, #48	; 0x30
    1062:	2320      	movne	r3, #32
    1064:	4615      	mov	r5, r2
    1066:	4680      	mov	r8, r0
    1068:	4689      	mov	r9, r1
    106a:	9401      	str	r4, [sp, #4]
    106c:	9302      	str	r3, [sp, #8]
    106e:	2601      	movs	r6, #1
    1070:	270a      	movs	r7, #10
    1072:	2200      	movs	r2, #0
    1074:	f10a 0401 	add.w	r4, sl, #1
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
    1078:	b90a      	cbnz	r2, 107e <_printk_dec_ulong+0x36>
    107a:	45aa      	cmp	sl, r5
    107c:	d21f      	bcs.n	10be <_printk_dec_ulong+0x76>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
    107e:	fbb5 f0f4 	udiv	r0, r5, r4
    1082:	4649      	mov	r1, r9
    1084:	3030      	adds	r0, #48	; 0x30
    1086:	47c0      	blx	r8
			digits++;
    1088:	3601      	adds	r6, #1
			found_largest_digit = 1;
    108a:	2201      	movs	r2, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    108c:	3f01      	subs	r7, #1
	while (pos >= 9) {
    108e:	2f01      	cmp	r7, #1
		remainder %= (pos + 1);
    1090:	fbb5 f1f4 	udiv	r1, r5, r4
		pos /= 10;
    1094:	f04f 030a 	mov.w	r3, #10
		remainder %= (pos + 1);
    1098:	fb04 5511 	mls	r5, r4, r1, r5
		pos /= 10;
    109c:	fbba faf3 	udiv	sl, sl, r3
	while (pos >= 9) {
    10a0:	d1e8      	bne.n	1074 <_printk_dec_ulong+0x2c>
	}
	out((int)(remainder + 48), ctx);
    10a2:	4649      	mov	r1, r9
    10a4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    10a8:	47c0      	blx	r8

	if (padding == PAD_SPACE_AFTER) {
    10aa:	f1bb 0f03 	cmp.w	fp, #3
    10ae:	d103      	bne.n	10b8 <_printk_dec_ulong+0x70>
		remaining = min_width - digits;
    10b0:	9b01      	ldr	r3, [sp, #4]
    10b2:	1b9c      	subs	r4, r3, r6
		while (remaining-- > 0) {
    10b4:	2c00      	cmp	r4, #0
    10b6:	dc0f      	bgt.n	10d8 <_printk_dec_ulong+0x90>
			out(' ', ctx);
		}
	}
}
    10b8:	b005      	add	sp, #20
    10ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
    10be:	9b01      	ldr	r3, [sp, #4]
    10c0:	42bb      	cmp	r3, r7
    10c2:	dbe3      	blt.n	108c <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
    10c4:	f1bb 0f02 	cmp.w	fp, #2
    10c8:	d8e0      	bhi.n	108c <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    10ca:	4649      	mov	r1, r9
    10cc:	9802      	ldr	r0, [sp, #8]
    10ce:	9203      	str	r2, [sp, #12]
			digits++;
    10d0:	3601      	adds	r6, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    10d2:	47c0      	blx	r8
			digits++;
    10d4:	9a03      	ldr	r2, [sp, #12]
    10d6:	e7d9      	b.n	108c <_printk_dec_ulong+0x44>
			out(' ', ctx);
    10d8:	4649      	mov	r1, r9
    10da:	2020      	movs	r0, #32
    10dc:	47c0      	blx	r8
    10de:	3c01      	subs	r4, #1
    10e0:	e7e8      	b.n	10b4 <_printk_dec_ulong+0x6c>
    10e2:	bf00      	nop
    10e4:	3b9ac9ff 	.word	0x3b9ac9ff

000010e8 <str_out>:
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
	if (!ctx->str || ctx->count >= ctx->max) {
    10e8:	680a      	ldr	r2, [r1, #0]
    10ea:	688b      	ldr	r3, [r1, #8]
{
    10ec:	b530      	push	{r4, r5, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
    10ee:	b112      	cbz	r2, 10f6 <str_out+0xe>
    10f0:	684c      	ldr	r4, [r1, #4]
    10f2:	42a3      	cmp	r3, r4
    10f4:	db02      	blt.n	10fc <str_out+0x14>
		ctx->count++;
    10f6:	3301      	adds	r3, #1
    10f8:	608b      	str	r3, [r1, #8]
		return c;
    10fa:	bd30      	pop	{r4, r5, pc}
	}

	if (ctx->count == ctx->max - 1) {
    10fc:	1e65      	subs	r5, r4, #1
    10fe:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
    1100:	bf0b      	itete	eq
    1102:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
    1104:	1c5c      	addne	r4, r3, #1
		ctx->str[ctx->count++] = '\0';
    1106:	2100      	moveq	r1, #0
		ctx->str[ctx->count++] = c;
    1108:	608c      	strne	r4, [r1, #8]
		ctx->str[ctx->count++] = '\0';
    110a:	bf0c      	ite	eq
    110c:	54d1      	strbeq	r1, [r2, r3]
		ctx->str[ctx->count++] = c;
    110e:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
    1110:	bd30      	pop	{r4, r5, pc}
	...

00001114 <__printk_hook_install>:
	_char_out = fn;
    1114:	4b01      	ldr	r3, [pc, #4]	; (111c <__printk_hook_install+0x8>)
    1116:	6018      	str	r0, [r3, #0]
    1118:	4770      	bx	lr
    111a:	bf00      	nop
    111c:	20005fd8 	.word	0x20005fd8

00001120 <_vprintk>:
{
    1120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1124:	b089      	sub	sp, #36	; 0x24
	int long_ctr = 0;
    1126:	f04f 0a00 	mov.w	sl, #0
{
    112a:	4606      	mov	r6, r0
    112c:	460f      	mov	r7, r1
    112e:	9204      	str	r2, [sp, #16]
    1130:	461c      	mov	r4, r3
	int min_width = -1;
    1132:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    1136:	46d0      	mov	r8, sl
	int might_format = 0; /* 1 if encountered a '%' */
    1138:	4655      	mov	r5, sl
	while (*fmt) {
    113a:	9b04      	ldr	r3, [sp, #16]
    113c:	7818      	ldrb	r0, [r3, #0]
    113e:	b910      	cbnz	r0, 1146 <_vprintk+0x26>
}
    1140:	b009      	add	sp, #36	; 0x24
    1142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!might_format) {
    1146:	b945      	cbnz	r5, 115a <_vprintk+0x3a>
			if (*fmt != '%') {
    1148:	2825      	cmp	r0, #37	; 0x25
    114a:	f000 810c 	beq.w	1366 <_vprintk+0x246>
				out((int)*fmt, ctx);
    114e:	4639      	mov	r1, r7
    1150:	47b0      	blx	r6
		++fmt;
    1152:	9b04      	ldr	r3, [sp, #16]
    1154:	3301      	adds	r3, #1
    1156:	9304      	str	r3, [sp, #16]
    1158:	e7ef      	b.n	113a <_vprintk+0x1a>
			switch (*fmt) {
    115a:	2864      	cmp	r0, #100	; 0x64
    115c:	d061      	beq.n	1222 <_vprintk+0x102>
    115e:	d819      	bhi.n	1194 <_vprintk+0x74>
    1160:	2839      	cmp	r0, #57	; 0x39
    1162:	d80a      	bhi.n	117a <_vprintk+0x5a>
    1164:	2831      	cmp	r0, #49	; 0x31
    1166:	d250      	bcs.n	120a <_vprintk+0xea>
    1168:	282d      	cmp	r0, #45	; 0x2d
    116a:	d03c      	beq.n	11e6 <_vprintk+0xc6>
    116c:	2830      	cmp	r0, #48	; 0x30
    116e:	d03d      	beq.n	11ec <_vprintk+0xcc>
    1170:	2825      	cmp	r0, #37	; 0x25
    1172:	d108      	bne.n	1186 <_vprintk+0x66>
				out((int)'%', ctx);
    1174:	4639      	mov	r1, r7
				out((int)*fmt, ctx);
    1176:	47b0      	blx	r6
    1178:	e06f      	b.n	125a <_vprintk+0x13a>
			switch (*fmt) {
    117a:	2858      	cmp	r0, #88	; 0x58
    117c:	f000 8089 	beq.w	1292 <_vprintk+0x172>
    1180:	2863      	cmp	r0, #99	; 0x63
    1182:	f000 80ea 	beq.w	135a <_vprintk+0x23a>
				out((int)'%', ctx);
    1186:	4639      	mov	r1, r7
    1188:	2025      	movs	r0, #37	; 0x25
    118a:	47b0      	blx	r6
				out((int)*fmt, ctx);
    118c:	9b04      	ldr	r3, [sp, #16]
    118e:	4639      	mov	r1, r7
    1190:	7818      	ldrb	r0, [r3, #0]
    1192:	e7f0      	b.n	1176 <_vprintk+0x56>
			switch (*fmt) {
    1194:	2870      	cmp	r0, #112	; 0x70
    1196:	d072      	beq.n	127e <_vprintk+0x15e>
    1198:	d806      	bhi.n	11a8 <_vprintk+0x88>
    119a:	2869      	cmp	r0, #105	; 0x69
    119c:	d041      	beq.n	1222 <_vprintk+0x102>
    119e:	286c      	cmp	r0, #108	; 0x6c
    11a0:	d03c      	beq.n	121c <_vprintk+0xfc>
    11a2:	2868      	cmp	r0, #104	; 0x68
    11a4:	d0d5      	beq.n	1152 <_vprintk+0x32>
    11a6:	e7ee      	b.n	1186 <_vprintk+0x66>
    11a8:	2875      	cmp	r0, #117	; 0x75
    11aa:	d058      	beq.n	125e <_vprintk+0x13e>
    11ac:	d817      	bhi.n	11de <_vprintk+0xbe>
    11ae:	2873      	cmp	r0, #115	; 0x73
    11b0:	d1e9      	bne.n	1186 <_vprintk+0x66>
				char *s = va_arg(ap, char *);
    11b2:	6823      	ldr	r3, [r4, #0]
    11b4:	f104 0b04 	add.w	fp, r4, #4
    11b8:	461c      	mov	r4, r3
				while (*s)
    11ba:	4625      	mov	r5, r4
    11bc:	f815 0b01 	ldrb.w	r0, [r5], #1
    11c0:	2800      	cmp	r0, #0
    11c2:	f040 80bf 	bne.w	1344 <_vprintk+0x224>
				if (padding == PAD_SPACE_AFTER) {
    11c6:	f1b8 0f03 	cmp.w	r8, #3
    11ca:	f040 80d5 	bne.w	1378 <_vprintk+0x258>
					int remaining = min_width - (s - start);
    11ce:	1ae4      	subs	r4, r4, r3
    11d0:	eba9 0404 	sub.w	r4, r9, r4
					while (remaining-- > 0) {
    11d4:	2c00      	cmp	r4, #0
    11d6:	f300 80bb 	bgt.w	1350 <_vprintk+0x230>
				char *s = va_arg(ap, char *);
    11da:	465c      	mov	r4, fp
    11dc:	e03d      	b.n	125a <_vprintk+0x13a>
			switch (*fmt) {
    11de:	2878      	cmp	r0, #120	; 0x78
    11e0:	d057      	beq.n	1292 <_vprintk+0x172>
    11e2:	287a      	cmp	r0, #122	; 0x7a
    11e4:	e7de      	b.n	11a4 <_vprintk+0x84>
				padding = PAD_SPACE_AFTER;
    11e6:	f04f 0803 	mov.w	r8, #3
    11ea:	e7b2      	b.n	1152 <_vprintk+0x32>
				if (min_width < 0 && padding == PAD_NONE) {
    11ec:	f1b9 0f00 	cmp.w	r9, #0
    11f0:	da0e      	bge.n	1210 <_vprintk+0xf0>
    11f2:	f1b8 0f00 	cmp.w	r8, #0
    11f6:	f000 80bc 	beq.w	1372 <_vprintk+0x252>
					min_width = *fmt - '0';
    11fa:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    11fe:	f1b8 0f00 	cmp.w	r8, #0
    1202:	bf08      	it	eq
    1204:	f04f 0802 	moveq.w	r8, #2
    1208:	e7a3      	b.n	1152 <_vprintk+0x32>
				if (min_width < 0) {
    120a:	f1b9 0f00 	cmp.w	r9, #0
    120e:	dbf4      	blt.n	11fa <_vprintk+0xda>
					min_width = 10 * min_width + *fmt - '0';
    1210:	230a      	movs	r3, #10
    1212:	fb03 0909 	mla	r9, r3, r9, r0
    1216:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
    121a:	e7f0      	b.n	11fe <_vprintk+0xde>
				long_ctr++;
    121c:	f10a 0a01 	add.w	sl, sl, #1
    1220:	e797      	b.n	1152 <_vprintk+0x32>
				if (long_ctr < 2) {
    1222:	f1ba 0f01 	cmp.w	sl, #1
					d = (long)va_arg(ap, long long);
    1226:	bfc5      	ittet	gt
    1228:	3407      	addgt	r4, #7
    122a:	f024 0307 	bicgt.w	r3, r4, #7
					d = va_arg(ap, long);
    122e:	6825      	ldrle	r5, [r4, #0]
					d = (long)va_arg(ap, long long);
    1230:	681d      	ldrgt	r5, [r3, #0]
					d = va_arg(ap, long);
    1232:	bfd4      	ite	le
    1234:	3404      	addle	r4, #4
					d = (long)va_arg(ap, long long);
    1236:	f103 0408 	addgt.w	r4, r3, #8
				if (d < 0) {
    123a:	2d00      	cmp	r5, #0
    123c:	da05      	bge.n	124a <_vprintk+0x12a>
					out((int)'-', ctx);
    123e:	4639      	mov	r1, r7
    1240:	202d      	movs	r0, #45	; 0x2d
    1242:	47b0      	blx	r6
					d = -d;
    1244:	426d      	negs	r5, r5
					min_width--;
    1246:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    124a:	f8cd 9000 	str.w	r9, [sp]
    124e:	4643      	mov	r3, r8
    1250:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    1252:	4639      	mov	r1, r7
    1254:	4630      	mov	r0, r6
    1256:	f7ff fef7 	bl	1048 <_printk_dec_ulong>
			might_format = 0;
    125a:	2500      	movs	r5, #0
				break;
    125c:	e779      	b.n	1152 <_vprintk+0x32>
				if (long_ctr < 2) {
    125e:	f1ba 0f01 	cmp.w	sl, #1
					u = (unsigned long)va_arg(ap,
    1262:	bfc5      	ittet	gt
    1264:	3407      	addgt	r4, #7
    1266:	f024 0307 	bicgt.w	r3, r4, #7
					u = va_arg(ap, unsigned long);
    126a:	6822      	ldrle	r2, [r4, #0]
					u = (unsigned long)va_arg(ap,
    126c:	681a      	ldrgt	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    126e:	f8cd 9000 	str.w	r9, [sp]
					u = (unsigned long)va_arg(ap,
    1272:	bfcc      	ite	gt
    1274:	f103 0408 	addgt.w	r4, r3, #8
					u = va_arg(ap, unsigned long);
    1278:	3404      	addle	r4, #4
				_printk_dec_ulong(out, ctx, u, padding,
    127a:	4643      	mov	r3, r8
    127c:	e7e9      	b.n	1252 <_vprintk+0x132>
				  out('0', ctx);
    127e:	4639      	mov	r1, r7
    1280:	2030      	movs	r0, #48	; 0x30
    1282:	47b0      	blx	r6
				  out('x', ctx);
    1284:	4639      	mov	r1, r7
    1286:	2078      	movs	r0, #120	; 0x78
    1288:	47b0      	blx	r6
				  min_width = 8;
    128a:	f04f 0908 	mov.w	r9, #8
				  padding = PAD_ZERO_BEFORE;
    128e:	f04f 0801 	mov.w	r8, #1
				if (long_ctr < 2) {
    1292:	f1ba 0f01 	cmp.w	sl, #1
					x = (unsigned long)va_arg(ap,
    1296:	bfc7      	ittee	gt
    1298:	3407      	addgt	r4, #7
    129a:	f024 0307 	bicgt.w	r3, r4, #7
					x = va_arg(ap, unsigned long);
    129e:	6823      	ldrle	r3, [r4, #0]
    12a0:	9305      	strle	r3, [sp, #20]
					x = (unsigned long)va_arg(ap,
    12a2:	bfc2      	ittt	gt
    12a4:	f103 0408 	addgt.w	r4, r3, #8
    12a8:	681b      	ldrgt	r3, [r3, #0]
    12aa:	9305      	strgt	r3, [sp, #20]
	int remaining = 8; /* 8 digits max */
    12ac:	f04f 0208 	mov.w	r2, #8
	int digits = 0;
    12b0:	f04f 0300 	mov.w	r3, #0
					x = va_arg(ap, unsigned long);
    12b4:	bfd8      	it	le
    12b6:	3404      	addle	r4, #4
	int digits = 0;
    12b8:	9303      	str	r3, [sp, #12]
	int found_largest_digit = 0;
    12ba:	9307      	str	r3, [sp, #28]
	int size = sizeof(num) * 2;
    12bc:	4693      	mov	fp, r2
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    12be:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    12c2:	9b05      	ldr	r3, [sp, #20]
    12c4:	ea4f 008b 	mov.w	r0, fp, lsl #2
    12c8:	fa23 f000 	lsr.w	r0, r3, r0
		if (nibble || found_largest_digit || size == 1) {
    12cc:	f010 000f 	ands.w	r0, r0, #15
    12d0:	d109      	bne.n	12e6 <_vprintk+0x1c6>
    12d2:	9b07      	ldr	r3, [sp, #28]
    12d4:	b913      	cbnz	r3, 12dc <_vprintk+0x1bc>
    12d6:	f1bb 0f00 	cmp.w	fp, #0
    12da:	d122      	bne.n	1322 <_vprintk+0x202>
			nibble += nibble > 9 ? 87 : 48;
    12dc:	f04f 0e30 	mov.w	lr, #48	; 0x30
    12e0:	e007      	b.n	12f2 <_vprintk+0x1d2>
	for (; size; size--) {
    12e2:	9a06      	ldr	r2, [sp, #24]
    12e4:	e7eb      	b.n	12be <_vprintk+0x19e>
			nibble += nibble > 9 ? 87 : 48;
    12e6:	2809      	cmp	r0, #9
    12e8:	bf8c      	ite	hi
    12ea:	f04f 0e57 	movhi.w	lr, #87	; 0x57
    12ee:	f04f 0e30 	movls.w	lr, #48	; 0x30
			out((int)nibble, ctx);
    12f2:	4639      	mov	r1, r7
    12f4:	4470      	add	r0, lr
    12f6:	9206      	str	r2, [sp, #24]
    12f8:	47b0      	blx	r6
			digits++;
    12fa:	9b03      	ldr	r3, [sp, #12]
			found_largest_digit = 1;
    12fc:	9507      	str	r5, [sp, #28]
			digits++;
    12fe:	3301      	adds	r3, #1
    1300:	9303      	str	r3, [sp, #12]
	for (; size; size--) {
    1302:	f1bb 0f00 	cmp.w	fp, #0
    1306:	d1ec      	bne.n	12e2 <_vprintk+0x1c2>
	if (padding == PAD_SPACE_AFTER) {
    1308:	f1b8 0f03 	cmp.w	r8, #3
    130c:	d1a5      	bne.n	125a <_vprintk+0x13a>
		remaining = min_width * 2 - digits;
    130e:	9b03      	ldr	r3, [sp, #12]
    1310:	ebc3 0549 	rsb	r5, r3, r9, lsl #1
		while (remaining-- > 0) {
    1314:	2d00      	cmp	r5, #0
    1316:	dda0      	ble.n	125a <_vprintk+0x13a>
			out(' ', ctx);
    1318:	4639      	mov	r1, r7
    131a:	2020      	movs	r0, #32
    131c:	47b0      	blx	r6
    131e:	3d01      	subs	r5, #1
    1320:	e7f8      	b.n	1314 <_vprintk+0x1f4>
		if (remaining-- <= min_width) {
    1322:	1e53      	subs	r3, r2, #1
    1324:	4591      	cmp	r9, r2
    1326:	9306      	str	r3, [sp, #24]
    1328:	dbeb      	blt.n	1302 <_vprintk+0x1e2>
			if (padding == PAD_ZERO_BEFORE) {
    132a:	f1b8 0f01 	cmp.w	r8, #1
    132e:	d103      	bne.n	1338 <_vprintk+0x218>
				out('0', ctx);
    1330:	4639      	mov	r1, r7
    1332:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    1334:	47b0      	blx	r6
    1336:	e7e4      	b.n	1302 <_vprintk+0x1e2>
			} else if (padding == PAD_SPACE_BEFORE) {
    1338:	f1b8 0f02 	cmp.w	r8, #2
    133c:	d1e1      	bne.n	1302 <_vprintk+0x1e2>
				out(' ', ctx);
    133e:	4639      	mov	r1, r7
    1340:	2020      	movs	r0, #32
    1342:	e7f7      	b.n	1334 <_vprintk+0x214>
					out((int)(*s++), ctx);
    1344:	4639      	mov	r1, r7
    1346:	9303      	str	r3, [sp, #12]
    1348:	462c      	mov	r4, r5
    134a:	47b0      	blx	r6
    134c:	9b03      	ldr	r3, [sp, #12]
    134e:	e734      	b.n	11ba <_vprintk+0x9a>
						out(' ', ctx);
    1350:	4639      	mov	r1, r7
    1352:	2020      	movs	r0, #32
    1354:	47b0      	blx	r6
    1356:	3c01      	subs	r4, #1
    1358:	e73c      	b.n	11d4 <_vprintk+0xb4>
				out(c, ctx);
    135a:	6820      	ldr	r0, [r4, #0]
				int c = va_arg(ap, int);
    135c:	1d25      	adds	r5, r4, #4
				out(c, ctx);
    135e:	4639      	mov	r1, r7
    1360:	47b0      	blx	r6
				int c = va_arg(ap, int);
    1362:	462c      	mov	r4, r5
    1364:	e779      	b.n	125a <_vprintk+0x13a>
				long_ctr = 0;
    1366:	46aa      	mov	sl, r5
				padding = PAD_NONE;
    1368:	46a8      	mov	r8, r5
				min_width = -1;
    136a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
    136e:	2501      	movs	r5, #1
    1370:	e6ef      	b.n	1152 <_vprintk+0x32>
					padding = PAD_ZERO_BEFORE;
    1372:	f04f 0801 	mov.w	r8, #1
    1376:	e6ec      	b.n	1152 <_vprintk+0x32>
				char *s = va_arg(ap, char *);
    1378:	465c      	mov	r4, fp
			might_format = 0;
    137a:	4605      	mov	r5, r0
    137c:	e6e9      	b.n	1152 <_vprintk+0x32>
	...

00001380 <vprintk>:
{
    1380:	b513      	push	{r0, r1, r4, lr}
	struct out_context ctx = { 0 };
    1382:	ac02      	add	r4, sp, #8
    1384:	2300      	movs	r3, #0
    1386:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    138a:	4602      	mov	r2, r0
    138c:	460b      	mov	r3, r1
    138e:	4803      	ldr	r0, [pc, #12]	; (139c <vprintk+0x1c>)
    1390:	4621      	mov	r1, r4
    1392:	f7ff fec5 	bl	1120 <_vprintk>
}
    1396:	9801      	ldr	r0, [sp, #4]
    1398:	b002      	add	sp, #8
    139a:	bd10      	pop	{r4, pc}
    139c:	00001039 	.word	0x00001039

000013a0 <printk>:
{
    13a0:	b40f      	push	{r0, r1, r2, r3}
    13a2:	b507      	push	{r0, r1, r2, lr}
    13a4:	a904      	add	r1, sp, #16
    13a6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    13aa:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    13ac:	f7ff ffe8 	bl	1380 <vprintk>
}
    13b0:	b003      	add	sp, #12
    13b2:	f85d eb04 	ldr.w	lr, [sp], #4
    13b6:	b004      	add	sp, #16
    13b8:	4770      	bx	lr
	...

000013bc <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    13bc:	b40c      	push	{r2, r3}
    13be:	b530      	push	{r4, r5, lr}
    13c0:	b085      	sub	sp, #20
    13c2:	ab08      	add	r3, sp, #32
    13c4:	4604      	mov	r4, r0
    13c6:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    13ca:	9001      	str	r0, [sp, #4]
    13cc:	9102      	str	r1, [sp, #8]
    13ce:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    13d0:	a901      	add	r1, sp, #4
    13d2:	4807      	ldr	r0, [pc, #28]	; (13f0 <snprintk+0x34>)
	va_start(ap, fmt);
    13d4:	9300      	str	r3, [sp, #0]
	struct str_context ctx = { str, size, 0 };
    13d6:	9503      	str	r5, [sp, #12]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    13d8:	f7ff fea2 	bl	1120 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    13dc:	9803      	ldr	r0, [sp, #12]
    13de:	9b02      	ldr	r3, [sp, #8]
    13e0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    13e2:	bfb8      	it	lt
    13e4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    13e6:	b005      	add	sp, #20
    13e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    13ec:	b002      	add	sp, #8
    13ee:	4770      	bx	lr
    13f0:	000010e9 	.word	0x000010e9

000013f4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_NET_BUF_USER_DATA_SIZE, 4);
GEN_ABSOLUTE_SYM(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_CMSIS, 1);
GEN_ABSOLUTE_SYM(CONFIG_HAS_NRFX, 1);
GEN_ABSOLUTE_SYM(CONFIG_TEST_EXTRA_STACKSIZE, 0);
GEN_ABSOLUTE_SYM(CONFIG_NUM_IRQS, 46);
    13f4:	4770      	bx	lr
	...

000013f8 <sys_rand32_get>:
#include <entropy.h>

static atomic_t entropy_driver;

u32_t sys_rand32_get(void)
{
    13f8:	b513      	push	{r0, r1, r4, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    13fa:	4c11      	ldr	r4, [pc, #68]	; (1440 <sys_rand32_get+0x48>)
    13fc:	f3bf 8f5b 	dmb	ish
    1400:	6820      	ldr	r0, [r4, #0]
    1402:	f3bf 8f5b 	dmb	ish
	struct device *dev = (struct device *)atomic_get(&entropy_driver);
	u32_t random_num;
	int ret;

	if (unlikely(!dev)) {
    1406:	b960      	cbnz	r0, 1422 <sys_rand32_get+0x2a>
		/* Only one entropy device exists, so this is safe even
		 * if the whole operation isn't atomic.
		 */
		dev = device_get_binding(CONFIG_ENTROPY_NAME);
    1408:	480e      	ldr	r0, [pc, #56]	; (1444 <sys_rand32_get+0x4c>)
    140a:	f008 fd49 	bl	9ea0 <device_get_binding>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    140e:	f3bf 8f5b 	dmb	ish
    1412:	e854 3f00 	ldrex	r3, [r4]
    1416:	e844 0200 	strex	r2, r0, [r4]
    141a:	2a00      	cmp	r2, #0
    141c:	d1f9      	bne.n	1412 <sys_rand32_get+0x1a>
    141e:	f3bf 8f5b 	dmb	ish
					    u16_t length)
{
	const struct entropy_driver_api *api = dev->driver_api;

	__ASSERT(api->get_entropy, "Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1422:	6843      	ldr	r3, [r0, #4]
    1424:	2204      	movs	r2, #4
    1426:	681b      	ldr	r3, [r3, #0]
    1428:	eb0d 0102 	add.w	r1, sp, r2
    142c:	4798      	blx	r3
		atomic_set(&entropy_driver, (atomic_t)(uintptr_t)dev);
	}

	ret = entropy_get_entropy(dev, (u8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    142e:	2800      	cmp	r0, #0
    1430:	da02      	bge.n	1438 <sys_rand32_get+0x40>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1432:	f000 fd0d 	bl	1e50 <_timer_cycle_get_32>
    1436:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1438:	9801      	ldr	r0, [sp, #4]
    143a:	b002      	add	sp, #8
    143c:	bd10      	pop	{r4, pc}
    143e:	bf00      	nop
    1440:	20000008 	.word	0x20000008
    1444:	0000b744 	.word	0x0000b744

00001448 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1448:	280a      	cmp	r0, #10
{
    144a:	b538      	push	{r3, r4, r5, lr}
    144c:	4604      	mov	r4, r0
    144e:	4d07      	ldr	r5, [pc, #28]	; (146c <console_out+0x24>)
	if ('\n' == c) {
    1450:	d104      	bne.n	145c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1452:	6828      	ldr	r0, [r5, #0]
static inline unsigned char _impl_uart_poll_out(struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
    1454:	6843      	ldr	r3, [r0, #4]
    1456:	210d      	movs	r1, #13
    1458:	685b      	ldr	r3, [r3, #4]
    145a:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    145c:	6828      	ldr	r0, [r5, #0]
    145e:	6843      	ldr	r3, [r0, #4]
    1460:	b2e1      	uxtb	r1, r4
    1462:	685b      	ldr	r3, [r3, #4]
    1464:	4798      	blx	r3

	return c;
}
    1466:	4620      	mov	r0, r4
    1468:	bd38      	pop	{r3, r4, r5, pc}
    146a:	bf00      	nop
    146c:	2000000c 	.word	0x2000000c

00001470 <uart_console_hook_install>:
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1470:	4801      	ldr	r0, [pc, #4]	; (1478 <uart_console_hook_install+0x8>)
    1472:	f7ff be4f 	b.w	1114 <__printk_hook_install>
    1476:	bf00      	nop
    1478:	00001449 	.word	0x00001449

0000147c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    147c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    147e:	4804      	ldr	r0, [pc, #16]	; (1490 <uart_console_init+0x14>)
    1480:	f008 fd0e 	bl	9ea0 <device_get_binding>
    1484:	4b03      	ldr	r3, [pc, #12]	; (1494 <uart_console_init+0x18>)
    1486:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1488:	f7ff fff2 	bl	1470 <uart_console_hook_install>

	return 0;
}
    148c:	2000      	movs	r0, #0
    148e:	bd08      	pop	{r3, pc}
    1490:	0000b74e 	.word	0x0000b74e
    1494:	2000000c 	.word	0x2000000c

00001498 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
    1498:	b510      	push	{r4, lr}
    149a:	f04f 0320 	mov.w	r3, #32
    149e:	f3ef 8211 	mrs	r2, BASEPRI
    14a2:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    14a6:	4c11      	ldr	r4, [pc, #68]	; (14ec <_m16src_stop+0x54>)
    14a8:	7823      	ldrb	r3, [r4, #0]
    14aa:	b923      	cbnz	r3, 14b6 <_m16src_stop+0x1e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    14ac:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EALREADY;
    14b0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    14b4:	bd10      	pop	{r4, pc}
	}

	if (--m16src_ref) {
    14b6:	3b01      	subs	r3, #1
    14b8:	b2db      	uxtb	r3, r3
    14ba:	7023      	strb	r3, [r4, #0]
    14bc:	b123      	cbz	r3, 14c8 <_m16src_stop+0x30>
    14be:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EBUSY;
    14c2:	f06f 000f 	mvn.w	r0, #15
    14c6:	bd10      	pop	{r4, pc}
	}

	if (m16src_grd) {
    14c8:	4b09      	ldr	r3, [pc, #36]	; (14f0 <_m16src_stop+0x58>)
    14ca:	7818      	ldrb	r0, [r3, #0]
    14cc:	2101      	movs	r1, #1
    14ce:	b128      	cbz	r0, 14dc <_m16src_stop+0x44>
		m16src_ref++;
    14d0:	7021      	strb	r1, [r4, #0]
    14d2:	f382 8811 	msr	BASEPRI, r2
		irq_unlock(imask);
		return -EAGAIN;
    14d6:	f06f 000a 	mvn.w	r0, #10
    14da:	bd10      	pop	{r4, pc}
	}

	m16src_grd = 1;
    14dc:	7019      	strb	r1, [r3, #0]
    14de:	f382 8811 	msr	BASEPRI, r2

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    14e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    14e6:	6051      	str	r1, [r2, #4]

	/* release resource guard */
	m16src_grd = 0;
    14e8:	7018      	strb	r0, [r3, #0]

	return 0;
}
    14ea:	bd10      	pop	{r4, pc}
    14ec:	20000012 	.word	0x20000012
    14f0:	20000011 	.word	0x20000011

000014f4 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    14f4:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    14f6:	2200      	movs	r2, #0
    14f8:	4610      	mov	r0, r2
    14fa:	2101      	movs	r1, #1
    14fc:	f7ff fc28 	bl	d50 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1500:	2000      	movs	r0, #0
    1502:	f7ff fbf3 	bl	cec <_arch_irq_enable>

	return 0;
}
    1506:	2000      	movs	r0, #0
    1508:	bd08      	pop	{r3, pc}
	...

0000150c <_m16src_start>:
{
    150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    150e:	f04f 0220 	mov.w	r2, #32
    1512:	f3ef 8311 	mrs	r3, BASEPRI
    1516:	f382 8811 	msr	BASEPRI, r2
	if (m16src_ref++) {
    151a:	4a25      	ldr	r2, [pc, #148]	; (15b0 <_m16src_start+0xa4>)
    151c:	7810      	ldrb	r0, [r2, #0]
    151e:	1c44      	adds	r4, r0, #1
    1520:	7014      	strb	r4, [r2, #0]
    1522:	b160      	cbz	r0, 153e <_m16src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1524:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    152c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return -EINPROGRESS;
    1530:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1534:	bf14      	ite	ne
    1536:	2000      	movne	r0, #0
    1538:	f06f 0043 	mvneq.w	r0, #67	; 0x43
}
    153c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (m16src_grd) {
    153e:	4d1d      	ldr	r5, [pc, #116]	; (15b4 <_m16src_start+0xa8>)
    1540:	782f      	ldrb	r7, [r5, #0]
    1542:	b12f      	cbz	r7, 1550 <_m16src_start+0x44>
		m16src_ref--;
    1544:	7010      	strb	r0, [r2, #0]
    1546:	f383 8811 	msr	BASEPRI, r3
		return -EAGAIN;
    154a:	f06f 000a 	mvn.w	r0, #10
    154e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m16src_grd = 1;
    1550:	2601      	movs	r6, #1
    1552:	702e      	strb	r6, [r5, #0]
    1554:	f383 8811 	msr	BASEPRI, r3
    1558:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	if (blocking) {
    155c:	b319      	cbz	r1, 15a6 <_m16src_start+0x9a>
		irq_disable(POWER_CLOCK_IRQn);
    155e:	4638      	mov	r0, r7
    1560:	f7ff fbd4 	bl	d0c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1564:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1568:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    156c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1570:	6026      	str	r6, [r4, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1572:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    1576:	b192      	cbz	r2, 159e <_m16src_start+0x92>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1578:	2200      	movs	r2, #0
    157a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    157e:	4a0e      	ldr	r2, [pc, #56]	; (15b8 <_m16src_start+0xac>)
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    1580:	f013 0f01 	tst.w	r3, #1
    1584:	f04f 0301 	mov.w	r3, #1
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    1588:	bf08      	it	eq
    158a:	f8c4 3308 	streq.w	r3, [r4, #776]	; 0x308
		irq_enable(POWER_CLOCK_IRQn);
    158e:	2000      	movs	r0, #0
    1590:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    1594:	f7ff fbaa 	bl	cec <_arch_irq_enable>
	m16src_grd = 0;
    1598:	2300      	movs	r3, #0
    159a:	702b      	strb	r3, [r5, #0]
    159c:	e7c4      	b.n	1528 <_m16src_start+0x1c>
			__WFE();
    159e:	bf20      	wfe
			__SEV();
    15a0:	bf40      	sev
			__WFE();
    15a2:	bf20      	wfe
    15a4:	e7e5      	b.n	1572 <_m16src_start+0x66>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    15a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    15aa:	6026      	str	r6, [r4, #0]
    15ac:	e7f4      	b.n	1598 <_m16src_start+0x8c>
    15ae:	bf00      	nop
    15b0:	20000012 	.word	0x20000012
    15b4:	20000011 	.word	0x20000011
    15b8:	e000e100 	.word	0xe000e100

000015bc <_k32src_start>:
{
    15bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15be:	4606      	mov	r6, r0
    15c0:	460c      	mov	r4, r1
	__asm__ volatile(
    15c2:	f04f 0220 	mov.w	r2, #32
    15c6:	f3ef 8311 	mrs	r3, BASEPRI
    15ca:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    15ce:	4a2c      	ldr	r2, [pc, #176]	; (1680 <_k32src_start+0xc4>)
    15d0:	7815      	ldrb	r5, [r2, #0]
    15d2:	b165      	cbz	r5, 15ee <_k32src_start+0x32>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    15d4:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    15d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15dc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
		return -EINPROGRESS;
    15e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
}
    15e4:	bf0c      	ite	eq
    15e6:	f06f 0043 	mvneq.w	r0, #67	; 0x43
    15ea:	2000      	movne	r0, #0
    15ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k32src_initialized = 1;
    15ee:	2701      	movs	r7, #1
    15f0:	7017      	strb	r7, [r2, #0]
    15f2:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    15f6:	4628      	mov	r0, r5
    15f8:	f7ff fb88 	bl	d0c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    15fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    1600:	2102      	movs	r1, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1602:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    1606:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    160a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    160e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    1612:	609f      	str	r7, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    1614:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    1618:	b371      	cbz	r1, 1678 <_k32src_start+0xbc>
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    161a:	0792      	lsls	r2, r2, #30
    161c:	4f19      	ldr	r7, [pc, #100]	; (1684 <_k32src_start+0xc8>)
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    161e:	bf58      	it	pl
    1620:	2202      	movpl	r2, #2
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    1622:	f04f 0100 	mov.w	r1, #0
    1626:	f04f 0501 	mov.w	r5, #1
    162a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	irq_enable(POWER_CLOCK_IRQn);
    162e:	f04f 0000 	mov.w	r0, #0
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    1632:	bf58      	it	pl
    1634:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
    1638:	f8c7 5180 	str.w	r5, [r7, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    163c:	f7ff fb56 	bl	cec <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
    1644:	2100      	movs	r1, #0
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    1646:	2218      	movs	r2, #24
    1648:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    164c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    1650:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    1654:	f014 0103 	ands.w	r1, r4, #3
    1658:	d1be      	bne.n	15d8 <_k32src_start+0x1c>
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    165a:	2010      	movs	r0, #16
    165c:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    1660:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1664:	4630      	mov	r0, r6
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1666:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    166a:	f7ff ff4f 	bl	150c <_m16src_start>
		if (!err) {
    166e:	2800      	cmp	r0, #0
    1670:	d1b2      	bne.n	15d8 <_k32src_start+0x1c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1672:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
    1676:	e7af      	b.n	15d8 <_k32src_start+0x1c>
		__WFE();
    1678:	bf20      	wfe
		__SEV();
    167a:	bf40      	sev
		__WFE();
    167c:	bf20      	wfe
    167e:	e7c9      	b.n	1614 <_k32src_start+0x58>
    1680:	20000010 	.word	0x20000010
    1684:	e000e100 	.word	0xe000e100

00001688 <_power_clock_isr>:
{
    1688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    168a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
    168e:	4605      	mov	r5, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    1690:	f8d3 e108 	ldr.w	lr, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    1694:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    1698:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    169c:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    16a0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    16a4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    16a8:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    16ac:	f002 0201 	and.w	r2, r2, #1
	if (pof) {
    16b0:	f1be 0f00 	cmp.w	lr, #0
    16b4:	d003      	beq.n	16be <_power_clock_isr+0x36>
		NRF_POWER->EVENTS_POFWARN = 0;
    16b6:	f04f 0e00 	mov.w	lr, #0
    16ba:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    16be:	b127      	cbz	r7, 16ca <_power_clock_isr+0x42>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    16c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16c4:	2700      	movs	r7, #0
    16c6:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    16ca:	b13a      	cbz	r2, 16dc <_power_clock_isr+0x54>
    16cc:	03e3      	lsls	r3, r4, #15
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    16ce:	bf41      	itttt	mi
    16d0:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
    16d4:	2201      	movmi	r2, #1
    16d6:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    16da:	611a      	strmi	r2, [r3, #16]
	if (lf) {
    16dc:	b120      	cbz	r0, 16e8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    16de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    16e2:	2200      	movs	r2, #0
    16e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    16e8:	b149      	cbz	r1, 16fe <_power_clock_isr+0x76>
		NRF_CLOCK->EVENTS_DONE = 0;
    16ea:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    16ee:	2100      	movs	r1, #0
    16f0:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    16f4:	4628      	mov	r0, r5
    16f6:	f7ff fecf 	bl	1498 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    16fa:	2301      	movs	r3, #1
    16fc:	6163      	str	r3, [r4, #20]
	if (ctto) {
    16fe:	b176      	cbz	r6, 171e <_power_clock_isr+0x96>
		NRF_CLOCK->EVENTS_CTTO = 0;
    1700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1704:	2100      	movs	r1, #0
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1706:	2401      	movs	r4, #1
		NRF_CLOCK->EVENTS_CTTO = 0;
    1708:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		err = _m16src_start(dev, false);
    170c:	4628      	mov	r0, r5
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    170e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    1712:	f7ff fefb 	bl	150c <_m16src_start>
		if (!err) {
    1716:	b910      	cbnz	r0, 171e <_power_clock_isr+0x96>
    1718:	4b01      	ldr	r3, [pc, #4]	; (1720 <_power_clock_isr+0x98>)
    171a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1720:	e000e100 	.word	0xe000e100

00001724 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1724:	6803      	ldr	r3, [r0, #0]
    1726:	689b      	ldr	r3, [r3, #8]
    1728:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
    172a:	6883      	ldr	r3, [r0, #8]
{
    172c:	b510      	push	{r4, lr}
		if ((data->gpiote_chan_mask & BIT(i)) &&
    172e:	68dc      	ldr	r4, [r3, #12]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1730:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1732:	fa24 f300 	lsr.w	r3, r4, r0
    1736:	07db      	lsls	r3, r3, #31
    1738:	d507      	bpl.n	174a <gpiote_find_channel+0x26>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    173a:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1742:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1746:	428b      	cmp	r3, r1
    1748:	d004      	beq.n	1754 <gpiote_find_channel+0x30>
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    174a:	3001      	adds	r0, #1
    174c:	2808      	cmp	r0, #8
    174e:	d1f0      	bne.n	1732 <gpiote_find_channel+0xe>
			return i;
		}
	}

	return -ENODEV;
    1750:	f06f 0012 	mvn.w	r0, #18
}
    1754:	bd10      	pop	{r4, pc}

00001756 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1756:	6800      	ldr	r0, [r0, #0]
    1758:	6880      	ldr	r0, [r0, #8]
    175a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    175c:	b941      	cbnz	r1, 1770 <gpio_nrf5_read+0x1a>
		*value = (gpio->IN >> pin) & 0x1;
    175e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1762:	fa21 f202 	lsr.w	r2, r1, r2
    1766:	f002 0201 	and.w	r2, r2, #1
	} else {
		*value = gpio->IN;
    176a:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    176c:	2000      	movs	r0, #0
    176e:	4770      	bx	lr
		*value = gpio->IN;
    1770:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1774:	e7f9      	b.n	176a <gpio_nrf5_read+0x14>

00001776 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1776:	6800      	ldr	r0, [r0, #0]
    1778:	6880      	ldr	r0, [r0, #8]
    177a:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    177c:	b949      	cbnz	r1, 1792 <gpio_nrf5_write+0x1c>
    177e:	2101      	movs	r1, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
    1780:	4091      	lsls	r1, r2
		if (value) { /* 1 */
    1782:	b11b      	cbz	r3, 178c <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    1784:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
		}
	} else {
		gpio->OUT = value;
	}
	return 0;
}
    1788:	2000      	movs	r0, #0
    178a:	4770      	bx	lr
			gpio->OUTCLR = BIT(pin);
    178c:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    1790:	e7fa      	b.n	1788 <gpio_nrf5_write+0x12>
		gpio->OUT = value;
    1792:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    1796:	e7f7      	b.n	1788 <gpio_nrf5_write+0x12>

00001798 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1798:	b510      	push	{r4, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    179a:	6883      	ldr	r3, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    179c:	b13a      	cbz	r2, 17ae <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    179e:	681a      	ldr	r2, [r3, #0]
    17a0:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
    17a2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
    17a4:	6019      	str	r1, [r3, #0]
	if (!list->tail) {
    17a6:	b902      	cbnz	r2, 17aa <gpio_nrf5_manage_callback+0x12>
		list->tail = list->head;
    17a8:	6059      	str	r1, [r3, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    17aa:	2000      	movs	r0, #0
    17ac:	bd10      	pop	{r4, pc}
    17ae:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    17b0:	2800      	cmp	r0, #0
    17b2:	d0fa      	beq.n	17aa <gpio_nrf5_manage_callback+0x12>
		if (test == node) {
    17b4:	4281      	cmp	r1, r0
    17b6:	d10e      	bne.n	17d6 <gpio_nrf5_manage_callback+0x3e>
    17b8:	685c      	ldr	r4, [r3, #4]
    17ba:	6808      	ldr	r0, [r1, #0]
	if (!prev_node) {
    17bc:	b932      	cbnz	r2, 17cc <gpio_nrf5_manage_callback+0x34>
		if (list->tail == node) {
    17be:	42a1      	cmp	r1, r4
		list->head = node->next;
    17c0:	6018      	str	r0, [r3, #0]
		if (list->tail == node) {
    17c2:	d100      	bne.n	17c6 <gpio_nrf5_manage_callback+0x2e>
			list->tail = list->head;
    17c4:	6058      	str	r0, [r3, #4]
	node->next = NULL;
    17c6:	2300      	movs	r3, #0
    17c8:	600b      	str	r3, [r1, #0]
    17ca:	e7ee      	b.n	17aa <gpio_nrf5_manage_callback+0x12>
		if (list->tail == node) {
    17cc:	42a1      	cmp	r1, r4
		prev_node->next = node->next;
    17ce:	6010      	str	r0, [r2, #0]
			list->tail = prev_node;
    17d0:	bf08      	it	eq
    17d2:	605a      	streq	r2, [r3, #4]
    17d4:	e7f7      	b.n	17c6 <gpio_nrf5_manage_callback+0x2e>
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    17d6:	4602      	mov	r2, r0
    17d8:	6800      	ldr	r0, [r0, #0]
    17da:	e7e9      	b.n	17b0 <gpio_nrf5_manage_callback+0x18>

000017dc <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    17dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17de:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    17e0:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    17e2:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    17e4:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    17e6:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    17e8:	6896      	ldr	r6, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    17ea:	b9a1      	cbnz	r1, 1816 <gpio_nrf5_enable_callback+0x3a>

		i = gpiote_find_channel(dev, pin);
    17ec:	4621      	mov	r1, r4
    17ee:	f7ff ff99 	bl	1724 <gpiote_find_channel>
		if (i < 0) {
    17f2:	2800      	cmp	r0, #0
    17f4:	db11      	blt.n	181a <gpio_nrf5_enable_callback+0x3e>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    17f6:	68ba      	ldr	r2, [r7, #8]
    17f8:	2301      	movs	r3, #1
    17fa:	fa03 f404 	lsl.w	r4, r3, r4
    17fe:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1800:	f100 0240 	add.w	r2, r0, #64	; 0x40
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1804:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables |= BIT(pin);
    1808:	60bc      	str	r4, [r7, #8]
		gpiote->EVENTS_IN[i] = 0;
    180a:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		gpiote->INTENSET = BIT(i);
    180e:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    1812:	4628      	mov	r0, r5
    1814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1816:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    181a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000181c <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    181e:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1820:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1822:	6886      	ldr	r6, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1824:	6892      	ldr	r2, [r2, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1826:	460d      	mov	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1828:	6897      	ldr	r7, [r2, #8]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    182a:	b989      	cbnz	r1, 1850 <gpio_nrf5_disable_callback+0x34>
		i = gpiote_find_channel(dev, pin);
    182c:	4621      	mov	r1, r4
    182e:	f7ff ff79 	bl	1724 <gpiote_find_channel>
		if (i < 0) {
    1832:	2800      	cmp	r0, #0
    1834:	db0e      	blt.n	1854 <gpio_nrf5_disable_callback+0x38>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    1836:	68b2      	ldr	r2, [r6, #8]
    1838:	2301      	movs	r3, #1
    183a:	fa03 f404 	lsl.w	r4, r3, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    183e:	fa03 f000 	lsl.w	r0, r3, r0
		data->pin_callback_enables &= ~(BIT(pin));
    1842:	ea22 0404 	bic.w	r4, r2, r4
    1846:	60b4      	str	r4, [r6, #8]
		gpiote->INTENCLR = BIT(i);
    1848:	f8c7 0308 	str.w	r0, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    184c:	4628      	mov	r0, r5
    184e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1850:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
    1854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001856 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    1856:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    1858:	2200      	movs	r2, #0
    185a:	2101      	movs	r1, #1
    185c:	2006      	movs	r0, #6
    185e:	f7ff fa77 	bl	d50 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1862:	2006      	movs	r0, #6
    1864:	f7ff fa42 	bl	cec <_arch_irq_enable>

	return 0;
}
    1868:	2000      	movs	r0, #0
    186a:	bd08      	pop	{r3, pc}

0000186c <gpio_nrf5_port_isr>:
{
    186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    186e:	6803      	ldr	r3, [r0, #0]
{
    1870:	4606      	mov	r6, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1872:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1874:	68b4      	ldr	r4, [r6, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1876:	6898      	ldr	r0, [r3, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1878:	2200      	movs	r2, #0
	u32_t enabled_int, int_status = 0;
    187a:	4613      	mov	r3, r2
			gpiote->EVENTS_IN[i] = 0;
    187c:	4615      	mov	r5, r2
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    187e:	2701      	movs	r7, #1
    1880:	eb00 0182 	add.w	r1, r0, r2, lsl #2
		if (gpiote->EVENTS_IN[i]) {
    1884:	f8d1 e100 	ldr.w	lr, [r1, #256]	; 0x100
    1888:	f1be 0f00 	cmp.w	lr, #0
    188c:	d008      	beq.n	18a0 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
    188e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1892:	f8d1 1510 	ldr.w	r1, [r1, #1296]	; 0x510
    1896:	f3c1 2104 	ubfx	r1, r1, #8, #5
    189a:	fa07 f101 	lsl.w	r1, r7, r1
    189e:	430b      	orrs	r3, r1
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    18a0:	3201      	adds	r2, #1
    18a2:	2a08      	cmp	r2, #8
    18a4:	d1ec      	bne.n	1880 <gpio_nrf5_port_isr+0x14>
	enabled_int = int_status & data->pin_callback_enables;
    18a6:	68a5      	ldr	r5, [r4, #8]
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    18a8:	2006      	movs	r0, #6
	enabled_int = int_status & data->pin_callback_enables;
    18aa:	401d      	ands	r5, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    18ac:	f7ff fa2e 	bl	d0c <_arch_irq_disable>
    18b0:	6824      	ldr	r4, [r4, #0]
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    18b2:	b924      	cbnz	r4, 18be <gpio_nrf5_port_isr+0x52>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    18b4:	2006      	movs	r0, #6
}
    18b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    18ba:	f7ff ba17 	b.w	cec <_arch_irq_enable>
		if (cb->pin_mask & pins) {
    18be:	68a3      	ldr	r3, [r4, #8]
    18c0:	421d      	tst	r5, r3
    18c2:	d0f5      	beq.n	18b0 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    18c4:	6863      	ldr	r3, [r4, #4]
    18c6:	462a      	mov	r2, r5
    18c8:	4621      	mov	r1, r4
    18ca:	4630      	mov	r0, r6
    18cc:	4798      	blx	r3
    18ce:	e7ef      	b.n	18b0 <gpio_nrf5_port_isr+0x44>

000018d0 <gpio_nrf5_config>:
{
    18d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    18d4:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18d6:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    18d8:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18da:	6892      	ldr	r2, [r2, #8]
{
    18dc:	4680      	mov	r8, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    18de:	6895      	ldr	r5, [r2, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    18e0:	6810      	ldr	r0, [r2, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    18e2:	b119      	cbz	r1, 18ec <gpio_nrf5_config+0x1c>
		return -ENOTSUP;
    18e4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    18e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    18ec:	f403 7240 	and.w	r2, r3, #768	; 0x300
    18f0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    18f4:	f3c3 3101 	ubfx	r1, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    18f8:	f3c3 3981 	ubfx	r9, r3, #14, #2
		unsigned int sense = (flags & GPIO_PIN_CNF_SENSE_Msk);
    18fc:	f403 3e40 	and.w	lr, r3, #196608	; 0x30000
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1900:	d056      	beq.n	19b0 <gpio_nrf5_config+0xe0>
		u8_t pull = GPIO_PULL_DISABLE;
    1902:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    1906:	bf0c      	ite	eq
    1908:	2204      	moveq	r2, #4
    190a:	2200      	movne	r2, #0
			sense = GPIO_SENSE_DISABLE;
    190c:	f5be 3f80 	cmp.w	lr, #65536	; 0x10000
    1910:	bf08      	it	eq
    1912:	f04f 0e00 	moveq.w	lr, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1916:	f013 0f01 	tst.w	r3, #1
    191a:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 19e4 <gpio_nrf5_config+0x114>
    191e:	ea4f 0181 	mov.w	r1, r1, lsl #2
    1922:	f504 76e0 	add.w	r6, r4, #448	; 0x1c0
    1926:	d04e      	beq.n	19c6 <gpio_nrf5_config+0xf6>
			if (pull == GPIO_PULL_UP) {
    1928:	2a0c      	cmp	r2, #12
    192a:	d143      	bne.n	19b4 <gpio_nrf5_config+0xe4>
				gpio->OUTSET = BIT(pin);
    192c:	f04f 0e01 	mov.w	lr, #1
    1930:	fa0e fe04 	lsl.w	lr, lr, r4
    1934:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
					      drive_strength[ds_low][ds_high] |
    1938:	4449      	add	r1, r9
					      GPIO_INPUT_DISCONNECT |
    193a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    193e:	f041 0103 	orr.w	r1, r1, #3
    1942:	430a      	orrs	r2, r1
			gpio->PIN_CNF[pin] = (sense |
    1944:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
	if (flags & GPIO_INT) {
    1948:	f013 0002 	ands.w	r0, r3, #2
    194c:	d047      	beq.n	19de <gpio_nrf5_config+0x10e>
		if (flags & GPIO_INT_EDGE) {
    194e:	0699      	lsls	r1, r3, #26
    1950:	d5c8      	bpl.n	18e4 <gpio_nrf5_config+0x14>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1952:	065a      	lsls	r2, r3, #25
    1954:	d43e      	bmi.n	19d4 <gpio_nrf5_config+0x104>
				config |= GPIOTE_CFG_POL_H2L;
    1956:	f013 0f04 	tst.w	r3, #4
    195a:	bf14      	ite	ne
    195c:	f44f 3680 	movne.w	r6, #65536	; 0x10000
    1960:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1964:	68f8      	ldr	r0, [r7, #12]
    1966:	f7fe fc97 	bl	298 <__popcountsi2>
    196a:	2808      	cmp	r0, #8
    196c:	d035      	beq.n	19da <gpio_nrf5_config+0x10a>
		int i = gpiote_find_channel(dev, pin);
    196e:	4621      	mov	r1, r4
    1970:	4640      	mov	r0, r8
    1972:	f7ff fed7 	bl	1724 <gpiote_find_channel>
		if (i < 0) {
    1976:	2800      	cmp	r0, #0
    1978:	68fb      	ldr	r3, [r7, #12]
    197a:	da08      	bge.n	198e <gpio_nrf5_config+0xbe>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    197c:	43da      	mvns	r2, r3
    197e:	fa92 f0a2 	rbit	r0, r2
    1982:	2a00      	cmp	r2, #0
    1984:	fab0 f080 	clz	r0, r0
    1988:	bf08      	it	eq
    198a:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
		config |= GPIOTE_CFG_PIN(pin);
    198e:	0224      	lsls	r4, r4, #8
		data->gpiote_chan_mask |= BIT(i);
    1990:	2201      	movs	r2, #1
		config |= GPIOTE_CFG_PIN(pin);
    1992:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		data->gpiote_chan_mask |= BIT(i);
    1996:	4082      	lsls	r2, r0
		config |= GPIOTE_CFG_PIN(pin);
    1998:	f044 0401 	orr.w	r4, r4, #1
		gpiote->CONFIG[i] = config;
    199c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		data->gpiote_chan_mask |= BIT(i);
    19a0:	4313      	orrs	r3, r2
		config |= GPIOTE_CFG_PIN(pin);
    19a2:	4334      	orrs	r4, r6
		data->gpiote_chan_mask |= BIT(i);
    19a4:	60fb      	str	r3, [r7, #12]
		gpiote->CONFIG[i] = config;
    19a6:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	return 0;
    19aa:	2000      	movs	r0, #0
    19ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pull = GPIO_PULL_UP;
    19b0:	220c      	movs	r2, #12
    19b2:	e7ab      	b.n	190c <gpio_nrf5_config+0x3c>
			} else if (pull == GPIO_PULL_DOWN) {
    19b4:	2a04      	cmp	r2, #4
				gpio->OUTCLR = BIT(pin);
    19b6:	bf02      	ittt	eq
    19b8:	f04f 0e01 	moveq.w	lr, #1
    19bc:	fa0e fe04 	lsleq.w	lr, lr, r4
    19c0:	f8c0 e50c 	streq.w	lr, [r0, #1292]	; 0x50c
    19c4:	e7b8      	b.n	1938 <gpio_nrf5_config+0x68>
					      drive_strength[ds_low][ds_high] |
    19c6:	4449      	add	r1, r9
    19c8:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    19cc:	430a      	orrs	r2, r1
    19ce:	ea42 020e 	orr.w	r2, r2, lr
    19d2:	e7b7      	b.n	1944 <gpio_nrf5_config+0x74>
				config |= GPIOTE_CFG_POL_TOGG;
    19d4:	f44f 3640 	mov.w	r6, #196608	; 0x30000
    19d8:	e7c4      	b.n	1964 <gpio_nrf5_config+0x94>
			return -EIO;
    19da:	f06f 0004 	mvn.w	r0, #4
}
    19de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    19e2:	bf00      	nop
    19e4:	0000b788 	.word	0x0000b788

000019e8 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    19e8:	6803      	ldr	r3, [r0, #0]
    19ea:	689b      	ldr	r3, [r3, #8]
    19ec:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    19ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    19f2:	b132      	cbz	r2, 1a02 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    19f4:	2000      	movs	r0, #0
    19f6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    19fa:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    19fe:	700b      	strb	r3, [r1, #0]

	return 0;
    1a00:	4770      	bx	lr
		return -1;
    1a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1a06:	4770      	bx	lr

00001a08 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a08:	6803      	ldr	r3, [r0, #0]
    1a0a:	689b      	ldr	r3, [r3, #8]
    1a0c:	681b      	ldr	r3, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1a0e:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1a12:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
    1a16:	2a00      	cmp	r2, #0
    1a18:	d0fb      	beq.n	1a12 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    1a1a:	2200      	movs	r2, #0
    1a1c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
    1a20:	4608      	mov	r0, r1
    1a22:	4770      	bx	lr

00001a24 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a24:	6803      	ldr	r3, [r0, #0]
    1a26:	689b      	ldr	r3, [r3, #8]
    1a28:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    1a2a:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
    1a2e:	b118      	cbz	r0, 1a38 <uart_nrf5_err_check+0x14>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1a30:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1a34:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    1a38:	f000 000f 	and.w	r0, r0, #15
    1a3c:	4770      	bx	lr
	...

00001a40 <uart_nrf5_init>:
{
    1a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a42:	6803      	ldr	r3, [r0, #0]
    1a44:	689b      	ldr	r3, [r3, #8]
{
    1a46:	4605      	mov	r5, r0
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1a48:	4818      	ldr	r0, [pc, #96]	; (1aac <uart_nrf5_init+0x6c>)
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a4a:	681c      	ldr	r4, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    1a4c:	f008 fa28 	bl	9ea0 <device_get_binding>
static inline int _impl_gpio_config(struct device *port, int access_op,
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, access_op, pin, flags);
    1a50:	6843      	ldr	r3, [r0, #4]
    1a52:	4606      	mov	r6, r0
    1a54:	681f      	ldr	r7, [r3, #0]
    1a56:	2206      	movs	r2, #6
    1a58:	f240 1301 	movw	r3, #257	; 0x101
    1a5c:	2100      	movs	r1, #0
    1a5e:	47b8      	blx	r7
    1a60:	6873      	ldr	r3, [r6, #4]
    1a62:	681f      	ldr	r7, [r3, #0]
    1a64:	2300      	movs	r3, #0
    1a66:	4619      	mov	r1, r3
    1a68:	2208      	movs	r2, #8
    1a6a:	4630      	mov	r0, r6
    1a6c:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    1a6e:	2306      	movs	r3, #6
    1a70:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    1a74:	2308      	movs	r3, #8
    1a76:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    1a7a:	68ab      	ldr	r3, [r5, #8]
    1a7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    1a80:	601a      	str	r2, [r3, #0]
	volatile struct _uart *uart = UART_STRUCT(dev);
    1a82:	682b      	ldr	r3, [r5, #0]
    1a84:	689b      	ldr	r3, [r3, #8]
    1a86:	681b      	ldr	r3, [r3, #0]
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1a88:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
    1a8c:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    1a90:	2304      	movs	r3, #4
    1a92:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1a96:	2000      	movs	r0, #0
	uart->TASKS_STARTTX = 1;
    1a98:	2301      	movs	r3, #1
	uart->EVENTS_TXDRDY = 0;
    1a9a:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1a9e:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1aa2:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
    1aa4:	6023      	str	r3, [r4, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1aa6:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <uart_nrf5_init+0x70>)
    1aa8:	606b      	str	r3, [r5, #4]
}
    1aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aac:	0000b7f0 	.word	0x0000b7f0
    1ab0:	0000b800 	.word	0x0000b800

00001ab4 <get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static inline u8_t get(struct rand *rng, u8_t octets, u8_t *rand)
{
    1ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u8_t first, last, avail, remaining, *d, *s;

	__ASSERT_NO_MSG(rng);

	first = rng->first;
    1ab8:	7883      	ldrb	r3, [r0, #2]
	last = rng->last;
    1aba:	78c4      	ldrb	r4, [r0, #3]

	d = &rand[octets];
	s = &rng->rand[first];
    1abc:	1d1e      	adds	r6, r3, #4

	if (first <= last) {
    1abe:	42a3      	cmp	r3, r4
	d = &rand[octets];
    1ac0:	440a      	add	r2, r1
	s = &rng->rand[first];
    1ac2:	4406      	add	r6, r0
	if (first <= last) {
    1ac4:	d81f      	bhi.n	1b06 <get+0x52>
		/* copy octets from contiguous memory */
		avail = last - first;
    1ac6:	1ae4      	subs	r4, r4, r3
    1ac8:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    1aca:	42a1      	cmp	r1, r4
			remaining = avail - octets;
    1acc:	bf3e      	ittt	cc
    1ace:	1a64      	subcc	r4, r4, r1
    1ad0:	b2e7      	uxtbcc	r7, r4
    1ad2:	460c      	movcc	r4, r1
			avail = octets;
		} else {
			remaining = 0;
		}

		first += avail;
    1ad4:	4423      	add	r3, r4
		octets -= avail;
    1ad6:	eba1 0104 	sub.w	r1, r1, r4
			remaining = 0;
    1ada:	bf28      	it	cs
    1adc:	2700      	movcs	r7, #0
		first += avail;
    1ade:	b2db      	uxtb	r3, r3
		octets -= avail;
    1ae0:	b2c9      	uxtb	r1, r1
    1ae2:	4434      	add	r4, r6

		while (avail--) {
    1ae4:	42a6      	cmp	r6, r4
    1ae6:	d109      	bne.n	1afc <get+0x48>
			while (last--) {
				*(--d) = *s++;
			}
		}

		rng->first = first;
    1ae8:	7083      	strb	r3, [r0, #2]
	}

	if (remaining < rng->threshold) {
    1aea:	7843      	ldrb	r3, [r0, #1]
    1aec:	42bb      	cmp	r3, r7
		NRF_RNG->TASKS_START = 1;
    1aee:	bf82      	ittt	hi
    1af0:	4b20      	ldrhi	r3, [pc, #128]	; (1b74 <get+0xc0>)
    1af2:	2201      	movhi	r2, #1
    1af4:	601a      	strhi	r2, [r3, #0]
		NRF_RNG_regw_sideeffects();
#endif
	}

	return octets;
}
    1af6:	4608      	mov	r0, r1
    1af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*(--d) = *s++;
    1afc:	f816 5b01 	ldrb.w	r5, [r6], #1
    1b00:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1b04:	e7ee      	b.n	1ae4 <get+0x30>
		avail = rng->count - first;
    1b06:	7805      	ldrb	r5, [r0, #0]
    1b08:	1aed      	subs	r5, r5, r3
    1b0a:	b2ed      	uxtb	r5, r5
		if (octets < avail) {
    1b0c:	42a9      	cmp	r1, r5
			remaining = avail + last - octets;
    1b0e:	bf3f      	itttt	cc
    1b10:	1a67      	subcc	r7, r4, r1
    1b12:	19ed      	addcc	r5, r5, r7
    1b14:	b2ef      	uxtbcc	r7, r5
    1b16:	460d      	movcc	r5, r1
			first += avail;
    1b18:	bf38      	it	cc
    1b1a:	185b      	addcc	r3, r3, r1
		octets -= avail;
    1b1c:	eba1 0105 	sub.w	r1, r1, r5
			first += avail;
    1b20:	bf32      	itee	cc
    1b22:	b2db      	uxtbcc	r3, r3
    1b24:	4627      	movcs	r7, r4
			first = 0;
    1b26:	2300      	movcs	r3, #0
		octets -= avail;
    1b28:	b2c9      	uxtb	r1, r1
    1b2a:	4696      	mov	lr, r2
    1b2c:	eb06 0c05 	add.w	ip, r6, r5
		while (avail--) {
    1b30:	4566      	cmp	r6, ip
    1b32:	d119      	bne.n	1b68 <get+0xb4>
    1b34:	1b52      	subs	r2, r2, r5
		if (octets && last) {
    1b36:	2900      	cmp	r1, #0
    1b38:	d0d6      	beq.n	1ae8 <get+0x34>
    1b3a:	2c00      	cmp	r4, #0
    1b3c:	d0d4      	beq.n	1ae8 <get+0x34>
			if (octets < last) {
    1b3e:	428c      	cmp	r4, r1
    1b40:	bf8a      	itet	hi
    1b42:	460b      	movhi	r3, r1
    1b44:	4623      	movls	r3, r4
				remaining = last - octets;
    1b46:	1a64      	subhi	r4, r4, r1
			s = &rng->rand[0];
    1b48:	f100 0604 	add.w	r6, r0, #4
			octets -= last;
    1b4c:	eba1 0103 	sub.w	r1, r1, r3
				remaining = last - octets;
    1b50:	bf8c      	ite	hi
    1b52:	b2e7      	uxtbhi	r7, r4
				remaining = 0;
    1b54:	2700      	movls	r7, #0
			octets -= last;
    1b56:	b2c9      	uxtb	r1, r1
    1b58:	18f4      	adds	r4, r6, r3
			while (last--) {
    1b5a:	42a6      	cmp	r6, r4
    1b5c:	d0c4      	beq.n	1ae8 <get+0x34>
				*(--d) = *s++;
    1b5e:	f816 5b01 	ldrb.w	r5, [r6], #1
    1b62:	f802 5d01 	strb.w	r5, [r2, #-1]!
    1b66:	e7f8      	b.n	1b5a <get+0xa6>
			*(--d) = *s++;
    1b68:	f816 8b01 	ldrb.w	r8, [r6], #1
    1b6c:	f80e 8d01 	strb.w	r8, [lr, #-1]!
    1b70:	e7de      	b.n	1b30 <get+0x7c>
    1b72:	bf00      	nop
    1b74:	4000d000 	.word	0x4000d000

00001b78 <isr>:
#pragma GCC pop_options

static int isr(struct rand *rng, bool store)
{
    1b78:	b530      	push	{r4, r5, lr}
	u8_t last;

	if (!rng) {
    1b7a:	b1d0      	cbz	r0, 1bb2 <isr+0x3a>
		return -ENOBUFS;
	}

	last = rng->last + 1;
    1b7c:	78c2      	ldrb	r2, [r0, #3]
	if (last == rng->count) {
    1b7e:	7805      	ldrb	r5, [r0, #0]
		last = 0;
	}

	if (last == rng->first) {
    1b80:	7884      	ldrb	r4, [r0, #2]
	last = rng->last + 1;
    1b82:	1c53      	adds	r3, r2, #1
    1b84:	b2db      	uxtb	r3, r3
		last = 0;
    1b86:	42ab      	cmp	r3, r5
    1b88:	bf08      	it	eq
    1b8a:	2300      	moveq	r3, #0
	if (last == rng->first) {
    1b8c:	42a3      	cmp	r3, r4
    1b8e:	d010      	beq.n	1bb2 <isr+0x3a>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    1b90:	b161      	cbz	r1, 1bac <isr+0x34>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    1b92:	490a      	ldr	r1, [pc, #40]	; (1bbc <isr+0x44>)
    1b94:	4402      	add	r2, r0
    1b96:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    1b9a:	7111      	strb	r1, [r2, #4]
	rng->last = last;
    1b9c:	70c3      	strb	r3, [r0, #3]

	last = rng->last + 1;
    1b9e:	3301      	adds	r3, #1
    1ba0:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
		last = 0;
    1ba2:	429d      	cmp	r5, r3
    1ba4:	bf08      	it	eq
    1ba6:	2300      	moveq	r3, #0
	}

	if (last == rng->first) {
    1ba8:	42a3      	cmp	r3, r4
    1baa:	d005      	beq.n	1bb8 <isr+0x40>
		return 0;
	}

	return -EBUSY;
    1bac:	f06f 000f 	mvn.w	r0, #15
    1bb0:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
    1bb2:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1bb6:	bd30      	pop	{r4, r5, pc}
		return 0;
    1bb8:	2000      	movs	r0, #0
}
    1bba:	bd30      	pop	{r4, r5, pc}
    1bbc:	4000d000 	.word	0x4000d000

00001bc0 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
    1bc0:	b570      	push	{r4, r5, r6, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1bc2:	6884      	ldr	r4, [r0, #8]

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1bc4:	2201      	movs	r2, #1
    1bc6:	4611      	mov	r1, r2
    1bc8:	4620      	mov	r0, r4
    1bca:	f008 fd6d 	bl	a6a8 <_impl_k_sem_init>
    1bce:	f104 0018 	add.w	r0, r4, #24
    1bd2:	2201      	movs	r2, #1
    1bd4:	2100      	movs	r1, #0
    1bd6:	f008 fd67 	bl	a6a8 <_impl_k_sem_init>
	rng->threshold = threshold;
    1bda:	2304      	movs	r3, #4
    1bdc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    1be0:	230c      	movs	r3, #12
	rng->first = rng->last = 0;
    1be2:	2500      	movs	r5, #0
	rng->threshold = threshold;
    1be4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	rng->count = len;
    1be8:	2105      	movs	r1, #5
	init((struct rand *)dev_data->isr, RAND_ISR_LEN,
	     CONFIG_ENTROPY_NRF5_ISR_THRESHOLD);

	/* Enable or disable bias correction */
	if (IS_ENABLED(CONFIG_ENTROPY_NRF5_BIAS_CORRECTION)) {
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1bea:	4b11      	ldr	r3, [pc, #68]	; (1c30 <entropy_nrf5_init+0x70>)
	rng->count = len;
    1bec:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    1bf0:	260d      	movs	r6, #13
	rng->first = rng->last = 0;
    1bf2:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
    1bf6:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
	rng->count = len;
    1bfa:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
	rng->first = rng->last = 0;
    1bfe:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
    1c02:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
		NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
    1c06:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1c0a:	f042 0201 	orr.w	r2, r2, #1
    1c0e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	} else {
		NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
	}

	NRF_RNG->EVENTS_VALRDY = 0;
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1c12:	2201      	movs	r2, #1
	NRF_RNG->EVENTS_VALRDY = 0;
    1c14:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	NRF_RNG->TASKS_START = 1;
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RNG_regw_sideeffects();
#endif

	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1c18:	4630      	mov	r0, r6
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    1c1a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	NRF_RNG->TASKS_START = 1;
    1c1e:	601a      	str	r2, [r3, #0]
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, CONFIG_ENTROPY_NRF5_PRI, isr_rand,
    1c20:	462a      	mov	r2, r5
    1c22:	f7ff f895 	bl	d50 <_irq_priority_set>
		    DEVICE_GET(entropy_nrf5), 0);
	irq_enable(NRF5_IRQ_RNG_IRQn);
    1c26:	4630      	mov	r0, r6
    1c28:	f7ff f860 	bl	cec <_arch_irq_enable>

	return 0;
}
    1c2c:	4628      	mov	r0, r5
    1c2e:	bd70      	pop	{r4, r5, r6, pc}
    1c30:	4000d000 	.word	0x4000d000

00001c34 <isr_rand>:
{
    1c34:	b538      	push	{r3, r4, r5, lr}
	if (NRF_RNG->EVENTS_VALRDY) {
    1c36:	4b12      	ldr	r3, [pc, #72]	; (1c80 <isr_rand+0x4c>)
    1c38:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1c3c:	b1fb      	cbz	r3, 1c7e <isr_rand+0x4a>
		struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1c3e:	6885      	ldr	r5, [r0, #8]
		ret = isr((struct rand *)dev_data->isr, true);
    1c40:	2101      	movs	r1, #1
    1c42:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1c46:	f7ff ff97 	bl	1b78 <isr>
		if (ret != -EBUSY) {
    1c4a:	f110 0f10 	cmn.w	r0, #16
		ret = isr((struct rand *)dev_data->isr, true);
    1c4e:	4604      	mov	r4, r0
		if (ret != -EBUSY) {
    1c50:	d00d      	beq.n	1c6e <isr_rand+0x3a>
			ret = isr((struct rand *)dev_data->thr,
    1c52:	f110 0437 	adds.w	r4, r0, #55	; 0x37
    1c56:	bf14      	ite	ne
    1c58:	2100      	movne	r1, #0
    1c5a:	2101      	moveq	r1, #1
    1c5c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1c60:	f7ff ff8a 	bl	1b78 <isr>
    1c64:	4604      	mov	r4, r0

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1c66:	f105 0018 	add.w	r0, r5, #24
    1c6a:	f008 fd27 	bl	a6bc <_impl_k_sem_give>
		NRF_RNG->EVENTS_VALRDY = 0;
    1c6e:	4b04      	ldr	r3, [pc, #16]	; (1c80 <isr_rand+0x4c>)
    1c70:	2200      	movs	r2, #0
		if (ret != -EBUSY) {
    1c72:	3410      	adds	r4, #16
		NRF_RNG->EVENTS_VALRDY = 0;
    1c74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			NRF_RNG->TASKS_STOP = 1;
    1c78:	bf1c      	itt	ne
    1c7a:	2201      	movne	r2, #1
    1c7c:	605a      	strne	r2, [r3, #4]
    1c7e:	bd38      	pop	{r3, r4, r5, pc}
    1c80:	4000d000 	.word	0x4000d000

00001c84 <entropy_nrf5_get_entropy>:
{
    1c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct entropy_nrf5_dev_data *dev_data = DEV_DATA(device);
    1c88:	6885      	ldr	r5, [r0, #8]
{
    1c8a:	460f      	mov	r7, r1
    1c8c:	4614      	mov	r4, r2
				k_sem_take(&dev_data->sem_sync, K_FOREVER);
    1c8e:	f105 0818 	add.w	r8, r5, #24
	while (len) {
    1c92:	b914      	cbnz	r4, 1c9a <entropy_nrf5_get_entropy+0x16>
}
    1c94:	4620      	mov	r0, r4
    1c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1c9a:	2cff      	cmp	r4, #255	; 0xff
    1c9c:	4623      	mov	r3, r4
    1c9e:	bf28      	it	cs
    1ca0:	23ff      	movcs	r3, #255	; 0xff
		len -= len8;
    1ca2:	1ae4      	subs	r4, r4, r3
    1ca4:	b2de      	uxtb	r6, r3
    1ca6:	b2a4      	uxth	r4, r4
			len8 = get((struct rand *)dev_data->thr, len8, buf);
    1ca8:	f105 0930 	add.w	r9, r5, #48	; 0x30
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1cac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1cb0:	4628      	mov	r0, r5
    1cb2:	f008 fd63 	bl	a77c <_impl_k_sem_take>
    1cb6:	4631      	mov	r1, r6
    1cb8:	463a      	mov	r2, r7
    1cba:	4648      	mov	r0, r9
    1cbc:	f7ff fefa 	bl	1ab4 <get>
    1cc0:	4606      	mov	r6, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1cc2:	4628      	mov	r0, r5
    1cc4:	f008 fcfa 	bl	a6bc <_impl_k_sem_give>
			if (len8) {
    1cc8:	2e00      	cmp	r6, #0
    1cca:	d0e2      	beq.n	1c92 <entropy_nrf5_get_entropy+0xe>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1cd0:	4640      	mov	r0, r8
    1cd2:	f008 fd53 	bl	a77c <_impl_k_sem_take>
    1cd6:	e7e9      	b.n	1cac <entropy_nrf5_get_entropy+0x28>

00001cd8 <entropy_get_entropy_isr>:

u8_t entropy_get_entropy_isr(struct device *dev, u8_t *buf, u8_t len)
{
    1cd8:	4613      	mov	r3, r2
	ARG_UNUSED(dev);
	return get((struct rand *)entropy_nrf5_data.isr, len, buf);
    1cda:	4802      	ldr	r0, [pc, #8]	; (1ce4 <entropy_get_entropy_isr+0xc>)
    1cdc:	460a      	mov	r2, r1
    1cde:	4619      	mov	r1, r3
    1ce0:	f7ff bee8 	b.w	1ab4 <get>
    1ce4:	20000060 	.word	0x20000060

00001ce8 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1ce8:	4b08      	ldr	r3, [pc, #32]	; (1d0c <rtc_compare_set+0x24>)
    1cea:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1cee:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1cf2:	1ac0      	subs	r0, r0, r3
    1cf4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cf8:	4b05      	ldr	r3, [pc, #20]	; (1d10 <rtc_compare_set+0x28>)
    1cfa:	3802      	subs	r0, #2
    1cfc:	4298      	cmp	r0, r3
    1cfe:	bf82      	ittt	hi
    1d00:	4b04      	ldrhi	r3, [pc, #16]	; (1d14 <rtc_compare_set+0x2c>)
    1d02:	f44f 3200 	movhi.w	r2, #131072	; 0x20000
    1d06:	f8c3 2100 	strhi.w	r2, [r3, #256]	; 0x100
    1d0a:	4770      	bx	lr
    1d0c:	40011000 	.word	0x40011000
    1d10:	007ffffd 	.word	0x007ffffd
    1d14:	e000e100 	.word	0xe000e100

00001d18 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1d18:	b510      	push	{r4, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1d1a:	4b12      	ldr	r3, [pc, #72]	; (1d64 <rtc_announce_set_next+0x4c>)

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1d1c:	4c12      	ldr	r4, [pc, #72]	; (1d68 <rtc_announce_set_next+0x50>)
	rtc_now = RTC_COUNTER;
    1d1e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1d22:	6822      	ldr	r2, [r4, #0]
    1d24:	1a80      	subs	r0, r0, r2
    1d26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1d2a:	f5b0 7fa3 	cmp.w	r0, #326	; 0x146
    1d2e:	d911      	bls.n	1d54 <rtc_announce_set_next+0x3c>
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;

		if (sys_elapsed > expected_sys_ticks) {
    1d30:	490e      	ldr	r1, [pc, #56]	; (1d6c <rtc_announce_set_next+0x54>)
    1d32:	6809      	ldr	r1, [r1, #0]
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1d34:	f240 1347 	movw	r3, #327	; 0x147
    1d38:	fbb0 f0f3 	udiv	r0, r0, r3
    1d3c:	4288      	cmp	r0, r1
    1d3e:	bf28      	it	cs
    1d40:	4608      	movcs	r0, r1

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1d42:	fb03 2300 	mla	r3, r3, r0, r2
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1d46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1d4a:	6023      	str	r3, [r4, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1d4c:	4b08      	ldr	r3, [pc, #32]	; (1d70 <rtc_announce_set_next+0x58>)
    1d4e:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1d50:	f008 fd3c 	bl	a7cc <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1d54:	6820      	ldr	r0, [r4, #0]
}
    1d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1d5a:	f200 1047 	addw	r0, r0, #327	; 0x147
    1d5e:	f7ff bfc3 	b.w	1ce8 <rtc_compare_set>
    1d62:	bf00      	nop
    1d64:	40011000 	.word	0x40011000
    1d68:	20000078 	.word	0x20000078
    1d6c:	20000074 	.word	0x20000074
    1d70:	200061f4 	.word	0x200061f4

00001d74 <rtc1_nrf5_isr>:
 */
static void rtc1_nrf5_isr(void *arg)
{

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1d74:	4b02      	ldr	r3, [pc, #8]	; (1d80 <rtc1_nrf5_isr+0xc>)
    1d76:	2200      	movs	r2, #0
    1d78:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1d7c:	f7ff bfcc 	b.w	1d18 <rtc_announce_set_next>
    1d80:	40011000 	.word	0x40011000

00001d84 <_timer_idle_enter>:
	if ((sys_ticks < 0) ||
    1d84:	f246 4335 	movw	r3, #25653	; 0x6435
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1d88:	4298      	cmp	r0, r3
    1d8a:	bf28      	it	cs
    1d8c:	4618      	movcs	r0, r3
	expected_sys_ticks = sys_ticks;
    1d8e:	4b05      	ldr	r3, [pc, #20]	; (1da4 <_timer_idle_enter+0x20>)
    1d90:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1d92:	4b05      	ldr	r3, [pc, #20]	; (1da8 <_timer_idle_enter+0x24>)
    1d94:	681b      	ldr	r3, [r3, #0]
    1d96:	f240 1247 	movw	r2, #327	; 0x147
    1d9a:	fb02 3000 	mla	r0, r2, r0, r3
    1d9e:	f7ff bfa3 	b.w	1ce8 <rtc_compare_set>
    1da2:	bf00      	nop
    1da4:	20000074 	.word	0x20000074
    1da8:	20000078 	.word	0x20000078

00001dac <_timer_idle_exit>:
{
    1dac:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1dae:	4b07      	ldr	r3, [pc, #28]	; (1dcc <_timer_idle_exit+0x20>)
    1db0:	2200      	movs	r2, #0
    1db2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1db6:	4b06      	ldr	r3, [pc, #24]	; (1dd0 <_timer_idle_exit+0x24>)
    1db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1dbc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1dc0:	f7ff ffaa 	bl	1d18 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1dc4:	4b03      	ldr	r3, [pc, #12]	; (1dd4 <_timer_idle_exit+0x28>)
    1dc6:	2201      	movs	r2, #1
    1dc8:	601a      	str	r2, [r3, #0]
    1dca:	bd08      	pop	{r3, pc}
    1dcc:	40011000 	.word	0x40011000
    1dd0:	e000e100 	.word	0xe000e100
    1dd4:	20000074 	.word	0x20000074

00001dd8 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1dd8:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1dda:	4818      	ldr	r0, [pc, #96]	; (1e3c <_sys_clock_driver_init+0x64>)
    1ddc:	f008 f860 	bl	9ea0 <device_get_binding>
	if (!clock) {
    1de0:	b348      	cbz	r0, 1e36 <_sys_clock_driver_init+0x5e>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    1de2:	6843      	ldr	r3, [r0, #4]
#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1de4:	4d16      	ldr	r5, [pc, #88]	; (1e40 <_sys_clock_driver_init+0x68>)
    1de6:	681b      	ldr	r3, [r3, #0]
    1de8:	2101      	movs	r1, #1
    1dea:	4798      	blx	r3
	rtc_past = 0;
    1dec:	4b15      	ldr	r3, [pc, #84]	; (1e44 <_sys_clock_driver_init+0x6c>)
    1dee:	2400      	movs	r4, #0
    1df0:	601c      	str	r4, [r3, #0]
	expected_sys_ticks = 1;
    1df2:	4b15      	ldr	r3, [pc, #84]	; (1e48 <_sys_clock_driver_init+0x70>)
    1df4:	2601      	movs	r6, #1
    1df6:	601e      	str	r6, [r3, #0]
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1df8:	f240 1347 	movw	r3, #327	; 0x147
	SYS_CLOCK_RTC->PRESCALER = 0;
    1dfc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1e00:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e08:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1e0c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1e10:	4b0e      	ldr	r3, [pc, #56]	; (1e4c <_sys_clock_driver_init+0x74>)

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1e12:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1e1e:	4631      	mov	r1, r6
    1e20:	4622      	mov	r2, r4
    1e22:	2011      	movs	r0, #17
    1e24:	f7fe ff94 	bl	d50 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1e28:	2011      	movs	r0, #17
    1e2a:	f7fe ff5f 	bl	cec <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1e2e:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;

	return 0;
    1e30:	4620      	mov	r0, r4
	SYS_CLOCK_RTC->TASKS_START = 1;
    1e32:	602e      	str	r6, [r5, #0]
	return 0;
    1e34:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1e3a:	bd70      	pop	{r4, r5, r6, pc}
    1e3c:	0000b770 	.word	0x0000b770
    1e40:	40011000 	.word	0x40011000
    1e44:	20000078 	.word	0x20000078
    1e48:	20000074 	.word	0x20000074
    1e4c:	e000e100 	.word	0xe000e100

00001e50 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1e50:	b530      	push	{r4, r5, lr}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1e52:	4a0b      	ldr	r2, [pc, #44]	; (1e80 <_timer_cycle_get_32+0x30>)
	/* Discard value of  RTC_COUNTER read at LFCLK transition */
	do {
		sys_clock_tick_count = _sys_clock_tick_count;
    1e54:	480b      	ldr	r0, [pc, #44]	; (1e84 <_timer_cycle_get_32+0x34>)
	rtc_now = RTC_COUNTER;
    1e56:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
		sys_clock_tick_count = _sys_clock_tick_count;
    1e5a:	e9d0 4500 	ldrd	r4, r5, [r0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1e5e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1e62:	4299      	cmp	r1, r3
    1e64:	d10a      	bne.n	1e7c <_timer_cycle_get_32+0x2c>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1e66:	4a08      	ldr	r2, [pc, #32]	; (1e88 <_timer_cycle_get_32+0x38>)
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1e68:	f240 1347 	movw	r3, #327	; 0x147
    1e6c:	fb03 1314 	mls	r3, r3, r4, r1
	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1e70:	6810      	ldr	r0, [r2, #0]
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1e72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	       elapsed_cycles;
}
    1e76:	fb00 3004 	mla	r0, r0, r4, r3
    1e7a:	bd30      	pop	{r4, r5, pc}
    1e7c:	4619      	mov	r1, r3
    1e7e:	e7ec      	b.n	1e5a <_timer_cycle_get_32+0xa>
    1e80:	40011000 	.word	0x40011000
    1e84:	20003578 	.word	0x20003578
    1e88:	200061f8 	.word	0x200061f8

00001e8c <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1e8c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    1e8e:	f3bf 8f5b 	dmb	ish
    1e92:	e850 3f00 	ldrex	r3, [r0]
    1e96:	ea43 0201 	orr.w	r2, r3, r1
    1e9a:	e840 2e00 	strex	lr, r2, [r0]
    1e9e:	f1be 0f00 	cmp.w	lr, #0
    1ea2:	d1f6      	bne.n	1e92 <atomic_or+0x6>
    1ea4:	f3bf 8f5b 	dmb	ish
    1ea8:	4618      	mov	r0, r3
    1eaa:	f85d fb04 	ldr.w	pc, [sp], #4

00001eae <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    1eae:	b500      	push	{lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    1eb0:	f3bf 8f5b 	dmb	ish
    1eb4:	e850 3f00 	ldrex	r3, [r0]
    1eb8:	ea03 0201 	and.w	r2, r3, r1
    1ebc:	e840 2e00 	strex	lr, r2, [r0]
    1ec0:	f1be 0f00 	cmp.w	lr, #0
    1ec4:	d1f6      	bne.n	1eb4 <atomic_and+0x6>
    1ec6:	f3bf 8f5b 	dmb	ish
    1eca:	4618      	mov	r0, r3
    1ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00001ed0 <hci_cmd_done.isra.9>:

	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1ed0:	b570      	push	{r4, r5, r6, lr}
    1ed2:	4606      	mov	r6, r0
{
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ed4:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(u16_t opcode, u8_t status, struct net_buf *buf)
    1ed6:	460d      	mov	r5, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    1ed8:	f007 feb4 	bl	9c44 <net_buf_pool_get>
    1edc:	4b0e      	ldr	r3, [pc, #56]	; (1f18 <hci_cmd_done.isra.9+0x48>)
    1ede:	4283      	cmp	r3, r0
    1ee0:	d119      	bne.n	1f16 <hci_cmd_done.isra.9+0x46>
			opcode, buf->pool_id, net_buf_pool_get(buf->pool_id),
			&hci_cmd_pool);
		return;
	}

	if (cmd(buf)->opcode != opcode) {
    1ee2:	4628      	mov	r0, r5
    1ee4:	f007 feb4 	bl	9c50 <net_buf_id>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
			opcode, cmd(buf)->opcode);
	}

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
    1ee8:	4628      	mov	r0, r5
    1eea:	f007 feb1 	bl	9c50 <net_buf_id>
    1eee:	4c0b      	ldr	r4, [pc, #44]	; (1f1c <hci_cmd_done.isra.9+0x4c>)
    1ef0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    1ef4:	6843      	ldr	r3, [r0, #4]
    1ef6:	b173      	cbz	r3, 1f16 <hci_cmd_done.isra.9+0x46>
		cmd(buf)->status = status;
    1ef8:	4628      	mov	r0, r5
    1efa:	f007 fea9 	bl	9c50 <net_buf_id>
    1efe:	f804 6030 	strb.w	r6, [r4, r0, lsl #3]
		k_sem_give(cmd(buf)->sync);
    1f02:	4628      	mov	r0, r5
    1f04:	f007 fea4 	bl	9c50 <net_buf_id>
    1f08:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
	}
}
    1f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1f10:	6840      	ldr	r0, [r0, #4]
    1f12:	f008 bbd3 	b.w	a6bc <_impl_k_sem_give>
    1f16:	bd70      	pop	{r4, r5, r6, pc}
    1f18:	200062ec 	.word	0x200062ec
    1f1c:	20000080 	.word	0x20000080

00001f20 <atomic_test_bit.constprop.25>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f20:	4b07      	ldr	r3, [pc, #28]	; (1f40 <atomic_test_bit.constprop.25+0x20>)
    1f22:	f3bf 8f5b 	dmb	ish
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1f26:	0942      	lsrs	r2, r0, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f28:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1f2c:	f000 001f 	and.w	r0, r0, #31
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    1f32:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1f36:	fa43 f000 	asr.w	r0, r3, r0
}
    1f3a:	f000 0001 	and.w	r0, r0, #1
    1f3e:	4770      	bx	lr
    1f40:	20005fe0 	.word	0x20005fe0

00001f44 <bt_hci_cmd_create>:
{
    1f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1f48:	4680      	mov	r8, r0
    1f4a:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1f4c:	4813      	ldr	r0, [pc, #76]	; (1f9c <bt_hci_cmd_create+0x58>)
	cmd(buf)->opcode = opcode;
    1f4e:	4d14      	ldr	r5, [pc, #80]	; (1fa0 <bt_hci_cmd_create+0x5c>)
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1f54:	f007 ff0a 	bl	9d6c <net_buf_alloc_fixed>
    1f58:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    1f5a:	f100 0608 	add.w	r6, r0, #8
    1f5e:	2100      	movs	r1, #0
    1f60:	4630      	mov	r0, r6
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(u8_t *)net_buf_user_data(buf) = type;
    1f62:	2700      	movs	r7, #0
    1f64:	f007 ff21 	bl	9daa <net_buf_simple_reserve>
    1f68:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    1f6a:	4620      	mov	r0, r4
    1f6c:	f007 fe70 	bl	9c50 <net_buf_id>
    1f70:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1f74:	f8a0 8002 	strh.w	r8, [r0, #2]
	cmd(buf)->sync = NULL;
    1f78:	4620      	mov	r0, r4
    1f7a:	f007 fe69 	bl	9c50 <net_buf_id>
    1f7e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f82:	2103      	movs	r1, #3
	cmd(buf)->sync = NULL;
    1f84:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    1f86:	4630      	mov	r0, r6
    1f88:	f007 ff52 	bl	9e30 <net_buf_simple_add>
	hdr->param_len = param_len;
    1f8c:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    1f90:	f8a0 8000 	strh.w	r8, [r0]
}
    1f94:	4620      	mov	r0, r4
    1f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f9a:	bf00      	nop
    1f9c:	200062ec 	.word	0x200062ec
    1fa0:	20000080 	.word	0x20000080

00001fa4 <bt_hci_cmd_send_sync>:
{
    1fa4:	b570      	push	{r4, r5, r6, lr}
    1fa6:	4615      	mov	r5, r2
    1fa8:	b086      	sub	sp, #24
	if (!buf) {
    1faa:	460c      	mov	r4, r1
    1fac:	b919      	cbnz	r1, 1fb6 <bt_hci_cmd_send_sync+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    1fae:	f7ff ffc9 	bl	1f44 <bt_hci_cmd_create>
		if (!buf) {
    1fb2:	4604      	mov	r4, r0
    1fb4:	b368      	cbz	r0, 2012 <bt_hci_cmd_send_sync+0x6e>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    1fb6:	2201      	movs	r2, #1
    1fb8:	2100      	movs	r1, #0
    1fba:	4668      	mov	r0, sp
    1fbc:	f008 fb74 	bl	a6a8 <_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1fc0:	4620      	mov	r0, r4
    1fc2:	f007 fe45 	bl	9c50 <net_buf_id>
    1fc6:	4e14      	ldr	r6, [pc, #80]	; (2018 <bt_hci_cmd_send_sync+0x74>)
    1fc8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1fcc:	f8c0 d004 	str.w	sp, [r0, #4]
	net_buf_ref(buf);
    1fd0:	4620      	mov	r0, r4
    1fd2:	f007 ff29 	bl	9e28 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1fd6:	4621      	mov	r1, r4
    1fd8:	4810      	ldr	r0, [pc, #64]	; (201c <bt_hci_cmd_send_sync+0x78>)
    1fda:	f007 feea 	bl	9db2 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1fde:	f242 7110 	movw	r1, #10000	; 0x2710
    1fe2:	4668      	mov	r0, sp
    1fe4:	f008 fbca 	bl	a77c <_impl_k_sem_take>
	if (cmd(buf)->status) {
    1fe8:	4620      	mov	r0, r4
    1fea:	f007 fe31 	bl	9c50 <net_buf_id>
    1fee:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
    1ff2:	b130      	cbz	r0, 2002 <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    1ff4:	4620      	mov	r0, r4
    1ff6:	f007 fee9 	bl	9dcc <net_buf_unref>
		err = -EIO;
    1ffa:	f06f 0004 	mvn.w	r0, #4
}
    1ffe:	b006      	add	sp, #24
    2000:	bd70      	pop	{r4, r5, r6, pc}
		if (rsp) {
    2002:	b10d      	cbz	r5, 2008 <bt_hci_cmd_send_sync+0x64>
			*rsp = buf;
    2004:	602c      	str	r4, [r5, #0]
    2006:	e7fa      	b.n	1ffe <bt_hci_cmd_send_sync+0x5a>
			net_buf_unref(buf);
    2008:	4620      	mov	r0, r4
    200a:	f007 fedf 	bl	9dcc <net_buf_unref>
		err = 0;
    200e:	4628      	mov	r0, r5
    2010:	e7f5      	b.n	1ffe <bt_hci_cmd_send_sync+0x5a>
			return -ENOBUFS;
    2012:	f06f 0036 	mvn.w	r0, #54	; 0x36
    2016:	e7f2      	b.n	1ffe <bt_hci_cmd_send_sync+0x5a>
    2018:	20000080 	.word	0x20000080
    201c:	20006094 	.word	0x20006094

00002020 <set_random_address>:
{
    2020:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE (&(bt_addr_le_t) { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2022:	4d15      	ldr	r5, [pc, #84]	; (2078 <set_random_address+0x58>)
    2024:	2206      	movs	r2, #6
    2026:	f105 0108 	add.w	r1, r5, #8
    202a:	4606      	mov	r6, r0
    202c:	f7fe facf 	bl	5ce <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    2030:	4604      	mov	r4, r0
    2032:	b1d8      	cbz	r0, 206c <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    2034:	2106      	movs	r1, #6
    2036:	f242 0005 	movw	r0, #8197	; 0x2005
    203a:	f7ff ff83 	bl	1f44 <bt_hci_cmd_create>
	if (!buf) {
    203e:	4604      	mov	r4, r0
    2040:	b1b0      	cbz	r0, 2070 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    2042:	2206      	movs	r2, #6
    2044:	4631      	mov	r1, r6
    2046:	3008      	adds	r0, #8
    2048:	f007 fef8 	bl	9e3c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    204c:	4621      	mov	r1, r4
    204e:	2200      	movs	r2, #0
    2050:	f242 0005 	movw	r0, #8197	; 0x2005
    2054:	f7ff ffa6 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    2058:	4604      	mov	r4, r0
    205a:	b938      	cbnz	r0, 206c <set_random_address+0x4c>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    205c:	2206      	movs	r2, #6
    205e:	4631      	mov	r1, r6
    2060:	f105 0008 	add.w	r0, r5, #8
    2064:	f7fe fac8 	bl	5f8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    2068:	2301      	movs	r3, #1
    206a:	71eb      	strb	r3, [r5, #7]
}
    206c:	4620      	mov	r0, r4
    206e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    2070:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2074:	e7fa      	b.n	206c <set_random_address+0x4c>
    2076:	bf00      	nop
    2078:	20005fe0 	.word	0x20005fe0

0000207c <le_set_private_addr>:
{
    207c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    207e:	2106      	movs	r1, #6
    2080:	4668      	mov	r0, sp
    2082:	f001 fde3 	bl	3c4c <bt_rand>
	if (err) {
    2086:	b940      	cbnz	r0, 209a <le_set_private_addr+0x1e>
	nrpa.val[5] &= 0x3f;
    2088:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    208c:	4668      	mov	r0, sp
	nrpa.val[5] &= 0x3f;
    208e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2092:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    2096:	f7ff ffc3 	bl	2020 <set_random_address>
}
    209a:	b003      	add	sp, #12
    209c:	f85d fb04 	ldr.w	pc, [sp], #4

000020a0 <set_le_scan_enable>:
{
    20a0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    20a2:	2102      	movs	r1, #2
{
    20a4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    20a6:	f242 000c 	movw	r0, #8204	; 0x200c
    20aa:	f7ff ff4b 	bl	1f44 <bt_hci_cmd_create>
	if (!buf) {
    20ae:	4604      	mov	r4, r0
    20b0:	b320      	cbz	r0, 20fc <set_le_scan_enable+0x5c>
	cp = net_buf_add(buf, sizeof(*cp));
    20b2:	2102      	movs	r1, #2
    20b4:	3008      	adds	r0, #8
    20b6:	f007 febb 	bl	9e30 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    20ba:	2d01      	cmp	r5, #1
	cp = net_buf_add(buf, sizeof(*cp));
    20bc:	4601      	mov	r1, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    20be:	d114      	bne.n	20ea <set_le_scan_enable+0x4a>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    20c0:	200a      	movs	r0, #10
    20c2:	f7ff ff2d 	bl	1f20 <atomic_test_bit.constprop.25>
    20c6:	7048      	strb	r0, [r1, #1]
	cp->enable = enable;
    20c8:	700d      	strb	r5, [r1, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    20ca:	2200      	movs	r2, #0
    20cc:	4621      	mov	r1, r4
    20ce:	f242 000c 	movw	r0, #8204	; 0x200c
    20d2:	f7ff ff67 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    20d6:	4604      	mov	r4, r0
    20d8:	b928      	cbnz	r0, 20e6 <set_le_scan_enable+0x46>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    20da:	2d01      	cmp	r5, #1
    20dc:	d108      	bne.n	20f0 <set_le_scan_enable+0x50>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    20de:	2180      	movs	r1, #128	; 0x80
    20e0:	4808      	ldr	r0, [pc, #32]	; (2104 <set_le_scan_enable+0x64>)
    20e2:	f7ff fed3 	bl	1e8c <atomic_or>
}
    20e6:	4620      	mov	r0, r4
    20e8:	bd38      	pop	{r3, r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    20ea:	2300      	movs	r3, #0
    20ec:	7043      	strb	r3, [r0, #1]
    20ee:	e7eb      	b.n	20c8 <set_le_scan_enable+0x28>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    20f0:	f06f 0180 	mvn.w	r1, #128	; 0x80
    20f4:	4803      	ldr	r0, [pc, #12]	; (2104 <set_le_scan_enable+0x64>)
    20f6:	f7ff feda 	bl	1eae <atomic_and>
    20fa:	e7f4      	b.n	20e6 <set_le_scan_enable+0x46>
		return -ENOBUFS;
    20fc:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2100:	e7f1      	b.n	20e6 <set_le_scan_enable+0x46>
    2102:	bf00      	nop
    2104:	20006050 	.word	0x20006050

00002108 <bt_le_scan_update>:

	return 0;
}

int bt_le_scan_update(bool fast_scan)
{
    2108:	b508      	push	{r3, lr}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    210a:	2008      	movs	r0, #8
    210c:	f7ff ff08 	bl	1f20 <atomic_test_bit.constprop.25>
    2110:	4601      	mov	r1, r0
    2112:	b940      	cbnz	r0, 2126 <bt_le_scan_update+0x1e>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2114:	2007      	movs	r0, #7
    2116:	f7ff ff03 	bl	1f20 <atomic_test_bit.constprop.25>
    211a:	b120      	cbz	r0, 2126 <bt_le_scan_update+0x1e>
		int err;

		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    211c:	4608      	mov	r0, r1

		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window);
	}

	return 0;
}
    211e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2122:	f7ff bfbd 	b.w	20a0 <set_le_scan_enable>
}
    2126:	2000      	movs	r0, #0
    2128:	bd08      	pop	{r3, pc}

0000212a <bt_addr_le_create_static>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    212a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    212c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
    212e:	2106      	movs	r1, #6
{
    2130:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    2132:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    2136:	f001 fd89 	bl	3c4c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
    213a:	b918      	cbnz	r0, 2144 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    213c:	79a3      	ldrb	r3, [r4, #6]
    213e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    2142:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    2144:	bd10      	pop	{r4, pc}
	...

00002148 <hci_init>:
	net_buf_unref(rsp);
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    2148:	b5f0      	push	{r4, r5, r6, r7, lr}
    214a:	b087      	sub	sp, #28
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    214c:	aa04      	add	r2, sp, #16
    214e:	2100      	movs	r1, #0
    2150:	f640 4003 	movw	r0, #3075	; 0xc03
    2154:	f7ff ff26 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    2158:	4604      	mov	r4, r0
    215a:	2800      	cmp	r0, #0
    215c:	f040 8149 	bne.w	23f2 <hci_init+0x2aa>
	u8_t status = buf->data[0];
    2160:	9b04      	ldr	r3, [sp, #16]
    2162:	689b      	ldr	r3, [r3, #8]
	if (status) {
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	b96b      	cbnz	r3, 2184 <hci_init+0x3c>
	scan_dev_found_cb = NULL;
    2168:	4ab6      	ldr	r2, [pc, #728]	; (2444 <hci_init+0x2fc>)
    216a:	6013      	str	r3, [r2, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    216c:	4bb6      	ldr	r3, [pc, #728]	; (2448 <hci_init+0x300>)
    216e:	f3bf 8f5b 	dmb	ish
    2172:	2201      	movs	r2, #1
    2174:	e853 1f00 	ldrex	r1, [r3]
    2178:	e843 2000 	strex	r0, r2, [r3]
    217c:	2800      	cmp	r0, #0
    217e:	d1f9      	bne.n	2174 <hci_init+0x2c>
    2180:	f3bf 8f5b 	dmb	ish
	net_buf_unref(rsp);
    2184:	9804      	ldr	r0, [sp, #16]
    2186:	f007 fe21 	bl	9dcc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    218a:	aa04      	add	r2, sp, #16
    218c:	2100      	movs	r1, #0
    218e:	f241 0003 	movw	r0, #4099	; 0x1003
    2192:	f7ff ff07 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    2196:	4604      	mov	r4, r0
    2198:	2800      	cmp	r0, #0
    219a:	f040 812a 	bne.w	23f2 <hci_init+0x2aa>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    219e:	9b04      	ldr	r3, [sp, #16]
    21a0:	4daa      	ldr	r5, [pc, #680]	; (244c <hci_init+0x304>)
    21a2:	6899      	ldr	r1, [r3, #8]
    21a4:	2208      	movs	r2, #8
    21a6:	3101      	adds	r1, #1
    21a8:	f105 0016 	add.w	r0, r5, #22
    21ac:	f7fe fa24 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    21b0:	9804      	ldr	r0, [sp, #16]
    21b2:	f007 fe0b 	bl	9dcc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    21b6:	4621      	mov	r1, r4
    21b8:	aa04      	add	r2, sp, #16
    21ba:	f241 0001 	movw	r0, #4097	; 0x1001
    21be:	f7ff fef1 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    21c2:	4604      	mov	r4, r0
    21c4:	2800      	cmp	r0, #0
    21c6:	f040 8114 	bne.w	23f2 <hci_init+0x2aa>
	read_local_ver_complete(rsp);
    21ca:	9804      	ldr	r0, [sp, #16]
    21cc:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    21ce:	785a      	ldrb	r2, [r3, #1]
    21d0:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    21d2:	78d9      	ldrb	r1, [r3, #3]
    21d4:	789a      	ldrb	r2, [r3, #2]
    21d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    21da:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    21dc:	791a      	ldrb	r2, [r3, #4]
    21de:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    21e0:	7a19      	ldrb	r1, [r3, #8]
    21e2:	79da      	ldrb	r2, [r3, #7]
    21e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    21e8:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    21ea:	795a      	ldrb	r2, [r3, #5]
    21ec:	799b      	ldrb	r3, [r3, #6]
    21ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    21f2:	82ab      	strh	r3, [r5, #20]
	net_buf_unref(rsp);
    21f4:	f007 fdea 	bl	9dcc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    21f8:	4621      	mov	r1, r4
    21fa:	aa04      	add	r2, sp, #16
    21fc:	f241 0009 	movw	r0, #4105	; 0x1009
    2200:	f7ff fed0 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    2204:	4604      	mov	r4, r0
    2206:	2800      	cmp	r0, #0
    2208:	f040 80f3 	bne.w	23f2 <hci_init+0x2aa>
	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    220c:	9b04      	ldr	r3, [sp, #16]
    220e:	6899      	ldr	r1, [r3, #8]
    2210:	2206      	movs	r2, #6
    2212:	3101      	adds	r1, #1
    2214:	1c68      	adds	r0, r5, #1
    2216:	f7fe f9ef 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    221a:	9804      	ldr	r0, [sp, #16]
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    221c:	702c      	strb	r4, [r5, #0]
	net_buf_unref(rsp);
    221e:	f007 fdd5 	bl	9dcc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    2222:	4621      	mov	r1, r4
    2224:	aa04      	add	r2, sp, #16
    2226:	f241 0002 	movw	r0, #4098	; 0x1002
    222a:	f7ff febb 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    222e:	4604      	mov	r4, r0
    2230:	2800      	cmp	r0, #0
    2232:	f040 80de 	bne.w	23f2 <hci_init+0x2aa>
	memcpy(bt_dev.supported_commands, rp->commands,
    2236:	9b04      	ldr	r3, [sp, #16]
    2238:	6899      	ldr	r1, [r3, #8]
    223a:	2240      	movs	r2, #64	; 0x40
    223c:	3101      	adds	r1, #1
    223e:	f105 001e 	add.w	r0, r5, #30
    2242:	f7fe f9d9 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2246:	9804      	ldr	r0, [sp, #16]
    2248:	f007 fdc0 	bl	9dcc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    224c:	7eab      	ldrb	r3, [r5, #26]
    224e:	0658      	lsls	r0, r3, #25
    2250:	f140 813f 	bpl.w	24d2 <hci_init+0x38a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    2254:	4621      	mov	r1, r4
    2256:	aa04      	add	r2, sp, #16
    2258:	f242 0003 	movw	r0, #8195	; 0x2003
    225c:	f7ff fea2 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    2260:	4604      	mov	r4, r0
    2262:	2800      	cmp	r0, #0
    2264:	f040 80c5 	bne.w	23f2 <hci_init+0x2aa>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    2268:	9b04      	ldr	r3, [sp, #16]
    226a:	6899      	ldr	r1, [r3, #8]
    226c:	2208      	movs	r2, #8
    226e:	3101      	adds	r1, #1
    2270:	f105 0078 	add.w	r0, r5, #120	; 0x78
    2274:	f7fe f9c0 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2278:	9804      	ldr	r0, [sp, #16]
    227a:	f007 fda7 	bl	9dcc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    227e:	7eab      	ldrb	r3, [r5, #26]
    2280:	0699      	lsls	r1, r3, #26
    2282:	f140 809b 	bpl.w	23bc <hci_init+0x274>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    2286:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    228a:	071a      	lsls	r2, r3, #28
    228c:	f100 80b4 	bmi.w	23f8 <hci_init+0x2b0>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    2290:	2108      	movs	r1, #8
    2292:	f242 0001 	movw	r0, #8193	; 0x2001
    2296:	f7ff fe55 	bl	1f44 <bt_hci_cmd_create>
	if (!buf) {
    229a:	4604      	mov	r4, r0
    229c:	2800      	cmp	r0, #0
    229e:	f000 8094 	beq.w	23ca <hci_init+0x282>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    22a2:	2108      	movs	r1, #8
    22a4:	4408      	add	r0, r1
    22a6:	f007 fdc3 	bl	9e30 <net_buf_simple_add>
	if ((bt_dev.supported_commands[34] & 0x02) &&
    22aa:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    22ae:	f003 0306 	and.w	r3, r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    22b2:	2b06      	cmp	r3, #6
    22b4:	bf14      	ite	ne
    22b6:	2302      	movne	r3, #2
    22b8:	f44f 73c1 	moveq.w	r3, #386	; 0x182
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    22bc:	2200      	movs	r2, #0
    22be:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    22c0:	0a1b      	lsrs	r3, r3, #8
    22c2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    22c4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    22c6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    22c8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    22ca:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    22cc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    22ce:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    22d0:	4621      	mov	r1, r4
    22d2:	f242 0001 	movw	r0, #8193	; 0x2001
    22d6:	f7ff fe65 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    22da:	4604      	mov	r4, r0
    22dc:	2800      	cmp	r0, #0
    22de:	f040 8088 	bne.w	23f2 <hci_init+0x2aa>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    22e2:	2108      	movs	r1, #8
    22e4:	f640 4001 	movw	r0, #3073	; 0xc01
    22e8:	f7ff fe2c 	bl	1f44 <bt_hci_cmd_create>
	if (!buf) {
    22ec:	4606      	mov	r6, r0
    22ee:	2800      	cmp	r0, #0
    22f0:	d06b      	beq.n	23ca <hci_init+0x282>
	ev = net_buf_add(buf, sizeof(*ev));
    22f2:	2108      	movs	r1, #8
    22f4:	4408      	add	r0, r1
    22f6:	f007 fd9b 	bl	9e30 <net_buf_simple_add>
    22fa:	2380      	movs	r3, #128	; 0x80
    22fc:	7043      	strb	r3, [r0, #1]
    22fe:	2702      	movs	r7, #2
    2300:	2320      	movs	r3, #32
	dst[0] = val;
    2302:	7004      	strb	r4, [r0, #0]
    2304:	7084      	strb	r4, [r0, #2]
    2306:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
    2308:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
    230a:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
    230c:	70c7      	strb	r7, [r0, #3]
    230e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    2310:	4622      	mov	r2, r4
    2312:	4631      	mov	r1, r6
    2314:	f640 4001 	movw	r0, #3073	; 0xc01
    2318:	f7ff fe44 	bl	1fa4 <bt_hci_cmd_send_sync>
		BT_ERR("Non-BR/EDR controller detected");
		return -EIO;
	}

	err = set_event_mask();
	if (err) {
    231c:	4604      	mov	r4, r0
    231e:	2800      	cmp	r0, #0
    2320:	d167      	bne.n	23f2 <hci_init+0x2aa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    2322:	4601      	mov	r1, r0
    2324:	aa04      	add	r2, sp, #16
    2326:	f64f 4001 	movw	r0, #64513	; 0xfc01
    232a:	f7ff fe3b 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    232e:	bb20      	cbnz	r0, 237a <hci_init+0x232>
	net_buf_unref(rsp);
    2330:	9804      	ldr	r0, [sp, #16]
    2332:	f007 fd4b 	bl	9dcc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    2336:	aa04      	add	r2, sp, #16
    2338:	4621      	mov	r1, r4
    233a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    233e:	f7ff fe31 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    2342:	b9d0      	cbnz	r0, 237a <hci_init+0x232>
	rp.cmds = (void *)rsp->data;
    2344:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    2346:	4842      	ldr	r0, [pc, #264]	; (2450 <hci_init+0x308>)
    2348:	6899      	ldr	r1, [r3, #8]
    234a:	463a      	mov	r2, r7
    234c:	3101      	adds	r1, #1
    234e:	f7fe f953 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2352:	9804      	ldr	r0, [sp, #16]
    2354:	f007 fd3a 	bl	9dcc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    2358:	aa04      	add	r2, sp, #16
    235a:	4621      	mov	r1, r4
    235c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    2360:	f7ff fe20 	bl	1fa4 <bt_hci_cmd_send_sync>
	if (err) {
    2364:	b948      	cbnz	r0, 237a <hci_init+0x232>
	rp.feat = (void *)rsp->data;
    2366:	9b04      	ldr	r3, [sp, #16]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    2368:	483a      	ldr	r0, [pc, #232]	; (2454 <hci_init+0x30c>)
    236a:	6899      	ldr	r1, [r3, #8]
    236c:	2201      	movs	r2, #1
    236e:	4411      	add	r1, r2
    2370:	f7fe f942 	bl	5f8 <memcpy>
	net_buf_unref(rsp);
    2374:	9804      	ldr	r0, [sp, #16]
    2376:	f007 fd29 	bl	9dcc <net_buf_unref>

#if defined(CONFIG_BT_HCI_VS_EXT)
	hci_vs_init();
#endif

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    237a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    237c:	2207      	movs	r2, #7
    237e:	a902      	add	r1, sp, #8
    2380:	4832      	ldr	r0, [pc, #200]	; (244c <hci_init+0x304>)
    2382:	9302      	str	r3, [sp, #8]
    2384:	f8cd 300b 	str.w	r3, [sp, #11]
    2388:	f7fe f921 	bl	5ce <memcmp>
    238c:	2800      	cmp	r0, #0
    238e:	d148      	bne.n	2422 <hci_init+0x2da>
	if (bt_storage) {
    2390:	4e31      	ldr	r6, [pc, #196]	; (2458 <hci_init+0x310>)
    2392:	6833      	ldr	r3, [r6, #0]
    2394:	2b00      	cmp	r3, #0
    2396:	d163      	bne.n	2460 <hci_init+0x318>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    2398:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    239c:	07db      	lsls	r3, r3, #31
    239e:	d47a      	bmi.n	2496 <hci_init+0x34e>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    23a0:	482a      	ldr	r0, [pc, #168]	; (244c <hci_init+0x304>)
    23a2:	f7ff fec2 	bl	212a <bt_addr_le_create_static>
	if (err) {
    23a6:	4604      	mov	r4, r0
    23a8:	bb18      	cbnz	r0, 23f2 <hci_init+0x2aa>
	if (bt_storage) {
    23aa:	6833      	ldr	r3, [r6, #0]
    23ac:	2b00      	cmp	r3, #0
    23ae:	d05f      	beq.n	2470 <hci_init+0x328>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    23b0:	685e      	ldr	r6, [r3, #4]
    23b2:	4a26      	ldr	r2, [pc, #152]	; (244c <hci_init+0x304>)
    23b4:	2307      	movs	r3, #7
    23b6:	4601      	mov	r1, r0
    23b8:	47b0      	blx	r6
    23ba:	e059      	b.n	2470 <hci_init+0x328>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    23bc:	2102      	movs	r1, #2
    23be:	f640 406d 	movw	r0, #3181	; 0xc6d
    23c2:	f7ff fdbf 	bl	1f44 <bt_hci_cmd_create>
		if (!buf) {
    23c6:	4606      	mov	r6, r0
    23c8:	b910      	cbnz	r0, 23d0 <hci_init+0x288>
		return -ENOBUFS;
    23ca:	f06f 0436 	mvn.w	r4, #54	; 0x36
    23ce:	e010      	b.n	23f2 <hci_init+0x2aa>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    23d0:	2102      	movs	r1, #2
    23d2:	3008      	adds	r0, #8
    23d4:	f007 fd2c 	bl	9e30 <net_buf_simple_add>
		cp_le->le = 0x01;
    23d8:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
    23da:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
    23dc:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    23de:	4622      	mov	r2, r4
    23e0:	4631      	mov	r1, r6
    23e2:	f640 406d 	movw	r0, #3181	; 0xc6d
    23e6:	f7ff fddd 	bl	1fa4 <bt_hci_cmd_send_sync>
		if (err) {
    23ea:	4604      	mov	r4, r0
    23ec:	2800      	cmp	r0, #0
    23ee:	f43f af4a 	beq.w	2286 <hci_init+0x13e>
	}

	show_dev_info();

	return 0;
}
    23f2:	4620      	mov	r0, r4
    23f4:	b007      	add	sp, #28
    23f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    23f8:	aa04      	add	r2, sp, #16
    23fa:	2100      	movs	r1, #0
    23fc:	f242 001c 	movw	r0, #8220	; 0x201c
    2400:	f7ff fdd0 	bl	1fa4 <bt_hci_cmd_send_sync>
		if (err) {
    2404:	4604      	mov	r4, r0
    2406:	2800      	cmp	r0, #0
    2408:	d1f3      	bne.n	23f2 <hci_init+0x2aa>
		le_read_supp_states_complete(rsp);
    240a:	9804      	ldr	r0, [sp, #16]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    240c:	6883      	ldr	r3, [r0, #8]
    240e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2412:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    2414:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    2418:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
		net_buf_unref(rsp);
    241c:	f007 fcd6 	bl	9dcc <net_buf_unref>
    2420:	e736      	b.n	2290 <hci_init+0x148>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    2422:	4b0e      	ldr	r3, [pc, #56]	; (245c <hci_init+0x314>)
    2424:	6818      	ldr	r0, [r3, #0]
    2426:	889a      	ldrh	r2, [r3, #4]
    2428:	9004      	str	r0, [sp, #16]
    242a:	799b      	ldrb	r3, [r3, #6]
    242c:	f8ad 2014 	strh.w	r2, [sp, #20]
    2430:	a904      	add	r1, sp, #16
    2432:	2207      	movs	r2, #7
    2434:	4805      	ldr	r0, [pc, #20]	; (244c <hci_init+0x304>)
    2436:	f88d 3016 	strb.w	r3, [sp, #22]
    243a:	f7fe f8c8 	bl	5ce <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    243e:	2800      	cmp	r0, #0
    2440:	d0a6      	beq.n	2390 <hci_init+0x248>
    2442:	e7d6      	b.n	23f2 <hci_init+0x2aa>
    2444:	200000e0 	.word	0x200000e0
    2448:	20006050 	.word	0x20006050
    244c:	20005fe0 	.word	0x20005fe0
    2450:	2000603f 	.word	0x2000603f
    2454:	2000603e 	.word	0x2000603e
    2458:	200026c8 	.word	0x200026c8
    245c:	0000b1ca 	.word	0x0000b1ca
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    2460:	2100      	movs	r1, #0
    2462:	681c      	ldr	r4, [r3, #0]
    2464:	4a1c      	ldr	r2, [pc, #112]	; (24d8 <hci_init+0x390>)
    2466:	2307      	movs	r3, #7
    2468:	4608      	mov	r0, r1
    246a:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    246c:	2807      	cmp	r0, #7
    246e:	d193      	bne.n	2398 <hci_init+0x250>
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2470:	782b      	ldrb	r3, [r5, #0]
    2472:	2b01      	cmp	r3, #1
    2474:	d12a      	bne.n	24cc <hci_init+0x384>
    2476:	79ab      	ldrb	r3, [r5, #6]
    2478:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    247c:	2bc0      	cmp	r3, #192	; 0xc0
    247e:	d125      	bne.n	24cc <hci_init+0x384>
	err = set_random_address(&bt_dev.id_addr.a);
    2480:	4816      	ldr	r0, [pc, #88]	; (24dc <hci_init+0x394>)
    2482:	f7ff fdcd 	bl	2020 <set_random_address>
	if (err) {
    2486:	4604      	mov	r4, r0
    2488:	2800      	cmp	r0, #0
    248a:	d1b2      	bne.n	23f2 <hci_init+0x2aa>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    248c:	2104      	movs	r1, #4
    248e:	4814      	ldr	r0, [pc, #80]	; (24e0 <hci_init+0x398>)
    2490:	f7ff fcfc 	bl	1e8c <atomic_or>
    2494:	e7ad      	b.n	23f2 <hci_init+0x2aa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    2496:	aa01      	add	r2, sp, #4
    2498:	2100      	movs	r1, #0
    249a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    249e:	f7ff fd81 	bl	1fa4 <bt_hci_cmd_send_sync>
		if (err) {
    24a2:	2800      	cmp	r0, #0
    24a4:	f47f af7c 	bne.w	23a0 <hci_init+0x258>
		rp = (void *)rsp->data;
    24a8:	9801      	ldr	r0, [sp, #4]
    24aa:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    24ac:	784b      	ldrb	r3, [r1, #1]
    24ae:	b153      	cbz	r3, 24c6 <hci_init+0x37e>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    24b0:	2301      	movs	r3, #1
	memcpy(dst, src, sizeof(*dst));
    24b2:	2206      	movs	r2, #6
    24b4:	3102      	adds	r1, #2
    24b6:	4809      	ldr	r0, [pc, #36]	; (24dc <hci_init+0x394>)
    24b8:	702b      	strb	r3, [r5, #0]
    24ba:	f7fe f89d 	bl	5f8 <memcpy>
			net_buf_unref(rsp);
    24be:	9801      	ldr	r0, [sp, #4]
    24c0:	f007 fc84 	bl	9dcc <net_buf_unref>
    24c4:	e7d4      	b.n	2470 <hci_init+0x328>
		net_buf_unref(rsp);
    24c6:	f007 fc81 	bl	9dcc <net_buf_unref>
    24ca:	e769      	b.n	23a0 <hci_init+0x258>
		return -EINVAL;
    24cc:	f06f 0415 	mvn.w	r4, #21
    24d0:	e78f      	b.n	23f2 <hci_init+0x2aa>
		return -ENODEV;
    24d2:	f06f 0412 	mvn.w	r4, #18
    24d6:	e78c      	b.n	23f2 <hci_init+0x2aa>
    24d8:	20005fe0 	.word	0x20005fe0
    24dc:	20005fe1 	.word	0x20005fe1
    24e0:	20006050 	.word	0x20006050

000024e4 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    24e4:	b510      	push	{r4, lr}
	err = hci_init();
    24e6:	f7ff fe2f 	bl	2148 <hci_init>
	if (err) {
    24ea:	4604      	mov	r4, r0
    24ec:	b930      	cbnz	r0, 24fc <init_work+0x18>
    24ee:	2102      	movs	r1, #2
    24f0:	4806      	ldr	r0, [pc, #24]	; (250c <init_work+0x28>)
    24f2:	f7ff fccb 	bl	1e8c <atomic_or>
	bt_le_scan_update(false);
    24f6:	4620      	mov	r0, r4
    24f8:	f7ff fe06 	bl	2108 <bt_le_scan_update>
	int err;

	err = bt_init();
	if (ready_cb) {
    24fc:	4b04      	ldr	r3, [pc, #16]	; (2510 <init_work+0x2c>)
    24fe:	681b      	ldr	r3, [r3, #0]
    2500:	b11b      	cbz	r3, 250a <init_work+0x26>
		ready_cb(err);
    2502:	4620      	mov	r0, r4
	}
}
    2504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    2508:	4718      	bx	r3
    250a:	bd10      	pop	{r4, pc}
    250c:	20006050 	.word	0x20006050
    2510:	200000dc 	.word	0x200000dc

00002514 <bt_send>:
	return bt_dev.drv->send(buf);
    2514:	4b02      	ldr	r3, [pc, #8]	; (2520 <bt_send+0xc>)
    2516:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    251a:	68db      	ldr	r3, [r3, #12]
    251c:	4718      	bx	r3
    251e:	bf00      	nop
    2520:	20005fe0 	.word	0x20005fe0

00002524 <bt_hci_cmd_send>:
{
    2524:	b538      	push	{r3, r4, r5, lr}
    2526:	4605      	mov	r5, r0
	if (!buf) {
    2528:	460c      	mov	r4, r1
    252a:	b919      	cbnz	r1, 2534 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    252c:	f7ff fd0a 	bl	1f44 <bt_hci_cmd_create>
		if (!buf) {
    2530:	4604      	mov	r4, r0
    2532:	b198      	cbz	r0, 255c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    2534:	f640 4335 	movw	r3, #3125	; 0xc35
    2538:	429d      	cmp	r5, r3
    253a:	d109      	bne.n	2550 <bt_hci_cmd_send+0x2c>
		err = bt_send(buf);
    253c:	4620      	mov	r0, r4
    253e:	f7ff ffe9 	bl	2514 <bt_send>
		if (err) {
    2542:	4605      	mov	r5, r0
    2544:	b110      	cbz	r0, 254c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    2546:	4620      	mov	r0, r4
    2548:	f007 fc40 	bl	9dcc <net_buf_unref>
}
    254c:	4628      	mov	r0, r5
    254e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    2550:	4621      	mov	r1, r4
    2552:	4804      	ldr	r0, [pc, #16]	; (2564 <bt_hci_cmd_send+0x40>)
    2554:	f007 fc2d 	bl	9db2 <net_buf_put>
	return 0;
    2558:	2500      	movs	r5, #0
    255a:	e7f7      	b.n	254c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    255c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    2560:	e7f4      	b.n	254c <bt_hci_cmd_send+0x28>
    2562:	bf00      	nop
    2564:	20006094 	.word	0x20006094

00002568 <hci_tx_thread>:
{
    2568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    256c:	4c26      	ldr	r4, [pc, #152]	; (2608 <hci_tx_thread+0xa0>)
		events[0].state = K_POLL_STATE_NOT_READY;
    256e:	4e27      	ldr	r6, [pc, #156]	; (260c <hci_tx_thread+0xa4>)
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2570:	f104 08b4 	add.w	r8, r4, #180	; 0xb4
		events[0].state = K_POLL_STATE_NOT_READY;
    2574:	7b73      	ldrb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    2576:	4825      	ldr	r0, [pc, #148]	; (260c <hci_tx_thread+0xa4>)
		events[0].state = K_POLL_STATE_NOT_READY;
    2578:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(events, ev_count, K_FOREVER);
    257c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2580:	2101      	movs	r1, #1
		events[0].state = K_POLL_STATE_NOT_READY;
    2582:	7373      	strb	r3, [r6, #13]
		err = k_poll(events, ev_count, K_FOREVER);
    2584:	f008 fd1a 	bl	afbc <k_poll>
		BT_ASSERT(err == 0);
    2588:	bbc0      	cbnz	r0, 25fc <hci_tx_thread+0x94>
		switch (ev->state) {
    258a:	7b73      	ldrb	r3, [r6, #13]
    258c:	091b      	lsrs	r3, r3, #4
    258e:	2b04      	cmp	r3, #4
    2590:	d12c      	bne.n	25ec <hci_tx_thread+0x84>
			if (ev->tag == BT_EVENT_CMD_TX) {
    2592:	7b37      	ldrb	r7, [r6, #12]
    2594:	bb57      	cbnz	r7, 25ec <hci_tx_thread+0x84>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    2596:	4639      	mov	r1, r7
    2598:	4640      	mov	r0, r8
    259a:	f007 fbed 	bl	9d78 <net_buf_get>
	BT_ASSERT(buf);
    259e:	4605      	mov	r5, r0
    25a0:	b360      	cbz	r0, 25fc <hci_tx_thread+0x94>
    25a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    25a6:	481a      	ldr	r0, [pc, #104]	; (2610 <hci_tx_thread+0xa8>)
    25a8:	f008 f8e8 	bl	a77c <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    25ac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    25b0:	b9f8      	cbnz	r0, 25f2 <hci_tx_thread+0x8a>
	bt_dev.sent_cmd = net_buf_ref(buf);
    25b2:	4628      	mov	r0, r5
    25b4:	f007 fc38 	bl	9e28 <net_buf_ref>
    25b8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
	err = bt_send(buf);
    25bc:	4628      	mov	r0, r5
    25be:	f7ff ffa9 	bl	2514 <bt_send>
	if (err) {
    25c2:	b198      	cbz	r0, 25ec <hci_tx_thread+0x84>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    25c4:	4812      	ldr	r0, [pc, #72]	; (2610 <hci_tx_thread+0xa8>)
    25c6:	f008 f879 	bl	a6bc <_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    25ca:	4628      	mov	r0, r5
    25cc:	f007 fb40 	bl	9c50 <net_buf_id>
    25d0:	2100      	movs	r1, #0
    25d2:	201f      	movs	r0, #31
    25d4:	f7ff fc7c 	bl	1ed0 <hci_cmd_done.isra.9>
		net_buf_unref(bt_dev.sent_cmd);
    25d8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    25dc:	f007 fbf6 	bl	9dcc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    25e0:	2300      	movs	r3, #0
		net_buf_unref(buf);
    25e2:	4628      	mov	r0, r5
		bt_dev.sent_cmd = NULL;
    25e4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		net_buf_unref(buf);
    25e8:	f007 fbf0 	bl	9dcc <net_buf_unref>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    25ec:	f007 ffea 	bl	a5c4 <_impl_k_yield>
    25f0:	e7c0      	b.n	2574 <hci_tx_thread+0xc>
		net_buf_unref(bt_dev.sent_cmd);
    25f2:	f007 fbeb 	bl	9dcc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    25f6:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
    25fa:	e7da      	b.n	25b2 <hci_tx_thread+0x4a>
	BT_ASSERT(buf);
    25fc:	4040      	eors	r0, r0
    25fe:	f380 8811 	msr	BASEPRI, r0
    2602:	f04f 0004 	mov.w	r0, #4
    2606:	df02      	svc	2
    2608:	20005fe0 	.word	0x20005fe0
    260c:	200060a8 	.word	0x200060a8
    2610:	20006068 	.word	0x20006068

00002614 <bt_recv>:
{
    2614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (bt_buf_get_type(buf)) {
    2618:	7d06      	ldrb	r6, [r0, #20]
    261a:	2e01      	cmp	r6, #1
{
    261c:	b087      	sub	sp, #28
    261e:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    2620:	f040 8114 	bne.w	284c <bt_recv+0x238>
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2624:	6887      	ldr	r7, [r0, #8]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    2626:	783b      	ldrb	r3, [r7, #0]
    2628:	3b0e      	subs	r3, #14
    262a:	2b01      	cmp	r3, #1
    262c:	f200 8113 	bhi.w	2856 <bt_recv+0x242>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    2630:	4040      	eors	r0, r0
    2632:	f380 8811 	msr	BASEPRI, r0
    2636:	f04f 0004 	mov.w	r0, #4
    263a:	df02      	svc	2
    263c:	68a6      	ldr	r6, [r4, #8]
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    263e:	489d      	ldr	r0, [pc, #628]	; (28b4 <bt_recv+0x2a0>)
    2640:	f06f 0110 	mvn.w	r1, #16
    2644:	f7ff fc33 	bl	1eae <atomic_and>
	if (!evt->status) {
    2648:	7833      	ldrb	r3, [r6, #0]
    264a:	b943      	cbnz	r3, 265e <bt_recv+0x4a>
		memcpy(pub_key, evt->key, 64);
    264c:	1c71      	adds	r1, r6, #1
    264e:	2240      	movs	r2, #64	; 0x40
    2650:	4899      	ldr	r0, [pc, #612]	; (28b8 <bt_recv+0x2a4>)
    2652:	f7fd ffd1 	bl	5f8 <memcpy>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2656:	2108      	movs	r1, #8
    2658:	4896      	ldr	r0, [pc, #600]	; (28b4 <bt_recv+0x2a0>)
    265a:	f7ff fc17 	bl	1e8c <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    265e:	4b97      	ldr	r3, [pc, #604]	; (28bc <bt_recv+0x2a8>)
    2660:	681d      	ldr	r5, [r3, #0]
		cb->func(evt->status ? NULL : evt->key);
    2662:	1c77      	adds	r7, r6, #1
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2664:	b935      	cbnz	r5, 2674 <bt_recv+0x60>
	net_buf_unref(buf);
    2666:	4620      	mov	r0, r4
    2668:	f007 fbb0 	bl	9dcc <net_buf_unref>
		return 0;
    266c:	2000      	movs	r0, #0
}
    266e:	b007      	add	sp, #28
    2670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cb->func(evt->status ? NULL : evt->key);
    2674:	7832      	ldrb	r2, [r6, #0]
    2676:	682b      	ldr	r3, [r5, #0]
    2678:	2a00      	cmp	r2, #0
    267a:	bf0c      	ite	eq
    267c:	4638      	moveq	r0, r7
    267e:	2000      	movne	r0, #0
    2680:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    2682:	686d      	ldr	r5, [r5, #4]
    2684:	e7ee      	b.n	2664 <bt_recv+0x50>
	if (dh_key_cb) {
    2686:	4d8e      	ldr	r5, [pc, #568]	; (28c0 <bt_recv+0x2ac>)
    2688:	68a0      	ldr	r0, [r4, #8]
    268a:	682a      	ldr	r2, [r5, #0]
    268c:	2a00      	cmp	r2, #0
    268e:	d0ea      	beq.n	2666 <bt_recv+0x52>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    2690:	7803      	ldrb	r3, [r0, #0]
    2692:	b923      	cbnz	r3, 269e <bt_recv+0x8a>
    2694:	3001      	adds	r0, #1
    2696:	4790      	blx	r2
		dh_key_cb = NULL;
    2698:	2300      	movs	r3, #0
    269a:	602b      	str	r3, [r5, #0]
    269c:	e7e3      	b.n	2666 <bt_recv+0x52>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    269e:	2000      	movs	r0, #0
    26a0:	e7f9      	b.n	2696 <bt_recv+0x82>
	u8_t num_reports = net_buf_pull_u8(buf);
    26a2:	4628      	mov	r0, r5
    26a4:	f007 fbdb 	bl	9e5e <net_buf_simple_pull_u8>
		if (scan_dev_found_cb) {
    26a8:	f8df a234 	ldr.w	sl, [pc, #564]	; 28e0 <bt_recv+0x2cc>
	u8_t num_reports = net_buf_pull_u8(buf);
    26ac:	9003      	str	r0, [sp, #12]
	while (num_reports--) {
    26ae:	9b03      	ldr	r3, [sp, #12]
    26b0:	2b00      	cmp	r3, #0
    26b2:	d0d8      	beq.n	2666 <bt_recv+0x52>
		info = (void *)buf->data;
    26b4:	68a6      	ldr	r6, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    26b6:	2109      	movs	r1, #9
    26b8:	4628      	mov	r0, r5
    26ba:	f007 fbc8 	bl	9e4e <net_buf_simple_pull>
		rssi = info->data[info->length];
    26be:	7a33      	ldrb	r3, [r6, #8]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    26c0:	4631      	mov	r1, r6
		rssi = info->data[info->length];
    26c2:	4433      	add	r3, r6
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    26c4:	2207      	movs	r2, #7
    26c6:	f893 b009 	ldrb.w	fp, [r3, #9]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    26ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    26ce:	3b02      	subs	r3, #2
    26d0:	2b01      	cmp	r3, #1
    26d2:	a804      	add	r0, sp, #16
    26d4:	d82c      	bhi.n	2730 <bt_recv+0x11c>
    26d6:	f7fd ff8f 	bl	5f8 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    26da:	f89d 3010 	ldrb.w	r3, [sp, #16]
    26de:	3b02      	subs	r3, #2
    26e0:	f88d 3010 	strb.w	r3, [sp, #16]
		if (scan_dev_found_cb) {
    26e4:	f8da 3000 	ldr.w	r3, [sl]
    26e8:	b1b3      	cbz	r3, 2718 <bt_recv+0x104>
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    26ea:	4628      	mov	r0, r5
    26ec:	f007 fbbf 	bl	9e6e <net_buf_simple_headroom>
			buf->len = info->length;
    26f0:	7a33      	ldrb	r3, [r6, #8]
	state->len = buf->len;
    26f2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
    26f6:	81a3      	strh	r3, [r4, #12]
			scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    26f8:	7832      	ldrb	r2, [r6, #0]
    26fa:	9400      	str	r4, [sp, #0]
	state->offset = net_buf_simple_headroom(buf);
    26fc:	4681      	mov	r9, r0
    26fe:	462b      	mov	r3, r5
    2700:	fa4f f18b 	sxtb.w	r1, fp
    2704:	a804      	add	r0, sp, #16
    2706:	f8da 7000 	ldr.w	r7, [sl]
    270a:	47b8      	blx	r7
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    270c:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
    270e:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    2712:	fa13 f389 	uxtah	r3, r3, r9
    2716:	60a3      	str	r3, [r4, #8]
		net_buf_pull(buf, info->length + sizeof(rssi));
    2718:	7a31      	ldrb	r1, [r6, #8]
    271a:	4628      	mov	r0, r5
    271c:	3101      	adds	r1, #1
    271e:	f007 fb96 	bl	9e4e <net_buf_simple_pull>
    2722:	9b03      	ldr	r3, [sp, #12]
    2724:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2728:	fa5f f388 	uxtb.w	r3, r8
    272c:	9303      	str	r3, [sp, #12]
    272e:	e7be      	b.n	26ae <bt_recv+0x9a>
    2730:	f7fd ff62 	bl	5f8 <memcpy>
    2734:	e7d6      	b.n	26e4 <bt_recv+0xd0>
	num_reports = net_buf_pull_u8(buf);
    2736:	4628      	mov	r0, r5
    2738:	f007 fb91 	bl	9e5e <net_buf_simple_pull_u8>
    273c:	4b61      	ldr	r3, [pc, #388]	; (28c4 <bt_recv+0x2b0>)
		if (scan_dev_found_cb) {
    273e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 28e0 <bt_recv+0x2cc>
				pointer_index = 0;
    2742:	4e61      	ldr	r6, [pc, #388]	; (28c8 <bt_recv+0x2b4>)
				memset(copied_data, 0, 1500);
    2744:	f8df a194 	ldr.w	sl, [pc, #404]	; 28dc <bt_recv+0x2c8>
	num_reports = net_buf_pull_u8(buf);
    2748:	7018      	strb	r0, [r3, #0]
    274a:	469b      	mov	fp, r3
	while (num_reports--) {
    274c:	f89b 3000 	ldrb.w	r3, [fp]
    2750:	1e5a      	subs	r2, r3, #1
    2752:	f88b 2000 	strb.w	r2, [fp]
    2756:	2b00      	cmp	r3, #0
    2758:	d085      	beq.n	2666 <bt_recv+0x52>
		info = (void *)buf->data;
    275a:	68a7      	ldr	r7, [r4, #8]
		net_buf_pull(buf, sizeof(*info));
    275c:	2118      	movs	r1, #24
    275e:	4628      	mov	r0, r5
    2760:	f007 fb75 	bl	9e4e <net_buf_simple_pull>
		net_buf_pull(buf, 2);   // remove 0x81 0xFF 
    2764:	2102      	movs	r1, #2
    2766:	4628      	mov	r0, r5
    2768:	f007 fb71 	bl	9e4e <net_buf_simple_pull>
		rssi = info->data[info->length - 2];
    276c:	7dfb      	ldrb	r3, [r7, #23]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    276e:	4639      	mov	r1, r7
		rssi = info->data[info->length - 2];
    2770:	443b      	add	r3, r7
    2772:	2207      	movs	r2, #7
    2774:	f893 8016 	ldrb.w	r8, [r3, #22]
		if (info->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    2778:	f811 3f02 	ldrb.w	r3, [r1, #2]!
    277c:	3b02      	subs	r3, #2
    277e:	2b01      	cmp	r3, #1
    2780:	a804      	add	r0, sp, #16
    2782:	d82e      	bhi.n	27e2 <bt_recv+0x1ce>
    2784:	f7fd ff38 	bl	5f8 <memcpy>
			id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    2788:	f89d 3010 	ldrb.w	r3, [sp, #16]
    278c:	3b02      	subs	r3, #2
    278e:	f88d 3010 	strb.w	r3, [sp, #16]
		if (scan_dev_found_cb) {
    2792:	f8d9 3000 	ldr.w	r3, [r9]
		buf->len = info->length;
    2796:	7dfa      	ldrb	r2, [r7, #23]
    2798:	81a2      	strh	r2, [r4, #12]
		if (scan_dev_found_cb) {
    279a:	2b00      	cmp	r3, #0
    279c:	d0d6      	beq.n	274c <bt_recv+0x138>
			if(info->frag == 0x01){  //First fragment - more packets to come;
    279e:	787b      	ldrb	r3, [r7, #1]
    27a0:	2b01      	cmp	r3, #1
    27a2:	d121      	bne.n	27e8 <bt_recv+0x1d4>
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    27a4:	8830      	ldrh	r0, [r6, #0]
				memcpy(temp_data, buf->b.data , buf->b.len);
    27a6:	4f49      	ldr	r7, [pc, #292]	; (28cc <bt_recv+0x2b8>)
				memcpy(&copied_data[pointer_index], buf->b.data, buf->b.len);
    27a8:	68a1      	ldr	r1, [r4, #8]
    27aa:	4450      	add	r0, sl
    27ac:	f7fd ff24 	bl	5f8 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    27b0:	89a2      	ldrh	r2, [r4, #12]
    27b2:	68a1      	ldr	r1, [r4, #8]
    27b4:	4638      	mov	r0, r7
    27b6:	f7fd ff1f 	bl	5f8 <memcpy>
				pointer_index += (buf->b.len - 2);
    27ba:	8833      	ldrh	r3, [r6, #0]
    27bc:	89a2      	ldrh	r2, [r4, #12]
    27be:	3b02      	subs	r3, #2
    27c0:	4413      	add	r3, r2
    27c2:	8033      	strh	r3, [r6, #0]
				if(temp_data[100] == 0xDD){
    27c4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    27c8:	2bdd      	cmp	r3, #221	; 0xdd
    27ca:	d102      	bne.n	27d2 <bt_recv+0x1be>
					printk("DD \n");
    27cc:	4840      	ldr	r0, [pc, #256]	; (28d0 <bt_recv+0x2bc>)
    27ce:	f7fe fde7 	bl	13a0 <printk>
				if(temp_data[100] == 0xEE){
    27d2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
    27d6:	2bee      	cmp	r3, #238	; 0xee
    27d8:	d1b8      	bne.n	274c <bt_recv+0x138>
					printk("EE \n");
    27da:	483e      	ldr	r0, [pc, #248]	; (28d4 <bt_recv+0x2c0>)
    27dc:	f7fe fde0 	bl	13a0 <printk>
    27e0:	e7b4      	b.n	274c <bt_recv+0x138>
    27e2:	f7fd ff09 	bl	5f8 <memcpy>
    27e6:	e7d4      	b.n	2792 <bt_recv+0x17e>
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    27e8:	2b02      	cmp	r3, #2
		rssi = info->data[info->length - 2];
    27ea:	fa4f f888 	sxtb.w	r8, r8
			}else if (info->frag == 0x02){  //last paacket of the data or complete data which is less than 254 bytes
    27ee:	d123      	bne.n	2838 <bt_recv+0x224>
				memcpy(&copied_data[pointer_index], buf->b.data , buf->b.len);
    27f0:	8830      	ldrh	r0, [r6, #0]
    27f2:	68a1      	ldr	r1, [r4, #8]
    27f4:	4450      	add	r0, sl
    27f6:	f7fd feff 	bl	5f8 <memcpy>
				memcpy(temp_data, buf->b.data , buf->b.len);
    27fa:	89a2      	ldrh	r2, [r4, #12]
    27fc:	68a1      	ldr	r1, [r4, #8]
    27fe:	4833      	ldr	r0, [pc, #204]	; (28cc <bt_recv+0x2b8>)
    2800:	f7fd fefa 	bl	5f8 <memcpy>
				pointer_index += (buf->b.len - 2);
    2804:	8832      	ldrh	r2, [r6, #0]
    2806:	89a3      	ldrh	r3, [r4, #12]
				buffer_size1 = (buf->b.len - 2);
    2808:	4933      	ldr	r1, [pc, #204]	; (28d8 <bt_recv+0x2c4>)
				pointer_index += (buf->b.len - 2);
    280a:	3a02      	subs	r2, #2
    280c:	441a      	add	r2, r3
				buffer_size1 = (buf->b.len - 2);
    280e:	3b02      	subs	r3, #2
				pointer_index += (buf->b.len - 2);
    2810:	b292      	uxth	r2, r2
				buffer_size1 = (buf->b.len - 2);
    2812:	800b      	strh	r3, [r1, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    2814:	4628      	mov	r0, r5
    2816:	4931      	ldr	r1, [pc, #196]	; (28dc <bt_recv+0x2c8>)
				pointer_index += (buf->b.len - 2);
    2818:	8032      	strh	r2, [r6, #0]
				net_buf_add_mem(buf, copied_data, pointer_index);
    281a:	f007 fb0f 	bl	9e3c <net_buf_simple_add_mem>
				net_buf_pull(buf, info->length);
    281e:	7df9      	ldrb	r1, [r7, #23]
    2820:	4628      	mov	r0, r5
    2822:	f007 fb14 	bl	9e4e <net_buf_simple_pull>
				scan_dev_found_cb(&id_addr, rssi, info->evt_type,
    2826:	783a      	ldrb	r2, [r7, #0]
    2828:	9400      	str	r4, [sp, #0]
    282a:	f8d9 7000 	ldr.w	r7, [r9]
    282e:	462b      	mov	r3, r5
    2830:	4641      	mov	r1, r8
    2832:	a804      	add	r0, sp, #16
    2834:	47b8      	blx	r7
    2836:	e789      	b.n	274c <bt_recv+0x138>
			else if(info->frag == 0x03){        // packet received on primary adv channel
    2838:	2b03      	cmp	r3, #3
    283a:	d187      	bne.n	274c <bt_recv+0x138>
				pointer_index = 0;
    283c:	2100      	movs	r1, #0
				memset(copied_data, 0, 1500);
    283e:	f240 52dc 	movw	r2, #1500	; 0x5dc
    2842:	4650      	mov	r0, sl
				pointer_index = 0;
    2844:	8031      	strh	r1, [r6, #0]
				memset(copied_data, 0, 1500);
    2846:	f7fd ff03 	bl	650 <memset>
    284a:	e7ec      	b.n	2826 <bt_recv+0x212>
		net_buf_unref(buf);
    284c:	f007 fabe 	bl	9dcc <net_buf_unref>
		return -EINVAL;
    2850:	f06f 0015 	mvn.w	r0, #21
    2854:	e70b      	b.n	266e <bt_recv+0x5a>
	net_buf_pull(buf, sizeof(*hdr));
    2856:	f100 0508 	add.w	r5, r0, #8
    285a:	2102      	movs	r1, #2
    285c:	4628      	mov	r0, r5
    285e:	f007 faf6 	bl	9e4e <net_buf_simple_pull>
	switch (hdr->evt) {
    2862:	783b      	ldrb	r3, [r7, #0]
    2864:	2b3e      	cmp	r3, #62	; 0x3e
    2866:	f47f aefe 	bne.w	2666 <bt_recv+0x52>
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    286a:	68a7      	ldr	r7, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    286c:	4631      	mov	r1, r6
    286e:	4628      	mov	r0, r5
    2870:	f007 faed 	bl	9e4e <net_buf_simple_pull>
	switch (evt->subevent) {
    2874:	783b      	ldrb	r3, [r7, #0]
    2876:	3b02      	subs	r3, #2
    2878:	2b0b      	cmp	r3, #11
    287a:	f63f aef4 	bhi.w	2666 <bt_recv+0x52>
    287e:	a201      	add	r2, pc, #4	; (adr r2, 2884 <bt_recv+0x270>)
    2880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2884:	000026a3 	.word	0x000026a3
    2888:	00002667 	.word	0x00002667
    288c:	00002667 	.word	0x00002667
    2890:	00002667 	.word	0x00002667
    2894:	00002667 	.word	0x00002667
    2898:	00002667 	.word	0x00002667
    289c:	0000263d 	.word	0x0000263d
    28a0:	00002687 	.word	0x00002687
    28a4:	00002667 	.word	0x00002667
    28a8:	00002667 	.word	0x00002667
    28ac:	00002667 	.word	0x00002667
    28b0:	00002737 	.word	0x00002737
    28b4:	20006050 	.word	0x20006050
    28b8:	20000096 	.word	0x20000096
    28bc:	200000d8 	.word	0x200000d8
    28c0:	20000090 	.word	0x20000090
    28c4:	200026c6 	.word	0x200026c6
    28c8:	20000094 	.word	0x20000094
    28cc:	200026cc 	.word	0x200026cc
    28d0:	0000b81a 	.word	0x0000b81a
    28d4:	0000b81f 	.word	0x0000b81f
    28d8:	2000007c 	.word	0x2000007c
    28dc:	200027e8 	.word	0x200027e8
    28e0:	200000e0 	.word	0x200000e0

000028e4 <bt_recv_prio>:
{
    28e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    28e6:	7d03      	ldrb	r3, [r0, #20]
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    28e8:	6886      	ldr	r6, [r0, #8]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    28ea:	2b01      	cmp	r3, #1
{
    28ec:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    28ee:	d005      	beq.n	28fc <bt_recv_prio+0x18>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    28f0:	4040      	eors	r0, r0
    28f2:	f380 8811 	msr	BASEPRI, r0
    28f6:	f04f 0004 	mov.w	r0, #4
    28fa:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    28fc:	8983      	ldrh	r3, [r0, #12]
    28fe:	2b01      	cmp	r3, #1
    2900:	d9f6      	bls.n	28f0 <bt_recv_prio+0xc>
    2902:	7833      	ldrb	r3, [r6, #0]
    2904:	3b0e      	subs	r3, #14
    2906:	2b01      	cmp	r3, #1
    2908:	d8f2      	bhi.n	28f0 <bt_recv_prio+0xc>
	net_buf_pull(buf, sizeof(*hdr));
    290a:	f100 0508 	add.w	r5, r0, #8
    290e:	2102      	movs	r1, #2
    2910:	4628      	mov	r0, r5
    2912:	f007 fa9c 	bl	9e4e <net_buf_simple_pull>
	switch (hdr->evt) {
    2916:	7833      	ldrb	r3, [r6, #0]
    2918:	2b0e      	cmp	r3, #14
    291a:	d005      	beq.n	2928 <bt_recv_prio+0x44>
    291c:	2b0f      	cmp	r3, #15
    291e:	d017      	beq.n	2950 <bt_recv_prio+0x6c>
		net_buf_unref(buf);
    2920:	4620      	mov	r0, r4
    2922:	f007 fa53 	bl	9dcc <net_buf_unref>
    2926:	e7e3      	b.n	28f0 <bt_recv_prio+0xc>
	u8_t status, ncmd = evt->ncmd;
    2928:	68a3      	ldr	r3, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    292a:	2103      	movs	r1, #3
    292c:	4628      	mov	r0, r5
	u8_t status, ncmd = evt->ncmd;
    292e:	781e      	ldrb	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    2930:	f007 fa8d 	bl	9e4e <net_buf_simple_pull>
	status = buf->data[0];
    2934:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    2936:	4621      	mov	r1, r4
    2938:	7818      	ldrb	r0, [r3, #0]
    293a:	f7ff fac9 	bl	1ed0 <hci_cmd_done.isra.9>
	if (ncmd) {
    293e:	b116      	cbz	r6, 2946 <bt_recv_prio+0x62>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    2940:	480a      	ldr	r0, [pc, #40]	; (296c <bt_recv_prio+0x88>)
    2942:	f007 febb 	bl	a6bc <_impl_k_sem_give>
	net_buf_unref(buf);
    2946:	4620      	mov	r0, r4
    2948:	f007 fa40 	bl	9dcc <net_buf_unref>
}
    294c:	2000      	movs	r0, #0
    294e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    2950:	68a6      	ldr	r6, [r4, #8]
	net_buf_pull(buf, sizeof(*evt));
    2952:	2104      	movs	r1, #4
	u8_t ncmd = evt->ncmd;
    2954:	7877      	ldrb	r7, [r6, #1]
	net_buf_pull(buf, sizeof(*evt));
    2956:	4628      	mov	r0, r5
    2958:	f007 fa79 	bl	9e4e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    295c:	4621      	mov	r1, r4
    295e:	7830      	ldrb	r0, [r6, #0]
    2960:	f7ff fab6 	bl	1ed0 <hci_cmd_done.isra.9>
	if (ncmd) {
    2964:	2f00      	cmp	r7, #0
    2966:	d0ee      	beq.n	2946 <bt_recv_prio+0x62>
    2968:	e7ea      	b.n	2940 <bt_recv_prio+0x5c>
    296a:	bf00      	nop
    296c:	20006068 	.word	0x20006068

00002970 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    2970:	4a08      	ldr	r2, [pc, #32]	; (2994 <bt_hci_driver_register+0x24>)
    2972:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2976:	b93b      	cbnz	r3, 2988 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    2978:	6881      	ldr	r1, [r0, #8]
    297a:	b141      	cbz	r1, 298e <bt_hci_driver_register+0x1e>
    297c:	68c1      	ldr	r1, [r0, #12]
    297e:	b131      	cbz	r1, 298e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    2980:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	return 0;
    2984:	4618      	mov	r0, r3
    2986:	4770      	bx	lr
		return -EALREADY;
    2988:	f06f 0044 	mvn.w	r0, #68	; 0x44
    298c:	4770      	bx	lr
		return -EINVAL;
    298e:	f06f 0015 	mvn.w	r0, #21
}
    2992:	4770      	bx	lr
    2994:	20005fe0 	.word	0x20005fe0

00002998 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    2998:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    299a:	4d24      	ldr	r5, [pc, #144]	; (2a2c <bt_enable+0x94>)
    299c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
{
    29a0:	b086      	sub	sp, #24
    29a2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    29a4:	2b00      	cmp	r3, #0
    29a6:	d03b      	beq.n	2a20 <bt_enable+0x88>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    29a8:	2101      	movs	r1, #1
    29aa:	f105 0070 	add.w	r0, r5, #112	; 0x70
    29ae:	f7ff fa6d 	bl	1e8c <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    29b2:	f010 0001 	ands.w	r0, r0, #1
    29b6:	d136      	bne.n	2a26 <bt_enable+0x8e>
		return -EALREADY;
	}

	ready_cb = cb;
    29b8:	4b1d      	ldr	r3, [pc, #116]	; (2a30 <bt_enable+0x98>)

    29ba:	491e      	ldr	r1, [pc, #120]	; (2a34 <bt_enable+0x9c>)
    29bc:	601e      	str	r6, [r3, #0]
    29be:	f06f 0308 	mvn.w	r3, #8
    29c2:	9005      	str	r0, [sp, #20]
    29c4:	9004      	str	r0, [sp, #16]
    29c6:	9303      	str	r3, [sp, #12]
    29c8:	9002      	str	r0, [sp, #8]
    29ca:	9001      	str	r0, [sp, #4]
    29cc:	9000      	str	r0, [sp, #0]
    29ce:	4b1a      	ldr	r3, [pc, #104]	; (2a38 <bt_enable+0xa0>)
    29d0:	481a      	ldr	r0, [pc, #104]	; (2a3c <bt_enable+0xa4>)
    29d2:	f44f 7220 	mov.w	r2, #640	; 0x280
    29d6:	f008 f893 	bl	ab00 <_impl_k_thread_create>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    29da:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    29de:	689b      	ldr	r3, [r3, #8]
    29e0:	4798      	blx	r3
	if (err) {
    29e2:	4604      	mov	r4, r0
    29e4:	b960      	cbnz	r0, 2a00 <bt_enable+0x68>
		BT_ERR("HCI driver open failed (%d)", err);
		return err;
	}

	if (!cb) {
    29e6:	b976      	cbnz	r6, 2a06 <bt_enable+0x6e>
	err = hci_init();
    29e8:	f7ff fbae 	bl	2148 <hci_init>
	if (err) {
    29ec:	4604      	mov	r4, r0
    29ee:	b938      	cbnz	r0, 2a00 <bt_enable+0x68>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    29f0:	2102      	movs	r1, #2
    29f2:	f105 0070 	add.w	r0, r5, #112	; 0x70
    29f6:	f7ff fa49 	bl	1e8c <atomic_or>
	bt_le_scan_update(false);
    29fa:	4620      	mov	r0, r4
    29fc:	f7ff fb84 	bl	2108 <bt_le_scan_update>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    2a00:	4620      	mov	r0, r4
    2a02:	b006      	add	sp, #24
    2a04:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2a06:	2101      	movs	r1, #1
    2a08:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2a0c:	f7ff fa3e 	bl	1e8c <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    2a10:	07c3      	lsls	r3, r0, #31
    2a12:	d4f5      	bmi.n	2a00 <bt_enable+0x68>
		k_queue_append(&work_q->queue, work);
    2a14:	f105 0164 	add.w	r1, r5, #100	; 0x64
    2a18:	4809      	ldr	r0, [pc, #36]	; (2a40 <bt_enable+0xa8>)
    2a1a:	f007 fc04 	bl	a226 <k_queue_append>
    2a1e:	e7ef      	b.n	2a00 <bt_enable+0x68>
		return -ENODEV;
    2a20:	f06f 0412 	mvn.w	r4, #18
    2a24:	e7ec      	b.n	2a00 <bt_enable+0x68>
		return -EALREADY;
    2a26:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2a2a:	e7e9      	b.n	2a00 <bt_enable+0x68>
    2a2c:	20005fe0 	.word	0x20005fe0
    2a30:	200000dc 	.word	0x200000dc
    2a34:	200035f8 	.word	0x200035f8
    2a38:	00002569 	.word	0x00002569
    2a3c:	200000e4 	.word	0x200000e4
    2a40:	20003580 	.word	0x20003580

00002a44 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    2a44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    2a48:	7803      	ldrb	r3, [r0, #0]
    2a4a:	2b01      	cmp	r3, #1
{
    2a4c:	4605      	mov	r5, r0
    2a4e:	460f      	mov	r7, r1
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    2a50:	d810      	bhi.n	2a74 <bt_le_scan_start+0x30>
	if (param->filter_dup != BT_HCI_LE_SCAN_FILTER_DUP_DISABLE &&
    2a52:	7843      	ldrb	r3, [r0, #1]
    2a54:	2b01      	cmp	r3, #1
    2a56:	d80d      	bhi.n	2a74 <bt_le_scan_start+0x30>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    2a58:	8841      	ldrh	r1, [r0, #2]
    2a5a:	1f0b      	subs	r3, r1, #4
    2a5c:	b29b      	uxth	r3, r3
    2a5e:	f643 70fc 	movw	r0, #16380	; 0x3ffc
    2a62:	4283      	cmp	r3, r0
    2a64:	d806      	bhi.n	2a74 <bt_le_scan_start+0x30>
	if (param->window < 0x0004 || param->window > 0x4000) {
    2a66:	88aa      	ldrh	r2, [r5, #4]
    2a68:	1f13      	subs	r3, r2, #4
    2a6a:	b29b      	uxth	r3, r3
    2a6c:	4283      	cmp	r3, r0
    2a6e:	d801      	bhi.n	2a74 <bt_le_scan_start+0x30>
	if (param->window > param->interval) {
    2a70:	4291      	cmp	r1, r2
    2a72:	d26c      	bcs.n	2b4e <bt_le_scan_start+0x10a>
	int err;

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    2a74:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    2a78:	4620      	mov	r0, r4
    2a7a:	b002      	add	sp, #8
    2a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    2a80:	2007      	movs	r0, #7
    2a82:	f7ff fa4d 	bl	1f20 <atomic_test_bit.constprop.25>
    2a86:	b150      	cbz	r0, 2a9e <bt_le_scan_start+0x5a>
		err = set_le_scan_enable(BT_HCI_LE_SCAN_DISABLE);
    2a88:	4608      	mov	r0, r1
    2a8a:	f7ff fb09 	bl	20a0 <set_le_scan_enable>
		if (err) {
    2a8e:	4604      	mov	r4, r0
    2a90:	b128      	cbz	r0, 2a9e <bt_le_scan_start+0x5a>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2a92:	f46f 7180 	mvn.w	r1, #256	; 0x100
    2a96:	4835      	ldr	r0, [pc, #212]	; (2b6c <bt_le_scan_start+0x128>)
    2a98:	f7ff fa09 	bl	1eae <atomic_and>
		return err;
    2a9c:	e7ec      	b.n	2a78 <bt_le_scan_start+0x34>
	if (param->filter_dup) {
    2a9e:	786b      	ldrb	r3, [r5, #1]
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d048      	beq.n	2b36 <bt_le_scan_start+0xf2>
	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2aa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    2aa8:	4830      	ldr	r0, [pc, #192]	; (2b6c <bt_le_scan_start+0x128>)
    2aaa:	f7ff f9ef 	bl	1e8c <atomic_or>
	memset(&set_param, 0, sizeof(set_param));
    2aae:	2207      	movs	r2, #7
    2ab0:	2100      	movs	r1, #0
    2ab2:	4668      	mov	r0, sp
	err = start_le_scan(param->type, param->interval, param->window);
    2ab4:	782e      	ldrb	r6, [r5, #0]
    2ab6:	f8b5 8002 	ldrh.w	r8, [r5, #2]
    2aba:	88ac      	ldrh	r4, [r5, #4]
	memset(&set_param, 0, sizeof(set_param));
    2abc:	f7fd fdc8 	bl	650 <memset>
	set_param.filter_policy = 0x00;
    2ac0:	2300      	movs	r3, #0
    2ac2:	f88d 3006 	strb.w	r3, [sp, #6]
		set_param.addr_type =  bt_dev.id_addr.type;
    2ac6:	4b2a      	ldr	r3, [pc, #168]	; (2b70 <bt_le_scan_start+0x12c>)
	set_param.scan_type = scan_type;
    2ac8:	f88d 6000 	strb.w	r6, [sp]
		set_param.addr_type =  bt_dev.id_addr.type;
    2acc:	781b      	ldrb	r3, [r3, #0]
	set_param.interval = sys_cpu_to_le16(interval);
    2ace:	f8ad 8001 	strh.w	r8, [sp, #1]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2ad2:	2e01      	cmp	r6, #1
	set_param.window = sys_cpu_to_le16(window);
    2ad4:	f8ad 4003 	strh.w	r4, [sp, #3]
		set_param.addr_type =  bt_dev.id_addr.type;
    2ad8:	f88d 3005 	strb.w	r3, [sp, #5]
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    2adc:	d10a      	bne.n	2af4 <bt_le_scan_start+0xb0>
		    !atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    2ade:	2005      	movs	r0, #5
    2ae0:	f7ff fa1e 	bl	1f20 <atomic_test_bit.constprop.25>
		    scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    2ae4:	b930      	cbnz	r0, 2af4 <bt_le_scan_start+0xb0>
			err = le_set_private_addr();
    2ae6:	f7ff fac9 	bl	207c <le_set_private_addr>
			if (err) {
    2aea:	4604      	mov	r4, r0
    2aec:	2800      	cmp	r0, #0
    2aee:	d1d0      	bne.n	2a92 <bt_le_scan_start+0x4e>
			set_param.addr_type = BT_ADDR_LE_RANDOM;
    2af0:	f88d 6005 	strb.w	r6, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    2af4:	2107      	movs	r1, #7
    2af6:	f242 000b 	movw	r0, #8203	; 0x200b
    2afa:	f7ff fa23 	bl	1f44 <bt_hci_cmd_create>
	if (!buf) {
    2afe:	4604      	mov	r4, r0
    2b00:	b380      	cbz	r0, 2b64 <bt_le_scan_start+0x120>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    2b02:	2207      	movs	r2, #7
    2b04:	4669      	mov	r1, sp
    2b06:	3008      	adds	r0, #8
    2b08:	f007 f998 	bl	9e3c <net_buf_simple_add_mem>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    2b0c:	4621      	mov	r1, r4
    2b0e:	f242 000b 	movw	r0, #8203	; 0x200b
    2b12:	f7ff fd07 	bl	2524 <bt_hci_cmd_send>
	err = set_le_scan_enable(BT_HCI_LE_SCAN_ENABLE);
    2b16:	2001      	movs	r0, #1
    2b18:	f7ff fac2 	bl	20a0 <set_le_scan_enable>
	if (err) {
    2b1c:	4604      	mov	r4, r0
    2b1e:	2800      	cmp	r0, #0
    2b20:	d1b7      	bne.n	2a92 <bt_le_scan_start+0x4e>
	if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    2b22:	2e01      	cmp	r6, #1
    2b24:	d10d      	bne.n	2b42 <bt_le_scan_start+0xfe>
    2b26:	f44f 7100 	mov.w	r1, #512	; 0x200
    2b2a:	4810      	ldr	r0, [pc, #64]	; (2b6c <bt_le_scan_start+0x128>)
    2b2c:	f7ff f9ae 	bl	1e8c <atomic_or>
	scan_dev_found_cb = cb;
    2b30:	4b10      	ldr	r3, [pc, #64]	; (2b74 <bt_le_scan_start+0x130>)
    2b32:	601f      	str	r7, [r3, #0]
	return 0;
    2b34:	e7a0      	b.n	2a78 <bt_le_scan_start+0x34>
	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2b36:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    2b3a:	480c      	ldr	r0, [pc, #48]	; (2b6c <bt_le_scan_start+0x128>)
    2b3c:	f7ff f9b7 	bl	1eae <atomic_and>
    2b40:	e7b5      	b.n	2aae <bt_le_scan_start+0x6a>
    2b42:	f46f 7100 	mvn.w	r1, #512	; 0x200
    2b46:	4809      	ldr	r0, [pc, #36]	; (2b6c <bt_le_scan_start+0x128>)
    2b48:	f7ff f9b1 	bl	1eae <atomic_and>
    2b4c:	e7f0      	b.n	2b30 <bt_le_scan_start+0xec>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
    2b52:	4806      	ldr	r0, [pc, #24]	; (2b6c <bt_le_scan_start+0x128>)
    2b54:	f7ff f99a 	bl	1e8c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    2b58:	f410 7180 	ands.w	r1, r0, #256	; 0x100
    2b5c:	d090      	beq.n	2a80 <bt_le_scan_start+0x3c>
		return -EALREADY;
    2b5e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2b62:	e789      	b.n	2a78 <bt_le_scan_start+0x34>
		return -ENOBUFS;
    2b64:	f06f 0436 	mvn.w	r4, #54	; 0x36
    2b68:	e793      	b.n	2a92 <bt_le_scan_start+0x4e>
    2b6a:	bf00      	nop
    2b6c:	20006050 	.word	0x20006050
    2b70:	20005fe0 	.word	0x20005fe0
    2b74:	200000e0 	.word	0x200000e0

00002b78 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    2b78:	b538      	push	{r3, r4, r5, lr}
    2b7a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2b7c:	4805      	ldr	r0, [pc, #20]	; (2b94 <bt_buf_get_rx+0x1c>)
    2b7e:	f007 f8f5 	bl	9d6c <net_buf_alloc_fixed>
#endif

	if (buf) {
    2b82:	4604      	mov	r4, r0
    2b84:	b120      	cbz	r0, 2b90 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2b86:	2100      	movs	r1, #0
    2b88:	3008      	adds	r0, #8
    2b8a:	f007 f90e 	bl	9daa <net_buf_simple_reserve>
    2b8e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    2b90:	4620      	mov	r0, r4
    2b92:	bd38      	pop	{r3, r4, r5, pc}
    2b94:	2000630c 	.word	0x2000630c

00002b98 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    2b98:	b510      	push	{r4, lr}
    2b9a:	4601      	mov	r1, r0
	__asm__ volatile(
    2b9c:	f04f 0320 	mov.w	r3, #32
    2ba0:	f3ef 8011 	mrs	r0, BASEPRI
    2ba4:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    2ba8:	4a0b      	ldr	r2, [pc, #44]	; (2bd8 <bt_buf_get_cmd_complete+0x40>)
	bt_dev.sent_cmd = NULL;
    2baa:	2300      	movs	r3, #0
	buf = bt_dev.sent_cmd;
    2bac:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
	bt_dev.sent_cmd = NULL;
    2bb0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2bb4:	f380 8811 	msr	BASEPRI, r0
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    2bb8:	b924      	cbnz	r4, 2bc4 <bt_buf_get_cmd_complete+0x2c>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2bba:	2001      	movs	r0, #1
}
    2bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    2bc0:	f7ff bfda 	b.w	2b78 <bt_buf_get_rx>
    2bc4:	2201      	movs	r2, #1
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2bc6:	f104 0008 	add.w	r0, r4, #8
    2bca:	7522      	strb	r2, [r4, #20]
		buf->len = 0;
    2bcc:	81a3      	strh	r3, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    2bce:	4619      	mov	r1, r3
    2bd0:	f007 f8eb 	bl	9daa <net_buf_simple_reserve>
}
    2bd4:	4620      	mov	r0, r4
    2bd6:	bd10      	pop	{r4, pc}
    2bd8:	20005fe0 	.word	0x20005fe0

00002bdc <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    2bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*mem_head = mem_pool;
    2bde:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2be0:	1dc3      	adds	r3, r0, #7
{
    2be2:	4605      	mov	r5, r0
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2be4:	f023 0303 	bic.w	r3, r3, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2be8:	1e50      	subs	r0, r2, #1
{
    2bea:	460e      	mov	r6, r1
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2bec:	b280      	uxth	r0, r0
{
    2bee:	4614      	mov	r4, r2
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    2bf0:	801a      	strh	r2, [r3, #0]
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2bf2:	2100      	movs	r1, #0
    2bf4:	2204      	movs	r2, #4
    2bf6:	fb06 5000 	mla	r0, r6, r0, r5
    2bfa:	f7fd fd29 	bl	650 <memset>
    2bfe:	3c02      	subs	r4, #2
    2c00:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    2c02:	f64f 77ff 	movw	r7, #65535	; 0xffff
    2c06:	42bc      	cmp	r4, r7
    2c08:	d101      	bne.n	2c0e <mem_init+0x32>
		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    2c0a:	b003      	add	sp, #12
    2c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			       (mem_size * (mem_count + 1)));
    2c0e:	fb04 6006 	mla	r0, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    2c12:	182b      	adds	r3, r5, r0
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2c14:	2204      	movs	r2, #4
    2c16:	1b80      	subs	r0, r0, r6
    2c18:	eb0d 0102 	add.w	r1, sp, r2
    2c1c:	4428      	add	r0, r5
    2c1e:	3c01      	subs	r4, #1
		next = (u32_t)((u8_t *) mem_pool +
    2c20:	9301      	str	r3, [sp, #4]
    2c22:	b2a4      	uxth	r4, r4
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    2c24:	f7fd fce8 	bl	5f8 <memcpy>
    2c28:	e7ed      	b.n	2c06 <mem_init+0x2a>

00002c2a <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    2c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (*mem_head) {
    2c2c:	6805      	ldr	r5, [r0, #0]
{
    2c2e:	4606      	mov	r6, r0
	if (*mem_head) {
    2c30:	b195      	cbz	r5, 2c58 <mem_acquire+0x2e>
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2c32:	1deb      	adds	r3, r5, #7
    2c34:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    2c38:	2204      	movs	r2, #4
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2c3a:	881c      	ldrh	r4, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    2c3c:	4629      	mov	r1, r5
    2c3e:	eb0d 0002 	add.w	r0, sp, r2
    2c42:	f7fd fcd9 	bl	5f8 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2c46:	9b01      	ldr	r3, [sp, #4]
		free_count--;
    2c48:	3c01      	subs	r4, #1
    2c4a:	b2a4      	uxth	r4, r4
		if (head) {
    2c4c:	b11b      	cbz	r3, 2c56 <mem_acquire+0x2c>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    2c4e:	1dda      	adds	r2, r3, #7
    2c50:	f022 0203 	bic.w	r2, r2, #3
    2c54:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    2c56:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    2c58:	4628      	mov	r0, r5
    2c5a:	b002      	add	sp, #8
    2c5c:	bd70      	pop	{r4, r5, r6, pc}

00002c5e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    2c5e:	b570      	push	{r4, r5, r6, lr}
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2c60:	680c      	ldr	r4, [r1, #0]
{
    2c62:	4606      	mov	r6, r0
    2c64:	460d      	mov	r5, r1
	if (*mem_head) {
    2c66:	b11c      	cbz	r4, 2c70 <mem_release+0x12>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    2c68:	1de3      	adds	r3, r4, #7
    2c6a:	f023 0303 	bic.w	r3, r3, #3
    2c6e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2c70:	2204      	movs	r2, #4
    2c72:	4629      	mov	r1, r5
    2c74:	4630      	mov	r0, r6
    2c76:	f7fd fcbf 	bl	5f8 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2c7a:	1df2      	adds	r2, r6, #7
    2c7c:	f022 0203 	bic.w	r2, r2, #3
	free_count++;
    2c80:	1c63      	adds	r3, r4, #1
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    2c82:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    2c84:	602e      	str	r6, [r5, #0]
    2c86:	bd70      	pop	{r4, r5, r6, pc}

00002c88 <mem_get>:
}

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    2c88:	fb02 0001 	mla	r0, r2, r1, r0
    2c8c:	4770      	bx	lr

00002c8e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    2c8e:	1a40      	subs	r0, r0, r1
    2c90:	b280      	uxth	r0, r0
}
    2c92:	fbb0 f0f2 	udiv	r0, r0, r2
    2c96:	4770      	bx	lr

00002c98 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
    2c98:	b510      	push	{r4, lr}
	src += len;
    2c9a:	4411      	add	r1, r2
    2c9c:	3801      	subs	r0, #1
	while (len--) {
    2c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2ca2:	3a01      	subs	r2, #1
    2ca4:	b292      	uxth	r2, r2
    2ca6:	429a      	cmp	r2, r3
    2ca8:	d100      	bne.n	2cac <mem_rcopy+0x14>
		*dst++ = *--src;
	}
}
    2caa:	bd10      	pop	{r4, pc}
		*dst++ = *--src;
    2cac:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
    2cb0:	f800 4f01 	strb.w	r4, [r0, #1]!
    2cb4:	e7f5      	b.n	2ca2 <mem_rcopy+0xa>

00002cb6 <memq_init>:
inline memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem);

memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* head and tail pointer to the initial link */
	*head = *tail = link;
    2cb6:	6010      	str	r0, [r2, #0]
    2cb8:	6008      	str	r0, [r1, #0]

	return link;
}
    2cba:	4770      	bx	lr

00002cbc <memq_enqueue>:

memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    2cbc:	b510      	push	{r4, lr}
	/* make the current tail link's next point to new link */
	(*tail)->next = link;
    2cbe:	6814      	ldr	r4, [r2, #0]
    2cc0:	6020      	str	r0, [r4, #0]

	/* assign mem to current tail link's mem */
	(*tail)->mem = mem;
    2cc2:	6814      	ldr	r4, [r2, #0]
    2cc4:	6061      	str	r1, [r4, #4]

	/* increment the tail! */
	*tail = link;
    2cc6:	6010      	str	r0, [r2, #0]

	return link;
}
    2cc8:	bd10      	pop	{r4, pc}

00002cca <memq_peek>:

memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2cca:	4288      	cmp	r0, r1
    2ccc:	d003      	beq.n	2cd6 <memq_peek+0xc>
		return NULL;
	}

	/* extract the link's mem */
	if (mem) {
    2cce:	b11a      	cbz	r2, 2cd8 <memq_peek+0xe>
		*mem = head->mem;
    2cd0:	6843      	ldr	r3, [r0, #4]
    2cd2:	6013      	str	r3, [r2, #0]
    2cd4:	4770      	bx	lr
		return NULL;
    2cd6:	2000      	movs	r0, #0
	}

	return head;
}
    2cd8:	4770      	bx	lr

00002cda <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(*head, tail, mem);
    2cda:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    2cdc:	4283      	cmp	r3, r0
    2cde:	d009      	beq.n	2cf4 <memq_dequeue+0x1a>
	if (mem) {
    2ce0:	b122      	cbz	r2, 2cec <memq_dequeue+0x12>
		*mem = head->mem;
    2ce2:	6858      	ldr	r0, [r3, #4]
    2ce4:	6010      	str	r0, [r2, #0]
	if (!link) {
		return link;
	}

	/* increment the head to next link node */
	*head = link->next;
    2ce6:	681a      	ldr	r2, [r3, #0]
    2ce8:	600a      	str	r2, [r1, #0]

	return link;
    2cea:	e001      	b.n	2cf0 <memq_dequeue+0x16>
	if (!link) {
    2cec:	2b00      	cmp	r3, #0
    2cee:	d1fa      	bne.n	2ce6 <memq_dequeue+0xc>
}
    2cf0:	4618      	mov	r0, r3
    2cf2:	4770      	bx	lr
		return NULL;
    2cf4:	2300      	movs	r3, #0
    2cf6:	e7fb      	b.n	2cf0 <memq_dequeue+0x16>

00002cf8 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static memq_link_t mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

void mayfly_init(void)
{
    2cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (callee_id--) {
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
    2cfc:	4f11      	ldr	r7, [pc, #68]	; (2d44 <mayfly_init+0x4c>)
    2cfe:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2d48 <mayfly_init+0x50>
	callee_id = MAYFLY_CALLEE_COUNT;
    2d02:	2604      	movs	r6, #4
	while (callee_id--) {
    2d04:	3e01      	subs	r6, #1
    2d06:	b2f6      	uxtb	r6, r6
    2d08:	2eff      	cmp	r6, #255	; 0xff
    2d0a:	d019      	beq.n	2d40 <mayfly_init+0x48>
    2d0c:	b233      	sxth	r3, r6
    2d0e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    2d12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2d16:	011d      	lsls	r5, r3, #4
    2d18:	2404      	movs	r4, #4
    2d1a:	f04f 0a0c 	mov.w	sl, #12
    2d1e:	e00a      	b.n	2d36 <mayfly_init+0x3e>
    2d20:	fb1a 5104 	smlabb	r1, sl, r4, r5
			memq_init(&mfl[callee_id][caller_id],
    2d24:	1d0a      	adds	r2, r1, #4
    2d26:	eb04 0008 	add.w	r0, r4, r8
    2d2a:	443a      	add	r2, r7
    2d2c:	4439      	add	r1, r7
    2d2e:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
    2d32:	f7ff ffc0 	bl	2cb6 <memq_init>
		while (caller_id--) {
    2d36:	3c01      	subs	r4, #1
    2d38:	b2e4      	uxtb	r4, r4
    2d3a:	2cff      	cmp	r4, #255	; 0xff
    2d3c:	d1f0      	bne.n	2d20 <mayfly_init+0x28>
    2d3e:	e7e1      	b.n	2d04 <mayfly_init+0xc>
    2d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d44:	200001cc 	.word	0x200001cc
    2d48:	2000014c 	.word	0x2000014c

00002d4c <mayfly_enable>:
		}
	}
}

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    2d4c:	b4f0      	push	{r4, r5, r6, r7}
    2d4e:	4b12      	ldr	r3, [pc, #72]	; (2d98 <mayfly_enable+0x4c>)
    2d50:	4605      	mov	r5, r0
    2d52:	460f      	mov	r7, r1
    2d54:	260c      	movs	r6, #12
    2d56:	2430      	movs	r4, #48	; 0x30
	if (enable) {
    2d58:	b172      	cbz	r2, 2d78 <mayfly_enable+0x2c>
		if (mft[callee_id][caller_id].enable_req ==
    2d5a:	4361      	muls	r1, r4
    2d5c:	fb06 1400 	mla	r4, r6, r0, r1
    2d60:	4423      	add	r3, r4
    2d62:	7a59      	ldrb	r1, [r3, #9]
    2d64:	7a18      	ldrb	r0, [r3, #8]
    2d66:	4281      	cmp	r1, r0
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    2d68:	bf04      	itt	eq
    2d6a:	3101      	addeq	r1, #1
    2d6c:	7219      	strbeq	r1, [r3, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    2d6e:	4628      	mov	r0, r5
    2d70:	4639      	mov	r1, r7
			mft[callee_id][caller_id].disable_req++;

			mayfly_pend(caller_id, callee_id);
		}
	}
}
    2d72:	bcf0      	pop	{r4, r5, r6, r7}
		mayfly_enable_cb(caller_id, callee_id, enable);
    2d74:	f006 bed2 	b.w	9b1c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    2d78:	434c      	muls	r4, r1
    2d7a:	fb06 4400 	mla	r4, r6, r0, r4
    2d7e:	4423      	add	r3, r4
    2d80:	7a9c      	ldrb	r4, [r3, #10]
    2d82:	7ada      	ldrb	r2, [r3, #11]
    2d84:	42a2      	cmp	r2, r4
    2d86:	d104      	bne.n	2d92 <mayfly_enable+0x46>
			mft[callee_id][caller_id].disable_req++;
    2d88:	3201      	adds	r2, #1
    2d8a:	729a      	strb	r2, [r3, #10]
}
    2d8c:	bcf0      	pop	{r4, r5, r6, r7}
			mayfly_pend(caller_id, callee_id);
    2d8e:	f006 bef3 	b.w	9b78 <mayfly_pend>
}
    2d92:	bcf0      	pop	{r4, r5, r6, r7}
    2d94:	4770      	bx	lr
    2d96:	bf00      	nop
    2d98:	200001cc 	.word	0x200001cc

00002d9c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    2d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d9e:	4605      	mov	r5, r0
    2da0:	460e      	mov	r6, r1
    2da2:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    2da4:	b18a      	cbz	r2, 2dca <mayfly_enqueue+0x2e>
    2da6:	2301      	movs	r3, #1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    2da8:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    2daa:	7820      	ldrb	r0, [r4, #0]
    2dac:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    2dae:	f010 0703 	ands.w	r7, r0, #3
    2db2:	d029      	beq.n	2e08 <mayfly_enqueue+0x6c>
		if (chain) {
    2db4:	b303      	cbz	r3, 2df8 <mayfly_enqueue+0x5c>
			if (state != 1) {
    2db6:	2f01      	cmp	r7, #1
    2db8:	d039      	beq.n	2e2e <mayfly_enqueue+0x92>
				/* mark as ready in queue */
				m->_req = ack + 1;
    2dba:	3201      	adds	r2, #1
    2dbc:	b2d2      	uxtb	r2, r2
    2dbe:	7022      	strb	r2, [r4, #0]
	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    2dc0:	4631      	mov	r1, r6
    2dc2:	4628      	mov	r0, r5
    2dc4:	f006 fed8 	bl	9b78 <mayfly_pend>
    2dc8:	e01c      	b.n	2e04 <mayfly_enqueue+0x68>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2dca:	f006 fec3 	bl	9b54 <mayfly_prio_is_equal>
    2dce:	2800      	cmp	r0, #0
    2dd0:	d0e9      	beq.n	2da6 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    2dd2:	4631      	mov	r1, r6
    2dd4:	4628      	mov	r0, r5
    2dd6:	f006 feaf 	bl	9b38 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2dda:	2800      	cmp	r0, #0
    2ddc:	d0e3      	beq.n	2da6 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    2dde:	2330      	movs	r3, #48	; 0x30
    2de0:	220c      	movs	r2, #12
    2de2:	4373      	muls	r3, r6
    2de4:	fb02 3305 	mla	r3, r2, r5, r3
    2de8:	4a12      	ldr	r2, [pc, #72]	; (2e34 <mayfly_enqueue+0x98>)
    2dea:	441a      	add	r2, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    2dec:	7a93      	ldrb	r3, [r2, #10]
    2dee:	7ad2      	ldrb	r2, [r2, #11]
    2df0:	1a9b      	subs	r3, r3, r2
    2df2:	bf18      	it	ne
    2df4:	2301      	movne	r3, #1
    2df6:	e7d7      	b.n	2da8 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    2df8:	3202      	adds	r2, #2
    2dfa:	b2d2      	uxtb	r2, r2
    2dfc:	7022      	strb	r2, [r4, #0]
		m->fp(m->param);
    2dfe:	68e3      	ldr	r3, [r4, #12]
    2e00:	68a0      	ldr	r0, [r4, #8]
    2e02:	4798      	blx	r3
		return 0;
    2e04:	2000      	movs	r0, #0
    2e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!chain) {
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d0f8      	beq.n	2dfe <mayfly_enqueue+0x62>
	m->_req = ack + 1;
    2e0c:	3201      	adds	r2, #1
    2e0e:	b2d2      	uxtb	r2, r2
    2e10:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    2e12:	2304      	movs	r3, #4
    2e14:	2230      	movs	r2, #48	; 0x30
    2e16:	fb12 3206 	smlabb	r2, r2, r6, r3
    2e1a:	230c      	movs	r3, #12
    2e1c:	fb13 2305 	smlabb	r3, r3, r5, r2
    2e20:	4a04      	ldr	r2, [pc, #16]	; (2e34 <mayfly_enqueue+0x98>)
    2e22:	6860      	ldr	r0, [r4, #4]
    2e24:	441a      	add	r2, r3
    2e26:	4621      	mov	r1, r4
    2e28:	f7ff ff48 	bl	2cbc <memq_enqueue>
    2e2c:	e7c8      	b.n	2dc0 <mayfly_enqueue+0x24>
			return 1;
    2e2e:	4638      	mov	r0, r7

	return 0;
}
    2e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e32:	bf00      	nop
    2e34:	200001cc 	.word	0x200001cc

00002e38 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    2e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e3c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2e40:	b089      	sub	sp, #36	; 0x24
    2e42:	011b      	lsls	r3, r3, #4
	u8_t disable = 0;
	u8_t enable = 0;
    2e44:	f04f 0800 	mov.w	r8, #0
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    2e48:	4e43      	ldr	r6, [pc, #268]	; (2f58 <mayfly_run+0x120>)
    2e4a:	9304      	str	r3, [sp, #16]
{
    2e4c:	4605      	mov	r5, r0
	caller_id = MAYFLY_CALLER_COUNT;
    2e4e:	2404      	movs	r4, #4
	u8_t disable = 0;
    2e50:	f8cd 8004 	str.w	r8, [sp, #4]
	while (caller_id--) {
    2e54:	3c01      	subs	r4, #1
    2e56:	b2e4      	uxtb	r4, r4
    2e58:	2cff      	cmp	r4, #255	; 0xff
    2e5a:	d10b      	bne.n	2e74 <mayfly_run+0x3c>
			mft[callee_id][caller_id].enable_ack =
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    2e5c:	9b01      	ldr	r3, [sp, #4]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d076      	beq.n	2f50 <mayfly_run+0x118>
    2e62:	f1b8 0f00 	cmp.w	r8, #0
    2e66:	d173      	bne.n	2f50 <mayfly_run+0x118>
		mayfly_enable_cb(callee_id, callee_id, 0);
    2e68:	4642      	mov	r2, r8
    2e6a:	4629      	mov	r1, r5
    2e6c:	4628      	mov	r0, r5
    2e6e:	f006 fe55 	bl	9b1c <mayfly_enable_cb>
    2e72:	e06d      	b.n	2f50 <mayfly_run+0x118>
		struct mayfly *m = 0;
    2e74:	f10d 0b20 	add.w	fp, sp, #32
    2e78:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
    2e7a:	270c      	movs	r7, #12
		struct mayfly *m = 0;
    2e7c:	f84b 3d04 	str.w	r3, [fp, #-4]!
		link = memq_peek(mft[callee_id][caller_id].head,
    2e80:	f04f 0930 	mov.w	r9, #48	; 0x30
    2e84:	fb07 f304 	mul.w	r3, r7, r4
    2e88:	fb09 3005 	mla	r0, r9, r5, r3
    2e8c:	1831      	adds	r1, r6, r0
    2e8e:	465a      	mov	r2, fp
    2e90:	6849      	ldr	r1, [r1, #4]
    2e92:	5830      	ldr	r0, [r6, r0]
    2e94:	9302      	str	r3, [sp, #8]
    2e96:	f7ff ff18 	bl	2cca <memq_peek>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2e9a:	9b04      	ldr	r3, [sp, #16]
    2e9c:	fb17 3704 	smlabb	r7, r7, r4, r3
    2ea0:	19f3      	adds	r3, r6, r7
		link = memq_peek(mft[callee_id][caller_id].head,
    2ea2:	4682      	mov	sl, r0
				memq_dequeue(mft[callee_id][caller_id].tail,
    2ea4:	9303      	str	r3, [sp, #12]
		while (link) {
    2ea6:	f1ba 0f00 	cmp.w	sl, #0
    2eaa:	d119      	bne.n	2ee0 <mayfly_run+0xa8>
		if (mft[callee_id][caller_id].disable_req !=
    2eac:	2230      	movs	r2, #48	; 0x30
    2eae:	230c      	movs	r3, #12
    2eb0:	436a      	muls	r2, r5
    2eb2:	fb03 2204 	mla	r2, r3, r4, r2
    2eb6:	4432      	add	r2, r6
    2eb8:	7a91      	ldrb	r1, [r2, #10]
    2eba:	7ad0      	ldrb	r0, [r2, #11]
    2ebc:	4288      	cmp	r0, r1
			mft[callee_id][caller_id].disable_ack =
    2ebe:	bf1e      	ittt	ne
    2ec0:	72d1      	strbne	r1, [r2, #11]
			disable = 1;
    2ec2:	2201      	movne	r2, #1
    2ec4:	9201      	strne	r2, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    2ec6:	2230      	movs	r2, #48	; 0x30
    2ec8:	436a      	muls	r2, r5
    2eca:	fb03 2304 	mla	r3, r3, r4, r2
    2ece:	4433      	add	r3, r6
    2ed0:	7a1a      	ldrb	r2, [r3, #8]
    2ed2:	7a59      	ldrb	r1, [r3, #9]
    2ed4:	4291      	cmp	r1, r2
			mft[callee_id][caller_id].enable_ack =
    2ed6:	bf1c      	itt	ne
    2ed8:	725a      	strbne	r2, [r3, #9]
			enable = 1;
    2eda:	f04f 0801 	movne.w	r8, #1
    2ede:	e7b9      	b.n	2e54 <mayfly_run+0x1c>
			req = m->_req;
    2ee0:	9b07      	ldr	r3, [sp, #28]
    2ee2:	781f      	ldrb	r7, [r3, #0]
			state = (req - m->_ack) & 0x03;
    2ee4:	785a      	ldrb	r2, [r3, #1]
    2ee6:	1abf      	subs	r7, r7, r2
    2ee8:	f007 0703 	and.w	r7, r7, #3
			if (state == 1) {
    2eec:	2f01      	cmp	r7, #1
    2eee:	d104      	bne.n	2efa <mayfly_run+0xc2>
				m->_ack--;
    2ef0:	3a01      	subs	r2, #1
    2ef2:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    2ef4:	6898      	ldr	r0, [r3, #8]
    2ef6:	68da      	ldr	r2, [r3, #12]
    2ef8:	4790      	blx	r2
			req = m->_req;
    2efa:	9a07      	ldr	r2, [sp, #28]
    2efc:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    2efe:	7852      	ldrb	r2, [r2, #1]
			req = m->_req;
    2f00:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    2f02:	1a9a      	subs	r2, r3, r2
    2f04:	f002 0203 	and.w	r2, r2, #3
    2f08:	2a01      	cmp	r2, #1
    2f0a:	9305      	str	r3, [sp, #20]
    2f0c:	d00d      	beq.n	2f2a <mayfly_run+0xf2>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2f0e:	9b02      	ldr	r3, [sp, #8]
    2f10:	9903      	ldr	r1, [sp, #12]
    2f12:	fb09 3005 	mla	r0, r9, r5, r3
    2f16:	4430      	add	r0, r6
    2f18:	2200      	movs	r2, #0
    2f1a:	6840      	ldr	r0, [r0, #4]
    2f1c:	f7ff fedd 	bl	2cda <memq_dequeue>
				m->_link = link;
    2f20:	9a07      	ldr	r2, [sp, #28]
				m->_ack = req;
    2f22:	9b05      	ldr	r3, [sp, #20]
				m->_link = link;
    2f24:	f8c2 a004 	str.w	sl, [r2, #4]
				m->_ack = req;
    2f28:	7053      	strb	r3, [r2, #1]
			link = memq_peek(mft[callee_id][caller_id].head,
    2f2a:	9b02      	ldr	r3, [sp, #8]
    2f2c:	fb09 3305 	mla	r3, r9, r5, r3
    2f30:	18f1      	adds	r1, r6, r3
    2f32:	465a      	mov	r2, fp
    2f34:	6849      	ldr	r1, [r1, #4]
    2f36:	58f0      	ldr	r0, [r6, r3]
    2f38:	f7ff fec7 	bl	2cca <memq_peek>
			if (state == 1) {
    2f3c:	2f01      	cmp	r7, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    2f3e:	4682      	mov	sl, r0
			if (state == 1) {
    2f40:	d1b1      	bne.n	2ea6 <mayfly_run+0x6e>
				if (caller_id || link) {
    2f42:	b90c      	cbnz	r4, 2f48 <mayfly_run+0x110>
    2f44:	2800      	cmp	r0, #0
    2f46:	d0b1      	beq.n	2eac <mayfly_run+0x74>
					mayfly_pend(callee_id, callee_id);
    2f48:	4629      	mov	r1, r5
    2f4a:	4628      	mov	r0, r5
    2f4c:	f006 fe14 	bl	9b78 <mayfly_pend>
	}
}
    2f50:	b009      	add	sp, #36	; 0x24
    2f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f56:	bf00      	nop
    2f58:	200001cc 	.word	0x200001cc

00002f5c <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    2f5c:	b510      	push	{r4, lr}
    2f5e:	1e42      	subs	r2, r0, #1
	u8_t one_count = 0;
    2f60:	2000      	movs	r0, #0

	while (octets_len--) {
    2f62:	3901      	subs	r1, #1
    2f64:	b2c9      	uxtb	r1, r1
    2f66:	29ff      	cmp	r1, #255	; 0xff
    2f68:	d100      	bne.n	2f6c <util_ones_count_get+0x10>
		}
		octets++;
	}

	return one_count;
}
    2f6a:	bd10      	pop	{r4, pc}
		bite = *octets;
    2f6c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    2f70:	2b00      	cmp	r3, #0
    2f72:	d0f6      	beq.n	2f62 <util_ones_count_get+0x6>
			bite &= (bite - 1);
    2f74:	1e5c      	subs	r4, r3, #1
			one_count++;
    2f76:	3001      	adds	r0, #1
			bite &= (bite - 1);
    2f78:	4023      	ands	r3, r4
			one_count++;
    2f7a:	b2c0      	uxtb	r0, r0
    2f7c:	e7f8      	b.n	2f70 <util_ones_count_get+0x14>

00002f7e <ticker_dequeue>:

	return id;
}

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    2f7e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    2f80:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->node[0];
    2f82:	6805      	ldr	r5, [r0, #0]
	current = previous;
    2f84:	461a      	mov	r2, r3
	total = 0;
    2f86:	2400      	movs	r4, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    2f88:	2aff      	cmp	r2, #255	; 0xff
    2f8a:	d101      	bne.n	2f90 <ticker_dequeue+0x12>
		current = ticker_current->next;
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    2f8c:	2000      	movs	r0, #0
    2f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticker_current = &node[current];
    2f90:	eb02 0782 	add.w	r7, r2, r2, lsl #2
		if (current == id) {
    2f94:	428a      	cmp	r2, r1
		ticker_current = &node[current];
    2f96:	eb05 06c7 	add.w	r6, r5, r7, lsl #3
    2f9a:	f815 7037 	ldrb.w	r7, [r5, r7, lsl #3]
		if (current == id) {
    2f9e:	d004      	beq.n	2faa <ticker_dequeue+0x2c>
		total += ticker_current->ticks_to_expire;
    2fa0:	68b3      	ldr	r3, [r6, #8]
    2fa2:	441c      	add	r4, r3
		current = ticker_current->next;
    2fa4:	4613      	mov	r3, r2
    2fa6:	463a      	mov	r2, r7
    2fa8:	e7ee      	b.n	2f88 <ticker_dequeue+0xa>
	}

	/* ticker is the first in the list */
	if (previous == current) {
    2faa:	4293      	cmp	r3, r2
    2fac:	d100      	bne.n	2fb0 <ticker_dequeue+0x32>
		instance->ticker_id_head = ticker_current->next;
    2fae:	7747      	strb	r7, [r0, #29]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    2fb0:	b21b      	sxth	r3, r3
    2fb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2fb6:	7832      	ldrb	r2, [r6, #0]
	timeout = ticker_current->ticks_to_expire;
    2fb8:	68b0      	ldr	r0, [r6, #8]
	node[previous].next = ticker_current->next;
    2fba:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    2fbe:	7833      	ldrb	r3, [r6, #0]
    2fc0:	2bff      	cmp	r3, #255	; 0xff
    2fc2:	d006      	beq.n	2fd2 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
    2fc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2fc8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    2fcc:	689a      	ldr	r2, [r3, #8]
    2fce:	4402      	add	r2, r0
    2fd0:	609a      	str	r2, [r3, #8]
	}

	return (total + timeout);
    2fd2:	4420      	add	r0, r4
    2fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002fd6 <ticks_to_expire_prep>:
			   instance);
}

static void ticks_to_expire_prep(struct ticker_node *ticker,
				 u32_t ticks_current, u32_t ticks_at_start)
{
    2fd6:	b530      	push	{r4, r5, lr}
	u32_t ticks_to_expire = ticker->ticks_to_expire;
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2fd8:	1a55      	subs	r5, r2, r1
    2fda:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
	u32_t ticks_to_expire = ticker->ticks_to_expire;
    2fde:	6883      	ldr	r3, [r0, #8]
	u32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    2fe0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_MSBIT))) {
    2fe2:	d109      	bne.n	2ff8 <ticks_to_expire_prep+0x22>
	return cntr_cnt_get();
}

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2fe4:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    2fe8:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    2fea:	42a2      	cmp	r2, r4
    2fec:	d90e      	bls.n	300c <ticks_to_expire_prep+0x36>
		ticks_to_expire -= ticks_to_expire_minus;
    2fee:	1b12      	subs	r2, r2, r4
		ticks_to_expire_minus = 0;
    2ff0:	2400      	movs	r4, #0
	ticker->ticks_to_expire = ticks_to_expire;
    2ff2:	6082      	str	r2, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    2ff4:	6144      	str	r4, [r0, #20]
    2ff6:	bd30      	pop	{r4, r5, pc}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    2ff8:	1a8a      	subs	r2, r1, r2
    2ffa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    2ffe:	4293      	cmp	r3, r2
    3000:	d901      	bls.n	3006 <ticks_to_expire_prep+0x30>
			ticks_to_expire -= delta_current_start;
    3002:	1a9a      	subs	r2, r3, r2
    3004:	e7f1      	b.n	2fea <ticks_to_expire_prep+0x14>
    3006:	4422      	add	r2, r4
			ticks_to_expire_minus +=
    3008:	1ad4      	subs	r4, r2, r3
			ticks_to_expire = 0;
    300a:	2200      	movs	r2, #0
		ticks_to_expire_minus -= ticks_to_expire;
    300c:	1aa4      	subs	r4, r4, r2
		ticks_to_expire = 0;
    300e:	2200      	movs	r2, #0
    3010:	e7ef      	b.n	2ff2 <ticks_to_expire_prep+0x1c>

00003012 <ticker_job_op_cb>:
{
    3012:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    3014:	2200      	movs	r2, #0
    3016:	701a      	strb	r2, [r3, #0]
	if (user_op->fp_op_func) {
    3018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	user_op->status = status;
    301a:	6259      	str	r1, [r3, #36]	; 0x24
{
    301c:	4608      	mov	r0, r1
	if (user_op->fp_op_func) {
    301e:	b10a      	cbz	r2, 3024 <ticker_job_op_cb+0x12>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    3020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3022:	4710      	bx	r2
    3024:	4770      	bx	lr

00003026 <ticker_worker>:
{
    3026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (instance->job_guard) {
    302a:	7f85      	ldrb	r5, [r0, #30]
	instance->worker_trigger = 1;
    302c:	2301      	movs	r3, #1
{
    302e:	4604      	mov	r4, r0
	instance->worker_trigger = 1;
    3030:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    3032:	2d00      	cmp	r5, #0
    3034:	d14c      	bne.n	30d0 <ticker_worker+0xaa>
	if (instance->ticker_id_head == TICKER_NULL) {
    3036:	7f43      	ldrb	r3, [r0, #29]
    3038:	2bff      	cmp	r3, #255	; 0xff
    303a:	d102      	bne.n	3042 <ticker_worker+0x1c>
		instance->worker_trigger = 0;
    303c:	77c5      	strb	r5, [r0, #31]
		return;
    303e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    3042:	f006 f913 	bl	926c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3046:	6967      	ldr	r7, [r4, #20]
	ticker_id_head = instance->ticker_id_head;
    3048:	7f66      	ldrb	r6, [r4, #29]
	node = &instance->node[0];
    304a:	f8d4 8000 	ldr.w	r8, [r4]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    304e:	1bc7      	subs	r7, r0, r7
    3050:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
	while (ticker_id_head != TICKER_NULL) {
    3054:	2eff      	cmp	r6, #255	; 0xff
    3056:	d006      	beq.n	3066 <ticker_worker+0x40>
		ticker = &node[ticker_id_head];
    3058:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    305c:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    3060:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3062:	429f      	cmp	r7, r3
    3064:	d218      	bcs.n	3098 <ticker_worker+0x72>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    3066:	7aa2      	ldrb	r2, [r4, #10]
    3068:	7ae3      	ldrb	r3, [r4, #11]
    306a:	4293      	cmp	r3, r2
    306c:	d105      	bne.n	307a <ticker_worker+0x54>
		last = instance->ticks_elapsed_last + 1;
    306e:	3301      	adds	r3, #1
    3070:	b2db      	uxtb	r3, r3
			last = 0;
    3072:	2b02      	cmp	r3, #2
    3074:	bf08      	it	eq
    3076:	2300      	moveq	r3, #0
		instance->ticks_elapsed_last = last;
    3078:	72e3      	strb	r3, [r4, #11]
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    307a:	7ae3      	ldrb	r3, [r4, #11]
    307c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3080:	2201      	movs	r2, #1
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    3082:	60dd      	str	r5, [r3, #12]
	instance->worker_trigger = 0;
    3084:	2300      	movs	r3, #0
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3086:	6a65      	ldr	r5, [r4, #36]	; 0x24
	instance->worker_trigger = 0;
    3088:	77e3      	strb	r3, [r4, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    308a:	46ac      	mov	ip, r5
    308c:	4623      	mov	r3, r4
    308e:	2104      	movs	r1, #4
    3090:	2003      	movs	r0, #3
}
    3092:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    3096:	4760      	bx	ip
		ticks_elapsed -= ticks_to_expire;
    3098:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    309a:	441d      	add	r5, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    309c:	788a      	ldrb	r2, [r1, #2]
    309e:	784b      	ldrb	r3, [r1, #1]
		ticker_id_head = ticker->next;
    30a0:	f818 6036 	ldrb.w	r6, [r8, r6, lsl #3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    30a4:	1a9b      	subs	r3, r3, r2
    30a6:	b2db      	uxtb	r3, r3
    30a8:	2b01      	cmp	r3, #1
    30aa:	d1d3      	bne.n	3054 <ticker_worker+0x2e>
		if (ticker->timeout_func) {
    30ac:	f8d1 900c 	ldr.w	r9, [r1, #12]
		ticker->ack--;
    30b0:	3a01      	subs	r2, #1
    30b2:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
    30b4:	f1b9 0f00 	cmp.w	r9, #0
    30b8:	d0cc      	beq.n	3054 <ticker_worker+0x2e>
					   ticks_expired -
    30ba:	6948      	ldr	r0, [r1, #20]
    30bc:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    30be:	8bca      	ldrh	r2, [r1, #30]
					   ticks_expired -
    30c0:	1a28      	subs	r0, r5, r0
    30c2:	4418      	add	r0, r3
			ticker->timeout_func(ticks_at_expire,
    30c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    30c8:	690b      	ldr	r3, [r1, #16]
    30ca:	6a49      	ldr	r1, [r1, #36]	; 0x24
    30cc:	47c8      	blx	r9
    30ce:	e7c1      	b.n	3054 <ticker_worker+0x2e>
    30d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000030d4 <ticker_job>:
{
    30d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->worker_trigger) {
    30d8:	7fc2      	ldrb	r2, [r0, #31]
{
    30da:	b093      	sub	sp, #76	; 0x4c
    30dc:	4683      	mov	fp, r0
	if (instance->worker_trigger) {
    30de:	2a00      	cmp	r2, #0
    30e0:	f040 83b5 	bne.w	384e <ticker_job+0x77a>
	ticks_previous = instance->ticks_current;
    30e4:	6943      	ldr	r3, [r0, #20]
    30e6:	9305      	str	r3, [sp, #20]
	instance->job_guard = 1;
    30e8:	2101      	movs	r1, #1
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    30ea:	7a83      	ldrb	r3, [r0, #10]
	instance->job_guard = 1;
    30ec:	7781      	strb	r1, [r0, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    30ee:	7ac0      	ldrb	r0, [r0, #11]
    30f0:	4298      	cmp	r0, r3
    30f2:	f000 808f 	beq.w	3214 <ticker_job+0x140>
		first = instance->ticks_elapsed_first + 1;
    30f6:	440b      	add	r3, r1
    30f8:	b2db      	uxtb	r3, r3
			first = 0;
    30fa:	2b02      	cmp	r3, #2
    30fc:	bf08      	it	eq
    30fe:	2300      	moveq	r3, #0
		instance->ticks_elapsed_first = first;
    3100:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    3104:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		flag_elapsed = 1;
    3108:	9101      	str	r1, [sp, #4]
		ticks_elapsed =
    310a:	f8d3 800c 	ldr.w	r8, [r3, #12]
		instance->ticks_current += ticks_elapsed;
    310e:	9b05      	ldr	r3, [sp, #20]
    3110:	4443      	add	r3, r8
		instance->ticks_current &= 0x00FFFFFF;
    3112:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3116:	f8cb 3014 	str.w	r3, [fp, #20]
	ticker_id_old_head = instance->ticker_id_head;
    311a:	f89b 301d 	ldrb.w	r3, [fp, #29]
    311e:	9303      	str	r3, [sp, #12]
	node = &instance->node[0];
    3120:	f8db 3000 	ldr.w	r3, [fp]
    3124:	9304      	str	r3, [sp, #16]
	users = &instance->user[0];
    3126:	f8db 3004 	ldr.w	r3, [fp, #4]
    312a:	930b      	str	r3, [sp, #44]	; 0x2c
    312c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    3130:	3b01      	subs	r3, #1
    3132:	b2db      	uxtb	r3, r3
    3134:	9302      	str	r3, [sp, #8]
	pending = 0;
    3136:	2300      	movs	r3, #0
    3138:	9307      	str	r3, [sp, #28]
	insert_head = TICKER_NULL;
    313a:	f04f 0aff 	mov.w	sl, #255	; 0xff
	while (count_user--) {
    313e:	9b02      	ldr	r3, [sp, #8]
    3140:	2bff      	cmp	r3, #255	; 0xff
    3142:	d16a      	bne.n	321a <ticker_job+0x146>
	if (instance->ticker_id_head != ticker_id_old_head) {
    3144:	f89b 301d 	ldrb.w	r3, [fp, #29]
	flag_compare_update = 0;
    3148:	9a03      	ldr	r2, [sp, #12]
    314a:	1a9b      	subs	r3, r3, r2
    314c:	bf18      	it	ne
    314e:	2301      	movne	r3, #1
    3150:	9302      	str	r3, [sp, #8]
	if (flag_elapsed) {
    3152:	9b01      	ldr	r3, [sp, #4]
    3154:	b1e3      	cbz	r3, 3190 <ticker_job+0xbc>
	node = &instance->node[0];
    3156:	f8db 3000 	ldr.w	r3, [fp]
    315a:	9304      	str	r3, [sp, #16]
	ticks_expired = 0;
    315c:	f04f 0900 	mov.w	r9, #0
	while (instance->ticker_id_head != TICKER_NULL) {
    3160:	f89b 601d 	ldrb.w	r6, [fp, #29]
    3164:	2eff      	cmp	r6, #255	; 0xff
    3166:	d00c      	beq.n	3182 <ticker_job+0xae>
		ticker = &node[id_expired];
    3168:	b237      	sxth	r7, r6
    316a:	9b04      	ldr	r3, [sp, #16]
    316c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    3170:	eb03 04c7 	add.w	r4, r3, r7, lsl #3
		ticks_to_expire = ticker->ticks_to_expire;
    3174:	68a5      	ldr	r5, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3176:	4545      	cmp	r5, r8
    3178:	f240 8136 	bls.w	33e8 <ticker_job+0x314>
			ticker->ticks_to_expire -= ticks_elapsed;
    317c:	eba5 0508 	sub.w	r5, r5, r8
    3180:	60a5      	str	r5, [r4, #8]
			flag_compare_update = 1;
    3182:	9b02      	ldr	r3, [sp, #8]
    3184:	9a01      	ldr	r2, [sp, #4]
    3186:	9903      	ldr	r1, [sp, #12]
    3188:	42b1      	cmp	r1, r6
    318a:	bf18      	it	ne
    318c:	4613      	movne	r3, r2
    318e:	9302      	str	r3, [sp, #8]
	node = &instance->node[0];
    3190:	f8db 3000 	ldr.w	r3, [fp]
    3194:	9308      	str	r3, [sp, #32]
	users = &instance->user[0];
    3196:	f8db 3004 	ldr.w	r3, [fp, #4]
    319a:	9310      	str	r3, [sp, #64]	; 0x40
    319c:	f89b 3009 	ldrb.w	r3, [fp, #9]
    31a0:	3b01      	subs	r3, #1
    31a2:	b2db      	uxtb	r3, r3
    31a4:	9301      	str	r3, [sp, #4]
	while (count_user--) {
    31a6:	9b01      	ldr	r3, [sp, #4]
    31a8:	2bff      	cmp	r3, #255	; 0xff
    31aa:	f040 8170 	bne.w	348e <ticker_job+0x3ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
    31ae:	f89b 301d 	ldrb.w	r3, [fp, #29]
    31b2:	9a03      	ldr	r2, [sp, #12]
    31b4:	4293      	cmp	r3, r2
	if (!pending) {
    31b6:	9b07      	ldr	r3, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
    31b8:	f040 8340 	bne.w	383c <ticker_job+0x768>
	if (!pending) {
    31bc:	b95b      	cbnz	r3, 31d6 <ticker_job+0x102>
    31be:	f89b 4009 	ldrb.w	r4, [fp, #9]
	users = &instance->user[0];
    31c2:	f8db 3004 	ldr.w	r3, [fp, #4]
    31c6:	9301      	str	r3, [sp, #4]
    31c8:	3c01      	subs	r4, #1
    31ca:	b2e4      	uxtb	r4, r4
		uop->status = TICKER_STATUS_SUCCESS;
    31cc:	f04f 0800 	mov.w	r8, #0
	while (count_user--) {
    31d0:	2cff      	cmp	r4, #255	; 0xff
    31d2:	f040 82a0 	bne.w	3716 <ticker_job+0x642>
	instance->job_guard = 0;
    31d6:	2300      	movs	r3, #0
    31d8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    31dc:	9b02      	ldr	r3, [sp, #8]
    31de:	b14b      	cbz	r3, 31f4 <ticker_job+0x120>
	if (instance->ticker_id_head == TICKER_NULL) {
    31e0:	f89b 301d 	ldrb.w	r3, [fp, #29]
    31e4:	2bff      	cmp	r3, #255	; 0xff
    31e6:	f040 82e9 	bne.w	37bc <ticker_job+0x6e8>
		if (cntr_stop() == 0) {
    31ea:	f006 f827 	bl	923c <cntr_stop>
    31ee:	b908      	cbnz	r0, 31f4 <ticker_job+0x120>
			instance->ticks_slot_previous = 0;
    31f0:	f8cb 0018 	str.w	r0, [fp, #24]
	if (instance->worker_trigger) {
    31f4:	f89b 301f 	ldrb.w	r3, [fp, #31]
    31f8:	2b00      	cmp	r3, #0
    31fa:	f000 8328 	beq.w	384e <ticker_job+0x77a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    31fe:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    3202:	465b      	mov	r3, fp
    3204:	2201      	movs	r2, #1
    3206:	2103      	movs	r1, #3
    3208:	2004      	movs	r0, #4
    320a:	46a4      	mov	ip, r4
}
    320c:	b013      	add	sp, #76	; 0x4c
    320e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    3212:	4760      	bx	ip
		flag_elapsed = 0;
    3214:	9201      	str	r2, [sp, #4]
		ticks_elapsed = 0;
    3216:	4690      	mov	r8, r2
    3218:	e77f      	b.n	311a <ticker_job+0x46>
		user = &users[count_user];
    321a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    321c:	9a02      	ldr	r2, [sp, #8]
    321e:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    3222:	687b      	ldr	r3, [r7, #4]
    3224:	9306      	str	r3, [sp, #24]
		while (user->middle != user->last) {
    3226:	78f9      	ldrb	r1, [r7, #3]
    3228:	78be      	ldrb	r6, [r7, #2]
    322a:	428e      	cmp	r6, r1
    322c:	f000 80d7 	beq.w	33de <ticker_job+0x30a>
			user_op = &user_ops[user->middle];
    3230:	9b06      	ldr	r3, [sp, #24]
			if (middle == user->count_user_op) {
    3232:	7838      	ldrb	r0, [r7, #0]
			user_op = &user_ops[user->middle];
    3234:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    3238:	0112      	lsls	r2, r2, #4
    323a:	189d      	adds	r5, r3, r2
			middle = user->middle + 1;
    323c:	1c73      	adds	r3, r6, #1
    323e:	b2db      	uxtb	r3, r3
				middle = 0;
    3240:	4298      	cmp	r0, r3
    3242:	bf08      	it	eq
    3244:	2300      	moveq	r3, #0
			user->middle = middle;
    3246:	70bb      	strb	r3, [r7, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    3248:	9b06      	ldr	r3, [sp, #24]
    324a:	5c9a      	ldrb	r2, [r3, r2]
    324c:	2a03      	cmp	r2, #3
    324e:	d9eb      	bls.n	3228 <ticker_job+0x154>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    3250:	2a05      	cmp	r2, #5
    3252:	d817      	bhi.n	3284 <ticker_job+0x1b0>
			ticker = &node[user_op->id];
    3254:	7869      	ldrb	r1, [r5, #1]
    3256:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    325a:	930a      	str	r3, [sp, #40]	; 0x28
    325c:	980a      	ldr	r0, [sp, #40]	; 0x28
    325e:	9b04      	ldr	r3, [sp, #16]
    3260:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
			state = (ticker->req - ticker->ack) & 0xff;
    3264:	7863      	ldrb	r3, [r4, #1]
    3266:	78a0      	ldrb	r0, [r4, #2]
    3268:	1a1b      	subs	r3, r3, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
    326a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    326e:	d009      	beq.n	3284 <ticker_job+0x1b0>
			    (state == 0) ||
    3270:	2a04      	cmp	r2, #4
    3272:	d10c      	bne.n	328e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_drift_plus == 0) &&
    3274:	686a      	ldr	r2, [r5, #4]
    3276:	b952      	cbnz	r2, 328e <ticker_job+0x1ba>
			     (user_op->params.update.ticks_slot_plus == 0) &&
    3278:	68aa      	ldr	r2, [r5, #8]
    327a:	b942      	cbnz	r2, 328e <ticker_job+0x1ba>
			     (user_op->params.update.lazy == 0) &&
    327c:	68ea      	ldr	r2, [r5, #12]
    327e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    3282:	d104      	bne.n	328e <ticker_job+0x1ba>
				ticker_job_op_cb(user_op,
    3284:	2101      	movs	r1, #1
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    3286:	4628      	mov	r0, r5
    3288:	f7ff fec3 	bl	3012 <ticker_job_op_cb>
    328c:	e7cb      	b.n	3226 <ticker_job+0x152>
			if (state == 1) {
    328e:	2b01      	cmp	r3, #1
    3290:	f040 809b 	bne.w	33ca <ticker_job+0x2f6>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    3294:	4658      	mov	r0, fp
    3296:	f7ff fe72 	bl	2f7e <ticker_dequeue>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    329a:	782b      	ldrb	r3, [r5, #0]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    329c:	60a0      	str	r0, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    329e:	2b04      	cmp	r3, #4
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    32a0:	4606      	mov	r6, r0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    32a2:	f040 8084 	bne.w	33ae <ticker_job+0x2da>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    32a6:	f8db 3014 	ldr.w	r3, [fp, #20]
    32aa:	9308      	str	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    32ac:	f005 ffde 	bl	926c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    32b0:	9b08      	ldr	r3, [sp, #32]
	ticks_now = cntr_cnt_get();
    32b2:	9009      	str	r0, [sp, #36]	; 0x24
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    32b4:	1ac3      	subs	r3, r0, r3
    32b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    32ba:	4443      	add	r3, r8
	if (ticks_to_expire > ticks_elapsed) {
    32bc:	429e      	cmp	r6, r3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    32be:	4602      	mov	r2, r0
		ticker->ticks_to_expire_minus += ticks_elapsed -
    32c0:	bf9e      	ittt	ls
    32c2:	6962      	ldrls	r2, [r4, #20]
    32c4:	1b92      	subls	r2, r2, r6
    32c6:	189b      	addls	r3, r3, r2
	if ((ticker->ticks_periodic != 0) &&
    32c8:	6862      	ldr	r2, [r4, #4]
		ticker->ticks_to_expire_minus += ticks_elapsed -
    32ca:	bf96      	itet	ls
    32cc:	6163      	strls	r3, [r4, #20]
		ticks_to_expire -= ticks_elapsed;
    32ce:	1af3      	subhi	r3, r6, r3
		ticks_to_expire = 0;
    32d0:	2300      	movls	r3, #0
	if ((ticker->ticks_periodic != 0) &&
    32d2:	b18a      	cbz	r2, 32f8 <ticker_job+0x224>
	    (user_op->params.update.lazy != 0)) {
    32d4:	89a9      	ldrh	r1, [r5, #12]
	if ((ticker->ticks_periodic != 0) &&
    32d6:	b179      	cbz	r1, 32f8 <ticker_job+0x224>
		user_op->params.update.lazy--;
    32d8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
    32dc:	fa1f fe8e 	uxth.w	lr, lr
    32e0:	f8a5 e00c 	strh.w	lr, [r5, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    32e4:	429a      	cmp	r2, r3
    32e6:	d32b      	bcc.n	3340 <ticker_job+0x26c>
		ticker->remainder_current -= 30517578UL;
    32e8:	f8df 9324 	ldr.w	r9, [pc, #804]	; 3610 <ticker_job+0x53c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    32ec:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    32f0:	45e6      	cmp	lr, ip
    32f2:	d847      	bhi.n	3384 <ticker_job+0x2b0>
		ticker->lazy_periodic = user_op->params.update.lazy;
    32f4:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
    32f8:	88aa      	ldrh	r2, [r5, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    32fa:	9908      	ldr	r1, [sp, #32]
	ticker->ticks_to_expire = ticks_to_expire +
    32fc:	4413      	add	r3, r2
    32fe:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
    3300:	88ea      	ldrh	r2, [r5, #6]
	ticker->ticks_to_expire_minus +=
    3302:	6963      	ldr	r3, [r4, #20]
    3304:	4413      	add	r3, r2
    3306:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    3308:	9a09      	ldr	r2, [sp, #36]	; 0x24
    330a:	4620      	mov	r0, r4
    330c:	f7ff fe63 	bl	2fd6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    3310:	69a2      	ldr	r2, [r4, #24]
    3312:	892b      	ldrh	r3, [r5, #8]
    3314:	4413      	add	r3, r2
    3316:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    3318:	896a      	ldrh	r2, [r5, #10]
    331a:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    331c:	bf8c      	ite	hi
    331e:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0;
    3320:	2300      	movls	r3, #0
    3322:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0) {
    3324:	7bab      	ldrb	r3, [r5, #14]
    3326:	b103      	cbz	r3, 332a <ticker_job+0x256>
		ticker->force = user_op->params.update.force;
    3328:	70e3      	strb	r3, [r4, #3]
	ticker->next = *insert_head;
    332a:	9b04      	ldr	r3, [sp, #16]
    332c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    332e:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
		ticker->req++;
    3332:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    3334:	f895 a001 	ldrb.w	sl, [r5, #1]
		ticker->req++;
    3338:	3301      	adds	r3, #1
    333a:	7063      	strb	r3, [r4, #1]
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
    333c:	2100      	movs	r1, #0
    333e:	e7a2      	b.n	3286 <ticker_job+0x1b2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    3340:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    3344:	45e6      	cmp	lr, ip
    3346:	d2cf      	bcs.n	32e8 <ticker_job+0x214>
	if ((ticker->remainder_current >= BIT(31)) ||
    3348:	6a61      	ldr	r1, [r4, #36]	; 0x24
    334a:	4eaf      	ldr	r6, [pc, #700]	; (3608 <ticker_job+0x534>)
    334c:	48af      	ldr	r0, [pc, #700]	; (360c <ticker_job+0x538>)
    334e:	198e      	adds	r6, r1, r6
    3350:	4286      	cmp	r6, r0
		ticker->remainder_current += 30517578UL;
    3352:	bf81      	itttt	hi
    3354:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    3358:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    335c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
    3360:	6261      	strhi	r1, [r4, #36]	; 0x24
	ticker->remainder_current -= ticker->remainder_periodic;
    3362:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3364:	6a21      	ldr	r1, [r4, #32]
		decrement++;
    3366:	bf8c      	ite	hi
    3368:	f04f 0901 	movhi.w	r9, #1
	u8_t decrement = 0;
    336c:	f04f 0900 	movls.w	r9, #0
	ticker->remainder_current -= ticker->remainder_periodic;
    3370:	1a76      	subs	r6, r6, r1
			ticks_to_expire -= ticker->ticks_periodic +
    3372:	4491      	add	r9, r2
			ticker->lazy_current--;
    3374:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	ticker->remainder_current -= ticker->remainder_periodic;
    3378:	6266      	str	r6, [r4, #36]	; 0x24
			ticks_to_expire -= ticker->ticks_periodic +
    337a:	eba3 0309 	sub.w	r3, r3, r9
			ticker->lazy_current--;
    337e:	f8a4 c01e 	strh.w	ip, [r4, #30]
    3382:	e7af      	b.n	32e4 <ticker_job+0x210>
	ticker->remainder_current += ticker->remainder_periodic;
    3384:	6a66      	ldr	r6, [r4, #36]	; 0x24
    3386:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    3388:	48a0      	ldr	r0, [pc, #640]	; (360c <ticker_job+0x538>)
	ticker->remainder_current += ticker->remainder_periodic;
    338a:	440e      	add	r6, r1
	if ((ticker->remainder_current < BIT(31)) &&
    338c:	499e      	ldr	r1, [pc, #632]	; (3608 <ticker_job+0x534>)
    338e:	1871      	adds	r1, r6, r1
    3390:	4281      	cmp	r1, r0
	return 0;
    3392:	bf8e      	itee	hi
    3394:	2100      	movhi	r1, #0
		return 1;
    3396:	2101      	movls	r1, #1
		ticker->remainder_current -= 30517578UL;
    3398:	444e      	addls	r6, r9
			ticks_to_expire += ticker->ticks_periodic +
    339a:	4411      	add	r1, r2
			ticker->lazy_current++;
    339c:	f10c 0c01 	add.w	ip, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    33a0:	bf8c      	ite	hi
    33a2:	6266      	strhi	r6, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    33a4:	6266      	strls	r6, [r4, #36]	; 0x24
			ticks_to_expire += ticker->ticks_periodic +
    33a6:	440b      	add	r3, r1
			ticker->lazy_current++;
    33a8:	f8a4 c01e 	strh.w	ip, [r4, #30]
    33ac:	e79e      	b.n	32ec <ticker_job+0x218>
		ticker->req = ticker->ack;
    33ae:	78a3      	ldrb	r3, [r4, #2]
    33b0:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    33b2:	786b      	ldrb	r3, [r5, #1]
    33b4:	f89b 201c 	ldrb.w	r2, [fp, #28]
    33b8:	429a      	cmp	r2, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    33ba:	bf01      	itttt	eq
    33bc:	23ff      	moveq	r3, #255	; 0xff
    33be:	f88b 301c 	strbeq.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    33c2:	2300      	moveq	r3, #0
    33c4:	f8cb 3018 	streq.w	r3, [fp, #24]
    33c8:	e7b8      	b.n	333c <ticker_job+0x268>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    33ca:	2104      	movs	r1, #4
    33cc:	465b      	mov	r3, fp
    33ce:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    33d2:	2201      	movs	r2, #1
    33d4:	4608      	mov	r0, r1
    33d6:	47a0      	blx	r4
				pending = 1;
    33d8:	2301      	movs	r3, #1
				user->middle = prev;
    33da:	70be      	strb	r6, [r7, #2]
				pending = 1;
    33dc:	9307      	str	r3, [sp, #28]
    33de:	9b02      	ldr	r3, [sp, #8]
    33e0:	3b01      	subs	r3, #1
    33e2:	b2db      	uxtb	r3, r3
    33e4:	9302      	str	r3, [sp, #8]
    33e6:	e6aa      	b.n	313e <ticker_job+0x6a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    33e8:	f8db 3018 	ldr.w	r3, [fp, #24]
    33ec:	429d      	cmp	r5, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    33ee:	bf29      	itett	cs
    33f0:	23ff      	movcs	r3, #255	; 0xff
			instance->ticks_slot_previous -= ticks_to_expire;
    33f2:	1b5b      	subcc	r3, r3, r5
			instance->ticker_id_slot_previous = TICKER_NULL;
    33f4:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous = 0;
    33f8:	2300      	movcs	r3, #0
    33fa:	f8cb 3018 	str.w	r3, [fp, #24]
		if (ticker->ticks_slot != 0) {
    33fe:	69a3      	ldr	r3, [r4, #24]
		ticks_expired += ticks_to_expire;
    3400:	44a9      	add	r9, r5
		if (ticker->ticks_slot != 0) {
    3402:	b11b      	cbz	r3, 340c <ticker_job+0x338>
			instance->ticker_id_slot_previous = id_expired;
    3404:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    3408:	f8cb 3018 	str.w	r3, [fp, #24]
		ticker->ticks_to_expire = 0;
    340c:	2200      	movs	r2, #0
		instance->ticker_id_head = ticker->next;
    340e:	9b04      	ldr	r3, [sp, #16]
		ticker->ticks_to_expire = 0;
    3410:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
    3412:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
    3416:	f88b 301d 	strb.w	r3, [fp, #29]
		if (ticker->ticks_periodic != 0) {
    341a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    341e:	f1be 0f00 	cmp.w	lr, #0
    3422:	d030      	beq.n	3486 <ticker_job+0x3b2>
    3424:	8ba0      	ldrh	r0, [r4, #28]
	if ((ticker->remainder_current < BIT(31)) &&
    3426:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 360c <ticker_job+0x538>
	ticker->remainder_current += ticker->remainder_periodic;
    342a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    342c:	6a21      	ldr	r1, [r4, #32]
    342e:	440b      	add	r3, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3430:	4975      	ldr	r1, [pc, #468]	; (3608 <ticker_job+0x534>)
    3432:	1859      	adds	r1, r3, r1
    3434:	4561      	cmp	r1, ip
		ticker->remainder_current -= 30517578UL;
    3436:	bf9f      	itttt	ls
    3438:	f1a3 73e8 	subls.w	r3, r3, #30408704	; 0x1d00000
    343c:	f5a3 33d4 	subls.w	r3, r3, #108544	; 0x1a800
    3440:	f5a3 73a5 	subls.w	r3, r3, #330	; 0x14a
    3444:	6263      	strls	r3, [r4, #36]	; 0x24
		return 1;
    3446:	bf92      	itee	ls
    3448:	9b01      	ldrls	r3, [sp, #4]
	ticker->remainder_current += ticker->remainder_periodic;
    344a:	6263      	strhi	r3, [r4, #36]	; 0x24
	return 0;
    344c:	2300      	movhi	r3, #0
				ticks_to_expire += ticker_remainder_inc(ticker);
    344e:	4473      	add	r3, lr
			while (count--) {
    3450:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
				ticks_to_expire += ticker_remainder_inc(ticker);
    3454:	441a      	add	r2, r3
			while (count--) {
    3456:	d2e8      	bcs.n	342a <ticker_job+0x356>
			ticks_to_expire_prep(ticker, instance->ticks_current,
    3458:	9b05      	ldr	r3, [sp, #20]
			ticker->ticks_to_expire = ticks_to_expire;
    345a:	60a2      	str	r2, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    345c:	f8db 1014 	ldr.w	r1, [fp, #20]
    3460:	eb03 0209 	add.w	r2, r3, r9
    3464:	4620      	mov	r0, r4
    3466:	f7ff fdb6 	bl	2fd6 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
    346a:	8ba3      	ldrh	r3, [r4, #28]
    346c:	83e3      	strh	r3, [r4, #30]
			ticker->force = 0;
    346e:	2300      	movs	r3, #0
    3470:	70e3      	strb	r3, [r4, #3]
			ticker->next = *insert_head;
    3472:	9b04      	ldr	r3, [sp, #16]
    3474:	f803 a037 	strb.w	sl, [r3, r7, lsl #3]
			ticker->req++;
    3478:	7863      	ldrb	r3, [r4, #1]
    347a:	3301      	adds	r3, #1
    347c:	7063      	strb	r3, [r4, #1]
		ticks_elapsed -= ticks_to_expire;
    347e:	eba8 0805 	sub.w	r8, r8, r5
    3482:	46b2      	mov	sl, r6
    3484:	e66c      	b.n	3160 <ticker_job+0x8c>
			ticker->req = ticker->ack;
    3486:	78a3      	ldrb	r3, [r4, #2]
    3488:	7063      	strb	r3, [r4, #1]
    348a:	4656      	mov	r6, sl
    348c:	e7f7      	b.n	347e <ticker_job+0x3aa>
		user = &users[count_user];
    348e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3490:	9a01      	ldr	r2, [sp, #4]
    3492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3496:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
    3498:	685b      	ldr	r3, [r3, #4]
    349a:	930a      	str	r3, [sp, #40]	; 0x28
		user_ops_first = user->first;
    349c:	9b04      	ldr	r3, [sp, #16]
    349e:	f893 9001 	ldrb.w	r9, [r3, #1]
		while ((insert_head != TICKER_NULL) ||
    34a2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    34a6:	f000 808e 	beq.w	35c6 <ticker_job+0x4f2>
				ticker = &node[id_insert];
    34aa:	fa0f f38a 	sxth.w	r3, sl
    34ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    34b2:	9a08      	ldr	r2, [sp, #32]
				insert_head = ticker->next;
    34b4:	46d0      	mov	r8, sl
    34b6:	f812 a033 	ldrb.w	sl, [r2, r3, lsl #3]
				ticker = &node[id_insert];
    34ba:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
				user_op = NULL;
    34be:	2500      	movs	r5, #0
	struct ticker_node *node = &instance->node[0];
    34c0:	f8db 3000 	ldr.w	r3, [fp]
    34c4:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker->next = TICKER_NULL;
    34c6:	23ff      	movs	r3, #255	; 0xff
	if (ticker->lazy_current > ticker->lazy_periodic) {
    34c8:	8ba2      	ldrh	r2, [r4, #28]
	ticker->next = TICKER_NULL;
    34ca:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
    34cc:	8be3      	ldrh	r3, [r4, #30]
    34ce:	4293      	cmp	r3, r2
		skip = ticker->lazy_current -
    34d0:	bf86      	itte	hi
    34d2:	1a9b      	subhi	r3, r3, r2
    34d4:	b29b      	uxthhi	r3, r3
		skip = 0;
    34d6:	2300      	movls	r3, #0
    34d8:	930c      	str	r3, [sp, #48]	; 0x30
	ticker_new = &node[id];
    34da:	fa0f f388 	sxth.w	r3, r8
    34de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    34e2:	00db      	lsls	r3, r3, #3
    34e4:	9311      	str	r3, [sp, #68]	; 0x44
    34e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
	node = &instance->node[0];
    34e8:	f8db 2000 	ldr.w	r2, [fp]
	ticks_slot_previous = instance->ticks_slot_previous;
    34ec:	f8db 0018 	ldr.w	r0, [fp, #24]
    34f0:	9005      	str	r0, [sp, #20]
	ticker_new = &node[id];
    34f2:	eb02 0e03 	add.w	lr, r2, r3
	collide = ticker_id_slot_previous = TICKER_NULL;
    34f6:	20ff      	movs	r0, #255	; 0xff
	current = instance->ticker_id_head;
    34f8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker_new->ticks_to_expire;
    34fc:	f8de 1008 	ldr.w	r1, [lr, #8]
	previous = current;
    3500:	9309      	str	r3, [sp, #36]	; 0x24
	collide = ticker_id_slot_previous = TICKER_NULL;
    3502:	9006      	str	r0, [sp, #24]
	while ((current != TICKER_NULL) &&
    3504:	2bff      	cmp	r3, #255	; 0xff
    3506:	d007      	beq.n	3518 <ticker_job+0x444>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    3508:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
    350c:	eb02 06cc 	add.w	r6, r2, ip, lsl #3
		(ticks_to_expire_current =
    3510:	68b0      	ldr	r0, [r6, #8]
	while ((current != TICKER_NULL) &&
    3512:	4281      	cmp	r1, r0
    3514:	f200 80a9 	bhi.w	366a <ticker_job+0x596>
				     ticks_to_expire + ticker_new->ticks_slot);
    3518:	f8de 0018 	ldr.w	r0, [lr, #24]
    351c:	900d      	str	r0, [sp, #52]	; 0x34
	collide = ticker_by_slot_get(&node[0], current,
    351e:	eb01 0c00 	add.w	ip, r1, r0
    3522:	461e      	mov	r6, r3
	while (ticker_id_head != TICKER_NULL) {
    3524:	2eff      	cmp	r6, #255	; 0xff
    3526:	f040 80ae 	bne.w	3686 <ticker_job+0x5b2>
	if ((ticker_new->ticks_slot == 0) ||
    352a:	980d      	ldr	r0, [sp, #52]	; 0x34
    352c:	b130      	cbz	r0, 353c <ticker_job+0x468>
    352e:	9805      	ldr	r0, [sp, #20]
    3530:	4281      	cmp	r1, r0
    3532:	f0c0 80bf 	bcc.w	36b4 <ticker_job+0x5e0>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    3536:	2eff      	cmp	r6, #255	; 0xff
    3538:	f040 8185 	bne.w	3846 <ticker_job+0x772>
		if (previous == current) {
    353c:	9809      	ldr	r0, [sp, #36]	; 0x24
		ticker_new->ticks_to_expire = ticks_to_expire;
    353e:	f8ce 1008 	str.w	r1, [lr, #8]
		if (previous == current) {
    3542:	4283      	cmp	r3, r0
			node[previous].next = id;
    3544:	bf18      	it	ne
    3546:	f9bd 0024 	ldrshne.w	r0, [sp, #36]	; 0x24
		ticker_new->next = current;
    354a:	f88e 3000 	strb.w	r3, [lr]
			node[previous].next = id;
    354e:	bf16      	itet	ne
    3550:	eb00 0080 	addne.w	r0, r0, r0, lsl #2
			instance->ticker_id_head = id;
    3554:	f88b 801d 	strbeq.w	r8, [fp, #29]
			node[previous].next = id;
    3558:	f802 8030 	strbne.w	r8, [r2, r0, lsl #3]
		if (current != TICKER_NULL) {
    355c:	2bff      	cmp	r3, #255	; 0xff
    355e:	d006      	beq.n	356e <ticker_job+0x49a>
			node[current].ticks_to_expire -= ticks_to_expire;
    3560:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3564:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3568:	689a      	ldr	r2, [r3, #8]
    356a:	1a51      	subs	r1, r2, r1
    356c:	6099      	str	r1, [r3, #8]
	ticker->req = ticker->ack + 1;
    356e:	78a3      	ldrb	r3, [r4, #2]
    3570:	3301      	adds	r3, #1
    3572:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
    3574:	2100      	movs	r1, #0
			if (user_op) {
    3576:	2d00      	cmp	r5, #0
    3578:	d093      	beq.n	34a2 <ticker_job+0x3ce>
				ticker_job_op_cb(user_op, status);
    357a:	4628      	mov	r0, r5
    357c:	f7ff fd49 	bl	3012 <ticker_job_op_cb>
    3580:	e78f      	b.n	34a2 <ticker_job+0x3ce>
				user_op = &user_ops[user_ops_first];
    3582:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    3586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3588:	011b      	lsls	r3, r3, #4
    358a:	18d5      	adds	r5, r2, r3
				first = user_ops_first + 1;
    358c:	f109 0201 	add.w	r2, r9, #1
    3590:	fa5f f982 	uxtb.w	r9, r2
				if (first == user->count_user_op) {
    3594:	9a04      	ldr	r2, [sp, #16]
    3596:	7812      	ldrb	r2, [r2, #0]
					first = 0;
    3598:	454a      	cmp	r2, r9
    359a:	bf08      	it	eq
    359c:	f04f 0900 	moveq.w	r9, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    35a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    35a2:	5cd3      	ldrb	r3, [r2, r3]
    35a4:	2b03      	cmp	r3, #3
    35a6:	d10e      	bne.n	35c6 <ticker_job+0x4f2>
				id_insert = user_op->id;
    35a8:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    35ac:	9b08      	ldr	r3, [sp, #32]
    35ae:	eb08 0488 	add.w	r4, r8, r8, lsl #2
    35b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    35b6:	7862      	ldrb	r2, [r4, #1]
    35b8:	78a3      	ldrb	r3, [r4, #2]
    35ba:	429a      	cmp	r2, r3
    35bc:	d009      	beq.n	35d2 <ticker_job+0x4fe>
					ticker_job_op_cb(user_op,
    35be:	2101      	movs	r1, #1
    35c0:	4628      	mov	r0, r5
    35c2:	f7ff fd26 	bl	3012 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
    35c6:	9b04      	ldr	r3, [sp, #16]
    35c8:	789b      	ldrb	r3, [r3, #2]
    35ca:	454b      	cmp	r3, r9
    35cc:	d1d9      	bne.n	3582 <ticker_job+0x4ae>
    35ce:	9b01      	ldr	r3, [sp, #4]
    35d0:	e5e6      	b.n	31a0 <ticker_job+0xcc>
	ticker->ticks_periodic = start->ticks_periodic;
    35d2:	68eb      	ldr	r3, [r5, #12]
				ticker_job_op_start(ticker, user_op,
    35d4:	f8db 1014 	ldr.w	r1, [fp, #20]
	ticker->ticks_periodic = start->ticks_periodic;
    35d8:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    35da:	692b      	ldr	r3, [r5, #16]
    35dc:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = start->lazy;
    35de:	8aab      	ldrh	r3, [r5, #20]
    35e0:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    35e2:	69ab      	ldr	r3, [r5, #24]
    35e4:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    35e6:	69eb      	ldr	r3, [r5, #28]
    35e8:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    35ea:	6a2b      	ldr	r3, [r5, #32]
    35ec:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire_minus = 0;
    35ee:	2600      	movs	r6, #0
	ticker->ticks_to_expire = start->ticks_first;
    35f0:	68ab      	ldr	r3, [r5, #8]
    35f2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
    35f4:	6166      	str	r6, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    35f6:	686a      	ldr	r2, [r5, #4]
    35f8:	4620      	mov	r0, r4
    35fa:	f7ff fcec 	bl	2fd6 <ticks_to_expire_prep>
	ticker->force = 1;
    35fe:	2301      	movs	r3, #1
	ticker->remainder_current = 0;
    3600:	6266      	str	r6, [r4, #36]	; 0x24
	ticker->lazy_current = 0;
    3602:	83e6      	strh	r6, [r4, #30]
	ticker->force = 1;
    3604:	70e3      	strb	r3, [r4, #3]
    3606:	e75b      	b.n	34c0 <ticker_job+0x3ec>
    3608:	ff172b5a 	.word	0xff172b5a
    360c:	7f172b59 	.word	0x7f172b59
    3610:	fe2e56b6 	.word	0xfe2e56b6
		if (ticker->ticks_periodic != 0) {
    3614:	6860      	ldr	r0, [r4, #4]
    3616:	2800      	cmp	r0, #0
    3618:	d07b      	beq.n	3712 <ticker_job+0x63e>
	ticker->remainder_current += ticker->remainder_periodic;
    361a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    361c:	6a21      	ldr	r1, [r4, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    361e:	4b8d      	ldr	r3, [pc, #564]	; (3854 <ticker_job+0x780>)
	ticker->remainder_current += ticker->remainder_periodic;
    3620:	440a      	add	r2, r1
	if ((ticker->remainder_current < BIT(31)) &&
    3622:	498d      	ldr	r1, [pc, #564]	; (3858 <ticker_job+0x784>)
    3624:	18d3      	adds	r3, r2, r3
    3626:	428b      	cmp	r3, r1
		ticker->remainder_current -= 30517578UL;
    3628:	bf9c      	itt	ls
    362a:	f1a2 72e8 	subls.w	r2, r2, #30408704	; 0x1d00000
    362e:	f5a2 32d4 	subls.w	r2, r2, #108544	; 0x1a800
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3632:	68a3      	ldr	r3, [r4, #8]
	ticker->remainder_current += ticker->remainder_periodic;
    3634:	bf8b      	itete	hi
    3636:	6262      	strhi	r2, [r4, #36]	; 0x24
		ticker->remainder_current -= 30517578UL;
    3638:	f5a2 72a5 	subls.w	r2, r2, #330	; 0x14a
	return 0;
    363c:	2200      	movhi	r2, #0
		ticker->remainder_current -= 30517578UL;
    363e:	6262      	strls	r2, [r4, #36]	; 0x24
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3640:	4403      	add	r3, r0
		return 1;
    3642:	bf98      	it	ls
    3644:	2201      	movls	r2, #1
			ticker->ticks_to_expire += ticker->ticks_periodic +
    3646:	4413      	add	r3, r2
			ticker->lazy_current++;
    3648:	8be2      	ldrh	r2, [r4, #30]
			ticker->ticks_to_expire += ticker->ticks_periodic +
    364a:	60a3      	str	r3, [r4, #8]
			ticker->lazy_current++;
    364c:	3201      	adds	r2, #1
    364e:	83e2      	strh	r2, [r4, #30]
			    ticker->ticks_to_expire_minus) {
    3650:	6962      	ldr	r2, [r4, #20]
			if (ticker->ticks_to_expire >
    3652:	4293      	cmp	r3, r2
    3654:	f04f 0100 	mov.w	r1, #0
				ticker->ticks_to_expire -=
    3658:	bf89      	itett	hi
    365a:	1a9b      	subhi	r3, r3, r2
				ticker->ticks_to_expire_minus -=
    365c:	1ad3      	subls	r3, r2, r3
				ticker->ticks_to_expire -=
    365e:	60a3      	strhi	r3, [r4, #8]
				ticker->ticks_to_expire_minus = 0;
    3660:	6161      	strhi	r1, [r4, #20]
				ticker->ticks_to_expire_minus -=
    3662:	bf9c      	itt	ls
    3664:	6163      	strls	r3, [r4, #20]
				ticker->ticks_to_expire = 0;
    3666:	60a1      	strls	r1, [r4, #8]
    3668:	e73d      	b.n	34e6 <ticker_job+0x412>
		if (ticker_current->ticks_slot != 0) {
    366a:	69b6      	ldr	r6, [r6, #24]
		ticks_to_expire -= ticks_to_expire_current;
    366c:	1a09      	subs	r1, r1, r0
		if (ticker_current->ticks_slot != 0) {
    366e:	b946      	cbnz	r6, 3682 <ticker_job+0x5ae>
			if (ticks_slot_previous > ticks_to_expire_current) {
    3670:	9f05      	ldr	r7, [sp, #20]
    3672:	42b8      	cmp	r0, r7
    3674:	d200      	bcs.n	3678 <ticker_job+0x5a4>
				ticks_slot_previous -= ticks_to_expire_current;
    3676:	1a3e      	subs	r6, r7, r0
		current = ticker_current->next;
    3678:	9309      	str	r3, [sp, #36]	; 0x24
    367a:	9605      	str	r6, [sp, #20]
    367c:	f812 303c 	ldrb.w	r3, [r2, ip, lsl #3]
    3680:	e740      	b.n	3504 <ticker_job+0x430>
		if (ticker_current->ticks_slot != 0) {
    3682:	9306      	str	r3, [sp, #24]
    3684:	e7f8      	b.n	3678 <ticker_job+0x5a4>
		ticker = &node[ticker_id_head];
    3686:	b230      	sxth	r0, r6
    3688:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    368c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
    3690:	970e      	str	r7, [sp, #56]	; 0x38
		ticks_to_expire = ticker->ticks_to_expire;
    3692:	68bf      	ldr	r7, [r7, #8]
    3694:	970f      	str	r7, [sp, #60]	; 0x3c
		if (ticks_slot <= ticks_to_expire) {
    3696:	4567      	cmp	r7, ip
    3698:	d20a      	bcs.n	36b0 <ticker_job+0x5dc>
		if (ticker->ticks_slot) {
    369a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    369c:	69bf      	ldr	r7, [r7, #24]
    369e:	2f00      	cmp	r7, #0
    36a0:	f47f af43 	bne.w	352a <ticker_job+0x456>
		ticks_slot -= ticks_to_expire;
    36a4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    36a6:	ebac 0c06 	sub.w	ip, ip, r6
		ticker_id_head = ticker->next;
    36aa:	f812 6030 	ldrb.w	r6, [r2, r0, lsl #3]
    36ae:	e739      	b.n	3524 <ticker_job+0x450>
			return TICKER_NULL;
    36b0:	26ff      	movs	r6, #255	; 0xff
    36b2:	e73a      	b.n	352a <ticker_job+0x456>
	while (id_insert !=
    36b4:	9b06      	ldr	r3, [sp, #24]
    36b6:	4598      	cmp	r8, r3
    36b8:	f43f af59 	beq.w	356e <ticker_job+0x49a>
		if (id_collide != TICKER_NULL) {
    36bc:	9b06      	ldr	r3, [sp, #24]
    36be:	2bff      	cmp	r3, #255	; 0xff
    36c0:	d0a8      	beq.n	3614 <ticker_job+0x540>
    36c2:	461e      	mov	r6, r3
			struct ticker_node *ticker_collide = &node[id_collide];
    36c4:	b233      	sxth	r3, r6
    36c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    36ca:	9305      	str	r3, [sp, #20]
    36cc:	9a05      	ldr	r2, [sp, #20]
    36ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    36d0:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
			if (ticker_collide->lazy_current >
    36d4:	8bfb      	ldrh	r3, [r7, #30]
			    ticker_collide->lazy_periodic) {
    36d6:	8bba      	ldrh	r2, [r7, #28]
			if (ticker_collide->lazy_current >
    36d8:	4293      	cmp	r3, r2
				skip_collide = ticker_collide->lazy_current -
    36da:	bf88      	it	hi
    36dc:	1a9b      	subhi	r3, r3, r2
			if (ticker_collide->ticks_periodic &&
    36de:	687a      	ldr	r2, [r7, #4]
				skip_collide = ticker_collide->lazy_current -
    36e0:	bf8c      	ite	hi
    36e2:	b29b      	uxthhi	r3, r3
				skip_collide = 0;
    36e4:	2300      	movls	r3, #0
			if (ticker_collide->ticks_periodic &&
    36e6:	2a00      	cmp	r2, #0
    36e8:	d094      	beq.n	3614 <ticker_job+0x540>
    36ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    36ec:	4293      	cmp	r3, r2
    36ee:	d891      	bhi.n	3614 <ticker_job+0x540>
			    skip_collide <= skip &&
    36f0:	78fa      	ldrb	r2, [r7, #3]
    36f2:	78e3      	ldrb	r3, [r4, #3]
    36f4:	429a      	cmp	r2, r3
    36f6:	d28d      	bcs.n	3614 <ticker_job+0x540>
					ticker_dequeue(instance, id_collide);
    36f8:	4631      	mov	r1, r6
    36fa:	4658      	mov	r0, fp
    36fc:	f7ff fc3f 	bl	2f7e <ticker_dequeue>
				ticker_collide->req = ticker_collide->ack;
    3700:	78bb      	ldrb	r3, [r7, #2]
    3702:	707b      	strb	r3, [r7, #1]
				ticker_collide->next = *insert_head;
    3704:	9a05      	ldr	r2, [sp, #20]
    3706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
				ticker_collide->ticks_to_expire =
    3708:	60b8      	str	r0, [r7, #8]
				ticker_collide->next = *insert_head;
    370a:	f803 a032 	strb.w	sl, [r3, r2, lsl #3]
    370e:	46b2      	mov	sl, r6
    3710:	e6e9      	b.n	34e6 <ticker_job+0x412>
			return TICKER_STATUS_FAILURE;
    3712:	2101      	movs	r1, #1
    3714:	e72f      	b.n	3576 <ticker_job+0x4a2>
		user = &users[count_user];
    3716:	9b01      	ldr	r3, [sp, #4]
    3718:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
		user_op = &user->user_op[0];
    371c:	686e      	ldr	r6, [r5, #4]
		while (user->first != user->last) {
    371e:	786b      	ldrb	r3, [r5, #1]
    3720:	78ea      	ldrb	r2, [r5, #3]
    3722:	429a      	cmp	r2, r3
    3724:	d102      	bne.n	372c <ticker_job+0x658>
    3726:	3c01      	subs	r4, #1
    3728:	b2e4      	uxtb	r4, r4
    372a:	e551      	b.n	31d0 <ticker_job+0xfc>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    372c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3730:	011b      	lsls	r3, r3, #4
    3732:	18f2      	adds	r2, r6, r3
	switch (uop->op) {
    3734:	5cf3      	ldrb	r3, [r6, r3]
    3736:	2b01      	cmp	r3, #1
    3738:	d025      	beq.n	3786 <ticker_job+0x6b2>
    373a:	2b02      	cmp	r3, #2
    373c:	d12a      	bne.n	3794 <ticker_job+0x6c0>
		ticker_by_next_slot_get(instance,
    373e:	f8d2 c004 	ldr.w	ip, [r2, #4]
    3742:	6893      	ldr	r3, [r2, #8]
	_ticker_id_head = *ticker_id_head;
    3744:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
    3748:	f8d2 900c 	ldr.w	r9, [r2, #12]
	node = instance->node;
    374c:	f8db e000 	ldr.w	lr, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    3750:	28ff      	cmp	r0, #255	; 0xff
    3752:	d004      	beq.n	375e <ticker_job+0x68a>
    3754:	6819      	ldr	r1, [r3, #0]
    3756:	f8db 7014 	ldr.w	r7, [fp, #20]
    375a:	42b9      	cmp	r1, r7
    375c:	d023      	beq.n	37a6 <ticker_job+0x6d2>
		*ticks_current = instance->ticks_current;
    375e:	f8db 0014 	ldr.w	r0, [fp, #20]
		_ticker_id_head = instance->ticker_id_head;
    3762:	f89b 101d 	ldrb.w	r1, [fp, #29]
		*ticks_current = instance->ticks_current;
    3766:	6018      	str	r0, [r3, #0]
		_ticks_to_expire = 0;
    3768:	2300      	movs	r3, #0
	while ((_ticker_id_head != TICKER_NULL) &&
    376a:	29ff      	cmp	r1, #255	; 0xff
    376c:	d007      	beq.n	377e <ticker_job+0x6aa>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    376e:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
    3772:	eb0e 00ca 	add.w	r0, lr, sl, lsl #3
	while ((_ticker_id_head != TICKER_NULL) &&
    3776:	6987      	ldr	r7, [r0, #24]
    3778:	6880      	ldr	r0, [r0, #8]
    377a:	b1df      	cbz	r7, 37b4 <ticker_job+0x6e0>
		_ticks_to_expire += ticker->ticks_to_expire;
    377c:	4403      	add	r3, r0
	*ticker_id_head = _ticker_id_head;
    377e:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    3782:	f8c9 3000 	str.w	r3, [r9]
		fp_op_func = uop->fp_op_func;
    3786:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uop->status = TICKER_STATUS_SUCCESS;
    3788:	f8c2 8024 	str.w	r8, [r2, #36]	; 0x24
	if (fp_op_func) {
    378c:	b113      	cbz	r3, 3794 <ticker_job+0x6c0>
		fp_op_func(uop->status, uop->op_context);
    378e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3790:	2000      	movs	r0, #0
    3792:	4798      	blx	r3
			first = user->first + 1;
    3794:	786b      	ldrb	r3, [r5, #1]
			if (first == user->count_user_op) {
    3796:	782a      	ldrb	r2, [r5, #0]
			first = user->first + 1;
    3798:	3301      	adds	r3, #1
    379a:	b2db      	uxtb	r3, r3
				first = 0;
    379c:	429a      	cmp	r2, r3
    379e:	bf08      	it	eq
    37a0:	2300      	moveq	r3, #0
			user->first = first;
    37a2:	706b      	strb	r3, [r5, #1]
    37a4:	e7bb      	b.n	371e <ticker_job+0x64a>
		ticker = &node[_ticker_id_head];
    37a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	_ticks_to_expire = *ticks_to_expire;
    37aa:	f8d9 3000 	ldr.w	r3, [r9]
		_ticker_id_head = ticker->next;
    37ae:	f81e 1030 	ldrb.w	r1, [lr, r0, lsl #3]
    37b2:	e7da      	b.n	376a <ticker_job+0x696>
		_ticks_to_expire += ticker->ticks_to_expire;
    37b4:	4403      	add	r3, r0
		_ticker_id_head = ticker->next;
    37b6:	f81e 103a 	ldrb.w	r1, [lr, sl, lsl #3]
    37ba:	e7d6      	b.n	376a <ticker_job+0x696>
	if (ticker_id_old_head == TICKER_NULL) {
    37bc:	9b03      	ldr	r3, [sp, #12]
    37be:	2bff      	cmp	r3, #255	; 0xff
    37c0:	d107      	bne.n	37d2 <ticker_job+0x6fe>
		ticks_current = cntr_cnt_get();
    37c2:	f005 fd53 	bl	926c <cntr_cnt_get>
    37c6:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    37c8:	f005 fd2a 	bl	9220 <cntr_start>
    37cc:	b908      	cbnz	r0, 37d2 <ticker_job+0x6fe>
			instance->ticks_current = ticks_current;
    37ce:	f8cb 4014 	str.w	r4, [fp, #20]
	ticker = &instance->node[instance->ticker_id_head];
    37d2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticks_to_expire = ticker->ticks_to_expire;
    37d6:	f8db 2000 	ldr.w	r2, [fp]
	ticker = &instance->node[instance->ticker_id_head];
    37da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	ticks_to_expire = ticker->ticks_to_expire;
    37de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    37e2:	260a      	movs	r6, #10
    37e4:	689d      	ldr	r5, [r3, #8]
		ctr = cntr_cnt_get();
    37e6:	f005 fd41 	bl	926c <cntr_cnt_get>
		cc = instance->ticks_current;
    37ea:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    37ee:	1b03      	subs	r3, r0, r4
    37f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    37f4:	3303      	adds	r3, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
    37f6:	42ab      	cmp	r3, r5
    37f8:	bf2c      	ite	cs
    37fa:	18e4      	addcs	r4, r4, r3
    37fc:	1964      	addcc	r4, r4, r5
		cc &= 0x00FFFFFF;
    37fe:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    3802:	4607      	mov	r7, r0
		instance->trigger_set_cb(cc);
    3804:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
    3808:	4620      	mov	r0, r4
    380a:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    380c:	f005 fd2e 	bl	926c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3810:	1bc0      	subs	r0, r0, r7
    3812:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3816:	1be4      	subs	r4, r4, r7
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    3818:	3003      	adds	r0, #3
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    381a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    381e:	42a0      	cmp	r0, r4
    3820:	f67f ace8 	bls.w	31f4 <ticker_job+0x120>
		LL_ASSERT(i);
    3824:	3e01      	subs	r6, #1
    3826:	d1de      	bne.n	37e6 <ticker_job+0x712>
    3828:	4040      	eors	r0, r0
    382a:	f380 8811 	msr	BASEPRI, r0
    382e:	f04f 0004 	mov.w	r0, #4
    3832:	df02      	svc	2
	instance->job_guard = 0;
    3834:	2300      	movs	r3, #0
    3836:	f88b 301e 	strb.w	r3, [fp, #30]
    383a:	e4d1      	b.n	31e0 <ticker_job+0x10c>
	if (!pending) {
    383c:	2b00      	cmp	r3, #0
    383e:	d1f9      	bne.n	3834 <ticker_job+0x760>
		flag_compare_update = 1;
    3840:	2301      	movs	r3, #1
    3842:	9302      	str	r3, [sp, #8]
    3844:	e4bb      	b.n	31be <ticker_job+0xea>
	while (id_insert !=
    3846:	45b0      	cmp	r8, r6
    3848:	f47f af3c 	bne.w	36c4 <ticker_job+0x5f0>
    384c:	e68f      	b.n	356e <ticker_job+0x49a>
}
    384e:	b013      	add	sp, #76	; 0x4c
    3850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3854:	ff172b5a 	.word	0xff172b5a
    3858:	7f172b59 	.word	0x7f172b59

0000385c <ticker_init>:
{
    385c:	b5f0      	push	{r4, r5, r6, r7, lr}
	instance->count_node = count_node;
    385e:	4d1a      	ldr	r5, [pc, #104]	; (38c8 <ticker_init+0x6c>)
{
    3860:	9f05      	ldr	r7, [sp, #20]
    3862:	f89d 4018 	ldrb.w	r4, [sp, #24]
	instance->count_node = count_node;
    3866:	262c      	movs	r6, #44	; 0x2c
    3868:	4346      	muls	r6, r0
    386a:	eb05 0e06 	add.w	lr, r5, r6
	instance->node = node;
    386e:	51aa      	str	r2, [r5, r6]
	instance->count_node = count_node;
    3870:	f88e 1008 	strb.w	r1, [lr, #8]
	struct ticker_user_op *user_op_ = (void *)user_op;
    3874:	9907      	ldr	r1, [sp, #28]
	instance->count_user = count_user;
    3876:	f88e 3009 	strb.w	r3, [lr, #9]
	instance->user = user;
    387a:	f8ce 7004 	str.w	r7, [lr, #4]
	while (count_user--) {
    387e:	3b01      	subs	r3, #1
    3880:	b2db      	uxtb	r3, r3
    3882:	2bff      	cmp	r3, #255	; 0xff
    3884:	d111      	bne.n	38aa <ticker_init+0x4e>
	if (count_op) {
    3886:	b9ec      	cbnz	r4, 38c4 <ticker_init+0x68>
	instance->caller_id_get_cb = caller_id_get_cb;
    3888:	222c      	movs	r2, #44	; 0x2c
    388a:	fb02 5200 	mla	r2, r2, r0, r5
    388e:	9908      	ldr	r1, [sp, #32]
    3890:	6211      	str	r1, [r2, #32]
	instance->sched_cb = sched_cb;
    3892:	9909      	ldr	r1, [sp, #36]	; 0x24
    3894:	6251      	str	r1, [r2, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    3896:	990a      	ldr	r1, [sp, #40]	; 0x28
    3898:	6291      	str	r1, [r2, #40]	; 0x28
	instance->ticker_id_head = TICKER_NULL;
    389a:	7753      	strb	r3, [r2, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    389c:	7713      	strb	r3, [r2, #28]
	instance->ticks_slot_previous = 0;
    389e:	6194      	str	r4, [r2, #24]
	instance->ticks_current = 0;
    38a0:	6154      	str	r4, [r2, #20]
	instance->ticks_elapsed_first = 0;
    38a2:	7294      	strb	r4, [r2, #10]
	instance->ticks_elapsed_last = 0;
    38a4:	72d4      	strb	r4, [r2, #11]
	return TICKER_STATUS_SUCCESS;
    38a6:	4620      	mov	r0, r4
    38a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		users[count_user].user_op = user_op_;
    38aa:	b21a      	sxth	r2, r3
    38ac:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
    38b0:	6071      	str	r1, [r6, #4]
		user_op_ += users[count_user].count_user_op;
    38b2:	f817 2032 	ldrb.w	r2, [r7, r2, lsl #3]
    38b6:	eb02 0642 	add.w	r6, r2, r2, lsl #1
		count_op -= users[count_user].count_user_op;
    38ba:	1aa4      	subs	r4, r4, r2
		user_op_ += users[count_user].count_user_op;
    38bc:	eb01 1106 	add.w	r1, r1, r6, lsl #4
		count_op -= users[count_user].count_user_op;
    38c0:	b2e4      	uxtb	r4, r4
    38c2:	e7dc      	b.n	387e <ticker_init+0x22>
		return TICKER_STATUS_FAILURE;
    38c4:	2001      	movs	r0, #1
}
    38c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38c8:	2000028c 	.word	0x2000028c

000038cc <ticker_trigger>:
	instance = &_instance[instance_index];
    38cc:	4a07      	ldr	r2, [pc, #28]	; (38ec <ticker_trigger+0x20>)
    38ce:	212c      	movs	r1, #44	; 0x2c
    38d0:	fb00 2301 	mla	r3, r0, r1, r2
{
    38d4:	b410      	push	{r4}
	if (instance->sched_cb) {
    38d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    38d8:	b12c      	cbz	r4, 38e6 <ticker_trigger+0x1a>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    38da:	46a4      	mov	ip, r4
    38dc:	2201      	movs	r2, #1
    38de:	2103      	movs	r1, #3
    38e0:	2002      	movs	r0, #2
}
    38e2:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    38e4:	4760      	bx	ip
}
    38e6:	bc10      	pop	{r4}
    38e8:	4770      	bx	lr
    38ea:	bf00      	nop
    38ec:	2000028c 	.word	0x2000028c

000038f0 <ticker_start>:
{
    38f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    38f4:	4f25      	ldr	r7, [pc, #148]	; (398c <ticker_start+0x9c>)
    38f6:	f04f 082c 	mov.w	r8, #44	; 0x2c
{
    38fa:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    38fc:	fb08 7000 	mla	r0, r8, r0, r7
    3900:	fa0f fc81 	sxth.w	ip, r1
    3904:	f8d0 e004 	ldr.w	lr, [r0, #4]
    3908:	eb0e 06cc 	add.w	r6, lr, ip, lsl #3
	if (last >= user->count_user_op) {
    390c:	f81e e03c 	ldrb.w	lr, [lr, ip, lsl #3]
	last = user->last + 1;
    3910:	78f4      	ldrb	r4, [r6, #3]
    3912:	1c65      	adds	r5, r4, #1
    3914:	b2ed      	uxtb	r5, r5
		last = 0;
    3916:	45ae      	cmp	lr, r5
    3918:	bf98      	it	ls
    391a:	2500      	movls	r5, #0
	if (last == user->first) {
    391c:	f896 e001 	ldrb.w	lr, [r6, #1]
    3920:	45ae      	cmp	lr, r5
    3922:	d02f      	beq.n	3984 <ticker_start+0x94>
	user_op = &user->user_op[user->last];
    3924:	f8d6 c004 	ldr.w	ip, [r6, #4]
    3928:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    392c:	ea4f 1e04 	mov.w	lr, r4, lsl #4
    3930:	eb0c 040e 	add.w	r4, ip, lr
	user_op->op = TICKER_USER_OP_TYPE_START;
    3934:	f04f 0a03 	mov.w	sl, #3
    3938:	f80c a00e 	strb.w	sl, [ip, lr]
	user_op->params.start.ticks_at_start = ticks_anchor;
    393c:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    393e:	9b08      	ldr	r3, [sp, #32]
    3940:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    3942:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3944:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    3946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3948:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    394a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    394c:	61a3      	str	r3, [r4, #24]
	user_op->params.start.lazy = lazy;
    394e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    3952:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    3954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3956:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    3958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    395a:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    395c:	2302      	movs	r3, #2
    395e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3962:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    3964:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    3966:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3968:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    396a:	70f5      	strb	r5, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    396c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    396e:	6a03      	ldr	r3, [r0, #32]
    3970:	4608      	mov	r0, r1
    3972:	4798      	blx	r3
    3974:	fb09 7308 	mla	r3, r9, r8, r7
    3978:	2200      	movs	r2, #0
    397a:	2104      	movs	r1, #4
    397c:	47a8      	blx	r5
	return user_op->status;
    397e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3984:	2001      	movs	r0, #1
}
    3986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    398a:	bf00      	nop
    398c:	2000028c 	.word	0x2000028c

00003990 <ticker_update>:
{
    3990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3994:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3a28 <ticker_update+0x98>
    3998:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    399c:	fb0a 8e00 	mla	lr, sl, r0, r8
    39a0:	b20f      	sxth	r7, r1
    39a2:	f8de 5004 	ldr.w	r5, [lr, #4]
{
    39a6:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    39a8:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
	if (last >= user->count_user_op) {
    39ac:	f815 5037 	ldrb.w	r5, [r5, r7, lsl #3]
	last = user->last + 1;
    39b0:	78c4      	ldrb	r4, [r0, #3]
    39b2:	1c66      	adds	r6, r4, #1
    39b4:	b2f6      	uxtb	r6, r6
		last = 0;
    39b6:	42b5      	cmp	r5, r6
    39b8:	bf98      	it	ls
    39ba:	2600      	movls	r6, #0
	if (last == user->first) {
    39bc:	7845      	ldrb	r5, [r0, #1]
    39be:	42b5      	cmp	r5, r6
    39c0:	d02f      	beq.n	3a22 <ticker_update+0x92>
	user_op = &user->user_op[user->last];
    39c2:	f8d0 c004 	ldr.w	ip, [r0, #4]
    39c6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    39ca:	0125      	lsls	r5, r4, #4
    39cc:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    39d0:	2704      	movs	r7, #4
    39d2:	f80c 7005 	strb.w	r7, [ip, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    39d6:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    39d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    39dc:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    39de:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    39e2:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    39e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    39e8:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    39ea:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    39ee:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    39f0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    39f4:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
    39f6:	2302      	movs	r3, #2
    39f8:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    39fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    39fc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->op_context = op_context;
    39fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    3a00:	7062      	strb	r2, [r4, #1]
	user_op->op_context = op_context;
    3a02:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3a04:	70c6      	strb	r6, [r0, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3a06:	f8de 3020 	ldr.w	r3, [lr, #32]
    3a0a:	f8de 5024 	ldr.w	r5, [lr, #36]	; 0x24
    3a0e:	4608      	mov	r0, r1
    3a10:	4798      	blx	r3
    3a12:	fb09 830a 	mla	r3, r9, sl, r8
    3a16:	2200      	movs	r2, #0
    3a18:	4639      	mov	r1, r7
    3a1a:	47a8      	blx	r5
	return user_op->status;
    3a1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3a22:	2001      	movs	r0, #1
}
    3a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a28:	2000028c 	.word	0x2000028c

00003a2c <ticker_stop>:
{
    3a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3a30:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3aa0 <ticker_stop+0x74>
    3a34:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3a38:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    3a3c:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    3a3e:	f8de 0004 	ldr.w	r0, [lr, #4]
    3a42:	b20e      	sxth	r6, r1
    3a44:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    3a48:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    3a4c:	78fc      	ldrb	r4, [r7, #3]
    3a4e:	1c65      	adds	r5, r4, #1
    3a50:	b2ed      	uxtb	r5, r5
		last = 0;
    3a52:	42a8      	cmp	r0, r5
    3a54:	bf98      	it	ls
    3a56:	2500      	movls	r5, #0
	if (last == user->first) {
    3a58:	7878      	ldrb	r0, [r7, #1]
    3a5a:	42a8      	cmp	r0, r5
    3a5c:	d01d      	beq.n	3a9a <ticker_stop+0x6e>
	user_op = &user->user_op[user->last];
    3a5e:	6878      	ldr	r0, [r7, #4]
    3a60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3a64:	0124      	lsls	r4, r4, #4
    3a66:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    3a68:	f04f 0c05 	mov.w	ip, #5
    3a6c:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = ticker_id;
    3a70:	7072      	strb	r2, [r6, #1]
	user_op->fp_op_func = fp_op_func;
    3a72:	62b3      	str	r3, [r6, #40]	; 0x28
	user_op->status = TICKER_STATUS_BUSY;
    3a74:	2202      	movs	r2, #2
	user_op->op_context = op_context;
    3a76:	9b08      	ldr	r3, [sp, #32]
	user_op->status = TICKER_STATUS_BUSY;
    3a78:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
    3a7a:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3a7c:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3a7e:	f8de 3020 	ldr.w	r3, [lr, #32]
    3a82:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3a86:	4608      	mov	r0, r1
    3a88:	4798      	blx	r3
    3a8a:	fb08 930a 	mla	r3, r8, sl, r9
    3a8e:	2200      	movs	r2, #0
    3a90:	2104      	movs	r1, #4
    3a92:	47a0      	blx	r4
	return user_op->status;
    3a94:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3a9a:	2001      	movs	r0, #1
}
    3a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3aa0:	2000028c 	.word	0x2000028c

00003aa4 <ticker_next_slot_get>:
{
    3aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3aa8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3b24 <ticker_next_slot_get+0x80>
    3aac:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
{
    3ab0:	4681      	mov	r9, r0
	user = &instance->user[user_id];
    3ab2:	fb0a 8000 	mla	r0, sl, r0, r8
    3ab6:	fa0f fe81 	sxth.w	lr, r1
    3aba:	6845      	ldr	r5, [r0, #4]
    3abc:	eb05 07ce 	add.w	r7, r5, lr, lsl #3
	if (last >= user->count_user_op) {
    3ac0:	f815 503e 	ldrb.w	r5, [r5, lr, lsl #3]
	last = user->last + 1;
    3ac4:	78fc      	ldrb	r4, [r7, #3]
    3ac6:	1c66      	adds	r6, r4, #1
    3ac8:	b2f6      	uxtb	r6, r6
		last = 0;
    3aca:	42b5      	cmp	r5, r6
    3acc:	bf98      	it	ls
    3ace:	2600      	movls	r6, #0
	if (last == user->first) {
    3ad0:	787d      	ldrb	r5, [r7, #1]
    3ad2:	42b5      	cmp	r5, r6
    3ad4:	d023      	beq.n	3b1e <ticker_next_slot_get+0x7a>
	user_op = &user->user_op[user->last];
    3ad6:	f8d7 c004 	ldr.w	ip, [r7, #4]
    3ada:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3ade:	0125      	lsls	r5, r4, #4
    3ae0:	eb0c 0405 	add.w	r4, ip, r5
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    3ae4:	f04f 0e02 	mov.w	lr, #2
    3ae8:	f80c e005 	strb.w	lr, [ip, r5]
	user_op->params.slot_get.ticks_current = ticks_current;
    3aec:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    3aee:	9b08      	ldr	r3, [sp, #32]
    3af0:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
    3af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3af4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->id = TICKER_NULL;
    3af6:	25ff      	movs	r5, #255	; 0xff
	user_op->op_context = op_context;
    3af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	user_op->params.slot_get.ticker_id = ticker_id;
    3afa:	6062      	str	r2, [r4, #4]
	user_op->id = TICKER_NULL;
    3afc:	7065      	strb	r5, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3afe:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
	user_op->op_context = op_context;
    3b02:	62e3      	str	r3, [r4, #44]	; 0x2c
	user->last = last;
    3b04:	70fe      	strb	r6, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3b06:	6a45      	ldr	r5, [r0, #36]	; 0x24
    3b08:	6a03      	ldr	r3, [r0, #32]
    3b0a:	4608      	mov	r0, r1
    3b0c:	4798      	blx	r3
    3b0e:	fb09 830a 	mla	r3, r9, sl, r8
    3b12:	2200      	movs	r2, #0
    3b14:	2104      	movs	r1, #4
    3b16:	47a8      	blx	r5
	return user_op->status;
    3b18:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3b1e:	2001      	movs	r0, #1
}
    3b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b24:	2000028c 	.word	0x2000028c

00003b28 <ticker_job_idle_get>:
{
    3b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->user[user_id];
    3b2c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3b9c <ticker_job_idle_get+0x74>
    3b30:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
    3b34:	fb0a 9e00 	mla	lr, sl, r0, r9
{
    3b38:	4680      	mov	r8, r0
	user = &instance->user[user_id];
    3b3a:	f8de 0004 	ldr.w	r0, [lr, #4]
    3b3e:	b20e      	sxth	r6, r1
    3b40:	eb00 07c6 	add.w	r7, r0, r6, lsl #3
	if (last >= user->count_user_op) {
    3b44:	f810 0036 	ldrb.w	r0, [r0, r6, lsl #3]
	last = user->last + 1;
    3b48:	78fc      	ldrb	r4, [r7, #3]
    3b4a:	1c65      	adds	r5, r4, #1
    3b4c:	b2ed      	uxtb	r5, r5
		last = 0;
    3b4e:	42a8      	cmp	r0, r5
    3b50:	bf98      	it	ls
    3b52:	2500      	movls	r5, #0
	if (last == user->first) {
    3b54:	7878      	ldrb	r0, [r7, #1]
    3b56:	42a8      	cmp	r0, r5
    3b58:	d01d      	beq.n	3b96 <ticker_job_idle_get+0x6e>
	user_op = &user->user_op[user->last];
    3b5a:	6878      	ldr	r0, [r7, #4]
    3b5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3b60:	0124      	lsls	r4, r4, #4
    3b62:	1906      	adds	r6, r0, r4
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    3b64:	f04f 0c01 	mov.w	ip, #1
    3b68:	f800 c004 	strb.w	ip, [r0, r4]
	user_op->id = TICKER_NULL;
    3b6c:	20ff      	movs	r0, #255	; 0xff
    3b6e:	7070      	strb	r0, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
    3b70:	2002      	movs	r0, #2
    3b72:	6270      	str	r0, [r6, #36]	; 0x24
	user_op->fp_op_func = fp_op_func;
    3b74:	62b2      	str	r2, [r6, #40]	; 0x28
	user_op->op_context = op_context;
    3b76:	62f3      	str	r3, [r6, #44]	; 0x2c
	user->last = last;
    3b78:	70fd      	strb	r5, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3b7a:	f8de 3020 	ldr.w	r3, [lr, #32]
    3b7e:	f8de 4024 	ldr.w	r4, [lr, #36]	; 0x24
    3b82:	4608      	mov	r0, r1
    3b84:	4798      	blx	r3
    3b86:	fb08 930a 	mla	r3, r8, sl, r9
    3b8a:	2200      	movs	r2, #0
    3b8c:	2104      	movs	r1, #4
    3b8e:	47a0      	blx	r4
	return user_op->status;
    3b90:	6a70      	ldr	r0, [r6, #36]	; 0x24
    3b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    3b96:	2001      	movs	r0, #1
}
    3b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b9c:	2000028c 	.word	0x2000028c

00003ba0 <ticker_job_sched>:
{
    3ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3ba4:	4c08      	ldr	r4, [pc, #32]	; (3bc8 <ticker_job_sched+0x28>)
    3ba6:	252c      	movs	r5, #44	; 0x2c
    3ba8:	fb05 4300 	mla	r3, r5, r0, r4
{
    3bac:	4606      	mov	r6, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3bae:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    3bb0:	6a1b      	ldr	r3, [r3, #32]
    3bb2:	4608      	mov	r0, r1
    3bb4:	4798      	blx	r3
    3bb6:	fb06 4305 	mla	r3, r6, r5, r4
    3bba:	46bc      	mov	ip, r7
    3bbc:	2200      	movs	r2, #0
    3bbe:	2104      	movs	r1, #4
}
    3bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    3bc4:	4760      	bx	ip
    3bc6:	bf00      	nop
    3bc8:	2000028c 	.word	0x2000028c

00003bcc <ticker_ticks_now_get>:
	return cntr_cnt_get();
    3bcc:	f005 bb4e 	b.w	926c <cntr_cnt_get>

00003bd0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3bd0:	1a40      	subs	r0, r0, r1
}
    3bd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3bd6:	4770      	bx	lr

00003bd8 <ll_addr_get>:

static u8_t pub_addr[BDADDR_SIZE];
static u8_t rnd_addr[BDADDR_SIZE];

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
    3bd8:	b508      	push	{r3, lr}
    3bda:	4603      	mov	r3, r0
	if (addr_type > 1) {
    3bdc:	2b01      	cmp	r3, #1
{
    3bde:	4608      	mov	r0, r1
	if (addr_type > 1) {
    3be0:	d80e      	bhi.n	3c00 <ll_addr_get+0x28>
		return NULL;
	}

	if (addr_type) {
    3be2:	b133      	cbz	r3, 3bf2 <ll_addr_get+0x1a>
		if (bdaddr) {
    3be4:	b119      	cbz	r1, 3bee <ll_addr_get+0x16>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    3be6:	2206      	movs	r2, #6
    3be8:	4906      	ldr	r1, [pc, #24]	; (3c04 <ll_addr_get+0x2c>)
    3bea:	f7fc fd05 	bl	5f8 <memcpy>
		}

		return rnd_addr;
    3bee:	4805      	ldr	r0, [pc, #20]	; (3c04 <ll_addr_get+0x2c>)
    3bf0:	bd08      	pop	{r3, pc}
	}

	if (bdaddr) {
    3bf2:	b119      	cbz	r1, 3bfc <ll_addr_get+0x24>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    3bf4:	2206      	movs	r2, #6
    3bf6:	4904      	ldr	r1, [pc, #16]	; (3c08 <ll_addr_get+0x30>)
    3bf8:	f7fc fcfe 	bl	5f8 <memcpy>
	}

	return pub_addr;
    3bfc:	4802      	ldr	r0, [pc, #8]	; (3c08 <ll_addr_get+0x30>)
}
    3bfe:	bd08      	pop	{r3, pc}
		return NULL;
    3c00:	2000      	movs	r0, #0
    3c02:	bd08      	pop	{r3, pc}
    3c04:	200002ea 	.word	0x200002ea
    3c08:	200002e4 	.word	0x200002e4

00003c0c <ll_addr_set>:

u32_t ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
    3c0c:	b570      	push	{r4, r5, r6, lr}
    3c0e:	4606      	mov	r6, r0
    3c10:	460d      	mov	r5, r1
	if (ll_adv_is_enabled() ||
    3c12:	f004 fea1 	bl	8958 <ll_adv_is_enabled>
    3c16:	4604      	mov	r4, r0
    3c18:	b110      	cbz	r0, 3c20 <ll_addr_set+0x14>
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
    3c1a:	240c      	movs	r4, #12
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
}
    3c1c:	4620      	mov	r0, r4
    3c1e:	bd70      	pop	{r4, r5, r6, pc}
	    (ll_scan_is_enabled() & (BIT(1) | BIT(2)))) {
    3c20:	f004 feb0 	bl	8984 <ll_scan_is_enabled>
	if (ll_adv_is_enabled() ||
    3c24:	f010 0f06 	tst.w	r0, #6
    3c28:	d1f7      	bne.n	3c1a <ll_addr_set+0xe>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3c2a:	2206      	movs	r2, #6
    3c2c:	4629      	mov	r1, r5
	if (addr_type) {
    3c2e:	b11e      	cbz	r6, 3c38 <ll_addr_set+0x2c>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    3c30:	4802      	ldr	r0, [pc, #8]	; (3c3c <ll_addr_set+0x30>)
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    3c32:	f7fc fce1 	bl	5f8 <memcpy>
    3c36:	e7f1      	b.n	3c1c <ll_addr_set+0x10>
    3c38:	4801      	ldr	r0, [pc, #4]	; (3c40 <ll_addr_set+0x34>)
    3c3a:	e7fa      	b.n	3c32 <ll_addr_set+0x26>
    3c3c:	200002ea 	.word	0x200002ea
    3c40:	200002e4 	.word	0x200002e4

00003c44 <ll_tx_pwr_get>:
}

void ll_tx_pwr_get(s8_t *min, s8_t *max)
{
	/* TODO: Support TX Power Level other than 0dBm */
	*min = 0;
    3c44:	2300      	movs	r3, #0
    3c46:	7003      	strb	r3, [r0, #0]
	*max = 0;
    3c48:	700b      	strb	r3, [r1, #0]
    3c4a:	4770      	bx	lr

00003c4c <bt_rand>:
#include "common/log.h"

#include "hal/ecb.h"

int bt_rand(void *buf, size_t len)
{
    3c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3c4e:	4607      	mov	r7, r0
    3c50:	460e      	mov	r6, r1
	while (len) {
    3c52:	460c      	mov	r4, r1
    3c54:	1b35      	subs	r5, r6, r4
    3c56:	443d      	add	r5, r7
    3c58:	b18c      	cbz	r4, 3c7e <bt_rand+0x32>
		u32_t v = sys_rand32_get();
    3c5a:	f7fd fbcd 	bl	13f8 <sys_rand32_get>

		if (len >= sizeof(v)) {
    3c5e:	2c03      	cmp	r4, #3
		u32_t v = sys_rand32_get();
    3c60:	9001      	str	r0, [sp, #4]
		if (len >= sizeof(v)) {
    3c62:	d907      	bls.n	3c74 <bt_rand+0x28>
			memcpy(buf, &v, sizeof(v));
    3c64:	2204      	movs	r2, #4
    3c66:	eb0d 0102 	add.w	r1, sp, r2
    3c6a:	4628      	mov	r0, r5
    3c6c:	f7fc fcc4 	bl	5f8 <memcpy>

			buf += sizeof(v);
			len -= sizeof(v);
    3c70:	3c04      	subs	r4, #4
    3c72:	e7ef      	b.n	3c54 <bt_rand+0x8>
		} else {
			memcpy(buf, &v, len);
    3c74:	4622      	mov	r2, r4
    3c76:	a901      	add	r1, sp, #4
    3c78:	4628      	mov	r0, r5
    3c7a:	f7fc fcbd 	bl	5f8 <memcpy>
			break;
		}
	}

	return 0;
}
    3c7e:	2000      	movs	r0, #0
    3c80:	b003      	add	sp, #12
    3c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003c84 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    3c84:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    3c86:	4802      	ldr	r0, [pc, #8]	; (3c90 <_hci_driver_init+0xc>)
    3c88:	f7fe fe72 	bl	2970 <bt_hci_driver_register>

	return 0;
}
    3c8c:	2000      	movs	r0, #0
    3c8e:	bd08      	pop	{r3, pc}
    3c90:	0000b844 	.word	0x0000b844

00003c94 <hci_driver_send>:
{
    3c94:	b510      	push	{r4, lr}
	if (!buf->len) {
    3c96:	8983      	ldrh	r3, [r0, #12]
{
    3c98:	4604      	mov	r4, r0
	if (!buf->len) {
    3c9a:	b15b      	cbz	r3, 3cb4 <hci_driver_send+0x20>
	switch (type) {
    3c9c:	7d03      	ldrb	r3, [r0, #20]
    3c9e:	b94b      	cbnz	r3, 3cb4 <hci_driver_send+0x20>
	evt = hci_cmd_handle(buf);
    3ca0:	f000 faca 	bl	4238 <hci_cmd_handle>
	if (evt) {
    3ca4:	b108      	cbz	r0, 3caa <hci_driver_send+0x16>
		bt_recv_prio(evt);
    3ca6:	f7fe fe1d 	bl	28e4 <bt_recv_prio>
		net_buf_unref(buf);
    3caa:	4620      	mov	r0, r4
    3cac:	f006 f88e 	bl	9dcc <net_buf_unref>
	return err;
    3cb0:	2000      	movs	r0, #0
    3cb2:	bd10      	pop	{r4, pc}
		return -EINVAL;
    3cb4:	f06f 0015 	mvn.w	r0, #21
}
    3cb8:	bd10      	pop	{r4, pc}
	...

00003cbc <recv_thread>:
{
    3cbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3cbe:	4d1c      	ldr	r5, [pc, #112]	; (3d30 <recv_thread+0x74>)
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3cc0:	2600      	movs	r6, #0
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    3cc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3cc6:	4628      	mov	r0, r5
    3cc8:	f006 fad1 	bl	a26e <k_queue_get>
		if (node_rx && !buf) {
    3ccc:	4604      	mov	r4, r0
    3cce:	b318      	cbz	r0, 3d18 <recv_thread+0x5c>
	s8_t class = hci_get_class(node_rx);
    3cd0:	f000 fe26 	bl	4920 <hci_get_class>
	switch (class) {
    3cd4:	2802      	cmp	r0, #2
    3cd6:	9401      	str	r4, [sp, #4]
    3cd8:	d821      	bhi.n	3d1e <recv_thread+0x62>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    3cda:	2801      	cmp	r0, #1
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    3cdc:	bf0e      	itee	eq
    3cde:	2100      	moveq	r1, #0
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    3ce0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    3ce4:	2001      	movne	r0, #1
    3ce6:	f7fe ff47 	bl	2b78 <bt_buf_get_rx>
    3cea:	4604      	mov	r4, r0
		if (buf) {
    3cec:	b118      	cbz	r0, 3cf6 <recv_thread+0x3a>
			hci_evt_encode(node_rx, buf);
    3cee:	4601      	mov	r1, r0
    3cf0:	9801      	ldr	r0, [sp, #4]
    3cf2:	f000 fd87 	bl	4804 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    3cf6:	9b01      	ldr	r3, [sp, #4]
    3cf8:	2100      	movs	r1, #0
    3cfa:	88d8      	ldrh	r0, [r3, #6]
    3cfc:	f004 ff08 	bl	8b10 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    3d00:	a802      	add	r0, sp, #8
    3d02:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    3d06:	601e      	str	r6, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    3d08:	f004 fea2 	bl	8a50 <ll_rx_mem_release>
		if (buf) {
    3d0c:	b124      	cbz	r4, 3d18 <recv_thread+0x5c>
			if (buf->len) {
    3d0e:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    3d10:	4620      	mov	r0, r4
			if (buf->len) {
    3d12:	b153      	cbz	r3, 3d2a <recv_thread+0x6e>
				bt_recv(buf);
    3d14:	f7fe fc7e 	bl	2614 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    3d18:	f006 fc54 	bl	a5c4 <_impl_k_yield>
    3d1c:	e7d1      	b.n	3cc2 <recv_thread+0x6>
		LL_ASSERT(0);
    3d1e:	4040      	eors	r0, r0
    3d20:	f380 8811 	msr	BASEPRI, r0
    3d24:	f04f 0004 	mov.w	r0, #4
    3d28:	df02      	svc	2
				net_buf_unref(buf);
    3d2a:	f006 f84f 	bl	9dcc <net_buf_unref>
    3d2e:	e7f3      	b.n	3d18 <recv_thread+0x5c>
    3d30:	200062dc 	.word	0x200062dc

00003d34 <prio_recv_thread>:
{
    3d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    3d36:	4c0c      	ldr	r4, [pc, #48]	; (3d68 <prio_recv_thread+0x34>)
			k_fifo_put(&recv_fifo, node_rx);
    3d38:	4d0c      	ldr	r5, [pc, #48]	; (3d6c <prio_recv_thread+0x38>)
		while ((num_cmplt = ll_rx_get(&node_rx, &handle))) {
    3d3a:	f10d 0102 	add.w	r1, sp, #2
    3d3e:	a801      	add	r0, sp, #4
    3d40:	f004 fe4e 	bl	89e0 <ll_rx_get>
    3d44:	2800      	cmp	r0, #0
    3d46:	d1f8      	bne.n	3d3a <prio_recv_thread+0x6>
		if (node_rx) {
    3d48:	9b01      	ldr	r3, [sp, #4]
    3d4a:	b133      	cbz	r3, 3d5a <prio_recv_thread+0x26>
			ll_rx_dequeue();
    3d4c:	f005 f830 	bl	8db0 <ll_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    3d50:	9901      	ldr	r1, [sp, #4]
    3d52:	4628      	mov	r0, r5
    3d54:	f006 fa67 	bl	a226 <k_queue_append>
    3d58:	e7ef      	b.n	3d3a <prio_recv_thread+0x6>
    3d5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3d5e:	4620      	mov	r0, r4
    3d60:	f006 fd0c 	bl	a77c <_impl_k_sem_take>
    3d64:	e7e9      	b.n	3d3a <prio_recv_thread+0x6>
    3d66:	bf00      	nop
    3d68:	200062c4 	.word	0x200062c4
    3d6c:	200062dc 	.word	0x200062dc

00003d70 <hci_driver_open>:
{
    3d70:	b510      	push	{r4, lr}
	err = ll_init(&sem_prio_recv);
    3d72:	4814      	ldr	r0, [pc, #80]	; (3dc4 <hci_driver_open+0x54>)
{
    3d74:	b086      	sub	sp, #24
	err = ll_init(&sem_prio_recv);
    3d76:	f005 f8bf 	bl	8ef8 <ll_init>
	if (err) {
    3d7a:	4604      	mov	r4, r0
    3d7c:	b9f8      	cbnz	r0, 3dbe <hci_driver_open+0x4e>
	hci_init(NULL);
    3d7e:	f000 fdef 	bl	4960 <hci_init>

    3d82:	f06f 0309 	mvn.w	r3, #9
    3d86:	9303      	str	r3, [sp, #12]
    3d88:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    3d8c:	4b0e      	ldr	r3, [pc, #56]	; (3dc8 <hci_driver_open+0x58>)
    3d8e:	490f      	ldr	r1, [pc, #60]	; (3dcc <hci_driver_open+0x5c>)
    3d90:	9405      	str	r4, [sp, #20]
    3d92:	9404      	str	r4, [sp, #16]
    3d94:	9402      	str	r4, [sp, #8]
    3d96:	9401      	str	r4, [sp, #4]
    3d98:	9400      	str	r4, [sp, #0]
    3d9a:	480d      	ldr	r0, [pc, #52]	; (3dd0 <hci_driver_open+0x60>)
    3d9c:	f006 feb0 	bl	ab00 <_impl_k_thread_create>
    3da0:	f06f 0307 	mvn.w	r3, #7
    3da4:	9303      	str	r3, [sp, #12]
    3da6:	9405      	str	r4, [sp, #20]
    3da8:	9404      	str	r4, [sp, #16]
    3daa:	9402      	str	r4, [sp, #8]
    3dac:	9401      	str	r4, [sp, #4]
    3dae:	9400      	str	r4, [sp, #0]
    3db0:	4b08      	ldr	r3, [pc, #32]	; (3dd4 <hci_driver_open+0x64>)
    3db2:	4909      	ldr	r1, [pc, #36]	; (3dd8 <hci_driver_open+0x68>)
    3db4:	4809      	ldr	r0, [pc, #36]	; (3ddc <hci_driver_open+0x6c>)
    3db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3dba:	f006 fea1 	bl	ab00 <_impl_k_thread_create>
}
    3dbe:	4620      	mov	r0, r4
    3dc0:	b006      	add	sp, #24
    3dc2:	bd10      	pop	{r4, pc}
    3dc4:	200062c4 	.word	0x200062c4
    3dc8:	00003d35 	.word	0x00003d35
    3dcc:	20004890 	.word	0x20004890
    3dd0:	20002e2c 	.word	0x20002e2c
    3dd4:	00003cbd 	.word	0x00003cbd
    3dd8:	20004a50 	.word	0x20004a50
    3ddc:	20002dc4 	.word	0x20002dc4

00003de0 <sys_put_le32>:
	dst[1] = val >> 8;
    3de0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
    3de4:	7008      	strb	r0, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
    3de6:	0c00      	lsrs	r0, r0, #16
	dst[0] = val;
    3de8:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
    3dea:	0a00      	lsrs	r0, r0, #8
    3dec:	704b      	strb	r3, [r1, #1]
    3dee:	70c8      	strb	r0, [r1, #3]
    3df0:	4770      	bx	lr

00003df2 <evt_create>:
static void le_conn_complete(u8_t status, struct radio_le_conn_cmplt *radio_cc,
			     u16_t handle, struct net_buf *buf);
#endif /* CONFIG_BT_CONN */

static void evt_create(struct net_buf *buf, u8_t evt, u8_t len)
{
    3df2:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    3df4:	3008      	adds	r0, #8
{
    3df6:	460d      	mov	r5, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    3df8:	2102      	movs	r1, #2
{
    3dfa:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    3dfc:	f006 f818 	bl	9e30 <net_buf_simple_add>
	hdr->evt = evt;
    3e00:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    3e02:	7044      	strb	r4, [r0, #1]
    3e04:	bd38      	pop	{r3, r4, r5, pc}
	...

00003e08 <cmd_complete>:
}

static void *cmd_complete(struct net_buf **buf, u8_t plen)
{
    3e08:	b538      	push	{r3, r4, r5, lr}
    3e0a:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *cc;

	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
    3e10:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3e12:	f7fe fec1 	bl	2b98 <bt_buf_get_cmd_complete>

	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3e16:	1cea      	adds	r2, r5, #3
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    3e18:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    3e1a:	b2d2      	uxtb	r2, r2
    3e1c:	210e      	movs	r1, #14
    3e1e:	f7ff ffe8 	bl	3df2 <evt_create>

	cc = net_buf_add(*buf, sizeof(*cc));
    3e22:	6820      	ldr	r0, [r4, #0]
    3e24:	2103      	movs	r1, #3
    3e26:	3008      	adds	r0, #8
    3e28:	f006 f802 	bl	9e30 <net_buf_simple_add>
	cc->ncmd = 1;
    3e2c:	2301      	movs	r3, #1
    3e2e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    3e30:	4b05      	ldr	r3, [pc, #20]	; (3e48 <cmd_complete+0x40>)
    3e32:	881b      	ldrh	r3, [r3, #0]
    3e34:	f8a0 3001 	strh.w	r3, [r0, #1]

	return net_buf_add(*buf, plen);
    3e38:	6820      	ldr	r0, [r4, #0]
    3e3a:	4629      	mov	r1, r5
    3e3c:	3008      	adds	r0, #8
}
    3e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    3e42:	f005 bff5 	b.w	9e30 <net_buf_simple_add>
    3e46:	bf00      	nop
    3e48:	200002f0 	.word	0x200002f0

00003e4c <meta_evt>:
	return buf;
}
#endif

static void *meta_evt(struct net_buf *buf, u8_t subevt, u8_t melen)
{
    3e4c:	b570      	push	{r4, r5, r6, lr}
    3e4e:	4604      	mov	r4, r0
    3e50:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    3e52:	3201      	adds	r2, #1
{
    3e54:	460e      	mov	r6, r1
	me = net_buf_add(buf, sizeof(*me));
    3e56:	3408      	adds	r4, #8
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    3e58:	b2d2      	uxtb	r2, r2
    3e5a:	213e      	movs	r1, #62	; 0x3e
    3e5c:	f7ff ffc9 	bl	3df2 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    3e60:	2101      	movs	r1, #1
    3e62:	4620      	mov	r0, r4
    3e64:	f005 ffe4 	bl	9e30 <net_buf_simple_add>
	me->subevent = subevt;
    3e68:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    3e6a:	4629      	mov	r1, r5
    3e6c:	4620      	mov	r0, r4
}
    3e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    3e72:	f005 bfdd 	b.w	9e30 <net_buf_simple_add>
	...

00003e78 <le_advertising_report>:
}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

static void le_advertising_report(struct pdu_data *pdu_data, u8_t *b,
				  struct net_buf *buf)
{
    3e78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3e7c:	2301      	movs	r3, #1
    3e7e:	f88d 3001 	strb.w	r3, [sp, #1]
    3e82:	2303      	movs	r3, #3
    3e84:	f88d 3002 	strb.w	r3, [sp, #2]
    3e88:	23ff      	movs	r3, #255	; 0xff
    3e8a:	f88d 3003 	strb.w	r3, [sp, #3]
    3e8e:	f88d 3005 	strb.w	r3, [sp, #5]
    3e92:	2302      	movs	r3, #2
    3e94:	f88d 3006 	strb.w	r3, [sp, #6]
	if (adv->tx_addr) {
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
	}
#endif

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3e98:	4b54      	ldr	r3, [pc, #336]	; (3fec <le_advertising_report+0x174>)
{
    3e9a:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3e9c:	2204      	movs	r2, #4
    3e9e:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ea6:	2200      	movs	r2, #0
    3ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3eac:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3eae:	4313      	orrs	r3, r2
{
    3eb0:	4604      	mov	r4, r0
    3eb2:	4688      	mov	r8, r1
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    3eb4:	f88d 5000 	strb.w	r5, [sp]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    3eb8:	f000 8094 	beq.w	3fe4 <le_advertising_report+0x16c>
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
		return;
	}
#else
	if (!(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    3ebc:	4b4c      	ldr	r3, [pc, #304]	; (3ff0 <le_advertising_report+0x178>)
    3ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ec2:	2300      	movs	r3, #0
    3ec4:	f002 0202 	and.w	r2, r2, #2
    3ec8:	4313      	orrs	r3, r2
    3eca:	f000 808b 	beq.w	3fe4 <le_advertising_report+0x16c>
	if (dup_count >= 0) {
    3ece:	4e49      	ldr	r6, [pc, #292]	; (3ff4 <le_advertising_report+0x17c>)
    3ed0:	6833      	ldr	r3, [r6, #0]
    3ed2:	42ab      	cmp	r3, r5
    3ed4:	f100 0702 	add.w	r7, r0, #2
    3ed8:	db49      	blt.n	3f6e <le_advertising_report+0xf6>
    3eda:	f8df a124 	ldr.w	sl, [pc, #292]	; 4000 <le_advertising_report+0x188>
		for (i = 0; i < dup_count; i++) {
    3ede:	6833      	ldr	r3, [r6, #0]
    3ee0:	429d      	cmp	r5, r3
    3ee2:	db27      	blt.n	3f34 <le_advertising_report+0xbc>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    3ee4:	4d44      	ldr	r5, [pc, #272]	; (3ff8 <le_advertising_report+0x180>)
    3ee6:	f8df a114 	ldr.w	sl, [pc, #276]	; 3ffc <le_advertising_report+0x184>
    3eea:	6828      	ldr	r0, [r5, #0]
    3eec:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
    3ef0:	2206      	movs	r2, #6
    3ef2:	4639      	mov	r1, r7
    3ef4:	3002      	adds	r0, #2
    3ef6:	f7fc fb7f 	bl	5f8 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    3efa:	682a      	ldr	r2, [r5, #0]
    3efc:	7823      	ldrb	r3, [r4, #0]
    3efe:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
    3f02:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3f06:	704b      	strb	r3, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    3f08:	7823      	ldrb	r3, [r4, #0]
    3f0a:	f003 010f 	and.w	r1, r3, #15
    3f0e:	2301      	movs	r3, #1
    3f10:	408b      	lsls	r3, r1
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3f12:	6831      	ldr	r1, [r6, #0]
		dup_filter[dup_curr].mask = BIT(adv->type);
    3f14:	f80a 3032 	strb.w	r3, [sl, r2, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3f18:	290f      	cmp	r1, #15
			dup_count++;
    3f1a:	bfd5      	itete	le
    3f1c:	3101      	addle	r1, #1
			dup_curr++;
    3f1e:	3201      	addgt	r2, #1
			dup_curr = dup_count;
    3f20:	6029      	strle	r1, [r5, #0]
			dup_curr++;
    3f22:	602a      	strgt	r2, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3f24:	682a      	ldr	r2, [r5, #0]
			dup_count++;
    3f26:	bfd8      	it	le
    3f28:	6031      	strle	r1, [r6, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    3f2a:	2a10      	cmp	r2, #16
    3f2c:	d11f      	bne.n	3f6e <le_advertising_report+0xf6>
			dup_curr = 0;
    3f2e:	2200      	movs	r2, #0
    3f30:	602a      	str	r2, [r5, #0]
    3f32:	e01c      	b.n	3f6e <le_advertising_report+0xf6>
			if (!memcmp(&adv->adv_ind.addr[0],
    3f34:	2206      	movs	r2, #6
    3f36:	4651      	mov	r1, sl
    3f38:	4638      	mov	r0, r7
    3f3a:	f7fc fb48 	bl	5ce <memcmp>
    3f3e:	b9f0      	cbnz	r0, 3f7e <le_advertising_report+0x106>
			    adv->tx_addr == dup_filter[i].addr.type) {
    3f40:	7823      	ldrb	r3, [r4, #0]
    3f42:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
    3f46:	461a      	mov	r2, r3
    3f48:	f3c3 1380 	ubfx	r3, r3, #6, #1
				    sizeof(bt_addr_t)) &&
    3f4c:	428b      	cmp	r3, r1
    3f4e:	d116      	bne.n	3f7e <le_advertising_report+0x106>
				if (dup_filter[i].mask & BIT(adv->type)) {
    3f50:	482a      	ldr	r0, [pc, #168]	; (3ffc <le_advertising_report+0x184>)
    3f52:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
    3f56:	f002 020f 	and.w	r2, r2, #15
    3f5a:	fa23 f102 	lsr.w	r1, r3, r2
    3f5e:	07c9      	lsls	r1, r1, #31
    3f60:	d440      	bmi.n	3fe4 <le_advertising_report+0x16c>
				dup_filter[i].mask |= BIT(adv->type);
    3f62:	2101      	movs	r1, #1
    3f64:	fa01 f202 	lsl.w	r2, r1, r2
    3f68:	4313      	orrs	r3, r2
    3f6a:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
	if (dup_found(adv)) {
		return;
	}
#endif /* CONFIG_BT_CTLR_DUP_FILTER_LEN > 0 */

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    3f6e:	7823      	ldrb	r3, [r4, #0]
    3f70:	f003 030f 	and.w	r3, r3, #15
    3f74:	2b01      	cmp	r3, #1
    3f76:	7863      	ldrb	r3, [r4, #1]
    3f78:	d105      	bne.n	3f86 <le_advertising_report+0x10e>
		data_len = (adv->len - BDADDR_SIZE);
	} else {
		data_len = 0;
    3f7a:	2600      	movs	r6, #0
    3f7c:	e005      	b.n	3f8a <le_advertising_report+0x112>
		for (i = 0; i < dup_count; i++) {
    3f7e:	3501      	adds	r5, #1
    3f80:	f10a 0a08 	add.w	sl, sl, #8
    3f84:	e7ab      	b.n	3ede <le_advertising_report+0x66>
		data_len = (adv->len - BDADDR_SIZE);
    3f86:	1f9e      	subs	r6, r3, #6
    3f88:	b2f6      	uxtb	r6, r6
	}

	/* The Link Layer currently returns RSSI as an absolute value */
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f8a:	4498      	add	r8, r3
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	info_len = sizeof(struct bt_hci_evt_le_advertising_info) + data_len +
		   sizeof(*prssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f8c:	f106 020b 	add.w	r2, r6, #11
    3f90:	b2d2      	uxtb	r2, r2
    3f92:	2102      	movs	r1, #2
    3f94:	4648      	mov	r0, r9
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3f96:	f898 800a 	ldrb.w	r8, [r8, #10]
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3f9a:	f7ff ff57 	bl	3e4c <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    3f9e:	2301      	movs	r3, #1
    3fa0:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((u8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    3fa2:	7823      	ldrb	r3, [r4, #0]
    3fa4:	aa02      	add	r2, sp, #8
    3fa6:	f003 030f 	and.w	r3, r3, #15
    3faa:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    3fac:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
    3fae:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    3fb2:	7043      	strb	r3, [r0, #1]
	} else {
#else
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */

		adv_info->addr.type = adv->tx_addr;
    3fb4:	f814 3b08 	ldrb.w	r3, [r4], #8
    3fb8:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3fbc:	7083      	strb	r3, [r0, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
    3fbe:	2206      	movs	r2, #6
    3fc0:	4639      	mov	r1, r7
    3fc2:	3003      	adds	r0, #3
    3fc4:	f7fc fb18 	bl	5f8 <memcpy>
		       sizeof(bt_addr_t));
	}

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3fc8:	350a      	adds	r5, #10
	adv_info->length = data_len;
    3fca:	f805 6c01 	strb.w	r6, [r5, #-1]
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    3fce:	f1c8 0800 	rsb	r8, r8, #0
    3fd2:	fa4f f888 	sxtb.w	r8, r8
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    3fd6:	4632      	mov	r2, r6
    3fd8:	4621      	mov	r1, r4
    3fda:	4628      	mov	r0, r5
    3fdc:	f7fc fb0c 	bl	5f8 <memcpy>
	/* RSSI */
	prssi = &adv_info->data[0] + data_len;
	*prssi = rssi;
    3fe0:	f805 8006 	strb.w	r8, [r5, r6]
}
    3fe4:	b002      	add	sp, #8
    3fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3fea:	bf00      	nop
    3fec:	200060c0 	.word	0x200060c0
    3ff0:	200060c8 	.word	0x200060c8
    3ff4:	200002f4 	.word	0x200002f4
    3ff8:	200002f8 	.word	0x200002f8
    3ffc:	200002fc 	.word	0x200002fc
    4000:	200002fe 	.word	0x200002fe

00004004 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(u8_t status, struct pdu_data *pdu_data,
				    u16_t handle, struct net_buf *buf)
{
    4004:	b570      	push	{r4, r5, r6, lr}
    4006:	4604      	mov	r4, r0
    4008:	4618      	mov	r0, r3
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    400a:	4b13      	ldr	r3, [pc, #76]	; (4058 <le_remote_feat_complete+0x54>)
{
    400c:	4616      	mov	r6, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    400e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4012:	2200      	movs	r2, #0
    4014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4018:	4313      	orrs	r3, r2
{
    401a:	460d      	mov	r5, r1
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    401c:	d01b      	beq.n	4056 <le_remote_feat_complete+0x52>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    401e:	4b0f      	ldr	r3, [pc, #60]	; (405c <le_remote_feat_complete+0x58>)
    4020:	e9d3 2300 	ldrd	r2, r3, [r3]
    4024:	2300      	movs	r3, #0
    4026:	f002 0208 	and.w	r2, r2, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    402a:	4313      	orrs	r3, r2
    402c:	d013      	beq.n	4056 <le_remote_feat_complete+0x52>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    402e:	220b      	movs	r2, #11
    4030:	2104      	movs	r1, #4
    4032:	f7ff ff0b 	bl	3e4c <meta_evt>

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    4036:	2208      	movs	r2, #8
	sep->status = status;
    4038:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    403a:	f8a0 6001 	strh.w	r6, [r0, #1]
    403e:	3003      	adds	r0, #3
	if (!status) {
    4040:	b924      	cbnz	r4, 404c <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
    4042:	1d29      	adds	r1, r5, #4
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    4044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(&sep->features[0],
    4048:	f7fc bad6 	b.w	5f8 <memcpy>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    404c:	2100      	movs	r1, #0
}
    404e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    4052:	f7fc bafd 	b.w	650 <memset>
    4056:	bd70      	pop	{r4, r5, r6, pc}
    4058:	200060c0 	.word	0x200060c0
    405c:	200060c8 	.word	0x200060c8

00004060 <bt_addr_le_to_str.constprop.36>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4060:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4062:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    4064:	b08a      	sub	sp, #40	; 0x28
    4066:	4604      	mov	r4, r0
    4068:	460e      	mov	r6, r1
    406a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
    406c:	2b03      	cmp	r3, #3
    406e:	d820      	bhi.n	40b2 <bt_addr_le_to_str.constprop.36+0x52>
    4070:	e8df f003 	tbb	[pc, r3]
    4074:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4078:	4911      	ldr	r1, [pc, #68]	; (40c0 <bt_addr_le_to_str.constprop.36+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    407a:	4628      	mov	r0, r5
    407c:	f7fc fa90 	bl	5a0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4080:	7862      	ldrb	r2, [r4, #1]
    4082:	9204      	str	r2, [sp, #16]
    4084:	78a2      	ldrb	r2, [r4, #2]
    4086:	9203      	str	r2, [sp, #12]
    4088:	78e2      	ldrb	r2, [r4, #3]
    408a:	9202      	str	r2, [sp, #8]
    408c:	7922      	ldrb	r2, [r4, #4]
    408e:	9201      	str	r2, [sp, #4]
    4090:	7962      	ldrb	r2, [r4, #5]
    4092:	9200      	str	r2, [sp, #0]
    4094:	79a3      	ldrb	r3, [r4, #6]
    4096:	9505      	str	r5, [sp, #20]
    4098:	4a0a      	ldr	r2, [pc, #40]	; (40c4 <bt_addr_le_to_str.constprop.36+0x64>)
    409a:	211b      	movs	r1, #27
    409c:	4630      	mov	r0, r6
    409e:	f7fd f98d 	bl	13bc <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    40a2:	b00a      	add	sp, #40	; 0x28
    40a4:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    40a6:	4908      	ldr	r1, [pc, #32]	; (40c8 <bt_addr_le_to_str.constprop.36+0x68>)
    40a8:	e7e7      	b.n	407a <bt_addr_le_to_str.constprop.36+0x1a>
		strcpy(type, "public id");
    40aa:	4908      	ldr	r1, [pc, #32]	; (40cc <bt_addr_le_to_str.constprop.36+0x6c>)
    40ac:	e7e5      	b.n	407a <bt_addr_le_to_str.constprop.36+0x1a>
		strcpy(type, "random id");
    40ae:	4908      	ldr	r1, [pc, #32]	; (40d0 <bt_addr_le_to_str.constprop.36+0x70>)
    40b0:	e7e3      	b.n	407a <bt_addr_le_to_str.constprop.36+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    40b2:	4a08      	ldr	r2, [pc, #32]	; (40d4 <bt_addr_le_to_str.constprop.36+0x74>)
    40b4:	210a      	movs	r1, #10
    40b6:	4628      	mov	r0, r5
    40b8:	f7fd f980 	bl	13bc <snprintk>
    40bc:	e7e0      	b.n	4080 <bt_addr_le_to_str.constprop.36+0x20>
    40be:	bf00      	nop
    40c0:	0000b274 	.word	0x0000b274
    40c4:	0000b29d 	.word	0x0000b29d
    40c8:	0000b27b 	.word	0x0000b27b
    40cc:	0000b282 	.word	0x0000b282
    40d0:	0000b28c 	.word	0x0000b28c
    40d4:	0000b296 	.word	0x0000b296

000040d8 <le_adv_ext_report.isra.34>:
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    40d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    40dc:	7803      	ldrb	r3, [r0, #0]
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    40de:	4615      	mov	r5, r2
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    40e0:	f003 020f 	and.w	r2, r3, #15
    40e4:	2a07      	cmp	r2, #7
static void le_adv_ext_report(struct pdu_data *pdu_data, u8_t *b,
    40e6:	b08d      	sub	sp, #52	; 0x34
    40e8:	4606      	mov	r6, r0
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    40ea:	f040 808e 	bne.w	420a <le_adv_ext_report.isra.34+0x132>
		  offsetof(struct pdu_adv, payload) + adv->len];
    40ee:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    40f0:	2a00      	cmp	r2, #0
    40f2:	f000 808a 	beq.w	420a <le_adv_ext_report.isra.34+0x132>
		if (!p->ext_hdr_len) {
    40f6:	7880      	ldrb	r0, [r0, #2]
    40f8:	0680      	lsls	r0, r0, #26
    40fa:	d076      	beq.n	41ea <le_adv_ext_report.isra.34+0x112>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    40fc:	4411      	add	r1, r2
		ptr = (u8_t *)h + sizeof(*h);
    40fe:	1d34      	adds	r4, r6, #4
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4100:	7a8a      	ldrb	r2, [r1, #10]
    4102:	9200      	str	r2, [sp, #0]
		if (h->adv_addr) {
    4104:	78f2      	ldrb	r2, [r6, #3]
    4106:	07d7      	lsls	r7, r2, #31
    4108:	d510      	bpl.n	412c <le_adv_ext_report.isra.34+0x54>
			addr.type = adv->tx_addr;
    410a:	af0c      	add	r7, sp, #48	; 0x30
    410c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4110:	f807 3d24 	strb.w	r3, [r7, #-36]!
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    4114:	4621      	mov	r1, r4
    4116:	2206      	movs	r2, #6
    4118:	f10d 000d 	add.w	r0, sp, #13
    411c:	f7fc fa6c 	bl	5f8 <memcpy>
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4120:	a905      	add	r1, sp, #20
    4122:	4638      	mov	r0, r7
			ptr += BDADDR_SIZE;
    4124:	f106 040a 	add.w	r4, r6, #10
			bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4128:	f7ff ff9a 	bl	4060 <bt_addr_le_to_str.constprop.36>
		if(h->tgt_addr){
    412c:	78f2      	ldrb	r2, [r6, #3]
    412e:	0790      	lsls	r0, r2, #30
			ptr += BDADDR_SIZE;
    4130:	bf48      	it	mi
    4132:	3406      	addmi	r4, #6
		if(h->adi){
    4134:	f012 0908 	ands.w	r9, r2, #8
    4138:	d05e      	beq.n	41f8 <le_adv_ext_report.isra.34+0x120>
			sid_for_info = adi_ptr->sid;
    413a:	7867      	ldrb	r7, [r4, #1]
    413c:	ea4f 1a17 	mov.w	sl, r7, lsr #4
			if(adi_ptr->sid == 0x04){
    4140:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
    4144:	2f40      	cmp	r7, #64	; 0x40
    4146:	d053      	beq.n	41f0 <le_adv_ext_report.isra.34+0x118>
			}else if(adi_ptr->sid == 0x02){
    4148:	f1a7 0120 	sub.w	r1, r7, #32
    414c:	424f      	negs	r7, r1
    414e:	414f      	adcs	r7, r1
	bool aux_adi_present = false;
    4150:	f04f 0900 	mov.w	r9, #0
			ptr += sizeof(*adi_ptr);
    4154:	46a3      	mov	fp, r4
    4156:	3402      	adds	r4, #2
		if(h->aux_ptr){
    4158:	f012 0310 	ands.w	r3, r2, #16
			aux_ptr_present = true;
    415c:	bf1c      	itt	ne
    415e:	2301      	movne	r3, #1
			ptr += sizeof(*ap);
    4160:	3403      	addne	r4, #3
		if (h->tx_pwr) {
    4162:	0652      	lsls	r2, r2, #25
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    4164:	78b2      	ldrb	r2, [r6, #2]
    4166:	9301      	str	r3, [sp, #4]
    4168:	f3c2 0105 	ubfx	r1, r2, #0, #6
    416c:	7872      	ldrb	r2, [r6, #1]
    416e:	eba2 0201 	sub.w	r2, r2, r1
    4172:	b2d2      	uxtb	r2, r2
    4174:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    4178:	f102 0218 	add.w	r2, r2, #24
    417c:	b2d2      	uxtb	r2, r2
    417e:	4628      	mov	r0, r5
    4180:	f04f 010d 	mov.w	r1, #13
			ptr++;
    4184:	bf48      	it	mi
    4186:	3401      	addmi	r4, #1
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    4188:	f7ff fe60 	bl	3e4c <meta_evt>
		sep->num_reports = 1;
    418c:	2201      	movs	r2, #1
		data_len = adv->len -(p->ext_hdr_len + offsetof(struct pdu_adv_com_ext_adv,
    418e:	fa5f f888 	uxtb.w	r8, r8
		sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    4192:	4605      	mov	r5, r0
		sep->num_reports = 1;
    4194:	7002      	strb	r2, [r0, #0]
		if( aux_adi_present && aux_ptr_present){ //aux packet
    4196:	9b01      	ldr	r3, [sp, #4]
    4198:	f1b9 0f00 	cmp.w	r9, #0
    419c:	d03f      	beq.n	421e <le_adv_ext_report.isra.34+0x146>
    419e:	b3cb      	cbz	r3, 4214 <le_adv_ext_report.isra.34+0x13c>
			adv_info->frag = 0x01;	//First fragment - more packets to come;
    41a0:	7082      	strb	r2, [r0, #2]
		if(h->adv_addr){
    41a2:	78f3      	ldrb	r3, [r6, #3]
    41a4:	07db      	lsls	r3, r3, #31
    41a6:	d508      	bpl.n	41ba <le_adv_ext_report.isra.34+0xe2>
			adv_info->addr.type = addr.type;
    41a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    41ac:	70eb      	strb	r3, [r5, #3]
			memcpy(&adv_info->addr.a.val[0], &addr.a.val[0],
    41ae:	2206      	movs	r2, #6
    41b0:	f10d 010d 	add.w	r1, sp, #13
    41b4:	1d28      	adds	r0, r5, #4
    41b6:	f7fc fa1f 	bl	5f8 <memcpy>
		adv_info->evt_type = 0x07;
    41ba:	2307      	movs	r3, #7
    41bc:	706b      	strb	r3, [r5, #1]
		adv_info->sid = sid_for_info;
    41be:	f885 a00c 	strb.w	sl, [r5, #12]
		if(adi_ptr->sid == 0x04){
    41c2:	f89b 3001 	ldrb.w	r3, [fp, #1]
			adv_info->length = data_len;
    41c6:	f885 8018 	strb.w	r8, [r5, #24]
		if(adi_ptr->sid == 0x04){
    41ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    41ce:	f105 0619 	add.w	r6, r5, #25
    41d2:	2b40      	cmp	r3, #64	; 0x40
			memcpy(&adv_info->data[0], ptr, data_len);
    41d4:	4642      	mov	r2, r8
    41d6:	4621      	mov	r1, r4
    41d8:	4630      	mov	r0, r6
		if(adi_ptr->sid == 0x04){
    41da:	d10f      	bne.n	41fc <le_adv_ext_report.isra.34+0x124>
			memcpy(&adv_info->data[0], ptr, data_len);
    41dc:	f7fc fa0c 	bl	5f8 <memcpy>
			memcpy(copy_data, ptr, data_len);
    41e0:	4642      	mov	r2, r8
    41e2:	4621      	mov	r1, r4
    41e4:	4811      	ldr	r0, [pc, #68]	; (422c <le_adv_ext_report.isra.34+0x154>)
    41e6:	f7fc fa07 	bl	5f8 <memcpy>
}
    41ea:	b00d      	add	sp, #52	; 0x34
    41ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				aux_adi_present = true;				// chain pdu's
    41f0:	f04f 0901 	mov.w	r9, #1
	bool adi_present = false;		// to identify aux packet and fragment it
    41f4:	2700      	movs	r7, #0
    41f6:	e7ad      	b.n	4154 <le_adv_ext_report.isra.34+0x7c>
    41f8:	464f      	mov	r7, r9
    41fa:	e7ad      	b.n	4158 <le_adv_ext_report.isra.34+0x80>
			memcpy(&adv_info->data[0], ptr, data_len);
    41fc:	f7fc f9fc 	bl	5f8 <memcpy>
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    4200:	9b00      	ldr	r3, [sp, #0]
    4202:	425b      	negs	r3, r3
			*prssi = rssi;
    4204:	f806 3008 	strb.w	r3, [r6, r8]
    4208:	e7ef      	b.n	41ea <le_adv_ext_report.isra.34+0x112>
		le_advertising_report(pdu_data, b, buf);
    420a:	462a      	mov	r2, r5
    420c:	4630      	mov	r0, r6
    420e:	f7ff fe33 	bl	3e78 <le_advertising_report>
    4212:	e7ea      	b.n	41ea <le_adv_ext_report.isra.34+0x112>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    4214:	2f00      	cmp	r7, #0
    4216:	d1c4      	bne.n	41a2 <le_adv_ext_report.isra.34+0xca>
			adv_info->frag = 0x02; //last paacket of the data or complete packet
    4218:	2302      	movs	r3, #2
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    421a:	70ab      	strb	r3, [r5, #2]
    421c:	e7c1      	b.n	41a2 <le_adv_ext_report.isra.34+0xca>
		}else if(!adi_present && aux_adi_present && !aux_ptr_present){		//aux packet
    421e:	2f00      	cmp	r7, #0
    4220:	d0bf      	beq.n	41a2 <le_adv_ext_report.isra.34+0xca>
		}else if(adi_present && aux_ptr_present){
    4222:	2b00      	cmp	r3, #0
    4224:	d0bd      	beq.n	41a2 <le_adv_ext_report.isra.34+0xca>
			adv_info->frag = 0x03;  // packet received on primary adv channel.
    4226:	2303      	movs	r3, #3
    4228:	e7f7      	b.n	421a <le_adv_ext_report.isra.34+0x142>
    422a:	bf00      	nop
    422c:	20002e94 	.word	0x20002e94

00004230 <sys_get_le64>:
{
    4230:	4603      	mov	r3, r0
}
    4232:	6800      	ldr	r0, [r0, #0]
    4234:	6859      	ldr	r1, [r3, #4]
    4236:	4770      	bx	lr

00004238 <hci_cmd_handle>:
{
    4238:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    423a:	8981      	ldrh	r1, [r0, #12]
{
    423c:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
    423e:	2600      	movs	r6, #0
	if (cmd->len < sizeof(*chdr)) {
    4240:	2902      	cmp	r1, #2
{
    4242:	4605      	mov	r5, r0
	struct net_buf *evt = NULL;
    4244:	9603      	str	r6, [sp, #12]
	if (cmd->len < sizeof(*chdr)) {
    4246:	d802      	bhi.n	424e <hci_cmd_handle+0x16>
		return NULL;
    4248:	2000      	movs	r0, #0
}
    424a:	b00f      	add	sp, #60	; 0x3c
    424c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chdr = (void *)cmd->data;
    424e:	6883      	ldr	r3, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4250:	4cc3      	ldr	r4, [pc, #780]	; (4560 <hci_cmd_handle+0x328>)
    4252:	781a      	ldrb	r2, [r3, #0]
    4254:	7858      	ldrb	r0, [r3, #1]
	if (cmd->len < chdr->param_len) {
    4256:	789b      	ldrb	r3, [r3, #2]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    4258:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (cmd->len < chdr->param_len) {
    425c:	428b      	cmp	r3, r1
	_opcode = sys_le16_to_cpu(chdr->opcode);
    425e:	8022      	strh	r2, [r4, #0]
	if (cmd->len < chdr->param_len) {
    4260:	d8f2      	bhi.n	4248 <hci_cmd_handle+0x10>
	net_buf_pull(cmd, sizeof(*chdr));
    4262:	2103      	movs	r1, #3
    4264:	f105 0008 	add.w	r0, r5, #8
    4268:	f005 fdf1 	bl	9e4e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    426c:	8827      	ldrh	r7, [r4, #0]
    426e:	f3c7 0409 	ubfx	r4, r7, #0, #10
	switch (BT_OGF(_opcode)) {
    4272:	0abf      	lsrs	r7, r7, #10
    4274:	2f04      	cmp	r7, #4
    4276:	d067      	beq.n	4348 <hci_cmd_handle+0x110>
    4278:	d807      	bhi.n	428a <hci_cmd_handle+0x52>
    427a:	2f03      	cmp	r7, #3
    427c:	d024      	beq.n	42c8 <hci_cmd_handle+0x90>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    427e:	2101      	movs	r1, #1
    4280:	a803      	add	r0, sp, #12
    4282:	f7ff fdc1 	bl	3e08 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    4286:	2301      	movs	r3, #1
    4288:	e1ab      	b.n	45e2 <hci_cmd_handle+0x3aa>
	switch (BT_OGF(_opcode)) {
    428a:	2f08      	cmp	r7, #8
    428c:	f000 80e9 	beq.w	4462 <hci_cmd_handle+0x22a>
    4290:	2f3f      	cmp	r7, #63	; 0x3f
    4292:	d1f4      	bne.n	427e <hci_cmd_handle+0x46>
	switch (ocf) {
    4294:	3c01      	subs	r4, #1
    4296:	2c09      	cmp	r4, #9
    4298:	d8f1      	bhi.n	427e <hci_cmd_handle+0x46>
    429a:	a301      	add	r3, pc, #4	; (adr r3, 42a0 <hci_cmd_handle+0x68>)
    429c:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    42a0:	0000461f 	.word	0x0000461f
    42a4:	0000464d 	.word	0x0000464d
    42a8:	00004675 	.word	0x00004675
    42ac:	0000427f 	.word	0x0000427f
    42b0:	0000427f 	.word	0x0000427f
    42b4:	000046b9 	.word	0x000046b9
    42b8:	0000427f 	.word	0x0000427f
    42bc:	0000468b 	.word	0x0000468b
    42c0:	000046c3 	.word	0x000046c3
    42c4:	0000472f 	.word	0x0000472f
	switch (ocf) {
    42c8:	2c03      	cmp	r4, #3
    42ca:	d014      	beq.n	42f6 <hci_cmd_handle+0xbe>
    42cc:	d808      	bhi.n	42e0 <hci_cmd_handle+0xa8>
    42ce:	2c01      	cmp	r4, #1
    42d0:	d1d5      	bne.n	427e <hci_cmd_handle+0x46>
	event_mask = sys_get_le64(cmd->events);
    42d2:	68a8      	ldr	r0, [r5, #8]
    42d4:	f7ff ffac 	bl	4230 <sys_get_le64>
    42d8:	4ba2      	ldr	r3, [pc, #648]	; (4564 <hci_cmd_handle+0x32c>)
    42da:	e9c3 0100 	strd	r0, r1, [r3]
    42de:	e003      	b.n	42e8 <hci_cmd_handle+0xb0>
	switch (ocf) {
    42e0:	2c2d      	cmp	r4, #45	; 0x2d
    42e2:	d01b      	beq.n	431c <hci_cmd_handle+0xe4>
    42e4:	2c63      	cmp	r4, #99	; 0x63
    42e6:	d1ca      	bne.n	427e <hci_cmd_handle+0x46>
	ccst = cmd_complete(evt, sizeof(*ccst));
    42e8:	2101      	movs	r1, #1
    42ea:	a803      	add	r0, sp, #12
    42ec:	f7ff fd8c 	bl	3e08 <cmd_complete>
	ccst->status = 0x00;
    42f0:	7006      	strb	r6, [r0, #0]
	return evt;
    42f2:	9803      	ldr	r0, [sp, #12]
    42f4:	e7a9      	b.n	424a <hci_cmd_handle+0x12>
	dup_count = -1;
    42f6:	4b9c      	ldr	r3, [pc, #624]	; (4568 <hci_cmd_handle+0x330>)
    42f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    42fc:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    42fe:	4b99      	ldr	r3, [pc, #612]	; (4564 <hci_cmd_handle+0x32c>)
    4300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4304:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4308:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    430c:	4b97      	ldr	r3, [pc, #604]	; (456c <hci_cmd_handle+0x334>)
    430e:	201f      	movs	r0, #31
    4310:	2100      	movs	r1, #0
    4312:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    4316:	f004 facf 	bl	88b8 <ll_reset>
    431a:	e7e5      	b.n	42e8 <hci_cmd_handle+0xb0>
    431c:	68ab      	ldr	r3, [r5, #8]
	rp = cmd_complete(evt, sizeof(*rp));
    431e:	2104      	movs	r1, #4
    4320:	a803      	add	r0, sp, #12
	handle = sys_le16_to_cpu(cmd->handle);
    4322:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    4324:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    4326:	f7ff fd6f 	bl	3e08 <cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    432a:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    432c:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle, type, &rp->tx_power_level);
    432e:	1cc2      	adds	r2, r0, #3
    4330:	4639      	mov	r1, r7
    4332:	4630      	mov	r0, r6
    4334:	f004 fb4a 	bl	89cc <ll_tx_pwr_lvl_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    4338:	2800      	cmp	r0, #0
    433a:	bf14      	ite	ne
    433c:	2302      	movne	r3, #2
    433e:	2300      	moveq	r3, #0
    4340:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    4342:	f8a4 5001 	strh.w	r5, [r4, #1]
    4346:	e7d4      	b.n	42f2 <hci_cmd_handle+0xba>
	switch (ocf) {
    4348:	3c01      	subs	r4, #1
    434a:	2c08      	cmp	r4, #8
    434c:	d897      	bhi.n	427e <hci_cmd_handle+0x46>
    434e:	a301      	add	r3, pc, #4	; (adr r3, 4354 <hci_cmd_handle+0x11c>)
    4350:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    4354:	00004379 	.word	0x00004379
    4358:	000043a3 	.word	0x000043a3
    435c:	0000442f 	.word	0x0000442f
    4360:	0000427f 	.word	0x0000427f
    4364:	0000427f 	.word	0x0000427f
    4368:	0000427f 	.word	0x0000427f
    436c:	0000427f 	.word	0x0000427f
    4370:	0000427f 	.word	0x0000427f
    4374:	0000444b 	.word	0x0000444b
	rp = cmd_complete(evt, sizeof(*rp));
    4378:	2109      	movs	r1, #9
    437a:	a803      	add	r0, sp, #12
    437c:	f7ff fd44 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    4380:	2300      	movs	r3, #0
    4382:	7003      	strb	r3, [r0, #0]
	rp->hci_revision = sys_cpu_to_le16(0);
    4384:	7083      	strb	r3, [r0, #2]
    4386:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4388:	f06f 030e 	mvn.w	r3, #14
    438c:	7143      	strb	r3, [r0, #5]
    438e:	2305      	movs	r3, #5
	rp->hci_version = BT_HCI_VERSION_5_0;
    4390:	2209      	movs	r2, #9
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    4392:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    4394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->hci_version = BT_HCI_VERSION_5_0;
    4398:	7042      	strb	r2, [r0, #1]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    439a:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    439c:	71c3      	strb	r3, [r0, #7]
    439e:	7203      	strb	r3, [r0, #8]
    43a0:	e7a7      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    43a2:	2141      	movs	r1, #65	; 0x41
    43a4:	a803      	add	r0, sp, #12
    43a6:	f7ff fd2f 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    43aa:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    43ac:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    43ae:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    43b0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    43b4:	f7fc f94c 	bl	650 <memset>
	rp->commands[2] |= BIT(7);
    43b8:	78e3      	ldrb	r3, [r4, #3]
	rp->commands[27] |= BIT(6) | BIT(7);
    43ba:	7f21      	ldrb	r1, [r4, #28]
	rp->commands[26] |= BIT(6) | BIT(7);
    43bc:	7ee2      	ldrb	r2, [r4, #27]
	rp->commands[2] |= BIT(7);
    43be:	f063 037f 	orn	r3, r3, #127	; 0x7f
    43c2:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    43c4:	79a3      	ldrb	r3, [r4, #6]
    43c6:	f063 033f 	orn	r3, r3, #63	; 0x3f
    43ca:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    43cc:	7ae3      	ldrb	r3, [r4, #11]
    43ce:	f043 0304 	orr.w	r3, r3, #4
    43d2:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    43d4:	7be3      	ldrb	r3, [r4, #15]
    43d6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    43da:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    43dc:	7c23      	ldrb	r3, [r4, #16]
    43de:	f043 0302 	orr.w	r3, r3, #2
    43e2:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    43e4:	7de3      	ldrb	r3, [r4, #23]
    43e6:	f043 0304 	orr.w	r3, r3, #4
    43ea:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    43ec:	7ea3      	ldrb	r3, [r4, #26]
    43ee:	f043 0317 	orr.w	r3, r3, #23
    43f2:	76a3      	strb	r3, [r4, #26]
	rp->commands[36] |= BIT(1);
    43f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	rp->commands[36] |= BIT(4);
    43f8:	f043 0312 	orr.w	r3, r3, #18
    43fc:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	rp->commands[37] |= BIT(6);
    4400:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rp->commands[27] |= BIT(6) | BIT(7);
    4404:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[37] |= BIT(6);
    4408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	rp->commands[27] |= BIT(6) | BIT(7);
    440c:	7721      	strb	r1, [r4, #28]
	rp->commands[37] |= BIT(6);
    440e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[28] |= BIT(3);
    4412:	7f61      	ldrb	r1, [r4, #29]
	rp->commands[38] |= BIT(7);
    4414:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[28] |= BIT(3);
    4418:	f041 0108 	orr.w	r1, r1, #8
	rp->commands[26] |= BIT(2) | BIT(3);
    441c:	f062 0233 	orn	r2, r2, #51	; 0x33
	rp->commands[38] |= BIT(7);
    4420:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[28] |= BIT(3);
    4424:	7761      	strb	r1, [r4, #29]
	rp->commands[26] |= BIT(2) | BIT(3);
    4426:	76e2      	strb	r2, [r4, #27]
	rp->commands[38] |= BIT(7);
    4428:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    442c:	e761      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    442e:	2109      	movs	r1, #9
    4430:	a803      	add	r0, sp, #12
    4432:	f7ff fce9 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    4436:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4438:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    443a:	2208      	movs	r2, #8
	rp->status = 0x00;
    443c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4440:	f7fc f906 	bl	650 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    4444:	2360      	movs	r3, #96	; 0x60
    4446:	7163      	strb	r3, [r4, #5]
    4448:	e753      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    444a:	2107      	movs	r1, #7
    444c:	a803      	add	r0, sp, #12
    444e:	f7ff fcdb 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    4452:	4601      	mov	r1, r0
    4454:	2300      	movs	r3, #0
    4456:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    445a:	4618      	mov	r0, r3
    445c:	f7ff fbbc 	bl	3bd8 <ll_addr_get>
    4460:	e747      	b.n	42f2 <hci_cmd_handle+0xba>
	switch (ocf) {
    4462:	2c0f      	cmp	r4, #15
    4464:	d065      	beq.n	4532 <hci_cmd_handle+0x2fa>
    4466:	d826      	bhi.n	44b6 <hci_cmd_handle+0x27e>
    4468:	2c03      	cmp	r4, #3
    446a:	d050      	beq.n	450e <hci_cmd_handle+0x2d6>
    446c:	d80f      	bhi.n	448e <hci_cmd_handle+0x256>
    446e:	2c01      	cmp	r4, #1
    4470:	d041      	beq.n	44f6 <hci_cmd_handle+0x2be>
    4472:	2c02      	cmp	r4, #2
    4474:	f47f af03 	bne.w	427e <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    4478:	2104      	movs	r1, #4
    447a:	a803      	add	r0, sp, #12
    447c:	f7ff fcc4 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    4480:	2300      	movs	r3, #0
    4482:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    4484:	7043      	strb	r3, [r0, #1]
    4486:	2301      	movs	r3, #1
    4488:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    448a:	70c4      	strb	r4, [r0, #3]
    448c:	e731      	b.n	42f2 <hci_cmd_handle+0xba>
	switch (ocf) {
    448e:	2c0b      	cmp	r4, #11
    4490:	f000 8093 	beq.w	45ba <hci_cmd_handle+0x382>
    4494:	2c0c      	cmp	r4, #12
    4496:	f000 80a6 	beq.w	45e6 <hci_cmd_handle+0x3ae>
    449a:	2c05      	cmp	r4, #5
    449c:	f47f aeef 	bne.w	427e <hci_cmd_handle+0x46>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    44a0:	68a9      	ldr	r1, [r5, #8]
    44a2:	2001      	movs	r0, #1
    44a4:	f7ff fbb2 	bl	3c0c <ll_addr_set>
	status = ll_wl_remove(&cmd->addr);
    44a8:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    44aa:	2101      	movs	r1, #1
    44ac:	a803      	add	r0, sp, #12
    44ae:	f7ff fcab 	bl	3e08 <cmd_complete>
	ccst->status = status;
    44b2:	7004      	strb	r4, [r0, #0]
    44b4:	e71d      	b.n	42f2 <hci_cmd_handle+0xba>
	switch (ocf) {
    44b6:	2c17      	cmp	r4, #23
    44b8:	d05a      	beq.n	4570 <hci_cmd_handle+0x338>
    44ba:	d809      	bhi.n	44d0 <hci_cmd_handle+0x298>
    44bc:	2c11      	cmp	r4, #17
    44be:	d04b      	beq.n	4558 <hci_cmd_handle+0x320>
    44c0:	d341      	bcc.n	4546 <hci_cmd_handle+0x30e>
    44c2:	2c12      	cmp	r4, #18
    44c4:	f47f aedb 	bne.w	427e <hci_cmd_handle+0x46>
	status = ll_wl_remove(&cmd->addr);
    44c8:	68a8      	ldr	r0, [r5, #8]
    44ca:	f004 fe49 	bl	9160 <ll_wl_remove>
    44ce:	e7eb      	b.n	44a8 <hci_cmd_handle+0x270>
	switch (ocf) {
    44d0:	2c1c      	cmp	r4, #28
    44d2:	d060      	beq.n	4596 <hci_cmd_handle+0x35e>
    44d4:	2c4b      	cmp	r4, #75	; 0x4b
    44d6:	f000 8096 	beq.w	4606 <hci_cmd_handle+0x3ce>
    44da:	2c18      	cmp	r4, #24
    44dc:	f47f aecf 	bne.w	427e <hci_cmd_handle+0x46>
	rp = cmd_complete(evt, sizeof(*rp));
    44e0:	2109      	movs	r1, #9
    44e2:	a803      	add	r0, sp, #12
    44e4:	f7ff fc90 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    44e8:	2300      	movs	r3, #0
    44ea:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    44ee:	2108      	movs	r1, #8
    44f0:	f7ff fbac 	bl	3c4c <bt_rand>
    44f4:	e6fd      	b.n	42f2 <hci_cmd_handle+0xba>
	le_event_mask = sys_get_le64(cmd->events);
    44f6:	68a8      	ldr	r0, [r5, #8]
    44f8:	f7ff fe9a 	bl	4230 <sys_get_le64>
    44fc:	4b1b      	ldr	r3, [pc, #108]	; (456c <hci_cmd_handle+0x334>)
    44fe:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4502:	2101      	movs	r1, #1
    4504:	a803      	add	r0, sp, #12
    4506:	f7ff fc7f 	bl	3e08 <cmd_complete>
	ccst->status = 0x00;
    450a:	2300      	movs	r3, #0
    450c:	e069      	b.n	45e2 <hci_cmd_handle+0x3aa>
	rp = cmd_complete(evt, sizeof(*rp));
    450e:	2109      	movs	r1, #9
    4510:	a803      	add	r0, sp, #12
    4512:	f7ff fc79 	bl	3e08 <cmd_complete>
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4516:	463a      	mov	r2, r7
	rp = cmd_complete(evt, sizeof(*rp));
    4518:	4604      	mov	r4, r0
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    451a:	4631      	mov	r1, r6
	rp->status = 0x00;
    451c:	f800 6b01 	strb.w	r6, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4520:	f7fc f896 	bl	650 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    4524:	230c      	movs	r3, #12
    4526:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    4528:	2340      	movs	r3, #64	; 0x40
    452a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    452c:	2301      	movs	r3, #1
    452e:	70e3      	strb	r3, [r4, #3]
    4530:	e6df      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4532:	2102      	movs	r1, #2
    4534:	a803      	add	r0, sp, #12
    4536:	f7ff fc67 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    453a:	7006      	strb	r6, [r0, #0]
	rp = cmd_complete(evt, sizeof(*rp));
    453c:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    453e:	f004 fdbf 	bl	90c0 <ll_wl_size_get>
    4542:	7060      	strb	r0, [r4, #1]
    4544:	e6d5      	b.n	42f2 <hci_cmd_handle+0xba>
	ccst = cmd_complete(evt, sizeof(*ccst));
    4546:	2101      	movs	r1, #1
    4548:	a803      	add	r0, sp, #12
    454a:	f7ff fc5d 	bl	3e08 <cmd_complete>
    454e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    4550:	f004 fdb8 	bl	90c4 <ll_wl_clear>
    4554:	7020      	strb	r0, [r4, #0]
    4556:	e6cc      	b.n	42f2 <hci_cmd_handle+0xba>
	status = ll_wl_add(&cmd->addr);
    4558:	68a8      	ldr	r0, [r5, #8]
    455a:	f004 fdc9 	bl	90f0 <ll_wl_add>
    455e:	e7a3      	b.n	44a8 <hci_cmd_handle+0x270>
    4560:	200002f0 	.word	0x200002f0
    4564:	200060c0 	.word	0x200060c0
    4568:	200002f4 	.word	0x200002f4
    456c:	200060c8 	.word	0x200060c8
    4570:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    4572:	aa04      	add	r2, sp, #16
    4574:	f100 0110 	add.w	r1, r0, #16
    4578:	4633      	mov	r3, r6
    457a:	f004 feab 	bl	92d4 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    457e:	2111      	movs	r1, #17
    4580:	a803      	add	r0, sp, #12
    4582:	f7ff fc41 	bl	3e08 <cmd_complete>
	memcpy(rp->enc_data, enc_data, 16);
    4586:	2210      	movs	r2, #16
	rp->status = 0x00;
    4588:	f800 6b01 	strb.w	r6, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    458c:	eb0d 0102 	add.w	r1, sp, r2
	memcpy(rp->info, build_info, sizeof(build_info));
    4590:	f7fc f832 	bl	5f8 <memcpy>
    4594:	e6ad      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4596:	2109      	movs	r1, #9
    4598:	a803      	add	r0, sp, #12
    459a:	f7ff fc35 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    459e:	4601      	mov	r1, r0
    45a0:	2200      	movs	r2, #0
	rp = cmd_complete(evt, sizeof(*rp));
    45a2:	4604      	mov	r4, r0
	rp->status = 0x00;
    45a4:	f801 2b01 	strb.w	r2, [r1], #1
	sys_put_le32(val, dst);
    45a8:	f243 3030 	movw	r0, #13104	; 0x3330
    45ac:	f7ff fc18 	bl	3de0 <sys_put_le32>
	sys_put_le32(val >> 32, &dst[4]);
    45b0:	1d61      	adds	r1, r4, #5
    45b2:	4610      	mov	r0, r2
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    45b4:	f7ff fc14 	bl	3de0 <sys_put_le32>
    45b8:	e69b      	b.n	42f2 <hci_cmd_handle+0xba>
    45ba:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    45bc:	7963      	ldrb	r3, [r4, #5]
    45be:	f8b4 2003 	ldrh.w	r2, [r4, #3]
    45c2:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    45c6:	7820      	ldrb	r0, [r4, #0]
    45c8:	79a4      	ldrb	r4, [r4, #6]
    45ca:	9400      	str	r4, [sp, #0]
    45cc:	f004 fd1e 	bl	900c <ll_scan_params_set>
	status = ll_scan_enable(cmd->enable);
    45d0:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    45d2:	2101      	movs	r1, #1
    45d4:	a803      	add	r0, sp, #12
    45d6:	f7ff fc17 	bl	3e08 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    45da:	2c00      	cmp	r4, #0
    45dc:	bf14      	ite	ne
    45de:	230c      	movne	r3, #12
    45e0:	2300      	moveq	r3, #0
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    45e2:	7003      	strb	r3, [r0, #0]
    45e4:	e685      	b.n	42f2 <hci_cmd_handle+0xba>
    45e6:	68aa      	ldr	r2, [r5, #8]
    45e8:	4b83      	ldr	r3, [pc, #524]	; (47f8 <hci_cmd_handle+0x5c0>)
	if (cmd->enable && cmd->filter_dup) {
    45ea:	7810      	ldrb	r0, [r2, #0]
    45ec:	b140      	cbz	r0, 4600 <hci_cmd_handle+0x3c8>
    45ee:	7852      	ldrb	r2, [r2, #1]
    45f0:	b132      	cbz	r2, 4600 <hci_cmd_handle+0x3c8>
		dup_count = 0;
    45f2:	2200      	movs	r2, #0
    45f4:	601a      	str	r2, [r3, #0]
		dup_curr = 0;
    45f6:	4b81      	ldr	r3, [pc, #516]	; (47fc <hci_cmd_handle+0x5c4>)
		dup_count = -1;
    45f8:	601a      	str	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable);
    45fa:	f004 fd2b 	bl	9054 <ll_scan_enable>
    45fe:	e7e7      	b.n	45d0 <hci_cmd_handle+0x398>
		dup_count = -1;
    4600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4604:	e7f8      	b.n	45f8 <hci_cmd_handle+0x3c0>
	rp = cmd_complete(evt, sizeof(*rp));
    4606:	2103      	movs	r1, #3
    4608:	a803      	add	r0, sp, #12
    460a:	f7ff fbfd 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    460e:	4601      	mov	r1, r0
    4610:	2300      	movs	r3, #0
    4612:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    4616:	3001      	adds	r0, #1
    4618:	f7ff fb14 	bl	3c44 <ll_tx_pwr_get>
    461c:	e669      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    461e:	210d      	movs	r1, #13
    4620:	a803      	add	r0, sp, #12
    4622:	f7ff fbf1 	bl	3e08 <cmd_complete>
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    4626:	2202      	movs	r2, #2
    4628:	7042      	strb	r2, [r0, #1]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    462a:	70c2      	strb	r2, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    462c:	2201      	movs	r2, #1
    462e:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4630:	220b      	movs	r2, #11
	rp->status = 0x00;
    4632:	2300      	movs	r3, #0
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4634:	71c2      	strb	r2, [r0, #7]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4636:	2263      	movs	r2, #99	; 0x63
	rp->status = 0x00;
    4638:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    463a:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    463c:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    463e:	7143      	strb	r3, [r0, #5]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    4640:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    4642:	7242      	strb	r2, [r0, #9]
    4644:	7283      	strb	r3, [r0, #10]
    4646:	72c3      	strb	r3, [r0, #11]
    4648:	7303      	strb	r3, [r0, #12]
    464a:	e652      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    464c:	2141      	movs	r1, #65	; 0x41
    464e:	a803      	add	r0, sp, #12
    4650:	f7ff fbda 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    4654:	2100      	movs	r1, #0
	rp = cmd_complete(evt, sizeof(*rp));
    4656:	4604      	mov	r4, r0
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    4658:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    465a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    465e:	f7fb fff7 	bl	650 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    4662:	7863      	ldrb	r3, [r4, #1]
    4664:	f063 0358 	orn	r3, r3, #88	; 0x58
    4668:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    466a:	78a3      	ldrb	r3, [r4, #2]
    466c:	f043 0303 	orr.w	r3, r3, #3
    4670:	70a3      	strb	r3, [r4, #2]
    4672:	e63e      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    4674:	2109      	movs	r1, #9
    4676:	a803      	add	r0, sp, #12
    4678:	f7ff fbc6 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    467c:	2100      	movs	r1, #0
    467e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    4682:	2208      	movs	r2, #8
		memset(rp->er, 0x00, sizeof(rp->er));
    4684:	f7fb ffe4 	bl	650 <memset>
    4688:	e633      	b.n	42f2 <hci_cmd_handle+0xba>
	const char build_info[] = HCI_VS_BUILD_INFO;
    468a:	4b5d      	ldr	r3, [pc, #372]	; (4800 <hci_cmd_handle+0x5c8>)
    468c:	aa04      	add	r2, sp, #16
    468e:	f103 0628 	add.w	r6, r3, #40	; 0x28
    4692:	4615      	mov	r5, r2
    4694:	6818      	ldr	r0, [r3, #0]
    4696:	6859      	ldr	r1, [r3, #4]
    4698:	4614      	mov	r4, r2
    469a:	c403      	stmia	r4!, {r0, r1}
    469c:	3308      	adds	r3, #8
    469e:	42b3      	cmp	r3, r6
    46a0:	4622      	mov	r2, r4
    46a2:	d1f7      	bne.n	4694 <hci_cmd_handle+0x45c>
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    46a4:	2129      	movs	r1, #41	; 0x29
    46a6:	a803      	add	r0, sp, #12
    46a8:	f7ff fbae 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    46ac:	2300      	movs	r3, #0
    46ae:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    46b2:	2228      	movs	r2, #40	; 0x28
    46b4:	4629      	mov	r1, r5
    46b6:	e76b      	b.n	4590 <hci_cmd_handle+0x358>
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    46b8:	68a9      	ldr	r1, [r5, #8]
    46ba:	2000      	movs	r0, #0
    46bc:	f7ff faa6 	bl	3c0c <ll_addr_set>
    46c0:	e71f      	b.n	4502 <hci_cmd_handle+0x2ca>
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    46c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    46c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    46ca:	3201      	adds	r2, #1
    46cc:	d106      	bne.n	46dc <hci_cmd_handle+0x4a4>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    46ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    46d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    46d6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    46d8:	4293      	cmp	r3, r2
    46da:	d020      	beq.n	471e <hci_cmd_handle+0x4e6>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    46dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    46e0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    46e4:	07db      	lsls	r3, r3, #31
    46e6:	d51a      	bpl.n	471e <hci_cmd_handle+0x4e6>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    46e8:	2118      	movs	r1, #24
    46ea:	a803      	add	r0, sp, #12
    46ec:	f7ff fb8c 	bl	3e08 <cmd_complete>
		rp->status = 0x00;
    46f0:	2600      	movs	r6, #0
		rp->num_addrs = 1;
    46f2:	2301      	movs	r3, #1
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    46f4:	4604      	mov	r4, r0
		rp->num_addrs = 1;
    46f6:	7043      	strb	r3, [r0, #1]
		rp->status = 0x00;
    46f8:	7006      	strb	r6, [r0, #0]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    46fa:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    46fe:	1ca1      	adds	r1, r4, #2
    4700:	f7ff fb6e 	bl	3de0 <sys_put_le32>
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addr->bdaddr.val[4]);
    4704:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	dst[0] = val;
    4708:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
    470a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    470e:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4712:	71e3      	strb	r3, [r4, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    4714:	2210      	movs	r2, #16
    4716:	4631      	mov	r1, r6
    4718:	f104 0008 	add.w	r0, r4, #8
    471c:	e7b2      	b.n	4684 <hci_cmd_handle+0x44c>
	rp = cmd_complete(evt, sizeof(*rp));
    471e:	2102      	movs	r1, #2
    4720:	a803      	add	r0, sp, #12
    4722:	f7ff fb71 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    4726:	2300      	movs	r3, #0
    4728:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    472a:	7043      	strb	r3, [r0, #1]
    472c:	e5e1      	b.n	42f2 <hci_cmd_handle+0xba>
	rp = cmd_complete(evt, sizeof(*rp));
    472e:	2121      	movs	r1, #33	; 0x21
    4730:	a803      	add	r0, sp, #12
    4732:	f7ff fb69 	bl	3e08 <cmd_complete>
	rp->status = 0x00;
    4736:	4603      	mov	r3, r0
    4738:	2200      	movs	r2, #0
    473a:	f803 2b01 	strb.w	r2, [r3], #1
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    473e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	rp = cmd_complete(evt, sizeof(*rp));
    4742:	4604      	mov	r4, r0
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4744:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
    4748:	3101      	adds	r1, #1
    474a:	d04b      	beq.n	47e4 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    474c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    4750:	3101      	adds	r1, #1
    4752:	d047      	beq.n	47e4 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4754:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    4758:	3101      	adds	r1, #1
    475a:	d043      	beq.n	47e4 <hci_cmd_handle+0x5ac>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    475c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    4760:	3101      	adds	r1, #1
    4762:	d03f      	beq.n	47e4 <hci_cmd_handle+0x5ac>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    4764:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    4768:	4619      	mov	r1, r3
    476a:	f7ff fb39 	bl	3de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    476e:	1d61      	adds	r1, r4, #5
    4770:	f8d2 0094 	ldr.w	r0, [r2, #148]	; 0x94
    4774:	f7ff fb34 	bl	3de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    4778:	f104 0109 	add.w	r1, r4, #9
    477c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4780:	f7ff fb2e 	bl	3de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    4784:	f104 010d 	add.w	r1, r4, #13
    4788:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    478c:	f7ff fb28 	bl	3de0 <sys_put_le32>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    4790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4794:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    4798:	3301      	adds	r3, #1
    479a:	f104 0311 	add.w	r3, r4, #17
    479e:	d027      	beq.n	47f0 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    47a0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    47a4:	3101      	adds	r1, #1
    47a6:	d023      	beq.n	47f0 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    47a8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    47ac:	3101      	adds	r1, #1
    47ae:	d01f      	beq.n	47f0 <hci_cmd_handle+0x5b8>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    47b0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    47b4:	3101      	adds	r1, #1
    47b6:	d01b      	beq.n	47f0 <hci_cmd_handle+0x5b8>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    47b8:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
    47bc:	4619      	mov	r1, r3
    47be:	f7ff fb0f 	bl	3de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    47c2:	f104 0115 	add.w	r1, r4, #21
    47c6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    47ca:	f7ff fb09 	bl	3de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    47ce:	f104 0119 	add.w	r1, r4, #25
    47d2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
    47d6:	f7ff fb03 	bl	3de0 <sys_put_le32>
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    47da:	f104 011d 	add.w	r1, r4, #29
    47de:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
    47e2:	e6e7      	b.n	45b4 <hci_cmd_handle+0x37c>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    47e4:	2210      	movs	r2, #16
    47e6:	2100      	movs	r1, #0
    47e8:	4618      	mov	r0, r3
    47ea:	f7fb ff31 	bl	650 <memset>
    47ee:	e7cf      	b.n	4790 <hci_cmd_handle+0x558>
		memset(rp->er, 0x00, sizeof(rp->er));
    47f0:	2210      	movs	r2, #16
    47f2:	2100      	movs	r1, #0
    47f4:	4618      	mov	r0, r3
    47f6:	e745      	b.n	4684 <hci_cmd_handle+0x44c>
    47f8:	200002f4 	.word	0x200002f4
    47fc:	200002f8 	.word	0x200002f8
    4800:	0000b85f 	.word	0x0000b85f

00004804 <hci_evt_encode>:

}
#endif

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    4804:	b570      	push	{r4, r5, r6, lr}
    4806:	4604      	mov	r4, r0
    4808:	b08a      	sub	sp, #40	; 0x28
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    480a:	7923      	ldrb	r3, [r4, #4]
    480c:	2b01      	cmp	r3, #1
{
    480e:	460d      	mov	r5, r1
	pdu_data = (void *)node_rx->pdu_data;
    4810:	f100 0008 	add.w	r0, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4814:	d045      	beq.n	48a2 <hci_evt_encode+0x9e>
	switch (node_rx->hdr.type) {
    4816:	3b02      	subs	r3, #2
    4818:	2b03      	cmp	r3, #3
    481a:	d876      	bhi.n	490a <hci_evt_encode+0x106>
    481c:	e8df f003 	tbb	[pc, r3]
    4820:	0d080802 	.word	0x0d080802
		le_advertising_report(pdu_data, b, buf);
    4824:	460a      	mov	r2, r1
    4826:	4621      	mov	r1, r4
    4828:	f7ff fb26 	bl	3e78 <le_advertising_report>
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    482c:	b00a      	add	sp, #40	; 0x28
    482e:	bd70      	pop	{r4, r5, r6, pc}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    4830:	460a      	mov	r2, r1
    4832:	4621      	mov	r1, r4
    4834:	f7ff fc50 	bl	40d8 <le_adv_ext_report.isra.34>
    4838:	e7f8      	b.n	482c <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    483a:	4b37      	ldr	r3, [pc, #220]	; (4918 <hci_evt_encode+0x114>)
    483c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4840:	2200      	movs	r2, #0
    4842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    4846:	4313      	orrs	r3, r2
    4848:	f104 060a 	add.w	r6, r4, #10
    484c:	d007      	beq.n	485e <hci_evt_encode+0x5a>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    484e:	4b33      	ldr	r3, [pc, #204]	; (491c <hci_evt_encode+0x118>)
    4850:	e9d3 2300 	ldrd	r2, r3, [r3]
    4854:	2300      	movs	r3, #0
    4856:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    485a:	4313      	orrs	r3, r2
    485c:	d110      	bne.n	4880 <hci_evt_encode+0x7c>
		addr.type = adv->tx_addr;
    485e:	7a23      	ldrb	r3, [r4, #8]
    4860:	ac0a      	add	r4, sp, #40	; 0x28
    4862:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4866:	f804 3d24 	strb.w	r3, [r4, #-36]!
		memcpy(&addr.a.val[0], &adv->scan_req.scan_addr[0],
    486a:	4631      	mov	r1, r6
    486c:	2206      	movs	r2, #6
    486e:	f10d 0005 	add.w	r0, sp, #5
    4872:	f7fb fec1 	bl	5f8 <memcpy>
		bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
    4876:	a903      	add	r1, sp, #12
    4878:	4620      	mov	r0, r4
    487a:	f7ff fbf1 	bl	4060 <bt_addr_le_to_str.constprop.36>
    487e:	e7d5      	b.n	482c <hci_evt_encode+0x28>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    4880:	2208      	movs	r2, #8
    4882:	2113      	movs	r1, #19
    4884:	4628      	mov	r0, r5
    4886:	f7ff fae1 	bl	3e4c <meta_evt>
	sep->handle = 0;
    488a:	2300      	movs	r3, #0
    488c:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    488e:	7a23      	ldrb	r3, [r4, #8]
    4890:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4894:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->scan_req.scan_addr[0],
    4896:	2206      	movs	r2, #6
    4898:	4631      	mov	r1, r6
    489a:	3002      	adds	r0, #2
    489c:	f7fb feac 	bl	5f8 <memcpy>
    48a0:	e7c4      	b.n	482c <hci_evt_encode+0x28>
	switch (pdu_data->llctrl.opcode) {
    48a2:	7ae1      	ldrb	r1, [r4, #11]
    48a4:	88e6      	ldrh	r6, [r4, #6]
    48a6:	2909      	cmp	r1, #9
    48a8:	d00b      	beq.n	48c2 <hci_evt_encode+0xbe>
    48aa:	290c      	cmp	r1, #12
    48ac:	d010      	beq.n	48d0 <hci_evt_encode+0xcc>
    48ae:	2907      	cmp	r1, #7
    48b0:	d12b      	bne.n	490a <hci_evt_encode+0x106>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    48b2:	7b23      	ldrb	r3, [r4, #12]
    48b4:	2b0e      	cmp	r3, #14
    48b6:	d1b9      	bne.n	482c <hci_evt_encode+0x28>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    48b8:	462b      	mov	r3, r5
    48ba:	4632      	mov	r2, r6
    48bc:	2100      	movs	r1, #0
    48be:	201a      	movs	r0, #26
    48c0:	e003      	b.n	48ca <hci_evt_encode+0xc6>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    48c2:	4601      	mov	r1, r0
    48c4:	462b      	mov	r3, r5
    48c6:	4632      	mov	r2, r6
    48c8:	2000      	movs	r0, #0
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    48ca:	f7ff fb9b 	bl	4004 <le_remote_feat_complete>
    48ce:	e7ad      	b.n	482c <hci_evt_encode+0x28>
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    48d0:	4b11      	ldr	r3, [pc, #68]	; (4918 <hci_evt_encode+0x114>)
    48d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    48d6:	2300      	movs	r3, #0
    48d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
    48dc:	4313      	orrs	r3, r2
    48de:	d0a5      	beq.n	482c <hci_evt_encode+0x28>
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    48e0:	2208      	movs	r2, #8
    48e2:	4628      	mov	r0, r5
    48e4:	f7ff fa85 	bl	3df2 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    48e8:	2108      	movs	r1, #8
    48ea:	1868      	adds	r0, r5, r1
    48ec:	f005 faa0 	bl	9e30 <net_buf_simple_add>
	ep->status = 0x00;
    48f0:	2300      	movs	r3, #0
    48f2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    48f4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    48f8:	7b23      	ldrb	r3, [r4, #12]
    48fa:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    48fc:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    4900:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    4902:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    4906:	80c3      	strh	r3, [r0, #6]
    4908:	e790      	b.n	482c <hci_evt_encode+0x28>
		LL_ASSERT(0);
    490a:	4040      	eors	r0, r0
    490c:	f380 8811 	msr	BASEPRI, r0
    4910:	f04f 0004 	mov.w	r0, #4
    4914:	df02      	svc	2
    4916:	bf00      	nop
    4918:	200060c0 	.word	0x200060c0
    491c:	200060c8 	.word	0x200060c8

00004920 <hci_get_class>:
{
	struct pdu_data *pdu_data;

	pdu_data = (void *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    4920:	7903      	ldrb	r3, [r0, #4]
    4922:	2b01      	cmp	r3, #1
    4924:	d00f      	beq.n	4946 <hci_get_class+0x26>
    4926:	2b0a      	cmp	r3, #10
    4928:	d815      	bhi.n	4956 <hci_get_class+0x36>
    492a:	2001      	movs	r0, #1
    492c:	fa00 f303 	lsl.w	r3, r0, r3
    4930:	f413 6fb0 	tst.w	r3, #1408	; 0x580
    4934:	d112      	bne.n	495c <hci_get_class+0x3c>
    4936:	f013 0f3c 	tst.w	r3, #60	; 0x3c
    493a:	d110      	bne.n	495e <hci_get_class+0x3e>
    493c:	f083 0340 	eor.w	r3, r3, #64	; 0x40
    4940:	f343 1080 	sbfx	r0, r3, #6, #1
    4944:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
		default:
			return -1;
		}

	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    4946:	7a03      	ldrb	r3, [r0, #8]
    4948:	f003 0303 	and.w	r3, r3, #3
    494c:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_CONNECTION;
	} else {
		return HCI_CLASS_ACL_DATA;
    494e:	bf0c      	ite	eq
    4950:	2002      	moveq	r0, #2
    4952:	2003      	movne	r0, #3
    4954:	4770      	bx	lr
			return -1;
    4956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    495a:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    495c:	2002      	movs	r0, #2
	}
}
    495e:	4770      	bx	lr

00004960 <hci_init>:
	dup_count = -1;
    4960:	4b08      	ldr	r3, [pc, #32]	; (4984 <hci_init+0x24>)
    4962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4966:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    4968:	4b07      	ldr	r3, [pc, #28]	; (4988 <hci_init+0x28>)
    496a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    496e:	f641 71ff 	movw	r1, #8191	; 0x1fff
    4972:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    4976:	4b05      	ldr	r3, [pc, #20]	; (498c <hci_init+0x2c>)
    4978:	201f      	movs	r0, #31
    497a:	2100      	movs	r1, #0
    497c:	e9c3 0100 	strd	r0, r1, [r3]
    4980:	4770      	bx	lr
    4982:	bf00      	nop
    4984:	200002f4 	.word	0x200002f4
    4988:	200060c0 	.word	0x200060c0
    498c:	200060c8 	.word	0x200060c8

00004990 <cpu_sleep>:
#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
	__WFE();
    4990:	bf20      	wfe
	__SEV();
    4992:	bf40      	sev
	__WFE();
    4994:	bf20      	wfe
    4996:	4770      	bx	lr

00004998 <pdu_len_cmp>:
	return nack;
}
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

static inline bool pdu_len_cmp(u8_t opcode, u8_t len)
{
    4998:	b5f0      	push	{r4, r5, r6, r7, lr}
	const u8_t ctrl_len_lut[] = {
    499a:	4b0d      	ldr	r3, [pc, #52]	; (49d0 <pdu_len_cmp+0x38>)
{
    499c:	b089      	sub	sp, #36	; 0x24
    499e:	4605      	mov	r5, r0
    49a0:	460e      	mov	r6, r1
	const u8_t ctrl_len_lut[] = {
    49a2:	aa01      	add	r2, sp, #4
    49a4:	f103 0718 	add.w	r7, r3, #24
    49a8:	6818      	ldr	r0, [r3, #0]
    49aa:	6859      	ldr	r1, [r3, #4]
    49ac:	4614      	mov	r4, r2
    49ae:	c403      	stmia	r4!, {r0, r1}
    49b0:	3308      	adds	r3, #8
    49b2:	42bb      	cmp	r3, r7
    49b4:	4622      	mov	r2, r4
    49b6:	d1f7      	bne.n	49a8 <pdu_len_cmp+0x10>
    49b8:	881b      	ldrh	r3, [r3, #0]
    49ba:	8023      	strh	r3, [r4, #0]
		 sizeof(struct pdu_data_llctrl_phy_upd_ind)),
		(offsetof(struct pdu_data_llctrl, min_used_chans_ind) +
		 sizeof(struct pdu_data_llctrl_min_used_chans_ind)),
	};

	return ctrl_len_lut[opcode] == len;
    49bc:	ab08      	add	r3, sp, #32
    49be:	441d      	add	r5, r3
    49c0:	f815 0c1c 	ldrb.w	r0, [r5, #-28]
}
    49c4:	1b83      	subs	r3, r0, r6
    49c6:	4258      	negs	r0, r3
    49c8:	4158      	adcs	r0, r3
    49ca:	b009      	add	sp, #36	; 0x24
    49cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49ce:	bf00      	nop
    49d0:	0000b1d7 	.word	0x0000b1d7

000049d4 <ticker_if_done>:
}
#endif

static void ticker_if_done(u32_t status, void *ops_context)
{
	*((u32_t volatile *)ops_context) = status;
    49d4:	6008      	str	r0, [r1, #0]
    49d6:	4770      	bx	lr

000049d8 <prepare_reduced>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    49d8:	b918      	cbnz	r0, 49e2 <prepare_reduced+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start |= XON_BITMASK;
    49da:	680b      	ldr	r3, [r1, #0]
    49dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    49e0:	600b      	str	r3, [r1, #0]
    49e2:	4770      	bx	lr

000049e4 <prepare_normal>:
{
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, scan ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    49e4:	b918      	cbnz	r0, 49ee <prepare_normal+0xa>
		struct shdr *hdr = (void *)op_context;

		hdr->ticks_xtal_to_start &= ~XON_BITMASK;
    49e6:	680b      	ldr	r3, [r1, #0]
    49e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    49ec:	600b      	str	r3, [r1, #0]
    49ee:	4770      	bx	lr

000049f0 <chan_sel_remap>:
	}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
}

static u8_t chan_sel_remap(u8_t *chan_map, u8_t chan_index)
{
    49f0:	b570      	push	{r4, r5, r6, lr}
    49f2:	1d03      	adds	r3, r0, #4
    49f4:	1e45      	subs	r5, r0, #1
	u8_t chan_next;
	u8_t byte_count;

	chan_next = 0;
    49f6:	2400      	movs	r4, #0
	byte_count = 5;
	while (byte_count--) {
    49f8:	429d      	cmp	r5, r3
    49fa:	d101      	bne.n	4a00 <chan_sel_remap+0x10>
    49fc:	4620      	mov	r0, r4

		chan_map++;
	}

	return chan_next;
}
    49fe:	bd70      	pop	{r4, r5, r6, pc}
		bite = *chan_map;
    4a00:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		while (bit_count--) {
    4a04:	2200      	movs	r2, #0
    4a06:	18a0      	adds	r0, r4, r2
    4a08:	2a08      	cmp	r2, #8
    4a0a:	b2c0      	uxtb	r0, r0
    4a0c:	d101      	bne.n	4a12 <chan_sel_remap+0x22>
    4a0e:	4604      	mov	r4, r0
    4a10:	e7f2      	b.n	49f8 <chan_sel_remap+0x8>
			if (bite & 0x01) {
    4a12:	f016 0f01 	tst.w	r6, #1
    4a16:	d003      	beq.n	4a20 <chan_sel_remap+0x30>
				if (chan_index == 0) {
    4a18:	2900      	cmp	r1, #0
    4a1a:	d0f0      	beq.n	49fe <chan_sel_remap+0xe>
				chan_index--;
    4a1c:	3901      	subs	r1, #1
    4a1e:	b2c9      	uxtb	r1, r1
			bite >>= 1;
    4a20:	0876      	lsrs	r6, r6, #1
    4a22:	3201      	adds	r2, #1
    4a24:	e7ef      	b.n	4a06 <chan_sel_remap+0x16>
	...

00004a28 <packet_rx_reserve_get>:
			_radio.packet_rx_acquire);
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
    4a28:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
    4a2a:	4a0c      	ldr	r2, [pc, #48]	; (4a5c <packet_rx_reserve_get+0x34>)
    4a2c:	f892 3d22 	ldrb.w	r3, [r2, #3362]	; 0xd22
	    _radio.packet_rx_last) {
    4a30:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
	if (_radio.packet_rx_acquire >=
    4a34:	428b      	cmp	r3, r1
			_radio.packet_rx_last +
    4a36:	bf38      	it	cc
    4a38:	f892 4d20 	ldrbcc.w	r4, [r2, #3360]	; 0xd20
			_radio.packet_rx_last);
    4a3c:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
			_radio.packet_rx_last +
    4a40:	bf38      	it	cc
    4a42:	191b      	addcc	r3, r3, r4
    4a44:	1a5b      	subs	r3, r3, r1
    4a46:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
    4a48:	4298      	cmp	r0, r3
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    4a4a:	bf9d      	ittte	ls
    4a4c:	f892 1d21 	ldrbls.w	r1, [r2, #3361]	; 0xd21
    4a50:	f8d2 3d1c 	ldrls.w	r3, [r2, #3356]	; 0xd1c
    4a54:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
		return 0;
    4a58:	2000      	movhi	r0, #0
}
    4a5a:	bd10      	pop	{r4, pc}
    4a5c:	20000380 	.word	0x20000380

00004a60 <conn_update_req>:
}

#if defined (CONFIG_BT_CTLR_XTAL_ADVANCED) && \
    defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
    4a60:	b530      	push	{r4, r5, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    4a62:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    4a66:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    4a6a:	4299      	cmp	r1, r3
    4a6c:	d128      	bne.n	4ac0 <conn_update_req+0x60>
	if (conn->llcp_conn_param.req != conn->llcp_conn_param.ack) {
		return 1;
	}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	if (!conn->role) {
    4a6e:	f990 301d 	ldrsb.w	r3, [r0, #29]
    4a72:	2b00      	cmp	r3, #0
    4a74:	db26      	blt.n	4ac4 <conn_update_req+0x64>
		conn->llcp.conn_upd.win_size = 1;
		conn->llcp.conn_upd.win_offset_us = 0;
		conn->llcp.conn_upd.interval = conn->conn_interval;
		conn->llcp.conn_upd.latency = conn->latency;
    4a76:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4a78:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.conn_upd.latency = conn->latency;
    4a7a:	f8a0 4064 	strh.w	r4, [r0, #100]	; 0x64
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
    4a7e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
		conn->llcp.conn_upd.interval = conn->conn_interval;
    4a80:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4a84:	4354      	muls	r4, r2
					      conn->supervision_reload *
    4a86:	227d      	movs	r2, #125	; 0x7d
    4a88:	4362      	muls	r2, r4
					      125 / 1000;
    4a8a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    4a8e:	fb92 f2f4 	sdiv	r2, r2, r4
		conn->llcp.conn_upd.timeout = conn->conn_interval *
    4a92:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4a96:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
		conn->llcp.conn_upd.win_size = 1;
    4a9a:	2501      	movs	r5, #1
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
    4a9c:	f365 0201 	bfi	r2, r5, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
    4aa0:	b2d2      	uxtb	r2, r2
		conn->llcp.conn_upd.win_offset_us = 0;
    4aa2:	2300      	movs	r3, #0
		conn->llcp.conn_upd.is_internal = 1;
    4aa4:	f042 0204 	orr.w	r2, r2, #4

		conn->llcp_type = LLCP_CONN_UPD;
		conn->llcp_ack--;
    4aa8:	3901      	subs	r1, #1
		conn->llcp.conn_upd.win_size = 1;
    4aaa:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
		conn->llcp.conn_upd.win_offset_us = 0;
    4aae:	66c3      	str	r3, [r0, #108]	; 0x6c
		conn->llcp.conn_upd.is_internal = 1;
    4ab0:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
		conn->llcp_ack--;
    4ab4:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
		conn->llcp_type = LLCP_CONN_UPD;
    4ab8:	f880 505e 	strb.w	r5, [r0, #94]	; 0x5e

		return 0;
    4abc:	4618      	mov	r0, r3
    4abe:	bd30      	pop	{r4, r5, pc}
		return 1;
    4ac0:	2001      	movs	r0, #1
    4ac2:	bd30      	pop	{r4, r5, pc}
		return 0;
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
    4ac4:	2002      	movs	r0, #2
}
    4ac6:	bd30      	pop	{r4, r5, pc}

00004ac8 <tx_cmplt_get>:
	return 0;
}
#endif /* CONFIG_BT_CTLR_PHY */

static u8_t tx_cmplt_get(u16_t *handle, u8_t *first, u8_t last)
{
    4ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u8_t _first;
	u8_t cmplt;

	_first = *first;
    4acc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    4ace:	4294      	cmp	r4, r2
{
    4ad0:	4681      	mov	r9, r0
    4ad2:	460f      	mov	r7, r1
    4ad4:	4690      	mov	r8, r2
	if (_first == last) {
    4ad6:	d03d      	beq.n	4b54 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    4ad8:	4e1f      	ldr	r6, [pc, #124]	; (4b58 <tx_cmplt_get+0x90>)
    4ada:	f8d6 3d50 	ldr.w	r3, [r6, #3408]	; 0xd50
    4ade:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    4ae2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
    4ae4:	2500      	movs	r5, #0
			_radio.pkt_release[_first].node_tx = (void *)1;

			cmplt++;
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx = (void *)2;
    4ae6:	f04f 0b02 	mov.w	fp, #2
		}

		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    4aea:	f606 5a44 	addw	sl, r6, #3396	; 0xd44
		if (*handle != _radio.pkt_release[_first].handle) {
    4aee:	b222      	sxth	r2, r4
    4af0:	f8d6 0d50 	ldr.w	r0, [r6, #3408]	; 0xd50
    4af4:	f8b9 e000 	ldrh.w	lr, [r9]
    4af8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    4afc:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    4b00:	4596      	cmp	lr, r2
    4b02:	d120      	bne.n	4b46 <tx_cmplt_get+0x7e>
		node_tx = _radio.pkt_release[_first].node_tx;
    4b04:	6848      	ldr	r0, [r1, #4]
		if ((!node_tx) || (node_tx == (void *)1) ||
    4b06:	2801      	cmp	r0, #1
    4b08:	f020 0303 	bic.w	r3, r0, #3
    4b0c:	d90a      	bls.n	4b24 <tx_cmplt_get+0x5c>
    4b0e:	b1f3      	cbz	r3, 4b4e <tx_cmplt_get+0x86>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
    4b10:	1d02      	adds	r2, r0, #4
    4b12:	d01c      	beq.n	4b4e <tx_cmplt_get+0x86>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4b14:	7942      	ldrb	r2, [r0, #5]
    4b16:	b1d2      	cbz	r2, 4b4e <tx_cmplt_get+0x86>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
    4b18:	7902      	ldrb	r2, [r0, #4]
    4b1a:	f002 0203 	and.w	r2, r2, #3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4b1e:	3a01      	subs	r2, #1
    4b20:	2a01      	cmp	r2, #1
    4b22:	d814      	bhi.n	4b4e <tx_cmplt_get+0x86>
			_radio.pkt_release[_first].node_tx = (void *)1;
    4b24:	2201      	movs	r2, #1
			cmplt++;
    4b26:	4415      	add	r5, r2
			_radio.pkt_release[_first].node_tx = (void *)1;
    4b28:	604a      	str	r2, [r1, #4]
			cmplt++;
    4b2a:	b2ed      	uxtb	r5, r5
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
    4b2c:	b113      	cbz	r3, 4b34 <tx_cmplt_get+0x6c>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    4b2e:	4651      	mov	r1, sl
    4b30:	f7fe f895 	bl	2c5e <mem_release>
		}

		_first = _first + 1;
    4b34:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    4b36:	f896 2d54 	ldrb.w	r2, [r6, #3412]	; 0xd54
		_first = _first + 1;
    4b3a:	b2e4      	uxtb	r4, r4
			_first = 0;
    4b3c:	42a2      	cmp	r2, r4
    4b3e:	bf08      	it	eq
    4b40:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    4b42:	4544      	cmp	r4, r8
    4b44:	d1d3      	bne.n	4aee <tx_cmplt_get+0x26>

	*first = _first;
    4b46:	703c      	strb	r4, [r7, #0]

	return cmplt;
}
    4b48:	4628      	mov	r0, r5
    4b4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			_radio.pkt_release[_first].node_tx = (void *)2;
    4b4e:	f8c1 b004 	str.w	fp, [r1, #4]
    4b52:	e7eb      	b.n	4b2c <tx_cmplt_get+0x64>
		return 0;
    4b54:	2500      	movs	r5, #0
    4b56:	e7f7      	b.n	4b48 <tx_cmplt_get+0x80>
    4b58:	20000380 	.word	0x20000380

00004b5c <connection_get>:
{
    4b5c:	b510      	push	{r4, lr}
	if (handle < _radio.connection_count) {
    4b5e:	4b09      	ldr	r3, [pc, #36]	; (4b84 <connection_get+0x28>)
    4b60:	f893 2cf8 	ldrb.w	r2, [r3, #3320]	; 0xcf8
    4b64:	4282      	cmp	r2, r0
{
    4b66:	4604      	mov	r4, r0
	if (handle < _radio.connection_count) {
    4b68:	d90a      	bls.n	4b80 <connection_get+0x24>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    4b6a:	4602      	mov	r2, r0
    4b6c:	f44f 7182 	mov.w	r1, #260	; 0x104
    4b70:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    4b74:	f7fe f888 	bl	2c88 <mem_get>
		if ((conn) && (conn->handle == handle)) {
    4b78:	b110      	cbz	r0, 4b80 <connection_get+0x24>
    4b7a:	8c03      	ldrh	r3, [r0, #32]
    4b7c:	42a3      	cmp	r3, r4
    4b7e:	d000      	beq.n	4b82 <connection_get+0x26>
	return 0;
    4b80:	2000      	movs	r0, #0
}
    4b82:	bd10      	pop	{r4, pc}
    4b84:	20000380 	.word	0x20000380

00004b88 <role_disable>:
{
    4b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b8c:	b086      	sub	sp, #24
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4b8e:	2302      	movs	r3, #2
	switch (ticker_id_primary) {
    4b90:	2805      	cmp	r0, #5
{
    4b92:	4605      	mov	r5, r0
    4b94:	460f      	mov	r7, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    4b96:	9302      	str	r3, [sp, #8]
	switch (ticker_id_primary) {
    4b98:	d00e      	beq.n	4bb8 <role_disable+0x30>
    4b9a:	2806      	cmp	r0, #6
    4b9c:	f000 808e 	beq.w	4cbc <role_disable+0x134>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4ba0:	f240 8086 	bls.w	4cb0 <role_disable+0x128>
			conn_handle = ticker_id_primary -
    4ba4:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
    4ba6:	b280      	uxth	r0, r0
    4ba8:	f7ff ffd8 	bl	4b5c <connection_get>
			if (!conn) {
    4bac:	2800      	cmp	r0, #0
    4bae:	f000 80d9 	beq.w	4d64 <role_disable+0x1dc>
			ticks_active_to_start =
    4bb2:	e890 0140 	ldmia.w	r0, {r6, r8}
		break;
    4bb6:	e010      	b.n	4bda <role_disable+0x52>
		ticks_xtal_to_start =
    4bb8:	4b6b      	ldr	r3, [pc, #428]	; (4d68 <role_disable+0x1e0>)
    4bba:	699e      	ldr	r6, [r3, #24]
		ticks_active_to_start =
    4bbc:	f8d3 801c 	ldr.w	r8, [r3, #28]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4bc0:	ab02      	add	r3, sp, #8
    4bc2:	9300      	str	r3, [sp, #0]
    4bc4:	460a      	mov	r2, r1
    4bc6:	4b69      	ldr	r3, [pc, #420]	; (4d6c <role_disable+0x1e4>)
    4bc8:	2103      	movs	r1, #3
    4bca:	2000      	movs	r0, #0
    4bcc:	f7fe ff2e 	bl	3a2c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4bd0:	2802      	cmp	r0, #2
    4bd2:	d066      	beq.n	4ca2 <role_disable+0x11a>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4bd4:	9b02      	ldr	r3, [sp, #8]
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	d167      	bne.n	4caa <role_disable+0x122>
	LL_ASSERT(!_radio.ticker_id_stop);
    4bda:	4c63      	ldr	r4, [pc, #396]	; (4d68 <role_disable+0x1e0>)
    4bdc:	7ca3      	ldrb	r3, [r4, #18]
    4bde:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4be2:	2b00      	cmp	r3, #0
    4be4:	d164      	bne.n	4cb0 <role_disable+0x128>
	ret_cb = TICKER_STATUS_BUSY;
    4be6:	ab06      	add	r3, sp, #24
    4be8:	2202      	movs	r2, #2
	_radio.ticker_id_stop = ticker_id_primary;
    4bea:	74a5      	strb	r5, [r4, #18]
	ret_cb = TICKER_STATUS_BUSY;
    4bec:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4bf0:	2103      	movs	r1, #3
    4bf2:	9300      	str	r3, [sp, #0]
    4bf4:	462a      	mov	r2, r5
    4bf6:	4b5d      	ldr	r3, [pc, #372]	; (4d6c <role_disable+0x1e4>)
    4bf8:	f7fe ff18 	bl	3a2c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4bfc:	2802      	cmp	r0, #2
    4bfe:	d063      	beq.n	4cc8 <role_disable+0x140>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    4c00:	9b02      	ldr	r3, [sp, #8]
    4c02:	2b00      	cmp	r3, #0
    4c04:	d145      	bne.n	4c92 <role_disable+0x10a>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    4c06:	7c23      	ldrb	r3, [r4, #16]
    4c08:	429d      	cmp	r5, r3
    4c0a:	d002      	beq.n	4c12 <role_disable+0x8a>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    4c0c:	7c63      	ldrb	r3, [r4, #17]
    4c0e:	429d      	cmp	r5, r3
    4c10:	d13b      	bne.n	4c8a <role_disable+0x102>
	u32_t volatile ret_cb_evt = TICKER_STATUS_BUSY;
    4c12:	ab06      	add	r3, sp, #24
    4c14:	2202      	movs	r2, #2
    4c16:	f843 2d0c 	str.w	r2, [r3, #-12]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4c1a:	2200      	movs	r2, #0
    4c1c:	9300      	str	r3, [sp, #0]
    4c1e:	2103      	movs	r1, #3
    4c20:	4b52      	ldr	r3, [pc, #328]	; (4d6c <role_disable+0x1e4>)
    4c22:	4610      	mov	r0, r2
    4c24:	f7fe ff02 	bl	3a2c <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
    4c28:	2802      	cmp	r0, #2
    4c2a:	d107      	bne.n	4c3c <role_disable+0xb4>
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4c2c:	2201      	movs	r2, #1
    4c2e:	4611      	mov	r1, r2
    4c30:	2003      	movs	r0, #3
    4c32:	f7fe f88b 	bl	2d4c <mayfly_enable>
		LL_ASSERT(ret_cb_evt != TICKER_STATUS_BUSY);
    4c36:	9b03      	ldr	r3, [sp, #12]
    4c38:	2b02      	cmp	r3, #2
    4c3a:	d039      	beq.n	4cb0 <role_disable+0x128>
	if (ret_cb_evt == TICKER_STATUS_SUCCESS) {
    4c3c:	9803      	ldr	r0, [sp, #12]
    4c3e:	2800      	cmp	r0, #0
    4c40:	d15e      	bne.n	4d00 <role_disable+0x178>
		u32_t volatile ret_cb_m0 = TICKER_STATUS_BUSY;
    4c42:	2302      	movs	r3, #2
    4c44:	9304      	str	r3, [sp, #16]
		LL_ASSERT(_radio.ticker_id_prepare);
    4c46:	7c23      	ldrb	r3, [r4, #16]
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d031      	beq.n	4cb0 <role_disable+0x128>
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4c4c:	ab04      	add	r3, sp, #16
    4c4e:	9300      	str	r3, [sp, #0]
    4c50:	2201      	movs	r2, #1
    4c52:	4b46      	ldr	r3, [pc, #280]	; (4d6c <role_disable+0x1e4>)
		_radio.ticker_id_prepare = 0;
    4c54:	7420      	strb	r0, [r4, #16]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4c56:	2103      	movs	r1, #3
    4c58:	f7fe fee8 	bl	3a2c <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
    4c5c:	2802      	cmp	r0, #2
    4c5e:	d107      	bne.n	4c70 <role_disable+0xe8>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4c60:	2201      	movs	r2, #1
    4c62:	4611      	mov	r1, r2
    4c64:	2003      	movs	r0, #3
    4c66:	f7fe f871 	bl	2d4c <mayfly_enable>
			LL_ASSERT(ret_cb_m0 != TICKER_STATUS_BUSY);
    4c6a:	9b04      	ldr	r3, [sp, #16]
    4c6c:	2b02      	cmp	r3, #2
    4c6e:	d01f      	beq.n	4cb0 <role_disable+0x128>
		if (ret_cb_m0 == TICKER_STATUS_SUCCESS) {
    4c70:	9a04      	ldr	r2, [sp, #16]
    4c72:	2a00      	cmp	r2, #0
    4c74:	d136      	bne.n	4ce4 <role_disable+0x15c>
			ticks_xtal_to_start &= ~XON_BITMASK;
    4c76:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
    4c7a:	45b0      	cmp	r8, r6
    4c7c:	d93e      	bls.n	4cfc <role_disable+0x174>
				ret = mayfly_enqueue(
    4c7e:	4b3c      	ldr	r3, [pc, #240]	; (4d70 <role_disable+0x1e8>)
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4c80:	4611      	mov	r1, r2
    4c82:	2003      	movs	r0, #3
    4c84:	f7fe f88a 	bl	2d9c <mayfly_enqueue>
			LL_ASSERT(!ret);
    4c88:	b990      	cbnz	r0, 4cb0 <role_disable+0x128>
	if (!_radio.ticker_id_stop) {
    4c8a:	7ca3      	ldrb	r3, [r4, #18]
    4c8c:	b90b      	cbnz	r3, 4c92 <role_disable+0x10a>
		ret_cb = TICKER_STATUS_FAILURE;
    4c8e:	2301      	movs	r3, #1
    4c90:	9302      	str	r3, [sp, #8]
	_radio.ticker_id_stop = 0;
    4c92:	2300      	movs	r3, #0
    4c94:	74a3      	strb	r3, [r4, #18]
	return ret_cb;
    4c96:	9802      	ldr	r0, [sp, #8]
}
    4c98:	b006      	add	sp, #24
    4c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				cpu_sleep();
    4c9e:	f7ff fe77 	bl	4990 <cpu_sleep>
			while (ret_cb == TICKER_STATUS_BUSY) {
    4ca2:	9b02      	ldr	r3, [sp, #8]
    4ca4:	2b02      	cmp	r3, #2
    4ca6:	d0fa      	beq.n	4c9e <role_disable+0x116>
    4ca8:	e794      	b.n	4bd4 <role_disable+0x4c>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
    4caa:	9b02      	ldr	r3, [sp, #8]
    4cac:	2b01      	cmp	r3, #1
    4cae:	d094      	beq.n	4bda <role_disable+0x52>
		LL_ASSERT(0);
    4cb0:	4040      	eors	r0, r0
    4cb2:	f380 8811 	msr	BASEPRI, r0
    4cb6:	f04f 0004 	mov.w	r0, #4
    4cba:	df02      	svc	2
		ticks_xtal_to_start =
    4cbc:	4b2a      	ldr	r3, [pc, #168]	; (4d68 <role_disable+0x1e0>)
    4cbe:	f8d3 6c1c 	ldr.w	r6, [r3, #3100]	; 0xc1c
		ticks_active_to_start =
    4cc2:	f8d3 8c20 	ldr.w	r8, [r3, #3104]	; 0xc20
		break;
    4cc6:	e788      	b.n	4bda <role_disable+0x52>
		if (_radio.ticker_id_event == ticker_id_primary) {
    4cc8:	7c63      	ldrb	r3, [r4, #17]
    4cca:	429d      	cmp	r5, r3
    4ccc:	d104      	bne.n	4cd8 <role_disable+0x150>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4cce:	2201      	movs	r2, #1
    4cd0:	4611      	mov	r1, r2
    4cd2:	2003      	movs	r0, #3
    4cd4:	f7fe f83a 	bl	2d4c <mayfly_enable>
		while (ret_cb == TICKER_STATUS_BUSY) {
    4cd8:	9b02      	ldr	r3, [sp, #8]
    4cda:	2b02      	cmp	r3, #2
    4cdc:	d190      	bne.n	4c00 <role_disable+0x78>
			cpu_sleep();
    4cde:	f7ff fe57 	bl	4990 <cpu_sleep>
    4ce2:	e7f9      	b.n	4cd8 <role_disable+0x150>
		} else if (ret_cb_m0 == TICKER_STATUS_FAILURE) {
    4ce4:	9b04      	ldr	r3, [sp, #16]
    4ce6:	2b01      	cmp	r3, #1
    4ce8:	d1e2      	bne.n	4cb0 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4cea:	2200      	movs	r2, #0
    4cec:	4611      	mov	r1, r2
    4cee:	4b20      	ldr	r3, [pc, #128]	; (4d70 <role_disable+0x1e8>)
    4cf0:	2003      	movs	r0, #3
    4cf2:	f7fe f853 	bl	2d9c <mayfly_enqueue>
			LL_ASSERT(!ret);
    4cf6:	4602      	mov	r2, r0
    4cf8:	2800      	cmp	r0, #0
    4cfa:	d1d9      	bne.n	4cb0 <role_disable+0x128>
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4cfc:	4b1d      	ldr	r3, [pc, #116]	; (4d74 <role_disable+0x1ec>)
    4cfe:	e7bf      	b.n	4c80 <role_disable+0xf8>
	} else if (ret_cb_evt == TICKER_STATUS_FAILURE) {
    4d00:	9d03      	ldr	r5, [sp, #12]
    4d02:	2d01      	cmp	r5, #1
    4d04:	d1d4      	bne.n	4cb0 <role_disable+0x128>
		if (ticker_id_stop != TICKER_NULL) {
    4d06:	2fff      	cmp	r7, #255	; 0xff
    4d08:	d019      	beq.n	4d3e <role_disable+0x1b6>
			u32_t volatile ret_cb_stop = TICKER_STATUS_BUSY;
    4d0a:	ab06      	add	r3, sp, #24
    4d0c:	2202      	movs	r2, #2
    4d0e:	f843 2d04 	str.w	r2, [r3, #-4]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4d12:	2103      	movs	r1, #3
    4d14:	9300      	str	r3, [sp, #0]
    4d16:	463a      	mov	r2, r7
    4d18:	4b14      	ldr	r3, [pc, #80]	; (4d6c <role_disable+0x1e4>)
    4d1a:	2000      	movs	r0, #0
    4d1c:	f7fe fe86 	bl	3a2c <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
    4d20:	2802      	cmp	r0, #2
    4d22:	d107      	bne.n	4d34 <role_disable+0x1ac>
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
    4d24:	462a      	mov	r2, r5
    4d26:	4629      	mov	r1, r5
    4d28:	2003      	movs	r0, #3
    4d2a:	f7fe f80f 	bl	2d4c <mayfly_enable>
				LL_ASSERT(ret_cb_stop != TICKER_STATUS_BUSY);
    4d2e:	9b05      	ldr	r3, [sp, #20]
    4d30:	2b02      	cmp	r3, #2
    4d32:	d0bd      	beq.n	4cb0 <role_disable+0x128>
			LL_ASSERT((ret_cb_stop == TICKER_STATUS_SUCCESS) ||
    4d34:	9b05      	ldr	r3, [sp, #20]
    4d36:	b113      	cbz	r3, 4d3e <role_disable+0x1b6>
    4d38:	9b05      	ldr	r3, [sp, #20]
    4d3a:	2b01      	cmp	r3, #1
    4d3c:	d1b8      	bne.n	4cb0 <role_disable+0x128>
		if (_radio.role != ROLE_NONE) {
    4d3e:	7ce3      	ldrb	r3, [r4, #19]
    4d40:	2b00      	cmp	r3, #0
    4d42:	d0a2      	beq.n	4c8a <role_disable+0x102>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4d44:	4b0c      	ldr	r3, [pc, #48]	; (4d78 <role_disable+0x1f0>)
    4d46:	2204      	movs	r2, #4
    4d48:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
    4d4a:	2200      	movs	r2, #0
    4d4c:	4611      	mov	r1, r2
    4d4e:	2003      	movs	r0, #3
    4d50:	f7fe f824 	bl	2d9c <mayfly_enqueue>
			LL_ASSERT(!ret);
    4d54:	2800      	cmp	r0, #0
    4d56:	d1ab      	bne.n	4cb0 <role_disable+0x128>
			while (_radio.role != ROLE_NONE) {
    4d58:	7ce3      	ldrb	r3, [r4, #19]
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d095      	beq.n	4c8a <role_disable+0x102>
				cpu_sleep();
    4d5e:	f7ff fe17 	bl	4990 <cpu_sleep>
    4d62:	e7f9      	b.n	4d58 <role_disable+0x1d0>
				return 1;
    4d64:	2001      	movs	r0, #1
    4d66:	e797      	b.n	4c98 <role_disable+0x110>
    4d68:	20000380 	.word	0x20000380
    4d6c:	000049d5 	.word	0x000049d5
    4d70:	200060f0 	.word	0x200060f0
    4d74:	20006180 	.word	0x20006180
    4d78:	20006110 	.word	0x20006110

00004d7c <chan_set>:
{
    4d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	pdu = (void *)_radio.advertiser.adv_data.data
    4d80:	4e7d      	ldr	r6, [pc, #500]	; (4f78 <chan_set+0x1fc>)
    4d82:	f896 322d 	ldrb.w	r3, [r6, #557]	; 0x22d
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4d86:	eb03 2303 	add.w	r3, r3, r3, lsl #8
    4d8a:	4433      	add	r3, r6
{
    4d8c:	4604      	mov	r4, r0
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    4d8e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    4d92:	f003 030f 	and.w	r3, r3, #15
    4d96:	2b07      	cmp	r3, #7
    4d98:	f040 80e0 	bne.w	4f5c <chan_set+0x1e0>
		switch (chan) {
    4d9c:	2826      	cmp	r0, #38	; 0x26
    4d9e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 4fb4 <chan_set+0x238>
    4da2:	d030      	beq.n	4e06 <chan_set+0x8a>
    4da4:	2827      	cmp	r0, #39	; 0x27
    4da6:	f8df a210 	ldr.w	sl, [pc, #528]	; 4fb8 <chan_set+0x23c>
    4daa:	f8df 9210 	ldr.w	r9, [pc, #528]	; 4fbc <chan_set+0x240>
    4dae:	d034      	beq.n	4e1a <chan_set+0x9e>
    4db0:	2825      	cmp	r0, #37	; 0x25
    4db2:	d162      	bne.n	4e7a <chan_set+0xfe>
			stop_time_37 = k_cycle_get_32();
    4db4:	f7fd f84c 	bl	1e50 <_timer_cycle_get_32>
			cycles_spent_37 = stop_time_37 - start_time37;
    4db8:	4e70      	ldr	r6, [pc, #448]	; (4f7c <chan_set+0x200>)
			stop_time_37 = k_cycle_get_32();
    4dba:	4b71      	ldr	r3, [pc, #452]	; (4f80 <chan_set+0x204>)
			cycles_spent_37 = stop_time_37 - start_time37;
    4dbc:	6837      	ldr	r7, [r6, #0]
			stop_time_37 = k_cycle_get_32();
    4dbe:	6018      	str	r0, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    4dc0:	f8da 2000 	ldr.w	r2, [sl]
			cycles_spent_37 = stop_time_37 - start_time37;
    4dc4:	4b6f      	ldr	r3, [pc, #444]	; (4f84 <chan_set+0x208>)
    4dc6:	1bc7      	subs	r7, r0, r7
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    4dc8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
			cycles_spent_37 = stop_time_37 - start_time37;
    4dcc:	601f      	str	r7, [r3, #0]
			us_spent_37 = SYS_CLOCK_HW_CYCLES_TO_NS(cycles_spent_37)/1000;
    4dce:	fb82 2305 	smull	r2, r3, r2, r5
    4dd2:	fba2 0107 	umull	r0, r1, r2, r7
    4dd6:	f8d9 2000 	ldr.w	r2, [r9]
    4dda:	fb07 1103 	mla	r1, r7, r3, r1
    4dde:	17d3      	asrs	r3, r2, #31
    4de0:	f7fb fa42 	bl	268 <__aeabi_uldivmod>
    4de4:	4b68      	ldr	r3, [pc, #416]	; (4f88 <chan_set+0x20c>)
    4de6:	fbb0 f0f5 	udiv	r0, r0, r5
    4dea:	6018      	str	r0, [r3, #0]
			start_time = k_cycle_get_32();
    4dec:	f7fd f830 	bl	1e50 <_timer_cycle_get_32>
    4df0:	f8c8 0000 	str.w	r0, [r8]
			start_time37= k_cycle_get_32();
    4df4:	f7fd f82c 	bl	1e50 <_timer_cycle_get_32>
			pckt_send++;
    4df8:	4a64      	ldr	r2, [pc, #400]	; (4f8c <chan_set+0x210>)
			start_time37= k_cycle_get_32();
    4dfa:	6030      	str	r0, [r6, #0]
			pckt_send++;
    4dfc:	7813      	ldrb	r3, [r2, #0]
    4dfe:	3301      	adds	r3, #1
    4e00:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(2);
    4e02:	2002      	movs	r0, #2
    4e04:	e09e      	b.n	4f44 <chan_set+0x1c8>
			start_time = k_cycle_get_32();
    4e06:	f7fd f823 	bl	1e50 <_timer_cycle_get_32>
			pckt_send++;
    4e0a:	4a60      	ldr	r2, [pc, #384]	; (4f8c <chan_set+0x210>)
			start_time = k_cycle_get_32();
    4e0c:	f8c8 0000 	str.w	r0, [r8]
			pckt_send++;
    4e10:	7813      	ldrb	r3, [r2, #0]
    4e12:	3301      	adds	r3, #1
    4e14:	7013      	strb	r3, [r2, #0]
			radio_freq_chan_set(26);
    4e16:	201a      	movs	r0, #26
    4e18:	e094      	b.n	4f44 <chan_set+0x1c8>
			stop_time_39 = k_cycle_get_32();
    4e1a:	f7fd f819 	bl	1e50 <_timer_cycle_get_32>
    4e1e:	4b5c      	ldr	r3, [pc, #368]	; (4f90 <chan_set+0x214>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4e20:	f8da 2000 	ldr.w	r2, [sl]
			stop_time_39 = k_cycle_get_32();
    4e24:	6018      	str	r0, [r3, #0]
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4e26:	f8d8 3000 	ldr.w	r3, [r8]
    4e2a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    4e2e:	eba0 0e03 	sub.w	lr, r0, r3
    4e32:	fb82 2307 	smull	r2, r3, r2, r7
    4e36:	fbae 0102 	umull	r0, r1, lr, r2
    4e3a:	f8d9 2000 	ldr.w	r2, [r9]
    4e3e:	fb0e 1103 	mla	r1, lr, r3, r1
    4e42:	17d3      	asrs	r3, r2, #31
    4e44:	f7fb fa10 	bl	268 <__aeabi_uldivmod>
    4e48:	4b52      	ldr	r3, [pc, #328]	; (4f94 <chan_set+0x218>)
    4e4a:	fbb0 f0f7 	udiv	r0, r0, r7
    4e4e:	6018      	str	r0, [r3, #0]
			pckt_send = 0;
    4e50:	4b4e      	ldr	r3, [pc, #312]	; (4f8c <chan_set+0x210>)
			Time_difference = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_39 - start_time)/1000;
    4e52:	2500      	movs	r5, #0
			pckt_send = 0;
    4e54:	701d      	strb	r5, [r3, #0]
			start_time = k_cycle_get_32();
    4e56:	f7fc fffb 	bl	1e50 <_timer_cycle_get_32>
			_radio.ext_advertiser.current_slot++;
    4e5a:	f896 3c69 	ldrb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4e5e:	f896 2c68 	ldrb.w	r2, [r6, #3176]	; 0xc68
			start_time = k_cycle_get_32();
    4e62:	f8c8 0000 	str.w	r0, [r8]
			_radio.ext_advertiser.current_slot++;
    4e66:	3301      	adds	r3, #1
    4e68:	b2db      	uxtb	r3, r3
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4e6a:	429a      	cmp	r2, r3
			_radio.ext_advertiser.current_slot++;
    4e6c:	f886 3c69 	strb.w	r3, [r6, #3177]	; 0xc69
			if(_radio.ext_advertiser.current_slot > _radio.ext_advertiser.max_skip){
    4e70:	d201      	bcs.n	4e76 <chan_set+0xfa>
			_radio.ext_advertiser.current_slot= 0;
    4e72:	f886 5c69 	strb.w	r5, [r6, #3177]	; 0xc69
			radio_freq_chan_set(80);
    4e76:	2050      	movs	r0, #80	; 0x50
    4e78:	e064      	b.n	4f44 <chan_set+0x1c8>
			stop_time_aux1 = k_cycle_get_32();
    4e7a:	f7fc ffe9 	bl	1e50 <_timer_cycle_get_32>
    4e7e:	4b46      	ldr	r3, [pc, #280]	; (4f98 <chan_set+0x21c>)
    4e80:	6018      	str	r0, [r3, #0]
    4e82:	f8da 3000 	ldr.w	r3, [sl]
    4e86:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    4e8a:	fb83 2305 	smull	r2, r3, r3, r5
    4e8e:	e9cd 2300 	strd	r2, r3, [sp]
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    4e92:	f8d9 3000 	ldr.w	r3, [r9]
    4e96:	4619      	mov	r1, r3
    4e98:	17da      	asrs	r2, r3, #31
    4e9a:	f8d8 3000 	ldr.w	r3, [r8]
    4e9e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    4ea2:	9a00      	ldr	r2, [sp, #0]
    4ea4:	1ac3      	subs	r3, r0, r3
			stop_time_aux1 = k_cycle_get_32();
    4ea6:	4607      	mov	r7, r0
			us_spent_aux1 = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time)/1000;
    4ea8:	fba3 0102 	umull	r0, r1, r3, r2
    4eac:	9a01      	ldr	r2, [sp, #4]
    4eae:	fb03 1102 	mla	r1, r3, r2, r1
    4eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4eb6:	f7fb f9d7 	bl	268 <__aeabi_uldivmod>
    4eba:	4b38      	ldr	r3, [pc, #224]	; (4f9c <chan_set+0x220>)
    4ebc:	fbb0 f0f5 	udiv	r0, r0, r5
    4ec0:	6018      	str	r0, [r3, #0]
			us_spent_aux = SYS_CLOCK_HW_CYCLES_TO_NS(stop_time_aux1 - start_time37)/1000;
    4ec2:	4b2e      	ldr	r3, [pc, #184]	; (4f7c <chan_set+0x200>)
    4ec4:	681b      	ldr	r3, [r3, #0]
    4ec6:	1aff      	subs	r7, r7, r3
    4ec8:	9b00      	ldr	r3, [sp, #0]
    4eca:	fba7 0103 	umull	r0, r1, r7, r3
    4ece:	9b01      	ldr	r3, [sp, #4]
    4ed0:	fb07 1103 	mla	r1, r7, r3, r1
    4ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4ed8:	f7fb f9c6 	bl	268 <__aeabi_uldivmod>
    4edc:	4b30      	ldr	r3, [pc, #192]	; (4fa0 <chan_set+0x224>)
    4ede:	fbb0 f0f5 	udiv	r0, r0, r5
    4ee2:	6018      	str	r0, [r3, #0]
 			stop_dynamic_cal = k_cycle_get_32(); 
    4ee4:	f7fc ffb4 	bl	1e50 <_timer_cycle_get_32>
    4ee8:	4b2e      	ldr	r3, [pc, #184]	; (4fa4 <chan_set+0x228>)
			last_dynamic_cal = final_dynamic_cal;
    4eea:	4f2f      	ldr	r7, [pc, #188]	; (4fa8 <chan_set+0x22c>)
 			stop_dynamic_cal = k_cycle_get_32(); 
    4eec:	2100      	movs	r1, #0
    4eee:	e9c3 0100 	strd	r0, r1, [r3]
			last_dynamic_cal = final_dynamic_cal;
    4ef2:	4b2e      	ldr	r3, [pc, #184]	; (4fac <chan_set+0x230>)
    4ef4:	f8d7 8000 	ldr.w	r8, [r7]
    4ef8:	687a      	ldr	r2, [r7, #4]
    4efa:	f8c3 8000 	str.w	r8, [r3]
    4efe:	605a      	str	r2, [r3, #4]
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    4f00:	4b2b      	ldr	r3, [pc, #172]	; (4fb0 <chan_set+0x234>)
    4f02:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f06:	1a82      	subs	r2, r0, r2
    4f08:	f8da 0000 	ldr.w	r0, [sl]
    4f0c:	eb61 0303 	sbc.w	r3, r1, r3
    4f10:	fb80 0105 	smull	r0, r1, r0, r5
    4f14:	4351      	muls	r1, r2
    4f16:	fb00 1303 	mla	r3, r0, r3, r1
    4f1a:	fba2 0100 	umull	r0, r1, r2, r0
    4f1e:	f8d9 2000 	ldr.w	r2, [r9]
    4f22:	4419      	add	r1, r3
    4f24:	17d3      	asrs	r3, r2, #31
    4f26:	f7fb f99f 	bl	268 <__aeabi_uldivmod>
    4f2a:	2300      	movs	r3, #0
    4f2c:	fbb0 f0f5 	udiv	r0, r0, r5
    4f30:	6038      	str	r0, [r7, #0]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    4f32:	eba0 0008 	sub.w	r0, r0, r8
			final_dynamic_cal = SYS_CLOCK_HW_CYCLES_TO_NS(stop_dynamic_cal - start_dynamic_cal)/1000;
    4f36:	607b      	str	r3, [r7, #4]
			_radio.ext_advertiser.last_dynamic_cal = final_dynamic_cal-last_dynamic_cal;
    4f38:	f8c6 0c88 	str.w	r0, [r6, #3208]	; 0xc88
			if (chan < 11) {
    4f3c:	2c0a      	cmp	r4, #10
    4f3e:	d809      	bhi.n	4f54 <chan_set+0x1d8>
				radio_freq_chan_set(4 + (2 * chan));
    4f40:	1ca0      	adds	r0, r4, #2
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    4f42:	0040      	lsls	r0, r0, #1
    4f44:	f004 fad2 	bl	94ec <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    4f48:	4620      	mov	r0, r4
}
    4f4a:	b004      	add	sp, #16
    4f4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_whiten_iv_set(chan);
    4f50:	f004 bad2 	b.w	94f8 <radio_whiten_iv_set>
			} else if (chan < 40) {
    4f54:	2c27      	cmp	r4, #39	; 0x27
    4f56:	d809      	bhi.n	4f6c <chan_set+0x1f0>
				radio_freq_chan_set(28 + (2 * (chan - 11)));
    4f58:	1ce0      	adds	r0, r4, #3
    4f5a:	e7f2      	b.n	4f42 <chan_set+0x1c6>
		switch (chan) {
    4f5c:	2826      	cmp	r0, #38	; 0x26
    4f5e:	f43f af5a 	beq.w	4e16 <chan_set+0x9a>
    4f62:	2827      	cmp	r0, #39	; 0x27
    4f64:	d087      	beq.n	4e76 <chan_set+0xfa>
    4f66:	2825      	cmp	r0, #37	; 0x25
    4f68:	d1e8      	bne.n	4f3c <chan_set+0x1c0>
    4f6a:	e74a      	b.n	4e02 <chan_set+0x86>
				LL_ASSERT(0);
    4f6c:	4040      	eors	r0, r0
    4f6e:	f380 8811 	msr	BASEPRI, r0
    4f72:	f04f 0004 	mov.w	r0, #4
    4f76:	df02      	svc	2
    4f78:	20000380 	.word	0x20000380
    4f7c:	2000348c 	.word	0x2000348c
    4f80:	200034f4 	.word	0x200034f4
    4f84:	20003548 	.word	0x20003548
    4f88:	20003568 	.word	0x20003568
    4f8c:	20001120 	.word	0x20001120
    4f90:	200034f8 	.word	0x200034f8
    4f94:	20003550 	.word	0x20003550
    4f98:	2000355c 	.word	0x2000355c
    4f9c:	20003524 	.word	0x20003524
    4fa0:	20003478 	.word	0x20003478
    4fa4:	20003518 	.word	0x20003518
    4fa8:	200010f8 	.word	0x200010f8
    4fac:	20001100 	.word	0x20001100
    4fb0:	20003480 	.word	0x20003480
    4fb4:	20003510 	.word	0x20003510
    4fb8:	200061fc 	.word	0x200061fc
    4fbc:	200061f8 	.word	0x200061f8

00004fc0 <adv_setup>:
{
    4fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (_radio.advertiser.adv_data.first !=
    4fc4:	4c80      	ldr	r4, [pc, #512]	; (51c8 <adv_setup+0x208>)
    4fc6:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    4fca:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4fce:	429a      	cmp	r2, r3
    4fd0:	d006      	beq.n	4fe0 <adv_setup+0x20>
		first = _radio.advertiser.adv_data.first + 1;
    4fd2:	3301      	adds	r3, #1
    4fd4:	b2db      	uxtb	r3, r3
			first = 0;
    4fd6:	2b02      	cmp	r3, #2
    4fd8:	bf08      	it	eq
    4fda:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    4fdc:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    4fe0:	f894 3c13 	ldrb.w	r3, [r4, #3091]	; 0xc13
    4fe4:	f894 2c14 	ldrb.w	r2, [r4, #3092]	; 0xc14
    4fe8:	429a      	cmp	r2, r3
    4fea:	d006      	beq.n	4ffa <adv_setup+0x3a>
		first = _radio.advertiser.scan_data.first + 1;
    4fec:	3301      	adds	r3, #1
    4fee:	b2db      	uxtb	r3, r3
			first = 0;
    4ff0:	2b02      	cmp	r3, #2
    4ff2:	bf08      	it	eq
    4ff4:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    4ff6:	f884 3c13 	strb.w	r3, [r4, #3091]	; 0xc13
	pdu = (void *)_radio.advertiser.adv_data.data
    4ffa:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
    4ffe:	eb07 2707 	add.w	r7, r7, r7, lsl #8
    5002:	372b      	adds	r7, #43	; 0x2b
    5004:	eb04 0907 	add.w	r9, r4, r7
	if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    5008:	5de3      	ldrb	r3, [r4, r7]
    500a:	f003 030f 	and.w	r3, r3, #15
    500e:	2b07      	cmp	r3, #7
    5010:	d15f      	bne.n	50d2 <adv_setup+0x112>
			if(h->adv_addr){
    5012:	f899 3003 	ldrb.w	r3, [r9, #3]
    5016:	07dd      	lsls	r5, r3, #31
				ptr += BDADDR_SIZE;
    5018:	bf4c      	ite	mi
    501a:	f109 050a 	addmi.w	r5, r9, #10
		ptr = (u8_t *)h + sizeof(*h);
    501e:	f109 0504 	addpl.w	r5, r9, #4
			if(h->tgt_addr){
    5022:	079a      	lsls	r2, r3, #30
				ptr += BDADDR_SIZE;
    5024:	bf48      	it	mi
    5026:	3506      	addmi	r5, #6
			if(h->adi){
    5028:	071e      	lsls	r6, r3, #28
				ptr += sizeof(*adi_ptr);
    502a:	bf48      	it	mi
    502c:	3502      	addmi	r5, #2
			if(h->aux_ptr){
    502e:	06da      	lsls	r2, r3, #27
    5030:	d549      	bpl.n	50c6 <adv_setup+0x106>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    5032:	f8d4 2c84 	ldr.w	r2, [r4, #3204]	; 0xc84
    5036:	f8d4 3c60 	ldr.w	r3, [r4, #3168]	; 0xc60
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    503a:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    503e:	4413      	add	r3, r2
    5040:	f894 2c69 	ldrb.w	r2, [r4, #3177]	; 0xc69
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5044:	f3c6 1602 	ubfx	r6, r6, #4, #3
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    5048:	435a      	muls	r2, r3
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    504a:	2e07      	cmp	r6, #7
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset) * _radio.ext_advertiser.current_slot;
    504c:	f8c4 2c6c 	str.w	r2, [r4, #3180]	; 0xc6c
				if((_radio.advertiser.chan_map & 0x07)== 0x07) {
    5050:	f040 8093 	bne.w	517a <adv_setup+0x1ba>
					if((_radio.advertiser.chan_map_current & 0x07) == 0x07){
    5054:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5058:	f003 0307 	and.w	r3, r3, #7
    505c:	2b07      	cmp	r3, #7
    505e:	d17f      	bne.n	5160 <adv_setup+0x1a0>
						offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    5060:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    5064:	1a82      	subs	r2, r0, r2
    5066:	4610      	mov	r0, r2
    5068:	2100      	movs	r1, #0
						_radio.ext_advertiser.chan_offset = offset;
    506a:	f8c4 2c7c 	str.w	r2, [r4, #3196]	; 0xc7c
				if(offset > 245700){
    506e:	4a57      	ldr	r2, [pc, #348]	; (51cc <adv_setup+0x20c>)
    5070:	78ae      	ldrb	r6, [r5, #2]
    5072:	f895 8000 	ldrb.w	r8, [r5]
    5076:	2300      	movs	r3, #0
    5078:	428b      	cmp	r3, r1
    507a:	bf08      	it	eq
    507c:	4282      	cmpeq	r2, r0
    507e:	f080 808d 	bcs.w	519c <adv_setup+0x1dc>
					ap->offs = offset/300;
    5082:	f44f 7296 	mov.w	r2, #300	; 0x12c
    5086:	2300      	movs	r3, #0
    5088:	f7fb f8ee 	bl	268 <__aeabi_uldivmod>
    508c:	f026 061f 	bic.w	r6, r6, #31
    5090:	7068      	strb	r0, [r5, #1]
    5092:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5096:	4330      	orrs	r0, r6
    5098:	70a8      	strb	r0, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_300;
    509a:	f048 0880 	orr.w	r8, r8, #128	; 0x80
				if(_radio.advertiser.ext_adv == 1){
    509e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    50a2:	f885 8000 	strb.w	r8, [r5]
				if(_radio.advertiser.ext_adv == 1){
    50a6:	07db      	lsls	r3, r3, #31
    50a8:	d508      	bpl.n	50bc <adv_setup+0xfc>
					_radio.ext_advertiser.aux_pckt_chan++;
    50aa:	f894 3c80 	ldrb.w	r3, [r4, #3200]	; 0xc80
    50ae:	3301      	adds	r3, #1
    50b0:	b2db      	uxtb	r3, r3
					if(_radio.ext_advertiser.aux_pckt_chan == 0x25){ //37 channel
    50b2:	2b25      	cmp	r3, #37	; 0x25
						_radio.ext_advertiser.aux_pckt_chan = 0;
    50b4:	bf08      	it	eq
    50b6:	2300      	moveq	r3, #0
    50b8:	f884 3c80 	strb.w	r3, [r4, #3200]	; 0xc80
				ap->chan_idx = 0x03;
    50bc:	782b      	ldrb	r3, [r5, #0]
    50be:	2203      	movs	r2, #3
    50c0:	f362 0305 	bfi	r3, r2, #0, #6
    50c4:	702b      	strb	r3, [r5, #0]
		_radio.advertiser.ext_adv = 0;   //in order to change the aux packet channel index
    50c6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    50ca:	f36f 0300 	bfc	r3, #0, #1
    50ce:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
		radio_pkt_tx_set(pdu);
    50d2:	4648      	mov	r0, r9
    50d4:	f004 fa6e 	bl	95b4 <radio_pkt_tx_set>
		if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    50d8:	5de3      	ldrb	r3, [r4, r7]
    50da:	f003 030f 	and.w	r3, r3, #15
    50de:	2b02      	cmp	r3, #2
    50e0:	d06a      	beq.n	51b8 <adv_setup+0x1f8>
    50e2:	2b07      	cmp	r3, #7
    50e4:	d068      	beq.n	51b8 <adv_setup+0x1f8>
			_radio.state = STATE_TX;
    50e6:	2302      	movs	r3, #2
			radio_tmr_tifs_set(RADIO_TIFS);
    50e8:	2096      	movs	r0, #150	; 0x96
			_radio.state = STATE_TX;
    50ea:	7523      	strb	r3, [r4, #20]
			radio_tmr_tifs_set(RADIO_TIFS);
    50ec:	f004 fb6c 	bl	97c8 <radio_tmr_tifs_set>
			radio_switch_complete_and_rx(0);
    50f0:	2000      	movs	r0, #0
    50f2:	f004 fad9 	bl	96a8 <radio_switch_complete_and_rx>
		bitmap = _radio.advertiser.chan_map_current;
    50f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    50fa:	f3c3 0202 	ubfx	r2, r3, #0, #3
    50fe:	b2d3      	uxtb	r3, r2
    5100:	4619      	mov	r1, r3
		while ((bitmap & 0x01) == 0) {
    5102:	2000      	movs	r0, #0
    5104:	07ce      	lsls	r6, r1, #31
    5106:	f100 0501 	add.w	r5, r0, #1
    510a:	d55a      	bpl.n	51c2 <adv_setup+0x202>
			(_radio.advertiser.chan_map_current - 1);
    510c:	3b01      	subs	r3, #1
			_radio.advertiser.chan_map_current &=
    510e:	4013      	ands	r3, r2
    5110:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		count++;
    5114:	4d2e      	ldr	r5, [pc, #184]	; (51d0 <adv_setup+0x210>)
			_radio.advertiser.chan_map_current &=
    5116:	f363 0202 	bfi	r2, r3, #0, #3
    511a:	4b2e      	ldr	r3, [pc, #184]	; (51d4 <adv_setup+0x214>)
    511c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
		if(! _radio.advertiser.chan_map_current){	
    5120:	f012 0f07 	tst.w	r2, #7
			chan_case ++;
    5124:	bf08      	it	eq
    5126:	781a      	ldrbeq	r2, [r3, #0]
		count++;
    5128:	7829      	ldrb	r1, [r5, #0]
			chan_case ++;
    512a:	bf0c      	ite	eq
    512c:	3201      	addeq	r2, #1
			chan_case = 0 ;
    512e:	2200      	movne	r2, #0
    5130:	701a      	strb	r2, [r3, #0]
		_radio.ext_advertiser.event++;
    5132:	f894 3c6a 	ldrb.w	r3, [r4, #3178]	; 0xc6a
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    5136:	f894 2c68 	ldrb.w	r2, [r4, #3176]	; 0xc68
		_radio.ext_advertiser.event++;
    513a:	3301      	adds	r3, #1
    513c:	b2db      	uxtb	r3, r3
		if(_radio.ext_advertiser.event > _radio.ext_advertiser.max_skip){
    513e:	429a      	cmp	r2, r3
		count++;
    5140:	f101 0101 	add.w	r1, r1, #1
		_radio.ext_advertiser.event++;
    5144:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
		count++;
    5148:	7029      	strb	r1, [r5, #0]
			_radio.ext_advertiser.event = 0;
    514a:	bf38      	it	cc
    514c:	2300      	movcc	r3, #0
		chan_set(37 + chan);
    514e:	b2c0      	uxtb	r0, r0
			_radio.ext_advertiser.event = 0;
    5150:	bf38      	it	cc
    5152:	f884 3c6a 	strbcc.w	r3, [r4, #3178]	; 0xc6a
		chan_set(37 + chan);
    5156:	3025      	adds	r0, #37	; 0x25
}
    5158:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		chan_set(37 + chan);
    515c:	f7ff be0e 	b.w	4d7c <chan_set>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x06){
    5160:	2b06      	cmp	r3, #6
    5162:	d104      	bne.n	516e <adv_setup+0x1ae>
						offset = (_radio.ext_advertiser.chan_38 - _radio.ext_advertiser.slot );
    5164:	f8d4 0c74 	ldr.w	r0, [r4, #3188]	; 0xc74
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    5168:	1a80      	subs	r0, r0, r2
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    516a:	2100      	movs	r1, #0
    516c:	e77f      	b.n	506e <adv_setup+0xae>
					}else if((_radio.advertiser.chan_map_current & 0x07) == 0x04){
    516e:	2b04      	cmp	r3, #4
    5170:	f47f af7d 	bne.w	506e <adv_setup+0xae>
						offset = (_radio.ext_advertiser.chan_39 - _radio.ext_advertiser.slot );
    5174:	f8d4 0c78 	ldr.w	r0, [r4, #3192]	; 0xc78
    5178:	e7f6      	b.n	5168 <adv_setup+0x1a8>
					_radio.ext_advertiser.slot = ( _radio.ext_advertiser.prim_interval + _radio.ext_advertiser.ticker_offset ) * _radio.ext_advertiser.event;
    517a:	f894 6c6a 	ldrb.w	r6, [r4, #3178]	; 0xc6a
    517e:	4373      	muls	r3, r6
    5180:	f8c4 3c6c 	str.w	r3, [r4, #3180]	; 0xc6c
					if(_radio.ext_advertiser.event == 0){
    5184:	b926      	cbnz	r6, 5190 <adv_setup+0x1d0>
						start_dynamic_cal = k_cycle_get_32(); 
    5186:	f7fc fe63 	bl	1e50 <_timer_cycle_get_32>
    518a:	4b13      	ldr	r3, [pc, #76]	; (51d8 <adv_setup+0x218>)
    518c:	e883 0041 	stmia.w	r3, {r0, r6}
					offset = (_radio.ext_advertiser.chan_37 -  _radio.ext_advertiser.slot );
    5190:	f8d4 0c70 	ldr.w	r0, [r4, #3184]	; 0xc70
    5194:	f8d4 3c6c 	ldr.w	r3, [r4, #3180]	; 0xc6c
    5198:	1ac0      	subs	r0, r0, r3
    519a:	e7e6      	b.n	516a <adv_setup+0x1aa>
					ap->offs = offset /30;
    519c:	221e      	movs	r2, #30
    519e:	2300      	movs	r3, #0
    51a0:	f7fb f862 	bl	268 <__aeabi_uldivmod>
    51a4:	f026 061f 	bic.w	r6, r6, #31
    51a8:	7068      	strb	r0, [r5, #1]
    51aa:	f3c0 2004 	ubfx	r0, r0, #8, #5
    51ae:	4306      	orrs	r6, r0
    51b0:	70ae      	strb	r6, [r5, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    51b2:	f36f 18c7 	bfc	r8, #7, #1
    51b6:	e772      	b.n	509e <adv_setup+0xde>
			_radio.state = STATE_CLOSE;
    51b8:	2303      	movs	r3, #3
    51ba:	7523      	strb	r3, [r4, #20]
			radio_switch_complete_and_disable();
    51bc:	f004 fa8a 	bl	96d4 <radio_switch_complete_and_disable>
    51c0:	e799      	b.n	50f6 <adv_setup+0x136>
			bitmap >>= 1;
    51c2:	0849      	lsrs	r1, r1, #1
    51c4:	4628      	mov	r0, r5
    51c6:	e79d      	b.n	5104 <adv_setup+0x144>
    51c8:	20000380 	.word	0x20000380
    51cc:	0003bfc4 	.word	0x0003bfc4
    51d0:	200010f3 	.word	0x200010f3
    51d4:	200010f2 	.word	0x200010f2
    51d8:	20003480 	.word	0x20003480

000051dc <ext_adv_setup>:
{
    51dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.advertiser.adv_data.first !=
    51de:	4c59      	ldr	r4, [pc, #356]	; (5344 <ext_adv_setup+0x168>)
    51e0:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    51e4:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    51e8:	429a      	cmp	r2, r3
    51ea:	d006      	beq.n	51fa <ext_adv_setup+0x1e>
		first = _radio.advertiser.adv_data.first + 1;
    51ec:	3301      	adds	r3, #1
    51ee:	b2db      	uxtb	r3, r3
			first = 0;
    51f0:	2b02      	cmp	r3, #2
    51f2:	bf08      	it	eq
    51f4:	2300      	moveq	r3, #0
		_radio.advertiser.adv_data.first = first;
    51f6:	f884 322d 	strb.w	r3, [r4, #557]	; 0x22d
	if (_radio.advertiser.scan_data.first != _radio.
    51fa:	f894 3c13 	ldrb.w	r3, [r4, #3091]	; 0xc13
    51fe:	f894 2c14 	ldrb.w	r2, [r4, #3092]	; 0xc14
    5202:	429a      	cmp	r2, r3
    5204:	d006      	beq.n	5214 <ext_adv_setup+0x38>
		first = _radio.advertiser.scan_data.first + 1;
    5206:	3301      	adds	r3, #1
    5208:	b2db      	uxtb	r3, r3
			first = 0;
    520a:	2b02      	cmp	r3, #2
    520c:	bf08      	it	eq
    520e:	2300      	moveq	r3, #0
		_radio.advertiser.scan_data.first = first;
    5210:	f884 3c13 	strb.w	r3, [r4, #3091]	; 0xc13
	pdu = (void *)_radio.advertiser.adv_data.data
    5214:	f894 722d 	ldrb.w	r7, [r4, #557]	; 0x22d
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    5218:	f894 5432 	ldrb.w	r5, [r4, #1074]	; 0x432
	switch(_radio.ext_advertiser.aux_chain_count_current){
    521c:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
	pdu = (void *)_radio.advertiser.adv_data.data
    5220:	eb07 2707 	add.w	r7, r7, r7, lsl #8
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    5224:	eb05 2505 	add.w	r5, r5, r5, lsl #8
	pdu = (void *)_radio.advertiser.adv_data.data
    5228:	372b      	adds	r7, #43	; 0x2b
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    522a:	f205 252f 	addw	r5, r5, #559	; 0x22f
	pdu = (void *)_radio.advertiser.adv_data.data
    522e:	19e6      	adds	r6, r4, r7
	aux_pdu =  (struct pdu_adv *)&radio_aux_adv_data->data[radio_aux_adv_data->last][0]; 
    5230:	4425      	add	r5, r4
	switch(_radio.ext_advertiser.aux_chain_count_current){
    5232:	2b05      	cmp	r3, #5
    5234:	d80a      	bhi.n	524c <ext_adv_setup+0x70>
    5236:	e8df f003 	tbb	[pc, r3]
    523a:	4503      	.short	0x4503
    523c:	675f574f 	.word	0x675f574f
			memcpy(aux_pdu, copy_pdu, 257);
    5240:	f240 1201 	movw	r2, #257	; 0x101
    5244:	4940      	ldr	r1, [pc, #256]	; (5348 <ext_adv_setup+0x16c>)
    5246:	4628      	mov	r0, r5
    5248:	f7fb f9d6 	bl	5f8 <memcpy>
		if(pdu->type == PDU_ADV_TYPE_EXT_IND){
    524c:	5de3      	ldrb	r3, [r4, r7]
    524e:	f003 030f 	and.w	r3, r3, #15
    5252:	2b07      	cmp	r3, #7
    5254:	d11a      	bne.n	528c <ext_adv_setup+0xb0>
			if(h->adv_addr){
    5256:	78f2      	ldrb	r2, [r6, #3]
    5258:	07d3      	lsls	r3, r2, #31
				ptr += BDADDR_SIZE;
    525a:	bf4c      	ite	mi
    525c:	f106 030a 	addmi.w	r3, r6, #10
		ptr = (u8_t *)h + sizeof(*h);
    5260:	1d33      	addpl	r3, r6, #4
			if(h->tgt_addr){
    5262:	0790      	lsls	r0, r2, #30
				ptr += BDADDR_SIZE;
    5264:	bf48      	it	mi
    5266:	3306      	addmi	r3, #6
			if(h->adi){
    5268:	0711      	lsls	r1, r2, #28
				ptr += sizeof(*adi_ptr);
    526a:	bf48      	it	mi
    526c:	3302      	addmi	r3, #2
			if(h->aux_ptr){
    526e:	06d2      	lsls	r2, r2, #27
    5270:	d50c      	bpl.n	528c <ext_adv_setup+0xb0>
					ap->offs = offset /30;
    5272:	2206      	movs	r2, #6
    5274:	705a      	strb	r2, [r3, #1]
    5276:	789a      	ldrb	r2, [r3, #2]
    5278:	f022 021f 	bic.w	r2, r2, #31
    527c:	709a      	strb	r2, [r3, #2]
					ap->offs_units = EXT_ADV_AUX_PTR_OFFS_UNITS_30;
    527e:	781a      	ldrb	r2, [r3, #0]
				ap->chan_idx = 0x03;
    5280:	2103      	movs	r1, #3
    5282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5286:	f361 0205 	bfi	r2, r1, #0, #6
    528a:	701a      	strb	r2, [r3, #0]
			radio_pkt_tx_set(aux_pdu);
    528c:	4628      	mov	r0, r5
    528e:	f004 f991 	bl	95b4 <radio_pkt_tx_set>
			if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
    5292:	5de3      	ldrb	r3, [r4, r7]
    5294:	f003 030f 	and.w	r3, r3, #15
    5298:	2b02      	cmp	r3, #2
    529a:	d03d      	beq.n	5318 <ext_adv_setup+0x13c>
    529c:	2b07      	cmp	r3, #7
    529e:	d03b      	beq.n	5318 <ext_adv_setup+0x13c>
				_radio.state = STATE_TX;
    52a0:	2302      	movs	r3, #2
				radio_tmr_tifs_set(RADIO_TIFS);
    52a2:	2096      	movs	r0, #150	; 0x96
				_radio.state = STATE_TX;
    52a4:	7523      	strb	r3, [r4, #20]
				radio_tmr_tifs_set(RADIO_TIFS);
    52a6:	f004 fa8f 	bl	97c8 <radio_tmr_tifs_set>
				radio_switch_complete_and_rx(0);
    52aa:	2000      	movs	r0, #0
    52ac:	f004 f9fc 	bl	96a8 <radio_switch_complete_and_rx>
			_radio.ext_advertiser.current_slot = 0;			// for packets which are transmittedon primaty channels
    52b0:	2300      	movs	r3, #0
    52b2:	f884 3c69 	strb.w	r3, [r4, #3177]	; 0xc69
			_radio.ext_advertiser.event = 0;				// skip number of events before transmitting aux
    52b6:	f884 3c6a 	strb.w	r3, [r4, #3178]	; 0xc6a
			chan_set(03);
    52ba:	2003      	movs	r0, #3
}
    52bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			chan_set(03);
    52c0:	f7ff bd5c 	b.w	4d7c <chan_set>
			memcpy(aux_pdu, copy_pdu, 257);
    52c4:	f240 1201 	movw	r2, #257	; 0x101
    52c8:	4920      	ldr	r1, [pc, #128]	; (534c <ext_adv_setup+0x170>)
    52ca:	4628      	mov	r0, r5
    52cc:	f7fb f994 	bl	5f8 <memcpy>
			chan_set(1);
    52d0:	2001      	movs	r0, #1
			chan_set(5);
    52d2:	f7ff fd53 	bl	4d7c <chan_set>
			break;
    52d6:	e7b9      	b.n	524c <ext_adv_setup+0x70>
			memcpy(aux_pdu, copy_pdu, 257);
    52d8:	f240 1201 	movw	r2, #257	; 0x101
    52dc:	491c      	ldr	r1, [pc, #112]	; (5350 <ext_adv_setup+0x174>)
    52de:	4628      	mov	r0, r5
    52e0:	f7fb f98a 	bl	5f8 <memcpy>
			chan_set(2);
    52e4:	2002      	movs	r0, #2
    52e6:	e7f4      	b.n	52d2 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    52e8:	f240 1201 	movw	r2, #257	; 0x101
    52ec:	4919      	ldr	r1, [pc, #100]	; (5354 <ext_adv_setup+0x178>)
    52ee:	4628      	mov	r0, r5
    52f0:	f7fb f982 	bl	5f8 <memcpy>
			chan_set(3);
    52f4:	2003      	movs	r0, #3
    52f6:	e7ec      	b.n	52d2 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    52f8:	f240 1201 	movw	r2, #257	; 0x101
    52fc:	4916      	ldr	r1, [pc, #88]	; (5358 <ext_adv_setup+0x17c>)
    52fe:	4628      	mov	r0, r5
    5300:	f7fb f97a 	bl	5f8 <memcpy>
			chan_set(4);
    5304:	2004      	movs	r0, #4
    5306:	e7e4      	b.n	52d2 <ext_adv_setup+0xf6>
			memcpy(aux_pdu, copy_pdu, 257);
    5308:	f240 1201 	movw	r2, #257	; 0x101
    530c:	4913      	ldr	r1, [pc, #76]	; (535c <ext_adv_setup+0x180>)
    530e:	4628      	mov	r0, r5
    5310:	f7fb f972 	bl	5f8 <memcpy>
			chan_set(5);
    5314:	2005      	movs	r0, #5
    5316:	e7dc      	b.n	52d2 <ext_adv_setup+0xf6>
				chain_flag = 1;
    5318:	4a11      	ldr	r2, [pc, #68]	; (5360 <ext_adv_setup+0x184>)
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    531a:	f894 1c8c 	ldrb.w	r1, [r4, #3212]	; 0xc8c
				chain_flag = 1;
    531e:	2301      	movs	r3, #1
    5320:	7013      	strb	r3, [r2, #0]
				_radio.ext_advertiser.aux_chain_count_current++;
    5322:	f894 3c8d 	ldrb.w	r3, [r4, #3213]	; 0xc8d
    5326:	3301      	adds	r3, #1
    5328:	b2db      	uxtb	r3, r3
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    532a:	4299      	cmp	r1, r3
				_radio.ext_advertiser.aux_chain_count_current++;
    532c:	f884 3c8d 	strb.w	r3, [r4, #3213]	; 0xc8d
				if( _radio.ext_advertiser.aux_chain_count == _radio.ext_advertiser.aux_chain_count_current ){
    5330:	d1b6      	bne.n	52a0 <ext_adv_setup+0xc4>
					_radio.advertiser.ext_adv = 1;
    5332:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    5336:	f043 0301 	orr.w	r3, r3, #1
    533a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
					chain_flag = 0;
    533e:	2300      	movs	r3, #0
    5340:	7013      	strb	r3, [r2, #0]
    5342:	e7ad      	b.n	52a0 <ext_adv_setup+0xc4>
    5344:	20000380 	.word	0x20000380
    5348:	200007b3 	.word	0x200007b3
    534c:	200008b4 	.word	0x200008b4
    5350:	200009b5 	.word	0x200009b5
    5354:	20000ab6 	.word	0x20000ab6
    5358:	20000bb7 	.word	0x20000bb7
    535c:	20000cb8 	.word	0x20000cb8
    5360:	200010f1 	.word	0x200010f1
    5364:	00000000 	.word	0x00000000

00005368 <sched_after_mstr_free_slot_get>:
{
    5368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    536c:	b08b      	sub	sp, #44	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    536e:	2400      	movs	r4, #0
	ticker_id = ticker_id_prev = 0xff;
    5370:	25ff      	movs	r5, #255	; 0xff
				  _radio.connection_count)) {
    5372:	f8df 9114 	ldr.w	r9, [pc, #276]	; 5488 <sched_after_mstr_free_slot_get+0x120>
	ticker_id = ticker_id_prev = 0xff;
    5376:	f88d 501f 	strb.w	r5, [sp, #31]
{
    537a:	4680      	mov	r8, r0
    537c:	4693      	mov	fp, r2
    537e:	461f      	mov	r7, r3
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 3);
    5380:	f101 0a04 	add.w	sl, r1, #4
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    5384:	601c      	str	r4, [r3, #0]
    5386:	9408      	str	r4, [sp, #32]
    5388:	4626      	mov	r6, r4
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    538a:	2302      	movs	r3, #2
    538c:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    538e:	ab09      	add	r3, sp, #36	; 0x24
    5390:	9302      	str	r3, [sp, #8]
    5392:	4b3b      	ldr	r3, [pc, #236]	; (5480 <sched_after_mstr_free_slot_get+0x118>)
    5394:	9301      	str	r3, [sp, #4]
    5396:	ab08      	add	r3, sp, #32
    5398:	9300      	str	r3, [sp, #0]
    539a:	f10d 021f 	add.w	r2, sp, #31
    539e:	465b      	mov	r3, fp
    53a0:	4641      	mov	r1, r8
    53a2:	2000      	movs	r0, #0
    53a4:	f7fe fb7e 	bl	3aa4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    53a8:	2802      	cmp	r0, #2
    53aa:	d00b      	beq.n	53c4 <sched_after_mstr_free_slot_get+0x5c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    53ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    53ae:	b16b      	cbz	r3, 53cc <sched_after_mstr_free_slot_get+0x64>
    53b0:	4040      	eors	r0, r0
    53b2:	f380 8811 	msr	BASEPRI, r0
    53b6:	f04f 0004 	mov.w	r0, #4
    53ba:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    53bc:	4641      	mov	r1, r8
    53be:	2000      	movs	r0, #0
    53c0:	f7fe fbee 	bl	3ba0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    53c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    53c6:	2b02      	cmp	r3, #2
    53c8:	d0f8      	beq.n	53bc <sched_after_mstr_free_slot_get+0x54>
    53ca:	e7ef      	b.n	53ac <sched_after_mstr_free_slot_get+0x44>
		if (ticker_id == 0xff) {
    53cc:	f89d 201f 	ldrb.w	r2, [sp, #31]
    53d0:	2aff      	cmp	r2, #255	; 0xff
    53d2:	d04e      	beq.n	5472 <sched_after_mstr_free_slot_get+0x10a>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    53d4:	2a06      	cmp	r2, #6
    53d6:	d9d8      	bls.n	538a <sched_after_mstr_free_slot_get+0x22>
				  _radio.connection_count)) {
    53d8:	f899 3cf8 	ldrb.w	r3, [r9, #3320]	; 0xcf8
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    53dc:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
    53de:	429a      	cmp	r2, r3
    53e0:	dad3      	bge.n	538a <sched_after_mstr_free_slot_get+0x22>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    53e2:	3a07      	subs	r2, #7
    53e4:	b292      	uxth	r2, r2
    53e6:	f44f 7182 	mov.w	r1, #260	; 0x104
    53ea:	f8d9 0cf0 	ldr.w	r0, [r9, #3312]	; 0xcf0
    53ee:	f7fd fc4b 	bl	2c88 <mem_get>
		if (conn && !conn->role) {
    53f2:	2800      	cmp	r0, #0
    53f4:	d0c9      	beq.n	538a <sched_after_mstr_free_slot_get+0x22>
    53f6:	f990 301d 	ldrsb.w	r3, [r0, #29]
    53fa:	2b00      	cmp	r3, #0
    53fc:	dbc5      	blt.n	538a <sched_after_mstr_free_slot_get+0x22>
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    53fe:	6803      	ldr	r3, [r0, #0]
			u32_t ticks_to_expire_normal = ticks_to_expire;
    5400:	9a08      	ldr	r2, [sp, #32]
    5402:	f8d0 e004 	ldr.w	lr, [r0, #4]
			if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    5406:	2b00      	cmp	r3, #0
    5408:	da12      	bge.n	5430 <sched_after_mstr_free_slot_get+0xc8>
    540a:	6881      	ldr	r1, [r0, #8]
				ticks_slot_abs_curr =
    540c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5410:	4571      	cmp	r1, lr
    5412:	bf2c      	ite	cs
    5414:	1852      	addcs	r2, r2, r1
    5416:	4472      	addcc	r2, lr
				ticks_to_expire_normal -=
    5418:	1ad2      	subs	r2, r2, r3
			ticks_slot_abs_curr +=
    541a:	68c1      	ldr	r1, [r0, #12]
			if ((ticker_id_prev != 0xFF) &&
    541c:	2dff      	cmp	r5, #255	; 0xff
			ticks_slot_abs_curr +=
    541e:	f101 0104 	add.w	r1, r1, #4
    5422:	440b      	add	r3, r1
			if ((ticker_id_prev != 0xFF) &&
    5424:	d108      	bne.n	5438 <sched_after_mstr_free_slot_get+0xd0>
			ticker_id_prev = ticker_id;
    5426:	f89d 501f 	ldrb.w	r5, [sp, #31]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    542a:	461c      	mov	r4, r3
			ticks_to_expire_prev = ticks_to_expire_normal;
    542c:	4616      	mov	r6, r2
    542e:	e7ac      	b.n	538a <sched_after_mstr_free_slot_get+0x22>
				u32_t ticks_prepare_to_start =
    5430:	4573      	cmp	r3, lr
    5432:	bf38      	it	cc
    5434:	4673      	movcc	r3, lr
    5436:	e7f0      	b.n	541a <sched_after_mstr_free_slot_get+0xb2>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    5438:	4631      	mov	r1, r6
    543a:	4610      	mov	r0, r2
    543c:	9305      	str	r3, [sp, #20]
    543e:	9204      	str	r2, [sp, #16]
    5440:	f7fe fbc6 	bl	3bd0 <ticker_ticks_diff_get>
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    5444:	eb04 010a 	add.w	r1, r4, sl
			if ((ticker_id_prev != 0xFF) &&
    5448:	4288      	cmp	r0, r1
    544a:	9a04      	ldr	r2, [sp, #16]
    544c:	9b05      	ldr	r3, [sp, #20]
    544e:	d9ea      	bls.n	5426 <sched_after_mstr_free_slot_get+0xbe>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5450:	480c      	ldr	r0, [pc, #48]	; (5484 <sched_after_mstr_free_slot_get+0x11c>)
    5452:	4434      	add	r4, r6
    5454:	fba4 0100 	umull	r0, r1, r4, r0
    5458:	2307      	movs	r3, #7
    545a:	fb03 1104 	mla	r1, r3, r4, r1
    545e:	a306      	add	r3, pc, #24	; (adr r3, 5478 <sched_after_mstr_free_slot_get+0x110>)
    5460:	e9d3 2300 	ldrd	r2, r3, [r3]
    5464:	f7fa ff00 	bl	268 <__aeabi_uldivmod>
						    ticks_slot_abs_prev) +
    5468:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    546a:	6038      	str	r0, [r7, #0]
}
    546c:	b00b      	add	sp, #44	; 0x2c
    546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticker_id_prev != 0xff) {
    5472:	2dff      	cmp	r5, #255	; 0xff
    5474:	d1ec      	bne.n	5450 <sched_after_mstr_free_slot_get+0xe8>
    5476:	e7f9      	b.n	546c <sched_after_mstr_free_slot_get+0x104>
    5478:	3b9aca00 	.word	0x3b9aca00
    547c:	00000000 	.word	0x00000000
    5480:	000049d5 	.word	0x000049d5
    5484:	1afd498d 	.word	0x1afd498d
    5488:	20000380 	.word	0x20000380

0000548c <isr_adv_ci_adva_check>:
{
    548c:	b570      	push	{r4, r5, r6, lr}
	return (adv->tx_addr == ci->rx_addr) &&
    548e:	7804      	ldrb	r4, [r0, #0]
    5490:	780a      	ldrb	r2, [r1, #0]
    5492:	f3c4 1380 	ubfx	r3, r4, #6, #1
    5496:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    549a:	d119      	bne.n	54d0 <isr_adv_ci_adva_check+0x44>
    549c:	f004 040f 	and.w	r4, r4, #15
    54a0:	2c01      	cmp	r4, #1
    54a2:	f101 0608 	add.w	r6, r1, #8
    54a6:	f100 0502 	add.w	r5, r0, #2
    54aa:	d008      	beq.n	54be <isr_adv_ci_adva_check+0x32>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
    54ac:	2206      	movs	r2, #6
    54ae:	4631      	mov	r1, r6
    54b0:	4628      	mov	r0, r5
    54b2:	f7fb f88c 	bl	5ce <memcmp>
			 BDADDR_SIZE)) ||
    54b6:	fab0 f080 	clz	r0, r0
    54ba:	0940      	lsrs	r0, r0, #5
    54bc:	bd70      	pop	{r4, r5, r6, pc}
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
    54be:	2206      	movs	r2, #6
    54c0:	4631      	mov	r1, r6
    54c2:	4628      	mov	r0, r5
    54c4:	f7fb f883 	bl	5ce <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
    54c8:	2800      	cmp	r0, #0
    54ca:	d1ef      	bne.n	54ac <isr_adv_ci_adva_check+0x20>
	return (adv->tx_addr == ci->rx_addr) &&
    54cc:	4620      	mov	r0, r4
    54ce:	bd70      	pop	{r4, r5, r6, pc}
    54d0:	2000      	movs	r0, #0
}
    54d2:	bd70      	pop	{r4, r5, r6, pc}

000054d4 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
    54d4:	4a0b      	ldr	r2, [pc, #44]	; (5504 <rx_fc_lock+0x30>)
    54d6:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    54da:	f892 1d61 	ldrb.w	r1, [r2, #3425]	; 0xd61
    54de:	4299      	cmp	r1, r3
    54e0:	d10e      	bne.n	5500 <rx_fc_lock+0x2c>
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    54e2:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    54e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    54ea:	f8a3 0d5a 	strh.w	r0, [r3, #3418]	; 0xd5a
		req = _radio.fc_req + 1;
    54ee:	f892 3d60 	ldrb.w	r3, [r2, #3424]	; 0xd60
    54f2:	3301      	adds	r3, #1
    54f4:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    54f6:	2b03      	cmp	r3, #3
    54f8:	bf08      	it	eq
    54fa:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    54fc:	f882 3d60 	strb.w	r3, [r2, #3424]	; 0xd60
    5500:	4770      	bx	lr
    5502:	bf00      	nop
    5504:	20000380 	.word	0x20000380

00005508 <ticker_job_disable>:
	if (_radio.state != STATE_NONE) {
    5508:	4b04      	ldr	r3, [pc, #16]	; (551c <ticker_job_disable+0x14>)
    550a:	7d1b      	ldrb	r3, [r3, #20]
    550c:	b123      	cbz	r3, 5518 <ticker_job_disable+0x10>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    550e:	2101      	movs	r1, #1
    5510:	2200      	movs	r2, #0
    5512:	4608      	mov	r0, r1
    5514:	f7fd bc1a 	b.w	2d4c <mayfly_enable>
    5518:	4770      	bx	lr
    551a:	bf00      	nop
    551c:	20000380 	.word	0x20000380

00005520 <hdr_conn_get>:
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5520:	2806      	cmp	r0, #6
{
    5522:	b510      	push	{r4, lr}
    5524:	460c      	mov	r4, r1
	if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    5526:	d90a      	bls.n	553e <hdr_conn_get+0x1e>
		*conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5528:	4b09      	ldr	r3, [pc, #36]	; (5550 <hdr_conn_get+0x30>)
    552a:	1fc2      	subs	r2, r0, #7
    552c:	b292      	uxth	r2, r2
    552e:	f44f 7182 	mov.w	r1, #260	; 0x104
    5532:	f8d3 0cf0 	ldr.w	r0, [r3, #3312]	; 0xcf0
    5536:	f7fd fba7 	bl	2c88 <mem_get>
    553a:	6020      	str	r0, [r4, #0]
    553c:	bd10      	pop	{r4, pc}
	} else if (ticker_id == RADIO_TICKER_ID_ADV) {
    553e:	2805      	cmp	r0, #5
    5540:	d004      	beq.n	554c <hdr_conn_get+0x2c>
	} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
    5542:	2806      	cmp	r0, #6
	return NULL;
    5544:	4803      	ldr	r0, [pc, #12]	; (5554 <hdr_conn_get+0x34>)
    5546:	bf18      	it	ne
    5548:	2000      	movne	r0, #0
    554a:	bd10      	pop	{r4, pc}
		return &_radio.advertiser.hdr;
    554c:	4802      	ldr	r0, [pc, #8]	; (5558 <hdr_conn_get+0x38>)
}
    554e:	bd10      	pop	{r4, pc}
    5550:	20000380 	.word	0x20000380
    5554:	20000f9c 	.word	0x20000f9c
    5558:	20000398 	.word	0x20000398

0000555c <mayfly_xtal_retain.part.16>:
static void mayfly_xtal_retain(u8_t caller_id, u8_t retain)
    555c:	b508      	push	{r3, lr}
			s_xtal_retained = 0;
    555e:	4b0a      	ldr	r3, [pc, #40]	; (5588 <mayfly_xtal_retain.part.16+0x2c>)
    5560:	2200      	movs	r2, #0
    5562:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
    5564:	b168      	cbz	r0, 5582 <mayfly_xtal_retain.part.16+0x26>
    5566:	2801      	cmp	r0, #1
    5568:	d105      	bne.n	5576 <mayfly_xtal_retain.part.16+0x1a>
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
    556a:	4b08      	ldr	r3, [pc, #32]	; (558c <mayfly_xtal_retain.part.16+0x30>)
			retval = mayfly_enqueue(caller_id,
    556c:	2200      	movs	r2, #0
    556e:	4611      	mov	r1, r2
    5570:	f7fd fc14 	bl	2d9c <mayfly_enqueue>
			LL_ASSERT(!retval);
    5574:	b138      	cbz	r0, 5586 <mayfly_xtal_retain.part.16+0x2a>
    5576:	4040      	eors	r0, r0
    5578:	f380 8811 	msr	BASEPRI, r0
    557c:	f04f 0004 	mov.w	r0, #4
    5580:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
    5582:	4b03      	ldr	r3, [pc, #12]	; (5590 <mayfly_xtal_retain.part.16+0x34>)
    5584:	e7f2      	b.n	556c <mayfly_xtal_retain.part.16+0x10>
    5586:	bd08      	pop	{r3, pc}
    5588:	20001174 	.word	0x20001174
    558c:	20006170 	.word	0x20006170
    5590:	20006160 	.word	0x20006160

00005594 <rx_packet_set>:
{
    5594:	b538      	push	{r3, r4, r5, lr}
    5596:	4605      	mov	r5, r0
    5598:	460c      	mov	r4, r1
	radio_phy_set(phy, 0);
    559a:	2100      	movs	r1, #0
    559c:	4608      	mov	r0, r1
    559e:	f003 ff8f 	bl	94c0 <radio_phy_set>
	if (conn->enc_rx) {
    55a2:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    55a6:	06db      	lsls	r3, r3, #27
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    55a8:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_rx) {
    55ac:	d50d      	bpl.n	55ca <rx_packet_set+0x36>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
    55ae:	211f      	movs	r1, #31
    55b0:	2008      	movs	r0, #8
    55b2:	f003 ffcb 	bl	954c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
    55b6:	4622      	mov	r2, r4
    55b8:	2100      	movs	r1, #0
    55ba:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
    55be:	f004 f9fd 	bl	99bc <radio_ccm_rx_pkt_set>
}
    55c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_rx_set(pdu_data_rx);
    55c6:	f003 bfef 	b.w	95a8 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
    55ca:	2008      	movs	r0, #8
    55cc:	211b      	movs	r1, #27
    55ce:	f003 ffbd 	bl	954c <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
    55d2:	4620      	mov	r0, r4
    55d4:	e7f5      	b.n	55c2 <rx_packet_set+0x2e>

000055d6 <tx_packet_set>:
{
    55d6:	b538      	push	{r3, r4, r5, lr}
    55d8:	4605      	mov	r5, r0
    55da:	460c      	mov	r4, r1
	radio_phy_set(phy, flags);
    55dc:	2100      	movs	r1, #0
    55de:	4608      	mov	r0, r1
    55e0:	f003 ff6e 	bl	94c0 <radio_phy_set>
	if (conn->enc_tx) {
    55e4:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
    55e8:	069b      	lsls	r3, r3, #26
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    55ea:	f04f 0201 	mov.w	r2, #1
	if (conn->enc_tx) {
    55ee:	d50c      	bpl.n	560a <tx_packet_set+0x34>
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
    55f0:	211f      	movs	r1, #31
    55f2:	2008      	movs	r0, #8
    55f4:	f003 ffaa 	bl	954c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    55f8:	4621      	mov	r1, r4
    55fa:	f105 00ca 	add.w	r0, r5, #202	; 0xca
    55fe:	f004 fa19 	bl	9a34 <radio_ccm_tx_pkt_set>
}
    5602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_pkt_tx_set(pdu_data_tx);
    5606:	f003 bfd5 	b.w	95b4 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
    560a:	2008      	movs	r0, #8
    560c:	211b      	movs	r1, #27
    560e:	f003 ff9d 	bl	954c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
    5612:	4620      	mov	r0, r4
    5614:	e7f5      	b.n	5602 <tx_packet_set+0x2c>
	...

00005618 <isr_scan_tgta_check.isra.30>:
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    5618:	b570      	push	{r4, r5, r6, lr}
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    561a:	4c16      	ldr	r4, [pc, #88]	; (5674 <isr_scan_tgta_check.isra.30+0x5c>)
    561c:	7803      	ldrb	r3, [r0, #0]
    561e:	f894 2c2d 	ldrb.w	r2, [r4, #3117]	; 0xc2d
			BDADDR_SIZE) == 0))) ||
    5622:	09db      	lsrs	r3, r3, #7
    5624:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
static inline bool isr_scan_tgta_check(bool init, struct pdu_adv *pdu,
    5628:	4605      	mov	r5, r0
    562a:	460e      	mov	r6, r1
			BDADDR_SIZE) == 0))) ||
    562c:	d007      	beq.n	563e <isr_scan_tgta_check.isra.30+0x26>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    562e:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
    5632:	f3c0 1001 	ubfx	r0, r0, #4, #2
    5636:	f010 0002 	ands.w	r0, r0, #2
    563a:	d10b      	bne.n	5654 <isr_scan_tgta_check.isra.30+0x3c>
    563c:	bd70      	pop	{r4, r5, r6, pc}
		(memcmp(&_radio.scanner.init_addr[0],
    563e:	f100 0108 	add.w	r1, r0, #8
    5642:	2206      	movs	r2, #6
    5644:	f604 402e 	addw	r0, r4, #3118	; 0xc2e
    5648:	f7fa ffc1 	bl	5ce <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
    564c:	2800      	cmp	r0, #0
    564e:	d1ee      	bne.n	562e <isr_scan_tgta_check.isra.30+0x16>
			BDADDR_SIZE) == 0))) ||
    5650:	2001      	movs	r0, #1
    5652:	bd70      	pop	{r4, r5, r6, pc}
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
    5654:	f995 3000 	ldrsb.w	r3, [r5]
    5658:	2b00      	cmp	r3, #0
    565a:	da09      	bge.n	5670 <isr_scan_tgta_check.isra.30+0x58>
	    (pdu->rx_addr != 0) &&
    565c:	7b6b      	ldrb	r3, [r5, #13]
    565e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5662:	2b40      	cmp	r3, #64	; 0x40
    5664:	d104      	bne.n	5670 <isr_scan_tgta_check.isra.30+0x58>
		if (dir_report) {
    5666:	2e00      	cmp	r6, #0
    5668:	d0f2      	beq.n	5650 <isr_scan_tgta_check.isra.30+0x38>
			*dir_report = true;
    566a:	2001      	movs	r0, #1
    566c:	7030      	strb	r0, [r6, #0]
    566e:	bd70      	pop	{r4, r5, r6, pc}
			BDADDR_SIZE) == 0))) ||
    5670:	2000      	movs	r0, #0
}
    5672:	bd70      	pop	{r4, r5, r6, pc}
    5674:	20000380 	.word	0x20000380

00005678 <event_active.part.17>:
	LL_ASSERT(!_radio.ticker_id_prepare);
    5678:	4040      	eors	r0, r0
    567a:	f380 8811 	msr	BASEPRI, r0
    567e:	f04f 0004 	mov.w	r0, #4
    5682:	df02      	svc	2

00005684 <prepare_normal_set>:
{
    5684:	b530      	push	{r4, r5, lr}
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    5686:	6804      	ldr	r4, [r0, #0]
    5688:	2c00      	cmp	r4, #0
{
    568a:	b089      	sub	sp, #36	; 0x24
	if (hdr->ticks_xtal_to_start & XON_BITMASK) {
    568c:	da19      	bge.n	56c2 <prepare_normal_set+0x3e>
		u32_t ticks_prepare_to_start =
    568e:	6843      	ldr	r3, [r0, #4]
    5690:	6885      	ldr	r5, [r0, #8]
		ticker_status =
    5692:	9006      	str	r0, [sp, #24]
		u32_t ticks_drift_minus = (hdr->ticks_xtal_to_start &
    5694:	429d      	cmp	r5, r3
    5696:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    569a:	bf34      	ite	cc
    569c:	1ae4      	subcc	r4, r4, r3
    569e:	1b64      	subcs	r4, r4, r5
		ticker_status =
    56a0:	4b09      	ldr	r3, [pc, #36]	; (56c8 <prepare_normal_set+0x44>)
    56a2:	9305      	str	r3, [sp, #20]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    56a4:	b2a4      	uxth	r4, r4
		ticker_status =
    56a6:	2300      	movs	r3, #0
    56a8:	9304      	str	r3, [sp, #16]
    56aa:	9303      	str	r3, [sp, #12]
    56ac:	9302      	str	r3, [sp, #8]
    56ae:	4618      	mov	r0, r3
    56b0:	9401      	str	r4, [sp, #4]
    56b2:	9400      	str	r4, [sp, #0]
    56b4:	f7fe f96c 	bl	3990 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    56b8:	f030 0302 	bics.w	r3, r0, #2
    56bc:	d001      	beq.n	56c2 <prepare_normal_set+0x3e>
    56be:	f7ff ffdb 	bl	5678 <event_active.part.17>
}
    56c2:	b009      	add	sp, #36	; 0x24
    56c4:	bd30      	pop	{r4, r5, pc}
    56c6:	bf00      	nop
    56c8:	000049e5 	.word	0x000049e5
    56cc:	00000000 	.word	0x00000000

000056d0 <scan_ticker_enable>:
static void scan_ticker_enable (void){
    56d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    56d4:	4f2c      	ldr	r7, [pc, #176]	; (5788 <scan_ticker_enable+0xb8>)
static void scan_ticker_enable (void){
    56d6:	b08a      	sub	sp, #40	; 0x28
	ticks_anchor = ticker_ticks_now_get();
    56d8:	f7fe fa78 	bl	3bcc <ticker_ticks_now_get>
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    56dc:	f8d7 8c40 	ldr.w	r8, [r7, #3136]	; 0xc40
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    56e0:	4b2a      	ldr	r3, [pc, #168]	; (578c <scan_ticker_enable+0xbc>)
    56e2:	f240 2471 	movw	r4, #625	; 0x271
    56e6:	fb04 f408 	mul.w	r4, r4, r8
    56ea:	fba4 4503 	umull	r4, r5, r4, r3
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    56ee:	f642 63ed 	movw	r3, #12013	; 0x2eed
    56f2:	9308      	str	r3, [sp, #32]
    56f4:	4b26      	ldr	r3, [pc, #152]	; (5790 <scan_ticker_enable+0xc0>)
    56f6:	9307      	str	r3, [sp, #28]
    56f8:	2600      	movs	r6, #0
    56fa:	4b26      	ldr	r3, [pc, #152]	; (5794 <scan_ticker_enable+0xc4>)
    56fc:	9606      	str	r6, [sp, #24]
    56fe:	9305      	str	r3, [sp, #20]
    5700:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
    5704:	f8d7 3c44 	ldr.w	r3, [r7, #3140]	; 0xc44
    5708:	9603      	str	r6, [sp, #12]
    570a:	4413      	add	r3, r2
    570c:	9304      	str	r3, [sp, #16]
			HAL_TICKER_REMAINDER((u64_t) (_radio.scanner.interval * 625)),
    570e:	4620      	mov	r0, r4
    5710:	a31b      	add	r3, pc, #108	; (adr r3, 5780 <scan_ticker_enable+0xb0>)
    5712:	e9d3 2300 	ldrd	r2, r3, [r3]
    5716:	4629      	mov	r1, r5
    5718:	f7fa fda6 	bl	268 <__aeabi_uldivmod>
    571c:	4a1e      	ldr	r2, [pc, #120]	; (5798 <scan_ticker_enable+0xc8>)
    571e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5722:	2307      	movs	r3, #7
    5724:	2100      	movs	r1, #0
    5726:	4343      	muls	r3, r0
    5728:	fb02 3301 	mla	r3, r2, r1, r3
    572c:	fba0 0102 	umull	r0, r1, r0, r2
    5730:	1a20      	subs	r0, r4, r0
    5732:	4419      	add	r1, r3
    5734:	eb65 0101 	sbc.w	r1, r5, r1
    5738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    573c:	2300      	movs	r3, #0
    573e:	f7fa fd93 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    5742:	9002      	str	r0, [sp, #8]
			HAL_TICKER_US_TO_TICKS((u64_t) _radio.scanner.interval * 625),
    5744:	4815      	ldr	r0, [pc, #84]	; (579c <scan_ticker_enable+0xcc>)
    5746:	2391      	movs	r3, #145	; 0x91
    5748:	fba8 0100 	umull	r0, r1, r8, r0
    574c:	fb03 1108 	mla	r1, r3, r8, r1
    5750:	a30b      	add	r3, pc, #44	; (adr r3, 5780 <scan_ticker_enable+0xb0>)
    5752:	e9d3 2300 	ldrd	r2, r3, [r3]
    5756:	f7fa fd87 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    575a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    575e:	9001      	str	r0, [sp, #4]
    5760:	9600      	str	r6, [sp, #0]
    5762:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
    5766:	2206      	movs	r2, #6
    5768:	4631      	mov	r1, r6
    576a:	4630      	mov	r0, r6
    576c:	f7fe f8c0 	bl	38f0 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    5770:	f030 0302 	bics.w	r3, r0, #2
    5774:	d001      	beq.n	577a <scan_ticker_enable+0xaa>
    5776:	f7ff ff7f 	bl	5678 <event_active.part.17>
}
    577a:	b00a      	add	sp, #40	; 0x28
    577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5780:	1afd498d 	.word	0x1afd498d
    5784:	00000007 	.word	0x00000007
    5788:	20000380 	.word	0x20000380
    578c:	3b9aca00 	.word	0x3b9aca00
    5790:	00005c65 	.word	0x00005c65
    5794:	00005ec1 	.word	0x00005ec1
    5798:	1afd498d 	.word	0x1afd498d
    579c:	84e72a00 	.word	0x84e72a00

000057a0 <aux_packet_function>:
scan_ticker_enable();	
    57a0:	f7ff bf96 	b.w	56d0 <scan_ticker_enable>

000057a4 <terminate_ind_rx_enqueue>:
{
    57a4:	b510      	push	{r4, lr}
    57a6:	4603      	mov	r3, r0
    57a8:	460a      	mov	r2, r1
	node_rx = (void *)&conn->llcp_terminate.radio_pdu_node_rx;
    57aa:	f100 019c 	add.w	r1, r0, #156	; 0x9c
	LL_ASSERT(node_rx->hdr.onion.link);
    57ae:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
    57b2:	b908      	cbnz	r0, 57b8 <terminate_ind_rx_enqueue+0x14>
    57b4:	f7ff ff60 	bl	5678 <event_active.part.17>
	node_rx->hdr.handle = conn->handle;
    57b8:	8c1c      	ldrh	r4, [r3, #32]
    57ba:	f8a3 40a2 	strh.w	r4, [r3, #162]	; 0xa2
	*((u8_t *)node_rx->pdu_data) = reason;
    57be:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    57c2:	2407      	movs	r4, #7
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    57c4:	4a0a      	ldr	r2, [pc, #40]	; (57f0 <terminate_ind_rx_enqueue+0x4c>)
	node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    57c6:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    57ca:	f892 4d58 	ldrb.w	r4, [r2, #3416]	; 0xd58
    57ce:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    57d2:	f502 6253 	add.w	r2, r2, #3376	; 0xd30
    57d6:	f7fd fa71 	bl	2cbc <memq_enqueue>
	LL_ASSERT(link);
    57da:	b928      	cbnz	r0, 57e8 <terminate_ind_rx_enqueue+0x44>
    57dc:	4040      	eors	r0, r0
    57de:	f380 8811 	msr	BASEPRI, r0
    57e2:	f04f 0004 	mov.w	r0, #4
    57e6:	df02      	svc	2
}
    57e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    57ec:	f003 bb7e 	b.w	8eec <radio_event_callback>
    57f0:	20000380 	.word	0x20000380

000057f4 <packet_rx_enqueue>:
{
    57f4:	b510      	push	{r4, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    57f6:	4a16      	ldr	r2, [pc, #88]	; (5850 <packet_rx_enqueue+0x5c>)
    57f8:	f892 3d21 	ldrb.w	r3, [r2, #3361]	; 0xd21
    57fc:	f892 1d22 	ldrb.w	r1, [r2, #3362]	; 0xd22
    5800:	4299      	cmp	r1, r3
    5802:	d101      	bne.n	5808 <packet_rx_enqueue+0x14>
    5804:	f7ff ff38 	bl	5678 <event_active.part.17>
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    5808:	f892 1d21 	ldrb.w	r1, [r2, #3361]	; 0xd21
    580c:	f8d2 3d1c 	ldr.w	r3, [r2, #3356]	; 0xd1c
    5810:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    5814:	f892 3d58 	ldrb.w	r3, [r2, #3416]	; 0xd58
	link = node_rx->hdr.onion.link;
    5818:	6808      	ldr	r0, [r1, #0]
	node_rx->hdr.onion.packet_release_last = _radio.packet_release_last;
    581a:	700b      	strb	r3, [r1, #0]
	last = _radio.packet_rx_last + 1;
    581c:	f892 3d21 	ldrb.w	r3, [r2, #3361]	; 0xd21
	if (last == _radio.packet_rx_count) {
    5820:	f892 4d20 	ldrb.w	r4, [r2, #3360]	; 0xd20
	last = _radio.packet_rx_last + 1;
    5824:	3301      	adds	r3, #1
    5826:	b2db      	uxtb	r3, r3
		last = 0;
    5828:	429c      	cmp	r4, r3
    582a:	bf08      	it	eq
    582c:	2300      	moveq	r3, #0
	_radio.packet_rx_last = last;
    582e:	f882 3d21 	strb.w	r3, [r2, #3361]	; 0xd21
	link = memq_enqueue(link, node_rx, (void *)&_radio.link_rx_tail);
    5832:	f502 6253 	add.w	r2, r2, #3376	; 0xd30
    5836:	f7fd fa41 	bl	2cbc <memq_enqueue>
	LL_ASSERT(link);
    583a:	b928      	cbnz	r0, 5848 <packet_rx_enqueue+0x54>
    583c:	4040      	eors	r0, r0
    583e:	f380 8811 	msr	BASEPRI, r0
    5842:	f04f 0004 	mov.w	r0, #4
    5846:	df02      	svc	2
}
    5848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_event_callback();
    584c:	f003 bb4e 	b.w	8eec <radio_event_callback>
    5850:	20000380 	.word	0x20000380
    5854:	00000000 	.word	0x00000000

00005858 <sched_after_mstr_free_offset_get>:
{
    5858:	b573      	push	{r0, r1, r4, r5, r6, lr}
    585a:	4616      	mov	r6, r2
	u32_t ticks_anchor_offset = ticks_anchor;
    585c:	aa02      	add	r2, sp, #8
{
    585e:	461c      	mov	r4, r3
    5860:	4605      	mov	r5, r0
	u32_t ticks_anchor_offset = ticks_anchor;
    5862:	f842 6d04 	str.w	r6, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    5866:	3127      	adds	r1, #39	; 0x27
    5868:	2001      	movs	r0, #1
    586a:	f7ff fd7d 	bl	5368 <sched_after_mstr_free_slot_get>
	if (!*win_offset_us) {
    586e:	6823      	ldr	r3, [r4, #0]
    5870:	b1fb      	cbz	r3, 58b2 <sched_after_mstr_free_offset_get+0x5a>
	LL_ASSERT(!((ticks_anchor_offset - ticks_anchor) &
    5872:	9801      	ldr	r0, [sp, #4]
    5874:	1b83      	subs	r3, r0, r6
    5876:	021b      	lsls	r3, r3, #8
    5878:	d501      	bpl.n	587e <sched_after_mstr_free_offset_get+0x26>
    587a:	f7ff fefd 	bl	5678 <event_active.part.17>
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    587e:	4631      	mov	r1, r6
    5880:	f7fe f9a6 	bl	3bd0 <ticker_ticks_diff_get>
    5884:	4602      	mov	r2, r0
    5886:	4810      	ldr	r0, [pc, #64]	; (58c8 <sched_after_mstr_free_offset_get+0x70>)
    5888:	2307      	movs	r3, #7
    588a:	fba2 0100 	umull	r0, r1, r2, r0
    588e:	fb03 1102 	mla	r1, r3, r2, r1
    5892:	a30b      	add	r3, pc, #44	; (adr r3, 58c0 <sched_after_mstr_free_offset_get+0x68>)
    5894:	e9d3 2300 	ldrd	r2, r3, [r3]
    5898:	f7fa fce6 	bl	268 <__aeabi_uldivmod>
    589c:	6823      	ldr	r3, [r4, #0]
    589e:	4418      	add	r0, r3
	if ((*win_offset_us & BIT(31)) == 0) {
    58a0:	2800      	cmp	r0, #0
	*win_offset_us += HAL_TICKER_TICKS_TO_US(
    58a2:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
    58a4:	db05      	blt.n	58b2 <sched_after_mstr_free_offset_get+0x5a>
		u32_t conn_interval_us = conn_interval * 1250;
    58a6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    58aa:	4368      	muls	r0, r5
		while (*win_offset_us > conn_interval_us) {
    58ac:	6823      	ldr	r3, [r4, #0]
    58ae:	4298      	cmp	r0, r3
    58b0:	d301      	bcc.n	58b6 <sched_after_mstr_free_offset_get+0x5e>
}
    58b2:	b002      	add	sp, #8
    58b4:	bd70      	pop	{r4, r5, r6, pc}
			*win_offset_us -= conn_interval_us;
    58b6:	1a1b      	subs	r3, r3, r0
    58b8:	6023      	str	r3, [r4, #0]
    58ba:	e7f7      	b.n	58ac <sched_after_mstr_free_offset_get+0x54>
    58bc:	f3af 8000 	nop.w
    58c0:	3b9aca00 	.word	0x3b9aca00
    58c4:	00000000 	.word	0x00000000
    58c8:	1afd498d 	.word	0x1afd498d

000058cc <mayfly_sched_win_offset_use>:
{
    58cc:	b513      	push	{r0, r1, r4, lr}
	sched_after_mstr_free_offset_get(conn->conn_interval,
    58ce:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
    58d2:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
    58d4:	6f82      	ldr	r2, [r0, #120]	; 0x78
    58d6:	68c1      	ldr	r1, [r0, #12]
    58d8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    58da:	f7ff ffbd 	bl	5858 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    58de:	a902      	add	r1, sp, #8
    58e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    58e2:	6f60      	ldr	r0, [r4, #116]	; 0x74
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    58e4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    58e8:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    58ec:	2202      	movs	r2, #2
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    58ee:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
    58f2:	f7fa fe81 	bl	5f8 <memcpy>
}
    58f6:	b002      	add	sp, #8
    58f8:	bd10      	pop	{r4, pc}
	...

000058fc <mayfly_sched_after_mstr_free_offset_get>:
{
    58fc:	b410      	push	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    58fe:	4c05      	ldr	r4, [pc, #20]	; (5914 <mayfly_sched_after_mstr_free_offset_get+0x18>)
    5900:	4602      	mov	r2, r0
    5902:	f604 4358 	addw	r3, r4, #3160	; 0xc58
    5906:	f8d4 1c50 	ldr.w	r1, [r4, #3152]	; 0xc50
    590a:	f8b4 0c48 	ldrh.w	r0, [r4, #3144]	; 0xc48
}
    590e:	bc10      	pop	{r4}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
    5910:	f7ff bfa2 	b.w	5858 <sched_after_mstr_free_offset_get>
    5914:	20000380 	.word	0x20000380

00005918 <pdu_node_tx_release>:
{
    5918:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
    591a:	4a10      	ldr	r2, [pc, #64]	; (595c <pdu_node_tx_release+0x44>)
    591c:	f892 3d58 	ldrb.w	r3, [r2, #3416]	; 0xd58
	if (last == _radio.packet_tx_count) {
    5920:	f892 4d54 	ldrb.w	r4, [r2, #3412]	; 0xd54
	last = _radio.packet_release_last + 1;
    5924:	3301      	adds	r3, #1
    5926:	b2db      	uxtb	r3, r3
		last = 0;
    5928:	429c      	cmp	r4, r3
    592a:	bf08      	it	eq
    592c:	2300      	moveq	r3, #0
	LL_ASSERT(last != _radio.packet_release_first);
    592e:	f892 4d57 	ldrb.w	r4, [r2, #3415]	; 0xd57
    5932:	429c      	cmp	r4, r3
    5934:	d101      	bne.n	593a <pdu_node_tx_release+0x22>
    5936:	f7ff fe9f 	bl	5678 <event_active.part.17>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    593a:	f892 5d58 	ldrb.w	r5, [r2, #3416]	; 0xd58
    593e:	f8d2 4d50 	ldr.w	r4, [r2, #3408]	; 0xd50
    5942:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    5946:	f892 0d58 	ldrb.w	r0, [r2, #3416]	; 0xd58
    594a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
    594e:	6061      	str	r1, [r4, #4]
	_radio.packet_release_last = last;
    5950:	f882 3d58 	strb.w	r3, [r2, #3416]	; 0xd58
}
    5954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_event_callback();
    5958:	f003 bac8 	b.w	8eec <radio_event_callback>
    595c:	20000380 	.word	0x20000380

00005960 <packet_tx_enqueue>:
{
    5960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    5964:	4c24      	ldr	r4, [pc, #144]	; (59f8 <packet_tx_enqueue+0x98>)
{
    5966:	4606      	mov	r6, r0
		node_tx_new->next = NULL;
    5968:	2700      	movs	r7, #0
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    596a:	b12e      	cbz	r6, 5978 <packet_tx_enqueue+0x18>
    596c:	f894 3d55 	ldrb.w	r3, [r4, #3413]	; 0xd55
    5970:	f894 2d56 	ldrb.w	r2, [r4, #3414]	; 0xd56
    5974:	429a      	cmp	r2, r3
    5976:	d101      	bne.n	597c <packet_tx_enqueue+0x1c>
    5978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    597c:	f894 8d55 	ldrb.w	r8, [r4, #3413]	; 0xd55
    5980:	f8d4 9d4c 	ldr.w	r9, [r4, #3404]	; 0xd4c
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5984:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    5988:	f839 2038 	ldrh.w	r2, [r9, r8, lsl #3]
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    598c:	eb09 03c8 	add.w	r3, r9, r8, lsl #3
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5990:	f44f 7182 	mov.w	r1, #260	; 0x104
		node_tx_new = pdu_data_q_tx->node_tx;
    5994:	685d      	ldr	r5, [r3, #4]
		node_tx_new->next = NULL;
    5996:	602f      	str	r7, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5998:	f7fd f976 	bl	2c88 <mem_get>
    599c:	4603      	mov	r3, r0
		if (conn->handle == pdu_data_q_tx->handle) {
    599e:	f839 0038 	ldrh.w	r0, [r9, r8, lsl #3]
    59a2:	8c1a      	ldrh	r2, [r3, #32]
    59a4:	4282      	cmp	r2, r0
    59a6:	d11f      	bne.n	59e8 <packet_tx_enqueue+0x88>
			if (conn->pkt_tx_data == 0) {
    59a8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
    59ac:	b942      	cbnz	r2, 59c0 <packet_tx_enqueue+0x60>
				if (conn->pkt_tx_head == 0) {
    59ae:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
				conn->pkt_tx_data = node_tx_new;
    59b2:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
				if (conn->pkt_tx_head == 0) {
    59b6:	b91a      	cbnz	r2, 59c0 <packet_tx_enqueue+0x60>
					conn->pkt_tx_head = node_tx_new;
    59b8:	f8c3 50ec 	str.w	r5, [r3, #236]	; 0xec
					conn->pkt_tx_last = NULL;
    59bc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			if (conn->pkt_tx_last) {
    59c0:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    59c4:	b102      	cbz	r2, 59c8 <packet_tx_enqueue+0x68>
				conn->pkt_tx_last->next = node_tx_new;
    59c6:	6015      	str	r5, [r2, #0]
			conn->pkt_tx_last = node_tx_new;
    59c8:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
		first = _radio.packet_tx_first + 1;
    59cc:	f894 3d55 	ldrb.w	r3, [r4, #3413]	; 0xd55
		if (first == _radio.packet_tx_count) {
    59d0:	f894 2d54 	ldrb.w	r2, [r4, #3412]	; 0xd54
		first = _radio.packet_tx_first + 1;
    59d4:	3301      	adds	r3, #1
    59d6:	b2db      	uxtb	r3, r3
			first = 0;
    59d8:	429a      	cmp	r2, r3
    59da:	bf08      	it	eq
    59dc:	2300      	moveq	r3, #0
    59de:	3e01      	subs	r6, #1
		_radio.packet_tx_first = first;
    59e0:	f884 3d55 	strb.w	r3, [r4, #3413]	; 0xd55
    59e4:	b2f6      	uxtb	r6, r6
    59e6:	e7c0      	b.n	596a <packet_tx_enqueue+0xa>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    59e8:	792b      	ldrb	r3, [r5, #4]
    59ea:	f367 0301 	bfi	r3, r7, #0, #2
    59ee:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    59f0:	4629      	mov	r1, r5
    59f2:	f7ff ff91 	bl	5918 <pdu_node_tx_release>
    59f6:	e7e9      	b.n	59cc <packet_tx_enqueue+0x6c>
    59f8:	20000380 	.word	0x20000380

000059fc <connection_release>:
{
    59fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    59fe:	2201      	movs	r2, #1
{
    5a00:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    5a02:	4611      	mov	r1, r2
    5a04:	2000      	movs	r0, #0
    5a06:	f7fd f9a1 	bl	2d4c <mayfly_enable>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5a0a:	f894 2020 	ldrb.w	r2, [r4, #32]
	ticker_status =
    5a0e:	2100      	movs	r1, #0
    5a10:	f242 73e2 	movw	r3, #10210	; 0x27e2
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5a14:	3207      	adds	r2, #7
	ticker_status =
    5a16:	9300      	str	r3, [sp, #0]
    5a18:	4608      	mov	r0, r1
    5a1a:	4b3a      	ldr	r3, [pc, #232]	; (5b04 <connection_release+0x108>)
    5a1c:	b2d2      	uxtb	r2, r2
    5a1e:	f7fe f805 	bl	3a2c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5a22:	f030 0102 	bics.w	r1, r0, #2
    5a26:	d005      	beq.n	5a34 <connection_release+0x38>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5a28:	4040      	eors	r0, r0
    5a2a:	f380 8811 	msr	BASEPRI, r0
    5a2e:	f04f 0004 	mov.w	r0, #4
    5a32:	df02      	svc	2
	if ((_radio.state == STATE_ABORT) &&
    5a34:	4b34      	ldr	r3, [pc, #208]	; (5b08 <connection_release+0x10c>)
    5a36:	7d1a      	ldrb	r2, [r3, #20]
    5a38:	2a05      	cmp	r2, #5
    5a3a:	461d      	mov	r5, r3
    5a3c:	d11b      	bne.n	5a76 <connection_release+0x7a>
					  conn->handle))) {
    5a3e:	8c22      	ldrh	r2, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    5a40:	7c18      	ldrb	r0, [r3, #16]
    5a42:	3207      	adds	r2, #7
	if ((_radio.state == STATE_ABORT) &&
    5a44:	4290      	cmp	r0, r2
    5a46:	d116      	bne.n	5a76 <connection_release+0x7a>
		_radio.ticker_id_prepare = 0;
    5a48:	7419      	strb	r1, [r3, #16]
		ticker_status =
    5a4a:	f242 73f3 	movw	r3, #10227	; 0x27f3
    5a4e:	9300      	str	r3, [sp, #0]
    5a50:	2201      	movs	r2, #1
    5a52:	4b2c      	ldr	r3, [pc, #176]	; (5b04 <connection_release+0x108>)
    5a54:	4608      	mov	r0, r1
    5a56:	f7fd ffe9 	bl	3a2c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5a5a:	f030 0202 	bics.w	r2, r0, #2
    5a5e:	d1e3      	bne.n	5a28 <connection_release+0x2c>
		ticker_status =
    5a60:	f242 73fa 	movw	r3, #10234	; 0x27fa
    5a64:	9300      	str	r3, [sp, #0]
    5a66:	4611      	mov	r1, r2
    5a68:	4b26      	ldr	r3, [pc, #152]	; (5b04 <connection_release+0x108>)
    5a6a:	4610      	mov	r0, r2
    5a6c:	f7fd ffde 	bl	3a2c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5a70:	f030 0302 	bics.w	r3, r0, #2
    5a74:	d1d8      	bne.n	5a28 <connection_release+0x2c>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    5a76:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    5a7a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    5a7e:	4299      	cmp	r1, r3
    5a80:	d003      	beq.n	5a8a <connection_release+0x8e>
    5a82:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5a86:	4299      	cmp	r1, r3
    5a88:	d101      	bne.n	5a8e <connection_release+0x92>
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5a8a:	4e20      	ldr	r6, [pc, #128]	; (5b0c <connection_release+0x110>)
    5a8c:	e012      	b.n	5ab4 <connection_release+0xb8>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5a8e:	790b      	ldrb	r3, [r1, #4]
    5a90:	f36f 0301 	bfc	r3, #0, #2
    5a94:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5a96:	680b      	ldr	r3, [r1, #0]
    5a98:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		pdu_node_tx_release(conn->handle, node_tx);
    5a9c:	8c20      	ldrh	r0, [r4, #32]
    5a9e:	f7ff ff3b 	bl	5918 <pdu_node_tx_release>
    5aa2:	e7e8      	b.n	5a76 <connection_release+0x7a>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5aa4:	6803      	ldr	r3, [r0, #0]
    5aa6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    5aaa:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5aae:	4631      	mov	r1, r6
    5ab0:	f7fd f8d5 	bl	2c5e <mem_release>
	while ((conn->pkt_tx_head) &&
    5ab4:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    5ab8:	b118      	cbz	r0, 5ac2 <connection_release+0xc6>
    5aba:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5abe:	4298      	cmp	r0, r3
    5ac0:	d1f0      	bne.n	5aa4 <connection_release+0xa8>
	conn->pkt_tx_ctrl = NULL;
    5ac2:	2300      	movs	r3, #0
    5ac4:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = NULL;
    5ac8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	while (conn->pkt_tx_head) {
    5acc:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
    5ad0:	b951      	cbnz	r1, 5ae8 <connection_release+0xec>
	conn->handle = 0xffff;
    5ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5ad6:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
    5ad8:	f8d5 3d68 	ldr.w	r3, [r5, #3432]	; 0xd68
    5adc:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    5ade:	bf08      	it	eq
    5ae0:	f8c5 1d68 	streq.w	r1, [r5, #3432]	; 0xd68
}
    5ae4:	b002      	add	sp, #8
    5ae6:	bd70      	pop	{r4, r5, r6, pc}
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5ae8:	790b      	ldrb	r3, [r1, #4]
    5aea:	f36f 0301 	bfc	r3, #0, #2
    5aee:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5af0:	680b      	ldr	r3, [r1, #0]
    5af2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
		conn->pkt_tx_data = conn->pkt_tx_head;
    5af6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
		pdu_node_tx_release(conn->handle, node_tx);
    5afa:	8c20      	ldrh	r0, [r4, #32]
    5afc:	f7ff ff0c 	bl	5918 <pdu_node_tx_release>
    5b00:	e7e4      	b.n	5acc <connection_release+0xd0>
    5b02:	bf00      	nop
    5b04:	00005c65 	.word	0x00005c65
    5b08:	20000380 	.word	0x20000380
    5b0c:	200010bc 	.word	0x200010bc

00005b10 <mayfly_radio_stop>:
	enum state state = (enum state)((u32_t)params & 0xff);
    5b10:	b2c0      	uxtb	r0, r0
{
    5b12:	b508      	push	{r3, lr}
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    5b14:	1f03      	subs	r3, r0, #4
    5b16:	2b01      	cmp	r3, #1
    5b18:	d901      	bls.n	5b1e <mayfly_radio_stop+0xe>
    5b1a:	f7ff fdad 	bl	5678 <event_active.part.17>
	radio_used = ((_radio.state != STATE_NONE) &&
    5b1e:	4a08      	ldr	r2, [pc, #32]	; (5b40 <mayfly_radio_stop+0x30>)
    5b20:	7d13      	ldrb	r3, [r2, #20]
		      (_radio.state != STATE_STOP) &&
    5b22:	b13b      	cbz	r3, 5b34 <mayfly_radio_stop+0x24>
	radio_used = ((_radio.state != STATE_NONE) &&
    5b24:	3b04      	subs	r3, #4
    5b26:	2b01      	cmp	r3, #1
    5b28:	d904      	bls.n	5b34 <mayfly_radio_stop+0x24>
			_radio.state = state;
    5b2a:	7510      	strb	r0, [r2, #20]
}
    5b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_disable();
    5b30:	f003 bd60 	b.w	95f4 <radio_disable>
	if (radio_used || !radio_is_idle()) {
    5b34:	f003 fd90 	bl	9658 <radio_is_idle>
    5b38:	2800      	cmp	r0, #0
    5b3a:	d0f7      	beq.n	5b2c <mayfly_radio_stop+0x1c>
}
    5b3c:	bd08      	pop	{r3, pc}
    5b3e:	bf00      	nop
    5b40:	20000380 	.word	0x20000380

00005b44 <mayfly_radio_active>:
{
    5b44:	b508      	push	{r3, lr}
    5b46:	4a0a      	ldr	r2, [pc, #40]	; (5b70 <mayfly_radio_active+0x2c>)
		if (s_active++) {
    5b48:	7813      	ldrb	r3, [r2, #0]
	if ((u32_t)params) {
    5b4a:	b138      	cbz	r0, 5b5c <mayfly_radio_active+0x18>
		if (s_active++) {
    5b4c:	1c59      	adds	r1, r3, #1
    5b4e:	7011      	strb	r1, [r2, #0]
    5b50:	b963      	cbnz	r3, 5b6c <mayfly_radio_active+0x28>
		radio_active_callback(1);
    5b52:	2001      	movs	r0, #1
}
    5b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		radio_active_callback(0);
    5b58:	f003 b9c6 	b.w	8ee8 <radio_active_callback>
		LL_ASSERT(s_active);
    5b5c:	b90b      	cbnz	r3, 5b62 <mayfly_radio_active+0x1e>
    5b5e:	f7ff fd8b 	bl	5678 <event_active.part.17>
		if (--s_active) {
    5b62:	3b01      	subs	r3, #1
    5b64:	b2db      	uxtb	r3, r3
    5b66:	7013      	strb	r3, [r2, #0]
    5b68:	2b00      	cmp	r3, #0
    5b6a:	d0f3      	beq.n	5b54 <mayfly_radio_active+0x10>
    5b6c:	bd08      	pop	{r3, pc}
    5b6e:	bf00      	nop
    5b70:	20001122 	.word	0x20001122

00005b74 <mayfly_radio_inactive>:
	mayfly_radio_active(0);
    5b74:	2000      	movs	r0, #0
    5b76:	f7ff bfe5 	b.w	5b44 <mayfly_radio_active>
	...

00005b7c <event_xtal>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5b7c:	2200      	movs	r2, #0
{
    5b7e:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5b80:	4611      	mov	r1, r2
    5b82:	4b04      	ldr	r3, [pc, #16]	; (5b94 <event_xtal+0x18>)
    5b84:	4610      	mov	r0, r2
    5b86:	f7fd f909 	bl	2d9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    5b8a:	b108      	cbz	r0, 5b90 <event_xtal+0x14>
    5b8c:	f7ff fd74 	bl	5678 <event_active.part.17>
    5b90:	bd08      	pop	{r3, pc}
    5b92:	bf00      	nop
    5b94:	20006140 	.word	0x20006140

00005b98 <event_active>:
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5b98:	2200      	movs	r2, #0
{
    5b9a:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5b9c:	4611      	mov	r1, r2
    5b9e:	4b04      	ldr	r3, [pc, #16]	; (5bb0 <event_active+0x18>)
    5ba0:	4610      	mov	r0, r2
    5ba2:	f7fd f8fb 	bl	2d9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    5ba6:	b108      	cbz	r0, 5bac <event_active+0x14>
    5ba8:	f7ff fd66 	bl	5678 <event_active.part.17>
    5bac:	bd08      	pop	{r3, pc}
    5bae:	bf00      	nop
    5bb0:	200060d0 	.word	0x200060d0

00005bb4 <event_stop>:
	s_mfy_radio_stop.param = context;
    5bb4:	4a06      	ldr	r2, [pc, #24]	; (5bd0 <event_stop+0x1c>)
{
    5bb6:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    5bb8:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5bba:	4613      	mov	r3, r2
    5bbc:	2200      	movs	r2, #0
    5bbe:	4611      	mov	r1, r2
    5bc0:	4610      	mov	r0, r2
    5bc2:	f7fd f8eb 	bl	2d9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    5bc6:	b108      	cbz	r0, 5bcc <event_stop+0x18>
    5bc8:	f7ff fd56 	bl	5678 <event_active.part.17>
    5bcc:	bd08      	pop	{r3, pc}
    5bce:	bf00      	nop
    5bd0:	20006100 	.word	0x20006100

00005bd4 <ticker_update_slave_assert>:
{
    5bd4:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5bd6:	b130      	cbz	r0, 5be6 <ticker_update_slave_assert+0x12>
    5bd8:	4b03      	ldr	r3, [pc, #12]	; (5be8 <ticker_update_slave_assert+0x14>)
    5bda:	7c9b      	ldrb	r3, [r3, #18]
    5bdc:	b2c9      	uxtb	r1, r1
    5bde:	4299      	cmp	r1, r3
    5be0:	d001      	beq.n	5be6 <ticker_update_slave_assert+0x12>
    5be2:	f7ff fd49 	bl	5678 <event_active.part.17>
    5be6:	bd08      	pop	{r3, pc}
    5be8:	20000380 	.word	0x20000380

00005bec <ticker_update_adv_assert>:
{
    5bec:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
    5bee:	b128      	cbz	r0, 5bfc <ticker_update_adv_assert+0x10>
    5bf0:	4b03      	ldr	r3, [pc, #12]	; (5c00 <ticker_update_adv_assert+0x14>)
    5bf2:	7c9b      	ldrb	r3, [r3, #18]
    5bf4:	2b05      	cmp	r3, #5
    5bf6:	d001      	beq.n	5bfc <ticker_update_adv_assert+0x10>
    5bf8:	f7ff fd3e 	bl	5678 <event_active.part.17>
    5bfc:	bd08      	pop	{r3, pc}
    5bfe:	bf00      	nop
    5c00:	20000380 	.word	0x20000380

00005c04 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5c04:	2801      	cmp	r0, #1
{
    5c06:	b508      	push	{r3, lr}
    5c08:	4b09      	ldr	r3, [pc, #36]	; (5c30 <ticker_stop_scan_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    5c0a:	d107      	bne.n	5c1c <ticker_stop_scan_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
    5c0c:	7c9a      	ldrb	r2, [r3, #18]
    5c0e:	2a06      	cmp	r2, #6
    5c10:	d102      	bne.n	5c18 <ticker_stop_scan_assert+0x14>
			_radio.ticker_id_stop = 0;
    5c12:	2200      	movs	r2, #0
    5c14:	749a      	strb	r2, [r3, #18]
    5c16:	bd08      	pop	{r3, pc}
    5c18:	f7ff fd2e 	bl	5678 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
    5c1c:	7c1b      	ldrb	r3, [r3, #16]
    5c1e:	2b06      	cmp	r3, #6
    5c20:	d105      	bne.n	5c2e <ticker_stop_scan_assert+0x2a>
    5c22:	4040      	eors	r0, r0
    5c24:	f380 8811 	msr	BASEPRI, r0
    5c28:	f04f 0004 	mov.w	r0, #4
    5c2c:	df02      	svc	2
    5c2e:	bd08      	pop	{r3, pc}
    5c30:	20000380 	.word	0x20000380

00005c34 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
    5c34:	2801      	cmp	r0, #1
{
    5c36:	b508      	push	{r3, lr}
    5c38:	4b09      	ldr	r3, [pc, #36]	; (5c60 <ticker_stop_adv_assert+0x2c>)
	if (status == TICKER_STATUS_FAILURE) {
    5c3a:	d107      	bne.n	5c4c <ticker_stop_adv_assert+0x18>
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
    5c3c:	7c9a      	ldrb	r2, [r3, #18]
    5c3e:	2a05      	cmp	r2, #5
    5c40:	d102      	bne.n	5c48 <ticker_stop_adv_assert+0x14>
			_radio.ticker_id_stop = 0;
    5c42:	2200      	movs	r2, #0
    5c44:	749a      	strb	r2, [r3, #18]
    5c46:	bd08      	pop	{r3, pc}
    5c48:	f7ff fd16 	bl	5678 <event_active.part.17>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
    5c4c:	7c1b      	ldrb	r3, [r3, #16]
    5c4e:	2b05      	cmp	r3, #5
    5c50:	d105      	bne.n	5c5e <ticker_stop_adv_assert+0x2a>
    5c52:	4040      	eors	r0, r0
    5c54:	f380 8811 	msr	BASEPRI, r0
    5c58:	f04f 0004 	mov.w	r0, #4
    5c5c:	df02      	svc	2
    5c5e:	bd08      	pop	{r3, pc}
    5c60:	20000380 	.word	0x20000380

00005c64 <ticker_success_assert>:
{
    5c64:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5c66:	b108      	cbz	r0, 5c6c <ticker_success_assert+0x8>
    5c68:	f7ff fd06 	bl	5678 <event_active.part.17>
    5c6c:	bd08      	pop	{r3, pc}

00005c6e <isr.part.46>:
		LL_ASSERT(0);
    5c6e:	4040      	eors	r0, r0
    5c70:	f380 8811 	msr	BASEPRI, r0
    5c74:	f04f 0004 	mov.w	r0, #4
    5c78:	df02      	svc	2
	...

00005c7c <isr_rx_scan_report.isra.38>:
static u32_t isr_rx_scan_report(u8_t rssi_ready, u8_t rl_idx, bool dir_report)
    5c7c:	b570      	push	{r4, r5, r6, lr}
    5c7e:	4606      	mov	r6, r0
	node_rx = packet_rx_reserve_get(3);
    5c80:	2003      	movs	r0, #3
    5c82:	f7fe fed1 	bl	4a28 <packet_rx_reserve_get>
	if (node_rx == 0) {
    5c86:	b320      	cbz	r0, 5cd2 <isr_rx_scan_report.isra.38+0x56>
	node_rx->hdr.handle = 0xffff;
    5c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5c8c:	80c3      	strh	r3, [r0, #6]
	} else if (_radio.scanner.phy) {
    5c8e:	4b12      	ldr	r3, [pc, #72]	; (5cd8 <isr_rx_scan_report.isra.38+0x5c>)
    5c90:	f893 3c2d 	ldrb.w	r3, [r3, #3117]	; 0xc2d
    5c94:	075a      	lsls	r2, r3, #29
    5c96:	d018      	beq.n	5cca <isr_rx_scan_report.isra.38+0x4e>
		switch (_radio.scanner.phy) {
    5c98:	f3c3 0302 	ubfx	r3, r3, #0, #3
    5c9c:	b2da      	uxtb	r2, r3
    5c9e:	2a01      	cmp	r2, #1
    5ca0:	d003      	beq.n	5caa <isr_rx_scan_report.isra.38+0x2e>
    5ca2:	2a04      	cmp	r2, #4
    5ca4:	d002      	beq.n	5cac <isr_rx_scan_report.isra.38+0x30>
    5ca6:	f7ff ffe2 	bl	5c6e <isr.part.46>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    5caa:	2303      	movs	r3, #3
			     pdu_adv_rx->len] =
    5cac:	7a44      	ldrb	r4, [r0, #9]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    5cae:	7103      	strb	r3, [r0, #4]
	pdu_adv_rx = (void *)node_rx->pdu_data;
    5cb0:	f100 0508 	add.w	r5, r0, #8
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    5cb4:	3402      	adds	r4, #2
			     pdu_adv_rx->len] =
    5cb6:	b156      	cbz	r6, 5cce <isr_rx_scan_report.isra.38+0x52>
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    5cb8:	f003 fd24 	bl	9704 <radio_rssi_get>
			     pdu_adv_rx->len] =
    5cbc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    5cc0:	5528      	strb	r0, [r5, r4]
	packet_rx_enqueue();
    5cc2:	f7ff fd97 	bl	57f4 <packet_rx_enqueue>
	return 0;
    5cc6:	2000      	movs	r0, #0
    5cc8:	bd70      	pop	{r4, r5, r6, pc}
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    5cca:	2302      	movs	r3, #2
    5ccc:	e7ee      	b.n	5cac <isr_rx_scan_report.isra.38+0x30>
			     pdu_adv_rx->len] =
    5cce:	207f      	movs	r0, #127	; 0x7f
    5cd0:	e7f6      	b.n	5cc0 <isr_rx_scan_report.isra.38+0x44>
		return 1;
    5cd2:	2001      	movs	r0, #1
}
    5cd4:	bd70      	pop	{r4, r5, r6, pc}
    5cd6:	bf00      	nop
    5cd8:	20000380 	.word	0x20000380

00005cdc <adv_scan_configure.constprop.49>:
static void adv_scan_configure(u8_t phy, u8_t flags)
    5cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	u32_t aa = 0x8e89bed6;
    5cde:	ad02      	add	r5, sp, #8
    5ce0:	4b10      	ldr	r3, [pc, #64]	; (5d24 <adv_scan_configure.constprop.49+0x48>)
    5ce2:	f845 3d04 	str.w	r3, [r5, #-4]!
static void adv_scan_configure(u8_t phy, u8_t flags)
    5ce6:	4604      	mov	r4, r0
	radio_reset();
    5ce8:	f003 fbd0 	bl	948c <radio_reset>
	radio_tx_power_set(0);
    5cec:	2000      	movs	r0, #0
    5cee:	f003 fbf7 	bl	94e0 <radio_tx_power_set>
	radio_isr_set(isr);
    5cf2:	480d      	ldr	r0, [pc, #52]	; (5d28 <adv_scan_configure.constprop.49+0x4c>)
    5cf4:	f003 fb94 	bl	9420 <radio_isr_set>
	radio_phy_set(phy, flags);
    5cf8:	2101      	movs	r1, #1
    5cfa:	4620      	mov	r0, r4
    5cfc:	f003 fbe0 	bl	94c0 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
    5d00:	4628      	mov	r0, r5
    5d02:	f003 fc0b 	bl	951c <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
    5d06:	0062      	lsls	r2, r4, #1
    5d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    5d0c:	21ff      	movs	r1, #255	; 0xff
    5d0e:	2008      	movs	r0, #8
    5d10:	f003 fc1c 	bl	954c <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    5d14:	4905      	ldr	r1, [pc, #20]	; (5d2c <adv_scan_configure.constprop.49+0x50>)
    5d16:	f240 605b 	movw	r0, #1627	; 0x65b
    5d1a:	f003 fca7 	bl	966c <radio_crc_configure>
}
    5d1e:	b003      	add	sp, #12
    5d20:	bd30      	pop	{r4, r5, pc}
    5d22:	bf00      	nop
    5d24:	8e89bed6 	.word	0x8e89bed6
    5d28:	00006dc1 	.word	0x00006dc1
    5d2c:	00555555 	.word	0x00555555

00005d30 <event_stop.constprop.50>:
static void event_stop(u32_t ticks_at_expire, u32_t remainder,
    5d30:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
    5d32:	4b05      	ldr	r3, [pc, #20]	; (5d48 <event_stop.constprop.50+0x18>)
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5d34:	2200      	movs	r2, #0
	s_mfy_radio_stop.param = context;
    5d36:	6098      	str	r0, [r3, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5d38:	4611      	mov	r1, r2
    5d3a:	4610      	mov	r0, r2
    5d3c:	f7fd f82e 	bl	2d9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    5d40:	b108      	cbz	r0, 5d46 <event_stop.constprop.50+0x16>
    5d42:	f7ff fc99 	bl	5678 <event_active.part.17>
    5d46:	bd08      	pop	{r3, pc}
    5d48:	20006100 	.word	0x20006100

00005d4c <event_common_prepare>:
{
    5d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    5d50:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
    5d52:	681d      	ldr	r5, [r3, #0]
{
    5d54:	b08d      	sub	sp, #52	; 0x34
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5d56:	2c00      	cmp	r4, #0
{
    5d58:	4681      	mov	r9, r0
    5d5a:	910b      	str	r1, [sp, #44]	; 0x2c
    5d5c:	4690      	mov	r8, r2
    5d5e:	469b      	mov	fp, r3
    5d60:	f89d a05c 	ldrb.w	sl, [sp, #92]	; 0x5c
	if (_ticks_xtal_to_start & XON_BITMASK) {
    5d64:	da03      	bge.n	5d6e <event_common_prepare+0x22>
		_ticks_xtal_to_start =
    5d66:	9c16      	ldr	r4, [sp, #88]	; 0x58
    5d68:	42ac      	cmp	r4, r5
    5d6a:	bf38      	it	cc
    5d6c:	462c      	movcc	r4, r5
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    5d6e:	42ac      	cmp	r4, r5
    5d70:	4f4e      	ldr	r7, [pc, #312]	; (5eac <event_common_prepare+0x160>)
    5d72:	d91b      	bls.n	5dac <event_common_prepare+0x60>
		ticker_status =
    5d74:	f241 7348 	movw	r3, #5960	; 0x1748
    5d78:	9308      	str	r3, [sp, #32]
    5d7a:	4b4d      	ldr	r3, [pc, #308]	; (5eb0 <event_common_prepare+0x164>)
    5d7c:	9305      	str	r3, [sp, #20]
    5d7e:	2100      	movs	r1, #0
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
    5d80:	1b63      	subs	r3, r4, r5
		ticker_status =
    5d82:	9300      	str	r3, [sp, #0]
    5d84:	9707      	str	r7, [sp, #28]
    5d86:	464b      	mov	r3, r9
    5d88:	9106      	str	r1, [sp, #24]
    5d8a:	9104      	str	r1, [sp, #16]
    5d8c:	9103      	str	r1, [sp, #12]
    5d8e:	9102      	str	r1, [sp, #8]
    5d90:	9101      	str	r1, [sp, #4]
    5d92:	2201      	movs	r2, #1
    5d94:	4608      	mov	r0, r1
    5d96:	f7fd fdab 	bl	38f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5d9a:	f030 0302 	bics.w	r3, r0, #2
    5d9e:	d02b      	beq.n	5df8 <event_common_prepare+0xac>
		LL_ASSERT(!retval);
    5da0:	4040      	eors	r0, r0
    5da2:	f380 8811 	msr	BASEPRI, r0
    5da6:	f04f 0004 	mov.w	r0, #4
    5daa:	df02      	svc	2
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    5dac:	d21d      	bcs.n	5dea <event_common_prepare+0x9e>
		event_active(0, 0, 0, NULL);
    5dae:	2300      	movs	r3, #0
    5db0:	461a      	mov	r2, r3
    5db2:	4619      	mov	r1, r3
    5db4:	4618      	mov	r0, r3
    5db6:	f7ff feef 	bl	5b98 <event_active>
		ticker_status =
    5dba:	f241 735d 	movw	r3, #5981	; 0x175d
    5dbe:	2100      	movs	r1, #0
    5dc0:	9308      	str	r3, [sp, #32]
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    5dc2:	1b2c      	subs	r4, r5, r4
		ticker_status =
    5dc4:	4b3b      	ldr	r3, [pc, #236]	; (5eb4 <event_common_prepare+0x168>)
    5dc6:	9305      	str	r3, [sp, #20]
    5dc8:	9707      	str	r7, [sp, #28]
    5dca:	464b      	mov	r3, r9
    5dcc:	9106      	str	r1, [sp, #24]
    5dce:	9104      	str	r1, [sp, #16]
    5dd0:	9103      	str	r1, [sp, #12]
    5dd2:	9102      	str	r1, [sp, #8]
    5dd4:	9101      	str	r1, [sp, #4]
    5dd6:	9400      	str	r4, [sp, #0]
    5dd8:	2201      	movs	r2, #1
    5dda:	4608      	mov	r0, r1
    5ddc:	f7fd fd88 	bl	38f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5de0:	f030 0302 	bics.w	r3, r0, #2
    5de4:	d1dc      	bne.n	5da0 <event_common_prepare+0x54>
    5de6:	462c      	mov	r4, r5
    5de8:	e00b      	b.n	5e02 <event_common_prepare+0xb6>
		event_active(0, 0, 0, NULL);
    5dea:	2300      	movs	r3, #0
    5dec:	461a      	mov	r2, r3
    5dee:	4619      	mov	r1, r3
    5df0:	4618      	mov	r0, r3
    5df2:	f7ff fed1 	bl	5b98 <event_active>
		event_xtal(0, 0, 0, NULL);
    5df6:	2300      	movs	r3, #0
    5df8:	461a      	mov	r2, r3
    5dfa:	4619      	mov	r1, r3
    5dfc:	4618      	mov	r0, r3
    5dfe:	f7ff febd 	bl	5b7c <event_xtal>
	_radio.remainder_anchor = remainder;
    5e02:	4e2d      	ldr	r6, [pc, #180]	; (5eb8 <event_common_prepare+0x16c>)
    5e04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5e06:	60f3      	str	r3, [r6, #12]
	ticker_status =
    5e08:	f241 7375 	movw	r3, #6005	; 0x1775
    5e0c:	9308      	str	r3, [sp, #32]
    5e0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5e10:	9306      	str	r3, [sp, #24]
    5e12:	2200      	movs	r2, #0
    5e14:	9b18      	ldr	r3, [sp, #96]	; 0x60
    5e16:	9305      	str	r3, [sp, #20]
    5e18:	9707      	str	r7, [sp, #28]
    5e1a:	464b      	mov	r3, r9
    5e1c:	9204      	str	r2, [sp, #16]
    5e1e:	9203      	str	r2, [sp, #12]
    5e20:	9202      	str	r2, [sp, #8]
    5e22:	9201      	str	r2, [sp, #4]
    5e24:	9400      	str	r4, [sp, #0]
    5e26:	4611      	mov	r1, r2
    5e28:	4610      	mov	r0, r2
    5e2a:	f7fd fd61 	bl	38f0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5e2e:	f030 0302 	bics.w	r3, r0, #2
    5e32:	d1b5      	bne.n	5da0 <event_common_prepare+0x54>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5e34:	2005      	movs	r0, #5
    5e36:	f7ff ff7b 	bl	5d30 <event_stop.constprop.50>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    5e3a:	f8d6 3d64 	ldr.w	r3, [r6, #3428]	; 0xd64
    5e3e:	429d      	cmp	r5, r3
    5e40:	d023      	beq.n	5e8a <event_common_prepare+0x13e>
		*ticks_active_to_start = _radio.ticks_active_to_start;
    5e42:	f8cb 3000 	str.w	r3, [fp]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5e46:	f8d8 3000 	ldr.w	r3, [r8]
		ticker_status =
    5e4a:	9705      	str	r7, [sp, #20]
		if (*ticks_xtal_to_start & XON_BITMASK) {
    5e4c:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~XON_BITMASK;
    5e4e:	bfbc      	itt	lt
    5e50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    5e54:	f8c8 3000 	strlt.w	r3, [r8]
		ticks_to_start_new = (_radio.ticks_active_to_start <
    5e58:	f8d6 2d64 	ldr.w	r2, [r6, #3428]	; 0xd64
    5e5c:	f8d8 1000 	ldr.w	r1, [r8]
    5e60:	428a      	cmp	r2, r1
    5e62:	bf38      	it	cc
    5e64:	460a      	movcc	r2, r1
		ticker_status =
    5e66:	f241 71a5 	movw	r1, #6053	; 0x17a5
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5e6a:	b2a3      	uxth	r3, r4
    5e6c:	b292      	uxth	r2, r2
		ticker_status =
    5e6e:	9106      	str	r1, [sp, #24]
    5e70:	2100      	movs	r1, #0
    5e72:	9302      	str	r3, [sp, #8]
    5e74:	9201      	str	r2, [sp, #4]
    5e76:	9200      	str	r2, [sp, #0]
    5e78:	9104      	str	r1, [sp, #16]
    5e7a:	9103      	str	r1, [sp, #12]
    5e7c:	4652      	mov	r2, sl
    5e7e:	4608      	mov	r0, r1
    5e80:	f7fd fd86 	bl	3990 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5e84:	f030 0302 	bics.w	r3, r0, #2
    5e88:	d18a      	bne.n	5da0 <event_common_prepare+0x54>
	packet_tx_enqueue(0xFF);
    5e8a:	20ff      	movs	r0, #255	; 0xff
    5e8c:	f7ff fd68 	bl	5960 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5e90:	4b0a      	ldr	r3, [pc, #40]	; (5ebc <event_common_prepare+0x170>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5e92:	2201      	movs	r2, #1
    5e94:	4611      	mov	r1, r2
    5e96:	2000      	movs	r0, #0
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
    5e98:	f8c3 a008 	str.w	sl, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5e9c:	f7fc ff7e 	bl	2d9c <mayfly_enqueue>
		LL_ASSERT(!retval);
    5ea0:	2800      	cmp	r0, #0
    5ea2:	f47f af7d 	bne.w	5da0 <event_common_prepare+0x54>
}
    5ea6:	b00d      	add	sp, #52	; 0x34
    5ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eac:	00005c65 	.word	0x00005c65
    5eb0:	00005b99 	.word	0x00005b99
    5eb4:	00005b7d 	.word	0x00005b7d
    5eb8:	20000380 	.word	0x20000380
    5ebc:	20006190 	.word	0x20006190

00005ec0 <event_scan_prepare>:
{
    5ec0:	b530      	push	{r4, r5, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    5ec2:	4c1d      	ldr	r4, [pc, #116]	; (5f38 <event_scan_prepare+0x78>)
    5ec4:	7c23      	ldrb	r3, [r4, #16]
{
    5ec6:	b085      	sub	sp, #20
    5ec8:	4605      	mov	r5, r0
	LL_ASSERT(!_radio.ticker_id_prepare);
    5eca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5ece:	b12b      	cbz	r3, 5edc <event_scan_prepare+0x1c>
		LL_ASSERT(!retval);
    5ed0:	4040      	eors	r0, r0
    5ed2:	f380 8811 	msr	BASEPRI, r0
    5ed6:	f04f 0004 	mov.w	r0, #4
    5eda:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
    5edc:	2306      	movs	r3, #6
    5ede:	7423      	strb	r3, [r4, #16]
	event_common_prepare(ticks_at_expire, remainder,
    5ee0:	9203      	str	r2, [sp, #12]
    5ee2:	9301      	str	r3, [sp, #4]
    5ee4:	4a15      	ldr	r2, [pc, #84]	; (5f3c <event_scan_prepare+0x7c>)
    5ee6:	f8d4 3c24 	ldr.w	r3, [r4, #3108]	; 0xc24
    5eea:	9202      	str	r2, [sp, #8]
    5eec:	9300      	str	r3, [sp, #0]
    5eee:	f604 421c 	addw	r2, r4, #3100	; 0xc1c
    5ef2:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
    5ef6:	f7ff ff29 	bl	5d4c <event_common_prepare>
	if (_radio.scanner.conn) {
    5efa:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
    5efe:	b1cb      	cbz	r3, 5f34 <event_scan_prepare+0x74>
		if (_radio.scanner.hdr.ticks_xtal_to_start & XON_BITMASK) {
    5f00:	f8d4 3c1c 	ldr.w	r3, [r4, #3100]	; 0xc1c
    5f04:	2b00      	cmp	r3, #0
    5f06:	da0c      	bge.n	5f22 <event_scan_prepare+0x62>
			u32_t ticks_prepare_to_start =
    5f08:	f8d4 1c24 	ldr.w	r1, [r4, #3108]	; 0xc24
    5f0c:	f8d4 2c20 	ldr.w	r2, [r4, #3104]	; 0xc20
				(_radio.scanner.hdr.ticks_xtal_to_start &
    5f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				 ~XON_BITMASK) - ticks_prepare_to_start;
    5f14:	4291      	cmp	r1, r2
    5f16:	bf2c      	ite	cs
    5f18:	ebc3 0301 	rsbcs	r3, r3, r1
    5f1c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
    5f20:	441d      	add	r5, r3
		s_mfy_sched_after_mstr_free_offset_get.param =
    5f22:	4b07      	ldr	r3, [pc, #28]	; (5f40 <event_scan_prepare+0x80>)
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5f24:	2201      	movs	r2, #1
    5f26:	4611      	mov	r1, r2
    5f28:	2000      	movs	r0, #0
		s_mfy_sched_after_mstr_free_offset_get.param =
    5f2a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5f2c:	f7fc ff36 	bl	2d9c <mayfly_enqueue>
		LL_ASSERT(!retval);
    5f30:	2800      	cmp	r0, #0
    5f32:	d1cd      	bne.n	5ed0 <event_scan_prepare+0x10>
}
    5f34:	b005      	add	sp, #20
    5f36:	bd30      	pop	{r4, r5, pc}
    5f38:	20000380 	.word	0x20000380
    5f3c:	00006199 	.word	0x00006199
    5f40:	20006120 	.word	0x20006120

00005f44 <packet_rx_allocate.constprop.51>:
static void packet_rx_allocate(u8_t max)
    5f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (max > _radio.link_rx_data_quota) {
    5f48:	4d21      	ldr	r5, [pc, #132]	; (5fd0 <packet_rx_allocate.constprop.51+0x8c>)
	acquire = _radio.packet_rx_acquire + 1;
    5f4a:	f895 4d22 	ldrb.w	r4, [r5, #3362]	; 0xd22
	if (acquire == _radio.packet_rx_count) {
    5f4e:	f895 3d20 	ldrb.w	r3, [r5, #3360]	; 0xd20
	if (max > _radio.link_rx_data_quota) {
    5f52:	f895 9d34 	ldrb.w	r9, [r5, #3380]	; 0xd34
	acquire = _radio.packet_rx_acquire + 1;
    5f56:	3401      	adds	r4, #1
    5f58:	b2e4      	uxtb	r4, r4
		acquire = 0;
    5f5a:	42a3      	cmp	r3, r4
    5f5c:	bf08      	it	eq
    5f5e:	2400      	moveq	r4, #0
		link = mem_acquire(&_radio.link_rx_free);
    5f60:	f605 5728 	addw	r7, r5, #3368	; 0xd28
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    5f64:	f505 6851 	add.w	r8, r5, #3344	; 0xd10
	while ((max--) && (acquire != _radio.packet_rx_last)) {
    5f68:	f1b9 0f00 	cmp.w	r9, #0
    5f6c:	d003      	beq.n	5f76 <packet_rx_allocate.constprop.51+0x32>
    5f6e:	f895 3d21 	ldrb.w	r3, [r5, #3361]	; 0xd21
    5f72:	429c      	cmp	r4, r3
    5f74:	d101      	bne.n	5f7a <packet_rx_allocate.constprop.51+0x36>
    5f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		link = mem_acquire(&_radio.link_rx_free);
    5f7a:	4638      	mov	r0, r7
    5f7c:	f7fc fe55 	bl	2c2a <mem_acquire>
		if (!link) {
    5f80:	4606      	mov	r6, r0
    5f82:	2800      	cmp	r0, #0
    5f84:	d0f7      	beq.n	5f76 <packet_rx_allocate.constprop.51+0x32>
		node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    5f86:	4640      	mov	r0, r8
    5f88:	f7fc fe4f 	bl	2c2a <mem_acquire>
		if (!node_rx) {
    5f8c:	b928      	cbnz	r0, 5f9a <packet_rx_allocate.constprop.51+0x56>
			mem_release(link, &_radio.link_rx_free);
    5f8e:	4630      	mov	r0, r6
    5f90:	4910      	ldr	r1, [pc, #64]	; (5fd4 <packet_rx_allocate.constprop.51+0x90>)
}
    5f92:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			mem_release(link, &_radio.link_rx_free);
    5f96:	f7fc be62 	b.w	2c5e <mem_release>
		node_rx->hdr.onion.link = link;
    5f9a:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = node_rx;
    5f9c:	f895 2d22 	ldrb.w	r2, [r5, #3362]	; 0xd22
    5fa0:	f8d5 3d1c 	ldr.w	r3, [r5, #3356]	; 0xd1c
    5fa4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    5fa8:	f885 4d22 	strb.w	r4, [r5, #3362]	; 0xd22
		if (acquire == _radio.packet_rx_count) {
    5fac:	f895 3d20 	ldrb.w	r3, [r5, #3360]	; 0xd20
		acquire = _radio.packet_rx_acquire + 1;
    5fb0:	3401      	adds	r4, #1
    5fb2:	b2e4      	uxtb	r4, r4
			acquire = 0;
    5fb4:	42a3      	cmp	r3, r4
    5fb6:	bf08      	it	eq
    5fb8:	2400      	moveq	r4, #0
		_radio.link_rx_data_quota--;
    5fba:	f895 3d34 	ldrb.w	r3, [r5, #3380]	; 0xd34
    5fbe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    5fc2:	3b01      	subs	r3, #1
    5fc4:	f885 3d34 	strb.w	r3, [r5, #3380]	; 0xd34
    5fc8:	fa5f f989 	uxtb.w	r9, r9
    5fcc:	e7cc      	b.n	5f68 <packet_rx_allocate.constprop.51+0x24>
    5fce:	bf00      	nop
    5fd0:	20000380 	.word	0x20000380
    5fd4:	200010a8 	.word	0x200010a8

00005fd8 <common_init>:
{
    5fd8:	b510      	push	{r4, lr}
	if (_radio.connection_count) {
    5fda:	4c2e      	ldr	r4, [pc, #184]	; (6094 <common_init+0xbc>)
    5fdc:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    5fe0:	2a00      	cmp	r2, #0
    5fe2:	d037      	beq.n	6054 <common_init+0x7c>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    5fe4:	f604 43f4 	addw	r3, r4, #3316	; 0xcf4
    5fe8:	f44f 7182 	mov.w	r1, #260	; 0x104
    5fec:	f8d4 0cf0 	ldr.w	r0, [r4, #3312]	; 0xcf0
    5ff0:	f7fc fdf4 	bl	2bdc <mem_init>
	mem_init(_radio.pkt_rx_data_pool,
    5ff4:	4b28      	ldr	r3, [pc, #160]	; (6098 <common_init+0xc0>)
    5ff6:	f894 2d1a 	ldrb.w	r2, [r4, #3354]	; 0xd1a
    5ffa:	f8b4 1d18 	ldrh.w	r1, [r4, #3352]	; 0xd18
    5ffe:	f8d4 0d0c 	ldr.w	r0, [r4, #3340]	; 0xd0c
    6002:	f7fc fdeb 	bl	2bdc <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
    6006:	f894 1d20 	ldrb.w	r1, [r4, #3360]	; 0xd20
    600a:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
	mem_init(_radio.link_rx_pool, (sizeof(memq_link_t)),
    600e:	4b23      	ldr	r3, [pc, #140]	; (609c <common_init+0xc4>)
    6010:	f8d4 0d24 	ldr.w	r0, [r4, #3364]	; 0xd24
    6014:	440a      	add	r2, r1
    6016:	2108      	movs	r1, #8
    6018:	f7fc fde0 	bl	2bdc <mem_init>
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    601c:	4b20      	ldr	r3, [pc, #128]	; (60a0 <common_init+0xc8>)
    601e:	f8d4 0d38 	ldr.w	r0, [r4, #3384]	; 0xd38
    6022:	2202      	movs	r2, #2
    6024:	2124      	movs	r1, #36	; 0x24
    6026:	f7fc fdd9 	bl	2bdc <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    602a:	f894 2d54 	ldrb.w	r2, [r4, #3412]	; 0xd54
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    602e:	f8d4 0d40 	ldr.w	r0, [r4, #3392]	; 0xd40
    6032:	4b1c      	ldr	r3, [pc, #112]	; (60a4 <common_init+0xcc>)
    6034:	f8b4 1d48 	ldrh.w	r1, [r4, #3400]	; 0xd48
    6038:	3a01      	subs	r2, #1
    603a:	b292      	uxth	r2, r2
    603c:	f7fc fdce 	bl	2bdc <mem_init>
	link = mem_acquire(&_radio.link_rx_free);
    6040:	4816      	ldr	r0, [pc, #88]	; (609c <common_init+0xc4>)
    6042:	f7fc fdf2 	bl	2c2a <mem_acquire>
	LL_ASSERT(link);
    6046:	b940      	cbnz	r0, 605a <common_init+0x82>
    6048:	4040      	eors	r0, r0
    604a:	f380 8811 	msr	BASEPRI, r0
    604e:	f04f 0004 	mov.w	r0, #4
    6052:	df02      	svc	2
		_radio.conn_free = NULL;
    6054:	f8c4 2cf4 	str.w	r2, [r4, #3316]	; 0xcf4
    6058:	e7cc      	b.n	5ff4 <common_init+0x1c>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    605a:	4a13      	ldr	r2, [pc, #76]	; (60a8 <common_init+0xd0>)
    605c:	1f11      	subs	r1, r2, #4
    605e:	f7fc fe2a 	bl	2cb6 <memq_init>
	_radio.advertiser.chan_map = 0x07;
    6062:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    6066:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    606a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_radio.data_chan_map[0] = 0xFF;
    606e:	23ff      	movs	r3, #255	; 0xff
    6070:	f884 3d02 	strb.w	r3, [r4, #3330]	; 0xd02
	_radio.data_chan_map[1] = 0xFF;
    6074:	f884 3d03 	strb.w	r3, [r4, #3331]	; 0xd03
	_radio.data_chan_map[2] = 0xFF;
    6078:	f884 3d04 	strb.w	r3, [r4, #3332]	; 0xd04
	_radio.data_chan_map[3] = 0xFF;
    607c:	f884 3d05 	strb.w	r3, [r4, #3333]	; 0xd05
	_radio.data_chan_map[4] = 0x1F;
    6080:	231f      	movs	r3, #31
    6082:	f884 3d06 	strb.w	r3, [r4, #3334]	; 0xd06
	_radio.data_chan_count = 37;
    6086:	2325      	movs	r3, #37	; 0x25
    6088:	f884 3d07 	strb.w	r3, [r4, #3335]	; 0xd07
}
    608c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	packet_rx_allocate(0xFF);
    6090:	f7ff bf58 	b.w	5f44 <packet_rx_allocate.constprop.51>
    6094:	20000380 	.word	0x20000380
    6098:	20001090 	.word	0x20001090
    609c:	200010a8 	.word	0x200010a8
    60a0:	200010bc 	.word	0x200010bc
    60a4:	200010c4 	.word	0x200010c4
    60a8:	200010b0 	.word	0x200010b0

000060ac <mayfly_xtal_start>:
	clock_control_on(_radio.hf_clock, NULL);
    60ac:	4b02      	ldr	r3, [pc, #8]	; (60b8 <mayfly_xtal_start+0xc>)
    60ae:	6818      	ldr	r0, [r3, #0]
    60b0:	6843      	ldr	r3, [r0, #4]
    60b2:	2100      	movs	r1, #0
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	4718      	bx	r3
    60b8:	20000380 	.word	0x20000380

000060bc <mayfly_xtal_stop>:
	clock_control_off(_radio.hf_clock, NULL);
    60bc:	4b02      	ldr	r3, [pc, #8]	; (60c8 <mayfly_xtal_stop+0xc>)
    60be:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    60c0:	6843      	ldr	r3, [r0, #4]
    60c2:	2100      	movs	r1, #0
    60c4:	685b      	ldr	r3, [r3, #4]
    60c6:	4718      	bx	r3
    60c8:	20000380 	.word	0x20000380

000060cc <chan_sel_2>:
{
    60cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	prn_e = counter ^ chan_id;
    60ce:	4048      	eors	r0, r1
    60d0:	2703      	movs	r7, #3
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    60d2:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    60d6:	2608      	movs	r6, #8
	o = 0;
    60d8:	2400      	movs	r4, #0
		o |= (i & 1);
    60da:	f00e 0501 	and.w	r5, lr, #1
    60de:	3e01      	subs	r6, #1
    60e0:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
	for (iterate = 0; iterate < 8; iterate++) {
    60e4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		o |= (i & 1);
    60e8:	b2ec      	uxtb	r4, r5
		i >>= 1;
    60ea:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    60ee:	d1f4      	bne.n	60da <chan_sel_2+0xe>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    60f0:	0225      	lsls	r5, r4, #8
    60f2:	b22d      	sxth	r5, r5
    60f4:	b2c0      	uxtb	r0, r0
    60f6:	f04f 0e08 	mov.w	lr, #8
	o = 0;
    60fa:	4634      	mov	r4, r6
		o |= (i & 1);
    60fc:	f000 0601 	and.w	r6, r0, #1
    6100:	ea46 0444 	orr.w	r4, r6, r4, lsl #1
    6104:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
	for (iterate = 0; iterate < 8; iterate++) {
    6108:	f016 0eff 	ands.w	lr, r6, #255	; 0xff
		o |= (i & 1);
    610c:	b2e4      	uxtb	r4, r4
		i >>= 1;
    610e:	ea4f 0050 	mov.w	r0, r0, lsr #1
	for (iterate = 0; iterate < 8; iterate++) {
    6112:	d1f3      	bne.n	60fc <chan_sel_2+0x30>
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
    6114:	432c      	orrs	r4, r5
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6116:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    611a:	3f01      	subs	r7, #1
    611c:	440c      	add	r4, r1
	for (iterate = 0; iterate < 3; iterate++) {
    611e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	return ((u32_t)a * 17 + b) & 0xFFFF;
    6122:	b2a0      	uxth	r0, r4
	for (iterate = 0; iterate < 3; iterate++) {
    6124:	d1d5      	bne.n	60d2 <chan_sel_2+0x6>
	chan_next = prn_e % 37;
    6126:	2425      	movs	r4, #37	; 0x25
	prn_e ^= chan_id;
    6128:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
    612a:	fbb1 f0f4 	udiv	r0, r1, r4
    612e:	fb04 1010 	mls	r0, r4, r0, r1
    6132:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6134:	08c4      	lsrs	r4, r0, #3
    6136:	f000 0507 	and.w	r5, r0, #7
    613a:	5d14      	ldrb	r4, [r2, r4]
    613c:	412c      	asrs	r4, r5
    613e:	07e4      	lsls	r4, r4, #31
    6140:	d407      	bmi.n	6152 <chan_sel_2+0x86>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
    6142:	4359      	muls	r1, r3
		chan_next = chan_sel_remap(chan_map, chan_index);
    6144:	f3c1 4107 	ubfx	r1, r1, #16, #8
    6148:	4610      	mov	r0, r2
}
    614a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		chan_next = chan_sel_remap(chan_map, chan_index);
    614e:	f7fe bc4f 	b.w	49f0 <chan_sel_remap>
}
    6152:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006154 <preempt_calc>:
{
    6154:	b570      	push	{r4, r5, r6, lr}
    6156:	4614      	mov	r4, r2
    6158:	460e      	mov	r6, r1
    615a:	4605      	mov	r5, r0
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    615c:	f7fd fd36 	bl	3bcc <ticker_ticks_now_get>
	u32_t diff =
    6160:	4621      	mov	r1, r4
    6162:	f7fd fd35 	bl	3bd0 <ticker_ticks_diff_get>
	diff += 3;
    6166:	1cc4      	adds	r4, r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6168:	2c09      	cmp	r4, #9
    616a:	d911      	bls.n	6190 <preempt_calc+0x3c>
		if (s_xtal_retained) {
    616c:	4b09      	ldr	r3, [pc, #36]	; (6194 <preempt_calc+0x40>)
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	b113      	cbz	r3, 6178 <preempt_calc+0x24>
    6172:	2000      	movs	r0, #0
    6174:	f7ff f9f2 	bl	555c <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    6178:	4632      	mov	r2, r6
    617a:	2100      	movs	r1, #0
    617c:	4628      	mov	r0, r5
    617e:	f7ff fa81 	bl	5684 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
    6182:	68ab      	ldr	r3, [r5, #8]
    6184:	441c      	add	r4, r3
		if (diff <
    6186:	2c26      	cmp	r4, #38	; 0x26
    6188:	d800      	bhi.n	618c <preempt_calc+0x38>
			hdr->ticks_preempt_to_start = diff;
    618a:	60ac      	str	r4, [r5, #8]
		return 1;
    618c:	2001      	movs	r0, #1
}
    618e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    6190:	2000      	movs	r0, #0
    6192:	bd70      	pop	{r4, r5, r6, pc}
    6194:	20001174 	.word	0x20001174

00006198 <event_scan>:
{
    6198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
    619c:	4b74      	ldr	r3, [pc, #464]	; (6370 <event_scan+0x1d8>)
    619e:	7cd9      	ldrb	r1, [r3, #19]
{
    61a0:	b08b      	sub	sp, #44	; 0x2c
    61a2:	4606      	mov	r6, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    61a4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    61a8:	461c      	mov	r4, r3
    61aa:	b129      	cbz	r1, 61b8 <event_scan+0x20>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    61ac:	4040      	eors	r0, r0
    61ae:	f380 8811 	msr	BASEPRI, r0
    61b2:	f04f 0004 	mov.w	r0, #4
    61b6:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
    61b8:	7c1b      	ldrb	r3, [r3, #16]
    61ba:	b2db      	uxtb	r3, r3
    61bc:	2b06      	cmp	r3, #6
    61be:	d1f5      	bne.n	61ac <event_scan+0x14>
	_radio.role = ROLE_SCAN;
    61c0:	2102      	movs	r1, #2
    61c2:	74e1      	strb	r1, [r4, #19]
	_radio.ticks_anchor = ticks_at_expire;
    61c4:	60a0      	str	r0, [r4, #8]
	_radio.ticker_id_prepare = 0;
    61c6:	7422      	strb	r2, [r4, #16]
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    61c8:	f894 0c2d 	ldrb.w	r0, [r4, #3117]	; 0xc2d
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
    61cc:	7463      	strb	r3, [r4, #17]
	_radio.scanner.state = 0;
    61ce:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	if(aux_scan){
    61d2:	4d68      	ldr	r5, [pc, #416]	; (6374 <event_scan+0x1dc>)
	_radio.state = STATE_RX;
    61d4:	2101      	movs	r1, #1
	_radio.scanner.state = 0;
    61d6:	f362 0341 	bfi	r3, r2, #1, #1
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    61da:	f000 0007 	and.w	r0, r0, #7
	_radio.state = STATE_RX;
    61de:	7521      	strb	r1, [r4, #20]
	_radio.scanner.state = 0;
    61e0:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
    61e4:	f7ff fd7a 	bl	5cdc <adv_scan_configure.constprop.49>
	if(aux_scan){
    61e8:	782f      	ldrb	r7, [r5, #0]
    61ea:	2f00      	cmp	r7, #0
    61ec:	f000 8085 	beq.w	62fa <event_scan+0x162>
		stop_time_ticker = k_cycle_get_32();
    61f0:	f7fb fe2e 	bl	1e50 <_timer_cycle_get_32>
    61f4:	4b60      	ldr	r3, [pc, #384]	; (6378 <event_scan+0x1e0>)
    61f6:	6018      	str	r0, [r3, #0]
		event_time_diff = (stop_time_ticker - start_time_ticker);
    61f8:	4b60      	ldr	r3, [pc, #384]	; (637c <event_scan+0x1e4>)
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	eba0 0e03 	sub.w	lr, r0, r3
    6200:	4b5f      	ldr	r3, [pc, #380]	; (6380 <event_scan+0x1e8>)
    6202:	f8c3 e000 	str.w	lr, [r3]
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    6206:	4b5f      	ldr	r3, [pc, #380]	; (6384 <event_scan+0x1ec>)
    6208:	681a      	ldr	r2, [r3, #0]
    620a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    620e:	fb82 2307 	smull	r2, r3, r2, r7
    6212:	fba2 010e 	umull	r0, r1, r2, lr
    6216:	fb0e 1103 	mla	r1, lr, r3, r1
    621a:	4b5b      	ldr	r3, [pc, #364]	; (6388 <event_scan+0x1f0>)
    621c:	681a      	ldr	r2, [r3, #0]
    621e:	17d3      	asrs	r3, r2, #31
    6220:	f7fa f822 	bl	268 <__aeabi_uldivmod>
    6224:	4b59      	ldr	r3, [pc, #356]	; (638c <event_scan+0x1f4>)
		counter++;
    6226:	4a5a      	ldr	r2, [pc, #360]	; (6390 <event_scan+0x1f8>)
		Time_difference_ticker = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_diff))/1000;
    6228:	fbb0 f0f7 	udiv	r0, r0, r7
    622c:	2100      	movs	r1, #0
    622e:	e9c3 0100 	strd	r0, r1, [r3]
		counter++;
    6232:	7813      	ldrb	r3, [r2, #0]
    6234:	3301      	adds	r3, #1
    6236:	7013      	strb	r3, [r2, #0]
		if(Time_difference_ticker < _radio.ext_scanner.chan_off){
    6238:	f604 4398 	addw	r3, r4, #3224	; 0xc98
    623c:	e9d3 8900 	ldrd	r8, r9, [r3]
    6240:	4549      	cmp	r1, r9
    6242:	bf08      	it	eq
    6244:	4540      	cmpeq	r0, r8
    6246:	f604 47a8 	addw	r7, r4, #3240	; 0xca8
    624a:	d206      	bcs.n	625a <event_scan+0xc2>
			_radio.ext_scanner.chan_off_calculation -= Time_difference_ticker;
    624c:	e9d7 2300 	ldrd	r2, r3, [r7]
    6250:	1a10      	subs	r0, r2, r0
    6252:	eb63 0101 	sbc.w	r1, r3, r1
    6256:	e9c7 0100 	strd	r0, r1, [r7]
		if( _radio.ext_scanner.chan_off_calculation < 0x7530){				//2710
    625a:	e9d7 2300 	ldrd	r2, r3, [r7]
    625e:	2100      	movs	r1, #0
    6260:	f247 502f 	movw	r0, #29999	; 0x752f
    6264:	4299      	cmp	r1, r3
    6266:	bf08      	it	eq
    6268:	4290      	cmpeq	r0, r2
    626a:	d343      	bcc.n	62f4 <event_scan+0x15c>
			if(_radio.ext_scanner.chan_off_calculation <= 0 ){
    626c:	4313      	orrs	r3, r2
				aux_scan = 0x00;
    626e:	bf08      	it	eq
    6270:	2300      	moveq	r3, #0
			chan_set(3);
    6272:	f04f 0003 	mov.w	r0, #3
				aux_scan = 0x00;
    6276:	bf08      	it	eq
    6278:	702b      	strbeq	r3, [r5, #0]
			chan_set(3);
    627a:	f7fe fd7f 	bl	4d7c <chan_set>
			aux_scan = 0x00;
    627e:	2300      	movs	r3, #0
    6280:	702b      	strb	r3, [r5, #0]
	radio_tmr_tifs_set(RADIO_TIFS);
    6282:	2096      	movs	r0, #150	; 0x96
    6284:	f003 faa0 	bl	97c8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6288:	2300      	movs	r3, #0
    628a:	4619      	mov	r1, r3
    628c:	461a      	mov	r2, r3
    628e:	4618      	mov	r0, r3
    6290:	f003 fa16 	bl	96c0 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6294:	f8d4 3d1c 	ldr.w	r3, [r4, #3356]	; 0xd1c
    6298:	f894 2d21 	ldrb.w	r2, [r4, #3361]	; 0xd21
    629c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    62a0:	3008      	adds	r0, #8
    62a2:	f003 f981 	bl	95a8 <radio_pkt_rx_set>
	radio_rssi_measure();
    62a6:	f003 fa23 	bl	96f0 <radio_rssi_measure>
	pdu = (void *)radio_pkt_scratch_get();
    62aa:	f003 f9f9 	bl	96a0 <radio_pkt_scratch_get>
	if (_radio.scanner.filter_policy) {
    62ae:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
    62b2:	f013 0f30 	tst.w	r3, #48	; 0x30
    62b6:	d007      	beq.n	62c8 <event_scan+0x130>
		struct ll_filter *wl = ctrl_filter_get(true);
    62b8:	2001      	movs	r0, #1
    62ba:	f002 fef5 	bl	90a8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
    62be:	1c82      	adds	r2, r0, #2
    62c0:	7841      	ldrb	r1, [r0, #1]
    62c2:	7800      	ldrb	r0, [r0, #0]
    62c4:	f003 fa36 	bl	9734 <radio_filter_configure>
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    62c8:	68e2      	ldr	r2, [r4, #12]
    62ca:	f106 0109 	add.w	r1, r6, #9
    62ce:	2000      	movs	r0, #0
    62d0:	f003 fa86 	bl	97e0 <radio_tmr_start>
	radio_tmr_end_capture();
    62d4:	f003 fb54 	bl	9980 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
    62d8:	2106      	movs	r1, #6
    62da:	4632      	mov	r2, r6
    62dc:	482d      	ldr	r0, [pc, #180]	; (6394 <event_scan+0x1fc>)
    62de:	f7ff ff39 	bl	6154 <preempt_calc>
    62e2:	4601      	mov	r1, r0
    62e4:	b300      	cbz	r0, 6328 <event_scan+0x190>
		_radio.state = STATE_STOP;
    62e6:	2304      	movs	r3, #4
    62e8:	7523      	strb	r3, [r4, #20]
}
    62ea:	b00b      	add	sp, #44	; 0x2c
    62ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
    62f0:	f003 b980 	b.w	95f4 <radio_disable>
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    62f4:	e9c7 8900 	strd	r8, r9, [r7]
    62f8:	e7c3      	b.n	6282 <event_scan+0xea>
		chan_set(37 + _radio.scanner.chan++);
    62fa:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    62fe:	f3c3 0081 	ubfx	r0, r3, #2, #2
    6302:	1c42      	adds	r2, r0, #1
    6304:	f362 0383 	bfi	r3, r2, #2, #2
    6308:	3025      	adds	r0, #37	; 0x25
    630a:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
    630e:	f7fe fd35 	bl	4d7c <chan_set>
		if (_radio.scanner.chan == 3) {
    6312:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    6316:	f003 020c 	and.w	r2, r3, #12
    631a:	2a0c      	cmp	r2, #12
			_radio.scanner.chan = 0;
    631c:	bf04      	itt	eq
    631e:	f367 0383 	bfieq	r3, r7, #2, #2
    6322:	f884 3c2c 	strbeq.w	r3, [r4, #3116]	; 0xc2c
    6326:	e7ac      	b.n	6282 <event_scan+0xea>
		ret = ticker_start(															//this ticker was for closing the window.we ll use it for Aux packet
    6328:	f641 537b 	movw	r3, #7547	; 0x1d7b
    632c:	9308      	str	r3, [sp, #32]
    632e:	4b1a      	ldr	r3, [pc, #104]	; (6398 <event_scan+0x200>)
    6330:	9307      	str	r3, [sp, #28]
    6332:	2204      	movs	r2, #4
    6334:	4b19      	ldr	r3, [pc, #100]	; (639c <event_scan+0x204>)
    6336:	9206      	str	r2, [sp, #24]
    6338:	9305      	str	r3, [sp, #20]
    633a:	9004      	str	r0, [sp, #16]
    633c:	9003      	str	r0, [sp, #12]
    633e:	9002      	str	r0, [sp, #8]
    6340:	9001      	str	r0, [sp, #4]
    6342:	f8d4 3c3c 	ldr.w	r3, [r4, #3132]	; 0xc3c
    6346:	3309      	adds	r3, #9
    6348:	9300      	str	r3, [sp, #0]
    634a:	4633      	mov	r3, r6
    634c:	f7fd fad0 	bl	38f0 <ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6350:	f030 0302 	bics.w	r3, r0, #2
    6354:	f47f af2a 	bne.w	61ac <event_scan+0x14>
		ret = ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    6358:	4619      	mov	r1, r3
    635a:	4618      	mov	r0, r3
    635c:	4a10      	ldr	r2, [pc, #64]	; (63a0 <event_scan+0x208>)
    635e:	f7fd fbe3 	bl	3b28 <ticker_job_idle_get>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    6362:	f030 0302 	bics.w	r3, r0, #2
    6366:	f47f af21 	bne.w	61ac <event_scan+0x14>
}
    636a:	b00b      	add	sp, #44	; 0x2c
    636c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6370:	20000380 	.word	0x20000380
    6374:	200010f0 	.word	0x200010f0
    6378:	20003530 	.word	0x20003530
    637c:	20003534 	.word	0x20003534
    6380:	20003558 	.word	0x20003558
    6384:	200061fc 	.word	0x200061fc
    6388:	200061f8 	.word	0x200061f8
    638c:	20003500 	.word	0x20003500
    6390:	200010f4 	.word	0x200010f4
    6394:	20000f9c 	.word	0x20000f9c
    6398:	00005c65 	.word	0x00005c65
    639c:	00005bb5 	.word	0x00005bb5
    63a0:	00005509 	.word	0x00005509

000063a4 <ctrl_tx_enqueue>:
{
    63a4:	b510      	push	{r4, lr}
	    !conn->empty &&
    63a6:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    63aa:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (
    63ae:	f014 0f80 	tst.w	r4, #128	; 0x80
    63b2:	d118      	bne.n	63e6 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    63b4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	    !conn->empty &&
    63b8:	b1ab      	cbz	r3, 63e6 <ctrl_tx_enqueue+0x42>
	    conn->pkt_tx_head &&
    63ba:	0724      	lsls	r4, r4, #28
    63bc:	d413      	bmi.n	63e6 <ctrl_tx_enqueue+0x42>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    63be:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    63c2:	42a3      	cmp	r3, r4
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    63c4:	bf04      	itt	eq
    63c6:	681c      	ldreq	r4, [r3, #0]
    63c8:	f8c0 40f8 	streq.w	r4, [r0, #248]	; 0xf8
		if (!conn->pkt_tx_ctrl) {
    63cc:	b992      	cbnz	r2, 63f4 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    63ce:	681a      	ldr	r2, [r3, #0]
    63d0:	600a      	str	r2, [r1, #0]
			conn->pkt_tx_head->next = node_tx;
    63d2:	6019      	str	r1, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
    63d4:	f8c0 10f0 	str.w	r1, [r0, #240]	; 0xf0
	conn->pkt_tx_ctrl_last = node_tx;
    63d8:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
	if (node_tx->next == 0) {
    63dc:	680b      	ldr	r3, [r1, #0]
    63de:	b90b      	cbnz	r3, 63e4 <ctrl_tx_enqueue+0x40>
		conn->pkt_tx_last = node_tx;
    63e0:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    63e4:	bd10      	pop	{r4, pc}
		if (!conn->pkt_tx_ctrl) {
    63e6:	b92a      	cbnz	r2, 63f4 <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    63e8:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
    63ec:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
    63ee:	f8c0 10ec 	str.w	r1, [r0, #236]	; 0xec
    63f2:	e7ef      	b.n	63d4 <ctrl_tx_enqueue+0x30>
	node_tx->next = conn->pkt_tx_ctrl_last->next;
    63f4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    63f8:	681a      	ldr	r2, [r3, #0]
    63fa:	600a      	str	r2, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
    63fc:	6019      	str	r1, [r3, #0]
    63fe:	e7eb      	b.n	63d8 <ctrl_tx_enqueue+0x34>

00006400 <ctrl_tx_sec_enqueue>:
{
    6400:	b410      	push	{r4}
	if (conn->pause_tx) {
    6402:	f890 40a8 	ldrb.w	r4, [r0, #168]	; 0xa8
    6406:	0724      	lsls	r4, r4, #28
{
    6408:	460a      	mov	r2, r1
	if (conn->pause_tx) {
    640a:	d50f      	bpl.n	642c <ctrl_tx_sec_enqueue+0x2c>
		if (!conn->pkt_tx_ctrl) {
    640c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
    6410:	b931      	cbnz	r1, 6420 <ctrl_tx_sec_enqueue+0x20>
			node_tx->next = conn->pkt_tx_head;
    6412:	f8d0 10ec 	ldr.w	r1, [r0, #236]	; 0xec
    6416:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_head = node_tx;
    6418:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
}
    641c:	bc10      	pop	{r4}
    641e:	4770      	bx	lr
			node_tx->next = conn->pkt_tx_ctrl_last->next;
    6420:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    6424:	6819      	ldr	r1, [r3, #0]
    6426:	6011      	str	r1, [r2, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
    6428:	601a      	str	r2, [r3, #0]
    642a:	e7f7      	b.n	641c <ctrl_tx_sec_enqueue+0x1c>
}
    642c:	bc10      	pop	{r4}
		ctrl_tx_enqueue(conn, node_tx);
    642e:	f7ff bfb9 	b.w	63a4 <ctrl_tx_enqueue>
	...

00006434 <feature_rsp_send>:
{
    6434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6436:	4f21      	ldr	r7, [pc, #132]	; (64bc <feature_rsp_send+0x88>)
{
    6438:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    643a:	f607 503c 	addw	r0, r7, #3388	; 0xd3c
{
    643e:	460e      	mov	r6, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6440:	f7fc fbf3 	bl	2c2a <mem_acquire>
	if (!node_tx) {
    6444:	4604      	mov	r4, r0
    6446:	b3b0      	cbz	r0, 64b6 <feature_rsp_send+0x82>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6448:	7933      	ldrb	r3, [r6, #4]
	       (features[1] << 8) | (features[2] << 16);
    644a:	7971      	ldrb	r1, [r6, #5]
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    644c:	f8d7 2cfc 	ldr.w	r2, [r7, #3324]	; 0xcfc
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    6450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    6454:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    6458:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    645c:	f043 0310 	orr.w	r3, r3, #16
    6460:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    6464:	79b1      	ldrb	r1, [r6, #6]
    6466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
    646a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    646e:	f3c1 0110 	ubfx	r1, r1, #0, #17
    6472:	400b      	ands	r3, r1
    6474:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	_radio.conn_curr->common.fex_valid = 1;
    6478:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
    647c:	f043 0320 	orr.w	r3, r3, #32
    6480:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6484:	7903      	ldrb	r3, [r0, #4]
    6486:	f043 0303 	orr.w	r3, r3, #3
    648a:	7103      	strb	r3, [r0, #4]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    648c:	2208      	movs	r2, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    648e:	2309      	movs	r3, #9
    6490:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    6492:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->llctrl.feature_rsp.features[0], 0x00,
    6494:	2100      	movs	r1, #0
    6496:	4410      	add	r0, r2
    6498:	f7fa f8da 	bl	650 <memset>
		conn->llcp_features & 0xFF;
    649c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	pdu_ctrl_tx->llctrl.feature_req.features[0] =
    64a0:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
    64a2:	0a1a      	lsrs	r2, r3, #8
		(conn->llcp_features >> 16) & 0xFF;
    64a4:	0c1b      	lsrs	r3, r3, #16
	ctrl_tx_sec_enqueue(conn, node_tx);
    64a6:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.feature_req.features[1] =
    64a8:	7262      	strb	r2, [r4, #9]
	pdu_ctrl_tx->llctrl.feature_req.features[2] =
    64aa:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
    64ac:	4621      	mov	r1, r4
    64ae:	f7ff ffa7 	bl	6400 <ctrl_tx_sec_enqueue>
	return 0;
    64b2:	2000      	movs	r0, #0
    64b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
    64b6:	2001      	movs	r0, #1
}
    64b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64ba:	bf00      	nop
    64bc:	20000380 	.word	0x20000380

000064c0 <event_connection_prepare>:
{
    64c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_ASSERT(!_radio.ticker_id_prepare);
    64c4:	4d6f      	ldr	r5, [pc, #444]	; (6684 <event_connection_prepare+0x1c4>)
{
    64c6:	461c      	mov	r4, r3
	LL_ASSERT(!_radio.ticker_id_prepare);
    64c8:	7c2b      	ldrb	r3, [r5, #16]
{
    64ca:	b08f      	sub	sp, #60	; 0x3c
    64cc:	4680      	mov	r8, r0
    64ce:	4689      	mov	r9, r1
	LL_ASSERT(!_radio.ticker_id_prepare);
    64d0:	b12b      	cbz	r3, 64de <event_connection_prepare+0x1e>
			LL_ASSERT(0);
    64d2:	4040      	eors	r0, r0
    64d4:	f380 8811 	msr	BASEPRI, r0
    64d8:	f04f 0004 	mov.w	r0, #4
    64dc:	df02      	svc	2
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
    64de:	f894 3020 	ldrb.w	r3, [r4, #32]
    64e2:	3307      	adds	r3, #7
    64e4:	b2db      	uxtb	r3, r3
    64e6:	742b      	strb	r3, [r5, #16]
	if (conn->role) {
    64e8:	f994 301d 	ldrsb.w	r3, [r4, #29]
    64ec:	2b00      	cmp	r3, #0
    64ee:	da09      	bge.n	6504 <event_connection_prepare+0x44>
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    64f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->slave.window_widening_prepare_us +=
    64f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
		    conn->slave.window_widening_periodic_us * (lazy + 1);
    64f4:	fb02 3303 	mla	r3, r2, r3, r3
		conn->slave.window_widening_prepare_us +=
    64f8:	440b      	add	r3, r1
		    conn->slave.window_widening_max_us) {
    64fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
		conn->slave.window_widening_prepare_us +=
    64fc:	6463      	str	r3, [r4, #68]	; 0x44
		if (conn->slave.window_widening_prepare_us >
    64fe:	428b      	cmp	r3, r1
			conn->slave.window_widening_prepare_us =
    6500:	bf88      	it	hi
    6502:	6461      	strhi	r1, [r4, #68]	; 0x44
	conn->latency_prepare += lazy;
    6504:	8d26      	ldrh	r6, [r4, #40]	; 0x28
	if (conn->llcp_ack != conn->llcp_req) {
    6506:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
	conn->latency_prepare += lazy;
    650a:	4432      	add	r2, r6
	event_counter = conn->event_counter + conn->latency_prepare;
    650c:	8c66      	ldrh	r6, [r4, #34]	; 0x22
	conn->latency_prepare += lazy;
    650e:	b292      	uxth	r2, r2
    6510:	8522      	strh	r2, [r4, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
    6512:	4432      	add	r2, r6
    6514:	b296      	uxth	r6, r2
	if (conn->llcp_ack != conn->llcp_req) {
    6516:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    651a:	429a      	cmp	r2, r3
    651c:	d071      	beq.n	6602 <event_connection_prepare+0x142>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    651e:	2005      	movs	r0, #5
    6520:	f7ff fc06 	bl	5d30 <event_stop.constprop.50>
		switch (conn->llcp_type) {
    6524:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    6528:	3b01      	subs	r3, #1
    652a:	2b03      	cmp	r3, #3
    652c:	d8d1      	bhi.n	64d2 <event_connection_prepare+0x12>
    652e:	e8df f013 	tbh	[pc, r3, lsl #1]
    6532:	0004      	.short	0x0004
    6534:	02680226 	.word	0x02680226
    6538:	02b1      	.short	0x02b1
	if (!conn_upd) {
    653a:	f8d5 3d68 	ldr.w	r3, [r5, #3432]	; 0xd68
    653e:	b90b      	cbnz	r3, 6544 <event_connection_prepare+0x84>
		_radio.conn_upd = conn;
    6540:	f8c5 4d68 	str.w	r4, [r5, #3432]	; 0xd68
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
    6544:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6548:	f013 0303 	ands.w	r3, r3, #3
    654c:	f000 80a6 	beq.w	669c <event_connection_prepare+0x1dc>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6550:	484d      	ldr	r0, [pc, #308]	; (6688 <event_connection_prepare+0x1c8>)
    6552:	f7fc fb6a 	bl	2c2a <mem_acquire>
		if (!node_tx) {
    6556:	4605      	mov	r5, r0
    6558:	2800      	cmp	r0, #0
    655a:	d052      	beq.n	6602 <event_connection_prepare+0x142>
		switch (conn->llcp.conn_upd.state) {
    655c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6560:	f003 0203 	and.w	r2, r3, #3
    6564:	2a01      	cmp	r2, #1
    6566:	d1b4      	bne.n	64d2 <event_connection_prepare+0x12>
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    6568:	f36f 0301 	bfc	r3, #0, #2
    656c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		event_counter + conn->latency + 6;
    6570:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    6572:	3306      	adds	r3, #6
    6574:	4433      	add	r3, r6
    6576:	b29b      	uxth	r3, r3
	conn->llcp.conn_upd.instant =
    6578:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    657c:	7902      	ldrb	r2, [r0, #4]
    657e:	f042 0203 	orr.w	r2, r2, #3
    6582:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    6584:	220c      	movs	r2, #12
    6586:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    6588:	2200      	movs	r2, #0
    658a:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size =
    658c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    6590:	7202      	strb	r2, [r0, #8]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
    6592:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6594:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6598:	fbb2 f2f1 	udiv	r2, r2, r1
    659c:	f8a0 2009 	strh.w	r2, [r0, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    65a0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    65a4:	f8a0 200b 	strh.w	r2, [r0, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    65a8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    65ac:	f8a0 200d 	strh.w	r2, [r0, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    65b0:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    65b4:	f8a0 200f 	strh.w	r2, [r0, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    65b8:	f8a0 3011 	strh.w	r3, [r0, #17]
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    65bc:	6822      	ldr	r2, [r4, #0]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    65be:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    65c2:	2a00      	cmp	r2, #0
    65c4:	da0a      	bge.n	65dc <event_connection_prepare+0x11c>
			u32_t ticks_prepare_to_start =
    65c6:	68a3      	ldr	r3, [r4, #8]
    65c8:	6861      	ldr	r1, [r4, #4]
				(conn->hdr.ticks_xtal_to_start &
    65ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    65ce:	428b      	cmp	r3, r1
    65d0:	bf2c      	ite	cs
    65d2:	4443      	addcs	r3, r8
    65d4:	eb08 0301 	addcc.w	r3, r8, r1
    65d8:	1a9b      	subs	r3, r3, r2
    65da:	67a3      	str	r3, [r4, #120]	; 0x78
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
    65dc:	f105 0309 	add.w	r3, r5, #9
    65e0:	6763      	str	r3, [r4, #116]	; 0x74
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    65e2:	4b2a      	ldr	r3, [pc, #168]	; (668c <event_connection_prepare+0x1cc>)
    65e4:	4a2a      	ldr	r2, [pc, #168]	; (6690 <event_connection_prepare+0x1d0>)
    65e6:	60da      	str	r2, [r3, #12]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    65e8:	2201      	movs	r2, #1
    65ea:	4611      	mov	r1, r2
    65ec:	2000      	movs	r0, #0
		mayfly_sched_offset->param = (void *)conn;
    65ee:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    65f0:	f7fc fbd4 	bl	2d9c <mayfly_enqueue>
		LL_ASSERT(!retval);
    65f4:	2800      	cmp	r0, #0
    65f6:	f47f af6c 	bne.w	64d2 <event_connection_prepare+0x12>
			ctrl_tx_enqueue(conn, node_tx);
    65fa:	4629      	mov	r1, r5
    65fc:	4620      	mov	r0, r4
    65fe:	f7ff fed1 	bl	63a4 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    6602:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
    6606:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    660a:	429a      	cmp	r2, r3
    660c:	d01d      	beq.n	664a <event_connection_prepare+0x18a>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    660e:	2005      	movs	r0, #5
    6610:	f7ff fb8e 	bl	5d30 <event_stop.constprop.50>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6614:	481c      	ldr	r0, [pc, #112]	; (6688 <event_connection_prepare+0x1c8>)
    6616:	f7fc fb08 	bl	2c2a <mem_acquire>
		if (node_tx) {
    661a:	4601      	mov	r1, r0
    661c:	b1a8      	cbz	r0, 664a <event_connection_prepare+0x18a>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    661e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
    6622:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6626:	7903      	ldrb	r3, [r0, #4]
    6628:	f043 0303 	orr.w	r3, r3, #3
    662c:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    662e:	2302      	movs	r3, #2
    6630:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    6632:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.terminate_ind.error_code =
    6634:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    6638:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
    663a:	4620      	mov	r0, r4
    663c:	f7ff feb2 	bl	63a4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
    6640:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			if (conn->procedure_expire <= 1) {
    6642:	2b01      	cmp	r3, #1
				conn->procedure_expire++;
    6644:	bf98      	it	ls
    6646:	3301      	addls	r3, #1
    6648:	86a3      	strh	r3, [r4, #52]	; 0x34
	event_common_prepare(ticks_at_expire, remainder,
    664a:	f894 3020 	ldrb.w	r3, [r4, #32]
    664e:	f994 501d 	ldrsb.w	r5, [r4, #29]
    6652:	4810      	ldr	r0, [pc, #64]	; (6694 <event_connection_prepare+0x1d4>)
    6654:	4910      	ldr	r1, [pc, #64]	; (6698 <event_connection_prepare+0x1d8>)
    6656:	68a2      	ldr	r2, [r4, #8]
    6658:	9403      	str	r4, [sp, #12]
    665a:	3307      	adds	r3, #7
    665c:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    6660:	bf38      	it	cc
    6662:	4601      	movcc	r1, r0
    6664:	b2db      	uxtb	r3, r3
    6666:	e88d 000c 	stmia.w	sp, {r2, r3}
    666a:	9102      	str	r1, [sp, #8]
    666c:	1d23      	adds	r3, r4, #4
    666e:	4622      	mov	r2, r4
    6670:	4649      	mov	r1, r9
    6672:	4640      	mov	r0, r8
	conn->event_counter = event_counter + 1;
    6674:	3601      	adds	r6, #1
	event_common_prepare(ticks_at_expire, remainder,
    6676:	f7ff fb69 	bl	5d4c <event_common_prepare>
	conn->event_counter = event_counter + 1;
    667a:	8466      	strh	r6, [r4, #34]	; 0x22
}
    667c:	b00f      	add	sp, #60	; 0x3c
    667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6682:	bf00      	nop
    6684:	20000380 	.word	0x20000380
    6688:	200010bc 	.word	0x200010bc
    668c:	20006130 	.word	0x20006130
    6690:	000058cd 	.word	0x000058cd
    6694:	00008681 	.word	0x00008681
    6698:	00006b7d 	.word	0x00006b7d
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    669c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    66a0:	1bf7      	subs	r7, r6, r7
    66a2:	b2bf      	uxth	r7, r7
	} else if (instant_latency <= 0x7FFF) {
    66a4:	0438      	lsls	r0, r7, #16
    66a6:	d4ac      	bmi.n	6602 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    66a8:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    66ac:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
		if (_radio.conn_upd == conn) {
    66b0:	f8d5 2d68 	ldr.w	r2, [r5, #3432]	; 0xd68
		_radio.ticker_id_prepare = 0;
    66b4:	742b      	strb	r3, [r5, #16]
		if (_radio.conn_upd == conn) {
    66b6:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    66b8:	bf08      	it	eq
    66ba:	f8c5 3d68 	streq.w	r3, [r5, #3432]	; 0xd68
		if ((conn->llcp.conn_upd.interval !=
    66be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    66c2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    66c4:	429a      	cmp	r2, r3
    66c6:	d114      	bne.n	66f2 <event_connection_prepare+0x232>
		     conn->conn_interval) ||
    66c8:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
    66cc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    66ce:	4299      	cmp	r1, r3
    66d0:	d10f      	bne.n	66f2 <event_connection_prepare+0x232>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
    66d2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    66d6:	435a      	muls	r2, r3
    66d8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    66dc:	f242 7110 	movw	r1, #10000	; 0x2710
    66e0:	fb01 2303 	mla	r3, r1, r3, r2
    66e4:	3b01      	subs	r3, #1
    66e6:	fb93 f3f2 	sdiv	r3, r3, r2
		    (conn->llcp.conn_upd.latency != conn->latency) ||
    66ea:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    66ec:	b29b      	uxth	r3, r3
    66ee:	429a      	cmp	r2, r3
    66f0:	d016      	beq.n	6720 <event_connection_prepare+0x260>
			node_rx = packet_rx_reserve_get(2);
    66f2:	2002      	movs	r0, #2
    66f4:	f7fe f998 	bl	4a28 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    66f8:	2800      	cmp	r0, #0
    66fa:	f43f aeea 	beq.w	64d2 <event_connection_prepare+0x12>
			node_rx->hdr.handle = conn->handle;
    66fe:	8c23      	ldrh	r3, [r4, #32]
    6700:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    6702:	2308      	movs	r3, #8
    6704:	7103      	strb	r3, [r0, #4]
			radio_le_conn_update_cmplt->status =
    6706:	2300      	movs	r3, #0
    6708:	72c3      	strb	r3, [r0, #11]
			radio_le_conn_update_cmplt->interval =
    670a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    670e:	8183      	strh	r3, [r0, #12]
			radio_le_conn_update_cmplt->latency =
    6710:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    6714:	81c3      	strh	r3, [r0, #14]
			radio_le_conn_update_cmplt->timeout =
    6716:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    671a:	8203      	strh	r3, [r0, #16]
			packet_rx_enqueue();
    671c:	f7ff f86a 	bl	57f4 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & XON_BITMASK) {
    6720:	6823      	ldr	r3, [r4, #0]
    6722:	6866      	ldr	r6, [r4, #4]
    6724:	2b00      	cmp	r3, #0
    6726:	da09      	bge.n	673c <event_connection_prepare+0x27c>
			u32_t ticks_prepare_to_start =
    6728:	68a0      	ldr	r0, [r4, #8]
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    672a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    672e:	42b0      	cmp	r0, r6
    6730:	bf2c      	ite	cs
    6732:	4480      	addcs	r8, r0
    6734:	44b0      	addcc	r8, r6
			conn->hdr.ticks_xtal_to_start &= ~XON_BITMASK;
    6736:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    6738:	eba8 0803 	sub.w	r8, r8, r3
		conn_interval_old = instant_latency * conn->conn_interval;
    673c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			conn->llcp.conn_upd.interval;
    673e:	f8b4 a062 	ldrh.w	sl, [r4, #98]	; 0x62
    6742:	49c9      	ldr	r1, [pc, #804]	; (6a68 <event_connection_prepare+0x5a8>)
		conn_interval_old = instant_latency * conn->conn_interval;
    6744:	fb13 f307 	smulbb	r3, r3, r7
    6748:	b29b      	uxth	r3, r3
		latency = conn_interval_old /
    674a:	fbb3 f2fa 	udiv	r2, r3, sl
    674e:	fa1f f982 	uxth.w	r9, r2
		conn_interval_new = latency *
    6752:	fb1a f009 	smulbb	r0, sl, r9
    6756:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
    6758:	4283      	cmp	r3, r0
    675a:	f080 80f2 	bcs.w	6942 <event_connection_prepare+0x482>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    675e:	1ac0      	subs	r0, r0, r3
    6760:	f240 1223 	movw	r2, #291	; 0x123
    6764:	4342      	muls	r2, r0
    6766:	17c3      	asrs	r3, r0, #31
    6768:	fb01 2303 	mla	r3, r1, r3, r2
    676c:	fba0 0101 	umull	r0, r1, r0, r1
    6770:	4419      	add	r1, r3
    6772:	a3bb      	add	r3, pc, #748	; (adr r3, 6a60 <event_connection_prepare+0x5a0>)
    6774:	e9d3 2300 	ldrd	r2, r3, [r3]
    6778:	f7f9 fd76 	bl	268 <__aeabi_uldivmod>
    677c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6780:	eb00 0308 	add.w	r3, r0, r8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    6784:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
    6786:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6788:	f8df b304 	ldr.w	fp, [pc, #772]	; 6a90 <event_connection_prepare+0x5d0>
    678c:	1bdb      	subs	r3, r3, r7
    678e:	444b      	add	r3, r9
    6790:	8523      	strh	r3, [r4, #40]	; 0x28
		ticks_slot_offset =
    6792:	6823      	ldr	r3, [r4, #0]
    6794:	429e      	cmp	r6, r3
    6796:	bf38      	it	cc
    6798:	461e      	movcc	r6, r3
		if (conn->role) {
    679a:	f994 301d 	ldrsb.w	r3, [r4, #29]
		ticks_slot_offset =
    679e:	960d      	str	r6, [sp, #52]	; 0x34
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    67a0:	f240 48e2 	movw	r8, #1250	; 0x4e2
		if (conn->role) {
    67a4:	2b00      	cmp	r3, #0
    67a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    67a8:	930c      	str	r3, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
    67aa:	fb08 f60a 	mul.w	r6, r8, sl
		if (conn->role) {
    67ae:	f280 80d9 	bge.w	6964 <event_connection_prepare+0x4a4>
				conn->slave.window_widening_periodic_us *
    67b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
			conn->slave.window_widening_prepare_us -=
    67b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    67b6:	fb03 2717 	mls	r7, r3, r7, r2
				(((gc_lookup_ppm[_radio.sca] +
    67ba:	f895 3d08 	ldrb.w	r3, [r5, #3336]	; 0xd08
    67be:	4aab      	ldr	r2, [pc, #684]	; (6a6c <event_connection_prepare+0x5ac>)
    67c0:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
    67c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    67c8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    67cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				conn->llcp.conn_upd.win_size * 1250;
    67d0:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
				(((gc_lookup_ppm[_radio.sca] +
    67d4:	441d      	add	r5, r3
				   gc_lookup_ppm[conn->slave.sca]) *
    67d6:	4375      	muls	r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    67d8:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    67dc:	4ba4      	ldr	r3, [pc, #656]	; (6a70 <event_connection_prepare+0x5b0>)
				conn->llcp.conn_upd.win_size * 1250;
    67de:	fb08 f202 	mul.w	r2, r8, r2
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    67e2:	f205 253f 	addw	r5, r5, #575	; 0x23f
    67e6:	fbb5 f5f3 	udiv	r5, r5, r3
				(conn_interval_us >> 1) - RADIO_TIFS;
    67ea:	0873      	lsrs	r3, r6, #1
				conn->slave.window_widening_periodic_us *
    67ec:	fb05 f009 	mul.w	r0, r5, r9
				(conn_interval_us >> 1) - RADIO_TIFS;
    67f0:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_prepare_us +=
    67f2:	4407      	add	r7, r0
			conn->slave.window_size_prepare_us =
    67f4:	64e2      	str	r2, [r4, #76]	; 0x4c
			conn->slave.ticks_to_offset = 0;
    67f6:	2200      	movs	r2, #0
			conn->slave.window_widening_prepare_us +=
    67f8:	429f      	cmp	r7, r3
    67fa:	bf94      	ite	ls
    67fc:	6467      	strls	r7, [r4, #68]	; 0x44
    67fe:	6463      	strhi	r3, [r4, #68]	; 0x44
			conn->slave.window_widening_periodic_us =
    6800:	63e5      	str	r5, [r4, #60]	; 0x3c
			conn->slave.window_widening_max_us =
    6802:	6423      	str	r3, [r4, #64]	; 0x40
			conn->slave.ticks_to_offset = 0;
    6804:	65a2      	str	r2, [r4, #88]	; 0x58
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    6806:	fba0 010b 	umull	r0, r1, r0, fp
    680a:	a395      	add	r3, pc, #596	; (adr r3, 6a60 <event_connection_prepare+0x5a0>)
    680c:	e9d3 2300 	ldrd	r2, r3, [r3]
    6810:	f7f9 fd2a 	bl	268 <__aeabi_uldivmod>
    6814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6816:	1a1b      	subs	r3, r3, r0
    6818:	930b      	str	r3, [sp, #44]	; 0x2c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    681a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    681c:	fbb3 f0f8 	udiv	r0, r3, r8
    6820:	fb08 f000 	mul.w	r0, r8, r0
    6824:	a38e      	add	r3, pc, #568	; (adr r3, 6a60 <event_connection_prepare+0x5a0>)
    6826:	e9d3 2300 	ldrd	r2, r3, [r3]
    682a:	fba0 010b 	umull	r0, r1, r0, fp
    682e:	f7f9 fd1b 	bl	268 <__aeabi_uldivmod>
			periodic_us -= conn->slave.window_widening_periodic_us;
    6832:	1b75      	subs	r5, r6, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    6834:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
		conn->latency = conn->llcp.conn_upd.latency;
    6838:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    683c:	84e3      	strh	r3, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    683e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
		conn->conn_interval = conn->llcp.conn_upd.interval;
    6842:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
    6846:	f242 7210 	movw	r2, #10000	; 0x2710
    684a:	fb02 6303 	mla	r3, r2, r3, r6
    684e:	3b01      	subs	r3, #1
    6850:	fbb3 f3f6 	udiv	r3, r3, r6
    6854:	85e3      	strh	r3, [r4, #46]	; 0x2e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    6856:	4b87      	ldr	r3, [pc, #540]	; (6a74 <event_connection_prepare+0x5b4>)
    6858:	4433      	add	r3, r6
    685a:	fbb3 f6f6 	udiv	r6, r3, r6
		if (!conn->llcp.conn_upd.is_internal) {
    685e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    6862:	8666      	strh	r6, [r4, #50]	; 0x32
		if (!conn->llcp.conn_upd.is_internal) {
    6864:	f013 0304 	ands.w	r3, r3, #4
			conn->supervision_expire = 0;
    6868:	bf08      	it	eq
    686a:	8623      	strheq	r3, [r4, #48]	; 0x30
		mayfly_was_enabled =
    686c:	2101      	movs	r1, #1
    686e:	2000      	movs	r0, #0
    6870:	f003 f962 	bl	9b38 <mayfly_is_enabled>
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6874:	2200      	movs	r2, #0
    6876:	2101      	movs	r1, #1
		mayfly_was_enabled =
    6878:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    687a:	4610      	mov	r0, r2
    687c:	f7fc fa66 	bl	2d4c <mayfly_enable>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    6880:	f894 2020 	ldrb.w	r2, [r4, #32]
		ticker_status =
    6884:	f641 737b 	movw	r3, #8059	; 0x1f7b
    6888:	2100      	movs	r1, #0
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    688a:	3207      	adds	r2, #7
		ticker_status =
    688c:	9300      	str	r3, [sp, #0]
    688e:	b2d2      	uxtb	r2, r2
    6890:	4b79      	ldr	r3, [pc, #484]	; (6a78 <event_connection_prepare+0x5b8>)
    6892:	4608      	mov	r0, r1
    6894:	f7fd f8ca 	bl	3a2c <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6898:	f030 0802 	bics.w	r8, r0, #2
    689c:	f47f ae19 	bne.w	64d2 <event_connection_prepare+0x12>
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    68a0:	fba5 ab0b 	umull	sl, fp, r5, fp
    68a4:	a36e      	add	r3, pc, #440	; (adr r3, 6a60 <event_connection_prepare+0x5a0>)
    68a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    68aa:	4650      	mov	r0, sl
    68ac:	4659      	mov	r1, fp
    68ae:	f7f9 fcdb 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    68b2:	4a72      	ldr	r2, [pc, #456]	; (6a7c <event_connection_prepare+0x5bc>)
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    68b4:	f894 6020 	ldrb.w	r6, [r4, #32]
    68b8:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    68bc:	2307      	movs	r3, #7
    68be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    68c2:	2100      	movs	r1, #0
    68c4:	4343      	muls	r3, r0
    68c6:	fb02 3301 	mla	r3, r2, r1, r3
    68ca:	fba0 0102 	umull	r0, r1, r0, r2
    68ce:	ebba 0000 	subs.w	r0, sl, r0
    68d2:	4419      	add	r1, r3
    68d4:	eb6b 0101 	sbc.w	r1, fp, r1
    68d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    68dc:	2300      	movs	r3, #0
    68de:	f7f9 fcc3 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    68e2:	68e3      	ldr	r3, [r4, #12]
    68e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    68e6:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    68ea:	4965      	ldr	r1, [pc, #404]	; (6a80 <event_connection_prepare+0x5c0>)
		ticker_status =
    68ec:	9002      	str	r0, [sp, #8]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    68ee:	441a      	add	r2, r3
    68f0:	4613      	mov	r3, r2
    68f2:	4a64      	ldr	r2, [pc, #400]	; (6a84 <event_connection_prepare+0x5c4>)
		ticker_status =
    68f4:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    68f6:	ea12 022e 	ands.w	r2, r2, lr, asr #32
    68fa:	bf38      	it	cc
    68fc:	460a      	movcc	r2, r1
    68fe:	3607      	adds	r6, #7
		ticker_status =
    6900:	f641 718b 	movw	r1, #8075	; 0x1f8b
    6904:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6906:	b2f6      	uxtb	r6, r6
		ticker_status =
    6908:	495b      	ldr	r1, [pc, #364]	; (6a78 <event_connection_prepare+0x5b8>)
    690a:	9107      	str	r1, [sp, #28]
    690c:	9205      	str	r2, [sp, #20]
    690e:	9406      	str	r4, [sp, #24]
    6910:	f8cd 800c 	str.w	r8, [sp, #12]
    6914:	9501      	str	r5, [sp, #4]
    6916:	9700      	str	r7, [sp, #0]
    6918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    691a:	4632      	mov	r2, r6
    691c:	4641      	mov	r1, r8
    691e:	4640      	mov	r0, r8
    6920:	f7fc ffe6 	bl	38f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6924:	f030 0002 	bics.w	r0, r0, #2
    6928:	f47f add3 	bne.w	64d2 <event_connection_prepare+0x12>
		if (mayfly_was_enabled) {
    692c:	f1b9 0f00 	cmp.w	r9, #0
    6930:	f43f aea4 	beq.w	667c <event_connection_prepare+0x1bc>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6934:	2201      	movs	r2, #1
    6936:	4611      	mov	r1, r2
}
    6938:	b00f      	add	sp, #60	; 0x3c
    693a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    693e:	f7fc ba05 	b.w	2d4c <mayfly_enable>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    6942:	fb0a 3212 	mls	r2, sl, r2, r3
    6946:	b292      	uxth	r2, r2
    6948:	fba2 0101 	umull	r0, r1, r2, r1
    694c:	f240 1323 	movw	r3, #291	; 0x123
    6950:	fb03 1102 	mla	r1, r3, r2, r1
    6954:	a342      	add	r3, pc, #264	; (adr r3, 6a60 <event_connection_prepare+0x5a0>)
    6956:	e9d3 2300 	ldrd	r2, r3, [r3]
    695a:	f7f9 fc85 	bl	268 <__aeabi_uldivmod>
    695e:	eba8 0300 	sub.w	r3, r8, r0
    6962:	e70f      	b.n	6784 <event_connection_prepare+0x2c4>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    6964:	990c      	ldr	r1, [sp, #48]	; 0x30
    6966:	a33e      	add	r3, pc, #248	; (adr r3, 6a60 <event_connection_prepare+0x5a0>)
    6968:	e9d3 2300 	ldrd	r2, r3, [r3]
    696c:	fba1 010b 	umull	r0, r1, r1, fp
    6970:	f7f9 fc7a 	bl	268 <__aeabi_uldivmod>
    6974:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
    6978:	1c47      	adds	r7, r0, #1
		periodic_us = conn_interval_us;
    697a:	4635      	mov	r5, r6
    697c:	e75c      	b.n	6838 <event_connection_prepare+0x378>
	if (conn->llcp.chan_map.initiate) {
    697e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    6982:	b30b      	cbz	r3, 69c8 <event_connection_prepare+0x508>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6984:	4840      	ldr	r0, [pc, #256]	; (6a88 <event_connection_prepare+0x5c8>)
    6986:	f7fc f950 	bl	2c2a <mem_acquire>
		if (node_tx) {
    698a:	4605      	mov	r5, r0
    698c:	2800      	cmp	r0, #0
    698e:	f43f ae38 	beq.w	6602 <event_connection_prepare+0x142>
			conn->llcp.chan_map.initiate = 0;
    6992:	2300      	movs	r3, #0
    6994:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
				event_counter + conn->latency + 6;
    6998:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    699a:	3306      	adds	r3, #6
    699c:	4433      	add	r3, r6
			conn->llcp.chan_map.instant =
    699e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    69a2:	7903      	ldrb	r3, [r0, #4]
    69a4:	f043 0303 	orr.w	r3, r3, #3
    69a8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    69aa:	2308      	movs	r3, #8
    69ac:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    69ae:	2301      	movs	r3, #1
    69b0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    69b2:	2205      	movs	r2, #5
    69b4:	f104 0161 	add.w	r1, r4, #97	; 0x61
    69b8:	3008      	adds	r0, #8
    69ba:	f7f9 fe1d 	bl	5f8 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    69be:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    69c2:	f8a5 300d 	strh.w	r3, [r5, #13]
    69c6:	e618      	b.n	65fa <event_connection_prepare+0x13a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    69c8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    69cc:	1af3      	subs	r3, r6, r3
    69ce:	0419      	lsls	r1, r3, #16
    69d0:	f53f ae17 	bmi.w	6602 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    69d4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    69d8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		memcpy(&conn->data_chan_map[0],
    69dc:	f104 0517 	add.w	r5, r4, #23
    69e0:	2205      	movs	r2, #5
    69e2:	f104 0161 	add.w	r1, r4, #97	; 0x61
    69e6:	4628      	mov	r0, r5
    69e8:	f7f9 fe06 	bl	5f8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    69ec:	2105      	movs	r1, #5
    69ee:	4628      	mov	r0, r5
    69f0:	f7fc fab4 	bl	2f5c <util_ones_count_get>
		conn->data_chan_count =
    69f4:	7f63      	ldrb	r3, [r4, #29]
    69f6:	f360 0305 	bfi	r3, r0, #0, #6
    69fa:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
    69fc:	2301      	movs	r3, #1
    69fe:	7723      	strb	r3, [r4, #28]
    6a00:	e5ff      	b.n	6602 <event_connection_prepare+0x142>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6a02:	4821      	ldr	r0, [pc, #132]	; (6a88 <event_connection_prepare+0x5c8>)
    6a04:	f7fc f911 	bl	2c2a <mem_acquire>
	if (node_tx) {
    6a08:	4605      	mov	r5, r0
    6a0a:	2800      	cmp	r0, #0
    6a0c:	f43f adf9 	beq.w	6602 <event_connection_prepare+0x142>
		conn->llcp_ack = conn->llcp_req;
    6a10:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6a14:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		conn->llcp_features = RADIO_BLE_FEAT;
    6a18:	4b1c      	ldr	r3, [pc, #112]	; (6a8c <event_connection_prepare+0x5cc>)
    6a1a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6a1e:	7903      	ldrb	r3, [r0, #4]
    6a20:	f043 0303 	orr.w	r3, r3, #3
    6a24:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    6a26:	2309      	movs	r3, #9
    6a28:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode =
    6a2a:	f994 301d 	ldrsb.w	r3, [r4, #29]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	bfac      	ite	ge
    6a32:	2308      	movge	r3, #8
    6a34:	230e      	movlt	r3, #14
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    6a36:	2208      	movs	r2, #8
		pdu_ctrl_tx->llctrl.opcode =
    6a38:	71c3      	strb	r3, [r0, #7]
		memset(&pdu_ctrl_tx->llctrl.feature_req.features[0], 0x00,
    6a3a:	2100      	movs	r1, #0
    6a3c:	4410      	add	r0, r2
    6a3e:	f7f9 fe07 	bl	650 <memset>
			conn->llcp_features & 0xFF;
    6a42:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		pdu_ctrl_tx->llctrl.feature_req.features[0] =
    6a46:	722b      	strb	r3, [r5, #8]
			(conn->llcp_features >> 8) & 0xFF;
    6a48:	0a1a      	lsrs	r2, r3, #8
			(conn->llcp_features >> 16) & 0xFF;
    6a4a:	0c1b      	lsrs	r3, r3, #16
		pdu_ctrl_tx->llctrl.feature_req.features[1] =
    6a4c:	726a      	strb	r2, [r5, #9]
		pdu_ctrl_tx->llctrl.feature_req.features[2] =
    6a4e:	72ab      	strb	r3, [r5, #10]
		ctrl_tx_enqueue(conn, node_tx);
    6a50:	4629      	mov	r1, r5
			ctrl_tx_enqueue(conn, node_tx);
    6a52:	4620      	mov	r0, r4
    6a54:	f7ff fca6 	bl	63a4 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
    6a58:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    6a5a:	86a3      	strh	r3, [r4, #52]	; 0x34
    6a5c:	e5d1      	b.n	6602 <event_connection_prepare+0x142>
    6a5e:	bf00      	nop
    6a60:	1afd498d 	.word	0x1afd498d
    6a64:	00000007 	.word	0x00000007
    6a68:	09ce5400 	.word	0x09ce5400
    6a6c:	0000b888 	.word	0x0000b888
    6a70:	000f4240 	.word	0x000f4240
    6a74:	026259ff 	.word	0x026259ff
    6a78:	00005c65 	.word	0x00005c65
    6a7c:	1afd498d 	.word	0x1afd498d
    6a80:	00006b39 	.word	0x00006b39
    6a84:	00006b3d 	.word	0x00006b3d
    6a88:	200010bc 	.word	0x200010bc
    6a8c:	0001400c 	.word	0x0001400c
    6a90:	3b9aca00 	.word	0x3b9aca00
	if (conn->llcp_version.tx == 0) {
    6a94:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6a98:	07da      	lsls	r2, r3, #31
    6a9a:	d424      	bmi.n	6ae6 <event_connection_prepare+0x626>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6a9c:	4825      	ldr	r0, [pc, #148]	; (6b34 <event_connection_prepare+0x674>)
    6a9e:	f7fc f8c4 	bl	2c2a <mem_acquire>
		if (node_tx) {
    6aa2:	4601      	mov	r1, r0
    6aa4:	2800      	cmp	r0, #0
    6aa6:	f43f adac 	beq.w	6602 <event_connection_prepare+0x142>
			conn->llcp_ack = conn->llcp_req;
    6aaa:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6aae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			conn->llcp_version.tx = 1;
    6ab2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    6ab6:	f043 0301 	orr.w	r3, r3, #1
    6aba:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6abe:	7903      	ldrb	r3, [r0, #4]
    6ac0:	f043 0303 	orr.w	r3, r3, #3
    6ac4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    6ac6:	2306      	movs	r3, #6
    6ac8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
    6aca:	230c      	movs	r3, #12
    6acc:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->llctrl.version_ind.version_number =
    6ace:	2309      	movs	r3, #9
    6ad0:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->llctrl.version_ind.company_id =
    6ad2:	f06f 030e 	mvn.w	r3, #14
    6ad6:	7243      	strb	r3, [r0, #9]
    6ad8:	2305      	movs	r3, #5
    6ada:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->llctrl.version_ind.sub_version_number =
    6adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ae0:	72c3      	strb	r3, [r0, #11]
    6ae2:	7303      	strb	r3, [r0, #12]
    6ae4:	e7b5      	b.n	6a52 <event_connection_prepare+0x592>
	} else if (conn->llcp_version.rx != 0) {
    6ae6:	079b      	lsls	r3, r3, #30
    6ae8:	f57f acf3 	bpl.w	64d2 <event_connection_prepare+0x12>
		conn->llcp_ack = conn->llcp_req;
    6aec:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    6af0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		node_rx = packet_rx_reserve_get(2);
    6af4:	2002      	movs	r0, #2
    6af6:	f7fd ff97 	bl	4a28 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    6afa:	2800      	cmp	r0, #0
    6afc:	f43f ace9 	beq.w	64d2 <event_connection_prepare+0x12>
		node_rx->hdr.handle = conn->handle;
    6b00:	8c23      	ldrh	r3, [r4, #32]
    6b02:	80c3      	strh	r3, [r0, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6b04:	2301      	movs	r3, #1
    6b06:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    6b08:	7a03      	ldrb	r3, [r0, #8]
    6b0a:	f043 0303 	orr.w	r3, r3, #3
    6b0e:	7203      	strb	r3, [r0, #8]
		pdu_ctrl_rx->len =
    6b10:	2306      	movs	r3, #6
    6b12:	7243      	strb	r3, [r0, #9]
		pdu_ctrl_rx->llctrl.opcode =
    6b14:	230c      	movs	r3, #12
    6b16:	72c3      	strb	r3, [r0, #11]
		pdu_ctrl_rx->llctrl.version_ind.version_number =
    6b18:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    6b1c:	7303      	strb	r3, [r0, #12]
		pdu_ctrl_rx->llctrl.version_ind.company_id =
    6b1e:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
    6b22:	f8a0 300d 	strh.w	r3, [r0, #13]
		pdu_ctrl_rx->llctrl.version_ind.sub_version_number =
    6b26:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    6b2a:	f8a0 300f 	strh.w	r3, [r0, #15]
		packet_rx_enqueue();
    6b2e:	f7fe fe61 	bl	57f4 <packet_rx_enqueue>
    6b32:	e566      	b.n	6602 <event_connection_prepare+0x142>
    6b34:	200010bc 	.word	0x200010bc

00006b38 <event_master_prepare>:
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    6b38:	f7ff bcc2 	b.w	64c0 <event_connection_prepare>

00006b3c <event_slave_prepare>:
    6b3c:	f7ff bcc0 	b.w	64c0 <event_connection_prepare>

00006b40 <connection_configure>:
{
    6b40:	b510      	push	{r4, lr}
    6b42:	4604      	mov	r4, r0
	radio_reset();
    6b44:	f002 fca2 	bl	948c <radio_reset>
	radio_tx_power_set(0);
    6b48:	2000      	movs	r0, #0
    6b4a:	f002 fcc9 	bl	94e0 <radio_tx_power_set>
	radio_isr_set(isr);
    6b4e:	480a      	ldr	r0, [pc, #40]	; (6b78 <connection_configure+0x38>)
    6b50:	f002 fc66 	bl	9420 <radio_isr_set>
	radio_aa_set(conn->access_addr);
    6b54:	f104 0010 	add.w	r0, r4, #16
    6b58:	f002 fce0 	bl	951c <radio_aa_set>
			     ((u32_t)conn->crc_init[1] << 8) |
    6b5c:	7d63      	ldrb	r3, [r4, #21]
			    (((u32_t)conn->crc_init[2] << 16) |
    6b5e:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
    6b60:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
    6b62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
    6b66:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6b68:	f240 605b 	movw	r0, #1627	; 0x65b
    6b6c:	4319      	orrs	r1, r3
}
    6b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    6b72:	f002 bd7b 	b.w	966c <radio_crc_configure>
    6b76:	bf00      	nop
    6b78:	00006dc1 	.word	0x00006dc1

00006b7c <event_slave>:
{
    6b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b80:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    6b82:	4b5a      	ldr	r3, [pc, #360]	; (6cec <event_slave+0x170>)
    6b84:	7cda      	ldrb	r2, [r3, #19]
{
    6b86:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    6b88:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    6b8c:	461d      	mov	r5, r3
    6b8e:	b12a      	cbz	r2, 6b9c <event_slave+0x20>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6b90:	4040      	eors	r0, r0
    6b92:	f380 8811 	msr	BASEPRI, r0
    6b96:	f04f 0004 	mov.w	r0, #4
    6b9a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    6b9c:	7c1a      	ldrb	r2, [r3, #16]
    6b9e:	8c23      	ldrh	r3, [r4, #32]
    6ba0:	b2d2      	uxtb	r2, r2
    6ba2:	3307      	adds	r3, #7
    6ba4:	429a      	cmp	r2, r3
    6ba6:	d1f3      	bne.n	6b90 <event_slave+0x14>
	_radio.role = ROLE_SLAVE;
    6ba8:	2303      	movs	r3, #3
    6baa:	74eb      	strb	r3, [r5, #19]
	_radio.packet_counter = 0;
    6bac:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
    6bb0:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	_radio.state = STATE_RX;
    6bb4:	2301      	movs	r3, #1
    6bb6:	752b      	strb	r3, [r5, #20]
	conn->latency_event = conn->latency_prepare;
    6bb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    6bba:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    6bbe:	b2d2      	uxtb	r2, r2
	conn->latency_event = conn->latency_prepare;
    6bc0:	8563      	strh	r3, [r4, #42]	; 0x2a
	_radio.ticks_anchor = ticks_at_expire;
    6bc2:	60a8      	str	r0, [r5, #8]
	conn->latency_prepare = 0;
    6bc4:	8526      	strh	r6, [r4, #40]	; 0x28
	connection_configure(conn);
    6bc6:	4620      	mov	r0, r4
	_radio.ticker_id_prepare = 0;
    6bc8:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    6bca:	746a      	strb	r2, [r5, #17]
	connection_configure(conn);
    6bcc:	f7ff ffb8 	bl	6b40 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    6bd0:	2096      	movs	r0, #150	; 0x96
    6bd2:	f002 fdf9 	bl	97c8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
    6bd6:	4633      	mov	r3, r6
    6bd8:	4632      	mov	r2, r6
    6bda:	4631      	mov	r1, r6
    6bdc:	4630      	mov	r0, r6
    6bde:	f002 fd6f 	bl	96c0 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6be2:	f895 2d21 	ldrb.w	r2, [r5, #3361]	; 0xd21
    6be6:	f8d5 3d1c 	ldr.w	r3, [r5, #3356]	; 0xd1c
    6bea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (void *)
    6bee:	4620      	mov	r0, r4
    6bf0:	3108      	adds	r1, #8
    6bf2:	f7fe fccf 	bl	5594 <rx_packet_set>
	if (conn->data_chan_sel) {
    6bf6:	7f63      	ldrb	r3, [r4, #29]
    6bf8:	f013 0f40 	tst.w	r3, #64	; 0x40
    6bfc:	f104 0217 	add.w	r2, r4, #23
    6c00:	d04a      	beq.n	6c98 <event_slave+0x11c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    6c02:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    6c04:	8be1      	ldrh	r1, [r4, #30]
    6c06:	3801      	subs	r0, #1
    6c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6c0c:	b280      	uxth	r0, r0
    6c0e:	f7ff fa5d 	bl	60cc <chan_sel_2>
	chan_set(data_chan_use);
    6c12:	f7fe f8b3 	bl	4d7c <chan_set>
	conn->slave.window_widening_event_us +=
    6c16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6c18:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6c1a:	4413      	add	r3, r2
	conn->slave.window_widening_prepare_us = 0;
    6c1c:	2200      	movs	r2, #0
    6c1e:	6462      	str	r2, [r4, #68]	; 0x44
	    conn->slave.window_widening_max_us) {
    6c20:	6c22      	ldr	r2, [r4, #64]	; 0x40
	conn->slave.window_widening_event_us +=
    6c22:	64a3      	str	r3, [r4, #72]	; 0x48
	if (conn->slave.window_widening_event_us >
    6c24:	4293      	cmp	r3, r2
		conn->slave.window_widening_event_us =
    6c26:	bf88      	it	hi
    6c28:	64a2      	strhi	r2, [r4, #72]	; 0x48
	conn->slave.window_size_event_us +=
    6c2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    6c2c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
	conn->slave.window_size_prepare_us = 0;
    6c2e:	2600      	movs	r6, #0
	conn->slave.window_size_event_us +=
    6c30:	4413      	add	r3, r2
    6c32:	6523      	str	r3, [r4, #80]	; 0x50
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6c34:	68ea      	ldr	r2, [r5, #12]
	conn->slave.window_size_prepare_us = 0;
    6c36:	64e6      	str	r6, [r4, #76]	; 0x4c
	remainder_us = radio_tmr_start(0, ticks_at_expire +
    6c38:	f107 0109 	add.w	r1, r7, #9
    6c3c:	4630      	mov	r0, r6
    6c3e:	f002 fdcf 	bl	97e0 <radio_tmr_start>
    6c42:	4680      	mov	r8, r0
	radio_tmr_aa_capture();
    6c44:	f002 fe68 	bl	9918 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
    6c48:	4630      	mov	r0, r6
    6c4a:	f002 fe87 	bl	995c <radio_tmr_aa_save>
    6c4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
	       (conn->slave.window_widening_event_us << 1) +
    6c50:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    6c52:	3378      	adds	r3, #120	; 0x78
	hcto += radio_rx_ready_delay_get(0, 0);
    6c54:	4631      	mov	r1, r6
    6c56:	4630      	mov	r0, r6
    6c58:	eb03 0942 	add.w	r9, r3, r2, lsl #1
    6c5c:	f002 fcb7 	bl	95ce <radio_rx_ready_delay_get>
	hcto += addr_us_get(0);
    6c60:	44c8      	add	r8, r9
	hcto += radio_rx_chain_delay_get(0, 0);
    6c62:	4631      	mov	r1, r6
	hcto += addr_us_get(0);
    6c64:	4480      	add	r8, r0
	hcto += radio_rx_chain_delay_get(0, 0);
    6c66:	4630      	mov	r0, r6
    6c68:	f002 fcb3 	bl	95d2 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    6c6c:	4440      	add	r0, r8
    6c6e:	f002 fe35 	bl	98dc <radio_tmr_hcto_configure>
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    6c72:	f894 1020 	ldrb.w	r1, [r4, #32]
    6c76:	3107      	adds	r1, #7
    6c78:	463a      	mov	r2, r7
    6c7a:	b2c9      	uxtb	r1, r1
    6c7c:	4620      	mov	r0, r4
    6c7e:	f7ff fa69 	bl	6154 <preempt_calc>
    6c82:	4603      	mov	r3, r0
    6c84:	b340      	cbz	r0, 6cd8 <event_slave+0x15c>
		_radio.state = STATE_STOP;
    6c86:	2304      	movs	r3, #4
    6c88:	752b      	strb	r3, [r5, #20]
		radio_disable();
    6c8a:	f002 fcb3 	bl	95f4 <radio_disable>
	packet_tx_enqueue(2);
    6c8e:	2002      	movs	r0, #2
}
    6c90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	packet_tx_enqueue(2);
    6c94:	f7fe be64 	b.w	5960 <packet_tx_enqueue>
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    6c98:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    6c9a:	7fa6      	ldrb	r6, [r4, #30]
    6c9c:	fb01 6606 	mla	r6, r1, r6, r6
    6ca0:	7fe1      	ldrb	r1, [r4, #31]
    6ca2:	2025      	movs	r0, #37	; 0x25
    6ca4:	440e      	add	r6, r1
    6ca6:	fb96 f1f0 	sdiv	r1, r6, r0
    6caa:	fb00 6611 	mls	r6, r0, r1, r6
    6cae:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6cb0:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    6cb2:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6cb4:	5c51      	ldrb	r1, [r2, r1]
    6cb6:	f006 0607 	and.w	r6, r6, #7
    6cba:	fa41 f606 	asr.w	r6, r1, r6
    6cbe:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    6cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    6cc4:	d4a5      	bmi.n	6c12 <event_slave+0x96>
		chan_index = chan_next % chan_count;
    6cc6:	fbb0 f1f3 	udiv	r1, r0, r3
    6cca:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    6cce:	b2c9      	uxtb	r1, r1
    6cd0:	4610      	mov	r0, r2
    6cd2:	f7fd fe8d 	bl	49f0 <chan_sel_remap>
    6cd6:	e79c      	b.n	6c12 <event_slave+0x96>
		ticker_status =
    6cd8:	4a05      	ldr	r2, [pc, #20]	; (6cf0 <event_slave+0x174>)
    6cda:	4601      	mov	r1, r0
    6cdc:	f7fc ff24 	bl	3b28 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6ce0:	f030 0302 	bics.w	r3, r0, #2
    6ce4:	f47f af54 	bne.w	6b90 <event_slave+0x14>
    6ce8:	e7d1      	b.n	6c8e <event_slave+0x112>
    6cea:	bf00      	nop
    6cec:	20000380 	.word	0x20000380
    6cf0:	00005509 	.word	0x00005509

00006cf4 <prepare_pdu_data_tx>:
{
    6cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	    conn->empty ||
    6cf6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
	if (/* empty packet */
    6cfa:	061a      	lsls	r2, r3, #24
{
    6cfc:	4604      	mov	r4, r0
    6cfe:	460f      	mov	r7, r1
	if (/* empty packet */
    6d00:	d409      	bmi.n	6d16 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    6d02:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	    conn->empty ||
    6d06:	b135      	cbz	r5, 6d16 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
    6d08:	f013 0f08 	tst.w	r3, #8
    6d0c:	f8d0 e0f0 	ldr.w	lr, [r0, #240]	; 0xf0
    6d10:	d022      	beq.n	6d58 <prepare_pdu_data_tx+0x64>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
    6d12:	4575      	cmp	r5, lr
    6d14:	d020      	beq.n	6d58 <prepare_pdu_data_tx+0x64>
	conn->empty = 1;
    6d16:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    6d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6d1e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    6d22:	f002 fcb9 	bl	9698 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6d26:	7803      	ldrb	r3, [r0, #0]
    6d28:	2201      	movs	r2, #1
    6d2a:	f362 0301 	bfi	r3, r2, #0, #2
	pdu_data_tx->len = 0;
    6d2e:	2200      	movs	r2, #0
    6d30:	7042      	strb	r2, [r0, #1]
	if (conn->pkt_tx_head) {
    6d32:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6d36:	7003      	strb	r3, [r0, #0]
    6d38:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    6d3a:	b152      	cbz	r2, 6d52 <prepare_pdu_data_tx+0x5e>
		pdu_data_tx->md = 1;
    6d3c:	f043 0310 	orr.w	r3, r3, #16
		pdu_data_tx->md = 0;
    6d40:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->rfu = 0;
    6d42:	7803      	ldrb	r3, [r0, #0]
    6d44:	f36f 1347 	bfc	r3, #5, #3
    6d48:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    6d4a:	2300      	movs	r3, #0
    6d4c:	7083      	strb	r3, [r0, #2]
	*pdu_data_tx = _pdu_data_tx;
    6d4e:	6038      	str	r0, [r7, #0]
    6d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pdu_data_tx->md = 0;
    6d52:	f362 1304 	bfi	r3, r2, #4, #1
    6d56:	e7f3      	b.n	6d40 <prepare_pdu_data_tx+0x4c>
					conn->packet_tx_head_offset);
    6d58:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
		if (!conn->packet_tx_head_len) {
    6d5c:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
    6d60:	1d2a      	adds	r2, r5, #4
    6d62:	18d0      	adds	r0, r2, r3
		if (!conn->packet_tx_head_len) {
    6d64:	b911      	cbnz	r1, 6d6c <prepare_pdu_data_tx+0x78>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    6d66:	7841      	ldrb	r1, [r0, #1]
    6d68:	f884 1100 	strb.w	r1, [r4, #256]	; 0x100
		if (conn->packet_tx_head_offset) {
    6d6c:	b123      	cbz	r3, 6d78 <prepare_pdu_data_tx+0x84>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    6d6e:	5cd1      	ldrb	r1, [r2, r3]
    6d70:	2601      	movs	r6, #1
    6d72:	f366 0101 	bfi	r1, r6, #0, #2
    6d76:	54d1      	strb	r1, [r2, r3]
		_pdu_data_tx->len = conn->packet_tx_head_len -
    6d78:	f894 6100 	ldrb.w	r6, [r4, #256]	; 0x100
    6d7c:	1af6      	subs	r6, r6, r3
    6d7e:	b2f6      	uxtb	r6, r6
    6d80:	7046      	strb	r6, [r0, #1]
		_pdu_data_tx->md = 0;
    6d82:	5cd1      	ldrb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    6d84:	2e1b      	cmp	r6, #27
		_pdu_data_tx->md = 0;
    6d86:	f36f 1104 	bfc	r1, #4, #1
    6d8a:	54d1      	strb	r1, [r2, r3]
		if (_pdu_data_tx->len > max_tx_octets) {
    6d8c:	d905      	bls.n	6d9a <prepare_pdu_data_tx+0xa6>
			_pdu_data_tx->len = max_tx_octets;
    6d8e:	211b      	movs	r1, #27
    6d90:	7041      	strb	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    6d92:	5cd1      	ldrb	r1, [r2, r3]
    6d94:	f041 0110 	orr.w	r1, r1, #16
    6d98:	54d1      	strb	r1, [r2, r3]
		if (conn->pkt_tx_head->next) {
    6d9a:	6829      	ldr	r1, [r5, #0]
    6d9c:	b119      	cbz	r1, 6da6 <prepare_pdu_data_tx+0xb2>
			_pdu_data_tx->md = 1;
    6d9e:	5cd1      	ldrb	r1, [r2, r3]
    6da0:	f041 0110 	orr.w	r1, r1, #16
    6da4:	54d1      	strb	r1, [r2, r3]
		if (!conn->pkt_tx_ctrl &&
    6da6:	f1be 0f00 	cmp.w	lr, #0
    6daa:	d1ca      	bne.n	6d42 <prepare_pdu_data_tx+0x4e>
    6dac:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    6db0:	429d      	cmp	r5, r3
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
    6db2:	bf1c      	itt	ne
    6db4:	f8c4 50f4 	strne.w	r5, [r4, #244]	; 0xf4
    6db8:	f8c4 50f0 	strne.w	r5, [r4, #240]	; 0xf0
    6dbc:	e7c1      	b.n	6d42 <prepare_pdu_data_tx+0x4e>
	...

00006dc0 <isr>:
{
    6dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6dc4:	b08f      	sub	sp, #60	; 0x3c
	trx_done = radio_is_done();
    6dc6:	f002 fc3d 	bl	9644 <radio_is_done>
    6dca:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    6dcc:	b336      	cbz	r6, 6e1c <isr+0x5c>
		crc_ok = radio_crc_is_valid();
    6dce:	f002 fc59 	bl	9684 <radio_crc_is_valid>
    6dd2:	b2c7      	uxtb	r7, r0
		devmatch_ok = radio_filter_has_match();
    6dd4:	f002 fcda 	bl	978c <radio_filter_has_match>
    6dd8:	b2c4      	uxtb	r4, r0
		devmatch_id = radio_filter_match_get();
    6dda:	f002 fce1 	bl	97a0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
    6dde:	f002 fe89 	bl	9af4 <radio_ar_has_match>
		irkmatch_id = radio_ar_match_get();
    6de2:	f002 fe75 	bl	9ad0 <radio_ar_match_get>
		rssi_ready = radio_rssi_is_ready();
    6de6:	f002 fc9b 	bl	9720 <radio_rssi_is_ready>
    6dea:	b2c5      	uxtb	r5, r0
	radio_status_reset();
    6dec:	f002 fc14 	bl	9618 <radio_status_reset>
	radio_tmr_status_reset();
    6df0:	f002 fcdc 	bl	97ac <radio_tmr_status_reset>
	radio_filter_status_reset();
    6df4:	f002 fcc2 	bl	977c <radio_filter_status_reset>
	radio_ar_status_reset();
    6df8:	f002 fe70 	bl	9adc <radio_ar_status_reset>
	radio_rssi_status_reset();
    6dfc:	f002 fc88 	bl	9710 <radio_rssi_status_reset>
	switch (_radio.state) {
    6e00:	4a6e      	ldr	r2, [pc, #440]	; (6fbc <isr+0x1fc>)
    6e02:	7d13      	ldrb	r3, [r2, #20]
    6e04:	4693      	mov	fp, r2
    6e06:	2b05      	cmp	r3, #5
    6e08:	f201 8331 	bhi.w	846e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x46e>
    6e0c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6e10:	00890061 	.word	0x00890061
    6e14:	0969000a 	.word	0x0969000a
    6e18:	09690969 	.word	0x09690969
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    6e1c:	4635      	mov	r5, r6
    6e1e:	4634      	mov	r4, r6
    6e20:	4637      	mov	r7, r6
    6e22:	e7e3      	b.n	6dec <isr+0x2c>
	_radio.state = STATE_RX;
    6e24:	2301      	movs	r3, #1
    6e26:	f88b 3014 	strb.w	r3, [fp, #20]
	hcto = radio_tmr_tifs_base_get() + 600
    6e2a:	f002 fdc1 	bl	99b0 <radio_tmr_tifs_base_get>
    6e2e:	4604      	mov	r4, r0
	radio_tmr_tifs_set(RADIO_TIFS);
    6e30:	2096      	movs	r0, #150	; 0x96
    6e32:	f002 fcc9 	bl	97c8 <radio_tmr_tifs_set>
	switch (_radio.role) {
    6e36:	f89b 3013 	ldrb.w	r3, [fp, #19]
    6e3a:	3b01      	subs	r3, #1
    6e3c:	f204 341b 	addw	r4, r4, #795	; 0x31b
    6e40:	2b03      	cmp	r3, #3
    6e42:	d811      	bhi.n	6e68 <isr+0xa8>
    6e44:	e8df f003 	tbb	[pc, r3]
    6e48:	48482402 	.word	0x48482402
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6e4c:	2300      	movs	r3, #0
    6e4e:	461a      	mov	r2, r3
    6e50:	4619      	mov	r1, r3
    6e52:	4618      	mov	r0, r3
    6e54:	f002 fc34 	bl	96c0 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    6e58:	f002 fc22 	bl	96a0 <radio_pkt_scratch_get>
    6e5c:	f002 fba4 	bl	95a8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    6e60:	f002 fbe6 	bl	9630 <radio_is_ready>
    6e64:	4605      	mov	r5, r0
    6e66:	b128      	cbz	r0, 6e74 <isr+0xb4>
	LL_ASSERT(!retval);
    6e68:	4040      	eors	r0, r0
    6e6a:	f380 8811 	msr	BASEPRI, r0
    6e6e:	f04f 0004 	mov.w	r0, #4
    6e72:	df02      	svc	2
		hcto += radio_rx_chain_delay_get(0, 0);
    6e74:	4601      	mov	r1, r0
    6e76:	f002 fbac 	bl	95d2 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6e7a:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6e7c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6e7e:	4628      	mov	r0, r5
    6e80:	f002 fba3 	bl	95ca <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6e84:	1a20      	subs	r0, r4, r0
    6e86:	f002 fd29 	bl	98dc <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    6e8a:	f002 fd79 	bl	9980 <radio_tmr_end_capture>
    6e8e:	e020      	b.n	6ed2 <isr+0x112>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6e90:	2300      	movs	r3, #0
    6e92:	4619      	mov	r1, r3
    6e94:	461a      	mov	r2, r3
    6e96:	4618      	mov	r0, r3
    6e98:	f002 fc12 	bl	96c0 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    6e9c:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    6ea0:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
		radio_pkt_rx_set(_radio.packet_rx
    6ea4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6ea8:	3008      	adds	r0, #8
    6eaa:	f002 fb7d 	bl	95a8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    6eae:	f002 fbbf 	bl	9630 <radio_is_ready>
    6eb2:	4605      	mov	r5, r0
    6eb4:	2800      	cmp	r0, #0
    6eb6:	d1d7      	bne.n	6e68 <isr+0xa8>
		hcto += radio_rx_chain_delay_get(0, 0);
    6eb8:	4601      	mov	r1, r0
    6eba:	f002 fb8a 	bl	95d2 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6ebe:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6ec0:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6ec2:	4628      	mov	r0, r5
    6ec4:	f002 fb81 	bl	95ca <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6ec8:	1a20      	subs	r0, r4, r0
    6eca:	f002 fd07 	bl	98dc <radio_tmr_hcto_configure>
		radio_rssi_measure();
    6ece:	f002 fc0f 	bl	96f0 <radio_rssi_measure>
}
    6ed2:	b00f      	add	sp, #60	; 0x3c
    6ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		radio_switch_complete_and_tx(0, 0, 0, 0);
    6ed8:	2300      	movs	r3, #0
    6eda:	461a      	mov	r2, r3
    6edc:	4619      	mov	r1, r3
    6ede:	4618      	mov	r0, r3
    6ee0:	f002 fbee 	bl	96c0 <radio_switch_complete_and_tx>
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6ee4:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    6ee8:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
		rx_packet_set(_radio.conn_curr,	(void *)
    6eec:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
			_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    6ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr,	(void *)
    6ef4:	3108      	adds	r1, #8
    6ef6:	f7fe fb4d 	bl	5594 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    6efa:	f002 fb99 	bl	9630 <radio_is_ready>
    6efe:	4605      	mov	r5, r0
    6f00:	2800      	cmp	r0, #0
    6f02:	d1b1      	bne.n	6e68 <isr+0xa8>
		hcto += radio_rx_chain_delay_get(0, 0);
    6f04:	4601      	mov	r1, r0
    6f06:	f002 fb64 	bl	95d2 <radio_rx_chain_delay_get>
		hcto -= radio_tx_chain_delay_get(0, 0);
    6f0a:	4629      	mov	r1, r5
		hcto += addr_us_get(0);
    6f0c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(0, 0);
    6f0e:	4628      	mov	r0, r5
    6f10:	f002 fb5b 	bl	95ca <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    6f14:	1a20      	subs	r0, r4, r0
    6f16:	f002 fce1 	bl	98dc <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    6f1a:	2001      	movs	r0, #1
    6f1c:	f7fe fd20 	bl	5960 <packet_tx_enqueue>
    6f20:	e7d7      	b.n	6ed2 <isr+0x112>
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    6f22:	b92e      	cbnz	r6, 6f30 <isr+0x170>
		_radio.state = STATE_CLOSE;
    6f24:	2303      	movs	r3, #3
    6f26:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    6f2a:	f002 fb63 	bl	95f4 <radio_disable>
    6f2e:	e7d0      	b.n	6ed2 <isr+0x112>
	switch (_radio.role) {
    6f30:	f89b 3013 	ldrb.w	r3, [fp, #19]
    6f34:	3b01      	subs	r3, #1
    6f36:	2b03      	cmp	r3, #3
    6f38:	d896      	bhi.n	6e68 <isr+0xa8>
    6f3a:	e8df f013 	tbh	[pc, r3, lsl #1]
    6f3e:	0004      	.short	0x0004
    6f40:	05120209 	.word	0x05120209
    6f44:	0512      	.short	0x0512
		if (crc_ok) {
    6f46:	2f00      	cmp	r7, #0
    6f48:	d0ec      	beq.n	6f24 <isr+0x164>
	pdu_adv = (void *)radio_pkt_scratch_get();
    6f4a:	f002 fba9 	bl	96a0 <radio_pkt_scratch_get>
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6f4e:	f89b 922d 	ldrb.w	r9, [fp, #557]	; 0x22d
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6f52:	7802      	ldrb	r2, [r0, #0]
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6f54:	eb09 2909 	add.w	r9, r9, r9, lsl #8
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6f58:	f002 030f 	and.w	r3, r2, #15
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6f5c:	f109 092b 	add.w	r9, r9, #43	; 0x2b
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6f60:	2b03      	cmp	r3, #3
	pdu_adv = (void *)radio_pkt_scratch_get();
    6f62:	4607      	mov	r7, r0
	_pdu_adv = (void *)&_radio.advertiser.adv_data.data
    6f64:	eb0b 0509 	add.w	r5, fp, r9
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    6f68:	d12a      	bne.n	6fc0 <isr+0x200>
    6f6a:	7843      	ldrb	r3, [r0, #1]
    6f6c:	2b0c      	cmp	r3, #12
    6f6e:	d127      	bne.n	6fc0 <isr+0x200>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    6f70:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    6f74:	07d9      	lsls	r1, r3, #31
    6f76:	d500      	bpl.n	6f7a <isr+0x1ba>
	return (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    6f78:	b314      	cbz	r4, 6fc0 <isr+0x200>
	return (adv->tx_addr == sr->rx_addr) &&
    6f7a:	f81b 3009 	ldrb.w	r3, [fp, r9]
    6f7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6f82:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6f86:	d11b      	bne.n	6fc0 <isr+0x200>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
    6f88:	2206      	movs	r2, #6
    6f8a:	f107 0108 	add.w	r1, r7, #8
    6f8e:	1ca8      	adds	r0, r5, #2
    6f90:	f7f9 fb1d 	bl	5ce <memcmp>
	    (pdu_adv->len == sizeof(struct pdu_adv_scan_req)) &&
    6f94:	b9a0      	cbnz	r0, 6fc0 <isr+0x200>
		_radio.state = STATE_CLOSE;
    6f96:	2303      	movs	r3, #3
    6f98:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_switch_complete_and_disable();
    6f9c:	f002 fb9a 	bl	96d4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(&_radio.advertiser.scan_data.data
    6fa0:	f89b 0c13 	ldrb.w	r0, [fp, #3091]	; 0xc13
    6fa4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    6fa8:	f600 2011 	addw	r0, r0, #2577	; 0xa11
    6fac:	4458      	add	r0, fp
    6fae:	f002 fb01 	bl	95b4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    6fb2:	f002 fb3d 	bl	9630 <radio_is_ready>
    6fb6:	2800      	cmp	r0, #0
    6fb8:	d08b      	beq.n	6ed2 <isr+0x112>
    6fba:	e755      	b.n	6e68 <isr+0xa8>
    6fbc:	20000380 	.word	0x20000380
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
    6fc0:	783b      	ldrb	r3, [r7, #0]
    6fc2:	f003 030f 	and.w	r3, r3, #15
    6fc6:	2b05      	cmp	r3, #5
    6fc8:	d1ac      	bne.n	6f24 <isr+0x164>
    6fca:	787b      	ldrb	r3, [r7, #1]
    6fcc:	2b22      	cmp	r3, #34	; 0x22
    6fce:	d1a9      	bne.n	6f24 <isr+0x164>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    6fd0:	f81b 3009 	ldrb.w	r3, [fp, r9]
    6fd4:	f003 030f 	and.w	r3, r3, #15
    6fd8:	2b01      	cmp	r3, #1
    6fda:	f040 8192 	bne.w	7302 <isr+0x542>
		       isr_adv_ci_adva_check(adv, ci) &&
    6fde:	4639      	mov	r1, r7
    6fe0:	4628      	mov	r0, r5
    6fe2:	f7fe fa53 	bl	548c <isr_adv_ci_adva_check>
    6fe6:	b188      	cbz	r0, 700c <isr+0x24c>
	return (adv->rx_addr == ci->tx_addr) &&
    6fe8:	783b      	ldrb	r3, [r7, #0]
    6fea:	f81b 2009 	ldrb.w	r2, [fp, r9]
    6fee:	f3c3 1380 	ubfx	r3, r3, #6, #1
    6ff2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    6ff6:	f040 8182 	bne.w	72fe <isr+0x53e>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
    6ffa:	2206      	movs	r2, #6
    6ffc:	1cb9      	adds	r1, r7, #2
    6ffe:	f105 0008 	add.w	r0, r5, #8
    7002:	f7f9 fae4 	bl	5ce <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
    7006:	fab0 f080 	clz	r0, r0
    700a:	0940      	lsrs	r0, r0, #5
		   (pdu_adv->len == sizeof(struct pdu_adv_connect_ind)) &&
    700c:	2800      	cmp	r0, #0
    700e:	d089      	beq.n	6f24 <isr+0x164>
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
    7010:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    7014:	b12b      	cbz	r3, 7022 <isr+0x262>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    7016:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
    701a:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    701e:	429a      	cmp	r2, r3
    7020:	d180      	bne.n	6f24 <isr+0x164>
    7022:	f8db 3c18 	ldr.w	r3, [fp, #3096]	; 0xc18
    7026:	2b00      	cmp	r3, #0
    7028:	f43f af7c 	beq.w	6f24 <isr+0x164>
			node_rx = packet_rx_reserve_get(4);
    702c:	2004      	movs	r0, #4
    702e:	f7fd fcfb 	bl	4a28 <packet_rx_reserve_get>
		if (!node_rx) {
    7032:	4605      	mov	r5, r0
    7034:	2800      	cmp	r0, #0
    7036:	f43f af75 	beq.w	6f24 <isr+0x164>
		_radio.state = STATE_STOP;
    703a:	f04f 0a04 	mov.w	sl, #4
    703e:	f88b a014 	strb.w	sl, [fp, #20]
		radio_disable();
    7042:	f002 fad7 	bl	95f4 <radio_disable>
		conn = _radio.advertiser.conn;
    7046:	f8db 4c18 	ldr.w	r4, [fp, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    704a:	f8db 1cf0 	ldr.w	r1, [fp, #3312]	; 0xcf0
		_radio.advertiser.conn = NULL;
    704e:	f04f 0800 	mov.w	r8, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7052:	f44f 7282 	mov.w	r2, #260	; 0x104
    7056:	4620      	mov	r0, r4
		_radio.advertiser.conn = NULL;
    7058:	f8cb 8c18 	str.w	r8, [fp, #3096]	; 0xc18
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    705c:	f7fb fe17 	bl	2c8e <mem_index_get>
		memcpy(&conn->crc_init[0],
    7060:	2203      	movs	r2, #3
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7062:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
    7064:	f107 0112 	add.w	r1, r7, #18
    7068:	f104 0014 	add.w	r0, r4, #20
    706c:	f7f9 fac4 	bl	5f8 <memcpy>
		memcpy(&conn->access_addr[0],
    7070:	f104 0310 	add.w	r3, r4, #16
    7074:	4618      	mov	r0, r3
		memcpy(&conn->data_chan_map[0],
    7076:	f104 0617 	add.w	r6, r4, #23
		memcpy(&conn->access_addr[0],
    707a:	4652      	mov	r2, sl
    707c:	f107 010e 	add.w	r1, r7, #14
    7080:	930a      	str	r3, [sp, #40]	; 0x28
    7082:	f7f9 fab9 	bl	5f8 <memcpy>
		memcpy(&conn->data_chan_map[0],
    7086:	2205      	movs	r2, #5
    7088:	f107 011e 	add.w	r1, r7, #30
    708c:	4630      	mov	r0, r6
    708e:	f7f9 fab3 	bl	5f8 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
    7092:	2105      	movs	r1, #5
    7094:	4630      	mov	r0, r6
    7096:	f7fb ff61 	bl	2f5c <util_ones_count_get>
		conn->data_chan_count =
    709a:	7f62      	ldrb	r2, [r4, #29]
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    709c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		conn->data_chan_count =
    709e:	f360 0205 	bfi	r2, r0, #0, #6
    70a2:	7762      	strb	r2, [r4, #29]
		conn->data_chan_hop = pdu_adv->connect_ind.hop;
    70a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    70a8:	f3c2 0204 	ubfx	r2, r2, #0, #5
    70ac:	77a2      	strb	r2, [r4, #30]
			pdu_adv->connect_ind.interval;
    70ae:	8b3a      	ldrh	r2, [r7, #24]
		conn->conn_interval =
    70b0:	84a2      	strh	r2, [r4, #36]	; 0x24
			pdu_adv->connect_ind.interval * 1250;
    70b2:	f240 46e2 	movw	r6, #1250	; 0x4e2
    70b6:	4356      	muls	r6, r2
		conn->latency = pdu_adv->connect_ind.latency;
    70b8:	7ef9      	ldrb	r1, [r7, #27]
    70ba:	7eba      	ldrb	r2, [r7, #26]
    70bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    70c0:	84e2      	strh	r2, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
    70c2:	4619      	mov	r1, r3
    70c4:	4652      	mov	r2, sl
    70c6:	f104 0054 	add.w	r0, r4, #84	; 0x54
    70ca:	f7f9 fa95 	bl	5f8 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->connect_ind.timeout
    70ce:	8bbb      	ldrh	r3, [r7, #28]
    70d0:	f242 7210 	movw	r2, #10000	; 0x2710
    70d4:	fb02 6303 	mla	r3, r2, r3, r6
    70d8:	3b01      	subs	r3, #1
    70da:	fbb3 f3f6 	udiv	r3, r3, r6
    70de:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    70e0:	4b93      	ldr	r3, [pc, #588]	; (7330 <isr+0x570>)
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    70e2:	4639      	mov	r1, r7
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    70e4:	4433      	add	r3, r6
    70e6:	fbb3 f3f6 	udiv	r3, r3, r6
    70ea:	8663      	strh	r3, [r4, #50]	; 0x32
		node_rx->hdr.handle = conn->handle;
    70ec:	8c23      	ldrh	r3, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    70ee:	f885 800b 	strb.w	r8, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
    70f2:	f04f 0801 	mov.w	r8, #1
    70f6:	f885 800c 	strb.w	r8, [r5, #12]
		node_rx->hdr.handle = conn->handle;
    70fa:	80eb      	strh	r3, [r5, #6]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    70fc:	f811 3b02 	ldrb.w	r3, [r1], #2
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7100:	2206      	movs	r2, #6
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7102:	f3c3 1380 	ubfx	r3, r3, #6, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7106:	712a      	strb	r2, [r5, #4]
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7108:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    710a:	f105 000e 	add.w	r0, r5, #14
    710e:	f7f9 fa73 	bl	5f8 <memcpy>
			pdu_adv->connect_ind.interval;
    7112:	8b3b      	ldrh	r3, [r7, #24]
		radio_le_conn_cmplt->interval =
    7114:	82ab      	strh	r3, [r5, #20]
			pdu_adv->connect_ind.latency;
    7116:	8b7b      	ldrh	r3, [r7, #26]
		radio_le_conn_cmplt->latency =
    7118:	82eb      	strh	r3, [r5, #22]
			pdu_adv->connect_ind.timeout;
    711a:	8bbb      	ldrh	r3, [r7, #28]
		radio_le_conn_cmplt->timeout =
    711c:	832b      	strh	r3, [r5, #24]
			pdu_adv->connect_ind.sca;
    711e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    7122:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    7126:	76ab      	strb	r3, [r5, #26]
		rx_fc_lock(conn->handle);
    7128:	8c20      	ldrh	r0, [r4, #32]
    712a:	f7fe f9d3 	bl	54d4 <rx_fc_lock>
		packet_rx_enqueue();
    712e:	f7fe fb61 	bl	57f4 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    7132:	2003      	movs	r0, #3
    7134:	f7fd fc78 	bl	4a28 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7138:	2800      	cmp	r0, #0
    713a:	f43f ae95 	beq.w	6e68 <isr+0xa8>
			node_rx->hdr.handle = conn->handle;
    713e:	8c23      	ldrh	r3, [r4, #32]
    7140:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    7142:	230a      	movs	r3, #10
    7144:	7103      	strb	r3, [r0, #4]
			if (pdu_adv->chan_sel) {
    7146:	783b      	ldrb	r3, [r7, #0]
    7148:	f013 0320 	ands.w	r3, r3, #32
    714c:	f000 80e7 	beq.w	731e <isr+0x55e>
					((u16_t)conn->access_addr[1] << 8) |
    7150:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    7152:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    7154:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    7156:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    715a:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    715c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    7160:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    7162:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    7164:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    7168:	7761      	strb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    716a:	83e3      	strh	r3, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    716c:	f880 800b 	strb.w	r8, [r0, #11]
			packet_rx_enqueue();
    7170:	f7fe fb40 	bl	57f4 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->connect_ind.sca;
    7174:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
    7178:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    717c:	496d      	ldr	r1, [pc, #436]	; (7334 <isr+0x574>)
		conn->slave.sca = pdu_adv->connect_ind.sca;
    717e:	0952      	lsrs	r2, r2, #5
    7180:	f362 0384 	bfi	r3, r2, #2, #3
    7184:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			(((gc_lookup_ppm[_radio.sca] +
    7188:	f89b 3d08 	ldrb.w	r3, [fp, #3336]	; 0xd08
			   gc_lookup_ppm[conn->slave.sca]) *
    718c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
    7190:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7194:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
    7196:	4373      	muls	r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    7198:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    719c:	4a66      	ldr	r2, [pc, #408]	; (7338 <isr+0x578>)
    719e:	f203 233f 	addw	r3, r3, #575	; 0x23f
    71a2:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->slave.window_widening_periodic_us =
    71a6:	63e3      	str	r3, [r4, #60]	; 0x3c
			(conn_interval_us >> 1) - RADIO_TIFS;
    71a8:	0873      	lsrs	r3, r6, #1
    71aa:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
    71ac:	6423      	str	r3, [r4, #64]	; 0x40
			pdu_adv->connect_ind.win_size * 1250;
    71ae:	7d7b      	ldrb	r3, [r7, #21]
    71b0:	f240 4ae2 	movw	sl, #1250	; 0x4e2
		conn->slave.window_size_prepare_us = 0;
    71b4:	f04f 0800 	mov.w	r8, #0
			pdu_adv->connect_ind.win_size * 1250;
    71b8:	fb0a f303 	mul.w	r3, sl, r3
		conn->slave.window_size_event_us =
    71bc:	6523      	str	r3, [r4, #80]	; 0x50
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    71be:	4641      	mov	r1, r8
		conn->slave.window_size_prepare_us = 0;
    71c0:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    71c4:	4640      	mov	r0, r8
    71c6:	f002 fa02 	bl	95ce <radio_rx_ready_delay_get>
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    71ca:	495c      	ldr	r1, [pc, #368]	; (733c <isr+0x57c>)
		rx_ready_delay = radio_rx_ready_delay_get(0, 0);
    71cc:	900a      	str	r0, [sp, #40]	; 0x28
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    71ce:	f200 4052 	addw	r0, r0, #1106	; 0x452
    71d2:	a355      	add	r3, pc, #340	; (adr r3, 7328 <isr+0x568>)
    71d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    71d8:	fba0 0101 	umull	r0, r1, r0, r1
    71dc:	f7f9 f844 	bl	268 <__aeabi_uldivmod>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    71e0:	f8db 5d64 	ldr.w	r5, [fp, #3428]	; 0xd64
    71e4:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
    71e6:	2327      	movs	r3, #39	; 0x27
		ticks_slot_offset =
    71e8:	429d      	cmp	r5, r3
    71ea:	bf38      	it	cc
    71ec:	461d      	movcc	r5, r3
			HAL_TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
    71ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_xtal_to_start =
    71f2:	6023      	str	r3, [r4, #0]
		conn_interval_us -=
    71f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		conn->hdr.ticks_slot =
    71f6:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_preempt_to_start =
    71f8:	f8c4 8008 	str.w	r8, [r4, #8]
		conn_interval_us -=
    71fc:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
    71fe:	f002 fbd1 	bl	99a4 <radio_tmr_end_get>
    7202:	900b      	str	r0, [sp, #44]	; 0x2c
			((u64_t)pdu_adv->connect_ind.win_offset +
    7204:	8af8      	ldrh	r0, [r7, #22]
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    7206:	4641      	mov	r1, r8
		conn_offset_us +=
    7208:	fb00 aa0a 	mla	sl, r0, sl, sl
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
    720c:	4640      	mov	r0, r8
    720e:	f002 f9dc 	bl	95ca <radio_tx_chain_delay_get>
    7212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7214:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    7218:	449a      	add	sl, r3
		conn_offset_us -= RADIO_TICKER_JITTER_US;
    721a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    721c:	ebaa 0a00 	sub.w	sl, sl, r0
    7220:	ebaa 0303 	sub.w	r3, sl, r3
    7224:	930a      	str	r3, [sp, #40]	; 0x28
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7226:	f240 532d 	movw	r3, #1325	; 0x52d
    722a:	9300      	str	r3, [sp, #0]
    722c:	2205      	movs	r2, #5
    722e:	4b44      	ldr	r3, [pc, #272]	; (7340 <isr+0x580>)
    7230:	f8df a108 	ldr.w	sl, [pc, #264]	; 733c <isr+0x57c>
    7234:	4641      	mov	r1, r8
    7236:	4640      	mov	r0, r8
    7238:	f7fc fbf8 	bl	3a2c <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
    723c:	f240 512e 	movw	r1, #1326	; 0x52e
    7240:	f7fe fcf8 	bl	5c34 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7244:	f81b 3009 	ldrb.w	r3, [fp, r9]
    7248:	f003 030f 	and.w	r3, r3, #15
    724c:	2b01      	cmp	r3, #1
    724e:	d107      	bne.n	7260 <isr+0x4a0>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7250:	f8cd 8000 	str.w	r8, [sp]
    7254:	4643      	mov	r3, r8
    7256:	2203      	movs	r2, #3
    7258:	4641      	mov	r1, r8
    725a:	4640      	mov	r0, r8
    725c:	f7fc fbe6 	bl	3a2c <ticker_stop>
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7260:	fba6 670a 	umull	r6, r7, r6, sl
    7264:	a330      	add	r3, pc, #192	; (adr r3, 7328 <isr+0x568>)
    7266:	e9d3 2300 	ldrd	r2, r3, [r3]
    726a:	4630      	mov	r0, r6
    726c:	4639      	mov	r1, r7
    726e:	f7f8 fffb 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7272:	f8db 3008 	ldr.w	r3, [fp, #8]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    7276:	4a33      	ldr	r2, [pc, #204]	; (7344 <isr+0x584>)
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7278:	eba3 0b05 	sub.w	fp, r3, r5
    727c:	f894 3020 	ldrb.w	r3, [r4, #32]
    7280:	9406      	str	r4, [sp, #24]
    7282:	3307      	adds	r3, #7
    7284:	b2db      	uxtb	r3, r3
    7286:	930b      	str	r3, [sp, #44]	; 0x2c
    7288:	f240 5345 	movw	r3, #1349	; 0x545
    728c:	9308      	str	r3, [sp, #32]
    728e:	4b2e      	ldr	r3, [pc, #184]	; (7348 <isr+0x588>)
    7290:	9307      	str	r3, [sp, #28]
    7292:	4b2e      	ldr	r3, [pc, #184]	; (734c <isr+0x58c>)
    7294:	9305      	str	r3, [sp, #20]
    7296:	68e3      	ldr	r3, [r4, #12]
		     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7298:	4680      	mov	r8, r0
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    729a:	441d      	add	r5, r3
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    729c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    72a0:	2307      	movs	r3, #7
    72a2:	2100      	movs	r1, #0
    72a4:	4343      	muls	r3, r0
    72a6:	fb02 3301 	mla	r3, r2, r1, r3
    72aa:	fba0 0102 	umull	r0, r1, r0, r2
    72ae:	1a30      	subs	r0, r6, r0
    72b0:	4419      	add	r1, r3
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    72b2:	f04f 0400 	mov.w	r4, #0
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    72b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    72ba:	f04f 0300 	mov.w	r3, #0
    72be:	eb67 0101 	sbc.w	r1, r7, r1
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    72c2:	9504      	str	r5, [sp, #16]
    72c4:	9403      	str	r4, [sp, #12]
		     HAL_TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
    72c6:	f7f8 ffcf 	bl	268 <__aeabi_uldivmod>
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    72ca:	990a      	ldr	r1, [sp, #40]	; 0x28
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    72cc:	9002      	str	r0, [sp, #8]
    72ce:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    72d2:	9301      	str	r3, [sp, #4]
		     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    72d4:	fba1 010a 	umull	r0, r1, r1, sl
    72d8:	a313      	add	r3, pc, #76	; (adr r3, 7328 <isr+0x568>)
    72da:	e9d3 2300 	ldrd	r2, r3, [r3]
    72de:	f7f8 ffc3 	bl	268 <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    72e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    72e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    72e8:	9000      	str	r0, [sp, #0]
    72ea:	465b      	mov	r3, fp
    72ec:	4621      	mov	r1, r4
		ticker_status =
    72ee:	4608      	mov	r0, r1
    72f0:	f7fc fafe 	bl	38f0 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    72f4:	f030 0302 	bics.w	r3, r0, #2
    72f8:	f47f adb6 	bne.w	6e68 <isr+0xa8>
    72fc:	e5e9      	b.n	6ed2 <isr+0x112>
	return (adv->rx_addr == ci->tx_addr) &&
    72fe:	2000      	movs	r0, #0
    7300:	e684      	b.n	700c <isr+0x24c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7302:	f89b 302a 	ldrb.w	r3, [fp, #42]	; 0x2a
		(devmatch_ok)) &&
    7306:	079b      	lsls	r3, r3, #30
    7308:	d500      	bpl.n	730c <isr+0x54c>
	return (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    730a:	b134      	cbz	r4, 731a <isr+0x55a>
	       isr_adv_ci_adva_check(adv, ci);
    730c:	4639      	mov	r1, r7
    730e:	4628      	mov	r0, r5
    7310:	f7fe f8bc 	bl	548c <isr_adv_ci_adva_check>
		(devmatch_ok)) &&
    7314:	f000 0001 	and.w	r0, r0, #1
    7318:	e678      	b.n	700c <isr+0x24c>
    731a:	4620      	mov	r0, r4
    731c:	e7fa      	b.n	7314 <isr+0x554>
				le_chan_sel_algo->chan_sel_algo = 0x00;
    731e:	72c3      	strb	r3, [r0, #11]
    7320:	e726      	b.n	7170 <isr+0x3b0>
    7322:	bf00      	nop
    7324:	f3af 8000 	nop.w
    7328:	1afd498d 	.word	0x1afd498d
    732c:	00000007 	.word	0x00000007
    7330:	026259ff 	.word	0x026259ff
    7334:	0000b888 	.word	0x0000b888
    7338:	000f4240 	.word	0x000f4240
    733c:	3b9aca00 	.word	0x3b9aca00
    7340:	00005c35 	.word	0x00005c35
    7344:	1afd498d 	.word	0x1afd498d
    7348:	00005c65 	.word	0x00005c65
    734c:	00006b3d 	.word	0x00006b3d
		if (crc_ok &&
    7350:	2f00      	cmp	r7, #0
    7352:	f000 8255 	beq.w	7800 <isr+0xa40>
	return ((_radio.scanner.filter_policy & 0x01) == 0) ||
    7356:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
    735a:	06df      	lsls	r7, r3, #27
    735c:	d502      	bpl.n	7364 <isr+0x5a4>
		if (crc_ok &&
    735e:	2c00      	cmp	r4, #0
    7360:	f000 824e 	beq.w	7800 <isr+0xa40>
	bool dir_report = false;
    7364:	2300      	movs	r3, #0
    7366:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    736a:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
    736e:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    7372:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    7376:	7a3b      	ldrb	r3, [r7, #8]
    7378:	f003 030f 	and.w	r3, r3, #15
    737c:	2b07      	cmp	r3, #7
	pdu_adv_rx = (void *)_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    737e:	f107 0408 	add.w	r4, r7, #8
	if(pdu_adv_rx->type == 0x07){			//PDU_ADV_TYPE_EXT_IND
    7382:	d17e      	bne.n	7482 <isr+0x6c2>
		if(h->adv_addr){
    7384:	7afb      	ldrb	r3, [r7, #11]
    7386:	f8df 83b4 	ldr.w	r8, [pc, #948]	; 773c <isr+0x97c>
    738a:	07de      	lsls	r6, r3, #31
			ptr += BDADDR_SIZE;
    738c:	bf4c      	ite	mi
    738e:	f107 0612 	addmi.w	r6, r7, #18
		ptr = (u8_t *)h + sizeof(*h);
    7392:	f107 060c 	addpl.w	r6, r7, #12
		if(h->tgt_addr){
    7396:	0798      	lsls	r0, r3, #30
			ptr += BDADDR_SIZE;
    7398:	bf48      	it	mi
    739a:	3606      	addmi	r6, #6
		if(h->adi){
    739c:	f013 0f08 	tst.w	r3, #8
			sid = (u8_t)adi_ptr->sid;
    73a0:	bf1e      	ittt	ne
    73a2:	7873      	ldrbne	r3, [r6, #1]
    73a4:	f3c3 1303 	ubfxne	r3, r3, #4, #4
    73a8:	f888 3000 	strbne.w	r3, [r8]
		if(sid == 0x04){
    73ac:	f898 3000 	ldrb.w	r3, [r8]
			ptr += sizeof(*adi_ptr);
    73b0:	bf18      	it	ne
    73b2:	3602      	addne	r6, #2
		if(sid == 0x04){
    73b4:	2b04      	cmp	r3, #4
    73b6:	d11d      	bne.n	73f4 <isr+0x634>
			stop_time_int = k_cycle_get_32();
    73b8:	f7fa fd4a 	bl	1e50 <_timer_cycle_get_32>
    73bc:	4bd2      	ldr	r3, [pc, #840]	; (7708 <isr+0x948>)
    73be:	6018      	str	r0, [r3, #0]
			event_time_int = (stop_time_int - start_time_int);
    73c0:	4bd2      	ldr	r3, [pc, #840]	; (770c <isr+0x94c>)
    73c2:	681b      	ldr	r3, [r3, #0]
    73c4:	eba0 0e03 	sub.w	lr, r0, r3
    73c8:	4bd1      	ldr	r3, [pc, #836]	; (7710 <isr+0x950>)
    73ca:	f8c3 e000 	str.w	lr, [r3]
			Time_difference_int = (SYS_CLOCK_HW_CYCLES_TO_NS(event_time_int))/1000;
    73ce:	4bd1      	ldr	r3, [pc, #836]	; (7714 <isr+0x954>)
    73d0:	681a      	ldr	r2, [r3, #0]
    73d2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    73d6:	fb82 2309 	smull	r2, r3, r2, r9
    73da:	fba2 010e 	umull	r0, r1, r2, lr
    73de:	fb0e 1103 	mla	r1, lr, r3, r1
    73e2:	4bcd      	ldr	r3, [pc, #820]	; (7718 <isr+0x958>)
    73e4:	681a      	ldr	r2, [r3, #0]
    73e6:	17d3      	asrs	r3, r2, #31
    73e8:	f7f8 ff3e 	bl	268 <__aeabi_uldivmod>
    73ec:	4bcb      	ldr	r3, [pc, #812]	; (771c <isr+0x95c>)
    73ee:	fbb0 f0f9 	udiv	r0, r0, r9
    73f2:	6018      	str	r0, [r3, #0]
		if((h->aux_ptr && !aux_scan && (sid == 0x02)) || 
    73f4:	7afb      	ldrb	r3, [r7, #11]
    73f6:	f013 0310 	ands.w	r3, r3, #16
    73fa:	d006      	beq.n	740a <isr+0x64a>
    73fc:	4ac8      	ldr	r2, [pc, #800]	; (7720 <isr+0x960>)
    73fe:	7812      	ldrb	r2, [r2, #0]
    7400:	b91a      	cbnz	r2, 740a <isr+0x64a>
    7402:	f898 2000 	ldrb.w	r2, [r8]
    7406:	2a02      	cmp	r2, #2
    7408:	d005      	beq.n	7416 <isr+0x656>
    740a:	f898 2000 	ldrb.w	r2, [r8]
    740e:	2a04      	cmp	r2, #4
    7410:	d137      	bne.n	7482 <isr+0x6c2>
			((sid == 0x04) && h->aux_ptr)){
    7412:	2b00      	cmp	r3, #0
    7414:	d035      	beq.n	7482 <isr+0x6c2>
			aux_scan = 0x01;
    7416:	4bc2      	ldr	r3, [pc, #776]	; (7720 <isr+0x960>)
    7418:	2201      	movs	r2, #1
    741a:	701a      	strb	r2, [r3, #0]
			_radio.ext_scanner.chan_index = ap->chan_idx;
    741c:	7833      	ldrb	r3, [r6, #0]
    741e:	f3c3 0305 	ubfx	r3, r3, #0, #6
    7422:	f88b 3c90 	strb.w	r3, [fp, #3216]	; 0xc90
			_radio.ext_scanner.chan_off	= ap->offs;
    7426:	78b3      	ldrb	r3, [r6, #2]
    7428:	7872      	ldrb	r2, [r6, #1]
    742a:	f003 031f 	and.w	r3, r3, #31
    742e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    7432:	4bbc      	ldr	r3, [pc, #752]	; (7724 <isr+0x964>)
    7434:	b290      	uxth	r0, r2
    7436:	2100      	movs	r1, #0
    7438:	e9c3 0100 	strd	r0, r1, [r3]
			_radio.ext_scanner.chan_off_debug = ap->offs;
    743c:	e9c3 0102 	strd	r0, r1, [r3, #8]
			_radio.ext_scanner.off_unit	= ap->offs_units;
    7440:	7831      	ldrb	r1, [r6, #0]
    7442:	f3c1 11c0 	ubfx	r1, r1, #7, #1
			if(_radio.ext_scanner.off_unit == 0 ){
    7446:	f011 0fff 	tst.w	r1, #255	; 0xff
			_radio.ext_scanner.off_unit	= ap->offs_units;
    744a:	f88b 1cb4 	strb.w	r1, [fp, #3252]	; 0xcb4
    744e:	4619      	mov	r1, r3
				_radio.ext_scanner.chan_off *= 30;
    7450:	bf0c      	ite	eq
    7452:	231e      	moveq	r3, #30
				_radio.ext_scanner.chan_off *= 300;
    7454:	f44f 7396 	movne.w	r3, #300	; 0x12c
    7458:	fba2 2303 	umull	r2, r3, r2, r3
    745c:	e9c1 2300 	strd	r2, r3, [r1]
			_radio.ext_scanner.chan_off_calculation = _radio.ext_scanner.chan_off;
    7460:	e9d1 0100 	ldrd	r0, r1, [r1]
    7464:	4bb0      	ldr	r3, [pc, #704]	; (7728 <isr+0x968>)
    7466:	e9c3 0100 	strd	r0, r1, [r3]
			start_time_ticker = k_cycle_get_32();
    746a:	f7fa fcf1 	bl	1e50 <_timer_cycle_get_32>
    746e:	4baf      	ldr	r3, [pc, #700]	; (772c <isr+0x96c>)
    7470:	6018      	str	r0, [r3, #0]
			start_time_int = k_cycle_get_32();
    7472:	f7fa fced 	bl	1e50 <_timer_cycle_get_32>
    7476:	4ba5      	ldr	r3, [pc, #660]	; (770c <isr+0x94c>)
    7478:	6018      	str	r0, [r3, #0]
		_radio.ext_scanner.ticks_now = ticker_ticks_now_get();
    747a:	f7fc fba7 	bl	3bcc <ticker_ticks_now_get>
    747e:	f8cb 0cec 	str.w	r0, [fp, #3308]	; 0xcec
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7482:	f8db 3c54 	ldr.w	r3, [fp, #3156]	; 0xc54
    7486:	2b00      	cmp	r3, #0
    7488:	f000 81a6 	beq.w	77d8 <isr+0xa18>
    748c:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    7490:	b133      	cbz	r3, 74a0 <isr+0x6e0>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7492:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
    7496:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    749a:	429a      	cmp	r2, r3
    749c:	f040 819c 	bne.w	77d8 <isr+0xa18>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    74a0:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    74a4:	06d9      	lsls	r1, r3, #27
    74a6:	f140 8187 	bpl.w	77b8 <isr+0x9f8>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    74aa:	7a3b      	ldrb	r3, [r7, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
    74ac:	f013 030f 	ands.w	r3, r3, #15
    74b0:	f040 81b3 	bne.w	781a <isr+0xa5a>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    74b4:	f002 fa76 	bl	99a4 <radio_tmr_end_get>
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    74b8:	f8db 3c28 	ldr.w	r3, [fp, #3112]	; 0xc28
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
    74bc:	f200 2616 	addw	r6, r0, #534	; 0x216
	     (HAL_TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
    74c0:	489b      	ldr	r0, [pc, #620]	; (7730 <isr+0x970>)
    74c2:	2207      	movs	r2, #7
    74c4:	fba3 0100 	umull	r0, r1, r3, r0
    74c8:	fb02 1103 	mla	r1, r2, r3, r1
    74cc:	a38c      	add	r3, pc, #560	; (adr r3, 7700 <isr+0x940>)
    74ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    74d2:	f7f8 fec9 	bl	268 <__aeabi_uldivmod>
    74d6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
    74da:	4286      	cmp	r6, r0
    74dc:	f080 817c 	bcs.w	77d8 <isr+0xa18>
			node_rx = packet_rx_reserve_get(4);
    74e0:	2004      	movs	r0, #4
    74e2:	f7fd faa1 	bl	4a28 <packet_rx_reserve_get>
		if (node_rx == 0) {
    74e6:	4682      	mov	sl, r0
    74e8:	2800      	cmp	r0, #0
    74ea:	f000 8189 	beq.w	7800 <isr+0xa40>
		_radio.state = STATE_STOP;
    74ee:	2604      	movs	r6, #4
		_radio.scanner.conn = NULL;
    74f0:	2300      	movs	r3, #0
		conn = _radio.scanner.conn;
    74f2:	f8db 4c54 	ldr.w	r4, [fp, #3156]	; 0xc54
		_radio.state = STATE_STOP;
    74f6:	f88b 6014 	strb.w	r6, [fp, #20]
		_radio.scanner.conn = NULL;
    74fa:	f8cb 3c54 	str.w	r3, [fp, #3156]	; 0xc54
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    74fe:	f002 f8cf 	bl	96a0 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
    7502:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7504:	498b      	ldr	r1, [pc, #556]	; (7734 <isr+0x974>)
			pdu_adv_tx->chan_sel = 1;
    7506:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    750a:	f043 0325 	orr.w	r3, r3, #37	; 0x25
    750e:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    7510:	7a3a      	ldrb	r2, [r7, #8]
    7512:	b2db      	uxtb	r3, r3
    7514:	f3c2 1280 	ubfx	r2, r2, #6, #1
    7518:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_connect_ind);
    751c:	2222      	movs	r2, #34	; 0x22
    751e:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    7520:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    7524:	09d2      	lsrs	r2, r2, #7
    7526:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    752a:	4605      	mov	r5, r0
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    752c:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    752e:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    7532:	f105 0908 	add.w	r9, r5, #8
			memcpy(&pdu_adv_tx->connect_ind.init_addr[0],
    7536:	f7f9 f85f 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.adv_addr[0],
    753a:	2206      	movs	r2, #6
    753c:	f107 010a 	add.w	r1, r7, #10
    7540:	4648      	mov	r0, r9
    7542:	f7f9 f859 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.
    7546:	4632      	mov	r2, r6
    7548:	f104 0110 	add.w	r1, r4, #16
    754c:	f105 000e 	add.w	r0, r5, #14
    7550:	f7f9 f852 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->connect_ind.crc_init[0],
    7554:	2203      	movs	r2, #3
    7556:	f104 0114 	add.w	r1, r4, #20
    755a:	f105 0012 	add.w	r0, r5, #18
    755e:	f7f9 f84b 	bl	5f8 <memcpy>
		pdu_adv_tx->connect_ind.win_size = 1;
    7562:	2301      	movs	r3, #1
    7564:	756b      	strb	r3, [r5, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
    7566:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
		conn_interval_us =
    756a:	f240 46e2 	movw	r6, #1250	; 0x4e2
    756e:	435e      	muls	r6, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    7570:	f002 fa18 	bl	99a4 <radio_tmr_end_get>
		if (!_radio.remainder_anchor ||
    7574:	f8db 300c 	ldr.w	r3, [fp, #12]
		if (_radio.scanner.win_offset_us == 0) {
    7578:	f8db 8c58 	ldr.w	r8, [fp, #3160]	; 0xc58
		if (!_radio.remainder_anchor ||
    757c:	2b00      	cmp	r3, #0
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
    757e:	bfcc      	ite	gt
    7580:	f500 60db 	addgt.w	r0, r0, #1752	; 0x6d8
			conn_offset_us -= HAL_TICKER_TICKS_TO_US(1);
    7584:	f200 60ba 	addwle	r0, r0, #1722	; 0x6ba
		if (_radio.scanner.win_offset_us == 0) {
    7588:	f1b8 0f00 	cmp.w	r8, #0
    758c:	f040 814f 	bne.w	782e <isr+0xa6e>
			pdu_adv_tx->connect_ind.win_offset = 0;
    7590:	f885 8016 	strb.w	r8, [r5, #22]
    7594:	f885 8017 	strb.w	r8, [r5, #23]
    7598:	4680      	mov	r8, r0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    759a:	2100      	movs	r1, #0
    759c:	4608      	mov	r0, r1
    759e:	f002 f80f 	bl	95c0 <radio_tx_ready_delay_get>
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    75a2:	2100      	movs	r1, #0
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
    75a4:	eba8 0800 	sub.w	r8, r8, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
    75a8:	4608      	mov	r0, r1
    75aa:	f002 f80e 	bl	95ca <radio_tx_chain_delay_get>
    75ae:	eba8 0000 	sub.w	r0, r8, r0
		conn_space_us += HAL_TICKER_TICKS_TO_US(1);
    75b2:	f100 031e 	add.w	r3, r0, #30
    75b6:	930a      	str	r3, [sp, #40]	; 0x28
		pdu_adv_tx->connect_ind.interval =
    75b8:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
    75bc:	832b      	strh	r3, [r5, #24]
		pdu_adv_tx->connect_ind.latency =
    75be:	f8bb 3c4a 	ldrh.w	r3, [fp, #3146]	; 0xc4a
    75c2:	836b      	strh	r3, [r5, #26]
		pdu_adv_tx->connect_ind.timeout =
    75c4:	f8bb 3c4c 	ldrh.w	r3, [fp, #3148]	; 0xc4c
    75c8:	83ab      	strh	r3, [r5, #28]
		memcpy(&pdu_adv_tx->connect_ind.chan_map[0],
    75ca:	f104 0117 	add.w	r1, r4, #23
    75ce:	2205      	movs	r2, #5
    75d0:	f105 001e 	add.w	r0, r5, #30
    75d4:	f7f9 f810 	bl	5f8 <memcpy>
		pdu_adv_tx->connect_ind.hop =
    75d8:	7fa2      	ldrb	r2, [r4, #30]
    75da:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    75de:	f362 0304 	bfi	r3, r2, #0, #5
    75e2:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		pdu_adv_tx->connect_ind.sca = _radio.sca;
    75e6:	f89b 2d08 	ldrb.w	r2, [fp, #3336]	; 0xd08
    75ea:	f362 1347 	bfi	r3, r2, #5, #3
    75ee:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
		radio_switch_complete_and_disable();
    75f2:	f002 f86f 	bl	96d4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
    75f6:	4628      	mov	r0, r5
    75f8:	f001 ffdc 	bl	95b4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    75fc:	f002 f818 	bl	9630 <radio_is_ready>
    7600:	4680      	mov	r8, r0
    7602:	2800      	cmp	r0, #0
    7604:	f47f ac30 	bne.w	6e68 <isr+0xa8>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7608:	f44f 7282 	mov.w	r2, #260	; 0x104
    760c:	f8db 1cf0 	ldr.w	r1, [fp, #3312]	; 0xcf0
    7610:	4620      	mov	r0, r4
    7612:	f7fb fb3c 	bl	2c8e <mem_index_get>
    7616:	8420      	strh	r0, [r4, #32]
		radio_le_conn_cmplt->status = 0x00;
    7618:	f88a 800b 	strb.w	r8, [sl, #11]
		radio_le_conn_cmplt->role = 0x00;
    761c:	f88a 800c 	strb.w	r8, [sl, #12]
				pdu_adv_tx->rx_addr;
    7620:	782b      	ldrb	r3, [r5, #0]
		node_rx->hdr.handle = conn->handle;
    7622:	f8aa 0006 	strh.w	r0, [sl, #6]
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7626:	2206      	movs	r2, #6
				pdu_adv_tx->rx_addr;
    7628:	f3c3 13c0 	ubfx	r3, r3, #7, #1
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    762c:	f88a 2004 	strb.w	r2, [sl, #4]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7630:	4649      	mov	r1, r9
			radio_le_conn_cmplt->peer_addr_type =
    7632:	f88a 300d 	strb.w	r3, [sl, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7636:	f10a 000e 	add.w	r0, sl, #14
    763a:	f7f8 ffdd 	bl	5f8 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
    763e:	f8bb 3c48 	ldrh.w	r3, [fp, #3144]	; 0xc48
    7642:	f8aa 3014 	strh.w	r3, [sl, #20]
		radio_le_conn_cmplt->latency = _radio.scanner.conn_latency;
    7646:	f8bb 3c4a 	ldrh.w	r3, [fp, #3146]	; 0xc4a
    764a:	f8aa 3016 	strh.w	r3, [sl, #22]
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
    764e:	f8bb 3c4c 	ldrh.w	r3, [fp, #3148]	; 0xc4c
    7652:	f8aa 3018 	strh.w	r3, [sl, #24]
			pdu_adv_tx->connect_ind.sca;
    7656:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    765a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
    765e:	f88a 301a 	strb.w	r3, [sl, #26]
		rx_fc_lock(conn->handle);
    7662:	8c20      	ldrh	r0, [r4, #32]
    7664:	f7fd ff36 	bl	54d4 <rx_fc_lock>
		packet_rx_enqueue();
    7668:	f7fe f8c4 	bl	57f4 <packet_rx_enqueue>
			node_rx = packet_rx_reserve_get(3);
    766c:	2003      	movs	r0, #3
    766e:	f7fd f9db 	bl	4a28 <packet_rx_reserve_get>
			LL_ASSERT(node_rx);
    7672:	2800      	cmp	r0, #0
    7674:	f43f abf8 	beq.w	6e68 <isr+0xa8>
			node_rx->hdr.handle = conn->handle;
    7678:	8c23      	ldrh	r3, [r4, #32]
    767a:	80c3      	strh	r3, [r0, #6]
			node_rx->hdr.type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    767c:	230a      	movs	r3, #10
    767e:	7103      	strb	r3, [r0, #4]
			if (pdu_adv_rx->chan_sel) {
    7680:	7a3b      	ldrb	r3, [r7, #8]
    7682:	f013 0320 	ands.w	r3, r3, #32
    7686:	d00e      	beq.n	76a6 <isr+0x8e6>
					((u16_t)conn->access_addr[1] << 8) |
    7688:	7c62      	ldrb	r2, [r4, #17]
					conn->access_addr[0];
    768a:	7c23      	ldrb	r3, [r4, #16]
					((u16_t)conn->access_addr[3] << 8) |
    768c:	7ce1      	ldrb	r1, [r4, #19]
				u16_t aa_ls =
    768e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
					 conn->access_addr[2];
    7692:	7ca2      	ldrb	r2, [r4, #18]
				u16_t aa_ms =
    7694:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				conn->data_chan_sel = 1;
    7698:	7f61      	ldrb	r1, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
    769a:	4053      	eors	r3, r2
				conn->data_chan_sel = 1;
    769c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
				conn->data_chan_id = aa_ms ^ aa_ls;
    76a0:	83e3      	strh	r3, [r4, #30]
				conn->data_chan_sel = 1;
    76a2:	7761      	strb	r1, [r4, #29]
				le_chan_sel_algo->chan_sel_algo = 0x01;
    76a4:	2301      	movs	r3, #1
				le_chan_sel_algo->chan_sel_algo = 0x00;
    76a6:	72c3      	strb	r3, [r0, #11]
			packet_rx_enqueue();
    76a8:	f7fe f8a4 	bl	57f4 <packet_rx_enqueue>
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    76ac:	f8db 3d64 	ldr.w	r3, [fp, #3428]	; 0xd64
    76b0:	6063      	str	r3, [r4, #4]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    76b2:	2b27      	cmp	r3, #39	; 0x27
    76b4:	bf38      	it	cc
    76b6:	2327      	movcc	r3, #39	; 0x27
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    76b8:	2227      	movs	r2, #39	; 0x27
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    76ba:	2500      	movs	r5, #0
		conn->hdr.ticks_xtal_to_start =	HAL_TICKER_US_TO_TICKS(
    76bc:	6022      	str	r2, [r4, #0]
		ticks_slot_offset = (conn->hdr.ticks_active_to_start <
    76be:	4698      	mov	r8, r3
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
    76c0:	f8db 2c50 	ldr.w	r2, [fp, #3152]	; 0xc50
    76c4:	60e2      	str	r2, [r4, #12]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    76c6:	f44f 63ef 	mov.w	r3, #1912	; 0x778
    76ca:	2206      	movs	r2, #6
		conn->hdr.ticks_preempt_to_start = HAL_TICKER_US_TO_TICKS(
    76cc:	60a5      	str	r5, [r4, #8]
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    76ce:	4629      	mov	r1, r5
    76d0:	9300      	str	r3, [sp, #0]
    76d2:	4628      	mov	r0, r5
    76d4:	4b18      	ldr	r3, [pc, #96]	; (7738 <isr+0x978>)
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    76d6:	f8df a068 	ldr.w	sl, [pc, #104]	; 7740 <isr+0x980>
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    76da:	f7fc f9a7 	bl	3a2c <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
    76de:	f240 7179 	movw	r1, #1913	; 0x779
    76e2:	f7fe fa8f 	bl	5c04 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    76e6:	462b      	mov	r3, r5
    76e8:	2204      	movs	r2, #4
    76ea:	4629      	mov	r1, r5
    76ec:	9500      	str	r5, [sp, #0]
    76ee:	4628      	mov	r0, r5
    76f0:	f7fc f99c 	bl	3a2c <ticker_stop>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    76f4:	f8db 3008 	ldr.w	r3, [fp, #8]
    76f8:	f894 9020 	ldrb.w	r9, [r4, #32]
    76fc:	e022      	b.n	7744 <isr+0x984>
    76fe:	bf00      	nop
    7700:	3b9aca00 	.word	0x3b9aca00
    7704:	00000000 	.word	0x00000000
    7708:	20003508 	.word	0x20003508
    770c:	2000347c 	.word	0x2000347c
    7710:	2000353c 	.word	0x2000353c
    7714:	200061fc 	.word	0x200061fc
    7718:	200061f8 	.word	0x200061f8
    771c:	20003564 	.word	0x20003564
    7720:	200010f0 	.word	0x200010f0
    7724:	20001018 	.word	0x20001018
    7728:	20001028 	.word	0x20001028
    772c:	20003534 	.word	0x20003534
    7730:	1afd498d 	.word	0x1afd498d
    7734:	20000fae 	.word	0x20000fae
    7738:	00005c05 	.word	0x00005c05
    773c:	20003528 	.word	0x20003528
    7740:	3b9aca00 	.word	0x3b9aca00
		ticker_status =
    7744:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7746:	eba3 0b08 	sub.w	fp, r3, r8
		ticker_status =
    774a:	f44f 63f2 	mov.w	r3, #1936	; 0x790
    774e:	9308      	str	r3, [sp, #32]
    7750:	4ba5      	ldr	r3, [pc, #660]	; (79e8 <isr+0xc28>)
    7752:	9307      	str	r3, [sp, #28]
    7754:	4ba5      	ldr	r3, [pc, #660]	; (79ec <isr+0xc2c>)
    7756:	9305      	str	r3, [sp, #20]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7758:	68e3      	ldr	r3, [r4, #12]
		ticker_status =
    775a:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    775c:	fba6 670a 	umull	r6, r7, r6, sl
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7760:	4443      	add	r3, r8
		ticker_status =
    7762:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    7764:	4630      	mov	r0, r6
    7766:	a39e      	add	r3, pc, #632	; (adr r3, 79e0 <isr+0xc20>)
    7768:	e9d3 2300 	ldrd	r2, r3, [r3]
    776c:	4639      	mov	r1, r7
    776e:	f7f8 fd7b 	bl	268 <__aeabi_uldivmod>
    7772:	4610      	mov	r0, r2
    7774:	4619      	mov	r1, r3
    7776:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    777a:	2300      	movs	r3, #0
    777c:	f7f8 fd74 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7780:	a397      	add	r3, pc, #604	; (adr r3, 79e0 <isr+0xc20>)
    7782:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7786:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7788:	4639      	mov	r1, r7
    778a:	4630      	mov	r0, r6
    778c:	f7f8 fd6c 	bl	268 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    7790:	990a      	ldr	r1, [sp, #40]	; 0x28
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    7792:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_space_us),
    7794:	a392      	add	r3, pc, #584	; (adr r3, 79e0 <isr+0xc20>)
    7796:	e9d3 2300 	ldrd	r2, r3, [r3]
    779a:	fba1 010a 	umull	r0, r1, r1, sl
    779e:	f7f8 fd63 	bl	268 <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    77a2:	f109 0907 	add.w	r9, r9, #7
		ticker_status =
    77a6:	fa5f f989 	uxtb.w	r9, r9
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    77aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticker_status =
    77ae:	9000      	str	r0, [sp, #0]
    77b0:	465b      	mov	r3, fp
    77b2:	464a      	mov	r2, r9
    77b4:	4629      	mov	r1, r5
    77b6:	e59a      	b.n	72ee <isr+0x52e>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
    77b8:	7a3a      	ldrb	r2, [r7, #8]
    77ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
    77be:	f3c2 1280 	ubfx	r2, r2, #6, #1
    77c2:	4293      	cmp	r3, r2
    77c4:	d108      	bne.n	77d8 <isr+0xa18>
		(memcmp(&_radio.scanner.adv_addr[0],
    77c6:	2206      	movs	r2, #6
    77c8:	f107 010a 	add.w	r1, r7, #10
    77cc:	4888      	ldr	r0, [pc, #544]	; (79f0 <isr+0xc30>)
    77ce:	f7f8 fefe 	bl	5ce <memcmp>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
    77d2:	2800      	cmp	r0, #0
    77d4:	f43f ae69 	beq.w	74aa <isr+0x6ea>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    77d8:	7a3b      	ldrb	r3, [r7, #8]
    77da:	f013 030f 	ands.w	r3, r3, #15
    77de:	d038      	beq.n	7852 <isr+0xa92>
    77e0:	2b07      	cmp	r3, #7
    77e2:	d134      	bne.n	784e <isr+0xa8e>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    77e4:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    77e8:	0752      	lsls	r2, r2, #29
    77ea:	d132      	bne.n	7852 <isr+0xa92>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    77ec:	7a3b      	ldrb	r3, [r7, #8]
					&dir_report))) ||
    77ee:	f003 020b 	and.w	r2, r3, #11
    77f2:	2a02      	cmp	r2, #2
    77f4:	f040 8086 	bne.w	7904 <isr+0xb44>
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    77f8:	7a7b      	ldrb	r3, [r7, #9]
    77fa:	2b00      	cmp	r3, #0
    77fc:	f040 80a8 	bne.w	7950 <isr+0xb90>
			_radio.state = STATE_CLOSE;
    7800:	2303      	movs	r3, #3
    7802:	f88b 3014 	strb.w	r3, [fp, #20]
			radio_disable();
    7806:	f001 fef5 	bl	95f4 <radio_disable>
			_radio.scanner.state = 0;
    780a:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
    780e:	f36f 0341 	bfc	r3, #1, #1
    7812:	f88b 3c2c 	strb.w	r3, [fp, #3116]	; 0xc2c
    7816:	f7ff bb5c 	b.w	6ed2 <isr+0x112>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
    781a:	2b01      	cmp	r3, #1
    781c:	d1e0      	bne.n	77e0 <isr+0xa20>
		  isr_scan_tgta_check(true, pdu, rl_idx, NULL)))));
    781e:	2100      	movs	r1, #0
    7820:	4620      	mov	r0, r4
    7822:	f7fd fef9 	bl	5618 <isr_scan_tgta_check.isra.30>
				      (_radio.fc_req == _radio.fc_ack)) &&
    7826:	2800      	cmp	r0, #0
    7828:	d0d6      	beq.n	77d8 <isr+0xa18>
    782a:	e643      	b.n	74b4 <isr+0x6f4>
				conn_space_us += conn_interval_us;
    782c:	44b0      	add	r8, r6
			while ((conn_space_us & ((u32_t)1 << 31)) ||
    782e:	f1b8 0f00 	cmp.w	r8, #0
    7832:	dbfb      	blt.n	782c <isr+0xa6c>
    7834:	4580      	cmp	r8, r0
    7836:	d3f9      	bcc.n	782c <isr+0xa6c>
			pdu_adv_tx->connect_ind.win_offset =
    7838:	f240 43e2 	movw	r3, #1250	; 0x4e2
				(conn_space_us - conn_offset_us) / 1250;
    783c:	eba8 0000 	sub.w	r0, r8, r0
			pdu_adv_tx->connect_ind.win_offset =
    7840:	fbb0 f0f3 	udiv	r0, r0, r3
			pdu_adv_tx->connect_ind.win_size++;
    7844:	7d6b      	ldrb	r3, [r5, #21]
			pdu_adv_tx->connect_ind.win_offset =
    7846:	82e8      	strh	r0, [r5, #22]
			pdu_adv_tx->connect_ind.win_size++;
    7848:	3301      	adds	r3, #1
    784a:	756b      	strb	r3, [r5, #21]
    784c:	e6a5      	b.n	759a <isr+0x7da>
		   (_radio.scanner.phy)) ||
    784e:	2b06      	cmp	r3, #6
    7850:	d14d      	bne.n	78ee <isr+0xb2e>
		 (_radio.scanner.type != 0) &&
    7852:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    7856:	0716      	lsls	r6, r2, #28
    7858:	d547      	bpl.n	78ea <isr+0xb2a>
		 (_radio.scanner.type != 0) &&
    785a:	f8db 2c54 	ldr.w	r2, [fp, #3156]	; 0xc54
    785e:	2a00      	cmp	r2, #0
    7860:	d143      	bne.n	78ea <isr+0xb2a>
		err = isr_rx_scan_report(rssi_ready,
    7862:	4628      	mov	r0, r5
    7864:	f7fe fa0a 	bl	5c7c <isr_rx_scan_report.isra.38>
		if (err) {
    7868:	2800      	cmp	r0, #0
    786a:	d1c9      	bne.n	7800 <isr+0xa40>
		if(pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND){
    786c:	7a3b      	ldrb	r3, [r7, #8]
    786e:	f003 030f 	and.w	r3, r3, #15
    7872:	2b07      	cmp	r3, #7
    7874:	d101      	bne.n	787a <isr+0xaba>
			pdu_adv_tx = (void *)radio_pkt_scratch_get();
    7876:	f001 ff13 	bl	96a0 <radio_pkt_scratch_get>
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    787a:	f001 ff11 	bl	96a0 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    787e:	7803      	ldrb	r3, [r0, #0]
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    7880:	495c      	ldr	r1, [pc, #368]	; (79f4 <isr+0xc34>)
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    7882:	2203      	movs	r2, #3
    7884:	f362 0303 	bfi	r3, r2, #0, #4
    7888:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    788a:	7a3a      	ldrb	r2, [r7, #8]
    788c:	b2db      	uxtb	r3, r3
    788e:	f3c2 1280 	ubfx	r2, r2, #6, #1
    7892:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_scan_req);
    7896:	220c      	movs	r2, #12
    7898:	7042      	strb	r2, [r0, #1]
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    789a:	f89b 2c2d 	ldrb.w	r2, [fp, #3117]	; 0xc2d
    789e:	09d2      	lsrs	r2, r2, #7
    78a0:	f362 1386 	bfi	r3, r2, #6, #1
		pdu_adv_tx = (void *)radio_pkt_scratch_get();
    78a4:	4604      	mov	r4, r0
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    78a6:	2206      	movs	r2, #6
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
    78a8:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_adv_tx->scan_req.scan_addr[0],
    78ac:	f7f8 fea4 	bl	5f8 <memcpy>
		memcpy(&pdu_adv_tx->scan_req.adv_addr[0],
    78b0:	2206      	movs	r2, #6
    78b2:	f107 010a 	add.w	r1, r7, #10
    78b6:	f104 0008 	add.w	r0, r4, #8
    78ba:	f7f8 fe9d 	bl	5f8 <memcpy>
		_radio.scanner.state = 1;
    78be:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
    78c2:	f043 0302 	orr.w	r3, r3, #2
    78c6:	f88b 3c2c 	strb.w	r3, [fp, #3116]	; 0xc2c
		radio_tmr_tifs_set(RADIO_TIFS);
    78ca:	2096      	movs	r0, #150	; 0x96
		_radio.state = STATE_TX;
    78cc:	2302      	movs	r3, #2
    78ce:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_tmr_tifs_set(RADIO_TIFS);
    78d2:	f001 ff79 	bl	97c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    78d6:	2000      	movs	r0, #0
    78d8:	f001 fee6 	bl	96a8 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
    78dc:	4620      	mov	r0, r4
    78de:	f001 fe69 	bl	95b4 <radio_pkt_tx_set>
		radio_tmr_end_capture();
    78e2:	f002 f84d 	bl	9980 <radio_tmr_end_capture>
    78e6:	f7ff bb64 	b.w	6fb2 <isr+0x1f2>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    78ea:	2b00      	cmp	r3, #0
    78ec:	d084      	beq.n	77f8 <isr+0xa38>
    78ee:	2b01      	cmp	r3, #1
    78f0:	f47f af7c 	bne.w	77ec <isr+0xa2c>
		    isr_scan_tgta_check(false, pdu_adv_rx, rl_idx,
    78f4:	a90d      	add	r1, sp, #52	; 0x34
    78f6:	4620      	mov	r0, r4
    78f8:	f7fd fe8e 	bl	5618 <isr_scan_tgta_check.isra.30>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    78fc:	2800      	cmp	r0, #0
    78fe:	f47f af7b 	bne.w	77f8 <isr+0xa38>
    7902:	e773      	b.n	77ec <isr+0xa2c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    7904:	f003 030f 	and.w	r3, r3, #15
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    7908:	2b07      	cmp	r3, #7
    790a:	d105      	bne.n	7918 <isr+0xb58>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    790c:	f89b 3c2d 	ldrb.w	r3, [fp, #3117]	; 0xc2d
    7910:	075c      	lsls	r4, r3, #29
    7912:	f47f af71 	bne.w	77f8 <isr+0xa38>
    7916:	e773      	b.n	7800 <isr+0xa40>
		   (_radio.scanner.phy)) ||
    7918:	2b04      	cmp	r3, #4
    791a:	f47f af71 	bne.w	7800 <isr+0xa40>
		   (_radio.scanner.state != 0) &&
    791e:	f89b 3c2c 	ldrb.w	r3, [fp, #3116]	; 0xc2c
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    7922:	0798      	lsls	r0, r3, #30
    7924:	f57f af6c 	bpl.w	7800 <isr+0xa40>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    7928:	f001 feba 	bl	96a0 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    792c:	7a3b      	ldrb	r3, [r7, #8]
    792e:	7802      	ldrb	r2, [r0, #0]
    7930:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7934:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    7938:	f47f af62 	bne.w	7800 <isr+0xa40>
		(memcmp(&sreq->scan_req.adv_addr[0],
    793c:	2206      	movs	r2, #6
    793e:	f107 010a 	add.w	r1, r7, #10
    7942:	3008      	adds	r0, #8
    7944:	f7f8 fe43 	bl	5ce <memcmp>
		   (_radio.scanner.state != 0) &&
    7948:	2800      	cmp	r0, #0
    794a:	f43f af55 	beq.w	77f8 <isr+0xa38>
    794e:	e757      	b.n	7800 <isr+0xa40>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
    7950:	f8db 3c54 	ldr.w	r3, [fp, #3156]	; 0xc54
    7954:	2b00      	cmp	r3, #0
    7956:	f47f af53 	bne.w	7800 <isr+0xa40>
		err = isr_rx_scan_report(rssi_ready,
    795a:	4628      	mov	r0, r5
    795c:	f7fe f98e 	bl	5c7c <isr_rx_scan_report.isra.38>
    7960:	e74e      	b.n	7800 <isr+0xa40>
	_radio.packet_counter++;
    7962:	f89b 3d00 	ldrb.w	r3, [fp, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    7966:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
	_radio.packet_counter++;
    796a:	3301      	adds	r3, #1
    796c:	f88b 3d00 	strb.w	r3, [fp, #3328]	; 0xd00
	node_rx = _radio.packet_rx[_radio.packet_rx_last];
    7970:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    7974:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    7978:	2301      	movs	r3, #1
    797a:	7133      	strb	r3, [r6, #4]
	if (crc_ok) {
    797c:	2f00      	cmp	r7, #0
    797e:	f000 8374 	beq.w	806a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a>
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    7982:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7986:	7a30      	ldrb	r0, [r6, #8]
    7988:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    798c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    7990:	f002 0101 	and.w	r1, r2, #1
    7994:	4288      	cmp	r0, r1
    7996:	f000 80bd 	beq.w	7b14 <isr+0xd54>
		_radio.conn_curr->sn++;
    799a:	f081 0101 	eor.w	r1, r1, #1
    799e:	f361 0200 	bfi	r2, r1, #0, #1
    79a2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		if (_radio.role == ROLE_SLAVE) {
    79a6:	f89b 2013 	ldrb.w	r2, [fp, #19]
    79aa:	2a03      	cmp	r2, #3
			_radio.conn_curr->slave.latency_enabled = 1;
    79ac:	bf02      	ittt	eq
    79ae:	f893 2038 	ldrbeq.w	r2, [r3, #56]	; 0x38
    79b2:	f042 0201 	orreq.w	r2, r2, #1
    79b6:	f883 2038 	strbeq.w	r2, [r3, #56]	; 0x38
		if (_radio.conn_curr->empty == 0) {
    79ba:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    79be:	0611      	lsls	r1, r2, #24
    79c0:	f100 80a4 	bmi.w	7b0c <isr+0xd4c>
			node_tx = _radio.conn_curr->pkt_tx_head;
    79c4:	f8d3 80ec 	ldr.w	r8, [r3, #236]	; 0xec
				_radio.conn_curr->packet_tx_head_offset);
    79c8:	f893 e101 	ldrb.w	lr, [r3, #257]	; 0x101
			pdu_data_tx = (void *)(node_tx->pdu_data +
    79cc:	f108 0c04 	add.w	ip, r8, #4
    79d0:	eb0c 050e 	add.w	r5, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
    79d4:	786c      	ldrb	r4, [r5, #1]
			if (pdu_data_tx_len != 0) {
    79d6:	b97c      	cbnz	r4, 79f8 <isr+0xc38>
	u8_t terminate = 0;
    79d8:	2500      	movs	r5, #0
    79da:	e035      	b.n	7a48 <isr+0xc88>
    79dc:	f3af 8000 	nop.w
    79e0:	1afd498d 	.word	0x1afd498d
    79e4:	00000007 	.word	0x00000007
    79e8:	00005c65 	.word	0x00005c65
    79ec:	00006b39 	.word	0x00006b39
    79f0:	20000fb4 	.word	0x20000fb4
    79f4:	20000fae 	.word	0x20000fae
				if (_radio.conn_curr->enc_tx) {
    79f8:	0692      	lsls	r2, r2, #26
    79fa:	d50a      	bpl.n	7a12 <isr+0xc52>
					_radio.conn_curr->ccm_tx.counter++;
    79fc:	f8d3 00da 	ldr.w	r0, [r3, #218]	; 0xda
    7a00:	f8d3 10de 	ldr.w	r1, [r3, #222]	; 0xde
    7a04:	3001      	adds	r0, #1
    7a06:	f141 0100 	adc.w	r1, r1, #0
    7a0a:	f8c3 00da 	str.w	r0, [r3, #218]	; 0xda
    7a0e:	f8c3 10de 	str.w	r1, [r3, #222]	; 0xde
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
    7a12:	f81c 300e 	ldrb.w	r3, [ip, lr]
    7a16:	f003 0303 	and.w	r3, r3, #3
    7a1a:	2b03      	cmp	r3, #3
    7a1c:	d1dc      	bne.n	79d8 <isr+0xc18>
	switch (pdu_data_tx->llctrl.opcode) {
    7a1e:	78ea      	ldrb	r2, [r5, #3]
    7a20:	2a02      	cmp	r2, #2
    7a22:	d1d9      	bne.n	79d8 <isr+0xc18>
		_radio.state = STATE_CLOSE;
    7a24:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_disable();
    7a28:	f001 fde4 	bl	95f4 <radio_disable>
		LL_ASSERT(!radio_is_ready());
    7a2c:	f001 fe00 	bl	9630 <radio_is_ready>
    7a30:	2800      	cmp	r0, #0
    7a32:	f47f aa19 	bne.w	6e68 <isr+0xa8>
		     (pdu_data_tx->llctrl.terminate_ind.error_code == 0x13) ?
    7a36:	7929      	ldrb	r1, [r5, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
    7a38:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7a3c:	2913      	cmp	r1, #19
    7a3e:	bf08      	it	eq
    7a40:	2116      	moveq	r1, #22
    7a42:	f7fd feaf 	bl	57a4 <terminate_ind_rx_enqueue>
		terminate = 1;
    7a46:	2501      	movs	r5, #1
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    7a48:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7a4c:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    7a50:	f893 1100 	ldrb.w	r1, [r3, #256]	; 0x100
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    7a54:	4422      	add	r2, r4
    7a56:	b2d2      	uxtb	r2, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    7a58:	4291      	cmp	r1, r2
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    7a5a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if (_radio.conn_curr->packet_tx_head_offset ==
    7a5e:	d11e      	bne.n	7a9e <isr+0xcde>
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    7a60:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
    7a64:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
	conn->packet_tx_head_len = 0;
    7a68:	2000      	movs	r0, #0
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    7a6a:	428a      	cmp	r2, r1
	conn->packet_tx_head_len = 0;
    7a6c:	f883 0100 	strb.w	r0, [r3, #256]	; 0x100
	conn->packet_tx_head_offset = 0;
    7a70:	f883 0101 	strb.w	r0, [r3, #257]	; 0x101
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
    7a74:	d116      	bne.n	7aa4 <isr+0xce4>
		if (node_tx) {
    7a76:	f1b8 0f00 	cmp.w	r8, #0
    7a7a:	d010      	beq.n	7a9e <isr+0xcde>
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    7a7c:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
			conn->pkt_tx_head = conn->pkt_tx_head->next;
    7a80:	6814      	ldr	r4, [r2, #0]
    7a82:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
    7a86:	428a      	cmp	r2, r1
				conn->pkt_tx_ctrl = NULL;
    7a88:	bf06      	itte	eq
    7a8a:	f8c3 00f0 	streq.w	r0, [r3, #240]	; 0xf0
				conn->pkt_tx_ctrl_last = NULL;
    7a8e:	f8c3 00f4 	streq.w	r0, [r3, #244]	; 0xf4
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
    7a92:	f8c3 40f0 	strne.w	r4, [r3, #240]	; 0xf0
			mem_release(node_tx, &_radio.pkt_tx_ctrl_free);
    7a96:	49a9      	ldr	r1, [pc, #676]	; (7d3c <isr+0xf7c>)
    7a98:	4640      	mov	r0, r8
    7a9a:	f7fb f8e0 	bl	2c5e <mem_release>
	struct radio_pdu_node_tx *tx_release = NULL;
    7a9e:	f04f 0800 	mov.w	r8, #0
    7aa2:	e008      	b.n	7ab6 <isr+0xcf6>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    7aa4:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
    7aa8:	428a      	cmp	r2, r1
    7aaa:	6812      	ldr	r2, [r2, #0]
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    7aac:	bf08      	it	eq
    7aae:	f8c3 20f8 	streq.w	r2, [r3, #248]	; 0xf8
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    7ab2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (terminate) {
    7ab6:	b37d      	cbz	r5, 7b18 <isr+0xd58>
		connection_release(_radio.conn_curr);
    7ab8:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7abc:	f7fd ff9e 	bl	59fc <connection_release>
		_radio.conn_curr = NULL;
    7ac0:	2500      	movs	r5, #0
				_radio.conn_curr = NULL;
    7ac2:	f8cb 5cfc 	str.w	r5, [fp, #3324]	; 0xcfc
	if (!radio_tmr_aa_restore()) {
    7ac6:	f001 ff4f 	bl	9968 <radio_tmr_aa_restore>
    7aca:	b918      	cbnz	r0, 7ad4 <isr+0xd14>
		radio_tmr_aa_save(radio_tmr_aa_get());
    7acc:	f001 ff40 	bl	9950 <radio_tmr_aa_get>
    7ad0:	f001 ff44 	bl	995c <radio_tmr_aa_save>
	if (!_radio.conn_curr) {
    7ad4:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7ad8:	2b00      	cmp	r3, #0
    7ada:	f43f a9fa 	beq.w	6ed2 <isr+0x112>
	if (tx_release) {
    7ade:	f1b8 0f00 	cmp.w	r8, #0
    7ae2:	d003      	beq.n	7aec <isr+0xd2c>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    7ae4:	4641      	mov	r1, r8
    7ae6:	8c18      	ldrh	r0, [r3, #32]
    7ae8:	f7fd ff16 	bl	5918 <pdu_node_tx_release>
	if (rx_enqueue) {
    7aec:	2d00      	cmp	r5, #0
    7aee:	f43f a9f0 	beq.w	6ed2 <isr+0x112>
		rx_fc_lock(_radio.conn_curr->handle);
    7af2:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7af6:	8c18      	ldrh	r0, [r3, #32]
    7af8:	f7fd fcec 	bl	54d4 <rx_fc_lock>
		node_rx->hdr.handle = _radio.conn_curr->handle;
    7afc:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7b00:	8c1b      	ldrh	r3, [r3, #32]
    7b02:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    7b04:	f7fd fe76 	bl	57f4 <packet_rx_enqueue>
    7b08:	f7ff b9e3 	b.w	6ed2 <isr+0x112>
			_radio.conn_curr->empty = 0;
    7b0c:	f36f 12c7 	bfc	r2, #7, #1
    7b10:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    7b14:	f04f 0800 	mov.w	r8, #0
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    7b18:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7b1c:	7a32      	ldrb	r2, [r6, #8]
    7b1e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    7b22:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    7b26:	f3c3 0340 	ubfx	r3, r3, #1, #1
    7b2a:	429a      	cmp	r2, r3
    7b2c:	d03c      	beq.n	7ba8 <isr+0xde8>
	u8_t rx_enqueue = 0;
    7b2e:	2500      	movs	r5, #0
		_radio.conn_curr->supervision_expire = 0;
    7b30:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		_radio.crc_expire = 0;
    7b34:	2400      	movs	r4, #0
    7b36:	f88b 4d01 	strb.w	r4, [fp, #3329]	; 0xd01
		_radio.conn_curr->supervision_expire = 0;
    7b3a:	861c      	strh	r4, [r3, #48]	; 0x30
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    7b3c:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    7b40:	a90d      	add	r1, sp, #52	; 0x34
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    7b42:	f890 90a8 	ldrb.w	r9, [r0, #168]	; 0xa8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    7b46:	f7ff f8d5 	bl	6cf4 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7b4a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    7b4e:	2b03      	cmp	r3, #3
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    7b50:	ea4f 19d9 	mov.w	r9, r9, lsr #7
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7b54:	d013      	beq.n	7b7e <isr+0xdbe>
    7b56:	2c00      	cmp	r4, #0
    7b58:	f040 82a0 	bne.w	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
    7b5c:	b13f      	cbz	r7, 7b6e <isr+0xdae>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    7b5e:	7a33      	ldrb	r3, [r6, #8]
    7b60:	06df      	lsls	r7, r3, #27
    7b62:	d404      	bmi.n	7b6e <isr+0xdae>
			 (pdu_data_tx->len == 0)) ||
    7b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			((crc_ok) && (pdu_data_rx->md == 0) &&
    7b66:	785b      	ldrb	r3, [r3, #1]
    7b68:	2b00      	cmp	r3, #0
    7b6a:	f000 8297 	beq.w	809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
    7b6e:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
			 (pdu_data_tx->len == 0)) ||
    7b72:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7b76:	2b00      	cmp	r3, #0
    7b78:	bf0c      	ite	eq
    7b7a:	2302      	moveq	r3, #2
    7b7c:	2303      	movne	r3, #3
	if (_radio.state == STATE_CLOSE) {
    7b7e:	2b03      	cmp	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    7b80:	f88b 3014 	strb.w	r3, [fp, #20]
	if (_radio.state == STATE_CLOSE) {
    7b84:	f040 82a4 	bne.w	80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>
		if (_radio.role == ROLE_MASTER) {
    7b88:	f89b 3013 	ldrb.w	r3, [fp, #19]
    7b8c:	2b04      	cmp	r3, #4
    7b8e:	f040 8287 	bne.w	80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    7b92:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7b96:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
    7b9a:	f369 12c7 	bfi	r2, r9, #7, #1
    7b9e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			radio_disable();
    7ba2:	f001 fd27 	bl	95f4 <radio_disable>
    7ba6:	e78e      	b.n	7ac6 <isr+0xd06>
	    (packet_rx_reserve_get(3) != 0) &&
    7ba8:	2003      	movs	r0, #3
    7baa:	f7fc ff3d 	bl	4a28 <packet_rx_reserve_get>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    7bae:	2800      	cmp	r0, #0
    7bb0:	d0bd      	beq.n	7b2e <isr+0xd6e>
	    (packet_rx_reserve_get(3) != 0) &&
    7bb2:	f89b 3d62 	ldrb.w	r3, [fp, #3426]	; 0xd62
    7bb6:	b373      	cbz	r3, 7c16 <isr+0xe56>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7bb8:	f8db 3d2c 	ldr.w	r3, [fp, #3372]	; 0xd2c
    7bbc:	f8db 2d30 	ldr.w	r2, [fp, #3376]	; 0xd30
	    ((_radio.fc_ena == 0) ||
    7bc0:	4293      	cmp	r3, r2
    7bc2:	d105      	bne.n	7bd0 <isr+0xe10>
	      (_radio.fc_req == _radio.fc_ack)) ||
    7bc4:	f89b 2d60 	ldrb.w	r2, [fp, #3424]	; 0xd60
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    7bc8:	f89b 1d61 	ldrb.w	r1, [fp, #3425]	; 0xd61
    7bcc:	4291      	cmp	r1, r2
    7bce:	d022      	beq.n	7c16 <isr+0xe56>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7bd0:	f8db 2d30 	ldr.w	r2, [fp, #3376]	; 0xd30
	      (_radio.fc_req == _radio.fc_ack)) ||
    7bd4:	4293      	cmp	r3, r2
    7bd6:	d0aa      	beq.n	7b2e <isr+0xd6e>
	      (_radio.fc_req != _radio.fc_ack) &&
    7bd8:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    7bdc:	f89b 2d61 	ldrb.w	r2, [fp, #3425]	; 0xd61
    7be0:	429a      	cmp	r2, r3
    7be2:	d0a4      	beq.n	7b2e <isr+0xd6e>
		(((_radio.fc_req == 0) &&
    7be4:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
	      (_radio.fc_req != _radio.fc_ack) &&
    7be8:	b933      	cbnz	r3, 7bf8 <isr+0xe38>
		   _radio.conn_curr->handle)) ||
    7bea:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		(((_radio.fc_req == 0) &&
    7bee:	f8bb 2d5e 	ldrh.w	r2, [fp, #3422]	; 0xd5e
    7bf2:	8c1b      	ldrh	r3, [r3, #32]
    7bf4:	429a      	cmp	r2, r3
    7bf6:	d00e      	beq.n	7c16 <isr+0xe56>
		 ((_radio.fc_req != 0) &&
    7bf8:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
		   _radio.conn_curr->handle)) ||
    7bfc:	2b00      	cmp	r3, #0
    7bfe:	d096      	beq.n	7b2e <isr+0xd6e>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    7c00:	f89b 3d60 	ldrb.w	r3, [fp, #3424]	; 0xd60
		   _radio.conn_curr->handle)))))) {
    7c04:	f8db 1cfc 	ldr.w	r1, [fp, #3324]	; 0xcfc
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    7c08:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
		 ((_radio.fc_req != 0) &&
    7c0c:	f8b3 2d58 	ldrh.w	r2, [r3, #3416]	; 0xd58
    7c10:	8c0b      	ldrh	r3, [r1, #32]
    7c12:	429a      	cmp	r2, r3
    7c14:	d18b      	bne.n	7b2e <isr+0xd6e>
		if (pdu_data_rx->len != 0) {
    7c16:	f896 9009 	ldrb.w	r9, [r6, #9]
    7c1a:	f1b9 0f00 	cmp.w	r9, #0
    7c1e:	f000 81e1 	beq.w	7fe4 <isr+0x1224>
			if (_radio.conn_curr->enc_rx) {
    7c22:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7c26:	f893 90a8 	ldrb.w	r9, [r3, #168]	; 0xa8
    7c2a:	f019 0910 	ands.w	r9, r9, #16
    7c2e:	d006      	beq.n	7c3e <isr+0xe7e>
				done = radio_ccm_is_done();
    7c30:	f001 ff26 	bl	9a80 <radio_ccm_is_done>
				LL_ASSERT(done);
    7c34:	2800      	cmp	r0, #0
    7c36:	f43f a917 	beq.w	6e68 <isr+0xa8>
				ccm_rx_increment = 1;
    7c3a:	f04f 0901 	mov.w	r9, #1
			if ((_radio.conn_curr->enc_rx &&
    7c3e:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
    7c42:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    7c46:	06dc      	lsls	r4, r3, #27
    7c48:	d40f      	bmi.n	7c6a <isr+0xeaa>
			    (_radio.conn_curr->pause_rx &&
    7c4a:	f8db 4cfc 	ldr.w	r4, [fp, #3324]	; 0xcfc
    7c4e:	7a33      	ldrb	r3, [r6, #8]
    7c50:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
			     !radio_ccm_mic_is_valid()) ||
    7c54:	f012 0f04 	tst.w	r2, #4
    7c58:	d120      	bne.n	7c9c <isr+0xedc>
			switch (pdu_data_rx->ll_id) {
    7c5a:	f013 0303 	ands.w	r3, r3, #3
    7c5e:	f000 81c1 	beq.w	7fe4 <isr+0x1224>
    7c62:	2b02      	cmp	r3, #2
    7c64:	d847      	bhi.n	7cf6 <isr+0xf36>
				*rx_enqueue = 1;
    7c66:	2501      	movs	r5, #1
    7c68:	e0ba      	b.n	7de0 <isr+0x1020>
			     !radio_ccm_mic_is_valid()) ||
    7c6a:	f001 ff27 	bl	9abc <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
    7c6e:	2800      	cmp	r0, #0
    7c70:	d1eb      	bne.n	7c4a <isr+0xe8a>
				_radio.state = STATE_CLOSE;
    7c72:	2303      	movs	r3, #3
    7c74:	f88b 3014 	strb.w	r3, [fp, #20]
				radio_disable();
    7c78:	f001 fcbc 	bl	95f4 <radio_disable>
				LL_ASSERT(!radio_is_ready());
    7c7c:	f001 fcd8 	bl	9630 <radio_is_ready>
    7c80:	4605      	mov	r5, r0
    7c82:	2800      	cmp	r0, #0
    7c84:	f47f a8f0 	bne.w	6e68 <isr+0xa8>
				terminate_ind_rx_enqueue(_radio.conn_curr,
    7c88:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7c8c:	213d      	movs	r1, #61	; 0x3d
    7c8e:	f7fd fd89 	bl	57a4 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
    7c92:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    7c96:	f7fd feb1 	bl	59fc <connection_release>
    7c9a:	e712      	b.n	7ac2 <isr+0xd02>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
    7c9c:	f003 0103 	and.w	r1, r3, #3
    7ca0:	2903      	cmp	r1, #3
    7ca2:	d1e6      	bne.n	7c72 <isr+0xeb2>
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    7ca4:	f994 001d 	ldrsb.w	r0, [r4, #29]
	u8_t opcode = pdu_data->llctrl.opcode;
    7ca8:	7af1      	ldrb	r1, [r6, #11]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
    7caa:	2800      	cmp	r0, #0
    7cac:	f002 0240 	and.w	r2, r2, #64	; 0x40
    7cb0:	db15      	blt.n	7cde <isr+0xf1e>
	       (!conn->role &&
    7cb2:	b922      	cbnz	r2, 7cbe <isr+0xefe>
		((!conn->refresh &&
    7cb4:	2902      	cmp	r1, #2
    7cb6:	d0d0      	beq.n	7c5a <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7cb8:	2911      	cmp	r1, #17
    7cba:	d8da      	bhi.n	7c72 <isr+0xeb2>
    7cbc:	e009      	b.n	7cd2 <isr+0xf12>
		 (conn->refresh &&
    7cbe:	1e8a      	subs	r2, r1, #2
    7cc0:	b2d2      	uxtb	r2, r2
    7cc2:	2a09      	cmp	r2, #9
    7cc4:	d8f8      	bhi.n	7cb8 <isr+0xef8>
    7cc6:	f240 2005 	movw	r0, #517	; 0x205
    7cca:	fa20 f202 	lsr.w	r2, r0, r2
    7cce:	07d0      	lsls	r0, r2, #31
    7cd0:	d4c3      	bmi.n	7c5a <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7cd2:	4a1b      	ldr	r2, [pc, #108]	; (7d40 <isr+0xf80>)
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7cd4:	fa22 f101 	lsr.w	r1, r2, r1
    7cd8:	07c9      	lsls	r1, r1, #31
    7cda:	d5ca      	bpl.n	7c72 <isr+0xeb2>
    7cdc:	e7bd      	b.n	7c5a <isr+0xe9a>
	       (conn->role &&
    7cde:	b92a      	cbnz	r2, 7cec <isr+0xf2c>
		((!conn->refresh &&
    7ce0:	2902      	cmp	r1, #2
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    7ce2:	d0ba      	beq.n	7c5a <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
    7ce4:	2911      	cmp	r1, #17
    7ce6:	d8c4      	bhi.n	7c72 <isr+0xeb2>
    7ce8:	4a16      	ldr	r2, [pc, #88]	; (7d44 <isr+0xf84>)
    7cea:	e7f3      	b.n	7cd4 <isr+0xf14>
		 (conn->refresh &&
    7cec:	1e8a      	subs	r2, r1, #2
    7cee:	2a01      	cmp	r2, #1
    7cf0:	d9b3      	bls.n	7c5a <isr+0xe9a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    7cf2:	290b      	cmp	r1, #11
    7cf4:	e7f5      	b.n	7ce2 <isr+0xf22>
	switch (pdu_data_rx->llctrl.opcode) {
    7cf6:	7af5      	ldrb	r5, [r6, #11]
	pdu_data_rx = (void *)node_rx->pdu_data;
    7cf8:	f106 0a08 	add.w	sl, r6, #8
	switch (pdu_data_rx->llctrl.opcode) {
    7cfc:	2d19      	cmp	r5, #25
    7cfe:	f200 8179 	bhi.w	7ff4 <isr+0x1234>
    7d02:	e8df f015 	tbh	[pc, r5, lsl #1]
    7d06:	0021      	.short	0x0021
    7d08:	00b80085 	.word	0x00b80085
    7d0c:	01770177 	.word	0x01770177
    7d10:	01770177 	.word	0x01770177
    7d14:	00c30171 	.word	0x00c30171
    7d18:	017700e0 	.word	0x017700e0
    7d1c:	01060177 	.word	0x01060177
    7d20:	00d80177 	.word	0x00d80177
    7d24:	01770177 	.word	0x01770177
    7d28:	0177016a 	.word	0x0177016a
    7d2c:	01770177 	.word	0x01770177
    7d30:	01770177 	.word	0x01770177
    7d34:	01770177 	.word	0x01770177
    7d38:	018b      	.short	0x018b
    7d3a:	bf00      	nop
    7d3c:	200010bc 	.word	0x200010bc
    7d40:	00022060 	.word	0x00022060
    7d44:	00022040 	.word	0x00022040
		if (!_radio.conn_curr->role ||
    7d48:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7d4c:	2b00      	cmp	r3, #0
    7d4e:	f280 8151 	bge.w	7ff4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND,
    7d52:	7a71      	ldrb	r1, [r6, #9]
    7d54:	2000      	movs	r0, #0
    7d56:	f7fc fe1f 	bl	4998 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    7d5a:	2800      	cmp	r0, #0
    7d5c:	f000 814a 	beq.w	7ff4 <isr+0x1234>
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    7d60:	f8b6 1015 	ldrh.w	r1, [r6, #21]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
    7d64:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7d66:	1acb      	subs	r3, r1, r3
	if (((pdu_data_rx->llctrl.conn_update_ind.instant -
    7d68:	041a      	lsls	r2, r3, #16
    7d6a:	f100 8382 	bmi.w	8472 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x472>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    7d6e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    7d72:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
    7d76:	429a      	cmp	r2, r3
    7d78:	f47f a876 	bne.w	6e68 <isr+0xa8>
	if (_radio.conn_upd == 0) {
    7d7c:	f8db 2d68 	ldr.w	r2, [fp, #3432]	; 0xd68
    7d80:	b90a      	cbnz	r2, 7d86 <isr+0xfc6>
		_radio.conn_upd = conn;
    7d82:	f8cb 4d68 	str.w	r4, [fp, #3432]	; 0xd68
	conn->llcp.conn_upd.win_size =
    7d86:	7b32      	ldrb	r2, [r6, #12]
    7d88:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
		pdu_data_rx->llctrl.conn_update_ind.win_offset * 1250;
    7d8c:	f8b6 000d 	ldrh.w	r0, [r6, #13]
    7d90:	f240 42e2 	movw	r2, #1250	; 0x4e2
    7d94:	4342      	muls	r2, r0
	conn->llcp.conn_upd.win_offset_us =
    7d96:	66e2      	str	r2, [r4, #108]	; 0x6c
		pdu_data_rx->llctrl.conn_update_ind.interval;
    7d98:	7c30      	ldrb	r0, [r6, #16]
    7d9a:	7bf2      	ldrb	r2, [r6, #15]
    7d9c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.interval =
    7da0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
		pdu_data_rx->llctrl.conn_update_ind.latency;
    7da4:	7cb0      	ldrb	r0, [r6, #18]
    7da6:	7c72      	ldrb	r2, [r6, #17]
    7da8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.latency =
    7dac:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    7db0:	7cf2      	ldrb	r2, [r6, #19]
    7db2:	7d30      	ldrb	r0, [r6, #20]
	conn->llcp.conn_upd.instant =
    7db4:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
		pdu_data_rx->llctrl.conn_update_ind.timeout;
    7db8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp.conn_upd.timeout =
    7dbc:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
    7dc0:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	conn->llcp.conn_upd.is_internal = 0;
    7dc4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    7dc8:	f36f 0282 	bfc	r2, #2, #1
    7dcc:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	conn->llcp_ack--;
    7dd0:	3b01      	subs	r3, #1
	conn->llcp_type = LLCP_CONN_UPD;
    7dd2:	2201      	movs	r2, #1
			_radio.conn_curr->procedure_expire = 0;
    7dd4:	2500      	movs	r5, #0
	conn->llcp_type = LLCP_CONN_UPD;
    7dd6:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    7dda:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			_radio.conn_curr->procedure_expire = 0;
    7dde:	86a5      	strh	r5, [r4, #52]	; 0x34
			_radio.conn_curr->nesn++;
    7de0:	f8db 1cfc 	ldr.w	r1, [fp, #3324]	; 0xcfc
    7de4:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
    7de8:	f083 0302 	eor.w	r3, r3, #2
    7dec:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
			if (ccm_rx_increment) {
    7df0:	f1b9 0f00 	cmp.w	r9, #0
    7df4:	f43f ae9c 	beq.w	7b30 <isr+0xd70>
				_radio.conn_curr->ccm_rx.counter++;
    7df8:	f8d1 20b9 	ldr.w	r2, [r1, #185]	; 0xb9
    7dfc:	f8d1 30bd 	ldr.w	r3, [r1, #189]	; 0xbd
    7e00:	3201      	adds	r2, #1
    7e02:	f143 0300 	adc.w	r3, r3, #0
    7e06:	f8c1 20b9 	str.w	r2, [r1, #185]	; 0xb9
    7e0a:	f8c1 30bd 	str.w	r3, [r1, #189]	; 0xbd
    7e0e:	e68f      	b.n	7b30 <isr+0xd70>
		if (!_radio.conn_curr->role ||
    7e10:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7e14:	2b00      	cmp	r3, #0
    7e16:	f280 80ed 	bge.w	7ff4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CHAN_MAP_IND,
    7e1a:	7a71      	ldrb	r1, [r6, #9]
    7e1c:	2001      	movs	r0, #1
    7e1e:	f7fc fdbb 	bl	4998 <pdu_len_cmp>
		if (!_radio.conn_curr->role ||
    7e22:	2800      	cmp	r0, #0
    7e24:	f000 80e6 	beq.w	7ff4 <isr+0x1234>
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    7e28:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	      conn->event_counter) & 0xffff) > 0x7fff) {
    7e2c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
    7e2e:	1a9b      	subs	r3, r3, r2
	if (((pdu_data_rx->llctrl.chan_map_ind.instant -
    7e30:	041b      	lsls	r3, r3, #16
    7e32:	f100 831e 	bmi.w	8472 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x472>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    7e36:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    7e3a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    7e3e:	429a      	cmp	r2, r3
    7e40:	f47f a812 	bne.w	6e68 <isr+0xa8>
	memcpy(&conn->llcp.chan_map.chm[0],
    7e44:	2205      	movs	r2, #5
    7e46:	f106 010c 	add.w	r1, r6, #12
    7e4a:	f104 0061 	add.w	r0, r4, #97	; 0x61
    7e4e:	f7f8 fbd3 	bl	5f8 <memcpy>
		pdu_data_rx->llctrl.chan_map_ind.instant;
    7e52:	7c73      	ldrb	r3, [r6, #17]
    7e54:	7cb2      	ldrb	r2, [r6, #18]
    7e56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp.chan_map.instant =
    7e5a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	conn->llcp_type = LLCP_CHAN_MAP;
    7e5e:	2302      	movs	r3, #2
    7e60:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	conn->llcp_ack--;
    7e64:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	conn->llcp.chan_map.initiate = 0;
    7e68:	2500      	movs	r5, #0
	conn->llcp_ack--;
    7e6a:	3b01      	subs	r3, #1
	conn->llcp.chan_map.initiate = 0;
    7e6c:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
	conn->llcp_ack--;
    7e70:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    7e74:	e7b4      	b.n	7de0 <isr+0x1020>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
    7e76:	7a71      	ldrb	r1, [r6, #9]
    7e78:	2002      	movs	r0, #2
    7e7a:	f7fc fd8d 	bl	4998 <pdu_len_cmp>
    7e7e:	2800      	cmp	r0, #0
    7e80:	f000 80b8 	beq.w	7ff4 <isr+0x1234>
		_radio.conn_curr->llcp_terminate.reason_peer =
    7e84:	7b33      	ldrb	r3, [r6, #12]
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    7e86:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    7e8a:	e0ab      	b.n	7fe4 <isr+0x1224>
		if (!_radio.conn_curr->role ||
    7e8c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7e90:	2b00      	cmp	r3, #0
    7e92:	f280 80af 	bge.w	7ff4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_REQ,
    7e96:	7a71      	ldrb	r1, [r6, #9]
    7e98:	2008      	movs	r0, #8
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    7e9a:	f7fc fd7d 	bl	4998 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    7e9e:	2800      	cmp	r0, #0
    7ea0:	f000 80a8 	beq.w	7ff4 <isr+0x1234>
		nack = feature_rsp_send(_radio.conn_curr, pdu_data_rx);
    7ea4:	4651      	mov	r1, sl
    7ea6:	4620      	mov	r0, r4
    7ea8:	f7fe fac4 	bl	6434 <feature_rsp_send>
    7eac:	4605      	mov	r5, r0
		if (!nack) {
    7eae:	2800      	cmp	r0, #0
    7eb0:	f47f ae3d 	bne.w	7b2e <isr+0xd6e>
    7eb4:	e794      	b.n	7de0 <isr+0x1020>
		if (_radio.conn_curr->role ||
    7eb6:	f994 301d 	ldrsb.w	r3, [r4, #29]
    7eba:	2b00      	cmp	r3, #0
    7ebc:	f2c0 809a 	blt.w	7ff4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ,
    7ec0:	7a71      	ldrb	r1, [r6, #9]
    7ec2:	200e      	movs	r0, #14
    7ec4:	e7e9      	b.n	7e9a <isr+0x10da>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_FEATURE_RSP,
    7ec6:	7a71      	ldrb	r1, [r6, #9]
    7ec8:	2009      	movs	r0, #9
    7eca:	f7fc fd65 	bl	4998 <pdu_len_cmp>
    7ece:	2800      	cmp	r0, #0
    7ed0:	f000 8090 	beq.w	7ff4 <isr+0x1234>
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7ed4:	7b33      	ldrb	r3, [r6, #12]
	       (features[1] << 8) | (features[2] << 16);
    7ed6:	7b72      	ldrb	r2, [r6, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
    7ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
    7edc:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
    7ee0:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
    7ee4:	f043 0310 	orr.w	r3, r3, #16
    7ee8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
    7eec:	7bb2      	ldrb	r2, [r6, #14]
    7eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
    7ef2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
    7ef6:	f3c2 0210 	ubfx	r2, r2, #0, #17
    7efa:	4013      	ands	r3, r2
    7efc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		_radio.conn_curr->common.fex_valid = 1;
    7f00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    7f04:	f043 0320 	orr.w	r3, r3, #32
    7f08:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		_radio.conn_curr->procedure_expire = 0;
    7f0c:	2300      	movs	r3, #0
    7f0e:	86a3      	strh	r3, [r4, #52]	; 0x34
    7f10:	e6a9      	b.n	7c66 <isr+0xea6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
    7f12:	7a71      	ldrb	r1, [r6, #9]
    7f14:	200c      	movs	r0, #12
    7f16:	f7fc fd3f 	bl	4998 <pdu_len_cmp>
    7f1a:	2800      	cmp	r0, #0
    7f1c:	d06a      	beq.n	7ff4 <isr+0x1234>
	if (!conn->llcp_version.tx) {
    7f1e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7f22:	f013 0501 	ands.w	r5, r3, #1
    7f26:	d152      	bne.n	7fce <isr+0x120e>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7f28:	48b9      	ldr	r0, [pc, #740]	; (8210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x210>)
    7f2a:	f7fa fe7e 	bl	2c2a <mem_acquire>
		if (!node_tx) {
    7f2e:	4601      	mov	r1, r0
    7f30:	2800      	cmp	r0, #0
    7f32:	f43f adfc 	beq.w	7b2e <isr+0xd6e>
		conn->llcp_version.tx = 1;
    7f36:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7f3a:	f043 0301 	orr.w	r3, r3, #1
    7f3e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7f42:	7903      	ldrb	r3, [r0, #4]
    7f44:	f043 0303 	orr.w	r3, r3, #3
    7f48:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len =
    7f4a:	2306      	movs	r3, #6
    7f4c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    7f4e:	230c      	movs	r3, #12
    7f50:	71c3      	strb	r3, [r0, #7]
		v->version_number = RADIO_BLE_VERSION_NUMBER;
    7f52:	2309      	movs	r3, #9
    7f54:	7203      	strb	r3, [r0, #8]
		v->company_id =	RADIO_BLE_COMPANY_ID;
    7f56:	f06f 030e 	mvn.w	r3, #14
    7f5a:	7243      	strb	r3, [r0, #9]
    7f5c:	2305      	movs	r3, #5
    7f5e:	7283      	strb	r3, [r0, #10]
		v->sub_version_number =	RADIO_BLE_SUB_VERSION_NUMBER;
    7f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f64:	72c3      	strb	r3, [r0, #11]
    7f66:	7303      	strb	r3, [r0, #12]
		ctrl_tx_sec_enqueue(conn, node_tx);
    7f68:	4620      	mov	r0, r4
    7f6a:	f7fe fa49 	bl	6400 <ctrl_tx_sec_enqueue>
	conn->empty = 1;
    7f6e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    7f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7f76:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
	pdu_data_tx = (void *)radio_pkt_empty_get();
    7f7a:	f001 fb8d 	bl	9698 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7f7e:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    7f80:	7045      	strb	r5, [r0, #1]
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7f82:	2201      	movs	r2, #1
    7f84:	f362 0301 	bfi	r3, r2, #0, #2
	if (conn->pkt_tx_head) {
    7f88:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    7f8c:	7003      	strb	r3, [r0, #0]
    7f8e:	b2db      	uxtb	r3, r3
	if (conn->pkt_tx_head) {
    7f90:	b1c2      	cbz	r2, 7fc4 <isr+0x1204>
		pdu_data_tx->md = 1;
    7f92:	f043 0310 	orr.w	r3, r3, #16
    7f96:	7003      	strb	r3, [r0, #0]
	conn->llcp_version.version_number = v->version_number;
    7f98:	7b33      	ldrb	r3, [r6, #12]
    7f9a:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
	conn->llcp_version.company_id = v->company_id;
    7f9e:	7bb2      	ldrb	r2, [r6, #14]
    7fa0:	7b73      	ldrb	r3, [r6, #13]
    7fa2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7fa6:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
	conn->llcp_version.sub_version_number = v->sub_version_number;
    7faa:	7bf3      	ldrb	r3, [r6, #15]
    7fac:	7c32      	ldrb	r2, [r6, #16]
    7fae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7fb2:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
	conn->llcp_version.rx = 1;
    7fb6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
    7fba:	f043 0302 	orr.w	r3, r3, #2
    7fbe:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    7fc2:	e70d      	b.n	7de0 <isr+0x1020>
		pdu_data_tx->md = 0;
    7fc4:	f362 1304 	bfi	r3, r2, #4, #1
    7fc8:	7003      	strb	r3, [r0, #0]
	u8_t rx_enqueue = 0;
    7fca:	4615      	mov	r5, r2
    7fcc:	e7e4      	b.n	7f98 <isr+0x11d8>
	} else if (!conn->llcp_version.rx) {
    7fce:	f013 0302 	ands.w	r3, r3, #2
    7fd2:	d107      	bne.n	7fe4 <isr+0x1224>
		conn->procedure_expire = 0;
    7fd4:	86a3      	strh	r3, [r4, #52]	; 0x34
		*rx_enqueue = 1;
    7fd6:	2501      	movs	r5, #1
    7fd8:	e7de      	b.n	7f98 <isr+0x11d8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
    7fda:	7a71      	ldrb	r1, [r6, #9]
    7fdc:	2011      	movs	r0, #17
    7fde:	f7fc fcdb 	bl	4998 <pdu_len_cmp>
    7fe2:	b138      	cbz	r0, 7ff4 <isr+0x1234>
	u8_t rx_enqueue = 0;
    7fe4:	2500      	movs	r5, #0
    7fe6:	e6fb      	b.n	7de0 <isr+0x1020>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
    7fe8:	7a71      	ldrb	r1, [r6, #9]
    7fea:	2007      	movs	r0, #7
    7fec:	f7fc fcd4 	bl	4998 <pdu_len_cmp>
    7ff0:	2800      	cmp	r0, #0
    7ff2:	d18b      	bne.n	7f0c <isr+0x114c>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7ff4:	4886      	ldr	r0, [pc, #536]	; (8210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x210>)
    7ff6:	f7fa fe18 	bl	2c2a <mem_acquire>
	if (!node_tx) {
    7ffa:	4601      	mov	r1, r0
    7ffc:	2800      	cmp	r0, #0
    7ffe:	f43f ad96 	beq.w	7b2e <isr+0xd6e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8002:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.unknown_rsp.type = type;
    8004:	7205      	strb	r5, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8006:	f043 0303 	orr.w	r3, r3, #3
    800a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
    800c:	2302      	movs	r3, #2
    800e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    8010:	2307      	movs	r3, #7
    8012:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
    8014:	4620      	mov	r0, r4
    8016:	f7fe f9c5 	bl	63a4 <ctrl_tx_enqueue>
    801a:	e7e3      	b.n	7fe4 <isr+0x1224>
		if (_radio.conn_curr->role ||
    801c:	f994 301d 	ldrsb.w	r3, [r4, #29]
    8020:	2b00      	cmp	r3, #0
    8022:	dbe7      	blt.n	7ff4 <isr+0x1234>
		    !pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND,
    8024:	7a71      	ldrb	r1, [r6, #9]
    8026:	2019      	movs	r0, #25
    8028:	f7fc fcb6 	bl	4998 <pdu_len_cmp>
		if (_radio.conn_curr->role ||
    802c:	2800      	cmp	r0, #0
    802e:	d0e1      	beq.n	7ff4 <isr+0x1234>
			if (!(p->phys & 0x01)) {
    8030:	7b35      	ldrb	r5, [r6, #12]
    8032:	f015 0501 	ands.w	r5, r5, #1
    8036:	f43f aed3 	beq.w	7de0 <isr+0x1020>
			if (conn->llcp_req != conn->llcp_ack) {
    803a:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
    803e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    8042:	429a      	cmp	r2, r3
    8044:	d1ce      	bne.n	7fe4 <isr+0x1224>
			memcpy(&conn->llcp.chan_map.chm[0],
    8046:	2205      	movs	r2, #5
    8048:	4972      	ldr	r1, [pc, #456]	; (8214 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x214>)
    804a:	f104 0061 	add.w	r0, r4, #97	; 0x61
    804e:	f7f8 fad3 	bl	5f8 <memcpy>
			conn->llcp.chan_map.initiate = 1;
    8052:	2301      	movs	r3, #1
    8054:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			conn->llcp_type = LLCP_CHAN_MAP;
    8058:	2302      	movs	r3, #2
    805a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			conn->llcp_ack--;
    805e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    8062:	3b01      	subs	r3, #1
    8064:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    8068:	e7bc      	b.n	7fe4 <isr+0x1224>
		if (_radio.crc_expire == 0) {
    806a:	f89b 3d01 	ldrb.w	r3, [fp, #3329]	; 0xd01
    806e:	b913      	cbnz	r3, 8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
			_radio.crc_expire = 2;
    8070:	2302      	movs	r3, #2
    8072:	f88b 3d01 	strb.w	r3, [fp, #3329]	; 0xd01
		_radio.crc_expire--;
    8076:	f89b 4d01 	ldrb.w	r4, [fp, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
    807a:	f8db 3cfc 	ldr.w	r3, [fp, #3324]	; 0xcfc
		_radio.crc_expire--;
    807e:	3c01      	subs	r4, #1
    8080:	b2e4      	uxtb	r4, r4
    8082:	f88b 4d01 	strb.w	r4, [fp, #3329]	; 0xd01
		if (!_radio.conn_curr->supervision_expire) {
    8086:	8e1d      	ldrh	r5, [r3, #48]	; 0x30
		crc_close = (_radio.crc_expire == 0);
    8088:	fab4 f484 	clz	r4, r4
    808c:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
    808e:	b91d      	cbnz	r5, 8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>
			_radio.conn_curr->supervision_expire =
    8090:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    8092:	861a      	strh	r2, [r3, #48]	; 0x30
	struct radio_pdu_node_tx *tx_release = NULL;
    8094:	46a8      	mov	r8, r5
    8096:	e551      	b.n	7b3c <isr+0xd7c>
	u8_t rx_enqueue = 0;
    8098:	2500      	movs	r5, #0
    809a:	e7fb      	b.n	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    809c:	2303      	movs	r3, #3
    809e:	e56e      	b.n	7b7e <isr+0xdbe>
			radio_switch_complete_and_disable();
    80a0:	f001 fb18 	bl	96d4 <radio_switch_complete_and_disable>
	pdu_data_tx->sn = _radio.conn_curr->sn;
    80a4:	990d      	ldr	r1, [sp, #52]	; 0x34
    80a6:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    80aa:	780b      	ldrb	r3, [r1, #0]
    80ac:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    80b0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    80b4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    80b8:	f362 0382 	bfi	r3, r2, #2, #1
    80bc:	700b      	strb	r3, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    80be:	f7fd fa8a 	bl	55d6 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
    80c2:	f001 fab5 	bl	9630 <radio_is_ready>
    80c6:	2800      	cmp	r0, #0
    80c8:	f43f acfd 	beq.w	7ac6 <isr+0xd06>
    80cc:	f7fe becc 	b.w	6e68 <isr+0xa8>
		radio_tmr_tifs_set(RADIO_TIFS);
    80d0:	2096      	movs	r0, #150	; 0x96
    80d2:	f001 fb79 	bl	97c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    80d6:	2000      	movs	r0, #0
    80d8:	f001 fae6 	bl	96a8 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    80dc:	f001 fc50 	bl	9980 <radio_tmr_end_capture>
    80e0:	e7e0      	b.n	80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
	switch (_radio.role) {
    80e2:	f89b 2013 	ldrb.w	r2, [fp, #19]
    80e6:	2a04      	cmp	r2, #4
    80e8:	f63e aebe 	bhi.w	6e68 <isr+0xa8>
    80ec:	e8df f012 	tbh	[pc, r2, lsl #1]
    80f0:	000501b6 	.word	0x000501b6
    80f4:	00ca009e 	.word	0x00ca009e
    80f8:	00ca      	.short	0x00ca
	if(radio_ext_adv_enable_flag ==  true){
    80fa:	4a47      	ldr	r2, [pc, #284]	; (8218 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x218>)
    80fc:	7812      	ldrb	r2, [r2, #0]
    80fe:	2a00      	cmp	r2, #0
    8100:	d03b      	beq.n	817a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17a>
		if((chain_flag ==1) &&
    8102:	4a46      	ldr	r2, [pc, #280]	; (821c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x21c>)
    8104:	7812      	ldrb	r2, [r2, #0]
    8106:	2a01      	cmp	r2, #1
    8108:	d10b      	bne.n	8122 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x122>
    810a:	f89b 2c8d 	ldrb.w	r2, [fp, #3213]	; 0xc8d
    810e:	f89b 3c8c 	ldrb.w	r3, [fp, #3212]	; 0xc8c
    8112:	429a      	cmp	r2, r3
    8114:	d00f      	beq.n	8136 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136>
			ext_adv_setup();
    8116:	f7fd f861 	bl	51dc <ext_adv_setup>
			radio_tx_enable();
    811a:	f001 fa65 	bl	95e8 <radio_tx_enable>
    811e:	f7fe beb4 	b.w	6e8a <isr+0xca>
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
    8122:	2b03      	cmp	r3, #3
    8124:	d107      	bne.n	8136 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136>
    8126:	b932      	cbnz	r2, 8136 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136>
			(_radio.advertiser.chan_map_current != 0)) {
    8128:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
		}else if ((_radio.state == STATE_CLOSE) && (chain_flag == 0) &&
    812c:	075e      	lsls	r6, r3, #29
    812e:	d002      	beq.n	8136 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136>
			adv_setup();
    8130:	f7fc ff46 	bl	4fc0 <adv_setup>
    8134:	e7f1      	b.n	811a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11a>
			radio_filter_disable();
    8136:	f001 fb17 	bl	9768 <radio_filter_disable>
	_radio.role = ROLE_NONE;
    813a:	2400      	movs	r4, #0
    813c:	f88b 4013 	strb.w	r4, [fp, #19]
	_radio.state = STATE_NONE;
    8140:	f88b 4014 	strb.w	r4, [fp, #20]
	_radio.ticker_id_event = 0;
    8144:	f88b 4011 	strb.w	r4, [fp, #17]
	radio_tmr_stop();
    8148:	f001 fbbc 	bl	98c4 <radio_tmr_stop>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    814c:	4622      	mov	r2, r4
    814e:	4621      	mov	r1, r4
    8150:	4620      	mov	r0, r4
    8152:	4b33      	ldr	r3, [pc, #204]	; (8220 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x220>)
    8154:	f7fa fe22 	bl	2d9c <mayfly_enqueue>
	LL_ASSERT(!retval);
    8158:	4604      	mov	r4, r0
    815a:	2800      	cmp	r0, #0
    815c:	f47e ae84 	bne.w	6e68 <isr+0xa8>
	clock_control_off(_radio.hf_clock, NULL);
    8160:	f8db 0000 	ldr.w	r0, [fp]
    8164:	6843      	ldr	r3, [r0, #4]
    8166:	4621      	mov	r1, r4
    8168:	685b      	ldr	r3, [r3, #4]
    816a:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    816c:	2201      	movs	r2, #1
    816e:	4611      	mov	r1, r2
    8170:	4620      	mov	r0, r4
    8172:	f7fa fdeb 	bl	2d4c <mayfly_enable>
    8176:	f7fe beac 	b.w	6ed2 <isr+0x112>
		if ((_radio.state == STATE_CLOSE) &&
    817a:	2b03      	cmp	r3, #3
    817c:	d103      	bne.n	8186 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x186>
			(_radio.advertiser.chan_map_current != 0)) {
    817e:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
		if ((_radio.state == STATE_CLOSE) &&
    8182:	075d      	lsls	r5, r3, #29
    8184:	d1d4      	bne.n	8130 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x130>
			radio_filter_disable();
    8186:	f001 faef 	bl	9768 <radio_filter_disable>
			if ((_radio.state == STATE_CLOSE) &&
    818a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    818e:	2b03      	cmp	r3, #3
    8190:	d1d3      	bne.n	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
				(!_radio.advertiser.is_hdcd)) {
    8192:	f89b 4028 	ldrb.w	r4, [fp, #40]	; 0x28
			if ((_radio.state == STATE_CLOSE) &&
    8196:	f014 0440 	ands.w	r4, r4, #64	; 0x40
    819a:	d1ce      	bne.n	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
				entropy_get_entropy_isr(_radio.entropy, &random_delay,
    819c:	2201      	movs	r2, #1
    819e:	a90d      	add	r1, sp, #52	; 0x34
    81a0:	f8db 0004 	ldr.w	r0, [fp, #4]
    81a4:	f7f9 fd98 	bl	1cd8 <entropy_get_entropy_isr>
				random_delay %= 10;
    81a8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
						HAL_TICKER_US_TO_TICKS(random_delay *
    81ac:	481d      	ldr	r0, [pc, #116]	; (8224 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x224>)
				random_delay %= 10;
    81ae:	230a      	movs	r3, #10
    81b0:	fbb1 f2f3 	udiv	r2, r1, r3
    81b4:	fb03 1212 	mls	r2, r3, r2, r1
				random_delay += 1;
    81b8:	3201      	adds	r2, #1
    81ba:	b2d2      	uxtb	r2, r2
    81bc:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
						HAL_TICKER_US_TO_TICKS(random_delay *
    81c0:	b2d2      	uxtb	r2, r2
    81c2:	fba2 0100 	umull	r0, r1, r2, r0
    81c6:	23e8      	movs	r3, #232	; 0xe8
    81c8:	fb03 1102 	mla	r1, r3, r2, r1
    81cc:	a30e      	add	r3, pc, #56	; (adr r3, 8208 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x208>)
    81ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    81d2:	f7f8 f849 	bl	268 <__aeabi_uldivmod>
				ticker_status =
    81d6:	f241 1309 	movw	r3, #4361	; 0x1109
    81da:	9306      	str	r3, [sp, #24]
    81dc:	4b12      	ldr	r3, [pc, #72]	; (8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>)
    81de:	9305      	str	r3, [sp, #20]
    81e0:	9404      	str	r4, [sp, #16]
    81e2:	b283      	uxth	r3, r0
    81e4:	9403      	str	r4, [sp, #12]
    81e6:	9402      	str	r4, [sp, #8]
    81e8:	9401      	str	r4, [sp, #4]
    81ea:	9400      	str	r4, [sp, #0]
    81ec:	2205      	movs	r2, #5
    81ee:	4621      	mov	r1, r4
    81f0:	4620      	mov	r0, r4
    81f2:	f7fb fbcd 	bl	3990 <ticker_update>
				LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    81f6:	f030 0302 	bics.w	r3, r0, #2
    81fa:	d09e      	beq.n	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
    81fc:	f89b 3012 	ldrb.w	r3, [fp, #18]
    8200:	2b05      	cmp	r3, #5
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8202:	d09a      	beq.n	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
    8204:	f7fe be30 	b.w	6e68 <isr+0xa8>
    8208:	1afd498d 	.word	0x1afd498d
    820c:	00000007 	.word	0x00000007
    8210:	200010bc 	.word	0x200010bc
    8214:	20001082 	.word	0x20001082
    8218:	20001121 	.word	0x20001121
    821c:	200010f1 	.word	0x200010f1
    8220:	200060e0 	.word	0x200060e0
    8224:	d4a51000 	.word	0xd4a51000
    8228:	00005bed 	.word	0x00005bed
	if (_radio.state == STATE_CLOSE) {
    822c:	2b03      	cmp	r3, #3
    822e:	d11a      	bne.n	8266 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x266>
		radio_tmr_tifs_set(RADIO_TIFS);
    8230:	2096      	movs	r0, #150	; 0x96
    8232:	f001 fac9 	bl	97c8 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    8236:	2300      	movs	r3, #0
    8238:	4619      	mov	r1, r3
    823a:	461a      	mov	r2, r3
    823c:	4618      	mov	r0, r3
    823e:	f001 fa3f 	bl	96c0 <radio_switch_complete_and_tx>
					[_radio.packet_rx_last]->pdu_data);
    8242:	f8db 3d1c 	ldr.w	r3, [fp, #3356]	; 0xd1c
    8246:	f89b 2d21 	ldrb.w	r2, [fp, #3361]	; 0xd21
		radio_pkt_rx_set(_radio.packet_rx
    824a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    824e:	3008      	adds	r0, #8
    8250:	f001 f9aa 	bl	95a8 <radio_pkt_rx_set>
		radio_rssi_measure();
    8254:	f001 fa4c 	bl	96f0 <radio_rssi_measure>
		_radio.state = STATE_RX;
    8258:	2301      	movs	r3, #1
    825a:	f88b 3014 	strb.w	r3, [fp, #20]
		radio_rx_enable();
    825e:	f001 f9bd 	bl	95dc <radio_rx_enable>
    8262:	f7fe be12 	b.w	6e8a <isr+0xca>
		radio_filter_disable();
    8266:	f001 fa7f 	bl	9768 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    826a:	f89b 3014 	ldrb.w	r3, [fp, #20]
    826e:	2b05      	cmp	r3, #5
    8270:	f47f af63 	bne.w	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8274:	2300      	movs	r3, #0
    8276:	9300      	str	r3, [sp, #0]
    8278:	2204      	movs	r2, #4
    827a:	4619      	mov	r1, r3
    827c:	4618      	mov	r0, r3
    827e:	f7fb fbd5 	bl	3a2c <ticker_stop>
    8282:	e75a      	b.n	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
	if (_radio.conn_curr == 0) {
    8284:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    8288:	2800      	cmp	r0, #0
    828a:	f43f af56 	beq.w	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    828e:	f890 109b 	ldrb.w	r1, [r0, #155]	; 0x9b
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    8292:	b189      	cbz	r1, 82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>
    8294:	f89b 3013 	ldrb.w	r3, [fp, #19]
    8298:	2b03      	cmp	r3, #3
    829a:	d003      	beq.n	82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>
    829c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    82a0:	07dc      	lsls	r4, r3, #31
    82a2:	d509      	bpl.n	82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    82a4:	f7fd fa7e 	bl	57a4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    82a8:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    82ac:	f7fd fba6 	bl	59fc <connection_release>
			_radio.conn_curr = NULL;
    82b0:	2300      	movs	r3, #0
    82b2:	f8cb 3cfc 	str.w	r3, [fp, #3324]	; 0xcfc
    82b6:	e740      	b.n	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
	latency_event = _radio.conn_curr->latency_event;
    82b8:	8d46      	ldrh	r6, [r0, #42]	; 0x2a
	if (_radio.packet_counter &&
    82ba:	f89b 7d00 	ldrb.w	r7, [fp, #3328]	; 0xd00
	elapsed_event = latency_event + 1;
    82be:	1c75      	adds	r5, r6, #1
    82c0:	b2ad      	uxth	r5, r5
	if (_radio.packet_counter &&
    82c2:	2f00      	cmp	r7, #0
    82c4:	d06b      	beq.n	839e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39e>
		if (_radio.role == ROLE_SLAVE) {
    82c6:	f89b 3013 	ldrb.w	r3, [fp, #19]
    82ca:	2b03      	cmp	r3, #3
    82cc:	d15b      	bne.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    82ce:	f001 fb4b 	bl	9968 <radio_tmr_aa_restore>
    82d2:	4680      	mov	r8, r0
						     radio_tmr_ready_get();
    82d4:	f001 fb4e 	bl	9974 <radio_tmr_ready_get>
				_radio.conn_curr->slave.window_widening_event_us;
    82d8:	f8db 7cfc 	ldr.w	r7, [fp, #3324]	; 0xcfc
    82dc:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8484 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x484>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    82e0:	eba8 0800 	sub.w	r8, r8, r0
			window_widening_event_us =
    82e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    82e6:	f100 0a58 	add.w	sl, r0, #88	; 0x58
			if (start_to_address_actual_us <=
    82ea:	45d0      	cmp	r8, sl
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    82ec:	a363      	add	r3, pc, #396	; (adr r3, 847c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47c>)
    82ee:	e9d3 2300 	ldrd	r2, r3, [r3]
			if (start_to_address_actual_us <=
    82f2:	d83b      	bhi.n	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    82f4:	fba0 0109 	umull	r0, r1, r0, r9
    82f8:	f7f7 ffb6 	bl	268 <__aeabi_uldivmod>
    82fc:	b284      	uxth	r4, r0
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    82fe:	ebaa 0008 	sub.w	r0, sl, r8
    8302:	a35e      	add	r3, pc, #376	; (adr r3, 847c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47c>)
    8304:	e9d3 2300 	ldrd	r2, r3, [r3]
    8308:	fba0 0109 	umull	r0, r1, r0, r9
    830c:	f7f7 ffac 	bl	268 <__aeabi_uldivmod>
    8310:	b283      	uxth	r3, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    8312:	2200      	movs	r2, #0
    8314:	64ba      	str	r2, [r7, #72]	; 0x48
			_radio.conn_curr->slave.window_size_event_us = 0;
    8316:	653a      	str	r2, [r7, #80]	; 0x50
			if (_radio.conn_curr->pkt_tx_head) {
    8318:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    831c:	b36a      	cbz	r2, 837a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x37a>
				if (pdu_data_tx->len ||
    831e:	7952      	ldrb	r2, [r2, #5]
    8320:	b912      	cbnz	r2, 8328 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x328>
    8322:	f897 2101 	ldrb.w	r2, [r7, #257]	; 0x101
    8326:	b10a      	cbz	r2, 832c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32c>
					_radio.conn_curr->latency_event = 0;
    8328:	2200      	movs	r2, #0
				_radio.conn_curr->latency_event =
    832a:	857a      	strh	r2, [r7, #42]	; 0x2a
		_radio.conn_curr->connect_expire = 0;
    832c:	f8db 2cfc 	ldr.w	r2, [fp, #3324]	; 0xcfc
    8330:	2100      	movs	r1, #0
    8332:	8591      	strh	r1, [r2, #44]	; 0x2c
	if (_radio.conn_curr->supervision_expire) {
    8334:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    8338:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    833a:	b1aa      	cbz	r2, 8368 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x368>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    833c:	4295      	cmp	r5, r2
    833e:	f080 8085 	bcs.w	844c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44c>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    8342:	1b52      	subs	r2, r2, r5
    8344:	b292      	uxth	r2, r2
			_radio.conn_curr->latency_event = 0;
    8346:	2100      	movs	r1, #0
			if (_radio.conn_curr->supervision_expire <= 6) {
    8348:	2a06      	cmp	r2, #6
			_radio.conn_curr->supervision_expire -= elapsed_event;
    834a:	8602      	strh	r2, [r0, #48]	; 0x30
			_radio.conn_curr->latency_event = 0;
    834c:	8541      	strh	r1, [r0, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    834e:	d97f      	bls.n	8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>
			else if (_radio.role == ROLE_SLAVE) {
    8350:	f89b 2013 	ldrb.w	r2, [fp, #19]
    8354:	2a03      	cmp	r2, #3
    8356:	d107      	bne.n	8368 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x368>
				if (latency_event != 0) {
    8358:	2e00      	cmp	r6, #0
    835a:	d179      	bne.n	8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>
					force = _radio.conn_curr->slave.force & 0x01;
    835c:	6d47      	ldr	r7, [r0, #84]	; 0x54
					_radio.conn_curr->slave.force >>= 1;
    835e:	087a      	lsrs	r2, r7, #1
					if (force) {
    8360:	f017 0701 	ands.w	r7, r7, #1
    8364:	d135      	bne.n	83d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d2>
					_radio.conn_curr->slave.force >>= 1;
    8366:	6542      	str	r2, [r0, #84]	; 0x54
	force = 0;
    8368:	2700      	movs	r7, #0
    836a:	e035      	b.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    836c:	fba8 0109 	umull	r0, r1, r8, r9
    8370:	f7f7 ff7a 	bl	268 <__aeabi_uldivmod>
				ticks_drift_minus = HAL_TICKER_US_TO_TICKS(
    8374:	2302      	movs	r3, #2
				ticks_drift_plus = HAL_TICKER_US_TO_TICKS(
    8376:	b284      	uxth	r4, r0
    8378:	e7cb      	b.n	8312 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x312>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    837a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    837e:	07d2      	lsls	r2, r2, #31
    8380:	d5d4      	bpl.n	832c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32c>
				_radio.conn_curr->latency_event =
    8382:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    8384:	e7d1      	b.n	832a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32a>
		} else if (reason_peer) {
    8386:	b141      	cbz	r1, 839a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39a>
			_radio.conn_curr->master.terminate_ack = 1;
    8388:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    838c:	f043 0301 	orr.w	r3, r3, #1
    8390:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	ticks_drift_minus = 0;
    8394:	2300      	movs	r3, #0
	ticks_drift_plus = 0;
    8396:	461c      	mov	r4, r3
    8398:	e7c8      	b.n	832c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32c>
	ticks_drift_minus = 0;
    839a:	460b      	mov	r3, r1
    839c:	e7fb      	b.n	8396 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x396>
	else if (_radio.conn_curr->connect_expire) {
    839e:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
    83a0:	b184      	cbz	r4, 83c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c4>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    83a2:	42a5      	cmp	r5, r4
    83a4:	d204      	bcs.n	83b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b0>
			_radio.conn_curr->connect_expire -= elapsed_event;
    83a6:	1b64      	subs	r4, r4, r5
    83a8:	8584      	strh	r4, [r0, #44]	; 0x2c
	ticks_drift_minus = 0;
    83aa:	463c      	mov	r4, r7
    83ac:	4623      	mov	r3, r4
    83ae:	e7c1      	b.n	8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    83b0:	213e      	movs	r1, #62	; 0x3e
    83b2:	f7fd f9f7 	bl	57a4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    83b6:	f8db 0cfc 	ldr.w	r0, [fp, #3324]	; 0xcfc
    83ba:	f7fd fb1f 	bl	59fc <connection_release>
			_radio.conn_curr = NULL;
    83be:	f8cb 7cfc 	str.w	r7, [fp, #3324]	; 0xcfc
    83c2:	e6ba      	b.n	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
		if (!_radio.conn_curr->supervision_expire) {
    83c4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    83c6:	2b00      	cmp	r3, #0
    83c8:	d1f0      	bne.n	83ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ac>
			_radio.conn_curr->supervision_expire =
    83ca:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    83cc:	8602      	strh	r2, [r0, #48]	; 0x30
	ticks_drift_plus = 0;
    83ce:	461c      	mov	r4, r3
    83d0:	e7b0      	b.n	8334 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x334>
						_radio.conn_curr->slave.force |=
    83d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    83d6:	6542      	str	r2, [r0, #84]	; 0x54
	if (_radio.conn_curr->procedure_expire != 0) {
    83d8:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    83da:	b11a      	cbz	r2, 83e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e4>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    83dc:	4295      	cmp	r5, r2
    83de:	d239      	bcs.n	8454 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x454>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    83e0:	1b55      	subs	r5, r2, r5
    83e2:	8685      	strh	r5, [r0, #52]	; 0x34
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    83e4:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    83e8:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    83ec:	4291      	cmp	r1, r2
    83ee:	d006      	beq.n	83fe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3fe>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    83f0:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    83f4:	3a01      	subs	r2, #1
    83f6:	2a01      	cmp	r2, #1
		_radio.conn_curr->latency_event = 0;
    83f8:	bf9c      	itt	ls
    83fa:	2200      	movls	r2, #0
    83fc:	8542      	strhls	r2, [r0, #42]	; 0x2a
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    83fe:	b917      	cbnz	r7, 8406 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x406>
    8400:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    8402:	42b2      	cmp	r2, r6
    8404:	d028      	beq.n	8458 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x458>
		lazy = _radio.conn_curr->latency_event + 1;
    8406:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
    8408:	3101      	adds	r1, #1
    840a:	b289      	uxth	r1, r1
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    840c:	b924      	cbnz	r4, 8418 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x418>
    840e:	b91b      	cbnz	r3, 8418 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x418>
    8410:	b911      	cbnz	r1, 8418 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x418>
	    (lazy != 0) || (force != 0)) {
    8412:	2f00      	cmp	r7, #0
    8414:	f43f ae91 	beq.w	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8418:	f890 5020 	ldrb.w	r5, [r0, #32]
		ticker_status =
    841c:	4a16      	ldr	r2, [pc, #88]	; (8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>)
    841e:	9103      	str	r1, [sp, #12]
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8420:	3507      	adds	r5, #7
		ticker_status =
    8422:	2100      	movs	r1, #0
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    8424:	b2ed      	uxtb	r5, r5
		ticker_status =
    8426:	9205      	str	r2, [sp, #20]
    8428:	9300      	str	r3, [sp, #0]
				      (void *)(u32_t)ticker_id);
    842a:	9506      	str	r5, [sp, #24]
		ticker_status =
    842c:	4623      	mov	r3, r4
    842e:	9704      	str	r7, [sp, #16]
    8430:	9102      	str	r1, [sp, #8]
    8432:	9101      	str	r1, [sp, #4]
    8434:	462a      	mov	r2, r5
    8436:	4608      	mov	r0, r1
    8438:	f7fb faaa 	bl	3990 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    843c:	f030 0302 	bics.w	r3, r0, #2
    8440:	f43f ae7b 	beq.w	813a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a>
    8444:	f89b 3012 	ldrb.w	r3, [fp, #18]
    8448:	429d      	cmp	r5, r3
    844a:	e6da      	b.n	8202 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x202>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    844c:	2108      	movs	r1, #8
    844e:	e729      	b.n	82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>
				force = 1;
    8450:	2701      	movs	r7, #1
    8452:	e7c1      	b.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    8454:	2122      	movs	r1, #34	; 0x22
    8456:	e725      	b.n	82a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a4>
	lazy = 0;
    8458:	4639      	mov	r1, r7
    845a:	e7d7      	b.n	840c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40c>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    845c:	3b04      	subs	r3, #4
    845e:	2b01      	cmp	r3, #1
    8460:	f63e ad02 	bhi.w	6e68 <isr+0xa8>
		_radio.state = STATE_NONE;
    8464:	2300      	movs	r3, #0
    8466:	f88b 3014 	strb.w	r3, [fp, #20]
    846a:	f7fe bd32 	b.w	6ed2 <isr+0x112>
    846e:	f7fd fbfe 	bl	5c6e <isr.part.46>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    8472:	2328      	movs	r3, #40	; 0x28
    8474:	e507      	b.n	7e86 <isr+0x10c6>
    8476:	bf00      	nop
    8478:	00005bd5 	.word	0x00005bd5
    847c:	1afd498d 	.word	0x1afd498d
    8480:	00000007 	.word	0x00000007
    8484:	3b9aca00 	.word	0x3b9aca00

00008488 <mayfly_xtal_stop_calc>:
{
    8488:	b5f0      	push	{r4, r5, r6, r7, lr}
    848a:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    848c:	2302      	movs	r3, #2
    848e:	9309      	str	r3, [sp, #36]	; 0x24
	ticker_id_next = 0xff;
    8490:	22ff      	movs	r2, #255	; 0xff
	struct connection *conn_curr = NULL;
    8492:	2300      	movs	r3, #0
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    8494:	4e74      	ldr	r6, [pc, #464]	; (8668 <mayfly_xtal_stop_calc+0x1e0>)
				    _radio.connection_count));
    8496:	4d75      	ldr	r5, [pc, #468]	; (866c <mayfly_xtal_stop_calc+0x1e4>)
	struct connection *conn_curr = NULL;
    8498:	930a      	str	r3, [sp, #40]	; 0x28
{
    849a:	4604      	mov	r4, r0
	struct connection *conn_next = NULL;
    849c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id_next = 0xff;
    849e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	ticks_to_expire = 0;
    84a2:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    84a4:	ab09      	add	r3, sp, #36	; 0x24
    84a6:	9302      	str	r3, [sp, #8]
    84a8:	ab0c      	add	r3, sp, #48	; 0x30
    84aa:	9300      	str	r3, [sp, #0]
    84ac:	9601      	str	r6, [sp, #4]
    84ae:	ab0d      	add	r3, sp, #52	; 0x34
    84b0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    84b4:	2101      	movs	r1, #1
    84b6:	2000      	movs	r0, #0
    84b8:	f7fb faf4 	bl	3aa4 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    84bc:	2802      	cmp	r0, #2
    84be:	d00b      	beq.n	84d8 <mayfly_xtal_stop_calc+0x50>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
    84c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    84c2:	b16b      	cbz	r3, 84e0 <mayfly_xtal_stop_calc+0x58>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    84c4:	4040      	eors	r0, r0
    84c6:	f380 8811 	msr	BASEPRI, r0
    84ca:	f04f 0004 	mov.w	r0, #4
    84ce:	df02      	svc	2
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    84d0:	2101      	movs	r1, #1
    84d2:	2000      	movs	r0, #0
    84d4:	f7fb fb64 	bl	3ba0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    84d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    84da:	2b02      	cmp	r3, #2
    84dc:	d0f8      	beq.n	84d0 <mayfly_xtal_stop_calc+0x48>
    84de:	e7ef      	b.n	84c0 <mayfly_xtal_stop_calc+0x38>
	} while (ticker_id_next != TICKER_NULL &&
    84e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				    _radio.connection_count));
    84e4:	2bff      	cmp	r3, #255	; 0xff
    84e6:	d004      	beq.n	84f2 <mayfly_xtal_stop_calc+0x6a>
    84e8:	f895 2cf8 	ldrb.w	r2, [r5, #3320]	; 0xcf8
		 ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    84ec:	3207      	adds	r2, #7
	} while (ticker_id_next != TICKER_NULL &&
    84ee:	4293      	cmp	r3, r2
    84f0:	dad8      	bge.n	84a4 <mayfly_xtal_stop_calc+0x1c>
	if ((ticker_id_next == TICKER_NULL) ||
    84f2:	1f5a      	subs	r2, r3, #5
    84f4:	b2d2      	uxtb	r2, r2
    84f6:	2af9      	cmp	r2, #249	; 0xf9
    84f8:	4f5d      	ldr	r7, [pc, #372]	; (8670 <mayfly_xtal_stop_calc+0x1e8>)
    84fa:	d805      	bhi.n	8508 <mayfly_xtal_stop_calc+0x80>
				_radio.connection_count))) {
    84fc:	4a5b      	ldr	r2, [pc, #364]	; (866c <mayfly_xtal_stop_calc+0x1e4>)
    84fe:	f892 2cf8 	ldrb.w	r2, [r2, #3320]	; 0xcf8
	    (ticker_id_next >= (RADIO_TICKER_ID_FIRST_CONNECTION +
    8502:	3207      	adds	r2, #7
	    (ticker_id_next < RADIO_TICKER_ID_ADV) ||
    8504:	4293      	cmp	r3, r2
    8506:	db06      	blt.n	8516 <mayfly_xtal_stop_calc+0x8e>
		if (s_xtal_retained) {
    8508:	783b      	ldrb	r3, [r7, #0]
    850a:	b113      	cbz	r3, 8512 <mayfly_xtal_stop_calc+0x8a>
    850c:	2001      	movs	r0, #1
    850e:	f7fd f825 	bl	555c <mayfly_xtal_retain.part.16>
}
    8512:	b00f      	add	sp, #60	; 0x3c
    8514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	hdr_curr = hdr_conn_get(ticker_id_curr, &conn_curr);
    8516:	a90a      	add	r1, sp, #40	; 0x28
    8518:	b2e0      	uxtb	r0, r4
    851a:	f7fd f801 	bl	5520 <hdr_conn_get>
	LL_ASSERT(hdr_curr);
    851e:	2800      	cmp	r0, #0
    8520:	d0d0      	beq.n	84c4 <mayfly_xtal_stop_calc+0x3c>
	if (hdr_curr->ticks_xtal_to_start & XON_BITMASK) {
    8522:	6803      	ldr	r3, [r0, #0]
    8524:	6844      	ldr	r4, [r0, #4]
    8526:	2b00      	cmp	r3, #0
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    8528:	bfb8      	it	lt
    852a:	6883      	ldrlt	r3, [r0, #8]
		ticks_slot_abs = (hdr_curr->ticks_active_to_start >
    852c:	429c      	cmp	r4, r3
    852e:	bf38      	it	cc
    8530:	461c      	movcc	r4, r3
	ticks_slot_abs += hdr_curr->ticks_slot;
    8532:	68c3      	ldr	r3, [r0, #12]
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    8534:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    8538:	a90b      	add	r1, sp, #44	; 0x2c
	ticks_slot_abs += hdr_curr->ticks_slot;
    853a:	441c      	add	r4, r3
	hdr_next = hdr_conn_get(ticker_id_next, &conn_next);
    853c:	f7fc fff0 	bl	5520 <hdr_conn_get>
	LL_ASSERT(hdr_next);
    8540:	4605      	mov	r5, r0
    8542:	2800      	cmp	r0, #0
    8544:	d0be      	beq.n	84c4 <mayfly_xtal_stop_calc+0x3c>
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    8546:	6886      	ldr	r6, [r0, #8]
    8548:	6843      	ldr	r3, [r0, #4]
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    854a:	6802      	ldr	r2, [r0, #0]
	ticks_prepare_to_start_next = (hdr_next->ticks_active_to_start >
    854c:	429e      	cmp	r6, r3
    854e:	bf38      	it	cc
    8550:	461e      	movcc	r6, r3
	if (hdr_next->ticks_xtal_to_start & XON_BITMASK) {
    8552:	2a00      	cmp	r2, #0
    8554:	da05      	bge.n	8562 <mayfly_xtal_stop_calc+0xda>
		ticks_to_expire -=
    8556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			(hdr_next->ticks_xtal_to_start &
    8558:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		ticks_to_expire -=
    855c:	4433      	add	r3, r6
    855e:	1a9b      	subs	r3, r3, r2
    8560:	930c      	str	r3, [sp, #48]	; 0x30
	if (ticks_to_expire >
    8562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	    (ticks_slot_abs +
    8564:	f104 0331 	add.w	r3, r4, #49	; 0x31
	if (ticks_to_expire >
    8568:	4293      	cmp	r3, r2
    856a:	d20b      	bcs.n	8584 <mayfly_xtal_stop_calc+0xfc>
		if (s_xtal_retained) {
    856c:	783b      	ldrb	r3, [r7, #0]
    856e:	b113      	cbz	r3, 8576 <mayfly_xtal_stop_calc+0xee>
    8570:	2001      	movs	r0, #1
    8572:	f7fc fff3 	bl	555c <mayfly_xtal_retain.part.16>
		prepare_normal_set(hdr_next, RADIO_TICKER_USER_ID_JOB,
    8576:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    857a:	2101      	movs	r1, #1
    857c:	4628      	mov	r0, r5
    857e:	f7fd f881 	bl	5684 <prepare_normal_set>
    8582:	e7c6      	b.n	8512 <mayfly_xtal_stop_calc+0x8a>
		if (!s_xtal_retained) {
    8584:	783a      	ldrb	r2, [r7, #0]
    8586:	b93a      	cbnz	r2, 8598 <mayfly_xtal_stop_calc+0x110>
			s_xtal_retained = 1;
    8588:	2001      	movs	r0, #1
			retval = mayfly_enqueue(caller_id,
    858a:	4b3a      	ldr	r3, [pc, #232]	; (8674 <mayfly_xtal_stop_calc+0x1ec>)
			s_xtal_retained = 1;
    858c:	7038      	strb	r0, [r7, #0]
			retval = mayfly_enqueue(caller_id,
    858e:	4611      	mov	r1, r2
    8590:	f7fa fc04 	bl	2d9c <mayfly_enqueue>
			LL_ASSERT(!retval);
    8594:	2800      	cmp	r0, #0
    8596:	d195      	bne.n	84c4 <mayfly_xtal_stop_calc+0x3c>
		if (!(hdr_next->ticks_xtal_to_start & XON_BITMASK) &&
    8598:	682b      	ldr	r3, [r5, #0]
    859a:	2b00      	cmp	r3, #0
    859c:	db15      	blt.n	85ca <mayfly_xtal_stop_calc+0x142>
    859e:	429e      	cmp	r6, r3
    85a0:	d213      	bcs.n	85ca <mayfly_xtal_stop_calc+0x142>
			u32_t ticks_drift_plus = hdr_next->ticks_xtal_to_start -
    85a2:	1b9b      	subs	r3, r3, r6
			ticker_status =
    85a4:	2000      	movs	r0, #0
				ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    85a6:	b29b      	uxth	r3, r3
			ticker_status =
    85a8:	4933      	ldr	r1, [pc, #204]	; (8678 <mayfly_xtal_stop_calc+0x1f0>)
    85aa:	9105      	str	r1, [sp, #20]
    85ac:	9302      	str	r3, [sp, #8]
    85ae:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    85b2:	9506      	str	r5, [sp, #24]
    85b4:	9004      	str	r0, [sp, #16]
    85b6:	9003      	str	r0, [sp, #12]
    85b8:	9001      	str	r0, [sp, #4]
    85ba:	9000      	str	r0, [sp, #0]
    85bc:	2101      	movs	r1, #1
    85be:	f7fb f9e7 	bl	3990 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    85c2:	f030 0302 	bics.w	r3, r0, #2
    85c6:	f47f af7d 	bne.w	84c4 <mayfly_xtal_stop_calc+0x3c>
		if (!conn_curr || !conn_next) {
    85ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    85cc:	2e00      	cmp	r6, #0
    85ce:	d0a0      	beq.n	8512 <mayfly_xtal_stop_calc+0x8a>
    85d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    85d2:	2d00      	cmp	r5, #0
    85d4:	d09d      	beq.n	8512 <mayfly_xtal_stop_calc+0x8a>
		if (conn_curr->conn_interval == conn_next->conn_interval) {
    85d6:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
    85d8:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    85da:	429a      	cmp	r2, r3
    85dc:	d199      	bne.n	8512 <mayfly_xtal_stop_calc+0x8a>
			u32_t ticks_conn_interval = HAL_TICKER_US_TO_TICKS(
    85de:	4827      	ldr	r0, [pc, #156]	; (867c <mayfly_xtal_stop_calc+0x1f4>)
    85e0:	b292      	uxth	r2, r2
    85e2:	fba2 0100 	umull	r0, r1, r2, r0
    85e6:	f240 1323 	movw	r3, #291	; 0x123
    85ea:	fb03 1102 	mla	r1, r3, r2, r1
    85ee:	a31c      	add	r3, pc, #112	; (adr r3, 8660 <mayfly_xtal_stop_calc+0x1d8>)
    85f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    85f4:	f7f7 fe38 	bl	268 <__aeabi_uldivmod>
    85f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    85fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			while (ticks_to_expire > ticks_conn_interval) {
    85fe:	2200      	movs	r2, #0
    8600:	4298      	cmp	r0, r3
    8602:	d318      	bcc.n	8636 <mayfly_xtal_stop_calc+0x1ae>
    8604:	b102      	cbz	r2, 8608 <mayfly_xtal_stop_calc+0x180>
    8606:	930c      	str	r3, [sp, #48]	; 0x30
			if (conn_curr->role && !conn_next->role &&
    8608:	f996 201d 	ldrsb.w	r2, [r6, #29]
    860c:	2a00      	cmp	r2, #0
    860e:	f995 201d 	ldrsb.w	r2, [r5, #29]
    8612:	da13      	bge.n	863c <mayfly_xtal_stop_calc+0x1b4>
    8614:	2a00      	cmp	r2, #0
    8616:	f6ff af7c 	blt.w	8512 <mayfly_xtal_stop_calc+0x8a>
			     (ticks_slot_abs +
    861a:	3414      	adds	r4, #20
			if (conn_curr->role && !conn_next->role &&
    861c:	429c      	cmp	r4, r3
    861e:	f67f af78 	bls.w	8512 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_curr);
    8622:	4630      	mov	r0, r6
    8624:	f7fc fa1c 	bl	4a60 <conn_update_req>
				if (status == 2) {
    8628:	2802      	cmp	r0, #2
    862a:	f47f af72 	bne.w	8512 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_next);
    862e:	980b      	ldr	r0, [sp, #44]	; 0x2c
					conn_update_req(conn_curr);
    8630:	f7fc fa16 	bl	4a60 <conn_update_req>
    8634:	e76d      	b.n	8512 <mayfly_xtal_stop_calc+0x8a>
				ticks_to_expire -= ticks_conn_interval;
    8636:	1a1b      	subs	r3, r3, r0
    8638:	2201      	movs	r2, #1
    863a:	e7e1      	b.n	8600 <mayfly_xtal_stop_calc+0x178>
			} else if (!conn_curr->role && conn_next->role &&
    863c:	2a00      	cmp	r2, #0
    863e:	f6bf af68 	bge.w	8512 <mayfly_xtal_stop_calc+0x8a>
				    (ticks_slot_abs +
    8642:	3414      	adds	r4, #20
			} else if (!conn_curr->role && conn_next->role &&
    8644:	429c      	cmp	r4, r3
    8646:	f67f af64 	bls.w	8512 <mayfly_xtal_stop_calc+0x8a>
				status = conn_update_req(conn_next);
    864a:	4628      	mov	r0, r5
    864c:	f7fc fa08 	bl	4a60 <conn_update_req>
				if (status == 2) {
    8650:	2802      	cmp	r0, #2
    8652:	f47f af5e 	bne.w	8512 <mayfly_xtal_stop_calc+0x8a>
					conn_update_req(conn_curr);
    8656:	980a      	ldr	r0, [sp, #40]	; 0x28
    8658:	e7ea      	b.n	8630 <mayfly_xtal_stop_calc+0x1a8>
    865a:	bf00      	nop
    865c:	f3af 8000 	nop.w
    8660:	1afd498d 	.word	0x1afd498d
    8664:	00000007 	.word	0x00000007
    8668:	000049d5 	.word	0x000049d5
    866c:	20000380 	.word	0x20000380
    8670:	20001174 	.word	0x20001174
    8674:	20006150 	.word	0x20006150
    8678:	000049d9 	.word	0x000049d9
    867c:	09ce5400 	.word	0x09ce5400

00008680 <event_master>:
{
    8680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8682:	461c      	mov	r4, r3
	LL_ASSERT(_radio.role == ROLE_NONE);
    8684:	4b49      	ldr	r3, [pc, #292]	; (87ac <event_master+0x12c>)
    8686:	7cda      	ldrb	r2, [r3, #19]
{
    8688:	4607      	mov	r7, r0
	LL_ASSERT(_radio.role == ROLE_NONE);
    868a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    868e:	461d      	mov	r5, r3
    8690:	b12a      	cbz	r2, 869e <event_master+0x1e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8692:	4040      	eors	r0, r0
    8694:	f380 8811 	msr	BASEPRI, r0
    8698:	f04f 0004 	mov.w	r0, #4
    869c:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
    869e:	7c1b      	ldrb	r3, [r3, #16]
    86a0:	8c22      	ldrh	r2, [r4, #32]
    86a2:	b2db      	uxtb	r3, r3
    86a4:	3207      	adds	r2, #7
    86a6:	4293      	cmp	r3, r2
    86a8:	d1f3      	bne.n	8692 <event_master+0x12>
	_radio.role = ROLE_MASTER;
    86aa:	2204      	movs	r2, #4
	_radio.packet_counter = 0;
    86ac:	f885 6d00 	strb.w	r6, [r5, #3328]	; 0xd00
	_radio.crc_expire = 0;
    86b0:	f885 6d01 	strb.w	r6, [r5, #3329]	; 0xd01
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
    86b4:	b2db      	uxtb	r3, r3
	_radio.role = ROLE_MASTER;
    86b6:	74ea      	strb	r2, [r5, #19]
	_radio.ticker_id_prepare = 0;
    86b8:	742e      	strb	r6, [r5, #16]
	_radio.ticker_id_event =
    86ba:	746b      	strb	r3, [r5, #17]
	conn->latency_event = conn->latency_prepare;
    86bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	_radio.conn_curr = conn;
    86be:	f8c5 4cfc 	str.w	r4, [r5, #3324]	; 0xcfc
	_radio.state = STATE_TX;
    86c2:	2002      	movs	r0, #2
	conn->latency_event = conn->latency_prepare;
    86c4:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    86c6:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.state = STATE_TX;
    86c8:	7528      	strb	r0, [r5, #20]
	_radio.ticks_anchor = ticks_at_expire;
    86ca:	60af      	str	r7, [r5, #8]
	packet_tx_enqueue(2);
    86cc:	f7fd f948 	bl	5960 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    86d0:	a901      	add	r1, sp, #4
    86d2:	4620      	mov	r0, r4
    86d4:	f7fe fb0e 	bl	6cf4 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
    86d8:	9901      	ldr	r1, [sp, #4]
    86da:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
    86de:	780b      	ldrb	r3, [r1, #0]
    86e0:	f362 03c3 	bfi	r3, r2, #3, #1
	pdu_data_tx->nesn = conn->nesn;
    86e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    86e8:	f362 0382 	bfi	r3, r2, #2, #1
    86ec:	700b      	strb	r3, [r1, #0]
	connection_configure(conn);
    86ee:	4620      	mov	r0, r4
    86f0:	f7fe fa26 	bl	6b40 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
    86f4:	2096      	movs	r0, #150	; 0x96
    86f6:	f001 f867 	bl	97c8 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(0);
    86fa:	4630      	mov	r0, r6
    86fc:	f000 ffd4 	bl	96a8 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
    8700:	9901      	ldr	r1, [sp, #4]
    8702:	4620      	mov	r0, r4
    8704:	f7fc ff67 	bl	55d6 <tx_packet_set>
	if (conn->data_chan_sel) {
    8708:	7f63      	ldrb	r3, [r4, #29]
    870a:	f013 0f40 	tst.w	r3, #64	; 0x40
    870e:	f104 0217 	add.w	r2, r4, #23
    8712:	d021      	beq.n	8758 <event_master+0xd8>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
    8714:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    8716:	8be1      	ldrh	r1, [r4, #30]
    8718:	3801      	subs	r0, #1
    871a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    871e:	b280      	uxth	r0, r0
    8720:	f7fd fcd4 	bl	60cc <chan_sel_2>
	chan_set(data_chan_use);
    8724:	f7fc fb2a 	bl	4d7c <chan_set>
		remainder_us = radio_tmr_start(1,
    8728:	68ea      	ldr	r2, [r5, #12]
    872a:	f107 0109 	add.w	r1, r7, #9
    872e:	2001      	movs	r0, #1
    8730:	f001 f856 	bl	97e0 <radio_tmr_start>
		radio_tmr_end_capture();
    8734:	f001 f924 	bl	9980 <radio_tmr_end_capture>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    8738:	f894 1020 	ldrb.w	r1, [r4, #32]
    873c:	3107      	adds	r1, #7
    873e:	463a      	mov	r2, r7
    8740:	b2c9      	uxtb	r1, r1
    8742:	4620      	mov	r0, r4
    8744:	f7fd fd06 	bl	6154 <preempt_calc>
	if (0 !=
    8748:	4603      	mov	r3, r0
    874a:	b328      	cbz	r0, 8798 <event_master+0x118>
		_radio.state = STATE_STOP;
    874c:	2304      	movs	r3, #4
    874e:	752b      	strb	r3, [r5, #20]
		radio_disable();
    8750:	f000 ff50 	bl	95f4 <radio_disable>
}
    8754:	b003      	add	sp, #12
    8756:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
    8758:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    875a:	7fa6      	ldrb	r6, [r4, #30]
    875c:	fb01 6606 	mla	r6, r1, r6, r6
    8760:	7fe1      	ldrb	r1, [r4, #31]
    8762:	2025      	movs	r0, #37	; 0x25
    8764:	440e      	add	r6, r1
    8766:	fb96 f1f0 	sdiv	r1, r6, r0
    876a:	fb00 6611 	mls	r6, r0, r1, r6
    876e:	b2f0      	uxtb	r0, r6
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8770:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
    8772:	77e0      	strb	r0, [r4, #31]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8774:	5c51      	ldrb	r1, [r2, r1]
    8776:	f006 0607 	and.w	r6, r6, #7
    877a:	fa41 f606 	asr.w	r6, r1, r6
    877e:	07f1      	lsls	r1, r6, #31
					   conn->data_chan_count);
    8780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
    8784:	d4ce      	bmi.n	8724 <event_master+0xa4>
		chan_index = chan_next % chan_count;
    8786:	fbb0 f1f3 	udiv	r1, r0, r3
    878a:	fb03 0111 	mls	r1, r3, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
    878e:	b2c9      	uxtb	r1, r1
    8790:	4610      	mov	r0, r2
    8792:	f7fc f92d 	bl	49f0 <chan_sel_remap>
    8796:	e7c5      	b.n	8724 <event_master+0xa4>
		ticker_status =
    8798:	4a05      	ldr	r2, [pc, #20]	; (87b0 <event_master+0x130>)
    879a:	4601      	mov	r1, r0
    879c:	f7fb f9c4 	bl	3b28 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    87a0:	f030 0302 	bics.w	r3, r0, #2
    87a4:	f47f af75 	bne.w	8692 <event_master+0x12>
    87a8:	e7d4      	b.n	8754 <event_master+0xd4>
    87aa:	bf00      	nop
    87ac:	20000380 	.word	0x20000380
    87b0:	00005509 	.word	0x00005509

000087b4 <radio_init>:
{
    87b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_radio.hf_clock = hf_clock;
    87b8:	4e3e      	ldr	r6, [pc, #248]	; (88b4 <radio_init+0x100>)
{
    87ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    87bc:	f89d c01c 	ldrb.w	ip, [sp, #28]
    87c0:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
    87c4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    87c8:	f89d e018 	ldrb.w	lr, [sp, #24]
	_radio.hf_clock = hf_clock;
    87cc:	6030      	str	r0, [r6, #0]
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    87ce:	f44f 7082 	mov.w	r0, #260	; 0x104
    87d2:	fb00 4003 	mla	r0, r0, r3, r4
	_radio.sca = sca;
    87d6:	f886 1d08 	strb.w	r1, [r6, #3336]	; 0xd08
	_radio.conn_pool = mem_radio;
    87da:	f8c6 4cf0 	str.w	r4, [r6, #3312]	; 0xcf0
	mem_radio_end = mem_radio + mem_size;
    87de:	1961      	adds	r1, r4, r5
	tx_count_max += 1;
    87e0:	f10c 0401 	add.w	r4, ip, #1
    87e4:	b2e7      	uxtb	r7, r4
	_radio.entropy = entropy;
    87e6:	6072      	str	r2, [r6, #4]
	    (offsetof(struct pdu_data, lldata) +
    87e8:	f108 0403 	add.w	r4, r8, #3
	rx_count_max += 3;
    87ec:	f10e 0203 	add.w	r2, lr, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
    87f0:	f5b4 7f81 	cmp.w	r4, #258	; 0x102
	rx_count_max += 3;
    87f4:	b2d2      	uxtb	r2, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    87f6:	bf98      	it	ls
    87f8:	eb02 1442 	addls.w	r4, r2, r2, lsl #5
	_radio.packet_data_octets_max = packet_data_octets_max;
    87fc:	f8a6 8d14 	strh.w	r8, [r6, #3348]	; 0xd14
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
    8800:	bf88      	it	hi
    8802:	f108 080e 	addhi.w	r8, r8, #14
	_radio.link_rx_data_quota = rx_count_max;
    8806:	f886 2d34 	strb.w	r2, [r6, #3380]	; 0xd34
		_radio.packet_rx_data_pool_size =
    880a:	bf8c      	ite	hi
    880c:	f028 0803 	bichi.w	r8, r8, #3
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    8810:	eb02 0244 	addls.w	r2, r2, r4, lsl #1
	_radio.packet_rx_count = (rx_count_max + 1);
    8814:	f10e 0e04 	add.w	lr, lr, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    8818:	f10c 0c02 	add.w	ip, ip, #2
	_radio.packet_rx_count = (rx_count_max + 1);
    881c:	fa5f fe8e 	uxtb.w	lr, lr
		_radio.packet_rx_data_pool_size =
    8820:	bf8c      	ite	hi
    8822:	fb18 f202 	smulbbhi	r2, r8, r2
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
    8826:	0092      	lslls	r2, r2, #2
	_radio.packet_tx_count = (tx_count_max + 1);
    8828:	fa5f fc8c 	uxtb.w	ip, ip
		_radio.packet_rx_data_pool_size =
    882c:	f8a6 2d16 	strh.w	r2, [r6, #3350]	; 0xd16
	_radio.packet_tx_count = (tx_count_max + 1);
    8830:	f886 cd54 	strb.w	ip, [r6, #3412]	; 0xd54
	_radio.packet_rx = (void *)mem_radio;
    8834:	f8c6 0d1c 	str.w	r0, [r6, #3356]	; 0xd1c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8838:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
	mem_radio +=
    883c:	eb00 008e 	add.w	r0, r0, lr, lsl #2
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8840:	f8b6 4d16 	ldrh.w	r4, [r6, #3350]	; 0xd16
	_radio.pkt_tx = (void *)mem_radio;
    8844:	f8c6 0d4c 	str.w	r0, [r6, #3404]	; 0xd4c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8848:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    884a:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.pkt_release = (void *)mem_radio;
    884e:	f8c6 0d50 	str.w	r0, [r6, #3408]	; 0xd50
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    8852:	4460      	add	r0, ip
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    8854:	f8a6 2d18 	strh.w	r2, [r6, #3352]	; 0xd18
	_radio.pkt_rx_data_pool = mem_radio;
    8858:	f8c6 0d0c 	str.w	r0, [r6, #3340]	; 0xd0c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    885c:	fbb4 f2f2 	udiv	r2, r4, r2
	mem_radio += _radio.packet_rx_data_pool_size;
    8860:	4420      	add	r0, r4
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    8862:	eb0e 0403 	add.w	r4, lr, r3
	_radio.link_rx_pool = mem_radio;
    8866:	f8c6 0d24 	str.w	r0, [r6, #3364]	; 0xd24
	mem_radio += (sizeof(memq_link_t) * (_radio.packet_rx_count +
    886a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    886e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
	_radio.pkt_tx_ctrl_pool = mem_radio;
    8872:	f8c6 0d38 	str.w	r0, [r6, #3384]	; 0xd38
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    8876:	340a      	adds	r4, #10
    8878:	f024 0403 	bic.w	r4, r4, #3
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    887c:	3048      	adds	r0, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
    887e:	b2a4      	uxth	r4, r4
	_radio.packet_tx_data_size =
    8880:	f8a6 4d48 	strh.w	r4, [r6, #3400]	; 0xd48
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
    8884:	fb07 0404 	mla	r4, r7, r4, r0
	if (retcode) {
    8888:	1a64      	subs	r4, r4, r1
	_radio.connection_count = connection_count_max;
    888a:	f886 3cf8 	strb.w	r3, [r6, #3320]	; 0xcf8
	_radio.packet_rx_count = (rx_count_max + 1);
    888e:	f886 ed20 	strb.w	lr, [r6, #3360]	; 0xd20
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    8892:	f886 2d1a 	strb.w	r2, [r6, #3354]	; 0xd1a
	_radio.pkt_tx_data_pool = mem_radio;
    8896:	f8c6 0d40 	str.w	r0, [r6, #3392]	; 0xd40
	if (retcode) {
    889a:	d003      	beq.n	88a4 <radio_init+0xf0>
		return (retcode + mem_size);
    889c:	442c      	add	r4, r5
}
    889e:	4620      	mov	r0, r4
    88a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_radio.fc_ena = 1;
    88a4:	2301      	movs	r3, #1
    88a6:	f886 3d62 	strb.w	r3, [r6, #3426]	; 0xd62
	common_init();
    88aa:	f7fd fb95 	bl	5fd8 <common_init>
	radio_setup();
    88ae:	f000 fdcb 	bl	9448 <radio_setup>
	return retcode;
    88b2:	e7f4      	b.n	889e <radio_init+0xea>
    88b4:	20000380 	.word	0x20000380

000088b8 <ll_reset>:
{
    88b8:	b538      	push	{r3, r4, r5, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    88ba:	2103      	movs	r1, #3
    88bc:	2005      	movs	r0, #5
    88be:	f7fc f963 	bl	4b88 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
    88c2:	2104      	movs	r1, #4
    88c4:	2006      	movs	r0, #6
    88c6:	f7fc f95f 	bl	4b88 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    88ca:	4c22      	ldr	r4, [pc, #136]	; (8954 <ll_reset+0x9c>)
    88cc:	2500      	movs	r5, #0
    88ce:	f894 2cf8 	ldrb.w	r2, [r4, #3320]	; 0xcf8
    88d2:	b2ab      	uxth	r3, r5
    88d4:	429a      	cmp	r2, r3
    88d6:	f105 0501 	add.w	r5, r5, #1
    88da:	d835      	bhi.n	8948 <ll_reset+0x90>
	_radio.advertiser.is_enabled = 0;
    88dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    88e0:	f36f 13c7 	bfc	r3, #7, #1
    88e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	_radio.scanner.is_enabled = 0;
    88e8:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
	_radio.advertiser.conn = NULL;
    88ec:	2000      	movs	r0, #0
	_radio.scanner.is_enabled = 0;
    88ee:	f360 0300 	bfi	r3, r0, #0, #1
    88f2:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    88f6:	f44f 7286 	mov.w	r2, #268	; 0x10c
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    88fa:	f8b4 3d16 	ldrh.w	r3, [r4, #3350]	; 0xd16
    88fe:	fbb3 f3f2 	udiv	r3, r3, r2
    8902:	f884 3d1a 	strb.w	r3, [r4, #3354]	; 0xd1a
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    8906:	f894 3d20 	ldrb.w	r3, [r4, #3360]	; 0xd20
	_radio.packet_rx_last = 0;
    890a:	f884 0d21 	strb.w	r0, [r4, #3361]	; 0xd21
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    890e:	3b01      	subs	r3, #1
	_radio.packet_tx_first = 0;
    8910:	f884 0d55 	strb.w	r0, [r4, #3413]	; 0xd55
	_radio.packet_release_last = 0;
    8914:	f884 0d58 	strb.w	r0, [r4, #3416]	; 0xd58
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    8918:	f884 3d34 	strb.w	r3, [r4, #3380]	; 0xd34
	_radio.fc_ack = _radio.fc_req;
    891c:	f894 3d60 	ldrb.w	r3, [r4, #3424]	; 0xd60
	_radio.advertiser.conn = NULL;
    8920:	f8c4 0c18 	str.w	r0, [r4, #3096]	; 0xc18
	_radio.scanner.conn = NULL;
    8924:	f8c4 0c54 	str.w	r0, [r4, #3156]	; 0xc54
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    8928:	f8a4 2d18 	strh.w	r2, [r4, #3352]	; 0xd18
	_radio.packet_rx_acquire = 0;
    892c:	f884 0d22 	strb.w	r0, [r4, #3362]	; 0xd22
	_radio.packet_tx_last = 0;
    8930:	f884 0d56 	strb.w	r0, [r4, #3414]	; 0xd56
	_radio.packet_release_first = 0;
    8934:	f884 0d57 	strb.w	r0, [r4, #3415]	; 0xd57
	_radio.fc_ack = _radio.fc_req;
    8938:	f884 3d61 	strb.w	r3, [r4, #3425]	; 0xd61
	ll_filter_reset(false);
    893c:	f000 fc56 	bl	91ec <ll_filter_reset>
}
    8940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	common_init();
    8944:	f7fd bb48 	b.w	5fd8 <common_init>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    8948:	1da8      	adds	r0, r5, #6
    894a:	21ff      	movs	r1, #255	; 0xff
    894c:	b2c0      	uxtb	r0, r0
    894e:	f7fc f91b 	bl	4b88 <role_disable>
    8952:	e7bc      	b.n	88ce <ll_reset+0x16>
    8954:	20000380 	.word	0x20000380

00008958 <ll_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
    8958:	4b02      	ldr	r3, [pc, #8]	; (8964 <ll_adv_is_enabled+0xc>)
    895a:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
}
    895e:	09c0      	lsrs	r0, r0, #7
    8960:	4770      	bx	lr
    8962:	bf00      	nop
    8964:	20000380 	.word	0x20000380

00008968 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
    8968:	4b05      	ldr	r3, [pc, #20]	; (8980 <radio_adv_filter_pol_get+0x18>)
    896a:	f993 2028 	ldrsb.w	r2, [r3, #40]	; 0x28
    896e:	2a00      	cmp	r2, #0
		return _radio.advertiser.filter_policy;
    8970:	bfba      	itte	lt
    8972:	f893 002a 	ldrblt.w	r0, [r3, #42]	; 0x2a
    8976:	f000 0003 	andlt.w	r0, r0, #3
    897a:	2000      	movge	r0, #0
}
    897c:	4770      	bx	lr
    897e:	bf00      	nop
    8980:	20000380 	.word	0x20000380

00008984 <ll_scan_is_enabled>:
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8984:	4a09      	ldr	r2, [pc, #36]	; (89ac <ll_scan_is_enabled+0x28>)
    8986:	f892 3c2c 	ldrb.w	r3, [r2, #3116]	; 0xc2c
    898a:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
	       (_radio.scanner.conn ? BIT(2) : 0);
    898e:	f8d2 2c54 	ldr.w	r2, [r2, #3156]	; 0xc54
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8992:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	       (_radio.scanner.conn ? BIT(2) : 0);
    8996:	2a00      	cmp	r2, #0
	return ((u32_t)_radio.scanner.is_enabled << _radio.scanner.type) |
    8998:	f003 0301 	and.w	r3, r3, #1
    899c:	fa03 f300 	lsl.w	r3, r3, r0
	       (_radio.scanner.conn ? BIT(2) : 0);
    89a0:	bf14      	ite	ne
    89a2:	2004      	movne	r0, #4
    89a4:	2000      	moveq	r0, #0
}
    89a6:	4318      	orrs	r0, r3
    89a8:	4770      	bx	lr
    89aa:	bf00      	nop
    89ac:	20000380 	.word	0x20000380

000089b0 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
    89b0:	4b05      	ldr	r3, [pc, #20]	; (89c8 <radio_scan_filter_pol_get+0x18>)
    89b2:	f893 0c2c 	ldrb.w	r0, [r3, #3116]	; 0xc2c
    89b6:	f010 0001 	ands.w	r0, r0, #1
		return _radio.scanner.filter_policy;
    89ba:	bf1c      	itt	ne
    89bc:	f893 0c2d 	ldrbne.w	r0, [r3, #3117]	; 0xc2d
    89c0:	f3c0 1001 	ubfxne	r0, r0, #4, #2
}
    89c4:	4770      	bx	lr
    89c6:	bf00      	nop
    89c8:	20000380 	.word	0x20000380

000089cc <ll_tx_pwr_lvl_get>:
{
    89cc:	b510      	push	{r4, lr}
    89ce:	4614      	mov	r4, r2
	conn = connection_get(handle);
    89d0:	f7fc f8c4 	bl	4b5c <connection_get>
	if (!conn) {
    89d4:	b110      	cbz	r0, 89dc <ll_tx_pwr_lvl_get+0x10>
	*tx_pwr_lvl = 0;
    89d6:	2000      	movs	r0, #0
    89d8:	7020      	strb	r0, [r4, #0]
	return 0;
    89da:	bd10      	pop	{r4, pc}
		return 1;
    89dc:	2001      	movs	r0, #1
}
    89de:	bd10      	pop	{r4, pc}

000089e0 <ll_rx_get>:
{
    89e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    89e4:	4605      	mov	r5, r0
    89e6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    89e8:	4918      	ldr	r1, [pc, #96]	; (8a4c <ll_rx_get+0x6c>)
    89ea:	f8d1 3d2c 	ldr.w	r3, [r1, #3372]	; 0xd2c
    89ee:	f8d1 2d30 	ldr.w	r2, [r1, #3376]	; 0xd30
    89f2:	4293      	cmp	r3, r2
    89f4:	460f      	mov	r7, r1
    89f6:	d01f      	beq.n	8a38 <ll_rx_get+0x58>
		_node_rx = _radio.link_rx_head->mem;
    89f8:	f8d3 8004 	ldr.w	r8, [r3, #4]
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    89fc:	f601 5157 	addw	r1, r1, #3415	; 0xd57
    8a00:	f898 2000 	ldrb.w	r2, [r8]
    8a04:	f7fc f860 	bl	4ac8 <tx_cmplt_get>
		if (!cmplt) {
    8a08:	4604      	mov	r4, r0
    8a0a:	b9e0      	cbnz	r0, 8a46 <ll_rx_get+0x66>
			first = _radio.packet_release_first;
    8a0c:	ae02      	add	r6, sp, #8
    8a0e:	f897 3d57 	ldrb.w	r3, [r7, #3415]	; 0xd57
    8a12:	f806 3d03 	strb.w	r3, [r6, #-3]!
				cmplt_curr = tx_cmplt_get(&h, &first,
    8a16:	f897 2d58 	ldrb.w	r2, [r7, #3416]	; 0xd58
    8a1a:	4631      	mov	r1, r6
    8a1c:	f10d 0006 	add.w	r0, sp, #6
    8a20:	f7fc f852 	bl	4ac8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
    8a24:	b934      	cbnz	r4, 8a34 <ll_rx_get+0x54>
			} while ((cmplt_prev != 0) ||
    8a26:	b928      	cbnz	r0, 8a34 <ll_rx_get+0x54>
			*node_rx = _node_rx;
    8a28:	f8c5 8000 	str.w	r8, [r5]
}
    8a2c:	4620      	mov	r0, r4
    8a2e:	b002      	add	sp, #8
    8a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
    8a34:	4604      	mov	r4, r0
    8a36:	e7ee      	b.n	8a16 <ll_rx_get+0x36>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    8a38:	f891 2d58 	ldrb.w	r2, [r1, #3416]	; 0xd58
    8a3c:	f601 5157 	addw	r1, r1, #3415	; 0xd57
    8a40:	f7fc f842 	bl	4ac8 <tx_cmplt_get>
    8a44:	4604      	mov	r4, r0
		*node_rx = NULL;
    8a46:	2300      	movs	r3, #0
    8a48:	602b      	str	r3, [r5, #0]
    8a4a:	e7ef      	b.n	8a2c <ll_rx_get+0x4c>
    8a4c:	20000380 	.word	0x20000380

00008a50 <ll_rx_mem_release>:
{
    8a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			mem_release(_node_rx_free,
    8a54:	4c16      	ldr	r4, [pc, #88]	; (8ab0 <ll_rx_mem_release+0x60>)
{
    8a56:	4605      	mov	r5, r0
	_node_rx = *node_rx;
    8a58:	6800      	ldr	r0, [r0, #0]
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8a5a:	f5a4 6651 	sub.w	r6, r4, #3344	; 0xd10
			mem_release(conn, &_radio.conn_free);
    8a5e:	f1a4 071c 	sub.w	r7, r4, #28
	while (_node_rx) {
    8a62:	b920      	cbnz	r0, 8a6e <ll_rx_mem_release+0x1e>
	*node_rx = _node_rx;
    8a64:	6028      	str	r0, [r5, #0]
}
    8a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	packet_rx_allocate(0xff);
    8a6a:	f7fd ba6b 	b.w	5f44 <packet_rx_allocate.constprop.51>
		switch (_node_rx_free->hdr.type) {
    8a6e:	7902      	ldrb	r2, [r0, #4]
		_node_rx = _node_rx->hdr.onion.next;
    8a70:	f8d0 8000 	ldr.w	r8, [r0]
    8a74:	2a0a      	cmp	r2, #10
    8a76:	d807      	bhi.n	8a88 <ll_rx_mem_release+0x38>
    8a78:	2301      	movs	r3, #1
    8a7a:	4093      	lsls	r3, r2
    8a7c:	f240 727e 	movw	r2, #1918	; 0x77e
    8a80:	4213      	tst	r3, r2
    8a82:	d107      	bne.n	8a94 <ll_rx_mem_release+0x44>
    8a84:	061b      	lsls	r3, r3, #24
    8a86:	d40a      	bmi.n	8a9e <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
    8a88:	4040      	eors	r0, r0
    8a8a:	f380 8811 	msr	BASEPRI, r0
    8a8e:	f04f 0004 	mov.w	r0, #4
    8a92:	df02      	svc	2
			mem_release(_node_rx_free,
    8a94:	4621      	mov	r1, r4
			mem_release(conn, &_radio.conn_free);
    8a96:	f7fa f8e2 	bl	2c5e <mem_release>
{
    8a9a:	4640      	mov	r0, r8
    8a9c:	e7e1      	b.n	8a62 <ll_rx_mem_release+0x12>
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    8a9e:	88c2      	ldrh	r2, [r0, #6]
    8aa0:	f8d6 0cf0 	ldr.w	r0, [r6, #3312]	; 0xcf0
    8aa4:	f44f 7182 	mov.w	r1, #260	; 0x104
    8aa8:	f7fa f8ee 	bl	2c88 <mem_get>
			mem_release(conn, &_radio.conn_free);
    8aac:	4639      	mov	r1, r7
    8aae:	e7f2      	b.n	8a96 <ll_rx_mem_release+0x46>
    8ab0:	20001090 	.word	0x20001090

00008ab4 <do_radio_rx_fc_set>:
	}
}

u8_t do_radio_rx_fc_set(u16_t handle, u8_t req, u8_t ack)
{
	if (req == ack) {
    8ab4:	4291      	cmp	r1, r2
{
    8ab6:	b510      	push	{r4, lr}
    8ab8:	4b14      	ldr	r3, [pc, #80]	; (8b0c <do_radio_rx_fc_set+0x58>)
	if (req == ack) {
    8aba:	d119      	bne.n	8af0 <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    8abc:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
    8ac0:	f8d3 4d2c 	ldr.w	r4, [r3, #3372]	; 0xd2c
    8ac4:	4294      	cmp	r4, r2
    8ac6:	d111      	bne.n	8aec <do_radio_rx_fc_set+0x38>
			u8_t ack1 = ack;

			if (ack1 == 0) {
    8ac8:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    8aca:	bf14      	ite	ne
    8acc:	460a      	movne	r2, r1
    8ace:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    8ad0:	3a01      	subs	r2, #1
    8ad2:	b2d2      	uxtb	r2, r2
    8ad4:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    8ad8:	f883 2d61 	strb.w	r2, [r3, #3425]	; 0xd61

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    8adc:	f893 2d60 	ldrb.w	r2, [r3, #3424]	; 0xd60
			_radio.fc_handle[--ack1] = handle;
    8ae0:	f8a4 0d5a 	strh.w	r0, [r4, #3418]	; 0xd5a
			if (req != _radio.fc_req) {
    8ae4:	4291      	cmp	r1, r2
    8ae6:	d00f      	beq.n	8b08 <do_radio_rx_fc_set+0x54>
				_radio.fc_ack = ack;
    8ae8:	f883 1d61 	strb.w	r1, [r3, #3425]	; 0xd61

				return 1;
			}
		} else {
			return 1;
    8aec:	2001      	movs	r0, #1
    8aee:	bd10      	pop	{r4, pc}
		}
	} else if (((req == 0) &&
    8af0:	b929      	cbnz	r1, 8afe <do_radio_rx_fc_set+0x4a>
    8af2:	f8b3 3d5e 	ldrh.w	r3, [r3, #3422]	; 0xd5e
				return 1;
    8af6:	1a18      	subs	r0, r3, r0
    8af8:	bf18      	it	ne
    8afa:	2001      	movne	r0, #1
    8afc:	bd10      	pop	{r4, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    8afe:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8b02:	f8b3 3d58 	ldrh.w	r3, [r3, #3416]	; 0xd58
    8b06:	e7f6      	b.n	8af6 <do_radio_rx_fc_set+0x42>
		return 1;
	}

	return 0;
    8b08:	2000      	movs	r0, #0
}
    8b0a:	bd10      	pop	{r4, pc}
    8b0c:	20000380 	.word	0x20000380

00008b10 <radio_rx_fc_set>:

u8_t radio_rx_fc_set(u16_t handle, u8_t fc)
{
    8b10:	b430      	push	{r4, r5}
	if (_radio.fc_ena) {
    8b12:	4b14      	ldr	r3, [pc, #80]	; (8b64 <radio_rx_fc_set+0x54>)
    8b14:	f893 2d62 	ldrb.w	r2, [r3, #3426]	; 0xd62
{
    8b18:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    8b1a:	b302      	cbz	r2, 8b5e <radio_rx_fc_set+0x4e>
		u8_t req = _radio.fc_req;
    8b1c:	f893 2d60 	ldrb.w	r2, [r3, #3424]	; 0xd60
    8b20:	b2d1      	uxtb	r1, r2
		u8_t ack = _radio.fc_ack;
    8b22:	f893 2d61 	ldrb.w	r2, [r3, #3425]	; 0xd61

		if (fc) {
    8b26:	b135      	cbz	r5, 8b36 <radio_rx_fc_set+0x26>
			if (handle != 0xffff) {
    8b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    8b2c:	4298      	cmp	r0, r3
    8b2e:	d016      	beq.n	8b5e <radio_rx_fc_set+0x4e>
			}
		}
	}

	return 0;
}
    8b30:	bc30      	pop	{r4, r5}
				return do_radio_rx_fc_set(handle, req, ack);
    8b32:	f7ff bfbf 	b.w	8ab4 <do_radio_rx_fc_set>
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    8b36:	f8d3 0d2c 	ldr.w	r0, [r3, #3372]	; 0xd2c
    8b3a:	f8d3 4d30 	ldr.w	r4, [r3, #3376]	; 0xd30
    8b3e:	42a0      	cmp	r0, r4
    8b40:	d10d      	bne.n	8b5e <radio_rx_fc_set+0x4e>
    8b42:	4291      	cmp	r1, r2
    8b44:	d00b      	beq.n	8b5e <radio_rx_fc_set+0x4e>
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8b46:	f8d3 4d30 	ldr.w	r4, [r3, #3376]	; 0xd30
			_radio.fc_ack = req;
    8b4a:	f883 1d61 	strb.w	r1, [r3, #3425]	; 0xd61
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8b4e:	42a0      	cmp	r0, r4
    8b50:	d005      	beq.n	8b5e <radio_rx_fc_set+0x4e>
			    (req == _radio.fc_req)) {
    8b52:	f893 0d60 	ldrb.w	r0, [r3, #3424]	; 0xd60
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    8b56:	4281      	cmp	r1, r0
				_radio.fc_ack = ack;
    8b58:	bf08      	it	eq
    8b5a:	f883 2d61 	strbeq.w	r2, [r3, #3425]	; 0xd61
}
    8b5e:	2000      	movs	r0, #0
    8b60:	bc30      	pop	{r4, r5}
    8b62:	4770      	bx	lr
    8b64:	20000380 	.word	0x20000380

00008b68 <ll_adv_scan_state_cb>:

	return 0;
}

void __weak ll_adv_scan_state_cb(u8_t bm)
{
    8b68:	4770      	bx	lr
    8b6a:	0000      	movs	r0, r0
    8b6c:	0000      	movs	r0, r0
	...

00008b70 <radio_scan_enable>:
{
    8b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (_radio.scanner.is_enabled) {
    8b74:	4c70      	ldr	r4, [pc, #448]	; (8d38 <radio_scan_enable+0x1c8>)
    8b76:	f894 7c2c 	ldrb.w	r7, [r4, #3116]	; 0xc2c
{
    8b7a:	b08e      	sub	sp, #56	; 0x38
    8b7c:	461d      	mov	r5, r3
	if (_radio.scanner.is_enabled) {
    8b7e:	f017 0701 	ands.w	r7, r7, #1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8b82:	f04f 0302 	mov.w	r3, #2
{
    8b86:	460e      	mov	r6, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
    8b88:	930b      	str	r3, [sp, #44]	; 0x2c
{
    8b8a:	4611      	mov	r1, r2
	if (_radio.scanner.is_enabled) {
    8b8c:	d003      	beq.n	8b96 <radio_scan_enable+0x26>
		return BT_HCI_ERR_CMD_DISALLOWED;
    8b8e:	200c      	movs	r0, #12
}
    8b90:	b00e      	add	sp, #56	; 0x38
    8b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_radio.scanner.type = type;
    8b96:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
    8b9a:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;				//1
    8b9e:	0840      	lsrs	r0, r0, #1
    8ba0:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.init_addr_type = init_addr_type;
    8ba4:	f366 13c7 	bfi	r3, r6, #7, #1
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    8ba8:	2206      	movs	r2, #6
    8baa:	f604 402e 	addw	r0, r4, #3118	; 0xc2e
	_radio.scanner.init_addr_type = init_addr_type;
    8bae:	f884 3c2d 	strb.w	r3, [r4, #3117]	; 0xc2d
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    8bb2:	4e62      	ldr	r6, [pc, #392]	; (8d3c <radio_scan_enable+0x1cc>)
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
    8bb4:	f7f7 fd20 	bl	5f8 <memcpy>
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    8bb8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    8bbc:	f04f 0891 	mov.w	r8, #145	; 0x91
    8bc0:	fba2 0106 	umull	r0, r1, r2, r6
    8bc4:	fb08 1102 	mla	r1, r8, r2, r1
    8bc8:	a359      	add	r3, pc, #356	; (adr r3, 8d30 <radio_scan_enable+0x1c0>)
    8bca:	e9d3 2300 	ldrd	r2, r3, [r3]
    8bce:	f7f7 fb4b 	bl	268 <__aeabi_uldivmod>
	_radio.scanner.filter_policy = filter_policy;
    8bd2:	f894 3c2d 	ldrb.w	r3, [r4, #3117]	; 0xc2d
    8bd6:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
	_radio.scanner.hdr.ticks_preempt_to_start =
    8bda:	f8c4 7c24 	str.w	r7, [r4, #3108]	; 0xc24
	_radio.scanner.filter_policy = filter_policy;
    8bde:	f362 1305 	bfi	r3, r2, #4, #2
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    8be2:	b2aa      	uxth	r2, r5
    8be4:	fba2 6706 	umull	r6, r7, r2, r6
		_radio.ticks_active_to_start;
    8be8:	f8d4 ad64 	ldr.w	sl, [r4, #3428]	; 0xd64
	_radio.scanner.filter_policy = filter_policy;
    8bec:	f884 3c2d 	strb.w	r3, [r4, #3117]	; 0xc2d
		_radio.scanner.ticks_window +
    8bf0:	f100 0909 	add.w	r9, r0, #9
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    8bf4:	fb08 7702 	mla	r7, r8, r2, r7
	_radio.scanner.hdr.ticks_xtal_to_start =
    8bf8:	2327      	movs	r3, #39	; 0x27
	_radio.scanner.ticks_window = HAL_TICKER_US_TO_TICKS((u64_t)window *
    8bfa:	f8c4 0c3c 	str.w	r0, [r4, #3132]	; 0xc3c
	_radio.scanner.hdr.ticks_active_to_start =
    8bfe:	f8c4 ac20 	str.w	sl, [r4, #3104]	; 0xc20
	_radio.scanner.hdr.ticks_xtal_to_start =
    8c02:	f8c4 3c1c 	str.w	r3, [r4, #3100]	; 0xc1c
	_radio.scanner.hdr.ticks_slot =
    8c06:	f8c4 9c28 	str.w	r9, [r4, #3112]	; 0xc28
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    8c0a:	a349      	add	r3, pc, #292	; (adr r3, 8d30 <radio_scan_enable+0x1c0>)
    8c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c10:	4630      	mov	r0, r6
    8c12:	4639      	mov	r1, r7
    8c14:	f7f7 fb28 	bl	268 <__aeabi_uldivmod>
	    (ticks_interval -
    8c18:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
    8c1c:	4599      	cmp	r9, r3
	_radio.scanner.interval = interval;
    8c1e:	f8c4 5c40 	str.w	r5, [r4, #3136]	; 0xc40
	ticks_slot_offset =
    8c22:	4655      	mov	r5, sl
		_radio.scanner.hdr.ticks_slot =
    8c24:	bf88      	it	hi
    8c26:	f8c4 3c28 	strhi.w	r3, [r4, #3112]	; 0xc28
	ticks_slot_offset =
    8c2a:	2d27      	cmp	r5, #39	; 0x27
    8c2c:	bf38      	it	cc
    8c2e:	2527      	movcc	r5, #39	; 0x27
	ticks_interval = HAL_TICKER_US_TO_TICKS((u64_t) interval * 625);
    8c30:	4680      	mov	r8, r0
	_radio.scanner.slot_offset = ticks_slot_offset ;
    8c32:	f8c4 5c44 	str.w	r5, [r4, #3140]	; 0xc44
	ticks_anchor = ticker_ticks_now_get();
    8c36:	f7fa ffc9 	bl	3bcc <ticker_ticks_now_get>
	if ((_radio.scanner.conn) ||
    8c3a:	f8d4 3c54 	ldr.w	r3, [r4, #3156]	; 0xc54
	ticks_anchor = ticker_ticks_now_get();
    8c3e:	4682      	mov	sl, r0
	if ((_radio.scanner.conn) ||
    8c40:	2b00      	cmp	r3, #0
    8c42:	d05e      	beq.n	8d02 <radio_scan_enable+0x192>
		us_offset = 0;
    8c44:	2300      	movs	r3, #0
    8c46:	930c      	str	r3, [sp, #48]	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8c48:	483d      	ldr	r0, [pc, #244]	; (8d40 <radio_scan_enable+0x1d0>)
    8c4a:	f3bf 8f5b 	dmb	ish
    8c4e:	e850 3f00 	ldrex	r3, [r0]
    8c52:	f023 0301 	bic.w	r3, r3, #1
    8c56:	e840 3200 	strex	r2, r3, [r0]
    8c5a:	2a00      	cmp	r2, #0
    8c5c:	d1f7      	bne.n	8c4e <radio_scan_enable+0xde>
    8c5e:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
    8c62:	4938      	ldr	r1, [pc, #224]	; (8d44 <radio_scan_enable+0x1d4>)
    8c64:	f840 1c04 	str.w	r1, [r0, #-4]
	k_delayed_work_init(&aux_scanning.work_d, aux_packet_function);
    8c68:	3004      	adds	r0, #4
    8c6a:	f002 f839 	bl	ace0 <k_delayed_work_init>
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    8c6e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8c70:	4935      	ldr	r1, [pc, #212]	; (8d48 <radio_scan_enable+0x1d8>)
    8c72:	a32f      	add	r3, pc, #188	; (adr r3, 8d30 <radio_scan_enable+0x1c0>)
    8c74:	e9d3 2300 	ldrd	r2, r3, [r3]
    8c78:	fba0 0101 	umull	r0, r1, r0, r1
    8c7c:	f7f7 faf4 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c80:	ab0b      	add	r3, sp, #44	; 0x2c
    8c82:	9308      	str	r3, [sp, #32]
    8c84:	4b31      	ldr	r3, [pc, #196]	; (8d4c <radio_scan_enable+0x1dc>)
    8c86:	9307      	str	r3, [sp, #28]
    8c88:	4b31      	ldr	r3, [pc, #196]	; (8d50 <radio_scan_enable+0x1e0>)
    8c8a:	9305      	str	r3, [sp, #20]
    8c8c:	f8d4 3c28 	ldr.w	r3, [r4, #3112]	; 0xc28
			   (ticks_anchor + HAL_TICKER_US_TO_TICKS(us_offset)),
    8c90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8c94:	f04f 0900 	mov.w	r9, #0
    8c98:	4482      	add	sl, r0
    8c9a:	441d      	add	r5, r3
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    8c9c:	4630      	mov	r0, r6
    8c9e:	a324      	add	r3, pc, #144	; (adr r3, 8d30 <radio_scan_enable+0x1c0>)
    8ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ca4:	4639      	mov	r1, r7
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8ca6:	f8cd 9018 	str.w	r9, [sp, #24]
    8caa:	9504      	str	r5, [sp, #16]
    8cac:	f8cd 900c 	str.w	r9, [sp, #12]
			   HAL_TICKER_REMAINDER((u64_t) interval * 625),
    8cb0:	f7f7 fada 	bl	268 <__aeabi_uldivmod>
    8cb4:	4610      	mov	r0, r2
    8cb6:	4619      	mov	r1, r3
    8cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8cbc:	2300      	movs	r3, #0
    8cbe:	f7f7 fad3 	bl	268 <__aeabi_uldivmod>
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8cc2:	f8cd 8004 	str.w	r8, [sp, #4]
    8cc6:	9002      	str	r0, [sp, #8]
    8cc8:	f8cd 9000 	str.w	r9, [sp]
    8ccc:	4653      	mov	r3, sl
    8cce:	2206      	movs	r2, #6
    8cd0:	2103      	movs	r1, #3
    8cd2:	4648      	mov	r0, r9
    8cd4:	f7fa fe0c 	bl	38f0 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
    8cd8:	2802      	cmp	r0, #2
    8cda:	d023      	beq.n	8d24 <radio_scan_enable+0x1b4>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
    8cdc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8cde:	2d00      	cmp	r5, #0
    8ce0:	f47f af55 	bne.w	8b8e <radio_scan_enable+0x1e>
	_radio.scanner.is_enabled = 1;
    8ce4:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    8ce8:	f043 0301 	orr.w	r3, r3, #1
    8cec:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
	if (!_radio.advertiser.is_enabled) {
    8cf0:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	db02      	blt.n	8cfe <radio_scan_enable+0x18e>
		ll_adv_scan_state_cb(BIT(1));
    8cf8:	2002      	movs	r0, #2
    8cfa:	f7ff ff35 	bl	8b68 <ll_adv_scan_state_cb>
	return 0;
    8cfe:	4628      	mov	r0, r5
    8d00:	e746      	b.n	8b90 <radio_scan_enable+0x20>
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    8d02:	f8d4 1c28 	ldr.w	r1, [r4, #3112]	; 0xc28
		u32_t ticks_ref = 0;
    8d06:	930d      	str	r3, [sp, #52]	; 0x34
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    8d08:	aa0d      	add	r2, sp, #52	; 0x34
    8d0a:	ab0c      	add	r3, sp, #48	; 0x30
    8d0c:	4429      	add	r1, r5
    8d0e:	2003      	movs	r0, #3
    8d10:	f7fc fb2a 	bl	5368 <sched_after_mstr_free_slot_get>
		if (us_offset) {
    8d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8d16:	2b00      	cmp	r3, #0
    8d18:	d096      	beq.n	8c48 <radio_scan_enable+0xd8>
			ticks_anchor = ticks_ref;
    8d1a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    8d1e:	e793      	b.n	8c48 <radio_scan_enable+0xd8>
			cpu_sleep();
    8d20:	f7fb fe36 	bl	4990 <cpu_sleep>
		while (ret_cb == TICKER_STATUS_BUSY) {
    8d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d26:	2b02      	cmp	r3, #2
    8d28:	d0fa      	beq.n	8d20 <radio_scan_enable+0x1b0>
    8d2a:	e7d7      	b.n	8cdc <radio_scan_enable+0x16c>
    8d2c:	f3af 8000 	nop.w
    8d30:	1afd498d 	.word	0x1afd498d
    8d34:	00000007 	.word	0x00000007
    8d38:	20000380 	.word	0x20000380
    8d3c:	84e72a00 	.word	0x84e72a00
    8d40:	200034c0 	.word	0x200034c0
    8d44:	000057a1 	.word	0x000057a1
    8d48:	3b9aca00 	.word	0x3b9aca00
    8d4c:	000049d5 	.word	0x000049d5
    8d50:	00005ec1 	.word	0x00005ec1

00008d54 <radio_scan_disable>:
{
    8d54:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
    8d56:	2104      	movs	r1, #4
    8d58:	2006      	movs	r0, #6
    8d5a:	f7fb ff15 	bl	4b88 <role_disable>
	if (!status) {
    8d5e:	4605      	mov	r5, r0
    8d60:	b9e8      	cbnz	r0, 8d9e <radio_scan_disable+0x4a>
		_radio.scanner.is_enabled = 0;
    8d62:	4c10      	ldr	r4, [pc, #64]	; (8da4 <radio_scan_disable+0x50>)
    8d64:	f894 2c2c 	ldrb.w	r2, [r4, #3116]	; 0xc2c
    8d68:	f360 0200 	bfi	r2, r0, #0, #1
    8d6c:	f884 2c2c 	strb.w	r2, [r4, #3116]	; 0xc2c
		if (!_radio.advertiser.is_enabled) {
    8d70:	f994 2028 	ldrsb.w	r2, [r4, #40]	; 0x28
    8d74:	2a00      	cmp	r2, #0
    8d76:	db01      	blt.n	8d7c <radio_scan_disable+0x28>
			ll_adv_scan_state_cb(0);
    8d78:	f7ff fef6 	bl	8b68 <ll_adv_scan_state_cb>
		conn = _radio.scanner.conn;
    8d7c:	f8d4 6c54 	ldr.w	r6, [r4, #3156]	; 0xc54
		if (conn) {
    8d80:	b15e      	cbz	r6, 8d9a <radio_scan_disable+0x46>
			_radio.scanner.conn = NULL;
    8d82:	2300      	movs	r3, #0
    8d84:	f8c4 3c54 	str.w	r3, [r4, #3156]	; 0xc54
			mem_release(conn->llcp_terminate.
    8d88:	4907      	ldr	r1, [pc, #28]	; (8da8 <radio_scan_disable+0x54>)
    8d8a:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    8d8e:	f7f9 ff66 	bl	2c5e <mem_release>
			mem_release(conn, &_radio.conn_free);
    8d92:	4906      	ldr	r1, [pc, #24]	; (8dac <radio_scan_disable+0x58>)
    8d94:	4630      	mov	r0, r6
    8d96:	f7f9 ff62 	bl	2c5e <mem_release>
}
    8d9a:	4628      	mov	r0, r5
    8d9c:	bd70      	pop	{r4, r5, r6, pc}
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
    8d9e:	250c      	movs	r5, #12
    8da0:	e7fb      	b.n	8d9a <radio_scan_disable+0x46>
    8da2:	bf00      	nop
    8da4:	20000380 	.word	0x20000380
    8da8:	200010a8 	.word	0x200010a8
    8dac:	20001074 	.word	0x20001074

00008db0 <ll_rx_dequeue>:
{
    8db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    8db2:	4d34      	ldr	r5, [pc, #208]	; (8e84 <ll_rx_dequeue+0xd4>)
	struct radio_pdu_node_rx *node_rx = NULL;
    8db4:	aa02      	add	r2, sp, #8
    8db6:	2300      	movs	r3, #0
    8db8:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    8dbc:	f8d5 0d30 	ldr.w	r0, [r5, #3376]	; 0xd30
    8dc0:	f605 512c 	addw	r1, r5, #3372	; 0xd2c
    8dc4:	f7f9 ff89 	bl	2cda <memq_dequeue>
    8dc8:	462c      	mov	r4, r5
	LL_ASSERT(link);
    8dca:	b928      	cbnz	r0, 8dd8 <ll_rx_dequeue+0x28>
			LL_ASSERT(_radio.scanner.is_enabled);
    8dcc:	4040      	eors	r0, r0
    8dce:	f380 8811 	msr	BASEPRI, r0
    8dd2:	f04f 0004 	mov.w	r0, #4
    8dd6:	df02      	svc	2
	mem_release(link, &_radio.link_rx_free);
    8dd8:	f605 5128 	addw	r1, r5, #3368	; 0xd28
    8ddc:	f7f9 ff3f 	bl	2c5e <mem_release>
	switch (node_rx->hdr.type) {
    8de0:	9a01      	ldr	r2, [sp, #4]
    8de2:	7911      	ldrb	r1, [r2, #4]
    8de4:	290a      	cmp	r1, #10
    8de6:	d8f1      	bhi.n	8dcc <ll_rx_dequeue+0x1c>
    8de8:	2301      	movs	r3, #1
    8dea:	408b      	lsls	r3, r1
    8dec:	f240 707e 	movw	r0, #1918	; 0x77e
    8df0:	4203      	tst	r3, r0
    8df2:	d111      	bne.n	8e18 <ll_rx_dequeue+0x68>
    8df4:	0618      	lsls	r0, r3, #24
    8df6:	d5e9      	bpl.n	8dcc <ll_rx_dequeue+0x1c>
	if (node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
    8df8:	2906      	cmp	r1, #6
    8dfa:	d134      	bne.n	8e66 <ll_rx_dequeue+0xb6>
		if ((radio_le_conn_cmplt->status == 0x3c) ||
    8dfc:	7ad3      	ldrb	r3, [r2, #11]
    8dfe:	2b3c      	cmp	r3, #60	; 0x3c
    8e00:	d015      	beq.n	8e2e <ll_rx_dequeue+0x7e>
    8e02:	7b12      	ldrb	r2, [r2, #12]
    8e04:	bb8a      	cbnz	r2, 8e6a <ll_rx_dequeue+0xba>
			LL_ASSERT(_radio.scanner.is_enabled);
    8e06:	f894 3c2c 	ldrb.w	r3, [r4, #3116]	; 0xc2c
    8e0a:	07d9      	lsls	r1, r3, #31
    8e0c:	d5de      	bpl.n	8dcc <ll_rx_dequeue+0x1c>
			_radio.scanner.is_enabled = 0;
    8e0e:	f362 0300 	bfi	r3, r2, #0, #1
    8e12:	f884 3c2c 	strb.w	r3, [r4, #3116]	; 0xc2c
    8e16:	e01a      	b.n	8e4e <ll_rx_dequeue+0x9e>
		LL_ASSERT(_radio.link_rx_data_quota <
    8e18:	f895 0d20 	ldrb.w	r0, [r5, #3360]	; 0xd20
    8e1c:	f895 3d34 	ldrb.w	r3, [r5, #3380]	; 0xd34
    8e20:	3801      	subs	r0, #1
    8e22:	4283      	cmp	r3, r0
    8e24:	dad2      	bge.n	8dcc <ll_rx_dequeue+0x1c>
		_radio.link_rx_data_quota++;
    8e26:	3301      	adds	r3, #1
    8e28:	f885 3d34 	strb.w	r3, [r5, #3380]	; 0xd34
		break;
    8e2c:	e7e4      	b.n	8df8 <ll_rx_dequeue+0x48>
				_radio.advertiser.conn = NULL;
    8e2e:	2300      	movs	r3, #0
				conn = _radio.advertiser.conn;
    8e30:	f8d4 5c18 	ldr.w	r5, [r4, #3096]	; 0xc18
				_radio.advertiser.conn = NULL;
    8e34:	f8c4 3c18 	str.w	r3, [r4, #3096]	; 0xc18
			LL_ASSERT(_radio.advertiser.is_enabled);
    8e38:	f994 3028 	ldrsb.w	r3, [r4, #40]	; 0x28
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	dac5      	bge.n	8dcc <ll_rx_dequeue+0x1c>
			_radio.advertiser.is_enabled = 0;
    8e40:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    8e44:	f36f 13c7 	bfc	r3, #7, #1
    8e48:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (conn) {
    8e4c:	b97d      	cbnz	r5, 8e6e <ll_rx_dequeue+0xbe>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    8e4e:	f894 0c2c 	ldrb.w	r0, [r4, #3116]	; 0xc2c
		     _radio.advertiser.is_enabled;
    8e52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
    8e56:	f000 0001 	and.w	r0, r0, #1
    8e5a:	0040      	lsls	r0, r0, #1
		if (!bm) {
    8e5c:	ea50 10d3 	orrs.w	r0, r0, r3, lsr #7
    8e60:	d101      	bne.n	8e66 <ll_rx_dequeue+0xb6>
			ll_adv_scan_state_cb(0);
    8e62:	f7ff fe81 	bl	8b68 <ll_adv_scan_state_cb>
}
    8e66:	b003      	add	sp, #12
    8e68:	bd30      	pop	{r4, r5, pc}
		struct connection *conn = NULL;
    8e6a:	2500      	movs	r5, #0
    8e6c:	e7e4      	b.n	8e38 <ll_rx_dequeue+0x88>
			mem_release(node_rx->hdr.onion.link,
    8e6e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    8e72:	4905      	ldr	r1, [pc, #20]	; (8e88 <ll_rx_dequeue+0xd8>)
    8e74:	f7f9 fef3 	bl	2c5e <mem_release>
			mem_release(conn, &_radio.conn_free);
    8e78:	4904      	ldr	r1, [pc, #16]	; (8e8c <ll_rx_dequeue+0xdc>)
    8e7a:	4628      	mov	r0, r5
    8e7c:	f7f9 feef 	bl	2c5e <mem_release>
    8e80:	e7e5      	b.n	8e4e <ll_rx_dequeue+0x9e>
    8e82:	bf00      	nop
    8e84:	20000380 	.word	0x20000380
    8e88:	200010a8 	.word	0x200010a8
    8e8c:	20001074 	.word	0x20001074

00008e90 <rtc0_nrf5_isr>:
	ISR_DIRECT_PM();
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
    8e90:	b538      	push	{r3, r4, r5, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    8e92:	4c0b      	ldr	r4, [pc, #44]	; (8ec0 <rtc0_nrf5_isr+0x30>)
    8e94:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    8e98:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    8e9c:	b122      	cbz	r2, 8ea8 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    8e9e:	2000      	movs	r0, #0
    8ea0:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140

		ticker_trigger(0);
    8ea4:	f7fa fd12 	bl	38cc <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    8ea8:	b12d      	cbz	r5, 8eb6 <rtc0_nrf5_isr+0x26>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    8eaa:	2300      	movs	r3, #0
    8eac:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    8eb0:	2001      	movs	r0, #1
    8eb2:	f7fa fd0b 	bl	38cc <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    8eb6:	2000      	movs	r0, #0
}
    8eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mayfly_run(MAYFLY_CALL_ID_0);
    8ebc:	f7f9 bfbc 	b.w	2e38 <mayfly_run>
    8ec0:	4000b000 	.word	0x4000b000

00008ec4 <swi4_nrf5_isr>:

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    8ec4:	2001      	movs	r0, #1
    8ec6:	f7f9 bfb7 	b.w	2e38 <mayfly_run>

00008eca <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8eca:	4668      	mov	r0, sp
    8ecc:	f020 0107 	bic.w	r1, r0, #7
    8ed0:	468d      	mov	sp, r1
    8ed2:	b501      	push	{r0, lr}
	isr_radio();
    8ed4:	f000 fa9c 	bl	9410 <isr_radio>
	ISR_DIRECT_PM();
    8ed8:	f7f7 ff54 	bl	d84 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
    8edc:	f7f7 fd32 	bl	944 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
    8ee0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    8ee4:	4685      	mov	sp, r0
    8ee6:	4770      	bx	lr

00008ee8 <radio_active_callback>:
{
    8ee8:	4770      	bx	lr
	...

00008eec <radio_event_callback>:
	k_sem_give(sem_recv);
    8eec:	4b01      	ldr	r3, [pc, #4]	; (8ef4 <radio_event_callback+0x8>)
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8eee:	6818      	ldr	r0, [r3, #0]
    8ef0:	f001 bbe4 	b.w	a6bc <_impl_k_sem_give>
    8ef4:	20001d2c 	.word	0x20001d2c

00008ef8 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
    8ef8:	b570      	push	{r4, r5, r6, lr}
	struct device *clk_k32;
	struct device *clk_m16;
	struct device *entropy;
	u32_t err;

	sem_recv = sem_rx;
    8efa:	4b39      	ldr	r3, [pc, #228]	; (8fe0 <ll_init+0xe8>)
{
    8efc:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    8efe:	6018      	str	r0, [r3, #0]

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    8f00:	4838      	ldr	r0, [pc, #224]	; (8fe4 <ll_init+0xec>)
    8f02:	f000 ffcd 	bl	9ea0 <device_get_binding>
	if (!clk_k32) {
    8f06:	b918      	cbnz	r0, 8f10 <ll_init+0x18>
		return -ENODEV;
    8f08:	f06f 0012 	mvn.w	r0, #18
	irq_enable(NRF5_IRQ_RADIO_IRQn);
	irq_enable(NRF5_IRQ_RTC0_IRQn);
	irq_enable(NRF5_IRQ_SWI4_IRQn);

	return 0;
}
    8f0c:	b006      	add	sp, #24
    8f0e:	bd70      	pop	{r4, r5, r6, pc}
	return api->on(dev, sys);
    8f10:	6843      	ldr	r3, [r0, #4]
    8f12:	2101      	movs	r1, #1
    8f14:	681b      	ldr	r3, [r3, #0]
    8f16:	4798      	blx	r3
	entropy = device_get_binding(CONFIG_ENTROPY_NAME);
    8f18:	4833      	ldr	r0, [pc, #204]	; (8fe8 <ll_init+0xf0>)
    8f1a:	f000 ffc1 	bl	9ea0 <device_get_binding>
	if (!entropy) {
    8f1e:	4604      	mov	r4, r0
    8f20:	2800      	cmp	r0, #0
    8f22:	d0f1      	beq.n	8f08 <ll_init+0x10>
	cntr_init();
    8f24:	f000 f96e 	bl	9204 <cntr_init>
	mayfly_init();
    8f28:	f7f9 fee6 	bl	2cf8 <mayfly_init>
	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    8f2c:	4b2f      	ldr	r3, [pc, #188]	; (8fec <ll_init+0xf4>)
    8f2e:	2208      	movs	r2, #8
    8f30:	701a      	strb	r2, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    8f32:	2203      	movs	r2, #3
    8f34:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    8f36:	2000      	movs	r0, #0
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    8f38:	4a2d      	ldr	r2, [pc, #180]	; (8ff0 <ll_init+0xf8>)
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    8f3a:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    8f3c:	2502      	movs	r5, #2
    8f3e:	761d      	strb	r5, [r3, #24]
	err = ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO,
    8f40:	9205      	str	r2, [sp, #20]
    8f42:	4a2c      	ldr	r2, [pc, #176]	; (8ff4 <ll_init+0xfc>)
    8f44:	9204      	str	r2, [sp, #16]
    8f46:	4a2c      	ldr	r2, [pc, #176]	; (8ff8 <ll_init+0x100>)
    8f48:	9203      	str	r2, [sp, #12]
    8f4a:	4a2c      	ldr	r2, [pc, #176]	; (8ffc <ll_init+0x104>)
    8f4c:	9202      	str	r2, [sp, #8]
    8f4e:	220d      	movs	r2, #13
    8f50:	9201      	str	r2, [sp, #4]
    8f52:	9300      	str	r3, [sp, #0]
    8f54:	4a2a      	ldr	r2, [pc, #168]	; (9000 <ll_init+0x108>)
    8f56:	2304      	movs	r3, #4
    8f58:	2107      	movs	r1, #7
    8f5a:	f7fa fc7f 	bl	385c <ticker_init>
	LL_ASSERT(!err);
    8f5e:	4606      	mov	r6, r0
    8f60:	b128      	cbz	r0, 8f6e <ll_init+0x76>
    8f62:	4040      	eors	r0, r0
    8f64:	f380 8811 	msr	BASEPRI, r0
    8f68:	f04f 0004 	mov.w	r0, #4
    8f6c:	df02      	svc	2
	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    8f6e:	4825      	ldr	r0, [pc, #148]	; (9004 <ll_init+0x10c>)
    8f70:	f000 ff96 	bl	9ea0 <device_get_binding>
	if (!clk_m16) {
    8f74:	2800      	cmp	r0, #0
    8f76:	d0c7      	beq.n	8f08 <ll_init+0x10>
	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY, entropy,
    8f78:	f640 030c 	movw	r3, #2060	; 0x80c
    8f7c:	9305      	str	r3, [sp, #20]
    8f7e:	4b22      	ldr	r3, [pc, #136]	; (9008 <ll_init+0x110>)
    8f80:	9304      	str	r3, [sp, #16]
    8f82:	f44f 7380 	mov.w	r3, #256	; 0x100
    8f86:	9303      	str	r3, [sp, #12]
    8f88:	9501      	str	r5, [sp, #4]
    8f8a:	231b      	movs	r3, #27
    8f8c:	2501      	movs	r5, #1
    8f8e:	9302      	str	r3, [sp, #8]
    8f90:	4622      	mov	r2, r4
    8f92:	9500      	str	r5, [sp, #0]
    8f94:	4633      	mov	r3, r6
    8f96:	2107      	movs	r1, #7
    8f98:	f7ff fc0c 	bl	87b4 <radio_init>
	if (err) {
    8f9c:	4604      	mov	r4, r0
    8f9e:	b9e0      	cbnz	r0, 8fda <ll_init+0xe2>
	ll_filter_reset(true);
    8fa0:	4628      	mov	r0, r5
    8fa2:	f000 f923 	bl	91ec <ll_filter_reset>
	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    8fa6:	4622      	mov	r2, r4
    8fa8:	4621      	mov	r1, r4
    8faa:	4628      	mov	r0, r5
    8fac:	f7f7 fed0 	bl	d50 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
    8fb0:	4622      	mov	r2, r4
    8fb2:	4621      	mov	r1, r4
    8fb4:	200b      	movs	r0, #11
    8fb6:	f7f7 fecb 	bl	d50 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
    8fba:	4622      	mov	r2, r4
    8fbc:	4621      	mov	r1, r4
    8fbe:	2018      	movs	r0, #24
    8fc0:	f7f7 fec6 	bl	d50 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    8fc4:	4628      	mov	r0, r5
    8fc6:	f7f7 fe91 	bl	cec <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    8fca:	200b      	movs	r0, #11
    8fcc:	f7f7 fe8e 	bl	cec <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    8fd0:	2018      	movs	r0, #24
    8fd2:	f7f7 fe8b 	bl	cec <_arch_irq_enable>
	return 0;
    8fd6:	4620      	mov	r0, r4
    8fd8:	e798      	b.n	8f0c <ll_init+0x14>
		return -ENOMEM;
    8fda:	f06f 000b 	mvn.w	r0, #11
    8fde:	e795      	b.n	8f0c <ll_init+0x14>
    8fe0:	20001d2c 	.word	0x20001d2c
    8fe4:	0000b770 	.word	0x0000b770
    8fe8:	0000b744 	.word	0x0000b744
    8fec:	20001d0c 	.word	0x20001d0c
    8ff0:	00009c39 	.word	0x00009c39
    8ff4:	00009bc1 	.word	0x00009bc1
    8ff8:	00009ba1 	.word	0x00009ba1
    8ffc:	20001a9c 	.word	0x20001a9c
    9000:	20001984 	.word	0x20001984
    9004:	0000b77b 	.word	0x0000b77b
    9008:	20001178 	.word	0x20001178

0000900c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
    900c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9010:	4606      	mov	r6, r0
    9012:	4689      	mov	r9, r1
    9014:	4690      	mov	r8, r2
    9016:	461f      	mov	r7, r3
	if (ll_scan_is_enabled()) {
    9018:	f7ff fcb4 	bl	8984 <ll_scan_is_enabled>
    901c:	b9a0      	cbnz	r0, 9048 <ll_scan_params_set+0x3c>
	 * 1001b - Ext. Coded active
	 */


	/* for ext adv 0010 type */
	ll_scan.type = type | 0x03;  			//for time being just to test
    901e:	4d0c      	ldr	r5, [pc, #48]	; (9050 <ll_scan_params_set+0x44>)
    9020:	792c      	ldrb	r4, [r5, #4]
	ll_scan.interval = interval;
    9022:	f8a5 9000 	strh.w	r9, [r5]
	ll_scan.type = type | 0x03;  			//for time being just to test
    9026:	f046 0603 	orr.w	r6, r6, #3
    902a:	f366 0403 	bfi	r4, r6, #0, #4
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
    902e:	4622      	mov	r2, r4
    9030:	f367 1205 	bfi	r2, r7, #4, #2
	ll_scan.filter_policy = filter_policy;
    9034:	4613      	mov	r3, r2
    9036:	f89d 2020 	ldrb.w	r2, [sp, #32]
	ll_scan.window = window;
    903a:	f8a5 8002 	strh.w	r8, [r5, #2]
	ll_scan.filter_policy = filter_policy;
    903e:	f362 1387 	bfi	r3, r2, #6, #2
    9042:	712b      	strb	r3, [r5, #4]

	return 0;
    9044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    9048:	200c      	movs	r0, #12
}
    904a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    904e:	bf00      	nop
    9050:	20001d30 	.word	0x20001d30

00009054 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
    9054:	b5f0      	push	{r4, r5, r6, r7, lr}
    9056:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
    9058:	b920      	cbnz	r0, 9064 <ll_scan_enable+0x10>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
    905a:	b005      	add	sp, #20
    905c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return radio_scan_disable();
    9060:	f7ff be78 	b.w	8d54 <radio_scan_disable>
	} else if (ll_scan_is_enabled()) {
    9064:	f7ff fc8e 	bl	8984 <ll_scan_is_enabled>
    9068:	4606      	mov	r6, r0
    906a:	b9c8      	cbnz	r0, 90a0 <ll_scan_enable+0x4c>
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    906c:	4d0d      	ldr	r5, [pc, #52]	; (90a4 <ll_scan_enable+0x50>)
    906e:	792c      	ldrb	r4, [r5, #4]
    9070:	f004 070f 	and.w	r7, r4, #15
    9074:	f3c4 1400 	ubfx	r4, r4, #4, #1
    9078:	4601      	mov	r1, r0
    907a:	4620      	mov	r0, r4
    907c:	f7fa fdac 	bl	3bd8 <ll_addr_get>
    9080:	22ff      	movs	r2, #255	; 0xff
    9082:	9203      	str	r2, [sp, #12]
				   ll_scan.filter_policy, rpa_gen,
    9084:	792a      	ldrb	r2, [r5, #4]
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
    9086:	882b      	ldrh	r3, [r5, #0]
    9088:	9602      	str	r6, [sp, #8]
    908a:	0992      	lsrs	r2, r2, #6
    908c:	9201      	str	r2, [sp, #4]
    908e:	886a      	ldrh	r2, [r5, #2]
    9090:	9200      	str	r2, [sp, #0]
    9092:	4621      	mov	r1, r4
    9094:	4602      	mov	r2, r0
    9096:	4638      	mov	r0, r7
    9098:	f7ff fd6a 	bl	8b70 <radio_scan_enable>
}
    909c:	b005      	add	sp, #20
    909e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    90a0:	2000      	movs	r0, #0
    90a2:	e7fb      	b.n	909c <ll_scan_enable+0x48>
    90a4:	20001d30 	.word	0x20001d30

000090a8 <ctrl_filter_get>:
	if (whitelist) {
		return &wl_filter;
	}
	return &rl_filter;
#else
	LL_ASSERT(whitelist);
    90a8:	b928      	cbnz	r0, 90b6 <ctrl_filter_get+0xe>
    90aa:	4040      	eors	r0, r0
    90ac:	f380 8811 	msr	BASEPRI, r0
    90b0:	f04f 0004 	mov.w	r0, #4
    90b4:	df02      	svc	2
	return &wl_filter;
#endif
}
    90b6:	4801      	ldr	r0, [pc, #4]	; (90bc <ctrl_filter_get+0x14>)
    90b8:	4770      	bx	lr
    90ba:	bf00      	nop
    90bc:	20001d36 	.word	0x20001d36

000090c0 <ll_wl_size_get>:

u32_t ll_wl_size_get(void)
{
	return WL_SIZE;
}
    90c0:	2008      	movs	r0, #8
    90c2:	4770      	bx	lr

000090c4 <ll_wl_clear>:

u32_t ll_wl_clear(void)
{
    90c4:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    90c6:	f7ff fc4f 	bl	8968 <radio_adv_filter_pol_get>
    90ca:	4604      	mov	r4, r0
    90cc:	b110      	cbz	r0, 90d4 <ll_wl_clear+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
    90ce:	240c      	movs	r4, #12
	filter_clear(&wl_filter);
#endif /* CONFIG_BT_CTLR_PRIVACY */
	wl_anon = 0;

	return 0;
}
    90d0:	4620      	mov	r0, r4
    90d2:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    90d4:	f7ff fc6c 	bl	89b0 <radio_scan_filter_pol_get>
    90d8:	07c3      	lsls	r3, r0, #31
    90da:	d4f8      	bmi.n	90ce <ll_wl_clear+0xa>
	filter->enable_bitmask = 0;
    90dc:	4b02      	ldr	r3, [pc, #8]	; (90e8 <ll_wl_clear+0x24>)
    90de:	701c      	strb	r4, [r3, #0]
	filter->addr_type_bitmask = 0;
    90e0:	705c      	strb	r4, [r3, #1]
	wl_anon = 0;
    90e2:	4b02      	ldr	r3, [pc, #8]	; (90ec <ll_wl_clear+0x28>)
    90e4:	701c      	strb	r4, [r3, #0]
	return 0;
    90e6:	e7f3      	b.n	90d0 <ll_wl_clear+0xc>
    90e8:	20001d36 	.word	0x20001d36
    90ec:	2000356c 	.word	0x2000356c

000090f0 <ll_wl_add>:

u32_t ll_wl_add(bt_addr_le_t *addr)
{
    90f0:	b570      	push	{r4, r5, r6, lr}
    90f2:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    90f4:	f7ff fc38 	bl	8968 <radio_adv_filter_pol_get>
    90f8:	4605      	mov	r5, r0
    90fa:	b110      	cbz	r0, 9102 <ll_wl_add+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
    90fc:	250c      	movs	r5, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_add(addr);
#else
	return filter_add(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    90fe:	4628      	mov	r0, r5
    9100:	bd70      	pop	{r4, r5, r6, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9102:	f7ff fc55 	bl	89b0 <radio_scan_filter_pol_get>
    9106:	07c3      	lsls	r3, r0, #31
    9108:	d4f8      	bmi.n	90fc <ll_wl_add+0xc>
	if (addr->type == ADDR_TYPE_ANON) {
    910a:	7823      	ldrb	r3, [r4, #0]
    910c:	2bff      	cmp	r3, #255	; 0xff
    910e:	d103      	bne.n	9118 <ll_wl_add+0x28>
		wl_anon = 1;
    9110:	4b11      	ldr	r3, [pc, #68]	; (9158 <ll_wl_add+0x68>)
    9112:	2201      	movs	r2, #1
    9114:	701a      	strb	r2, [r3, #0]
		return 0;
    9116:	e7f2      	b.n	90fe <ll_wl_add+0xe>
	if (filter->enable_bitmask == 0xFF) {
    9118:	4910      	ldr	r1, [pc, #64]	; (915c <ll_wl_add+0x6c>)
    911a:	780a      	ldrb	r2, [r1, #0]
    911c:	2aff      	cmp	r2, #255	; 0xff
    911e:	d018      	beq.n	9152 <ll_wl_add+0x62>
    9120:	4628      	mov	r0, r5
	     (filter->enable_bitmask & BIT(index));
    9122:	fa22 f600 	lsr.w	r6, r2, r0
	for (index = 0;
    9126:	07f6      	lsls	r6, r6, #31
    9128:	d411      	bmi.n	914e <ll_wl_add+0x5e>
	filter->enable_bitmask |= BIT(index);
    912a:	2601      	movs	r6, #1
    912c:	4086      	lsls	r6, r0
    912e:	4332      	orrs	r2, r6
    9130:	700a      	strb	r2, [r1, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9132:	f003 0301 	and.w	r3, r3, #1
    9136:	784a      	ldrb	r2, [r1, #1]
    9138:	4083      	lsls	r3, r0
    913a:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    913c:	2206      	movs	r2, #6
    913e:	fb02 1000 	mla	r0, r2, r0, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
    9142:	704b      	strb	r3, [r1, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
    9144:	3002      	adds	r0, #2
    9146:	1c61      	adds	r1, r4, #1
    9148:	f7f7 fa56 	bl	5f8 <memcpy>
    914c:	e7d7      	b.n	90fe <ll_wl_add+0xe>
	     index++) {
    914e:	3001      	adds	r0, #1
    9150:	e7e7      	b.n	9122 <ll_wl_add+0x32>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    9152:	2507      	movs	r5, #7
    9154:	e7d3      	b.n	90fe <ll_wl_add+0xe>
    9156:	bf00      	nop
    9158:	2000356c 	.word	0x2000356c
    915c:	20001d36 	.word	0x20001d36

00009160 <ll_wl_remove>:

u32_t ll_wl_remove(bt_addr_le_t *addr)
{
    9160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9164:	4607      	mov	r7, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9166:	f7ff fbff 	bl	8968 <radio_adv_filter_pol_get>
    916a:	4606      	mov	r6, r0
    916c:	b118      	cbz	r0, 9176 <ll_wl_remove+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
    916e:	260c      	movs	r6, #12
#if defined(CONFIG_BT_CTLR_PRIVACY)
	return wl_remove(addr);
#else
	return filter_remove(&wl_filter, addr->type, addr->a.val);
#endif /* CONFIG_BT_CTLR_PRIVACY */
}
    9170:	4630      	mov	r0, r6
    9172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
    9176:	f7ff fc1b 	bl	89b0 <radio_scan_filter_pol_get>
    917a:	07c1      	lsls	r1, r0, #31
    917c:	d4f7      	bmi.n	916e <ll_wl_remove+0xe>
	if (addr->type == ADDR_TYPE_ANON) {
    917e:	f897 8000 	ldrb.w	r8, [r7]
    9182:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    9186:	d102      	bne.n	918e <ll_wl_remove+0x2e>
		wl_anon = 0;
    9188:	4b16      	ldr	r3, [pc, #88]	; (91e4 <ll_wl_remove+0x84>)
    918a:	701e      	strb	r6, [r3, #0]
		return 0;
    918c:	e7f0      	b.n	9170 <ll_wl_remove+0x10>
	if (!filter->enable_bitmask) {
    918e:	4c16      	ldr	r4, [pc, #88]	; (91e8 <ll_wl_remove+0x88>)
    9190:	7823      	ldrb	r3, [r4, #0]
    9192:	b133      	cbz	r3, 91a2 <ll_wl_remove+0x42>
    9194:	2508      	movs	r5, #8
	return filter_remove(&wl_filter, addr->type, addr->a.val);
    9196:	3701      	adds	r7, #1
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    9198:	f04f 0906 	mov.w	r9, #6
	while (index--) {
    919c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    91a0:	d201      	bcs.n	91a6 <ll_wl_remove+0x46>
		return BT_HCI_ERR_INVALID_PARAM;
    91a2:	2612      	movs	r6, #18
    91a4:	e7e4      	b.n	9170 <ll_wl_remove+0x10>
		if ((filter->enable_bitmask & BIT(index)) &&
    91a6:	7823      	ldrb	r3, [r4, #0]
    91a8:	40eb      	lsrs	r3, r5
    91aa:	07da      	lsls	r2, r3, #31
    91ac:	d5f6      	bpl.n	919c <ll_wl_remove+0x3c>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
    91ae:	7863      	ldrb	r3, [r4, #1]
    91b0:	412b      	asrs	r3, r5
    91b2:	ea83 0308 	eor.w	r3, r3, r8
		if ((filter->enable_bitmask & BIT(index)) &&
    91b6:	07db      	lsls	r3, r3, #31
    91b8:	d4f0      	bmi.n	919c <ll_wl_remove+0x3c>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
    91ba:	fb09 4005 	mla	r0, r9, r5, r4
    91be:	2206      	movs	r2, #6
    91c0:	4639      	mov	r1, r7
    91c2:	3002      	adds	r0, #2
    91c4:	f7f7 fa03 	bl	5ce <memcmp>
		     (addr_type & 0x01)) &&
    91c8:	2800      	cmp	r0, #0
    91ca:	d1e7      	bne.n	919c <ll_wl_remove+0x3c>
			filter->enable_bitmask &= ~BIT(index);
    91cc:	2301      	movs	r3, #1
    91ce:	40ab      	lsls	r3, r5
    91d0:	7822      	ldrb	r2, [r4, #0]
    91d2:	43db      	mvns	r3, r3
    91d4:	b2db      	uxtb	r3, r3
    91d6:	401a      	ands	r2, r3
    91d8:	7022      	strb	r2, [r4, #0]
			filter->addr_type_bitmask &= ~BIT(index);
    91da:	7862      	ldrb	r2, [r4, #1]
    91dc:	4013      	ands	r3, r2
    91de:	7063      	strb	r3, [r4, #1]
    91e0:	e7c6      	b.n	9170 <ll_wl_remove+0x10>
    91e2:	bf00      	nop
    91e4:	2000356c 	.word	0x2000356c
    91e8:	20001d36 	.word	0x20001d36

000091ec <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
	wl_anon = 0;
    91ec:	4a03      	ldr	r2, [pc, #12]	; (91fc <ll_filter_reset+0x10>)
    91ee:	2300      	movs	r3, #0
    91f0:	7013      	strb	r3, [r2, #0]
	filter->enable_bitmask = 0;
    91f2:	4a03      	ldr	r2, [pc, #12]	; (9200 <ll_filter_reset+0x14>)
    91f4:	7013      	strb	r3, [r2, #0]
	filter->addr_type_bitmask = 0;
    91f6:	7053      	strb	r3, [r2, #1]
    91f8:	4770      	bx	lr
    91fa:	bf00      	nop
    91fc:	2000356c 	.word	0x2000356c
    9200:	20001d36 	.word	0x20001d36

00009204 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    9204:	4b05      	ldr	r3, [pc, #20]	; (921c <cntr_init+0x18>)
    9206:	2200      	movs	r2, #0
    9208:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    920c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    9210:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    9214:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    9218:	4770      	bx	lr
    921a:	bf00      	nop
    921c:	4000b000 	.word	0x4000b000

00009220 <cntr_start>:
#endif
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    9220:	4a04      	ldr	r2, [pc, #16]	; (9234 <cntr_start+0x14>)
    9222:	7813      	ldrb	r3, [r2, #0]
    9224:	1c59      	adds	r1, r3, #1
    9226:	7011      	strb	r1, [r2, #0]
    9228:	2001      	movs	r0, #1
    922a:	b913      	cbnz	r3, 9232 <cntr_start+0x12>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    922c:	4a02      	ldr	r2, [pc, #8]	; (9238 <cntr_start+0x18>)
    922e:	6010      	str	r0, [r2, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    9230:	4618      	mov	r0, r3
}
    9232:	4770      	bx	lr
    9234:	20001d68 	.word	0x20001d68
    9238:	4000b000 	.word	0x4000b000

0000923c <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    923c:	4b09      	ldr	r3, [pc, #36]	; (9264 <cntr_stop+0x28>)
    923e:	7818      	ldrb	r0, [r3, #0]
    9240:	b928      	cbnz	r0, 924e <cntr_stop+0x12>
    9242:	4040      	eors	r0, r0
    9244:	f380 8811 	msr	BASEPRI, r0
    9248:	f04f 0004 	mov.w	r0, #4
    924c:	df02      	svc	2

	if (--_refcount) {
    924e:	3801      	subs	r0, #1
    9250:	b2c0      	uxtb	r0, r0
    9252:	7018      	strb	r0, [r3, #0]
    9254:	2301      	movs	r3, #1
    9256:	b910      	cbnz	r0, 925e <cntr_stop+0x22>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    9258:	4a03      	ldr	r2, [pc, #12]	; (9268 <cntr_stop+0x2c>)
    925a:	6053      	str	r3, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	return 0;
    925c:	4770      	bx	lr
		return 1;
    925e:	4618      	mov	r0, r3
}
    9260:	4770      	bx	lr
    9262:	bf00      	nop
    9264:	20001d68 	.word	0x20001d68
    9268:	4000b000 	.word	0x4000b000

0000926c <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    926c:	4b01      	ldr	r3, [pc, #4]	; (9274 <cntr_cnt_get+0x8>)
    926e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    9272:	4770      	bx	lr
    9274:	4000b000 	.word	0x4000b000

00009278 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    9278:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    927c:	4b01      	ldr	r3, [pc, #4]	; (9284 <cntr_cmp_set+0xc>)
    927e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    9282:	4770      	bx	lr
    9284:	4000b000 	.word	0x4000b000

00009288 <do_ecb>:
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
	do {
		NRF_ECB->TASKS_STOPECB = 1;
    9288:	4b11      	ldr	r3, [pc, #68]	; (92d0 <do_ecb+0x48>)
{
    928a:	b570      	push	{r4, r5, r6, lr}
		NRF_ECB->TASKS_STOPECB = 1;
    928c:	2101      	movs	r1, #1
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    928e:	2500      	movs	r5, #0
    9290:	461a      	mov	r2, r3
		NRF_ECB->TASKS_STOPECB = 1;
    9292:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    9294:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    9298:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    929c:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    92a0:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
		NRF_ECB_regw_sideeffects_TASKS_STARTECB();
#endif
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    92a2:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
    92a6:	b934      	cbnz	r4, 92b6 <do_ecb+0x2e>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    92a8:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    92ac:	b91c      	cbnz	r4, 92b6 <do_ecb+0x2e>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    92ae:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    92b2:	2c00      	cmp	r4, #0
    92b4:	d1f5      	bne.n	92a2 <do_ecb+0x1a>
			__WFE();
#else
			/*__WFE();*/
#endif
		}
		NRF_ECB->TASKS_STOPECB = 1;
    92b6:	6051      	str	r1, [r2, #4]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
		NRF_ECB_regw_sideeffects_TASKS_STOPECB();
#endif
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    92b8:	f8d2 4104 	ldr.w	r4, [r2, #260]	; 0x104
    92bc:	2c00      	cmp	r4, #0
    92be:	d1e8      	bne.n	9292 <do_ecb+0xa>
    92c0:	f8d2 6504 	ldr.w	r6, [r2, #1284]	; 0x504
    92c4:	2e00      	cmp	r6, #0
    92c6:	d0e4      	beq.n	9292 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
    92c8:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
    92cc:	bd70      	pop	{r4, r5, r6, pc}
    92ce:	bf00      	nop
    92d0:	4000e000 	.word	0x4000e000

000092d4 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    92d4:	b570      	push	{r4, r5, r6, lr}
    92d6:	b08c      	sub	sp, #48	; 0x30
    92d8:	460e      	mov	r6, r1
    92da:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    92dc:	4601      	mov	r1, r0
    92de:	2210      	movs	r2, #16
    92e0:	4668      	mov	r0, sp
{
    92e2:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    92e4:	f7f9 fcd8 	bl	2c98 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    92e8:	2210      	movs	r2, #16
    92ea:	eb0d 0002 	add.w	r0, sp, r2
    92ee:	4631      	mov	r1, r6
    92f0:	f7f9 fcd2 	bl	2c98 <mem_rcopy>

	do_ecb(&ecb);
    92f4:	4668      	mov	r0, sp
    92f6:	f7ff ffc7 	bl	9288 <do_ecb>

	if (cipher_text_le) {
    92fa:	b125      	cbz	r5, 9306 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    92fc:	2210      	movs	r2, #16
    92fe:	a908      	add	r1, sp, #32
    9300:	4628      	mov	r0, r5
    9302:	f7f9 fcc9 	bl	2c98 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    9306:	b124      	cbz	r4, 9312 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    9308:	2210      	movs	r2, #16
    930a:	a908      	add	r1, sp, #32
    930c:	4620      	mov	r0, r4
    930e:	f7f7 f973 	bl	5f8 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    9312:	b00c      	add	sp, #48	; 0x30
    9314:	bd70      	pop	{r4, r5, r6, pc}
	...

00009318 <hal_radio_enable_on_tick_ppi_config_and_enable>:
#define HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX \
	((u32_t)&(NRF_RADIO->TASKS_RXEN))

static inline void hal_radio_enable_on_tick_ppi_config_and_enable(u8_t trx)
{
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_EVT =
    9318:	4b07      	ldr	r3, [pc, #28]	; (9338 <hal_radio_enable_on_tick_ppi_config_and_enable+0x20>)
    931a:	4a08      	ldr	r2, [pc, #32]	; (933c <hal_radio_enable_on_tick_ppi_config_and_enable+0x24>)
    931c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
		HAL_RADIO_ENABLE_ON_TICK_PPI_EVT;
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
		(trx) ? HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_TX :
    9320:	4907      	ldr	r1, [pc, #28]	; (9340 <hal_radio_enable_on_tick_ppi_config_and_enable+0x28>)
    9322:	4a08      	ldr	r2, [pc, #32]	; (9344 <hal_radio_enable_on_tick_ppi_config_and_enable+0x2c>)
    9324:	2800      	cmp	r0, #0
    9326:	bf14      	ite	ne
    9328:	4610      	movne	r0, r2
    932a:	4608      	moveq	r0, r1
			HAL_RADIO_ENABLE_ON_TICK_PPI_TASK_RX;
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    932c:	2201      	movs	r2, #1
	HAL_RADIO_ENABLE_ON_TICK_PPI_REGISTER_TASK =
    932e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_PPI->CHENSET = HAL_RADIO_ENABLE_ON_TICK_PPI_ENABLE;
    9332:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9336:	4770      	bx	lr
    9338:	4001f000 	.word	0x4001f000
    933c:	40008140 	.word	0x40008140
    9340:	40001004 	.word	0x40001004
    9344:	40001000 	.word	0x40001000

00009348 <sw_switch.isra.9>:
}

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static u8_t sw_tifs_toggle;

static void sw_switch(u8_t dir, u8_t phy_curr, u8_t flags_curr, u8_t phy_next,
    9348:	b5f0      	push	{r4, r5, r6, r7, lr}
		      u8_t flags_next)
{
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    934a:	4e2c      	ldr	r6, [pc, #176]	; (93fc <sw_switch.isra.9+0xb4>)
	u8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	u32_t delay;

	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    934c:	4f2c      	ldr	r7, [pc, #176]	; (9400 <sw_switch.isra.9+0xb8>)
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    934e:	7835      	ldrb	r5, [r6, #0]
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_EVT =
    9350:	4b2c      	ldr	r3, [pc, #176]	; (9404 <sw_switch.isra.9+0xbc>)
    9352:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_EVT;
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
	    HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(sw_tifs_toggle);
    9356:	b22b      	sxth	r3, r5
    9358:	00dc      	lsls	r4, r3, #3
    935a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    935e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
	HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_REGISTER_TASK =
    9362:	f8c7 4564 	str.w	r4, [r7, #1380]	; 0x564
	u8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    9366:	f105 040b 	add.w	r4, r5, #11
    936a:	b2e4      	uxtb	r4, r4
    936c:	00e4      	lsls	r4, r4, #3

	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc);
    936e:	f5a7 37af 	sub.w	r7, r7, #89600	; 0x15e00
    9372:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    9376:	3fc0      	subs	r7, #192	; 0xc0
    9378:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    937c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi) =
    9380:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510

	if (dir) {
    9384:	2800      	cmp	r0, #0
    9386:	d034      	beq.n	93f2 <sw_switch.isra.9+0xaa>
static inline u32_t hal_radio_tx_ready_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
    9388:	f649 77c4 	movw	r7, #40900	; 0x9fc4
    938c:	f649 4040 	movw	r0, #40000	; 0x9c40
    9390:	2a02      	cmp	r2, #2
    9392:	bf0c      	ite	eq
    9394:	4602      	moveq	r2, r0
    9396:	463a      	movne	r2, r7
static inline u32_t hal_radio_rx_chain_delay_ns_get(u8_t phy, u8_t flags)
{
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
    9398:	f242 47b8 	movw	r7, #9400	; 0x24b8
    939c:	f241 3088 	movw	r0, #5000	; 0x1388
    93a0:	2902      	cmp	r1, #2
    93a2:	bf18      	it	ne
    93a4:	4638      	movne	r0, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
    93a6:	f502 71fa 	add.w	r1, r2, #500	; 0x1f4
    93aa:	4401      	add	r1, r0
    93ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    93b0:	fbb1 f1f2 	udiv	r1, r1, r2
	((u32_t)&(NRF_RADIO->TASKS_RXEN))


static inline void hal_radio_txen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    93b4:	4a14      	ldr	r2, [pc, #80]	; (9408 <sw_switch.isra.9+0xc0>)
    93b6:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    93ba:	009b      	lsls	r3, r3, #2
    93bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    93c0:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
		SW_SWITCH_TIMER->CC[cc]) {
    93c4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
    93c8:	428a      	cmp	r2, r1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    93ca:	bf8b      	itete	hi
    93cc:	f8d3 2540 	ldrhi.w	r2, [r3, #1344]	; 0x540
	} else {
		SW_SWITCH_TIMER->CC[cc] = 1;
    93d0:	2201      	movls	r2, #1
		SW_SWITCH_TIMER->CC[cc] -= delay;
    93d2:	1a51      	subhi	r1, r2, r1
		SW_SWITCH_TIMER->CC[cc] = 1;
    93d4:	f8c3 2540 	strls.w	r2, [r3, #1344]	; 0x540
		SW_SWITCH_TIMER->CC[cc] -= delay;
    93d8:	bf88      	it	hi
    93da:	f8c3 1540 	strhi.w	r1, [r3, #1344]	; 0x540
	}

	NRF_PPI->CHENSET =
    93de:	4b08      	ldr	r3, [pc, #32]	; (9400 <sw_switch.isra.9+0xb8>)
    93e0:	f44f 6290 	mov.w	r2, #1152	; 0x480
    93e4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1;
    93e8:	1c6b      	adds	r3, r5, #1
	sw_tifs_toggle &= 1;
    93ea:	f003 0301 	and.w	r3, r3, #1
    93ee:	7033      	strb	r3, [r6, #0]
    93f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_TX;
}

static inline void hal_radio_rxen_on_sw_switch(u8_t ppi)
{
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi) =
    93f2:	4a06      	ldr	r2, [pc, #24]	; (940c <sw_switch.isra.9+0xc4>)
    93f4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
    93f8:	212c      	movs	r1, #44	; 0x2c
    93fa:	e7de      	b.n	93ba <sw_switch.isra.9+0x72>
    93fc:	20001f88 	.word	0x20001f88
    9400:	4001f000 	.word	0x4001f000
    9404:	4000110c 	.word	0x4000110c
    9408:	40001000 	.word	0x40001000
    940c:	40001004 	.word	0x40001004

00009410 <isr_radio>:
	if (sfp_radio_isr) {
    9410:	4b02      	ldr	r3, [pc, #8]	; (941c <isr_radio+0xc>)
    9412:	681b      	ldr	r3, [r3, #0]
    9414:	b103      	cbz	r3, 9418 <isr_radio+0x8>
		sfp_radio_isr();
    9416:	4718      	bx	r3
    9418:	4770      	bx	lr
    941a:	bf00      	nop
    941c:	20001f84 	.word	0x20001f84

00009420 <radio_isr_set>:
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    9420:	4b06      	ldr	r3, [pc, #24]	; (943c <radio_isr_set+0x1c>)
    9422:	6018      	str	r0, [r3, #0]
	NRF_RADIO->INTENSET = (0 |
    9424:	4b06      	ldr	r3, [pc, #24]	; (9440 <radio_isr_set+0x20>)
    9426:	2210      	movs	r2, #16
    9428:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    942c:	4b05      	ldr	r3, [pc, #20]	; (9444 <radio_isr_set+0x24>)
    942e:	2202      	movs	r2, #2
    9430:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    9434:	2001      	movs	r0, #1
    9436:	f7f7 bc59 	b.w	cec <_arch_irq_enable>
    943a:	bf00      	nop
    943c:	20001f84 	.word	0x20001f84
    9440:	40001000 	.word	0x40001000
    9444:	e000e100 	.word	0xe000e100

00009448 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    9448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    944c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    9450:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    9452:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    9456:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    945a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    945e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    9462:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    9466:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    946a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    946e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    9472:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    9476:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    947a:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    947e:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    9482:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    9486:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    948a:	4770      	bx	lr

0000948c <radio_reset>:
{
    948c:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    948e:	2001      	movs	r0, #1
    9490:	f7f7 fc3c 	bl	d0c <_arch_irq_disable>
	NRF_RADIO->POWER =
    9494:	4b08      	ldr	r3, [pc, #32]	; (94b8 <radio_reset+0x2c>)
    9496:	2200      	movs	r2, #0
    9498:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	NRF_RADIO->POWER =
    949c:	2201      	movs	r2, #1
    949e:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    94a2:	4a06      	ldr	r2, [pc, #24]	; (94bc <radio_reset+0x30>)
    94a4:	6813      	ldr	r3, [r2, #0]
					 0xfffffffe) | 0x01000000;
    94a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    94aa:	f023 0301 	bic.w	r3, r3, #1
    94ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile u32_t *)0x40001774 = ((*(volatile u32_t *)0x40001774) &
    94b2:	6013      	str	r3, [r2, #0]
    94b4:	bd08      	pop	{r3, pc}
    94b6:	bf00      	nop
    94b8:	40001000 	.word	0x40001000
    94bc:	40001774 	.word	0x40001774

000094c0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    94c0:	4b06      	ldr	r3, [pc, #24]	; (94dc <radio_phy_set+0x1c>)
	switch (phy) {
    94c2:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    94c4:	bf0c      	ite	eq
    94c6:	2204      	moveq	r2, #4
    94c8:	2203      	movne	r2, #3
    94ca:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    94ce:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    94d2:	f042 0201 	orr.w	r2, r2, #1
    94d6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    94da:	4770      	bx	lr
    94dc:	40001000 	.word	0x40001000

000094e0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = power;
    94e0:	4b01      	ldr	r3, [pc, #4]	; (94e8 <radio_tx_power_set+0x8>)
    94e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    94e6:	4770      	bx	lr
    94e8:	40001000 	.word	0x40001000

000094ec <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
    94ec:	4b01      	ldr	r3, [pc, #4]	; (94f4 <radio_freq_chan_set+0x8>)
    94ee:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    94f2:	4770      	bx	lr
    94f4:	40001000 	.word	0x40001000

000094f8 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
    94f8:	4b07      	ldr	r3, [pc, #28]	; (9518 <radio_whiten_iv_set+0x20>)
    94fa:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    94fe:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    9502:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    9506:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    950a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    950e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    9512:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    9516:	4770      	bx	lr
    9518:	40001000 	.word	0x40001000

0000951c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
    951c:	4a0a      	ldr	r2, [pc, #40]	; (9548 <radio_aa_set+0x2c>)
    951e:	2300      	movs	r3, #0
    9520:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
    9524:	2301      	movs	r3, #1
    9526:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
    952a:	78c3      	ldrb	r3, [r0, #3]
    952c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    9530:	7843      	ldrb	r3, [r0, #1]
    9532:	7881      	ldrb	r1, [r0, #2]
    9534:	041b      	lsls	r3, r3, #16
    9536:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    953a:	7801      	ldrb	r1, [r0, #0]
    953c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9540:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    9544:	4770      	bx	lr
    9546:	bf00      	nop
    9548:	40001000 	.word	0x40001000

0000954c <radio_pkt_configure>:
	switch (phy) {
    954c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    9550:	2b02      	cmp	r3, #2
{
    9552:	b510      	push	{r4, lr}
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    9554:	bf0c      	ite	eq
    9556:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
    955a:	2400      	movne	r4, #0
	if (dc) {
    955c:	07d3      	lsls	r3, r2, #31
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    955e:	f1c0 0308 	rsb	r3, r0, #8
    9562:	ea4f 4303 	mov.w	r3, r3, lsl #16
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    9566:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
    956a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    956e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    9572:	4a0b      	ldr	r2, [pc, #44]	; (95a0 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
    9574:	ea43 0300 	orr.w	r3, r3, r0
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    9578:	bf48      	it	mi
    957a:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			    RADIO_PCNF0_S1LEN_Msk) |
    957e:	4323      	orrs	r3, r4
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    9580:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    9584:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    9588:	4b06      	ldr	r3, [pc, #24]	; (95a4 <radio_pkt_configure+0x58>)
    958a:	4003      	ands	r3, r0
    958c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    9590:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    9594:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    9598:	4319      	orrs	r1, r3
    959a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    959e:	bd10      	pop	{r4, pc}
    95a0:	40001000 	.word	0x40001000
    95a4:	fef80000 	.word	0xfef80000

000095a8 <radio_pkt_rx_set>:
    95a8:	4b01      	ldr	r3, [pc, #4]	; (95b0 <radio_pkt_rx_set+0x8>)
    95aa:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    95ae:	4770      	bx	lr
    95b0:	40001000 	.word	0x40001000

000095b4 <radio_pkt_tx_set>:
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    95b4:	4b01      	ldr	r3, [pc, #4]	; (95bc <radio_pkt_tx_set+0x8>)
    95b6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    95ba:	4770      	bx	lr
    95bc:	40001000 	.word	0x40001000

000095c0 <radio_tx_ready_delay_get>:
	switch (phy) {
    95c0:	2802      	cmp	r0, #2
}
    95c2:	bf0c      	ite	eq
    95c4:	2028      	moveq	r0, #40	; 0x28
    95c6:	2029      	movne	r0, #41	; 0x29
    95c8:	4770      	bx	lr

000095ca <radio_tx_chain_delay_get>:
}
    95ca:	2001      	movs	r0, #1
    95cc:	4770      	bx	lr

000095ce <radio_rx_ready_delay_get>:
}
    95ce:	2029      	movs	r0, #41	; 0x29
    95d0:	4770      	bx	lr

000095d2 <radio_rx_chain_delay_get>:
	switch (phy) {
    95d2:	2802      	cmp	r0, #2
}
    95d4:	bf0c      	ite	eq
    95d6:	2005      	moveq	r0, #5
    95d8:	200a      	movne	r0, #10
    95da:	4770      	bx	lr

000095dc <radio_rx_enable>:
	NRF_RADIO->TASKS_RXEN = 1;
    95dc:	4b01      	ldr	r3, [pc, #4]	; (95e4 <radio_rx_enable+0x8>)
    95de:	2201      	movs	r2, #1
    95e0:	605a      	str	r2, [r3, #4]
    95e2:	4770      	bx	lr
    95e4:	40001000 	.word	0x40001000

000095e8 <radio_tx_enable>:
	NRF_RADIO->TASKS_TXEN = 1;
    95e8:	4b01      	ldr	r3, [pc, #4]	; (95f0 <radio_tx_enable+0x8>)
    95ea:	2201      	movs	r2, #1
    95ec:	601a      	str	r2, [r3, #0]
    95ee:	4770      	bx	lr
    95f0:	40001000 	.word	0x40001000

000095f4 <radio_disable>:
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    95f4:	4a07      	ldr	r2, [pc, #28]	; (9614 <radio_disable+0x20>)
    95f6:	f44f 6390 	mov.w	r3, #1152	; 0x480
    95fa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(0)].DIS = 1;
    95fe:	2301      	movs	r3, #1
    9600:	6053      	str	r3, [r2, #4]
	NRF_PPI->TASKS_CHG[SW_SWITCH_TIMER_TASK_GROUP(1)].DIS = 1;
    9602:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
    9604:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    9608:	2100      	movs	r1, #0
    960a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    960e:	6113      	str	r3, [r2, #16]
    9610:	4770      	bx	lr
    9612:	bf00      	nop
    9614:	4001f000 	.word	0x4001f000

00009618 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
    9618:	4b04      	ldr	r3, [pc, #16]	; (962c <radio_status_reset+0x14>)
    961a:	2200      	movs	r2, #0
    961c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    9620:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    9624:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    9628:	4770      	bx	lr
    962a:	bf00      	nop
    962c:	40001000 	.word	0x40001000

00009630 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
    9630:	4b03      	ldr	r3, [pc, #12]	; (9640 <radio_is_ready+0x10>)
    9632:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    9636:	3000      	adds	r0, #0
    9638:	bf18      	it	ne
    963a:	2001      	movne	r0, #1
    963c:	4770      	bx	lr
    963e:	bf00      	nop
    9640:	40001000 	.word	0x40001000

00009644 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
    9644:	4b03      	ldr	r3, [pc, #12]	; (9654 <radio_is_done+0x10>)
    9646:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    964a:	3000      	adds	r0, #0
    964c:	bf18      	it	ne
    964e:	2001      	movne	r0, #1
    9650:	4770      	bx	lr
    9652:	bf00      	nop
    9654:	40001000 	.word	0x40001000

00009658 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
    9658:	4b03      	ldr	r3, [pc, #12]	; (9668 <radio_is_idle+0x10>)
    965a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    965e:	fab0 f080 	clz	r0, r0
    9662:	0940      	lsrs	r0, r0, #5
    9664:	4770      	bx	lr
    9666:	bf00      	nop
    9668:	40001000 	.word	0x40001000

0000966c <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
    966c:	4b04      	ldr	r3, [pc, #16]	; (9680 <radio_crc_configure+0x14>)
    966e:	f240 1203 	movw	r2, #259	; 0x103
    9672:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
    9676:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    967a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    967e:	4770      	bx	lr
    9680:	40001000 	.word	0x40001000

00009684 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
    9684:	4b03      	ldr	r3, [pc, #12]	; (9694 <radio_crc_is_valid+0x10>)
    9686:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    968a:	3000      	adds	r0, #0
    968c:	bf18      	it	ne
    968e:	2001      	movne	r0, #1
    9690:	4770      	bx	lr
    9692:	bf00      	nop
    9694:	40001000 	.word	0x40001000

00009698 <radio_pkt_empty_get>:
}
    9698:	4800      	ldr	r0, [pc, #0]	; (969c <radio_pkt_empty_get+0x4>)
    969a:	4770      	bx	lr
    969c:	20001e78 	.word	0x20001e78

000096a0 <radio_pkt_scratch_get>:
}
    96a0:	4800      	ldr	r0, [pc, #0]	; (96a4 <radio_pkt_scratch_get+0x4>)
    96a2:	4770      	bx	lr
    96a4:	20001e7c 	.word	0x20001e7c

000096a8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    96a8:	4b04      	ldr	r3, [pc, #16]	; (96bc <radio_switch_complete_and_rx+0x14>)
    96aa:	2203      	movs	r2, #3
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
    96ac:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    96ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
    96b2:	4602      	mov	r2, r0
    96b4:	4608      	mov	r0, r1
    96b6:	f7ff be47 	b.w	9348 <sw_switch.isra.9>
    96ba:	bf00      	nop
    96bc:	40001000 	.word	0x40001000

000096c0 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    96c0:	4b03      	ldr	r3, [pc, #12]	; (96d0 <radio_switch_complete_and_tx+0x10>)
    96c2:	2103      	movs	r1, #3
    96c4:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
    96c8:	4601      	mov	r1, r0
    96ca:	2001      	movs	r0, #1
    96cc:	f7ff be3c 	b.w	9348 <sw_switch.isra.9>
    96d0:	40001000 	.word	0x40001000

000096d4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    96d4:	4b05      	ldr	r3, [pc, #20]	; (96ec <radio_switch_complete_and_disable+0x18>)
    96d6:	2203      	movs	r2, #3
    96d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_PPI->CHENCLR = HAL_SW_SWITCH_TIMER_CLEAR_PPI_DISABLE |
    96dc:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    96e0:	f44f 6290 	mov.w	r2, #1152	; 0x480
    96e4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    96e8:	4770      	bx	lr
    96ea:	bf00      	nop
    96ec:	40001000 	.word	0x40001000

000096f0 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    96f0:	4a03      	ldr	r2, [pc, #12]	; (9700 <radio_rssi_measure+0x10>)
    96f2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    96f6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    96fa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    96fe:	4770      	bx	lr
    9700:	40001000 	.word	0x40001000

00009704 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    9704:	4b01      	ldr	r3, [pc, #4]	; (970c <radio_rssi_get+0x8>)
    9706:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    970a:	4770      	bx	lr
    970c:	40001000 	.word	0x40001000

00009710 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    9710:	4b02      	ldr	r3, [pc, #8]	; (971c <radio_rssi_status_reset+0xc>)
    9712:	2200      	movs	r2, #0
    9714:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    9718:	4770      	bx	lr
    971a:	bf00      	nop
    971c:	40001000 	.word	0x40001000

00009720 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    9720:	4b03      	ldr	r3, [pc, #12]	; (9730 <radio_rssi_is_ready+0x10>)
    9722:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    9726:	3000      	adds	r0, #0
    9728:	bf18      	it	ne
    972a:	2001      	movne	r0, #1
    972c:	4770      	bx	lr
    972e:	bf00      	nop
    9730:	40001000 	.word	0x40001000

00009734 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    9734:	b530      	push	{r4, r5, lr}
    9736:	2400      	movs	r4, #0
    9738:	00a3      	lsls	r3, r4, #2
    973a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    973e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	u8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
			((u32_t)bdaddr[2] << 16) |
			((u32_t)bdaddr[1] << 8) |
    9742:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    9744:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    9748:	3401      	adds	r4, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    974a:	8895      	ldrh	r5, [r2, #4]
    974c:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0; index < 8; index++) {
    9750:	2c08      	cmp	r4, #8
		bdaddr += 6;
    9752:	f102 0206 	add.w	r2, r2, #6
	for (index = 0; index < 8; index++) {
    9756:	d1ef      	bne.n	9738 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    9758:	4b02      	ldr	r3, [pc, #8]	; (9764 <radio_filter_configure+0x30>)
    975a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    975e:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    9762:	bd30      	pop	{r4, r5, pc}
    9764:	40001000 	.word	0x40001000

00009768 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    9768:	4a03      	ldr	r2, [pc, #12]	; (9778 <radio_filter_disable+0x10>)
    976a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    976e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    9772:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    9776:	4770      	bx	lr
    9778:	40001000 	.word	0x40001000

0000977c <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    977c:	4b02      	ldr	r3, [pc, #8]	; (9788 <radio_filter_status_reset+0xc>)
    977e:	2200      	movs	r2, #0
    9780:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    9784:	4770      	bx	lr
    9786:	bf00      	nop
    9788:	40001000 	.word	0x40001000

0000978c <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    978c:	4b03      	ldr	r3, [pc, #12]	; (979c <radio_filter_has_match+0x10>)
    978e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    9792:	3000      	adds	r0, #0
    9794:	bf18      	it	ne
    9796:	2001      	movne	r0, #1
    9798:	4770      	bx	lr
    979a:	bf00      	nop
    979c:	40001000 	.word	0x40001000

000097a0 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    97a0:	4b01      	ldr	r3, [pc, #4]	; (97a8 <radio_filter_match_get+0x8>)
    97a2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    97a6:	4770      	bx	lr
    97a8:	40001000 	.word	0x40001000

000097ac <radio_tmr_status_reset>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
}

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    97ac:	4b05      	ldr	r3, [pc, #20]	; (97c4 <radio_tmr_status_reset+0x18>)
    97ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    97b2:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
#endif

	NRF_PPI->CHENCLR =
    97b6:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    97ba:	227f      	movs	r2, #127	; 0x7f
    97bc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    97c0:	4770      	bx	lr
    97c2:	bf00      	nop
    97c4:	4000b000 	.word	0x4000b000

000097c8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	SW_SWITCH_TIMER->CC[SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle)] = tifs;
    97c8:	4b03      	ldr	r3, [pc, #12]	; (97d8 <radio_tmr_tifs_set+0x10>)
    97ca:	4a04      	ldr	r2, [pc, #16]	; (97dc <radio_tmr_tifs_set+0x14>)
    97cc:	781b      	ldrb	r3, [r3, #0]
    97ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    97d2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    97d6:	4770      	bx	lr
    97d8:	20001f88 	.word	0x20001f88
    97dc:	40009000 	.word	0x40009000

000097e0 <radio_tmr_start>:
#endif
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    97e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    97e4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    97e8:	4c30      	ldr	r4, [pc, #192]	; (98ac <radio_tmr_start+0xcc>)
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    97ea:	4d31      	ldr	r5, [pc, #196]	; (98b0 <radio_tmr_start+0xd0>)
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    97ec:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    97f0:	42a3      	cmp	r3, r4
		remainder += 30517578UL;
    97f2:	bf88      	it	hi
    97f4:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000

	EVENT_TIMER->TASKS_CLEAR = 1;
    97f8:	4b2e      	ldr	r3, [pc, #184]	; (98b4 <radio_tmr_start+0xd4>)

#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(EVENT_TIMER_NBR);
#endif

	NRF_RTC0->CC[2] = ticks_start;
    97fa:	4c2f      	ldr	r4, [pc, #188]	; (98b8 <radio_tmr_start+0xd8>)
		remainder += 30517578UL;
    97fc:	bf82      	ittt	hi
    97fe:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
    9802:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
		remainder += 30517578UL;
    9806:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	EVENT_TIMER->TASKS_CLEAR = 1;
    980a:	2601      	movs	r6, #1
	remainder /= 1000000UL;
    980c:	fbb2 f5f5 	udiv	r5, r2, r5
	EVENT_TIMER->MODE = 0;
    9810:	2700      	movs	r7, #0
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    9812:	2202      	movs	r2, #2
	EVENT_TIMER->PRESCALER = 4;
    9814:	f04f 0804 	mov.w	r8, #4
	EVENT_TIMER->TASKS_CLEAR = 1;
    9818:	60de      	str	r6, [r3, #12]
	EVENT_TIMER->MODE = 0;
    981a:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
    981e:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
    9822:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	EVENT_TIMER->CC[0] = remainder;
    9826:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
	NRF_RTC0->CC[2] = ticks_start;
    982a:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    982e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    9832:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344

	HAL_EVENT_TIMER_START_PPI_REGISTER_EVT = HAL_EVENT_TIMER_START_EVT;
    9836:	f504 34a0 	add.w	r4, r4, #81920	; 0x14000
    983a:	4920      	ldr	r1, [pc, #128]	; (98bc <radio_tmr_start+0xdc>)
    983c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
	HAL_EVENT_TIMER_START_PPI_REGISTER_TASK = HAL_EVENT_TIMER_START_TASK;
    9840:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
	NRF_PPI->CHENSET = HAL_EVENT_TIMER_START_PPI_ENABLE;
    9844:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects_CHEN();
#endif

	hal_radio_enable_on_tick_ppi_config_and_enable(trx);
    9848:	f7ff fd66 	bl	9318 <hal_radio_enable_on_tick_ppi_config_and_enable>
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	SW_SWITCH_TIMER->TASKS_CLEAR = 1;
    984c:	4b1c      	ldr	r3, [pc, #112]	; (98c0 <radio_tmr_start+0xe0>)
    984e:	60de      	str	r6, [r3, #12]
	SW_SWITCH_TIMER->MODE = 0;
    9850:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
    9854:	f8c3 8510 	str.w	r8, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
    9858:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
	SW_SWITCH_TIMER->TASKS_START = 1;
    985c:	601e      	str	r6, [r3, #0]
	NRF_TIMER_regw_sideeffects_TASKS_CLEAR(SW_SWITCH_TIMER_NBR);
	NRF_TIMER_regw_sideeffects_TASKS_START(SW_SWITCH_TIMER_NBR);
#endif
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_EVT =
    985e:	f5a3 43fd 	sub.w	r3, r3, #32384	; 0x7e80
    9862:	3b74      	subs	r3, #116	; 0x74
    9864:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
		HAL_SW_SWITCH_TIMER_CLEAR_PPI_EVT;
	HAL_SW_SWITCH_TIMER_CLEAR_PPI_REGISTER_TASK =
    9868:	f503 43fe 	add.w	r3, r3, #32512	; 0x7f00
    986c:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || !defined(CONFIG_SOC_NRF52840)
	/* NOTE: PPI channel group disable is setup explicitly in sw_switch
	 *       function when Coded PHY on nRF52840 is supported.
	 */
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    9870:	f503 739a 	add.w	r3, r3, #308	; 0x134
    9874:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(0));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) =
    9878:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    987c:	33c4      	adds	r3, #196	; 0xc4
    987e:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(0);

	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    9882:	f5a3 33af 	sub.w	r3, r3, #89600	; 0x15e00
    9886:	3bc0      	subs	r3, #192	; 0xc0
    9888:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(
			SW_SWITCH_TIMER_EVTS_COMP(1));
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(1)) =
    988c:	f503 33af 	add.w	r3, r3, #89600	; 0x15e00
    9890:	33c8      	adds	r3, #200	; 0xc8
    9892:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(1);
#endif /* !CONFIG_BT_CTLR_PHY_CODED || !CONFIG_SOC_NRF52840 */

	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    9896:	f44f 6310 	mov.w	r3, #2304	; 0x900
    989a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    989e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    98a2:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_RTC0_regw_sideeffects();
	NRF_PPI_regw_sideeffects();
#endif
	return remainder;
}
    98a6:	4628      	mov	r0, r5
    98a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98ac:	7ff0bdbf 	.word	0x7ff0bdbf
    98b0:	000f4240 	.word	0x000f4240
    98b4:	40008000 	.word	0x40008000
    98b8:	4000b000 	.word	0x4000b000
    98bc:	4000b148 	.word	0x4000b148
    98c0:	40009000 	.word	0x40009000

000098c4 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	EVENT_TIMER->TASKS_STOP = 1;
    98c4:	4a04      	ldr	r2, [pc, #16]	; (98d8 <radio_tmr_stop+0x14>)
    98c6:	2301      	movs	r3, #1
    98c8:	6053      	str	r3, [r2, #4]
	EVENT_TIMER->TASKS_SHUTDOWN = 1;
    98ca:	6113      	str	r3, [r2, #16]
	NRF_TIMER_regw_sideeffects_TASKS_STOP(EVENT_TIMER_NBR);
	/* Shutdown not modelled (deprecated) */
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	SW_SWITCH_TIMER->TASKS_STOP = 1;
    98cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    98d0:	6053      	str	r3, [r2, #4]
	SW_SWITCH_TIMER->TASKS_SHUTDOWN = 1;
    98d2:	6113      	str	r3, [r2, #16]
    98d4:	4770      	bx	lr
    98d6:	bf00      	nop
    98d8:	40008000 	.word	0x40008000

000098dc <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	EVENT_TIMER->CC[1] = hcto;
    98dc:	4b0c      	ldr	r3, [pc, #48]	; (9910 <radio_tmr_hcto_configure+0x34>)
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_TIMER_regw_sideeffects_CC(EVENT_TIMER_NBR, 1);
#endif

	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    98de:	4a0d      	ldr	r2, [pc, #52]	; (9914 <radio_tmr_hcto_configure+0x38>)
	EVENT_TIMER->CC[1] = hcto;
    98e0:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    98e4:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    98e8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    98ec:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    98f0:	3240      	adds	r2, #64	; 0x40
    98f2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_EVT =
    98f6:	f502 7280 	add.w	r2, r2, #256	; 0x100
    98fa:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
		HAL_RADIO_DISABLE_ON_HCTO_PPI_EVT;
	HAL_RADIO_DISABLE_ON_HCTO_PPI_REGISTER_TASK =
    98fe:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    9902:	3a34      	subs	r2, #52	; 0x34
    9904:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
		HAL_RADIO_DISABLE_ON_HCTO_PPI_TASK;
	NRF_PPI->CHENSET =
    9908:	2218      	movs	r2, #24
    990a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    990e:	4770      	bx	lr
    9910:	40008000 	.word	0x40008000
    9914:	40001104 	.word	0x40001104

00009918 <radio_tmr_aa_capture>:
#endif
}

void radio_tmr_aa_capture(void)
{
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_EVT =
    9918:	4b0b      	ldr	r3, [pc, #44]	; (9948 <radio_tmr_aa_capture+0x30>)
    991a:	4a0c      	ldr	r2, [pc, #48]	; (994c <radio_tmr_aa_capture+0x34>)
    991c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
		HAL_RADIO_READY_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_READY_TIME_CAPTURE_PPI_REGISTER_TASK =
    9920:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9924:	3240      	adds	r2, #64	; 0x40
    9926:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
		HAL_RADIO_READY_TIME_CAPTURE_PPI_TASK;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_EVT =
    992a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    992e:	3a3c      	subs	r2, #60	; 0x3c
    9930:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_EVT;
	HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_REGISTER_TASK =
    9934:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    9938:	3240      	adds	r2, #64	; 0x40
    993a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
		HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI_TASK;
	NRF_PPI->CHENSET =
    993e:	220c      	movs	r2, #12
    9940:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9944:	4770      	bx	lr
    9946:	bf00      	nop
    9948:	4001f000 	.word	0x4001f000
    994c:	40001100 	.word	0x40001100

00009950 <radio_tmr_aa_get>:
#endif
}

u32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
    9950:	4b01      	ldr	r3, [pc, #4]	; (9958 <radio_tmr_aa_get+0x8>)
    9952:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    9956:	4770      	bx	lr
    9958:	40008000 	.word	0x40008000

0000995c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    995c:	4b01      	ldr	r3, [pc, #4]	; (9964 <radio_tmr_aa_save+0x8>)
    995e:	6018      	str	r0, [r3, #0]
    9960:	4770      	bx	lr
    9962:	bf00      	nop
    9964:	20001f80 	.word	0x20001f80

00009968 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    9968:	4b01      	ldr	r3, [pc, #4]	; (9970 <radio_tmr_aa_restore+0x8>)
    996a:	6818      	ldr	r0, [r3, #0]
    996c:	4770      	bx	lr
    996e:	bf00      	nop
    9970:	20001f80 	.word	0x20001f80

00009974 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
    9974:	4b01      	ldr	r3, [pc, #4]	; (997c <radio_tmr_ready_get+0x8>)
    9976:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    997a:	4770      	bx	lr
    997c:	40008000 	.word	0x40008000

00009980 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_EVT =
    9980:	4b06      	ldr	r3, [pc, #24]	; (999c <radio_tmr_end_capture+0x1c>)
    9982:	4a07      	ldr	r2, [pc, #28]	; (99a0 <radio_tmr_end_capture+0x20>)
    9984:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		HAL_RADIO_END_TIME_CAPTURE_PPI_EVT;
	HAL_RADIO_END_TIME_CAPTURE_PPI_REGISTER_TASK =
    9988:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    998c:	323c      	adds	r2, #60	; 0x3c
    998e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
		HAL_RADIO_END_TIME_CAPTURE_PPI_TASK;
	NRF_PPI->CHENSET = HAL_RADIO_END_TIME_CAPTURE_PPI_ENABLE;
    9992:	2220      	movs	r2, #32
    9994:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    9998:	4770      	bx	lr
    999a:	bf00      	nop
    999c:	4001f000 	.word	0x4001f000
    99a0:	4000110c 	.word	0x4000110c

000099a4 <radio_tmr_end_get>:
    99a4:	4b01      	ldr	r3, [pc, #4]	; (99ac <radio_tmr_end_get+0x8>)
    99a6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    99aa:	4770      	bx	lr
    99ac:	40008000 	.word	0x40008000

000099b0 <radio_tmr_tifs_base_get>:
u32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
    99b0:	4b01      	ldr	r3, [pc, #4]	; (99b8 <radio_tmr_tifs_base_get+0x8>)
    99b2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

u32_t radio_tmr_tifs_base_get(void)
{
	return radio_tmr_end_get();
}
    99b6:	4770      	bx	lr
    99b8:	40008000 	.word	0x40008000

000099bc <radio_ccm_rx_pkt_set>:
void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{

	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    99bc:	4b16      	ldr	r3, [pc, #88]	; (9a18 <radio_ccm_rx_pkt_set+0x5c>)
{
    99be:	b570      	push	{r4, r5, r6, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    99c0:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    99c2:	2502      	movs	r5, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    99c4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
	default:
	case BIT(0):
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    99c8:	4e14      	ldr	r6, [pc, #80]	; (9a1c <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    99ca:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    99ce:	4d14      	ldr	r5, [pc, #80]	; (9a20 <radio_ccm_rx_pkt_set+0x64>)
    99d0:	2902      	cmp	r1, #2
    99d2:	bf0c      	ite	eq
    99d4:	4629      	moveq	r1, r5
    99d6:	4631      	movne	r1, r6
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_CCM->MODE = mode;
    99d8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    99dc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    99e0:	4810      	ldr	r0, [pc, #64]	; (9a24 <radio_ccm_rx_pkt_set+0x68>)
    99e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    99e6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    99ea:	4a0f      	ldr	r2, [pc, #60]	; (9a28 <radio_ccm_rx_pkt_set+0x6c>)
    99ec:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    99f0:	490e      	ldr	r1, [pc, #56]	; (9a2c <radio_ccm_rx_pkt_set+0x70>)
    99f2:	4a0f      	ldr	r2, [pc, #60]	; (9a30 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->SHORTS = 0;
    99f4:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    99f8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    99fc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	HAL_TRIGGER_CRYPT_PPI_REGISTER_EVT = HAL_TRIGGER_CRYPT_PPI_EVT;
    9a00:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	HAL_TRIGGER_CRYPT_PPI_REGISTER_TASK = HAL_TRIGGER_CRYPT_PPI_TASK;
    9a04:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    9a08:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = HAL_TRIGGER_CRYPT_PPI_ENABLE;
    9a0c:	2140      	movs	r1, #64	; 0x40
    9a0e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_PPI_regw_sideeffects();
#endif

	NRF_CCM->TASKS_KSGEN = 1;
    9a12:	2201      	movs	r2, #1
    9a14:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    9a16:	bd70      	pop	{r4, r5, r6, pc}
    9a18:	4000f000 	.word	0x4000f000
    9a1c:	01000001 	.word	0x01000001
    9a20:	01010001 	.word	0x01010001
    9a24:	20001e7c 	.word	0x20001e7c
    9a28:	20001d6c 	.word	0x20001d6c
    9a2c:	40001104 	.word	0x40001104
    9a30:	4001f000 	.word	0x4001f000

00009a34 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    9a34:	b510      	push	{r4, lr}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9a36:	4b0e      	ldr	r3, [pc, #56]	; (9a70 <radio_ccm_tx_pkt_set+0x3c>)
    9a38:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9a3a:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    9a3c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    9a40:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    9a44:	4c0b      	ldr	r4, [pc, #44]	; (9a74 <radio_ccm_tx_pkt_set+0x40>)
    9a46:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    9a4a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    9a4e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    9a52:	4809      	ldr	r0, [pc, #36]	; (9a78 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9a54:	4909      	ldr	r1, [pc, #36]	; (9a7c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    9a56:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    9a5a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    9a5e:	2101      	movs	r1, #1
    9a60:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    9a64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    9a68:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    9a6c:	6019      	str	r1, [r3, #0]
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_TASKS_KSGEN();
#endif

	return _pkt_scratch;
}
    9a6e:	bd10      	pop	{r4, pc}
    9a70:	4000f000 	.word	0x4000f000
    9a74:	01010000 	.word	0x01010000
    9a78:	20001e7c 	.word	0x20001e7c
    9a7c:	20001d6c 	.word	0x20001d6c

00009a80 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    9a80:	4b0c      	ldr	r3, [pc, #48]	; (9ab4 <radio_ccm_is_done+0x34>)
    9a82:	2202      	movs	r2, #2
    9a84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENSET();
#endif
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    9a88:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    9a8c:	b16a      	cbz	r2, 9aaa <radio_ccm_is_done+0x2a>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    9a8e:	2202      	movs	r2, #2
    9a90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    9a94:	4a08      	ldr	r2, [pc, #32]	; (9ab8 <radio_ccm_is_done+0x38>)
    9a96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9a9a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
#if defined(CONFIG_BOARD_NRFXX_NWTSIM)
	NRF_CCM_regw_sideeffects_INTENCLR();
#endif
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    9a9e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    9aa2:	fab0 f080 	clz	r0, r0
    9aa6:	0940      	lsrs	r0, r0, #5
    9aa8:	4770      	bx	lr
		__WFE();
    9aaa:	bf20      	wfe
		__SEV();
    9aac:	bf40      	sev
		__WFE();
    9aae:	bf20      	wfe
    9ab0:	e7ea      	b.n	9a88 <radio_ccm_is_done+0x8>
    9ab2:	bf00      	nop
    9ab4:	4000f000 	.word	0x4000f000
    9ab8:	e000e100 	.word	0xe000e100

00009abc <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    9abc:	4b03      	ldr	r3, [pc, #12]	; (9acc <radio_ccm_mic_is_valid+0x10>)
    9abe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    9ac2:	3000      	adds	r0, #0
    9ac4:	bf18      	it	ne
    9ac6:	2001      	movne	r0, #1
    9ac8:	4770      	bx	lr
    9aca:	bf00      	nop
    9acc:	4000f000 	.word	0x4000f000

00009ad0 <radio_ar_match_get>:
#endif
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    9ad0:	4b01      	ldr	r3, [pc, #4]	; (9ad8 <radio_ar_match_get+0x8>)
    9ad2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    9ad6:	4770      	bx	lr
    9ad8:	4000f000 	.word	0x4000f000

00009adc <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
    9adc:	4a04      	ldr	r2, [pc, #16]	; (9af0 <radio_ar_status_reset+0x14>)
    9ade:	2300      	movs	r3, #0
    9ae0:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    9ae4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    9ae8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9aec:	4770      	bx	lr
    9aee:	bf00      	nop
    9af0:	40001000 	.word	0x40001000

00009af4 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    9af4:	4b08      	ldr	r3, [pc, #32]	; (9b18 <radio_ar_has_match+0x24>)
    9af6:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

u32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    9afa:	b160      	cbz	r0, 9b16 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
    9afc:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    9b00:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    9b04:	b138      	cbz	r0, 9b16 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
    9b06:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    9b0a:	b120      	cbz	r0, 9b16 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    9b0c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    9b10:	fab0 f080 	clz	r0, r0
    9b14:	0940      	lsrs	r0, r0, #5
}
    9b16:	4770      	bx	lr
    9b18:	40001000 	.word	0x40001000

00009b1c <mayfly_enable_cb>:

void mayfly_enable_cb(u8_t caller_id, u8_t callee_id, u8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
    9b1c:	2901      	cmp	r1, #1
    9b1e:	d005      	beq.n	9b2c <mayfly_enable_cb+0x10>
    9b20:	4040      	eors	r0, r0
    9b22:	f380 8811 	msr	BASEPRI, r0
    9b26:	f04f 0004 	mov.w	r0, #4
    9b2a:	df02      	svc	2

	if (enable) {
		irq_enable(SWI4_IRQn);
    9b2c:	2018      	movs	r0, #24
	if (enable) {
    9b2e:	b10a      	cbz	r2, 9b34 <mayfly_enable_cb+0x18>
		irq_enable(SWI4_IRQn);
    9b30:	f7f7 b8dc 	b.w	cec <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
    9b34:	f7f7 b8ea 	b.w	d0c <_arch_irq_disable>

00009b38 <mayfly_is_enabled>:

u32_t mayfly_is_enabled(u8_t caller_id, u8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
    9b38:	b139      	cbz	r1, 9b4a <mayfly_is_enabled+0x12>
    9b3a:	2901      	cmp	r1, #1
    9b3c:	d008      	beq.n	9b50 <mayfly_is_enabled+0x18>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(SWI4_IRQn);

	default:
		LL_ASSERT(0);
    9b3e:	4040      	eors	r0, r0
    9b40:	f380 8811 	msr	BASEPRI, r0
    9b44:	f04f 0004 	mov.w	r0, #4
    9b48:	df02      	svc	2
		return irq_is_enabled(RTC0_IRQn);
    9b4a:	200b      	movs	r0, #11
		return irq_is_enabled(SWI4_IRQn);
    9b4c:	f7f7 b8f2 	b.w	d34 <_arch_irq_is_enabled>
    9b50:	2018      	movs	r0, #24
    9b52:	e7fb      	b.n	9b4c <mayfly_is_enabled+0x14>

00009b54 <mayfly_prio_is_equal>:
u32_t mayfly_prio_is_equal(u8_t caller_id, u8_t callee_id)
{
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    9b54:	4288      	cmp	r0, r1
    9b56:	d00a      	beq.n	9b6e <mayfly_prio_is_equal+0x1a>
	return (caller_id == callee_id) ||
    9b58:	b918      	cbnz	r0, 9b62 <mayfly_prio_is_equal+0xe>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
    9b5a:	1e4b      	subs	r3, r1, #1
    9b5c:	4258      	negs	r0, r3
    9b5e:	4158      	adcs	r0, r3
    9b60:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    9b62:	2801      	cmp	r0, #1
    9b64:	d105      	bne.n	9b72 <mayfly_prio_is_equal+0x1e>
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
    9b66:	fab1 f081 	clz	r0, r1
    9b6a:	0940      	lsrs	r0, r0, #5
    9b6c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
    9b6e:	2001      	movs	r0, #1
    9b70:	4770      	bx	lr
    9b72:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER));
#else
	/* TODO: check Kconfig set priorities */
	return caller_id == callee_id;
#endif
}
    9b74:	4770      	bx	lr
	...

00009b78 <mayfly_pend>:

void mayfly_pend(u8_t caller_id, u8_t callee_id)
{
    9b78:	4b08      	ldr	r3, [pc, #32]	; (9b9c <mayfly_pend+0x24>)
	(void)caller_id;

	switch (callee_id) {
    9b7a:	b139      	cbz	r1, 9b8c <mayfly_pend+0x14>
    9b7c:	2901      	cmp	r1, #1
    9b7e:	d00a      	beq.n	9b96 <mayfly_pend+0x1e>
	case MAYFLY_CALL_ID_JOB:
		NVIC_SetPendingIRQ(SWI4_IRQn);
		break;

	default:
		LL_ASSERT(0);
    9b80:	4040      	eors	r0, r0
    9b82:	f380 8811 	msr	BASEPRI, r0
    9b86:	f04f 0004 	mov.w	r0, #4
    9b8a:	df02      	svc	2
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9b90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9b94:	4770      	bx	lr
    9b96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9b9a:	e7f9      	b.n	9b90 <mayfly_pend+0x18>
    9b9c:	e000e100 	.word	0xe000e100

00009ba0 <hal_ticker_instance0_caller_id_get>:

u8_t hal_ticker_instance0_caller_id_get(u8_t user_id)
{
	u8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
    9ba0:	2803      	cmp	r0, #3
    9ba2:	d905      	bls.n	9bb0 <hal_ticker_instance0_caller_id_get+0x10>

	caller_id = caller_id_lut[user_id];
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    9ba4:	4040      	eors	r0, r0
    9ba6:	f380 8811 	msr	BASEPRI, r0
    9baa:	f04f 0004 	mov.w	r0, #4
    9bae:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
    9bb0:	4b02      	ldr	r3, [pc, #8]	; (9bbc <hal_ticker_instance0_caller_id_get+0x1c>)
    9bb2:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
    9bb4:	2800      	cmp	r0, #0
    9bb6:	d0f5      	beq.n	9ba4 <hal_ticker_instance0_caller_id_get+0x4>

	return caller_id;
}
    9bb8:	4770      	bx	lr
    9bba:	bf00      	nop
    9bbc:	0000b898 	.word	0x0000b898

00009bc0 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    9bc0:	3802      	subs	r0, #2
{
    9bc2:	b410      	push	{r4}
    9bc4:	461c      	mov	r4, r3
	switch (caller_id) {
    9bc6:	2803      	cmp	r0, #3
    9bc8:	d816      	bhi.n	9bf8 <hal_ticker_instance0_sched+0x38>
    9bca:	e8df f000 	tbb	[pc, r0]
    9bce:	0b02      	.short	0x0b02
    9bd0:	2411      	.short	0x2411
	case TICKER_CALL_ID_TRIGGER:
		switch (callee_id) {
    9bd2:	2903      	cmp	r1, #3
    9bd4:	d110      	bne.n	9bf8 <hal_ticker_instance0_sched+0x38>
		{
			static memq_link_t link;
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_worker};

			m.param = instance;
    9bd6:	4b13      	ldr	r3, [pc, #76]	; (9c24 <hal_ticker_instance0_sched+0x64>)

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    9bd8:	2100      	movs	r1, #0
			m.param = instance;
    9bda:	609c      	str	r4, [r3, #8]
			static struct mayfly m = {0, 0, &link, NULL,
						  ticker_job};

			m.param = instance;

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    9bdc:	2000      	movs	r0, #0

	default:
		LL_ASSERT(0);
		break;
	}
}
    9bde:	bc10      	pop	{r4}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9be0:	f7f9 b8dc 	b.w	2d9c <mayfly_enqueue>
		switch (callee_id) {
    9be4:	2904      	cmp	r1, #4
    9be6:	d107      	bne.n	9bf8 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    9be8:	4b0f      	ldr	r3, [pc, #60]	; (9c28 <hal_ticker_instance0_sched+0x68>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
    9bea:	2101      	movs	r1, #1
			m.param = instance;
    9bec:	609c      	str	r4, [r3, #8]
    9bee:	e7f5      	b.n	9bdc <hal_ticker_instance0_sched+0x1c>
		switch (callee_id) {
    9bf0:	2903      	cmp	r1, #3
    9bf2:	d007      	beq.n	9c04 <hal_ticker_instance0_sched+0x44>
    9bf4:	2904      	cmp	r1, #4
    9bf6:	d00a      	beq.n	9c0e <hal_ticker_instance0_sched+0x4e>
		LL_ASSERT(0);
    9bf8:	4040      	eors	r0, r0
    9bfa:	f380 8811 	msr	BASEPRI, r0
    9bfe:	f04f 0004 	mov.w	r0, #4
    9c02:	df02      	svc	2
			m.param = instance;
    9c04:	4b09      	ldr	r3, [pc, #36]	; (9c2c <hal_ticker_instance0_sched+0x6c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9c06:	2100      	movs	r1, #0
			m.param = instance;
    9c08:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9c0a:	2001      	movs	r0, #1
    9c0c:	e7e7      	b.n	9bde <hal_ticker_instance0_sched+0x1e>
			m.param = instance;
    9c0e:	4b08      	ldr	r3, [pc, #32]	; (9c30 <hal_ticker_instance0_sched+0x70>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
    9c10:	2101      	movs	r1, #1
			m.param = instance;
    9c12:	609c      	str	r4, [r3, #8]
    9c14:	e7f9      	b.n	9c0a <hal_ticker_instance0_sched+0x4a>
		switch (callee_id) {
    9c16:	2904      	cmp	r1, #4
    9c18:	d1ee      	bne.n	9bf8 <hal_ticker_instance0_sched+0x38>
			m.param = instance;
    9c1a:	4b06      	ldr	r3, [pc, #24]	; (9c34 <hal_ticker_instance0_sched+0x74>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9c1c:	2101      	movs	r1, #1
			m.param = instance;
    9c1e:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    9c20:	2003      	movs	r0, #3
    9c22:	e7dc      	b.n	9bde <hal_ticker_instance0_sched+0x1e>
    9c24:	200061a0 	.word	0x200061a0
    9c28:	200061b0 	.word	0x200061b0
    9c2c:	200061c0 	.word	0x200061c0
    9c30:	200061d0 	.word	0x200061d0
    9c34:	200061e0 	.word	0x200061e0

00009c38 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(u32_t value)
{
	cntr_cmp_set(0, value);
    9c38:	4601      	mov	r1, r0
    9c3a:	2000      	movs	r0, #0
    9c3c:	f7ff bb1c 	b.w	9278 <cntr_cmp_set>

00009c40 <fixed_data_unref>:

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
}

static void fixed_data_unref(struct net_buf *buf, u8_t *data)
{
    9c40:	4770      	bx	lr
	...

00009c44 <net_buf_pool_get>:
}
    9c44:	4b01      	ldr	r3, [pc, #4]	; (9c4c <net_buf_pool_get+0x8>)
    9c46:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    9c4a:	4770      	bx	lr
    9c4c:	200062ec 	.word	0x200062ec

00009c50 <net_buf_id>:
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9c50:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
    9c52:	4b04      	ldr	r3, [pc, #16]	; (9c64 <net_buf_id+0x14>)
    9c54:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    9c58:	69db      	ldr	r3, [r3, #28]
    9c5a:	1ac0      	subs	r0, r0, r3
}
    9c5c:	4b02      	ldr	r3, [pc, #8]	; (9c68 <net_buf_id+0x18>)
	return buf - pool->__bufs;
    9c5e:	10c0      	asrs	r0, r0, #3
}
    9c60:	4358      	muls	r0, r3
    9c62:	4770      	bx	lr
    9c64:	200062ec 	.word	0x200062ec
    9c68:	aaaaaaab 	.word	0xaaaaaaab

00009c6c <fixed_data_alloc>:
{
    9c6c:	b510      	push	{r4, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9c6e:	4b09      	ldr	r3, [pc, #36]	; (9c94 <fixed_data_alloc+0x28>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9c70:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9c72:	eb03 1342 	add.w	r3, r3, r2, lsl #5
	*size = min(fixed->data_size, *size);
    9c76:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9c78:	699b      	ldr	r3, [r3, #24]
    9c7a:	685c      	ldr	r4, [r3, #4]
	*size = min(fixed->data_size, *size);
    9c7c:	6823      	ldr	r3, [r4, #0]
    9c7e:	429a      	cmp	r2, r3
    9c80:	bf94      	ite	ls
    9c82:	600a      	strls	r2, [r1, #0]
    9c84:	600b      	strhi	r3, [r1, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
    9c86:	f7ff ffe3 	bl	9c50 <net_buf_id>
    9c8a:	e894 000c 	ldmia.w	r4, {r2, r3}
}
    9c8e:	fb02 3000 	mla	r0, r2, r0, r3
    9c92:	bd10      	pop	{r4, pc}
    9c94:	200062ec 	.word	0x200062ec

00009c98 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  s32_t timeout)
#endif
{
    9c98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9c9c:	4605      	mov	r5, r0
    9c9e:	9101      	str	r1, [sp, #4]
    9ca0:	4616      	mov	r6, r2
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    9ca2:	f000 fd89 	bl	a7b8 <_impl_k_uptime_get_32>
    9ca6:	4607      	mov	r7, r0
	__asm__ volatile(
    9ca8:	f04f 0320 	mov.w	r3, #32
    9cac:	f3ef 8811 	mrs	r8, BASEPRI
    9cb0:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    9cb4:	8a6b      	ldrh	r3, [r5, #18]
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d03d      	beq.n	9d36 <net_buf_alloc_len+0x9e>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    9cba:	8a2a      	ldrh	r2, [r5, #16]
    9cbc:	429a      	cmp	r2, r3
    9cbe:	d92a      	bls.n	9d16 <net_buf_alloc_len+0x7e>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    9cc0:	2100      	movs	r1, #0
    9cc2:	4628      	mov	r0, r5
    9cc4:	f000 fad3 	bl	a26e <k_queue_get>
			if (buf) {
    9cc8:	4604      	mov	r4, r0
    9cca:	b320      	cbz	r0, 9d16 <net_buf_alloc_len+0x7e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    9ccc:	f388 8811 	msr	BASEPRI, r8
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
    9cd0:	9b01      	ldr	r3, [sp, #4]
    9cd2:	2b00      	cmp	r3, #0
    9cd4:	d03c      	beq.n	9d50 <net_buf_alloc_len+0xb8>
		if (timeout != K_NO_WAIT && timeout != K_FOREVER) {
    9cd6:	1c73      	adds	r3, r6, #1
    9cd8:	2b01      	cmp	r3, #1
    9cda:	d906      	bls.n	9cea <net_buf_alloc_len+0x52>
    9cdc:	f000 fd6c 	bl	a7b8 <_impl_k_uptime_get_32>
			u32_t diff = k_uptime_get_32() - alloc_start;
    9ce0:	1bc0      	subs	r0, r0, r7

			timeout -= min(timeout, diff);
    9ce2:	42b0      	cmp	r0, r6
    9ce4:	bf94      	ite	ls
    9ce6:	1a36      	subls	r6, r6, r0
    9ce8:	1bb6      	subhi	r6, r6, r6
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9cea:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
    9cec:	4f1e      	ldr	r7, [pc, #120]	; (9d68 <net_buf_alloc_len+0xd0>)
    9cee:	eb07 1343 	add.w	r3, r7, r3, lsl #5
    9cf2:	4632      	mov	r2, r6
    9cf4:	699b      	ldr	r3, [r3, #24]
    9cf6:	681b      	ldr	r3, [r3, #0]
    9cf8:	a901      	add	r1, sp, #4
    9cfa:	681b      	ldr	r3, [r3, #0]
    9cfc:	4620      	mov	r0, r4
    9cfe:	4798      	blx	r3
    9d00:	4605      	mov	r5, r0
		}

		buf->__buf = data_alloc(buf, &size, timeout);
    9d02:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
    9d04:	bb28      	cbnz	r0, 9d52 <net_buf_alloc_len+0xba>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
    9d06:	79a0      	ldrb	r0, [r4, #6]
    9d08:	4621      	mov	r1, r4
    9d0a:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    9d0e:	f000 fa8e 	bl	a22e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
    9d12:	462c      	mov	r4, r5
    9d14:	e018      	b.n	9d48 <net_buf_alloc_len+0xb0>
		uninit_count = pool->uninit_count--;
    9d16:	8a6b      	ldrh	r3, [r5, #18]
    9d18:	1e5a      	subs	r2, r3, #1
    9d1a:	826a      	strh	r2, [r5, #18]
    9d1c:	f388 8811 	msr	BASEPRI, r8
	buf = &pool->__bufs[pool->buf_count - uninit_count];
    9d20:	8a2c      	ldrh	r4, [r5, #16]
    9d22:	1ae4      	subs	r4, r4, r3
    9d24:	69eb      	ldr	r3, [r5, #28]
    9d26:	2218      	movs	r2, #24
    9d28:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
    9d2c:	4b0e      	ldr	r3, [pc, #56]	; (9d68 <net_buf_alloc_len+0xd0>)
    9d2e:	1aed      	subs	r5, r5, r3
    9d30:	116d      	asrs	r5, r5, #5
	buf->pool_id = pool_id(pool);
    9d32:	71a5      	strb	r5, [r4, #6]
		goto success;
    9d34:	e7cc      	b.n	9cd0 <net_buf_alloc_len+0x38>
    9d36:	f388 8811 	msr	BASEPRI, r8
	buf = k_lifo_get(&pool->free, timeout);
    9d3a:	4631      	mov	r1, r6
    9d3c:	4628      	mov	r0, r5
    9d3e:	f000 fa96 	bl	a26e <k_queue_get>
	if (!buf) {
    9d42:	4604      	mov	r4, r0
    9d44:	2800      	cmp	r0, #0
    9d46:	d1c3      	bne.n	9cd0 <net_buf_alloc_len+0x38>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
    9d48:	4620      	mov	r0, r4
    9d4a:	b002      	add	sp, #8
    9d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		buf->__buf = NULL;
    9d50:	6123      	str	r3, [r4, #16]
	buf->ref   = 1;
    9d52:	2301      	movs	r3, #1
    9d54:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
    9d56:	2300      	movs	r3, #0
	buf->frags = NULL;
    9d58:	6023      	str	r3, [r4, #0]
	buf->flags = 0;
    9d5a:	7163      	strb	r3, [r4, #5]
	buf->size  = size;
    9d5c:	9a01      	ldr	r2, [sp, #4]
	buf->len  = 0;
    9d5e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
    9d60:	6923      	ldr	r3, [r4, #16]
    9d62:	81e2      	strh	r2, [r4, #14]
    9d64:	60a3      	str	r3, [r4, #8]
	return buf;
    9d66:	e7ef      	b.n	9d48 <net_buf_alloc_len+0xb0>
    9d68:	200062ec 	.word	0x200062ec

00009d6c <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool, s32_t timeout)
{
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
    9d6c:	6983      	ldr	r3, [r0, #24]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
    9d6e:	685b      	ldr	r3, [r3, #4]
    9d70:	460a      	mov	r2, r1
    9d72:	6819      	ldr	r1, [r3, #0]
    9d74:	f7ff bf90 	b.w	9c98 <net_buf_alloc_len>

00009d78 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
    9d78:	b570      	push	{r4, r5, r6, lr}
    9d7a:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    9d7c:	f000 fa77 	bl	a26e <k_queue_get>
	if (!buf) {
    9d80:	4605      	mov	r5, r0
    9d82:	b128      	cbz	r0, 9d90 <net_buf_get+0x18>
    9d84:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    9d86:	7963      	ldrb	r3, [r4, #5]
    9d88:	f013 0301 	ands.w	r3, r3, #1
    9d8c:	d102      	bne.n	9d94 <net_buf_get+0x1c>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    9d8e:	6023      	str	r3, [r4, #0]

	return buf;
}
    9d90:	4628      	mov	r0, r5
    9d92:	bd70      	pop	{r4, r5, r6, pc}
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    9d94:	2100      	movs	r1, #0
    9d96:	4630      	mov	r0, r6
    9d98:	f000 fa69 	bl	a26e <k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
    9d9c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    9d9e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
    9da0:	f023 0301 	bic.w	r3, r3, #1
    9da4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    9da6:	4604      	mov	r4, r0
    9da8:	e7ed      	b.n	9d86 <net_buf_get+0xe>

00009daa <net_buf_simple_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    9daa:	6883      	ldr	r3, [r0, #8]
    9dac:	4419      	add	r1, r3
    9dae:	6001      	str	r1, [r0, #0]
    9db0:	4770      	bx	lr

00009db2 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    9db2:	b410      	push	{r4}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    9db4:	460a      	mov	r2, r1
    9db6:	6814      	ldr	r4, [r2, #0]
    9db8:	b914      	cbnz	r4, 9dc0 <net_buf_put+0xe>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
}
    9dba:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
    9dbc:	f000 ba3b 	b.w	a236 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
    9dc0:	7953      	ldrb	r3, [r2, #5]
    9dc2:	f043 0301 	orr.w	r3, r3, #1
    9dc6:	7153      	strb	r3, [r2, #5]
    9dc8:	4622      	mov	r2, r4
    9dca:	e7f4      	b.n	9db6 <net_buf_put+0x4>

00009dcc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    9dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9dce:	4d15      	ldr	r5, [pc, #84]	; (9e24 <net_buf_unref+0x58>)
    9dd0:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
    9dd2:	2600      	movs	r6, #0
	while (buf) {
    9dd4:	b904      	cbnz	r4, 9dd8 <net_buf_unref+0xc>
    9dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (--buf->ref > 0) {
    9dd8:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
    9dda:	6827      	ldr	r7, [r4, #0]
		if (--buf->ref > 0) {
    9ddc:	3b01      	subs	r3, #1
    9dde:	b2db      	uxtb	r3, r3
    9de0:	7123      	strb	r3, [r4, #4]
    9de2:	2b00      	cmp	r3, #0
    9de4:	d1f7      	bne.n	9dd6 <net_buf_unref+0xa>
		if (buf->__buf) {
    9de6:	6921      	ldr	r1, [r4, #16]
    9de8:	b159      	cbz	r1, 9e02 <net_buf_unref+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
    9dea:	7963      	ldrb	r3, [r4, #5]
    9dec:	079b      	lsls	r3, r3, #30
    9dee:	d407      	bmi.n	9e00 <net_buf_unref+0x34>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    9df0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
    9df2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9df6:	4620      	mov	r0, r4
    9df8:	699b      	ldr	r3, [r3, #24]
    9dfa:	681b      	ldr	r3, [r3, #0]
    9dfc:	689b      	ldr	r3, [r3, #8]
    9dfe:	4798      	blx	r3
			buf->__buf = NULL;
    9e00:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
    9e02:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
    9e04:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
    9e06:	eb05 1340 	add.w	r3, r5, r0, lsl #5
		buf->frags = NULL;
    9e0a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
    9e0c:	695b      	ldr	r3, [r3, #20]
    9e0e:	b11b      	cbz	r3, 9e18 <net_buf_unref+0x4c>
			pool->destroy(buf);
    9e10:	4620      	mov	r0, r4
    9e12:	4798      	blx	r3
{
    9e14:	463c      	mov	r4, r7
    9e16:	e7dd      	b.n	9dd4 <net_buf_unref+0x8>
	k_lifo_put(&pool->free, buf);
    9e18:	4621      	mov	r1, r4
    9e1a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9e1e:	f000 fa06 	bl	a22e <k_queue_prepend>
    9e22:	e7f7      	b.n	9e14 <net_buf_unref+0x48>
    9e24:	200062ec 	.word	0x200062ec

00009e28 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
    9e28:	7903      	ldrb	r3, [r0, #4]
    9e2a:	3301      	adds	r3, #1
    9e2c:	7103      	strb	r3, [r0, #4]
	return buf;
}
    9e2e:	4770      	bx	lr

00009e30 <net_buf_simple_add>:
	return buf->data + buf->len;
    9e30:	8883      	ldrh	r3, [r0, #4]
    9e32:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    9e34:	4419      	add	r1, r3
    9e36:	8081      	strh	r1, [r0, #4]
	return tail;
}
    9e38:	18d0      	adds	r0, r2, r3
    9e3a:	4770      	bx	lr

00009e3c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    9e3c:	b430      	push	{r4, r5}
    9e3e:	8883      	ldrh	r3, [r0, #4]
    9e40:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
    9e42:	189d      	adds	r5, r3, r2
    9e44:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    9e46:	18e0      	adds	r0, r4, r3
}
    9e48:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
    9e4a:	f7f6 bbd5 	b.w	5f8 <memcpy>

00009e4e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    9e4e:	8883      	ldrh	r3, [r0, #4]
    9e50:	1a5b      	subs	r3, r3, r1
    9e52:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    9e54:	6803      	ldr	r3, [r0, #0]
    9e56:	4419      	add	r1, r3
    9e58:	6001      	str	r1, [r0, #0]
}
    9e5a:	4608      	mov	r0, r1
    9e5c:	4770      	bx	lr

00009e5e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    9e5e:	b508      	push	{r3, lr}
	u8_t val;

	val = buf->data[0];
    9e60:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
    9e62:	2101      	movs	r1, #1
	val = buf->data[0];
    9e64:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    9e66:	f7ff fff2 	bl	9e4e <net_buf_simple_pull>

	return val;
}
    9e6a:	4610      	mov	r0, r2
    9e6c:	bd08      	pop	{r3, pc}

00009e6e <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
    9e6e:	6802      	ldr	r2, [r0, #0]
    9e70:	6880      	ldr	r0, [r0, #8]
}
    9e72:	1a10      	subs	r0, r2, r0
    9e74:	4770      	bx	lr
	...

00009e78 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    9e78:	b538      	push	{r3, r4, r5, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
    9e7a:	4b08      	ldr	r3, [pc, #32]	; (9e9c <_sys_device_do_config_level+0x24>)
    9e7c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9e80:	3001      	adds	r0, #1
    9e82:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    9e86:	4620      	mov	r0, r4
    9e88:	42a8      	cmp	r0, r5
    9e8a:	f104 040c 	add.w	r4, r4, #12
    9e8e:	d300      	bcc.n	9e92 <_sys_device_do_config_level+0x1a>
		struct device_config *device = info->config;

		device->init(info);
		_k_object_init(info);
	}
}
    9e90:	bd38      	pop	{r3, r4, r5, pc}
		device->init(info);
    9e92:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    9e96:	685b      	ldr	r3, [r3, #4]
    9e98:	4798      	blx	r3
    9e9a:	e7f4      	b.n	9e86 <_sys_device_do_config_level+0xe>
    9e9c:	0000b8a8 	.word	0x0000b8a8

00009ea0 <device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    9ea0:	4b10      	ldr	r3, [pc, #64]	; (9ee4 <device_get_binding+0x44>)
{
    9ea2:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    9ea4:	4c10      	ldr	r4, [pc, #64]	; (9ee8 <device_get_binding+0x48>)
{
    9ea6:	4605      	mov	r5, r0
    9ea8:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    9eaa:	429c      	cmp	r4, r3
    9eac:	d104      	bne.n	9eb8 <device_get_binding+0x18>
    9eae:	4c0e      	ldr	r4, [pc, #56]	; (9ee8 <device_get_binding+0x48>)
		if (info->driver_api != NULL && info->config->name == name) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    9eb0:	42b4      	cmp	r4, r6
    9eb2:	d109      	bne.n	9ec8 <device_get_binding+0x28>
		if (!strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    9eb4:	2400      	movs	r4, #0
    9eb6:	e012      	b.n	9ede <device_get_binding+0x3e>
		if (info->driver_api != NULL && info->config->name == name) {
    9eb8:	6862      	ldr	r2, [r4, #4]
    9eba:	b11a      	cbz	r2, 9ec4 <device_get_binding+0x24>
    9ebc:	6822      	ldr	r2, [r4, #0]
    9ebe:	6812      	ldr	r2, [r2, #0]
    9ec0:	42aa      	cmp	r2, r5
    9ec2:	d00c      	beq.n	9ede <device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9ec4:	340c      	adds	r4, #12
    9ec6:	e7f0      	b.n	9eaa <device_get_binding+0xa>
		if (!info->driver_api) {
    9ec8:	6863      	ldr	r3, [r4, #4]
    9eca:	b90b      	cbnz	r3, 9ed0 <device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    9ecc:	340c      	adds	r4, #12
    9ece:	e7ef      	b.n	9eb0 <device_get_binding+0x10>
		if (!strcmp(name, info->config->name)) {
    9ed0:	6823      	ldr	r3, [r4, #0]
    9ed2:	4628      	mov	r0, r5
    9ed4:	6819      	ldr	r1, [r3, #0]
    9ed6:	f7f6 fb6d 	bl	5b4 <strcmp>
    9eda:	2800      	cmp	r0, #0
    9edc:	d1f6      	bne.n	9ecc <device_get_binding+0x2c>
}
    9ede:	4620      	mov	r0, r4
    9ee0:	bd70      	pop	{r4, r5, r6, pc}
    9ee2:	bf00      	nop
    9ee4:	20006290 	.word	0x20006290
    9ee8:	20006200 	.word	0x20006200

00009eec <_sys_power_save_idle_exit>:
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
    9eec:	1c43      	adds	r3, r0, #1
    9eee:	d003      	beq.n	9ef8 <_sys_power_save_idle_exit+0xc>
    9ef0:	4b03      	ldr	r3, [pc, #12]	; (9f00 <_sys_power_save_idle_exit+0x14>)
    9ef2:	681b      	ldr	r3, [r3, #0]
    9ef4:	4298      	cmp	r0, r3
    9ef6:	db01      	blt.n	9efc <_sys_power_save_idle_exit+0x10>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
    9ef8:	f7f7 bf58 	b.w	1dac <_timer_idle_exit>
    9efc:	4770      	bx	lr
    9efe:	bf00      	nop
    9f00:	200061f0 	.word	0x200061f0

00009f04 <idle>:
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9f04:	4d0f      	ldr	r5, [pc, #60]	; (9f44 <idle+0x40>)
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    9f06:	b580      	push	{r7, lr}
	if (_must_enter_tickless_idle(ticks)) {
    9f08:	4f0f      	ldr	r7, [pc, #60]	; (9f48 <idle+0x44>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f0a:	f105 0610 	add.w	r6, r5, #16
	__asm__ volatile(
    9f0e:	f04f 0220 	mov.w	r2, #32
    9f12:	f3ef 8311 	mrs	r3, BASEPRI
    9f16:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    9f1a:	692b      	ldr	r3, [r5, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f1c:	42b3      	cmp	r3, r6
    9f1e:	d00a      	beq.n	9f36 <idle+0x32>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    9f20:	b14b      	cbz	r3, 9f36 <idle+0x32>
    9f22:	691c      	ldr	r4, [r3, #16]
    9f24:	1c63      	adds	r3, r4, #1
    9f26:	d008      	beq.n	9f3a <idle+0x36>
    9f28:	683b      	ldr	r3, [r7, #0]
    9f2a:	42a3      	cmp	r3, r4
    9f2c:	dd05      	ble.n	9f3a <idle+0x36>
	_kernel.idle = ticks;
    9f2e:	61ac      	str	r4, [r5, #24]
	k_cpu_idle();
    9f30:	f7f6 ff64 	bl	dfc <k_cpu_idle>
    9f34:	e7eb      	b.n	9f0e <idle+0xa>
    9f36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		_timer_idle_enter(ticks);
    9f3a:	4620      	mov	r0, r4
    9f3c:	f7f7 ff22 	bl	1d84 <_timer_idle_enter>
    9f40:	e7f5      	b.n	9f2e <idle+0x2a>
    9f42:	bf00      	nop
    9f44:	20002084 	.word	0x20002084
    9f48:	200061f0 	.word	0x200061f0

00009f4c <_bss_zero>:
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    9f4c:	4802      	ldr	r0, [pc, #8]	; (9f58 <_bss_zero+0xc>)
    9f4e:	4a03      	ldr	r2, [pc, #12]	; (9f5c <_bss_zero+0x10>)
    9f50:	2100      	movs	r1, #0
    9f52:	1a12      	subs	r2, r2, r0
    9f54:	f7f6 bb7c 	b.w	650 <memset>
    9f58:	20000000 	.word	0x20000000
    9f5c:	200035f8 	.word	0x200035f8

00009f60 <_data_copy>:
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    9f60:	4802      	ldr	r0, [pc, #8]	; (9f6c <_data_copy+0xc>)
    9f62:	4a03      	ldr	r2, [pc, #12]	; (9f70 <_data_copy+0x10>)
    9f64:	4903      	ldr	r1, [pc, #12]	; (9f74 <_data_copy+0x14>)
    9f66:	1a12      	subs	r2, r2, r0
    9f68:	f7f6 bb46 	b.w	5f8 <memcpy>
    9f6c:	20005f90 	.word	0x20005f90
    9f70:	2000632c 	.word	0x2000632c
    9f74:	0000b910 	.word	0x0000b910

00009f78 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    9f78:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    9f7a:	2002      	movs	r0, #2
    9f7c:	f7ff ff7c 	bl	9e78 <_sys_device_do_config_level>
	if (boot_delay > 0) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
    9f80:	4908      	ldr	r1, [pc, #32]	; (9fa4 <bg_thread_main+0x2c>)
    9f82:	4809      	ldr	r0, [pc, #36]	; (9fa8 <bg_thread_main+0x30>)
    9f84:	f7f7 fa0c 	bl	13a0 <printk>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    9f88:	2003      	movs	r0, #3
    9f8a:	f7ff ff75 	bl	9e78 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    9f8e:	f000 fdfb 	bl	ab88 <_init_static_threads>
	__main_time_stamp = (u64_t)k_cycle_get_32();
#endif

	extern void main(void);

	main();
    9f92:	f7f6 fbf5 	bl	780 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.user_options &= ~K_ESSENTIAL;
    9f96:	4a05      	ldr	r2, [pc, #20]	; (9fac <bg_thread_main+0x34>)
    9f98:	7a13      	ldrb	r3, [r2, #8]
    9f9a:	f023 0301 	bic.w	r3, r3, #1
    9f9e:	7213      	strb	r3, [r2, #8]
    9fa0:	bd08      	pop	{r3, pc}
    9fa2:	bf00      	nop
    9fa4:	0000b8c4 	.word	0x0000b8c4
    9fa8:	0000b8e0 	.word	0x0000b8e0
    9fac:	2000201c 	.word	0x2000201c

00009fb0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    9fb0:	b580      	push	{r7, lr}
    9fb2:	b086      	sub	sp, #24
    9fb4:	4e32      	ldr	r6, [pc, #200]	; (a080 <_Cstart+0xd0>)
    9fb6:	af06      	add	r7, sp, #24
	_IntLibInit();
    9fb8:	f7f6 fcda 	bl	970 <_IntLibInit>
    9fbc:	2324      	movs	r3, #36	; 0x24
    9fbe:	199a      	adds	r2, r3, r6
	list->head = (sys_dnode_t *)list;
    9fc0:	519a      	str	r2, [r3, r6]
    9fc2:	3308      	adds	r3, #8
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    9fc4:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
	list->tail = (sys_dnode_t *)list;
    9fc8:	6052      	str	r2, [r2, #4]
    9fca:	d1f8      	bne.n	9fbe <_Cstart+0xe>
	_ready_q.cache = _main_thread;
    9fcc:	4d2d      	ldr	r5, [pc, #180]	; (a084 <_Cstart+0xd4>)
	_setup_new_thread(_main_thread, _main_stack,
    9fce:	f8df 80dc 	ldr.w	r8, [pc, #220]	; a0ac <_Cstart+0xfc>
	_ready_q.cache = _main_thread;
    9fd2:	61f5      	str	r5, [r6, #28]
	_setup_new_thread(_main_thread, _main_stack,
    9fd4:	2400      	movs	r4, #0
    9fd6:	f04f 0901 	mov.w	r9, #1
    9fda:	4643      	mov	r3, r8
    9fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9fe0:	4929      	ldr	r1, [pc, #164]	; (a088 <_Cstart+0xd8>)
    9fe2:	f8cd 9010 	str.w	r9, [sp, #16]
    9fe6:	4628      	mov	r0, r5
    9fe8:	9403      	str	r4, [sp, #12]
    9fea:	9402      	str	r4, [sp, #8]
    9fec:	9401      	str	r4, [sp, #4]
    9fee:	9400      	str	r4, [sp, #0]
    9ff0:	f000 fd82 	bl	aaf8 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9ff4:	7a6b      	ldrb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
    9ff6:	4628      	mov	r0, r5
    9ff8:	f023 0304 	bic.w	r3, r3, #4
    9ffc:	726b      	strb	r3, [r5, #9]
    9ffe:	f000 f97d 	bl	a2fc <_add_thread_to_ready_q>
	_setup_new_thread(thr, stack,
    a002:	230f      	movs	r3, #15
    a004:	9303      	str	r3, [sp, #12]
    a006:	4921      	ldr	r1, [pc, #132]	; (a08c <_Cstart+0xdc>)
    a008:	f8cd 9010 	str.w	r9, [sp, #16]
    a00c:	9402      	str	r4, [sp, #8]
    a00e:	9401      	str	r4, [sp, #4]
    a010:	9400      	str	r4, [sp, #0]
    a012:	4b1f      	ldr	r3, [pc, #124]	; (a090 <_Cstart+0xe0>)
    a014:	481f      	ldr	r0, [pc, #124]	; (a094 <_Cstart+0xe4>)
    a016:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a01a:	f000 fd6d 	bl	aaf8 <_setup_new_thread>
    a01e:	4b1d      	ldr	r3, [pc, #116]	; (a094 <_Cstart+0xe4>)
    a020:	4a1c      	ldr	r2, [pc, #112]	; (a094 <_Cstart+0xe4>)
    a022:	7a5b      	ldrb	r3, [r3, #9]
    a024:	f023 0304 	bic.w	r3, r3, #4
    a028:	7253      	strb	r3, [r2, #9]
	_add_thread_to_ready_q(thr);
    a02a:	4610      	mov	r0, r2
    a02c:	f000 f966 	bl	a2fc <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
    a030:	4b19      	ldr	r3, [pc, #100]	; (a098 <_Cstart+0xe8>)
    a032:	6133      	str	r3, [r6, #16]
	list->tail = (sys_dnode_t *)list;
    a034:	6173      	str	r3, [r6, #20]
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
#ifdef CONFIG_MPU_REQUIRES_POWER_OF_TWO_ALIGNMENT
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
    a036:	4b19      	ldr	r3, [pc, #100]	; (a09c <_Cstart+0xec>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a038:	f383 8808 	msr	MSP, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a03c:	4b18      	ldr	r3, [pc, #96]	; (a0a0 <_Cstart+0xf0>)
    a03e:	22e0      	movs	r2, #224	; 0xe0
    a040:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    a044:	77dc      	strb	r4, [r3, #31]
    a046:	761c      	strb	r4, [r3, #24]
    a048:	765c      	strb	r4, [r3, #25]
    a04a:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a04c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a04e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    a052:	625a      	str	r2, [r3, #36]	; 0x24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void kernel_arch_init(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    a054:	f7f6 fe42 	bl	cdc <_FaultInit>
	_CpuIdleInit();
    a058:	f7f6 feca 	bl	df0 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a05c:	4620      	mov	r0, r4
    a05e:	f7ff ff0b 	bl	9e78 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a062:	4648      	mov	r0, r9
    a064:	f7ff ff08 	bl	9e78 <_sys_device_do_config_level>
		MPU_GUARD_ALIGN_AND_SIZE;
#else
	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
#endif
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    a068:	4b0e      	ldr	r3, [pc, #56]	; (a0a4 <_Cstart+0xf4>)

	_current = main_thread;
    a06a:	60b5      	str	r5, [r6, #8]
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
    a06c:	f023 0307 	bic.w	r3, r3, #7

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    a070:	4a0d      	ldr	r2, [pc, #52]	; (a0a8 <_Cstart+0xf8>)
    a072:	f383 8809 	msr	PSP, r3
    a076:	2100      	movs	r1, #0
    a078:	f381 8811 	msr	BASEPRI, r1
    a07c:	4640      	mov	r0, r8
    a07e:	4710      	bx	r2
    a080:	20002084 	.word	0x20002084
    a084:	2000201c 	.word	0x2000201c
    a088:	20004e50 	.word	0x20004e50
    a08c:	20005250 	.word	0x20005250
    a090:	00009f05 	.word	0x00009f05
    a094:	20001fb4 	.word	0x20001fb4
    a098:	20002094 	.word	0x20002094
    a09c:	20005b90 	.word	0x20005b90
    a0a0:	e000ed00 	.word	0xe000ed00
    a0a4:	20005250 	.word	0x20005250
    a0a8:	0000aa91 	.word	0x0000aa91
    a0ac:	00009f79 	.word	0x00009f79

0000a0b0 <get_bit_ptr>:

/* Places a 32 bit output pointer in word, and an integer bit index
 * within that word as the return value
 */
static int get_bit_ptr(struct k_mem_pool *p, int level, int bn, u32_t **word)
{
    a0b0:	b510      	push	{r4, lr}
	u32_t *bitarray = level <= p->max_inline_level ?
    a0b2:	7ac4      	ldrb	r4, [r0, #11]
    a0b4:	68c0      	ldr	r0, [r0, #12]
		&p->levels[level].bits : p->levels[level].bits_p;
    a0b6:	428c      	cmp	r4, r1
    a0b8:	f04f 040c 	mov.w	r4, #12
    a0bc:	bfb6      	itet	lt
    a0be:	4361      	mullt	r1, r4
    a0c0:	fb04 0101 	mlage	r1, r4, r1, r0
    a0c4:	5841      	ldrlt	r1, [r0, r1]

	*word = &bitarray[bn / 32];
    a0c6:	2420      	movs	r4, #32
    a0c8:	fb92 f4f4 	sdiv	r4, r2, r4
    a0cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    a0d0:	6019      	str	r1, [r3, #0]

	return bn & 0x1f;
}
    a0d2:	f002 001f 	and.w	r0, r2, #31
    a0d6:	bd10      	pop	{r4, pc}

0000a0d8 <set_free_bit>:

static void set_free_bit(struct k_mem_pool *p, int level, int bn)
{
    a0d8:	b507      	push	{r0, r1, r2, lr}
	u32_t *word;
	int bit = get_bit_ptr(p, level, bn, &word);
    a0da:	ab01      	add	r3, sp, #4
    a0dc:	f7ff ffe8 	bl	a0b0 <get_bit_ptr>

	*word |= (1<<bit);
    a0e0:	9a01      	ldr	r2, [sp, #4]
    a0e2:	2301      	movs	r3, #1
    a0e4:	fa03 f000 	lsl.w	r0, r3, r0
    a0e8:	6813      	ldr	r3, [r2, #0]
    a0ea:	4303      	orrs	r3, r0
    a0ec:	6013      	str	r3, [r2, #0]
}
    a0ee:	b003      	add	sp, #12
    a0f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000a0f4 <init_static_pools>:
		set_free_bit(p, 0, i);
	}
}

int init_static_pools(struct device *unused)
{
    a0f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0f8:	4c30      	ldr	r4, [pc, #192]	; (a1bc <init_static_pools+0xc8>)
	ARG_UNUSED(unused);
	struct k_mem_pool *p;

	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    a0fa:	4e31      	ldr	r6, [pc, #196]	; (a1c0 <init_static_pools+0xcc>)
		sys_dlist_init(&p->levels[i].free_list);
    a0fc:	270c      	movs	r7, #12
    a0fe:	f1a4 0510 	sub.w	r5, r4, #16
	for (p = _k_mem_pool_list_start; p < _k_mem_pool_list_end; p++) {
    a102:	42b5      	cmp	r5, r6
    a104:	d302      	bcc.n	a10c <init_static_pools+0x18>
		init_mem_pool(p);
	}

	return 0;
}
    a106:	2000      	movs	r0, #0
    a108:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    a10c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    a110:	f834 ec08 	ldrh.w	lr, [r4, #-8]
	u32_t *bits = p->buf + buflen;
    a114:	f854 0c10 	ldr.w	r0, [r4, #-16]
	list->head = (sys_dnode_t *)list;
    a118:	6024      	str	r4, [r4, #0]
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    a11a:	fb03 fe0e 	mul.w	lr, r3, lr
	u32_t *bits = p->buf + buflen;
    a11e:	4470      	add	r0, lr
	list->tail = (sys_dnode_t *)list;
    a120:	6064      	str	r4, [r4, #4]
	for (i = 0; i < p->n_levels; i++) {
    a122:	2100      	movs	r1, #0
			bits += (nblocks + 31)/32;
    a124:	f04f 0c20 	mov.w	ip, #32
	for (i = 0; i < p->n_levels; i++) {
    a128:	f814 2c06 	ldrb.w	r2, [r4, #-6]
    a12c:	4291      	cmp	r1, r2
    a12e:	db07      	blt.n	a140 <init_static_pools+0x4c>
    a130:	f04f 0800 	mov.w	r8, #0
	for (i = 0; i < p->n_max; i++) {
    a134:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    a138:	4598      	cmp	r8, r3
    a13a:	db24      	blt.n	a186 <init_static_pools+0x92>
    a13c:	3418      	adds	r4, #24
    a13e:	e7de      	b.n	a0fe <init_static_pools+0xa>
		sys_dlist_init(&p->levels[i].free_list);
    a140:	f854 ac04 	ldr.w	sl, [r4, #-4]
		int nblocks = buflen / sz;
    a144:	fbbe f2f3 	udiv	r2, lr, r3
		sys_dlist_init(&p->levels[i].free_list);
    a148:	fb07 f901 	mul.w	r9, r7, r1
		if (nblocks < 32) {
    a14c:	2a1f      	cmp	r2, #31
		sys_dlist_init(&p->levels[i].free_list);
    a14e:	eb0a 0809 	add.w	r8, sl, r9
		sz = _ALIGN4(sz / 4);
    a152:	ea4f 0393 	mov.w	r3, r3, lsr #2
		sys_dlist_init(&p->levels[i].free_list);
    a156:	f108 0b04 	add.w	fp, r8, #4
			bits += (nblocks + 31)/32;
    a15a:	bfc8      	it	gt
    a15c:	321f      	addgt	r2, #31
		sz = _ALIGN4(sz / 4);
    a15e:	f103 0303 	add.w	r3, r3, #3
	list->head = (sys_dnode_t *)list;
    a162:	f8c8 b004 	str.w	fp, [r8, #4]
	list->tail = (sys_dnode_t *)list;
    a166:	f8c8 b008 	str.w	fp, [r8, #8]
			bits += (nblocks + 31)/32;
    a16a:	bfca      	itet	gt
    a16c:	fb92 f2fc 	sdivgt	r2, r2, ip
			p->max_inline_level = i;
    a170:	f804 1c05 	strble.w	r1, [r4, #-5]
			p->levels[i].bits_p = bits;
    a174:	f84a 0009 	strgt.w	r0, [sl, r9]
		sz = _ALIGN4(sz / 4);
    a178:	f023 0303 	bic.w	r3, r3, #3
			bits += (nblocks + 31)/32;
    a17c:	bfc8      	it	gt
    a17e:	eb00 0082 	addgt.w	r0, r0, r2, lsl #2
	for (i = 0; i < p->n_levels; i++) {
    a182:	3101      	adds	r1, #1
    a184:	e7d0      	b.n	a128 <init_static_pools+0x34>
	return p->buf + lsz * block;
    a186:	f854 2c0c 	ldr.w	r2, [r4, #-12]
		sys_dlist_append(&p->levels[0].free_list, block);
    a18a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return p->buf + lsz * block;
    a18e:	f854 0c10 	ldr.w	r0, [r4, #-16]
    a192:	fb02 f208 	mul.w	r2, r2, r8
		sys_dlist_append(&p->levels[0].free_list, block);
    a196:	f103 0e04 	add.w	lr, r3, #4
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    a19a:	f840 e002 	str.w	lr, [r0, r2]
	return p->buf + lsz * block;
    a19e:	1881      	adds	r1, r0, r2
	node->prev = list->tail;
    a1a0:	689a      	ldr	r2, [r3, #8]
    a1a2:	604a      	str	r2, [r1, #4]

	list->tail->next = node;
    a1a4:	689a      	ldr	r2, [r3, #8]
		set_free_bit(p, 0, i);
    a1a6:	4628      	mov	r0, r5
    a1a8:	6011      	str	r1, [r2, #0]
	list->tail = node;
    a1aa:	6099      	str	r1, [r3, #8]
    a1ac:	4642      	mov	r2, r8
    a1ae:	2100      	movs	r1, #0
    a1b0:	f7ff ff92 	bl	a0d8 <set_free_bit>
	for (i = 0; i < p->n_max; i++) {
    a1b4:	f108 0801 	add.w	r8, r8, #1
    a1b8:	e7bc      	b.n	a134 <init_static_pools+0x40>
    a1ba:	bf00      	nop
    a1bc:	200062d4 	.word	0x200062d4
    a1c0:	200062c4 	.word	0x200062c4

0000a1c4 <k_queue_init>:
	list->head = NULL;
    a1c4:	2300      	movs	r3, #0
    a1c6:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
    a1c8:	6043      	str	r3, [r0, #4]
void k_queue_init(struct k_queue *queue)
{
	sys_slist_init(&queue->data_q);
	sys_dlist_init(&queue->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&queue->poll_events);
    a1ca:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
    a1ce:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    a1d0:	60c3      	str	r3, [r0, #12]
    a1d2:	4770      	bx	lr

0000a1d4 <k_queue_insert>:

	irq_unlock(key);
}

void k_queue_insert(struct k_queue *queue, void *prev, void *data)
{
    a1d4:	b510      	push	{r4, lr}
    a1d6:	f04f 0320 	mov.w	r3, #32
    a1da:	f3ef 8411 	mrs	r4, BASEPRI
    a1de:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
    a1e2:	b931      	cbnz	r1, a1f2 <k_queue_insert+0x1e>
	node->next = list->head;
    a1e4:	6803      	ldr	r3, [r0, #0]
    a1e6:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
    a1e8:	6843      	ldr	r3, [r0, #4]
	list->head = node;
    a1ea:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
    a1ec:	b943      	cbnz	r3, a200 <k_queue_insert+0x2c>
		list->tail = node;
    a1ee:	6042      	str	r2, [r0, #4]
    a1f0:	e006      	b.n	a200 <k_queue_insert+0x2c>
	} else if (!prev->next) {
    a1f2:	680b      	ldr	r3, [r1, #0]
	node->next = NULL;
    a1f4:	6013      	str	r3, [r2, #0]
	} else if (!prev->next) {
    a1f6:	b98b      	cbnz	r3, a21c <k_queue_insert+0x48>
	if (!list->tail) {
    a1f8:	6843      	ldr	r3, [r0, #4]
    a1fa:	b96b      	cbnz	r3, a218 <k_queue_insert+0x44>
		list->tail = node;
    a1fc:	6042      	str	r2, [r0, #4]
		list->head = node;
    a1fe:	6002      	str	r2, [r0, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
    a200:	2104      	movs	r1, #4
    a202:	3008      	adds	r0, #8
    a204:	f000 ff7e 	bl	b104 <_handle_obj_poll_events>
#endif /* !CONFIG_POLL */

	sys_slist_insert(&queue->data_q, prev, data);

#if defined(CONFIG_POLL)
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    a208:	b150      	cbz	r0, a220 <k_queue_insert+0x4c>
	_update_time_slice_before_swap();
    a20a:	f000 fa23 	bl	a654 <_update_time_slice_before_swap>
	return __swap(key);
    a20e:	4620      	mov	r0, r4
		return;
	}
#endif /* CONFIG_POLL */

	irq_unlock(key);
}
    a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a214:	f7f6 bbb8 	b.w	988 <__swap>
		list->tail->next = node;
    a218:	601a      	str	r2, [r3, #0]
    a21a:	e7e8      	b.n	a1ee <k_queue_insert+0x1a>
		prev->next = node;
    a21c:	600a      	str	r2, [r1, #0]
    a21e:	e7ef      	b.n	a200 <k_queue_insert+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a220:	f384 8811 	msr	BASEPRI, r4
    a224:	bd10      	pop	{r4, pc}

0000a226 <k_queue_append>:

void k_queue_append(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, queue->data_q.tail, data);
    a226:	460a      	mov	r2, r1
    a228:	6841      	ldr	r1, [r0, #4]
    a22a:	f7ff bfd3 	b.w	a1d4 <k_queue_insert>

0000a22e <k_queue_prepend>:
}

void k_queue_prepend(struct k_queue *queue, void *data)
{
	return k_queue_insert(queue, NULL, data);
    a22e:	460a      	mov	r2, r1
    a230:	2100      	movs	r1, #0
    a232:	f7ff bfcf 	b.w	a1d4 <k_queue_insert>

0000a236 <k_queue_append_list>:
}

void k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
    a236:	b510      	push	{r4, lr}
	__asm__ volatile(
    a238:	f04f 0320 	mov.w	r3, #32
    a23c:	f3ef 8411 	mrs	r4, BASEPRI
    a240:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
    a244:	6843      	ldr	r3, [r0, #4]
    a246:	b96b      	cbnz	r3, a264 <k_queue_append_list+0x2e>
		list->head = (sys_snode_t *)head;
    a248:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
    a24a:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
    a24c:	2104      	movs	r1, #4
    a24e:	3008      	adds	r0, #8
    a250:	f000 ff58 	bl	b104 <_handle_obj_poll_events>
			return;
		}
	}
#else
	sys_slist_append_list(&queue->data_q, head, tail);
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
    a254:	b140      	cbz	r0, a268 <k_queue_append_list+0x32>
	_update_time_slice_before_swap();
    a256:	f000 f9fd 	bl	a654 <_update_time_slice_before_swap>
	return __swap(key);
    a25a:	4620      	mov	r0, r4
		return;
	}
#endif /* !CONFIG_POLL */

	irq_unlock(key);
}
    a25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a260:	f7f6 bb92 	b.w	988 <__swap>
		list->tail->next = (sys_snode_t *)head;
    a264:	6019      	str	r1, [r3, #0]
    a266:	e7f0      	b.n	a24a <k_queue_append_list+0x14>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a268:	f384 8811 	msr	BASEPRI, r4
    a26c:	bd10      	pop	{r4, pc}

0000a26e <k_queue_get>:
	return val;
}
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
    a26e:	b530      	push	{r4, r5, lr}
    a270:	4604      	mov	r4, r0
    a272:	b087      	sub	sp, #28
    a274:	460d      	mov	r5, r1
	__asm__ volatile(
    a276:	f04f 0220 	mov.w	r2, #32
    a27a:	f3ef 8311 	mrs	r3, BASEPRI
    a27e:	f382 8811 	msr	BASEPRI, r2
    a282:	6802      	ldr	r2, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
    a284:	b152      	cbz	r2, a29c <k_queue_get+0x2e>
	list->head = node->next;
    a286:	6811      	ldr	r1, [r2, #0]
    a288:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
    a28a:	6840      	ldr	r0, [r0, #4]
    a28c:	4282      	cmp	r2, r0
		list->tail = list->head;
    a28e:	bf08      	it	eq
    a290:	6061      	streq	r1, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a292:	f383 8811 	msr	BASEPRI, r3
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
    a296:	4610      	mov	r0, r2
    a298:	b007      	add	sp, #28
    a29a:	bd30      	pop	{r4, r5, pc}
	if (timeout == K_NO_WAIT) {
    a29c:	b919      	cbnz	r1, a2a6 <k_queue_get+0x38>
    a29e:	f383 8811 	msr	BASEPRI, r3
			return NULL;
    a2a2:	2200      	movs	r2, #0
    a2a4:	e7f7      	b.n	a296 <k_queue_get+0x28>
    a2a6:	f383 8811 	msr	BASEPRI, r3
	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
    a2aa:	2104      	movs	r1, #4
    a2ac:	4603      	mov	r3, r0
    a2ae:	eb0d 0001 	add.w	r0, sp, r1
    a2b2:	f000 fe6f 	bl	af94 <k_poll_event_init>
		event.state = K_POLL_STATE_NOT_READY;
    a2b6:	f89d 3011 	ldrb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    a2ba:	462a      	mov	r2, r5
		event.state = K_POLL_STATE_NOT_READY;
    a2bc:	f36f 1307 	bfc	r3, #4, #4
		err = k_poll(&event, 1, timeout);
    a2c0:	2101      	movs	r1, #1
    a2c2:	a801      	add	r0, sp, #4
		event.state = K_POLL_STATE_NOT_READY;
    a2c4:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
    a2c8:	f000 fe78 	bl	afbc <k_poll>
		if (err) {
    a2cc:	2800      	cmp	r0, #0
    a2ce:	d1e8      	bne.n	a2a2 <k_queue_get+0x34>
	__asm__ volatile(
    a2d0:	f04f 0320 	mov.w	r3, #32
    a2d4:	f3ef 8111 	mrs	r1, BASEPRI
    a2d8:	f383 8811 	msr	BASEPRI, r3
    a2dc:	6822      	ldr	r2, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    a2de:	b12a      	cbz	r2, a2ec <k_queue_get+0x7e>
	if (list->tail == node) {
    a2e0:	6860      	ldr	r0, [r4, #4]
	list->head = node->next;
    a2e2:	6813      	ldr	r3, [r2, #0]
    a2e4:	6023      	str	r3, [r4, #0]
	if (list->tail == node) {
    a2e6:	4282      	cmp	r2, r0
		list->tail = list->head;
    a2e8:	bf08      	it	eq
    a2ea:	6063      	streq	r3, [r4, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a2ec:	f381 8811 	msr	BASEPRI, r1
	} while (!val && timeout == K_FOREVER);
    a2f0:	2a00      	cmp	r2, #0
    a2f2:	d1d0      	bne.n	a296 <k_queue_get+0x28>
    a2f4:	1c6b      	adds	r3, r5, #1
    a2f6:	d0de      	beq.n	a2b6 <k_queue_get+0x48>
    a2f8:	e7d3      	b.n	a2a2 <k_queue_get+0x34>
	...

0000a2fc <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    a2fc:	b530      	push	{r4, r5, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    a2fe:	f990 300a 	ldrsb.w	r3, [r0, #10]
	*bmap |= _get_ready_q_prio_bit(prio);
    a302:	4911      	ldr	r1, [pc, #68]	; (a348 <_add_thread_to_ready_q+0x4c>)
	return prio + _NUM_COOP_PRIO;
    a304:	f103 0410 	add.w	r4, r3, #16
	return (prio + _NUM_COOP_PRIO) >> 5;
    a308:	1162      	asrs	r2, r4, #5
    a30a:	3206      	adds	r2, #6
    a30c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    a310:	f004 051f 	and.w	r5, r4, #31
    a314:	2401      	movs	r4, #1
    a316:	40ac      	lsls	r4, r5
    a318:	6895      	ldr	r5, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a31a:	3314      	adds	r3, #20
	*bmap |= _get_ready_q_prio_bit(prio);
    a31c:	432c      	orrs	r4, r5
	sys_dlist_t *q = &_ready_q.q[q_index];
    a31e:	00db      	lsls	r3, r3, #3
	*bmap |= _get_ready_q_prio_bit(prio);
    a320:	6094      	str	r4, [r2, #8]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a322:	1d1a      	adds	r2, r3, #4
    a324:	440a      	add	r2, r1
	node->prev = list->tail;
    a326:	440b      	add	r3, r1
	node->next = list;
    a328:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
    a32a:	689a      	ldr	r2, [r3, #8]
    a32c:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
    a32e:	689a      	ldr	r2, [r3, #8]
    a330:	6010      	str	r0, [r2, #0]
	list->tail = node;
    a332:	6098      	str	r0, [r3, #8]
	sys_dlist_append(q, &thread->base.k_q_node);

# ifndef CONFIG_SMP
	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    a334:	69cb      	ldr	r3, [r1, #28]
    a336:	f990 400a 	ldrsb.w	r4, [r0, #10]
    a33a:	f993 200a 	ldrsb.w	r2, [r3, #10]
    a33e:	4294      	cmp	r4, r2
    a340:	bfa8      	it	ge
    a342:	4618      	movge	r0, r3
    a344:	61c8      	str	r0, [r1, #28]
    a346:	bd30      	pop	{r4, r5, pc}
    a348:	20002084 	.word	0x20002084

0000a34c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a34c:	7a42      	ldrb	r2, [r0, #9]
    a34e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a352:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a356:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a358:	d104      	bne.n	a364 <_ready_thread+0x18>
    a35a:	6a03      	ldr	r3, [r0, #32]
    a35c:	3301      	adds	r3, #1
    a35e:	d101      	bne.n	a364 <_ready_thread+0x18>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    a360:	f7ff bfcc 	b.w	a2fc <_add_thread_to_ready_q>
    a364:	4770      	bx	lr
	...

0000a368 <_add_timeout>:
{
    a368:	b570      	push	{r4, r5, r6, lr}
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    a36a:	610b      	str	r3, [r1, #16]
	timeout->thread = thread;
    a36c:	6088      	str	r0, [r1, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    a36e:	60ca      	str	r2, [r1, #12]
	if (!timeout_in_ticks) {
    a370:	bb13      	cbnz	r3, a3b8 <_add_timeout+0x50>
	__asm__ volatile(
    a372:	f04f 0220 	mov.w	r2, #32
    a376:	f3ef 8411 	mrs	r4, BASEPRI
    a37a:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    a37e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a382:	610a      	str	r2, [r1, #16]
	if (thread) {
    a384:	b180      	cbz	r0, a3a8 <_add_timeout+0x40>
	if (timeout_obj->wait_q) {
    a386:	68ca      	ldr	r2, [r1, #12]
    a388:	b14a      	cbz	r2, a39e <_add_timeout+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    a38a:	e890 0006 	ldmia.w	r0, {r1, r2}
    a38e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    a390:	6801      	ldr	r1, [r0, #0]
    a392:	604a      	str	r2, [r1, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a394:	7a42      	ldrb	r2, [r0, #9]
		thread->base.timeout.wait_q = NULL;
    a396:	61c3      	str	r3, [r0, #28]
    a398:	f022 0202 	bic.w	r2, r2, #2
    a39c:	7242      	strb	r2, [r0, #9]
		_ready_thread(thread);
    a39e:	f7ff ffd5 	bl	a34c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a3a2:	f384 8811 	msr	BASEPRI, r4
    a3a6:	bd70      	pop	{r4, r5, r6, pc}
    a3a8:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
    a3ac:	694b      	ldr	r3, [r1, #20]
    a3ae:	b32b      	cbz	r3, a3fc <_add_timeout+0x94>
			timeout->func(timeout);
    a3b0:	4608      	mov	r0, r1
}
    a3b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			timeout->func(timeout);
    a3b6:	4718      	bx	r3
	return list->head == list;
    a3b8:	4a11      	ldr	r2, [pc, #68]	; (a400 <_add_timeout+0x98>)
    a3ba:	4610      	mov	r0, r2
    a3bc:	f850 3f10 	ldr.w	r3, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a3c0:	4283      	cmp	r3, r0
    a3c2:	d10c      	bne.n	a3de <_add_timeout+0x76>
	node->next = list;
    a3c4:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    a3c6:	6953      	ldr	r3, [r2, #20]
    a3c8:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    a3ca:	6953      	ldr	r3, [r2, #20]
    a3cc:	6019      	str	r1, [r3, #0]
	list->tail = node;
    a3ce:	6151      	str	r1, [r2, #20]
    a3d0:	bd70      	pop	{r4, r5, r6, pc}
		*delta -= in_q->delta_ticks_from_prev;
    a3d2:	1b64      	subs	r4, r4, r5
    a3d4:	610c      	str	r4, [r1, #16]
	return (node == list->tail) ? NULL : node->next;
    a3d6:	6954      	ldr	r4, [r2, #20]
    a3d8:	42a3      	cmp	r3, r4
    a3da:	d0f3      	beq.n	a3c4 <_add_timeout+0x5c>
    a3dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d0f0      	beq.n	a3c4 <_add_timeout+0x5c>
		if (*delta <= in_q->delta_ticks_from_prev) {
    a3e2:	690c      	ldr	r4, [r1, #16]
    a3e4:	691d      	ldr	r5, [r3, #16]
    a3e6:	42ac      	cmp	r4, r5
    a3e8:	dcf3      	bgt.n	a3d2 <_add_timeout+0x6a>
		node->prev = insert_point->prev;
    a3ea:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    a3ec:	1b2c      	subs	r4, r5, r4
    a3ee:	611c      	str	r4, [r3, #16]
    a3f0:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    a3f2:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    a3f4:	685a      	ldr	r2, [r3, #4]
    a3f6:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    a3f8:	6059      	str	r1, [r3, #4]
    a3fa:	bd70      	pop	{r4, r5, r6, pc}
    a3fc:	bd70      	pop	{r4, r5, r6, pc}
    a3fe:	bf00      	nop
    a400:	20002084 	.word	0x20002084

0000a404 <_remove_thread_from_ready_q>:
	node->prev->next = node->next;
    a404:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    a408:	b510      	push	{r4, lr}
#if defined(CONFIG_MULTITHREADING) && !defined(CONFIG_SMP)
	int q_index = _get_ready_q_q_index(thread->base.prio);
    a40a:	f990 200a 	ldrsb.w	r2, [r0, #10]
    a40e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    a410:	6801      	ldr	r1, [r0, #0]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a412:	3214      	adds	r2, #20
    a414:	604b      	str	r3, [r1, #4]
    a416:	4b14      	ldr	r3, [pc, #80]	; (a468 <_remove_thread_from_ready_q+0x64>)
    a418:	00d2      	lsls	r2, r2, #3
    a41a:	1d11      	adds	r1, r2, #4
	return list->head == list;
    a41c:	441a      	add	r2, r3
    a41e:	4419      	add	r1, r3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    a420:	6852      	ldr	r2, [r2, #4]
    a422:	428a      	cmp	r2, r1
    a424:	d10f      	bne.n	a446 <_remove_thread_from_ready_q+0x42>
		clear_ready_q_prio_bit(thread->base.prio);
    a426:	f990 100a 	ldrsb.w	r1, [r0, #10]
	return (prio + _NUM_COOP_PRIO) >> 5;
    a42a:	3110      	adds	r1, #16
    a42c:	114a      	asrs	r2, r1, #5
	*bmap &= ~_get_ready_q_prio_bit(prio);
    a42e:	3206      	adds	r2, #6
    a430:	eb03 0282 	add.w	r2, r3, r2, lsl #2
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
    a434:	2401      	movs	r4, #1
    a436:	f001 011f 	and.w	r1, r1, #31
    a43a:	fa04 f101 	lsl.w	r1, r4, r1
    a43e:	6894      	ldr	r4, [r2, #8]
    a440:	ea24 0401 	bic.w	r4, r4, r1
    a444:	6094      	str	r4, [r2, #8]
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? get_ready_q_head() : *cache;
    a446:	69da      	ldr	r2, [r3, #28]
    a448:	4290      	cmp	r0, r2
    a44a:	d10b      	bne.n	a464 <_remove_thread_from_ready_q+0x60>
	return __builtin_ffs(op);
    a44c:	6a19      	ldr	r1, [r3, #32]
    a44e:	fa91 f2a1 	rbit	r2, r1
    a452:	2900      	cmp	r1, #0
    a454:	fab2 f282 	clz	r2, r2
    a458:	bf08      	it	eq
    a45a:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    a45e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    a462:	6a52      	ldr	r2, [r2, #36]	; 0x24
    a464:	61da      	str	r2, [r3, #28]
    a466:	bd10      	pop	{r4, pc}
    a468:	20002084 	.word	0x20002084

0000a46c <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
    a46c:	b430      	push	{r4, r5}
    a46e:	680c      	ldr	r4, [r1, #0]
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    a470:	42a1      	cmp	r1, r4
    a472:	bf08      	it	eq
    a474:	2400      	moveq	r4, #0
    a476:	b314      	cbz	r4, a4be <_pend_thread+0x52>
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    a478:	f990 500a 	ldrsb.w	r5, [r0, #10]
    a47c:	f994 300a 	ldrsb.w	r3, [r4, #10]
    a480:	429d      	cmp	r5, r3
    a482:	da16      	bge.n	a4b2 <_pend_thread+0x46>
		node->prev = insert_point->prev;
    a484:	6863      	ldr	r3, [r4, #4]
    a486:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    a488:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    a48a:	6863      	ldr	r3, [r4, #4]
    a48c:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    a48e:	6060      	str	r0, [r4, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    a490:	7a43      	ldrb	r3, [r0, #9]
    a492:	f043 0302 	orr.w	r3, r3, #2
    a496:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    a498:	1c53      	adds	r3, r2, #1
    a49a:	d017      	beq.n	a4cc <_pend_thread+0x60>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    a49c:	3209      	adds	r2, #9
    a49e:	230a      	movs	r3, #10
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    a4a0:	bc30      	pop	{r4, r5}
    a4a2:	fbb2 f3f3 	udiv	r3, r2, r3
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    a4a6:	460a      	mov	r2, r1
    a4a8:	3301      	adds	r3, #1
    a4aa:	f100 0110 	add.w	r1, r0, #16
    a4ae:	f7ff bf5b 	b.w	a368 <_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    a4b2:	684b      	ldr	r3, [r1, #4]
    a4b4:	429c      	cmp	r4, r3
    a4b6:	d002      	beq.n	a4be <_pend_thread+0x52>
    a4b8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
    a4ba:	2c00      	cmp	r4, #0
    a4bc:	d1db      	bne.n	a476 <_pend_thread+0xa>
	node->next = list;
    a4be:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    a4c0:	684b      	ldr	r3, [r1, #4]
    a4c2:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    a4c4:	684b      	ldr	r3, [r1, #4]
    a4c6:	6018      	str	r0, [r3, #0]
	list->tail = node;
    a4c8:	6048      	str	r0, [r1, #4]
    a4ca:	e7e1      	b.n	a490 <_pend_thread+0x24>
}
    a4cc:	bc30      	pop	{r4, r5}
    a4ce:	4770      	bx	lr

0000a4d0 <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
    a4d0:	b570      	push	{r4, r5, r6, lr}
	_remove_thread_from_ready_q(_current);
    a4d2:	4c06      	ldr	r4, [pc, #24]	; (a4ec <_pend_current_thread+0x1c>)
{
    a4d4:	460e      	mov	r6, r1
    a4d6:	4605      	mov	r5, r0
	_remove_thread_from_ready_q(_current);
    a4d8:	68a0      	ldr	r0, [r4, #8]
    a4da:	f7ff ff93 	bl	a404 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    a4de:	4632      	mov	r2, r6
    a4e0:	4629      	mov	r1, r5
    a4e2:	68a0      	ldr	r0, [r4, #8]
}
    a4e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_pend_thread(_current, wait_q, timeout);
    a4e8:	f7ff bfc0 	b.w	a46c <_pend_thread>
    a4ec:	20002084 	.word	0x20002084

0000a4f0 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
    a4f0:	4a09      	ldr	r2, [pc, #36]	; (a518 <__must_switch_threads+0x28>)
    a4f2:	6a11      	ldr	r1, [r2, #32]

#ifdef CONFIG_KERNEL_DEBUG
	dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    a4f4:	6892      	ldr	r2, [r2, #8]
    a4f6:	2900      	cmp	r1, #0
    a4f8:	fa91 f3a1 	rbit	r3, r1
    a4fc:	f992 000a 	ldrsb.w	r0, [r2, #10]
    a500:	fab3 f383 	clz	r3, r3
    a504:	bf08      	it	eq
    a506:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
    a50a:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    a50c:	4298      	cmp	r0, r3
    a50e:	bfd4      	ite	le
    a510:	2000      	movle	r0, #0
    a512:	2001      	movgt	r0, #1
    a514:	4770      	bx	lr
    a516:	bf00      	nop
    a518:	20002084 	.word	0x20002084

0000a51c <_reschedule_threads>:
{
    a51c:	b510      	push	{r4, lr}
	return _is_preempt(_current) && __must_switch_threads();
    a51e:	4b0a      	ldr	r3, [pc, #40]	; (a548 <_reschedule_threads+0x2c>)
    a520:	689b      	ldr	r3, [r3, #8]
    a522:	895b      	ldrh	r3, [r3, #10]
    a524:	2b7f      	cmp	r3, #127	; 0x7f
    a526:	4604      	mov	r4, r0
    a528:	d802      	bhi.n	a530 <_reschedule_threads+0x14>
    a52a:	f7ff ffe1 	bl	a4f0 <__must_switch_threads>
    a52e:	b910      	cbnz	r0, a536 <_reschedule_threads+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a530:	f384 8811 	msr	BASEPRI, r4
    a534:	bd10      	pop	{r4, pc}
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
    a536:	4b05      	ldr	r3, [pc, #20]	; (a54c <_reschedule_threads+0x30>)
    a538:	2200      	movs	r2, #0
    a53a:	4620      	mov	r0, r4
}
    a53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_time_slice_elapsed = 0;
    a540:	601a      	str	r2, [r3, #0]
    a542:	f7f6 ba21 	b.w	988 <__swap>
    a546:	bf00      	nop
    a548:	20002084 	.word	0x20002084
    a54c:	20003574 	.word	0x20003574

0000a550 <k_sched_unlock>:
	__asm__ volatile(
    a550:	f04f 0320 	mov.w	r3, #32
    a554:	f3ef 8011 	mrs	r0, BASEPRI
    a558:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
    a55c:	4b03      	ldr	r3, [pc, #12]	; (a56c <k_sched_unlock+0x1c>)
    a55e:	689a      	ldr	r2, [r3, #8]
    a560:	7ad3      	ldrb	r3, [r2, #11]
    a562:	3301      	adds	r3, #1
    a564:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
    a566:	f7ff bfd9 	b.w	a51c <_reschedule_threads>
    a56a:	bf00      	nop
    a56c:	20002084 	.word	0x20002084

0000a570 <_move_thread_to_end_of_prio_q>:
	int q_index = _get_ready_q_q_index(thread->base.prio);
    a570:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    a574:	4a12      	ldr	r2, [pc, #72]	; (a5c0 <_move_thread_to_end_of_prio_q+0x50>)
{
    a576:	b530      	push	{r4, r5, lr}
	sys_dlist_t *q = &_ready_q.q[q_index];
    a578:	3314      	adds	r3, #20
    a57a:	00db      	lsls	r3, r3, #3
    a57c:	1d19      	adds	r1, r3, #4
    a57e:	4411      	add	r1, r2
	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    a580:	684c      	ldr	r4, [r1, #4]
    a582:	42a0      	cmp	r0, r4
    a584:	d01b      	beq.n	a5be <_move_thread_to_end_of_prio_q+0x4e>
	node->prev->next = node->next;
    a586:	6844      	ldr	r4, [r0, #4]
    a588:	6805      	ldr	r5, [r0, #0]
    a58a:	6025      	str	r5, [r4, #0]
	node->next->prev = node->prev;
    a58c:	6805      	ldr	r5, [r0, #0]
	node->prev = list->tail;
    a58e:	4413      	add	r3, r2
	node->next->prev = node->prev;
    a590:	606c      	str	r4, [r5, #4]
	node->next = list;
    a592:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    a594:	6899      	ldr	r1, [r3, #8]
    a596:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
    a598:	6899      	ldr	r1, [r3, #8]
    a59a:	6008      	str	r0, [r1, #0]
	list->tail = node;
    a59c:	6098      	str	r0, [r3, #8]
	*cache = *cache == thread ? get_ready_q_head() : *cache;
    a59e:	69d3      	ldr	r3, [r2, #28]
    a5a0:	4298      	cmp	r0, r3
    a5a2:	d10b      	bne.n	a5bc <_move_thread_to_end_of_prio_q+0x4c>
	return __builtin_ffs(op);
    a5a4:	6a11      	ldr	r1, [r2, #32]
    a5a6:	fa91 f3a1 	rbit	r3, r1
    a5aa:	2900      	cmp	r1, #0
    a5ac:	fab3 f383 	clz	r3, r3
    a5b0:	bf08      	it	eq
    a5b2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    a5b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a5bc:	61d3      	str	r3, [r2, #28]
    a5be:	bd30      	pop	{r4, r5, pc}
    a5c0:	20002084 	.word	0x20002084

0000a5c4 <_impl_k_yield>:
{
    a5c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a5c6:	f04f 0320 	mov.w	r3, #32
    a5ca:	f3ef 8511 	mrs	r5, BASEPRI
    a5ce:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
    a5d2:	4c09      	ldr	r4, [pc, #36]	; (a5f8 <_impl_k_yield+0x34>)
    a5d4:	68a0      	ldr	r0, [r4, #8]
    a5d6:	f7ff ffcb 	bl	a570 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
    a5da:	68a2      	ldr	r2, [r4, #8]
    a5dc:	69e3      	ldr	r3, [r4, #28]
    a5de:	429a      	cmp	r2, r3
    a5e0:	d102      	bne.n	a5e8 <_impl_k_yield+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a5e2:	f385 8811 	msr	BASEPRI, r5
    a5e6:	bd38      	pop	{r3, r4, r5, pc}
	_time_slice_elapsed = 0;
    a5e8:	4b04      	ldr	r3, [pc, #16]	; (a5fc <_impl_k_yield+0x38>)
    a5ea:	2200      	movs	r2, #0
    a5ec:	601a      	str	r2, [r3, #0]
    a5ee:	4628      	mov	r0, r5
}
    a5f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a5f4:	f7f6 b9c8 	b.w	988 <__swap>
    a5f8:	20002084 	.word	0x20002084
    a5fc:	20003574 	.word	0x20003574

0000a600 <_impl_k_current_get>:
}
    a600:	4b01      	ldr	r3, [pc, #4]	; (a608 <_impl_k_current_get+0x8>)
    a602:	6898      	ldr	r0, [r3, #8]
    a604:	4770      	bx	lr
    a606:	bf00      	nop
    a608:	20002084 	.word	0x20002084

0000a60c <_is_thread_time_slicing>:
	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
    a60c:	4b0d      	ldr	r3, [pc, #52]	; (a644 <_is_thread_time_slicing+0x38>)
    a60e:	681b      	ldr	r3, [r3, #0]
    a610:	2b00      	cmp	r3, #0
    a612:	dd14      	ble.n	a63e <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
    a614:	4b0c      	ldr	r3, [pc, #48]	; (a648 <_is_thread_time_slicing+0x3c>)
    a616:	681b      	ldr	r3, [r3, #0]
    a618:	4298      	cmp	r0, r3
    a61a:	d010      	beq.n	a63e <_is_thread_time_slicing+0x32>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
    a61c:	4a0b      	ldr	r2, [pc, #44]	; (a64c <_is_thread_time_slicing+0x40>)
    a61e:	f990 300a 	ldrsb.w	r3, [r0, #10]
    a622:	6812      	ldr	r2, [r2, #0]
    a624:	4293      	cmp	r3, r2
    a626:	db0a      	blt.n	a63e <_is_thread_time_slicing+0x32>
	return list->head != list->tail;
    a628:	f103 0214 	add.w	r2, r3, #20
    a62c:	4b08      	ldr	r3, [pc, #32]	; (a650 <_is_thread_time_slicing+0x44>)
    a62e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    a632:	6858      	ldr	r0, [r3, #4]
    a634:	689b      	ldr	r3, [r3, #8]
    a636:	1ac0      	subs	r0, r0, r3
    a638:	bf18      	it	ne
    a63a:	2001      	movne	r0, #1
	return sys_dlist_has_multiple_nodes(q);
    a63c:	4770      	bx	lr
		return 0;
    a63e:	2000      	movs	r0, #0
}
    a640:	4770      	bx	lr
    a642:	bf00      	nop
    a644:	200021a8 	.word	0x200021a8
    a648:	0000b8c0 	.word	0x0000b8c0
    a64c:	200021ac 	.word	0x200021ac
    a650:	20002084 	.word	0x20002084

0000a654 <_update_time_slice_before_swap>:
	_time_slice_elapsed = 0;
    a654:	4b01      	ldr	r3, [pc, #4]	; (a65c <_update_time_slice_before_swap+0x8>)
    a656:	2200      	movs	r2, #0
    a658:	601a      	str	r2, [r3, #0]
    a65a:	4770      	bx	lr
    a65c:	20003574 	.word	0x20003574

0000a660 <_unpend_first_thread>:
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    a660:	4a10      	ldr	r2, [pc, #64]	; (a6a4 <_unpend_first_thread+0x44>)
    a662:	6812      	ldr	r2, [r2, #0]
}

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
    a664:	4603      	mov	r3, r0
    a666:	6800      	ldr	r0, [r0, #0]
	if (_handling_timeouts) {
    a668:	b16a      	cbz	r2, a686 <_unpend_first_thread+0x26>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a66a:	4283      	cmp	r3, r0
    a66c:	bf08      	it	eq
    a66e:	2000      	moveq	r0, #0
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
    a670:	b908      	cbnz	r0, a676 <_unpend_first_thread+0x16>
    a672:	2000      	movs	r0, #0
    a674:	4770      	bx	lr
			if (_is_thread_timeout_expired(thread)) {
    a676:	6a02      	ldr	r2, [r0, #32]
    a678:	3202      	adds	r2, #2
    a67a:	d107      	bne.n	a68c <_unpend_first_thread+0x2c>
	return (node == list->tail) ? NULL : node->next;
    a67c:	685a      	ldr	r2, [r3, #4]
    a67e:	4290      	cmp	r0, r2
    a680:	d0f7      	beq.n	a672 <_unpend_first_thread+0x12>
    a682:	6800      	ldr	r0, [r0, #0]
    a684:	e7f4      	b.n	a670 <_unpend_first_thread+0x10>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a686:	4283      	cmp	r3, r0
    a688:	d00a      	beq.n	a6a0 <_unpend_first_thread+0x40>
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
    a68a:	b150      	cbz	r0, a6a2 <_unpend_first_thread+0x42>
	node->prev->next = node->next;
    a68c:	e890 000c 	ldmia.w	r0, {r2, r3}
    a690:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a692:	6802      	ldr	r2, [r0, #0]
    a694:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a696:	7a43      	ldrb	r3, [r0, #9]
    a698:	f023 0302 	bic.w	r3, r3, #2
    a69c:	7243      	strb	r3, [r0, #9]
    a69e:	4770      	bx	lr
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a6a0:	4610      	mov	r0, r2
		_unpend_thread(thread);
	}

	return thread;
}
    a6a2:	4770      	bx	lr
    a6a4:	20003570 	.word	0x20003570

0000a6a8 <_impl_k_sem_init>:

	sem->count = initial_count;
	sem->limit = limit;
	sys_dlist_init(&sem->wait_q);
#if defined(CONFIG_POLL)
	sys_dlist_init(&sem->poll_events);
    a6a8:	f100 0310 	add.w	r3, r0, #16
	sem->count = initial_count;
    a6ac:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    a6ae:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    a6b0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    a6b2:	6040      	str	r0, [r0, #4]
	list->head = (sys_dnode_t *)list;
    a6b4:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
    a6b6:	6143      	str	r3, [r0, #20]
    a6b8:	4770      	bx	lr
	...

0000a6bc <_impl_k_sem_give>:

	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
    a6bc:	b570      	push	{r4, r5, r6, lr}
    a6be:	4605      	mov	r5, r0
	__asm__ volatile(
    a6c0:	f04f 0320 	mov.w	r3, #32
    a6c4:	f3ef 8611 	mrs	r6, BASEPRI
    a6c8:	f383 8811 	msr	BASEPRI, r3
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);
    a6cc:	f7ff ffc8 	bl	a660 <_unpend_first_thread>
	if (!thread) {
    a6d0:	4604      	mov	r4, r0
    a6d2:	b998      	cbnz	r0, a6fc <_impl_k_sem_give+0x40>
	sem->count += (sem->count != sem->limit);
    a6d4:	68ab      	ldr	r3, [r5, #8]
    a6d6:	68ea      	ldr	r2, [r5, #12]
    a6d8:	429a      	cmp	r2, r3
    a6da:	bf18      	it	ne
    a6dc:	3301      	addne	r3, #1
    a6de:	60ab      	str	r3, [r5, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
    a6e0:	2102      	movs	r1, #2
    a6e2:	f105 0010 	add.w	r0, r5, #16
    a6e6:	f000 fd0d 	bl	b104 <_handle_obj_poll_events>
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
    a6ea:	2800      	cmp	r0, #0
    a6ec:	d03b      	beq.n	a766 <_impl_k_sem_give+0xaa>
	_update_time_slice_before_swap();
    a6ee:	f7ff ffb1 	bl	a654 <_update_time_slice_before_swap>
	return __swap(key);
    a6f2:	4630      	mov	r0, r6
		_Swap(key);
	} else {
		irq_unlock(key);
	}
}
    a6f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a6f8:	f7f6 b946 	b.w	988 <__swap>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a6fc:	6a01      	ldr	r1, [r0, #32]
	return _abort_timeout(&thread->base.timeout);
    a6fe:	f100 0210 	add.w	r2, r0, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a702:	1c48      	adds	r0, r1, #1
    a704:	d00f      	beq.n	a726 <_impl_k_sem_give+0x6a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a706:	4b1b      	ldr	r3, [pc, #108]	; (a774 <_impl_k_sem_give+0xb8>)
    a708:	695b      	ldr	r3, [r3, #20]
    a70a:	429a      	cmp	r2, r3
	return (node == list->tail) ? NULL : node->next;
    a70c:	bf1f      	itttt	ne
    a70e:	6922      	ldrne	r2, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a710:	6913      	ldrne	r3, [r2, #16]
    a712:	185b      	addne	r3, r3, r1
    a714:	6113      	strne	r3, [r2, #16]
	node->prev->next = node->next;
    a716:	6963      	ldr	r3, [r4, #20]
    a718:	6922      	ldr	r2, [r4, #16]
    a71a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a71c:	6922      	ldr	r2, [r4, #16]
    a71e:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a724:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a726:	7a63      	ldrb	r3, [r4, #9]
    a728:	f023 0204 	bic.w	r2, r3, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a72c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a730:	7262      	strb	r2, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a732:	d102      	bne.n	a73a <_impl_k_sem_give+0x7e>
    a734:	6a23      	ldr	r3, [r4, #32]
    a736:	3301      	adds	r3, #1
    a738:	d018      	beq.n	a76c <_impl_k_sem_give+0xb0>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a73a:	2300      	movs	r3, #0
    a73c:	6663      	str	r3, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a73e:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
    a742:	2b0d      	cmp	r3, #13
    a744:	d80f      	bhi.n	a766 <_impl_k_sem_give+0xaa>
    a746:	b11b      	cbz	r3, a750 <_impl_k_sem_give+0x94>
    a748:	4b0b      	ldr	r3, [pc, #44]	; (a778 <_impl_k_sem_give+0xbc>)
    a74a:	685b      	ldr	r3, [r3, #4]
    a74c:	051b      	lsls	r3, r3, #20
    a74e:	d50a      	bpl.n	a766 <_impl_k_sem_give+0xaa>
	return _is_preempt(_current) && __must_switch_threads();
    a750:	4b08      	ldr	r3, [pc, #32]	; (a774 <_impl_k_sem_give+0xb8>)
    a752:	689b      	ldr	r3, [r3, #8]
    a754:	895b      	ldrh	r3, [r3, #10]
    a756:	2b7f      	cmp	r3, #127	; 0x7f
    a758:	d805      	bhi.n	a766 <_impl_k_sem_give+0xaa>
    a75a:	f7ff fec9 	bl	a4f0 <__must_switch_threads>
    a75e:	3000      	adds	r0, #0
    a760:	bf18      	it	ne
    a762:	2001      	movne	r0, #1
    a764:	e7c1      	b.n	a6ea <_impl_k_sem_give+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a766:	f386 8811 	msr	BASEPRI, r6
    a76a:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
    a76c:	4620      	mov	r0, r4
    a76e:	f7ff fdc5 	bl	a2fc <_add_thread_to_ready_q>
    a772:	e7e2      	b.n	a73a <_impl_k_sem_give+0x7e>
    a774:	20002084 	.word	0x20002084
    a778:	e000ed00 	.word	0xe000ed00

0000a77c <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    a77c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a77e:	f04f 0320 	mov.w	r3, #32
    a782:	f3ef 8411 	mrs	r4, BASEPRI
    a786:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    a78a:	6883      	ldr	r3, [r0, #8]
    a78c:	b12b      	cbz	r3, a79a <_impl_k_sem_take+0x1e>
		sem->count--;
    a78e:	3b01      	subs	r3, #1
    a790:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a792:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    a796:	2000      	movs	r0, #0
    a798:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (timeout == K_NO_WAIT) {
    a79a:	b921      	cbnz	r1, a7a6 <_impl_k_sem_take+0x2a>
    a79c:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    a7a0:	f06f 000f 	mvn.w	r0, #15
    a7a4:	bd38      	pop	{r3, r4, r5, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    a7a6:	f7ff fe93 	bl	a4d0 <_pend_current_thread>
	_update_time_slice_before_swap();
    a7aa:	f7ff ff53 	bl	a654 <_update_time_slice_before_swap>
	return __swap(key);
    a7ae:	4620      	mov	r0, r4

	return _Swap(key);
}
    a7b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a7b4:	f7f6 b8e8 	b.w	988 <__swap>

0000a7b8 <_impl_k_uptime_get_32>:
u32_t _tick_get_32(void)
{
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)_get_elapsed_clock_time();
#else
	return (u32_t)_sys_clock_tick_count;
    a7b8:	4b03      	ldr	r3, [pc, #12]	; (a7c8 <_impl_k_uptime_get_32+0x10>)
    a7ba:	e9d3 0100 	ldrd	r0, r1, [r3]
	return (u64_t)ticks * _ms_per_tick;
    a7be:	230a      	movs	r3, #10
    a7c0:	fba0 0103 	umull	r0, r1, r0, r3
#ifdef CONFIG_TICKLESS_KERNEL
	__ASSERT(_sys_clock_always_on,
		 "Call k_enable_sys_clock_always_on to use clock API");
#endif
	return __ticks_to_ms(_tick_get_32());
}
    a7c4:	4770      	bx	lr
    a7c6:	bf00      	nop
    a7c8:	20003578 	.word	0x20003578

0000a7cc <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
    a7cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7d0:	4607      	mov	r7, r0
	__asm__ volatile(
    a7d2:	f04f 0320 	mov.w	r3, #32
    a7d6:	f3ef 8011 	mrs	r0, BASEPRI
    a7da:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    a7de:	4963      	ldr	r1, [pc, #396]	; (a96c <_nano_sys_clock_tick_announce+0x1a0>)
    a7e0:	e9d1 4500 	ldrd	r4, r5, [r1]
    a7e4:	19e2      	adds	r2, r4, r7
    a7e6:	eb45 73e7 	adc.w	r3, r5, r7, asr #31
    a7ea:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a7ee:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
    a7f2:	466e      	mov	r6, sp
    a7f4:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
    a7f8:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
    a7fc:	f04f 0320 	mov.w	r3, #32
    a800:	f3ef 8011 	mrs	r0, BASEPRI
    a804:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    a808:	4c59      	ldr	r4, [pc, #356]	; (a970 <_nano_sys_clock_tick_announce+0x1a4>)
    a80a:	4621      	mov	r1, r4
    a80c:	4602      	mov	r2, r0
    a80e:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a812:	428b      	cmp	r3, r1
    a814:	d000      	beq.n	a818 <_nano_sys_clock_tick_announce+0x4c>
	if (!next) {
    a816:	b9fb      	cbnz	r3, a858 <_nano_sys_clock_tick_announce+0x8c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a818:	f380 8811 	msr	BASEPRI, r0
	if (!_is_thread_time_slicing(_current)) {
    a81c:	68a0      	ldr	r0, [r4, #8]
    a81e:	f7ff fef5 	bl	a60c <_is_thread_time_slicing>
    a822:	b1b0      	cbz	r0, a852 <_nano_sys_clock_tick_announce+0x86>
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a824:	4a53      	ldr	r2, [pc, #332]	; (a974 <_nano_sys_clock_tick_announce+0x1a8>)
    a826:	6811      	ldr	r1, [r2, #0]
    a828:	230a      	movs	r3, #10
    a82a:	fb07 1703 	mla	r7, r7, r3, r1
	if (_time_slice_elapsed >= _time_slice_duration) {
    a82e:	4b52      	ldr	r3, [pc, #328]	; (a978 <_nano_sys_clock_tick_announce+0x1ac>)
	_time_slice_elapsed += __ticks_to_ms(ticks);
    a830:	6017      	str	r7, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    a832:	681b      	ldr	r3, [r3, #0]
    a834:	429f      	cmp	r7, r3
    a836:	db0c      	blt.n	a852 <_nano_sys_clock_tick_announce+0x86>
		_time_slice_elapsed = 0;
    a838:	2300      	movs	r3, #0
    a83a:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a83c:	f04f 0320 	mov.w	r3, #32
    a840:	f3ef 8511 	mrs	r5, BASEPRI
    a844:	f383 8811 	msr	BASEPRI, r3
		_move_thread_to_end_of_prio_q(_current);
    a848:	68a0      	ldr	r0, [r4, #8]
    a84a:	f7ff fe91 	bl	a570 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a84e:	f385 8811 	msr	BASEPRI, r5
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
    a852:	b003      	add	sp, #12
    a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_handling_timeouts = 1;
    a858:	4d48      	ldr	r5, [pc, #288]	; (a97c <_nano_sys_clock_tick_announce+0x1b0>)
    a85a:	2101      	movs	r1, #1
    a85c:	6029      	str	r1, [r5, #0]
    a85e:	46ab      	mov	fp, r5
    a860:	4639      	mov	r1, r7
			timeout->delta_ticks_from_prev = 0;
    a862:	f04f 0e00 	mov.w	lr, #0
			timeout->delta_ticks_from_prev = _EXPIRED;
    a866:	f06f 0c01 	mvn.w	ip, #1
		s32_t tmp = timeout->delta_ticks_from_prev;
    a86a:	6918      	ldr	r0, [r3, #16]
		if (timeout->delta_ticks_from_prev < ticks) {
    a86c:	4288      	cmp	r0, r1
			timeout->delta_ticks_from_prev -= ticks;
    a86e:	bfaa      	itet	ge
    a870:	eba0 0801 	subge.w	r8, r0, r1
			timeout->delta_ticks_from_prev = 0;
    a874:	f8c3 e010 	strlt.w	lr, [r3, #16]
			timeout->delta_ticks_from_prev -= ticks;
    a878:	f8c3 8010 	strge.w	r8, [r3, #16]
		ticks -= tmp;
    a87c:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    a87e:	6960      	ldr	r0, [r4, #20]
		if (timeout->delta_ticks_from_prev == 0) {
    a880:	691d      	ldr	r5, [r3, #16]
    a882:	4298      	cmp	r0, r3
    a884:	bf14      	ite	ne
    a886:	6818      	ldrne	r0, [r3, #0]
    a888:	2000      	moveq	r0, #0
    a88a:	b9d5      	cbnz	r5, a8c2 <_nano_sys_clock_tick_announce+0xf6>
	node->prev->next = node->next;
    a88c:	e893 0220 	ldmia.w	r3, {r5, r9}
    a890:	f8c9 5000 	str.w	r5, [r9]
	node->next->prev = node->prev;
    a894:	681d      	ldr	r5, [r3, #0]
    a896:	f8c5 9004 	str.w	r9, [r5, #4]
	node->next = list->head;
    a89a:	9d00      	ldr	r5, [sp, #0]
	node->prev = list;
    a89c:	e883 0060 	stmia.w	r3, {r5, r6}
	list->head->prev = node;
    a8a0:	9d00      	ldr	r5, [sp, #0]
	list->head = node;
    a8a2:	9300      	str	r3, [sp, #0]
	list->head->prev = node;
    a8a4:	606b      	str	r3, [r5, #4]
			timeout->delta_ticks_from_prev = _EXPIRED;
    a8a6:	f8c3 c010 	str.w	ip, [r3, #16]
    a8aa:	f382 8811 	msr	BASEPRI, r2
	__asm__ volatile(
    a8ae:	f04f 0320 	mov.w	r3, #32
    a8b2:	f3ef 8211 	mrs	r2, BASEPRI
    a8b6:	f383 8811 	msr	BASEPRI, r3
	while (next) {
    a8ba:	4603      	mov	r3, r0
    a8bc:	2800      	cmp	r0, #0
    a8be:	d1d4      	bne.n	a86a <_nano_sys_clock_tick_announce+0x9e>
    a8c0:	e001      	b.n	a8c6 <_nano_sys_clock_tick_announce+0xfa>
		} else if (ticks <= 0) {
    a8c2:	2900      	cmp	r1, #0
    a8c4:	dcf1      	bgt.n	a8aa <_nano_sys_clock_tick_announce+0xde>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a8c6:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
    a8ca:	9800      	ldr	r0, [sp, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a8cc:	42b0      	cmp	r0, r6
    a8ce:	d103      	bne.n	a8d8 <_nano_sys_clock_tick_announce+0x10c>
	_handling_timeouts = 0;
    a8d0:	2300      	movs	r3, #0
    a8d2:	f8cb 3000 	str.w	r3, [fp]
    a8d6:	e7a1      	b.n	a81c <_nano_sys_clock_tick_announce+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a8d8:	2800      	cmp	r0, #0
    a8da:	d0f9      	beq.n	a8d0 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    a8dc:	9b01      	ldr	r3, [sp, #4]
    a8de:	4298      	cmp	r0, r3
    a8e0:	d101      	bne.n	a8e6 <_nano_sys_clock_tick_announce+0x11a>
    a8e2:	2600      	movs	r6, #0
    a8e4:	e000      	b.n	a8e8 <_nano_sys_clock_tick_announce+0x11c>
    a8e6:	6806      	ldr	r6, [r0, #0]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a8e8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
		thread->base.timeout.wait_q = NULL;
    a8ec:	f04f 0900 	mov.w	r9, #0
	node->prev->next = node->next;
    a8f0:	e890 000c 	ldmia.w	r0, {r2, r3}
    a8f4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a8f6:	6802      	ldr	r2, [r0, #0]
    a8f8:	6053      	str	r3, [r2, #4]
	struct k_thread *thread = timeout->thread;
    a8fa:	6883      	ldr	r3, [r0, #8]
	__asm__ volatile(
    a8fc:	f04f 0220 	mov.w	r2, #32
    a900:	f3ef 8a11 	mrs	sl, BASEPRI
    a904:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
    a908:	f8c0 8010 	str.w	r8, [r0, #16]
	if (thread) {
    a90c:	b1fb      	cbz	r3, a94e <_nano_sys_clock_tick_announce+0x182>
	if (timeout_obj->wait_q) {
    a90e:	68c2      	ldr	r2, [r0, #12]
    a910:	b152      	cbz	r2, a928 <_nano_sys_clock_tick_announce+0x15c>
	node->prev->next = node->next;
    a912:	6859      	ldr	r1, [r3, #4]
    a914:	681a      	ldr	r2, [r3, #0]
    a916:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    a918:	681a      	ldr	r2, [r3, #0]
    a91a:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    a91c:	7a5a      	ldrb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
    a91e:	f8c3 901c 	str.w	r9, [r3, #28]
    a922:	f022 0202 	bic.w	r2, r2, #2
    a926:	725a      	strb	r2, [r3, #9]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a928:	7a5a      	ldrb	r2, [r3, #9]
    a92a:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    a92e:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a932:	7259      	strb	r1, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    a934:	d102      	bne.n	a93c <_nano_sys_clock_tick_announce+0x170>
    a936:	6a1a      	ldr	r2, [r3, #32]
    a938:	3201      	adds	r2, #1
    a93a:	d013      	beq.n	a964 <_nano_sys_clock_tick_announce+0x198>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    a93c:	f38a 8811 	msr	BASEPRI, sl
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a940:	2e00      	cmp	r6, #0
    a942:	d0c5      	beq.n	a8d0 <_nano_sys_clock_tick_announce+0x104>
	return (node == list->tail) ? NULL : node->next;
    a944:	9b01      	ldr	r3, [sp, #4]
    a946:	42b3      	cmp	r3, r6
    a948:	d108      	bne.n	a95c <_nano_sys_clock_tick_announce+0x190>
    a94a:	2300      	movs	r3, #0
    a94c:	e007      	b.n	a95e <_nano_sys_clock_tick_announce+0x192>
    a94e:	f38a 8811 	msr	BASEPRI, sl
		if (timeout->func) {
    a952:	6943      	ldr	r3, [r0, #20]
    a954:	2b00      	cmp	r3, #0
    a956:	d0f3      	beq.n	a940 <_nano_sys_clock_tick_announce+0x174>
			timeout->func(timeout);
    a958:	4798      	blx	r3
    a95a:	e7f1      	b.n	a940 <_nano_sys_clock_tick_announce+0x174>
    a95c:	6833      	ldr	r3, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
    a95e:	4630      	mov	r0, r6
    a960:	461e      	mov	r6, r3
    a962:	e7c5      	b.n	a8f0 <_nano_sys_clock_tick_announce+0x124>
		_add_thread_to_ready_q(thread);
    a964:	4618      	mov	r0, r3
    a966:	f7ff fcc9 	bl	a2fc <_add_thread_to_ready_q>
    a96a:	e7e7      	b.n	a93c <_nano_sys_clock_tick_announce+0x170>
    a96c:	20003578 	.word	0x20003578
    a970:	20002084 	.word	0x20002084
    a974:	20003574 	.word	0x20003574
    a978:	200021a8 	.word	0x200021a8
    a97c:	20003570 	.word	0x20003570

0000a980 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    a980:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    a982:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a98a:	4903      	ldr	r1, [pc, #12]	; (a998 <k_sys_work_q_init+0x18>)
    a98c:	4803      	ldr	r0, [pc, #12]	; (a99c <k_sys_work_q_init+0x1c>)
    a98e:	f000 f98d 	bl	acac <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    a992:	2000      	movs	r0, #0
    a994:	bd08      	pop	{r3, pc}
    a996:	bf00      	nop
    a998:	20005b90 	.word	0x20005b90
    a99c:	20003580 	.word	0x20003580

0000a9a0 <_is_thread_ready>:
	return !(_is_thread_prevented_from_running(thread) ||
    a9a0:	7a43      	ldrb	r3, [r0, #9]
    a9a2:	06da      	lsls	r2, r3, #27
    a9a4:	d104      	bne.n	a9b0 <_is_thread_ready+0x10>
    a9a6:	6a00      	ldr	r0, [r0, #32]
    a9a8:	1c43      	adds	r3, r0, #1
    a9aa:	4258      	negs	r0, r3
    a9ac:	4158      	adcs	r0, r3
    a9ae:	4770      	bx	lr
    a9b0:	2000      	movs	r0, #0
}
    a9b2:	4770      	bx	lr

0000a9b4 <_abort_timeout>:
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    a9b4:	6903      	ldr	r3, [r0, #16]
    a9b6:	1c5a      	adds	r2, r3, #1
    a9b8:	d011      	beq.n	a9de <_abort_timeout+0x2a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    a9ba:	4a0a      	ldr	r2, [pc, #40]	; (a9e4 <_abort_timeout+0x30>)
    a9bc:	6952      	ldr	r2, [r2, #20]
    a9be:	4290      	cmp	r0, r2
    a9c0:	bf1f      	itttt	ne
    a9c2:	6801      	ldrne	r1, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    a9c4:	690a      	ldrne	r2, [r1, #16]
    a9c6:	189b      	addne	r3, r3, r2
    a9c8:	610b      	strne	r3, [r1, #16]
	node->prev->next = node->next;
    a9ca:	e890 000c 	ldmia.w	r0, {r2, r3}
    a9ce:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    a9d0:	6802      	ldr	r2, [r0, #0]
    a9d2:	6053      	str	r3, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
    a9d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a9d8:	6103      	str	r3, [r0, #16]
	return 0;
    a9da:	2000      	movs	r0, #0
    a9dc:	4770      	bx	lr
		return _INACTIVE;
    a9de:	4618      	mov	r0, r3
}
    a9e0:	4770      	bx	lr
    a9e2:	bf00      	nop
    a9e4:	20002084 	.word	0x20002084

0000a9e8 <schedule_new_thread.part.13>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_start, K_OBJ_THREAD, struct k_thread *);
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
    a9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
    a9ea:	f04f 0320 	mov.w	r3, #32
    a9ee:	f3ef 8611 	mrs	r6, BASEPRI
    a9f2:	f383 8811 	msr	BASEPRI, r3
	return list->head == list;
    a9f6:	4a19      	ldr	r2, [pc, #100]	; (aa5c <schedule_new_thread.part.13+0x74>)
	timeout->thread = thread;
    a9f8:	6180      	str	r0, [r0, #24]
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
    a9fa:	230a      	movs	r3, #10
    a9fc:	3109      	adds	r1, #9
    a9fe:	fbb1 f1f3 	udiv	r1, r1, r3
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
    aa02:	3101      	adds	r1, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    aa04:	6201      	str	r1, [r0, #32]
    aa06:	4611      	mov	r1, r2
	timeout->wait_q = (sys_dlist_t *)wait_q;
    aa08:	2300      	movs	r3, #0
    aa0a:	61c3      	str	r3, [r0, #28]
    aa0c:	f851 3f10 	ldr.w	r3, [r1, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa10:	428b      	cmp	r3, r1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    aa12:	f100 0510 	add.w	r5, r0, #16
    aa16:	d108      	bne.n	aa2a <schedule_new_thread.part.13+0x42>
	node->next = list;
    aa18:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    aa1a:	6953      	ldr	r3, [r2, #20]
    aa1c:	6143      	str	r3, [r0, #20]
	list->tail->next = node;
    aa1e:	6953      	ldr	r3, [r2, #20]
    aa20:	601d      	str	r5, [r3, #0]
	list->tail = node;
    aa22:	6155      	str	r5, [r2, #20]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aa24:	f386 8811 	msr	BASEPRI, r6
    aa28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d0f4      	beq.n	aa18 <schedule_new_thread.part.13+0x30>
    aa2e:	f8d2 e014 	ldr.w	lr, [r2, #20]
		if (*delta <= in_q->delta_ticks_from_prev) {
    aa32:	6a04      	ldr	r4, [r0, #32]
    aa34:	691f      	ldr	r7, [r3, #16]
    aa36:	42bc      	cmp	r4, r7
    aa38:	dc08      	bgt.n	aa4c <schedule_new_thread.part.13+0x64>
		node->prev = insert_point->prev;
    aa3a:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    aa3c:	1b3c      	subs	r4, r7, r4
    aa3e:	611c      	str	r4, [r3, #16]
    aa40:	6142      	str	r2, [r0, #20]
		node->next = insert_point;
    aa42:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    aa44:	685a      	ldr	r2, [r3, #4]
    aa46:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
    aa48:	605d      	str	r5, [r3, #4]
    aa4a:	e7eb      	b.n	aa24 <schedule_new_thread.part.13+0x3c>
		*delta -= in_q->delta_ticks_from_prev;
    aa4c:	1be4      	subs	r4, r4, r7
	return (node == list->tail) ? NULL : node->next;
    aa4e:	4573      	cmp	r3, lr
    aa50:	6204      	str	r4, [r0, #32]
    aa52:	d0e1      	beq.n	aa18 <schedule_new_thread.part.13+0x30>
    aa54:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    aa56:	2b00      	cmp	r3, #0
    aa58:	d1eb      	bne.n	aa32 <schedule_new_thread.part.13+0x4a>
    aa5a:	e7dd      	b.n	aa18 <schedule_new_thread.part.13+0x30>
    aa5c:	20002084 	.word	0x20002084

0000aa60 <k_is_in_isr>:
    aa60:	f3ef 8005 	mrs	r0, IPSR
    aa64:	280d      	cmp	r0, #13
    aa66:	d807      	bhi.n	aa78 <k_is_in_isr+0x18>
    aa68:	b138      	cbz	r0, aa7a <k_is_in_isr+0x1a>
    aa6a:	4b04      	ldr	r3, [pc, #16]	; (aa7c <k_is_in_isr+0x1c>)
    aa6c:	6858      	ldr	r0, [r3, #4]
    aa6e:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
    aa72:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    aa76:	4770      	bx	lr
    aa78:	2001      	movs	r0, #1
}
    aa7a:	4770      	bx	lr
    aa7c:	e000ed00 	.word	0xe000ed00

0000aa80 <_is_thread_essential>:
	return _current->base.user_options & K_ESSENTIAL;
    aa80:	4b02      	ldr	r3, [pc, #8]	; (aa8c <_is_thread_essential+0xc>)
    aa82:	689b      	ldr	r3, [r3, #8]
    aa84:	7a18      	ldrb	r0, [r3, #8]
}
    aa86:	f000 0001 	and.w	r0, r0, #1
    aa8a:	4770      	bx	lr
    aa8c:	20002084 	.word	0x20002084

0000aa90 <_thread_entry>:
{
    aa90:	b508      	push	{r3, lr}
    aa92:	4604      	mov	r4, r0
    aa94:	4608      	mov	r0, r1
    aa96:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    aa98:	461a      	mov	r2, r3
    aa9a:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
    aa9c:	f7ff fdb0 	bl	a600 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
    aaa0:	f7f6 fa22 	bl	ee8 <_impl_k_thread_abort>

0000aaa4 <_impl_k_thread_start>:
{
    aaa4:	b510      	push	{r4, lr}
    aaa6:	4601      	mov	r1, r0
	__asm__ volatile(
    aaa8:	f04f 0320 	mov.w	r3, #32
    aaac:	f3ef 8411 	mrs	r4, BASEPRI
    aab0:	f383 8811 	msr	BASEPRI, r3
    aab4:	7a43      	ldrb	r3, [r0, #9]
	if (_has_thread_started(thread)) {
    aab6:	075a      	lsls	r2, r3, #29
    aab8:	d402      	bmi.n	aac0 <_impl_k_thread_start+0x1c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    aaba:	f384 8811 	msr	BASEPRI, r4
    aabe:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    aac0:	f023 0304 	bic.w	r3, r3, #4
    aac4:	7243      	strb	r3, [r0, #9]
	if (_is_thread_ready(thread)) {
    aac6:	f7ff ff6b 	bl	a9a0 <_is_thread_ready>
    aaca:	2800      	cmp	r0, #0
    aacc:	d0f5      	beq.n	aaba <_impl_k_thread_start+0x16>
		_add_thread_to_ready_q(thread);
    aace:	4608      	mov	r0, r1
    aad0:	f7ff fc14 	bl	a2fc <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
    aad4:	4b07      	ldr	r3, [pc, #28]	; (aaf4 <_impl_k_thread_start+0x50>)
    aad6:	689b      	ldr	r3, [r3, #8]
    aad8:	895b      	ldrh	r3, [r3, #10]
    aada:	2b7f      	cmp	r3, #127	; 0x7f
    aadc:	d8ed      	bhi.n	aaba <_impl_k_thread_start+0x16>
    aade:	f7ff fd07 	bl	a4f0 <__must_switch_threads>
    aae2:	2800      	cmp	r0, #0
    aae4:	d0e9      	beq.n	aaba <_impl_k_thread_start+0x16>
	_update_time_slice_before_swap();
    aae6:	f7ff fdb5 	bl	a654 <_update_time_slice_before_swap>
	return __swap(key);
    aaea:	4620      	mov	r0, r4
}
    aaec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aaf0:	f7f5 bf4a 	b.w	988 <__swap>
    aaf4:	20002084 	.word	0x20002084

0000aaf8 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
    aaf8:	b410      	push	{r4}

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
    aafa:	bc10      	pop	{r4}
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aafc:	f7f6 b950 	b.w	da0 <_new_thread>

0000ab00 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    ab00:	b570      	push	{r4, r5, r6, lr}
    ab02:	b086      	sub	sp, #24
    ab04:	4604      	mov	r4, r0
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    ab06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    ab08:	9604      	str	r6, [sp, #16]
    ab0a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    ab0c:	9603      	str	r6, [sp, #12]
    ab0e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    ab10:	9602      	str	r6, [sp, #8]
    ab12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    ab14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    ab16:	9601      	str	r6, [sp, #4]
    ab18:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    ab1a:	9600      	str	r6, [sp, #0]
    ab1c:	f7f6 f940 	bl	da0 <_new_thread>
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
			  prio, options);

	if (delay != K_FOREVER) {
    ab20:	1c6b      	adds	r3, r5, #1
    ab22:	d003      	beq.n	ab2c <_impl_k_thread_create+0x2c>
	if (delay == 0) {
    ab24:	b92d      	cbnz	r5, ab32 <_impl_k_thread_create+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
    ab26:	4620      	mov	r0, r4
    ab28:	f7ff ffbc 	bl	aaa4 <_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}
	return new_thread;
}
    ab2c:	4620      	mov	r0, r4
    ab2e:	b006      	add	sp, #24
    ab30:	bd70      	pop	{r4, r5, r6, pc}
    ab32:	4629      	mov	r1, r5
    ab34:	4620      	mov	r0, r4
    ab36:	f7ff ff57 	bl	a9e8 <schedule_new_thread.part.13>
    ab3a:	e7f7      	b.n	ab2c <_impl_k_thread_create+0x2c>

0000ab3c <_k_thread_single_abort>:
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
	if (thread->fn_abort != NULL) {
    ab3c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    ab3e:	b510      	push	{r4, lr}
    ab40:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    ab42:	b103      	cbz	r3, ab46 <_k_thread_single_abort+0xa>
		thread->fn_abort();
    ab44:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    ab46:	4620      	mov	r0, r4
    ab48:	f7ff ff2a 	bl	a9a0 <_is_thread_ready>
    ab4c:	b138      	cbz	r0, ab5e <_k_thread_single_abort+0x22>
		_remove_thread_from_ready_q(thread);
    ab4e:	4620      	mov	r0, r4
    ab50:	f7ff fc58 	bl	a404 <_remove_thread_from_ready_q>
		if (_is_thread_timeout_active(thread)) {
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
    ab54:	7a63      	ldrb	r3, [r4, #9]
    ab56:	f043 0308 	orr.w	r3, r3, #8
    ab5a:	7263      	strb	r3, [r4, #9]
    ab5c:	bd10      	pop	{r4, pc}
		if (_is_thread_pending(thread)) {
    ab5e:	7a63      	ldrb	r3, [r4, #9]
    ab60:	079b      	lsls	r3, r3, #30
    ab62:	d508      	bpl.n	ab76 <_k_thread_single_abort+0x3a>
	node->prev->next = node->next;
    ab64:	e894 000c 	ldmia.w	r4, {r2, r3}
    ab68:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ab6a:	6822      	ldr	r2, [r4, #0]
    ab6c:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    ab6e:	7a63      	ldrb	r3, [r4, #9]
    ab70:	f023 0302 	bic.w	r3, r3, #2
    ab74:	7263      	strb	r3, [r4, #9]
		if (_is_thread_timeout_active(thread)) {
    ab76:	6a23      	ldr	r3, [r4, #32]
    ab78:	3301      	adds	r3, #1
    ab7a:	d0eb      	beq.n	ab54 <_k_thread_single_abort+0x18>
	return _abort_timeout(&thread->base.timeout);
    ab7c:	f104 0010 	add.w	r0, r4, #16
    ab80:	f7ff ff18 	bl	a9b4 <_abort_timeout>
    ab84:	e7e6      	b.n	ab54 <_k_thread_single_abort+0x18>
	...

0000ab88 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
    ab88:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    ab8a:	4f21      	ldr	r7, [pc, #132]	; (ac10 <_init_static_threads+0x88>)
    ab8c:	4d21      	ldr	r5, [pc, #132]	; (ac14 <_init_static_threads+0x8c>)
{
    ab8e:	b087      	sub	sp, #28
    ab90:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    ab92:	42bd      	cmp	r5, r7
    ab94:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    ab98:	d314      	bcc.n	abc4 <_init_static_threads+0x3c>
	--_current->base.sched_locked;
    ab9a:	4b1f      	ldr	r3, [pc, #124]	; (ac18 <_init_static_threads+0x90>)
    ab9c:	689a      	ldr	r2, [r3, #8]
    ab9e:	7ad3      	ldrb	r3, [r2, #11]
    aba0:	3b01      	subs	r3, #1
    aba2:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
    aba4:	f04f 0320 	mov.w	r3, #32
    aba8:	f3ef 8511 	mrs	r5, BASEPRI
    abac:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    abb0:	4c18      	ldr	r4, [pc, #96]	; (ac14 <_init_static_threads+0x8c>)
    abb2:	42b4      	cmp	r4, r6
    abb4:	d31f      	bcc.n	abf6 <_init_static_threads+0x6e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    abb6:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    abba:	b007      	add	sp, #28
    abbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
    abc0:	f7ff bcc6 	b.w	a550 <k_sched_unlock>
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    abc4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    abc8:	9304      	str	r3, [sp, #16]
    abca:	f854 3c10 	ldr.w	r3, [r4, #-16]
    abce:	9303      	str	r3, [sp, #12]
    abd0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    abd4:	9302      	str	r3, [sp, #8]
    abd6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    abda:	9301      	str	r3, [sp, #4]
    abdc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    abe0:	9300      	str	r3, [sp, #0]
    abe2:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    abe6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    abe8:	f7f6 f8da 	bl	da0 <_new_thread>
		thread_data->init_thread->init_data = thread_data;
    abec:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    abf0:	64dd      	str	r5, [r3, #76]	; 0x4c
    abf2:	4625      	mov	r5, r4
    abf4:	e7cd      	b.n	ab92 <_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
    abf6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    abf8:	1c4b      	adds	r3, r1, #1
    abfa:	d003      	beq.n	ac04 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->init_thread,
    abfc:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
    abfe:	b919      	cbnz	r1, ac08 <_init_static_threads+0x80>
    ac00:	f7ff ff50 	bl	aaa4 <_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    ac04:	342c      	adds	r4, #44	; 0x2c
    ac06:	e7d4      	b.n	abb2 <_init_static_threads+0x2a>
    ac08:	f7ff feee 	bl	a9e8 <schedule_new_thread.part.13>
    ac0c:	e7fa      	b.n	ac04 <_init_static_threads+0x7c>
    ac0e:	bf00      	nop
    ac10:	20006290 	.word	0x20006290
    ac14:	20006290 	.word	0x20006290
    ac18:	20002084 	.word	0x20002084

0000ac1c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    ac1c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
    ac1e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    ac20:	2300      	movs	r3, #0
	t->delta_ticks_from_prev = _INACTIVE;
    ac22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	thread_base->prio = priority;
    ac26:	7281      	strb	r1, [r0, #10]
	thread_base->sched_locked = 0;
    ac28:	72c3      	strb	r3, [r0, #11]
    ac2a:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
    ac2c:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
    ac2e:	6183      	str	r3, [r0, #24]
	t->func = func;
    ac30:	6243      	str	r3, [r0, #36]	; 0x24
    ac32:	4770      	bx	lr

0000ac34 <k_work_submit_to_queue>:
{
    ac34:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac36:	f101 0308 	add.w	r3, r1, #8
    ac3a:	f3bf 8f5b 	dmb	ish
    ac3e:	e853 2f00 	ldrex	r2, [r3]
    ac42:	f042 0e01 	orr.w	lr, r2, #1
    ac46:	e843 ec00 	strex	ip, lr, [r3]
    ac4a:	f1bc 0f00 	cmp.w	ip, #0
    ac4e:	d1f6      	bne.n	ac3e <k_work_submit_to_queue+0xa>
    ac50:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ac54:	07d3      	lsls	r3, r2, #31
    ac56:	d403      	bmi.n	ac60 <k_work_submit_to_queue+0x2c>
	}
}
    ac58:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
    ac5c:	f7ff bae3 	b.w	a226 <k_queue_append>
    ac60:	f85d fb04 	ldr.w	pc, [sp], #4

0000ac64 <work_timeout>:
{
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
    ac64:	f1a0 010c 	sub.w	r1, r0, #12
    ac68:	6980      	ldr	r0, [r0, #24]
    ac6a:	f7ff bfe3 	b.w	ac34 <k_work_submit_to_queue>

0000ac6e <work_q_main>:
{
    ac6e:	b510      	push	{r4, lr}
    ac70:	4604      	mov	r4, r0
		work = k_queue_get(&work_q->queue, K_FOREVER);
    ac72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ac76:	4620      	mov	r0, r4
    ac78:	f7ff faf9 	bl	a26e <k_queue_get>
		if (!work) {
    ac7c:	4603      	mov	r3, r0
    ac7e:	2800      	cmp	r0, #0
    ac80:	d0f7      	beq.n	ac72 <work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ac82:	3308      	adds	r3, #8
		handler = work->handler;
    ac84:	6842      	ldr	r2, [r0, #4]
    ac86:	f3bf 8f5b 	dmb	ish
    ac8a:	e853 1f00 	ldrex	r1, [r3]
    ac8e:	f021 0e01 	bic.w	lr, r1, #1
    ac92:	e843 ec00 	strex	ip, lr, [r3]
    ac96:	f1bc 0f00 	cmp.w	ip, #0
    ac9a:	d1f6      	bne.n	ac8a <work_q_main+0x1c>
    ac9c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(work->flags,
    aca0:	07cb      	lsls	r3, r1, #31
    aca2:	d500      	bpl.n	aca6 <work_q_main+0x38>
			handler(work);
    aca4:	4790      	blx	r2
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    aca6:	f7ff fc8d 	bl	a5c4 <_impl_k_yield>
    acaa:	e7e2      	b.n	ac72 <work_q_main+0x4>

0000acac <k_work_q_start>:
{
    acac:	b5f0      	push	{r4, r5, r6, r7, lr}
    acae:	b087      	sub	sp, #28
    acb0:	4604      	mov	r4, r0
    acb2:	461f      	mov	r7, r3
    acb4:	460d      	mov	r5, r1
    acb6:	4616      	mov	r6, r2
	k_queue_init(&work_q->queue);
    acb8:	f7ff fa84 	bl	a1c4 <k_queue_init>

    acbc:	2000      	movs	r0, #0
    acbe:	9005      	str	r0, [sp, #20]
    acc0:	9004      	str	r0, [sp, #16]
    acc2:	9002      	str	r0, [sp, #8]
    acc4:	9001      	str	r0, [sp, #4]
    acc6:	9703      	str	r7, [sp, #12]
    acc8:	9400      	str	r4, [sp, #0]
    acca:	4b04      	ldr	r3, [pc, #16]	; (acdc <k_work_q_start+0x30>)
    accc:	4632      	mov	r2, r6
    acce:	4629      	mov	r1, r5
    acd0:	f104 0010 	add.w	r0, r4, #16
    acd4:	f7ff ff14 	bl	ab00 <_impl_k_thread_create>
}
    acd8:	b007      	add	sp, #28
    acda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acdc:	0000ac6f 	.word	0x0000ac6f

0000ace0 <k_delayed_work_init>:
}

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
    ace0:	b500      	push	{lr}
    ace2:	f100 0308 	add.w	r3, r0, #8
    ace6:	f3bf 8f5b 	dmb	ish
    acea:	e853 2f00 	ldrex	r2, [r3]
    acee:	f022 0201 	bic.w	r2, r2, #1
    acf2:	e843 2e00 	strex	lr, r2, [r3]
    acf6:	f1be 0f00 	cmp.w	lr, #0
    acfa:	d1f6      	bne.n	acea <k_delayed_work_init+0xa>
    acfc:	f3bf 8f5b 	dmb	ish
	t->delta_ticks_from_prev = _INACTIVE;
    ad00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ad04:	61c3      	str	r3, [r0, #28]
	t->func = func;
    ad06:	4a04      	ldr	r2, [pc, #16]	; (ad18 <k_delayed_work_init+0x38>)
	work->handler = handler;
    ad08:	6041      	str	r1, [r0, #4]
	t->wait_q = NULL;
    ad0a:	2300      	movs	r3, #0
    ad0c:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
    ad0e:	6143      	str	r3, [r0, #20]
	t->func = func;
    ad10:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
    ad12:	6243      	str	r3, [r0, #36]	; 0x24
    ad14:	f85d fb04 	ldr.w	pc, [sp], #4
    ad18:	0000ac65 	.word	0x0000ac65

0000ad1c <_ready_thread>:
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ad1c:	7a42      	ldrb	r2, [r0, #9]
    ad1e:	f022 0104 	bic.w	r1, r2, #4
	return !(_is_thread_prevented_from_running(thread) ||
    ad22:	f012 0f1b 	tst.w	r2, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ad26:	7241      	strb	r1, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
    ad28:	d104      	bne.n	ad34 <_ready_thread+0x18>
    ad2a:	6a03      	ldr	r3, [r0, #32]
    ad2c:	3301      	adds	r3, #1
    ad2e:	d101      	bne.n	ad34 <_ready_thread+0x18>
		_add_thread_to_ready_q(thread);
    ad30:	f7ff bae4 	b.w	a2fc <_add_thread_to_ready_q>
    ad34:	4770      	bx	lr

0000ad36 <_unpend_thread>:
	node->prev->next = node->next;
    ad36:	e890 000c 	ldmia.w	r0, {r2, r3}
    ad3a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ad3c:	6802      	ldr	r2, [r0, #0]
    ad3e:	6053      	str	r3, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    ad40:	7a43      	ldrb	r3, [r0, #9]
    ad42:	f023 0302 	bic.w	r3, r3, #2
    ad46:	7243      	strb	r3, [r0, #9]
    ad48:	4770      	bx	lr
	...

0000ad4c <_add_timeout.constprop.9>:
static inline void _add_timeout(struct k_thread *thread,
    ad4c:	b430      	push	{r4, r5}
	timeout->thread = thread;
    ad4e:	2400      	movs	r4, #0
static inline void _add_timeout(struct k_thread *thread,
    ad50:	4603      	mov	r3, r0
	timeout->delta_ticks_from_prev = timeout_in_ticks;
    ad52:	6102      	str	r2, [r0, #16]
	timeout->thread = thread;
    ad54:	6084      	str	r4, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
    ad56:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
    ad58:	b972      	cbnz	r2, ad78 <_add_timeout.constprop.9+0x2c>
	__asm__ volatile(
    ad5a:	f04f 0120 	mov.w	r1, #32
    ad5e:	f3ef 8211 	mrs	r2, BASEPRI
    ad62:	f381 8811 	msr	BASEPRI, r1
	timeout->delta_ticks_from_prev = _INACTIVE;
    ad66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ad6a:	6101      	str	r1, [r0, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ad6c:	f382 8811 	msr	BASEPRI, r2
		if (timeout->func) {
    ad70:	6943      	ldr	r3, [r0, #20]
    ad72:	b16b      	cbz	r3, ad90 <_add_timeout.constprop.9+0x44>
}
    ad74:	bc30      	pop	{r4, r5}
			timeout->func(timeout);
    ad76:	4718      	bx	r3
	return list->head == list;
    ad78:	4911      	ldr	r1, [pc, #68]	; (adc0 <_add_timeout.constprop.9+0x74>)
    ad7a:	4608      	mov	r0, r1
    ad7c:	f850 2f10 	ldr.w	r2, [r0, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ad80:	4282      	cmp	r2, r0
    ad82:	d10d      	bne.n	ada0 <_add_timeout.constprop.9+0x54>
	node->next = list;
    ad84:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    ad86:	694a      	ldr	r2, [r1, #20]
    ad88:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    ad8a:	694a      	ldr	r2, [r1, #20]
    ad8c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ad8e:	614b      	str	r3, [r1, #20]
}
    ad90:	bc30      	pop	{r4, r5}
    ad92:	4770      	bx	lr
		*delta -= in_q->delta_ticks_from_prev;
    ad94:	1b64      	subs	r4, r4, r5
    ad96:	611c      	str	r4, [r3, #16]
	return (node == list->tail) ? NULL : node->next;
    ad98:	694c      	ldr	r4, [r1, #20]
    ad9a:	42a2      	cmp	r2, r4
    ad9c:	d0f2      	beq.n	ad84 <_add_timeout.constprop.9+0x38>
    ad9e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
    ada0:	2a00      	cmp	r2, #0
    ada2:	d0ef      	beq.n	ad84 <_add_timeout.constprop.9+0x38>
		if (*delta <= in_q->delta_ticks_from_prev) {
    ada4:	691c      	ldr	r4, [r3, #16]
    ada6:	6915      	ldr	r5, [r2, #16]
    ada8:	42ac      	cmp	r4, r5
    adaa:	dcf3      	bgt.n	ad94 <_add_timeout.constprop.9+0x48>
		node->prev = insert_point->prev;
    adac:	6851      	ldr	r1, [r2, #4]
			in_q->delta_ticks_from_prev -= *delta;
    adae:	1b2c      	subs	r4, r5, r4
    adb0:	6114      	str	r4, [r2, #16]
    adb2:	6059      	str	r1, [r3, #4]
		node->next = insert_point;
    adb4:	601a      	str	r2, [r3, #0]
		insert_point->prev->next = node;
    adb6:	6851      	ldr	r1, [r2, #4]
    adb8:	600b      	str	r3, [r1, #0]
		insert_point->prev = node;
    adba:	6053      	str	r3, [r2, #4]
    adbc:	e7e8      	b.n	ad90 <_add_timeout.constprop.9+0x44>
    adbe:	bf00      	nop
    adc0:	20002084 	.word	0x20002084

0000adc4 <_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    adc4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    adc6:	2b00      	cmp	r3, #0
{
    adc8:	b570      	push	{r4, r5, r6, lr}
    adca:	4604      	mov	r4, r0
    adcc:	f100 0518 	add.w	r5, r0, #24
	if (timer->period > 0) {
    add0:	dd0b      	ble.n	adea <_timer_expiration_handler+0x26>
	__asm__ volatile(
    add2:	f04f 0320 	mov.w	r3, #32
    add6:	f3ef 8611 	mrs	r6, BASEPRI
    adda:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
    adde:	6a82      	ldr	r2, [r0, #40]	; 0x28
    ade0:	4629      	mov	r1, r5
    ade2:	f7ff ffb3 	bl	ad4c <_add_timeout.constprop.9>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ade6:	f386 8811 	msr	BASEPRI, r6
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
    adea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    adec:	3301      	adds	r3, #1
    adee:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
    adf0:	6a23      	ldr	r3, [r4, #32]
    adf2:	b10b      	cbz	r3, adf8 <_timer_expiration_handler+0x34>
		timer->expiry_fn(timer);
    adf4:	4620      	mov	r0, r4
    adf6:	4798      	blx	r3
	return list->head == list;
    adf8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    adfa:	42ac      	cmp	r4, r5
    adfc:	d010      	beq.n	ae20 <_timer_expiration_handler+0x5c>
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);

	if (!thread) {
    adfe:	b17c      	cbz	r4, ae20 <_timer_expiration_handler+0x5c>
	 * calling _unpend_thread() because a) this is the only place a thread
	 * can be taken off this pend queue, and b) the only place a thread
	 * can be put on the pend queue is at thread level, which of course
	 * cannot interrupt the current context.
	 */
	_unpend_thread(thread);
    ae00:	4620      	mov	r0, r4
    ae02:	f7ff ff98 	bl	ad36 <_unpend_thread>
	__asm__ volatile(
    ae06:	f04f 0320 	mov.w	r3, #32
    ae0a:	f3ef 8511 	mrs	r5, BASEPRI
    ae0e:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();
	_ready_thread(thread);
    ae12:	4620      	mov	r0, r4
    ae14:	f7ff ff82 	bl	ad1c <_ready_thread>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ae18:	f385 8811 	msr	BASEPRI, r5
    ae1c:	2300      	movs	r3, #0
    ae1e:	6663      	str	r3, [r4, #100]	; 0x64
    ae20:	bd70      	pop	{r4, r5, r6, pc}

0000ae22 <sys_dlist_remove>:
	node->prev->next = node->next;
    ae22:	e890 000c 	ldmia.w	r0, {r2, r3}
    ae26:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ae28:	6802      	ldr	r2, [r0, #0]
    ae2a:	6053      	str	r3, [r2, #4]
    ae2c:	4770      	bx	lr

0000ae2e <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int last_registered,
					      unsigned int key)
{
    ae2e:	b570      	push	{r4, r5, r6, lr}
    ae30:	2414      	movs	r4, #20
    ae32:	4615      	mov	r5, r2
    ae34:	fb04 0401 	mla	r4, r4, r1, r0
	event->poller = NULL;
    ae38:	2600      	movs	r6, #0
	for (; last_registered >= 0; last_registered--) {
    ae3a:	2900      	cmp	r1, #0
    ae3c:	da00      	bge.n	ae40 <clear_event_registrations+0x12>
		clear_event_registration(&events[last_registered]);
		irq_unlock(key);
		key = irq_lock();
	}
}
    ae3e:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
    ae40:	7b63      	ldrb	r3, [r4, #13]
	event->poller = NULL;
    ae42:	60a6      	str	r6, [r4, #8]
	switch (event->type) {
    ae44:	f003 030f 	and.w	r3, r3, #15
    ae48:	2b02      	cmp	r3, #2
    ae4a:	d003      	beq.n	ae54 <clear_event_registrations+0x26>
    ae4c:	2b04      	cmp	r3, #4
    ae4e:	d001      	beq.n	ae54 <clear_event_registrations+0x26>
    ae50:	2b01      	cmp	r3, #1
    ae52:	d102      	bne.n	ae5a <clear_event_registrations+0x2c>
		sys_dlist_remove(&event->_node);
    ae54:	4620      	mov	r0, r4
    ae56:	f7ff ffe4 	bl	ae22 <sys_dlist_remove>
    ae5a:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
    ae5e:	f04f 0320 	mov.w	r3, #32
    ae62:	f3ef 8511 	mrs	r5, BASEPRI
    ae66:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
    ae6a:	3901      	subs	r1, #1
    ae6c:	3c14      	subs	r4, #20
    ae6e:	e7e4      	b.n	ae3a <clear_event_registrations+0xc>

0000ae70 <signal_poll_event>:
}

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
    ae70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*must_reschedule = 0;
    ae72:	2300      	movs	r3, #0
    ae74:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
    ae76:	6883      	ldr	r3, [r0, #8]
{
    ae78:	4605      	mov	r5, r0
    ae7a:	460e      	mov	r6, r1
    ae7c:	4617      	mov	r7, r2
	if (!event->poller) {
    ae7e:	2b00      	cmp	r3, #0
    ae80:	d049      	beq.n	af16 <signal_poll_event+0xa6>
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
    ae82:	6819      	ldr	r1, [r3, #0]
	thread->base.thread_state &= ~states;
    ae84:	7a4b      	ldrb	r3, [r1, #9]
    ae86:	f023 0220 	bic.w	r2, r3, #32

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
    ae8a:	0798      	lsls	r0, r3, #30
    ae8c:	724a      	strb	r2, [r1, #9]
    ae8e:	d542      	bpl.n	af16 <signal_poll_event+0xa6>
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
    ae90:	6a0b      	ldr	r3, [r1, #32]
    ae92:	3302      	adds	r3, #2
    ae94:	d04a      	beq.n	af2c <signal_poll_event+0xbc>
	sys_dlist_remove(&thread->base.k_q_node);
    ae96:	4608      	mov	r0, r1
    ae98:	f7ff ffc3 	bl	ae22 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ae9c:	7a4b      	ldrb	r3, [r1, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    ae9e:	6a0c      	ldr	r4, [r1, #32]
    aea0:	f023 0302 	bic.w	r3, r3, #2
    aea4:	1c62      	adds	r2, r4, #1
    aea6:	724b      	strb	r3, [r1, #9]
	return _abort_timeout(&thread->base.timeout);
    aea8:	f101 0010 	add.w	r0, r1, #16
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    aeac:	d00c      	beq.n	aec8 <signal_poll_event+0x58>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    aeae:	4b21      	ldr	r3, [pc, #132]	; (af34 <signal_poll_event+0xc4>)
    aeb0:	695b      	ldr	r3, [r3, #20]
    aeb2:	4298      	cmp	r0, r3
	return (node == list->tail) ? NULL : node->next;
    aeb4:	bf1f      	itttt	ne
    aeb6:	690a      	ldrne	r2, [r1, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    aeb8:	6913      	ldrne	r3, [r2, #16]
    aeba:	191b      	addne	r3, r3, r4
    aebc:	6113      	strne	r3, [r2, #16]
	sys_dlist_remove(&timeout->node);
    aebe:	f7ff ffb0 	bl	ae22 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    aec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aec6:	620b      	str	r3, [r1, #32]
	return !(_is_thread_prevented_from_running(thread) ||
    aec8:	7a48      	ldrb	r0, [r1, #9]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
    aeca:	2e00      	cmp	r6, #0
    aecc:	bf0c      	ite	eq
    aece:	f06f 0303 	mvneq.w	r3, #3
    aed2:	2300      	movne	r3, #0
    aed4:	f010 041f 	ands.w	r4, r0, #31
    aed8:	664b      	str	r3, [r1, #100]	; 0x64
    aeda:	d11c      	bne.n	af16 <signal_poll_event+0xa6>
    aedc:	6a0b      	ldr	r3, [r1, #32]
    aede:	3301      	adds	r3, #1
    aee0:	d119      	bne.n	af16 <signal_poll_event+0xa6>

	if (!_is_thread_ready(thread)) {
		goto ready_event;
	}

	_add_thread_to_ready_q(thread);
    aee2:	4608      	mov	r0, r1
    aee4:	f7ff fa0a 	bl	a2fc <_add_thread_to_ready_q>
    aee8:	f3ef 8305 	mrs	r3, IPSR
    aeec:	2b0d      	cmp	r3, #13
    aeee:	d81b      	bhi.n	af28 <signal_poll_event+0xb8>
    aef0:	b123      	cbz	r3, aefc <signal_poll_event+0x8c>
    aef2:	4b11      	ldr	r3, [pc, #68]	; (af38 <signal_poll_event+0xc8>)
    aef4:	6858      	ldr	r0, [r3, #4]
    aef6:	f410 6000 	ands.w	r0, r0, #2048	; 0x800
    aefa:	d00b      	beq.n	af14 <signal_poll_event+0xa4>
	return _is_preempt(_current) && __must_switch_threads();
    aefc:	4b0d      	ldr	r3, [pc, #52]	; (af34 <signal_poll_event+0xc4>)
    aefe:	689b      	ldr	r3, [r3, #8]
    af00:	895b      	ldrh	r3, [r3, #10]
    af02:	2b7f      	cmp	r3, #127	; 0x7f
    af04:	d901      	bls.n	af0a <signal_poll_event+0x9a>
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    af06:	2000      	movs	r0, #0
    af08:	e004      	b.n	af14 <signal_poll_event+0xa4>
    af0a:	f7ff faf1 	bl	a4f0 <__must_switch_threads>
    af0e:	3000      	adds	r0, #0
    af10:	bf18      	it	ne
    af12:	2001      	movne	r0, #1
    af14:	6038      	str	r0, [r7, #0]
	event->state |= state;
    af16:	7b6b      	ldrb	r3, [r5, #13]
    af18:	ea46 1613 	orr.w	r6, r6, r3, lsr #4
    af1c:	f366 1307 	bfi	r3, r6, #4, #4
	event->poller = NULL;
    af20:	2000      	movs	r0, #0
	event->state |= state;
    af22:	736b      	strb	r3, [r5, #13]
	event->poller = NULL;
    af24:	60a8      	str	r0, [r5, #8]

ready_event:
	set_event_ready(event, state);
	return 0;
    af26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
    af28:	4620      	mov	r0, r4
    af2a:	e7f3      	b.n	af14 <signal_poll_event+0xa4>
		return -EAGAIN;
    af2c:	f06f 000a 	mvn.w	r0, #10
    af30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af32:	bf00      	nop
    af34:	20002084 	.word	0x20002084
    af38:	e000ed00 	.word	0xe000ed00

0000af3c <add_event>:
	return list->head == list;
    af3c:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
    af3e:	4298      	cmp	r0, r3
{
    af40:	b530      	push	{r4, r5, lr}
    af42:	d00a      	beq.n	af5a <add_event+0x1e>
    af44:	6844      	ldr	r4, [r0, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
    af46:	b144      	cbz	r4, af5a <add_event+0x1e>
    af48:	68a5      	ldr	r5, [r4, #8]
    af4a:	6812      	ldr	r2, [r2, #0]
    af4c:	682d      	ldr	r5, [r5, #0]
    af4e:	f992 200a 	ldrsb.w	r2, [r2, #10]
    af52:	f995 500a 	ldrsb.w	r5, [r5, #10]
    af56:	4295      	cmp	r5, r2
    af58:	da17      	bge.n	af8a <add_event+0x4e>
	node->next = list;
    af5a:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    af5c:	6843      	ldr	r3, [r0, #4]
    af5e:	604b      	str	r3, [r1, #4]
	list->tail->next = node;
    af60:	6843      	ldr	r3, [r0, #4]
    af62:	6019      	str	r1, [r3, #0]
	list->tail = node;
    af64:	6041      	str	r1, [r0, #4]
    af66:	bd30      	pop	{r4, r5, pc}
		if (_is_t1_higher_prio_than_t2(poller->thread,
    af68:	689d      	ldr	r5, [r3, #8]
    af6a:	682d      	ldr	r5, [r5, #0]
    af6c:	f995 500a 	ldrsb.w	r5, [r5, #10]
    af70:	4295      	cmp	r5, r2
    af72:	dd06      	ble.n	af82 <add_event+0x46>
		node->prev = insert_point->prev;
    af74:	685a      	ldr	r2, [r3, #4]
    af76:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    af78:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    af7a:	685a      	ldr	r2, [r3, #4]
    af7c:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    af7e:	6059      	str	r1, [r3, #4]
    af80:	bd30      	pop	{r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    af82:	42a3      	cmp	r3, r4
    af84:	d003      	beq.n	af8e <add_event+0x52>
    af86:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
    af88:	b10b      	cbz	r3, af8e <add_event+0x52>
    af8a:	2b00      	cmp	r3, #0
    af8c:	d1ec      	bne.n	af68 <add_event+0x2c>
	node->prev = list->tail;
    af8e:	e881 0011 	stmia.w	r1, {r0, r4}
    af92:	e7e5      	b.n	af60 <add_event+0x24>

0000af94 <k_poll_event_init>:
{
    af94:	b530      	push	{r4, r5, lr}
	event->type = type;
    af96:	7b44      	ldrb	r4, [r0, #13]
	event->obj = obj;
    af98:	6103      	str	r3, [r0, #16]
	event->type = type;
    af9a:	f361 0403 	bfi	r4, r1, #0, #4
	event->mode = mode;
    af9e:	7b81      	ldrb	r1, [r0, #14]
    afa0:	f362 0100 	bfi	r1, r2, #0, #1
    afa4:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
    afa6:	89c2      	ldrh	r2, [r0, #14]
	event->poller = NULL;
    afa8:	2500      	movs	r5, #0
	event->state = K_POLL_STATE_NOT_READY;
    afaa:	f365 1407 	bfi	r4, r5, #4, #4
	event->unused = 0;
    afae:	f365 024f 	bfi	r2, r5, #1, #15
	event->poller = NULL;
    afb2:	6085      	str	r5, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
    afb4:	7344      	strb	r4, [r0, #13]
	event->unused = 0;
    afb6:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
    afb8:	bd30      	pop	{r4, r5, pc}
	...

0000afbc <k_poll>:
{
    afbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afc0:	b087      	sub	sp, #28
    afc2:	4680      	mov	r8, r0
    afc4:	9101      	str	r1, [sp, #4]
    afc6:	4691      	mov	r9, r2
    afc8:	f04f 0320 	mov.w	r3, #32
    afcc:	f3ef 8111 	mrs	r1, BASEPRI
    afd0:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
    afd4:	4d4a      	ldr	r5, [pc, #296]	; (b100 <k_poll+0x144>)
    afd6:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= states;
    afd8:	7a53      	ldrb	r3, [r2, #9]
    afda:	f043 0320 	orr.w	r3, r3, #32
    afde:	7253      	strb	r3, [r2, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    afe0:	f381 8811 	msr	BASEPRI, r1
	struct _poller poller = { .thread = _current };
    afe4:	f10d 0a18 	add.w	sl, sp, #24
    afe8:	68aa      	ldr	r2, [r5, #8]
    afea:	f84a 2d0c 	str.w	r2, [sl, #-12]!
    afee:	4604      	mov	r4, r0
	for (int ii = 0; ii < num_events; ii++) {
    aff0:	2700      	movs	r7, #0
	int last_registered = -1, rc;
    aff2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
    aff6:	9b01      	ldr	r3, [sp, #4]
    aff8:	429f      	cmp	r7, r3
    affa:	db15      	blt.n	b028 <k_poll+0x6c>
	__asm__ volatile(
    affc:	f04f 0320 	mov.w	r3, #32
    b000:	f3ef 8711 	mrs	r7, BASEPRI
    b004:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
    b008:	68aa      	ldr	r2, [r5, #8]
    b00a:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
    b00c:	f013 0420 	ands.w	r4, r3, #32
    b010:	d144      	bne.n	b09c <k_poll+0xe0>
		clear_event_registrations(events, last_registered, key);
    b012:	463a      	mov	r2, r7
    b014:	4631      	mov	r1, r6
    b016:	4640      	mov	r0, r8
    b018:	f7ff ff09 	bl	ae2e <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b01c:	f387 8811 	msr	BASEPRI, r7
}
    b020:	4620      	mov	r0, r4
    b022:	b007      	add	sp, #28
    b024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
    b028:	f04f 0220 	mov.w	r2, #32
    b02c:	f3ef 8b11 	mrs	fp, BASEPRI
    b030:	f382 8811 	msr	BASEPRI, r2
	switch (event->type) {
    b034:	7b61      	ldrb	r1, [r4, #13]
    b036:	f001 020f 	and.w	r2, r1, #15
    b03a:	2a02      	cmp	r2, #2
    b03c:	d003      	beq.n	b046 <k_poll+0x8a>
    b03e:	2a04      	cmp	r2, #4
    b040:	d004      	beq.n	b04c <k_poll+0x90>
    b042:	2a01      	cmp	r2, #1
    b044:	d106      	bne.n	b054 <k_poll+0x98>
		if (event->signal->signaled) {
    b046:	6920      	ldr	r0, [r4, #16]
    b048:	6880      	ldr	r0, [r0, #8]
    b04a:	e001      	b.n	b050 <k_poll+0x94>
		if (!k_queue_is_empty(event->queue)) {
    b04c:	6920      	ldr	r0, [r4, #16]
    b04e:	6800      	ldr	r0, [r0, #0]
		if (event->signal->signaled) {
    b050:	2800      	cmp	r0, #0
    b052:	d148      	bne.n	b0e6 <k_poll+0x12a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
    b054:	f1b9 0f00 	cmp.w	r9, #0
    b058:	d016      	beq.n	b088 <k_poll+0xcc>
    b05a:	68a9      	ldr	r1, [r5, #8]
    b05c:	7a49      	ldrb	r1, [r1, #9]
    b05e:	068b      	lsls	r3, r1, #26
    b060:	d512      	bpl.n	b088 <k_poll+0xcc>
	switch (event->type) {
    b062:	2a02      	cmp	r2, #2
    b064:	d007      	beq.n	b076 <k_poll+0xba>
    b066:	2a04      	cmp	r2, #4
    b068:	d013      	beq.n	b092 <k_poll+0xd6>
    b06a:	2a01      	cmp	r2, #1
    b06c:	d109      	bne.n	b082 <k_poll+0xc6>
		add_event(&event->signal->poll_events, event, poller);
    b06e:	4652      	mov	r2, sl
    b070:	4621      	mov	r1, r4
    b072:	6920      	ldr	r0, [r4, #16]
    b074:	e003      	b.n	b07e <k_poll+0xc2>
		add_event(&event->sem->poll_events, event, poller);
    b076:	6920      	ldr	r0, [r4, #16]
    b078:	4652      	mov	r2, sl
    b07a:	4621      	mov	r1, r4
    b07c:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
    b07e:	f7ff ff5d 	bl	af3c <add_event>
	event->poller = poller;
    b082:	f8c4 a008 	str.w	sl, [r4, #8]
				++last_registered;
    b086:	3601      	adds	r6, #1
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b088:	f38b 8811 	msr	BASEPRI, fp
	for (int ii = 0; ii < num_events; ii++) {
    b08c:	3701      	adds	r7, #1
    b08e:	3414      	adds	r4, #20
    b090:	e7b1      	b.n	aff6 <k_poll+0x3a>
		add_event(&event->queue->poll_events, event, poller);
    b092:	6920      	ldr	r0, [r4, #16]
    b094:	4652      	mov	r2, sl
    b096:	4621      	mov	r1, r4
    b098:	3008      	adds	r0, #8
    b09a:	e7f0      	b.n	b07e <k_poll+0xc2>
	thread->base.thread_state &= ~states;
    b09c:	f023 0320 	bic.w	r3, r3, #32
    b0a0:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
    b0a2:	f1b9 0f00 	cmp.w	r9, #0
    b0a6:	d104      	bne.n	b0b2 <k_poll+0xf6>
    b0a8:	f387 8811 	msr	BASEPRI, r7
		return -EAGAIN;
    b0ac:	f06f 040a 	mvn.w	r4, #10
    b0b0:	e7b6      	b.n	b020 <k_poll+0x64>
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    b0b2:	a804      	add	r0, sp, #16
	_pend_current_thread(&wait_q, timeout);
    b0b4:	4649      	mov	r1, r9
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
    b0b6:	9004      	str	r0, [sp, #16]
    b0b8:	9005      	str	r0, [sp, #20]
	_pend_current_thread(&wait_q, timeout);
    b0ba:	f7ff fa09 	bl	a4d0 <_pend_current_thread>
	_update_time_slice_before_swap();
    b0be:	f7ff fac9 	bl	a654 <_update_time_slice_before_swap>
	return __swap(key);
    b0c2:	4638      	mov	r0, r7
    b0c4:	f7f5 fc60 	bl	988 <__swap>
    b0c8:	4604      	mov	r4, r0
	__asm__ volatile(
    b0ca:	f04f 0320 	mov.w	r3, #32
    b0ce:	f3ef 8511 	mrs	r5, BASEPRI
    b0d2:	f383 8811 	msr	BASEPRI, r3
	clear_event_registrations(events, last_registered, key);
    b0d6:	462a      	mov	r2, r5
    b0d8:	4631      	mov	r1, r6
    b0da:	4640      	mov	r0, r8
    b0dc:	f7ff fea7 	bl	ae2e <clear_event_registrations>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    b0e0:	f385 8811 	msr	BASEPRI, r5
	return swap_rc;
    b0e4:	e79c      	b.n	b020 <k_poll+0x64>
	event->state |= state;
    b0e6:	ea42 1211 	orr.w	r2, r2, r1, lsr #4
    b0ea:	f362 1107 	bfi	r1, r2, #4, #4
	event->poller = NULL;
    b0ee:	2300      	movs	r3, #0
    b0f0:	60a3      	str	r3, [r4, #8]
	event->state |= state;
    b0f2:	7361      	strb	r1, [r4, #13]
			clear_polling_state(_current);
    b0f4:	68a9      	ldr	r1, [r5, #8]
    b0f6:	7a4a      	ldrb	r2, [r1, #9]
    b0f8:	f022 0220 	bic.w	r2, r2, #32
    b0fc:	724a      	strb	r2, [r1, #9]
    b0fe:	e7c3      	b.n	b088 <k_poll+0xcc>
    b100:	20002084 	.word	0x20002084

0000b104 <_handle_obj_poll_events>:
}

/* returns 1 if a reschedule must take place, 0 otherwise */
int _handle_obj_poll_events(sys_dlist_t *events, u32_t state)
{
    b104:	b513      	push	{r0, r1, r4, lr}
	return list->head == list;
    b106:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    b108:	42a0      	cmp	r0, r4
    b10a:	d102      	bne.n	b112 <_handle_obj_poll_events+0xe>
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
		return 0;
    b10c:	2000      	movs	r0, #0
	}

	(void) signal_poll_event(poll_event, state, &must_reschedule);
	return must_reschedule;
}
    b10e:	b002      	add	sp, #8
    b110:	bd10      	pop	{r4, pc}
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    b112:	4620      	mov	r0, r4
    b114:	f7ff fe85 	bl	ae22 <sys_dlist_remove>
	if (!poll_event) {
    b118:	2c00      	cmp	r4, #0
    b11a:	d0f7      	beq.n	b10c <_handle_obj_poll_events+0x8>
	(void) signal_poll_event(poll_event, state, &must_reschedule);
    b11c:	aa01      	add	r2, sp, #4
    b11e:	4620      	mov	r0, r4
    b120:	f7ff fea6 	bl	ae70 <signal_poll_event>
	return must_reschedule;
    b124:	9801      	ldr	r0, [sp, #4]
    b126:	e7f2      	b.n	b10e <_handle_obj_poll_events+0xa>

0000b128 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    b128:	4770      	bx	lr
